WEBVTT
Kind: captions
Language: en

00:00:00.570 --> 00:00:01.410
PAUL: Hello again.

00:00:01.410 --> 00:00:03.180
It's entry number two.

00:00:03.180 --> 00:00:04.950
This time, let's
talk about video.

00:00:04.950 --> 00:00:07.670
So we're not even going
to look at any code.

00:00:07.670 --> 00:00:10.110
So if that's boring
to you, I guess

00:00:10.110 --> 00:00:11.640
you can stop watching now.

00:00:11.640 --> 00:00:13.980
But I wouldn't because
this is actually

00:00:13.980 --> 00:00:18.150
really kind of a fascinating
underpinning which

00:00:18.150 --> 00:00:20.515
I imagine will come
out in various ways

00:00:20.515 --> 00:00:21.390
throughout the build.

00:00:21.390 --> 00:00:23.680
But nonetheless, it's
worth talking about now--

00:00:23.680 --> 00:00:29.820
which is, how do you actually do
video playback in modern terms?

00:00:29.820 --> 00:00:34.450
Simple version, you take a video
element with a source equals

00:00:34.450 --> 00:00:41.610
something .mp4 or .mob or
whatever container codec combo

00:00:41.610 --> 00:00:42.460
works, right?

00:00:42.460 --> 00:00:45.455
And you can have
multiple sources inside.

00:00:45.455 --> 00:00:46.080
So fair enough.

00:00:46.080 --> 00:00:48.090
You can do that.

00:00:48.090 --> 00:00:49.860
More modern versions
use something

00:00:49.860 --> 00:00:54.060
called MSE, apparently,
which stands for Media Source

00:00:54.060 --> 00:00:57.060
Extensions, I think?

00:00:57.060 --> 00:00:58.860
Yes, that sounds about right.

00:00:58.860 --> 00:01:06.840
The idea is rather than giving
the video element a file,

00:01:06.840 --> 00:01:09.750
a link to a source, like
you would with an image

00:01:09.750 --> 00:01:11.360
or even an audio
element or something

00:01:11.360 --> 00:01:14.850
like that, what you do is
you have a buffer underneath.

00:01:14.850 --> 00:01:17.640
So you attach a buffer
to the video elements

00:01:17.640 --> 00:01:21.340
and then you start filling
in that buffer yourself.

00:01:21.340 --> 00:01:21.990
Cool.

00:01:21.990 --> 00:01:25.410
So you kind of maybe XHR
in each individual chunk

00:01:25.410 --> 00:01:27.870
so that you can start
playing the video quickly.

00:01:27.870 --> 00:01:31.860
You get your video in chunks.

00:01:31.860 --> 00:01:33.720
Fact checks, HR--
whatever works.

00:01:33.720 --> 00:01:35.220
And you build up that buffer.

00:01:35.220 --> 00:01:40.780
And the video player plays that
video and everybody's happy.

00:01:40.780 --> 00:01:43.980
So that's like the next step up.

00:01:43.980 --> 00:01:45.870
Then there's another
step up above that,

00:01:45.870 --> 00:01:49.320
which is a thing called DASH,
which is Dynamic Adaptive

00:01:49.320 --> 00:01:52.710
Streaming Over HTTP.

00:01:52.710 --> 00:01:55.710
I don't know whether
they named it DASH before

00:01:55.710 --> 00:01:57.420
or after-- they went,
let's call it DASH.

00:01:57.420 --> 00:01:58.378
What does it stand for?

00:01:58.378 --> 00:01:59.160
I don't know.

00:01:59.160 --> 00:02:04.020
Dynamic Adaptive
Sugar-filled Helium.

00:02:04.020 --> 00:02:06.610
No, that's not going to work.

00:02:06.610 --> 00:02:09.600
However they did
it, DASH is the idea

00:02:09.600 --> 00:02:15.120
that, instead of one video file,
that is, say, like 1080p video,

00:02:15.120 --> 00:02:17.130
you have different
quality versions

00:02:17.130 --> 00:02:21.360
of your video and
your audio and you

00:02:21.360 --> 00:02:24.261
want to swap depending on what
the user's bandwidth is looking

00:02:24.261 --> 00:02:24.760
like.

00:02:24.760 --> 00:02:28.020
So if they're in a low
bandwidth situation,

00:02:28.020 --> 00:02:31.740
then you want to adapt
to a lower quality video

00:02:31.740 --> 00:02:32.940
to just keep them going.

00:02:32.940 --> 00:02:35.770
And this dovetails into MSE
because you've got this buffer

00:02:35.770 --> 00:02:36.870
that you're filling.

00:02:36.870 --> 00:02:40.560
Well, why not fill that buffer
with a lower quality version

00:02:40.560 --> 00:02:41.990
when that makes sense to do so?

00:02:41.990 --> 00:02:45.430
Or a higher quality version when
that makes sense to do that?

00:02:45.430 --> 00:02:49.890
So you're using DASH to kind
of swap between qualities,

00:02:49.890 --> 00:02:52.770
and you're filling that
buffer in that way.

00:02:52.770 --> 00:02:57.122
So that's MSE and DASH in a
very, very, very short space

00:02:57.122 --> 00:02:58.830
of time and that's
probably about as well

00:02:58.830 --> 00:03:00.540
as I understand them.

00:03:00.540 --> 00:03:04.154
Now in order to get your
video into that format--

00:03:04.154 --> 00:03:05.820
there are a bunch of
ways you can do it,

00:03:05.820 --> 00:03:08.280
but there's normally
something like FFmpeg

00:03:08.280 --> 00:03:10.590
is going to be used
to take the big video

00:03:10.590 --> 00:03:12.390
and turn it into all
the different quality

00:03:12.390 --> 00:03:13.910
variations that you need.

00:03:13.910 --> 00:03:16.410
All those different-- I think
they're called representations

00:03:16.410 --> 00:03:17.830
or adaptations--

00:03:17.830 --> 00:03:21.810
anyway, representations,
I think is what it is.

00:03:21.810 --> 00:03:26.610
And there's a bunch of
tools that you can use.

00:03:26.610 --> 00:03:30.000
The one I've been using is
called the shaka-packager,

00:03:30.000 --> 00:03:32.160
which ties into the
shaka-player, which I'll

00:03:32.160 --> 00:03:34.171
talk about at some other point.

00:03:34.171 --> 00:03:35.670
But the shaka-packager--
you give it

00:03:35.670 --> 00:03:39.030
all the different
versions of your video

00:03:39.030 --> 00:03:41.940
and it creates this
manifest that has

00:03:41.940 --> 00:03:44.850
like how much bandwidth each
one needs and what size it is.

00:03:44.850 --> 00:03:49.630
Is it 1280 by 720
or 1920 by 1080?

00:03:49.630 --> 00:03:54.080
And what codecs it's using--
all that kind of stuff.

00:03:54.080 --> 00:03:55.860
So it makes this
big manifest that

00:03:55.860 --> 00:03:59.220
is a DASH manifest
that you can hand over

00:03:59.220 --> 00:04:01.410
to a DASH-compatible player.

00:04:01.410 --> 00:04:02.480
So that's all good.

00:04:02.480 --> 00:04:04.520
That works on--

00:04:04.520 --> 00:04:09.240
I believe it's Chrome, I
think Firefox, desktop Safari.

00:04:09.240 --> 00:04:12.690
I make that distinction
because it matters.

00:04:12.690 --> 00:04:15.210
Chrome, Firefox, desktop Safari.

00:04:15.210 --> 00:04:19.440
I don't remember how Edge is.

00:04:19.440 --> 00:04:21.779
I'll have to look that one up.

00:04:21.779 --> 00:04:23.670
Or you can look it up yourself.

00:04:23.670 --> 00:04:28.050
Because, I mean, that's
how the internet works.

00:04:28.050 --> 00:04:30.480
And then on the
mobile Safari side,

00:04:30.480 --> 00:04:32.220
things are a little different.

00:04:32.220 --> 00:04:35.130
There's a thing called
HLS, which I can't

00:04:35.130 --> 00:04:38.100
remember what that stands for.

00:04:38.100 --> 00:04:39.892
Bear with me, I'm just
going to Google it.

00:04:47.000 --> 00:04:48.580
HTTP Live Streaming.

00:04:48.580 --> 00:04:49.770
Effortless, you see?

00:04:51.560 --> 00:05:00.010
And it's an alternative way
of splitting down the big .mp4

00:05:00.010 --> 00:05:04.720
or whatever you've got into
different chunks that you can

00:05:04.720 --> 00:05:06.360
then swap between.

00:05:06.360 --> 00:05:08.620
And so in some
ways, it's sort of

00:05:08.620 --> 00:05:12.550
analogous to DASH because you
have these different versions

00:05:12.550 --> 00:05:13.460
of the file.

00:05:13.460 --> 00:05:16.140
So you started with big HD
video and you split it down

00:05:16.140 --> 00:05:17.140
to different qualities.

00:05:17.140 --> 00:05:19.690
And then you make
an HLS manifest,

00:05:19.690 --> 00:05:24.850
and there are tools that you can
get that will segment the media

00:05:24.850 --> 00:05:30.970
file and make a playlist of
all these different variations

00:05:30.970 --> 00:05:33.590
and all that kind of stuff.

00:05:33.590 --> 00:05:36.190
And then you end up
at the end of this,

00:05:36.190 --> 00:05:42.280
instead of a DASH manifest, you
end up with an M3U8 manifest.

00:05:42.280 --> 00:05:44.740
It's a playlist file,
which on mobile Safari,

00:05:44.740 --> 00:05:47.320
you just say video source
equals and then you

00:05:47.320 --> 00:05:48.880
give it that playlist file--

00:05:48.880 --> 00:05:50.860
this M3U8 playlist file--

00:05:50.860 --> 00:05:53.330
and it will do the rest.

00:05:53.330 --> 00:05:55.715
So that's the kind of video
on demand way of doing it.

00:05:55.715 --> 00:05:57.340
I think it's slightly
different, again,

00:05:57.340 --> 00:05:58.381
if you do live streaming.

00:05:58.381 --> 00:06:01.840
I haven't even looked at live
streaming yet, so bear with me.

00:06:01.840 --> 00:06:06.030
And I haven't even looked at
things like encrypted media.

00:06:06.030 --> 00:06:08.050
All things for future stuff.

00:06:08.050 --> 00:06:10.180
Right now, I've been
concentrating on,

00:06:10.180 --> 00:06:11.800
I have a video.

00:06:11.800 --> 00:06:15.340
What on earth do I need to do
to this video to make it play?

00:06:15.340 --> 00:06:16.730
So there you go.

00:06:16.730 --> 00:06:18.470
So there's the MSE.

00:06:18.470 --> 00:06:20.120
But really, DASH and HLS.

00:06:20.120 --> 00:06:22.900
DASH and HLS seem to be
the two things that I'm

00:06:22.900 --> 00:06:24.430
going to be looking at.

00:06:24.430 --> 00:06:26.740
Hopefully, making
them automatically

00:06:26.740 --> 00:06:30.820
swap between whichever
one depending on support.

00:06:30.820 --> 00:06:32.470
And I guess that's that.

00:06:32.470 --> 00:06:36.160
So stick with me.

00:06:36.160 --> 00:06:38.380
In the next episode,
I think I'm going

00:06:38.380 --> 00:06:41.442
to show you around some of the
prototypes I've been building.

00:06:41.442 --> 00:06:43.900
Because those have been quite
interesting to build as well.

00:06:43.900 --> 00:06:45.820
To try out some of these things.

00:06:45.820 --> 00:06:47.500
I'll show you the manifests.

00:06:47.500 --> 00:06:51.250
Yes, I will show you the
DASH and HLS manifests.

00:06:51.250 --> 00:06:52.490
Loads of stuff.

00:06:52.490 --> 00:06:56.140
There's so much that
we can talk about.

00:06:56.140 --> 00:06:58.420
Speaking of which,
if there are things

00:06:58.420 --> 00:07:00.350
that you want me to
cover, don't forget

00:07:00.350 --> 00:07:01.600
to drop those in the comments.

00:07:01.600 --> 00:07:04.710
Everybody who's been
commenting so far-- thank you.

00:07:04.710 --> 00:07:07.960
It's lovely to have your
input and your feedback.

00:07:07.960 --> 00:07:13.717
And I will see you
in the next episode.

00:07:13.717 --> 00:07:15.050
Hey, folks, thanks for watching.

00:07:15.050 --> 00:07:17.050
Don't forget that there
is more content that you

00:07:17.050 --> 00:07:18.606
can find kind of over here-ish.

00:07:18.606 --> 00:07:20.980
And if you want to subscribe,
there's probably a button--

00:07:20.980 --> 00:07:22.990
I dunno, maybe there.

00:07:22.990 --> 00:07:24.450
Maybe somewhere around there.

00:07:24.450 --> 00:07:25.960
Click that if you've
not done that.

00:07:25.960 --> 00:07:27.810
Brilliant.

