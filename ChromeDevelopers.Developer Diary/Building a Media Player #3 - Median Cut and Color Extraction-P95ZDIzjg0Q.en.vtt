WEBVTT
Kind: captions
Language: en

00:00:00.429 --> 00:00:01.470
PAUL LEWIS: Hello, folks.

00:00:01.470 --> 00:00:06.270
Let's talk about colors,
and the prototyping

00:00:06.270 --> 00:00:08.340
that I've been
doing in that area.

00:00:08.340 --> 00:00:10.470
If you remember from the--

00:00:10.470 --> 00:00:12.230
I think it was the first entry?

00:00:12.230 --> 00:00:13.320
Yeah, probably.

00:00:13.320 --> 00:00:16.789
The one where I was talking
about the icons, which

00:00:16.789 --> 00:00:17.580
I've got on screen.

00:00:17.580 --> 00:00:18.079
You can see.

00:00:18.079 --> 00:00:21.330
Do you remember how I was saying
the color scheme of the site

00:00:21.330 --> 00:00:24.135
was going to adapt
to the content?

00:00:24.135 --> 00:00:26.760
Well, if you remember that, and
I mentioned I think at the time

00:00:26.760 --> 00:00:28.820
that I was using a
thing called Median Cut.

00:00:28.820 --> 00:00:31.170
And I thought I'd show
you a little bit more

00:00:31.170 --> 00:00:34.080
around that in this
particular entry.

00:00:34.080 --> 00:00:37.980
So what I have is I've
got a script here,

00:00:37.980 --> 00:00:39.510
which it's all JavaScript.

00:00:39.510 --> 00:00:42.660
It's written in node, which
I would expect to ultimately

00:00:42.660 --> 00:00:46.840
be part of the build process.

00:00:46.840 --> 00:00:49.665
So that when I take a video
in, and its thumbnail image,

00:00:49.665 --> 00:00:51.540
I can pass it through
to this script and say,

00:00:51.540 --> 00:00:55.740
what colors do I need to
have from for this video?

00:00:55.740 --> 00:00:58.225
And it will spit me out
a palette of 16 colors.

00:00:58.225 --> 00:00:59.350
Let me show you it running.

00:01:02.140 --> 00:01:03.390
There on the screen there.

00:01:03.390 --> 00:01:06.990
Node, swatch test, and then
I've got this image here

00:01:06.990 --> 00:01:10.050
that I took of Gibraltar
when I was there.

00:01:10.050 --> 00:01:12.880
It's a very nice
place to go and visit.

00:01:12.880 --> 00:01:15.990
It's quite small though.

00:01:15.990 --> 00:01:19.650
I think it's like a
mile long or something.

00:01:19.650 --> 00:01:20.640
I really enjoyed it.

00:01:20.640 --> 00:01:25.260
Anyway, nonetheless we
have the photo of that.

00:01:25.260 --> 00:01:26.740
And we'll run this.

00:01:26.740 --> 00:01:29.560
And you can see it says
quantizing to 16 buckets.

00:01:29.560 --> 00:01:31.200
So what it's doing
is it's trying

00:01:31.200 --> 00:01:36.690
to find the 16 representative
colors from the image.

00:01:36.690 --> 00:01:39.210
And it spits out a
bunch of RGB values.

00:01:39.210 --> 00:01:42.150
But I've also had it
make an HTML file.

00:01:42.150 --> 00:01:44.840
So if I double click,
looks like this.

00:01:44.840 --> 00:01:48.240
And so this is the palette of
16 colors that it's derived from

00:01:48.240 --> 00:01:50.370
the photo, which,
if I put the photo,

00:01:50.370 --> 00:01:54.700
you can see that that's-- yeah,
those colors look correct.

00:01:54.700 --> 00:01:55.750
So how does it do it?

00:01:55.750 --> 00:01:57.720
Well, Median Cut is the answer.

00:01:57.720 --> 00:02:00.510
But let me show you
around the code.

00:02:00.510 --> 00:02:04.800
So the swatch test, it loads the
image that whatever I give it,

00:02:04.800 --> 00:02:07.430
and then it gets the
pixels back for the image.

00:02:07.430 --> 00:02:09.630
And it asks the
swatch class, which

00:02:09.630 --> 00:02:11.560
I'll step into in a
moment, to quantize--

00:02:11.560 --> 00:02:15.180
quantize is basically
grouping in this instance--

00:02:15.180 --> 00:02:17.490
and then it orders
them by luminance

00:02:17.490 --> 00:02:21.180
because you got to order
the colors by something.

00:02:21.180 --> 00:02:23.430
And sort of
brightness, luminance,

00:02:23.430 --> 00:02:26.220
is pretty much one
of the best ways

00:02:26.220 --> 00:02:28.556
to do that because
it means you know

00:02:28.556 --> 00:02:31.414
that it's going to kind of
get brighter as it goes along.

00:02:31.414 --> 00:02:33.580
And anyway, we'll come back
to that in a little bit.

00:02:33.580 --> 00:02:35.070
And then you see
I write that out,

00:02:35.070 --> 00:02:38.370
and then I write this file
just so that I could show you

00:02:38.370 --> 00:02:40.200
basically what's in the swatch.

00:02:40.200 --> 00:02:41.910
So how do we do a swatch?

00:02:41.910 --> 00:02:43.980
How do we create those images?

00:02:43.980 --> 00:02:46.920
Well, loading is just a
case of loading the image.

00:02:46.920 --> 00:02:49.200
And I am using Get
Pixels here, which

00:02:49.200 --> 00:02:54.030
is a node module that
kind of behaves similarly

00:02:54.030 --> 00:02:58.170
to the canvas that you can
draw in an image into a canvas,

00:02:58.170 --> 00:03:00.930
and then you can say get
image data on the canvas.

00:03:00.930 --> 00:03:06.940
And it would give you back a
contiguous array of pixel data,

00:03:06.940 --> 00:03:08.440
which means that
rather than having,

00:03:08.440 --> 00:03:11.160
say, an array of
objects with RGBA,

00:03:11.160 --> 00:03:16.710
you just get one long
array with RGBA, RGBA.

00:03:16.710 --> 00:03:19.080
And you have to step
up in groups of four

00:03:19.080 --> 00:03:23.640
and pull the red, green,
blue, alpha values per pixel

00:03:23.640 --> 00:03:24.720
as like a block.

00:03:24.720 --> 00:03:27.837
Anyway, so you can see
actually what I do is I

00:03:27.837 --> 00:03:29.670
call Get Pixels, which
does a similar thing.

00:03:29.670 --> 00:03:32.310
It gives you back one of
these contiguous arrays.

00:03:32.310 --> 00:03:35.790
And I convert these
across the RGBA, well,

00:03:35.790 --> 00:03:37.600
I see RGB in this
particular instance

00:03:37.600 --> 00:03:39.240
because I don't need
the alpha values.

00:03:39.240 --> 00:03:40.744
You can see that
it's pretty much

00:03:40.744 --> 00:03:41.910
what I was explaining there.

00:03:41.910 --> 00:03:45.780
You go open y, go
open xy values.

00:03:45.780 --> 00:03:50.820
So I go open each row
and I times it by 4.

00:03:50.820 --> 00:03:52.740
Because I know that
each one of those pixels

00:03:52.740 --> 00:03:57.760
will have four
items in the array.

00:03:57.760 --> 00:03:58.860
So I pull those out.

00:03:58.860 --> 00:04:02.800
So we end up with an
array of objects, which

00:04:02.800 --> 00:04:06.660
all have RG and B values in.

00:04:06.660 --> 00:04:08.990
And that's one per
pixel of the image.

00:04:08.990 --> 00:04:09.490
Great.

00:04:09.490 --> 00:04:13.560
The next thing to do is actually
do this Median Cut stuff.

00:04:13.560 --> 00:04:16.980
And if you look at the
Wikipedia article on Median Cut,

00:04:16.980 --> 00:04:19.649
it's actually really
good as an explanation.

00:04:19.649 --> 00:04:21.450
It explains that
what you do is you

00:04:21.450 --> 00:04:28.149
find across all of
your pixels which

00:04:28.149 --> 00:04:29.940
component, the red,
the green, or the blue,

00:04:29.940 --> 00:04:34.020
has the most variance in it,
which ones have the largest

00:04:34.020 --> 00:04:35.530
range of values.

00:04:35.530 --> 00:04:37.740
And you use that one, that
component, the red, green,

00:04:37.740 --> 00:04:41.550
or the blue as the one to
order all the pixels by.

00:04:41.550 --> 00:04:42.860
So you'll say for example--

00:04:42.860 --> 00:04:44.610
you go through that
process and you go ah,

00:04:44.610 --> 00:04:46.344
blue is the one with
the most variance.

00:04:46.344 --> 00:04:47.760
And what you do
is you order them,

00:04:47.760 --> 00:04:51.690
all the pixels by blue,
that blue component value,

00:04:51.690 --> 00:04:57.110
and then you split the
whole array in two.

00:04:57.110 --> 00:04:59.150
So now you've got 2 buckets.

00:04:59.150 --> 00:05:01.650
And you repeat that process
to the end with four,

00:05:01.650 --> 00:05:04.720
and then eight, and then 16,
and so on, and so on, and so on.

00:05:04.720 --> 00:05:06.420
And the idea is that
eventually you'll

00:05:06.420 --> 00:05:09.797
reach the base case of
this recursive process.

00:05:09.797 --> 00:05:12.380
And you'll say right, I've got
bucket with however many pixels

00:05:12.380 --> 00:05:12.880
in.

00:05:12.880 --> 00:05:15.650
And you average
that whole bucket.

00:05:15.650 --> 00:05:18.690
Now, at each step of
that recursive process,

00:05:18.690 --> 00:05:21.910
you could say need to order
by red, or green, or blue.

00:05:21.910 --> 00:05:24.360
So you'll always run the
process that gets you

00:05:24.360 --> 00:05:26.560
the one with the biggest range.

00:05:26.560 --> 00:05:28.920
So if you see here I've got
this find biggest range.

00:05:28.920 --> 00:05:31.826
And it just takes
a bunch of pixels.

00:05:31.826 --> 00:05:33.950
And you can see I step
through each pixel in there,

00:05:33.950 --> 00:05:35.580
and I figure out the--

00:05:35.580 --> 00:05:36.330
ooh, that's wrong.

00:05:36.330 --> 00:05:37.730
That should be max.

00:05:37.730 --> 00:05:42.040
Max, max, max.

00:05:42.040 --> 00:05:45.000
Ooh, fixing bugs on the fly?

00:05:45.000 --> 00:05:45.590
Eh?

00:05:45.590 --> 00:05:47.500
We'll have to run that again
to see if that actually

00:05:47.500 --> 00:05:48.125
fixes anything.

00:05:48.125 --> 00:05:52.360
That's what you get,
Paul, when you copy paste.

00:05:52.360 --> 00:05:55.270
Just as well it's a
prototype, isn't it?

00:05:55.270 --> 00:05:57.010
So anyway, we go
through that process

00:05:57.010 --> 00:05:58.630
and we figure out
the max and the min.

00:05:58.630 --> 00:06:00.880
And then we figure out whether
the red, green, or blue

00:06:00.880 --> 00:06:03.460
has the biggest range.

00:06:03.460 --> 00:06:06.490
And then we basically
return red, green, or blue,

00:06:06.490 --> 00:06:09.142
depending on which one
has the biggest range.

00:06:09.142 --> 00:06:10.808
That shouldn't have
a semi-colon either.

00:06:10.808 --> 00:06:13.540
There we go.

00:06:13.540 --> 00:06:15.640
Next up we have the quantizing.

00:06:15.640 --> 00:06:20.640
So imagine now that we've
ordered our array, however

00:06:20.640 --> 00:06:24.290
big that is of pixels
by red, green, or blue.

00:06:24.290 --> 00:06:28.100
And we now need to bucket
them appropriately.

00:06:28.100 --> 00:06:31.850
So let's do the
recursive case first.

00:06:31.850 --> 00:06:36.760
So we started with a big array,
say 1,000 pixels in there,

00:06:36.760 --> 00:06:37.710
or whatever.

00:06:37.710 --> 00:06:40.030
And we figure out which one
of the components, the R, G

00:06:40.030 --> 00:06:42.100
or the B that we
want to sort by.

00:06:42.100 --> 00:06:44.020
So we then sort all
our pixels by that.

00:06:44.020 --> 00:06:45.400
And then what we
do is we slice--

00:06:45.400 --> 00:06:46.780
hence the name median--

00:06:46.780 --> 00:06:48.190
slice it down the middle.

00:06:48.190 --> 00:06:50.050
And there we basically quantize.

00:06:50.050 --> 00:06:53.860
We call down into the same
function, again, recursively

00:06:53.860 --> 00:06:55.960
with the left half
of the sorted array

00:06:55.960 --> 00:06:58.270
and the right half
of the sorted array.

00:06:58.270 --> 00:07:00.440
And we increment the
depth value by 1.

00:07:00.440 --> 00:07:03.160
And we still have maintained
what max depth is now.

00:07:03.160 --> 00:07:06.880
I'm going for 16, which
is 2 to the power of 4.

00:07:06.880 --> 00:07:10.300
So you'll see that my
max depth is defaulting

00:07:10.300 --> 00:07:13.450
to whatever this default depth
is, which at the top you'll see

00:07:13.450 --> 00:07:16.180
is 4.

00:07:16.180 --> 00:07:20.950
So 1 would be to doing to
2 buckets, 2 would be to 4,

00:07:20.950 --> 00:07:23.500
3 would be to 8, and
4 would be to 16.

00:07:23.500 --> 00:07:27.910
And that's how we get the
16 colors in the bucket

00:07:27.910 --> 00:07:29.484
and the base case.

00:07:29.484 --> 00:07:30.400
This is the base case.

00:07:30.400 --> 00:07:34.990
When we actually hit the
depth equaling the max depth,

00:07:34.990 --> 00:07:38.830
we step through all the
colors, in all the pixels

00:07:38.830 --> 00:07:40.360
in that particular bucket.

00:07:40.360 --> 00:07:43.390
And we add them all up,
all their RDV values up,

00:07:43.390 --> 00:07:45.520
and then we divide by
the number of values

00:07:45.520 --> 00:07:47.890
we have to get the
average and round it.

00:07:47.890 --> 00:07:50.880
And we return that as an array
with just a single color in.

00:07:50.880 --> 00:07:53.230
And because I've got the
spread operator here,

00:07:53.230 --> 00:07:59.230
all those will then get turned
back into an array of colors.

00:07:59.230 --> 00:08:01.030
And that's basically
how we do it.

00:08:01.030 --> 00:08:02.050
Ordering by luminance.

00:08:02.050 --> 00:08:06.370
If you want to do that,
it's very, very well

00:08:06.370 --> 00:08:09.430
documented on Wikipedia
and wherever else.

00:08:09.430 --> 00:08:13.930
That says take a pixel and
times it's red component by--

00:08:13.930 --> 00:08:21.160
in this case 0.2126, green by
0.7152, and the blue by 0.0722.

00:08:21.160 --> 00:08:23.860
That will give you a scalar
value, a number which

00:08:23.860 --> 00:08:26.120
you can then use to order.

00:08:26.120 --> 00:08:28.570
So you see it's part
of a sorting function

00:08:28.570 --> 00:08:31.120
here where I can calculate the
luminance for a given pixel.

00:08:31.120 --> 00:08:34.260
And then I just sort
my values by that.

00:08:34.260 --> 00:08:36.730
And that is basically
what's involved.

00:08:36.730 --> 00:08:40.750
Now, since I have
actually fixed the bug,

00:08:40.750 --> 00:08:43.490
let's run it again
and see what happens.

00:08:43.490 --> 00:08:44.850
So let's do that.

00:08:51.810 --> 00:08:53.850
Do we get a vastly
different swatch?

00:08:53.850 --> 00:08:54.800
We do.

00:08:54.800 --> 00:08:55.300
We do.

00:08:55.300 --> 00:08:57.330
We get a different swatch now.

00:08:57.330 --> 00:08:58.860
That's my fault
for having a bug.

00:08:58.860 --> 00:09:00.540
But again, you see those colors.

00:09:00.540 --> 00:09:04.140
If I bring the
image as well, you

00:09:04.140 --> 00:09:07.740
can see that those
colors are still correct.

00:09:07.740 --> 00:09:11.092
It's just that I was doing a
Median Cut in the wrong place

00:09:11.092 --> 00:09:13.050
essentially by ordering
by the wrong component.

00:09:13.050 --> 00:09:15.306
But you see now I actually
get a much broader palette.

00:09:15.306 --> 00:09:15.930
So that's good.

00:09:15.930 --> 00:09:19.630
Glad we had this chat.

00:09:19.630 --> 00:09:20.130
Ha, ha.

00:09:20.130 --> 00:09:20.820
Good.

00:09:20.820 --> 00:09:21.990
So that's how this works.

00:09:21.990 --> 00:09:23.781
Now, the other thing
you can do once you've

00:09:23.781 --> 00:09:26.760
got a color like this,
is you could do things

00:09:26.760 --> 00:09:28.530
like complementary colors.

00:09:28.530 --> 00:09:32.480
If you think about the HSL--

00:09:32.480 --> 00:09:34.612
if you've not done
HSL, it's where--

00:09:34.612 --> 00:09:36.570
you can think of it as
like a color wheel going

00:09:36.570 --> 00:09:40.610
from red all the way around
the rainbow, back to red again.

00:09:40.610 --> 00:09:42.132
So that's the H, the hue.

00:09:42.132 --> 00:09:43.590
And you think of
that in the color.

00:09:43.590 --> 00:09:46.680
I think you actually mark
that between 0 and 360 degrees

00:09:46.680 --> 00:09:48.215
when you mark it in CSX.

00:09:48.215 --> 00:09:50.340
And then there's the
saturation, which is obviously

00:09:50.340 --> 00:09:51.970
how saturated the color is.

00:09:51.970 --> 00:09:54.510
And lightness taking
it from white to black.

00:09:54.510 --> 00:09:58.340
And I think 50%
lightness is essentially

00:09:58.340 --> 00:10:02.610
kind of the color in the middle
between black, the color,

00:10:02.610 --> 00:10:05.170
and white, if that makes sense.

00:10:05.170 --> 00:10:07.050
But what we can do is
if we have a color,

00:10:07.050 --> 00:10:09.150
and wherever it is
on that color wheel,

00:10:09.150 --> 00:10:12.030
and we spin it through
180 degrees, that will

00:10:12.030 --> 00:10:13.210
be the complementary color.

00:10:13.210 --> 00:10:16.000
So let me just show you that
in dev tools very quickly.

00:10:16.000 --> 00:10:18.240
So I've picked this one here.

00:10:18.240 --> 00:10:19.700
This one here.

00:10:19.700 --> 00:10:23.190
And in dev tools you
can click on the color

00:10:23.190 --> 00:10:24.510
and you get this little thing.

00:10:24.510 --> 00:10:26.680
And it's currently
set to an RGBA value.

00:10:26.680 --> 00:10:31.650
But if I do that, you can see
that it's now gone into HSLA.

00:10:31.650 --> 00:10:33.850
So you can know
ignore the alphabet.

00:10:33.850 --> 00:10:35.550
Because we don't need to know.

00:10:35.550 --> 00:10:41.340
So 48 plus 180 degrees would
be 228 if my math is correct.

00:10:41.340 --> 00:10:44.890
And then you see we have
this kind of purple color.

00:10:44.890 --> 00:10:46.140
Whoopsy daisy.

00:10:46.140 --> 00:10:47.860
So that's the way
it was originally.

00:10:47.860 --> 00:10:48.670
In front of me?

00:10:48.670 --> 00:10:49.320
Yeah.

00:10:49.320 --> 00:10:52.670
So I don't know how I'm going
to put this side by side.

00:10:52.670 --> 00:10:54.480
But if I could, I would easily.

00:10:54.480 --> 00:10:55.980
But I don't think
I can very easily.

00:10:58.511 --> 00:10:59.010
Wait.

00:10:59.010 --> 00:11:00.218
Wait, wait, wait, wait, wait.

00:11:00.218 --> 00:11:01.080
Did I say 136?

00:11:01.080 --> 00:11:02.940
No.

00:11:02.940 --> 00:11:04.640
Let we just reload this page.

00:11:04.640 --> 00:11:05.600
Did I get that wrong?

00:11:05.600 --> 00:11:07.240
Oh no, it's because it's in RGB.

00:11:07.240 --> 00:11:08.773
Deary me, I am having a bad day.

00:11:08.773 --> 00:11:09.273
HSL.

00:11:09.273 --> 00:11:10.140
There we are.

00:11:10.140 --> 00:11:15.000
So if I do 228, you see I end up
with this kind of purple color,

00:11:15.000 --> 00:11:17.900
which, you see, also
works just fine in terms

00:11:17.900 --> 00:11:18.900
of the colors around it.

00:11:18.900 --> 00:11:21.191
But it is actually technically
the complementary color.

00:11:21.191 --> 00:11:23.730
So if I pulled out the
kind of light brown

00:11:23.730 --> 00:11:25.500
as this is the color
I think I should

00:11:25.500 --> 00:11:28.350
use as the dominant, the
primary color for this palette,

00:11:28.350 --> 00:11:30.300
then I can also find
its complementary color

00:11:30.300 --> 00:11:32.550
by converting to HSL
and then spinning it

00:11:32.550 --> 00:11:34.350
through 180 degrees.

00:11:34.350 --> 00:11:38.010
There is plenty
of code out there

00:11:38.010 --> 00:11:41.232
to show how you convert
from RGB over to HSL,

00:11:41.232 --> 00:11:42.940
so I'm not going to
get into any of that.

00:11:42.940 --> 00:11:45.399
And also I think you
probably can do it in SAS.

00:11:45.399 --> 00:11:47.190
I imagine there will
be sort of SAS helpers

00:11:47.190 --> 00:11:48.270
that let you do that.

00:11:48.270 --> 00:11:48.841
Maybe not.

00:11:48.841 --> 00:11:50.590
But all the same, there
is plenty of code.

00:11:50.590 --> 00:11:51.220
So I'm going to go into that.

00:11:51.220 --> 00:11:52.140
But there you go.

00:11:52.140 --> 00:11:58.530
That is how I intend to get
from a thumbnail of a video

00:11:58.530 --> 00:12:01.620
and find out its
colors, and then

00:12:01.620 --> 00:12:04.841
figure out what swatch I need.

00:12:04.841 --> 00:12:05.340
Huh?

00:12:05.340 --> 00:12:05.700
Brilliant.

00:12:05.700 --> 00:12:06.930
All right, I will catch
you in the next one.

00:12:06.930 --> 00:12:09.390
I think what we'll do in the
next one, the next entry,

00:12:09.390 --> 00:12:13.500
is talk about
Shaka Player, which

00:12:13.500 --> 00:12:18.210
is how I think I'm going to
do all the Dash and HLS video

00:12:18.210 --> 00:12:19.920
playback stuff.

00:12:19.920 --> 00:12:20.560
See you there.

00:12:20.560 --> 00:12:22.040
Hey folks, thanks for watching.

00:12:22.040 --> 00:12:24.040
Don't forget that there
is more content that you

00:12:24.040 --> 00:12:25.538
can find kind of over here-ish.

00:12:25.538 --> 00:12:28.181
And if you want to subscribe,
there's probably a button.

00:12:28.181 --> 00:12:28.722
I don't know.

00:12:28.722 --> 00:12:29.686
Maybe there.

00:12:29.686 --> 00:12:31.236
Maybe somewhere around there.

00:12:31.236 --> 00:12:33.150
Click that if you've
not done that.

00:12:33.150 --> 00:12:34.658
Brilliant.

