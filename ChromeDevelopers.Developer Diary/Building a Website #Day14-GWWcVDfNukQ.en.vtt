WEBVTT
Kind: captions
Language: en

00:00:00.660 --> 00:00:03.000
SPEAKER 1: Well,
this is awkward.

00:00:03.000 --> 00:00:06.810
So far DevDiary has
been exclusively Paul,

00:00:06.810 --> 00:00:08.130
and now I'm here.

00:00:08.130 --> 00:00:10.350
I snuck into the series
because I actually

00:00:10.350 --> 00:00:13.587
built something on the
Chrome Dev Summit website.

00:00:13.587 --> 00:00:15.420
And I want to show you
what I did, because I

00:00:15.420 --> 00:00:17.020
think it's really exciting.

00:00:17.020 --> 00:00:19.890
So the last few weeks,
I've been playing around

00:00:19.890 --> 00:00:22.530
with VR and Web VR a little bit.

00:00:22.530 --> 00:00:23.620
I'm just dabbling.

00:00:23.620 --> 00:00:27.000
I'm just trying things out.

00:00:27.000 --> 00:00:29.880
And Paul and I thought it would
be really cool opportunity

00:00:29.880 --> 00:00:35.430
to build a 360 image
of the SFJAZZ Center

00:00:35.430 --> 00:00:38.370
into the Chrome Dev
Summit website for people

00:00:38.370 --> 00:00:42.330
if they were not able to
join us live tomorrow.

00:00:42.330 --> 00:00:45.150
They could actually at least
see what the venue looks like

00:00:45.150 --> 00:00:47.790
and how you get more of a
feel of the space that's

00:00:47.790 --> 00:00:49.110
available to us.

00:00:49.110 --> 00:00:50.920
And that's exactly what I did.

00:00:50.920 --> 00:00:54.180
So if you go to the Chrome
Dev Summit website--

00:00:54.180 --> 00:00:57.610
developer.chrome.com/devsummit--
and go to the Location

00:00:57.610 --> 00:00:59.850
sub-page, it's all as before.

00:00:59.850 --> 00:01:02.970
Same website that Paul
built, but you have

00:01:02.970 --> 00:01:04.959
this tiny cardboard button.

00:01:04.959 --> 00:01:08.580
And if you click it, we load the
360 view of the SFJAZZ Center.

00:01:08.580 --> 00:01:10.260
On a desktop with
just normal desktop,

00:01:10.260 --> 00:01:12.990
you can just use your
mouse to pan around and get

00:01:12.990 --> 00:01:15.272
a feel for what the
surroundings look like.

00:01:15.272 --> 00:01:16.980
If you're on your
phone, you can actually

00:01:16.980 --> 00:01:20.070
just hold the phone in
your hand and move around

00:01:20.070 --> 00:01:24.450
and have this as a magic window
into a different location.

00:01:24.450 --> 00:01:25.920
You'll also have
a Cardboard button

00:01:25.920 --> 00:01:26.820
that if you have
a Cardboard, you

00:01:26.820 --> 00:01:29.700
can put your phone inside it and
actually move your head around

00:01:29.700 --> 00:01:31.980
to actually feel even
more like you are there.

00:01:31.980 --> 00:01:34.470
And if you have a
proper VR device,

00:01:34.470 --> 00:01:38.340
you can actually use that
to get into the location--

00:01:38.340 --> 00:01:42.870
use of proper Oculus Rift or the
HGC Vive or whatever you have.

00:01:42.870 --> 00:01:45.780
And use that to actually
take a look inside.

00:01:45.780 --> 00:01:50.580
So as I said, this is
sadly just a 360 image.

00:01:50.580 --> 00:01:52.590
So many acronyms.

00:01:52.590 --> 00:01:55.120
360 image, it is not
a stereoscopic image.

00:01:55.120 --> 00:01:57.540
So the perception of depth
won't actually be real,

00:01:57.540 --> 00:02:00.600
but you will have
this is basically

00:02:00.600 --> 00:02:04.190
a big 3D sphere with a
texture on the inside

00:02:04.190 --> 00:02:05.730
that you can look
around to give you

00:02:05.730 --> 00:02:09.030
at least the feel of
you looking around,

00:02:09.030 --> 00:02:13.260
but not actually
a feel of depth.

00:02:13.260 --> 00:02:16.447
So how do you do this?

00:02:16.447 --> 00:02:18.030
This is actually a
good example of how

00:02:18.030 --> 00:02:19.800
to do progressive
enhancement with Web VR,

00:02:19.800 --> 00:02:21.258
because if you
don't have anything,

00:02:21.258 --> 00:02:23.160
it still works with
mouse and panning

00:02:23.160 --> 00:02:25.076
and you can just use
your mouse to look on it.

00:02:25.076 --> 00:02:26.890
It's already a pretty
good experience.

00:02:26.890 --> 00:02:30.330
So let's dive into
the code a little bit.

00:02:30.330 --> 00:02:33.150
Mostly, I'm working
with the VR View, which

00:02:33.150 --> 00:02:35.250
is a great library that a
colleague of mine wrote,

00:02:35.250 --> 00:02:39.550
which uses the VR polyfill
and the VR boilerplate.

00:02:39.550 --> 00:02:43.380
So VR polyfill basically
poly-fills the Web VR API

00:02:43.380 --> 00:02:46.210
for a browser, while
the VR boilerplate

00:02:46.210 --> 00:02:48.210
does the progressive
enhancement story

00:02:48.210 --> 00:02:52.670
to go from just a canvas where
you can pan around to cardboard

00:02:52.670 --> 00:02:58.270
to actual VR devices.

00:02:58.270 --> 00:03:00.000
So if you go into the
component sections

00:03:00.000 --> 00:03:03.010
where Paul has written different
things like the video hand

00:03:03.010 --> 00:03:06.990
of the fading, moving in
and out of big picture mode

00:03:06.990 --> 00:03:08.580
to small picture
mode with the video,

00:03:08.580 --> 00:03:09.990
I wrote a new VR component.

00:03:09.990 --> 00:03:14.460
And it's actually mostly a
lot of animation and class

00:03:14.460 --> 00:03:15.210
JavaScript.

00:03:15.210 --> 00:03:17.010
But most of what it
does is it checks

00:03:17.010 --> 00:03:20.820
if you are on the Dev
Summit location page,

00:03:20.820 --> 00:03:24.030
and if so, it will
fade in the button.

00:03:24.030 --> 00:03:28.050
Or rather, if you're not on the
Dev Summit location subpage,

00:03:28.050 --> 00:03:30.690
it will just not do anything.

00:03:30.690 --> 00:03:32.130
And then we hijacked
the masthead

00:03:32.130 --> 00:03:35.070
to inject our little
button and do transitions

00:03:35.070 --> 00:03:36.520
and all of these things.

00:03:36.520 --> 00:03:39.330
It's not rocket science.

00:03:39.330 --> 00:03:41.850
And the interesting thing
is basically the two lines

00:03:41.850 --> 00:03:43.830
of the onClick Handler.

00:03:43.830 --> 00:03:46.080
If you click on the button,
we will hide the button

00:03:46.080 --> 00:03:47.790
because it needs to
go out of the way.

00:03:47.790 --> 00:03:49.350
And also it will load a script.

00:03:49.350 --> 00:03:53.550
So that means we will
load a script on click.

00:03:53.550 --> 00:03:55.920
This is usually not
recommended because it

00:03:55.920 --> 00:03:58.920
will mean that if you
click it, especially

00:03:58.920 --> 00:04:00.510
if you've never
loaded the script,

00:04:00.510 --> 00:04:04.870
it will take a lot of time
until action takes place.

00:04:04.870 --> 00:04:07.010
However, I thought
that it's probably not

00:04:07.010 --> 00:04:09.280
going to be every single
visitor on the website.

00:04:09.280 --> 00:04:12.460
It's going to go into
the VR experience.

00:04:12.460 --> 00:04:15.750
So both forcing the
data onto the user

00:04:15.750 --> 00:04:17.640
and loading it ahead
of time just because

00:04:17.640 --> 00:04:19.000
didn't seem like a good idea.

00:04:19.000 --> 00:04:21.300
So I just wanted to
load it on demand.

00:04:21.300 --> 00:04:25.440
And the Web VR script is,
again, mostly about hijacking.

00:04:25.440 --> 00:04:29.130
So this is where I use
VR View-- the library.

00:04:29.130 --> 00:04:32.430
And I hijacked the mast
head, injected a new I-frame,

00:04:32.430 --> 00:04:35.610
where inside I'm going to
have a canvas with the 360

00:04:35.610 --> 00:04:36.810
image and everything.

00:04:36.810 --> 00:04:39.860
This is all the things
that Web VR does for me.

00:04:39.860 --> 00:04:41.160
And it's basically one call.

00:04:41.160 --> 00:04:44.070
So what I'm doing is I'm saying
create a new player for me,

00:04:44.070 --> 00:04:45.210
Web VR, please.

00:04:45.210 --> 00:04:48.570
Put it into the VR
VIew ID'd element,

00:04:48.570 --> 00:04:51.030
and use this image that we have.

00:04:51.030 --> 00:04:52.850
And that's basically
all I have to do.

00:04:52.850 --> 00:04:56.130
And with this code,
it already worked.

00:04:56.130 --> 00:04:58.486
And after that, I took a
little bit of a closer look

00:04:58.486 --> 00:05:00.860
into Web VR because the amount
of data we're transporting

00:05:00.860 --> 00:05:04.080
was quite big, and it turns
out that Web VR actually

00:05:04.080 --> 00:05:08.610
bundles the Shaka Player, which
makes sense because it also

00:05:08.610 --> 00:05:14.070
has a port for playing videos
in Web VR or in a VR space.

00:05:14.070 --> 00:05:16.500
And Shaka Player is a
module that basically

00:05:16.500 --> 00:05:17.530
does adaptive streaming.

00:05:17.530 --> 00:05:20.700
It tunes down the quality
depending on how much bandwidth

00:05:20.700 --> 00:05:22.382
you have at your disposal.

00:05:22.382 --> 00:05:24.090
But we're never going
to play video here,

00:05:24.090 --> 00:05:26.850
so delivering that code to the
user is just going to waste.

00:05:26.850 --> 00:05:32.310
So I'm basically rendering the
entire VR view into third party

00:05:32.310 --> 00:05:35.790
folder here, and I commented
out a lot of requires

00:05:35.790 --> 00:05:38.160
that were in there and just
recompiled the entire thing

00:05:38.160 --> 00:05:39.201
and shrunk the code down.

00:05:39.201 --> 00:05:41.520
So I think at this
point, we're now

00:05:41.520 --> 00:05:47.970
delivering 100 kilobytes of
code and 250 kilobytes of image

00:05:47.970 --> 00:05:52.020
data, which I think it's
still a lot of data,

00:05:52.020 --> 00:05:55.840
but it's acceptable most
of the time on mobile.

00:05:55.840 --> 00:05:58.207
And it will load quick
enough most of the time.

00:05:58.207 --> 00:05:59.790
Other than that,
it's very basic code.

00:05:59.790 --> 00:06:03.900
I did find a nice pattern,
which is creating functions that

00:06:03.900 --> 00:06:07.290
create promises for both
requestAnimationFrame

00:06:07.290 --> 00:06:08.820
and transitionEnd.

00:06:08.820 --> 00:06:11.430
So calling transitionEnd
promise on an element

00:06:11.430 --> 00:06:14.130
will give you a promise that
resolves when transitionEnd

00:06:14.130 --> 00:06:15.930
is fired on that element.

00:06:15.930 --> 00:06:22.800
And it allows you to just do
these chains-- as in you chain

00:06:22.800 --> 00:06:23.940
promises together.

00:06:23.940 --> 00:06:26.280
So I called transitionEnd
promise on the mast head,

00:06:26.280 --> 00:06:28.860
and when that is done,
I append a child.

00:06:28.860 --> 00:06:33.750
I do a double raf, and then
I do again a class adaptation

00:06:33.750 --> 00:06:35.280
and do transitionEnd
promise again.

00:06:35.280 --> 00:06:38.640
So this is basically how I can
just more or less declaratively

00:06:38.640 --> 00:06:42.211
do animation sequences
without using the actual web

00:06:42.211 --> 00:06:44.460
animation API, which is
somewhat of a nice workaround.

00:06:44.460 --> 00:06:48.060
It's not as powerful, but
it makes stuff a little more

00:06:48.060 --> 00:06:51.570
readable than having multiple
levels and indentations

00:06:51.570 --> 00:06:55.680
because you're using double raf
and all these kind of things.

00:06:55.680 --> 00:06:57.210
If you like this, let me know.

00:06:57.210 --> 00:06:59.000
If you have questions,
let me also know.

00:06:59.000 --> 00:07:01.110
I am @dassurma on Twitter.

00:07:01.110 --> 00:07:04.511
If you want to join us tomorrow
at the SFJAZZ Center in person,

00:07:04.511 --> 00:07:05.010
come by.

00:07:05.010 --> 00:07:06.030
It's going to be great.

00:07:06.030 --> 00:07:09.589
If you can't, use the features
on the Chrome Summit website

00:07:09.589 --> 00:07:11.630
to get notifications when
we're going to go live.

00:07:11.630 --> 00:07:12.960
Everything is going
to be live streamed.

00:07:12.960 --> 00:07:14.820
Subscribe also to
this YouTube channel

00:07:14.820 --> 00:07:16.789
because we have more
great things here

00:07:16.789 --> 00:07:18.330
that are going to
come out regularly.

00:07:18.330 --> 00:07:24.320
So thank you for watching, and
hopefully, see you tomorrow.

