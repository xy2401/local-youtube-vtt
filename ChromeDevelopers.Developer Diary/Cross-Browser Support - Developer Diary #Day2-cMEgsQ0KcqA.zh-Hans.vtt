WEBVTT
Kind: captions
Language: zh-Hans

00:00:00.000 --> 00:00:01.220
 MAT SCALES：大家好。 

00:00:01.220 --> 00:00:03.230
欢迎回到我的《开发人员日记》系列， 

00:00:03.230 --> 00:00:07.160
我在谈论如何制作相机应用。 

00:00:07.160 --> 00:00:10.010
我想在本系列中介绍的一件事

00:00:10.010 --> 00:00:13.760
是事情进展不顺利的地方。 

00:00:13.760 --> 00:00:16.160
吸引许多开发人员的一件事是， 

00:00:16.160 --> 00:00:18.920
我想和你一起经历那种痛苦

00:00:18.920 --> 00:00:21.519
是跨浏览器支持。 

00:00:21.519 --> 00:00:23.060
所以特别地，我真的需要

00:00:23.060 --> 00:00:25.670
能够支持iOS和Android。 

00:00:25.670 --> 00:00:29.450
这就是Android上的Chrome和iOS上的Safari。 

00:00:29.450 --> 00:00:32.479
所以上次，我谈到以一种

00:00:32.479 --> 00:00:35.030
可在许多浏览器上使用。 

00:00:35.030 --> 00:00:39.020
但是现在，我需要能够将它们存储在设备上。 

00:00:39.020 --> 00:00:41.180
我最初的想法是使用CacheStorage 

00:00:41.180 --> 00:00:44.450
 API，它是服务工作者规范的一部分。 

00:00:44.450 --> 00:00:49.040
这是一种很好的存储资源的方式

00:00:49.040 --> 00:00:51.170
一个URL，这是完美的。 

00:00:51.170 --> 00:00:53.400
因为最终这些本地资源

00:00:53.400 --> 00:00:54.650
将被上传到服务器

00:00:54.650 --> 00:00:57.170
这样就可以根据网址存储它们

00:00:57.170 --> 00:00:59.600
他们最终将拥有。 

00:00:59.600 --> 00:01:03.092
遗憾的是，实际上Safari上并未实现CacheStorage。 

00:01:03.092 --> 00:01:05.300
因此，我们必须退回到某种

00:01:05.300 --> 00:01:07.490
在两个平台上都可以使用- 

00:01:07.490 --> 00:01:10.880
 IndexedDB，也称为IDB。 

00:01:10.880 --> 00:01:15.210
 IDB不是我最喜欢的API，但功能非常强大。 

00:01:15.210 --> 00:01:17.940
所以我只是在它周围写了一个简单的抽象层

00:01:17.940 --> 00:01:21.220
为了做我需要做的事情。 

00:01:21.220 --> 00:01:24.760
这就是抽象层。 

00:01:24.760 --> 00:01:28.120
这是一个围绕IndexedDB的简单类。 

00:01:28.120 --> 00:01:30.400
它称为ImageDb。 

00:01:30.400 --> 00:01:32.830
您可能会注意到此时我已经

00:01:32.830 --> 00:01:35.345
用TypeScript编写。 

00:01:35.345 --> 00:01:36.970
如果您不熟悉TypeScript， 

00:01:36.970 --> 00:01:38.428
只是把这些部分

00:01:38.428 --> 00:01:40.690
像冒号然后是类型，然后假装

00:01:40.690 --> 00:01:42.190
它是文档。 

00:01:42.190 --> 00:01:44.170
 TypeScript实际上只是JavaScript 

00:01:44.170 --> 00:01:47.110
上面有这个额外的小层。 

00:01:47.110 --> 00:01:49.920
就是说，让我们讨论一下这实际上是在做什么。 

00:01:49.920 --> 00:01:54.300
因此，当您创建ImageDB时，它将创建数据库

00:01:54.300 --> 00:01:57.120
并设置这些事件处理程序。 

00:01:57.120 --> 00:01:59.550
那里没有什么特别令人兴奋的。 

00:01:59.550 --> 00:02:02.400
我有一种方法来存储这个东西， 

00:02:02.400 --> 00:02:04.910
称为ImageRecord。 

00:02:04.910 --> 00:02:06.780
 ImageRecord只是- 

00:02:06.780 --> 00:02:10.949
这是一个普通的对象，用于存储图像和任何元数据

00:02:10.949 --> 00:02:13.230
我需要这些图像。 

00:02:13.230 --> 00:02:18.030
然后，我可以从数据库中检索ImageRecord。 

00:02:18.030 --> 00:02:20.110
我这里有一个叫做全部的方法， 

00:02:20.110 --> 00:02:22.100
仅获取所有图像记录

00:02:22.100 --> 00:02:23.420
在数据库中。 

00:02:23.420 --> 00:02:24.860
这用于浏览页面， 

00:02:24.860 --> 00:02:27.530
在这里显示所有可用的图像。 

00:02:27.530 --> 00:02:30.380
然后这里有这些内部帮手。 

00:02:30.380 --> 00:02:32.150
而这里唯一真正重要的

00:02:32.150 --> 00:02:35.060
是createObjectStore方法，实际上是

00:02:35.060 --> 00:02:38.097
您第一次访问该应用程序或成绩时的数据库

00:02:38.097 --> 00:02:39.930
如果您以前和大人一起去过

00:02:39.930 --> 00:02:41.610
应用程序的版本。 

00:02:41.610 --> 00:02:43.910
所以这一层对我来说非常有效， 

00:02:43.910 --> 00:02:46.050
但我很快遇到了问题。 

00:02:46.050 --> 00:02:48.260
因此，我正在使用的ImageRecord对象， 

00:02:48.260 --> 00:02:52.240
我最初使用blob来存储任何图像数据。 

00:02:52.240 --> 00:02:54.170
我的意思是，这很合理。 

00:02:54.170 --> 00:02:57.570
当我想通过文件上传获取图像时，请复制

00:02:57.570 --> 00:03:00.500
粘贴，从画布上获取图像， 

00:03:00.500 --> 00:03:02.150
他们都给了我一个斑点。 

00:03:02.150 --> 00:03:04.910
当我想显示图像时，会出现斑点

00:03:04.910 --> 00:03:07.170
并获取其URL并使用该Blob URL 

00:03:07.170 --> 00:03:09.860
作为图像的来源。 

00:03:09.860 --> 00:03:16.430
不幸的是，您根本无法在iOS的Safari中存储Blob。 

00:03:16.430 --> 00:03:19.340
您可以做的就是存储一个ArrayBuffer。 

00:03:19.340 --> 00:03:21.497
因此，与其在各处使用Blob， 

00:03:21.497 --> 00:03:23.330
我只需要做一点转换

00:03:23.330 --> 00:03:24.890
每当我出现斑点时，都将其转动

00:03:24.890 --> 00:03:27.290
放入ArrayBuffer进行存储，然后将其转回

00:03:27.290 --> 00:03:29.160
变成斑点来使用它。 

00:03:29.160 --> 00:03:31.479
因此，让我们看一下该转换。 

00:03:31.479 --> 00:03:33.020
因此，如果您有ArrayBuffer并且

00:03:33.020 --> 00:03:36.020
想把它变成斑点，这很容易。 

00:03:36.020 --> 00:03:38.510
您使用Blob构造函数。 

00:03:38.510 --> 00:03:42.650
您将数组中的ArrayBuffer作为第一个元素传入。 

00:03:42.650 --> 00:03:45.330
然后，您只需传递您想要的类型即可。 

00:03:45.330 --> 00:03:48.930
所以在这里，这将类似于image / jpeg。 

00:03:48.930 --> 00:03:51.450
相反，稍微复杂一点。 

00:03:51.450 --> 00:03:54.192
所以我在这里创建了一个小助手。 

00:03:54.192 --> 00:03:56.650
如果您想将Blob转换为ArrayBuffer， 

00:03:56.650 --> 00:03:58.790
您可以使用FileReader API。 

00:03:58.790 --> 00:04:01.190
因此，您创建了FileReader。 

00:04:01.190 --> 00:04:06.050
然后，您说您想要readAsArrayBuffer一些Blob。 

00:04:06.050 --> 00:04:08.149
然后，最终，您得到此Loadend事件。 

00:04:08.149 --> 00:04:10.190
在这里，您可以看到，我包裹在一个Promise中。 

00:04:10.190 --> 00:04:13.040
我只是解决结果。 

00:04:13.040 --> 00:04:14.570
所以你去了。 

00:04:14.570 --> 00:04:17.130
弄清楚如何解决这个问题有点棘手。 

00:04:17.130 --> 00:04:19.800
但最终，这是可能的。 

00:04:19.800 --> 00:04:22.700
当然，您无法在iOS的IDB中存储Blob， 

00:04:22.700 --> 00:04:24.300
但是有办法解决。 

00:04:24.300 --> 00:04:27.110
这就是当今许多Web开发的故事。 

00:04:27.110 --> 00:04:29.420
现代Web开发就是要找出什么

00:04:29.420 --> 00:04:31.700
适用于所有浏览器。 

00:04:31.700 --> 00:04:34.610
希望随着时间的推移，这会变得越来越容易。 

00:04:34.610 --> 00:04:38.850
但您知道，这些事情仍然会发生。 

00:04:38.850 --> 00:04:40.730
因此希望这对那些

00:04:40.730 --> 00:04:42.800
遇到同样的问题。 

00:04:42.800 --> 00:04:45.890
下次加入我们的行列时，我们将学习新的知识。 

00:04:45.890 --> 00:04:47.067
 [音乐播放] 

00:04:47.067 --> 00:04:47.900
感谢收看。 

00:04:47.900 --> 00:04:49.566
如果您想观看我们更多的视频， 

00:04:49.566 --> 00:04:51.750
单击此处，然后再见。 

00:04:51.750 --> 00:04:53.300
干杯。 

