WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.530
MAT SCALES: Hey
everyone, it's time

00:00:01.530 --> 00:00:03.363
for another edition of
the "Developer Diary"

00:00:03.363 --> 00:00:04.113
for my camera app.

00:00:04.113 --> 00:00:06.446
One of the things that got
me excited about this project

00:00:06.446 --> 00:00:08.530
in the first place
was the image filters.

00:00:08.530 --> 00:00:10.360
The filters that I've made
are fairly standard things

00:00:10.360 --> 00:00:12.693
that you might see in other
camera apps or image editing

00:00:12.693 --> 00:00:15.330
software like changing
the brightness, contrast,

00:00:15.330 --> 00:00:16.890
and that sort of thing.

00:00:16.890 --> 00:00:19.342
The filters in this app
are written using WebGL.

00:00:19.342 --> 00:00:21.300
I'm not going to dive
into the details of WebGL

00:00:21.300 --> 00:00:22.800
in this episode,
but I recent recode

00:00:22.800 --> 00:00:24.930
an episode of
"Supercharged" with Surma

00:00:24.930 --> 00:00:27.180
where I wrote some code that
sets up WebGL so that you

00:00:27.180 --> 00:00:29.202
can use to manipulate an image.

00:00:29.202 --> 00:00:30.660
It's about an hour
long, so I'm not

00:00:30.660 --> 00:00:32.250
going to assume that
you've watched it,

00:00:32.250 --> 00:00:33.833
but there is a link
in the description

00:00:33.833 --> 00:00:35.470
if you want to do that now.

00:00:35.470 --> 00:00:38.160
The very brief summary
of the WebGL setup

00:00:38.160 --> 00:00:39.720
is that you create
a canvas element

00:00:39.720 --> 00:00:42.960
and attach some code to it
that runs for each pixel.

00:00:42.960 --> 00:00:46.320
This has to output what
color that pixel should be.

00:00:46.320 --> 00:00:48.537
This code is called a shader.

00:00:48.537 --> 00:00:50.870
The code for the shader is
written in a special language

00:00:50.870 --> 00:00:52.515
that is kind of like
C. I'm not going

00:00:52.515 --> 00:00:54.140
to go into the details
of the language,

00:00:54.140 --> 00:00:57.750
but instead I want to talk about
what my code is actually doing.

00:00:57.750 --> 00:01:01.020
The shader can look at data from
the original image, only when

00:01:01.020 --> 00:01:02.760
you're talking about
images in WebGL,

00:01:02.760 --> 00:01:05.790
you tend to refer
to it as a texture.

00:01:05.790 --> 00:01:08.160
So here we have the
code for my shader.

00:01:08.160 --> 00:01:11.010
We have a thing called
a varying up here,

00:01:11.010 --> 00:01:13.050
which is called texCoords.

00:01:13.050 --> 00:01:16.770
This is the coordinates of the
pixel within the canvas that

00:01:16.770 --> 00:01:19.470
can be used to look into the
original image, the texture,

00:01:19.470 --> 00:01:21.300
hence texCoords.

00:01:21.300 --> 00:01:23.440
And this is a different
value for each pixel,

00:01:23.440 --> 00:01:25.614
which is why it's a varying.

00:01:25.614 --> 00:01:28.030
You can also pass in some
values from your JavaScript that

00:01:28.030 --> 00:01:29.630
were shared for every pixel.

00:01:29.630 --> 00:01:31.660
These variables
are called uniforms

00:01:31.660 --> 00:01:33.567
because they are the
same for every pixel.

00:01:33.567 --> 00:01:35.150
This is how we can
pass through things

00:01:35.150 --> 00:01:38.299
like the contrast or
brightness levels actually are.

00:01:38.299 --> 00:01:39.840
So here we have
uniforms role for all

00:01:39.840 --> 00:01:42.950
of the filter settings--
saturation, warmth, et cetera.

00:01:42.950 --> 00:01:45.060
This text sampler
is how we going

00:01:45.060 --> 00:01:47.670
to refer to our original image.

00:01:47.670 --> 00:01:49.970
And this one which
is sourceSize,

00:01:49.970 --> 00:01:51.530
this gives us the
width and height

00:01:51.530 --> 00:01:53.640
in pixels of the original image.

00:01:53.640 --> 00:01:56.310
So how do these
filters actually work?

00:01:56.310 --> 00:01:57.230
What are we doing?

00:01:57.230 --> 00:02:00.440
Well one of the first
things that I do in my code

00:02:00.440 --> 00:02:04.400
is something called
a convolution filter.

00:02:04.400 --> 00:02:07.340
So a convolution filter is
kind of a complicated name,

00:02:07.340 --> 00:02:09.279
something that's actually
relatively simple.

00:02:09.279 --> 00:02:10.820
What we're going to
do is we're going

00:02:10.820 --> 00:02:14.810
to calculate the color
of an output pixel

00:02:14.810 --> 00:02:18.530
based on more than
one input pixel.

00:02:18.530 --> 00:02:22.250
So here I want to work out what
color a particular pixel should

00:02:22.250 --> 00:02:24.560
be when I produce my image.

00:02:24.560 --> 00:02:27.260
And the way I do that
is I look at the values

00:02:27.260 --> 00:02:31.860
of the colors for that pixel
and some pixels around it.

00:02:31.860 --> 00:02:34.892
So here we have a three
by three convolution

00:02:34.892 --> 00:02:37.100
because we're going to look
at nine pixels in a three

00:02:37.100 --> 00:02:38.130
by three grid.

00:02:38.130 --> 00:02:40.260
Each pixel is given a weight.

00:02:40.260 --> 00:02:43.190
This is how important
it is to the output.

00:02:43.190 --> 00:02:46.130
This particular
set of weights is

00:02:46.130 --> 00:02:50.150
going to give us
what's known as a blur.

00:02:50.150 --> 00:02:53.420
So what we do is we gather up
the colors of all the pixels

00:02:53.420 --> 00:02:57.410
around it, and we multiply all
of the color values for each

00:02:57.410 --> 00:03:01.254
of these pixels by the weight.

00:03:01.254 --> 00:03:02.670
Because all these
color values are

00:03:02.670 --> 00:03:04.662
going to be numbers
from 0 to 1, and then

00:03:04.662 --> 00:03:06.120
when we add them
all together we're

00:03:06.120 --> 00:03:07.745
going to end up with
a number between 0

00:03:07.745 --> 00:03:13.920
and, in this case, 16, once
we've added them together

00:03:13.920 --> 00:03:16.200
with the weights,
we'll then divide by 16

00:03:16.200 --> 00:03:18.104
to get back to values
between 0 and 1.

00:03:18.104 --> 00:03:19.770
The way that you might
think that you're

00:03:19.770 --> 00:03:24.480
going to do this is you have
an array with your weights in.

00:03:24.480 --> 00:03:29.660
And you loop through from
minus 1, minus 1 to 1, 1.

00:03:29.660 --> 00:03:33.450
And you go through and look
up all nine pixels in a loop.

00:03:33.450 --> 00:03:36.900
And you get each color and
you multiply it by its weight

00:03:36.900 --> 00:03:38.110
and you add them to a total.

00:03:38.110 --> 00:03:42.110
And at the end you divide by
the sum of all those weights.

00:03:42.110 --> 00:03:44.530
And that's more or
less what you do,

00:03:44.530 --> 00:03:48.060
except that in WebGL shader, I'm
going to optimize this slightly

00:03:48.060 --> 00:03:49.690
by unrolling this loop.

00:03:49.690 --> 00:03:52.699
So that is instead of
doing the loop as a loop,

00:03:52.699 --> 00:03:54.990
I'm going to write out each
individual statement that's

00:03:54.990 --> 00:03:57.130
going to get run
on its own line,

00:03:57.130 --> 00:03:59.920
so that instead of
running a loop nine times,

00:03:59.920 --> 00:04:02.040
I'm going to write
nine instructions.

00:04:02.040 --> 00:04:04.050
So you might be wondering,
why would I do this?

00:04:04.050 --> 00:04:06.905
Why we I unroll this loop
and have each instruction

00:04:06.905 --> 00:04:09.750
separate rather than
looping over them?

00:04:09.750 --> 00:04:12.780
And it's to do with how
graphics cards work.

00:04:12.780 --> 00:04:14.640
So a graphics card
contains hundreds

00:04:14.640 --> 00:04:17.850
of GPU calls, which
are great at doing

00:04:17.850 --> 00:04:19.540
mathematical calculations.

00:04:19.540 --> 00:04:23.430
But one of the things they're so
good at that an ordinary CPU is

00:04:23.430 --> 00:04:23.970
branching.

00:04:23.970 --> 00:04:29.670
So is when things are different
when you run the code again.

00:04:29.670 --> 00:04:32.610
So in a GPU, it's used to doing
the same calculations over

00:04:32.610 --> 00:04:33.610
and over and over again.

00:04:33.610 --> 00:04:36.680
It sets up a pipeline to
just read in data and output

00:04:36.680 --> 00:04:41.520
the output without doing
any decision making.

00:04:41.520 --> 00:04:45.660
So when we have a loop,
many graphics card drivers

00:04:45.660 --> 00:04:48.000
will actually optimize
that out automatically.

00:04:48.000 --> 00:04:51.900
It will say, OK, so it's
a constant number of runs

00:04:51.900 --> 00:04:54.100
for this code.

00:04:54.100 --> 00:04:56.970
And we can work
out at compile time

00:04:56.970 --> 00:04:58.470
that this is going
to run nine times

00:04:58.470 --> 00:04:59.928
and it's going to
use these values,

00:04:59.928 --> 00:05:02.040
and it can produce that
unrolled version for you.

00:05:02.040 --> 00:05:04.590
But not every driver does it.

00:05:04.590 --> 00:05:06.437
And particularly with
things like texture

00:05:06.437 --> 00:05:08.520
reads where we're looking
up the color information

00:05:08.520 --> 00:05:12.650
of the original image, that
can be very highly optimized

00:05:12.650 --> 00:05:17.190
and pipelining in those colors.

00:05:17.190 --> 00:05:20.340
And based on the fact that
we're going left to right

00:05:20.340 --> 00:05:23.900
and we're always pulling
things out in the same order,

00:05:23.900 --> 00:05:27.120
so the graphics card can make
that really fast if it knows

00:05:27.120 --> 00:05:30.450
ahead of time what the
pixels are going to be

00:05:30.450 --> 00:05:32.040
that are going to be looked up.

00:05:32.040 --> 00:05:33.690
And when you
introduce that loop,

00:05:33.690 --> 00:05:37.320
some graphics card drivers
have that as a branch,

00:05:37.320 --> 00:05:39.190
and they don't optimize
for it anymore.

00:05:39.190 --> 00:05:42.270
So this could be extremely
slow on some graphics cards.

00:05:42.270 --> 00:05:44.580
Now, most of the time
that's probably fast.

00:05:44.580 --> 00:05:48.270
Most modern devices, this
will work just fine, but not

00:05:48.270 --> 00:05:48.810
all of them.

00:05:48.810 --> 00:05:51.570
I tested on some devices
where this was extremely slow,

00:05:51.570 --> 00:05:53.130
and so that's why I'm doing it.

00:05:53.130 --> 00:05:54.900
So let's have a look
at the actual code

00:05:54.900 --> 00:05:56.680
in my shader for this.

00:05:56.680 --> 00:06:00.180
So I did a three by three
matrix in the example.

00:06:00.180 --> 00:06:03.390
I've actually used a five
by five matrix in my code

00:06:03.390 --> 00:06:07.860
because sampling more values,
you get a smoother blur effect.

00:06:07.860 --> 00:06:09.550
But it's otherwise
exactly the same.

00:06:09.550 --> 00:06:13.050
So here I am using the texture2D
call of the shader language

00:06:13.050 --> 00:06:15.330
to look up, in my
texture sampler,

00:06:15.330 --> 00:06:17.640
some coordinates,
including the offset

00:06:17.640 --> 00:06:21.750
that I'm looking at, to get
the color value for a pixel.

00:06:21.750 --> 00:06:25.560
Then down here I'm adding
up all of those color values

00:06:25.560 --> 00:06:27.570
along with their weights,
and then dividing

00:06:27.570 --> 00:06:29.300
by the sum of those weights.

00:06:29.300 --> 00:06:31.320
Now you may notice
that in the app here,

00:06:31.320 --> 00:06:34.470
I don't actually have
blur as an option.

00:06:34.470 --> 00:06:36.700
What I actually have is sharpen.

00:06:36.700 --> 00:06:39.940
Now here I've got the
sharpness turned way up,

00:06:39.940 --> 00:06:41.420
but I can turn it
down to nothing.

00:06:41.420 --> 00:06:46.140
And you can see the sharpness
of the image changes

00:06:46.140 --> 00:06:47.810
when I move the slider.

00:06:47.810 --> 00:06:51.780
So how am I using a blur
to make an image sharper?

00:06:51.780 --> 00:06:54.120
Well, the way that that
works is using something

00:06:54.120 --> 00:06:56.220
called an unsharp mask.

00:06:56.220 --> 00:07:00.180
This is a technique that was
actually invented for film back

00:07:00.180 --> 00:07:03.960
when it really was film-- this
is a predigital technique--

00:07:03.960 --> 00:07:05.770
to make things sharper.

00:07:05.770 --> 00:07:08.610
What you do is you
take the original image

00:07:08.610 --> 00:07:10.680
and you take the
blurred version,

00:07:10.680 --> 00:07:13.990
and you find out the
difference between them.

00:07:13.990 --> 00:07:17.640
So you're basically
saying, how does this image

00:07:17.640 --> 00:07:21.340
change when it gets blurry?

00:07:21.340 --> 00:07:23.970
And then what you can
do is you can undo that.

00:07:23.970 --> 00:07:31.230
So if the pixel gets more red
and less blue when it's blurry,

00:07:31.230 --> 00:07:34.020
then you can make that
pixel less red and more

00:07:34.020 --> 00:07:38.490
blue to make it sharper,
which is actually

00:07:38.490 --> 00:07:41.340
an extremely clever
way of doing this.

00:07:41.340 --> 00:07:44.910
You do a negative blur almost.

00:07:44.910 --> 00:07:46.500
So the way that's
implemented here

00:07:46.500 --> 00:07:49.770
is that I work out this
distance between the texture

00:07:49.770 --> 00:07:53.860
and the blurred version, and I
add it to the original texture

00:07:53.860 --> 00:07:54.580
color.

00:07:54.580 --> 00:07:58.470
And then I actually scale this
effect with the sharpness value

00:07:58.470 --> 00:07:59.800
from the slider.

00:07:59.800 --> 00:08:02.730
So if sharpen here,
which is just a number.

00:08:02.730 --> 00:08:04.110
Let's say this was 0.

00:08:04.110 --> 00:08:06.970
Then this whole thing
would be 0 as well

00:08:06.970 --> 00:08:08.910
and we would be adding nothing.

00:08:08.910 --> 00:08:10.200
This would have no effect.

00:08:10.200 --> 00:08:13.650
But also if sharpen is
negative, then we actually

00:08:13.650 --> 00:08:15.720
just add on the blurred version.

00:08:15.720 --> 00:08:17.250
We make the image more blurry.

00:08:17.250 --> 00:08:18.630
And you can see that in the app.

00:08:18.630 --> 00:08:22.210
So here we take the sharpness
we move it down to the negative,

00:08:22.210 --> 00:08:24.810
and the image becomes
blurrier than it was.

00:08:24.810 --> 00:08:26.850
So that's applying a
convolution filter,

00:08:26.850 --> 00:08:31.133
in this case using a blur
to sharpen the image.

00:08:31.133 --> 00:08:32.549
There are convolution
filters that

00:08:32.549 --> 00:08:34.798
do all sort of things, that
give you an embossed image

00:08:34.798 --> 00:08:36.829
or can find edges.

00:08:36.829 --> 00:08:38.370
There are all sorts
of things you can

00:08:38.370 --> 00:08:39.630
do with a convolution filter.

00:08:39.630 --> 00:08:43.039
I'm just using it to
increase sharpness.

00:08:43.039 --> 00:08:45.620
Now there are some simpler
operations you can do as well.

00:08:45.620 --> 00:08:50.090
So for brightness,
what I actually do here

00:08:50.090 --> 00:08:54.670
is I take each color
in the original

00:08:54.670 --> 00:08:56.510
and I just multiply
it by whatever

00:08:56.510 --> 00:08:57.570
the brightness value is.

00:08:57.570 --> 00:09:00.230
So if you have a brightness
of 1, nothing happens.

00:09:00.230 --> 00:09:01.820
Whereas if you have
a brightness of 2,

00:09:01.820 --> 00:09:04.430
every pixel gets
twice as bright.

00:09:04.430 --> 00:09:07.310
That is the red, green, and
blue values are doubled.

00:09:07.310 --> 00:09:09.740
And similarly a
brightness of half

00:09:09.740 --> 00:09:12.560
will mean that
everything gets darker.

00:09:12.560 --> 00:09:15.740
All the pixel values get
to be half what they were.

00:09:15.740 --> 00:09:17.690
Warmth is another
interesting one.

00:09:17.690 --> 00:09:20.160
I kind of thought this would
be much more complicated,

00:09:20.160 --> 00:09:25.400
but I found a very simple
formula that works pretty well.

00:09:25.400 --> 00:09:29.030
So you take your warmth
value and you just

00:09:29.030 --> 00:09:32.900
increase the red of the
pixel by that warmth value.

00:09:32.900 --> 00:09:34.640
You add the warmth volume on.

00:09:34.640 --> 00:09:37.820
And you get the blue value
and you subtract the warmth

00:09:37.820 --> 00:09:38.750
from it.

00:09:38.750 --> 00:09:40.640
It's an extremely
simple formula,

00:09:40.640 --> 00:09:42.600
but it actually gives
a pretty good effect.

00:09:42.600 --> 00:09:44.060
So you can see that
what happens is

00:09:44.060 --> 00:09:46.550
that when you increase
the warmth slider,

00:09:46.550 --> 00:09:48.830
the image gets less
blue and more red

00:09:48.830 --> 00:09:50.390
and it gives it a warmer tone.

00:09:50.390 --> 00:09:53.090
And similarly when you
decrease the slider,

00:09:53.090 --> 00:09:55.580
the image gets more
blue and less red.

00:09:55.580 --> 00:09:57.830
So this is obviously
an extremely simple way

00:09:57.830 --> 00:10:02.830
of achieving this effect, which
I found pretty surprising.

00:10:02.830 --> 00:10:06.850
And I found that for most of the
effects that I used in filters,

00:10:06.850 --> 00:10:11.350
there were kind of two schools
of thought for each of them.

00:10:11.350 --> 00:10:13.360
One of them would be
an extremely simple

00:10:13.360 --> 00:10:15.370
mechanical method of
achieving the effect.

00:10:15.370 --> 00:10:19.390
So for warmth, just change
the red and blue values,

00:10:19.390 --> 00:10:21.890
and it's just by a fixed value.

00:10:21.890 --> 00:10:25.090
And that gives a
pretty good effect.

00:10:25.090 --> 00:10:28.330
Other people are
taking detailed models

00:10:28.330 --> 00:10:31.000
of how the brain
perceives images

00:10:31.000 --> 00:10:33.940
and how your eye
works to produce

00:10:33.940 --> 00:10:37.850
models that are a bit more
natural but more complicated.

00:10:37.850 --> 00:10:40.990
So I've opted for the
simple way in all of these,

00:10:40.990 --> 00:10:43.480
but you may find that
if you search around

00:10:43.480 --> 00:10:45.210
for how to actually
implement these

00:10:45.210 --> 00:10:47.459
that you get some of those
complicated versions coming

00:10:47.459 --> 00:10:48.280
through as well.

00:10:48.280 --> 00:10:50.602
So the next filter I want
to talk about is contrast.

00:10:50.602 --> 00:10:52.310
This is another one
that was interesting.

00:10:52.310 --> 00:10:54.840
I didn't know how this worked
before I started this project.

00:10:54.840 --> 00:10:56.570
And what we're
doing is the idea is

00:10:56.570 --> 00:10:59.380
to make the pixels seem
more distinct, to make

00:10:59.380 --> 00:11:02.590
every part of the image
a little different

00:11:02.590 --> 00:11:05.380
from the other
parts of the image.

00:11:05.380 --> 00:11:08.530
So the way that we
can do this is we

00:11:08.530 --> 00:11:11.770
can say, let's make
every pixel, make

00:11:11.770 --> 00:11:15.340
every color get a little
bit further away from gray.

00:11:15.340 --> 00:11:20.670
So gray is where the red is at
half and the green is at half

00:11:20.670 --> 00:11:22.420
and the blue is at
half, like it's halfway

00:11:22.420 --> 00:11:24.310
between white and black.

00:11:24.310 --> 00:11:27.070
And the way that we increase
the contrast in the situation

00:11:27.070 --> 00:11:31.542
is if the red value of our
pixel is more than half,

00:11:31.542 --> 00:11:32.500
then we make it bigger.

00:11:32.500 --> 00:11:34.458
And if it's less than
half, we make it smaller.

00:11:34.458 --> 00:11:39.730
We make all the pixels get
further away from gray.

00:11:39.730 --> 00:11:42.230
This increases the contrast.

00:11:42.230 --> 00:11:44.980
Now this doesn't work
perfectly if your image

00:11:44.980 --> 00:11:46.760
is-- let's say it's very dark.

00:11:46.760 --> 00:11:48.840
So most of the pixels
will be less than gray.

00:11:48.840 --> 00:11:51.010
This actually will
decrease the contrast.

00:11:51.010 --> 00:11:54.750
Everything gets closer to black
when they're all very dark.

00:11:54.750 --> 00:11:57.209
The same will happen if
everything's very light.

00:11:57.209 --> 00:11:58.750
So the other thing
that I've got here

00:11:58.750 --> 00:12:01.280
is the ability to
change the gray point.

00:12:01.280 --> 00:12:04.390
So that's what value
we're using as gray.

00:12:04.390 --> 00:12:07.360
So we can set the gray
point from almost black

00:12:07.360 --> 00:12:08.410
to almost white.

00:12:08.410 --> 00:12:11.340
And when the gray
point is almost white,

00:12:11.340 --> 00:12:15.910
then that means that many
of the lighter pixels

00:12:15.910 --> 00:12:17.500
will still get darker.

00:12:17.500 --> 00:12:20.140
And similarly when we
move the gray point down

00:12:20.140 --> 00:12:23.680
towards black, dark pixels,
some of them will get lighter.

00:12:23.680 --> 00:12:26.517
So you can choose the gray
point to suit your image.

00:12:26.517 --> 00:12:28.600
Generally speaking, you
want to set the gray point

00:12:28.600 --> 00:12:33.040
to be the average of all
of the pixels in your image

00:12:33.040 --> 00:12:36.670
so that more pixels are
moving away from each other,

00:12:36.670 --> 00:12:37.262
on average.

00:12:37.262 --> 00:12:38.970
I haven't implemented
that automatically,

00:12:38.970 --> 00:12:41.985
though that is a thing that
some image applications do.

00:12:41.985 --> 00:12:43.360
Instead I've just
giving a slider

00:12:43.360 --> 00:12:45.380
and you can choose
whatever looks nice.

00:12:45.380 --> 00:12:48.550
So that's how I implemented
some of these filters.

00:12:48.550 --> 00:12:52.480
Things like the vignette,
it's making the image darker

00:12:52.480 --> 00:12:55.589
the further away it is from the
center, and things like that.

00:12:55.589 --> 00:12:57.130
There are many other
kinds of filters

00:12:57.130 --> 00:12:58.963
that I could have
implemented that you might

00:12:58.963 --> 00:13:00.780
find in other applications.

00:13:00.780 --> 00:13:02.940
I could have done them in
the more complicated way.

00:13:02.940 --> 00:13:05.320
But I hope this is
a reasonable example

00:13:05.320 --> 00:13:07.550
of how these things work.

00:13:07.550 --> 00:13:09.800
So I hope you enjoyed
the show and that you'll

00:13:09.800 --> 00:13:13.310
join me next time when we
talk about something else.

00:13:13.310 --> 00:13:14.536
Thanks for watching my video.

00:13:14.536 --> 00:13:16.660
Remember, you can subscribe
to the channel for more

00:13:16.660 --> 00:13:18.862
from Chrome developers,
or follow the links

00:13:18.862 --> 00:13:21.320
on the screen to watch other
episodes of "Developer Diary".

00:13:21.320 --> 00:13:22.870
Cheers.

