WEBVTT
Kind: captions
Language: en

00:00:00.102 --> 00:00:01.310
SAM THOROGOOD: Hey, everyone.

00:00:01.310 --> 00:00:02.240
Sam here.

00:00:02.240 --> 00:00:04.340
On this episode of the
Santa Tracker series,

00:00:04.340 --> 00:00:06.500
I want to talk a
little bit about GIFs,

00:00:06.500 --> 00:00:09.890
MP4s, and just generally
saving your users bandwidth.

00:00:09.890 --> 00:00:11.332
Let's have a look.

00:00:11.332 --> 00:00:13.790
So this episode heavily features
one of my favorite scenes.

00:00:13.790 --> 00:00:15.129
It's called Present Bounce.

00:00:15.129 --> 00:00:16.670
It really brings me
back to my youth.

00:00:16.670 --> 00:00:19.128
You can drop conveyor belts on
the screen and press buttons

00:00:19.128 --> 00:00:21.440
to have a present roll
into Santa's sack.

00:00:21.440 --> 00:00:23.690
You've also got bouncy
things and stuff like that.

00:00:23.690 --> 00:00:26.430
Sometimes I can do
this level in one try.

00:00:26.430 --> 00:00:28.172
Not quite this time.

00:00:28.172 --> 00:00:29.630
So one thing you
might have noticed

00:00:29.630 --> 00:00:32.005
when we loaded this scene,
and I've just reloaded it now,

00:00:32.005 --> 00:00:33.500
is we get these tutorial cards.

00:00:33.500 --> 00:00:34.670
Well, wait a second.

00:00:34.670 --> 00:00:36.440
They only show up
if a user doesn't do

00:00:36.440 --> 00:00:37.920
the thing we want them to do.

00:00:37.920 --> 00:00:39.461
So in this case it's
telling the user

00:00:39.461 --> 00:00:41.400
to drag the conveyor
belt on to the screen.

00:00:41.400 --> 00:00:41.900
Cool.

00:00:41.900 --> 00:00:42.850
I'll do that.

00:00:42.850 --> 00:00:44.607
The tutorial will now go away.

00:00:44.607 --> 00:00:46.440
If we wait a few more
seconds we'll actually

00:00:46.440 --> 00:00:47.727
see a few other tutorials.

00:00:47.727 --> 00:00:49.310
So we've got a few
bits and pieces of,

00:00:49.310 --> 00:00:51.630
you need to click the
conveyor to change it.

00:00:51.630 --> 00:00:54.680
And you also need to press
the button to start the level.

00:00:54.680 --> 00:00:57.020
What I want to pick on
is that in previous years

00:00:57.020 --> 00:00:58.280
these were actually GIFs.

00:00:58.280 --> 00:00:59.779
And if you look at
this figure here,

00:00:59.779 --> 00:01:02.460
this 2 megabyte GIF
picture, in previous years

00:01:02.460 --> 00:01:04.430
if the user downloaded
this tutorial image,

00:01:04.430 --> 00:01:06.590
they'd actually download
2 megabytes of GIF.

00:01:06.590 --> 00:01:08.289
And this came from a good place.

00:01:08.289 --> 00:01:10.580
In Santa Tracker we tend to
avoid having a lot of text.

00:01:10.580 --> 00:01:13.260
We much prefer using
iconography and animation

00:01:13.260 --> 00:01:14.745
to show a user what to do.

00:01:14.745 --> 00:01:16.370
We don't want you to
have to read a lot

00:01:16.370 --> 00:01:18.640
to really sit down and play.

00:01:18.640 --> 00:01:20.990
So we had this GIF,
which was great.

00:01:20.990 --> 00:01:23.180
Now, what we can actually
do thanks to browser

00:01:23.180 --> 00:01:25.740
advancements is
send an MP4 down.

00:01:25.740 --> 00:01:26.960
There's one catch.

00:01:26.960 --> 00:01:28.880
If you have an MP4, you
can have it auto play,

00:01:28.880 --> 00:01:30.121
but not if it has audio.

00:01:30.121 --> 00:01:31.370
This works really well, right?

00:01:31.370 --> 00:01:32.744
Because this GIF
doesn't actually

00:01:32.744 --> 00:01:34.430
have any audio
lining up with it.

00:01:34.430 --> 00:01:36.050
We just want to
show an animation.

00:01:36.050 --> 00:01:38.420
What we actually do is we
converted this animation

00:01:38.420 --> 00:01:40.010
directly to an MP4.

00:01:40.010 --> 00:01:41.900
We actually use an online tool.

00:01:41.900 --> 00:01:43.150
You can Google for a couple.

00:01:43.150 --> 00:01:44.649
Although most of
them are just front

00:01:44.649 --> 00:01:46.250
ends to the open
source tool, FFMPEG.

00:01:46.250 --> 00:01:49.760
So if you have GIFs that
already work and you like them,

00:01:49.760 --> 00:01:51.530
you can just typically
convert them.

00:01:51.530 --> 00:01:53.240
One problem you
might have though

00:01:53.240 --> 00:01:55.820
is that these GIFs end up
having no transparencies.

00:01:55.820 --> 00:01:57.920
It's a nice property of
a GIF that actually it

00:01:57.920 --> 00:01:59.360
can have transparent pixels.

00:01:59.360 --> 00:02:02.382
So this matches our
little cloud effect.

00:02:02.382 --> 00:02:04.340
So let's talk about how
we achieve that effect.

00:02:04.340 --> 00:02:05.600
The video isn't transparent.

00:02:05.600 --> 00:02:08.210
So how do we add this cloud
effect around the edges?

00:02:08.210 --> 00:02:09.815
So let's have a look again.

00:02:09.815 --> 00:02:11.190
So if we look at
our source code,

00:02:11.190 --> 00:02:13.040
we can see that we've
actually got a video element

00:02:13.040 --> 00:02:14.810
inside our Santa
tutorial element, which

00:02:14.810 --> 00:02:16.560
is a thing that manages
these clouds which

00:02:16.560 --> 00:02:18.112
you see on the page.

00:02:18.112 --> 00:02:19.820
This video tag is
actually not displayed.

00:02:19.820 --> 00:02:22.190
If you look at our CSS you
can see that it's actually

00:02:22.190 --> 00:02:23.390
displaying none.

00:02:23.390 --> 00:02:26.750
The user actually never
sees the video as it is.

00:02:26.750 --> 00:02:29.600
So you can see here we
have an on play handler.

00:02:29.600 --> 00:02:32.540
This is the Polymer syntax
for adding an event listener

00:02:32.540 --> 00:02:33.140
in code.

00:02:33.140 --> 00:02:36.320
So this just basically means
video element.addeventlistener

00:02:36.320 --> 00:02:37.160
play.

00:02:37.160 --> 00:02:39.770
So whenever that happens,
we call blit to canvas.

00:02:39.770 --> 00:02:42.980
Play is called every frame that
the video is played or drawn.

00:02:42.980 --> 00:02:45.200
And so what we do, whenever
the video is played,

00:02:45.200 --> 00:02:47.679
so we actually take it,
we reset the canvas,

00:02:47.679 --> 00:02:49.470
and then we actually
do a couple of things.

00:02:49.470 --> 00:02:52.291
Firstly, as you can see here,
we blit our shadow image.

00:02:52.291 --> 00:02:53.790
That's the little
shape that we want

00:02:53.790 --> 00:02:55.820
to have this video fit into.

00:02:55.820 --> 00:02:57.890
We then turn that
actually to white.

00:02:57.890 --> 00:03:00.990
For various reasons that shadow
starts out as black for us.

00:03:00.990 --> 00:03:05.550
We then draw the video using
a certain composite operation.

00:03:05.550 --> 00:03:07.550
And what that basically
means is that we'll only

00:03:07.550 --> 00:03:10.129
draw things within that
shadow that we already have.

00:03:10.129 --> 00:03:12.170
So we blit the video,
which is the current frame.

00:03:12.170 --> 00:03:15.380
We can literally just say V,
which is our video element.

00:03:15.380 --> 00:03:17.630
And we can literally
draw it to the canvas.

00:03:17.630 --> 00:03:20.052
And now we have this
lovely video playing here

00:03:20.052 --> 00:03:22.010
that's actually playing
in a different element,

00:03:22.010 --> 00:03:24.410
being drawn to the canvas
right in front of us

00:03:24.410 --> 00:03:26.600
with no real performance
loss whatsoever.

00:03:26.600 --> 00:03:29.030
And this video, most
interestingly enough,

00:03:29.030 --> 00:03:32.090
is only about 80 kilobytes
compared to 2 megs.

00:03:32.090 --> 00:03:34.520
Obviously this is the worst
possible case I could find.

00:03:34.520 --> 00:03:36.728
We've got a few examples of
maybe a couple hundred k,

00:03:36.728 --> 00:03:37.675
down to 20k or 30k.

00:03:37.675 --> 00:03:39.050
And actually
another challenge we

00:03:39.050 --> 00:03:42.764
face is that many of our GIFs
were already highly compressed.

00:03:42.764 --> 00:03:44.930
And when GIFs compress,
what actually happens is you

00:03:44.930 --> 00:03:47.164
get a lot of blitting and
spots around the edges.

00:03:47.164 --> 00:03:48.830
So it turns out putting
them into FFMPEG

00:03:48.830 --> 00:03:50.580
isn't really useful,
because it's actually

00:03:50.580 --> 00:03:54.090
going to try to maintain that
weird compression that you kind

00:03:54.090 --> 00:03:55.307
of saw in that asset.

00:03:55.307 --> 00:03:57.140
So unfortunately, there
are some of our GIFs

00:03:57.140 --> 00:03:58.723
that we don't have
the source code to,

00:03:58.723 --> 00:04:00.307
which we can't really fix.

00:04:00.307 --> 00:04:02.640
So we're kind of stuck with
them for a bunch of reasons.

00:04:02.640 --> 00:04:04.306
If you look at our
tutorial folder here,

00:04:04.306 --> 00:04:06.514
we've got a code
boogie.gif file.

00:04:06.514 --> 00:04:07.930
And if you look
at this image, you

00:04:07.930 --> 00:04:10.179
can see that there's a few
artifacts around the edges.

00:04:10.179 --> 00:04:13.130
So this one's only 200k,
which still feels like a lot.

00:04:13.130 --> 00:04:15.050
But actually turning
into an MP4 makes it

00:04:15.050 --> 00:04:16.749
even bigger, which
is kind of a pain.

00:04:16.749 --> 00:04:18.290
But we don't have
the asset for this.

00:04:18.290 --> 00:04:20.700
So we're not going to
bother fixing this for now.

00:04:20.700 --> 00:04:22.540
So as well as converting
our GIFs to MP4s

00:04:22.540 --> 00:04:25.190
to make them smaller, we also do
a few other compression things

00:04:25.190 --> 00:04:27.080
on our media to
make them better.

00:04:27.080 --> 00:04:30.980
So for PNGs, we use PNG Crush
Zopfli to make them smaller.

00:04:30.980 --> 00:04:34.250
And for SVGs, we use
SVGO, and occasionally

00:04:34.250 --> 00:04:35.900
a bit of manual
tweaking to make sure

00:04:35.900 --> 00:04:37.830
that they're the
smallest they can be.

00:04:37.830 --> 00:04:40.610
So Santa Tracker has a ton
of SVGs throughout its site.

00:04:40.610 --> 00:04:43.351
The trees, the cute houses,
and things like that.

00:04:43.351 --> 00:04:45.350
But we often find that
they are way too detailed

00:04:45.350 --> 00:04:47.179
for the screen being drawn at.

00:04:47.179 --> 00:04:49.220
We originally used an
asset when it was this big.

00:04:49.220 --> 00:04:50.137
And now it's this big.

00:04:50.137 --> 00:04:52.428
So we'll often make sure we
reduce the amount of detail

00:04:52.428 --> 00:04:53.600
we send down to the user.

00:04:53.600 --> 00:04:55.225
Because if they're
not going to see it,

00:04:55.225 --> 00:04:56.670
it's not worth
putting in our SVG.

00:04:56.670 --> 00:04:58.880
And a tool like SVGO
doesn't really know that.

00:04:58.880 --> 00:05:01.199
It just tries to
make them compressed.

00:05:01.199 --> 00:05:02.740
If you are curious
about the approach

00:05:02.740 --> 00:05:06.700
we took today to play
video and draw a mask

00:05:06.700 --> 00:05:09.220
around it, be sure to check
out some of the links below.

00:05:09.220 --> 00:05:11.511
This isn't a new practice
we've done for Santa Tracker,

00:05:11.511 --> 00:05:14.420
but we've hopefully taken it and
used it in a really nice way.

00:05:14.420 --> 00:05:16.997
So thanks for watching, and I'll
see you on the next episode.

00:05:16.997 --> 00:05:19.330
You can subscribe to the
Google Chrome developer channel

00:05:19.330 --> 00:05:22.660
down here, or check out some
other great videos along here.

00:05:22.660 --> 00:05:25.710
[SLEIGH BELLS]

