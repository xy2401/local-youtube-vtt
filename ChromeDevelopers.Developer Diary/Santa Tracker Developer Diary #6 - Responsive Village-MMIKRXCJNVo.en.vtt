WEBVTT
Kind: captions
Language: en

00:00:00.420 --> 00:00:01.628
SAM THOROGOOD: Hey, everyone.

00:00:01.628 --> 00:00:02.190
Sam here.

00:00:02.190 --> 00:00:04.350
On this episode of the
"Santa Tracker Dev Diary,"

00:00:04.350 --> 00:00:05.820
I want to dissect the Village.

00:00:05.820 --> 00:00:07.530
Now the Village is the place
most people will land when

00:00:07.530 --> 00:00:08.742
they come to Santa Tracker.

00:00:08.742 --> 00:00:10.950
It's the cute interactive
scene with houses and stuff

00:00:10.950 --> 00:00:11.820
to click on.

00:00:11.820 --> 00:00:13.660
But it's different on
mobile and desktop.

00:00:13.660 --> 00:00:15.190
So let's have a look at that.

00:00:15.190 --> 00:00:16.950
So on desktop, which
we loosely define

00:00:16.950 --> 00:00:20.070
as having a screen with
greater than 768 pixels,

00:00:20.070 --> 00:00:22.080
we've got a very
desktop experience.

00:00:22.080 --> 00:00:24.750
You can hover over cards and
see what's inside the houses.

00:00:24.750 --> 00:00:26.840
We've also got a New Today
card in the top left.

00:00:26.840 --> 00:00:29.340
And we have this because this
is a very physical experience.

00:00:29.340 --> 00:00:31.240
It's meant to be
Santa's Village.

00:00:31.240 --> 00:00:34.870
And as stuff gets unlocked
as you go down the page,

00:00:34.870 --> 00:00:36.620
you get more and more
houses to play with.

00:00:36.620 --> 00:00:37.800
However, we kind
of know that people

00:00:37.800 --> 00:00:40.050
do tend to click on the stuff
at the top, which is why

00:00:40.050 --> 00:00:41.760
we have this New Today card.

00:00:41.760 --> 00:00:44.400
On mobile, however, we have
a very different experience.

00:00:44.400 --> 00:00:46.400
We actually flip it on
its head, and we actually

00:00:46.400 --> 00:00:48.384
show the most recent
cards at the top.

00:00:48.384 --> 00:00:50.550
What's interesting is this
is actually the same DOM,

00:00:50.550 --> 00:00:52.008
so these pop-up
cards here that you

00:00:52.008 --> 00:00:54.210
see are actually the
same elements over here

00:00:54.210 --> 00:00:56.190
but being displayed
in a different way.

00:00:56.190 --> 00:00:58.260
They're in a flexbox
in both cases,

00:00:58.260 --> 00:01:00.720
but on desktop, they're
positioned very absolutely.

00:01:00.720 --> 00:01:02.790
They're very specifically
over the houses.

00:01:02.790 --> 00:01:06.730
On mobile, we give that up, and
we just place them in a grid.

00:01:06.730 --> 00:01:08.830
We actually reversed them,
which is kind of cool.

00:01:08.830 --> 00:01:11.910
So the same DOM elements, if
we have a look here, have--

00:01:11.910 --> 00:01:14.490
we use a CSS variable
called release order.

00:01:14.490 --> 00:01:16.800
And on tablet mode,
which you see here,

00:01:16.800 --> 00:01:19.170
and if they have a link,
which means that they're open,

00:01:19.170 --> 00:01:20.670
we actually use the
order attribute.

00:01:20.670 --> 00:01:22.890
And the order attribute
is used in a flexbox

00:01:22.890 --> 00:01:23.994
to rearrange elements.

00:01:23.994 --> 00:01:25.410
So these elements
on the left here

00:01:25.410 --> 00:01:28.500
are actually ordered top
down, but we leverage

00:01:28.500 --> 00:01:31.710
flexbox to rearrange them so
that the first one that's open

00:01:31.710 --> 00:01:33.760
or the most recent one
that's open is at the top.

00:01:33.760 --> 00:01:35.160
So that's pretty cool.

00:01:35.160 --> 00:01:37.110
So despite the differences
in the card layout,

00:01:37.110 --> 00:01:39.330
the Villages do have
some similarities.

00:01:39.330 --> 00:01:40.890
The header here is the same.

00:01:40.890 --> 00:01:44.841
The peg man here, which is
the map's dive game we have,

00:01:44.841 --> 00:01:46.590
is actually the same
in both environments,

00:01:46.590 --> 00:01:48.554
although we position him
slightly differently.

00:01:48.554 --> 00:01:50.970
So this code here controls
whether we have the Easter eggs

00:01:50.970 --> 00:01:52.090
at the bottom of the page.

00:01:52.090 --> 00:01:54.131
And so you can see here
that this template, which

00:01:54.131 --> 00:01:56.070
is a Polymer feature,
controls whether we have

00:01:56.070 --> 00:01:57.550
the background Easter eggs.

00:01:57.550 --> 00:01:59.890
There's quite a long list
here, as you can see.

00:01:59.890 --> 00:02:01.980
The way this works is we
use the IN media query.

00:02:01.980 --> 00:02:04.110
It sets the Is Seen
Village to true or false

00:02:04.110 --> 00:02:06.050
based on whether
this query is true.

00:02:06.050 --> 00:02:08.250
So if it's true,
we've got a big size,

00:02:08.250 --> 00:02:10.110
and we want to create
all these nodes.

00:02:10.110 --> 00:02:11.776
When this might happen
in the real world

00:02:11.776 --> 00:02:13.330
is let's say you've
got a tablet.

00:02:13.330 --> 00:02:15.079
And if you have a
tablet in landscape mode

00:02:15.079 --> 00:02:17.490
and then rotate it, these
elements will now be created.

00:02:17.490 --> 00:02:19.170
Your tablets change
size, and now we

00:02:19.170 --> 00:02:20.711
have a big, wide
Village, and we want

00:02:20.711 --> 00:02:22.510
to share the full experience.

00:02:22.510 --> 00:02:26.380
However, when you rotate back,
what Polymer will do by default

00:02:26.380 --> 00:02:27.990
is keep those DOM
elements around.

00:02:27.990 --> 00:02:29.426
It will just hide them.

00:02:29.426 --> 00:02:31.050
Now this is sometimes
desirable, right?

00:02:31.050 --> 00:02:33.230
Like these elements might
take a lot to create.

00:02:33.230 --> 00:02:34.930
There's a bit of a cost in that.

00:02:34.930 --> 00:02:36.324
But for us, we don't want that.

00:02:36.324 --> 00:02:37.740
For us, the cost
in these elements

00:02:37.740 --> 00:02:39.448
is not really their
creation on the page,

00:02:39.448 --> 00:02:41.940
their memory cost, but often
that they'll do things.

00:02:41.940 --> 00:02:44.730
And we actually want to leverage
the natural lifecycle methods

00:02:44.730 --> 00:02:48.000
of the platform, the
attach and detach methods,

00:02:48.000 --> 00:02:50.100
to actually control
those elements' behavior.

00:02:50.100 --> 00:02:51.390
Let's have a look at that.

00:02:51.390 --> 00:02:53.940
The way Polymer does that is
through this restamp attribute.

00:02:53.940 --> 00:02:57.510
And what that means is that
when this value becomes false,

00:02:57.510 --> 00:03:00.120
these elements will properly
be removed from the page.

00:03:00.120 --> 00:03:03.460
By default, as I said, they'll
just be made Display None.

00:03:03.460 --> 00:03:04.596
Why do we do that?

00:03:04.596 --> 00:03:05.970
For us, this is
really important,

00:03:05.970 --> 00:03:08.303
because we try to leverage
the natural lifecycle methods

00:03:08.303 --> 00:03:09.540
of the platform.

00:03:09.540 --> 00:03:11.750
In our example here,
we've got the snowmobile.

00:03:11.750 --> 00:03:14.250
And the snowmobile is a little
thing you click on that zooms

00:03:14.250 --> 00:03:14.875
left and right.

00:03:14.875 --> 00:03:15.870
It's quite cute.

00:03:15.870 --> 00:03:17.912
But it does a bit of work
on attach and detach.

00:03:17.912 --> 00:03:19.620
And rather than having
to awkwardly plumb

00:03:19.620 --> 00:03:22.514
through some like, oh, you're
on the page or not on the page,

00:03:22.514 --> 00:03:24.180
we can actually use
the natural methods,

00:03:24.180 --> 00:03:26.550
these attached and detached
methods, which are built in.

00:03:26.550 --> 00:03:28.050
They're part of the platform.

00:03:28.050 --> 00:03:29.425
Although in the
platform, they're

00:03:29.425 --> 00:03:32.160
called connected callback
and disconnected callback.

00:03:32.160 --> 00:03:34.354
We can leverage these
methods to do things.

00:03:34.354 --> 00:03:37.020
And we actually know, therefore,
that the element is on the page

00:03:37.020 --> 00:03:37.840
or not on the page.

00:03:37.840 --> 00:03:39.210
And that's very nice.

00:03:39.210 --> 00:03:41.120
But we actually take
this to the extreme.

00:03:41.120 --> 00:03:43.350
So in a previous
episode of the series,

00:03:43.350 --> 00:03:44.611
I talked about lazy pages.

00:03:44.611 --> 00:03:46.860
Now lazy pages is an element
that will create elements

00:03:46.860 --> 00:03:47.550
as we need them.

00:03:47.550 --> 00:03:49.590
So none of these elements are
on the page to start with,

00:03:49.590 --> 00:03:51.506
and what happens is when
you navigate to them,

00:03:51.506 --> 00:03:52.350
we create them.

00:03:52.350 --> 00:03:53.886
That makes a lot of sense.

00:03:53.886 --> 00:03:55.260
In previous years,
these elements

00:03:55.260 --> 00:03:56.676
actually stuck
around on the page,

00:03:56.676 --> 00:03:58.200
even after you were
done with them.

00:03:58.200 --> 00:04:00.349
Now that's fine, but it
causes a few problems.

00:04:00.349 --> 00:04:02.640
We had a lot of memory issues,
because basically, Santa

00:04:02.640 --> 00:04:03.866
is a really complicated site.

00:04:03.866 --> 00:04:06.240
If you went to a bunch of
scenes, what would often happen

00:04:06.240 --> 00:04:08.250
is that your browser would
really get bogged down.

00:04:08.250 --> 00:04:09.580
I mean, Santa's already
pretty complicated.

00:04:09.580 --> 00:04:10.750
I'm not going to lie to you.

00:04:10.750 --> 00:04:11.910
But it would get
really bogged down,

00:04:11.910 --> 00:04:12.810
because of all these scenes.

00:04:12.810 --> 00:04:13.810
You went to the airport.

00:04:13.810 --> 00:04:14.940
You went to the press page.

00:04:14.940 --> 00:04:16.940
You went to a few other
scenes, and your browser

00:04:16.940 --> 00:04:18.209
would really be feeling it.

00:04:18.209 --> 00:04:20.490
So what we do now is we
actually remove these elements

00:04:20.490 --> 00:04:21.380
from the page.

00:04:21.380 --> 00:04:23.080
What the tricky
parts there are is

00:04:23.080 --> 00:04:25.663
we need to make sure that we're
actually cleaning up properly.

00:04:25.663 --> 00:04:28.030
And in JavaScript and HTML,
this is actually quite hard.

00:04:28.030 --> 00:04:29.571
So if you look at
a scene here, let's

00:04:29.571 --> 00:04:30.872
look at our elf ski scene.

00:04:30.872 --> 00:04:31.830
I'll show off the game.

00:04:31.830 --> 00:04:32.538
It's pretty cute.

00:04:32.538 --> 00:04:34.140
You can ski down
the mountain here,

00:04:34.140 --> 00:04:37.230
and eventually you
run into a tree.

00:04:37.230 --> 00:04:40.299
However, we need to make sure
that we clean up properly.

00:04:40.299 --> 00:04:42.840
So, in this case, this game is
adding a few global listeners,

00:04:42.840 --> 00:04:43.680
and that's tricky, right?

00:04:43.680 --> 00:04:45.060
Because we need to make
sure that we remove them

00:04:45.060 --> 00:04:46.210
when we're done.

00:04:46.210 --> 00:04:48.990
So we wrap the attach and detach
methods in unshow and unhide

00:04:48.990 --> 00:04:50.860
here, which you can see.

00:04:50.860 --> 00:04:53.130
And so, the good way
to think about this

00:04:53.130 --> 00:04:55.080
is whenever you add
a listener, make

00:04:55.080 --> 00:04:57.840
sure you're adding an equivalent
clean-up handler somewhere

00:04:57.840 --> 00:04:58.502
else.

00:04:58.502 --> 00:05:00.960
And so for us, we add things
like the resize handler, which

00:05:00.960 --> 00:05:02.100
are removed on the bottom.

00:05:02.100 --> 00:05:04.710
We also have a tick interval,
which we removed on the bottom.

00:05:04.710 --> 00:05:06.540
And we also have a
request animation frame.

00:05:06.540 --> 00:05:09.000
Now in request animation
frame, this callback,

00:05:09.000 --> 00:05:11.350
we don't register
an additional one.

00:05:11.350 --> 00:05:12.900
Now, as part of this
ref, we actually

00:05:12.900 --> 00:05:14.350
check to see if
we're on the page.

00:05:14.350 --> 00:05:16.290
And if we're on the page,
we keep doing more refs,

00:05:16.290 --> 00:05:18.450
and if not, then we stop,
which is a pretty natural way

00:05:18.450 --> 00:05:19.660
to clean up when you're done.

00:05:19.660 --> 00:05:21.368
So as part of this,
we make Santa Tracker

00:05:21.368 --> 00:05:23.520
more stable and more
reliable, which is great.

00:05:23.520 --> 00:05:25.769
So these were our learnings
from building a responsive

00:05:25.769 --> 00:05:27.810
Village inside Santa
Tracker, and how they

00:05:27.810 --> 00:05:29.335
apply to the site as a whole.

00:05:29.335 --> 00:05:31.710
And while obviously Santa
Tracker is a hugely complicated

00:05:31.710 --> 00:05:32.361
example, right?

00:05:32.361 --> 00:05:34.110
We've got lots of
animations, and effects,

00:05:34.110 --> 00:05:35.880
and stuff we want to
clean up, so it's not

00:05:35.880 --> 00:05:37.717
happening while you're
browsing the site,

00:05:37.717 --> 00:05:40.050
hopefully you'll take away
something for your own sites.

00:05:40.050 --> 00:05:42.840
Any single page application
that loads content dynamically

00:05:42.840 --> 00:05:45.917
might need to clean up rather
than keeping the DOM around.

00:05:45.917 --> 00:05:46.750
Thanks for watching.

00:05:46.750 --> 00:05:47.930
I'll see you next time.

00:05:47.930 --> 00:05:50.263
You can subscribe to the
Google Chrome developer channel

00:05:50.263 --> 00:05:53.660
down here or check out some
other great videos along here.

