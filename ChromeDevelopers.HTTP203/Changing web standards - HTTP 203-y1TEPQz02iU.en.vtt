WEBVTT
Kind: captions
Language: en

00:00:00.433 --> 00:00:01.350
JAKE ARCHIBALD: Hello.

00:00:01.350 --> 00:00:01.850
This is me.

00:00:01.850 --> 00:00:02.790
This is Jake.

00:00:02.790 --> 00:00:05.670
I'll be talking about
IndexedDB and web standards

00:00:05.670 --> 00:00:07.888
in a few minutes with
my good colleague Surma.

00:00:07.888 --> 00:00:08.430
SURMA: Hello.

00:00:08.430 --> 00:00:09.650
I'm Surma.

00:00:09.650 --> 00:00:10.150
Hello.

00:00:10.150 --> 00:00:11.140
- So we are good to go.

00:00:11.140 --> 00:00:12.150
Good to go?

00:00:12.150 --> 00:00:13.733
JAKE ARCHIBALD: Do
I need face powder?

00:00:13.733 --> 00:00:14.503
Am I shiny?

00:00:14.503 --> 00:00:15.420
I sometimes get shiny.

00:00:15.420 --> 00:00:17.770
[MUSIC PLAYING]

00:00:22.940 --> 00:00:23.510
So.

00:00:23.510 --> 00:00:24.170
SURMA: So.

00:00:24.170 --> 00:00:26.780
JAKE ARCHIBALD: So I'm
going to try and do

00:00:26.780 --> 00:00:28.610
something a little bit
different this time.

00:00:28.610 --> 00:00:29.160
SURMA: I can tell.

00:00:29.160 --> 00:00:29.930
We have a laptop here.

00:00:29.930 --> 00:00:31.330
We don't have a
laptop here, usually.

00:00:31.330 --> 00:00:31.470
What's happening?

00:00:31.470 --> 00:00:33.137
JAKE ARCHIBALD: We've
got a laptop here.

00:00:33.137 --> 00:00:36.670
Now, do you remember the
YouTube series "Supercharged?"

00:00:36.670 --> 00:00:38.060
SURMA: Ooh.

00:00:38.060 --> 00:00:39.460
I'm not very familiar with it.

00:00:39.460 --> 00:00:40.377
JAKE ARCHIBALD: Right.

00:00:40.377 --> 00:00:43.710
Well, I thought I would
try and do that, basically,

00:00:43.710 --> 00:00:44.680
but on "HTTP 203."

00:00:44.680 --> 00:00:47.170
SURMA: So after I said this
is the end of "Supercharged,"

00:00:47.170 --> 00:00:49.450
you're now like,
I'll bring it back!

00:00:49.450 --> 00:00:49.950
LOL.

00:00:49.950 --> 00:00:50.720
JAKE ARCHIBALD:
Bringing it back, yes.

00:00:50.720 --> 00:00:51.120
SURMA: All right.

00:00:51.120 --> 00:00:51.620
Let's do it.

00:00:51.620 --> 00:00:52.485
Let's do it.

00:00:52.485 --> 00:00:54.110
JAKE ARCHIBALD:
There's a little twist.

00:00:54.110 --> 00:00:55.010
SURMA: Oh, OK.

00:00:55.010 --> 00:00:58.490
JAKE ARCHIBALD: And instead
of coding something, like,

00:00:58.490 --> 00:01:02.850
you're building something,
I'm going to edit a web spec--

00:01:02.850 --> 00:01:03.770
SURMA: Oh!

00:01:03.770 --> 00:01:05.437
JAKE ARCHIBALD:
--because it's something

00:01:05.437 --> 00:01:07.920
that I only really learned
to do the past few years.

00:01:07.920 --> 00:01:09.900
It's not something
a lot of people do.

00:01:09.900 --> 00:01:12.080
And I found a feature
that I wanted to add.

00:01:12.080 --> 00:01:13.025
It's relatively small.

00:01:13.025 --> 00:01:13.525
SURMA: OK.

00:01:13.525 --> 00:01:14.680
JAKE ARCHIBALD: So I thought
we'll go for the whole end

00:01:14.680 --> 00:01:14.780
to end--

00:01:14.780 --> 00:01:15.860
SURMA: Let's do it,
because I've never--

00:01:15.860 --> 00:01:16.280
JAKE ARCHIBALD: Right.

00:01:16.280 --> 00:01:17.780
SURMA: --done
actual spec editing.

00:01:17.780 --> 00:01:20.510
The only thing I've done
is I contributed links

00:01:20.510 --> 00:01:23.210
to the stream spec, so you
can click links and make

00:01:23.210 --> 00:01:24.380
it more navigational.

00:01:24.380 --> 00:01:27.180
And I can read the odd
spec every now and then,

00:01:27.180 --> 00:01:30.650
but I've never actually went
through the normative sections

00:01:30.650 --> 00:01:31.250
or anything.

00:01:31.250 --> 00:01:33.140
So that's-- all right.

00:01:33.140 --> 00:01:34.310
I'm going to have questions.

00:01:34.310 --> 00:01:34.520
JAKE ARCHIBALD: OK.

00:01:34.520 --> 00:01:35.330
SURMA: I'm going to
throw them at you.

00:01:35.330 --> 00:01:35.780
JAKE ARCHIBALD: That's good.

00:01:35.780 --> 00:01:36.280
That's good.

00:01:36.280 --> 00:01:37.550
Yes.

00:01:37.550 --> 00:01:40.380
So I'm going to start with
trying to describe the problem.

00:01:40.380 --> 00:01:41.505
The problem is IndexedDB.

00:01:41.505 --> 00:01:42.380
Now, there a lot of--

00:01:42.380 --> 00:01:42.800
SURMA: I was--

00:01:42.800 --> 00:01:43.160
JAKE ARCHIBALD: --problems--

00:01:43.160 --> 00:01:43.515
SURMA: Yes.

00:01:43.515 --> 00:01:44.120
JAKE ARCHIBALD:
--with IndexedDB.

00:01:44.120 --> 00:01:45.230
SURMA: This is a bad start.

00:01:45.230 --> 00:01:46.150
JAKE ARCHIBALD:
Yeah, and we're going

00:01:46.150 --> 00:01:47.608
to talk about one
specific problem.

00:01:47.608 --> 00:01:48.900
SURMA: Are we fixing IndexedDB?

00:01:48.900 --> 00:01:50.130
Is it going to be better?

00:01:50.130 --> 00:01:52.140
JAKE ARCHIBALD: Very,
very slightly better

00:01:52.140 --> 00:01:53.268
in a very small way.

00:01:53.268 --> 00:01:54.310
SURMA: Better than worse.

00:01:54.310 --> 00:01:55.280
So, OK.

00:01:55.280 --> 00:01:58.460
JAKE ARCHIBALD: So
when you do IndexedDB--

00:01:58.460 --> 00:02:00.470
this is me trying
to remember the API.

00:02:00.470 --> 00:02:03.050
SURMA: The actual API not your
nice, promised warp on top.

00:02:03.050 --> 00:02:04.730
JAKE: Yeah, this
is raw IndexedDB.

00:02:04.730 --> 00:02:08.720
You get a request object.

00:02:08.720 --> 00:02:10.850
And there's on success.

00:02:10.850 --> 00:02:13.400
I really love
autocomplete [INAUDIBLE]..

00:02:13.400 --> 00:02:14.420
It absolutely saves me.

00:02:17.430 --> 00:02:17.930
Right.

00:02:17.930 --> 00:02:18.888
We got our own success.

00:02:18.888 --> 00:02:22.490
This is going to give us
a database, which is--

00:02:22.490 --> 00:02:23.900
.results.

00:02:23.900 --> 00:02:25.108
Yes, I'm remembering the API.

00:02:25.108 --> 00:02:26.858
SURMA: Because why
would it be a parameter

00:02:26.858 --> 00:02:28.160
to the on-success function?

00:02:28.160 --> 00:02:30.310
JAKE: Of course, not.

00:02:30.310 --> 00:02:32.690
IndexedDB is a horrible API.

00:02:32.690 --> 00:02:35.510
SURMA: It's a fractal
of weird design, really.

00:02:35.510 --> 00:02:36.350
JAKE: Yes.

00:02:36.350 --> 00:02:38.510
So the way you
work with IndexedDB

00:02:38.510 --> 00:02:40.500
is you create a transaction.

00:02:40.500 --> 00:02:42.600
So I'm going to go transaction.

00:02:42.600 --> 00:02:43.900
And you give it the name.

00:02:43.900 --> 00:02:45.650
SURMA: I mean, we can't
assume that people

00:02:45.650 --> 00:02:47.120
know what IndexedDB is.

00:02:47.120 --> 00:02:49.910
It's a database on
the client side,

00:02:49.910 --> 00:02:51.368
and you can have
multiple storages.

00:02:51.368 --> 00:02:53.077
And you can put things
into the storages.

00:02:53.077 --> 00:02:55.080
And you have transactions
that we've shown here.

00:02:55.080 --> 00:02:59.160
It's a pretty, in a sense,
a pretty powerful API--

00:02:59.160 --> 00:02:59.660
JAKE: Yes.

00:02:59.660 --> 00:03:01.327
SURMA: --once you
have wrapped your head

00:03:01.327 --> 00:03:06.260
around the kind of weird API
that got shipped in the end.

00:03:06.260 --> 00:03:10.346
JAKE: Yes, and there's a
very specific part of it

00:03:10.346 --> 00:03:14.950
that I run into, a
problem that I run into,

00:03:14.950 --> 00:03:17.540
and it's with cursors.

00:03:17.540 --> 00:03:20.060
SURMA: All right, so you
create a transaction.

00:03:20.060 --> 00:03:23.270
The transaction is on
a specific store, which

00:03:23.270 --> 00:03:27.570
can have multiple entries.

00:03:27.570 --> 00:03:30.460
Imagine a SQL database
with your tables and rows.

00:03:30.460 --> 00:03:32.600
A table would be a
store and in that

00:03:32.600 --> 00:03:36.110
store can be multiple entries
as in rows in a SQL database.

00:03:36.110 --> 00:03:38.630
JAKE: Yes.

00:03:38.630 --> 00:03:42.150
SURMA: So you have to limit your
transaction to a set of stores,

00:03:42.150 --> 00:03:43.010
I think.

00:03:43.010 --> 00:03:46.070
In this case, it's just one,
but it could be multiple.

00:03:46.070 --> 00:03:46.820
JAKE: Exactly.

00:03:46.820 --> 00:03:47.600
Exactly.

00:03:47.600 --> 00:03:49.430
So I'm going to go
on success here.

00:03:49.430 --> 00:03:51.140
And this how you open a cursor.

00:03:51.140 --> 00:03:53.390
SURMA: And a cursor is
basically a little data.

00:03:53.390 --> 00:03:56.580
So it allows you to traverse
all the entries in a store.

00:03:56.580 --> 00:03:57.080
JAKE: Yes.

00:03:57.080 --> 00:04:01.930
SURMA: So much I
do know about IDB.

00:04:01.930 --> 00:04:03.873
JAKE: So I've done that now.

00:04:03.873 --> 00:04:05.290
So this is this
whole boilerplate.

00:04:05.290 --> 00:04:06.600
SURMA: So quick and easy.

00:04:06.600 --> 00:04:08.960
JAKE: It's a really
easy episode to explain.

00:04:08.960 --> 00:04:10.728
This is basically the start.

00:04:10.728 --> 00:04:11.520
SURMA: Boilerplate.

00:04:11.520 --> 00:04:13.910
JAKE: So I I've been
creating a little wrapper

00:04:13.910 --> 00:04:15.230
library around IndexedDB.

00:04:15.230 --> 00:04:16.373
SURMA: For a awhile now.

00:04:16.373 --> 00:04:17.290
JAKE: For a while now.

00:04:17.290 --> 00:04:18.560
Yeah, it's been
released for a while.

00:04:18.560 --> 00:04:19.970
I'm working on the next version.

00:04:19.970 --> 00:04:22.553
SURMA: The next major version,
with breaking changes, I guess,

00:04:22.553 --> 00:04:23.450
and everything.

00:04:23.450 --> 00:04:24.140
It's called IDB?

00:04:24.140 --> 00:04:25.430
JAKE: It is called IDB.

00:04:25.430 --> 00:04:26.760
That was available in NPM.

00:04:26.760 --> 00:04:27.260
Great.

00:04:27.260 --> 00:04:28.490
I'll take it.

00:04:28.490 --> 00:04:30.323
SURMA: Because, I guess,
we should be clear.

00:04:30.323 --> 00:04:31.160
IDB is your library.

00:04:31.160 --> 00:04:33.122
This API is called IndexedDB.

00:04:33.122 --> 00:04:34.580
JAKE: Yes, I made
it very easy to--

00:04:34.580 --> 00:04:34.870
[INTERPOSING VOICES]

00:04:34.870 --> 00:04:36.950
SURMA: It's very common
to call IndexedDB IDB.

00:04:36.950 --> 00:04:37.880
But technically--

00:04:37.880 --> 00:04:40.130
JAKE: Which is why I thought,
I'll take that namespace

00:04:40.130 --> 00:04:41.755
and try and make it
sound all official.

00:04:41.864 --> 00:04:42.406
SURMA: Great.

00:04:42.406 --> 00:04:43.640
Well done.

00:04:43.640 --> 00:04:45.350
JAKE: So what I
was trying to do is

00:04:45.350 --> 00:04:50.780
create an API, where, given
a normal IndexedDB object,

00:04:50.780 --> 00:04:51.980
you can pass it into my API.

00:04:51.980 --> 00:04:55.010
And it will enhance it
with all of the extra stuff

00:04:55.010 --> 00:04:57.950
and make it easier to use.

00:04:57.950 --> 00:04:59.810
And the problem I ran
into is with cursors.

00:04:59.810 --> 00:05:02.680
So once you've got
a cursor, the cursor

00:05:02.680 --> 00:05:08.120
will give you the key and
the value of this one entry--

00:05:08.120 --> 00:05:10.820
SURMA: Of the row that it's
currently at in the storage.

00:05:10.820 --> 00:05:11.420
JAKE: Yes.

00:05:11.420 --> 00:05:13.880
And when you want to
go to the next row,

00:05:13.880 --> 00:05:17.850
you do cursor.continue.

00:05:17.850 --> 00:05:20.330
And now, this doesn't
return anything.

00:05:20.330 --> 00:05:26.360
What it does is it causes
the request for the cursor

00:05:26.360 --> 00:05:29.448
to fire its success event again.

00:05:29.448 --> 00:05:29.990
SURMA: Right.

00:05:29.990 --> 00:05:32.090
So this is basically
a hidden way

00:05:32.090 --> 00:05:34.370
of calling this
function recursive.

00:05:34.370 --> 00:05:35.720
JAKE: Yes.

00:05:35.720 --> 00:05:37.400
It's a weird way of doing that.

00:05:42.830 --> 00:05:48.020
If the cursor is
null, you're done.

00:05:48.020 --> 00:05:50.270
SURMA: Then you reached the
end of your object store.

00:05:50.270 --> 00:05:50.960
JAKE: Exactly.

00:05:50.960 --> 00:05:51.890
SURMA: OK.

00:05:51.890 --> 00:05:53.540
JAKE: So I faced a
problem with this,

00:05:53.540 --> 00:05:58.315
because if someone just
passes me the cursor object,

00:05:58.315 --> 00:05:59.190
I have the means to--

00:05:59.190 --> 00:06:01.690
SURMA: When you say, me, you
mean, you as the author of IDB?

00:06:01.690 --> 00:06:03.860
JAKE: Yes, the library.

00:06:03.860 --> 00:06:06.130
Or if you pass a cursor
to another piece of code,

00:06:06.130 --> 00:06:10.190
if we keep it generic, you
could then call continue.

00:06:10.190 --> 00:06:11.290
SURMA: And you're screwed.

00:06:11.290 --> 00:06:13.623
JAKE: Yeah, you've got no way
of hearing that that works

00:06:13.623 --> 00:06:16.958
or that fails, because you would
also need to have the request.

00:06:16.958 --> 00:06:19.250
SURMA: Yes, you need to be
in control of the on success

00:06:19.250 --> 00:06:19.790
handler.

00:06:19.790 --> 00:06:24.370
JAKE: Yes, and I noticed
that in IndexedDB,

00:06:24.370 --> 00:06:29.265
there's often routes back,
like the chain of this--

00:06:29.265 --> 00:06:30.140
SURMA: The hierarchy.

00:06:30.140 --> 00:06:30.740
JAKE: The hierarchy.

00:06:30.740 --> 00:06:32.990
So from the store, you can
get to the transaction.

00:06:32.990 --> 00:06:36.090
You can get to the database.

00:06:36.090 --> 00:06:36.590
SURMA: DB.

00:06:36.590 --> 00:06:37.910
JAKE: I think it's DB.

00:06:37.910 --> 00:06:39.800
Yes, you get to the database.

00:06:39.800 --> 00:06:42.488
But there is no link
between the cursor and--

00:06:42.488 --> 00:06:43.280
SURMA: The request.

00:06:43.280 --> 00:06:44.150
JAKE: --the request.

00:06:44.150 --> 00:06:47.750
So I want to say, wouldn't
it be nice if there was--

00:06:47.750 --> 00:06:48.560
SURMA: The request.

00:06:48.560 --> 00:06:50.970
JAKE: The request.

00:06:50.970 --> 00:06:52.770
There we go.

00:06:52.770 --> 00:06:55.970
SURMA: And then I, as a library,
could temporarily override

00:06:55.970 --> 00:06:58.325
on success, do the continue
bits, do my work, and then--

00:06:58.325 --> 00:07:00.950
JAKE: I could pass you a cursor,
and you could use that cursor.

00:07:00.950 --> 00:07:01.520
SURMA: That's great.

00:07:01.520 --> 00:07:03.960
That seems like a very
reasonable thing to have, Jake.

00:07:03.960 --> 00:07:04.547
Ship it.

00:07:04.547 --> 00:07:06.630
JAKE: Well, that's what
we're going to try and do.

00:07:06.630 --> 00:07:07.550
SURMA: That's what
we're doing today?

00:07:07.550 --> 00:07:08.360
JAKE: Yes, it is.

00:07:08.360 --> 00:07:10.415
SURMA: That's exciting.

00:07:10.415 --> 00:07:12.430
JAKE: So I thought,
how do I start this?

00:07:12.430 --> 00:07:13.930
SURMA: Yeah, well,
how do you start?

00:07:13.930 --> 00:07:16.940
Because now, you want to have
this on the web platform.

00:07:16.940 --> 00:07:18.560
I mean, you could
probably polyfill it

00:07:18.560 --> 00:07:21.620
by just attaching random
things to the cursor.

00:07:21.620 --> 00:07:22.870
But that wouldn't be standard.

00:07:22.870 --> 00:07:24.162
You want to make it a standard.

00:07:24.162 --> 00:07:25.912
So we have to look
into the spec, I guess.

00:07:25.912 --> 00:07:27.579
JAKE: Yeah, I would
say, what my library

00:07:27.579 --> 00:07:30.050
is doing is it depends
on being the thing which

00:07:30.050 --> 00:07:30.800
opens the cursor.

00:07:30.800 --> 00:07:32.810
Because then it has
the original request,

00:07:32.810 --> 00:07:35.150
and then it can maintain
that link itself.

00:07:35.150 --> 00:07:39.120
But if you just pass the
cursor, yeah, you're screwed.

00:07:39.120 --> 00:07:43.340
So if I was going to do some
work on a spec, what I would do

00:07:43.340 --> 00:07:45.260
is go to MDN.

00:07:45.260 --> 00:07:47.330
SURMA: Interesting.

00:07:47.330 --> 00:07:50.665
JAKE: I've got muscle memory
from when I searched MDN or NPM

00:07:50.665 --> 00:07:51.790
at the start of everything.

00:07:51.790 --> 00:07:53.570
I get the two mixed
up all the time.

00:07:53.570 --> 00:07:56.340
But this case, I
do want IndexedDB.

00:07:56.340 --> 00:07:57.880
SURMA: Yes.

00:07:57.880 --> 00:08:00.825
It's called IndexedDB,
not IndexDB.

00:08:00.825 --> 00:08:02.600
JAKE: I call it
IndexDB all the time.

00:08:02.600 --> 00:08:04.058
SURMA: So do I,
but I'm not saying,

00:08:04.058 --> 00:08:05.343
technically, you're wrong.

00:08:05.343 --> 00:08:07.510
JAKE: I'm technically wrong
about many, many things.

00:08:07.510 --> 00:08:09.135
I'm sure many of them
are going to come

00:08:09.135 --> 00:08:10.860
to light in this episode.

00:08:10.860 --> 00:08:16.150
SURMA: So yeah, I think, MDN has
always a very good browser port

00:08:16.150 --> 00:08:18.610
table and links to the
specs, which I value a lot.

00:08:18.610 --> 00:08:21.027
JAKE: Yes, and if you want to
find which spec something is

00:08:21.027 --> 00:08:23.800
defined in, MDN is the best
way, I think, to get into that.

00:08:23.800 --> 00:08:25.550
SURMA: But see, we
already have two specs.

00:08:25.550 --> 00:08:29.080
We have IndexedDB API and
IndexedDB API, version 2.0.

00:08:29.080 --> 00:08:30.940
JAKE: Yes, it's
useful, isn't it?

00:08:33.492 --> 00:08:35.950
SURMA: I'm guessing a cursor--
so basically, I would expect

00:08:35.950 --> 00:08:37.978
it to be in the version 1.

00:08:37.978 --> 00:08:39.770
Rather that's true is
a different question,

00:08:39.770 --> 00:08:41.145
but that would be
my gut feeling.

00:08:41.145 --> 00:08:43.630
JAKE: If you've got two
choices between two specs--

00:08:43.630 --> 00:08:46.870
let's open them both.

00:08:46.870 --> 00:08:49.640
We'll have a look
at the URLs here.

00:08:49.640 --> 00:08:51.400
So this is the URL
for one of them.

00:08:54.110 --> 00:08:56.500
SURMA: But even that
one says 2.0 here.

00:08:56.500 --> 00:08:58.670
JAKE: Yes, that's because
2.0 has now shipped.

00:08:58.670 --> 00:09:00.830
We're now on to 3.0.

00:09:00.830 --> 00:09:02.993
SURMA: But the
links in MDN-- you

00:09:02.993 --> 00:09:04.160
should fix the links in MDN.

00:09:04.160 --> 00:09:06.880
JAKE: Someone should update MDN.

00:09:06.880 --> 00:09:10.233
If the link to a
spec has TR, there's

00:09:10.233 --> 00:09:12.400
a good chance you're looking
at the out-of-date one.

00:09:12.400 --> 00:09:14.790
SURMA: Yes, those
are the snapshots,

00:09:14.790 --> 00:09:16.310
which I've learned in Houdini.

00:09:16.310 --> 00:09:17.380
Those are the snapshots.

00:09:17.380 --> 00:09:19.510
This is a version we have
now officially-- this

00:09:19.510 --> 00:09:21.390
is the center that
has this version.

00:09:21.390 --> 00:09:23.490
And I've been told
what you should do.

00:09:23.490 --> 00:09:26.503
You look at this spec, and
you find the editor's draft.

00:09:26.503 --> 00:09:27.670
And that's what you look at.

00:09:27.670 --> 00:09:28.870
JAKE: And there will be a link.

00:09:28.870 --> 00:09:30.500
SURMA: Usually,
there will be a link.

00:09:30.500 --> 00:09:33.040
JAKE: The joke is,
TR stands for trash.

00:09:33.040 --> 00:09:33.940
SURMA: Oh, harsh.

00:09:33.940 --> 00:09:34.840
JAKE: And that's
not always true.

00:09:34.840 --> 00:09:36.790
Because sometimes, that is
literally the latest version

00:09:36.790 --> 00:09:37.920
of a spec, but if there is--

00:09:37.920 --> 00:09:39.295
SURMA: To be fair,
it's only been

00:09:39.295 --> 00:09:41.580
recently I feel that
everything turned into more

00:09:41.580 --> 00:09:44.290
like a rolling release
approach rather than working

00:09:44.290 --> 00:09:46.750
from major version
to major version.

00:09:46.750 --> 00:09:47.530
JAKE: Yes.

00:09:47.530 --> 00:09:49.690
SURMA: All right, so if we have
the red bar on the left side,

00:09:49.690 --> 00:09:51.310
it means, we are on
an editor's draft

00:09:51.310 --> 00:09:53.980
and this will most likely
be the most recent spec.

00:09:53.980 --> 00:09:54.772
JAKE: Yes, exactly.

00:09:54.772 --> 00:09:56.397
SURMA: But doesn't
that mean that there

00:09:56.397 --> 00:09:58.600
could be stuff in there
that isn't even in browsers?

00:09:58.600 --> 00:10:01.060
JAKE: That is true.

00:10:01.060 --> 00:10:04.600
But for this use case, we
want the latest version,

00:10:04.600 --> 00:10:06.490
because the thing we
are wanting to create

00:10:06.490 --> 00:10:07.850
might already be created.

00:10:07.850 --> 00:10:08.350
SURMA: True.

00:10:08.350 --> 00:10:09.760
Oh, so we're looking
at the latest version

00:10:09.760 --> 00:10:10.660
to see if it's already created.

00:10:10.660 --> 00:10:12.618
If not, then our stuff
should be something that

00:10:12.618 --> 00:10:14.033
is added to the latest version.

00:10:14.033 --> 00:10:15.700
So that's why we're
working on this one.

00:10:15.700 --> 00:10:17.050
JAKE: Yes.

00:10:17.050 --> 00:10:19.000
So if I was looking
for something

00:10:19.000 --> 00:10:20.710
that I want to be
exposed to JavaScript,

00:10:20.710 --> 00:10:24.850
I'm looking in the spec
for the API section.

00:10:24.850 --> 00:10:25.630
Here it is here.

00:10:25.630 --> 00:10:28.030
SURMA: Yes.

00:10:28.030 --> 00:10:31.360
There is a section called API,
which gives you the typical web

00:10:31.360 --> 00:10:32.210
IDL thing.

00:10:32.210 --> 00:10:34.405
So you have an almost
TypeScript-like definition

00:10:34.405 --> 00:10:35.660
of the different things.

00:10:35.660 --> 00:10:37.390
JAKE: Yeah, so here it is.

00:10:37.390 --> 00:10:38.530
This is one for cursor.

00:10:38.530 --> 00:10:41.380
This predates TypeScript
by many, many years.

00:10:41.380 --> 00:10:42.340
SURMA: Sure.

00:10:42.340 --> 00:10:42.950
It has types.

00:10:42.950 --> 00:10:44.367
That's why I
mentioned TypeScript.

00:10:44.367 --> 00:10:45.580
JAKE: Yes, exactly.

00:10:45.580 --> 00:10:47.230
I mean, it would be
interesting to see,

00:10:47.230 --> 00:10:49.390
if we started writing
specs now from scratch,

00:10:49.390 --> 00:10:50.440
would we use TypeScripts?

00:10:50.440 --> 00:10:52.170
Is that enough?

00:10:52.170 --> 00:10:54.790
There's some extra little bits
of annotation around here,

00:10:54.790 --> 00:10:56.472
but it is doing the same job.

00:10:56.472 --> 00:10:58.430
It's defining the types
of all of these things.

00:10:58.430 --> 00:10:59.440
SURMA: But if that
is the section,

00:10:59.440 --> 00:11:00.700
what is the section above?

00:11:00.700 --> 00:11:02.242
Because I was looking
at the sidebar.

00:11:02.242 --> 00:11:03.727
And so, oh, 2.10, that's cursor.

00:11:03.727 --> 00:11:04.810
That's where we go, right?

00:11:04.810 --> 00:11:06.010
Why didn't you go there?

00:11:06.010 --> 00:11:10.070
JAKE: So specs tend to be
split into two sections.

00:11:10.070 --> 00:11:12.350
One is the constructs
or the concepts.

00:11:12.350 --> 00:11:14.140
Different specs call
it different thing.

00:11:14.140 --> 00:11:17.530
And this is just describing how
the feature works, irregardless

00:11:17.530 --> 00:11:18.700
of JavaScript.

00:11:18.700 --> 00:11:20.680
So [INAUDIBLE] JavaScript.

00:11:20.680 --> 00:11:21.850
We look at a database.

00:11:21.850 --> 00:11:23.230
The database has a name.

00:11:23.230 --> 00:11:24.730
The database has a version.

00:11:24.730 --> 00:11:26.230
This is just the talking
about the structure.

00:11:26.230 --> 00:11:27.820
It doesn't mean those things
are exposed to JavaScript.

00:11:27.820 --> 00:11:29.320
SURMA: So this helps
you write code?

00:11:29.320 --> 00:11:31.330
This potentially
helps or probably

00:11:31.330 --> 00:11:34.100
helps implementers understand
the nuances and details?

00:11:34.100 --> 00:11:34.600
JAKE: Yeah.

00:11:34.600 --> 00:11:37.120
Yeah, this is describing
how the system works.

00:11:37.120 --> 00:11:39.427
And then we would see,
down in IDB database,

00:11:39.427 --> 00:11:41.260
this is describing the
JavaScript interface,

00:11:41.260 --> 00:11:42.040
we'll see--

00:11:42.040 --> 00:11:42.760
SURMA: Oh, look, a
name and a version.

00:11:42.760 --> 00:11:44.427
JAKE: It does have a
name and a version,

00:11:44.427 --> 00:11:46.290
but this needs to be
explicitly set up.

00:11:46.290 --> 00:11:48.790
So when you click on Name there,
it says the name attribute.

00:11:48.790 --> 00:11:52.060
You must return the name
of the connected database.

00:11:52.060 --> 00:11:52.905
We click that.

00:11:52.905 --> 00:11:54.405
It will then link
up to the concept.

00:11:54.405 --> 00:11:58.180
SURMA: So this is where
we connect the IDL

00:11:58.180 --> 00:12:01.660
stuff to the definitions
and the constructs area?

00:12:01.660 --> 00:12:02.260
JAKE: Yeah.

00:12:02.260 --> 00:12:06.290
So this stuff at the top
here, this lives in C++ land.

00:12:06.290 --> 00:12:07.583
It can live on another, thread.

00:12:07.583 --> 00:12:09.000
All of that sort
of stuff is fine.

00:12:09.000 --> 00:12:10.315
SURMA: That's probably
more relevant to implement.

00:12:10.315 --> 00:12:12.820
It's not really relevant
to me as a web developer.

00:12:12.820 --> 00:12:14.110
JAKE: Yes, I would say so.

00:12:14.110 --> 00:12:17.590
If you're looking to see what
a thing's capable of or what

00:12:17.590 --> 00:12:20.060
the API is-- straight
into the API section.

00:12:20.060 --> 00:12:21.415
And we can see the cursor here.

00:12:21.415 --> 00:12:23.290
SURMA: I feel much more
at home with his view

00:12:23.290 --> 00:12:26.140
already, because it looks a
little bit like JavaScript.

00:12:26.140 --> 00:12:26.870
I get this.

00:12:26.870 --> 00:12:27.370
JAKE: Yes.

00:12:27.370 --> 00:12:30.160
So you can see here, this
function called advance.

00:12:30.160 --> 00:12:32.320
SURMA: Oh, we have
advance and continue now.

00:12:32.320 --> 00:12:33.555
JAKE: Advance and continue.

00:12:33.555 --> 00:12:35.140
SURMA: What's the difference?

00:12:35.140 --> 00:12:36.680
JAKE: So advance takes a number.

00:12:36.680 --> 00:12:39.290
So I'm saying, skip five items.

00:12:39.290 --> 00:12:41.912
SURMA: So it's like calling
continue five times.

00:12:41.912 --> 00:12:43.620
JAKE: You can't call
continue five times.

00:12:43.620 --> 00:12:46.180
You can only call one of these
advancing functions once.

00:12:46.180 --> 00:12:48.940
Can you tell I've been working
with IndexedDB recently?

00:12:48.940 --> 00:12:50.680
I've had to get the
spec in my head.

00:12:53.310 --> 00:12:55.060
SURMA: I guess, I
wouldn't have called

00:12:55.060 --> 00:12:58.680
continue, then on success,
I call continue again.

00:12:58.680 --> 00:13:00.930
Do that five times, and then
that would be equivalent.

00:13:00.930 --> 00:13:02.490
JAKE: That would be
fine, but it tends--

00:13:02.490 --> 00:13:03.573
SURMA: It's also annoying.

00:13:03.573 --> 00:13:06.182
JAKE: Yes, it sees it as
a bug if you try and tell

00:13:06.182 --> 00:13:07.640
it to do too--
because if you said,

00:13:07.640 --> 00:13:11.190
advance five and advance
two, it sees that as, like,

00:13:11.190 --> 00:13:14.975
which do you mean rather
than adding the two together.

00:13:14.975 --> 00:13:16.350
SURMA: So we do
see on the cursor

00:13:16.350 --> 00:13:19.310
that there is no request.

00:13:19.310 --> 00:13:22.920
JAKE: Right, which is
what we expected to find.

00:13:22.920 --> 00:13:25.290
We knew it wasn't implemented.

00:13:25.290 --> 00:13:26.580
So what do we do?

00:13:26.580 --> 00:13:31.190
SURMA: Do we just add
read-only attribute request

00:13:31.190 --> 00:13:31.860
and [INAUDIBLE]?

00:13:31.860 --> 00:13:32.760
JAKE: Not yet.

00:13:32.760 --> 00:13:34.410
SURMA: Oh, OK.

00:13:34.410 --> 00:13:36.910
JAKE: Because the next thing
is to propose the feature.

00:13:36.910 --> 00:13:37.470
SURMA: Oh.

00:13:37.470 --> 00:13:39.650
I mean, you can't just
decide this on your own.

00:13:39.650 --> 00:13:40.650
JAKE: I mean, you could.

00:13:40.650 --> 00:13:42.250
You're not going to get
anywhere with it, though.

00:13:42.250 --> 00:13:44.160
So you're going to
be very disappointed.

00:13:44.160 --> 00:13:46.530
So at the top of
the spec, there's

00:13:46.530 --> 00:13:49.153
a link here for issue
tracking, GitHub.

00:13:49.153 --> 00:13:50.320
It's mostly GitHub nowadays.

00:13:50.320 --> 00:13:52.185
SURMA: It is mostly
GitHub nowadays.

00:13:52.185 --> 00:13:54.060
JAKE: So I'm going
to go into here.

00:13:56.710 --> 00:13:57.710
SURMA: Oh, look at this.

00:13:57.710 --> 00:14:01.770
There's a cursor request issue
opened by Jake Archibald.

00:14:01.770 --> 00:14:03.300
JAKE: Yes, there is this.

00:14:03.300 --> 00:14:06.052
I've set this up
in advance a bit.

00:14:06.052 --> 00:14:07.510
In fact, when I
started doing this,

00:14:07.510 --> 00:14:10.640
I wasn't thinking about
making it an episode.

00:14:10.640 --> 00:14:14.820
But what I did was I went in
and said, this is a bit weird.

00:14:14.820 --> 00:14:17.192
Why isn't there
a cursor.request?

00:14:17.192 --> 00:14:18.400
It's essentially what I said.

00:14:18.400 --> 00:14:19.320
SURMA: Well, link this
in the description,

00:14:19.320 --> 00:14:22.113
because some people might want
to look at how you phrased it

00:14:22.113 --> 00:14:23.280
and how the discussion went.

00:14:23.280 --> 00:14:25.212
JAKE: Yes, exactly.

00:14:25.212 --> 00:14:26.670
This is what I
wrote just basically

00:14:26.670 --> 00:14:28.920
requesting the feature.

00:14:28.920 --> 00:14:33.420
SURMA: And do note, it's not
like a long form, formal tone

00:14:33.420 --> 00:14:33.920
proposal.

00:14:33.920 --> 00:14:35.160
Just like, I have this idea.

00:14:35.160 --> 00:14:36.170
What do people think?

00:14:36.170 --> 00:14:37.710
It's still a very
human approach,

00:14:37.710 --> 00:14:40.930
even though we are working
in spec world right now.

00:14:40.930 --> 00:14:43.140
JAKE: Yeah, I'm
describing the problem.

00:14:43.140 --> 00:14:46.870
I do suggest a solution, but
I describe the problem first.

00:14:46.870 --> 00:14:51.240
And that's a common problem I
see in some feature discussion.

00:14:51.240 --> 00:14:52.740
Someone comes and
goes, I want this.

00:14:52.740 --> 00:14:54.095
And the next question is, why?

00:14:54.095 --> 00:14:54.720
SURMA: But why?

00:14:54.720 --> 00:14:58.697
JAKE: So I start with the why,
and here's my proposal, in case

00:14:58.697 --> 00:15:00.780
the person who knows more
than me about this stuff

00:15:00.780 --> 00:15:03.122
can come and say,
here's a better way

00:15:03.122 --> 00:15:04.830
to solve your problem,
or here's a better

00:15:04.830 --> 00:15:06.120
solution to the problem.

00:15:06.120 --> 00:15:09.850
They don't have to wait
for the back and forth.

00:15:09.850 --> 00:15:10.855
And it turns out--

00:15:10.855 --> 00:15:14.610
this is Josh Bell, who does
the implementation in Chrome,

00:15:14.610 --> 00:15:15.810
also does the spec work.

00:15:15.810 --> 00:15:17.310
SURMA: So he's a Googler.

00:15:17.310 --> 00:15:18.210
JAKE: He's a Googler.

00:15:18.210 --> 00:15:20.560
And he's saying, yeah,
that sounds all right--

00:15:20.560 --> 00:15:23.571
oh, this doesn't
usually happen--

00:15:23.571 --> 00:15:26.130
and sort of agrees
with the use case.

00:15:26.130 --> 00:15:29.340
He asks other spec
folks to chime in.

00:15:29.340 --> 00:15:33.360
And then we've got Ali from
Microsoft, Andrew from Mozilla,

00:15:33.360 --> 00:15:36.570
and Brady from Apple
saying, it's fine.

00:15:36.570 --> 00:15:39.090
This has never happened
before, not this quickly.

00:15:39.090 --> 00:15:40.813
SURMA: That is very,
very frictionless.

00:15:40.813 --> 00:15:42.480
JAKE: Yes, and I think
it's because it's

00:15:42.480 --> 00:15:47.070
such a small feature, and it
fits in with IndexedDB so well.

00:15:47.070 --> 00:15:48.930
And the implement
is like, they have

00:15:48.930 --> 00:15:50.972
a feeling it's really easy
for them to implement.

00:15:50.972 --> 00:15:53.010
SURMA: Yeah, I mean,
it feels like the thing

00:15:53.010 --> 00:15:55.328
that, under the hood,
should be very easy to do.

00:15:55.328 --> 00:15:57.120
I'm speaking as someone
whose never shipped

00:15:57.120 --> 00:16:00.055
anything in the browser
myself, but literally just

00:16:00.055 --> 00:16:01.680
exposing something
that already exists.

00:16:01.680 --> 00:16:03.347
And it's probably,
in turn, already tied

00:16:03.347 --> 00:16:04.790
to the request anyway.

00:16:04.790 --> 00:16:05.640
JAKE: Exactly.

00:16:05.640 --> 00:16:07.092
Exactly.

00:16:07.092 --> 00:16:08.300
And so that's what I thought.

00:16:08.300 --> 00:16:09.690
I thought, well, why not?

00:16:09.690 --> 00:16:12.820
Because it just feels
like a small change.

00:16:12.820 --> 00:16:14.150
Let's do it now.

00:16:14.150 --> 00:16:16.150
So that's the intro
to this episode.

00:16:16.150 --> 00:16:18.688
SURMA: Cue the intro.

00:16:18.688 --> 00:16:20.020
[HUMS A TUNE]

00:16:20.020 --> 00:16:23.020
JAKE: Are we going to put a
remix of the title sequence

00:16:23.020 --> 00:16:24.315
of "Supercharged" on there.

00:16:24.315 --> 00:16:24.940
SURMA: Oh, yes.

00:16:24.940 --> 00:16:25.565
Can we do that?

00:16:25.565 --> 00:16:26.700
Can we put comic Surma?

00:16:26.700 --> 00:16:28.185
[LAUGHTER]

00:16:29.175 --> 00:16:31.650
[MUSIC PLAYING]

00:16:40.247 --> 00:16:41.580
JAKE: So we're going to do this.

00:16:41.580 --> 00:16:42.830
SURMA: We're going to do this.

00:16:42.830 --> 00:16:44.360
Where do we start?

00:16:44.360 --> 00:16:46.140
JAKE: So there's
two things you need

00:16:46.140 --> 00:16:50.410
to land for a spec change--

00:16:50.410 --> 00:16:52.018
spec change and tests.

00:16:52.018 --> 00:16:52.560
SURMA: Tests.

00:16:52.560 --> 00:16:55.240
JAKE: The tests
are very important.

00:16:55.240 --> 00:16:58.160
And I am going to
do the tests first.

00:16:58.160 --> 00:17:00.160
SURMA: Oh, you're going
test-driven development.

00:17:00.160 --> 00:17:02.550
JAKE: And I don't
always do this,

00:17:02.550 --> 00:17:04.050
but all the times
I've done it, it's

00:17:04.050 --> 00:17:05.339
been incredibly successful.

00:17:05.339 --> 00:17:07.214
So I don't know why I
don't do it more often.

00:17:07.214 --> 00:17:09.520
SURMA: So we have this thing
called web-platform-tests,

00:17:09.520 --> 00:17:12.569
which you can get
into by wpt.fyi.

00:17:12.569 --> 00:17:15.140
JAKE: Well, I would say, you
can get into it from the spec

00:17:15.140 --> 00:17:15.640
as well.

00:17:15.640 --> 00:17:16.000
It's right on top there.

00:17:16.000 --> 00:17:16.829
SURMA: Oh, there's a link.

00:17:16.829 --> 00:17:17.910
JAKE: A link to the test suite.

00:17:17.910 --> 00:17:18.910
SURMA: It links
web-platform-test,

00:17:18.910 --> 00:17:19.910
which is the repository.

00:17:19.910 --> 00:17:25.109
It has literally the entire
web-platform-tests, every API.

00:17:25.109 --> 00:17:27.520
It's supposed to have
a test suite in here.

00:17:27.520 --> 00:17:28.530
JAKE: Yes, absolutely.

00:17:28.530 --> 00:17:30.660
So this is all the
IndexedDB ones.

00:17:30.660 --> 00:17:31.930
SURMA: That's a lot of tests.

00:17:31.930 --> 00:17:33.180
JAKE: There is a lot of tests.

00:17:33.180 --> 00:17:34.350
SURMA: Oh, wow.

00:17:34.350 --> 00:17:37.110
JAKE: From many years ago,
some of them two years ago,

00:17:37.110 --> 00:17:37.818
to five days ago.

00:17:37.818 --> 00:17:38.318
That's cool.

00:17:38.318 --> 00:17:39.250
SURMA: Five years ago.

00:17:39.250 --> 00:17:40.125
JAKE: Five years ago.

00:17:40.125 --> 00:17:41.410
Excellent.

00:17:41.410 --> 00:17:43.770
Any advance in five years ago?

00:17:43.770 --> 00:17:45.360
SURMA: Doubtful.

00:17:45.360 --> 00:17:47.390
So there is a lot of files.

00:17:47.390 --> 00:17:47.940
JAKE: Yes.

00:17:47.940 --> 00:17:50.543
And so writing tests
is a really good way

00:17:50.543 --> 00:17:51.960
to contribute to
the web platform,

00:17:51.960 --> 00:17:54.930
because the tests
are in JavaScript.

00:17:54.930 --> 00:17:57.780
So you don't need to
understand the specification

00:17:57.780 --> 00:17:59.580
stuff in order to contribute.

00:17:59.580 --> 00:18:01.110
You just write a
test to describe

00:18:01.110 --> 00:18:03.030
how the feature you want works.

00:18:03.030 --> 00:18:05.930
SURMA: I have contributed
some tests myself.

00:18:05.930 --> 00:18:08.970
And while it is a bit odd,
because it's, obviously,

00:18:08.970 --> 00:18:11.033
kind of organically-grown
system over time,

00:18:11.033 --> 00:18:12.450
you just look at
some other tests.

00:18:12.450 --> 00:18:15.118
And you will get the hang of it
quite quickly and how it works.

00:18:15.118 --> 00:18:17.160
JAKE: And that is exactly
what we're going to do.

00:18:17.160 --> 00:18:19.230
So the repo, yeah, it
covers all of the--

00:18:19.230 --> 00:18:20.337
it's a lot of scrolling--

00:18:20.337 --> 00:18:22.670
all of the stuff you need to
set up something like this.

00:18:22.670 --> 00:18:24.610
SURMA: It is really
well-documented.

00:18:24.610 --> 00:18:27.120
I had no problem setting it
up the first time I wanted to.

00:18:27.120 --> 00:18:28.828
It just worked pretty
much straight away.

00:18:28.828 --> 00:18:29.703
So well done to them.

00:18:29.703 --> 00:18:31.286
JAKE: Yeah, so you
would check it out,

00:18:31.286 --> 00:18:33.390
fork it, and then follow
these instructions.

00:18:33.390 --> 00:18:35.807
Because there are some things
you need to add to your host

00:18:35.807 --> 00:18:37.810
file, yeah that sort of stuff.

00:18:37.810 --> 00:18:40.920
So what I'm going to do is--

00:18:40.920 --> 00:18:42.810
I don't need to fork
my platform tests,

00:18:42.810 --> 00:18:44.770
because I actually have
commit rights to that.

00:18:44.770 --> 00:18:45.270
SURMA: Oh!

00:18:45.270 --> 00:18:45.812
JAKE: I know.

00:18:45.812 --> 00:18:46.720
Check me out.

00:18:46.720 --> 00:18:49.013
So let's go to--

00:18:49.013 --> 00:18:50.430
and this is me
trying to remember.

00:18:50.430 --> 00:18:51.540
There we go.

00:18:51.540 --> 00:18:52.890
Brilliant.

00:18:52.890 --> 00:18:55.530
Web-platform-tests,
and this is what

00:18:55.530 --> 00:18:56.970
we're going to start editing.

00:18:56.970 --> 00:19:00.360
So I'm going to go to wpt serve.

00:19:00.360 --> 00:19:02.200
This is all documented.

00:19:02.200 --> 00:19:03.972
SURMA: Yeah, this
starts the test server.

00:19:03.972 --> 00:19:04.930
JAKE: Look at all that.

00:19:04.930 --> 00:19:06.420
It makes total sense.

00:19:06.420 --> 00:19:08.692
It starts to test
several many ports.

00:19:08.692 --> 00:19:09.900
This is one I'm going to use.

00:19:09.900 --> 00:19:12.312
This is the normal
unencrypted one.

00:19:12.312 --> 00:19:13.770
SURMA: Yeah, we
have multiple ports

00:19:13.770 --> 00:19:15.510
and multiple [INAUDIBLE]
names in this repository,

00:19:15.510 --> 00:19:16.885
because sometimes,
you need to do

00:19:16.885 --> 00:19:18.420
tests for cross-origin things.

00:19:18.420 --> 00:19:20.970
JAKE: Across things,
cross-scheme things,

00:19:20.970 --> 00:19:24.008
like HTP to HTPS,
that sort of stuff.

00:19:24.008 --> 00:19:25.800
SURMA: The server has
to write all of that.

00:19:25.800 --> 00:19:28.740
That's why that might have
looked a bit overwhelming.

00:19:28.740 --> 00:19:29.340
JAKE: Yes.

00:19:29.340 --> 00:19:31.350
So I'm going to pick
up one of these.

00:19:31.350 --> 00:19:34.370
SURMA: All right, now, in
the IndexedDB test folder,

00:19:34.370 --> 00:19:36.550
if you open any of the HTML
files, as far as I know,

00:19:36.550 --> 00:19:38.550
the tests will run, and
you'll see the results.

00:19:38.550 --> 00:19:39.150
Cool.

00:19:39.150 --> 00:19:40.110
JAKE: There we go.

00:19:40.110 --> 00:19:40.680
Look at that.

00:19:40.680 --> 00:19:43.160
SURMA: How did you
decide which file--

00:19:43.160 --> 00:19:46.037
is this just to show the
results or show which

00:19:46.037 --> 00:19:47.120
file you're going to edit?

00:19:47.120 --> 00:19:47.620
JAKE: No.

00:19:53.100 --> 00:19:55.350
Different specs write
the tests differently.

00:19:55.350 --> 00:19:59.460
I picked a file called
IDBcursor-source.

00:19:59.460 --> 00:20:01.050
I would assume-- I
say I'm assuming.

00:20:01.050 --> 00:20:03.510
I know because I looked
at it in advance.

00:20:03.510 --> 00:20:08.880
These are the tests
for cursor.source.

00:20:08.880 --> 00:20:11.010
So from the cursor
objects, you can

00:20:11.010 --> 00:20:13.620
go to the source,
which gives you

00:20:13.620 --> 00:20:16.897
back the store or the index.

00:20:16.897 --> 00:20:19.230
SURMA: So you get cursor, you
can get the store, but not

00:20:19.230 --> 00:20:19.800
the request.

00:20:19.800 --> 00:20:21.487
So the request is
like the missing link.

00:20:21.487 --> 00:20:22.320
JAKE: Yeah, exactly.

00:20:22.320 --> 00:20:23.680
SURMA: Interesting.

00:20:23.680 --> 00:20:25.380
JAKE: So we've got that.

00:20:25.380 --> 00:20:27.760
So we're going to edit this.

00:20:27.760 --> 00:20:31.110
SURMA: So how afraid should I
be of picking the wrong file?

00:20:31.110 --> 00:20:33.700
If I want to [INAUDIBLE]
I'm not sure which HTML

00:20:33.700 --> 00:20:36.260
file I should add my test to.

00:20:36.260 --> 00:20:37.628
JAKE: I mean, not that afraid.

00:20:37.628 --> 00:20:40.170
SURMA: In the review, people
are going to be like, good test.

00:20:40.170 --> 00:20:41.550
Just move it to
this file please.

00:20:41.550 --> 00:20:42.900
JAKE: And then that's going to
be a very small [INAUDIBLE]..

00:20:42.900 --> 00:20:43.950
SURMA: The people
usually, in my experience,

00:20:43.950 --> 00:20:45.150
are really friendly.

00:20:45.150 --> 00:20:47.250
JAKE: Yeah, they are,
actually, and super-grateful

00:20:47.250 --> 00:20:53.260
for having people work on this
stuff, because it's dead handy.

00:20:53.260 --> 00:20:57.630
So let's go for
web-platform-tests.

00:20:57.630 --> 00:20:59.160
Break out the VS Code.

00:20:59.160 --> 00:20:59.670
Here we go.

00:21:02.280 --> 00:21:04.680
So yeah, we want to write
tests for the feature.

00:21:04.680 --> 00:21:07.590
Now one of the
benefits of doing tests

00:21:07.590 --> 00:21:10.830
first is, implementers
who are super-keen

00:21:10.830 --> 00:21:13.055
can start implementing
based on your tests

00:21:13.055 --> 00:21:14.430
while you're
working on the spec.

00:21:14.430 --> 00:21:17.218
This actually happened with
the abortable fetch stuff.

00:21:17.218 --> 00:21:18.010
SURMA: Interesting.

00:21:18.010 --> 00:21:21.370
JAKE: So this is why it's a
really good place to start.

00:21:21.370 --> 00:21:22.950
SURMA: So that
means it's not even

00:21:22.950 --> 00:21:27.090
frowned upon to open
a PR for my new tests,

00:21:27.090 --> 00:21:29.625
even if the spec change
hasn't landed yet?

00:21:29.625 --> 00:21:31.500
JAKE: Correct, and you
can have those reviews

00:21:31.500 --> 00:21:34.230
going in parallel.

00:21:34.230 --> 00:21:35.370
So here it is.

00:21:35.370 --> 00:21:40.140
This is the source for the
test we were just looking at.

00:21:40.140 --> 00:21:42.330
SURMA: So let's dissect
this a little bit.

00:21:42.330 --> 00:21:45.103
So we have the test harness,
test harness report,

00:21:45.103 --> 00:21:47.270
which is-- test harness,
we can ignore that for now.

00:21:47.270 --> 00:21:48.650
JAKE: That's the
framework for the tests.

00:21:48.650 --> 00:21:49.740
SURMA: It's literally
a harness for the test.

00:21:49.740 --> 00:21:52.530
JAKE: The equivalent of mocha
and chai, that sort of thing.

00:21:52.530 --> 00:21:54.930
SURMA: Support is probably
literally that-- support

00:21:54.930 --> 00:21:55.760
functions, I guess.

00:21:55.760 --> 00:21:58.320
JAKE: Yes, specifically
for the IndexedDB stuff.

00:21:58.320 --> 00:21:59.480
SURMA: Right, because
it's in this folder.

00:21:59.480 --> 00:22:00.760
It's not the global
support file.

00:22:00.760 --> 00:22:01.440
It's in the index.

00:22:01.440 --> 00:22:03.732
JAKE: Yeah, and that's how
I knew that just by the path

00:22:03.732 --> 00:22:05.310
there that it's local.

00:22:05.310 --> 00:22:07.820
SURMA: And the rest is test
functions, it seems like.

00:22:07.820 --> 00:22:11.250
JAKE: It is test functions.

00:22:11.250 --> 00:22:14.040
There's a cursor source test.

00:22:14.040 --> 00:22:17.520
And it seems like this
is generated tests,

00:22:17.520 --> 00:22:20.220
because they're calling
this function twice.

00:22:20.220 --> 00:22:23.160
It's passing in a function.

00:22:23.160 --> 00:22:25.790
I would say this is a very
complicated written test.

00:22:25.790 --> 00:22:28.200
It's difficult to follow.

00:22:28.200 --> 00:22:30.690
But one of the
important things for me

00:22:30.690 --> 00:22:35.910
here is seeing this,
that IndexedDB test.

00:22:35.910 --> 00:22:38.010
SURMA: So it's a special
IndexedDB test function.

00:22:38.010 --> 00:22:39.427
JAKE: Yeah, and I
know this is not

00:22:39.427 --> 00:22:42.870
part of the framework of the
web-platform-test framework.

00:22:42.870 --> 00:22:46.835
So one of the things
you can get from right

00:22:46.835 --> 00:22:48.960
at the bottom of the read
me for web-platform-tests

00:22:48.960 --> 00:22:51.190
is how to write
and review tests.

00:22:51.190 --> 00:22:53.290
SURMA: Well, that seems helpful.

00:22:53.290 --> 00:22:54.480
JAKE: I don't know why that
link is right at the bottom,

00:22:54.480 --> 00:22:55.113
but it is.

00:22:55.113 --> 00:22:56.280
So we go into Writing Tests.

00:22:59.160 --> 00:23:03.670
Test harness is one of the
includes that we had in there,

00:23:03.670 --> 00:23:06.870
and it will give you the
documentation for the test

00:23:06.870 --> 00:23:07.480
harness.

00:23:07.480 --> 00:23:10.200
And this is going to tell
you how to call tests,

00:23:10.200 --> 00:23:11.250
like you do that.

00:23:11.250 --> 00:23:13.530
SURMA: So I've
seen these before.

00:23:13.530 --> 00:23:15.310
You have, like you
said, a test function.

00:23:15.310 --> 00:23:17.700
So I was surprised to
see that IndexedDB has,

00:23:17.700 --> 00:23:20.460
apparently, their own
version of the test function.

00:23:20.460 --> 00:23:21.630
JAKE: Yes.

00:23:21.630 --> 00:23:22.500
Yes.

00:23:22.500 --> 00:23:25.380
So we can see here,
there's async tests.

00:23:25.380 --> 00:23:28.990
There's ways of doing all
of this sort of stuff.

00:23:28.990 --> 00:23:31.170
And then towards
the bottom, you get

00:23:31.170 --> 00:23:34.530
all of the lists of
different asserts.

00:23:34.530 --> 00:23:36.790
Here they are-- so
assert an array--

00:23:36.790 --> 00:23:39.453
SURMA: So this would be
the mocha-chai thing.

00:23:39.453 --> 00:23:40.620
JAKE: Yeah, so this is chai.

00:23:40.620 --> 00:23:43.223
The rest of it was mocha, if
that's how you look at it.

00:23:43.223 --> 00:23:43.890
SURMA: "Mock-a?"

00:23:43.890 --> 00:23:44.350
Who knows?

00:23:44.350 --> 00:23:45.267
JAKE: "Mock-a," mocha.

00:23:45.267 --> 00:23:47.580
I don't know.

00:23:47.580 --> 00:23:50.487
So IndexedDB test
is not in there.

00:23:50.487 --> 00:23:51.570
This is something special.

00:23:51.570 --> 00:23:53.050
SURMA: So that would
probably be in the support--

00:23:53.050 --> 00:23:53.690
[INTERPOSING VOICES]

00:23:53.690 --> 00:23:54.315
JAKE: Probably.

00:23:54.315 --> 00:23:56.610
And how much easier
has [INAUDIBLE]

00:23:56.610 --> 00:23:58.200
script modules made our lives?

00:23:58.200 --> 00:24:00.842
It would be so easy to find
where that was coming from.

00:24:00.842 --> 00:24:03.050
SURMA: Especially with
TypeScripts, and then VS code.

00:24:03.050 --> 00:24:04.740
We just press F12.

00:24:04.740 --> 00:24:05.490
JAKE: Yes.

00:24:05.490 --> 00:24:08.760
So I'm just going to
do index, and it's

00:24:08.760 --> 00:24:12.630
going to give me that file, and
then we can have a look at it.

00:24:12.630 --> 00:24:15.540
And it was IndexedDB test.

00:24:15.540 --> 00:24:16.620
Oh, there we go.

00:24:16.620 --> 00:24:17.340
So here it is.

00:24:17.340 --> 00:24:19.200
SURMA: So it gives us
async tests under the hood,

00:24:19.200 --> 00:24:20.367
as we can see straight away.

00:24:20.367 --> 00:24:20.980
JAKE: Exactly.

00:24:20.980 --> 00:24:23.170
SURMA: Do we care
about the details?

00:24:23.170 --> 00:24:26.850
You provide an upgrade function,
an open function, descriptions,

00:24:26.850 --> 00:24:28.060
and options.

00:24:28.060 --> 00:24:29.540
JAKE: Yes.

00:24:29.540 --> 00:24:31.000
Upgrade function,
this is something

00:24:31.000 --> 00:24:35.430
IndexedDB has a way of setting
its schema for a database.

00:24:35.430 --> 00:24:38.303
Open function is, once
it's open, once it's--

00:24:38.303 --> 00:24:40.470
SURMA: The success handler,
basically, more or less,

00:24:40.470 --> 00:24:40.970
I guess.

00:24:40.970 --> 00:24:41.610
JAKE: Exactly.

00:24:41.610 --> 00:24:42.030
Exactly.

00:24:42.030 --> 00:24:42.990
And then just the
name of the test.

00:24:42.990 --> 00:24:44.615
SURMA: So I'm guessing
they wrapped it.

00:24:44.615 --> 00:24:46.920
So it makes sure it
cleans up after you,

00:24:46.920 --> 00:24:49.882
deletes all the
stray objects stored

00:24:49.882 --> 00:24:51.090
that might have been created.

00:24:51.090 --> 00:24:53.530
JAKE: Deletes in
advance the tests that--

00:24:53.530 --> 00:24:55.840
makes sure it froze if it
can't delete the database,

00:24:55.840 --> 00:24:57.460
if it can't open the database.

00:24:57.460 --> 00:24:58.520
SURMA: Of course, it
turns out, IndexedDB

00:24:58.520 --> 00:24:59.260
is persistent to disk.

00:24:59.260 --> 00:25:01.090
So if we didn't clean
up after ourselves,

00:25:01.090 --> 00:25:03.700
we might blow up the disk usage.

00:25:03.700 --> 00:25:05.650
JAKE: Yes, and it
gets really messy,

00:25:05.650 --> 00:25:08.110
especially if you get the
tests overlapping each other.

00:25:08.110 --> 00:25:12.020
Yeah, so this handles all
of that, which is nice.

00:25:12.020 --> 00:25:13.990
So let's go back
to cursor source.

00:25:13.990 --> 00:25:15.520
Brilliant.

00:25:15.520 --> 00:25:17.260
So we can see here
that yes, there's

00:25:17.260 --> 00:25:20.080
going to be a couple of
callbacks to the first one

00:25:20.080 --> 00:25:20.650
there.

00:25:20.650 --> 00:25:21.850
This is where it's
setting up the database.

00:25:21.850 --> 00:25:23.308
SURMA: That's the
upgrade function.

00:25:23.308 --> 00:25:25.060
This is, I think, if
I remember correctly,

00:25:25.060 --> 00:25:28.240
the upgrade function, which is
called, they said at the start,

00:25:28.240 --> 00:25:31.030
it's the only function where
you can create objects stores.

00:25:31.030 --> 00:25:33.485
JAKE: Yes, create object
stores, create indexes.

00:25:33.485 --> 00:25:35.110
You can add stuff to
the store, but you

00:25:35.110 --> 00:25:36.390
can do that elsewhere as well.

00:25:36.390 --> 00:25:38.807
But yes, it's the only place
where you can actually modify

00:25:38.807 --> 00:25:40.390
the structure of the database.

00:25:40.390 --> 00:25:42.388
And then the next
stuff's coming in.

00:25:42.388 --> 00:25:44.680
SURMA: This where we actually
write the test, I assume.

00:25:44.680 --> 00:25:45.180
JAKE: Yeah.

00:25:45.180 --> 00:25:49.660
And we see here, it's being
passed t, which, I know,

00:25:49.660 --> 00:25:53.590
is the test object, because
that will appear here--

00:25:53.590 --> 00:25:54.760
t.stepfunction.

00:25:58.150 --> 00:26:00.820
Web-platform-tests tests
have promise tests,

00:26:00.820 --> 00:26:02.560
which are so much
easier to deal with.

00:26:02.560 --> 00:26:04.590
Because you write
an async function,

00:26:04.590 --> 00:26:06.600
and it's just sequential.

00:26:06.600 --> 00:26:07.600
IndexedDB is more--

00:26:07.600 --> 00:26:08.500
SURMA: Doesn't have promises.

00:26:08.500 --> 00:26:09.400
JAKE: Doesn't have promises.

00:26:09.400 --> 00:26:10.525
SURMA: Hence, your library.

00:26:10.525 --> 00:26:11.620
JAKE: Hence, the library.

00:26:11.620 --> 00:26:13.578
So we're dealing with
this step function, which

00:26:13.578 --> 00:26:17.920
is you declaring, I'm giving you
a callback that must be called.

00:26:17.920 --> 00:26:19.590
This is definitely--

00:26:19.590 --> 00:26:22.138
SURMA: That meaning, if a
callback doesn't get called,

00:26:22.138 --> 00:26:22.930
the test will fail?

00:26:22.930 --> 00:26:23.440
JAKE: Actually, maybe not.

00:26:23.440 --> 00:26:25.960
Because a certain reach
is not going to happen.

00:26:25.960 --> 00:26:26.920
Do you know what?

00:26:26.920 --> 00:26:27.670
I'm not sure.

00:26:27.670 --> 00:26:30.840
For every callback, you have
to wrap it in step function.

00:26:30.840 --> 00:26:34.280
This is why I normally
do promise tests.

00:26:34.280 --> 00:26:38.140
So we're going to
cargo-cult this a little bit

00:26:38.140 --> 00:26:42.760
and write the test for
the feature we want.

00:26:42.760 --> 00:26:44.800
Can I duplicate in this?

00:26:44.800 --> 00:26:46.190
SURMA: You can if
you copy-paste.

00:26:46.190 --> 00:26:47.950
JAKE: Oh, copy-paste, of course.

00:26:47.950 --> 00:26:48.450
Brilliant.

00:26:48.450 --> 00:26:49.760
There we go.

00:26:49.760 --> 00:26:51.010
So I'm going to call all this.

00:26:51.010 --> 00:26:52.350
SURMA: So you're
creating a new file.

00:26:52.350 --> 00:26:52.850
JAKE: Yeah.

00:26:52.850 --> 00:26:55.870
SURMA: Will that automatically
run just by existing?

00:26:55.870 --> 00:26:57.575
JAKE: Yes.

00:26:57.575 --> 00:26:59.450
When browsers run all
of these tests at once,

00:26:59.450 --> 00:27:00.880
it just crawls
through the system.

00:27:00.880 --> 00:27:01.422
SURMA: Crawl?

00:27:01.422 --> 00:27:02.900
JAKE: Yeah.

00:27:02.900 --> 00:27:06.400
And we're going to have
IDB cursor request.

00:27:06.400 --> 00:27:08.020
I'll probably changed this bit--

00:27:10.900 --> 00:27:12.787
@chromium.org.

00:27:12.787 --> 00:27:13.870
Have I spelled that right?

00:27:13.870 --> 00:27:14.370
Yes.

00:27:14.370 --> 00:27:15.520
That's about right.

00:27:15.520 --> 00:27:16.480
Excellent.

00:27:16.480 --> 00:27:17.430
And get rid of that.

00:27:17.430 --> 00:27:18.910
SURMA: You don't have any
cool letters in your name.

00:27:18.910 --> 00:27:19.960
JAKE: I know.

00:27:19.960 --> 00:27:23.820
It makes it easier to type on
a British keyboard, though.

00:27:23.820 --> 00:27:26.515
So we're going to write
these tests, then.

00:27:26.515 --> 00:27:27.640
SURMA: Delete the old ones.

00:27:27.640 --> 00:27:28.600
JAKE: Delete the old ones.

00:27:28.600 --> 00:27:30.230
Yeah, I guess, we don't
really need anything else.

00:27:30.230 --> 00:27:32.890
I kind of wasted everyone's
time copying and pasting that.

00:27:32.890 --> 00:27:37.480
Because we're going to
start with pretty much this.

00:27:37.480 --> 00:27:41.740
So actually, what I will do is
we'll keep this around so we

00:27:41.740 --> 00:27:43.055
can double-check--

00:27:43.055 --> 00:27:43.930
SURMA: For reference.

00:27:43.930 --> 00:27:46.820
JAKE: --how to do stuff.

00:27:46.820 --> 00:27:49.890
It's not something
I've done a lot of.

00:27:49.890 --> 00:27:53.800
IndexedDB test, and then we've
got free functions coming up.

00:27:53.800 --> 00:27:57.470
So this first one is going
to be setting up a database.

00:27:57.470 --> 00:27:59.580
So let's do that.

00:27:59.580 --> 00:28:02.535
Takes a test object
in the DB, I think.

00:28:02.535 --> 00:28:04.410
Is that what it did?

00:28:04.410 --> 00:28:05.018
SURMA: Yeah.

00:28:05.018 --> 00:28:05.685
JAKE: All right.

00:28:05.685 --> 00:28:06.580
Do you know what?

00:28:06.580 --> 00:28:07.788
This looks pretty good to me.

00:28:07.788 --> 00:28:09.700
I'm just going to take it.

00:28:09.700 --> 00:28:10.240
Why not?

00:28:10.240 --> 00:28:12.415
SURMA: We don't even
need an index, do we?

00:28:12.415 --> 00:28:14.680
JAKE: We don't need an index.

00:28:14.680 --> 00:28:15.710
SURMA: We do need data.

00:28:15.710 --> 00:28:17.740
JAKE: We do need data.

00:28:17.740 --> 00:28:22.530
I will take add-data
and entire-data.

00:28:22.530 --> 00:28:26.310
And just to prove that
I didn't steal it--

00:28:26.310 --> 00:28:27.370
SURMA: Modern JavaScript.

00:28:27.370 --> 00:28:28.800
JAKE: It's modern now.

00:28:28.800 --> 00:28:30.420
SURMA: I was about to ask,
because you used an error

00:28:30.420 --> 00:28:30.920
function.

00:28:30.920 --> 00:28:33.180
You used const.

00:28:33.180 --> 00:28:37.380
What JavaScript is
usually acceptable?

00:28:37.380 --> 00:28:38.850
JAKE: It comes down to--

00:28:38.850 --> 00:28:40.990
SURMA: Because there
was a time, where led

00:28:40.990 --> 00:28:43.590
and const or r functions were
in some browsers but not others.

00:28:43.590 --> 00:28:44.298
JAKE: Absolutely.

00:28:44.298 --> 00:28:47.280
And so the idea is,
you want these tests

00:28:47.280 --> 00:28:52.545
to run easily in the browsers
you want them implemented in.

00:28:52.545 --> 00:28:57.690
So I wrote some service worker
tests, and I used broadcast

00:28:57.690 --> 00:28:59.600
channel to do communication.

00:28:59.600 --> 00:29:02.700
And it was kind of like, if you
want Safari to get this right,

00:29:02.700 --> 00:29:04.530
you need to stop using
broadcast channel.

00:29:04.530 --> 00:29:06.540
I was just using it as a
way to pass messages around.

00:29:06.540 --> 00:29:08.220
It wasn't technical
to the test, but it

00:29:08.220 --> 00:29:09.960
was making it fail in Safari.

00:29:09.960 --> 00:29:13.860
So here, this is only going
to be adopted by new browsers.

00:29:13.860 --> 00:29:15.820
SURMA: We're talking
about the new feature.

00:29:15.820 --> 00:29:19.080
So it's not something that we're
targeting at i11, for example.

00:29:19.080 --> 00:29:20.690
JAKE: Exactly.

00:29:20.690 --> 00:29:23.610
SURMA: We can look at the
most recent versions of all

00:29:23.610 --> 00:29:27.360
the standard browsers, and if
they have a certain feature,

00:29:27.360 --> 00:29:28.700
it's cool to use it in the test.

00:29:28.700 --> 00:29:29.950
Is that basically fair to say?

00:29:29.950 --> 00:29:32.970
JAKE: It is absolutely
fair to say.

00:29:32.970 --> 00:29:35.200
So what am I going to do now?

00:29:35.200 --> 00:29:36.760
So where does this come from?

00:29:36.760 --> 00:29:39.150
Oh, OK, so they're
passing this function

00:29:39.150 --> 00:29:44.110
in as a way of
creating a cursor.

00:29:44.110 --> 00:29:45.030
So I don't know.

00:29:45.030 --> 00:29:46.810
I'll steal that code
as well, I reckon.

00:29:46.810 --> 00:29:53.150
So let's do that and
format that all nicely.

00:29:53.150 --> 00:29:54.150
So we've got a database.

00:29:54.150 --> 00:29:56.322
We're created a transaction.

00:29:56.322 --> 00:29:57.280
Create an object store.

00:29:57.280 --> 00:29:58.360
We're not using an index.

00:30:01.520 --> 00:30:04.730
That's going to be a
request for our cursor.

00:30:04.730 --> 00:30:05.230
Cool.

00:30:05.230 --> 00:30:06.250
SURMA: Sounds good.

00:30:06.250 --> 00:30:10.137
JAKE: So in our
request, .onsuccess.

00:30:10.137 --> 00:30:11.970
And this is where we
need to bring in that--

00:30:11.970 --> 00:30:13.012
SURMA: The step function.

00:30:13.012 --> 00:30:15.130
JAKE: The step function.

00:30:15.130 --> 00:30:17.410
And because I have
zero memory, I'm

00:30:17.410 --> 00:30:19.240
always going to look
up the step function.

00:30:19.240 --> 00:30:21.887
It really annoys me that
it's underscore-based.

00:30:21.887 --> 00:30:22.720
It's not JavaScript.

00:30:22.720 --> 00:30:24.520
SURMA: I saw a lot of--

00:30:24.520 --> 00:30:27.250
they're called snakecase.

00:30:27.250 --> 00:30:29.442
JAKE: Yes.

00:30:29.442 --> 00:30:30.900
SURMA: It is, in
a way, JavaScript.

00:30:30.900 --> 00:30:31.750
I know you [INAUDIBLE] I think.

00:30:31.750 --> 00:30:33.730
I think, in terms of
[INAUDIBLE],, has mostly

00:30:33.730 --> 00:30:35.370
settled on camelcase.

00:30:35.370 --> 00:30:36.800
JAKE: Camelcase.

00:30:36.800 --> 00:30:39.817
I think, a lot of this
framework is Python-based.

00:30:42.960 --> 00:30:46.645
So I think it may be
his inherited from that.

00:30:46.645 --> 00:30:47.770
SURMA: It's still readable.

00:30:47.770 --> 00:30:49.393
So it's not too big
a deal, I think.

00:30:49.393 --> 00:30:51.810
JAKE: And I think I could just
pass a function into there.

00:30:51.810 --> 00:30:52.310
Right.

00:30:52.310 --> 00:30:53.670
That's fine.

00:30:53.670 --> 00:30:56.595
And so we're kind of at a
point now, I've got my cursor.

00:30:59.027 --> 00:31:00.860
And this is one of the
reasons why we needed

00:31:00.860 --> 00:31:02.118
to add data into this store.

00:31:02.118 --> 00:31:04.410
Because if we didn't do that,
we wouldn't get a cursor.

00:31:04.410 --> 00:31:05.590
SURMA: We wouldn't get a
cursor, because there's

00:31:05.590 --> 00:31:06.240
nothing in there.

00:31:06.240 --> 00:31:06.823
JAKE: Exactly.

00:31:06.823 --> 00:31:11.030
So I'm going to req.result.

00:31:11.030 --> 00:31:13.500
SURMA: So currently, you
don't have a description

00:31:13.500 --> 00:31:14.930
of what this test is testing.

00:31:14.930 --> 00:31:15.690
JAKE: Oh, that's a good point.

00:31:15.690 --> 00:31:16.898
SURMA: Where would that show?

00:31:16.898 --> 00:31:19.170
JAKE: It is the third argument.

00:31:19.170 --> 00:31:21.450
So here, I will write--

00:31:21.450 --> 00:31:22.920
well, let's take
some inspiration

00:31:22.920 --> 00:31:26.200
from how the other
ones are written.

00:31:26.200 --> 00:31:27.053
SURMA: They are not.

00:31:27.053 --> 00:31:27.720
JAKE: Brilliant.

00:31:27.720 --> 00:31:29.550
Excellent.

00:31:29.550 --> 00:31:31.650
SURMA: There's a test name here.

00:31:31.650 --> 00:31:33.510
JAKE: So where's it
getting that from?

00:31:33.510 --> 00:31:35.380
Oh, it's the first argument.

00:31:35.380 --> 00:31:35.980
Oh, I see.

00:31:35.980 --> 00:31:39.033
So they're taking
document-- wow.

00:31:39.033 --> 00:31:40.450
SURMA: You're going
to steal that?

00:31:40.450 --> 00:31:42.060
JAKE: Yeah, why not?

00:31:42.060 --> 00:31:43.445
Because I should.

00:31:43.445 --> 00:31:45.630
It's pointed out there's
a bit I've forgotten here.

00:31:49.270 --> 00:31:51.180
This so hacky.

00:31:51.180 --> 00:31:52.290
SURMA: So document.title.

00:31:52.290 --> 00:31:53.250
JAKE: That's it.

00:31:53.250 --> 00:31:53.820
SURMA: That's our test.

00:31:53.820 --> 00:31:54.737
JAKE: That's our test.

00:31:54.737 --> 00:31:56.400
Brilliant.

00:31:56.400 --> 00:32:00.807
So now, I need to write
some tests for this feature.

00:32:00.807 --> 00:32:02.640
SURMA: I'm hoping someone
says in the review

00:32:02.640 --> 00:32:04.432
that this is not a good
title for the test,

00:32:04.432 --> 00:32:05.910
because it's just IDB cursor--

00:32:05.910 --> 00:32:06.910
actually, it is a good--

00:32:06.910 --> 00:32:08.300
JAKE: No, no, it's
got .requests.

00:32:08.300 --> 00:32:11.310
SURMA: Yeah, that's
actually a decent title.

00:32:11.310 --> 00:32:14.532
JAKE: To me-- and this is a
totally off-topic [INAUDIBLE]

00:32:14.532 --> 00:32:15.990
when people write
this, to me, this

00:32:15.990 --> 00:32:19.140
looks like a static
property of the class.

00:32:19.140 --> 00:32:21.030
SURMA: Oh, that debate.

00:32:21.030 --> 00:32:23.880
Because start request is not
on the IDB cursor constructor.

00:32:23.880 --> 00:32:25.790
It's on an instance
of IDB cursor.

00:32:25.790 --> 00:32:29.380
JAKE: I've seen some people
do this, or you could do--

00:32:29.380 --> 00:32:30.310
SURMA: Oh, no!

00:32:30.310 --> 00:32:31.020
No.

00:32:31.020 --> 00:32:32.180
JAKE: I mean, that's--

00:32:32.180 --> 00:32:32.520
well, whatever.

00:32:32.520 --> 00:32:32.940
Fine.

00:32:32.940 --> 00:32:34.065
SURMA: Technically correct.

00:32:34.065 --> 00:32:36.540
JAKE: Technically correct,
I think, you'll find.

00:32:36.540 --> 00:32:38.290
So I've got the cursor.

00:32:38.290 --> 00:32:39.930
And now, I want to
write some asserts.

00:32:42.730 --> 00:32:44.785
I'm going to do assert equals.

00:32:44.785 --> 00:32:46.350
There we go.

00:32:46.350 --> 00:32:48.450
So it's the actual value,
the expected value,

00:32:48.450 --> 00:32:49.590
and the description.

00:32:49.590 --> 00:32:50.360
SURMA: All right.

00:32:50.360 --> 00:32:51.300
The code seems doable.

00:32:51.300 --> 00:32:54.480
JAKE: Because what I want is--

00:32:54.480 --> 00:32:57.180
equal.

00:32:57.180 --> 00:33:00.000
I guess, is there
a strict equal?

00:33:00.000 --> 00:33:01.583
I would usually go
for a strict equal.

00:33:01.583 --> 00:33:03.458
SURMA: I'm guessing
you'll want to just check

00:33:03.458 --> 00:33:05.050
for existence, right,
or for not null?

00:33:05.050 --> 00:33:05.550
JAKE: Yeah.

00:33:05.550 --> 00:33:08.370
Well, I think it might
be strict by default.

00:33:08.370 --> 00:33:10.430
SURMA: I would hope so.

00:33:10.430 --> 00:33:11.550
JAKE: It's not in chai.

00:33:11.550 --> 00:33:12.300
This is the thing.

00:33:12.300 --> 00:33:14.700
I've been writing
chai this morning.

00:33:14.700 --> 00:33:16.470
SURMA: Strictly true.

00:33:16.470 --> 00:33:18.000
JAKE: Strictly true,
but down here--

00:33:18.000 --> 00:33:19.420
SURMA: Relies on triple equals.

00:33:19.420 --> 00:33:20.490
JAKE: Oh, it relies
on triple equals.

00:33:20.490 --> 00:33:20.790
Well done.

00:33:20.790 --> 00:33:22.230
So it uses strictly
there, and then uses--

00:33:22.230 --> 00:33:23.340
SURMA: What kind
of documentation?

00:33:23.340 --> 00:33:23.630
JAKE: Brilliant.

00:33:23.630 --> 00:33:24.415
Excellent.

00:33:24.415 --> 00:33:26.660
It's actually really good docs.

00:33:26.660 --> 00:33:27.480
So assert equals.

00:33:27.480 --> 00:33:33.720
I want cursor-- see,
I can't spell cursor--

00:33:33.720 --> 00:33:34.220
.request.

00:33:37.150 --> 00:33:38.870
And I want that to equal--

00:33:38.870 --> 00:33:39.590
SURMA: The rec.

00:33:39.590 --> 00:33:42.310
JAKE: The rec.

00:33:42.310 --> 00:33:44.819
SURMA: Cursor has request.

00:33:44.819 --> 00:33:46.210
[SNICKERING]

00:33:46.210 --> 00:33:47.880
JAKE: I can't type anything.

00:33:47.880 --> 00:33:49.860
SURMA: How do you
get stuff done?

00:33:49.860 --> 00:33:51.320
JAKE: Well, I don't.

00:33:51.320 --> 00:33:53.350
That's what happens.

00:33:53.350 --> 00:33:56.310
So we've actually tested
quite a lot in this one line.

00:33:56.310 --> 00:34:00.130
Because we've not only tested
that cursor.request exists.

00:34:00.130 --> 00:34:03.052
We've kind of tested its type.

00:34:03.052 --> 00:34:04.260
SURMA: And the correct value.

00:34:04.260 --> 00:34:05.688
JAKE: And the correct value.

00:34:05.688 --> 00:34:07.230
SURMA: This is all
you're asking for.

00:34:07.230 --> 00:34:09.480
You just want the .request
to exist and be the value

00:34:09.480 --> 00:34:10.770
of the original request.

00:34:10.770 --> 00:34:12.000
JAKE: Yes.

00:34:12.000 --> 00:34:14.699
But this test also
tells implementers

00:34:14.699 --> 00:34:16.665
that it's not a
new request object.

00:34:16.665 --> 00:34:19.310
It represents the same
underlying request.

00:34:19.310 --> 00:34:21.860
It is literally the
same JavaScript object.

00:34:21.860 --> 00:34:23.550
It's going to be
equals, equals, equals.

00:34:23.550 --> 00:34:25.133
SURMA: So that's
actually interesting.

00:34:25.133 --> 00:34:30.300
Is that something that you
care about as a developer?

00:34:30.300 --> 00:34:32.639
If you just want to have
access to the request with all

00:34:32.639 --> 00:34:34.469
the data it provides,
do you actually

00:34:34.469 --> 00:34:36.804
care about it being the
exact same instance?

00:34:36.804 --> 00:34:37.679
JAKE: I think you do.

00:34:37.679 --> 00:34:40.330
Because there's
not a lot of time,

00:34:40.330 --> 00:34:43.199
you'll be doing equals,
equals, equals or something.

00:34:43.199 --> 00:34:45.150
But you might be
using weak maps.

00:34:45.150 --> 00:34:45.900
SURMA: Good point.

00:34:45.900 --> 00:34:48.232
JAKE: And so you want
the representation

00:34:48.232 --> 00:34:50.190
of the same thing to be
exactly the same thing.

00:34:50.190 --> 00:34:51.500
SURMA: Yes, you want
the quality to hold.

00:34:51.500 --> 00:34:51.960
JAKE: Yep.

00:34:51.960 --> 00:34:52.960
SURMA: That makes sense.

00:34:52.960 --> 00:34:56.080
JAKE: And what I will also do
is, I'm going to steal from--

00:34:56.080 --> 00:34:56.580
let's see.

00:34:56.580 --> 00:34:57.720
What else have they got here?

00:34:57.720 --> 00:34:58.860
So they're testing instances.

00:34:58.860 --> 00:34:59.920
We don't need to do that.

00:34:59.920 --> 00:35:02.720
That's already taken care of.

00:35:02.720 --> 00:35:04.980
The stringified objects,
that's already taken care of.

00:35:04.980 --> 00:35:05.670
Because it's equal to requests--

00:35:05.670 --> 00:35:06.630
SURMA: You already have request.

00:35:06.630 --> 00:35:07.130
JAKE: Yeah.

00:35:07.130 --> 00:35:08.650
That's somewhere else.

00:35:08.650 --> 00:35:12.240
But this, we're going to steal.

00:35:12.240 --> 00:35:15.650
Because I want to make sure
that, like the other things,

00:35:15.650 --> 00:35:21.690
that cursor.request is
going to be read-only.

00:35:21.690 --> 00:35:23.690
SURMA: All right, so
that's actually different--

00:35:23.690 --> 00:35:25.500
so you don't pass
in cust to request,

00:35:25.500 --> 00:35:26.880
but the name of the property.

00:35:26.880 --> 00:35:30.320
Because, I'm guessing, it
gets the property descriptor

00:35:30.320 --> 00:35:31.740
and checks for the
read-only file.

00:35:31.740 --> 00:35:33.330
JAKE: Yeah, and I guess,
it will try and set

00:35:33.330 --> 00:35:34.270
to it maybe as well.

00:35:34.270 --> 00:35:36.130
I'm not actually sure what
the implementation is.

00:35:36.130 --> 00:35:37.950
But that, essentially,
tests the two things

00:35:37.950 --> 00:35:40.990
that will make it similar
to the other bits,

00:35:40.990 --> 00:35:43.130
but the thing that we want.

00:35:43.130 --> 00:35:44.865
And I think that's it.

00:35:44.865 --> 00:35:46.990
SURMA: So now, we can run
the test and see it fail.

00:35:46.990 --> 00:35:48.948
JAKE: Now, we can run
the test and see it fail.

00:35:48.948 --> 00:35:52.040
So I should just
be able to request.

00:35:52.040 --> 00:35:53.170
SURMA: And it failed.

00:35:53.170 --> 00:35:53.950
JAKE: It failed.

00:35:53.950 --> 00:35:54.460
SURMA: Equals is not defined.

00:35:54.460 --> 00:35:56.440
That's not the error
I was expecting.

00:35:56.440 --> 00:36:00.010
JAKE: No, it is not the
one I was expecting.

00:36:00.010 --> 00:36:03.130
So it's equals or--

00:36:03.130 --> 00:36:05.340
SURMA: I would-- yes.

00:36:05.340 --> 00:36:06.972
JAKE: Yeah, look at that.

00:36:06.972 --> 00:36:08.680
SURMA: The one time
you don't copy-paste.

00:36:08.680 --> 00:36:09.370
JAKE: I know.

00:36:09.370 --> 00:36:11.660
I'm such a copy-paster.

00:36:11.660 --> 00:36:13.780
SURMA: So it should still fail.

00:36:13.780 --> 00:36:15.867
JAKE: Expected
objects got undefined.

00:36:15.867 --> 00:36:16.450
SURMA: Hurrah.

00:36:16.450 --> 00:36:18.310
We have uncovered that
this test is failing.

00:36:22.120 --> 00:36:25.030
JAKE: If you wanted
to stop here--

00:36:25.030 --> 00:36:27.568
and you have helped
massively with web standards.

00:36:27.568 --> 00:36:29.360
The feature you want
that you've been told,

00:36:29.360 --> 00:36:32.560
yeah, great, writing
the test for it

00:36:32.560 --> 00:36:34.780
is a solid solid effort, right?

00:36:34.780 --> 00:36:36.150
It's more than most people do.

00:36:36.150 --> 00:36:37.150
And you haven't had to--

00:36:37.150 --> 00:36:38.710
SURMA: That is actually a
really good point, in the sense,

00:36:38.710 --> 00:36:40.840
if you're not comfortable
engaging necessarily

00:36:40.840 --> 00:36:45.370
with spec language
and all the patterns

00:36:45.370 --> 00:36:50.650
and stuff that comes with that,
this is a very approachable way

00:36:50.650 --> 00:36:53.367
to how can you drive features
that you personally might want.

00:36:53.367 --> 00:36:53.950
JAKE: Exactly.

00:36:56.092 --> 00:36:57.550
It's really difficult
writing tests

00:36:57.550 --> 00:36:59.950
for things that don't exist,
because you don't really

00:36:59.950 --> 00:37:01.510
know how--

00:37:01.510 --> 00:37:02.960
does your test actually work?

00:37:02.960 --> 00:37:05.380
I mean, we spotted something.

00:37:05.380 --> 00:37:07.060
But maybe you would
do something like--

00:37:07.060 --> 00:37:13.738
I don't know-- what if we
did cursor.request equals?

00:37:13.738 --> 00:37:14.530
We'll just do that.

00:37:19.150 --> 00:37:20.110
Oh, right.

00:37:20.110 --> 00:37:23.050
So it's got onto the next
test, but it's showing us

00:37:23.050 --> 00:37:25.180
that it's not read-only.

00:37:25.180 --> 00:37:27.648
So we at least know that
it passed that first test.

00:37:27.648 --> 00:37:28.690
So we can kind of prove--

00:37:28.690 --> 00:37:31.040
SURMA: So that's why the
test is actually important.

00:37:31.040 --> 00:37:32.290
JAKE: It's actually important.

00:37:32.290 --> 00:37:34.160
So we know we've got somewhere.

00:37:34.160 --> 00:37:36.648
We know we've got a solid test.

00:37:36.648 --> 00:37:38.440
SURMA: All right, so
what you would do now?

00:37:38.440 --> 00:37:40.450
You would commit this,
PR it, and then we'll

00:37:40.450 --> 00:37:41.770
move on to the spec?

00:37:41.770 --> 00:37:42.503
JAKE: Yeah.

00:37:42.503 --> 00:37:44.920
I will do them in tandem, and
we'll do the PRs at the end.

00:37:44.920 --> 00:37:47.540
But yes, if you wanted to
stop here, you could do that.

00:37:47.540 --> 00:37:48.490
You could have
people check it over.

00:37:48.490 --> 00:37:50.500
SURMA: As you said, this would
already help browser developers

00:37:50.500 --> 00:37:51.680
to implement this feature.

00:37:51.680 --> 00:37:53.050
JAKE: Exactly.

00:37:53.050 --> 00:37:55.540
But we're going to
radio this back.

00:37:55.540 --> 00:37:56.230
SURMA: Oh, boy.

00:37:56.230 --> 00:37:56.920
Oh, boy.

00:37:56.920 --> 00:37:59.620
JAKE: So we're going to have
a think about what we actually

00:37:59.620 --> 00:38:01.323
need to change.

00:38:01.323 --> 00:38:03.490
We've already talked about
the structure of the spec

00:38:03.490 --> 00:38:06.370
it's in, so the two parts.

00:38:06.370 --> 00:38:09.580
So we would need
to create a link

00:38:09.580 --> 00:38:13.000
between the cursor
and the request,

00:38:13.000 --> 00:38:14.717
and then find a way
of exposing that.

00:38:14.717 --> 00:38:17.050
SURMA: I guess, we would check
first if, under the hood,

00:38:17.050 --> 00:38:21.590
the cursor doesn't already have
a link defined to the request,

00:38:21.590 --> 00:38:22.090
right?

00:38:22.090 --> 00:38:23.030
JAKE: Exactly.

00:38:23.030 --> 00:38:27.590
And in the same way that if
you call cursor.continue,

00:38:27.590 --> 00:38:29.830
it works somehow.

00:38:29.830 --> 00:38:31.820
SURMA: And then uses
the request, right?

00:38:31.820 --> 00:38:32.320
JAKE: Yes.

00:38:32.320 --> 00:38:34.360
So it must have some
kind of connection

00:38:34.360 --> 00:38:38.250
to the request under the
hood, and we will see here.

00:38:38.250 --> 00:38:39.820
SURMA: The cursor has a request.

00:38:39.820 --> 00:38:42.570
JAKE: Yes, which is the request
used to open the cursor.

00:38:42.570 --> 00:38:43.570
SURMA: Great definition.

00:38:43.570 --> 00:38:44.380
JAKE: It's there.

00:38:44.380 --> 00:38:46.818
It was just never
exposed to JavaScript.

00:38:46.818 --> 00:38:47.610
SURMA: Interesting.

00:38:47.610 --> 00:38:49.960
So I guess, what you
just did, you just

00:38:49.960 --> 00:38:53.013
skim read the bold
things, I guess, right?

00:38:53.013 --> 00:38:55.180
That is the kind of eye you
develop if the more time

00:38:55.180 --> 00:38:57.055
you spend in specs,
where you're able to look

00:38:57.055 --> 00:38:59.470
at this flood of words
and don't actually

00:38:59.470 --> 00:39:01.160
have to read every paragraph.

00:39:01.160 --> 00:39:04.000
JAKE: Well, the way I
actually discovered that is

00:39:04.000 --> 00:39:06.130
I went into object store.

00:39:06.130 --> 00:39:09.370
I went into open cursor.

00:39:09.370 --> 00:39:12.990
I started sort of reading how
does open cursor actually work.

00:39:12.990 --> 00:39:14.740
Because this is where
you get the request.

00:39:14.740 --> 00:39:19.580
SURMA: So that this is the
fifth section called Algorithms,

00:39:19.580 --> 00:39:20.080
I guess?

00:39:20.080 --> 00:39:22.450
JAKE: Yes, which is just
sort of where the two

00:39:22.450 --> 00:39:23.880
things are matched together.

00:39:23.880 --> 00:39:25.510
SURMA: So it's not quite code.

00:39:25.510 --> 00:39:29.700
It's prose in a
step-by-step fashion.

00:39:29.700 --> 00:39:33.280
But that is basically what the
implementers then turn into C++

00:39:33.280 --> 00:39:34.210
code most of the time.

00:39:34.210 --> 00:39:36.120
JAKE: Yeah, and [INAUDIBLE],,
that sort of thing.

00:39:36.120 --> 00:39:36.730
SURMA: True.

00:39:36.730 --> 00:39:38.540
What's actually
running under the hood?

00:39:38.540 --> 00:39:40.707
JAKE: And this is where I
saw step eight, which was,

00:39:40.707 --> 00:39:42.730
set cursors request to request.

00:39:42.730 --> 00:39:43.870
SURMA: That's ironic.

00:39:43.870 --> 00:39:44.920
JAKE: There it is.

00:39:44.920 --> 00:39:48.340
And linking back to it,
a cursor has a request.

00:39:48.340 --> 00:39:49.000
That's--

00:39:49.000 --> 00:39:50.393
SURMA: It's there.

00:39:50.393 --> 00:39:52.060
That tells that the
implementers already

00:39:52.060 --> 00:39:54.670
have this in their code.

00:39:54.670 --> 00:39:56.465
A cursor has a request.

00:39:56.465 --> 00:39:58.090
So that would tell
me, from what you've

00:39:58.090 --> 00:40:00.507
told me so far, that the only
thing that's actually needed

00:40:00.507 --> 00:40:02.840
is to put something
into the API bit.

00:40:02.840 --> 00:40:04.340
JAKE: To link those
things together.

00:40:04.340 --> 00:40:05.620
SURMA: Yeah.

00:40:05.620 --> 00:40:06.490
JAKE: Pretty much.

00:40:09.040 --> 00:40:10.520
Well, let's dive into it.

00:40:10.520 --> 00:40:15.020
So at this point, you would
go to GitHub clone spec.

00:40:15.020 --> 00:40:17.180
Then you got a copy of it.

00:40:17.180 --> 00:40:20.320
SURMA: What does a spec
look like in code, Jake?

00:40:20.320 --> 00:40:23.120
JAKE: Well, let's have a look.

00:40:23.120 --> 00:40:24.640
Is it IndexedDB?

00:40:24.640 --> 00:40:25.550
SURMA: It is.

00:40:25.550 --> 00:40:27.130
JAKE: Look what I did some
work with intersection.

00:40:27.130 --> 00:40:28.213
It was over at some point.

00:40:28.213 --> 00:40:31.105
I can't remember
that, but fair enough.

00:40:31.105 --> 00:40:35.710
Let's sort out the way item
likes to resize things.

00:40:35.710 --> 00:40:36.460
There we go.

00:40:36.460 --> 00:40:38.180
That's fine.

00:40:38.180 --> 00:40:42.310
So if we have a look
at what's here--

00:40:42.310 --> 00:40:43.180
SURMA: That's a lot.

00:40:43.180 --> 00:40:45.310
JAKE: There's a load of stuff.

00:40:45.310 --> 00:40:47.210
The actual spec--

00:40:47.210 --> 00:40:48.900
SURMA: It is an HTML file.

00:40:48.900 --> 00:40:49.900
JAKE: But that's not it.

00:40:49.900 --> 00:40:50.707
That's generated.

00:40:50.707 --> 00:40:52.540
SURMA: That's the
compiled output, isn't it?

00:40:52.540 --> 00:40:56.980
Because the source is a
language called bikeshed.

00:40:56.980 --> 00:40:58.060
JAKE: Bikeshed.

00:40:58.060 --> 00:41:01.740
And this is this
file here, index.bs.

00:41:01.740 --> 00:41:03.990
It's very funny.

00:41:03.990 --> 00:41:06.725
Bikeshed-- and it's
a special format kind

00:41:06.725 --> 00:41:07.600
of based on markdown.

00:41:07.600 --> 00:41:09.040
It has markdown properties.

00:41:09.040 --> 00:41:10.970
SURMA: Show it to me.

00:41:10.970 --> 00:41:11.850
JAKE: Let's dive in.

00:41:11.850 --> 00:41:12.910
Let's dive in.

00:41:12.910 --> 00:41:14.245
So here we go.

00:41:14.245 --> 00:41:15.550
SURMA: More window resizing.

00:41:15.550 --> 00:41:17.203
JAKE: More window resizing.

00:41:17.203 --> 00:41:19.240
SURMA: Oh, look, the
tabs already open.

00:41:19.240 --> 00:41:20.407
JAKE: The tabs already open.

00:41:20.407 --> 00:41:23.080
It's almost as if I've been
looking at this already.

00:41:23.080 --> 00:41:25.020
So this is it.

00:41:25.020 --> 00:41:25.827
SURMA: Wait.

00:41:25.827 --> 00:41:26.660
Let's go to the top.

00:41:26.660 --> 00:41:27.618
Let's start at the top.

00:41:27.618 --> 00:41:29.910
JAKE: We don't have time to
go through the whole thing.

00:41:29.910 --> 00:41:31.712
SURMA: No, but what
do you get greeted

00:41:31.712 --> 00:41:32.920
with when you open this file?

00:41:32.920 --> 00:41:34.170
JAKE: When you open this file.

00:41:34.170 --> 00:41:36.190
SURMA: Oh, look, it's HTML.

00:41:36.190 --> 00:41:38.080
JAKE: Yeah, you
can put HTML in it.

00:41:38.080 --> 00:41:40.540
It is like markdown
in that respect.

00:41:40.540 --> 00:41:42.880
You can see the list of editors.

00:41:42.880 --> 00:41:46.150
This is just a metadeta section
that bikeshed understands.

00:41:46.150 --> 00:41:48.580
SURMA: Is this what will be
translated into the section we

00:41:48.580 --> 00:41:49.820
saw at the start
of the spec, where

00:41:49.820 --> 00:41:50.420
they're linked together a bit?

00:41:50.420 --> 00:41:50.660
JAKE: Yes.

00:41:50.660 --> 00:41:51.370
SURMA: So this is
actually something

00:41:51.370 --> 00:41:52.450
that will also be parsed.

00:41:52.450 --> 00:41:55.290
It's not just a
generic pre-section.

00:41:55.290 --> 00:41:58.727
Yep it is actually being parsed
and turned into the links

00:41:58.727 --> 00:42:00.310
that you see at the
start of the spec.

00:42:00.310 --> 00:42:00.970
JAKE: Exactly.

00:42:00.970 --> 00:42:05.770
So there's more
metadata, some styles,

00:42:05.770 --> 00:42:06.840
because it is just HTML.

00:42:06.840 --> 00:42:09.445
They've got some custom styles
here, for whatever reason.

00:42:09.445 --> 00:42:11.320
And then we're starting
to get into markdown,

00:42:11.320 --> 00:42:12.310
so markdown heading.

00:42:12.310 --> 00:42:14.477
I like this little comment
thing they've done there.

00:42:14.477 --> 00:42:17.140
You don't need to do
that, but it looks nice.

00:42:17.140 --> 00:42:19.530
Also, oh, soft wrapping--

00:42:19.530 --> 00:42:20.760
I dislike it.

00:42:20.760 --> 00:42:22.510
SURMA: I do, too.

00:42:22.510 --> 00:42:24.150
JAKE: I can turn
wrapping on this.

00:42:24.150 --> 00:42:25.440
Why do I have to do--

00:42:25.440 --> 00:42:28.845
and also, what column
is this wrapped up?

00:42:28.845 --> 00:42:31.200
It's entirely arbitrary.

00:42:31.200 --> 00:42:31.770
Why is that--

00:42:31.770 --> 00:42:32.600
SURMA: This one runs over.

00:42:32.600 --> 00:42:33.767
JAKE: I suppose that's code.

00:42:33.767 --> 00:42:35.906
But you can see--

00:42:35.906 --> 00:42:37.180
SURMA: That looks familiar.

00:42:37.180 --> 00:42:40.950
JAKE: Familiar markdown if
you've used GitHub before.

00:42:40.950 --> 00:42:43.173
Anyway, that's a
different topic.

00:42:43.173 --> 00:42:45.090
If you're editing a spec,
the best thing to do

00:42:45.090 --> 00:42:47.380
is to just sort of figure
out what styles they use,

00:42:47.380 --> 00:42:47.870
and just copy them.

00:42:47.870 --> 00:42:48.870
SURMA: Go with the flow.

00:42:48.870 --> 00:42:50.400
Don't stand out.

00:42:50.400 --> 00:42:53.183
Make it a consistent
as much as you can.

00:42:53.183 --> 00:42:54.600
Don't go about
fixing other stuff,

00:42:54.600 --> 00:42:57.270
because it will make your
dif or your PR much harder

00:42:57.270 --> 00:42:58.180
to look through.

00:42:58.180 --> 00:43:00.180
The thing that you
add, make it seem

00:43:00.180 --> 00:43:02.890
like it's part of the spec.

00:43:02.890 --> 00:43:06.060
JAKE: And some
specs use more HTML.

00:43:06.060 --> 00:43:08.580
Some use more of these
bikeshed shortcuts.

00:43:08.580 --> 00:43:12.180
There's quite a few shortcuts
going on here, which I prefer,

00:43:12.180 --> 00:43:14.490
than writing out HTML by hand.

00:43:14.490 --> 00:43:16.767
I should say that,
if you want to--

00:43:16.767 --> 00:43:17.850
SURMA: I was going to ask.

00:43:17.850 --> 00:43:19.920
If you wanted to know
what kind of shortcuts

00:43:19.920 --> 00:43:21.107
there are for bikeshed--

00:43:21.107 --> 00:43:22.940
JAKE: Yes, so if you
wanted to get bikeshed,

00:43:22.940 --> 00:43:23.940
wanted to use bikeshed--

00:43:23.940 --> 00:43:25.590
SURMA: From our
colleague, Tab Atkins.

00:43:25.590 --> 00:43:26.507
JAKE: From Tab Atkins.

00:43:26.507 --> 00:43:28.622
It's not the only
spec-compiling thing available.

00:43:28.622 --> 00:43:29.580
There's ReSpec as well.

00:43:29.580 --> 00:43:31.205
I don't really know
a lot about ReSpec.

00:43:31.205 --> 00:43:35.370
So I've not done a lot of work
on those standards before.

00:43:35.370 --> 00:43:37.950
But there is documentation.

00:43:37.950 --> 00:43:40.540
The documentation is also
being generated with bikeshed.

00:43:40.540 --> 00:43:41.400
Very good.

00:43:41.400 --> 00:43:43.950
SURMA: Ah, very recursive.

00:43:43.950 --> 00:43:46.320
JAKE: And so it looks
like a living standard,

00:43:46.320 --> 00:43:48.830
and it details all
of these shortcuts.

00:43:48.830 --> 00:43:50.700
SURMA: And to install
it as well, which

00:43:50.700 --> 00:43:51.910
you might be interested in.

00:43:51.910 --> 00:43:55.365
JAKE: Yes, I would say that
there's also a web service.

00:43:55.365 --> 00:43:56.740
You just give it
a bikeshed file.

00:43:56.740 --> 00:43:57.780
It gives you HTML back.

00:43:57.780 --> 00:43:59.590
SURMA: Handy, very, very handy.

00:43:59.590 --> 00:44:01.660
JAKE: Very, very handy.

00:44:01.660 --> 00:44:06.170
So let's sort of dive into how
we were going to tackle this.

00:44:06.170 --> 00:44:08.170
SURMA: All right, where
do you want to go first?

00:44:08.170 --> 00:44:09.630
Are we going into
the API section?

00:44:09.630 --> 00:44:10.770
JAKE: I would go
to the API section.

00:44:10.770 --> 00:44:12.000
SURMA: Let's go to
the API section.

00:44:12.000 --> 00:44:12.600
How do you go there?

00:44:12.600 --> 00:44:13.950
Because this is a big document.

00:44:13.950 --> 00:44:15.033
JAKE: It's a big document.

00:44:15.033 --> 00:44:16.070
And you know what I do?

00:44:16.070 --> 00:44:19.670
I look for some texts
[INAUDIBLE] the thing just

00:44:19.670 --> 00:44:21.250
to see if--

00:44:21.250 --> 00:44:26.390
SURMA: I mean, our IDL should be
fairly precise to find, right?

00:44:26.390 --> 00:44:26.890
JAKE: Yes.

00:44:26.890 --> 00:44:29.950
SURMA: I mean, or the word
interface, which, I think--

00:44:29.950 --> 00:44:31.840
JAKE: So let's
maybe look for this.

00:44:31.840 --> 00:44:33.490
Interface is going
to be everywhere.

00:44:33.490 --> 00:44:34.880
SURMA: I meant the entire thing.

00:44:34.880 --> 00:44:36.005
JAKE: Oh, the entire thing.

00:44:36.005 --> 00:44:38.080
But whether that would
be in tags or not--

00:44:38.080 --> 00:44:39.767
SURMA: Oh, no, that looks good.

00:44:39.767 --> 00:44:40.600
JAKE: So this is OK.

00:44:40.600 --> 00:44:43.190
We've only got a few of these.

00:44:43.190 --> 00:44:44.052
There it is.

00:44:44.052 --> 00:44:45.760
SURMA: IDB cursor,
interface IDB cursor--

00:44:45.760 --> 00:44:46.730
this is where we want to be.

00:44:46.730 --> 00:44:48.280
JAKE: This is where
we want to be.

00:44:48.280 --> 00:44:52.390
And we want to add
a new thing here.

00:44:52.390 --> 00:44:55.340
Read-only attribute.

00:44:55.340 --> 00:44:59.830
Now the way Web IDL-- what it
calls an attribute-- and this

00:44:59.830 --> 00:45:01.770
really confused me
for a long time.

00:45:01.770 --> 00:45:03.400
I thought it meant
HTML attribute,

00:45:03.400 --> 00:45:05.320
because that's where I
was seeing it in specs.

00:45:05.320 --> 00:45:06.430
What it means is getter.

00:45:09.250 --> 00:45:12.990
If you want to look
at Web IDL, of course,

00:45:12.990 --> 00:45:13.990
there's a spec for this.

00:45:13.990 --> 00:45:14.865
SURMA: So wait a sec.

00:45:14.865 --> 00:45:16.660
Couldn't we just remove
the read-only only

00:45:16.660 --> 00:45:17.410
define the getter?

00:45:19.660 --> 00:45:20.380
JAKE: You could.

00:45:20.380 --> 00:45:26.170
Now the reason Web IDL
tends to be quite detailed

00:45:26.170 --> 00:45:28.660
is browsers actually use
it for code generation.

00:45:28.660 --> 00:45:29.350
SURMA: Right.

00:45:29.350 --> 00:45:31.660
JAKE: So there tends to be
quite a lot of information

00:45:31.660 --> 00:45:34.910
embedded in this stuff.

00:45:34.910 --> 00:45:36.480
So browsers will
actually parse this.

00:45:36.480 --> 00:45:40.560
It will parse this bit in
Node to expose that stuff.

00:45:40.560 --> 00:45:43.390
And it will, essentially,
generate a lot of code.

00:45:43.390 --> 00:45:45.807
And the developer just has to
sort of fill in the innards.

00:45:45.807 --> 00:45:47.890
SURMA: You're talking about
the browser developer?

00:45:47.890 --> 00:45:50.050
JAKE: The browser
developer, exactly.

00:45:50.050 --> 00:45:52.430
So what do we want to do here?

00:45:52.430 --> 00:45:54.490
So the first bit is
the return type, which

00:45:54.490 --> 00:45:56.860
is going to be IDBrequest.

00:45:56.860 --> 00:45:59.380
SURMA: Which you looked
up some time beforehand

00:45:59.380 --> 00:46:02.240
that there is also the
interface IDBrequest.

00:46:02.240 --> 00:46:03.310
JAKE: Yes.

00:46:03.310 --> 00:46:05.230
From using IDB, I
know, it's that.

00:46:05.230 --> 00:46:07.880
And let's call it request,
because that makes sense.

00:46:07.880 --> 00:46:10.890
And there we go.

00:46:10.890 --> 00:46:12.120
Let's see if it compiles.

00:46:12.120 --> 00:46:13.110
SURMA: Are we done?

00:46:13.110 --> 00:46:14.490
JAKE: We're not done.

00:46:14.490 --> 00:46:17.310
Oh, boy.

00:46:17.310 --> 00:46:21.750
Because I've installed bikeshed,
I can do a bikeshed watch.

00:46:21.750 --> 00:46:25.090
Let's do that, and off it goes.

00:46:25.090 --> 00:46:28.740
It has a think about some stuff.

00:46:28.740 --> 00:46:29.690
Done.

00:46:29.690 --> 00:46:30.190
Great.

00:46:30.190 --> 00:46:30.690
Excellent.

00:46:30.690 --> 00:46:33.310
SURMA: And now, I guess, the
HTML alpha has been updated.

00:46:33.310 --> 00:46:36.440
JAKE: Yeah, and bikeshed,
it checks a lot of stuff.

00:46:36.440 --> 00:46:38.150
So we have actually
got a warning here.

00:46:38.150 --> 00:46:40.900
It says, there's a definition
that's not referenced locally.

00:46:43.432 --> 00:46:45.140
If I remove that edit
we made, that error

00:46:45.140 --> 00:46:46.223
is still going to come up.

00:46:46.223 --> 00:46:48.448
So I would always say,
run first before editing.

00:46:48.448 --> 00:46:50.740
And if there's errors, they're
the ones you can ignore.

00:46:50.740 --> 00:46:52.220
Because they're not your fault.

00:46:52.220 --> 00:46:53.012
SURMA: That's good.

00:46:53.012 --> 00:46:56.322
Because I can't tell what this--

00:46:56.322 --> 00:46:58.780
JAKE: So what it means, what's
actually happening here is--

00:46:58.780 --> 00:46:59.697
SURMA: Oh, equivalent.

00:46:59.697 --> 00:47:00.790
JAKE: Equivalent.

00:47:00.790 --> 00:47:04.130
So this is just a web
server that I started up.

00:47:04.130 --> 00:47:06.130
SURMA: Because bikeshed
doesn't do that for you?

00:47:06.130 --> 00:47:08.320
It maybe can, but you
did do it just now.

00:47:08.320 --> 00:47:09.320
JAKE: API can't do it.

00:47:09.320 --> 00:47:11.320
Because it's just an HTML
file, it works anyway.

00:47:11.320 --> 00:47:12.873
I always run--

00:47:12.873 --> 00:47:14.290
SURMA: You can
just open the file.

00:47:14.290 --> 00:47:15.070
You don't even need a website.

00:47:15.070 --> 00:47:16.112
JAKE: You probably could.

00:47:16.112 --> 00:47:18.950
But I always run a web
server on my death folder.

00:47:18.950 --> 00:47:20.377
SURMA: Oh, I'm a real developer.

00:47:20.377 --> 00:47:22.210
JAKE: I've got it set
to happen at start up,

00:47:22.210 --> 00:47:24.060
because I always need
one at some point,

00:47:24.060 --> 00:47:26.900
and it's normally
in that folder.

00:47:26.900 --> 00:47:28.630
So what were we looking up?

00:47:28.630 --> 00:47:31.210
It was this weird
equivalence thing.

00:47:35.500 --> 00:47:40.168
So we can see this in
bold definition here--

00:47:40.168 --> 00:47:42.460
as long as the end result is
equivalent-- but nothing's

00:47:42.460 --> 00:47:46.745
actually referencing it,
and it's not exported.

00:47:46.745 --> 00:47:49.120
So it's flagging up and going,
you've got this thing here

00:47:49.120 --> 00:47:50.540
that you're not using.

00:47:50.540 --> 00:47:51.640
Why?

00:47:51.640 --> 00:47:52.983
Which is kind of cool.

00:47:52.983 --> 00:47:53.900
SURMA: That's helpful.

00:47:53.900 --> 00:47:54.370
JAKE: But you know what?

00:47:54.370 --> 00:47:55.300
Not our problem.

00:47:55.300 --> 00:47:56.258
SURMA: Not our problem.

00:47:56.258 --> 00:47:58.520
We didn't write it.

00:47:58.520 --> 00:48:01.896
JAKE: Let's have a look
at the cursor API stuff.

00:48:01.896 --> 00:48:03.580
SURMA: (IN SINGSONG
VOICE) Dun-dun-dun.

00:48:03.580 --> 00:48:04.330
JAKE: Oh, my god.

00:48:04.330 --> 00:48:04.960
Look at that.

00:48:04.960 --> 00:48:07.300
SURMA: But it's bold
and not clickable, Jake.

00:48:07.300 --> 00:48:08.080
JAKE: Yeah, it's not clickable.

00:48:08.080 --> 00:48:09.455
SURMA: The other
one's different.

00:48:09.455 --> 00:48:11.350
JAKE: It's the only
reference to this thing,

00:48:11.350 --> 00:48:13.957
because we've not
reference that elsewhere.

00:48:13.957 --> 00:48:15.790
We've been looking at
source being something

00:48:15.790 --> 00:48:17.268
similar to what we've got.

00:48:17.268 --> 00:48:18.310
SURMA: Pretty much, yeah.

00:48:18.310 --> 00:48:19.640
So where does it link?

00:48:19.640 --> 00:48:24.098
JAKE: And so this just
happens below this block.

00:48:24.098 --> 00:48:26.140
It's saying here, the
source attribute's getter--

00:48:26.140 --> 00:48:27.400
so once again, prose--

00:48:27.400 --> 00:48:31.210
must return the
source of this cursor.

00:48:31.210 --> 00:48:34.880
And these are all linked
up, and you can sort of

00:48:34.880 --> 00:48:37.450
see what it is, which is the
index of the object store.

00:48:37.450 --> 00:48:38.753
SURMA: Which is [INAUDIBLE].

00:48:41.550 --> 00:48:43.355
It will never return
null or throw.

00:48:46.480 --> 00:48:47.542
All right, cool.

00:48:47.542 --> 00:48:48.750
JAKE: Yeah, it's interesting.

00:48:48.750 --> 00:48:51.470
So everyone every spec
author has their own sort

00:48:51.470 --> 00:48:53.210
of style and quirks.

00:48:53.210 --> 00:48:55.880
I would say, "this attribute
never returns null"

00:48:55.880 --> 00:49:00.290
is something I would
put in the notes.

00:49:00.290 --> 00:49:05.150
The fact that it never returns
null is defined elsewhere.

00:49:05.150 --> 00:49:07.463
That's kind of just
like a code comment,

00:49:07.463 --> 00:49:08.630
which I would put in a note.

00:49:08.630 --> 00:49:10.490
Because it's not
essential information.

00:49:10.490 --> 00:49:10.790
It's helpful, but--

00:49:10.790 --> 00:49:11.680
SURMA: Neither of these
approaches are wrong.

00:49:11.680 --> 00:49:12.440
You can do it this way.

00:49:12.440 --> 00:49:13.398
You can do it your way.

00:49:13.398 --> 00:49:16.370
Both seem to be working fine
because this is in a spec.

00:49:16.370 --> 00:49:20.100
JAKE: One thing that is not
how I would write a spec,

00:49:20.100 --> 00:49:22.160
but I see a lot in
spec land is actually

00:49:22.160 --> 00:49:24.650
something I used to do,
and I was told off for it.

00:49:24.650 --> 00:49:27.560
It says, "this returns
the source of the cursor."

00:49:27.560 --> 00:49:30.340
But the source
points to this thing

00:49:30.340 --> 00:49:34.310
up in the constructs land.

00:49:34.310 --> 00:49:35.930
And the spec
doesn't describe how

00:49:35.930 --> 00:49:40.520
to turn that into a
JavaScript object, which

00:49:40.520 --> 00:49:41.990
should be explicit, really.

00:49:44.510 --> 00:49:46.340
When I started doing
this, Boris Zbarsky,

00:49:46.340 --> 00:49:49.670
who's one of the huge
minds at Mozilla,

00:49:49.670 --> 00:49:51.350
said, well, how do
I convert to this.

00:49:51.350 --> 00:49:52.767
It's like, well,
isn't it obvious?

00:49:52.767 --> 00:49:55.310
It's like, yeah, but what
have you got for your IFrames

00:49:55.310 --> 00:49:55.852
on your page?

00:49:55.852 --> 00:49:57.560
Should I create the
object in the IFrame.

00:49:57.560 --> 00:49:59.690
I was like like, no,
that would be stupid.

00:49:59.690 --> 00:50:01.540
You need to write this down.

00:50:01.540 --> 00:50:04.220
And also, if you access
the getter twice,

00:50:04.220 --> 00:50:06.050
does it give you a
new object each time?

00:50:06.050 --> 00:50:09.180
I'm like, oh, I see.

00:50:09.180 --> 00:50:11.390
And so the idea is that
stuff should be spec.

00:50:11.390 --> 00:50:14.300
So someone could follow
this spec to the letter

00:50:14.300 --> 00:50:17.630
and return a different
object every time

00:50:17.630 --> 00:50:19.427
that represents the
same underlying thing.

00:50:19.427 --> 00:50:21.260
SURMA: Yeah, leaving
room for interpretation

00:50:21.260 --> 00:50:23.302
is something that leads
to inter-op issues, which

00:50:23.302 --> 00:50:26.120
is something we've been
trying to avoid really hard.

00:50:26.120 --> 00:50:27.200
JAKE: Exactly.

00:50:27.200 --> 00:50:30.240
But we're going to just
follow what they do.

00:50:30.240 --> 00:50:32.330
The good news is,
the whole thing

00:50:32.330 --> 00:50:36.680
around object equivalence,
we have covered in the tests.

00:50:36.680 --> 00:50:37.357
SURMA: True.

00:50:37.357 --> 00:50:39.190
So even if there is
room for interpretation,

00:50:39.190 --> 00:50:41.270
the text version of
the spec, the tests

00:50:41.270 --> 00:50:43.250
can remove that ambiguity.

00:50:43.250 --> 00:50:44.180
JAKE: Absolutely.

00:50:46.622 --> 00:50:47.330
Do you know what?

00:50:47.330 --> 00:50:50.420
See, I like me
some copy-pasting,

00:50:50.420 --> 00:50:54.800
so I'm going to sort of
move this down to here.

00:50:54.800 --> 00:50:56.730
Let's go for it.

00:50:56.730 --> 00:50:59.110
So this is bikeshed syntax.

00:50:59.110 --> 00:51:00.560
It's a definition.

00:51:00.560 --> 00:51:04.310
It's an attribute in
terms of IDL-speak.

00:51:04.310 --> 00:51:06.200
It's for IDB cursor.

00:51:06.200 --> 00:51:09.080
So this is saying, this
thing that we're defining

00:51:09.080 --> 00:51:11.940
is a child of IDB cursor.

00:51:11.940 --> 00:51:14.570
SURMA: And that's how it
actually knows where to link.

00:51:14.570 --> 00:51:18.410
JAKE: Yep, and that's
referencing that there.

00:51:18.410 --> 00:51:22.800
So the getters must return the--

00:51:22.800 --> 00:51:28.940
and so this is bikeshed's
syntax for creating a reference.

00:51:28.940 --> 00:51:32.720
And you can reference things,
not just in this spec.

00:51:32.720 --> 00:51:34.878
You can reference things
outside of this spec.

00:51:34.878 --> 00:51:36.170
SURMA: Oh, you can [INAUDIBLE].

00:51:36.170 --> 00:51:37.795
I mean, I've seen it
a couple of times,

00:51:37.795 --> 00:51:39.380
where one spec will
link to another.

00:51:39.380 --> 00:51:41.660
JAKE: Yes, and this
is because bikeshed

00:51:41.660 --> 00:51:44.960
has this big database of stuff.

00:51:44.960 --> 00:51:48.530
I could put here, returns the--

00:51:48.530 --> 00:51:53.690
I don't know--
let's call it a URL.

00:51:53.690 --> 00:51:55.190
So these double-curly
braces means

00:51:55.190 --> 00:51:59.450
I'm referencing an interface.

00:51:59.450 --> 00:52:04.438
So if I did that, and we
should see this rebuilding.

00:52:04.438 --> 00:52:05.480
What's it telling us now?

00:52:05.480 --> 00:52:07.550
Multiple possible URLs.

00:52:07.550 --> 00:52:08.960
So what I'm going to ask it is--

00:52:08.960 --> 00:52:10.543
I'm going to put a
slash there to say,

00:52:10.543 --> 00:52:12.620
I want the top level
URL not the URL that

00:52:12.620 --> 00:52:14.310
belongs to something else.

00:52:14.310 --> 00:52:18.830
It might be that
that still breaks.

00:52:18.830 --> 00:52:20.250
No, that seems fine.

00:52:20.250 --> 00:52:22.750
We've got multiple attribute
definitions because of our copy

00:52:22.750 --> 00:52:24.140
and pasting.

00:52:24.140 --> 00:52:26.120
SURMA: Which is fatal,
but it's still compiled.

00:52:26.120 --> 00:52:27.290
JAKE: It's still compiled.

00:52:27.290 --> 00:52:29.020
Bikeshed is great for
this sort of thing.

00:52:29.020 --> 00:52:29.853
SURMA: Very lenient.

00:52:29.853 --> 00:52:32.160
JAKE: It just gets the job done.

00:52:32.160 --> 00:52:36.515
So now, we would see down here.

00:52:36.515 --> 00:52:38.510
We got the source
appearing again.

00:52:38.510 --> 00:52:40.730
Must return the URL,
because I put that in there.

00:52:40.730 --> 00:52:43.640
SURMA: And it links to the
URL spec in the what WG.

00:52:43.640 --> 00:52:46.550
JAKE: And it links to
the URL in the what WG.

00:52:46.550 --> 00:52:47.880
SURMA: That's handy.

00:52:47.880 --> 00:52:50.088
Not that we need it right
now, but it's good to know.

00:52:50.088 --> 00:52:51.410
JAKE: No, I just--

00:52:51.410 --> 00:52:55.680
because the change we actually
need to make is super-boring.

00:52:55.680 --> 00:52:57.560
SURMA: It's so simple, isn't it?

00:52:57.560 --> 00:53:02.730
JAKE: So the request
attribute getter must return

00:53:02.730 --> 00:53:05.960
the-- let's get
rid of that URL--

00:53:05.960 --> 00:53:11.522
the source request
of this cursor.

00:53:11.522 --> 00:53:12.980
SURMA: You want to
remove the rest?

00:53:12.980 --> 00:53:13.480
Whatever.

00:53:13.480 --> 00:53:15.040
You are going to
remove the rest.

00:53:15.040 --> 00:53:18.490
JAKE: And now, let's
see that build.

00:53:18.490 --> 00:53:19.750
Da da da.

00:53:19.750 --> 00:53:20.890
SURMA: No fatal errors.

00:53:20.890 --> 00:53:21.570
Well done, us.

00:53:21.570 --> 00:53:23.723
JAKE: No additional errors
from ones we had before.

00:53:23.723 --> 00:53:25.390
SURMA: Very important
to point that out.

00:53:25.390 --> 00:53:27.637
JAKE: And so we can see
now that our IDB request--

00:53:27.637 --> 00:53:28.595
SURMA: It's now linked.

00:53:28.595 --> 00:53:29.512
JAKE: It's now linked.

00:53:29.512 --> 00:53:31.845
And it says, "the request's
attribute getter must return

00:53:31.845 --> 00:53:33.090
the request of this cursor."

00:53:33.090 --> 00:53:35.550
Request links up to the thing.

00:53:35.550 --> 00:53:36.910
SURMA: That is A-mazing.

00:53:36.910 --> 00:53:37.870
JAKE: That's it.

00:53:37.870 --> 00:53:39.662
SURMA: So now, we commit
these two things--

00:53:39.662 --> 00:53:41.450
our tests and our spec changes.

00:53:41.450 --> 00:53:43.037
Open the PR.

00:53:43.037 --> 00:53:44.620
JAKE: Yeah, so that's
what I would do.

00:53:47.280 --> 00:53:50.440
Let's create a branch, right.

00:53:50.440 --> 00:53:51.602
Let's call it--

00:53:51.602 --> 00:53:53.560
SURMA: I know you have
commit rights to master.

00:53:53.560 --> 00:53:57.220
JAKE: I don't, actually,
not on IndexedDB.

00:53:57.220 --> 00:53:58.260
SURMA: Oh, true.

00:53:58.260 --> 00:53:59.010
This is IndexedDB.

00:53:59.010 --> 00:54:04.430
JAKE: This is IndexedDB So
let's call it cursor request.

00:54:04.430 --> 00:54:05.840
Excellent.

00:54:05.840 --> 00:54:09.890
Now I like Git GUIs.

00:54:09.890 --> 00:54:10.810
SURMA: You go for it.

00:54:10.810 --> 00:54:11.735
JAKE: I use my GUIs
for everything.

00:54:11.735 --> 00:54:12.100
SURMA: You be you.

00:54:12.100 --> 00:54:12.960
But can you zoom in?

00:54:12.960 --> 00:54:13.830
No, you cannot.

00:54:13.830 --> 00:54:14.590
JAKE: Oh.

00:54:14.590 --> 00:54:15.090
SURMA: Nope.

00:54:17.593 --> 00:54:18.510
JAKE: I tell you what.

00:54:18.510 --> 00:54:19.660
I can do this.

00:54:19.660 --> 00:54:20.350
There we go.

00:54:20.350 --> 00:54:21.808
And this is why I
like the Git GUI,

00:54:21.808 --> 00:54:24.545
because it's nice visual
showing me my changes.

00:54:24.545 --> 00:54:25.920
There's nothing
corrupt in there.

00:54:25.920 --> 00:54:27.420
SURMA: It is a
very small change.

00:54:27.420 --> 00:54:29.593
JAKE: It's a very small
change, which is good.

00:54:29.593 --> 00:54:32.010
I like this kind of overview,
in general, when I'm coding.

00:54:32.010 --> 00:54:33.900
Because the amount
of times I've caught

00:54:33.900 --> 00:54:35.720
console logs,
debugger statements,

00:54:35.720 --> 00:54:37.800
misspellings-- it's
my little code review.

00:54:37.800 --> 00:54:43.545
And I'm like, yes, I'll have
that and yes, I'll have that.

00:54:43.545 --> 00:54:44.920
I'm not going to
commit the HTML.

00:54:47.790 --> 00:54:49.845
It's telling me it's a new file.

00:54:49.845 --> 00:54:51.970
SURMA: That means that's
a get ignore or something?

00:54:51.970 --> 00:54:54.012
JAKE: Yeah or maybe it
should be in a get ignore.

00:54:54.012 --> 00:54:56.440
I'm going to ignore it.

00:54:56.440 --> 00:55:01.290
I'm going to go,
add cursor.request.

00:55:01.290 --> 00:55:04.370
And I will push those changes.

00:55:04.370 --> 00:55:07.590
Yeah, so that's pushed.

00:55:07.590 --> 00:55:10.260
But one thing that I
realized while actually

00:55:10.260 --> 00:55:15.780
editing the spec is we've
got two types of cursor.

00:55:15.780 --> 00:55:18.096
There's IDB cursor.

00:55:18.096 --> 00:55:25.798
And further down, there
is ID cursor with value.

00:55:25.798 --> 00:55:27.380
SURMA: Oh, as an
extended interface.

00:55:27.380 --> 00:55:29.172
JAKE: As an extended
interface, because you

00:55:29.172 --> 00:55:32.820
can get a cursor for
just the keys of a store

00:55:32.820 --> 00:55:37.240
and not including
the value as well.

00:55:37.240 --> 00:55:39.400
And this tends to be what
I do when I edit specs.

00:55:39.400 --> 00:55:40.612
I'll do the tests.

00:55:40.612 --> 00:55:41.320
I'll do the spec.

00:55:41.320 --> 00:55:43.737
And then I'll find something
that makes me think, hang on.

00:55:43.737 --> 00:55:45.290
Are my tests correct.

00:55:45.290 --> 00:55:47.920
And I'm a bit worried in
this case, because when

00:55:47.920 --> 00:55:50.290
we were doing the tests,

00:55:50.290 --> 00:55:52.780
SURMA: We are assuming
it has a value.

00:55:52.780 --> 00:55:55.120
JAKE: Well, no, we're
doing object store,

00:55:55.120 --> 00:55:57.035
and object store is
a cursor with value.

00:55:57.035 --> 00:55:58.160
SURMA: That's what I meant.

00:55:58.160 --> 00:55:59.890
So having a cursor with value--

00:55:59.890 --> 00:56:01.030
JAKE: Yes, exactly.

00:56:01.030 --> 00:56:03.370
SURMA: So our spec
change actually defines

00:56:03.370 --> 00:56:05.490
on a cursor with the
potential without a value.

00:56:05.490 --> 00:56:07.830
JAKE: Well, yes,
the parent class.

00:56:07.830 --> 00:56:09.410
And that's where
we want it to be.

00:56:09.410 --> 00:56:13.240
So this is the point where
I go, eh, do you know what?

00:56:13.240 --> 00:56:15.490
I'm going to put openKeycursor.

00:56:15.490 --> 00:56:19.540
SURMA: Which is the IDB cursor,
the one without a value.

00:56:19.540 --> 00:56:20.200
JAKE: Exactly.

00:56:20.200 --> 00:56:22.640
Exactly that.

00:56:22.640 --> 00:56:25.240
Yeah, just to make sure it's
on the parent class rather than

00:56:25.240 --> 00:56:26.198
just that one subclass.

00:56:26.198 --> 00:56:29.920
SURMA: Is this something
that probably would have been

00:56:29.920 --> 00:56:31.090
caught by the code reviewer?

00:56:31.090 --> 00:56:33.280
Because these views will happen
in separate repositories,

00:56:33.280 --> 00:56:33.780
right?

00:56:33.780 --> 00:56:34.450
JAKE: Yeah.

00:56:34.450 --> 00:56:37.360
Usually, when you do spec work
like this, you make a commit.

00:56:37.360 --> 00:56:37.870
You do that.

00:56:37.870 --> 00:56:41.043
And people come back and go,
oh, I found this edge case.

00:56:41.043 --> 00:56:42.460
Do you want to
patch that up, make

00:56:42.460 --> 00:56:43.420
sure that they can't happen.

00:56:43.420 --> 00:56:44.540
That might happen
with this as well.

00:56:44.540 --> 00:56:46.390
SURMA: It's not necessarily
like a fatal mistake

00:56:46.390 --> 00:56:48.640
if we would have shipped it
without the OpenKeyCursor,

00:56:48.640 --> 00:56:49.510
with the OpenCursor instead?

00:56:49.510 --> 00:56:50.230
JAKE: Exactly.

00:56:50.230 --> 00:56:51.160
Exactly.

00:56:51.160 --> 00:56:53.035
SURMA: So I was just
trying to figure it out,

00:56:53.035 --> 00:56:55.120
because I would personally
be very afraid of if I

00:56:55.120 --> 00:56:55.870
don't notice this.

00:56:55.870 --> 00:56:58.960
I'm not even good enough
for web-platform-tests.

00:56:58.960 --> 00:56:59.620
JAKE: Right.

00:56:59.620 --> 00:57:01.990
I mean, people will help.

00:57:01.990 --> 00:57:05.290
Go and have a look at
any of my spec PRs.

00:57:05.290 --> 00:57:07.450
There's, like, 50
comments of discussion.

00:57:07.450 --> 00:57:08.600
I don't know if there's
going to be for this one,

00:57:08.600 --> 00:57:10.510
because it's, like,
a two-line change.

00:57:10.510 --> 00:57:12.040
SURMA: I would be impressed.

00:57:12.040 --> 00:57:15.340
JAKE: But hey, I'm
literally writing this now,

00:57:15.340 --> 00:57:17.350
so people could go and
have a look at the PR

00:57:17.350 --> 00:57:19.090
and see if that
is what happened.

00:57:19.090 --> 00:57:22.905
So yeah.

00:57:22.905 --> 00:57:29.040
I'll say, cursor request.

00:57:29.040 --> 00:57:34.030
And yeah, so this is me
committing the test now

00:57:34.030 --> 00:57:35.510
with my Git GUI.

00:57:35.510 --> 00:57:38.350
It's beachballing It's fine.

00:57:38.350 --> 00:57:41.420
Yeah, web-platform-tests
is huge.

00:57:41.420 --> 00:57:43.180
It has, like, 100
branches, because a lot

00:57:43.180 --> 00:57:46.060
of the browsers default
upstream from their own test

00:57:46.060 --> 00:57:47.605
stuff into it.

00:57:47.605 --> 00:57:48.670
But I'm looking at that.

00:57:48.670 --> 00:57:49.170
That's fine.

00:57:49.170 --> 00:57:50.337
It's got the right stuff in.

00:57:50.337 --> 00:57:52.330
SURMA: So in case we
do want a new file,

00:57:52.330 --> 00:57:53.650
because we created it.

00:57:53.650 --> 00:57:56.860
JAKE: Yep, so cursor.request,
I'm happy with that.

00:57:59.440 --> 00:58:01.150
And push that up to--

00:58:04.150 --> 00:58:04.990
SURMA: We're done.

00:58:04.990 --> 00:58:05.907
JAKE: And we are done.

00:58:05.907 --> 00:58:09.550
SURMA: So now, we'll open PRs,
and we'll wait for the feedback

00:58:09.550 --> 00:58:11.740
from the other
browser vendors on it.

00:58:11.740 --> 00:58:12.370
JAKE: Exactly.

00:58:12.370 --> 00:58:14.890
And so hopefully, by the
time this episode goes out,

00:58:14.890 --> 00:58:17.140
people are just going to
have said, it's totally fine.

00:58:17.140 --> 00:58:18.160
There's no mistakes.

00:58:18.160 --> 00:58:20.480
You haven't done anything wrong.

00:58:20.480 --> 00:58:22.480
And this feature can just
be shipped very easily

00:58:22.480 --> 00:58:23.400
in browsers.

00:58:23.400 --> 00:58:24.620
SURMA: A-mazing.

00:58:24.620 --> 00:58:27.010
Thank you.

00:58:27.010 --> 00:58:28.190
JAKE: Right, let's, uh--

00:58:28.190 --> 00:58:29.140
oh, look at that.

00:58:29.140 --> 00:58:33.215
Look at that resizing
being totally unhelpful.

00:58:33.215 --> 00:58:34.380
Tell you what.

00:58:34.380 --> 00:58:35.530
I'm not going to do that.

00:58:35.530 --> 00:58:36.430
SURMA: Tab.

00:58:36.430 --> 00:58:38.400
JAKE: I'm going to
create another window.

00:58:38.400 --> 00:58:39.657
Yeah, create another tab.

00:58:39.657 --> 00:58:41.240
Is that going to
resize badly as well?

00:58:41.240 --> 00:58:41.750
Yeah, it is.

00:58:41.750 --> 00:58:42.458
Of course, it is.

00:58:42.458 --> 00:58:43.420
Why not?

00:58:43.420 --> 00:58:45.907
Right, let's go like that.

00:58:45.907 --> 00:58:47.990
SURMA: (IN SINGSONG VOICE)
Something for the edit.

00:58:47.990 --> 00:58:49.032
JAKE: Something for the--

00:58:49.032 --> 00:58:50.440
[LAUGHS]

