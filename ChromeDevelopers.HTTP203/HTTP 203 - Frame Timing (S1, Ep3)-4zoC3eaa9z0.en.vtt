WEBVTT
Kind: captions
Language: en

00:00:00.500 --> 00:00:04.470
PAUL: I have been a bit worried
about your little peanut

00:00:04.470 --> 00:00:07.880
head in winter.

00:00:07.880 --> 00:00:10.940
And with it coming
up to Thanksgiving,

00:00:10.940 --> 00:00:13.100
I thought, well, I'm
thankful for Jake.

00:00:13.100 --> 00:00:14.090
So I got you a present.

00:00:14.090 --> 00:00:15.215
I bought you a hat.

00:00:15.215 --> 00:00:17.370
JAKE: I have a hat.

00:00:17.370 --> 00:00:18.450
Oh my word.

00:00:18.450 --> 00:00:24.231
PAUL: It's both on
brand for Thanksgiving.

00:00:24.231 --> 00:00:27.461
JAKE: It's all I
hoped for and more.

00:00:27.461 --> 00:00:28.460
What do I do with these?

00:00:28.460 --> 00:00:30.363
They're going to chafe.

00:00:30.363 --> 00:00:34.432
[MUSIC PLAYING]

00:00:37.384 --> 00:00:41.210
PAUL: The network people for a
long time have had all the fun.

00:00:41.210 --> 00:00:44.420
And now it's the runtime time.

00:00:44.420 --> 00:00:45.520
We've got a new API.

00:00:45.520 --> 00:00:47.750
It's the web smoothness API.

00:00:47.750 --> 00:00:49.540
JAKE: The web smoothness API?

00:00:49.540 --> 00:00:52.615
Please tell me it's
just web smoothness true

00:00:52.615 --> 00:00:53.880
and then the web is smooth.

00:00:53.880 --> 00:00:54.820
PAUL: Yes.

00:00:54.820 --> 00:00:59.459
Now, the problem with that name
kind of came up in the feedback

00:00:59.459 --> 00:01:00.250
from other vendors.

00:01:00.250 --> 00:01:02.830
And they said no,
actually, it isn't that.

00:01:02.830 --> 00:01:04.819
Because it's about
measuring information.

00:01:04.819 --> 00:01:06.490
It's not about whether you're
going to switch on smoothness.

00:01:06.490 --> 00:01:08.240
And it does sound
like that, doesn't it?

00:01:08.240 --> 00:01:10.940
So it's actually been renamed
to the frame timing API.

00:01:10.940 --> 00:01:14.374
JAKE: So it's going
to give us some

00:01:14.374 --> 00:01:16.290
of what we have for the
network [? tiny ?] API

00:01:16.290 --> 00:01:17.175
but for rendering?

00:01:17.175 --> 00:01:18.175
PAUL: Yeah, pretty much.

00:01:18.175 --> 00:01:20.330
So I think most people
are used to the idea

00:01:20.330 --> 00:01:22.609
that they use something
like DevTools Timeline.

00:01:22.609 --> 00:01:25.150
They get all the records, like
what's your frames per second,

00:01:25.150 --> 00:01:27.210
but that only applies to the
machine they've got, right--

00:01:27.210 --> 00:01:28.830
their desktop
machine, their phone,

00:01:28.830 --> 00:01:31.020
whatever they've got on
their desk or in their lab.

00:01:31.020 --> 00:01:33.030
This is about doing it
at like an API level,

00:01:33.030 --> 00:01:34.410
so you can do it
out in the wild.

00:01:34.410 --> 00:01:36.540
So all your users,
you could, in theory,

00:01:36.540 --> 00:01:40.040
measure your transitions, your
animations, your scrolling,

00:01:40.040 --> 00:01:42.299
all those things, and start
to get a lot more data

00:01:42.299 --> 00:01:44.340
about what's going on in
your main thread, what's

00:01:44.340 --> 00:01:45.798
going on in your
compositor thread.

00:01:45.798 --> 00:01:49.000
JAKE: So you could use
this to, say, find out--

00:01:49.000 --> 00:01:50.979
in combination with
the user agent string--

00:01:50.979 --> 00:01:53.520
find out on a particular device
that you've never even tested

00:01:53.520 --> 00:01:55.170
before, maybe you've
never heard of before,

00:01:55.170 --> 00:01:57.030
but you have a major
performance problem there.

00:01:57.030 --> 00:01:59.190
PAUL: You may not even do
it through the UA string.

00:01:59.190 --> 00:02:01.810
Because you can collect these
bits of information and beacon

00:02:01.810 --> 00:02:04.080
them back to analytics
or something like that.

00:02:04.080 --> 00:02:07.140
And it will do all that hard
work of what device it was,

00:02:07.140 --> 00:02:09.350
or where it was in the
world, and all those things.

00:02:09.350 --> 00:02:11.070
And you could just
beacon back events

00:02:11.070 --> 00:02:13.720
and say, well, look, I think
it was 60 frames a second.

00:02:13.720 --> 00:02:15.770
And then you could
slice the data however

00:02:15.770 --> 00:02:17.000
make sense to you, really.

00:02:17.000 --> 00:02:19.630
JAKE: So how can
I tie these events

00:02:19.630 --> 00:02:22.100
back to the elements that
are causing the problem?

00:02:22.100 --> 00:02:23.507
Does it tell me
which element has

00:02:23.507 --> 00:02:25.340
been drawn, which
element's been composited?

00:02:25.340 --> 00:02:25.980
PAUL: Nope.

00:02:25.980 --> 00:02:29.220
So the API is actually
quite low-level, I suppose.

00:02:29.220 --> 00:02:31.240
And it doesn't say
what was going on,

00:02:31.240 --> 00:02:32.656
because the browser
doesn't really

00:02:32.656 --> 00:02:35.126
know ahead of time
what makes sense.

00:02:35.126 --> 00:02:37.750
So it just kind of goes, here's
what the main thread was doing.

00:02:37.750 --> 00:02:39.583
Here's what the compositor
thread was doing.

00:02:39.583 --> 00:02:42.945
And you're responsible for
marking those areas yourself.

00:02:42.945 --> 00:02:45.430
And the spec itself is
still in flux, right?

00:02:45.430 --> 00:02:47.395
So there's a lot of
opportunity for developers

00:02:47.395 --> 00:02:48.770
and other vendors
to kind of come

00:02:48.770 --> 00:02:51.680
back and bike shed it
until we get to something

00:02:51.680 --> 00:02:53.370
we think is great.

00:02:53.370 --> 00:02:55.650
But at this point,
hopefully, there's

00:02:55.650 --> 00:02:58.070
enough base information
in there and in the API

00:02:58.070 --> 00:02:59.704
that people can
start using it, start

00:02:59.704 --> 00:03:00.870
pulling data from the works.

00:03:00.870 --> 00:03:02.785
We've heard so many
times, it's so hard.

00:03:02.785 --> 00:03:04.410
I do the measurement
in my own machine,

00:03:04.410 --> 00:03:05.570
but I don't know
if I've actually

00:03:05.570 --> 00:03:06.960
got runtime problems
out in the wild.

00:03:06.960 --> 00:03:09.251
I know this for network
because I've got webpage tests.

00:03:09.251 --> 00:03:10.630
I've got all these other APIs.

00:03:10.630 --> 00:03:12.270
So this is the first API
we should get for this.

00:03:12.270 --> 00:03:13.240
It's very exciting.

00:03:13.240 --> 00:03:14.320
JAKE: Do you give them
feedback to the stuff?

00:03:14.320 --> 00:03:14.820
Where is it?

00:03:14.820 --> 00:03:16.860
Is it W3, is it--

00:03:16.860 --> 00:03:17.720
PAUL: W3.

00:03:17.720 --> 00:03:23.410
There's a W3C repo/frame-timing
and all the issues on there

00:03:23.410 --> 00:03:27.114
and there's an explainer doc and
the latest draft of the specs.

00:03:27.114 --> 00:03:28.280
So, well worth checking out.

00:03:28.280 --> 00:03:29.580
JAKE: Real world
analytics for rendering.

00:03:29.580 --> 00:03:30.566
PAUL: Woo-hoo!

00:03:30.566 --> 00:03:34.510
[MUSIC PLAYING]

00:03:35.989 --> 00:03:37.900
JAKE: So it's been
conference season.

00:03:37.900 --> 00:03:41.640
So I've been doing
a lot of traveling.

00:03:41.640 --> 00:03:45.910
And so you've got your
suitcase full of clean clothes.

00:03:45.910 --> 00:03:50.110
As the week goes on,
they become soiled

00:03:50.110 --> 00:03:51.310
by your personal wearing.

00:03:51.310 --> 00:03:52.790
PAUL: They become soiled.

00:03:52.790 --> 00:03:54.515
Maybe time to go
and see somebody.

00:03:54.515 --> 00:03:57.700
JAKE: There's just
general personal soilage.

00:03:57.700 --> 00:03:58.420
PAUL: Oh.

00:03:58.420 --> 00:03:59.395
Let's move on.

00:03:59.395 --> 00:04:03.560
JAKE: So we were speaking
about getting undressed.

00:04:03.560 --> 00:04:08.170
You do the flick off
[WHISTLES], catch.

00:04:08.170 --> 00:04:09.336
Where did it go?

00:04:09.336 --> 00:04:10.250
PAUL: Oh.

00:04:10.250 --> 00:04:11.090
Into the suitcase?

00:04:11.090 --> 00:04:12.540
JAKE: Not with
your clean clothes.

00:04:12.540 --> 00:04:13.175
[INTERPOSING VOICES]

00:04:13.175 --> 00:04:13.925
JAKE: You monster.

00:04:13.925 --> 00:04:15.686
PAUL: No, you unpack
them like a grown-up

00:04:15.686 --> 00:04:17.019
and you put them in the drawers.

00:04:17.019 --> 00:04:18.320
JAKE: They're folded--
in the drawers?

00:04:18.320 --> 00:04:19.736
That's where stuff
gets forgotten.

00:04:19.736 --> 00:04:23.010
Your clothes, all nicely folded
already, stay in the suitcase.

00:04:23.010 --> 00:04:25.830
So I have a solution.

00:04:25.830 --> 00:04:28.920
I take with me a bin bag.

00:04:28.920 --> 00:04:31.500
And that is where
the dirty clothes go.

00:04:31.500 --> 00:04:33.020
And this has many
advantages, right?

00:04:33.020 --> 00:04:34.809
Because you put them in there.

00:04:34.809 --> 00:04:36.350
It's a separate
place for them to go.

00:04:36.350 --> 00:04:38.141
Keeps them separate
from the clean clothes,

00:04:38.141 --> 00:04:40.430
which are all nicely folded
in the suitcase still.

00:04:40.430 --> 00:04:43.675
And it also locks
the freshness in.

00:04:43.675 --> 00:04:46.470
But because it's
airtight, which is a plus,

00:04:46.470 --> 00:04:48.940
at the end of the week
it becomes negative.

00:04:48.940 --> 00:04:50.630
Because you need
to pack that away.

00:04:50.630 --> 00:04:52.960
And in order to get it
back in the suitcase,

00:04:52.960 --> 00:04:56.370
you need to lose the excess air.

00:04:56.370 --> 00:04:57.130
PAUL: No.

00:04:57.130 --> 00:04:59.150
JAKE: And you go for
a process that I've

00:04:59.150 --> 00:05:02.560
come to know as stinky bagpipes.

00:05:02.560 --> 00:05:03.490
[MAKES BAGPIPE SOUND]

00:05:03.490 --> 00:05:04.615
PAUL: [MAKES BAGPIPE SOUND]

00:05:04.615 --> 00:05:07.640
JAKE: You get to
play a sad, sad song.

00:05:07.640 --> 00:05:09.005
[MUSIC PLAYING]

00:05:09.005 --> 00:05:09.839
JAKE: OK, Paul.

00:05:09.839 --> 00:05:11.630
I want to talk to you
about font rendering.

00:05:11.630 --> 00:05:13.480
PAUL: Ooh.

