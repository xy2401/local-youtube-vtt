WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.425
[MUSIC  PLAYING]

00:00:07.770 --> 00:00:10.195
PAUL: So it's my turn to get
things off my chest I feel.

00:00:10.195 --> 00:00:13.000
I recently built the
Chrome Dev Summit site.

00:00:13.000 --> 00:00:15.431
JAKE: And a mighty fine job
I thought you did, as well.

00:00:15.431 --> 00:00:16.180
PAUL: Thanks, pal.

00:00:16.180 --> 00:00:17.138
JAKE: That's all right.

00:00:17.138 --> 00:00:19.710
PAUL: But on my journey
through building that,

00:00:19.710 --> 00:00:21.160
I discovered some gotchas.

00:00:21.160 --> 00:00:23.050
First up-- position
fixed-- tell me

00:00:23.050 --> 00:00:26.040
what you think position
fixed actually does?

00:00:26.040 --> 00:00:29.480
JAKE: Takes an element
out of document flow,

00:00:29.480 --> 00:00:32.525
and it positions it
relative to the viewport.

00:00:32.525 --> 00:00:33.150
PAUL: The what?

00:00:33.150 --> 00:00:33.500
JAKE: The viewport.

00:00:33.500 --> 00:00:34.334
PAUL: The viewport.

00:00:34.334 --> 00:00:34.875
The viewport.

00:00:34.875 --> 00:00:35.440
JAKE: Right.

00:00:35.440 --> 00:00:35.940
PAUL: Right.

00:00:35.940 --> 00:00:37.510
JAKE: Was I right?

00:00:37.510 --> 00:00:41.300
PAUL: When you apply a position
fixed to a child of something

00:00:41.300 --> 00:00:44.490
that has a
transform-- so you got

00:00:44.490 --> 00:00:46.910
another one with a transform--
and another element inside,

00:00:46.910 --> 00:00:48.785
which is position fixed.

00:00:48.785 --> 00:00:52.210
The position fixed
behavior changes.

00:00:52.210 --> 00:00:55.590
The transformed element becomes
a new initial containing block.

00:00:55.590 --> 00:00:56.155
JAKE: Whoa.

00:00:56.155 --> 00:00:56.655
What?

00:00:56.655 --> 00:00:59.400
PAUL: Yeah, it's like a new
viewport inside the viewport.

00:00:59.400 --> 00:01:00.825
So the way I did
is it, because I

00:01:00.825 --> 00:01:02.450
had these cards that
were transforming,

00:01:02.450 --> 00:01:04.908
at the end of the transition,
I'd scale all the transforms,

00:01:04.908 --> 00:01:08.200
so that I didn't see
weirdness on the content-- so

00:01:08.200 --> 00:01:09.140
frustrating.

00:01:09.140 --> 00:01:11.035
Gotcha number two-- pop state.

00:01:11.035 --> 00:01:13.920
JAKE: Oh, yeah, I've
done pop state before.

00:01:13.920 --> 00:01:14.420
PAUL: Yeah.

00:01:14.420 --> 00:01:17.170
Did you know that it
restores scroll positions?

00:01:17.170 --> 00:01:18.451
JAKE: No, actually I didn't.

00:01:18.451 --> 00:01:18.950
PAUL: Right.

00:01:18.950 --> 00:01:21.120
So this is bonkers to me.

00:01:21.120 --> 00:01:23.374
You're doing something
with the history API,

00:01:23.374 --> 00:01:25.540
you're pushing states on,
you're popping states off,

00:01:25.540 --> 00:01:28.010
because you're handling
app state yourself.

00:01:28.010 --> 00:01:30.330
But what the browsers
all do is they go,

00:01:30.330 --> 00:01:31.810
I know what you want to do.

00:01:31.810 --> 00:01:34.400
I know you want to restore
the scroll position

00:01:34.400 --> 00:01:36.350
at the point at which
you did push state.

00:01:36.350 --> 00:01:38.430
Which is, if you're doing
something async, right?

00:01:38.430 --> 00:01:38.900
If you're doing something--

00:01:38.900 --> 00:01:40.040
JAKE: Which is what I've
always done in the past.

00:01:40.040 --> 00:01:40.970
PAUL: --yeah, then
all of a sudden,

00:01:40.970 --> 00:01:42.820
your page would
just snap down to

00:01:42.820 --> 00:01:44.870
its previous scroll position.

00:01:44.870 --> 00:01:46.735
I thought I can fix this.

00:01:46.735 --> 00:01:49.110
I'll work around
it-- gun fingers.

00:01:49.110 --> 00:01:50.650
JAKE: [CLICKING SOUND] pow pow.

00:01:50.650 --> 00:01:53.370
PAUL: What I'll do is I'll
have a single listener

00:01:53.370 --> 00:01:56.910
for scroll position, and when it
switches, after the pop state,

00:01:56.910 --> 00:01:58.000
it'll do one scroll.

00:01:58.000 --> 00:01:58.800
I'll reverse it.

00:01:58.800 --> 00:01:59.300
[? JAKE: P--Pull ?] me back.

00:01:59.300 --> 00:02:02.020
PAUL: And they'll be like,
haha, never happened-- shazam.

00:02:02.020 --> 00:02:02.670
No.

00:02:02.670 --> 00:02:05.540
Because Chrome does
that-- it does the scroll

00:02:05.540 --> 00:02:06.590
after the pop state.

00:02:06.590 --> 00:02:08.229
Firefox does it before.

00:02:08.229 --> 00:02:11.045
So you actually don't know
where you scrolled from.

00:02:11.045 --> 00:02:13.170
You just know that you're
pretty certain you're not

00:02:13.170 --> 00:02:14.800
in the scroll position
you were before.

00:02:14.800 --> 00:02:17.704
Talking of scrolling--
last one-- body.

00:02:17.704 --> 00:02:19.870
Did you know you can't stop
the body from scrolling?

00:02:19.870 --> 00:02:21.760
JAKE: That's the name of
my next album, actually.

00:02:21.760 --> 00:02:22.468
PAUL: Yeah, Jake.

00:02:22.468 --> 00:02:23.500
That's great.

00:02:23.500 --> 00:02:24.530
JAKE: Mousewheel events?

00:02:24.530 --> 00:02:26.863
PAUL: You could, but that's
not going to work on mobile.

00:02:26.863 --> 00:02:29.720
JAKE: On mobile-- which
you have touch events.

00:02:29.720 --> 00:02:30.480
PAUL: No.

00:02:30.480 --> 00:02:30.980
No.

00:02:30.980 --> 00:02:31.520
JAKE: Because then
you're going to have

00:02:31.520 --> 00:02:32.894
to re-implement
all of scrolling.

00:02:32.894 --> 00:02:34.530
PAUL: All the fling
physics-y stuff.

00:02:34.530 --> 00:02:36.950
JAKE: And if you do that,
you've lost performance,

00:02:36.950 --> 00:02:38.644
lost everything, your life.

00:02:38.644 --> 00:02:39.310
PAUL: Forget it.

00:02:39.310 --> 00:02:39.840
Not doing that.

00:02:39.840 --> 00:02:40.423
Don't like it.

00:02:40.423 --> 00:02:41.201
Don't want it.

00:02:41.201 --> 00:02:43.450
Because what happens, again,
these cards, they expand.

00:02:43.450 --> 00:02:45.033
They've got scrollable
content inside.

00:02:45.033 --> 00:02:47.730
When they reach the bottom
of their scrolling content,

00:02:47.730 --> 00:02:49.340
the body goes, I will deal this.

00:02:49.340 --> 00:02:50.740
I'll start scrolling now.

00:02:50.740 --> 00:02:53.430
Well, there is an escape hatch,
an ability for a developer

00:02:53.430 --> 00:02:55.020
to go, you know what?

00:02:55.020 --> 00:02:57.507
I want to take control of this.

00:02:57.507 --> 00:02:59.090
I know what's supposed
to happen here.

00:02:59.090 --> 00:03:00.160
I will deal with it.

00:03:00.160 --> 00:03:01.610
So extensible web says, nah.

00:03:01.610 --> 00:03:03.261
JAKE: Nah.

00:03:03.261 --> 00:03:03.760
PAUL: Right?

00:03:03.760 --> 00:03:05.240
Exactly.

00:03:05.240 --> 00:03:07.560
Good news, though.

00:03:07.560 --> 00:03:09.780
In spec land, in
discussion world,

00:03:09.780 --> 00:03:12.610
there is before scroll,
which is an event,

00:03:12.610 --> 00:03:16.320
and its corresponding CSS
properties around what

00:03:16.320 --> 00:03:18.570
scrolling should be blocked on.

00:03:18.570 --> 00:03:22.010
But the default behavior
still remains as it is today.

00:03:22.010 --> 00:03:25.100
It gives developers more options
to say, I know what I'm doing.

00:03:25.100 --> 00:03:26.979
Please let me put the
car into my manual--

00:03:26.979 --> 00:03:27.520
JAKE: Manual.

00:03:27.520 --> 00:03:31.020
PAUL: --or stick shift, as it
were, and we'll go from there.

00:03:31.020 --> 00:03:34.330
So from an extensible
web point of view, yay.

00:03:34.330 --> 00:03:34.970
JAKE: Yay.

00:03:34.970 --> 00:03:37.400
[MUSIC PLAYING]

00:03:45.662 --> 00:03:47.937
JAKE: [LAUGHING]

