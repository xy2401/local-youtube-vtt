WEBVTT
Kind: captions
Language: en

00:00:00.050 --> 00:00:01.020
JAKE ARCHIBALD: And we're
seeing a lot of frameworks

00:00:01.020 --> 00:00:02.650
now that they are
moving to a model

00:00:02.650 --> 00:00:05.370
where they could do
server rendering as well.

00:00:05.370 --> 00:00:08.029
Or what's the term for it
that makes data [INAUDIBLE]?

00:00:08.029 --> 00:00:08.780
PAUL LEWIS: Oh,
isomorphic JavaScript.

00:00:08.780 --> 00:00:09.980
JAKE ARCHIBALD: Is-- isomorsic.

00:00:09.980 --> 00:00:10.110
Iso--

00:00:10.110 --> 00:00:11.150
PAUL LEWIS: Isomorsic?

00:00:11.150 --> 00:00:11.870
JAKE ARCHIBALD: Is-- is-- is--

00:00:11.870 --> 00:00:12.710
PAUL LEWIS: [INAUDIBLE].

00:00:12.710 --> 00:00:15.050
JAKE ARCHIBALD: [STUTTERING]
Uh, a few too many of these.

00:00:15.050 --> 00:00:16.110
PAUL LEWIS:
[CHUCKLES] Isomorphic.

00:00:16.110 --> 00:00:17.380
JAKE ARCHIBALD:
Isomorsic JavaScript.

00:00:17.380 --> 00:00:18.421
PAUL LEWIS: Come on, now.

00:00:18.421 --> 00:00:19.151
Come on.

00:00:19.151 --> 00:00:20.400
JAKE ARCHIBALD: I can do this.

00:00:20.400 --> 00:00:21.741
Isomorphic.

00:00:21.741 --> 00:00:22.240
Yay.

00:00:22.240 --> 00:00:22.690
PAUL LEWIS: Yeah.

00:00:22.690 --> 00:00:23.520
JAKE ARCHIBALD: So
isomorsic JavaScript--

00:00:23.520 --> 00:00:24.860
I can barely still say it.

00:00:24.860 --> 00:00:25.564
So isomorsic--

00:00:25.564 --> 00:00:26.730
PAUL LEWIS: Oh, come on now.

00:00:26.730 --> 00:00:27.542
Seriously.

00:00:27.542 --> 00:00:28.500
JAKE ARCHIBALD: OK, OK.

00:00:28.500 --> 00:00:29.375
PAUL LEWIS: One more.

00:00:29.375 --> 00:00:31.440
JAKE ARCHIBALD: Here we go.

00:00:31.440 --> 00:00:31.940
Isomor--

00:00:31.940 --> 00:00:34.210
[MUSIC PLAYING]

00:00:39.110 --> 00:00:41.050
I bought a PS4 recently.

00:00:41.050 --> 00:00:42.250
I've been going on about it.

00:00:42.250 --> 00:00:44.690
And I was looking at some of the
literature that comes with it.

00:00:44.690 --> 00:00:46.398
One of the big things
that they advertise

00:00:46.398 --> 00:00:49.690
is that, hey, did you
know that new in the PS4

00:00:49.690 --> 00:00:52.460
is you can, while
you're downloading

00:00:52.460 --> 00:00:55.540
level one of the game--
well, as soon as level one is

00:00:55.540 --> 00:00:57.040
downloaded, you can
start playing it

00:00:57.040 --> 00:01:00.470
even though levels 1 to
99 are still downloading.

00:01:00.470 --> 00:01:01.282
PAUL LEWIS: Wow.

00:01:01.282 --> 00:01:02.510
JAKE ARCHIBALD: And that's
what I was thinking of.

00:01:02.510 --> 00:01:03.870
Wow, this is the PS4.

00:01:03.870 --> 00:01:05.684
This is the absolute
height of technology.

00:01:05.684 --> 00:01:08.500
But the world's been able
to do this for 20 years.

00:01:08.500 --> 00:01:11.460
PAUL LEWIS: I think there's
a lot of skill, though,

00:01:11.460 --> 00:01:15.990
in dividing up your
web app into things

00:01:15.990 --> 00:01:18.310
that need to be there
in the initial burst,

00:01:18.310 --> 00:01:20.140
and then things like
the level one stuff,

00:01:20.140 --> 00:01:21.435
and level 2 through 99.

00:01:21.435 --> 00:01:24.620
I still think that's
much too difficult for us

00:01:24.620 --> 00:01:25.690
to get our heads around.

00:01:25.690 --> 00:01:27.190
It takes a lot of planning.

00:01:27.190 --> 00:01:29.947
And it's OK if it's just sort of
a one-person thing, where they,

00:01:29.947 --> 00:01:31.780
like, I do the design,
I do the development,

00:01:31.780 --> 00:01:33.484
I do everything myself.

00:01:33.484 --> 00:01:35.150
But if you're not
that person and you've

00:01:35.150 --> 00:01:37.810
got a big team,
having everybody think

00:01:37.810 --> 00:01:41.130
about what is level
one, that's really hard.

00:01:41.130 --> 00:01:43.510
Because you've got to understand
exactly how the web gets

00:01:43.510 --> 00:01:44.570
built before you can get there.

00:01:44.570 --> 00:01:46.520
JAKE ARCHIBALD: But
the benefits are huge.

00:01:46.520 --> 00:01:48.940
On this blog post I did about
progressive enhancement,

00:01:48.940 --> 00:01:53.282
someone, an author of one of
these big web frameworks--

00:01:53.282 --> 00:01:54.740
PAUL LEWIS: Who
shall not be named.

00:01:54.740 --> 00:01:56.198
JAKE ARCHIBALD: We
won't name them.

00:01:56.198 --> 00:01:59.040
But they bombed the comments
with like, well, this

00:01:59.040 --> 00:02:00.180
is nonsense.

00:02:00.180 --> 00:02:01.997
My framework is excellent.

00:02:01.997 --> 00:02:04.330
I looked at the documentation
for their framework, which

00:02:04.330 --> 00:02:06.890
uses the framework as
an example of the--

00:02:06.890 --> 00:02:07.892
PAUL LEWIS: [INAUDIBLE].

00:02:07.892 --> 00:02:10.570
JAKE ARCHIBALD: And
on 3G, their time

00:02:10.570 --> 00:02:15.230
from request to some content
on the screen is seven seconds.

00:02:15.230 --> 00:02:16.430
PAUL LEWIS: Ooh.

00:02:16.430 --> 00:02:19.440
JAKE ARCHIBALD: But even with
a full cache on a fast as you

00:02:19.440 --> 00:02:21.550
like connection, it's
still three seconds,

00:02:21.550 --> 00:02:23.660
because they're CPU-bound.

00:02:23.660 --> 00:02:24.390
I know, right?

00:02:24.390 --> 00:02:25.990
It's just like--
and as soon as I

00:02:25.990 --> 00:02:28.980
saw that, I was just like,
win this argument, then.

00:02:28.980 --> 00:02:31.519
I can do this with data.

00:02:31.519 --> 00:02:32.810
And it was just normal content.

00:02:32.810 --> 00:02:34.770
I mean, there was a
few JavaScript things,

00:02:34.770 --> 00:02:37.450
like open this, collapse that.

00:02:37.450 --> 00:02:39.197
You could do that
all after the fact.

00:02:39.197 --> 00:02:40.780
PAUL LEWIS: So I
guess this comes back

00:02:40.780 --> 00:02:43.321
to the whole-- like, Twitter
did this years ago, didn't they,

00:02:43.321 --> 00:02:46.967
where they went, hey, we've
shifted to client side

00:02:46.967 --> 00:02:48.050
and everything is awesome.

00:02:48.050 --> 00:02:50.710
And then they went,
actually, doing

00:02:50.710 --> 00:02:54.780
what the web was doing, which is
serving some HTML over the wire

00:02:54.780 --> 00:02:57.569
in the initial request, that's
where the cool stuffs are.

00:02:57.569 --> 00:02:59.860
JAKE ARCHIBALD: Yes, this is
my progressive enhancement

00:02:59.860 --> 00:03:01.270
rant, clearly, right?

00:03:01.270 --> 00:03:02.530
But what was it?

00:03:02.530 --> 00:03:04.759
It was like a six times
speedup they saw so that--

00:03:04.759 --> 00:03:05.800
PAUL LEWIS: I don't know.

00:03:05.800 --> 00:03:06.883
I don't actually remember.

00:03:06.883 --> 00:03:09.117
I know they did say,
we've gone and done it

00:03:09.117 --> 00:03:10.200
because performance, yeah.

00:03:10.200 --> 00:03:12.400
JAKE ARCHIBALD: But then,
to be fair to frameworks,

00:03:12.400 --> 00:03:14.270
like, I do like
how they're stating

00:03:14.270 --> 00:03:16.700
to go with this
server-rendering approach,

00:03:16.700 --> 00:03:18.070
what they call isomorphic.

00:03:18.070 --> 00:03:18.380
PAUL LEWIS: Yes.

00:03:18.380 --> 00:03:19.020
You got it right.

00:03:19.020 --> 00:03:19.920
JAKE ARCHIBALD: I got
it right this time.

00:03:19.920 --> 00:03:21.590
PAUL LEWIS: Yeah, every time you
say it, it's like [MUMBLING].

00:03:21.590 --> 00:03:24.179
JAKE ARCHIBALD: [MUMBLING]
But that's-- this feels like

00:03:24.179 --> 00:03:24.970
the right approach.

00:03:24.970 --> 00:03:25.813
I feel like it's--

00:03:25.813 --> 00:03:26.700
PAUL LEWIS: Really?

00:03:26.700 --> 00:03:29.380
JAKE ARCHIBALD: It's a
Band-Aid over the solution,

00:03:29.380 --> 00:03:31.441
over the problem of
slowing everything down.

00:03:31.441 --> 00:03:32.190
PAUL LEWIS: Right.

00:03:32.190 --> 00:03:33.860
They made this problem, right?

00:03:33.860 --> 00:03:37.200
This whole thing was
avoidable if you just

00:03:37.200 --> 00:03:38.970
did what we did, right?

00:03:38.970 --> 00:03:40.120
JAKE ARCHIBALD: That's it.

00:03:40.120 --> 00:03:44.170
By leveraging good caching,
first render stuff, and service

00:03:44.170 --> 00:03:47.270
worker, your performance
problems are solved.

00:03:47.270 --> 00:03:50.620
[MUSIC PLAYING]

