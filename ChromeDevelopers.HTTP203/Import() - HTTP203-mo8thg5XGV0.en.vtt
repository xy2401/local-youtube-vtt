WEBVTT
Kind: captions
Language: en

00:00:00.260 --> 00:00:02.220
SPEAKER 1: We'll talk
about dynamic imports.

00:00:02.220 --> 00:00:02.803
SPEAKER 2: Oh.

00:00:02.803 --> 00:00:05.430
[MUSIC PLAYING]

00:00:09.430 --> 00:00:10.190
SPEAKER 1: OK.

00:00:10.190 --> 00:00:12.240
We'll recap.

00:00:12.240 --> 00:00:15.570
We have import as an--
there's an import statement

00:00:15.570 --> 00:00:20.230
thing with parentheses at
the end that lets you async

00:00:20.230 --> 00:00:22.544
import a module.

00:00:22.544 --> 00:00:23.460
Does that makes sense?

00:00:23.460 --> 00:00:24.450
Have I got that right?

00:00:24.450 --> 00:00:24.690
SPEAKER 2: Yes.

00:00:24.690 --> 00:00:25.640
You have modules.

00:00:25.640 --> 00:00:30.120
And you can now not only
just declare statically

00:00:30.120 --> 00:00:32.700
what you import but use a--
somewhat like a function

00:00:32.700 --> 00:00:34.740
call to put it in the
middle of your code,

00:00:34.740 --> 00:00:40.020
and be like, if this, and, for
that loop import these things.

00:00:40.020 --> 00:00:43.980
SPEAKER 1: Now, I noticed a
little bit in Mattias' article

00:00:43.980 --> 00:00:47.190
about this, where he has
a note saying, By the way,

00:00:47.190 --> 00:00:48.879
import is not a function.

00:00:48.879 --> 00:00:49.920
SPEAKER 2: Duh, duh, duh.

00:00:49.920 --> 00:00:51.295
SPEAKER 1: And I
thought-- right.

00:00:51.295 --> 00:00:55.470
And I was looking at this,
and it was like, I-M-P-O-R-T,

00:00:55.470 --> 00:01:00.830
open parenthesis, URL, or module
descriptor, close parenthesis.

00:01:00.830 --> 00:01:01.830
That's a function, mate.

00:01:01.830 --> 00:01:02.160
SPEAKER 2: That's the semicolon.

00:01:02.160 --> 00:01:03.326
SPEAKER 1: You got it wrong.

00:01:03.326 --> 00:01:04.245
This is a function.

00:01:04.245 --> 00:01:05.703
Oh, is that a
semicolon at the end?

00:01:05.703 --> 00:01:06.510
Yes, of course.

00:01:06.510 --> 00:01:07.394
Or a dot then, or a--

00:01:07.394 --> 00:01:09.060
SPEAKER 2: We are
civilized people here.

00:01:09.060 --> 00:01:09.684
SPEAKER 1: Yes.

00:01:09.684 --> 00:01:11.050
I am a fan of the semicolon.

00:01:11.050 --> 00:01:13.512
That's something I
still agree with.

00:01:13.512 --> 00:01:14.910
SPEAKER 2: Man, not a function.

00:01:14.910 --> 00:01:16.399
So what is it then?

00:01:16.399 --> 00:01:18.690
Because it is-- yeah, like
you said, it looks like one.

00:01:18.690 --> 00:01:19.980
SPEAKER 1: Yeah.

00:01:19.980 --> 00:01:22.757
It's like a keyword
syntax-ey thing.

00:01:22.757 --> 00:01:23.340
SPEAKER 2: Oh.

00:01:23.340 --> 00:01:25.110
SPEAKER 1: I'm sure
it's one of those.

00:01:25.110 --> 00:01:28.556
One of those is right, and one
of those is wrong, once again.

00:01:28.556 --> 00:01:30.430
SPEAKER 2: We had
something like this before.

00:01:30.430 --> 00:01:32.160
There's another
thing in JavaScript

00:01:32.160 --> 00:01:34.700
that looks like a function
but it's not a function.

00:01:34.700 --> 00:01:36.620
SPEAKER 1: Yes, Super.

00:01:36.620 --> 00:01:37.912
SPEAKER 2: Yes, Super.

00:01:37.912 --> 00:01:38.620
SPEAKER 1: Super.

00:01:38.620 --> 00:01:39.328
SPEAKER 2: Super.

00:01:39.328 --> 00:01:40.350
SPEAKER 1: That is--

00:01:40.350 --> 00:01:45.851
and they're both not real
functions for the same reason.

00:01:45.851 --> 00:01:46.600
And it's because--

00:01:46.600 --> 00:01:47.740
SPEAKER 2: What is
that reason, Jake?

00:01:47.740 --> 00:01:48.448
SPEAKER 1: Right.

00:01:48.448 --> 00:01:50.250
Well, when you
call Import, you're

00:01:50.250 --> 00:01:54.390
giving it a module
descriptor, which is either--

00:01:54.390 --> 00:01:57.390
right now it has to be a
relative URL in a particular

00:01:57.390 --> 00:02:01.054
format, like ./ or whatever.

00:02:01.054 --> 00:02:02.720
SPEAKER 2: Sounds
doable for a function.

00:02:02.720 --> 00:02:05.860
SPEAKER 1: What is
that relative to?

00:02:05.860 --> 00:02:06.959
SPEAKER 2: Your face?

00:02:06.959 --> 00:02:09.255
[LAUGHTER]

00:02:09.255 --> 00:02:10.130
SPEAKER 1: Incorrect.

00:02:10.130 --> 00:02:14.377
It's actually relative
to the script you're in.

00:02:14.377 --> 00:02:14.960
SPEAKER 2: OK.

00:02:14.960 --> 00:02:16.001
I mean, that makes sense.

00:02:16.001 --> 00:02:18.007
That's how script tags
work as well, right?

00:02:18.007 --> 00:02:18.590
SPEAKER 1: No.

00:02:18.590 --> 00:02:22.430
No, if you use URLs
in normal scripts,

00:02:22.430 --> 00:02:25.490
the URL is relative to the
page, to the client, which would

00:02:25.490 --> 00:02:26.857
be like work or something.

00:02:26.857 --> 00:02:27.440
SPEAKER 2: OK.

00:02:27.440 --> 00:02:31.880
SPEAKER 1: So you end it with
this bit of relative-ness which

00:02:31.880 --> 00:02:33.110
is specific to the script.

00:02:33.110 --> 00:02:33.590
SPEAKER 2: Relativity?

00:02:33.590 --> 00:02:35.030
SPEAKER 1: Bit of
relativity would

00:02:35.030 --> 00:02:37.200
be the correct
English word to use.

00:02:37.200 --> 00:02:42.860
Thank you, foreign person,
for telling me how to speak.

00:02:42.860 --> 00:02:45.670
So yeah, it is relative
to the script file itself.

00:02:45.670 --> 00:02:46.310
SPEAKER 2: OK.

00:02:46.310 --> 00:02:47.480
SPEAKER 1: So that's a
property that isn't--

00:02:47.480 --> 00:02:48.780
SPEAKER 2: That
makes a lot of sense.

00:02:48.780 --> 00:02:49.150
SPEAKER 1: Well,

00:02:49.150 --> 00:02:50.180
SPEAKER 2: CSS behaves
the same way, right?

00:02:50.180 --> 00:02:52.780
If you have a relative
import, like URL favi--

00:02:52.780 --> 00:02:53.420
favicons--

00:02:53.420 --> 00:02:53.650
SPEAKER 1: Yes.

00:02:53.650 --> 00:02:55.483
SPEAKER 2: --or something
like that, they're

00:02:55.483 --> 00:02:57.992
relative to the CSS file
that it's being used in.

00:02:57.992 --> 00:02:58.700
SPEAKER 1: Right.

00:02:58.700 --> 00:02:59.540
Yes, exactly.

00:02:59.540 --> 00:03:01.830
Yeah, it's very similar to that.

00:03:01.830 --> 00:03:04.490
But in JavaScript, we have
this concept of a realm.

00:03:04.490 --> 00:03:05.840
But you have multiple--

00:03:05.840 --> 00:03:06.510
SPEAKER 2: I love that word.

00:03:06.510 --> 00:03:07.926
SPEAKER 1: And
that's sort of kind

00:03:07.926 --> 00:03:12.457
of tied to the global
and, like, your page.

00:03:12.457 --> 00:03:14.540
SPEAKER 2: It's almost
your JavaScript environment

00:03:14.540 --> 00:03:15.476
that you execute in--

00:03:15.476 --> 00:03:16.100
SPEAKER 1: Yes.

00:03:16.100 --> 00:03:17.766
SPEAKER 2: --and you
can load things in.

00:03:17.766 --> 00:03:20.510
And you know, the files come
from all the different paths

00:03:20.510 --> 00:03:23.360
that eventually end up in
this one thing, the realm.

00:03:23.360 --> 00:03:24.620
SPEAKER 1: The one realm.

00:03:24.620 --> 00:03:29.027
So this relative URL thing is
not a property of the realm.

00:03:29.027 --> 00:03:31.360
SPEAKER 2: How could it be
if you were importing modules

00:03:31.360 --> 00:03:32.380
from all over the place?

00:03:32.380 --> 00:03:33.280
SPEAKER 1: Exactly.

00:03:33.280 --> 00:03:35.500
And this is why it
doesn't make sense,

00:03:35.500 --> 00:03:37.821
because that call to Import--

00:03:37.821 --> 00:03:39.570
like, the question
would be is that, well,

00:03:39.570 --> 00:03:42.250
what if you assigned that
import to another name

00:03:42.250 --> 00:03:44.200
and passed that
to another script?

00:03:44.200 --> 00:03:46.840
Like, you've passed
a function around.

00:03:46.840 --> 00:03:49.520
But now it operates differently.

00:03:49.520 --> 00:03:51.056
And the same goes with Super.

00:03:51.056 --> 00:03:52.430
Like, when you
call Super, you're

00:03:52.430 --> 00:03:55.184
referring to, like, that class.

00:03:55.184 --> 00:03:55.850
SPEAKER 2: Yeah.

00:03:55.850 --> 00:03:57.045
The base class.

00:03:57.045 --> 00:03:59.170
SPEAKER 1: So they kind of
had this decision either

00:03:59.170 --> 00:04:00.770
it needs to be part
of the language

00:04:00.770 --> 00:04:03.494
or they do something
very weird with analyzing

00:04:03.494 --> 00:04:05.910
stack traces to see which kind
of script it's coming from.

00:04:05.910 --> 00:04:07.534
SPEAKER 2: Oh, that
doesn't sound good.

00:04:07.534 --> 00:04:09.662
SPEAKER 1: And that is
why it's not a function.

00:04:09.662 --> 00:04:11.370
So you can't assign
it to something else.

00:04:11.370 --> 00:04:12.930
It's not type of function.

00:04:12.930 --> 00:04:14.360
You can't do .call.

00:04:14.360 --> 00:04:18.099
You can't assign it to
something else, uh, yeah.

00:04:18.099 --> 00:04:18.890
SPEAKER 3: Slate 3.

00:04:18.890 --> 00:04:19.750
Take 1.

00:04:19.750 --> 00:04:23.330
SPEAKER 2: I think you'll
find it says scene, and slate.

00:04:23.330 --> 00:04:26.162
[LAUGHTER]

00:04:27.578 --> 00:04:29.129
SPEAKER 1: [INAUDIBLE] is on.

