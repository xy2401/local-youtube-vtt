WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:00.645
JAKE ARCHIBALD: Two minutes.

00:00:00.645 --> 00:00:02.760
SURMA: Two minutes,
one topic that you have

00:00:02.760 --> 00:00:04.257
to explain to me what is it.

00:00:04.257 --> 00:00:05.965
JAKE ARCHIBALD: It is
JavaScript Symbols.

00:00:12.288 --> 00:00:13.410
SURMA: Go.

00:00:13.410 --> 00:00:15.340
JAKE ARCHIBALD: So
JavaScript Symbols.

00:00:15.340 --> 00:00:16.090
SURMA: They exist.

00:00:16.090 --> 00:00:17.030
I'm aware.

00:00:17.030 --> 00:00:21.296
JAKE ARCHIBALD: So this is a
kind of a new primitive type.

00:00:21.296 --> 00:00:22.347
SURMA: Yes, it is.

00:00:22.347 --> 00:00:24.180
JAKE ARCHIBALD: Because
they're not objects.

00:00:24.180 --> 00:00:25.486
Right?

00:00:25.486 --> 00:00:26.860
And it's a new
thing where if you

00:00:26.860 --> 00:00:29.800
do type of one of these
things it comes up with symbol

00:00:29.800 --> 00:00:32.224
rather than object
because it's a primitive.

00:00:32.224 --> 00:00:32.772
SURMA: Why?

00:00:32.772 --> 00:00:33.730
What do I use them for?

00:00:33.730 --> 00:00:35.896
JAKE ARCHIBALD: Well, so
it's a way to-- because you

00:00:35.896 --> 00:00:37.150
can use them as object keys.

00:00:37.150 --> 00:00:39.400
So you can create a symbol
and all you do is just--

00:00:39.400 --> 00:00:42.250
SURMA: So instead of going,
object dot my property,

00:00:42.250 --> 00:00:43.159
I go object--

00:00:43.159 --> 00:00:45.700
JAKE ARCHIBALD: Open brackets,
you can put a symbol in there,

00:00:45.700 --> 00:00:47.750
and you can assign stuff to it.

00:00:47.750 --> 00:00:49.250
And it's kind of hidden.

00:00:49.250 --> 00:00:51.970
It's not super hidden,
but it's kind of hidden.

00:00:51.970 --> 00:00:53.090
It's not innumerable.

00:00:53.090 --> 00:00:54.680
SURMA: Oh, it's not innumerable.

00:00:54.680 --> 00:00:55.680
JAKE ARCHIBALD: Exactly.

00:00:55.680 --> 00:01:00.130
SURMA: So if I go
like object dot keys

00:01:00.130 --> 00:01:02.257
or whatever the function
is, it won't be listed?

00:01:02.257 --> 00:01:03.090
JAKE ARCHIBALD: Yep.

00:01:03.090 --> 00:01:07.259
And it means-- so we've got
things like to JSON, right?

00:01:07.259 --> 00:01:09.550
And this is sort of a standard
function where it will--

00:01:09.550 --> 00:01:11.680
that's how it will convert
your object to JSON.

00:01:11.680 --> 00:01:13.630
And it's a pain because
it's that function

00:01:13.630 --> 00:01:15.130
can clash with other stuff.

00:01:15.130 --> 00:01:16.340
It can happen.

00:01:16.340 --> 00:01:17.800
So the idea is
that there'll just

00:01:17.800 --> 00:01:19.692
be this unique symbol
created and that's

00:01:19.692 --> 00:01:21.400
where you would expose
that sort of stuff

00:01:21.400 --> 00:01:22.450
if we did it again now.

00:01:22.450 --> 00:01:24.550
SURMA: Oh, so
basically we are using

00:01:24.550 --> 00:01:28.067
that to allow you to hook it
to things on the platform.

00:01:28.067 --> 00:01:28.900
JAKE ARCHIBALD: Yes.

00:01:28.900 --> 00:01:31.060
And that's how iterators work.

00:01:31.060 --> 00:01:31.840
SURMA: Right.

00:01:31.840 --> 00:01:33.570
I actually saw that.

00:01:33.570 --> 00:01:34.880
I never knew what it was.

00:01:34.880 --> 00:01:37.930
So it can make your own
object or even your own class,

00:01:37.930 --> 00:01:40.325
I guess, iterable
by using symbols.

00:01:40.325 --> 00:01:41.700
JAKE ARCHIBALD:
By using symbols.

00:01:41.700 --> 00:01:43.810
And they're the most unique
thing on the platform.

00:01:43.810 --> 00:01:46.000
Because if you
call symbol twice,

00:01:46.000 --> 00:01:48.101
they're both unique
across anything

00:01:48.101 --> 00:01:49.600
even if you give
them the same name.

00:01:49.600 --> 00:01:50.410
SURMA: So every
symbol, you can never

00:01:50.410 --> 00:01:52.240
recreate the same
symbol unless you

00:01:52.240 --> 00:01:54.100
have the exact reference to it.

00:01:54.100 --> 00:01:56.560
JAKE ARCHIBALD: And except
if you do symbol dot four,

00:01:56.560 --> 00:01:57.520
and you give it a name.

00:01:57.520 --> 00:01:59.320
Then now that is a
symbol for that name.

00:01:59.320 --> 00:02:01.570
And that is the least
unique thing in JavaScript

00:02:01.570 --> 00:02:05.390
because that is the same
value across I-frames as well.

00:02:05.390 --> 00:02:07.960
And that's how iterators
work across I-frames too.

00:02:07.960 --> 00:02:09.299
SURMA: Interesting.

00:02:09.299 --> 00:02:11.090
I wonder if I wrote a
blog post about this.

00:02:11.090 --> 00:02:14.322
JAKE ARCHIBALD:
And that's Symbols.

00:02:14.322 --> 00:02:17.825
SURMA: You can't dance along
to this song as well as the--

00:02:17.825 --> 00:02:19.740
we need more rhythm.

00:02:19.740 --> 00:02:22.355
I mean, we can do the robot.

00:02:22.355 --> 00:02:23.730
JAKE ARCHIBALD:
I feel like we've

00:02:23.730 --> 00:02:26.030
dropped the ball
on trying to think

00:02:26.030 --> 00:02:28.610
of the names of
things that are going

00:02:28.610 --> 00:02:31.010
to draw people to these videos.

00:02:31.010 --> 00:02:33.660
So why don't we just
call it symbol whack.

00:02:33.660 --> 00:02:37.740
JavaScript Symbol Whack.

00:02:37.740 --> 00:02:39.409
That's what that
section was about.

00:02:39.409 --> 00:02:40.700
We'll edit that into the video.

00:02:40.700 --> 00:02:42.430
That's fine.

