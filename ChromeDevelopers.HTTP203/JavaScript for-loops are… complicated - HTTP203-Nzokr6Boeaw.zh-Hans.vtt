WEBVTT
Kind: captions
Language: zh-Hans

00:00:00.210 --> 00:00:14.219
所以我只想了解一下

00:00:02.909 --> 00:00:17.160
很多视频我们从头开始

00:00:14.219 --> 00:00:21.060
我们谈论HTTP 2或3上的代码的时间

00:00:17.160 --> 00:00:23.640
我们看着摇晃的管道

00:00:21.060 --> 00:00:25.710
操作员的绑定操作确实像

00:00:23.640 --> 00:00:28.349
未来面临的东西，但我认为这

00:00:25.710 --> 00:00:30.539
时间，我们去看看

00:00:28.349 --> 00:00:32.070
那里已经存在了很长时间

00:00:30.539 --> 00:00:35.520
时间以及功能如何

00:00:32.070 --> 00:00:37.890
随着时间的发展，现在

00:00:35.520 --> 00:00:40.770
循环良好，您仍然擅长

00:00:37.890 --> 00:00:43.710
对我来说是极好的一点

00:00:40.770 --> 00:00:47.190
所以我想谈谈如何循环

00:00:43.710 --> 00:00:49.200
实际在引擎盖下工作

00:00:47.190 --> 00:00:52.500
说真的，好像有一个大

00:00:49.200 --> 00:00:57.090
扭曲这个故事哇，这是怎么回事

00:00:52.500 --> 00:00:58.260
如此运行，这是正确的，是的，这是

00:00:57.090 --> 00:01:00.239
就像之前拉赫佩一样三

00:00:58.260 --> 00:01:04.860
初始化程序中的指令

00:01:00.239 --> 00:01:07.170
条件和增量器是的

00:01:04.860 --> 00:01:09.150
他们只是表达，所以表达

00:01:07.170 --> 00:01:11.310
所以这一个运行，这个运行， 

00:01:09.150 --> 00:01:13.740
然后身体跑，然后这一个

00:01:11.310 --> 00:01:15.060
运行，然后这个运行，然后

00:01:13.740 --> 00:01:16.380
身体跑，然后这个跑

00:01:15.060 --> 00:01:19.520
这一跑身体跑，这一个

00:01:16.380 --> 00:01:22.950
残留，并且只有在此位停止

00:01:19.520 --> 00:01:27.470
估计喜欢C嗯

00:01:22.950 --> 00:01:27.470
这就是for循环的工作方式

00:01:29.420 --> 00:01:35.820
但是它变得更加复杂

00:01:34.020 --> 00:01:38.700
过去的我是关于我尚未学会的

00:01:35.820 --> 00:01:40.740
我的意思是正确的一切

00:01:38.700 --> 00:01:42.720
就像for循环一样，我们真的

00:01:40.740 --> 00:01:44.460
非常简单，我是说他们去过

00:01:42.720 --> 00:01:46.350
最古老的编程语言和

00:01:44.460 --> 00:01:48.180
这些正是这种格式

00:01:46.350 --> 00:01:50.310
在其中得到评估的三个陈述

00:01:48.180 --> 00:01:53.220
一遍又一遍的特定顺序让我们

00:01:50.310 --> 00:01:56.550
看看这将是什么

00:01:53.220 --> 00:01:57.810
在这段代码中登录了我们

00:01:56.550 --> 00:02:01.200
在这里有一种隐藏的是

00:01:57.810 --> 00:02:02.640
封闭权，所以是的，我们不得不封闭

00:02:01.200 --> 00:02:04.890
设定时间并说执行此关闭

00:02:02.640 --> 00:02:06.990
在一定时间内，这说

00:02:04.890 --> 00:02:08.790
我认为显然是零毫秒

00:02:06.990 --> 00:02:11.430
将默认为零，浏览器将

00:02:08.790 --> 00:02:13.890
在其中添加文件15 

00:02:11.430 --> 00:02:15.210
浏览器可以这样做，但关键是

00:02:13.890 --> 00:02:17.790
这将要发生

00:02:15.210 --> 00:02:19.050
在for循环之后异步

00:02:17.790 --> 00:02:22.440
安慰你会关闭我

00:02:19.050 --> 00:02:24.840
变量，在这种情况下是

00:02:22.440 --> 00:02:26.370
原始值mm-hm，因此

00:02:24.840 --> 00:02:32.000
值将被捕获，因此这将

00:02:26.370 --> 00:02:37.380
表示我们将看到三个日志0 1＆2 

00:02:32.000 --> 00:02:40.260
不完全是只有我一个

00:02:37.380 --> 00:02:42.600
故事很有趣，那将是

00:02:40.260 --> 00:02:43.770
范围仅限于父函数或

00:02:42.600 --> 00:02:46.440
如果没有父母，则为全球范围

00:02:43.770 --> 00:02:49.620
功能正常，是的，所以当我们

00:02:46.440 --> 00:02:52.080
增加它可以增加一个

00:02:49.620 --> 00:02:54.060
在执行关闭时有效

00:02:52.080 --> 00:02:55.410
所以这实际上是在寻找价值

00:02:54.060 --> 00:02:58.820
我确切地看到

00:02:55.410 --> 00:03:08.160
所以我们将获得console.log到

00:02:58.820 --> 00:03:10.290
两次我们两次

00:03:08.160 --> 00:03:11.400
专业的开发人员

00:03:10.290 --> 00:03:17.459
就像我运行这段代码一样

00:03:11.400 --> 00:03:18.989
早些时候我也许我不知道这还好

00:03:17.459 --> 00:03:20.070
你有很多时间在这里重拾它

00:03:18.989 --> 00:03:25.680
走

00:03:20.070 --> 00:03:31.800
但做完了时间还可以

00:03:25.680 --> 00:03:33.570
改变得如此直观，我想

00:03:31.800 --> 00:03:35.640
希望不会有任何改变

00:03:33.570 --> 00:03:38.010
但是我猜你是在设置一个新的

00:03:35.640 --> 00:03:39.870
那么它实际上所做的事情

00:03:38.010 --> 00:03:41.790
改变了我的意思是我真的以为你做到了

00:03:39.870 --> 00:03:42.290
因为你以前说过

00:03:41.790 --> 00:03:44.810
眼睛

00:03:42.290 --> 00:03:46.489
被声明为var表示它是

00:03:44.810 --> 00:03:47.780
保持在功能范围内

00:03:46.489 --> 00:03:49.790
如果除此之外没有什么

00:03:47.780 --> 00:03:51.290
这将是全球范围，是的

00:03:49.790 --> 00:03:54.409
就像那将要看

00:03:51.290 --> 00:03:56.239
这样，所以我们在这里就像

00:03:54.409 --> 00:03:58.010
是的，所以这个方块总是会

00:03:56.239 --> 00:04:00.799
运行mm-hmm，我们在那里声明

00:03:58.010 --> 00:04:04.040
就像我们有一个VAR和Const 

00:04:00.799 --> 00:04:06.530
记录所有的var是

00:04:04.040 --> 00:04:09.980
范围仅限于父函数或

00:04:06.530 --> 00:04:12.680
 Const和let在哪里的全球范围

00:04:09.980 --> 00:04:14.840
术语在词法上适用于

00:04:12.680 --> 00:04:16.729
块到块mm-hmm右边

00:04:14.840 --> 00:04:18.590
这些控制台在这里发生了什么

00:04:16.729 --> 00:04:20.780
记录第一个作品，它将记录

00:04:18.590 --> 00:04:23.660
是的，但是我们在这里遇到了什么

00:04:20.780 --> 00:04:25.940
常量日志中的常量，让

00:04:23.660 --> 00:04:27.740
那会抛出是的，因为

00:04:25.940 --> 00:04:29.210
无法访问它们所作用的范围

00:04:27.740 --> 00:04:31.970
在里面，让你说听

00:04:29.210 --> 00:04:32.900
都是街区，有一天我喜欢

00:04:31.970 --> 00:04:34.280
人们似乎不知道这一点，但是

00:04:32.900 --> 00:04:36.229
你可以像这样一个熊块

00:04:34.280 --> 00:04:38.180
我真的发现它真的很有用

00:04:36.229 --> 00:04:39.740
取决于我有什么用，因为常量让我

00:04:38.180 --> 00:04:41.930
时不时地使用

00:04:39.740 --> 00:04:43.250
只需声明此变量即可

00:04:41.930 --> 00:04:45.130
对于这些投入了三个指令

00:04:43.250 --> 00:04:47.330
是的，尤其是如果您像一个

00:04:45.130 --> 00:04:49.130
全球，如果您正在做一些内联

00:04:47.330 --> 00:04:50.720
脚本标签中的脚本，我只是将其包装

00:04:49.130 --> 00:04:52.909
在这些中确保您知道

00:04:50.720 --> 00:04:54.560
只是针对特定数量的东西

00:04:52.909 --> 00:04:58.190
确切地说，那是我所要做的

00:04:54.560 --> 00:05:01.039
用它来回到这个例子

00:04:58.190 --> 00:05:03.289
所以你现在也说相同

00:05:01.039 --> 00:05:06.260
我们已经赶上了

00:05:03.289 --> 00:05:08.479
现在的问题是技术上的领先

00:05:06.260 --> 00:05:11.300
就像我想在地理上说

00:05:08.479 --> 00:05:13.460
生菜块外面是的，但是

00:05:11.300 --> 00:05:14.210
虽然，但它没有它是一个

00:05:13.460 --> 00:05:17.840
声明

00:05:14.210 --> 00:05:19.760
所以实际上我的直觉会

00:05:17.840 --> 00:05:21.590
仍然应该工作一样，但我

00:05:19.760 --> 00:05:22.760
也会知道，如果不是，我

00:05:21.590 --> 00:05:24.409
不知道答案是什么

00:05:22.760 --> 00:05:27.889
 Ekman脚本规范实际上很特别

00:05:24.409 --> 00:05:29.510
这种情况下还可以，所以我

00:05:27.889 --> 00:05:31.280
在地理上喜欢您

00:05:29.510 --> 00:05:33.820
这个let语句看起来像是

00:05:31.280 --> 00:05:36.889
在之前的块之外，但它确实

00:05:33.820 --> 00:05:38.330
魔术自己拥有的地方就像

00:05:36.889 --> 00:05:40.039
循环就像拿着这个东西

00:05:38.330 --> 00:05:42.259
以前真的很简单，现在

00:05:40.039 --> 00:05:44.930
其实真的很复杂

00:05:42.259 --> 00:05:49.460
您实际上会来到这里是一个控制台

00:05:44.930 --> 00:05:54.229
对数为0和1的兴趣，它将创建一个

00:05:49.460 --> 00:05:56.090
每次迭代的词法范围如此

00:05:54.229 --> 00:05:58.070
从字面上看

00:05:56.090 --> 00:06:00.710
为什么不只是同一个变量

00:05:58.070 --> 00:06:03.949
分配一个新值，它是一个新变量

00:06:00.710 --> 00:06:05.419
是的，这是一个新变量哇， 

00:06:03.949 --> 00:06:07.699
这里有很多骗术， 

00:06:05.419 --> 00:06:09.110
这暴露了一些有趣的

00:06:07.699 --> 00:06:11.479
我从未真正考虑过的行为

00:06:09.110 --> 00:06:14.180
之前关于如何全循环怀疑

00:06:11.479 --> 00:06:16.160
其中之一就像这样，加号加上

00:06:14.180 --> 00:06:17.840
最后我一直以为的增量器

00:06:16.160 --> 00:06:21.229
在四分之一的结尾

00:06:17.840 --> 00:06:24.800
像这样循环迭代，所以你知道

00:06:21.229 --> 00:06:26.449
这样做做到这一点，然后

00:06:24.800 --> 00:06:29.000
好吧，如果是新的，那是行不通的

00:06:26.449 --> 00:06:31.580
好吧，这就是我想的变量

00:06:29.000 --> 00:06:34.520
很好，但是因为这记录为零

00:06:31.580 --> 00:06:37.280
而不是一个，我们知道这不是

00:06:34.520 --> 00:06:39.500
发生在同一迭代中

00:06:37.280 --> 00:06:41.389
实际发生的是我

00:06:39.500 --> 00:06:43.160
可能只是在身体之后

00:06:41.389 --> 00:06:45.260
没错，因为

00:06:43.160 --> 00:06:47.710
那么这是一个封闭，所以这是

00:06:45.260 --> 00:06:49.940
记录哦，是的，是的，等等

00:06:47.710 --> 00:06:51.950
这是奇怪的事情，就像它

00:06:49.940 --> 00:06:53.840
揭示增量运行在

00:06:51.950 --> 00:06:58.100
每次迭代的开始，除了

00:06:53.840 --> 00:07:00.560
我知道第一个是为了

00:06:58.100 --> 00:07:04.100
窗外所有的线虫，所以

00:07:00.560 --> 00:07:06.080
实际运作良好的方式

00:07:04.100 --> 00:07:12.380
实际上，让我们来介绍一下

00:07:06.080 --> 00:07:14.810
多余的东西，所以现在的问题是mmm 

00:07:12.380 --> 00:07:17.780
它是否像末尾一样复制值

00:07:14.810 --> 00:07:19.820
身体的末端到第一个

00:07:17.780 --> 00:07:22.460
下一次迭代的值，然后

00:07:19.820 --> 00:07:24.500
应用，我认为你有你的

00:07:22.460 --> 00:07:25.330
信誉回来，因为那正是

00:07:24.500 --> 00:07:27.919
它能做什么

00:07:25.330 --> 00:07:31.910
是的，我的意思是这会发生，因为如果你

00:07:27.919 --> 00:07:34.370
回到月桂树，它会表现

00:07:31.910 --> 00:07:36.970
像那样，你可以改变价值

00:07:34.370 --> 00:07:40.490
是的，是的，所以发生了什么事

00:07:36.970 --> 00:07:42.950
它就像这个特殊的位

00:07:40.490 --> 00:07:44.780
将其视为声明

00:07:42.950 --> 00:07:46.190
记录所有已设置的事物

00:07:44.780 --> 00:07:48.919
全部都有簿记

00:07:46.190 --> 00:07:52.400
在这种情况下就像我只是我

00:07:48.919 --> 00:07:56.030
您可以声明很多它可以运行

00:07:52.400 --> 00:07:57.889
检查是的，这很酷，然后很好

00:07:56.030 --> 00:07:59.330
所以它实际上创造了一种新的电气

00:07:57.889 --> 00:08:02.060
运行此检查之前的环境

00:07:59.330 --> 00:08:04.159
并将我的价值带入其中

00:08:02.060 --> 00:08:05.930
因为那张支票实际上可以支持

00:08:04.159 --> 00:08:08.270
你是设计师的影响可以是各种各样的

00:08:05.930 --> 00:08:10.800
愚蠢的他们都可能是副作用

00:08:08.270 --> 00:08:12.810
二是惊人的

00:08:10.800 --> 00:08:14.580
这样它就可以在同一范围内运行身体

00:08:12.810 --> 00:08:16.620
我们做了一些词汇环境

00:08:14.580 --> 00:08:18.840
所以我们有一个设置的超时，我们正在记录

00:08:16.620 --> 00:08:20.220
所以在这一点上是零，是的

00:08:18.840 --> 00:08:22.110
完成我们的任务，然后我们在做我加

00:08:20.220 --> 00:08:25.140
另外，这就是我们要带你去的地方

00:08:22.110 --> 00:08:26.610
即成为一个是的，那就是

00:08:25.140 --> 00:08:28.350
词汇环境的终结，因为

00:08:26.610 --> 00:08:30.000
然后创建一个新的词汇

00:08:28.350 --> 00:08:31.410
下一次迭代的环境

00:08:30.000 --> 00:08:33.870
从这开始，是的，你是

00:08:31.410 --> 00:08:34.230
正确地将值从一个复制到

00:08:33.870 --> 00:08:36.390
另一个

00:08:34.230 --> 00:08:38.100
对于此列出的所有内容

00:08:36.390 --> 00:08:40.020
部分它复制了一个值，所以现在

00:08:38.100 --> 00:08:42.390
把我这是新的

00:08:40.020 --> 00:08:45.600
词汇环境，我们加加

00:08:42.390 --> 00:08:48.630
我现在就在上面-我们检查一下

00:08:45.600 --> 00:08:50.640
不少于两个，因此您得到的日志

00:08:48.630 --> 00:08:53.550
一，我们得到很多的一学分

00:08:50.640 --> 00:08:55.230
安排任务之后，是，因为

00:08:53.550 --> 00:08:56.820
它仍然指向那个

00:08:55.230 --> 00:08:58.490
我们搜索但其中一个的实例

00:08:56.820 --> 00:09:02.220
那里的人在家里的记录

00:08:58.490 --> 00:09:03.900
不知道那是不是必须

00:09:02.220 --> 00:09:06.420
如果你的课程知道这些错综复杂

00:09:03.900 --> 00:09:07.860
代码最依赖这些复杂性

00:09:06.420 --> 00:09:09.510
可能这是一个坏主意吧

00:09:07.860 --> 00:09:11.070
会说这实际上很漂亮

00:09:09.510 --> 00:09:14.640
直观，因为正如您所说的那样， 

00:09:11.070 --> 00:09:16.560
很像var所做的，但是它做的很多

00:09:14.640 --> 00:09:19.530
就像跳过桑普森，我的意思是

00:09:16.560 --> 00:09:23.070
如果您依靠var也是一样

00:09:19.530 --> 00:09:24.570
我的意思是这有点混乱

00:09:23.070 --> 00:09:27.060
就像你对变量做事一样

00:09:24.570 --> 00:09:29.340
如果您已经预先使用过

00:09:27.060 --> 00:09:33.420
很好地依靠这些东西的价值

00:09:29.340 --> 00:09:34.020
可能嘘不要以任何方式使用它们

00:09:33.420 --> 00:09:35.490
避免它

00:09:34.020 --> 00:09:37.710
是的，我想我需要一个水槽

00:09:35.490 --> 00:09:40.170
比您的代码更明智，但

00:09:37.710 --> 00:09:41.730
是的，所以东西之间的复制

00:09:40.170 --> 00:09:43.830
仅在声明的地方发生

00:09:41.730 --> 00:09:45.900
所以如果你有一些，你会认识另一个

00:09:43.830 --> 00:09:48.270
那里的变量没有复制

00:09:45.900 --> 00:09:49.710
执行上下文之间，因为

00:09:48.270 --> 00:09:51.960
这不是宣布它的人之一

00:09:49.710 --> 00:09:52.350
有一个特殊的地方

00:09:51.960 --> 00:09:55.380
那

00:09:52.350 --> 00:09:57.630
所以这是恒定的，如果不同的井

00:09:55.380 --> 00:10:00.210
所以如果你真的可以把Const 

00:09:57.630 --> 00:10:01.830
是的，我知道，但是那会失败

00:10:00.210 --> 00:10:03.180
一旦发生这种情况，哦，真的

00:10:01.830 --> 00:10:05.340
拥有不变的，你不能重新分配

00:10:03.180 --> 00:10:07.710
山雀，我的意思是，如果这是每个新变量

00:10:05.340 --> 00:10:09.870
时间不错，因为它创造了新的

00:10:07.710 --> 00:10:11.310
变量，然后您正在执行

00:10:09.870 --> 00:10:12.990
这就是突变发生的时候

00:10:11.310 --> 00:10:14.730
好吧，这很奇怪

00:10:12.990 --> 00:10:16.350
观点允许这种情况发生

00:10:14.730 --> 00:10:19.200
但它只会工作，我是说真的

00:10:16.350 --> 00:10:20.790
如果您愿意，循环可能仍然无效

00:10:19.200 --> 00:10:22.950
您的代码中没有

00:10:20.790 --> 00:10:24.590
 Xactimate有点正确，所以规格仍然

00:10:22.950 --> 00:10:28.500
必须处理

00:10:24.590 --> 00:10:31.730
所以最后一个，如果您格式化代码

00:10:28.500 --> 00:10:31.730
这样我要打你一巴掌

00:10:32.340 --> 00:10:40.470
原因是因为我要这样做

00:10:37.460 --> 00:10:42.030
所以我可以跳过一些

00:10:40.470 --> 00:10:45.840
我在做的就是我在做

00:10:42.030 --> 00:10:48.140
分配0给我，我只是用这个

00:10:45.840 --> 00:10:49.980
声明，这样我就可以像

00:10:48.140 --> 00:10:52.470
像等待您存储的流产

00:10:49.980 --> 00:10:53.730
我的超时ID，但不是

00:10:52.470 --> 00:10:54.840
有很多犯罪，所以这是

00:10:53.730 --> 00:10:57.360
人们没有的另一件事

00:10:54.840 --> 00:10:59.550
一定知道如果你可以

00:10:57.360 --> 00:11:02.130
想要串联命令

00:10:59.550 --> 00:11:04.410
您可以使用和的JavaScript 

00:11:02.130 --> 00:11:06.380
使用分号，您可以使用逗号

00:11:04.410 --> 00:11:08.940
他们都有一点不同

00:11:06.380 --> 00:11:10.860
它们如何连接以及

00:11:08.940 --> 00:11:12.360
当他们为做饭而做的时候

00:11:10.860 --> 00:11:14.700
是的，那是我本可以使用的地方

00:11:12.360 --> 00:11:17.400
在这里我没有想到，但是

00:11:14.700 --> 00:11:19.140
是的，这不是，这不是功能

00:11:17.400 --> 00:11:21.690
参数角Connor这是一个

00:11:19.140 --> 00:11:23.780
连接两个单独的表达式

00:11:21.690 --> 00:11:26.070
逗号是，因为我不能使用

00:11:23.780 --> 00:11:28.080
分号，因为是的，这是

00:11:26.070 --> 00:11:29.370
这个for循环，所以我的意思是甚至

00:11:28.080 --> 00:11:32.760
使用您使用的匿名函数

00:11:29.370 --> 00:11:37.970
立即看起来我将不得不

00:11:32.760 --> 00:11:41.550
字体甚至更小，所以我

00:11:37.970 --> 00:11:43.110
讨论了一些问题，所以我的

00:11:41.550 --> 00:11:44.910
问题是将会是什么

00:11:43.110 --> 00:11:48.170
在这里登录，所以我有我的加号

00:11:44.910 --> 00:11:52.910
在这里，你有我的加号

00:11:48.170 --> 00:11:54.870
你以为我会离开我吗

00:11:52.910 --> 00:11:56.370
你知道我直到我才知道

00:11:54.870 --> 00:11:57.840
看起来像我想的那样

00:11:56.370 --> 00:11:59.130
谈论for背后的复杂性

00:11:57.840 --> 00:12:01.800
循环，我只发现了这个

00:11:59.130 --> 00:12:05.370
特殊的东西，所以我喜欢什么

00:12:01.800 --> 00:12:07.260
假设是这个括号

00:12:05.370 --> 00:12:13.260
设置超时的表达式和

00:12:07.260 --> 00:12:16.410
以某种方式返回零

00:12:13.260 --> 00:12:18.300
一开始就分配给我一次

00:12:16.410 --> 00:12:20.760
是的，但这是我要去的

00:12:18.300 --> 00:12:22.230
所以这叫这里是什么

00:12:20.760 --> 00:12:24.300
我觉得实际是什么

00:12:22.230 --> 00:12:27.390
 for循环之类的问题应该

00:12:24.300 --> 00:12:29.460
身体应该运行一次正确的

00:12:27.390 --> 00:12:31.080
问题归结于哪个词汇

00:12:29.460 --> 00:12:32.730
范围是此代码将要运行

00:12:31.080 --> 00:12:37.050
就像我们说的那样，有很多

00:12:32.730 --> 00:12:37.430
在for循环中，但是有什么可能

00:12:37.050 --> 00:12:39.410
木台

00:12:37.430 --> 00:12:41.120
在这之前我会发生

00:12:39.410 --> 00:12:42.649
代码运行是因为我这是for循环

00:12:41.120 --> 00:12:44.420
即将完成

00:12:42.649 --> 00:12:45.440
这是一项将耗尽的任务

00:12:44.420 --> 00:12:50.570
 for循环已完成，因为绝对

00:12:45.440 --> 00:12:53.060
同步所以从技术上讲

00:12:50.570 --> 00:12:55.430
我加加创建一个新的词汇

00:12:53.060 --> 00:12:58.240
范围，但这是否意味着它指的是

00:12:55.430 --> 00:13:01.010
现在是否有其他变量

00:12:58.240 --> 00:13:04.670
我很开心，我要说

00:13:01.010 --> 00:13:07.010
看起来是一个负载等等

00:13:04.670 --> 00:13:08.029
我也会说，但事实并非如此

00:13:07.010 --> 00:13:10.730
正确

00:13:08.029 --> 00:13:10.970
好吧，我很认真，所以这很奇怪

00:13:10.730 --> 00:13:13.910
事情

00:13:10.970 --> 00:13:16.550
它创建了一个附加的词汇范围

00:13:13.910 --> 00:13:20.540
对于此for循环的初始语句

00:13:16.550 --> 00:13:23.480
好吧，所以它创建了一个词法范围运行

00:13:20.540 --> 00:13:24.980
这条线，一旦运行它就走了

00:13:23.480 --> 00:13:27.050
那么一切的价值是什么

00:13:24.980 --> 00:13:29.630
声明，然后将它们复制到

00:13:27.050 --> 00:13:31.490
新的词汇范围或由其余的

00:13:29.630 --> 00:13:33.950
 for循环执行此操作并覆盖

00:13:31.490 --> 00:13:37.459
零，因为它从未命中任何这些

00:13:33.950 --> 00:13:39.740
突变点，真的很奇怪

00:13:37.459 --> 00:13:41.540
您仅需一个词就能获得如此多的词汇范围

00:13:39.740 --> 00:13:42.440
简单的循环，所以我们要说的是

00:13:41.540 --> 00:13:46.660
只为循环而做

00:13:42.440 --> 00:13:48.589
是的一般建议，无用

00:13:46.660 --> 00:13:50.990
您不必担心任何

00:13:48.589 --> 00:13:53.029
这只是使用迭代器和四个

00:13:50.990 --> 00:13:55.790
本质上就是浪费每个人的时间

00:13:53.029 --> 00:13:57.860
做得好欢迎使用HTTP两三

00:13:55.790 --> 00:13:59.390
我们回来了，也许我们应该成为其中之一

00:13:57.860 --> 00:14:03.709
那些有点像

00:13:59.390 --> 00:14:05.690
编辑之间的叮当声欢迎回来

00:14:03.709 --> 00:14:07.339
听众，我们在谈论激光

00:14:05.690 --> 00:14:10.779
但我们现在要接一个

00:14:07.339 --> 00:14:13.480
由Google micro kitchen赞助

00:14:10.779 --> 00:14:17.860
再一次关于Google Chrome浏览器

00:14:13.480 --> 00:14:17.860
请大家下载Chrome 

