WEBVTT
Kind: captions
Language: en

00:00:03.269 --> 00:00:07.375
PAUL LEWIS: Jake, how
do you feel about banks?

00:00:07.375 --> 00:00:10.290
JAKE ARCHIBALD: I feel
indifferent to banks.

00:00:10.290 --> 00:00:10.943
PAUL LEWIS: OK.

00:00:10.943 --> 00:00:14.572
How about one they
turned into a pub?

00:00:14.572 --> 00:00:16.590
JAKE ARCHIBALD: Oh,
that's progress.

00:00:16.590 --> 00:00:17.524
PAUL LEWIS: Yes.

00:00:17.524 --> 00:00:18.976
[MUSIC PLAYING]

00:00:24.618 --> 00:00:27.845
JAKE ARCHIBALD: Do you
know how to untar a file?

00:00:27.845 --> 00:00:28.470
PAUL LEWIS: No.

00:00:28.470 --> 00:00:29.132
I always check.

00:00:29.132 --> 00:00:29.840
I never remember.

00:00:29.840 --> 00:00:30.923
JAKE ARCHIBALD: See, I do.

00:00:30.923 --> 00:00:34.900
It's T-A-R, tar, space, dash.

00:00:34.900 --> 00:00:38.490
And your arguments are x, z, f.

00:00:38.490 --> 00:00:39.210
PAUL LEWIS: OK.

00:00:39.210 --> 00:00:40.680
JAKE ARCHIBALD: The way I
have of remembering this--

00:00:40.680 --> 00:00:42.013
and someone else taught me this.

00:00:42.013 --> 00:00:43.460
I think it's brilliant.

00:00:43.460 --> 00:00:47.880
Because you're untarring--
x, z, f, Extract Zee Files.

00:00:51.110 --> 00:00:51.990
It's perfect, right?

00:00:51.990 --> 00:00:53.449
You will never forget that now.

00:00:53.449 --> 00:00:55.490
PAUL LEWIS: No, I'm not
going to forget that now.

00:00:55.490 --> 00:00:57.040
JAKE ARCHIBALD: So
I had to go and do

00:00:57.040 --> 00:01:00.940
some work on an older project
of mine from some time ago.

00:01:00.940 --> 00:01:02.150
PAUL LEWIS: I'm so sorry.

00:01:02.150 --> 00:01:03.110
JAKE ARCHIBALD: Right, exactly.

00:01:03.110 --> 00:01:04.943
I don't know if you've
had this before where

00:01:04.943 --> 00:01:07.120
you come to some older
code of your own,

00:01:07.120 --> 00:01:09.050
and you're looking through
this project, and--

00:01:09.050 --> 00:01:10.330
PAUL LEWIS: And you
have the Gandalf moment.

00:01:10.330 --> 00:01:11.770
I have no memory of this place.

00:01:11.770 --> 00:01:12.978
JAKE ARCHIBALD: Exactly that.

00:01:12.978 --> 00:01:14.940
It just was like someone
else had written it,

00:01:14.940 --> 00:01:15.950
and they'd written it--

00:01:15.950 --> 00:01:17.033
PAUL LEWIS: Not very well.

00:01:17.033 --> 00:01:18.992
JAKE ARCHIBALD: Like
a [INAUDIBLE] might.

00:01:18.992 --> 00:01:22.180
It kind of made me feel
that even on a project where

00:01:22.180 --> 00:01:24.710
I'm going to be the
only contributor,

00:01:24.710 --> 00:01:28.640
or if I expect only me to be
the only contributor, even then,

00:01:28.640 --> 00:01:31.330
maintainable code
is so important.

00:01:31.330 --> 00:01:33.750
When I was at the BBC, we
had a pattern which I really

00:01:33.750 --> 00:01:35.850
liked where before
we even started

00:01:35.850 --> 00:01:38.820
on the implementation
of a part of a library

00:01:38.820 --> 00:01:41.390
we were working on we
would first write the docs.

00:01:41.390 --> 00:01:43.969
We'd write them in
line, which is not

00:01:43.969 --> 00:01:45.260
entirely popular at the moment.

00:01:45.260 --> 00:01:48.280
But I still liked having the
documentation really close

00:01:48.280 --> 00:01:49.170
to the code.

00:01:49.170 --> 00:01:50.836
Because when you
update one, it reminded

00:01:50.836 --> 00:01:52.120
you to update the other.

00:01:52.120 --> 00:01:54.661
But the way we did it is if we
were adding new functionality,

00:01:54.661 --> 00:01:57.470
we would write the docs
first before any line of code

00:01:57.470 --> 00:01:59.960
that showed off the function
signature, the arguments, what

00:01:59.960 --> 00:02:00.847
it returned.

00:02:00.847 --> 00:02:02.930
And that was the first
thing we would code review.

00:02:02.930 --> 00:02:04.740
We would code review
the documentation

00:02:04.740 --> 00:02:06.420
before any of the code.

00:02:06.420 --> 00:02:08.711
And one of the things that
you would do as part of this

00:02:08.711 --> 00:02:11.090
is write examples
of function usage.

00:02:11.090 --> 00:02:13.790
And it happened loads where as
we were writing the examples,

00:02:13.790 --> 00:02:16.250
we were like, this
isn't fit for purpose.

00:02:16.250 --> 00:02:19.670
Now I'm actually pretending
to be a user of this function.

00:02:19.670 --> 00:02:21.880
And I'm like, this is
actually really hard

00:02:21.880 --> 00:02:23.922
to use for the common
stuff you'd use it for.

00:02:23.922 --> 00:02:26.380
PAUL LEWIS: Because it's not
a particularly attractive part

00:02:26.380 --> 00:02:26.880
of coding.

00:02:26.880 --> 00:02:29.929
You're like, well, I'd
rather do the features.

00:02:29.929 --> 00:02:31.470
I'd rather do the
new, exciting thing

00:02:31.470 --> 00:02:34.300
than kind of make sure
that me six months from now

00:02:34.300 --> 00:02:35.230
can read this code.

00:02:35.230 --> 00:02:37.730
JAKE ARCHIBALD: Well, if you
ever coded something in a way

00:02:37.730 --> 00:02:39.360
that you kind of
step back from it,

00:02:39.360 --> 00:02:42.000
and you think, oh, this
is only four lines now.

00:02:42.000 --> 00:02:43.881
I'm very, very smart.

00:02:43.881 --> 00:02:45.880
PAUL LEWIS: Yeah, I've
actually seen this a lot.

00:02:45.880 --> 00:02:47.540
And it really bugs me, actually.

00:02:47.540 --> 00:02:50.670
Because it's like,
I've got four functions

00:02:50.670 --> 00:02:52.630
that do broadly related things.

00:02:52.630 --> 00:02:56.180
So what I did instead is I
made this one mega function--

00:02:56.180 --> 00:02:58.190
mega not in terms
of its quality,

00:02:58.190 --> 00:03:01.596
but just in terms of how it
bakes all those four ideas down

00:03:01.596 --> 00:03:03.970
into one thing. and then you
call it four different ways.

00:03:03.970 --> 00:03:05.220
JAKE ARCHIBALD: I've got
one function that actually

00:03:05.220 --> 00:03:06.386
produces the other function.

00:03:06.386 --> 00:03:08.040
It's almost become self aware.

00:03:08.040 --> 00:03:09.910
The code is now writing itself.

00:03:09.910 --> 00:03:11.260
I'm so smart.

00:03:11.260 --> 00:03:13.220
In many cases, just
doing it the simple way,

00:03:13.220 --> 00:03:16.020
which might be a few lines
extra, it might even be slower.

00:03:16.020 --> 00:03:20.090
But it's only worth
removing the maintainability

00:03:20.090 --> 00:03:23.022
if the benefit is worth it,
like if that's a hot function,

00:03:23.022 --> 00:03:24.480
if that's going to
be called a lot,

00:03:24.480 --> 00:03:25.950
and the performance
benefit is worth it.

00:03:25.950 --> 00:03:27.190
PAUL LEWIS: Yeah, absolutely.

00:03:27.190 --> 00:03:30.050
There's micro-optimization
in some form there.

00:03:30.050 --> 00:03:31.360
It's not worth doing otherwise.

00:03:31.360 --> 00:03:33.109
JAKE ARCHIBALD: I
sometimes find that when

00:03:33.109 --> 00:03:35.120
I'm reading code
for Python projects,

00:03:35.120 --> 00:03:38.070
I find their code really,
really easy to read,

00:03:38.070 --> 00:03:40.390
even though I know JavaScript
a whole lot better than I

00:03:40.390 --> 00:03:40.889
know Python.

00:03:40.889 --> 00:03:42.380
PAUL LEWIS: PEP 8.

00:03:42.380 --> 00:03:44.760
JAKE ARCHIBALD: Do you think
as a JavaScript community,

00:03:44.760 --> 00:03:46.575
we need to swallow
our pride with all

00:03:46.575 --> 00:03:50.550
of these different techniques
of writing JavaScript,

00:03:50.550 --> 00:03:55.289
and even if it's one we
all a little bit hate,

00:03:55.289 --> 00:03:56.205
we have our own PEP 8?

00:03:56.205 --> 00:03:58.030
PAUL LEWIS: I think what
you're tapping into is actually

00:03:58.030 --> 00:03:59.360
the cultural requirement.

00:03:59.360 --> 00:04:03.217
It can't just be, you can't
codify maintainable standards.

00:04:03.217 --> 00:04:04.800
It actually has to
be something that's

00:04:04.800 --> 00:04:07.350
baked into the people that
are working on the code,

00:04:07.350 --> 00:04:09.289
that they want to keep
the technical debt low.

00:04:09.289 --> 00:04:11.830
They want to make it easy for
themselves and for other people

00:04:11.830 --> 00:04:14.126
and the people who join
the team to actually

00:04:14.126 --> 00:04:15.375
be able to sort of contribute.

00:04:15.375 --> 00:04:17.296
And I think it's a
crucially important thing.

00:04:17.296 --> 00:04:19.004
JAKE ARCHIBALD:
Maintainable code is just

00:04:19.004 --> 00:04:19.860
a better way of doing it.

00:04:19.860 --> 00:04:20.329
PAUL LEWIS: To the heroes.

00:04:20.329 --> 00:04:22.704
JAKE ARCHIBALD: The unsung
heroes of maintainable coding.

00:04:22.704 --> 00:04:24.790
PAUL LEWIS: Cheers.

00:04:24.790 --> 00:04:27.240
[MUSIC PLAYING]

