WEBVTT
Kind: captions
Language: zh-Hans

00:00:00.120 --> 00:00:00.330
苏美：对​​。 

00:00:00.330 --> 00:00:01.270
我不知道这行得通。 

00:00:01.270 --> 00:00:02.561
为什么[听不清]都是杰克？ 

00:00:02.561 --> 00:00:03.385
你做了什么？ 

00:00:03.385 --> 00:00:06.710
 [音乐播放] 

00:00:10.040 --> 00:00:12.040
杰克：所以我们做了一集

00:00:12.040 --> 00:00:14.350
在将来的JavaScript中。 

00:00:14.350 --> 00:00:15.070
苏玛：我们做到了。 

00:00:15.070 --> 00:00:15.910
人们喜欢那样。 

00:00:15.910 --> 00:00:17.080
杰克：是的。 

00:00:17.080 --> 00:00:21.760
所以我认为我们要做的是看看

00:00:21.760 --> 00:00:22.840
已经降落了

00:00:22.840 --> 00:00:23.660
瑟玛：哦，我以为你会说， 

00:00:23.660 --> 00:00:24.440
让我们看看旧的东西。 

00:00:24.440 --> 00:00:25.220
我当时想，那没什么

00:00:25.220 --> 00:00:27.345
杰克：恩，我认为已经有新东西了

00:00:27.345 --> 00:00:29.970
确实，这可能是您定义旧内容的方式。 

00:00:29.970 --> 00:00:32.554
我觉得我在介绍方面做得不好

00:00:32.554 --> 00:00:33.470
这到底是什么。 

00:00:33.470 --> 00:00:34.720
因此，我将向您展示。 

00:00:34.720 --> 00:00:35.890
 SURMA：让我们看一下ES3。 

00:00:35.890 --> 00:00:37.930
杰克：是的。 

00:00:37.930 --> 00:00:38.650
瑟玛：哦。 

00:00:38.650 --> 00:00:40.720
我当时想开个玩笑，但是- 

00:00:40.720 --> 00:00:43.620
杰克：永远不要再这样做了，队友。 

00:00:43.620 --> 00:00:48.820
告诉我这是怎么回事。 

00:00:48.820 --> 00:00:50.200
瑟玛：这就像倒退

00:00:50.200 --> 00:00:52.770
在使用JavaScript进行面向对象编程之前， 

00:00:52.770 --> 00:00:53.770
上过课，不是吗？ 

00:00:53.770 --> 00:00:54.530
杰克：是的。 

00:00:54.530 --> 00:00:55.030
是的

00:00:55.030 --> 00:00:56.930
 SURMA：在定义函数的地方， 

00:00:56.930 --> 00:00:59.374
突然间，您可以添加属性

00:00:59.374 --> 00:01:00.790
在该功能的原型上。 

00:01:00.790 --> 00:01:03.257
听起来真的很奇怪，但这就是您的做法。 

00:01:03.257 --> 00:01:04.340
杰克：那是怎么回事？ 

00:01:04.340 --> 00:01:04.839
跟我说话。 

00:01:04.839 --> 00:01:06.670
 SURMA：因此，您定义了Car函数。 

00:01:06.670 --> 00:01:07.720
我不会谈论什么

00:01:07.720 --> 00:01:08.886
现在在函数中。 

00:01:08.886 --> 00:01:11.610
但是然后您可以在原型中添加内容

00:01:11.610 --> 00:01:13.570
该功能称为Car。 

00:01:13.570 --> 00:01:16.900
我认为使用了原型

00:01:16.900 --> 00:01:20.110
当您将函数与new关键字一起使用时。 

00:01:20.110 --> 00:01:22.890
所以如果我说新车，那么事情

00:01:22.890 --> 00:01:25.292
在原型中，我也可以使用

00:01:25.292 --> 00:01:26.250
以Car为例。 

00:01:26.250 --> 00:01:28.000
那是一个非常糟糕的解释。 

00:01:28.000 --> 00:01:28.870
杰克：是的。 

00:01:28.870 --> 00:01:30.560
是。 

00:01:30.560 --> 00:01:32.730
瑟玛：我总是觉得很困惑。 

00:01:32.730 --> 00:01:37.401
原型继承是什么？ 

00:01:37.401 --> 00:01:37.900
杰克：是的。 

00:01:37.900 --> 00:01:38.580
瑟玛：类似的东西吗？ 

00:01:38.580 --> 00:01:39.371
杰克：典型的。 

00:01:39.371 --> 00:01:40.130
典型的。 

00:01:40.130 --> 00:01:42.580
但是关于 - 

00:01:42.580 --> 00:01:45.220
 SURMA：您已经在做一些奇怪的事情。 

00:01:45.220 --> 00:01:45.950
杰克：这。 

00:01:45.950 --> 00:01:48.804
所以我想我们应该解释你

00:01:48.804 --> 00:01:50.220
是相对较新的网络， 

00:01:50.220 --> 00:01:51.787
但是您的速度很快。 

00:01:51.787 --> 00:01:52.870
 SURMA：是的，我从来没有

00:01:52.870 --> 00:01:54.220
杰克：你永远都做不到。 

00:01:54.220 --> 00:01:55.780
 SURMA：我已经在大学里做到了。 

00:01:55.780 --> 00:01:57.190
没有那么具体。 

00:01:57.190 --> 00:02:00.784
我刚刚用过[？ Car.prototype？] [？点？]第一个函数等于

00:02:00.784 --> 00:02:01.700
然后是功能。 

00:02:01.700 --> 00:02:05.630
杰克：但是这辆车继承自车。 

00:02:05.630 --> 00:02:09.590
这就是我们过去进行继承的方式。 

00:02:09.590 --> 00:02:11.080
瑟玛：但这真令人恶心。 

00:02:11.080 --> 00:02:11.650
杰克：是的。 

00:02:11.650 --> 00:02:12.310
是不是

00:02:12.310 --> 00:02:13.061
是不是很恐怖？ 

00:02:13.061 --> 00:02:13.560
瑟玛：哇。 

00:02:13.560 --> 00:02:14.500
杰克：因为我的意思是- 

00:02:14.500 --> 00:02:16.458
 SURMA：这就是为什么人们使用框架，对吗？ 

00:02:16.458 --> 00:02:18.637
或很少图书馆会给你的。 

00:02:18.637 --> 00:02:19.220
杰克：是的。 

00:02:19.220 --> 00:02:22.540
因此，因为您想要Car.prototype 

00:02:22.540 --> 00:02:24.850
成为Vehicle的实例。 

00:02:24.850 --> 00:02:29.350
但是Vehicle具有-您需要使用东西来调用该函数。 

00:02:29.350 --> 00:02:31.240
它具有选项和事物。 

00:02:31.240 --> 00:02:33.760
因此，您需要做的是创建一个新的构造函数， 

00:02:33.760 --> 00:02:36.340
复制原型，或引用原型， 

00:02:36.340 --> 00:02:39.190
创建一个新的，这意味着你的车现在

00:02:39.190 --> 00:02:40.600
从Vehicle继承。 

00:02:40.600 --> 00:02:44.200
然后在这里，您正在执行[音频不清晰]。 

00:02:44.200 --> 00:02:46.920
我的意思是我们有课程。 

00:02:46.920 --> 00:02:48.319
这就是我们现在所拥有的。 

00:02:48.319 --> 00:02:49.860
这就是我想谈的

00:02:49.860 --> 00:02:51.932
只是我们现在所拥有的一些东西- 

00:02:51.932 --> 00:02:54.140
瑟玛：而且我们几乎理所当然地是不是？ 

00:02:54.140 --> 00:02:55.920
杰克：我们几乎认为是理所当然的。 

00:02:55.920 --> 00:02:57.360
 SURMA：旧版本，原型继承， 

00:02:57.360 --> 00:02:59.526
总是让我想起Lua，那里只有桌子

00:02:59.526 --> 00:03:00.990
并且您在表格中有表格

00:03:00.990 --> 00:03:03.114
如果您想继承-那就太奇怪了。 

00:03:03.114 --> 00:03:04.030
感觉非常相似。 

00:03:04.030 --> 00:03:05.570
这只是- 

00:03:05.570 --> 00:03:06.685
哈，感觉好些了。 

00:03:06.685 --> 00:03:07.560
杰克：从来没有做过罗阿。 

00:03:07.560 --> 00:03:10.070
你的话我记住了。 

00:03:10.070 --> 00:03:11.680
这里发生了什么事？ 

00:03:11.680 --> 00:03:13.717
 SURMA：您正在定义一个称为spin的函数。 

00:03:13.717 --> 00:03:14.300
杰克：对。 

00:03:14.300 --> 00:03:15.633
瑟玛：让我们仔细看看。 

00:03:15.633 --> 00:03:18.580
所以选项-哦，好的。 

00:03:18.580 --> 00:03:20.630
所以这基本上是消毒

00:03:20.630 --> 00:03:22.170
选项对象。 

00:03:22.170 --> 00:03:23.000
杰克：是的。 

00:03:23.000 --> 00:03:24.530
瑟玛：哪怕是那边

00:03:24.530 --> 00:03:26.030
也是[听不清]， 

00:03:26.030 --> 00:03:28.520
定义语法，options对象将是什么样。 

00:03:28.520 --> 00:03:30.330
因为否则，您将不得不编写此代码， 

00:03:30.330 --> 00:03:32.150
这就像-我花了一段时间

00:03:32.150 --> 00:03:33.270
了解你在做什么。 

00:03:33.270 --> 00:03:34.550
现在我没有阅读所有细节， 

00:03:34.550 --> 00:03:36.500
因为我意识到了模式，因为我已经

00:03:36.500 --> 00:03:37.334
之前写过。 

00:03:37.334 --> 00:03:37.833
杰克：是的。 

00:03:37.833 --> 00:03:39.500
瑟玛：如果您不知道模式， 

00:03:39.500 --> 00:03:42.170
直到您知道，这将花费大量的阅读时间， 

00:03:42.170 --> 00:03:46.441
哦，您只是在检查是否存在某些属性， 

00:03:46.441 --> 00:03:48.190
如果不是，则使用默认值。 

00:03:48.190 --> 00:03:48.689
杰克：是的。 

00:03:48.689 --> 00:03:51.820
使用object.assign可以轻松得多， 

00:03:51.820 --> 00:03:53.890
本质上就是图书馆

00:03:53.890 --> 00:03:57.460
我们所有人都必须做诸如object.assign之类的事情， 

00:03:57.460 --> 00:04:00.680
这就是我们在这里要使用的，但如今- 

00:04:00.680 --> 00:04:03.580
 SURMA：以全部价值进行销毁。 

00:04:03.580 --> 00:04:04.240
杰克：是的。 

00:04:04.240 --> 00:04:06.202
所以我们在这里看到的，我们正在解构。 

00:04:06.202 --> 00:04:07.660
我们给它默认值， 

00:04:07.660 --> 00:04:09.868
然后是选项对象的默认值

00:04:09.868 --> 00:04:11.030
因此它是完全可选的。 

00:04:11.030 --> 00:04:13.929
但是我举这个例子是有原因的。 

00:04:13.929 --> 00:04:15.220
 SURMA：因为我不喜欢它。 

00:04:15.220 --> 00:04:16.930
杰克：因为你不喜欢，对吗？ 

00:04:16.930 --> 00:04:18.730
 SURMA：所以我喜欢结构化和默认基础。 

00:04:18.730 --> 00:04:20.313
我已经解决了一点。 

00:04:20.313 --> 00:04:26.140
我在实际的函数参数定义中不喜欢它。 

00:04:26.140 --> 00:04:29.350
我更喜欢你破坏的地方

00:04:29.350 --> 00:04:31.450
在另一个地方，因为否则

00:04:31.450 --> 00:04:35.540
有点嵌套，看起来有点塞满。 

00:04:35.540 --> 00:04:38.830
特别是如果您有TypeScript， 

00:04:38.830 --> 00:04:41.110
它甚至变得更奇怪，因为然后类型

00:04:41.110 --> 00:04:42.075
到处走。 

00:04:42.075 --> 00:04:43.450
所以当我使用TypeScript时

00:04:43.450 --> 00:04:47.216
的类型称为函数名，带有单词

00:04:47.216 --> 00:04:48.590
选项附加到末尾

00:04:48.590 --> 00:04:51.000
我定义选项对象的结构。 

00:04:51.000 --> 00:04:53.060
然后我在函数中有第一行

00:04:53.060 --> 00:04:55.300
然后将分配默认值。 

00:04:55.300 --> 00:04:58.190
杰克：是的，我同意。 

00:04:58.190 --> 00:04:58.690
是的

00:04:58.690 --> 00:05:00.610
这看起来很整洁。 

00:05:00.610 --> 00:05:05.260
我仍然会这样做的原因是因为静态分析仪

00:05:05.260 --> 00:05:08.020
知道这些是选项的属性

00:05:08.020 --> 00:05:08.740
宾语。 

00:05:08.740 --> 00:05:09.910
在这种情况下，不是- 

00:05:09.910 --> 00:05:10.690
苏尔玛：是的。 

00:05:10.690 --> 00:05:13.880
如果没有TypeScript，则可能更可取。 

00:05:13.880 --> 00:05:14.380
杰克：对。 

00:05:14.380 --> 00:05:16.540
就是这样。 

00:05:16.540 --> 00:05:17.972
瑟玛：这是怎么回事？ 

00:05:17.972 --> 00:05:19.930
杰克：如果您不知道这里发生了什么， 

00:05:19.930 --> 00:05:20.971
苏玛：我需要出去。 

00:05:20.971 --> 00:05:22.710
杰克：我们必须解雇你，是的。 

00:05:22.710 --> 00:05:26.530
 SURMA：您正在使用一个类来制作DOM元素

00:05:26.530 --> 00:05:31.120
 100像素高。 

00:05:31.120 --> 00:05:32.390
杰克：好保存。 

00:05:32.390 --> 00:05:38.140
因此，我花了大量时间在DevTools中进行设计。 

00:05:38.140 --> 00:05:42.792
我将一些粗略的样式添加到编辑器中， 

00:05:42.792 --> 00:05:44.500
然后我将进入DevTools， 

00:05:44.500 --> 00:05:47.440
然后，我将在其中转移值以使其具有外观- 

00:05:47.440 --> 00:05:49.172
 SURMA：复制并粘贴。 

00:05:49.172 --> 00:05:51.430
杰克：就是这样。 

00:05:51.430 --> 00:05:54.310
在这种情况下，请在DevTools中进行编辑

00:05:54.310 --> 00:05:56.620
很难，因为我想要的是

00:05:56.620 --> 00:06:00.280
在这种情况下，我希望宽度相同

00:06:00.280 --> 00:06:02.390
因为它很高。 

00:06:02.390 --> 00:06:07.570
我要说的是正方形，这是人类会怎么说的。 

00:06:07.570 --> 00:06:10.090
这意味着如果我要转移价值

00:06:10.090 --> 00:06:13.180
在DevTools中，我先移一个，然后

00:06:13.180 --> 00:06:17.410
必须按两次制表键或其他选项，然后移动另一个。 

00:06:17.410 --> 00:06:18.370
那是一个痛苦。 

00:06:18.370 --> 00:06:19.661
因此，这是解决方案之一。 

00:06:19.661 --> 00:06:21.756
 SURMA：是的，我会说这是正确的解决方案。 

00:06:21.756 --> 00:06:24.130
杰克：是的，现在很高兴得到了支持

00:06:24.130 --> 00:06:26.194
在所有现代浏览器中。 

00:06:26.194 --> 00:06:27.860
我刚刚发现了这个梦想，这是- 

00:06:27.860 --> 00:06:30.304
 SURMA：就其价值而言，CSS的大小已经到来。 

00:06:30.304 --> 00:06:31.720
杰克：是的，那只是

00:06:31.720 --> 00:06:33.270
别名宽度加高度。 

00:06:33.270 --> 00:06:34.195
哦，真令人兴奋。 

00:06:34.195 --> 00:06:36.320
 SURMA：是的，因为我们还有很多其他事情。 

00:06:36.320 --> 00:06:40.150
例如，我认为背景图片的大小。 

00:06:40.150 --> 00:06:41.950
存在某些其他尺寸属性

00:06:41.950 --> 00:06:44.336
您可以有一个值或两个值， 

00:06:44.336 --> 00:06:46.960
如果只是一个值，则宽度和高度相同。 

00:06:46.960 --> 00:06:49.492
但是我们没有文件的实际大小。 

00:06:49.492 --> 00:06:51.700
杰克：所以这成为宽度和高度的捷径- 

00:06:51.700 --> 00:06:54.400
 SURMA：是的，您还可以制作100像素，200像素的尺寸， 

00:06:54.400 --> 00:06:56.519
如果您希望它的宽度为100像素，并且- 

00:06:56.519 --> 00:06:58.560
杰克：以同样的方式处理背景大小。 

00:06:58.560 --> 00:06:58.960
苏尔玛：是的。 

00:06:58.960 --> 00:06:59.510
杰克：哦，好。 

00:06:59.510 --> 00:07:00.010
那很好。 

00:07:00.010 --> 00:07:01.343
但与此同时，这可行。 

00:07:01.343 --> 00:07:03.705
 SURMA：目前，这可行。 

00:07:03.705 --> 00:07:05.610
杰克：这是怎么回事？ 

00:07:05.610 --> 00:07:08.807
 SURMA：我假设UL和LI是名称明确的变量， 

00:07:08.807 --> 00:07:10.390
而且你不是想让我失望。 

00:07:10.390 --> 00:07:13.620
因此，您有一个添加点击处理程序的列表

00:07:13.620 --> 00:07:17.670
然后从LI那里获得事件目标， 

00:07:17.670 --> 00:07:21.590
如果不是LI，那么您会说，好吧，您就冒了出来。 

00:07:21.590 --> 00:07:22.110
哦好的。 

00:07:22.110 --> 00:07:24.420
所以基本上你就是在做你

00:07:24.420 --> 00:07:27.030
在有一个单击处理程序的地方进行事件委托

00:07:27.030 --> 00:07:29.970
在每个列表项的UL上， 

00:07:29.970 --> 00:07:32.410
然后尝试在点击事件中找出

00:07:32.410 --> 00:07:34.664
您单击的实际列表项是什么。 

00:07:34.664 --> 00:07:36.580
杰克：是的，所以列表上有一个事件监听器， 

00:07:36.580 --> 00:07:38.960
但您使用它来检测所有列表项上的点击。 

00:07:38.960 --> 00:07:40.830
这意味着您可以移动这些列表项，添加

00:07:40.830 --> 00:07:41.340
并删除它们。 

00:07:41.340 --> 00:07:42.510
您不必更改列表项。 

00:07:42.510 --> 00:07:43.968
瑟玛：但是问题就变成了

00:07:43.968 --> 00:07:46.170
如果您的列表项具有锚标记， 

00:07:46.170 --> 00:07:49.100
该事件或目标可能是列表中的定位标记

00:07:49.100 --> 00:07:49.600
项目。 

00:07:49.600 --> 00:07:50.820
杰克：这可能只是列表本身。 

00:07:50.820 --> 00:07:51.870
 SURMA：或者可能是列表本身。 

00:07:51.870 --> 00:07:53.060
杰克：单击以列出项目。 

00:07:53.060 --> 00:07:54.518
 SURMA：然后您要做的是

00:07:54.518 --> 00:07:56.670
你必须手动走树吗

00:07:56.670 --> 00:07:59.779
查找包含列表元素（如果存在）的内容。 

00:07:59.779 --> 00:08:01.320
杰克：是的，我一直都这样

00:08:01.320 --> 00:08:03.194
只是一点点的代码，但它总是

00:08:03.194 --> 00:08:06.210
感觉像是使用事件委托的障碍。 

00:08:06.210 --> 00:08:06.999
鉴于，现在- 

00:08:06.999 --> 00:08:08.040
瑟玛：我们最近。 

00:08:08.040 --> 00:08:10.740
杰克：我们离得最近，太好了，因为它

00:08:10.740 --> 00:08:11.990
不必是标签名称。 

00:08:11.990 --> 00:08:12.420
它可以是一个类名。 

00:08:12.420 --> 00:08:14.640
 SURMA：我想知道我是否为此做过“增压”节目吗？ 

00:08:14.640 --> 00:08:15.330
等一下。 

00:08:15.330 --> 00:08:16.140
是的

00:08:16.140 --> 00:08:16.930
杰克：哦，对。 

00:08:16.930 --> 00:08:17.530
是的

00:08:17.530 --> 00:08:19.250
我确实担心也许会发生

00:08:19.250 --> 00:08:21.270
我现在展示的东西之间有很多交叉

00:08:21.270 --> 00:08:22.620
和“增压”。 

00:08:22.620 --> 00:08:24.540
瑟玛：这是因为据我所知， 

00:08:24.540 --> 00:08:28.900
最接近的灵感来自jQuery，以及jQuery系列。 

00:08:28.900 --> 00:08:32.100
杰克：也许还会有一些。 

00:08:32.100 --> 00:08:34.620
继续吧

00:08:34.620 --> 00:08:36.159
这是怎么回事

00:08:36.159 --> 00:08:36.961
祝好运。 

00:08:36.961 --> 00:08:37.669
苏尔玛：好的。 

00:08:37.669 --> 00:08:38.220
等等。 

00:08:38.220 --> 00:08:42.509
因此，您要替换的只是一个加号？ 

00:08:45.170 --> 00:08:48.380
加号之前的所有内容都会匹配加号吗？ 

00:08:48.380 --> 00:08:50.400
杰克：是的，那是字面上的加法。 

00:08:50.400 --> 00:08:53.540
 SURMA：哇，这很令人困惑，因为通常加号表示

00:08:53.540 --> 00:08:57.179
前面的匹配器重复一次或多次。 

00:08:57.179 --> 00:08:58.970
杰克：但是如果没有前面的匹配者， 

00:08:58.970 --> 00:09:00.230
我敢肯定那行得通。 

00:09:00.230 --> 00:09:02.075
其中一些我还没有彻底检查过。 

00:09:02.075 --> 00:09:03.200
我敢肯定那行得通。 

00:09:03.200 --> 00:09:05.720
 SURMA：为清楚起见，我可能会反斜杠

00:09:05.720 --> 00:09:08.420
无论如何，除非它随后断裂，因为是右轴。 

00:09:08.420 --> 00:09:10.120
杰克：越过第一行。 

00:09:10.120 --> 00:09:12.770
瑟玛：我们正在用空格代替加号。 

00:09:12.770 --> 00:09:16.060
然后我们得到一个结果

00:09:16.060 --> 00:09:18.334
哦，您正在完全解析自己的替代项，不是吗？ 

00:09:18.334 --> 00:09:19.000
杰克：是的，我是。 

00:09:19.000 --> 00:09:22.231
好吧，特别是查询字符串。 

00:09:22.231 --> 00:09:23.230
 SURMA：查询字符串。 

00:09:23.230 --> 00:09:26.120
是的，因为空格在代码中。 

00:09:26.120 --> 00:09:28.690
优点和个别参数

00:09:28.690 --> 00:09:32.380
被与号分隔，然后您

00:09:32.380 --> 00:09:33.670
进行[音频不清晰]拆分。 

00:09:33.670 --> 00:09:35.170
然后，实际上，最后-哦，你

00:09:35.170 --> 00:09:37.840
进行URI组件解码。 

00:09:37.840 --> 00:09:39.170
那是很多工作。 

00:09:39.170 --> 00:09:41.250
杰克：这是很多工作，而且看起来- 

00:09:41.250 --> 00:09:42.880
 SURMA：这令人沮丧，因为浏览器可以

00:09:42.880 --> 00:09:44.440
在编码中真正理解它，并做到这一点

00:09:44.440 --> 00:09:45.790
自己真让人沮丧。 

00:09:45.790 --> 00:09:46.420
杰克：是的。 

00:09:46.420 --> 00:09:49.300
查看URL来确定内容很有用。 

00:09:49.300 --> 00:09:50.866
它可以是当前URL， 

00:09:50.866 --> 00:09:52.240
或者它可以是链接的URL， 

00:09:52.240 --> 00:09:54.160
或者可能是您要发送的某些表单数据， 

00:09:54.160 --> 00:09:55.930
因为在编码上是一样的

00:09:55.930 --> 00:09:57.610
而且必须这样做才能弄清楚- 

00:10:00.420 --> 00:10:04.030
 SURMA：URL搜索父母。 

00:10:04.030 --> 00:10:06.760
杰克：我们现在有了它，真是太好了， 

00:10:06.760 --> 00:10:08.330
我们在所有现代领域都拥有这一点

00:10:08.330 --> 00:10:09.955
 SURMA：我仍然很生气

00:10:09.955 --> 00:10:13.489
没有在位置对象上添加新属性。 

00:10:13.489 --> 00:10:14.530
杰克：那你知道为什么吗？ 

00:10:14.530 --> 00:10:18.460
因此，如果您执行新的URL并解析其中的URL， 

00:10:18.460 --> 00:10:20.145
您现在有了URL.search参数， 

00:10:20.145 --> 00:10:21.770
这是一个实例，你

00:10:21.770 --> 00:10:23.500
在查询字符串中表示。 

00:10:23.500 --> 00:10:26.740
问题是位置对象

00:10:26.740 --> 00:10:30.386
跨Windows提供。 

00:10:30.386 --> 00:10:31.760
瑟玛：哦，所以，如果我打开一个窗户， 

00:10:31.760 --> 00:10:32.834
我可以访问- 

00:10:32.834 --> 00:10:35.250
杰克：是的，即使那个窗口在另一个进程中， 

00:10:35.250 --> 00:10:39.230
像iframe一样，您仍然可以访问位置对象， 

00:10:39.230 --> 00:10:40.790
这就是整个问题

00:10:40.790 --> 00:10:45.765
实现这一点的原因是存在这个额外的对象。 

00:10:45.765 --> 00:10:47.310
 SURMA：为什么会有问题？ 

00:10:47.310 --> 00:10:50.600
杰克：因为我们有窗口代理，所以我们需要

00:10:50.600 --> 00:10:53.350
等同于搜索参数的代理， 

00:10:53.350 --> 00:10:55.100
因为诸如[音频不清晰]之类的

00:10:55.100 --> 00:10:56.480
这样的东西，它不是在引用

00:10:56.480 --> 00:10:57.530
完全相同的对象。 

00:10:57.530 --> 00:10:58.550
 SURMA：如果我们定义的话，我会好的

00:10:58.550 --> 00:11:01.400
一个[音频不清晰]函数，它只是给我一个新实例。 

00:11:01.400 --> 00:11:04.010
杰克：在同一个领域。 

00:11:04.010 --> 00:11:06.090
 SURMA：每次我进行新的URL搜索时， 

00:11:06.090 --> 00:11:11.060
新网址，然后是location.string或其他内容- 

00:11:11.060 --> 00:11:12.904
比起[听不清] 

00:11:12.904 --> 00:11:14.070
到我们之前要做的

00:11:14.070 --> 00:11:14.600
杰克：同意。 

00:11:14.600 --> 00:11:17.058
这是可以解决的，但如果在那儿会很好。 

00:11:17.058 --> 00:11:19.520
但是，是的，它[听不清] 

00:11:19.520 --> 00:11:21.470
编码，解码。 

00:11:21.470 --> 00:11:24.020
它就在那里，而且很棒。 

00:11:24.020 --> 00:11:26.195
优秀的。 

00:11:26.195 --> 00:11:29.230
 SURMA：啊，FileReader。 

00:11:29.230 --> 00:11:31.450
我不确定FileReader。 

00:11:31.450 --> 00:11:36.850
因此，它应该可以帮助您读取Blob和文件

00:11:36.850 --> 00:11:39.310
是从文件选择器中获得的。 

00:11:39.310 --> 00:11:41.774
这是基于超级非承诺的

00:11:41.774 --> 00:11:42.940
 API，总是很棒的。 

00:11:42.940 --> 00:11:46.450
就像[听不清]，但是对于文件来说，是某种方式。 

00:11:46.450 --> 00:11:49.471
是支持超片状

00:11:49.471 --> 00:11:50.720
浏览器，或者实际上是- 

00:11:50.720 --> 00:11:52.390
杰克：不，这是有根据的。 

00:11:52.390 --> 00:11:55.150
正如您所说，它早于承诺。 

00:11:55.150 --> 00:11:57.049
这将需要一个Blob或一个文件，因为file 

00:11:57.049 --> 00:11:57.840
从Blob继承。 

00:11:57.840 --> 00:11:59.890
如果您想接受- 

00:11:59.890 --> 00:12:02.172
因为Blob，您无法访问这些字节。 

00:12:02.172 --> 00:12:03.630
如果要访问字节，则为

00:12:03.630 --> 00:12:05.890
如文本或数组缓冲区

00:12:05.890 --> 00:12:09.820
是您必须处理的一团糟。 

00:12:09.820 --> 00:12:13.010
如今[听不清]。 

00:12:13.010 --> 00:12:16.870
 SURMA：[听不清]您最近对其进行了调整，我认为， 

00:12:16.870 --> 00:12:18.640
这就是我学到的东西。 

00:12:18.640 --> 00:12:22.390
是的，我从没想过以这种方式滥用回应。 

00:12:22.390 --> 00:12:24.250
我认为这实际上不是滥用行为，因为- 

00:12:24.250 --> 00:12:25.480
杰克：当你真的不真正的时候，它正在创造一个回应

00:12:25.480 --> 00:12:27.450
只需要因为它上面有这些方法。 

00:12:27.450 --> 00:12:28.840
瑟玛：但这突然基于承诺，[听不清] 

00:12:28.840 --> 00:12:30.820
因为实际上，您知道发生了什么事， 

00:12:30.820 --> 00:12:32.000
我认为那是一个很大的不同。 

00:12:32.000 --> 00:12:34.166
杰克：那是我们设计的一件事

00:12:34.166 --> 00:12:37.467
响应API，我们希望它很容易获得

00:12:37.467 --> 00:12:39.550
这些其他格式，例如文本或数组缓冲区， 

00:12:39.550 --> 00:12:40.660
这些东西。 

00:12:40.660 --> 00:12:41.987
不错的基于诺言的API。 

00:12:41.987 --> 00:12:43.570
显然，异步功能是一回事

00:12:43.570 --> 00:12:46.600
我们以前不曾拥有我现在想当然的东西。 

00:12:46.600 --> 00:12:50.060
这一切都使浏览器变得更加容易。 

00:12:50.060 --> 00:12:51.760
所以最后一个。 

00:12:51.760 --> 00:12:52.554
瑟玛：等等，什么？ 

00:12:52.554 --> 00:12:54.220
杰克：如果你至少能尝到一点味道

00:12:54.220 --> 00:12:56.480
对于这里发生的事情。 

00:12:56.480 --> 00:13:01.390
 SURMA：我们正在创建一个样式对象。 

00:13:01.390 --> 00:13:04.290
我们正在创建一个随机动画。 

00:13:08.120 --> 00:13:10.955
生成动画[音频不清晰]广泛翻译

00:13:10.955 --> 00:13:15.380
然后添加新样式，然后添加新动画

00:13:15.380 --> 00:13:18.232
到一个对象，等待- 

00:13:18.232 --> 00:13:19.190
杰克：你知道吗？ 

00:13:19.190 --> 00:13:20.822
我会为您节省时间。 

00:13:20.822 --> 00:13:22.280
这是如果您要创建

00:13:22.280 --> 00:13:25.244
程序动画。 

00:13:25.244 --> 00:13:26.540
苏玛：我明白了。 

00:13:26.540 --> 00:13:29.485
因为在过去，您只有CSS。 

00:13:29.485 --> 00:13:31.610
杰克：是的，所以如果我想从某件事上做动画

00:13:31.610 --> 00:13:34.400
对于其他事情，这是我必须要做的事情。 

00:13:34.400 --> 00:13:35.880
我必须创建关键帧。 

00:13:35.880 --> 00:13:37.463
 SURMA：AD hoc关键帧动画， 

00:13:37.463 --> 00:13:38.992
将其添加为样式标签。 

00:13:38.992 --> 00:13:41.060
杰克：这是因为动画可能会结束

00:13:41.060 --> 00:13:43.820
否则它可能会取消，所以我需要聆听两者才能知道

00:13:43.820 --> 00:13:45.380
动画完成后。 

00:13:45.380 --> 00:13:47.270
并将其变成诺言。 

00:13:51.860 --> 00:13:52.360
 - 

00:13:52.360 --> 00:13:54.160
 SURMA：Web动画的API。 

00:13:54.160 --> 00:13:56.050
终于到了一个地步

00:13:56.050 --> 00:13:57.760
跨浏览器变得可用。 

00:13:57.760 --> 00:14:00.220
杰克：是的，这是不同的主题

00:14:00.220 --> 00:14:05.110
来自其他示例，因为我们仍然没有这个。 

00:14:05.110 --> 00:14:07.452
 SURMA：我们在Chrome中至少有一个子集。 

00:14:07.452 --> 00:14:09.160
杰克：我们还没有完成承诺。 

00:14:09.160 --> 00:14:10.150
瑟玛：不，我们没有。 

00:14:10.150 --> 00:14:10.820
我们卖光了。 

00:14:10.820 --> 00:14:11.320
确实如此。 

00:14:11.320 --> 00:14:13.070
杰克：你知道那是谁的错吗？ 

00:14:13.070 --> 00:14:16.070
瑟玛：我妈妈是？ 

00:14:16.070 --> 00:14:17.990
杰克：是的，是的。 

00:14:17.990 --> 00:14:24.561
是我的错，因为在他设计这个的时候， 

00:14:24.561 --> 00:14:26.810
我们尚未决定如何处理可撤销的承诺

00:14:26.810 --> 00:14:27.970
当时。 

00:14:27.970 --> 00:14:33.564
而且由于完成承诺可能会取消， 

00:14:33.564 --> 00:14:36.230
我踩了刹车，说我们还不能发货，因为它

00:14:36.230 --> 00:14:37.250
可能是

00:14:37.250 --> 00:14:40.040
 SURMA：女士们，先生们，请在Jake发表推文。 

00:14:40.040 --> 00:14:40.880
杰克：对不起。 

00:14:40.880 --> 00:14:42.110
而且你知道更糟吗？ 

00:14:42.110 --> 00:14:45.500
他们所做的就是我们最终要做的。 

00:14:45.500 --> 00:14:49.160
因此，如果我们发货了，那就没问题了。 

00:14:49.160 --> 00:14:52.940
我曾经为BBC做过JavaScript库， 

00:14:52.940 --> 00:14:57.680
而且我们不得不针对Safari 1.3之类的东西， 

00:14:57.680 --> 00:14:59.275
这就是那种东西。 

00:14:59.275 --> 00:15:00.650
我向你展示的所有这些东西，我

00:15:00.650 --> 00:15:02.441
那时会为这个东西杀了。 

00:15:02.441 --> 00:15:04.889
很高兴看到- 

00:15:04.889 --> 00:15:06.930
我们看了未来可能降落的有趣事物， 

00:15:06.930 --> 00:15:08.350
就像，哦，看起来很有趣。 

00:15:08.350 --> 00:15:10.934
很高兴停下来看看情况已经好转了。 

00:15:10.934 --> 00:15:12.308
 SURMA：现在，我们有了美好的事物。 

00:15:12.308 --> 00:15:13.560
杰克：情况已经好了。 

00:15:13.560 --> 00:15:18.140
我倾向于在舞台上锁定我的手臂。 

00:15:18.140 --> 00:15:20.090
我像僵尸营一样走来走去。 

00:15:20.090 --> 00:15:21.710
 SURMA：那是出汗的恐惧吗？ 

00:15:21.710 --> 00:15:24.290
杰克：我想可能就是那样。 

00:15:24.290 --> 00:15:26.469
所以我在说- 

00:15:26.469 --> 00:15:27.760
这就是它的工作方式。 

00:15:27.760 --> 00:15:29.810
 SURMA：进入霸王模式。 

00:15:29.810 --> 00:15:31.190
杰克：在键盘上打字。 

00:15:31.190 --> 00:15:33.100
开我的车。 

