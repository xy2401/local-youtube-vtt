WEBVTT
Kind: captions
Language: en

00:00:00.499 --> 00:00:02.790
JAKE ARCHIBALD: So do you know--

00:00:02.790 --> 00:00:03.860
SURMA: No.

00:00:03.860 --> 00:00:05.490
JAKE ARCHIBALD: Good.

00:00:05.490 --> 00:00:06.603
Next topic.

00:00:06.603 --> 00:00:09.984
[MUSIC PLAYING]

00:00:13.860 --> 00:00:15.830
SURMA: So you know
how JavaScript

00:00:15.830 --> 00:00:19.452
has all these primitives, like
map, and set, and WeakMap,

00:00:19.452 --> 00:00:21.410
and all these like little,
nice data structures

00:00:21.410 --> 00:00:22.440
to build things?

00:00:22.440 --> 00:00:24.320
JAKE ARCHIBALD: Yes.

00:00:24.320 --> 00:00:29.277
SURMA: I wanted to build
something with a WeakMap

00:00:29.277 --> 00:00:30.110
JAKE ARCHIBALD: Yes.

00:00:30.110 --> 00:00:31.230
And WeakMaps are great.

00:00:31.230 --> 00:00:33.377
SURMA: They're
underused, but great.

00:00:33.377 --> 00:00:34.960
JAKE ARCHIBALD: You
could say WeakMaps

00:00:34.960 --> 00:00:37.767
are a way of associating an
object with another object.

00:00:37.767 --> 00:00:39.350
SURMA: And see, you
already said that.

00:00:39.350 --> 00:00:40.460
And this is where I
was already wrong,

00:00:40.460 --> 00:00:42.950
because I just wanted to have
strings mapping to objects.

00:00:42.950 --> 00:00:43.450
Things.

00:00:43.450 --> 00:00:48.450
My concept was, I just
have a list of keys,--

00:00:48.450 --> 00:00:50.790
strings, you know,
keys, strings--

00:00:50.790 --> 00:00:52.910
and I want to map
them to objects.

00:00:52.910 --> 00:00:54.750
But I wanted to allow
these objects to get

00:00:54.750 --> 00:00:56.480
garbage collected,
if necessary, which

00:00:56.480 --> 00:00:57.830
is the purpose of a WeakMap.

00:00:57.830 --> 00:01:00.770
You can have them in
this map, but it doesn't

00:01:00.770 --> 00:01:02.190
prevent garbage collection.

00:01:02.190 --> 00:01:04.047
JAKE ARCHIBALD:
So we have this--

00:01:04.047 --> 00:01:06.380
so we should say that one of
the good use cases for this

00:01:06.380 --> 00:01:07.970
is like we used to put like--

00:01:07.970 --> 00:01:11.180
if you wanted some data
associated with a DOM node,

00:01:11.180 --> 00:01:13.280
say, we used to
use like expandos.

00:01:13.280 --> 00:01:15.410
Those We use to just
like put DOM node dot

00:01:15.410 --> 00:01:17.270
underscore some data.

00:01:17.270 --> 00:01:19.971
We got data attributes
in the end, but--

00:01:19.971 --> 00:01:20.470
SURMA: No.

00:01:20.470 --> 00:01:20.930
JAKE ARCHIBALD:
--what if you want

00:01:20.930 --> 00:01:22.400
it to be objects or something?

00:01:22.400 --> 00:01:23.900
And WeakMap's a
great way of saying,

00:01:23.900 --> 00:01:25.980
this object, that I don't
really want to edit,

00:01:25.980 --> 00:01:28.280
because I don't
own its prototype,

00:01:28.280 --> 00:01:30.455
I want to associate with
this set of data I do own.

00:01:30.455 --> 00:01:30.730
SURMA: Yeah.

00:01:30.730 --> 00:01:31.813
JAKE ARCHIBALD: And then--

00:01:31.813 --> 00:01:33.950
so then if that DOM node
goes out of reference,

00:01:33.950 --> 00:01:35.630
because it's like
removed and, you know,

00:01:35.630 --> 00:01:38.450
nothing's got access to it,
then your object, as well,

00:01:38.450 --> 00:01:40.820
can be garbage collected if
there's no reference to it.

00:01:40.820 --> 00:01:42.320
SURMA: So this is
where I was wrong.

00:01:42.320 --> 00:01:45.380
It's not about the values
not being garbage collected,

00:01:45.380 --> 00:01:48.200
but the keys not being
garbage collected.

00:01:48.200 --> 00:01:49.940
JAKE ARCHIBALD: Yes,
so you get to-- you

00:01:49.940 --> 00:01:51.710
get to keep your
access, your ability

00:01:51.710 --> 00:01:54.830
to access the value as
long as you have the key.

00:01:54.830 --> 00:01:57.310
And that's why
strings don't work,--

00:01:57.310 --> 00:01:57.810
SURMA: Yes.

00:01:57.810 --> 00:01:58.430
JAKE ARCHIBALD: --because it's--

00:01:58.430 --> 00:02:00.280
well, and it's true
for numbers as well.

00:02:00.280 --> 00:02:01.110
It's true for all primitives.

00:02:01.110 --> 00:02:02.180
SURMA: Yes, you need to have--

00:02:02.180 --> 00:02:03.930
I found out that you
need to have an object.

00:02:03.930 --> 00:02:04.929
I didn't understand why.

00:02:04.929 --> 00:02:07.820
But I guess this is where my
mental model of the WeakMap

00:02:07.820 --> 00:02:10.430
was wrong, because I thought
the keys are just keys,

00:02:10.430 --> 00:02:12.470
but the values could get
garbage collected, even

00:02:12.470 --> 00:02:13.250
if they were still on the map.

00:02:13.250 --> 00:02:15.020
But it's the keys
that still can get

00:02:15.020 --> 00:02:17.450
garbage collected, even if
they're in use in the WeakMap

00:02:17.450 --> 00:02:18.950
JAKE ARCHIBALD: And
you use your key

00:02:18.950 --> 00:02:21.920
to unlock the door to get
access to the value, you see.

00:02:21.920 --> 00:02:22.605
SURMA: Ah.

00:02:22.605 --> 00:02:22.990
JAKE ARCHIBALD: See.

00:02:22.990 --> 00:02:23.640
SURMA: You gave a mnemonic.

00:02:23.640 --> 00:02:24.170
JAKE ARCHIBALD: A mnemonic.

00:02:24.170 --> 00:02:24.670
There we go.

00:02:24.670 --> 00:02:25.650
SURMA: That is amazing.

00:02:25.650 --> 00:02:27.366
JAKE ARCHIBALD: But yeah.

00:02:27.366 --> 00:02:29.740
And one of the things that
I've always been baffled by

00:02:29.740 --> 00:02:32.110
is like WeakSet.

00:02:32.110 --> 00:02:32.720
SURMA: Yeah.

00:02:32.720 --> 00:02:36.060
So one thing that neither
WeakMap, nor WeakSet have--

00:02:36.060 --> 00:02:38.560
so I guess, just-- the WeakMap
is this thing that, you know,

00:02:38.560 --> 00:02:40.354
the keys can get
garbage collected.

00:02:40.354 --> 00:02:41.270
JAKE ARCHIBALD: Great.

00:02:41.270 --> 00:02:41.770
Excellent.

00:02:41.770 --> 00:02:42.640
Yes, that's true.

00:02:42.640 --> 00:02:43.340
That's true.

00:02:43.340 --> 00:02:45.421
SURMA: And the
set is just a set.

00:02:45.421 --> 00:02:47.170
Nothing can be in there
twice, but it also

00:02:47.170 --> 00:02:48.820
doesn't prevent
garbage collection.

00:02:48.820 --> 00:02:50.403
JAKE ARCHIBALD: So
map with only keys.

00:02:50.403 --> 00:02:52.480
SURMA: But neither
of them are iterable.

00:02:52.480 --> 00:02:53.396
JAKE ARCHIBALD: Right.

00:02:53.396 --> 00:02:56.380
Because that would expose
garbage collection.

00:02:56.380 --> 00:02:58.810
And that's a rule of
the web for reasons

00:02:58.810 --> 00:03:01.090
I don't fully understand.

00:03:01.090 --> 00:03:02.710
But it is a rule
that we don't want

00:03:02.710 --> 00:03:04.001
to expose that for some reason.

00:03:04.001 --> 00:03:05.580
Do you have a use
case for WeakSet?

00:03:05.580 --> 00:03:06.640
SURMA: No.

00:03:06.640 --> 00:03:09.260
JAKE ARCHIBALD: So I
think I figured it out.

00:03:09.260 --> 00:03:13.595
Have you ever used a
WeakMap, where, you know,

00:03:13.595 --> 00:03:14.470
the key is an object?

00:03:14.470 --> 00:03:16.430
SURMA: I haven't used a
WeakMap really, so I--

00:03:16.430 --> 00:03:17.638
JAKE ARCHIBALD: Have you not?

00:03:17.638 --> 00:03:18.680
Well, they're great.

00:03:18.680 --> 00:03:22.300
But where the value is true.

00:03:22.300 --> 00:03:22.800
So I--

00:03:22.800 --> 00:03:26.220
SURMA: Which is a common
practice to emulate a set.

00:03:26.220 --> 00:03:27.220
JAKE ARCHIBALD: Exactly.

00:03:27.220 --> 00:03:28.010
And I had this.

00:03:28.010 --> 00:03:29.560
And this is-- because I'd
been thinking for ages,

00:03:29.560 --> 00:03:30.814
oh, a WeakSet, it's useless.

00:03:30.814 --> 00:03:32.230
And I had a piece
of code, where I

00:03:32.230 --> 00:03:38.110
needed to tag a request
object in that like I've

00:03:38.110 --> 00:03:39.940
dealt with this
request object or I've

00:03:39.940 --> 00:03:44.220
dealt with this response,
or I want it to say--

00:03:44.220 --> 00:03:45.310
I want it to say--

00:03:45.310 --> 00:03:47.050
this is from the-- if it was
a response, I want it to say,

00:03:47.050 --> 00:03:48.250
this is from the cache.

00:03:48.250 --> 00:03:50.670
And I started with just
using expando underscore

00:03:50.670 --> 00:03:52.440
from cache equals true.

00:03:52.440 --> 00:03:54.286
And then TypeScript complained.

00:03:54.286 --> 00:03:56.410
And so I thought, oh, I've
got to do this properly.

00:03:56.410 --> 00:03:57.990
OK.

00:03:57.990 --> 00:03:58.490
SURMA: Oh.

00:03:58.490 --> 00:04:00.323
JAKE ARCHIBALD: So I
ended up with a WeakMap

00:04:00.323 --> 00:04:01.480
where the value was true.

00:04:01.480 --> 00:04:03.813
And I stood back and thought,
no, this is not a WeakMap.

00:04:03.813 --> 00:04:04.602
This is a WeakSet.

00:04:04.602 --> 00:04:06.310
SURMA: I might actually
have to use this,

00:04:06.310 --> 00:04:10.690
because my current approach
to what you just said,

00:04:10.690 --> 00:04:15.280
basically marking elements as
having been processed already,

00:04:15.280 --> 00:04:17.670
is the expando thing.

00:04:17.670 --> 00:04:19.420
But instead of using
underscore something,

00:04:19.420 --> 00:04:21.795
I use symbols, because those
are guaranteed not to clash.

00:04:21.795 --> 00:04:22.750
So it feels safe.

00:04:22.750 --> 00:04:23.550
JAKE ARCHIBALD: Oh.

00:04:23.550 --> 00:04:24.150
Yeah, yeah.

00:04:24.150 --> 00:04:25.879
SURMA: But this one
is arguably better.

00:04:25.879 --> 00:04:26.795
JAKE ARCHIBALD: Right.

00:04:26.795 --> 00:04:29.140
Because you are keeping
the separation of data.

00:04:29.140 --> 00:04:31.764
And at some point,
the symbol thing,

00:04:31.764 --> 00:04:33.430
it's possible that
TypeScript will start

00:04:33.430 --> 00:04:34.706
complaining about that as well.

00:04:34.706 --> 00:04:36.200
SURMA: And I just augment
the type in TypeScript.

00:04:36.200 --> 00:04:38.170
I say like, this thing
is now on this type.

00:04:38.170 --> 00:04:39.086
JAKE ARCHIBALD: Right.

00:04:39.086 --> 00:04:39.594
OK.

00:04:39.594 --> 00:04:40.760
Which is what I did as well.

00:04:40.760 --> 00:04:41.926
And I wanted to not do that.

00:04:41.926 --> 00:04:43.150
And yeah, that's the thing.

00:04:43.150 --> 00:04:46.710
If you want to associate a
piece of data, there you go.

00:04:46.710 --> 00:04:48.990
SURMA: I will try
to reflect on that.

00:04:48.990 --> 00:04:50.190
I learned something today.

00:04:50.190 --> 00:04:51.030
JAKE ARCHIBALD: Yep.

00:04:51.030 --> 00:04:52.780
SURMA: I've become a
better web developer.

00:04:52.780 --> 00:04:55.770
Although, to be honest,
that is probably

00:04:55.770 --> 00:04:58.910
something that I would expect
to be in React somewhere,

00:04:58.910 --> 00:05:01.570
or like any framework, because
I feel every framework,

00:05:01.570 --> 00:05:03.990
it has some kind of
upgrading mechanism.

00:05:03.990 --> 00:05:05.617
Like you have DOM
and you need to--

00:05:05.617 --> 00:05:06.450
what did we call it?

00:05:06.450 --> 00:05:07.450
Hydrate it.

00:05:07.450 --> 00:05:09.427
Or do any kind of
processing on DOM,

00:05:09.427 --> 00:05:11.760
and say like we are now aware
that this is not only DOM,

00:05:11.760 --> 00:05:14.640
but this is tied to a React
component, for example.

00:05:14.640 --> 00:05:15.690
JAKE ARCHIBALD: Yep.

00:05:15.690 --> 00:05:17.648
SURMA: This is where this
would come into play.

00:05:17.648 --> 00:05:20.500
JAKE ARCHIBALD: So this is
something that Hyper HTML uses.

00:05:20.500 --> 00:05:21.000
SURMA: Oh.

00:05:21.000 --> 00:05:21.780
JAKE ARCHIBALD:
So we were talking

00:05:21.780 --> 00:05:23.310
about this in the last episode.

00:05:23.310 --> 00:05:25.281
If you've got like a sort of--

00:05:25.281 --> 00:05:29.096
Hyper HTML calls it a wire, but
it's kind of like a partial.

00:05:29.096 --> 00:05:30.720
So you know, you've
got a list element,

00:05:30.720 --> 00:05:32.760
and you've got
something to create

00:05:32.760 --> 00:05:35.260
list items from like an object.

00:05:35.260 --> 00:05:37.710
Hyper HTML wants you
to use an object,

00:05:37.710 --> 00:05:40.830
give it an object that it will
associate that set of data

00:05:40.830 --> 00:05:41.640
with.

00:05:41.640 --> 00:05:42.300
SURMA: Oh.

00:05:42.300 --> 00:05:42.420
Nice.

00:05:42.420 --> 00:05:44.336
JAKE ARCHIBALD: Usually
that will be an object

00:05:44.336 --> 00:05:46.320
you have that represents
the array of things.

00:05:46.320 --> 00:05:50.140
So that means that you have
stuff like when you go in--

00:05:50.140 --> 00:05:53.609
it's how it knows you're
modifying an existing list,

00:05:53.609 --> 00:05:54.150
rather than--

00:05:54.150 --> 00:05:54.610
SURMA: Smart.

00:05:54.610 --> 00:05:56.070
JAKE ARCHIBALD:
Yeah, use a WeakMap.

00:05:56.070 --> 00:05:57.570
And it means it
doesn't leak memory,

00:05:57.570 --> 00:05:59.860
because as soon as your
object goes out of reference,

00:05:59.860 --> 00:06:01.459
so does Hyper HTML's cache.

00:06:01.459 --> 00:06:03.250
SURMA: So I think it
really is like they're

00:06:03.250 --> 00:06:05.910
a little bit of the unsung
heroes of the JavaScript,

00:06:05.910 --> 00:06:07.830
the ECMAScript.

00:06:07.830 --> 00:06:09.202
What is it?

00:06:09.202 --> 00:06:10.710
JAKE ARCHIBALD: It's ECMAScript.

00:06:10.710 --> 00:06:12.735
But sometimes it's JavaScript.

00:06:12.735 --> 00:06:15.360
Do you get dragged in by
people's accents as well?

00:06:15.360 --> 00:06:17.820
Google being in San Francisco,
whenever we go out there,

00:06:17.820 --> 00:06:19.585
I find one week in,
I'm like, yeah, yeah.

00:06:19.585 --> 00:06:20.780
Ah, ah.

00:06:20.780 --> 00:06:21.630
It's that--

00:06:21.630 --> 00:06:23.100
SURMA: I'm like totally into it.

00:06:23.100 --> 00:06:24.454
Totally Totally there.

00:06:24.454 --> 00:06:26.830
I don't know what accent
I was trying to do there.

00:06:26.830 --> 00:06:27.600
It's sort of--

00:06:27.600 --> 00:06:28.470
SURMA: You have
enough people that

00:06:28.470 --> 00:06:29.594
can tell the accents apart.

00:06:29.594 --> 00:06:31.970
It's like, it was
totally American.

