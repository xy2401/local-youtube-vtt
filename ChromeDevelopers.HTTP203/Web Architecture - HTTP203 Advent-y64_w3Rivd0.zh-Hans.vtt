WEBVTT
Kind: captions
Language: zh-Hans

00:00:00.000 --> 00:00:03.290
 [音乐播放] 

00:00:06.590 --> 00:00:08.490
 SURMA：所以您戴着圣诞帽

00:00:08.490 --> 00:00:09.509
因为是圣诞节。 

00:00:09.509 --> 00:00:10.050
发言者：是的。 

00:00:10.050 --> 00:00:11.591
瑟玛：和圣诞节一样， 

00:00:11.591 --> 00:00:14.070
我们将要谈论的十二件事

00:00:14.070 --> 00:00:15.870
对网络感到兴奋。 

00:00:15.870 --> 00:00:20.170
我以为我会谈论网络架构。 

00:00:20.170 --> 00:00:20.700
说话者：好的。 

00:00:20.700 --> 00:00:21.550
 2分钟。 

00:00:21.550 --> 00:00:22.110
那是什么？ 

00:00:22.110 --> 00:00:22.651
建筑。 

00:00:22.651 --> 00:00:23.820
那是建筑物。 

00:00:23.820 --> 00:00:25.403
伙计，这与网络无关。 

00:00:25.403 --> 00:00:26.220
你很困惑

00:00:26.220 --> 00:00:30.600
瑟玛：嗯，问题是还有很多其他领域， 

00:00:30.600 --> 00:00:32.529
像企业工程和游戏， 

00:00:32.529 --> 00:00:35.070
在构建时喜欢这些建筑模式，例如， 

00:00:35.070 --> 00:00:35.980
真的很复杂。 

00:00:35.980 --> 00:00:36.150
发言者：不。 

00:00:36.150 --> 00:00:37.441
领域没有建筑。 

00:00:37.441 --> 00:00:39.245
您正在考虑城市。 

00:00:39.245 --> 00:00:41.370
 SURMA：软件体系结构，软件工程。 

00:00:41.370 --> 00:00:45.090
您想出了用于组合和组合事物的模式

00:00:45.090 --> 00:00:46.620
而且，就像分离

00:00:46.620 --> 00:00:49.080
所有这些事情。 

00:00:49.080 --> 00:00:50.680
网络还没有真正做到这一点。 

00:00:50.680 --> 00:00:52.320
我的意思是，您本可以做到的，但是开发人员大多都喜欢， 

00:00:52.320 --> 00:00:53.490
这是我构建的一个小应用， 

00:00:53.490 --> 00:00:54.906
或者他们只是把东西放在一起

00:00:54.906 --> 00:00:57.120
并在后端执行大多数复杂的工作。 

00:00:57.120 --> 00:00:59.760
我认为现在是前端开发人员的时候了

00:00:59.760 --> 00:01:02.772
在其前端代码中也具有适当的架构。 

00:01:02.772 --> 00:01:04.980
发言者：这不是所有框架吗

00:01:04.980 --> 00:01:06.065
一直在做？ 

00:01:06.065 --> 00:01:06.690
苏尔玛：是的。 

00:01:06.690 --> 00:01:09.032
但是我认为这些模式应该更多地暴露

00:01:09.032 --> 00:01:10.240
给开发商自己。 

00:01:10.240 --> 00:01:14.220
例如，我认为网络具有演员模式， 

00:01:14.220 --> 00:01:18.396
您有正在运行的独立线程

00:01:18.396 --> 00:01:19.770
在单线程模式下，但是它们

00:01:19.770 --> 00:01:21.120
使用[音频不清晰]进行通信。 

00:01:21.120 --> 00:01:22.370
这几乎就是我们网络上的内容。 

00:01:22.370 --> 00:01:23.954
这就是所谓的演员模式， 

00:01:23.954 --> 00:01:26.370
但网上几乎没有将这两件事结合在一起。 

00:01:26.370 --> 00:01:28.980
而且我认为还有更多这样的模式

00:01:28.980 --> 00:01:30.690
尚未应用于网络的内容

00:01:30.690 --> 00:01:34.590
使您的前端架构更易于管理

00:01:34.590 --> 00:01:35.724
更好地配合。 

00:01:35.724 --> 00:01:37.890
发言者：那么，我们需要做些什么呢？ 

00:01:37.890 --> 00:01:39.930
瑟玛：我想我们已经拥有了一切

00:01:39.930 --> 00:01:41.760
我们需要使其发挥作用，但是我们

00:01:41.760 --> 00:01:42.802
还没有开始使用它。 

00:01:42.802 --> 00:01:44.593
就像，我们只需要寻找模式

00:01:44.593 --> 00:01:47.240
游戏工程师使用的，企业工程师用户使用的， 

00:01:47.240 --> 00:01:49.920
看看这些对我们的网络是否有用， 

00:01:49.920 --> 00:01:52.080
并尝试使用它来构建事物。 

00:01:52.080 --> 00:01:53.100
并进行实验。 

00:01:53.100 --> 00:01:54.810
说话者：因此，从主线程中删除东西

00:01:54.810 --> 00:01:56.490
除了UI内容[听不清]？ 

00:01:56.490 --> 00:01:57.060
 SURMA：例如。 

00:01:57.060 --> 00:01:58.601
这是我要研究的一件事。 

00:01:58.601 --> 00:02:00.660
然后您如何区分这些关注点？ 

00:02:00.660 --> 00:02:04.230
哪些线程进入关闭线程，哪些线程保留在主线程上？ 

00:02:04.230 --> 00:02:06.880
然后，如何在线程外构造代码， 

00:02:06.880 --> 00:02:08.880
因为那仍然只是逻辑上的一大螺栓。 

00:02:08.880 --> 00:02:11.210
你是如何组成那些小东西的？ 

00:02:11.210 --> 00:02:11.310
 [听不清]？ 

00:02:11.310 --> 00:02:13.851
发言者：那么在10秒内，主线程上应该是什么？ 

00:02:13.851 --> 00:02:14.476
 SURMA：UI工作。 

00:02:14.476 --> 00:02:15.100
发言者：对。 

00:02:15.100 --> 00:02:17.310
在六秒钟内，主线程上不应该有什么？ 

00:02:17.310 --> 00:02:18.240
 SURMA：不支持UI。 

00:02:18.240 --> 00:02:19.281
发言者：正确。 

00:02:19.281 --> 00:02:21.068
做得好。 

00:02:21.068 --> 00:02:23.900
 [音乐播放] 

00:02:24.400 --> 00:02:25.590
搞定了。 

00:02:25.590 --> 00:02:27.990
我想谈谈失重的CSS。 

00:02:27.990 --> 00:02:29.612
瑟玛：失重？ 

00:02:29.612 --> 00:02:31.320
说话者：这是我说的一句话。 

00:02:31.320 --> 00:02:32.910
另一个是CSS。 

00:02:32.910 --> 00:02:35.010
 SURMA：所以CSS不重。 

00:02:35.010 --> 00:02:37.760
发言者：是的，这与我所说的完全相反。 

00:02:37.760 --> 00:02:39.520
瑟玛：什么是体重？ 

