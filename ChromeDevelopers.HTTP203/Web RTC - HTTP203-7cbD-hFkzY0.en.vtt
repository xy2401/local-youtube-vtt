WEBVTT
Kind: captions
Language: en

00:00:00.500 --> 00:00:05.540
SURMA: I have been dabbling
a little bit with WebRTC.

00:00:05.540 --> 00:00:06.350
JAKE: Oh.

00:00:06.350 --> 00:00:07.530
SURMA: Exactly.

00:00:07.530 --> 00:00:09.280
I mean, we can stop
the topic right there.

00:00:09.280 --> 00:00:11.610
We pretty much already
spoiled the conclusion.

00:00:11.610 --> 00:00:12.995
[JAKE MAKES CRICKET NOISES]

00:00:12.995 --> 00:00:14.050
SURMA: Not even that.

00:00:14.050 --> 00:00:15.140
JAKE: That's all I
know about WebRTC.

00:00:15.140 --> 00:00:16.210
SURMA: That is the first thing--

00:00:16.210 --> 00:00:16.300
JAKE: That's what I hear.

00:00:16.300 --> 00:00:17.633
SURMA: --that already annoys me.

00:00:17.633 --> 00:00:21.090
So, WebRTC has been around
for a good amount of time.

00:00:21.090 --> 00:00:22.770
I want to say at
least four years.

00:00:22.770 --> 00:00:26.060
Because I know that Sam Dutton's
article on "HTML5 Rocks"

00:00:26.060 --> 00:00:27.760
is from 2013.

00:00:27.760 --> 00:00:29.240
So, it's been
around for a while.

00:00:29.240 --> 00:00:29.870
JAKE: Yes.

00:00:29.870 --> 00:00:32.130
SURMA: It allows you
to basically create

00:00:32.130 --> 00:00:36.150
a connection to
another browser that

00:00:36.150 --> 00:00:37.630
can be even on a
different machine,

00:00:37.630 --> 00:00:39.421
even on a different
network, theoretically.

00:00:39.421 --> 00:00:41.840
JAKE: So, video calling--

00:00:41.840 --> 00:00:43.660
SURMA: No, exact--

00:00:43.660 --> 00:00:47.120
[GRUNTS IN FRUSTRATION]
Yes, but no.

00:00:47.120 --> 00:00:47.620
JAKE: OK.

00:00:47.620 --> 00:00:48.400
No.

00:00:48.400 --> 00:00:48.900
No!

00:00:48.900 --> 00:00:52.190
[MUSIC PLAYING]

00:00:55.480 --> 00:00:57.490
SURMA: So I'm going to
explain first, and then

00:00:57.490 --> 00:00:58.480
give you the mnemonic.

00:00:58.480 --> 00:00:59.021
JAKE: OK, OK.

00:00:59.021 --> 00:01:03.570
SURMA: So, by default,
WebRTC connections

00:01:03.570 --> 00:01:09.490
are established by you figuring
out your own IP addresses.

00:01:09.490 --> 00:01:12.670
So you figure, I'm
available over localhost.

00:01:12.670 --> 00:01:14.647
Then you get your
local IP network, IPs.

00:01:14.647 --> 00:01:15.730
And that's pretty much it.

00:01:15.730 --> 00:01:17.140
That's what you send
over to the other client,

00:01:17.140 --> 00:01:18.040
and they try to connect.

00:01:18.040 --> 00:01:19.120
JAKE: But you send
to the other client,

00:01:19.120 --> 00:01:20.730
I'm available on localhost.

00:01:20.730 --> 00:01:22.190
SURMA: Yeah, if you're on
the same machine, that works.

00:01:22.190 --> 00:01:22.610
JAKE: OK, I see.

00:01:22.610 --> 00:01:23.151
SURMA: Right?

00:01:23.151 --> 00:01:24.610
They-- all the
possible addresses

00:01:24.610 --> 00:01:26.270
that you know you could
be available under,

00:01:26.270 --> 00:01:27.580
you somehow pass to
the other client,

00:01:27.580 --> 00:01:28.460
and then they try to connect.

00:01:28.460 --> 00:01:30.910
JAKE: Oh, so you find them
all, and it just tries them.

00:01:30.910 --> 00:01:31.126
SURMA: You can.

00:01:31.126 --> 00:01:31.625
Yes.

00:01:31.625 --> 00:01:34.960
You get a series of
events for ICE candidates.

00:01:34.960 --> 00:01:37.000
And ICE is this protocol
on how to establish--

00:01:37.000 --> 00:01:38.440
JAKE: Oh my god,
this is full of--

00:01:38.440 --> 00:01:38.860
SURMA: Yes, exactly.

00:01:38.860 --> 00:01:38.990
JAKE: An ICE--

00:01:38.990 --> 00:01:39.580
SURMA: Let's not--let's not--

00:01:39.580 --> 00:01:41.120
JAKE: An ICE candidate.

00:01:41.120 --> 00:01:44.350
SURMA: But that only
works if these peers

00:01:44.350 --> 00:01:46.009
are on the same machine.

00:01:46.009 --> 00:01:46.800
So localhost works.

00:01:46.800 --> 00:01:50.260
Or on the same network without
client separation, which

00:01:50.260 --> 00:01:52.120
most public hot spots have.

00:01:52.120 --> 00:01:52.620
JAKE: Right.

00:01:52.620 --> 00:01:54.145
SURMA: So, if you're
at home and you

00:01:54.145 --> 00:01:56.728
have your phone and your laptop,
this will most likely already

00:01:56.728 --> 00:01:59.620
work without a STUN
or a TURN server.

00:01:59.620 --> 00:02:00.160
JAKE: OK.

00:02:00.160 --> 00:02:02.784
Because they both know their IP
address is in the same network,

00:02:02.784 --> 00:02:04.360
they can talk to each other.

00:02:04.360 --> 00:02:05.790
SURMA: And then you establish
the connection with--

00:02:05.790 --> 00:02:06.700
JAKE: But nothing
leaves the house.

00:02:06.700 --> 00:02:08.450
SURMA: Yeah-- with the
WebRTC shenanigans,

00:02:08.450 --> 00:02:10.960
which is another completely
different and super-awful

00:02:10.960 --> 00:02:11.630
topic.

00:02:11.630 --> 00:02:14.301
But, if you are not
on the same network.

00:02:14.301 --> 00:02:14.800
JAKE: Right.

00:02:14.800 --> 00:02:16.480
SURMA: For example
you're roaming--

00:02:16.480 --> 00:02:17.980
or no, not if you're
roaming, you're

00:02:17.980 --> 00:02:20.515
out with your phone, which
has a proper public IP.

00:02:20.515 --> 00:02:21.814
JAKE: Yes.

00:02:21.814 --> 00:02:23.230
SURMA: So no
firewalling, but just

00:02:23.230 --> 00:02:25.470
a public IP, the
phone doesn't know

00:02:25.470 --> 00:02:26.950
it's public IP necessarily.

00:02:26.950 --> 00:02:29.810
So that's when a STUN
server comes into play.

00:02:29.810 --> 00:02:33.310
The sole purpose of a STUN
server is to receive a request,

00:02:33.310 --> 00:02:35.950
figure out which IP
this request came from,

00:02:35.950 --> 00:02:38.950
and give back a signal in a
WebRTC-compatible way that

00:02:38.950 --> 00:02:40.730
says, this is your public IP.

00:02:40.730 --> 00:02:42.539
So you can add that to
your ICE candidates,

00:02:42.539 --> 00:02:44.080
because that's
another IP that you're

00:02:44.080 --> 00:02:45.580
potentially reachable under.

00:02:45.580 --> 00:02:48.010
If, however, you're behind
your router at home,

00:02:48.010 --> 00:02:50.530
or you have a firewall where
incoming connections are

00:02:50.530 --> 00:02:53.230
blocked or you actually have
to do some NATing to get back

00:02:53.230 --> 00:02:54.462
to your actual connection.

00:02:54.462 --> 00:02:56.170
JAKE: Some NATing,
we'll gloss over that.

00:02:56.170 --> 00:02:57.628
SURMA: That's where
the TURN server

00:02:57.628 --> 00:03:00.640
comes into play, which is
a server in the interwebs

00:03:00.640 --> 00:03:02.770
that both sites
connect to and tunnel

00:03:02.770 --> 00:03:04.060
their traffic through it.

00:03:04.060 --> 00:03:05.540
And the way to
remember it, to me,

00:03:05.540 --> 00:03:09.705
is like TURN has the R,
which stands for relay.

00:03:09.705 --> 00:03:11.880
[LAUGHTER]

00:03:11.880 --> 00:03:13.988
JAKE: That's a difficult
second album, mate.

00:03:13.988 --> 00:03:15.660
[LAUGHTER]

00:03:15.660 --> 00:03:18.040
SURMA: It's how I
remember it, honestly.

00:03:18.040 --> 00:03:21.650
JAKE: No, your Flexbox
ones were a bit better.

00:03:21.650 --> 00:03:24.350
SURMA: It was better, but
that's the mnemonic I have.

00:03:24.350 --> 00:03:24.850
Yes.

00:03:24.850 --> 00:03:26.020
That is the relay server.

00:03:26.020 --> 00:03:29.770
That relays your traffic instead
of to the public interweb,

00:03:29.770 --> 00:03:31.780
so both can connect
even if both ends are

00:03:31.780 --> 00:03:34.420
behind different firewalls
in different networks.

00:03:34.420 --> 00:03:35.920
In my experiments,
I haven't even

00:03:35.920 --> 00:03:38.070
bothered with setting up
STUN or TURN, because I

00:03:38.070 --> 00:03:39.310
was like, I'm just going to--

00:03:39.310 --> 00:03:41.685
because what I was doing, I
was once again playing around

00:03:41.685 --> 00:03:44.440
with Comlink, and I wanted
to expose the entirety of one

00:03:44.440 --> 00:03:46.120
browser to another browser.

00:03:46.120 --> 00:03:50.440
So basically, I've exposed the
entire window object of Safari

00:03:50.440 --> 00:03:53.890
to Chrome, and I can change
the title of the Safari window

00:03:53.890 --> 00:03:57.981
from Chrome by calling
document.title = blah,

00:03:57.981 --> 00:03:58.480
blah, blah.

00:03:58.480 --> 00:03:58.900
JAKE: And it just works.

00:03:58.900 --> 00:04:00.520
SURMA: But it is
actually a remote object

00:04:00.520 --> 00:04:02.890
from the other browser with
a WebRTC tunnel in between,

00:04:02.890 --> 00:04:04.010
which is super cool.

00:04:04.010 --> 00:04:04.170
JAKE: Yeah, that is really cool.

00:04:04.170 --> 00:04:06.460
SURMA: But getting there was
a super painful experience,

00:04:06.460 --> 00:04:08.626
because you can totally
tell that WebRTC was written

00:04:08.626 --> 00:04:11.533
by people who are in
telecommunications and not

00:04:11.533 --> 00:04:12.440
in web development.

00:04:12.440 --> 00:04:14.620
JAKE: I do find that
the web standards, even

00:04:14.620 --> 00:04:16.360
the standards text
and the APIs, it does

00:04:16.360 --> 00:04:18.569
look like it was imported
from another planet, right.

00:04:18.569 --> 00:04:20.401
Like a completely
different way of thinking.

00:04:20.401 --> 00:04:22.900
SURMA: It starts out with
that it's already completely

00:04:22.900 --> 00:04:24.070
asymmetric to start with.

00:04:24.070 --> 00:04:28.270
So you start with
creating an offer.

00:04:28.270 --> 00:04:28.840
JAKE: OK.

00:04:28.840 --> 00:04:31.270
SURMA: That contains
what you are.

00:04:31.270 --> 00:04:35.170
And once you say this RTC
connection, the local end,

00:04:35.170 --> 00:04:38.410
should fit this offer,
whatever that means,

00:04:38.410 --> 00:04:42.340
you get ICE candidates
which describe yourself.

00:04:42.340 --> 00:04:44.740
Sure.

00:04:44.740 --> 00:04:45.666
JAKE: Help.

00:04:45.666 --> 00:04:48.580
SURMA: (singing the
Beatles) I need somebody.

00:04:48.580 --> 00:04:49.730
It's super-confusing.

00:04:49.730 --> 00:04:51.731
So you create an
RTC connection--

00:04:51.731 --> 00:04:53.230
RTC peer connection,
even though you

00:04:53.230 --> 00:04:54.050
don't have a connection yet.

00:04:54.050 --> 00:04:55.240
But that's the
first thing you do.

00:04:55.240 --> 00:04:57.130
JAKE: Right, you create a
connection you don't have.

00:04:57.130 --> 00:04:57.700
SURMA: Then you create--

00:04:57.700 --> 00:04:58.240
JAKE: To an ICE candidate.

00:04:58.240 --> 00:04:59.500
SURMA: --the data channels
you want to create,

00:04:59.500 --> 00:05:01.200
because you need to know
what kind of connection

00:05:01.200 --> 00:05:02.110
you want to have in the end.

00:05:02.110 --> 00:05:04.440
So even though the connection
hasn't been established,

00:05:04.440 --> 00:05:06.023
you're already
thinking about channels

00:05:06.023 --> 00:05:07.050
in creating the objects.

00:05:07.050 --> 00:05:08.080
JAKE: Right, OK.

00:05:08.080 --> 00:05:11.940
SURMA: Then you create
this offer which describes,

00:05:11.940 --> 00:05:14.080
I guess, what your
capabilities are.

00:05:14.080 --> 00:05:18.490
Like, I can do these codecs,
I can accept data channels,

00:05:18.490 --> 00:05:21.334
I am the passive listener
waiting for connections,

00:05:21.334 --> 00:05:22.750
these kind of
things are in there.

00:05:22.750 --> 00:05:24.460
JAKE: Something that can be like
a lowest common denominator can

00:05:24.460 --> 00:05:24.670
be created.

00:05:24.670 --> 00:05:25.390
SURMA: I guess.

00:05:25.390 --> 00:05:27.827
And then you say to
the connection, set

00:05:27.827 --> 00:05:30.160
local description, where you
say, I am on the local end,

00:05:30.160 --> 00:05:32.326
and we're going to get to
the other bit in a minute.

00:05:32.326 --> 00:05:33.790
So you set your
local connection,

00:05:33.790 --> 00:05:35.515
and you get a list
of your candidates.

00:05:35.515 --> 00:05:37.390
So now you have the
offer and your candidates

00:05:37.390 --> 00:05:39.460
and now it is your
responsibility

00:05:39.460 --> 00:05:42.350
as a developer to get these two
things, the list of candidates

00:05:42.350 --> 00:05:45.370
and the offer, to
the other side,

00:05:45.370 --> 00:05:47.370
to the other peer that
wants to connect to you.

00:05:47.370 --> 00:05:47.870
JAKE: Right.

00:05:47.870 --> 00:05:50.980
SURMA: So peer discovery
isn't even covered by WebRTC.

00:05:50.980 --> 00:05:52.966
You already need to
know and have a way

00:05:52.966 --> 00:05:54.340
to communicate
with the other end

00:05:54.340 --> 00:05:55.910
to set up a WebRTC connection.

00:05:55.910 --> 00:05:58.411
JAKE: Oh, so that's separate
from a STUN or a TURN server,

00:05:58.411 --> 00:06:00.160
that part that can
actually sort of broker

00:06:00.160 --> 00:06:01.076
the deal between two--

00:06:01.076 --> 00:06:03.370
SURMA: You already need
to know where to talk

00:06:03.370 --> 00:06:05.180
to to set up the connection.

00:06:05.180 --> 00:06:07.580
So that's why, always, you
have this signaling back end

00:06:07.580 --> 00:06:09.440
where you basically
say, here's my offer,

00:06:09.440 --> 00:06:10.850
here's my ICE candidates.

00:06:10.850 --> 00:06:13.520
And then the other end, the
other computer basically,

00:06:13.520 --> 00:06:15.650
gets those and sets what it--

00:06:15.650 --> 00:06:18.470
the offer as its
remote description.

00:06:18.470 --> 00:06:20.420
Because from their
perspective, that

00:06:20.420 --> 00:06:22.810
is the other end
of the connection.

00:06:22.810 --> 00:06:23.470
JAKE: Right.

00:06:23.470 --> 00:06:25.990
Oh, so you're talking
to the-- like the--

00:06:25.990 --> 00:06:27.370
SURMA: The second computer
that wants to talk-- you want--

00:06:27.370 --> 00:06:28.850
so you have one computer,
and a second computer,

00:06:28.850 --> 00:06:30.620
they want to have a
WebRTC connection.

00:06:30.620 --> 00:06:31.160
JAKE: Yes.

00:06:31.160 --> 00:06:32.770
SURMA: Then somehow,
out of band,

00:06:32.770 --> 00:06:35.150
you transfer the offer
and the ICE candidates

00:06:35.150 --> 00:06:36.680
to the other computer.

00:06:36.680 --> 00:06:39.380
And that one uses as
its remote description,

00:06:39.380 --> 00:06:42.620
because that is describing the
other end of the connection.

00:06:42.620 --> 00:06:44.600
But then this side
has to also generate

00:06:44.600 --> 00:06:46.930
an answer and another
list of peer candidates,

00:06:46.930 --> 00:06:48.830
and it has to go
back out of band.

00:06:48.830 --> 00:06:50.982
Then this side says,
the original side says,

00:06:50.982 --> 00:06:52.190
this is my remote connection.

00:06:52.190 --> 00:06:53.900
And then you can communicate.

00:06:53.900 --> 00:06:56.364
And it is, it sounds confusing
because it is confusing.

00:06:56.364 --> 00:06:58.280
JAKE: But you know
IndexedDB sounds great now.

00:06:58.280 --> 00:06:59.510
SURMA: I know, right?

00:06:59.510 --> 00:07:00.399
JAKE: It's fine.

00:07:00.399 --> 00:07:00.940
It's perfect.

00:07:00.940 --> 00:07:02.450
SURMA: It is mind blowing.

00:07:02.450 --> 00:07:04.164
And that is-- explain
to me-- anyway,

00:07:04.164 --> 00:07:06.580
nobody is really using it,
because it is really difficult.

00:07:06.580 --> 00:07:07.997
And B, the first
thing people did

00:07:07.997 --> 00:07:09.830
is write abstraction
libraries on top of it.

00:07:09.830 --> 00:07:11.480
JAKE: But being able,
like the end result

00:07:11.480 --> 00:07:13.160
that you got to, with
the data channel of being

00:07:13.160 --> 00:07:15.470
able to sort of have like,
one browser talking to another

00:07:15.470 --> 00:07:17.886
as if it is just in a workgroup,
that's pretty incredible.

00:07:17.886 --> 00:07:22.182
SURMA: I see potential in
combining WebRTC and Comlink.

00:07:22.182 --> 00:07:23.390
But there is work to be done.

00:07:25.970 --> 00:07:30.770
JAKE: They also played
"C'est la Vie" by Bewitched,

00:07:30.770 --> 00:07:32.610
and just asked, for
one extra bonus point,

00:07:32.610 --> 00:07:33.989
who knows what this song is?

00:07:33.989 --> 00:07:35.030
I know what that song is.

00:07:35.030 --> 00:07:36.500
So do you know
what that song is?

00:07:36.500 --> 00:07:37.620
Homework for you.

00:07:37.620 --> 00:07:38.890
It's the best song ever.

00:07:38.890 --> 00:07:40.760
It's an Irish girl band.

00:07:40.760 --> 00:07:42.610
It's amazing.

