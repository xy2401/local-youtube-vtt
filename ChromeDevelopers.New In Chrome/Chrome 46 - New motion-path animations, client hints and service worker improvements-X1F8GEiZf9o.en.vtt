WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.340
[MUSIC PLAYING]

00:00:05.150 --> 00:00:09.090
Using JavaScript to do complex
animations in the browser

00:00:09.090 --> 00:00:12.250
often looks like stop
motion animation.

00:00:12.250 --> 00:00:16.120
It's janky and can block
rendering or input.

00:00:16.120 --> 00:00:21.220
In Chrome 46, the motion
path module changes that.

00:00:21.220 --> 00:00:23.650
The markup required
for responsive images

00:00:23.650 --> 00:00:26.020
becomes much simpler
with client hints,

00:00:26.020 --> 00:00:29.510
and service workers just
keep getting better.

00:00:29.510 --> 00:00:33.190
Let's take a look at what's
new in Chrome for developers.

00:00:33.190 --> 00:00:36.940
Animations in CSS has
existed for some time now,

00:00:36.940 --> 00:00:39.350
but if you wanted to do
something a little bit more

00:00:39.350 --> 00:00:42.570
complex-- for example,
animate an object

00:00:42.570 --> 00:00:45.950
along a specific,
non-linear path-- well,

00:00:45.950 --> 00:00:48.350
you needed to use
JavaScript for that.

00:00:48.350 --> 00:00:52.870
Thankfully, the CSS motion
path module changes that.

00:00:52.870 --> 00:00:57.980
You can now animate objects
along an arbitrary path in CSS,

00:00:57.980 --> 00:01:02.960
and because it's CSS it
doesn't block the browser.

00:01:02.960 --> 00:01:06.160
The key is the motion
path property, which

00:01:06.160 --> 00:01:08.330
is used to define the path.

00:01:08.330 --> 00:01:11.500
You can specify the shape you
want the object to follow,

00:01:11.500 --> 00:01:15.420
like a circle, ellipse,
or polygon, or you can

00:01:15.420 --> 00:01:18.560
specify an SVG path.

00:01:18.560 --> 00:01:22.230
You also need to provide
the motion offset property.

00:01:22.230 --> 00:01:26.660
That defines how far along
the path the object is.

00:01:26.660 --> 00:01:29.750
Put another way, the distance
from the start point.

00:01:29.750 --> 00:01:33.000
You're now ready to start
to animate something.

00:01:33.000 --> 00:01:36.630
But there's one more helpful
property you might want to set.

00:01:36.630 --> 00:01:40.630
Say, for example, you're
animating a car around a box.

00:01:40.630 --> 00:01:43.350
When it's time to
turn the corner,

00:01:43.350 --> 00:01:45.470
the car should actually
turn the corner,

00:01:45.470 --> 00:01:48.220
not just start moving sideways.

00:01:48.220 --> 00:01:51.490
Motion rotation allows
you to set the direction

00:01:51.490 --> 00:01:53.560
that the object is facing.

00:01:53.560 --> 00:01:56.510
In this case, I'd use
an angle, but there

00:01:56.510 --> 00:01:58.590
are other values you can use.

00:01:58.590 --> 00:02:01.820
So be to check the examples
linked in the description

00:02:01.820 --> 00:02:03.000
below.

00:02:03.000 --> 00:02:06.180
I've long been a fan of source
set and the picture element

00:02:06.180 --> 00:02:08.880
to serve the right image
to the right device,

00:02:08.880 --> 00:02:11.160
but it can be a little hard.

00:02:11.160 --> 00:02:14.150
For example, say I wanted
to display an image

00:02:14.150 --> 00:02:17.710
at 50% of the user's
viewport, and I

00:02:17.710 --> 00:02:20.620
want to send the right
image to each device.

00:02:20.620 --> 00:02:24.080
My phone has a very different
viewport than my laptop,

00:02:24.080 --> 00:02:26.890
so I need to take
that into account.

00:02:26.890 --> 00:02:29.620
I need to take into account
the screen resolution.

00:02:29.620 --> 00:02:33.520
My laptop has a 2x screen
versus my desktop monitor,

00:02:33.520 --> 00:02:35.320
which is only 1x.

00:02:35.320 --> 00:02:37.550
And, finally, it
would be nice to send

00:02:37.550 --> 00:02:41.310
a JPEG XR to edge
browsers, WebP to Chrome,

00:02:41.310 --> 00:02:43.750
and JPEG to everything else.

00:02:43.750 --> 00:02:46.520
But that's just too hard.

00:02:46.520 --> 00:02:50.300
But this becomes much
simpler with client hints.

00:02:50.300 --> 00:02:55.840
Adding the meta tag meta HTTP
equiv accept-ch content equals

00:02:55.840 --> 00:03:00.330
dpr, viewport width,
width to the document head

00:03:00.330 --> 00:03:04.400
tells the browser to advertise
the device-pixel ratio,

00:03:04.400 --> 00:03:08.170
the layout viewport width,
and the intended display width

00:03:08.170 --> 00:03:10.420
through the resource
to the server.

00:03:10.420 --> 00:03:13.510
The server can then
serve the best image,

00:03:13.510 --> 00:03:17.290
one that is served to the
exact needs of the device.

00:03:17.290 --> 00:03:21.590
That picture element we had
earlier becomes much cleaner.

00:03:21.590 --> 00:03:23.750
Client hints are
disabled by default,

00:03:23.750 --> 00:03:27.040
so you'll need to add the
meta tag to your page.

00:03:27.040 --> 00:03:29.470
Check out Ilya's
post linked below,

00:03:29.470 --> 00:03:32.400
including how you can use
service workers for resource

00:03:32.400 --> 00:03:33.490
selection.

00:03:33.490 --> 00:03:36.500
Speaking of service workers,
there are a few new additions

00:03:36.500 --> 00:03:38.030
and changes here.

00:03:38.030 --> 00:03:43.720
To protect users, the Cache
API is now restricted to HTTPS.

00:03:43.720 --> 00:03:48.620
Cache.addAll is now supported,
removing the need for polyfills

00:03:48.620 --> 00:03:52.150
when dealing with bulk
interactions in the cache.

00:03:52.150 --> 00:03:54.330
Resource timing and
user timing are now

00:03:54.330 --> 00:03:58.450
available in service worker,
and the Fetch API now

00:03:58.450 --> 00:04:00.730
supports Request.redirect.

00:04:00.730 --> 00:04:03.920
These are just a few of the
new features in Chrome 46

00:04:03.920 --> 00:04:05.340
for developers.

00:04:05.340 --> 00:04:08.300
You can get more details from
the links in the description.

00:04:08.300 --> 00:04:11.900
And please subscribe to our
new Chrome Developers YouTube

00:04:11.900 --> 00:04:12.850
channel.

00:04:12.850 --> 00:04:16.290
I'm Pete LePage, and as soon
as Chrome 47 is released,

00:04:16.290 --> 00:04:19.280
I'll be right here to tell
you what's new in Chrome.

00:04:19.280 --> 00:04:22.030
[MUSIC PLAYING]

