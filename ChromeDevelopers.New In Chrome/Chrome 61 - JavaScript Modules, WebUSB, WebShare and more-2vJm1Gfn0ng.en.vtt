WEBVTT
Kind: captions
Language: en

00:00:00.585 --> 00:00:03.540
PETE LEPAGE: Chrome 61 now
supports JavaScript modules

00:00:03.540 --> 00:00:07.020
natively, unifying the way
that modular JavaScript can

00:00:07.020 --> 00:00:08.220
be written.

00:00:08.220 --> 00:00:12.060
You can now use navigator.share
to trigger the native Android

00:00:12.060 --> 00:00:13.500
shared dialog.

00:00:13.500 --> 00:00:18.390
And the WebUSB API has landed,
allowing web apps to access

00:00:18.390 --> 00:00:20.890
user-permitted USB devices.

00:00:20.890 --> 00:00:21.960
I'm Pete LePage.

00:00:21.960 --> 00:00:25.140
Let's dive in and see what's
new for developers in Chrome 61.

00:00:25.140 --> 00:00:28.100
[MUSIC PLAYING]

00:00:28.100 --> 00:00:32.299
Chrome 61 adds native support
for JavaScript modules via

00:00:32.299 --> 00:00:35.420
the script type=module element.

00:00:35.420 --> 00:00:36.980
That makes it
possible for Chrome

00:00:36.980 --> 00:00:39.890
to fetch granular
dependencies in parallel,

00:00:39.890 --> 00:00:42.770
taking advantage of caching,
avoiding duplication

00:00:42.770 --> 00:00:46.340
across pages, and ensuring
that the script executes

00:00:46.340 --> 00:00:48.090
in the correct order.

00:00:48.090 --> 00:00:51.050
This standardized module
system unifies the way

00:00:51.050 --> 00:00:53.870
that modular JavaScript
can be written and shipped

00:00:53.870 --> 00:00:55.340
to the web browser.

00:00:55.340 --> 00:00:58.610
In the future, the same system
will be available in Node,

00:00:58.610 --> 00:01:01.820
making it easier for
you to write and deploy

00:01:01.820 --> 00:01:03.830
isomorphic JavaScript.

00:01:03.830 --> 00:01:07.190
You can learn more about modules
and the aspects of JavaScript

00:01:07.190 --> 00:01:10.940
that are affected by modules
from the links below.

00:01:10.940 --> 00:01:14.300
If you want users to easily
be able to share your content

00:01:14.300 --> 00:01:16.340
on their favorite
network, you need

00:01:16.340 --> 00:01:20.390
to be able to integrate sharing
buttons on your site for each

00:01:20.390 --> 00:01:22.010
of those social networks.

00:01:22.010 --> 00:01:24.500
It adds bloat to your
page, doesn't always

00:01:24.500 --> 00:01:27.110
fit nicely within
your UI, and means

00:01:27.110 --> 00:01:30.890
that you need to include
code from a third-party site.

00:01:30.890 --> 00:01:35.000
The Web Share API, available
today on Chrome for Android,

00:01:35.000 --> 00:01:38.090
allows you to invoke the
native sharing capabilities

00:01:38.090 --> 00:01:40.520
of the user's device,
allowing the user

00:01:40.520 --> 00:01:43.310
to easily share text
or links with any

00:01:43.310 --> 00:01:45.590
of their installed native apps.

00:01:45.590 --> 00:01:48.200
In a future release,
this API will also

00:01:48.200 --> 00:01:51.110
be able to share to
installed web apps.

00:01:51.110 --> 00:01:53.830
To use it, simply
called navigator.share

00:01:53.830 --> 00:01:56.180
with the details of the
page that you want to share,

00:01:56.180 --> 00:01:58.700
and the system will
handle the rest.

00:01:58.700 --> 00:02:02.420
Check out Paul's update link
below for full details and some

00:02:02.420 --> 00:02:06.050
of the best practices that
you should be following.

00:02:06.050 --> 00:02:09.590
Most hardware peripherals, such
as keyboards, mice, printers,

00:02:09.590 --> 00:02:14.870
gamepads are all supported by
high-level web platform APIs.

00:02:14.870 --> 00:02:19.790
But using some specialized,
educational, scientific, or

00:02:19.790 --> 00:02:24.110
other USB devices in the browser
has been hard, often requiring

00:02:24.110 --> 00:02:25.760
specialized drivers.

00:02:25.760 --> 00:02:28.670
Chrome now supports
the WebUSB API,

00:02:28.670 --> 00:02:31.910
allowing web apps to
communicate with USB devices

00:02:31.910 --> 00:02:34.610
after the user has
provided their consent.

00:02:34.610 --> 00:02:37.790
To learn more about the security
and privacy considerations

00:02:37.790 --> 00:02:41.900
and how they are addressed,
have a peek at the WebUSB spec.

00:02:41.900 --> 00:02:43.730
When you're ready to
dive in, take a look

00:02:43.730 --> 00:02:46.070
at Francois' post on updates.

00:02:46.070 --> 00:02:48.560
Both are linked in
the description.

00:02:48.560 --> 00:02:51.020
These are just a few of
the changes in Chrome 61

00:02:51.020 --> 00:02:51.840
for developers.

00:02:51.840 --> 00:02:54.080
And of course,
there's plenty more.

00:02:54.080 --> 00:02:56.780
You can now specify
scrolling smoothness

00:02:56.780 --> 00:02:59.420
with the scroll-behavior
CSS property.

00:02:59.420 --> 00:03:03.950
CSS hex color values can now
specify an alpha transparency

00:03:03.950 --> 00:03:06.930
by adding digits to
the end of the string.

00:03:06.930 --> 00:03:10.190
You can access the relative
position of the screen content

00:03:10.190 --> 00:03:14.360
with the Visual Viewport API,
exposing complex functionality

00:03:14.360 --> 00:03:17.390
like Pinch and zoom
In a more direct way.

00:03:17.390 --> 00:03:20.630
All the details, including
links to more detailed changes

00:03:20.630 --> 00:03:24.140
docs, specs, are in
the description below.

00:03:24.140 --> 00:03:26.630
And be sure to check out
the New in Chrome Dev Tools

00:03:26.630 --> 00:03:29.330
video for all the new
stuff in dev tools.

00:03:29.330 --> 00:03:31.100
Then, click
Subscribe, and you'll

00:03:31.100 --> 00:03:34.160
get an email notification
whenever we launch a new video.

00:03:34.160 --> 00:03:35.180
I'm Pete LePage.

00:03:35.180 --> 00:03:37.230
And as soon as Chrome
62 is released,

00:03:37.230 --> 00:03:41.230
I'll be right here to tell
you what's new in Chrome.

