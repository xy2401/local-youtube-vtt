WEBVTT
Kind: captions
Language: en

00:00:00.499 --> 00:00:05.290
CSS manipulation becomes way
easier with the new CSS typed

00:00:05.290 --> 00:00:06.550
model object.

00:00:06.550 --> 00:00:09.550
Access to the clipboard
is now asynchronous,

00:00:09.550 --> 00:00:13.140
and there's a new rendering
context for Canvas elements.

00:00:13.140 --> 00:00:14.170
I'm Pete LePage.

00:00:14.170 --> 00:00:17.460
Let's dive in and see what's
new for developers in Chrome 66.

00:00:17.460 --> 00:00:20.780
[MUSIC PLAYING]

00:00:20.780 --> 00:00:24.110
If you've ever updated a
CSS property via JavaScript,

00:00:24.110 --> 00:00:26.090
you've used the
CSS object model.

00:00:26.090 --> 00:00:29.000
But it returns
everything as a string.

00:00:29.000 --> 00:00:31.280
To animate the
opacity property, I'd

00:00:31.280 --> 00:00:33.500
have to cast the
string to a number,

00:00:33.500 --> 00:00:36.260
then increment the value
and apply my change.

00:00:36.260 --> 00:00:38.120
Not exactly ideal.

00:00:38.120 --> 00:00:40.940
With the new CSS
typed object model,

00:00:40.940 --> 00:00:45.050
CSS values are exposed as
typed JavaScript objects,

00:00:45.050 --> 00:00:47.600
eliminating a lot of
the type manipulation

00:00:47.600 --> 00:00:51.470
and providing a much more
sane way of working with CSS.

00:00:51.470 --> 00:00:53.930
Instead of using
element.style, you

00:00:53.930 --> 00:00:58.040
access the styles through
attributestylemap property

00:00:58.040 --> 00:00:59.870
or stylemap.

00:00:59.870 --> 00:01:02.060
They return a
map-like object that

00:01:02.060 --> 00:01:05.180
makes it really easy
to read or update.

00:01:05.180 --> 00:01:07.730
Compared to the old
CSS object model,

00:01:07.730 --> 00:01:10.670
early benchmarks show
about a 30% improvement

00:01:10.670 --> 00:01:13.010
in operations per second.

00:01:13.010 --> 00:01:15.230
That's something that's
especially important

00:01:15.230 --> 00:01:18.080
when you're doing
JavaScript animations.

00:01:18.080 --> 00:01:20.210
It also helps to
eliminate bugs caused

00:01:20.210 --> 00:01:24.080
by forgetting to cast the value
from a string to a number.

00:01:24.080 --> 00:01:27.140
And it automatically handles
rounding and clamping

00:01:27.140 --> 00:01:28.250
of values.

00:01:28.250 --> 00:01:30.380
Plus, there are some
pretty neat new methods

00:01:30.380 --> 00:01:32.930
for dealing with unit
conversions, arithmetic,

00:01:32.930 --> 00:01:34.670
and equality.

00:01:34.670 --> 00:01:38.080
Eric has a great post and
several demos and examples

00:01:38.080 --> 00:01:42.290
in his explainer linked
below in the description.

00:01:42.290 --> 00:01:45.920
Synchronous copy and paste
using document.execCommand

00:01:45.920 --> 00:01:48.120
can be OK for
small bits of text.

00:01:48.120 --> 00:01:50.330
But for anything else,
there's a good chance

00:01:50.330 --> 00:01:53.690
that its synchronous nature
will block the page, causing

00:01:53.690 --> 00:01:55.710
a poor experience for the user.

00:01:55.710 --> 00:01:59.870
And the permission model between
browsers is inconsistent.

00:01:59.870 --> 00:02:03.140
The new Async Clipboard
API is a replacement

00:02:03.140 --> 00:02:06.800
that works, asynchronously, and
integrates with the permissions

00:02:06.800 --> 00:02:10.220
API to provide a better
experience for users.

00:02:10.220 --> 00:02:13.970
Tags can be copied to the
clipboard by calling writetext.

00:02:13.970 --> 00:02:18.110
Since the API is asynchronous,
the writetext function

00:02:18.110 --> 00:02:21.110
returns a promise that will
be resolved or rejected,

00:02:21.110 --> 00:02:23.270
depending on whether
we were successfully

00:02:23.270 --> 00:02:25.700
able to copy the text.

00:02:25.700 --> 00:02:28.460
Similarly, text can be
read from the clipboard

00:02:28.460 --> 00:02:32.390
by calling readtext and waiting
for the returned promise

00:02:32.390 --> 00:02:34.610
to resolve with the text.

00:02:34.610 --> 00:02:37.925
Check out Jason's post and
demos in the explainer linked

00:02:37.925 --> 00:02:39.200
in the description.

00:02:39.200 --> 00:02:41.480
He's also got a
great set of examples

00:02:41.480 --> 00:02:43.970
that use Async functions.

00:02:43.970 --> 00:02:46.930
The canvas element lets
you manipulate graphics

00:02:46.930 --> 00:02:48.560
at a pixel level.

00:02:48.560 --> 00:02:51.290
You could draw graphs,
manipulate photos, even do

00:02:51.290 --> 00:02:53.150
real-time video processing.

00:02:53.150 --> 00:02:56.310
But unless you're starting
with a blank canvas,

00:02:56.310 --> 00:02:59.900
you need a way to render
an image onto that canvas.

00:02:59.900 --> 00:03:02.690
Historically, that's meant
creating an image tag,

00:03:02.690 --> 00:03:06.200
then rendering its
content onto the canvas.

00:03:06.200 --> 00:03:08.450
Unfortunately, that
means the browser

00:03:08.450 --> 00:03:12.290
needs to store multiple
copies of the image in memory.

00:03:12.290 --> 00:03:16.190
Starting in Chrome 66, there's
a new asynchronous rendering

00:03:16.190 --> 00:03:20.480
context that streamlined
the display of image bitmap

00:03:20.480 --> 00:03:21.470
objects.

00:03:21.470 --> 00:03:24.680
They now render more
efficiently and with less jank

00:03:24.680 --> 00:03:29.010
by working asynchronously and
avoiding memory duplication.

00:03:29.010 --> 00:03:32.180
I just need to call
createimagebitmap and hand it

00:03:32.180 --> 00:03:34.880
an image blob to
create the image.

00:03:34.880 --> 00:03:39.590
Then grab the bitmap prerender
context from the canvas

00:03:39.590 --> 00:03:42.090
and transfer the
image in, and done.

00:03:42.090 --> 00:03:45.090
I've created and
rendered the image.

00:03:45.090 --> 00:03:47.480
These are just a few of
the changes in Chrome 66

00:03:47.480 --> 00:03:48.380
for developers.

00:03:48.380 --> 00:03:49.970
And of course,
there's plenty more.

00:03:49.970 --> 00:03:54.680
Textarea and select now support
the autocomplete attribute.

00:03:54.680 --> 00:03:57.860
Setting autocapitalize
on a form element

00:03:57.860 --> 00:04:00.860
will apply to any
child form field,

00:04:00.860 --> 00:04:04.100
improving compatibility
with Safari's implementation

00:04:04.100 --> 00:04:05.660
of autocapitalize.

00:04:05.660 --> 00:04:08.600
And trimstart and
trimend are now

00:04:08.600 --> 00:04:12.260
available as the standard based
way of trimming whitespace

00:04:12.260 --> 00:04:13.820
from strings.

00:04:13.820 --> 00:04:17.180
All the details, including links
to the docs, specs, and more

00:04:17.180 --> 00:04:18.829
are in the description below.

00:04:18.829 --> 00:04:21.649
And be sure to check out the
latest New In Chrome DevTools

00:04:21.649 --> 00:04:24.320
video to learn what's
new in DevTools.

00:04:24.320 --> 00:04:26.360
If you're interested in
Progressive Web Apps,

00:04:26.360 --> 00:04:29.570
check out the PWA
roadshow video series.

00:04:29.570 --> 00:04:31.820
Then click the Subscribe
button and you'll

00:04:31.820 --> 00:04:34.580
get an email notification
whenever we launch a new video.

00:04:34.580 --> 00:04:36.080
I'm Pete LePage.

00:04:36.080 --> 00:04:38.320
And as soon as Chrome
67 is released,

00:04:38.320 --> 00:04:42.100
I'll be right here to tell
you what's new in Chrome.

