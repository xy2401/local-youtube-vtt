WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.140
[MUSIC PLAYING]

00:00:03.140 --> 00:00:03.740
Hey, everyone.

00:00:03.740 --> 00:00:04.240
What's up?

00:00:04.240 --> 00:00:04.960
It's Rob Dodson.

00:00:04.960 --> 00:00:06.584
Today on Polycasts,
I want to teach you

00:00:06.584 --> 00:00:09.300
a very powerful pattern
for extending your element

00:00:09.300 --> 00:00:11.690
prototypes using behaviors.

00:00:11.690 --> 00:00:14.930
Behaviors are going to unlock
a totally new world for you.

00:00:14.930 --> 00:00:17.860
Also, I want to make sure you
all stick around to the end

00:00:17.860 --> 00:00:20.600
because we're giving away
swag during Q&amp;A time.

00:00:20.600 --> 00:00:23.350
We've got things like
hoodies, shirts, stickers,

00:00:23.350 --> 00:00:24.510
lots of awesome stuff.

00:00:24.510 --> 00:00:26.341
So be sure to hang out for that.

00:00:26.341 --> 00:00:26.840
All right.

00:00:26.840 --> 00:00:27.770
Enough yakking.

00:00:27.770 --> 00:00:29.150
Let's dive in.

00:00:29.150 --> 00:00:31.745
So what exactly is a behavior?

00:00:31.745 --> 00:00:35.850
Well, in a nutshell, a behavior
is a little module of code

00:00:35.850 --> 00:00:40.490
that you can mix in to
your element's prototype,

00:00:40.490 --> 00:00:43.950
giving your element's prototype
additional properties,

00:00:43.950 --> 00:00:47.982
listeners, and even methods.

00:00:47.982 --> 00:00:50.190
Now, you may be familiar
with doing something similar

00:00:50.190 --> 00:00:51.724
using inheritance.

00:00:51.724 --> 00:00:53.515
But there are a few
issues with inheritance

00:00:53.515 --> 00:00:55.720
that behaviors help solve.

00:00:55.720 --> 00:00:58.240
For example, let's
say you have a menu

00:00:58.240 --> 00:01:00.900
and you want it to highlight
whichever one of its children

00:01:00.900 --> 00:01:02.100
is currently selected.

00:01:02.100 --> 00:01:04.550
And because that's a really
useful functionality,

00:01:04.550 --> 00:01:08.580
you may pull it out and abstract
it into a parent element.

00:01:08.580 --> 00:01:10.570
Now you can have
multiple elements that

00:01:10.570 --> 00:01:13.840
inherit from that parent and get
that same functionality, which

00:01:13.840 --> 00:01:14.650
is great.

00:01:14.650 --> 00:01:18.010
But what if you want to also
add multi select behavior

00:01:18.010 --> 00:01:20.570
to just two of these elements?

00:01:20.570 --> 00:01:22.760
You don't want to
duplicate the code.

00:01:22.760 --> 00:01:25.690
So you could put that
up here in the parent.

00:01:25.690 --> 00:01:28.330
But that means that
this element down here

00:01:28.330 --> 00:01:31.180
is going to have to
inherit all of that code

00:01:31.180 --> 00:01:32.650
even if it doesn't use it.

00:01:32.650 --> 00:01:36.350
It's kind of forced to
take in all this cruft.

00:01:36.350 --> 00:01:38.680
Another issue is
multiple inheritance.

00:01:38.680 --> 00:01:42.420
So let's say I want to add a
cool animation ripple effect

00:01:42.420 --> 00:01:43.840
to all of these elements.

00:01:43.840 --> 00:01:46.030
It doesn't make sense to
put that in this parent

00:01:46.030 --> 00:01:47.940
because this parent
has one job, which

00:01:47.940 --> 00:01:49.610
is dealing with selection.

00:01:49.610 --> 00:01:52.480
So I might end up building
kind of an inheritance

00:01:52.480 --> 00:01:55.990
chain like this, which is sort
of a kludgy way of solving

00:01:55.990 --> 00:01:57.520
that problem.

00:01:57.520 --> 00:02:00.260
This is where behaviors
really shine because they

00:02:00.260 --> 00:02:03.350
solve both of these issues.

00:02:03.350 --> 00:02:06.670
A Polymer element can hold
an array of behaviors,

00:02:06.670 --> 00:02:10.470
meaning we can mix in as much
functionality as we want.

00:02:10.470 --> 00:02:13.480
So our menu could have
a selectable behavior

00:02:13.480 --> 00:02:15.980
to support highlighting
in one of its children.

00:02:15.980 --> 00:02:19.880
Then it could add in multi
select behavior if it needs it.

00:02:19.880 --> 00:02:22.917
And finally, it could add in
that ripple animation behavior.

00:02:22.917 --> 00:02:25.000
Because you can pick and
choose the behaviors that

00:02:25.000 --> 00:02:26.840
get added to your
component, you have

00:02:26.840 --> 00:02:29.670
extremely fine grained
control of the code

00:02:29.670 --> 00:02:31.000
that goes into your element.

00:02:31.000 --> 00:02:32.960
And that eliminates
cruft, and it also

00:02:32.960 --> 00:02:35.550
makes your element
easier to reason about.

00:02:35.550 --> 00:02:38.410
So now that you understand
why behaviors are important,

00:02:38.410 --> 00:02:40.490
the next step is to learn
how to implement them

00:02:40.490 --> 00:02:41.720
in your own components.

00:02:41.720 --> 00:02:43.160
Let's check that out.

00:02:43.160 --> 00:02:45.290
Behaviors exist
as global objects.

00:02:45.290 --> 00:02:47.589
So it's important to
give them a namespace.

00:02:47.589 --> 00:02:49.130
I'm just going to
go ahead and create

00:02:49.130 --> 00:02:51.280
a namespace called MyBehaviors.

00:02:51.280 --> 00:02:53.280
And the behavior I'm
actually going to implement

00:02:53.280 --> 00:02:54.970
is called PressedBehavior.

00:02:54.970 --> 00:02:56.680
And a behavior is
going to look just

00:02:56.680 --> 00:02:58.620
like the prototype
for a Polymer element.

00:02:58.620 --> 00:03:00.910
So that means it can
have a properties object.

00:03:00.910 --> 00:03:03.369
Those properties will be mixed
into my elements properties.

00:03:03.369 --> 00:03:05.368
So here, I'm going to
create a properties object

00:03:05.368 --> 00:03:06.840
with a property called pressed.

00:03:06.840 --> 00:03:09.320
It's a Boolean that
defaults to false,

00:03:09.320 --> 00:03:10.592
and it's set to read only.

00:03:10.592 --> 00:03:12.300
So I don't want anyone
to set this value.

00:03:12.300 --> 00:03:15.560
I just want it to change
in response to events.

00:03:15.560 --> 00:03:18.689
I can also add listener
objects to this element,

00:03:18.689 --> 00:03:20.480
just like you would
with a Polymer element.

00:03:20.480 --> 00:03:23.830
I'm going to listen for
mousedown and mouseup events.

00:03:23.830 --> 00:03:27.660
I'm going to attach those to
these two handlers-- addPressed

00:03:27.660 --> 00:03:29.410
and removePressed.

00:03:29.410 --> 00:03:31.150
I'm also going to a
prefix these handlers

00:03:31.150 --> 00:03:33.210
with a little underscore.

00:03:33.210 --> 00:03:36.660
And that is to signify that
these are protected methods.

00:03:36.660 --> 00:03:37.730
So they're not public.

00:03:37.730 --> 00:03:39.644
I don't want the outside
world calling them.

00:03:39.644 --> 00:03:41.310
Then I'm going to add
the implementation

00:03:41.310 --> 00:03:42.330
for these methods.

00:03:42.330 --> 00:03:44.570
So I'm just going to
add two functions here

00:03:44.570 --> 00:03:46.120
for addPressed
and removePressed.

00:03:46.120 --> 00:03:48.660
And they're just going
to add the pressed class

00:03:48.660 --> 00:03:51.030
or remove it from
the class list.

00:03:51.030 --> 00:03:53.080
I can also create
abstract methods.

00:03:53.080 --> 00:03:56.040
So maybe I don't provide
an implementation here,

00:03:56.040 --> 00:03:57.690
but the element that
uses this behavior

00:03:57.690 --> 00:03:59.789
could provide its
own implementation.

00:03:59.789 --> 00:04:02.080
So I'm going to create two
abstract methods, one called

00:04:02.080 --> 00:04:06.410
onPressStart and one
called onPressEnd.

00:04:06.410 --> 00:04:09.250
And I'm going to mark
these both as abstract.

00:04:09.250 --> 00:04:11.320
So again, no codes
going in here.

00:04:11.320 --> 00:04:13.680
But someone who uses this
behavior can implement

00:04:13.680 --> 00:04:15.790
their own version
and these will fire

00:04:15.790 --> 00:04:18.510
when addPress or
removePress happens.

00:04:18.510 --> 00:04:22.110
I can even add life cycle
callbacks to this behavior.

00:04:22.110 --> 00:04:24.890
So I can go up here and
add a created callback.

00:04:24.890 --> 00:04:29.010
And this is going to be
executed after the elements own

00:04:29.010 --> 00:04:31.296
life cycle methods have
had a chance to run.

00:04:31.296 --> 00:04:33.170
So here, I'm just going
to log to the console

00:04:33.170 --> 00:04:36.880
that an object using this
behavior is in the DOM.

00:04:36.880 --> 00:04:38.360
Next, I'm going
to create a button

00:04:38.360 --> 00:04:41.240
element to leverage that
behavior that I just wrote.

00:04:41.240 --> 00:04:43.342
So I'm going to import
the behavior's definition

00:04:43.342 --> 00:04:45.300
the same way that I would
import the definition

00:04:45.300 --> 00:04:47.750
for another Polymer
element that it depends on.

00:04:47.750 --> 00:04:51.220
Then, down here in
its behaviors array,

00:04:51.220 --> 00:04:54.540
I can just drop in the name of
the behavior that I'm using.

00:04:54.540 --> 00:04:56.750
So I'm going to use my
namespace here, MyBehaviors.

00:04:56.750 --> 00:04:59.080
And the name of the
behavior is PressedBehavior.

00:04:59.080 --> 00:05:00.710
And now I can add
some CSS to take

00:05:00.710 --> 00:05:02.820
advantage of that press class.

00:05:02.820 --> 00:05:05.070
So up here at the top, I'm
going to write a style tag.

00:05:05.070 --> 00:05:07.000
And I'm going to use
the host selector

00:05:07.000 --> 00:05:08.980
to target the pressed class.

00:05:08.980 --> 00:05:12.360
And when it is present
on this button element,

00:05:12.360 --> 00:05:15.320
I want it to run an
animation called bounce.

00:05:15.320 --> 00:05:18.450
And the bounce animation is
just a keyframe animation

00:05:18.450 --> 00:05:20.356
that I created right here.

00:05:20.356 --> 00:05:22.720
So over in Chrome, I'm going
to pop open my DevTools

00:05:22.720 --> 00:05:25.080
so you can see what's going on.

00:05:25.080 --> 00:05:28.220
I will find the element
in the document.

00:05:28.220 --> 00:05:29.020
So here it is.

00:05:29.020 --> 00:05:31.561
And when I click on it, you'll
see that it's going to animate

00:05:31.561 --> 00:05:33.930
and that class is
going to show up.

00:05:33.930 --> 00:05:35.970
When I let go, the
class gets removed.

00:05:35.970 --> 00:05:37.280
So I click on it, it animates.

00:05:37.280 --> 00:05:40.060
The class shows up,
and then it disappears.

00:05:40.060 --> 00:05:42.247
Now let's try this again
with another element.

00:05:42.247 --> 00:05:44.830
And this time, I'm going to use
one of those abstract methods.

00:05:44.830 --> 00:05:46.960
So it's the exact same
process as before.

00:05:46.960 --> 00:05:48.710
I'm going to import
the behavior.

00:05:48.710 --> 00:05:52.140
I'm going to add it to this
element's behaviors array.

00:05:52.140 --> 00:05:53.730
And then, after
that's set up, I'm

00:05:53.730 --> 00:05:58.430
going to write an implementation
of the onPressEnd method.

00:05:58.430 --> 00:06:00.790
And I'm just going to have
it alert a little message

00:06:00.790 --> 00:06:02.420
that I've come up with.

00:06:02.420 --> 00:06:05.660
So when that is ready to go,
last thing I'm going to do

00:06:05.660 --> 00:06:07.770
is add some styles.

00:06:07.770 --> 00:06:11.132
So I'm going to add-- again,
the host selector here,

00:06:11.132 --> 00:06:12.590
which is targeting
the press class.

00:06:12.590 --> 00:06:17.182
This time, it's going to add
a box shadow to the element.

00:06:17.182 --> 00:06:18.390
So back over in the document.

00:06:18.390 --> 00:06:19.680
Again, pop-up on the DevTools.

00:06:19.680 --> 00:06:21.540
You can see I've got
my input element here.

00:06:21.540 --> 00:06:24.590
When I click on it, it's
going to get that box shadow.

00:06:24.590 --> 00:06:25.780
The press class is added.

00:06:25.780 --> 00:06:28.769
And when I let go, that
alert is going to fire.

00:06:28.769 --> 00:06:30.185
Also, I can go
over to the console

00:06:30.185 --> 00:06:32.890
and you can see that the
created life cycle callback

00:06:32.890 --> 00:06:35.800
that I implemented in the
behavior is firing twice

00:06:35.800 --> 00:06:39.159
because I have two elements that
are each using that behavior.

00:06:39.159 --> 00:06:40.950
Now, this behavior that
we've been building

00:06:40.950 --> 00:06:43.460
is a great starting point
but a little contrived

00:06:43.460 --> 00:06:44.900
for the sake of this demo.

00:06:44.900 --> 00:06:47.180
If you want to see some
really powerful behaviors,

00:06:47.180 --> 00:06:49.230
go check out the
element catalog.

00:06:49.230 --> 00:06:51.610
There, you'll find behaviors
for doing custom input field

00:06:51.610 --> 00:06:54.620
validation as well as
behaviors for accessibility.

00:06:54.620 --> 00:06:56.930
The iron-a11y-keys-behavior
for instance,

00:06:56.930 --> 00:07:00.350
adds a key bindings object that
lets you map key combinations

00:07:00.350 --> 00:07:01.510
to handlers.

00:07:01.510 --> 00:07:04.340
It also normalizes key codes
across different platforms,

00:07:04.340 --> 00:07:06.350
which is really useful.

00:07:06.350 --> 00:07:08.330
Finally, you've got
the neon animation

00:07:08.330 --> 00:07:10.120
set, which heavily
uses behaviors

00:07:10.120 --> 00:07:12.110
to define animatable elements.

00:07:12.110 --> 00:07:14.440
In fact, now that you
understand behaviors,

00:07:14.440 --> 00:07:16.220
we can start talking
about the animation

00:07:16.220 --> 00:07:17.967
elements in the next video.

00:07:17.967 --> 00:07:19.550
So I hope you found
this enlightening.

00:07:19.550 --> 00:07:20.990
Behaviors really
change the way you

00:07:20.990 --> 00:07:23.073
think about adding
functionality to your elements,

00:07:23.073 --> 00:07:25.679
and they open up a lot
of interesting avenues.

00:07:25.679 --> 00:07:26.970
That's it for this week, folks.

00:07:26.970 --> 00:07:28.560
Be sure to click that
little Subscribe button down

00:07:28.560 --> 00:07:29.350
at the bottom.

00:07:29.350 --> 00:07:31.045
If you have questions
for me, leave them

00:07:31.045 --> 00:07:31.920
down in the comments.

00:07:31.920 --> 00:07:34.140
I do try to read and
answer all those if I can.

00:07:34.140 --> 00:07:35.910
As always, thank so
much for watching,

00:07:35.910 --> 00:07:37.221
and I'll see you next time.

00:07:37.221 --> 00:07:37.720
Hey, guys.

00:07:37.720 --> 00:07:38.220
What's up?

00:07:38.220 --> 00:07:38.840
It's Rob.

00:07:38.840 --> 00:07:40.220
Q&amp;A time.

00:07:40.220 --> 00:07:43.420
Cheo Walker writes in and
asks, is there a replacement

00:07:43.420 --> 00:07:46.300
for core-list in Polymer 1.0?

00:07:46.300 --> 00:07:47.360
So great question, Cheo.

00:07:47.360 --> 00:07:48.650
Thank you for sending that in.

00:07:48.650 --> 00:07:50.191
I'm actually really
happy to announce

00:07:50.191 --> 00:07:52.200
that as of very recently,
we have just launched

00:07:52.200 --> 00:07:54.120
the new iron-list element.

00:07:54.120 --> 00:07:56.760
You can follow this link up
here to check out the repo.

00:07:56.760 --> 00:07:59.190
It's the same core list
that you loved before

00:07:59.190 --> 00:08:02.060
with all the cool, infinite
virtual scrolling goodness,

00:08:02.060 --> 00:08:04.970
but ported over to Polymer 1.0.

00:08:04.970 --> 00:08:06.580
So lot of really
awesome stuff there.

00:08:06.580 --> 00:08:08.210
Cheo, thanks for sending
in that question.

00:08:08.210 --> 00:08:10.084
I'm going to have my
minions reach out to you

00:08:10.084 --> 00:08:11.860
and send you a swag pack.

00:08:11.860 --> 00:08:14.155
If you out there watching--
if you have questions,

00:08:14.155 --> 00:08:15.780
leave them for me
down in the comments.

00:08:15.780 --> 00:08:17.238
I'm going to do my
best to respond.

00:08:17.238 --> 00:08:20.130
And we just might feature you on
the next episode of Polycasts.

00:08:20.130 --> 00:08:22.530
So again, thank you all
so much for watching,

00:08:22.530 --> 00:08:24.509
and I'll see you next time.

