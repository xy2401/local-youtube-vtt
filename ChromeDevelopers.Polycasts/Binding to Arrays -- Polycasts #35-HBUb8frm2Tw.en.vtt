WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.680
[MUSIC PLAYING]

00:00:04.482 --> 00:00:05.940
ROB DODSON: Hey
there, Polycasters.

00:00:05.940 --> 00:00:06.920
Rob here.

00:00:06.920 --> 00:00:08.980
A few episodes ago, I
started this little journey

00:00:08.980 --> 00:00:12.140
to try and understand
Polymer's data binding system.

00:00:12.140 --> 00:00:14.980
And since then we've looked
at property effects, path

00:00:14.980 --> 00:00:18.130
notifications, and watching
for changes in your JavaScript

00:00:18.130 --> 00:00:19.710
using observers.

00:00:19.710 --> 00:00:21.990
So today, we're going to
bring it all to a close

00:00:21.990 --> 00:00:24.240
by finally looking
at array bindings.

00:00:24.240 --> 00:00:26.590
Without further
ado, let's hop in.

00:00:26.590 --> 00:00:28.130
All right, so let's
say you've got

00:00:28.130 --> 00:00:30.266
a list of users in an array.

00:00:30.266 --> 00:00:32.390
Maybe it's like a leaderboard
or a high scores list

00:00:32.390 --> 00:00:33.532
or something like that.

00:00:33.532 --> 00:00:35.240
And you always want
to show the user that

00:00:35.240 --> 00:00:37.709
is in the first position.

00:00:37.709 --> 00:00:39.250
Now logically, you
might do something

00:00:39.250 --> 00:00:43.420
like this, where you try to use
array syntax to bind to users

00:00:43.420 --> 00:00:45.230
square brackets 0.

00:00:45.230 --> 00:00:47.600
However, syntax like that
is not actually supported

00:00:47.600 --> 00:00:49.590
in a Polymer binding.

00:00:49.590 --> 00:00:52.260
Instead, Polymer treats items
in an array much the same way

00:00:52.260 --> 00:00:54.185
as it treats subproperties
in an object.

00:00:54.185 --> 00:00:55.590
It turns them into paths.

00:00:55.590 --> 00:01:00.370
So you've got users
square bracket 0,

00:01:00.370 --> 00:01:03.476
and Polymer's actually going
to change that to users.0.

00:01:06.589 --> 00:01:08.130
Now in the last
episode, I showed you

00:01:08.130 --> 00:01:10.680
how you can watch for changes
on a path using observers.

00:01:10.680 --> 00:01:13.080
You can check that
out over there.

00:01:13.080 --> 00:01:17.670
So let's change our binding
to use this new approach.

00:01:17.670 --> 00:01:20.570
I'm going to create a
property called firstUser.

00:01:20.570 --> 00:01:23.930
And then, I'm going to
creater an observer which

00:01:23.930 --> 00:01:27.320
is watching the user's
array-- this array right here.

00:01:27.320 --> 00:01:31.315
It's watching that user's
array using an asterisk.

00:01:31.315 --> 00:01:33.810
And remember, that
asterisk or that wild card

00:01:33.810 --> 00:01:35.810
will watch for any
changes in the array

00:01:35.810 --> 00:01:37.930
or its subproperties, et cetera.

00:01:37.930 --> 00:01:42.600
And it will call this handler
function with a change record

00:01:42.600 --> 00:01:45.314
as the sort of first argument.

00:01:45.314 --> 00:01:47.355
And then I can actually
pass the second argument.

00:01:47.355 --> 00:01:50.330
I can pass 0.

00:01:50.330 --> 00:01:52.640
And that will then serve
as the second argument

00:01:52.640 --> 00:01:55.270
to the function, which
we'll use as our index.

00:01:55.270 --> 00:01:56.950
So anytime this
array changes, we're

00:01:56.950 --> 00:01:59.220
going to get a change
record in this handler.

00:01:59.220 --> 00:02:01.250
And if you recall from
the previous episode,

00:02:01.250 --> 00:02:04.540
change records have multiple
properties that we can use.

00:02:04.540 --> 00:02:07.200
One of those properties
is the base property,

00:02:07.200 --> 00:02:10.100
which always refers
to the object previous

00:02:10.100 --> 00:02:11.290
to the asterisk.

00:02:11.290 --> 00:02:13.840
So in this case, it's
always going to refer back

00:02:13.840 --> 00:02:16.010
to our user's array.

00:02:16.010 --> 00:02:19.040
So we can say that we want
the base object, and we

00:02:19.040 --> 00:02:20.970
want the item at that index.

00:02:20.970 --> 00:02:25.330
So this is basically
saying, hey, return users 0.

00:02:25.330 --> 00:02:27.600
So over here on the
right, we can actually

00:02:27.600 --> 00:02:30.290
see this in practice.

00:02:30.290 --> 00:02:33.020
I'm going to use my little
tricky Chrome DevTools

00:02:33.020 --> 00:02:35.010
method to select my item.

00:02:35.010 --> 00:02:36.570
I'll use Polymer's
unshift method

00:02:36.570 --> 00:02:40.700
to pass a new value
into its user's array.

00:02:40.700 --> 00:02:43.000
And then we can see that
that is reflecting up there,

00:02:43.000 --> 00:02:44.830
because once we've
set this new property,

00:02:44.830 --> 00:02:47.270
it's updating our
binding right there.

00:02:47.270 --> 00:02:48.710
And those two match up.

00:02:48.710 --> 00:02:49.274
Cool.

00:02:49.274 --> 00:02:51.440
Now, I was wondering if I
could simplify this a bit,

00:02:51.440 --> 00:02:53.356
and I noticed in the
documentation it actually

00:02:53.356 --> 00:02:55.810
recommends using a
computed binding.

00:02:55.810 --> 00:02:59.900
So let's change the code to
use that approach instead.

00:02:59.900 --> 00:03:02.780
So now I've got-- instead of
a property that I've created,

00:03:02.780 --> 00:03:04.770
I'm just using a
computed binding function

00:03:04.770 --> 00:03:06.450
I'm calling computeUser.

00:03:06.450 --> 00:03:10.520
I'm still using the wild card
approach to observe that array.

00:03:10.520 --> 00:03:12.310
And when you look
at computeUser,

00:03:12.310 --> 00:03:13.870
it still gets a change record.

00:03:13.870 --> 00:03:16.280
It still gets that index
argument, and it just-- instead

00:03:16.280 --> 00:03:19.410
of setting a property, it
just returns the value back

00:03:19.410 --> 00:03:20.890
into this binding.

00:03:20.890 --> 00:03:22.862
So let's give that a shot.

00:03:22.862 --> 00:03:23.666
All right.

00:03:23.666 --> 00:03:26.310
Go over here, I'll
unshift a new user

00:03:26.310 --> 00:03:30.150
into the front of the array.

00:03:30.150 --> 00:03:31.590
And everything works.

00:03:31.590 --> 00:03:34.630
Now for me, this was kind
of a revelation of sorts.

00:03:34.630 --> 00:03:37.510
I realized that computed
bindings and observers

00:03:37.510 --> 00:03:40.467
basically work the
exact same way.

00:03:40.467 --> 00:03:42.050
And so if you
understand one, then you

00:03:42.050 --> 00:03:45.650
understand the magic of the
other, which is pretty cool.

00:03:45.650 --> 00:03:47.970
Now you might be
wondering, if we're just

00:03:47.970 --> 00:03:50.410
working with paths,
how come I can't just

00:03:50.410 --> 00:03:56.190
bind to the subproperty, if
you will, this users.0 path?

00:03:56.190 --> 00:03:58.660
And then since we're using
Polymer's array methods, which

00:03:58.660 --> 00:04:02.137
normally will notify
items-- subproperty

00:04:02.137 --> 00:04:04.470
bindings of changes, if we're
using those array methods,

00:04:04.470 --> 00:04:06.220
then how come these
things aren't updating

00:04:06.220 --> 00:04:07.890
as I would expect them to?

00:04:07.890 --> 00:04:09.600
Well, what's
actually going on is

00:04:09.600 --> 00:04:12.020
this will work for
the initial render.

00:04:12.020 --> 00:04:14.880
So the first time I do this, I
will see the first place user

00:04:14.880 --> 00:04:15.700
from my array.

00:04:15.700 --> 00:04:17.540
I'll see Eric over there.

00:04:17.540 --> 00:04:19.920
But let's look at what
happens when I try and push

00:04:19.920 --> 00:04:21.370
in a second user.

00:04:21.370 --> 00:04:26.370
So I'll unshift, and this time
I'll ad a user named Boris.

00:04:26.370 --> 00:04:28.690
Nothing updates
visually, although we

00:04:28.690 --> 00:04:31.360
can verify that the
users array has changed.

00:04:31.360 --> 00:04:33.820
So Boris is now in
that first position.

00:04:33.820 --> 00:04:36.320
And the reason this is happening
is because, under the hood,

00:04:36.320 --> 00:04:39.360
Polymer takes that
initial path of users.0,

00:04:39.360 --> 00:04:43.330
and it turns it into its own
special, immutable key which

00:04:43.330 --> 00:04:45.371
you can use to keep
track of the item.

00:04:45.371 --> 00:04:47.370
This way, it can always
refer back to that item,

00:04:47.370 --> 00:04:50.720
even if the order in
the array has changed.

00:04:50.720 --> 00:04:53.670
And so that means that you
can't really reliably use

00:04:53.670 --> 00:04:55.450
this approach right here.

00:04:55.450 --> 00:04:57.690
The best practice
way of doing things

00:04:57.690 --> 00:05:02.070
is to either use an observer
or use a computed binding.

00:05:02.070 --> 00:05:06.110
So with that, you are now
Polymer data binding masters.

00:05:06.110 --> 00:05:08.060
Now last week, we sent
out this little tweet

00:05:08.060 --> 00:05:10.671
asking what you wanted to see
in the next episode of Polycast.

00:05:10.671 --> 00:05:12.920
You all voted and said you
wanted to see unit testing.

00:05:12.920 --> 00:05:14.753
So be sure to stick
around when next week we

00:05:14.753 --> 00:05:16.055
cover web component tester.

00:05:16.055 --> 00:05:18.680
In the meantime, though, be sure
to click that little Subscribe

00:05:18.680 --> 00:05:19.910
button if you've
enjoyed this episode.

00:05:19.910 --> 00:05:21.411
If you have
questions for us, you

00:05:21.411 --> 00:05:23.410
can ping us on a social
network of your choosing

00:05:23.410 --> 00:05:24.760
at #AskPolymer.

00:05:24.760 --> 00:05:26.510
As always, thank you
so much for watching.

00:05:26.510 --> 00:05:28.910
I'll see you next time.

00:05:28.910 --> 00:05:32.560
[MUSIC PLAYING]

