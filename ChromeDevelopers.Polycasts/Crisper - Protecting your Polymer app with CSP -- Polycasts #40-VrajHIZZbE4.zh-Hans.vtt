WEBVTT
Kind: captions
Language: zh-Hans

00:00:03.859 --> 00:00:08.010
嘿，今天有播客在这里抢劫

00:00:06.870 --> 00:00:10.440
我想谈谈的节目

00:00:08.010 --> 00:00:11.599
称为内容安全策略或

00:00:10.440 --> 00:00:14.730
 CSP 

00:00:11.599 --> 00:00:16.590
 CSP是一种JavaScript模型，旨在

00:00:14.730 --> 00:00:18.570
防止您的攻击媒介

00:00:16.590 --> 00:00:20.910
尤其是其中一种

00:00:18.570 --> 00:00:23.640
 CSP取缔的事情是使用

00:00:20.910 --> 00:00:24.990
现在，如果您的HTML中有内联脚本， 

00:00:23.640 --> 00:00:26.189
你一直在冷静地工作

00:00:24.990 --> 00:00:27.900
降落一段时间，您可能会意识到

00:00:26.189 --> 00:00:29.849
提出了一个问题，因为我们

00:00:27.900 --> 00:00:31.920
经常用内联设计我们的元素

00:00:29.849 --> 00:00:33.390
脚本，我们将一些HTML放在

00:00:31.920 --> 00:00:35.160
顶部，然后我们将放一个小脚本

00:00:33.390 --> 00:00:38.550
底部，这将是我们的元素

00:00:35.160 --> 00:00:40.920
定义导入在那里，怎么办

00:00:38.550 --> 00:00:43.020
我们确保我们的要素是CSP 

00:00:40.920 --> 00:00:45.719
很好地做到这一点，我们要

00:00:43.020 --> 00:00:47.149
现在使用一个叫做crisper的小工具

00:00:45.719 --> 00:00:49.410
保鲜盒将做的工作

00:00:47.149 --> 00:00:50.940
从我们的JavaScript中提取我们的JavaScript 

00:00:49.410 --> 00:00:52.620
元素定义，以便它可以

00:00:50.940 --> 00:00:53.399
在CSP环境中工作，这是

00:00:52.620 --> 00:00:55.170
真的很重要

00:00:53.399 --> 00:00:57.780
例如建立Chrome应用程式或

00:00:55.170 --> 00:00:59.760
使用像科尔多瓦或什至

00:00:57.780 --> 00:01:02.100
你会像转载工具一样使用

00:00:59.760 --> 00:01:04.470
喜欢争夺es6代码的战斗， 

00:01:02.100 --> 00:01:05.610
现在就在节目中将其变成es5 

00:01:04.470 --> 00:01:06.930
我想做的就是告诉你你如何

00:01:05.610 --> 00:01:08.430
可以使您的系统更加清晰和运行

00:01:06.930 --> 00:01:10.080
我将向您展示应用程序

00:01:08.430 --> 00:01:11.369
保鲜盒的命令行版本和

00:01:10.080 --> 00:01:13.409
那么我们可以继续介绍如何使用

00:01:11.369 --> 00:01:14.430
现在在像gulp这样的构建工具中

00:01:13.409 --> 00:01:16.380
从命令行开始

00:01:14.430 --> 00:01:19.380
我想做的只是npm 

00:01:16.380 --> 00:01:21.060
安装-G保鲜盒，这样就可以了

00:01:19.380 --> 00:01:22.890
在全球范围内卸载炸薯条并给予

00:01:21.060 --> 00:01:24.990
我那个二进制命令，所以我可以使用它

00:01:22.890 --> 00:01:27.390
在我的终端或我想要的任何地方

00:01:24.990 --> 00:01:29.549
一旦这个平方就消失了

00:01:27.390 --> 00:01:31.740
可以参加一些入门项目

00:01:29.549 --> 00:01:33.360
我在这里创建的就像一个演示

00:01:31.740 --> 00:01:35.640
炫耀我们要做什么

00:01:33.360 --> 00:01:38.100
导入文件在这里称为元素

00:01:35.640 --> 00:01:40.439
 HTML，这只是一些

00:01:38.100 --> 00:01:41.909
现在从我的elements目录中的元素

00:01:40.439 --> 00:01:43.950
我想做的就是捆绑所有这些

00:01:41.909 --> 00:01:46.439
一起提取JavaScript 

00:01:43.950 --> 00:01:48.659
我要做的是首先

00:01:46.439 --> 00:01:51.180
创建一个分发目录以保存

00:01:48.659 --> 00:01:53.009
我所有的内容一次输出

00:01:51.180 --> 00:01:55.890
从我不想运行的工具中

00:01:53.009 --> 00:01:57.840
硫化是我们的串联

00:01:55.890 --> 00:01:59.430
工具将连接我们所有的工具

00:01:57.840 --> 00:02:01.890
元素组合成一捆

00:01:59.430 --> 00:02:04.380
然后我们可以通过管道传输内容

00:02:01.890 --> 00:02:06.240
硫化后变得更脆

00:02:04.380 --> 00:02:09.629
可以把那一大捆分开

00:02:06.240 --> 00:02:10.739
将其转换为HTML和JavaScript吗

00:02:09.629 --> 00:02:12.510
我要用一点烟斗

00:02:10.739 --> 00:02:13.340
我硫化结束时的性格

00:02:12.510 --> 00:02:15.410
命令

00:02:13.340 --> 00:02:16.700
 -酥脆，告诉我我想要的地方

00:02:15.410 --> 00:02:18.830
 HTML将成为现实

00:02:16.700 --> 00:02:21.230
 elements.html，直到我想要

00:02:18.830 --> 00:02:23.930
 JavaScript驻留在元素点J中

00:02:21.230 --> 00:02:25.580
现在运行起来似乎有点怪异

00:02:23.930 --> 00:02:27.590
硫化并告诉它内联

00:02:25.580 --> 00:02:28.970
脚本，然后单独运行

00:02:27.590 --> 00:02:30.739
工具只是拉出所有这些脚本

00:02:28.970 --> 00:02:32.150
再一次，但我们实际上在这里做的是

00:02:30.739 --> 00:02:34.790
我们确保如果我们的元素

00:02:32.150 --> 00:02:36.560
取决于我们的外部javascript文件

00:02:34.790 --> 00:02:37.940
可以获取我们可以捆绑的所有文件

00:02:36.560 --> 00:02:40.430
他们在一起，所以我们没有创造一个

00:02:37.940 --> 00:02:41.330
大量的HTTP请求，只有一次

00:02:40.430 --> 00:02:43.489
您将所有东西捆绑在一起

00:02:41.330 --> 00:02:45.920
我们将JavaScript提取到

00:02:43.489 --> 00:02:47.690
单捆，所以这只是为了

00:02:45.920 --> 00:02:50.599
可以帮助我们减少人数

00:02:47.690 --> 00:02:52.010
现在一次在我们的应用程序中的请求

00:02:50.599 --> 00:02:53.930
我已经运行了这个命令，我可以去签出

00:02:52.010 --> 00:02:56.329
我在这里的磁盘目录

00:02:53.930 --> 00:02:58.099
我看了两个文件elements.html 

00:02:56.329 --> 00:02:59.569
为我加价

00:02:58.099 --> 00:03:02.510
元素，但在顶部我也有

00:02:59.569 --> 00:03:04.610
 J档案的这个要素

00:03:02.510 --> 00:03:06.110
 J的文件就是CRISPR的全部代码

00:03:04.610 --> 00:03:07.640
从我们的应用程序中退出并

00:03:06.110 --> 00:03:09.379
看着我们可以看到我们已经

00:03:07.640 --> 00:03:10.940
得到了所有用于聚合物的JavaScript， 

00:03:09.379 --> 00:03:12.590
如果我们向下滚动页面，我们也

00:03:10.940 --> 00:03:14.540
得到了我们所有的JavaScript 

00:03:12.590 --> 00:03:15.860
我们创建的元素x foo和X 

00:03:14.540 --> 00:03:17.959
酒吧以及您可能会做的其他事情

00:03:15.860 --> 00:03:19.069
在您的应用程序中，所以这是

00:03:17.959 --> 00:03:20.750
太好了，我们有克里斯在工作

00:03:19.069 --> 00:03:21.980
我们的应用程序，但您知道这有点像

00:03:20.750 --> 00:03:23.660
笨拙地从运行这些东西

00:03:21.980 --> 00:03:25.430
命令行每次都想要

00:03:23.660 --> 00:03:27.170
进行您的构建或部署

00:03:25.430 --> 00:03:28.940
应用程序，如果我们

00:03:27.170 --> 00:03:31.130
实际上可以将其与构建相结合

00:03:28.940 --> 00:03:32.239
像gulp这样的工具，我要做

00:03:31.130 --> 00:03:35.989
回到我的终端

00:03:32.239 --> 00:03:41.920
我要运行NPM install gulp crisper 

00:03:35.989 --> 00:03:41.920
我会等着

00:03:43.150 --> 00:03:48.169
好的，所以我们已经为口香糖安装了保鲜盒

00:03:46.370 --> 00:03:49.609
我现在要去做的就是

00:03:48.169 --> 00:03:51.139
文件，这是一个小口文件

00:03:49.609 --> 00:03:52.910
实际上是在前一集中开始的

00:03:51.139 --> 00:03:55.069
当我们谈论硫化和

00:03:52.910 --> 00:03:57.769
我要去做的就是保鲜盒

00:03:55.069 --> 00:03:59.810
在硫化任务完成后，我会

00:03:57.769 --> 00:04:02.510
说薄脆等于所需的大口脆

00:03:59.810 --> 00:04:04.609
然后因为gulp让我们知道

00:04:02.510 --> 00:04:06.950
将一个任务的输出传递给下一个任务

00:04:04.609 --> 00:04:08.810
我可以重命名此任务来构建和

00:04:06.950 --> 00:04:11.510
实际通过管道传输硫化产品

00:04:08.810 --> 00:04:13.579
进入保鲜盒，然后将其全部

00:04:11.510 --> 00:04:14.810
到我的磁盘目录中

00:04:13.579 --> 00:04:16.130
这就是您要做的所有添加炸薯条的步骤

00:04:14.810 --> 00:04:18.650
对您的构建过程非常简单

00:04:16.130 --> 00:04:20.479
我要下去并在

00:04:18.650 --> 00:04:21.979
我的默认任务从硫化转变为

00:04:20.479 --> 00:04:22.430
然后我可以切换到我的

00:04:21.979 --> 00:04:25.280
终奌站

00:04:22.430 --> 00:04:27.230
我可以大口吃

00:04:25.280 --> 00:04:28.460
现在我完成了，回到我的

00:04:27.230 --> 00:04:30.230
我看我的dist的应用程序

00:04:28.460 --> 00:04:32.600
目录，我有HTML元素

00:04:30.230 --> 00:04:33.889
和元素惹恼了这个话题，看看

00:04:32.600 --> 00:04:37.130
我的脚本文件在那里

00:04:33.889 --> 00:04:38.870
元素HTML几乎所有JavaScript 

00:04:37.130 --> 00:04:40.700
从聚合我所有的JavaScript 

00:04:38.870 --> 00:04:42.710
元素很好，所以如果我要

00:04:40.700 --> 00:04:45.980
部署到诸如Cordova或

00:04:42.710 --> 00:04:47.330
我会设置一个Chrome应用，你知道

00:04:45.980 --> 00:04:48.980
我们可以做很多事情

00:04:47.330 --> 00:04:51.200
就像我提到的CRISPR，我们可以使用工具

00:04:48.980 --> 00:04:52.700
像通天塔一样转译代码，我们可以

00:04:51.200 --> 00:04:54.200
用你知道的CoffeeScript和其他很酷的

00:04:52.700 --> 00:04:56.419
东西，所以我要尝试覆盖一些

00:04:54.200 --> 00:04:58.190
如果您已经在未来的情节中

00:04:56.419 --> 00:04:59.780
喜欢这个情节，请务必

00:04:58.190 --> 00:05:01.610
在下面留下一些评论

00:04:59.780 --> 00:05:03.200
也许考虑点击像

00:05:01.610 --> 00:05:04.880
如果你真的过得很开心

00:05:03.200 --> 00:05:06.169
如果您对我们有任何疑问

00:05:04.880 --> 00:05:08.030
您可以随时在社交网络上对我们进行ping操作

00:05:06.169 --> 00:05:09.919
您在hashtag上选择的网络问

00:05:08.030 --> 00:05:23.140
一如既往地感谢您的聚合物

00:05:09.919 --> 00:05:23.140
看，下次见

