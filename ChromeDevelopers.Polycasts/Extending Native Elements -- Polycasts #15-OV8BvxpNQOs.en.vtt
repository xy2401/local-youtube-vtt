WEBVTT
Kind: captions
Language: en

00:00:02.749 --> 00:00:03.790
ROB DODSON: Hi, everyone.

00:00:03.790 --> 00:00:04.040
What 's up?

00:00:04.040 --> 00:00:04.880
It's Rob Dodson.

00:00:04.880 --> 00:00:06.546
Today on Polycast,
I'm going to show you

00:00:06.546 --> 00:00:09.830
a very important trick-- how
to inherit from native HTML

00:00:09.830 --> 00:00:10.720
elements.

00:00:10.720 --> 00:00:13.820
Not only will this save you a
ton of accessibility headaches,

00:00:13.820 --> 00:00:15.260
but it's also
crucial if you want

00:00:15.260 --> 00:00:17.140
to work with forms or tables.

00:00:17.140 --> 00:00:19.030
So let's dive in.

00:00:19.030 --> 00:00:20.600
So inheriting from
a native element

00:00:20.600 --> 00:00:24.270
is really not that different
from creating a brand new tag.

00:00:24.270 --> 00:00:26.047
You've still got the
Polymer constructor

00:00:26.047 --> 00:00:26.880
that you're calling.

00:00:26.880 --> 00:00:29.710
The difference is, you pass
in an extends property,

00:00:29.710 --> 00:00:34.540
and you pass in the tag name
that you're inheriting from.

00:00:34.540 --> 00:00:36.220
And to use your new
element in markup,

00:00:36.220 --> 00:00:37.386
it's really straightforward.

00:00:37.386 --> 00:00:40.600
You use the original tag
name, you get an is attribute,

00:00:40.600 --> 00:00:43.340
and you pass in the extending
tag name that you've created.

00:00:43.340 --> 00:00:45.080
So button is super-button.

00:00:45.080 --> 00:00:46.990
If you want to do
this in JavaScript,

00:00:46.990 --> 00:00:49.990
you call document.createElement,
pass in the original tag name

00:00:49.990 --> 00:00:51.490
and the extend name tag name.

00:00:51.490 --> 00:00:53.940
Now, creating an
element in this fashion

00:00:53.940 --> 00:00:57.430
is known as a type
extension element.

00:00:57.430 --> 00:01:01.330
And as I said before, they've
got a few very nice benefits.

00:01:01.330 --> 00:01:03.650
So let's say you're
working with a table,

00:01:03.650 --> 00:01:06.720
and you've got this
fancy-td element that you've

00:01:06.720 --> 00:01:07.986
created inside of here.

00:01:07.986 --> 00:01:10.110
What's going to happen is,
as the parser is working

00:01:10.110 --> 00:01:12.276
its way down the page, it's
going to hit this thing,

00:01:12.276 --> 00:01:15.300
and it's actually going to
hoist it outside of the table.

00:01:15.300 --> 00:01:19.150
Because certain elements,
like Table and UL and OL,

00:01:19.150 --> 00:01:21.235
if there are contents
inside of them

00:01:21.235 --> 00:01:22.610
that the parser
is not expecting,

00:01:22.610 --> 00:01:23.810
either it's not
going to render them,

00:01:23.810 --> 00:01:25.890
or it's going to do this thing
where it hoists them out.

00:01:25.890 --> 00:01:27.890
And that is probably not
what you're intending.

00:01:27.890 --> 00:01:30.410
It's going to render
in sort of a weird way.

00:01:30.410 --> 00:01:32.490
So we can fix this.

00:01:32.490 --> 00:01:34.620
Instead of creating
a custom tag name,

00:01:34.620 --> 00:01:37.440
we can extend the
native td element

00:01:37.440 --> 00:01:40.790
and create a fancy-td that
way, and we're all good.

00:01:40.790 --> 00:01:43.570
Another use case for type
extension elements is forms.

00:01:43.570 --> 00:01:48.030
So forms normally try to
package up all the values

00:01:48.030 --> 00:01:50.830
from all the input elements
that are inside of them.

00:01:50.830 --> 00:01:54.190
But if you throw a guy
like this into a form,

00:01:54.190 --> 00:01:56.860
it's going to be like, I have
no idea what this tag is.

00:01:56.860 --> 00:01:58.340
I don't know if it has values.

00:01:58.340 --> 00:02:00.760
I'm just going to
ignore it when I submit

00:02:00.760 --> 00:02:02.500
my payload to the server.

00:02:02.500 --> 00:02:06.121
So again, we can fix this by
extending the native input

00:02:06.121 --> 00:02:06.620
element.

00:02:06.620 --> 00:02:09.130
So input is fancy-input.

00:02:09.130 --> 00:02:12.260
This is going to get all of
its values sent to the server.

00:02:12.260 --> 00:02:13.300
So we're all good there.

00:02:13.300 --> 00:02:17.330
The other cool benefit is, if
you look at the native input

00:02:17.330 --> 00:02:20.090
element, and you press the
Tab key on your keyboard,

00:02:20.090 --> 00:02:23.360
normally what you'll see is
a focus ring go around it.

00:02:23.360 --> 00:02:26.837
Now, this focus state is
very crucial for users

00:02:26.837 --> 00:02:27.920
of assistive technologies.

00:02:27.920 --> 00:02:30.410
There are a lot of folks out
there who cannot use a mouse

00:02:30.410 --> 00:02:31.980
to interact with the screen.

00:02:31.980 --> 00:02:34.790
They rely on keyboard
navigation to get around.

00:02:34.790 --> 00:02:38.250
And for them, these focus states
are very, very, very important.

00:02:38.250 --> 00:02:41.080
If you're extending the native
input element with a type

00:02:41.080 --> 00:02:43.570
extension element, you're going
to get this focus behavior

00:02:43.570 --> 00:02:44.490
for free.

00:02:44.490 --> 00:02:46.940
Otherwise, if you just
created your own tag,

00:02:46.940 --> 00:02:48.855
then you need to add
your own tab index.

00:02:48.855 --> 00:02:50.272
You need to add your own rules.

00:02:50.272 --> 00:02:51.980
You need to add your
own ARIA attributes.

00:02:51.980 --> 00:02:53.521
There's a lot more
accessibility work

00:02:53.521 --> 00:02:56.800
that you have to do when you're
not extending native elements,

00:02:56.800 --> 00:02:59.840
because then you kind
of just get it for free.

00:02:59.840 --> 00:03:01.970
So let's take a stab at
implementing our own type

00:03:01.970 --> 00:03:04.370
extension element, and
that will really highlight

00:03:04.370 --> 00:03:05.919
some of these benefits.

00:03:05.919 --> 00:03:07.460
So to start off,
what I'm going to do

00:03:07.460 --> 00:03:09.160
is create a Bower JSON file.

00:03:09.160 --> 00:03:11.522
I've got an element that I'm
creating called gh-button.

00:03:11.522 --> 00:03:12.980
It's going to look
like the buttons

00:03:12.980 --> 00:03:14.940
that you see on
the GitHub website.

00:03:14.940 --> 00:03:17.540
I'm depending on Polymer,
and I'm depending

00:03:17.540 --> 00:03:19.820
on the 0.8 release here.

00:03:19.820 --> 00:03:22.500
Over in my terminal, I'm
going to run Bower install

00:03:22.500 --> 00:03:24.340
to pull down that dependency.

00:03:24.340 --> 00:03:27.185
Because Polymer implicitly
depends on Web Components JS,

00:03:27.185 --> 00:03:29.845
I'm going to get that for free
as well, which is really nice.

00:03:29.845 --> 00:03:31.261
And the last thing
I'm going to do

00:03:31.261 --> 00:03:33.320
is run the polyserve command.

00:03:33.320 --> 00:03:35.610
Now polyserve, if you recall
from our last episode,

00:03:35.610 --> 00:03:38.710
is a little server which allows
us to write our elements using

00:03:38.710 --> 00:03:40.500
canonical path URLs.

00:03:40.500 --> 00:03:42.420
If you have absolutely
no idea what

00:03:42.420 --> 00:03:45.895
I'm talking about right now, you
can follow this link right here

00:03:45.895 --> 00:03:47.145
to catch the previous episode.

00:03:47.145 --> 00:03:50.320
And that will explain everything
that we're doing here.

00:03:50.320 --> 00:03:52.490
Now, over in my
gh-button. htme file,

00:03:52.490 --> 00:03:55.550
I'm going to start by
importing Polymer HTML.

00:03:55.550 --> 00:03:57.600
And I'm going to use
the canonical path

00:03:57.600 --> 00:03:59.360
style to do that.

00:03:59.360 --> 00:04:02.410
Then I'm going to have a dom
module with an ID of gh-button.

00:04:02.410 --> 00:04:05.504
And inside I'll throw in a
template and a content element.

00:04:05.504 --> 00:04:07.670
The last thing on my script,
I will call the Polymer

00:04:07.670 --> 00:04:09.780
constructor, pass in gh-button.

00:04:09.780 --> 00:04:12.450
And I'm going to pass
in extends button.

00:04:12.450 --> 00:04:14.550
So we've now created a
type extension element

00:04:14.550 --> 00:04:16.160
of the native button tag.

00:04:16.160 --> 00:04:19.600
Now over in my demo HTML file,
I'm going to start by importing

00:04:19.600 --> 00:04:21.955
webcomponents-lite.js.

00:04:21.955 --> 00:04:26.640
Then I'm going to include an
import for gh-button.html.

00:04:26.640 --> 00:04:28.340
Lastly, down in
my body, I'm going

00:04:28.340 --> 00:04:30.500
to use the button element.

00:04:30.500 --> 00:04:33.840
I'm going to say
it is a gh-button.

00:04:33.840 --> 00:04:37.300
And then I'll just throw some
Hello World text inside of it.

00:04:37.300 --> 00:04:39.535
Now, if go over to my
browser to preview this,

00:04:39.535 --> 00:04:41.660
I'm going to get this little
button element up here

00:04:41.660 --> 00:04:42.620
in the corner.

00:04:42.620 --> 00:04:45.330
You see that when I click on
it, I get the behavior I expect.

00:04:45.330 --> 00:04:49.090
If I tab to it, I get
focus rings around it.

00:04:49.090 --> 00:04:53.000
Most importantly, when I
flip on my screen reader,

00:04:53.000 --> 00:04:54.719
I can actually
navigate down to it.

00:04:54.719 --> 00:04:56.260
And you'll see that
the screen reader

00:04:56.260 --> 00:04:58.660
is going to read the
content of the button.

00:04:58.660 --> 00:05:02.230
And it's going to announce
that it is a button.

00:05:02.230 --> 00:05:04.870
It's actually announcing
this implicit role here.

00:05:04.870 --> 00:05:08.485
Now, that is very, very useful.

00:05:08.485 --> 00:05:10.860
So the last thing I'm going
to do to spice this button up

00:05:10.860 --> 00:05:13.680
is I'm going to drop
in a style element.

00:05:13.680 --> 00:05:16.320
And I've got a bunch of CSS
that I've included here.

00:05:16.320 --> 00:05:19.027
I've just taken this
from GitHub's CSS file.

00:05:19.027 --> 00:05:21.610
So you don't have to worry about
what all these selectors are.

00:05:21.610 --> 00:05:24.400
One thing to note is that
I'm using the host selector

00:05:24.400 --> 00:05:28.060
to style the element itself.

00:05:28.060 --> 00:05:30.870
And I've also gone
in here, and using

00:05:30.870 --> 00:05:34.560
GitHub CSS, specified
focus states, hover states,

00:05:34.560 --> 00:05:35.280
active states.

00:05:35.280 --> 00:05:38.220
You can see how you can apply
these sort of pseudo-states

00:05:38.220 --> 00:05:38.940
to your elements.

00:05:38.940 --> 00:05:42.050
It's very important that you
do this for accessibility.

00:05:42.050 --> 00:05:45.440
Now, hopping back into Chrome,
when I refresh the page,

00:05:45.440 --> 00:05:48.230
you'll see that I've got a
way nicer-looking button.

00:05:48.230 --> 00:05:48.960
I click on it.

00:05:48.960 --> 00:05:50.580
I get the same
behavior as before.

00:05:50.580 --> 00:05:53.500
I can hit Tab to put a
focus ring around it.

00:05:53.500 --> 00:05:56.345
And most importantly, I can
flip on my screen reader

00:05:56.345 --> 00:05:58.460
and navigate to this button.

00:05:58.460 --> 00:06:00.230
I'll see the text
content gets read aloud,

00:06:00.230 --> 00:06:04.060
and I still get that awesome
implicit button state.

00:06:04.060 --> 00:06:06.290
Now, the obvious question
is, when should I

00:06:06.290 --> 00:06:07.750
use a Type Extension Element?

00:06:07.750 --> 00:06:10.030
And when should I
create a Custom Tag?

00:06:10.030 --> 00:06:12.610
My rule of thumb is to try to
extend from a native element,

00:06:12.610 --> 00:06:15.000
whenever possible,
especially if accessibility

00:06:15.000 --> 00:06:16.540
is playing a role in things.

00:06:16.540 --> 00:06:18.582
So if I'm building a
control or a button,

00:06:18.582 --> 00:06:20.040
something that
might require focus,

00:06:20.040 --> 00:06:22.150
I'm going to try to extend
from a native element,

00:06:22.150 --> 00:06:23.640
if that's possible.

00:06:23.640 --> 00:06:24.750
That's it for today.

00:06:24.750 --> 00:06:26.350
Be sure to subscribe,
and stick around

00:06:26.350 --> 00:06:27.670
for this week's
featured question.

00:06:27.670 --> 00:06:29.420
As always, thank you
so much for watching,

00:06:29.420 --> 00:06:32.700
and I'll see you next time.

00:06:32.700 --> 00:06:36.080
All right, Q&amp;A time,
folks-- Edward Wieczorek

00:06:36.080 --> 00:06:38.380
and Justin Merz ask,
are there any plans

00:06:38.380 --> 00:06:41.670
to support ES6
Modules in Polymer?

00:06:41.670 --> 00:06:43.780
Which is a great question, guys.

00:06:43.780 --> 00:06:46.470
Currently, the plan is to
support ES6 Modules when

00:06:46.470 --> 00:06:48.771
they ship in the browsers.

00:06:48.771 --> 00:06:50.520
Right now, if you want
to use ES6 Modules,

00:06:50.520 --> 00:06:53.120
you've got to use some kind
of build step or a library

00:06:53.120 --> 00:06:53.670
like that.

00:06:53.670 --> 00:06:56.220
We want to avoid having
to force people to use a

00:06:56.220 --> 00:06:57.725
build step just to use Polymer.

00:06:57.725 --> 00:06:59.280
So the plan at the
moment is, once

00:06:59.280 --> 00:07:02.550
that stuff ships in the
browsers, we absolutely 100%

00:07:02.550 --> 00:07:03.690
want to support it.

00:07:03.690 --> 00:07:05.148
Thank you so much
for the question.

00:07:05.148 --> 00:07:08.040
I'm going to have my minions
contact you guys on G+.

00:07:08.040 --> 00:07:10.522
And if you out there want to
get some swag of your own,

00:07:10.522 --> 00:07:12.230
leave us a question
down in the comments.

00:07:12.230 --> 00:07:14.520
Maybe we'll feature you
on a future episode.

00:07:14.520 --> 00:07:16.103
Again, thank you so
much for watching,

00:07:16.103 --> 00:07:17.820
and I'll see you next time.

