WEBVTT
Kind: captions
Language: en

00:00:03.490 --> 00:00:04.230
Hey, everyone.

00:00:04.230 --> 00:00:04.510
What's up?

00:00:04.510 --> 00:00:05.030
It's Rob Dodson.

00:00:05.030 --> 00:00:06.160
Today on Polycast
I'm going to take you

00:00:06.160 --> 00:00:08.559
down the path of creating a
public API for your elements.

00:00:08.559 --> 00:00:11.100
We're also going to be answering
questions from the audience,

00:00:11.100 --> 00:00:12.860
so be sure to stick
around for that.

00:00:12.860 --> 00:00:15.400
First, let's hop into some code.

00:00:15.400 --> 00:00:18.180
So the first part of creating
a public API for your element

00:00:18.180 --> 00:00:20.170
is declaring public
properties, and this

00:00:20.170 --> 00:00:24.465
has changed a bunch from Polymer
0.5 to the newest version.

00:00:24.465 --> 00:00:26.090
In previous versions
of Polymer, if you

00:00:26.090 --> 00:00:28.380
wanted to declare public
properties for your element

00:00:28.380 --> 00:00:30.240
there was an attributes
attribute that you

00:00:30.240 --> 00:00:31.680
could put properties in.

00:00:31.680 --> 00:00:33.590
There was a
published object then

00:00:33.590 --> 00:00:36.490
you could put properties in,
and sometimes it was confusing.

00:00:36.490 --> 00:00:38.300
You know, where should
you put your stuff?

00:00:38.300 --> 00:00:39.800
So in the latest
version of Polymer,

00:00:39.800 --> 00:00:44.180
this has all been consolidated
into one single properties

00:00:44.180 --> 00:00:46.124
object, and it's a
very powerful object.

00:00:46.124 --> 00:00:48.040
So let me show it to
you, and we can check out

00:00:48.040 --> 00:00:49.780
some of the cool
things that it does.

00:00:49.780 --> 00:00:52.180
So first and foremost, I've
got an x-custom element

00:00:52.180 --> 00:00:54.570
that I've created here, I've
got a properties object,

00:00:54.570 --> 00:00:57.380
and I've got two
properties, first and last,

00:00:57.380 --> 00:01:00.220
and I've set string
to their values.

00:01:00.220 --> 00:01:03.410
Which basically tells Polymer
that when someone passes

00:01:03.410 --> 00:01:05.840
in a value for first and
last, that value should

00:01:05.840 --> 00:01:08.510
be de-serialized to a string.

00:01:08.510 --> 00:01:10.190
So that's really nice.

00:01:10.190 --> 00:01:12.470
You can de-serialize
to various other types,

00:01:12.470 --> 00:01:15.004
like number, object, et cetera.

00:01:15.004 --> 00:01:16.420
Another cool thing
that you can do

00:01:16.420 --> 00:01:19.110
is you can pass in a default
value for a property.

00:01:19.110 --> 00:01:20.970
So I've got an
age property here,

00:01:20.970 --> 00:01:24.560
I've set its type to number,
and a default value of 42.

00:01:24.560 --> 00:01:26.700
You can also create observers
for your properties.

00:01:26.700 --> 00:01:28.870
So these are functions
that will run

00:01:28.870 --> 00:01:30.630
whenever the property changes.

00:01:30.630 --> 00:01:34.550
So here I've set observer to
this age changed function.

00:01:34.550 --> 00:01:37.080
And in previous
versions of Polymer,

00:01:37.080 --> 00:01:40.480
we had this notion of changed
watchers, which were functions

00:01:40.480 --> 00:01:42.860
that we kind of secretly
implemented for you.

00:01:42.860 --> 00:01:44.470
If you had a public
property, you've

00:01:44.470 --> 00:01:45.970
got one of those
functions for free.

00:01:45.970 --> 00:01:47.204
It was a little bit of magic.

00:01:47.204 --> 00:01:48.620
Now that has been
sort of removed,

00:01:48.620 --> 00:01:50.200
and if you want to
observe a changing

00:01:50.200 --> 00:01:52.660
need to explicitly create
an observer like this.

00:01:52.660 --> 00:01:53.250
Which is nice.

00:01:53.250 --> 00:01:55.670
It sort of-- if someone
was looking at your code

00:01:55.670 --> 00:01:57.045
and they weren't
quite sure where

00:01:57.045 --> 00:01:58.580
that function was
coming from, this

00:01:58.580 --> 00:02:00.382
clears up any confusion there.

00:02:00.382 --> 00:02:02.340
And one thing to point
out is that because this

00:02:02.340 --> 00:02:04.030
is effectively like
a private function,

00:02:04.030 --> 00:02:06.154
I don't want a bunch of
people calling this method,

00:02:06.154 --> 00:02:08.320
I would only like it to
run if my property changes,

00:02:08.320 --> 00:02:10.150
I'm prefixing it
with an underscore.

00:02:10.150 --> 00:02:12.566
And that's something that we're
doing with all the Polymer

00:02:12.566 --> 00:02:15.329
elements just to highlight
to folks that this

00:02:15.329 --> 00:02:17.870
is internal to the element and
not meant to the outside world

00:02:17.870 --> 00:02:18.450
to call.

00:02:18.450 --> 00:02:19.866
And other thing
that you can do is

00:02:19.866 --> 00:02:22.670
you can have your element
dispatch change events anytime

00:02:22.670 --> 00:02:24.180
its property is updated.

00:02:24.180 --> 00:02:27.170
So this is similar to the way
that native Dom elements work.

00:02:27.170 --> 00:02:29.780
You've got input, and
select, and, you know,

00:02:29.780 --> 00:02:33.400
when they change they actually
fire events every single time

00:02:33.400 --> 00:02:34.740
to notify folks.

00:02:34.740 --> 00:02:37.570
So adding a notify
property to your element

00:02:37.570 --> 00:02:40.100
is going to dispatch those
change events for you.

00:02:40.100 --> 00:02:42.720
So I'll get an
age changed event.

00:02:42.720 --> 00:02:44.400
And the nice thing
is this is actually

00:02:44.400 --> 00:02:47.440
the basis for the two way
binding system in Polymer.

00:02:47.440 --> 00:02:50.050
So if you want one of these
properties here to a bindable,

00:02:50.050 --> 00:02:51.760
you need to make
sure that you've

00:02:51.760 --> 00:02:53.950
got notify true set on it.

00:02:53.950 --> 00:02:56.440
Also, hopefully,
this makes it easier

00:02:56.440 --> 00:02:58.145
to interop with
other frameworks.

00:02:58.145 --> 00:02:59.770
So there are other
frameworks out there

00:02:59.770 --> 00:03:01.960
that have their own
data binding systems,

00:03:01.960 --> 00:03:04.920
and previously it
was unclear how

00:03:04.920 --> 00:03:08.380
they could know at what point
in a Polymer elements life

00:03:08.380 --> 00:03:10.410
to actually check for changes.

00:03:10.410 --> 00:03:12.400
This way it's
getting an event, it

00:03:12.400 --> 00:03:13.910
can listen for that
it's consistent,

00:03:13.910 --> 00:03:16.910
and that way we can, hopefully,
interop with some other data

00:03:16.910 --> 00:03:18.040
binding systems.

00:03:18.040 --> 00:03:19.831
Now, another really
awesome that you can do

00:03:19.831 --> 00:03:21.250
is create computer properties.

00:03:21.250 --> 00:03:23.090
So let's say I want
to take first and last

00:03:23.090 --> 00:03:25.400
and combine them
together into one value.

00:03:25.400 --> 00:03:29.440
I can do that here by passing
a computed key, and then

00:03:29.440 --> 00:03:31.580
a compute full
name function name,

00:03:31.580 --> 00:03:33.380
and I'm passing in
the two properties

00:03:33.380 --> 00:03:35.130
that I would like to
send in as arguments.

00:03:35.130 --> 00:03:37.020
So I'm passing in
first and last.

00:03:37.020 --> 00:03:39.700
Now, it's important to
include these arguments here,

00:03:39.700 --> 00:03:42.210
because what they do
is they tell Polymer

00:03:42.210 --> 00:03:46.310
that any time first or last
changes this compute full name

00:03:46.310 --> 00:03:49.770
function should run again
to update this value.

00:03:49.770 --> 00:03:51.979
So very, very
useful trick there.

00:03:51.979 --> 00:03:54.520
Another thing that you can do
is create read only properties.

00:03:54.520 --> 00:03:56.936
So let's say you have an element
with some internal state,

00:03:56.936 --> 00:03:59.300
you don't want the outside
world playing around with it,

00:03:59.300 --> 00:04:00.700
you can set that
property to read

00:04:00.700 --> 00:04:02.860
only so that way folks
can only get the value,

00:04:02.860 --> 00:04:04.060
they can never set it.

00:04:04.060 --> 00:04:05.750
Lastly, one thing
that's really cool

00:04:05.750 --> 00:04:10.230
is you can reflect values back
to attributes if you need to.

00:04:10.230 --> 00:04:12.560
So this is really
helpful if someone

00:04:12.560 --> 00:04:15.620
is trying to style your
element with the CSS attribute

00:04:15.620 --> 00:04:16.470
selector.

00:04:16.470 --> 00:04:18.640
You probably won't use
this guy that much,

00:04:18.640 --> 00:04:20.535
but it's there if you need it.

00:04:20.535 --> 00:04:22.160
For the new properties
object gives you

00:04:22.160 --> 00:04:24.890
a kind of power, let's
hop into the Code Editor

00:04:24.890 --> 00:04:27.230
and actually put
this into practice.

00:04:27.230 --> 00:04:29.810
So I'm going to start, as
I do with all my elements,

00:04:29.810 --> 00:04:31.350
in a Bower JSON file.

00:04:31.350 --> 00:04:33.770
I've got an element that
I've created called name tag,

00:04:33.770 --> 00:04:38.720
and in my dependencies I've
listed Polymer 0.9.0-rc.1.

00:04:38.720 --> 00:04:40.471
So this is the release
candidate for rc.1,

00:04:40.471 --> 00:04:42.428
which is what's currently
available at the time

00:04:42.428 --> 00:04:43.250
of this recording.

00:04:43.250 --> 00:04:47.950
But if you're watching this
and, I'm assuming by now

00:04:47.950 --> 00:04:52.070
the 0.9.0 tag is actually
out-- so you can actually

00:04:52.070 --> 00:04:54.000
take this value
here and probably

00:04:54.000 --> 00:04:57.080
just go ahead and replace
it in your Bower JSON

00:04:57.080 --> 00:05:00.900
with a little caret 0.9.0.

00:05:00.900 --> 00:05:03.524
And that should get you
the latest tag of Polymer.

00:05:03.524 --> 00:05:04.940
Now over in my
terminal, I'm going

00:05:04.940 --> 00:05:08.760
to run Bower install to pull
down that version of Polymer,

00:05:08.760 --> 00:05:10.510
and then back in
Sublime I can create

00:05:10.510 --> 00:05:12.904
a name dash tag HTML file.

00:05:12.904 --> 00:05:15.320
And this is where I'm going
to put my elements definition.

00:05:15.320 --> 00:05:17.620
The first thing I've
got to do, as always,

00:05:17.620 --> 00:05:20.830
is use the canonical
path to import Polymer.

00:05:20.830 --> 00:05:22.830
Then I'm going to
create a Dom module was

00:05:22.830 --> 00:05:26.749
an ID that matches my elements
tag name, so ID of name tag,

00:05:26.749 --> 00:05:28.540
and inside of there I
will throw a template

00:05:28.540 --> 00:05:30.800
and that's where I'm going
to put all of the local Dom

00:05:30.800 --> 00:05:32.640
content for my element.

00:05:32.640 --> 00:05:36.320
The next thing I need to do is
call the Polymer constructor,

00:05:36.320 --> 00:05:37.820
and I need to give
it an is property

00:05:37.820 --> 00:05:40.170
and pass in my tag name.

00:05:40.170 --> 00:05:42.710
And then I'm also going to
create a properties object

00:05:42.710 --> 00:05:45.545
for it, and I will create
first and last properties

00:05:45.545 --> 00:05:48.480
and I'm going to set
those to strings.

00:05:48.480 --> 00:05:51.250
Then I will create a div
up here called full name,

00:05:51.250 --> 00:05:56.490
and I will bind those values
up to spans inside of that div.

00:05:56.490 --> 00:05:58.040
Now in previous
versions of Polymer,

00:05:58.040 --> 00:06:01.030
you could actually create
these binding expressions

00:06:01.030 --> 00:06:03.550
where you have multiple
values and multiple bindings

00:06:03.550 --> 00:06:06.050
all kind of mushed into one tag.

00:06:06.050 --> 00:06:07.640
Currently in
Polymer, that is not

00:06:07.640 --> 00:06:09.770
supported though it
is on the roadmap.

00:06:09.770 --> 00:06:13.270
So if you need to get both
first and last into this div,

00:06:13.270 --> 00:06:15.580
you've got to wrap them
inside of spans which

00:06:15.580 --> 00:06:17.580
is a little funky and
we're going to come back

00:06:17.580 --> 00:06:18.990
to this point in a moment.

00:06:18.990 --> 00:06:20.850
But so far, just
with this right here,

00:06:20.850 --> 00:06:22.780
we're ready to
preview our element.

00:06:22.780 --> 00:06:25.350
So I'll go to my
index file, and I'm

00:06:25.350 --> 00:06:29.680
going to import definition
for my name tag element.

00:06:29.680 --> 00:06:33.220
And then down in the body,
I can drop in a name tag

00:06:33.220 --> 00:06:36.090
and I can configure it
with first and last value.

00:06:36.090 --> 00:06:39.530
So I'm just going to pass
in my name as those values.

00:06:39.530 --> 00:06:42.720
Next, I'm going to run the
trustee polyserve module

00:06:42.720 --> 00:06:44.950
to actually preview my element.

00:06:44.950 --> 00:06:47.617
Polyserve is a little
local node server

00:06:47.617 --> 00:06:49.450
that you can use to
test out your component,

00:06:49.450 --> 00:06:51.480
it plays very nicely with Bower.

00:06:51.480 --> 00:06:53.410
If you have no idea
what I'm talking about,

00:06:53.410 --> 00:06:55.620
you can check out this
video her right here.

00:06:55.620 --> 00:06:58.000
We've got a full episode
which explains how to get up

00:06:58.000 --> 00:06:59.750
and running with polyserve.

00:06:59.750 --> 00:07:01.530
If you are building
a lot of elements,

00:07:01.530 --> 00:07:03.300
this is an invaluable tool.

00:07:03.300 --> 00:07:05.580
So it is worth your time
to check out that episode.

00:07:05.580 --> 00:07:08.840
Now, over in Chrome, I'm
going to refresh the page

00:07:08.840 --> 00:07:11.600
and you can see over
here-- I'll kind of

00:07:11.600 --> 00:07:13.120
boost this up a
little bit for you--

00:07:13.120 --> 00:07:14.790
that my name is now showing up.

00:07:14.790 --> 00:07:17.080
So I've got first and
last, those binding values

00:07:17.080 --> 00:07:18.324
are being displayed there.

00:07:18.324 --> 00:07:19.490
It's a little boring, right?

00:07:19.490 --> 00:07:21.550
But at least you
can see it works.

00:07:21.550 --> 00:07:23.540
And back in my
element definition,

00:07:23.540 --> 00:07:25.500
I'm going to try to
clean this up a little

00:07:25.500 --> 00:07:27.020
bit because having
those spans there

00:07:27.020 --> 00:07:29.600
is little bit of a funky
hack, and to do that I'm going

00:07:29.600 --> 00:07:31.190
to use a computed property.

00:07:31.190 --> 00:07:34.870
So in my properties object,
I will create a full name

00:07:34.870 --> 00:07:35.810
property.

00:07:35.810 --> 00:07:37.601
I'm going to say it's
computed, and then it

00:07:37.601 --> 00:07:38.830
computes first and last.

00:07:38.830 --> 00:07:42.510
And then down here, I can
actually implement that method.

00:07:42.510 --> 00:07:44.740
So it takes first and
last as arguments,

00:07:44.740 --> 00:07:48.280
it returns a string that
is the concatenated values.

00:07:48.280 --> 00:07:50.440
Then up in my div,
I can just drop

00:07:50.440 --> 00:07:52.095
in a binding for full name.

00:07:52.095 --> 00:07:53.720
Now the next thing
I want to do to make

00:07:53.720 --> 00:07:55.920
this tag look a little
bit nicer is actually add

00:07:55.920 --> 00:07:57.730
some styles in here.

00:07:57.730 --> 00:08:02.204
So I'm styling the host, and
I'm styling that full name div.

00:08:02.204 --> 00:08:03.620
And what this is
going to give me,

00:08:03.620 --> 00:08:05.610
when I go back to Chrome
and refresh the page,

00:08:05.610 --> 00:08:08.610
is something that looks a little
bit more like a name badge.

00:08:08.610 --> 00:08:10.900
And you can see that I
still see my full name their

00:08:10.900 --> 00:08:12.760
using that computer property.

00:08:12.760 --> 00:08:15.040
OK, I'm going to clue you
in on a little pro tip now.

00:08:15.040 --> 00:08:17.549
If you'd like to declare your
computer properties in line

00:08:17.549 --> 00:08:19.590
you can totally do that,
and that's really useful

00:08:19.590 --> 00:08:21.673
if you want to have a
computer property maybe only

00:08:21.673 --> 00:08:22.700
in one place.

00:08:22.700 --> 00:08:25.125
It'll keep your properties
object nice and tidy, so

00:08:25.125 --> 00:08:27.580
let me show you how to do that.

00:08:27.580 --> 00:08:30.860
So to declare a computed
property in the line,

00:08:30.860 --> 00:08:33.909
we can actually delete
this full name property

00:08:33.909 --> 00:08:35.630
that we've got here.

00:08:35.630 --> 00:08:37.440
And then up in our
binding we can just

00:08:37.440 --> 00:08:40.760
call compute full name, pass
in first and last properties,

00:08:40.760 --> 00:08:44.090
and then that's going to call
this guy and return a value.

00:08:44.090 --> 00:08:45.880
So going back to Chrome,
refresh the page,

00:08:45.880 --> 00:08:48.380
I see the exact same thing, but
I've tidied up my properties

00:08:48.380 --> 00:08:49.213
object a little bit.

00:08:49.213 --> 00:08:52.290
And this, again, is helpful if
you have a property that maybe

00:08:52.290 --> 00:08:53.729
you're only using in one place.

00:08:53.729 --> 00:08:55.270
Now one last thing
I want to show you

00:08:55.270 --> 00:08:58.390
is how to add a public
method to your component.

00:08:58.390 --> 00:08:59.890
So what I'm going
to do is I'm going

00:08:59.890 --> 00:09:03.900
to add like a shake method
so that the name tag actually

00:09:03.900 --> 00:09:05.640
wiggles around a little bit.

00:09:05.640 --> 00:09:08.650
So to do that I'm going to start
off with a little bit of CSS,

00:09:08.650 --> 00:09:12.480
and notice this host selector
that I've written here.

00:09:12.480 --> 00:09:14.990
So I'm targeting the
host and then I've

00:09:14.990 --> 00:09:17.500
got these parentheses, and
I'm passing in a class name.

00:09:17.500 --> 00:09:19.380
And what that does is
it allows the element

00:09:19.380 --> 00:09:21.620
to reference itself.

00:09:21.620 --> 00:09:24.450
It's basically saying
if I have a class called

00:09:24.450 --> 00:09:29.250
shake applied to me, then
use all of these styles.

00:09:29.250 --> 00:09:30.890
I'm just creating
an animation here.

00:09:30.890 --> 00:09:33.960
What I'm going to do is
drop in some key frames,

00:09:33.960 --> 00:09:36.228
and these key frames
just have the element

00:09:36.228 --> 00:09:38.186
go to the right a little,
to the left a little,

00:09:38.186 --> 00:09:39.352
and then back to the center.

00:09:39.352 --> 00:09:42.630
And I've got the vendor prefixed
versions of this key frames

00:09:42.630 --> 00:09:45.230
as well, so, you
know, moz key frame,

00:09:45.230 --> 00:09:47.120
webkit key frame, et cetera.

00:09:47.120 --> 00:09:50.860
So it looks like a lot more
code than it really is.

00:09:50.860 --> 00:09:52.810
Now I'm going to go
down to my prototype,

00:09:52.810 --> 00:09:55.540
and I can actually
implement a shake method.

00:09:55.540 --> 00:09:59.050
So all I'm doing is I'm saying
this this.classlist.toggle that

00:09:59.050 --> 00:09:59.747
shake class.

00:09:59.747 --> 00:10:01.330
So you're going to
add it, the element

00:10:01.330 --> 00:10:02.913
is going to shake
around, you're going

00:10:02.913 --> 00:10:05.310
to toggle it so it'll
removed, called again,

00:10:05.310 --> 00:10:07.530
the element shakes
around, et cetera.

00:10:07.530 --> 00:10:11.430
So we hop over to Chrome, and
I can pop up in the dev tools

00:10:11.430 --> 00:10:13.780
and use this little
inspector here

00:10:13.780 --> 00:10:17.110
to select my element
in the document.

00:10:17.110 --> 00:10:19.830
And you can see that I've
got highlighted there,

00:10:19.830 --> 00:10:22.960
and I can hit Escape
to open up my console,

00:10:22.960 --> 00:10:25.820
and I'll show you a neat trick
if you haven't seen it before.

00:10:25.820 --> 00:10:26.800
When you're in the
console and you've

00:10:26.800 --> 00:10:28.174
got an element
selected up there,

00:10:28.174 --> 00:10:31.480
you can hit $0 to actually
select that element.

00:10:31.480 --> 00:10:32.940
It's like calling
query selector.

00:10:32.940 --> 00:10:36.540
So now I can just say $0,
call that shake public method,

00:10:36.540 --> 00:10:38.200
and you'll see it shaking.

00:10:38.200 --> 00:10:39.800
I can call it again,
and you'll see

00:10:39.800 --> 00:10:42.360
that that class that we added
gets removed because we're

00:10:42.360 --> 00:10:43.770
calling classless toggle.

00:10:43.770 --> 00:10:45.770
Called again, it shakes.

00:10:45.770 --> 00:10:48.430
Call again, class gets removed.

00:10:48.430 --> 00:10:50.460
So on and so on.

00:10:50.460 --> 00:10:52.400
So a bit of a quick
and dirty example,

00:10:52.400 --> 00:10:54.920
but now you know how to
add public properties

00:10:54.920 --> 00:10:57.075
and public methods
to your element.

00:10:57.075 --> 00:10:57.950
So there you have it.

00:10:57.950 --> 00:11:01.190
You now know how to create the
public API for your element.

00:11:01.190 --> 00:11:03.070
Now don't run away
just yet, stick around

00:11:03.070 --> 00:11:04.300
because in Q&amp;A time,
we're going to be

00:11:04.300 --> 00:11:05.758
answering questions
in the audience

00:11:05.758 --> 00:11:07.074
and giving away some swag.

00:11:07.074 --> 00:11:08.990
Be sure to click that
little subscribe button.

00:11:08.990 --> 00:11:10.740
As always, thank you
so much for watching,

00:11:10.740 --> 00:11:12.831
and I'll see you next time.

00:11:12.831 --> 00:11:13.740
All right, folks.

00:11:13.740 --> 00:11:14.850
Q&amp;A time.

00:11:14.850 --> 00:11:17.880
Today's question comes from
Kash Cummings who asks,

00:11:17.880 --> 00:11:19.820
you've mentioned
using the [INAUDIBLE]

00:11:19.820 --> 00:11:22.630
before to style elements can
be dangerous because it can

00:11:22.630 --> 00:11:24.910
cause unintended side effects.

00:11:24.910 --> 00:11:26.739
Is there a more
general way to style

00:11:26.739 --> 00:11:28.280
elements that doesn't
require knowing

00:11:28.280 --> 00:11:29.371
all about their internals?

00:11:29.371 --> 00:11:31.120
It's a really great
question, Kash, thanks

00:11:31.120 --> 00:11:32.230
for sending that in.

00:11:32.230 --> 00:11:35.040
This is actually one of the
cooler features of the latest

00:11:35.040 --> 00:11:36.280
version of Polymer.

00:11:36.280 --> 00:11:38.120
We've got a brand
new styling system,

00:11:38.120 --> 00:11:40.010
it's still experimental
but has shipped.

00:11:40.010 --> 00:11:42.770
You can follow this link right
here to read more about it.

00:11:42.770 --> 00:11:46.010
It is based on CSS variables
and custom properties.

00:11:46.010 --> 00:11:48.390
And I personally
think it's so cool.

00:11:48.390 --> 00:11:50.060
The next episode of
Polycast is actually

00:11:50.060 --> 00:11:52.810
going to be all about it,
so stay tuned for that.

00:11:52.810 --> 00:11:55.030
Again, thank you Kash for
sending in your question.

00:11:55.030 --> 00:11:57.165
To all of you out there,
please send more questions

00:11:57.165 --> 00:11:58.040
down in the comments.

00:11:58.040 --> 00:12:00.040
We'll send you some swag
if you get featured.

00:12:00.040 --> 00:12:01.400
As always, thanks for watching.

00:12:01.400 --> 00:12:03.242
I'll see you next time.

