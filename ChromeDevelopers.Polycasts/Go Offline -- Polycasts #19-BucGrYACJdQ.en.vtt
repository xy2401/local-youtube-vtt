WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.687
[MUSIC PLAYING]

00:00:02.687 --> 00:00:03.770
ROB DODSON: Hey, everyone.

00:00:03.770 --> 00:00:04.030
What's up?

00:00:04.030 --> 00:00:04.790
It's Rob Dodson.

00:00:04.790 --> 00:00:06.500
Today on Polycast,
I'm going to show you

00:00:06.500 --> 00:00:08.000
how to take your
entire application

00:00:08.000 --> 00:00:10.910
and make it run offline,
all without writing

00:00:10.910 --> 00:00:12.460
a single line of JavaScript.

00:00:12.460 --> 00:00:15.040
This is crazy,
wicked awesome stuff,

00:00:15.040 --> 00:00:18.580
so follow me and let me
show you how it's done.

00:00:18.580 --> 00:00:20.870
So this is your web page today.

00:00:20.870 --> 00:00:22.840
When it needs an
asset, it goes off

00:00:22.840 --> 00:00:24.760
to the network to request it.

00:00:24.760 --> 00:00:27.760
A network fetches that
asset and then returns it

00:00:27.760 --> 00:00:30.080
so it can be displayed
on the screen.

00:00:30.080 --> 00:00:33.390
But as we know, this back and
forth is not always so perfect.

00:00:33.390 --> 00:00:35.790
Sometimes the request
could take a long time

00:00:35.790 --> 00:00:37.640
to get to the network.

00:00:37.640 --> 00:00:41.140
And maybe the network
takes a long time

00:00:41.140 --> 00:00:44.590
to send the response back, or
it takes a long, roundabout way

00:00:44.590 --> 00:00:45.260
to do so.

00:00:45.260 --> 00:00:47.810
Perhaps the user loses
connectivity along the way,

00:00:47.810 --> 00:00:49.830
dropping from 3G to EDGE.

00:00:49.830 --> 00:00:52.720
Or maybe they lose connectivity
entirely, in which case

00:00:52.720 --> 00:00:55.190
the network is just unavailable.

00:00:55.190 --> 00:00:58.190
So there's a lot of reasons why
this back-and-forth dance is

00:00:58.190 --> 00:01:01.752
not always as seamless as
we would like it to be.

00:01:01.752 --> 00:01:03.710
Now let's look at the
same model, but this time

00:01:03.710 --> 00:01:04.879
with Service Worker.

00:01:04.879 --> 00:01:06.460
So Service Worker
is a new standard

00:01:06.460 --> 00:01:09.170
that acts like a proxy, letting
you intercept network requests

00:01:09.170 --> 00:01:11.490
in JavaScript and then
allowing you to handle them

00:01:11.490 --> 00:01:13.030
how you see fit.

00:01:13.030 --> 00:01:15.990
So the user makes a request,
which flows through our Service

00:01:15.990 --> 00:01:17.450
Worker.

00:01:17.450 --> 00:01:20.430
And when the response comes
back from the network,

00:01:20.430 --> 00:01:23.210
the Service Worker can decide
what it wants to do with it.

00:01:23.210 --> 00:01:25.380
It could, for instance,
create a cache

00:01:25.380 --> 00:01:28.930
and actually store the
response in that cache,

00:01:28.930 --> 00:01:31.470
and then return it to the user.

00:01:31.470 --> 00:01:34.650
So the next time the user makes
a request for the same asset,

00:01:34.650 --> 00:01:36.590
the Service Worker
can check the cache,

00:01:36.590 --> 00:01:39.580
see that it's inside of
there and return that instead

00:01:39.580 --> 00:01:41.220
of having to hit the network.

00:01:41.220 --> 00:01:44.387
This basically enables a
really nice offline model.

00:01:44.387 --> 00:01:46.970
Now, there are a bunch of other
things that you could do here.

00:01:46.970 --> 00:01:48.530
You could have
the Service Worker

00:01:48.530 --> 00:01:50.680
hit the network and the
cache at the same time

00:01:50.680 --> 00:01:52.690
and make the two race.

00:01:52.690 --> 00:01:55.600
There's a ton of patterns that
are detailed by my friend Jake

00:01:55.600 --> 00:01:57.177
Archibald in this
offline cookbook,

00:01:57.177 --> 00:01:59.010
and I really encourage
you to check that out

00:01:59.010 --> 00:02:01.540
after you're done
with this video.

00:02:01.540 --> 00:02:03.920
But what if you're in a
browser that doesn't have

00:02:03.920 --> 00:02:06.230
support for Service Worker?

00:02:06.230 --> 00:02:08.460
Well, in that case,
you just go back

00:02:08.460 --> 00:02:10.090
to the way things were before.

00:02:10.090 --> 00:02:11.950
Your page tries to
hit the network,

00:02:11.950 --> 00:02:15.390
and the network sends
back a response if it can.

00:02:15.390 --> 00:02:18.340
Nothing breaks in this
model, and in that way,

00:02:18.340 --> 00:02:21.320
Service Worker is just a
progressive enhancement.

00:02:21.320 --> 00:02:24.370
And that's why Service
Worker is kind of brilliant.

00:02:24.370 --> 00:02:26.360
If you have a
subset of your users

00:02:26.360 --> 00:02:28.450
that can support Service
Worker, well then

00:02:28.450 --> 00:02:31.345
they get an enhanced
experience, something that's

00:02:31.345 --> 00:02:32.710
a little bit more engaging.

00:02:32.710 --> 00:02:34.580
And for your users
that can't support it,

00:02:34.580 --> 00:02:37.309
because perhaps their browser
doesn't implement it yet, well,

00:02:37.309 --> 00:02:39.850
they're going to get the same
experience that they get today.

00:02:39.850 --> 00:02:42.650
So it's not a matter of
choosing whether to use

00:02:42.650 --> 00:02:44.470
Service Worker or not.

00:02:44.470 --> 00:02:47.120
Instead, you can look at Service
Worker as an additional layer

00:02:47.120 --> 00:02:48.620
that you can add
to your application

00:02:48.620 --> 00:02:51.920
to give some of the users
a much better experience.

00:02:51.920 --> 00:02:54.100
I think this is pretty awesome.

00:02:54.100 --> 00:02:56.030
And if you're interested,
there are actually

00:02:56.030 --> 00:02:58.830
strategies around using things
like App Cache as a fallback

00:02:58.830 --> 00:03:00.437
if Server Worker
is not supported.

00:03:00.437 --> 00:03:02.520
In general, if you're
interested in learning more,

00:03:02.520 --> 00:03:03.700
there's this really
great write-up

00:03:03.700 --> 00:03:05.840
by Matt Gaunt, which goes
into a lot of detail.

00:03:05.840 --> 00:03:07.500
There's a lot of really
good material out there,

00:03:07.500 --> 00:03:09.041
so after you're done
with this video,

00:03:09.041 --> 00:03:12.360
definitely go do a bit of
additional research there.

00:03:12.360 --> 00:03:14.290
Now, to set up your
own Service Worker

00:03:14.290 --> 00:03:16.105
usually involves a
fair bit of code.

00:03:16.105 --> 00:03:18.480
You've got to configure your
registration and [INAUDIBLE]

00:03:18.480 --> 00:03:19.521
and caching and la-la-la.

00:03:19.521 --> 00:03:21.410
It's just, like, crazy.

00:03:21.410 --> 00:03:24.120
Now thankfully, there's
an element for that.

00:03:24.120 --> 00:03:26.440
Thanks to the new Platinum
Element collection

00:03:26.440 --> 00:03:28.080
from the Polymer
team, you actually

00:03:28.080 --> 00:03:30.220
get Service Worker
support for free.

00:03:30.220 --> 00:03:32.350
It's already set up in
Polymer Starter Kit,

00:03:32.350 --> 00:03:34.944
and so I'm going to
show you how to use it.

00:03:34.944 --> 00:03:36.610
This is what we're
going to build today.

00:03:36.610 --> 00:03:39.790
It is a very typical
Polymer Starter Kit app.

00:03:39.790 --> 00:03:42.100
You can see here, though,
that as I'm using it,

00:03:42.100 --> 00:03:43.990
I can set it to Offline.

00:03:43.990 --> 00:03:47.110
I can then go and click
around and use the app,

00:03:47.110 --> 00:03:48.770
and it will continue to work.

00:03:48.770 --> 00:03:51.190
I can even click this button
to load an image of a map

00:03:51.190 --> 00:03:53.960
from the network, and
that works as well.

00:03:53.960 --> 00:03:54.867
So how do we do this?

00:03:54.867 --> 00:03:56.450
Well, the first thing
you've got to do

00:03:56.450 --> 00:03:59.145
is go and download
Polymer Starter Kit.

00:03:59.145 --> 00:04:02.886
You can grab it off of the
site at developers.google.com.

00:04:02.886 --> 00:04:05.240
Then you're going to want
to go to the GitHub page

00:04:05.240 --> 00:04:08.740
for Starter Kit and check
out this guide on enabling

00:04:08.740 --> 00:04:10.200
Service Worker support.

00:04:10.200 --> 00:04:11.300
It's actually pretty easy.

00:04:11.300 --> 00:04:14.450
You just need to uncomment
a few lines of HTML

00:04:14.450 --> 00:04:18.160
and then add this
little precache gulp

00:04:18.160 --> 00:04:21.019
task to the bottom
of your build file.

00:04:21.019 --> 00:04:23.740
Now, some of you might wonder,
why is this disabled at all?

00:04:23.740 --> 00:04:27.820
Why not just have Service
Worker running by default?

00:04:27.820 --> 00:04:30.710
And in fact, in previous
versions of Starter Kit,

00:04:30.710 --> 00:04:33.580
it was enabled by
default. But what we found

00:04:33.580 --> 00:04:35.980
was that can be very
confusing for users

00:04:35.980 --> 00:04:39.030
who weren't expecting
Service Worker to take over

00:04:39.030 --> 00:04:40.500
their local host port.

00:04:40.500 --> 00:04:41.920
And suddenly they
were developing

00:04:41.920 --> 00:04:43.660
a completely separate
site, and they

00:04:43.660 --> 00:04:46.900
were seeing the offline
version of Polymer Starter Kit.

00:04:46.900 --> 00:04:49.030
So because there was some
confusion around that,

00:04:49.030 --> 00:04:50.930
we decided to make
Service Worker support

00:04:50.930 --> 00:04:52.376
an opt-in feature.

00:04:52.376 --> 00:04:53.750
So that way when
you're using it,

00:04:53.750 --> 00:04:56.710
you know exactly
what you're getting.

00:04:56.710 --> 00:04:59.376
OK, let's go through the steps
to add Service Worker support.

00:04:59.376 --> 00:05:00.750
The first thing
we're going to do

00:05:00.750 --> 00:05:03.530
is hop into our index.html file
and scroll all the way down

00:05:03.530 --> 00:05:05.020
to the bottom of the page.

00:05:05.020 --> 00:05:08.650
And you'll see this block
of commented text here.

00:05:08.650 --> 00:05:10.350
So uncomment that.

00:05:10.350 --> 00:05:12.172
Inside of here, we've
got a paper toast,

00:05:12.172 --> 00:05:13.630
which is a little
notification that

00:05:13.630 --> 00:05:15.629
will display in the corner
letting the user know

00:05:15.629 --> 00:05:16.942
that their app works offline.

00:05:16.942 --> 00:05:18.900
We've got this platinum
Service Worker register

00:05:18.900 --> 00:05:21.907
element and then a platinum
Service Worker cache element.

00:05:21.907 --> 00:05:23.490
So the Service Worker
register element

00:05:23.490 --> 00:05:25.990
is what is actually going to
create and register your Server

00:05:25.990 --> 00:05:27.650
Worker in the document.

00:05:27.650 --> 00:05:30.120
It has a few important
attributes I want to detail.

00:05:30.120 --> 00:05:32.480
The first is this
auto-register attribute.

00:05:32.480 --> 00:05:35.770
This tells the element to
go ahead and actually set up

00:05:35.770 --> 00:05:37.740
the Service Worker
and kick it off.

00:05:37.740 --> 00:05:39.240
If this was not
here, you would have

00:05:39.240 --> 00:05:40.698
to write a little
bit of JavaScript

00:05:40.698 --> 00:05:43.430
to get that process going.

00:05:43.430 --> 00:05:46.590
This skip-waiting attribute
tells the Service Worker

00:05:46.590 --> 00:05:50.700
to skip the waiting phase and
go right to its active phase.

00:05:50.700 --> 00:05:52.910
Normally during a
Service Worker update,

00:05:52.910 --> 00:05:58.240
it's going to wait to see if all
of the user's tabs are closed.

00:05:58.240 --> 00:06:00.160
You know, you might
have multiple tabs open

00:06:00.160 --> 00:06:01.356
on the same site.

00:06:01.356 --> 00:06:03.230
It would wait to see if
all those were closed

00:06:03.230 --> 00:06:05.265
before trying to activate.

00:06:05.265 --> 00:06:07.390
In this case, we're saying,
don't worry about that.

00:06:07.390 --> 00:06:09.890
It's OK if they have multiple
tabs on the same page open.

00:06:09.890 --> 00:06:12.060
Just go ahead and do your thing.

00:06:12.060 --> 00:06:15.030
This last one, clients-claim,
tells the Service Worker

00:06:15.030 --> 00:06:17.850
that once it is activated, it
should go ahead and immediately

00:06:17.850 --> 00:06:19.620
take control of
the page and start

00:06:19.620 --> 00:06:22.470
intercepting fetch requests.

00:06:22.470 --> 00:06:26.210
So combining these two is
a pretty powerful pattern.

00:06:26.210 --> 00:06:28.990
Now, the cache element
that you see down here,

00:06:28.990 --> 00:06:31.890
it's going to handle
adding files to the cache

00:06:31.890 --> 00:06:33.460
and returning those to us.

00:06:33.460 --> 00:06:36.360
And it's got this default cache
strategy, which right now is

00:06:36.360 --> 00:06:38.310
set up to be network
first, meaning

00:06:38.310 --> 00:06:41.640
it's going to go off to the
network, and if something 404s,

00:06:41.640 --> 00:06:43.530
then it's going
to hit the cache.

00:06:43.530 --> 00:06:45.010
You could set this
to cache first,

00:06:45.010 --> 00:06:47.385
or you could even set
it to, like, cache only.

00:06:47.385 --> 00:06:49.010
There's a few different
strategies here

00:06:49.010 --> 00:06:50.390
that you can work with.

00:06:50.390 --> 00:06:52.690
Lastly, you've got this
precache file attribute.

00:06:52.690 --> 00:06:57.820
And the precache JSON here is
a manifest file of file paths--

00:06:57.820 --> 00:06:59.870
it's basically an
array of file paths--

00:06:59.870 --> 00:07:02.300
that we want the Service
Worker to precache

00:07:02.300 --> 00:07:04.390
for us once it boots up.

00:07:04.390 --> 00:07:06.906
So these are things that maybe
the user hasn't even seen yet

00:07:06.906 --> 00:07:08.530
but we just know
they're going to need,

00:07:08.530 --> 00:07:10.280
so we're going to tell
the Service Worker,

00:07:10.280 --> 00:07:12.072
grab all those assets
as soon as you start.

00:07:12.072 --> 00:07:14.405
I'm actually going to come
back to this in a little bit,

00:07:14.405 --> 00:07:16.220
but let's move ahead
now to look at what

00:07:16.220 --> 00:07:18.440
we need to do to get the
rest of this working.

00:07:18.440 --> 00:07:20.812
So over near elements
HTML file, we're

00:07:20.812 --> 00:07:22.270
going to go down
here a little bit,

00:07:22.270 --> 00:07:25.360
and we're going to
uncomment these two imports.

00:07:25.360 --> 00:07:27.150
These are for our
Platinum Elements,

00:07:27.150 --> 00:07:28.950
and now they can
load into our app.

00:07:28.950 --> 00:07:30.580
We can run gulp-serve.

00:07:30.580 --> 00:07:32.350
We can boot up our local server.

00:07:32.350 --> 00:07:35.590
It's actually going to open the
browser for us when it's ready.

00:07:35.590 --> 00:07:38.070
And then we can
see our app here.

00:07:38.070 --> 00:07:39.710
We'll notice in the
bottom left that we

00:07:39.710 --> 00:07:42.260
get this notification
that caching is complete

00:07:42.260 --> 00:07:44.210
and we are working offline.

00:07:44.210 --> 00:07:48.950
And, in fact, we can verify
that by opening up our dev tools

00:07:48.950 --> 00:07:51.324
and turning on Mobile
Emulation mode.

00:07:51.324 --> 00:07:52.990
And you can see I'm
going to go in here.

00:07:52.990 --> 00:07:55.570
I'm going to use the network
throttler to throttle

00:07:55.570 --> 00:07:58.720
the page so that it's offline.

00:07:58.720 --> 00:08:00.840
And then we can refresh.

00:08:00.840 --> 00:08:02.750
Our content will
continue to load.

00:08:02.750 --> 00:08:04.027
We can open our sidebar.

00:08:04.027 --> 00:08:04.860
We can click around.

00:08:04.860 --> 00:08:07.100
You can see that the
different routes are loading.

00:08:07.100 --> 00:08:09.475
So this is looking pretty
good, but we go to Contact page

00:08:09.475 --> 00:08:11.350
and we click this
little button down here,

00:08:11.350 --> 00:08:13.940
and our image is
giving us a 404.

00:08:13.940 --> 00:08:15.210
So what's happening?

00:08:15.210 --> 00:08:17.540
So at this point, Service
Worker is dynamically

00:08:17.540 --> 00:08:20.610
caching assets as the user is
navigating through the site.

00:08:20.610 --> 00:08:22.600
But what I want to do
is ensure that that map

00:08:22.600 --> 00:08:24.849
is available to the user
even if they haven't actually

00:08:24.849 --> 00:08:25.964
visited that page yet.

00:08:25.964 --> 00:08:28.130
So to do that, I'm going
to have to tell the Service

00:08:28.130 --> 00:08:29.970
Worker to precache an asset.

00:08:29.970 --> 00:08:32.049
Let me show you how to do that.

00:08:32.049 --> 00:08:37.289
OK, so the asset that we want to
precache is this map JPEG file.

00:08:37.289 --> 00:08:39.929
And if you recall, I said that
there's this precache JSON

00:08:39.929 --> 00:08:41.860
thing, which is like
a manifest of files

00:08:41.860 --> 00:08:44.290
that we want the Service
Worker to cache for us

00:08:44.290 --> 00:08:46.440
even if the user
hasn't seen them yet.

00:08:46.440 --> 00:08:48.690
So if we wanted to add
some files to that,

00:08:48.690 --> 00:08:51.190
a really simple way to do so
is to add another attribute

00:08:51.190 --> 00:08:52.280
to this element.

00:08:52.280 --> 00:08:55.190
And this attribute is
just called precache.

00:08:55.190 --> 00:08:58.360
And we can pass this
attribute an array-- that

00:08:58.360 --> 00:08:59.770
is, a JSON array.

00:08:59.770 --> 00:09:02.015
So notice how I'm using
single quotes on the outside

00:09:02.015 --> 00:09:04.140
here so that I can use
double quotes on the inside.

00:09:04.140 --> 00:09:07.080
That's because JSON only
takes double quotes.

00:09:07.080 --> 00:09:08.840
We can give it a JSON
array of file paths

00:09:08.840 --> 00:09:13.760
that should merge into
that precache JSON.

00:09:13.760 --> 00:09:16.480
So with just this
one file path here,

00:09:16.480 --> 00:09:19.434
my app is actually all set up
and everything's going to work.

00:09:19.434 --> 00:09:20.850
But as I was doing
this, it really

00:09:20.850 --> 00:09:23.350
got me thinking, like, what's
the deal with this file?

00:09:23.350 --> 00:09:24.760
Like where does it come from?

00:09:24.760 --> 00:09:25.900
How is it built?

00:09:25.900 --> 00:09:27.650
What's inside of it?

00:09:27.650 --> 00:09:32.200
So for that, we're going to
go inside of our gulp file.

00:09:32.200 --> 00:09:34.550
And we've got this
precache task that we

00:09:34.550 --> 00:09:35.920
can look at inside of here.

00:09:35.920 --> 00:09:37.420
And what it's doing
is it's building

00:09:37.420 --> 00:09:39.859
a little glob of file paths.

00:09:39.859 --> 00:09:41.900
And a glob, if you've
never heard of that before,

00:09:41.900 --> 00:09:44.270
is basically an
array of file paths

00:09:44.270 --> 00:09:46.640
that are generated
using this string.

00:09:46.640 --> 00:09:49.870
And this string is sort of
like a regular expression.

00:09:49.870 --> 00:09:53.580
It says, match anything in the
elements directory, anything

00:09:53.580 --> 00:09:55.850
in the scripts directory,
anything in the styles

00:09:55.850 --> 00:10:00.670
directory, any subfolders,
any files in there.

00:10:00.670 --> 00:10:03.860
So it's pretty
wide open, anything

00:10:03.860 --> 00:10:06.110
in any of those directories,
match it and add it

00:10:06.110 --> 00:10:08.110
to this manifest file.

00:10:08.110 --> 00:10:09.600
We've also got this
line right here

00:10:09.600 --> 00:10:12.720
where we're pushing individual
files into that array,

00:10:12.720 --> 00:10:16.000
like our webcomponents
polyfills and our index file.

00:10:16.000 --> 00:10:18.300
So if you needed to do
something like cache

00:10:18.300 --> 00:10:21.780
an entire folder full of
assets, rather than put that

00:10:21.780 --> 00:10:24.034
into the precache
attribute in our HTML,

00:10:24.034 --> 00:10:25.450
we could actually
drop it in here.

00:10:25.450 --> 00:10:28.030
We can say, cache everything
in the images directory.

00:10:28.030 --> 00:10:29.490
That's one option.

00:10:29.490 --> 00:10:31.920
And if you wanted to pass
just individual files,

00:10:31.920 --> 00:10:35.320
another option would be to add
it to this little push call.

00:10:35.320 --> 00:10:37.220
You could do this,
although it's probably

00:10:37.220 --> 00:10:39.320
easiest to just do
this in the markup

00:10:39.320 --> 00:10:42.600
because it's just a
single attribute there.

00:10:42.600 --> 00:10:44.840
But I wanted you to know
about how this thing worked

00:10:44.840 --> 00:10:47.160
and the options that
are available to you.

00:10:47.160 --> 00:10:49.040
And the last step
in this process

00:10:49.040 --> 00:10:51.140
is to make sure
that we have enabled

00:10:51.140 --> 00:10:55.580
the precache task to run inside
of the gulp default task.

00:10:55.580 --> 00:10:56.970
So we'll add precache here.

00:10:56.970 --> 00:10:58.844
And what this does is
it ensures when someone

00:10:58.844 --> 00:11:02.380
is doing a distribution build
that it generates that precache

00:11:02.380 --> 00:11:04.140
JSON file for them.

00:11:04.140 --> 00:11:05.384
At this point, we're done.

00:11:05.384 --> 00:11:06.550
Everything is going to work.

00:11:06.550 --> 00:11:08.970
We can hop back
over to our browser.

00:11:08.970 --> 00:11:11.020
We can refresh the page.

00:11:11.020 --> 00:11:14.150
You'll notice that I've set
throttling to Offline again.

00:11:14.150 --> 00:11:16.340
And I can go and click around.

00:11:16.340 --> 00:11:18.160
And as I get to that
Contact section,

00:11:18.160 --> 00:11:20.030
I can click on the
Show Me the Map button.

00:11:20.030 --> 00:11:23.150
It's going to hit the network
or, in this case, the cache,

00:11:23.150 --> 00:11:24.720
and load in our map image.

00:11:24.720 --> 00:11:27.450
So like I said, this
is freaking cool.

00:11:27.450 --> 00:11:30.155
You've got your entire
application working offline

00:11:30.155 --> 00:11:31.530
and you didn't
even have to write

00:11:31.530 --> 00:11:32.920
a single line of JavaScript.

00:11:32.920 --> 00:11:34.700
It just magically
happened, thanks

00:11:34.700 --> 00:11:37.475
to the power of web
components and Service Worker.

00:11:37.475 --> 00:11:38.600
That's it for today, folks.

00:11:38.600 --> 00:11:40.380
If you have questions,
please leave them down

00:11:40.380 --> 00:11:41.046
in the comments.

00:11:41.046 --> 00:11:42.644
I do try to read
all those if I can.

00:11:42.644 --> 00:11:45.060
Also, be sure to click that
little Subscribe button so you

00:11:45.060 --> 00:11:46.226
don't use miss any episodes.

00:11:46.226 --> 00:11:47.970
Again, thank you so
much for watching.

00:11:47.970 --> 00:11:50.125
I'll see you next time.

00:11:50.125 --> 00:11:51.190
Hey there, Polycasters.

00:11:51.190 --> 00:11:51.950
Rob here.

00:11:51.950 --> 00:11:53.440
Q&amp;A time.

00:11:53.440 --> 00:11:57.100
This week's question comes
from Dr. Robrez-- so hi there,

00:11:57.100 --> 00:12:00.275
Doctor-- who asks,
in Polymer 1.0,

00:12:00.275 --> 00:12:03.262
can we do data bindings
inside of our styles

00:12:03.262 --> 00:12:05.470
like we used to be able to
do with the old core style

00:12:05.470 --> 00:12:06.260
element?

00:12:06.260 --> 00:12:09.740
Or is the recommended approach
to do data bindings inside

00:12:09.740 --> 00:12:10.920
of your class names?

00:12:10.920 --> 00:12:13.740
So, for instance, you might
have like class foo bar

00:12:13.740 --> 00:12:16.367
and then a data binding for
another class called baths.

00:12:16.367 --> 00:12:17.700
So a really good question there.

00:12:17.700 --> 00:12:21.060
In Polymer 1.0, you cannot
currently do data bindings

00:12:21.060 --> 00:12:22.089
inside of styles.

00:12:22.089 --> 00:12:23.630
That is something
that we're thinking

00:12:23.630 --> 00:12:25.754
about putting on the roadmap,
but right now there's

00:12:25.754 --> 00:12:27.390
no real ETA for that.

00:12:27.390 --> 00:12:31.620
Also, you cannot do binding
expressions inside of strings.

00:12:31.620 --> 00:12:35.250
So the recommended approach is
to take your entire class list

00:12:35.250 --> 00:12:38.130
and generate what is called a--
or I guess what we're calling--

00:12:38.130 --> 00:12:40.882
a computed binding out of that.

00:12:40.882 --> 00:12:42.590
So you can check out
this link right here

00:12:42.590 --> 00:12:45.714
to read about doing computed
bindings down in the docs.

00:12:45.714 --> 00:12:46.630
These are pretty cool.

00:12:46.630 --> 00:12:48.171
You can pass arguments
to them and it

00:12:48.171 --> 00:12:50.700
can return a string, which
will fill out your entire class

00:12:50.700 --> 00:12:51.666
list for you.

00:12:51.666 --> 00:12:52.790
So really awesome question.

00:12:52.790 --> 00:12:54.200
Thank you so much
for sending that in.

00:12:54.200 --> 00:12:55.960
If you have questions,
please leave them down

00:12:55.960 --> 00:12:56.626
in the comments.

00:12:56.626 --> 00:12:59.500
We try and read and answer
all those if we can.

00:12:59.500 --> 00:13:02.247
And maybe we can feature you on
the next episode of Polycast.

00:13:02.247 --> 00:13:03.830
Again, thank you so
much for watching.

00:13:03.830 --> 00:13:06.205
Be sure to click that little
Subscribe button down there,

00:13:06.205 --> 00:13:08.400
and I'll see you next time.

