WEBVTT
Kind: captions
Language: zh-Hans

00:00:00.000 --> 00:00:02.755
 <i>高分子</i> 

00:00:02.975 --> 00:00:05.050
你好，怎么了？我是Rob Dodson。 

00:00:05.050 --> 00:00:08.070
今天在Polycast，我将向您展示如何获取整个应用程序

00:00:08.070 --> 00:00:10.040
使其脱机工作， 

00:00:10.040 --> 00:00:12.460
因此，无需编写任何JavaScript代码。 

00:00:12.460 --> 00:00:15.040
这些都是疯狂的事情，如此奇妙， 

00:00:15.040 --> 00:00:17.210
因此，请跟随我，我将解释其工作原理。 

00:00:18.580 --> 00:00:20.870
因此，这是您今天的网页。 

00:00:20.870 --> 00:00:22.840
当您需要资产时， 

00:00:22.840 --> 00:00:24.760
他们会去互联网订购。 

00:00:24.760 --> 00:00:27.760
网络获取并返回这些资产

00:00:27.760 --> 00:00:29.230
使它们可以显示在屏幕上。 

00:00:30.080 --> 00:00:32.980
但是，众所周知，这种往返并不总是那么完美。 

00:00:33.390 --> 00:00:36.750
有时，请求可能需要很长时间才能到达网络。 

00:00:37.640 --> 00:00:42.270
网络可能需要很长时间才能重新发送响应， 

00:00:42.270 --> 00:00:45.260
或者采取漫长而间接的方式来做到这一点。 

00:00:45.260 --> 00:00:47.810
同时，用户可能会失去连接

00:00:47.810 --> 00:00:49.830
从3G网络跌落到EDGE。 

00:00:49.830 --> 00:00:52.180
也许他们失去了整个联系

00:00:52.180 --> 00:00:54.780
在这种情况下，网络根本不可用。 

00:00:55.190 --> 00:00:58.190
因此有很多原因导致无法实现

00:00:58.190 --> 00:01:00.912
尽可能顺利地发生。 

00:01:01.752 --> 00:01:03.340
现在让我们看一下相同的模型

00:01:03.340 --> 00:01:04.879
但是这次与服务运营商合作。 

00:01:04.879 --> 00:01:07.330
因此，运营商是充当代理的新标准， 

00:01:07.330 --> 00:01:09.890
允许您拦截JavaScript中的网络请求

00:01:09.890 --> 00:01:12.440
允许您按自己认为合适的方式进行处理。 

00:01:12.760 --> 00:01:16.660
因此，用户发出了一个请求，后者流经我们的服务器。 

00:01:17.450 --> 00:01:19.760
当网络重复时， 

00:01:20.430 --> 00:01:22.600
操作员决定要做什么。 

00:01:22.940 --> 00:01:25.380
例如，它可以创建一个缓存

00:01:25.380 --> 00:01:28.620
并将响应存储在该缓存中， 

00:01:28.630 --> 00:01:31.030
然后将它们返回给用户。 

00:01:31.470 --> 00:01:34.410
因此，下次用户请求相同资产时， 

00:01:34.410 --> 00:01:36.680
服务引擎检查缓存， 

00:01:36.680 --> 00:01:39.450
看看那里有什么，然后返回找到的东西

00:01:39.450 --> 00:01:40.920
而不是去网络。 

00:01:41.220 --> 00:01:44.217
实际上，这使您可以获得一个非常好的离线模型。 

00:01:44.217 --> 00:01:47.130
您还可以在这里做很多其他事情。 

00:01:47.130 --> 00:01:48.530
您可以让服务运营商

00:01:48.530 --> 00:01:51.060
前往网络并同时缓存

00:01:51.060 --> 00:01:52.560
并使两个种族。 

00:01:52.690 --> 00:01:55.870
我的朋友杰克·阿奇博尔德（Jake Archibald）详细介绍了很多模式

00:01:55.870 --> 00:01:57.377
在此离线食谱中， 

00:01:57.377 --> 00:02:00.490
我建议您在观看完此视频后将其签出。 

00:02:01.540 --> 00:02:05.280
但是，如果您使用的浏览器不支持该操作员，该怎么办？ 

00:02:06.230 --> 00:02:09.860
好吧，在这种情况下，它可以回到过去。 

00:02:10.090 --> 00:02:11.950
您的专页尝试上网， 

00:02:11.950 --> 00:02:14.360
如果可以，网络将重复响应。 

00:02:15.390 --> 00:02:17.600
这个模型没有任何问题

00:02:17.600 --> 00:02:20.690
这样，服务运营商只是逐步的改进。 

00:02:21.320 --> 00:02:23.630
这就是为什么操作员很棒。 

00:02:24.370 --> 00:02:26.360
如果您有一部分用户

00:02:26.360 --> 00:02:28.060
可以为运营商提供支持， 

00:02:28.450 --> 00:02:30.825
他们获得了增强的经验， 

00:02:30.825 --> 00:02:32.310
这一点更具吸引力。 

00:02:32.710 --> 00:02:34.580
对于无法支持的用户， 

00:02:34.580 --> 00:02:37.309
可能是因为浏览器尚未提供， 

00:02:37.309 --> 00:02:39.850
他们将拥有与目前相同的经验。 

00:02:39.850 --> 00:02:43.750
因此，是否使用运算符不是问题。 

00:02:44.320 --> 00:02:47.120
或者，您可以将操作员视为附加层

00:02:47.120 --> 00:02:48.620
您可以将其添加到您的应用中， 

00:02:48.620 --> 00:02:51.400
为某些用户提供更好的体验。 

00:02:51.920 --> 00:02:53.600
我认为这很酷。 

00:02:54.100 --> 00:02:57.210
如果您有兴趣，实际上有一些使用事物的策略

00:02:57.210 --> 00:03:00.750
例如，如果不支持服务引擎，则将应用程序缓存作为备份。 

00:03:00.750 --> 00:03:02.870
一般而言，如果您有兴趣了解更多信息， 

00:03:02.870 --> 00:03:06.230
马特·盖特（Matt Gaunt）的这篇非常出色的文章提到了很多细节。 

00:03:06.230 --> 00:03:09.760
观看完此视频之后，有很多很棒的东西， 

00:03:09.760 --> 00:03:11.520
在那做一些额外的研究。 

00:03:12.360 --> 00:03:14.290
现在，构建您的服务引擎

00:03:14.290 --> 00:03:16.105
通常涉及一部分代码。 

00:03:16.105 --> 00:03:19.530
您必须配置，注册，缓存等... 

00:03:19.530 --> 00:03:21.410
太疯狂了。 

00:03:21.410 --> 00:03:23.390
现在，Alhamdulillah为此有了一个解决方案。 

00:03:24.120 --> 00:03:27.370
得益于Polymer的全新铂金元素系列， 

00:03:27.540 --> 00:03:30.220
您实际上将能够获得免费的操作员支持。 

00:03:30.220 --> 00:03:32.350
它已经配备在主要的聚合物设备中， 

00:03:32.350 --> 00:03:34.224
我会告诉你如何使用它。 

00:03:34.944 --> 00:03:36.610
这就是我们今天要构建的。 

00:03:36.610 --> 00:03:39.310
这是非常典型的Polymer Starter Kit应用程序。 

00:03:39.790 --> 00:03:42.100
您可以在这里看到，尽管我使用它， 

00:03:42.100 --> 00:03:43.990
我可以将其设置为“脱机”。 

00:03:43.990 --> 00:03:47.110
然后，我可以单击以进行实验并使用该应用， 

00:03:47.110 --> 00:03:48.770
它将继续工作。 

00:03:48.770 --> 00:03:51.800
我什至可以点击此按钮从网络上上传地图图片， 

00:03:51.800 --> 00:03:53.320
那也行。 

00:03:53.770 --> 00:03:54.867
那么我们该怎么做呢？ 

00:03:55.267 --> 00:03:56.790
好吧，您需要做的第一件事

00:03:56.790 --> 00:03:59.145
要去下载Polymer Starter Kit。 

00:03:59.145 --> 00:04:02.466
您可以从developers.google.com获取它。 

00:04:02.886 --> 00:04:06.020
然后，您将要转到Starter Kit GitHub页面

00:04:06.020 --> 00:04:09.730
查看此指南以启用操作员支持。 

00:04:10.200 --> 00:04:11.300
实际上，这很容易。 

00:04:11.300 --> 00:04:14.450
您只需要从几行HTML中删除注释即可

00:04:14.450 --> 00:04:18.840
然后为预缓存添加这个小任务

00:04:18.840 --> 00:04:20.669
在版本文件的底部。 

00:04:21.019 --> 00:04:23.740
现在，你们中的有些人可能会想，为什么基本上禁用它？ 

00:04:23.740 --> 00:04:26.910
为什么默认情况下我的服务引擎没有打开？ 

00:04:27.820 --> 00:04:32.160
实际上，在早期版本的入门工具包中，默认情况下已启用它

00:04:32.160 --> 00:04:35.980
但是我们发现这可能会使用户感到困惑

00:04:35.980 --> 00:04:39.030
谁没想到运营商会接管

00:04:39.030 --> 00:04:40.500
在其 localhost 端口上。 

00:04:40.500 --> 00:04:42.950
突然之间，他们正在开发一个完全独立的网站， 

00:04:43.430 --> 00:04:46.370
他们看到的是聚合物入门工具包的离线版本。 

00:04:46.900 --> 00:04:49.030
因此，由于对此有些困惑， 

00:04:49.030 --> 00:04:50.930
我们决定为运营商提供支持

00:04:50.930 --> 00:04:52.376
订阅的功能。 

00:04:52.376 --> 00:04:55.520
这样，当您使用它时，您便会确切地知道会得到什么。 

00:04:56.710 --> 00:04:59.376
好吧，让我们按照添加操作员支持的步骤进行操作。 

00:04:59.376 --> 00:05:02.280
首先，我们将进入我们的index.html文件

00:05:02.280 --> 00:05:04.370
我们将向下滚动到页面底部。 

00:05:05.020 --> 00:05:08.650
您将在此处看到此文本块的评论。 

00:05:08.650 --> 00:05:10.350
删除有关它的评论。 

00:05:10.350 --> 00:05:12.172
里面有烤面包片

00:05:12.172 --> 00:05:14.640
通知将出现在角落

00:05:14.640 --> 00:05:16.969
授权用户知道他的应用程序可以离线工作。 

00:05:16.969 --> 00:05:19.230
我们有白金服务历史记录器

00:05:19.230 --> 00:05:21.907
与铂金缓存引擎复合。 

00:05:21.907 --> 00:05:23.490
因此，操作员日志组合

00:05:23.490 --> 00:05:26.300
它实际上将创建并注册您的服务器引擎

00:05:26.300 --> 00:05:27.360
在文件中。 

00:05:27.650 --> 00:05:30.120
它具有许多我想详细说明的重要功能。 

00:05:30.120 --> 00:05:32.480
第一个是这种自我注册功能。 

00:05:32.480 --> 00:05:36.470
它导致安装程序安装服务运营商

00:05:36.470 --> 00:05:37.740
并开始。 

00:05:37.740 --> 00:05:38.930
如果不是这个

00:05:38.930 --> 00:05:40.888
您将不得不编写一些JavaScript 

00:05:40.888 --> 00:05:42.830
开始这个过程。 

00:05:43.430 --> 00:05:46.590
此等待跳过属性告诉服务运营商

00:05:46.590 --> 00:05:50.190
跳过等待阶段，直接进入活动阶段。 

00:05:50.700 --> 00:05:52.910
通常在服务引擎更新期间， 

00:05:52.910 --> 00:05:57.540
它将等待查看是否所有用户选项卡都已关闭。 

00:05:57.550 --> 00:06:00.160
了解您可能会打开许多​​标签

00:06:00.160 --> 00:06:01.356
在同一站点上。 

00:06:01.356 --> 00:06:03.430
他将等着看是否全部关闭

00:06:03.430 --> 00:06:05.265
尝试激活之前。 

00:06:05.265 --> 00:06:07.390
我们说，在这种情况下，不必担心。 

00:06:07.390 --> 00:06:10.040
可以在同一页面上打开多个选项卡。 

00:06:10.040 --> 00:06:11.580
继续做您想做的事。 

00:06:12.060 --> 00:06:15.030
这最后一个属性，提示客户，对服务运营商说

00:06:15.030 --> 00:06:17.340
一旦激活，它必须前进

00:06:17.340 --> 00:06:21.860
并立即控制页面并开始拦截获取请求。 

00:06:22.470 --> 00:06:24.960
两者的结合是非常强大的模式。 

00:06:26.080 --> 00:06:28.990
现在，您在此处看到的缓存组合

00:06:28.990 --> 00:06:32.060
它将处理将文件添加到缓存中

00:06:32.060 --> 00:06:33.460
并将它们还给我们。 

00:06:33.460 --> 00:06:35.730
它具有此默认缓存策略

00:06:35.730 --> 00:06:37.790
现在已设置为第一个网络， 

00:06:37.790 --> 00:06:41.640
这意味着如果我遇到404错误，我希望她可以转至网络

00:06:41.640 --> 00:06:43.410
将进入缓存。 

00:06:43.410 --> 00:06:45.570
您可以将其设置为先缓存， 

00:06:45.570 --> 00:06:47.165
甚至仅用于缓存。 

00:06:47.165 --> 00:06:50.220
您可以使用许多不同的策略。 

00:06:50.280 --> 00:06:52.690
最后，您已预安装此文件缓存属性。 

00:06:52.690 --> 00:06:57.410
在JSON预缓存中，存在用于文件路径的清单文件

00:06:57.820 --> 00:06:59.870
基本上是一系列文件路径

00:06:59.870 --> 00:07:02.590
我们希望操作员为我们预存

00:07:02.590 --> 00:07:04.010
一旦打开。 

00:07:04.390 --> 00:07:06.906
这些是用户可能尚未看到的东西

00:07:06.906 --> 00:07:08.550
但是我们知道他会需要的

00:07:08.550 --> 00:07:11.532
因此，我们将让服务运营商将所有这些资产一开始就带来。 

00:07:12.072 --> 00:07:14.405
我很快会回来讨论这个问题

00:07:14.405 --> 00:07:15.770
但是，让我们继续前进

00:07:15.770 --> 00:07:18.440
我们看一下我们需要做些什么才能使其余的工作正常进行。 

00:07:18.440 --> 00:07:20.272
因此，在我们的复合HTML文件中， 

00:07:20.812 --> 00:07:22.270
我们会在这里下一点

00:07:22.270 --> 00:07:25.360
我们将删除这两个提交的评论。 

00:07:25.360 --> 00:07:27.150
这属于我们的铂化合物

00:07:27.150 --> 00:07:28.950
现在可以将其加载到我们的应用程序中。 

00:07:28.950 --> 00:07:30.580
我们可以运行gulp-serv。 

00:07:30.580 --> 00:07:32.350
我们可以启动本地服务器。 

00:07:32.350 --> 00:07:35.030
准备就绪后，它将打开我们的浏览器。 

00:07:35.590 --> 00:07:38.070
然后我们可以在这里看到我们的应用程序。 

00:07:38.070 --> 00:07:39.710
我们会注意到在左下方

00:07:39.710 --> 00:07:42.260
我们收到缓冲已完成的通知

00:07:42.260 --> 00:07:43.860
而且我们离线工作。 

00:07:44.210 --> 00:07:48.340
实际上，我们可以通过打开开发工具来验证这一点

00:07:48.950 --> 00:07:51.324
并启动手机的仿真版。 

00:07:51.324 --> 00:07:52.990
您会看到我要去这里。 

00:07:52.990 --> 00:07:57.290
我将使用网络适配器来减慢页面速度，以使连接中断。 

00:07:58.720 --> 00:07:59.880
现在我们可以更新它们。 

00:08:00.840 --> 00:08:02.750
我们的内容将继续上传。 

00:08:02.750 --> 00:08:05.207
我们可以打开侧边栏。我们可以在任何需要的地方单击。 

00:08:05.207 --> 00:08:07.030
您可以看到加载了不同的方式。 

00:08:07.030 --> 00:08:09.475
听起来不错，但我们转到联系页面

00:08:09.475 --> 00:08:11.110
然后点击此按钮

00:08:11.230 --> 00:08:13.490
我们的图片返回404错误。 

00:08:13.740 --> 00:08:14.900
那到底是怎么回事？ 

00:08:15.210 --> 00:08:18.590
此时，服务引擎会动态缓存资产

00:08:18.590 --> 00:08:20.610
当用户在站点上导航时。 

00:08:20.610 --> 00:08:23.080
但我要确保该地图可用

00:08:23.080 --> 00:08:25.759
即使他们尚未真正访问该页面的用户。 

00:08:25.964 --> 00:08:28.130
为此，我必须命令服务引擎

00:08:28.130 --> 00:08:29.970
预缓存资产。 

00:08:29.970 --> 00:08:31.619
让我告诉你如何。 

00:08:32.049 --> 00:08:36.699
好吧，我们要为此地图预缓存JPEG文件。 

00:08:36.929 --> 00:08:39.929
而且，如果您还记得，我说过这个JSON可用于预缓存

00:08:39.929 --> 00:08:41.860
这是文件声明

00:08:41.860 --> 00:08:44.290
我们希望操作员为我们存储。 

00:08:44.290 --> 00:08:45.900
即使用户尚未看到它。 

00:08:46.440 --> 00:08:48.690
因此，如果我们要添加一些文件， 

00:08:48.690 --> 00:08:51.190
一种简单的方法是添加另一个属性

00:08:51.190 --> 00:08:52.280
对于这种化合物。 

00:08:52.280 --> 00:08:54.470
此属性仅称为预缓存。 

00:08:55.190 --> 00:08:58.360
我们可以传递给该域属性

00:08:58.360 --> 00:08:59.770
任何JSON域。 

00:08:59.770 --> 00:09:02.585
请注意，我在国外使用单引号

00:09:02.585 --> 00:09:05.300
因此，我可以在其中使用双引号。 

00:09:05.300 --> 00:09:07.460
因为JSON仅接受双引号。 

00:09:07.460 --> 00:09:09.960
我们可以给出文件路径的JSON范围

00:09:09.960 --> 00:09:13.280
哪些应与JSON集成以进行预缓存。 

00:09:13.760 --> 00:09:16.480
因此，这里只有一个路径文件， 

00:09:16.480 --> 00:09:19.434
实际上，我的应用程序已经配备好，并且一切都将正常运行。 

00:09:19.434 --> 00:09:21.190
但是在这样做的时候

00:09:21.190 --> 00:09:23.350
真的让我想，该文件的订购顺序是什么？ 

00:09:23.350 --> 00:09:24.760
他来自哪里？ 

00:09:24.760 --> 00:09:25.900
它是如何建造的？ 

00:09:25.900 --> 00:09:27.300
里面有什么？ 

00:09:27.650 --> 00:09:31.000
因此，我们将输入gulp文件。 

00:09:32.200 --> 00:09:34.190
我们有这个预缓存任务

00:09:34.190 --> 00:09:35.920
我们可以在这里看到里面。 

00:09:35.920 --> 00:09:39.870
它的作用是建立文件路径的整体。 

00:09:39.870 --> 00:09:41.900
这个问题，如果您以前从未听说过， 

00:09:41.900 --> 00:09:44.270
基本上是一系列文件路径

00:09:44.270 --> 00:09:46.640
使用此字符串创建的。 

00:09:46.640 --> 00:09:49.310
该系列是一种正则表达式。 

00:09:49.870 --> 00:09:53.580
您说，匹配化合物目录中的所有内容， 

00:09:53.580 --> 00:09:56.350
脚本目录中的所有内容，方法目录中的所有内容， 

00:09:56.350 --> 00:10:00.200
没有子文件夹，那里没有文件。 

00:10:00.670 --> 00:10:03.860
因此，它非常广泛

00:10:03.860 --> 00:10:06.110
这些目录中的任何一个，将其匹配并添加

00:10:06.110 --> 00:10:07.590
对于此清单文件。 

00:10:08.110 --> 00:10:09.600
我也有这条线

00:10:09.600 --> 00:10:12.950
在将单个文件推送到该域的地方， 

00:10:12.950 --> 00:10:15.340
就像我们用于Polyfill的Web组件和索引文件一样。 

00:10:16.000 --> 00:10:18.300
如果您需要执行诸如缓冲之类的操作

00:10:18.300 --> 00:10:21.090
对于充满资产的整个文件夹， 

00:10:21.090 --> 00:10:23.864
与其将其放入HTML的precache属性中， 

00:10:23.864 --> 00:10:25.400
实际上，我们可以将其放在这里。 

00:10:25.400 --> 00:10:28.030
可以说，将所有内容都缓存在映像目录中。 

00:10:28.030 --> 00:10:29.490
这是一个选择。 

00:10:29.490 --> 00:10:31.920
如果您只想传递单个文件， 

00:10:31.920 --> 00:10:35.180
另一种选择是在此处将其添加到推送请求中。 

00:10:35.180 --> 00:10:36.430
你可以做到的

00:10:36.430 --> 00:10:39.320
尽管仅在编码中这样做可能会更容易

00:10:39.320 --> 00:10:41.480
因为只有一个属性。 

00:10:42.600 --> 00:10:44.840
但我想让你知道这件事是如何运作的

00:10:44.840 --> 00:10:46.660
以及可供您选择的选项。 

00:10:47.160 --> 00:10:49.040
此过程的最后一步

00:10:49.040 --> 00:10:52.270
是为了确保我们已启用预缓存任务

00:10:52.270 --> 00:10:55.100
在默认的gulp任务中工作。 

00:10:55.410 --> 00:10:56.970
因此，我们将在此处添加预缓存。 

00:10:56.970 --> 00:11:00.744
这是为了确保当有人建立我的发行版时

00:11:00.744 --> 00:11:03.670
它会生成一个预缓存的JSON文件。 

00:11:04.140 --> 00:11:06.474
至此，我们完成了。一切都会正常。 

00:11:06.474 --> 00:11:08.970
我们可以导航到浏览器。 

00:11:08.970 --> 00:11:10.710
我们可以刷新页面。 

00:11:11.020 --> 00:11:14.150
您会注意到我已准备好减速以再次断开连接。 

00:11:14.150 --> 00:11:16.340
我可以去几个地方单击。 

00:11:16.340 --> 00:11:18.160
当我进入“交流”部分时， 

00:11:18.160 --> 00:11:20.030
我可以按按钮向我显示地图。 

00:11:20.030 --> 00:11:22.920
进入网络或在这种情况下进入缓存， 

00:11:23.150 --> 00:11:24.720
我们地图的图像将被收取费用。 

00:11:24.720 --> 00:11:27.450
正如我所说，这太好了。 

00:11:27.450 --> 00:11:30.155
您已使整个应用离线

00:11:30.155 --> 00:11:32.920
您不必编写任何JavaScript代码。 

00:11:32.920 --> 00:11:34.700
神奇地发生了

00:11:34.700 --> 00:11:37.275
由于Web组件和服务运营商的能力。 

00:11:37.275 --> 00:11:38.850
亲爱的朋友，今天就这样。 

00:11:38.850 --> 00:11:41.270
如果您有任何问题，请在评论中将其保留在下面。 

00:11:41.270 --> 00:11:42.854
如果可以的话，我会尝试全部阅读。 

00:11:42.854 --> 00:11:45.060
另外，请务必点击此订阅按钮

00:11:45.060 --> 00:11:46.226
这样您就不会错过任何情节。 

00:11:46.226 --> 00:11:47.970
再次感谢您的收看。 

00:11:47.970 --> 00:11:49.295
下次见。 

00:11:49.945 --> 00:11:51.950
嗨，Polycasters。罗布在这里。 

00:11:51.950 --> 00:11:53.440
是时候提问和回答了。 

00:11:53.440 --> 00:11:57.370
本周的问题来自Robrez博士-您好，医生， 

00:11:57.370 --> 00:12:00.275
 -要求在Polymer 1.0中

00:12:00.275 --> 00:12:03.262
我们可以在我们的方法中包括数据吗

00:12:03.262 --> 00:12:05.970
就像我们在处理旧的基本模式化合物一样？ 

00:12:06.260 --> 00:12:10.550
还是建议在类名中包含数据的方法？ 

00:12:10.920 --> 00:12:13.740
因此，例如，您可能有一个foo-bar品种

00:12:13.740 --> 00:12:16.037
然后包括另一个称为浴的品种的数据。 

00:12:16.367 --> 00:12:17.700
这是一个非常好的问题。 

00:12:17.700 --> 00:12:21.920
在Polymer 1.0中，您当前无法在方法中嵌入数据。 

00:12:22.089 --> 00:12:24.470
这是我们考虑的路线图， 

00:12:24.470 --> 00:12:26.674
但是现在没有具体的时间了

00:12:27.390 --> 00:12:31.620
另外，字符串中不能包含语句。 

00:12:31.620 --> 00:12:35.250
因此，建议的方法是获取完整的类别列表

00:12:35.250 --> 00:12:38.130
并生成称为-或者我认为我们称为- 

00:12:38.130 --> 00:12:40.882
它的计算机化嵌入。 

00:12:40.882 --> 00:12:42.710
因此，您可以在此处查看此链接

00:12:42.710 --> 00:12:45.494
了解有关文档中计算机化嵌入的信息。 

00:12:45.494 --> 00:12:46.630
真的很棒

00:12:46.630 --> 00:12:48.171
您可以将参数传递给它

00:12:48.171 --> 00:12:51.260
您可以返回字符串，该字符串将填充您的整个类别列表。 

00:12:51.546 --> 00:12:52.790
一个非常好的问题。 

00:12:52.790 --> 00:12:54.200
非常感谢您发送它。 

00:12:54.200 --> 00:12:56.770
如果您有任何疑问，请在下面的评论中留下。 

00:12:56.770 --> 00:12:59.500
如果可以的话，我们会尝试阅读并回答所有问题。 

00:12:59.500 --> 00:13:02.247
也许我们可以在下一期的Polycast中突出显示您。 

00:13:02.247 --> 00:13:03.830
再次感谢您的收看。 

00:13:03.830 --> 00:13:06.205
请务必点击此处的订阅按钮， 

00:13:06.205 --> 00:13:07.590
下次见。 

