WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.360
[MUSIC PLAYING]

00:00:04.800 --> 00:00:06.830
ROB DODSON: Hey there,
polycasters, Rob here.

00:00:06.830 --> 00:00:08.690
So before coming
into the studio,

00:00:08.690 --> 00:00:11.060
we tweeted out a question
to see what folks wanted

00:00:11.060 --> 00:00:13.559
to see in the next episode of
"Polycast," and a lot of folks

00:00:13.559 --> 00:00:16.510
wrote in and said they wanted
to know how to lazy load Polymer

00:00:16.510 --> 00:00:18.617
elements to improve the
performance of their apps.

00:00:18.617 --> 00:00:20.700
So that's exactly what
we're going to cover today.

00:00:20.700 --> 00:00:22.366
Now to do that, we're
going to start off

00:00:22.366 --> 00:00:23.700
over here at the Polymer docs.

00:00:23.700 --> 00:00:25.700
And we're going to go
down to the API reference.

00:00:25.700 --> 00:00:26.930
And sometimes, we
might not even realize

00:00:26.930 --> 00:00:28.930
that we have an API
reference, but it's

00:00:28.930 --> 00:00:31.670
hidden down here in the
sidebar for the documentation.

00:00:31.670 --> 00:00:33.170
You can go click
on that, and that's

00:00:33.170 --> 00:00:36.650
going to take you to this
classic Polymer doc layout

00:00:36.650 --> 00:00:38.720
if you've seen this
before on other elements.

00:00:38.720 --> 00:00:41.080
And this is where you can
find all of the properties

00:00:41.080 --> 00:00:43.436
and methods of the
Polymer object itself,

00:00:43.436 --> 00:00:45.310
so a lot of really cool
stuff inside of here.

00:00:45.310 --> 00:00:47.650
This is also where, for
instance, the Polymer

00:00:47.650 --> 00:00:49.410
Templatizer documentation is.

00:00:49.410 --> 00:00:52.430
So if you wanted to create
your own version of dom-if

00:00:52.430 --> 00:00:54.400
or dom-repeat, you
could use Templatizer

00:00:54.400 --> 00:00:56.900
to do that-- just a
helpful tidbit there.

00:00:56.900 --> 00:00:58.300
But what we're
interested in here

00:00:58.300 --> 00:00:59.895
is this Polymer Base object.

00:00:59.895 --> 00:01:02.490
And Polymer Base is
the base prototype

00:01:02.490 --> 00:01:03.880
for all Polymer elements.

00:01:03.880 --> 00:01:06.200
And it's where we hide
interesting methods,

00:01:06.200 --> 00:01:07.880
and properties, and
stuff like that.

00:01:07.880 --> 00:01:12.150
The one I'm into is called
importHref, down here.

00:01:12.150 --> 00:01:15.310
We can hit the "embiggen"
button to make it larger.

00:01:15.310 --> 00:01:17.530
And so what importHref
is going to do,

00:01:17.530 --> 00:01:19.995
it's going to give us the
ability to dynamically load

00:01:19.995 --> 00:01:21.975
an HTML import at runtime.

00:01:21.975 --> 00:01:23.600
It's got a few
arguments that it takes.

00:01:23.600 --> 00:01:25.850
The first argument is, we're
going to give it an href,

00:01:25.850 --> 00:01:28.840
so basically, just a path to
some component or some HTML

00:01:28.840 --> 00:01:31.190
import that you want
to pull in at runtime.

00:01:31.190 --> 00:01:34.750
And then it wants callbacks
for on success, on error.

00:01:34.750 --> 00:01:38.640
And lastly, it takes an option,
which specifies whether or not

00:01:38.640 --> 00:01:41.569
you want the link tag to have
an async attribute on it.

00:01:41.569 --> 00:01:43.860
So what I'm going to do is
I'm going to use importHref,

00:01:43.860 --> 00:01:46.227
and I'm going to build
a sample application.

00:01:46.227 --> 00:01:48.060
This is the app that I
have thrown together.

00:01:48.060 --> 00:01:49.520
It is called Polymeal.

00:01:49.520 --> 00:01:51.485
It's a social
network for foodies

00:01:51.485 --> 00:01:54.500
and, I guess, people
that like stir fry,

00:01:54.500 --> 00:01:56.660
because there's a lot
of pictures of stir fry.

00:01:56.660 --> 00:02:00.220
And you can either go
to the browse section--

00:02:00.220 --> 00:02:03.390
and you see, here, that I've
got all sorts of yummy photos--

00:02:03.390 --> 00:02:06.480
or you could go to the activity
feed, and you could see,

00:02:06.480 --> 00:02:08.780
maybe, I'd be posting
status updates

00:02:08.780 --> 00:02:11.612
from all the cool, awesome
restaurants that I'm eating at.

00:02:11.612 --> 00:02:13.320
Now the main thing to
take away from this

00:02:13.320 --> 00:02:16.650
is that these two sections have
very, very different content.

00:02:16.650 --> 00:02:18.700
This one is a whole
bunch of cards

00:02:18.700 --> 00:02:20.560
with some paper buttons on it.

00:02:20.560 --> 00:02:22.250
And this activity
feed is, instead,

00:02:22.250 --> 00:02:26.030
just these little
status blurb things.

00:02:26.030 --> 00:02:30.120
So there's no reason
to load all these card

00:02:30.120 --> 00:02:32.130
elements if the user
is just starting off

00:02:32.130 --> 00:02:33.440
in the activity feed, right?

00:02:33.440 --> 00:02:35.670
It would just make more
sense to load that at runtime

00:02:35.670 --> 00:02:39.740
to reduce the bandwidth
for our total application.

00:02:39.740 --> 00:02:42.450
So to do that, we're going
to use importHref over here

00:02:42.450 --> 00:02:44.280
in our code editor.

00:02:44.280 --> 00:02:47.206
So this is my x-app element
that I have started off with.

00:02:47.206 --> 00:02:49.830
And what I'm going to do is I'm
going to have an x-app element.

00:02:49.830 --> 00:02:55.260
Inside of x-app, I will chuck
in a little iron-pages here.

00:02:55.260 --> 00:02:58.000
And inside of
iron-pages, we'll have

00:02:58.000 --> 00:03:00.040
sections for the
different bits of our app

00:03:00.040 --> 00:03:01.180
that we are interested in.

00:03:01.180 --> 00:03:05.880
So I've got a browse section
and an activity section.

00:03:05.880 --> 00:03:08.620
And we've also got
the Page.js router

00:03:08.620 --> 00:03:10.479
loaded into x-app as well.

00:03:10.479 --> 00:03:12.395
So if we go down to the
JavaScript definition,

00:03:12.395 --> 00:03:16.350
you can see that I've got
a basic route stubbed out.

00:03:16.350 --> 00:03:18.982
And what I want to do is,
when the route changes

00:03:18.982 --> 00:03:21.190
to either the browse section
or the activity section,

00:03:21.190 --> 00:03:23.970
I'm going to call Polymer's
importHref method, load

00:03:23.970 --> 00:03:25.200
in my element definition.

00:03:25.200 --> 00:03:27.050
Once that's loaded
in, I will then

00:03:27.050 --> 00:03:30.022
tell iron-pages to switch
over to that section.

00:03:30.022 --> 00:03:31.730
Now, the first thing
I want to do though,

00:03:31.730 --> 00:03:33.917
since we're starting
off just at slash--

00:03:33.917 --> 00:03:35.750
right now what we're
doing is we're actually

00:03:35.750 --> 00:03:38.801
just loading a shell that
looks like this, right?

00:03:38.801 --> 00:03:41.300
We're not hitting either the
browse or the activity section,

00:03:41.300 --> 00:03:44.100
so the user's got
nothing to look at.

00:03:44.100 --> 00:03:45.550
So we'll start
off by redirecting

00:03:45.550 --> 00:03:50.860
them-- page.redirect--
over to the browse section.

00:03:50.860 --> 00:03:53.600
So this way, we just have
a nice starting point.

00:03:53.600 --> 00:03:56.830
I'm going to write another
handler for browse,

00:03:56.830 --> 00:03:58.735
so page('/browse').

00:03:58.735 --> 00:04:00.110
And you'll notice,
here, that I'm

00:04:00.110 --> 00:04:02.750
using ES6 fat arrow functions.

00:04:02.750 --> 00:04:04.660
That just makes it
a little bit easier

00:04:04.660 --> 00:04:08.320
to deal with the scoping
of the this value inside

00:04:08.320 --> 00:04:09.660
of these handlers.

00:04:09.660 --> 00:04:11.760
So I'll say, page.browse.

00:04:11.760 --> 00:04:15.540
And what I first want to do is
see if the element has already

00:04:15.540 --> 00:04:16.040
been loaded.

00:04:16.040 --> 00:04:17.560
Has this page been
loaded before?

00:04:17.560 --> 00:04:20.510
Because if it has, there's
no reason to import it again.

00:04:20.510 --> 00:04:24.111
So we'll call Polymer's
isInstance method.

00:04:24.111 --> 00:04:26.360
And this is something that
I-- I don't even think it's

00:04:26.360 --> 00:04:27.026
well documented.

00:04:27.026 --> 00:04:29.320
It might seriously not even
exist anywhere in our docs.

00:04:29.320 --> 00:04:31.403
But I spoke with our tech
writer, this is a thing.

00:04:31.403 --> 00:04:34.380
You can use it to check to see
if an element is an upgraded

00:04:34.380 --> 00:04:35.760
Polymer element.

00:04:35.760 --> 00:04:40.470
So because both our browse
element and our activity

00:04:40.470 --> 00:04:43.280
element have IDs, we
can reference them

00:04:43.280 --> 00:04:44.700
using automatic node finding.

00:04:44.700 --> 00:04:46.300
And we could say this.$.browse.

00:04:49.000 --> 00:04:52.000
So if this is already
a Polymer element,

00:04:52.000 --> 00:04:53.630
let's just go ahead and return.

00:04:53.630 --> 00:04:54.800
No reason to do anything.

00:04:54.800 --> 00:04:57.060
No importing or anything
like that is needed.

00:04:57.060 --> 00:05:00.282
But we will set the selected
value to 'browse.' And then

00:05:00.282 --> 00:05:02.240
what that's going to do
is that's going to tell

00:05:02.240 --> 00:05:05.430
our iron-pages up here to
switch to that section.

00:05:05.430 --> 00:05:08.120
So you can see, we're binding
its selected attribute

00:05:08.120 --> 00:05:09.180
to that property.

00:05:09.180 --> 00:05:10.080
OK?

00:05:10.080 --> 00:05:12.440
Now, if the element
has not been loaded,

00:05:12.440 --> 00:05:14.310
if it hasn't been
upgraded yet, now we're

00:05:14.310 --> 00:05:15.750
going to import its definition.

00:05:15.750 --> 00:05:17.440
So we'll call
Polymer.Base.importHref(.

00:05:21.350 --> 00:05:23.576
And we're going to pass it
a path to the HTML import,

00:05:23.576 --> 00:05:25.450
for the browse section,
that we want to load,

00:05:25.450 --> 00:05:26.908
so
elements/x-browse/x-browse.html.

00:05:30.700 --> 00:05:33.705
And then we'll give it a
success handler to run.

00:05:33.705 --> 00:05:35.330
So we're going to
say, all right, cool,

00:05:35.330 --> 00:05:36.390
the element loaded in.

00:05:36.390 --> 00:05:40.540
Let's now set this selected
state to 'browse.' That'll tell

00:05:40.540 --> 00:05:42.270
iron-pages to update.

00:05:42.270 --> 00:05:45.390
And now we can return,
exit our route here.

00:05:45.390 --> 00:05:46.410
We should be good to go.

00:05:46.410 --> 00:05:48.410
If we go back and we look
at our application now

00:05:48.410 --> 00:05:50.260
and we refresh the
page, it should

00:05:50.260 --> 00:05:52.520
redirect to the browse
section, and it should start

00:05:52.520 --> 00:05:54.360
loading in all of those cards.

00:05:54.360 --> 00:05:55.750
Awesome, right?

00:05:55.750 --> 00:05:58.890
Now we need to do the same
thing for the activity section.

00:05:58.890 --> 00:06:02.650
So I can just grab this
entire route right here

00:06:02.650 --> 00:06:05.902
and do some dangerous
copy and paste work here.

00:06:05.902 --> 00:06:08.360
We're just going to go through
and, any place where it says

00:06:08.360 --> 00:06:10.470
'browse' we'll just flip
it out for 'activity.'

00:06:10.470 --> 00:06:16.380
[SWOOSHING SOUNDS] Activity--
thank you, spell-check.

00:06:16.380 --> 00:06:19.130
So when we go to /activity,
we're going to check to see

00:06:19.130 --> 00:06:20.700
if the activity
element is upgraded.

00:06:20.700 --> 00:06:22.000
If it is, return.

00:06:22.000 --> 00:06:23.480
If it's not, import it.

00:06:23.480 --> 00:06:25.160
Let's go and give that a look.

00:06:25.160 --> 00:06:26.491
So refresh the page.

00:06:26.491 --> 00:06:27.740
And we see our browse section.

00:06:27.740 --> 00:06:28.290
Looking good.

00:06:28.290 --> 00:06:30.350
We go to the activity
section and, boom,

00:06:30.350 --> 00:06:34.030
we've got our status feed
showing up right there.

00:06:34.030 --> 00:06:36.940
Now, there's still a lot of
unanswered questions to this.

00:06:36.940 --> 00:06:39.860
I showed you the quick and dirty
version of using importHref.

00:06:39.860 --> 00:06:41.650
But what we didn't
talk about was,

00:06:41.650 --> 00:06:44.425
do we need to vulcanize these
things into different bundles,

00:06:44.425 --> 00:06:47.970
and if so, how do we
exclude common dependencies.

00:06:47.970 --> 00:06:51.355
Or can we just use
HTTP/2 to maybe server

00:06:51.355 --> 00:06:55.214
push all the things or multiplex
stream all of our dependencies?

00:06:55.214 --> 00:06:56.630
So there are still
a lot of things

00:06:56.630 --> 00:06:57.839
that remain to be worked out.

00:06:57.839 --> 00:06:59.296
And what we're
going to do is we're

00:06:59.296 --> 00:07:02.270
going to talk about those in an
upcoming episode of "Polymer."

00:07:02.270 --> 00:07:03.920
But today, for what
we've done here,

00:07:03.920 --> 00:07:05.520
if you have any questions,
please leave them for me

00:07:05.520 --> 00:07:06.406
down in the comments.

00:07:06.406 --> 00:07:07.780
Otherwise, you
can always ping me

00:07:07.780 --> 00:07:10.410
on a social network of your
choosing at #AskPolymer.

00:07:10.410 --> 00:07:12.160
As always, thank you
so much for watching,

00:07:12.160 --> 00:07:13.426
and I'll see you next time.

00:07:13.426 --> 00:07:14.240
[MUSIC PLAYING]

00:07:14.240 --> 00:07:18.264
Otherwise, you can ping me
on a social network at--

00:07:18.264 --> 00:07:20.584
MALE SPEAKER: Take two.

00:07:20.584 --> 00:07:22.830
ROB DODSON: I'll keep all
the fun stuff up here,

00:07:22.830 --> 00:07:25.280
top 2/3 of the screen.

