WEBVTT
Kind: captions
Language: en

00:00:04.262 --> 00:00:05.220
Hey there, Polycasters.

00:00:05.220 --> 00:00:06.010
Rob here.

00:00:06.010 --> 00:00:07.801
Today on the show we're
going to be looking

00:00:07.801 --> 00:00:09.550
at how to test
elements that require

00:00:09.550 --> 00:00:13.240
Ajax to talk to their back in
using a web component tester.

00:00:13.240 --> 00:00:14.380
That made no sense.

00:00:14.380 --> 00:00:15.504
Let me back up.

00:00:15.504 --> 00:00:18.170
Today on the show we're going to
be continuing our series on Web

00:00:18.170 --> 00:00:20.380
Component Tester by
looking at how to test

00:00:20.380 --> 00:00:22.740
elements that require Ajax.

00:00:22.740 --> 00:00:26.380
Now, if you go check out the
documentation for Web Component

00:00:26.380 --> 00:00:29.120
Tester, you'll see
up there at the top

00:00:29.120 --> 00:00:31.840
there's a list of the libraries
that come with Web Component

00:00:31.840 --> 00:00:33.060
Tester itself.

00:00:33.060 --> 00:00:36.280
So we've got Mocha-- that
is our testing framework.

00:00:36.280 --> 00:00:38.710
We've got Chai, which is
our assertion library,

00:00:38.710 --> 00:00:40.930
and we'll be talking
about that in a bit.

00:00:40.930 --> 00:00:42.575
We've got Async
and Lodash-- these

00:00:42.575 --> 00:00:44.700
are libraries that are just
sort of like utilities.

00:00:44.700 --> 00:00:46.720
They help us do things
like manage callbacks

00:00:46.720 --> 00:00:49.460
and do fancy functional stuff.

00:00:49.460 --> 00:00:51.860
And lastly, we've got Sinon.

00:00:51.860 --> 00:00:57.030
And Sinon is a little library
that lets you mock XHR request,

00:00:57.030 --> 00:00:59.060
create fake servers,
do really anything

00:00:59.060 --> 00:01:01.910
you'd want to do if you wanted
to simulate an actual server.

00:01:01.910 --> 00:01:06.020
And rather than create some
brand new component or anything

00:01:06.020 --> 00:01:07.760
like that, I'm just
going to write unit

00:01:07.760 --> 00:01:09.800
test for a preexisting element.

00:01:09.800 --> 00:01:12.420
So I'm actually going to use
one of the Polymer team's

00:01:12.420 --> 00:01:14.450
elements, iron-ajax,
and I'm going

00:01:14.450 --> 00:01:15.860
to write tests against that.

00:01:15.860 --> 00:01:17.318
So that way I don't
have to come up

00:01:17.318 --> 00:01:21.246
with a weird, contrived
example because I'm lazy.

00:01:21.246 --> 00:01:22.870
So what I'm going to
do in my test file

00:01:22.870 --> 00:01:26.730
is start off by
importing iron-ajax.

00:01:26.730 --> 00:01:30.010
And then I'm going to write
a little test fixture for it.

00:01:30.010 --> 00:01:35.800
So inside this test fixture
I've got a little iron-ajax tag,

00:01:35.800 --> 00:01:40.270
and its URL is set to
"responds to get with JSON".

00:01:40.270 --> 00:01:41.370
All right?

00:01:41.370 --> 00:01:44.270
And then after that I'm going
to create the suite that's going

00:01:44.270 --> 00:01:46.440
to hold all of my unit tests.

00:01:46.440 --> 00:01:49.060
So I'm just going to call
my suite iron-ajax just

00:01:49.060 --> 00:01:50.990
so it's a nice general thing.

00:01:50.990 --> 00:01:53.660
And I'm going to create some
global variables in here.

00:01:53.660 --> 00:01:56.470
These are just going to keep
track of the iron-ajax tag,

00:01:56.470 --> 00:01:59.434
of the requesters we're sending
it out, of the Sinon server

00:01:59.434 --> 00:02:00.350
we're going to set up.

00:02:00.350 --> 00:02:02.510
Nothing too fancy here.

00:02:02.510 --> 00:02:05.900
After that is created, I'm
going to call a setup function.

00:02:05.900 --> 00:02:08.030
And this is where I'm
going to go ahead and start

00:02:08.030 --> 00:02:10.000
to build my Sinon server.

00:02:10.000 --> 00:02:12.630
So I'll call Sinon
fix server create.

00:02:12.630 --> 00:02:15.070
That's going to return an
instance of the server.

00:02:15.070 --> 00:02:17.334
And then I can call this
respond with method.

00:02:17.334 --> 00:02:18.750
And what that's
going to let me do

00:02:18.750 --> 00:02:21.690
is basically set up routes
that I want the fake server

00:02:21.690 --> 00:02:23.120
to respond to.

00:02:23.120 --> 00:02:24.820
So what I'm saying
here is when there's

00:02:24.820 --> 00:02:28.660
a get request for the route
"responds to get with JSON",

00:02:28.660 --> 00:02:31.760
I want it to respond
with a status code 200.

00:02:31.760 --> 00:02:33.760
I want it to send back
those response headers

00:02:33.760 --> 00:02:35.161
that I created up at the top.

00:02:35.161 --> 00:02:37.160
And lastly, I want to
send back this little JSON

00:02:37.160 --> 00:02:38.770
payload that says success true.

00:02:38.770 --> 00:02:40.120
Yay.

00:02:40.120 --> 00:02:41.390
So I've got that squared away.

00:02:41.390 --> 00:02:44.340
Next thing I'm going to
do is create a little tear

00:02:44.340 --> 00:02:45.534
down function.

00:02:45.534 --> 00:02:46.950
And in this tear
down function I'm

00:02:46.950 --> 00:02:49.280
going to tell the
server to restore

00:02:49.280 --> 00:02:51.790
itself, which basically means
like clean up after yourself.

00:02:51.790 --> 00:02:54.660
If you created global
variables, if there's

00:02:54.660 --> 00:02:57.540
any shared stake, anything
like that, just get rid of that

00:02:57.540 --> 00:03:01.100
so when we run the next test
it'll be a nice clean slate.

00:03:01.100 --> 00:03:01.870
OK?

00:03:01.870 --> 00:03:02.780
So I've got that squared away.

00:03:02.780 --> 00:03:04.488
Now I can write the
suite that's actually

00:03:04.488 --> 00:03:06.300
going to hold my unit tests.

00:03:06.300 --> 00:03:08.750
Inside of here I will
call a setup function.

00:03:08.750 --> 00:03:11.700
I'm going to grab
my test fixture

00:03:11.700 --> 00:03:14.720
and store it in that Ajax
variable that I created.

00:03:14.720 --> 00:03:16.220
And my first test
here is just going

00:03:16.220 --> 00:03:19.690
to verify that the iron-ajax
request is going out,

00:03:19.690 --> 00:03:21.439
and that I'm getting
a response back,

00:03:21.439 --> 00:03:23.480
and that the data in that
response looks correct.

00:03:23.480 --> 00:03:26.480
The test message is going to
be "has seen defaults that love

00:03:26.480 --> 00:03:27.970
you" because it does love you.

00:03:27.970 --> 00:03:33.200
So my request object is going
to call Ajax generate request.

00:03:33.200 --> 00:03:35.282
And then I can just
call server.respond.

00:03:35.282 --> 00:03:37.740
And this is one of the cool
parts about working with Sinon.

00:03:37.740 --> 00:03:40.760
Normally you would have to, if
this was a real server, you'd

00:03:40.760 --> 00:03:43.930
have to wait some amount of
time, set up an event listener,

00:03:43.930 --> 00:03:47.740
do some sort of like Async test
thing to get that response.

00:03:47.740 --> 00:03:49.580
Here we can treat it
like it's synchronous,

00:03:49.580 --> 00:03:50.660
and that's really nice.

00:03:50.660 --> 00:03:53.020
It mean our tests are
going to be really fast.

00:03:53.020 --> 00:03:58.720
And after that I can use expect
to inspect the response object

00:03:58.720 --> 00:03:59.610
that I got back.

00:03:59.610 --> 00:04:05.330
Now in the last video, I used
assert to inspect my objects.

00:04:05.330 --> 00:04:07.410
This time we're using expect.

00:04:07.410 --> 00:04:10.150
And basically, because
we're using Chai,

00:04:10.150 --> 00:04:11.990
we have a few different
assertion types

00:04:11.990 --> 00:04:14.198
that we can use, a few
different assertion libraries,

00:04:14.198 --> 00:04:14.850
if you will.

00:04:14.850 --> 00:04:16.980
You can go check out the
documentation for Chai.

00:04:16.980 --> 00:04:19.440
Maybe I should include a
link to that or something.

00:04:19.440 --> 00:04:22.110
Expect-- just another
flavor of assertion.

00:04:22.110 --> 00:04:23.180
Really not too different.

00:04:23.180 --> 00:04:24.680
What we're doing
here is we're first

00:04:24.680 --> 00:04:27.510
checking that the
response is OK,

00:04:27.510 --> 00:04:31.160
and that means that it wasn't
an error, it wasn't null,

00:04:31.160 --> 00:04:32.120
we got something back.

00:04:32.120 --> 00:04:33.871
We're checking that
it's an object, right?

00:04:33.871 --> 00:04:35.328
That's what we're
expecting to see.

00:04:35.328 --> 00:04:37.290
And lastly, we're
checking that the success

00:04:37.290 --> 00:04:39.830
property is set to true, OK?

00:04:39.830 --> 00:04:41.960
This looks OK to me.

00:04:41.960 --> 00:04:43.720
Let's switch over
to the terminal,

00:04:43.720 --> 00:04:47.730
and we're going to
run the WCT command.

00:04:47.730 --> 00:04:48.515
All right.

00:04:48.515 --> 00:04:49.390
Things are happening.

00:04:49.390 --> 00:04:52.240
Things are happening.

00:04:52.240 --> 00:04:53.400
And we get our test back.

00:04:53.400 --> 00:04:54.000
Awesome.

00:04:54.000 --> 00:04:54.499
All right.

00:04:54.499 --> 00:04:55.440
Everything's green.

00:04:55.440 --> 00:04:56.707
Looking good.

00:04:56.707 --> 00:04:58.290
I want to do some
more testing though.

00:04:58.290 --> 00:05:00.910
I want to test a post request.

00:05:00.910 --> 00:05:03.440
So I'm going to create a
brand new test fixture.

00:05:03.440 --> 00:05:06.400
And this time, I'm again
using an iron-ajax element.

00:05:06.400 --> 00:05:09.430
I'm setting the method
to post and the URL

00:05:09.430 --> 00:05:11.770
is "responds to post with JSON".

00:05:11.770 --> 00:05:13.880
Just like we did
for the get request,

00:05:13.880 --> 00:05:17.004
we will set up a route
in our Sinon fake server.

00:05:17.004 --> 00:05:18.420
So we're going to
say that we want

00:05:18.420 --> 00:05:21.310
it to listen for post
requests on the route

00:05:21.310 --> 00:05:22.810
"responds to post with JSON".

00:05:22.810 --> 00:05:26.200
When it hears that, it should
send back a 200-- same response

00:05:26.200 --> 00:05:28.910
headers as last time-- and this
time the object it sends back

00:05:28.910 --> 00:05:31.548
is going to say post
request is true.

00:05:31.548 --> 00:05:33.790
Yay.

00:05:33.790 --> 00:05:35.280
Over here in our
test, I'll write

00:05:35.280 --> 00:05:41.030
a brand new suite for
making simple post requests.

00:05:41.030 --> 00:05:42.990
The first test I'm
actually just going

00:05:42.990 --> 00:05:46.740
to verify that when
I set that method

00:05:46.740 --> 00:05:51.132
to post that that is actually
setting the XHR method.

00:05:51.132 --> 00:05:52.590
So I'm not even
calling Sinon here.

00:05:52.590 --> 00:05:54.173
I'm just verifying
that under the hood

00:05:54.173 --> 00:05:56.040
the element does
what it expects.

00:05:56.040 --> 00:05:58.320
After that I'm going to
go ahead and actually ping

00:05:58.320 --> 00:05:59.420
the Sinon server.

00:05:59.420 --> 00:06:04.650
Now I'm going to test
that the response is OK,

00:06:04.650 --> 00:06:06.810
I'm going to test
that it is an object,

00:06:06.810 --> 00:06:10.960
and I'm going to test that
post success is equal to true.

00:06:10.960 --> 00:06:11.460
All right?

00:06:11.460 --> 00:06:13.410
Let's switch over
to our terminal,

00:06:13.410 --> 00:06:18.514
we will run Web Component
Tester, and we will wait.

00:06:18.514 --> 00:06:19.680
Waiting on things to happen.

00:06:22.860 --> 00:06:23.360
Great.

00:06:23.360 --> 00:06:24.850
So all of our tests are passing.

00:06:24.850 --> 00:06:25.880
Everything's green.

00:06:25.880 --> 00:06:29.059
Now, what if those tests
weren't passing though?

00:06:29.059 --> 00:06:30.350
What if one of them had failed?

00:06:30.350 --> 00:06:32.110
What if it was just
one browser that failed

00:06:32.110 --> 00:06:33.330
or something weird like that?

00:06:33.330 --> 00:06:34.500
What would we do?

00:06:34.500 --> 00:06:36.835
This is where I'm going to
show you a little trick here.

00:06:36.835 --> 00:06:38.710
When we run the Web
Component Tester command,

00:06:38.710 --> 00:06:41.261
we can actually
pass up the -p flag.

00:06:41.261 --> 00:06:42.760
And what this is
going to do is it's

00:06:42.760 --> 00:06:45.600
going to leave all the
browser windows open.

00:06:45.600 --> 00:06:47.290
And this is really
useful because it

00:06:47.290 --> 00:06:50.544
means we can open up the console
for those different browsers,

00:06:50.544 --> 00:06:52.460
we can inspect them, and
if there were errors,

00:06:52.460 --> 00:06:53.860
they are going to show up there.

00:06:53.860 --> 00:06:55.266
So here I've got Firefox.

00:06:55.266 --> 00:06:56.140
I'm going to zoom in.

00:06:56.140 --> 00:06:58.320
I'm going to open the
Firefox dev tools.

00:06:58.320 --> 00:06:59.600
So I'm going to enhance this.

00:06:59.600 --> 00:07:02.960
And you'll see that I've
got my test listed here.

00:07:02.960 --> 00:07:04.630
But if there were
any errors, they

00:07:04.630 --> 00:07:06.540
would show up there as well.

00:07:06.540 --> 00:07:09.070
So pretty helpful feature there.

00:07:09.070 --> 00:07:11.789
All right, that covers
testing with Ajax with Sinon.

00:07:11.789 --> 00:07:13.830
There's actually a lot
more you can do with Sinon

00:07:13.830 --> 00:07:16.380
but I've definitely given
you enough to get started.

00:07:16.380 --> 00:07:18.310
There's a lot more that I want
to cover with Web Component

00:07:18.310 --> 00:07:18.893
Tester though.

00:07:18.893 --> 00:07:21.570
So if there are segments that
you are interested in seeing,

00:07:21.570 --> 00:07:23.082
please leave a
comment down below.

00:07:23.082 --> 00:07:25.540
That way we can try and make
some of those episodes happen.

00:07:25.540 --> 00:07:28.860
Also consider clicking that Like
button or the Subscribe button

00:07:28.860 --> 00:07:29.782
if you truly love me.

00:07:29.782 --> 00:07:31.240
And if you have
some questions, you

00:07:31.240 --> 00:07:33.240
can ping us on a social
network of your choosing

00:07:33.240 --> 00:07:34.800
at #AskPolymer.

00:07:34.800 --> 00:07:36.750
As always, thank you
so much for watching.

00:07:36.750 --> 00:07:38.954
I'll see you next time

00:07:38.954 --> 00:07:40.388
Turn your phones off.

00:07:43.740 --> 00:07:45.750
Gotham needs me.

00:07:45.750 --> 00:07:46.744
Response codes.

00:07:49.730 --> 00:07:51.720
I got ahead of myself.

