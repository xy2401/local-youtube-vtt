WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.367
[VIDEO GAME MUSIC]

00:00:03.367 --> 00:00:04.011
Hey, everyone.

00:00:04.011 --> 00:00:04.510
What's up?

00:00:04.510 --> 00:00:05.400
It's Rob Dodson.

00:00:05.400 --> 00:00:08.400
Welcome to a very special
I/O edition of "Polycast."

00:00:08.400 --> 00:00:11.100
Today, we're going to talk about
styling and theming elements

00:00:11.100 --> 00:00:12.920
and how all that
just got way better

00:00:12.920 --> 00:00:14.500
in the new release of Polymer.

00:00:14.500 --> 00:00:16.250
I really think you're
going to enjoy this,

00:00:16.250 --> 00:00:18.460
so let's check it out.

00:00:18.460 --> 00:00:21.360
So I'm going to start with a
little story about Polymer 0.5,

00:00:21.360 --> 00:00:25.060
because this is an issue that
tripped up a lot of folks.

00:00:25.060 --> 00:00:27.990
In Polymer 0.5, if you
had a component that

00:00:27.990 --> 00:00:29.870
had some internal
styles and then

00:00:29.870 --> 00:00:34.680
you had some more specific
CSS styles in the document,

00:00:34.680 --> 00:00:37.290
when you took that component
over to polyfilled browsers

00:00:37.290 --> 00:00:39.560
like Safari or
Internet Explorer,

00:00:39.560 --> 00:00:41.860
you might see one thing
and then in Chrome,

00:00:41.860 --> 00:00:43.360
where there's native
Shadow DOM, you

00:00:43.360 --> 00:00:44.810
would see something different.

00:00:44.810 --> 00:00:47.570
In other words, if you had more
specific CSS in the document,

00:00:47.570 --> 00:00:49.820
it could totally
wreck your component.

00:00:49.820 --> 00:00:53.840
And this tripped up a lot of
beginners who were just getting

00:00:53.840 --> 00:00:56.670
started with Polymer and
thought perhaps it just

00:00:56.670 --> 00:00:58.850
didn't work in all browsers,
which is not the case.

00:00:58.850 --> 00:01:02.330
It's just it's very, very
difficult to properly polyfill

00:01:02.330 --> 00:01:03.830
CSS scoping.

00:01:03.830 --> 00:01:06.090
So let me give you an example
of what this looks like,

00:01:06.090 --> 00:01:08.250
just so you can kind
of internalize it.

00:01:08.250 --> 00:01:11.110
In one of the previous
episodes of "Polycast,"

00:01:11.110 --> 00:01:13.555
we created this
quick alert tag here,

00:01:13.555 --> 00:01:15.430
which is basically like
a little notification

00:01:15.430 --> 00:01:17.000
you might send to a user.

00:01:17.000 --> 00:01:20.700
And in that episode, I wanted
to style this div down here,

00:01:20.700 --> 00:01:23.450
so I used this alert style.

00:01:23.450 --> 00:01:26.540
But imagine if, instead of
using a class selector here,

00:01:26.540 --> 00:01:30.120
if I just styled the
div element by itself.

00:01:30.120 --> 00:01:32.090
Now, this is totally fine.

00:01:32.090 --> 00:01:34.350
This would give us
that same example.

00:01:34.350 --> 00:01:36.660
The problem is just that
it's not very specific.

00:01:40.150 --> 00:01:42.530
And so what could
happen is my buddy

00:01:42.530 --> 00:01:44.760
might be working somewhere
else in the site,

00:01:44.760 --> 00:01:46.600
totally oblivious
to what I'm doing.

00:01:46.600 --> 00:01:49.840
And he might create an
alert class, as well, just

00:01:49.840 --> 00:01:52.620
to target some other
element on the page.

00:01:52.620 --> 00:01:55.900
And he could style it with
some weird fonts and background

00:01:55.900 --> 00:01:57.710
colors and what have you.

00:01:57.710 --> 00:02:00.170
And then, when I go
in the next morning,

00:02:00.170 --> 00:02:02.190
I look at my quick alert
tag, it's all busted.

00:02:02.190 --> 00:02:03.025
It's in Comic Sans.

00:02:03.025 --> 00:02:04.530
It looks all messed up.

00:02:04.530 --> 00:02:06.810
And for a lot of
folks, they saw this

00:02:06.810 --> 00:02:09.419
and they just thought, oh,
this stuff just doesn't work.

00:02:09.419 --> 00:02:12.960
But really, the problem is,
you just can't very effectively

00:02:12.960 --> 00:02:14.460
polyfill CSS scoping.

00:02:14.460 --> 00:02:16.520
It's a pretty
tricky thing to do.

00:02:16.520 --> 00:02:18.690
But the team decided
perhaps there

00:02:18.690 --> 00:02:21.480
could be a better alternative
to what we currently had.

00:02:21.480 --> 00:02:26.450
And so I'm happy to introduce
you to the new custom style

00:02:26.450 --> 00:02:27.270
tag.

00:02:27.270 --> 00:02:30.450
Now, this is a type extension
of the style element.

00:02:30.450 --> 00:02:32.530
If you recall in a
previous episode,

00:02:32.530 --> 00:02:34.530
we talked all about
type extension elements

00:02:34.530 --> 00:02:35.660
and how they work.

00:02:35.660 --> 00:02:37.770
And the cool thing about
the custom style tag

00:02:37.770 --> 00:02:41.400
is it allows you to put your
document CSS inside of it

00:02:41.400 --> 00:02:44.610
and these styles are
basically not going

00:02:44.610 --> 00:02:48.270
to be able to affect or mess
up any of the components

00:02:48.270 --> 00:02:51.500
that you have on your page
in polyfilled browsers.

00:02:51.500 --> 00:02:54.760
It's a really great way
to get lower bound style

00:02:54.760 --> 00:02:58.050
scoping in Polymer in
the newest release.

00:02:58.050 --> 00:03:00.250
I think it's pretty awesome.

00:03:00.250 --> 00:03:02.170
So now you know how to
protect your elements

00:03:02.170 --> 00:03:05.125
from document-level styles
in polyfilled browsers,

00:03:05.125 --> 00:03:06.500
the next thing I
want to show you

00:03:06.500 --> 00:03:09.334
is how to actually theme
whole element sets using

00:03:09.334 --> 00:03:10.375
some cool new techniques.

00:03:12.980 --> 00:03:15.760
Now, in last year's I/O, I
showed off a couple of ways

00:03:15.760 --> 00:03:18.750
that you could theme
an element using

00:03:18.750 --> 00:03:20.800
some shadow piercing selectors.

00:03:20.800 --> 00:03:23.726
So there was ::shadow
pseudo element,

00:03:23.726 --> 00:03:26.100
which would allow you to pierce
one level into the shadow

00:03:26.100 --> 00:03:29.820
boundary and in this example,
target the slider knob thing

00:03:29.820 --> 00:03:31.730
inside of my paper slider.

00:03:31.730 --> 00:03:33.530
There was also the
deep combinator,

00:03:33.530 --> 00:03:36.570
which allows you to pierce
infinite levels of shadow

00:03:36.570 --> 00:03:37.370
boundaries.

00:03:37.370 --> 00:03:40.140
And in this case, I'm targeting
all the little ink effects

00:03:40.140 --> 00:03:43.910
inside of here by
actually hitting the ID.

00:03:43.910 --> 00:03:46.490
But there are some problems
with ::shadow and /deep/.

00:03:46.490 --> 00:03:49.410
First and foremost, they
totally break encapsulation.

00:03:49.410 --> 00:03:53.870
In those examples, I had to know
specific ID names of elements

00:03:53.870 --> 00:03:56.190
inside of my web
components to target them,

00:03:56.190 --> 00:03:59.630
which means if the author moved
those things around or changed

00:03:59.630 --> 00:04:02.180
the names at any point,
my theme would break.

00:04:02.180 --> 00:04:04.800
Also, ::shadow and /deep/ kind
of screw up some potential

00:04:04.800 --> 00:04:05.590
performance gains.

00:04:05.590 --> 00:04:08.720
There's this idea that you can
improve style recalculation

00:04:08.720 --> 00:04:11.860
using Shadow DOM, if it wasn't
possible to pierce inside

00:04:11.860 --> 00:04:12.360
of it.

00:04:12.360 --> 00:04:14.570
But that sort of
goes out the window.

00:04:14.570 --> 00:04:18.120
And lastly, and I think
this is pretty important,

00:04:18.120 --> 00:04:20.982
both ::shadow and /deep/
are sort of imprecise tools.

00:04:20.982 --> 00:04:22.440
They're kind of
like sledgehammers.

00:04:22.440 --> 00:04:25.150
In particular, /deep/ is
kind of a main offender here,

00:04:25.150 --> 00:04:29.060
because it can pierce so many
levels and do so many things.

00:04:29.060 --> 00:04:31.020
So the team thought
that perhaps there

00:04:31.020 --> 00:04:34.480
would be a better way to
do theming and styling

00:04:34.480 --> 00:04:35.750
in the new release of Polymer.

00:04:35.750 --> 00:04:37.666
And one of the areas
that we've been exploring

00:04:37.666 --> 00:04:40.600
is around CSS variables.

00:04:40.600 --> 00:04:43.490
So let me show you an example
of how this could work.

00:04:43.490 --> 00:04:46.180
I've got an element that I've
created here called UI message

00:04:46.180 --> 00:04:48.090
and it is pretty generic.

00:04:48.090 --> 00:04:50.520
It's got a container and then
a header and content area

00:04:50.520 --> 00:04:51.107
inside of it.

00:04:51.107 --> 00:04:53.440
And it's just got some data
bindings to these properties

00:04:53.440 --> 00:04:55.060
down here that I've created.

00:04:55.060 --> 00:04:57.860
Now, I'm going to hide
my JavaScript definition,

00:04:57.860 --> 00:05:00.370
just so I can focus
on the markup up here.

00:05:00.370 --> 00:05:02.692
And I want to add some styles.

00:05:02.692 --> 00:05:05.150
So I'm going to target the host
and give it an inline block

00:05:05.150 --> 00:05:05.970
style.

00:05:05.970 --> 00:05:07.824
I'm also going to
target that container

00:05:07.824 --> 00:05:10.240
and set its background color
to gray and with a little bit

00:05:10.240 --> 00:05:10.740
of padding.

00:05:10.740 --> 00:05:14.830
And this is going to give me a
very generic-looking sort of UI

00:05:14.830 --> 00:05:16.140
message thing.

00:05:16.140 --> 00:05:18.422
Now, it's pretty
boring, but let's say

00:05:18.422 --> 00:05:20.630
someone actually wanted to
use this in their project.

00:05:20.630 --> 00:05:22.171
And the first thing
they wanted to do

00:05:22.171 --> 00:05:24.010
was change that header color.

00:05:24.010 --> 00:05:27.500
So to do that using
CSS variables,

00:05:27.500 --> 00:05:30.980
we can actually target
the header class,

00:05:30.980 --> 00:05:35.160
target the color property, and
then give it a variable here.

00:05:35.160 --> 00:05:39.030
So I'm saying that the value
of UI message header color

00:05:39.030 --> 00:05:41.650
should set my color property.

00:05:41.650 --> 00:05:44.950
Now, I know that this
syntax is pretty funky,

00:05:44.950 --> 00:05:50.210
but this is the syntax-- this
is the standard syntax for CSS3

00:05:50.210 --> 00:05:51.220
variables.

00:05:51.220 --> 00:05:52.950
And the cool thing
about this is it

00:05:52.950 --> 00:05:56.010
allows the author
to expose a styling

00:05:56.010 --> 00:05:58.580
point to the outside world.

00:05:58.580 --> 00:06:01.420
But someone using this
component doesn't actually

00:06:01.420 --> 00:06:04.426
need to know specifically where
this variable is being used.

00:06:04.426 --> 00:06:06.550
They just know that there's
a header color variable

00:06:06.550 --> 00:06:08.860
somewhere that gets applied.

00:06:08.860 --> 00:06:12.580
So elsewhere, I'm creating
a theme for this component.

00:06:12.580 --> 00:06:14.890
I've got a custom style element.

00:06:14.890 --> 00:06:17.414
And it's very important that
if you're using variables,

00:06:17.414 --> 00:06:19.580
that you place them inside
of custom style elements,

00:06:19.580 --> 00:06:21.810
because it gives Polymer
one place to look

00:06:21.810 --> 00:06:26.150
for these variable declarations.

00:06:26.150 --> 00:06:27.775
I'm going to target
the UI message tag,

00:06:27.775 --> 00:06:29.520
I'm going to target
that variable,

00:06:29.520 --> 00:06:32.320
and I'll pass in
a value of white.

00:06:32.320 --> 00:06:37.970
And what that's going to do is
give me a header that is white.

00:06:37.970 --> 00:06:40.440
Now, this is really cool,
because as a consumer

00:06:40.440 --> 00:06:42.380
of the element, I don't
need to know anything

00:06:42.380 --> 00:06:43.360
about the internals.

00:06:43.360 --> 00:06:45.170
I can just set a value
for that variable

00:06:45.170 --> 00:06:48.340
and then the author can choose
to use it however they wish.

00:06:48.340 --> 00:06:49.830
But there's a catch here.

00:06:49.830 --> 00:06:52.410
If we have to define a variable
for every single property

00:06:52.410 --> 00:06:53.370
inside of our
element, then we're

00:06:53.370 --> 00:06:55.800
going to end up with thousands
of variables and no time

00:06:55.800 --> 00:06:57.446
and we definitely
don't want that.

00:06:57.446 --> 00:06:59.820
So this is where things actually
get kind of interesting.

00:06:59.820 --> 00:07:02.940
The Polymer team's been working
on an experimental new theming

00:07:02.940 --> 00:07:06.260
system that takes advantage
of CSS custom properties.

00:07:06.260 --> 00:07:09.420
It's experimental, like I
said, but totally awesome.

00:07:09.420 --> 00:07:10.970
So I want to show
you how that works.

00:07:13.800 --> 00:07:16.190
Now, one of the things
that would be cool

00:07:16.190 --> 00:07:20.120
is if we could pass in not
just one variable at a time,

00:07:20.120 --> 00:07:23.420
but actually pass in a
whole bunch of properties

00:07:23.420 --> 00:07:24.830
all at once.

00:07:24.830 --> 00:07:27.470
There is a concept
similar to this in CSS

00:07:27.470 --> 00:07:31.029
preprocessors like SaaS
or Less called mixins.

00:07:31.029 --> 00:07:32.820
And this is something
that the Polymer team

00:07:32.820 --> 00:07:35.960
has been working with
the CSS standards body

00:07:35.960 --> 00:07:38.720
to add to the current spec.

00:07:38.720 --> 00:07:41.380
It's this idea of taking
custom properties that

00:07:41.380 --> 00:07:45.414
allow you to pass in whole
bags of values all at once.

00:07:45.414 --> 00:07:46.830
So let me show you
how that works,

00:07:46.830 --> 00:07:47.580
because it's pretty cool.

00:07:47.580 --> 00:07:49.140
So let's take our
header thing here

00:07:49.140 --> 00:07:53.320
and instead of just
doing this one variable,

00:07:53.320 --> 00:07:59.060
I'm going to create a few what
are called custom properties.

00:07:59.060 --> 00:08:01.160
So I've still got my
sort of default styles

00:08:01.160 --> 00:08:03.190
that I started
with my container,

00:08:03.190 --> 00:08:05.010
but now I'm using
this syntax to say,

00:08:05.010 --> 00:08:08.520
hey, I want to apply a custom
property called UI message

00:08:08.520 --> 00:08:09.780
container theme.

00:08:09.780 --> 00:08:12.870
I'm going to apply a UI message
header theme and a content

00:08:12.870 --> 00:08:13.700
theme.

00:08:13.700 --> 00:08:18.390
And what this allows me to do
is go back to my theme file

00:08:18.390 --> 00:08:22.630
and replace this one variable
with those custom properties.

00:08:22.630 --> 00:08:24.640
Notice that there's a
semicolon on the end here.

00:08:24.640 --> 00:08:26.610
This is important for
the syntax and something

00:08:26.610 --> 00:08:28.460
that I often leave off.

00:08:28.460 --> 00:08:33.539
And now, I can actually pass in
just whole bags of properties

00:08:33.539 --> 00:08:35.850
that I would like to
override the default

00:08:35.850 --> 00:08:37.200
styles in that element.

00:08:37.200 --> 00:08:40.610
Now, I borrowed these styles
from the Symantic UI Library

00:08:40.610 --> 00:08:44.200
just to show that you
can go hog wild here.

00:08:44.200 --> 00:08:48.100
You can pass in as much CSS
as you could possibly imagine.

00:08:48.100 --> 00:08:49.670
And what this is
going to do is take

00:08:49.670 --> 00:08:53.685
our totally boring,
vanilla UI message

00:08:53.685 --> 00:08:55.060
and turn it into
something that's

00:08:55.060 --> 00:08:57.250
actually much more pleasant.

00:08:57.250 --> 00:09:00.610
So over in my Code Editor, I've
got a Bower JSON file fired up

00:09:00.610 --> 00:09:07.260
and I am in my dependencies
listing Polymer 0.9 RC.1 as one

00:09:07.260 --> 00:09:08.320
of my dependencies.

00:09:08.320 --> 00:09:11.290
Now, it's been a few weeks
since this has been recorded,

00:09:11.290 --> 00:09:13.180
so you're probably
safe at this point

00:09:13.180 --> 00:09:19.172
to just go ahead and replace
this with the actual 0.9.0 tag.

00:09:19.172 --> 00:09:21.510
And once you've got that in
place, you can install it.

00:09:21.510 --> 00:09:24.140
It'll pull down the
latest version of Polymer.

00:09:24.140 --> 00:09:26.970
And over in my UI
message file, this

00:09:26.970 --> 00:09:29.630
is the same element that I was
showing over in the slides.

00:09:29.630 --> 00:09:31.088
And the first thing
I'm going to do

00:09:31.088 --> 00:09:33.345
is create a little
header variable.

00:09:38.535 --> 00:09:39.910
And that's just
going to allow me

00:09:39.910 --> 00:09:42.260
to change the color of
this header down here.

00:09:42.260 --> 00:09:45.660
I can create a My Theme HTML
file and add a custom style

00:09:45.660 --> 00:09:46.450
element to that.

00:09:53.930 --> 00:09:57.770
I can create a My Theme HTML
file and add a custom style

00:09:57.770 --> 00:10:00.160
element to that.

00:10:00.160 --> 00:10:03.980
And inside of here, I'm going
to target the UI message element

00:10:03.980 --> 00:10:07.312
and I'll pass in a
value for that variable.

00:10:07.312 --> 00:10:09.020
And now when I'm ready
to use these guys,

00:10:09.020 --> 00:10:16.140
I can just import the
definition for my UI message

00:10:16.140 --> 00:10:18.350
and import the theme
that I just created.

00:10:22.040 --> 00:10:24.640
And then, I can just drop the
UI message tag on the page

00:10:24.640 --> 00:10:27.270
and that theme is going
to be applied to it.

00:10:27.270 --> 00:10:30.510
So if I hop over to Chrome,
we'll see my message

00:10:30.510 --> 00:10:32.430
and we see that
updated header color.

00:10:32.430 --> 00:10:35.110
Now, let's try to do this
with some custom properties.

00:10:35.110 --> 00:10:37.220
So we'll go back to
our element definition.

00:10:37.220 --> 00:10:41.000
And instead of just
the one variable,

00:10:41.000 --> 00:10:43.080
I'm going to use
the @ apply syntax

00:10:43.080 --> 00:10:45.540
to create custom properties
for container theme, header

00:10:45.540 --> 00:10:48.570
theme, and content theme.

00:10:48.570 --> 00:10:50.770
And then, back in
My Theme HTML file,

00:10:50.770 --> 00:10:56.280
I can replace this one variable
with those custom properties.

00:10:56.280 --> 00:10:57.870
Again, note the semicolons here.

00:10:57.870 --> 00:11:01.520
I always forget
to include those.

00:11:01.520 --> 00:11:03.670
And then, I'll just Paste
in a bunch of CSS styles.

00:11:03.670 --> 00:11:06.270
Again, these are the styles that
I borrowed from Symantec UI,

00:11:06.270 --> 00:11:08.790
but you can see that--
pass in whatever you want,

00:11:08.790 --> 00:11:12.100
box shadow and color and
opacity, what have you.

00:11:12.100 --> 00:11:13.770
All of these are
going to be applied

00:11:13.770 --> 00:11:15.980
and they're going to
override the defaults that

00:11:15.980 --> 00:11:18.440
are in that UI message element.

00:11:18.440 --> 00:11:20.820
So you go back to Chrome
and Refresh the page.

00:11:20.820 --> 00:11:23.810
And now, things are
looking much nicer.

00:11:23.810 --> 00:11:25.940
Now, this is a huge
improvement over where

00:11:25.940 --> 00:11:28.520
we were with theming and
styling in previous versions

00:11:28.520 --> 00:11:29.030
of Polymer.

00:11:29.030 --> 00:11:30.946
And personally, I'm just
really excited to see

00:11:30.946 --> 00:11:32.440
what you all build with it.

00:11:32.440 --> 00:11:33.300
That's it for today.

00:11:33.300 --> 00:11:35.160
Be sure to click little
subscribe button.

00:11:35.160 --> 00:11:36.900
Leave me questions
down in the comments.

00:11:36.900 --> 00:11:38.410
As always, thank you
so much for watching

00:11:38.410 --> 00:11:39.534
and I'll see you next time.

00:11:39.534 --> 00:11:41.580
[VIDEO GAME MUSIC]

00:11:41.580 --> 00:11:43.030
Hey there,
Polycasters, Rob here.

00:11:43.030 --> 00:11:48.360
Q&amp;A time-- a Lucas Ciruzzi
sends in three questions.

00:11:48.360 --> 00:11:50.460
The first is, is the
underscore notation

00:11:50.460 --> 00:11:53.720
mandatory when you're defining
an observer in your properties

00:11:53.720 --> 00:11:54.510
object?

00:11:54.510 --> 00:11:55.840
It's a good question, Lucas.

00:11:55.840 --> 00:11:58.050
The underscore is
actually not mandatory.

00:11:58.050 --> 00:11:59.690
That's just something
that we include

00:11:59.690 --> 00:12:01.261
to signify that a
function is private

00:12:01.261 --> 00:12:03.260
and that we don't want
the outside world calling

00:12:03.260 --> 00:12:03.540
that method.

00:12:03.540 --> 00:12:04.970
But by no means is it required.

00:12:04.970 --> 00:12:07.140
It's just sort of
a stylistic thing.

00:12:07.140 --> 00:12:10.210
Second question-- how would you
implement an attribute change

00:12:10.210 --> 00:12:12.537
listener on a native web
component, so something that

00:12:12.537 --> 00:12:14.495
isn't using Polymer or
anything like that, just

00:12:14.495 --> 00:12:16.170
a vanilla custom element?

00:12:16.170 --> 00:12:18.880
To do that, you can use the
attribute change callback.

00:12:18.880 --> 00:12:21.737
That is a lifecycle callback
that every custom element has.

00:12:21.737 --> 00:12:23.320
And that callback
is going to give you

00:12:23.320 --> 00:12:25.780
three arguments, the
attribute name that changed,

00:12:25.780 --> 00:12:28.050
the old value,
and the new value.

00:12:28.050 --> 00:12:31.440
Last question is, how does
the read-only property

00:12:31.440 --> 00:12:34.490
affect a custom element
when I change that protected

00:12:34.490 --> 00:12:37.147
property from the outside using
something like set attribute?

00:12:37.147 --> 00:12:38.730
In that case, what
you're going to see

00:12:38.730 --> 00:12:41.680
is the DOM element
is going to update,

00:12:41.680 --> 00:12:44.580
but the property inside of it
is going to remain the same.

00:12:44.580 --> 00:12:46.830
So if you have a binding to
that property or something

00:12:46.830 --> 00:12:49.650
like that, that binding is
going to stay exactly as it was.

00:12:49.650 --> 00:12:50.899
So great questions, Lucas.

00:12:50.899 --> 00:12:52.190
Thank you for sending those in.

00:12:52.190 --> 00:12:54.780
If you have questions,
please leave them for us

00:12:54.780 --> 00:12:55.730
down in the comments.

00:12:55.730 --> 00:12:58.540
We'll try to answer them all--
maybe feature you on the show

00:12:58.540 --> 00:12:59.640
and give you some swag.

00:12:59.640 --> 00:13:01.330
As always, thanks
so much for watching

00:13:01.330 --> 00:13:03.480
and I'll see you next time.

