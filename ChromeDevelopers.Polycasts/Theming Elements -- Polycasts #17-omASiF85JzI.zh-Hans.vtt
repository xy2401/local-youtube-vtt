WEBVTT
Kind: captions
Language: zh-Hans

00:00:03.207 --> 00:00:04.510
你好，怎么了？ 

00:00:04.510 --> 00:00:05.400
我是Rob Dodson。 

00:00:05.400 --> 00:00:08.400
欢迎收看Polycast的[I / o]特别节目。 

00:00:08.400 --> 00:00:11.100
今天，我们将讨论格式化元素并设置其外观， 

00:00:11.100 --> 00:00:12.920
及其非凡的发展

00:00:12.920 --> 00:00:14.500
在新版本的Polymer中。 

00:00:14.500 --> 00:00:16.250
我真的认为您会喜欢的， 

00:00:16.250 --> 00:00:17.870
让我们来看看。 

00:00:18.460 --> 00:00:21.360
我先来谈谈聚合物0.5， 

00:00:21.360 --> 00:00:25.060
这是因为许多人偶然发现了这个问题。 

00:00:25.060 --> 00:00:29.320
在Polymer 0.5中，如果您的组件内部格式很少， 

00:00:29.320 --> 00:00:34.680
您的文档中将包含一些最自定义的CSS格式， 

00:00:34.680 --> 00:00:37.290
当您将此组件带到使用polyfill的浏览器时， 

00:00:37.290 --> 00:00:39.560
例如Safari，Internet Explorer， 

00:00:39.560 --> 00:00:41.860
您会看到它，但是在Chrome中， 

00:00:41.860 --> 00:00:43.360
在有DOM阴影的地方， 

00:00:43.360 --> 00:00:44.810
您会看到不同的东西。 

00:00:44.810 --> 00:00:47.570
换句话说，文件中的CSS更个性化， 

00:00:47.570 --> 00:00:49.820
您的组件可能已完全毁坏。 

00:00:49.820 --> 00:00:53.400
为许多初学者造成错误， 

00:00:53.400 --> 00:00:55.630
刚开始学习Polymer的人， 

00:00:55.630 --> 00:00:58.030
他们认为它可能不适用于所有浏览器， 

00:00:58.030 --> 00:00:58.940
这不是问题。 

00:00:58.940 --> 00:01:02.330
装填料非常困难

00:01:02.330 --> 00:01:03.830
 CSS域。 

00:01:03.830 --> 00:01:06.090
让我举一个例子说明一下， 

00:01:06.090 --> 00:01:08.250
这样您就可以理解这个想法。 

00:01:08.250 --> 00:01:11.110
在上一版Polycast中， 

00:01:11.110 --> 00:01:13.555
我们在这里创建了一个快速警报标签， 

00:01:13.555 --> 00:01:15.430
这基本上是一个小通知

00:01:15.430 --> 00:01:17.000
您可以将其发送给用户。 

00:01:17.000 --> 00:01:20.700
在那集中，我想在下面格式化div， 

00:01:20.700 --> 00:01:23.260
所以我使用了这种警报格式。 

00:01:23.450 --> 00:01:26.540
但是，想象一下麦莉，而不是在这里使用品牌团队， 

00:01:26.540 --> 00:01:30.120
如果您自己格式化div元素。 

00:01:30.120 --> 00:01:32.090
这完全有可能。 

00:01:32.090 --> 00:01:34.350
我们将产生相同的示例。 

00:01:34.350 --> 00:01:36.660
它的问题在于它不是很专用。 

00:01:40.150 --> 00:01:42.530
可能会是我的朋友

00:01:42.530 --> 00:01:44.760
在网站上的其他地方工作， 

00:01:44.760 --> 00:01:46.600
完全忽略了我在做什么。 

00:01:46.600 --> 00:01:49.840
它还可能会创建一个警报类， 

00:01:49.840 --> 00:01:52.620
定位页面上的其他一些元素。 

00:01:52.620 --> 00:01:55.740
它可以用一些奇怪的字体格式化

00:01:55.740 --> 00:01:57.710
颜色和背景以及您的所有者。 

00:01:57.710 --> 00:02:00.040
当我第二天早上检查他时？ 

00:02:00.040 --> 00:02:02.460
看一下快速警报标志，我发现它完全毁了。 

00:02:02.460 --> 00:02:03.315
使用Comic Sans字体。 

00:02:03.315 --> 00:02:04.530
看起来糟透了。 

00:02:04.530 --> 00:02:06.810
许多人会看到这一点， 

00:02:06.810 --> 00:02:09.419
他们会认为这些事情不起作用。 

00:02:09.419 --> 00:02:12.960
但问题确实是，您不能应用polyfill 

00:02:12.960 --> 00:02:14.460
在CSS域内。 

00:02:14.460 --> 00:02:16.520
这很棘手。 

00:02:16.520 --> 00:02:21.350
但是团队已经想到了一个比我们刚刚做的更好的选择。 

00:02:21.480 --> 00:02:27.090
很高兴向您介绍新的自定义格式标签。 

00:02:27.270 --> 00:02:30.450
它是格式化元素的一种扩展。 

00:02:30.450 --> 00:02:32.530
如果您记得上一集， 

00:02:32.530 --> 00:02:34.530
我们讨论了扩展类型的所有元素

00:02:34.530 --> 00:02:35.660
以及它们如何工作。 

00:02:35.660 --> 00:02:37.770
自定义格式标记的优点是什么， 

00:02:37.770 --> 00:02:41.400
是它允许您在其中放置CSS文档

00:02:41.400 --> 00:02:44.610
这些格式将无法影响

00:02:44.610 --> 00:02:48.270
或篡改任何组件

00:02:48.270 --> 00:02:51.500
您在包含polyfill的浏览器中的页面上显示的内容。 

00:02:51.500 --> 00:02:54.760
这是格式化的绝佳方法

00:02:54.760 --> 00:02:58.050
在新版本的Polymer范围内限制较少。 

00:02:58.050 --> 00:02:59.910
我认为这真的很棒。 

00:03:00.250 --> 00:03:02.170
现在您知道如何保护物品了

00:03:02.170 --> 00:03:05.125
在polyfill容器浏览器中的文档级格式中， 

00:03:05.125 --> 00:03:06.500
我要显示的下一个命令

00:03:06.500 --> 00:03:09.334
如何设置完整项目集的外观

00:03:09.334 --> 00:03:10.955
使用一些很棒的技术。 

00:03:12.500 --> 00:03:17.480
在过去一年的投入和产出中，提出了一些方法来准备元素的外观

00:03:17.480 --> 00:03:20.670
使用一些阴影穿透选择器

00:03:20.800 --> 00:03:23.726
所以我们有了：错误的阴影元素， 

00:03:23.726 --> 00:03:26.790
这可以让您穿透阴影边界层， 

00:03:26.790 --> 00:03:29.820
在此示例中，他以滑块节点为目标

00:03:29.820 --> 00:03:31.730
在滑块表内部。 

00:03:31.730 --> 00:03:33.530
还有一个深清真寺， 

00:03:33.530 --> 00:03:37.430
这使您可以穿透无限数量的阴影边界层。 

00:03:37.430 --> 00:03:40.530
在这种情况下，我将定位此处的所有墨水效果， 

00:03:40.530 --> 00:03:43.910
通过单击ID。 

00:03:43.910 --> 00:03:46.490
但是关于阴影和/深/存在一些问题。 

00:03:46.490 --> 00:03:49.230
首先，它们完全破坏了包装。 

00:03:49.230 --> 00:03:53.870
在这些示例中，我必须知道每个项目的特定ID的名称

00:03:53.870 --> 00:03:56.190
在我的网络尺寸内，因此可以定位它。 

00:03:56.190 --> 00:04:00.660
这意味着，如果作者移动了这些内容，或者在任何时候更改了名称， 

00:04:00.660 --> 00:04:02.180
我的外表会崩溃。 

00:04:02.180 --> 00:04:05.360
另外，阴影和/深/。破坏一些潜在的性能优势。 

00:04:05.360 --> 00:04:09.380
有这样的想法，我们可以使用DOM阴影来重新计算格式， 

00:04:09.380 --> 00:04:12.350
如果不可能穿透这个阴影。 

00:04:12.360 --> 00:04:14.570
但是这个想法目前不存在。 

00:04:14.570 --> 00:04:17.400
最后，我认为这非常重要， 

00:04:17.400 --> 00:04:21.302
阴影和/深层/工具都不正确。 

00:04:21.302 --> 00:04:22.440
他们可以比作锤子。 

00:04:22.440 --> 00:04:25.150
这个/深沉的/罪恶感主要在这里， 

00:04:25.150 --> 00:04:28.590
由于它具有穿透许多类和对象的能力。 

00:04:28.590 --> 00:04:34.210
因此，团队想到了一种更好的方式来协调和准备外观

00:04:34.210 --> 00:04:35.924
在新版本的Polymer中。 

00:04:35.924 --> 00:04:39.844
这就是我们要探索的CSS变量。 

00:04:40.600 --> 00:04:43.490
因此，让我向您展示一个示例。 

00:04:43.490 --> 00:04:46.180
我在这里创建了一个名为UI消息的项目， 

00:04:46.180 --> 00:04:48.090
这是世袭的。 

00:04:48.090 --> 00:04:51.030
先有一个容器，然后有横幅和内容区域。 

00:04:51.107 --> 00:04:53.120
它还有一些数据连接器

00:04:53.120 --> 00:04:55.360
对于您在底部在此处创建的这些属性。 

00:04:55.360 --> 00:04:57.860
现在，我将隐藏JavaScript定义， 

00:04:57.860 --> 00:05:00.370
因此，我可以专注于顶部的图标。 

00:05:00.370 --> 00:05:02.692
我想添加一些格式。 

00:05:02.692 --> 00:05:05.840
因此，我将目标主机定为内联块格式。 

00:05:05.840 --> 00:05:09.590
我要定位此容器，将其背景设为灰色， 

00:05:09.590 --> 00:05:10.740
有一个小脚注。 

00:05:10.740 --> 00:05:14.830
这会给我一条UI消息

00:05:14.830 --> 00:05:16.140
具有非常遗传的形式。 

00:05:16.140 --> 00:05:20.380
现在，这非常无聊，但可以说有人要在项目中使用它。 

00:05:20.380 --> 00:05:23.561
他要做的第一件事是更改横幅的颜色。 

00:05:24.010 --> 00:05:27.500
为此，请使用CSS变量， 

00:05:27.500 --> 00:05:30.980
我们可以定位标头类

00:05:30.980 --> 00:05:35.160
然后定位color属性，并在此处为其提供变量。 

00:05:35.160 --> 00:05:39.030
所以我会说UI消息标题的颜色值

00:05:39.030 --> 00:05:41.650
您将调整color属性。 

00:05:41.650 --> 00:05:44.950
现在，我知道这句话的语法很奇怪， 

00:05:44.950 --> 00:05:51.040
但这是CSS3变量的标准语法。 

00:05:51.220 --> 00:05:52.950
而关于它的奇妙之处， 

00:05:52.950 --> 00:05:58.110
是因为它允许作者向外界展示焦点。 

00:05:58.110 --> 00:06:04.206
但是，使用此组件的人员不必确切知道在哪里使用该变量。 

00:06:04.206 --> 00:06:06.550
足够知道横幅的颜色有一个变量， 

00:06:06.550 --> 00:06:08.340
适用于某处。 

00:06:08.860 --> 00:06:12.580
因此，我将为此组件创建外观。 

00:06:12.580 --> 00:06:14.890
我有一个自定义格式元素。 

00:06:14.890 --> 00:06:17.414
使用变量时很重要， 

00:06:17.414 --> 00:06:19.580
将它们放在自定义格式元素中， 

00:06:19.580 --> 00:06:21.810
那是因为它让Polymer占有一席之地

00:06:21.810 --> 00:06:25.790
搜索变量的声明。 

00:06:25.980 --> 00:06:27.775
我将定位UI消息标签， 

00:06:27.775 --> 00:06:29.520
我将以该变量为目标

00:06:29.520 --> 00:06:32.320
我将传递白色的价值。 

00:06:32.320 --> 00:06:36.550
这将给我一个白色的抬头。 

00:06:37.970 --> 00:06:41.030
现在，这真的很酷，因为作为商品的消费者， 

00:06:41.030 --> 00:06:43.390
我不在乎什么都不知道。 

00:06:43.390 --> 00:06:45.170
我可以为变量指定一个值， 

00:06:45.170 --> 00:06:48.340
然后作者将随意使用它。 

00:06:48.340 --> 00:06:49.830
但这是条件。 

00:06:49.830 --> 00:06:53.100
如果我们必须为元素中的每个属性定义一个变量， 

00:06:53.100 --> 00:06:55.740
我们最终将拥有成千上万个变量，并且没有足够的时间， 

00:06:55.740 --> 00:06:56.810
我们当然不想。 

00:06:57.446 --> 00:06:59.820
这就是事情变得有趣的地方。 

00:06:59.820 --> 00:07:02.940
 Polymer小组尝试了一种新的外观设置系统， 

00:07:02.940 --> 00:07:06.260
这利用了CSS自定义属性。 

00:07:06.260 --> 00:07:09.420
正如我所说，它仍在试验中，但确实很棒。 

00:07:09.420 --> 00:07:10.970
因此，我想向您展示它的工作原理。 

00:07:13.800 --> 00:07:16.190
现在，令人着迷的事情之一， 

00:07:16.190 --> 00:07:20.120
如果我们一次不能传递一个变量， 

00:07:20.120 --> 00:07:23.420
但是通过一堆完整的属性， 

00:07:23.420 --> 00:07:24.830
在同一时间。 

00:07:24.830 --> 00:07:28.160
 CSS预处理器中与此类似， 

00:07:28.160 --> 00:07:31.029
作为SaaS或更少的称为mixins 

00:07:31.029 --> 00:07:34.230
这是Polymer团队与之合作的东西， 

00:07:34.230 --> 00:07:35.960
使用CSS身体标准， 

00:07:35.960 --> 00:07:38.720
为了将其添加到当前规格中。 

00:07:38.720 --> 00:07:41.380
这个想法是采用自定义属性， 

00:07:41.380 --> 00:07:45.414
这使您可以同时传递一组值。 

00:07:45.414 --> 00:07:46.830
所以让我告诉你它是如何工作的， 

00:07:46.830 --> 00:07:47.820
因为真的很棒。 

00:07:47.820 --> 00:07:51.660
让我们在这里拿起旗帜，在这里代替这个变量， 

00:07:53.120 --> 00:07:57.790
我将创建一些所谓的自定义属性。 

00:07:59.060 --> 00:08:01.160
所以我仍然有某种默认格式， 

00:08:01.160 --> 00:08:03.190
那始于容器。 

00:08:03.190 --> 00:08:05.010
但是现在我将使用这种措辞， 

00:08:05.010 --> 00:08:09.610
告诉他我想应用一个称为UI消息容器外观的自定义属性。 

00:08:09.780 --> 00:08:13.470
我将应用UI消息标题和内容外观。 

00:08:13.700 --> 00:08:18.390
我可以回到主题文件， 

00:08:18.390 --> 00:08:22.630
用这些自定义属性替换此单个变量。 

00:08:22.630 --> 00:08:24.640
请注意，结尾处有分号。 

00:08:24.640 --> 00:08:26.610
这对于句子语法很重要， 

00:08:26.610 --> 00:08:28.460
而且我不常说。 

00:08:28.460 --> 00:08:33.539
现在，我可以传递一大堆属性， 

00:08:33.539 --> 00:08:36.980
我想取消此项的基本格式。 

00:08:37.200 --> 00:08:40.610
现在，您从UI库中借用了这些格式

00:08:40.610 --> 00:08:44.200
向您展示做很多事情的可能性。 

00:08:44.200 --> 00:08:48.100
您可以通过CSS传递任何内容。 

00:08:48.100 --> 00:08:53.250
而这就是将这些无聊的UI消息变成普通的颜色， 

00:08:53.685 --> 00:08:56.910
并将其变成更令人满意的东西。 

00:08:57.250 --> 00:09:00.610
回到矛编辑器，我启动了Bower JSON文件， 

00:09:00.610 --> 00:09:07.260
归类于Polymer 0.9 RC.1 

00:09:07.260 --> 00:09:08.320
作为其中之一。 

00:09:08.320 --> 00:09:11.290
现在，已经记录了几周了， 

00:09:11.290 --> 00:09:19.240
因此，此时您可以安全地将其切换为实际的0.9.0标记。 

00:09:19.240 --> 00:09:21.510
一旦将其放置到位，就可以建立它。 

00:09:21.510 --> 00:09:24.140
将安装最新版本的Polymer。 

00:09:24.140 --> 00:09:26.970
在用户界面消息文件中， 

00:09:26.970 --> 00:09:29.630
这与您在幻灯片中查看的项目相同。 

00:09:29.630 --> 00:09:33.478
我要做的第一件事是创建标头变量。 

00:09:39.125 --> 00:09:42.100
这将允许我在底部更改此横幅的颜色。 

00:09:42.100 --> 00:09:46.310
我可以创建“我的主题” HTML文件，并向其添加自定义格式元素。 

00:09:54.210 --> 00:09:58.570
我可以创建一个主题HTML文件，并向其中添加一个自定义格式元素。 

00:10:00.150 --> 00:10:03.980
在这里，我将定位小部件消息元素， 

00:10:03.980 --> 00:10:07.312
我将值传递给此变量。 

00:10:07.312 --> 00:10:09.020
一旦我准备好使用它们， 

00:10:09.020 --> 00:10:15.200
我可以导入UI消息定义， 

00:10:16.140 --> 00:10:18.350
并导入您创建的主题。 

00:10:21.800 --> 00:10:24.640
然后我可以在页面上标记UI消息， 

00:10:24.640 --> 00:10:27.270
此主题将适用于它。 

00:10:27.270 --> 00:10:30.510
如果我使用Chrome，我们会看到我的消息， 

00:10:30.510 --> 00:10:32.430
我们将看到横幅的颜色变化。 

00:10:32.430 --> 00:10:35.110
现在，让我们尝试使用一些自定义属性来实现。 

00:10:35.110 --> 00:10:37.220
因此，我们将回到元素定义。 

00:10:37.220 --> 00:10:41.000
而不是使用一个变量， 

00:10:41.000 --> 00:10:43.080
我将使用@apply语法

00:10:43.080 --> 00:10:45.540
要为容器外观创建自定义属性， 

00:10:45.540 --> 00:10:47.520
标语外观，内容外观。 

00:10:48.570 --> 00:10:50.770
然后，返回“我的主题” HTML文件。 

00:10:50.770 --> 00:10:54.980
我可以使用这些自定义属性替换该唯一变量。 

00:10:56.280 --> 00:10:57.870
再次注意分号。 

00:10:57.870 --> 00:10:59.960
我总是忘记包括它们。 

00:11:01.520 --> 00:11:03.670
然后，我将粘贴一组CSS格式。 

00:11:03.670 --> 00:11:06.270
我再次从Symantec UI中借用了这些格式， 

00:11:06.270 --> 00:11:08.790
并请注意，您可以传递所需的信息， 

00:11:08.790 --> 00:11:12.100
可以自己拥有阴影，颜色，不透明度等。 

00:11:12.100 --> 00:11:13.770
这将全部应用

00:11:13.770 --> 00:11:16.050
它将覆盖默认设置， 

00:11:16.050 --> 00:11:18.440
包含在UI消息元素中。 

00:11:18.440 --> 00:11:20.820
我们将返回Chrome浏览器并刷新页面。 

00:11:20.820 --> 00:11:23.810
现在事情看起来会更加美丽。 

00:11:23.810 --> 00:11:27.690
在外观和格式方面，这是一个巨大的发展， 

00:11:27.690 --> 00:11:29.270
来自先前版本的Polymer。 

00:11:29.270 --> 00:11:31.986
就个人而言，我很高兴看到它们的构建。 

00:11:32.250 --> 00:11:33.300
这是我今天所有的钱。 

00:11:33.300 --> 00:11:35.160
确保按下订阅按钮。 

00:11:35.160 --> 00:11:36.900
将您的问题放在评论中。 

00:11:36.900 --> 00:11:38.405
和往常一样，感谢收看

00:11:38.405 --> 00:11:40.095
下次见。 

00:11:41.580 --> 00:11:43.030
嗨，我是罗布。 

00:11:43.030 --> 00:11:48.360
提问时间，卢卡斯·西罗兹（Lucas Sirozi）向我发送了三个问题。 

00:11:48.360 --> 00:11:49.250
首先是

00:11:49.250 --> 00:11:54.250
在properties对象中定义观察者时，是否必须标记下划线？ 

00:11:54.250 --> 00:11:55.840
好问题，卢卡斯。 

00:11:55.840 --> 00:11:58.050
下划线不是必须的。 

00:11:58.050 --> 00:12:01.121
这增加了工作的隐私性。 

00:12:01.121 --> 00:12:03.650
我们不希望外界这样称呼。 

00:12:03.650 --> 00:12:04.970
但这不是必需的。 

00:12:04.970 --> 00:12:07.140
而是一种协调。 

00:12:07.140 --> 00:12:08.420
第二个问题

00:12:08.420 --> 00:12:12.537
如何在基本的Web组件中实现属性更改侦听器， 

00:12:12.537 --> 00:12:14.495
如果不使用聚合物， 

00:12:14.495 --> 00:12:16.170
自定义香草元素？ 

00:12:16.170 --> 00:12:18.880
为此，您可以使用属性更改调用。 

00:12:18.880 --> 00:12:21.737
这是每个自定义元素拥有的生命周期调用。 

00:12:21.737 --> 00:12:23.910
这个电话会给你三个总结， 

00:12:23.910 --> 00:12:26.820
更改的属性名称，旧值， 

00:12:26.820 --> 00:12:28.050
和新的价值。 

00:12:28.050 --> 00:12:29.120
最后一个问题

00:12:29.120 --> 00:12:32.950
只读属性如何影响自定义元素， 

00:12:32.950 --> 00:12:37.147
当我使用类似属性的属性来更改外部保护的属性时？ 

00:12:37.147 --> 00:12:38.730
在这种情况下， 

00:12:38.730 --> 00:12:41.680
您会看到正在更新Dom元素， 

00:12:41.680 --> 00:12:44.580
但是财产将保留在其内部。 

00:12:44.580 --> 00:12:46.830
因此，如果您有与此相关的链接， 

00:12:46.830 --> 00:12:49.650
此连接将被接受。 

00:12:49.650 --> 00:12:50.899
很好的问题，卢卡斯。 

00:12:50.899 --> 00:12:52.190
感谢您的发送。 

00:12:52.190 --> 00:12:55.740
如果您有任何疑问，请在下面的评论中留下。 

00:12:55.740 --> 00:12:58.540
我们将尝试回答所有问题，并可能在程序中显示它们

00:12:58.540 --> 00:12:59.640
并给你一些礼物。 

00:12:59.640 --> 00:13:01.330
和往常一样，感谢收看

00:13:01.330 --> 00:13:03.480
下次见。 

