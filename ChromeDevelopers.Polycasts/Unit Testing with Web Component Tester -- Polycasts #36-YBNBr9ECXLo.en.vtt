WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.540
[MUSIC PLAYING]

00:00:04.540 --> 00:00:06.400
Hey there,
Polycasters, Rob here.

00:00:06.400 --> 00:00:08.440
A lot of you have written
in asking if we could

00:00:08.440 --> 00:00:10.254
do a series on unit testing.

00:00:10.254 --> 00:00:11.920
So today on the show,
I want to show you

00:00:11.920 --> 00:00:14.253
how to get Web Component
Tester set up for your project,

00:00:14.253 --> 00:00:15.780
and I'm also going
to demonstrate

00:00:15.780 --> 00:00:17.970
how you can write your
first couple of unit tests.

00:00:17.970 --> 00:00:19.630
Let's check it out.

00:00:19.630 --> 00:00:21.880
To get started, we're going
to need to install the Web

00:00:21.880 --> 00:00:24.580
Component Tester test runner.

00:00:24.580 --> 00:00:26.507
The Polymer chain has
created this test runner

00:00:26.507 --> 00:00:28.090
because we want to
make sure that when

00:00:28.090 --> 00:00:29.548
you're testing your
elements you're

00:00:29.548 --> 00:00:31.340
doing so in a real browser.

00:00:31.340 --> 00:00:34.020
So that's kind of the benefit
of Web Component Tester.

00:00:34.020 --> 00:00:36.210
To get it set up, we
can just run npm install

00:00:36.210 --> 00:00:39.380
-g web-component-tester.

00:00:39.380 --> 00:00:42.640
And that's going to go out
and install all things.

00:00:42.640 --> 00:00:45.476
And then we need an
element to actually test.

00:00:45.476 --> 00:00:46.850
And instead of
having to set this

00:00:46.850 --> 00:00:48.800
up myself, what
I'm going to do is

00:00:48.800 --> 00:00:50.880
go ahead and clone a
project that we've created

00:00:50.880 --> 00:00:52.390
called seed-element.

00:00:52.390 --> 00:00:54.980
Now seed-element is just
sort of a boilerplate element

00:00:54.980 --> 00:00:59.147
which you can use as a
starting point, if you will,

00:00:59.147 --> 00:01:00.980
for any sort of element
that you're writing.

00:01:00.980 --> 00:01:02.896
And the nice thing about
it is that it already

00:01:02.896 --> 00:01:06.310
has a test directory with
some dummy unit tests set up.

00:01:06.310 --> 00:01:08.700
So once we've got
that pulled down,

00:01:08.700 --> 00:01:10.510
we can just run the
Web Component Tester

00:01:10.510 --> 00:01:12.900
command, which is just wct.

00:01:12.900 --> 00:01:15.520
And that's going to try and
kick off our test runner.

00:01:15.520 --> 00:01:18.841
Now if this is your first time
running Web Component Tester,

00:01:18.841 --> 00:01:20.840
there is a possibility
that you'll see something

00:01:20.840 --> 00:01:22.830
like this, where
all your tests fail,

00:01:22.830 --> 00:01:26.830
and it says that Selenium's
Safari driver was not

00:01:26.830 --> 00:01:28.000
working just then.

00:01:28.000 --> 00:01:30.400
So what we're using
under the hood

00:01:30.400 --> 00:01:31.900
to actually control
all the browsers

00:01:31.900 --> 00:01:33.680
is this program called Selenium.

00:01:33.680 --> 00:01:35.211
For Safari, you've
got to install

00:01:35.211 --> 00:01:37.460
an extra piece of software
to make sure that it works.

00:01:37.460 --> 00:01:40.043
And you can see that there's a
little URL inside of this error

00:01:40.043 --> 00:01:41.110
message.

00:01:41.110 --> 00:01:44.940
So if we go and open up
that URL, up here at the top

00:01:44.940 --> 00:01:48.630
there is a link to a piece of
software that we can download.

00:01:48.630 --> 00:01:50.225
It's just a little JAR file.

00:01:50.225 --> 00:01:52.130
So it's a like a
little Java thing.

00:01:52.130 --> 00:01:54.820
And it tells you then
to unzip the file.

00:01:54.820 --> 00:01:56.730
And if you're not
familiar with JARs,

00:01:56.730 --> 00:01:58.995
they're actually secretly
just like ZIP files.

00:01:58.995 --> 00:02:00.370
So once you've
got it downloaded,

00:02:00.370 --> 00:02:05.340
you can just change the
extension from jar to .zip.

00:02:05.340 --> 00:02:08.430
And then double click on it,
and that will let you unzip it.

00:02:08.430 --> 00:02:10.910
And then inside of here,
inside of this directory,

00:02:10.910 --> 00:02:13.090
we're going to be looking
for this thing called

00:02:13.090 --> 00:02:14.090
SafariDriver.safariextz.

00:02:16.212 --> 00:02:18.420
So we'll navigate through
a few of these directories.

00:02:18.420 --> 00:02:23.320
It's buried in here somewhere.

00:02:23.320 --> 00:02:25.990
And there we go.

00:02:25.990 --> 00:02:27.740
All right, so we're
going to open this up.

00:02:27.740 --> 00:02:28.790
Double click on it.

00:02:28.790 --> 00:02:30.998
And that will actually boot
up Safari, and it'll say,

00:02:30.998 --> 00:02:33.470
hey do you want to install
this WebDriver extension?

00:02:33.470 --> 00:02:34.590
Heck yeah.

00:02:34.590 --> 00:02:39.070
And now we should be able to
control Safari using Selenium.

00:02:39.070 --> 00:02:42.190
So make sure you close Safari
and everything like that.

00:02:42.190 --> 00:02:45.791
And then we can go back to
our terminal and try again.

00:02:45.791 --> 00:02:47.540
We'll run bower install
to make sure we've

00:02:47.540 --> 00:02:48.790
got all our components set up.

00:02:48.790 --> 00:02:49.400
That's good.

00:02:49.400 --> 00:02:51.090
And then we'll run
Web Component Tester.

00:02:54.820 --> 00:02:58.340
And what you should see,
after a moment or two,

00:02:58.340 --> 00:03:00.740
is yes, green tests.

00:03:00.740 --> 00:03:03.890
So all the tests that came with
seed-element are now passing.

00:03:03.890 --> 00:03:06.290
So let's go take a
look at those tests.

00:03:06.290 --> 00:03:08.600
Over inside of seed-element,
in the test directory,

00:03:08.600 --> 00:03:12.740
there are two files,
index.html and basic-test.html.

00:03:12.740 --> 00:03:16.200
index.html is where we can
create our suite of tests,

00:03:16.200 --> 00:03:18.010
so all of the
individual tests that we

00:03:18.010 --> 00:03:20.097
want to run in one big group.

00:03:20.097 --> 00:03:21.680
And to do that, what
we're going to do

00:03:21.680 --> 00:03:23.510
is we're going to
set up an HTML file.

00:03:23.510 --> 00:03:25.560
We're going to include
webcomponents-lite.js.

00:03:25.560 --> 00:03:28.170
We're going to include
this browser.js file up

00:03:28.170 --> 00:03:29.380
here in the head as well.

00:03:29.380 --> 00:03:31.505
That is the JavaScript
that's being used to control

00:03:31.505 --> 00:03:32.582
the different browsers.

00:03:32.582 --> 00:03:34.290
And then we've got a
script tag down here

00:03:34.290 --> 00:03:37.540
which calls the Web Component
Tester loadSuites method.

00:03:37.540 --> 00:03:39.820
And there we can pass
in an array of files

00:03:39.820 --> 00:03:40.900
that we want to kick off.

00:03:40.900 --> 00:03:42.970
And each one of those
files is a document

00:03:42.970 --> 00:03:45.040
that contains some unit tests.

00:03:45.040 --> 00:03:47.019
So we've got basic-test.html.

00:03:47.019 --> 00:03:49.060
And then there's another
copy of basic-test.html,

00:03:49.060 --> 00:03:52.364
but this time with a little
query string for dom=shadow.

00:03:52.364 --> 00:03:53.780
And what we're
doing here is we're

00:03:53.780 --> 00:03:57.770
saying that we want to test
it first under polyfill.

00:03:57.770 --> 00:04:01.420
And then the second time we
run basic-test, we want to turn

00:04:01.420 --> 00:04:03.354
and native shadow DOM on.

00:04:03.354 --> 00:04:05.770
And so for browsers that do
have support for native shadow

00:04:05.770 --> 00:04:08.830
DOM like Chrome and Opera,
that's going to kick that off.

00:04:08.830 --> 00:04:10.640
And that we can verify
with the polyfill

00:04:10.640 --> 00:04:12.640
and the native shadow DOM
version of our element

00:04:12.640 --> 00:04:13.840
is working.

00:04:13.840 --> 00:04:17.180
So let's take a look
at basic-test.html.

00:04:17.180 --> 00:04:20.000
So inside basic-test.html, up
at the top we're also going

00:04:20.000 --> 00:04:22.340
to include webcomponents-lite.js
and browser.js.

00:04:22.340 --> 00:04:24.930
And that's because we could
just open this file standalone

00:04:24.930 --> 00:04:26.840
by itself if we wanted to.

00:04:26.840 --> 00:04:29.994
And then we're going
to import seed-element.

00:04:29.994 --> 00:04:31.660
It's how seed-element
is already set up.

00:04:31.660 --> 00:04:33.326
But when you switch
to your own element,

00:04:33.326 --> 00:04:35.180
you can replace this
with your own markup.

00:04:35.180 --> 00:04:37.763
Below that you'll see that the
actual seed-element tag is just

00:04:37.763 --> 00:04:39.230
sitting there in the body.

00:04:39.230 --> 00:04:41.570
And then underneath that,
we have a script tag

00:04:41.570 --> 00:04:44.021
which contains our unit tests.

00:04:44.021 --> 00:04:45.520
So we're selecting
the seed-element,

00:04:45.520 --> 00:04:47.390
we're grabbing a
reference to it.

00:04:47.390 --> 00:04:50.250
And then we have
this suite method.

00:04:50.250 --> 00:04:53.240
And that's how we kind of create
like a context for our tests.

00:04:53.240 --> 00:04:55.460
So we're saying hey, we're going
to create a bucket full of unit

00:04:55.460 --> 00:04:56.168
tests right here.

00:04:56.168 --> 00:04:58.850
And you can see there's a bunch
of test methods inside of here.

00:04:58.850 --> 00:05:01.497
They're all asserting
different things.

00:05:01.497 --> 00:05:03.330
So what I want to do
is take this first test

00:05:03.330 --> 00:05:05.870
up here that says the author's
name is Dimitri Glazkov.

00:05:05.870 --> 00:05:07.620
And I'm going to change
it so this it says

00:05:07.620 --> 00:05:11.100
the author's name is Dimitri
with a bunch of Zs at the end

00:05:11.100 --> 00:05:11.910
Glazkov.

00:05:11.910 --> 00:05:15.640
And this should break thing.

00:05:15.640 --> 00:05:18.440
So let's see.

00:05:18.440 --> 00:05:20.475
Let's go ahead and
we'll give that a shot.

00:05:20.475 --> 00:05:24.690
I'll switch over to our console
and run Web Component Tester.

00:05:24.690 --> 00:05:27.880
And yes, we do you see
a whole bunch of errors.

00:05:27.880 --> 00:05:30.760
It was expecting the name
to be Dmitri Glazkov.

00:05:30.760 --> 00:05:34.420
Instead it got Dimitri
with a bunch of Zs Glazkov.

00:05:34.420 --> 00:05:36.330
So we can go back,
and we can just

00:05:36.330 --> 00:05:38.840
delete those Zs, run
it again, and now we

00:05:38.840 --> 00:05:41.880
can verify basically that
yes, these tests are working.

00:05:41.880 --> 00:05:44.030
When we modify
them, things break.

00:05:44.030 --> 00:05:47.064
So everything is happening
as we expect it to.

00:05:47.064 --> 00:05:48.980
So the seed-element is
great, but there's also

00:05:48.980 --> 00:05:50.380
a lot going on inside of here.

00:05:50.380 --> 00:05:52.588
And the next thing I want
to do is just kind of clean

00:05:52.588 --> 00:05:54.240
it all out, create
my own element.

00:05:54.240 --> 00:05:56.656
And that way I can demonstrate
how you can write your unit

00:05:56.656 --> 00:05:57.920
test from scratch.

00:05:57.920 --> 00:06:00.510
So now that I've kind of
cleaned things up a little bit,

00:06:00.510 --> 00:06:02.260
I deleted a lot of the
stuff I was already

00:06:02.260 --> 00:06:03.220
inside of seed-element.

00:06:03.220 --> 00:06:04.910
It's useful as an
example, but I want

00:06:04.910 --> 00:06:06.920
to create my own element here.

00:06:06.920 --> 00:06:09.170
So I changed the
name to wait-button.

00:06:09.170 --> 00:06:12.245
And the element that I've
now morphed seed-element into

00:06:12.245 --> 00:06:13.970
is basically is just
this little button.

00:06:13.970 --> 00:06:16.870
And when you click on it,
it displays a paper spinner.

00:06:16.870 --> 00:06:18.050
Pretty simple.

00:06:18.050 --> 00:06:20.520
So that's the behavior
that we're going to test.

00:06:20.520 --> 00:06:22.357
So looking at my
elements definition,

00:06:22.357 --> 00:06:23.940
you can see inside
the template I just

00:06:23.940 --> 00:06:26.130
have a paper spinner
whose active state is

00:06:26.130 --> 00:06:27.995
bound to an isWaiting variable.

00:06:27.995 --> 00:06:31.860
And then I've got a button which
has a on-tap listener which

00:06:31.860 --> 00:06:35.210
is listening, which is going
to execute a wait method.

00:06:35.210 --> 00:06:36.960
So let's go down, look
at our source here.

00:06:36.960 --> 00:06:39.630
And you can see that isWaiting
is just a regular old Boolean

00:06:39.630 --> 00:06:41.824
that starts off as false.

00:06:41.824 --> 00:06:43.740
And the wait method is
going to do two things.

00:06:43.740 --> 00:06:46.770
It's going to fire an event
called waiting that passes

00:06:46.770 --> 00:06:48.440
along a little bit of data.

00:06:48.440 --> 00:06:50.759
And it's also going to
set isWaiting to true.

00:06:50.759 --> 00:06:52.800
And that's going to cause
our spinner to display.

00:06:52.800 --> 00:06:54.440
So these are the two
behaviors that we're going

00:06:54.440 --> 00:06:55.990
to be testing in our unit test.

00:06:55.990 --> 00:06:58.170
And I realize this is not
traditional test-driven

00:06:58.170 --> 00:07:00.160
development where you're
write the test first

00:07:00.160 --> 00:07:02.550
and then you implement
the behavior.

00:07:02.550 --> 00:07:03.864
That is one way to do things.

00:07:03.864 --> 00:07:06.030
But this is just the way
that I happen to do things.

00:07:06.030 --> 00:07:08.125
Today, either one
is totally valid.

00:07:08.125 --> 00:07:09.750
I wrote my behavior
first, and then I'm

00:07:09.750 --> 00:07:11.550
going to write
some tests for it.

00:07:11.550 --> 00:07:15.500
So over in my basic-test.html
file, you'll notice that,

00:07:15.500 --> 00:07:18.040
instead of just putting the
element in the document here,

00:07:18.040 --> 00:07:20.890
I've actually put it inside of
this thing called test-fixture.

00:07:20.890 --> 00:07:23.660
And test-fixture is
a really neat feature

00:07:23.660 --> 00:07:24.992
of Web Component Tester.

00:07:24.992 --> 00:07:26.950
And what it does is it
takes whatever is inside

00:07:26.950 --> 00:07:29.000
of its template,
and it stamps out

00:07:29.000 --> 00:07:33.250
a brand new instance of that
content for each unit test.

00:07:33.250 --> 00:07:35.300
And so what this
does is it ensures

00:07:35.300 --> 00:07:38.630
that each unit test gets
a completely clean slate

00:07:38.630 --> 00:07:40.130
version of the element.

00:07:40.130 --> 00:07:42.610
And that way, if a previous
unit test had maybe

00:07:42.610 --> 00:07:44.610
modified the
element in some way,

00:07:44.610 --> 00:07:47.360
you're not accidentally sharing
state between your tests

00:07:47.360 --> 00:07:49.620
and perhaps confusing
them and causing things

00:07:49.620 --> 00:07:52.140
to appear broken when
really, they shouldn't be.

00:07:52.140 --> 00:07:55.450
So this way, we're just creating
a brand new fixture each time.

00:07:55.450 --> 00:07:58.970
And each test gets its
own instance of the tag.

00:07:58.970 --> 00:08:00.660
Now to use the
test-fixture, I'm going

00:08:00.660 --> 00:08:02.930
to create a reference
for my element.

00:08:02.930 --> 00:08:05.000
And then I'm going to
call this setup method.

00:08:05.000 --> 00:08:07.890
And setup is going to run
before each unit test.

00:08:07.890 --> 00:08:12.782
And so inside of setup, I'm just
going to say that myEl equals,

00:08:12.782 --> 00:08:15.115
and I'll call fixture method
to grab all the content out

00:08:15.115 --> 00:08:15.870
of that template.

00:08:15.870 --> 00:08:16.370
Cool.

00:08:16.370 --> 00:08:20.376
So now I've got it stamping
out a brand instance of my tag.

00:08:20.376 --> 00:08:23.000
Next thing I want to do is just
write a really basic unit test.

00:08:23.000 --> 00:08:24.680
So I'll call the test method.

00:08:24.680 --> 00:08:26.480
And in this test,
I'm going to say

00:08:26.480 --> 00:08:29.890
that when the user clicks on the
button inside of the element,

00:08:29.890 --> 00:08:33.760
we want to see if
isWaiting gets set to true.

00:08:33.760 --> 00:08:36.657
Now I need a way to poke
around inside of this element

00:08:36.657 --> 00:08:38.990
to actually click on that
button because it lives inside

00:08:38.990 --> 00:08:41.120
of the local DOM, or the
shadow DOM, however you

00:08:41.120 --> 00:08:42.510
want to refer to it.

00:08:42.510 --> 00:08:45.870
So I'm going to use
Polymer's API for the DOM.

00:08:45.870 --> 00:08:48.925
I'm going to grab my
elements dot root property.

00:08:48.925 --> 00:08:52.020
So that'll actually let me get
access to that shadow root.

00:08:52.020 --> 00:08:54.380
And then I can query selector
around inside of there

00:08:54.380 --> 00:08:55.325
and call click.

00:08:55.325 --> 00:08:57.200
So I'm kind of poking
around inside of there,

00:08:57.200 --> 00:08:58.430
but I know what I'm
doing in this case.

00:08:58.430 --> 00:08:59.600
I really need to
click that button.

00:08:59.600 --> 00:09:01.550
And I can't quite do
that from the outside.

00:09:01.550 --> 00:09:04.060
So I got to pierce the
shadow DOM to do that.

00:09:04.060 --> 00:09:06.760
Now once that's done, I'm going
to assert that the isWaiting

00:09:06.760 --> 00:09:08.780
property matches true.

00:09:08.780 --> 00:09:11.060
So so far, so good.

00:09:11.060 --> 00:09:12.550
This looks correct.

00:09:12.550 --> 00:09:15.190
Let's switch over to Web
Component Tester, fire it up.

00:09:15.190 --> 00:09:20.024
After a second, yes, we see
that our tests are passing.

00:09:20.024 --> 00:09:22.190
And you'll notice that it
says two tests are passed.

00:09:22.190 --> 00:09:26.960
So both the polyfill browser and
the native shadow DOM version

00:09:26.960 --> 00:09:27.810
were passing.

00:09:27.810 --> 00:09:28.730
Cool.

00:09:28.730 --> 00:09:30.540
All now, that was
a synchronous test.

00:09:30.540 --> 00:09:32.950
Let's try an asynchronous test.

00:09:32.950 --> 00:09:35.670
So sometimes you'll
have some action that

00:09:35.670 --> 00:09:37.200
takes a certain amount of time.

00:09:37.200 --> 00:09:38.940
It could be just
the next frame, it

00:09:38.940 --> 00:09:41.540
could be a thousand
milliseconds, whatever.

00:09:41.540 --> 00:09:43.650
And in those cases,
you need a way

00:09:43.650 --> 00:09:46.067
to signal to the testing
library-- which in this case,

00:09:46.067 --> 00:09:48.400
Web Component Tester under
the hood is just using Mocha.

00:09:48.400 --> 00:09:51.350
So you need a way to
signal to Mocha hey,

00:09:51.350 --> 00:09:53.450
my test is finally
finished, and now

00:09:53.450 --> 00:09:55.030
you can move on
to the next test.

00:09:55.030 --> 00:09:56.940
And to do that, Mocha
actually gives you

00:09:56.940 --> 00:10:00.230
this little method called done,
which you can call whenever

00:10:00.230 --> 00:10:02.040
you've got an async test.

00:10:02.040 --> 00:10:05.605
So what I'm going to do is
instead of this next test,

00:10:05.605 --> 00:10:07.230
I'm going to be
listening for the event

00:10:07.230 --> 00:10:08.710
that my element fires.

00:10:08.710 --> 00:10:11.910
And you'll see that in the
function to kick off my test,

00:10:11.910 --> 00:10:13.940
I've passed a done argument.

00:10:13.940 --> 00:10:16.370
And that's actually a little
signal to Mocha that hey,

00:10:16.370 --> 00:10:18.380
this is going to
be an async test.

00:10:18.380 --> 00:10:20.320
And then inside
of that test, I've

00:10:20.320 --> 00:10:22.610
just added an event
listener to my element.

00:10:22.610 --> 00:10:24.950
I'm listening for
its waiting event.

00:10:24.950 --> 00:10:28.020
And then I'm asserting that
the detail message that

00:10:28.020 --> 00:10:31.210
comes from the equals
Time for some meditation.

00:10:31.210 --> 00:10:32.970
And after all of
that is finished,

00:10:32.970 --> 00:10:35.050
I finally just call done.

00:10:35.050 --> 00:10:37.990
And that will allow the system
to wrap up the unit test

00:10:37.990 --> 00:10:40.510
and move on to the next
one if there is one.

00:10:40.510 --> 00:10:42.010
And just like the
previous test, I'm

00:10:42.010 --> 00:10:45.140
going to use Polymer's
DOM API to actually click

00:10:45.140 --> 00:10:47.440
the button that's
inside of my element.

00:10:47.440 --> 00:10:49.290
All right, let's
give this one a shot.

00:10:49.290 --> 00:10:50.760
So run Web Component Tester.

00:10:50.760 --> 00:10:54.450
And it fires up
all our browsers.

00:10:54.450 --> 00:10:58.036
And yes, we're done.

00:10:58.036 --> 00:10:59.970
All right, so now you've
got your first couple

00:10:59.970 --> 00:11:01.050
of tests passing.

00:11:01.050 --> 00:11:04.200
But there's a lot more that I
want to cover on this topic.

00:11:04.200 --> 00:11:06.200
So leave me some
comments down below.

00:11:06.200 --> 00:11:08.370
Let me know what you
want me to cover next.

00:11:08.370 --> 00:11:09.870
Also, if you have
questions, you can

00:11:09.870 --> 00:11:13.280
ping me on a social network of
your choosing at #AskPolymer.

00:11:13.280 --> 00:11:15.030
As always, thank you
so much for watching.

00:11:15.030 --> 00:11:16.190
And I'll see you next time.

00:11:16.190 --> 00:11:20.440
[MUSIC PLAYING]

