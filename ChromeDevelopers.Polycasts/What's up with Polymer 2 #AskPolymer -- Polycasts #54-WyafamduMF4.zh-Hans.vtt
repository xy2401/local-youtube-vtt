WEBVTT
Kind: captions
Language: zh-Hans

00:00:04.338 --> 00:00:05.990
 ROB DODSON：嘿，伙计们，Rob在这里。 

00:00:05.990 --> 00:00:07.390
欢迎回到表演。 

00:00:07.390 --> 00:00:09.510
自从我们做了其中一个以来已经有一段时间了， 

00:00:09.510 --> 00:00:11.570
但我认为今天会是个好时机

00:00:11.570 --> 00:00:14.750
进行另一集的Ask Polymer。 

00:00:14.750 --> 00:00:17.230
所以我去了Twitter，我问乡亲们

00:00:17.230 --> 00:00:18.900
如果他们对我有任何疑问， 

00:00:18.900 --> 00:00:21.108
这是一些最重要的问题

00:00:21.108 --> 00:00:23.510
实际观众是您的。 

00:00:23.510 --> 00:00:26.250
所以第一个问题来自米乔，他问， 

00:00:26.250 --> 00:00:28.820
我如何自动使应用程序抽屉面板

00:00:28.820 --> 00:00:33.260
当我单击应用程序中的链接时关闭？ 

00:00:33.260 --> 00:00:34.710
所以这是一个很好的问题。 

00:00:34.710 --> 00:00:36.450
我认为我们实际上可能曾经这样做过

00:00:36.450 --> 00:00:38.234
为您使用旧的聚合物入门套件， 

00:00:38.234 --> 00:00:40.650
并且我们现在不在新的Polymer Starter Kit中进行此操作。 

00:00:40.650 --> 00:00:43.910
但基本上您可以做的是实际上可以连线

00:00:43.910 --> 00:00:46.240
与打开的属性的绑定， 

00:00:46.240 --> 00:00:49.320
或抽屉面板的open属性， 

00:00:49.320 --> 00:00:52.910
然后您可以每次切换该值

00:00:52.910 --> 00:00:54.094
路由器更改页面。 

00:00:54.094 --> 00:00:56.260
所以当我只是说出来时这可能没有意义

00:00:56.260 --> 00:00:57.718
这样，我该怎么做

00:00:57.718 --> 00:01:00.560
我将在说明中删除一个链接

00:01:00.560 --> 00:01:02.879
有一个例子，所以你可以按照它。 

00:01:02.879 --> 00:01:04.920
而且，我想我们可能会添加这种行为

00:01:04.920 --> 00:01:07.500
到我们刚推出的聚合物入门工具包。 

00:01:07.500 --> 00:01:09.570
也许像点发布一样

00:01:09.570 --> 00:01:12.320
很快，当我们将其添加到您中时，您无需将其连接起来

00:01:12.320 --> 00:01:13.020
你自己

00:01:13.020 --> 00:01:14.603
因此，谢谢您提出这个问题，Micho。 

00:01:14.603 --> 00:01:18.660
好的，这个问题来自埃里克·比德尔曼（Eric Bidelman），他问， 

00:01:18.660 --> 00:01:20.210
我听到Polymer 2没电了。 

00:01:20.210 --> 00:01:21.750
那是怎么回事？ 

00:01:21.750 --> 00:01:23.720
是的，也许你们当中有些人已经看到了

00:01:23.720 --> 00:01:26.670
在Twitter和Polymer博客上， 

00:01:26.670 --> 00:01:28.170
我们最近在推特上说我们有

00:01:28.170 --> 00:01:31.570
 Polymer 2.0的预览分支现在可用。 

00:01:31.570 --> 00:01:33.600
您可以在gitHub上找到它， 

00:01:33.600 --> 00:01:35.720
我还将包括一个链接， 

00:01:35.720 --> 00:01:37.170
在演出笔记中。 

00:01:37.170 --> 00:01:40.460
因此，聚合物2的主要思想是

00:01:40.460 --> 00:01:43.610
希望将人们吸引到新的网络V1版本上

00:01:43.610 --> 00:01:44.600
组件标准。 

00:01:44.600 --> 00:01:47.410
因此，Custom Elements V1和Shadow DOM v1。 

00:01:47.410 --> 00:01:49.010
当前版本的Polymer，1.x， 

00:01:49.010 --> 00:01:52.360
基于旧的V0实现。 

00:01:52.360 --> 00:01:55.740
 Chrome，Opera和其他一些浏览器附带的软件

00:01:55.740 --> 00:01:59.000
试用了这些版本的标准， 

00:01:59.000 --> 00:02:01.664
但他们永远不会成为本地人

00:02:01.664 --> 00:02:02.580
随处可见。 

00:02:02.580 --> 00:02:04.880
相反，经过一些修改， 

00:02:04.880 --> 00:02:07.320
浏览器决定进行一些更改， 

00:02:07.320 --> 00:02:09.128
这些更改均在V1规范中进行。 

00:02:09.128 --> 00:02:10.669
这就是要运送的东西

00:02:10.669 --> 00:02:11.918
在所有不同的浏览器中。 

00:02:11.918 --> 00:02:14.960
我相信Safari最近刚刚发布了Shadow DOM V1， 

00:02:14.960 --> 00:02:16.677
它将很快在Chrome中推出。 

00:02:16.677 --> 00:02:18.510
而且由于发生了一些重大变化， 

00:02:18.510 --> 00:02:20.920
我们也需要迁移Polymer。 

00:02:20.920 --> 00:02:22.420
这里要注意的重要事项

00:02:22.420 --> 00:02:26.810
是Web组件规格的重大更改， 

00:02:26.810 --> 00:02:30.020
这些可能现在已经定格了。 

00:02:30.020 --> 00:02:32.900
因此我们不必担心V2突然出现

00:02:32.900 --> 00:02:36.790
 Web组件规格之类的东西无处不在。 

00:02:36.790 --> 00:02:38.345
好事是，向前迈进， 

00:02:38.345 --> 00:02:40.220
 Web组件应向后兼容。 

00:02:40.220 --> 00:02:42.303
是的，现在有一些重大变化， 

00:02:42.303 --> 00:02:45.210
但希望疼痛最小。 

00:02:45.210 --> 00:02:47.070
我写下了Polymer 2的一些内容

00:02:47.070 --> 00:02:48.680
我真的很兴奋， 

00:02:48.680 --> 00:02:49.580
想告诉你所有。 

00:02:49.580 --> 00:02:51.380
我只是认为超棒的东西。 

00:02:51.380 --> 00:02:54.410
除了过渡到新标准之外， 

00:02:54.410 --> 00:02:56.970
我们将提供向后兼容

00:02:56.970 --> 00:02:57.470
层。 

00:02:57.470 --> 00:03:00.790
因此，如果您有一堆Polymer 1元素， 

00:03:00.790 --> 00:03:04.530
并且您想尝试将其迁移到Polymer 2 

00:03:04.530 --> 00:03:07.860
我们为您提供了旧的Polymer构造函数。 

00:03:07.860 --> 00:03:11.160
因此，您可以认真地做一些小的更改， 

00:03:11.160 --> 00:03:13.204
瞧，您已经有了Polymer 2元素。 

00:03:13.204 --> 00:03:14.870
但是我们现在正在做的另一件事

00:03:14.870 --> 00:03:17.990
我们正在努力支持ES6类。 

00:03:17.990 --> 00:03:20.530
所以这是很多人真正想要的。 

00:03:20.530 --> 00:03:22.980
现在，默认和标准

00:03:22.980 --> 00:03:24.870
鼓励的方式来制造聚合物2 

00:03:24.870 --> 00:03:27.660
元素将实际上是从类继承的。 

00:03:27.660 --> 00:03:29.670
然后，您就拥有了所有的美感

00:03:29.670 --> 00:03:32.240
在这里使用ES6。 

00:03:32.240 --> 00:03:34.170
我们正在摆脱Polymer.DOM之类的东西， 

00:03:34.170 --> 00:03:36.140
这总是让人们感到困惑， 

00:03:36.140 --> 00:03:37.960
整个可疑的DOM事物。 

00:03:37.960 --> 00:03:41.470
取而代之的是，我们将发布新的，改进的Shadow 

00:03:41.470 --> 00:03:42.270
 DOM polyfill。 

00:03:42.270 --> 00:03:45.350
我们将不再谈论本地DOM和可疑DOM。 

00:03:45.350 --> 00:03:47.690
所有这些毫无意义的随机术语。 

00:03:47.690 --> 00:03:49.940
相反，我们只是说，嘿，这是Shadow DOM， 

00:03:49.940 --> 00:03:53.132
我们有一个新的polyfill，既好又快。 

00:03:53.132 --> 00:03:55.340
而且我们使数据绑定系统更加容易

00:03:55.340 --> 00:03:56.214
也要推理。 

00:03:56.214 --> 00:03:59.360
因此，如果您遇到了要更改对象的问题

00:03:59.360 --> 00:04:02.000
在数组内部，或更改对象的子属性

00:04:02.000 --> 00:04:04.160
而且事情不会更新，我们

00:04:04.160 --> 00:04:06.270
应该修复聚合物2中的那些

00:04:06.270 --> 00:04:08.340
使这一点更加直接。 

00:04:08.340 --> 00:04:10.970
因此，这是一个高级概述。 

00:04:10.970 --> 00:04:14.912
同样，我将包含2.0预览分支的链接

00:04:14.912 --> 00:04:15.870
在演出笔记中。 

00:04:15.870 --> 00:04:17.369
因此，您可以自己检查一下， 

00:04:17.369 --> 00:04:20.044
阅读自述文件，然后进行测试。 

00:04:20.044 --> 00:04:22.210
我真的很想听听大家的想法， 

00:04:22.210 --> 00:04:24.146
所以请在下面留下一些评论

00:04:24.146 --> 00:04:25.270
您对此有何想法。 

00:04:25.270 --> 00:04:27.690
因此，谢谢您埃里克的问题。 

00:04:27.690 --> 00:04:28.870
对，下一个问题。 

00:04:28.870 --> 00:04:35.120
 Sam Saccone问，我听说您是柯基犬，这是怎么回事？ 

00:04:35.120 --> 00:04:36.170
是的，是的。 

00:04:36.170 --> 00:04:40.730
我的精神动物实际上是小狗。 

00:04:40.730 --> 00:04:42.220
谢谢你提出这个问题，山姆。 

00:04:42.220 --> 00:04:43.636
好吧，我们的下一个问题来了

00:04:43.636 --> 00:04:45.750
杰里问，我该如何实施

00:04:45.750 --> 00:04:48.690
使用Polymer CLI的ES6语法？ 

00:04:48.690 --> 00:04:54.260
所以今天您可以做的是使用自定义版本

00:04:54.260 --> 00:04:57.581
我想，也许是两集之前我们展示过的发电机。 

00:04:57.581 --> 00:04:59.330
我将在演出笔记中包含一个链接

00:04:59.330 --> 00:05:00.920
该特定情节。 

00:05:00.920 --> 00:05:03.340
那实际上是什么

00:05:03.340 --> 00:05:06.430
为您提供了Polymer CLI构建中的一些逃生功能。 

00:05:06.430 --> 00:05:09.540
它允许您实际使用同一节点

00:05:09.540 --> 00:05:12.120
为Polymer构建提供动力的模块， 

00:05:12.120 --> 00:05:14.930
但它也可以让您了解其生命周期

00:05:14.930 --> 00:05:16.380
并添加您自己的任务。 

00:05:16.380 --> 00:05:19.810
大量的任务之一可能是像babel这样的事情。 

00:05:19.810 --> 00:05:24.220
因此，您可以使用HTML导入来编写所有元素。 

00:05:24.220 --> 00:05:27.080
 Polymer版本实际上将拆分JavaScript 

00:05:27.080 --> 00:05:28.440
进入自己的流。 

00:05:28.440 --> 00:05:30.660
然后，您将其通过通天塔， 

00:05:30.660 --> 00:05:33.650
然后在最后为您重新组合。 

00:05:33.650 --> 00:05:35.980
这就是您今天可以使用的选项。 

00:05:35.980 --> 00:05:37.990
但是，正如我之前提到的， 

00:05:37.990 --> 00:05:42.190
即将在Polymer 2中推出完整的ES6支持。 

00:05:42.190 --> 00:05:46.399
因此，如果您能够等待Polymer 2时间， 

00:05:46.399 --> 00:05:48.190
我们可能在那里有个更好的故事。 

00:05:48.190 --> 00:05:49.660
它可能会更容易使用。 

00:05:49.660 --> 00:05:52.201
因此，如果我今天这样做，我实际上可能会坚持

00:05:52.201 --> 00:05:56.930
仅使用当前的Polymer 1语法，然后批量移动

00:05:56.930 --> 00:05:59.967
当聚合物2推出时，转到ES6。 

00:05:59.967 --> 00:06:01.300
希望这能回答你的问题。 

00:06:01.300 --> 00:06:02.260
谢谢杰里。 

00:06:02.260 --> 00:06:04.550
好吧，下一个问题来自斯蒂芬，他说： 

00:06:04.550 --> 00:06:08.170
我仍然对如何在第三方中加载感到困惑

00:06:08.170 --> 00:06:10.850
我的元素中有JavaScript。 

00:06:10.850 --> 00:06:12.670
所以这是一个问题。 

00:06:12.670 --> 00:06:15.110
很多人在做什么，我已经看到了两种方法。 

00:06:15.110 --> 00:06:17.291
您可以说一种方法是，嘿， 

00:06:17.291 --> 00:06:18.790
我依靠这个图书馆，而你已经

00:06:18.790 --> 00:06:20.990
必须包含该库的脚本标签

00:06:20.990 --> 00:06:23.500
在导入元素之前。 

00:06:23.500 --> 00:06:26.220
我实际上更喜欢做的是脚本

00:06:26.220 --> 00:06:28.700
标记我所依赖的任何依赖项， 

00:06:28.700 --> 00:06:32.020
将其放入自己的HTML导入中， 

00:06:32.020 --> 00:06:35.150
然后让我的元素导入该文件。 

00:06:35.150 --> 00:06:37.680
好东西是你的元素

00:06:37.680 --> 00:06:39.760
现在明确了他们的依赖性， 

00:06:39.760 --> 00:06:43.440
因为该链接标记位于其定义的顶部

00:06:43.440 --> 00:06:44.300
文件。 

00:06:44.300 --> 00:06:48.820
而且，HTML导入将删除多个请求的重复数据

00:06:48.820 --> 00:06:50.250
到相同的资源。 

00:06:50.250 --> 00:06:52.610
因此，如果您拥有五个要素

00:06:52.610 --> 00:06:54.370
试图导入同一件事，这是

00:06:54.370 --> 00:06:56.630
实际上只会被加载一次。 

00:06:56.630 --> 00:06:58.840
这就是我真正建议使用的方法， 

00:06:58.840 --> 00:07:01.131
那就是我们在某些元素中使用的那个

00:07:01.131 --> 00:07:02.870
就像标记的元素一样。 

00:07:02.870 --> 00:07:04.860
是的，希望这种方法对您有用。 

00:07:04.860 --> 00:07:06.280
而且，我认为将来我们可能

00:07:06.280 --> 00:07:07.655
也将探索事物

00:07:07.655 --> 00:07:11.032
就像我们如何使用ES模块加载器一样

00:07:11.032 --> 00:07:11.990
或类似的东西。 

00:07:11.990 --> 00:07:15.600
这绝对是在Polymer 2领域的可能性。 

00:07:15.600 --> 00:07:18.910
因此，我们可能很快也会有一个改进的故事。 

00:07:18.910 --> 00:07:19.520
所以。 

00:07:19.520 --> 00:07:21.460
是的，谢谢斯蒂芬的问题。 

00:07:21.460 --> 00:07:23.210
好吧，下一个问题来自托马斯

00:07:23.210 --> 00:07:25.680
谁问过，一旦所有Web组件功能广泛

00:07:25.680 --> 00:07:27.900
并在所有主流浏览器中得到正确的支持， 

00:07:27.900 --> 00:07:30.490
 Polymer的工作完成了吗？ 

00:07:30.490 --> 00:07:32.830
是的，一点也不。 

00:07:32.830 --> 00:07:36.410
绝对是填充Web组件的工作

00:07:36.410 --> 00:07:38.670
在这一点上完成了，这很棒。 

00:07:38.670 --> 00:07:40.900
我们想摆脱polyfills，我们

00:07:40.900 --> 00:07:42.900
想要摆脱任何类型的矛盾

00:07:42.900 --> 00:07:46.410
他们介绍了这些内容，并且正在做所有本地工作。 

00:07:46.410 --> 00:07:49.860
但是Web组件标准本质上是低水平的， 

00:07:49.860 --> 00:07:51.550
那是设计使然。 

00:07:51.550 --> 00:07:55.050
它们应该为开发人员提供最大的灵活性。 

00:07:55.050 --> 00:07:58.000
但是，这也意味着它可能需要一些代码

00:07:58.000 --> 00:08:00.509
创建自己的元素，标记出Shadow DOM， 

00:08:00.509 --> 00:08:02.800
将您的模板放入其中，诸如此类。 

00:08:02.800 --> 00:08:05.850
因此，Polymer可能总是会以某种方式出现

00:08:05.850 --> 00:08:08.590
提供这种帮助者支持，对吗？ 

00:08:08.590 --> 00:08:11.247
有时我们称其为糖化本机网络

00:08:11.247 --> 00:08:12.080
组件标准。 

00:08:12.080 --> 00:08:14.880
只是使您实质上更有效率。 

00:08:14.880 --> 00:08:18.520
因此，这一直是图书馆的发展方向。 

00:08:18.520 --> 00:08:20.930
我们希望这些填料可以蒸发掉， 

00:08:20.930 --> 00:08:23.480
然后就剩下了这个非常好的清洁助手

00:08:23.480 --> 00:08:25.880
库，使您在工作时更加高效

00:08:25.880 --> 00:08:27.020
建筑构件。 

00:08:27.020 --> 00:08:29.064
谢谢托马斯，这个问题。 

00:08:29.064 --> 00:08:30.480
好吧，我们的下一个问题来了

00:08:30.480 --> 00:08:31.976
来自Twitter上名为GBX的用户， 

00:08:31.976 --> 00:08:33.559
谁说，网络组件应该如何

00:08:33.559 --> 00:08:37.580
编写以使应用程序覆盖其默认语言环境？ 

00:08:37.580 --> 00:08:41.080
所以我个人不是本地化专家

00:08:41.080 --> 00:08:45.050
或国际化，我什至不能说。 

00:08:45.050 --> 00:08:46.970
 L10n，i18n。 

00:08:46.970 --> 00:08:49.370
我们走了，那是解决这个问题的更简单方法。 

00:08:49.370 --> 00:08:51.450
我的队友Monica Dinculescu实际上

00:08:51.450 --> 00:08:53.340
编写一些行为来帮助这些行为。 

00:08:53.340 --> 00:08:55.740
所以你会感兴趣的那个

00:08:55.740 --> 00:08:57.640
称为应用程序本地化行为。 

00:08:57.640 --> 00:08:59.460
基本上，您定义JSON文件

00:08:59.460 --> 00:09:03.690
充满了根据语言环境的不同本地化字符串， 

00:09:03.690 --> 00:09:05.640
或在语言环境之外输入的内容。 

00:09:05.640 --> 00:09:08.580
然后根据用户的语言环境， 

00:09:08.580 --> 00:09:11.450
然后，在您的元素中，它使用一台小型计算机

00:09:11.450 --> 00:09:13.500
绑定以匹配任何文本

00:09:13.500 --> 00:09:16.640
您正在使用该JSON文件并使用正确的本地化版本

00:09:16.640 --> 00:09:17.580
版。 

00:09:17.580 --> 00:09:19.520
所以我们的国际化图书馆

00:09:19.520 --> 00:09:21.710
以非常相似的方式工作。 

00:09:21.710 --> 00:09:23.870
要注意的一件事是，这些

00:09:23.870 --> 00:09:26.700
取决于国际化API。 

00:09:26.700 --> 00:09:29.260
因此，如果您使用的浏览器不支持该API， 

00:09:29.260 --> 00:09:31.960
您还需要添加一些polyfill。 

00:09:31.960 --> 00:09:35.800
但这是从回购链接到应用程序本地化的

00:09:35.800 --> 00:09:39.046
和i18n行为。 

00:09:39.046 --> 00:09:41.170
我将在展示笔记中包含指向这些链接的链接

00:09:41.170 --> 00:09:43.045
所以你不必听我说

00:09:43.045 --> 00:09:44.060
这些话了。 

00:09:44.060 --> 00:09:46.685
但是，是的，给那些机会，看看是否对您的应用有所帮助。 

00:09:46.685 --> 00:09:48.530
因此，感谢您提出这个问题，GBX。 

00:09:48.530 --> 00:09:51.800
好吧，下一个问题来自弗拉迪斯拉夫，他说， 

00:09:51.800 --> 00:09:53.780
 2.0发生了什么-聚合物2.0， 

00:09:53.780 --> 00:09:56.400
我假设-和TypeScript？ 

00:09:56.400 --> 00:10:01.700
因此，目前没有计划迁移到TypeScript 

00:10:01.700 --> 00:10:03.390
或类似的东西。 

00:10:03.390 --> 00:10:05.972
但是，我们确实有许多Polymer小组成员

00:10:05.972 --> 00:10:07.430
谁真的很喜欢TypeScript， 

00:10:07.430 --> 00:10:08.470
我们肯定要确保

00:10:08.470 --> 00:10:10.130
我们会更好地支持它。 

00:10:10.130 --> 00:10:13.330
所以我想，如果您今天尝试这样做， 

00:10:13.330 --> 00:10:16.400
您也许可以使用类似生成器自定义版本的工具

00:10:16.400 --> 00:10:17.950
我之前提到的-我们

00:10:17.950 --> 00:10:21.350
将链接到显示注释下-添加TypeScript 

00:10:21.350 --> 00:10:24.160
编译到您的gulp构建过程， 

00:10:24.160 --> 00:10:25.340
或类似的东西。 

00:10:25.340 --> 00:10:28.280
对于2.0，我不太确定确切的游戏是什么

00:10:28.280 --> 00:10:32.050
计划将会是，除了我几乎可以确定我们

00:10:32.050 --> 00:10:34.710
会有更好的TypeScript故事， 

00:10:34.710 --> 00:10:36.389
围绕它的某种改进的故事。 

00:10:36.389 --> 00:10:38.430
因为我们有很多喜欢它的团队成员， 

00:10:38.430 --> 00:10:41.460
我们有很多喜欢使用TypeScript的Google员工。 

00:10:41.460 --> 00:10:44.020
我绝对想亲自探索一下，所以我绝对

00:10:44.020 --> 00:10:46.420
我们可能还会在那儿谈论更多。 

00:10:46.420 --> 00:10:48.150
现在还有些早

00:10:48.150 --> 00:10:50.600
让Polymer 2.0确切了解该策略是什么

00:10:50.600 --> 00:10:51.442
将。 

00:10:51.442 --> 00:10:53.025
但是，如果您对TypeScript感兴趣

00:10:53.025 --> 00:10:54.400
您对Polymer感兴趣， 

00:10:54.400 --> 00:10:56.580
请继续关注，因为我确定我们

00:10:56.580 --> 00:10:58.790
将会为您带来更多激动人心的东西

00:10:58.790 --> 00:11:00.020
将来在该主题上。 

00:11:00.020 --> 00:11:02.430
因此，感谢弗拉迪斯拉夫发送来的。 

00:11:02.430 --> 00:11:03.940
最后一个问题来自伊藤

00:11:03.940 --> 00:11:06.720
谁说，我如何分享信息

00:11:06.720 --> 00:11:08.800
当我在两页之间切换时， 

00:11:08.800 --> 00:11:11.560
以及进行交流的最佳实践是什么

00:11:11.560 --> 00:11:13.250
元素之间？ 

00:11:13.250 --> 00:11:15.980
所以我实际上将以相反的顺序回答

00:11:15.980 --> 00:11:17.730
因为我认为第二个答案有帮助

00:11:17.730 --> 00:11:19.370
回答第一个问题。 

00:11:19.370 --> 00:11:22.020
当您在元素之间进行交流时， 

00:11:22.020 --> 00:11:24.360
您实际上可能不想拥有

00:11:24.360 --> 00:11:27.220
兄弟姐妹互相交谈或类似的话。 

00:11:27.220 --> 00:11:29.805
我们通常会阻止这种情况， 

00:11:29.805 --> 00:11:33.360
主要是因为这意味着元素A具有

00:11:33.360 --> 00:11:36.850
耦合并了解元素B。 

00:11:36.850 --> 00:11:40.230
我们有点不希望这种耦合。 

00:11:40.230 --> 00:11:42.230
相反，我们建议找出

00:11:42.230 --> 00:11:45.380
这两个元素之间的共同父母

00:11:45.380 --> 00:11:48.460
让您的元素变得既简单又愚蠢

00:11:48.460 --> 00:11:51.740
尽可能地将事件分发出去

00:11:51.740 --> 00:11:53.000
给那个共同的父母。 

00:11:53.000 --> 00:11:56.500
就像，嘿，我被点击了，或类似的东西。 

00:11:56.500 --> 00:12:00.100
然后，共同的父母可以充当协调者， 

00:12:00.100 --> 00:12:03.372
说，哦，我听说这里的那个孩子被点击了， 

00:12:03.372 --> 00:12:05.830
我知道那意味着需要采取一些行动

00:12:05.830 --> 00:12:07.422
和孩子B在这里。 

00:12:07.422 --> 00:12:09.505
这是为了保留元素A和元素

00:12:09.505 --> 00:12:12.330
 B非常简单，并且可重复使用。 

00:12:12.330 --> 00:12:14.230
然后您所有的业务逻辑都会得到

00:12:14.230 --> 00:12:16.430
向上移动到那个更高阶的元素。 

00:12:16.430 --> 00:12:19.630
我们通常将其称为中介组件， 

00:12:19.630 --> 00:12:22.070
我将在底部提供一个指向队友的链接

00:12:22.070 --> 00:12:23.580
凯文·沙夫的讲话。 

00:12:23.580 --> 00:12:25.570
我认为这是来自Polymer Summit 

00:12:25.570 --> 00:12:27.610
大概是两年前或一年前， 

00:12:27.610 --> 00:12:29.310
他谈到这种模式的地方

00:12:29.310 --> 00:12:32.750
以及我们倾向于在大多数应用中使用它的方式。 

00:12:32.750 --> 00:12:36.040
因此，我们建议您在页面上进行交流。 

00:12:36.040 --> 00:12:37.710
因此，第一个问题是， 

00:12:37.710 --> 00:12:40.470
从第1页开始时如何共享信息

00:12:40.470 --> 00:12:41.920
到第2页？ 

00:12:41.920 --> 00:12:44.480
好吧，在那种情况下，我想如果您有信息

00:12:44.480 --> 00:12:46.720
需要属于多个页面， 

00:12:46.720 --> 00:12:49.540
对我来说，属于较高等级之一的东西

00:12:49.540 --> 00:12:50.340
组件。 

00:12:50.340 --> 00:12:53.330
就像所有页面上的主人一样， 

00:12:53.330 --> 00:12:54.020
甚至。 

00:12:54.020 --> 00:12:57.310
它只是将其绑定到子页面中。 

00:12:57.310 --> 00:13:00.150
您可以拥有更高层次的组件

00:13:00.150 --> 00:13:02.860
聆听一些较低级别的变化

00:13:02.860 --> 00:13:05.090
组件，并更改其状态， 

00:13:05.090 --> 00:13:07.160
然后将其向下推。 

00:13:07.160 --> 00:13:10.190
但是那样又可以简化事情

00:13:10.190 --> 00:13:14.040
这样您就有两个相关的业务逻辑

00:13:14.040 --> 00:13:15.560
事物，为此的业务逻辑

00:13:15.560 --> 00:13:16.930
会活得更高，他们

00:13:16.930 --> 00:13:18.596
不必尝试互相交谈

00:13:18.596 --> 00:13:20.420
并找出彼此的工作方式。 

00:13:20.420 --> 00:13:22.169
是的，我希望可以回答这个问题。 

00:13:22.169 --> 00:13:24.420
我知道这有点像一个广泛的抽象答案， 

00:13:24.420 --> 00:13:26.545
但这通常是我们推荐的模式。 

00:13:26.545 --> 00:13:28.260
一定要看看凯文的演讲， 

00:13:28.260 --> 00:13:30.520
涵盖了更多细节。 

00:13:30.520 --> 00:13:33.110
所以，谢谢Ido提出的这个好问题。 

00:13:33.110 --> 00:13:35.240
大约涵盖了今天。 

00:13:35.240 --> 00:13:37.480
如果您自己对我有疑问， 

00:13:37.480 --> 00:13:39.690
您可以在下面的评论中将其保留下来， 

00:13:39.690 --> 00:13:42.720
或者您可以在您选择的社交网络上ping我

00:13:42.720 --> 00:13:44.440
 #AskPolymer。 

00:13:44.440 --> 00:13:46.280
和往常一样，非常感谢您的收看， 

00:13:46.280 --> 00:13:48.273
下次再见。 

00:13:48.273 --> 00:13:49.690
准备好了？ 

00:13:49.690 --> 00:13:51.680
本土化。 

00:13:51.680 --> 00:13:53.600
国际化。 

00:13:53.600 --> 00:13:56.770
我只是一起抨击，就像国际化一样。 

00:13:56.770 --> 00:13:57.730
足够近了。 

00:13:57.730 --> 00:13:59.440
这就是为什么您要缩短它的原因。 

00:13:59.440 --> 00:14:01.290
您写的是i18n。 

