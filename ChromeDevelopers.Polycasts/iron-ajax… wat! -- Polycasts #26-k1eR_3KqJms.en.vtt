WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.262
[MUSIC PLAYING]

00:00:03.262 --> 00:00:04.220
Hey there, Polycasters.

00:00:04.220 --> 00:00:05.180
Rob here.

00:00:05.180 --> 00:00:07.520
Many of you have written
in and asked for an episode

00:00:07.520 --> 00:00:09.302
on the Iron Ajax element.

00:00:09.302 --> 00:00:11.260
There's a lot of questions
around this element,

00:00:11.260 --> 00:00:14.410
like when to use it and is
it bad to mix your behavior

00:00:14.410 --> 00:00:15.806
with markup like that.

00:00:15.806 --> 00:00:18.180
But in fact, Iron Ajax is one
of the most useful elements

00:00:18.180 --> 00:00:20.010
you can have in your toolbox.

00:00:20.010 --> 00:00:21.850
However, its utility
only becomes apparent

00:00:21.850 --> 00:00:25.510
when you combine it
with data bindings.

00:00:25.510 --> 00:00:27.620
Anyway, today on
Polycast, I'm going

00:00:27.620 --> 00:00:29.660
to show you the power
of working with Ajax

00:00:29.660 --> 00:00:31.490
using nothing but HTML.

00:00:31.490 --> 00:00:33.020
Let's check it out.

00:00:33.020 --> 00:00:33.520
OK.

00:00:33.520 --> 00:00:35.436
So today we're going to
create an element that

00:00:35.436 --> 00:00:37.340
fetches GitHub issues,
and we're going

00:00:37.340 --> 00:00:39.510
to use Iron Ajax to do that.

00:00:39.510 --> 00:00:42.284
Now, I'm also going to use the
Yeoman generator to scaffold

00:00:42.284 --> 00:00:44.450
out my element, but if you
don't want to use Yeoman,

00:00:44.450 --> 00:00:46.640
you could use the seed-element
project, which I will

00:00:46.640 --> 00:00:48.820
link to down in the show notes.

00:00:48.820 --> 00:00:50.910
That will do the exact
same thing as Yeoman.

00:00:50.910 --> 00:00:53.210
Yeoman just goes a
step further and it

00:00:53.210 --> 00:00:56.210
renames all the files for me,
which is pretty convenient.

00:00:56.210 --> 00:00:58.830
So from my command line, I'll
type yo polymer:l-- or sorry,

00:00:58.830 --> 00:01:04.010
yo polymer:seed gh-issues
to generate my element.

00:01:04.010 --> 00:01:06.260
And once that's generated,
I can run polyserve,

00:01:06.260 --> 00:01:07.770
which is our little
local server,

00:01:07.770 --> 00:01:10.590
and that'll let me preview the
element as I'm developing it.

00:01:10.590 --> 00:01:13.560
And you'll see here that
it generates this URL

00:01:13.560 --> 00:01:15.780
that I can use to
actually go look

00:01:15.780 --> 00:01:17.600
at my element's documentation.

00:01:17.600 --> 00:01:20.260
So using the
seed-element, it actually

00:01:20.260 --> 00:01:22.510
generates docs for us,
which is pretty cool.

00:01:22.510 --> 00:01:25.360
It also has this demo link
here, which we can click on,

00:01:25.360 --> 00:01:26.990
and that is going
to show us sort

00:01:26.990 --> 00:01:29.900
of a demo of the boilerplate
element that it has created.

00:01:29.900 --> 00:01:32.590
So this is all just stuff that
it has sort of stubbed out,

00:01:32.590 --> 00:01:35.340
and we're going to replace
all this in just a second.

00:01:35.340 --> 00:01:36.840
Now, I mentioned,
we're going to use

00:01:36.840 --> 00:01:39.370
the GitHub API to fetch issues.

00:01:39.370 --> 00:01:41.730
So going and looking
at the API docs,

00:01:41.730 --> 00:01:45.374
I can go down to
the Issues section,

00:01:45.374 --> 00:01:47.540
and you'll see here that
working with the GitHub API

00:01:47.540 --> 00:01:48.450
is pretty simple.

00:01:48.450 --> 00:01:51.450
We just use get request
to fetch the issues

00:01:51.450 --> 00:01:53.510
for either-- like,
all the issues that

00:01:53.510 --> 00:01:57.422
are owned by a user or all the
issues in a given organization.

00:01:57.422 --> 00:01:58.880
In our case, what
we're going to do

00:01:58.880 --> 00:02:00.550
is we're going to
fetch all the issues

00:02:00.550 --> 00:02:02.850
for a particular repository.

00:02:02.850 --> 00:02:07.190
So to do that, we're going
to need to install Iron Ajax.

00:02:07.190 --> 00:02:08.440
We'll go back to our terminal.

00:02:08.440 --> 00:02:10.130
We'll split the panes.

00:02:10.130 --> 00:02:13.610
And we will bower install Iron
Ajax, passing the save flag

00:02:13.610 --> 00:02:17.940
so it gets written to our
elements bower JSON file.

00:02:17.940 --> 00:02:20.680
Now that is all
good, we can go look

00:02:20.680 --> 00:02:23.680
at the element that was
stubbed out for us by Yeoman.

00:02:23.680 --> 00:02:25.449
So this is gh-issues.html.

00:02:25.449 --> 00:02:26.990
And if you browse
around here, you'll

00:02:26.990 --> 00:02:30.040
see there's a lot of boilerplate
markup that it's stubbed out,

00:02:30.040 --> 00:02:33.224
just as an example for what
an element could look like.

00:02:33.224 --> 00:02:34.890
We'll ignore that for
a second, and just

00:02:34.890 --> 00:02:36.620
go ahead and import
Iron Ajax, as we

00:02:36.620 --> 00:02:38.620
know we're going to use
that, and I'll update

00:02:38.620 --> 00:02:39.285
my element's description.

00:02:39.285 --> 00:02:41.909
So I'm going to say that this is
an element for fetching issues

00:02:41.909 --> 00:02:44.800
from GitHub, and then I
can go through and delete

00:02:44.800 --> 00:02:47.930
all of this extra markup
that's inside of here.

00:02:47.930 --> 00:02:50.280
So again, I don't
really need any of this.

00:02:50.280 --> 00:02:52.347
It's just sort of
example markup in case

00:02:52.347 --> 00:02:53.930
you haven't written
an element before.

00:02:53.930 --> 00:02:56.040
It's good to read through
just to see what's possible,

00:02:56.040 --> 00:02:57.880
but I want to strip it
down to where I just

00:02:57.880 --> 00:03:00.900
have this sort of
very bare skeleton.

00:03:00.900 --> 00:03:04.160
Next I'm going to
drop the iron-ajax tag

00:03:04.160 --> 00:03:06.656
inside of my template, and
I'm going to configure it

00:03:06.656 --> 00:03:07.780
with a few attributes here.

00:03:07.780 --> 00:03:11.180
So this auto attribute
tells Iron Ajax to just

00:03:11.180 --> 00:03:12.370
automatically fetch data.

00:03:12.370 --> 00:03:14.490
Any time it has a
valid URL, it's just

00:03:14.490 --> 00:03:16.520
going to go and get some data.

00:03:16.520 --> 00:03:18.750
This url attribute,
as the name implies,

00:03:18.750 --> 00:03:21.077
is going to be where we
go and get our data from.

00:03:21.077 --> 00:03:22.660
When that data comes
back, we're going

00:03:22.660 --> 00:03:24.076
to need to handle
it as something.

00:03:24.076 --> 00:03:26.040
So here we're saying
handle it as JSON.

00:03:26.040 --> 00:03:29.230
I believe it also supports
XML, and you could also

00:03:29.230 --> 00:03:32.580
tell it to fetch
things as a document.

00:03:32.580 --> 00:03:35.134
So for instance, if you
were fetching an HTML file,

00:03:35.134 --> 00:03:36.800
you could say, hey,
when that comes back

00:03:36.800 --> 00:03:38.870
I want it treated as a document.

00:03:38.870 --> 00:03:40.600
And then it also fires events.

00:03:40.600 --> 00:03:43.600
So there's a response event
which we could listen to,

00:03:43.600 --> 00:03:45.760
and we could have a handler
that works with that.

00:03:45.760 --> 00:03:47.090
But instead of writing
a bunch of JavaScript

00:03:47.090 --> 00:03:49.040
to handle the response
that comes back,

00:03:49.040 --> 00:03:51.170
let's just go ahead
and give it a URL.

00:03:51.170 --> 00:03:54.640
So I'm going to tell it to look
at robdodson/chart-elements.

00:03:54.640 --> 00:03:58.440
That's the repo where
we'll pull our data from.

00:03:58.440 --> 00:04:01.790
And I'm going to tell it
to instead of handling that

00:04:01.790 --> 00:04:04.950
in JavaScript, well just
take the data that came back,

00:04:04.950 --> 00:04:07.689
which is represented as
this last-response property,

00:04:07.689 --> 00:04:09.730
and we'll create a scope
variable for that called

00:04:09.730 --> 00:04:10.890
response.

00:04:10.890 --> 00:04:12.810
Now, let's think about
what's happened here

00:04:12.810 --> 00:04:14.030
for just a second.

00:04:14.030 --> 00:04:18.290
I've got this one tag, and it
basically represents GitHub.

00:04:18.290 --> 00:04:21.640
This is like a representation
of the GitHub API.

00:04:21.640 --> 00:04:23.180
I've configured
it by saying this

00:04:23.180 --> 00:04:25.140
is where I'd like
you to get data from,

00:04:25.140 --> 00:04:29.210
and then I've basically used
a data binding to create sort

00:04:29.210 --> 00:04:32.140
of a declarative data provider.

00:04:32.140 --> 00:04:34.090
So I don't really
know the mechanics

00:04:34.090 --> 00:04:37.115
of how it is going and getting
my data, nor do I care.

00:04:37.115 --> 00:04:39.740
Like, the implementation of how
it's actually going and getting

00:04:39.740 --> 00:04:41.500
the data I don't
actually care about.

00:04:41.500 --> 00:04:44.360
Instead, all I care about
is that it goes here

00:04:44.360 --> 00:04:46.290
and it gives me this data.

00:04:46.290 --> 00:04:49.430
And with this data
binding, because it's

00:04:49.430 --> 00:04:51.810
nice and declarative,
I can now hook onto it

00:04:51.810 --> 00:04:54.900
with different dom nodes,
and they will stay in sync

00:04:54.900 --> 00:04:55.960
with the data.

00:04:55.960 --> 00:04:59.980
So this has removed the need for
me to write a lot of JavaScript

00:04:59.980 --> 00:05:01.040
in my element.

00:05:01.040 --> 00:05:03.410
Normally, I'd have to
handle that response,

00:05:03.410 --> 00:05:06.300
pick it apart, go find the
different dom nodes that I want

00:05:06.300 --> 00:05:08.190
to update with the new data.

00:05:08.190 --> 00:05:09.880
Here we're just
saying, hey, I've

00:05:09.880 --> 00:05:11.660
got this nice declarative
data provider,

00:05:11.660 --> 00:05:13.835
and when that data comes
back, all of my dom

00:05:13.835 --> 00:05:17.210
nodes that bind to it will
stay nice and in sync.

00:05:17.210 --> 00:05:19.430
So pretty cool approach there.

00:05:19.430 --> 00:05:21.420
This is a representation
of the response

00:05:21.420 --> 00:05:23.128
that we're going to
get back from GitHub.

00:05:23.128 --> 00:05:24.830
You can see it's an
array of objects.

00:05:24.830 --> 00:05:27.200
And the properties
that I care about

00:05:27.200 --> 00:05:31.130
are this one right
here called html_url.

00:05:31.130 --> 00:05:33.940
So this is the actual
URL to the GitHub issue.

00:05:33.940 --> 00:05:36.080
And then I also care
about the title.

00:05:36.080 --> 00:05:40.170
So this is what will display
in our list of issues.

00:05:40.170 --> 00:05:42.780
So let's go back to
our template here.

00:05:42.780 --> 00:05:46.480
And because we've got this nice
declarative data provider now,

00:05:46.480 --> 00:05:50.220
let's generate some dom
for it to link up to.

00:05:50.220 --> 00:05:55.050
So I'll create a template
with a dom-repeat template,

00:05:55.050 --> 00:05:58.570
and I'm going to give
it an items attribute,

00:05:58.570 --> 00:06:00.440
and we're going to link
these two together.

00:06:00.440 --> 00:06:01.480
So you can see
this little linkage

00:06:01.480 --> 00:06:02.480
that we've created here.

00:06:02.480 --> 00:06:07.080
We're saying the items should
be linked to that response.

00:06:07.080 --> 00:06:10.000
So now that these are
combined, this template

00:06:10.000 --> 00:06:12.510
is going to try to iterate
over that collection,

00:06:12.510 --> 00:06:14.920
that array of objects.

00:06:14.920 --> 00:06:21.160
So we can drop a div with
an anchor inside of here,

00:06:21.160 --> 00:06:23.300
and we can bind to--
for every single item,

00:06:23.300 --> 00:06:26.677
we can bind to its
html_url and its title.

00:06:26.677 --> 00:06:28.260
So now we're just
generating this sort

00:06:28.260 --> 00:06:30.592
of list of anchor tags
based on that response.

00:06:30.592 --> 00:06:32.300
And this is pretty
cool because, again, I

00:06:32.300 --> 00:06:34.380
didn't have to write a bunch of
JavaScript to handle all this.

00:06:34.380 --> 00:06:36.130
I just created this
little linkage here.

00:06:36.130 --> 00:06:38.340
I've got this nice little
declarative data provider.

00:06:38.340 --> 00:06:39.930
And I'm just
generating dom based

00:06:39.930 --> 00:06:42.440
on the data that it returns.

00:06:42.440 --> 00:06:45.050
So let's go look
at the demo file

00:06:45.050 --> 00:06:47.364
that I showed you earlier as
part of our documentation.

00:06:47.364 --> 00:06:49.530
We're going to clean this
up a little bit so that we

00:06:49.530 --> 00:06:51.070
can preview our tag.

00:06:51.070 --> 00:06:53.417
Again, Yeoman generates
a bunch of boilerplate.

00:06:53.417 --> 00:06:55.250
And it's cool if you
haven't seen it before,

00:06:55.250 --> 00:06:57.208
but in our case, we're
just going to delete it.

00:06:57.208 --> 00:06:58.639
We'll drop in the gh-issues tag.

00:06:58.639 --> 00:07:00.180
I'll blow this up
a little bit so you

00:07:00.180 --> 00:07:01.486
can kind of see a bit better.

00:07:01.486 --> 00:07:03.610
And, yeah, let's just
preview this thing in Chrome.

00:07:03.610 --> 00:07:04.860
So we'll click on
our Demo button,

00:07:04.860 --> 00:07:06.651
and we'll see these
are the two issues that

00:07:06.651 --> 00:07:07.820
come back from that repo.

00:07:07.820 --> 00:07:09.780
I'll click on one and
open it in a new tab,

00:07:09.780 --> 00:07:13.160
just to verify that it came
from Rob Dodson chart elements.

00:07:13.160 --> 00:07:13.730
So, OK.

00:07:13.730 --> 00:07:14.230
Yeah.

00:07:14.230 --> 00:07:16.600
We've got our very
basic element working.

00:07:16.600 --> 00:07:20.550
It's fetching data from
the GitHub API, And.

00:07:20.550 --> 00:07:23.059
So far we haven't really written
any JavaScript whatsoever.

00:07:23.059 --> 00:07:24.100
We're just fetching data.

00:07:24.100 --> 00:07:26.280
We're generating dom
based on that data.

00:07:26.280 --> 00:07:28.310
And that's kind of a
cool flow, but let's see

00:07:28.310 --> 00:07:30.810
if we can push this a little
bit further and make this thing

00:07:30.810 --> 00:07:32.460
a bit more configurable.

00:07:32.460 --> 00:07:34.850
So if we go back and we look
at our element's definition,

00:07:34.850 --> 00:07:36.990
you can see that I've
hard coded the path here,

00:07:36.990 --> 00:07:39.250
which is kind of
a bummer, right?

00:07:39.250 --> 00:07:41.650
I want anybody to be
able to use this tag.

00:07:41.650 --> 00:07:45.110
And so what I can do is
I can take the owner,

00:07:45.110 --> 00:07:46.690
and I can take the
repo name, and I

00:07:46.690 --> 00:07:50.250
can make these configurable
properties of this element.

00:07:50.250 --> 00:07:54.590
So let's go down to the
properties object and stub

00:07:54.590 --> 00:07:55.540
out two properties.

00:07:55.540 --> 00:07:59.430
One called owner, and we're
going to say that by default it

00:07:59.430 --> 00:08:00.820
has the value of Polymer.

00:08:00.820 --> 00:08:02.279
Sure, why not?

00:08:02.279 --> 00:08:04.320
And we're also going to
make it two-way bindable.

00:08:04.320 --> 00:08:07.330
So we'll say it fires change
events when it changes.

00:08:07.330 --> 00:08:09.450
So we're saying
it's notify:true.

00:08:09.450 --> 00:08:12.170
And we'll also create
another property called repo.

00:08:12.170 --> 00:08:14.380
We'll also set that to
Polymer, and this will also

00:08:14.380 --> 00:08:15.660
be two-way bindable.

00:08:15.660 --> 00:08:18.965
And lastly, I'm going to create
a computed property called url,

00:08:18.965 --> 00:08:20.340
and what it's
going to do is it's

00:08:20.340 --> 00:08:22.640
going to compute the
values of owner and repo.

00:08:22.640 --> 00:08:24.990
It's going to-- So if
either of these changes,

00:08:24.990 --> 00:08:27.010
it's going to
recompute the URL where

00:08:27.010 --> 00:08:28.400
we're fetching from in GitHub.

00:08:28.400 --> 00:08:30.900
And we're going to stub out
this method here for computeurl.

00:08:30.900 --> 00:08:33.650
I'll say, hey, when we get owner
and repo, what we should do

00:08:33.650 --> 00:08:36.490
is we should take that hard
coded URL that we were working

00:08:36.490 --> 00:08:38.650
with before-- so
let's just copy this--

00:08:38.650 --> 00:08:40.789
we'll drop it into
an array, and we'll

00:08:40.789 --> 00:08:43.860
replace where it has the
owner and repo right here,

00:08:43.860 --> 00:08:46.780
we'll just replace
with these two values

00:08:46.780 --> 00:08:48.210
that are being passed in.

00:08:48.210 --> 00:08:50.020
So as someone is
configured our tag,

00:08:50.020 --> 00:08:51.510
they're passing
in owner and repo.

00:08:51.510 --> 00:08:53.374
That's going to update this URL.

00:08:53.374 --> 00:08:54.915
So I'll pass those
in, and then we're

00:08:54.915 --> 00:08:57.040
just going to join the
whole string with slashes

00:08:57.040 --> 00:09:00.240
to turn it back into a URL.

00:09:00.240 --> 00:09:02.680
And we'll say, hey, this is
what Iron Ajax should bind to,

00:09:02.680 --> 00:09:05.570
this configurable
computed URL now.

00:09:05.570 --> 00:09:10.740
So let's switch
back over to Chrome,

00:09:10.740 --> 00:09:14.600
now that we've got this set up,
and we can go look at our demo.

00:09:14.600 --> 00:09:16.290
And see, now we're
seeing all the issues

00:09:16.290 --> 00:09:17.265
from the Polymer repo.

00:09:17.265 --> 00:09:18.640
We can actually
open one of these

00:09:18.640 --> 00:09:21.582
and see, yep, organizations,
Polymer, Polymer repo.

00:09:21.582 --> 00:09:23.290
But let's configure
it a little bit more.

00:09:23.290 --> 00:09:27.220
So now we can go and we can
pass whatever owner and repo

00:09:27.220 --> 00:09:29.190
we want, because we
have these properties

00:09:29.190 --> 00:09:31.720
and we can pass them
values as attributes.

00:09:31.720 --> 00:09:34.430
So let's look at Polymer
elements paper input.

00:09:34.430 --> 00:09:35.350
Refresh the page here.

00:09:35.350 --> 00:09:37.430
Now we're looking at
issues from paper input.

00:09:37.430 --> 00:09:38.480
So this is pretty cool.

00:09:38.480 --> 00:09:42.090
Now anybody can use this tag
to pull issues from GitHub,

00:09:42.090 --> 00:09:45.274
which is pretty awesome, right?

00:09:45.274 --> 00:09:47.440
But I think we can actually
take this a bit further.

00:09:47.440 --> 00:09:54.590
So just for funsies, let's take
the demo that we're working on

00:09:54.590 --> 00:09:57.130
here and wrap it in an
auto binding template,

00:09:57.130 --> 00:09:59.850
and this is going to let us use
data bindings inside the space

00:09:59.850 --> 00:10:02.590
without creating our own tag.

00:10:02.590 --> 00:10:04.880
And I'm just going to
take owner and repo

00:10:04.880 --> 00:10:05.950
and make them bindable.

00:10:05.950 --> 00:10:08.600
So I'll create two text inputs.

00:10:08.600 --> 00:10:10.660
These are just
native text inputs.

00:10:10.660 --> 00:10:13.620
So one is going
to bind to owner,

00:10:13.620 --> 00:10:16.490
and one is going to be
bound to this repo variable.

00:10:16.490 --> 00:10:20.570
And because we're creating data
bindings on native elements,

00:10:20.570 --> 00:10:25.330
notice that I'm using this sort
of special double colon syntax.

00:10:25.330 --> 00:10:29.330
So this is sort of how
Polymer allows you to set up

00:10:29.330 --> 00:10:31.110
data bindings on native tags.

00:10:31.110 --> 00:10:32.860
Native tags, they
fire their own events

00:10:32.860 --> 00:10:34.300
when something has updated.

00:10:34.300 --> 00:10:36.070
In the case of
the input element,

00:10:36.070 --> 00:10:39.410
any time you have finished
typing some text inside of it,

00:10:39.410 --> 00:10:41.250
it is going to fire
a change event.

00:10:41.250 --> 00:10:43.650
And so we're saying, hey, when
you hear the change event,

00:10:43.650 --> 00:10:46.690
update the owner binding, right?

00:10:46.690 --> 00:10:48.390
Same with the repo binding.

00:10:48.390 --> 00:10:50.280
So now we can go
and I can replace

00:10:50.280 --> 00:10:53.630
these with those same scope
variables, owner and repo.

00:10:53.630 --> 00:10:55.940
And now if we switch
over to Chrome,

00:10:55.940 --> 00:10:58.850
you'll see that at the bottom
I've got these two text inputs.

00:10:58.850 --> 00:11:02.240
They are initially
receiving the values

00:11:02.240 --> 00:11:04.590
that the gh-issues
element put out.

00:11:04.590 --> 00:11:07.040
So owner and repo are
initially Polymer and Polymer.

00:11:07.040 --> 00:11:08.050
But we can change these.

00:11:08.050 --> 00:11:10.174
So we can say, hey, this
should be polymerelements,

00:11:10.174 --> 00:11:13.220
and this should
be, like, ironajax.

00:11:13.220 --> 00:11:14.400
And watch here.

00:11:14.400 --> 00:11:16.510
All of the issues
update, and that's

00:11:16.510 --> 00:11:19.280
because we have that auto
attribute on our Iron Ajax

00:11:19.280 --> 00:11:19.970
element.

00:11:19.970 --> 00:11:21.730
So we've given it
some new values.

00:11:21.730 --> 00:11:24.500
It recomputed the
URL, it told Iron Ajax

00:11:24.500 --> 00:11:27.297
to go fetch that new data, and
that updated our dom for us.

00:11:27.297 --> 00:11:29.630
And again, we didn't need to
write a bunch of JavaScript

00:11:29.630 --> 00:11:32.890
to manage all of this
flow, and that's, again,

00:11:32.890 --> 00:11:35.150
the power of a nice
declarative data provider

00:11:35.150 --> 00:11:37.240
like Iron Ajax,
which is pretty cool.

00:11:37.240 --> 00:11:38.240
You can actually-- Yeah.

00:11:38.240 --> 00:11:39.615
You can open one
of these up too,

00:11:39.615 --> 00:11:41.930
and you can see that--
verify that it's actually

00:11:41.930 --> 00:11:44.060
pulling from polymerelements
and Iron Ajax.

00:11:44.060 --> 00:11:47.270
Now, another thing you may want
to do when you work with Ajax

00:11:47.270 --> 00:11:49.390
is pass along parameters.

00:11:49.390 --> 00:11:51.380
So you might be
like, hey, I want

00:11:51.380 --> 00:12:02.130
to go to foo.com question
mark q equals some value

00:12:02.130 --> 00:12:03.110
or something like that.

00:12:03.110 --> 00:12:07.206
You pass along parameters as
you're working with these URLs.

00:12:07.206 --> 00:12:08.580
And if we look at
the GitHub API,

00:12:08.580 --> 00:12:10.913
you can see that there's a
few parameters we could pass.

00:12:10.913 --> 00:12:12.176
One of them is state.

00:12:12.176 --> 00:12:13.550
So we could say,
hey, give me all

00:12:13.550 --> 00:12:16.530
of the issues for
this repo, and maybe I

00:12:16.530 --> 00:12:19.880
want just the closed ones
or just the open ones.

00:12:19.880 --> 00:12:21.590
So that's one parameter
that we can use.

00:12:21.590 --> 00:12:24.264
Another one is this
down here for page.

00:12:24.264 --> 00:12:26.180
It's a little hard to
see, but we can actually

00:12:26.180 --> 00:12:27.940
paginate our URL as well.

00:12:27.940 --> 00:12:31.730
So we could be like, hey, I want
page three of all of the closed

00:12:31.730 --> 00:12:32.350
issues.

00:12:32.350 --> 00:12:33.990
Stuff like that, right?

00:12:33.990 --> 00:12:38.480
So let's go, and let's add
that to our element as well.

00:12:38.480 --> 00:12:40.280
We'll go back to
our markup here,

00:12:40.280 --> 00:12:43.760
and we can give iron-ajax
this params attribute,

00:12:43.760 --> 00:12:47.410
and you could give it
this JSON encoded object,

00:12:47.410 --> 00:12:50.920
and that could be how you
pass along parameters.

00:12:50.920 --> 00:12:53.170
So we could say "state" I
want all the open issues,

00:12:53.170 --> 00:12:55.712
and I want it to
be page number 1.

00:12:55.712 --> 00:12:57.170
But again, where's
the fun in that?

00:12:57.170 --> 00:12:59.190
Let's make this configurable.

00:12:59.190 --> 00:13:02.760
So much like we
did with the URL,

00:13:02.760 --> 00:13:05.490
we can replace params
with a computed value.

00:13:05.490 --> 00:13:08.730
So I'm going to create
a binding for options.

00:13:08.730 --> 00:13:11.090
That's what we'll call
our computed value.

00:13:11.090 --> 00:13:14.100
And we'll say that we want
to create state and page

00:13:14.100 --> 00:13:17.290
properties, and we will
create a new computed value

00:13:17.290 --> 00:13:20.830
called options, which'll
just compute state and page.

00:13:20.830 --> 00:13:22.950
So any time those
change, it is going

00:13:22.950 --> 00:13:25.850
to return a JSON object
with whatever the state is

00:13:25.850 --> 00:13:27.370
and whatever the page is.

00:13:27.370 --> 00:13:29.660
So it's kind of a
weird example, but you

00:13:29.660 --> 00:13:32.370
can see that it demonstrates
how parameters work.

00:13:32.370 --> 00:13:35.260
So now we can go back and we
can create bindings for state

00:13:35.260 --> 00:13:37.510
and page inside of our demo.

00:13:37.510 --> 00:13:39.570
And just like we did
with owner and repo,

00:13:39.570 --> 00:13:42.750
I will create input
fields for these as well.

00:13:42.750 --> 00:13:44.970
So now when we swap
back, if you look,

00:13:44.970 --> 00:13:47.650
you can see again it's initially
bound to Polymer, Polymer,

00:13:47.650 --> 00:13:49.520
it defaults to all
of the open issues,

00:13:49.520 --> 00:13:50.899
and it defaults to page one.

00:13:50.899 --> 00:13:51.940
And so let's change that.

00:13:51.940 --> 00:13:54.680
Let's say, hey, I want to see
the closed issues in Polymer.

00:13:54.680 --> 00:13:55.180
OK.

00:13:55.180 --> 00:13:56.480
That updates.

00:13:56.480 --> 00:13:59.110
I want to see page three of
the closed issues in Polymer.

00:13:59.110 --> 00:13:59.610
OK.

00:13:59.610 --> 00:14:00.690
That updates.

00:14:00.690 --> 00:14:03.730
And I want to look at
page three of the closed

00:14:03.730 --> 00:14:07.849
issues from maybe, like, paper
input, and that works as well.

00:14:07.849 --> 00:14:10.140
And again, we can go back
and we can open one of these,

00:14:10.140 --> 00:14:13.960
and we can verify it's a closed
issue coming from paper input.

00:14:13.960 --> 00:14:15.050
So pretty cool.

00:14:15.050 --> 00:14:18.031
We've created now this
pretty robust little element.

00:14:18.031 --> 00:14:19.530
It does a lot of
really fancy stuff.

00:14:19.530 --> 00:14:20.890
It's entirely configurable.

00:14:20.890 --> 00:14:22.566
The user can just
go and live edit it,

00:14:22.566 --> 00:14:24.190
and they're getting
all this data back,

00:14:24.190 --> 00:14:26.070
it's updating the
dom, and we're not

00:14:26.070 --> 00:14:27.770
having to write a
bunch of JavaScript

00:14:27.770 --> 00:14:31.550
to manipulate the dom in
any way, which is rad.

00:14:31.550 --> 00:14:33.920
So when should
you use Iron Ajax?

00:14:33.920 --> 00:14:35.741
Well, that really
depends on context.

00:14:35.741 --> 00:14:37.490
If you're in a situation
where you've got,

00:14:37.490 --> 00:14:41.430
like, 30 iron-ajax sprinkled
throughout your element, then,

00:14:41.430 --> 00:14:45.770
yeah, maybe consider doing
it with JavaScript instead.

00:14:45.770 --> 00:14:47.950
But if you only need
a simple data provider

00:14:47.950 --> 00:14:49.360
without a whole
lot of fuss, then

00:14:49.360 --> 00:14:51.780
perhaps Iron Ajax is a good
fit for your application.

00:14:51.780 --> 00:14:53.404
We talked a lot about
Iron Ajax today.

00:14:53.404 --> 00:14:55.570
But I've actually only
barely scratched the surface,

00:14:55.570 --> 00:14:57.120
and so if you go
over to the catalog,

00:14:57.120 --> 00:14:59.430
you can see that there is
this Iron Elements section.

00:14:59.430 --> 00:15:02.220
You can go there and check
out the docs for Iron Ajax.

00:15:02.220 --> 00:15:04.100
And there's a ton of
things that this does.

00:15:04.100 --> 00:15:05.250
It does, you know,
the full breadth

00:15:05.250 --> 00:15:06.374
of what you can do in Ajax.

00:15:06.374 --> 00:15:08.600
So you can add body to it.

00:15:08.600 --> 00:15:12.700
You could change the
method to post or put.

00:15:12.700 --> 00:15:14.200
You can see all
the various methods

00:15:14.200 --> 00:15:16.540
that the element supports,
the events that it fires,

00:15:16.540 --> 00:15:17.080
and so on.

00:15:17.080 --> 00:15:19.710
So definitely go read through
the docs of Iron Ajax,

00:15:19.710 --> 00:15:22.600
because there's a lot of
power in this one little tag.

00:15:22.600 --> 00:15:25.160
Also, little bit of
shameless promotion here.

00:15:25.160 --> 00:15:27.070
We just finished
doing a big event

00:15:27.070 --> 00:15:30.217
in Amsterdam, which we're
calling our Polymer Summit.

00:15:30.217 --> 00:15:30.800
I will-- here.

00:15:30.800 --> 00:15:33.040
I'll draw a little
link here, so you

00:15:33.040 --> 00:15:36.450
can click on that annotation
to go to the actual website.

00:15:36.450 --> 00:15:39.440
It's a full day of
talks and code labs

00:15:39.440 --> 00:15:42.790
for you to check out to
learn all things Polymer.

00:15:42.790 --> 00:15:46.000
So you can go check out
our playlist over here

00:15:46.000 --> 00:15:49.370
on the Chrome Developers channel
and see all of our videos.

00:15:49.370 --> 00:15:53.180
You can also go to our
code labs and maybe click

00:15:53.180 --> 00:15:54.390
this as an annotation.

00:15:54.390 --> 00:15:56.550
Go check out all
of our code labs.

00:15:56.550 --> 00:15:58.330
And again, there's
tons of stuff for you

00:15:58.330 --> 00:16:00.704
to play with if you're just
getting started with Polymer,

00:16:00.704 --> 00:16:02.510
or even if you're a
bit of a Polymer pro.

00:16:02.510 --> 00:16:04.340
There's probably
something in here for you.

00:16:04.340 --> 00:16:07.680
So if you missed the Polymer
Summit, go check that out.

00:16:07.680 --> 00:16:08.880
That's it for today, folks.

00:16:08.880 --> 00:16:10.547
If you've enjoyed
this episode, consider

00:16:10.547 --> 00:16:12.546
clicking that little
Subscribe button down there

00:16:12.546 --> 00:16:13.300
at the bottom.

00:16:13.300 --> 00:16:15.040
Also, if you have
questions for me,

00:16:15.040 --> 00:16:16.530
you can leave them
in the comments

00:16:16.530 --> 00:16:19.490
or you can ping me on a social
network of your choosing

00:16:19.490 --> 00:16:21.970
at #AskPolymer.

00:16:21.970 --> 00:16:23.860
As always, thank you
so much for watching,

00:16:23.860 --> 00:16:24.985
and I'll see you next time.

00:16:24.985 --> 00:16:28.090
[MUSIC PLAYING]

