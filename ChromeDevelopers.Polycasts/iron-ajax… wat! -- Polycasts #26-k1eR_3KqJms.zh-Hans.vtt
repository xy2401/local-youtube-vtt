WEBVTT
Kind: captions
Language: zh-Hans

00:00:00.000 --> 00:00:03.262
 Polymer，Rob Dodson 

00:00:03.262 --> 00:00:05.180
欢迎来到Polycast的老板Rob 

00:00:05.180 --> 00:00:07.520
你们中的许多人向我们发送了自定义循环的请求

00:00:07.520 --> 00:00:09.302
对于Iron Ajax组件。 

00:00:09.302 --> 00:00:11.260
许多问题围绕这个要素展开， 

00:00:11.260 --> 00:00:14.410
就像可以使用时一样，融合风格是否不好

00:00:14.410 --> 00:00:15.806
有了这样的编解码器。 

00:00:15.806 --> 00:00:18.180
但实际上，铁阿贾克斯是有用的成分

00:00:18.180 --> 00:00:20.010
您可以在工具箱中获取。 

00:00:20.010 --> 00:00:21.850
仅显示其有用性

00:00:21.850 --> 00:00:25.510
与数据链接结合使用时。 

00:00:25.510 --> 00:00:27.620
全天候在Polycast中

00:00:27.620 --> 00:00:29.660
我将向您介绍Ajax的工作人员

00:00:29.660 --> 00:00:31.490
仅使用HTML 

00:00:31.490 --> 00:00:33.520
让我们看看吧。知道了

00:00:33.520 --> 00:00:35.436
所以今天我们将设计一个元素

00:00:35.436 --> 00:00:37.340
要查找GitHub问题， 

00:00:37.340 --> 00:00:39.510
我们将使用Iron Ajax来做到这一点。 

00:00:39.510 --> 00:00:42.284
现在，我还将使用Yeoman构造函数来支持该元素

00:00:42.284 --> 00:00:44.450
但是如果您不想使用Yeoman， 

00:00:44.450 --> 00:00:46.640
您可以使用元素项目， 

00:00:46.640 --> 00:00:48.820
我将在下面的视频说明中链接到该视频。 

00:00:48.820 --> 00:00:50.910
这与Yeoman一样。 

00:00:50.910 --> 00:00:53.210
但是Yeoman正在做额外的工作

00:00:53.210 --> 00:00:56.210
代表我重命名所有文件，这很有用。 

00:00:56.210 --> 00:00:58.830
在命令行上，我要写聚合物：l--对不起

00:00:58.830 --> 00:01:04.010
 yo聚合物：为gh-issues种子创建我的物品。 

00:01:04.010 --> 00:01:06.260
创建完成后，我可以运行polyserve， 

00:01:06.260 --> 00:01:07.770
这是我们的本地服务器， 

00:01:07.770 --> 00:01:10.590
这将使我在创建项目时浏览它。 

00:01:10.590 --> 00:01:13.560
在这里，您会看到它创建了此URL 

00:01:13.560 --> 00:01:15.780
我用来打开

00:01:15.780 --> 00:01:17.600
关闭我的物品。 

00:01:17.600 --> 00:01:20.260
因此，使用初始元素， 

00:01:20.260 --> 00:01:22.510
它将创建好的文档。 

00:01:22.510 --> 00:01:25.360
这里还有一个演示链接，我们可以单击

00:01:25.360 --> 00:01:26.990
介绍我们

00:01:26.990 --> 00:01:29.900
生成的样板元素的演示。 

00:01:29.900 --> 00:01:32.590
因此，这一切都被截断了， 

00:01:32.590 --> 00:01:35.340
我们将在一秒钟内将其全部替换。 

00:01:35.340 --> 00:01:36.840
我刚才提到我们将使用

00:01:36.840 --> 00:01:39.370
 GitHub API出现问题。 

00:01:39.370 --> 00:01:41.730
因此，当您查看API文档时， 

00:01:41.730 --> 00:01:45.374
我可以去问题部分

00:01:45.374 --> 00:01:48.450
在这里，您将看到使用GitHub API的工作非常简单。 

00:01:48.450 --> 00:01:51.450
我们只会使用get请求来解决问题

00:01:51.450 --> 00:01:53.510
对于每个问题

00:01:53.510 --> 00:01:57.422
用户或特定组织中的所有问题。 

00:01:57.422 --> 00:01:58.880
就我们而言，我们将要做的是

00:01:58.880 --> 00:02:00.550
如果我们要解决所有问题

00:02:00.550 --> 00:02:02.850
自己的仓库。 

00:02:02.850 --> 00:02:07.190
为此，我们将需要安装Iron Ajax。 

00:02:07.190 --> 00:02:08.440
我们将返回码头。 

00:02:08.440 --> 00:02:10.130
我们将分为两个部分。 

00:02:10.130 --> 00:02:13.610
并写凉亭安装Iron Ajax，传递保存信号

00:02:13.610 --> 00:02:17.940
将写入我们项目的Bower JSON文件中。 

00:02:17.940 --> 00:02:20.680
到目前为止一切都很好，我们可以回顾一下

00:02:20.680 --> 00:02:23.680
项目被Yeoman截断了。 

00:02:23.680 --> 00:02:25.449
这些是gh-issues.html。 

00:02:25.449 --> 00:02:26.990
如果您浏览此处， 

00:02:26.990 --> 00:02:30.040
您会发现许多截断的标记样板标记

00:02:30.040 --> 00:02:33.224
作为元素可能是一个例子。 

00:02:33.224 --> 00:02:34.890
我们将跳过一秒钟， 

00:02:34.890 --> 00:02:36.620
我们将继续导入Iron Ajax， 

00:02:36.620 --> 00:02:39.285
因此，我们将使用它，并更新我的商品说明。 

00:02:39.285 --> 00:02:41.909
我将在这里写道，这是带来问题的要素

00:02:41.909 --> 00:02:44.800
从GitHub删除

00:02:44.800 --> 00:02:47.930
所有其他编码都在这里。 

00:02:47.930 --> 00:02:50.280
同样，我不需要任何这些。 

00:02:50.280 --> 00:02:52.347
这只是一个例子，以防万一

00:02:52.347 --> 00:02:53.930
您之前没有写过任何东西。 

00:02:53.930 --> 00:02:56.040
最好浏览一下，看看您能做什么。 

00:02:56.040 --> 00:02:57.880
但我想将其删除

00:02:57.880 --> 00:03:00.900
这种抽象结构。 

00:03:00.900 --> 00:03:04.160
在下面，我将放置铁制ajax标签

00:03:04.160 --> 00:03:06.656
在我的表单中，我将对其进行格式化

00:03:06.656 --> 00:03:07.780
在这里有一些功能。 

00:03:07.780 --> 00:03:11.180
所以这里的auto属性告诉Iron Ajax 

00:03:11.180 --> 00:03:12.370
自动获取数据

00:03:12.370 --> 00:03:14.490
只要有有效的网址， 

00:03:14.490 --> 00:03:16.520
我继续获取一些数据。 

00:03:16.520 --> 00:03:18.750
此url属性的名称表示， 

00:03:18.750 --> 00:03:21.077
指示我们将从何处获取数据。 

00:03:21.077 --> 00:03:22.660
当您返回这些数据时， 

00:03:22.660 --> 00:03:24.076
我们需要将其视为某种东西。 

00:03:24.076 --> 00:03:26.040
在这里，我们将把handle作为JSON编写。 

00:03:26.040 --> 00:03:29.230
我认为它也支持XML，您也可以

00:03:29.230 --> 00:03:32.580
告诉他以文件形式带东西。 

00:03:32.580 --> 00:03:35.134
因此，例如，如果您要获取HTML文件， 

00:03:35.134 --> 00:03:36.800
你可以说回来的时候

00:03:36.800 --> 00:03:38.870
您要将其作为文档进行处理。 

00:03:38.870 --> 00:03:40.600
活动也可以启动。 

00:03:40.600 --> 00:03:43.600
在这里，我们有一个响应事件，我们可以听

00:03:43.600 --> 00:03:45.760
我们可以放置一个与此处理器配合使用的处理器。 

00:03:45.760 --> 00:03:47.090
而不是编写很多JavaScript 

00:03:47.090 --> 00:03:49.040
为了处理我们的回应， 

00:03:49.040 --> 00:03:51.170
我们将为其分配一个URL。 

00:03:51.170 --> 00:03:54.640
所以我告诉他回到robdodson / chart-elements。 

00:03:54.640 --> 00:03:58.440
这是我们将从中提取数据的存储库。 

00:03:58.440 --> 00:04:01.790
我会告诉他而不是解决

00:04:01.790 --> 00:04:04.950
在JavaScript中，我们将获取返回的数据

00:04:04.950 --> 00:04:07.689
显示为最后响应的属性， 

00:04:07.689 --> 00:04:09.730
我们将为其设计一个域变量

00:04:09.730 --> 00:04:10.890
反应。 

00:04:10.890 --> 00:04:12.810
现在让我们考虑一下这里发生了什么

00:04:12.810 --> 00:04:14.030
一秒钟。 

00:04:14.030 --> 00:04:18.290
我有这个标签，它基本上代表了GitHub 

00:04:18.290 --> 00:04:21.640
这是GitHub API的演示。 

00:04:21.640 --> 00:04:23.180
我通过选择将其配置为

00:04:23.180 --> 00:04:25.140
我要从哪里获取数据

00:04:25.140 --> 00:04:29.210
然后使用数据绑定来创建

00:04:29.210 --> 00:04:32.140
元数据提供程序的种类。 

00:04:32.140 --> 00:04:34.090
我真的不知道机制

00:04:34.090 --> 00:04:37.115
我并不关心它获取数据的方式。 

00:04:37.115 --> 00:04:39.740
我真的不在乎如何实现方法

00:04:39.740 --> 00:04:41.500
接收数据。 

00:04:41.500 --> 00:04:44.360
相反，我所关心的是

00:04:44.360 --> 00:04:46.290
去拿给我这些数据。 

00:04:46.290 --> 00:04:49.430
因为数据绑定是一种很好的强制性方法

00:04:49.430 --> 00:04:51.810
通过它我可以链接到它

00:04:51.810 --> 00:04:54.900
通过不同的dom节点，它们将保持同步

00:04:54.900 --> 00:04:55.960
随着数据。 

00:04:55.960 --> 00:04:59.980
因此您不再需要编写很多JavaScript 

00:04:59.980 --> 00:05:01.040
在元素中。 

00:05:01.040 --> 00:05:03.410
通常我必须解决这个问题

00:05:03.410 --> 00:05:06.300
对其进行分段，然后寻找不同的dom节点

00:05:06.300 --> 00:05:08.190
用新数据更新。 

00:05:08.190 --> 00:05:09.880
在这里，我们只需要

00:05:09.880 --> 00:05:11.660
获取此出色的元数据提供程序

00:05:11.660 --> 00:05:13.835
当这些数据返回我所有的dom 

00:05:13.835 --> 00:05:17.210
与之关联的所有dom节点都将保持正常并同步。 

00:05:17.210 --> 00:05:19.430
这是一个很好的方法。 

00:05:19.430 --> 00:05:21.420
这是回应

00:05:21.420 --> 00:05:23.128
我们将从GitHub恢复。 

00:05:23.128 --> 00:05:24.830
您会看到它是一个对象数组

00:05:24.830 --> 00:05:27.200
我感兴趣的特征

00:05:27.200 --> 00:05:31.130
此处的名称是否为html_url。 

00:05:31.130 --> 00:05:33.940
这是GitHub问题的实际URL。 

00:05:33.940 --> 00:05:36.080
我也对标题感兴趣。 

00:05:36.080 --> 00:05:40.170
这将在我们的问题列表中显示。 

00:05:40.170 --> 00:05:42.780
现在让我们回到我们的模型。 

00:05:42.780 --> 00:05:46.480
而且因为我们有这个元数据提供者， 

00:05:46.480 --> 00:05:50.220
让我们创建一些dom节点，以便可以链接它们。 

00:05:50.220 --> 00:05:55.050
所以我要用dom-repeat模型设计一个模型

00:05:55.050 --> 00:05:58.570
我会给他分配项目标签， 

00:05:58.570 --> 00:06:00.440
我们将两者结合在一起。 

00:06:00.440 --> 00:06:01.480
这样你就可以看到链接

00:06:01.480 --> 00:06:02.480
我们在这里创建的。 

00:06:02.480 --> 00:06:07.080
我们说项目应与这一回应联系起来。 

00:06:07.080 --> 00:06:10.000
现在，结合它们的组合，该模型将尝试

00:06:10.000 --> 00:06:12.510
在整个小组中重复

00:06:12.510 --> 00:06:14.920
并跨越这个对象矩阵。 

00:06:14.920 --> 00:06:21.160
我们可以在里面放一个带有锚点的div， 

00:06:21.160 --> 00:06:23.300
对于每个单独的项目

00:06:23.300 --> 00:06:26.677
我们可以将其与html_url及其地址相关联。 

00:06:26.677 --> 00:06:28.260
现在我们将创建

00:06:28.260 --> 00:06:30.592
基于此响应的锚标记列表。 

00:06:30.592 --> 00:06:32.300
那很棒，因为你

00:06:32.300 --> 00:06:34.380
您无需编写很多JavaScript即可处理所有这些事情。 

00:06:34.380 --> 00:06:36.130
我所做的就是创建这个小链接。 

00:06:36.130 --> 00:06:38.340
我有这个很好的元数据提供程序。 

00:06:38.340 --> 00:06:39.930
我只是创建一个dom锚

00:06:39.930 --> 00:06:42.440
根据数据返回。 

00:06:42.440 --> 00:06:45.050
所以我们去演示文件

00:06:45.050 --> 00:06:47.364
稍后我会向您展示作为我们文档的一部分。 

00:06:47.364 --> 00:06:49.530
我们会稍微删除一下

00:06:49.530 --> 00:06:51.070
所以我们可以查看标签

00:06:51.070 --> 00:06:53.417
同样，Yeoman创建了一组样板。 

00:06:53.417 --> 00:06:55.250
如果您以前从未看过它，将会发现它很棒

00:06:55.250 --> 00:06:57.208
但就我们而言，我们将其删除。 

00:06:57.208 --> 00:06:58.639
我们将标记gh问题。 

00:06:58.639 --> 00:07:00.180
我会把它放在一边

00:07:00.180 --> 00:07:01.486
这样您可以更清楚地看到。 

00:07:01.486 --> 00:07:03.610
现在，让我们在Chrome中对此进行回顾。 

00:07:03.610 --> 00:07:04.860
我们将点击演示按钮， 

00:07:04.860 --> 00:07:06.651
我们会发现两个问题

00:07:06.651 --> 00:07:07.820
他们从这个仓库回来了。 

00:07:07.820 --> 00:07:09.780
我将单击其中之一，然后在新页面中将其打开。 

00:07:09.780 --> 00:07:13.160
并验证它们是否来自Rob Dodson图表元素。 

00:07:13.160 --> 00:07:14.230
像这样

00:07:14.230 --> 00:07:16.600
在这里，我们有一个活动的关键元素。 

00:07:16.600 --> 00:07:20.550
它从GitHub API准备数据， 

00:07:20.550 --> 00:07:23.059
到目前为止，我们根本没有编写任何JavaScript。 

00:07:23.059 --> 00:07:24.100
我们只是准备数据。 

00:07:24.100 --> 00:07:26.280
我们基于该数据创建一个dom。 

00:07:26.280 --> 00:07:28.310
那是一条好路，但是要看

00:07:28.310 --> 00:07:30.810
如果我们可以继续

00:07:30.810 --> 00:07:32.460
并使其更具可配置性。 

00:07:32.460 --> 00:07:34.850
因此，如果我们回头看看元素定义。 

00:07:34.850 --> 00:07:36.990
您可以看到我在此处为此路径添加了静态编码， 

00:07:36.990 --> 00:07:39.250
哪个问题吧？ 

00:07:39.250 --> 00:07:41.650
我希望任何人都可以使用此标签。 

00:07:41.650 --> 00:07:45.110
所以我能做的就是拿主人的名字， 

00:07:45.110 --> 00:07:46.690
取了仓库的名字

00:07:46.690 --> 00:07:50.741
我可以使它们成为此元素的可配置属性。 

00:07:50.766 --> 00:07:55.540
因此，我们转到属性的属性并减去两个属性。 

00:07:55.540 --> 00:07:59.430
其中之一称为所有者，我们将其默认值

00:07:59.430 --> 00:08:00.820
它具有“聚合物”的值。 

00:08:00.820 --> 00:08:02.279
为什么不呢

00:08:02.279 --> 00:08:04.320
我们还将使它可以从两个方向连接。 

00:08:04.320 --> 00:08:07.330
因此，我们将使它们在更改时触发更改事件。 

00:08:07.330 --> 00:08:09.450
在这里，我们将编写notify：true。 

00:08:09.450 --> 00:08:12.170
我们还将创建另一个称为存储库的属性。 

00:08:12.170 --> 00:08:14.380
我们还将其设置在Polymer上，它将

00:08:14.380 --> 00:08:15.660
两路可连接。 

00:08:15.660 --> 00:08:18.965
最后，我将创建一个称为url的计算属性， 

00:08:18.965 --> 00:08:20.340
她将要做的是

00:08:20.340 --> 00:08:22.640
将计算所有者和仓库的价值。 

00:08:22.640 --> 00:08:24.990
这样，如果其中之一被更改， 

00:08:24.990 --> 00:08:27.010
您的网址将重新计算

00:08:27.010 --> 00:08:28.400
我们从GitHub获取。 

00:08:28.400 --> 00:08:30.900
我们将在此处截断此方法以计算网址。 

00:08:30.900 --> 00:08:33.650
当我们拥有所有者和仓库时，我们要做的就是

00:08:33.650 --> 00:08:36.490
我们将使用我们处理过的这个静态编码的URL 

00:08:36.490 --> 00:08:38.650
在..之前，让我们复制一下

00:08:38.650 --> 00:08:40.789
并将其放入矩阵中

00:08:40.789 --> 00:08:43.860
我们将在这里替换所有者和仓库

00:08:43.860 --> 00:08:46.780
放置这两个值

00:08:46.780 --> 00:08:48.210
哪些通过了。 

00:08:48.210 --> 00:08:50.020
因此，当有人配置我们的代码时， 

00:08:50.020 --> 00:08:51.510
它经过所有者和仓库

00:08:51.510 --> 00:08:53.374
这将更新此URL。 

00:08:53.374 --> 00:08:54.915
所以我要通过，然后

00:08:54.915 --> 00:08:57.040
我们将仅通过斜杠条件组合整个字符串

00:08:57.040 --> 00:09:00.240
将其返回为URL格式。 

00:09:00.240 --> 00:09:02.680
我们要说的是Iron Ajax应该绑定的东西， 

00:09:02.680 --> 00:09:05.570
现在已计算出可配置的URL。 

00:09:05.570 --> 00:09:10.740
让我们回到Chrome， 

00:09:10.740 --> 00:09:14.600
现在我们已经设置好了，我们可以查看该演示了。 

00:09:14.600 --> 00:09:17.265
现在，我们从Polymer库中看到了所有问题。 

00:09:17.265 --> 00:09:18.640
我们可以打开一个

00:09:18.640 --> 00:09:21.582
让我们看一下，这是组织，聚合物，聚合物回购。 

00:09:21.582 --> 00:09:23.290
但是，让我们做得更好。 

00:09:23.290 --> 00:09:27.220
现在我们可以走了，我们可以通过我们想要的任何所有者和仓库

00:09:27.220 --> 00:09:29.190
因为我们有那些属性。 

00:09:29.190 --> 00:09:31.720
我们可以将值作为属性传递。 

00:09:31.720 --> 00:09:35.350
因此，让我们看一下聚合物元素的输入。然后我们刷新页面。 

00:09:35.350 --> 00:09:37.430
现在我们来看一下纸张输入中的问题。 

00:09:37.430 --> 00:09:38.480
这很酷。 

00:09:38.480 --> 00:09:42.090
现在，任何人都可以使用此标签从GitHub提取问题， 

00:09:42.090 --> 00:09:45.274
哪个很棒，对吗？ 

00:09:45.274 --> 00:09:47.440
但是我认为我们可以添加更多。 

00:09:47.440 --> 00:09:54.590
让我们看一下我们正在做的演示

00:09:54.590 --> 00:09:57.130
在这里以自动链接的形式进行总结， 

00:09:57.130 --> 00:09:59.850
这将使我们在空间内使用数据链接

00:09:59.850 --> 00:10:02.590
无需创建我们自己的标签。 

00:10:02.590 --> 00:10:04.880
我们将带走所有者和仓库

00:10:04.880 --> 00:10:05.950
并使它们可连接。 

00:10:05.950 --> 00:10:08.600
因此，我将创建两个文本条目。 

00:10:08.600 --> 00:10:10.660
这些只是原始文本输入。 

00:10:10.660 --> 00:10:13.620
其中之一将与所有者相关联， 

00:10:13.620 --> 00:10:16.490
另一个将与此存储库变量关联。 

00:10:16.490 --> 00:10:20.570
由于我们基于原始元素创建数据链接， 

00:10:20.570 --> 00:10:25.330
请注意，我使用此冒号。 

00:10:25.330 --> 00:10:29.330
这就是聚合物允许您设置的方式

00:10:29.330 --> 00:10:31.110
基于原始标签的数据链接。 

00:10:31.110 --> 00:10:32.860
原始标签发起自己的活动

00:10:32.860 --> 00:10:34.300
更新内容时。 

00:10:34.300 --> 00:10:36.070
对于输入元素， 

00:10:36.070 --> 00:10:39.410
每当您在其中写完文字后， 

00:10:39.410 --> 00:10:41.250
更改事件将被触发。 

00:10:41.250 --> 00:10:43.650
所以我们说，当您发现更改发生时， 

00:10:43.650 --> 00:10:46.690
更新所有者链接，对吗？ 

00:10:46.690 --> 00:10:48.390
库存链接也是如此。 

00:10:48.390 --> 00:10:50.280
现在我们可以返回进行更换

00:10:50.280 --> 00:10:53.630
这些与这些域，所有者和存储库变量一起使用

00:10:53.630 --> 00:10:55.940
现在，如果我们回到克罗姆， 

00:10:55.940 --> 00:10:58.850
您会看到下面有两个文本输入。 

00:10:58.850 --> 00:11:02.240
他们最初获得价值

00:11:02.240 --> 00:11:04.590
由gh-issues元素发布。 

00:11:04.590 --> 00:11:07.040
因此，所有者和仓库是Polymer和Polymer。 

00:11:07.040 --> 00:11:08.050
但是我们可以改变这一点。 

00:11:08.050 --> 00:11:10.174
我们可以说这应该是聚合元素， 

00:11:10.174 --> 00:11:13.220
并具有讽刺意味。 

00:11:13.220 --> 00:11:14.400
看看这里。 

00:11:14.400 --> 00:11:16.510
所有问题均已更新， 

00:11:16.510 --> 00:11:19.970
这是因为我们在Iron Ajax元素中具有自动更新功能。 

00:11:19.970 --> 00:11:21.730
所以我们给了他新的价值观。 

00:11:21.730 --> 00:11:24.500
重新计算了URL并告知Iron Ajax 

00:11:24.500 --> 00:11:27.297
为了获取这些新数据，并更新了我们的dom。 

00:11:27.297 --> 00:11:29.630
同样，我们不需要编写很多JavaScript 

00:11:29.630 --> 00:11:32.890
要再次管理所有这些事情

00:11:32.890 --> 00:11:35.150
这就是出色的归纳数据提供者的力量

00:11:35.150 --> 00:11:37.240
 Iron Ajax，这非常好。 

00:11:37.240 --> 00:11:38.240
你可以.. 

00:11:38.240 --> 00:11:39.615
打开这些问题之一

00:11:39.615 --> 00:11:41.930
你可以看到它，签出

00:11:41.930 --> 00:11:44.060
进行聚合物元素和Iron Ajax的提款

00:11:44.060 --> 00:11:47.270
现在，在使用Ajax时，您可能还需要做其他事情

00:11:47.270 --> 00:11:49.390
它正在传递参数。 

00:11:49.390 --> 00:11:51.380
所以我们在这里说我要

00:11:51.380 --> 00:11:56.650
通过去foo.com？ q =值

00:11:56.675 --> 00:12:03.110
等等。 

00:12:03.110 --> 00:12:07.206
因此，您在使用URL链接时传递参数。 

00:12:07.206 --> 00:12:08.580
如果我们看一下GitHub API， 

00:12:08.580 --> 00:12:10.913
您可以发现我们可以传递一些参数。 

00:12:10.913 --> 00:12:12.176
一种是状态。 

00:12:12.176 --> 00:12:13.550
所以我们可以说

00:12:13.550 --> 00:12:16.530
给我这个仓库的所有问题

00:12:16.530 --> 00:12:19.880
我可能只想看封闭或开放的问题。 

00:12:19.880 --> 00:12:21.590
这是我们可以使用的参数之一。 

00:12:21.590 --> 00:12:24.264
下面的页面还有另一个自定义参数。 

00:12:24.264 --> 00:12:26.180
很难看到，但我们可以， 

00:12:26.180 --> 00:12:27.940
还拆分URL。 

00:12:27.940 --> 00:12:32.350
在这里，我可以请求所有已关闭问题的第三页。 

00:12:32.350 --> 00:12:33.990
这样的事情。 

00:12:33.990 --> 00:12:38.480
现在，我们也将其添加到元素中。 

00:12:38.480 --> 00:12:40.280
我们将在这里返回编码。 

00:12:40.280 --> 00:12:43.760
我们可以给这些参数赋予铁质ajax， 

00:12:43.760 --> 00:12:47.410
您可以为其提供此加密的JSON对象， 

00:12:47.410 --> 00:12:50.920
这就是参数传递的方式。 

00:12:50.920 --> 00:12:53.170
因此，我们可以编写“状态”并询问所有未解决的问题。 

00:12:53.170 --> 00:12:55.712
我想成为第一页。 

00:12:55.712 --> 00:12:57.170
但是第二次，它的乐趣在哪里？ 

00:12:57.170 --> 00:12:59.190
让我们使其可配置。 

00:12:59.190 --> 00:13:02.760
就像我们对网址所做的一样

00:13:02.760 --> 00:13:05.490
我们可以用计算值代替参数。 

00:13:05.490 --> 00:13:08.730
因此，我将创建一个指向选项的链接。 

00:13:08.730 --> 00:13:11.090
这将是我们计算值的名称。 

00:13:11.090 --> 00:13:14.100
我们将说我们要创建“状态”页面和“页面”页面。 

00:13:14.100 --> 00:13:17.290
我们将创建一个新的计算值

00:13:17.290 --> 00:13:20.830
称为选项，它将计算状态和页面。 

00:13:20.830 --> 00:13:22.950
因此，如果随时更改其中任何一个， 

00:13:22.950 --> 00:13:25.850
无论情况如何，您都将返回JSON对象

00:13:25.850 --> 00:13:27.370
无论页面如何。 

00:13:27.370 --> 00:13:29.660
这是一个奇怪的例子， 

00:13:29.660 --> 00:13:32.370
但是您可以看到它显示了参数的工作方式。 

00:13:32.370 --> 00:13:35.260
现在，我们可以返回并创建状态链接， 

00:13:35.260 --> 00:13:37.510
和演示中的页面。 

00:13:37.510 --> 00:13:39.570
正如我们对所有者和仓库所做的那样。 

00:13:39.570 --> 00:13:42.750
我还将为这些属性创建输入字段。 

00:13:42.750 --> 00:13:44.970
现在，当我们回去时，如果你看看这里

00:13:44.970 --> 00:13:47.650
您会发现它们最初也与Polymer，Polymer， 

00:13:47.650 --> 00:13:49.520
默认为所有未解决的问题

00:13:49.520 --> 00:13:50.899
并设置在第一页上。 

00:13:50.899 --> 00:13:51.940
让我们改变它。 

00:13:51.940 --> 00:13:55.180
假设我要查看聚合物中的封闭问题，好的。 

00:13:55.180 --> 00:13:56.480
已更新。 

00:13:56.480 --> 00:13:59.610
我想看看封闭聚合物问题的第三页，好的。 

00:13:59.610 --> 00:14:00.690
已更新。 

00:14:00.690 --> 00:14:03.730
我想看封闭问题的第三页

00:14:03.730 --> 00:14:07.849
例如，从纸张输入的内部发生了这种情况。 

00:14:07.849 --> 00:14:10.140
同样，我们可以回过头来解决其中一个问题， 

00:14:10.140 --> 00:14:13.960
我们可以从纸张入口验证这是一个封闭的问题。 

00:14:13.960 --> 00:14:15.050
太好了

00:14:15.050 --> 00:14:18.031
现在，我们已经创建了这个强大的小元素。 

00:14:18.031 --> 00:14:19.530
它执行很多好事情。 

00:14:19.530 --> 00:14:20.890
它是完全可配置的。 

00:14:20.890 --> 00:14:22.566
用户可以直接对其进行编辑， 

00:14:22.566 --> 00:14:24.190
它将恢复所有这些数据。 

00:14:24.190 --> 00:14:26.070
它会更新dom， 

00:14:26.070 --> 00:14:27.770
我们不需要编写很多JavaScript 

00:14:27.770 --> 00:14:31.550
以任何方式处理dom。 

00:14:31.550 --> 00:14:33.920
如果什么时候可以使用Iron Ajax？ 

00:14:33.920 --> 00:14:35.741
好吧，这在很大程度上取决于上下文。 

00:14:35.741 --> 00:14:37.490
你处于一个位置并且你有

00:14:37.490 --> 00:14:41.430
大约30个铁ajax散布在整个元素中， 

00:14:41.430 --> 00:14:45.770
您可能需要改用JavaScript。 

00:14:45.770 --> 00:14:47.950
但是如果您需要一个简单的数据提供者， 

00:14:47.950 --> 00:14:49.360
没有很多细节

00:14:49.360 --> 00:14:51.780
 Iron Ajax可能是您的应用程序的最佳选择。 

00:14:51.780 --> 00:14:53.404
今天我们谈论了很多有关Iron Ajax的问题​​。 

00:14:53.404 --> 00:14:55.570
但是我只是吃了硬皮。 

00:14:55.570 --> 00:14:57.120
因此，如果您转到目录， 

00:14:57.120 --> 00:14:59.430
在这里，您会找到铁元素部分。 

00:14:59.430 --> 00:15:02.220
您可以访问它并浏览Iron Ajax文档。 

00:15:02.220 --> 00:15:04.100
这些元素可以做很多事情。 

00:15:04.100 --> 00:15:05.250
它解决了您可以做的一切

00:15:05.250 --> 00:15:06.374
在Ajax中广泛使用。 

00:15:06.374 --> 00:15:08.600
您可以向其添加结构。 

00:15:08.600 --> 00:15:12.700
您可以更改书写或排版样式。 

00:15:12.700 --> 00:15:14.200
您可以看到各种样式

00:15:14.200 --> 00:15:17.080
由组件支持，它触发的事件等。 

00:15:17.080 --> 00:15:19.710
因此，去浏览Iron Ajax文档， 

00:15:19.710 --> 00:15:22.600
因为您可以用这个简单的标志做很多事情。 

00:15:22.600 --> 00:15:25.160
这里有一个简单的声明。 

00:15:25.160 --> 00:15:27.070
我们刚刚为大型活动做准备

00:15:27.070 --> 00:15:30.800
在阿姆斯特丹，我们称之为聚合物峰会。 

00:15:30.800 --> 00:15:33.040
这里有一个简单的链接， 

00:15:33.040 --> 00:15:36.450
您可以单击该窗口转到实际位置。 

00:15:36.450 --> 00:15:39.440
这将是一整天的演讲和软件学习软件

00:15:39.440 --> 00:15:42.790
要了解有关聚合物的一切。 

00:15:42.790 --> 00:15:46.000
您可以在此处转到我们的视频列表

00:15:46.000 --> 00:15:49.370
在Chrome开发者频道上，观看所有视频。 

00:15:49.370 --> 00:15:53.180
您还可以访问代码实验室

00:15:53.180 --> 00:15:54.390
您可以在该窗口上单击。 

00:15:54.390 --> 00:15:56.550
浏览所有代码实验室程序。 

00:15:56.550 --> 00:15:58.330
同样，有很多事情

00:15:58.330 --> 00:16:00.704
如果您开始使用聚合物，则可以尝试一下， 

00:16:00.704 --> 00:16:02.510
或者即使您是专业人士， 

00:16:02.510 --> 00:16:04.340
您会在这里找到适合您的东西。 

00:16:04.340 --> 00:16:07.680
如果您错过了聚合物会议，请转到此处。 

00:16:07.680 --> 00:16:08.880
朋友们，今天就这样。 

00:16:08.880 --> 00:16:10.547
如果你喜欢那集

00:16:10.547 --> 00:16:13.300
点击下面的共享按钮

00:16:13.300 --> 00:16:15.040
如果您有任何疑问

00:16:15.040 --> 00:16:16.530
您可以在评论中留下它们

00:16:16.530 --> 00:16:19.490
或者您可以将其保留在您喜欢的任何社交媒体上

00:16:19.490 --> 00:16:21.970
在#AskPolymer上。 

00:16:21.970 --> 00:16:23.860
像往常一样谢谢你的收看

00:16:23.860 --> 00:16:24.985
下集见。 

