WEBVTT
Kind: captions
Language: zh-Hans

00:00:02.270 --> 00:00:06.240
您可能已经听说过JavaScript中称为async / await的新功能

00:00:06.240 --> 00:00:09.960
这是与promises一起工作的好方法，因为它使异步代码看起来像

00:00:09.960 --> 00:00:14.160
像常规同步代码一样，在此示例中更易于理解

00:00:14.160 --> 00:00:18.359
我们分别获取页面的两个部分，我们有一篇博客文章， 

00:00:18.359 --> 00:00:22.680
我们有一些意见，我们可以将其更改为使用async等待非常容易

00:00:22.680 --> 00:00:26.910
我们等待每次提取，以便我们无需嵌套即可使用结果

00:00:26.910 --> 00:00:32.340
在回调中更容易阅读，但您可能会注意到我做了一个相当

00:00:32.340 --> 00:00:36.930
常见错误我无意中更改了代码的行为，所以事情不会

00:00:36.930 --> 00:00:40.860
在原始代码中不再并行发生，您可以看到

00:00:40.860 --> 00:00:44.070
提取调用发生在外部函数中，并且它们得到解决

00:00:44.070 --> 00:00:48.420
它们以什么顺序独立完成，但是在新代码中等待

00:00:48.420 --> 00:00:52.260
第一次获取意味着在解决包括

00:00:52.260 --> 00:00:55.980
第二次抓取您可以通过移动await来轻松解决此问题，因为

00:00:55.980 --> 00:00:59.820
笑声两个诺言已经开始，所以我们坚持每个诺言

00:00:59.820 --> 00:01:04.379
当我们实际需要它们时就获取并等待它们的值

00:01:04.379 --> 00:01:07.770
两次提取都可能再次并行发生，异步等待仍使

00:01:07.770 --> 00:01:12.540
代码看起来简单得多，所以您可能会注意到我不是服务器，但请不要担心我只是

00:01:12.540 --> 00:01:15.990
如果您想观看其中的服务器前一集，请在此处做一个嘉宾提示

00:01:15.990 --> 00:01:19.590
如果您想了解何时可以制作新剧集，可以单击此处

00:01:19.590 --> 00:01:22.009
单击订阅

