WEBVTT
Kind: captions
Language: zh-Hans

00:00:00.000 --> 00:00:07.140
我经常会遇到这样的问题

00:00:05.460 --> 00:00:09.570
代码比那和我的代码更好

00:00:07.140 --> 00:00:11.040
答案通常是真的取决于

00:00:09.570 --> 00:00:14.040
上下文，您可能应该只是

00:00:11.040 --> 00:00:16.230
都尝试一下，并衡量影响

00:00:14.040 --> 00:00:18.240
用户时序规范提供了

00:00:16.230 --> 00:00:20.520
标准化的计时方式

00:00:18.240 --> 00:00:22.740
数据并在开发中将其可视化

00:00:20.520 --> 00:00:24.449
工具，甚至允许您将其发送到

00:00:22.740 --> 00:00:27.539
您的分析结合在一起

00:00:24.449 --> 00:00:29.490
带有绩效标志的绩效数据

00:00:27.539 --> 00:00:30.599
您可以使用

00:00:29.490 --> 00:00:32.730
当前时间戳

00:00:30.599 --> 00:00:35.399
这可以让您跟踪何时

00:00:32.730 --> 00:00:37.469
您的代码中的点已执行，因此

00:00:35.399 --> 00:00:39.450
例如我可以保存标记

00:00:37.469 --> 00:00:42.030
惰性加载器已完成加载所有我的

00:00:39.450 --> 00:00:44.370
非批判的风格，但可以说更多

00:00:42.030 --> 00:00:46.050
重要的是绩效衡量

00:00:44.370 --> 00:00:48.719
允许您测量时间跨度

00:00:46.050 --> 00:00:50.489
在您的两个标记之间

00:00:48.719 --> 00:00:53.010
您跟踪确定的持续时间

00:00:50.489 --> 00:00:54.719
处理，因此在我的示例中我无法

00:00:53.010 --> 00:00:57.120
只测量我的懒惰加载器何时

00:00:54.719 --> 00:01:00.120
完成了，但是花了多长时间

00:00:57.120 --> 00:01:01.739
加载我所有的非关键样式

00:01:00.120 --> 00:01:04.260
查看所有标记和持续时间

00:01:01.739 --> 00:01:06.810
使用性能获取条目，他们将

00:01:04.260 --> 00:01:09.270
包含名称类型以及时间戳

00:01:06.810 --> 00:01:11.340
和持续时间或者您可以使用

00:01:09.270 --> 00:01:13.439
开发工具的性能时间表

00:01:11.340 --> 00:01:15.750
检查标记的最简单方法

00:01:13.439 --> 00:01:17.520
这样做是使用条目面板

00:01:15.750 --> 00:01:19.470
找到您想要的东西，那就是

00:01:17.520 --> 00:01:21.150
它是一个小工具，可以帮助您

00:01:19.470 --> 00:01:23.210
绩效决定

00:01:21.150 --> 00:01:26.040
开发您的应用程序，下次见

00:01:23.210 --> 00:01:28.080
这是一个增压的微管，但是

00:01:26.040 --> 00:01:29.880
您知道我们还提供直播吗？ 

00:01:28.080 --> 00:01:32.549
您可以观看最近的一部

00:01:29.880 --> 00:01:33.360
更重要的是，您可以订阅

00:01:32.549 --> 00:01:35.729
这个频道

00:01:33.360 --> 00:01:38.130
并观看其他剧集，例如演员表或

00:01:35.729 --> 00:01:41.210
协同工具技巧以及所有这些中的最佳技巧

00:01:38.130 --> 00:01:41.210
或增压

