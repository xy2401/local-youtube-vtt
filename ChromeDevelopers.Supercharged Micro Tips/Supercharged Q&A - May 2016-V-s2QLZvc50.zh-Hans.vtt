WEBVTT
Kind: captions
Language: zh-Hans

00:00:10.380 --> 00:00:12.180
欢迎来到增压。 

00:00:12.180 --> 00:00:14.230
通常，当我们制作视频时， 

00:00:14.230 --> 00:00:15.930
我们收到很多评论。 

00:00:15.930 --> 00:00:17.920
 Twitter上的问题， 

00:00:17.920 --> 00:00:19.940
许多这样的事情来到我们身边。 

00:00:19.940 --> 00:00:21.690
所以我们想，为什么不呢，让我们稍等一下， 

00:00:21.690 --> 00:00:24.420
我们回答其中一些问题。 

00:00:24.420 --> 00:00:25.990
 SVG如何呈现？ 

00:00:25.990 --> 00:00:26.990
看起来很慢。 

00:00:26.990 --> 00:00:28.660
 GPU加速了吗？ 

00:00:28.660 --> 00:00:32.049
如果这是真的，那怎么会呢？ 

00:00:32.049 --> 00:00:33.490
其实我不知道。 

00:00:33.490 --> 00:00:34.290
好，我知道。 

00:00:34.290 --> 00:00:35.010
所以

00:00:36.520 --> 00:00:38.280
 -它们确实是DOM元素。 

00:00:38.280 --> 00:00:39.030
嗯- 

00:00:39.030 --> 00:00:41.061
不只是SVG，还包括所有

00:00:41.061 --> 00:00:42.520
确实是DOM元素。 

00:00:42.540 --> 00:00:43.268
是的

00:00:43.268 --> 00:00:44.430
所有系统- 

00:00:44.430 --> 00:00:45.160
是的

00:00:45.160 --> 00:00:47.150
所以您应该小心，因为您

00:00:47.150 --> 00:00:48.706
我移动了它们，这将激发布局。 

00:00:48.706 --> 00:00:51.130
但是，图层操作将停止SVG根目录。 

00:00:51.130 --> 00:00:53.097
这是我们的时代之一

00:00:53.097 --> 00:00:55.130
所谓的布局边界就是布局

00:00:55.130 --> 00:00:56.320
它不在文档的中心。 

00:00:56.320 --> 00:00:57.990
它以SVG组件为中心。 

00:00:57.990 --> 00:00:59.240
你能解释一下吗？ 

00:00:59.240 --> 00:01:01.031
另一件事是转换。 

00:01:01.031 --> 00:01:02.800
通常我们将其提升到自己的层， 

00:01:02.800 --> 00:01:04.249
然后我们将其转换。 

00:01:04.249 --> 00:01:06.301
这不适用于Chrome中的SVG上下文。 

00:01:06.301 --> 00:01:07.987
不确定其他浏览器， 

00:01:07.987 --> 00:01:10.270
但是在Chrome中，我们不会将任何内容上传到其图层。 

00:01:10.270 --> 00:01:12.367
添加时，它很容易更改或翻译。 

00:01:12.367 --> 00:01:13.610
所以它总是重新粉刷？ 

00:01:13.610 --> 00:01:14.685
它总是重新粉刷。 

00:01:14.685 --> 00:01:16.289
所以您应该注意这一点。 

00:01:16.289 --> 00:01:18.580
老实说，我对SVG期望如此。 

00:01:18.580 --> 00:01:20.510
因为出于某种原因，我考虑了一下， 

00:01:20.510 --> 00:01:22.720
作为面料比什么都重要。 

00:01:22.720 --> 00:01:23.590
没错

00:01:23.590 --> 00:01:26.530
但我希望-我希望它会在某个时候发展起来， 

00:01:26.530 --> 00:01:30.150
那个发展也许……尽管，我不知道。 

00:01:30.150 --> 00:01:32.220
然后，他们加速了GPU吗？ 

00:01:32.220 --> 00:01:34.950
如果您具有激活的栅格化GPU密钥，它们就可以。 

00:01:34.950 --> 00:01:38.670
实际上，当今提高SVG性能的最佳方法之一是， 

00:01:38.670 --> 00:01:40.430
在手机上肯定有... 

00:01:40.430 --> 00:01:42.470
至少适用于Chrome的GPU栅格化。 

00:01:42.470 --> 00:01:44.480
以及获得方式，搜索方式， 

00:01:44.480 --> 00:01:47.790
在Google上，我真的认为这就像魔术。 

00:01:47.790 --> 00:01:50.550
可能是视口Chromium。 

00:01:50.550 --> 00:01:54.640
或者我认为是Ganesh，或GPU光栅化Chrome 

00:01:54.640 --> 00:01:57.620
有人会带你走向世界， 

00:01:57.620 --> 00:01:58.650
你想成为的。 

00:01:58.650 --> 00:02:03.260
下一个问题：您能停下来吗-我不知道为什么... 

00:02:03.260 --> 00:02:05.480
将它们放在引号中。 

00:02:05.480 --> 00:02:07.770
您可以关闭网络动画。 

00:02:07.770 --> 00:02:11.400
在非常非常非常慢的设备上。 

00:02:11.400 --> 00:02:12.930
所以你应该至少有五个。 

00:02:12.930 --> 00:02:14.954
然后，他们将三只海龟作为表情符号。 

00:02:14.954 --> 00:02:17.120
我想我知道这个人的意思。 

00:02:17.120 --> 00:02:19.880
这意味着它们很慢，非常慢，这些设备。 

00:02:19.880 --> 00:02:24.690
我真的想不出一种应对动画的方法。 

00:02:24.690 --> 00:02:27.160
我认为您应该使用的是： 

00:02:27.160 --> 00:02:30.380
绩效观察员

00:02:30.380 --> 00:02:34.000
现在至少可以在Works上使用。 

00:02:34.000 --> 00:02:36.227
他最终可以帮助您做到这一点。 

00:02:36.227 --> 00:02:38.360
当我阅读这个问题时，我的第一个直觉是

00:02:38.360 --> 00:02:41.850
可能是某种虐待

00:02:41.850 --> 00:02:45.250
 requestIdleCallback，因为仅在页面为...时才应使用它。 

00:02:45.250 --> 00:02:46.366
不太忙

00:02:46.366 --> 00:02:48.240
如果使用，则必须完成

00:02:48.240 --> 00:02:49.590
运行网络动画。 

00:02:49.590 --> 00:02:51.920
让我们扭转一下，默认情况下将其禁用

00:02:51.920 --> 00:02:54.990
她使用动画开发网页。 

00:02:54.990 --> 00:02:57.875
前提是它们不会承受严重的压力。 

00:02:57.875 --> 00:02:59.500
我反对这种方式

00:02:59.500 --> 00:03:03.394
现在您进入了主线程-如果您正在制作动画

00:03:03.394 --> 00:03:05.740
使用JavaScript，所有生成的动画将是

00:03:05.740 --> 00:03:07.360
基于主线程，这是正确的。 

00:03:07.360 --> 00:03:09.820
在这种情况下，您可以测试主线程的可用性

00:03:09.820 --> 00:03:13.100
使用idleCallback或请求AnimationFrame或同时使用两者。 

00:03:13.100 --> 00:03:15.560
但是，如果您收到该表格的回复， 

00:03:15.560 --> 00:03:17.040
假设您有动画

00:03:17.040 --> 00:03:18.450
使用过渡实现

00:03:18.450 --> 00:03:20.240
而且您正在使用集成线程

00:03:20.240 --> 00:03:21.494
将继续工作

00:03:21.494 --> 00:03:23.864
即使主线不规则

00:03:23.864 --> 00:03:25.780
您不能使用此技术，因为... 

00:03:25.780 --> 00:03:29.030
就像是<i>“我现在不能做动画</i> 。 <i>”</i> 

00:03:29.030 --> 00:03:32.020
问题甚至在于帧定时API， 

00:03:32.020 --> 00:03:33.824
在主线程中可用。 

00:03:33.824 --> 00:03:35.570
因此它将有益于

00:03:35.570 --> 00:03:37.020
通过动画制作Java脚本。 

00:03:37.020 --> 00:03:38.850
但这不会使那些做的人受益

00:03:38.850 --> 00:03:40.970
使用CSS进行动画制作

00:03:40.970 --> 00:03:42.680
或类似的东西。 

00:03:42.680 --> 00:03:45.560
一般来说，问题仍然存在， 

00:03:45.560 --> 00:03:49.749
停止动画是正确的决定吗？ 

00:03:49.749 --> 00:03:50.540
来自基金会？ 

00:03:50.540 --> 00:03:53.700
因为如果你的UX能承受

00:03:53.700 --> 00:03:58.510
缺乏动画似乎根本不需要它。 

00:03:58.510 --> 00:04:01.107
我们不应该只为理想主义做动画。 

00:04:01.107 --> 00:04:02.630
但是它们通常很有用， 

00:04:02.630 --> 00:04:03.910
如果没有，那么

00:04:03.910 --> 00:04:05.420
您总是可以忽略它们，因为它们

00:04:05.420 --> 00:04:08.350
通常对用户功能感兴趣。 

00:04:08.350 --> 00:04:09.567
是的

00:04:09.567 --> 00:04:11.780
但是，在某些人看到的地方，它仍然不平衡， 

00:04:11.780 --> 00:04:13.840
他们可能只将其视为可用扩展

00:04:13.840 --> 00:04:15.990
以防您的设备负担得起。 

00:04:15.990 --> 00:04:18.560
正如我说的，我认为您现在不能依靠它们， 

00:04:18.560 --> 00:04:20.274
也不涉及Works中存在的任何内容， 

00:04:20.274 --> 00:04:22.390
这是表达方式，例如： 

00:04:22.390 --> 00:04:24.545
 <i>“这个装置必须加强</i> 。 <i>”</i> 

00:04:24.545 --> 00:04:27.080
但我认为您是对的，可能是requestIdleCallback 

00:04:27.080 --> 00:04:28.420
是我们可以走的最短路径。 

00:04:28.420 --> 00:04:29.120
好吧

00:04:29.120 --> 00:04:31.010
这些是你问的问题， 

00:04:31.010 --> 00:04:33.660
我们将邀请您在评论中提出更多问题， 

00:04:33.660 --> 00:04:34.560
下面。 

00:04:34.560 --> 00:04:36.670
在Twitter上，我是aerotwist， 

00:04:36.670 --> 00:04:38.140
我@ DasSurma 

00:04:38.140 --> 00:04:40.060
那意味着：苏尔玛“死亡”， 

00:04:40.060 --> 00:04:41.936
但是你用德语学到了。 

00:04:41.936 --> 00:04:44.010
我会忘记我对德语的一切了解，直到- 

00:04:44.010 --> 00:04:45.130
你教过他

00:04:45.130 --> 00:04:45.990
是的，他做到了。 

00:04:45.990 --> 00:04:48.530
他做到了。 

00:04:48.530 --> 00:04:49.880
好吧，问你问题。 

00:04:49.880 --> 00:04:51.000
或在Twitter上写信给我们。 

00:04:51.000 --> 00:04:53.250
下次我们会与您联系。 

