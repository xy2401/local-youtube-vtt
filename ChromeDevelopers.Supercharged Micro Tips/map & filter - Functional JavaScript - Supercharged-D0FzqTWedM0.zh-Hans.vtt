WEBVTT
Kind: captions
Language: zh-Hans

00:00:00.000 --> 00:00:03.968
 [音乐播放] 

00:00:11.420 --> 00:00:13.040
 SURMA：函数式编程具有

00:00:13.040 --> 00:00:16.239
状态驱动的UI最近在网络上变得越来越流行

00:00:16.239 --> 00:00:18.860
像React这样的框架鼓励这种

00:00:18.860 --> 00:00:20.630
编程模式。 

00:00:20.630 --> 00:00:22.850
在这个迷你系列中，我想开始你

00:00:22.850 --> 00:00:26.060
对功能数组方法的简短说明

00:00:26.060 --> 00:00:28.100
的JavaScript。 

00:00:28.100 --> 00:00:31.580
两个最基本且可以说是最重要的功能数组

00:00:31.580 --> 00:00:34.610
工具是地图和过滤器，两者

00:00:34.610 --> 00:00:37.520
是数组上的方法并创建新数组

00:00:37.520 --> 00:00:40.030
具有特定的属性。 

00:00:40.030 --> 00:00:42.790
过滤器应用了一个函数，也称为predicate， 

00:00:42.790 --> 00:00:45.820
到数组中的每个元素，并且仅保留

00:00:45.820 --> 00:00:49.250
predicate评估为true的项目。 

00:00:49.250 --> 00:00:51.640
例如，如果您有一组输入字段， 

00:00:51.640 --> 00:00:54.700
您可能要过滤掉所有不输入的字段

00:00:54.700 --> 00:00:56.620
键入一个值。 

00:00:56.620 --> 00:00:59.710
映射还将函数应用于数组中的每个元素

00:00:59.710 --> 00:01:02.560
并替换新数组中的原始值

00:01:02.560 --> 00:01:05.410
该函数的返回值。 

00:01:05.410 --> 00:01:07.090
听起来有些不可思议， 

00:01:07.090 --> 00:01:09.140
但是它非常强大。 

00:01:09.140 --> 00:01:12.400
因此，例如，在过滤掉我们的输入字段列表之后， 

00:01:12.400 --> 00:01:15.340
现在我们可以停止输入DOM元素

00:01:15.340 --> 00:01:18.010
而是为每个元素创建JSON对象

00:01:18.010 --> 00:01:20.110
只包含一些信息

00:01:20.110 --> 00:01:21.560
我们真正需要的

00:01:21.560 --> 00:01:24.830
因此，例如，字段的名称和字段的值。 

00:01:24.830 --> 00:01:27.040
因此，无论何时使用收藏， 

00:01:27.040 --> 00:01:30.010
地图和过滤器非常方便。 

00:01:30.010 --> 00:01:31.185
再见。 

00:01:31.185 --> 00:01:31.810
 [音乐播放] 

00:01:31.810 --> 00:01:34.900
两种数组方法下降了很多。 

00:01:34.900 --> 00:01:36.287
如果您觉得这很有趣， 

00:01:36.287 --> 00:01:37.870
应该订阅这个频道，所以我们

00:01:37.870 --> 00:01:40.640
下一集结束时可以向您发送通知。 

00:01:40.640 --> 00:01:44.760
但是在那之前，为什么不看更多的Supercharged？ 

