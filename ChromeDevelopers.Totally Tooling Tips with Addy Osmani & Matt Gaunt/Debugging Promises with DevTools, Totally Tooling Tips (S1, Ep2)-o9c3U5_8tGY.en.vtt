WEBVTT
Kind: captions
Language: en

00:00:04.000 --> 00:00:07.500
[THEME MUSIC]

00:00:13.000 --> 00:00:15.480
MATT GAUNT: So you're presenting
at I/O this year, right?

00:00:15.480 --> 00:00:17.180
ADDY OSMANI: Yes.

00:00:17.180 --> 00:00:19.810
MATT GAUNT: I have one
bit of advice for you

00:00:19.810 --> 00:00:23.970
that was given to me
by, um, Paul Irish.

00:00:23.970 --> 00:00:29.430
So when I first did a
rehearsal for my I/O talk,

00:00:29.430 --> 00:00:32.566
everything was, like, OK-- got
some feedback on how to make it

00:00:32.566 --> 00:00:33.690
better, all the rest of it.

00:00:33.690 --> 00:00:35.731
And Paul Irish kind of
gave me one bit of advice.

00:00:39.220 --> 00:00:39.930
And he quoted me.

00:00:39.930 --> 00:00:41.520
He was just like, when
you introduce yourself,

00:00:41.520 --> 00:00:43.030
you should have said,
"Hi, I'm Matt Gaunt."

00:00:43.030 --> 00:00:43.530
And, no.

00:00:43.530 --> 00:00:45.840
It was, "Hi, I'm,
um, Matt Gaunt."

00:00:45.840 --> 00:00:48.010
He was just like,
don't-- it's your name.

00:00:48.010 --> 00:00:49.170
You know your name.

00:00:49.170 --> 00:00:51.029
You don't need to
think about it.

00:00:51.029 --> 00:00:52.570
ADDY OSMANI: Do you
realize that when

00:00:52.570 --> 00:00:54.060
you were talking
about Paul Irish,

00:00:54.060 --> 00:00:56.574
you called him "um, Paul Irish"?

00:00:56.574 --> 00:00:57.470
MATT GAUNT: Yes!

00:00:57.470 --> 00:00:59.620
So that's what
I'm talking about.

00:00:59.620 --> 00:01:00.690
I can't do names.

00:01:00.690 --> 00:01:02.933
So the minute I got
onstage at I/O--

00:01:02.933 --> 00:01:05.349
ADDY OSMANI: In your head, is
"um" just the same as, like,

00:01:05.349 --> 00:01:07.460
"Mr." or "Mrs." or "Dr."?

00:01:07.460 --> 00:01:08.909
MATT GAUNT: Yes.

00:01:08.909 --> 00:01:11.450
If that was on the drop-down,
I could type that in, actually.

00:01:11.450 --> 00:01:12.300
I'd totally do that.
"Um Matt Gaunt."

00:01:12.300 --> 00:01:12.520
ADDY OSMANI: There we go.

00:01:12.520 --> 00:01:14.570
We should have introduced
that into the standard.

00:01:14.570 --> 00:01:16.569
MATT GAUNT: Anyway, that's
my one bit of advice.

00:01:16.569 --> 00:01:18.770
Because I got onstage
at I/O, and that

00:01:18.770 --> 00:01:21.390
was the first thing I had to
say, was introduce my name,

00:01:21.390 --> 00:01:23.840
and I actually went, "Hi,
my name's, um, Matt Gaunt."

00:01:23.840 --> 00:01:27.540
And then, instantly, I
was just like, dammit!

00:01:27.540 --> 00:01:30.460
I'd been onstage literally
no longer than 10 seconds,

00:01:30.460 --> 00:01:32.260
and I've already messed it up.

00:01:32.260 --> 00:01:33.070
So there.

00:01:33.070 --> 00:01:33.894
There you go.

00:01:33.894 --> 00:01:34.560
ADDY OSMANI: OK.

00:01:34.560 --> 00:01:37.205
I'll be sure to
follow that advice.

00:01:37.205 --> 00:01:38.830
MATT GAUNT: If you
say "um" now, you're

00:01:38.830 --> 00:01:40.430
also going to get that
mental monologue of me

00:01:40.430 --> 00:01:40.710
telling that entire story.

00:01:40.710 --> 00:01:42.585
ADDY OSMANI: I'm already
worrying about this.

00:01:42.585 --> 00:01:43.924
MATT GAUNT: Good.

00:01:43.924 --> 00:01:45.340
Do you have any
tips for promises?

00:01:45.340 --> 00:01:47.764
ADDY OSMANI: Um, yes I do.

00:01:47.764 --> 00:01:49.930
MATT GAUNT: I see what you
did there, and I like it.

00:01:49.930 --> 00:01:52.700
Because I'm using them
for ServiceWorker and push

00:01:52.700 --> 00:01:56.050
notifications, and
it's the first time

00:01:56.050 --> 00:01:58.460
I've really been using
promises extensively.

00:01:58.460 --> 00:02:00.390
Especially with
push, you get really

00:02:00.390 --> 00:02:01.902
quite deep nested promises.

00:02:01.902 --> 00:02:03.360
I'm kind of getting
a bit lost when

00:02:03.360 --> 00:02:04.592
it comes to debugging them.

00:02:04.592 --> 00:02:06.300
I was just wondering
if you had any tips.

00:02:06.300 --> 00:02:09.614
Because, at the moment, DevTools
is just not helping that much.

00:02:09.614 --> 00:02:10.530
ADDY OSMANI: OK, sure.

00:02:10.530 --> 00:02:13.710
So I could show you
something if you like.

00:02:13.710 --> 00:02:17.410
We've been recently working on
trying to improve visualizing

00:02:17.410 --> 00:02:19.300
the promise flow in DevTools.

00:02:19.300 --> 00:02:20.410
MATT GAUNT: OK.

00:02:20.410 --> 00:02:22.743
ADDY OSMANI: And something
you're probably used to using

00:02:22.743 --> 00:02:25.620
is console logs or the debugger
statements to debug promises.

00:02:25.620 --> 00:02:27.089
But we've got a
new Promises panel.

00:02:27.089 --> 00:02:27.880
And the idea here--

00:02:27.880 --> 00:02:29.505
MATT GAUNT: Under
the little draw thing

00:02:29.505 --> 00:02:30.542
that I frickin' hate?

00:02:30.542 --> 00:02:31.250
ADDY OSMANI: Yes.

00:02:31.250 --> 00:02:33.520
And the idea here is
similar to the timeline.

00:02:33.520 --> 00:02:35.330
Just start recording,
and then any

00:02:35.330 --> 00:02:39.219
promises they start getting
pulled inside your scripts

00:02:39.219 --> 00:02:40.260
will get visualized here.

00:02:40.260 --> 00:02:42.270
So here we've got some
promises that started off

00:02:42.270 --> 00:02:45.320
in a gray Pending state, and
then they turned green as soon

00:02:45.320 --> 00:02:46.410
as they were resolved.

00:02:46.410 --> 00:02:48.118
MATT GAUNT: So that's
like the good case?

00:02:48.118 --> 00:02:49.960
It's like the dot,
then everything's fine?

00:02:49.960 --> 00:02:51.070
ADDY OSMANI: Exactly.

00:02:51.070 --> 00:02:54.000
You can also see what lines
those promises were defined on.

00:02:54.000 --> 00:02:56.700
You can just click to jump
straight through to the code

00:02:56.700 --> 00:02:58.700
where they were define,
which is kind of useful.

00:02:58.700 --> 00:02:59.660
MATT GAUNT: Nice.

00:02:59.660 --> 00:03:02.040
ADDY OSMANI: You can also see
where the promises settled

00:03:02.040 --> 00:03:04.420
and jump to the line
of code for those.

00:03:04.420 --> 00:03:07.990
And you get to see the time it
took to settle those promises.

00:03:07.990 --> 00:03:08.872
MATT GAUNT: OK.

00:03:08.872 --> 00:03:09.756
Nice.

00:03:09.756 --> 00:03:12.630
I imagine the time to settle is
particularly useful with things

00:03:12.630 --> 00:03:14.296
like Fetch, where you're
doing a number of requests,

00:03:14.296 --> 00:03:14.636
and all that kind of stuff.

00:03:14.636 --> 00:03:15.760
ADDY OSMANI: Yeah, exactly.

00:03:15.760 --> 00:03:18.260
So here's another demo
where, basically, I've

00:03:18.260 --> 00:03:21.185
got a promise that's going to
be rejecting intentionally,

00:03:21.185 --> 00:03:22.610
just so I can show you this.

00:03:22.610 --> 00:03:24.760
So here, these are
actually showing up in red.

00:03:24.760 --> 00:03:28.040
So green is Resolved, red is
Rejected, and gray is Pending.

00:03:28.040 --> 00:03:29.580
MATT GAUNT: Someone
missed a trick

00:03:29.580 --> 00:03:32.860
with not going for just,
like, amber while they're not

00:03:32.860 --> 00:03:34.590
settled or rejected.

00:03:34.590 --> 00:03:36.340
ADDY OSMANI: That seems
like a great patch

00:03:36.340 --> 00:03:37.820
you could write and submit.

00:03:37.820 --> 00:03:40.100
MATT GAUNT: I won't.

00:03:40.100 --> 00:03:42.350
I don't love it that much,
but someone missed a trick.

00:03:42.350 --> 00:03:43.766
ADDY OSMANI: All
right, all right.

00:03:43.766 --> 00:03:45.950
So another thing
we've got in place

00:03:45.950 --> 00:03:47.510
here is, like,
let's say you've got

00:03:47.510 --> 00:03:49.468
a whole ton of different
promises in your page.

00:03:49.468 --> 00:03:52.470
You're finding it hard to
locate a particular one.

00:03:52.470 --> 00:03:54.484
We've got something
for filtering down

00:03:54.484 --> 00:03:56.900
based on different promise
states, so Pending or Fulfilled

00:03:56.900 --> 00:03:57.692
or Rejected.

00:03:57.692 --> 00:03:58.400
MATT GAUNT: Nice.

00:03:58.400 --> 00:04:00.110
So that's the same as
console, where you'd normally

00:04:00.110 --> 00:04:02.550
just search for text in the
filter box-- this is actually

00:04:02.550 --> 00:04:03.750
just based on state?

00:04:03.750 --> 00:04:04.680
ADDY OSMANI: Exactly.

00:04:04.680 --> 00:04:08.267
And then we've got this
little magical async checkbox.

00:04:08.267 --> 00:04:10.850
MATT GAUNT: Yeah, I was going
to say, that doesn't make sense,

00:04:10.850 --> 00:04:12.784
because promises
are async by nature.

00:04:12.784 --> 00:04:14.200
ADDY OSMANI: Well,
let me show you

00:04:14.200 --> 00:04:15.840
why we've got that check box.

00:04:15.840 --> 00:04:18.220
So here I've got an
app that basically

00:04:18.220 --> 00:04:21.250
is going to go and pull
in a new news story

00:04:21.250 --> 00:04:22.400
every couple of seconds.

00:04:22.400 --> 00:04:24.460
And I'm just going and
setting a break point

00:04:24.460 --> 00:04:27.010
at that point where I'm
attending the content

00:04:27.010 --> 00:04:29.080
of the article to the DOM.

00:04:29.080 --> 00:04:31.646
So we're just going to go,
and we're going to do that.

00:04:31.646 --> 00:04:34.060
And if we take a look
at the callstacks

00:04:34.060 --> 00:04:35.900
here, what you'll notice
is that there's not

00:04:35.900 --> 00:04:36.850
a lot of information.

00:04:36.850 --> 00:04:39.500
It's not helping us visualize
the asynchronous control flow,

00:04:39.500 --> 00:04:41.044
what's going on in our app.

00:04:41.044 --> 00:04:42.460
MATT GAUNT: That's
almost useless.

00:04:42.460 --> 00:04:43.835
ADDY OSMANI: It's
almost useless.

00:04:43.835 --> 00:04:45.110
It pretty much is useless.

00:04:45.110 --> 00:04:47.234
So what we're going to do
here is we're going to go

00:04:47.234 --> 00:04:49.431
and we're going to check
the async check box.

00:04:49.431 --> 00:04:51.055
If you click inside
the Promises panel,

00:04:51.055 --> 00:04:54.020
it's just going to sync up
with the normal async debugging

00:04:54.020 --> 00:04:54.910
n in DevTools.

00:04:54.910 --> 00:04:57.430
We're going to redo
this demo once again.

00:04:57.430 --> 00:05:00.140
What you'll now see is we've
got this nice rich whole set

00:05:00.140 --> 00:05:02.150
of asynchronous call
stacks being displayed.

00:05:02.150 --> 00:05:03.740
A lot more
information this time.

00:05:03.740 --> 00:05:05.670
We can see where
promises are resolving;

00:05:05.670 --> 00:05:09.010
we can see XHR requests; we
can see promise resolutions

00:05:09.010 --> 00:05:10.830
for other parts of the app.

00:05:10.830 --> 00:05:13.920
And we can even go and see
what line of code to find them.

00:05:13.920 --> 00:05:16.032
So we can just go and
click, and, as you'll see,

00:05:16.032 --> 00:05:18.240
the line directly in your
source get highlighted too.

00:05:18.240 --> 00:05:20.070
MATT GAUNT: So this is basically
like the promise [INAUDIBLE],

00:05:20.070 --> 00:05:22.075
every single method that's kind
of gone through and resulted

00:05:22.075 --> 00:05:23.110
in other promises
getting [INAUDIBLE].

00:05:23.110 --> 00:05:23.985
ADDY OSMANI: Exactly.

00:05:23.985 --> 00:05:29.230
In fact, we can just go and
see an entire flow right there.

00:05:29.230 --> 00:05:31.750
MATT GAUNT: You can actually
see all of the nested promises

00:05:31.750 --> 00:05:33.750
as they get called and
see how deep it goes.

00:05:33.750 --> 00:05:33.820
Nice.

00:05:33.820 --> 00:05:34.800
ADDY OSMANI: And this
is a little bit better

00:05:34.800 --> 00:05:36.150
than just using console logging.

00:05:36.150 --> 00:05:36.858
MATT GAUNT: Yeah.

00:05:36.858 --> 00:05:41.157
So why not have the async
option always checked?

00:05:41.157 --> 00:05:43.240
ADDY OSMANI: I don't have
a right answer for this,

00:05:43.240 --> 00:05:45.710
but I think it might just be
due to the computational cost

00:05:45.710 --> 00:05:46.780
of having async turned
on all the time.

00:05:46.780 --> 00:05:49.530
MATT GAUNT: Just having to
track everything all the time,

00:05:49.530 --> 00:05:51.810
rather than just track
the result states.

00:05:51.810 --> 00:05:52.690
Nice.

00:05:52.690 --> 00:05:56.540
So this is a video from
your jQuery UK talk?

00:05:56.540 --> 00:05:57.290
ADDY OSMANI: Yeah.

00:05:57.290 --> 00:05:59.824
I recently gave this
talk at jQuery UK

00:05:59.824 --> 00:06:01.365
called "DevTools
State of the Union,"

00:06:01.365 --> 00:06:03.800
which kind of walks
through a performance case

00:06:03.800 --> 00:06:06.375
study and a grab bag
of new tips-- things

00:06:06.375 --> 00:06:07.682
you can do in the DevTools.

00:06:07.682 --> 00:06:09.140
MATT GAUNT: A little
birdie told me

00:06:09.140 --> 00:06:12.820
that you had to be
escorted offstage.

00:06:12.820 --> 00:06:14.430
ADDY OSMANI: What?

00:06:14.430 --> 00:06:18.430
I never get escorted off
the stage for any reason!

00:06:18.430 --> 00:06:21.330
MATT GAUNT: How long was
the talk that you gave?

00:06:21.330 --> 00:06:23.190
ADDY OSMANI: So my
talk was supposed

00:06:23.190 --> 00:06:25.570
to be 30 minutes long, right?

00:06:25.570 --> 00:06:26.270
And I timed it.

00:06:26.270 --> 00:06:28.740
I didn't really get that
much sleep that night.

00:06:28.740 --> 00:06:31.990
Made sure it was 30 minutes.

00:06:31.990 --> 00:06:33.432
MATT GAUNT: How
long was the talk?

00:06:33.432 --> 00:06:34.270
Come on, Addy.

00:06:34.270 --> 00:06:35.690
ADDY OSMANI: It was 34?

00:06:35.690 --> 00:06:36.830
And 1/2?

00:06:36.830 --> 00:06:38.570
MATT GAUNT: How long
would it have taken?

00:06:38.570 --> 00:06:40.930
ADDY OSMANI: 30-- if my
slides hadn't crashed!

00:06:40.930 --> 00:06:42.555
MATT GAUNT: Yeah,
but how long would it

00:06:42.555 --> 00:06:45.340
have taken you to finish before
they kicked you offstage?

00:06:45.340 --> 00:06:47.810
ADDY OSMANI: A little
longer than 30 minutes?

00:06:47.810 --> 00:06:48.310
Maybe?

00:06:48.310 --> 00:06:48.935
MATT GAUNT: 40?

00:06:48.935 --> 00:06:50.359
50?

00:06:50.359 --> 00:06:51.650
ADDY OSMANI: Who knows, really?

00:06:51.650 --> 00:06:54.250
[LAUGHTER]

00:06:54.250 --> 00:06:56.295
ADDY OSMANI: It's one
of life's mysteries.

00:06:56.295 --> 00:07:00.520
[THEME MUSIC]

