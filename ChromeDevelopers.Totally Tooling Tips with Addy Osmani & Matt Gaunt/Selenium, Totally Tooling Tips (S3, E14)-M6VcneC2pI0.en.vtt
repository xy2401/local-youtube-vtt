WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.916
[MUSIC PLAYING]

00:00:12.160 --> 00:00:15.841
MATT GAUNT: So you do testing
for all your projects, right?

00:00:15.841 --> 00:00:18.340
ADDY OSMANI: I usually create
a new issue, assign it to you.

00:00:18.340 --> 00:00:20.650
And then magically, overnight,
my tests get written.

00:00:20.650 --> 00:00:22.497
It's the most wonderful thing.

00:00:22.497 --> 00:00:23.247
MATT GAUNT: Mm-hm.

00:00:23.247 --> 00:00:25.030
Yeah, for you.

00:00:25.030 --> 00:00:28.570
So we did a previous
episode on unit testing

00:00:28.570 --> 00:00:29.680
with things like Mocha.

00:00:29.680 --> 00:00:32.140
And we looked at a whole
host of other ones.

00:00:32.140 --> 00:00:33.610
What do you think
of when someone

00:00:33.610 --> 00:00:36.120
says unit testing to you?

00:00:36.120 --> 00:00:39.020
ADDY OSMANI: Oh, there's like
in-browser testing, CI testing.

00:00:39.020 --> 00:00:40.930
There's usability testing.

00:00:40.930 --> 00:00:42.427
There's an entire minefield.

00:00:42.427 --> 00:00:45.010
MATT GAUNT: Yeah, so this is I
think, the biggest issue that I

00:00:45.010 --> 00:00:46.259
have with a lot of this stuff.

00:00:46.259 --> 00:00:48.970
When I first got into unit
testing, it was like Mocha.

00:00:48.970 --> 00:00:50.337
And it was in the terminal.

00:00:50.337 --> 00:00:52.920
And you get used to this thing
of like, this test passed, this

00:00:52.920 --> 00:00:53.420
failed.

00:00:53.420 --> 00:00:55.600
And that was all cool,
but it's JavaScript.

00:00:55.600 --> 00:00:57.340
It's not in the browser.

00:00:57.340 --> 00:00:59.720
You don't have the browser
API, so it was a bit-- I mean,

00:00:59.720 --> 00:01:00.410
it got confused.

00:01:00.410 --> 00:01:02.879
I was like, well, OK, do
I have to edit my code

00:01:02.879 --> 00:01:05.379
to be separate so it can run
in Node, even though it's going

00:01:05.379 --> 00:01:08.050
to run in a browser, or what?

00:01:08.050 --> 00:01:09.010
That's been cleared up.

00:01:09.010 --> 00:01:10.210
Because obviously,
with Mocha, you

00:01:10.210 --> 00:01:12.431
can run in the browser,
which makes a bit more sense

00:01:12.431 --> 00:01:13.930
if you're building
a browser library

00:01:13.930 --> 00:01:15.700
and you need those APIs.

00:01:15.700 --> 00:01:17.410
But there was always
this weird tension.

00:01:17.410 --> 00:01:21.240
Because a lot of the work I've
been doing super recently,

00:01:21.240 --> 00:01:24.100
I actually got to a point
where Node, I was mocking out

00:01:24.100 --> 00:01:25.405
of a lot of the browser APIs.

00:01:25.405 --> 00:01:28.180
It allows you to make the tests
super fast and super reliable,

00:01:28.180 --> 00:01:29.680
because basically,
nothing was real.

00:01:29.680 --> 00:01:31.090
Everything was
fake and a facade.

00:01:31.090 --> 00:01:33.173
ADDY OSMANI: So you don't
have access to a window.

00:01:33.173 --> 00:01:35.674
You don't have access to any
of those APIs, or these things.

00:01:35.674 --> 00:01:36.339
MATT GAUNT: Yes.

00:01:36.339 --> 00:01:38.090
So you end up doing
one of two things.

00:01:38.090 --> 00:01:41.340
Either you run it inside the
browser with the Mocha stuff,

00:01:41.340 --> 00:01:44.060
and it will actually use those
APIs, which, for the most part,

00:01:44.060 --> 00:01:45.976
I find is good, because
if there's any browser

00:01:45.976 --> 00:01:47.800
differences, you get them.

00:01:47.800 --> 00:01:49.360
Or you mock all
of them out, which

00:01:49.360 --> 00:01:50.699
means it's completely fake.

00:01:50.699 --> 00:01:52.990
But it's normally super fast,
because it's not actually

00:01:52.990 --> 00:01:53.680
doing any work.

00:01:53.680 --> 00:01:55.330
You normally go,
in this case, pass.

00:01:55.330 --> 00:01:58.090
In this case, throw an error.

00:01:58.090 --> 00:01:59.830
But it still kind of
always confused me.

00:01:59.830 --> 00:02:01.450
Like OK, so I have
these two things,

00:02:01.450 --> 00:02:04.020
but it doesn't feel like this
is good on an ongoing basis,

00:02:04.020 --> 00:02:07.690
because if I don't run the
tests, nothing happens.

00:02:07.690 --> 00:02:10.270
So that's when we get
into the Selenium world.

00:02:10.270 --> 00:02:13.255
And it gets super
interesting, slash, weird,

00:02:13.255 --> 00:02:14.380
depending on how you do it.

00:02:14.380 --> 00:02:17.230
So for anyone who doesn't
know, Selenium WebDriver is

00:02:17.230 --> 00:02:19.800
a way of launching a
browser and controlling it,

00:02:19.800 --> 00:02:22.090
is the most generic
way of putting it.

00:02:22.090 --> 00:02:23.930
They have a ton of
different versions,

00:02:23.930 --> 00:02:26.230
but this is the
JavaScript Node version

00:02:26.230 --> 00:02:28.360
I've come to know and love.

00:02:28.360 --> 00:02:32.650
Let's look at super basic,
bare bones, Selenium script.

00:02:32.650 --> 00:02:33.590
And this is it.

00:02:33.590 --> 00:02:35.090
So this is a Node version.

00:02:35.090 --> 00:02:37.090
Selenium has a ton of
different libraries, which

00:02:37.090 --> 00:02:39.830
also doesn't help, because
documentation-- just so much

00:02:39.830 --> 00:02:40.330
stuff.

00:02:40.330 --> 00:02:42.310
But in the most
bare bones thing,

00:02:42.310 --> 00:02:44.500
you create what's known
as a WebDriver builder.

00:02:44.500 --> 00:02:46.000
And at that point,
you can basically

00:02:46.000 --> 00:02:48.501
say, OK, with the builder, I
want it to be a Chrome browser,

00:02:48.501 --> 00:02:49.375
or I want to do this.

00:02:49.375 --> 00:02:51.320
And then you can bolt
on additional things.

00:02:51.320 --> 00:02:52.899
You'd say, build me a driver.

00:02:52.899 --> 00:02:54.565
And from that point,
that is basically--

00:02:54.565 --> 00:02:57.490
you can kind of think of it as
like an instance of a browser.

00:02:57.490 --> 00:02:59.139
So that's what you've got here.

00:02:59.139 --> 00:03:00.930
At that point, you can
just start using it.

00:03:00.930 --> 00:03:02.920
So if we call get,
in this case I'm

00:03:02.920 --> 00:03:04.911
going to launch my Mocha
test, because we want

00:03:04.911 --> 00:03:06.160
to automate all of that stuff.

00:03:06.160 --> 00:03:08.270
We don't want to worry about it.

00:03:08.270 --> 00:03:10.785
And then, we are going to say,
wait until something happens.

00:03:10.785 --> 00:03:12.160
In this case,
we're going to say,

00:03:12.160 --> 00:03:16.030
wait until Mocha results becomes
a thing on the actual thing

00:03:16.030 --> 00:03:17.387
inside the window.

00:03:17.387 --> 00:03:18.970
And then, get the
Mocha results and do

00:03:18.970 --> 00:03:20.390
something useful for them.

00:03:20.390 --> 00:03:23.800
So this is like a really
basic Selenium thing,

00:03:23.800 --> 00:03:25.400
but it's already super helpful.

00:03:25.400 --> 00:03:29.020
So if you're going to run this--
I'm just going to run it with

00:03:29.020 --> 00:03:31.600
Node, ~/test/selenium.

00:03:31.600 --> 00:03:33.580
You're just going to nod
along, while I'm just

00:03:33.580 --> 00:03:34.260
talking to myself.

00:03:34.260 --> 00:03:35.380
ADDY OSMANI: I'm just
going to nod along,

00:03:35.380 --> 00:03:36.796
assume you know
what you're doing.

00:03:36.796 --> 00:03:39.134
MATT GAUNT: Yeah, that's
the safest way of doing it.

00:03:39.134 --> 00:03:41.800
So all it's doing-- you can kind
of see it-- is Chrome pops off,

00:03:41.800 --> 00:03:42.640
and then it closes.

00:03:42.640 --> 00:03:46.240
And you briefly see
the Mocha test running.

00:03:46.240 --> 00:03:47.970
This is super basic,
but it's super nice,

00:03:47.970 --> 00:03:50.470
because it means that you could
put this-- because it's just

00:03:50.470 --> 00:03:52.240
a Node script, you
can put it in npm run,

00:03:52.240 --> 00:03:53.490
or you could add it to Travis.

00:03:53.490 --> 00:03:55.270
You can do whatever you want.

00:03:55.270 --> 00:03:57.079
It's super nice and clean.

00:03:57.079 --> 00:03:58.870
The problem I always
had with this approach

00:03:58.870 --> 00:04:00.790
is, it gets super
manual really quick when

00:04:00.790 --> 00:04:02.210
you run Chrome and Firefox.

00:04:02.210 --> 00:04:05.620
So I created this thing
called selenium-assistant.

00:04:05.620 --> 00:04:08.290
And this entire thing
was like, just tell me

00:04:08.290 --> 00:04:11.260
what browsers are available,
and then just give me

00:04:11.260 --> 00:04:14.045
all of those in a WebDriver
thingy, and then run it.

00:04:14.045 --> 00:04:14.545
Yeah.

00:04:14.545 --> 00:04:17.019
So it's kind of weird, because
you get available browsers.

00:04:17.019 --> 00:04:19.720
And it can give you
stable, beta, and unstable.

00:04:19.720 --> 00:04:22.720
And we've done so much stuff
with service workers and brand

00:04:22.720 --> 00:04:26.350
new APIs that you wanted
to test on all those ones,

00:04:26.350 --> 00:04:28.484
because you knew breaking
changes were coming in.

00:04:28.484 --> 00:04:29.400
ADDY OSMANI: Oh, yeah.

00:04:29.400 --> 00:04:31.660
It's almost impossible
to manually stay

00:04:31.660 --> 00:04:32.968
on top of testing that stuff.

00:04:32.968 --> 00:04:33.676
MATT GAUNT: Yeah.

00:04:33.676 --> 00:04:36.040
So I built this thing.

00:04:36.040 --> 00:04:38.440
And that's all it does is just
simplify all those things.

00:04:38.440 --> 00:04:42.110
And in this case, I've
kind of merged the two.

00:04:42.110 --> 00:04:45.947
So if we do it super role with
just selenium-assistant, what

00:04:45.947 --> 00:04:47.530
it's going to do is
we're going to get

00:04:47.530 --> 00:04:49.330
all the available
browsers, open them

00:04:49.330 --> 00:04:51.340
up, go through the same
steps of running Chrome,

00:04:51.340 --> 00:04:53.410
and then return it.

00:04:53.410 --> 00:04:55.290
And that's super
cool, because you

00:04:55.290 --> 00:04:58.151
get into this super weird world
where suddenly browsers open

00:04:58.151 --> 00:04:59.900
and close, open and
close, open and close.

00:04:59.900 --> 00:05:01.170
And then you see
it go into Firefox,

00:05:01.170 --> 00:05:03.060
and then it's open and
close, open and close.

00:05:03.060 --> 00:05:04.434
There's still one
more big issue.

00:05:04.434 --> 00:05:06.449
ADDY OSMANI: It's almost
as if you enjoy chaos.

00:05:06.449 --> 00:05:08.240
MATT GAUNT: Well, it's
great when it works.

00:05:08.240 --> 00:05:09.510
It's getting to that point.

00:05:09.510 --> 00:05:12.380
You have this Mocha environment
where everything builds, runs,

00:05:12.380 --> 00:05:14.706
and it either passes or fails.

00:05:14.706 --> 00:05:16.080
Selenium just
gives you the piece

00:05:16.080 --> 00:05:17.163
that opens up the browser.

00:05:17.163 --> 00:05:18.030
ADDY OSMANI: Right.

00:05:18.030 --> 00:05:20.546
MATT GAUNT: It doesn't actually
give you the pass-fail.

00:05:20.546 --> 00:05:22.170
Selenium can open,
do all those things.

00:05:22.170 --> 00:05:24.086
Things can go horribly
wrong and it just goes,

00:05:24.086 --> 00:05:26.639
well, I don't care.

00:05:26.639 --> 00:05:29.180
And the worst thing with that
is, if you have a Selenium test

00:05:29.180 --> 00:05:31.407
and something goes wrong,
Selenium doesn't quit.

00:05:31.407 --> 00:05:33.240
It doesn't close that
browser, so you end up

00:05:33.240 --> 00:05:36.600
with a desktop full of 20
different browsers opened

00:05:36.600 --> 00:05:37.387
simultaneously.

00:05:37.387 --> 00:05:38.970
The way around that
is you kind of end

00:05:38.970 --> 00:05:42.480
up mashing Mocha and
Selenium together.

00:05:42.480 --> 00:05:44.640
And then you get
super trippy inception

00:05:44.640 --> 00:05:47.250
where you've got Mocha
running a Selenium test, which

00:05:47.250 --> 00:05:49.950
is running Mocha in the
browser, to then report back

00:05:49.950 --> 00:05:53.550
to your Mocha/Selenium thing,
which is what I'm doing here.

00:05:53.550 --> 00:05:54.700
Because you know what?

00:05:54.700 --> 00:05:55.509
That's true chaos.

00:05:55.509 --> 00:05:56.550
And that's what you need.

00:05:56.550 --> 00:05:57.710
And it's kind of interesting.

00:05:57.710 --> 00:05:59.126
So you get the
available browsers,

00:05:59.126 --> 00:06:01.480
and you say, add Mocha test
for each individual browser.

00:06:01.480 --> 00:06:04.260
So we've got foreach,
addMochaTest.

00:06:04.260 --> 00:06:05.970
Inside of this,
we're then saying,

00:06:05.970 --> 00:06:08.880
describe a new test suite.

00:06:08.880 --> 00:06:11.150
And then, before each one,
get the Selenium driver.

00:06:11.150 --> 00:06:12.935
So that's doing the
builder stuff for me.

00:06:12.935 --> 00:06:14.310
And then, after
each, I just want

00:06:14.310 --> 00:06:16.050
to make sure I call
quit on that browser.

00:06:16.050 --> 00:06:18.630
Because without that, like I
say, especially when you start

00:06:18.630 --> 00:06:20.700
working on this, if you
don't exit at the end,

00:06:20.700 --> 00:06:22.250
it's going to suck.

00:06:22.250 --> 00:06:26.100
So mocha
~/test/selenium/mocha-assistant.

00:06:26.100 --> 00:06:28.050
And this time, it's going
to open the browser,

00:06:28.050 --> 00:06:30.697
listen for the results, and come
back whether it works or not.

00:06:30.697 --> 00:06:32.280
But I've also added
an additional step

00:06:32.280 --> 00:06:34.470
to this one where, because
we're now in Mocha,

00:06:34.470 --> 00:06:37.472
we can do individual tests,
I have that bunch of tests.

00:06:37.472 --> 00:06:39.180
So it's like open the
browser with Mocha,

00:06:39.180 --> 00:06:41.177
run through all the tests
that are unit tests.

00:06:41.177 --> 00:06:43.260
And then I've added one
at the end, which is like,

00:06:43.260 --> 00:06:46.800
OK, load another page,
click on the About link,

00:06:46.800 --> 00:06:48.962
check that it actually
went to the About page.

00:06:48.962 --> 00:06:50.670
And this is kind of
the interesting thing

00:06:50.670 --> 00:06:53.859
with Mocha is you start getting
into more-- which I think

00:06:53.859 --> 00:06:56.400
you'd class as an integration
test-- but it's like, make sure

00:06:56.400 --> 00:06:59.790
the behavior is the actual
end thing that I'm expecting.

00:06:59.790 --> 00:07:01.334
And I call them
integration tests,

00:07:01.334 --> 00:07:03.000
so I've kind of labeled
them differently

00:07:03.000 --> 00:07:06.450
to highlight the fact
they're going to be long,

00:07:06.450 --> 00:07:08.936
because I think that's
part of the point is unit

00:07:08.936 --> 00:07:10.310
testing's going
to be super fast,

00:07:10.310 --> 00:07:12.226
super reliable, which
is why I'm kind of like,

00:07:12.226 --> 00:07:14.700
you could mock it out,
and it makes sense.

00:07:14.700 --> 00:07:17.370
Integration tests are
the big, long, scary,

00:07:17.370 --> 00:07:18.820
can take a while kind of things.

00:07:18.820 --> 00:07:22.030
And there's a ton of ways you
can skin both of these cats.

00:07:22.030 --> 00:07:23.650
But I think it makes
a lot of sense.

00:07:23.650 --> 00:07:26.070
So the super basic integration
test-- in this case,

00:07:26.070 --> 00:07:27.930
we have my website.

00:07:27.930 --> 00:07:30.750
I'm looking for a particular
link, which I'm executing

00:07:30.750 --> 00:07:32.442
in the page, clicking it.

00:07:32.442 --> 00:07:33.900
And then, at the
very end, I'm just

00:07:33.900 --> 00:07:37.290
saying, OK, wait until the
document title is actually

00:07:37.290 --> 00:07:38.672
what I expect it to be.

00:07:38.672 --> 00:07:40.380
ADDY OSMANI: How well
does all this stuff

00:07:40.380 --> 00:07:42.330
play with service worker?

00:07:42.330 --> 00:07:44.281
MATT GAUNT: So that's
where I ended up

00:07:44.281 --> 00:07:46.530
getting into the Selenium
stuff, because I was writing

00:07:46.530 --> 00:07:47.654
Mocha tests in the browser.

00:07:47.654 --> 00:07:49.830
And that was great
because it meant

00:07:49.830 --> 00:07:52.570
a really repetitive
way of running tests

00:07:52.570 --> 00:07:53.790
against service worker APIs.

00:07:53.790 --> 00:07:54.990
And it was the only
way of doing it

00:07:54.990 --> 00:07:56.531
in a sane way,
especially when you're

00:07:56.531 --> 00:07:58.909
learning, because there's
lots of edge cases.

00:07:58.909 --> 00:08:01.200
It was the then running them
in each individual browser

00:08:01.200 --> 00:08:04.967
and repeatedly doing it, as well
as then running it in the CI.

00:08:04.967 --> 00:08:06.550
You need all of that
in a Node script,

00:08:06.550 --> 00:08:08.910
which is why I landed
on Mocha afterwards,

00:08:08.910 --> 00:08:11.910
because you kick it
off on the Node side,

00:08:11.910 --> 00:08:13.350
and then it's just JavaScript.

00:08:13.350 --> 00:08:15.430
And you're not testing
any Node stuff.

00:08:15.430 --> 00:08:17.700
You're only using Selenium
to launch the browser,

00:08:17.700 --> 00:08:19.040
do certain things.

00:08:19.040 --> 00:08:21.960
And plus, having that step
where you can then launch it,

00:08:21.960 --> 00:08:24.960
perform certain
tasks on a demo page,

00:08:24.960 --> 00:08:27.210
and then check what the
response is from the browser

00:08:27.210 --> 00:08:30.210
is insanely helpful,
especially for figuring out

00:08:30.210 --> 00:08:34.320
any possible browser differences
or bugs in each one, of which

00:08:34.320 --> 00:08:37.440
there was many back in the day.

00:08:37.440 --> 00:08:38.700
So that's where I'm at.

00:08:38.700 --> 00:08:41.850
And I think I'm now starting
to try and delineate

00:08:41.850 --> 00:08:43.950
between unit testing
and integration tests,

00:08:43.950 --> 00:08:47.370
because with Selenium, you are
instantly in flaky territory.

00:08:47.370 --> 00:08:50.280
Like, WebDriver just
does random stuff,

00:08:50.280 --> 00:08:51.980
because of lulz and funzies.

00:08:51.980 --> 00:08:54.390
ADDY OSMANI: Define
random stuff.

00:08:54.390 --> 00:08:56.280
MATT GAUNT: It would
just-- so the worst

00:08:56.280 --> 00:08:58.650
thing with a lot of this
stuff is you will randomly

00:08:58.650 --> 00:09:00.360
get one browser
updating, and it will not

00:09:00.360 --> 00:09:03.420
work with its current version
of its WebDriver equivalent.

00:09:03.420 --> 00:09:06.810
Your CI kind of goes out
the window at that point.

00:09:06.810 --> 00:09:09.060
But it will often come up
with a fix, sooner or later.

00:09:09.060 --> 00:09:12.750
And it's very rare that that
will land on stable releases.

00:09:12.750 --> 00:09:15.060
But there are just
times where, let's say,

00:09:15.060 --> 00:09:17.280
you're using Express,
or some other Node

00:09:17.280 --> 00:09:18.880
module start a local server.

00:09:18.880 --> 00:09:21.450
If for whatever reason the
browser talking to Express

00:09:21.450 --> 00:09:24.820
causes an issue and
something breaks, it breaks.

00:09:24.820 --> 00:09:27.870
And that may be a once in a
lifetime opportunity on the CI

00:09:27.870 --> 00:09:29.940
that you will never see again.

00:09:29.940 --> 00:09:31.890
So I'm finding I'm
adding retries a lot

00:09:31.890 --> 00:09:33.450
for Selenium WebDriver tests.

00:09:33.450 --> 00:09:35.400
And generally, that
weeds out a lot of issues

00:09:35.400 --> 00:09:36.900
to the point where
you're like, this

00:09:36.900 --> 00:09:38.108
is actually a bug in my code.

00:09:38.108 --> 00:09:40.860
ADDY OSMANI: What's the
typical number of retries you--

00:09:40.860 --> 00:09:42.246
MATT GAUNT: I've been
landing on, like, three.

00:09:42.246 --> 00:09:42.612
ADDY OSMANI: Three?

00:09:42.612 --> 00:09:43.152
OK.

00:09:43.152 --> 00:09:44.610
MATT GAUNT: And
that's just largely

00:09:44.610 --> 00:09:46.296
because, nine times
out of 10, it's

00:09:46.296 --> 00:09:47.670
because I'm using
like-- I'm even

00:09:47.670 --> 00:09:50.080
going so far with
integration tests of testing

00:09:50.080 --> 00:09:52.260
against real live networks.

00:09:52.260 --> 00:09:53.280
You think of push.

00:09:53.280 --> 00:09:55.852
You need the browser
to talk to whatever

00:09:55.852 --> 00:09:57.810
push service they're
going to talk to, and then

00:09:57.810 --> 00:09:58.768
get a network response.

00:09:58.768 --> 00:10:02.880
And if for whatever reason
the CI's internet connection

00:10:02.880 --> 00:10:05.380
is broken, that means my
test is going to fail.

00:10:05.380 --> 00:10:07.590
It's going to get so
far, and then die.

00:10:07.590 --> 00:10:09.298
ADDY OSMANI: I think
you've been tackling

00:10:09.298 --> 00:10:11.580
some of the sort of bleeding
edge around unit testing,

00:10:11.580 --> 00:10:13.680
dealing with service
worker, dealing with push,

00:10:13.680 --> 00:10:15.662
and all of those other
newer platform APIs.

00:10:15.662 --> 00:10:17.870
MATT GAUNT: I don't think
it's bleeding edge testing,

00:10:17.870 --> 00:10:21.120
I think it's just I've been
testing a lot of bleeding edge

00:10:21.120 --> 00:10:23.190
APIs, which is why
I'm reaching a lot

00:10:23.190 --> 00:10:25.230
of these weird situations.

00:10:25.230 --> 00:10:27.695
And it's also the reason why
I'm finding it so useful.

00:10:27.695 --> 00:10:29.820
Because the main thing is,
if I build these things,

00:10:29.820 --> 00:10:31.070
I also don't want
to babysit them.

00:10:31.070 --> 00:10:31.312
ADDY OSMANI: Right.

00:10:31.312 --> 00:10:31.812
Right.

00:10:31.812 --> 00:10:34.040
MATT GAUNT: Because you
just lumber me with an issue

00:10:34.040 --> 00:10:36.373
that I then don't want to
have to keep on looking after.

00:10:36.373 --> 00:10:38.264
I just want you to deal with it.

00:10:38.264 --> 00:10:39.930
ADDY OSMANI: That's
not going to happen.

00:10:39.930 --> 00:10:41.030
MATT GAUNT: Yeah, I know.

00:10:41.030 --> 00:10:41.280
ADDY OSMANI: That's just not.

00:10:41.280 --> 00:10:42.700
MATT GAUNT: But
it's interesting.

00:10:42.700 --> 00:10:44.700
I think everyone should
be looking at this stuff

00:10:44.700 --> 00:10:47.279
and playing around with it.

00:10:47.279 --> 00:10:49.320
Like the next step for me
is looking at services,

00:10:49.320 --> 00:10:51.750
like BrowserStack and
SauceLabs, which I think,

00:10:51.750 --> 00:10:53.640
now that I understand
Selenium, I'm

00:10:53.640 --> 00:10:55.140
at that point where
I can appreciate

00:10:55.140 --> 00:10:57.974
what SauceLabs does for me.

00:10:57.974 --> 00:10:59.640
But I think that's
the interesting thing

00:10:59.640 --> 00:11:03.690
is I feel like everyone who does
this starts off raw Selenium,

00:11:03.690 --> 00:11:06.485
goes through the pain, realizes
there's abstractions that exist

00:11:06.485 --> 00:11:07.360
and they want to use.

00:11:07.360 --> 00:11:09.193
ADDY OSMANI: And then
they get to this point

00:11:09.193 --> 00:11:12.580
where they could do a follow
up "Totally Tooling Tips"

00:11:12.580 --> 00:11:13.902
episode on that topic.

00:11:13.902 --> 00:11:14.610
MATT GAUNT: Boom.

00:11:14.610 --> 00:11:17.960
[MUSIC PLAYING]

