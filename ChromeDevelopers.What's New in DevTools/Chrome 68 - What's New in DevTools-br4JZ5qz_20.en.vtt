WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.423
[MUSIC PLAYING]

00:00:05.654 --> 00:00:06.820
KAYCE BASQUES: Welcome back.

00:00:06.820 --> 00:00:10.090
For Chrome 68, we've got some
new Preview and Autocomplete

00:00:10.090 --> 00:00:12.520
features in the console
and a major upgrade

00:00:12.520 --> 00:00:14.710
to the Audits panel.

00:00:14.710 --> 00:00:16.420
Eager Evaluation
lets you preview

00:00:16.420 --> 00:00:18.940
the results of expressions
without explicitly

00:00:18.940 --> 00:00:20.410
executing them.

00:00:20.410 --> 00:00:22.600
Enable it by opening
Console Settings

00:00:22.600 --> 00:00:25.660
and checking the Eager
Evaluation checkbox.

00:00:25.660 --> 00:00:28.240
Now, when I do a Sort
on this array of names,

00:00:28.240 --> 00:00:31.330
I see a preview of the result,
even though I haven't actually

00:00:31.330 --> 00:00:33.190
pressed Enter.

00:00:33.190 --> 00:00:36.040
Note that, by design, it doesn't
work with expressions that

00:00:36.040 --> 00:00:38.180
change the state of the page.

00:00:38.180 --> 00:00:41.920
For example, if I change the H1
text on the DevTools home page,

00:00:41.920 --> 00:00:44.830
I don't see a preview.

00:00:44.830 --> 00:00:47.650
The console now also previews
what arguments a function

00:00:47.650 --> 00:00:49.510
expects.

00:00:49.510 --> 00:00:51.190
Just type out the
function and you'll

00:00:51.190 --> 00:00:53.350
see a Tooltip above your cursor.

00:00:53.350 --> 00:00:56.410
A question mark next to an
arg, such as the one here next

00:00:56.410 --> 00:00:59.710
to Options, represents
an optional argument.

00:00:59.710 --> 00:01:02.650
An ellipsis, such as the
one here next to Items,

00:01:02.650 --> 00:01:05.670
represents a spread, and
two or more Tooltips,

00:01:05.670 --> 00:01:09.100
such as the 2 here
next to CSS.supports,

00:01:09.100 --> 00:01:12.271
means that the function supports
different argument signatures.

00:01:14.920 --> 00:01:18.460
Autocomplete now works
after you invoke a function.

00:01:18.460 --> 00:01:20.020
Back in an older
version of Chrome,

00:01:20.020 --> 00:01:23.080
when I type out a function
such as querySelector,

00:01:23.080 --> 00:01:25.360
I don't get any information
about what properties

00:01:25.360 --> 00:01:27.340
or methods are available.

00:01:27.340 --> 00:01:30.430
But now, when I run
querySelector in Chrome 68,

00:01:30.430 --> 00:01:33.070
I get an Autocomplete dialog.

00:01:33.070 --> 00:01:36.100
Also, Autocomplete now
recognizes newer JavaScript

00:01:36.100 --> 00:01:39.100
keywords such as
await and async.

00:01:39.100 --> 00:01:41.260
If you want to improve
the quality of your pages,

00:01:41.260 --> 00:01:43.710
the Audits panel is a
great place to start.

00:01:43.710 --> 00:01:47.830
In Chrome 68, the Audits panel
is getting a big upgrade.

00:01:47.830 --> 00:01:50.230
Click the Audits tab
and the config options

00:01:50.230 --> 00:01:52.720
are now listed across the
page rather than crammed up

00:01:52.720 --> 00:01:54.340
into the toolbar.

00:01:54.340 --> 00:01:56.680
The Device option lets
you simulate a device

00:01:56.680 --> 00:01:59.200
or maintain your
desktop settings.

00:01:59.200 --> 00:02:02.320
If you simulate Mobile, it
changes the user agent string

00:02:02.320 --> 00:02:05.770
and simulates a mobile
viewport and [INAUDIBLE]..

00:02:05.770 --> 00:02:08.650
The Audits section lets you
choose which category of audits

00:02:08.650 --> 00:02:10.330
you want to run.

00:02:10.330 --> 00:02:13.180
The Throttling section lets
you simulate how your page will

00:02:13.180 --> 00:02:15.970
perform on a less
powerful device

00:02:15.970 --> 00:02:18.760
and the Clear Storage checkbox
lets you delete your storage

00:02:18.760 --> 00:02:20.530
before every run,
which is good if you

00:02:20.530 --> 00:02:24.340
want to analyze how first-time
visitors experience your site.

00:02:24.340 --> 00:02:26.200
If you care more
about repeat visitors,

00:02:26.200 --> 00:02:28.720
than disable this checkbox.

00:02:28.720 --> 00:02:30.880
When you are ready,
click Run Audits.

00:02:30.880 --> 00:02:33.880
The auditing process is
generally faster than before,

00:02:33.880 --> 00:02:36.700
thanks to a new internal
auditing engine codenamed

00:02:36.700 --> 00:02:38.080
Lantern.

00:02:38.080 --> 00:02:40.060
Rather than actually
throttling the page,

00:02:40.060 --> 00:02:43.450
Lantern uses your normal
CPU and network settings

00:02:43.450 --> 00:02:45.220
and then extrapolates
how long the page

00:02:45.220 --> 00:02:48.490
would have taken to load
under mobile conditions.

00:02:48.490 --> 00:02:51.040
The report UI has
also gotten a refresh,

00:02:51.040 --> 00:02:53.170
thanks to a collaboration
between the Lighthouse

00:02:53.170 --> 00:02:54.550
and Chrome UX teams.

00:02:54.550 --> 00:02:56.470
There's a few new
audits in this version,

00:02:56.470 --> 00:02:59.060
including first
contentful paint,

00:02:59.060 --> 00:03:01.810
use video formats
for animated content,

00:03:01.810 --> 00:03:08.060
avoid costly round trips,
and robots.text is not valid.

00:03:08.060 --> 00:03:10.580
Check out my new tutorial,
Optimize Site Speed,

00:03:10.580 --> 00:03:13.520
if you want hands-on training
on how to use the Audits panel

00:03:13.520 --> 00:03:17.170
and many other DevTools features
to improve load performance.

00:03:17.170 --> 00:03:20.360
Link to that is in
the description.

00:03:20.360 --> 00:03:21.790
That's all for Chrome 68.

00:03:21.790 --> 00:03:24.380
Here's a bonus tip.

00:03:24.380 --> 00:03:27.300
Now, usually you would put
these statements into your code,

00:03:27.300 --> 00:03:30.410
but I'm just going to
run them from DevTools.

00:03:30.410 --> 00:03:33.240
If you've got a set of objects
with similar data models,

00:03:33.240 --> 00:03:36.740
you can pass these objects
in an array to console.table

00:03:36.740 --> 00:03:40.790
and the console will display the
results in a tidy little table.

00:03:40.790 --> 00:03:43.310
Console.assert lets
you write an error only

00:03:43.310 --> 00:03:45.980
when a certain
condition is false.

00:03:45.980 --> 00:03:47.570
This first condition
here is false,

00:03:47.570 --> 00:03:49.940
so we expect this
message to get logged,

00:03:49.940 --> 00:03:52.440
whereas this second
condition is true,

00:03:52.440 --> 00:03:54.800
so that shouldn't show
up in the console.

00:03:54.800 --> 00:03:57.410
And the third here is false
again, so that should log.

00:04:00.100 --> 00:04:03.150
Console.count lets you count
how many times Count has

00:04:03.150 --> 00:04:05.190
been invoked with that label.

00:04:05.190 --> 00:04:08.490
For example, we've got four
instances of this label

00:04:08.490 --> 00:04:11.100
and three of this
other label, so when

00:04:11.100 --> 00:04:13.020
we execute this
snippet, we should

00:04:13.020 --> 00:04:15.960
see the first label get
printed out four times

00:04:15.960 --> 00:04:19.450
and the second one three times.

00:04:19.450 --> 00:04:23.680
Console.group lets you organize
messages into a visual group.

00:04:23.680 --> 00:04:27.400
End a group by calling
console.groupEnd.

00:04:27.400 --> 00:04:29.230
Check out the
Console API Reference

00:04:29.230 --> 00:04:32.950
for the full list of methods,
or just type console.

00:04:32.950 --> 00:04:38.170
in your console and browse
the Autocomplete dialog.

00:04:38.170 --> 00:04:40.860
See you in six
weeks for Chrome 69.

00:04:40.860 --> 00:04:44.210
[MUSIC PLAYING]

