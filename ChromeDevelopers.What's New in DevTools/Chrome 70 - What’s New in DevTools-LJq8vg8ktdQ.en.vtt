WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:05.574
[MUSIC PLAYING]

00:00:05.574 --> 00:00:06.740
KAYCE BASQUES: Welcome back.

00:00:06.740 --> 00:00:08.560
It's been 12 weeks
since our last "What's

00:00:08.560 --> 00:00:11.110
New," which was for Chrome 68.

00:00:11.110 --> 00:00:14.980
We skipped 69 because the
team was mostly fixing bugs.

00:00:14.980 --> 00:00:17.650
Here's what's new in Chrome 70.

00:00:17.650 --> 00:00:19.660
With Live Expressions,
you can monitor

00:00:19.660 --> 00:00:24.040
the value of any JavaScript
expression in real time.

00:00:24.040 --> 00:00:27.370
In this demo, I need to check
that focus works correctly.

00:00:27.370 --> 00:00:30.040
First, I'll add a new style
rule to make it easier

00:00:30.040 --> 00:00:32.530
to see which element has focus.

00:00:32.530 --> 00:00:37.920
How about a border of five
pixels, solid, and fuchsia?

00:00:37.920 --> 00:00:40.650
As I tab through, it looks
like focus disappears

00:00:40.650 --> 00:00:42.840
between pasta and sandwich.

00:00:42.840 --> 00:00:46.800
So let's use a live expression
to figure out what's happening.

00:00:46.800 --> 00:00:49.740
Open the console, click
Create Live Expression,

00:00:49.740 --> 00:00:52.530
type
document.activeElement, then

00:00:52.530 --> 00:00:55.510
click outside of the
expression to save it.

00:00:55.510 --> 00:00:58.020
Now when I tab through the
page, my live expression

00:00:58.020 --> 00:01:01.260
shows me what element has focus.

00:01:01.260 --> 00:01:04.319
It looks like somebody snuck
an element with the ID tofu

00:01:04.319 --> 00:01:06.210
into the page.

00:01:06.210 --> 00:01:08.280
To search for this element
in the Elements panel,

00:01:08.280 --> 00:01:11.220
I can press Command-F
on Mac or Control-F

00:01:11.220 --> 00:01:15.840
on Windows, Linux, and Chrome
OS, and then type "tofu."

00:01:15.840 --> 00:01:19.030
Sure enough, there's
the hidden element.

00:01:19.030 --> 00:01:21.780
By the way, this search
box supports CSS selectors

00:01:21.780 --> 00:01:24.590
and XPath.

00:01:24.590 --> 00:01:27.810
Eager Evaluation now
highlights DOM nodes.

00:01:27.810 --> 00:01:31.250
Here on the Google homepage,
I have selected the input box.

00:01:31.250 --> 00:01:36.280
Typing $0 in the console gives
me a reference to that element.

00:01:36.280 --> 00:01:40.600
When I type "$0.parentElement,"
DevTools highlights the parent

00:01:40.600 --> 00:01:43.180
of the input in the viewport.

00:01:43.180 --> 00:01:46.140
Pretty much any expression
that evaluates to a node

00:01:46.140 --> 00:01:47.890
will highlight that
node in the viewport,

00:01:47.890 --> 00:01:52.090
such as
document.querySelector image.

00:01:52.090 --> 00:01:53.980
You can now enable
network throttling

00:01:53.980 --> 00:01:56.460
from the Command menu.

00:01:56.460 --> 00:01:59.400
Press Command-Shift-P on
Mac or Control-Shift-P

00:01:59.400 --> 00:02:03.600
on Windows, Linux, and Chrome
OS to open the Command menu.

00:02:03.600 --> 00:02:07.290
Type "3G," and you now have
options to enable fast 3G

00:02:07.290 --> 00:02:09.150
or slow 3G.

00:02:09.150 --> 00:02:11.520
When I run the command,
a little warning icon

00:02:11.520 --> 00:02:13.800
pops up next to the
Network tab to remind me

00:02:13.800 --> 00:02:16.380
that I have throttling enabled.

00:02:16.380 --> 00:02:19.845
This is also where I
can disable throttling.

00:02:19.845 --> 00:02:22.220
By the way, you can do other
handy stuff from the Command

00:02:22.220 --> 00:02:26.060
menu, such as opening
files and running snippets.

00:02:26.060 --> 00:02:26.967
Type "?"

00:02:26.967 --> 00:02:27.800
to see your options.

00:02:30.610 --> 00:02:35.110
The Conditional Breakpoints
UI now supports Autocomplete.

00:02:35.110 --> 00:02:37.996
To set a conditional breakpoint
in the Sources panel,

00:02:37.996 --> 00:02:39.370
right-click the
line number, then

00:02:39.370 --> 00:02:41.890
select Add Conditional
Breakpoint.

00:02:41.890 --> 00:02:43.570
The breakpoint will
only trigger when

00:02:43.570 --> 00:02:47.470
the expression that you
enter evaluates to true.

00:02:47.470 --> 00:02:49.750
As you type, the
autocomplete UI now

00:02:49.750 --> 00:02:51.730
pops up to help you type
out your expressions

00:02:51.730 --> 00:02:55.280
faster and more accurately.

00:02:55.280 --> 00:02:57.200
The Event Listener
Breakpoints pane

00:02:57.200 --> 00:03:01.160
now supports Web Audio
lifecycle events.

00:03:01.160 --> 00:03:05.480
Here on this demo, I'm making
moody songs in A minor.

00:03:05.480 --> 00:03:08.780
I want to see the code that
initializes the audio context,

00:03:08.780 --> 00:03:12.380
so I go to the Sources panel
and expand the Event Listener

00:03:12.380 --> 00:03:16.670
Breakpoints section, then
expand the Web Audio section,

00:03:16.670 --> 00:03:20.066
then check Create Audio Context.

00:03:20.066 --> 00:03:23.240
I'm assuming this audio
context is probably

00:03:23.240 --> 00:03:26.030
created on page load,
so let's reload the page

00:03:26.030 --> 00:03:28.870
and see what happens.

00:03:28.870 --> 00:03:31.300
As expected, I pause
on the line of code

00:03:31.300 --> 00:03:34.030
that initializes the
audio context even

00:03:34.030 --> 00:03:37.660
though I had no idea where
that code was located.

00:03:37.660 --> 00:03:41.590
We've got a new experimental
debugger for Node called ndb,

00:03:41.590 --> 00:03:43.570
and we'd like your
feedback on it.

00:03:43.570 --> 00:03:45.760
On top of the usual
node debugging features

00:03:45.760 --> 00:03:48.010
that you get through
DevTools, it also

00:03:48.010 --> 00:03:51.370
lets you detect and
attach to child processes,

00:03:51.370 --> 00:03:54.460
place breakpoints before
modules are required,

00:03:54.460 --> 00:03:57.550
and edit files within
the DevTools UI.

00:03:57.550 --> 00:04:02.070
Check out the ndb GitHub repo
and let us know what you think.

00:04:02.070 --> 00:04:03.450
Here's a bonus tip.

00:04:03.450 --> 00:04:05.460
With the User
Timing API, you can

00:04:05.460 --> 00:04:07.590
measure how long it
takes your real users

00:04:07.590 --> 00:04:10.734
to complete critical
journeys through your app.

00:04:10.734 --> 00:04:12.150
And the performance
panel lets you

00:04:12.150 --> 00:04:16.579
visualize these measurements
while you profile the page.

00:04:16.579 --> 00:04:18.790
In this demo, I want to
measure how long it takes

00:04:18.790 --> 00:04:20.959
users to complete the form.

00:04:20.959 --> 00:04:23.410
Let's look at my sloppy code.

00:04:23.410 --> 00:04:25.360
When the user
first enters input,

00:04:25.360 --> 00:04:29.620
I mark the time by calling
window.performance.mark.

00:04:29.620 --> 00:04:31.280
When they click
the Submit button,

00:04:31.280 --> 00:04:34.900
I add another mark to note
the completion of the journey.

00:04:34.900 --> 00:04:36.820
I then calculate
the duration with

00:04:36.820 --> 00:04:39.640
window.performance.measure.

00:04:39.640 --> 00:04:43.900
In this case, I'm calling
the journey form interaction.

00:04:43.900 --> 00:04:46.330
I can extract the duration
of the journey using

00:04:46.330 --> 00:04:49.690
window.performan
ce.getEntriesByName, which

00:04:49.690 --> 00:04:53.500
allows me to send the data
to my analytics service.

00:04:53.500 --> 00:04:55.540
To visualize the
journey in DevTools,

00:04:55.540 --> 00:04:59.290
open the Performance panel,
start a run time recording,

00:04:59.290 --> 00:05:04.850
complete the form, click Submit,
and then stop the recording.

00:05:04.850 --> 00:05:07.780
DevTools processes everything
that happened on the page

00:05:07.780 --> 00:05:11.890
and shows a chronological
log of all the activity.

00:05:11.890 --> 00:05:15.280
In the User Timing section,
I can see my custom form

00:05:15.280 --> 00:05:17.320
interaction journey.

00:05:17.320 --> 00:05:19.090
This makes it easy
to see what activity

00:05:19.090 --> 00:05:23.357
occurred while I was completing
the form interaction journey.

00:05:23.357 --> 00:05:24.190
Thanks for watching.

00:05:24.190 --> 00:05:26.500
Send me questions and
feedback in the comments.

00:05:26.500 --> 00:05:29.550
[MUSIC PLAYING]

