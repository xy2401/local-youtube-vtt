WEBVTT
Kind: captions
Language: zh-Hans

00:00:00.000 --> 00:00:06.930
嗯，所以我们将开始，所以今天我们在这里

00:00:03.600 --> 00:00:09.000
谈论云原生Java，你呢？ 

00:00:06.930 --> 00:00:12.719
和您的公司准备好使用云原生

00:00:09.000 --> 00:00:15.750
 Java我叫Charlie Gracey我是

00:00:12.719 --> 00:00:16.830
开放j9上的垃圾收集建筑师

00:00:15.750 --> 00:00:20.640
 Java虚拟机

00:00:16.830 --> 00:00:22.320
我忘了我们有一张你可以拍到的照片

00:00:20.640 --> 00:00:24.330
我在Twitter上

00:00:22.320 --> 00:00:25.830
 github在任何地方，如果你想问问题

00:00:24.330 --> 00:00:30.090
之后如果我们没有时间在这里

00:00:25.830 --> 00:00:31.980
我是以前工作的杰米·李·科尔曼

00:00:30.090 --> 00:00:34.559
在Docker团队网络领域，我是

00:00:31.980 --> 00:00:40.260
现在是开发者拥护者，而您又是

00:00:34.559 --> 00:00:43.410
可以在Twitter上与我联系，因此快速测验

00:00:40.260 --> 00:00:45.899
谁一直在部署Java案例

00:00:43.410 --> 00:00:48.300
多年以来，所有人都准备转移到

00:00:45.899 --> 00:00:51.180
云，如果你是你的

00:00:48.300 --> 00:00:52.739
您认为这是如此不同的方法

00:00:51.180 --> 00:00:56.940
你只是要把一切都扔掉

00:00:52.739 --> 00:00:58.949
并从头开始重写它

00:00:56.940 --> 00:01:01.109
决定云只是很小

00:00:58.949 --> 00:01:03.690
东西埋了你的头，等待它过去

00:01:01.109 --> 00:01:07.549
继续，然后继续与你的大

00:01:03.690 --> 00:01:10.470
应用程序，否则您将了解

00:01:07.549 --> 00:01:14.070
现代Java运行时实际上可能会有所帮助

00:01:10.470 --> 00:01:16.650
您将在这个新的云时代重用

00:01:14.070 --> 00:01:19.830
并利用你的东西

00:01:16.650 --> 00:01:21.270
目前已经有人在这里做

00:01:19.830 --> 00:01:27.210
这三件事中的任何一件事

00:01:21.270 --> 00:01:30.409
所以我举起手来，我知道最终不会

00:01:27.210 --> 00:01:33.390
举起手来看看你必须有一个

00:01:30.409 --> 00:01:35.790
好吧，我希望每个人都有他们的

00:01:33.390 --> 00:01:36.090
举起手来看看那就是我们在这里

00:01:35.790 --> 00:01:39.509
对于

00:01:36.090 --> 00:01:42.210
那么关于

00:01:39.509 --> 00:01:46.140
云并在您之上运行事物

00:01:42.210 --> 00:01:47.759
运行时，云便是所有人

00:01:46.140 --> 00:01:51.270
说话，但它使各种伟大

00:01:47.759 --> 00:01:53.250
承诺，但它是非常动态的

00:01:51.270 --> 00:01:55.920
必须拥有所有这些硬件

00:01:53.250 --> 00:01:59.219
你自己，它将迅速扩展

00:01:55.920 --> 00:02:01.619
前期成本最低，只有一吨

00:01:59.219 --> 00:02:05.070
每个人在这里所做的事情

00:02:01.619 --> 00:02:07.229
承诺，但是哦，还有电脑

00:02:05.070 --> 00:02:07.680
随需应变，一如既往

00:02:07.229 --> 00:02:09.869
通缉

00:02:07.680 --> 00:02:11.430
只是云将保存一切， 

00:02:09.869 --> 00:02:13.770
这将使开发和工作

00:02:11.430 --> 00:02:18.690
在您的Java应用程序上

00:02:13.770 --> 00:02:20.610
轻松而完美地工作真是太好了

00:02:18.690 --> 00:02:22.110
但是每个人都有的一件大事

00:02:20.610 --> 00:02:23.760
真的省去了，特别是如果你

00:02:22.110 --> 00:02:27.000
谈论Java之类的东西

00:02:23.760 --> 00:02:29.280
更大的运行时是在云中

00:02:27.000 --> 00:02:31.710
您的计算等于金钱就是成本

00:02:29.280 --> 00:02:33.870
对你来说，这是恒定的成本

00:02:31.710 --> 00:02:35.820
一直不是你的硬件

00:02:33.870 --> 00:02:39.150
不再，所以您要为某人付费

00:02:35.820 --> 00:02:41.550
此硬件及其内部的权利

00:02:39.150 --> 00:02:45.180
云计算，这等于金钱

00:02:41.550 --> 00:02:49.020
真的转化成美元

00:02:45.180 --> 00:02:50.670
每小时使用的每GB RAM 

00:02:49.020 --> 00:02:52.800
每个人的主要方式是

00:02:50.670 --> 00:02:54.510
收费的云课程有

00:02:52.800 --> 00:02:56.580
 CPU数量和

00:02:54.510 --> 00:02:57.570
东西，但最大，最广泛的东西

00:02:56.580 --> 00:02:59.910
在不同的地方看到的

00:02:57.570 --> 00:03:03.300
云供应商有多少GB 

00:02:59.910 --> 00:03:06.150
您每小时消耗的RAM数量

00:03:03.300 --> 00:03:08.880
表示在Java世界中，如果您

00:03:06.150 --> 00:03:12.780
堆真的花了你很多钱

00:03:08.880 --> 00:03:15.270
易于翻译，只需更改大小

00:03:12.780 --> 00:03:17.520
您的-X MX，从字面上您可以看到

00:03:15.270 --> 00:03:19.200
您每天的费用差异

00:03:17.520 --> 00:03:20.360
每周每月运行一次

00:03:19.200 --> 00:03:24.810
在云端

00:03:20.360 --> 00:03:28.590
因此，如果您在这里查看正常的工作量

00:03:24.810 --> 00:03:32.370
每个人都可以看到的很棒的手绘艺术

00:03:28.590 --> 00:03:34.200
看我的艺术能力，所以对

00:03:32.370 --> 00:03:36.870
您的应用程序可能会上下波动

00:03:34.200 --> 00:03:38.610
时间，因为你正在经历如何

00:03:36.870 --> 00:03:41.520
很多交易有多少客户

00:03:38.610 --> 00:03:44.370
点击您的网站，以及以及如何

00:03:41.520 --> 00:03:45.990
它真的对这种不同做出反应吗

00:03:44.370 --> 00:03:48.690
运动和不同量

00:03:45.990 --> 00:03:50.520
资源击中它的方式是

00:03:48.690 --> 00:03:53.640
通常处理的是你有一个大

00:03:50.520 --> 00:03:56.730
服务器一直在运行

00:03:53.640 --> 00:03:59.090
处理您过度配置的所有内容

00:03:56.730 --> 00:04:01.220
一点点，以便它可以处理更多

00:03:59.090 --> 00:04:03.480
交易和额外增加

00:04:01.220 --> 00:04:05.310
新人在Netflix上的星期二

00:04:03.480 --> 00:04:07.320
节目出来，他们有额外的需求，所以

00:04:05.310 --> 00:04:10.920
您过度准备了一切

00:04:07.320 --> 00:04:11.820
最坏的情况基本上是上面的一切

00:04:10.920 --> 00:04:14.250
白线

00:04:11.820 --> 00:04:16.650
您浪费了大部分资源

00:04:14.250 --> 00:04:18.930
时间，如果您有运行此虚拟机

00:04:16.650 --> 00:04:21.299
大部分时间都是两个演出

00:04:18.930 --> 00:04:23.160
您用得更少，您只需支付两个

00:04:21.299 --> 00:04:25.290
堆映像在云中的演出，因此

00:04:23.160 --> 00:04:27.420
这实际上是对您的巨大浪费

00:04:25.290 --> 00:04:30.570
你实际上可以去做一些

00:04:27.420 --> 00:04:32.010
较小的遵从时间可以提高

00:04:30.570 --> 00:04:35.130
向下改变你的堆，所以你

00:04:32.010 --> 00:04:37.140
真的只有在某些时候浪费

00:04:35.130 --> 00:04:41.580
再次缩小，但它们仍然

00:04:37.140 --> 00:04:47.280
总是很多浪费，所以如果你看

00:04:41.580 --> 00:04:48.030
这个我不知道怎么工作

00:04:47.280 --> 00:04:50.190
无论如何

00:04:48.030 --> 00:04:52.590
所以在这里，它只是扔出去

00:04:50.190 --> 00:04:54.600
内存和吞吐量，因此当您

00:04:52.590 --> 00:04:56.550
增强您会注意到的应用程序

00:04:54.600 --> 00:05:00.060
要花一些时间才能达到最大

00:04:56.550 --> 00:05:01.950
吞吐量，您会看到自己

00:05:00.060 --> 00:05:04.440
这里的内存使用量随着

00:05:01.950 --> 00:05:06.180
应用程序开始了，有

00:05:04.440 --> 00:05:07.650
在开始时总是有点尖峰

00:05:06.180 --> 00:05:09.720
特别是在您查看Java时

00:05:07.650 --> 00:05:11.310
运行时间早于

00:05:09.720 --> 00:05:13.530
即时编译器

00:05:11.310 --> 00:05:14.730
参与编译许多不同的内容

00:05:13.530 --> 00:05:16.110
让您更快的方法

00:05:14.730 --> 00:05:18.120
吞吐量，而您的吞吐量

00:05:16.110 --> 00:05:19.710
越来越快，但他们会拥有这些

00:05:18.120 --> 00:05:24.210
消费高峰和高峰

00:05:19.710 --> 00:05:26.730
大量的内存，因此在此模型中

00:05:24.210 --> 00:05:29.610
您会看到这里的费用和额外费用

00:05:26.730 --> 00:05:32.310
时间是两点

00:05:29.610 --> 00:05:35.280
吞吐量，然后你也有这个

00:05:32.310 --> 00:05:37.110
当时您的内存使用量超过峰值

00:05:35.280 --> 00:05:39.480
以及任何时间

00:05:37.110 --> 00:05:41.100
您没有尽可能快地运行

00:05:39.480 --> 00:05:44.460
并使用更多的内存来支付

00:05:41.100 --> 00:05:46.470
不用付钱的钱

00:05:44.460 --> 00:05:49.920
这更像每个人都会

00:05:46.470 --> 00:05:53.190
就像几乎没有存储空间一样瞬间

00:05:49.920 --> 00:05:55.020
总是使用资源量，但是

00:05:53.190 --> 00:05:58.140
我们将谈谈也许

00:05:55.020 --> 00:06:00.870
我们可以到达那里，因此在您的云中

00:05:58.140 --> 00:06:03.390
要求其中之一是您想要一个

00:06:00.870 --> 00:06:05.310
扩展内存量小

00:06:03.390 --> 00:06:07.640
越来越多的应用程式像

00:06:05.310 --> 00:06:11.160
服务或微服务架构

00:06:07.640 --> 00:06:13.500
您曾经有多个JVM s4 

00:06:11.160 --> 00:06:16.110
这样一来，JVM的所有开销

00:06:13.500 --> 00:06:17.880
本身现在成倍增加，然后

00:06:16.110 --> 00:06:20.750
当您分解出更多实例时

00:06:17.880 --> 00:06:23.100
你把它进一步旋转

00:06:20.750 --> 00:06:26.310
每个人都想要一个小的部署规模

00:06:23.100 --> 00:06:30.180
而且您真的希望这种扩展

00:06:26.310 --> 00:06:31.920
如果需要，您想快速启动

00:06:30.180 --> 00:06:33.930
处理更多或更多交易

00:06:31.920 --> 00:06:36.240
客户，这需要两分钟

00:06:33.930 --> 00:06:37.919
您的新实例可以旋转您

00:06:36.240 --> 00:06:38.270
可能只是超时或丢失了一些

00:06:37.919 --> 00:06:41.660
成本

00:06:38.270 --> 00:06:43.610
更糟糕的事情花了太长时间，他们离开了，所以

00:06:41.660 --> 00:06:48.410
我们可以做所有这些事情并使

00:06:43.610 --> 00:06:50.390
 JVM的这些改进是

00:06:48.410 --> 00:06:52.220
云对JVM和

00:06:50.390 --> 00:06:56.320
每个人的小测验让每个人

00:06:52.220 --> 00:06:58.670
醒来是JVM不再相关了吧

00:06:56.320 --> 00:07:04.430
是的，这无关紧要我们都应该搬家

00:06:58.670 --> 00:07:06.500
不准J'B也许我们也许能够

00:07:04.430 --> 00:07:10.790
调整它和这些类型的东西，但是

00:07:06.500 --> 00:07:14.480
这将是困难的，或者没有全部

00:07:10.790 --> 00:07:18.380
 JVM是相同的，这就是我们

00:07:14.480 --> 00:07:22.250
再次希望大家现在

00:07:18.380 --> 00:07:24.680
在这个选择上选择一个，但我们会继续前进

00:07:22.250 --> 00:07:29.450
因此我对这些事情的答案是公开的

00:07:24.680 --> 00:07:31.070
 j9这是一个全新的全新虚拟机

00:07:29.450 --> 00:07:33.620
是开源的，并捐赠给了

00:07:31.070 --> 00:07:36.590
 2017年9月的Eclipse Foundation 

00:07:33.620 --> 00:07:40.790
这是一个完全开放的实现

00:07:36.590 --> 00:07:44.360
使用EPL v2和Apache 200的VM 

00:07:40.790 --> 00:07:46.430
许可，因此基本上可以免费使用

00:07:44.360 --> 00:07:49.430
因为无论你想要什么

00:07:46.430 --> 00:07:52.400
我们一直都是限制性许可

00:07:49.430 --> 00:07:54.980
寻找新朋友来检查的东西

00:07:52.400 --> 00:07:56.990
公开拉取请求公开问题，如果

00:07:54.980 --> 00:07:58.880
你不会立即得到我的答复

00:07:56.990 --> 00:08:03.200
令我个人惊讶我会得到

00:07:58.880 --> 00:08:05.330
您的问题马上得到回答

00:08:03.200 --> 00:08:08.210
打开j9，它只是一个VM，但是如果您想

00:08:05.330 --> 00:08:10.460
我建议将JDK作为一个整体

00:08:08.210 --> 00:08:14.090
从采用开放方式获取所有JD案例

00:08:10.460 --> 00:08:15.320
 JDK这是一个程序构建环境

00:08:14.090 --> 00:08:18.410
由伦敦水罐

00:08:15.320 --> 00:08:20.780
他们用热点构建开放的JDK 

00:08:18.410 --> 00:08:22.610
打开j9的所有不同版本

00:08:20.780 --> 00:08:24.740
奈特利大厦发布

00:08:22.610 --> 00:08:26.900
这是去二进制文件的好地方

00:08:24.740 --> 00:08:28.670
然后您可以轻松一些

00:08:26.900 --> 00:08:30.440
比较，因为它们建立在

00:08:28.670 --> 00:08:32.270
节奏和时间表与

00:08:30.440 --> 00:08:34.220
好吧，这是一个非常简单的方法

00:08:32.270 --> 00:08:35.800
您在JDK软件包中得到的是什么

00:08:34.220 --> 00:08:37.670
在任何时候

00:08:35.800 --> 00:08:40.370
有时当您将其从

00:08:37.670 --> 00:08:42.320
像apt-get或Linux上的东西

00:08:40.370 --> 00:08:43.970
你不太确定哪一个

00:08:42.320 --> 00:08:45.560
释放其他已完成的操作

00:08:43.970 --> 00:08:48.830
这些是一些非常香草的

00:08:45.560 --> 00:08:51.200
当然也要去捡

00:08:48.830 --> 00:08:52.080
他们这样做，他们还创建了一个码头工人形象

00:08:51.200 --> 00:08:54.030
为此

00:08:52.080 --> 00:08:56.010
 Dr.的新版本基于的图像

00:08:54.030 --> 00:08:59.220
这是他们的Java，因此您可以获取

00:08:56.010 --> 00:09:01.740
那些来自docker hub的人为什么

00:08:59.220 --> 00:09:04.860
打开j9对云非常有用

00:09:01.740 --> 00:09:07.520
环境世界上最伟大的手机

00:09:04.860 --> 00:09:10.170
所有时间实际上都是在运行Java ME 

00:09:07.520 --> 00:09:12.600
而其中一些小型电话是

00:09:10.170 --> 00:09:14.310
当时运行打开的j9 

00:09:12.600 --> 00:09:20.750
 j9的打开来自非常小的

00:09:14.310 --> 00:09:23.610
嵌入式VM，因此JVM Java ME 

00:09:20.750 --> 00:09:25.740
当时的需求很小

00:09:23.610 --> 00:09:28.200
足迹很多次

00:09:25.740 --> 00:09:31.500
你有很多的小公羊

00:09:28.200 --> 00:09:33.390
有时会有大量的ROM，但是您

00:09:31.500 --> 00:09:35.520
拥有很少量的RAM 

00:09:33.390 --> 00:09:38.310
可以使用你必须很快

00:09:35.520 --> 00:09:41.130
创业人的游戏，主要是

00:09:38.310 --> 00:09:42.990
在这些手机上再次使用Java 

00:09:41.130 --> 00:09:44.580
两分钟开始您的游戏

00:09:42.990 --> 00:09:46.770
经常不玩游戏

00:09:44.580 --> 00:09:49.410
烦人，你也不想

00:09:46.770 --> 00:09:50.910
您玩完后只能玩得很好的游戏

00:09:49.410 --> 00:09:52.590
每次播放一阵子

00:09:50.910 --> 00:09:54.180
就像你不想那样开始

00:09:52.590 --> 00:09:55.830
在其两分钟后做出响应

00:09:54.180 --> 00:09:57.630
准时完成您真正想要的一切

00:09:55.830 --> 00:10:00.750
尽早发生，所以你有一个

00:09:57.630 --> 00:10:03.510
外观一致的游戏

00:10:00.750 --> 00:10:05.580
类似于云要求小

00:10:03.510 --> 00:10:08.100
您想要的足迹接近

00:10:05.580 --> 00:10:10.650
您可以立即启动， 

00:10:08.100 --> 00:10:12.240
为事实迅速增加时间

00:10:10.650 --> 00:10:14.940
这些东西随你去

00:10:12.240 --> 00:10:17.070
通过花费您的钱越多

00:10:14.940 --> 00:10:18.360
时间你没有达到巅峰

00:10:17.070 --> 00:10:22.230
您为之付出的钱越多

00:10:18.360 --> 00:10:25.830
原因，所以某种快速的结果

00:10:22.230 --> 00:10:27.240
在这里使用开放j9有一些链接， 

00:10:25.830 --> 00:10:29.040
我可以分享的东西，以后再发推文

00:10:27.240 --> 00:10:30.510
你可以去拿一些码头工人的图像， 

00:10:29.040 --> 00:10:33.120
事情，并做很多这样的测试

00:10:30.510 --> 00:10:35.550
自己并遵循一些简单的方法

00:10:33.120 --> 00:10:37.800
步骤，但使用打开的j9启动时间

00:10:35.550 --> 00:10:41.010
使用我们的共享课程技术和

00:10:37.800 --> 00:10:45.000
此选项快速入门基本上可以

00:10:41.010 --> 00:10:46.530
看到行驶速度快了30％ 

00:10:45.000 --> 00:10:48.720
每个人都应该在这里进行测试

00:10:46.530 --> 00:10:51.750
他们自己不一定总要带走我

00:10:48.720 --> 00:10:55.260
自己检查事物的单词， 

00:10:51.750 --> 00:10:56.700
最大的是很多方面的足迹

00:10:55.260 --> 00:10:58.770
衡量时的事情

00:10:56.700 --> 00:11:02.580
开箱即用的热切换功能

00:10:58.770 --> 00:11:04.560
现货开j9 60％是其中一种

00:11:02.580 --> 00:11:06.090
减少足迹的平均数量

00:11:04.560 --> 00:11:08.610
你看

00:11:06.090 --> 00:11:10.380
 50是我投入的数字，但是

00:11:08.610 --> 00:11:12.780
我们收集更多的数据更多的人是

00:11:10.380 --> 00:11:15.930
然后在推特上发推文

00:11:12.780 --> 00:11:17.820
真的接近60％吧

00:11:15.930 --> 00:11:19.820
可以减少您的云成本

00:11:17.820 --> 00:11:22.140
一半用于很多应用

00:11:19.820 --> 00:11:24.510
省钱省钱

00:11:22.140 --> 00:11:26.220
如果我们还记得这个现场

00:11:24.510 --> 00:11:27.960
在我说这是之前

00:11:26.220 --> 00:11:32.070
我们想要去的地方的理想选择

00:11:27.960 --> 00:11:34.980
如果您这样看的话，内存占用量

00:11:32.070 --> 00:11:38.100
使用以下相同测试之一

00:11:34.980 --> 00:11:44.190
用热点打开JDK 9，这是

00:11:38.100 --> 00:11:50.040
随着时间的推移内存消耗，在这里我们

00:11:44.190 --> 00:11:51.660
 go是用JDK 91的J 9打开JDK的，所以

00:11:50.040 --> 00:11:55.170
我们实际上得到了自己的

00:11:51.660 --> 00:11:57.000
实际上吞吐量不好意思不是内存所以

00:11:55.170 --> 00:11:59.760
你实际上可以通过看一看

00:11:57.000 --> 00:12:04.620
实际上，打开j会快很多

00:11:59.760 --> 00:12:06.510
 9如果我们使用äôt在open j 9下运行

00:12:04.620 --> 00:12:08.300
通过使用该技术而获得的技术

00:12:06.510 --> 00:12:10.790
我之前显示的共享类选项

00:12:08.300 --> 00:12:12.960
只要戴上它，你就会得到这个

00:12:10.790 --> 00:12:14.850
缓存中预编译的JIT代码

00:12:12.960 --> 00:12:19.470
你实际上会看到你基本上

00:12:14.850 --> 00:12:20.820
即时获得最大吞吐量

00:12:19.470 --> 00:12:24.000
最大吞吐量将获得什么

00:12:20.820 --> 00:12:26.790
仅使用ot代码，因为它不是

00:12:24.000 --> 00:12:29.370
做所有繁重的JIT优化

00:12:26.790 --> 00:12:31.050
你可以做，你会有点

00:12:29.370 --> 00:12:33.480
限制在这里最大报告，它使

00:12:31.050 --> 00:12:36.060
即使它仍然继续做

00:12:33.480 --> 00:12:38.720
之后会突然跳动

00:12:36.060 --> 00:12:41.010
早期基于

00:12:38.720 --> 00:12:43.170
之前做的决定

00:12:41.010 --> 00:12:45.960
很快这种限制你

00:12:43.170 --> 00:12:47.880
随着发布不断发生

00:12:45.960 --> 00:12:50.490
数字，但绿线和蓝

00:12:47.880 --> 00:12:52.230
与我们的最后一条线保持越来越近的距离

00:12:50.490 --> 00:12:54.810
释放它又距离了

00:12:52.230 --> 00:12:56.130
只是那些构建还没准备好

00:12:54.810 --> 00:12:57.960
我们来这里是为了把它们放在图表中

00:12:56.130 --> 00:12:59.640
他们本周才被建造

00:12:57.960 --> 00:13:01.260
一个真正的释放，那些会

00:12:59.640 --> 00:13:03.450
希望继续缩小差距

00:13:01.260 --> 00:13:05.220
我们前进，但这只是一个决定

00:13:03.450 --> 00:13:07.830
你可以再做一个

00:13:05.220 --> 00:13:09.990
实际到达那里的替代方法

00:13:07.830 --> 00:13:11.820
更快，具体取决于您的最高位置

00:13:09.990 --> 00:13:14.640
吞吐量是，但如果说您在

00:13:11.820 --> 00:13:17.010
仅用了两个的应用程序

00:13:14.640 --> 00:13:19.390
或三分钟你永远都不会

00:13:17.010 --> 00:13:21.790
达到任一温泉浴场的峰值吞吐量

00:13:19.390 --> 00:13:24.820
还是无论如何都要先打开j9 

00:13:21.790 --> 00:13:26.769
可能实际上更低或更低

00:13:24.820 --> 00:13:28.060
与AO t1可以得到的一样

00:13:26.769 --> 00:13:29.740
从一开始就有权利

00:13:28.060 --> 00:13:31.480
这可能是您愿意付出的代价

00:13:29.740 --> 00:13:36.370
取决于你的

00:13:31.480 --> 00:13:38.260
应用程序这样做是为了

00:13:36.370 --> 00:13:40.540
如果您快速在这里打开j9，请掩盖

00:13:38.260 --> 00:13:44.410
一直被真正设计为

00:13:40.540 --> 00:13:47.860
小我们也已经成为SE JVM 

00:13:44.410 --> 00:13:49.990
现在，它可以通过小规模

00:13:47.860 --> 00:13:51.880
内存和缩放比例一直到

00:13:49.990 --> 00:13:56.019
具有强大功能的大型服务器

00:13:51.880 --> 00:13:57.430
兆兆字节的RAM和数百个CPU 

00:13:56.019 --> 00:14:00.610
可以处理这些约束

00:13:57.430 --> 00:14:02.110
环境很好，还有更多

00:14:00.610 --> 00:14:04.329
已经上网的东西

00:14:02.110 --> 00:14:06.519
对于自动检测也很晚

00:14:04.329 --> 00:14:08.709
尿码头工人图像或其他类型

00:14:06.519 --> 00:14:11.140
虚拟化环境并启用

00:14:08.709 --> 00:14:12.700
诸如空闲检测之类的东西

00:14:11.140 --> 00:14:15.459
这些可以关闭很多额外的

00:14:12.700 --> 00:14:17.079
当您不在时，事情会给操作系统留下深刻的印象

00:14:15.459 --> 00:14:19.690
如果你在图片上就用它

00:14:17.079 --> 00:14:21.850
闲着你为什么还保留这个记忆

00:14:19.690 --> 00:14:24.250
致力于缩小到目前

00:14:21.850 --> 00:14:26.260
支持操作系统的工作集大小指针

00:14:24.250 --> 00:14:28.779
如果需要，您可以再次成长

00:14:26.260 --> 00:14:30.399
再次记忆，所以这些类型的

00:14:28.779 --> 00:14:35.079
一切都在线上

00:14:30.399 --> 00:14:37.240
在开放j9中完成，所以对我来说

00:14:35.079 --> 00:14:40.000
打开的j9 jbm可以保存

00:14:37.240 --> 00:14:41.980
今天在这里，这是我们

00:14:40.000 --> 00:14:44.050
真的希望很多人会

00:14:41.980 --> 00:14:46.660
尝试再看一遍

00:14:44.050 --> 00:14:49.000
非常好的执照，所以任何人都可以

00:14:46.660 --> 00:14:53.769
贡献并用于您的任何用途

00:14:49.000 --> 00:14:56.410
需要使用它，并且在那里

00:14:53.769 --> 00:14:58.300
再次不要只听我的话

00:14:56.410 --> 00:15:02.050
如果您在Twitter上查找并搜索

00:14:58.300 --> 00:15:04.779
该应用程序打开j9标记，而结尾处

00:15:02.050 --> 00:15:06.910
该用户帐户有很多人

00:15:04.779 --> 00:15:09.550
定期谈论这个只是

00:15:06.910 --> 00:15:11.079
就像这里最底层的一样

00:15:09.550 --> 00:15:13.839
切换它，我从三个画

00:15:11.079 --> 00:15:15.640
我的记忆从100兆到130兆

00:15:13.839 --> 00:15:19.000
大小，他们保持相同或

00:15:15.640 --> 00:15:24.040
稍微好一点的证据，所以我现在将移动

00:15:19.000 --> 00:15:26.560
继续向杰米致谢查理如此

00:15:24.040 --> 00:15:28.810
云交配的Chava我们完成了

00:15:26.560 --> 00:15:31.959
是的，没什么可看的，让我们前进

00:15:28.810 --> 00:15:32.510
一直以来，我仍然需要做出反应

00:15:31.959 --> 00:15:35.090
攻击我的

00:15:32.510 --> 00:15:38.120
位置或实际上没有云本机

00:15:35.090 --> 00:15:42.170
引入了一些新的挑战，所以动手了

00:15:38.120 --> 00:15:47.240
举起好手举起阿比什么手

00:15:42.170 --> 00:15:48.380
选择C，所以正确答案是C是

00:15:47.240 --> 00:15:50.900
你真的必须要建筑

00:15:48.380 --> 00:15:54.290
应用程序，但确实创建了很多

00:15:50.900 --> 00:15:57.830
新挑战，让您可以继续前进

00:15:54.290 --> 00:15:59.840
您的JVM可能会超过

00:15:57.830 --> 00:16:01.130
是的，您可能拥有最好的JVM 

00:15:59.840 --> 00:16:03.830
可能很快启动的世界

00:16:01.130 --> 00:16:05.330
像打开j9一样，但是如果您运行某些命令

00:16:03.830 --> 00:16:07.130
最重要的是

00:16:05.330 --> 00:16:09.290
不会得到任何好处

00:16:07.130 --> 00:16:15.020
云，让我们来看看

00:16:09.290 --> 00:16:16.640
 Enterprise Java 1998年5月开始于

00:16:15.020 --> 00:16:19.910
一个项目，然后我们有10个

00:16:16.640 --> 00:16:23.900
规格1420，现在我们有了

00:16:19.910 --> 00:16:25.400
我在Java EE中有很多规范

00:16:23.900 --> 00:16:27.620
要快速谈论开放自由

00:16:25.400 --> 00:16:29.900
所以这是你可以运行的东西

00:16:27.620 --> 00:16:32.150
您的JVM非常轻巧

00:16:29.900 --> 00:16:33.680
应用服务器，这是一个新的开放

00:16:32.150 --> 00:16:36.380
我说消息源项目

00:16:33.680 --> 00:16:38.900
距IBM设计目标大约一年的时间

00:16:36.380 --> 00:16:42.410
该应用程序服务器的

00:16:38.900 --> 00:16:44.120
高效，所以它可以很快启动

00:16:42.410 --> 00:16:46.430
占地面积小，大约只有100兆

00:16:44.120 --> 00:16:47.990
我设法获得约10的尺寸

00:16:46.430 --> 00:16:50.420
这些都在树莓派上运行

00:16:47.990 --> 00:16:52.340
码头集装箱，所以这是一个20美元

00:16:50.420 --> 00:16:54.770
的硬件，所以这是多么小

00:16:52.340 --> 00:16:56.570
真的很简单，我们想去

00:16:54.770 --> 00:16:58.580
从我们传统的

00:16:56.570 --> 00:17:00.260
 WebSphere创建Liberty，然后

00:16:58.580 --> 00:17:01.790
开放自由，我们要做到非常

00:17:00.260 --> 00:17:04.390
使用非常简单，因此您可以进行配置

00:17:01.790 --> 00:17:06.290
整个服务器放在一个小的XML文件中

00:17:04.390 --> 00:17:07.370
我希望能够部署的一致性

00:17:06.290 --> 00:17:09.050
这在任何地方，我想成为

00:17:07.370 --> 00:17:11.720
每次都保持一致，因此

00:17:09.050 --> 00:17:13.670
我们不得不考虑的另一件事

00:17:11.720 --> 00:17:14.930
我们不需要的足够的应用程序服务器

00:17:13.670 --> 00:17:16.490
拥有这个大型应用服务器

00:17:14.930 --> 00:17:17.930
尤其是当我们在云中

00:17:16.490 --> 00:17:19.490
扩大我们不想成为的事情

00:17:17.930 --> 00:17:22.339
扩展这些大型应用程序服务器

00:17:19.490 --> 00:17:24.620
大小为5 10 GB 

00:17:22.339 --> 00:17:26.690
我们从Java EE中获得了我们想要的功能

00:17:24.620 --> 00:17:28.339
或微轮廓，然后建立起来

00:17:26.690 --> 00:17:30.590
我们有我们的应用程序服务器

00:17:28.339 --> 00:17:32.900
很小，因为我们需要它，因此对虚拟化非常有用

00:17:30.590 --> 00:17:35.000
我们有docker映像的环境

00:17:32.900 --> 00:17:36.620
所有这些对于这个应用服务器，我们

00:17:35.000 --> 00:17:38.120
有一些用于微轮廓和

00:17:36.620 --> 00:17:40.700
弹簧

00:17:38.120 --> 00:17:42.350
在迁移方面，我们不希望人们

00:17:40.700 --> 00:17:44.029
必须移动到新版本，然后

00:17:42.350 --> 00:17:46.610
必须更改我们的代码

00:17:44.029 --> 00:17:48.590
刚好工作，敏捷就可以了

00:17:46.610 --> 00:17:50.150
启动时间，你可以从字面上得到

00:17:48.590 --> 00:17:52.940
应用服务器运行在大约10 

00:17:50.150 --> 00:17:54.440
秒，这就是您可以做到的

00:17:52.940 --> 00:17:56.779
选择功能管理器以选择

00:17:54.440 --> 00:17:58.730
您要包装的功能类型

00:17:56.779 --> 00:18:00.559
这里minify将压缩服务器

00:17:58.730 --> 00:18:03.409
尽可能小且可运行

00:18:00.559 --> 00:18:05.330
把它放到一个可运行的罐子里给你

00:18:03.409 --> 00:18:06.799
这只是一些行家的例子

00:18:05.330 --> 00:18:08.529
依赖关系，这就是你要的方式

00:18:06.799 --> 00:18:11.419
使用Maven配置您的自由，并

00:18:08.529 --> 00:18:14.480
这是一个形式故事的例子

00:18:11.419 --> 00:18:16.760
类似，所以您一直在部署驱动程序

00:18:14.480 --> 00:18:19.309
多年的申请，您想

00:18:16.760 --> 00:18:21.590
迁移到云原生方法

00:18:19.309 --> 00:18:22.940
决定云原生与众不同

00:18:21.590 --> 00:18:24.830
你需要把一切都扔掉

00:18:22.940 --> 00:18:26.990
我们已经接近幻灯片了

00:18:24.830 --> 00:18:27.890
你决定你决定那只是

00:18:26.990 --> 00:18:29.149
一场风暴

00:18:27.890 --> 00:18:31.820
你会弯腰等待

00:18:29.149 --> 00:18:33.860
乌云密布还是你了解如何

00:18:31.820 --> 00:18:36.440
烂Java运行时让您重用和

00:18:33.860 --> 00:18:38.480
扩展您现有的代码，所以这是

00:18:36.440 --> 00:18:40.250
微型配置文件的大事是

00:18:38.480 --> 00:18:42.289
使您可以建立自己的知识

00:18:40.250 --> 00:18:44.419
已经有，所以每个有

00:18:42.289 --> 00:18:49.039
 Java EE的知识可以很容易地使用

00:18:44.419 --> 00:18:51.559
那些具有微观特征的知识

00:18:49.039 --> 00:18:54.169
所有云原生挑战都可能是

00:18:51.559 --> 00:18:56.149
传统上是由运行时解决的

00:18:54.169 --> 00:18:58.250
 IBM过去已经做到了

00:18:56.149 --> 00:19:00.049
很多是我们拥有很大的地方

00:18:58.250 --> 00:19:02.299
发布周期，因此每六个月一次

00:19:00.049 --> 00:19:04.580
最后两周

00:19:02.299 --> 00:19:07.070
发布周期，您的基础架构是

00:19:04.580 --> 00:19:08.210
敲定这是每个人的运行版本

00:19:07.070 --> 00:19:11.029
每个人都在尝试获取他们的代码

00:19:08.210 --> 00:19:12.980
基本上所有的基础架构

00:19:11.029 --> 00:19:14.120
突然增长的商店暂停了，您

00:19:12.980 --> 00:19:15.770
必须为此付出昂贵的代价

00:19:14.120 --> 00:19:18.049
基础设施，因为您必须

00:19:15.770 --> 00:19:20.000
处理该峰值负载，这就是为什么

00:19:18.049 --> 00:19:21.200
云很棒，因为谈到

00:19:20.000 --> 00:19:23.720
就在您开发的最后

00:19:21.200 --> 00:19:25.130
周期，那两个星期

00:19:23.720 --> 00:19:26.600
你可以付钱的云

00:19:25.130 --> 00:19:28.370
这两个星期的额外资源

00:19:26.600 --> 00:19:29.539
就像你以前在你所说的那样

00:19:28.370 --> 00:19:31.159
您无需付费的早期幻灯片

00:19:29.539 --> 00:19:33.860
所有这些计算能力始终

00:19:31.159 --> 00:19:37.760
您可以在需要时付款

00:19:33.860 --> 00:19:39.380
微粒体的敏捷性有助于获取代码

00:19:37.760 --> 00:19:41.149
生产容易得多，所以您实际上

00:19:39.380 --> 00:19:43.669
不再需要这些发布周期

00:19:41.149 --> 00:19:46.250
 IBM中有一种叫做message的产品

00:19:43.669 --> 00:19:49.100
中心，他们做得很好

00:19:46.250 --> 00:19:51.080
他们每天没有发布周期

00:19:49.100 --> 00:19:51.309
产生他们的代码，它被构建并

00:19:51.080 --> 00:19:52.419
去

00:19:51.309 --> 00:19:55.600
直接生产，这是一个

00:19:52.419 --> 00:19:57.580
日常构建的东西，效果很好

00:19:55.600 --> 00:19:59.710
这意味着我们不必拥有这个

00:19:57.580 --> 00:20:01.960
一个月的时间突然

00:19:59.710 --> 00:20:03.970
我们所有的基础设施都受到重创

00:20:01.960 --> 00:20:05.139
你必须考虑什么时候发展

00:20:03.970 --> 00:20:07.779
微服务稍有不同

00:20:05.139 --> 00:20:09.129
方式，还可以帮助您拥有所有

00:20:07.779 --> 00:20:10.360
服务分开，因为那你

00:20:09.129 --> 00:20:12.070
不必为

00:20:10.360 --> 00:20:13.659
重新部署您的整个应用程序，您可以

00:20:12.070 --> 00:20:15.399
只是做一个这个微

00:20:13.659 --> 00:20:18.370
服务再次降低了成本

00:20:15.399 --> 00:20:20.409
基础设施，因此Eclipse微型配置文件

00:20:18.370 --> 00:20:22.210
我想大家都听说过Eclipse 

00:20:20.409 --> 00:20:25.029
本次会议的微简介

00:20:22.210 --> 00:20:27.749
以微轮廓为中心的迈克尔

00:20:25.029 --> 00:20:31.269
个人资料出现了，我认为是

00:20:27.749 --> 00:20:33.460
 2016年行业基本不景气

00:20:31.269 --> 00:20:35.889
 Java EE对我们来说不够快

00:20:33.460 --> 00:20:38.220
那个云已经在这里了

00:20:35.889 --> 00:20:41.769
点，我们有点知道方法

00:20:38.220 --> 00:20:44.169
前锋正在使用云，所以很多

00:20:41.769 --> 00:20:46.059
供应商走到一起，实际上有一个

00:20:44.169 --> 00:20:47.679
像现在和现在这样的微软

00:20:46.059 --> 00:20:50.799
基本上创建自己的规范

00:20:47.679 --> 00:20:53.100
对于麦克接收器的微型配置文件

00:20:50.799 --> 00:20:55.149
这是一个很好的机会，您将使用rest api的

00:20:53.100 --> 00:20:56.470
当他们在想所有

00:20:55.149 --> 00:20:58.059
这些服务将与之通信

00:20:56.470 --> 00:21:00.369
彼此，我们需要一种方式来拥有这些

00:20:58.059 --> 00:21:03.129
服务解耦，否则失败

00:21:00.369 --> 00:21:05.169
我爱的微服务的重点

00:21:03.129 --> 00:21:07.210
 WebSockets我认为它们很棒，但是

00:21:05.169 --> 00:21:09.700
不幸的是，减少了很强

00:21:07.210 --> 00:21:12.249
服务与休息之间的耦合

00:21:09.700 --> 00:21:14.860
 api和HTTP请求看起来像一个

00:21:12.249 --> 00:21:18.249
提供解决方案的好方法

00:21:14.860 --> 00:21:20.289
为此，Eclipse微配置文件位于

00:21:18.249 --> 00:21:22.869
开始我们看一下Java EE 

00:21:20.289 --> 00:21:25.470
规格，并决定这些是

00:21:22.869 --> 00:21:29.529
微服务的基础

00:21:25.470 --> 00:21:32.169
其余客户端依赖项注入JSONP 

00:21:29.529 --> 00:21:34.629
基本上解析Jason Jason B 

00:21:32.169 --> 00:21:35.830
把一个物体变成杰森·灵

00:21:34.629 --> 00:21:37.840
再回到一个物体，这样你就可以

00:21:35.830 --> 00:21:41.259
在您的服务之间共享该对象

00:21:37.840 --> 00:21:43.779
和jax-rs，但是突然之间

00:21:41.259 --> 00:21:46.330
处理数百个合作的微观

00:21:43.779 --> 00:21:49.179
服务，他们正在不断发展

00:21:46.330 --> 00:21:51.580
时间我们不能只使用那些api和

00:21:49.179 --> 00:21:54.100
那还不够，所以随后出现了

00:21:51.580 --> 00:21:56.740
微型个人资料添加了自己的api，因此

00:21:54.100 --> 00:21:58.509
基本上，您已经获得了配置

00:21:56.740 --> 00:22:00.129
我没有这数百种微服务

00:21:58.509 --> 00:22:02.139
想进入配置每个

00:22:00.129 --> 00:22:04.600
这些微服务是痛苦的

00:22:02.139 --> 00:22:05.050
烧伤，所以基本上配置

00:22:04.600 --> 00:22:07.330
允许

00:22:05.050 --> 00:22:08.920
外部化您的配置，以便

00:22:07.330 --> 00:22:11.410
例如docker容器

00:22:08.920 --> 00:22:12.970
你可以挂载在你的配置中

00:22:11.410 --> 00:22:14.980
改变它，它可能会改变

00:22:12.970 --> 00:22:17.380
配置为10或100微

00:22:14.980 --> 00:22:18.880
服务也可以动态工作

00:22:17.380 --> 00:22:22.390
很棒，您实际上可以改变事情

00:22:18.880 --> 00:22:24.670
当您的应用程序运行JWT时， 

00:22:22.390 --> 00:22:26.500
 JSON Web令牌，它们已经是

00:22:24.670 --> 00:22:28.480
标准，并且它们与

00:22:26.500 --> 00:22:30.790
 HTTP请求，因此看起来像

00:22:28.480 --> 00:22:33.130
安全故障的明显选择

00:22:30.790 --> 00:22:36.280
容错，所以我们需要容错

00:22:33.130 --> 00:22:38.260
确保我们之一的方法

00:22:36.280 --> 00:22:41.560
服务无法到达，我们有一个

00:22:38.260 --> 00:22:43.420
后退，所以我的Netflix非常做到这一点

00:22:41.560 --> 00:22:44.890
好，所以推荐服务

00:22:43.420 --> 00:22:47.320
推荐显示的顶部

00:22:44.890 --> 00:22:50.470
根据您的观看个性化的您

00:22:47.320 --> 00:22:52.270
现在的习惯，如果那下降了，我们

00:22:50.470 --> 00:22:54.370
真的想要在那里有一个大黑酒吧

00:22:52.270 --> 00:22:55.360
我们真的希望Netflix不工作，不，我们

00:22:54.370 --> 00:22:57.280
需要一个解决方案

00:22:55.360 --> 00:22:58.900
因此容错性基本上可以

00:22:57.280 --> 00:23:00.790
您在上方添加一些注释

00:22:58.900 --> 00:23:02.620
你的方法给它另一种方法

00:23:00.790 --> 00:23:04.600
回落到这样，那么我们可以有

00:23:02.620 --> 00:23:07.600
另一个我的保存人，例如

00:23:04.600 --> 00:23:09.280
 Netflix有一个推荐服务

00:23:07.600 --> 00:23:11.380
总是坐在那里的通用

00:23:09.280 --> 00:23:13.870
如果他们的主要失败，那就是

00:23:11.380 --> 00:23:15.520
为您量身定制迈克尔个人资料

00:23:13.870 --> 00:23:17.500
然后让您回到这个

00:23:15.520 --> 00:23:19.630
通用微服务，这种情况相当普遍

00:23:17.500 --> 00:23:21.550
在Netflix上很多，但用户却没有

00:23:19.630 --> 00:23:22.840
知道正在发生的一切，他们所看到的是

00:23:21.550 --> 00:23:24.520
推荐服务仍在

00:23:22.840 --> 00:23:26.410
工作，并建议一些节目

00:23:24.520 --> 00:23:28.330
对你你不知道那是不

00:23:26.410 --> 00:23:30.130
不再为您量身定制，这就是为什么

00:23:28.330 --> 00:23:32.740
容错恢复果汁，然后

00:23:30.130 --> 00:23:34.780
打开ABI打开API抱歉基本上是

00:23:32.740 --> 00:23:37.420
允许您拥有一组通用的API 

00:23:34.780 --> 00:23:39.730
供您的供应商使用，因此您

00:23:37.420 --> 00:23:41.860
部署依赖于

00:23:39.730 --> 00:23:44.890
其他团队，你注意到了一些

00:23:41.860 --> 00:23:47.770
服务中的错误，是由于

00:23:44.890 --> 00:23:49.600
您的服务失败了，您该怎么办

00:23:47.770 --> 00:23:51.310
你责怪对方吗

00:23:49.600 --> 00:23:53.650
他们他们需要整理架子

00:23:51.310 --> 00:23:55.450
坚定地坐在那里等

00:23:53.650 --> 00:23:57.910
并相信最终他们会解决

00:23:55.450 --> 00:23:59.980
问题或您承担责任

00:23:57.910 --> 00:24:03.580
优雅地应对不稳定

00:23:59.980 --> 00:24:06.580
在服务中，所以举起手来

00:24:03.580 --> 00:24:09.670
去那很好的举手就是好

00:24:06.580 --> 00:24:12.460
谢谢你并举手致意C太棒了，所以

00:24:09.670 --> 00:24:15.250
我个人会选择和CI 

00:24:12.460 --> 00:24:17.170
将负责应对

00:24:15.250 --> 00:24:18.400
在这些情况下，但我会

00:24:17.170 --> 00:24:20.950
还回到团队

00:24:18.400 --> 00:24:22.480
说你很幸运，我用我以前的方式编码

00:24:20.950 --> 00:24:24.280
因为否则服务将具有

00:24:22.480 --> 00:24:26.950
我个人就倒下了

00:24:24.280 --> 00:24:28.600
与代理商合作，是的，现在我们必须

00:24:26.950 --> 00:24:31.090
处理数百个合作的微观

00:24:28.600 --> 00:24:32.560
服务，突然之间我们不得不

00:24:31.090 --> 00:24:34.990
考虑我们从来不需要考虑的事情

00:24:32.560 --> 00:24:36.640
在所有这些服务之前

00:24:34.990 --> 00:24:38.680
通过一个彼此沟通

00:24:36.640 --> 00:24:40.120
网络和整体应用程序

00:24:38.680 --> 00:24:42.810
我们之前不必担心

00:24:40.120 --> 00:24:46.000
因此，这三个的介绍

00:24:42.810 --> 00:24:47.740
开放式跟踪使您可以准确查看

00:24:46.000 --> 00:24:49.630
您之间的所有请求

00:24:47.740 --> 00:24:52.450
服务及其回应

00:24:49.630 --> 00:24:55.540
服务，因此它可以跟踪请求

00:24:52.450 --> 00:24:58.210
更容易进行健康检查

00:24:55.540 --> 00:25:00.340
几乎说微服务

00:24:58.210 --> 00:25:02.740
你还活着是吗好这是一个请求

00:25:00.340 --> 00:25:05.560
微服务，您还活着吗？ 

00:25:02.740 --> 00:25:07.420
退回其他内容和指标

00:25:05.560 --> 00:25:09.250
基本上可以让你确定

00:25:07.420 --> 00:25:11.650
微服务中的指标

00:25:09.250 --> 00:25:13.960
你可以看到堆的大小

00:25:11.650 --> 00:25:16.030
您正在使用多少内存

00:25:13.960 --> 00:25:17.710
您正在使用的CPU使用率，甚至可以

00:25:16.030 --> 00:25:19.960
将自定义指标轻松放入

00:25:17.710 --> 00:25:21.400
因此您可以在其中放置指标

00:25:19.960 --> 00:25:22.960
这个方法多少次

00:25:21.400 --> 00:25:24.760
被叫了我几次

00:25:22.960 --> 00:25:26.620
退回多少次重试

00:25:24.760 --> 00:25:28.180
采取微服务，所以与

00:25:26.620 --> 00:25:29.460
您几乎可以自定义的指标

00:25:28.180 --> 00:25:32.530
你想要的任何方式

00:25:29.460 --> 00:25:35.320
所以你是现场的骄傲的主人

00:25:32.530 --> 00:25:37.390
生产微服务，但像我一样

00:25:35.320 --> 00:25:38.950
像我周末一样，我不喜欢坐

00:25:37.390 --> 00:25:42.250
整个周末都在电脑前

00:25:38.950 --> 00:25:44.860
解决问题，您是否认为这是一个

00:25:42.250 --> 00:25:46.330
没有操作，因为封装很棒

00:25:44.860 --> 00:25:47.260
关于微服务的事情就是你

00:25:46.330 --> 00:25:51.190
永远不需要知道发生了什么

00:25:47.260 --> 00:25:54.310
您将所有内容都写入STD应用

00:25:51.190 --> 00:25:57.190
 X Factor 12因子网告诉您

00:25:54.310 --> 00:25:59.560
这就是您需要做的或要做的

00:25:57.190 --> 00:26:02.350
通过健康的方式来衡量您的服务

00:25:59.560 --> 00:26:05.560
 ku使用Prometheus和

00:26:02.350 --> 00:26:11.260
与Zipkin一起使用开放式跟踪

00:26:05.560 --> 00:26:14.020
换成C的好蚂蚁B很酷，所以

00:26:11.260 --> 00:26:16.390
肯定基本上看，如果你把所有

00:26:14.020 --> 00:26:17.980
可以放入麦克风接收器中

00:26:16.390 --> 00:26:19.810
弄清楚发生了什么

00:26:17.980 --> 00:26:21.280
很快，或者好像你没有

00:26:19.810 --> 00:26:24.280
需要很长时间调试这些

00:26:21.280 --> 00:26:26.140
事情，所以每个人都可能认为很好

00:26:24.280 --> 00:26:29.530
为什么我不能通过一项服务来完成所有这些工作

00:26:26.140 --> 00:26:31.630
网格为什么我不是说kubernetes呢

00:26:29.530 --> 00:26:32.230
这些事情很多，是kubernetes 

00:26:31.630 --> 00:26:33.700
确实

00:26:32.230 --> 00:26:35.470
重试和超时并

00:26:33.700 --> 00:26:37.299
隔板中的断路器，但

00:26:35.470 --> 00:26:39.340
 kubernetes不提供任何服务

00:26:37.299 --> 00:26:41.590
如果我无法击中我的后备条款

00:26:39.340 --> 00:26:43.990
微服务，我需要它回落

00:26:41.590 --> 00:26:46.419
像Netflix这样的东西

00:26:43.990 --> 00:26:48.790
现在它可以发挥作用了

00:26:46.419 --> 00:26:50.559
混合搭配，您可以使用kubernetes 

00:26:48.790 --> 00:26:52.090
前四名，或者您可以使用

00:26:50.559 --> 00:26:53.830
 kubernetes是前四名之一， 

00:26:52.090 --> 00:26:55.330
让您的应用程序完成其余的工作

00:26:53.830 --> 00:26:57.809
这完全取决于你，但是

00:26:55.330 --> 00:27:02.260
不幸的是，您的服务网格无法

00:26:57.809 --> 00:27:05.440
解决问题，所以包装

00:27:02.260 --> 00:27:06.669
到目前为止，我很确定

00:27:05.440 --> 00:27:07.870
据我所知，我还没有遇到过

00:27:06.669 --> 00:27:11.380
不支持的云

00:27:07.870 --> 00:27:13.179
达喀达喀基本上在我看来

00:27:11.380 --> 00:27:16.390
码头工人已将微服务推向

00:27:13.179 --> 00:27:19.390
他们现在在哪里码头工人来到了我身边

00:27:16.390 --> 00:27:21.460
在迈克尔之前思考

00:27:19.390 --> 00:27:23.530
简介让我们着眼于世界

00:27:21.460 --> 00:27:25.179
所以在我们拥有这些之前

00:27:23.530 --> 00:27:26.470
大型整体应用以及何时

00:27:25.179 --> 00:27:28.510
开始给他们贴文件Aynor 

00:27:26.470 --> 00:27:30.640
突然间它赚不了多少

00:27:28.510 --> 00:27:31.660
感觉就像曾经一样

00:27:30.640 --> 00:27:33.850
这些docker容器全部

00:27:31.660 --> 00:27:36.280
在同一网络上通信为什么

00:27:33.850 --> 00:27:38.080
你不把你的申请分开吗

00:27:36.280 --> 00:27:40.690
我要谈几层

00:27:38.080 --> 00:27:43.330
所以这不好

00:27:40.690 --> 00:27:45.610
这很好，我现在解释为什么

00:27:43.330 --> 00:27:47.919
因为码头工人非常擅长

00:27:45.610 --> 00:27:49.809
共享图层（如果相同） 

00:27:47.919 --> 00:27:51.970
例如在这里它将共享操作系统

00:27:49.809 --> 00:27:54.160
它将共享JVM层，但是

00:27:51.970 --> 00:27:56.500
该层将不会共享，因为现在

00:27:54.160 --> 00:27:58.240
你有这个大胖子罐子，而如果

00:27:56.500 --> 00:27:59.980
你有两个你可以

00:27:58.240 --> 00:28:02.620
共享应用层

00:27:59.980 --> 00:28:04.690
减小码头的尺寸

00:28:02.620 --> 00:28:06.370
仓库，它也可以启动

00:28:04.690 --> 00:28:10.000
您的文档所有者的时间很多

00:28:06.370 --> 00:28:13.330
更快，所以你的老板要求你

00:28:10.000 --> 00:28:16.049
推荐一个开放的技术栈

00:28:13.330 --> 00:28:18.970
您部署微服务吗

00:28:16.049 --> 00:28:20.740
推荐eclipse open j9进行优化

00:28:18.970 --> 00:28:22.900
您的运行时特征和成本

00:28:20.740 --> 00:28:24.520
对于云，您推荐微型吗

00:28:22.900 --> 00:28:27.179
配置文件以添加弹性监视器

00:28:24.520 --> 00:28:30.760
与供应商无关的能力

00:28:27.179 --> 00:28:32.679
还是您建议合适的尺寸

00:28:30.760 --> 00:28:37.690
具有广泛开放规范支持的运行时

00:28:32.679 --> 00:28:41.250
是的，是自由的开放还是活下去，所以我

00:28:37.690 --> 00:28:44.650
从D开始举起手来为D和

00:28:41.250 --> 00:28:48.490
没关系

00:28:44.650 --> 00:28:50.080
是的，正确的一件事是

00:28:48.490 --> 00:28:51.760
在这里我要你从中带走

00:28:50.080 --> 00:28:55.510
与供应商无关

00:28:51.760 --> 00:28:57.100
所以春天很容易学，你

00:28:55.510 --> 00:28:59.560
可以学习，可以起来

00:28:57.100 --> 00:29:02.620
很快地和春天一起跑步

00:28:59.560 --> 00:29:04.900
锁定在一个供应商中，该供应商

00:29:02.620 --> 00:29:07.150
拥有一切的控制权

00:29:04.900 --> 00:29:09.070
如果他们决定，那真的是一个很大的问题

00:29:07.150 --> 00:29:11.620
做一个你不喜欢艰难的决定

00:29:09.070 --> 00:29:13.990
你必须处理它，而微观

00:29:11.620 --> 00:29:15.820
个人资料中有很多供应商

00:29:13.990 --> 00:29:19.240
他从输入规范到

00:29:15.820 --> 00:29:21.580
输入他们的想法是

00:29:19.240 --> 00:29:24.100
基本上很难

00:29:21.580 --> 00:29:26.410
没有你的事情会发生

00:29:24.100 --> 00:29:28.660
输入本质上为

00:29:26.410 --> 00:29:30.400
你也不会被限制在一个

00:29:28.660 --> 00:29:32.290
供应商为您提供支持

00:29:30.400 --> 00:29:34.330
现在可以去多个供应商那里

00:29:32.290 --> 00:29:36.700
希望支持会降低

00:29:34.330 --> 00:29:38.230
你花了一点钱，所以我要

00:29:36.700 --> 00:29:39.940
向您展示一些后备代码

00:29:38.230 --> 00:29:43.600
只是向您展示这是多么简单

00:29:39.940 --> 00:29:46.810
这个我们有一个网站开放的自由点

00:29:43.600 --> 00:29:49.630
 IO和负载

00:29:46.810 --> 00:29:51.760
这里有一些开放的自由指南

00:29:49.630 --> 00:29:54.700
具体的，但是我们有负担

00:29:51.760 --> 00:29:56.790
处理微观轮廓和故障

00:29:54.700 --> 00:29:58.750
容忍与JWT有关

00:29:56.790 --> 00:30:01.600
其中一些是互动的，这是

00:29:58.750 --> 00:30:05.050
很好，但是例如这是错误

00:30:01.600 --> 00:30:07.630
宽容这就是你所需要的

00:30:05.050 --> 00:30:09.640
需要做的是一次进口和

00:30:07.630 --> 00:30:12.670
注释和基本上所有的工作

00:30:09.640 --> 00:30:14.170
基本上说这是否失败

00:30:12.670 --> 00:30:14.800
另一种方法是这里的后备

00:30:14.170 --> 00:30:16.840
方法

00:30:14.800 --> 00:30:18.310
所以本质上Netflix在做什么

00:30:16.840 --> 00:30:20.170
这种情况下的后备方法

00:30:18.310 --> 00:30:22.450
会去打电话给另一个服务，那是

00:30:20.170 --> 00:30:25.240
在微型计算机上进行回退有多简单

00:30:22.450 --> 00:30:27.130
个人资料，我也要给你看

00:30:25.240 --> 00:30:31.360
一点点配置如何做配置

00:30:27.130 --> 00:30:33.070
这是我的配置文件

00:30:31.360 --> 00:30:35.290
产品属性文件，我已经

00:30:33.070 --> 00:30:37.210
那里的东西，如端口号是

00:30:35.290 --> 00:30:38.770
它维护，因此您可以更改布尔值

00:30:37.210 --> 00:30:40.450
判断是真还是假

00:30:38.770 --> 00:30:41.350
喜欢停止请求去某个

00:30:40.450 --> 00:30:43.480
如果您正在做微服务

00:30:41.350 --> 00:30:45.490
维护也可以

00:30:43.480 --> 00:30:47.050
一条消息说所有这些网站位于

00:30:45.490 --> 00:30:50.170
维护稍后再试

00:30:47.050 --> 00:30:52.930
这样，然后导入所有

00:30:50.170 --> 00:30:55.960
您要做的就是在这里导入

00:30:52.930 --> 00:30:57.530
然后像这样简单地注入配置

00:30:55.960 --> 00:31:00.740
而现在

00:30:57.530 --> 00:31:01.910
 Figg将是这个整数

00:31:00.740 --> 00:31:03.980
从您的端口​​号

00:31:01.910 --> 00:31:05.420
配置，您也可以做

00:31:03.980 --> 00:31:07.070
这是动态的，所以你

00:31:05.420 --> 00:31:08.450
应用程序正在运行，您可以更改

00:31:07.070 --> 00:31:13.520
配置和您的应用程序

00:31:08.450 --> 00:31:17.690
会立即从我那里拿起

00:31:13.520 --> 00:31:20.540
我，我想那是它的doo-doo-doo-doo 

00:31:17.690 --> 00:31:25.280
这是一些有用的链接，所以我们有一个

00:31:20.540 --> 00:31:27.650
链接到，所以有一个指向打开的j9的链接

00:31:25.280 --> 00:31:29.180
网站上有一个采用开放的链接

00:31:27.650 --> 00:31:32.630
您可以在其中获得所有新功能的JDK网站

00:31:29.180 --> 00:31:34.730
版本Mike个人资料到I / O剪辑

00:31:32.630 --> 00:31:36.230
微型文件网站我刚刚建立的网站

00:31:34.730 --> 00:31:39.020
向您展示了所有指南，以及

00:31:36.230 --> 00:31:42.020
开放能力网站，那就是

00:31:39.020 --> 00:31:50.810
我们的演讲结束谢谢

00:31:42.020 --> 00:31:55.010
我们现在有任何疑问对不起吗

00:31:50.810 --> 00:31:57.320
可用的是针对Java 8 9的开放式j9 

00:31:55.010 --> 00:32:00.580
和10个正在维护中，因为

00:31:57.320 --> 00:32:15.680
他们不再发布11，而我

00:32:00.580 --> 00:32:22.130
认为11是selasa被采用

00:32:15.680 --> 00:32:24.500
没有比Java 8更古老的版本了

00:32:22.130 --> 00:32:26.510
 j9源代码，它是开源的作品

00:32:24.500 --> 00:32:28.610
相同的源代码适用于8和

00:32:26.510 --> 00:32:30.080
每次发布更新，我们都会构建所有

00:32:28.610 --> 00:32:40.130
相同的病毒，但不是

00:32:30.080 --> 00:32:44.930
基本上支持8岁以上的任何事物

00:32:40.130 --> 00:32:49.280
比较开放j9和开放JDK 

00:32:44.930 --> 00:32:53.990
发布目标是当天，但

00:32:49.280 --> 00:32:55.980
更有可能是同一周

00:32:53.990 --> 00:33:17.640
这里

00:32:55.980 --> 00:33:21.450
这些都更多了

00:33:17.640 --> 00:33:23.040
现在解决了，因为它是开放的，我没有

00:33:21.450 --> 00:33:24.660
想说所有的都是

00:33:23.040 --> 00:33:25.950
如果您确实遇到了另一个

00:33:24.660 --> 00:33:27.330
还是那样的东西

00:33:25.950 --> 00:33:28.770
应该已经解决了原因

00:33:27.330 --> 00:33:32.100
我能想到的最后一个是贾巴

00:33:28.770 --> 00:33:33.630
梁管理api的我们现在

00:33:32.100 --> 00:33:35.820
正确执行那些

00:33:33.630 --> 00:33:38.190
命名空间，事情已经发生了很多变化

00:33:35.820 --> 00:33:39.840
的确为您解决了

00:33:38.190 --> 00:33:42.090
您是Java的新手还是新手

00:33:39.840 --> 00:33:44.760
模块，因为很多事情不得不

00:33:42.090 --> 00:33:47.370
被列为内部JDK，所以他们结束了

00:33:44.760 --> 00:33:52.100
在那个完全相同的名称空间中

00:33:47.370 --> 00:34:21.780
为那些问题指出任何问题

00:33:52.100 --> 00:34:24.240
是的，所以实际上有两个大解决方案

00:34:21.780 --> 00:34:25.679
为此，这不是我的正常

00:34:24.240 --> 00:34:27.240
推荐的解决方案是您实际上可以

00:34:25.679 --> 00:34:28.919
启动时挂载卷

00:34:27.240 --> 00:34:30.149
博士学位，所以你打地图

00:34:28.919 --> 00:34:32.639
并将其作为您共享的地方

00:34:30.149 --> 00:34:34.139
内存是另一种选择

00:34:32.639 --> 00:34:36.149
通常我向人们推荐的是

00:34:34.139 --> 00:34:37.050
您正在构建自己的文档

00:34:36.149 --> 00:34:38.840
因为你有东西

00:34:37.050 --> 00:34:41.669
与您的应用程序一起安装

00:34:38.840 --> 00:34:43.200
作为构建docker映像的一部分

00:34:41.669 --> 00:34:45.840
在构建应用程序时

00:34:43.200 --> 00:34:48.419
层，如果您正在将其分层

00:34:45.840 --> 00:34:51.119
然后，一旦您完成

00:34:48.419 --> 00:34:53.490
安装我会让它实际运行

00:34:51.119 --> 00:34:55.260
申请一次，以便它实际上

00:34:53.490 --> 00:34:57.060
为您创建共享类缓存

00:34:55.260 --> 00:34:58.990
然后它成为您的医生的一部分

00:34:57.060 --> 00:35:01.609
应用层

00:34:58.990 --> 00:35:03.950
是的，否则你必须做一次

00:35:01.609 --> 00:35:09.579
否则你会失去一切

00:35:03.950 --> 00:35:09.579
像你说的那样，还有一个

00:35:16.839 --> 00:35:21.589
更快的启动我每天都用它对不起

00:35:19.789 --> 00:35:24.529
我每天都用到几个月

00:35:21.589 --> 00:35:27.349
以前当我有了MacBook时现在我们有了

00:35:24.529 --> 00:35:29.450
商品Cuz Open J9在

00:35:27.349 --> 00:35:30.829
 Mac，直到最后一个版本，所以我只是

00:35:29.450 --> 00:35:32.269
并没有改变旅行的一切

00:35:30.829 --> 00:35:35.390
一周前请勿触摸笔记本电脑

00:35:32.269 --> 00:35:37.730
你在场，但我一直在我

00:35:35.390 --> 00:35:40.069
我一直使用Windows笔记本电脑打开j9或

00:35:37.730 --> 00:35:42.049
当时使用共享的IBM JVM 

00:35:40.069 --> 00:35:45.410
上课，所以启动总是很

00:35:42.049 --> 00:35:48.079
快一点，堆也一样

00:35:45.410 --> 00:35:50.359
为丰富的桌面客户端节省的资金，例如

00:35:48.079 --> 00:35:53.119
不太一样，因为

00:35:50.359 --> 00:35:55.460
好吧，如果你不去改变你的耳朵

00:35:53.119 --> 00:35:56.480
我和我仍然提出更改一些

00:35:55.460 --> 00:35:58.400
您将要使用的设置

00:35:56.480 --> 00:36:00.650
更多，因为它提供了更多，所以是我们

00:35:58.400 --> 00:36:02.630
不能比那少，但即使当我

00:36:00.650 --> 00:36:06.019
没有降低它，我会说是

00:36:02.630 --> 00:36:09.619
大约更多20％15 

00:36:06.019 --> 00:36:11.720
内存减少的百分比，但我通常是

00:36:09.619 --> 00:36:15.259
无论如何真的很难推动它

00:36:11.720 --> 00:36:16.819
通常最终会使用更多，但是当我

00:36:15.259 --> 00:36:19.130
当时正在为

00:36:16.819 --> 00:36:20.809
虽然我肯定看到了一些不错的东西

00:36:19.130 --> 00:36:23.150
可以启动的改进

00:36:20.809 --> 00:36:25.430
我一直在做我的插件

00:36:23.150 --> 00:36:27.730
这项发展为新形象锦上添花

00:36:25.430 --> 00:36:27.730
每时每刻

00:36:55.930 --> 00:37:16.819
就像移动GC一样

00:36:58.339 --> 00:37:19.880
我们要退还的东西取决于

00:37:16.819 --> 00:37:21.740
在GC政策上，我们有不同之处

00:37:19.880 --> 00:37:23.359
他们中有些人喜欢的方式

00:37:21.740 --> 00:37:25.369
像我们这样的地区性收藏家

00:37:23.359 --> 00:37:27.710
等于G one的余额，并且

00:37:25.369 --> 00:37:30.980
那些类型的收藏家是相当

00:37:27.710 --> 00:37:32.960
容易一些，但要做一些我们要做的

00:37:30.980 --> 00:37:34.579
实际上最终不得不压缩

00:37:32.960 --> 00:37:39.160
堆，以便我们可以放弃高

00:37:34.579 --> 00:37:41.869
地址的大部分时间是这样

00:37:39.160 --> 00:37:43.520
我们会在不同的时间这样做

00:37:41.869 --> 00:37:45.230
我们这样做的主要时间之一是何时

00:37:43.520 --> 00:37:47.510
我们检测到您的应用程序正在运行

00:37:45.230 --> 00:37:50.540
闲着，所以那时候你不是

00:37:47.510 --> 00:37:53.150
消耗很多CPU，所以我们希望

00:37:50.540 --> 00:37:55.220
如果闲着没事，那么我们会

00:37:53.150 --> 00:37:57.200
实际上，我们会做一个紧凑的

00:37:55.220 --> 00:38:01.250
收缩堆，M建议它回来

00:37:57.200 --> 00:38:04.280
有时我们最终会怎么做

00:38:01.250 --> 00:38:06.859
在运行时也是如此，但是通常我们

00:38:04.280 --> 00:38:09.260
尽量避免那样的闲置

00:38:06.859 --> 00:38:11.839
通常将其保持较小的阶段

00:38:09.260 --> 00:38:13.460
是我们实际上不扩大我们

00:38:11.839 --> 00:38:15.020
不要占用你所有的记忆

00:38:13.460 --> 00:38:20.390
给了我们更少的钱

00:38:15.020 --> 00:38:21.349
很多时间在垃圾收集器中很酷

00:38:20.390 --> 00:38:23.980
谢谢大家

00:38:21.349 --> 00:38:23.980
谢谢

00:38:25.530 --> 00:38:28.319
 [掌声] 

