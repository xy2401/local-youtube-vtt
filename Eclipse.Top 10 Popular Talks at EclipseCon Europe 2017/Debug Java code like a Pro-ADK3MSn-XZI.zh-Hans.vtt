WEBVTT
Kind: captions
Language: zh-Hans

00:00:32.009 --> 00:00:35.149
 [音乐] 

00:01:06.110 --> 00:01:14.940
一个好的汤姆时间开始

00:01:10.380 --> 00:01:16.770
欢迎大家，我希望你喜欢

00:01:14.940 --> 00:01:19.650
会议和我一样多

00:01:16.770 --> 00:01:21.630
我叫Mikkel Babu，我为

00:01:19.650 --> 00:01:24.570
我在Eclipse Foundation工作

00:01:21.630 --> 00:01:25.590
基础设施团队，但我也是

00:01:24.570 --> 00:01:27.660
从UI提交者

00:01:25.590 --> 00:01:30.780
今天我想和大家分享

00:01:27.660 --> 00:01:34.800
一些技巧和窍门，如何调试Java 

00:01:30.780 --> 00:01:36.899
首先更有效地编码

00:01:34.800 --> 00:01:39.450
首先，我有一个简短的问题

00:01:36.899 --> 00:01:42.149
你对Sarika说的确实是什么

00:01:39.450 --> 00:01:44.899
昨天已经是调试了

00:01:42.149 --> 00:01:47.700
使用Java EE富有成效

00:01:44.899 --> 00:01:49.830
好的，只是你们几个

00:01:47.700 --> 00:01:52.649
它们之间有很多重叠

00:01:49.830 --> 00:01:53.990
显然有两个谈话，但照片是

00:01:52.649 --> 00:01:57.710
从昨天变成了工具

00:01:53.990 --> 00:02:01.679
希望你会得到一些新的花样

00:01:57.710 --> 00:02:04.740
所以第二个好消息奇怪的是没有幻灯片

00:02:01.679 --> 00:02:08.789
大部分是演示，因此略有偏离

00:02:04.740 --> 00:02:09.869
不会忘记告诉你一些东西，所以

00:02:08.789 --> 00:02:12.750
我想分享的第一件事

00:02:09.869 --> 00:02:15.209
与您一起可以自定义

00:02:12.750 --> 00:02:18.420
调试透视图，以便您使用

00:02:15.209 --> 00:02:20.130
调试电容的默认布局

00:02:18.420 --> 00:02:24.810
所以不要触摸布局上的任何东西

00:02:20.130 --> 00:02:26.000
在调试器上可以，因此可以自定义

00:02:24.810 --> 00:02:28.950
它真的

00:02:26.000 --> 00:02:31.830
等那么多，我们会看看你是否

00:02:28.950 --> 00:02:34.830
完全自定义方式

00:02:31.830 --> 00:02:39.270
你可以做到的，所以我会告诉你我

00:02:34.830 --> 00:02:42.390
通常为我自己，也许你

00:02:39.270 --> 00:02:45.000
会发现它更容易，所以您可以

00:02:42.390 --> 00:02:47.520
已经知道这种布局，但是

00:02:45.000 --> 00:02:49.830
特别是在这个很小的屏幕上

00:02:47.520 --> 00:02:52.650
非常低的分辨率，您非常

00:02:49.830 --> 00:02:53.940
通常显示信息的空间

00:02:52.650 --> 00:02:55.010
我要做的第一件事是删除

00:02:53.940 --> 00:02:57.319
大纲

00:02:55.010 --> 00:02:59.030
然后您更改领导者布局

00:02:57.319 --> 00:03:03.200
您除了编辑器外还有调试

00:02:59.030 --> 00:03:05.060
并且您在下面有变量

00:03:03.200 --> 00:03:08.840
调试视图以及断点等

00:03:05.060 --> 00:03:10.909
这样比较容易阅读代码

00:03:08.840 --> 00:03:14.590
我们有变量和调试

00:03:10.909 --> 00:03:18.290
并排堆叠，所以这是正确的

00:03:14.590 --> 00:03:20.120
相当容易做，但是其他事情你

00:03:18.290 --> 00:03:23.599
也可以自定义菜单

00:03:20.120 --> 00:03:25.189
调试透视图的单元格栏

00:03:23.599 --> 00:03:28.239
如果您右键单击调试

00:03:25.189 --> 00:03:32.269
右上角的透视图图标

00:03:28.239 --> 00:03:33.799
您实际上可以更改工具栏

00:03:32.269 --> 00:03:34.819
该项目在工具栏中可见，因此

00:03:33.799 --> 00:03:38.959
通常在调试时

00:03:34.819 --> 00:03:40.730
不要让file选项与

00:03:38.959 --> 00:03:42.319
用户尝试不需要设置的内容

00:03:40.730 --> 00:03:44.720
的东西，也许你不需要

00:03:42.319 --> 00:03:46.819
搜索东西，所以如果您这样做

00:03:44.720 --> 00:03:49.970
看到您的工具栏已经很多

00:03:46.819 --> 00:03:51.859
更清洁，您所见的东西更少

00:03:49.970 --> 00:03:53.840
当你从一个改变时四处走动

00:03:51.859 --> 00:03:56.359
透视另一个你也可以

00:03:53.840 --> 00:03:59.629
自定义菜单，假设我们

00:03:56.359 --> 00:04:03.379
只想要租金菜单和项目

00:03:59.629 --> 00:04:07.280
空中菜单，所以我们可以删除

00:04:03.379 --> 00:04:13.280
除了运行和项目1之外的所有内容

00:04:07.280 --> 00:04:16.400
而且您还看到现在顶部

00:04:13.280 --> 00:04:18.620
菜单真的很干净，只有什么

00:04:16.400 --> 00:04:21.739
我需要调试你，所以这是正确的

00:04:18.620 --> 00:04:25.880
机翼，但您应该更改工作区或

00:04:21.739 --> 00:04:28.940
如果您不小心重设了观点

00:04:25.880 --> 00:04:30.889
还原为零，然后再使用

00:04:28.940 --> 00:04:33.620
这种配置，所以您可以做的是

00:04:30.889 --> 00:04:38.270
实际保存此调试透视图

00:04:33.620 --> 00:04:41.330
作为您自己的，所以点击那里

00:04:38.270 --> 00:04:44.330
我不知道今天可以点击什么

00:04:41.330 --> 00:04:47.389
自行保存此配置

00:04:44.330 --> 00:04:50.449
角度，现在我很确定自己

00:04:47.389 --> 00:04:54.110
一定能够找到它

00:04:50.449 --> 00:04:58.310
完全一样，即使我误会了

00:04:54.110 --> 00:05:01.550
访问多样性到默认

00:04:58.310 --> 00:05:05.120
如果您激活了调试开关

00:05:01.550 --> 00:05:08.220
自动透视，让我们开始

00:05:05.120 --> 00:05:10.770
仅用于

00:05:08.220 --> 00:05:13.650
示范的原因，如果我错误

00:05:10.770 --> 00:05:16.230
第一次要求您切换

00:05:13.650 --> 00:05:17.910
调试角度，通常我们

00:05:16.230 --> 00:05:20.670
记住你不想做的决定

00:05:17.910 --> 00:05:22.170
每次都会弹出，而您不在

00:05:20.670 --> 00:05:23.070
拥有自己的调试视角，您将赢得

00:05:22.170 --> 00:05:26.130
默认一个

00:05:23.070 --> 00:05:35.160
因此更改为您自己的自定义

00:05:26.130 --> 00:05:37.320
一个人可能会有点讨厌，所以你

00:05:35.160 --> 00:05:39.090
可以改变它，如果你看着

00:05:37.320 --> 00:05:41.520
偏好并搜索

00:05:39.090 --> 00:05:43.530
运行调试项中的透视图

00:05:41.520 --> 00:05:46.440
可以选择当我运行一个

00:05:43.530 --> 00:05:48.780
 JIT启动器的Java应用程序

00:05:46.440 --> 00:05:50.880
在调试模式下，我想实际使用

00:05:48.780 --> 00:05:52.350
我自己的调试透视图并切换到

00:05:50.880 --> 00:05:56.330
我自己的调试观点，而不是

00:05:52.350 --> 00:05:59.940
默认一个，所以如果我回到我的我就不

00:05:56.330 --> 00:06:03.870
 Java观点并想调试东西

00:05:59.940 --> 00:06:08.660
我自动切换到自己的

00:06:03.870 --> 00:06:11.520
自定义变量I的一个so变体

00:06:08.660 --> 00:06:14.790
不知道你们中的许多人是否必须弦乐

00:06:11.520 --> 00:06:17.070
共有两个屏幕，但您可以做什么

00:06:14.790 --> 00:06:19.560
也是配置一个新的视角

00:06:17.070 --> 00:06:29.150
在新窗口中打开，让我

00:06:19.560 --> 00:06:29.150
告诉你，如果我关闭透视图

00:06:30.260 --> 00:06:39.510
并要求日食打开时

00:06:37.620 --> 00:06:44.730
打开一个新的视角，我想打开它

00:06:39.510 --> 00:06:53.850
每次当我在新窗口中

00:06:44.730 --> 00:06:57.180
开始调试哦，我当然会得到一个新的

00:06:53.850 --> 00:06:58.169
窗口打开来调试我的代码，所以如果

00:06:57.180 --> 00:07:00.990
你必须在家放映

00:06:58.169 --> 00:07:02.669
整洁的你有你的工作代码和

00:07:00.990 --> 00:07:04.860
 Java观点与观点并存

00:07:02.669 --> 00:07:07.950
监视和教会您有调试

00:07:04.860 --> 00:07:12.260
在另一个窗口上的角度来看

00:07:07.950 --> 00:07:12.260
其他屏幕相当差

00:07:13.819 --> 00:07:20.099
所以这是一些截图

00:07:17.309 --> 00:07:21.599
你可以做南点的挂绳

00:07:20.099 --> 00:07:23.879
我想做的是

00:07:21.599 --> 00:07:28.289
看点，我们知道我们的手表

00:07:23.879 --> 00:07:31.049
 JIT中的要点，甚至是那些参加

00:07:28.289 --> 00:07:31.979
昨天Sarika的谈话很好

00:07:31.049 --> 00:07:36.809
题

00:07:31.979 --> 00:07:39.359
所以看点基本上可以让你放

00:07:36.809 --> 00:07:42.359
当您访问或修改

00:07:39.359 --> 00:07:45.539
字段，让您在

00:07:42.359 --> 00:07:48.989
您进入仪表或退出一点

00:07:45.539 --> 00:07:58.769
我告诉你我正在阅读

00:07:48.989 --> 00:08:00.269
一些到达那里可能再次更新为

00:07:58.769 --> 00:08:10.919
昨天最新的融合法案

00:08:00.269 --> 00:08:13.949
并不是一个好主意，所以你可以

00:08:10.919 --> 00:08:18.119
在每个领域上都放一些亮点

00:08:13.949 --> 00:08:21.360
阅读时的修改和字段

00:08:18.119 --> 00:08:23.579
一些字段值，但请记住

00:08:21.360 --> 00:08:29.389
这对表演有影响

00:08:23.579 --> 00:08:29.389
因此，如果您在

00:08:29.599 --> 00:08:34.740
只有那里，您可以看到

00:08:32.729 --> 00:08:42.029
图标有些不同

00:08:34.740 --> 00:08:44.159
眼镜，我想你可以在眼镜上看到

00:08:42.029 --> 00:08:46.319
断点属性，你可以说

00:08:44.159 --> 00:08:47.759
您想在每次访问时都停止

00:08:46.319 --> 00:08:49.170
字段或对其进行修改，因此请保留在

00:08:47.759 --> 00:08:51.750
考虑性能问题，因为

00:08:49.170 --> 00:08:56.250
通常这种东西被停用

00:08:51.750 --> 00:08:57.990
它，如果我不误会

00:08:56.250 --> 00:08:59.519
这让你的东西很遥远，但可以

00:08:57.990 --> 00:09:01.800
确实，如果您真的需要跟踪

00:08:59.519 --> 00:09:04.620
这一件和另一件事是你

00:09:01.800 --> 00:09:07.620
可以在方法上设置断点，因此

00:09:04.620 --> 00:09:10.170
默认情况下，这只是仪表的入口

00:09:07.620 --> 00:09:11.550
但在属性中您也可以说

00:09:10.170 --> 00:09:12.830
你想每次都停止

00:09:11.550 --> 00:09:19.360
出口

00:09:12.830 --> 00:09:19.360
所以让我们看看如果我运行它是如何工作的

00:09:24.640 --> 00:09:34.000
好吧，让我切换回原来的状态

00:09:27.740 --> 00:09:55.880
窗口，我们将返回默认值

00:09:34.000 --> 00:10:02.750
好的，我需要从

00:09:55.880 --> 00:10:16.750
主窗口与此相同

00:10:02.750 --> 00:10:16.750
结局我被诅咒

00:10:32.100 --> 00:10:36.240
好吧，让护士再次

00:10:38.329 --> 00:10:43.110
所以你可以看到它是一个光子

00:10:40.500 --> 00:11:03.769
整合账单，我得到一滴

00:10:43.110 --> 00:11:03.769
表示昨天可以更新，所以

00:11:04.250 --> 00:11:12.629
第一个检查点不是我的那个哦

00:11:08.550 --> 00:11:15.750
是的，抱歉，再次开始，不，我只是这样

00:11:12.629 --> 00:11:18.870
我们在我的领域有一个转折点

00:11:15.750 --> 00:11:20.220
字段，您可以在这一行看到

00:11:18.870 --> 00:11:23.250
强大的字段值实际上是

00:11:20.220 --> 00:11:24.959
如此编写，因此调试器位于

00:11:23.250 --> 00:11:27.449
修改字段，如果我

00:11:24.959 --> 00:11:29.399
继续下一行实际上是

00:11:27.449 --> 00:11:31.259
读取字段值，以便您可以看到

00:11:29.399 --> 00:11:34.470
访问时我们正在响应

00:11:31.259 --> 00:11:37.319
这个领域，如果我再继续我

00:11:34.470 --> 00:11:40.439
仍在访问该字段，那么我

00:11:37.319 --> 00:11:44.430
吃这个国家，我是

00:11:40.439 --> 00:11:47.269
进入苔藓，所以接下来的手表

00:11:44.430 --> 00:11:54.269
未经训练的千分尺上的点是

00:11:47.269 --> 00:11:55.380
触发，然后我们接下来

00:11:54.269 --> 00:12:00.800
异常中断等待

00:11:55.380 --> 00:12:00.800
谁知道什么是异常记录可以

00:12:01.550 --> 00:12:07.709
所以当你想调试的时候

00:12:05.579 --> 00:12:08.759
一些奇怪的例外

00:12:07.709 --> 00:12:12.750
触发了，你不知道在哪里

00:12:08.759 --> 00:12:14.759
确切地说，您想停止

00:12:12.750 --> 00:12:17.120
无论您是否抛出任何异常

00:12:14.759 --> 00:12:20.069
投放或是否未修改

00:12:17.120 --> 00:12:23.819
抓住了，是的，你有一个非常

00:12:20.069 --> 00:12:25.529
简单的代码将实际抛出

00:12:23.819 --> 00:12:27.389
一个新的指针异常，因为我的领域

00:12:25.529 --> 00:12:28.730
没有初始化，然后我正在尝试

00:12:27.389 --> 00:12:34.730
访问它

00:12:28.730 --> 00:12:36.079
所以让我们在调试模式下运行

00:12:34.730 --> 00:12:44.430
 [音乐] 

00:12:36.079 --> 00:12:46.380
设置断点，但对不起应用程序，所以如果我

00:12:44.430 --> 00:12:47.850
想要我得到这个例外，也许

00:12:46.380 --> 00:12:48.350
你知道也许你不知道你是否

00:12:47.850 --> 00:12:50.060
点击

00:12:48.350 --> 00:12:52.820
实际咨询中的例外

00:12:50.060 --> 00:12:54.950
触发Java主干的激活

00:12:52.820 --> 00:12:57.380
例外，你可以说你是否

00:12:54.950 --> 00:13:00.860
想停止，如果只有异常

00:12:57.380 --> 00:13:06.530
原因或un跷，所以让我们这样做

00:13:00.860 --> 00:13:09.050
两者，如果我知道启动它，您可以看到

00:13:06.530 --> 00:13:13.310
我被停职，因为这条线

00:13:09.050 --> 00:13:17.000
实际上会触发一些异常

00:13:13.310 --> 00:13:19.340
在断点上的小选择

00:13:17.000 --> 00:13:24.410
您实际上可以从添加它们

00:13:19.340 --> 00:13:27.050
该图标在断点视图中

00:13:24.410 --> 00:13:30.430
如果您想停止我们所有的事

00:13:27.050 --> 00:13:34.460
你当然可以输入

00:13:30.430 --> 00:13:38.180
但是你也可以说你想

00:13:34.460 --> 00:13:41.900
为此所有子类暂停

00:13:38.180 --> 00:13:46.340
例外，所以这个小复选框可以是

00:13:41.900 --> 00:13:48.530
容易忘记，有时你会发现

00:13:46.340 --> 00:13:50.360
更大的例外关键，有时

00:13:48.530 --> 00:13:54.610
你想停止画所有的人

00:13:50.360 --> 00:13:54.610
此复选框将帮助您做到这一点

00:13:58.690 --> 00:14:04.060
好的下一个条件断点

00:14:01.460 --> 00:14:05.210
知道什么是条件断点

00:14:04.060 --> 00:14:08.680
好的

00:14:05.210 --> 00:14:08.680
你们很多，所以我会很快

00:14:09.760 --> 00:14:15.710
条件断点让您定义

00:14:11.780 --> 00:14:19.760
一个只有在以下情况下才会停止的断点

00:14:15.710 --> 00:14:24.310
满足条件，所以这里有一个代码

00:14:19.760 --> 00:14:29.570
想要总结泄漏清单

00:14:24.310 --> 00:14:31.870
劳累的琴弦，所以我要你设定一个

00:14:29.570 --> 00:14:38.090
在这里的断点，我想看看

00:14:31.870 --> 00:14:39.950
极端的价值是什么

00:14:38.090 --> 00:14:42.200
开始什么是整数

00:14:39.950 --> 00:14:45.260
始于极端的值

00:14:42.200 --> 00:14:46.790
假设三十二点，我要设定一个

00:14:45.260 --> 00:14:49.550
断点，然后转到

00:14:46.790 --> 00:14:51.650
断点属性，我要添加一个

00:14:49.550 --> 00:14:53.210
条件条件和这个条件

00:14:51.650 --> 00:14:55.970
实际上是非常简单的布尔值

00:14:53.210 --> 00:14:58.470
您要返回的表达式，以及

00:14:55.970 --> 00:15:01.920
您可以访问所有变量

00:14:58.470 --> 00:15:04.380
从上下文出发，是的，我想

00:15:01.920 --> 00:15:09.960
检查字符串是否真正开始

00:15:04.380 --> 00:15:15.540
假设32，然后如果我开始

00:15:09.960 --> 00:15:20.160
此代码在调试模式下，我们将看到

00:15:15.540 --> 00:15:22.950
我只有在我的

00:15:20.160 --> 00:15:27.330
字符串等于32，不在

00:15:22.950 --> 00:15:29.190
其他情况下它是发光的，但再次

00:15:27.330 --> 00:15:29.940
对表演有一些影响，所以

00:15:29.190 --> 00:15:33.410
请不要那样做

00:15:29.940 --> 00:15:37.170
仅在您自己的生产代码中

00:15:33.410 --> 00:15:39.930
开发代码和一件好事， 

00:15:37.170 --> 00:15:46.790
 JIT今年的一项不错的改进

00:15:39.930 --> 00:16:00.890
如果我继续那如果我继续那

00:15:46.790 --> 00:16:05.190
如果我跳过调试会话， 

00:16:00.890 --> 00:16:07.920
看一下变量视图，您可以看到

00:16:05.190 --> 00:16:11.760
最后没有的新物品

00:16:07.920 --> 00:16:14.010
所以自从氧气以来，你就知道

00:16:11.760 --> 00:16:16.350
前夫人返回的值。科尔

00:16:14.010 --> 00:16:19.980
始终显示在变量视图中，因此

00:16:16.350 --> 00:16:22.740
在这里，因为我们停止了这种方法

00:16:19.980 --> 00:16:25.620
任何以32开头的字符串我都可以说

00:16:22.740 --> 00:16:28.560
这种压力实际上已经通过

00:16:25.620 --> 00:16:31.670
这个整数，它适用于任何方法

00:16:28.560 --> 00:16:37.310
柯林斯真的是洋葱救星

00:16:31.670 --> 00:16:37.310
这是真正转向霓虹灯的原因之一

00:16:39.830 --> 00:16:46.530
下一个追踪​​点，我们知道我们的价格

00:16:42.510 --> 00:16:48.510
点很少，所以这是新的

00:16:46.530 --> 00:16:53.880
氧气也是两倍

00:16:48.510 --> 00:16:55.260
基本有条件的断点为

00:16:53.880 --> 00:16:57.240
你已经在条件

00:16:55.260 --> 00:17:01.080
断点，您可以键入任何代码，然后

00:16:57.240 --> 00:17:09.620
例如可以将某些系统

00:17:01.080 --> 00:17:09.620
声明，这样你就可以把

00:17:11.130 --> 00:17:18.010
在某种情况下

00:17:14.020 --> 00:17:20.920
您执行的缺点是

00:17:18.010 --> 00:17:24.699
您可以看到带有断点的代码

00:17:20.920 --> 00:17:25.870
输出写在

00:17:24.699 --> 00:17:27.790
控制台，因此您不必添加

00:17:25.870 --> 00:17:31.450
您的代码中的任何内容，您只需要

00:17:27.790 --> 00:17:35.200
用某些系统注释断点

00:17:31.450 --> 00:17:38.610
出来的语句，所以很方便，但

00:17:35.200 --> 00:17:45.820
鲜为人知，所以做了什么

00:17:38.610 --> 00:17:49.530
氧气将其添加为真实

00:17:45.820 --> 00:17:52.120
断点属性，所以现在如果您定义

00:17:49.530 --> 00:17:55.510
如果您二十点就上网

00:17:52.120 --> 00:18:00.340
您只是在其中找到一些跟踪点

00:17:55.510 --> 00:18:02.410
运行菜单，您要求切换

00:18:00.340 --> 00:18:03.790
两次指向，它为您做什么

00:18:02.410 --> 00:18:05.890
它实际上只是在创建一个

00:18:03.790 --> 00:18:08.320
有默认条件的条件断点

00:18:05.890 --> 00:18:10.960
系统退出，您当然可以

00:18:08.320 --> 00:18:14.230
自定义它以输出调试值

00:18:10.960 --> 00:18:15.970
在控制台中，因此区域D 

00:18:14.230 --> 00:18:19.330
特别是在调试时

00:18:15.970 --> 00:18:20.890
远程一些您无法执行的代码

00:18:19.330 --> 00:18:22.750
修改输出重新加载代码

00:18:20.890 --> 00:18:27.090
自动但仍要打印

00:18:22.750 --> 00:18:27.090
来自控制台的东西，真的

00:18:27.870 --> 00:18:33.220
触发点

00:18:29.470 --> 00:18:37.090
谁知道触发点好吗

00:18:33.220 --> 00:18:42.250
很少，这又是新东西

00:18:37.090 --> 00:18:47.049
氧气触发点的断点是

00:18:42.250 --> 00:18:48.730
将激活其他断点，因此

00:18:47.049 --> 00:18:50.320
在一个例子中更容易看到

00:18:48.730 --> 00:18:56.320
假设我们有一个快速排序

00:18:50.320 --> 00:18:58.030
这种算法可以是

00:18:56.320 --> 00:19:00.760
很难调试，有时您

00:18:58.030 --> 00:19:04.240
只想停在

00:19:00.760 --> 00:19:07.540
算法直到出现某种情况

00:19:04.240 --> 00:19:10.480
满足或执行了一些代码之后

00:19:07.540 --> 00:19:12.910
而这正是

00:19:10.480 --> 00:19:16.620
触发点，所以说我想要

00:19:12.910 --> 00:19:16.620
调试一下

00:19:17.310 --> 00:19:24.700
这个小组是主循环，但仅

00:19:21.790 --> 00:19:26.740
在元素之间的第一次交换之后

00:19:24.700 --> 00:19:29.320
该阵列已经执行，所以我

00:19:26.740 --> 00:19:34.060
定义断点，我会说

00:19:29.320 --> 00:19:35.380
这个断点一个，所以交换将

00:19:34.060 --> 00:19:37.270
成为触发点

00:19:35.380 --> 00:19:40.860
所以你要么去正确的地方

00:19:37.270 --> 00:19:43.960
激活触发点的属性

00:19:40.860 --> 00:19:51.120
或者您也可以直接从

00:19:43.960 --> 00:19:53.860
运行菜单，然后说您切换了

00:19:51.120 --> 00:19:56.500
知道你可以从跑步中做到这一点

00:19:53.860 --> 00:19:59.920
你知道你可以从休息开始

00:19:56.500 --> 00:20:04.030
那里的观点，说这一个

00:19:59.920 --> 00:20:06.160
是一个触发点，那么它将做什么

00:20:04.030 --> 00:20:08.050
我什么时候运行代码显然是

00:20:06.160 --> 00:20:09.100
这个断点将是

00:20:08.050 --> 00:20:11.560
首先执行

00:20:09.100 --> 00:20:13.450
但是调试器不会在那里停止

00:20:11.560 --> 00:20:17.980
因为另一个没有

00:20:13.450 --> 00:20:21.100
触发了，所以如果我用

00:20:17.980 --> 00:20:25.900
在调试模式下可以看到我没有停止

00:20:21.100 --> 00:20:29.800
然而，这里没有任何停靠点，但是

00:20:25.900 --> 00:20:33.910
下次我继续去那里我会停下来

00:20:29.800 --> 00:20:39.280
实际上，因此您可以通过说

00:20:33.910 --> 00:20:40.990
那组人不喜欢碲化卢比

00:20:39.280 --> 00:20:44.470
零，这不是我第一次进去

00:20:40.990 --> 00:20:47.760
我的小组六次迭代中的第三次

00:20:44.470 --> 00:20:47.760
我停了下来

00:20:51.750 --> 00:20:57.370
所以实际上它是不受范围限制的

00:20:55.270 --> 00:21:02.080
您定义的断点

00:20:57.370 --> 00:21:04.240
在您的工作区中，它的作用是

00:21:02.080 --> 00:21:06.039
实际上取消了所有的断裂拉力

00:21:04.240 --> 00:21:09.130
触发断点激活所有

00:21:06.039 --> 00:21:11.169
非触发断点，并尽快

00:21:09.130 --> 00:21:18.340
已达到一个触发断点

00:21:11.169 --> 00:21:30.580
它会重新激活所有其他正确的

00:21:18.340 --> 00:21:33.280
我如果我说是的话，问题是

00:21:30.580 --> 00:21:38.770
可能会增加一些条件

00:21:33.280 --> 00:21:40.690
触发断点，是的，我们

00:21:38.770 --> 00:21:42.400
一开始我们知道如何删除

00:21:40.690 --> 00:21:48.789
我们已经完成的一些Java应用程序的工作

00:21:42.400 --> 00:21:52.020
改变了，真的很刮风，所以谁

00:21:48.789 --> 00:21:55.059
已经面临这个问题，需要一些测试

00:21:52.020 --> 00:21:57.880
仅在CI环境中失败，但

00:21:55.059 --> 00:22:00.340
我猜你不在机器上

00:21:57.880 --> 00:22:02.380
大家，所以您如何转移您的CI 

00:22:00.340 --> 00:22:04.240
环境，因为只有它

00:22:02.380 --> 00:22:07.270
问题发生的地方

00:22:04.240 --> 00:22:09.640
所以说Java是当你情绪低落时

00:22:07.270 --> 00:22:12.220
您实际上可以将代理添加到

00:22:09.640 --> 00:22:16.630
 JVM让您连接到调试器

00:22:12.220 --> 00:22:18.400
远程Java Java虚拟机如此

00:22:16.630 --> 00:22:22.330
这样做，您只需要添加此

00:22:18.400 --> 00:22:25.840
当前行，因此您可以在

00:22:22.330 --> 00:22:28.570
网络很容易，是的，我已经准备好了

00:22:25.840 --> 00:22:31.570
一个非常简单的应用程序

00:22:28.570 --> 00:22:34.000
串逆变器应用在哪里

00:22:31.570 --> 00:22:38.200
给所有的人一个有趣的字符串

00:22:34.000 --> 00:22:40.390
人物，所以这说

00:22:38.200 --> 00:22:42.789
该应用程序正在运行

00:22:40.390 --> 00:22:45.490
远程服务器，我将以

00:22:42.789 --> 00:22:48.280
全部使用远程调试模式

00:22:45.490 --> 00:22:49.840
看到我等待调试器的时间

00:22:48.280 --> 00:22:51.970
在开始之前实际连接

00:22:49.840 --> 00:22:53.220
程序，但我也可以说开始

00:22:51.970 --> 00:22:56.340
程序而不是

00:22:53.220 --> 00:22:59.280
等待视频连接，所以

00:22:56.340 --> 00:23:06.000
 Java功能，然后回到我的

00:22:59.280 --> 00:23:08.840
 Eclipse环境中，我可以定义一个

00:23:06.000 --> 00:23:12.150
他们开始的远程Java应用程序

00:23:08.840 --> 00:23:15.660
配置，所以它说的是我想要的

00:23:12.150 --> 00:23:18.270
您连接到本地主机

00:23:15.660 --> 00:23:20.850
应用程序在哪里运行

00:23:18.270 --> 00:23:24.600
端口在命令行上配置

00:23:20.850 --> 00:23:26.070
我要说的是，这是代码

00:23:24.600 --> 00:23:29.520
实际在远程服务器上运行

00:23:26.070 --> 00:23:33.390
源在我的工作区中，我

00:23:29.520 --> 00:23:35.880
必须提供的项目名称

00:23:33.390 --> 00:23:40.470
我的工作区中的代码

00:23:35.880 --> 00:23:41.820
所以如果我运行它，我没有定义任何

00:23:40.470 --> 00:23:45.390
工作场所，所以你可以看到

00:23:41.820 --> 00:23:49.110
应用程序完成，所以我将启动它

00:23:45.390 --> 00:23:51.750
再次，在我的项目中，现在

00:23:49.110 --> 00:23:53.760
远程应用程序的代码是

00:23:51.750 --> 00:23:57.050
定位，我可以在其中添加一些断点

00:23:53.760 --> 00:24:03.240
在那里，如果我再次启动此遥控器

00:23:57.050 --> 00:24:06.870
调试模式，如您所见

00:24:03.240 --> 00:24:08.790
工作的原因是没有范围

00:24:06.870 --> 00:24:10.920
触发点，我仍然触发

00:24:08.790 --> 00:24:12.450
点和新的运行配置

00:24:10.920 --> 00:24:16.740
没有触发这个触发点，所以我

00:24:12.450 --> 00:24:20.820
必须先删除它，然后重新开始

00:24:16.740 --> 00:24:22.730
该应用程序再次启动并删除

00:24:20.820 --> 00:24:27.360
 Web配置，现在我停止了

00:24:22.730 --> 00:24:31.350
进入我的筛查数据代码

00:24:27.360 --> 00:24:33.090
这确实是

00:24:31.350 --> 00:24:39.180
我正在做的应用程序

00:24:33.090 --> 00:24:43.410
源代码，所以不是你，它是一个很老的

00:24:39.180 --> 00:24:48.240
功能，但实际上确实如此断点

00:24:43.410 --> 00:24:53.550
氧气中的JIT又有新内容

00:24:48.240 --> 00:24:57.900
您知道排序的默认顺序

00:24:53.550 --> 00:25:00.600
这个断点是按字母顺序

00:24:57.900 --> 00:25:03.270
只有当你知道在哪个班级

00:25:00.600 --> 00:25:07.080
您定义断点，但通常

00:25:03.270 --> 00:25:09.390
你必须考虑好吧，我想要

00:25:07.080 --> 00:25:11.250
通过执行流程进行的工作是

00:25:09.390 --> 00:25:13.710
不按字母顺序排列

00:25:11.250 --> 00:25:17.610
通常你必须找到休息时间

00:25:13.710 --> 00:25:19.590
关于流程执行的要点

00:25:17.610 --> 00:25:22.500
代码流，现在您可以

00:25:19.590 --> 00:25:24.810
实际将中断点排序为

00:25:22.500 --> 00:25:26.460
创建时间意味着您将发现

00:25:24.810 --> 00:25:28.230
在顶部

00:25:26.460 --> 00:25:30.570
您最近的断点

00:25:28.230 --> 00:25:33.660
定义而不必全看

00:25:30.570 --> 00:25:36.720
此代码在所有列表中查找

00:25:33.660 --> 00:25:39.330
您想要的真正合适的断点

00:25:36.720 --> 00:25:41.970
非常非常停用或重新激活

00:25:39.330 --> 00:25:45.150
再次方便，这个很少寻求的选择，所以

00:25:41.970 --> 00:25:50.340
默认情况下，它仍然按名称命名

00:25:45.150 --> 00:25:54.630
您无法在创作时间停下来

00:25:50.340 --> 00:25:57.750
再次给氧气添加新的东西

00:25:54.630 --> 00:26:02.060
谁知道我们的长兵还可以

00:25:57.750 --> 00:26:06.120
我们确定用户故事是

00:26:02.060 --> 00:26:07.830
你想调试一些客户端，你

00:26:06.120 --> 00:26:10.620
需要先启动服务器才能

00:26:07.830 --> 00:26:13.440
调试客户端以及您以前的操作

00:26:10.620 --> 00:26:16.800
可以的，我想启动服务器

00:26:13.440 --> 00:26:20.760
你等了一段时间，所以服务器

00:26:16.800 --> 00:26:22.890
实际上开始就好，所以现在我知道了

00:26:20.760 --> 00:26:26.040
我可以为我的客户辩护

00:26:22.890 --> 00:26:29.280
非常重复，很无聊，所以我

00:26:26.040 --> 00:26:32.490
现在您将使用Eclipse停止这一操作

00:26:29.280 --> 00:26:38.400
 burg，您现在可以创建一些启动

00:26:32.490 --> 00:26:40.500
团体发起的团体只是一群

00:26:38.400 --> 00:26:43.380
您已经拥有的一种配置

00:26:40.500 --> 00:26:46.320
定义所以它指的是发射

00:26:43.380 --> 00:26:49.820
配置客户端和服务器以及

00:26:46.320 --> 00:26:54.260
非常高兴的是您可以添加一些

00:26:49.820 --> 00:26:56.790
发射后的状况

00:26:54.260 --> 00:26:59.010
运行配置，是的，我说

00:26:56.790 --> 00:27:02.010
服务器启动后不做

00:26:59.010 --> 00:27:05.430
任何等待正则表达式的东西

00:27:02.010 --> 00:27:06.870
要在控制台上输出，所以如果我在这里

00:27:05.430 --> 00:27:10.650
没有看到几个开始

00:27:06.870 --> 00:27:12.450
控制台客户端不会启动，所以我们已经

00:27:10.650 --> 00:27:14.280
你有很多条件可以

00:27:12.450 --> 00:27:17.040
等待延迟或等到

00:27:14.280 --> 00:27:19.080
实际上终止了，但是这个常规

00:27:17.040 --> 00:27:23.760
表情的东西准备好了，现在，如果我

00:27:19.080 --> 00:27:25.170
调试这个很好的东西，你可以看到

00:27:23.760 --> 00:27:29.460
客户实际上没有开始

00:27:25.170 --> 00:27:35.570
在服务器端之前

00:27:29.460 --> 00:27:35.570
开始真的很穷

00:27:36.620 --> 00:27:42.480
接下来是死锁检测，谁知道

00:27:39.060 --> 00:27:47.400
 jgt可以帮助您检测死锁

00:27:42.480 --> 00:27:51.600
在您的代码中还可以，有新内容

00:27:47.400 --> 00:27:56.490
因为你不是那么僵局

00:27:51.600 --> 00:27:59.760
创建了一个非常简单的死锁代码

00:27:56.490 --> 00:28:03.960
例如，是的，我必须能够运行

00:27:59.760 --> 00:28:06.720
线程锁定块a和

00:28:03.960 --> 00:28:09.870
第二个是锁定日志B，我们

00:28:06.720 --> 00:28:12.830
尝试以其他顺序查看

00:28:09.870 --> 00:28:16.260
线程，因此很明显它将创建一个

00:28:12.830 --> 00:28:22.410
僵局，所以如果我从右开始

00:28:16.260 --> 00:28:23.970
调试模式或在安装程序模式下

00:28:22.410 --> 00:28:28.230
会看到一无所有

00:28:23.970 --> 00:28:29.550
发生了，但应该很快完成

00:28:28.230 --> 00:28:31.950
因为我们才刚刚开始传播

00:28:29.550 --> 00:28:33.510
而且不做任何等待，所以

00:28:31.950 --> 00:28:39.210
潜在的僵局，所以现在我将

00:28:33.510 --> 00:28:41.210
调试，我有相同的情况

00:28:39.210 --> 00:28:45.240
我在跑步时看到人质的地方

00:28:41.210 --> 00:28:48.060
和我的主要流程，所以让我们摆姿势

00:28:45.240 --> 00:28:49.770
虚拟机，如果我发布此

00:28:48.060 --> 00:28:52.860
在机器之前，您会看到那些

00:28:49.770 --> 00:28:54.250
实际处于红色和暂停状态的两个线程

00:28:52.860 --> 00:28:58.629
你可以

00:28:54.250 --> 00:29:00.879
看看他们正在使用哪些锁， 

00:28:58.629 --> 00:29:03.039
他们正在等待哪些锁，所以您

00:29:00.879 --> 00:29:06.759
可以看到这个红色a拥有

00:29:03.039 --> 00:29:10.450
对象26而这个红色B实际上是

00:29:06.759 --> 00:29:13.600
等待这个对象26和这个

00:29:10.450 --> 00:29:17.289
绕过对象25，所以这是

00:29:13.600 --> 00:29:21.490
通常情况下是死锁，所以您

00:29:17.289 --> 00:29:24.940
那些之间会得到一棵无限的树

00:29:21.490 --> 00:29:29.259
两个锁，所以a和E一件事是

00:29:24.940 --> 00:29:31.389
并非所有的JVM都支持这种

00:29:29.259 --> 00:29:33.700
死锁检测，因为GT只是

00:29:31.389 --> 00:29:37.389
提供一些拍摄和一些用户界面

00:29:33.700 --> 00:29:39.669
以及JVM提供的功能，如果您愿意

00:29:37.389 --> 00:29:41.860
查看或JVM是否支持此功能

00:29:39.669 --> 00:29:44.860
您可以右键单击

00:29:41.860 --> 00:29:47.259
调试视图中查看进程并查看

00:29:44.860 --> 00:29:49.350
您所拥有的虚拟机功能

00:29:47.259 --> 00:29:53.350
当前正在运行，所以这里是一个oracle 

00:29:49.350 --> 00:29:54.970
 Java代码的构建，你可以有一个

00:29:53.350 --> 00:29:56.470
看一下它的所有功能

00:29:54.970 --> 00:30:00.789
支持，例如单词代码

00:29:56.470 --> 00:30:03.159
支持替换，一般

00:30:00.789 --> 00:30:07.649
您将看到您是否支持的项目

00:30:03.159 --> 00:30:14.350
检测与否，如果您不使用

00:30:07.649 --> 00:30:17.019
来吧来吧，然后这个观点

00:30:14.350 --> 00:30:21.909
将帮助您找到为什么看不到的原因

00:30:17.019 --> 00:30:25.120
陷入僵局，接下来是检查和

00:30:21.909 --> 00:30:27.159
看着表情，但我快用完了

00:30:25.120 --> 00:30:29.590
我想快速去的时间

00:30:27.159 --> 00:30:37.090
更有趣的是

00:30:29.590 --> 00:30:39.639
 jgt的逻辑结构，所以说

00:30:37.090 --> 00:30:42.429
我们有一个界面和用户

00:30:39.639 --> 00:30:44.409
实施优化的用户

00:30:42.429 --> 00:30:47.169
使用位集来存储布尔值

00:30:44.409 --> 00:30:50.379
属性和哈希用户将使用

00:30:47.169 --> 00:30:53.379
散列图以存储

00:30:50.379 --> 00:30:56.980
通过以下方式质疑对象的属性

00:30:53.379 --> 00:30:59.980
本身，如果我加深这很好，那么我

00:30:56.980 --> 00:31:01.510
有很多用户在使用哈希

00:30:59.980 --> 00:31:04.450
基于地图和其他

00:31:01.510 --> 00:31:06.750
当我说这个的时候说最好

00:31:04.450 --> 00:31:06.750
冷

00:31:08.070 --> 00:31:16.840
看一下这个变量

00:31:13.870 --> 00:31:18.790
易于理解-可视化

00:31:16.840 --> 00:31:20.620
属性值，因为我可能

00:31:18.790 --> 00:31:22.690
对内部不感兴趣

00:31:20.620 --> 00:31:24.940
对象的结构，但仅限于

00:31:22.690 --> 00:31:26.650
名称和事实，即雇员或

00:31:24.940 --> 00:31:30.490
不属于

00:31:26.650 --> 00:31:32.200
对象的，如果我有两个

00:31:30.490 --> 00:31:34.240
即使在不同的实现

00:31:32.200 --> 00:31:38.320
渠道不一样，所以我用我

00:31:34.240 --> 00:31:40.060
使用哈希图，然后我们使用

00:31:38.320 --> 00:31:42.520
考虑布尔值的布尔属性

00:31:40.060 --> 00:31:45.480
她有点固定，在里面找到了东西

00:31:42.520 --> 00:31:48.190
有点设置不友好，所以我们

00:31:45.480 --> 00:31:50.650
 JDT的真正目的是展示

00:31:48.190 --> 00:31:52.870
对象的逻辑结构

00:31:50.650 --> 00:31:56.020
逻辑结构将让您定义

00:31:52.870 --> 00:32:00.070
什么是要显示的元素

00:31:56.020 --> 00:32:03.640
某些情况下的可变视图，是的

00:32:00.070 --> 00:32:07.060
我为用户定义和逻辑结构

00:32:03.640 --> 00:32:11.580
所以在接口类型上

00:32:07.060 --> 00:32:14.350
看看是不是哈希用户还是

00:32:11.580 --> 00:32:16.900
您将永远看到的优化用户

00:32:14.350 --> 00:32:21.040
真实属性下的字段

00:32:16.900 --> 00:32:22.960
变量视图中的对象，因此

00:32:21.040 --> 00:32:25.900
默认情况下，未激活该选项

00:32:22.960 --> 00:32:29.040
氧气曾经不被

00:32:25.900 --> 00:32:31.120
默认，您可以定义自己的

00:32:29.040 --> 00:32:34.930
逻辑结构从

00:32:31.120 --> 00:32:38.470
首选项，如果您搜索逻辑

00:32:34.930 --> 00:32:40.420
结构，您可以直接从

00:32:38.470 --> 00:32:43.780
在这里，这很简单

00:32:40.420 --> 00:32:46.680
定义类型的限定名称

00:32:43.780 --> 00:32:49.889
您要在上面定义的

00:32:46.680 --> 00:32:52.269
逻辑结构，然后每个

00:32:49.889 --> 00:32:54.519
您想在您下方显示的值

00:32:52.269 --> 00:32:59.440
定义属性的名称，然后

00:32:54.519 --> 00:33:01.119
将要执行的代码

00:32:59.440 --> 00:33:03.399
很容易，你可以做对

00:33:01.119 --> 00:33:04.719
从你的工作空间，但也许你

00:33:03.399 --> 00:33:06.309
想要为您的墙队做到这一点

00:33:04.719 --> 00:33:08.830
你不是在发展自己，而你

00:33:06.309 --> 00:33:12.309
想要分享这种公告

00:33:08.830 --> 00:33:15.009
而你能做的就是定义

00:33:12.309 --> 00:33:18.700
负面插件将提供此功能

00:33:15.009 --> 00:33:21.820
定制向其他逻辑转换

00:33:18.700 --> 00:33:24.190
用户，因此有一个扩展名

00:33:21.820 --> 00:33:27.159
在jgt中指向确切定义什么

00:33:24.190 --> 00:33:32.769
我们已经在偏好页面中完成了，所以我

00:33:27.159 --> 00:33:38.739
我正在定义一个的逻辑结构

00:33:32.769 --> 00:33:40.629
给定类型给定类型，我是

00:33:38.739 --> 00:33:42.249
给出我想要的属性的名称

00:33:40.629 --> 00:33:46.659
在树上显示代码

00:33:42.249 --> 00:34:00.129
将被执行，所以如果我访问了

00:33:46.659 --> 00:34:03.609
现在您将看到您将能够

00:34:00.129 --> 00:34:05.529
以完全相同的方式调试代码

00:34:03.609 --> 00:34:09.789
具有相同的逻辑结构显示

00:34:05.529 --> 00:34:14.379
在完全捆绑的Eclipse中，而无需

00:34:09.789 --> 00:34:19.119
去首选项并重做

00:34:14.379 --> 00:34:21.069
一次又一次，所以如果我现在去

00:34:19.119 --> 00:34:24.579
偏好与哈嘉Cal结构I 

00:34:21.069 --> 00:34:29.260
会看到定义了相同的内容

00:34:24.579 --> 00:34:30.819
但是如果我看那里的细节

00:34:29.260 --> 00:34:32.919
由扩展贡献

00:34:30.819 --> 00:34:34.299
点，我实际上无法编辑或

00:34:32.919 --> 00:34:36.460
删除它，因为它已经在

00:34:34.299 --> 00:34:41.799
我已经部署在内部的插件

00:34:36.460 --> 00:34:44.760
我的Eclipse，我们有任何问题，可能

00:34:41.799 --> 00:34:44.760
有时间提出一个问题

00:34:46.970 --> 00:34:52.950
好吧，那你应该记住什么

00:34:49.169 --> 00:34:58.440
这些提示和技巧今天列出

00:34:52.950 --> 00:35:03.570
所以JDT真的很棒-它提供了一个

00:34:58.440 --> 00:35:06.810
很多有用的菜单和项目，以帮助

00:35:03.570 --> 00:35:09.210
您可以更轻松地调试，并且变得更好

00:35:06.810 --> 00:35:10.980
积极主动，以便发现所有这一切

00:35:09.210 --> 00:35:14.130
可以鼓励您浏览

00:35:10.980 --> 00:35:15.960
调试议程的首选项

00:35:14.130 --> 00:35:17.970
在菜单上旅行，当然

00:35:15.960 --> 00:35:20.430
阅读黑暗，因为几乎所有东西

00:35:17.970 --> 00:35:22.710
我今天告诉你，它已经在

00:35:20.430 --> 00:35:24.020
 Eclipse的帮助菜单，因此您可以

00:35:22.710 --> 00:35:26.040
自己发现了

00:35:24.020 --> 00:35:27.100
非常感谢你，如果你还有更多

00:35:26.040 --> 00:35:30.310
问题也许其他

00:35:27.100 --> 00:35:30.310
 [掌声] 

