WEBVTT
Kind: captions
Language: zh-Hans

00:00:00.120 --> 00:00:06.359
如果每个人都可以请你

00:00:01.650 --> 00:00:08.400
坐在那边总是令人生畏

00:00:06.359 --> 00:00:12.269
进行演讲，并拥有巨大的空间

00:00:08.400 --> 00:00:16.320
受众相对较小，但所有人

00:00:12.269 --> 00:00:20.970
对，所以我上一次演讲

00:00:16.320 --> 00:00:24.900
在短片上就和Java 7一样

00:00:20.970 --> 00:00:29.279
推出了，我讲了55个新事物

00:00:24.900 --> 00:00:32.460
在Java 7中，我在55分钟内完成了

00:00:29.279 --> 00:00:34.649
所以我想我没意识到但是你

00:00:32.460 --> 00:00:36.989
不再有55分钟了

00:00:34.649 --> 00:00:42.200
说话时间里放气

00:00:36.989 --> 00:00:45.480
所以我们现在有35分钟34 

00:00:42.200 --> 00:00:47.399
是的，所以我提交了摘要，而你

00:00:45.480 --> 00:00:51.239
知道我提交的完整披露

00:00:47.399 --> 00:00:53.670
我们之前的这次演讲的摘要

00:00:51.239 --> 00:00:56.520
发布了一些关于发布的公告

00:00:53.670 --> 00:00:59.280
节奏和Oracle构建开放式JDK 

00:00:56.520 --> 00:01:03.090
二进制文件，还有其他一些

00:00:59.280 --> 00:01:04.860
事情发生在夏天

00:01:03.090 --> 00:01:08.010
打算大谈这一点

00:01:04.860 --> 00:01:10.020
一种东西，幸运的是，一切

00:01:08.010 --> 00:01:11.820
发生了，抽象仍然是

00:01:10.020 --> 00:01:15.630
持有，但摘要有点

00:01:11.820 --> 00:01:17.610
含糊不清，但我确定可以

00:01:15.630 --> 00:01:19.020
如果有东西可以覆盖这个

00:01:17.610 --> 00:01:23.490
我在摘要中提到的

00:01:19.020 --> 00:01:26.130
在你之前没有用力击打头部

00:01:23.490 --> 00:01:27.780
刚来之后，我很高兴说话

00:01:26.130 --> 00:01:29.820
离线也可以

00:01:27.780 --> 00:01:31.950
有问题请提出

00:01:29.820 --> 00:01:34.409
前线，因为我很努力

00:01:31.950 --> 00:01:36.479
没事

00:01:34.409 --> 00:01:39.140
这是我们的安全港声明（如果有） 

00:01:36.479 --> 00:01:41.640
你们当中有Oracle客户，我知道

00:01:39.140 --> 00:01:43.860
当我们发表安全港声明时，我

00:01:41.640 --> 00:01:46.770
总是喜欢指出Oracle的

00:01:43.860 --> 00:01:50.960
安全港声明比

00:01:46.770 --> 00:01:50.960
 IBM的安全港声明

00:01:51.610 --> 00:01:59.630
好的，所以我要做的第一件事是

00:01:56.300 --> 00:02:01.820
我总是很惊讶有多少人

00:01:59.630 --> 00:02:03.350
谁特别在应用中

00:02:01.820 --> 00:02:05.450
开发方面我很了解

00:02:03.350 --> 00:02:08.240
的人，您更在工具方面

00:02:05.450 --> 00:02:10.220
平台开发人员，但我总是

00:02:08.240 --> 00:02:15.500
感到惊讶的是，人们多么容易困惑

00:02:10.220 --> 00:02:18.590
可以克服JVM JRE和JDK，什么是

00:02:15.500 --> 00:02:20.990
每当我们说Java SE时，我们该怎么做？ 

00:02:18.590 --> 00:02:23.030
甚至意味着当我们谈论Java SE时

00:02:20.990 --> 00:02:25.670
我们正在谈论整个技术

00:02:23.030 --> 00:02:28.120
通过JCP涵盖了

00:02:25.670 --> 00:02:30.860
规范好了，所以我们在说

00:02:28.120 --> 00:02:33.890
当我们说Java C时，我们的意思是一切

00:02:30.860 --> 00:02:35.570
但是Java SE由几个关键组成

00:02:33.890 --> 00:02:38.959
元素，所以我们喜欢的第一件事

00:02:35.570 --> 00:02:42.800
谈论的是JVM，所以您可能

00:02:38.959 --> 00:02:45.620
知道JVM是您可能知道的热点

00:02:42.800 --> 00:02:49.370
如果JVM是来自B的je火箭

00:02:45.620 --> 00:02:52.490
 EA，但随后已被合并为

00:02:49.370 --> 00:02:57.680
您可能知道JVM是否打开的热点

00:02:52.490 --> 00:03:01.040
来自IBM的j9或j9，但基本上是JVM 

00:02:57.680 --> 00:03:02.630
是在上运行的过程

00:03:01.040 --> 00:03:05.630
硬件对，所以通常有一个

00:03:02.630 --> 00:03:08.480
特定芯片组的特定JVM或

00:03:05.630 --> 00:03:11.840
操作系统或其组合

00:03:08.480 --> 00:03:15.380
因此，这就是连接

00:03:11.840 --> 00:03:18.440
字节码到裸机上

00:03:15.380 --> 00:03:22.190
最重要的是，我们有一个JRE和JRE 

00:03:18.440 --> 00:03:24.380
当然有一个JVM，但它也来了

00:03:22.190 --> 00:03:27.739
与标准库，所以库

00:03:24.380 --> 00:03:32.350
用于完成所有输入/输出或

00:03:27.739 --> 00:03:37.790
图形化的东西，或者你知道网络

00:03:32.350 --> 00:03:40.430
收藏品等，许多供应商会

00:03:37.790 --> 00:03:42.920
在他们的JRE中也包含一些

00:03:40.430 --> 00:03:45.310
其他功能，例如浏览器

00:03:42.920 --> 00:03:49.610
可以启动应用程序的插件

00:03:45.310 --> 00:03:53.470
通过applet或网络启动，或者您

00:03:49.610 --> 00:03:56.209
知道其他一些零碎的东西

00:03:53.470 --> 00:03:58.760
然后我们有JDK和JDK 

00:03:56.209 --> 00:04:01.970
带有JVM附带的JRE 

00:03:58.760 --> 00:04:03.690
它包括开发人员工具

00:04:01.970 --> 00:04:07.230
最明显的是编译器

00:04:03.690 --> 00:04:09.420
 Java编译器也有很多

00:04:07.230 --> 00:04:13.490
那里的其他工具，例如Java doc或

00:04:09.420 --> 00:04:15.330
 J shell或您知道其他内容

00:04:13.490 --> 00:04:19.290
那只是

00:04:15.330 --> 00:04:23.630
消除不同位的歧义

00:04:19.290 --> 00:04:28.140
在那里，现在让我们谈谈开放的JDK 

00:04:23.630 --> 00:04:30.330
所以对于你们中那些可能没有的人

00:04:28.140 --> 00:04:32.040
参与其中，你知道就像有一个

00:04:30.330 --> 00:04:34.620
这群人显然是

00:04:32.040 --> 00:04:35.670
您知道每天都打开JDK，但是对于

00:04:34.620 --> 00:04:40.440
你们那些可能不参与的人

00:04:35.670 --> 00:04:44.660
自2006年以来，这就是我们在

00:04:40.440 --> 00:04:48.500
 Java C的开源实现和

00:04:44.660 --> 00:04:51.960
最长的时间直到最近

00:04:48.500 --> 00:04:54.690
从甲骨文的角度来看

00:04:51.960 --> 00:04:58.440
我们一直以为的观点

00:04:54.690 --> 00:05:01.890
 JDK开放作为一个地方不对

00:04:58.440 --> 00:05:04.620
所以这是我们合作的地方

00:05:01.890 --> 00:05:08.460
在源代码上构建开源

00:05:04.620 --> 00:05:10.290
但是，Java SE的实现

00:05:08.460 --> 00:05:13.440
最近，我会稍作讨论

00:05:10.290 --> 00:05:15.840
我们确实将它更多地视为一件事情

00:05:13.440 --> 00:05:20.280
现在我们将开始生产开放

00:05:15.840 --> 00:05:22.860
 JDK二进制文件和Oracle中的构建

00:05:20.280 --> 00:05:25.350
除了很多长

00:05:22.860 --> 00:05:28.020
存在并开始思考

00:05:25.350 --> 00:05:33.960
将开放JDK在生态系统中定位为

00:05:28.020 --> 00:05:38.490
一件事不是一个地方，所以只是一个快速

00:05:33.960 --> 00:05:41.730
关于开放JDK的历史

00:05:38.490 --> 00:05:43.890
很长一段时间，所以我知道又一次

00:05:41.730 --> 00:05:46.560
特别是对于应用程序开发人员

00:05:43.890 --> 00:05:48.120
他们真的不考虑开放JDK 

00:05:46.560 --> 00:05:50.190
那是因为他们只想得到

00:05:48.120 --> 00:05:51.660
下载的Oracle JDK使用它构建

00:05:50.190 --> 00:05:53.640
他们的应用程序而忘记了所有这些

00:05:51.660 --> 00:05:55.410
其他的东西就是那个

00:05:53.640 --> 00:06:01.430
其他供应商所做的就是您所知道的

00:05:55.410 --> 00:06:01.430
 Oracle和Red Hat以及IBM和其他公司

00:06:01.880 --> 00:06:07.230
但是是的，但是再次

00:06:05.669 --> 00:06:09.570
已经有很长一段时间了

00:06:07.230 --> 00:06:12.720
自2006年以来，所以这意味着

00:06:09.570 --> 00:06:15.849
由Sun Microsystems Red Hat推出

00:06:12.720 --> 00:06:19.270
一开始就在那里Red 

00:06:15.849 --> 00:06:23.139
一直并将继续是一个

00:06:19.270 --> 00:06:25.300
杰出的贡献者和参与者

00:06:23.139 --> 00:06:28.270
在OpenJDK中，它们显示了很多

00:06:25.300 --> 00:06:32.740
他们在那里的领导

00:06:28.270 --> 00:06:34.719
做的OpenJDK的构建，他们继续

00:06:32.740 --> 00:06:37.330
生产高品质的建筑

00:06:34.719 --> 00:06:39.099
通过rel和

00:06:37.330 --> 00:06:42.099
通过其他分配

00:06:39.099 --> 00:06:45.429
机制直到最近

00:06:42.099 --> 00:06:51.189
重新分发了Red Hat的版本

00:06:45.429 --> 00:06:53.050
打开JDK是的，所以再次这样

00:06:51.189 --> 00:06:56.319
自2006年以来一直在进行

00:06:53.050 --> 00:06:58.869
显然是Oracle Sun，现在是Oracle 

00:06:56.319 --> 00:07:00.849
我们正在生产Oracle JDK或

00:06:58.869 --> 00:07:02.649
 Sun JDK是他们的第一个

00:07:00.849 --> 00:07:05.439
最重要的是，但在某些情况下

00:07:02.649 --> 00:07:08.499
您有想要的客户或用户

00:07:05.439 --> 00:07:12.339
要使用GPL，我们将使用开放式JDK 

00:07:08.499 --> 00:07:15.580
来自Red Hat，所以是的

00:07:12.339 --> 00:07:20.019
在2006年推出2007年，然后您知道

00:07:15.580 --> 00:07:21.759
坦率地说，从2007年到2009年

00:07:20.019 --> 00:07:24.459
你是太阳，有点挣扎

00:07:21.759 --> 00:07:28.180
所以打开JDK只是有点像

00:07:24.459 --> 00:07:31.079
有点，但收购后

00:07:28.180 --> 00:07:35.079
 Oracle的Sun，我们的投资翻了一番

00:07:31.079 --> 00:07:37.899
积极地使用开放式JDK，所以我们去了

00:07:35.079 --> 00:07:39.999
苹果，如果您还记得那时

00:07:37.899 --> 00:07:42.789
历史上有各自独立的Java 

00:07:39.999 --> 00:07:44.709
实施我们去了苹果说

00:07:42.789 --> 00:07:49.949
嘿，你为什么不把这一切都贡献给

00:07:44.709 --> 00:07:53.349
打开JDK使您的Mac OS端口

00:07:49.949 --> 00:07:56.259
开源，我们将为您提供帮助

00:07:53.349 --> 00:07:58.749
去了IBM，说嘿为什么不

00:07:56.259 --> 00:08:00.189
您在开放式JDK上与我们合作，为什么

00:07:58.749 --> 00:08:02.199
你不看一些东西吗

00:08:00.189 --> 00:08:05.259
你有什么，你知道会是什么

00:08:02.199 --> 00:08:07.689
开源那里你有一堆

00:08:05.259 --> 00:08:09.899
您拥有自己的VM技术的端口

00:08:07.689 --> 00:08:12.550
在过去的一年左右的时间里，我们已经看到

00:08:09.899 --> 00:08:17.469
 IBM在Eclipse中开源其中的一些

00:08:12.550 --> 00:08:19.869
所以这都是好消息，然后

00:08:17.469 --> 00:08:22.499
当然，我们已经完成了许多工作

00:08:19.869 --> 00:08:26.259
对不起，成千上万

00:08:22.499 --> 00:08:27.760
公司和个人贡献者

00:08:26.259 --> 00:08:30.100
具有

00:08:27.760 --> 00:08:35.349
参加并且正在参加

00:08:30.100 --> 00:08:39.180
 openjdk的最新趋势当然是我们

00:08:35.349 --> 00:08:41.680
几乎每个云供应商都有

00:08:39.180 --> 00:08:44.850
以一种或另一种方式参与

00:08:41.680 --> 00:08:47.770
就在几个月前，亚马逊签约了

00:08:44.850 --> 00:08:50.860
他们有一支开放的团队

00:08:47.770 --> 00:08:53.650
他们已经贡献的JDK构建

00:08:50.860 --> 00:08:58.210
 Mac OS周围的一些高质量补丁

00:08:53.650 --> 00:09:00.100
他们自己拥有的东西

00:08:58.210 --> 00:09:03.640
自己内部的内部修复

00:09:00.100 --> 00:09:06.700
用途并包含了这一点，因此非常

00:09:03.640 --> 00:09:10.060
有前途，你知道我说的那样

00:09:06.700 --> 00:09:13.770
已经过去了11年

00:09:10.060 --> 00:09:17.590
只不过加速就好了

00:09:13.770 --> 00:09:20.500
所以只是看开放

00:09:17.590 --> 00:09:26.890
 JDK循环的良性循环

00:09:20.500 --> 00:09:31.600
是什么让这个工作是这个哦

00:09:26.890 --> 00:09:33.250
无论如何会自动设置动画

00:09:31.600 --> 00:09:35.200
是的，所以我们从开放开始

00:09:33.250 --> 00:09:36.940
在JDK项目中，我们曾经想过

00:09:35.200 --> 00:09:39.430
这更多是一个地方

00:09:36.940 --> 00:09:41.770
我们有源代码存储库和

00:09:39.430 --> 00:09:44.440
治理委员会，你知道我们有

00:09:41.770 --> 00:09:48.280
定义的各种角色等等

00:09:44.440 --> 00:09:51.220
等等，最终这些

00:09:48.280 --> 00:09:54.610
项目将致力于创建

00:09:51.220 --> 00:09:57.580
参考实现，因此JDK 7 JDK 8 

00:09:54.610 --> 00:10:01.750
 JDK九参考实现

00:09:57.580 --> 00:10:04.600
全部来自于开放的JDK构建

00:10:01.750 --> 00:10:09.250
与您共同合作

00:10:04.600 --> 00:10:11.320
 Oracle Red Hat和其他人，所以我们这样做

00:10:09.250 --> 00:10:13.180
那不过是一回事

00:10:11.320 --> 00:10:16.210
正确的参考实现是

00:10:13.180 --> 00:10:17.950
只是片刻而已

00:10:16.210 --> 00:10:21.010
代码被很多人消耗

00:10:17.950 --> 00:10:22.750
组织的权利，你可能知道

00:10:21.010 --> 00:10:24.940
特别是如果您是应用程序

00:10:22.750 --> 00:10:27.970
您可能认识的Oracle JDK开发人员

00:10:24.940 --> 00:10:31.839
基于开放的JDK源代码

00:10:27.970 --> 00:10:33.790
您可能知道IBM Java SDK 

00:10:31.839 --> 00:10:35.860
了解Red Hat的版本，您可能知道

00:10:33.790 --> 00:10:37.760
您可能知道苏扎（Souza）的Xul建筑

00:10:35.860 --> 00:10:40.340
和Canonical的

00:10:37.760 --> 00:10:42.110
神经建立，正确，所以我们拥有了所有

00:10:40.340 --> 00:10:45.020
这些不同的基金会和团体

00:10:42.110 --> 00:10:46.910
和从事这些建设的公司

00:10:45.020 --> 00:10:48.920
但是你可能没有意识到的是

00:10:46.910 --> 00:10:51.320
有很多公司有

00:10:48.920 --> 00:10:56.450
取得了OpenJDK源代码并

00:10:51.320 --> 00:11:00.020
创建了自己的利基港口或

00:10:56.450 --> 00:11:03.470
内部使用openjdk的前叉

00:11:00.020 --> 00:11:06.110
例如Twitter，他们已经打开了JDK 

00:11:03.470 --> 00:11:08.120
但是您将作为Java应用程序

00:11:06.110 --> 00:11:10.760
开发人员，您可能永远不会意识到

00:11:08.120 --> 00:11:13.700
他们这样做是因为你知道

00:11:10.760 --> 00:11:15.950
他们正在处理TB级的堆

00:11:13.700 --> 00:11:20.180
对，所以他们有非常特别的

00:11:15.950 --> 00:11:21.410
他们是定制的利基利基代码

00:11:20.180 --> 00:11:23.210
内部使用，有很多

00:11:21.410 --> 00:11:28.040
 JavaOne这样做的公司

00:11:23.210 --> 00:11:29.840
今年我们有阿里巴巴来

00:11:28.040 --> 00:11:32.300
并谈到了一些

00:11:29.840 --> 00:11:37.460
他们正在做的事情与此类似

00:11:32.300 --> 00:11:40.250
所以基本上，你知道所有

00:11:37.460 --> 00:11:43.880
这些组织和参与者结束了

00:11:40.250 --> 00:11:46.880
回馈以打开JDK，我们结束了

00:11:43.880 --> 00:11:49.100
在这个良性循环中，有12个

00:11:46.880 --> 00:11:54.040
百万开发人员使用Java， 

00:11:49.100 --> 00:11:54.040
创建一个强大而稳定的生态系统

00:11:54.580 --> 00:12:00.860
好的，所以基本上可以打开当前的JDK 

00:11:58.400 --> 00:12:02.840
状态在那里你知道一个清楚的

00:12:00.860 --> 00:12:05.840
 Oracle对Sun的承诺

00:12:02.840 --> 00:12:10.610
收购，我们已经实现了这一目标

00:12:05.840 --> 00:12:11.750
在过去的十年中， 

00:12:10.610 --> 00:12:15.680
我猜是七年了

00:12:11.750 --> 00:12:18.440
收购，而就在今年夏天，我们

00:12:15.680 --> 00:12:20.150
在Java中宣布我们有一个

00:12:18.440 --> 00:12:23.150
主题演讲非常专注于此

00:12:20.150 --> 00:12:26.330
你知道我们已经有很长时间了

00:12:23.150 --> 00:12:29.630
 Oracle JDK然后是其他供应商

00:12:26.330 --> 00:12:32.600
建立了开放的JDK二进制文件，并且

00:12:29.630 --> 00:12:34.430
 Oracle JDK总是有一些额外的功能

00:12:32.600 --> 00:12:36.470
在其中具有商业意义

00:12:34.430 --> 00:12:40.280
对，所以我们有飞行记录仪任务

00:12:36.470 --> 00:12:42.140
我们一直在努力的控制

00:12:40.280 --> 00:12:45.110
确定性垃圾回收

00:12:42.140 --> 00:12:46.580
我们提前拥有的技术

00:12:45.110 --> 00:12:48.290
我们一直在编辑的东西

00:12:46.580 --> 00:12:49.540
与AI合作进行商业化

00:12:48.290 --> 00:12:51.639
那

00:12:49.540 --> 00:12:53.619
但基本上是整个夏天

00:12:51.639 --> 00:12:55.860
看生态系统，看

00:12:53.619 --> 00:12:59.649
现代应用程序开发和

00:12:55.860 --> 00:13:01.540
什么特别期待

00:12:59.649 --> 00:13:03.670
云开发以及哪些开发人员

00:13:01.540 --> 00:13:05.589
希望我们只是看了所有这些并且

00:13:03.670 --> 00:13:07.360
说我们需要简化这项权利，所以

00:13:05.589 --> 00:13:10.149
让我们不要分开

00:13:07.360 --> 00:13:13.869
 Oracle JDK，然后是其他人

00:13:10.149 --> 00:13:15.009
打开JDK二进制缝隙

00:13:13.869 --> 00:13:19.209
采购我们一直以来的所有这些东西

00:13:15.009 --> 00:13:21.670
正在努力，让我们增加

00:13:19.209 --> 00:13:23.410
释放节奏，这样我将经历

00:13:21.670 --> 00:13:25.660
新发布节奏的很多细节

00:13:23.410 --> 00:13:27.939
以及如何形成一种心理

00:13:25.660 --> 00:13:30.100
围绕其工作方式与方式进行建模

00:13:27.939 --> 00:13:32.860
我们过去曾经做过的事情，但是

00:13:30.100 --> 00:13:35.740
基本上你知道我们要三倍

00:13:32.860 --> 00:13:39.519
我在说开放JDK中的猜测

00:13:35.740 --> 00:13:42.490
在这里，我们将开始生产开放

00:13:39.519 --> 00:13:44.559
 JDK构建，它将包括所有

00:13:42.490 --> 00:13:48.509
我们曾经拥有的东西

00:13:44.559 --> 00:13:54.249
过去的独立商业功能

00:13:48.509 --> 00:13:57.670
好吧，我还是在做时间20 

00:13:54.249 --> 00:14:02.259
分钟，对，好的，所以我们

00:13:57.670 --> 00:14:06.970
准时，所以我有两个

00:14:02.259 --> 00:14:09.910
女儿，他们真的很喜欢

00:14:06.970 --> 00:14:13.420
坏话，坏话，所以他们是

00:14:09.910 --> 00:14:16.809
启发我尝试插入一些

00:14:13.420 --> 00:14:23.470
真的很老套

00:14:16.809 --> 00:14:25.389
让我们开始敲敲敲击哦，是的，所以

00:14:23.470 --> 00:14:27.759
只是你知道不要让你们失望

00:14:25.389 --> 00:14:29.470
或其他任何事情，但我也做了同样的演讲

00:14:27.759 --> 00:14:31.179
几周前当我来到Jax London时

00:14:29.470 --> 00:14:34.990
说敲敲打他们说谁在那里

00:14:31.179 --> 00:14:36.759
像是瞬间响亮，所以仍然是2或

00:14:34.990 --> 00:14:39.299
还是太早了，让我们

00:14:36.759 --> 00:14:41.439
再试一次

00:14:39.299 --> 00:14:44.220
那我们去吧，那是更好的

00:14:41.439 --> 00:14:44.220
那里好

00:14:49.360 --> 00:14:55.339
是的，星期一是一个平台，所以

00:14:53.180 --> 00:14:58.130
那是正确的这是正确的

00:14:55.339 --> 00:15:02.440
这是因为如果你看

00:14:58.130 --> 00:15:06.259
 Java SE版本之间的平均时间

00:15:02.440 --> 00:15:10.250
回到1/2时间框架的Java 

00:15:06.259 --> 00:15:14.089
 1/2等于98左右

00:15:10.250 --> 00:15:15.889
重大之间平均30到34个月

00:15:14.089 --> 00:15:18.889
发布您当时知道的内容

00:15:15.889 --> 00:15:21.579
我认为很合理，甚至五个

00:15:18.889 --> 00:15:25.310
多年前，我认为这很合理

00:15:21.579 --> 00:15:27.110
但这不是现代

00:15:25.310 --> 00:15:30.829
应用程序开发已完成

00:15:27.110 --> 00:15:34.060
我们根本不能长时间停顿

00:15:30.829 --> 00:15:37.089
在新功能可用权之间

00:15:34.060 --> 00:15:39.680
我想我要向前走，但是还好

00:15:37.089 --> 00:15:43.839
再开一个玩笑，你会得到什么

00:15:39.680 --> 00:15:43.839
跨开源和一艘明轮船

00:15:44.230 --> 00:15:54.230
好新皮划艇，是的，所以

00:15:50.420 --> 00:15:57.220
这个笑话是为了再次强调

00:15:54.230 --> 00:16:00.649
现代应用程序开发人员期望

00:15:57.220 --> 00:16:02.029
堆栈中的所有内容，或者

00:16:00.649 --> 00:16:06.500
堆栈列出了他们的所有内容

00:16:02.029 --> 00:16:09.139
无库存的堆栈是开源的权利

00:16:06.500 --> 00:16:11.269
以及易于使用和广泛使用

00:16:09.139 --> 00:16:18.050
使用熟悉的开源许可证权利

00:16:11.269 --> 00:16:21.139
好吧，就像Java是徽标一样

00:16:18.050 --> 00:16:24.620
过渡以跟上时代

00:16:21.139 --> 00:16:28.519
在过去的21年中

00:16:24.620 --> 00:16:30.800
信不信由你21年，我们的信徒

00:16:28.519 --> 00:16:35.060
我们对构建的思考方式和

00:16:30.800 --> 00:16:40.610
现在发布，我将要经历一个

00:16:35.060 --> 00:16:44.149
我会在头脑中放一些幻灯片

00:16:40.610 --> 00:16:47.269
只是为了简单起见

00:16:44.149 --> 00:16:49.699
打开JDK和Oracle JDK是一样的

00:16:47.269 --> 00:16:51.589
事情，然后我保证最后

00:16:49.699 --> 00:16:53.959
他们会把它分开，这样你

00:16:51.589 --> 00:16:56.630
可以看出我对Oracle的意思

00:16:53.959 --> 00:16:59.480
 JDK它使您衰减，我知道

00:16:56.630 --> 00:17:00.740
有些人他们只会想到

00:16:59.480 --> 00:17:04.250
他们思考Oracle JDK时

00:17:00.740 --> 00:17:07.069
 SE的代码，我知道有人

00:17:04.250 --> 00:17:09.319
当我以那种方式说话时感到沮丧

00:17:07.069 --> 00:17:11.059
假定只有甲骨文

00:17:09.319 --> 00:17:15.170
 JDK，还有其他所有这些

00:17:11.059 --> 00:17:17.900
真正好的开放JDK构建，所以我只是

00:17:15.170 --> 00:17:21.550
会提前，所以忍受

00:17:17.900 --> 00:17:21.550
和我在一起，我会在最后分开

00:17:21.819 --> 00:17:27.170
好了，Oracle再一次将

00:17:25.160 --> 00:17:30.380
开始生产开放的JDK构建我们的

00:17:27.170 --> 00:17:32.240
目标是开放的JDK二进制文件已成为

00:17:30.380 --> 00:17:36.770
与Oracle完全可互换

00:17:32.240 --> 00:17:39.860
我们在Java平台中的JDK二进制文件

00:17:36.770 --> 00:17:41.750
 Oracle的团队从未真正喜欢过

00:17:39.860 --> 00:17:44.210
它很难

00:17:41.750 --> 00:17:46.340
开发人员之间打开JDK 

00:17:44.210 --> 00:17:47.950
二进制文件和Oracle JDK二进制文件及其

00:17:46.340 --> 00:17:50.540
很难有一些差异

00:17:47.950 --> 00:17:51.890
我们想完全摆脱它， 

00:17:50.540 --> 00:17:53.150
我不只是说广告

00:17:51.890 --> 00:17:55.550
功能，我的意思是一直存在

00:17:53.150 --> 00:17:57.110
小特质，特别是如果你

00:17:55.550 --> 00:17:59.960
有种族条件的幸福型

00:17:57.110 --> 00:18:01.910
应用程序一直是一个挑战

00:17:59.960 --> 00:18:04.460
来回移动，所以我们要

00:18:01.910 --> 00:18:09.890
尝试减少并消除它

00:18:04.460 --> 00:18:11.660
完全没问题，让我们看一下

00:18:09.890 --> 00:18:14.420
发布模型，让我们看一下

00:18:11.660 --> 00:18:15.950
让我们看一下历史

00:18:14.420 --> 00:18:18.710
因此，目标始终是

00:18:15.950 --> 00:18:20.900
每两年一次，就像我们一如既往

00:18:18.710 --> 00:18:22.940
甚至总是回到太阳II 

00:18:20.900 --> 00:18:25.390
试图有一个两年的发布节奏

00:18:22.940 --> 00:18:27.830
是的，通常接近三

00:18:25.390 --> 00:18:29.630
只是为了精神

00:18:27.830 --> 00:18:31.490
继续前进的模型让我们假设我们有

00:18:29.630 --> 00:18:37.700
说我们要继续做旧

00:18:31.490 --> 00:18:40.429
每两年还可以，所以让我们放大

00:18:37.700 --> 00:18:42.800
在那一点上，现在你可以去

00:18:40.429 --> 00:18:45.350
查看Java的发行历史

00:18:42.800 --> 00:18:47.690
通讯，我们实际上只是Google for Java SE 

00:18:45.350 --> 00:18:49.610
发布历史记录，您会找到一个页面

00:18:47.690 --> 00:18:54.679
向您显示每个日期的发布

00:18:49.610 --> 00:18:57.320
每次发布的日期以及什么

00:18:54.679 --> 00:19:00.110
您会注意到它适用于Java 7和Java 8 

00:18:57.320 --> 00:19:02.690
我们实际上有六个月的发布时间

00:19:00.110 --> 00:19:05.540
这些功能更新的节奏

00:19:02.690 --> 00:19:08.750
主要版本，所以当我们发布Java时

00:19:05.540 --> 00:19:11.720
 7个六个月后，我们进行了七个更新

00:19:08.750 --> 00:19:13.100
具有新功能以及何时和

00:19:11.720 --> 00:19:14.169
然后六个月之后

00:19:13.100 --> 00:19:18.730
另一个有

00:19:14.169 --> 00:19:21.909
真正的新功能好吧，所以我们有

00:19:18.730 --> 00:19:24.129
做六个月的历史

00:19:21.909 --> 00:19:26.619
更新了很多很多

00:19:24.129 --> 00:19:28.720
年，所以如果我们期待

00:19:26.619 --> 00:19:30.460
使用旧的语义，我们会说

00:19:28.720 --> 00:19:32.320
好吧，我们有九六个月

00:19:30.460 --> 00:19:34.090
我们将有9个和92和93 

00:19:32.320 --> 00:19:41.529
然后几年，我们将进入

00:19:34.090 --> 00:19:43.419
十等等等等，但是如果

00:19:41.529 --> 00:19:46.330
我们对此有所不同

00:19:43.419 --> 00:19:48.759
好的，我们挣扎的事情之一

00:19:46.330 --> 00:19:51.519
每六个月就有一次

00:19:48.759 --> 00:19:54.190
功能我们有新功能，但我们可以

00:19:51.519 --> 00:19:56.739
从不引入所需的功能

00:19:54.190 --> 00:19:59.529
与JCP合作并更新

00:19:56.739 --> 00:20:01.840
规范，所以我们做了六个月

00:19:59.529 --> 00:20:04.090
功能更新，但我们从未能够

00:20:01.840 --> 00:20:07.690
引入新的语言功能或

00:20:04.090 --> 00:20:10.149
更改属于

00:20:07.690 --> 00:20:12.580
规范，所以我们会得到

00:20:10.149 --> 00:20:14.169
卡在我们可以做的事情中

00:20:12.580 --> 00:20:16.659
每六个月更新一次，如果我们

00:20:14.169 --> 00:20:19.950
炸毁，我们一直在与

00:20:16.659 --> 00:20:23.980
 JCP已经快一年了

00:20:19.950 --> 00:20:26.109
简化您如何知道我们的前进方式

00:20:23.980 --> 00:20:28.509
通过规格流程，我们已经

00:20:26.109 --> 00:20:30.580
说嘿然后这又是

00:20:28.509 --> 00:20:37.239
在JCP讨论了一年的时间

00:20:30.580 --> 00:20:39.879
一个对不起的工作组

00:20:37.239 --> 00:20:43.090
具有openjdk和JCP流程

00:20:39.879 --> 00:20:46.239
很好地合作

00:20:43.090 --> 00:20:49.389
如果我们可以预期会发生什么变化呢？ 

00:20:46.239 --> 00:20:51.940
例如，在9.1中

00:20:49.389 --> 00:20:53.379
可以像什么介绍类型推断

00:20:51.940 --> 00:20:56.049
如果我们可以在其中添加一些类型推断

00:20:53.379 --> 00:20:58.779
或改变一下我们的做法

00:20:56.049 --> 00:21:01.659
进行枚举，以便您可以放置​​类类型

00:20:58.779 --> 00:21:03.940
在那儿或那里你知道

00:21:01.659 --> 00:21:06.429
下划线是保留字，因此

00:21:03.940 --> 00:21:08.350
我们可以将其放入工具中

00:21:06.429 --> 00:21:10.239
就像这些，我们会

00:21:08.350 --> 00:21:13.239
通常本来要等两个

00:21:10.239 --> 00:21:16.389
多年才能做到的，我们现在可以

00:21:13.239 --> 00:21:18.519
做六个月的节奏和那些事情

00:21:16.389 --> 00:21:22.450
我只是说是建议

00:21:18.519 --> 00:21:23.679
那下一个版本好吧，所以我们需要，所以我们

00:21:22.450 --> 00:21:26.379
有新的思考方式

00:21:23.679 --> 00:21:27.399
发布好了，是的，我们一直

00:21:26.379 --> 00:21:29.139
做六个月

00:21:27.399 --> 00:21:30.729
我们一直在做的更新

00:21:29.139 --> 00:21:33.009
六个月的更新，但现在我们要说的是

00:21:30.729 --> 00:21:38.469
让我们能够做到，所以我们

00:21:33.009 --> 00:21:40.359
能够进行六个月的更新，我们可以

00:21:38.469 --> 00:21:46.259
进入规格书多少分钟

00:21:40.359 --> 00:21:50.799
没有15个听起来不正确的

00:21:46.259 --> 00:21:55.419
我什么时候开始真正的我15然后30 

00:21:50.799 --> 00:22:01.960
我有35分钟可以，很好

00:21:55.419 --> 00:22:04.539
是的，所以是这样，因为我们要

00:22:01.960 --> 00:22:06.279
炸毁了我们的思考方式

00:22:04.539 --> 00:22:08.309
这六个月的发行版之一

00:22:06.279 --> 00:22:11.169
我们想要做的事情就是炸毁方式

00:22:08.309 --> 00:22:13.659
就像我们需要改变人们的思想

00:22:11.169 --> 00:22:15.190
围绕这个东西建模，所以其中之一

00:22:13.659 --> 00:22:18.759
改变人们的最大方式

00:22:15.190 --> 00:22:21.789
心理模型是创造一辆巨大的自行车

00:22:18.759 --> 00:22:23.710
摆脱权利，所以我们建议的是

00:22:21.789 --> 00:22:26.799
我们将要更改版本

00:22:23.710 --> 00:22:29.139
将版本编号编号为一年

00:22:26.799 --> 00:22:31.379
世界末日，所以我们要做

00:22:29.139 --> 00:22:36.609
九月的三月发布六个月

00:22:31.379 --> 00:22:41.019
而我们要去而不是去九

00:22:36.609 --> 00:22:43.989
 10 11或9.1 9.2我们将继续

00:22:41.019 --> 00:22:46.450
正确的点月，以便人们可以

00:22:43.989 --> 00:22:48.849
他们的思想将旧方法与

00:22:46.450 --> 00:22:50.830
正确的新方法，这样我们就会有一些人

00:22:48.849 --> 00:22:53.169
就像面对现实一样

00:22:50.830 --> 00:22:56.830
使用大孙子将使用

00:22:53.169 --> 00:22:58.210
 Java 8我对Java 8持肯定态度

00:22:56.830 --> 00:23:00.879
将会存在很长一段时间

00:22:58.210 --> 00:23:05.200
就像Java 6诞生了

00:23:00.879 --> 00:23:07.479
等了很久，但是我想要一个方法

00:23:05.200 --> 00:23:09.279
使人们改变思维方式

00:23:07.479 --> 00:23:11.919
在旧方法与新方法之间建立模型

00:23:09.279 --> 00:23:16.029
做事的方式，这就是为什么我们

00:23:11.919 --> 00:23:18.249
提议今年点月版本控制

00:23:16.029 --> 00:23:20.349
方案，以便我们进入这个

00:23:18.249 --> 00:23:22.450
那种清楚的感觉，好吧，我们

00:23:20.349 --> 00:23:27.690
有六个月的发布，这是新的

00:23:22.450 --> 00:23:30.729
现在做事的方式，如果你是一个

00:23:27.690 --> 00:23:33.429
企业，你就是其中之一

00:23:30.729 --> 00:23:35.889
曾经说过废话的公司

00:23:33.429 --> 00:23:37.690
三年太快了，就像不能

00:23:35.889 --> 00:23:39.619
你们放慢脚步，然后发布

00:23:37.690 --> 00:23:41.149
每五个

00:23:39.619 --> 00:23:43.519
我们信不信由你

00:23:41.149 --> 00:23:45.919
就像我有一半的时间

00:23:43.519 --> 00:23:47.869
关于发布节奏的反馈

00:23:45.919 --> 00:23:50.450
你走得太快了一半

00:23:47.869 --> 00:23:51.830
是你走得太慢了

00:23:50.450 --> 00:23:55.249
可能意味着我们在Goldilocks 

00:23:51.830 --> 00:23:57.679
正确的区域，所以我们想做什么

00:23:55.249 --> 00:24:00.200
是现代应用程序开发人员

00:23:57.679 --> 00:24:02.629
正在占领世界，并且在那里

00:24:00.200 --> 00:24:04.639
所有的增长都是你知道的吗

00:24:02.629 --> 00:24:07.489
这样六个月的发行是

00:24:04.639 --> 00:24:11.779
毫无疑问，但我们不想吹

00:24:07.489 --> 00:24:14.239
人们如何消费和发展他们的

00:24:11.779 --> 00:24:16.820
应用程序，所以我们要做的是

00:24:14.239 --> 00:24:18.950
就像我们过去所做的一样

00:24:16.820 --> 00:24:22.999
你可以考虑一个大的老

00:24:18.950 --> 00:24:24.470
主要版本让我们改变思维

00:24:22.999 --> 00:24:28.100
其中的一点，只是打电话给那些

00:24:24.470 --> 00:24:30.799
长期支持发布，因此

00:24:28.100 --> 00:24:33.739
我们发布的第一个长期支持版本

00:24:30.799 --> 00:24:35.330
建议的将是18.9，所以

00:24:33.739 --> 00:24:38.419
明年九月

00:24:35.330 --> 00:24:40.100
你可能会认为哦，我的天哪九不是

00:24:38.419 --> 00:24:43.489
长期支持发布就像

00:24:40.100 --> 00:24:47.989
好吧，如果我要说那是

00:24:43.489 --> 00:24:49.279
九和九u xx和九使用40是

00:24:47.989 --> 00:24:50.509
将是长期的支持

00:24:49.279 --> 00:24:52.970
释放没有人会注视

00:24:50.509 --> 00:24:54.499
每个人都很好，这是有道理的

00:24:52.970 --> 00:24:56.480
因为那是我们七年来所做的

00:24:54.499 --> 00:24:59.090
那就是我们在八小时之内所做的

00:24:56.480 --> 00:25:01.039
我们发布了八个更新，我们做了八个更新20 

00:24:59.090 --> 00:25:02.840
然后我们永远都不会支持您

00:25:01.039 --> 00:25:03.139
八，如果你想支持，你需要它

00:25:02.840 --> 00:25:04.789
成为

00:25:03.139 --> 00:25:06.590
您需要重现该问题

00:25:04.789 --> 00:25:09.289
八个u xx，然后当我们释放时

00:25:06.590 --> 00:25:10.820
八个u 40您需要重现

00:25:09.289 --> 00:25:14.509
在八四十中我们永远都不会

00:25:10.820 --> 00:25:17.019
在八个你20正确的支持你

00:25:14.509 --> 00:25:21.109
这里的事情好吧，我们所说的是

00:25:17.019 --> 00:25:24.889
当18.3出来时，在9点上工作

00:25:21.109 --> 00:25:28.669
 18.3当18.9出现时，在18.9上工作

00:25:24.889 --> 00:25:32.659
然后好消息18.9将有五个

00:25:28.669 --> 00:25:34.580
年至少无非是安全

00:25:32.659 --> 00:25:37.369
和稳定性更新，不会有新的

00:25:34.580 --> 00:25:40.730
功能，因此，如果您是企业， 

00:25:37.369 --> 00:25:42.399
从8变到18.9 

00:25:40.730 --> 00:25:44.690
有五年的发布时间，而我有一个

00:25:42.399 --> 00:25:48.769
这里的图片会显示全部

00:25:44.690 --> 00:25:51.769
好的，所以目标是

00:25:48.769 --> 00:25:52.620
每三年左右，这个你

00:25:51.769 --> 00:25:53.910
知道这可以改变

00:25:52.620 --> 00:25:55.980
取决于发生的事情

00:25:53.910 --> 00:25:57.960
生态系统，或者是否有令人难以置信的

00:25:55.980 --> 00:25:59.520
主要的新功能出现了，我们

00:25:57.960 --> 00:26:02.100
说你知道我们想要给什么

00:25:59.520 --> 00:26:04.350
我们打电话之前要再烘烤六个月

00:26:02.100 --> 00:26:06.000
它是长期支持版本，因此我们可以

00:26:04.350 --> 00:26:07.440
稍微调整一下，但大致

00:26:06.000 --> 00:26:09.390
我们的目标是每三年

00:26:07.440 --> 00:26:12.540
大约五年的长期支持

00:26:09.390 --> 00:26:15.300
这给你很多时间移动

00:26:12.540 --> 00:26:17.670
与您一样在主要版本之间

00:26:15.300 --> 00:26:19.980
总是有权利，所以当我

00:26:17.670 --> 00:26:21.720
在杰克的伦敦谈论这个

00:26:19.980 --> 00:26:24.960
几个星期前

00:26:21.720 --> 00:26:26.340
我刚开始从事金融业的人

00:26:24.960 --> 00:26:28.590
谈论你可以做的第一部分

00:26:26.340 --> 00:26:30.300
看到每个人的眼睛上的压力

00:26:28.590 --> 00:26:31.650
整个我们该如何跟上六个

00:26:30.300 --> 00:26:32.340
月发布，这将是一个

00:26:31.650 --> 00:26:33.990
灾害

00:26:32.340 --> 00:26:37.050
然后当我把它放好时

00:26:33.990 --> 00:26:38.940
只是看到救济就好了

00:26:37.050 --> 00:26:41.250
所以你说的对我来说什么都没有

00:26:38.940 --> 00:26:43.710
必须改变权利，我就像唤醒

00:26:41.250 --> 00:26:46.740
我当下长期支持

00:26:43.710 --> 00:26:48.480
指定的发布会随之而来

00:26:46.740 --> 00:26:51.059
这个模型对不起一秒钟的方式

00:26:48.480 --> 00:26:53.160
这个模型就像这样不像某些

00:26:51.059 --> 00:26:54.990
我们发明了稀疏的头发的东西

00:26:53.160 --> 00:26:56.520
是一种非常适合

00:26:54.990 --> 00:27:01.290
开源项目的数量和

00:26:56.520 --> 00:27:04.220
平台是的，抱歉，我会说

00:27:01.290 --> 00:27:08.640
关于这一点，我们的援助时间表是

00:27:04.220 --> 00:27:10.559
截至目前的2025年，但我当时还没有开玩笑

00:27:08.640 --> 00:27:12.809
我说过像孙子一样

00:27:10.559 --> 00:27:15.300
可能会支持实际上

00:27:12.809 --> 00:27:17.760
可能对我最大的障碍是

00:27:15.300 --> 00:27:19.470
早餐时和某人聊天

00:27:17.760 --> 00:27:21.510
这虽然是我最大的障碍

00:27:19.470 --> 00:27:27.600
想一生的援助将

00:27:21.510 --> 00:27:30.950
是什么的32位翻转问题

00:27:27.600 --> 00:27:32.940
那二十八是啊，那是

00:27:30.950 --> 00:27:40.410
某人要做一些工作

00:27:32.940 --> 00:27:45.840
我的一个孩子还好吧，现在

00:27:40.410 --> 00:27:50.010
让我们在这里排队

00:27:45.840 --> 00:27:51.870
当前版本的

00:27:50.010 --> 00:27:53.940
未来的版本是正确的，所以如果JT k6j 

00:27:51.870 --> 00:27:57.000
 k7j衰减，因为它们很粗糙

00:27:53.940 --> 00:27:59.760
时间表，我要成为

00:27:57.000 --> 00:28:03.600
清除我在混淆您知道Oracle 

00:27:59.760 --> 00:28:06.480
您知道的JDK付费支持选项

00:28:03.600 --> 00:28:09.559
这里的时间线与开放G中的内容

00:28:06.480 --> 00:28:12.360
好的，谁在为此而努力

00:28:09.559 --> 00:28:16.080
但是像这样给你

00:28:12.360 --> 00:28:17.640
好的角度，现在让我们

00:28:16.080 --> 00:28:20.640
像这样叠加起来

00:28:17.640 --> 00:28:23.070
 Oracle JDK透视图

00:28:20.640 --> 00:28:25.320
将开始在开放的JDK上工作

00:28:23.070 --> 00:28:27.030
建立它需要一些时间

00:28:25.320 --> 00:28:31.470
那些完全可以互换的

00:28:27.030 --> 00:28:33.059
与开放的JDK对，所以我们需要

00:28:31.470 --> 00:28:36.840
需要继续生产甲骨文

00:28:33.059 --> 00:28:39.299
 JDK以及Java 9 for 18 3和

00:28:36.840 --> 00:28:42.210
 18 9我们将继续生产

00:28:39.299 --> 00:28:45.570
 Oracle JDK和由以下版本构建的开放式JDK 

00:28:42.210 --> 00:28:47.610
甲骨文，我想我也喜欢

00:28:45.570 --> 00:28:49.500
我不知道一种方法还是另一种方法

00:28:47.610 --> 00:28:51.540
但我认为红帽是

00:28:49.500 --> 00:28:53.730
将继续产生他们的开放

00:28:51.540 --> 00:28:55.980
 JDK始终如一地构建

00:28:53.730 --> 00:28:58.470
我认为这是愚蠢的意愿， 

00:28:55.980 --> 00:29:00.840
我想一个箭头会保持

00:28:58.470 --> 00:29:06.299
做他们的手臂锻炼等等

00:29:00.840 --> 00:29:07.770
正确，但是是的，但这表明

00:29:06.299 --> 00:29:09.120
从Oracle角度来看您喜欢

00:29:07.770 --> 00:29:11.400
我们不会回到过去

00:29:09.120 --> 00:29:16.530
产生甲骨文不会回去

00:29:11.400 --> 00:29:19.590
及时生产开放的JDK构建

00:29:16.530 --> 00:29:20.010
 8，但我希望Red Hat会继续

00:29:19.590 --> 00:29:23.040
这样做

00:29:20.010 --> 00:29:27.179
正如他们继续为JDK 6所做的那样

00:29:23.040 --> 00:29:29.820
和JDK 7对，即使Oracle 

00:29:27.179 --> 00:29:33.510
使用Oracle JDK并将其移至

00:29:29.820 --> 00:29:35.850
我们提供的商业支持服务

00:29:33.510 --> 00:29:39.660
像Red Hat这样的供应商

00:29:35.850 --> 00:29:43.950
把它接过来，我希望

00:29:39.660 --> 00:29:45.120
继续前进，但是你

00:29:43.950 --> 00:29:47.970
知道我们会明白的

00:29:45.120 --> 00:29:50.690
现在这些也一样，所以我你知道

00:29:47.970 --> 00:29:53.520
像这样的幻灯片放另一种方式是

00:29:50.690 --> 00:29:55.530
甲骨文对此的观点是

00:29:53.520 --> 00:29:59.549
绝对不会停止

00:29:55.530 --> 00:30:01.049
任何人我有任何供应商

00:29:59.549 --> 00:30:02.940
提到或为此的任何个人

00:30:01.049 --> 00:30:04.260
重要的是选择其中任何一个

00:30:02.940 --> 00:30:07.559
决定他们希望有

00:30:04.260 --> 00:30:09.510
也有长期的支持，所以这

00:30:07.559 --> 00:30:13.940
只是Oracle的观点，而我们

00:30:09.510 --> 00:30:13.940
打算在这个空间里做

00:30:14.279 --> 00:30:20.989
好吧，那么你就知道了

00:30:17.849 --> 00:30:23.969
压缩并压缩全部

00:30:20.989 --> 00:30:25.979
基本上你可以看到我们要去

00:30:23.969 --> 00:30:28.139
我们将有六个月的发布时间

00:30:25.979 --> 00:30:31.739
针对现代应用的循环

00:30:28.139 --> 00:30:34.710
发展，我们将继续六个

00:30:31.739 --> 00:30:37.580
像我们以前的七点和八点，然后我们

00:30:34.710 --> 00:30:40.679
会选择长期支持模式

00:30:37.580 --> 00:30:45.330
对于那些坦率的企业

00:30:40.679 --> 00:30:50.029
真的很喜欢

00:30:45.330 --> 00:30:53.369
发布和应用程序过渡，因此

00:30:50.029 --> 00:30:55.469
就是我的幻灯片，我有五个

00:30:53.369 --> 00:30:57.269
分钟的问题，我会再次

00:30:55.469 --> 00:30:59.999
只是想提醒您，我听不到

00:30:57.269 --> 00:31:34.589
最好，如果您有任何疑问，请说

00:30:59.999 --> 00:31:37.889
大声请是好，所以是这样

00:31:34.589 --> 00:31:38.940
一切都很好，所以这个问题

00:31:37.889 --> 00:31:42.089
那些后面可能没有的人

00:31:38.940 --> 00:31:45.690
听说过有关Java SE嵌入式以及如何

00:31:42.089 --> 00:31:48.149
这与此有关，如果你实际上

00:31:45.690 --> 00:31:50.899
转到Oracle Java SE嵌入式页面

00:31:48.149 --> 00:31:54.629
那里实际上有几个笔记

00:31:50.899 --> 00:31:57.960
关于这个，我们也发表了

00:31:54.629 --> 00:32:01.349
几周前的博客

00:31:57.960 --> 00:32:03.269
 Java平台组博客，如果您只是

00:32:01.349 --> 00:32:06.509
在以下位置查找Java平台组博客

00:32:03.269 --> 00:32:08.339
 Oracle，您会找到它的，以便

00:32:06.509 --> 00:32:10.320
我可以说正确的更多细节

00:32:08.339 --> 00:32:13.049
在这里，对于那些可能不会

00:32:10.320 --> 00:32:17.940
知道我们有一个单独的广告

00:32:13.049 --> 00:32:20.070
它只有Java SE的嵌入式版本

00:32:17.940 --> 00:32:23.669
非常专业的港口，你可以做

00:32:20.070 --> 00:32:26.629
紧凑的配置文件好了，我们开源了

00:32:23.669 --> 00:32:28.350
所有这些代码所有这些端口

00:32:26.629 --> 00:32:31.259
包括一些

00:32:28.350 --> 00:32:38.940
移动挂钩大约两三年

00:32:31.259 --> 00:32:42.779
以前，如果您看一下Jeb和9 

00:32:38.940 --> 00:32:45.360
拼图契约的价值主张

00:32:42.779 --> 00:32:48.149
个人资料消失，所以唯一

00:32:45.360 --> 00:32:51.210
价值确实在自定义端口中

00:32:48.149 --> 00:32:54.570
是的，所以我们开源了所有这些， 

00:32:51.210 --> 00:32:57.210
 Oracle不想使用Java 

00:32:54.570 --> 00:33:00.480
 SE嵌入了9及更高版本，因此我们仍然拥有

00:32:57.210 --> 00:33:02.429
 Java SE Embedded 8，但我们已经投入使用

00:33:00.480 --> 00:33:05.070
关于有限的可用性和我们的

00:33:02.429 --> 00:33:07.259
目的是生态系统将

00:33:05.070 --> 00:33:09.690
接管那是因为他们在很大程度上

00:33:07.259 --> 00:33:12.210
对，所以有几个供应商

00:33:09.690 --> 00:33:16.529
一家特别叫micro的公司

00:33:12.210 --> 00:33:20.039
对接，因此他们提供基于ARM的产品

00:33:16.529 --> 00:33:21.990
嵌入式Java SE的端口

00:33:20.039 --> 00:33:23.850
商业基础，但所有源代码

00:33:21.990 --> 00:33:26.100
有没有人要选这个

00:33:23.850 --> 00:33:41.210
并在以下免费运行

00:33:26.100 --> 00:33:43.710
 GPL是的，所以有问题，是的，所以

00:33:41.210 --> 00:33:46.350
是的，现在不是

00:33:43.710 --> 00:33:48.600
所以我们仍然必须考虑

00:33:46.350 --> 00:33:51.649
因为有点像你说的

00:33:48.600 --> 00:33:54.659
挑战是为了建立开放的jfx 

00:33:51.649 --> 00:33:56.750
您必须实际构建整个JDK 

00:33:54.659 --> 00:33:58.950
真的，我真的

00:33:56.750 --> 00:34:00.480
不幸的权利，因为我们会

00:33:58.950 --> 00:34:03.179
就像那是一回事

00:34:00.480 --> 00:34:07.399
可以单独对待

00:34:03.179 --> 00:34:10.530
对，所以我们必须弄清楚，但是

00:34:07.399 --> 00:34:12.990
你知道记住这个策略

00:34:10.530 --> 00:34:16.319
这真的是关于现代应用

00:34:12.990 --> 00:34:19.230
云开发正确，所以我们需要

00:34:16.319 --> 00:34:21.240
你知道在JavaOne我们一直在谈论

00:34:19.230 --> 00:34:23.010
给许多公司和合作伙伴

00:34:21.240 --> 00:34:25.050
可能有兴趣做

00:34:23.010 --> 00:34:28.560
那个东西，看着

00:34:25.050 --> 00:34:30.899
许可，或者我们是否可以进入

00:34:28.560 --> 00:34:33.720
最终做出那些改变

00:34:30.899 --> 00:34:37.770
将其作为单独的模块可以

00:34:33.720 --> 00:34:40.780
只是选择插入或不插入，所以我

00:34:37.770 --> 00:34:44.010
知道不是肯定/否定答案，但是

00:34:40.780 --> 00:35:01.690
这是我能做到的最好的，是的

00:34:44.010 --> 00:35:03.520
是的，那不会改变，所以我们

00:35:01.690 --> 00:35:05.260
仍将拥有Oracle JDK 

00:35:03.520 --> 00:35:09.820
仍然有相同的广告

00:35:05.260 --> 00:35:11.530
有功能许可，但是

00:35:09.820 --> 00:35:13.720
好消息是， 

00:35:11.530 --> 00:35:15.580
明年，我们将积极努力

00:35:13.720 --> 00:35:17.710
将该代码开源并将其放入我们的

00:35:15.580 --> 00:35:19.750
开放的JDK构建，因此您将拥有

00:35:17.710 --> 00:35:23.470
选择在下面免费使用

00:35:19.750 --> 00:35:26.230
 GPL，但是Oracle JDK在一定程度上

00:35:23.470 --> 00:35:33.280
它的存在将成为未来

00:35:26.230 --> 00:35:37.590
独立的商业事物，是的，是的

00:35:33.280 --> 00:35:52.210
好的时候再问一个问题

00:35:37.590 --> 00:35:59.230
还有一个问题是的，可以

00:35:52.210 --> 00:36:02.050
是不是，你知道这很有趣

00:35:59.230 --> 00:36:04.840
足够了，这就是为什么我们填充

00:36:02.050 --> 00:36:07.270
八年之间的所有空间

00:36:04.840 --> 00:36:09.490
就像为什么我们以20为增量

00:36:07.270 --> 00:36:11.470
是的，如果事情确实发生了， 

00:36:09.490 --> 00:36:12.670
我们不得不紧急发布的地方

00:36:11.470 --> 00:36:15.880
在中间或我们可以

00:36:12.670 --> 00:36:17.620
仍然保留，但有很多

00:36:15.880 --> 00:36:20.050
公开上的精彩线程

00:36:17.620 --> 00:36:21.760
 JDK邮件列表，所以Dan和Kurt我会

00:36:20.050 --> 00:36:24.040
鼓励你参加

00:36:21.760 --> 00:36:26.760
因为像你一样诚实地知道我们

00:36:24.040 --> 00:36:29.350
确实认真对待这些东西， 

00:36:26.760 --> 00:36:31.360
但是在同一时间

00:36:29.350 --> 00:36:32.680
就像有时候你要

00:36:31.360 --> 00:36:34.510
稍微敲人的肩膀

00:36:32.680 --> 00:36:36.550
有点改变你的思考方式

00:36:34.510 --> 00:36:38.580
事情如何进行，因为这

00:36:36.550 --> 00:36:41.440
这是变化吗，这是不同的

00:36:38.580 --> 00:36:42.940
这确实意味着您知道一些

00:36:41.440 --> 00:36:44.860
人们将不得不做更多的工作

00:36:42.940 --> 00:36:46.330
他们的工具和框架，以及

00:36:44.860 --> 00:36:49.120
应用程序比他们在

00:36:46.330 --> 00:36:51.010
过去，我知道那可能令人恐惧

00:36:49.120 --> 00:36:52.120
总是有资源时的命题

00:36:51.010 --> 00:36:54.520
受约束的

00:36:52.120 --> 00:36:56.740
但我想为了跟上

00:36:54.520 --> 00:36:59.770
像这样的现代应用程序开发

00:36:56.740 --> 00:37:02.230
是一个要求，所以我认为我们在

00:36:59.770 --> 00:37:03.820
有一次我可以随时抓住我

00:37:02.230 --> 00:37:06.190
我收拾电脑时，但我

00:37:03.820 --> 00:37:07.990
不想滥用多余的情侣

00:37:06.190 --> 00:37:09.040
分钟，我们非常感谢，非常感谢

00:37:07.990 --> 00:37:15.869
欣赏它

00:37:09.040 --> 00:37:15.869
 [掌声] 

