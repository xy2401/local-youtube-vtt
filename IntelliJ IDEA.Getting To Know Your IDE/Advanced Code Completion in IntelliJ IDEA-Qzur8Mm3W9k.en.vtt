WEBVTT
Kind: captions
Language: en

00:00:03.740 --> 00:00:06.650 align:start position:0%
 
not<00:00:04.740><c> only</c><00:00:05.000><c> doesn't</c><00:00:06.000><c> tell</c><00:00:06.120><c> a</c><00:00:06.149><c> guy</c><00:00:06.359><c> idea</c>

00:00:06.650 --> 00:00:06.660 align:start position:0%
not only doesn't tell a guy idea
 

00:00:06.660 --> 00:00:09.440 align:start position:0%
not only doesn't tell a guy idea
providing<00:00:07.229><c> sting</c><00:00:07.470><c> completion</c><00:00:08.010><c> on</c><00:00:08.940><c> a</c><00:00:09.000><c> key</c><00:00:09.330><c> by</c>

00:00:09.440 --> 00:00:09.450 align:start position:0%
providing sting completion on a key by
 

00:00:09.450 --> 00:00:11.210 align:start position:0%
providing sting completion on a key by
key<00:00:09.480><c> basis</c><00:00:10.200><c> it</c><00:00:10.500><c> also</c><00:00:10.620><c> offers</c><00:00:11.010><c> something</c>

00:00:11.210 --> 00:00:11.220 align:start position:0%
key basis it also offers something
 

00:00:11.220 --> 00:00:14.060 align:start position:0%
key basis it also offers something
called<00:00:11.700><c> smart</c><00:00:12.570><c> completion</c><00:00:13.140><c> which</c><00:00:13.710><c> offers</c>

00:00:14.060 --> 00:00:14.070 align:start position:0%
called smart completion which offers
 

00:00:14.070 --> 00:00:15.890 align:start position:0%
called smart completion which offers
context-sensitive<00:00:14.670><c> completion</c><00:00:15.480><c> results</c>

00:00:15.890 --> 00:00:15.900 align:start position:0%
context-sensitive completion results
 

00:00:15.900 --> 00:00:18.500 align:start position:0%
context-sensitive completion results
with<00:00:16.500><c> full</c><00:00:16.740><c> type</c><00:00:16.980><c> matching</c><00:00:17.460><c> so</c><00:00:18.060><c> that</c><00:00:18.210><c> the</c><00:00:18.330><c> type</c>

00:00:18.500 --> 00:00:18.510 align:start position:0%
with full type matching so that the type
 

00:00:18.510 --> 00:00:20.620 align:start position:0%
with full type matching so that the type
you<00:00:18.660><c> expect</c><00:00:19.109><c> is</c><00:00:19.289><c> the</c><00:00:19.320><c> type</c><00:00:19.589><c> that</c><00:00:19.800><c> comes</c><00:00:19.949><c> first</c>

00:00:20.620 --> 00:00:20.630 align:start position:0%
you expect is the type that comes first
 

00:00:20.630 --> 00:00:22.909 align:start position:0%
you expect is the type that comes first
and<00:00:21.630><c> you've</c><00:00:21.839><c> seen</c><00:00:22.109><c> how</c><00:00:22.259><c> some</c><00:00:22.470><c> of</c><00:00:22.499><c> that</c><00:00:22.679><c> works</c>

00:00:22.909 --> 00:00:22.919 align:start position:0%
and you've seen how some of that works
 

00:00:22.919 --> 00:00:25.550 align:start position:0%
and you've seen how some of that works
already<00:00:23.339><c> with</c><00:00:23.730><c> basic</c><00:00:24.150><c> completion</c><00:00:24.689><c> and</c><00:00:24.869><c> type</c>

00:00:25.550 --> 00:00:25.560 align:start position:0%
already with basic completion and type
 

00:00:25.560 --> 00:00:27.649 align:start position:0%
already with basic completion and type
aware<00:00:25.829><c> completion</c><00:00:26.400><c> but</c><00:00:27.029><c> that's</c><00:00:27.210><c> only</c><00:00:27.390><c> one</c>

00:00:27.649 --> 00:00:27.659 align:start position:0%
aware completion but that's only one
 

00:00:27.659 --> 00:00:29.089 align:start position:0%
aware completion but that's only one
part<00:00:27.900><c> of</c><00:00:28.079><c> intelligent</c><00:00:28.560><c> code</c><00:00:28.710><c> completion</c>

00:00:29.089 --> 00:00:29.099 align:start position:0%
part of intelligent code completion
 

00:00:29.099 --> 00:00:32.210 align:start position:0%
part of intelligent code completion
IntelliJ<00:00:29.909><c> IDEA</c><00:00:30.269><c> so</c><00:00:30.900><c> in</c><00:00:31.050><c> areas</c><00:00:31.470><c> where</c><00:00:31.710><c> IntelliJ</c>

00:00:32.210 --> 00:00:32.220 align:start position:0%
IntelliJ IDEA so in areas where IntelliJ
 

00:00:32.220 --> 00:00:34.340 align:start position:0%
IntelliJ IDEA so in areas where IntelliJ
IDEA<00:00:32.489><c> knows</c><00:00:32.790><c> that</c><00:00:33.180><c> type</c><00:00:33.540><c> is</c><00:00:33.720><c> constrained</c>

00:00:34.340 --> 00:00:34.350 align:start position:0%
IDEA knows that type is constrained
 

00:00:34.350 --> 00:00:36.860 align:start position:0%
IDEA knows that type is constrained
you'll<00:00:35.040><c> be</c><00:00:35.190><c> able</c><00:00:35.280><c> to</c><00:00:35.490><c> use</c><00:00:35.880><c> that</c><00:00:35.910><c> built-in</c><00:00:36.630><c> type</c>

00:00:36.860 --> 00:00:36.870 align:start position:0%
you'll be able to use that built-in type
 

00:00:36.870 --> 00:00:38.990 align:start position:0%
you'll be able to use that built-in type
inference<00:00:37.260><c> to</c><00:00:37.980><c> narrow</c><00:00:38.190><c> down</c><00:00:38.370><c> the</c><00:00:38.550><c> completion</c>

00:00:38.990 --> 00:00:39.000 align:start position:0%
inference to narrow down the completion
 

00:00:39.000 --> 00:00:40.670 align:start position:0%
inference to narrow down the completion
results<00:00:39.510><c> and</c><00:00:39.690><c> this</c><00:00:39.750><c> is</c><00:00:39.810><c> done</c><00:00:40.110><c> automatically</c>

00:00:40.670 --> 00:00:40.680 align:start position:0%
results and this is done automatically
 

00:00:40.680 --> 00:00:44.300 align:start position:0%
results and this is done automatically
so<00:00:41.660><c> for</c><00:00:42.660><c> example</c><00:00:43.020><c> here</c><00:00:43.470><c> if</c><00:00:43.650><c> the</c><00:00:43.860><c> object</c><00:00:44.250><c> that</c>

00:00:44.300 --> 00:00:44.310 align:start position:0%
so for example here if the object that
 

00:00:44.310 --> 00:00:47.540 align:start position:0%
so for example here if the object that
we<00:00:44.400><c> receive</c><00:00:44.880><c> is</c><00:00:45.210><c> an</c><00:00:45.630><c> instance</c><00:00:45.990><c> of</c><00:00:46.200><c> long</c><00:00:46.550><c> when</c>

00:00:47.540 --> 00:00:47.550 align:start position:0%
we receive is an instance of long when
 

00:00:47.550 --> 00:00:48.920 align:start position:0%
we receive is an instance of long when
we<00:00:47.670><c> do</c><00:00:47.790><c> something</c><00:00:48.150><c> like</c><00:00:48.180><c> try</c><00:00:48.630><c> to</c><00:00:48.690><c> increment</c>

00:00:48.920 --> 00:00:48.930 align:start position:0%
we do something like try to increment
 

00:00:48.930 --> 00:00:55.370 align:start position:0%
we do something like try to increment
the<00:00:49.260><c> counter</c><00:00:51.440><c> an</c><00:00:53.390><c> apply</c><00:00:54.390><c> smart</c><00:00:54.810><c> completion</c>

00:00:55.370 --> 00:00:55.380 align:start position:0%
the counter an apply smart completion
 

00:00:55.380 --> 00:00:57.440 align:start position:0%
the counter an apply smart completion
then<00:00:56.070><c> it</c><00:00:56.160><c> will</c><00:00:56.250><c> automatically</c><00:00:56.730><c> cast</c><00:00:57.150><c> that</c>

00:00:57.440 --> 00:00:57.450 align:start position:0%
then it will automatically cast that
 

00:00:57.450 --> 00:01:00.560 align:start position:0%
then it will automatically cast that
variable<00:00:58.050><c> down</c><00:00:58.560><c> to</c><00:00:58.800><c> a</c><00:00:58.830><c> long</c><00:00:59.160><c> and</c><00:00:59.880><c> similarly</c><00:01:00.360><c> if</c>

00:01:00.560 --> 00:01:00.570 align:start position:0%
variable down to a long and similarly if
 

00:01:00.570 --> 00:01:02.270 align:start position:0%
variable down to a long and similarly if
it's<00:01:00.720><c> an</c><00:01:00.810><c> integer</c><00:01:01.050><c> then</c><00:01:01.740><c> it</c><00:01:01.829><c> will</c><00:01:01.950><c> offer</c><00:01:02.070><c> the</c>

00:01:02.270 --> 00:01:02.280 align:start position:0%
it's an integer then it will offer the
 

00:01:02.280 --> 00:01:08.990 align:start position:0%
it's an integer then it will offer the
same<00:01:02.460><c> feature</c><00:01:07.550><c> so</c><00:01:08.550><c> this</c><00:01:08.700><c> happens</c>

00:01:08.990 --> 00:01:09.000 align:start position:0%
same feature so this happens
 

00:01:09.000 --> 00:01:10.190 align:start position:0%
same feature so this happens
automatically<00:01:09.570><c> and</c><00:01:09.780><c> it's</c><00:01:09.870><c> powered</c><00:01:10.170><c> by</c>

00:01:10.190 --> 00:01:10.200 align:start position:0%
automatically and it's powered by
 

00:01:10.200 --> 00:01:13.010 align:start position:0%
automatically and it's powered by
something<00:01:10.530><c> called</c><00:01:10.680><c> dataflow</c><00:01:11.580><c> analysis</c><00:01:12.270><c> so</c><00:01:12.990><c> in</c>

00:01:13.010 --> 00:01:13.020 align:start position:0%
something called dataflow analysis so in
 

00:01:13.020 --> 00:01:15.830 align:start position:0%
something called dataflow analysis so in
any<00:01:13.350><c> symbol</c><00:01:13.800><c> inside</c><00:01:14.100><c> the</c><00:01:14.250><c> IDE</c><00:01:14.550><c> you</c><00:01:15.060><c> can</c><00:01:15.600><c> right</c>

00:01:15.830 --> 00:01:15.840 align:start position:0%
any symbol inside the IDE you can right
 

00:01:15.840 --> 00:01:17.690 align:start position:0%
any symbol inside the IDE you can right
click<00:01:15.870><c> on</c><00:01:16.170><c> that</c><00:01:16.320><c> symbol</c><00:01:16.560><c> and</c><00:01:16.920><c> analyze</c><00:01:17.520><c> the</c>

00:01:17.690 --> 00:01:17.700 align:start position:0%
click on that symbol and analyze the
 

00:01:17.700 --> 00:01:21.410 align:start position:0%
click on that symbol and analyze the
data<00:01:17.730><c> flow</c><00:01:18.350><c> to</c><00:01:19.350><c> and</c><00:01:19.790><c> from</c><00:01:20.790><c> that</c><00:01:21.000><c> location</c>

00:01:21.410 --> 00:01:21.420 align:start position:0%
data flow to and from that location
 

00:01:21.420 --> 00:01:25.250 align:start position:0%
data flow to and from that location
throughout<00:01:22.110><c> your</c><00:01:22.320><c> entire</c><00:01:22.500><c> project</c><00:01:24.140><c> that</c><00:01:25.140><c> will</c>

00:01:25.250 --> 00:01:25.260 align:start position:0%
throughout your entire project that will
 

00:01:25.260 --> 00:01:29.149 align:start position:0%
throughout your entire project that will
display<00:01:25.500><c> a</c><00:01:25.650><c> hierarchy</c><00:01:26.250><c> of</c><00:01:27.710><c> all</c><00:01:28.710><c> the</c><00:01:28.800><c> places</c>

00:01:29.149 --> 00:01:29.159 align:start position:0%
display a hierarchy of all the places
 

00:01:29.159 --> 00:01:31.160 align:start position:0%
display a hierarchy of all the places
that<00:01:29.190><c> object</c><00:01:29.700><c> has</c><00:01:29.880><c> been</c><00:01:29.909><c> upstream</c><00:01:30.780><c> and</c><00:01:31.050><c> how</c><00:01:31.140><c> I</c>

00:01:31.160 --> 00:01:31.170 align:start position:0%
that object has been upstream and how I
 

00:01:31.170 --> 00:01:33.070 align:start position:0%
that object has been upstream and how I
travel<00:01:31.500><c> to</c><00:01:31.680><c> that</c><00:01:31.710><c> location</c><00:01:32.190><c> in</c><00:01:32.490><c> your</c><00:01:32.520><c> code</c>

00:01:33.070 --> 00:01:33.080 align:start position:0%
travel to that location in your code
 

00:01:33.080 --> 00:01:35.570 align:start position:0%
travel to that location in your code
using<00:01:34.080><c> that</c><00:01:34.200><c> information</c><00:01:34.470><c> in</c><00:01:34.979><c> the</c><00:01:35.070><c> enclosing</c>

00:01:35.570 --> 00:01:35.580 align:start position:0%
using that information in the enclosing
 

00:01:35.580 --> 00:01:38.210 align:start position:0%
using that information in the enclosing
type<00:01:35.820><c> IntelliJ</c><00:01:36.570><c> IDEA</c><00:01:36.930><c> is</c><00:01:37.320><c> able</c><00:01:37.620><c> to</c><00:01:37.710><c> determine</c>

00:01:38.210 --> 00:01:38.220 align:start position:0%
type IntelliJ IDEA is able to determine
 

00:01:38.220 --> 00:01:40.160 align:start position:0%
type IntelliJ IDEA is able to determine
the<00:01:38.760><c> most</c><00:01:38.940><c> specific</c><00:01:39.420><c> data</c><00:01:39.600><c> type</c><00:01:39.840><c> that</c><00:01:39.870><c> an</c>

00:01:40.160 --> 00:01:40.170 align:start position:0%
the most specific data type that an
 

00:01:40.170 --> 00:01:42.920 align:start position:0%
the most specific data type that an
object<00:01:40.500><c> could</c><00:01:40.650><c> possibly</c><00:01:41.100><c> hold</c><00:01:41.520><c> at</c><00:01:42.479><c> any</c><00:01:42.720><c> given</c>

00:01:42.920 --> 00:01:42.930 align:start position:0%
object could possibly hold at any given
 

00:01:42.930 --> 00:01:45.859 align:start position:0%
object could possibly hold at any given
location<00:01:44.000><c> another</c><00:01:45.000><c> area</c><00:01:45.420><c> where</c><00:01:45.570><c> smart</c>

00:01:45.859 --> 00:01:45.869 align:start position:0%
location another area where smart
 

00:01:45.869 --> 00:01:47.810 align:start position:0%
location another area where smart
completion<00:01:46.290><c> is</c><00:01:46.440><c> really</c><00:01:46.710><c> helpful</c><00:01:46.920><c> is</c><00:01:47.610><c> in</c>

00:01:47.810 --> 00:01:47.820 align:start position:0%
completion is really helpful is in
 

00:01:47.820 --> 00:01:49.789 align:start position:0%
completion is really helpful is in
constructors<00:01:48.510><c> and</c><00:01:48.840><c> methods</c><00:01:49.170><c> which</c><00:01:49.350><c> pass</c>

00:01:49.789 --> 00:01:49.799 align:start position:0%
constructors and methods which pass
 

00:01:49.799 --> 00:01:51.920 align:start position:0%
constructors and methods which pass
their<00:01:50.640><c> arguments</c><00:01:51.150><c> directly</c><00:01:51.630><c> into</c><00:01:51.840><c> another</c>

00:01:51.920 --> 00:01:51.930 align:start position:0%
their arguments directly into another
 

00:01:51.930 --> 00:01:55.609 align:start position:0%
their arguments directly into another
method<00:01:52.470><c> so</c><00:01:53.159><c> here</c><00:01:53.190><c> IntelliJ</c><00:01:53.970><c> IDEA</c><00:01:54.409><c> uses</c><00:01:55.409><c> type</c>

00:01:55.609 --> 00:01:55.619 align:start position:0%
method so here IntelliJ IDEA uses type
 

00:01:55.619 --> 00:01:57.830 align:start position:0%
method so here IntelliJ IDEA uses type
inference<00:01:55.979><c> and</c><00:01:56.310><c> variable</c><00:01:56.790><c> names</c><00:01:57.090><c> determine</c>

00:01:57.830 --> 00:01:57.840 align:start position:0%
inference and variable names determine
 

00:01:57.840 --> 00:01:59.810 align:start position:0%
inference and variable names determine
which<00:01:58.020><c> argument</c><00:01:58.530><c> should</c><00:01:59.130><c> be</c><00:01:59.189><c> placed</c><00:01:59.549><c> in</c><00:01:59.700><c> which</c>

00:01:59.810 --> 00:01:59.820 align:start position:0%
which argument should be placed in which
 

00:01:59.820 --> 00:02:02.870 align:start position:0%
which argument should be placed in which
position<00:02:00.770><c> completion</c><00:02:01.770><c> is</c><00:02:01.890><c> also</c><00:02:02.189><c> available</c><00:02:02.430><c> in</c>

00:02:02.870 --> 00:02:02.880 align:start position:0%
position completion is also available in
 

00:02:02.880 --> 00:02:04.490 align:start position:0%
position completion is also available in
other<00:02:03.060><c> areas</c><00:02:03.479><c> where</c><00:02:03.869><c> your</c><00:02:04.110><c> program's</c>

00:02:04.490 --> 00:02:04.500 align:start position:0%
other areas where your program's
 

00:02:04.500 --> 00:02:06.740 align:start position:0%
other areas where your program's
functionality<00:02:05.280><c> may</c><00:02:05.430><c> span</c><00:02:05.909><c> different</c>

00:02:06.740 --> 00:02:06.750 align:start position:0%
functionality may span different
 

00:02:06.750 --> 00:02:10.070 align:start position:0%
functionality may span different
languages<00:02:07.470><c> and</c><00:02:07.770><c> build</c><00:02:08.459><c> tools</c><00:02:08.849><c> which</c><00:02:09.629><c> may</c><00:02:09.869><c> have</c>

00:02:10.070 --> 00:02:10.080 align:start position:0%
languages and build tools which may have
 

00:02:10.080 --> 00:02:13.040 align:start position:0%
languages and build tools which may have
cross<00:02:10.500><c> language</c><00:02:10.739><c> references</c><00:02:11.840><c> here</c><00:02:12.840><c> you'll</c><00:02:12.959><c> be</c>

00:02:13.040 --> 00:02:13.050 align:start position:0%
cross language references here you'll be
 

00:02:13.050 --> 00:02:14.720 align:start position:0%
cross language references here you'll be
able<00:02:13.110><c> to</c><00:02:13.290><c> use</c><00:02:13.440><c> completion</c><00:02:13.980><c> just</c><00:02:14.190><c> like</c><00:02:14.580><c> in</c><00:02:14.700><c> your</c>

00:02:14.720 --> 00:02:14.730 align:start position:0%
able to use completion just like in your
 

00:02:14.730 --> 00:02:19.179 align:start position:0%
able to use completion just like in your
native<00:02:15.120><c> programming</c><00:02:15.630><c> language</c>

00:02:19.179 --> 00:02:19.189 align:start position:0%
 
 

00:02:19.189 --> 00:02:21.440 align:start position:0%
 
this<00:02:20.189><c> is</c><00:02:20.340><c> also</c><00:02:20.519><c> available</c><00:02:20.819><c> in</c><00:02:21.150><c> embedded</c>

00:02:21.440 --> 00:02:21.450 align:start position:0%
this is also available in embedded
 

00:02:21.450 --> 00:02:25.280 align:start position:0%
this is also available in embedded
languages<00:02:22.079><c> and</c><00:02:22.379><c> dialects</c><00:02:22.769><c> as</c><00:02:22.980><c> well</c><00:02:24.019><c> so</c><00:02:25.019><c> for</c>

00:02:25.280 --> 00:02:25.290 align:start position:0%
languages and dialects as well so for
 

00:02:25.290 --> 00:02:27.860 align:start position:0%
languages and dialects as well so for
writing<00:02:25.590><c> a</c><00:02:25.650><c> sequel</c><00:02:25.890><c> query</c><00:02:26.370><c> inside</c><00:02:27.090><c> Java</c><00:02:27.540><c> for</c>

00:02:27.860 --> 00:02:27.870 align:start position:0%
writing a sequel query inside Java for
 

00:02:27.870 --> 00:02:29.839 align:start position:0%
writing a sequel query inside Java for
instance<00:02:28.200><c> we</c><00:02:28.680><c> can</c><00:02:28.829><c> use</c><00:02:28.890><c> completion</c><00:02:29.549><c> for</c>

00:02:29.839 --> 00:02:29.849 align:start position:0%
instance we can use completion for
 

00:02:29.849 --> 00:02:35.899 align:start position:0%
instance we can use completion for
syntactical<00:02:30.420><c> elements</c><00:02:32.269><c> as</c><00:02:34.549><c> well</c><00:02:35.549><c> as</c><00:02:35.670><c> real</c>

00:02:35.899 --> 00:02:35.909 align:start position:0%
syntactical elements as well as real
 

00:02:35.909 --> 00:03:20.670 align:start position:0%
syntactical elements as well as real
data<00:02:36.180><c> sources</c><00:02:36.569><c> inside</c><00:02:37.079><c> a</c><00:02:37.140><c> database</c>

00:03:20.670 --> 00:03:20.680 align:start position:0%
 
 

00:03:20.680 --> 00:03:24.880 align:start position:0%
 
notice<00:03:21.680><c> that</c><00:03:21.799><c> when</c><00:03:21.950><c> you</c><00:03:22.040><c> use</c><00:03:22.370><c> completion</c><00:03:23.890><c> you</c>

00:03:24.880 --> 00:03:24.890 align:start position:0%
notice that when you use completion you
 

00:03:24.890 --> 00:03:26.770 align:start position:0%
notice that when you use completion you
can<00:03:25.069><c> use</c><00:03:25.250><c> any</c><00:03:25.459><c> substring</c><00:03:26.060><c> of</c><00:03:26.209><c> the</c><00:03:26.329><c> symbol</c><00:03:26.689><c> that</c>

00:03:26.770 --> 00:03:26.780 align:start position:0%
can use any substring of the symbol that
 

00:03:26.780 --> 00:03:32.649 align:start position:0%
can use any substring of the symbol that
you'd<00:03:26.959><c> like</c><00:03:27.079><c> to</c><00:03:27.140><c> complete</c><00:03:31.299><c> or</c><00:03:32.299><c> hippy</c>

00:03:32.649 --> 00:03:32.659 align:start position:0%
you'd like to complete or hippy
 

00:03:32.659 --> 00:03:34.330 align:start position:0%
you'd like to complete or hippy
completion<00:03:33.170><c> by</c><00:03:33.349><c> just</c><00:03:33.590><c> using</c><00:03:33.709><c> the</c><00:03:33.859><c> first</c>

00:03:34.330 --> 00:03:34.340 align:start position:0%
completion by just using the first
 

00:03:34.340 --> 00:03:45.280 align:start position:0%
completion by just using the first
letters<00:03:34.819><c> of</c><00:03:35.030><c> the</c><00:03:35.150><c> camel</c><00:03:35.540><c> cased</c><00:03:35.810><c> words</c><00:03:44.290><c> finally</c>

00:03:45.280 --> 00:03:45.290 align:start position:0%
letters of the camel cased words finally
 

00:03:45.290 --> 00:03:47.410 align:start position:0%
letters of the camel cased words finally
you<00:03:45.590><c> can</c><00:03:45.739><c> configure</c><00:03:46.099><c> the</c><00:03:46.280><c> behavior</c><00:03:46.760><c> of</c><00:03:47.060><c> code</c>

00:03:47.410 --> 00:03:47.420 align:start position:0%
you can configure the behavior of code
 

00:03:47.420 --> 00:03:50.440 align:start position:0%
you can configure the behavior of code
completion<00:03:47.859><c> inside</c><00:03:48.859><c> your</c><00:03:49.069><c> settings</c><00:03:49.489><c> which</c>

00:03:50.440 --> 00:03:50.450 align:start position:0%
completion inside your settings which
 

00:03:50.450 --> 00:03:51.250 align:start position:0%
completion inside your settings which
will<00:03:50.480><c> allow</c><00:03:50.810><c> you</c><00:03:50.870><c> to</c><00:03:51.049><c> customize</c>

00:03:51.250 --> 00:03:51.260 align:start position:0%
will allow you to customize
 

00:03:51.260 --> 00:03:55.410 align:start position:0%
will allow you to customize
case-sensitive<00:03:52.190><c> completion</c><00:03:53.109><c> Auto</c><00:03:54.109><c> inserting</c>

00:03:55.410 --> 00:03:55.420 align:start position:0%
case-sensitive completion Auto inserting
 

00:03:55.420 --> 00:03:58.240 align:start position:0%
case-sensitive completion Auto inserting
lexicographic<00:03:56.420><c> order</c><00:03:56.889><c> and</c><00:03:57.889><c> the</c><00:03:58.040><c> code</c>

00:03:58.240 --> 00:03:58.250 align:start position:0%
lexicographic order and the code
 

00:03:58.250 --> 00:04:00.369 align:start position:0%
lexicographic order and the code
completion<00:03:58.639><c> and</c><00:03:58.970><c> documentation</c><00:03:59.689><c> pop-ups</c>

00:04:00.369 --> 00:04:00.379 align:start position:0%
completion and documentation pop-ups
 

00:04:00.379 --> 00:04:03.039 align:start position:0%
completion and documentation pop-ups
with<00:04:00.799><c> a</c><00:04:00.859><c> default</c><00:04:01.310><c> delay</c><00:04:01.730><c> set</c><00:04:02.269><c> to</c><00:04:02.420><c> a</c><00:04:02.480><c> second</c><00:04:02.900><c> and</c>

00:04:03.039 --> 00:04:03.049 align:start position:0%
with a default delay set to a second and
 

00:04:03.049 --> 00:04:04.990 align:start position:0%
with a default delay set to a second and
toggle<00:04:03.680><c> the</c><00:04:03.769><c> full</c><00:04:03.980><c> signatures</c><00:04:04.489><c> of</c><00:04:04.700><c> each</c><00:04:04.819><c> of</c>

00:04:04.990 --> 00:04:05.000 align:start position:0%
toggle the full signatures of each of
 

00:04:05.000 --> 00:04:07.510 align:start position:0%
toggle the full signatures of each of
the<00:04:05.120><c> methods</c>

