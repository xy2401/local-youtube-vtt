WEBVTT
Kind: captions
Language: zh-Hans

00:00:03.740 --> 00:00:09.450
不仅不告诉男主意

00:00:06.660 --> 00:00:11.220
通过提供密钥完成敲击

00:00:09.450 --> 00:00:14.070
关键基础还提供了一些东西

00:00:11.220 --> 00:00:15.900
称为智能补全

00:00:14.070 --> 00:00:18.510
上下文相关的完成结果

00:00:15.900 --> 00:00:20.630
具有完整的类型匹配，因此类型

00:00:18.510 --> 00:00:22.919
您期望的是最先出现的类型

00:00:20.630 --> 00:00:25.560
您已经了解了其中的一些工作原理

00:00:22.919 --> 00:00:27.659
已经基本完成并输入了类型

00:00:25.560 --> 00:00:29.099
有意识的完成，但这仅仅是一个

00:00:27.659 --> 00:00:32.220
智能代码完成的一部分

00:00:29.099 --> 00:00:34.350
 IntelliJ IDEA在IntelliJ的地区也是如此

00:00:32.220 --> 00:00:36.870
 IDEA知道类型受到限制

00:00:34.350 --> 00:00:39.000
您将能够使用该内置类型

00:00:36.870 --> 00:00:40.680
推断范围缩小

00:00:39.000 --> 00:00:44.310
结果，这是自动完成的

00:00:40.680 --> 00:00:47.550
因此，例如，如果对象

00:00:44.310 --> 00:00:48.930
我们收到的是long当

00:00:47.550 --> 00:00:55.380
我们做类似尝试增加

00:00:48.930 --> 00:00:57.450
柜台申请智能完成

00:00:55.380 --> 00:01:00.570
然后它将自动投射

00:00:57.450 --> 00:01:02.280
变小到很长，如果

00:01:00.570 --> 00:01:09.000
这是一个整数，那么它将提供

00:01:02.280 --> 00:01:10.200
同样的功能，所以会发生这种情况

00:01:09.000 --> 00:01:13.020
自动并且由

00:01:10.200 --> 00:01:15.840
所谓的数据流分析

00:01:13.020 --> 00:01:17.700
您可以在IDE中找到任何符号

00:01:15.840 --> 00:01:21.420
单击该符号并分析

00:01:17.700 --> 00:01:25.260
往返该位置的数据流

00:01:21.420 --> 00:01:29.159
在整个项目中

00:01:25.260 --> 00:01:31.170
显示所有地点的层次结构

00:01:29.159 --> 00:01:33.080
那物体一直在上游，我如何

00:01:31.170 --> 00:01:35.580
前往代码中的该位置

00:01:33.080 --> 00:01:38.220
在附件中使用该信息

00:01:35.580 --> 00:01:40.170
 IntelliJ IDEA类型可以确定

00:01:38.220 --> 00:01:42.930
最具体的数据类型

00:01:40.170 --> 00:01:45.869
对象可能在任何给定位置都可以容纳

00:01:42.930 --> 00:01:47.820
放置另一个聪明的地方

00:01:45.869 --> 00:01:49.799
完成真的很有帮助

00:01:47.820 --> 00:01:51.930
通过的构造函数和方法

00:01:49.799 --> 00:01:55.619
他们的论点直接进入另一个

00:01:51.930 --> 00:01:57.840
方法，因此此处IntelliJ IDEA使用类型

00:01:55.619 --> 00:01:59.820
推论和变量名决定

00:01:57.840 --> 00:02:02.880
哪个参数应该放在哪个

00:01:59.820 --> 00:02:04.500
位置完成功能也可以在

00:02:02.880 --> 00:02:06.750
您程序所在的其他区域

00:02:04.500 --> 00:02:10.080
功能可能会有所不同

00:02:06.750 --> 00:02:13.050
语言和构建工具可能

00:02:10.080 --> 00:02:14.730
跨语言参考，您将在这里

00:02:13.050 --> 00:02:18.020
能够像您一样使用完成功能

00:02:14.730 --> 00:02:18.020
本机编程语言

00:02:19.189 --> 00:02:25.290
这也可以在嵌入式中使用

00:02:21.450 --> 00:02:27.870
语言和方言

00:02:25.290 --> 00:02:29.849
在Java中编写续集查询

00:02:27.870 --> 00:02:35.909
实例，我们可以使用完成

00:02:29.849 --> 00:02:39.590
句法要素以及真实要素

00:02:35.909 --> 00:02:39.590
数据库内部的数据源

00:03:20.680 --> 00:03:26.780
请注意，当您使用完成功能时， 

00:03:24.890 --> 00:03:32.659
可以使用该符号的任何子字符串

00:03:26.780 --> 00:03:34.340
你想完成或嬉皮

00:03:32.659 --> 00:03:45.290
只需使用第一个即可完成

00:03:34.340 --> 00:03:47.420
骆驼的信件终于把单词

00:03:45.290 --> 00:03:50.450
您可以配置代码的行为

00:03:47.420 --> 00:03:51.260
在您的设置内完成

00:03:50.450 --> 00:03:55.420
将允许您自定义

00:03:51.260 --> 00:03:58.250
区分大小写的完成自动插入

00:03:55.420 --> 00:04:00.379
词典顺序和代码

00:03:58.250 --> 00:04:03.049
完成和文档弹出窗口

00:04:00.379 --> 00:04:05.000
默认延迟设置为1秒， 

00:04:03.049 --> 00:04:07.510
切换每个的完整签名

00:04:05.000 --> 00:04:07.510
方法

