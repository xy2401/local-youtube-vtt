WEBVTT
Kind: captions
Language: zh-Hans

00:00:02.570 --> 00:00:08.040
调试Java和其他基于JVM的

00:00:05.160 --> 00:00:09.660
 IntelliJ IDEA上的语言很简单并且

00:00:08.040 --> 00:00:11.370
控制台简单明了

00:00:09.660 --> 00:00:14.549
应用程序，这仅仅是一个问题

00:00:11.370 --> 00:00:17.610
与您的添加新的运行配置

00:00:14.549 --> 00:00:19.610
主类任何VM选项和程序

00:00:17.610 --> 00:00:22.770
您要使用的参数和

00:00:19.610 --> 00:00:25.290
然后在运行操作中单击调试

00:00:22.770 --> 00:00:27.180
工具栏，您也可以启动

00:00:25.290 --> 00:00:29.100
从主要入口点开始的调试器

00:00:27.180 --> 00:00:32.399
通过单击或您的应用程序

00:00:29.100 --> 00:00:33.620
在该方法中并选择调试

00:00:32.399 --> 00:00:36.240
这将启动您的应用程序

00:00:33.620 --> 00:00:38.670
附加一个实例并等待它

00:00:36.240 --> 00:00:40.260
达到第一个断点，您可以看到

00:00:38.670 --> 00:00:42.570
在这里，我已经设置了这个断点

00:00:40.260 --> 00:00:46.770
有条件，这说每当

00:00:42.570 --> 00:00:49.140
我循环内的这个变量是3 

00:00:46.770 --> 00:00:51.420
我将停止世界，你也可以

00:00:49.140 --> 00:00:53.399
配置其他选项

00:00:51.420 --> 00:00:55.560
通过单击更多有条件断点

00:00:53.399 --> 00:00:58.110
你可以告诉它记录任何消息

00:00:55.560 --> 00:01:01.260
到控制台评估表达式

00:00:58.110 --> 00:01:03.360
并删除断点后

00:01:01.260 --> 00:01:05.250
点击我们还可以设置更多

00:01:03.360 --> 00:01:07.439
复杂的场景，例如链接

00:01:05.250 --> 00:01:09.509
有条件的断点，以便

00:01:07.439 --> 00:01:12.270
禁用，直到其他断点

00:01:09.509 --> 00:01:14.729
点击我们还可以指定某些过滤器

00:01:12.270 --> 00:01:16.649
对于这个断点，所以如果我们给它一个

00:01:14.729 --> 00:01:19.679
实例过滤器和调试器将

00:01:16.649 --> 00:01:24.569
仅在此类的实例处停止

00:01:19.679 --> 00:01:27.060
具有匹配的实例ID（如果

00:01:24.569 --> 00:01:29.579
断点位于抽象内

00:01:27.060 --> 00:01:32.789
类或默认方法，那么我们可以给

00:01:29.579 --> 00:01:35.100
它是一个类过滤器，它将阻止您

00:01:32.789 --> 00:01:39.029
程序运行时

00:01:35.100 --> 00:01:42.899
在具体的子类或集合中

00:01:39.029 --> 00:01:47.149
您项目中的那些，我们可以

00:01:42.899 --> 00:01:50.099
也排除某些班级

00:01:47.149 --> 00:01:52.380
最后通过计数过滤器将允许

00:01:50.099 --> 00:01:56.869
您告诉调试器跳过

00:01:52.380 --> 00:01:59.490
前n次击中此断点

00:01:56.869 --> 00:02:01.950
如果您没有任何帮助，这将很有帮助

00:01:59.490 --> 00:02:04.609
您当地范围内的其他地标

00:02:01.950 --> 00:02:06.959
馈入条件断点

00:02:04.609 --> 00:02:08.940
当您调试时， 

00:02:06.959 --> 00:02:11.310
调试工具窗口中的操作

00:02:08.940 --> 00:02:15.030
您应该注意诸如此类的步骤

00:02:11.310 --> 00:02:15.840
您可以单行执行的操作

00:02:15.030 --> 00:02:21.150
在你的代码中

00:02:15.840 --> 00:02:22.860
通过按或键，您可以

00:02:21.150 --> 00:02:24.540
通过按入另一个堆栈框架

00:02:22.860 --> 00:02:27.390
一步将带您到

00:02:24.540 --> 00:02:32.160
首先在那条线上打电话，然后踩

00:02:27.390 --> 00:02:33.660
如果您要退出，请按“退出” 

00:02:32.160 --> 00:02:35.880
导航到您内部的另一个地方

00:02:33.660 --> 00:02:37.170
项目或以其他方式失去你的位置

00:02:35.880 --> 00:02:39.630
随时可以回到当前

00:02:37.170 --> 00:02:42.269
通过显示执行点

00:02:39.630 --> 00:02:43.739
最后，如果您想执行点

00:02:42.269 --> 00:02:46.769
将调试器运行到特定的

00:02:43.739 --> 00:02:48.360
在程序中的位置，但您

00:02:46.769 --> 00:02:50.850
不一定要设置一个

00:02:48.360 --> 00:02:53.489
可以按运行到光标的断点

00:02:50.850 --> 00:02:55.650
它将在任何地方暂停调试器

00:02:53.489 --> 00:02:58.170
您将光标放在

00:02:55.650 --> 00:03:01.260
想继续，您可以按“继续”或

00:02:58.170 --> 00:03:03.989
 f9，如果调试器没有响应

00:03:01.260 --> 00:03:05.970
很长一段时间说它是活锁

00:03:03.989 --> 00:03:07.680
我们的自旋锁定在某个地方，但是你不

00:03:05.970 --> 00:03:11.330
知道你总是可以去哪里

00:03:07.680 --> 00:03:13.349
线程控制台视图并展开

00:03:11.330 --> 00:03:15.900
在这里您可以看到进度

00:03:13.349 --> 00:03:19.319
您可以暂停哪些线程

00:03:15.900 --> 00:03:21.269
该程序将其恢复并捕获

00:03:19.319 --> 00:03:24.890
线程转储以确定可能是

00:03:21.269 --> 00:03:24.890
拥塞的根源

