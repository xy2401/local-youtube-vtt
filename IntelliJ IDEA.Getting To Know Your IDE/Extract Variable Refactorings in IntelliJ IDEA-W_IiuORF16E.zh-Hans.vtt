WEBVTT
Kind: captions
Language: zh-Hans

00:00:04.140 --> 00:00:09.000
作为开发人员，我们担心使用遗留代码，因为它很难理解， 

00:00:09.000 --> 00:00:10.920
修改或扩展。 

00:00:10.920 --> 00:00:16.279
好消息是，您可以重构代码库以改善其设计或结构。 

00:00:16.279 --> 00:00:22.170
我知道，我们避免重构，因为它会破坏我们现有的代码。 

00:00:22.170 --> 00:00:28.770
在此屏幕截图中，我们将研究IntelliJ IDEA如何帮助您安全地重构代码， 

00:00:28.770 --> 00:00:31.150
提取变量重构。 

00:00:31.150 --> 00:00:37.399
我们还将讨论一些注意事项，因为重构不是魔术

00:00:37.399 --> 00:00:39.600
子弹。 

00:00:39.600 --> 00:00:44.960
在此代码中，让我们将突出显示表达式提取到变量中。 

00:00:44.960 --> 00:00:50.719
您可以在Windows系统上使用快捷键Control-Alt-V或在Windows上使用Command-Alt-V 

00:00:50.719 --> 00:00:51.949
苹果电脑。 

00:00:51.949 --> 00:00:57.730
根据您的上下文，IntelliJ IDEA会为提取的变量建议一个默认名称， 

00:00:57.730 --> 00:01:00.030
您可以更改。 

00:01:00.030 --> 00:01:04.500
您可以选择将此变量定义为final或使用var。 

00:01:04.500 --> 00:01:08.590
在此示例中，我将选择两者。 

00:01:08.590 --> 00:01:13.829
提取期间使用var的选项是IntelliJ IDEA 2019.1的新增功能。 

00:01:13.829 --> 00:01:17.659
 Java 10中也添加了var。 

00:01:17.659 --> 00:01:23.740
因此，您应该在IntelliJ IDEA中将项目语言级别配置为10+。 

00:01:23.740 --> 00:01:26.630
 JDK 10或更高版本）。 

00:01:26.630 --> 00:01:32.040
通过将表达式的一部分提取到新变量中，原始表达式为

00:01:32.040 --> 00:01:34.470
易于阅读并立即关注。 

00:01:34.470 --> 00:01:40.460
现在让我们来看一个比较复杂的示例，该示例使用当前日期和时间

00:01:40.460 --> 00:01:44.689
以预定义的格式返回唯一的字符串。 

00:01:44.689 --> 00:01:48.460
这里的大部分工作都由return语句完成。 

00:01:48.460 --> 00:01:52.939
它连接字符串值和日期时间部分。 

00:01:52.939 --> 00:01:59.460
但是，随着时间的流逝，可能很难遵循所有这些逻辑。 

00:01:59.460 --> 00:02:06.009
因此，让我们通过将其部分提取为变量来简化该表达式。 

00:02:06.009 --> 00:02:11.340
选择字符串文字“ J”并将其提取到变量“前缀”。 

00:02:11.340 --> 00:02:17.480
现在，选择提取LocalDateTime实例的年份的表达式。 

00:02:17.480 --> 00:02:21.000
 IntelliJ IDEA建议使用合适的名称。 

00:02:21.000 --> 00:02:26.280
现在，让我们将突出显示的表达式提取到变量中。 

00:02:26.280 --> 00:02:30.270
该表达式使用两位数字返回月份。 

00:02:30.270 --> 00:02:40.390
对于只有一位数字的月份，其前缀为零。 

00:02:40.390 --> 00:02:46.459
让我们也将此表达式提取到变量中。 

00:02:46.459 --> 00:02:54.409
让我们重新排列修改后的表达式，以查看它变得易于阅读和遵循。 

00:02:54.409 --> 00:03:00.350
 IntelliJ IDEA可以快速检测您要提取的表达式是否为另一个变量

00:03:00.350 --> 00:03:03.180
在多个地方重复。 

00:03:03.180 --> 00:03:09.790
如果是这样，它可以替换一个或所有出现的所选表达式。 

00:03:09.790 --> 00:03:14.980
您还可以更改IntelliJ IDEA建议的默认变量名称。 

00:03:14.980 --> 00:03:20.220
您可以在各个地方找到复杂的表达式，例如字段初始化器。 

00:03:20.220 --> 00:03:27.900
借助IntelliJ IDEA 2019.1，您还可以对复杂的表达式使用提取重构

00:03:27.900 --> 00:03:29.420
在字段初始化程序中。 

00:03:29.420 --> 00:03:36.690
有趣的是，Java编译器还将移动代码从字段声明中移出

00:03:36.690 --> 00:03:39.930
实例初始化器。 

00:03:39.930 --> 00:03:47.720
 IntelliJ IDEA 2019.1可以在某些情况下将三元运算符转换为if-else语句。 

00:03:47.720 --> 00:03:54.080
作为开发人员，我们将需要它，因为三元运算符可能会变得复杂，尤其是

00:03:54.080 --> 00:03:59.920
如果包含检查–例如instanceof或变量的null。 

00:03:59.920 --> 00:04:06.480
在这种情况下，IntelliJ IDEA可以帮助您提取变量并替换三元

00:04:06.480 --> 00:04:11.329
带有if语句的运算符。 

00:04:11.329 --> 00:04:17.209
除了在此处修改提取变量的名称外，此提取的实际值

00:04:17.209 --> 00:04:23.610
在于如何在代码中进一步对其进行修改。 

00:04:23.610 --> 00:04:27.160
自动重构不是万能的。 

00:04:27.160 --> 00:04:33.140
为了有效地在IntelliJ IDEA中使用变量重构，您必须知道它何时安全运行

00:04:33.140 --> 00:04:36.850
以及何时需要谨慎。 

00:04:36.850 --> 00:04:39.760
让我们用这段代码来理解它。 

00:04:39.760 --> 00:04:44.630
在重构之前，让我们快速执行并查看输出。 

00:04:44.630 --> 00:04:45.830
这里是。 

00:04:45.830 --> 00:04:57.510
现在，让我将emp.title提取到新变量中并替换所有出现的变量。 

00:04:57.510 --> 00:05:05.510
由于此处可运行，它可能会输出意外的结果，该结果可能在执行之前

00:05:05.510 --> 00:05:09.310
或在我调用log方法之后。 

00:05:09.310 --> 00:05:15.120
这是修改后的代码的输出，这不是我们期望的。 

00:05:15.120 --> 00:05:17.980
让我们来看另一个例子。 

00:05:17.980 --> 00:05:24.550
当您提取包含方法调用的变量时，IntelliJ IDEA让您选择

00:05:24.550 --> 00:05:28.750
无论您仅替换一个事件还是全部替换。 

00:05:28.750 --> 00:05:31.790
在这种情况下要小心。 

00:05:31.790 --> 00:05:36.870
这种提取可能会改变您的代码行为，而不管该方法是否调用

00:05:36.870 --> 00:05:41.370
您提取到变量中的内容是否纯净。 

00:05:41.370 --> 00:05:49.140
在这种情况下，将getTimeNow（）提取到变量timeNow中，该变量被使用了两次。 

00:05:49.140 --> 00:05:55.320
该代码将始终返回零值作为执行时间-无论

00:05:55.320 --> 00:05:57.890
循环需要执行。 

00:05:57.890 --> 00:06:04.100
在开始对代码进行认真的重构之前，请确保您具有自动

00:06:04.100 --> 00:06:10.930
修改后，要检查所有功能的测试套件设置仍然相同。 

00:06:10.930 --> 00:06:17.740
您可以使用IntelliJ IDEA帮助您开始定义单元测试。 

00:06:17.740 --> 00:06:19.820
重构愉快，感谢您的观看。 

