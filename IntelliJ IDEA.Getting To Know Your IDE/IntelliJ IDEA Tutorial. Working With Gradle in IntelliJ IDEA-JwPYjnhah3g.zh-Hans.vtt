WEBVTT
Kind: captions
Language: zh-Hans

00:00:00.030 --> 00:00:03.389
在此截屏视频中，我们将提供

00:00:01.829 --> 00:00:05.940
如何在Gradle中使用概述

00:00:03.389 --> 00:00:08.280
 IntelliJ IDEA我们将着眼于创建新的

00:00:05.940 --> 00:00:10.469
 Gradle项目导入项目

00:00:08.280 --> 00:00:13.019
管理依赖关系和运行任务

00:00:10.469 --> 00:00:14.610
让我们创建一个新的Gradle项目

00:00:13.019 --> 00:00:16.410
需要选择要使用的Java版本

00:00:14.610 --> 00:00:18.660
我们将使用最新版本的

00:00:16.410 --> 00:00:20.910
 Java 8，如果我们的项目使用其他

00:00:18.660 --> 00:00:22.410
语言，我们可以在这里选择

00:00:20.910 --> 00:00:24.660
在这个演示中，让我们坚持使用Java 

00:00:22.410 --> 00:00:27.359
 Gradle项目需要组ID和

00:00:24.660 --> 00:00:29.699
工件ID，因此我们将在此处输入

00:00:27.359 --> 00:00:32.219
这个阶段，我们有一些特定的Gradle 

00:00:29.699 --> 00:00:33.930
选项也将自动导入

00:00:32.219 --> 00:00:37.140
如果您更新Gradle，则应用更改

00:00:33.930 --> 00:00:38.790
设置，我们稍后再看

00:00:37.140 --> 00:00:40.559
第二设置对于新产品真的很有用

00:00:38.790 --> 00:00:42.629
项目，因为它设置了目录

00:00:40.559 --> 00:00:45.120
项目的结构，因此会打勾

00:00:42.629 --> 00:00:47.670
稍后将探讨第三个选项

00:00:45.120 --> 00:00:49.890
对于这个简单的项目，我们不需要

00:00:47.670 --> 00:00:51.300
担心我们会使用多个源集

00:00:49.890 --> 00:00:53.399
想要为此使用Gradle包装器

00:00:51.300 --> 00:00:54.870
通过使用Gradle包装器进行项目

00:00:53.399 --> 00:00:56.280
意味着任何想要工作的人

00:00:54.870 --> 00:00:58.800
该项目代码不必

00:00:56.280 --> 00:01:00.480
单独安装Gradle我们可以选择

00:00:58.800 --> 00:01:04.519
如果项目名称和位置不同

00:01:00.480 --> 00:01:06.600
我们想要，但是默认值在这里看起来不错

00:01:04.519 --> 00:01:09.479
 IntelliJ IDEA创建了一个简单的

00:01:06.600 --> 00:01:11.189
为我们设计的项目，并根据我们的要求

00:01:09.479 --> 00:01:14.579
默认的Java和测试目录具有

00:01:11.189 --> 00:01:16.289
被创建-如果我们看一下基本

00:01:14.579 --> 00:01:19.100
构建为创建的Gradle文件

00:01:16.289 --> 00:01:21.450
我们我们已经有建议在等待

00:01:19.100 --> 00:01:22.890
我们可以做一个简单的改变来给我们

00:01:21.450 --> 00:01:25.619
访问Gradle源和

00:01:22.890 --> 00:01:27.600
打开Gradle的说明文件

00:01:25.619 --> 00:01:30.090
窗口中，我们可以看到Gradle任务

00:01:27.600 --> 00:01:32.909
对我们和任何依赖项都可用

00:01:30.090 --> 00:01:35.039
已经宣布为基本版本

00:01:32.909 --> 00:01:37.289
文件包含对J单元4的依赖

00:01:35.039 --> 00:01:38.819
这样我们就可以看到

00:01:37.289 --> 00:01:41.729
 J单位是的手工艺品库

00:01:38.819 --> 00:01:43.229
依赖于这些也可见

00:01:41.729 --> 00:01:45.689
项目窗口中的外部库

00:01:43.229 --> 00:01:48.020
带有Gradle前缀，所以你知道在哪里

00:01:45.689 --> 00:01:48.020
他们来自

00:01:48.159 --> 00:01:52.630
正如您所期望的，IntelliJ IDEA给您

00:01:51.009 --> 00:01:54.840
 Gradle构建中的代码完成

00:01:52.630 --> 00:01:54.840
文件

00:01:55.140 --> 00:02:00.440
如果我们对此文件IntelliJ进行更改

00:01:57.840 --> 00:02:03.060
 IDEA会检测到并提供建议

00:02:00.440 --> 00:02:05.700
我们可以手动应用更改

00:02:03.060 --> 00:02:07.530
当我们准备好了或者我们可以启用自动

00:02:05.700 --> 00:02:09.210
导入以应用所做的更改

00:02:07.530 --> 00:02:11.520
因此我们不必记住要导入

00:02:09.210 --> 00:02:13.170
他们IntelliJ IDEA已经意识到

00:02:11.520 --> 00:02:14.820
我们现在正在使用groovy插件

00:02:13.170 --> 00:02:17.880
为我们创建了目录

00:02:14.820 --> 00:02:20.640
 groovy文件IntelliJ IDEA可以添加

00:02:17.880 --> 00:02:22.110
对我们的构建文件的依赖，我们可以

00:02:20.640 --> 00:02:25.650
通过名称搜索我们想要的库

00:02:22.110 --> 00:02:27.090
或路径，然后选择我们想要的一个

00:02:25.650 --> 00:02:28.770
看到新的依赖关系，它是

00:02:27.090 --> 00:02:32.330
 Gradle中的传递依赖

00:02:28.770 --> 00:02:32.330
窗口和项目窗口中

00:02:33.120 --> 00:02:37.050
 gradle所需要的图书馆也

00:02:35.519 --> 00:02:39.060
显示在项目库的窗口中

00:02:37.050 --> 00:02:41.750
再次用Gradle前缀显示

00:02:39.060 --> 00:02:43.950
这些已由Gradle添加

00:02:41.750 --> 00:02:45.750
请注意，尽管仍有可能

00:02:43.950 --> 00:02:49.140
在此处添加其他外部库，然后

00:02:45.750 --> 00:02:50.910
甚至在IDE中尽快使用它们

00:02:49.140 --> 00:02:54.030
这些将重新应用Gradle设置

00:02:50.910 --> 00:02:55.530
依赖被删除Gradle项目

00:02:54.030 --> 00:02:58.069
应该始终使用Gradle来管理

00:02:55.530 --> 00:02:58.069
依存关系

00:02:58.470 --> 00:03:01.860
我们可以使用更大的窗口来查看

00:03:00.180 --> 00:03:04.860
哪些任务可供我们运行

00:03:01.860 --> 00:03:08.970
当我们添加新插件时，它会更新

00:03:04.860 --> 00:03:10.770
这使我们可以执行其他任务

00:03:08.970 --> 00:03:13.470
这里的任务显示了输出

00:03:10.770 --> 00:03:16.260
运行窗口或者作为阶段摘要

00:03:13.470 --> 00:03:18.800
每个步骤花费的时间或

00:03:16.260 --> 00:03:20.850
熟悉的命令行Gradle输出

00:03:18.800 --> 00:03:23.490
我们已经研究了创建的基础

00:03:20.850 --> 00:03:24.870
并与Gradle项目合作， 

00:03:23.490 --> 00:03:26.690
我们更有可能与

00:03:24.870 --> 00:03:29.820
使用Gradle的现有应用程序

00:03:26.690 --> 00:03:31.500
让我们导入一个Gradle项目，选择

00:03:29.820 --> 00:03:33.450
包含一个项目的项目的文件夹

00:03:31.500 --> 00:03:35.490
 build.gradle文件通常表示

00:03:33.450 --> 00:03:38.520
 IntelliJ IDEA将项目导入为

00:03:35.490 --> 00:03:40.500
 Gradle项目，但是选择

00:03:38.520 --> 00:03:42.150
 build.gradle文件本身是最

00:03:40.500 --> 00:03:44.340
以某种方式将项目导入为

00:03:42.150 --> 00:03:46.590
 Gradle项目而不是其他格式

00:03:44.340 --> 00:03:48.270
可能在我们看到的项目中

00:03:46.590 --> 00:03:50.880
与创建新产品时类似的选项

00:03:48.270 --> 00:03:52.350
我不会使用自动导入的项目

00:03:50.880 --> 00:03:54.210
在这个项目上，因为它有一个复杂的

00:03:52.350 --> 00:03:55.410
我不想每次都运行的构建

00:03:54.210 --> 00:03:58.440
时候我对

00:03:55.410 --> 00:04:00.020
 build.gradle文件我也不会

00:03:58.440 --> 00:04:02.550
自动创建目录

00:04:00.020 --> 00:04:03.930
因为这是一个现有项目， 

00:04:02.550 --> 00:04:06.450
我们需要的所有文件夹都应该已经

00:04:03.930 --> 00:04:08.100
在那里我们将导入该项目

00:04:06.450 --> 00:04:10.050
无需为每个模块创建单独的模块

00:04:08.100 --> 00:04:11.459
源集，稍后我们将看

00:04:10.050 --> 00:04:13.860
如果我们勾选此按钮将产生差异

00:04:11.459 --> 00:04:16.560
这个项目确实有Gradle的盒子

00:04:13.860 --> 00:04:18.000
包装器，因此我们将使用此IntelliJ IDEA 

00:04:16.560 --> 00:04:20.040
在项目上运行Gradle 

00:04:18.000 --> 00:04:22.200
首先导入以初始化它， 

00:04:20.040 --> 00:04:23.220
一旦引入依赖

00:04:22.200 --> 00:04:25.470
该应用程序的结构是

00:04:23.220 --> 00:04:27.060
了解我们得到了所有的清单

00:04:25.470 --> 00:04:29.220
 IntelliJ IDEA模块可能是

00:04:27.060 --> 00:04:31.680
创建到项目，我们可以选择

00:04:29.220 --> 00:04:33.510
创建哪些，我们可以看到

00:04:31.680 --> 00:04:35.010
 IntelliJ IDEA已经创建了用于

00:04:33.510 --> 00:04:37.590
 Gradle中的所有子项目

00:04:35.010 --> 00:04:39.570
项目，它也可以正确识别

00:04:37.590 --> 00:04:41.550
定义的源目录和测试目录

00:04:39.570 --> 00:04:42.870
即使在Gradle构建中

00:04:41.550 --> 00:04:45.870
项目与往常不一样

00:04:42.870 --> 00:04:48.850
这些模块中的每个模块都有其标准

00:04:45.870 --> 00:04:51.010
由Gradle定义的自己的依赖项

00:04:48.850 --> 00:04:52.420
现在让我们看看它有什么不同

00:04:51.010 --> 00:04:55.630
稍微导入这个项目

00:04:52.420 --> 00:04:57.670
不同的设置专门让我们

00:04:55.630 --> 00:04:59.730
选择每个源创建单独的模块

00:04:57.670 --> 00:05:02.050
设置好，以便我们了解这意味着什么

00:04:59.730 --> 00:05:03.910
因为我们之前已经导入了

00:05:02.050 --> 00:05:06.580
我们已经定义了项目的项目

00:05:03.910 --> 00:05:07.990
 IntelliJ IDEA，但我们要做的是

00:05:06.580 --> 00:05:11.170
用我们的更新覆盖这些

00:05:07.990 --> 00:05:12.760
这次没有设置IntelliJ IDEA 

00:05:11.170 --> 00:05:15.430
仅建议每个子模块

00:05:12.760 --> 00:05:18.160
项目以及所有子项目

00:05:15.430 --> 00:05:19.450
该项目每个模块中的源集

00:05:18.160 --> 00:05:22.180
有不同的源集

00:05:19.450 --> 00:05:24.300
测试类型，因此可以全部设置

00:05:22.180 --> 00:05:26.500
作为独立的IntelliJ IDEA模块

00:05:24.300 --> 00:05:28.139
我们将了解为什么我们可能想要

00:05:26.500 --> 00:05:30.460
分钟

00:05:28.139 --> 00:05:32.800
现在，每个测试文件夹都是

00:05:30.460 --> 00:05:35.199
模块不仅仅是更大的文件夹

00:05:32.800 --> 00:05:37.120
模块，这意味着这些

00:05:35.199 --> 00:05:38.620
模块具有自己的依赖关系，并且

00:05:37.120 --> 00:05:41.530
不只是分享所有

00:05:38.620 --> 00:05:43.330
来自子项目this的依赖

00:05:41.530 --> 00:05:45.250
可能更准确地表示Gradle 

00:05:43.330 --> 00:05:47.139
编译并在内部运行

00:05:45.250 --> 00:05:50.199
 IDE的结果与

00:05:47.139 --> 00:05:51.699
从Gradle编译并运行

00:05:50.199 --> 00:05:53.290
 Gradle窗口显示每个子

00:05:51.699 --> 00:05:55.270
组成应用程序的项目

00:05:53.290 --> 00:05:57.790
包括与

00:05:55.270 --> 00:06:01.900
他们自己的依赖关系，当然

00:05:57.790 --> 00:06:03.669
我们可以看到较早的任务

00:06:01.900 --> 00:06:06.010
就像可以从这里运行测试任务

00:06:03.669 --> 00:06:08.050
测试结果将显示为

00:06:06.010 --> 00:06:11.440
熟悉的IntelliJ IDEA测试结果

00:06:08.050 --> 00:06:13.270
以及Gradle任务输出，但我们

00:06:11.440 --> 00:06:16.750
也可以运行测试或

00:06:13.270 --> 00:06:18.160
如果需要，可以从IDE内部将它们

00:06:16.750 --> 00:06:20.500
该项目需要构建

00:06:18.160 --> 00:06:23.590
由Gradle执行，例如

00:06:20.500 --> 00:06:25.630
生成代码或部署工件

00:06:23.590 --> 00:06:29.050
可以勾选委托IDE的构建

00:06:25.630 --> 00:06:30.720
摇篮设置，如果我们选择甚至

00:06:29.050 --> 00:06:32.979
当我们通过IDE运行测试时

00:06:30.720 --> 00:06:34.919
 IntelliJ IDEA将使用Gradle构建

00:06:32.979 --> 00:06:37.180
在运行测试之前的项目

00:06:34.919 --> 00:06:39.570
这个视频我们看了如何工作

00:06:37.180 --> 00:06:41.770
 IntelliJ IDEA中使用Gradle项目

00:06:39.570 --> 00:06:43.840
看看有关的文档

00:06:41.770 --> 00:06:45.729
更多详细信息或查看YouTube 

00:06:43.840 --> 00:06:47.849
观看更多视频的频道，谢谢

00:06:45.729 --> 00:06:47.849
观看

