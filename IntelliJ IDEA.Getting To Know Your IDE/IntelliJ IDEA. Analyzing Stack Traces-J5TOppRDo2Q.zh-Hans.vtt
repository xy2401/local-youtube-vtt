WEBVTT
Kind: captions
Language: zh-Hans

00:00:03.330 --> 00:00:08.019
如果您是Android开发人员，那么

00:00:06.099 --> 00:00:11.980
您可能已经看到了您的合理份额

00:00:08.019 --> 00:00:13.690
不寻常的堆栈痕迹，遇到一个

00:00:11.980 --> 00:00:15.429
这些已经足够了，因为没有

00:00:13.690 --> 00:00:17.680
必须弄清楚适合的地方

00:00:15.429 --> 00:00:21.130
项目内部以及如何进行

00:00:17.680 --> 00:00:23.320
在Android Studio中调试

00:00:21.130 --> 00:00:26.109
 IntelliJ IDEA有一个方便的工具

00:00:23.320 --> 00:00:29.230
称为堆栈基础分析器

00:00:26.109 --> 00:00:31.449
默认将允许您复制堆栈

00:00:29.230 --> 00:00:33.820
跟踪到系统剪贴板上

00:00:31.449 --> 00:00:35.860
然后切换回IDE，它将

00:00:33.820 --> 00:00:38.020
自动分析该堆栈跟踪

00:00:35.860 --> 00:00:42.010
为您提供能力

00:00:38.020 --> 00:00:44.500
直接导航到该来源

00:00:42.010 --> 00:00:47.710
例外，并贯穿整个

00:00:44.500 --> 00:00:49.510
逐行堆叠跟踪，您可以

00:00:47.710 --> 00:00:51.640
继续进行此工具

00:00:49.510 --> 00:00:53.740
分析并选择分析堆栈

00:00:51.640 --> 00:00:57.070
追踪这部影片，我想

00:00:53.740 --> 00:01:00.670
看混淆和混淆

00:00:57.070 --> 00:01:03.010
我在这里有混乱的堆栈跟踪

00:01:00.670 --> 00:01:05.280
安装了名为

00:01:03.010 --> 00:01:08.469
 ProGuard解密器插件和

00:01:05.280 --> 00:01:10.960
以及来自

00:01:08.469 --> 00:01:13.840
记录它将能够重建您的

00:01:10.960 --> 00:01:17.530
来自混淆的原始堆栈跟踪

00:01:13.840 --> 00:01:21.159
 android应用程序使用一个称为

00:01:17.530 --> 00:01:23.710
 ProGuard混淆您的代码以及什么

00:01:21.159 --> 00:01:25.840
当您使用ProGuard时会发生

00:01:23.710 --> 00:01:29.049
删除内部的所有标识符z' 

00:01:25.840 --> 00:01:31.119
代码，以便所有包类名

00:01:29.049 --> 00:01:33.189
和方法名称会有所帮助

00:01:31.119 --> 00:01:35.109
有人来重建你的原始

00:01:33.189 --> 00:01:37.749
源代码将被删除，它将尝试

00:01:35.109 --> 00:01:41.289
乱码源代码，此外

00:01:37.749 --> 00:01:43.659
这将使它走起来更加困难

00:01:41.289 --> 00:01:46.240
从堆栈跟踪返回到源

00:01:43.659 --> 00:01:48.639
代码，但如果我们认真执行此操作， 

00:01:46.240 --> 00:01:51.880
既可以混淆我们的代码，又可以

00:01:48.639 --> 00:01:54.609
调试我们将来的所有堆栈跟踪

00:01:51.880 --> 00:01:56.649
可能会从我们的用户那里收到

00:01:54.609 --> 00:01:59.499
释放您的最后一步

00:01:56.649 --> 00:02:02.049
 Android应用程序走向世界

00:01:59.499 --> 00:02:04.719
通过ProGuard和启用混淆

00:02:02.049 --> 00:02:07.600
这不仅会剥离任何标识符

00:02:04.719 --> 00:02:09.760
从您的代码中，他们还将执行

00:02:07.600 --> 00:02:12.940
缩小将优化您的

00:02:09.760 --> 00:02:14.510
代码并删除任何潜在的未使用

00:02:12.940 --> 00:02:16.310
资源

00:02:14.510 --> 00:02:18.879
在模块内部

00:02:16.310 --> 00:02:22.720
您将找到的build.gradle文件

00:02:18.879 --> 00:02:25.760
发布版本的配置和

00:02:22.720 --> 00:02:27.920
而不是在这里启用

00:02:25.760 --> 00:02:32.510
发布构建我们要做的只是

00:02:27.920 --> 00:02:34.730
在我们自己的调试中复制此内容

00:02:32.510 --> 00:02:36.379
配置，所以我们假装

00:02:34.730 --> 00:02:38.360
我们实际上没有发布这个

00:02:36.379 --> 00:02:41.629
签名整个过程

00:02:38.360 --> 00:02:44.480
通过所有这些适应如果我们设置

00:02:41.629 --> 00:02:47.299
这是真的然后这将启用

00:02:44.480 --> 00:02:50.629
 ProGuard，我们必须将其指向

00:02:47.299 --> 00:02:53.480
此处的所有ProGuard配置文件

00:02:50.629 --> 00:02:55.760
您会为此找到ProGuard规则

00:02:53.480 --> 00:02:57.620
构建，您可以添加更多规则

00:02:55.760 --> 00:03:00.319
一堆文件和规则

00:02:57.620 --> 00:03:03.019
用于ProGuard进行配置

00:03:00.319 --> 00:03:05.720
执行混淆过程

00:03:03.019 --> 00:03:08.989
现在让我们沉没这个Gradle项目

00:03:05.720 --> 00:03:12.230
看看当我们引入一个

00:03:08.989 --> 00:03:13.909
我们代码中的新异常，所以我

00:03:12.230 --> 00:03:16.670
要去做这件事

00:03:13.909 --> 00:03:24.919
文件，我只是要扔一个

00:03:16.670 --> 00:03:27.980
手动例外，我要去做一个

00:03:24.919 --> 00:03:30.739
多做些事情，并为ProGuard添加一些规则

00:03:27.980 --> 00:03:33.620
告诉它保留行号

00:03:30.739 --> 00:03:37.069
表，然后继续运行

00:03:33.620 --> 00:03:39.049
应用程序现在将部署

00:03:37.069 --> 00:03:41.840
人工仿真器，我们将

00:03:39.049 --> 00:03:44.120
通过DDMS连接到它以查看

00:03:41.840 --> 00:03:46.910
登录，您会看到

00:03:44.120 --> 00:03:50.840
我们添加的nullpointerexception有

00:03:46.910 --> 00:03:53.810
刚刚被抛出，所以我们可以将其复制为

00:03:50.840 --> 00:03:57.260
现在，如果我们要分析堆栈的纯文本

00:03:53.810 --> 00:03:59.900
跟踪它将粘贴我们的

00:03:57.260 --> 00:04:02.629
系统剪贴板，我们可以使用

00:03:59.900 --> 00:04:05.810
解密器和映射

00:04:02.629 --> 00:04:09.069
 ProGuard生成的文件找到此文件

00:04:05.810 --> 00:04:13.699
在您的模块下

00:04:09.069 --> 00:04:17.919
您可以输出输出映射目录

00:04:13.699 --> 00:04:21.560
选择，现在您可以继续

00:04:17.919 --> 00:04:23.750
现在分析堆栈跟踪那些行

00:04:21.560 --> 00:04:27.250
从我们混淆后的堆栈跟踪中

00:04:23.750 --> 00:04:30.010
完全合格的重建

00:04:27.250 --> 00:04:32.580
和方法名称正确

00:04:30.010 --> 00:04:35.620
包，我们可以导航到那些

00:04:32.580 --> 00:04:39.010
直接从堆栈跟踪

00:04:35.620 --> 00:04:42.460
分析器向我们展示该异常情况

00:04:39.010 --> 00:04:44.740
被抛出，所以如果您正在编写代码

00:04:42.460 --> 00:04:46.720
分发给一大群

00:04:44.740 --> 00:04:48.430
最终用户，这是一个很好的方法

00:04:46.720 --> 00:04:50.470
保护您的源代码并

00:04:48.430 --> 00:04:54.070
防止其被编译

00:04:50.470 --> 00:04:56.610
从您刚刚拥有的编译工件中

00:04:54.070 --> 00:04:59.830
小心地保留一份副本

00:04:56.610 --> 00:05:02.230
 ProGuard为每个生成的映射

00:04:59.830 --> 00:05:04.420
您的主要版本，以便您可以去

00:05:02.230 --> 00:05:07.330
返回并分析您的任何堆栈跟踪

00:05:04.420 --> 00:05:09.610
可能会收到一个工具

00:05:07.330 --> 00:05:11.530
 Android称为retrace，它将允许

00:05:09.610 --> 00:05:13.620
您在命令上执行相同的操作

00:05:11.530 --> 00:05:13.620
线

