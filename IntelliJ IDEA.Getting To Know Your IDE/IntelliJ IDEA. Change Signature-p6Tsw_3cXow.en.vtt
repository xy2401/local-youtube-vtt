WEBVTT
Kind: captions
Language: en

00:00:02.739 --> 00:00:05.050 align:start position:0%
 
one<00:00:03.739><c> common</c><00:00:04.130><c> refactoring</c><00:00:04.730><c> that</c><00:00:04.880><c> you'll</c>

00:00:05.050 --> 00:00:05.060 align:start position:0%
one common refactoring that you'll
 

00:00:05.060 --> 00:00:07.000 align:start position:0%
one common refactoring that you'll
encounter<00:00:05.180><c> particularly</c><00:00:05.960><c> often</c><00:00:06.110><c> when</c>

00:00:07.000 --> 00:00:07.010 align:start position:0%
encounter particularly often when
 

00:00:07.010 --> 00:00:09.369 align:start position:0%
encounter particularly often when
changing<00:00:07.490><c> your</c><00:00:07.610><c> code</c><00:00:08.000><c> is</c><00:00:08.300><c> modifying</c><00:00:09.110><c> an</c>

00:00:09.369 --> 00:00:09.379 align:start position:0%
changing your code is modifying an
 

00:00:09.379 --> 00:00:11.949 align:start position:0%
changing your code is modifying an
existing<00:00:09.559><c> method</c><00:00:10.400><c> signature</c><00:00:11.030><c> so</c><00:00:11.719><c> if</c><00:00:11.839><c> you'd</c>

00:00:11.949 --> 00:00:11.959 align:start position:0%
existing method signature so if you'd
 

00:00:11.959 --> 00:00:14.169 align:start position:0%
existing method signature so if you'd
like<00:00:12.079><c> to</c><00:00:12.200><c> add</c><00:00:12.349><c> a</c><00:00:12.379><c> new</c><00:00:12.769><c> parameter</c><00:00:12.950><c> or</c><00:00:13.639><c> change</c>

00:00:14.169 --> 00:00:14.179 align:start position:0%
like to add a new parameter or change
 

00:00:14.179 --> 00:00:16.119 align:start position:0%
like to add a new parameter or change
the<00:00:14.419><c> return</c><00:00:14.570><c> type</c><00:00:15.049><c> for</c><00:00:15.079><c> an</c><00:00:15.379><c> existing</c><00:00:15.769><c> method</c>

00:00:16.119 --> 00:00:16.129 align:start position:0%
the return type for an existing method
 

00:00:16.129 --> 00:00:18.310 align:start position:0%
the return type for an existing method
then<00:00:16.340><c> that</c><00:00:16.490><c> process</c><00:00:17.000><c> might</c><00:00:17.570><c> touch</c><00:00:17.840><c> several</c>

00:00:18.310 --> 00:00:18.320 align:start position:0%
then that process might touch several
 

00:00:18.320 --> 00:00:20.650 align:start position:0%
then that process might touch several
methods<00:00:18.680><c> and</c><00:00:18.890><c> there</c><00:00:19.430><c> collies</c><00:00:19.910><c> and</c><00:00:20.210><c> so</c><00:00:20.360><c> forth</c>

00:00:20.650 --> 00:00:20.660 align:start position:0%
methods and there collies and so forth
 

00:00:20.660 --> 00:00:23.170 align:start position:0%
methods and there collies and so forth
so<00:00:21.260><c> for</c><00:00:21.440><c> example</c><00:00:21.830><c> in</c><00:00:22.130><c> this</c><00:00:22.400><c> scenario</c><00:00:22.910><c> if</c><00:00:23.060><c> I'd</c>

00:00:23.170 --> 00:00:23.180 align:start position:0%
so for example in this scenario if I'd
 

00:00:23.180 --> 00:00:25.330 align:start position:0%
so for example in this scenario if I'd
like<00:00:23.300><c> to</c><00:00:23.360><c> add</c><00:00:23.600><c> a</c><00:00:23.630><c> new</c><00:00:23.810><c> string</c><00:00:24.380><c> parameter</c><00:00:24.950><c> name</c>

00:00:25.330 --> 00:00:25.340 align:start position:0%
like to add a new string parameter name
 

00:00:25.340 --> 00:00:28.510 align:start position:0%
like to add a new string parameter name
to<00:00:26.150><c> the</c><00:00:26.330><c> method</c><00:00:26.660><c> Baz</c><00:00:26.900><c> then</c><00:00:27.770><c> I</c><00:00:28.130><c> need</c><00:00:28.490><c> to</c>

00:00:28.510 --> 00:00:28.520 align:start position:0%
to the method Baz then I need to
 

00:00:28.520 --> 00:00:31.120 align:start position:0%
to the method Baz then I need to
propagate<00:00:28.880><c> that</c><00:00:29.330><c> parameter</c><00:00:29.660><c> up</c><00:00:30.289><c> the</c><00:00:30.830><c> call</c>

00:00:31.120 --> 00:00:31.130 align:start position:0%
propagate that parameter up the call
 

00:00:31.130 --> 00:00:34.870 align:start position:0%
propagate that parameter up the call
stack<00:00:31.700><c> here</c><00:00:32.210><c> any</c><00:00:32.780><c> khaalis</c><00:00:33.320><c> of</c><00:00:33.500><c> Baz</c><00:00:33.710><c> bar</c><00:00:34.550><c> and</c>

00:00:34.870 --> 00:00:34.880 align:start position:0%
stack here any khaalis of Baz bar and
 

00:00:34.880 --> 00:00:37.210 align:start position:0%
stack here any khaalis of Baz bar and
who<00:00:35.240><c> will</c><00:00:36.050><c> need</c><00:00:36.200><c> to</c><00:00:36.290><c> supply</c><00:00:36.560><c> a</c><00:00:36.650><c> new</c><00:00:36.920><c> parameter</c>

00:00:37.210 --> 00:00:37.220 align:start position:0%
who will need to supply a new parameter
 

00:00:37.220 --> 00:00:40.660 align:start position:0%
who will need to supply a new parameter
name<00:00:38.470><c> since</c><00:00:39.470><c> this</c><00:00:39.620><c> type</c><00:00:39.829><c> of</c><00:00:39.860><c> refactoring</c><00:00:40.579><c> is</c>

00:00:40.660 --> 00:00:40.670 align:start position:0%
name since this type of refactoring is
 

00:00:40.670 --> 00:00:43.630 align:start position:0%
name since this type of refactoring is
so<00:00:40.880><c> common</c><00:00:41.390><c> there's</c><00:00:42.020><c> a</c><00:00:42.110><c> dedicated</c><00:00:42.560><c> tool</c><00:00:42.980><c> which</c>

00:00:43.630 --> 00:00:43.640 align:start position:0%
so common there's a dedicated tool which
 

00:00:43.640 --> 00:00:45.819 align:start position:0%
so common there's a dedicated tool which
you<00:00:43.670><c> can</c><00:00:43.760><c> find</c><00:00:44.150><c> in</c><00:00:44.300><c> your</c><00:00:44.329><c> factor</c><00:00:44.960><c> menu</c><00:00:45.380><c> called</c>

00:00:45.819 --> 00:00:45.829 align:start position:0%
you can find in your factor menu called
 

00:00:45.829 --> 00:00:47.830 align:start position:0%
you can find in your factor menu called
change<00:00:46.220><c> signature</c><00:00:46.910><c> that</c><00:00:47.239><c> will</c><00:00:47.360><c> allow</c><00:00:47.630><c> you</c><00:00:47.690><c> to</c>

00:00:47.830 --> 00:00:47.840 align:start position:0%
change signature that will allow you to
 

00:00:47.840 --> 00:00:51.100 align:start position:0%
change signature that will allow you to
add<00:00:48.079><c> parameters</c><00:00:48.710><c> to</c><00:00:48.890><c> existing</c><00:00:49.370><c> methods</c><00:00:50.110><c> and</c>

00:00:51.100 --> 00:00:51.110 align:start position:0%
add parameters to existing methods and
 

00:00:51.110 --> 00:00:53.139 align:start position:0%
add parameters to existing methods and
if<00:00:51.470><c> desired</c><00:00:51.680><c> propagate</c><00:00:52.670><c> those</c><00:00:52.880><c> same</c>

00:00:53.139 --> 00:00:53.149 align:start position:0%
if desired propagate those same
 

00:00:53.149 --> 00:00:57.310 align:start position:0%
if desired propagate those same
parameters<00:00:53.660><c> up</c><00:00:54.140><c> the</c><00:00:54.470><c> call</c><00:00:54.710><c> hierarchy</c><00:00:56.079><c> at</c><00:00:57.079><c> any</c>

00:00:57.310 --> 00:00:57.320 align:start position:0%
parameters up the call hierarchy at any
 

00:00:57.320 --> 00:01:02.979 align:start position:0%
parameters up the call hierarchy at any
Colley's<00:00:57.860><c> of</c><00:00:58.370><c> the</c><00:00:59.180><c> method</c><00:01:01.360><c> if</c><00:01:02.360><c> we</c><00:01:02.600><c> apply</c><00:01:02.930><c> this</c>

00:01:02.979 --> 00:01:02.989 align:start position:0%
Colley's of the method if we apply this
 

00:01:02.989 --> 00:01:05.680 align:start position:0%
Colley's of the method if we apply this
refactoring<00:01:03.879><c> then</c><00:01:04.879><c> you</c><00:01:05.030><c> can</c><00:01:05.180><c> see</c><00:01:05.420><c> that</c><00:01:05.600><c> that</c>

00:01:05.680 --> 00:01:05.690 align:start position:0%
refactoring then you can see that that
 

00:01:05.690 --> 00:01:08.320 align:start position:0%
refactoring then you can see that that
same<00:01:06.020><c> parameter</c><00:01:06.590><c> has</c><00:01:06.920><c> been</c><00:01:07.190><c> added</c><00:01:07.610><c> through</c>

00:01:08.320 --> 00:01:08.330 align:start position:0%
same parameter has been added through
 

00:01:08.330 --> 00:01:10.780 align:start position:0%
same parameter has been added through
the<00:01:08.450><c> entire</c><00:01:08.810><c> call</c><00:01:09.110><c> hierarchy</c><00:01:09.409><c> including</c><00:01:10.280><c> any</c>

00:01:10.780 --> 00:01:10.790 align:start position:0%
the entire call hierarchy including any
 

00:01:10.790 --> 00:01:13.060 align:start position:0%
the entire call hierarchy including any
intermediate<00:01:11.420><c> methods</c><00:01:11.810><c> to</c><00:01:12.409><c> reach</c><00:01:12.560><c> its</c><00:01:12.770><c> final</c>

00:01:13.060 --> 00:01:13.070 align:start position:0%
intermediate methods to reach its final
 

00:01:13.070 --> 00:01:16.120 align:start position:0%
intermediate methods to reach its final
destination<00:01:13.220><c> here</c><00:01:14.180><c> boss</c><00:01:14.770><c> you</c><00:01:15.770><c> can</c><00:01:15.920><c> do</c><00:01:16.010><c> the</c>

00:01:16.120 --> 00:01:16.130 align:start position:0%
destination here boss you can do the
 

00:01:16.130 --> 00:01:19.630 align:start position:0%
destination here boss you can do the
same<00:01:16.400><c> with</c><00:01:17.060><c> exceptions</c><00:01:18.130><c> so</c><00:01:19.130><c> you</c><00:01:19.220><c> can</c><00:01:19.430><c> choose</c>

00:01:19.630 --> 00:01:19.640 align:start position:0%
same with exceptions so you can choose
 

00:01:19.640 --> 00:01:21.760 align:start position:0%
same with exceptions so you can choose
where<00:01:20.000><c> in</c><00:01:20.180><c> the</c><00:01:20.270><c> call</c><00:01:20.479><c> hierarchy</c><00:01:20.780><c> it's</c><00:01:21.650><c> like</c><00:01:21.740><c> a</c>

00:01:21.760 --> 00:01:21.770 align:start position:0%
where in the call hierarchy it's like a
 

00:01:21.770 --> 00:01:24.250 align:start position:0%
where in the call hierarchy it's like a
particular<00:01:22.010><c> exception</c><00:01:22.549><c> to</c><00:01:23.420><c> be</c><00:01:23.659><c> caught</c><00:01:23.990><c> or</c>

00:01:24.250 --> 00:01:24.260 align:start position:0%
particular exception to be caught or
 

00:01:24.260 --> 00:01:30.730 align:start position:0%
particular exception to be caught or
wreath<00:01:24.650><c> thrown</c><00:01:29.020><c> likewise</c><00:01:30.020><c> when</c><00:01:30.260><c> you</c><00:01:30.290><c> remove</c>

00:01:30.730 --> 00:01:30.740 align:start position:0%
wreath thrown likewise when you remove
 

00:01:30.740 --> 00:01:32.679 align:start position:0%
wreath thrown likewise when you remove
an<00:01:30.860><c> element</c><00:01:31.010><c> from</c><00:01:31.340><c> a</c><00:01:31.520><c> method</c><00:01:31.820><c> signature</c><00:01:32.299><c> for</c>

00:01:32.679 --> 00:01:32.689 align:start position:0%
an element from a method signature for
 

00:01:32.689 --> 00:01:35.770 align:start position:0%
an element from a method signature for
example<00:01:33.140><c> this</c><00:01:33.860><c> parameter</c><00:01:34.460><c> then</c><00:01:35.420><c> will</c><00:01:35.570><c> offer</c>

00:01:35.770 --> 00:01:35.780 align:start position:0%
example this parameter then will offer
 

00:01:35.780 --> 00:01:38.980 align:start position:0%
example this parameter then will offer
to<00:01:36.290><c> propagate</c><00:01:36.920><c> those</c><00:01:37.250><c> changes</c><00:01:37.820><c> up</c><00:01:38.030><c> through</c>

00:01:38.980 --> 00:01:38.990 align:start position:0%
to propagate those changes up through
 

00:01:38.990 --> 00:01:42.760 align:start position:0%
to propagate those changes up through
the<00:01:39.200><c> call</c><00:01:39.380><c> hierarchy</c><00:01:39.680><c> as</c><00:01:40.010><c> well</c><00:01:41.380><c> the</c><00:01:42.380><c> change</c>

00:01:42.760 --> 00:01:42.770 align:start position:0%
the call hierarchy as well the change
 

00:01:42.770 --> 00:01:44.859 align:start position:0%
the call hierarchy as well the change
signature<00:01:43.460><c> of</c><00:01:43.640><c> factoring</c><00:01:44.060><c> makes</c><00:01:44.330><c> it</c><00:01:44.509><c> easy</c><00:01:44.689><c> to</c>

00:01:44.859 --> 00:01:44.869 align:start position:0%
signature of factoring makes it easy to
 

00:01:44.869 --> 00:01:47.890 align:start position:0%
signature of factoring makes it easy to
add<00:01:45.380><c> parameters</c><00:01:46.100><c> to</c><00:01:46.520><c> an</c><00:01:46.670><c> existing</c><00:01:47.240><c> method</c><00:01:47.570><c> and</c>

00:01:47.890 --> 00:01:47.900 align:start position:0%
add parameters to an existing method and
 

00:01:47.900 --> 00:01:51.399 align:start position:0%
add parameters to an existing method and
make<00:01:48.590><c> changes</c><00:01:49.220><c> to</c><00:01:49.280><c> methods</c><00:01:49.970><c> signature</c><00:01:50.570><c> in</c><00:01:50.840><c> the</c>

00:01:51.399 --> 00:01:51.409 align:start position:0%
make changes to methods signature in the
 

00:01:51.409 --> 00:01:54.100 align:start position:0%
make changes to methods signature in the
context<00:01:52.009><c> of</c><00:01:52.189><c> a</c><00:01:52.369><c> large</c><00:01:52.640><c> project</c><00:01:53.110><c> without</c>

00:01:54.100 --> 00:01:54.110 align:start position:0%
context of a large project without
 

00:01:54.110 --> 00:01:56.020 align:start position:0%
context of a large project without
having<00:01:54.409><c> to</c><00:01:54.500><c> chase</c><00:01:54.740><c> down</c><00:01:55.009><c> all</c><00:01:55.310><c> of</c><00:01:55.520><c> the</c><00:01:55.670><c> methods</c>

00:01:56.020 --> 00:01:56.030 align:start position:0%
having to chase down all of the methods
 

00:01:56.030 --> 00:02:02.520 align:start position:0%
having to chase down all of the methods
references<00:01:56.689><c> and</c><00:01:56.960><c> collies</c><00:01:57.770><c> and</c><00:01:58.100><c> so</c><00:01:58.280><c> forth</c>

00:02:02.520 --> 00:02:02.530 align:start position:0%
 
 

00:02:02.530 --> 00:02:04.590 align:start position:0%
 
you

