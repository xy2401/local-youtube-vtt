WEBVTT
Kind: captions
Language: zh-Hans

00:00:03.290 --> 00:00:08.790
现在让我们谈谈检查

00:00:06.720 --> 00:00:11.490
检查类似于

00:00:08.790 --> 00:00:13.910
他们检测和纠正的很多方法

00:00:11.490 --> 00:00:16.529
键入时出现异常代码

00:00:13.910 --> 00:00:18.779
有时它们可​​能不显示

00:00:16.529 --> 00:00:21.539
在编辑器中，因此您可能必须

00:00:18.779 --> 00:00:25.470
直接调用检查，您

00:00:21.539 --> 00:00:27.869
可以通过按alt shift来做到这一点

00:00:25.470 --> 00:00:31.289
您在检查配置文件中查看

00:00:27.869 --> 00:00:33.090
此特定文件的结果，您将

00:00:31.289 --> 00:00:36.870
看到有一些不是

00:00:33.090 --> 00:00:38.730
在编辑器中突出显示，因此

00:00:36.870 --> 00:00:42.180
是我可以简化的几个

00:00:38.730 --> 00:00:43.670
例如，如果有条件

00:00:42.180 --> 00:00:47.670
让我们来看看其中的一些

00:00:43.670 --> 00:00:50.940
声明冗余，所以看起来

00:00:47.670 --> 00:00:52.969
像这样的类可以声明包装

00:00:50.940 --> 00:00:55.829
当地的，所以如果我想申请

00:00:52.969 --> 00:00:58.800
然后我可以右键单击并选择

00:00:55.829 --> 00:01:01.280
将课程包设为本地，因为它不是

00:00:58.800 --> 00:01:04.680
在此包装之外使用

00:01:01.280 --> 00:01:07.140
很高兴打电话给IntelliJ，所以第二件事

00:01:04.680 --> 00:01:09.840
它使用默认的文件模板吗

00:01:07.140 --> 00:01:12.060
可以选择编辑该模板

00:01:09.840 --> 00:01:19.860
就像使用速度模板

00:01:12.060 --> 00:01:22.770
语言，一旦我应用了

00:01:19.860 --> 00:01:25.170
自动将其添加到文件中

00:01:22.770 --> 00:01:27.390
您可以单独运行的标头

00:01:25.170 --> 00:01:31.290
还要按名称检查

00:01:27.390 --> 00:01:33.360
 ctrl alt shift I，然后输入

00:01:31.290 --> 00:01:40.979
您想要的检查名称

00:01:33.360 --> 00:01:44.100
调用我可以指定的范围

00:01:40.979 --> 00:01:47.310
检查并配置任何文件名

00:01:44.100 --> 00:01:49.500
我要添加的过滤器

00:01:47.310 --> 00:01:52.740
自动默认为源代码

00:01:49.500 --> 00:01:54.420
项目类型的扩展名

00:01:52.740 --> 00:01:57.030
让我们来看看一些

00:01:54.420 --> 00:02:00.329
检查，以帮助我们在

00:01:57.030 --> 00:02:02.790
 Java中的不同语言级别，因此

00:02:00.329 --> 00:02:05.280
我这里有旧的Java语法

00:02:02.790 --> 00:02:07.590
用于声明匿名内部类

00:02:05.280 --> 00:02:10.709
我在这里能做的就是替换这个

00:02:07.590 --> 00:02:13.290
用lambda，所以这会

00:02:10.709 --> 00:02:16.530
自动为我重构

00:02:13.290 --> 00:02:18.780
我可以将其扩展为包括

00:02:16.530 --> 00:02:21.569
表达主体，所以这将

00:02:18.780 --> 00:02:25.260
只需加上一些括号我也可以做

00:02:21.569 --> 00:02:28.140
通过使用

00:02:25.260 --> 00:02:30.599
 Java 8中的新流，所以如果我替换

00:02:28.140 --> 00:02:32.579
每个循环都有一个，然后

00:02:30.599 --> 00:02:35.129
自动重构代码以使用

00:02:32.579 --> 00:02:38.549
 Streams API的另一个重要功能

00:02:35.129 --> 00:02:42.239
检查是无效推断，因此

00:02:38.549 --> 00:02:45.120
如果您调用某种可能

00:02:42.239 --> 00:02:48.120
可能返回null或被保证

00:02:45.120 --> 00:02:51.209
永远不会返回空值，然后它将警告

00:02:48.120 --> 00:02:54.450
我的事实，因为这总是

00:02:51.209 --> 00:02:55.950
如果我们导航到此方法，则返回false 

00:02:54.450 --> 00:02:58.650
您可以看到其中有一个注释

00:02:55.950 --> 00:03:02.639
在排水沟里，这永远不会

00:02:58.650 --> 00:03:05.099
返回一个空引用，所以这里的ID 

00:03:02.639 --> 00:03:07.079
正确地告诉我，这永远不会

00:03:05.099 --> 00:03:08.299
将为空，所以我可以删除它，如果

00:03:07.079 --> 00:03:11.040
声明无任何顾虑

00:03:08.299 --> 00:03:14.549
另外，如果有一种方法

00:03:11.040 --> 00:03:18.060
从来没有期望这个论证是“否” 

00:03:14.549 --> 00:03:21.060
我从未明确告诉编译器

00:03:18.060 --> 00:03:24.959
只是基于字节码分析

00:03:21.060 --> 00:03:28.549
 IDE看到的第一件事是

00:03:24.959 --> 00:03:33.120
在这里对此参数调用一些方法

00:03:28.549 --> 00:03:35.879
然后它会告诉我说

00:03:33.120 --> 00:03:37.829
我传递的是null而且我不

00:03:35.879 --> 00:03:40.199
需要做任何事情才能得到这个

00:03:37.829 --> 00:03:42.959
为这些和其他工作

00:03:40.199 --> 00:03:47.220
您可以在IDE中进行检查

00:03:42.959 --> 00:03:49.530
在项目上配置它们或默认

00:03:47.220 --> 00:03:52.410
水平，如果你能找到它

00:03:49.530 --> 00:03:54.629
项目级别它将保存在

00:03:52.410 --> 00:03:56.519
您保存的项目设置

00:03:54.629 --> 00:03:59.400
默认级别，然后将其保存

00:03:56.519 --> 00:04:01.349
使用您的IDE设置，因此对于所有

00:03:59.400 --> 00:04:04.079
这些检查应该有一个

00:04:01.349 --> 00:04:07.260
说明或一些示例代码

00:04:04.079 --> 00:04:09.329
尝试了解有关的更多信息

00:04:07.260 --> 00:04:11.790
数百种代码检查可用

00:04:09.329 --> 00:04:13.560
在IntelliJ IDEA中查看我们得到的

00:04:11.790 --> 00:04:16.799
开始页面，别忘了

00:04:13.560 --> 00:04:21.530
在日志JetBrains上订阅我们的博客

00:04:16.799 --> 00:04:21.530
斜杠想法

