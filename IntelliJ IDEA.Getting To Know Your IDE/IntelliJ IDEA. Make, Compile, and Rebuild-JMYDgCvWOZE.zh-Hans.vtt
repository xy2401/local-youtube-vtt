WEBVTT
Kind: captions
Language: zh-Hans

00:00:03.350 --> 00:00:08.189
好的，所以在本课中我想谈一谈

00:00:05.519 --> 00:00:10.949
关于三件事进行编译和

00:00:08.189 --> 00:00:13.410
重建你可以在这里看到我有一个

00:00:10.949 --> 00:00:15.869
这个项目中有三个项目

00:00:13.410 --> 00:00:18.539
单独的模块，在每个模块中

00:00:15.869 --> 00:00:21.530
我有一些类的模块一些来源

00:00:18.539 --> 00:00:24.000
我放在其中的文件

00:00:21.530 --> 00:00:26.640
假设我们想建立一个班级

00:00:24.000 --> 00:00:29.070
在我们的主要模块中说

00:00:26.640 --> 00:00:30.420
渡槽课程我打开AquaDuck 

00:00:29.070 --> 00:00:33.660
上课你可以看到那里什么都没有

00:00:30.420 --> 00:00:37.109
只是为了演示我会按下控制键

00:00:33.660 --> 00:00:39.600
转移f9来编译此类

00:00:37.109 --> 00:00:42.569
您也可以在内部版本中找到

00:00:39.600 --> 00:00:45.449
这里的菜单，所以我正在编译

00:00:42.569 --> 00:00:47.399
特定的课程，因此您可以在

00:00:45.449 --> 00:00:50.309
如果打开此目录，则在此处输出目录

00:00:47.399 --> 00:00:53.429
你有AquaDuck课程，这是

00:00:50.309 --> 00:00:55.350
 d从类文件编译而来

00:00:53.429 --> 00:00:58.219
字节码在这里是红色并使用自定义

00:00:55.350 --> 00:01:00.600
 b编译器我们可以阅读源代码

00:00:58.219 --> 00:01:03.539
但是它并不直接使用

00:01:00.600 --> 00:01:05.519
现在在此文件中找到源

00:01:03.539 --> 00:01:08.039
构建整个模块，所以如果您打开

00:01:05.519 --> 00:01:10.500
再次打开构建菜单

00:01:08.039 --> 00:01:12.030
这个模块，它将做什么

00:01:10.500 --> 00:01:15.450
将参加所有的课程

00:01:12.030 --> 00:01:16.649
模块，然后编译它们，这将

00:01:15.450 --> 00:01:19.259
放在输出目录中

00:01:16.649 --> 00:01:21.689
在这里，你应该马上看到

00:01:19.259 --> 00:01:24.270
所以你可以在里面看到所有这些类

00:01:21.689 --> 00:01:26.579
这里的主要模块被编译为

00:01:24.270 --> 00:01:28.710
现在输出目录，我们说

00:01:26.579 --> 00:01:31.679
想要从添加依赖

00:01:28.710 --> 00:01:33.990
主模块到辅助模块

00:01:31.679 --> 00:01:35.670
所以我可以点击我这里的

00:01:33.990 --> 00:01:37.619
下的项目结构对话框

00:01:35.670 --> 00:01:41.189
依赖项，我将添加一个模块

00:01:37.619 --> 00:01:43.880
对辅助模块的依赖

00:01:41.189 --> 00:01:47.789
我将在此处单击“确定”，然后单击“立即申请” 

00:01:43.880 --> 00:01:50.460
观看如果我成为主要学生会怎样

00:01:47.789 --> 00:01:53.460
再次模块，所以如果我去这里，我单击

00:01:50.460 --> 00:01:56.070
构建，如果您看，我将制作此模块

00:01:53.460 --> 00:01:59.789
现在在输出目录中，您可以

00:01:56.070 --> 00:02:04.079
看到辅助模块现在

00:01:59.789 --> 00:02:07.229
现在与主要版本一起编译

00:02:04.079 --> 00:02:09.990
如果我们从

00:02:07.229 --> 00:02:12.420
第二模块到第三模块

00:02:09.990 --> 00:02:15.900
我做的事情与添加模块相同

00:02:12.420 --> 00:02:19.319
依赖这里我单击确定

00:02:15.900 --> 00:02:24.409
并申请，现在回到

00:02:19.319 --> 00:02:27.720
主模块并构建该模块

00:02:24.409 --> 00:02:31.370
然后会发生的是它将编译

00:02:27.720 --> 00:02:34.650
全部三个小学，中学

00:02:31.370 --> 00:02:36.720
递归，所以它将要做的是

00:02:34.650 --> 00:02:39.150
到内部最少依赖的模块

00:02:36.720 --> 00:02:42.180
您的依赖图，然后返回

00:02:39.150 --> 00:02:43.439
直到发现所有

00:02:42.180 --> 00:02:45.930
依赖关系，它可以建立你的

00:02:43.439 --> 00:02:49.440
整个项目现在要密切注意

00:02:45.930 --> 00:02:54.720
如果我进入第三模块的输出

00:02:49.440 --> 00:02:57.959
目录，我列出所有

00:02:54.720 --> 00:02:59.810
班级文件，然后您将看到

00:02:57.959 --> 00:03:03.989
时间戳就是全部

00:02:59.810 --> 00:03:08.639
 22:47现在我要非常小心

00:03:03.989 --> 00:03:14.099
这个渡槽类的任何变化都说我

00:03:08.639 --> 00:03:17.609
添加哈希码方法，然后保存

00:03:14.099 --> 00:03:20.760
然后我重新编译模块，所以我做了

00:03:17.609 --> 00:03:23.340
模块将仅制作那些文件

00:03:20.760 --> 00:03:27.299
在这种情况下，只有

00:03:23.340 --> 00:03:29.280
渡槽文件将被重新编译，所以如果我

00:03:27.299 --> 00:03:30.900
做这个的另一个清单

00:03:29.280 --> 00:03:34.489
时间戳完全相同

00:03:30.900 --> 00:03:40.340
在第三级输出目录中

00:03:34.489 --> 00:03:43.980
 22:47但是如果我去小学

00:03:40.340 --> 00:03:48.959
输出目录，我列出了

00:03:43.980 --> 00:03:51.479
这些仅渡槽类就有一个

00:03:48.959 --> 00:03:53.609
不同的时间戳，所以现在我们有一个

00:03:51.479 --> 00:03:56.040
关于到底是什么的非常清楚的想法

00:03:53.609 --> 00:03:57.930
在这种情况下，make仅具有

00:03:56.040 --> 00:04:01.739
重新编译那些具有

00:03:57.930 --> 00:04:06.000
改变和任何依赖

00:04:01.739 --> 00:04:08.549
递归类似地使模块

00:04:06.000 --> 00:04:11.129
项目将完全相同地做

00:04:08.549 --> 00:04:14.190
您整个的所有修改过的类

00:04:11.129 --> 00:04:17.130
项目以及他们所使用的任何源文件

00:04:14.190 --> 00:04:19.109
可能取决于现在，假设我们要

00:04:17.130 --> 00:04:21.060
重建整个项目这是什么

00:04:19.109 --> 00:04:23.400
会做的是它将清除整个

00:04:21.060 --> 00:04:25.979
输出目录并重建项目

00:04:23.400 --> 00:04:28.830
从头开始只是说明我们

00:04:25.979 --> 00:04:31.869
在这里创建一个新文件

00:04:28.830 --> 00:04:34.959
在输出目录中

00:04:31.869 --> 00:04:38.829
主模块，以便您可以看到这个新模块

00:04:34.959 --> 00:04:41.889
如果我们继续重建，请立即在此处提交

00:04:38.829 --> 00:04:44.610
这个项目的任何文物可能

00:04:41.889 --> 00:04:46.479
与旧版本相关联

00:04:44.610 --> 00:04:48.579
将被淘汰

00:04:46.479 --> 00:04:51.069
这样就完全消除了一切

00:04:48.579 --> 00:04:52.449
在输出目录中，因此请确保

00:04:51.069 --> 00:04:54.219
你没有什么重要的

00:04:52.449 --> 00:04:56.649
存储在这里，因为我们将被删除，所以

00:04:54.219 --> 00:04:58.689
涵盖了三个重要方面

00:04:56.649 --> 00:05:01.659
 IntelliJ IDEA中构建项目的过程

00:04:58.689 --> 00:05:03.219
使将重新编译任何源

00:05:01.659 --> 00:05:06.369
自上次以来发生了变化

00:05:03.219 --> 00:05:09.550
恭维，你可以做这个项目

00:05:06.369 --> 00:05:12.279
广泛或针对特定模块进行编译

00:05:09.550 --> 00:05:14.499
这将建立一个完全的类

00:05:12.279 --> 00:05:16.800
您选择的课程并重建

00:05:14.499 --> 00:05:18.999
将重新编译所有内容

00:05:16.800 --> 00:05:21.249
所以现在希望你有一个更好的主意

00:05:18.999 --> 00:05:22.779
三种不同的恭维类型

00:05:21.249 --> 00:05:25.539
以及在构建您的产品时如何使用它们

00:05:22.779 --> 00:05:27.959
项目感谢您的关注和发展

00:05:25.539 --> 00:05:27.959
荣幸

