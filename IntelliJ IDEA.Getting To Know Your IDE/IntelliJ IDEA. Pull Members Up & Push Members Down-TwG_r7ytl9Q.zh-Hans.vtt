WEBVTT
Kind: captions
Language: zh-Hans

00:00:03.040 --> 00:00:08.570
让我们来看看两个密切相关的

00:00:05.720 --> 00:00:11.360
 IntelliJ IDEA中的重构称为

00:00:08.570 --> 00:00:14.029
向上拉成员，向下拉成员

00:00:11.360 --> 00:00:16.670
对于先生保理，我要

00:00:14.029 --> 00:00:19.400
争取项目结构的帮助

00:00:16.670 --> 00:00:23.929
按一下即可显示的视图

00:00:19.400 --> 00:00:25.849
 Alt 7，这样您就可以看到我有一些

00:00:23.929 --> 00:00:28.669
内部类，让我们看一下

00:00:25.849 --> 00:00:30.560
仔细地布置这些

00:00:28.669 --> 00:00:33.160
选择父类a和

00:00:30.560 --> 00:00:37.460
按Ctrl HI可以看到它具有

00:00:33.160 --> 00:00:40.700
三个孩子BC和D 

00:00:37.460 --> 00:00:42.980
如果我想从现在延长到

00:00:40.700 --> 00:00:46.370
将以下一种或多种方法考虑在内

00:00:42.980 --> 00:00:49.210
儿童班，我可以通过

00:00:46.370 --> 00:00:53.870
在编辑器中选择方法，然后

00:00:49.210 --> 00:00:57.460
按ctrl alt shift t打开

00:00:53.870 --> 00:01:01.430
因素菜单，然后选择拉

00:00:57.460 --> 00:01:04.159
成员起来，我可以准确选择

00:01:01.430 --> 00:01:07.219
我想选择的方法

00:01:04.159 --> 00:01:08.960
他们然后打或现在因子

00:01:07.219 --> 00:01:11.810
每当我们应用这些类型的

00:01:08.960 --> 00:01:14.270
重构IntelliJ IDEA将搜索

00:01:11.810 --> 00:01:17.659
对于我们代码中的任何出现

00:01:14.270 --> 00:01:21.109
在哪里可以替换重复项，如果

00:01:17.659 --> 00:01:24.140
我选择替换它将自动

00:01:21.109 --> 00:01:24.909
使用从继承的方法

00:01:24.140 --> 00:01:28.100
超类

00:01:24.909 --> 00:01:30.020
在这些没有我的子类中

00:01:28.100 --> 00:01:31.780
不得不做其他事情让我们看看

00:01:30.020 --> 00:01:34.969
从头开始还有一个时间

00:01:31.780 --> 00:01:37.939
您可以看到B类有三个

00:01:34.969 --> 00:01:41.240
 C和D不知道的方法

00:01:37.939 --> 00:01:43.130
已经实现了与

00:01:41.240 --> 00:01:46.789
一旦考虑了这些方法

00:01:43.130 --> 00:01:49.039
通过将它们拉入IntelliJ IDEA 

00:01:46.789 --> 00:01:52.389
将提供替换那些重复的

00:01:49.039 --> 00:01:55.700
引用新的事件

00:01:52.389 --> 00:01:58.039
继承的方法同样有一个

00:01:55.700 --> 00:02:02.479
类似的因素推动了这些

00:01:58.039 --> 00:02:05.209
成员函数可以细分为子类

00:02:02.479 --> 00:02:08.469
我们选择测验成员并选择

00:02:05.209 --> 00:02:08.469
我们想要推动的成员

00:02:09.369 --> 00:02:13.599
它将警告我们任何潜在的

00:02:11.440 --> 00:02:18.190
冲突，您会看到所有

00:02:13.599 --> 00:02:19.930
 BC和D的子类现在具有

00:02:18.190 --> 00:02:22.239
每个单独的实现

00:02:19.930 --> 00:02:23.709
这些方法删除了功能

00:02:22.239 --> 00:02:25.930
从我们的超类

00:02:23.709 --> 00:02:28.269
所以这是两个重构

00:02:25.930 --> 00:02:30.970
使用方法时派上用场

00:02:28.269 --> 00:02:33.370
在类型层次结构中拉成员

00:02:30.970 --> 00:02:34.840
如果有的话就把成员推倒

00:02:33.370 --> 00:02:36.909
问题，请随时添加

00:02:34.840 --> 00:02:39.190
在下面的评论部分，我们将

00:02:36.909 --> 00:02:43.260
很高兴与您讨论他们，谢谢

00:02:39.190 --> 00:02:43.260
乐于观看和发展

