WEBVTT
Kind: captions
Language: zh-Hans

00:00:03.460 --> 00:00:08.600
智能完成IntelliJ IDEA 

00:00:06.410 --> 00:00:11.660
允许您过滤基本

00:00:08.600 --> 00:00:14.690
仅针对这些类型的完成列表，以及

00:00:11.660 --> 00:00:17.390
适用于

00:00:14.690 --> 00:00:20.869
周围的环境让我们看看

00:00:17.390 --> 00:00:23.750
调用智能完成功能时有效

00:00:20.869 --> 00:00:26.050
在变量初始值设定项或赋值中

00:00:23.750 --> 00:00:29.749
通过按控制移位来声明

00:00:26.050 --> 00:00:31.849
空格将枚举那些引用

00:00:29.749 --> 00:00:35.480
具有匹配的类型签名

00:00:31.849 --> 00:00:37.940
这是从这个角度来看所有的方法，如果我

00:00:35.480 --> 00:00:40.370
再次调用智能完成

00:00:37.940 --> 00:00:42.110
将拉入这些收藏列表，并

00:00:40.370 --> 00:00:45.680
它认为元素将在其中的数组

00:00:42.110 --> 00:00:48.800
如果我们最终匹配该类型签名

00:00:45.680 --> 00:00:50.330
最后一次调用智能类型

00:00:48.800 --> 00:00:52.810
将点运算符应用于每个

00:00:50.330 --> 00:00:54.740
一阶智能类型完成

00:00:52.810 --> 00:00:56.840
其次是另一种智能类型

00:00:54.740 --> 00:00:59.690
完成，因此有效地组成

00:00:56.840 --> 00:01:02.120
智能型带给您智能型

00:00:59.690 --> 00:01:04.519
字段中的所有方法引用

00:01:02.120 --> 00:01:09.530
签名与中的预期类型匹配

00:01:04.519 --> 00:01:11.240
现在的return语句还有一些

00:01:09.530 --> 00:01:14.840
可以实现智能完成的区域

00:01:11.240 --> 00:01:18.500
应用的参数列表，所以我

00:01:14.840 --> 00:01:20.480
调用一个我可以调用的函数

00:01:18.500 --> 00:01:24.830
每个参数的完成

00:01:20.480 --> 00:01:25.880
我正在传递给该功能， 

00:01:24.830 --> 00:01:28.040
你会注意到一些特别的东西

00:01:25.880 --> 00:01:29.750
您会看到这些条目的顺序

00:01:28.040 --> 00:01:32.000
他们不是按字典顺序

00:01:29.750 --> 00:01:34.400
因为智能类型不仅尝试

00:01:32.000 --> 00:01:47.600
匹配类型但也要匹配变量

00:01:34.400 --> 00:01:49.490
在参数列表中给定名称smart 

00:01:47.600 --> 00:01:51.920
完成也适用于

00:01:49.490 --> 00:01:55.400
返回方法的声明，所以当您

00:01:51.920 --> 00:01:57.530
输入return并调用智能完成

00:01:55.400 --> 00:02:00.280
再次它只会显示那些条目

00:01:57.530 --> 00:02:02.720
其类型与给定约束匹配

00:02:00.280 --> 00:02:04.970
在每种情况下，您都可以

00:02:02.720 --> 00:02:06.229
多次应用智能完成

00:02:04.970 --> 00:02:10.090
得到所有的二阶链

00:02:06.229 --> 00:02:12.529
具有正确返回类型的补全

00:02:10.090 --> 00:02:14.779
最后，您可以应用智能完成

00:02:12.529 --> 00:02:17.349
在新关键字之后

00:02:14.779 --> 00:02:17.349
声明一个对象

