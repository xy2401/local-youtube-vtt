WEBVTT
Kind: captions
Language: en

00:00:00.030 --> 00:00:02.119 align:start position:0%
 
in<00:00:00.900><c> this</c><00:00:01.170><c> video</c><00:00:01.439><c> we're</c><00:00:01.620><c> going</c><00:00:01.770><c> to</c><00:00:01.890><c> look</c><00:00:01.979><c> at</c>

00:00:02.119 --> 00:00:02.129 align:start position:0%
in this video we're going to look at
 

00:00:02.129 --> 00:00:04.100 align:start position:0%
in this video we're going to look at
creating<00:00:02.370><c> and</c><00:00:02.730><c> running</c><00:00:02.850><c> automated</c><00:00:03.419><c> tests</c><00:00:03.959><c> in</c>

00:00:04.100 --> 00:00:04.110 align:start position:0%
creating and running automated tests in
 

00:00:04.110 --> 00:00:06.530 align:start position:0%
creating and running automated tests in
IntelliJ<00:00:04.620><c> IDEA</c><00:00:04.890><c> and</c><00:00:05.160><c> how</c><00:00:05.940><c> to</c><00:00:06.000><c> get</c><00:00:06.180><c> coverage</c>

00:00:06.530 --> 00:00:06.540 align:start position:0%
IntelliJ IDEA and how to get coverage
 

00:00:06.540 --> 00:00:10.370 align:start position:0%
IntelliJ IDEA and how to get coverage
information<00:00:06.720><c> for</c><00:00:07.290><c> your</c><00:00:07.379><c> tests</c><00:00:09.139><c> IntelliJ</c><00:00:10.139><c> IDEA</c>

00:00:10.370 --> 00:00:10.380 align:start position:0%
information for your tests IntelliJ IDEA
 

00:00:10.380 --> 00:00:12.110 align:start position:0%
information for your tests IntelliJ IDEA
aims<00:00:10.559><c> to</c><00:00:10.769><c> make</c><00:00:10.889><c> it</c><00:00:11.010><c> as</c><00:00:11.130><c> easy</c><00:00:11.280><c> as</c><00:00:11.519><c> possible</c><00:00:11.670><c> to</c>

00:00:12.110 --> 00:00:12.120 align:start position:0%
aims to make it as easy as possible to
 

00:00:12.120 --> 00:00:15.110 align:start position:0%
aims to make it as easy as possible to
navigate<00:00:12.240><c> to</c><00:00:12.750><c> or</c><00:00:12.990><c> create</c><00:00:13.320><c> tests</c><00:00:13.799><c> so</c><00:00:14.610><c> if</c><00:00:14.730><c> I</c><00:00:14.849><c> try</c>

00:00:15.110 --> 00:00:15.120 align:start position:0%
navigate to or create tests so if I try
 

00:00:15.120 --> 00:00:17.000 align:start position:0%
navigate to or create tests so if I try
to<00:00:15.150><c> navigate</c><00:00:15.719><c> to</c><00:00:15.750><c> the</c><00:00:15.990><c> test</c><00:00:16.230><c> for</c><00:00:16.560><c> a</c><00:00:16.619><c> production</c>

00:00:17.000 --> 00:00:17.010 align:start position:0%
to navigate to the test for a production
 

00:00:17.010 --> 00:00:19.730 align:start position:0%
to navigate to the test for a production
class<00:00:17.220><c> and</c><00:00:17.490><c> the</c><00:00:17.550><c> IDE</c><00:00:17.880><c> can't</c><00:00:18.270><c> find</c><00:00:18.570><c> one</c><00:00:18.779><c> it</c><00:00:19.109><c> will</c>

00:00:19.730 --> 00:00:19.740 align:start position:0%
class and the IDE can't find one it will
 

00:00:19.740 --> 00:00:23.330 align:start position:0%
class and the IDE can't find one it will
ask<00:00:19.890><c> you</c><00:00:20.070><c> if</c><00:00:20.160><c> you</c><00:00:20.279><c> want</c><00:00:20.460><c> to</c><00:00:20.580><c> create</c><00:00:20.820><c> it</c><00:00:22.340><c> by</c>

00:00:23.330 --> 00:00:23.340 align:start position:0%
ask you if you want to create it by
 

00:00:23.340 --> 00:00:25.130 align:start position:0%
ask you if you want to create it by
default<00:00:23.789><c> you</c><00:00:24.119><c> have</c><00:00:24.150><c> several</c><00:00:24.570><c> options</c><00:00:24.750><c> for</c><00:00:25.019><c> the</c>

00:00:25.130 --> 00:00:25.140 align:start position:0%
default you have several options for the
 

00:00:25.140 --> 00:00:27.679 align:start position:0%
default you have several options for the
type<00:00:25.199><c> of</c><00:00:25.350><c> tests</c><00:00:25.710><c> to</c><00:00:25.859><c> create</c><00:00:26.330><c> we're</c><00:00:27.330><c> going</c><00:00:27.570><c> to</c>

00:00:27.679 --> 00:00:27.689 align:start position:0%
type of tests to create we're going to
 

00:00:27.689 --> 00:00:29.810 align:start position:0%
type of tests to create we're going to
use<00:00:27.810><c> J</c><00:00:28.019><c> and</c><00:00:28.199><c> 4</c><00:00:28.500><c> as</c><00:00:28.949><c> this</c><00:00:29.220><c> is</c><00:00:29.400><c> still</c><00:00:29.490><c> the</c><00:00:29.699><c> most</c>

00:00:29.810 --> 00:00:29.820 align:start position:0%
use J and 4 as this is still the most
 

00:00:29.820 --> 00:00:33.260 align:start position:0%
use J and 4 as this is still the most
common<00:00:29.970><c> framework</c><00:00:30.570><c> for</c><00:00:30.750><c> Java</c><00:00:31.019><c> unit</c><00:00:31.289><c> tests</c><00:00:32.270><c> you</c>

00:00:33.260 --> 00:00:33.270 align:start position:0%
common framework for Java unit tests you
 

00:00:33.270 --> 00:00:34.610 align:start position:0%
common framework for Java unit tests you
can<00:00:33.480><c> of</c><00:00:33.630><c> course</c><00:00:33.870><c> change</c><00:00:34.110><c> the</c><00:00:34.290><c> name</c><00:00:34.440><c> of</c><00:00:34.559><c> the</c>

00:00:34.610 --> 00:00:34.620 align:start position:0%
can of course change the name of the
 

00:00:34.620 --> 00:00:36.139 align:start position:0%
can of course change the name of the
test<00:00:34.800><c> if</c><00:00:34.980><c> you</c><00:00:35.070><c> wish</c><00:00:35.280><c> and</c><00:00:35.610><c> there</c><00:00:35.910><c> are</c><00:00:36.000><c> options</c>

00:00:36.139 --> 00:00:36.149 align:start position:0%
test if you wish and there are options
 

00:00:36.149 --> 00:00:37.670 align:start position:0%
test if you wish and there are options
for<00:00:36.390><c> generating</c><00:00:36.510><c> setup</c><00:00:37.350><c> and</c><00:00:37.530><c> teardown</c>

00:00:37.670 --> 00:00:37.680 align:start position:0%
for generating setup and teardown
 

00:00:37.680 --> 00:00:40.100 align:start position:0%
for generating setup and teardown
methods<00:00:38.280><c> all</c><00:00:38.910><c> tests</c><00:00:39.510><c> for</c><00:00:39.629><c> the</c><00:00:39.690><c> methods</c><00:00:39.989><c> in</c><00:00:40.079><c> the</c>

00:00:40.100 --> 00:00:40.110 align:start position:0%
methods all tests for the methods in the
 

00:00:40.110 --> 00:00:42.229 align:start position:0%
methods all tests for the methods in the
class<00:00:40.200><c> you're</c><00:00:40.559><c> testing</c><00:00:40.980><c> but</c><00:00:41.910><c> we're</c><00:00:42.030><c> going</c><00:00:42.149><c> to</c>

00:00:42.229 --> 00:00:42.239 align:start position:0%
class you're testing but we're going to
 

00:00:42.239 --> 00:00:45.770 align:start position:0%
class you're testing but we're going to
start<00:00:42.510><c> with</c><00:00:42.600><c> an</c><00:00:42.690><c> empty</c><00:00:42.840><c> test</c><00:00:43.140><c> class</c><00:00:44.600><c> you</c><00:00:45.600><c> can</c>

00:00:45.770 --> 00:00:45.780 align:start position:0%
start with an empty test class you can
 

00:00:45.780 --> 00:00:47.569 align:start position:0%
start with an empty test class you can
generate<00:00:46.079><c> a</c><00:00:46.140><c> new</c><00:00:46.260><c> test</c><00:00:46.649><c> method</c><00:00:46.739><c> using</c><00:00:47.280><c> command</c>

00:00:47.569 --> 00:00:47.579 align:start position:0%
generate a new test method using command
 

00:00:47.579 --> 00:00:51.220 align:start position:0%
generate a new test method using command
N<00:00:47.820><c> or</c><00:00:48.120><c> alt</c><00:00:48.570><c> an</c><00:00:48.750><c> insert</c><00:00:49.079><c> for</c><00:00:49.110><c> Windows</c><00:00:49.530><c> and</c><00:00:49.739><c> Linux</c>

00:00:51.220 --> 00:00:51.230 align:start position:0%
N or alt an insert for Windows and Linux
 

00:00:51.230 --> 00:00:53.479 align:start position:0%
N or alt an insert for Windows and Linux
IntelliJ<00:00:52.230><c> IDEA</c><00:00:52.469><c> makes</c><00:00:52.710><c> it</c><00:00:52.829><c> easy</c><00:00:53.039><c> for</c><00:00:53.160><c> you</c><00:00:53.370><c> to</c>

00:00:53.479 --> 00:00:53.489 align:start position:0%
IntelliJ IDEA makes it easy for you to
 

00:00:53.489 --> 00:00:55.119 align:start position:0%
IntelliJ IDEA makes it easy for you to
sketch<00:00:53.699><c> out</c><00:00:53.879><c> the</c><00:00:53.940><c> tests</c><00:00:54.300><c> you</c><00:00:54.449><c> want</c><00:00:54.570><c> to</c><00:00:54.750><c> write</c>

00:00:55.119 --> 00:00:55.129 align:start position:0%
sketch out the tests you want to write
 

00:00:55.129 --> 00:00:57.470 align:start position:0%
sketch out the tests you want to write
offering<00:00:56.129><c> the</c><00:00:56.219><c> usual</c><00:00:56.579><c> code</c><00:00:56.789><c> completion</c><00:00:57.210><c> and</c>

00:00:57.470 --> 00:00:57.480 align:start position:0%
offering the usual code completion and
 

00:00:57.480 --> 00:01:00.920 align:start position:0%
offering the usual code completion and
suggestions<00:00:59.180><c> when</c><00:01:00.180><c> you're</c><00:01:00.329><c> ready</c><00:01:00.510><c> to</c><00:01:00.660><c> run</c><00:01:00.809><c> the</c>

00:01:00.920 --> 00:01:00.930 align:start position:0%
suggestions when you're ready to run the
 

00:01:00.930 --> 00:01:02.569 align:start position:0%
suggestions when you're ready to run the
tests<00:01:01.320><c> you</c><00:01:01.800><c> can</c><00:01:01.949><c> do</c><00:01:02.039><c> this</c><00:01:02.160><c> a</c><00:01:02.190><c> number</c><00:01:02.280><c> of</c>

00:01:02.569 --> 00:01:02.579 align:start position:0%
tests you can do this a number of
 

00:01:02.579 --> 00:01:03.889 align:start position:0%
tests you can do this a number of
different<00:01:02.879><c> ways</c><00:01:03.030><c> which</c><00:01:03.539><c> will</c><00:01:03.719><c> show</c>

00:01:03.889 --> 00:01:03.899 align:start position:0%
different ways which will show
 

00:01:03.899 --> 00:01:06.380 align:start position:0%
different ways which will show
throughout<00:01:04.199><c> this</c><00:01:04.439><c> video</c><00:01:04.790><c> the</c><00:01:05.790><c> first</c><00:01:05.820><c> and</c>

00:01:06.380 --> 00:01:06.390 align:start position:0%
throughout this video the first and
 

00:01:06.390 --> 00:01:08.240 align:start position:0%
throughout this video the first and
probably<00:01:06.540><c> easiest</c><00:01:06.990><c> approach</c><00:01:07.350><c> is</c><00:01:07.799><c> to</c><00:01:08.040><c> use</c><00:01:08.070><c> the</c>

00:01:08.240 --> 00:01:08.250 align:start position:0%
probably easiest approach is to use the
 

00:01:08.250 --> 00:01:11.080 align:start position:0%
probably easiest approach is to use the
gutter<00:01:08.430><c> icon</c><00:01:08.850><c> on</c><00:01:09.000><c> the</c><00:01:09.090><c> test</c><00:01:09.299><c> method</c><00:01:09.630><c> to</c><00:01:09.750><c> run</c><00:01:09.900><c> it</c>

00:01:11.080 --> 00:01:11.090 align:start position:0%
gutter icon on the test method to run it
 

00:01:11.090 --> 00:01:14.149 align:start position:0%
gutter icon on the test method to run it
our<00:01:12.090><c> test</c><00:01:12.479><c> fails</c><00:01:12.780><c> as</c><00:01:13.110><c> we</c><00:01:13.229><c> expected</c><00:01:13.770><c> since</c><00:01:14.040><c> we</c>

00:01:14.149 --> 00:01:14.159 align:start position:0%
our test fails as we expected since we
 

00:01:14.159 --> 00:01:15.530 align:start position:0%
our test fails as we expected since we
haven't<00:01:14.400><c> implemented</c><00:01:14.700><c> the</c><00:01:14.909><c> functionality</c>

00:01:15.530 --> 00:01:15.540 align:start position:0%
haven't implemented the functionality
 

00:01:15.540 --> 00:01:18.499 align:start position:0%
haven't implemented the functionality
yet<00:01:16.549><c> IntelliJ</c><00:01:17.549><c> IDEA</c><00:01:17.759><c> shows</c><00:01:18.030><c> you</c><00:01:18.180><c> the</c><00:01:18.299><c> failure</c>

00:01:18.499 --> 00:01:18.509 align:start position:0%
yet IntelliJ IDEA shows you the failure
 

00:01:18.509 --> 00:01:21.289 align:start position:0%
yet IntelliJ IDEA shows you the failure
why<00:01:19.350><c> it</c><00:01:19.409><c> failed</c><00:01:19.770><c> and</c><00:01:20.130><c> offers</c><00:01:20.850><c> a</c><00:01:20.880><c> detailed</c>

00:01:21.289 --> 00:01:21.299 align:start position:0%
why it failed and offers a detailed
 

00:01:21.299 --> 00:01:22.850 align:start position:0%
why it failed and offers a detailed
comparison<00:01:21.630><c> between</c><00:01:22.020><c> actual</c><00:01:22.619><c> and</c><00:01:22.770><c> expected</c>

00:01:22.850 --> 00:01:22.860 align:start position:0%
comparison between actual and expected
 

00:01:22.860 --> 00:01:25.190 align:start position:0%
comparison between actual and expected
values<00:01:23.580><c> which</c><00:01:24.210><c> is</c><00:01:24.360><c> very</c><00:01:24.540><c> useful</c><00:01:24.750><c> for</c><00:01:25.080><c> more</c>

00:01:25.190 --> 00:01:25.200 align:start position:0%
values which is very useful for more
 

00:01:25.200 --> 00:01:28.160 align:start position:0%
values which is very useful for more
complex<00:01:25.590><c> values</c><00:01:26.009><c> such</c><00:01:26.580><c> as</c><00:01:26.610><c> JSON</c><00:01:27.150><c> or</c><00:01:27.360><c> complex</c>

00:01:28.160 --> 00:01:28.170 align:start position:0%
complex values such as JSON or complex
 

00:01:28.170 --> 00:01:30.920 align:start position:0%
complex values such as JSON or complex
domain<00:01:28.500><c> objects</c><00:01:29.180><c> we</c><00:01:30.180><c> can</c><00:01:30.210><c> navigate</c><00:01:30.479><c> back</c><00:01:30.869><c> to</c>

00:01:30.920 --> 00:01:30.930 align:start position:0%
domain objects we can navigate back to
 

00:01:30.930 --> 00:01:32.780 align:start position:0%
domain objects we can navigate back to
our<00:01:31.200><c> implementation</c><00:01:31.470><c> to</c><00:01:32.130><c> make</c><00:01:32.250><c> the</c><00:01:32.369><c> simplest</c>

00:01:32.780 --> 00:01:32.790 align:start position:0%
our implementation to make the simplest
 

00:01:32.790 --> 00:01:35.240 align:start position:0%
our implementation to make the simplest
fix<00:01:33.030><c> for</c><00:01:33.240><c> our</c><00:01:33.299><c> test</c><00:01:33.600><c> and</c><00:01:33.960><c> this</c><00:01:34.770><c> time</c><00:01:35.009><c> we'll</c><00:01:35.220><c> use</c>

00:01:35.240 --> 00:01:35.250 align:start position:0%
fix for our test and this time we'll use
 

00:01:35.250 --> 00:01:37.340 align:start position:0%
fix for our test and this time we'll use
the<00:01:35.520><c> run</c><00:01:35.700><c> icon</c><00:01:35.850><c> in</c><00:01:36.240><c> the</c><00:01:36.329><c> navigation</c><00:01:36.509><c> bar</c><00:01:37.079><c> to</c>

00:01:37.340 --> 00:01:37.350 align:start position:0%
the run icon in the navigation bar to
 

00:01:37.350 --> 00:01:40.270 align:start position:0%
the run icon in the navigation bar to
run<00:01:37.860><c> the</c><00:01:37.979><c> test</c><00:01:38.189><c> again</c>

00:01:40.270 --> 00:01:40.280 align:start position:0%
run the test again
 

00:01:40.280 --> 00:01:43.210 align:start position:0%
run the test again
now<00:01:41.280><c> it</c><00:01:41.430><c> passes</c><00:01:41.880><c> so</c><00:01:42.180><c> everything</c><00:01:42.570><c> goes</c><00:01:42.690><c> green</c>

00:01:43.210 --> 00:01:43.220 align:start position:0%
now it passes so everything goes green
 

00:01:43.220 --> 00:01:45.770 align:start position:0%
now it passes so everything goes green
this<00:01:44.220><c> time</c><00:01:44.280><c> when</c><00:01:44.940><c> we</c><00:01:45.030><c> choose</c><00:01:45.210><c> to</c><00:01:45.270><c> navigate</c><00:01:45.750><c> to</c>

00:01:45.770 --> 00:01:45.780 align:start position:0%
this time when we choose to navigate to
 

00:01:45.780 --> 00:01:48.200 align:start position:0%
this time when we choose to navigate to
the<00:01:45.960><c> test</c><00:01:46.220><c> IntelliJ</c><00:01:47.220><c> IDEA</c><00:01:47.460><c> locates</c><00:01:47.880><c> our</c><00:01:48.060><c> new</c>

00:01:48.200 --> 00:01:48.210 align:start position:0%
the test IntelliJ IDEA locates our new
 

00:01:48.210 --> 00:01:49.730 align:start position:0%
the test IntelliJ IDEA locates our new
test<00:01:48.450><c> class</c><00:01:48.690><c> and</c><00:01:49.020><c> we</c><00:01:49.080><c> can</c><00:01:49.230><c> jump</c><00:01:49.410><c> straight</c><00:01:49.680><c> to</c>

00:01:49.730 --> 00:01:49.740 align:start position:0%
test class and we can jump straight to
 

00:01:49.740 --> 00:01:52.160 align:start position:0%
test class and we can jump straight to
it<00:01:50.510><c> IntelliJ</c><00:01:51.510><c> IDEA</c><00:01:51.690><c> makes</c><00:01:51.870><c> it</c><00:01:51.990><c> very</c>

00:01:52.160 --> 00:01:52.170 align:start position:0%
it IntelliJ IDEA makes it very
 

00:01:52.170 --> 00:01:53.450 align:start position:0%
it IntelliJ IDEA makes it very
straightforward<00:01:52.860><c> to</c><00:01:52.980><c> develop</c><00:01:53.280><c> Ana</c>

00:01:53.450 --> 00:01:53.460 align:start position:0%
straightforward to develop Ana
 

00:01:53.460 --> 00:01:56.210 align:start position:0%
straightforward to develop Ana
test-driven<00:01:53.880><c> development</c><00:01:54.150><c> way</c><00:01:54.770><c> for</c><00:01:55.770><c> example</c>

00:01:56.210 --> 00:01:56.220 align:start position:0%
test-driven development way for example
 

00:01:56.220 --> 00:01:58.880 align:start position:0%
test-driven development way for example
now<00:01:56.820><c> I'm</c><00:01:56.970><c> going</c><00:01:57.240><c> to</c><00:01:57.330><c> create</c><00:01:57.480><c> another</c><00:01:57.570><c> test</c><00:01:58.110><c> to</c>

00:01:58.880 --> 00:01:58.890 align:start position:0%
now I'm going to create another test to
 

00:01:58.890 --> 00:02:00.530 align:start position:0%
now I'm going to create another test to
identify<00:01:58.920><c> further</c><00:01:59.520><c> functionality</c><00:02:00.240><c> for</c><00:02:00.420><c> my</c>

00:02:00.530 --> 00:02:00.540 align:start position:0%
identify further functionality for my
 

00:02:00.540 --> 00:02:04.520 align:start position:0%
identify further functionality for my
analyze<00:02:00.930><c> mood</c><00:02:01.230><c> method</c><00:02:02.900><c> this</c><00:02:03.900><c> time</c><00:02:04.110><c> I'll</c><00:02:04.320><c> use</c>

00:02:04.520 --> 00:02:04.530 align:start position:0%
analyze mood method this time I'll use
 

00:02:04.530 --> 00:02:07.070 align:start position:0%
analyze mood method this time I'll use
the<00:02:04.680><c> keyboard</c><00:02:05.010><c> shortcut</c><00:02:05.550><c> shift</c><00:02:05.730><c> ctrl</c><00:02:06.510><c> R</c><00:02:06.780><c> on</c>

00:02:07.070 --> 00:02:07.080 align:start position:0%
the keyboard shortcut shift ctrl R on
 

00:02:07.080 --> 00:02:10.040 align:start position:0%
the keyboard shortcut shift ctrl R on
the<00:02:07.200><c> Mac</c><00:02:07.380><c> or</c><00:02:08.280><c> shift</c><00:02:08.610><c> ctrl</c><00:02:09.060><c> f10</c><00:02:09.479><c> on</c><00:02:09.630><c> Windows</c><00:02:09.899><c> and</c>

00:02:10.040 --> 00:02:10.050 align:start position:0%
the Mac or shift ctrl f10 on Windows and
 

00:02:10.050 --> 00:02:12.890 align:start position:0%
the Mac or shift ctrl f10 on Windows and
Linux<00:02:10.110><c> to</c><00:02:10.770><c> run</c><00:02:10.920><c> my</c><00:02:11.070><c> new</c><00:02:11.280><c> method</c><00:02:11.640><c> to</c><00:02:11.820><c> get</c><00:02:12.720><c> back</c>

00:02:12.890 --> 00:02:12.900 align:start position:0%
Linux to run my new method to get back
 

00:02:12.900 --> 00:02:14.810 align:start position:0%
Linux to run my new method to get back
to<00:02:13.080><c> the</c><00:02:13.170><c> production</c><00:02:13.380><c> code</c><00:02:13.800><c> from</c><00:02:13.980><c> the</c><00:02:14.130><c> test</c><00:02:14.400><c> we</c>

00:02:14.810 --> 00:02:14.820 align:start position:0%
to the production code from the test we
 

00:02:14.820 --> 00:02:16.430 align:start position:0%
to the production code from the test we
use<00:02:14.940><c> the</c><00:02:15.090><c> same</c><00:02:15.300><c> shortcut</c><00:02:15.690><c> as</c><00:02:15.990><c> getting</c><00:02:16.200><c> to</c><00:02:16.290><c> the</c>

00:02:16.430 --> 00:02:16.440 align:start position:0%
use the same shortcut as getting to the
 

00:02:16.440 --> 00:02:19.520 align:start position:0%
use the same shortcut as getting to the
test<00:02:16.680><c> from</c><00:02:16.830><c> the</c><00:02:16.950><c> code</c><00:02:17.190><c> shift</c><00:02:18.150><c> command</c><00:02:18.510><c> T</c><00:02:18.780><c> or</c>

00:02:19.520 --> 00:02:19.530 align:start position:0%
test from the code shift command T or
 

00:02:19.530 --> 00:02:21.250 align:start position:0%
test from the code shift command T or
shift<00:02:19.830><c> ctrl</c><00:02:20.190><c> T</c><00:02:20.400><c> on</c><00:02:20.580><c> Windows</c><00:02:20.850><c> and</c><00:02:21.030><c> Linux</c>

00:02:21.250 --> 00:02:21.260 align:start position:0%
shift ctrl T on Windows and Linux
 

00:02:21.260 --> 00:02:23.000 align:start position:0%
shift ctrl T on Windows and Linux
mastering<00:02:22.260><c> these</c><00:02:22.350><c> shortcuts</c><00:02:22.860><c> will</c>

00:02:23.000 --> 00:02:23.010 align:start position:0%
mastering these shortcuts will
 

00:02:23.010 --> 00:02:24.650 align:start position:0%
mastering these shortcuts will
significantly<00:02:23.220><c> speed</c><00:02:23.880><c> up</c><00:02:24.150><c> coding</c><00:02:24.510><c> and</c>

00:02:24.650 --> 00:02:24.660 align:start position:0%
significantly speed up coding and
 

00:02:24.660 --> 00:02:26.660 align:start position:0%
significantly speed up coding and
testing<00:02:24.690><c> now</c><00:02:25.650><c> we're</c><00:02:25.800><c> in</c><00:02:25.920><c> the</c><00:02:26.010><c> production</c><00:02:26.430><c> code</c>

00:02:26.660 --> 00:02:26.670 align:start position:0%
testing now we're in the production code
 

00:02:26.670 --> 00:02:28.730 align:start position:0%
testing now we're in the production code
we<00:02:27.420><c> can</c><00:02:27.570><c> make</c><00:02:27.690><c> the</c><00:02:27.810><c> simplest</c><00:02:28.170><c> changes</c><00:02:28.590><c> that</c>

00:02:28.730 --> 00:02:28.740 align:start position:0%
we can make the simplest changes that
 

00:02:28.740 --> 00:02:32.490 align:start position:0%
we can make the simplest changes that
were<00:02:28.800><c> satisfied</c><00:02:29.280><c> both</c><00:02:29.459><c> tests</c>

00:02:32.490 --> 00:02:32.500 align:start position:0%
 
 

00:02:32.500 --> 00:02:34.290 align:start position:0%
 
when<00:02:32.650><c> this</c><00:02:32.770><c> is</c><00:02:32.920><c> done</c><00:02:32.950><c> we</c><00:02:33.340><c> can</c><00:02:33.490><c> rerun</c><00:02:33.970><c> the</c><00:02:34.120><c> last</c>

00:02:34.290 --> 00:02:34.300 align:start position:0%
when this is done we can rerun the last
 

00:02:34.300 --> 00:02:37.230 align:start position:0%
when this is done we can rerun the last
test<00:02:34.600><c> with</c><00:02:34.900><c> ctrl</c><00:02:35.290><c> f5</c><00:02:35.550><c> and</c><00:02:36.550><c> we</c><00:02:36.670><c> should</c><00:02:36.850><c> see</c><00:02:37.060><c> this</c>

00:02:37.230 --> 00:02:37.240 align:start position:0%
test with ctrl f5 and we should see this
 

00:02:37.240 --> 00:02:40.770 align:start position:0%
test with ctrl f5 and we should see this
turn<00:02:37.480><c> green</c><00:02:37.690><c> as</c><00:02:37.870><c> well</c><00:02:39.270><c> fixing</c><00:02:40.270><c> problems</c><00:02:40.450><c> isn't</c>

00:02:40.770 --> 00:02:40.780 align:start position:0%
turn green as well fixing problems isn't
 

00:02:40.780 --> 00:02:42.930 align:start position:0%
turn green as well fixing problems isn't
always<00:02:41.020><c> as</c><00:02:41.290><c> easy</c><00:02:41.470><c> so</c><00:02:42.250><c> let's</c><00:02:42.430><c> go</c><00:02:42.550><c> back</c><00:02:42.730><c> to</c><00:02:42.910><c> our</c>

00:02:42.930 --> 00:02:42.940 align:start position:0%
always as easy so let's go back to our
 

00:02:42.940 --> 00:02:44.460 align:start position:0%
always as easy so let's go back to our
test<00:02:43.240><c> class</c><00:02:43.480><c> where</c><00:02:43.720><c> we</c><00:02:43.810><c> have</c><00:02:43.960><c> another</c><00:02:44.230><c> new</c>

00:02:44.460 --> 00:02:44.470 align:start position:0%
test class where we have another new
 

00:02:44.470 --> 00:02:47.610 align:start position:0%
test class where we have another new
test<00:02:44.740><c> method</c><00:02:45.540><c> the</c><00:02:46.540><c> gutter</c><00:02:46.750><c> icons</c><00:02:47.200><c> in</c><00:02:47.320><c> the</c><00:02:47.410><c> test</c>

00:02:47.610 --> 00:02:47.620 align:start position:0%
test method the gutter icons in the test
 

00:02:47.620 --> 00:02:49.620 align:start position:0%
test method the gutter icons in the test
class<00:02:47.860><c> show</c><00:02:48.190><c> a</c><00:02:48.220><c> green</c><00:02:48.460><c> circle</c><00:02:48.760><c> next</c><00:02:49.090><c> to</c><00:02:49.240><c> tests</c>

00:02:49.620 --> 00:02:49.630 align:start position:0%
class show a green circle next to tests
 

00:02:49.630 --> 00:02:51.750 align:start position:0%
class show a green circle next to tests
that<00:02:49.720><c> have</c><00:02:49.840><c> been</c><00:02:49.990><c> run</c><00:02:50.200><c> and</c><00:02:50.380><c> passed</c><00:02:50.650><c> and</c><00:02:51.070><c> our</c>

00:02:51.750 --> 00:02:51.760 align:start position:0%
that have been run and passed and our
 

00:02:51.760 --> 00:02:54.890 align:start position:0%
that have been run and passed and our
new<00:02:51.970><c> test</c><00:02:52.210><c> just</c><00:02:52.630><c> has</c><00:02:52.780><c> the</c><00:02:52.900><c> green</c><00:02:53.110><c> one</c><00:02:53.320><c> icon</c>

00:02:54.890 --> 00:02:54.900 align:start position:0%
new test just has the green one icon
 

00:02:54.900 --> 00:02:57.150 align:start position:0%
new test just has the green one icon
when<00:02:55.900><c> we</c><00:02:55.990><c> run</c><00:02:56.140><c> all</c><00:02:56.350><c> the</c><00:02:56.440><c> tests</c><00:02:56.740><c> in</c><00:02:56.800><c> this</c><00:02:56.950><c> class</c>

00:02:57.150 --> 00:02:57.160 align:start position:0%
when we run all the tests in this class
 

00:02:57.160 --> 00:02:59.460 align:start position:0%
when we run all the tests in this class
using<00:02:57.610><c> the</c><00:02:57.700><c> class</c><00:02:57.910><c> level</c><00:02:58.210><c> gutter</c><00:02:58.540><c> icon</c><00:02:58.960><c> we</c><00:02:59.440><c> can</c>

00:02:59.460 --> 00:02:59.470 align:start position:0%
using the class level gutter icon we can
 

00:02:59.470 --> 00:03:02.430 align:start position:0%
using the class level gutter icon we can
see<00:02:59.710><c> our</c><00:02:59.830><c> new</c><00:02:59.980><c> test</c><00:03:00.250><c> fails</c><00:03:01.260><c> clicking</c><00:03:02.260><c> on</c><00:03:02.350><c> the</c>

00:03:02.430 --> 00:03:02.440 align:start position:0%
see our new test fails clicking on the
 

00:03:02.440 --> 00:03:04.080 align:start position:0%
see our new test fails clicking on the
failing<00:03:02.650><c> test</c><00:03:02.980><c> brings</c><00:03:03.280><c> it</c><00:03:03.430><c> into</c><00:03:03.580><c> the</c><00:03:03.700><c> editor</c>

00:03:04.080 --> 00:03:04.090 align:start position:0%
failing test brings it into the editor
 

00:03:04.090 --> 00:03:07.230 align:start position:0%
failing test brings it into the editor
if<00:03:04.300><c> we</c><00:03:05.140><c> don't</c><00:03:05.320><c> know</c><00:03:05.440><c> why</c><00:03:05.680><c> this</c><00:03:05.740><c> test</c><00:03:06.130><c> failed</c><00:03:06.430><c> we</c>

00:03:07.230 --> 00:03:07.240 align:start position:0%
if we don't know why this test failed we
 

00:03:07.240 --> 00:03:08.610 align:start position:0%
if we don't know why this test failed we
could<00:03:07.390><c> put</c><00:03:07.510><c> a</c><00:03:07.540><c> breakpoint</c><00:03:07.810><c> in</c><00:03:08.230><c> the</c><00:03:08.320><c> production</c>

00:03:08.610 --> 00:03:08.620 align:start position:0%
could put a breakpoint in the production
 

00:03:08.620 --> 00:03:10.650 align:start position:0%
could put a breakpoint in the production
code<00:03:09.010><c> and</c><00:03:09.310><c> then</c><00:03:09.670><c> we</c><00:03:09.760><c> can</c><00:03:09.910><c> choose</c><00:03:10.120><c> to</c><00:03:10.300><c> debug</c>

00:03:10.650 --> 00:03:10.660 align:start position:0%
code and then we can choose to debug
 

00:03:10.660 --> 00:03:12.630 align:start position:0%
code and then we can choose to debug
just<00:03:10.959><c> the</c><00:03:11.080><c> failing</c><00:03:11.440><c> test</c><00:03:11.709><c> by</c><00:03:12.130><c> right-clicking</c>

00:03:12.630 --> 00:03:12.640 align:start position:0%
just the failing test by right-clicking
 

00:03:12.640 --> 00:03:16.740 align:start position:0%
just the failing test by right-clicking
on<00:03:12.820><c> it</c><00:03:12.880><c> in</c><00:03:13.120><c> the</c><00:03:13.240><c> run</c><00:03:13.390><c> window</c><00:03:13.600><c> I</c><00:03:15.209><c> can</c><00:03:16.209><c> even</c><00:03:16.570><c> put</c>

00:03:16.740 --> 00:03:16.750 align:start position:0%
on it in the run window I can even put
 

00:03:16.750 --> 00:03:18.660 align:start position:0%
on it in the run window I can even put
breakpoints<00:03:17.380><c> on</c><00:03:17.530><c> lambda</c><00:03:17.770><c> expressions</c><00:03:18.400><c> in</c><00:03:18.550><c> my</c>

00:03:18.660 --> 00:03:18.670 align:start position:0%
breakpoints on lambda expressions in my
 

00:03:18.670 --> 00:03:20.880 align:start position:0%
breakpoints on lambda expressions in my
stream<00:03:18.970><c> operations</c><00:03:19.570><c> and</c><00:03:19.870><c> then</c><00:03:20.350><c> step</c><00:03:20.650><c> through</c>

00:03:20.880 --> 00:03:20.890 align:start position:0%
stream operations and then step through
 

00:03:20.890 --> 00:03:25.020 align:start position:0%
stream operations and then step through
to<00:03:20.920><c> see</c><00:03:21.190><c> what</c><00:03:21.340><c> the</c><00:03:21.400><c> problem</c><00:03:21.670><c> might</c><00:03:21.850><c> be</c>

00:03:25.020 --> 00:03:25.030 align:start position:0%
 
 

00:03:25.030 --> 00:03:27.250 align:start position:0%
 
when<00:03:26.030><c> I</c><00:03:26.060><c> think</c><00:03:26.180><c> I've</c><00:03:26.480><c> solved</c><00:03:26.780><c> the</c><00:03:26.840><c> problem</c><00:03:27.170><c> I</c>

00:03:27.250 --> 00:03:27.260 align:start position:0%
when I think I've solved the problem I
 

00:03:27.260 --> 00:03:31.410 align:start position:0%
when I think I've solved the problem I
can<00:03:27.500><c> rerun</c><00:03:27.770><c> the</c><00:03:27.890><c> test</c><00:03:28.100><c> as</c><00:03:28.250><c> normal</c>

00:03:31.410 --> 00:03:31.420 align:start position:0%
 
 

00:03:31.420 --> 00:03:33.300 align:start position:0%
 
there<00:03:32.260><c> are</c><00:03:32.380><c> a</c><00:03:32.440><c> number</c><00:03:32.590><c> of</c><00:03:32.740><c> options</c><00:03:32.950><c> and</c>

00:03:33.300 --> 00:03:33.310 align:start position:0%
there are a number of options and
 

00:03:33.310 --> 00:03:35.309 align:start position:0%
there are a number of options and
settings<00:03:33.520><c> to</c><00:03:33.819><c> run</c><00:03:34.000><c> tests</c><00:03:34.420><c> in</c><00:03:34.510><c> IntelliJ</c><00:03:34.990><c> IDEA</c>

00:03:35.309 --> 00:03:35.319 align:start position:0%
settings to run tests in IntelliJ IDEA
 

00:03:35.319 --> 00:03:37.710 align:start position:0%
settings to run tests in IntelliJ IDEA
so<00:03:36.310><c> to</c><00:03:36.400><c> demonstrate</c><00:03:36.520><c> these</c><00:03:37.060><c> I'm</c><00:03:37.300><c> running</c><00:03:37.569><c> all</c>

00:03:37.710 --> 00:03:37.720 align:start position:0%
so to demonstrate these I'm running all
 

00:03:37.720 --> 00:03:39.990 align:start position:0%
so to demonstrate these I'm running all
the<00:03:37.870><c> tests</c><00:03:38.200><c> in</c><00:03:38.319><c> a</c><00:03:38.410><c> real</c><00:03:38.620><c> application</c><00:03:39.250><c> by</c>

00:03:39.990 --> 00:03:40.000 align:start position:0%
the tests in a real application by
 

00:03:40.000 --> 00:03:42.000 align:start position:0%
the tests in a real application by
default<00:03:40.480><c> the</c><00:03:40.720><c> IDE</c><00:03:41.020><c> will</c><00:03:41.260><c> show</c><00:03:41.440><c> you</c><00:03:41.500><c> the</c><00:03:41.680><c> set</c><00:03:41.860><c> of</c>

00:03:42.000 --> 00:03:42.010 align:start position:0%
default the IDE will show you the set of
 

00:03:42.010 --> 00:03:44.670 align:start position:0%
default the IDE will show you the set of
all<00:03:42.130><c> tests</c><00:03:42.550><c> that</c><00:03:42.670><c> have</c><00:03:42.849><c> been</c><00:03:42.970><c> run</c><00:03:43.150><c> as</c><00:03:43.680><c> these</c>

00:03:44.670 --> 00:03:44.680 align:start position:0%
all tests that have been run as these
 

00:03:44.680 --> 00:03:47.160 align:start position:0%
all tests that have been run as these
tests<00:03:45.099><c> pass</c><00:03:45.370><c> you</c><00:03:46.030><c> see</c><00:03:46.209><c> the</c><00:03:46.330><c> green</c><00:03:46.510><c> icons</c><00:03:46.930><c> and</c>

00:03:47.160 --> 00:03:47.170 align:start position:0%
tests pass you see the green icons and
 

00:03:47.170 --> 00:03:48.770 align:start position:0%
tests pass you see the green icons and
the<00:03:47.260><c> test</c><00:03:47.470><c> names</c><00:03:47.680><c> in</c><00:03:47.860><c> the</c><00:03:47.950><c> run</c><00:03:48.100><c> window</c>

00:03:48.770 --> 00:03:48.780 align:start position:0%
the test names in the run window
 

00:03:48.780 --> 00:03:50.910 align:start position:0%
the test names in the run window
since<00:03:49.780><c> we're</c><00:03:49.930><c> probably</c><00:03:50.170><c> more</c><00:03:50.290><c> interested</c><00:03:50.800><c> in</c>

00:03:50.910 --> 00:03:50.920 align:start position:0%
since we're probably more interested in
 

00:03:50.920 --> 00:03:52.920 align:start position:0%
since we're probably more interested in
failures<00:03:51.370><c> than</c><00:03:51.520><c> successes</c><00:03:51.970><c> you</c><00:03:52.540><c> can</c><00:03:52.720><c> choose</c>

00:03:52.920 --> 00:03:52.930 align:start position:0%
failures than successes you can choose
 

00:03:52.930 --> 00:03:56.340 align:start position:0%
failures than successes you can choose
to<00:03:53.080><c> hide</c><00:03:53.230><c> tests</c><00:03:53.680><c> that</c><00:03:53.830><c> passed</c><00:03:55.050><c> similarly</c><00:03:56.050><c> you</c>

00:03:56.340 --> 00:03:56.350 align:start position:0%
to hide tests that passed similarly you
 

00:03:56.350 --> 00:03:58.320 align:start position:0%
to hide tests that passed similarly you
can<00:03:56.530><c> hide</c><00:03:56.770><c> ignored</c><00:03:57.190><c> or</c><00:03:57.340><c> disable</c><00:03:57.760><c> tests</c><00:03:58.120><c> if</c><00:03:58.239><c> you</c>

00:03:58.320 --> 00:03:58.330 align:start position:0%
can hide ignored or disable tests if you
 

00:03:58.330 --> 00:04:00.839 align:start position:0%
can hide ignored or disable tests if you
choose<00:03:59.130><c> you</c><00:04:00.130><c> can</c><00:04:00.280><c> sort</c><00:04:00.459><c> the</c><00:04:00.580><c> tests</c>

00:04:00.839 --> 00:04:00.849 align:start position:0%
choose you can sort the tests
 

00:04:00.849 --> 00:04:02.820 align:start position:0%
choose you can sort the tests
alphabetically<00:04:01.569><c> rather</c><00:04:02.170><c> than</c><00:04:02.380><c> have</c><00:04:02.560><c> them</c><00:04:02.709><c> in</c>

00:04:02.820 --> 00:04:02.830 align:start position:0%
alphabetically rather than have them in
 

00:04:02.830 --> 00:04:05.130 align:start position:0%
alphabetically rather than have them in
the<00:04:02.920><c> order</c><00:04:03.069><c> they</c><00:04:03.250><c> were</c><00:04:03.280><c> found</c><00:04:03.640><c> and</c><00:04:03.989><c> you</c><00:04:04.989><c> can</c>

00:04:05.130 --> 00:04:05.140 align:start position:0%
the order they were found and you can
 

00:04:05.140 --> 00:04:06.809 align:start position:0%
the order they were found and you can
expand<00:04:05.530><c> to</c><00:04:05.680><c> see</c><00:04:05.830><c> all</c><00:04:05.980><c> the</c><00:04:06.130><c> individual</c><00:04:06.580><c> test</c>

00:04:06.809 --> 00:04:06.819 align:start position:0%
expand to see all the individual test
 

00:04:06.819 --> 00:04:08.820 align:start position:0%
expand to see all the individual test
methods<00:04:07.209><c> or</c><00:04:07.480><c> contract</c><00:04:07.989><c> to</c><00:04:08.140><c> hide</c><00:04:08.290><c> the</c><00:04:08.470><c> detail</c>

00:04:08.820 --> 00:04:08.830 align:start position:0%
methods or contract to hide the detail
 

00:04:08.830 --> 00:04:10.890 align:start position:0%
methods or contract to hide the detail
the<00:04:09.760><c> run</c><00:04:09.940><c> window</c><00:04:10.269><c> shows</c><00:04:10.510><c> a</c><00:04:10.540><c> lot</c><00:04:10.780><c> of</c>

00:04:10.890 --> 00:04:10.900 align:start position:0%
the run window shows a lot of
 

00:04:10.900 --> 00:04:12.330 align:start position:0%
the run window shows a lot of
information<00:04:11.410><c> about</c><00:04:11.530><c> the</c><00:04:11.739><c> status</c><00:04:12.130><c> of</c><00:04:12.220><c> the</c>

00:04:12.330 --> 00:04:12.340 align:start position:0%
information about the status of the
 

00:04:12.340 --> 00:04:15.600 align:start position:0%
information about the status of the
running<00:04:12.610><c> tests</c><00:04:13.060><c> like</c><00:04:13.870><c> how</c><00:04:14.170><c> many</c><00:04:14.380><c> have</c><00:04:14.530><c> run</c><00:04:14.769><c> how</c>

00:04:15.600 --> 00:04:15.610 align:start position:0%
running tests like how many have run how
 

00:04:15.610 --> 00:04:17.699 align:start position:0%
running tests like how many have run how
many<00:04:15.819><c> there</c><00:04:16.030><c> are</c><00:04:16.060><c> in</c><00:04:16.299><c> total</c><00:04:16.479><c> how</c><00:04:17.410><c> many</c><00:04:17.590><c> have</c>

00:04:17.699 --> 00:04:17.709 align:start position:0%
many there are in total how many have
 

00:04:17.709 --> 00:04:20.340 align:start position:0%
many there are in total how many have
been<00:04:17.859><c> ignored</c><00:04:18.250><c> and</c><00:04:18.549><c> how</c><00:04:18.970><c> many</c><00:04:19.120><c> fail</c><00:04:19.419><c> and</c><00:04:19.690><c> the</c>

00:04:20.340 --> 00:04:20.350 align:start position:0%
been ignored and how many fail and the
 

00:04:20.350 --> 00:04:21.990 align:start position:0%
been ignored and how many fail and the
progress<00:04:20.680><c> bar</c><00:04:21.010><c> gives</c><00:04:21.220><c> you</c><00:04:21.340><c> an</c><00:04:21.430><c> idea</c><00:04:21.579><c> of</c><00:04:21.820><c> how</c>

00:04:21.990 --> 00:04:22.000 align:start position:0%
progress bar gives you an idea of how
 

00:04:22.000 --> 00:04:24.270 align:start position:0%
progress bar gives you an idea of how
much<00:04:22.180><c> longer</c><00:04:22.450><c> the</c><00:04:22.630><c> tests</c><00:04:22.960><c> will</c><00:04:23.110><c> take</c><00:04:23.320><c> and</c><00:04:23.650><c> it</c>

00:04:24.270 --> 00:04:24.280 align:start position:0%
much longer the tests will take and it
 

00:04:24.280 --> 00:04:26.070 align:start position:0%
much longer the tests will take and it
will<00:04:24.400><c> turn</c><00:04:24.580><c> from</c><00:04:24.610><c> green</c><00:04:25.030><c> to</c><00:04:25.210><c> red</c><00:04:25.240><c> if</c><00:04:25.600><c> a</c><00:04:25.720><c> single</c>

00:04:26.070 --> 00:04:26.080 align:start position:0%
will turn from green to red if a single
 

00:04:26.080 --> 00:04:29.190 align:start position:0%
will turn from green to red if a single
test<00:04:26.290><c> fails</c><00:04:26.910><c> track</c><00:04:27.910><c> running</c><00:04:28.300><c> tests</c><00:04:28.570><c> forces</c>

00:04:29.190 --> 00:04:29.200 align:start position:0%
test fails track running tests forces
 

00:04:29.200 --> 00:04:30.810 align:start position:0%
test fails track running tests forces
the<00:04:29.320><c> window</c><00:04:29.620><c> to</c><00:04:29.680><c> show</c><00:04:29.800><c> every</c><00:04:30.160><c> test</c><00:04:30.400><c> as</c><00:04:30.550><c> it</c><00:04:30.639><c> runs</c>

00:04:30.810 --> 00:04:30.820 align:start position:0%
the window to show every test as it runs
 

00:04:30.820 --> 00:04:32.940 align:start position:0%
the window to show every test as it runs
and<00:04:31.180><c> lets</c><00:04:31.810><c> you</c><00:04:31.930><c> follow</c><00:04:32.110><c> the</c><00:04:32.290><c> progress</c><00:04:32.500><c> of</c><00:04:32.800><c> the</c>

00:04:32.940 --> 00:04:32.950 align:start position:0%
and lets you follow the progress of the
 

00:04:32.950 --> 00:04:35.010 align:start position:0%
and lets you follow the progress of the
tests<00:04:33.340><c> you</c><00:04:34.150><c> could</c><00:04:34.300><c> turn</c><00:04:34.450><c> off</c><00:04:34.660><c> inline</c>

00:04:35.010 --> 00:04:35.020 align:start position:0%
tests you could turn off inline
 

00:04:35.020 --> 00:04:36.750 align:start position:0%
tests you could turn off inline
statistics<00:04:35.620><c> which</c><00:04:35.890><c> will</c><00:04:36.039><c> hide</c><00:04:36.250><c> the</c><00:04:36.400><c> time</c><00:04:36.640><c> it</c>

00:04:36.750 --> 00:04:36.760 align:start position:0%
statistics which will hide the time it
 

00:04:36.760 --> 00:04:40.469 align:start position:0%
statistics which will hide the time it
took<00:04:36.910><c> to</c><00:04:36.970><c> run</c><00:04:37.240><c> each</c><00:04:37.419><c> test</c><00:04:39.240><c> there</c><00:04:40.240><c> are</c><00:04:40.330><c> numerous</c>

00:04:40.469 --> 00:04:40.479 align:start position:0%
took to run each test there are numerous
 

00:04:40.479 --> 00:04:42.150 align:start position:0%
took to run each test there are numerous
other<00:04:40.780><c> settings</c><00:04:41.229><c> you</c><00:04:41.380><c> can</c><00:04:41.500><c> experiment</c><00:04:41.830><c> with</c>

00:04:42.150 --> 00:04:42.160 align:start position:0%
other settings you can experiment with
 

00:04:42.160 --> 00:04:43.920 align:start position:0%
other settings you can experiment with
in<00:04:42.400><c> order</c><00:04:42.700><c> to</c><00:04:42.789><c> have</c><00:04:42.910><c> the</c><00:04:43.060><c> run</c><00:04:43.210><c> window</c><00:04:43.390><c> show</c><00:04:43.780><c> the</c>

00:04:43.920 --> 00:04:43.930 align:start position:0%
in order to have the run window show the
 

00:04:43.930 --> 00:04:45.750 align:start position:0%
in order to have the run window show the
information<00:04:44.530><c> to</c><00:04:44.680><c> you</c><00:04:44.800><c> in</c><00:04:44.979><c> the</c><00:04:45.070><c> most</c><00:04:45.310><c> useful</c>

00:04:45.750 --> 00:04:45.760 align:start position:0%
information to you in the most useful
 

00:04:45.760 --> 00:04:48.960 align:start position:0%
information to you in the most useful
way<00:04:45.910><c> for</c><00:04:46.680><c> example</c><00:04:47.680><c> you</c><00:04:48.460><c> can</c><00:04:48.640><c> have</c><00:04:48.760><c> the</c><00:04:48.880><c> window</c>

00:04:48.960 --> 00:04:48.970 align:start position:0%
way for example you can have the window
 

00:04:48.970 --> 00:04:50.880 align:start position:0%
way for example you can have the window
jump<00:04:49.419><c> to</c><00:04:49.539><c> the</c><00:04:49.630><c> first</c><00:04:49.810><c> failing</c><00:04:50.320><c> test</c><00:04:50.560><c> when</c><00:04:50.770><c> all</c>

00:04:50.880 --> 00:04:50.890 align:start position:0%
jump to the first failing test when all
 

00:04:50.890 --> 00:04:53.010 align:start position:0%
jump to the first failing test when all
the<00:04:51.039><c> tests</c><00:04:51.370><c> are</c><00:04:51.490><c> finished</c><00:04:51.610><c> so</c><00:04:52.539><c> you</c><00:04:52.570><c> can</c><00:04:52.810><c> fix</c>

00:04:53.010 --> 00:04:53.020 align:start position:0%
the tests are finished so you can fix
 

00:04:53.020 --> 00:04:55.220 align:start position:0%
the tests are finished so you can fix
any<00:04:53.229><c> problems</c><00:04:53.560><c> immediately</c>

00:04:55.220 --> 00:04:55.230 align:start position:0%
any problems immediately
 

00:04:55.230 --> 00:04:59.120 align:start position:0%
any problems immediately
now<00:04:55.980><c> let's</c><00:04:56.220><c> look</c><00:04:56.340><c> at</c><00:04:56.460><c> test</c><00:04:56.700><c> coverage</c><00:04:58.130><c> it's</c>

00:04:59.120 --> 00:04:59.130 align:start position:0%
now let's look at test coverage it's
 

00:04:59.130 --> 00:05:00.440 align:start position:0%
now let's look at test coverage it's
great<00:04:59.370><c> to</c><00:04:59.490><c> have</c><00:04:59.550><c> a</c><00:04:59.610><c> series</c><00:04:59.940><c> of</c><00:04:59.970><c> tests</c><00:05:00.330><c> that</c>

00:05:00.440 --> 00:05:00.450 align:start position:0%
great to have a series of tests that
 

00:05:00.450 --> 00:05:02.300 align:start position:0%
great to have a series of tests that
pass<00:05:00.660><c> but</c><00:05:01.350><c> it</c><00:05:01.440><c> can</c><00:05:01.560><c> be</c><00:05:01.650><c> more</c><00:05:01.800><c> useful</c><00:05:02.010><c> to</c>

00:05:02.300 --> 00:05:02.310 align:start position:0%
pass but it can be more useful to
 

00:05:02.310 --> 00:05:03.860 align:start position:0%
pass but it can be more useful to
understand<00:05:02.670><c> which</c><00:05:02.880><c> areas</c><00:05:03.210><c> of</c><00:05:03.240><c> your</c><00:05:03.360><c> code</c><00:05:03.690><c> are</c>

00:05:03.860 --> 00:05:03.870 align:start position:0%
understand which areas of your code are
 

00:05:03.870 --> 00:05:05.780 align:start position:0%
understand which areas of your code are
covered<00:05:04.200><c> by</c><00:05:04.320><c> these</c><00:05:04.500><c> tests</c><00:05:05.010><c> and</c><00:05:05.160><c> more</c>

00:05:05.780 --> 00:05:05.790 align:start position:0%
covered by these tests and more
 

00:05:05.790 --> 00:05:08.060 align:start position:0%
covered by these tests and more
importantly<00:05:06.270><c> which</c><00:05:06.900><c> code</c><00:05:07.170><c> is</c><00:05:07.320><c> not</c><00:05:07.500><c> covered</c><00:05:07.920><c> by</c>

00:05:08.060 --> 00:05:08.070 align:start position:0%
importantly which code is not covered by
 

00:05:08.070 --> 00:05:11.540 align:start position:0%
importantly which code is not covered by
tests<00:05:09.710><c> this</c><00:05:10.710><c> time</c><00:05:10.950><c> when</c><00:05:11.130><c> we</c><00:05:11.220><c> run</c><00:05:11.370><c> all</c><00:05:11.520><c> our</c>

00:05:11.540 --> 00:05:11.550 align:start position:0%
tests this time when we run all our
 

00:05:11.550 --> 00:05:13.760 align:start position:0%
tests this time when we run all our
tests<00:05:12.120><c> we</c><00:05:12.420><c> select</c><00:05:12.720><c> run</c><00:05:12.990><c> all</c><00:05:13.230><c> tests</c><00:05:13.620><c> with</c>

00:05:13.760 --> 00:05:13.770 align:start position:0%
tests we select run all tests with
 

00:05:13.770 --> 00:05:16.610 align:start position:0%
tests we select run all tests with
coverage<00:05:14.190><c> by</c><00:05:15.150><c> default</c><00:05:15.600><c> this</c><00:05:16.140><c> will</c><00:05:16.350><c> use</c><00:05:16.500><c> the</c>

00:05:16.610 --> 00:05:16.620 align:start position:0%
coverage by default this will use the
 

00:05:16.620 --> 00:05:19.310 align:start position:0%
coverage by default this will use the
IntelliJ<00:05:17.100><c> IDEA</c><00:05:17.400><c> coverage</c><00:05:17.850><c> tool</c><00:05:18.120><c> but</c><00:05:19.050><c> you</c><00:05:19.080><c> can</c>

00:05:19.310 --> 00:05:19.320 align:start position:0%
IntelliJ IDEA coverage tool but you can
 

00:05:19.320 --> 00:05:20.990 align:start position:0%
IntelliJ IDEA coverage tool but you can
select<00:05:19.500><c> other</c><00:05:19.770><c> tools</c><00:05:20.070><c> like</c><00:05:20.160><c> jacoco</c><00:05:20.580><c> in</c><00:05:20.910><c> the</c>

00:05:20.990 --> 00:05:21.000 align:start position:0%
select other tools like jacoco in the
 

00:05:21.000 --> 00:05:24.710 align:start position:0%
select other tools like jacoco in the
settings<00:05:22.130><c> when</c><00:05:23.130><c> all</c><00:05:23.250><c> the</c><00:05:23.370><c> tests</c><00:05:23.670><c> are</c><00:05:23.760><c> run</c><00:05:23.940><c> the</c>

00:05:24.710 --> 00:05:24.720 align:start position:0%
settings when all the tests are run the
 

00:05:24.720 --> 00:05:26.390 align:start position:0%
settings when all the tests are run the
coverage<00:05:25.080><c> window</c><00:05:25.380><c> shows</c><00:05:25.620><c> a</c><00:05:25.650><c> breakdown</c><00:05:25.920><c> of</c><00:05:26.160><c> the</c>

00:05:26.390 --> 00:05:26.400 align:start position:0%
coverage window shows a breakdown of the
 

00:05:26.400 --> 00:05:29.120 align:start position:0%
coverage window shows a breakdown of the
coverage<00:05:26.730><c> by</c><00:05:26.910><c> package</c><00:05:27.300><c> if</c><00:05:27.650><c> we</c><00:05:28.650><c> navigate</c><00:05:29.100><c> to</c>

00:05:29.120 --> 00:05:29.130 align:start position:0%
coverage by package if we navigate to
 

00:05:29.130 --> 00:05:31.370 align:start position:0%
coverage by package if we navigate to
the<00:05:29.280><c> main</c><00:05:29.520><c> package</c><00:05:29.910><c> of</c><00:05:30.030><c> our</c><00:05:30.120><c> application</c><00:05:30.810><c> we</c>

00:05:31.370 --> 00:05:31.380 align:start position:0%
the main package of our application we
 

00:05:31.380 --> 00:05:33.140 align:start position:0%
the main package of our application we
can<00:05:31.410><c> see</c><00:05:31.560><c> which</c><00:05:32.070><c> classes</c><00:05:32.520><c> are</c><00:05:32.640><c> well</c><00:05:32.670><c> covered</c>

00:05:33.140 --> 00:05:33.150 align:start position:0%
can see which classes are well covered
 

00:05:33.150 --> 00:05:35.060 align:start position:0%
can see which classes are well covered
by<00:05:33.270><c> tests</c><00:05:33.780><c> and</c><00:05:34.020><c> which</c><00:05:34.440><c> might</c><00:05:34.680><c> need</c><00:05:34.860><c> more</c>

00:05:35.060 --> 00:05:35.070 align:start position:0%
by tests and which might need more
 

00:05:35.070 --> 00:05:37.940 align:start position:0%
by tests and which might need more
thorough<00:05:35.280><c> testing</c><00:05:36.260><c> this</c><00:05:37.260><c> information</c><00:05:37.860><c> is</c>

00:05:37.940 --> 00:05:37.950 align:start position:0%
thorough testing this information is
 

00:05:37.950 --> 00:05:39.800 align:start position:0%
thorough testing this information is
also<00:05:38.160><c> available</c><00:05:38.400><c> in</c><00:05:38.820><c> the</c><00:05:38.910><c> project</c><00:05:39.300><c> window</c><00:05:39.420><c> at</c>

00:05:39.800 --> 00:05:39.810 align:start position:0%
also available in the project window at
 

00:05:39.810 --> 00:05:42.410 align:start position:0%
also available in the project window at
the<00:05:39.960><c> package</c><00:05:40.290><c> and</c><00:05:40.440><c> class</c><00:05:40.650><c> level</c><00:05:41.030><c> when</c><00:05:42.030><c> we</c><00:05:42.150><c> open</c>

00:05:42.410 --> 00:05:42.420 align:start position:0%
the package and class level when we open
 

00:05:42.420 --> 00:05:44.540 align:start position:0%
the package and class level when we open
a<00:05:42.480><c> class</c><00:05:42.690><c> in</c><00:05:42.840><c> the</c><00:05:42.900><c> editor</c><00:05:43.310><c> colors</c><00:05:44.310><c> in</c><00:05:44.460><c> the</c>

00:05:44.540 --> 00:05:44.550 align:start position:0%
a class in the editor colors in the
 

00:05:44.550 --> 00:05:47.240 align:start position:0%
a class in the editor colors in the
gutter<00:05:44.730><c> show</c><00:05:45.150><c> the</c><00:05:45.270><c> coverage</c><00:05:45.600><c> level</c><00:05:45.950><c> green</c><00:05:46.950><c> for</c>

00:05:47.240 --> 00:05:47.250 align:start position:0%
gutter show the coverage level green for
 

00:05:47.250 --> 00:05:51.140 align:start position:0%
gutter show the coverage level green for
high<00:05:47.370><c> coverage</c><00:05:47.640><c> red</c><00:05:48.300><c> for</c><00:05:48.510><c> low</c><00:05:49.790><c> these</c><00:05:50.790><c> colors</c>

00:05:51.140 --> 00:05:51.150 align:start position:0%
high coverage red for low these colors
 

00:05:51.150 --> 00:05:52.790 align:start position:0%
high coverage red for low these colors
can<00:05:51.330><c> be</c><00:05:51.450><c> configured</c><00:05:51.750><c> which</c><00:05:52.590><c> may</c><00:05:52.740><c> be</c>

00:05:52.790 --> 00:05:52.800 align:start position:0%
can be configured which may be
 

00:05:52.800 --> 00:05:54.500 align:start position:0%
can be configured which may be
particularly<00:05:53.280><c> useful</c><00:05:53.640><c> if</c><00:05:54.030><c> you're</c><00:05:54.150><c> like</c><00:05:54.360><c> me</c>

00:05:54.500 --> 00:05:54.510 align:start position:0%
particularly useful if you're like me
 

00:05:54.510 --> 00:05:56.060 align:start position:0%
particularly useful if you're like me
and<00:05:54.690><c> have</c><00:05:54.810><c> problems</c><00:05:55.050><c> distinguishing</c><00:05:55.770><c> red</c><00:05:55.920><c> and</c>

00:05:56.060 --> 00:05:56.070 align:start position:0%
and have problems distinguishing red and
 

00:05:56.070 --> 00:05:59.390 align:start position:0%
and have problems distinguishing red and
green<00:05:56.280><c> as</c><00:05:57.080><c> with</c><00:05:58.080><c> all</c><00:05:58.230><c> IntelliJ</c><00:05:58.740><c> IDEA</c><00:05:59.010><c> windows</c>

00:05:59.390 --> 00:05:59.400 align:start position:0%
green as with all IntelliJ IDEA windows
 

00:05:59.400 --> 00:06:01.160 align:start position:0%
green as with all IntelliJ IDEA windows
the<00:05:59.880><c> coverage</c><00:06:00.210><c> window</c><00:06:00.540><c> has</c><00:06:00.720><c> options</c><00:06:01.080><c> for</c>

00:06:01.160 --> 00:06:01.170 align:start position:0%
the coverage window has options for
 

00:06:01.170 --> 00:06:03.200 align:start position:0%
the coverage window has options for
customizing<00:06:01.680><c> the</c><00:06:01.950><c> display</c><00:06:02.090><c> according</c><00:06:03.090><c> to</c>

00:06:03.200 --> 00:06:03.210 align:start position:0%
customizing the display according to
 

00:06:03.210 --> 00:06:06.080 align:start position:0%
customizing the display according to
what<00:06:03.330><c> you</c><00:06:03.420><c> find</c><00:06:03.630><c> most</c><00:06:03.840><c> useful</c><00:06:03.960><c> and</c><00:06:04.940><c> you</c><00:06:05.940><c> can</c>

00:06:06.080 --> 00:06:06.090 align:start position:0%
what you find most useful and you can
 

00:06:06.090 --> 00:06:08.930 align:start position:0%
what you find most useful and you can
generate<00:06:06.420><c> an</c><00:06:06.570><c> HTML</c><00:06:06.690><c> coverage</c><00:06:07.410><c> report</c><00:06:07.850><c> so</c><00:06:08.850><c> if</c>

00:06:08.930 --> 00:06:08.940 align:start position:0%
generate an HTML coverage report so if
 

00:06:08.940 --> 00:06:10.490 align:start position:0%
generate an HTML coverage report so if
you<00:06:09.030><c> do</c><00:06:09.180><c> run</c><00:06:09.210><c> your</c><00:06:09.540><c> tests</c><00:06:09.840><c> with</c><00:06:09.990><c> coverage</c><00:06:10.350><c> in</c>

00:06:10.490 --> 00:06:10.500 align:start position:0%
you do run your tests with coverage in
 

00:06:10.500 --> 00:06:12.500 align:start position:0%
you do run your tests with coverage in
the<00:06:10.590><c> IDE</c><00:06:10.860><c> and</c><00:06:11.220><c> want</c><00:06:11.790><c> to</c><00:06:11.850><c> show</c><00:06:12.030><c> the</c><00:06:12.150><c> results</c>

00:06:12.500 --> 00:06:12.510 align:start position:0%
the IDE and want to show the results
 

00:06:12.510 --> 00:06:14.300 align:start position:0%
the IDE and want to show the results
with<00:06:12.630><c> the</c><00:06:12.720><c> rest</c><00:06:12.900><c> of</c><00:06:13.020><c> the</c><00:06:13.110><c> team</c><00:06:13.320><c> or</c><00:06:13.560><c> external</c>

00:06:14.300 --> 00:06:14.310 align:start position:0%
with the rest of the team or external
 

00:06:14.310 --> 00:06:17.210 align:start position:0%
with the rest of the team or external
parties<00:06:14.780><c> you</c><00:06:15.780><c> can</c><00:06:15.930><c> share</c><00:06:16.110><c> this</c><00:06:16.260><c> report</c><00:06:16.650><c> and</c><00:06:16.860><c> it</c>

00:06:17.210 --> 00:06:17.220 align:start position:0%
parties you can share this report and it
 

00:06:17.220 --> 00:06:18.920 align:start position:0%
parties you can share this report and it
contains<00:06:17.580><c> all</c><00:06:17.880><c> the</c><00:06:18.000><c> same</c><00:06:18.210><c> information</c><00:06:18.630><c> we</c>

00:06:18.920 --> 00:06:18.930 align:start position:0%
contains all the same information we
 

00:06:18.930 --> 00:06:21.230 align:start position:0%
contains all the same information we
just<00:06:19.140><c> saw</c><00:06:19.320><c> including</c><00:06:20.250><c> colors</c><00:06:20.790><c> on</c><00:06:20.940><c> the</c><00:06:21.030><c> source</c>

00:06:21.230 --> 00:06:21.240 align:start position:0%
just saw including colors on the source
 

00:06:21.240 --> 00:06:23.030 align:start position:0%
just saw including colors on the source
code<00:06:21.510><c> to</c><00:06:21.540><c> indicate</c><00:06:22.050><c> good</c><00:06:22.320><c> and</c><00:06:22.530><c> poor</c><00:06:22.740><c> test</c>

00:06:23.030 --> 00:06:23.040 align:start position:0%
code to indicate good and poor test
 

00:06:23.040 --> 00:06:25.970 align:start position:0%
code to indicate good and poor test
coverage<00:06:23.960><c> these</c><00:06:24.960><c> testing</c><00:06:25.440><c> features</c><00:06:25.800><c> aren't</c>

00:06:25.970 --> 00:06:25.980 align:start position:0%
coverage these testing features aren't
 

00:06:25.980 --> 00:06:28.400 align:start position:0%
coverage these testing features aren't
just<00:06:26.250><c> for</c><00:06:26.400><c> Java</c><00:06:26.610><c> or</c><00:06:26.790><c> j-unit</c><00:06:27.240><c> right</c><00:06:28.170><c> at</c><00:06:28.350><c> the</c>

00:06:28.400 --> 00:06:28.410 align:start position:0%
just for Java or j-unit right at the
 

00:06:28.410 --> 00:06:29.810 align:start position:0%
just for Java or j-unit right at the
beginning<00:06:28.500><c> of</c><00:06:28.800><c> the</c><00:06:28.920><c> screencast</c><00:06:29.250><c> you</c><00:06:29.640><c> saw</c>

00:06:29.810 --> 00:06:29.820 align:start position:0%
beginning of the screencast you saw
 

00:06:29.820 --> 00:06:31.610 align:start position:0%
beginning of the screencast you saw
IntelliJ<00:06:30.420><c> IDEA</c><00:06:30.660><c> has</c><00:06:30.870><c> support</c><00:06:31.200><c> for</c><00:06:31.380><c> multiple</c>

00:06:31.610 --> 00:06:31.620 align:start position:0%
IntelliJ IDEA has support for multiple
 

00:06:31.620 --> 00:06:34.490 align:start position:0%
IntelliJ IDEA has support for multiple
JVM<00:06:32.220><c> testing</c><00:06:32.700><c> frameworks</c><00:06:33.350><c> including</c><00:06:34.350><c> the</c>

00:06:34.490 --> 00:06:34.500 align:start position:0%
JVM testing frameworks including the
 

00:06:34.500 --> 00:06:36.620 align:start position:0%
JVM testing frameworks including the
groovy<00:06:34.830><c> framework</c><00:06:35.250><c> Spock</c><00:06:35.550><c> which</c><00:06:36.180><c> you</c><00:06:36.300><c> can</c><00:06:36.450><c> see</c>

00:06:36.620 --> 00:06:36.630 align:start position:0%
groovy framework Spock which you can see
 

00:06:36.630 --> 00:06:38.840 align:start position:0%
groovy framework Spock which you can see
here<00:06:36.930><c> many</c><00:06:37.680><c> of</c><00:06:37.890><c> the</c><00:06:38.010><c> features</c><00:06:38.190><c> we've</c><00:06:38.520><c> shown</c><00:06:38.730><c> in</c>

00:06:38.840 --> 00:06:38.850 align:start position:0%
here many of the features we've shown in
 

00:06:38.850 --> 00:06:40.460 align:start position:0%
here many of the features we've shown in
this<00:06:38.940><c> video</c><00:06:39.090><c> are</c><00:06:39.450><c> available</c><00:06:39.600><c> in</c><00:06:40.110><c> these</c><00:06:40.260><c> other</c>

00:06:40.460 --> 00:06:40.470 align:start position:0%
this video are available in these other
 

00:06:40.470 --> 00:06:42.710 align:start position:0%
this video are available in these other
frameworks<00:06:40.950><c> and</c><00:06:41.250><c> even</c><00:06:42.030><c> for</c><00:06:42.180><c> testing</c><00:06:42.510><c> in</c><00:06:42.600><c> other</c>

00:06:42.710 --> 00:06:42.720 align:start position:0%
frameworks and even for testing in other
 

00:06:42.720 --> 00:06:45.740 align:start position:0%
frameworks and even for testing in other
languages<00:06:43.170><c> like</c><00:06:43.230><c> JavaScript</c><00:06:43.950><c> in</c><00:06:44.730><c> this</c><00:06:45.480><c> video</c>

00:06:45.740 --> 00:06:45.750 align:start position:0%
languages like JavaScript in this video
 

00:06:45.750 --> 00:06:48.230 align:start position:0%
languages like JavaScript in this video
you<00:06:45.840><c> saw</c><00:06:46.110><c> how</c><00:06:46.140><c> to</c><00:06:46.350><c> create</c><00:06:46.500><c> run</c><00:06:47.400><c> rerun</c><00:06:48.060><c> and</c>

00:06:48.230 --> 00:06:48.240 align:start position:0%
you saw how to create run rerun and
 

00:06:48.240 --> 00:06:50.750 align:start position:0%
you saw how to create run rerun and
debug<00:06:48.600><c> tests</c><00:06:49.080><c> as</c><00:06:49.230><c> well</c><00:06:49.920><c> as</c><00:06:50.040><c> being</c><00:06:50.250><c> able</c><00:06:50.400><c> to</c><00:06:50.550><c> see</c>

00:06:50.750 --> 00:06:50.760 align:start position:0%
debug tests as well as being able to see
 

00:06:50.760 --> 00:06:52.930 align:start position:0%
debug tests as well as being able to see
the<00:06:50.910><c> coverage</c><00:06:51.270><c> of</c><00:06:51.390><c> your</c><00:06:51.450><c> automated</c><00:06:51.960><c> tests</c>

00:06:52.930 --> 00:06:52.940 align:start position:0%
the coverage of your automated tests
 

00:06:52.940 --> 00:06:56.420 align:start position:0%
the coverage of your automated tests
thanks<00:06:53.940><c> for</c><00:06:54.090><c> watching</c>

