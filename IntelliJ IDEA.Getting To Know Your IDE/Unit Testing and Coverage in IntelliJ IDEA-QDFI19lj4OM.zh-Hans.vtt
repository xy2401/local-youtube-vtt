WEBVTT
Kind: captions
Language: zh-Hans

00:00:00.030 --> 00:00:04.110
在这个视频中，我们将要看

00:00:02.129 --> 00:00:06.540
在以下环境中创建和运行自动化测试

00:00:04.110 --> 00:00:10.380
 IntelliJ IDEA以及如何获得报道

00:00:06.540 --> 00:00:12.120
测试信息IntelliJ IDEA 

00:00:10.380 --> 00:00:15.120
旨在使它尽可能容易

00:00:12.120 --> 00:00:17.010
导航到或创建测试，以便我尝试

00:00:15.120 --> 00:00:19.740
导航到生产测试

00:00:17.010 --> 00:00:23.340
类，IDE找不到它

00:00:19.740 --> 00:00:25.140
询问您是否要创建它

00:00:23.340 --> 00:00:27.689
默认情况下，您有几个选项

00:00:25.140 --> 00:00:29.820
要创建的测试类型

00:00:27.689 --> 00:00:33.270
使用J和4，因为这仍然是最多的

00:00:29.820 --> 00:00:34.620
 Java单元测试的通用框架

00:00:33.270 --> 00:00:36.149
当然可以更改名称

00:00:34.620 --> 00:00:37.680
测试您是否愿意，是否有选择

00:00:36.149 --> 00:00:40.110
用于生成设置和拆卸

00:00:37.680 --> 00:00:42.239
方法中的所有测试

00:00:40.110 --> 00:00:45.780
您正在测试的课程，但我们要

00:00:42.239 --> 00:00:47.579
从一个空的测试类开始

00:00:45.780 --> 00:00:51.230
使用命令生成新的测试方法

00:00:47.579 --> 00:00:53.489
 N或alt Windows和Linux的插入

00:00:51.230 --> 00:00:55.129
 IntelliJ IDEA使您轻松实现

00:00:53.489 --> 00:00:57.480
勾勒出您要编写的测试

00:00:55.129 --> 00:01:00.930
提供通常的代码完成和

00:00:57.480 --> 00:01:02.579
准备运行时的建议

00:01:00.930 --> 00:01:03.899
测试您可以这样做

00:01:02.579 --> 00:01:06.390
将显示的不同方式

00:01:03.899 --> 00:01:08.250
在整个视频中，第一个和

00:01:06.390 --> 00:01:11.090
可能最简单的方法是使用

00:01:08.250 --> 00:01:14.159
测试方法上的装订线图标以运行它

00:01:11.090 --> 00:01:15.540
我们的测试失败了

00:01:14.159 --> 00:01:18.509
尚未实现功能

00:01:15.540 --> 00:01:21.299
但是IntelliJ IDEA向您显示了失败

00:01:18.509 --> 00:01:22.860
为什么失败，并提供详细

00:01:21.299 --> 00:01:25.200
实际与预期之间的比较

00:01:22.860 --> 00:01:28.170
值对于更多有用

00:01:25.200 --> 00:01:30.930
复杂值，例如JSON或complex 

00:01:28.170 --> 00:01:32.790
我们可以导航到的域对象

00:01:30.930 --> 00:01:35.250
我们的实现使最简单

00:01:32.790 --> 00:01:37.350
修复测试，这次我们将使用

00:01:35.250 --> 00:01:40.280
导航栏中的运行图标

00:01:37.350 --> 00:01:43.220
再次运行测试

00:01:40.280 --> 00:01:45.780
现在它过去了，所以一切都变成绿色

00:01:43.220 --> 00:01:48.210
这次，当我们选择导航到

00:01:45.780 --> 00:01:49.740
测试IntelliJ IDEA找到了我们的新产品

00:01:48.210 --> 00:01:52.170
测试课，我们可以直接跳到

00:01:49.740 --> 00:01:53.460
 IntelliJ IDEA使其非常

00:01:52.170 --> 00:01:56.220
直接开发Ana 

00:01:53.460 --> 00:01:58.890
以测试驱动的开发方式为例

00:01:56.220 --> 00:02:00.540
现在我要创建另一个测试

00:01:58.890 --> 00:02:04.530
确定我的其他功能

00:02:00.540 --> 00:02:07.080
这次我将使用情绪分析方法

00:02:04.530 --> 00:02:10.050
键盘快捷键Shift Ctrl R开启

00:02:07.080 --> 00:02:12.900
 Mac或Windows上的shift ctrl f10和

00:02:10.050 --> 00:02:14.820
 Linux运行我的新方法取回

00:02:12.900 --> 00:02:16.440
到测试中的生产代码

00:02:14.820 --> 00:02:19.530
使用与进入相同的快捷方式

00:02:16.440 --> 00:02:21.260
从代码移位命令T或

00:02:19.530 --> 00:02:23.010
在Windows和Linux上移动ctrl T 

00:02:21.260 --> 00:02:24.660
掌握这些快捷方式将

00:02:23.010 --> 00:02:26.670
大大加快了编码速度， 

00:02:24.660 --> 00:02:28.740
现在测试我们在生产代码中

00:02:26.670 --> 00:02:31.970
我们可以进行最简单的更改

00:02:28.740 --> 00:02:31.970
对两个测试都满意

00:02:32.500 --> 00:02:37.240
完成后，我们可以重新运行最后一个

00:02:34.300 --> 00:02:40.780
用ctrl f5测试，我们应该看到这个

00:02:37.240 --> 00:02:42.940
变绿以及修复问题不是

00:02:40.780 --> 00:02:44.470
总是那么容易，所以让我们回到我们的

00:02:42.940 --> 00:02:47.620
测试班，我们还有另一个新的

00:02:44.470 --> 00:02:49.630
测试方法测试中的装订线图标

00:02:47.620 --> 00:02:51.760
班级在测试旁边显示一个绿色圆圈

00:02:49.630 --> 00:02:54.900
已经运行并通过的

00:02:51.760 --> 00:02:57.160
新测试只有一个绿色的图标

00:02:54.900 --> 00:02:59.470
当我们运行此类中的所有测试时

00:02:57.160 --> 00:03:02.440
使用班级装订线图标，我们可以

00:02:59.470 --> 00:03:04.090
看到我们的新测试失败，请点击

00:03:02.440 --> 00:03:07.240
测试失败将其带入编辑器

00:03:04.090 --> 00:03:08.620
如果我们不知道为什么这个测试失败了，我们

00:03:07.240 --> 00:03:10.660
可能在生产中设置断点

00:03:08.620 --> 00:03:12.640
代码，然后我们可以选择调试

00:03:10.660 --> 00:03:16.750
右键单击只是失败的测试

00:03:12.640 --> 00:03:18.670
在运行窗口中，我什至可以放

00:03:16.750 --> 00:03:20.890
我的lambda表达式的断点

00:03:18.670 --> 00:03:23.880
流操作，然后逐步执行

00:03:20.890 --> 00:03:23.880
看看可能是什么问题

00:03:25.030 --> 00:03:30.580
当我认为我已经解决了问题时

00:03:27.260 --> 00:03:30.580
可以照常重新运行测试

00:03:31.420 --> 00:03:35.319
有很多选择， 

00:03:33.310 --> 00:03:37.720
设置以在IntelliJ IDEA中运行测试

00:03:35.319 --> 00:03:40.000
为了演示这些，我将全部运行

00:03:37.720 --> 00:03:42.010
实际应用中的测试

00:03:40.000 --> 00:03:44.680
默认情况下，IDE将向您显示一组

00:03:42.010 --> 00:03:47.170
像这样运行的所有测试

00:03:44.680 --> 00:03:48.780
测试通过，您会看到绿色图标，并且

00:03:47.170 --> 00:03:50.920
运行窗口中的测试名称

00:03:48.780 --> 00:03:52.930
因为我们可能更感兴趣

00:03:50.920 --> 00:03:56.350
您可以选择失败胜于成功

00:03:52.930 --> 00:03:58.330
隐藏同样通过的测试

00:03:56.350 --> 00:04:00.849
可以隐藏被忽略或禁用测试，如果您

00:03:58.330 --> 00:04:02.830
选择您可以对测试进行排序

00:04:00.849 --> 00:04:05.140
而不是按字母顺序

00:04:02.830 --> 00:04:06.819
找到它们的顺序，您可以

00:04:05.140 --> 00:04:08.830
展开以查看所有单个测试

00:04:06.819 --> 00:04:10.900
隐藏细节的方法或合同

00:04:08.830 --> 00:04:12.340
运行窗口显示很多

00:04:10.900 --> 00:04:15.610
有关状态的信息

00:04:12.340 --> 00:04:17.709
运行测试，例如有多少运行方式

00:04:15.610 --> 00:04:20.350
总共有多少个

00:04:17.709 --> 00:04:22.000
被忽略，有多少失败， 

00:04:20.350 --> 00:04:24.280
进度栏可让您了解

00:04:22.000 --> 00:04:26.080
测试将花费更长的时间， 

00:04:24.280 --> 00:04:29.200
如果单个，则将从绿色变为红色

00:04:26.080 --> 00:04:30.820
测试失败跟踪运行测试力

00:04:29.200 --> 00:04:32.950
显示每个测试运行的窗口

00:04:30.820 --> 00:04:35.020
并让您追踪进度

00:04:32.950 --> 00:04:36.760
测试您可以内联关闭

00:04:35.020 --> 00:04:40.479
统计信息将隐藏时间

00:04:36.760 --> 00:04:42.160
进行每项测试的人很多

00:04:40.479 --> 00:04:43.930
您可以尝试的其他设置

00:04:42.160 --> 00:04:45.760
为了使运行窗口显示

00:04:43.930 --> 00:04:48.970
最有用的信息给您

00:04:45.760 --> 00:04:50.890
例如，您可以拥有窗户

00:04:48.970 --> 00:04:53.020
全部跳到第一个失败的测试

00:04:50.890 --> 00:04:55.230
测试完成，因此您可以修复

00:04:53.020 --> 00:04:59.130
任何问题立即

00:04:55.230 --> 00:05:00.450
现在让我们看看测试范围

00:04:59.130 --> 00:05:02.310
进行一系列测试很高兴

00:05:00.450 --> 00:05:03.870
通过，但是对

00:05:02.310 --> 00:05:05.790
了解代码的哪些区域

00:05:03.870 --> 00:05:08.070
这些测试及更多内容

00:05:05.790 --> 00:05:11.550
重要的是，哪些代码不属于

00:05:08.070 --> 00:05:13.770
这次当我们运行所有的时候进行测试

00:05:11.550 --> 00:05:16.620
我们选择的测试运行所有测试

00:05:13.770 --> 00:05:19.320
默认情况下，它将使用

00:05:16.620 --> 00:05:21.000
 IntelliJ IDEA覆盖工具，但您可以

00:05:19.320 --> 00:05:24.720
选择其他工具，例如jacoco 

00:05:21.000 --> 00:05:26.400
运行所有测试时的设置

00:05:24.720 --> 00:05:29.130
覆盖范围窗口显示了

00:05:26.400 --> 00:05:31.380
如果我们导航到包，则按包覆盖

00:05:29.130 --> 00:05:33.150
我们应用程序的主要包

00:05:31.380 --> 00:05:35.070
可以看到哪些课程涵盖得很好

00:05:33.150 --> 00:05:37.950
通过测试，可能还需要更多

00:05:35.070 --> 00:05:39.810
彻底测试此信息是

00:05:37.950 --> 00:05:42.420
也可以在项目窗口中找到

00:05:39.810 --> 00:05:44.550
打开时的包和类级别

00:05:42.420 --> 00:05:47.250
编辑器中的类的颜色

00:05:44.550 --> 00:05:51.150
装订线显示绿色的覆盖级别

00:05:47.250 --> 00:05:52.800
高覆盖红色，低这些颜色

00:05:51.150 --> 00:05:54.510
可以配置

00:05:52.800 --> 00:05:56.070
如果你像我一样特别有用

00:05:54.510 --> 00:05:59.400
并在区分红色和

00:05:56.070 --> 00:06:01.170
与所有IntelliJ IDEA窗口一样呈绿色

00:05:59.400 --> 00:06:03.210
覆盖范围窗口具有用于

00:06:01.170 --> 00:06:06.090
根据以下内容定制显示

00:06:03.210 --> 00:06:08.940
您发现最有用的东西

00:06:06.090 --> 00:06:10.500
生成HTML覆盖率报告，因此，如果

00:06:08.940 --> 00:06:12.510
您确实在覆盖范围内运行测试

00:06:10.500 --> 00:06:14.310
 IDE，并希望显示结果

00:06:12.510 --> 00:06:17.220
与团队的其他成员或外部

00:06:14.310 --> 00:06:18.930
各方，您可以共享此报告及其

00:06:17.220 --> 00:06:21.240
包含我们所有相同的信息

00:06:18.930 --> 00:06:23.040
刚刚看到包括来源上的颜色

00:06:21.240 --> 00:06:25.980
表示测试的好坏的代码

00:06:23.040 --> 00:06:28.410
没有涵盖这些测试功能

00:06:25.980 --> 00:06:29.820
仅适用于Java或j单元

00:06:28.410 --> 00:06:31.620
您看到的截屏视频的开始

00:06:29.820 --> 00:06:34.500
 IntelliJ IDEA支持多种

00:06:31.620 --> 00:06:36.630
 JVM测试框架包括

00:06:34.500 --> 00:06:38.850
您可以看到的groovy框架Spock 

00:06:36.630 --> 00:06:40.470
这里我们展示了许多功能

00:06:38.850 --> 00:06:42.720
这部影片可在其他影片中找到

00:06:40.470 --> 00:06:45.750
框架，甚至用于其他测试

00:06:42.720 --> 00:06:48.240
该视频中的JavaScript之类的语言

00:06:45.750 --> 00:06:50.760
您看到了如何创建运行重新运行以及

00:06:48.240 --> 00:06:52.940
调试测试以及能够看到

00:06:50.760 --> 00:06:56.420
自动化测试的范围

00:06:52.940 --> 00:06:56.420
谢谢收看

