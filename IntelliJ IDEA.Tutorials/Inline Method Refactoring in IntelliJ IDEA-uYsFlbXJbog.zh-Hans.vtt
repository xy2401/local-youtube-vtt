WEBVTT
Kind: captions
Language: zh-Hans

00:00:03.879 --> 00:00:07.759
 IntelliJ IDEA具有强大的重构功能。 

00:00:07.759 --> 00:00:14.340
在此截屏视频中，我们将介绍为什么，何时以及如何应用内联方法重构

00:00:14.340 --> 00:00:18.270
以及IntelliJ IDEA如何帮助您入门。 

00:00:18.270 --> 00:00:21.869
内联重构的思想很简单。 

00:00:21.869 --> 00:00:25.419
只需将方法调用替换为其内容即可。 

00:00:25.419 --> 00:00:31.239
在IntelliJ IDEA中，您可以选择方法名称，也可以将光标置于开始/ 

00:00:31.239 --> 00:00:33.900
方法名称的结尾/中间。 

00:00:33.900 --> 00:00:36.870
使用菜单中的“内联方法”。 

00:00:36.870 --> 00:00:44.160
或者，您也可以在Windows / Linux上使用快捷键Alt + Ctrl + N，在Windows上使用Option + Command + N 

00:00:44.160 --> 00:00:45.930
苹果系统。 

00:00:45.930 --> 00:00:51.640
内联后，IntelliJ IDEA使您可以选择删除或保留该方法

00:00:51.640 --> 00:00:52.640
内容。 

00:00:52.640 --> 00:00:55.800
对于此示例，我们将删除该方法。 

00:00:55.800 --> 00:00:58.290
但是，为什么要内联方法呢？ 

00:00:58.290 --> 00:01:00.850
让我们处理一些用例。 

00:01:00.850 --> 00:01:07.570
当方法调用破坏代码流而不是简化代码流时，您可以考虑

00:01:07.570 --> 00:01:11.210
应用内联方法。 

00:01:11.210 --> 00:01:18.909
在此代码中，对方法compareRatingWithMethodParameter（）的调用将不必要的间接插入

00:01:18.909 --> 00:01:21.700
方法scheduleSession（）。 

00:01:21.700 --> 00:01:26.460
可以通过内联方法compareRatingWithMethodParameter（）来简化此代码。 

00:01:26.460 --> 00:01:34.520
但是，您不必内联所有仅定义一行代码的方法。 

00:01:34.520 --> 00:01:38.740
该决定应取决于它是否有助于您了解自己的流程。 

00:01:38.740 --> 00:01:39.810
方法。 

00:01:39.810 --> 00:01:46.170
在将代码迁移到更高的Java版本时，您可能需要内联一些方法

00:01:46.170 --> 00:01:49.009
以便您可以一起修改它。 

00:01:49.009 --> 00:01:56.340
在此示例中，让我们内联这两种方法，然后查看如何进一步重构

00:01:56.340 --> 00:01:58.140
此代码。 

00:01:58.140 --> 00:02:01.429
让我们从内联方法sortSpeakerNames开始。 

00:02:01.429 --> 00:02:05.119
您可以在截屏视频的底部看到快捷方式。 

00:02:05.119 --> 00:02:08.310
现在，内联方法extractNamesFromSpeakerList（）。 

00:02:08.310 --> 00:02:13.100
是时候应用IntelliJ IDEA的魔力了。 

00:02:13.100 --> 00:02:15.820
让我们首先将for循环转换为流。 

00:02:15.820 --> 00:02:21.920
通过使用Alt + Enter，您可以在代码中调用上下文操作-这将建议

00:02:21.920 --> 00:02:24.060
您可以使用代码构造。 

00:02:24.060 --> 00:02:32.250
现在，我将使用F2然后使用IntelliJ IDEA跳转到下一个错误/建议

00:02:32.250 --> 00:02:36.140
 Alt + Enter查看可用的建议。 

00:02:36.140 --> 00:02:42.390
您可以使用此组合删除未使用的导入，获取有关流操作的建议， 

00:02:42.390 --> 00:02:52.120
删除多余的局部变量等等。 

00:02:52.120 --> 00:02:57.230
通常，您可能会看到一段代码，其重构能力很差。 

00:02:57.230 --> 00:03:01.030
此方法中的代码几乎在所有行上都调用另一个方法。 

00:03:01.030 --> 00:03:08.150
虽然可读，但让我们看看是否可以内联这些方法并再次进行重构

00:03:08.150 --> 00:03:10.830
改善代码的意图。 

00:03:10.830 --> 00:03:20.250
让我们先内联方法outputTrackName和另一个方法outputSpeakerList。 

00:03:20.250 --> 00:03:25.530
由于这两种方法都用于输出参数值，因此我们将它们提取到

00:03:25.530 --> 00:03:29.080
使用提取方法重构的单个方法。 

00:03:29.080 --> 00:03:37.900
现在，让我们内联其他两个方法-filterSpeakersWithoutTracks和findSpeakerSpeakingOnTrack。 

00:03:37.900 --> 00:03:44.740
现在，让我们删除一个中间收集并将两个流连接在一起。 

00:03:44.740 --> 00:03:51.390
通过在过滤器方法上使用Alt + Enter，您可以选择合并流上的过滤器链。 

00:03:51.390 --> 00:03:57.850
通过使用F2，您可以导航到下一个错误，该错误指出本地变量专门小组成员

00:03:57.850 --> 00:03:59.220
是多余的。 

00:03:59.220 --> 00:04:05.360
使用Alt + Enter内联变量。 

00:04:05.360 --> 00:04:13.080
 IntelliJ IDEA 2019.2对内联方法重构进行了重大改进。 

00:04:13.080 --> 00:04:19.750
一个方法可以通过定义多个return语句来包括多个出口点。 

00:04:19.750 --> 00:04:27.370
在IntelliJ IDEA 2019.2中内联这种方法时，可以对其进行修改以仅定义

00:04:27.370 --> 00:04:33.800
一个出口，以单个return语句的形式存在。 

00:04:33.800 --> 00:04:41.310
 IntelliJ IDEA将此功能称为“转换为单个出口点”。 

00:04:41.310 --> 00:04:49.770
通过IntelliJ IDEA 2019.2中的增强功能，内联方法重构也支持

00:04:49.770 --> 00:04:52.350
否定呼叫站点。 

00:04:52.350 --> 00:04:57.791
在这段代码中，当您将方法check（）内联为负数时，它将不会被修改为

00:04:57.791 --> 00:04:59.800
 “单个出口点”。 

00:04:59.800 --> 00:05:04.240
内联此方法之前，请注意返回值。 

00:05:04.240 --> 00:05:11.360
它在此处返回false，在此处返回false，并在此处返回此表达式的结果。 

00:05:11.360 --> 00:05:15.660
让我们内联此方法。 

00:05:15.660 --> 00:05:22.590
查看内联代码如何取反-注意返回值的反转（从false 

00:05:22.590 --> 00:05:29.370
为true）和条件（从等于到，不等于）。 

00:05:29.370 --> 00:05:32.430
作为开发人员，我们经常重构代码。 

00:05:32.430 --> 00:05:39.690
为了有效地重构，我们必须知道用例-为什么，何时以及如何重构

00:05:39.690 --> 00:05:40.690
它。 

00:05:40.690 --> 00:05:46.100
 IntelliJ IDEA通过自动为您提供各种重构选项起着至关重要的作用。 

00:05:46.100 --> 00:05:46.990
感谢收看。 

