WEBVTT
Kind: captions
Language: zh-Hans

00:00:03.820 --> 00:00:06.850
我想做的是我想过去

00:00:05.440 --> 00:00:09.630
您可能会注意到的一些事情

00:00:06.850 --> 00:00:13.749
当您第一次打开

00:00:09.630 --> 00:00:15.999
打开更新的IDE有一些

00:00:13.749 --> 00:00:18.039
我注意到的肯定是

00:00:15.999 --> 00:00:23.349
刚开始使用Java的人

00:00:18.039 --> 00:00:25.960
例如IntelliJ 15和我的驱动程序

00:00:23.349 --> 00:00:27.460
测试特别好

00:00:25.960 --> 00:00:29.589
向我指出我在哪里

00:00:27.460 --> 00:00:31.720
重复的代码有点

00:00:29.589 --> 00:00:33.490
令人震惊，但事实就是如此

00:00:31.720 --> 00:00:36.010
在这里你可以看到它说找到

00:00:33.490 --> 00:00:38.920
如果按此文件中的重复代码

00:00:36.010 --> 00:00:42.070
 alt输入它将允许我导航

00:00:38.920 --> 00:00:44.199
到重复项现在将显示

00:00:42.070 --> 00:00:47.079
超过五行的重复代码

00:00:44.199 --> 00:00:49.030
代码我也可以根据它进行配置

00:00:47.079 --> 00:00:52.390
以您可以进行任何检查的方式

00:00:49.030 --> 00:00:54.579
所以我可以将其关闭或调整

00:00:52.390 --> 00:00:55.989
检查有点说我不

00:00:54.579 --> 00:00:58.239
真的很在乎重复的代码

00:00:55.989 --> 00:01:01.149
例如测试或我只在乎

00:00:58.239 --> 00:01:03.160
它在特定范围内或者我可能想要

00:01:01.149 --> 00:01:06.550
将其设置为早上或更长时间

00:01:03.160 --> 00:01:09.970
严重的错误，所以像任何ins，它可以

00:01:06.550 --> 00:01:11.710
完全配置即可摆脱

00:01:09.970 --> 00:01:13.840
当然是通过重构

00:01:11.710 --> 00:01:15.460
你可以穿一件外套，这应该是

00:01:13.840 --> 00:01:17.170
这应该是合理的

00:01:15.460 --> 00:01:19.060
大多数去过的人都熟悉

00:01:17.170 --> 00:01:20.560
无论如何，使用重构工具

00:01:19.060 --> 00:01:28.090
说我们将其提取为一种方法， 

00:01:20.560 --> 00:01:29.860
我们称它为草药提取物

00:01:28.090 --> 00:01:32.770
进入我们的方法，这是唯一的

00:01:29.860 --> 00:01:38.799
在代码之间发生变化的东西

00:01:32.770 --> 00:01:40.840
将其放入参数并按照

00:01:38.799 --> 00:01:42.939
通常IntelliJ IDEA会找到

00:01:40.840 --> 00:01:46.479
重复代码并提出替换它

00:01:42.939 --> 00:01:49.270
对你来说，现在我有两个测试

00:01:46.479 --> 00:01:51.460
正在调用相同的方法，依此类推

00:01:49.270 --> 00:01:54.009
我重复的编码器已减少为

00:01:51.460 --> 00:01:57.040
一个被两个调用的方法

00:01:54.009 --> 00:01:58.600
现在不同的参数你

00:01:57.040 --> 00:02:00.880
当我看着时可能已经注意到

00:01:58.600 --> 00:02:04.270
这个测试是我很少跑

00:02:00.880 --> 00:02:05.759
槽中我的图标，它显示

00:02:04.270 --> 00:02:08.289
我上次我进行这项测试

00:02:05.759 --> 00:02:10.360
一切都变绿了，一切都还好

00:02:08.289 --> 00:02:13.600
让我给你看一个测试的例子

00:02:10.360 --> 00:02:16.690
我还没有运行它的地方，让我们来

00:02:13.600 --> 00:02:20.000
看一些随意的测试

00:02:16.690 --> 00:02:22.160
在这里，它告诉我在哪里我可以

00:02:20.000 --> 00:02:24.590
运行它，以便我可以运行它，我可以调试它， 

00:02:22.160 --> 00:02:27.350
如果我运行它可以覆盖运行

00:02:24.590 --> 00:02:29.570
那么在我的情况下，因为这是一个

00:02:27.350 --> 00:02:30.920
这样更大的项目并获得采用

00:02:29.570 --> 00:02:38.660
以逐步或j单位运行

00:02:30.920 --> 00:02:40.100
配置一旦运行就可以了

00:02:38.660 --> 00:02:41.840
会告诉我所有的测试

00:02:40.100 --> 00:02:45.680
去那里绿色，然后我当然

00:02:41.840 --> 00:02:47.510
可以从这里重新运行测试

00:02:45.680 --> 00:02:57.230
单个测试或调试单个

00:02:47.510 --> 00:03:03.110
测试还是完全没有

00:02:57.230 --> 00:03:06.110
忽略让我们尝试这个哦，我知道为什么

00:03:03.110 --> 00:03:13.130
我打开所有其他监视器的窗口

00:03:06.110 --> 00:03:15.260
这不是超级有用，所以现在我

00:03:13.130 --> 00:03:17.270
我已经有一些不同的

00:03:15.260 --> 00:03:19.910
我可以运行测试或配置的方式

00:03:17.270 --> 00:03:21.830
但这只是另一个，所以

00:03:19.910 --> 00:03:25.400
我发现这真的很有用

00:03:21.830 --> 00:03:26.870
我正在运行测试，我可以看到，我可以看到

00:03:25.400 --> 00:03:28.580
上次我所有测试的状态

00:03:26.870 --> 00:03:32.450
他们跑了，或者也许我还没跑

00:03:28.580 --> 00:03:36.800
他们显然，如果这些测试之一

00:03:32.450 --> 00:03:46.500
失败，我们将其设置为false，然后

00:03:36.800 --> 00:03:50.030
然后尝试运行它

00:03:46.500 --> 00:03:50.030
一个将更改为失败图标

00:03:52.100 --> 00:03:56.130
在我们进行测试的时候

00:03:54.180 --> 00:03:59.340
让我们来看看我想要的新产品

00:03:56.130 --> 00:04:00.930
测试，所以很好，不是很多

00:03:59.340 --> 00:04:02.400
全新的用户界面，它只是一个更新

00:04:00.930 --> 00:04:06.420
 UI版本，我将全部运行

00:04:02.400 --> 00:04:11.209
测试也是如此，以便我们可以看到

00:04:06.420 --> 00:04:13.560
结果在这里像现在一样新

00:04:11.209 --> 00:04:15.330
以前你可以得到统计数据

00:04:13.560 --> 00:04:16.799
用于在带有

00:04:15.330 --> 00:04:18.750
单独的表格告诉您几点

00:04:16.799 --> 00:04:21.810
进行个别测试，所以

00:04:18.750 --> 00:04:25.050
现在，我有时间去跑步

00:04:21.810 --> 00:04:28.169
测试与实际测试相符

00:04:25.050 --> 00:04:31.080
自己，所以我也可以做点什么

00:04:28.169 --> 00:04:33.380
就像我可以按时间重新排列测试

00:04:31.080 --> 00:04:35.880
采取，所以我可以看看长的和

00:04:33.380 --> 00:04:37.919
终于找到要做的事情

00:04:35.880 --> 00:04:39.240
如果花费的时间少一点

00:04:37.919 --> 00:04:42.150
感兴趣的东西

00:04:39.240 --> 00:04:43.890
对我来说很有趣

00:04:42.150 --> 00:04:46.919
我可以执行的更新测试

00:04:43.890 --> 00:04:49.260
面板是我现在可以将其放在

00:04:46.919 --> 00:04:51.390
我不只是在界面的左侧还是右侧

00:04:49.260 --> 00:04:55.430
总是必须把它放在最下面

00:04:51.390 --> 00:04:57.720
如果我现在把它放到唯一找到的哦

00:04:55.430 --> 00:05:00.810
不好意思我看错地方了

00:04:57.720 --> 00:05:05.160
我可以将其移到右侧

00:05:00.810 --> 00:05:06.540
它会自动自动化

00:05:05.160 --> 00:05:08.580
找出现在在右边运行

00:05:06.540 --> 00:05:11.700
最优惠的价格请咨询

00:05:08.580 --> 00:05:13.290
在最好的自己之下，所以我有

00:05:11.700 --> 00:05:14.910
关于我的操作方式更具通用性

00:05:13.290 --> 00:05:18.050
显示我的测试结果取决于

00:05:14.910 --> 00:05:20.130
显然是屏幕布局等等

00:05:18.050 --> 00:05:22.169
我还有其他事情可以做

00:05:20.130 --> 00:05:25.380
测试结果，例如我可以导出

00:05:22.169 --> 00:05:27.750
我可以将它们导出为HTML XML 

00:05:25.380 --> 00:05:29.820
显然，这对于保存测试很有用

00:05:27.750 --> 00:05:32.580
结果或共享特定结果

00:05:29.820 --> 00:05:34.440
与团队等等，等等

00:05:32.580 --> 00:05:36.000
我可以做的另一件事是我可以看

00:05:34.440 --> 00:05:39.510
我过去进行的所有测试

00:05:36.000 --> 00:05:41.400
当我运行它们时，我可以重新打开它

00:05:39.510 --> 00:05:44.150
看看测试结果

00:05:41.400 --> 00:05:46.740
让我们选择另一种测试

00:05:44.150 --> 00:05:49.229
这样测试结果就不必了

00:05:46.740 --> 00:05:53.850
重新运行测试以查看

00:05:49.229 --> 00:05:55.349
先前的测试结果集

00:05:53.850 --> 00:05:57.530
看到那个测试结果以及何时

00:05:55.349 --> 00:05:57.530
失败了

00:05:57.580 --> 00:06:02.779
这里的其他主要努力之一是

00:05:59.809 --> 00:06:04.879
尝试对此进行测试

00:06:02.779 --> 00:06:06.529
测试你我更加一致

00:06:04.879 --> 00:06:08.270
跨所有不同的框架

00:06:06.529 --> 00:06:10.129
您正在使用的库

00:06:08.270 --> 00:06:12.199
如果您运行的是JavaScript 

00:06:10.129 --> 00:06:13.639
测试框架，您会发现它非常

00:06:12.199 --> 00:06:15.110
相似且非常熟悉

00:06:13.639 --> 00:06:16.969
易于从图书馆和

00:06:15.110 --> 00:06:24.529
语言，您会得到类似的结果

00:06:16.969 --> 00:06:28.279
在IDE中的经验和最终体验

00:06:24.529 --> 00:06:30.759
运行应用程序或

00:06:28.279 --> 00:06:34.819
测试让我们切换到另一个

00:06:30.759 --> 00:06:36.439
如果我正在运行另一个项目

00:06:34.819 --> 00:06:43.939
长期运行或长期运行

00:06:36.439 --> 00:06:47.029
测试让我开始这一步，然后我的

00:06:43.939 --> 00:06:48.830
运行图标更改为重新运行图标，以便

00:06:47.029 --> 00:06:50.419
对我来说更清楚的是我已经

00:06:48.830 --> 00:06:52.490
运行此服务，如果我想

00:06:50.419 --> 00:06:55.460
再次运行它将关闭此服务

00:06:52.490 --> 00:06:58.490
关闭并重新启动它，特别是

00:06:55.460 --> 00:07:00.139
对于这样的应用程序很有用

00:06:58.490 --> 00:07:01.789
我有四个或五个不同的地方

00:07:00.139 --> 00:07:03.740
服务，我经常想

00:07:01.789 --> 00:07:05.240
重新启动我不提供的个别服务

00:07:03.740 --> 00:07:13.729
一定要开始一个全新的

00:07:05.240 --> 00:07:16.249
版本，还有我想要的一个区域

00:07:13.729 --> 00:07:20.509
在本节中涵盖

00:07:16.249 --> 00:07:21.979
看着寻找道路，然后有

00:07:20.509 --> 00:07:23.509
预览搜索的能力

00:07:21.979 --> 00:07:26.330
结果，假设我要搜索

00:07:23.509 --> 00:07:29.749
对于我项目中的所有lambda 

00:07:26.330 --> 00:07:31.819
原因，然后在预览选项卡中我可以看到

00:07:29.749 --> 00:07:34.330
我在用小东西的任何地方

00:07:31.819 --> 00:07:37.490
在雪佛龙（Chevron）下

00:07:34.330 --> 00:07:40.309
一个实际的lambda，所以我可以轻弹一下

00:07:37.490 --> 00:07:41.959
通过看看，看看这是

00:07:40.309 --> 00:07:44.990
这是我想导航到的东西

00:07:41.959 --> 00:07:47.599
或如果这可能是误导的，因为

00:07:44.990 --> 00:07:49.879
在这种情况下，这是一个正则表达式

00:07:47.599 --> 00:07:52.779
不是lambda，那我当然可以

00:07:49.879 --> 00:07:52.779
直接导航到

00:07:55.440 --> 00:07:59.390
关于UI改进的最后一件事

00:07:56.640 --> 00:08:01.530
我特别喜欢的是

00:07:59.390 --> 00:08:04.470
特别是因为我实际上

00:08:01.530 --> 00:08:07.100
色盲有改变的选择

00:08:04.470 --> 00:08:09.480
用户界面要友好得多

00:08:07.100 --> 00:08:11.790
像我这样的色盲人，我可以

00:08:09.480 --> 00:08:15.240
将其更改为将要存在的内容

00:08:11.790 --> 00:08:16.170
减少对红色和绿色的依赖

00:08:15.240 --> 00:08:18.540
告诉我之间的区别

00:08:16.170 --> 00:08:20.130
我去过的用户界面中的不同事物

00:08:18.540 --> 00:08:21.870
和我自己玩一点

00:08:20.130 --> 00:08:24.390
作为一个色盲人很有趣

00:08:21.870 --> 00:08:25.980
看你丢失了多少个问题

00:08:24.390 --> 00:08:27.870
因为事物以红色显示， 

00:08:25.980 --> 00:08:30.300
绿色和橙色，您不知道

00:08:27.870 --> 00:08:32.550
如果你是色盲我

00:08:30.300 --> 00:08:33.990
强烈建议打开此设置

00:08:32.550 --> 00:08:36.479
如果有什么想

00:08:33.990 --> 00:08:38.550
看到然后反馈到水脑

00:08:36.479 --> 00:08:40.110
以及如何改善这一点

00:08:38.550 --> 00:08:41.219
我认为这是特别的功能

00:08:40.110 --> 00:08:44.370
真的很有趣，我将要使用

00:08:41.219 --> 00:08:47.670
从现在开始还有更多

00:08:44.370 --> 00:08:49.860
编辑器和UI更改的简短介绍

00:08:47.670 --> 00:08:51.120
那应该是那些

00:08:49.860 --> 00:08:55.110
对您而言，对您而言相当明显

00:08:51.120 --> 00:08:57.110
像往常一样开始使用UI 

00:08:55.110 --> 00:08:59.490
调试器的改进数量

00:08:57.110 --> 00:09:00.810
所以特别是在lambda周围

00:08:59.490 --> 00:09:07.350
表达式，让我们快速浏览

00:09:00.810 --> 00:09:09.420
在这里看起来像什么

00:09:07.350 --> 00:09:11.130
例如我有一个流，这将是一个

00:09:09.420 --> 00:09:12.840
我有流的相当普遍的用途

00:09:11.130 --> 00:09:15.120
一条小溪和一些lambda 

00:09:12.840 --> 00:09:18.510
表达进入我的许多

00:09:15.120 --> 00:09:20.490
现在在这里进行流操作

00:09:18.510 --> 00:09:22.830
我可以在左边装订

00:09:20.490 --> 00:09:24.960
实际看到一个小lambda图标，它

00:09:22.830 --> 00:09:26.670
告诉我现在的lambda类型

00:09:24.960 --> 00:09:28.740
觉得这特别有用，因为

00:09:26.670 --> 00:09:30.810
现在我开始在Java 8中使用成员

00:09:28.740 --> 00:09:32.760
您会发现很多类型

00:09:30.810 --> 00:09:35.220
之所以消失，是因为编译器可以

00:09:32.760 --> 00:09:37.140
解决它们，但作为开发人员

00:09:35.220 --> 00:09:38.850
不能总是解决它们，这是

00:09:37.140 --> 00:09:41.190
有用的是，这告诉我地图需要

00:09:38.850 --> 00:09:43.200
一个功能告诉我那个过滤器

00:09:41.190 --> 00:09:46.050
谓词的类型，所以我可以看到

00:09:43.200 --> 00:09:49.350
我现在可能想要IDE非常容易

00:09:46.050 --> 00:09:51.810
做这个lambda，所以我要看

00:09:49.350 --> 00:09:54.000
特别是在这个特定的

00:09:51.810 --> 00:09:56.250
 lambda我可以选择放

00:09:54.000 --> 00:09:58.200
在最高级别上设置断点，这样我就可以

00:09:56.250 --> 00:10:00.720
当流是

00:09:58.200 --> 00:10:03.030
发起或仅针对个人

00:10:00.720 --> 00:10:06.060
 lambda现在这更有用了

00:10:03.030 --> 00:10:08.220
就是说，当您

00:10:06.060 --> 00:10:10.830
在线上有多个lambda 

00:10:08.220 --> 00:10:13.380
所以如果我压价了就休息一下

00:10:10.830 --> 00:10:15.410
指向这里，然后我可以放置一个断点

00:10:13.380 --> 00:10:17.880
在这些登陆器中的任何一个上

00:10:15.410 --> 00:10:21.330
所以说我在此设置了一个断点

00:10:17.880 --> 00:10:24.500
现在，让我们导航到测试

00:10:21.330 --> 00:10:24.500
尝试调试

00:10:39.420 --> 00:10:44.319
所以现在您可以看到断点停止了

00:10:42.069 --> 00:10:45.910
在地图上的操作是专门

00:10:44.319 --> 00:10:49.060
将其变成小写的lambda 

00:10:45.910 --> 00:10:52.509
字母或定位词，然后按我的步骤

00:10:49.060 --> 00:10:55.509
通过那时，我每次看到那个lambda 

00:10:52.509 --> 00:10:56.560
用另一个词之一

00:10:55.509 --> 00:11:00.339
我们已经实现的其他事情

00:10:56.560 --> 00:11:03.339
是在光标内运行光标的能力

00:11:00.339 --> 00:11:05.410
 lambda，所以如果我将光标放在lambda上

00:11:03.339 --> 00:11:10.660
例如在过滤方法中

00:11:05.410 --> 00:11:19.089
然后我跑这个哎呀，然后我跑到

00:11:10.660 --> 00:11:21.189
有用的断点，它将

00:11:19.089 --> 00:11:23.079
闯入我放我的那个lambda 

00:11:21.189 --> 00:11:25.870
光标，所以这给了我更多

00:11:23.079 --> 00:11:27.759
调试lambda的灵活性

00:11:25.870 --> 00:11:29.290
表达特别是流

00:11:27.759 --> 00:11:31.360
您有很多操作的地方

00:11:29.290 --> 00:11:34.810
不同的lambda操作，我可能

00:11:31.360 --> 00:11:36.759
想要看到任何输入

00:11:34.810 --> 00:11:45.360
我流中的特定阶段

00:11:36.759 --> 00:11:49.750
流水线，所以让我们完成

00:11:45.360 --> 00:11:51.310
我终于会告诉他们下一个

00:11:49.750 --> 00:11:56.750
更改我想要的调试器

00:11:51.310 --> 00:11:58.960
告诉你另一个

00:11:56.750 --> 00:12:01.520
新功能让我们再次调试

00:11:58.960 --> 00:12:04.100
但是这次我们将进一步停止

00:12:01.520 --> 00:12:06.740
停下来，靠近起点

00:12:04.100 --> 00:12:08.420
现在我可能想做的方法

00:12:06.740 --> 00:12:10.910
特别是如果我正在调试更多

00:12:08.420 --> 00:12:13.010
方法链的复杂集合

00:12:10.910 --> 00:12:15.590
方法调用我可能想做的是

00:12:13.010 --> 00:12:18.560
我可能想要一种特定的方法

00:12:15.590 --> 00:12:20.600
尽早完成并返回资产价值，以便

00:12:18.560 --> 00:12:23.030
在这里，我有一个新功能

00:12:20.600 --> 00:12:24.980
强制返回，因此不会进行任何评估

00:12:23.030 --> 00:12:28.190
该方法的其余部分将更多

00:12:24.980 --> 00:12:30.170
此时经理将返回

00:12:28.190 --> 00:12:31.310
问我你想返回什么价值

00:12:30.170 --> 00:12:34.130
因为这应该返回一个

00:12:31.310 --> 00:12:38.840
电影讯息，所以说我返回新

00:12:34.130 --> 00:12:40.310
喜怒无常的消息哦，然后它也会

00:12:38.840 --> 00:12:44.170
给我我期望的自动完成功能

00:12:40.310 --> 00:12:48.650
现在，如果我在其中放一个null 

00:12:44.170 --> 00:12:50.600
它会继续运行，但我的测试会

00:12:48.650 --> 00:12:53.090
失败，因为我有一个空指针，所以

00:12:50.600 --> 00:12:56.060
这对于代替特别有用

00:12:53.090 --> 00:12:58.040
必须调整变量或值

00:12:56.060 --> 00:12:59.630
在特定的类或方法中

00:12:58.040 --> 00:13:02.150
为了强制方法返回

00:12:59.630 --> 00:13:03.890
我可以专门做的事情

00:13:02.150 --> 00:13:12.890
强制返回并告诉它要使用哪个值

00:13:03.890 --> 00:13:15.290
返回最后一件不是

00:13:12.890 --> 00:13:16.610
特别是围绕调试器，但

00:13:15.290 --> 00:13:19.610
对理解有所帮助

00:13:16.610 --> 00:13:22.160
代码里面发生的是

00:13:19.610 --> 00:13:27.440
评估表达类型的能力

00:13:22.160 --> 00:13:29.330
在lambda中，所以在这里我可以说我

00:13:27.440 --> 00:13:30.950
将使用s定位表达式

00:13:29.330 --> 00:13:33.350
会告诉我这是一个

00:13:30.950 --> 00:13:34.910
字符串类型，这在

00:13:33.350 --> 00:13:37.070
学者以前，但现在可用

00:13:34.910 --> 00:13:39.770
对于Java 8 lambdas和groovy作为

00:13:37.070 --> 00:13:41.690
好，再像另一个一样

00:13:39.770 --> 00:13:44.420
其他调整和更改，例如

00:13:41.690 --> 00:13:49.370
像这样调试lambda的能力

00:13:44.420 --> 00:13:50.930
告诉你我只是哪种土地

00:13:49.370 --> 00:13:53.030
从这个想法中获得更多反馈

00:13:50.930 --> 00:13:56.660
关于我的Java 8内部发生了什么

00:13:53.030 --> 00:13:58.070
具体功能也有

00:13:56.660 --> 00:14:00.320
版本周围的更改数量

00:13:58.070 --> 00:14:02.300
某些方面的控制权

00:14:00.320 --> 00:14:04.550
只是小小的改进，以帮助我们

00:14:02.300 --> 00:14:08.000
其中一些是新功能

00:14:04.550 --> 00:14:08.630
我们以前没有的

00:14:08.000 --> 00:14:13.130
首先我是

00:14:08.630 --> 00:14:14.480
显然要考虑重新定基

00:14:13.130 --> 00:14:17.690
不同的团队喜欢一起工作

00:14:14.480 --> 00:14:19.760
不同的方式，所以不是每个人都使用

00:14:17.690 --> 00:14:22.370
改组不是每个人都使用很多，但是

00:14:19.760 --> 00:14:25.370
我们已经完成了，我们已经将改组变成了

00:14:22.370 --> 00:14:27.350
可以与之媲美的功能

00:14:25.370 --> 00:14:32.060
合并，例如，我在此

00:14:27.350 --> 00:14:35.060
如果我单击，分支分支现在要重新设置基准

00:14:32.060 --> 00:14:39.290
在此分支上，我的IntelliJ 15 

00:14:35.060 --> 00:14:40.730
分支，我可以基于这个分支

00:14:39.290 --> 00:14:45.500
与我可以合并到的方式相同

00:14:40.730 --> 00:14:47.930
以前所以如果我按这个应该

00:14:45.500 --> 00:14:50.780
让我立即变基我得到

00:14:47.930 --> 00:14:52.580
如果我想要相同的功能

00:14:50.780 --> 00:14:55.790
也可以从日志中完成

00:14:52.580 --> 00:14:58.160
例子我可以在内部做基础

00:14:55.790 --> 00:14:59.780
 VCS日志也是如此，因此基本上

00:14:58.160 --> 00:15:03.370
您将以相同的方式进行基准调整

00:14:59.780 --> 00:15:03.370
合并具有相同的易用性

00:15:06.490 --> 00:15:12.110
如果您有一个项目，这也可以

00:15:09.170 --> 00:15:14.480
具有多个VCS根，则可以

00:15:12.110 --> 00:15:16.100
也会在这些基础上重新定位，所以这是

00:15:14.480 --> 00:15:17.900
这可能是非常强大的功能

00:15:16.100 --> 00:15:24.230
特别是对于更复杂的项目

00:15:17.900 --> 00:15:27.860
比另一个新的

00:15:24.230 --> 00:15:29.930
功能是其中的能力

00:15:27.860 --> 00:15:31.610
您拥有的各种不同的扩散

00:15:29.930 --> 00:15:33.200
在IntelliJ IDEA中有时

00:15:31.610 --> 00:15:35.120
与旧版本的进行比较

00:15:33.200 --> 00:15:39.260
该文件有时您正在做比较

00:15:35.120 --> 00:15:41.480
在检查中，我们已经做了那些

00:15:39.260 --> 00:15:43.040
不同类型的磁盘等等

00:15:41.480 --> 00:15:45.980
一致，以便您实际上可以进行编辑

00:15:43.040 --> 00:15:48.200
内部差异比较少，这样

00:15:45.980 --> 00:15:50.360
您可以在那里编辑本地文件

00:15:48.200 --> 00:15:52.820
在较少的，所以这是一个小

00:15:50.360 --> 00:15:55.400
变化，另一件事是我们添加了

00:15:52.820 --> 00:15:58.460
在您处于撤消状态的能力

00:15:55.400 --> 00:16:02.090
合并的中间，然后我们添加了

00:15:58.460 --> 00:16:04.400
其他系统的两个新功能

00:16:02.090 --> 00:16:07.550
例如，您可以搁置

00:16:04.400 --> 00:16:09.230
坚持，所以当你做架子时，你不会

00:16:07.550 --> 00:16:11.420
一定只是节省您的本地

00:16:09.230 --> 00:16:14.450
如果您有强力，则上架

00:16:11.420 --> 00:16:16.610
您可以在perforce中安装项目

00:16:14.450 --> 00:16:19.280
它更安全，几乎不可能

00:16:16.610 --> 00:16:21.380
丢失这些更改和另一个功能

00:16:19.280 --> 00:16:21.900
我们增加了管理能力

00:16:21.380 --> 00:16:28.800
斑驳的

00:16:21.900 --> 00:16:30.750
一如既往地

00:16:28.800 --> 00:16:32.220
框架并没有停滞不前

00:16:30.750 --> 00:16:33.960
我们创建了IDE，所以我们添加了

00:16:32.220 --> 00:16:38.250
对更新的附加支持

00:16:33.960 --> 00:16:40.470
框架是如此智能8 

00:16:38.250 --> 00:16:43.680
随着他们去的框架

00:16:40.470 --> 00:16:46.290
在示例Spring 4.2中，我们添加了编码

00:16:43.680 --> 00:16:48.060
我们已经为Spring 4.2提供了帮助

00:16:46.290 --> 00:16:49.950
为spring添加了代码编码帮助

00:16:48.060 --> 00:16:52.080
引导功能，我们已经改善了项目

00:16:49.950 --> 00:16:53.790
那里的春季启动向导

00:16:52.080 --> 00:16:55.530
稍后将是一个单独的网络研讨会

00:16:53.790 --> 00:16:56.730
围绕春天的特色，所以我

00:16:55.530 --> 00:16:59.670
不想花太多时间

00:16:56.730 --> 00:17:00.990
看着那些，因为它们很大

00:16:59.670 --> 00:17:03.120
自己拥有足够的项目权

00:17:00.990 --> 00:17:05.310
有自己的网络研讨会， 

00:17:03.120 --> 00:17:08.400
 Grails 3我们现在支持女孩3 

00:17:05.310 --> 00:17:10.290
 Android用户将会非常高兴

00:17:08.400 --> 00:17:13.110
听到Android中的更新

00:17:10.290 --> 00:17:16.140
 Studio 1.3或1.4已合并到

00:17:13.110 --> 00:17:17.550
 IntelliJ 15也一样，但有两个功能

00:17:16.140 --> 00:17:19.740
我特别想看看

00:17:17.550 --> 00:17:22.350
今天演示在我们的基利安附近

00:17:19.740 --> 00:17:23.750
测试和Docker支持，让我们

00:17:22.350 --> 00:17:26.310
快速浏览一下，我会杀了你

00:17:23.750 --> 00:17:29.550
将切换到我的项目之一

00:17:26.310 --> 00:17:31.470
有正确正确的设置，所以我在这里

00:17:29.550 --> 00:17:34.440
经过Arquillian测试，所以您可以看到

00:17:31.470 --> 00:17:36.570
和以前的测试一样， 

00:17:34.440 --> 00:17:39.210
具有运行这些测试的能力

00:17:36.570 --> 00:17:45.330
不同的配置，所以我要

00:17:39.210 --> 00:17:47.160
运行这个不同于其他项目

00:17:45.330 --> 00:17:49.290
刚给我Gradle和j单位

00:17:47.160 --> 00:17:52.380
如果可以，我可以使用Arquillian j unit运行它

00:17:49.290 --> 00:17:54.420
我想要，所以我选择了这个选项

00:17:52.380 --> 00:17:56.700
让我选择要运行的容器

00:17:54.420 --> 00:17:59.280
所以在这里我要配置一个新的

00:17:56.700 --> 00:18:03.630
纽约外星人的容器，我要使用

00:17:59.280 --> 00:18:08.340
嵌入式包含它们，所以让我们

00:18:03.630 --> 00:18:12.720
好的，选择此容器并运行

00:18:08.340 --> 00:18:15.120
现在

00:18:12.720 --> 00:18:17.070
这样运行测试就是我可以运行

00:18:15.120 --> 00:18:19.200
它放在一堆不同的容器中

00:18:17.070 --> 00:18:20.460
 IDE相当轻巧

00:18:19.200 --> 00:18:22.200
将照顾下载

00:18:20.460 --> 00:18:23.669
设置的正确依赖性

00:18:22.200 --> 00:18:25.380
合适的环境我没有很多

00:18:23.669 --> 00:18:27.960
配置为此管理我不

00:18:25.380 --> 00:18:30.059
必须使用Maven或Gradle来

00:18:27.960 --> 00:18:32.370
下载所有正确的依赖项

00:18:30.059 --> 00:18:35.130
想法将为我和你做到这一点

00:18:32.370 --> 00:18:36.510
可以像往常一样看到它给我什么

00:18:35.130 --> 00:18:39.240
我希望看到并测试结果

00:18:36.510 --> 00:18:42.570
如果我该测试通过还是失败

00:18:39.240 --> 00:18:43.830
想要我可以配置那些我

00:18:42.570 --> 00:18:48.409
可以配置更多这些

00:18:43.830 --> 00:18:48.409
我们的Killian的配置

00:18:50.299 --> 00:18:56.270
所以这是额外的

00:18:54.870 --> 00:18:59.789
我们为Killian添加的支持

00:18:56.270 --> 00:19:02.789
让我们来看看dhaka Sedaka 

00:18:59.789 --> 00:19:04.620
显然是其中之一

00:19:02.789 --> 00:19:07.220
过去几年的上升趋势

00:19:04.620 --> 00:19:10.380
而且肯定没有迹象

00:19:07.220 --> 00:19:12.299
减少，所以我们像往常一样

00:19:10.380 --> 00:19:14.669
添加尽可能多的功能新功能

00:19:12.299 --> 00:19:17.039
我们可以支持那些

00:19:14.669 --> 00:19:18.929
使用这些东西，所以我有

00:19:17.039 --> 00:19:22.500
挖出并运行我要连接

00:19:18.929 --> 00:19:24.690
作为应用程序服务器，所以我

00:19:22.500 --> 00:19:30.059
我需要启用docker吗

00:19:24.690 --> 00:19:31.799
首先插件，所以我有博士。积分

00:19:30.059 --> 00:19:33.330
启用这是一个插件，不是

00:19:31.799 --> 00:19:35.159
不一定一定要来

00:19:33.330 --> 00:19:42.539
内置于智能中

00:19:35.159 --> 00:19:47.640
我还必须添加，并且我必须添加

00:19:42.539 --> 00:19:49.169
黑暗的云部署就这些

00:19:47.640 --> 00:19:50.520
在较早的网络研讨会中， 

00:19:49.169 --> 00:19:53.490
出现了新的Docker功能

00:19:50.520 --> 00:19:55.260
 IntelliJ 14.1，所以我不想讲

00:19:53.490 --> 00:19:57.360
那太详细了，但是重点是

00:19:55.260 --> 00:19:59.309
我可以看到我可以看到博士。在这里

00:19:57.360 --> 00:20:01.470
新功能之一是能力

00:19:59.309 --> 00:20:05.809
从图像创建新容器

00:20:01.470 --> 00:20:05.809
所以我要在这里创建容器

00:20:07.309 --> 00:20:10.309
我在这里

00:20:08.720 --> 00:20:13.940
创建此的所有选项

00:20:10.309 --> 00:20:16.970
容器我可以精确地调整它

00:20:13.940 --> 00:20:20.000
想要这样，例如我可以定义我的

00:20:16.970 --> 00:20:22.100
端口绑定，我可以定义长度，我可以

00:20:20.000 --> 00:20:23.720
定义我可以做的环境变量

00:20:22.100 --> 00:20:26.690
如果我想通过UI进行所有这些操作

00:20:23.720 --> 00:20:28.580
如果我习惯于执行命令

00:20:26.690 --> 00:20:30.830
线重然后我可以通过

00:20:28.580 --> 00:20:32.090
命令行选项，以便我可以复制

00:20:30.830 --> 00:20:33.620
这些无论我在哪里做

00:20:32.090 --> 00:20:36.230
过去的命令行配置

00:20:33.620 --> 00:20:38.510
 IntelliJ IDEA会将它们传递给

00:20:36.230 --> 00:20:41.659
更适合的东西

00:20:38.510 --> 00:20:44.360
在这里配置，显然我可以

00:20:41.659 --> 00:20:51.820
在这里也选择一个盆地文件

00:20:44.360 --> 00:20:51.820
我可以选择我的女儿JSON文件

00:20:53.020 --> 00:21:02.020
可以结合使用我的命令行

00:20:56.539 --> 00:21:02.020
参数和我，我定义了参数

00:21:03.610 --> 00:21:08.750
一旦完成，它将部署

00:21:05.960 --> 00:21:18.350
运行它，我可以附加它

00:21:08.750 --> 00:21:20.090
会话并在我们的控制台中输入

00:21:18.350 --> 00:21:21.049
全力支持博士。现在的工具箱和

00:21:20.090 --> 00:21:24.289
我实际上就是我

00:21:21.049 --> 00:21:25.909
在这台机器上运行，所以

00:21:24.289 --> 00:21:27.530
您配置小鸭，你应该能够

00:21:25.909 --> 00:21:30.909
在IntelliJ中启动并运行

00:21:27.530 --> 00:21:30.909
没有太多问题的IDEA 

00:21:31.690 --> 00:21:36.500
到目前为止，我们一直都相当Java 

00:21:34.640 --> 00:21:38.179
与此特定，但像往常一样

00:21:36.500 --> 00:21:41.179
还增加了对其他语言的支持

00:21:38.179 --> 00:21:43.220
对于常规，我们也增加了支持

00:21:41.179 --> 00:21:45.320
对于Builder注释，所以这

00:21:43.220 --> 00:21:47.419
允许您添加应用构建器

00:21:45.320 --> 00:21:49.850
注释到您的其中一个的顶部

00:21:47.419 --> 00:21:52.010
常规类并具有IntelliJ IDEA 

00:21:49.850 --> 00:21:54.409
认识到这一点并为您提供

00:21:52.010 --> 00:21:55.940
自动完成诸如Builder之类的功能

00:21:54.409 --> 00:22:03.880
方法的二传手和鳄鱼

00:21:55.940 --> 00:22:06.559
在学者网站方面如此

00:22:03.880 --> 00:22:08.270
就Scala而言，我们有很多

00:22:06.559 --> 00:22:12.230
包括宏扩展在内的改进

00:22:08.270 --> 00:22:14.960
提取器，就像Java一样，我们可以调试到

00:22:12.230 --> 00:22:17.360
停下来，我们有lambda表达式

00:22:14.960 --> 00:22:19.039
学者的后缀完成（如果您） 

00:22:17.360 --> 00:22:21.080
没看过后缀完成

00:22:19.039 --> 00:22:22.440
这是让您能够

00:22:21.080 --> 00:22:24.659
继续

00:22:22.440 --> 00:22:26.309
键入，而不用移动您的

00:22:24.659 --> 00:22:28.620
将光标放在线条周围，也许

00:22:26.309 --> 00:22:30.570
提取变量等等

00:22:28.620 --> 00:22:32.250
后缀完成，您可以添加内容

00:22:30.570 --> 00:22:35.190
到您的行的末尾并拥有它

00:22:32.250 --> 00:22:37.289
自动创建我们的代码视图

00:22:35.190 --> 00:22:39.809
还增加了对in line的支持

00:22:37.289 --> 00:22:42.120
重构输入别名

00:22:39.809 --> 00:22:43.889
详细的博客信息数

00:22:42.120 --> 00:22:45.929
关于学者的进步

00:22:43.889 --> 00:22:49.529
 IntelliJ IDEA 15可在

00:22:45.929 --> 00:22:52.620
博客，当然还有Kotlin是卑鄙的

00:22:49.529 --> 00:22:56.389
成为JetBrains JVM语言的宝贝

00:22:52.620 --> 00:23:00.149
这是捆绑在一起的M14版本

00:22:56.389 --> 00:23:02.669
 IntelliJ IDEA 14插件是

00:23:00.149 --> 00:23:04.470
抱歉，它是IntelliJ IDEA 15的一部分

00:23:02.669 --> 00:23:06.240
不再有额外的

00:23:04.470 --> 00:23:08.669
插件全部内置在IDE中

00:23:06.240 --> 00:23:10.860
我想这是其中一部分

00:23:08.669 --> 00:23:13.440
整体提升和让我们的过程

00:23:10.860 --> 00:23:15.690
更加接近1.0 Kotlin版本

00:23:13.440 --> 00:23:17.039
所以这应该使它超级容易获得

00:23:15.690 --> 00:23:18.929
和Kotlin一起运行

00:23:17.039 --> 00:23:20.970
您想尝试玩的东西

00:23:18.929 --> 00:23:24.659
它在ID中得到了充分的支持

00:23:20.970 --> 00:23:26.039
电子邮件和网络框架，我们

00:23:24.659 --> 00:23:28.019
并没有忘记网络框架

00:23:26.039 --> 00:23:30.899
一如既往，我们增加了很多支持

00:23:28.019 --> 00:23:33.269
为网络技术，所以我们已经

00:23:30.899 --> 00:23:35.789
在打字稿中增加了对

00:23:33.269 --> 00:23:38.220
打字稿1.6功能如

00:23:35.789 --> 00:23:42.809
交叉点类型类型保护功能

00:23:38.220 --> 00:23:48.029
本地类型和以及以及集成

00:23:42.809 --> 00:23:50.129
我们为聚合物1.0添加了TF绒毛

00:23:48.029 --> 00:23:54.029
基本的支持，但我想

00:23:50.129 --> 00:24:04.889
表明你是我们对反应的支持，所以

00:23:54.029 --> 00:24:06.400
像任何人一样打开一个React项目

00:24:04.889 --> 00:24:08.530
其他支持的语言

00:24:06.400 --> 00:24:11.740
如果您使用IntelliJ IDEA会得到什么

00:24:08.530 --> 00:24:13.860
如果你在用我，那就是你

00:24:11.740 --> 00:24:16.030
自动完成您的所有预期

00:24:13.860 --> 00:24:17.800
功能，使它变得容易得多

00:24:16.030 --> 00:24:21.880
一旦完成此库的开发

00:24:17.800 --> 00:24:23.740
完成所有设置，以便您可以

00:24:21.880 --> 00:24:28.240
也建议你一堆东西

00:24:23.740 --> 00:24:31.330
适合你我也可以导航

00:24:28.240 --> 00:24:33.850
通过这些事情，我可以点击

00:24:31.330 --> 00:24:39.220
命令单击以查找位置

00:24:33.850 --> 00:24:43.780
这些东西已经定义好了，我可以

00:24:39.220 --> 00:24:45.820
也做类似我可以看的事情

00:24:43.780 --> 00:24:48.130
参数类型应该在

00:24:45.820 --> 00:24:50.770
这些方法再次调用它给

00:24:48.130 --> 00:24:54.040
如果我可以给我一些帮助和指导

00:24:50.770 --> 00:24:55.810
要我写我自己写的

00:24:54.040 --> 00:24:58.120
这也让我自动完成

00:24:55.810 --> 00:24:59.710
请允许我选择这些自定义类型

00:24:58.120 --> 00:25:02.380
这些这些东西评论评论框

00:24:59.710 --> 00:25:05.170
等等已经在里面定义了

00:25:02.380 --> 00:25:07.210
这个文件和IntelliJ IDEA是

00:25:05.170 --> 00:25:12.820
给我支持，让我喜欢

00:25:07.210 --> 00:25:14.980
这些如果我想我也可以看到

00:25:12.820 --> 00:25:19.320
对于这些自定义类型，我也可以

00:25:14.980 --> 00:25:25.960
看定义，如果我确实需要看

00:25:19.320 --> 00:25:28.600
控制哦，然后我可以看看

00:25:25.960 --> 00:25:30.880
定义在这里，或者我可以点击

00:25:28.600 --> 00:25:36.070
它将带我到这里

00:25:30.880 --> 00:25:39.600
定义它也给我自动完成

00:25:36.070 --> 00:25:45.520
我的特定于反应的HTML 

00:25:39.600 --> 00:25:48.490
属性，所以我可以做例如类

00:25:45.520 --> 00:25:51.640
我会自动允许我使用的名称

00:25:48.490 --> 00:25:56.290
那些甚至用于HTML 

00:25:51.640 --> 00:25:58.330
 JavaScript，如果可以的话

00:25:56.290 --> 00:25:59.560
然后在JavaScript中添加HTML 

00:25:58.330 --> 00:26:02.320
显然，我们也支持

00:25:59.560 --> 00:26:07.930
我们的HTML里面的javascript，所以我可以

00:26:02.320 --> 00:26:09.700
输入这个，我可以说更多标记， 

00:26:07.930 --> 00:26:11.170
它会给我我的自动完成

00:26:09.700 --> 00:26:13.570
那也是我的全部想法

00:26:11.170 --> 00:26:15.460
无论我是否经验

00:26:13.570 --> 00:26:18.880
尝试编写HTML或JavaScript或

00:26:15.460 --> 00:26:19.980
在这里面做什么反应

00:26:18.880 --> 00:26:25.110
聪明的主意

00:26:19.980 --> 00:26:26.370
院长，最后，在我们继续之前

00:26:25.110 --> 00:26:27.570
进一步的问题或深入研究

00:26:26.370 --> 00:26:29.370
更详细的内容

00:26:27.570 --> 00:26:31.320
人们想看到我们更新了

00:26:29.370 --> 00:26:32.990
数据库工具以及它们一直是

00:26:31.320 --> 00:26:35.160
这个想法有很多改进

00:26:32.990 --> 00:26:36.720
改善您的工作方式

00:26:35.160 --> 00:26:37.980
您的IDE中的数据库

00:26:36.720 --> 00:26:40.200
特别是发现这个真的

00:26:37.980 --> 00:26:42.120
有趣，因为它允许您做

00:26:40.200 --> 00:26:45.510
 ID内的所有内容都没有

00:26:42.120 --> 00:26:48.960
离开并转到另一个工具，让我们

00:26:45.510 --> 00:26:57.510
看看这个例子，如果我们

00:26:48.960 --> 00:26:59.940
回到我的Java EE教程中，我可以看到

00:26:57.510 --> 00:27:01.380
我的数据库窗口

00:26:59.940 --> 00:27:03.299
数据库窗口一段时间

00:27:01.380 --> 00:27:06.540
窗口不一定是新的， 

00:27:03.299 --> 00:27:10.860
但是我能做的是一些事情

00:27:06.540 --> 00:27:13.950
发生变化的是数据源

00:27:10.860 --> 00:27:16.020
和司机的窗户在这里

00:27:13.950 --> 00:27:20.309
进行了修改，使其更易于使用

00:27:16.020 --> 00:27:23.220
使它更漂亮，我认为大多数

00:27:20.309 --> 00:27:27.330
对我来说有趣的是你

00:27:23.220 --> 00:27:30.630
可以在这里修改您的表，所以我

00:27:27.330 --> 00:27:33.809
可以使用我来创建更改

00:27:30.630 --> 00:27:37.080
我想看到的所以我可以删除这个

00:27:33.809 --> 00:27:41.520
栏，如果我想添加一个新的

00:27:37.080 --> 00:27:46.590
专栏，假设我不知道喜欢的

00:27:41.520 --> 00:27:51.540
这本书我会自动完成，所以我知道

00:27:46.590 --> 00:27:53.820
我不会错过任何键入的内容，所以我

00:27:51.540 --> 00:27:55.320
在这里获得新的新专栏，您可以

00:27:53.820 --> 00:27:58.860
看到续集脚本也可以

00:27:55.320 --> 00:28:00.510
如果您想编辑此内容并更改

00:27:58.860 --> 00:28:02.880
您对续集所做的编辑

00:28:00.510 --> 00:28:09.480
脚本，它将在

00:28:02.880 --> 00:28:09.990
你正在做重构，你可以

00:28:09.480 --> 00:28:13.350
也

00:28:09.990 --> 00:28:16.880
索引，是的，您还可以添加索引

00:28:13.350 --> 00:28:19.440
因此，如果我想添加索引

00:28:16.880 --> 00:28:21.840
假设我要搜寻

00:28:19.440 --> 00:28:27.600
姓氏，以便我可以在此处添加索引

00:28:21.840 --> 00:28:31.700
姓氏，我可以将外键添加为

00:28:27.600 --> 00:28:35.490
好吧，我可以添加一个新的外键， 

00:28:31.700 --> 00:28:37.290
与我在UConn的目标表

00:28:35.490 --> 00:28:42.090
进行此演示，因为我没有创建

00:28:37.290 --> 00:28:44.580
第二张桌子哦，但它是外国基多

00:28:42.090 --> 00:28:47.160
第二张桌子，你得到所有额外的东西

00:28:44.580 --> 00:28:52.770
自动完成功能可以帮助您做到这一点，如果我

00:28:47.160 --> 00:28:55.650
删除并运行它，我应该得到它

00:28:52.770 --> 00:28:59.040
应该删除一个哦，我也做过

00:28:55.650 --> 00:29:05.160
一口气让我们取消此尝试

00:28:59.040 --> 00:29:09.120
再次，如果我们不这样做，那将毫无乐趣

00:29:05.160 --> 00:29:11.070
看到任何错误，所以让我们成为

00:29:09.120 --> 00:29:16.620
雄心勃勃，只需尝试删除

00:29:11.070 --> 00:29:21.270
这两列都可以，然后我们得到

00:29:16.620 --> 00:29:22.150
这些变化现在通过这里

00:29:21.270 --> 00:29:27.670
我们来看一下

00:29:22.150 --> 00:29:31.660
表格编辑器术语，现在为IntelliJ IDEA 

00:29:27.670 --> 00:29:34.030
 15增加了很多支持

00:29:31.660 --> 00:29:36.760
能够说话的越来越多

00:29:34.030 --> 00:29:38.770
对数据库很有用，以便我们可以

00:29:36.760 --> 00:29:40.390
有更多关于

00:29:38.770 --> 00:29:42.160
数据库看起来像表一样

00:29:40.390 --> 00:29:43.450
喜欢你可能会遇到的一切

00:29:42.160 --> 00:29:45.400
作为开发人员可能想做的

00:29:43.450 --> 00:29:47.260
该数据库可以正常工作

00:29:45.400 --> 00:29:49.600
做起来快得多

00:29:47.260 --> 00:29:51.700
诸如在其中调出数据之类的东西

00:29:49.600 --> 00:29:54.280
在该表中或允许您更改

00:29:51.700 --> 00:29:56.110
在数据库中的东西，所以不是真的

00:29:54.280 --> 00:29:57.970
我可以专门演示其他的东西

00:29:56.110 --> 00:30:00.280
比它应该比以前更快地工作

00:29:57.970 --> 00:30:03.280
我们对我有一个具体的支持

00:30:00.280 --> 00:30:09.790
续集postgres续集和Microsoft 

00:30:03.280 --> 00:30:11.650
续集，嗯，是的，另一个新

00:30:09.790 --> 00:30:14.530
您可以做的功能是当您

00:30:11.650 --> 00:30:16.600
调出表格编辑器我可以

00:30:14.530 --> 00:30:18.940
搜索显然续集是一种

00:30:16.600 --> 00:30:20.530
设计做搜索，但是如果我有

00:30:18.940 --> 00:30:22.990
我的第一页结果或一组

00:30:20.530 --> 00:30:24.670
结果我也可以搜索这些结果

00:30:22.990 --> 00:30:27.580
对于不是的东西

00:30:24.670 --> 00:30:39.130
特别是在这里寻找

00:30:27.580 --> 00:30:44.350
找到自己，最后让我们提出一个

00:30:39.130 --> 00:30:48.910
文件实际上使用了续集，所以让我们

00:30:44.350 --> 00:30:54.460
说我们在这里有这个续集，我可以

00:30:48.910 --> 00:30:56.230
在控制台中运行它，所以我运行了

00:30:54.460 --> 00:30:58.650
这个，我可以看到我可以看到结果

00:30:56.230 --> 00:30:58.650
在这里

00:31:01.159 --> 00:31:07.099
如果我尝试第二次运行

00:31:04.190 --> 00:31:10.729
给我选择重写此选项或

00:31:07.099 --> 00:31:12.409
也许用这种方式打开一个新的控制台

00:31:10.729 --> 00:31:13.580
超级有用的如果你想

00:31:12.409 --> 00:31:15.200
运行一堆不同的查询或

00:31:13.580 --> 00:31:17.629
查询的变体，以便您可以

00:31:15.200 --> 00:31:23.710
看，也许有什么区别

00:31:17.629 --> 00:31:37.970
假设我们通过ID Desk和

00:31:23.710 --> 00:31:38.809
尝试重新运行哦，这不是

00:31:37.970 --> 00:31:41.599
当您尝试使用它时会发生什么

00:31:38.809 --> 00:31:43.729
你会得到一个错误，但无论如何

00:31:41.599 --> 00:31:45.590
你知道我是否在跑步

00:31:43.729 --> 00:31:48.859
如果我正在运行其他查询

00:31:45.590 --> 00:31:50.149
或同一查询的变体

00:31:48.859 --> 00:31:51.710
查看这两个查询的结果

00:31:50.149 --> 00:31:55.849
并排，所以我可以看到他们

00:31:51.710 --> 00:31:59.149
貌似谢谢大家

00:31:55.849 --> 00:32:01.580
加入我们，我相信这就是结局

00:31:59.149 --> 00:32:05.080
我们介绍intellij的想法

00:32:01.580 --> 00:32:05.080
 15非常感谢

