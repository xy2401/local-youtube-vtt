WEBVTT
Kind: captions
Language: en

00:00:03.010 --> 00:00:05.670 align:start position:0%
 
I<00:00:03.610><c> will</c><00:00:04.360><c> be</c><00:00:04.480><c> talking</c><00:00:04.690><c> about</c><00:00:04.870><c> respecting</c><00:00:05.590><c> to</c>

00:00:05.670 --> 00:00:05.680 align:start position:0%
I will be talking about respecting to
 

00:00:05.680 --> 00:00:08.210 align:start position:0%
I will be talking about respecting to
Java<00:00:05.859><c> 8</c><00:00:06.040><c> this</c><00:00:06.399><c> has</c><00:00:06.580><c> been</c><00:00:06.790><c> a</c><00:00:06.970><c> surprisingly</c>

00:00:08.210 --> 00:00:08.220 align:start position:0%
Java 8 this has been a surprisingly
 

00:00:08.220 --> 00:00:10.770 align:start position:0%
Java 8 this has been a surprisingly
popular<00:00:09.220><c> topic</c><00:00:09.730><c> over</c><00:00:09.970><c> the</c><00:00:10.000><c> last</c><00:00:10.210><c> year</c><00:00:10.420><c> or</c><00:00:10.599><c> so</c>

00:00:10.770 --> 00:00:10.780 align:start position:0%
popular topic over the last year or so
 

00:00:10.780 --> 00:00:13.890 align:start position:0%
popular topic over the last year or so
because<00:00:11.710><c> we've</c><00:00:12.580><c> seen</c><00:00:12.970><c> presentations</c><00:00:13.660><c> about</c>

00:00:13.890 --> 00:00:13.900 align:start position:0%
because we've seen presentations about
 

00:00:13.900 --> 00:00:17.099 align:start position:0%
because we've seen presentations about
how<00:00:14.430><c> about</c><00:00:15.430><c> how</c><00:00:15.640><c> Java</c><00:00:15.910><c> 8</c><00:00:16.180><c> has</c><00:00:16.570><c> introduced</c><00:00:16.960><c> new</c>

00:00:17.099 --> 00:00:17.109 align:start position:0%
how about how Java 8 has introduced new
 

00:00:17.109 --> 00:00:18.810 align:start position:0%
how about how Java 8 has introduced new
features<00:00:17.140><c> like</c><00:00:17.470><c> lambdas</c><00:00:18.010><c> and</c><00:00:18.039><c> streams</c><00:00:18.400><c> and</c><00:00:18.640><c> so</c>

00:00:18.810 --> 00:00:18.820 align:start position:0%
features like lambdas and streams and so
 

00:00:18.820 --> 00:00:20.460 align:start position:0%
features like lambdas and streams and so
forth<00:00:19.060><c> and</c><00:00:19.480><c> we've</c><00:00:19.600><c> seen</c><00:00:19.780><c> presentations</c><00:00:20.380><c> about</c>

00:00:20.460 --> 00:00:20.470 align:start position:0%
forth and we've seen presentations about
 

00:00:20.470 --> 00:00:22.770 align:start position:0%
forth and we've seen presentations about
how<00:00:20.590><c> to</c><00:00:20.740><c> use</c><00:00:21.039><c> them</c><00:00:21.250><c> in</c><00:00:21.460><c> new</c><00:00:21.670><c> code</c><00:00:22.000><c> but</c><00:00:22.570><c> what's</c>

00:00:22.770 --> 00:00:22.780 align:start position:0%
how to use them in new code but what's
 

00:00:22.780 --> 00:00:24.900 align:start position:0%
how to use them in new code but what's
kind<00:00:23.050><c> of</c><00:00:23.140><c> more</c><00:00:23.440><c> applicable</c><00:00:23.830><c> to</c><00:00:24.250><c> most</c><00:00:24.369><c> of</c><00:00:24.610><c> us</c><00:00:24.699><c> as</c>

00:00:24.900 --> 00:00:24.910 align:start position:0%
kind of more applicable to most of us as
 

00:00:24.910 --> 00:00:27.120 align:start position:0%
kind of more applicable to most of us as
day-to-day<00:00:25.449><c> developers</c><00:00:25.960><c> is</c><00:00:26.140><c> how</c><00:00:26.800><c> do</c><00:00:26.860><c> we</c><00:00:26.980><c> take</c>

00:00:27.120 --> 00:00:27.130 align:start position:0%
day-to-day developers is how do we take
 

00:00:27.130 --> 00:00:29.490 align:start position:0%
day-to-day developers is how do we take
an<00:00:27.550><c> existing</c><00:00:27.789><c> code</c><00:00:28.240><c> base</c><00:00:28.270><c> and</c><00:00:28.690><c> perhaps</c><00:00:29.080><c> move</c>

00:00:29.490 --> 00:00:29.500 align:start position:0%
an existing code base and perhaps move
 

00:00:29.500 --> 00:00:31.140 align:start position:0%
an existing code base and perhaps move
it<00:00:29.680><c> in</c><00:00:29.800><c> the</c><00:00:29.890><c> direction</c><00:00:30.039><c> of</c><00:00:30.400><c> Java</c><00:00:30.670><c> 8</c><00:00:30.880><c> and</c>

00:00:31.140 --> 00:00:31.150 align:start position:0%
it in the direction of Java 8 and
 

00:00:31.150 --> 00:00:33.360 align:start position:0%
it in the direction of Java 8 and
perhaps<00:00:31.840><c> also</c><00:00:32.410><c> understanding</c><00:00:33.070><c> some</c><00:00:33.250><c> of</c><00:00:33.309><c> the</c>

00:00:33.360 --> 00:00:33.370 align:start position:0%
perhaps also understanding some of the
 

00:00:33.370 --> 00:00:34.950 align:start position:0%
perhaps also understanding some of the
pros<00:00:33.579><c> and</c><00:00:33.789><c> cons</c><00:00:34.000><c> of</c><00:00:34.149><c> doing</c><00:00:34.329><c> this</c><00:00:34.539><c> and</c><00:00:34.780><c> some</c><00:00:34.899><c> of</c>

00:00:34.950 --> 00:00:34.960 align:start position:0%
pros and cons of doing this and some of
 

00:00:34.960 --> 00:00:36.989 align:start position:0%
pros and cons of doing this and some of
the<00:00:35.079><c> trade-offs</c><00:00:35.350><c> so</c><00:00:35.739><c> that's</c><00:00:36.280><c> what</c><00:00:36.609><c> this</c><00:00:36.760><c> talk</c>

00:00:36.989 --> 00:00:36.999 align:start position:0%
the trade-offs so that's what this talk
 

00:00:36.999 --> 00:00:39.869 align:start position:0%
the trade-offs so that's what this talk
is<00:00:37.059><c> is</c><00:00:37.420><c> aimed</c><00:00:37.809><c> to</c><00:00:37.989><c> answer</c><00:00:38.399><c> but</c><00:00:39.399><c> first</c><00:00:39.640><c> before</c>

00:00:39.869 --> 00:00:39.879 align:start position:0%
is is aimed to answer but first before
 

00:00:39.879 --> 00:00:41.669 align:start position:0%
is is aimed to answer but first before
we<00:00:40.059><c> do</c><00:00:40.239><c> that</c><00:00:40.269><c> let's</c><00:00:40.899><c> take</c><00:00:41.019><c> a</c><00:00:41.050><c> quick</c><00:00:41.289><c> look</c><00:00:41.409><c> at</c>

00:00:41.669 --> 00:00:41.679 align:start position:0%
we do that let's take a quick look at
 

00:00:41.679 --> 00:00:45.360 align:start position:0%
we do that let's take a quick look at
why<00:00:42.429><c> should</c><00:00:42.819><c> we</c><00:00:42.940><c> move</c><00:00:43.089><c> to</c><00:00:43.149><c> Java</c><00:00:43.449><c> 8</c><00:00:43.690><c> well</c><00:00:44.370><c> Java</c>

00:00:45.360 --> 00:00:45.370 align:start position:0%
why should we move to Java 8 well Java
 

00:00:45.370 --> 00:00:48.539 align:start position:0%
why should we move to Java 8 well Java
is<00:00:45.489><c> now</c><00:00:45.729><c> nearly</c><00:00:46.389><c> three</c><00:00:46.929><c> years</c><00:00:46.960><c> old</c><00:00:47.319><c> so</c><00:00:47.949><c> I'm</c>

00:00:48.539 --> 00:00:48.549 align:start position:0%
is now nearly three years old so I'm
 

00:00:48.549 --> 00:00:50.009 align:start position:0%
is now nearly three years old so I'm
guessing<00:00:49.120><c> probably</c><00:00:49.420><c> a</c><00:00:49.629><c> lot</c><00:00:49.749><c> of</c><00:00:49.809><c> people</c>

00:00:50.009 --> 00:00:50.019 align:start position:0%
guessing probably a lot of people
 

00:00:50.019 --> 00:00:52.079 align:start position:0%
guessing probably a lot of people
already<00:00:50.170><c> using</c><00:00:51.039><c> Java</c><00:00:51.219><c> 8</c><00:00:51.399><c> or</c><00:00:51.549><c> considering</c><00:00:51.969><c> it</c>

00:00:52.079 --> 00:00:52.089 align:start position:0%
already using Java 8 or considering it
 

00:00:52.089 --> 00:00:53.459 align:start position:0%
already using Java 8 or considering it
and<00:00:52.359><c> probably</c><00:00:52.780><c> one</c><00:00:52.899><c> of</c><00:00:52.929><c> the</c><00:00:53.049><c> most</c><00:00:53.170><c> compelling</c>

00:00:53.459 --> 00:00:53.469 align:start position:0%
and probably one of the most compelling
 

00:00:53.469 --> 00:00:56.009 align:start position:0%
and probably one of the most compelling
reasons<00:00:53.949><c> is</c><00:00:54.159><c> the</c><00:00:54.549><c> fact</c><00:00:54.760><c> that</c><00:00:54.850><c> Java</c><00:00:55.239><c> 6</c><00:00:55.510><c> and</c><00:00:55.719><c> 7</c>

00:00:56.009 --> 00:00:56.019 align:start position:0%
reasons is the fact that Java 6 and 7
 

00:00:56.019 --> 00:00:58.020 align:start position:0%
reasons is the fact that Java 6 and 7
are<00:00:56.229><c> end-of-life</c><00:00:56.920><c> and</c><00:00:57.190><c> no</c><00:00:57.399><c> longer</c><00:00:57.639><c> officially</c>

00:00:58.020 --> 00:00:58.030 align:start position:0%
are end-of-life and no longer officially
 

00:00:58.030 --> 00:01:00.090 align:start position:0%
are end-of-life and no longer officially
supported<00:00:58.510><c> so</c><00:00:58.989><c> it's</c><00:00:59.139><c> a</c><00:00:59.199><c> good</c><00:00:59.379><c> idea</c><00:00:59.469><c> to</c><00:00:59.799><c> move</c><00:00:59.920><c> to</c>

00:01:00.090 --> 00:01:00.100 align:start position:0%
supported so it's a good idea to move to
 

00:01:00.100 --> 00:01:02.489 align:start position:0%
supported so it's a good idea to move to
Java<00:01:00.309><c> 8</c><00:01:00.519><c> just</c><00:01:00.760><c> for</c><00:01:00.940><c> those</c><00:01:01.030><c> reasons</c><00:01:01.329><c> but</c><00:01:02.319><c> there</c>

00:01:02.489 --> 00:01:02.499 align:start position:0%
Java 8 just for those reasons but there
 

00:01:02.499 --> 00:01:04.140 align:start position:0%
Java 8 just for those reasons but there
are<00:01:02.619><c> some</c><00:01:02.799><c> really</c><00:01:02.979><c> compelling</c><00:01:03.159><c> reasons</c><00:01:03.850><c> to</c>

00:01:04.140 --> 00:01:04.150 align:start position:0%
are some really compelling reasons to
 

00:01:04.150 --> 00:01:05.640 align:start position:0%
are some really compelling reasons to
argue<00:01:04.180><c> when</c><00:01:04.900><c> you're</c><00:01:05.049><c> trying</c><00:01:05.199><c> to</c><00:01:05.290><c> push</c><00:01:05.500><c> your</c>

00:01:05.640 --> 00:01:05.650 align:start position:0%
argue when you're trying to push your
 

00:01:05.650 --> 00:01:07.740 align:start position:0%
argue when you're trying to push your
case<00:01:05.830><c> to</c><00:01:06.040><c> management</c><00:01:06.400><c> or</c><00:01:06.790><c> to</c><00:01:07.000><c> the</c><00:01:07.420><c> support</c>

00:01:07.740 --> 00:01:07.750 align:start position:0%
case to management or to the support
 

00:01:07.750 --> 00:01:09.300 align:start position:0%
case to management or to the support
team<00:01:07.960><c> or</c><00:01:08.230><c> to</c><00:01:08.440><c> ever</c><00:01:08.650><c> inside</c><00:01:09.010><c> your</c><00:01:09.160><c> organization</c>

00:01:09.300 --> 00:01:09.310 align:start position:0%
team or to ever inside your organization
 

00:01:09.310 --> 00:01:11.790 align:start position:0%
team or to ever inside your organization
cares<00:01:10.150><c> about</c><00:01:10.420><c> these</c><00:01:10.570><c> things</c><00:01:10.900><c> about</c><00:01:11.500><c> why</c><00:01:11.740><c> you</c>

00:01:11.790 --> 00:01:11.800 align:start position:0%
cares about these things about why you
 

00:01:11.800 --> 00:01:13.440 align:start position:0%
cares about these things about why you
should<00:01:12.070><c> be</c><00:01:12.160><c> adopting</c><00:01:12.640><c> some</c><00:01:12.850><c> of</c><00:01:12.970><c> the</c><00:01:13.030><c> job</c><00:01:13.210><c> 8</c>

00:01:13.440 --> 00:01:13.450 align:start position:0%
should be adopting some of the job 8
 

00:01:13.450 --> 00:01:16.920 align:start position:0%
should be adopting some of the job 8
features<00:01:14.520><c> firstly</c><00:01:15.520><c> Java</c><00:01:16.000><c> 8</c><00:01:16.210><c> is</c><00:01:16.360><c> generally</c>

00:01:16.920 --> 00:01:16.930 align:start position:0%
features firstly Java 8 is generally
 

00:01:16.930 --> 00:01:18.570 align:start position:0%
features firstly Java 8 is generally
faster<00:01:17.140><c> than</c><00:01:17.530><c> previous</c><00:01:17.860><c> versions</c><00:01:18.250><c> of</c><00:01:18.340><c> Java</c>

00:01:18.570 --> 00:01:18.580 align:start position:0%
faster than previous versions of Java
 

00:01:18.580 --> 00:01:20.550 align:start position:0%
faster than previous versions of Java
you<00:01:19.120><c> don't</c><00:01:19.300><c> even</c><00:01:19.540><c> have</c><00:01:19.720><c> to</c><00:01:19.870><c> do</c><00:01:20.020><c> anything</c><00:01:20.290><c> or</c>

00:01:20.550 --> 00:01:20.560 align:start position:0%
you don't even have to do anything or
 

00:01:20.560 --> 00:01:22.110 align:start position:0%
you don't even have to do anything or
use<00:01:20.770><c> any</c><00:01:20.950><c> of</c><00:01:21.040><c> the</c><00:01:21.130><c> new</c><00:01:21.250><c> features</c><00:01:21.610><c> to</c><00:01:21.640><c> get</c><00:01:21.940><c> some</c>

00:01:22.110 --> 00:01:22.120 align:start position:0%
use any of the new features to get some
 

00:01:22.120 --> 00:01:23.940 align:start position:0%
use any of the new features to get some
of<00:01:22.180><c> these</c><00:01:22.270><c> speed</c><00:01:22.540><c> improvements</c><00:01:23.140><c> for</c><00:01:23.560><c> example</c>

00:01:23.940 --> 00:01:23.950 align:start position:0%
of these speed improvements for example
 

00:01:23.950 --> 00:01:25.260 align:start position:0%
of these speed improvements for example
some<00:01:24.130><c> of</c><00:01:24.160><c> the</c><00:01:24.280><c> common</c><00:01:24.520><c> data</c><00:01:24.640><c> structures</c><00:01:25.120><c> are</c>

00:01:25.260 --> 00:01:25.270 align:start position:0%
some of the common data structures are
 

00:01:25.270 --> 00:01:27.510 align:start position:0%
some of the common data structures are
faster<00:01:25.660><c> there's</c><00:01:26.170><c> some</c><00:01:26.380><c> speed</c><00:01:27.010><c> improvements</c>

00:01:27.510 --> 00:01:27.520 align:start position:0%
faster there's some speed improvements
 

00:01:27.520 --> 00:01:29.460 align:start position:0%
faster there's some speed improvements
around<00:01:27.580><c> concurrency</c><00:01:28.270><c> and</c><00:01:28.300><c> so</c><00:01:28.540><c> forth</c><00:01:28.810><c> and</c><00:01:28.960><c> for</c>

00:01:29.460 --> 00:01:29.470 align:start position:0%
around concurrency and so forth and for
 

00:01:29.470 --> 00:01:30.930 align:start position:0%
around concurrency and so forth and for
more<00:01:29.650><c> information</c><00:01:30.040><c> about</c><00:01:30.130><c> this</c><00:01:30.310><c> click</c><00:01:30.850><c> on</c>

00:01:30.930 --> 00:01:30.940 align:start position:0%
more information about this click on
 

00:01:30.940 --> 00:01:32.220 align:start position:0%
more information about this click on
that<00:01:31.060><c> link</c><00:01:31.270><c> because</c><00:01:31.420><c> there's</c><00:01:31.720><c> some</c><00:01:31.810><c> links</c><00:01:32.080><c> to</c>

00:01:32.220 --> 00:01:32.230 align:start position:0%
that link because there's some links to
 

00:01:32.230 --> 00:01:35.130 align:start position:0%
that link because there's some links to
additional<00:01:32.290><c> documentation</c><00:01:33.040><c> about</c><00:01:33.400><c> that</c><00:01:34.140><c> of</c>

00:01:35.130 --> 00:01:35.140 align:start position:0%
additional documentation about that of
 

00:01:35.140 --> 00:01:37.470 align:start position:0%
additional documentation about that of
course<00:01:35.380><c> it's</c><00:01:35.560><c> easy</c><00:01:35.770><c> to</c><00:01:35.880><c> paralyse</c><00:01:36.880><c> that's</c><00:01:37.270><c> the</c>

00:01:37.470 --> 00:01:37.480 align:start position:0%
course it's easy to paralyse that's the
 

00:01:37.480 --> 00:01:38.940 align:start position:0%
course it's easy to paralyse that's the
point<00:01:37.660><c> about</c><00:01:37.930><c> some</c><00:01:38.200><c> of</c><00:01:38.290><c> the</c><00:01:38.410><c> stream</c>

00:01:38.940 --> 00:01:38.950 align:start position:0%
point about some of the stream
 

00:01:38.950 --> 00:01:40.770 align:start position:0%
point about some of the stream
operations<00:01:39.460><c> the</c><00:01:39.670><c> fact</c><00:01:39.850><c> that</c><00:01:39.910><c> you</c><00:01:40.090><c> can</c><00:01:40.300><c> run</c>

00:01:40.770 --> 00:01:40.780 align:start position:0%
operations the fact that you can run
 

00:01:40.780 --> 00:01:42.660 align:start position:0%
operations the fact that you can run
stream<00:01:41.080><c> operations</c><00:01:41.590><c> in</c><00:01:41.800><c> parallel</c><00:01:42.280><c> without</c>

00:01:42.660 --> 00:01:42.670 align:start position:0%
stream operations in parallel without
 

00:01:42.670 --> 00:01:44.580 align:start position:0%
stream operations in parallel without
having<00:01:43.060><c> to</c><00:01:43.180><c> manage</c><00:01:43.510><c> things</c><00:01:43.750><c> like</c><00:01:44.050><c> thread</c>

00:01:44.580 --> 00:01:44.590 align:start position:0%
having to manage things like thread
 

00:01:44.590 --> 00:01:47.490 align:start position:0%
having to manage things like thread
pools<00:01:44.860><c> or</c><00:01:45.570><c> executive</c><00:01:46.570><c> services</c><00:01:46.900><c> or</c><00:01:47.110><c> so</c><00:01:47.230><c> forth</c>

00:01:47.490 --> 00:01:47.500 align:start position:0%
pools or executive services or so forth
 

00:01:47.500 --> 00:01:49.230 align:start position:0%
pools or executive services or so forth
it's<00:01:47.710><c> just</c><00:01:47.950><c> it</c><00:01:48.190><c> can</c><00:01:48.460><c> be</c><00:01:48.580><c> done</c><00:01:48.700><c> quite</c><00:01:49.090><c> easily</c>

00:01:49.230 --> 00:01:49.240 align:start position:0%
it's just it can be done quite easily
 

00:01:49.240 --> 00:01:53.340 align:start position:0%
it's just it can be done quite easily
for<00:01:49.720><c> you</c><00:01:50.880><c> you</c><00:01:51.880><c> write</c><00:01:52.060><c> fewer</c><00:01:52.360><c> lines</c><00:01:52.510><c> of</c><00:01:52.659><c> code</c><00:01:52.720><c> as</c>

00:01:53.340 --> 00:01:53.350 align:start position:0%
for you you write fewer lines of code as
 

00:01:53.350 --> 00:01:55.860 align:start position:0%
for you you write fewer lines of code as
a<00:01:53.409><c> hardcore</c><00:01:54.310><c> long</c><00:01:54.700><c> term</c><00:01:54.970><c> Java</c><00:01:55.300><c> person</c><00:01:55.720><c> maybe</c>

00:01:55.860 --> 00:01:55.870 align:start position:0%
a hardcore long term Java person maybe
 

00:01:55.870 --> 00:01:57.480 align:start position:0%
a hardcore long term Java person maybe
this<00:01:56.110><c> wasn't</c><00:01:56.320><c> the</c><00:01:56.530><c> most</c><00:01:56.680><c> compelling</c><00:01:57.100><c> reason</c>

00:01:57.480 --> 00:01:57.490 align:start position:0%
this wasn't the most compelling reason
 

00:01:57.490 --> 00:01:59.670 align:start position:0%
this wasn't the most compelling reason
for<00:01:57.670><c> me</c><00:01:57.790><c> but</c><00:01:58.360><c> in</c><00:01:58.510><c> actual</c><00:01:58.810><c> fact</c><00:01:58.840><c> once</c><00:01:59.409><c> you</c><00:01:59.500><c> get</c>

00:01:59.670 --> 00:01:59.680 align:start position:0%
for me but in actual fact once you get
 

00:01:59.680 --> 00:02:01.530 align:start position:0%
for me but in actual fact once you get
used<00:01:59.890><c> to</c><00:01:59.979><c> using</c><00:02:00.100><c> the</c><00:02:00.340><c> Java</c><00:02:00.610><c> 8</c><00:02:00.820><c> style</c><00:02:01.060><c> you</c><00:02:01.300><c> start</c>

00:02:01.530 --> 00:02:01.540 align:start position:0%
used to using the Java 8 style you start
 

00:02:01.540 --> 00:02:03.630 align:start position:0%
used to using the Java 8 style you start
to<00:02:01.659><c> see</c><00:02:01.840><c> that</c><00:02:02.020><c> what</c><00:02:02.320><c> you're</c><00:02:02.470><c> writing</c><00:02:02.890><c> is</c><00:02:03.220><c> what</c>

00:02:03.630 --> 00:02:03.640 align:start position:0%
to see that what you're writing is what
 

00:02:03.640 --> 00:02:05.880 align:start position:0%
to see that what you're writing is what
you<00:02:03.790><c> want</c><00:02:04.000><c> to</c><00:02:04.120><c> achieve</c><00:02:04.210><c> not</c><00:02:05.020><c> how</c><00:02:05.200><c> to</c><00:02:05.260><c> do</c><00:02:05.530><c> it</c><00:02:05.680><c> and</c>

00:02:05.880 --> 00:02:05.890 align:start position:0%
you want to achieve not how to do it and
 

00:02:05.890 --> 00:02:08.130 align:start position:0%
you want to achieve not how to do it and
that's<00:02:06.580><c> quite</c><00:02:06.970><c> nice</c><00:02:07.180><c> but</c><00:02:07.420><c> takes</c><00:02:07.659><c> away</c><00:02:07.780><c> a</c><00:02:07.930><c> lot</c>

00:02:08.130 --> 00:02:08.140 align:start position:0%
that's quite nice but takes away a lot
 

00:02:08.140 --> 00:02:09.479 align:start position:0%
that's quite nice but takes away a lot
of<00:02:08.229><c> the</c><00:02:08.289><c> boilerplate</c><00:02:08.649><c> and</c><00:02:08.979><c> stuff</c><00:02:09.190><c> that</c><00:02:09.369><c> your</c>

00:02:09.479 --> 00:02:09.489 align:start position:0%
of the boilerplate and stuff that your
 

00:02:09.489 --> 00:02:11.640 align:start position:0%
of the boilerplate and stuff that your
eyes<00:02:09.640><c> were</c><00:02:10.000><c> kind</c><00:02:10.360><c> of</c><00:02:10.509><c> ignoring</c><00:02:10.869><c> and</c><00:02:11.170><c> lets</c><00:02:11.560><c> you</c>

00:02:11.640 --> 00:02:11.650 align:start position:0%
eyes were kind of ignoring and lets you
 

00:02:11.650 --> 00:02:13.199 align:start position:0%
eyes were kind of ignoring and lets you
focus<00:02:11.799><c> on</c><00:02:12.099><c> what's</c><00:02:12.280><c> really</c><00:02:12.459><c> important</c><00:02:12.969><c> in</c><00:02:13.120><c> the</c>

00:02:13.199 --> 00:02:13.209 align:start position:0%
focus on what's really important in the
 

00:02:13.209 --> 00:02:15.390 align:start position:0%
focus on what's really important in the
code<00:02:13.420><c> and</c><00:02:14.069><c> they've</c><00:02:15.069><c> been</c>

00:02:15.390 --> 00:02:15.400 align:start position:0%
code and they've been
 

00:02:15.400 --> 00:02:16.770 align:start position:0%
code and they've been
to<00:02:15.549><c> do</c><00:02:15.670><c> things</c><00:02:15.909><c> like</c><00:02:16.000><c> pass</c><00:02:16.239><c> around</c><00:02:16.390><c> lambda</c>

00:02:16.770 --> 00:02:16.780 align:start position:0%
to do things like pass around lambda
 

00:02:16.780 --> 00:02:19.259 align:start position:0%
to do things like pass around lambda
expressions<00:02:17.349><c> or</c><00:02:17.530><c> use</c><00:02:18.220><c> the</c><00:02:18.370><c> streams</c><00:02:18.610><c> API</c><00:02:18.790><c> gives</c>

00:02:19.259 --> 00:02:19.269 align:start position:0%
expressions or use the streams API gives
 

00:02:19.269 --> 00:02:20.910 align:start position:0%
expressions or use the streams API gives
you<00:02:19.390><c> new</c><00:02:19.569><c> solutions</c><00:02:20.079><c> to</c><00:02:20.290><c> problems</c><00:02:20.680><c> and</c>

00:02:20.910 --> 00:02:20.920 align:start position:0%
you new solutions to problems and
 

00:02:20.920 --> 00:02:22.259 align:start position:0%
you new solutions to problems and
perhaps<00:02:21.129><c> lets</c><00:02:21.489><c> you</c><00:02:21.610><c> solve</c><00:02:21.879><c> things</c><00:02:22.090><c> you</c>

00:02:22.259 --> 00:02:22.269 align:start position:0%
perhaps lets you solve things you
 

00:02:22.269 --> 00:02:25.350 align:start position:0%
perhaps lets you solve things you
couldn't<00:02:22.569><c> have</c><00:02:22.689><c> solved</c><00:02:22.959><c> before</c><00:02:24.209><c> one</c><00:02:25.209><c> of</c><00:02:25.299><c> the</c>

00:02:25.350 --> 00:02:25.360 align:start position:0%
couldn't have solved before one of the
 

00:02:25.360 --> 00:02:28.319 align:start position:0%
couldn't have solved before one of the
areas<00:02:25.659><c> I</c><00:02:25.780><c> think</c><00:02:25.810><c> is</c><00:02:26.110><c> under</c><00:02:26.890><c> and</c><00:02:27.280><c> publicized</c><00:02:28.060><c> is</c>

00:02:28.319 --> 00:02:28.329 align:start position:0%
areas I think is under and publicized is
 

00:02:28.329 --> 00:02:30.089 align:start position:0%
areas I think is under and publicized is
that<00:02:28.599><c> some</c><00:02:28.840><c> of</c><00:02:28.930><c> the</c><00:02:28.989><c> Java</c><00:02:29.170><c> 8</c><00:02:29.379><c> features</c><00:02:29.590><c> let</c><00:02:30.010><c> you</c>

00:02:30.089 --> 00:02:30.099 align:start position:0%
that some of the Java 8 features let you
 

00:02:30.099 --> 00:02:32.339 align:start position:0%
that some of the Java 8 features let you
minimize<00:02:30.519><c> errors</c><00:02:31.030><c> we'll</c><00:02:31.750><c> see</c><00:02:32.109><c> some</c><00:02:32.290><c> examples</c>

00:02:32.339 --> 00:02:32.349 align:start position:0%
minimize errors we'll see some examples
 

00:02:32.349 --> 00:02:34.229 align:start position:0%
minimize errors we'll see some examples
of<00:02:32.859><c> where</c><00:02:33.010><c> we</c><00:02:33.099><c> can</c><00:02:33.280><c> minimize</c><00:02:33.549><c> things</c><00:02:34.000><c> like</c>

00:02:34.229 --> 00:02:34.239 align:start position:0%
of where we can minimize things like
 

00:02:34.239 --> 00:02:35.670 align:start position:0%
of where we can minimize things like
copy<00:02:34.510><c> and</c><00:02:34.689><c> paste</c><00:02:34.900><c> errors</c><00:02:35.230><c> using</c><00:02:35.500><c> lambda</c>

00:02:35.670 --> 00:02:35.680 align:start position:0%
copy and paste errors using lambda
 

00:02:35.680 --> 00:02:37.289 align:start position:0%
copy and paste errors using lambda
expressions<00:02:36.310><c> but</c><00:02:36.790><c> there</c><00:02:36.909><c> are</c><00:02:37.000><c> other</c><00:02:37.120><c> things</c>

00:02:37.289 --> 00:02:37.299 align:start position:0%
expressions but there are other things
 

00:02:37.299 --> 00:02:38.940 align:start position:0%
expressions but there are other things
like<00:02:37.569><c> optional</c><00:02:38.200><c> and</c><00:02:38.409><c> other</c><00:02:38.560><c> features</c><00:02:38.920><c> that</c>

00:02:38.940 --> 00:02:38.950 align:start position:0%
like optional and other features that
 

00:02:38.950 --> 00:02:41.009 align:start position:0%
like optional and other features that
let<00:02:39.760><c> you</c><00:02:39.939><c> minimize</c><00:02:40.329><c> the</c><00:02:40.510><c> amount</c><00:02:40.629><c> of</c><00:02:40.780><c> errors</c>

00:02:41.009 --> 00:02:41.019 align:start position:0%
let you minimize the amount of errors
 

00:02:41.019 --> 00:02:42.599 align:start position:0%
let you minimize the amount of errors
that<00:02:41.200><c> accidentally</c><00:02:41.680><c> creep</c><00:02:41.950><c> into</c><00:02:42.159><c> your</c><00:02:42.280><c> code</c>

00:02:42.599 --> 00:02:42.609 align:start position:0%
that accidentally creep into your code
 

00:02:42.609 --> 00:02:45.089 align:start position:0%
that accidentally creep into your code
and<00:02:42.849><c> also</c><00:02:43.689><c> things</c><00:02:43.930><c> like</c><00:02:44.049><c> the</c><00:02:44.140><c> streams</c><00:02:44.409><c> API</c><00:02:44.560><c> and</c>

00:02:45.089 --> 00:02:45.099 align:start position:0%
and also things like the streams API and
 

00:02:45.099 --> 00:02:47.039 align:start position:0%
and also things like the streams API and
the<00:02:45.489><c> added</c><00:02:45.790><c> readability</c><00:02:46.120><c> reduction</c><00:02:46.930><c> of</c>

00:02:47.039 --> 00:02:47.049 align:start position:0%
the added readability reduction of
 

00:02:47.049 --> 00:02:48.839 align:start position:0%
the added readability reduction of
boilerplate<00:02:47.319><c> can</c><00:02:48.010><c> let</c><00:02:48.159><c> you</c><00:02:48.250><c> see</c><00:02:48.280><c> much</c><00:02:48.670><c> more</c>

00:02:48.839 --> 00:02:48.849 align:start position:0%
boilerplate can let you see much more
 

00:02:48.849 --> 00:02:51.500 align:start position:0%
boilerplate can let you see much more
easily<00:02:49.299><c> where</c><00:02:49.480><c> you've</c><00:02:49.599><c> made</c><00:02:49.780><c> a</c><00:02:49.810><c> silly</c><00:02:50.049><c> mistake</c>

00:02:51.500 --> 00:02:51.510 align:start position:0%
easily where you've made a silly mistake
 

00:02:51.510 --> 00:02:54.089 align:start position:0%
easily where you've made a silly mistake
so<00:02:52.510><c> let's</c><00:02:52.780><c> go</c><00:02:52.959><c> straight</c><00:02:53.200><c> on</c><00:02:53.440><c> into</c><00:02:54.010><c> the</c>

00:02:54.089 --> 00:02:54.099 align:start position:0%
so let's go straight on into the
 

00:02:54.099 --> 00:02:57.000 align:start position:0%
so let's go straight on into the
refactoring<00:02:54.370><c> side</c><00:02:55.060><c> of</c><00:02:55.209><c> things</c><00:02:55.420><c> but</c><00:02:56.049><c> before</c><00:02:56.530><c> we</c>

00:02:57.000 --> 00:02:57.010 align:start position:0%
refactoring side of things but before we
 

00:02:57.010 --> 00:02:59.009 align:start position:0%
refactoring side of things but before we
do<00:02:57.159><c> any</c><00:02:57.459><c> sort</c><00:02:57.700><c> of</c><00:02:57.819><c> refactoring</c><00:02:58.420><c> we</c><00:02:58.540><c> really</c><00:02:58.840><c> do</c>

00:02:59.009 --> 00:02:59.019 align:start position:0%
do any sort of refactoring we really do
 

00:02:59.019 --> 00:03:00.720 align:start position:0%
do any sort of refactoring we really do
need<00:02:59.230><c> to</c><00:02:59.290><c> have</c><00:02:59.409><c> a</c><00:02:59.530><c> safety</c><00:03:00.040><c> check</c><00:03:00.220><c> to</c><00:03:00.430><c> make</c><00:03:00.549><c> sure</c>

00:03:00.720 --> 00:03:00.730 align:start position:0%
need to have a safety check to make sure
 

00:03:00.730 --> 00:03:02.369 align:start position:0%
need to have a safety check to make sure
that<00:03:00.939><c> we're</c><00:03:01.090><c> in</c><00:03:01.180><c> the</c><00:03:01.269><c> right</c><00:03:01.299><c> place</c><00:03:01.450><c> to</c><00:03:01.840><c> do</c><00:03:01.989><c> some</c>

00:03:02.369 --> 00:03:02.379 align:start position:0%
that we're in the right place to do some
 

00:03:02.379 --> 00:03:04.619 align:start position:0%
that we're in the right place to do some
refactoring<00:03:02.819><c> firstly</c><00:03:03.849><c> it's</c><00:03:04.060><c> really</c>

00:03:04.619 --> 00:03:04.629 align:start position:0%
refactoring firstly it's really
 

00:03:04.629 --> 00:03:06.360 align:start position:0%
refactoring firstly it's really
important<00:03:05.230><c> to</c><00:03:05.379><c> have</c><00:03:05.470><c> automated</c><00:03:06.099><c> acceptance</c>

00:03:06.360 --> 00:03:06.370 align:start position:0%
important to have automated acceptance
 

00:03:06.370 --> 00:03:07.830 align:start position:0%
important to have automated acceptance
tests<00:03:06.909><c> if</c><00:03:07.030><c> you're</c><00:03:07.269><c> going</c><00:03:07.420><c> to</c><00:03:07.569><c> do</c><00:03:07.689><c> any</c>

00:03:07.830 --> 00:03:07.840 align:start position:0%
tests if you're going to do any
 

00:03:07.840 --> 00:03:09.899 align:start position:0%
tests if you're going to do any
refactoring<00:03:08.409><c> because</c><00:03:09.189><c> although</c><00:03:09.489><c> a</c><00:03:09.609><c> lot</c><00:03:09.819><c> of</c>

00:03:09.899 --> 00:03:09.909 align:start position:0%
refactoring because although a lot of
 

00:03:09.909 --> 00:03:11.009 align:start position:0%
refactoring because although a lot of
the<00:03:10.000><c> research</c><00:03:10.420><c> things</c><00:03:10.659><c> I'm</c><00:03:10.780><c> going</c><00:03:10.900><c> to</c><00:03:10.959><c> show</c>

00:03:11.009 --> 00:03:11.019 align:start position:0%
the research things I'm going to show
 

00:03:11.019 --> 00:03:13.649 align:start position:0%
the research things I'm going to show
you<00:03:11.170><c> the</c><00:03:11.769><c> the</c><00:03:12.129><c> idea</c><00:03:12.670><c> is</c><00:03:13.000><c> the</c><00:03:13.239><c> functionality</c>

00:03:13.649 --> 00:03:13.659 align:start position:0%
you the the idea is the functionality
 

00:03:13.659 --> 00:03:15.149 align:start position:0%
you the the idea is the functionality
will<00:03:14.139><c> remain</c><00:03:14.500><c> the</c><00:03:14.680><c> same</c>

00:03:15.149 --> 00:03:15.159 align:start position:0%
will remain the same
 

00:03:15.159 --> 00:03:16.710 align:start position:0%
will remain the same
you<00:03:15.579><c> can't</c><00:03:15.849><c> be</c><00:03:15.970><c> sure</c><00:03:16.209><c> that</c><00:03:16.239><c> you</c><00:03:16.540><c> haven't</c>

00:03:16.710 --> 00:03:16.720 align:start position:0%
you can't be sure that you haven't
 

00:03:16.720 --> 00:03:18.449 align:start position:0%
you can't be sure that you haven't
accidentally<00:03:17.260><c> changed</c><00:03:17.680><c> some</c><00:03:17.859><c> functionality</c>

00:03:18.449 --> 00:03:18.459 align:start position:0%
accidentally changed some functionality
 

00:03:18.459 --> 00:03:20.339 align:start position:0%
accidentally changed some functionality
if<00:03:18.639><c> you</c><00:03:18.700><c> don't</c><00:03:19.030><c> have</c><00:03:19.209><c> automated</c><00:03:19.629><c> tests</c><00:03:20.079><c> that</c>

00:03:20.339 --> 00:03:20.349 align:start position:0%
if you don't have automated tests that
 

00:03:20.349 --> 00:03:22.379 align:start position:0%
if you don't have automated tests that
prove<00:03:20.650><c> to</c><00:03:20.859><c> you</c><00:03:21.010><c> your</c><00:03:21.579><c> code</c><00:03:21.849><c> still</c><00:03:22.150><c> does</c><00:03:22.359><c> the</c>

00:03:22.379 --> 00:03:22.389 align:start position:0%
prove to you your code still does the
 

00:03:22.389 --> 00:03:25.199 align:start position:0%
prove to you your code still does the
same<00:03:22.720><c> thing</c><00:03:22.930><c> it</c><00:03:23.079><c> used</c><00:03:23.260><c> to</c><00:03:23.349><c> do</c><00:03:24.209><c> performance</c>

00:03:25.199 --> 00:03:25.209 align:start position:0%
same thing it used to do performance
 

00:03:25.209 --> 00:03:26.670 align:start position:0%
same thing it used to do performance
tests<00:03:25.510><c> are</c><00:03:25.599><c> important</c><00:03:26.019><c> for</c><00:03:26.139><c> the</c><00:03:26.199><c> same</c><00:03:26.379><c> sort</c><00:03:26.650><c> of</c>

00:03:26.670 --> 00:03:26.680 align:start position:0%
tests are important for the same sort of
 

00:03:26.680 --> 00:03:28.559 align:start position:0%
tests are important for the same sort of
thing<00:03:26.919><c> and</c><00:03:27.220><c> in</c><00:03:27.489><c> fact</c><00:03:27.699><c> we'll</c><00:03:27.849><c> talk</c><00:03:28.060><c> quite</c><00:03:28.329><c> a</c><00:03:28.359><c> lot</c>

00:03:28.559 --> 00:03:28.569 align:start position:0%
thing and in fact we'll talk quite a lot
 

00:03:28.569 --> 00:03:29.759 align:start position:0%
thing and in fact we'll talk quite a lot
about<00:03:28.750><c> the</c><00:03:28.930><c> performance</c><00:03:29.379><c> of</c><00:03:29.470><c> some</c><00:03:29.650><c> of</c><00:03:29.709><c> these</c>

00:03:29.759 --> 00:03:29.769 align:start position:0%
about the performance of some of these
 

00:03:29.769 --> 00:03:31.559 align:start position:0%
about the performance of some of these
refactorings<00:03:30.400><c> as</c><00:03:30.579><c> we</c><00:03:30.790><c> go</c><00:03:30.909><c> through</c><00:03:31.150><c> this</c><00:03:31.299><c> talk</c>

00:03:31.559 --> 00:03:31.569 align:start position:0%
refactorings as we go through this talk
 

00:03:31.569 --> 00:03:35.009 align:start position:0%
refactorings as we go through this talk
so<00:03:32.079><c> you'll</c><00:03:32.680><c> get</c><00:03:33.010><c> an</c><00:03:33.159><c> idea</c><00:03:33.250><c> for</c><00:03:34.030><c> perhaps</c><00:03:34.659><c> how</c>

00:03:35.009 --> 00:03:35.019 align:start position:0%
so you'll get an idea for perhaps how
 

00:03:35.019 --> 00:03:37.319 align:start position:0%
so you'll get an idea for perhaps how
using<00:03:35.470><c> Java</c><00:03:35.709><c> 8</c><00:03:35.859><c> idioms</c><00:03:36.250><c> impacts</c><00:03:37.239><c> the</c>

00:03:37.319 --> 00:03:37.329 align:start position:0%
using Java 8 idioms impacts the
 

00:03:37.329 --> 00:03:39.509 align:start position:0%
using Java 8 idioms impacts the
performance<00:03:37.780><c> of</c><00:03:37.840><c> your</c><00:03:37.959><c> code</c><00:03:38.199><c> if</c><00:03:38.519><c> performance</c>

00:03:39.509 --> 00:03:39.519 align:start position:0%
performance of your code if performance
 

00:03:39.519 --> 00:03:41.309 align:start position:0%
performance of your code if performance
is<00:03:39.669><c> important</c><00:03:40.239><c> to</c><00:03:40.359><c> you</c><00:03:40.449><c> it's</c><00:03:40.690><c> important</c><00:03:41.260><c> to</c>

00:03:41.309 --> 00:03:41.319 align:start position:0%
is important to you it's important to
 

00:03:41.319 --> 00:03:43.110 align:start position:0%
is important to you it's important to
have<00:03:41.500><c> tests</c><00:03:42.159><c> to</c><00:03:42.370><c> prove</c><00:03:42.519><c> that</c><00:03:42.730><c> you</c><00:03:42.849><c> haven't</c>

00:03:43.110 --> 00:03:43.120 align:start position:0%
have tests to prove that you haven't
 

00:03:43.120 --> 00:03:44.670 align:start position:0%
have tests to prove that you haven't
done<00:03:43.239><c> something</c><00:03:43.389><c> weird</c><00:03:43.900><c> to</c><00:03:44.169><c> impact</c><00:03:44.590><c> the</c>

00:03:44.670 --> 00:03:44.680 align:start position:0%
done something weird to impact the
 

00:03:44.680 --> 00:03:46.289 align:start position:0%
done something weird to impact the
performance<00:03:44.799><c> and</c><00:03:45.609><c> when</c><00:03:45.790><c> I</c><00:03:45.819><c> say</c><00:03:46.000><c> involves</c>

00:03:46.289 --> 00:03:46.299 align:start position:0%
performance and when I say involves
 

00:03:46.299 --> 00:03:48.569 align:start position:0%
performance and when I say involves
performance<00:03:47.019><c> is</c><00:03:47.079><c> important</c><00:03:47.560><c> I</c><00:03:47.769><c> don't</c>

00:03:48.569 --> 00:03:48.579 align:start position:0%
performance is important I don't
 

00:03:48.579 --> 00:03:50.819 align:start position:0%
performance is important I don't
necessarily<00:03:48.669><c> just</c><00:03:49.209><c> mean</c><00:03:49.269><c> sort</c><00:03:49.930><c> of</c><00:03:50.019><c> nanosecond</c>

00:03:50.819 --> 00:03:50.829 align:start position:0%
necessarily just mean sort of nanosecond
 

00:03:50.829 --> 00:03:53.069 align:start position:0%
necessarily just mean sort of nanosecond
latency<00:03:51.609><c> for</c><00:03:51.940><c> high-frequency</c><00:03:52.329><c> trading</c><00:03:52.840><c> or</c>

00:03:53.069 --> 00:03:53.079 align:start position:0%
latency for high-frequency trading or
 

00:03:53.079 --> 00:03:54.740 align:start position:0%
latency for high-frequency trading or
whatever<00:03:53.319><c> I</c><00:03:53.560><c> sometimes</c><00:03:54.190><c> mean</c><00:03:54.370><c> things</c><00:03:54.639><c> like</c>

00:03:54.740 --> 00:03:54.750 align:start position:0%
whatever I sometimes mean things like
 

00:03:54.750 --> 00:03:57.240 align:start position:0%
whatever I sometimes mean things like
responsiveness<00:03:55.750><c> to</c><00:03:56.019><c> the</c><00:03:56.109><c> user</c><00:03:56.349><c> in</c><00:03:56.709><c> less</c><00:03:57.099><c> than</c>

00:03:57.240 --> 00:03:57.250 align:start position:0%
responsiveness to the user in less than
 

00:03:57.250 --> 00:03:59.520 align:start position:0%
responsiveness to the user in less than
half<00:03:57.310><c> a</c><00:03:57.579><c> second</c><00:03:57.940><c> or</c><00:03:58.090><c> something</c><00:03:58.989><c> like</c><00:03:59.109><c> how</c><00:03:59.349><c> long</c>

00:03:59.520 --> 00:03:59.530 align:start position:0%
half a second or something like how long
 

00:03:59.530 --> 00:04:01.110 align:start position:0%
half a second or something like how long
does<00:03:59.590><c> it</c><00:03:59.739><c> take</c><00:04:00.040><c> an</c><00:04:00.250><c> Android</c><00:04:00.579><c> app</c><00:04:00.760><c> to</c><00:04:00.940><c> make</c><00:04:01.090><c> a</c>

00:04:01.110 --> 00:04:01.120 align:start position:0%
does it take an Android app to make a
 

00:04:01.120 --> 00:04:02.939 align:start position:0%
does it take an Android app to make a
call<00:04:01.389><c> to</c><00:04:01.540><c> the</c><00:04:01.629><c> backend</c><00:04:01.810><c> so</c><00:04:02.560><c> these</c><00:04:02.680><c> aren't</c>

00:04:02.939 --> 00:04:02.949 align:start position:0%
call to the backend so these aren't
 

00:04:02.949 --> 00:04:05.039 align:start position:0%
call to the backend so these aren't
necessarily<00:04:03.159><c> I'm</c><00:04:04.000><c> not</c><00:04:04.180><c> talking</c><00:04:04.389><c> about</c><00:04:04.540><c> high</c>

00:04:05.039 --> 00:04:05.049 align:start position:0%
necessarily I'm not talking about high
 

00:04:05.049 --> 00:04:06.689 align:start position:0%
necessarily I'm not talking about high
performance<00:04:05.109><c> I'm</c><00:04:05.829><c> talking</c><00:04:06.250><c> about</c><00:04:06.310><c> making</c>

00:04:06.689 --> 00:04:06.699 align:start position:0%
performance I'm talking about making
 

00:04:06.699 --> 00:04:08.759 align:start position:0%
performance I'm talking about making
sure<00:04:06.909><c> that</c><00:04:07.180><c> you</c><00:04:07.299><c> have</c><00:04:07.329><c> performance</c><00:04:07.900><c> tests</c><00:04:08.379><c> for</c>

00:04:08.759 --> 00:04:08.769 align:start position:0%
sure that you have performance tests for
 

00:04:08.769 --> 00:04:10.050 align:start position:0%
sure that you have performance tests for
the<00:04:08.829><c> things</c><00:04:09.069><c> that</c><00:04:09.250><c> really</c><00:04:09.430><c> matter</c><00:04:09.760><c> to</c><00:04:09.970><c> you</c>

00:04:10.050 --> 00:04:10.060 align:start position:0%
the things that really matter to you
 

00:04:10.060 --> 00:04:13.649 align:start position:0%
the things that really matter to you
performance<00:04:10.540><c> wise</c><00:04:12.090><c> before</c><00:04:13.090><c> you</c><00:04:13.209><c> do</c><00:04:13.329><c> any</c><00:04:13.479><c> sort</c>

00:04:13.649 --> 00:04:13.659 align:start position:0%
performance wise before you do any sort
 

00:04:13.659 --> 00:04:15.360 align:start position:0%
performance wise before you do any sort
of<00:04:13.780><c> refactoring</c><00:04:14.290><c> you</c><00:04:14.440><c> really</c><00:04:14.769><c> need</c><00:04:14.919><c> to</c><00:04:15.010><c> decide</c>

00:04:15.360 --> 00:04:15.370 align:start position:0%
of refactoring you really need to decide
 

00:04:15.370 --> 00:04:18.659 align:start position:0%
of refactoring you really need to decide
as<00:04:15.669><c> a</c><00:04:15.699><c> team</c><00:04:15.819><c> as</c><00:04:16.329><c> an</c><00:04:16.690><c> organization</c><00:04:17.409><c> why</c><00:04:18.130><c> you're</c>

00:04:18.659 --> 00:04:18.669 align:start position:0%
as a team as an organization why you're
 

00:04:18.669 --> 00:04:20.430 align:start position:0%
as a team as an organization why you're
going<00:04:18.940><c> to</c><00:04:19.060><c> do</c><00:04:19.209><c> this</c><00:04:19.389><c> refactoring</c><00:04:20.049><c> and</c><00:04:20.229><c> there</c>

00:04:20.430 --> 00:04:20.440 align:start position:0%
going to do this refactoring and there
 

00:04:20.440 --> 00:04:21.719 align:start position:0%
going to do this refactoring and there
are<00:04:20.500><c> a</c><00:04:20.530><c> number</c><00:04:20.560><c> of</c><00:04:20.799><c> different</c><00:04:21.039><c> reasons</c><00:04:21.159><c> we've</c>

00:04:21.719 --> 00:04:21.729 align:start position:0%
are a number of different reasons we've
 

00:04:21.729 --> 00:04:23.219 align:start position:0%
are a number of different reasons we've
talked<00:04:21.940><c> about</c><00:04:22.060><c> things</c><00:04:22.389><c> like</c><00:04:22.449><c> performance</c><00:04:23.050><c> and</c>

00:04:23.219 --> 00:04:23.229 align:start position:0%
talked about things like performance and
 

00:04:23.229 --> 00:04:25.350 align:start position:0%
talked about things like performance and
readability<00:04:23.860><c> removing</c><00:04:24.610><c> boilerplate</c><00:04:25.120><c> and</c>

00:04:25.350 --> 00:04:25.360 align:start position:0%
readability removing boilerplate and
 

00:04:25.360 --> 00:04:28.719 align:start position:0%
readability removing boilerplate and
removing<00:04:26.169><c> errors</c><00:04:26.550><c> you</c><00:04:27.550><c> can</c><00:04:27.669><c> also</c><00:04:27.909><c> do</c><00:04:28.270><c> respect</c>

00:04:28.719 --> 00:04:28.729 align:start position:0%
removing errors you can also do respect
 

00:04:28.729 --> 00:04:31.239 align:start position:0%
removing errors you can also do respect
for<00:04:29.240><c> learning</c><00:04:29.960><c> you</c><00:04:30.259><c> might</c><00:04:30.469><c> want</c><00:04:30.650><c> to</c><00:04:30.740><c> upskill</c>

00:04:31.239 --> 00:04:31.249 align:start position:0%
for learning you might want to upskill
 

00:04:31.249 --> 00:04:34.450 align:start position:0%
for learning you might want to upskill
the<00:04:31.430><c> team</c><00:04:31.639><c> on</c><00:04:31.909><c> a</c><00:04:31.969><c> code</c><00:04:32.539><c> base</c><00:04:32.779><c> on</c><00:04:33.139><c> a</c><00:04:33.460><c> domain</c>

00:04:34.450 --> 00:04:34.460 align:start position:0%
the team on a code base on a domain
 

00:04:34.460 --> 00:04:36.999 align:start position:0%
the team on a code base on a domain
that's<00:04:34.909><c> familiar</c><00:04:35.180><c> to</c><00:04:35.479><c> them</c><00:04:35.749><c> so</c><00:04:36.349><c> get</c><00:04:36.559><c> them</c><00:04:36.770><c> used</c>

00:04:36.999 --> 00:04:37.009 align:start position:0%
that's familiar to them so get them used
 

00:04:37.009 --> 00:04:39.189 align:start position:0%
that's familiar to them so get them used
to<00:04:37.099><c> using</c><00:04:37.430><c> Java</c><00:04:37.639><c> idioms</c><00:04:37.969><c> in</c><00:04:38.419><c> an</c><00:04:38.689><c> environment</c>

00:04:39.189 --> 00:04:39.199 align:start position:0%
to using Java idioms in an environment
 

00:04:39.199 --> 00:04:40.779 align:start position:0%
to using Java idioms in an environment
as<00:04:39.289><c> comfortable</c><00:04:39.800><c> to</c><00:04:39.860><c> them</c><00:04:40.069><c> rather</c><00:04:40.550><c> than</c>

00:04:40.779 --> 00:04:40.789 align:start position:0%
as comfortable to them rather than
 

00:04:40.789 --> 00:04:42.700 align:start position:0%
as comfortable to them rather than
trying<00:04:41.150><c> to</c><00:04:41.240><c> get</c><00:04:41.569><c> them</c><00:04:41.779><c> up</c><00:04:41.960><c> skilled</c><00:04:42.379><c> on</c><00:04:42.499><c> a</c><00:04:42.589><c> new</c>

00:04:42.700 --> 00:04:42.710 align:start position:0%
trying to get them up skilled on a new
 

00:04:42.710 --> 00:04:44.920 align:start position:0%
trying to get them up skilled on a new
language<00:04:43.159><c> with</c><00:04:43.309><c> new</c><00:04:43.460><c> idioms</c><00:04:43.849><c> on</c><00:04:44.059><c> a</c><00:04:44.120><c> new</c><00:04:44.659><c> domain</c>

00:04:44.920 --> 00:04:44.930 align:start position:0%
language with new idioms on a new domain
 

00:04:44.930 --> 00:04:48.489 align:start position:0%
language with new idioms on a new domain
on<00:04:45.229><c> a</c><00:04:45.259><c> new</c><00:04:45.499><c> project</c><00:04:46.430><c> so</c><00:04:47.210><c> the</c><00:04:47.689><c> idea</c><00:04:48.050><c> of</c><00:04:48.139><c> doing</c>

00:04:48.489 --> 00:04:48.499 align:start position:0%
on a new project so the idea of doing
 

00:04:48.499 --> 00:04:50.439 align:start position:0%
on a new project so the idea of doing
refactoring<00:04:49.219><c> in</c><00:04:49.309><c> order</c><00:04:49.490><c> to</c><00:04:49.580><c> obscure</c><00:04:49.999><c> team</c><00:04:50.270><c> is</c>

00:04:50.439 --> 00:04:50.449 align:start position:0%
refactoring in order to obscure team is
 

00:04:50.449 --> 00:04:52.929 align:start position:0%
refactoring in order to obscure team is
also<00:04:50.659><c> a</c><00:04:50.870><c> valid</c><00:04:51.409><c> thing</c><00:04:51.559><c> to</c><00:04:51.770><c> choose</c><00:04:52.009><c> it</c><00:04:52.669><c> doesn't</c>

00:04:52.929 --> 00:04:52.939 align:start position:0%
also a valid thing to choose it doesn't
 

00:04:52.939 --> 00:04:54.189 align:start position:0%
also a valid thing to choose it doesn't
really<00:04:53.059><c> matter</c><00:04:53.270><c> which</c><00:04:53.539><c> of</c><00:04:53.569><c> these</c><00:04:53.779><c> goals</c><00:04:54.050><c> you</c>

00:04:54.189 --> 00:04:54.199 align:start position:0%
really matter which of these goals you
 

00:04:54.199 --> 00:04:57.100 align:start position:0%
really matter which of these goals you
choose<00:04:54.439><c> but</c><00:04:54.770><c> the</c><00:04:54.889><c> idea</c><00:04:55.189><c> is</c><00:04:55.460><c> is</c><00:04:56.089><c> to</c><00:04:56.419><c> have</c><00:04:56.990><c> in</c>

00:04:57.100 --> 00:04:57.110 align:start position:0%
choose but the idea is is to have in
 

00:04:57.110 --> 00:04:58.510 align:start position:0%
choose but the idea is is to have in
your<00:04:57.229><c> head</c><00:04:57.439><c> what</c><00:04:58.009><c> you're</c><00:04:58.159><c> trying</c><00:04:58.339><c> to</c><00:04:58.370><c> achieve</c>

00:04:58.510 --> 00:04:58.520 align:start position:0%
your head what you're trying to achieve
 

00:04:58.520 --> 00:04:59.950 align:start position:0%
your head what you're trying to achieve
by<00:04:58.819><c> doing</c><00:04:58.849><c> this</c><00:04:59.150><c> you're</c><00:04:59.300><c> factoring</c><00:04:59.539><c> and</c><00:04:59.749><c> stick</c>

00:04:59.950 --> 00:04:59.960 align:start position:0%
by doing this you're factoring and stick
 

00:04:59.960 --> 00:05:03.040 align:start position:0%
by doing this you're factoring and stick
to<00:05:00.110><c> that</c><00:05:01.240><c> you</c><00:05:02.240><c> should</c><00:05:02.389><c> limit</c><00:05:02.539><c> the</c><00:05:02.719><c> scope</c><00:05:02.809><c> of</c>

00:05:03.040 --> 00:05:03.050 align:start position:0%
to that you should limit the scope of
 

00:05:03.050 --> 00:05:04.749 align:start position:0%
to that you should limit the scope of
any<00:05:03.139><c> refactoring</c><00:05:03.680><c> you're</c><00:05:03.830><c> doing</c><00:05:04.069><c> in</c><00:05:04.430><c> these</c>

00:05:04.749 --> 00:05:04.759 align:start position:0%
any refactoring you're doing in these
 

00:05:04.759 --> 00:05:06.459 align:start position:0%
any refactoring you're doing in these
examples<00:05:05.059><c> were</c><00:05:05.419><c> largely</c><00:05:05.749><c> going</c><00:05:06.020><c> to</c><00:05:06.110><c> look</c><00:05:06.289><c> at</c>

00:05:06.459 --> 00:05:06.469 align:start position:0%
examples were largely going to look at
 

00:05:06.469 --> 00:05:07.749 align:start position:0%
examples were largely going to look at
the<00:05:06.770><c> method</c><00:05:07.069><c> level</c><00:05:07.219><c> so</c><00:05:07.430><c> they're</c><00:05:07.550><c> going</c><00:05:07.639><c> to</c><00:05:07.699><c> be</c>

00:05:07.749 --> 00:05:07.759 align:start position:0%
the method level so they're going to be
 

00:05:07.759 --> 00:05:10.570 align:start position:0%
the method level so they're going to be
small<00:05:08.180><c> and</c><00:05:08.559><c> small</c><00:05:09.559><c> bits</c><00:05:09.860><c> of</c><00:05:10.039><c> refactoring</c><00:05:10.520><c> that</c>

00:05:10.570 --> 00:05:10.580 align:start position:0%
small and small bits of refactoring that
 

00:05:10.580 --> 00:05:12.159 align:start position:0%
small and small bits of refactoring that
we're<00:05:10.729><c> doing</c><00:05:10.849><c> that</c><00:05:11.149><c> has</c><00:05:11.300><c> fairly</c><00:05:11.899><c> limited</c>

00:05:12.159 --> 00:05:12.169 align:start position:0%
we're doing that has fairly limited
 

00:05:12.169 --> 00:05:14.619 align:start position:0%
we're doing that has fairly limited
scope<00:05:12.710><c> and</c><00:05:12.979><c> you</c><00:05:13.639><c> might</c><00:05:13.819><c> want</c><00:05:14.059><c> to</c><00:05:14.089><c> restrict</c>

00:05:14.619 --> 00:05:14.629 align:start position:0%
scope and you might want to restrict
 

00:05:14.629 --> 00:05:16.269 align:start position:0%
scope and you might want to restrict
things<00:05:14.899><c> either</c><00:05:15.050><c> to</c><00:05:15.259><c> a</c><00:05:15.289><c> method</c><00:05:15.620><c> level</c><00:05:15.740><c> or</c><00:05:16.039><c> class</c>

00:05:16.269 --> 00:05:16.279 align:start position:0%
things either to a method level or class
 

00:05:16.279 --> 00:05:17.950 align:start position:0%
things either to a method level or class
level<00:05:16.639><c> and</c><00:05:16.819><c> we</c><00:05:17.210><c> certainly</c><00:05:17.449><c> shouldn't</c><00:05:17.599><c> go</c>

00:05:17.950 --> 00:05:17.960 align:start position:0%
level and we certainly shouldn't go
 

00:05:17.960 --> 00:05:19.809 align:start position:0%
level and we certainly shouldn't go
straight<00:05:18.289><c> in</c><00:05:18.469><c> and</c><00:05:18.830><c> try</c><00:05:19.129><c> to</c><00:05:19.189><c> refactor</c><00:05:19.610><c> the</c>

00:05:19.809 --> 00:05:19.819 align:start position:0%
straight in and try to refactor the
 

00:05:19.819 --> 00:05:22.059 align:start position:0%
straight in and try to refactor the
whole<00:05:19.999><c> code</c><00:05:20.389><c> base</c><00:05:20.599><c> to</c><00:05:20.870><c> use</c><00:05:21.259><c> optional</c><00:05:21.919><c> for</c>

00:05:22.059 --> 00:05:22.069 align:start position:0%
whole code base to use optional for
 

00:05:22.069 --> 00:05:24.189 align:start position:0%
whole code base to use optional for
example<00:05:22.460><c> you</c><00:05:22.849><c> really</c><00:05:23.149><c> want</c><00:05:23.360><c> to</c><00:05:23.569><c> bring</c><00:05:23.930><c> friends</c>

00:05:24.189 --> 00:05:24.199 align:start position:0%
example you really want to bring friends
 

00:05:24.199 --> 00:05:25.420 align:start position:0%
example you really want to bring friends
the<00:05:24.409><c> area</c><00:05:24.770><c> that</c><00:05:24.949><c> you're</c><00:05:25.069><c> doing</c><00:05:25.249><c> these</c>

00:05:25.420 --> 00:05:25.430 align:start position:0%
the area that you're doing these
 

00:05:25.430 --> 00:05:29.709 align:start position:0%
the area that you're doing these
refactorings<00:05:26.029><c> in</c><00:05:28.059><c> the</c><00:05:29.059><c> code</c><00:05:29.270><c> base</c><00:05:29.419><c> were</c><00:05:29.569><c> going</c>

00:05:29.709 --> 00:05:29.719 align:start position:0%
refactorings in the code base were going
 

00:05:29.719 --> 00:05:31.149 align:start position:0%
refactorings in the code base were going
to<00:05:29.809><c> be</c><00:05:29.870><c> looking</c><00:05:29.990><c> at</c><00:05:30.259><c> is</c><00:05:30.469><c> a</c><00:05:30.499><c> project</c><00:05:31.009><c> called</c>

00:05:31.149 --> 00:05:31.159 align:start position:0%
to be looking at is a project called
 

00:05:31.159 --> 00:05:33.040 align:start position:0%
to be looking at is a project called
morphia<00:05:31.610><c> this</c><00:05:31.969><c> is</c><00:05:32.120><c> an</c><00:05:32.210><c> object</c><00:05:32.599><c> document</c>

00:05:33.040 --> 00:05:33.050 align:start position:0%
morphia this is an object document
 

00:05:33.050 --> 00:05:35.139 align:start position:0%
morphia this is an object document
mapper<00:05:33.259><c> for</c><00:05:33.740><c> MongoDB</c><00:05:34.459><c> and</c><00:05:34.729><c> there's</c><00:05:34.909><c> a</c><00:05:34.969><c> few</c>

00:05:35.139 --> 00:05:35.149 align:start position:0%
mapper for MongoDB and there's a few
 

00:05:35.149 --> 00:05:37.360 align:start position:0%
mapper for MongoDB and there's a few
reasons<00:05:35.300><c> why</c><00:05:35.659><c> I've</c><00:05:36.020><c> chosen</c><00:05:36.050><c> this</c><00:05:36.529><c> firstly</c>

00:05:37.360 --> 00:05:37.370 align:start position:0%
reasons why I've chosen this firstly
 

00:05:37.370 --> 00:05:39.070 align:start position:0%
reasons why I've chosen this firstly
because<00:05:37.699><c> I</c><00:05:37.729><c> was</c><00:05:38.089><c> working</c><00:05:38.419><c> on</c><00:05:38.509><c> it</c><00:05:38.659><c> when</c><00:05:38.810><c> I</c><00:05:38.839><c> was</c>

00:05:39.070 --> 00:05:39.080 align:start position:0%
because I was working on it when I was
 

00:05:39.080 --> 00:05:40.869 align:start position:0%
because I was working on it when I was
working<00:05:39.349><c> at</c><00:05:39.409><c> MongoDB</c><00:05:39.560><c> so</c><00:05:40.129><c> it's</c><00:05:40.249><c> a</c><00:05:40.310><c> code</c><00:05:40.520><c> base</c><00:05:40.699><c> I</c>

00:05:40.869 --> 00:05:40.879 align:start position:0%
working at MongoDB so it's a code base I
 

00:05:40.879 --> 00:05:42.550 align:start position:0%
working at MongoDB so it's a code base I
know<00:05:40.939><c> very</c><00:05:41.209><c> well</c><00:05:41.330><c> but</c><00:05:42.080><c> more</c><00:05:42.289><c> interestingly</c>

00:05:42.550 --> 00:05:42.560 align:start position:0%
know very well but more interestingly
 

00:05:42.560 --> 00:05:44.920 align:start position:0%
know very well but more interestingly
it's<00:05:43.399><c> an</c><00:05:43.699><c> open</c><00:05:43.999><c> source</c><00:05:44.120><c> code</c><00:05:44.389><c> base</c><00:05:44.599><c> so</c><00:05:44.629><c> that</c>

00:05:44.920 --> 00:05:44.930 align:start position:0%
it's an open source code base so that
 

00:05:44.930 --> 00:05:46.449 align:start position:0%
it's an open source code base so that
you<00:05:45.020><c> can</c><00:05:45.169><c> take</c><00:05:45.349><c> a</c><00:05:45.379><c> look</c><00:05:45.529><c> at</c><00:05:45.680><c> it</c><00:05:45.830><c> for</c><00:05:45.919><c> yourself</c>

00:05:46.449 --> 00:05:46.459 align:start position:0%
you can take a look at it for yourself
 

00:05:46.459 --> 00:05:47.889 align:start position:0%
you can take a look at it for yourself
see<00:05:46.879><c> their</c><00:05:47.060><c> before</c><00:05:47.330><c> and</c><00:05:47.389><c> after</c><00:05:47.599><c> the</c>

00:05:47.889 --> 00:05:47.899 align:start position:0%
see their before and after the
 

00:05:47.899 --> 00:05:51.010 align:start position:0%
see their before and after the
refactorings<00:05:48.620><c> it's</c><00:05:49.189><c> also</c><00:05:49.610><c> a</c><00:05:50.240><c> fairly</c><00:05:50.810><c> mature</c>

00:05:51.010 --> 00:05:51.020 align:start position:0%
refactorings it's also a fairly mature
 

00:05:51.020 --> 00:05:54.010 align:start position:0%
refactorings it's also a fairly mature
piece<00:05:51.649><c> of</c><00:05:51.800><c> code</c><00:05:52.039><c> so</c><00:05:52.430><c> it</c><00:05:52.699><c> has</c><00:05:52.999><c> a</c><00:05:53.270><c> lot</c><00:05:53.870><c> of</c><00:05:53.899><c> the</c>

00:05:54.010 --> 00:05:54.020 align:start position:0%
piece of code so it has a lot of the
 

00:05:54.020 --> 00:05:55.119 align:start position:0%
piece of code so it has a lot of the
same<00:05:54.169><c> characteristics</c><00:05:54.800><c> you'll</c><00:05:54.949><c> probably</c>

00:05:55.119 --> 00:05:55.129 align:start position:0%
same characteristics you'll probably
 

00:05:55.129 --> 00:05:57.219 align:start position:0%
same characteristics you'll probably
find<00:05:55.399><c> inside</c><00:05:55.789><c> a</c><00:05:55.819><c> lot</c><00:05:56.060><c> of</c><00:05:56.149><c> your</c><00:05:56.270><c> own</c><00:05:56.479><c> code</c><00:05:56.779><c> bases</c>

00:05:57.219 --> 00:05:57.229 align:start position:0%
find inside a lot of your own code bases
 

00:05:57.229 --> 00:06:01.089 align:start position:0%
find inside a lot of your own code bases
sort<00:05:57.979><c> of</c><00:05:58.089><c> bits</c><00:05:59.089><c> of</c><00:05:59.240><c> code</c><00:05:59.479><c> that</c><00:05:59.959><c> maybe</c><00:06:00.409><c> have</c>

00:06:01.089 --> 00:06:01.099 align:start position:0%
sort of bits of code that maybe have
 

00:06:01.099 --> 00:06:04.600 align:start position:0%
sort of bits of code that maybe have
evolved<00:06:02.029><c> in</c><00:06:02.180><c> a</c><00:06:02.449><c> sub</c><00:06:03.229><c> optimal</c><00:06:03.770><c> way</c><00:06:03.979><c> over</c><00:06:04.399><c> time</c>

00:06:04.600 --> 00:06:04.610 align:start position:0%
evolved in a sub optimal way over time
 

00:06:04.610 --> 00:06:07.059 align:start position:0%
evolved in a sub optimal way over time
or<00:06:04.969><c> bits</c><00:06:05.749><c> of</c><00:06:05.930><c> code</c><00:06:06.139><c> where</c><00:06:06.469><c> it's</c><00:06:06.860><c> no</c><00:06:07.039><c> longer</c>

00:06:07.059 --> 00:06:07.069 align:start position:0%
or bits of code where it's no longer
 

00:06:07.069 --> 00:06:08.920 align:start position:0%
or bits of code where it's no longer
sort<00:06:07.520><c> of</c><00:06:07.580><c> fashionable</c><00:06:08.089><c> to</c><00:06:08.240><c> follow</c><00:06:08.449><c> those</c><00:06:08.689><c> ways</c>

00:06:08.920 --> 00:06:08.930 align:start position:0%
sort of fashionable to follow those ways
 

00:06:08.930 --> 00:06:11.559 align:start position:0%
sort of fashionable to follow those ways
of<00:06:09.110><c> doing</c><00:06:09.229><c> stuff</c><00:06:09.620><c> so</c><00:06:09.860><c> it's</c><00:06:10.610><c> quite</c><00:06:10.909><c> a</c><00:06:10.969><c> nice</c><00:06:11.209><c> code</c>

00:06:11.559 --> 00:06:11.569 align:start position:0%
of doing stuff so it's quite a nice code
 

00:06:11.569 --> 00:06:13.360 align:start position:0%
of doing stuff so it's quite a nice code
base<00:06:11.779><c> for</c><00:06:11.990><c> refactoring</c><00:06:12.319><c> is</c><00:06:12.680><c> you</c><00:06:12.830><c> can</c><00:06:13.009><c> look</c><00:06:13.219><c> at</c>

00:06:13.360 --> 00:06:13.370 align:start position:0%
base for refactoring is you can look at
 

00:06:13.370 --> 00:06:15.459 align:start position:0%
base for refactoring is you can look at
some<00:06:13.550><c> of</c><00:06:13.699><c> these</c><00:06:13.849><c> and</c><00:06:14.240><c> use</c><00:06:14.569><c> chunks</c><00:06:14.870><c> of</c><00:06:14.959><c> code</c><00:06:15.169><c> and</c>

00:06:15.459 --> 00:06:15.469 align:start position:0%
some of these and use chunks of code and
 

00:06:15.469 --> 00:06:17.559 align:start position:0%
some of these and use chunks of code and
think<00:06:16.069><c> of</c><00:06:16.159><c> better</c><00:06:16.399><c> ways</c><00:06:16.580><c> to</c><00:06:16.610><c> do</c><00:06:17.089><c> these</c><00:06:17.270><c> things</c>

00:06:17.559 --> 00:06:17.569 align:start position:0%
think of better ways to do these things
 

00:06:17.569 --> 00:06:22.510 align:start position:0%
think of better ways to do these things
especially<00:06:17.899><c> using</c><00:06:18.439><c> Java</c><00:06:18.649><c> 8</c><00:06:21.219><c> so</c><00:06:22.219><c> without</c>

00:06:22.510 --> 00:06:22.520 align:start position:0%
especially using Java 8 so without
 

00:06:22.520 --> 00:06:24.489 align:start position:0%
especially using Java 8 so without
further<00:06:22.729><c> ado</c><00:06:23.089><c> let's</c><00:06:23.539><c> dive</c><00:06:23.809><c> straight</c><00:06:23.839><c> in</c><00:06:24.319><c> and</c>

00:06:24.489 --> 00:06:24.499 align:start position:0%
further ado let's dive straight in and
 

00:06:24.499 --> 00:06:26.829 align:start position:0%
further ado let's dive straight in and
start<00:06:24.680><c> doing</c><00:06:24.740><c> some</c><00:06:25.129><c> refactoring</c><00:06:25.599><c> the</c><00:06:26.599><c> first</c>

00:06:26.829 --> 00:06:26.839 align:start position:0%
start doing some refactoring the first
 

00:06:26.839 --> 00:06:28.480 align:start position:0%
start doing some refactoring the first
thing<00:06:26.990><c> I</c><00:06:27.080><c> want</c><00:06:27.259><c> to</c><00:06:27.349><c> look</c><00:06:27.469><c> at</c><00:06:27.649><c> is</c><00:06:27.860><c> refactoring</c>

00:06:28.480 --> 00:06:28.490 align:start position:0%
thing I want to look at is refactoring
 

00:06:28.490 --> 00:06:30.519 align:start position:0%
thing I want to look at is refactoring
to<00:06:28.639><c> using</c><00:06:28.999><c> lambda</c><00:06:29.419><c> expressions</c><00:06:30.020><c> because</c><00:06:30.379><c> this</c>

00:06:30.519 --> 00:06:30.529 align:start position:0%
to using lambda expressions because this
 

00:06:30.529 --> 00:06:31.920 align:start position:0%
to using lambda expressions because this
is<00:06:30.680><c> probably</c><00:06:30.949><c> the</c><00:06:31.099><c> simplest</c><00:06:31.399><c> and</c><00:06:31.759><c> most</c>

00:06:31.920 --> 00:06:31.930 align:start position:0%
is probably the simplest and most
 

00:06:31.930 --> 00:06:36.010 align:start position:0%
is probably the simplest and most
automated<00:06:32.930><c> refactoring</c><00:06:33.830><c> that</c><00:06:33.949><c> we</c><00:06:34.039><c> can</c><00:06:34.219><c> do</c><00:06:35.020><c> the</c>

00:06:36.010 --> 00:06:36.020 align:start position:0%
automated refactoring that we can do the
 

00:06:36.020 --> 00:06:39.819 align:start position:0%
automated refactoring that we can do the
easiest<00:06:36.800><c> things</c><00:06:37.129><c> that</c><00:06:37.310><c> we</c><00:06:37.399><c> can</c><00:06:37.610><c> do</c><00:06:38.829><c> the</c>

00:06:39.819 --> 00:06:39.829 align:start position:0%
easiest things that we can do the
 

00:06:39.829 --> 00:06:40.550 align:start position:0%
easiest things that we can do the
easiest<00:06:40.069><c> things</c>

00:06:40.550 --> 00:06:40.560 align:start position:0%
easiest things
 

00:06:40.560 --> 00:06:43.400 align:start position:0%
easiest things
can<00:06:40.650><c> do</c><00:06:40.800><c> is</c><00:06:41.100><c> take</c><00:06:41.610><c> the</c><00:06:42.150><c> take</c><00:06:42.930><c> any</c><00:06:43.110><c> any</c>

00:06:43.400 --> 00:06:43.410 align:start position:0%
can do is take the take any any
 

00:06:43.410 --> 00:06:45.860 align:start position:0%
can do is take the take any any
anonymous<00:06:43.860><c> inner</c><00:06:44.250><c> classes</c><00:06:44.520><c> that</c><00:06:45.030><c> implemented</c>

00:06:45.860 --> 00:06:45.870 align:start position:0%
anonymous inner classes that implemented
 

00:06:45.870 --> 00:06:49.340 align:start position:0%
anonymous inner classes that implemented
things<00:06:46.650><c> like</c><00:06:46.950><c> comparator</c><00:06:47.790><c> runnable</c><00:06:48.600><c> callable</c>

00:06:49.340 --> 00:06:49.350 align:start position:0%
things like comparator runnable callable
 

00:06:49.350 --> 00:06:51.710 align:start position:0%
things like comparator runnable callable
predicate<00:06:50.010><c> all</c><00:06:50.490><c> of</c><00:06:50.730><c> these</c><00:06:50.850><c> interfaces</c><00:06:51.180><c> that</c>

00:06:51.710 --> 00:06:51.720 align:start position:0%
predicate all of these interfaces that
 

00:06:51.720 --> 00:06:53.780 align:start position:0%
predicate all of these interfaces that
always<00:06:52.110><c> only</c><00:06:52.470><c> have</c><00:06:52.620><c> a</c><00:06:52.650><c> single</c><00:06:52.919><c> abstract</c>

00:06:53.780 --> 00:06:53.790 align:start position:0%
always only have a single abstract
 

00:06:53.790 --> 00:06:57.020 align:start position:0%
always only have a single abstract
method<00:06:54.150><c> and</c><00:06:54.470><c> use</c><00:06:55.470><c> give</c><00:06:56.310><c> lambda</c><00:06:56.639><c> expressions</c>

00:06:57.020 --> 00:06:57.030 align:start position:0%
method and use give lambda expressions
 

00:06:57.030 --> 00:07:02.030 align:start position:0%
method and use give lambda expressions
instead<00:06:57.240><c> of</c><00:06:57.419><c> using</c><00:06:57.830><c> anonymous</c><00:06:58.830><c> inner</c><00:06:59.040><c> type</c><00:07:01.040><c> so</c>

00:07:02.030 --> 00:07:02.040 align:start position:0%
instead of using anonymous inner type so
 

00:07:02.040 --> 00:07:04.879 align:start position:0%
instead of using anonymous inner type so
let's<00:07:02.280><c> go</c><00:07:02.490><c> straight</c><00:07:03.180><c> into</c><00:07:03.419><c> our</c><00:07:03.630><c> code</c><00:07:03.889><c> what</c>

00:07:04.879 --> 00:07:04.889 align:start position:0%
let's go straight into our code what
 

00:07:04.889 --> 00:07:07.730 align:start position:0%
let's go straight into our code what
I've<00:07:05.010><c> done</c><00:07:05.310><c> is</c><00:07:05.610><c> I've</c><00:07:06.090><c> run</c><00:07:06.419><c> inspections</c><00:07:07.410><c> on</c><00:07:07.620><c> the</c>

00:07:07.730 --> 00:07:07.740 align:start position:0%
I've done is I've run inspections on the
 

00:07:07.740 --> 00:07:10.220 align:start position:0%
I've done is I've run inspections on the
morphia<00:07:08.070><c> codebase</c><00:07:08.580><c> I'll</c><00:07:09.330><c> take</c><00:07:09.750><c> a</c><00:07:09.780><c> quick</c><00:07:10.050><c> look</c>

00:07:10.220 --> 00:07:10.230 align:start position:0%
morphia codebase I'll take a quick look
 

00:07:10.230 --> 00:07:11.930 align:start position:0%
morphia codebase I'll take a quick look
at<00:07:10.380><c> this</c><00:07:10.470><c> because</c><00:07:10.950><c> I'm</c><00:07:11.490><c> in</c><00:07:11.639><c> a</c><00:07:11.730><c> fortunate</c>

00:07:11.930 --> 00:07:11.940 align:start position:0%
at this because I'm in a fortunate
 

00:07:11.940 --> 00:07:14.180 align:start position:0%
at this because I'm in a fortunate
situation<00:07:12.510><c> where</c><00:07:13.380><c> I</c><00:07:13.410><c> can</c><00:07:13.620><c> actually</c><00:07:13.800><c> show</c><00:07:14.160><c> some</c>

00:07:14.180 --> 00:07:14.190 align:start position:0%
situation where I can actually show some
 

00:07:14.190 --> 00:07:17.420 align:start position:0%
situation where I can actually show some
of<00:07:14.520><c> the</c><00:07:14.639><c> IntelliJ</c><00:07:15.560><c> specific</c><00:07:16.560><c> features</c><00:07:17.220><c> in</c>

00:07:17.420 --> 00:07:17.430 align:start position:0%
of the IntelliJ specific features in
 

00:07:17.430 --> 00:07:19.460 align:start position:0%
of the IntelliJ specific features in
this<00:07:17.580><c> webinar</c><00:07:17.850><c> so</c><00:07:18.600><c> I've</c><00:07:18.780><c> got</c><00:07:18.990><c> a</c><00:07:19.020><c> I've</c><00:07:19.320><c> got</c>

00:07:19.460 --> 00:07:19.470 align:start position:0%
this webinar so I've got a I've got
 

00:07:19.470 --> 00:07:21.140 align:start position:0%
this webinar so I've got a I've got
inspections<00:07:20.130><c> profile</c><00:07:20.490><c> called</c><00:07:20.729><c> Java</c><00:07:20.940><c> eight</c>

00:07:21.140 --> 00:07:21.150 align:start position:0%
inspections profile called Java eight
 

00:07:21.150 --> 00:07:23.870 align:start position:0%
inspections profile called Java eight
and<00:07:21.450><c> I've</c><00:07:21.540><c> selected</c><00:07:21.720><c> a</c><00:07:22.320><c> subset</c><00:07:23.100><c> of</c><00:07:23.580><c> the</c>

00:07:23.870 --> 00:07:23.880 align:start position:0%
and I've selected a subset of the
 

00:07:23.880 --> 00:07:25.730 align:start position:0%
and I've selected a subset of the
inspections<00:07:24.450><c> most</c><00:07:25.110><c> of</c><00:07:25.229><c> the</c><00:07:25.290><c> ones</c><00:07:25.500><c> that</c><00:07:25.650><c> I'm</c>

00:07:25.730 --> 00:07:25.740 align:start position:0%
inspections most of the ones that I'm
 

00:07:25.740 --> 00:07:29.810 align:start position:0%
inspections most of the ones that I'm
interested<00:07:26.220><c> in</c><00:07:26.310><c> are</c><00:07:26.520><c> in</c><00:07:27.360><c> the</c><00:07:28.280><c> let's</c><00:07:29.280><c> find</c><00:07:29.669><c> it</c>

00:07:29.810 --> 00:07:29.820 align:start position:0%
interested in are in the let's find it
 

00:07:29.820 --> 00:07:33.230 align:start position:0%
interested in are in the let's find it
so<00:07:30.419><c> I'm</c><00:07:30.510><c> in</c><00:07:30.690><c> Java</c><00:07:31.490><c> most</c><00:07:32.490><c> of</c><00:07:32.610><c> the</c><00:07:32.669><c> ones</c><00:07:32.850><c> I</c><00:07:32.970><c> care</c>

00:07:33.230 --> 00:07:33.240 align:start position:0%
so I'm in Java most of the ones I care
 

00:07:33.240 --> 00:07:39.340 align:start position:0%
so I'm in Java most of the ones I care
about<00:07:33.510><c> are</c><00:07:33.810><c> in</c><00:07:34.590><c> the</c><00:07:36.560><c> where</c><00:07:37.560><c> is</c><00:07:37.919><c> it</c>

00:07:39.340 --> 00:07:39.350 align:start position:0%
about are in the where is it
 

00:07:39.350 --> 00:07:49.060 align:start position:0%
about are in the where is it
I've<00:07:40.490><c> gone</c><00:07:41.490><c> right</c><00:07:41.729><c> past</c><00:07:41.940><c> it</c><00:07:43.340><c> language</c><00:07:45.770><c> level</c>

00:07:49.060 --> 00:07:49.070 align:start position:0%
 
 

00:07:49.070 --> 00:07:52.130 align:start position:0%
 
migration<00:07:50.070><c> AIDS</c><00:07:50.330><c> so</c><00:07:51.330><c> here</c><00:07:51.570><c> we</c><00:07:51.750><c> have</c><00:07:51.930><c> things</c>

00:07:52.130 --> 00:07:52.140 align:start position:0%
migration AIDS so here we have things
 

00:07:52.140 --> 00:07:55.340 align:start position:0%
migration AIDS so here we have things
like<00:07:52.289><c> we</c><00:07:53.250><c> are</c><00:07:53.610><c> selecting</c><00:07:54.000><c> to</c><00:07:54.510><c> find</c><00:07:54.930><c> anonymous</c>

00:07:55.340 --> 00:07:55.350 align:start position:0%
like we are selecting to find anonymous
 

00:07:55.350 --> 00:07:56.510 align:start position:0%
like we are selecting to find anonymous
inter<00:07:55.500><c> types</c><00:07:55.710><c> that</c><00:07:55.860><c> can</c><00:07:56.010><c> be</c><00:07:56.130><c> replaced</c><00:07:56.430><c> with</c>

00:07:56.510 --> 00:07:56.520 align:start position:0%
inter types that can be replaced with
 

00:07:56.520 --> 00:07:58.460 align:start position:0%
inter types that can be replaced with
lambda<00:07:56.760><c> expressions</c><00:07:57.360><c> there's</c><00:07:57.990><c> a</c><00:07:58.050><c> whole</c><00:07:58.200><c> bunch</c>

00:07:58.460 --> 00:07:58.470 align:start position:0%
lambda expressions there's a whole bunch
 

00:07:58.470 --> 00:08:00.140 align:start position:0%
lambda expressions there's a whole bunch
of<00:07:58.590><c> stuff</c><00:07:58.770><c> around</c><00:07:59.070><c> how</c><00:07:59.250><c> we</c><00:07:59.310><c> can</c><00:07:59.610><c> replace</c><00:07:59.820><c> lips</c>

00:08:00.140 --> 00:08:00.150 align:start position:0%
of stuff around how we can replace lips
 

00:08:00.150 --> 00:08:02.510 align:start position:0%
of stuff around how we can replace lips
to<00:08:00.240><c> the</c><00:08:00.330><c> streams</c><00:08:00.630><c> API</c><00:08:00.810><c> and</c><00:08:01.320><c> a</c><00:08:02.070><c> lot</c><00:08:02.310><c> of</c><00:08:02.400><c> other</c>

00:08:02.510 --> 00:08:02.520 align:start position:0%
to the streams API and a lot of other
 

00:08:02.520 --> 00:08:04.310 align:start position:0%
to the streams API and a lot of other
features<00:08:02.760><c> here</c><00:08:03.090><c> so</c><00:08:03.300><c> this</c><00:08:03.570><c> is</c><00:08:03.780><c> the</c><00:08:03.990><c> sort</c><00:08:04.289><c> of</c>

00:08:04.310 --> 00:08:04.320 align:start position:0%
features here so this is the sort of
 

00:08:04.320 --> 00:08:05.840 align:start position:0%
features here so this is the sort of
main<00:08:04.590><c> set</c><00:08:04.800><c> of</c><00:08:04.890><c> inspections</c><00:08:05.100><c> we're</c><00:08:05.580><c> going</c><00:08:05.760><c> to</c>

00:08:05.840 --> 00:08:05.850 align:start position:0%
main set of inspections we're going to
 

00:08:05.850 --> 00:08:07.430 align:start position:0%
main set of inspections we're going to
be<00:08:05.940><c> running</c><00:08:06.120><c> I'm</c><00:08:06.570><c> running</c><00:08:06.840><c> a</c><00:08:06.900><c> few</c><00:08:07.110><c> more</c><00:08:07.289><c> and</c>

00:08:07.430 --> 00:08:07.440 align:start position:0%
be running I'm running a few more and
 

00:08:07.440 --> 00:08:09.050 align:start position:0%
be running I'm running a few more and
we'll<00:08:07.560><c> see</c><00:08:07.680><c> those</c><00:08:07.860><c> as</c><00:08:08.039><c> we</c><00:08:08.130><c> come</c><00:08:08.310><c> along</c><00:08:08.430><c> but</c>

00:08:09.050 --> 00:08:09.060 align:start position:0%
we'll see those as we come along but
 

00:08:09.060 --> 00:08:10.370 align:start position:0%
we'll see those as we come along but
this<00:08:09.180><c> is</c><00:08:09.330><c> where</c><00:08:09.510><c> you</c><00:08:09.600><c> want</c><00:08:09.750><c> to</c><00:08:09.810><c> configure</c><00:08:10.110><c> them</c>

00:08:10.370 --> 00:08:10.380 align:start position:0%
this is where you want to configure them
 

00:08:10.380 --> 00:08:13.159 align:start position:0%
this is where you want to configure them
so<00:08:10.590><c> in</c><00:08:10.740><c> inspections</c><00:08:11.430><c> in</c><00:08:11.639><c> a</c><00:08:11.930><c> language</c><00:08:12.930><c> level</c>

00:08:13.159 --> 00:08:13.169 align:start position:0%
so in inspections in a language level
 

00:08:13.169 --> 00:08:14.629 align:start position:0%
so in inspections in a language level
migration<00:08:13.620><c> AIDS</c><00:08:13.830><c> you</c><00:08:13.979><c> might</c><00:08:14.190><c> want</c><00:08:14.370><c> to</c><00:08:14.430><c> turn</c>

00:08:14.629 --> 00:08:14.639 align:start position:0%
migration AIDS you might want to turn
 

00:08:14.639 --> 00:08:17.390 align:start position:0%
migration AIDS you might want to turn
some<00:08:14.880><c> of</c><00:08:15.000><c> those</c><00:08:15.090><c> on</c><00:08:15.889><c> now</c><00:08:16.889><c> I've</c><00:08:17.010><c> already</c><00:08:17.250><c> run</c>

00:08:17.390 --> 00:08:17.400 align:start position:0%
some of those on now I've already run
 

00:08:17.400 --> 00:08:19.790 align:start position:0%
some of those on now I've already run
those<00:08:17.610><c> let's</c><00:08:18.450><c> have</c><00:08:18.600><c> a</c><00:08:18.630><c> quick</c><00:08:18.870><c> look</c><00:08:19.080><c> at</c><00:08:19.260><c> the</c>

00:08:19.790 --> 00:08:19.800 align:start position:0%
those let's have a quick look at the
 

00:08:19.800 --> 00:08:22.580 align:start position:0%
those let's have a quick look at the
first<00:08:20.220><c> set</c><00:08:20.610><c> this</c><00:08:21.419><c> is</c><00:08:21.630><c> anonymous</c><00:08:22.110><c> type</c><00:08:22.320><c> can</c><00:08:22.500><c> be</c>

00:08:22.580 --> 00:08:22.590 align:start position:0%
first set this is anonymous type can be
 

00:08:22.590 --> 00:08:24.620 align:start position:0%
first set this is anonymous type can be
replaced<00:08:22.919><c> with</c><00:08:23.039><c> lambda</c><00:08:23.490><c> and</c><00:08:23.639><c> if</c><00:08:24.270><c> we</c><00:08:24.389><c> look</c><00:08:24.539><c> at</c>

00:08:24.620 --> 00:08:24.630 align:start position:0%
replaced with lambda and if we look at
 

00:08:24.630 --> 00:08:27.529 align:start position:0%
replaced with lambda and if we look at
this<00:08:24.720><c> example</c><00:08:25.910><c> we</c><00:08:26.910><c> can</c><00:08:27.060><c> see</c><00:08:27.180><c> this</c><00:08:27.300><c> is</c><00:08:27.479><c> a</c>

00:08:27.529 --> 00:08:27.539 align:start position:0%
this example we can see this is a
 

00:08:27.539 --> 00:08:30.800 align:start position:0%
this example we can see this is a
predicate<00:08:27.960><c> a</c><00:08:28.200><c> guava</c><00:08:28.860><c> predicate</c><00:08:29.310><c> and</c><00:08:29.510><c> we</c><00:08:30.510><c> have</c>

00:08:30.800 --> 00:08:30.810 align:start position:0%
predicate a guava predicate and we have
 

00:08:30.810 --> 00:08:34.339 align:start position:0%
predicate a guava predicate and we have
our<00:08:31.020><c> anonymous</c><00:08:31.410><c> it</c><00:08:31.500><c> in</c><00:08:31.560><c> a</c><00:08:31.620><c> type</c><00:08:32.150><c> with</c><00:08:33.150><c> our</c><00:08:33.510><c> own</c>

00:08:34.339 --> 00:08:34.349 align:start position:0%
our anonymous it in a type with our own
 

00:08:34.349 --> 00:08:36.230 align:start position:0%
our anonymous it in a type with our own
method<00:08:34.589><c> and</c><00:08:34.979><c> IntelliJ</c><00:08:35.789><c> can</c><00:08:36.000><c> just</c>

00:08:36.230 --> 00:08:36.240 align:start position:0%
method and IntelliJ can just
 

00:08:36.240 --> 00:08:38.390 align:start position:0%
method and IntelliJ can just
automatically<00:08:36.810><c> turn</c><00:08:37.620><c> that</c><00:08:37.800><c> straight</c><00:08:38.130><c> into</c><00:08:38.370><c> a</c>

00:08:38.390 --> 00:08:38.400 align:start position:0%
automatically turn that straight into a
 

00:08:38.400 --> 00:08:41.390 align:start position:0%
automatically turn that straight into a
lambda<00:08:38.610><c> expression</c><00:08:38.789><c> so</c><00:08:39.740><c> that's</c><00:08:40.740><c> a</c><00:08:41.039><c> fairly</c>

00:08:41.390 --> 00:08:41.400 align:start position:0%
lambda expression so that's a fairly
 

00:08:41.400 --> 00:08:43.130 align:start position:0%
lambda expression so that's a fairly
straightforward<00:08:41.550><c> piece</c><00:08:42.120><c> of</c><00:08:42.240><c> magic</c><00:08:42.390><c> whereby</c>

00:08:43.130 --> 00:08:43.140 align:start position:0%
straightforward piece of magic whereby
 

00:08:43.140 --> 00:08:45.019 align:start position:0%
straightforward piece of magic whereby
we<00:08:43.979><c> are</c><00:08:44.010><c> going</c><00:08:44.279><c> to</c><00:08:44.400><c> remove</c><00:08:44.640><c> all</c><00:08:44.940><c> the</c>

00:08:45.019 --> 00:08:45.029 align:start position:0%
we are going to remove all the
 

00:08:45.029 --> 00:08:47.660 align:start position:0%
we are going to remove all the
boilerplate<00:08:45.270><c> of</c><00:08:45.750><c> our</c><00:08:45.990><c> class</c><00:08:46.650><c> declaration</c><00:08:47.279><c> our</c>

00:08:47.660 --> 00:08:47.670 align:start position:0%
boilerplate of our class declaration our
 

00:08:47.670 --> 00:08:50.240 align:start position:0%
boilerplate of our class declaration our
method<00:08:48.209><c> our</c><00:08:48.510><c> type</c><00:08:48.839><c> information</c><00:08:49.200><c> and</c><00:08:49.740><c> just</c>

00:08:50.240 --> 00:08:50.250 align:start position:0%
method our type information and just
 

00:08:50.250 --> 00:08:52.040 align:start position:0%
method our type information and just
keep<00:08:50.520><c> just</c><00:08:50.850><c> a</c><00:08:51.000><c> business</c><00:08:51.360><c> logic</c><00:08:51.720><c> just</c><00:08:51.750><c> the</c>

00:08:52.040 --> 00:08:52.050 align:start position:0%
keep just a business logic just the
 

00:08:52.050 --> 00:08:53.750 align:start position:0%
keep just a business logic just the
stuff<00:08:52.230><c> that</c><00:08:52.260><c> we</c><00:08:52.470><c> care</c><00:08:52.709><c> about</c><00:08:52.860><c> and</c>

00:08:53.750 --> 00:08:53.760 align:start position:0%
stuff that we care about and
 

00:08:53.760 --> 00:08:56.210 align:start position:0%
stuff that we care about and
that<00:08:54.000><c> into</c><00:08:54.240><c> a</c><00:08:54.270><c> lambda</c><00:08:54.510><c> expression</c><00:08:55.190><c> let</c><00:08:56.190><c> me</c>

00:08:56.210 --> 00:08:56.220 align:start position:0%
that into a lambda expression let me
 

00:08:56.220 --> 00:08:58.000 align:start position:0%
that into a lambda expression let me
show<00:08:56.400><c> you</c><00:08:56.460><c> another</c><00:08:56.610><c> couple</c><00:08:57.000><c> of</c><00:08:57.060><c> examples</c><00:08:57.180><c> I</c>

00:08:58.000 --> 00:08:58.010 align:start position:0%
show you another couple of examples I
 

00:08:58.010 --> 00:09:02.060 align:start position:0%
show you another couple of examples I
think<00:08:59.010><c> with</c><00:08:59.850><c> the</c><00:09:00.090><c> maturity</c><00:09:00.990><c> that</c><00:09:01.320><c> Java</c><00:09:01.890><c> eight</c>

00:09:02.060 --> 00:09:02.070 align:start position:0%
think with the maturity that Java eight
 

00:09:02.070 --> 00:09:03.740 align:start position:0%
think with the maturity that Java eight
is<00:09:02.250><c> that</c><00:09:02.400><c> probably</c><00:09:02.700><c> most</c><00:09:03.180><c> people</c><00:09:03.330><c> in</c><00:09:03.600><c> this</c>

00:09:03.740 --> 00:09:03.750 align:start position:0%
is that probably most people in this
 

00:09:03.750 --> 00:09:05.660 align:start position:0%
is that probably most people in this
webinar<00:09:03.990><c> have</c><00:09:04.500><c> already</c><00:09:05.040><c> come</c><00:09:05.250><c> across</c><00:09:05.340><c> these</c>

00:09:05.660 --> 00:09:05.670 align:start position:0%
webinar have already come across these
 

00:09:05.670 --> 00:09:06.920 align:start position:0%
webinar have already come across these
things<00:09:05.910><c> so</c><00:09:06.090><c> I'm</c><00:09:06.180><c> going</c><00:09:06.390><c> to</c><00:09:06.420><c> skim</c><00:09:06.690><c> quite</c>

00:09:06.920 --> 00:09:06.930 align:start position:0%
things so I'm going to skim quite
 

00:09:06.930 --> 00:09:08.420 align:start position:0%
things so I'm going to skim quite
quickly<00:09:07.140><c> over</c><00:09:07.440><c> some</c><00:09:07.620><c> the</c><00:09:07.710><c> introductory</c><00:09:08.130><c> level</c>

00:09:08.420 --> 00:09:08.430 align:start position:0%
quickly over some the introductory level
 

00:09:08.430 --> 00:09:11.660 align:start position:0%
quickly over some the introductory level
stuff<00:09:08.760><c> so</c><00:09:09.720><c> here's</c><00:09:09.930><c> another</c><00:09:10.080><c> example</c><00:09:10.610><c> this</c><00:09:11.610><c> is</c>

00:09:11.660 --> 00:09:11.670 align:start position:0%
stuff so here's another example this is
 

00:09:11.670 --> 00:09:13.160 align:start position:0%
stuff so here's another example this is
an<00:09:11.880><c> example</c><00:09:12.150><c> where</c><00:09:12.360><c> we</c><00:09:12.450><c> have</c><00:09:12.570><c> a</c><00:09:12.600><c> runnable</c><00:09:12.990><c> and</c>

00:09:13.160 --> 00:09:13.170 align:start position:0%
an example where we have a runnable and
 

00:09:13.170 --> 00:09:15.770 align:start position:0%
an example where we have a runnable and
again<00:09:14.100><c> the</c><00:09:14.550><c> runner</c><00:09:14.730><c> ball</c><00:09:14.910><c> can</c><00:09:15.210><c> be</c><00:09:15.240><c> converted</c>

00:09:15.770 --> 00:09:15.780 align:start position:0%
again the runner ball can be converted
 

00:09:15.780 --> 00:09:20.510 align:start position:0%
again the runner ball can be converted
into<00:09:16.170><c> a</c><00:09:16.410><c> lambda</c><00:09:16.620><c> expression</c><00:09:17.300><c> and</c><00:09:19.370><c> here</c><00:09:20.370><c> we</c>

00:09:20.510 --> 00:09:20.520 align:start position:0%
into a lambda expression and here we
 

00:09:20.520 --> 00:09:23.600 align:start position:0%
into a lambda expression and here we
just<00:09:20.640><c> get</c><00:09:20.910><c> the</c><00:09:21.590><c> we</c><00:09:22.590><c> just</c><00:09:22.710><c> keep</c><00:09:22.920><c> the</c><00:09:23.130><c> core</c><00:09:23.340><c> of</c>

00:09:23.600 --> 00:09:23.610 align:start position:0%
just get the we just keep the core of
 

00:09:23.610 --> 00:09:26.990 align:start position:0%
just get the we just keep the core of
what<00:09:23.970><c> the</c><00:09:24.060><c> run</c><00:09:24.210><c> method</c><00:09:24.390><c> is</c><00:09:25.730><c> what's</c><00:09:26.730><c> a</c><00:09:26.820><c> little</c>

00:09:26.990 --> 00:09:27.000 align:start position:0%
what the run method is what's a little
 

00:09:27.000 --> 00:09:28.730 align:start position:0%
what the run method is what's a little
bit<00:09:27.090><c> more</c><00:09:27.270><c> of</c><00:09:27.360><c> an</c><00:09:27.450><c> interesting</c><00:09:28.170><c> example</c><00:09:28.260><c> is</c>

00:09:28.730 --> 00:09:28.740 align:start position:0%
bit more of an interesting example is
 

00:09:28.740 --> 00:09:31.370 align:start position:0%
bit more of an interesting example is
this<00:09:28.980><c> callable</c><00:09:29.490><c> here</c><00:09:29.760><c> has</c><00:09:30.030><c> two</c><00:09:30.450><c> lines</c><00:09:30.660><c> so</c><00:09:31.020><c> when</c>

00:09:31.370 --> 00:09:31.380 align:start position:0%
this callable here has two lines so when
 

00:09:31.380 --> 00:09:32.570 align:start position:0%
this callable here has two lines so when
we<00:09:31.500><c> shrink</c><00:09:31.890><c> this</c><00:09:32.010><c> down</c><00:09:32.070><c> to</c><00:09:32.340><c> a</c><00:09:32.370><c> lambda</c>

00:09:32.570 --> 00:09:32.580 align:start position:0%
we shrink this down to a lambda
 

00:09:32.580 --> 00:09:36.500 align:start position:0%
we shrink this down to a lambda
expression<00:09:34.520><c> you</c><00:09:35.520><c> can</c><00:09:35.730><c> see</c><00:09:35.760><c> the</c><00:09:35.970><c> two</c><00:09:36.150><c> lines</c><00:09:36.330><c> in</c>

00:09:36.500 --> 00:09:36.510 align:start position:0%
expression you can see the two lines in
 

00:09:36.510 --> 00:09:38.360 align:start position:0%
expression you can see the two lines in
the<00:09:36.630><c> lambda</c><00:09:36.810><c> in</c><00:09:37.200><c> the</c><00:09:37.500><c> lambda</c><00:09:37.770><c> expression</c><00:09:38.190><c> and</c>

00:09:38.360 --> 00:09:38.370 align:start position:0%
the lambda in the lambda expression and
 

00:09:38.370 --> 00:09:40.340 align:start position:0%
the lambda in the lambda expression and
what<00:09:38.610><c> I</c><00:09:38.640><c> prefer</c><00:09:38.970><c> to</c><00:09:39.120><c> do</c><00:09:39.240><c> personally</c><00:09:39.840><c> is</c><00:09:40.020><c> I</c><00:09:40.140><c> like</c>

00:09:40.340 --> 00:09:40.350 align:start position:0%
what I prefer to do personally is I like
 

00:09:40.350 --> 00:09:42.050 align:start position:0%
what I prefer to do personally is I like
to<00:09:40.380><c> extract</c><00:09:40.680><c> these</c><00:09:40.950><c> into</c><00:09:41.250><c> a</c><00:09:41.310><c> method</c><00:09:41.520><c> and</c><00:09:41.850><c> give</c>

00:09:42.050 --> 00:09:42.060 align:start position:0%
to extract these into a method and give
 

00:09:42.060 --> 00:09:45.760 align:start position:0%
to extract these into a method and give
it<00:09:42.150><c> a</c><00:09:42.210><c> description</c><00:09:42.300><c> so</c><00:09:43.290><c> this</c><00:09:43.530><c> is</c><00:09:43.770><c> until</c><00:09:44.550><c> ten</c>

00:09:45.760 --> 00:09:45.770 align:start position:0%
it a description so this is until ten
 

00:09:45.770 --> 00:09:50.900 align:start position:0%
it a description so this is until ten
items<00:09:46.770><c> found</c><00:09:47.990><c> and</c><00:09:49.190><c> as</c><00:09:50.190><c> this</c><00:09:50.490><c> gives</c><00:09:50.730><c> me</c><00:09:50.880><c> a</c>

00:09:50.900 --> 00:09:50.910 align:start position:0%
items found and as this gives me a
 

00:09:50.910 --> 00:09:53.090 align:start position:0%
items found and as this gives me a
couple<00:09:51.090><c> of</c><00:09:51.300><c> benefits</c><00:09:51.450><c> one</c><00:09:52.020><c> I</c><00:09:52.260><c> can</c><00:09:52.620><c> shrink</c><00:09:52.860><c> my</c>

00:09:53.090 --> 00:09:53.100 align:start position:0%
couple of benefits one I can shrink my
 

00:09:53.100 --> 00:09:56.480 align:start position:0%
couple of benefits one I can shrink my
lambda<00:09:53.280><c> expression</c><00:09:53.790><c> right</c><00:09:53.970><c> down</c><00:09:54.210><c> and</c><00:09:54.950><c> I</c><00:09:55.950><c> can</c>

00:09:56.480 --> 00:09:56.490 align:start position:0%
lambda expression right down and I can
 

00:09:56.490 --> 00:09:58.460 align:start position:0%
lambda expression right down and I can
also<00:09:56.640><c> even</c><00:09:57.120><c> maybe</c><00:09:57.750><c> turn</c><00:09:58.020><c> that</c><00:09:58.140><c> into</c><00:09:58.290><c> the</c>

00:09:58.460 --> 00:09:58.470 align:start position:0%
also even maybe turn that into the
 

00:09:58.470 --> 00:10:00.650 align:start position:0%
also even maybe turn that into the
method<00:09:58.650><c> reference</c><00:09:59.160><c> if</c><00:09:59.340><c> the</c><00:09:59.850><c> if</c><00:10:00.180><c> the</c><00:10:00.390><c> call</c><00:10:00.630><c> is</c>

00:10:00.650 --> 00:10:00.660 align:start position:0%
method reference if the if the call is
 

00:10:00.660 --> 00:10:03.710 align:start position:0%
method reference if the if the call is
is<00:10:00.990><c> the</c><00:10:01.230><c> correct</c><00:10:01.530><c> shape</c><00:10:01.770><c> but</c><00:10:02.490><c> mainly</c><00:10:02.910><c> this</c><00:10:03.570><c> is</c>

00:10:03.710 --> 00:10:03.720 align:start position:0%
is the correct shape but mainly this is
 

00:10:03.720 --> 00:10:05.480 align:start position:0%
is the correct shape but mainly this is
much<00:10:03.870><c> more</c><00:10:04.110><c> descriptive</c><00:10:04.470><c> so</c><00:10:04.890><c> now</c><00:10:05.070><c> I</c><00:10:05.100><c> can</c><00:10:05.370><c> say</c>

00:10:05.480 --> 00:10:05.490 align:start position:0%
much more descriptive so now I can say
 

00:10:05.490 --> 00:10:07.700 align:start position:0%
much more descriptive so now I can say
until<00:10:05.820><c> ten</c><00:10:06.450><c> items</c><00:10:06.660><c> found</c><00:10:07.050><c> so</c><00:10:07.350><c> it's</c><00:10:07.500><c> much</c>

00:10:07.700 --> 00:10:07.710 align:start position:0%
until ten items found so it's much
 

00:10:07.710 --> 00:10:09.440 align:start position:0%
until ten items found so it's much
clearer<00:10:08.010><c> to</c><00:10:08.100><c> me</c><00:10:08.220><c> what</c><00:10:08.790><c> these</c><00:10:08.940><c> two</c><00:10:09.150><c> lines</c><00:10:09.330><c> of</c>

00:10:09.440 --> 00:10:09.450 align:start position:0%
clearer to me what these two lines of
 

00:10:09.450 --> 00:10:13.010 align:start position:0%
clearer to me what these two lines of
code<00:10:09.510><c> is</c><00:10:09.780><c> doing</c><00:10:11.030><c> on</c><00:10:12.030><c> top</c><00:10:12.210><c> of</c><00:10:12.300><c> that</c><00:10:12.450><c> if</c><00:10:12.690><c> I</c><00:10:12.840><c> have</c>

00:10:13.010 --> 00:10:13.020 align:start position:0%
code is doing on top of that if I have
 

00:10:13.020 --> 00:10:14.870 align:start position:0%
code is doing on top of that if I have
any<00:10:13.200><c> errors</c><00:10:13.440><c> I</c><00:10:13.680><c> want</c><00:10:13.860><c> to</c><00:10:13.950><c> debug</c><00:10:14.250><c> this</c><00:10:14.490><c> it's</c><00:10:14.760><c> a</c>

00:10:14.870 --> 00:10:14.880 align:start position:0%
any errors I want to debug this it's a
 

00:10:14.880 --> 00:10:16.850 align:start position:0%
any errors I want to debug this it's a
bit<00:10:15.000><c> easier</c><00:10:15.150><c> to</c><00:10:15.480><c> debug</c><00:10:15.660><c> lambda</c><00:10:16.350><c> expressions</c>

00:10:16.850 --> 00:10:16.860 align:start position:0%
bit easier to debug lambda expressions
 

00:10:16.860 --> 00:10:18.890 align:start position:0%
bit easier to debug lambda expressions
if<00:10:17.100><c> they're</c><00:10:17.370><c> actually</c><00:10:17.670><c> inside</c><00:10:17.820><c> a</c><00:10:18.060><c> method</c><00:10:18.330><c> so</c>

00:10:18.890 --> 00:10:18.900 align:start position:0%
if they're actually inside a method so
 

00:10:18.900 --> 00:10:20.990 align:start position:0%
if they're actually inside a method so
that's<00:10:19.440><c> that's</c><00:10:19.710><c> my</c><00:10:19.830><c> main</c><00:10:20.130><c> reason</c><00:10:20.520><c> for</c><00:10:20.550><c> making</c>

00:10:20.990 --> 00:10:21.000 align:start position:0%
that's that's my main reason for making
 

00:10:21.000 --> 00:10:24.520 align:start position:0%
that's that's my main reason for making
my<00:10:21.090><c> lambda</c><00:10:21.300><c> expressions</c><00:10:21.810><c> a</c><00:10:21.960><c> single</c><00:10:22.260><c> line</c><00:10:22.410><c> lock</c>

00:10:24.520 --> 00:10:24.530 align:start position:0%
my lambda expressions a single line lock
 

00:10:24.530 --> 00:10:29.860 align:start position:0%
my lambda expressions a single line lock
so<00:10:25.530><c> that's</c><00:10:25.680><c> all</c><00:10:25.830><c> fairly</c><00:10:26.070><c> straightforward</c>

00:10:29.860 --> 00:10:29.870 align:start position:0%
 
 

00:10:29.870 --> 00:10:33.470 align:start position:0%
 
what's<00:10:30.870><c> kind</c><00:10:31.080><c> of</c><00:10:31.110><c> more</c><00:10:31.290><c> interesting</c><00:10:31.920><c> is</c><00:10:32.480><c> we</c>

00:10:33.470 --> 00:10:33.480 align:start position:0%
what's kind of more interesting is we
 

00:10:33.480 --> 00:10:37.610 align:start position:0%
what's kind of more interesting is we
can<00:10:33.720><c> those</c><00:10:34.200><c> examples</c><00:10:34.590><c> are</c><00:10:36.200><c> anonymous</c><00:10:37.200><c> inner</c>

00:10:37.610 --> 00:10:37.620 align:start position:0%
can those examples are anonymous inner
 

00:10:37.620 --> 00:10:39.530 align:start position:0%
can those examples are anonymous inner
classes<00:10:37.920><c> that</c><00:10:38.340><c> were</c><00:10:38.490><c> implementing</c><00:10:39.450><c> an</c>

00:10:39.530 --> 00:10:39.540 align:start position:0%
classes that were implementing an
 

00:10:39.540 --> 00:10:42.020 align:start position:0%
classes that were implementing an
interface<00:10:40.190><c> we</c><00:10:41.190><c> can</c><00:10:41.220><c> do</c><00:10:41.430><c> the</c><00:10:41.490><c> same</c><00:10:41.700><c> thing</c><00:10:41.910><c> with</c>

00:10:42.020 --> 00:10:42.030 align:start position:0%
interface we can do the same thing with
 

00:10:42.030 --> 00:10:44.450 align:start position:0%
interface we can do the same thing with
abstract<00:10:42.450><c> classes</c><00:10:42.690><c> but</c><00:10:43.410><c> we</c><00:10:43.530><c> have</c><00:10:43.710><c> to</c><00:10:43.860><c> go</c><00:10:44.010><c> one</c>

00:10:44.450 --> 00:10:44.460 align:start position:0%
abstract classes but we have to go one
 

00:10:44.460 --> 00:10:48.170 align:start position:0%
abstract classes but we have to go one
step<00:10:44.760><c> further</c><00:10:45.740><c> so</c><00:10:46.760><c> runnable</c><00:10:47.760><c> let's</c><00:10:47.970><c> take</c><00:10:48.150><c> a</c>

00:10:48.170 --> 00:10:48.180 align:start position:0%
step further so runnable let's take a
 

00:10:48.180 --> 00:10:51.200 align:start position:0%
step further so runnable let's take a
look<00:10:48.300><c> at</c><00:10:48.390><c> runnable</c><00:10:48.720><c> oh</c><00:10:49.760><c> that's</c><00:10:50.760><c> not</c><00:10:51.000><c> the</c><00:10:51.030><c> right</c>

00:10:51.200 --> 00:10:51.210 align:start position:0%
look at runnable oh that's not the right
 

00:10:51.210 --> 00:10:56.000 align:start position:0%
look at runnable oh that's not the right
shortcut<00:10:54.320><c> so</c><00:10:55.320><c> run</c><00:10:55.500><c> a</c><00:10:55.530><c> ball</c>

00:10:56.000 --> 00:10:56.010 align:start position:0%
shortcut so run a ball
 

00:10:56.010 --> 00:10:57.500 align:start position:0%
shortcut so run a ball
functional<00:10:56.400><c> interfaces</c><00:10:56.760><c> in</c><00:10:57.090><c> the</c><00:10:57.150><c> interface</c>

00:10:57.500 --> 00:10:57.510 align:start position:0%
functional interfaces in the interface
 

00:10:57.510 --> 00:11:00.260 align:start position:0%
functional interfaces in the interface
with<00:10:57.720><c> a</c><00:10:57.750><c> single</c><00:10:58.170><c> abstract</c><00:10:58.590><c> method</c><00:10:58.890><c> and</c><00:10:59.190><c> if</c><00:11:00.150><c> I</c>

00:11:00.260 --> 00:11:00.270 align:start position:0%
with a single abstract method and if I
 

00:11:00.270 --> 00:11:07.460 align:start position:0%
with a single abstract method and if I
look<00:11:00.480><c> in</c><00:11:00.720><c> my</c><00:11:00.990><c> code</c><00:11:01.380><c> I</c><00:11:04.190><c> can</c><00:11:05.190><c> find</c><00:11:06.470><c> abstract</c>

00:11:07.460 --> 00:11:07.470 align:start position:0%
look in my code I can find abstract
 

00:11:07.470 --> 00:11:10.130 align:start position:0%
look in my code I can find abstract
methods<00:11:08.040><c> that</c><00:11:08.340><c> look</c><00:11:08.670><c> fairly</c><00:11:09.090><c> similar</c><00:11:09.240><c> so</c><00:11:10.110><c> I</c>

00:11:10.130 --> 00:11:10.140 align:start position:0%
methods that look fairly similar so I
 

00:11:10.140 --> 00:11:11.810 align:start position:0%
methods that look fairly similar so I
have<00:11:10.290><c> an</c><00:11:10.380><c> abstract</c><00:11:10.830><c> method</c><00:11:10.950><c> with</c><00:11:11.340><c> a</c><00:11:11.370><c> single</c>

00:11:11.810 --> 00:11:11.820 align:start position:0%
have an abstract method with a single
 

00:11:11.820 --> 00:11:14.510 align:start position:0%
have an abstract method with a single
abstract<00:11:12.240><c> a</c><00:11:12.420><c> with</c><00:11:12.750><c> an</c><00:11:12.960><c> abstract</c><00:11:13.350><c> class</c><00:11:13.680><c> with</c><00:11:14.490><c> a</c>

00:11:14.510 --> 00:11:14.520 align:start position:0%
abstract a with an abstract class with a
 

00:11:14.520 --> 00:11:16.450 align:start position:0%
abstract a with an abstract class with a
single<00:11:14.910><c> abstract</c><00:11:15.360><c> method</c><00:11:15.660><c> on</c><00:11:15.780><c> it</c><00:11:15.810><c> and</c>

00:11:16.450 --> 00:11:16.460 align:start position:0%
single abstract method on it and
 

00:11:16.460 --> 00:11:18.560 align:start position:0%
single abstract method on it and
IntelliJ<00:11:17.460><c> suggesting</c><00:11:17.940><c> that</c><00:11:18.030><c> you</c><00:11:18.120><c> can</c><00:11:18.270><c> convert</c>

00:11:18.560 --> 00:11:18.570 align:start position:0%
IntelliJ suggesting that you can convert
 

00:11:18.570 --> 00:11:20.300 align:start position:0%
IntelliJ suggesting that you can convert
this<00:11:18.750><c> to</c><00:11:18.900><c> an</c><00:11:18.990><c> interface</c><00:11:19.260><c> which</c><00:11:19.920><c> I'm</c><00:11:20.070><c> going</c><00:11:20.220><c> to</c>

00:11:20.300 --> 00:11:20.310 align:start position:0%
this to an interface which I'm going to
 

00:11:20.310 --> 00:11:22.820 align:start position:0%
this to an interface which I'm going to
do<00:11:20.520><c> and</c><00:11:20.850><c> then</c><00:11:21.630><c> once</c><00:11:21.870><c> I've</c><00:11:22.050><c> converted</c><00:11:22.410><c> that</c><00:11:22.680><c> to</c>

00:11:22.820 --> 00:11:22.830 align:start position:0%
do and then once I've converted that to
 

00:11:22.830 --> 00:11:25.150 align:start position:0%
do and then once I've converted that to
an<00:11:22.920><c> interface</c><00:11:23.130><c> I</c><00:11:23.610><c> can</c><00:11:23.910><c> tag</c><00:11:24.150><c> it</c><00:11:24.330><c> with</c>

00:11:25.150 --> 00:11:25.160 align:start position:0%
an interface I can tag it with
 

00:11:25.160 --> 00:11:28.820 align:start position:0%
an interface I can tag it with
functional<00:11:26.160><c> interface</c><00:11:26.580><c> and</c><00:11:27.230><c> then</c><00:11:28.230><c> what</c><00:11:28.560><c> I</c><00:11:28.590><c> can</c>

00:11:28.820 --> 00:11:28.830 align:start position:0%
functional interface and then what I can
 

00:11:28.830 --> 00:11:31.040 align:start position:0%
functional interface and then what I can
do<00:11:28.950><c> is</c><00:11:29.070><c> I</c><00:11:29.160><c> can</c><00:11:29.220><c> go</c><00:11:29.520><c> around</c><00:11:29.790><c> and</c><00:11:30.120><c> look</c><00:11:30.750><c> at</c><00:11:30.990><c> the</c>

00:11:31.040 --> 00:11:31.050 align:start position:0%
do is I can go around and look at the
 

00:11:31.050 --> 00:11:33.740 align:start position:0%
do is I can go around and look at the
implementers<00:11:31.800><c> of</c><00:11:31.830><c> this</c><00:11:32.160><c> and</c><00:11:32.490><c> now</c><00:11:33.150><c> I</c><00:11:33.210><c> can</c><00:11:33.570><c> turn</c>

00:11:33.740 --> 00:11:33.750 align:start position:0%
implementers of this and now I can turn
 

00:11:33.750 --> 00:11:36.620 align:start position:0%
implementers of this and now I can turn
these<00:11:33.990><c> into</c><00:11:34.290><c> lambda</c><00:11:35.190><c> expressions</c><00:11:35.700><c> now</c><00:11:36.390><c> I</c><00:11:36.420><c> can</c>

00:11:36.620 --> 00:11:36.630 align:start position:0%
these into lambda expressions now I can
 

00:11:36.630 --> 00:11:38.000 align:start position:0%
these into lambda expressions now I can
do<00:11:36.780><c> that</c><00:11:36.930><c> before</c><00:11:37.050><c> because</c><00:11:37.650><c> lambda</c>

00:11:38.000 --> 00:11:38.010 align:start position:0%
do that before because lambda
 

00:11:38.010 --> 00:11:39.380 align:start position:0%
do that before because lambda
expressions<00:11:38.490><c> don't</c><00:11:38.670><c> what</c><00:11:38.850><c> would</c><00:11:39.030><c> abstract</c>

00:11:39.380 --> 00:11:39.390 align:start position:0%
expressions don't what would abstract
 

00:11:39.390 --> 00:11:41.810 align:start position:0%
expressions don't what would abstract
classes<00:11:39.600><c> only</c><00:11:39.960><c> with</c><00:11:40.320><c> interfaces</c><00:11:40.740><c> so</c><00:11:41.670><c> that's</c>

00:11:41.810 --> 00:11:41.820 align:start position:0%
classes only with interfaces so that's
 

00:11:41.820 --> 00:11:49.030 align:start position:0%
classes only with interfaces so that's
just<00:11:41.940><c> an</c><00:11:42.090><c> additional</c><00:11:42.450><c> step</c><00:11:42.660><c> that</c><00:11:42.720><c> we</c><00:11:42.960><c> can</c><00:11:43.140><c> do</c>

00:11:49.030 --> 00:11:49.040 align:start position:0%
 
 

00:11:49.040 --> 00:11:51.620 align:start position:0%
 
so<00:11:50.040><c> those</c><00:11:50.190><c> two</c><00:11:50.430><c> things</c><00:11:50.460><c> are</c><00:11:50.820><c> just</c><00:11:51.000><c> taking</c><00:11:51.540><c> your</c>

00:11:51.620 --> 00:11:51.630 align:start position:0%
so those two things are just taking your
 

00:11:51.630 --> 00:11:54.350 align:start position:0%
so those two things are just taking your
existing<00:11:52.020><c> code</c><00:11:52.200><c> and</c><00:11:52.620><c> applying</c><00:11:53.150><c> basically</c><00:11:54.150><c> new</c>

00:11:54.350 --> 00:11:54.360 align:start position:0%
existing code and applying basically new
 

00:11:54.360 --> 00:11:56.630 align:start position:0%
existing code and applying basically new
syntax<00:11:54.840><c> to</c><00:11:55.080><c> the</c><00:11:55.230><c> existing</c><00:11:55.980><c> functionality</c>

00:11:56.630 --> 00:11:56.640 align:start position:0%
syntax to the existing functionality
 

00:11:56.640 --> 00:11:59.720 align:start position:0%
syntax to the existing functionality
that<00:11:56.730><c> you</c><00:11:56.850><c> had</c><00:11:58.130><c> so</c><00:11:59.130><c> let's</c><00:11:59.340><c> have</c><00:11:59.430><c> a</c><00:11:59.490><c> look</c><00:11:59.610><c> at</c>

00:11:59.720 --> 00:11:59.730 align:start position:0%
that you had so let's have a look at
 

00:11:59.730 --> 00:12:02.870 align:start position:0%
that you had so let's have a look at
that<00:11:59.850><c> performance</c><00:12:00.830><c> here</c><00:12:01.830><c> we've</c><00:12:01.980><c> got</c><00:12:02.130><c> one</c><00:12:02.790><c> of</c>

00:12:02.870 --> 00:12:02.880 align:start position:0%
that performance here we've got one of
 

00:12:02.880 --> 00:12:04.550 align:start position:0%
that performance here we've got one of
those<00:12:02.940><c> examples</c><00:12:03.210><c> so</c><00:12:03.570><c> anonymous</c><00:12:04.140><c> in</c><00:12:04.290><c> a</c><00:12:04.350><c> class</c>

00:12:04.550 --> 00:12:04.560 align:start position:0%
those examples so anonymous in a class
 

00:12:04.560 --> 00:12:07.760 align:start position:0%
those examples so anonymous in a class
and<00:12:05.400><c> our</c><00:12:06.030><c> lambda</c><00:12:06.900><c> expression</c><00:12:07.410><c> and</c><00:12:07.500><c> these</c><00:12:07.590><c> the</c>

00:12:07.760 --> 00:12:07.770 align:start position:0%
and our lambda expression and these the
 

00:12:07.770 --> 00:12:09.260 align:start position:0%
and our lambda expression and these the
two<00:12:07.920><c> things</c><00:12:08.220><c> we're</c><00:12:08.340><c> going</c><00:12:08.490><c> to</c><00:12:08.520><c> compare</c><00:12:08.910><c> in</c><00:12:09.120><c> our</c>

00:12:09.260 --> 00:12:09.270 align:start position:0%
two things we're going to compare in our
 

00:12:09.270 --> 00:12:12.020 align:start position:0%
two things we're going to compare in our
performance<00:12:09.720><c> test</c><00:12:10.340><c> so</c><00:12:11.340><c> in</c><00:12:11.460><c> our</c><00:12:11.580><c> performance</c>

00:12:12.020 --> 00:12:12.030 align:start position:0%
performance test so in our performance
 

00:12:12.030 --> 00:12:13.580 align:start position:0%
performance test so in our performance
tests<00:12:12.390><c> were</c><00:12:12.540><c> measuring</c><00:12:12.840><c> operations</c><00:12:13.410><c> for</c>

00:12:13.580 --> 00:12:13.590 align:start position:0%
tests were measuring operations for
 

00:12:13.590 --> 00:12:16.400 align:start position:0%
tests were measuring operations for
millisecond<00:12:14.160><c> so</c><00:12:14.580><c> more</c><00:12:15.150><c> operations</c><00:12:15.750><c> is</c><00:12:16.050><c> better</c>

00:12:16.400 --> 00:12:16.410 align:start position:0%
millisecond so more operations is better
 

00:12:16.410 --> 00:12:18.200 align:start position:0%
millisecond so more operations is better
so<00:12:16.830><c> I've</c><00:12:16.920><c> got</c><00:12:17.040><c> my</c><00:12:17.100><c> smiley</c><00:12:17.460><c> face</c><00:12:17.610><c> at</c><00:12:17.760><c> the</c><00:12:17.820><c> top</c><00:12:18.030><c> to</c>

00:12:18.200 --> 00:12:18.210 align:start position:0%
so I've got my smiley face at the top to
 

00:12:18.210 --> 00:12:20.920 align:start position:0%
so I've got my smiley face at the top to
remind<00:12:18.540><c> me</c><00:12:18.810><c> which</c><00:12:19.710><c> is</c><00:12:20.010><c> the</c><00:12:20.040><c> better</c>

00:12:20.920 --> 00:12:20.930 align:start position:0%
remind me which is the better
 

00:12:20.930 --> 00:12:23.630 align:start position:0%
remind me which is the better
performance<00:12:21.930><c> so</c><00:12:22.560><c> here</c><00:12:22.800><c> we</c><00:12:23.280><c> can</c><00:12:23.400><c> see</c><00:12:23.520><c> the</c>

00:12:23.630 --> 00:12:23.640 align:start position:0%
performance so here we can see the
 

00:12:23.640 --> 00:12:25.610 align:start position:0%
performance so here we can see the
lambda<00:12:23.970><c> expression</c><00:12:24.450><c> outperforms</c><00:12:25.350><c> in</c><00:12:25.500><c> an</c>

00:12:25.610 --> 00:12:25.620 align:start position:0%
lambda expression outperforms in an
 

00:12:25.620 --> 00:12:28.040 align:start position:0%
lambda expression outperforms in an
anonymous<00:12:26.340><c> inner</c><00:12:26.520><c> class</c><00:12:26.760><c> not</c><00:12:27.240><c> by</c><00:12:27.390><c> a</c><00:12:27.420><c> lot</c><00:12:27.660><c> it's</c>

00:12:28.040 --> 00:12:28.050 align:start position:0%
anonymous inner class not by a lot it's
 

00:12:28.050 --> 00:12:30.740 align:start position:0%
anonymous inner class not by a lot it's
kind<00:12:28.260><c> of</c><00:12:28.320><c> fairly</c><00:12:28.970><c> equivalent</c><00:12:29.970><c> but</c><00:12:30.450><c> the</c><00:12:30.540><c> lambda</c>

00:12:30.740 --> 00:12:30.750 align:start position:0%
kind of fairly equivalent but the lambda
 

00:12:30.750 --> 00:12:32.690 align:start position:0%
kind of fairly equivalent but the lambda
expression<00:12:31.110><c> is</c><00:12:31.200><c> better</c><00:12:31.410><c> performance</c><00:12:31.980><c> now</c>

00:12:32.690 --> 00:12:32.700 align:start position:0%
expression is better performance now
 

00:12:32.700 --> 00:12:35.210 align:start position:0%
expression is better performance now
obviously<00:12:33.230><c> Oracle</c><00:12:34.230><c> is</c><00:12:34.350><c> a</c><00:12:34.500><c> lot</c><00:12:34.650><c> of</c><00:12:34.770><c> performance</c>

00:12:35.210 --> 00:12:35.220 align:start position:0%
obviously Oracle is a lot of performance
 

00:12:35.220 --> 00:12:37.850 align:start position:0%
obviously Oracle is a lot of performance
testing<00:12:35.700><c> around</c><00:12:36.090><c> lambda</c><00:12:36.990><c> expressions</c><00:12:37.500><c> and</c>

00:12:37.850 --> 00:12:37.860 align:start position:0%
testing around lambda expressions and
 

00:12:37.860 --> 00:12:39.020 align:start position:0%
testing around lambda expressions and
there<00:12:38.040><c> are</c><00:12:38.130><c> lots</c><00:12:38.250><c> of</c><00:12:38.340><c> different</c><00:12:38.580><c> types</c><00:12:38.760><c> of</c>

00:12:39.020 --> 00:12:39.030 align:start position:0%
there are lots of different types of
 

00:12:39.030 --> 00:12:41.120 align:start position:0%
there are lots of different types of
anonymous<00:12:39.600><c> inner</c><00:12:39.810><c> classes</c><00:12:40.080><c> and</c><00:12:40.590><c> lambda</c>

00:12:41.120 --> 00:12:41.130 align:start position:0%
anonymous inner classes and lambda
 

00:12:41.130 --> 00:12:43.100 align:start position:0%
anonymous inner classes and lambda
expressions<00:12:41.580><c> so</c><00:12:41.790><c> the</c><00:12:42.300><c> performance</c><00:12:42.660><c> of</c><00:12:42.960><c> them</c>

00:12:43.100 --> 00:12:43.110 align:start position:0%
expressions so the performance of them
 

00:12:43.110 --> 00:12:45.500 align:start position:0%
expressions so the performance of them
varies<00:12:43.560><c> according</c><00:12:44.130><c> to</c><00:12:44.160><c> what</c><00:12:44.400><c> you're</c><00:12:44.520><c> doing</c><00:12:44.550><c> so</c>

00:12:45.500 --> 00:12:45.510 align:start position:0%
varies according to what you're doing so
 

00:12:45.510 --> 00:12:46.820 align:start position:0%
varies according to what you're doing so
if<00:12:45.630><c> you</c><00:12:45.720><c> are</c><00:12:45.900><c> interested</c><00:12:46.410><c> in</c><00:12:46.470><c> the</c><00:12:46.530><c> ins</c><00:12:46.680><c> and</c>

00:12:46.820 --> 00:12:46.830 align:start position:0%
if you are interested in the ins and
 

00:12:46.830 --> 00:12:48.980 align:start position:0%
if you are interested in the ins and
outs<00:12:47.010><c> of</c><00:12:47.160><c> this</c><00:12:47.340><c> you</c><00:12:47.940><c> can</c><00:12:48.210><c> follow</c><00:12:48.750><c> this</c><00:12:48.930><c> link</c>

00:12:48.980 --> 00:12:48.990 align:start position:0%
outs of this you can follow this link
 

00:12:48.990 --> 00:12:50.990 align:start position:0%
outs of this you can follow this link
here<00:12:49.440><c> and</c><00:12:49.680><c> that</c><00:12:50.190><c> will</c><00:12:50.310><c> take</c><00:12:50.460><c> you</c><00:12:50.670><c> to</c><00:12:50.790><c> a</c><00:12:50.820><c> much</c>

00:12:50.990 --> 00:12:51.000 align:start position:0%
here and that will take you to a much
 

00:12:51.000 --> 00:12:53.240 align:start position:0%
here and that will take you to a much
more<00:12:51.210><c> in-depth</c><00:12:51.720><c> document</c><00:12:52.290><c> about</c><00:12:52.590><c> performance</c>

00:12:53.240 --> 00:12:53.250 align:start position:0%
more in-depth document about performance
 

00:12:53.250 --> 00:12:54.800 align:start position:0%
more in-depth document about performance
testing<00:12:53.580><c> new</c><00:12:53.730><c> things</c><00:12:53.760><c> in</c><00:12:54.450><c> this</c><00:12:54.690><c> particular</c>

00:12:54.800 --> 00:12:54.810 align:start position:0%
testing new things in this particular
 

00:12:54.810 --> 00:12:56.900 align:start position:0%
testing new things in this particular
example<00:12:55.200><c> you</c><00:12:55.650><c> can</c><00:12:55.830><c> see</c><00:12:55.950><c> sometimes</c><00:12:56.250><c> the</c><00:12:56.640><c> lambda</c>

00:12:56.900 --> 00:12:56.910 align:start position:0%
example you can see sometimes the lambda
 

00:12:56.910 --> 00:12:58.490 align:start position:0%
example you can see sometimes the lambda
expression<00:12:57.330><c> which</c><00:12:57.510><c> is</c><00:12:57.690><c> the</c><00:12:57.720><c> one</c><00:12:58.290><c> in</c><00:12:58.320><c> this</c>

00:12:58.490 --> 00:12:58.500 align:start position:0%
expression which is the one in this
 

00:12:58.500 --> 00:13:01.400 align:start position:0%
expression which is the one in this
little<00:12:58.710><c> reddish</c><00:12:58.920><c> color</c><00:12:59.130><c> is</c><00:12:59.910><c> better</c><00:13:00.360><c> than</c><00:13:01.110><c> the</c>

00:13:01.400 --> 00:13:01.410 align:start position:0%
little reddish color is better than the
 

00:13:01.410 --> 00:13:03.410 align:start position:0%
little reddish color is better than the
anonymous<00:13:01.890><c> in</c><00:13:02.010><c> attacks</c><00:13:02.310><c> and</c><00:13:02.550><c> sometimes</c><00:13:03.090><c> it's</c>

00:13:03.410 --> 00:13:03.420 align:start position:0%
anonymous in attacks and sometimes it's
 

00:13:03.420 --> 00:13:06.260 align:start position:0%
anonymous in attacks and sometimes it's
not<00:13:03.570><c> better</c><00:13:03.960><c> so</c><00:13:04.350><c> the</c><00:13:05.070><c> answer</c><00:13:05.730><c> is</c><00:13:05.760><c> generally</c>

00:13:06.260 --> 00:13:06.270 align:start position:0%
not better so the answer is generally
 

00:13:06.270 --> 00:13:07.970 align:start position:0%
not better so the answer is generally
the<00:13:06.300><c> performance</c><00:13:06.840><c> is</c><00:13:06.960><c> fairly</c><00:13:07.260><c> similar</c><00:13:07.650><c> but</c>

00:13:07.970 --> 00:13:07.980 align:start position:0%
the performance is fairly similar but
 

00:13:07.980 --> 00:13:12.610 align:start position:0%
the performance is fairly similar but
it's<00:13:08.220><c> not</c><00:13:08.490><c> exactly</c><00:13:09.000><c> the</c><00:13:09.090><c> same</c>

00:13:12.610 --> 00:13:12.620 align:start position:0%
 
 

00:13:12.620 --> 00:13:15.290 align:start position:0%
 
in<00:13:13.620><c> terms</c><00:13:13.980><c> of</c><00:13:14.070><c> the</c><00:13:14.160><c> performance</c><00:13:14.580><c> analysis</c><00:13:15.000><c> our</c>

00:13:15.290 --> 00:13:15.300 align:start position:0%
in terms of the performance analysis our
 

00:13:15.300 --> 00:13:17.720 align:start position:0%
in terms of the performance analysis our
lambda<00:13:15.630><c> expressions</c><00:13:16.260><c> faster</c><00:13:16.890><c> than</c><00:13:17.040><c> or</c><00:13:17.340><c> slower</c>

00:13:17.720 --> 00:13:17.730 align:start position:0%
lambda expressions faster than or slower
 

00:13:17.730 --> 00:13:19.850 align:start position:0%
lambda expressions faster than or slower
than<00:13:18.000><c> anonymous</c><00:13:18.300><c> inner</c><00:13:18.690><c> types</c><00:13:18.990><c> well</c><00:13:19.350><c> they're</c>

00:13:19.850 --> 00:13:19.860 align:start position:0%
than anonymous inner types well they're
 

00:13:19.860 --> 00:13:21.800 align:start position:0%
than anonymous inner types well they're
more<00:13:20.070><c> or</c><00:13:20.190><c> less</c><00:13:20.310><c> the</c><00:13:20.400><c> same</c><00:13:20.610><c> which</c><00:13:21.360><c> means</c><00:13:21.390><c> that</c>

00:13:21.800 --> 00:13:21.810 align:start position:0%
more or less the same which means that
 

00:13:21.810 --> 00:13:23.750 align:start position:0%
more or less the same which means that
you<00:13:21.960><c> can</c><00:13:22.200><c> go</c><00:13:22.350><c> ahead</c><00:13:22.470><c> and</c><00:13:22.890><c> refactor</c><00:13:23.610><c> this</c>

00:13:23.750 --> 00:13:23.760 align:start position:0%
you can go ahead and refactor this
 

00:13:23.760 --> 00:13:25.610 align:start position:0%
you can go ahead and refactor this
automatically<00:13:24.510><c> without</c><00:13:24.930><c> worrying</c><00:13:25.380><c> too</c><00:13:25.500><c> much</c>

00:13:25.610 --> 00:13:25.620 align:start position:0%
automatically without worrying too much
 

00:13:25.620 --> 00:13:28.340 align:start position:0%
automatically without worrying too much
about<00:13:25.800><c> it</c><00:13:26.280><c> and</c><00:13:26.430><c> but</c><00:13:27.420><c> if</c><00:13:27.600><c> it</c><00:13:27.720><c> really</c><00:13:27.900><c> matters</c>

00:13:28.340 --> 00:13:28.350 align:start position:0%
about it and but if it really matters
 

00:13:28.350 --> 00:13:30.010 align:start position:0%
about it and but if it really matters
then<00:13:28.620><c> obviously</c><00:13:28.860><c> you</c><00:13:29.130><c> want</c><00:13:29.340><c> to</c><00:13:29.400><c> measure</c><00:13:29.700><c> each</c>

00:13:30.010 --> 00:13:30.020 align:start position:0%
then obviously you want to measure each
 

00:13:30.020 --> 00:13:32.000 align:start position:0%
then obviously you want to measure each
individual<00:13:31.020><c> instance</c><00:13:31.440><c> to</c><00:13:31.560><c> make</c><00:13:31.710><c> sure</c><00:13:31.860><c> that</c>

00:13:32.000 --> 00:13:32.010 align:start position:0%
individual instance to make sure that
 

00:13:32.010 --> 00:13:33.710 align:start position:0%
individual instance to make sure that
it's<00:13:32.160><c> not</c><00:13:32.340><c> adding</c><00:13:33.210><c> some</c><00:13:33.360><c> performance</c>

00:13:33.710 --> 00:13:33.720 align:start position:0%
it's not adding some performance
 

00:13:33.720 --> 00:13:37.040 align:start position:0%
it's not adding some performance
overhead<00:13:35.510><c> now</c><00:13:36.510><c> that</c><00:13:36.630><c> was</c><00:13:36.720><c> a</c><00:13:36.750><c> straight</c>

00:13:37.040 --> 00:13:37.050 align:start position:0%
overhead now that was a straight
 

00:13:37.050 --> 00:13:39.350 align:start position:0%
overhead now that was a straight
replacement<00:13:37.620><c> of</c><00:13:37.770><c> anonymous</c><00:13:38.340><c> in</c><00:13:38.460><c> the</c><00:13:38.550><c> types</c><00:13:38.790><c> to</c>

00:13:39.350 --> 00:13:39.360 align:start position:0%
replacement of anonymous in the types to
 

00:13:39.360 --> 00:13:41.420 align:start position:0%
replacement of anonymous in the types to
lambda<00:13:40.020><c> expressions</c><00:13:40.530><c> what's</c><00:13:41.190><c> more</c>

00:13:41.420 --> 00:13:41.430 align:start position:0%
lambda expressions what's more
 

00:13:41.430 --> 00:13:42.980 align:start position:0%
lambda expressions what's more
interesting<00:13:41.580><c> is</c><00:13:42.090><c> some</c><00:13:42.330><c> of</c><00:13:42.420><c> the</c><00:13:42.480><c> patterns</c><00:13:42.690><c> we</c>

00:13:42.980 --> 00:13:42.990 align:start position:0%
interesting is some of the patterns we
 

00:13:42.990 --> 00:13:45.050 align:start position:0%
interesting is some of the patterns we
can<00:13:43.020><c> follow</c><00:13:43.410><c> now</c><00:13:43.830><c> that</c><00:13:44.040><c> we</c><00:13:44.130><c> have</c><00:13:44.430><c> the</c><00:13:44.670><c> ability</c>

00:13:45.050 --> 00:13:45.060 align:start position:0%
can follow now that we have the ability
 

00:13:45.060 --> 00:13:47.300 align:start position:0%
can follow now that we have the ability
to<00:13:45.090><c> pass</c><00:13:45.450><c> around</c><00:13:45.630><c> behavior</c><00:13:46.350><c> and</c><00:13:46.590><c> not</c><00:13:47.100><c> just</c>

00:13:47.300 --> 00:13:47.310 align:start position:0%
to pass around behavior and not just
 

00:13:47.310 --> 00:13:49.220 align:start position:0%
to pass around behavior and not just
object<00:13:47.820><c> so</c><00:13:48.450><c> we're</c><00:13:48.600><c> going</c><00:13:48.690><c> to</c><00:13:48.780><c> find</c><00:13:49.050><c> some</c>

00:13:49.220 --> 00:13:49.230 align:start position:0%
object so we're going to find some
 

00:13:49.230 --> 00:13:50.750 align:start position:0%
object so we're going to find some
places<00:13:49.590><c> in</c><00:13:49.710><c> our</c><00:13:49.830><c> code</c><00:13:50.040><c> where</c><00:13:50.280><c> we</c><00:13:50.370><c> can</c><00:13:50.520><c> start</c>

00:13:50.750 --> 00:13:50.760 align:start position:0%
places in our code where we can start
 

00:13:50.760 --> 00:13:54.020 align:start position:0%
places in our code where we can start
passing<00:13:51.000><c> lambda</c><00:13:51.570><c> expressions</c><00:13:52.910><c> what</c><00:13:53.910><c> I've</c>

00:13:54.020 --> 00:13:54.030 align:start position:0%
passing lambda expressions what I've
 

00:13:54.030 --> 00:13:56.420 align:start position:0%
passing lambda expressions what I've
done<00:13:54.240><c> is</c><00:13:54.510><c> I've</c><00:13:54.690><c> created</c><00:13:54.720><c> a</c><00:13:55.500><c> structural</c><00:13:56.130><c> search</c>

00:13:56.420 --> 00:13:56.430 align:start position:0%
done is I've created a structural search
 

00:13:56.430 --> 00:13:58.550 align:start position:0%
done is I've created a structural search
and<00:13:56.820><c> let's</c><00:13:57.630><c> take</c><00:13:57.750><c> a</c><00:13:57.810><c> look</c><00:13:58.020><c> at</c><00:13:58.110><c> the</c><00:13:58.170><c> structural</c>

00:13:58.550 --> 00:13:58.560 align:start position:0%
and let's take a look at the structural
 

00:13:58.560 --> 00:14:12.140 align:start position:0%
and let's take a look at the structural
search<00:14:07.610><c> so</c><00:14:08.610><c> I've</c><00:14:08.970><c> created</c><00:14:09.870><c> a</c><00:14:10.260><c> search</c><00:14:11.000><c> which</c><00:14:12.000><c> is</c>

00:14:12.140 --> 00:14:12.150 align:start position:0%
search so I've created a search which is
 

00:14:12.150 --> 00:14:15.590 align:start position:0%
search so I've created a search which is
going<00:14:12.330><c> to</c><00:14:12.450><c> look</c><00:14:12.630><c> for</c><00:14:12.990><c> a</c><00:14:13.580><c> call</c><00:14:14.580><c> on</c><00:14:14.730><c> log</c><00:14:15.000><c> of</c><00:14:15.360><c> any</c>

00:14:15.590 --> 00:14:15.600 align:start position:0%
going to look for a call on log of any
 

00:14:15.600 --> 00:14:18.380 align:start position:0%
going to look for a call on log of any
level<00:14:15.840><c> with</c><00:14:16.680><c> any</c><00:14:17.040><c> message</c><00:14:17.520><c> and</c><00:14:17.820><c> what</c><00:14:18.150><c> I</c><00:14:18.180><c> want</c>

00:14:18.380 --> 00:14:18.390 align:start position:0%
level with any message and what I want
 

00:14:18.390 --> 00:14:19.760 align:start position:0%
level with any message and what I want
to<00:14:18.450><c> do</c><00:14:18.540><c> is</c><00:14:18.630><c> I</c><00:14:18.720><c> want</c><00:14:18.870><c> to</c><00:14:18.960><c> replace</c><00:14:19.260><c> this</c><00:14:19.320><c> with</c>

00:14:19.760 --> 00:14:19.770 align:start position:0%
to do is I want to replace this with
 

00:14:19.770 --> 00:14:21.380 align:start position:0%
to do is I want to replace this with
something<00:14:20.130><c> which</c><00:14:20.370><c> takes</c><00:14:20.550><c> a</c><00:14:20.850><c> lambda</c>

00:14:21.380 --> 00:14:21.390 align:start position:0%
something which takes a lambda
 

00:14:21.390 --> 00:14:23.240 align:start position:0%
something which takes a lambda
expression<00:14:21.600><c> and</c><00:14:22.140><c> I'll</c><00:14:22.650><c> show</c><00:14:22.800><c> you</c><00:14:22.830><c> why</c><00:14:23.100><c> in</c><00:14:23.130><c> a</c>

00:14:23.240 --> 00:14:23.250 align:start position:0%
expression and I'll show you why in a
 

00:14:23.250 --> 00:14:25.310 align:start position:0%
expression and I'll show you why in a
minute<00:14:23.340><c> if</c><00:14:24.330><c> we</c><00:14:24.480><c> look</c><00:14:24.630><c> at</c><00:14:24.750><c> one</c><00:14:24.840><c> example</c><00:14:24.960><c> of</c>

00:14:25.310 --> 00:14:25.320 align:start position:0%
minute if we look at one example of
 

00:14:25.320 --> 00:14:28.460 align:start position:0%
minute if we look at one example of
these<00:14:25.760><c> we're</c><00:14:26.760><c> doing</c><00:14:26.970><c> a</c><00:14:27.060><c> log</c><00:14:27.240><c> debug</c><00:14:27.840><c> now</c>

00:14:28.460 --> 00:14:28.470 align:start position:0%
these we're doing a log debug now
 

00:14:28.470 --> 00:14:30.290 align:start position:0%
these we're doing a log debug now
normally<00:14:28.860><c> in</c><00:14:29.100><c> most</c><00:14:29.370><c> of</c><00:14:29.580><c> your</c><00:14:29.670><c> code</c><00:14:29.910><c> bases</c>

00:14:30.290 --> 00:14:30.300 align:start position:0%
normally in most of your code bases
 

00:14:30.300 --> 00:14:32.200 align:start position:0%
normally in most of your code bases
you'll<00:14:30.540><c> seem</c><00:14:30.810><c> to</c><00:14:30.930><c> something</c><00:14:31.230><c> like</c><00:14:31.350><c> this</c><00:14:31.470><c> if</c>

00:14:32.200 --> 00:14:32.210 align:start position:0%
you'll seem to something like this if
 

00:14:32.210 --> 00:14:38.480 align:start position:0%
you'll seem to something like this if
look<00:14:33.210><c> is</c><00:14:34.580><c> debug</c><00:14:35.580><c> enabled</c><00:14:36.770><c> then</c><00:14:37.770><c> do</c><00:14:38.070><c> that</c><00:14:38.220><c> and</c>

00:14:38.480 --> 00:14:38.490 align:start position:0%
look is debug enabled then do that and
 

00:14:38.490 --> 00:14:40.280 align:start position:0%
look is debug enabled then do that and
the<00:14:39.150><c> reason</c><00:14:39.300><c> does</c><00:14:39.690><c> the</c><00:14:39.750><c> reason</c><00:14:40.050><c> for</c><00:14:40.170><c> that</c>

00:14:40.280 --> 00:14:40.290 align:start position:0%
the reason does the reason for that
 

00:14:40.290 --> 00:14:44.240 align:start position:0%
the reason does the reason for that
because<00:14:40.560><c> obviously</c><00:14:41.000><c> the</c><00:14:42.000><c> the</c><00:14:42.620><c> the</c><00:14:43.620><c> check</c><00:14:43.890><c> that</c>

00:14:44.240 --> 00:14:44.250 align:start position:0%
because obviously the the the check that
 

00:14:44.250 --> 00:14:46.280 align:start position:0%
because obviously the the the check that
it<00:14:44.400><c> could</c><00:14:44.820><c> be</c><00:14:45.000><c> inside</c><00:14:45.360><c> the</c><00:14:45.480><c> debug</c><00:14:45.810><c> method</c><00:14:46.140><c> and</c>

00:14:46.280 --> 00:14:46.290 align:start position:0%
it could be inside the debug method and
 

00:14:46.290 --> 00:14:48.140 align:start position:0%
it could be inside the debug method and
in<00:14:46.350><c> fact</c><00:14:46.530><c> probably</c><00:14:46.680><c> is</c><00:14:47.010><c> as</c><00:14:47.280><c> well</c><00:14:47.550><c> but</c><00:14:48.030><c> the</c>

00:14:48.140 --> 00:14:48.150 align:start position:0%
in fact probably is as well but the
 

00:14:48.150 --> 00:14:49.460 align:start position:0%
in fact probably is as well but the
reason<00:14:48.480><c> to</c><00:14:48.510><c> wrap</c><00:14:48.810><c> it</c><00:14:49.020><c> in</c><00:14:49.200><c> the</c><00:14:49.320><c> if</c><00:14:49.440><c> statement</c>

00:14:49.460 --> 00:14:49.470 align:start position:0%
reason to wrap it in the if statement
 

00:14:49.470 --> 00:14:52.520 align:start position:0%
reason to wrap it in the if statement
here<00:14:50.130><c> is</c><00:14:50.340><c> that</c><00:14:51.090><c> here</c><00:14:51.780><c> you're</c><00:14:52.140><c> actually</c>

00:14:52.520 --> 00:14:52.530 align:start position:0%
here is that here you're actually
 

00:14:52.530 --> 00:14:54.410 align:start position:0%
here is that here you're actually
building<00:14:53.010><c> up</c><00:14:53.130><c> a</c><00:14:53.310><c> string</c><00:14:53.610><c> you're</c><00:14:53.790><c> creating</c><00:14:54.270><c> a</c>

00:14:54.410 --> 00:14:54.420 align:start position:0%
building up a string you're creating a
 

00:14:54.420 --> 00:14:57.640 align:start position:0%
building up a string you're creating a
new<00:14:54.600><c> string</c><00:14:54.900><c> in</c><00:14:55.110><c> this</c><00:14:55.680><c> case</c><00:14:55.740><c> this</c><00:14:56.400><c> Stages</c>

00:14:57.640 --> 00:14:57.650 align:start position:0%
new string in this case this Stages
 

00:14:57.650 --> 00:15:01.490 align:start position:0%
new string in this case this Stages
field<00:14:58.650><c> is</c><00:14:59.070><c> a</c><00:14:59.430><c> list</c><00:14:59.850><c> so</c><00:15:00.660><c> it</c><00:15:00.780><c> goes</c><00:15:00.990><c> off</c><00:15:01.230><c> to</c><00:15:01.380><c> that</c>

00:15:01.490 --> 00:15:01.500 align:start position:0%
field is a list so it goes off to that
 

00:15:01.500 --> 00:15:04.310 align:start position:0%
field is a list so it goes off to that
list<00:15:01.770><c> and</c><00:15:01.980><c> builds</c><00:15:02.460><c> up</c><00:15:02.610><c> a</c><00:15:02.790><c> string</c><00:15:03.510><c> which</c><00:15:03.930><c> curt</c>

00:15:04.310 --> 00:15:04.320 align:start position:0%
list and builds up a string which curt
 

00:15:04.320 --> 00:15:05.870 align:start position:0%
list and builds up a string which curt
which<00:15:04.500><c> is</c><00:15:04.680><c> a</c><00:15:04.710><c> representation</c><00:15:05.490><c> of</c><00:15:05.550><c> all</c><00:15:05.730><c> the</c>

00:15:05.870 --> 00:15:05.880 align:start position:0%
which is a representation of all the
 

00:15:05.880 --> 00:15:08.270 align:start position:0%
which is a representation of all the
items<00:15:06.000><c> in</c><00:15:06.360><c> that</c><00:15:06.420><c> list</c><00:15:06.660><c> and</c><00:15:07.110><c> then</c><00:15:07.620><c> append</c><00:15:08.070><c> it</c><00:15:08.250><c> to</c>

00:15:08.270 --> 00:15:08.280 align:start position:0%
items in that list and then append it to
 

00:15:08.280 --> 00:15:11.210 align:start position:0%
items in that list and then append it to
the<00:15:08.640><c> stages</c><00:15:09.060><c> thing</c><00:15:09.300><c> I'm</c><00:15:09.810><c> n</c><00:15:10.050><c> calls</c><00:15:10.620><c> to</c><00:15:10.890><c> debug</c>

00:15:11.210 --> 00:15:11.220 align:start position:0%
the stages thing I'm n calls to debug
 

00:15:11.220 --> 00:15:13.310 align:start position:0%
the stages thing I'm n calls to debug
method<00:15:11.580><c> with</c><00:15:11.850><c> that</c><00:15:12.090><c> string</c><00:15:12.420><c> now</c><00:15:12.990><c> if</c><00:15:13.080><c> you're</c><00:15:13.230><c> in</c>

00:15:13.310 --> 00:15:13.320 align:start position:0%
method with that string now if you're in
 

00:15:13.320 --> 00:15:15.530 align:start position:0%
method with that string now if you're in
production<00:15:13.860><c> you</c><00:15:14.490><c> are</c><00:15:14.520><c> probably</c><00:15:15.180><c> not</c><00:15:15.300><c> looking</c>

00:15:15.530 --> 00:15:15.540 align:start position:0%
production you are probably not looking
 

00:15:15.540 --> 00:15:17.090 align:start position:0%
production you are probably not looking
at<00:15:15.720><c> debug</c><00:15:16.020><c> level</c><00:15:16.170><c> so</c><00:15:16.380><c> you've</c><00:15:16.530><c> just</c><00:15:16.560><c> incurred</c>

00:15:17.090 --> 00:15:17.100 align:start position:0%
at debug level so you've just incurred
 

00:15:17.100 --> 00:15:18.890 align:start position:0%
at debug level so you've just incurred
the<00:15:17.310><c> cost</c><00:15:17.550><c> of</c><00:15:17.850><c> building</c><00:15:18.180><c> up</c><00:15:18.300><c> that</c><00:15:18.420><c> string</c><00:15:18.720><c> when</c>

00:15:18.890 --> 00:15:18.900 align:start position:0%
the cost of building up that string when
 

00:15:18.900 --> 00:15:19.940 align:start position:0%
the cost of building up that string when
you<00:15:18.960><c> don't</c><00:15:19.170><c> need</c><00:15:19.350><c> it</c><00:15:19.500><c> because</c><00:15:19.650><c> you're</c><00:15:19.920><c> not</c>

00:15:19.940 --> 00:15:19.950 align:start position:0%
you don't need it because you're not
 

00:15:19.950 --> 00:15:22.250 align:start position:0%
you don't need it because you're not
actually<00:15:20.400><c> logging</c><00:15:20.580><c> at</c><00:15:20.760><c> that</c><00:15:20.880><c> level</c><00:15:21.150><c> now</c><00:15:22.110><c> we're</c>

00:15:22.250 --> 00:15:22.260 align:start position:0%
actually logging at that level now we're
 

00:15:22.260 --> 00:15:23.160 align:start position:0%
actually logging at that level now we're
going<00:15:22.350><c> to</c><00:15:22.410><c> talk</c><00:15:22.650><c> I'll</c><00:15:22.800><c> turn</c>

00:15:23.160 --> 00:15:23.170 align:start position:0%
going to talk I'll turn
 

00:15:23.170 --> 00:15:25.680 align:start position:0%
going to talk I'll turn
we're<00:15:23.380><c> doing</c><00:15:23.740><c> this</c><00:15:23.889><c> so</c><00:15:24.790><c> if</c><00:15:24.910><c> instead</c><00:15:25.269><c> we</c><00:15:25.329><c> pass</c>

00:15:25.680 --> 00:15:25.690 align:start position:0%
we're doing this so if instead we pass
 

00:15:25.690 --> 00:15:27.600 align:start position:0%
we're doing this so if instead we pass
in<00:15:25.839><c> a</c><00:15:25.899><c> lambda</c><00:15:26.110><c> expression</c><00:15:26.769><c> what</c><00:15:27.310><c> we're</c><00:15:27.430><c> doing</c>

00:15:27.600 --> 00:15:27.610 align:start position:0%
in a lambda expression what we're doing
 

00:15:27.610 --> 00:15:29.850 align:start position:0%
in a lambda expression what we're doing
here<00:15:27.820><c> is</c><00:15:27.910><c> we're</c><00:15:28.089><c> passing</c><00:15:28.480><c> in</c><00:15:28.690><c> the</c><00:15:29.110><c> recipe</c><00:15:29.649><c> of</c>

00:15:29.850 --> 00:15:29.860 align:start position:0%
here is we're passing in the recipe of
 

00:15:29.860 --> 00:15:31.530 align:start position:0%
here is we're passing in the recipe of
how<00:15:29.889><c> to</c><00:15:30.070><c> create</c><00:15:30.550><c> that</c><00:15:30.730><c> string</c><00:15:31.089><c> but</c><00:15:31.240><c> we're</c><00:15:31.360><c> not</c>

00:15:31.530 --> 00:15:31.540 align:start position:0%
how to create that string but we're not
 

00:15:31.540 --> 00:15:33.629 align:start position:0%
how to create that string but we're not
creating<00:15:31.839><c> that</c><00:15:32.139><c> string</c><00:15:32.470><c> just</c><00:15:32.800><c> yet</c><00:15:33.070><c> we're</c>

00:15:33.629 --> 00:15:33.639 align:start position:0%
creating that string just yet we're
 

00:15:33.639 --> 00:15:35.639 align:start position:0%
creating that string just yet we're
going<00:15:33.790><c> to</c><00:15:33.910><c> do</c><00:15:34.000><c> it</c><00:15:34.089><c> lazily</c><00:15:34.450><c> so</c><00:15:35.200><c> let</c><00:15:35.350><c> me</c><00:15:35.440><c> remove</c>

00:15:35.639 --> 00:15:35.649 align:start position:0%
going to do it lazily so let me remove
 

00:15:35.649 --> 00:15:38.579 align:start position:0%
going to do it lazily so let me remove
this<00:15:35.889><c> here</c><00:15:36.720><c> by</c><00:15:37.720><c> the</c><00:15:37.779><c> way</c><00:15:37.930><c> if</c><00:15:38.019><c> you</c><00:15:38.170><c> want</c><00:15:38.350><c> to</c><00:15:38.470><c> know</c>

00:15:38.579 --> 00:15:38.589 align:start position:0%
this here by the way if you want to know
 

00:15:38.589 --> 00:15:40.530 align:start position:0%
this here by the way if you want to know
what<00:15:38.800><c> what</c><00:15:39.490><c> shortcuts</c><00:15:39.880><c> I'm</c><00:15:40.000><c> using</c><00:15:40.180><c> they</c><00:15:40.510><c> are</c>

00:15:40.530 --> 00:15:40.540 align:start position:0%
what what shortcuts I'm using they are
 

00:15:40.540 --> 00:15:41.850 align:start position:0%
what what shortcuts I'm using they are
flashing<00:15:41.019><c> up</c><00:15:41.139><c> down</c><00:15:41.320><c> the</c><00:15:41.440><c> bottom</c><00:15:41.680><c> of</c><00:15:41.769><c> the</c>

00:15:41.850 --> 00:15:41.860 align:start position:0%
flashing up down the bottom of the
 

00:15:41.860 --> 00:15:43.319 align:start position:0%
flashing up down the bottom of the
screen<00:15:42.010><c> you</c><00:15:42.279><c> can</c><00:15:42.459><c> see</c><00:15:42.579><c> which</c><00:15:42.760><c> shortcuts</c><00:15:43.180><c> I'm</c>

00:15:43.319 --> 00:15:43.329 align:start position:0%
screen you can see which shortcuts I'm
 

00:15:43.329 --> 00:15:48.060 align:start position:0%
screen you can see which shortcuts I'm
using<00:15:43.540><c> to</c><00:15:43.959><c> to</c><00:15:44.769><c> try</c><00:15:44.980><c> and</c><00:15:45.240><c> navigate</c><00:15:46.240><c> quickly</c><00:15:47.070><c> so</c>

00:15:48.060 --> 00:15:48.070 align:start position:0%
using to to try and navigate quickly so
 

00:15:48.070 --> 00:15:50.030 align:start position:0%
using to to try and navigate quickly so
here<00:15:48.220><c> I'm</c><00:15:48.279><c> going</c><00:15:48.399><c> to</c><00:15:48.490><c> create</c><00:15:48.699><c> this</c><00:15:48.850><c> method</c>

00:15:50.030 --> 00:15:50.040 align:start position:0%
here I'm going to create this method
 

00:15:50.040 --> 00:15:55.129 align:start position:0%
here I'm going to create this method
it's<00:15:51.040><c> going</c><00:15:51.250><c> to</c><00:15:51.339><c> take</c><00:15:51.519><c> a</c><00:15:51.550><c> supplier</c><00:15:53.010><c> of</c><00:15:54.010><c> string</c>

00:15:55.129 --> 00:15:55.139 align:start position:0%
it's going to take a supplier of string
 

00:15:55.139 --> 00:15:59.040 align:start position:0%
it's going to take a supplier of string
let's<00:15:56.139><c> call</c><00:15:56.380><c> it</c><00:15:56.470><c> string</c><00:15:56.709><c> supplier</c><00:15:58.050><c> this</c>

00:15:59.040 --> 00:15:59.050 align:start position:0%
let's call it string supplier this
 

00:15:59.050 --> 00:16:01.889 align:start position:0%
let's call it string supplier this
logger<00:15:59.620><c> interface</c><00:16:00.190><c> is</c><00:16:00.540><c> implemented</c><00:16:01.540><c> by</c><00:16:01.870><c> a</c>

00:16:01.889 --> 00:16:01.899 align:start position:0%
logger interface is implemented by a
 

00:16:01.899 --> 00:16:03.840 align:start position:0%
logger interface is implemented by a
number<00:16:02.260><c> of</c><00:16:02.350><c> different</c><00:16:02.680><c> implementations</c><00:16:03.370><c> now</c>

00:16:03.840 --> 00:16:03.850 align:start position:0%
number of different implementations now
 

00:16:03.850 --> 00:16:05.639 align:start position:0%
number of different implementations now
what<00:16:04.000><c> I</c><00:16:04.029><c> don't</c><00:16:04.149><c> want</c><00:16:04.540><c> to</c><00:16:04.630><c> do</c><00:16:04.810><c> is</c><00:16:04.990><c> I</c><00:16:05.019><c> don't</c><00:16:05.170><c> want</c>

00:16:05.639 --> 00:16:05.649 align:start position:0%
what I don't want to do is I don't want
 

00:16:05.649 --> 00:16:06.930 align:start position:0%
what I don't want to do is I don't want
to<00:16:05.740><c> go</c><00:16:05.920><c> into</c><00:16:06.130><c> every</c><00:16:06.459><c> single</c><00:16:06.490><c> one</c><00:16:06.760><c> of</c><00:16:06.850><c> those</c>

00:16:06.930 --> 00:16:06.940 align:start position:0%
to go into every single one of those
 

00:16:06.940 --> 00:16:09.290 align:start position:0%
to go into every single one of those
implementations<00:16:07.720><c> and</c><00:16:07.959><c> create</c><00:16:08.829><c> the</c><00:16:09.010><c> same</c>

00:16:09.290 --> 00:16:09.300 align:start position:0%
implementations and create the same
 

00:16:09.300 --> 00:16:11.310 align:start position:0%
implementations and create the same
implementation<00:16:10.300><c> of</c><00:16:10.389><c> this</c><00:16:10.540><c> debug</c><00:16:10.959><c> method</c>

00:16:11.310 --> 00:16:11.320 align:start position:0%
implementation of this debug method
 

00:16:11.320 --> 00:16:12.960 align:start position:0%
implementation of this debug method
because<00:16:11.589><c> I</c><00:16:11.680><c> actually</c><00:16:11.829><c> know</c><00:16:12.190><c> what</c><00:16:12.220><c> this</c><00:16:12.579><c> debug</c>

00:16:12.960 --> 00:16:12.970 align:start position:0%
because I actually know what this debug
 

00:16:12.970 --> 00:16:14.910 align:start position:0%
because I actually know what this debug
message<00:16:13.300><c> should</c><00:16:13.540><c> do</c><00:16:13.750><c> so</c><00:16:14.440><c> let's</c><00:16:14.680><c> create</c>

00:16:14.910 --> 00:16:14.920 align:start position:0%
message should do so let's create
 

00:16:14.920 --> 00:16:17.009 align:start position:0%
message should do so let's create
another<00:16:15.160><c> thing</c><00:16:15.790><c> which</c><00:16:16.000><c> is</c><00:16:16.029><c> new</c><00:16:16.449><c> in</c><00:16:16.570><c> Java</c><00:16:16.779><c> eight</c>

00:16:17.009 --> 00:16:17.019 align:start position:0%
another thing which is new in Java eight
 

00:16:17.019 --> 00:16:19.490 align:start position:0%
another thing which is new in Java eight
a<00:16:17.199><c> default</c><00:16:17.889><c> to</c><00:16:17.980><c> method</c><00:16:18.279><c> on</c><00:16:18.370><c> my</c><00:16:18.519><c> interface</c><00:16:18.850><c> and</c>

00:16:19.490 --> 00:16:19.500 align:start position:0%
a default to method on my interface and
 

00:16:19.500 --> 00:16:23.189 align:start position:0%
a default to method on my interface and
this<00:16:20.500><c> whoops</c><00:16:21.190><c> I've</c><00:16:21.550><c> accidentally</c><00:16:22.060><c> got</c><00:16:23.050><c> with</c>

00:16:23.189 --> 00:16:23.199 align:start position:0%
this whoops I've accidentally got with
 

00:16:23.199 --> 00:16:31.439 align:start position:0%
this whoops I've accidentally got with
that<00:16:23.459><c> and</c><00:16:24.459><c> then</c><00:16:24.670><c> this</c><00:16:24.790><c> default</c><00:16:25.209><c> method</c><00:16:25.570><c> is</c><00:16:30.449><c> I'm</c>

00:16:31.439 --> 00:16:31.449 align:start position:0%
that and then this default method is I'm
 

00:16:31.449 --> 00:16:32.880 align:start position:0%
that and then this default method is I'm
going<00:16:31.720><c> to</c><00:16:31.779><c> do</c><00:16:31.930><c> the</c><00:16:32.079><c> check</c><00:16:32.320><c> for</c><00:16:32.560><c> whether</c><00:16:32.740><c> the</c>

00:16:32.880 --> 00:16:32.890 align:start position:0%
going to do the check for whether the
 

00:16:32.890 --> 00:16:34.920 align:start position:0%
going to do the check for whether the
debug<00:16:33.190><c> is</c><00:16:33.310><c> enabled</c><00:16:33.670><c> there</c><00:16:33.850><c> and</c><00:16:34.089><c> then</c><00:16:34.630><c> I'm</c>

00:16:34.920 --> 00:16:34.930 align:start position:0%
debug is enabled there and then I'm
 

00:16:34.930 --> 00:16:39.410 align:start position:0%
debug is enabled there and then I'm
going<00:16:35.140><c> to</c><00:16:35.290><c> do</c><00:16:35.440><c> debug</c><00:16:36.220><c> string</c><00:16:36.910><c> supplier</c><00:16:37.709><c> yet</c>

00:16:39.410 --> 00:16:39.420 align:start position:0%
going to do debug string supplier yet
 

00:16:39.420 --> 00:16:42.180 align:start position:0%
going to do debug string supplier yet
now<00:16:40.420><c> the</c><00:16:40.480><c> difference</c><00:16:40.899><c> here</c><00:16:41.230><c> is</c><00:16:41.470><c> that</c><00:16:41.589><c> it's</c>

00:16:42.180 --> 00:16:42.190 align:start position:0%
now the difference here is that it's
 

00:16:42.190 --> 00:16:44.189 align:start position:0%
now the difference here is that it's
only<00:16:42.459><c> at</c><00:16:42.699><c> this</c><00:16:42.880><c> point</c><00:16:43.209><c> that</c><00:16:43.390><c> we</c><00:16:43.540><c> build</c><00:16:43.810><c> up</c><00:16:43.959><c> that</c>

00:16:44.189 --> 00:16:44.199 align:start position:0%
only at this point that we build up that
 

00:16:44.199 --> 00:16:46.050 align:start position:0%
only at this point that we build up that
string<00:16:44.560><c> so</c><00:16:45.100><c> it's</c><00:16:45.250><c> only</c><00:16:45.399><c> at</c><00:16:45.579><c> this</c><00:16:45.670><c> point</c><00:16:45.880><c> we</c>

00:16:46.050 --> 00:16:46.060 align:start position:0%
string so it's only at this point we
 

00:16:46.060 --> 00:16:47.880 align:start position:0%
string so it's only at this point we
incur<00:16:46.329><c> the</c><00:16:46.510><c> cost</c><00:16:46.720><c> of</c><00:16:46.899><c> creating</c><00:16:47.410><c> that</c><00:16:47.589><c> string</c>

00:16:47.880 --> 00:16:47.890 align:start position:0%
incur the cost of creating that string
 

00:16:47.890 --> 00:16:51.000 align:start position:0%
incur the cost of creating that string
and<00:16:48.690><c> what's</c><00:16:49.690><c> nice</c><00:16:50.050><c> about</c><00:16:50.110><c> putting</c><00:16:50.680><c> this</c><00:16:50.800><c> as</c><00:16:50.980><c> a</c>

00:16:51.000 --> 00:16:51.010 align:start position:0%
and what's nice about putting this as a
 

00:16:51.010 --> 00:16:53.069 align:start position:0%
and what's nice about putting this as a
default<00:16:51.190><c> method</c><00:16:51.550><c> is</c><00:16:51.910><c> that</c><00:16:52.240><c> this</c><00:16:52.750><c> is</c><00:16:52.930><c> now</c>

00:16:53.069 --> 00:16:53.079 align:start position:0%
default method is that this is now
 

00:16:53.079 --> 00:16:55.259 align:start position:0%
default method is that this is now
inherited<00:16:53.680><c> by</c><00:16:53.949><c> all</c><00:16:53.980><c> of</c><00:16:54.370><c> the</c><00:16:54.519><c> implementations</c>

00:16:55.259 --> 00:16:55.269 align:start position:0%
inherited by all of the implementations
 

00:16:55.269 --> 00:16:57.360 align:start position:0%
inherited by all of the implementations
of<00:16:55.510><c> this</c><00:16:55.870><c> interface</c><00:16:56.380><c> I</c><00:16:56.589><c> don't</c><00:16:56.769><c> have</c><00:16:56.890><c> to</c><00:16:57.070><c> put</c>

00:16:57.360 --> 00:16:57.370 align:start position:0%
of this interface I don't have to put
 

00:16:57.370 --> 00:16:58.620 align:start position:0%
of this interface I don't have to put
that<00:16:57.519><c> implementation</c><00:16:58.029><c> on</c><00:16:58.269><c> all</c><00:16:58.480><c> the</c>

00:16:58.620 --> 00:16:58.630 align:start position:0%
that implementation on all the
 

00:16:58.630 --> 00:17:03.660 align:start position:0%
that implementation on all the
individual<00:16:59.079><c> instance</c><00:16:59.589><c> implementations</c><00:17:02.670><c> so</c>

00:17:03.660 --> 00:17:03.670 align:start position:0%
individual instance implementations so
 

00:17:03.670 --> 00:17:04.860 align:start position:0%
individual instance implementations so
that's<00:17:03.850><c> good</c><00:17:04.059><c> for</c><00:17:04.089><c> performance</c><00:17:04.839><c> reasons</c>

00:17:04.860 --> 00:17:04.870 align:start position:0%
that's good for performance reasons
 

00:17:04.870 --> 00:17:06.360 align:start position:0%
that's good for performance reasons
we'll<00:17:05.319><c> have</c><00:17:05.439><c> a</c><00:17:05.470><c> look</c><00:17:05.620><c> at</c><00:17:05.740><c> the</c><00:17:05.799><c> performance</c><00:17:06.220><c> so</c>

00:17:06.360 --> 00:17:06.370 align:start position:0%
we'll have a look at the performance so
 

00:17:06.370 --> 00:17:07.319 align:start position:0%
we'll have a look at the performance so
you'll<00:17:06.520><c> see</c><00:17:06.699><c> that</c><00:17:06.850><c> in</c><00:17:07.000><c> a</c><00:17:07.059><c> minute</c>

00:17:07.319 --> 00:17:07.329 align:start position:0%
you'll see that in a minute
 

00:17:07.329 --> 00:17:09.870 align:start position:0%
you'll see that in a minute
but<00:17:07.809><c> what</c><00:17:07.990><c> it's</c><00:17:08.140><c> also</c><00:17:08.230><c> good</c><00:17:08.620><c> for</c><00:17:08.829><c> is</c><00:17:09.100><c> reducing</c>

00:17:09.870 --> 00:17:09.880 align:start position:0%
but what it's also good for is reducing
 

00:17:09.880 --> 00:17:12.480 align:start position:0%
but what it's also good for is reducing
things<00:17:10.089><c> like</c><00:17:10.299><c> copy</c><00:17:10.540><c> and</c><00:17:10.750><c> paste</c><00:17:10.929><c> errors</c><00:17:11.370><c> let</c><00:17:12.370><c> me</c>

00:17:12.480 --> 00:17:12.490 align:start position:0%
things like copy and paste errors let me
 

00:17:12.490 --> 00:17:24.510 align:start position:0%
things like copy and paste errors let me
show<00:17:12.699><c> you</c><00:17:12.760><c> an</c><00:17:12.939><c> example</c><00:17:13.270><c> of</c><00:17:13.510><c> this</c>

00:17:24.510 --> 00:17:24.520 align:start position:0%
 
 

00:17:24.520 --> 00:17:28.300 align:start position:0%
 
so<00:17:25.520><c> here's</c><00:17:25.760><c> an</c><00:17:25.850><c> example</c><00:17:26.120><c> of</c><00:17:26.450><c> a</c><00:17:27.310><c> debug</c>

00:17:28.300 --> 00:17:28.310 align:start position:0%
so here's an example of a debug
 

00:17:28.310 --> 00:17:30.340 align:start position:0%
so here's an example of a debug
statement<00:17:28.760><c> that's</c><00:17:28.940><c> in</c><00:17:29.150><c> the</c><00:17:29.270><c> code</c><00:17:29.510><c> and</c><00:17:29.750><c> it</c><00:17:30.140><c> says</c>

00:17:30.340 --> 00:17:30.350 align:start position:0%
statement that's in the code and it says
 

00:17:30.350 --> 00:17:32.530 align:start position:0%
statement that's in the code and it says
log<00:17:30.650><c> dot</c><00:17:30.830><c> is</c><00:17:31.070><c> Trace</c><00:17:31.400><c> enabled</c><00:17:31.850><c> but</c><00:17:32.270><c> it</c><00:17:32.390><c> actually</c>

00:17:32.530 --> 00:17:32.540 align:start position:0%
log dot is Trace enabled but it actually
 

00:17:32.540 --> 00:17:34.570 align:start position:0%
log dot is Trace enabled but it actually
logs<00:17:32.960><c> with</c><00:17:33.140><c> info</c><00:17:33.470><c> level</c><00:17:33.800><c> this</c><00:17:34.250><c> is</c><00:17:34.400><c> not</c>

00:17:34.570 --> 00:17:34.580 align:start position:0%
logs with info level this is not
 

00:17:34.580 --> 00:17:36.640 align:start position:0%
logs with info level this is not
uncommon<00:17:35.060><c> in</c><00:17:35.330><c> terms</c><00:17:35.570><c> of</c><00:17:35.750><c> copy-paste</c><00:17:36.200><c> errors</c>

00:17:36.640 --> 00:17:36.650 align:start position:0%
uncommon in terms of copy-paste errors
 

00:17:36.650 --> 00:17:38.110 align:start position:0%
uncommon in terms of copy-paste errors
the<00:17:37.100><c> fact</c><00:17:37.280><c> that</c><00:17:37.340><c> we're</c><00:17:37.520><c> going</c><00:17:37.640><c> to</c><00:17:37.730><c> copy</c><00:17:37.880><c> this</c>

00:17:38.110 --> 00:17:38.120 align:start position:0%
the fact that we're going to copy this
 

00:17:38.120 --> 00:17:39.340 align:start position:0%
the fact that we're going to copy this
from<00:17:38.390><c> somewhere</c><00:17:38.720><c> else</c><00:17:38.780><c> and</c><00:17:38.990><c> then</c><00:17:39.110><c> maybe</c>

00:17:39.340 --> 00:17:39.350 align:start position:0%
from somewhere else and then maybe
 

00:17:39.350 --> 00:17:41.500 align:start position:0%
from somewhere else and then maybe
change<00:17:39.680><c> the</c><00:17:39.860><c> level</c><00:17:40.130><c> of</c><00:17:40.220><c> the</c><00:17:40.340><c> look</c><00:17:40.490><c> and</c><00:17:41.000><c> now</c>

00:17:41.500 --> 00:17:41.510 align:start position:0%
change the level of the look and now
 

00:17:41.510 --> 00:17:44.290 align:start position:0%
change the level of the look and now
that<00:17:41.720><c> we</c><00:17:41.870><c> can</c><00:17:42.050><c> actually</c><00:17:42.320><c> pass</c><00:17:42.530><c> this</c><00:17:42.710><c> in</c><00:17:43.040><c> as</c><00:17:43.300><c> now</c>

00:17:44.290 --> 00:17:44.300 align:start position:0%
that we can actually pass this in as now
 

00:17:44.300 --> 00:17:46.180 align:start position:0%
that we can actually pass this in as now
we're<00:17:44.510><c> doing</c><00:17:44.600><c> the</c><00:17:44.780><c> if</c><00:17:44.960><c> statement</c><00:17:45.530><c> inside</c><00:17:45.920><c> the</c>

00:17:46.180 --> 00:17:46.190 align:start position:0%
we're doing the if statement inside the
 

00:17:46.190 --> 00:17:48.670 align:start position:0%
we're doing the if statement inside the
info<00:17:46.640><c> Court</c><00:17:46.910><c> for</c><00:17:47.090><c> example</c><00:17:47.540><c> then</c><00:17:48.170><c> I</c><00:17:48.410><c> don't</c><00:17:48.560><c> need</c>

00:17:48.670 --> 00:17:48.680 align:start position:0%
info Court for example then I don't need
 

00:17:48.680 --> 00:17:51.220 align:start position:0%
info Court for example then I don't need
this<00:17:48.860><c> and</c><00:17:49.130><c> I</c><00:17:49.760><c> know</c><00:17:49.820><c> that</c><00:17:50.300><c> I'm</c><00:17:50.540><c> doing</c><00:17:50.870><c> the</c><00:17:51.080><c> right</c>

00:17:51.220 --> 00:17:51.230 align:start position:0%
this and I know that I'm doing the right
 

00:17:51.230 --> 00:17:52.900 align:start position:0%
this and I know that I'm doing the right
thing<00:17:51.500><c> inside</c><00:17:51.800><c> the</c><00:17:51.920><c> method</c><00:17:52.220><c> so</c><00:17:52.370><c> I'm</c><00:17:52.430><c> reducing</c>

00:17:52.900 --> 00:17:52.910 align:start position:0%
thing inside the method so I'm reducing
 

00:17:52.910 --> 00:17:53.800 align:start position:0%
thing inside the method so I'm reducing
these<00:17:53.150><c> copy/paste</c>

00:17:53.800 --> 00:17:53.810 align:start position:0%
these copy/paste
 

00:17:53.810 --> 00:17:55.180 align:start position:0%
these copy/paste
errors<00:17:54.110><c> by</c><00:17:54.320><c> passing</c><00:17:54.770><c> these</c><00:17:54.860><c> lambda</c>

00:17:55.180 --> 00:17:55.190 align:start position:0%
errors by passing these lambda
 

00:17:55.190 --> 00:17:57.430 align:start position:0%
errors by passing these lambda
expressions<00:17:55.610><c> around</c><00:17:55.880><c> so</c><00:17:56.480><c> not</c><00:17:56.630><c> only</c><00:17:56.810><c> do</c><00:17:57.380><c> we</c>

00:17:57.430 --> 00:17:57.440 align:start position:0%
expressions around so not only do we
 

00:17:57.440 --> 00:17:59.260 align:start position:0%
expressions around so not only do we
have<00:17:57.650><c> an</c><00:17:57.740><c> impact</c><00:17:58.010><c> on</c><00:17:58.190><c> performance</c><00:17:58.340><c> but</c><00:17:59.150><c> we</c>

00:17:59.260 --> 00:17:59.270 align:start position:0%
have an impact on performance but we
 

00:17:59.270 --> 00:18:01.570 align:start position:0%
have an impact on performance but we
also<00:17:59.450><c> are</c><00:17:59.950><c> potentially</c><00:18:00.950><c> reducing</c><00:18:01.220><c> some</c><00:18:01.490><c> of</c>

00:18:01.570 --> 00:18:01.580 align:start position:0%
also are potentially reducing some of
 

00:18:01.580 --> 00:18:06.790 align:start position:0%
also are potentially reducing some of
the<00:18:01.640><c> errors</c><00:18:01.910><c> too</c><00:18:04.780><c> so</c><00:18:05.780><c> let's</c><00:18:05.990><c> look</c><00:18:06.170><c> at</c><00:18:06.740><c> the</c>

00:18:06.790 --> 00:18:06.800 align:start position:0%
the errors too so let's look at the
 

00:18:06.800 --> 00:18:08.350 align:start position:0%
the errors too so let's look at the
performance<00:18:07.220><c> of</c><00:18:07.310><c> this</c><00:18:07.460><c> here</c><00:18:08.120><c> I've</c><00:18:08.210><c> got</c><00:18:08.330><c> a</c>

00:18:08.350 --> 00:18:08.360 align:start position:0%
performance of this here I've got a
 

00:18:08.360 --> 00:18:10.000 align:start position:0%
performance of this here I've got a
performance<00:18:08.780><c> test</c><00:18:08.900><c> which</c><00:18:09.140><c> is</c><00:18:09.260><c> testing</c><00:18:09.710><c> for</c>

00:18:10.000 --> 00:18:10.010 align:start position:0%
performance test which is testing for
 

00:18:10.010 --> 00:18:12.850 align:start position:0%
performance test which is testing for
different<00:18:10.340><c> cases</c><00:18:10.550><c> one</c><00:18:11.450><c> where</c><00:18:11.870><c> I'm</c><00:18:12.260><c> I'm</c>

00:18:12.850 --> 00:18:12.860 align:start position:0%
different cases one where I'm I'm
 

00:18:12.860 --> 00:18:15.820 align:start position:0%
different cases one where I'm I'm
logging<00:18:13.460><c> with</c><00:18:13.820><c> a</c><00:18:14.150><c> constant</c><00:18:14.660><c> string</c><00:18:15.500><c> which</c><00:18:15.710><c> is</c>

00:18:15.820 --> 00:18:15.830 align:start position:0%
logging with a constant string which is
 

00:18:15.830 --> 00:18:18.070 align:start position:0%
logging with a constant string which is
always<00:18:16.010><c> the</c><00:18:16.190><c> same</c><00:18:16.370><c> thing</c><00:18:16.580><c> -</c><00:18:17.210><c> when</c><00:18:17.600><c> I'm</c><00:18:17.690><c> logging</c>

00:18:18.070 --> 00:18:18.080 align:start position:0%
always the same thing - when I'm logging
 

00:18:18.080 --> 00:18:19.960 align:start position:0%
always the same thing - when I'm logging
with<00:18:18.290><c> a</c><00:18:18.320><c> lambda</c><00:18:18.890><c> expression</c><00:18:19.400><c> which</c><00:18:19.520><c> also</c><00:18:19.820><c> has</c>

00:18:19.960 --> 00:18:19.970 align:start position:0%
with a lambda expression which also has
 

00:18:19.970 --> 00:18:22.390 align:start position:0%
with a lambda expression which also has
a<00:18:20.000><c> constant</c><00:18:20.540><c> string</c><00:18:20.780><c> before</c><00:18:21.590><c> the</c><00:18:21.950><c> third</c><00:18:22.190><c> one</c>

00:18:22.390 --> 00:18:22.400 align:start position:0%
a constant string before the third one
 

00:18:22.400 --> 00:18:24.340 align:start position:0%
a constant string before the third one
we're<00:18:22.820><c> logging</c><00:18:23.630><c> with</c><00:18:23.870><c> a</c><00:18:23.900><c> string</c><00:18:24.200><c> which</c><00:18:24.320><c> is</c>

00:18:24.340 --> 00:18:24.350 align:start position:0%
we're logging with a string which is
 

00:18:24.350 --> 00:18:26.320 align:start position:0%
we're logging with a string which is
changing<00:18:24.950><c> I'm</c><00:18:25.220><c> going</c><00:18:25.670><c> to</c><00:18:25.730><c> be</c><00:18:25.790><c> appending</c><00:18:26.150><c> some</c>

00:18:26.320 --> 00:18:26.330 align:start position:0%
changing I'm going to be appending some
 

00:18:26.330 --> 00:18:27.580 align:start position:0%
changing I'm going to be appending some
new<00:18:26.510><c> value</c><00:18:26.780><c> to</c><00:18:26.900><c> the</c><00:18:26.960><c> end</c><00:18:27.080><c> of</c><00:18:27.170><c> that</c><00:18:27.200><c> and</c><00:18:27.380><c> you</c><00:18:27.440><c> can</c>

00:18:27.580 --> 00:18:27.590 align:start position:0%
new value to the end of that and you can
 

00:18:27.590 --> 00:18:29.140 align:start position:0%
new value to the end of that and you can
see<00:18:27.680><c> it's</c><00:18:27.800><c> just</c><00:18:27.980><c> a</c><00:18:28.070><c> really</c><00:18:28.310><c> simple</c><00:18:28.430><c> change</c><00:18:28.880><c> and</c>

00:18:29.140 --> 00:18:29.150 align:start position:0%
see it's just a really simple change and
 

00:18:29.150 --> 00:18:32.170 align:start position:0%
see it's just a really simple change and
the<00:18:29.990><c> third</c><00:18:30.200><c> one</c><00:18:30.470><c> the</c><00:18:30.770><c> fourth</c><00:18:30.800><c> one</c><00:18:31.070><c> where</c><00:18:31.880><c> I'm</c>

00:18:32.170 --> 00:18:32.180 align:start position:0%
the third one the fourth one where I'm
 

00:18:32.180 --> 00:18:33.790 align:start position:0%
the third one the fourth one where I'm
passing<00:18:32.810><c> a</c><00:18:32.960><c> lambda</c><00:18:33.140><c> expression</c><00:18:33.290><c> with</c><00:18:33.710><c> the</c>

00:18:33.790 --> 00:18:33.800 align:start position:0%
passing a lambda expression with the
 

00:18:33.800 --> 00:18:36.340 align:start position:0%
passing a lambda expression with the
same<00:18:34.040><c> thing</c><00:18:34.400><c> but</c><00:18:35.060><c> this</c><00:18:35.450><c> one</c><00:18:35.630><c> will</c><00:18:35.810><c> be</c><00:18:35.840><c> lazily</c>

00:18:36.340 --> 00:18:36.350 align:start position:0%
same thing but this one will be lazily
 

00:18:36.350 --> 00:18:38.710 align:start position:0%
same thing but this one will be lazily
evaluated<00:18:37.010><c> inside</c><00:18:37.340><c> the</c><00:18:37.490><c> look</c><00:18:37.640><c> so</c><00:18:38.240><c> that</c><00:18:38.420><c> if</c><00:18:38.540><c> we</c>

00:18:38.710 --> 00:18:38.720 align:start position:0%
evaluated inside the look so that if we
 

00:18:38.720 --> 00:18:41.350 align:start position:0%
evaluated inside the look so that if we
are<00:18:38.780><c> not</c><00:18:38.870><c> logging</c><00:18:39.500><c> that</c><00:18:39.790><c> string</c><00:18:40.790><c> we</c><00:18:41.150><c> don't</c>

00:18:41.350 --> 00:18:41.360 align:start position:0%
are not logging that string we don't
 

00:18:41.360 --> 00:18:44.200 align:start position:0%
are not logging that string we don't
incur<00:18:41.960><c> the</c><00:18:42.110><c> cost</c><00:18:42.320><c> of</c><00:18:42.530><c> creating</c><00:18:43.070><c> it</c><00:18:43.160><c> and</c><00:18:43.910><c> we</c><00:18:44.030><c> can</c>

00:18:44.200 --> 00:18:44.210 align:start position:0%
incur the cost of creating it and we can
 

00:18:44.210 --> 00:18:45.700 align:start position:0%
incur the cost of creating it and we can
see<00:18:44.330><c> here</c><00:18:44.540><c> that</c><00:18:44.630><c> the</c><00:18:44.750><c> performance</c><00:18:45.260><c> here</c><00:18:45.500><c> is</c>

00:18:45.700 --> 00:18:45.710 align:start position:0%
see here that the performance here is
 

00:18:45.710 --> 00:18:48.340 align:start position:0%
see here that the performance here is
that<00:18:46.520><c> it</c><00:18:46.700><c> is</c><00:18:46.820><c> very</c><00:18:47.000><c> significant</c><00:18:47.750><c> when</c><00:18:48.230><c> we</c>

00:18:48.340 --> 00:18:48.350 align:start position:0%
that it is very significant when we
 

00:18:48.350 --> 00:18:50.020 align:start position:0%
that it is very significant when we
actually<00:18:49.040><c> have</c><00:18:49.160><c> to</c><00:18:49.250><c> create</c><00:18:49.430><c> the</c><00:18:49.670><c> string</c><00:18:49.880><c> that</c>

00:18:50.020 --> 00:18:50.030 align:start position:0%
actually have to create the string that
 

00:18:50.030 --> 00:18:51.670 align:start position:0%
actually have to create the string that
we<00:18:50.120><c> don't</c><00:18:50.360><c> need</c><00:18:50.570><c> we</c><00:18:51.020><c> get</c><00:18:51.200><c> very</c><00:18:51.470><c> poor</c>

00:18:51.670 --> 00:18:51.680 align:start position:0%
we don't need we get very poor
 

00:18:51.680 --> 00:18:53.710 align:start position:0%
we don't need we get very poor
performance<00:18:51.830><c> from</c><00:18:52.280><c> that</c><00:18:52.430><c> particular</c><00:18:52.670><c> test</c><00:18:53.120><c> so</c>

00:18:53.710 --> 00:18:53.720 align:start position:0%
performance from that particular test so
 

00:18:53.720 --> 00:18:55.870 align:start position:0%
performance from that particular test so
that<00:18:53.750><c> by</c><00:18:54.140><c> introducing</c><00:18:54.530><c> relating</c><00:18:55.280><c> evaluation</c>

00:18:55.870 --> 00:18:55.880 align:start position:0%
that by introducing relating evaluation
 

00:18:55.880 --> 00:18:57.520 align:start position:0%
that by introducing relating evaluation
using<00:18:56.030><c> lambda</c><00:18:56.420><c> expressions</c><00:18:56.870><c> we</c><00:18:57.020><c> have</c><00:18:57.320><c> got</c>

00:18:57.520 --> 00:18:57.530 align:start position:0%
using lambda expressions we have got
 

00:18:57.530 --> 00:18:59.560 align:start position:0%
using lambda expressions we have got
quite<00:18:57.770><c> a</c><00:18:57.800><c> quick</c><00:18:58.130><c> win</c><00:18:58.400><c> for</c><00:18:58.790><c> performance</c><00:18:59.240><c> in</c><00:18:59.420><c> our</c>

00:18:59.560 --> 00:18:59.570 align:start position:0%
quite a quick win for performance in our
 

00:18:59.570 --> 00:19:06.160 align:start position:0%
quite a quick win for performance in our
code<00:19:04.180><c> so</c><00:19:05.180><c> this</c><00:19:05.300><c> is</c><00:19:05.420><c> a</c><00:19:05.450><c> good</c><00:19:05.660><c> thing</c><00:19:05.690><c> to</c><00:19:05.900><c> do</c><00:19:06.020><c> we</c>

00:19:06.160 --> 00:19:06.170 align:start position:0%
code so this is a good thing to do we
 

00:19:06.170 --> 00:19:07.510 align:start position:0%
code so this is a good thing to do we
should<00:19:06.230><c> definitely</c><00:19:06.470><c> try</c><00:19:06.740><c> and</c><00:19:07.010><c> think</c><00:19:07.310><c> about</c>

00:19:07.510 --> 00:19:07.520 align:start position:0%
should definitely try and think about
 

00:19:07.520 --> 00:19:09.160 align:start position:0%
should definitely try and think about
where<00:19:07.700><c> we</c><00:19:07.820><c> can</c><00:19:07.970><c> use</c><00:19:08.150><c> lambda</c><00:19:08.360><c> expressions</c><00:19:08.930><c> for</c>

00:19:09.160 --> 00:19:09.170 align:start position:0%
where we can use lambda expressions for
 

00:19:09.170 --> 00:19:14.320 align:start position:0%
where we can use lambda expressions for
lazy<00:19:09.560><c> evaluation</c><00:19:12.880><c> that's</c><00:19:13.880><c> kind</c><00:19:14.090><c> of</c><00:19:14.120><c> all</c><00:19:14.300><c> I</c>

00:19:14.320 --> 00:19:14.330 align:start position:0%
lazy evaluation that's kind of all I
 

00:19:14.330 --> 00:19:16.120 align:start position:0%
lazy evaluation that's kind of all I
really<00:19:14.600><c> wanted</c><00:19:14.810><c> to</c><00:19:14.900><c> talk</c><00:19:15.110><c> about</c><00:19:15.170><c> explicitly</c>

00:19:16.120 --> 00:19:16.130 align:start position:0%
really wanted to talk about explicitly
 

00:19:16.130 --> 00:19:18.730 align:start position:0%
really wanted to talk about explicitly
around<00:19:16.520><c> lambda</c><00:19:17.270><c> expressions</c><00:19:17.750><c> I've</c><00:19:18.140><c> got</c><00:19:18.380><c> way</c>

00:19:18.730 --> 00:19:18.740 align:start position:0%
around lambda expressions I've got way
 

00:19:18.740 --> 00:19:20.470 align:start position:0%
around lambda expressions I've got way
more<00:19:18.770><c> to</c><00:19:19.160><c> talk</c><00:19:19.280><c> about</c><00:19:19.520><c> around</c><00:19:19.820><c> collections</c>

00:19:20.470 --> 00:19:20.480 align:start position:0%
more to talk about around collections
 

00:19:20.480 --> 00:19:22.000 align:start position:0%
more to talk about around collections
and<00:19:20.660><c> streams</c><00:19:20.930><c> because</c><00:19:21.290><c> there's</c><00:19:21.470><c> quite</c><00:19:21.740><c> a</c><00:19:21.770><c> lot</c>

00:19:22.000 --> 00:19:22.010 align:start position:0%
and streams because there's quite a lot
 

00:19:22.010 --> 00:19:23.680 align:start position:0%
and streams because there's quite a lot
of<00:19:22.040><c> opportunities</c><00:19:22.670><c> for</c><00:19:22.700><c> refactoring</c><00:19:23.210><c> to</c>

00:19:23.680 --> 00:19:23.690 align:start position:0%
of opportunities for refactoring to
 

00:19:23.690 --> 00:19:26.080 align:start position:0%
of opportunities for refactoring to
using<00:19:24.050><c> the</c><00:19:24.770><c> new</c><00:19:24.950><c> methods</c><00:19:25.310><c> on</c><00:19:25.400><c> collections</c><00:19:25.850><c> and</c>

00:19:26.080 --> 00:19:26.090 align:start position:0%
using the new methods on collections and
 

00:19:26.090 --> 00:19:29.830 align:start position:0%
using the new methods on collections and
the<00:19:26.360><c> streams</c><00:19:26.630><c> API</c><00:19:28.390><c> the</c><00:19:29.390><c> file</c>

00:19:29.830 --> 00:19:29.840 align:start position:0%
the streams API the file
 

00:19:29.840 --> 00:19:31.870 align:start position:0%
the streams API the file
and<00:19:29.929><c> simplest</c><00:19:30.380><c> thing</c><00:19:30.559><c> to</c><00:19:30.590><c> do</c><00:19:30.830><c> is</c><00:19:31.070><c> basically</c>

00:19:31.870 --> 00:19:31.880 align:start position:0%
and simplest thing to do is basically
 

00:19:31.880 --> 00:19:33.580 align:start position:0%
and simplest thing to do is basically
find<00:19:32.150><c> everywhere</c><00:19:32.809><c> where</c><00:19:32.990><c> you</c><00:19:33.020><c> are</c><00:19:33.200><c> using</c><00:19:33.409><c> a</c>

00:19:33.580 --> 00:19:33.590 align:start position:0%
find everywhere where you are using a
 

00:19:33.590 --> 00:19:36.010 align:start position:0%
find everywhere where you are using a
for<00:19:33.830><c> loop</c><00:19:33.980><c> before</c><00:19:34.159><c> and</c><00:19:34.549><c> replace</c><00:19:35.240><c> it</c><00:19:35.480><c> with</c><00:19:35.990><c> a</c>

00:19:36.010 --> 00:19:36.020 align:start position:0%
for loop before and replace it with a
 

00:19:36.020 --> 00:19:38.440 align:start position:0%
for loop before and replace it with a
for<00:19:36.440><c> each</c><00:19:36.620><c> method</c><00:19:37.010><c> now</c><00:19:37.669><c> collections</c>

00:19:38.440 --> 00:19:38.450 align:start position:0%
for each method now collections
 

00:19:38.450 --> 00:19:41.049 align:start position:0%
for each method now collections
themselves<00:19:39.020><c> have</c><00:19:39.200><c> a</c><00:19:39.230><c> for</c><00:19:39.529><c> each</c><00:19:39.740><c> on</c><00:19:40.039><c> and</c><00:19:40.370><c> so</c><00:19:41.000><c> you</c>

00:19:41.049 --> 00:19:41.059 align:start position:0%
themselves have a for each on and so you
 

00:19:41.059 --> 00:19:42.399 align:start position:0%
themselves have a for each on and so you
don't<00:19:41.299><c> necessarily</c><00:19:41.390><c> have</c><00:19:41.929><c> to</c><00:19:42.080><c> use</c><00:19:42.289><c> the</c>

00:19:42.399 --> 00:19:42.409 align:start position:0%
don't necessarily have to use the
 

00:19:42.409 --> 00:19:44.470 align:start position:0%
don't necessarily have to use the
streams<00:19:42.710><c> API</c><00:19:42.950><c> so</c><00:19:43.429><c> sometimes</c><00:19:43.760><c> it's</c><00:19:43.940><c> dot</c><00:19:44.120><c> stream</c>

00:19:44.470 --> 00:19:44.480 align:start position:0%
streams API so sometimes it's dot stream
 

00:19:44.480 --> 00:19:46.180 align:start position:0%
streams API so sometimes it's dot stream
dot<00:19:44.750><c> for</c><00:19:44.960><c> each</c><00:19:45.110><c> and</c><00:19:45.470><c> sometimes</c><00:19:45.830><c> it</c><00:19:46.010><c> will</c><00:19:46.100><c> be</c>

00:19:46.180 --> 00:19:46.190 align:start position:0%
dot for each and sometimes it will be
 

00:19:46.190 --> 00:19:48.580 align:start position:0%
dot for each and sometimes it will be
simply<00:19:46.730><c> a</c><00:19:46.760><c> dot</c><00:19:47.150><c> for</c><00:19:47.419><c> each</c><00:19:47.600><c> on</c><00:19:47.900><c> your</c><00:19:48.140><c> collection</c>

00:19:48.580 --> 00:19:48.590 align:start position:0%
simply a dot for each on your collection
 

00:19:48.590 --> 00:19:50.140 align:start position:0%
simply a dot for each on your collection
and<00:19:48.919><c> we'll</c><00:19:49.190><c> see</c><00:19:49.309><c> different</c><00:19:49.610><c> examples</c><00:19:49.640><c> of</c>

00:19:50.140 --> 00:19:50.150 align:start position:0%
and we'll see different examples of
 

00:19:50.150 --> 00:19:59.560 align:start position:0%
and we'll see different examples of
these<00:19:53.559><c> let's</c><00:19:54.559><c> go</c><00:19:54.740><c> back</c><00:19:54.919><c> to</c><00:19:55.070><c> our</c><00:19:55.130><c> code</c><00:19:58.570><c> here</c>

00:19:59.560 --> 00:19:59.570 align:start position:0%
these let's go back to our code here
 

00:19:59.570 --> 00:20:03.539 align:start position:0%
these let's go back to our code here
what<00:19:59.750><c> we've</c><00:19:59.900><c> got</c><00:20:00.110><c> is</c><00:20:00.350><c> we're</c><00:20:00.860><c> looking</c><00:20:01.039><c> for</c>

00:20:03.539 --> 00:20:03.549 align:start position:0%
what we've got is we're looking for
 

00:20:03.549 --> 00:20:05.799 align:start position:0%
what we've got is we're looking for
loops<00:20:04.549><c> can</c><00:20:04.760><c> be</c><00:20:04.820><c> collapsed</c><00:20:05.299><c> with</c><00:20:05.450><c> the</c><00:20:05.480><c> stream</c>

00:20:05.799 --> 00:20:05.809 align:start position:0%
loops can be collapsed with the stream
 

00:20:05.809 --> 00:20:12.840 align:start position:0%
loops can be collapsed with the stream
API<00:20:06.820><c> if</c><00:20:07.840><c> we</c><00:20:08.840><c> look</c><00:20:09.049><c> at</c><00:20:09.230><c> our</c><00:20:09.409><c> first</c><00:20:09.799><c> example</c><00:20:10.190><c> here</c>

00:20:12.840 --> 00:20:12.850 align:start position:0%
 
 

00:20:12.850 --> 00:20:15.639 align:start position:0%
 
it<00:20:13.850><c> says</c><00:20:13.880><c> this</c><00:20:14.419><c> can</c><00:20:14.720><c> be</c><00:20:14.809><c> collapsed</c><00:20:15.049><c> with</c><00:20:15.350><c> a</c><00:20:15.380><c> for</c>

00:20:15.639 --> 00:20:15.649 align:start position:0%
it says this can be collapsed with a for
 

00:20:15.649 --> 00:20:18.360 align:start position:0%
it says this can be collapsed with a for
each<00:20:16.240><c> so</c><00:20:17.240><c> if</c><00:20:17.360><c> I</c><00:20:17.480><c> do</c><00:20:17.539><c> this</c>

00:20:18.360 --> 00:20:18.370 align:start position:0%
each so if I do this
 

00:20:18.370 --> 00:20:22.029 align:start position:0%
each so if I do this
enter<00:20:19.370><c> replace</c><00:20:19.760><c> it</c><00:20:19.940><c> with</c><00:20:20.029><c> a</c><00:20:20.059><c> for</c><00:20:20.299><c> each</c><00:20:21.039><c> then</c>

00:20:22.029 --> 00:20:22.039 align:start position:0%
enter replace it with a for each then
 

00:20:22.039 --> 00:20:25.870 align:start position:0%
enter replace it with a for each then
I've<00:20:22.490><c> quite</c><00:20:23.000><c> simply</c><00:20:24.370><c> removed</c><00:20:25.370><c> my</c><00:20:25.580><c> for</c><00:20:25.850><c> loop</c>

00:20:25.870 --> 00:20:25.880 align:start position:0%
I've quite simply removed my for loop
 

00:20:25.880 --> 00:20:27.970 align:start position:0%
I've quite simply removed my for loop
entirely<00:20:26.419><c> and</c><00:20:26.750><c> just</c><00:20:27.020><c> replaced</c><00:20:27.380><c> it</c><00:20:27.559><c> with</c><00:20:27.620><c> a</c><00:20:27.740><c> for</c>

00:20:27.970 --> 00:20:27.980 align:start position:0%
entirely and just replaced it with a for
 

00:20:27.980 --> 00:20:30.730 align:start position:0%
entirely and just replaced it with a for
each<00:20:28.159><c> with</c><00:20:28.700><c> the</c><00:20:29.029><c> name</c><00:20:29.809><c> of</c><00:20:29.960><c> the</c><00:20:30.049><c> method</c><00:20:30.289><c> I</c><00:20:30.559><c> want</c>

00:20:30.730 --> 00:20:30.740 align:start position:0%
each with the name of the method I want
 

00:20:30.740 --> 00:20:34.720 align:start position:0%
each with the name of the method I want
to<00:20:30.890><c> call</c><00:20:31.130><c> for</c><00:20:32.000><c> every</c><00:20:32.270><c> entity</c><00:20:32.990><c> in</c><00:20:33.350><c> that</c><00:20:33.649><c> set</c><00:20:33.950><c> now</c>

00:20:34.720 --> 00:20:34.730 align:start position:0%
to call for every entity in that set now
 

00:20:34.730 --> 00:20:36.340 align:start position:0%
to call for every entity in that set now
I<00:20:34.760><c> can</c><00:20:35.000><c> go</c><00:20:35.120><c> one</c><00:20:35.270><c> step</c><00:20:35.330><c> further</c><00:20:35.659><c> now</c><00:20:35.929><c> because</c><00:20:36.230><c> I</c>

00:20:36.340 --> 00:20:36.350 align:start position:0%
I can go one step further now because I
 

00:20:36.350 --> 00:20:38.649 align:start position:0%
I can go one step further now because I
realize<00:20:36.710><c> that</c><00:20:36.890><c> this</c><00:20:36.980><c> entity's</c><00:20:37.580><c> variable</c><00:20:38.539><c> is</c>

00:20:38.649 --> 00:20:38.659 align:start position:0%
realize that this entity's variable is
 

00:20:38.659 --> 00:20:40.419 align:start position:0%
realize that this entity's variable is
only<00:20:39.110><c> used</c><00:20:39.440><c> here</c><00:20:39.620><c> so</c><00:20:39.649><c> I'm</c><00:20:39.890><c> going</c><00:20:40.039><c> to</c><00:20:40.100><c> inline</c>

00:20:40.419 --> 00:20:40.429 align:start position:0%
only used here so I'm going to inline
 

00:20:40.429 --> 00:20:44.590 align:start position:0%
only used here so I'm going to inline
this<00:20:40.700><c> and</c><00:20:42.010><c> then</c><00:20:43.010><c> once</c><00:20:43.279><c> again</c><00:20:43.429><c> this</c><00:20:43.970><c> our</c>

00:20:44.590 --> 00:20:44.600 align:start position:0%
this and then once again this our
 

00:20:44.600 --> 00:20:46.180 align:start position:0%
this and then once again this our
variable<00:20:45.289><c> is</c><00:20:45.380><c> going</c><00:20:45.470><c> to</c><00:20:45.590><c> used</c><00:20:45.770><c> here</c><00:20:45.980><c> so</c><00:20:46.010><c> I'm</c>

00:20:46.180 --> 00:20:46.190 align:start position:0%
variable is going to used here so I'm
 

00:20:46.190 --> 00:20:47.470 align:start position:0%
variable is going to used here so I'm
going<00:20:46.370><c> to</c><00:20:46.399><c> inline</c><00:20:46.730><c> that</c><00:20:46.940><c> as</c><00:20:47.059><c> well</c>

00:20:47.470 --> 00:20:47.480 align:start position:0%
going to inline that as well
 

00:20:47.480 --> 00:20:50.560 align:start position:0%
going to inline that as well
so<00:20:48.409><c> I've</c><00:20:48.559><c> actually</c><00:20:48.679><c> just</c><00:20:49.070><c> removed</c><00:20:49.460><c> a</c><00:20:49.940><c> lot</c><00:20:50.450><c> of</c>

00:20:50.560 --> 00:20:50.570 align:start position:0%
so I've actually just removed a lot of
 

00:20:50.570 --> 00:20:52.360 align:start position:0%
so I've actually just removed a lot of
boilerplate<00:20:50.779><c> there</c><00:20:51.260><c> and</c><00:20:51.500><c> all</c><00:20:52.039><c> I'm</c><00:20:52.220><c> really</c>

00:20:52.360 --> 00:20:52.370 align:start position:0%
boilerplate there and all I'm really
 

00:20:52.370 --> 00:20:55.539 align:start position:0%
boilerplate there and all I'm really
doing<00:20:52.520><c> is</c><00:20:53.029><c> infer</c><00:20:53.779><c> this</c><00:20:53.960><c> for</c><00:20:54.260><c> loop</c><00:20:54.409><c> I</c><00:20:54.740><c> use</c><00:20:55.279><c> a</c><00:20:55.309><c> for</c>

00:20:55.539 --> 00:20:55.549 align:start position:0%
doing is infer this for loop I use a for
 

00:20:55.549 --> 00:20:58.180 align:start position:0%
doing is infer this for loop I use a for
each<00:20:55.760><c> and</c><00:20:56.149><c> I'm</c><00:20:56.360><c> going</c><00:20:56.510><c> to</c><00:20:56.539><c> call</c><00:20:56.779><c> this</c><00:20:57.110><c> this</c><00:20:57.830><c> map</c>

00:20:58.180 --> 00:20:58.190 align:start position:0%
each and I'm going to call this this map
 

00:20:58.190 --> 00:21:02.380 align:start position:0%
each and I'm going to call this this map
method<00:20:58.610><c> here</c><00:21:00.039><c> so</c><00:21:01.039><c> it's</c><00:21:01.159><c> quite</c><00:21:01.490><c> quite</c><00:21:02.029><c> simple</c>

00:21:02.380 --> 00:21:02.390 align:start position:0%
method here so it's quite quite simple
 

00:21:02.390 --> 00:21:03.970 align:start position:0%
method here so it's quite quite simple
example<00:21:02.809><c> let's</c><00:21:03.289><c> take</c><00:21:03.470><c> a</c><00:21:03.529><c> look</c><00:21:03.679><c> at</c><00:21:03.799><c> a</c><00:21:03.830><c> slightly</c>

00:21:03.970 --> 00:21:03.980 align:start position:0%
example let's take a look at a slightly
 

00:21:03.980 --> 00:21:10.330 align:start position:0%
example let's take a look at a slightly
more<00:21:04.220><c> complicated</c><00:21:04.549><c> example</c><00:21:09.070><c> here</c><00:21:10.070><c> we</c><00:21:10.190><c> have</c><00:21:10.220><c> a</c>

00:21:10.330 --> 00:21:10.340 align:start position:0%
more complicated example here we have a
 

00:21:10.340 --> 00:21:12.070 align:start position:0%
more complicated example here we have a
for<00:21:10.640><c> loop</c><00:21:10.789><c> followed</c><00:21:11.360><c> by</c><00:21:11.450><c> a</c><00:21:11.480><c> for</c><00:21:11.690><c> loop</c><00:21:11.840><c> followed</c>

00:21:12.070 --> 00:21:12.080 align:start position:0%
for loop followed by a for loop followed
 

00:21:12.080 --> 00:21:14.680 align:start position:0%
for loop followed by a for loop followed
by<00:21:12.350><c> an</c><00:21:12.409><c> if</c><00:21:12.590><c> statement</c><00:21:12.799><c> and</c><00:21:13.330><c> inside</c><00:21:14.330><c> this</c><00:21:14.480><c> if</c>

00:21:14.680 --> 00:21:14.690 align:start position:0%
by an if statement and inside this if
 

00:21:14.690 --> 00:21:16.480 align:start position:0%
by an if statement and inside this if
statement<00:21:14.809><c> we're</c><00:21:15.200><c> going</c><00:21:15.380><c> to</c><00:21:15.500><c> add</c><00:21:15.649><c> things</c><00:21:16.070><c> to</c>

00:21:16.480 --> 00:21:16.490 align:start position:0%
statement we're going to add things to
 

00:21:16.490 --> 00:21:20.350 align:start position:0%
statement we're going to add things to
another<00:21:17.149><c> collection</c><00:21:18.880><c> so</c><00:21:19.880><c> let's</c><00:21:20.090><c> see</c><00:21:20.210><c> what</c>

00:21:20.350 --> 00:21:20.360 align:start position:0%
another collection so let's see what
 

00:21:20.360 --> 00:21:23.370 align:start position:0%
another collection so let's see what
IntelliJ<00:21:20.750><c> suggests</c><00:21:21.760><c> we</c><00:21:22.760><c> can</c><00:21:22.940><c> replace</c>

00:21:23.370 --> 00:21:23.380 align:start position:0%
IntelliJ suggests we can replace
 

00:21:23.380 --> 00:21:26.880 align:start position:0%
IntelliJ suggests we can replace
with<00:21:23.860><c> this</c><00:21:24.040><c> with</c><00:21:24.250><c> a</c><00:21:24.280><c> foot</c><00:21:24.520><c> each</c><00:21:25.710><c> now</c><00:21:26.710><c> let's</c>

00:21:26.880 --> 00:21:26.890 align:start position:0%
with this with a foot each now let's
 

00:21:26.890 --> 00:21:30.960 align:start position:0%
with this with a foot each now let's
dissect<00:21:27.040><c> this</c><00:21:27.430><c> a</c><00:21:27.520><c> little</c><00:21:27.670><c> bit</c><00:21:28.590><c> our</c><00:21:29.590><c> faller</c><00:21:30.520><c> has</c>

00:21:30.960 --> 00:21:30.970 align:start position:0%
dissect this a little bit our faller has
 

00:21:30.970 --> 00:21:33.930 align:start position:0%
dissect this a little bit our faller has
been<00:21:31.120><c> replaced</c><00:21:31.300><c> with</c><00:21:31.480><c> a</c><00:21:31.600><c> foot</c><00:21:31.780><c> each</c><00:21:32.010><c> if</c><00:21:33.010><c> has</c>

00:21:33.930 --> 00:21:33.940 align:start position:0%
been replaced with a foot each if has
 

00:21:33.940 --> 00:21:36.870 align:start position:0%
been replaced with a foot each if has
found<00:21:34.180><c> its</c><00:21:34.360><c> way</c><00:21:34.480><c> into</c><00:21:34.810><c> the</c><00:21:35.050><c> filter</c><00:21:35.580><c> we</c><00:21:36.580><c> are</c>

00:21:36.870 --> 00:21:36.880 align:start position:0%
found its way into the filter we are
 

00:21:36.880 --> 00:21:39.540 align:start position:0%
found its way into the filter we are
calling<00:21:37.240><c> this</c><00:21:37.510><c> on</c><00:21:37.690><c> a</c><00:21:37.720><c> stream</c><00:21:38.050><c> and</c><00:21:38.550><c> we're</c>

00:21:39.540 --> 00:21:39.550 align:start position:0%
calling this on a stream and we're
 

00:21:39.550 --> 00:21:42.930 align:start position:0%
calling this on a stream and we're
actually<00:21:39.640><c> using</c><00:21:39.790><c> map</c><00:21:40.360><c> to</c><00:21:41.200><c> create</c><00:21:42.160><c> this</c><00:21:42.550><c> new</c>

00:21:42.930 --> 00:21:42.940 align:start position:0%
actually using map to create this new
 

00:21:42.940 --> 00:21:45.540 align:start position:0%
actually using map to create this new
constraint<00:21:43.690><c> violation</c><00:21:44.200><c> thing</c><00:21:44.560><c> which</c><00:21:45.280><c> is</c><00:21:45.430><c> the</c>

00:21:45.540 --> 00:21:45.550 align:start position:0%
constraint violation thing which is the
 

00:21:45.550 --> 00:21:47.520 align:start position:0%
constraint violation thing which is the
thing<00:21:45.700><c> that</c><00:21:45.730><c> needs</c><00:21:45.940><c> to</c><00:21:46.060><c> get</c><00:21:46.210><c> added</c><00:21:46.570><c> into</c><00:21:47.140><c> our</c>

00:21:47.520 --> 00:21:47.530 align:start position:0%
thing that needs to get added into our
 

00:21:47.530 --> 00:21:52.500 align:start position:0%
thing that needs to get added into our
set<00:21:48.900><c> so</c><00:21:49.900><c> if</c><00:21:50.080><c> we've</c><00:21:50.380><c> collapsed</c><00:21:50.860><c> is</c><00:21:51.040><c> for</c><00:21:51.460><c> and</c><00:21:51.790><c> if</c>

00:21:52.500 --> 00:21:52.510 align:start position:0%
set so if we've collapsed is for and if
 

00:21:52.510 --> 00:21:56.520 align:start position:0%
set so if we've collapsed is for and if
into<00:21:53.170><c> a</c><00:21:53.200><c> filter</c><00:21:53.920><c> map</c><00:21:54.490><c> and</c><00:21:54.760><c> for</c><00:21:55.210><c> each</c><00:21:55.360><c> call</c><00:21:55.720><c> now</c>

00:21:56.520 --> 00:21:56.530 align:start position:0%
into a filter map and for each call now
 

00:21:56.530 --> 00:21:57.960 align:start position:0%
into a filter map and for each call now
I'd<00:21:56.680><c> be</c><00:21:56.860><c> tempted</c><00:21:57.040><c> to</c><00:21:57.220><c> simplify</c><00:21:57.700><c> this</c><00:21:57.760><c> a</c><00:21:57.910><c> little</c>

00:21:57.960 --> 00:21:57.970 align:start position:0%
I'd be tempted to simplify this a little
 

00:21:57.970 --> 00:22:01.140 align:start position:0%
I'd be tempted to simplify this a little
bit<00:21:58.210><c> more</c><00:21:58.390><c> just</c><00:21:58.690><c> for</c><00:21:58.840><c> readability</c><00:21:59.080><c> I</c><00:22:00.150><c> might</c>

00:22:01.140 --> 00:22:01.150 align:start position:0%
bit more just for readability I might
 

00:22:01.150 --> 00:22:07.050 align:start position:0%
bit more just for readability I might
call<00:22:01.360><c> as</c><00:22:02.310><c> create</c><00:22:03.310><c> violations</c><00:22:05.880><c> but</c><00:22:06.880><c> that's</c>

00:22:07.050 --> 00:22:07.060 align:start position:0%
call as create violations but that's
 

00:22:07.060 --> 00:22:09.540 align:start position:0%
call as create violations but that's
totally<00:22:07.270><c> up</c><00:22:07.510><c> to</c><00:22:07.540><c> you</c><00:22:07.750><c> really</c><00:22:08.430><c> so</c><00:22:09.430><c> we've</c>

00:22:09.540 --> 00:22:09.550 align:start position:0%
totally up to you really so we've
 

00:22:09.550 --> 00:22:10.830 align:start position:0%
totally up to you really so we've
managed<00:22:09.790><c> to</c><00:22:09.820><c> simplify</c><00:22:10.210><c> that</c><00:22:10.330><c> code</c><00:22:10.540><c> a</c><00:22:10.570><c> little</c>

00:22:10.830 --> 00:22:10.840 align:start position:0%
managed to simplify that code a little
 

00:22:10.840 --> 00:22:12.690 align:start position:0%
managed to simplify that code a little
bit<00:22:11.020><c> but</c><00:22:11.620><c> we</c><00:22:11.710><c> still</c><00:22:11.890><c> have</c><00:22:12.070><c> this</c><00:22:12.220><c> outer</c><00:22:12.430><c> loop</c>

00:22:12.690 --> 00:22:12.700 align:start position:0%
bit but we still have this outer loop
 

00:22:12.700 --> 00:22:15.390 align:start position:0%
bit but we still have this outer loop
here<00:22:12.970><c> so</c><00:22:13.120><c> for</c><00:22:13.840><c> me</c><00:22:13.990><c> I</c><00:22:14.200><c> would</c><00:22:14.320><c> look</c><00:22:14.950><c> at</c><00:22:15.100><c> this</c><00:22:15.220><c> and</c>

00:22:15.390 --> 00:22:15.400 align:start position:0%
here so for me I would look at this and
 

00:22:15.400 --> 00:22:16.350 align:start position:0%
here so for me I would look at this and
think<00:22:15.550><c> well</c><00:22:15.730><c> maybe</c><00:22:15.760><c> there's</c><00:22:16.300><c> something</c>

00:22:16.350 --> 00:22:16.360 align:start position:0%
think well maybe there's something
 

00:22:16.360 --> 00:22:18.330 align:start position:0%
think well maybe there's something
around<00:22:17.170><c> the</c><00:22:17.380><c> design</c><00:22:17.680><c> which</c><00:22:17.890><c> isn't</c><00:22:18.100><c> great</c>

00:22:18.330 --> 00:22:18.340 align:start position:0%
around the design which isn't great
 

00:22:18.340 --> 00:22:20.010 align:start position:0%
around the design which isn't great
because<00:22:18.730><c> what</c><00:22:18.850><c> we're</c><00:22:18.970><c> doing</c><00:22:19.000><c> here</c><00:22:19.390><c> is</c><00:22:19.570><c> we're</c>

00:22:20.010 --> 00:22:20.020 align:start position:0%
because what we're doing here is we're
 

00:22:20.020 --> 00:22:22.560 align:start position:0%
because what we're doing here is we're
passing<00:22:20.410><c> in</c><00:22:20.620><c> another</c><00:22:21.160><c> collection</c><00:22:21.580><c> and</c><00:22:22.000><c> then</c>

00:22:22.560 --> 00:22:22.570 align:start position:0%
passing in another collection and then
 

00:22:22.570 --> 00:22:24.420 align:start position:0%
passing in another collection and then
doing<00:22:23.110><c> some</c><00:22:23.260><c> iterations</c><00:22:23.920><c> multiple</c>

00:22:24.420 --> 00:22:24.430 align:start position:0%
doing some iterations multiple
 

00:22:24.430 --> 00:22:26.130 align:start position:0%
doing some iterations multiple
iterations<00:22:24.640><c> because</c><00:22:25.120><c> we're</c><00:22:25.240><c> iterating</c><00:22:25.450><c> here</c>

00:22:26.130 --> 00:22:26.140 align:start position:0%
iterations because we're iterating here
 

00:22:26.140 --> 00:22:28.350 align:start position:0%
iterations because we're iterating here
this<00:22:26.680><c> is</c><00:22:26.800><c> effectively</c><00:22:27.220><c> an</c><00:22:27.340><c> iteration</c><00:22:27.730><c> and</c>

00:22:28.350 --> 00:22:28.360 align:start position:0%
this is effectively an iteration and
 

00:22:28.360 --> 00:22:29.520 align:start position:0%
this is effectively an iteration and
then<00:22:28.480><c> we're</c><00:22:28.600><c> adding</c><00:22:28.750><c> stuff</c><00:22:29.110><c> into</c><00:22:29.320><c> another</c>

00:22:29.520 --> 00:22:29.530 align:start position:0%
then we're adding stuff into another
 

00:22:29.530 --> 00:22:31.230 align:start position:0%
then we're adding stuff into another
collection<00:22:29.860><c> so</c><00:22:30.280><c> I</c><00:22:30.310><c> would</c><00:22:30.700><c> look</c><00:22:30.820><c> at</c><00:22:30.970><c> this</c><00:22:31.060><c> and</c>

00:22:31.230 --> 00:22:31.240 align:start position:0%
collection so I would look at this and
 

00:22:31.240 --> 00:22:32.760 align:start position:0%
collection so I would look at this and
I'll<00:22:31.300><c> be</c><00:22:31.450><c> thinking</c><00:22:31.780><c> well</c><00:22:32.290><c> perhaps</c><00:22:32.470><c> nice</c>

00:22:32.760 --> 00:22:32.770 align:start position:0%
I'll be thinking well perhaps nice
 

00:22:32.770 --> 00:22:35.040 align:start position:0%
I'll be thinking well perhaps nice
refactoring<00:22:33.310><c> needs</c><00:22:33.520><c> to</c><00:22:33.670><c> take</c><00:22:34.030><c> a</c><00:22:34.060><c> step</c><00:22:34.420><c> up</c><00:22:34.630><c> take</c>

00:22:35.040 --> 00:22:35.050 align:start position:0%
refactoring needs to take a step up take
 

00:22:35.050 --> 00:22:37.620 align:start position:0%
refactoring needs to take a step up take
a<00:22:35.080><c> step</c><00:22:35.380><c> back</c><00:22:35.620><c> from</c><00:22:35.830><c> this</c><00:22:36.100><c> and</c><00:22:36.370><c> look</c><00:22:37.090><c> at</c><00:22:37.120><c> the</c>

00:22:37.620 --> 00:22:37.630 align:start position:0%
a step back from this and look at the
 

00:22:37.630 --> 00:22:39.060 align:start position:0%
a step back from this and look at the
methods<00:22:37.960><c> which</c><00:22:38.080><c> are</c><00:22:38.140><c> calling</c><00:22:38.500><c> this</c><00:22:38.590><c> method</c><00:22:38.770><c> to</c>

00:22:39.060 --> 00:22:39.070 align:start position:0%
methods which are calling this method to
 

00:22:39.070 --> 00:22:41.010 align:start position:0%
methods which are calling this method to
see<00:22:39.220><c> if</c><00:22:39.310><c> things</c><00:22:39.550><c> can</c><00:22:39.760><c> be</c><00:22:39.820><c> restructured</c><00:22:40.240><c> to</c><00:22:40.930><c> be</c>

00:22:41.010 --> 00:22:41.020 align:start position:0%
see if things can be restructured to be
 

00:22:41.020 --> 00:22:42.360 align:start position:0%
see if things can be restructured to be
able<00:22:41.110><c> to</c><00:22:41.200><c> do</c><00:22:41.350><c> this</c><00:22:41.500><c> in</c><00:22:41.650><c> a</c><00:22:41.710><c> single</c><00:22:42.070><c> stream</c>

00:22:42.360 --> 00:22:42.370 align:start position:0%
able to do this in a single stream
 

00:22:42.370 --> 00:22:44.880 align:start position:0%
able to do this in a single stream
operation<00:22:43.260><c> let's</c><00:22:44.260><c> look</c><00:22:44.410><c> at</c><00:22:44.530><c> another</c><00:22:44.710><c> example</c>

00:22:44.880 --> 00:22:44.890 align:start position:0%
operation let's look at another example
 

00:22:44.890 --> 00:22:51.690 align:start position:0%
operation let's look at another example
here<00:22:49.350><c> we</c><00:22:50.350><c> have</c><00:22:50.380><c> an</c><00:22:50.650><c> if</c><00:22:50.800><c> statement</c><00:22:51.010><c> our</c><00:22:51.400><c> for</c>

00:22:51.690 --> 00:22:51.700 align:start position:0%
here we have an if statement our for
 

00:22:51.700 --> 00:22:53.880 align:start position:0%
here we have an if statement our for
loop<00:22:51.730><c> another</c><00:22:52.480><c> if</c><00:22:52.630><c> statement</c><00:22:52.660><c> for</c><00:22:53.200><c> loop</c><00:22:53.650><c> and</c>

00:22:53.880 --> 00:22:53.890 align:start position:0%
loop another if statement for loop and
 

00:22:53.890 --> 00:22:56.100 align:start position:0%
loop another if statement for loop and
then<00:22:54.250><c> an</c><00:22:54.340><c> if</c><00:22:54.550><c> and</c><00:22:54.730><c> an</c><00:22:54.940><c> else</c><00:22:55.150><c> this</c><00:22:55.780><c> is</c><00:22:55.900><c> quite</c><00:22:56.080><c> a</c>

00:22:56.100 --> 00:22:56.110 align:start position:0%
then an if and an else this is quite a
 

00:22:56.110 --> 00:22:58.560 align:start position:0%
then an if and an else this is quite a
complex<00:22:56.530><c> piece</c><00:22:56.800><c> of</c><00:22:56.860><c> logic</c><00:22:57.180><c> now</c><00:22:58.180><c> because</c><00:22:58.450><c> we</c>

00:22:58.560 --> 00:22:58.570 align:start position:0%
complex piece of logic now because we
 

00:22:58.570 --> 00:23:00.330 align:start position:0%
complex piece of logic now because we
have<00:22:58.660><c> an</c><00:22:58.750><c> if</c><00:22:58.930><c> and</c><00:22:59.140><c> an</c><00:22:59.290><c> else</c><00:22:59.470><c> we</c><00:22:59.650><c> have</c><00:22:59.740><c> two</c><00:22:59.980><c> code</c>

00:23:00.330 --> 00:23:00.340 align:start position:0%
have an if and an else we have two code
 

00:23:00.340 --> 00:23:02.040 align:start position:0%
have an if and an else we have two code
paths<00:23:00.610><c> set</c><00:23:00.910><c> so</c><00:23:01.120><c> we</c><00:23:01.240><c> know</c><00:23:01.420><c> that</c><00:23:01.450><c> this</c><00:23:01.750><c> can't</c><00:23:02.020><c> be</c>

00:23:02.040 --> 00:23:02.050 align:start position:0%
paths set so we know that this can't be
 

00:23:02.050 --> 00:23:03.690 align:start position:0%
paths set so we know that this can't be
collapsed<00:23:02.530><c> down</c><00:23:02.710><c> into</c><00:23:03.010><c> a</c><00:23:03.070><c> single</c><00:23:03.460><c> stream</c>

00:23:03.690 --> 00:23:03.700 align:start position:0%
collapsed down into a single stream
 

00:23:03.700 --> 00:23:07.110 align:start position:0%
collapsed down into a single stream
operation<00:23:04.240><c> inside</c><00:23:04.870><c> here</c><00:23:05.670><c> but</c><00:23:06.670><c> we'll</c><00:23:06.850><c> see</c><00:23:07.000><c> what</c>

00:23:07.110 --> 00:23:07.120 align:start position:0%
operation inside here but we'll see what
 

00:23:07.120 --> 00:23:15.570 align:start position:0%
operation inside here but we'll see what
we<00:23:07.210><c> can</c><00:23:07.360><c> do</c><00:23:07.570><c> here</c><00:23:12.480><c> now</c><00:23:13.480><c> IntelliJ</c><00:23:13.960><c> has</c><00:23:14.520><c> taken</c><00:23:15.520><c> a</c>

00:23:15.570 --> 00:23:15.580 align:start position:0%
we can do here now IntelliJ has taken a
 

00:23:15.580 --> 00:23:16.300 align:start position:0%
we can do here now IntelliJ has taken a
look<00:23:15.700><c> at</c>

00:23:16.300 --> 00:23:16.310 align:start position:0%
look at
 

00:23:16.310 --> 00:23:18.070 align:start position:0%
look at
decided<00:23:16.820><c> it</c><00:23:16.910><c> can</c><00:23:17.150><c> do</c><00:23:17.420><c> a</c><00:23:17.690><c> slightly</c><00:23:17.930><c> more</c>

00:23:18.070 --> 00:23:18.080 align:start position:0%
decided it can do a slightly more
 

00:23:18.080 --> 00:23:19.960 align:start position:0%
decided it can do a slightly more
complex<00:23:18.500><c> thing</c><00:23:18.710><c> so</c><00:23:19.220><c> because</c><00:23:19.490><c> we've</c><00:23:19.610><c> got</c><00:23:19.730><c> two</c>

00:23:19.960 --> 00:23:19.970 align:start position:0%
complex thing so because we've got two
 

00:23:19.970 --> 00:23:22.090 align:start position:0%
complex thing so because we've got two
four<00:23:20.330><c> loops</c><00:23:20.570><c> we've</c><00:23:21.260><c> effectively</c><00:23:21.770><c> ended</c><00:23:22.010><c> up</c>

00:23:22.090 --> 00:23:22.100 align:start position:0%
four loops we've effectively ended up
 

00:23:22.100 --> 00:23:24.700 align:start position:0%
four loops we've effectively ended up
with<00:23:22.310><c> a</c><00:23:22.520><c> four</c><00:23:22.820><c> each</c><00:23:23.030><c> and</c><00:23:23.360><c> a</c><00:23:23.720><c> flat</c><00:23:23.930><c> map</c><00:23:24.110><c> and</c><00:23:24.350><c> the</c>

00:23:24.700 --> 00:23:24.710 align:start position:0%
with a four each and a flat map and the
 

00:23:24.710 --> 00:23:26.800 align:start position:0%
with a four each and a flat map and the
flat<00:23:24.890><c> map</c><00:23:25.070><c> is</c><00:23:25.310><c> is</c><00:23:25.610><c> as</c><00:23:26.150><c> a</c><00:23:26.180><c> result</c><00:23:26.540><c> of</c><00:23:26.660><c> that</c>

00:23:26.800 --> 00:23:26.810 align:start position:0%
flat map is is as a result of that
 

00:23:26.810 --> 00:23:30.700 align:start position:0%
flat map is is as a result of that
second<00:23:27.290><c> that</c><00:23:28.190><c> second</c><00:23:28.610><c> fall</c><00:23:28.820><c> is</c><00:23:29.000><c> there</c><00:23:29.240><c> and</c><00:23:29.710><c> the</c>

00:23:30.700 --> 00:23:30.710 align:start position:0%
second that second fall is there and the
 

00:23:30.710 --> 00:23:33.310 align:start position:0%
second that second fall is there and the
if<00:23:30.980><c> statement</c><00:23:31.460><c> has</c><00:23:31.640><c> been</c><00:23:31.960><c> reflected</c><00:23:32.960><c> towards</c>

00:23:33.310 --> 00:23:33.320 align:start position:0%
if statement has been reflected towards
 

00:23:33.320 --> 00:23:35.950 align:start position:0%
if statement has been reflected towards
the<00:23:33.650><c> filter</c><00:23:34.010><c> so</c><00:23:34.550><c> we</c><00:23:35.090><c> actually</c><00:23:35.240><c> have</c><00:23:35.510><c> the</c><00:23:35.780><c> same</c>

00:23:35.950 --> 00:23:35.960 align:start position:0%
the filter so we actually have the same
 

00:23:35.960 --> 00:23:38.910 align:start position:0%
the filter so we actually have the same
functionality<00:23:36.530><c> the</c><00:23:36.950><c> same</c><00:23:37.130><c> features</c><00:23:37.580><c> just</c><00:23:38.360><c> in</c>

00:23:38.910 --> 00:23:38.920 align:start position:0%
functionality the same features just in
 

00:23:38.920 --> 00:23:46.300 align:start position:0%
functionality the same features just in
using<00:23:39.920><c> the</c><00:23:40.010><c> streams</c><00:23:40.280><c> API</c><00:23:44.380><c> so</c><00:23:45.380><c> what's</c>

00:23:46.300 --> 00:23:46.310 align:start position:0%
using the streams API so what's
 

00:23:46.310 --> 00:23:48.160 align:start position:0%
using the streams API so what's
interesting<00:23:46.550><c> here</c><00:23:46.940><c> is</c><00:23:47.000><c> to</c><00:23:47.540><c> performance</c><00:23:47.960><c> test</c>

00:23:48.160 --> 00:23:48.170 align:start position:0%
interesting here is to performance test
 

00:23:48.170 --> 00:23:50.080 align:start position:0%
interesting here is to performance test
the<00:23:48.320><c> difference</c><00:23:48.680><c> between</c><00:23:48.830><c> me</c><00:23:49.310><c> the</c><00:23:49.640><c> classical</c>

00:23:50.080 --> 00:23:50.090 align:start position:0%
the difference between me the classical
 

00:23:50.090 --> 00:23:52.810 align:start position:0%
the difference between me the classical
for<00:23:50.330><c> loop</c><00:23:50.510><c> and</c><00:23:50.750><c> the</c><00:23:51.410><c> new</c><00:23:51.620><c> for</c><00:23:52.070><c> each</c><00:23:52.280><c> whether</c>

00:23:52.810 --> 00:23:52.820 align:start position:0%
for loop and the new for each whether
 

00:23:52.820 --> 00:23:54.550 align:start position:0%
for loop and the new for each whether
you're<00:23:52.940><c> using</c><00:23:53.030><c> streams</c><00:23:53.480><c> or</c><00:23:53.690><c> not</c><00:23:53.870><c> so</c><00:23:54.320><c> this</c><00:23:54.440><c> is</c>

00:23:54.550 --> 00:23:54.560 align:start position:0%
you're using streams or not so this is
 

00:23:54.560 --> 00:23:55.900 align:start position:0%
you're using streams or not so this is
our<00:23:54.650><c> first</c><00:23:54.830><c> example</c><00:23:55.250><c> our</c><00:23:55.550><c> simple</c><00:23:55.850><c> example</c>

00:23:55.900 --> 00:23:55.910 align:start position:0%
our first example our simple example
 

00:23:55.910 --> 00:23:58.960 align:start position:0%
our first example our simple example
where<00:23:56.510><c> we</c><00:23:56.660><c> replaced</c><00:23:57.050><c> this</c><00:23:57.440><c> for</c><00:23:57.890><c> with</c><00:23:58.520><c> a</c><00:23:58.550><c> simple</c>

00:23:58.960 --> 00:23:58.970 align:start position:0%
where we replaced this for with a simple
 

00:23:58.970 --> 00:24:01.480 align:start position:0%
where we replaced this for with a simple
call<00:23:59.120><c> to</c><00:23:59.150><c> forage</c><00:23:59.660><c> and</c><00:24:00.100><c> here</c><00:24:01.100><c> we</c><00:24:01.190><c> find</c><00:24:01.340><c> the</c>

00:24:01.480 --> 00:24:01.490 align:start position:0%
call to forage and here we find the
 

00:24:01.490 --> 00:24:02.920 align:start position:0%
call to forage and here we find the
performance<00:24:01.850><c> is</c><00:24:02.000><c> pretty</c><00:24:02.180><c> much</c><00:24:02.390><c> exactly</c><00:24:02.690><c> the</c>

00:24:02.920 --> 00:24:02.930 align:start position:0%
performance is pretty much exactly the
 

00:24:02.930 --> 00:24:04.690 align:start position:0%
performance is pretty much exactly the
same<00:24:03.020><c> so</c><00:24:03.680><c> we</c><00:24:03.710><c> don't</c><00:24:04.010><c> really</c><00:24:04.160><c> need</c><00:24:04.400><c> to</c><00:24:04.460><c> worry</c>

00:24:04.690 --> 00:24:04.700 align:start position:0%
same so we don't really need to worry
 

00:24:04.700 --> 00:24:06.730 align:start position:0%
same so we don't really need to worry
too<00:24:05.000><c> much</c><00:24:05.030><c> about</c><00:24:05.240><c> whether</c><00:24:06.020><c> we</c><00:24:06.230><c> decide</c><00:24:06.500><c> to</c><00:24:06.620><c> do</c>

00:24:06.730 --> 00:24:06.740 align:start position:0%
too much about whether we decide to do
 

00:24:06.740 --> 00:24:09.910 align:start position:0%
too much about whether we decide to do
this<00:24:06.920><c> or</c><00:24:07.070><c> not</c><00:24:07.810><c> there's</c><00:24:08.810><c> more</c><00:24:08.900><c> complex</c><00:24:09.410><c> example</c>

00:24:09.910 --> 00:24:09.920 align:start position:0%
this or not there's more complex example
 

00:24:09.920 --> 00:24:12.970 align:start position:0%
this or not there's more complex example
which<00:24:10.250><c> uses</c><00:24:10.790><c> the</c><00:24:11.120><c> flat</c><00:24:11.870><c> map</c><00:24:12.080><c> as</c><00:24:12.380><c> well</c><00:24:12.830><c> as</c><00:24:12.950><c> a</c>

00:24:12.970 --> 00:24:12.980 align:start position:0%
which uses the flat map as well as a
 

00:24:12.980 --> 00:24:16.240 align:start position:0%
which uses the flat map as well as a
filter<00:24:13.990><c> again</c><00:24:14.990><c> the</c><00:24:15.380><c> performance</c><00:24:15.650><c> is</c><00:24:15.950><c> kind</c><00:24:16.190><c> of</c>

00:24:16.240 --> 00:24:16.250 align:start position:0%
filter again the performance is kind of
 

00:24:16.250 --> 00:24:17.410 align:start position:0%
filter again the performance is kind of
more<00:24:16.430><c> less</c><00:24:16.550><c> the</c><00:24:16.640><c> same</c><00:24:16.790><c> so</c><00:24:17.000><c> we</c><00:24:17.120><c> can</c><00:24:17.150><c> make</c>

00:24:17.410 --> 00:24:17.420 align:start position:0%
more less the same so we can make
 

00:24:17.420 --> 00:24:19.330 align:start position:0%
more less the same so we can make
decisions<00:24:17.600><c> as</c><00:24:18.050><c> to</c><00:24:18.320><c> whether</c><00:24:18.770><c> we</c><00:24:18.860><c> want</c><00:24:19.130><c> to</c><00:24:19.220><c> do</c>

00:24:19.330 --> 00:24:19.340 align:start position:0%
decisions as to whether we want to do
 

00:24:19.340 --> 00:24:21.100 align:start position:0%
decisions as to whether we want to do
this<00:24:19.460><c> use</c><00:24:19.610><c> fracturing</c><00:24:19.970><c> based</c><00:24:20.510><c> on</c><00:24:20.720><c> performance</c>

00:24:21.100 --> 00:24:21.110 align:start position:0%
this use fracturing based on performance
 

00:24:21.110 --> 00:24:22.420 align:start position:0%
this use fracturing based on performance
we<00:24:21.230><c> could</c><00:24:21.350><c> say</c><00:24:21.470><c> it</c><00:24:21.560><c> doesn't</c><00:24:21.830><c> really</c><00:24:21.980><c> matter</c><00:24:22.190><c> we</c>

00:24:22.420 --> 00:24:22.430 align:start position:0%
we could say it doesn't really matter we
 

00:24:22.430 --> 00:24:23.800 align:start position:0%
we could say it doesn't really matter we
can<00:24:22.580><c> apply</c><00:24:22.790><c> this</c><00:24:22.850><c> refactoring</c><00:24:23.420><c> if</c><00:24:23.510><c> you</c><00:24:23.600><c> want</c>

00:24:23.800 --> 00:24:23.810 align:start position:0%
can apply this refactoring if you want
 

00:24:23.810 --> 00:24:25.840 align:start position:0%
can apply this refactoring if you want
to<00:24:23.990><c> but</c><00:24:24.590><c> we</c><00:24:24.710><c> still</c><00:24:24.920><c> have</c><00:24:25.100><c> to</c><00:24:25.220><c> look</c><00:24:25.400><c> at</c><00:24:25.520><c> this</c><00:24:25.670><c> and</c>

00:24:25.840 --> 00:24:25.850 align:start position:0%
to but we still have to look at this and
 

00:24:25.850 --> 00:24:27.250 align:start position:0%
to but we still have to look at this and
decide<00:24:26.150><c> whether</c><00:24:26.450><c> we</c><00:24:26.660><c> think</c><00:24:26.690><c> this</c><00:24:26.990><c> is</c><00:24:27.110><c> more</c>

00:24:27.250 --> 00:24:27.260 align:start position:0%
decide whether we think this is more
 

00:24:27.260 --> 00:24:28.990 align:start position:0%
decide whether we think this is more
readable<00:24:27.590><c> because</c><00:24:28.160><c> we</c><00:24:28.430><c> do</c><00:24:28.670><c> still</c><00:24:28.970><c> have</c>

00:24:28.990 --> 00:24:29.000 align:start position:0%
readable because we do still have
 

00:24:29.000 --> 00:24:31.360 align:start position:0%
readable because we do still have
another<00:24:29.450><c> if</c><00:24:29.720><c> statement</c><00:24:29.750><c> outside</c><00:24:30.260><c> here</c><00:24:30.830><c> and</c><00:24:31.130><c> we</c>

00:24:31.360 --> 00:24:31.370 align:start position:0%
another if statement outside here and we
 

00:24:31.370 --> 00:24:33.910 align:start position:0%
another if statement outside here and we
do<00:24:31.580><c> have</c><00:24:31.760><c> this</c><00:24:32.030><c> quite</c><00:24:32.540><c> ugly</c><00:24:32.720><c> if-else</c><00:24:33.380><c> inside</c>

00:24:33.910 --> 00:24:33.920 align:start position:0%
do have this quite ugly if-else inside
 

00:24:33.920 --> 00:24:36.490 align:start position:0%
do have this quite ugly if-else inside
here<00:24:34.220><c> so</c><00:24:34.520><c> to</c><00:24:35.060><c> me</c><00:24:35.210><c> there's</c><00:24:35.600><c> room</c><00:24:35.870><c> in</c><00:24:36.170><c> terms</c><00:24:36.350><c> of</c>

00:24:36.490 --> 00:24:36.500 align:start position:0%
here so to me there's room in terms of
 

00:24:36.500 --> 00:24:38.230 align:start position:0%
here so to me there's room in terms of
readability<00:24:36.770><c> there's</c><00:24:37.610><c> room</c><00:24:37.880><c> for</c><00:24:38.060><c> additional</c>

00:24:38.230 --> 00:24:38.240 align:start position:0%
readability there's room for additional
 

00:24:38.240 --> 00:24:40.240 align:start position:0%
readability there's room for additional
refactoring<00:24:39.050><c> there</c><00:24:39.230><c> we</c><00:24:39.320><c> can</c><00:24:39.530><c> expect</c><00:24:39.860><c> the</c><00:24:39.920><c> IDE</c>

00:24:40.240 --> 00:24:40.250 align:start position:0%
refactoring there we can expect the IDE
 

00:24:40.250 --> 00:24:41.980 align:start position:0%
refactoring there we can expect the IDE
should<00:24:40.610><c> just</c><00:24:40.760><c> magically</c><00:24:41.180><c> do</c><00:24:41.360><c> this</c><00:24:41.540><c> for</c><00:24:41.780><c> us</c>

00:24:41.980 --> 00:24:41.990 align:start position:0%
should just magically do this for us
 

00:24:41.990 --> 00:24:47.200 align:start position:0%
should just magically do this for us
and<00:24:42.580><c> a</c><00:24:43.580><c> third</c><00:24:43.760><c> example</c><00:24:44.300><c> where</c><00:24:44.750><c> we</c><00:24:45.970><c> remove</c><00:24:46.970><c> this</c>

00:24:47.200 --> 00:24:47.210 align:start position:0%
and a third example where we remove this
 

00:24:47.210 --> 00:24:49.480 align:start position:0%
and a third example where we remove this
full<00:24:47.480><c> openness</c><00:24:47.870><c> if</c><00:24:48.050><c> statement</c><00:24:48.500><c> into</c><00:24:48.800><c> a</c><00:24:49.100><c> filter</c>

00:24:49.480 --> 00:24:49.490 align:start position:0%
full openness if statement into a filter
 

00:24:49.490 --> 00:24:52.720 align:start position:0%
full openness if statement into a filter
and<00:24:49.760><c> map</c><00:24:50.000><c> the</c><00:24:50.930><c> performance</c><00:24:51.410><c> here</c><00:24:51.650><c> is</c><00:24:51.890><c> quite</c><00:24:52.670><c> a</c>

00:24:52.720 --> 00:24:52.730 align:start position:0%
and map the performance here is quite a
 

00:24:52.730 --> 00:24:55.180 align:start position:0%
and map the performance here is quite a
bit<00:24:52.820><c> worse</c><00:24:53.150><c> on</c><00:24:53.540><c> the</c><00:24:53.750><c> reflected</c><00:24:54.200><c> code</c><00:24:54.470><c> but</c><00:24:54.920><c> it's</c>

00:24:55.180 --> 00:24:55.190 align:start position:0%
bit worse on the reflected code but it's
 

00:24:55.190 --> 00:24:57.640 align:start position:0%
bit worse on the reflected code but it's
not<00:24:55.520><c> happy</c><00:24:56.210><c> it</c><00:24:56.660><c> does</c><00:24:56.870><c> about</c><00:24:57.020><c> half</c><00:24:57.200><c> the</c><00:24:57.410><c> amount</c>

00:24:57.640 --> 00:24:57.650 align:start position:0%
not happy it does about half the amount
 

00:24:57.650 --> 00:25:00.040 align:start position:0%
not happy it does about half the amount
of<00:24:57.830><c> operations</c><00:24:58.700><c> per</c><00:24:58.820><c> millisecond</c><00:24:59.330><c> it's</c><00:24:59.840><c> not</c><00:24:59.960><c> a</c>

00:25:00.040 --> 00:25:00.050 align:start position:0%
of operations per millisecond it's not a
 

00:25:00.050 --> 00:25:02.410 align:start position:0%
of operations per millisecond it's not a
factor<00:25:00.350><c> of</c><00:25:00.440><c> ten</c><00:25:00.650><c> but</c><00:25:01.010><c> it's</c><00:25:01.160><c> a</c><00:25:01.370><c> it's</c><00:25:01.670><c> not</c><00:25:01.850><c> as</c><00:25:02.270><c> not</c>

00:25:02.410 --> 00:25:02.420 align:start position:0%
factor of ten but it's a it's not as not
 

00:25:02.420 --> 00:25:03.850 align:start position:0%
factor of ten but it's a it's not as not
ideal<00:25:02.750><c> there</c><00:25:03.080><c> it's</c><00:25:03.170><c> not</c><00:25:03.260><c> exactly</c><00:25:03.530><c> the</c><00:25:03.680><c> same</c>

00:25:03.850 --> 00:25:03.860 align:start position:0%
ideal there it's not exactly the same
 

00:25:03.860 --> 00:25:06.370 align:start position:0%
ideal there it's not exactly the same
performance<00:25:04.130><c> and</c><00:25:04.690><c> this</c><00:25:05.690><c> might</c><00:25:05.990><c> seem</c><00:25:06.140><c> quite</c>

00:25:06.370 --> 00:25:06.380 align:start position:0%
performance and this might seem quite
 

00:25:06.380 --> 00:25:08.110 align:start position:0%
performance and this might seem quite
puzzling<00:25:06.770><c> because</c><00:25:06.980><c> it's</c><00:25:07.460><c> still</c><00:25:07.730><c> doing</c><00:25:08.030><c> the</c>

00:25:08.110 --> 00:25:08.120 align:start position:0%
puzzling because it's still doing the
 

00:25:08.120 --> 00:25:09.520 align:start position:0%
puzzling because it's still doing the
same<00:25:08.150><c> thing</c><00:25:08.600><c> as</c><00:25:08.810><c> some</c><00:25:08.990><c> of</c><00:25:09.110><c> the</c><00:25:09.230><c> other</c><00:25:09.380><c> examples</c>

00:25:09.520 --> 00:25:09.530 align:start position:0%
same thing as some of the other examples
 

00:25:09.530 --> 00:25:11.410 align:start position:0%
same thing as some of the other examples
in<00:25:10.190><c> fact</c><00:25:10.400><c> arguably</c><00:25:10.760><c> it's</c><00:25:10.940><c> doing</c><00:25:11.180><c> slightly</c>

00:25:11.410 --> 00:25:11.420 align:start position:0%
in fact arguably it's doing slightly
 

00:25:11.420 --> 00:25:13.780 align:start position:0%
in fact arguably it's doing slightly
less<00:25:11.750><c> because</c><00:25:12.590><c> there's</c><00:25:12.860><c> no</c><00:25:12.980><c> flat</c><00:25:13.310><c> map</c><00:25:13.520><c> and</c>

00:25:13.780 --> 00:25:13.790 align:start position:0%
less because there's no flat map and
 

00:25:13.790 --> 00:25:16.270 align:start position:0%
less because there's no flat map and
it's<00:25:13.910><c> not</c><00:25:14.090><c> a</c><00:25:14.240><c> such</c><00:25:14.480><c> complex</c><00:25:15.050><c> example</c><00:25:15.560><c> however</c>

00:25:16.270 --> 00:25:16.280 align:start position:0%
it's not a such complex example however
 

00:25:16.280 --> 00:25:18.130 align:start position:0%
it's not a such complex example however
if<00:25:16.730><c> you</c><00:25:16.880><c> look</c><00:25:17.120><c> at</c><00:25:17.240><c> the</c><00:25:17.330><c> performance</c><00:25:17.780><c> of</c><00:25:17.900><c> these</c>

00:25:18.130 --> 00:25:18.140 align:start position:0%
if you look at the performance of these
 

00:25:18.140 --> 00:25:20.590 align:start position:0%
if you look at the performance of these
this<00:25:19.070><c> one</c><00:25:19.310><c> for</c><00:25:19.490><c> example</c><00:25:19.940><c> we're</c><00:25:20.390><c> getting</c>

00:25:20.590 --> 00:25:20.600 align:start position:0%
this one for example we're getting
 

00:25:20.600 --> 00:25:21.970 align:start position:0%
this one for example we're getting
nought<00:25:20.780><c> point</c><00:25:20.960><c> six</c><00:25:21.320><c> operations</c><00:25:21.830><c> per</c>

00:25:21.970 --> 00:25:21.980 align:start position:0%
nought point six operations per
 

00:25:21.980 --> 00:25:23.410 align:start position:0%
nought point six operations per
millisecond<00:25:22.460><c> which</c><00:25:22.580><c> is</c><00:25:22.700><c> not</c><00:25:22.910><c> very</c><00:25:23.210><c> many</c>

00:25:23.410 --> 00:25:23.420 align:start position:0%
millisecond which is not very many
 

00:25:23.420 --> 00:25:26.320 align:start position:0%
millisecond which is not very many
operations<00:25:24.080><c> so</c><00:25:24.830><c> it</c><00:25:24.950><c> could</c><00:25:25.220><c> be</c><00:25:25.250><c> that</c><00:25:25.790><c> the</c><00:25:26.120><c> thing</c>

00:25:26.320 --> 00:25:26.330 align:start position:0%
operations so it could be that the thing
 

00:25:26.330 --> 00:25:27.910 align:start position:0%
operations so it could be that the thing
was<00:25:26.450><c> happening</c><00:25:26.810><c> for</c><00:25:27.020><c> the</c><00:25:27.170><c> loop</c><00:25:27.380><c> is</c><00:25:27.620><c> quite</c>

00:25:27.910 --> 00:25:27.920 align:start position:0%
was happening for the loop is quite
 

00:25:27.920 --> 00:25:29.400 align:start position:0%
was happening for the loop is quite
expensive<00:25:28.310><c> and</c>

00:25:29.400 --> 00:25:29.410 align:start position:0%
expensive and
 

00:25:29.410 --> 00:25:31.740 align:start position:0%
expensive and
iterating<00:25:30.070><c> over</c><00:25:30.160><c> the</c><00:25:30.370><c> loop</c><00:25:30.550><c> is</c><00:25:30.730><c> not</c><00:25:30.970><c> the</c><00:25:31.570><c> most</c>

00:25:31.740 --> 00:25:31.750 align:start position:0%
iterating over the loop is not the most
 

00:25:31.750 --> 00:25:33.600 align:start position:0%
iterating over the loop is not the most
expensive<00:25:32.170><c> thing</c><00:25:32.500><c> in</c><00:25:32.650><c> this</c><00:25:32.740><c> code</c><00:25:33.010><c> therefore</c>

00:25:33.600 --> 00:25:33.610 align:start position:0%
expensive thing in this code therefore
 

00:25:33.610 --> 00:25:35.820 align:start position:0%
expensive thing in this code therefore
whether<00:25:33.790><c> you</c><00:25:33.940><c> use</c><00:25:34.180><c> a</c><00:25:34.210><c> for</c><00:25:34.630><c> loop</c><00:25:34.810><c> or</c><00:25:35.080><c> a</c><00:25:35.140><c> for</c><00:25:35.470><c> each</c>

00:25:35.820 --> 00:25:35.830 align:start position:0%
whether you use a for loop or a for each
 

00:25:35.830 --> 00:25:37.140 align:start position:0%
whether you use a for loop or a for each
doesn't<00:25:36.340><c> really</c><00:25:36.520><c> impact</c><00:25:36.880><c> your</c><00:25:37.120><c> overall</c>

00:25:37.140 --> 00:25:37.150 align:start position:0%
doesn't really impact your overall
 

00:25:37.150 --> 00:25:39.540 align:start position:0%
doesn't really impact your overall
performance<00:25:37.860><c> whereas</c><00:25:38.860><c> here</c><00:25:39.040><c> you're</c><00:25:39.400><c> getting</c>

00:25:39.540 --> 00:25:39.550 align:start position:0%
performance whereas here you're getting
 

00:25:39.550 --> 00:25:41.520 align:start position:0%
performance whereas here you're getting
nearly<00:25:39.850><c> a</c><00:25:39.940><c> thousand</c><00:25:40.420><c> operations</c><00:25:40.960><c> per</c><00:25:41.140><c> second</c>

00:25:41.520 --> 00:25:41.530 align:start position:0%
nearly a thousand operations per second
 

00:25:41.530 --> 00:25:43.980 align:start position:0%
nearly a thousand operations per second
in<00:25:41.680><c> which</c><00:25:42.160><c> case</c><00:25:42.370><c> it</c><00:25:42.520><c> might</c><00:25:42.670><c> be</c><00:25:42.730><c> that</c><00:25:43.360><c> using</c><00:25:43.780><c> the</c>

00:25:43.980 --> 00:25:43.990 align:start position:0%
in which case it might be that using the
 

00:25:43.990 --> 00:25:46.110 align:start position:0%
in which case it might be that using the
streams<00:25:44.260><c> API</c><00:25:44.590><c> has</c><00:25:44.980><c> added</c><00:25:45.550><c> an</c><00:25:45.730><c> additional</c>

00:25:46.110 --> 00:25:46.120 align:start position:0%
streams API has added an additional
 

00:25:46.120 --> 00:25:49.290 align:start position:0%
streams API has added an additional
overhead<00:25:46.450><c> to</c><00:25:46.900><c> this</c><00:25:47.050><c> to</c><00:25:47.830><c> this</c><00:25:48.150><c> iterating</c><00:25:49.150><c> over</c>

00:25:49.290 --> 00:25:49.300 align:start position:0%
overhead to this to this iterating over
 

00:25:49.300 --> 00:25:55.320 align:start position:0%
overhead to this to this iterating over
these<00:25:49.570><c> in</c><00:25:50.380><c> particular</c><00:25:51.990><c> so</c><00:25:52.990><c> is</c><00:25:53.430><c> it</c><00:25:54.430><c> is</c><00:25:54.940><c> it</c><00:25:55.240><c> a</c>

00:25:55.320 --> 00:25:55.330 align:start position:0%
these in particular so is it is it a
 

00:25:55.330 --> 00:25:57.480 align:start position:0%
these in particular so is it is it a
given<00:25:55.540><c> that</c><00:25:55.750><c> you're</c><00:25:56.110><c> going</c><00:25:56.380><c> to</c><00:25:56.440><c> refactor</c><00:25:57.040><c> any</c>

00:25:57.480 --> 00:25:57.490 align:start position:0%
given that you're going to refactor any
 

00:25:57.490 --> 00:26:00.090 align:start position:0%
given that you're going to refactor any
for<00:25:57.820><c> loop</c><00:25:58.000><c> into</c><00:25:58.360><c> using</c><00:25:58.690><c> a</c><00:25:58.780><c> for</c><00:25:58.960><c> each</c><00:25:59.110><c> well</c><00:25:59.800><c> no</c>

00:26:00.090 --> 00:26:00.100 align:start position:0%
for loop into using a for each well no
 

00:26:00.100 --> 00:26:01.620 align:start position:0%
for loop into using a for each well no
sometimes<00:26:00.760><c> it's</c><00:26:01.090><c> going</c><00:26:01.210><c> to</c><00:26:01.300><c> be</c><00:26:01.360><c> foreign</c>

00:26:01.620 --> 00:26:01.630 align:start position:0%
sometimes it's going to be foreign
 

00:26:01.630 --> 00:26:03.510 align:start position:0%
sometimes it's going to be foreign
performance<00:26:02.050><c> wise</c><00:26:02.200><c> and</c><00:26:02.470><c> sometimes</c><00:26:03.310><c> you're</c>

00:26:03.510 --> 00:26:03.520 align:start position:0%
performance wise and sometimes you're
 

00:26:03.520 --> 00:26:04.950 align:start position:0%
performance wise and sometimes you're
going<00:26:03.640><c> to</c><00:26:03.700><c> have</c><00:26:03.760><c> to</c><00:26:03.940><c> think</c><00:26:04.090><c> about</c><00:26:04.210><c> whether</c><00:26:04.510><c> it</c>

00:26:04.950 --> 00:26:04.960 align:start position:0%
going to have to think about whether it
 

00:26:04.960 --> 00:26:06.120 align:start position:0%
going to have to think about whether it
gives<00:26:05.140><c> you</c><00:26:05.350><c> anything</c><00:26:05.710><c> in</c><00:26:05.830><c> terms</c><00:26:05.980><c> of</c>

00:26:06.120 --> 00:26:06.130 align:start position:0%
gives you anything in terms of
 

00:26:06.130 --> 00:26:11.190 align:start position:0%
gives you anything in terms of
readability<00:26:06.430><c> or</c><00:26:06.970><c> performance</c><00:26:09.960><c> the</c><00:26:10.960><c> next</c>

00:26:11.190 --> 00:26:11.200 align:start position:0%
readability or performance the next
 

00:26:11.200 --> 00:26:13.350 align:start position:0%
readability or performance the next
thing<00:26:11.350><c> that's</c><00:26:11.470><c> quite</c><00:26:12.060><c> straightforward</c><00:26:13.060><c> to</c>

00:26:13.350 --> 00:26:13.360 align:start position:0%
thing that's quite straightforward to
 

00:26:13.360 --> 00:26:15.690 align:start position:0%
thing that's quite straightforward to
refactor<00:26:13.720><c> is</c><00:26:14.080><c> turning</c><00:26:14.560><c> a</c><00:26:14.650><c> for</c><00:26:14.890><c> loop</c><00:26:15.040><c> into</c><00:26:15.670><c> a</c>

00:26:15.690 --> 00:26:15.700 align:start position:0%
refactor is turning a for loop into a
 

00:26:15.700 --> 00:26:22.050 align:start position:0%
refactor is turning a for loop into a
collect<00:26:16.390><c> payment</c><00:26:20.400><c> so</c><00:26:21.400><c> if</c><00:26:21.490><c> we</c><00:26:21.610><c> have</c><00:26:21.760><c> a</c><00:26:21.790><c> look</c><00:26:21.940><c> at</c>

00:26:22.050 --> 00:26:22.060 align:start position:0%
collect payment so if we have a look at
 

00:26:22.060 --> 00:26:26.940 align:start position:0%
collect payment so if we have a look at
this<00:26:22.180><c> example</c><00:26:24.960><c> now</c><00:26:25.960><c> here</c><00:26:26.230><c> we</c><00:26:26.500><c> have</c><00:26:26.530><c> a</c><00:26:26.650><c> slight</c>

00:26:26.940 --> 00:26:26.950 align:start position:0%
this example now here we have a slight
 

00:26:26.950 --> 00:26:30.150 align:start position:0%
this example now here we have a slight
complication<00:26:27.250><c> in</c><00:26:28.000><c> that</c><00:26:28.360><c> our</c><00:26:29.040><c> what</c><00:26:30.040><c> we're</c>

00:26:30.150 --> 00:26:30.160 align:start position:0%
complication in that our what we're
 

00:26:30.160 --> 00:26:31.980 align:start position:0%
complication in that our what we're
doing<00:26:30.430><c> is</c><00:26:30.550><c> we're</c><00:26:30.670><c> iterating</c><00:26:30.850><c> over</c><00:26:31.330><c> a</c><00:26:31.540><c> list</c><00:26:31.810><c> of</c>

00:26:31.980 --> 00:26:31.990 align:start position:0%
doing is we're iterating over a list of
 

00:26:31.990 --> 00:26:34.290 align:start position:0%
doing is we're iterating over a list of
keys<00:26:32.230><c> and</c><00:26:32.530><c> we're</c><00:26:32.680><c> adding</c><00:26:33.070><c> the</c><00:26:33.400><c> IDS</c><00:26:33.790><c> into</c><00:26:34.270><c> a</c>

00:26:34.290 --> 00:26:34.300 align:start position:0%
keys and we're adding the IDS into a
 

00:26:34.300 --> 00:26:36.330 align:start position:0%
keys and we're adding the IDS into a
list<00:26:34.600><c> of</c><00:26:34.810><c> ID's</c><00:26:35.230><c> so</c><00:26:35.770><c> this</c><00:26:35.890><c> sounds</c><00:26:36.190><c> like</c><00:26:36.250><c> a</c>

00:26:36.330 --> 00:26:36.340 align:start position:0%
list of ID's so this sounds like a
 

00:26:36.340 --> 00:26:37.860 align:start position:0%
list of ID's so this sounds like a
classic<00:26:36.610><c> problem</c><00:26:37.210><c> for</c><00:26:37.420><c> collect</c>

00:26:37.860 --> 00:26:37.870 align:start position:0%
classic problem for collect
 

00:26:37.870 --> 00:26:39.600 align:start position:0%
classic problem for collect
however<00:26:38.500><c> this</c><00:26:38.680><c> ArrayList</c><00:26:39.220><c> is</c><00:26:39.400><c> being</c>

00:26:39.600 --> 00:26:39.610 align:start position:0%
however this ArrayList is being
 

00:26:39.610 --> 00:26:41.070 align:start position:0%
however this ArrayList is being
initialized<00:26:40.150><c> with</c><00:26:40.480><c> an</c><00:26:40.600><c> initial</c><00:26:40.960><c> capacity</c>

00:26:41.070 --> 00:26:41.080 align:start position:0%
initialized with an initial capacity
 

00:26:41.080 --> 00:26:43.740 align:start position:0%
initialized with an initial capacity
which<00:26:41.650><c> can't</c><00:26:42.010><c> which</c><00:26:42.850><c> means</c><00:26:43.090><c> that</c><00:26:43.240><c> encourage</c><00:26:43.630><c> a</c>

00:26:43.740 --> 00:26:43.750 align:start position:0%
which can't which means that encourage a
 

00:26:43.750 --> 00:26:45.840 align:start position:0%
which can't which means that encourage a
can't<00:26:43.990><c> automatically</c><00:26:44.890><c> turn</c><00:26:45.520><c> it</c><00:26:45.640><c> into</c><00:26:45.760><c> a</c>

00:26:45.840 --> 00:26:45.850 align:start position:0%
can't automatically turn it into a
 

00:26:45.850 --> 00:26:47.970 align:start position:0%
can't automatically turn it into a
collect<00:26:46.150><c> statement</c><00:26:46.570><c> so</c><00:26:47.110><c> I'm</c><00:26:47.410><c> going</c><00:26:47.620><c> to</c><00:26:47.650><c> assume</c>

00:26:47.970 --> 00:26:47.980 align:start position:0%
collect statement so I'm going to assume
 

00:26:47.980 --> 00:26:51.630 align:start position:0%
collect statement so I'm going to assume
that<00:26:48.640><c> this</c><00:26:49.620><c> works</c><00:26:50.620><c> in</c><00:26:50.830><c> red</c><00:26:50.980><c> to</c><00:26:51.070><c> test</c><00:26:51.370><c> to</c><00:26:51.610><c> see</c>

00:26:51.630 --> 00:26:51.640 align:start position:0%
that this works in red to test to see
 

00:26:51.640 --> 00:26:53.280 align:start position:0%
that this works in red to test to see
whether<00:26:51.940><c> this</c><00:26:52.090><c> has</c><00:26:52.150><c> any</c><00:26:52.420><c> performance</c><00:26:52.900><c> impact</c>

00:26:53.280 --> 00:26:53.290 align:start position:0%
whether this has any performance impact
 

00:26:53.290 --> 00:26:54.900 align:start position:0%
whether this has any performance impact
so<00:26:53.740><c> to</c><00:26:53.830><c> begin</c><00:26:53.950><c> with</c><00:26:54.220><c> I'm</c><00:26:54.400><c> going</c><00:26:54.430><c> to</c><00:26:54.670><c> remove</c>

00:26:54.900 --> 00:26:54.910 align:start position:0%
so to begin with I'm going to remove
 

00:26:54.910 --> 00:26:57.120 align:start position:0%
so to begin with I'm going to remove
that<00:26:55.090><c> initial</c><00:26:55.420><c> capacity</c><00:26:55.840><c> so</c><00:26:56.770><c> that</c><00:26:56.800><c> I</c><00:26:56.920><c> can</c>

00:26:57.120 --> 00:26:57.130 align:start position:0%
that initial capacity so that I can
 

00:26:57.130 --> 00:26:59.400 align:start position:0%
that initial capacity so that I can
refactor<00:26:57.370><c> this</c><00:26:57.610><c> more</c><00:26:57.820><c> easily</c><00:26:58.120><c> now</c><00:26:58.900><c> I</c><00:26:58.930><c> can</c>

00:26:59.400 --> 00:26:59.410 align:start position:0%
refactor this more easily now I can
 

00:26:59.410 --> 00:27:00.870 align:start position:0%
refactor this more easily now I can
replace<00:26:59.710><c> that</c><00:26:59.740><c> with</c><00:27:00.070><c> a</c><00:27:00.100><c> collect</c><00:27:00.400><c> statement</c>

00:27:00.870 --> 00:27:00.880 align:start position:0%
replace that with a collect statement
 

00:27:00.880 --> 00:27:04.560 align:start position:0%
replace that with a collect statement
and<00:27:01.800><c> I</c><00:27:02.800><c> end</c><00:27:03.010><c> up</c><00:27:03.160><c> with</c><00:27:03.220><c> a</c><00:27:03.460><c> kind</c><00:27:03.790><c> of</c><00:27:03.910><c> classic</c>

00:27:04.560 --> 00:27:04.570 align:start position:0%
and I end up with a kind of classic
 

00:27:04.570 --> 00:27:08.970 align:start position:0%
and I end up with a kind of classic
collect<00:27:05.410><c> where</c><00:27:06.190><c> I'm</c><00:27:06.610><c> going</c><00:27:07.060><c> to</c><00:27:07.380><c> map</c><00:27:08.380><c> from</c><00:27:08.650><c> the</c>

00:27:08.970 --> 00:27:08.980 align:start position:0%
collect where I'm going to map from the
 

00:27:08.980 --> 00:27:11.400 align:start position:0%
collect where I'm going to map from the
key<00:27:09.160><c> just</c><00:27:09.520><c> get</c><00:27:09.700><c> the</c><00:27:09.790><c> ID</c><00:27:09.970><c> and</c><00:27:10.450><c> return</c><00:27:10.840><c> a</c><00:27:11.020><c> list</c><00:27:11.260><c> of</c>

00:27:11.400 --> 00:27:11.410 align:start position:0%
key just get the ID and return a list of
 

00:27:11.410 --> 00:27:15.510 align:start position:0%
key just get the ID and return a list of
ID's<00:27:11.800><c> from</c><00:27:12.280><c> this</c><00:27:12.460><c> list</c><00:27:12.670><c> of</c><00:27:12.820><c> keys</c><00:27:14.340><c> let's</c><00:27:15.340><c> look</c>

00:27:15.510 --> 00:27:15.520 align:start position:0%
ID's from this list of keys let's look
 

00:27:15.520 --> 00:27:25.960 align:start position:0%
ID's from this list of keys let's look
at<00:27:15.610><c> another</c><00:27:15.850><c> example</c>

00:27:25.960 --> 00:27:25.970 align:start position:0%
 
 

00:27:25.970 --> 00:27:28.370 align:start position:0%
 
so<00:27:26.970><c> in</c><00:27:27.090><c> this</c><00:27:27.149><c> example</c><00:27:27.299><c> we're</c><00:27:27.779><c> doing</c><00:27:28.019><c> something</c>

00:27:28.370 --> 00:27:28.380 align:start position:0%
so in this example we're doing something
 

00:27:28.380 --> 00:27:29.210 align:start position:0%
so in this example we're doing something
fairly<00:27:28.679><c> similar</c>

00:27:29.210 --> 00:27:29.220 align:start position:0%
fairly similar
 

00:27:29.220 --> 00:27:32.450 align:start position:0%
fairly similar
we<00:27:29.669><c> are</c><00:27:29.970><c> populating</c><00:27:30.840><c> a</c><00:27:31.110><c> list</c><00:27:31.470><c> of</c><00:27:31.649><c> valid</c><00:27:31.890><c> fields</c>

00:27:32.450 --> 00:27:32.460 align:start position:0%
we are populating a list of valid fields
 

00:27:32.460 --> 00:27:37.250 align:start position:0%
we are populating a list of valid fields
with<00:27:33.120><c> some</c><00:27:34.279><c> subset</c><00:27:35.279><c> of</c><00:27:35.960><c> fields</c><00:27:36.960><c> from</c><00:27:37.019><c> this</c>

00:27:37.250 --> 00:27:37.260 align:start position:0%
with some subset of fields from this
 

00:27:37.260 --> 00:27:40.399 align:start position:0%
with some subset of fields from this
fields<00:27:37.590><c> list</c><00:27:38.000><c> and</c><00:27:39.000><c> we</c><00:27:39.120><c> can</c><00:27:39.269><c> actually</c><00:27:39.390><c> see</c><00:27:39.720><c> what</c>

00:27:40.399 --> 00:27:40.409 align:start position:0%
fields list and we can actually see what
 

00:27:40.409 --> 00:27:41.509 align:start position:0%
fields list and we can actually see what
we're<00:27:40.559><c> trying</c><00:27:40.740><c> to</c><00:27:40.830><c> do</c><00:27:40.950><c> we're</c><00:27:41.159><c> going</c><00:27:41.190><c> to</c><00:27:41.370><c> ignore</c>

00:27:41.509 --> 00:27:41.519 align:start position:0%
we're trying to do we're going to ignore
 

00:27:41.519 --> 00:27:47.360 align:start position:0%
we're trying to do we're going to ignore
static<00:27:42.149><c> and</c><00:27:42.330><c> final</c><00:27:42.510><c> fields</c><00:27:43.080><c> so</c><00:27:46.250><c> let's</c><00:27:47.250><c> get</c>

00:27:47.360 --> 00:27:47.370 align:start position:0%
static and final fields so let's get
 

00:27:47.370 --> 00:27:49.460 align:start position:0%
static and final fields so let's get
IntelliJ<00:27:47.850><c> to</c><00:27:47.909><c> replace</c><00:27:48.510><c> the</c><00:27:48.899><c> places</c><00:27:49.289><c> with</c><00:27:49.440><c> a</c>

00:27:49.460 --> 00:27:49.470 align:start position:0%
IntelliJ to replace the places with a
 

00:27:49.470 --> 00:27:51.649 align:start position:0%
IntelliJ to replace the places with a
collect<00:27:49.769><c> statement</c><00:27:50.250><c> now</c><00:27:51.149><c> what</c><00:27:51.299><c> I</c><00:27:51.330><c> would</c><00:27:51.539><c> like</c>

00:27:51.649 --> 00:27:51.659 align:start position:0%
collect statement now what I would like
 

00:27:51.659 --> 00:27:53.539 align:start position:0%
collect statement now what I would like
to<00:27:51.809><c> do</c><00:27:51.960><c> is</c><00:27:52.200><c> I'd</c><00:27:52.320><c> like</c><00:27:52.350><c> to</c><00:27:52.529><c> get</c><00:27:52.769><c> rid</c><00:27:53.070><c> of</c><00:27:53.279><c> this</c>

00:27:53.539 --> 00:27:53.549 align:start position:0%
to do is I'd like to get rid of this
 

00:27:53.549 --> 00:27:55.580 align:start position:0%
to do is I'd like to get rid of this
comment<00:27:53.970><c> because</c><00:27:54.149><c> the</c><00:27:54.450><c> comment</c><00:27:54.779><c> says</c><00:27:55.049><c> the</c>

00:27:55.580 --> 00:27:55.590 align:start position:0%
comment because the comment says the
 

00:27:55.590 --> 00:27:57.919 align:start position:0%
comment because the comment says the
codes<00:27:55.860><c> not</c><00:27:56.130><c> really</c><00:27:56.460><c> very</c><00:27:56.700><c> clear</c><00:27:56.880><c> so</c><00:27:57.630><c> in</c><00:27:57.779><c> fact</c>

00:27:57.919 --> 00:27:57.929 align:start position:0%
codes not really very clear so in fact
 

00:27:57.929 --> 00:28:01.610 align:start position:0%
codes not really very clear so in fact
what<00:27:58.080><c> we</c><00:27:58.200><c> can</c><00:27:58.380><c> do</c><00:27:58.529><c> is</c><00:27:58.830><c> we</c><00:27:59.010><c> can</c><00:27:59.159><c> improve</c><00:27:59.519><c> this</c><00:28:00.620><c> by</c>

00:28:01.610 --> 00:28:01.620 align:start position:0%
what we can do is we can improve this by
 

00:28:01.620 --> 00:28:03.950 align:start position:0%
what we can do is we can improve this by
extracting<00:28:02.010><c> that</c><00:28:02.279><c> inter</c><00:28:02.940><c> methods</c><00:28:03.330><c> let's</c><00:28:03.690><c> call</c>

00:28:03.950 --> 00:28:03.960 align:start position:0%
extracting that inter methods let's call
 

00:28:03.960 --> 00:28:13.190 align:start position:0%
extracting that inter methods let's call
this<00:28:04.230><c> is</c><00:28:04.730><c> not</c><00:28:06.019><c> static</c><00:28:07.309><c> or</c><00:28:08.309><c> final</c><00:28:10.070><c> and</c><00:28:12.019><c> then</c><00:28:13.019><c> we</c>

00:28:13.190 --> 00:28:13.200 align:start position:0%
this is not static or final and then we
 

00:28:13.200 --> 00:28:15.430 align:start position:0%
this is not static or final and then we
can<00:28:13.380><c> get</c><00:28:13.559><c> rid</c><00:28:13.710><c> of</c><00:28:13.740><c> this</c><00:28:13.950><c> comment</c><00:28:14.279><c> completely</c><00:28:14.730><c> I</c>

00:28:15.430 --> 00:28:15.440 align:start position:0%
can get rid of this comment completely I
 

00:28:15.440 --> 00:28:19.820 align:start position:0%
can get rid of this comment completely I
would<00:28:16.440><c> argue</c><00:28:16.590><c> that</c><00:28:16.889><c> in</c><00:28:17.220><c> this</c><00:28:17.340><c> case</c><00:28:18.649><c> this</c><00:28:19.649><c> is</c>

00:28:19.820 --> 00:28:19.830 align:start position:0%
would argue that in this case this is
 

00:28:19.830 --> 00:28:21.560 align:start position:0%
would argue that in this case this is
more<00:28:20.010><c> readable</c><00:28:20.190><c> so</c><00:28:20.639><c> we're</c><00:28:20.789><c> filtering</c><00:28:21.299><c> out</c><00:28:21.539><c> the</c>

00:28:21.560 --> 00:28:21.570 align:start position:0%
more readable so we're filtering out the
 

00:28:21.570 --> 00:28:23.840 align:start position:0%
more readable so we're filtering out the
only<00:28:22.080><c> things</c><00:28:22.350><c> that</c><00:28:22.529><c> we</c><00:28:22.620><c> want</c><00:28:22.889><c> a</c><00:28:23.159><c> fields</c><00:28:23.730><c> that</c>

00:28:23.840 --> 00:28:23.850 align:start position:0%
only things that we want a fields that
 

00:28:23.850 --> 00:28:26.120 align:start position:0%
only things that we want a fields that
are<00:28:23.970><c> not</c><00:28:24.000><c> static</c><00:28:24.720><c> or</c><00:28:24.899><c> final</c><00:28:25.409><c> and</c><00:28:25.590><c> we're</c>

00:28:26.120 --> 00:28:26.130 align:start position:0%
are not static or final and we're
 

00:28:26.130 --> 00:28:27.409 align:start position:0%
are not static or final and we're
collecting<00:28:26.309><c> news</c><00:28:26.639><c> into</c><00:28:26.880><c> a</c><00:28:26.909><c> new</c><00:28:27.059><c> list</c><00:28:27.299><c> and</c>

00:28:27.409 --> 00:28:27.419 align:start position:0%
collecting news into a new list and
 

00:28:27.419 --> 00:28:29.090 align:start position:0%
collecting news into a new list and
returning<00:28:27.929><c> that</c><00:28:28.019><c> list</c><00:28:28.260><c> so</c><00:28:28.769><c> it's</c><00:28:28.919><c> a</c><00:28:28.950><c> bit</c><00:28:29.070><c> more</c>

00:28:29.090 --> 00:28:29.100 align:start position:0%
returning that list so it's a bit more
 

00:28:29.100 --> 00:28:31.460 align:start position:0%
returning that list so it's a bit more
readable<00:28:29.399><c> than</c><00:28:29.639><c> it</c><00:28:29.789><c> was</c><00:28:29.909><c> before</c><00:28:30.289><c> we've</c><00:28:31.289><c> also</c>

00:28:31.460 --> 00:28:31.470 align:start position:0%
readable than it was before we've also
 

00:28:31.470 --> 00:28:32.750 align:start position:0%
readable than it was before we've also
removed<00:28:31.710><c> from</c><00:28:32.010><c> the</c><00:28:32.190><c> boilerplate</c><00:28:32.460><c> and</c>

00:28:32.750 --> 00:28:32.760 align:start position:0%
removed from the boilerplate and
 

00:28:32.760 --> 00:28:40.129 align:start position:0%
removed from the boilerplate and
obviously<00:28:33.149><c> there's</c><00:28:33.360><c> comments</c><00:28:38.870><c> so</c><00:28:39.870><c> let's</c><00:28:40.049><c> look</c>

00:28:40.129 --> 00:28:40.139 align:start position:0%
obviously there's comments so let's look
 

00:28:40.139 --> 00:28:40.570 align:start position:0%
obviously there's comments so let's look
at<00:28:40.260><c> the</c>

00:28:40.570 --> 00:28:40.580 align:start position:0%
at the
 

00:28:40.580 --> 00:28:43.570 align:start position:0%
at the
to<00:28:40.820><c> this</c><00:28:40.970><c> the</c><00:28:41.690><c> first</c><00:28:42.230><c> example</c><00:28:42.890><c> what</c><00:28:43.159><c> I</c><00:28:43.190><c> wanted</c>

00:28:43.570 --> 00:28:43.580 align:start position:0%
to this the first example what I wanted
 

00:28:43.580 --> 00:28:44.980 align:start position:0%
to this the first example what I wanted
to<00:28:43.640><c> do</c><00:28:43.789><c> as</c><00:28:43.970><c> I</c><00:28:44.000><c> mentioned</c><00:28:44.480><c> is</c><00:28:44.630><c> I</c><00:28:44.750><c> want</c><00:28:44.929><c> to</c>

00:28:44.980 --> 00:28:44.990 align:start position:0%
to do as I mentioned is I want to
 

00:28:44.990 --> 00:28:46.840 align:start position:0%
to do as I mentioned is I want to
performance<00:28:45.500><c> test</c><00:28:45.769><c> whether</c><00:28:46.039><c> this</c><00:28:46.370><c> initial</c>

00:28:46.840 --> 00:28:46.850 align:start position:0%
performance test whether this initial
 

00:28:46.850 --> 00:28:49.090 align:start position:0%
performance test whether this initial
array<00:28:47.179><c> allocation</c><00:28:47.840><c> has</c><00:28:48.320><c> any</c><00:28:48.529><c> impact</c><00:28:48.890><c> on</c>

00:28:49.090 --> 00:28:49.100 align:start position:0%
array allocation has any impact on
 

00:28:49.100 --> 00:28:51.190 align:start position:0%
array allocation has any impact on
performance<00:28:49.220><c> so</c><00:28:50.149><c> I'm</c><00:28:50.269><c> testing</c><00:28:50.450><c> it</c><00:28:50.690><c> with</c><00:28:50.899><c> the</c>

00:28:51.190 --> 00:28:51.200 align:start position:0%
performance so I'm testing it with the
 

00:28:51.200 --> 00:28:53.649 align:start position:0%
performance so I'm testing it with the
array<00:28:51.409><c> allocation</c><00:28:52.010><c> and</c><00:28:52.220><c> without</c><00:28:52.549><c> it</c><00:28:52.850><c> and</c><00:28:53.090><c> then</c>

00:28:53.649 --> 00:28:53.659 align:start position:0%
array allocation and without it and then
 

00:28:53.659 --> 00:28:55.870 align:start position:0%
array allocation and without it and then
I'm<00:28:53.779><c> testing</c><00:28:54.260><c> the</c><00:28:54.470><c> refactored</c><00:28:55.010><c> code</c><00:28:55.250><c> with</c><00:28:55.640><c> the</c>

00:28:55.870 --> 00:28:55.880 align:start position:0%
I'm testing the refactored code with the
 

00:28:55.880 --> 00:28:59.889 align:start position:0%
I'm testing the refactored code with the
map<00:28:56.240><c> and</c><00:28:56.480><c> play</c><00:28:58.059><c> and</c><00:28:59.059><c> what</c><00:28:59.179><c> we</c><00:28:59.269><c> find</c><00:28:59.480><c> in</c><00:28:59.779><c> this</c>

00:28:59.889 --> 00:28:59.899 align:start position:0%
map and play and what we find in this
 

00:28:59.899 --> 00:29:01.779 align:start position:0%
map and play and what we find in this
particular<00:29:00.080><c> case</c><00:29:00.559><c> for</c><00:29:00.830><c> a</c><00:29:01.130><c> list</c><00:29:01.399><c> of</c><00:29:01.580><c> ten</c>

00:29:01.779 --> 00:29:01.789 align:start position:0%
particular case for a list of ten
 

00:29:01.789 --> 00:29:03.850 align:start position:0%
particular case for a list of ten
elements<00:29:02.210><c> which</c><00:29:02.299><c> isn't</c><00:29:02.450><c> very</c><00:29:02.539><c> many</c><00:29:02.809><c> that</c><00:29:03.740><c> the</c>

00:29:03.850 --> 00:29:03.860 align:start position:0%
elements which isn't very many that the
 

00:29:03.860 --> 00:29:06.190 align:start position:0%
elements which isn't very many that the
original<00:29:04.279><c> code</c><00:29:04.490><c> with</c><00:29:04.940><c> the</c><00:29:05.299><c> pre</c><00:29:05.510><c> allocation</c><00:29:06.019><c> of</c>

00:29:06.190 --> 00:29:06.200 align:start position:0%
original code with the pre allocation of
 

00:29:06.200 --> 00:29:08.769 align:start position:0%
original code with the pre allocation of
the<00:29:06.380><c> of</c><00:29:06.740><c> the</c><00:29:06.950><c> ArrayList</c><00:29:07.340><c> size</c><00:29:07.549><c> is</c><00:29:07.789><c> much</c><00:29:08.480><c> more</c>

00:29:08.769 --> 00:29:08.779 align:start position:0%
the of the ArrayList size is much more
 

00:29:08.779 --> 00:29:10.090 align:start position:0%
the of the ArrayList size is much more
performant<00:29:09.350><c> than</c><00:29:09.500><c> any</c><00:29:09.740><c> of</c><00:29:09.890><c> the</c><00:29:09.980><c> other</c>

00:29:10.090 --> 00:29:10.100 align:start position:0%
performant than any of the other
 

00:29:10.100 --> 00:29:12.039 align:start position:0%
performant than any of the other
examples<00:29:10.610><c> it</c><00:29:10.820><c> performs</c><00:29:11.179><c> better</c><00:29:11.240><c> than</c><00:29:11.750><c> the</c>

00:29:12.039 --> 00:29:12.049 align:start position:0%
examples it performs better than the
 

00:29:12.049 --> 00:29:14.590 align:start position:0%
examples it performs better than the
simplified<00:29:12.559><c> code</c><00:29:12.799><c> without</c><00:29:13.130><c> the</c><00:29:13.639><c> array</c><00:29:14.059><c> size</c>

00:29:14.590 --> 00:29:14.600 align:start position:0%
simplified code without the array size
 

00:29:14.600 --> 00:29:16.629 align:start position:0%
simplified code without the array size
it<00:29:15.320><c> performs</c><00:29:15.710><c> better</c><00:29:15.889><c> than</c><00:29:15.980><c> the</c><00:29:16.130><c> refactored</c>

00:29:16.629 --> 00:29:16.639 align:start position:0%
it performs better than the refactored
 

00:29:16.639 --> 00:29:18.639 align:start position:0%
it performs better than the refactored
code<00:29:16.880><c> and</c><00:29:17.179><c> parallel</c><00:29:18.019><c> with</c><00:29:18.289><c> ten</c><00:29:18.500><c> items</c>

00:29:18.639 --> 00:29:18.649 align:start position:0%
code and parallel with ten items
 

00:29:18.649 --> 00:29:21.940 align:start position:0%
code and parallel with ten items
basically<00:29:20.260><c> let's</c><00:29:21.260><c> not</c><00:29:21.380><c> even</c><00:29:21.500><c> talk</c><00:29:21.679><c> about</c><00:29:21.740><c> it</c>

00:29:21.940 --> 00:29:21.950 align:start position:0%
basically let's not even talk about it
 

00:29:21.950 --> 00:29:24.669 align:start position:0%
basically let's not even talk about it
doesn't<00:29:22.309><c> even</c><00:29:22.399><c> appear</c><00:29:22.669><c> on</c><00:29:22.730><c> the</c><00:29:22.909><c> chart</c><00:29:23.090><c> if</c><00:29:23.679><c> we</c>

00:29:24.669 --> 00:29:24.679 align:start position:0%
doesn't even appear on the chart if we
 

00:29:24.679 --> 00:29:27.669 align:start position:0%
doesn't even appear on the chart if we
add<00:29:25.010><c> a</c><00:29:25.070><c> few</c><00:29:25.490><c> more</c><00:29:25.519><c> elements</c><00:29:25.669><c> into</c><00:29:26.600><c> the</c><00:29:27.139><c> list</c>

00:29:27.669 --> 00:29:27.679 align:start position:0%
add a few more elements into the list
 

00:29:27.679 --> 00:29:29.409 align:start position:0%
add a few more elements into the list
that<00:29:27.860><c> we're</c><00:29:27.980><c> iterating</c><00:29:28.190><c> over</c><00:29:28.519><c> so</c><00:29:29.179><c> in</c><00:29:29.330><c> this</c>

00:29:29.409 --> 00:29:29.419 align:start position:0%
that we're iterating over so in this
 

00:29:29.419 --> 00:29:32.110 align:start position:0%
that we're iterating over so in this
case<00:29:29.659><c> 10,000</c><00:29:30.409><c> elements</c><00:29:30.620><c> then</c><00:29:31.399><c> we</c><00:29:31.580><c> see</c><00:29:31.820><c> that</c>

00:29:32.110 --> 00:29:32.120 align:start position:0%
case 10,000 elements then we see that
 

00:29:32.120 --> 00:29:33.789 align:start position:0%
case 10,000 elements then we see that
the<00:29:32.299><c> initial</c><00:29:32.690><c> allocation</c><00:29:32.809><c> of</c><00:29:33.380><c> the</c><00:29:33.470><c> list</c><00:29:33.620><c> size</c>

00:29:33.789 --> 00:29:33.799 align:start position:0%
the initial allocation of the list size
 

00:29:33.799 --> 00:29:35.200 align:start position:0%
the initial allocation of the list size
really<00:29:34.100><c> starts</c><00:29:34.580><c> to</c><00:29:34.639><c> make</c><00:29:34.700><c> very</c><00:29:35.090><c> little</c>

00:29:35.200 --> 00:29:35.210 align:start position:0%
really starts to make very little
 

00:29:35.210 --> 00:29:37.360 align:start position:0%
really starts to make very little
difference<00:29:35.389><c> and</c><00:29:36.019><c> parallel</c><00:29:36.860><c> starts</c><00:29:37.159><c> to</c><00:29:37.250><c> become</c>

00:29:37.360 --> 00:29:37.370 align:start position:0%
difference and parallel starts to become
 

00:29:37.370 --> 00:29:40.690 align:start position:0%
difference and parallel starts to become
much<00:29:38.179><c> more</c><00:29:38.480><c> performance</c><00:29:39.049><c> but</c><00:29:39.500><c> our</c><00:29:39.700><c> refactor</c>

00:29:40.690 --> 00:29:40.700 align:start position:0%
much more performance but our refactor
 

00:29:40.700 --> 00:29:42.460 align:start position:0%
much more performance but our refactor
code<00:29:40.730><c> is</c><00:29:41.120><c> still</c><00:29:41.659><c> not</c><00:29:41.779><c> performing</c><00:29:42.169><c> quite</c><00:29:42.350><c> as</c>

00:29:42.460 --> 00:29:42.470 align:start position:0%
code is still not performing quite as
 

00:29:42.470 --> 00:29:45.430 align:start position:0%
code is still not performing quite as
well<00:29:42.649><c> as</c><00:29:42.679><c> the</c><00:29:43.220><c> other</c><00:29:43.370><c> examples</c><00:29:44.230><c> again</c><00:29:45.230><c> when</c><00:29:45.380><c> I</c>

00:29:45.430 --> 00:29:45.440 align:start position:0%
well as the other examples again when I
 

00:29:45.440 --> 00:29:47.470 align:start position:0%
well as the other examples again when I
put<00:29:45.620><c> my</c><00:29:45.649><c> orders</c><00:29:46.070><c> of</c><00:29:46.159><c> magnitude</c><00:29:46.669><c> but</c><00:29:46.880><c> it</c><00:29:46.970><c> is</c><00:29:47.149><c> it</c>

00:29:47.470 --> 00:29:47.480 align:start position:0%
put my orders of magnitude but it is it
 

00:29:47.480 --> 00:29:51.149 align:start position:0%
put my orders of magnitude but it is it
is<00:29:47.539><c> a</c><00:29:47.690><c> it</c><00:29:48.230><c> does</c><00:29:48.440><c> perform</c><00:29:48.649><c> a</c><00:29:48.860><c> little</c><00:29:48.980><c> bit</c><00:29:49.190><c> poorer</c>

00:29:51.149 --> 00:29:51.159 align:start position:0%
is a it does perform a little bit poorer
 

00:29:51.159 --> 00:29:53.500 align:start position:0%
is a it does perform a little bit poorer
the<00:29:52.159><c> other</c><00:29:52.340><c> example</c><00:29:52.789><c> we</c><00:29:52.880><c> looked</c><00:29:53.059><c> at</c><00:29:53.240><c> here</c>

00:29:53.500 --> 00:29:53.510 align:start position:0%
the other example we looked at here
 

00:29:53.510 --> 00:29:54.970 align:start position:0%
the other example we looked at here
weren't<00:29:53.899><c> being</c><00:29:54.230><c> able</c><00:29:54.350><c> to</c><00:29:54.440><c> get</c><00:29:54.620><c> rid</c><00:29:54.799><c> of</c><00:29:54.830><c> this</c>

00:29:54.970 --> 00:29:54.980 align:start position:0%
weren't being able to get rid of this
 

00:29:54.980 --> 00:29:58.389 align:start position:0%
weren't being able to get rid of this
comment<00:29:55.460><c> by</c><00:29:56.320><c> replacing</c><00:29:57.320><c> it</c><00:29:57.740><c> with</c><00:29:58.070><c> a</c><00:29:58.100><c> filter</c>

00:29:58.389 --> 00:29:58.399 align:start position:0%
comment by replacing it with a filter
 

00:29:58.399 --> 00:30:02.639 align:start position:0%
comment by replacing it with a filter
intellect<00:30:00.220><c> now</c><00:30:01.220><c> here</c><00:30:01.519><c> the</c><00:30:02.000><c> refactor</c><00:30:02.480><c> code</c>

00:30:02.639 --> 00:30:02.649 align:start position:0%
intellect now here the refactor code
 

00:30:02.649 --> 00:30:05.139 align:start position:0%
intellect now here the refactor code
performs<00:30:03.649><c> worse</c><00:30:04.010><c> than</c><00:30:04.340><c> the</c><00:30:04.429><c> original</c><00:30:04.519><c> code</c><00:30:05.000><c> as</c>

00:30:05.139 --> 00:30:05.149 align:start position:0%
performs worse than the original code as
 

00:30:05.149 --> 00:30:07.360 align:start position:0%
performs worse than the original code as
well<00:30:05.330><c> in</c><00:30:05.899><c> this</c><00:30:06.139><c> case</c><00:30:06.409><c> I</c><00:30:06.620><c> think</c><00:30:06.919><c> it's</c><00:30:07.039><c> because</c>

00:30:07.360 --> 00:30:07.370 align:start position:0%
well in this case I think it's because
 

00:30:07.370 --> 00:30:09.549 align:start position:0%
well in this case I think it's because
you're<00:30:07.519><c> doing</c><00:30:07.669><c> in</c><00:30:07.850><c> a</c><00:30:07.909><c> raised</c><00:30:08.179><c> dot</c><00:30:08.539><c> stream</c><00:30:08.960><c> so</c>

00:30:09.549 --> 00:30:09.559 align:start position:0%
you're doing in a raised dot stream so
 

00:30:09.559 --> 00:30:12.879 align:start position:0%
you're doing in a raised dot stream so
you're<00:30:09.889><c> using</c><00:30:10.490><c> you</c><00:30:11.210><c> had</c><00:30:11.450><c> code</c><00:30:11.809><c> that</c><00:30:12.500><c> was</c><00:30:12.710><c> an</c>

00:30:12.879 --> 00:30:12.889 align:start position:0%
you're using you had code that was an
 

00:30:12.889 --> 00:30:16.450 align:start position:0%
you're using you had code that was an
array<00:30:13.130><c> and</c><00:30:14.590><c> and</c><00:30:15.590><c> now</c><00:30:15.830><c> you're</c><00:30:16.070><c> having</c><00:30:16.159><c> to</c><00:30:16.370><c> do</c>

00:30:16.450 --> 00:30:16.460 align:start position:0%
array and and now you're having to do
 

00:30:16.460 --> 00:30:19.180 align:start position:0%
array and and now you're having to do
arrays<00:30:16.700><c> upstream</c><00:30:17.090><c> so</c><00:30:17.269><c> it's</c><00:30:18.049><c> probably</c><00:30:18.590><c> not</c>

00:30:19.180 --> 00:30:19.190 align:start position:0%
arrays upstream so it's probably not
 

00:30:19.190 --> 00:30:20.860 align:start position:0%
arrays upstream so it's probably not
going<00:30:19.519><c> to</c><00:30:19.610><c> be</c><00:30:19.700><c> as</c><00:30:19.789><c> an</c><00:30:19.909><c> efficient</c><00:30:20.269><c> we'll</c><00:30:20.510><c> talk</c><00:30:20.840><c> a</c>

00:30:20.860 --> 00:30:20.870 align:start position:0%
going to be as an efficient we'll talk a
 

00:30:20.870 --> 00:30:22.509 align:start position:0%
going to be as an efficient we'll talk a
little<00:30:21.049><c> bit</c><00:30:21.260><c> more</c><00:30:21.740><c> about</c><00:30:21.919><c> this</c><00:30:22.100><c> a</c><00:30:22.130><c> little</c><00:30:22.309><c> bit</c>

00:30:22.509 --> 00:30:22.519 align:start position:0%
little bit more about this a little bit
 

00:30:22.519 --> 00:30:24.389 align:start position:0%
little bit more about this a little bit
later<00:30:22.700><c> on</c>

00:30:24.389 --> 00:30:24.399 align:start position:0%
later on
 

00:30:24.399 --> 00:30:28.480 align:start position:0%
later on
so<00:30:25.960><c> automatically</c><00:30:26.960><c> turning</c><00:30:27.350><c> your</c><00:30:27.710><c> code</c><00:30:27.980><c> from</c>

00:30:28.480 --> 00:30:28.490 align:start position:0%
so automatically turning your code from
 

00:30:28.490 --> 00:30:30.750 align:start position:0%
so automatically turning your code from
a<00:30:28.610><c> for</c><00:30:29.000><c> loop</c><00:30:29.149><c> into</c><00:30:29.630><c> a</c><00:30:29.659><c> collect</c><00:30:30.019><c> statement</c><00:30:30.500><c> and</c>

00:30:30.750 --> 00:30:30.760 align:start position:0%
a for loop into a collect statement and
 

00:30:30.760 --> 00:30:32.950 align:start position:0%
a for loop into a collect statement and
you're<00:30:31.760><c> going</c><00:30:31.970><c> to</c><00:30:32.029><c> have</c><00:30:32.149><c> to</c><00:30:32.269><c> be</c><00:30:32.389><c> careful</c><00:30:32.870><c> a</c>

00:30:32.950 --> 00:30:32.960 align:start position:0%
you're going to have to be careful a
 

00:30:32.960 --> 00:30:34.389 align:start position:0%
you're going to have to be careful a
little<00:30:33.080><c> bit</c><00:30:33.350><c> about</c><00:30:33.500><c> the</c><00:30:33.620><c> performance</c><00:30:33.769><c> of</c><00:30:34.190><c> that</c>

00:30:34.389 --> 00:30:34.399 align:start position:0%
little bit about the performance of that
 

00:30:34.399 --> 00:30:37.570 align:start position:0%
little bit about the performance of that
code<00:30:34.639><c> so</c><00:30:34.909><c> if</c><00:30:35.600><c> you</c><00:30:35.899><c> if</c><00:30:36.230><c> you</c><00:30:36.440><c> if</c><00:30:36.889><c> you</c><00:30:37.100><c> really</c><00:30:37.370><c> care</c>

00:30:37.570 --> 00:30:37.580 align:start position:0%
code so if you if you if you really care
 

00:30:37.580 --> 00:30:38.590 align:start position:0%
code so if you if you if you really care
about<00:30:37.610><c> performance</c><00:30:37.880><c> you</c><00:30:38.240><c> probably</c><00:30:38.510><c> gonna</c>

00:30:38.590 --> 00:30:38.600 align:start position:0%
about performance you probably gonna
 

00:30:38.600 --> 00:30:41.110 align:start position:0%
about performance you probably gonna
want<00:30:38.929><c> to</c><00:30:39.019><c> write</c><00:30:39.200><c> some</c><00:30:39.380><c> tests</c><00:30:39.590><c> now</c><00:30:40.220><c> here's</c><00:30:40.970><c> a</c>

00:30:41.110 --> 00:30:41.120 align:start position:0%
want to write some tests now here's a
 

00:30:41.120 --> 00:30:43.299 align:start position:0%
want to write some tests now here's a
good<00:30:41.330><c> time</c><00:30:41.570><c> to</c><00:30:41.779><c> talk</c><00:30:42.409><c> a</c><00:30:42.590><c> little</c><00:30:42.889><c> bit</c><00:30:43.010><c> or</c><00:30:43.130><c> have</c><00:30:43.279><c> a</c>

00:30:43.299 --> 00:30:43.309 align:start position:0%
good time to talk a little bit or have a
 

00:30:43.309 --> 00:30:45.879 align:start position:0%
good time to talk a little bit or have a
little<00:30:43.460><c> bit</c><00:30:43.639><c> the</c><00:30:43.669><c> caveat</c><00:30:44.179><c> in</c><00:30:44.570><c> the</c><00:30:45.500><c> grand</c>

00:30:45.879 --> 00:30:45.889 align:start position:0%
little bit the caveat in the grand
 

00:30:45.889 --> 00:30:47.799 align:start position:0%
little bit the caveat in the grand
scheme<00:30:46.309><c> of</c><00:30:46.370><c> things</c><00:30:46.600><c> some</c><00:30:47.600><c> of</c><00:30:47.720><c> these</c>

00:30:47.799 --> 00:30:47.809 align:start position:0%
scheme of things some of these
 

00:30:47.809 --> 00:30:50.169 align:start position:0%
scheme of things some of these
performance<00:30:48.409><c> implications</c><00:30:48.679><c> may</c><00:30:49.460><c> be</c><00:30:49.520><c> pretty</c>

00:30:50.169 --> 00:30:50.179 align:start position:0%
performance implications may be pretty
 

00:30:50.179 --> 00:30:51.879 align:start position:0%
performance implications may be pretty
much<00:30:50.330><c> nothing</c><00:30:50.750><c> like</c><00:30:51.440><c> I</c><00:30:51.529><c> said</c><00:30:51.649><c> we're</c><00:30:51.770><c> talking</c>

00:30:51.879 --> 00:30:51.889 align:start position:0%
much nothing like I said we're talking
 

00:30:51.889 --> 00:30:53.980 align:start position:0%
much nothing like I said we're talking
about<00:30:52.190><c> maybe</c><00:30:53.000><c> half</c><00:30:53.270><c> the</c><00:30:53.299><c> speed</c>

00:30:53.980 --> 00:30:53.990 align:start position:0%
about maybe half the speed
 

00:30:53.990 --> 00:30:55.900 align:start position:0%
about maybe half the speed
but<00:30:54.290><c> we</c><00:30:54.380><c> talk</c><00:30:54.559><c> about</c><00:30:54.650><c> micro</c><00:30:55.190><c> benchmarks</c><00:30:55.820><c> I'm</c>

00:30:55.900 --> 00:30:55.910 align:start position:0%
but we talk about micro benchmarks I'm
 

00:30:55.910 --> 00:30:59.860 align:start position:0%
but we talk about micro benchmarks I'm
benchmarking<00:30:56.450><c> just</c><00:30:56.780><c> this</c><00:30:56.929><c> method</c><00:30:57.350><c> in</c><00:30:58.630><c> in</c><00:30:59.630><c> this</c>

00:30:59.860 --> 00:30:59.870 align:start position:0%
benchmarking just this method in in this
 

00:30:59.870 --> 00:31:02.620 align:start position:0%
benchmarking just this method in in this
particular<00:31:00.230><c> case</c><00:31:00.710><c> this</c><00:31:01.400><c> code</c><00:31:01.760><c> actually</c><00:31:02.390><c> is</c>

00:31:02.620 --> 00:31:02.630 align:start position:0%
particular case this code actually is
 

00:31:02.630 --> 00:31:04.630 align:start position:0%
particular case this code actually is
about<00:31:02.929><c> code</c><00:31:03.440><c> which</c><00:31:03.740><c> goes</c><00:31:04.040><c> off</c><00:31:04.309><c> to</c><00:31:04.580><c> the</c>

00:31:04.630 --> 00:31:04.640 align:start position:0%
about code which goes off to the
 

00:31:04.640 --> 00:31:06.760 align:start position:0%
about code which goes off to the
database<00:31:05.059><c> so</c><00:31:05.630><c> the</c><00:31:05.780><c> cost</c><00:31:06.050><c> of</c><00:31:06.290><c> talking</c><00:31:06.650><c> to</c><00:31:06.740><c> a</c>

00:31:06.760 --> 00:31:06.770 align:start position:0%
database so the cost of talking to a
 

00:31:06.770 --> 00:31:08.620 align:start position:0%
database so the cost of talking to a
database<00:31:07.130><c> is</c><00:31:07.370><c> probably</c><00:31:07.670><c> substantially</c><00:31:08.390><c> more</c>

00:31:08.620 --> 00:31:08.630 align:start position:0%
database is probably substantially more
 

00:31:08.630 --> 00:31:11.860 align:start position:0%
database is probably substantially more
than<00:31:09.200><c> the</c><00:31:09.380><c> cost</c><00:31:09.590><c> of</c><00:31:09.830><c> adding</c><00:31:10.580><c> and</c><00:31:10.910><c> then</c><00:31:11.510><c> some</c><00:31:11.750><c> of</c>

00:31:11.860 --> 00:31:11.870 align:start position:0%
than the cost of adding and then some of
 

00:31:11.870 --> 00:31:14.290 align:start position:0%
than the cost of adding and then some of
the<00:31:11.960><c> additional</c><00:31:12.440><c> costs</c><00:31:12.740><c> added</c><00:31:12.920><c> by</c><00:31:13.190><c> adding</c><00:31:14.000><c> by</c>

00:31:14.290 --> 00:31:14.300 align:start position:0%
the additional costs added by adding by
 

00:31:14.300 --> 00:31:17.680 align:start position:0%
the additional costs added by adding by
using<00:31:14.630><c> the</c><00:31:14.990><c> java</c><00:31:15.230><c> 8</c><00:31:15.470><c> features</c><00:31:15.770><c> so</c><00:31:16.690><c> micro</c>

00:31:17.680 --> 00:31:17.690 align:start position:0%
using the java 8 features so micro
 

00:31:17.690 --> 00:31:19.540 align:start position:0%
using the java 8 features so micro
benchmarks<00:31:18.170><c> are</c><00:31:18.320><c> useful</c><00:31:19.010><c> but</c><00:31:19.130><c> you</c><00:31:19.220><c> have</c><00:31:19.429><c> to</c>

00:31:19.540 --> 00:31:19.550 align:start position:0%
benchmarks are useful but you have to
 

00:31:19.550 --> 00:31:21.340 align:start position:0%
benchmarks are useful but you have to
consider<00:31:19.760><c> stuff</c><00:31:20.240><c> in</c><00:31:20.480><c> this</c><00:31:20.660><c> in</c><00:31:20.900><c> the</c><00:31:21.080><c> grand</c>

00:31:21.340 --> 00:31:21.350 align:start position:0%
consider stuff in this in the grand
 

00:31:21.350 --> 00:31:23.830 align:start position:0%
consider stuff in this in the grand
scheme<00:31:21.530><c> of</c><00:31:21.830><c> the</c><00:31:21.920><c> whole</c><00:31:22.070><c> application</c><00:31:22.720><c> which</c><00:31:23.720><c> is</c>

00:31:23.830 --> 00:31:23.840 align:start position:0%
scheme of the whole application which is
 

00:31:23.840 --> 00:31:25.000 align:start position:0%
scheme of the whole application which is
why<00:31:23.960><c> it's</c><00:31:24.110><c> important</c><00:31:24.500><c> for</c><00:31:24.590><c> you</c><00:31:24.710><c> to</c><00:31:24.860><c> have</c>

00:31:25.000 --> 00:31:25.010 align:start position:0%
why it's important for you to have
 

00:31:25.010 --> 00:31:26.740 align:start position:0%
why it's important for you to have
performance<00:31:25.820><c> tests</c><00:31:26.120><c> automated</c><00:31:26.630><c> performance</c>

00:31:26.740 --> 00:31:26.750 align:start position:0%
performance tests automated performance
 

00:31:26.750 --> 00:31:29.110 align:start position:0%
performance tests automated performance
tests<00:31:27.440><c> for</c><00:31:27.679><c> the</c><00:31:27.830><c> code</c><00:31:28.220><c> package</c><00:31:28.640><c> that</c><00:31:28.790><c> matters</c>

00:31:29.110 --> 00:31:29.120 align:start position:0%
tests for the code package that matters
 

00:31:29.120 --> 00:31:31.980 align:start position:0%
tests for the code package that matters
the<00:31:29.179><c> most</c><00:31:29.210><c> to</c><00:31:29.510><c> you</c>

00:31:31.980 --> 00:31:31.990 align:start position:0%
 
 

00:31:31.990 --> 00:31:34.510 align:start position:0%
 
now<00:31:32.990><c> here's</c><00:31:33.170><c> an</c><00:31:33.290><c> area</c><00:31:33.559><c> where</c><00:31:33.800><c> I</c><00:31:33.830><c> think</c><00:31:33.950><c> streams</c>

00:31:34.510 --> 00:31:34.520 align:start position:0%
now here's an area where I think streams
 

00:31:34.520 --> 00:31:36.190 align:start position:0%
now here's an area where I think streams
are<00:31:34.730><c> very</c><00:31:34.910><c> interesting</c><00:31:35.480><c> where</c><00:31:35.720><c> we</c><00:31:35.840><c> can</c><00:31:36.020><c> look</c>

00:31:36.190 --> 00:31:36.200 align:start position:0%
are very interesting where we can look
 

00:31:36.200 --> 00:31:39.040 align:start position:0%
are very interesting where we can look
at<00:31:36.440><c> code</c><00:31:36.890><c> which</c><00:31:37.160><c> was</c><00:31:37.370><c> previously</c><00:31:37.760><c> a</c><00:31:38.179><c> series</c><00:31:38.929><c> of</c>

00:31:39.040 --> 00:31:39.050 align:start position:0%
at code which was previously a series of
 

00:31:39.050 --> 00:31:40.870 align:start position:0%
at code which was previously a series of
operations<00:31:39.350><c> and</c><00:31:39.860><c> collapse</c><00:31:40.190><c> them</c><00:31:40.429><c> down</c><00:31:40.580><c> into</c><00:31:40.820><c> a</c>

00:31:40.870 --> 00:31:40.880 align:start position:0%
operations and collapse them down into a
 

00:31:40.880 --> 00:31:49.299 align:start position:0%
operations and collapse them down into a
single<00:31:41.120><c> stream</c><00:31:41.600><c> operation</c><00:31:47.950><c> here's</c><00:31:48.950><c> our</c><00:31:49.100><c> first</c>

00:31:49.299 --> 00:31:49.309 align:start position:0%
single stream operation here's our first
 

00:31:49.309 --> 00:31:55.440 align:start position:0%
single stream operation here's our first
example<00:31:49.490><c> we</c><00:31:50.290><c> have</c><00:31:51.290><c> a</c><00:31:51.770><c> set</c><00:31:52.480><c> subset</c><00:31:53.480><c> here</c><00:31:53.780><c> of</c>

00:31:55.440 --> 00:31:55.450 align:start position:0%
example we have a set subset here of
 

00:31:55.450 --> 00:31:57.400 align:start position:0%
example we have a set subset here of
constraint<00:31:56.450><c> violations</c><00:31:56.929><c> whatever</c><00:31:57.230><c> they</c><00:31:57.380><c> are</c>

00:31:57.400 --> 00:31:57.410 align:start position:0%
constraint violations whatever they are
 

00:31:57.410 --> 00:31:59.380 align:start position:0%
constraint violations whatever they are
we're<00:31:57.980><c> going</c><00:31:58.100><c> to</c><00:31:58.160><c> iterate</c><00:31:58.550><c> over</c><00:31:58.670><c> those</c><00:31:59.059><c> add</c>

00:31:59.380 --> 00:31:59.390 align:start position:0%
we're going to iterate over those add
 

00:31:59.390 --> 00:32:02.320 align:start position:0%
we're going to iterate over those add
them<00:32:00.020><c> into</c><00:32:00.320><c> a</c><00:32:00.559><c> new</c><00:32:00.770><c> list</c><00:32:01.040><c> and</c><00:32:01.340><c> then</c><00:32:01.910><c> we've</c><00:32:02.030><c> sort</c>

00:32:02.320 --> 00:32:02.330 align:start position:0%
them into a new list and then we've sort
 

00:32:02.330 --> 00:32:04.780 align:start position:0%
them into a new list and then we've sort
that<00:32:02.540><c> list</c><00:32:02.840><c> and</c><00:32:03.170><c> then</c><00:32:03.860><c> we</c><00:32:03.950><c> iterate</c><00:32:04.400><c> over</c><00:32:04.429><c> that</c>

00:32:04.780 --> 00:32:04.790 align:start position:0%
that list and then we iterate over that
 

00:32:04.790 --> 00:32:07.419 align:start position:0%
that list and then we iterate over that
list<00:32:04.940><c> and</c><00:32:05.210><c> do</c><00:32:05.420><c> something</c><00:32:05.900><c> with</c><00:32:06.050><c> it</c><00:32:06.280><c> so</c><00:32:07.280><c> we</c>

00:32:07.419 --> 00:32:07.429 align:start position:0%
list and do something with it so we
 

00:32:07.429 --> 00:32:09.010 align:start position:0%
list and do something with it so we
should<00:32:07.790><c> be</c><00:32:07.970><c> able</c><00:32:08.030><c> to</c><00:32:08.120><c> collapse</c><00:32:08.390><c> this</c><00:32:08.600><c> down</c><00:32:08.840><c> to</c>

00:32:09.010 --> 00:32:09.020 align:start position:0%
should be able to collapse this down to
 

00:32:09.020 --> 00:32:12.100 align:start position:0%
should be able to collapse this down to
a<00:32:09.050><c> single</c><00:32:09.500><c> stream</c><00:32:09.740><c> operation</c><00:32:10.570><c> so</c><00:32:11.570><c> IntelliJ</c>

00:32:12.100 --> 00:32:12.110 align:start position:0%
a single stream operation so IntelliJ
 

00:32:12.110 --> 00:32:13.870 align:start position:0%
a single stream operation so IntelliJ
says<00:32:12.350><c> that</c><00:32:12.590><c> we</c><00:32:12.740><c> can</c><00:32:13.070><c> replace</c><00:32:13.340><c> this</c><00:32:13.610><c> with</c><00:32:13.850><c> a</c>

00:32:13.870 --> 00:32:13.880 align:start position:0%
says that we can replace this with a
 

00:32:13.880 --> 00:32:17.340 align:start position:0%
says that we can replace this with a
collect<00:32:14.150><c> statement</c><00:32:15.220><c> note</c><00:32:16.220><c> that</c><00:32:16.640><c> it</c><00:32:16.880><c> has</c>

00:32:17.340 --> 00:32:17.350 align:start position:0%
collect statement note that it has
 

00:32:17.350 --> 00:32:19.510 align:start position:0%
collect statement note that it has
figured<00:32:18.350><c> out</c><00:32:18.530><c> that</c><00:32:18.710><c> because</c><00:32:18.860><c> you</c><00:32:19.040><c> have</c><00:32:19.130><c> a</c><00:32:19.190><c> sort</c>

00:32:19.510 --> 00:32:19.520 align:start position:0%
figured out that because you have a sort
 

00:32:19.520 --> 00:32:23.020 align:start position:0%
figured out that because you have a sort
call<00:32:19.880><c> here</c><00:32:20.330><c> it</c><00:32:20.929><c> can</c><00:32:21.290><c> add</c><00:32:21.530><c> sorted</c><00:32:22.190><c> here</c><00:32:22.520><c> and</c>

00:32:23.020 --> 00:32:23.030 align:start position:0%
call here it can add sorted here and
 

00:32:23.030 --> 00:32:25.870 align:start position:0%
call here it can add sorted here and
this<00:32:23.179><c> is</c><00:32:23.330><c> a</c><00:32:23.480><c> fairly</c><00:32:24.260><c> new</c><00:32:24.700><c> piece</c><00:32:25.700><c> of</c>

00:32:25.870 --> 00:32:25.880 align:start position:0%
this is a fairly new piece of
 

00:32:25.880 --> 00:32:28.510 align:start position:0%
this is a fairly new piece of
intelligence<00:32:26.750><c> in</c><00:32:26.960><c> IntelliJ</c><00:32:27.650><c> some</c><00:32:28.400><c> of</c><00:32:28.460><c> the</c>

00:32:28.510 --> 00:32:28.520 align:start position:0%
intelligence in IntelliJ some of the
 

00:32:28.520 --> 00:32:30.370 align:start position:0%
intelligence in IntelliJ some of the
older<00:32:28.790><c> versions</c><00:32:29.179><c> don't</c><00:32:29.450><c> make</c><00:32:29.720><c> that</c><00:32:29.900><c> leap</c><00:32:30.110><c> so</c>

00:32:30.370 --> 00:32:30.380 align:start position:0%
older versions don't make that leap so
 

00:32:30.380 --> 00:32:31.960 align:start position:0%
older versions don't make that leap so
it's<00:32:30.500><c> worth</c><00:32:30.740><c> bearing</c><00:32:31.190><c> in</c><00:32:31.370><c> mind</c><00:32:31.429><c> that</c><00:32:31.790><c> if</c><00:32:31.880><c> you</c>

00:32:31.960 --> 00:32:31.970 align:start position:0%
it's worth bearing in mind that if you
 

00:32:31.970 --> 00:32:33.400 align:start position:0%
it's worth bearing in mind that if you
have<00:32:32.000><c> a</c><00:32:32.150><c> sort</c><00:32:32.480><c> cord</c><00:32:32.809><c> you</c><00:32:32.990><c> want</c><00:32:33.140><c> to</c><00:32:33.230><c> make</c><00:32:33.380><c> sure</c>

00:32:33.400 --> 00:32:33.410 align:start position:0%
have a sort cord you want to make sure
 

00:32:33.410 --> 00:32:35.620 align:start position:0%
have a sort cord you want to make sure
that<00:32:33.770><c> your</c><00:32:33.890><c> stream</c><00:32:34.250><c> operation</c><00:32:35.120><c> is</c><00:32:35.240><c> also</c>

00:32:35.620 --> 00:32:35.630 align:start position:0%
that your stream operation is also
 

00:32:35.630 --> 00:32:38.470 align:start position:0%
that your stream operation is also
sorted<00:32:36.080><c> and</c><00:32:36.550><c> then</c><00:32:37.550><c> what</c><00:32:37.760><c> do</c><00:32:37.850><c> we</c><00:32:37.940><c> do</c><00:32:38.059><c> so</c><00:32:38.270><c> then</c><00:32:38.390><c> we</c>

00:32:38.470 --> 00:32:38.480 align:start position:0%
sorted and then what do we do so then we
 

00:32:38.480 --> 00:32:40.180 align:start position:0%
sorted and then what do we do so then we
take<00:32:38.660><c> this</c><00:32:38.870><c> list</c><00:32:39.170><c> and</c><00:32:39.380><c> then</c><00:32:39.500><c> we</c><00:32:39.620><c> iterate</c><00:32:39.800><c> over</c>

00:32:40.180 --> 00:32:40.190 align:start position:0%
take this list and then we iterate over
 

00:32:40.190 --> 00:32:42.460 align:start position:0%
take this list and then we iterate over
it<00:32:40.429><c> and</c><00:32:40.520><c> do</c><00:32:40.700><c> something</c><00:32:41.000><c> so</c><00:32:41.750><c> that</c><00:32:41.870><c> seems</c><00:32:42.170><c> to</c><00:32:42.260><c> me</c>

00:32:42.460 --> 00:32:42.470 align:start position:0%
it and do something so that seems to me
 

00:32:42.470 --> 00:32:43.720 align:start position:0%
it and do something so that seems to me
like<00:32:42.500><c> perhaps</c><00:32:42.800><c> we</c><00:32:43.040><c> can</c><00:32:43.160><c> replaces</c>

00:32:43.720 --> 00:32:43.730 align:start position:0%
like perhaps we can replaces
 

00:32:43.730 --> 00:32:44.620 align:start position:0%
like perhaps we can replaces
straightforwardly

00:32:44.620 --> 00:32:44.630 align:start position:0%
straightforwardly
 

00:32:44.630 --> 00:32:50.169 align:start position:0%
straightforwardly
with<00:32:44.960><c> a</c><00:32:44.990><c> for</c><00:32:45.290><c> each</c><00:32:48.520><c> we'll</c><00:32:49.520><c> do</c><00:32:49.670><c> the</c><00:32:49.790><c> same</c><00:32:49.970><c> thing</c>

00:32:50.169 --> 00:32:50.179 align:start position:0%
with a for each we'll do the same thing
 

00:32:50.179 --> 00:32:52.000 align:start position:0%
with a for each we'll do the same thing
that<00:32:50.330><c> the</c><00:32:50.570><c> for</c><00:32:50.929><c> loop</c><00:32:51.050><c> was</c><00:32:51.200><c> doing</c><00:32:51.410><c> so</c><00:32:51.590><c> we</c><00:32:51.679><c> do</c><00:32:51.800><c> log</c>

00:32:52.000 --> 00:32:52.010 align:start position:0%
that the for loop was doing so we do log
 

00:32:52.010 --> 00:32:57.040 align:start position:0%
that the for loop was doing so we do log
line<00:32:52.190><c> dot</c><00:32:52.520><c> log</c><00:32:53.320><c> and</c><00:32:55.390><c> of</c><00:32:56.390><c> course</c><00:32:56.600><c> we</c><00:32:56.809><c> don't</c><00:32:56.929><c> need</c>

00:32:57.040 --> 00:32:57.050 align:start position:0%
line dot log and of course we don't need
 

00:32:57.050 --> 00:32:58.240 align:start position:0%
line dot log and of course we don't need
to<00:32:57.170><c> allocate</c><00:32:57.530><c> this</c><00:32:57.620><c> to</c><00:32:57.770><c> anything</c><00:32:58.040><c> because</c>

00:32:58.240 --> 00:32:58.250 align:start position:0%
to allocate this to anything because
 

00:32:58.250 --> 00:33:01.030 align:start position:0%
to allocate this to anything because
it's<00:32:58.400><c> not</c><00:32:58.550><c> doing</c><00:32:58.820><c> anything</c><00:32:59.090><c> anymore</c><00:32:59.330><c> and</c><00:33:00.040><c> then</c>

00:33:01.030 --> 00:33:01.040 align:start position:0%
it's not doing anything anymore and then
 

00:33:01.040 --> 00:33:05.810 align:start position:0%
it's not doing anything anymore and then
we<00:33:01.250><c> simply</c><00:33:01.700><c> remove</c><00:33:01.850><c> risk</c><00:33:04.179><c> so</c>

00:33:05.810 --> 00:33:05.820 align:start position:0%
we simply remove risk so
 

00:33:05.820 --> 00:33:08.930 align:start position:0%
we simply remove risk so
with<00:33:06.389><c> we</c><00:33:06.989><c> originally</c><00:33:07.350><c> had</c><00:33:07.440><c> an</c><00:33:07.950><c> iteration</c><00:33:08.460><c> here</c>

00:33:08.930 --> 00:33:08.940 align:start position:0%
with we originally had an iteration here
 

00:33:08.940 --> 00:33:11.090 align:start position:0%
with we originally had an iteration here
some<00:33:09.809><c> sort</c><00:33:10.019><c> of</c><00:33:10.049><c> iterating</c><00:33:10.590><c> happening</c><00:33:10.919><c> in</c><00:33:11.009><c> the</c>

00:33:11.090 --> 00:33:11.100 align:start position:0%
some sort of iterating happening in the
 

00:33:11.100 --> 00:33:13.249 align:start position:0%
some sort of iterating happening in the
sort<00:33:11.340><c> probably</c><00:33:11.729><c> and</c><00:33:11.909><c> another</c><00:33:12.570><c> iteration</c>

00:33:13.249 --> 00:33:13.259 align:start position:0%
sort probably and another iteration
 

00:33:13.259 --> 00:33:15.799 align:start position:0%
sort probably and another iteration
through<00:33:13.769><c> the</c><00:33:14.249><c> the</c><00:33:14.759><c> list</c><00:33:14.970><c> here</c><00:33:15.299><c> and</c><00:33:15.629><c> we've</c>

00:33:15.799 --> 00:33:15.809 align:start position:0%
through the the list here and we've
 

00:33:15.809 --> 00:33:17.389 align:start position:0%
through the the list here and we've
collapses<00:33:16.289><c> down</c><00:33:16.440><c> to</c><00:33:16.619><c> a</c><00:33:16.649><c> single</c><00:33:16.950><c> stream</c>

00:33:17.389 --> 00:33:17.399 align:start position:0%
collapses down to a single stream
 

00:33:17.399 --> 00:33:19.519 align:start position:0%
collapses down to a single stream
operation<00:33:17.879><c> so</c><00:33:18.059><c> it's</c><00:33:18.210><c> a</c><00:33:18.269><c> bit</c><00:33:18.450><c> neater</c><00:33:18.629><c> and</c><00:33:18.989><c> a</c><00:33:19.379><c> bit</c>

00:33:19.519 --> 00:33:19.529 align:start position:0%
operation so it's a bit neater and a bit
 

00:33:19.529 --> 00:33:21.799 align:start position:0%
operation so it's a bit neater and a bit
more<00:33:19.559><c> understandable</c><00:33:20.399><c> and</c><00:33:20.669><c> hopefully</c><00:33:21.629><c> we</c>

00:33:21.799 --> 00:33:21.809 align:start position:0%
more understandable and hopefully we
 

00:33:21.809 --> 00:33:23.149 align:start position:0%
more understandable and hopefully we
should<00:33:21.840><c> see</c><00:33:22.139><c> some</c><00:33:22.379><c> sort</c><00:33:22.470><c> of</c><00:33:22.559><c> impact</c><00:33:22.979><c> on</c><00:33:23.129><c> a</c>

00:33:23.149 --> 00:33:23.159 align:start position:0%
should see some sort of impact on a
 

00:33:23.159 --> 00:33:27.440 align:start position:0%
should see some sort of impact on a
performance<00:33:25.039><c> the</c><00:33:26.039><c> second</c><00:33:26.429><c> example</c><00:33:26.729><c> here</c><00:33:26.909><c> is</c>

00:33:27.440 --> 00:33:27.450 align:start position:0%
performance the second example here is
 

00:33:27.450 --> 00:33:33.619 align:start position:0%
performance the second example here is
in<00:33:28.229><c> query</c><00:33:29.009><c> in</c><00:33:29.249><c> pull</c><00:33:31.729><c> now</c><00:33:32.729><c> this</c><00:33:32.909><c> might</c><00:33:33.090><c> not</c><00:33:33.299><c> look</c>

00:33:33.619 --> 00:33:33.629 align:start position:0%
in query in pull now this might not look
 

00:33:33.629 --> 00:33:35.359 align:start position:0%
in query in pull now this might not look
like<00:33:33.690><c> multiple</c><00:33:34.320><c> operations</c><00:33:34.679><c> so</c><00:33:35.100><c> what</c><00:33:35.249><c> you're</c>

00:33:35.359 --> 00:33:35.369 align:start position:0%
like multiple operations so what you're
 

00:33:35.369 --> 00:33:39.109 align:start position:0%
like multiple operations so what you're
doing<00:33:35.669><c> is</c><00:33:36.029><c> you're</c><00:33:36.690><c> iterating</c><00:33:37.679><c> over</c><00:33:38.279><c> this</c>

00:33:39.109 --> 00:33:39.119 align:start position:0%
doing is you're iterating over this
 

00:33:39.119 --> 00:33:42.259 align:start position:0%
doing is you're iterating over this
collection<00:33:40.039><c> you're</c><00:33:41.039><c> assigning</c><00:33:41.429><c> stuff</c><00:33:41.849><c> adding</c>

00:33:42.259 --> 00:33:42.269 align:start position:0%
collection you're assigning stuff adding
 

00:33:42.269 --> 00:33:45.499 align:start position:0%
collection you're assigning stuff adding
them<00:33:42.419><c> to</c><00:33:42.599><c> another</c><00:33:42.929><c> field</c><00:33:43.639><c> list</c><00:33:44.639><c> and</c><00:33:44.909><c> then</c>

00:33:45.499 --> 00:33:45.509 align:start position:0%
them to another field list and then
 

00:33:45.509 --> 00:33:48.379 align:start position:0%
them to another field list and then
you're<00:33:45.899><c> doing</c><00:33:46.169><c> fields</c><00:33:46.590><c> to</c><00:33:47.039><c> array</c><00:33:47.369><c> and</c><00:33:47.700><c> passing</c>

00:33:48.379 --> 00:33:48.389 align:start position:0%
you're doing fields to array and passing
 

00:33:48.389 --> 00:33:51.320 align:start position:0%
you're doing fields to array and passing
that<00:33:48.509><c> into</c><00:33:48.989><c> another</c><00:33:49.529><c> method</c><00:33:49.919><c> so</c><00:33:50.519><c> you're</c><00:33:51.090><c> doing</c>

00:33:51.320 --> 00:33:51.330 align:start position:0%
that into another method so you're doing
 

00:33:51.330 --> 00:33:53.810 align:start position:0%
that into another method so you're doing
at<00:33:51.659><c> least</c><00:33:51.929><c> two</c><00:33:52.259><c> operations</c><00:33:52.889><c> there</c><00:33:53.070><c> one</c><00:33:53.309><c> you're</c>

00:33:53.810 --> 00:33:53.820 align:start position:0%
at least two operations there one you're
 

00:33:53.820 --> 00:33:55.759 align:start position:0%
at least two operations there one you're
iterating<00:33:54.239><c> over</c><00:33:54.539><c> a</c><00:33:54.690><c> list</c><00:33:54.929><c> in</c><00:33:55.109><c> creating</c><00:33:55.559><c> a</c><00:33:55.590><c> new</c>

00:33:55.759 --> 00:33:55.769 align:start position:0%
iterating over a list in creating a new
 

00:33:55.769 --> 00:33:57.739 align:start position:0%
iterating over a list in creating a new
list<00:33:56.009><c> and</c><00:33:56.220><c> to</c><00:33:56.909><c> you're</c><00:33:57.210><c> then</c><00:33:57.330><c> turning</c><00:33:57.570><c> that</c>

00:33:57.739 --> 00:33:57.749 align:start position:0%
list and to you're then turning that
 

00:33:57.749 --> 00:34:01.430 align:start position:0%
list and to you're then turning that
list<00:33:58.049><c> into</c><00:33:58.289><c> an</c><00:33:58.529><c> array</c><00:33:59.029><c> we</c><00:34:00.029><c> can</c><00:34:00.059><c> actually</c><00:34:00.570><c> see</c>

00:34:01.430 --> 00:34:01.440 align:start position:0%
list into an array we can actually see
 

00:34:01.440 --> 00:34:03.529 align:start position:0%
list into an array we can actually see
what<00:34:01.710><c> we</c><00:34:01.859><c> can</c><00:34:02.039><c> do</c><00:34:02.190><c> to</c><00:34:02.369><c> improve</c><00:34:02.519><c> this</c><00:34:02.940><c> again</c><00:34:03.359><c> we</c>

00:34:03.529 --> 00:34:03.539 align:start position:0%
what we can do to improve this again we
 

00:34:03.539 --> 00:34:06.259 align:start position:0%
what we can do to improve this again we
have<00:34:03.749><c> an</c><00:34:04.080><c> initial</c><00:34:04.559><c> capacity</c><00:34:05.039><c> on</c><00:34:05.609><c> this</c><00:34:05.759><c> list</c><00:34:06.059><c> so</c>

00:34:06.259 --> 00:34:06.269 align:start position:0%
have an initial capacity on this list so
 

00:34:06.269 --> 00:34:08.599 align:start position:0%
have an initial capacity on this list so
it's<00:34:06.840><c> not</c><00:34:07.229><c> straightforward</c><00:34:07.559><c> to</c><00:34:07.950><c> turn</c><00:34:08.190><c> it</c><00:34:08.399><c> into</c>

00:34:08.599 --> 00:34:08.609 align:start position:0%
it's not straightforward to turn it into
 

00:34:08.609 --> 00:34:10.460 align:start position:0%
it's not straightforward to turn it into
a<00:34:08.760><c> collect</c><00:34:09.059><c> straightway</c><00:34:09.389><c> I'm</c><00:34:09.960><c> going</c><00:34:10.409><c> to</c>

00:34:10.460 --> 00:34:10.470 align:start position:0%
a collect straightway I'm going to
 

00:34:10.470 --> 00:34:14.240 align:start position:0%
a collect straightway I'm going to
remove<00:34:10.679><c> that</c><00:34:10.740><c> initial</c><00:34:11.280><c> capacity</c><00:34:11.629><c> and</c><00:34:13.250><c> then</c>

00:34:14.240 --> 00:34:14.250 align:start position:0%
remove that initial capacity and then
 

00:34:14.250 --> 00:34:15.799 align:start position:0%
remove that initial capacity and then
I'm<00:34:14.339><c> going</c><00:34:14.460><c> to</c><00:34:14.490><c> replace</c><00:34:14.790><c> it</c><00:34:15.000><c> it</c><00:34:15.179><c> says</c><00:34:15.389><c> replaced</c>

00:34:15.799 --> 00:34:15.809 align:start position:0%
I'm going to replace it it says replaced
 

00:34:15.809 --> 00:34:19.669 align:start position:0%
I'm going to replace it it says replaced
with<00:34:16.049><c> two</c><00:34:16.379><c> array</c><00:34:16.740><c> now</c><00:34:17.839><c> this</c><00:34:18.839><c> is</c><00:34:19.020><c> some</c><00:34:19.260><c> magic</c>

00:34:19.669 --> 00:34:19.679 align:start position:0%
with two array now this is some magic
 

00:34:19.679 --> 00:34:21.829 align:start position:0%
with two array now this is some magic
that<00:34:19.829><c> I</c><00:34:19.919><c> think</c><00:34:20.190><c> and</c><00:34:20.490><c> this</c><00:34:20.940><c> this</c><00:34:21.720><c> particular</c>

00:34:21.829 --> 00:34:21.839 align:start position:0%
that I think and this this particular
 

00:34:21.839 --> 00:34:24.319 align:start position:0%
that I think and this this particular
refactoring<00:34:22.710><c> did</c><00:34:23.099><c> improve</c><00:34:23.490><c> in</c><00:34:23.790><c> IntelliJ</c>

00:34:24.319 --> 00:34:24.329 align:start position:0%
refactoring did improve in IntelliJ
 

00:34:24.329 --> 00:34:27.230 align:start position:0%
refactoring did improve in IntelliJ
twenty<00:34:24.659><c> sixteen</c><00:34:24.990><c> point</c><00:34:25.290><c> three</c><00:34:25.700><c> and</c><00:34:26.700><c> I</c><00:34:26.879><c> think</c>

00:34:27.230 --> 00:34:27.240 align:start position:0%
twenty sixteen point three and I think
 

00:34:27.240 --> 00:34:29.899 align:start position:0%
twenty sixteen point three and I think
it's<00:34:27.389><c> got</c><00:34:27.510><c> even</c><00:34:27.750><c> smarter</c><00:34:28.470><c> in</c><00:34:28.619><c> 2017</c><00:34:29.369><c> point</c><00:34:29.669><c> one</c>

00:34:29.899 --> 00:34:29.909 align:start position:0%
it's got even smarter in 2017 point one
 

00:34:29.909 --> 00:34:32.210 align:start position:0%
it's got even smarter in 2017 point one
because<00:34:30.629><c> when</c><00:34:30.899><c> I</c><00:34:30.929><c> demoed</c><00:34:31.260><c> this</c><00:34:31.470><c> last</c><00:34:31.710><c> time</c><00:34:31.950><c> I</c>

00:34:32.210 --> 00:34:32.220 align:start position:0%
because when I demoed this last time I
 

00:34:32.220 --> 00:34:34.069 align:start position:0%
because when I demoed this last time I
still<00:34:32.669><c> had</c><00:34:32.849><c> to</c><00:34:32.909><c> do</c><00:34:33.030><c> some</c><00:34:33.210><c> manual</c><00:34:33.419><c> steps</c><00:34:33.839><c> and</c>

00:34:34.069 --> 00:34:34.079 align:start position:0%
still had to do some manual steps and
 

00:34:34.079 --> 00:34:36.079 align:start position:0%
still had to do some manual steps and
now<00:34:34.200><c> I</c><00:34:34.230><c> don't</c><00:34:34.379><c> have</c><00:34:34.589><c> to</c><00:34:34.679><c> do</c><00:34:34.799><c> any</c><00:34:35.069><c> manual</c><00:34:35.579><c> steps</c>

00:34:36.079 --> 00:34:36.089 align:start position:0%
now I don't have to do any manual steps
 

00:34:36.089 --> 00:34:39.619 align:start position:0%
now I don't have to do any manual steps
and<00:34:36.809><c> what</c><00:34:36.960><c> it's</c><00:34:37.109><c> done</c><00:34:37.319><c> is</c><00:34:37.940><c> it's</c><00:34:38.940><c> taken</c><00:34:39.359><c> all</c><00:34:39.569><c> of</c>

00:34:39.619 --> 00:34:39.629 align:start position:0%
and what it's done is it's taken all of
 

00:34:39.629 --> 00:34:41.089 align:start position:0%
and what it's done is it's taken all of
my<00:34:39.780><c> original</c><00:34:40.049><c> code</c><00:34:40.440><c> and</c><00:34:40.619><c> pretty</c><00:34:40.919><c> much</c>

00:34:41.089 --> 00:34:41.099 align:start position:0%
my original code and pretty much
 

00:34:41.099 --> 00:34:43.129 align:start position:0%
my original code and pretty much
completely<00:34:41.520><c> rewritten</c><00:34:41.909><c> it</c><00:34:42.149><c> now</c><00:34:42.569><c> I</c><00:34:42.629><c> removed</c>

00:34:43.129 --> 00:34:43.139 align:start position:0%
completely rewritten it now I removed
 

00:34:43.139 --> 00:34:46.010 align:start position:0%
completely rewritten it now I removed
this<00:34:43.819><c> this</c><00:34:44.819><c> size</c><00:34:45.059><c> allocation</c><00:34:45.780><c> to</c><00:34:45.929><c> be</c>

00:34:46.010 --> 00:34:46.020 align:start position:0%
this this size allocation to be
 

00:34:46.020 --> 00:34:48.980 align:start position:0%
this this size allocation to be
ArrayList<00:34:46.530><c> it's</c><00:34:47.250><c> using</c><00:34:47.849><c> the</c><00:34:48.210><c> get</c><00:34:48.569><c> name</c><00:34:48.780><c> to</c>

00:34:48.980 --> 00:34:48.990 align:start position:0%
ArrayList it's using the get name to
 

00:34:48.990 --> 00:34:51.399 align:start position:0%
ArrayList it's using the get name to
store<00:34:49.290><c> just</c><00:34:49.950><c> putting</c><00:34:50.190><c> that</c><00:34:50.280><c> into</c><00:34:50.460><c> a</c><00:34:50.609><c> map</c><00:34:50.849><c> and</c>

00:34:51.399 --> 00:34:51.409 align:start position:0%
store just putting that into a map and
 

00:34:51.409 --> 00:34:53.720 align:start position:0%
store just putting that into a map and
then<00:34:52.409><c> it</c><00:34:52.559><c> works</c><00:34:52.859><c> out</c><00:34:53.129><c> that</c><00:34:53.159><c> what</c><00:34:53.520><c> I've</c><00:34:53.700><c> done</c>

00:34:53.720 --> 00:34:53.730 align:start position:0%
then it works out that what I've done
 

00:34:53.730 --> 00:34:56.000 align:start position:0%
then it works out that what I've done
here<00:34:54.270><c> is</c><00:34:54.329><c> I've</c><00:34:54.750><c> added</c><00:34:54.960><c> things</c><00:34:55.319><c> into</c><00:34:55.679><c> a</c><00:34:55.710><c> list</c>

00:34:56.000 --> 00:34:56.010 align:start position:0%
here is I've added things into a list
 

00:34:56.010 --> 00:34:59.299 align:start position:0%
here is I've added things into a list
and<00:34:56.250><c> then</c><00:34:56.790><c> I</c><00:34:56.819><c> call</c><00:34:57.270><c> to</c><00:34:57.540><c> array</c><00:34:57.839><c> so</c><00:34:58.650><c> intelligence</c>

00:34:59.299 --> 00:34:59.309 align:start position:0%
and then I call to array so intelligence
 

00:34:59.309 --> 00:35:01.130 align:start position:0%
and then I call to array so intelligence
collapsed<00:34:59.760><c> that</c><00:34:59.849><c> straight</c><00:35:00.270><c> down</c><00:35:00.510><c> into</c><00:35:00.780><c> a</c><00:35:00.900><c> to</c>

00:35:01.130 --> 00:35:01.140 align:start position:0%
collapsed that straight down into a to
 

00:35:01.140 --> 00:35:04.160 align:start position:0%
collapsed that straight down into a to
array<00:35:01.440><c> call</c><00:35:01.740><c> and</c><00:35:02.010><c> in</c><00:35:02.520><c> lined</c><00:35:02.910><c> that</c><00:35:03.240><c> into</c><00:35:04.049><c> the</c>

00:35:04.160 --> 00:35:04.170 align:start position:0%
array call and in lined that into the
 

00:35:04.170 --> 00:35:06.079 align:start position:0%
array call and in lined that into the
retrieved<00:35:04.559><c> fields</c><00:35:05.069><c> method</c><00:35:05.549><c> called</c><00:35:05.790><c> as</c><00:35:05.910><c> well</c>

00:35:06.079 --> 00:35:06.089 align:start position:0%
retrieved fields method called as well
 

00:35:06.089 --> 00:35:08.240 align:start position:0%
retrieved fields method called as well
so<00:35:06.930><c> there's</c><00:35:07.079><c> quite</c><00:35:07.319><c> a</c><00:35:07.349><c> lot</c><00:35:07.559><c> of</c><00:35:07.589><c> stuff</c><00:35:07.829><c> going</c><00:35:08.069><c> on</c>

00:35:08.240 --> 00:35:08.250 align:start position:0%
so there's quite a lot of stuff going on
 

00:35:08.250 --> 00:35:10.010 align:start position:0%
so there's quite a lot of stuff going on
and<00:35:08.369><c> now</c><00:35:08.490><c> you</c><00:35:08.760><c> might</c><00:35:08.910><c> want</c><00:35:09.180><c> to</c><00:35:09.240><c> do</c><00:35:09.420><c> with</c><00:35:09.809><c> some</c>

00:35:10.010 --> 00:35:10.020 align:start position:0%
and now you might want to do with some
 

00:35:10.020 --> 00:35:11.569 align:start position:0%
and now you might want to do with some
of<00:35:10.140><c> these</c><00:35:10.230><c> operations</c><00:35:10.829><c> you</c><00:35:10.950><c> might</c><00:35:11.010><c> want</c><00:35:11.309><c> to</c><00:35:11.400><c> do</c>

00:35:11.569 --> 00:35:11.579 align:start position:0%
of these operations you might want to do
 

00:35:11.579 --> 00:35:13.579 align:start position:0%
of these operations you might want to do
them<00:35:11.790><c> in</c><00:35:12.030><c> incremental</c><00:35:12.660><c> steps</c><00:35:12.990><c> to</c><00:35:13.200><c> see</c><00:35:13.380><c> what's</c>

00:35:13.579 --> 00:35:13.589 align:start position:0%
them in incremental steps to see what's
 

00:35:13.589 --> 00:35:18.960 align:start position:0%
them in incremental steps to see what's
actually<00:35:13.740><c> happening</c>

00:35:18.960 --> 00:35:18.970 align:start position:0%
 
 

00:35:18.970 --> 00:35:20.430 align:start position:0%
 
example<00:35:19.510><c> where</c><00:35:19.630><c> we</c><00:35:19.720><c> had</c><00:35:19.900><c> sort</c><00:35:20.109><c> of</c><00:35:20.170><c> three</c>

00:35:20.430 --> 00:35:20.440 align:start position:0%
example where we had sort of three
 

00:35:20.440 --> 00:35:23.220 align:start position:0%
example where we had sort of three
operations<00:35:21.010><c> collapsed</c><00:35:21.460><c> into</c><00:35:21.700><c> one</c><00:35:22.230><c> the</c>

00:35:23.220 --> 00:35:23.230 align:start position:0%
operations collapsed into one the
 

00:35:23.230 --> 00:35:25.410 align:start position:0%
operations collapsed into one the
performance<00:35:23.710><c> here</c><00:35:23.890><c> not</c><00:35:24.340><c> surprisingly</c><00:35:24.940><c> the</c>

00:35:25.410 --> 00:35:25.420 align:start position:0%
performance here not surprisingly the
 

00:35:25.420 --> 00:35:27.599 align:start position:0%
performance here not surprisingly the
refactored<00:35:26.380><c> code</c><00:35:26.619><c> performs</c><00:35:27.070><c> better</c><00:35:27.280><c> than</c><00:35:27.460><c> the</c>

00:35:27.599 --> 00:35:27.609 align:start position:0%
refactored code performs better than the
 

00:35:27.609 --> 00:35:30.300 align:start position:0%
refactored code performs better than the
original<00:35:28.060><c> code</c><00:35:28.270><c> not</c><00:35:29.020><c> by</c><00:35:29.290><c> millions</c><00:35:29.980><c> of</c><00:35:30.070><c> orders</c>

00:35:30.300 --> 00:35:30.310 align:start position:0%
original code not by millions of orders
 

00:35:30.310 --> 00:35:31.710 align:start position:0%
original code not by millions of orders
of<00:35:30.400><c> magnitude</c><00:35:30.790><c> but</c><00:35:30.910><c> it</c><00:35:31.000><c> does</c><00:35:31.150><c> perform</c><00:35:31.540><c> better</c>

00:35:31.710 --> 00:35:31.720 align:start position:0%
of magnitude but it does perform better
 

00:35:31.720 --> 00:35:33.390 align:start position:0%
of magnitude but it does perform better
this<00:35:32.109><c> is</c><00:35:32.170><c> good</c><00:35:32.530><c> it's</c><00:35:32.680><c> more</c><00:35:32.920><c> readable</c><00:35:33.190><c> and</c>

00:35:33.390 --> 00:35:33.400 align:start position:0%
this is good it's more readable and
 

00:35:33.400 --> 00:35:38.520 align:start position:0%
this is good it's more readable and
margining<00:35:34.390><c> more</c><00:35:34.510><c> performance</c><00:35:36.510><c> now</c><00:35:37.530><c> this</c>

00:35:38.520 --> 00:35:38.530 align:start position:0%
margining more performance now this
 

00:35:38.530 --> 00:35:42.120 align:start position:0%
margining more performance now this
second<00:35:39.070><c> example</c><00:35:39.570><c> the</c><00:35:40.590><c> like</c><00:35:41.590><c> I</c><00:35:41.680><c> said</c><00:35:41.710><c> there's</c><00:35:42.010><c> a</c>

00:35:42.120 --> 00:35:42.130 align:start position:0%
second example the like I said there's a
 

00:35:42.130 --> 00:35:44.339 align:start position:0%
second example the like I said there's a
sub<00:35:42.460><c> naive</c><00:35:42.910><c> intermediate</c><00:35:43.810><c> steps</c><00:35:44.109><c> for</c>

00:35:44.339 --> 00:35:44.349 align:start position:0%
sub naive intermediate steps for
 

00:35:44.349 --> 00:35:46.050 align:start position:0%
sub naive intermediate steps for
refactoring<00:35:44.590><c> this</c><00:35:44.950><c> where</c><00:35:45.160><c> you</c><00:35:45.280><c> might</c><00:35:45.490><c> say</c><00:35:45.760><c> I'm</c>

00:35:46.050 --> 00:35:46.060 align:start position:0%
refactoring this where you might say I'm
 

00:35:46.060 --> 00:35:49.260 align:start position:0%
refactoring this where you might say I'm
going<00:35:46.390><c> to</c><00:35:46.950><c> collect</c><00:35:47.950><c> everything</c><00:35:48.460><c> into</c><00:35:48.910><c> a</c><00:35:48.940><c> list</c>

00:35:49.260 --> 00:35:49.270 align:start position:0%
going to collect everything into a list
 

00:35:49.270 --> 00:35:52.830 align:start position:0%
going to collect everything into a list
and<00:35:49.599><c> then</c><00:35:50.410><c> called</c><00:35:50.980><c> to</c><00:35:51.250><c> array</c><00:35:51.520><c> on</c><00:35:51.700><c> it</c><00:35:51.880><c> so</c><00:35:52.810><c> I</c>

00:35:52.830 --> 00:35:52.840 align:start position:0%
and then called to array on it so I
 

00:35:52.840 --> 00:35:54.780 align:start position:0%
and then called to array on it so I
wanted<00:35:53.230><c> to</c><00:35:53.320><c> performance</c><00:35:53.830><c> test</c><00:35:54.099><c> that</c><00:35:54.369><c> to</c><00:35:54.580><c> see</c>

00:35:54.780 --> 00:35:54.790 align:start position:0%
wanted to performance test that to see
 

00:35:54.790 --> 00:35:56.730 align:start position:0%
wanted to performance test that to see
what<00:35:55.450><c> the</c><00:35:55.599><c> impact</c><00:35:55.900><c> was</c><00:35:56.020><c> here</c><00:35:56.230><c> because</c><00:35:56.380><c> this</c><00:35:56.590><c> is</c>

00:35:56.730 --> 00:35:56.740 align:start position:0%
what the impact was here because this is
 

00:35:56.740 --> 00:35:58.290 align:start position:0%
what the impact was here because this is
basically<00:35:57.070><c> two</c><00:35:57.340><c> operations</c><00:35:57.880><c> we're</c><00:35:58.060><c> going</c><00:35:58.210><c> to</c>

00:35:58.290 --> 00:35:58.300 align:start position:0%
basically two operations we're going to
 

00:35:58.300 --> 00:36:00.330 align:start position:0%
basically two operations we're going to
collect<00:35:58.540><c> and</c><00:35:58.810><c> then</c><00:35:59.200><c> a</c><00:35:59.380><c> to</c><00:35:59.590><c> array</c><00:35:59.859><c> which</c><00:36:00.070><c> is</c><00:36:00.220><c> the</c>

00:36:00.330 --> 00:36:00.340 align:start position:0%
collect and then a to array which is the
 

00:36:00.340 --> 00:36:02.339 align:start position:0%
collect and then a to array which is the
same<00:36:00.520><c> as</c><00:36:00.640><c> the</c><00:36:00.730><c> original</c><00:36:00.820><c> code</c><00:36:01.330><c> and</c><00:36:01.599><c> then</c><00:36:02.260><c> I</c>

00:36:02.339 --> 00:36:02.349 align:start position:0%
same as the original code and then I
 

00:36:02.349 --> 00:36:04.130 align:start position:0%
same as the original code and then I
want<00:36:02.530><c> to</c><00:36:02.590><c> compare</c><00:36:02.890><c> that</c><00:36:03.040><c> against</c><00:36:03.490><c> the</c><00:36:03.609><c> new</c>

00:36:04.130 --> 00:36:04.140 align:start position:0%
want to compare that against the new
 

00:36:04.140 --> 00:36:06.480 align:start position:0%
want to compare that against the new
complete<00:36:05.140><c> refactoring</c><00:36:05.800><c> where</c><00:36:06.250><c> we</c><00:36:06.340><c> go</c>

00:36:06.480 --> 00:36:06.490 align:start position:0%
complete refactoring where we go
 

00:36:06.490 --> 00:36:11.250 align:start position:0%
complete refactoring where we go
straight<00:36:06.849><c> to</c><00:36:07.210><c> two</c><00:36:08.170><c> array</c><00:36:08.440><c> and</c><00:36:09.990><c> here</c><00:36:10.990><c> we</c><00:36:11.080><c> can</c>

00:36:11.250 --> 00:36:11.260 align:start position:0%
straight to two array and here we can
 

00:36:11.260 --> 00:36:13.950 align:start position:0%
straight to two array and here we can
see<00:36:11.470><c> that</c><00:36:11.830><c> the</c><00:36:12.400><c> naive</c><00:36:13.119><c> refactoring</c><00:36:13.690><c> with</c><00:36:13.869><c> the</c>

00:36:13.950 --> 00:36:13.960 align:start position:0%
see that the naive refactoring with the
 

00:36:13.960 --> 00:36:15.900 align:start position:0%
see that the naive refactoring with the
two<00:36:14.140><c> steps</c><00:36:14.470><c> doesn't</c><00:36:15.010><c> perform</c><00:36:15.250><c> as</c><00:36:15.400><c> well</c><00:36:15.609><c> as</c><00:36:15.760><c> the</c>

00:36:15.900 --> 00:36:15.910 align:start position:0%
two steps doesn't perform as well as the
 

00:36:15.910 --> 00:36:18.420 align:start position:0%
two steps doesn't perform as well as the
other<00:36:16.030><c> operations</c><00:36:16.630><c> and</c><00:36:16.869><c> the</c><00:36:17.770><c> the</c><00:36:18.160><c> fully</c>

00:36:18.420 --> 00:36:18.430 align:start position:0%
other operations and the the fully
 

00:36:18.430 --> 00:36:20.099 align:start position:0%
other operations and the the fully
refactored<00:36:18.940><c> one</c><00:36:19.090><c> performs</c><00:36:19.480><c> almost</c><00:36:19.780><c> as</c><00:36:19.930><c> well</c>

00:36:20.099 --> 00:36:20.109 align:start position:0%
refactored one performs almost as well
 

00:36:20.109 --> 00:36:22.320 align:start position:0%
refactored one performs almost as well
as<00:36:20.380><c> the</c><00:36:20.830><c> original</c><00:36:21.310><c> and</c><00:36:21.490><c> this</c><00:36:21.580><c> is</c><00:36:21.730><c> a</c><00:36:21.760><c> quite</c><00:36:22.240><c> a</c>

00:36:22.320 --> 00:36:22.330 align:start position:0%
as the original and this is a quite a
 

00:36:22.330 --> 00:36:24.060 align:start position:0%
as the original and this is a quite a
high<00:36:22.599><c> number</c><00:36:22.630><c> of</c><00:36:22.960><c> operations</c><00:36:23.410><c> per</c><00:36:23.560><c> second</c><00:36:23.920><c> so</c>

00:36:24.060 --> 00:36:24.070 align:start position:0%
high number of operations per second so
 

00:36:24.070 --> 00:36:25.740 align:start position:0%
high number of operations per second so
this<00:36:24.190><c> is</c><00:36:24.369><c> quite</c><00:36:24.580><c> a</c><00:36:24.670><c> good</c><00:36:24.970><c> refactoring</c><00:36:25.630><c> in</c>

00:36:25.740 --> 00:36:25.750 align:start position:0%
this is quite a good refactoring in
 

00:36:25.750 --> 00:36:30.450 align:start position:0%
this is quite a good refactoring in
escape<00:36:28.230><c> I've</c><00:36:29.230><c> had</c><00:36:29.500><c> to</c><00:36:29.589><c> say</c><00:36:29.770><c> the</c><00:36:30.160><c> performance</c>

00:36:30.450 --> 00:36:30.460 align:start position:0%
escape I've had to say the performance
 

00:36:30.460 --> 00:36:32.880 align:start position:0%
escape I've had to say the performance
analysis<00:36:30.970><c> is</c><00:36:31.240><c> inconclusive</c><00:36:31.869><c> even</c><00:36:32.650><c> though</c><00:36:32.740><c> I'm</c>

00:36:32.880 --> 00:36:32.890 align:start position:0%
analysis is inconclusive even though I'm
 

00:36:32.890 --> 00:36:34.500 align:start position:0%
analysis is inconclusive even though I'm
much<00:36:33.160><c> happier</c><00:36:33.310><c> with</c><00:36:33.640><c> these</c><00:36:33.790><c> results</c><00:36:34.000><c> than</c><00:36:34.390><c> the</c>

00:36:34.500 --> 00:36:34.510 align:start position:0%
much happier with these results than the
 

00:36:34.510 --> 00:36:37.109 align:start position:0%
much happier with these results than the
other<00:36:34.630><c> ones</c><00:36:35.580><c> because</c><00:36:36.580><c> again</c><00:36:36.970><c> we're</c><00:36:37.089><c> not</c>

00:36:37.109 --> 00:36:37.119 align:start position:0%
other ones because again we're not
 

00:36:37.119 --> 00:36:38.430 align:start position:0%
other ones because again we're not
talking<00:36:37.300><c> about</c><00:36:37.450><c> orders</c><00:36:37.839><c> of</c><00:36:37.930><c> magnitude</c><00:36:38.410><c> better</c>

00:36:38.430 --> 00:36:38.440 align:start position:0%
talking about orders of magnitude better
 

00:36:38.440 --> 00:36:42.000 align:start position:0%
talking about orders of magnitude better
but<00:36:39.220><c> the</c><00:36:39.520><c> the</c><00:36:40.080><c> findings</c><00:36:41.080><c> here</c><00:36:41.349><c> is</c><00:36:41.680><c> that</c><00:36:41.890><c> we</c>

00:36:42.000 --> 00:36:42.010 align:start position:0%
but the the findings here is that we
 

00:36:42.010 --> 00:36:43.560 align:start position:0%
but the the findings here is that we
don't<00:36:42.220><c> have</c><00:36:42.369><c> a</c><00:36:42.400><c> negative</c><00:36:42.730><c> impact</c><00:36:43.150><c> on</c>

00:36:43.560 --> 00:36:43.570 align:start position:0%
don't have a negative impact on
 

00:36:43.570 --> 00:36:45.000 align:start position:0%
don't have a negative impact on
performance<00:36:43.720><c> by</c><00:36:44.230><c> doing</c><00:36:44.619><c> these</c><00:36:44.770><c> particular</c>

00:36:45.000 --> 00:36:45.010 align:start position:0%
performance by doing these particular
 

00:36:45.010 --> 00:36:49.589 align:start position:0%
performance by doing these particular
refactoring<00:36:47.609><c> now</c><00:36:48.609><c> I've</c><00:36:48.700><c> just</c><00:36:48.849><c> got</c><00:36:49.000><c> two</c><00:36:49.270><c> more</c>

00:36:49.589 --> 00:36:49.599 align:start position:0%
refactoring now I've just got two more
 

00:36:49.599 --> 00:36:51.510 align:start position:0%
refactoring now I've just got two more
research<00:36:50.290><c> things</c><00:36:50.500><c> to</c><00:36:50.619><c> show</c><00:36:50.830><c> and</c><00:36:51.250><c> then</c><00:36:51.430><c> we're</c>

00:36:51.510 --> 00:36:51.520 align:start position:0%
research things to show and then we're
 

00:36:51.520 --> 00:36:53.160 align:start position:0%
research things to show and then we're
going<00:36:51.640><c> to</c><00:36:51.700><c> sort</c><00:36:51.880><c> of</c><00:36:51.910><c> take</c><00:36:52.210><c> apart</c><00:36:52.540><c> some</c><00:36:52.660><c> of</c><00:36:52.839><c> the</c>

00:36:53.160 --> 00:36:53.170 align:start position:0%
going to sort of take apart some of the
 

00:36:53.170 --> 00:36:54.839 align:start position:0%
going to sort of take apart some of the
some<00:36:53.680><c> of</c><00:36:53.770><c> the</c><00:36:53.859><c> things</c><00:36:54.040><c> that</c><00:36:54.099><c> we</c><00:36:54.250><c> found</c><00:36:54.460><c> and</c>

00:36:54.839 --> 00:36:54.849 align:start position:0%
some of the things that we found and
 

00:36:54.849 --> 00:37:00.390 align:start position:0%
some of the things that we found and
come<00:36:55.480><c> to</c><00:36:55.599><c> some</c><00:36:55.750><c> conclusions</c><00:36:57.839><c> this</c><00:36:59.220><c> for</c><00:37:00.220><c> loop</c>

00:37:00.390 --> 00:37:00.400 align:start position:0%
come to some conclusions this for loop
 

00:37:00.400 --> 00:37:02.550 align:start position:0%
come to some conclusions this for loop
to<00:37:00.430><c> any</c><00:37:00.820><c> match</c><00:37:01.060><c> is</c><00:37:01.300><c> a</c><00:37:01.359><c> new</c><00:37:01.690><c> refactoring</c><00:37:02.530><c> which</c>

00:37:02.550 --> 00:37:02.560 align:start position:0%
to any match is a new refactoring which
 

00:37:02.560 --> 00:37:04.260 align:start position:0%
to any match is a new refactoring which
came<00:37:02.859><c> in</c><00:37:02.980><c> in</c><00:37:03.070><c> twenty</c><00:37:03.430><c> sixteen</c><00:37:03.820><c> point</c><00:37:04.210><c> three</c>

00:37:04.260 --> 00:37:04.270 align:start position:0%
came in in twenty sixteen point three
 

00:37:04.270 --> 00:37:15.600 align:start position:0%
came in in twenty sixteen point three
I'll<00:37:05.250><c> show</c><00:37:06.250><c> you</c><00:37:06.310><c> an</c><00:37:06.490><c> example</c>

00:37:15.600 --> 00:37:15.610 align:start position:0%
 
 

00:37:15.610 --> 00:37:19.050 align:start position:0%
 
I'd<00:37:15.700><c> lost</c><00:37:15.910><c> it</c><00:37:16.090><c> if</c><00:37:16.390><c> you</c><00:37:17.340><c> so</c><00:37:18.340><c> any</c><00:37:18.610><c> match</c><00:37:18.790><c> is</c><00:37:18.940><c> a</c>

00:37:19.050 --> 00:37:19.060 align:start position:0%
I'd lost it if you so any match is a
 

00:37:19.060 --> 00:37:20.580 align:start position:0%
I'd lost it if you so any match is a
fairly<00:37:19.270><c> straightforward</c><00:37:19.570><c> operation</c><00:37:19.900><c> it's</c>

00:37:20.580 --> 00:37:20.590 align:start position:0%
fairly straightforward operation it's
 

00:37:20.590 --> 00:37:22.710 align:start position:0%
fairly straightforward operation it's
where<00:37:21.070><c> you</c><00:37:21.370><c> are</c><00:37:21.910><c> going</c><00:37:22.210><c> to</c><00:37:22.270><c> be</c><00:37:22.360><c> limping</c>

00:37:22.710 --> 00:37:22.720 align:start position:0%
where you are going to be limping
 

00:37:22.720 --> 00:37:25.050 align:start position:0%
where you are going to be limping
through<00:37:22.750><c> some</c><00:37:23.290><c> lists</c><00:37:23.740><c> and</c><00:37:24.040><c> as</c><00:37:24.520><c> soon</c><00:37:24.790><c> as</c><00:37:24.910><c> you</c>

00:37:25.050 --> 00:37:25.060 align:start position:0%
through some lists and as soon as you
 

00:37:25.060 --> 00:37:26.580 align:start position:0%
through some lists and as soon as you
find<00:37:25.300><c> something</c><00:37:25.840><c> which</c><00:37:26.050><c> matches</c><00:37:26.320><c> some</c>

00:37:26.580 --> 00:37:26.590 align:start position:0%
find something which matches some
 

00:37:26.590 --> 00:37:29.760 align:start position:0%
find something which matches some
criteria<00:37:27.160><c> then</c><00:37:27.880><c> you</c><00:37:27.910><c> return</c><00:37:28.810><c> a</c><00:37:29.140><c> true</c><00:37:29.470><c> or</c><00:37:29.620><c> false</c>

00:37:29.760 --> 00:37:29.770 align:start position:0%
criteria then you return a true or false
 

00:37:29.770 --> 00:37:32.130 align:start position:0%
criteria then you return a true or false
so<00:37:30.580><c> this</c><00:37:30.820><c> can</c><00:37:30.970><c> be</c><00:37:31.000><c> automatically</c><00:37:31.600><c> turned</c><00:37:31.900><c> into</c>

00:37:32.130 --> 00:37:32.140 align:start position:0%
so this can be automatically turned into
 

00:37:32.140 --> 00:37:37.170 align:start position:0%
so this can be automatically turned into
and<00:37:32.970><c> any</c><00:37:33.970><c> match</c><00:37:34.210><c> operation</c><00:37:34.930><c> here</c><00:37:35.880><c> you</c><00:37:36.880><c> can</c><00:37:37.060><c> see</c>

00:37:37.170 --> 00:37:37.180 align:start position:0%
and any match operation here you can see
 

00:37:37.180 --> 00:37:38.760 align:start position:0%
and any match operation here you can see
again<00:37:37.420><c> we</c><00:37:37.600><c> just</c><00:37:37.720><c> got</c><00:37:37.900><c> rid</c><00:37:38.050><c> of</c><00:37:38.080><c> the</c><00:37:38.350><c> the</c>

00:37:38.760 --> 00:37:38.770 align:start position:0%
again we just got rid of the the
 

00:37:38.770 --> 00:37:40.740 align:start position:0%
again we just got rid of the the
iteration<00:37:39.310><c> code</c><00:37:39.550><c> and</c><00:37:39.790><c> kept</c><00:37:40.060><c> the</c><00:37:40.270><c> the</c><00:37:40.570><c> main</c>

00:37:40.740 --> 00:37:40.750 align:start position:0%
iteration code and kept the the main
 

00:37:40.750 --> 00:37:49.560 align:start position:0%
iteration code and kept the the main
core<00:37:41.110><c> code</c><00:37:41.560><c> that's</c><00:37:42.460><c> in</c><00:37:42.700><c> the</c><00:37:42.850><c> if</c><00:37:42.970><c> statement</c><00:37:48.570><c> so</c>

00:37:49.560 --> 00:37:49.570 align:start position:0%
core code that's in the if statement so
 

00:37:49.570 --> 00:37:51.450 align:start position:0%
core code that's in the if statement so
here<00:37:50.350><c> I'm</c><00:37:50.500><c> going</c><00:37:50.620><c> to</c><00:37:50.710><c> performance</c><00:37:51.130><c> tests</c><00:37:51.340><c> the</c>

00:37:51.450 --> 00:37:51.460 align:start position:0%
here I'm going to performance tests the
 

00:37:51.460 --> 00:37:53.220 align:start position:0%
here I'm going to performance tests the
difference<00:37:51.700><c> between</c><00:37:51.790><c> the</c><00:37:51.970><c> original</c><00:37:52.420><c> code</c><00:37:52.630><c> the</c>

00:37:53.220 --> 00:37:53.230 align:start position:0%
difference between the original code the
 

00:37:53.230 --> 00:37:55.830 align:start position:0%
difference between the original code the
the<00:37:53.770><c> new</c><00:37:53.950><c> code</c><00:37:54.220><c> which</c><00:37:54.460><c> is</c><00:37:54.670><c> it's</c><00:37:55.000><c> more</c><00:37:55.630><c> readable</c>

00:37:55.830 --> 00:37:55.840 align:start position:0%
the new code which is it's more readable
 

00:37:55.840 --> 00:37:57.690 align:start position:0%
the new code which is it's more readable
but<00:37:56.530><c> of</c><00:37:56.650><c> course</c><00:37:56.800><c> the</c><00:37:56.890><c> interesting</c><00:37:57.220><c> point</c>

00:37:57.690 --> 00:37:57.700 align:start position:0%
but of course the interesting point
 

00:37:57.700 --> 00:37:59.820 align:start position:0%
but of course the interesting point
about<00:37:57.880><c> a</c><00:37:58.030><c> lot</c><00:37:58.390><c> of</c><00:37:58.420><c> these</c><00:37:58.690><c> Java</c><00:37:59.140><c> eight</c><00:37:59.380><c> stream</c>

00:37:59.820 --> 00:37:59.830 align:start position:0%
about a lot of these Java eight stream
 

00:37:59.830 --> 00:38:02.040 align:start position:0%
about a lot of these Java eight stream
operations<00:38:00.310><c> is</c><00:38:00.490><c> the</c><00:38:00.940><c> ability</c><00:38:01.180><c> to</c><00:38:01.420><c> paralyze</c>

00:38:02.040 --> 00:38:02.050 align:start position:0%
operations is the ability to paralyze
 

00:38:02.050 --> 00:38:03.840 align:start position:0%
operations is the ability to paralyze
them<00:38:02.320><c> so</c><00:38:02.830><c> I'm</c><00:38:02.920><c> going</c><00:38:03.100><c> to</c><00:38:03.130><c> performance</c><00:38:03.610><c> test</c>

00:38:03.840 --> 00:38:03.850 align:start position:0%
them so I'm going to performance test
 

00:38:03.850 --> 00:38:06.390 align:start position:0%
them so I'm going to performance test
this<00:38:04.110><c> against</c><00:38:05.110><c> the</c><00:38:05.320><c> parallel</c><00:38:05.860><c> version</c><00:38:06.220><c> as</c>

00:38:06.390 --> 00:38:06.400 align:start position:0%
this against the parallel version as
 

00:38:06.400 --> 00:38:08.510 align:start position:0%
this against the parallel version as
well

00:38:08.510 --> 00:38:08.520 align:start position:0%
 
 

00:38:08.520 --> 00:38:11.520 align:start position:0%
 
now<00:38:09.520><c> the</c><00:38:09.580><c> original</c><00:38:10.090><c> code</c><00:38:10.330><c> performs</c><00:38:11.320><c> pretty</c>

00:38:11.520 --> 00:38:11.530 align:start position:0%
now the original code performs pretty
 

00:38:11.530 --> 00:38:13.530 align:start position:0%
now the original code performs pretty
well<00:38:11.800><c> and</c><00:38:12.100><c> the</c><00:38:12.280><c> reflected</c><00:38:12.760><c> Kurtis</c><00:38:13.060><c> is</c><00:38:13.180><c> for</c><00:38:13.330><c> ten</c>

00:38:13.530 --> 00:38:13.540 align:start position:0%
well and the reflected Kurtis is for ten
 

00:38:13.540 --> 00:38:15.180 align:start position:0%
well and the reflected Kurtis is for ten
values<00:38:13.960><c> in</c><00:38:14.110><c> the</c><00:38:14.200><c> list</c><00:38:14.350><c> the</c><00:38:14.650><c> original</c><00:38:15.010><c> code</c>

00:38:15.180 --> 00:38:15.190 align:start position:0%
values in the list the original code
 

00:38:15.190 --> 00:38:16.830 align:start position:0%
values in the list the original code
performs<00:38:15.490><c> very</c><00:38:15.730><c> well</c><00:38:15.760><c> the</c><00:38:15.970><c> refracted</c><00:38:16.360><c> code</c><00:38:16.570><c> is</c>

00:38:16.830 --> 00:38:16.840 align:start position:0%
performs very well the refracted code is
 

00:38:16.840 --> 00:38:20.700 align:start position:0%
performs very well the refracted code is
not<00:38:17.830><c> even</c><00:38:18.160><c> half</c><00:38:18.430><c> the</c><00:38:18.820><c> speed</c><00:38:19.210><c> and</c><00:38:19.450><c> parallel</c><00:38:20.410><c> for</c>

00:38:20.700 --> 00:38:20.710 align:start position:0%
not even half the speed and parallel for
 

00:38:20.710 --> 00:38:22.920 align:start position:0%
not even half the speed and parallel for
ten<00:38:20.890><c> values</c><00:38:21.100><c> is</c><00:38:21.580><c> nowhere</c><00:38:22.270><c> to</c><00:38:22.330><c> be</c><00:38:22.480><c> seen</c><00:38:22.510><c> because</c>

00:38:22.920 --> 00:38:22.930 align:start position:0%
ten values is nowhere to be seen because
 

00:38:22.930 --> 00:38:25.110 align:start position:0%
ten values is nowhere to be seen because
the<00:38:23.170><c> cost</c><00:38:23.410><c> is</c><00:38:23.620><c> splitting</c><00:38:23.980><c> up</c><00:38:24.130><c> a</c><00:38:24.340><c> ten</c><00:38:24.760><c> value</c>

00:38:25.110 --> 00:38:25.120 align:start position:0%
the cost is splitting up a ten value
 

00:38:25.120 --> 00:38:27.210 align:start position:0%
the cost is splitting up a ten value
list<00:38:25.360><c> running</c><00:38:26.110><c> over</c><00:38:26.350><c> multiple</c><00:38:26.680><c> cores</c><00:38:26.950><c> and</c>

00:38:27.210 --> 00:38:27.220 align:start position:0%
list running over multiple cores and
 

00:38:27.220 --> 00:38:29.370 align:start position:0%
list running over multiple cores and
then<00:38:27.610><c> bringing</c><00:38:27.880><c> the</c><00:38:27.970><c> result</c><00:38:28.240><c> back</c><00:38:28.360><c> in</c><00:38:28.600><c> is</c><00:38:28.780><c> just</c>

00:38:29.370 --> 00:38:29.380 align:start position:0%
then bringing the result back in is just
 

00:38:29.380 --> 00:38:31.110 align:start position:0%
then bringing the result back in is just
far<00:38:29.620><c> too</c><00:38:29.830><c> much</c><00:38:29.950><c> overhead</c><00:38:30.310><c> for</c><00:38:30.640><c> that</c><00:38:30.760><c> number</c><00:38:31.030><c> of</c>

00:38:31.110 --> 00:38:31.120 align:start position:0%
far too much overhead for that number of
 

00:38:31.120 --> 00:38:33.030 align:start position:0%
far too much overhead for that number of
values<00:38:31.440><c> where</c><00:38:32.440><c> it</c><00:38:32.530><c> starts</c><00:38:32.770><c> to</c><00:38:32.830><c> get</c><00:38:32.950><c> a</c><00:38:32.980><c> little</c>

00:38:33.030 --> 00:38:33.040 align:start position:0%
values where it starts to get a little
 

00:38:33.040 --> 00:38:34.800 align:start position:0%
values where it starts to get a little
bit<00:38:33.340><c> more</c><00:38:33.520><c> interesting</c><00:38:34.060><c> is</c><00:38:34.240><c> where</c><00:38:34.600><c> you</c><00:38:34.660><c> have</c>

00:38:34.800 --> 00:38:34.810 align:start position:0%
bit more interesting is where you have
 

00:38:34.810 --> 00:38:36.660 align:start position:0%
bit more interesting is where you have
ten<00:38:35.110><c> thousand</c><00:38:35.590><c> values</c><00:38:35.710><c> in</c><00:38:36.160><c> this</c><00:38:36.370><c> particular</c>

00:38:36.660 --> 00:38:36.670 align:start position:0%
ten thousand values in this particular
 

00:38:36.670 --> 00:38:39.990 align:start position:0%
ten thousand values in this particular
list<00:38:37.090><c> but</c><00:38:37.720><c> again</c><00:38:38.020><c> we</c><00:38:38.740><c> don't</c><00:38:38.950><c> really</c><00:38:39.190><c> see</c><00:38:39.610><c> any</c>

00:38:39.990 --> 00:38:40.000 align:start position:0%
list but again we don't really see any
 

00:38:40.000 --> 00:38:42.180 align:start position:0%
list but again we don't really see any
great<00:38:40.630><c> performance</c><00:38:40.870><c> improvements</c><00:38:41.800><c> here</c><00:38:41.980><c> and</c>

00:38:42.180 --> 00:38:42.190 align:start position:0%
great performance improvements here and
 

00:38:42.190 --> 00:38:44.580 align:start position:0%
great performance improvements here and
I<00:38:42.730><c> think</c><00:38:42.790><c> in</c><00:38:43.330><c> this</c><00:38:43.630><c> particular</c><00:38:43.870><c> case</c><00:38:44.290><c> I</c><00:38:44.560><c> think</c>

00:38:44.580 --> 00:38:44.590 align:start position:0%
I think in this particular case I think
 

00:38:44.590 --> 00:38:47.340 align:start position:0%
I think in this particular case I think
it's<00:38:45.100><c> because</c><00:38:45.460><c> we're</c><00:38:46.360><c> using</c><00:38:46.600><c> a</c><00:38:46.810><c> raised</c><00:38:47.050><c> dot</c>

00:38:47.340 --> 00:38:47.350 align:start position:0%
it's because we're using a raised dot
 

00:38:47.350 --> 00:38:50.940 align:start position:0%
it's because we're using a raised dot
stream<00:38:47.770><c> and</c><00:38:48.240><c> iteration</c><00:38:49.240><c> over</c><00:38:49.870><c> arrays</c><00:38:50.200><c> is</c><00:38:50.530><c> a</c>

00:38:50.940 --> 00:38:50.950 align:start position:0%
stream and iteration over arrays is a
 

00:38:50.950 --> 00:38:53.700 align:start position:0%
stream and iteration over arrays is a
much<00:38:51.250><c> more</c><00:38:51.550><c> it</c><00:38:51.940><c> is</c><00:38:52.360><c> a</c><00:38:52.810><c> nice</c><00:38:52.960><c> efficient</c><00:38:53.530><c> thing</c>

00:38:53.700 --> 00:38:53.710 align:start position:0%
much more it is a nice efficient thing
 

00:38:53.710 --> 00:38:56.490 align:start position:0%
much more it is a nice efficient thing
to<00:38:53.740><c> do</c><00:38:53.950><c> for</c><00:38:54.220><c> compilers</c><00:38:55.000><c> and</c><00:38:55.240><c> for</c><00:38:55.630><c> the</c><00:38:55.720><c> CPU</c><00:38:56.080><c> it's</c>

00:38:56.490 --> 00:38:56.500 align:start position:0%
to do for compilers and for the CPU it's
 

00:38:56.500 --> 00:38:58.350 align:start position:0%
to do for compilers and for the CPU it's
a<00:38:56.590><c> very</c><00:38:56.800><c> predictable</c><00:38:57.070><c> thing</c><00:38:57.550><c> to</c><00:38:57.670><c> do</c><00:38:57.790><c> to</c><00:38:58.000><c> do</c>

00:38:58.350 --> 00:38:58.360 align:start position:0%
a very predictable thing to do to do
 

00:38:58.360 --> 00:39:00.720 align:start position:0%
a very predictable thing to do to do
anything<00:38:58.810><c> with</c><00:38:58.990><c> a</c><00:38:59.200><c> straight</c><00:38:59.470><c> array</c><00:39:00.130><c> class</c><00:39:00.340><c> and</c>

00:39:00.720 --> 00:39:00.730 align:start position:0%
anything with a straight array class and
 

00:39:00.730 --> 00:39:02.580 align:start position:0%
anything with a straight array class and
so<00:39:01.210><c> when</c><00:39:01.360><c> you</c><00:39:01.450><c> incur</c><00:39:01.720><c> the</c><00:39:01.870><c> cost</c><00:39:02.080><c> of</c><00:39:02.200><c> turning</c>

00:39:02.580 --> 00:39:02.590 align:start position:0%
so when you incur the cost of turning
 

00:39:02.590 --> 00:39:04.140 align:start position:0%
so when you incur the cost of turning
that<00:39:02.680><c> into</c><00:39:02.740><c> a</c><00:39:02.920><c> stream</c><00:39:03.310><c> start</c><00:39:03.790><c> doing</c><00:39:04.000><c> with</c>

00:39:04.140 --> 00:39:04.150 align:start position:0%
that into a stream start doing with
 

00:39:04.150 --> 00:39:05.880 align:start position:0%
that into a stream start doing with
objects<00:39:04.570><c> you're</c><00:39:05.110><c> going</c><00:39:05.290><c> to</c><00:39:05.350><c> end</c><00:39:05.500><c> up</c><00:39:05.650><c> with</c>

00:39:05.880 --> 00:39:05.890 align:start position:0%
objects you're going to end up with
 

00:39:05.890 --> 00:39:07.860 align:start position:0%
objects you're going to end up with
quite<00:39:06.370><c> a</c><00:39:06.490><c> lot</c><00:39:06.730><c> of</c><00:39:06.760><c> additional</c><00:39:07.330><c> cost</c><00:39:07.570><c> and</c><00:39:07.720><c> you</c>

00:39:07.860 --> 00:39:07.870 align:start position:0%
quite a lot of additional cost and you
 

00:39:07.870 --> 00:39:09.720 align:start position:0%
quite a lot of additional cost and you
can<00:39:08.050><c> see</c><00:39:08.260><c> that</c><00:39:08.500><c> in</c><00:39:08.680><c> the</c><00:39:08.860><c> performance</c><00:39:09.370><c> here</c><00:39:09.490><c> the</c>

00:39:09.720 --> 00:39:09.730 align:start position:0%
can see that in the performance here the
 

00:39:09.730 --> 00:39:11.970 align:start position:0%
can see that in the performance here the
performance<00:39:10.180><c> really</c><00:39:10.510><c> suffers</c><00:39:10.930><c> from</c><00:39:11.620><c> using</c>

00:39:11.970 --> 00:39:11.980 align:start position:0%
performance really suffers from using
 

00:39:11.980 --> 00:39:13.530 align:start position:0%
performance really suffers from using
streams<00:39:12.310><c> instead</c><00:39:12.700><c> of</c><00:39:12.880><c> using</c><00:39:13.060><c> the</c><00:39:13.270><c> straight</c>

00:39:13.530 --> 00:39:13.540 align:start position:0%
streams instead of using the straight
 

00:39:13.540 --> 00:39:16.500 align:start position:0%
streams instead of using the straight
array<00:39:14.640><c> and</c><00:39:15.640><c> when</c><00:39:15.880><c> we</c><00:39:15.970><c> get</c><00:39:16.090><c> to</c><00:39:16.150><c> a</c><00:39:16.300><c> hundred</c>

00:39:16.500 --> 00:39:16.510 align:start position:0%
array and when we get to a hundred
 

00:39:16.510 --> 00:39:18.120 align:start position:0%
array and when we get to a hundred
thousand<00:39:17.050><c> values</c><00:39:17.140><c> in</c><00:39:17.440><c> here</c><00:39:17.590><c> then</c><00:39:17.740><c> with</c><00:39:17.890><c> then</c>

00:39:18.120 --> 00:39:18.130 align:start position:0%
thousand values in here then with then
 

00:39:18.130 --> 00:39:19.740 align:start position:0%
thousand values in here then with then
parallel<00:39:18.580><c> starts</c><00:39:18.970><c> that</c><00:39:19.120><c> outperform</c><00:39:19.660><c> we</c>

00:39:19.740 --> 00:39:19.750 align:start position:0%
parallel starts that outperform we
 

00:39:19.750 --> 00:39:21.480 align:start position:0%
parallel starts that outperform we
factored<00:39:20.080><c> by</c><00:39:20.200><c> quite</c><00:39:20.440><c> a</c><00:39:20.470><c> lot</c><00:39:20.620><c> more</c><00:39:20.830><c> both</c><00:39:21.310><c> game</c>

00:39:21.480 --> 00:39:21.490 align:start position:0%
factored by quite a lot more both game
 

00:39:21.490 --> 00:39:22.770 align:start position:0%
factored by quite a lot more both game
are<00:39:21.730><c> still</c><00:39:21.910><c> not</c><00:39:22.060><c> really</c><00:39:22.270><c> seeing</c><00:39:22.660><c> the</c>

00:39:22.770 --> 00:39:22.780 align:start position:0%
are still not really seeing the
 

00:39:22.780 --> 00:39:24.990 align:start position:0%
are still not really seeing the
performance<00:39:22.930><c> of</c><00:39:23.440><c> using</c><00:39:23.920><c> raw</c><00:39:24.580><c> array</c>

00:39:24.990 --> 00:39:25.000 align:start position:0%
performance of using raw array
 

00:39:25.000 --> 00:39:29.170 align:start position:0%
performance of using raw array
manipulation<00:39:26.220><c> so</c><00:39:27.220><c> any</c><00:39:27.760><c> match</c><00:39:28.090><c> I</c><00:39:28.390><c> said</c>

00:39:29.170 --> 00:39:29.180 align:start position:0%
manipulation so any match I said
 

00:39:29.180 --> 00:39:31.989 align:start position:0%
manipulation so any match I said
but<00:39:29.509><c> it's</c><00:39:29.660><c> not</c><00:39:29.839><c> the</c><00:39:30.349><c> fault</c><00:39:30.619><c> of</c><00:39:30.829><c> any</c><00:39:31.069><c> match</c><00:39:31.339><c> it's</c>

00:39:31.989 --> 00:39:31.999 align:start position:0%
but it's not the fault of any match it's
 

00:39:31.999 --> 00:39:33.759 align:start position:0%
but it's not the fault of any match it's
actually<00:39:32.450><c> the</c><00:39:32.599><c> problem</c><00:39:33.019><c> of</c><00:39:33.170><c> using</c><00:39:33.470><c> a</c><00:39:33.559><c> raised</c>

00:39:33.759 --> 00:39:33.769 align:start position:0%
actually the problem of using a raised
 

00:39:33.769 --> 00:39:36.309 align:start position:0%
actually the problem of using a raised
dot<00:39:34.099><c> stream</c><00:39:34.519><c> doing</c><00:39:35.210><c> any</c><00:39:35.329><c> sort</c><00:39:35.539><c> of</c><00:39:35.660><c> operation</c>

00:39:36.309 --> 00:39:36.319 align:start position:0%
dot stream doing any sort of operation
 

00:39:36.319 --> 00:39:38.470 align:start position:0%
dot stream doing any sort of operation
on<00:39:36.410><c> a</c><00:39:36.440><c> raised</c><00:39:36.680><c> dot</c><00:39:36.950><c> stream</c><00:39:37.309><c> is</c><00:39:37.519><c> probably</c><00:39:38.180><c> going</c>

00:39:38.470 --> 00:39:38.480 align:start position:0%
on a raised dot stream is probably going
 

00:39:38.480 --> 00:39:40.509 align:start position:0%
on a raised dot stream is probably going
to<00:39:38.630><c> be</c><00:39:38.749><c> much</c><00:39:38.960><c> more</c><00:39:39.170><c> expensive</c><00:39:39.380><c> than</c><00:39:39.950><c> doing</c>

00:39:40.509 --> 00:39:40.519 align:start position:0%
to be much more expensive than doing
 

00:39:40.519 --> 00:39:41.920 align:start position:0%
to be much more expensive than doing
operations<00:39:40.759><c> directly</c><00:39:41.539><c> either</c><00:39:41.690><c> way</c>

00:39:41.920 --> 00:39:41.930 align:start position:0%
operations directly either way
 

00:39:41.930 --> 00:39:49.630 align:start position:0%
operations directly either way
particularly<00:39:42.589><c> for</c><00:39:43.099><c> smaller</c><00:39:43.400><c> ways</c><00:39:45.819><c> and</c><00:39:48.640><c> find</c>

00:39:49.630 --> 00:39:49.640 align:start position:0%
particularly for smaller ways and find
 

00:39:49.640 --> 00:39:52.150 align:start position:0%
particularly for smaller ways and find
first<00:39:50.240><c> so</c><00:39:50.900><c> this</c><00:39:51.049><c> is</c><00:39:51.170><c> a</c><00:39:51.230><c> very</c><00:39:51.470><c> similar</c><00:39:51.680><c> thing</c><00:39:51.950><c> to</c>

00:39:52.150 --> 00:39:52.160 align:start position:0%
first so this is a very similar thing to
 

00:39:52.160 --> 00:40:00.039 align:start position:0%
first so this is a very similar thing to
any<00:39:52.339><c> match</c><00:39:54.730><c> if</c><00:39:55.730><c> I</c><00:39:55.940><c> find</c><00:39:56.210><c> my</c><00:39:56.390><c> example</c><00:39:58.900><c> this</c><00:39:59.900><c> is</c>

00:40:00.039 --> 00:40:00.049 align:start position:0%
any match if I find my example this is
 

00:40:00.049 --> 00:40:01.509 align:start position:0%
any match if I find my example this is
again<00:40:00.319><c> where</c><00:40:00.529><c> we're</c><00:40:00.650><c> going</c><00:40:00.829><c> to</c><00:40:00.950><c> iterate</c><00:40:01.099><c> over</c>

00:40:01.509 --> 00:40:01.519 align:start position:0%
again where we're going to iterate over
 

00:40:01.519 --> 00:40:04.210 align:start position:0%
again where we're going to iterate over
some<00:40:01.880><c> lists</c><00:40:02.150><c> and</c><00:40:02.390><c> once</c><00:40:03.259><c> we</c><00:40:03.470><c> find</c><00:40:03.710><c> the</c><00:40:04.009><c> first</c>

00:40:04.210 --> 00:40:04.220 align:start position:0%
some lists and once we find the first
 

00:40:04.220 --> 00:40:06.309 align:start position:0%
some lists and once we find the first
thing<00:40:04.490><c> which</c><00:40:04.730><c> matches</c><00:40:04.940><c> some</c><00:40:05.210><c> criteria</c><00:40:05.749><c> then</c>

00:40:06.309 --> 00:40:06.319 align:start position:0%
thing which matches some criteria then
 

00:40:06.319 --> 00:40:08.470 align:start position:0%
thing which matches some criteria then
we're<00:40:06.470><c> going</c><00:40:06.619><c> to</c><00:40:06.680><c> return</c><00:40:06.980><c> that</c><00:40:07.039><c> thing</c><00:40:07.460><c> so</c><00:40:08.150><c> we</c>

00:40:08.470 --> 00:40:08.480 align:start position:0%
we're going to return that thing so we
 

00:40:08.480 --> 00:40:12.120 align:start position:0%
we're going to return that thing so we
can<00:40:08.720><c> replace</c><00:40:08.990><c> this</c><00:40:09.319><c> with</c><00:40:09.380><c> a</c><00:40:09.859><c> fine</c><00:40:10.160><c> first</c><00:40:10.460><c> and</c>

00:40:12.120 --> 00:40:12.130 align:start position:0%
can replace this with a fine first and
 

00:40:12.130 --> 00:40:18.089 align:start position:0%
can replace this with a fine first and
in<00:40:13.130><c> this</c><00:40:13.519><c> case</c><00:40:13.910><c> that's</c><00:40:14.299><c> in</c><00:40:14.509><c> line</c><00:40:14.720><c> in</c><00:40:14.960><c> line</c><00:40:15.019><c> that</c>

00:40:18.089 --> 00:40:18.099 align:start position:0%
 
 

00:40:18.099 --> 00:40:21.220 align:start position:0%
 
we<00:40:19.099><c> are</c><00:40:19.130><c> doing</c><00:40:19.700><c> in</c><00:40:19.819><c> a</c><00:40:19.880><c> raised</c><00:40:20.119><c> dot</c><00:40:20.390><c> stream</c><00:40:20.779><c> we</c>

00:40:21.220 --> 00:40:21.230 align:start position:0%
we are doing in a raised dot stream we
 

00:40:21.230 --> 00:40:23.769 align:start position:0%
we are doing in a raised dot stream we
could<00:40:21.410><c> also</c><00:40:21.619><c> slightly</c><00:40:22.339><c> simplify</c><00:40:23.269><c> this</c><00:40:23.329><c> by</c>

00:40:23.769 --> 00:40:23.779 align:start position:0%
could also slightly simplify this by
 

00:40:23.779 --> 00:40:33.339 align:start position:0%
could also slightly simplify this by
saying<00:40:24.079><c> a</c><00:40:24.970><c> stream</c><00:40:27.400><c> of</c><00:40:31.779><c> it</c><00:40:32.779><c> does</c><00:40:32.990><c> the</c><00:40:33.140><c> same</c>

00:40:33.339 --> 00:40:33.349 align:start position:0%
saying a stream of it does the same
 

00:40:33.349 --> 00:40:35.470 align:start position:0%
saying a stream of it does the same
thing<00:40:33.559><c> it</c><00:40:33.739><c> just</c><00:40:33.950><c> it</c><00:40:34.400><c> kind</c><00:40:34.640><c> of</c><00:40:34.759><c> reduces</c><00:40:35.239><c> the</c>

00:40:35.470 --> 00:40:35.480 align:start position:0%
thing it just it kind of reduces the
 

00:40:35.480 --> 00:40:37.239 align:start position:0%
thing it just it kind of reduces the
amount<00:40:35.630><c> of</c><00:40:35.779><c> code</c><00:40:35.989><c> on</c><00:40:36.140><c> the</c><00:40:36.230><c> screen</c><00:40:36.349><c> so</c><00:40:36.769><c> that's</c>

00:40:37.239 --> 00:40:37.249 align:start position:0%
amount of code on the screen so that's
 

00:40:37.249 --> 00:40:42.299 align:start position:0%
amount of code on the screen so that's
why<00:40:37.430><c> I</c><00:40:37.460><c> prefer</c><00:40:37.640><c> that</c><00:40:37.910><c> particular</c><00:40:38.359><c> example</c><00:40:38.779><c> and</c>

00:40:42.299 --> 00:40:42.309 align:start position:0%
 
 

00:40:42.309 --> 00:40:44.829 align:start position:0%
 
so<00:40:43.309><c> here</c><00:40:43.519><c> yes</c><00:40:43.789><c> again</c><00:40:44.089><c> we've</c><00:40:44.269><c> just</c><00:40:44.480><c> removed</c>

00:40:44.829 --> 00:40:44.839 align:start position:0%
so here yes again we've just removed
 

00:40:44.839 --> 00:40:46.150 align:start position:0%
so here yes again we've just removed
everything<00:40:45.200><c> from</c><00:40:45.349><c> the</c><00:40:45.529><c> if</c><00:40:45.619><c> statement</c><00:40:45.980><c> and</c><00:40:46.039><c> put</c>

00:40:46.150 --> 00:40:46.160 align:start position:0%
everything from the if statement and put
 

00:40:46.160 --> 00:40:48.729 align:start position:0%
everything from the if statement and put
it<00:40:46.249><c> into</c><00:40:46.430><c> the</c><00:40:46.519><c> filter</c><00:40:47.170><c> another</c><00:40:48.170><c> example</c><00:40:48.619><c> of</c>

00:40:48.729 --> 00:40:48.739 align:start position:0%
it into the filter another example of
 

00:40:48.739 --> 00:40:57.460 align:start position:0%
it into the filter another example of
this<00:40:48.950><c> is</c><00:40:49.279><c> in</c><00:40:50.150><c> my</c><00:40:51.019><c> converters</c><00:40:56.140><c> I'm</c><00:40:57.140><c> going</c><00:40:57.319><c> to</c><00:40:57.380><c> do</c>

00:40:57.460 --> 00:40:57.470 align:start position:0%
this is in my converters I'm going to do
 

00:40:57.470 --> 00:40:59.859 align:start position:0%
this is in my converters I'm going to do
the<00:40:57.619><c> same</c><00:40:57.799><c> thing</c><00:40:58.039><c> here</c><00:40:58.549><c> we</c><00:40:58.819><c> are</c><00:40:58.999><c> doing</c><00:40:59.420><c> on</c><00:40:59.660><c> the</c>

00:40:59.859 --> 00:40:59.869 align:start position:0%
the same thing here we are doing on the
 

00:40:59.869 --> 00:41:02.380 align:start position:0%
the same thing here we are doing on the
previous<00:41:00.230><c> example</c><00:41:00.789><c> we</c><00:41:01.789><c> had</c><00:41:01.940><c> to</c><00:41:02.059><c> create</c><00:41:02.329><c> our</c>

00:41:02.380 --> 00:41:02.390 align:start position:0%
previous example we had to create our
 

00:41:02.390 --> 00:41:07.479 align:start position:0%
previous example we had to create our
own<00:41:02.690><c> stream</c><00:41:03.259><c> of</c><00:41:03.940><c> effective</c><00:41:04.940><c> classes</c><00:41:05.779><c> in</c><00:41:06.489><c> this</c>

00:41:07.479 --> 00:41:07.489 align:start position:0%
own stream of effective classes in this
 

00:41:07.489 --> 00:41:16.290 align:start position:0%
own stream of effective classes in this
example<00:41:08.650><c> I'll</c><00:41:09.650><c> often</c>

00:41:16.290 --> 00:41:16.300 align:start position:0%
 
 

00:41:16.300 --> 00:41:18.299 align:start position:0%
 
in<00:41:17.230><c> this</c><00:41:17.650><c> example</c>

00:41:18.299 --> 00:41:18.309 align:start position:0%
in this example
 

00:41:18.309 --> 00:41:20.699 align:start position:0%
in this example
we're<00:41:18.430><c> doing</c><00:41:18.999><c> a</c><00:41:19.269><c> stream</c><00:41:19.869><c> we're</c><00:41:20.349><c> getting</c><00:41:20.589><c> the</c>

00:41:20.699 --> 00:41:20.709 align:start position:0%
we're doing a stream we're getting the
 

00:41:20.709 --> 00:41:22.559 align:start position:0%
we're doing a stream we're getting the
stream<00:41:20.979><c> from</c><00:41:21.400><c> this</c><00:41:21.729><c> collection</c><00:41:22.269><c> which</c><00:41:22.420><c> is</c><00:41:22.539><c> a</c>

00:41:22.559 --> 00:41:22.569 align:start position:0%
stream from this collection which is a
 

00:41:22.569 --> 00:41:27.769 align:start position:0%
stream from this collection which is a
list<00:41:23.519><c> and</c><00:41:24.519><c> here</c><00:41:24.759><c> we</c><00:41:24.849><c> can</c><00:41:24.999><c> see</c><00:41:25.180><c> we</c><00:41:25.900><c> are</c>

00:41:27.769 --> 00:41:27.779 align:start position:0%
list and here we can see we are
 

00:41:27.779 --> 00:41:31.349 align:start position:0%
list and here we can see we are
explicitly<00:41:28.779><c> stating</c><00:41:29.650><c> what</c><00:41:30.039><c> to</c><00:41:30.219><c> return</c><00:41:30.579><c> if</c><00:41:30.849><c> we</c>

00:41:31.349 --> 00:41:31.359 align:start position:0%
explicitly stating what to return if we
 

00:41:31.359 --> 00:41:33.179 align:start position:0%
explicitly stating what to return if we
don't<00:41:31.539><c> find</c><00:41:31.749><c> anything</c><00:41:32.049><c> so</c><00:41:32.439><c> there's</c><00:41:32.650><c> some</c>

00:41:33.179 --> 00:41:33.189 align:start position:0%
don't find anything so there's some
 

00:41:33.189 --> 00:41:40.319 align:start position:0%
don't find anything so there's some
readability<00:41:33.609><c> gains</c><00:41:34.089><c> there</c><00:41:34.359><c> as</c><00:41:34.509><c> well</c><00:41:39.180><c> so</c><00:41:40.180><c> let's</c>

00:41:40.319 --> 00:41:40.329 align:start position:0%
readability gains there as well so let's
 

00:41:40.329 --> 00:41:41.849 align:start position:0%
readability gains there as well so let's
do<00:41:40.420><c> a</c><00:41:40.449><c> quick</c><00:41:40.779><c> check</c><00:41:40.959><c> of</c><00:41:41.140><c> the</c><00:41:41.319><c> performance</c><00:41:41.769><c> of</c>

00:41:41.849 --> 00:41:41.859 align:start position:0%
do a quick check of the performance of
 

00:41:41.859 --> 00:41:46.259 align:start position:0%
do a quick check of the performance of
this<00:41:43.199><c> fine</c><00:41:44.199><c> first</c><00:41:44.559><c> is</c><00:41:44.890><c> again</c><00:41:45.369><c> not</c><00:41:45.849><c> performing</c>

00:41:46.259 --> 00:41:46.269 align:start position:0%
this fine first is again not performing
 

00:41:46.269 --> 00:41:48.209 align:start position:0%
this fine first is again not performing
quite<00:41:46.630><c> as</c><00:41:46.930><c> fast</c><00:41:47.289><c> as</c><00:41:47.469><c> the</c><00:41:47.529><c> original</c><00:41:48.039><c> in</c>

00:41:48.209 --> 00:41:48.219 align:start position:0%
quite as fast as the original in
 

00:41:48.219 --> 00:41:49.380 align:start position:0%
quite as fast as the original in
particular<00:41:48.459><c> here</c><00:41:48.789><c> because</c><00:41:49.029><c> we're</c><00:41:49.150><c> doing</c><00:41:49.239><c> a</c>

00:41:49.380 --> 00:41:49.390 align:start position:0%
particular here because we're doing a
 

00:41:49.390 --> 00:41:51.870 align:start position:0%
particular here because we're doing a
raised<00:41:49.660><c> stream</c><00:41:50.439><c> and</c><00:41:50.920><c> I</c><00:41:51.099><c> wanted</c><00:41:51.459><c> to</c><00:41:51.549><c> test</c><00:41:51.759><c> the</c>

00:41:51.870 --> 00:41:51.880 align:start position:0%
raised stream and I wanted to test the
 

00:41:51.880 --> 00:41:53.370 align:start position:0%
raised stream and I wanted to test the
difference<00:41:52.209><c> between</c><00:41:52.359><c> doing</c><00:41:52.630><c> a</c><00:41:52.900><c> raised</c><00:41:53.140><c> dot</c>

00:41:53.370 --> 00:41:53.380 align:start position:0%
difference between doing a raised dot
 

00:41:53.380 --> 00:41:55.650 align:start position:0%
difference between doing a raised dot
stream<00:41:53.769><c> and</c><00:41:54.039><c> stream</c><00:41:54.369><c> that</c><00:41:54.579><c> off</c><00:41:54.729><c> and</c><00:41:55.180><c> the</c>

00:41:55.650 --> 00:41:55.660 align:start position:0%
stream and stream that off and the
 

00:41:55.660 --> 00:41:57.150 align:start position:0%
stream and stream that off and the
performance<00:41:56.079><c> here</c><00:41:56.170><c> is</c><00:41:56.259><c> exactly</c><00:41:56.499><c> the</c><00:41:56.680><c> same</c><00:41:56.769><c> so</c>

00:41:57.150 --> 00:41:57.160 align:start position:0%
performance here is exactly the same so
 

00:41:57.160 --> 00:41:59.969 align:start position:0%
performance here is exactly the same so
pick<00:41:57.339><c> whichever</c><00:41:57.459><c> one</c><00:41:57.729><c> suits</c><00:41:58.029><c> you</c><00:41:58.319><c> I'm</c><00:41:59.319><c> in</c><00:41:59.859><c> the</c>

00:41:59.969 --> 00:41:59.979 align:start position:0%
pick whichever one suits you I'm in the
 

00:41:59.979 --> 00:42:01.829 align:start position:0%
pick whichever one suits you I'm in the
second<00:42:00.279><c> example</c><00:42:00.400><c> where</c><00:42:01.209><c> we're</c><00:42:01.359><c> using</c><00:42:01.390><c> the</c>

00:42:01.829 --> 00:42:01.839 align:start position:0%
second example where we're using the
 

00:42:01.839 --> 00:42:05.549 align:start position:0%
second example where we're using the
streams<00:42:02.140><c> API</c><00:42:02.489><c> we</c><00:42:03.489><c> again</c><00:42:04.390><c> we</c><00:42:04.779><c> just</c><00:42:04.959><c> don't</c><00:42:05.259><c> get</c>

00:42:05.549 --> 00:42:05.559 align:start position:0%
streams API we again we just don't get
 

00:42:05.559 --> 00:42:07.019 align:start position:0%
streams API we again we just don't get
the<00:42:05.769><c> same</c><00:42:05.799><c> sort</c><00:42:06.219><c> of</c><00:42:06.249><c> performance</c><00:42:06.729><c> that</c><00:42:06.880><c> we've</c>

00:42:07.019 --> 00:42:07.029 align:start position:0%
the same sort of performance that we've
 

00:42:07.029 --> 00:42:08.819 align:start position:0%
the same sort of performance that we've
got<00:42:07.269><c> from</c><00:42:07.449><c> the</c><00:42:07.569><c> original</c><00:42:07.900><c> code</c><00:42:08.140><c> for</c><00:42:08.499><c> an</c><00:42:08.559><c> array</c>

00:42:08.819 --> 00:42:08.829 align:start position:0%
got from the original code for an array
 

00:42:08.829 --> 00:42:11.939 align:start position:0%
got from the original code for an array
of<00:42:08.859><c> ten</c><00:42:09.400><c> element</c><00:42:09.819><c> as</c><00:42:10.689><c> we</c><00:42:11.109><c> start</c><00:42:11.380><c> to</c><00:42:11.529><c> get</c><00:42:11.650><c> much</c>

00:42:11.939 --> 00:42:11.949 align:start position:0%
of ten element as we start to get much
 

00:42:11.949 --> 00:42:14.099 align:start position:0%
of ten element as we start to get much
bigger<00:42:12.219><c> data</c><00:42:12.579><c> that's</c><00:42:13.359><c> where</c><00:42:13.569><c> we</c><00:42:13.660><c> start</c><00:42:13.900><c> to</c><00:42:13.989><c> see</c>

00:42:14.099 --> 00:42:14.109 align:start position:0%
bigger data that's where we start to see
 

00:42:14.109 --> 00:42:15.979 align:start position:0%
bigger data that's where we start to see
the<00:42:14.229><c> benefits</c><00:42:14.650><c> of</c><00:42:14.769><c> both</c><00:42:14.949><c> going</c><00:42:15.219><c> parallel</c><00:42:15.519><c> and</c>

00:42:15.979 --> 00:42:15.989 align:start position:0%
the benefits of both going parallel and
 

00:42:15.989 --> 00:42:19.799 align:start position:0%
the benefits of both going parallel and
perhaps<00:42:16.989><c> using</c><00:42:17.199><c> the</c><00:42:17.349><c> refactor</c><00:42:17.739><c> code</c><00:42:18.599><c> so</c><00:42:19.599><c> again</c>

00:42:19.799 --> 00:42:19.809 align:start position:0%
perhaps using the refactor code so again
 

00:42:19.809 --> 00:42:22.349 align:start position:0%
perhaps using the refactor code so again
find<00:42:20.170><c> first</c><00:42:20.410><c> in</c><00:42:20.829><c> terms</c><00:42:21.009><c> of</c><00:42:21.130><c> performance</c><00:42:21.359><c> it's</c>

00:42:22.349 --> 00:42:22.359 align:start position:0%
find first in terms of performance it's
 

00:42:22.359 --> 00:42:23.910 align:start position:0%
find first in terms of performance it's
worth<00:42:22.630><c> testing</c><00:42:22.929><c> that</c><00:42:23.229><c> to</c><00:42:23.410><c> see</c><00:42:23.559><c> if</c><00:42:23.650><c> you've</c><00:42:23.769><c> got</c>

00:42:23.910 --> 00:42:23.920 align:start position:0%
worth testing that to see if you've got
 

00:42:23.920 --> 00:42:25.559 align:start position:0%
worth testing that to see if you've got
any<00:42:24.039><c> field</c><00:42:24.339><c> impact</c><00:42:24.759><c> on</c><00:42:24.939><c> your</c><00:42:25.059><c> performance</c><00:42:25.509><c> for</c>

00:42:25.559 --> 00:42:25.569 align:start position:0%
any field impact on your performance for
 

00:42:25.569 --> 00:42:29.160 align:start position:0%
any field impact on your performance for
that<00:42:25.689><c> particularly</c><00:42:26.650><c> for</c><00:42:26.829><c> small</c><00:42:27.160><c> arrays</c><00:42:28.170><c> my</c>

00:42:29.160 --> 00:42:29.170 align:start position:0%
that particularly for small arrays my
 

00:42:29.170 --> 00:42:32.339 align:start position:0%
that particularly for small arrays my
final<00:42:29.529><c> example</c><00:42:29.859><c> is</c><00:42:30.219><c> remove</c><00:42:30.729><c> if</c><00:42:31.079><c> this</c><00:42:32.079><c> is</c><00:42:32.199><c> one</c>

00:42:32.339 --> 00:42:32.349 align:start position:0%
final example is remove if this is one
 

00:42:32.349 --> 00:42:33.599 align:start position:0%
final example is remove if this is one
of<00:42:32.439><c> my</c><00:42:32.559><c> favorite</c><00:42:32.890><c> examples</c><00:42:33.309><c> and</c><00:42:33.429><c> I</c><00:42:33.459><c> hope</c>

00:42:33.599 --> 00:42:33.609 align:start position:0%
of my favorite examples and I hope
 

00:42:33.609 --> 00:42:43.229 align:start position:0%
of my favorite examples and I hope
you'll<00:42:33.759><c> be</c><00:42:33.789><c> able</c><00:42:33.939><c> to</c><00:42:34.059><c> see</c><00:42:34.239><c> one</c><00:42:41.549><c> here</c><00:42:42.549><c> what</c><00:42:43.119><c> I've</c>

00:42:43.229 --> 00:42:43.239 align:start position:0%
you'll be able to see one here what I've
 

00:42:43.239 --> 00:42:46.259 align:start position:0%
you'll be able to see one here what I've
got<00:42:43.479><c> is</c><00:42:43.689><c> I've</c><00:42:43.719><c> got</c><00:42:44.229><c> some</c><00:42:44.979><c> set</c><00:42:45.269><c> helpfully</c>

00:42:46.259 --> 00:42:46.269 align:start position:0%
got is I've got some set helpfully
 

00:42:46.269 --> 00:42:48.569 align:start position:0%
got is I've got some set helpfully
called<00:42:46.479><c> s</c><00:42:46.719><c> which</c><00:42:47.410><c> I'm</c><00:42:47.589><c> iterating</c><00:42:47.799><c> over</c><00:42:48.189><c> and</c>

00:42:48.569 --> 00:42:48.579 align:start position:0%
called s which I'm iterating over and
 

00:42:48.579 --> 00:42:51.749 align:start position:0%
called s which I'm iterating over and
then<00:42:48.759><c> I'm</c><00:42:49.390><c> pulling</c><00:42:50.079><c> it</c><00:42:50.439><c> right</c><00:42:50.469><c> out</c><00:42:50.679><c> of</c><00:42:51.369><c> using</c><00:42:51.609><c> a</c>

00:42:51.749 --> 00:42:51.759 align:start position:0%
then I'm pulling it right out of using a
 

00:42:51.759 --> 00:42:53.219 align:start position:0%
then I'm pulling it right out of using a
while<00:42:51.969><c> loop</c><00:42:52.269><c> which</c><00:42:52.479><c> happening</c><00:42:52.869><c> for</c><00:42:53.079><c> a</c><00:42:53.109><c> while</c>

00:42:53.219 --> 00:42:53.229 align:start position:0%
while loop which happening for a while
 

00:42:53.229 --> 00:42:56.999 align:start position:0%
while loop which happening for a while
to<00:42:54.359><c> remove</c><00:42:55.359><c> everything</c><00:42:56.170><c> from</c><00:42:56.349><c> the</c><00:42:56.589><c> iterator</c>

00:42:56.999 --> 00:42:57.009 align:start position:0%
to remove everything from the iterator
 

00:42:57.009 --> 00:42:59.789 align:start position:0%
to remove everything from the iterator
which<00:42:57.130><c> matches</c><00:42:57.549><c> some</c><00:42:57.910><c> criteria</c><00:42:58.479><c> and</c><00:42:58.689><c> I</c><00:42:59.529><c> can</c>

00:42:59.789 --> 00:42:59.799 align:start position:0%
which matches some criteria and I can
 

00:42:59.799 --> 00:43:02.449 align:start position:0%
which matches some criteria and I can
replace<00:43:00.130><c> it</c><00:43:00.189><c> straightforwardly</c><00:43:01.179><c> with</c><00:43:02.019><c> a</c>

00:43:02.449 --> 00:43:02.459 align:start position:0%
replace it straightforwardly with a
 

00:43:02.459 --> 00:43:05.249 align:start position:0%
replace it straightforwardly with a
simple<00:43:03.459><c> remove</c><00:43:03.849><c> if</c><00:43:04.089><c> we're</c><00:43:04.660><c> passing</c><00:43:04.929><c> the</c>

00:43:05.249 --> 00:43:05.259 align:start position:0%
simple remove if we're passing the
 

00:43:05.259 --> 00:43:07.169 align:start position:0%
simple remove if we're passing the
parameter<00:43:05.769><c> of</c><00:43:05.949><c> the</c><00:43:06.459><c> thing</c><00:43:06.670><c> I</c><00:43:06.789><c> really</c><00:43:06.999><c> care</c>

00:43:07.169 --> 00:43:07.179 align:start position:0%
parameter of the thing I really care
 

00:43:07.179 --> 00:43:09.569 align:start position:0%
parameter of the thing I really care
about<00:43:07.209><c> and</c><00:43:07.539><c> here</c><00:43:08.259><c> we</c><00:43:08.410><c> just</c><00:43:08.529><c> get</c><00:43:08.769><c> rid</c><00:43:08.920><c> of</c><00:43:08.979><c> all</c><00:43:09.249><c> of</c>

00:43:09.569 --> 00:43:09.579 align:start position:0%
about and here we just get rid of all of
 

00:43:09.579 --> 00:43:12.449 align:start position:0%
about and here we just get rid of all of
this<00:43:09.759><c> nonsense</c><00:43:10.059><c> of</c><00:43:10.599><c> how</c><00:43:10.900><c> to</c><00:43:10.959><c> traverse</c><00:43:11.559><c> the</c><00:43:11.949><c> how</c>

00:43:12.449 --> 00:43:12.459 align:start position:0%
this nonsense of how to traverse the how
 

00:43:12.459 --> 00:43:15.509 align:start position:0%
this nonsense of how to traverse the how
to<00:43:12.519><c> reverse</c><00:43:12.910><c> the</c><00:43:13.179><c> collection</c><00:43:13.689><c> of</c><00:43:14.130><c> how</c><00:43:15.130><c> to</c><00:43:15.189><c> get</c>

00:43:15.509 --> 00:43:15.519 align:start position:0%
to reverse the collection of how to get
 

00:43:15.519 --> 00:43:17.009 align:start position:0%
to reverse the collection of how to get
the<00:43:15.609><c> next</c><00:43:15.789><c> item</c><00:43:16.209><c> we</c><00:43:16.329><c> just</c><00:43:16.509><c> don't</c><00:43:16.660><c> care</c><00:43:16.869><c> about</c>

00:43:17.009 --> 00:43:17.019 align:start position:0%
the next item we just don't care about
 

00:43:17.019 --> 00:43:19.259 align:start position:0%
the next item we just don't care about
that<00:43:17.319><c> we</c><00:43:17.469><c> just</c><00:43:17.499><c> pass</c><00:43:17.890><c> in</c><00:43:18.130><c> the</c><00:43:18.699><c> lambda</c>

00:43:19.259 --> 00:43:19.269 align:start position:0%
that we just pass in the lambda
 

00:43:19.269 --> 00:43:21.419 align:start position:0%
that we just pass in the lambda
expression<00:43:19.689><c> of</c><00:43:19.900><c> remove</c><00:43:20.650><c> everything</c><00:43:21.099><c> which</c>

00:43:21.419 --> 00:43:21.429 align:start position:0%
expression of remove everything which
 

00:43:21.429 --> 00:43:25.049 align:start position:0%
expression of remove everything which
matches<00:43:21.729><c> this</c><00:43:22.089><c> particular</c><00:43:22.449><c> pattern</c><00:43:23.109><c> and</c><00:43:24.059><c> if</c>

00:43:25.049 --> 00:43:25.059 align:start position:0%
matches this particular pattern and if
 

00:43:25.059 --> 00:43:27.449 align:start position:0%
matches this particular pattern and if
we<00:43:25.209><c> also</c><00:43:25.390><c> have</c><00:43:26.079><c> a</c><00:43:26.140><c> look</c><00:43:26.410><c> so</c><00:43:26.829><c> here</c><00:43:27.069><c> at</c><00:43:27.189><c> you</c><00:43:27.279><c> can</c>

00:43:27.449 --> 00:43:27.459 align:start position:0%
we also have a look so here at you can
 

00:43:27.459 --> 00:43:28.439 align:start position:0%
we also have a look so here at you can
see<00:43:27.579><c> I've</c><00:43:27.699><c> just</c><00:43:27.880><c> got</c><00:43:28.029><c> rid</c><00:43:28.179><c> of</c><00:43:28.209><c> all</c><00:43:28.390><c> that</c>

00:43:28.439 --> 00:43:28.449 align:start position:0%
see I've just got rid of all that
 

00:43:28.449 --> 00:43:29.759 align:start position:0%
see I've just got rid of all that
boilerplate<00:43:28.900><c> if</c><00:43:29.410><c> you</c><00:43:29.499><c> look</c><00:43:29.619><c> at</c><00:43:29.709><c> the</c>

00:43:29.759 --> 00:43:29.769 align:start position:0%
boilerplate if you look at the
 

00:43:29.769 --> 00:43:31.140 align:start position:0%
boilerplate if you look at the
performance<00:43:29.979><c> it</c><00:43:30.279><c> actually</c><00:43:30.549><c> performs</c><00:43:30.880><c> better</c>

00:43:31.140 --> 00:43:31.150 align:start position:0%
performance it actually performs better
 

00:43:31.150 --> 00:43:31.559 align:start position:0%
performance it actually performs better
as<00:43:31.329><c> well</c>

00:43:31.559 --> 00:43:31.569 align:start position:0%
as well
 

00:43:31.569 --> 00:43:34.140 align:start position:0%
as well
so<00:43:32.109><c> out</c><00:43:32.410><c> of</c><00:43:32.440><c> all</c><00:43:32.739><c> the</c><00:43:32.829><c> refactorings</c><00:43:33.400><c> here</c><00:43:33.699><c> this</c>

00:43:34.140 --> 00:43:34.150 align:start position:0%
so out of all the refactorings here this
 

00:43:34.150 --> 00:43:35.999 align:start position:0%
so out of all the refactorings here this
is<00:43:34.269><c> my</c><00:43:34.420><c> favorite</c><00:43:34.809><c> one</c><00:43:34.930><c> you</c><00:43:35.170><c> get</c><00:43:35.349><c> you</c><00:43:35.829><c> get</c>

00:43:35.999 --> 00:43:36.009 align:start position:0%
is my favorite one you get you get
 

00:43:36.009 --> 00:43:37.559 align:start position:0%
is my favorite one you get you get
better<00:43:36.279><c> performance</c><00:43:36.549><c> and</c><00:43:37.119><c> you</c><00:43:37.269><c> get</c><00:43:37.420><c> more</c>

00:43:37.559 --> 00:43:37.569 align:start position:0%
better performance and you get more
 

00:43:37.569 --> 00:43:40.559 align:start position:0%
better performance and you get more
readability<00:43:37.930><c> as</c><00:43:38.259><c> well</c><00:43:39.059><c> I've</c><00:43:40.059><c> had</c><00:43:40.299><c> to</c><00:43:40.420><c> say</c>

00:43:40.559 --> 00:43:40.569 align:start position:0%
readability as well I've had to say
 

00:43:40.569 --> 00:43:42.689 align:start position:0%
readability as well I've had to say
inconclusive<00:43:41.380><c> because</c><00:43:41.739><c> the</c><00:43:42.160><c> performance</c><00:43:42.579><c> is</c>

00:43:42.689 --> 00:43:42.699 align:start position:0%
inconclusive because the performance is
 

00:43:42.699 --> 00:43:45.029 align:start position:0%
inconclusive because the performance is
not<00:43:42.729><c> so</c><00:43:42.999><c> order</c><00:43:43.959><c> of</c><00:43:43.989><c> magnitude</c><00:43:44.559><c> better</c><00:43:44.739><c> that</c><00:43:44.949><c> is</c>

00:43:45.029 --> 00:43:45.039 align:start position:0%
not so order of magnitude better that is
 

00:43:45.039 --> 00:43:46.499 align:start position:0%
not so order of magnitude better that is
just<00:43:45.249><c> marginally</c><00:43:45.430><c> better</c><00:43:45.789><c> in</c><00:43:46.209><c> this</c>

00:43:46.499 --> 00:43:46.509 align:start position:0%
just marginally better in this
 

00:43:46.509 --> 00:43:49.589 align:start position:0%
just marginally better in this
particular<00:43:46.809><c> case</c><00:43:48.029><c> let's</c><00:43:49.029><c> go</c><00:43:49.269><c> through</c><00:43:49.449><c> and</c>

00:43:49.589 --> 00:43:49.599 align:start position:0%
particular case let's go through and
 

00:43:49.599 --> 00:43:51.269 align:start position:0%
particular case let's go through and
summarize<00:43:49.989><c> each</c><00:43:50.140><c> -</c><00:43:50.319><c> because</c><00:43:50.589><c> I</c><00:43:50.680><c> kind</c><00:43:50.890><c> of</c><00:43:50.979><c> fund</c>

00:43:51.269 --> 00:43:51.279 align:start position:0%
summarize each - because I kind of fund
 

00:43:51.279 --> 00:43:52.650 align:start position:0%
summarize each - because I kind of fund
a<00:43:51.400><c> lot</c><00:43:51.579><c> of</c><00:43:51.670><c> different</c><00:43:51.940><c> refactorings</c><00:43:52.420><c> at</c><00:43:52.539><c> you</c>

00:43:52.650 --> 00:43:52.660 align:start position:0%
a lot of different refactorings at you
 

00:43:52.660 --> 00:43:54.449 align:start position:0%
a lot of different refactorings at you
and<00:43:52.869><c> a</c><00:43:52.930><c> lot</c><00:43:53.079><c> of</c><00:43:53.170><c> performance</c><00:43:53.559><c> data</c><00:43:53.769><c> so</c><00:43:54.430><c> I</c>

00:43:54.449 --> 00:43:54.459 align:start position:0%
and a lot of performance data so I
 

00:43:54.459 --> 00:43:55.890 align:start position:0%
and a lot of performance data so I
really<00:43:54.789><c> want</c><00:43:54.940><c> to</c><00:43:55.029><c> summarize</c><00:43:55.209><c> those</c><00:43:55.630><c> things</c>

00:43:55.890 --> 00:43:55.900 align:start position:0%
really want to summarize those things
 

00:43:55.900 --> 00:43:57.989 align:start position:0%
really want to summarize those things
before<00:43:56.309><c> before</c><00:43:57.309><c> giving</c><00:43:57.609><c> some</c><00:43:57.789><c> sort</c><00:43:57.969><c> of</c>

00:43:57.989 --> 00:43:57.999 align:start position:0%
before before giving some sort of
 

00:43:57.999 --> 00:43:59.579 align:start position:0%
before before giving some sort of
conclusion<00:43:58.180><c> about</c><00:43:58.809><c> refactoring</c><00:43:59.319><c> to</c><00:43:59.410><c> Java</c>

00:43:59.579 --> 00:43:59.589 align:start position:0%
conclusion about refactoring to Java
 

00:43:59.589 --> 00:44:01.199 align:start position:0%
conclusion about refactoring to Java
eight<00:43:59.799><c> and</c><00:44:00.219><c> then</c><00:44:00.430><c> after</c><00:44:00.729><c> that</c><00:44:00.819><c> there</c><00:44:01.029><c> will</c><00:44:01.180><c> be</c>

00:44:01.199 --> 00:44:01.209 align:start position:0%
eight and then after that there will be
 

00:44:01.209 --> 00:44:05.370 align:start position:0%
eight and then after that there will be
time<00:44:01.479><c> for</c><00:44:01.509><c> questions</c><00:44:01.690><c> so</c><00:44:04.079><c> refactoring</c><00:44:05.079><c> to</c><00:44:05.229><c> use</c>

00:44:05.370 --> 00:44:05.380 align:start position:0%
time for questions so refactoring to use
 

00:44:05.380 --> 00:44:06.930 align:start position:0%
time for questions so refactoring to use
lambda<00:44:05.769><c> expressions</c><00:44:06.249><c> instead</c><00:44:06.640><c> of</c><00:44:06.759><c> for</c>

00:44:06.930 --> 00:44:06.940 align:start position:0%
lambda expressions instead of for
 

00:44:06.940 --> 00:44:08.969 align:start position:0%
lambda expressions instead of for
example<00:44:07.029><c> anonymous</c><00:44:07.749><c> inner</c><00:44:07.930><c> pipe</c><00:44:08.170><c> is</c><00:44:08.469><c> very</c>

00:44:08.969 --> 00:44:08.979 align:start position:0%
example anonymous inner pipe is very
 

00:44:08.979 --> 00:44:11.939 align:start position:0%
example anonymous inner pipe is very
easy<00:44:09.369><c> to</c><00:44:09.519><c> automate</c><00:44:09.759><c> and</c><00:44:10.469><c> it's</c><00:44:11.469><c> pretty</c><00:44:11.739><c> safe</c>

00:44:11.939 --> 00:44:11.949 align:start position:0%
easy to automate and it's pretty safe
 

00:44:11.949 --> 00:44:13.109 align:start position:0%
easy to automate and it's pretty safe
performance<00:44:12.489><c> wise</c><00:44:12.670><c> you're</c><00:44:12.849><c> going</c><00:44:12.969><c> to</c><00:44:13.029><c> get</c>

00:44:13.109 --> 00:44:13.119 align:start position:0%
performance wise you're going to get
 

00:44:13.119 --> 00:44:14.099 align:start position:0%
performance wise you're going to get
more<00:44:13.329><c> or</c><00:44:13.390><c> less</c><00:44:13.420><c> the</c><00:44:13.539><c> same</c><00:44:13.749><c> sort</c><00:44:14.049><c> of</c>

00:44:14.099 --> 00:44:14.109 align:start position:0%
more or less the same sort of
 

00:44:14.109 --> 00:44:16.229 align:start position:0%
more or less the same sort of
performance<00:44:14.499><c> so</c><00:44:14.829><c> you</c><00:44:14.920><c> can</c><00:44:15.069><c> kind</c><00:44:15.400><c> of</c><00:44:15.519><c> under</c>

00:44:16.229 --> 00:44:16.239 align:start position:0%
performance so you can kind of under
 

00:44:16.239 --> 00:44:17.939 align:start position:0%
performance so you can kind of under
under<00:44:16.479><c> most</c><00:44:16.660><c> circumstances</c><00:44:16.779><c> just</c><00:44:17.559><c> go</c><00:44:17.709><c> ahead</c>

00:44:17.939 --> 00:44:17.949 align:start position:0%
under most circumstances just go ahead
 

00:44:17.949 --> 00:44:20.420 align:start position:0%
under most circumstances just go ahead
and<00:44:18.069><c> do</c><00:44:18.160><c> that</c><00:44:18.190><c> without</c><00:44:18.459><c> worrying</c><00:44:18.759><c> too</c><00:44:19.029><c> much</c>

00:44:20.420 --> 00:44:20.430 align:start position:0%
and do that without worrying too much
 

00:44:20.430 --> 00:44:23.099 align:start position:0%
and do that without worrying too much
designing<00:44:21.430><c> for</c><00:44:21.670><c> lambda</c><00:44:21.940><c> expressions</c><00:44:22.449><c> so</c><00:44:22.900><c> for</c>

00:44:23.099 --> 00:44:23.109 align:start position:0%
designing for lambda expressions so for
 

00:44:23.109 --> 00:44:24.959 align:start position:0%
designing for lambda expressions so for
example<00:44:23.499><c> using</c><00:44:23.739><c> lambda</c><00:44:24.190><c> expressions</c><00:44:24.670><c> for</c>

00:44:24.959 --> 00:44:24.969 align:start position:0%
example using lambda expressions for
 

00:44:24.969 --> 00:44:27.390 align:start position:0%
example using lambda expressions for
lazy<00:44:25.269><c> evaluation</c><00:44:25.619><c> could</c><00:44:26.619><c> give</c><00:44:26.920><c> you</c><00:44:27.039><c> a</c><00:44:27.099><c> big</c>

00:44:27.390 --> 00:44:27.400 align:start position:0%
lazy evaluation could give you a big
 

00:44:27.400 --> 00:44:29.789 align:start position:0%
lazy evaluation could give you a big
performance<00:44:27.940><c> benefit</c><00:44:28.359><c> in</c><00:44:28.569><c> the</c><00:44:29.229><c> example</c><00:44:29.680><c> of</c>

00:44:29.789 --> 00:44:29.799 align:start position:0%
performance benefit in the example of
 

00:44:29.799 --> 00:44:33.839 align:start position:0%
performance benefit in the example of
the<00:44:30.039><c> logging</c><00:44:30.940><c> example</c><00:44:31.420><c> if</c><00:44:32.349><c> you</c><00:44:32.949><c> don't</c><00:44:33.190><c> need</c><00:44:33.489><c> to</c>

00:44:33.839 --> 00:44:33.849 align:start position:0%
the logging example if you don't need to
 

00:44:33.849 --> 00:44:35.759 align:start position:0%
the logging example if you don't need to
incur<00:44:34.150><c> the</c><00:44:34.329><c> cost</c><00:44:34.569><c> of</c><00:44:34.809><c> building</c><00:44:35.199><c> up</c><00:44:35.319><c> the</c><00:44:35.469><c> string</c>

00:44:35.759 --> 00:44:35.769 align:start position:0%
incur the cost of building up the string
 

00:44:35.769 --> 00:44:37.739 align:start position:0%
incur the cost of building up the string
because<00:44:36.309><c> you're</c><00:44:36.430><c> not</c><00:44:36.489><c> going</c><00:44:36.699><c> to</c><00:44:36.819><c> log</c><00:44:36.969><c> it</c><00:44:37.150><c> then</c>

00:44:37.739 --> 00:44:37.749 align:start position:0%
because you're not going to log it then
 

00:44:37.749 --> 00:44:40.109 align:start position:0%
because you're not going to log it then
wrap<00:44:38.079><c> it</c><00:44:38.229><c> inside</c><00:44:38.349><c> a</c><00:44:38.529><c> lambda</c><00:44:39.279><c> expression</c><00:44:39.459><c> and</c>

00:44:40.109 --> 00:44:40.119 align:start position:0%
wrap it inside a lambda expression and
 

00:44:40.119 --> 00:44:41.009 align:start position:0%
wrap it inside a lambda expression and
you're<00:44:40.539><c> going</c><00:44:40.690><c> to</c><00:44:40.749><c> get</c><00:44:40.839><c> much</c><00:44:40.989><c> better</c>

00:44:41.009 --> 00:44:41.019 align:start position:0%
you're going to get much better
 

00:44:41.019 --> 00:44:44.819 align:start position:0%
you're going to get much better
performance<00:44:41.289><c> from</c><00:44:41.829><c> that</c><00:44:43.440><c> generally</c><00:44:44.440><c> using</c>

00:44:44.819 --> 00:44:44.829 align:start position:0%
performance from that generally using
 

00:44:44.829 --> 00:44:46.620 align:start position:0%
performance from that generally using
the<00:44:44.920><c> new</c><00:44:45.039><c> idioms</c><00:44:45.400><c> the</c><00:44:45.849><c> new</c><00:44:46.059><c> methods</c><00:44:46.420><c> on</c>

00:44:46.620 --> 00:44:46.630 align:start position:0%
the new idioms the new methods on
 

00:44:46.630 --> 00:44:48.900 align:start position:0%
the new idioms the new methods on
collections<00:44:47.319><c> the</c><00:44:47.619><c> streams</c><00:44:47.920><c> API</c><00:44:48.099><c> lambda</c>

00:44:48.900 --> 00:44:48.910 align:start position:0%
collections the streams API lambda
 

00:44:48.910 --> 00:44:50.759 align:start position:0%
collections the streams API lambda
expressions<00:44:49.359><c> and</c><00:44:49.539><c> so</c><00:44:49.660><c> forth</c><00:44:49.930><c> does</c><00:44:50.229><c> increase</c>

00:44:50.759 --> 00:44:50.769 align:start position:0%
expressions and so forth does increase
 

00:44:50.769 --> 00:44:52.439 align:start position:0%
expressions and so forth does increase
readability<00:44:51.069><c> I've</c><00:44:51.549><c> got</c><00:44:51.729><c> a</c><00:44:51.759><c> few</c><00:44:51.969><c> examples</c><00:44:51.999><c> here</c>

00:44:52.439 --> 00:44:52.449 align:start position:0%
readability I've got a few examples here
 

00:44:52.449 --> 00:44:55.259 align:start position:0%
readability I've got a few examples here
for<00:44:53.229><c> example</c><00:44:53.619><c> obviously</c><00:44:54.279><c> the</c><00:44:54.489><c> obvious</c><00:44:54.759><c> one</c><00:44:54.940><c> is</c>

00:44:55.259 --> 00:44:55.269 align:start position:0%
for example obviously the obvious one is
 

00:44:55.269 --> 00:44:57.449 align:start position:0%
for example obviously the obvious one is
lambda<00:44:56.140><c> expressions</c><00:44:56.799><c> versus</c><00:44:57.069><c> anonymous</c>

00:44:57.449 --> 00:44:57.459 align:start position:0%
lambda expressions versus anonymous
 

00:44:57.459 --> 00:44:59.370 align:start position:0%
lambda expressions versus anonymous
inner<00:44:57.609><c> classes</c><00:44:57.849><c> just</c><00:44:58.449><c> removes</c><00:44:58.779><c> all</c><00:44:59.019><c> the</c><00:44:59.049><c> type</c>

00:44:59.370 --> 00:44:59.380 align:start position:0%
inner classes just removes all the type
 

00:44:59.380 --> 00:45:00.719 align:start position:0%
inner classes just removes all the type
information<00:44:59.709><c> that</c><00:45:00.069><c> you</c><00:45:00.130><c> don't</c><00:45:00.339><c> really</c><00:45:00.519><c> need</c>

00:45:00.719 --> 00:45:00.729 align:start position:0%
information that you don't really need
 

00:45:00.729 --> 00:45:04.109 align:start position:0%
information that you don't really need
I'm<00:45:01.289><c> using</c><00:45:02.289><c> a</c><00:45:02.589><c> collect</c><00:45:02.979><c> instead</c><00:45:03.670><c> of</c><00:45:03.759><c> using</c><00:45:03.910><c> a</c>

00:45:04.109 --> 00:45:04.119 align:start position:0%
I'm using a collect instead of using a
 

00:45:04.119 --> 00:45:06.449 align:start position:0%
I'm using a collect instead of using a
for<00:45:04.390><c> loop</c><00:45:04.539><c> and</c><00:45:04.719><c> adding</c><00:45:05.079><c> stuff</c><00:45:05.319><c> is</c><00:45:05.589><c> a</c><00:45:05.650><c> little</c>

00:45:06.449 --> 00:45:06.459 align:start position:0%
for loop and adding stuff is a little
 

00:45:06.459 --> 00:45:10.229 align:start position:0%
for loop and adding stuff is a little
bit<00:45:06.609><c> more</c><00:45:06.789><c> descriptive</c><00:45:07.650><c> the</c><00:45:08.650><c> any</c><00:45:09.219><c> match</c><00:45:09.880><c> is</c>

00:45:10.229 --> 00:45:10.239 align:start position:0%
bit more descriptive the any match is
 

00:45:10.239 --> 00:45:12.630 align:start position:0%
bit more descriptive the any match is
again<00:45:10.809><c> a</c><00:45:10.839><c> bit</c><00:45:11.079><c> more</c><00:45:11.259><c> descriptive</c><00:45:11.619><c> a</c><00:45:12.069><c> bit</c><00:45:12.339><c> less</c>

00:45:12.630 --> 00:45:12.640 align:start position:0%
again a bit more descriptive a bit less
 

00:45:12.640 --> 00:45:14.339 align:start position:0%
again a bit more descriptive a bit less
code<00:45:13.059><c> but</c><00:45:13.329><c> it's</c><00:45:13.420><c> not</c><00:45:13.539><c> so</c><00:45:13.630><c> much</c><00:45:13.749><c> about</c><00:45:13.869><c> the</c><00:45:14.170><c> a</c>

00:45:14.339 --> 00:45:14.349 align:start position:0%
code but it's not so much about the a
 

00:45:14.349 --> 00:45:16.079 align:start position:0%
code but it's not so much about the a
bit<00:45:14.650><c> less</c><00:45:14.859><c> code</c><00:45:15.130><c> it's</c><00:45:15.339><c> more</c><00:45:15.519><c> about</c><00:45:15.699><c> what</c><00:45:15.969><c> is</c>

00:45:16.079 --> 00:45:16.089 align:start position:0%
bit less code it's more about what is
 

00:45:16.089 --> 00:45:17.789 align:start position:0%
bit less code it's more about what is
this<00:45:16.269><c> thing</c><00:45:16.479><c> doing</c><00:45:16.690><c> well</c><00:45:17.140><c> it's</c><00:45:17.319><c> just</c><00:45:17.410><c> telling</c>

00:45:17.789 --> 00:45:17.799 align:start position:0%
this thing doing well it's just telling
 

00:45:17.799 --> 00:45:19.499 align:start position:0%
this thing doing well it's just telling
you<00:45:17.920><c> if</c><00:45:18.130><c> anything</c><00:45:18.519><c> matches</c><00:45:19.029><c> this</c><00:45:19.150><c> particular</c>

00:45:19.499 --> 00:45:19.509 align:start position:0%
you if anything matches this particular
 

00:45:19.509 --> 00:45:22.949 align:start position:0%
you if anything matches this particular
criteria<00:45:20.259><c> and</c><00:45:21.209><c> the</c><00:45:22.209><c> same</c><00:45:22.390><c> thing</c><00:45:22.599><c> with</c><00:45:22.719><c> fine</c>

00:45:22.949 --> 00:45:22.959 align:start position:0%
criteria and the same thing with fine
 

00:45:22.959 --> 00:45:25.739 align:start position:0%
criteria and the same thing with fine
first<00:45:23.259><c> fine</c><00:45:23.680><c> first</c><00:45:23.949><c> just</c><00:45:24.390><c> allows</c><00:45:25.390><c> you</c><00:45:25.599><c> to</c>

00:45:25.739 --> 00:45:25.749 align:start position:0%
first fine first just allows you to
 

00:45:25.749 --> 00:45:27.209 align:start position:0%
first fine first just allows you to
state<00:45:26.019><c> this</c><00:45:26.499><c> is</c><00:45:26.680><c> the</c><00:45:26.709><c> thing</c><00:45:27.009><c> we're</c><00:45:27.190><c> looking</c>

00:45:27.209 --> 00:45:27.219 align:start position:0%
state this is the thing we're looking
 

00:45:27.219 --> 00:45:30.120 align:start position:0%
state this is the thing we're looking
for<00:45:27.670><c> something</c><00:45:28.119><c> with</c><00:45:28.239><c> this</c><00:45:28.390><c> annotation</c><00:45:29.130><c> and</c>

00:45:30.120 --> 00:45:30.130 align:start position:0%
for something with this annotation and
 

00:45:30.130 --> 00:45:32.549 align:start position:0%
for something with this annotation and
of<00:45:30.999><c> course</c><00:45:31.180><c> remove</c><00:45:31.539><c> if</c><00:45:31.719><c> you</c><00:45:32.019><c> just</c><00:45:32.229><c> lose</c><00:45:32.529><c> a</c>

00:45:32.549 --> 00:45:32.559 align:start position:0%
of course remove if you just lose a
 

00:45:32.559 --> 00:45:34.829 align:start position:0%
of course remove if you just lose a
whole<00:45:32.920><c> lot</c><00:45:32.949><c> of</c><00:45:33.249><c> boilerplate</c><00:45:33.579><c> and</c><00:45:33.969><c> you're</c><00:45:34.660><c> left</c>

00:45:34.829 --> 00:45:34.839 align:start position:0%
whole lot of boilerplate and you're left
 

00:45:34.839 --> 00:45:36.930 align:start position:0%
whole lot of boilerplate and you're left
with<00:45:35.049><c> only</c><00:45:35.259><c> the</c><00:45:35.650><c> thing</c><00:45:36.309><c> you</c><00:45:36.430><c> care</c><00:45:36.670><c> about</c>

00:45:36.930 --> 00:45:36.940 align:start position:0%
with only the thing you care about
 

00:45:36.940 --> 00:45:40.699 align:start position:0%
with only the thing you care about
only<00:45:37.420><c> the</c><00:45:38.279><c> pattern</c><00:45:39.279><c> that</c><00:45:39.549><c> you</c><00:45:39.819><c> want</c><00:45:40.029><c> to</c><00:45:40.239><c> remove</c>

00:45:40.699 --> 00:45:40.709 align:start position:0%
only the pattern that you want to remove
 

00:45:40.709 --> 00:45:43.549 align:start position:0%
only the pattern that you want to remove
and<00:45:42.150><c> then</c><00:45:43.150><c> when</c><00:45:43.299><c> you</c>

00:45:43.549 --> 00:45:43.559 align:start position:0%
and then when you
 

00:45:43.559 --> 00:45:46.069 align:start position:0%
and then when you
doing<00:45:43.769><c> multiple</c><00:45:44.640><c> operations</c><00:45:44.999><c> and</c><00:45:45.569><c> tracking</c>

00:45:46.069 --> 00:45:46.079 align:start position:0%
doing multiple operations and tracking
 

00:45:46.079 --> 00:45:47.390 align:start position:0%
doing multiple operations and tracking
those<00:45:46.229><c> down</c><00:45:46.439><c> into</c><00:45:46.619><c> a</c><00:45:46.709><c> single</c><00:45:46.979><c> extreme</c>

00:45:47.390 --> 00:45:47.400 align:start position:0%
those down into a single extreme
 

00:45:47.400 --> 00:45:49.640 align:start position:0%
those down into a single extreme
operation<00:45:47.939><c> you</c><00:45:48.059><c> get</c><00:45:48.239><c> quite</c><00:45:48.539><c> a</c><00:45:48.569><c> lot</c><00:45:48.779><c> of</c><00:45:48.809><c> wins</c><00:45:49.109><c> so</c>

00:45:49.640 --> 00:45:49.650 align:start position:0%
operation you get quite a lot of wins so
 

00:45:49.650 --> 00:45:52.009 align:start position:0%
operation you get quite a lot of wins so
instead<00:45:49.890><c> of</c><00:45:49.949><c> having</c><00:45:50.130><c> to</c><00:45:50.489><c> have</c><00:45:50.729><c> two</c><00:45:51.449><c> four</c><00:45:51.809><c> loops</c>

00:45:52.009 --> 00:45:52.019 align:start position:0%
instead of having to have two four loops
 

00:45:52.019 --> 00:45:53.870 align:start position:0%
instead of having to have two four loops
with<00:45:52.319><c> the</c><00:45:52.380><c> sort</c><00:45:52.650><c> you</c><00:45:52.859><c> have</c><00:45:53.249><c> a</c><00:45:53.279><c> single</c><00:45:53.640><c> stream</c>

00:45:53.870 --> 00:45:53.880 align:start position:0%
with the sort you have a single stream
 

00:45:53.880 --> 00:45:56.269 align:start position:0%
with the sort you have a single stream
operation<00:45:54.420><c> which</c><00:45:54.569><c> does</c><00:45:54.749><c> a</c><00:45:54.779><c> map</c><00:45:55.049><c> sorted</c><00:45:55.739><c> and</c><00:45:55.949><c> a</c>

00:45:56.269 --> 00:45:56.279 align:start position:0%
operation which does a map sorted and a
 

00:45:56.279 --> 00:45:59.120 align:start position:0%
operation which does a map sorted and a
for<00:45:56.489><c> each</c><00:45:56.699><c> and</c><00:45:56.999><c> so</c><00:45:57.539><c> it's</c><00:45:58.170><c> much</c><00:45:58.349><c> more</c><00:45:58.380><c> easy</c><00:45:58.890><c> to</c>

00:45:59.120 --> 00:45:59.130 align:start position:0%
for each and so it's much more easy to
 

00:45:59.130 --> 00:46:00.769 align:start position:0%
for each and so it's much more easy to
reason<00:45:59.339><c> around</c><00:45:59.670><c> and</c><00:45:59.910><c> probably</c><00:46:00.660><c> a</c><00:46:00.689><c> better</c>

00:46:00.769 --> 00:46:00.779 align:start position:0%
reason around and probably a better
 

00:46:00.779 --> 00:46:04.099 align:start position:0%
reason around and probably a better
performance<00:46:01.319><c> and</c><00:46:02.150><c> again</c><00:46:03.150><c> here</c><00:46:03.479><c> this</c><00:46:03.779><c> is</c><00:46:03.900><c> where</c>

00:46:04.099 --> 00:46:04.109 align:start position:0%
performance and again here this is where
 

00:46:04.109 --> 00:46:06.319 align:start position:0%
performance and again here this is where
we<00:46:04.349><c> have</c><00:46:04.859><c> we</c><00:46:05.549><c> were</c><00:46:05.670><c> doing</c><00:46:05.969><c> multiple</c>

00:46:06.319 --> 00:46:06.329 align:start position:0%
we have we were doing multiple
 

00:46:06.329 --> 00:46:07.910 align:start position:0%
we have we were doing multiple
operations<00:46:06.569><c> without</c><00:46:06.839><c> really</c><00:46:07.170><c> realizing</c><00:46:07.289><c> it</c>

00:46:07.910 --> 00:46:07.920 align:start position:0%
operations without really realizing it
 

00:46:07.920 --> 00:46:09.679 align:start position:0%
operations without really realizing it
because<00:46:08.039><c> we</c><00:46:08.369><c> were</c><00:46:08.579><c> collecting</c><00:46:09.180><c> stuck</c><00:46:09.420><c> into</c><00:46:09.599><c> a</c>

00:46:09.679 --> 00:46:09.689 align:start position:0%
because we were collecting stuck into a
 

00:46:09.689 --> 00:46:11.630 align:start position:0%
because we were collecting stuck into a
list<00:46:09.959><c> and</c><00:46:10.199><c> then</c><00:46:10.349><c> doing</c><00:46:10.559><c> a</c><00:46:10.709><c> -</c><00:46:10.920><c> array</c><00:46:10.949><c> on</c><00:46:11.339><c> it</c><00:46:11.489><c> and</c>

00:46:11.630 --> 00:46:11.640 align:start position:0%
list and then doing a - array on it and
 

00:46:11.640 --> 00:46:13.489 align:start position:0%
list and then doing a - array on it and
here<00:46:12.329><c> we'll</c><00:46:12.449><c> just</c><00:46:12.479><c> turn</c><00:46:12.779><c> that</c><00:46:12.959><c> into</c><00:46:13.109><c> a</c><00:46:13.259><c> single</c>

00:46:13.489 --> 00:46:13.499 align:start position:0%
here we'll just turn that into a single
 

00:46:13.499 --> 00:46:16.999 align:start position:0%
here we'll just turn that into a single
operation<00:46:15.109><c> but</c><00:46:16.109><c> you</c><00:46:16.229><c> do</c><00:46:16.380><c> need</c><00:46:16.529><c> to</c><00:46:16.589><c> be</c><00:46:16.709><c> aware</c><00:46:16.949><c> of</c>

00:46:16.999 --> 00:46:17.009 align:start position:0%
operation but you do need to be aware of
 

00:46:17.009 --> 00:46:18.739 align:start position:0%
operation but you do need to be aware of
the<00:46:17.219><c> performance</c><00:46:17.759><c> now</c><00:46:18.029><c> I'm</c><00:46:18.269><c> not</c><00:46:18.420><c> saying</c><00:46:18.599><c> you</c>

00:46:18.739 --> 00:46:18.749 align:start position:0%
the performance now I'm not saying you
 

00:46:18.749 --> 00:46:20.989 align:start position:0%
the performance now I'm not saying you
have<00:46:18.839><c> to</c><00:46:19.049><c> micro</c><00:46:19.559><c> benchmark</c><00:46:20.039><c> every</c><00:46:20.549><c> single</c>

00:46:20.989 --> 00:46:20.999 align:start position:0%
have to micro benchmark every single
 

00:46:20.999 --> 00:46:23.089 align:start position:0%
have to micro benchmark every single
instance<00:46:21.569><c> of</c><00:46:21.779><c> these</c><00:46:22.049><c> of</c><00:46:22.319><c> these</c><00:46:22.469><c> refactorings</c>

00:46:23.089 --> 00:46:23.099 align:start position:0%
instance of these of these refactorings
 

00:46:23.099 --> 00:46:24.469 align:start position:0%
instance of these of these refactorings
but<00:46:23.699><c> you</c><00:46:23.789><c> do</c><00:46:23.939><c> need</c><00:46:24.150><c> to</c><00:46:24.209><c> have</c><00:46:24.239><c> an</c><00:46:24.390><c> understanding</c>

00:46:24.469 --> 00:46:24.479 align:start position:0%
but you do need to have an understanding
 

00:46:24.479 --> 00:46:27.410 align:start position:0%
but you do need to have an understanding
of<00:46:25.199><c> which</c><00:46:25.410><c> of</c><00:46:25.619><c> them</c><00:46:25.799><c> might</c><00:46:26.069><c> have</c><00:46:26.279><c> which</c><00:46:27.269><c> of</c>

00:46:27.410 --> 00:46:27.420 align:start position:0%
of which of them might have which of
 

00:46:27.420 --> 00:46:28.609 align:start position:0%
of which of them might have which of
them<00:46:27.509><c> might</c><00:46:27.689><c> have</c><00:46:27.930><c> an</c><00:46:28.049><c> impact</c><00:46:28.170><c> on</c><00:46:28.469><c> performance</c>

00:46:28.609 --> 00:46:28.619 align:start position:0%
them might have an impact on performance
 

00:46:28.619 --> 00:46:30.650 align:start position:0%
them might have an impact on performance
and<00:46:29.400><c> which</c><00:46:29.579><c> ones</c><00:46:29.789><c> you</c><00:46:29.910><c> might</c><00:46:30.089><c> need</c><00:46:30.269><c> to</c><00:46:30.390><c> go</c><00:46:30.539><c> away</c>

00:46:30.650 --> 00:46:30.660 align:start position:0%
and which ones you might need to go away
 

00:46:30.660 --> 00:46:33.199 align:start position:0%
and which ones you might need to go away
and<00:46:30.900><c> check</c><00:46:31.170><c> and</c><00:46:31.349><c> test</c><00:46:31.589><c> for</c><00:46:31.829><c> for</c><00:46:32.819><c> example</c>

00:46:33.199 --> 00:46:33.209 align:start position:0%
and check and test for for example
 

00:46:33.209 --> 00:46:34.910 align:start position:0%
and check and test for for example
anywhere<00:46:33.930><c> we're</c><00:46:34.140><c> going</c><00:46:34.319><c> to</c><00:46:34.410><c> be</c><00:46:34.499><c> using</c><00:46:34.829><c> a</c>

00:46:34.910 --> 00:46:34.920 align:start position:0%
anywhere we're going to be using a
 

00:46:34.920 --> 00:46:37.249 align:start position:0%
anywhere we're going to be using a
raised<00:46:35.160><c> extreme</c><00:46:35.759><c> is</c><00:46:35.939><c> probably</c><00:46:36.779><c> going</c><00:46:37.019><c> to</c><00:46:37.140><c> be</c>

00:46:37.249 --> 00:46:37.259 align:start position:0%
raised extreme is probably going to be
 

00:46:37.259 --> 00:46:39.319 align:start position:0%
raised extreme is probably going to be
slower<00:46:37.499><c> than</c><00:46:37.589><c> using</c><00:46:37.979><c> in</c><00:46:38.069><c> a</c><00:46:38.130><c> way</c><00:46:38.279><c> as</c><00:46:38.969><c> I</c><00:46:39.299><c> said</c>

00:46:39.319 --> 00:46:39.329 align:start position:0%
slower than using in a way as I said
 

00:46:39.329 --> 00:46:42.589 align:start position:0%
slower than using in a way as I said
operations<00:46:40.229><c> on</c><00:46:40.380><c> arrays</c><00:46:40.410><c> are</c><00:46:40.939><c> very</c><00:46:41.939><c> efficient</c>

00:46:42.589 --> 00:46:42.599 align:start position:0%
operations on arrays are very efficient
 

00:46:42.599 --> 00:46:44.479 align:start position:0%
operations on arrays are very efficient
for<00:46:42.809><c> computers</c><00:46:43.259><c> they're</c><00:46:43.739><c> easy</c><00:46:44.069><c> to</c><00:46:44.279><c> reason</c>

00:46:44.479 --> 00:46:44.489 align:start position:0%
for computers they're easy to reason
 

00:46:44.489 --> 00:46:46.519 align:start position:0%
for computers they're easy to reason
around<00:46:44.849><c> for</c><00:46:45.059><c> the</c><00:46:45.119><c> compiler</c><00:46:45.509><c> is</c><00:46:46.049><c> they're</c><00:46:46.259><c> easy</c>

00:46:46.519 --> 00:46:46.529 align:start position:0%
around for the compiler is they're easy
 

00:46:46.529 --> 00:46:48.739 align:start position:0%
around for the compiler is they're easy
for<00:46:46.799><c> the</c><00:46:46.890><c> CPU</c><00:46:47.400><c> to</c><00:46:47.670><c> reason</c><00:46:47.999><c> around</c><00:46:48.239><c> and</c><00:46:48.420><c> in</c>

00:46:48.739 --> 00:46:48.749 align:start position:0%
for the CPU to reason around and in
 

00:46:48.749 --> 00:46:50.630 align:start position:0%
for the CPU to reason around and in
memory<00:46:48.989><c> all</c><00:46:49.349><c> those</c><00:46:49.679><c> array</c><00:46:49.979><c> objects</c><00:46:50.339><c> are</c><00:46:50.459><c> next</c>

00:46:50.630 --> 00:46:50.640 align:start position:0%
memory all those array objects are next
 

00:46:50.640 --> 00:46:52.729 align:start position:0%
memory all those array objects are next
to<00:46:50.789><c> each</c><00:46:50.910><c> other</c><00:46:50.999><c> -</c><00:46:51.269><c> so</c><00:46:51.599><c> array</c><00:46:52.140><c> operations</c>

00:46:52.729 --> 00:46:52.739 align:start position:0%
to each other - so array operations
 

00:46:52.739 --> 00:46:54.979 align:start position:0%
to each other - so array operations
traversing<00:46:53.369><c> arrays</c><00:46:53.670><c> is</c><00:46:54.029><c> a</c><00:46:54.179><c> very</c><00:46:54.479><c> efficient</c>

00:46:54.979 --> 00:46:54.989 align:start position:0%
traversing arrays is a very efficient
 

00:46:54.989 --> 00:46:57.559 align:start position:0%
traversing arrays is a very efficient
operation<00:46:55.499><c> so</c><00:46:55.949><c> arrays</c><00:46:56.279><c> dot</c><00:46:56.519><c> stream</c><00:46:56.969><c> may</c><00:46:57.509><c> be</c>

00:46:57.559 --> 00:46:57.569 align:start position:0%
operation so arrays dot stream may be
 

00:46:57.569 --> 00:47:01.910 align:start position:0%
operation so arrays dot stream may be
taking<00:46:57.989><c> away</c><00:46:58.109><c> from</c><00:46:58.319><c> efficiency</c><00:46:59.160><c> and</c><00:47:00.769><c> so</c><00:47:01.769><c> this</c>

00:47:01.910 --> 00:47:01.920 align:start position:0%
taking away from efficiency and so this
 

00:47:01.920 --> 00:47:04.549 align:start position:0%
taking away from efficiency and so this
is<00:47:02.069><c> one</c><00:47:02.309><c> of</c><00:47:02.400><c> those</c><00:47:02.459><c> example</c><00:47:02.999><c> where</c><00:47:03.239><c> the</c><00:47:03.630><c> using</c>

00:47:04.549 --> 00:47:04.559 align:start position:0%
is one of those example where the using
 

00:47:04.559 --> 00:47:06.589 align:start position:0%
is one of those example where the using
arrays<00:47:04.910><c> just</c><00:47:05.910><c> gave</c><00:47:06.089><c> you</c><00:47:06.209><c> much</c><00:47:06.390><c> worse</c>

00:47:06.589 --> 00:47:06.599 align:start position:0%
arrays just gave you much worse
 

00:47:06.599 --> 00:47:09.769 align:start position:0%
arrays just gave you much worse
performance<00:47:06.779><c> from</c><00:47:07.199><c> the</c><00:47:07.319><c> original</c><00:47:07.679><c> code</c><00:47:08.779><c> using</c>

00:47:09.769 --> 00:47:09.779 align:start position:0%
performance from the original code using
 

00:47:09.779 --> 00:47:11.539 align:start position:0%
performance from the original code using
the<00:47:09.809><c> for</c><00:47:10.079><c> each</c><00:47:10.259><c> or</c><00:47:10.499><c> the</c><00:47:10.589><c> collect</c><00:47:10.859><c> might</c><00:47:11.249><c> be</c>

00:47:11.539 --> 00:47:11.549 align:start position:0%
the for each or the collect might be
 

00:47:11.549 --> 00:47:13.039 align:start position:0%
the for each or the collect might be
slower<00:47:11.819><c> than</c><00:47:11.910><c> iterating</c><00:47:12.420><c> over</c><00:47:12.509><c> collection</c>

00:47:13.039 --> 00:47:13.049 align:start position:0%
slower than iterating over collection
 

00:47:13.049 --> 00:47:15.229 align:start position:0%
slower than iterating over collection
this<00:47:13.319><c> is</c><00:47:13.380><c> where</c><00:47:13.709><c> the</c><00:47:13.920><c> answer</c><00:47:14.099><c> is</c><00:47:14.279><c> it</c><00:47:14.699><c> depends</c>

00:47:15.229 --> 00:47:15.239 align:start position:0%
this is where the answer is it depends
 

00:47:15.239 --> 00:47:17.509 align:start position:0%
this is where the answer is it depends
so<00:47:15.509><c> there</c><00:47:15.869><c> are</c><00:47:15.959><c> some</c><00:47:16.109><c> cases</c><00:47:16.439><c> where</c><00:47:16.979><c> using</c><00:47:17.309><c> the</c>

00:47:17.509 --> 00:47:17.519 align:start position:0%
so there are some cases where using the
 

00:47:17.519 --> 00:47:19.969 align:start position:0%
so there are some cases where using the
for<00:47:17.999><c> each</c><00:47:18.209><c> gave</c><00:47:18.839><c> you</c><00:47:18.959><c> sort</c><00:47:19.170><c> of</c><00:47:19.199><c> half</c><00:47:19.529><c> of</c><00:47:19.829><c> the</c>

00:47:19.969 --> 00:47:19.979 align:start position:0%
for each gave you sort of half of the
 

00:47:19.979 --> 00:47:22.519 align:start position:0%
for each gave you sort of half of the
speed<00:47:20.249><c> that</c><00:47:20.279><c> you</c><00:47:20.699><c> had</c><00:47:20.849><c> had</c><00:47:20.999><c> before</c><00:47:21.209><c> in</c><00:47:21.749><c> some</c>

00:47:22.519 --> 00:47:22.529 align:start position:0%
speed that you had had before in some
 

00:47:22.529 --> 00:47:24.229 align:start position:0%
speed that you had had before in some
cases<00:47:22.799><c> in</c><00:47:23.069><c> sorry</c><00:47:23.400><c> some</c><00:47:23.640><c> cases</c><00:47:23.939><c> in</c><00:47:24.029><c> the</c><00:47:24.089><c> past</c>

00:47:24.229 --> 00:47:24.239 align:start position:0%
cases in sorry some cases in the past
 

00:47:24.239 --> 00:47:25.400 align:start position:0%
cases in sorry some cases in the past
where<00:47:24.420><c> you</c><00:47:24.689><c> get</c><00:47:24.809><c> the</c><00:47:24.929><c> same</c><00:47:25.079><c> sort</c><00:47:25.229><c> of</c>

00:47:25.400 --> 00:47:25.410 align:start position:0%
where you get the same sort of
 

00:47:25.410 --> 00:47:27.620 align:start position:0%
where you get the same sort of
performance<00:47:25.799><c> this</c><00:47:26.339><c> is</c><00:47:26.459><c> where</c><00:47:26.640><c> it</c><00:47:26.729><c> really</c><00:47:27.029><c> it</c>

00:47:27.620 --> 00:47:27.630 align:start position:0%
performance this is where it really it
 

00:47:27.630 --> 00:47:29.150 align:start position:0%
performance this is where it really it
depends<00:47:28.019><c> a</c><00:47:28.170><c> bit</c><00:47:28.199><c> on</c><00:47:28.349><c> what</c><00:47:28.679><c> you're</c><00:47:28.799><c> doing</c>

00:47:29.150 --> 00:47:29.160 align:start position:0%
depends a bit on what you're doing
 

00:47:29.160 --> 00:47:30.859 align:start position:0%
depends a bit on what you're doing
what's<00:47:29.429><c> the</c><00:47:29.609><c> cost</c><00:47:29.819><c> of</c><00:47:29.939><c> the</c><00:47:30.029><c> operation</c><00:47:30.239><c> inside</c>

00:47:30.859 --> 00:47:30.869 align:start position:0%
what's the cost of the operation inside
 

00:47:30.869 --> 00:47:34.489 align:start position:0%
what's the cost of the operation inside
that<00:47:31.049><c> iteration</c><00:47:32.119><c> and</c><00:47:33.119><c> parallel</c><00:47:33.689><c> is</c><00:47:33.959><c> not</c><00:47:34.229><c> going</c>

00:47:34.489 --> 00:47:34.499 align:start position:0%
that iteration and parallel is not going
 

00:47:34.499 --> 00:47:36.589 align:start position:0%
that iteration and parallel is not going
to<00:47:34.589><c> magically</c><00:47:35.279><c> give</c><00:47:35.489><c> you</c><00:47:35.609><c> speed</c><00:47:35.910><c> improvements</c>

00:47:36.589 --> 00:47:36.599 align:start position:0%
to magically give you speed improvements
 

00:47:36.599 --> 00:47:38.150 align:start position:0%
to magically give you speed improvements
parallel<00:47:37.140><c> is</c><00:47:37.289><c> not</c><00:47:37.469><c> some</c><00:47:37.679><c> magic</c><00:47:37.979><c> incantation</c>

00:47:38.150 --> 00:47:38.160 align:start position:0%
parallel is not some magic incantation
 

00:47:38.160 --> 00:47:40.849 align:start position:0%
parallel is not some magic incantation
which<00:47:38.849><c> would</c><00:47:39.029><c> just</c><00:47:39.269><c> do</c><00:47:39.509><c> all</c><00:47:40.380><c> the</c><00:47:40.589><c> hard</c><00:47:40.739><c> work</c>

00:47:40.849 --> 00:47:40.859 align:start position:0%
which would just do all the hard work
 

00:47:40.859 --> 00:47:43.009 align:start position:0%
which would just do all the hard work
for<00:47:41.369><c> you</c><00:47:41.519><c> it</c><00:47:42.119><c> will</c><00:47:42.449><c> give</c><00:47:42.689><c> you</c><00:47:42.779><c> speed</c>

00:47:43.009 --> 00:47:43.019 align:start position:0%
for you it will give you speed
 

00:47:43.019 --> 00:47:45.019 align:start position:0%
for you it will give you speed
improvements<00:47:43.589><c> if</c><00:47:43.709><c> your</c><00:47:43.979><c> data</c><00:47:44.219><c> is</c><00:47:44.459><c> very</c><00:47:44.759><c> big</c>

00:47:45.019 --> 00:47:45.029 align:start position:0%
improvements if your data is very big
 

00:47:45.029 --> 00:47:47.209 align:start position:0%
improvements if your data is very big
for<00:47:45.269><c> example</c><00:47:46.019><c> here</c><00:47:46.259><c> we've</c><00:47:46.439><c> got</c><00:47:46.529><c> 10,000</c>

00:47:47.209 --> 00:47:47.219 align:start position:0%
for example here we've got 10,000
 

00:47:47.219 --> 00:47:48.890 align:start position:0%
for example here we've got 10,000
elements<00:47:47.429><c> we're</c><00:47:47.819><c> starting</c><00:47:48.329><c> to</c><00:47:48.479><c> see</c><00:47:48.509><c> where</c>

00:47:48.890 --> 00:47:48.900 align:start position:0%
elements we're starting to see where
 

00:47:48.900 --> 00:47:51.229 align:start position:0%
elements we're starting to see where
parallelize<00:47:49.559><c> is</c><00:47:49.739><c> giving</c><00:47:50.249><c> us</c><00:47:50.369><c> some</c><00:47:50.699><c> benefit</c>

00:47:51.229 --> 00:47:51.239 align:start position:0%
parallelize is giving us some benefit
 

00:47:51.239 --> 00:47:53.749 align:start position:0%
parallelize is giving us some benefit
and<00:47:51.529><c> if</c><00:47:52.529><c> your</c><00:47:52.679><c> operation</c><00:47:53.099><c> is</c><00:47:53.189><c> very</c><00:47:53.459><c> expensive</c>

00:47:53.749 --> 00:47:53.759 align:start position:0%
and if your operation is very expensive
 

00:47:53.759 --> 00:47:56.089 align:start position:0%
and if your operation is very expensive
then<00:47:54.269><c> you</c><00:47:54.390><c> might</c><00:47:54.599><c> want</c><00:47:54.839><c> to</c><00:47:54.900><c> use</c><00:47:55.170><c> multiple</c><00:47:55.380><c> CPUs</c>

00:47:56.089 --> 00:47:56.099 align:start position:0%
then you might want to use multiple CPUs
 

00:47:56.099 --> 00:47:56.930 align:start position:0%
then you might want to use multiple CPUs
and<00:47:56.339><c> format</c>

00:47:56.930 --> 00:47:56.940 align:start position:0%
and format
 

00:47:56.940 --> 00:47:59.420 align:start position:0%
and format
over<00:47:57.329><c> multiple</c><00:47:57.690><c> CPUs</c><00:47:58.109><c> those</c><00:47:58.650><c> the</c><00:47:58.859><c> cases</c><00:47:59.220><c> where</c>

00:47:59.420 --> 00:47:59.430 align:start position:0%
over multiple CPUs those the cases where
 

00:47:59.430 --> 00:48:02.770 align:start position:0%
over multiple CPUs those the cases where
parallel<00:47:59.940><c> is</c><00:48:00.089><c> going</c><00:48:00.300><c> to</c><00:48:00.390><c> be</c><00:48:00.450><c> useful</c><00:48:00.690><c> for</c><00:48:00.900><c> you</c>

00:48:02.770 --> 00:48:02.780 align:start position:0%
parallel is going to be useful for you
 

00:48:02.780 --> 00:48:05.540 align:start position:0%
parallel is going to be useful for you
sometimes<00:48:03.780><c> with</c><00:48:04.050><c> these</c><00:48:04.170><c> Java</c><00:48:04.410><c> 8</c><00:48:04.650><c> features</c><00:48:05.369><c> you</c>

00:48:05.540 --> 00:48:05.550 align:start position:0%
sometimes with these Java 8 features you
 

00:48:05.550 --> 00:48:07.220 align:start position:0%
sometimes with these Java 8 features you
get<00:48:05.700><c> improved</c><00:48:06.030><c> readability</c><00:48:06.390><c> and</c><00:48:06.839><c> better</c>

00:48:07.220 --> 00:48:07.230 align:start position:0%
get improved readability and better
 

00:48:07.230 --> 00:48:10.760 align:start position:0%
get improved readability and better
performance<00:48:07.440><c> so</c><00:48:08.280><c> for</c><00:48:09.349><c> example</c><00:48:10.349><c> it</c><00:48:10.560><c> was</c><00:48:10.710><c> the</c>

00:48:10.760 --> 00:48:10.770 align:start position:0%
performance so for example it was the
 

00:48:10.770 --> 00:48:13.640 align:start position:0%
performance so for example it was the
remove<00:48:11.190><c> if</c><00:48:11.430><c> we</c><00:48:12.060><c> got</c><00:48:12.240><c> a</c><00:48:12.390><c> better</c><00:48:13.200><c> readability</c>

00:48:13.640 --> 00:48:13.650 align:start position:0%
remove if we got a better readability
 

00:48:13.650 --> 00:48:17.059 align:start position:0%
remove if we got a better readability
and<00:48:14.160><c> we</c><00:48:14.670><c> got</c><00:48:14.819><c> better</c><00:48:15.000><c> performance</c><00:48:15.450><c> as</c><00:48:15.569><c> well</c><00:48:16.069><c> so</c>

00:48:17.059 --> 00:48:17.069 align:start position:0%
and we got better performance as well so
 

00:48:17.069 --> 00:48:21.140 align:start position:0%
and we got better performance as well so
let's<00:48:18.000><c> conclude</c><00:48:18.210><c> these</c><00:48:19.280><c> should</c><00:48:20.280><c> you</c><00:48:20.490><c> migrate</c>

00:48:21.140 --> 00:48:21.150 align:start position:0%
let's conclude these should you migrate
 

00:48:21.150 --> 00:48:23.960 align:start position:0%
let's conclude these should you migrate
your<00:48:21.329><c> code</c><00:48:21.569><c> to</c><00:48:21.599><c> Java</c><00:48:21.960><c> 8</c><00:48:22.369><c> well</c><00:48:23.369><c> of</c><00:48:23.490><c> course</c><00:48:23.520><c> it</c>

00:48:23.960 --> 00:48:23.970 align:start position:0%
your code to Java 8 well of course it
 

00:48:23.970 --> 00:48:25.670 align:start position:0%
your code to Java 8 well of course it
depends<00:48:24.329><c> there's</c><00:48:24.930><c> never</c><00:48:25.230><c> a</c><00:48:25.349><c> straightforward</c>

00:48:25.670 --> 00:48:25.680 align:start position:0%
depends there's never a straightforward
 

00:48:25.680 --> 00:48:28.579 align:start position:0%
depends there's never a straightforward
answer<00:48:26.099><c> to</c><00:48:26.579><c> to</c><00:48:27.000><c> any</c><00:48:27.150><c> technical</c><00:48:27.630><c> question</c><00:48:28.109><c> so</c>

00:48:28.579 --> 00:48:28.589 align:start position:0%
answer to to any technical question so
 

00:48:28.589 --> 00:48:31.400 align:start position:0%
answer to to any technical question so
it<00:48:28.829><c> depends</c><00:48:29.359><c> you</c><00:48:30.359><c> have</c><00:48:30.540><c> to</c><00:48:30.720><c> remember</c><00:48:30.930><c> what</c><00:48:31.260><c> the</c>

00:48:31.400 --> 00:48:31.410 align:start position:0%
it depends you have to remember what the
 

00:48:31.410 --> 00:48:33.980 align:start position:0%
it depends you have to remember what the
goal<00:48:31.650><c> of</c><00:48:31.859><c> your</c><00:48:31.950><c> refactoring</c><00:48:32.579><c> was</c><00:48:32.760><c> was</c><00:48:33.630><c> your</c>

00:48:33.980 --> 00:48:33.990 align:start position:0%
goal of your refactoring was was your
 

00:48:33.990 --> 00:48:36.440 align:start position:0%
goal of your refactoring was was your
goal<00:48:34.230><c> to</c><00:48:34.680><c> get</c><00:48:34.890><c> better</c><00:48:35.069><c> performance</c><00:48:35.280><c> in</c><00:48:35.849><c> which</c>

00:48:36.440 --> 00:48:36.450 align:start position:0%
goal to get better performance in which
 

00:48:36.450 --> 00:48:37.609 align:start position:0%
goal to get better performance in which
case<00:48:36.690><c> obviously</c><00:48:36.839><c> you're</c><00:48:37.140><c> going</c><00:48:37.290><c> to</c><00:48:37.380><c> need</c><00:48:37.530><c> to</c>

00:48:37.609 --> 00:48:37.619 align:start position:0%
case obviously you're going to need to
 

00:48:37.619 --> 00:48:39.500 align:start position:0%
case obviously you're going to need to
test<00:48:37.800><c> that</c><00:48:37.980><c> performance</c><00:48:38.490><c> if</c><00:48:38.880><c> your</c><00:48:39.240><c> goal</c><00:48:39.480><c> was</c>

00:48:39.500 --> 00:48:39.510 align:start position:0%
test that performance if your goal was
 

00:48:39.510 --> 00:48:42.740 align:start position:0%
test that performance if your goal was
readability<00:48:40.079><c> or</c><00:48:40.760><c> learning</c><00:48:41.760><c> then</c><00:48:42.329><c> you</c><00:48:42.480><c> need</c><00:48:42.660><c> to</c>

00:48:42.740 --> 00:48:42.750 align:start position:0%
readability or learning then you need to
 

00:48:42.750 --> 00:48:44.390 align:start position:0%
readability or learning then you need to
check<00:48:42.960><c> whether</c><00:48:43.230><c> the</c><00:48:43.440><c> refactoring</c><00:48:43.710><c> has</c><00:48:44.069><c> given</c>

00:48:44.390 --> 00:48:44.400 align:start position:0%
check whether the refactoring has given
 

00:48:44.400 --> 00:48:46.220 align:start position:0%
check whether the refactoring has given
you<00:48:44.490><c> better</c><00:48:44.700><c> readability</c><00:48:45.030><c> or</c><00:48:45.540><c> whether</c><00:48:46.050><c> you</c>

00:48:46.220 --> 00:48:46.230 align:start position:0%
you better readability or whether you
 

00:48:46.230 --> 00:48:47.300 align:start position:0%
you better readability or whether you
have<00:48:46.349><c> actually</c><00:48:46.680><c> learned</c><00:48:46.859><c> anything</c><00:48:47.130><c> from</c>

00:48:47.300 --> 00:48:47.310 align:start position:0%
have actually learned anything from
 

00:48:47.310 --> 00:48:49.609 align:start position:0%
have actually learned anything from
doing<00:48:47.790><c> use</c><00:48:47.940><c> refactorings</c><00:48:48.569><c> so</c><00:48:49.170><c> you</c><00:48:49.260><c> should</c><00:48:49.530><c> be</c>

00:48:49.609 --> 00:48:49.619 align:start position:0%
doing use refactorings so you should be
 

00:48:49.619 --> 00:48:51.500 align:start position:0%
doing use refactorings so you should be
comparing<00:48:50.220><c> the</c><00:48:50.339><c> results</c><00:48:50.460><c> of</c><00:48:50.970><c> your</c><00:48:51.180><c> research</c>

00:48:51.500 --> 00:48:51.510 align:start position:0%
comparing the results of your research
 

00:48:51.510 --> 00:48:53.900 align:start position:0%
comparing the results of your research
rings<00:48:51.810><c> with</c><00:48:52.440><c> the</c><00:48:52.800><c> initial</c><00:48:53.220><c> original</c><00:48:53.490><c> goal</c>

00:48:53.900 --> 00:48:53.910 align:start position:0%
rings with the initial original goal
 

00:48:53.910 --> 00:48:56.809 align:start position:0%
rings with the initial original goal
that<00:48:54.089><c> you</c><00:48:54.210><c> had</c><00:48:54.390><c> in</c><00:48:54.510><c> mind</c><00:48:55.579><c> you</c><00:48:56.579><c> need</c><00:48:56.730><c> to</c>

00:48:56.809 --> 00:48:56.819 align:start position:0%
that you had in mind you need to
 

00:48:56.819 --> 00:48:58.339 align:start position:0%
that you had in mind you need to
understand<00:48:57.240><c> which</c><00:48:57.450><c> things</c><00:48:57.750><c> might</c><00:48:57.990><c> impact</c>

00:48:58.339 --> 00:48:58.349 align:start position:0%
understand which things might impact
 

00:48:58.349 --> 00:49:00.290 align:start position:0%
understand which things might impact
performance<00:48:58.920><c> like</c><00:48:59.339><c> using</c><00:48:59.700><c> a</c><00:48:59.880><c> raised</c><00:49:00.060><c> dot</c>

00:49:00.290 --> 00:49:00.300 align:start position:0%
performance like using a raised dot
 

00:49:00.300 --> 00:49:01.940 align:start position:0%
performance like using a raised dot
stream<00:49:00.660><c> and</c><00:49:00.869><c> if</c><00:49:01.440><c> you're</c><00:49:01.560><c> not</c><00:49:01.680><c> really</c><00:49:01.890><c> sure</c>

00:49:01.940 --> 00:49:01.950 align:start position:0%
stream and if you're not really sure
 

00:49:01.950 --> 00:49:03.680 align:start position:0%
stream and if you're not really sure
which<00:49:02.369><c> things</c><00:49:02.670><c> are</c><00:49:02.790><c> going</c><00:49:03.030><c> to</c><00:49:03.180><c> impact</c>

00:49:03.680 --> 00:49:03.690 align:start position:0%
which things are going to impact
 

00:49:03.690 --> 00:49:05.349 align:start position:0%
which things are going to impact
performance<00:49:04.140><c> you</c><00:49:04.230><c> need</c><00:49:04.380><c> to</c><00:49:04.530><c> measure</c><00:49:04.740><c> that</c>

00:49:05.349 --> 00:49:05.359 align:start position:0%
performance you need to measure that
 

00:49:05.359 --> 00:49:07.940 align:start position:0%
performance you need to measure that
your<00:49:06.359><c> tools</c><00:49:06.660><c> like</c><00:49:06.960><c> for</c><00:49:07.140><c> example</c><00:49:07.230><c> IntelliJ</c>

00:49:07.940 --> 00:49:07.950 align:start position:0%
your tools like for example IntelliJ
 

00:49:07.950 --> 00:49:09.800 align:start position:0%
your tools like for example IntelliJ
IDEA<00:49:08.190><c> can</c><00:49:08.460><c> really</c><00:49:08.849><c> help</c><00:49:08.970><c> you</c><00:49:09.210><c> automate</c><00:49:09.660><c> a</c><00:49:09.720><c> lot</c>

00:49:09.800 --> 00:49:09.810 align:start position:0%
IDEA can really help you automate a lot
 

00:49:09.810 --> 00:49:11.510 align:start position:0%
IDEA can really help you automate a lot
of<00:49:09.960><c> this</c><00:49:10.109><c> process</c><00:49:10.560><c> and</c><00:49:10.800><c> can</c><00:49:10.890><c> suggest</c><00:49:11.160><c> things</c>

00:49:11.510 --> 00:49:11.520 align:start position:0%
of this process and can suggest things
 

00:49:11.520 --> 00:49:12.730 align:start position:0%
of this process and can suggest things
to<00:49:11.609><c> you</c><00:49:11.819><c> that</c><00:49:11.849><c> you</c><00:49:12.060><c> didn't</c><00:49:12.329><c> know</c><00:49:12.450><c> was</c><00:49:12.690><c> possible</c>

00:49:12.730 --> 00:49:12.740 align:start position:0%
to you that you didn't know was possible
 

00:49:12.740 --> 00:49:15.050 align:start position:0%
to you that you didn't know was possible
but<00:49:13.740><c> you</c><00:49:13.800><c> do</c><00:49:14.099><c> need</c><00:49:14.280><c> to</c><00:49:14.400><c> be</c><00:49:14.490><c> able</c><00:49:14.550><c> to</c><00:49:14.730><c> look</c><00:49:14.910><c> at</c>

00:49:15.050 --> 00:49:15.060 align:start position:0%
but you do need to be able to look at
 

00:49:15.060 --> 00:49:17.240 align:start position:0%
but you do need to be able to look at
what<00:49:15.180><c> it's</c><00:49:15.300><c> doing</c><00:49:15.660><c> figure</c><00:49:16.319><c> out</c><00:49:16.440><c> if</c><00:49:16.680><c> practice</c><00:49:17.160><c> a</c>

00:49:17.240 --> 00:49:17.250 align:start position:0%
what it's doing figure out if practice a
 

00:49:17.250 --> 00:49:19.010 align:start position:0%
what it's doing figure out if practice a
performance<00:49:17.700><c> impact</c><00:49:18.089><c> you</c><00:49:18.510><c> need</c><00:49:18.660><c> to</c><00:49:18.750><c> look</c><00:49:18.869><c> at</c>

00:49:19.010 --> 00:49:19.020 align:start position:0%
performance impact you need to look at
 

00:49:19.020 --> 00:49:21.020 align:start position:0%
performance impact you need to look at
it<00:49:19.079><c> and</c><00:49:19.200><c> see</c><00:49:19.410><c> if</c><00:49:19.650><c> actually</c><00:49:20.280><c> this</c><00:49:20.400><c> does</c><00:49:20.790><c> help</c>

00:49:21.020 --> 00:49:21.030 align:start position:0%
it and see if actually this does help
 

00:49:21.030 --> 00:49:22.460 align:start position:0%
it and see if actually this does help
you<00:49:21.270><c> in</c><00:49:21.420><c> terms</c><00:49:21.599><c> of</c><00:49:21.720><c> readability</c><00:49:21.960><c> or</c><00:49:22.260><c> it</c>

00:49:22.460 --> 00:49:22.470 align:start position:0%
you in terms of readability or it
 

00:49:22.470 --> 00:49:24.980 align:start position:0%
you in terms of readability or it
doesn't<00:49:22.740><c> and</c><00:49:23.150><c> some</c><00:49:24.150><c> of</c><00:49:24.240><c> those</c><00:49:24.329><c> examples</c><00:49:24.510><c> that</c>

00:49:24.980 --> 00:49:24.990 align:start position:0%
doesn't and some of those examples that
 

00:49:24.990 --> 00:49:27.589 align:start position:0%
doesn't and some of those examples that
we<00:49:25.140><c> showed</c><00:49:25.410><c> they</c><00:49:26.250><c> the</c><00:49:26.790><c> refactoring</c><00:49:27.119><c> was</c>

00:49:27.589 --> 00:49:27.599 align:start position:0%
we showed they the refactoring was
 

00:49:27.599 --> 00:49:29.300 align:start position:0%
we showed they the refactoring was
really<00:49:27.960><c> indicating</c><00:49:28.650><c> that</c><00:49:28.680><c> perhaps</c><00:49:29.010><c> is</c><00:49:29.280><c> a</c>

00:49:29.300 --> 00:49:29.310 align:start position:0%
really indicating that perhaps is a
 

00:49:29.310 --> 00:49:32.780 align:start position:0%
really indicating that perhaps is a
bigger<00:49:30.140><c> design</c><00:49:31.140><c> issue</c><00:49:31.530><c> to</c><00:49:31.829><c> address</c><00:49:31.920><c> before</c><00:49:32.609><c> we</c>

00:49:32.780 --> 00:49:32.790 align:start position:0%
bigger design issue to address before we
 

00:49:32.790 --> 00:49:37.069 align:start position:0%
bigger design issue to address before we
do<00:49:32.940><c> these</c><00:49:33.119><c> low-level</c><00:49:33.540><c> refactoring</c><00:49:35.359><c> so</c><00:49:36.359><c> all</c><00:49:36.750><c> of</c>

00:49:37.069 --> 00:49:37.079 align:start position:0%
do these low-level refactoring so all of
 

00:49:37.079 --> 00:49:39.559 align:start position:0%
do these low-level refactoring so all of
the<00:49:37.319><c> reference</c><00:49:38.040><c> material</c><00:49:38.579><c> is</c><00:49:38.730><c> available</c><00:49:39.390><c> at</c>

00:49:39.559 --> 00:49:39.569 align:start position:0%
the reference material is available at
 

00:49:39.569 --> 00:49:41.059 align:start position:0%
the reference material is available at
this<00:49:39.720><c> link</c><00:49:39.780><c> here</c><00:49:40.290><c> there's</c><00:49:40.710><c> a</c><00:49:40.800><c> lot</c><00:49:40.920><c> more</c>

00:49:41.059 --> 00:49:41.069 align:start position:0%
this link here there's a lot more
 

00:49:41.069 --> 00:49:42.890 align:start position:0%
this link here there's a lot more
information<00:49:41.280><c> about</c><00:49:41.579><c> Java</c><00:49:41.940><c> 8</c><00:49:42.150><c> there's</c><00:49:42.599><c> a</c><00:49:42.690><c> link</c>

00:49:42.890 --> 00:49:42.900 align:start position:0%
information about Java 8 there's a link
 

00:49:42.900 --> 00:49:44.690 align:start position:0%
information about Java 8 there's a link
to<00:49:43.200><c> there'll</c><00:49:43.500><c> be</c><00:49:43.530><c> a</c><00:49:43.619><c> link</c><00:49:43.859><c> to</c><00:49:44.040><c> this</c><00:49:44.160><c> video</c><00:49:44.310><c> on</c>

00:49:44.690 --> 00:49:44.700 align:start position:0%
to there'll be a link to this video on
 

00:49:44.700 --> 00:49:46.460 align:start position:0%
to there'll be a link to this video on
there<00:49:44.940><c> there's</c><00:49:45.359><c> links</c><00:49:45.660><c> to</c><00:49:45.690><c> slides</c><00:49:46.020><c> there's</c>

00:49:46.460 --> 00:49:46.470 align:start position:0%
there there's links to slides there's
 

00:49:46.470 --> 00:49:49.609 align:start position:0%
there there's links to slides there's
links<00:49:46.740><c> to</c><00:49:46.859><c> the</c><00:49:46.950><c> code</c><00:49:47.329><c> is</c><00:49:48.329><c> basically</c><00:49:49.319><c> all</c><00:49:49.589><c> the</c>

00:49:49.609 --> 00:49:49.619 align:start position:0%
links to the code is basically all the
 

00:49:49.619 --> 00:49:51.140 align:start position:0%
links to the code is basically all the
resources<00:49:50.069><c> for</c><00:49:50.190><c> this</c><00:49:50.280><c> talk</c><00:49:50.490><c> are</c><00:49:50.700><c> available</c>

00:49:51.140 --> 00:49:51.150 align:start position:0%
resources for this talk are available
 

00:49:51.150 --> 00:49:54.859 align:start position:0%
resources for this talk are available
here<00:49:51.480><c> and</c><00:49:52.170><c> now</c><00:49:52.410><c> is</c><00:49:52.740><c> a</c><00:49:52.800><c> good</c><00:49:53.160><c> time</c><00:49:53.220><c> to</c><00:49:53.849><c> stop</c><00:49:54.660><c> and</c>

00:49:54.859 --> 00:49:54.869 align:start position:0%
here and now is a good time to stop and
 

00:49:54.869 --> 00:49:56.480 align:start position:0%
here and now is a good time to stop and
take<00:49:55.050><c> any</c><00:49:55.260><c> questions</c><00:49:55.349><c> that</c><00:49:55.829><c> haven't</c><00:49:56.339><c> been</c>

00:49:56.480 --> 00:49:56.490 align:start position:0%
take any questions that haven't been
 

00:49:56.490 --> 00:50:03.110 align:start position:0%
take any questions that haven't been
answered<00:49:56.609><c> yet</c><00:50:00.440><c> ok</c><00:50:01.490><c> thank</c><00:50:02.490><c> you</c><00:50:02.550><c> for</c>

00:50:03.110 --> 00:50:03.120 align:start position:0%
answered yet ok thank you for
 

00:50:03.120 --> 00:50:05.630 align:start position:0%
answered yet ok thank you for
presentation<00:50:03.930><c> and</c><00:50:04.200><c> not</c><00:50:05.160><c> to</c><00:50:05.400><c> include</c>

00:50:05.630 --> 00:50:05.640 align:start position:0%
presentation and not to include
 

00:50:05.640 --> 00:50:10.610 align:start position:0%
presentation and not to include
questions<00:50:06.090><c> we</c><00:50:06.480><c> have</c><00:50:06.750><c> I</c><00:50:07.430><c> see</c><00:50:08.430><c> a</c><00:50:08.700><c> question</c><00:50:09.620><c> why</c>

00:50:10.610 --> 00:50:10.620 align:start position:0%
questions we have I see a question why
 

00:50:10.620 --> 00:50:13.310 align:start position:0%
questions we have I see a question why
would<00:50:10.830><c> an</c><00:50:11.010><c> anonymous</c><00:50:11.910><c> inner</c><00:50:12.330><c> class</c><00:50:12.600><c> be</c><00:50:13.050><c> any</c>

00:50:13.310 --> 00:50:13.320 align:start position:0%
would an anonymous inner class be any
 

00:50:13.320 --> 00:50:16.160 align:start position:0%
would an anonymous inner class be any
different<00:50:13.860><c> performance</c><00:50:14.520><c> wise</c><00:50:14.790><c> to</c><00:50:15.150><c> Rwanda</c><00:50:15.690><c> are</c>

00:50:16.160 --> 00:50:16.170 align:start position:0%
different performance wise to Rwanda are
 

00:50:16.170 --> 00:50:21.080 align:start position:0%
different performance wise to Rwanda are
they<00:50:16.920><c> not</c><00:50:17.160><c> equal</c><00:50:17.610><c> ones</c><00:50:17.880><c> compelled</c><00:50:19.250><c> and</c><00:50:20.250><c> right</c>

00:50:21.080 --> 00:50:21.090 align:start position:0%
they not equal ones compelled and right
 

00:50:21.090 --> 00:50:22.820 align:start position:0%
they not equal ones compelled and right
well<00:50:21.570><c> the</c><00:50:21.690><c> short</c><00:50:21.840><c> answer</c><00:50:21.990><c> is</c><00:50:22.170><c> no</c><00:50:22.410><c> they're</c><00:50:22.680><c> not</c>

00:50:22.820 --> 00:50:22.830 align:start position:0%
well the short answer is no they're not
 

00:50:22.830 --> 00:50:25.130 align:start position:0%
well the short answer is no they're not
it<00:50:23.130><c> does</c><00:50:23.430><c> look</c><00:50:23.760><c> like</c><00:50:23.790><c> lambda</c><00:50:24.390><c> expressions</c><00:50:24.930><c> are</c>

00:50:25.130 --> 00:50:25.140 align:start position:0%
it does look like lambda expressions are
 

00:50:25.140 --> 00:50:27.800 align:start position:0%
it does look like lambda expressions are
syntactic<00:50:26.130><c> sugar</c><00:50:26.580><c> over</c><00:50:27.240><c> anonymous</c><00:50:27.630><c> inner</c>

00:50:27.800 --> 00:50:27.810 align:start position:0%
syntactic sugar over anonymous inner
 

00:50:27.810 --> 00:50:29.690 align:start position:0%
syntactic sugar over anonymous inner
types<00:50:28.110><c> but</c><00:50:28.380><c> they're</c><00:50:28.560><c> not</c><00:50:28.860><c> they're</c><00:50:29.490><c> actually</c>

00:50:29.690 --> 00:50:29.700 align:start position:0%
types but they're not they're actually
 

00:50:29.700 --> 00:50:32.000 align:start position:0%
types but they're not they're actually
different<00:50:30.240><c> under</c><00:50:30.540><c> the</c><00:50:30.630><c> covers</c><00:50:30.930><c> and</c><00:50:31.320><c> look</c><00:50:31.740><c> for</c>

00:50:32.000 --> 00:50:32.010 align:start position:0%
different under the covers and look for
 

00:50:32.010 --> 00:50:33.890 align:start position:0%
different under the covers and look for
Bryan<00:50:32.340><c> gets</c><00:50:32.550><c> into</c><00:50:32.820><c> presentations</c><00:50:33.420><c> because</c><00:50:33.660><c> he</c>

00:50:33.890 --> 00:50:33.900 align:start position:0%
Bryan gets into presentations because he
 

00:50:33.900 --> 00:50:36.860 align:start position:0%
Bryan gets into presentations because he
does<00:50:34.080><c> like</c><00:50:34.680><c> whole</c><00:50:35.190><c> hour</c><00:50:35.550><c> on</c><00:50:35.940><c> why</c><00:50:36.540><c> they're</c><00:50:36.750><c> not</c>

00:50:36.860 --> 00:50:36.870 align:start position:0%
does like whole hour on why they're not
 

00:50:36.870 --> 00:50:39.050 align:start position:0%
does like whole hour on why they're not
the<00:50:37.020><c> same</c><00:50:37.200><c> thing</c><00:50:37.520><c> Oracle</c><00:50:38.520><c> works</c><00:50:38.700><c> really</c><00:50:38.940><c> hard</c>

00:50:39.050 --> 00:50:39.060 align:start position:0%
the same thing Oracle works really hard
 

00:50:39.060 --> 00:50:40.910 align:start position:0%
the same thing Oracle works really hard
to<00:50:39.330><c> make</c><00:50:39.510><c> sure</c><00:50:39.630><c> that</c><00:50:39.810><c> lambda</c><00:50:40.020><c> expressions</c><00:50:40.680><c> are</c>

00:50:40.910 --> 00:50:40.920 align:start position:0%
to make sure that lambda expressions are
 

00:50:40.920 --> 00:50:44.600 align:start position:0%
to make sure that lambda expressions are
not<00:50:41.300><c> worse</c><00:50:42.300><c> performers</c><00:50:43.050><c> than</c><00:50:43.610><c> anonymous</c>

00:50:44.600 --> 00:50:44.610 align:start position:0%
not worse performers than anonymous
 

00:50:44.610 --> 00:50:46.700 align:start position:0%
not worse performers than anonymous
inner<00:50:45.060><c> types</c><00:50:45.330><c> but</c><00:50:45.930><c> under</c><00:50:46.200><c> the</c><00:50:46.290><c> covers</c><00:50:46.560><c> they</c>

00:50:46.700 --> 00:50:46.710 align:start position:0%
inner types but under the covers they
 

00:50:46.710 --> 00:50:48.650 align:start position:0%
inner types but under the covers they
are<00:50:46.770><c> not</c><00:50:46.950><c> the</c><00:50:47.070><c> same</c><00:50:47.280><c> thing</c><00:50:47.520><c> because</c><00:50:48.150><c> basically</c>

00:50:48.650 --> 00:50:48.660 align:start position:0%
are not the same thing because basically
 

00:50:48.660 --> 00:50:50.330 align:start position:0%
are not the same thing because basically
a<00:50:48.690><c> lambda</c><00:50:48.900><c> expression</c><00:50:49.050><c> is</c><00:50:49.560><c> not</c><00:50:49.740><c> a</c><00:50:49.770><c> full</c><00:50:50.070><c> class</c>

00:50:50.330 --> 00:50:50.340 align:start position:0%
a lambda expression is not a full class
 

00:50:50.340 --> 00:50:52.460 align:start position:0%
a lambda expression is not a full class
an<00:50:50.580><c> anonymous</c><00:50:51.000><c> inner</c><00:50:51.180><c> type</c><00:50:51.420><c> is</c><00:50:51.660><c> a</c><00:50:51.720><c> full</c><00:50:52.200><c> class</c>

00:50:52.460 --> 00:50:52.470 align:start position:0%
an anonymous inner type is a full class
 

00:50:52.470 --> 00:50:55.280 align:start position:0%
an anonymous inner type is a full class
with<00:50:53.070><c> like</c><00:50:53.310><c> headers</c><00:50:53.580><c> and</c><00:50:54.030><c> memory</c><00:50:54.690><c> allocation</c>

00:50:55.280 --> 00:50:55.290 align:start position:0%
with like headers and memory allocation
 

00:50:55.290 --> 00:50:57.500 align:start position:0%
with like headers and memory allocation
and<00:50:55.530><c> it</c><00:50:55.710><c> you</c><00:50:55.860><c> know</c><00:50:55.950><c> it's</c><00:50:56.400><c> a</c><00:50:56.460><c> full-blown</c><00:50:56.970><c> object</c>

00:50:57.500 --> 00:50:57.510 align:start position:0%
and it you know it's a full-blown object
 

00:50:57.510 --> 00:51:03.020 align:start position:0%
and it you know it's a full-blown object
whereas<00:50:58.140><c> lambda</c><00:50:58.440><c> expressions</c><00:50:58.920><c> aren't</c><00:51:02.030><c> okay</c>

00:51:03.020 --> 00:51:03.030 align:start position:0%
whereas lambda expressions aren't okay
 

00:51:03.030 --> 00:51:07.910 align:start position:0%
whereas lambda expressions aren't okay
the<00:51:03.480><c> next</c><00:51:03.690><c> question</c><00:51:05.030><c> wait</c><00:51:06.030><c> wait</c><00:51:06.750><c> where</c><00:51:07.650><c> do</c><00:51:07.770><c> we</c>

00:51:07.910 --> 00:51:07.920 align:start position:0%
the next question wait wait where do we
 

00:51:07.920 --> 00:51:11.870 align:start position:0%
the next question wait wait where do we
need<00:51:08.130><c> to</c><00:51:08.550><c> change</c><00:51:08.850><c> our</c><00:51:09.120><c> code</c><00:51:09.830><c> why</c><00:51:10.830><c> isn't</c><00:51:11.760><c> it</c>

00:51:11.870 --> 00:51:11.880 align:start position:0%
need to change our code why isn't it
 

00:51:11.880 --> 00:51:16.280 align:start position:0%
need to change our code why isn't it
handled<00:51:12.480><c> by</c><00:51:12.780><c> come</c><00:51:13.700><c> compiler</c><00:51:14.720><c> if</c><00:51:15.720><c> it</c><00:51:15.990><c> could</c><00:51:16.260><c> be</c>

00:51:16.280 --> 00:51:16.290 align:start position:0%
handled by come compiler if it could be
 

00:51:16.290 --> 00:51:21.650 align:start position:0%
handled by come compiler if it could be
handled<00:51:16.890><c> by</c><00:51:17.570><c> JIT</c><00:51:18.710><c> then</c><00:51:19.710><c> we</c><00:51:20.160><c> wouldn't</c><00:51:20.670><c> need</c><00:51:21.210><c> any</c>

00:51:21.650 --> 00:51:21.660 align:start position:0%
handled by JIT then we wouldn't need any
 

00:51:21.660 --> 00:51:24.530 align:start position:0%
handled by JIT then we wouldn't need any
in<00:51:22.050><c> factory</c><00:51:22.680><c> if</c><00:51:23.190><c> it</c><00:51:23.370><c> could</c><00:51:23.580><c> be</c><00:51:23.700><c> refactored</c><00:51:24.060><c> by</c>

00:51:24.530 --> 00:51:24.540 align:start position:0%
in factory if it could be refactored by
 

00:51:24.540 --> 00:51:29.620 align:start position:0%
in factory if it could be refactored by
the<00:51:25.020><c> ID</c><00:51:25.230><c> there</c><00:51:25.830><c> it</c><00:51:26.250><c> could</c><00:51:26.550><c> be</c><00:51:26.580><c> handled</c><00:51:27.030><c> by</c><00:51:27.560><c> JIT</c>

00:51:29.620 --> 00:51:29.630 align:start position:0%
the ID there it could be handled by JIT
 

00:51:29.630 --> 00:51:32.300 align:start position:0%
the ID there it could be handled by JIT
that's<00:51:30.630><c> a</c><00:51:30.720><c> really</c><00:51:31.050><c> interesting</c><00:51:31.080><c> question</c><00:51:31.680><c> and</c>

00:51:32.300 --> 00:51:32.310 align:start position:0%
that's a really interesting question and
 

00:51:32.310 --> 00:51:35.870 align:start position:0%
that's a really interesting question and
I<00:51:33.590><c> think</c><00:51:34.590><c> probably</c><00:51:34.770><c> the</c><00:51:34.950><c> short</c><00:51:35.280><c> version</c><00:51:35.700><c> is</c>

00:51:35.870 --> 00:51:35.880 align:start position:0%
I think probably the short version is
 

00:51:35.880 --> 00:51:38.000 align:start position:0%
I think probably the short version is
that<00:51:36.330><c> when</c><00:51:36.780><c> IntelliJ</c><00:51:37.290><c> suggests</c><00:51:37.860><c> our</c>

00:51:38.000 --> 00:51:38.010 align:start position:0%
that when IntelliJ suggests our
 

00:51:38.010 --> 00:51:40.490 align:start position:0%
that when IntelliJ suggests our
refactoring<00:51:38.580><c> to</c><00:51:38.760><c> you</c><00:51:38.880><c> it</c><00:51:39.240><c> is</c><00:51:39.720><c> not</c><00:51:39.930><c> saying</c><00:51:40.290><c> that</c>

00:51:40.490 --> 00:51:40.500 align:start position:0%
refactoring to you it is not saying that
 

00:51:40.500 --> 00:51:43.490 align:start position:0%
refactoring to you it is not saying that
the<00:51:41.160><c> new</c><00:51:41.520><c> code</c><00:51:41.820><c> is</c><00:51:42.030><c> exactly</c><00:51:42.180><c> the</c><00:51:42.930><c> same</c><00:51:43.170><c> as</c><00:51:43.350><c> the</c>

00:51:43.490 --> 00:51:43.500 align:start position:0%
the new code is exactly the same as the
 

00:51:43.500 --> 00:51:45.740 align:start position:0%
the new code is exactly the same as the
old<00:51:43.650><c> code</c><00:51:44.010><c> under</c><00:51:44.370><c> the</c><00:51:44.490><c> covers</c><00:51:44.820><c> in</c><00:51:45.120><c> Telugu</c>

00:51:45.740 --> 00:51:45.750 align:start position:0%
old code under the covers in Telugu
 

00:51:45.750 --> 00:51:48.980 align:start position:0%
old code under the covers in Telugu
suggesting<00:51:46.410><c> and</c><00:51:46.730><c> new</c><00:51:47.730><c> syntax</c><00:51:48.390><c> to</c><00:51:48.660><c> use</c><00:51:48.810><c> or</c>

00:51:48.980 --> 00:51:48.990 align:start position:0%
suggesting and new syntax to use or
 

00:51:48.990 --> 00:51:51.020 align:start position:0%
suggesting and new syntax to use or
different<00:51:49.440><c> alternative</c><00:51:50.100><c> syntax</c><00:51:50.310><c> to</c><00:51:50.670><c> use</c><00:51:50.790><c> that</c>

00:51:51.020 --> 00:51:51.030 align:start position:0%
different alternative syntax to use that
 

00:51:51.030 --> 00:51:53.660 align:start position:0%
different alternative syntax to use that
will<00:51:51.150><c> achieve</c><00:51:51.270><c> the</c><00:51:51.810><c> same</c><00:51:52.080><c> aim</c><00:51:52.380><c> but</c><00:51:53.340><c> under</c><00:51:53.580><c> the</c>

00:51:53.660 --> 00:51:53.670 align:start position:0%
will achieve the same aim but under the
 

00:51:53.670 --> 00:51:55.250 align:start position:0%
will achieve the same aim but under the
covers<00:51:53.970><c> it's</c><00:51:54.120><c> not</c><00:51:54.300><c> compiled</c><00:51:54.870><c> down</c><00:51:54.990><c> to</c><00:51:55.170><c> the</c>

00:51:55.250 --> 00:51:55.260 align:start position:0%
covers it's not compiled down to the
 

00:51:55.260 --> 00:51:57.440 align:start position:0%
covers it's not compiled down to the
same<00:51:55.440><c> bytecode</c><00:51:55.950><c> in</c><00:51:56.250><c> particular</c><00:51:57.000><c> some</c><00:51:57.420><c> of</c>

00:51:57.440 --> 00:51:57.450 align:start position:0%
same bytecode in particular some of
 

00:51:57.450 --> 00:52:00.980 align:start position:0%
same bytecode in particular some of
those<00:51:57.630><c> refactorings</c><00:51:58.320><c> and</c><00:51:58.590><c> the</c><00:51:59.550><c> the</c><00:52:00.210><c> two</c><00:52:00.570><c> array</c>

00:52:00.980 --> 00:52:00.990 align:start position:0%
those refactorings and the the two array
 

00:52:00.990 --> 00:52:06.140 align:start position:0%
those refactorings and the the two array
lon<00:52:01.320><c> let's</c><00:52:02.010><c> see</c><00:52:02.130><c> if</c><00:52:02.220><c> I</c><00:52:02.280><c> can</c><00:52:02.460><c> find</c><00:52:02.670><c> it</c><00:52:02.910><c> and</c><00:52:05.150><c> some</c>

00:52:06.140 --> 00:52:06.150 align:start position:0%
lon let's see if I can find it and some
 

00:52:06.150 --> 00:52:14.079 align:start position:0%
lon let's see if I can find it and some
slides<00:52:06.510><c> better</c><00:52:06.810><c> hold</c><00:52:07.050><c> them</c>

00:52:14.079 --> 00:52:14.089 align:start position:0%
 
 

00:52:14.089 --> 00:52:18.170 align:start position:0%
 
yes<00:52:15.089><c> this</c><00:52:15.420><c> one</c><00:52:15.690><c> and</c><00:52:16.700><c> discouraged</c><00:52:17.700><c> here</c><00:52:17.880><c> on</c><00:52:18.059><c> the</c>

00:52:18.170 --> 00:52:18.180 align:start position:0%
yes this one and discouraged here on the
 

00:52:18.180 --> 00:52:20.390 align:start position:0%
yes this one and discouraged here on the
right<00:52:18.390><c> it</c><00:52:18.749><c> does</c><00:52:19.079><c> the</c><00:52:19.259><c> same</c><00:52:19.950><c> thing</c><00:52:20.160><c> as</c><00:52:20.309><c> this</c>

00:52:20.390 --> 00:52:20.400 align:start position:0%
right it does the same thing as this
 

00:52:20.400 --> 00:52:22.190 align:start position:0%
right it does the same thing as this
code<00:52:20.640><c> on</c><00:52:20.759><c> the</c><00:52:20.819><c> left</c><00:52:20.969><c> but</c><00:52:21.150><c> it's</c><00:52:21.569><c> not</c><00:52:21.749><c> same</c><00:52:21.989><c> code</c>

00:52:22.190 --> 00:52:22.200 align:start position:0%
code on the left but it's not same code
 

00:52:22.200 --> 00:52:24.380 align:start position:0%
code on the left but it's not same code
but<00:52:22.469><c> it's</c><00:52:22.680><c> not</c><00:52:22.829><c> there's</c><00:52:23.640><c> one</c><00:52:23.700><c> step</c><00:52:24.119><c> missing</c>

00:52:24.380 --> 00:52:24.390 align:start position:0%
but it's not there's one step missing
 

00:52:24.390 --> 00:52:25.969 align:start position:0%
but it's not there's one step missing
we're<00:52:24.660><c> going</c><00:52:24.869><c> straight</c><00:52:25.109><c> from</c><00:52:25.229><c> a</c><00:52:25.380><c> map</c><00:52:25.529><c> tour</c><00:52:25.799><c> to</c>

00:52:25.969 --> 00:52:25.979 align:start position:0%
we're going straight from a map tour to
 

00:52:25.979 --> 00:52:28.249 align:start position:0%
we're going straight from a map tour to
a<00:52:26.009><c> rate</c><00:52:26.249><c> so</c><00:52:26.549><c> the</c><00:52:27.119><c> compiled</c><00:52:27.630><c> code</c><00:52:27.660><c> is</c><00:52:27.989><c> not</c><00:52:28.140><c> the</c>

00:52:28.249 --> 00:52:28.259 align:start position:0%
a rate so the compiled code is not the
 

00:52:28.259 --> 00:52:32.120 align:start position:0%
a rate so the compiled code is not the
same<00:52:28.410><c> thing</c><00:52:28.849><c> and</c><00:52:29.849><c> and</c><00:52:30.769><c> that's</c><00:52:31.769><c> because</c>

00:52:32.120 --> 00:52:32.130 align:start position:0%
same thing and and that's because
 

00:52:32.130 --> 00:52:34.519 align:start position:0%
same thing and and that's because
IntelliJ<00:52:32.759><c> gets</c><00:52:32.999><c> to</c><00:52:33.210><c> suggest</c><00:52:33.660><c> to</c><00:52:33.839><c> you</c><00:52:34.079><c> the</c>

00:52:34.519 --> 00:52:34.529 align:start position:0%
IntelliJ gets to suggest to you the
 

00:52:34.529 --> 00:52:37.279 align:start position:0%
IntelliJ gets to suggest to you the
developer<00:52:35.039><c> this</c><00:52:35.670><c> is</c><00:52:35.880><c> something</c><00:52:36.239><c> I</c><00:52:36.390><c> think</c><00:52:36.420><c> that</c>

00:52:37.279 --> 00:52:37.289 align:start position:0%
developer this is something I think that
 

00:52:37.289 --> 00:52:41.150 align:start position:0%
developer this is something I think that
does<00:52:37.680><c> the</c><00:52:37.920><c> same</c><00:52:37.950><c> thing</c><00:52:39.229><c> in</c><00:52:40.229><c> terms</c><00:52:40.499><c> of</c><00:52:40.619><c> behavior</c>

00:52:41.150 --> 00:52:41.160 align:start position:0%
does the same thing in terms of behavior
 

00:52:41.160 --> 00:52:42.620 align:start position:0%
does the same thing in terms of behavior
provides<00:52:41.609><c> the</c><00:52:41.759><c> same</c><00:52:41.969><c> behavior</c><00:52:42.359><c> as</c><00:52:42.420><c> the</c>

00:52:42.620 --> 00:52:42.630 align:start position:0%
provides the same behavior as the
 

00:52:42.630 --> 00:52:45.019 align:start position:0%
provides the same behavior as the
original<00:52:43.049><c> code</c><00:52:43.289><c> but</c><00:52:44.039><c> I</c><00:52:44.219><c> need</c><00:52:44.519><c> you</c><00:52:44.729><c> the</c>

00:52:45.019 --> 00:52:45.029 align:start position:0%
original code but I need you the
 

00:52:45.029 --> 00:52:46.910 align:start position:0%
original code but I need you the
developer<00:52:45.509><c> to</c><00:52:45.839><c> decide</c><00:52:46.170><c> whether</c><00:52:46.440><c> or</c><00:52:46.559><c> not</c><00:52:46.739><c> this</c>

00:52:46.910 --> 00:52:46.920 align:start position:0%
developer to decide whether or not this
 

00:52:46.920 --> 00:52:48.709 align:start position:0%
developer to decide whether or not this
is<00:52:47.069><c> something</c><00:52:47.190><c> that</c><00:52:47.430><c> you</c><00:52:47.670><c> you</c><00:52:48.059><c> really</c><00:52:48.359><c> want</c><00:52:48.569><c> to</c>

00:52:48.709 --> 00:52:48.719 align:start position:0%
is something that you you really want to
 

00:52:48.719 --> 00:52:50.959 align:start position:0%
is something that you you really want to
apply<00:52:48.989><c> and</c><00:52:49.349><c> because</c><00:52:50.039><c> as</c><00:52:50.190><c> you</c><00:52:50.309><c> saw</c><00:52:50.489><c> with</c><00:52:50.759><c> some</c>

00:52:50.959 --> 00:52:50.969 align:start position:0%
apply and because as you saw with some
 

00:52:50.969 --> 00:52:52.880 align:start position:0%
apply and because as you saw with some
of<00:52:51.059><c> these</c><00:52:51.150><c> the</c><00:52:51.779><c> performance</c><00:52:52.259><c> shows</c><00:52:52.559><c> that</c>

00:52:52.880 --> 00:52:52.890 align:start position:0%
of these the performance shows that
 

00:52:52.890 --> 00:52:54.410 align:start position:0%
of these the performance shows that
these<00:52:53.069><c> are</c><00:52:53.130><c> not</c><00:52:53.400><c> the</c><00:52:53.519><c> same</c><00:52:53.640><c> operations</c><00:52:54.180><c> under</c>

00:52:54.410 --> 00:52:54.420 align:start position:0%
these are not the same operations under
 

00:52:54.420 --> 00:52:54.950 align:start position:0%
these are not the same operations under
the<00:52:54.509><c> covers</c>

00:52:54.950 --> 00:52:54.960 align:start position:0%
the covers
 

00:52:54.960 --> 00:52:56.900 align:start position:0%
the covers
so<00:52:55.410><c> you</c><00:52:55.469><c> need</c><00:52:55.829><c> to</c><00:52:55.950><c> be</c><00:52:56.039><c> able</c><00:52:56.099><c> to</c><00:52:56.219><c> you</c><00:52:56.640><c> need</c><00:52:56.759><c> to</c><00:52:56.849><c> be</c>

00:52:56.900 --> 00:52:56.910 align:start position:0%
so you need to be able to you need to be
 

00:52:56.910 --> 00:52:58.549 align:start position:0%
so you need to be able to you need to be
the<00:52:56.999><c> one</c><00:52:57.150><c> to</c><00:52:57.269><c> make</c><00:52:57.359><c> those</c><00:52:57.539><c> decisions</c><00:52:57.809><c> and</c><00:52:58.079><c> the</c>

00:52:58.549 --> 00:52:58.559 align:start position:0%
the one to make those decisions and the
 

00:52:58.559 --> 00:53:00.759 align:start position:0%
the one to make those decisions and the
kit<00:52:58.769><c> probably</c><00:52:59.309><c> can</c><00:52:59.460><c> make</c><00:52:59.640><c> decisions</c><00:52:59.819><c> for</c><00:53:00.329><c> some</c>

00:53:00.759 --> 00:53:00.769 align:start position:0%
kit probably can make decisions for some
 

00:53:00.769 --> 00:53:03.170 align:start position:0%
kit probably can make decisions for some
not<00:53:01.769><c> from</c><00:53:01.979><c> the</c><00:53:02.099><c> examples</c><00:53:02.460><c> I</c><00:53:02.549><c> gave</c><00:53:02.579><c> but</c><00:53:03.029><c> for</c>

00:53:03.170 --> 00:53:03.180 align:start position:0%
not from the examples I gave but for
 

00:53:03.180 --> 00:53:05.420 align:start position:0%
not from the examples I gave but for
some<00:53:03.390><c> things</c><00:53:03.690><c> but</c><00:53:04.499><c> the</c><00:53:04.589><c> tip</c><00:53:04.769><c> is</c><00:53:04.920><c> not</c><00:53:04.950><c> going</c><00:53:05.309><c> to</c>

00:53:05.420 --> 00:53:05.430 align:start position:0%
some things but the tip is not going to
 

00:53:05.430 --> 00:53:07.160 align:start position:0%
some things but the tip is not going to
go<00:53:05.579><c> away</c><00:53:05.789><c> and</c><00:53:05.969><c> say</c><00:53:06.150><c> oh</c><00:53:06.359><c> well</c><00:53:06.719><c> I</c><00:53:06.749><c> think</c><00:53:06.869><c> that</c>

00:53:07.160 --> 00:53:07.170 align:start position:0%
go away and say oh well I think that
 

00:53:07.170 --> 00:53:08.599 align:start position:0%
go away and say oh well I think that
this<00:53:07.319><c> should</c><00:53:07.469><c> be</c><00:53:07.529><c> in</c><00:53:07.739><c> a</c><00:53:07.829><c> raised</c><00:53:08.069><c> upstream</c>

00:53:08.599 --> 00:53:08.609 align:start position:0%
this should be in a raised upstream
 

00:53:08.609 --> 00:53:10.700 align:start position:0%
this should be in a raised upstream
operation<00:53:09.150><c> because</c><00:53:09.509><c> it's</c><00:53:09.749><c> clearly</c><00:53:10.049><c> not</c><00:53:10.170><c> more</c>

00:53:10.700 --> 00:53:10.710 align:start position:0%
operation because it's clearly not more
 

00:53:10.710 --> 00:53:12.799 align:start position:0%
operation because it's clearly not more
efficient<00:53:11.130><c> some</c><00:53:11.729><c> of</c><00:53:11.849><c> these</c><00:53:11.910><c> refactoring</c><00:53:12.779><c> is</c>

00:53:12.799 --> 00:53:12.809 align:start position:0%
efficient some of these refactoring is
 

00:53:12.809 --> 00:53:15.019 align:start position:0%
efficient some of these refactoring is
I'm<00:53:12.930><c> suggesting</c><00:53:13.079><c> are</c><00:53:13.589><c> to</c><00:53:14.190><c> aid</c><00:53:14.369><c> as</c><00:53:14.640><c> the</c>

00:53:15.019 --> 00:53:15.029 align:start position:0%
I'm suggesting are to aid as the
 

00:53:15.029 --> 00:53:18.410 align:start position:0%
I'm suggesting are to aid as the
developer<00:53:15.539><c> to</c><00:53:16.140><c> read</c><00:53:16.680><c> things</c><00:53:17.130><c> and</c><00:53:17.489><c> to</c><00:53:18.239><c> give</c>

00:53:18.410 --> 00:53:18.420 align:start position:0%
developer to read things and to give
 

00:53:18.420 --> 00:53:21.079 align:start position:0%
developer to read things and to give
greater<00:53:19.019><c> readability</c><00:53:19.710><c> to</c><00:53:20.039><c> the</c><00:53:20.130><c> code</c><00:53:20.369><c> not</c><00:53:20.849><c> to</c>

00:53:21.079 --> 00:53:21.089 align:start position:0%
greater readability to the code not to
 

00:53:21.089 --> 00:53:31.219 align:start position:0%
greater readability to the code not to
aid<00:53:21.390><c> the</c><00:53:22.140><c> the</c><00:53:22.849><c> JVM</c><00:53:23.849><c> to</c><00:53:24.150><c> run</c><00:53:24.359><c> faster</c><00:53:28.849><c> okay</c><00:53:30.229><c> one</c>

00:53:31.219 --> 00:53:31.229 align:start position:0%
aid the the JVM to run faster okay one
 

00:53:31.229 --> 00:53:34.640 align:start position:0%
aid the the JVM to run faster okay one
next<00:53:31.739><c> question</c><00:53:32.630><c> should</c><00:53:33.630><c> we</c><00:53:33.660><c> perform</c><00:53:33.989><c> added</c>

00:53:34.640 --> 00:53:34.650 align:start position:0%
next question should we perform added
 

00:53:34.650 --> 00:53:38.029 align:start position:0%
next question should we perform added
references<00:53:35.430><c> instead</c><00:53:35.759><c> of</c><00:53:36.089><c> lambda</c><00:53:36.630><c> syntax</c><00:53:36.900><c> oh</c><00:53:37.410><c> I</c>

00:53:38.029 --> 00:53:38.039 align:start position:0%
references instead of lambda syntax oh I
 

00:53:38.039 --> 00:53:40.609 align:start position:0%
references instead of lambda syntax oh I
like<00:53:38.339><c> that</c><00:53:38.460><c> question</c><00:53:38.640><c> and</c><00:53:39.349><c> when</c><00:53:40.349><c> I</c><00:53:40.380><c> first</c>

00:53:40.609 --> 00:53:40.619 align:start position:0%
like that question and when I first
 

00:53:40.619 --> 00:53:42.709 align:start position:0%
like that question and when I first
started<00:53:40.920><c> in</c><00:53:41.069><c> Java</c><00:53:41.309><c> 8</c><00:53:41.519><c> I</c><00:53:41.700><c> really</c><00:53:42.239><c> disliked</c>

00:53:42.709 --> 00:53:42.719 align:start position:0%
started in Java 8 I really disliked
 

00:53:42.719 --> 00:53:44.479 align:start position:0%
started in Java 8 I really disliked
method<00:53:43.049><c> references</c><00:53:43.229><c> I</c><00:53:43.529><c> thought</c><00:53:43.890><c> this</c><00:53:44.069><c> weird</c>

00:53:44.479 --> 00:53:44.489 align:start position:0%
method references I thought this weird
 

00:53:44.489 --> 00:53:46.099 align:start position:0%
method references I thought this weird
double<00:53:44.969><c> colon</c><00:53:45.329><c> thing</c><00:53:45.599><c> was</c><00:53:45.779><c> kind</c><00:53:46.019><c> of</c>

00:53:46.099 --> 00:53:46.109 align:start position:0%
double colon thing was kind of
 

00:53:46.109 --> 00:53:49.339 align:start position:0%
double colon thing was kind of
unreadable<00:53:46.950><c> and</c><00:53:47.719><c> difficult</c><00:53:48.719><c> to</c><00:53:48.869><c> get</c><00:53:49.019><c> my</c><00:53:49.140><c> head</c>

00:53:49.339 --> 00:53:49.349 align:start position:0%
unreadable and difficult to get my head
 

00:53:49.349 --> 00:53:54.829 align:start position:0%
unreadable and difficult to get my head
round<00:53:49.499><c> and</c><00:53:50.089><c> but</c><00:53:51.089><c> I</c><00:53:51.359><c> have</c><00:53:52.549><c> generally</c><00:53:53.599><c> over</c><00:53:54.599><c> time</c>

00:53:54.829 --> 00:53:54.839 align:start position:0%
round and but I have generally over time
 

00:53:54.839 --> 00:53:57.680 align:start position:0%
round and but I have generally over time
come<00:53:55.259><c> to</c><00:53:55.619><c> prefer</c><00:53:56.160><c> method</c><00:53:56.640><c> references</c><00:53:56.819><c> over</c>

00:53:57.680 --> 00:53:57.690 align:start position:0%
come to prefer method references over
 

00:53:57.690 --> 00:54:00.410 align:start position:0%
come to prefer method references over
lambda<00:53:57.960><c> expressions</c><00:53:58.440><c> where</c><00:53:59.420><c> IntelliJ</c>

00:54:00.410 --> 00:54:00.420 align:start position:0%
lambda expressions where IntelliJ
 

00:54:00.420 --> 00:54:02.059 align:start position:0%
lambda expressions where IntelliJ
suggests<00:54:00.930><c> that</c><00:54:01.049><c> I</c><00:54:01.170><c> use</c><00:54:01.349><c> a</c><00:54:01.380><c> method</c><00:54:01.739><c> reference</c>

00:54:02.059 --> 00:54:02.069 align:start position:0%
suggests that I use a method reference
 

00:54:02.069 --> 00:54:04.910 align:start position:0%
suggests that I use a method reference
and<00:54:02.249><c> there's</c><00:54:02.969><c> a</c><00:54:03.029><c> few</c><00:54:03.329><c> examples</c><00:54:03.900><c> of</c><00:54:04.109><c> this</c><00:54:04.319><c> which</c>

00:54:04.910 --> 00:54:04.920 align:start position:0%
and there's a few examples of this which
 

00:54:04.920 --> 00:54:08.029 align:start position:0%
and there's a few examples of this which
whichever<00:54:05.430><c> site</c><00:54:05.700><c> so</c><00:54:06.109><c> in</c><00:54:07.109><c> this</c><00:54:07.380><c> example</c><00:54:07.529><c> the</c>

00:54:08.029 --> 00:54:08.039 align:start position:0%
whichever site so in this example the
 

00:54:08.039 --> 00:54:11.150 align:start position:0%
whichever site so in this example the
map<00:54:08.309><c> is</c><00:54:08.609><c> not</c><00:54:09.029><c> so</c><00:54:09.479><c> useful</c><00:54:09.779><c> but</c><00:54:10.349><c> let</c><00:54:10.769><c> me</c><00:54:10.859><c> see</c><00:54:11.009><c> if</c><00:54:11.099><c> I</c>

00:54:11.150 --> 00:54:11.160 align:start position:0%
map is not so useful but let me see if I
 

00:54:11.160 --> 00:54:14.690 align:start position:0%
map is not so useful but let me see if I
can<00:54:11.279><c> find</c><00:54:11.430><c> an</c><00:54:11.579><c> example</c><00:54:11.969><c> of</c><00:54:12.059><c> filter</c><00:54:13.489><c> let's</c><00:54:14.489><c> say</c>

00:54:14.690 --> 00:54:14.700 align:start position:0%
can find an example of filter let's say
 

00:54:14.700 --> 00:54:21.789 align:start position:0%
can find an example of filter let's say
we<00:54:14.849><c> have</c><00:54:15.440><c> I</c><00:54:17.719><c> find</c><00:54:18.719><c> something</c><00:54:19.049><c> with</c><00:54:19.170><c> a</c><00:54:19.200><c> filter</c>

00:54:21.789 --> 00:54:21.799 align:start position:0%
 
 

00:54:21.799 --> 00:54:23.210 align:start position:0%
 
so<00:54:22.799><c> let's</c><00:54:22.950><c> say</c>

00:54:23.210 --> 00:54:23.220 align:start position:0%
so let's say
 

00:54:23.220 --> 00:54:25.910 align:start position:0%
so let's say
filter<00:54:23.490><c> I</c><00:54:23.670><c> might</c><00:54:23.849><c> say</c><00:54:24.560><c> what</c><00:54:25.560><c> have</c><00:54:25.650><c> we</c><00:54:25.740><c> got</c>

00:54:25.910 --> 00:54:25.920 align:start position:0%
filter I might say what have we got
 

00:54:25.920 --> 00:54:30.290 align:start position:0%
filter I might say what have we got
again<00:54:26.369><c> a</c><00:54:26.400><c> key</c><00:54:26.790><c> I</c><00:54:27.210><c> might</c><00:54:27.930><c> say</c><00:54:28.109><c> Tiki</c><00:54:29.090><c> is</c><00:54:30.090><c> not</c>

00:54:30.290 --> 00:54:30.300 align:start position:0%
again a key I might say Tiki is not
 

00:54:30.300 --> 00:54:33.589 align:start position:0%
again a key I might say Tiki is not
equal<00:54:30.599><c> to</c><00:54:30.630><c> null</c><00:54:30.869><c> and</c><00:54:31.790><c> and</c><00:54:32.790><c> that's</c><00:54:33.030><c> kind</c><00:54:33.420><c> of</c>

00:54:33.589 --> 00:54:33.599 align:start position:0%
equal to null and and that's kind of
 

00:54:33.599 --> 00:54:36.800 align:start position:0%
equal to null and and that's kind of
fine<00:54:33.960><c> but</c><00:54:34.800><c> IntelliJ</c><00:54:35.670><c> suggests</c><00:54:36.060><c> to</c><00:54:36.390><c> me</c><00:54:36.420><c> that</c><00:54:36.780><c> I</c>

00:54:36.800 --> 00:54:36.810 align:start position:0%
fine but IntelliJ suggests to me that I
 

00:54:36.810 --> 00:54:38.810 align:start position:0%
fine but IntelliJ suggests to me that I
can<00:54:37.140><c> replace</c><00:54:37.619><c> this</c><00:54:37.890><c> with</c><00:54:38.130><c> a</c><00:54:38.160><c> method</c><00:54:38.460><c> reference</c>

00:54:38.810 --> 00:54:38.820 align:start position:0%
can replace this with a method reference
 

00:54:38.820 --> 00:54:42.470 align:start position:0%
can replace this with a method reference
which<00:54:39.570><c> says</c><00:54:39.840><c> objects</c><00:54:40.560><c> non</c><00:54:40.859><c> null</c><00:54:41.160><c> now</c><00:54:41.970><c> in</c><00:54:42.240><c> this</c>

00:54:42.470 --> 00:54:42.480 align:start position:0%
which says objects non null now in this
 

00:54:42.480 --> 00:54:44.270 align:start position:0%
which says objects non null now in this
case<00:54:42.750><c> I</c><00:54:42.990><c> much</c><00:54:43.200><c> prefer</c><00:54:43.560><c> the</c><00:54:43.680><c> method</c><00:54:43.950><c> reference</c>

00:54:44.270 --> 00:54:44.280 align:start position:0%
case I much prefer the method reference
 

00:54:44.280 --> 00:54:45.859 align:start position:0%
case I much prefer the method reference
because<00:54:44.460><c> I</c><00:54:44.640><c> think</c><00:54:44.700><c> it</c><00:54:45.060><c> says</c><00:54:45.270><c> to</c><00:54:45.450><c> me</c><00:54:45.570><c> very</c>

00:54:45.859 --> 00:54:45.869 align:start position:0%
because I think it says to me very
 

00:54:45.869 --> 00:54:49.400 align:start position:0%
because I think it says to me very
clearly<00:54:46.200><c> I</c><00:54:46.530><c> want</c><00:54:47.250><c> you</c><00:54:47.430><c> to</c><00:54:47.670><c> filter</c><00:54:48.030><c> for</c><00:54:49.020><c> all</c><00:54:49.200><c> the</c>

00:54:49.400 --> 00:54:49.410 align:start position:0%
clearly I want you to filter for all the
 

00:54:49.410 --> 00:54:53.089 align:start position:0%
clearly I want you to filter for all the
non<00:54:49.710><c> null</c><00:54:50.190><c> and</c><00:54:51.260><c> objects</c><00:54:52.260><c> so</c><00:54:52.530><c> I</c><00:54:52.560><c> know</c><00:54:52.710><c> that</c><00:54:53.010><c> the</c>

00:54:53.089 --> 00:54:53.099 align:start position:0%
non null and objects so I know that the
 

00:54:53.099 --> 00:54:54.530 align:start position:0%
non null and objects so I know that the
only<00:54:53.220><c> object</c><00:54:53.700><c> I'm</c><00:54:53.849><c> getting</c><00:54:54.150><c> in</c><00:54:54.270><c> this</c><00:54:54.359><c> map</c>

00:54:54.530 --> 00:54:54.540 align:start position:0%
only object I'm getting in this map
 

00:54:54.540 --> 00:54:57.050 align:start position:0%
only object I'm getting in this map
operation<00:54:54.930><c> are</c><00:54:55.230><c> not</c><00:54:55.560><c> null</c><00:54:56.130><c> whereas</c><00:54:56.849><c> in</c><00:54:56.970><c> the</c>

00:54:57.050 --> 00:54:57.060 align:start position:0%
operation are not null whereas in the
 

00:54:57.060 --> 00:55:00.260 align:start position:0%
operation are not null whereas in the
previous<00:54:57.510><c> version</c><00:54:57.960><c> I</c><00:54:58.170><c> have</c><00:54:59.130><c> to</c><00:54:59.369><c> literally</c><00:55:00.090><c> it</c>

00:55:00.260 --> 00:55:00.270 align:start position:0%
previous version I have to literally it
 

00:55:00.270 --> 00:55:01.430 align:start position:0%
previous version I have to literally it
doesn't<00:55:00.480><c> take</c><00:55:00.570><c> very</c><00:55:00.599><c> long</c><00:55:00.869><c> but</c><00:55:01.140><c> I</c><00:55:01.170><c> have</c><00:55:01.320><c> to</c>

00:55:01.430 --> 00:55:01.440 align:start position:0%
doesn't take very long but I have to
 

00:55:01.440 --> 00:55:03.140 align:start position:0%
doesn't take very long but I have to
reason<00:55:01.890><c> around</c><00:55:01.980><c> what</c><00:55:02.460><c> this</c><00:55:02.670><c> means</c>

00:55:03.140 --> 00:55:03.150 align:start position:0%
reason around what this means
 

00:55:03.150 --> 00:55:05.150 align:start position:0%
reason around what this means
like<00:55:03.390><c> not</c><00:55:03.840><c> equal</c><00:55:04.200><c> to</c><00:55:04.290><c> null</c><00:55:04.410><c> or</c><00:55:04.560><c> equal</c><00:55:04.920><c> to</c><00:55:05.040><c> null</c>

00:55:05.150 --> 00:55:05.160 align:start position:0%
like not equal to null or equal to null
 

00:55:05.160 --> 00:55:07.250 align:start position:0%
like not equal to null or equal to null
that<00:55:05.369><c> means</c><00:55:05.490><c> not</c><00:55:05.910><c> equal</c><00:55:06.060><c> to</c><00:55:06.330><c> ones</c><00:55:06.540><c> are</c><00:55:06.840><c> are</c>

00:55:07.250 --> 00:55:07.260 align:start position:0%
that means not equal to ones are are
 

00:55:07.260 --> 00:55:08.570 align:start position:0%
that means not equal to ones are are
giving<00:55:07.530><c> go</c><00:55:07.650><c> through</c><00:55:07.890><c> when</c><00:55:08.070><c> I'm</c><00:55:08.160><c> not</c><00:55:08.310><c> going</c>

00:55:08.570 --> 00:55:08.580 align:start position:0%
giving go through when I'm not going
 

00:55:08.580 --> 00:55:09.980 align:start position:0%
giving go through when I'm not going
through<00:55:08.820><c> and</c><00:55:09.420><c> there's</c><00:55:09.599><c> another</c><00:55:09.810><c> example</c>

00:55:09.980 --> 00:55:09.990 align:start position:0%
through and there's another example
 

00:55:09.990 --> 00:55:12.380 align:start position:0%
through and there's another example
where<00:55:10.590><c> I</c><00:55:10.619><c> really</c><00:55:10.920><c> like</c><00:55:11.099><c> this</c><00:55:11.220><c> as</c><00:55:11.400><c> well</c><00:55:11.580><c> which</c>

00:55:12.380 --> 00:55:12.390 align:start position:0%
where I really like this as well which
 

00:55:12.390 --> 00:55:21.160 align:start position:0%
where I really like this as well which
is<00:55:14.450><c> let</c><00:55:15.450><c> me</c><00:55:15.540><c> see</c><00:55:15.690><c> if</c><00:55:15.810><c> I</c><00:55:15.900><c> can</c><00:55:16.700><c> kind</c><00:55:17.700><c> of</c><00:55:17.820><c> do</c><00:55:18.060><c> sorted</c>

00:55:21.160 --> 00:55:21.170 align:start position:0%
 
 

00:55:21.170 --> 00:55:27.320 align:start position:0%
 
comparators<00:55:23.150><c> dot</c><00:55:24.150><c> comparing</c><00:55:24.810><c> and</c><00:55:25.050><c> then</c><00:55:25.650><c> I</c><00:55:26.330><c> can</c>

00:55:27.320 --> 00:55:27.330 align:start position:0%
comparators dot comparing and then I can
 

00:55:27.330 --> 00:55:34.250 align:start position:0%
comparators dot comparing and then I can
do<00:55:27.450><c> something</c><00:55:27.869><c> like</c><00:55:29.510><c> whoops</c><00:55:33.020><c> well</c><00:55:34.020><c> if</c><00:55:34.080><c> we</c><00:55:34.140><c> got</c>

00:55:34.250 --> 00:55:34.260 align:start position:0%
do something like whoops well if we got
 

00:55:34.260 --> 00:55:40.400 align:start position:0%
do something like whoops well if we got
on<00:55:34.410><c> T</c><00:55:34.589><c> key</c><00:55:34.800><c> I</c><00:55:35.010><c> get</c><00:55:35.910><c> ID</c><00:55:38.810><c> well</c><00:55:39.810><c> that's</c><00:55:40.080><c> not</c><00:55:40.260><c> a</c>

00:55:40.400 --> 00:55:40.410 align:start position:0%
on T key I get ID well that's not a
 

00:55:40.410 --> 00:55:42.530 align:start position:0%
on T key I get ID well that's not a
great<00:55:40.619><c> example</c><00:55:40.859><c> because</c><00:55:41.460><c> I</c><00:55:41.700><c> just</c><00:55:42.240><c> pull</c><00:55:42.359><c> it</c><00:55:42.480><c> out</c>

00:55:42.530 --> 00:55:42.540 align:start position:0%
great example because I just pull it out
 

00:55:42.540 --> 00:55:45.349 align:start position:0%
great example because I just pull it out
out<00:55:43.050><c> of</c><00:55:43.290><c> year</c><00:55:43.740><c> but</c><00:55:44.190><c> with</c><00:55:44.580><c> comparators</c><00:55:45.240><c> up</c>

00:55:45.349 --> 00:55:45.359 align:start position:0%
out of year but with comparators up
 

00:55:45.359 --> 00:55:47.690 align:start position:0%
out of year but with comparators up
comparing<00:55:45.780><c> you</c><00:55:46.290><c> can</c><00:55:46.710><c> use</c><00:55:46.890><c> a</c><00:55:46.920><c> method</c><00:55:47.190><c> reference</c>

00:55:47.690 --> 00:55:47.700 align:start position:0%
comparing you can use a method reference
 

00:55:47.700 --> 00:55:50.060 align:start position:0%
comparing you can use a method reference
to<00:55:47.880><c> say</c><00:55:48.119><c> this</c><00:55:48.839><c> is</c><00:55:49.140><c> the</c><00:55:49.260><c> method</c><00:55:49.589><c> I</c><00:55:49.680><c> want</c><00:55:49.830><c> you</c><00:55:49.950><c> to</c>

00:55:50.060 --> 00:55:50.070 align:start position:0%
to say this is the method I want you to
 

00:55:50.070 --> 00:55:51.530 align:start position:0%
to say this is the method I want you to
compare<00:55:50.460><c> on</c><00:55:50.609><c> so</c><00:55:50.849><c> instead</c><00:55:51.000><c> of</c><00:55:51.119><c> having</c><00:55:51.300><c> to</c><00:55:51.450><c> do</c>

00:55:51.530 --> 00:55:51.540 align:start position:0%
compare on so instead of having to do
 

00:55:51.540 --> 00:55:55.790 align:start position:0%
compare on so instead of having to do
comparing<00:55:52.470><c> like</c><00:55:52.650><c> oh</c><00:55:52.800><c> one</c><00:55:53.220><c> get</c><00:55:53.820><c> ID</c><00:55:54.060><c> -</c><00:55:54.780><c> oh</c><00:55:54.960><c> to</c><00:55:55.290><c> get</c>

00:55:55.790 --> 00:55:55.800 align:start position:0%
comparing like oh one get ID - oh to get
 

00:55:55.800 --> 00:55:58.220 align:start position:0%
comparing like oh one get ID - oh to get
ID<00:55:56.010><c> or</c><00:55:56.400><c> was</c><00:55:56.580><c> it</c><00:55:56.760><c> Oh</c><00:55:56.880><c> two</c><00:55:56.940><c> -</c><00:55:57.540><c> oh</c><00:55:57.690><c> one</c><00:55:57.930><c> I'm</c><00:55:58.109><c> not</c>

00:55:58.220 --> 00:55:58.230 align:start position:0%
ID or was it Oh two - oh one I'm not
 

00:55:58.230 --> 00:56:00.500 align:start position:0%
ID or was it Oh two - oh one I'm not
really<00:55:58.380><c> sure</c><00:55:58.820><c> the</c><00:55:59.820><c> comparing</c><00:56:00.359><c> with</c><00:56:00.480><c> the</c>

00:56:00.500 --> 00:56:00.510 align:start position:0%
really sure the comparing with the
 

00:56:00.510 --> 00:56:02.060 align:start position:0%
really sure the comparing with the
method<00:56:00.839><c> reference</c><00:56:01.170><c> to</c><00:56:01.320><c> me</c><00:56:01.440><c> makes</c><00:56:01.740><c> it</c><00:56:01.859><c> really</c>

00:56:02.060 --> 00:56:02.070 align:start position:0%
method reference to me makes it really
 

00:56:02.070 --> 00:56:04.099 align:start position:0%
method reference to me makes it really
clear<00:56:02.369><c> that</c><00:56:03.089><c> this</c><00:56:03.330><c> is</c><00:56:03.599><c> what</c><00:56:03.810><c> I</c><00:56:03.839><c> want</c><00:56:04.050><c> to</c>

00:56:04.099 --> 00:56:04.109 align:start position:0%
clear that this is what I want to
 

00:56:04.109 --> 00:56:06.339 align:start position:0%
clear that this is what I want to
compare<00:56:04.410><c> I'm</c><00:56:04.530><c> comparing</c><00:56:05.400><c> them</c><00:56:05.520><c> on</c><00:56:05.609><c> ID</c><00:56:05.790><c> and</c>

00:56:06.339 --> 00:56:06.349 align:start position:0%
compare I'm comparing them on ID and
 

00:56:06.349 --> 00:56:09.020 align:start position:0%
compare I'm comparing them on ID and
also<00:56:07.349><c> I</c><00:56:07.380><c> can</c><00:56:07.619><c> do</c><00:56:07.740><c> reversed</c><00:56:08.130><c> which</c><00:56:08.460><c> says</c><00:56:08.670><c> okay</c>

00:56:09.020 --> 00:56:09.030 align:start position:0%
also I can do reversed which says okay
 

00:56:09.030 --> 00:56:11.599 align:start position:0%
also I can do reversed which says okay
well<00:56:09.210><c> then</c><00:56:09.359><c> I</c><00:56:09.420><c> can</c><00:56:09.630><c> really</c><00:56:09.780><c> easily</c><00:56:10.430><c> sort</c><00:56:11.430><c> these</c>

00:56:11.599 --> 00:56:11.609 align:start position:0%
well then I can really easily sort these
 

00:56:11.609 --> 00:56:13.609 align:start position:0%
well then I can really easily sort these
centres<00:56:11.970><c> or</c><00:56:12.150><c> thought</c><00:56:12.480><c> descending</c><00:56:13.200><c> or</c><00:56:13.349><c> thought</c>

00:56:13.609 --> 00:56:13.619 align:start position:0%
centres or thought descending or thought
 

00:56:13.619 --> 00:56:16.460 align:start position:0%
centres or thought descending or thought
ascending<00:56:14.220><c> and</c><00:56:14.750><c> so</c><00:56:15.750><c> that's</c><00:56:16.109><c> some</c><00:56:16.380><c> of</c><00:56:16.410><c> the</c>

00:56:16.460 --> 00:56:16.470 align:start position:0%
ascending and so that's some of the
 

00:56:16.470 --> 00:56:17.690 align:start position:0%
ascending and so that's some of the
places<00:56:16.680><c> where</c><00:56:16.830><c> I</c><00:56:16.980><c> really</c><00:56:17.310><c> like</c><00:56:17.430><c> method</c>

00:56:17.690 --> 00:56:17.700 align:start position:0%
places where I really like method
 

00:56:17.700 --> 00:56:19.730 align:start position:0%
places where I really like method
references<00:56:17.880><c> I</c><00:56:18.240><c> personally</c><00:56:19.170><c> prefer</c><00:56:19.410><c> method</c>

00:56:19.730 --> 00:56:19.740 align:start position:0%
references I personally prefer method
 

00:56:19.740 --> 00:56:21.710 align:start position:0%
references I personally prefer method
references<00:56:20.089><c> Overlander</c><00:56:21.089><c> expressions</c>

00:56:21.710 --> 00:56:21.720 align:start position:0%
references Overlander expressions
 

00:56:21.720 --> 00:56:24.260 align:start position:0%
references Overlander expressions
most<00:56:22.140><c> of</c><00:56:22.410><c> the</c><00:56:22.500><c> time</c><00:56:22.710><c> but</c><00:56:23.400><c> basically</c><00:56:23.820><c> it's</c>

00:56:24.260 --> 00:56:24.270 align:start position:0%
most of the time but basically it's
 

00:56:24.270 --> 00:56:25.730 align:start position:0%
most of the time but basically it's
going<00:56:24.420><c> to</c><00:56:24.510><c> be</c><00:56:24.570><c> whatever</c><00:56:24.810><c> seems</c><00:56:25.290><c> to</c><00:56:25.440><c> be</c><00:56:25.530><c> the</c>

00:56:25.730 --> 00:56:25.740 align:start position:0%
going to be whatever seems to be the
 

00:56:25.740 --> 00:56:32.570 align:start position:0%
going to be whatever seems to be the
most<00:56:25.920><c> readable</c><00:56:26.190><c> for</c><00:56:26.580><c> you</c><00:56:31.339><c> what</c>

00:56:32.570 --> 00:56:32.580 align:start position:0%
most readable for you what
 

00:56:32.580 --> 00:56:36.110 align:start position:0%
most readable for you what
thank<00:56:33.000><c> and</c><00:56:33.720><c> neck</c><00:56:34.410><c> crushing</c><00:56:34.980><c> can</c><00:56:35.700><c> you</c><00:56:35.820><c> provide</c>

00:56:36.110 --> 00:56:36.120 align:start position:0%
thank and neck crushing can you provide
 

00:56:36.120 --> 00:56:38.180 align:start position:0%
thank and neck crushing can you provide
more<00:56:36.330><c> details</c><00:56:36.690><c> on</c><00:56:36.960><c> the</c><00:56:37.200><c> benefits</c><00:56:37.740><c> of</c><00:56:37.950><c> moving</c>

00:56:38.180 --> 00:56:38.190 align:start position:0%
more details on the benefits of moving
 

00:56:38.190 --> 00:56:40.850 align:start position:0%
more details on the benefits of moving
to<00:56:38.520><c> Java</c><00:56:38.790><c> 8</c><00:56:39.060><c> result</c><00:56:39.750><c> performance</c><00:56:40.440><c> and</c>

00:56:40.850 --> 00:56:40.860 align:start position:0%
to Java 8 result performance and
 

00:56:40.860 --> 00:56:45.410 align:start position:0%
to Java 8 result performance and
refactorings<00:56:43.130><c> so</c><00:56:44.130><c> I'm</c><00:56:44.640><c> going</c><00:56:44.910><c> to</c><00:56:44.940><c> assume</c><00:56:45.270><c> from</c>

00:56:45.410 --> 00:56:45.420 align:start position:0%
refactorings so I'm going to assume from
 

00:56:45.420 --> 00:56:47.810 align:start position:0%
refactorings so I'm going to assume from
that<00:56:45.510><c> question</c><00:56:45.840><c> it's</c><00:56:46.350><c> like</c><00:56:46.680><c> if</c><00:56:46.950><c> you're</c><00:56:47.220><c> if</c>

00:56:47.810 --> 00:56:47.820 align:start position:0%
that question it's like if you're if
 

00:56:47.820 --> 00:56:49.790 align:start position:0%
that question it's like if you're if
you've<00:56:48.060><c> got</c><00:56:48.240><c> an</c><00:56:48.480><c> existing</c><00:56:48.990><c> code</c><00:56:49.290><c> base</c><00:56:49.530><c> and</c>

00:56:49.790 --> 00:56:49.800 align:start position:0%
you've got an existing code base and
 

00:56:49.800 --> 00:56:51.680 align:start position:0%
you've got an existing code base and
you're<00:56:50.040><c> going</c><00:56:50.310><c> to</c><00:56:50.430><c> run</c><00:56:50.760><c> you're</c><00:56:51.390><c> going</c><00:56:51.480><c> to</c><00:56:51.570><c> run</c>

00:56:51.680 --> 00:56:51.690 align:start position:0%
you're going to run you're going to run
 

00:56:51.690 --> 00:56:53.210 align:start position:0%
you're going to run you're going to run
it<00:56:51.780><c> on</c><00:56:51.870><c> Java</c><00:56:52.110><c> 8</c><00:56:52.320><c> without</c><00:56:52.740><c> making</c><00:56:53.040><c> any</c><00:56:53.160><c> changes</c>

00:56:53.210 --> 00:56:53.220 align:start position:0%
it on Java 8 without making any changes
 

00:56:53.220 --> 00:56:55.250 align:start position:0%
it on Java 8 without making any changes
so<00:56:53.820><c> without</c><00:56:54.060><c> applying</c><00:56:54.450><c> the</c><00:56:54.930><c> lambda</c>

00:56:55.250 --> 00:56:55.260 align:start position:0%
so without applying the lambda
 

00:56:55.260 --> 00:56:57.410 align:start position:0%
so without applying the lambda
expressions<00:56:55.770><c> without</c><00:56:56.250><c> applying</c><00:56:56.850><c> without</c>

00:56:57.410 --> 00:56:57.420 align:start position:0%
expressions without applying without
 

00:56:57.420 --> 00:56:58.610 align:start position:0%
expressions without applying without
using<00:56:57.810><c> the</c><00:56:57.900><c> streams</c><00:56:58.170><c> API</c>

00:56:58.610 --> 00:56:58.620 align:start position:0%
using the streams API
 

00:56:58.620 --> 00:57:01.310 align:start position:0%
using the streams API
so<00:56:59.190><c> basically</c><00:56:59.490><c> Java</c><00:56:59.850><c> 6</c><00:57:00.180><c> code</c><00:57:00.570><c> running</c><00:57:00.990><c> on</c><00:57:01.230><c> a</c>

00:57:01.310 --> 00:57:01.320 align:start position:0%
so basically Java 6 code running on a
 

00:57:01.320 --> 00:57:05.150 align:start position:0%
so basically Java 6 code running on a
Java<00:57:01.950><c> 8</c><00:57:02.240><c> compiler</c><00:57:03.240><c> and</c><00:57:03.390><c> VM</c><00:57:03.690><c> that's</c><00:57:04.590><c> well</c><00:57:04.920><c> shim</c>

00:57:05.150 --> 00:57:05.160 align:start position:0%
Java 8 compiler and VM that's well shim
 

00:57:05.160 --> 00:57:10.370 align:start position:0%
Java 8 compiler and VM that's well shim
now<00:57:05.820><c> the</c><00:57:06.920><c> the</c><00:57:07.920><c> benefits</c><00:57:08.370><c> that</c><00:57:08.520><c> I</c><00:57:08.610><c> showed</c><00:57:09.380><c> let's</c>

00:57:10.370 --> 00:57:10.380 align:start position:0%
now the the benefits that I showed let's
 

00:57:10.380 --> 00:57:21.980 align:start position:0%
now the the benefits that I showed let's
go<00:57:10.500><c> back</c><00:57:10.650><c> to</c><00:57:10.740><c> beginning</c><00:57:11.630><c> or</c><00:57:12.630><c> lower</c><00:57:12.960><c> back</c><00:57:20.990><c> yes</c>

00:57:21.980 --> 00:57:21.990 align:start position:0%
go back to beginning or lower back yes
 

00:57:21.990 --> 00:57:23.930 align:start position:0%
go back to beginning or lower back yes
here<00:57:22.620><c> we</c><00:57:22.650><c> go</c><00:57:22.830><c> those</c><00:57:23.220><c> like</c><00:57:23.370><c> the</c><00:57:23.460><c> third</c><00:57:23.670><c> slide</c>

00:57:23.930 --> 00:57:23.940 align:start position:0%
here we go those like the third slide
 

00:57:23.940 --> 00:57:26.960 align:start position:0%
here we go those like the third slide
and<00:57:24.470><c> so</c><00:57:25.470><c> a</c><00:57:25.740><c> lot</c><00:57:26.040><c> of</c><00:57:26.070><c> these</c><00:57:26.250><c> changes</c><00:57:26.730><c> that</c>

00:57:26.960 --> 00:57:26.970 align:start position:0%
and so a lot of these changes that
 

00:57:26.970 --> 00:57:28.520 align:start position:0%
and so a lot of these changes that
performance<00:57:27.390><c> improvements</c><00:57:27.960><c> in</c><00:57:28.050><c> common</c><00:57:28.350><c> data</c>

00:57:28.520 --> 00:57:28.530 align:start position:0%
performance improvements in common data
 

00:57:28.530 --> 00:57:30.080 align:start position:0%
performance improvements in common data
structures<00:57:29.070><c> changes</c><00:57:29.820><c> to</c><00:57:29.940><c> support</c>

00:57:30.080 --> 00:57:30.090 align:start position:0%
structures changes to support
 

00:57:30.090 --> 00:57:32.720 align:start position:0%
structures changes to support
concurrency<00:57:30.900><c> a</c><00:57:31.080><c> bunch</c><00:57:31.830><c> of</c><00:57:31.980><c> these</c><00:57:32.130><c> things</c><00:57:32.430><c> and</c>

00:57:32.720 --> 00:57:32.730 align:start position:0%
concurrency a bunch of these things and
 

00:57:32.730 --> 00:57:34.840 align:start position:0%
concurrency a bunch of these things and
again<00:57:33.000><c> there's</c><00:57:33.240><c> links</c><00:57:33.810><c> to</c><00:57:33.840><c> more</c><00:57:34.320><c> information</c>

00:57:34.840 --> 00:57:34.850 align:start position:0%
again there's links to more information
 

00:57:34.850 --> 00:57:38.990 align:start position:0%
again there's links to more information
from<00:57:35.850><c> the</c><00:57:36.390><c> page</c><00:57:36.600><c> that</c><00:57:37.080><c> links</c><00:57:37.320><c> to</c><00:57:37.620><c> they</c><00:57:38.520><c> these</c>

00:57:38.990 --> 00:57:39.000 align:start position:0%
from the page that links to they these
 

00:57:39.000 --> 00:57:41.450 align:start position:0%
from the page that links to they these
speed<00:57:39.570><c> improvement</c><00:57:40.080><c> in</c><00:57:40.200><c> particular</c><00:57:40.500><c> and</c><00:57:40.920><c> you</c>

00:57:41.450 --> 00:57:41.460 align:start position:0%
speed improvement in particular and you
 

00:57:41.460 --> 00:57:43.580 align:start position:0%
speed improvement in particular and you
get<00:57:41.700><c> those</c><00:57:41.910><c> without</c><00:57:42.270><c> having</c><00:57:42.630><c> to</c><00:57:42.780><c> do</c><00:57:42.930><c> anything</c>

00:57:43.580 --> 00:57:43.590 align:start position:0%
get those without having to do anything
 

00:57:43.590 --> 00:57:45.170 align:start position:0%
get those without having to do anything
particularly<00:57:44.160><c> because</c><00:57:44.460><c> things</c><00:57:44.790><c> like</c><00:57:44.880><c> hash</c>

00:57:45.170 --> 00:57:45.180 align:start position:0%
particularly because things like hash
 

00:57:45.180 --> 00:57:47.420 align:start position:0%
particularly because things like hash
map<00:57:45.420><c> performs</c><00:57:45.990><c> better</c><00:57:46.200><c> so</c><00:57:46.710><c> presumably</c><00:57:47.040><c> you're</c>

00:57:47.420 --> 00:57:47.430 align:start position:0%
map performs better so presumably you're
 

00:57:47.430 --> 00:57:49.070 align:start position:0%
map performs better so presumably you're
already<00:57:47.610><c> using</c><00:57:47.880><c> hash</c><00:57:48.180><c> map</c><00:57:48.390><c> inside</c><00:57:48.690><c> your</c><00:57:48.870><c> Java</c>

00:57:49.070 --> 00:57:49.080 align:start position:0%
already using hash map inside your Java
 

00:57:49.080 --> 00:57:51.950 align:start position:0%
already using hash map inside your Java
6<00:57:49.320><c> style</c><00:57:49.680><c> code</c><00:57:50.040><c> and</c><00:57:50.370><c> moving</c><00:57:51.180><c> to</c><00:57:51.300><c> Java</c><00:57:51.510><c> 8</c><00:57:51.720><c> hash</c>

00:57:51.950 --> 00:57:51.960 align:start position:0%
6 style code and moving to Java 8 hash
 

00:57:51.960 --> 00:57:53.720 align:start position:0%
6 style code and moving to Java 8 hash
map<00:57:52.170><c> would</c><00:57:52.380><c> perform</c><00:57:52.800><c> generally</c><00:57:53.310><c> perform</c>

00:57:53.720 --> 00:57:53.730 align:start position:0%
map would perform generally perform
 

00:57:53.730 --> 00:58:00.790 align:start position:0%
map would perform generally perform
faster<00:57:54.330><c> without</c><00:57:54.600><c> you</c><00:57:54.870><c> having</c><00:57:55.020><c> to</c><00:57:55.140><c> do</c><00:57:55.350><c> anything</c>

00:58:00.790 --> 00:58:00.800 align:start position:0%
 
 

00:58:00.800 --> 00:58:06.980 align:start position:0%
 
ok<00:58:02.540><c> next</c><00:58:03.540><c> question</c><00:58:05.120><c> how</c><00:58:06.120><c> will</c><00:58:06.180><c> you</c><00:58:06.420><c> approach</c><00:58:06.720><c> a</c>

00:58:06.980 --> 00:58:06.990 align:start position:0%
ok next question how will you approach a
 

00:58:06.990 --> 00:58:09.530 align:start position:0%
ok next question how will you approach a
situation<00:58:07.310><c> where</c><00:58:08.310><c> you</c><00:58:08.430><c> need</c><00:58:08.610><c> to</c><00:58:08.790><c> iterate</c><00:58:09.000><c> over</c>

00:58:09.530 --> 00:58:09.540 align:start position:0%
situation where you need to iterate over
 

00:58:09.540 --> 00:58:12.350 align:start position:0%
situation where you need to iterate over
a<00:58:09.780><c> string</c><00:58:10.200><c> multiple</c><00:58:11.160><c> times</c><00:58:11.460><c> to</c><00:58:11.970><c> perform</c>

00:58:12.350 --> 00:58:12.360 align:start position:0%
a string multiple times to perform
 

00:58:12.360 --> 00:58:17.510 align:start position:0%
a string multiple times to perform
different<00:58:12.870><c> operations</c><00:58:12.990><c> on</c><00:58:13.800><c> it</c><00:58:14.090><c> collect</c><00:58:16.250><c> to</c><00:58:17.250><c> it</c>

00:58:17.510 --> 00:58:17.520 align:start position:0%
different operations on it collect to it
 

00:58:17.520 --> 00:58:19.670 align:start position:0%
different operations on it collect to it
to<00:58:17.970><c> your</c><00:58:18.180><c> collection</c><00:58:18.510><c> first</c><00:58:19.110><c> and</c><00:58:19.380><c> then</c>

00:58:19.670 --> 00:58:19.680 align:start position:0%
to your collection first and then
 

00:58:19.680 --> 00:58:22.700 align:start position:0%
to your collection first and then
perform<00:58:20.190><c> their</c><00:58:20.370><c> processing</c><00:58:21.150><c> or</c><00:58:21.630><c> is</c><00:58:22.230><c> there</c><00:58:22.530><c> a</c>

00:58:22.700 --> 00:58:22.710 align:start position:0%
perform their processing or is there a
 

00:58:22.710 --> 00:58:29.270 align:start position:0%
perform their processing or is there a
better<00:58:22.920><c> approach</c><00:58:25.550><c> um</c><00:58:27.050><c> I'm</c><00:58:28.050><c> not</c><00:58:28.530><c> sure</c><00:58:28.590><c> I</c><00:58:29.220><c> would</c>

00:58:29.270 --> 00:58:29.280 align:start position:0%
better approach um I'm not sure I would
 

00:58:29.280 --> 00:58:32.000 align:start position:0%
better approach um I'm not sure I would
like<00:58:29.550><c> to</c><00:58:29.760><c> see</c><00:58:29.940><c> the</c><00:58:30.210><c> actual</c><00:58:30.330><c> code</c><00:58:30.720><c> example</c><00:58:31.320><c> but</c>

00:58:32.000 --> 00:58:32.010 align:start position:0%
like to see the actual code example but
 

00:58:32.010 --> 00:58:35.270 align:start position:0%
like to see the actual code example but
I<00:58:32.400><c> think</c><00:58:32.760><c> that</c><00:58:33.500><c> some</c><00:58:34.500><c> of</c><00:58:34.620><c> these</c><00:58:34.740><c> research</c>

00:58:35.270 --> 00:58:35.280 align:start position:0%
I think that some of these research
 

00:58:35.280 --> 00:58:37.820 align:start position:0%
I think that some of these research
things<00:58:35.550><c> that</c><00:58:35.730><c> we</c><00:58:35.850><c> saw</c><00:58:36.030><c> here</c><00:58:36.560><c> some</c><00:58:37.560><c> of</c><00:58:37.590><c> them</c><00:58:37.770><c> are</c>

00:58:37.820 --> 00:58:37.830 align:start position:0%
things that we saw here some of them are
 

00:58:37.830 --> 00:58:39.260 align:start position:0%
things that we saw here some of them are
a<00:58:37.890><c> bit</c><00:58:37.920><c> magic</c><00:58:38.370><c> and</c><00:58:38.580><c> you</c><00:58:38.640><c> just</c><00:58:38.820><c> kind</c><00:58:39.000><c> of</c><00:58:39.060><c> get</c>

00:58:39.260 --> 00:58:39.270 align:start position:0%
a bit magic and you just kind of get
 

00:58:39.270 --> 00:58:41.690 align:start position:0%
a bit magic and you just kind of get
three<00:58:40.230><c> steps</c><00:58:40.560><c> in</c><00:58:40.770><c> one</c><00:58:40.950><c> it</c><00:58:41.100><c> just</c><00:58:41.340><c> does</c><00:58:41.490><c> it</c><00:58:41.610><c> all</c>

00:58:41.690 --> 00:58:41.700 align:start position:0%
three steps in one it just does it all
 

00:58:41.700 --> 00:58:42.320 align:start position:0%
three steps in one it just does it all
for<00:58:42.000><c> you</c>

00:58:42.320 --> 00:58:42.330 align:start position:0%
for you
 

00:58:42.330 --> 00:58:44.060 align:start position:0%
for you
and<00:58:42.540><c> I</c><00:58:42.840><c> think</c><00:58:43.080><c> that</c><00:58:43.230><c> as</c><00:58:43.350><c> you're</c><00:58:43.560><c> getting</c><00:58:43.860><c> to</c>

00:58:44.060 --> 00:58:44.070 align:start position:0%
and I think that as you're getting to
 

00:58:44.070 --> 00:58:46.190 align:start position:0%
and I think that as you're getting to
grips<00:58:44.310><c> with</c><00:58:44.700><c> some</c><00:58:44.940><c> of</c><00:58:45.180><c> the</c><00:58:45.240><c> Java</c><00:58:45.480><c> 8</c><00:58:45.690><c> features</c>

00:58:46.190 --> 00:58:46.200 align:start position:0%
grips with some of the Java 8 features
 

00:58:46.200 --> 00:58:48.260 align:start position:0%
grips with some of the Java 8 features
it's<00:58:46.320><c> it's</c><00:58:46.980><c> important</c><00:58:47.700><c> to</c><00:58:47.820><c> do</c><00:58:48.000><c> things</c>

00:58:48.260 --> 00:58:48.270 align:start position:0%
it's it's important to do things
 

00:58:48.270 --> 00:58:51.950 align:start position:0%
it's it's important to do things
incremental<00:58:49.260><c> II</c><00:58:49.349><c> so</c><00:58:50.040><c> if</c><00:58:50.339><c> I</c><00:58:50.520><c> if</c><00:58:51.150><c> I</c><00:58:51.329><c> was</c><00:58:51.510><c> thinking</c>

00:58:51.950 --> 00:58:51.960 align:start position:0%
incremental II so if I if I was thinking
 

00:58:51.960 --> 00:58:55.670 align:start position:0%
incremental II so if I if I was thinking
in<00:58:52.109><c> terms</c><00:58:52.140><c> of</c><00:58:52.619><c> a</c><00:58:53.240><c> collection</c><00:58:54.240><c> or</c><00:58:54.480><c> some</c><00:58:55.079><c> objects</c>

00:58:55.670 --> 00:58:55.680 align:start position:0%
in terms of a collection or some objects
 

00:58:55.680 --> 00:58:57.890 align:start position:0%
in terms of a collection or some objects
requiring<00:58:56.339><c> multiple</c><00:58:56.880><c> operations</c><00:58:57.540><c> to</c><00:58:57.869><c> be</c>

00:58:57.890 --> 00:58:57.900 align:start position:0%
requiring multiple operations to be
 

00:58:57.900 --> 00:59:00.109 align:start position:0%
requiring multiple operations to be
performed<00:58:58.020><c> upon</c><00:58:58.650><c> it</c><00:58:58.829><c> I</c><00:58:58.980><c> might</c><00:58:59.460><c> write</c><00:58:59.760><c> that</c><00:58:59.970><c> in</c>

00:59:00.109 --> 00:59:00.119 align:start position:0%
performed upon it I might write that in
 

00:59:00.119 --> 00:59:02.720 align:start position:0%
performed upon it I might write that in
the<00:59:00.240><c> code</c><00:59:00.450><c> as</c><00:59:00.780><c> let's</c><00:59:01.589><c> say</c><00:59:01.770><c> three</c><00:59:02.190><c> separate</c>

00:59:02.720 --> 00:59:02.730 align:start position:0%
the code as let's say three separate
 

00:59:02.730 --> 00:59:05.660 align:start position:0%
the code as let's say three separate
operations<00:59:03.359><c> and</c><00:59:03.690><c> then</c><00:59:04.440><c> I'd</c><00:59:04.829><c> have</c><00:59:05.250><c> a</c><00:59:05.310><c> test</c><00:59:05.579><c> to</c>

00:59:05.660 --> 00:59:05.670 align:start position:0%
operations and then I'd have a test to
 

00:59:05.670 --> 00:59:07.250 align:start position:0%
operations and then I'd have a test to
make<00:59:05.790><c> sure</c><00:59:05.910><c> that's</c><00:59:06.089><c> working</c><00:59:06.329><c> and</c><00:59:06.839><c> then</c><00:59:07.230><c> I</c>

00:59:07.250 --> 00:59:07.260 align:start position:0%
make sure that's working and then I
 

00:59:07.260 --> 00:59:09.380 align:start position:0%
make sure that's working and then I
might<00:59:07.530><c> see</c><00:59:07.710><c> if</c><00:59:07.740><c> I</c><00:59:07.920><c> can</c><00:59:08.099><c> we</c><00:59:08.220><c> factor</c><00:59:08.460><c> it</c><00:59:08.760><c> into</c>

00:59:09.380 --> 00:59:09.390 align:start position:0%
might see if I can we factor it into
 

00:59:09.390 --> 00:59:13.099 align:start position:0%
might see if I can we factor it into
either<00:59:09.630><c> a</c><00:59:09.810><c> single</c><00:59:10.230><c> stream</c><00:59:10.560><c> operation</c><00:59:11.190><c> or</c><00:59:12.109><c> yeah</c>

00:59:13.099 --> 00:59:13.109 align:start position:0%
either a single stream operation or yeah
 

00:59:13.109 --> 00:59:14.450 align:start position:0%
either a single stream operation or yeah
I'd<00:59:13.320><c> see</c><00:59:13.530><c> if</c><00:59:13.619><c> I</c><00:59:13.680><c> could</c><00:59:13.710><c> research</c><00:59:14.130><c> it</c><00:59:14.160><c> into</c><00:59:14.430><c> a</c>

00:59:14.450 --> 00:59:14.460 align:start position:0%
I'd see if I could research it into a
 

00:59:14.460 --> 00:59:16.310 align:start position:0%
I'd see if I could research it into a
single<00:59:14.700><c> stream</c><00:59:15.000><c> operation</c><00:59:15.540><c> you</c><00:59:15.990><c> should</c><00:59:16.020><c> be</c>

00:59:16.310 --> 00:59:16.320 align:start position:0%
single stream operation you should be
 

00:59:16.320 --> 00:59:18.710 align:start position:0%
single stream operation you should be
able<00:59:16.380><c> to</c><00:59:16.500><c> reason</c><00:59:16.920><c> around</c><00:59:17.119><c> which</c><00:59:18.119><c> things</c><00:59:18.480><c> are</c>

00:59:18.710 --> 00:59:18.720 align:start position:0%
able to reason around which things are
 

00:59:18.720 --> 00:59:20.839 align:start position:0%
able to reason around which things are
inhibiting<00:59:19.440><c> that</c><00:59:19.470><c> so</c><00:59:20.130><c> if</c><00:59:20.250><c> I</c><00:59:20.339><c> look</c><00:59:20.520><c> at</c><00:59:20.640><c> some</c><00:59:20.820><c> of</c>

00:59:20.839 --> 00:59:20.849 align:start position:0%
inhibiting that so if I look at some of
 

00:59:20.849 --> 00:59:29.510 align:start position:0%
inhibiting that so if I look at some of
my<00:59:21.150><c> examples</c><00:59:22.310><c> like</c><00:59:26.329><c> this</c><00:59:27.329><c> example</c><00:59:27.750><c> I</c><00:59:28.520><c> know</c>

00:59:29.510 --> 00:59:29.520 align:start position:0%
my examples like this example I know
 

00:59:29.520 --> 00:59:31.849 align:start position:0%
my examples like this example I know
that<00:59:30.210><c> there's</c><00:59:30.750><c> another</c><00:59:30.780><c> for</c><00:59:31.230><c> loop</c><00:59:31.410><c> here</c><00:59:31.619><c> so</c><00:59:31.829><c> I</c>

00:59:31.849 --> 00:59:31.859 align:start position:0%
that there's another for loop here so I
 

00:59:31.859 --> 00:59:33.470 align:start position:0%
that there's another for loop here so I
feel<00:59:32.190><c> like</c><00:59:32.220><c> this</c><00:59:32.550><c> should</c><00:59:32.820><c> be</c><00:59:32.849><c> able</c><00:59:33.300><c> to</c><00:59:33.390><c> be</c>

00:59:33.470 --> 00:59:33.480 align:start position:0%
feel like this should be able to be
 

00:59:33.480 --> 00:59:37.099 align:start position:0%
feel like this should be able to be
refracted<00:59:34.050><c> into</c><00:59:34.320><c> a</c><00:59:35.240><c> single</c><00:59:36.240><c> stream</c><00:59:36.510><c> operation</c>

00:59:37.099 --> 00:59:37.109 align:start position:0%
refracted into a single stream operation
 

00:59:37.109 --> 00:59:39.349 align:start position:0%
refracted into a single stream operation
but<00:59:37.680><c> I</c><00:59:37.710><c> know</c><00:59:37.950><c> that</c><00:59:38.310><c> the</c><00:59:38.790><c> way</c><00:59:38.940><c> that</c><00:59:39.119><c> this</c><00:59:39.210><c> is</c>

00:59:39.349 --> 00:59:39.359 align:start position:0%
but I know that the way that this is
 

00:59:39.359 --> 00:59:40.849 align:start position:0%
but I know that the way that this is
structured<00:59:39.630><c> right</c><00:59:39.900><c> now</c><00:59:40.020><c> I</c><00:59:40.050><c> can't</c><00:59:40.440><c> do</c><00:59:40.650><c> that</c>

00:59:40.849 --> 00:59:40.859 align:start position:0%
structured right now I can't do that
 

00:59:40.859 --> 00:59:43.910 align:start position:0%
structured right now I can't do that
because<00:59:41.130><c> it's</c><00:59:42.030><c> this</c><00:59:42.359><c> if</c><00:59:43.020><c> this</c><00:59:43.200><c> map</c><00:59:43.440><c> field</c>

00:59:43.910 --> 00:59:43.920 align:start position:0%
because it's this if this map field
 

00:59:43.920 --> 00:59:46.550 align:start position:0%
because it's this if this map field
which<00:59:44.579><c> I</c><00:59:44.700><c> need</c><00:59:44.880><c> access</c><00:59:45.089><c> to</c><00:59:45.300><c> here</c><00:59:45.810><c> and</c><00:59:45.990><c> here</c>

00:59:46.550 --> 00:59:46.560 align:start position:0%
which I need access to here and here
 

00:59:46.560 --> 00:59:49.280 align:start position:0%
which I need access to here and here
which<00:59:47.430><c> stops</c><00:59:47.760><c> me</c><00:59:48.000><c> from</c><00:59:48.030><c> inlining</c><00:59:48.869><c> this</c><00:59:49.020><c> for</c>

00:59:49.280 --> 00:59:49.290 align:start position:0%
which stops me from inlining this for
 

00:59:49.290 --> 00:59:52.370 align:start position:0%
which stops me from inlining this for
loop<00:59:49.440><c> and</c><00:59:49.730><c> similarly</c><00:59:50.730><c> I</c><00:59:51.089><c> have</c><00:59:51.510><c> to</c><00:59:51.690><c> a</c><00:59:51.720><c> for</c><00:59:52.079><c> each</c>

00:59:52.370 --> 00:59:52.380 align:start position:0%
loop and similarly I have to a for each
 

00:59:52.380 --> 00:59:54.920 align:start position:0%
loop and similarly I have to a for each
instead<00:59:53.010><c> of</c><00:59:53.160><c> doing</c><00:59:53.430><c> something</c><00:59:53.640><c> more</c><00:59:54.119><c> Streamy</c>

00:59:54.920 --> 00:59:54.930 align:start position:0%
instead of doing something more Streamy
 

00:59:54.930 --> 00:59:58.460 align:start position:0%
instead of doing something more Streamy
because<00:59:55.770><c> I'm</c><00:59:55.920><c> passing</c><00:59:56.400><c> in</c><00:59:56.609><c> this</c><00:59:57.060><c> set</c><00:59:57.510><c> so</c><00:59:58.079><c> the</c>

00:59:58.460 --> 00:59:58.470 align:start position:0%
because I'm passing in this set so the
 

00:59:58.470 --> 01:00:00.109 align:start position:0%
because I'm passing in this set so the
problem<00:59:58.800><c> with</c><00:59:58.950><c> this</c><00:59:59.040><c> particular</c><00:59:59.339><c> method</c><00:59:59.819><c> is</c>

01:00:00.109 --> 01:00:00.119 align:start position:0%
problem with this particular method is
 

01:00:00.119 --> 01:00:04.400 align:start position:0%
problem with this particular method is
and<01:00:00.390><c> I</c><01:00:01.339><c> have</c><01:00:02.339><c> a</c><01:00:02.730><c> number</c><01:00:03.660><c> of</c><01:00:03.750><c> collections</c><01:00:04.079><c> that</c>

01:00:04.400 --> 01:00:04.410 align:start position:0%
and I have a number of collections that
 

01:00:04.410 --> 01:00:06.109 align:start position:0%
and I have a number of collections that
I'm<01:00:04.530><c> doing</c><01:00:04.710><c> stuff</c><01:00:05.099><c> over</c><01:00:05.490><c> so</c><01:00:05.670><c> I've</c><01:00:05.760><c> got</c><01:00:05.970><c> this</c>

01:00:06.109 --> 01:00:06.119 align:start position:0%
I'm doing stuff over so I've got this
 

01:00:06.119 --> 01:00:09.079 align:start position:0%
I'm doing stuff over so I've got this
found<01:00:06.480><c> name</c><01:00:06.810><c> thing</c><01:00:07.260><c> and</c><01:00:07.560><c> I've</c><01:00:07.950><c> got</c><01:00:08.190><c> this</c><01:00:08.400><c> set</c>

01:00:09.079 --> 01:00:09.089 align:start position:0%
found name thing and I've got this set
 

01:00:09.089 --> 01:00:12.680 align:start position:0%
found name thing and I've got this set
here<01:00:09.569><c> I've</c><01:00:09.930><c> got</c><01:00:10.380><c> this</c><01:00:10.880><c> mapped</c><01:00:11.880><c> field</c><01:00:12.270><c> thing</c>

01:00:12.680 --> 01:00:12.690 align:start position:0%
here I've got this mapped field thing
 

01:00:12.690 --> 01:00:15.020 align:start position:0%
here I've got this mapped field thing
which<01:00:13.200><c> also</c><01:00:13.470><c> has</c><01:00:13.800><c> lists</c><01:00:14.250><c> inside</c><01:00:14.609><c> it</c><01:00:14.790><c> so</c><01:00:14.910><c> I've</c>

01:00:15.020 --> 01:00:15.030 align:start position:0%
which also has lists inside it so I've
 

01:00:15.030 --> 01:00:16.520 align:start position:0%
which also has lists inside it so I've
got<01:00:15.210><c> a</c><01:00:15.240><c> number</c><01:00:15.660><c> of</c><01:00:15.720><c> different</c><01:00:16.079><c> collections</c>

01:00:16.520 --> 01:00:16.530 align:start position:0%
got a number of different collections
 

01:00:16.530 --> 01:00:18.620 align:start position:0%
got a number of different collections
that<01:00:17.250><c> are</c><01:00:17.310><c> interacting</c><01:00:18.060><c> with</c><01:00:18.180><c> each</c><01:00:18.270><c> other</c><01:00:18.480><c> so</c>

01:00:18.620 --> 01:00:18.630 align:start position:0%
that are interacting with each other so
 

01:00:18.630 --> 01:00:20.000 align:start position:0%
that are interacting with each other so
I'm<01:00:18.690><c> having</c><01:00:18.839><c> to</c><01:00:18.960><c> iterate</c><01:00:19.349><c> over</c><01:00:19.470><c> all</c><01:00:19.619><c> of</c><01:00:19.890><c> them</c>

01:00:20.000 --> 01:00:20.010 align:start position:0%
I'm having to iterate over all of them
 

01:00:20.010 --> 01:00:23.690 align:start position:0%
I'm having to iterate over all of them
and<01:00:20.160><c> in</c><01:00:20.790><c> this</c><01:00:21.390><c> case</c><01:00:21.690><c> I</c><01:00:21.900><c> know</c><01:00:22.020><c> that</c><01:00:22.440><c> in</c><01:00:22.890><c> order</c><01:00:23.460><c> to</c>

01:00:23.690 --> 01:00:23.700 align:start position:0%
and in this case I know that in order to
 

01:00:23.700 --> 01:00:25.280 align:start position:0%
and in this case I know that in order to
perform<01:00:23.849><c> that</c><01:00:24.240><c> as</c><01:00:24.359><c> a</c><01:00:24.390><c> single</c><01:00:24.900><c> stream</c>

01:00:25.280 --> 01:00:25.290 align:start position:0%
perform that as a single stream
 

01:00:25.290 --> 01:00:28.250 align:start position:0%
perform that as a single stream
operation<01:00:25.859><c> I</c><01:00:26.099><c> need</c><01:00:26.910><c> to</c><01:00:27.240><c> get</c><01:00:27.540><c> rid</c><01:00:27.750><c> of</c><01:00:27.780><c> some</c><01:00:28.140><c> of</c>

01:00:28.250 --> 01:00:28.260 align:start position:0%
operation I need to get rid of some of
 

01:00:28.260 --> 01:00:30.740 align:start position:0%
operation I need to get rid of some of
those<01:00:28.319><c> collections</c><01:00:28.589><c> or</c><01:00:29.420><c> collapse</c><01:00:30.420><c> them</c><01:00:30.630><c> in</c>

01:00:30.740 --> 01:00:30.750 align:start position:0%
those collections or collapse them in
 

01:00:30.750 --> 01:00:33.500 align:start position:0%
those collections or collapse them in
together<01:00:30.950><c> so</c><01:00:31.950><c> it</c><01:00:32.190><c> would</c><01:00:32.400><c> the</c><01:00:33.060><c> answer</c><01:00:33.300><c> is</c><01:00:33.420><c> of</c>

01:00:33.500 --> 01:00:33.510 align:start position:0%
together so it would the answer is of
 

01:00:33.510 --> 01:00:35.390 align:start position:0%
together so it would the answer is of
course<01:00:33.660><c> it</c><01:00:33.869><c> depends</c><01:00:34.170><c> that</c><01:00:34.440><c> I'd</c><01:00:34.619><c> be</c><01:00:34.770><c> tempted</c><01:00:35.190><c> on</c>

01:00:35.390 --> 01:00:35.400 align:start position:0%
course it depends that I'd be tempted on
 

01:00:35.400 --> 01:00:37.190 align:start position:0%
course it depends that I'd be tempted on
the<01:00:35.609><c> first</c><01:00:35.849><c> pass</c><01:00:36.150><c> to</c><01:00:36.420><c> write</c><01:00:36.599><c> stuff</c><01:00:36.839><c> out</c><01:00:37.020><c> as</c><01:00:37.170><c> a</c>

01:00:37.190 --> 01:00:37.200 align:start position:0%
the first pass to write stuff out as a
 

01:00:37.200 --> 01:00:39.650 align:start position:0%
the first pass to write stuff out as a
series<01:00:37.680><c> of</c><01:00:37.800><c> individual</c><01:00:38.339><c> operations</c><01:00:38.880><c> and</c><01:00:39.119><c> then</c>

01:00:39.650 --> 01:00:39.660 align:start position:0%
series of individual operations and then
 

01:00:39.660 --> 01:00:41.150 align:start position:0%
series of individual operations and then
see<01:00:39.960><c> if</c><01:00:40.079><c> I</c><01:00:40.200><c> can</c><01:00:40.380><c> figure</c><01:00:40.560><c> out</c><01:00:40.710><c> which</c><01:00:40.859><c> of</c><01:00:41.040><c> those</c>

01:00:41.150 --> 01:00:41.160 align:start position:0%
see if I can figure out which of those
 

01:00:41.160 --> 01:00:43.700 align:start position:0%
see if I can figure out which of those
will<01:00:41.520><c> collapse</c><01:00:41.819><c> down</c><01:00:42.089><c> into</c><01:00:42.349><c> into</c><01:00:43.349><c> a</c><01:00:43.410><c> single</c>

01:00:43.700 --> 01:00:43.710 align:start position:0%
will collapse down into into a single
 

01:00:43.710 --> 01:00:45.040 align:start position:0%
will collapse down into into a single
operation

01:00:45.040 --> 01:00:45.050 align:start position:0%
operation
 

01:00:45.050 --> 01:00:49.420 align:start position:0%
operation
okay<01:00:46.050><c> good</c><01:00:46.290><c> sir</c><01:00:46.760><c> again</c><01:00:47.760><c> a</c><01:00:48.030><c> question</c><01:00:48.599><c> about</c>

01:00:49.420 --> 01:00:49.430 align:start position:0%
okay good sir again a question about
 

01:00:49.430 --> 01:00:51.589 align:start position:0%
okay good sir again a question about
comparing<01:00:50.430><c> methods</c><01:00:50.790><c> reference</c><01:00:51.210><c> tool</c><01:00:51.450><c> and</c>

01:00:51.589 --> 01:00:51.599 align:start position:0%
comparing methods reference tool and
 

01:00:51.599 --> 01:00:53.480 align:start position:0%
comparing methods reference tool and
expressions<01:00:52.230><c> with</c><01:00:52.440><c> now</c><01:00:52.619><c> performance</c><01:00:53.280><c> watch</c>

01:00:53.480 --> 01:00:53.490 align:start position:0%
expressions with now performance watch
 

01:00:53.490 --> 01:00:58.530 align:start position:0%
expressions with now performance watch
oh<01:00:55.430><c> um</c><01:00:56.430><c> I</c><01:00:57.119><c> don't</c><01:00:57.839><c> well</c>

01:00:58.530 --> 01:00:58.540 align:start position:0%
oh um I don't well
 

01:00:58.540 --> 01:01:00.240 align:start position:0%
oh um I don't well
I<01:00:58.570><c> think</c><01:00:59.110><c> they're</c><01:00:59.230><c> the</c><01:00:59.260><c> same</c><01:00:59.350><c> I</c><01:00:59.620><c> don't</c><01:00:59.830><c> know</c><01:00:59.980><c> I</c>

01:01:00.240 --> 01:01:00.250 align:start position:0%
I think they're the same I don't know I
 

01:01:00.250 --> 01:01:03.660 align:start position:0%
I think they're the same I don't know I
think<01:01:00.370><c> there</c><01:01:00.970><c> is</c><01:01:01.000><c> some</c><01:01:01.570><c> I</c><01:01:02.370><c> think</c><01:01:03.370><c> there's</c><01:01:03.490><c> some</c>

01:01:03.660 --> 01:01:03.670 align:start position:0%
think there is some I think there's some
 

01:01:03.670 --> 01:01:07.160 align:start position:0%
think there is some I think there's some
literature<01:01:04.210><c> from</c><01:01:04.390><c> Oracle</c><01:01:04.960><c> on</c><01:01:05.170><c> that</c><01:01:05.470><c> but</c><01:01:06.220><c> I</c>

01:01:07.160 --> 01:01:07.170 align:start position:0%
literature from Oracle on that but I
 

01:01:07.170 --> 01:01:10.440 align:start position:0%
literature from Oracle on that but I
think<01:01:08.170><c> that</c><01:01:08.560><c> they</c><01:01:08.980><c> perform</c><01:01:09.400><c> the</c><01:01:09.580><c> same</c><01:01:09.790><c> I</c><01:01:10.060><c> don't</c>

01:01:10.440 --> 01:01:10.450 align:start position:0%
think that they perform the same I don't
 

01:01:10.450 --> 01:01:11.760 align:start position:0%
think that they perform the same I don't
know<01:01:10.540><c> I</c><01:01:10.750><c> shouldn't</c><01:01:10.990><c> say</c><01:01:11.140><c> anything</c><01:01:11.470><c> because</c><01:01:11.560><c> I</c>

01:01:11.760 --> 01:01:11.770 align:start position:0%
know I shouldn't say anything because I
 

01:01:11.770 --> 01:01:13.710 align:start position:0%
know I shouldn't say anything because I
don't<01:01:11.830><c> I</c><01:01:12.310><c> did</c><01:01:12.760><c> look</c><01:01:12.910><c> it</c><01:01:13.030><c> up</c><01:01:13.090><c> once</c><01:01:13.330><c> I</c><01:01:13.480><c> can't</c>

01:01:13.710 --> 01:01:13.720 align:start position:0%
don't I did look it up once I can't
 

01:01:13.720 --> 01:01:18.420 align:start position:0%
don't I did look it up once I can't
remember<01:01:13.960><c> okay</c><01:01:15.600><c> so</c><01:01:16.800><c> there</c><01:01:17.800><c> were</c><01:01:17.890><c> a</c><01:01:18.070><c> couple</c><01:01:18.250><c> of</c>

01:01:18.420 --> 01:01:18.430 align:start position:0%
remember okay so there were a couple of
 

01:01:18.430 --> 01:01:20.730 align:start position:0%
remember okay so there were a couple of
questions<01:01:18.940><c> about</c><01:01:19.150><c> their</c><01:01:19.720><c> performance</c><01:01:20.140><c> issues</c>

01:01:20.730 --> 01:01:20.740 align:start position:0%
questions about their performance issues
 

01:01:20.740 --> 01:01:25.290 align:start position:0%
questions about their performance issues
mentioned<01:01:23.130><c> question</c><01:01:24.130><c> first</c><01:01:24.520><c> question</c><01:01:24.910><c> is</c><01:01:25.060><c> is</c>

01:01:25.290 --> 01:01:25.300 align:start position:0%
mentioned question first question is is
 

01:01:25.300 --> 01:01:28.230 align:start position:0%
mentioned question first question is is
there<01:01:25.990><c> lower</c><01:01:26.470><c> performance</c><01:01:27.400><c> is</c><01:01:27.550><c> attributed</c><01:01:27.880><c> to</c>

01:01:28.230 --> 01:01:28.240 align:start position:0%
there lower performance is attributed to
 

01:01:28.240 --> 01:01:32.010 align:start position:0%
there lower performance is attributed to
erase<01:01:28.780><c> that</c><01:01:29.410><c> streams</c><01:01:29.880><c> only</c><01:01:30.880><c> how</c><01:01:31.720><c> about</c>

01:01:32.010 --> 01:01:32.020 align:start position:0%
erase that streams only how about
 

01:01:32.020 --> 01:01:37.080 align:start position:0%
erase that streams only how about
collection<01:01:33.030><c> not</c><01:01:34.030><c> stream</c><01:01:34.420><c> right</c><01:01:35.290><c> so</c><01:01:35.800><c> the</c><01:01:36.580><c> worst</c>

01:01:37.080 --> 01:01:37.090 align:start position:0%
collection not stream right so the worst
 

01:01:37.090 --> 01:01:39.990 align:start position:0%
collection not stream right so the worst
performance<01:01:37.780><c> results</c><01:01:38.470><c> that</c><01:01:38.620><c> we</c><01:01:38.740><c> had</c><01:01:39.000><c> were</c>

01:01:39.990 --> 01:01:40.000 align:start position:0%
performance results that we had were
 

01:01:40.000 --> 01:01:42.300 align:start position:0%
performance results that we had were
definitely<01:01:40.870><c> around</c><01:01:41.050><c> a</c><01:01:41.230><c> raised</c><01:01:41.530><c> up</c><01:01:41.800><c> stream</c><01:01:42.100><c> I'm</c>

01:01:42.300 --> 01:01:42.310 align:start position:0%
definitely around a raised up stream I'm
 

01:01:42.310 --> 01:01:43.620 align:start position:0%
definitely around a raised up stream I'm
just<01:01:42.550><c> going</c><01:01:42.670><c> to</c><01:01:42.760><c> try</c><01:01:42.880><c> and</c><01:01:43.000><c> see</c><01:01:43.120><c> if</c><01:01:43.180><c> I</c><01:01:43.270><c> can</c><01:01:43.420><c> find</c>

01:01:43.620 --> 01:01:43.630 align:start position:0%
just going to try and see if I can find
 

01:01:43.630 --> 01:01:50.190 align:start position:0%
just going to try and see if I can find
some<01:01:43.870><c> of</c><01:01:43.900><c> these</c><01:01:44.020><c> examples</c><01:01:44.290><c> and</c><01:01:47.760><c> now</c><01:01:48.760><c> so</c><01:01:49.390><c> I</c><01:01:49.660><c> find</c>

01:01:50.190 --> 01:01:50.200 align:start position:0%
some of these examples and now so I find
 

01:01:50.200 --> 01:02:01.520 align:start position:0%
some of these examples and now so I find
the<01:01:50.290><c> word</c><01:01:50.470><c> fun</c>

01:02:01.520 --> 01:02:01.530 align:start position:0%
 
 

01:02:01.530 --> 01:02:03.260 align:start position:0%
 
one<01:02:01.740><c> of</c><01:02:01.800><c> the</c><01:02:01.890><c> worst</c><01:02:02.010><c> examples</c><01:02:02.130><c> this</c><01:02:02.940><c> is</c><01:02:03.090><c> where</c>

01:02:03.260 --> 01:02:03.270 align:start position:0%
one of the worst examples this is where
 

01:02:03.270 --> 01:02:04.930 align:start position:0%
one of the worst examples this is where
we're<01:02:03.390><c> using</c><01:02:03.420><c> a</c><01:02:03.810><c> raised</c><01:02:04.050><c> upstream</c><01:02:04.560><c> and</c>

01:02:04.930 --> 01:02:04.940 align:start position:0%
we're using a raised upstream and
 

01:02:04.940 --> 01:02:07.220 align:start position:0%
we're using a raised upstream and
regardless<01:02:05.940><c> of</c><01:02:06.270><c> whether</c><01:02:06.750><c> we</c><01:02:06.960><c> were</c><01:02:07.050><c> going</c>

01:02:07.220 --> 01:02:07.230 align:start position:0%
regardless of whether we were going
 

01:02:07.230 --> 01:02:10.730 align:start position:0%
regardless of whether we were going
parallel<01:02:07.740><c> or</c><01:02:07.980><c> not</c><01:02:08.310><c> we</c><01:02:09.030><c> just</c><01:02:09.330><c> couldn't</c><01:02:10.290><c> get</c>

01:02:10.730 --> 01:02:10.740 align:start position:0%
parallel or not we just couldn't get
 

01:02:10.740 --> 01:02:12.980 align:start position:0%
parallel or not we just couldn't get
performance<01:02:11.340><c> which</c><01:02:11.790><c> got</c><01:02:12.120><c> anywhere</c><01:02:12.570><c> near</c><01:02:12.630><c> the</c>

01:02:12.980 --> 01:02:12.990 align:start position:0%
performance which got anywhere near the
 

01:02:12.990 --> 01:02:15.860 align:start position:0%
performance which got anywhere near the
original<01:02:13.410><c> array</c><01:02:13.680><c> and</c><01:02:13.950><c> in</c><01:02:14.940><c> this</c><01:02:15.270><c> case</c><01:02:15.600><c> I</c>

01:02:15.860 --> 01:02:15.870 align:start position:0%
original array and in this case I
 

01:02:15.870 --> 01:02:18.710 align:start position:0%
original array and in this case I
believe<01:02:16.320><c> that</c><01:02:16.590><c> because</c><01:02:17.600><c> iterating</c><01:02:18.600><c> over</c>

01:02:18.710 --> 01:02:18.720 align:start position:0%
believe that because iterating over
 

01:02:18.720 --> 01:02:20.150 align:start position:0%
believe that because iterating over
arrayed<01:02:19.140><c> like</c><01:02:19.170><c> I</c><01:02:19.410><c> said</c><01:02:19.620><c> is</c><01:02:19.740><c> very</c><01:02:19.950><c> very</c>

01:02:20.150 --> 01:02:20.160 align:start position:0%
arrayed like I said is very very
 

01:02:20.160 --> 01:02:22.730 align:start position:0%
arrayed like I said is very very
efficient<01:02:20.580><c> and</c><01:02:20.670><c> it's</c><01:02:20.760><c> very</c><01:02:21.150><c> difficult</c><01:02:21.390><c> to</c><01:02:21.740><c> to</c>

01:02:22.730 --> 01:02:22.740 align:start position:0%
efficient and it's very difficult to to
 

01:02:22.740 --> 01:02:25.100 align:start position:0%
efficient and it's very difficult to to
match<01:02:22.950><c> that</c><01:02:23.250><c> performance</c><01:02:23.810><c> but</c><01:02:24.810><c> there</c><01:02:24.990><c> are</c>

01:02:25.100 --> 01:02:25.110 align:start position:0%
match that performance but there are
 

01:02:25.110 --> 01:02:29.420 align:start position:0%
match that performance but there are
other<01:02:25.230><c> cases</c><01:02:25.880><c> as</c><01:02:26.880><c> you're</c><01:02:27.450><c> pointing</c><01:02:27.840><c> out</c><01:02:28.430><c> where</c>

01:02:29.420 --> 01:02:29.430 align:start position:0%
other cases as you're pointing out where
 

01:02:29.430 --> 01:02:33.350 align:start position:0%
other cases as you're pointing out where
that's<01:02:30.420><c> no</c><01:02:30.570><c> waste</c><01:02:30.780><c> upstream</c><01:02:31.140><c> as</c><01:02:31.260><c> well</c><01:02:32.240><c> so</c><01:02:33.240><c> this</c>

01:02:33.350 --> 01:02:33.360 align:start position:0%
that's no waste upstream as well so this
 

01:02:33.360 --> 01:02:35.960 align:start position:0%
that's no waste upstream as well so this
is<01:02:33.420><c> a</c><01:02:33.570><c> map</c><01:02:34.320><c> and</c><01:02:34.590><c> a</c><01:02:34.710><c> collect</c><01:02:35.070><c> and</c><01:02:35.400><c> it's</c><01:02:35.760><c> not</c>

01:02:35.960 --> 01:02:35.970 align:start position:0%
is a map and a collect and it's not
 

01:02:35.970 --> 01:02:37.430 align:start position:0%
is a map and a collect and it's not
using<01:02:36.510><c> a</c><01:02:36.600><c> raised</c><01:02:36.780><c> upstream</c><01:02:37.200><c> this</c><01:02:37.320><c> is</c>

01:02:37.430 --> 01:02:37.440 align:start position:0%
using a raised upstream this is
 

01:02:37.440 --> 01:02:39.620 align:start position:0%
using a raised upstream this is
collection<01:02:37.800><c> upstream</c><01:02:38.460><c> and</c><01:02:38.640><c> it</c><01:02:39.060><c> still</c><01:02:39.360><c> is</c><01:02:39.600><c> not</c>

01:02:39.620 --> 01:02:39.630 align:start position:0%
collection upstream and it still is not
 

01:02:39.630 --> 01:02:42.230 align:start position:0%
collection upstream and it still is not
as<01:02:40.020><c> good</c><01:02:40.500><c> performance</c><01:02:41.100><c> wise</c><01:02:41.310><c> to</c><01:02:41.850><c> look</c><01:02:42.090><c> at</c><01:02:42.180><c> the</c>

01:02:42.230 --> 01:02:42.240 align:start position:0%
as good performance wise to look at the
 

01:02:42.240 --> 01:02:44.450 align:start position:0%
as good performance wise to look at the
code<01:02:42.450><c> here</c><01:02:42.720><c> we</c><01:02:43.410><c> go</c><01:02:43.560><c> it's</c><01:02:43.740><c> just</c><01:02:43.770><c> Keys</c><01:02:44.160><c> dot</c>

01:02:44.450 --> 01:02:44.460 align:start position:0%
code here we go it's just Keys dot
 

01:02:44.460 --> 01:02:50.060 align:start position:0%
code here we go it's just Keys dot
stream<01:02:45.230><c> and</c><01:02:46.230><c> so</c><01:02:46.590><c> the</c><01:02:48.020><c> using</c><01:02:49.020><c> streams</c><01:02:49.470><c> does</c>

01:02:50.060 --> 01:02:50.070 align:start position:0%
stream and so the using streams does
 

01:02:50.070 --> 01:02:52.100 align:start position:0%
stream and so the using streams does
have<01:02:50.400><c> an</c><01:02:50.580><c> impact</c><01:02:50.760><c> in</c><01:02:51.240><c> terms</c><01:02:51.450><c> of</c><01:02:51.660><c> object</c>

01:02:52.100 --> 01:02:52.110 align:start position:0%
have an impact in terms of object
 

01:02:52.110 --> 01:02:54.320 align:start position:0%
have an impact in terms of object
creation<01:02:52.200><c> it</c><01:02:53.130><c> does</c><01:02:53.460><c> have</c><01:02:53.670><c> an</c><01:02:53.760><c> impact</c><01:02:53.910><c> in</c><01:02:54.270><c> terms</c>

01:02:54.320 --> 01:02:54.330 align:start position:0%
creation it does have an impact in terms
 

01:02:54.330 --> 01:02:57.470 align:start position:0%
creation it does have an impact in terms
of<01:02:54.660><c> performance</c><01:02:55.170><c> so</c><01:02:55.890><c> it's</c><01:02:56.340><c> not</c><01:02:56.580><c> it's</c><01:02:57.150><c> not</c><01:02:57.240><c> just</c>

01:02:57.470 --> 01:02:57.480 align:start position:0%
of performance so it's not it's not just
 

01:02:57.480 --> 01:02:59.330 align:start position:0%
of performance so it's not it's not just
if<01:02:57.630><c> there</c><01:02:57.930><c> is</c><01:02:58.050><c> no</c><01:02:58.170><c> free</c><01:02:58.440><c> lunch</c><01:02:58.470><c> of</c><01:02:58.830><c> course</c><01:02:58.860><c> so</c>

01:02:59.330 --> 01:02:59.340 align:start position:0%
if there is no free lunch of course so
 

01:02:59.340 --> 01:03:01.540 align:start position:0%
if there is no free lunch of course so
yes<01:02:59.550><c> there</c><01:02:59.730><c> is</c><01:02:59.760><c> a</c><01:02:59.910><c> cost</c><01:03:00.240><c> to</c><01:03:00.360><c> using</c><01:03:00.720><c> streams</c><01:03:01.080><c> and</c>

01:03:01.540 --> 01:03:01.550 align:start position:0%
yes there is a cost to using streams and
 

01:03:01.550 --> 01:03:04.610 align:start position:0%
yes there is a cost to using streams and
directly<01:03:02.550><c> not</c><01:03:02.850><c> just</c><01:03:03.210><c> arrays</c><01:03:03.570><c> streams</c><01:03:04.230><c> but</c><01:03:04.440><c> the</c>

01:03:04.610 --> 01:03:04.620 align:start position:0%
directly not just arrays streams but the
 

01:03:04.620 --> 01:03:06.740 align:start position:0%
directly not just arrays streams but the
arrays<01:03:04.950><c> dot</c><01:03:05.220><c> stream</c><01:03:05.580><c> is</c><01:03:05.790><c> particularly</c><01:03:06.450><c> bad</c>

01:03:06.740 --> 01:03:06.750 align:start position:0%
arrays dot stream is particularly bad
 

01:03:06.750 --> 01:03:10.760 align:start position:0%
arrays dot stream is particularly bad
which<01:03:07.020><c> is</c><01:03:07.050><c> why</c><01:03:07.320><c> I</c><01:03:07.350><c> call</c><01:03:07.620><c> that</c><01:03:07.800><c> out</c><01:03:09.560><c> okay</c><01:03:10.560><c> and</c>

01:03:10.760 --> 01:03:10.770 align:start position:0%
which is why I call that out okay and
 

01:03:10.770 --> 01:03:14.210 align:start position:0%
which is why I call that out okay and
another<01:03:11.190><c> question</c><01:03:11.580><c> rather</c><01:03:12.240><c> this</c><01:03:12.510><c> is</c><01:03:13.220><c> all</c>

01:03:14.210 --> 01:03:14.220 align:start position:0%
another question rather this is all
 

01:03:14.220 --> 01:03:16.310 align:start position:0%
another question rather this is all
these<01:03:14.640><c> performance</c><01:03:15.330><c> issue</c><01:03:15.510><c> is</c><01:03:15.720><c> possible</c><01:03:16.170><c> to</c>

01:03:16.310 --> 01:03:16.320 align:start position:0%
these performance issue is possible to
 

01:03:16.320 --> 01:03:18.710 align:start position:0%
these performance issue is possible to
be<01:03:16.470><c> solved</c><01:03:16.950><c> in</c><01:03:17.100><c> future</c><01:03:17.610><c> versions</c><01:03:17.790><c> of</c><01:03:18.180><c> Java</c><01:03:18.420><c> or</c>

01:03:18.710 --> 01:03:18.720 align:start position:0%
be solved in future versions of Java or
 

01:03:18.720 --> 01:03:22.790 align:start position:0%
be solved in future versions of Java or
x9<01:03:19.350><c> okay</c><01:03:20.040><c> yes</c><01:03:21.030><c> so</c><01:03:21.300><c> the</c><01:03:21.660><c> performance</c><01:03:22.290><c> of</c><01:03:22.380><c> Java</c><01:03:22.560><c> 8</c>

01:03:22.790 --> 01:03:22.800 align:start position:0%
x9 okay yes so the performance of Java 8
 

01:03:22.800 --> 01:03:25.550 align:start position:0%
x9 okay yes so the performance of Java 8
has<01:03:23.220><c> been</c><01:03:23.520><c> getting</c><01:03:23.820><c> better</c><01:03:23.940><c> even</c><01:03:24.720><c> even</c><01:03:25.380><c> just</c>

01:03:25.550 --> 01:03:25.560 align:start position:0%
has been getting better even even just
 

01:03:25.560 --> 01:03:27.080 align:start position:0%
has been getting better even even just
Java<01:03:25.740><c> 8</c><01:03:25.920><c> so</c><01:03:26.130><c> you</c><01:03:26.190><c> know</c><01:03:26.340><c> you</c><01:03:26.400><c> get</c><01:03:26.670><c> all</c><01:03:26.850><c> these</c>

01:03:27.080 --> 01:03:27.090 align:start position:0%
Java 8 so you know you get all these
 

01:03:27.090 --> 01:03:29.090 align:start position:0%
Java 8 so you know you get all these
different<01:03:27.420><c> updates</c><01:03:27.600><c> for</c><01:03:28.110><c> the</c><01:03:28.440><c> job</c><01:03:28.620><c> 8</c><01:03:28.860><c> the</c>

01:03:29.090 --> 01:03:29.100 align:start position:0%
different updates for the job 8 the
 

01:03:29.100 --> 01:03:32.180 align:start position:0%
different updates for the job 8 the
non-running<01:03:29.750><c> release</c><01:03:30.750><c> 112</c><01:03:31.680><c> whatever</c><01:03:32.040><c> that</c>

01:03:32.180 --> 01:03:32.190 align:start position:0%
non-running release 112 whatever that
 

01:03:32.190 --> 01:03:32.480 align:start position:0%
non-running release 112 whatever that
means

01:03:32.480 --> 01:03:32.490 align:start position:0%
means
 

01:03:32.490 --> 01:03:35.270 align:start position:0%
means
so<01:03:32.970><c> even</c><01:03:33.420><c> without</c><01:03:34.110><c> having</c><01:03:34.350><c> to</c><01:03:34.560><c> go</c><01:03:34.680><c> to</c><01:03:34.740><c> Java</c><01:03:34.980><c> 9</c>

01:03:35.270 --> 01:03:35.280 align:start position:0%
so even without having to go to Java 9
 

01:03:35.280 --> 01:03:37.010 align:start position:0%
so even without having to go to Java 9
we're<01:03:35.640><c> getting</c><01:03:35.940><c> improved</c><01:03:36.330><c> performance</c><01:03:36.840><c> under</c>

01:03:37.010 --> 01:03:37.020 align:start position:0%
we're getting improved performance under
 

01:03:37.020 --> 01:03:38.030 align:start position:0%
we're getting improved performance under
the<01:03:37.140><c> covers</c><01:03:37.440><c> for</c><01:03:37.560><c> getting</c><01:03:37.770><c> improved</c>

01:03:38.030 --> 01:03:38.040 align:start position:0%
the covers for getting improved
 

01:03:38.040 --> 01:03:39.350 align:start position:0%
the covers for getting improved
performance<01:03:38.550><c> with</c><01:03:38.640><c> things</c><01:03:38.820><c> like</c><01:03:38.970><c> lambda</c>

01:03:39.350 --> 01:03:39.360 align:start position:0%
performance with things like lambda
 

01:03:39.360 --> 01:03:41.420 align:start position:0%
performance with things like lambda
expressions<01:03:39.810><c> and</c><01:03:39.960><c> so</c><01:03:40.110><c> forth</c><01:03:40.350><c> these</c><01:03:40.950><c> streams</c>

01:03:41.420 --> 01:03:41.430 align:start position:0%
expressions and so forth these streams
 

01:03:41.430 --> 01:03:43.190 align:start position:0%
expressions and so forth these streams
API<01:03:41.670><c> one</c><01:03:42.240><c> of</c><01:03:42.330><c> the</c><01:03:42.390><c> nice</c><01:03:42.570><c> things</c><01:03:42.870><c> about</c><01:03:42.990><c> the</c>

01:03:43.190 --> 01:03:43.200 align:start position:0%
API one of the nice things about the
 

01:03:43.200 --> 01:03:45.830 align:start position:0%
API one of the nice things about the
streams<01:03:43.410><c> API</c><01:03:43.590><c> is</c><01:03:44.070><c> because</c><01:03:44.490><c> how</c><01:03:45.300><c> its</c>

01:03:45.830 --> 01:03:45.840 align:start position:0%
streams API is because how its
 

01:03:45.840 --> 01:03:48.350 align:start position:0%
streams API is because how its
implemented<01:03:46.680><c> is</c><01:03:47.040><c> hidden</c><01:03:47.460><c> away</c><01:03:47.580><c> from</c><01:03:47.760><c> you</c><01:03:48.150><c> and</c>

01:03:48.350 --> 01:03:48.360 align:start position:0%
implemented is hidden away from you and
 

01:03:48.360 --> 01:03:50.120 align:start position:0%
implemented is hidden away from you and
you<01:03:48.540><c> just</c><01:03:48.750><c> interact</c><01:03:49.320><c> with</c><01:03:49.500><c> what</c><01:03:49.740><c> you</c><01:03:49.860><c> want</c><01:03:50.040><c> to</c>

01:03:50.120 --> 01:03:50.130 align:start position:0%
you just interact with what you want to
 

01:03:50.130 --> 01:03:52.850 align:start position:0%
you just interact with what you want to
achieve<01:03:50.270><c> they</c><01:03:51.270><c> can</c><01:03:51.480><c> continue</c><01:03:51.840><c> to</c><01:03:52.080><c> iterate</c>

01:03:52.850 --> 01:03:52.860 align:start position:0%
achieve they can continue to iterate
 

01:03:52.860 --> 01:03:54.650 align:start position:0%
achieve they can continue to iterate
over<01:03:53.310><c> improving</c><01:03:53.940><c> the</c><01:03:54.120><c> performance</c><01:03:54.240><c> for</c>

01:03:54.650 --> 01:03:54.660 align:start position:0%
over improving the performance for
 

01:03:54.660 --> 01:03:57.920 align:start position:0%
over improving the performance for
streams<01:03:54.930><c> API</c><01:03:55.140><c> without</c><01:03:56.100><c> impacting</c><01:03:56.880><c> you</c><01:03:57.420><c> using</c>

01:03:57.920 --> 01:03:57.930 align:start position:0%
streams API without impacting you using
 

01:03:57.930 --> 01:03:59.390 align:start position:0%
streams API without impacting you using
the<01:03:58.050><c> streams</c><01:03:58.290><c> API</c><01:03:58.470><c> they</c><01:03:58.860><c> can</c><01:03:59.040><c> do</c><01:03:59.130><c> that</c><01:03:59.280><c> under</c>

01:03:59.390 --> 01:03:59.400 align:start position:0%
the streams API they can do that under
 

01:03:59.400 --> 01:04:01.520 align:start position:0%
the streams API they can do that under
the<01:03:59.520><c> colors</c><01:03:59.790><c> so</c><01:04:00.360><c> that's</c><01:04:00.480><c> definitely</c><01:04:00.870><c> going</c><01:04:01.140><c> on</c>

01:04:01.520 --> 01:04:01.530 align:start position:0%
the colors so that's definitely going on
 

01:04:01.530 --> 01:04:03.110 align:start position:0%
the colors so that's definitely going on
there's<01:04:02.160><c> all</c><01:04:02.280><c> sorts</c><01:04:02.490><c> of</c><01:04:02.520><c> other</c><01:04:02.640><c> stuff</c><01:04:02.730><c> coming</c>

01:04:03.110 --> 01:04:03.120 align:start position:0%
there's all sorts of other stuff coming
 

01:04:03.120 --> 01:04:04.940 align:start position:0%
there's all sorts of other stuff coming
into<01:04:03.330><c> Java</c><01:04:03.630><c> 9</c><01:04:03.900><c> and</c><01:04:04.140><c> Java</c><01:04:04.290><c> 10</c><01:04:04.560><c> which</c><01:04:04.710><c> will</c>

01:04:04.940 --> 01:04:04.950 align:start position:0%
into Java 9 and Java 10 which will
 

01:04:04.950 --> 01:04:07.250 align:start position:0%
into Java 9 and Java 10 which will
improve<01:04:05.190><c> the</c><01:04:05.310><c> performance</c><01:04:05.430><c> -</c><01:04:06.120><c> one</c><01:04:07.110><c> of</c><01:04:07.140><c> the</c>

01:04:07.250 --> 01:04:07.260 align:start position:0%
improve the performance - one of the
 

01:04:07.260 --> 01:04:09.560 align:start position:0%
improve the performance - one of the
things<01:04:07.380><c> I</c><01:04:07.530><c> do</c><01:04:07.590><c> want</c><01:04:07.770><c> to</c><01:04:08.070><c> emphasize</c><01:04:09.060><c> though</c><01:04:09.330><c> is</c>

01:04:09.560 --> 01:04:09.570 align:start position:0%
things I do want to emphasize though is
 

01:04:09.570 --> 01:04:12.080 align:start position:0%
things I do want to emphasize though is
that<01:04:10.010><c> even</c><01:04:11.010><c> in</c><01:04:11.100><c> a</c><01:04:11.130><c> case</c><01:04:11.340><c> like</c><01:04:11.370><c> this</c><01:04:11.580><c> where</c><01:04:12.000><c> it</c>

01:04:12.080 --> 01:04:12.090 align:start position:0%
that even in a case like this where it
 

01:04:12.090 --> 01:04:13.700 align:start position:0%
that even in a case like this where it
looks<01:04:12.270><c> like</c><01:04:12.390><c> this</c><01:04:12.750><c> refactored</c><01:04:13.260><c> code</c><01:04:13.470><c> is</c>

01:04:13.700 --> 01:04:13.710 align:start position:0%
looks like this refactored code is
 

01:04:13.710 --> 01:04:14.700 align:start position:0%
looks like this refactored code is
really<01:04:14.130><c> horror</c>

01:04:14.700 --> 01:04:14.710 align:start position:0%
really horror
 

01:04:14.710 --> 01:04:16.560 align:start position:0%
really horror
performance<01:04:15.250><c> compared</c><01:04:15.970><c> to</c><01:04:16.060><c> the</c><01:04:16.150><c> original</c>

01:04:16.560 --> 01:04:16.570 align:start position:0%
performance compared to the original
 

01:04:16.570 --> 01:04:19.440 align:start position:0%
performance compared to the original
code<01:04:16.810><c> I</c><01:04:17.160><c> did</c><01:04:18.160><c> say</c><01:04:18.369><c> it</c><01:04:18.400><c> earlier</c><01:04:18.790><c> but</c><01:04:18.940><c> it's</c><01:04:19.300><c> worth</c>

01:04:19.440 --> 01:04:19.450 align:start position:0%
code I did say it earlier but it's worth
 

01:04:19.450 --> 01:04:22.140 align:start position:0%
code I did say it earlier but it's worth
reiterating<01:04:20.310><c> micro</c><01:04:21.310><c> benchmarks</c><01:04:21.849><c> like</c><01:04:21.970><c> this</c>

01:04:22.140 --> 01:04:22.150 align:start position:0%
reiterating micro benchmarks like this
 

01:04:22.150 --> 01:04:24.060 align:start position:0%
reiterating micro benchmarks like this
don't<01:04:22.540><c> necessarily</c><01:04:23.230><c> mean</c><01:04:23.470><c> that</c><01:04:23.500><c> your</c>

01:04:24.060 --> 01:04:24.070 align:start position:0%
don't necessarily mean that your
 

01:04:24.070 --> 01:04:26.280 align:start position:0%
don't necessarily mean that your
application<01:04:24.940><c> is</c><01:04:25.060><c> going</c><01:04:25.119><c> to</c><01:04:25.540><c> perform</c><01:04:25.810><c> slower</c>

01:04:26.280 --> 01:04:26.290 align:start position:0%
application is going to perform slower
 

01:04:26.290 --> 01:04:28.680 align:start position:0%
application is going to perform slower
if<01:04:26.650><c> you</c><01:04:27.040><c> do</c><01:04:27.160><c> this</c><01:04:27.339><c> refactoring</c><01:04:27.880><c> because</c><01:04:28.599><c> in</c>

01:04:28.680 --> 01:04:28.690 align:start position:0%
if you do this refactoring because in
 

01:04:28.690 --> 01:04:29.849 align:start position:0%
if you do this refactoring because in
the<01:04:28.780><c> grand</c><01:04:28.930><c> scheme</c><01:04:29.140><c> of</c><01:04:29.290><c> things</c><01:04:29.440><c> your</c>

01:04:29.849 --> 01:04:29.859 align:start position:0%
the grand scheme of things your
 

01:04:29.859 --> 01:04:31.380 align:start position:0%
the grand scheme of things your
application<01:04:30.400><c> does</c><01:04:30.580><c> a</c><01:04:30.609><c> lot</c><01:04:30.820><c> of</c><01:04:30.940><c> other</c><01:04:31.089><c> things</c>

01:04:31.380 --> 01:04:31.390 align:start position:0%
application does a lot of other things
 

01:04:31.390 --> 01:04:33.089 align:start position:0%
application does a lot of other things
it<01:04:31.599><c> talks</c><01:04:31.900><c> to</c><01:04:32.080><c> other</c><01:04:32.230><c> services</c><01:04:32.710><c> and</c><01:04:32.980><c> network</c>

01:04:33.089 --> 01:04:33.099 align:start position:0%
it talks to other services and network
 

01:04:33.099 --> 01:04:35.070 align:start position:0%
it talks to other services and network
cords<01:04:33.640><c> are</c><01:04:33.730><c> expensive</c><01:04:34.270><c> you</c><01:04:34.480><c> know</c><01:04:34.599><c> it</c><01:04:34.690><c> talks</c><01:04:34.839><c> to</c>

01:04:35.070 --> 01:04:35.080 align:start position:0%
cords are expensive you know it talks to
 

01:04:35.080 --> 01:04:38.329 align:start position:0%
cords are expensive you know it talks to
databases<01:04:35.560><c> it</c><01:04:36.030><c> has</c><01:04:37.030><c> to</c><01:04:37.150><c> respond</c><01:04:37.510><c> to</c><01:04:37.630><c> the</c><01:04:37.720><c> user</c>

01:04:38.329 --> 01:04:38.339 align:start position:0%
databases it has to respond to the user
 

01:04:38.339 --> 01:04:40.200 align:start position:0%
databases it has to respond to the user
there's<01:04:39.339><c> all</c><01:04:39.520><c> sorts</c><01:04:39.820><c> of</c><01:04:39.880><c> other</c><01:04:40.060><c> stuff</c>

01:04:40.200 --> 01:04:40.210 align:start position:0%
there's all sorts of other stuff
 

01:04:40.210 --> 01:04:41.700 align:start position:0%
there's all sorts of other stuff
happening<01:04:40.660><c> as</c><01:04:40.780><c> lots</c><01:04:40.930><c> of</c><01:04:40.990><c> interactions</c>

01:04:41.700 --> 01:04:41.710 align:start position:0%
happening as lots of interactions
 

01:04:41.710 --> 01:04:44.550 align:start position:0%
happening as lots of interactions
between<01:04:41.830><c> things</c><01:04:42.400><c> so</c><01:04:43.030><c> the</c><01:04:43.450><c> fact</c><01:04:43.660><c> that</c><01:04:43.780><c> these</c>

01:04:44.550 --> 01:04:44.560 align:start position:0%
between things so the fact that these
 

01:04:44.560 --> 01:04:46.440 align:start position:0%
between things so the fact that these
three<01:04:44.980><c> lines</c><01:04:45.280><c> of</c><01:04:45.460><c> code</c><01:04:45.520><c> or</c><01:04:45.910><c> whatever</c><01:04:46.119><c> don't</c>

01:04:46.440 --> 01:04:46.450 align:start position:0%
three lines of code or whatever don't
 

01:04:46.450 --> 01:04:48.480 align:start position:0%
three lines of code or whatever don't
perform<01:04:46.750><c> quite</c><01:04:47.290><c> as</c><01:04:47.470><c> fast</c><01:04:47.740><c> as</c><01:04:47.950><c> the</c><01:04:48.070><c> original</c>

01:04:48.480 --> 01:04:48.490 align:start position:0%
perform quite as fast as the original
 

01:04:48.490 --> 01:04:51.660 align:start position:0%
perform quite as fast as the original
lines<01:04:48.670><c> of</c><01:04:48.820><c> code</c><01:04:49.089><c> may</c><01:04:49.869><c> not</c><01:04:50.140><c> have</c><01:04:50.349><c> any</c><01:04:50.530><c> impact</c><01:04:51.310><c> on</c>

01:04:51.660 --> 01:04:51.670 align:start position:0%
lines of code may not have any impact on
 

01:04:51.670 --> 01:04:52.890 align:start position:0%
lines of code may not have any impact on
the<01:04:51.730><c> overall</c><01:04:51.940><c> performance</c><01:04:52.240><c> of</c><01:04:52.839><c> your</c>

01:04:52.890 --> 01:04:52.900 align:start position:0%
the overall performance of your
 

01:04:52.900 --> 01:04:54.839 align:start position:0%
the overall performance of your
application<01:04:53.560><c> as</c><01:04:53.740><c> well</c><01:04:53.890><c> and</c><01:04:54.280><c> you</c><01:04:54.369><c> might</c><01:04:54.520><c> find</c>

01:04:54.839 --> 01:04:54.849 align:start position:0%
application as well and you might find
 

01:04:54.849 --> 01:04:56.130 align:start position:0%
application as well and you might find
that<01:04:55.089><c> some</c><01:04:55.390><c> of</c><01:04:55.480><c> the</c><01:04:55.540><c> improvements</c><01:04:55.810><c> around</c>

01:04:56.130 --> 01:04:56.140 align:start position:0%
that some of the improvements around
 

01:04:56.140 --> 01:04:58.349 align:start position:0%
that some of the improvements around
things<01:04:56.500><c> like</c><01:04:56.589><c> garbage</c><01:04:57.430><c> collections</c><01:04:57.940><c> and</c><01:04:58.240><c> the</c>

01:04:58.349 --> 01:04:58.359 align:start position:0%
things like garbage collections and the
 

01:04:58.359 --> 01:05:00.720 align:start position:0%
things like garbage collections and the
improvements<01:04:58.869><c> around</c><01:04:58.990><c> the</c><01:04:59.710><c> disputer</c><01:05:00.490><c> some</c><01:05:00.670><c> of</c>

01:05:00.720 --> 01:05:00.730 align:start position:0%
improvements around the disputer some of
 

01:05:00.730 --> 01:05:01.980 align:start position:0%
improvements around the disputer some of
the<01:05:00.790><c> collections</c><01:05:01.210><c> that</c><01:05:01.330><c> you're</c><01:05:01.540><c> using</c>

01:05:01.980 --> 01:05:01.990 align:start position:0%
the collections that you're using
 

01:05:01.990 --> 01:05:05.370 align:start position:0%
the collections that you're using
they<01:05:02.560><c> might</c><01:05:02.800><c> offset</c><01:05:03.040><c> some</c><01:05:04.000><c> of</c><01:05:04.150><c> these</c><01:05:04.380><c> these</c>

01:05:05.370 --> 01:05:05.380 align:start position:0%
they might offset some of these these
 

01:05:05.380 --> 01:05:07.859 align:start position:0%
they might offset some of these these
performance<01:05:06.150><c> tests</c><01:05:07.150><c> which</c><01:05:07.330><c> show</c><01:05:07.599><c> that</c><01:05:07.630><c> the</c>

01:05:07.859 --> 01:05:07.869 align:start position:0%
performance tests which show that the
 

01:05:07.869 --> 01:05:09.690 align:start position:0%
performance tests which show that the
performance<01:05:08.349><c> isn't</c><01:05:08.500><c> quite</c><01:05:08.859><c> as</c><01:05:08.980><c> good</c><01:05:09.190><c> so</c><01:05:09.609><c> you</c>

01:05:09.690 --> 01:05:09.700 align:start position:0%
performance isn't quite as good so you
 

01:05:09.700 --> 01:05:11.250 align:start position:0%
performance isn't quite as good so you
need<01:05:09.880><c> to</c><01:05:10.000><c> measure</c><01:05:10.150><c> stuff</c><01:05:10.480><c> in</c><01:05:10.660><c> the</c><01:05:10.750><c> overall</c>

01:05:11.250 --> 01:05:11.260 align:start position:0%
need to measure stuff in the overall
 

01:05:11.260 --> 01:05:13.079 align:start position:0%
need to measure stuff in the overall
scope<01:05:11.650><c> of</c><01:05:11.890><c> your</c><01:05:12.010><c> whole</c><01:05:12.220><c> application</c><01:05:12.880><c> not</c><01:05:13.030><c> just</c>

01:05:13.079 --> 01:05:13.089 align:start position:0%
scope of your whole application not just
 

01:05:13.089 --> 01:05:17.910 align:start position:0%
scope of your whole application not just
these<01:05:13.420><c> micro</c><01:05:13.810><c> benchmarks</c><01:05:15.570><c> okay</c><01:05:16.740><c> one</c><01:05:17.740><c> more</c>

01:05:17.910 --> 01:05:17.920 align:start position:0%
these micro benchmarks okay one more
 

01:05:17.920 --> 01:05:20.490 align:start position:0%
these micro benchmarks okay one more
question<01:05:17.980><c> what</c><01:05:18.460><c> about</c><01:05:19.290><c> performance</c><01:05:20.290><c> of</c>

01:05:20.490 --> 01:05:20.500 align:start position:0%
question what about performance of
 

01:05:20.500 --> 01:05:24.030 align:start position:0%
question what about performance of
Flanders<01:05:21.070><c> and</c><01:05:21.310><c> any</c><01:05:21.670><c> miss</c><01:05:22.359><c> pross's</c><01:05:22.859><c> island</c><01:05:23.859><c> is</c>

01:05:24.030 --> 01:05:24.040 align:start position:0%
Flanders and any miss pross's island is
 

01:05:24.040 --> 01:05:26.070 align:start position:0%
Flanders and any miss pross's island is
bad<01:05:24.280><c> or</c><01:05:24.490><c> good</c><01:05:24.670><c> for</c><01:05:24.940><c> performance</c><01:05:25.570><c> or</c><01:05:25.780><c> it</c>

01:05:26.070 --> 01:05:26.080 align:start position:0%
bad or good for performance or it
 

01:05:26.080 --> 01:05:28.079 align:start position:0%
bad or good for performance or it
depends<01:05:26.619><c> on</c><01:05:26.680><c> how</c><01:05:26.920><c> we</c><01:05:26.980><c> implement</c><01:05:27.580><c> them</c><01:05:27.760><c> it</c>

01:05:28.079 --> 01:05:28.089 align:start position:0%
depends on how we implement them it
 

01:05:28.089 --> 01:05:30.150 align:start position:0%
depends on how we implement them it
seems<01:05:28.359><c> like</c><01:05:28.570><c> it's</c><01:05:28.780><c> all</c><01:05:28.990><c> about</c><01:05:29.290><c> readable</c><01:05:29.890><c> code</c>

01:05:30.150 --> 01:05:30.160 align:start position:0%
seems like it's all about readable code
 

01:05:30.160 --> 01:05:33.570 align:start position:0%
seems like it's all about readable code
versus<01:05:30.820><c> better</c><01:05:31.180><c> performance</c><01:05:32.099><c> it</c><01:05:33.099><c> does</c><01:05:33.280><c> feel</c><01:05:33.550><c> a</c>

01:05:33.570 --> 01:05:33.580 align:start position:0%
versus better performance it does feel a
 

01:05:33.580 --> 01:05:36.270 align:start position:0%
versus better performance it does feel a
bit<01:05:33.790><c> like</c><01:05:33.910><c> that</c><01:05:33.940><c> the</c><01:05:34.660><c> I</c><01:05:35.200><c> would</c><01:05:35.770><c> say</c><01:05:35.950><c> that</c><01:05:36.099><c> the</c>

01:05:36.270 --> 01:05:36.280 align:start position:0%
bit like that the I would say that the
 

01:05:36.280 --> 01:05:38.700 align:start position:0%
bit like that the I would say that the
world<01:05:36.609><c> so</c><01:05:36.849><c> my</c><01:05:37.030><c> example</c><01:05:37.150><c> is</c><01:05:37.570><c> the</c><01:05:37.690><c> lambda</c><01:05:37.900><c> of</c>

01:05:38.700 --> 01:05:38.710 align:start position:0%
world so my example is the lambda of
 

01:05:38.710 --> 01:05:41.910 align:start position:0%
world so my example is the lambda of
using<01:05:39.099><c> the</c><01:05:39.160><c> lambda</c><01:05:39.430><c> expressions</c><01:05:40.680><c> let's</c><01:05:41.680><c> go</c>

01:05:41.910 --> 01:05:41.920 align:start position:0%
using the lambda expressions let's go
 

01:05:41.920 --> 01:05:46.589 align:start position:0%
using the lambda expressions let's go
back<01:05:44.490><c> my</c><01:05:45.490><c> lambda</c><01:05:45.700><c> expressions</c><01:05:46.210><c> performed</c>

01:05:46.589 --> 01:05:46.599 align:start position:0%
back my lambda expressions performed
 

01:05:46.599 --> 01:05:50.490 align:start position:0%
back my lambda expressions performed
better<01:05:46.920><c> so</c><01:05:47.920><c> in</c><01:05:48.910><c> a</c><01:05:49.150><c> whole</c><01:05:49.540><c> bunch</c><01:05:49.750><c> of</c><01:05:49.930><c> cases</c><01:05:50.230><c> in</c>

01:05:50.490 --> 01:05:50.500 align:start position:0%
better so in a whole bunch of cases in
 

01:05:50.500 --> 01:05:53.070 align:start position:0%
better so in a whole bunch of cases in
this<01:05:50.730><c> report</c><01:05:51.730><c> here</c><01:05:52.030><c> there's</c><01:05:52.690><c> a</c><01:05:52.750><c> whole</c><01:05:52.869><c> bunch</c>

01:05:53.070 --> 01:05:53.080 align:start position:0%
this report here there's a whole bunch
 

01:05:53.080 --> 01:05:55.079 align:start position:0%
this report here there's a whole bunch
of<01:05:53.200><c> cases</c><01:05:53.589><c> where</c><01:05:53.890><c> the</c><01:05:54.310><c> lambda</c><01:05:54.640><c> expressions</c>

01:05:55.079 --> 01:05:55.089 align:start position:0%
of cases where the lambda expressions
 

01:05:55.089 --> 01:05:57.599 align:start position:0%
of cases where the lambda expressions
perform<01:05:55.540><c> better</c><01:05:55.869><c> than</c><01:05:56.680><c> the</c><01:05:56.740><c> anonymous</c><01:05:57.339><c> types</c>

01:05:57.599 --> 01:05:57.609 align:start position:0%
perform better than the anonymous types
 

01:05:57.609 --> 01:05:59.670 align:start position:0%
perform better than the anonymous types
so<01:05:58.240><c> you</c><01:05:58.300><c> get</c><01:05:58.510><c> increased</c><01:05:58.990><c> readability</c><01:05:59.349><c> and</c>

01:05:59.670 --> 01:05:59.680 align:start position:0%
so you get increased readability and
 

01:05:59.680 --> 01:06:01.650 align:start position:0%
so you get increased readability and
better<01:06:00.250><c> performance</c><01:06:00.460><c> I</c><01:06:00.880><c> actually</c><01:06:01.240><c> had</c><01:06:01.540><c> to</c>

01:06:01.650 --> 01:06:01.660 align:start position:0%
better performance I actually had to
 

01:06:01.660 --> 01:06:03.690 align:start position:0%
better performance I actually had to
search<01:06:01.839><c> through</c><01:06:02.080><c> this</c><01:06:02.230><c> document</c><01:06:02.410><c> to</c><01:06:02.710><c> find</c><01:06:02.950><c> one</c>

01:06:03.690 --> 01:06:03.700 align:start position:0%
search through this document to find one
 

01:06:03.700 --> 01:06:05.339 align:start position:0%
search through this document to find one
example<01:06:03.820><c> where</c><01:06:04.660><c> the</c><01:06:04.750><c> lambda</c><01:06:04.990><c> expression</c>

01:06:05.339 --> 01:06:05.349 align:start position:0%
example where the lambda expression
 

01:06:05.349 --> 01:06:06.900 align:start position:0%
example where the lambda expression
didn't<01:06:05.619><c> perform</c><01:06:05.920><c> quite</c><01:06:06.160><c> as</c><01:06:06.369><c> well</c><01:06:06.520><c> as</c><01:06:06.670><c> one</c><01:06:06.880><c> of</c>

01:06:06.900 --> 01:06:06.910 align:start position:0%
didn't perform quite as well as one of
 

01:06:06.910 --> 01:06:09.270 align:start position:0%
didn't perform quite as well as one of
the<01:06:07.089><c> anonymous</c><01:06:07.450><c> inner</c><01:06:07.630><c> types</c><01:06:07.869><c> so</c><01:06:08.530><c> for</c><01:06:09.130><c> lambda</c>

01:06:09.270 --> 01:06:09.280 align:start position:0%
the anonymous inner types so for lambda
 

01:06:09.280 --> 01:06:11.609 align:start position:0%
the anonymous inner types so for lambda
expressions<01:06:09.730><c> in</c><01:06:09.880><c> particular</c><01:06:10.150><c> they</c><01:06:10.869><c> are</c><01:06:10.900><c> an</c>

01:06:11.609 --> 01:06:11.619 align:start position:0%
expressions in particular they are an
 

01:06:11.619 --> 01:06:13.349 align:start position:0%
expressions in particular they are an
Oracle<01:06:12.310><c> which</c><01:06:12.460><c> really</c><01:06:12.820><c> hard</c><01:06:13.000><c> to</c><01:06:13.180><c> make</c><01:06:13.330><c> sure</c>

01:06:13.349 --> 01:06:13.359 align:start position:0%
Oracle which really hard to make sure
 

01:06:13.359 --> 01:06:15.450 align:start position:0%
Oracle which really hard to make sure
that<01:06:13.630><c> they</c><01:06:13.780><c> were</c><01:06:13.839><c> no</c><01:06:14.230><c> worse</c><01:06:14.530><c> in</c><01:06:14.890><c> performance</c>

01:06:15.450 --> 01:06:15.460 align:start position:0%
that they were no worse in performance
 

01:06:15.460 --> 01:06:17.490 align:start position:0%
that they were no worse in performance
than<01:06:15.820><c> anonymous</c><01:06:16.150><c> types</c><01:06:16.630><c> and</c><01:06:16.960><c> they're</c><01:06:17.290><c> often</c>

01:06:17.490 --> 01:06:17.500 align:start position:0%
than anonymous types and they're often
 

01:06:17.500 --> 01:06:19.410 align:start position:0%
than anonymous types and they're often
better<01:06:17.830><c> and</c><01:06:18.220><c> as</c><01:06:18.460><c> I</c><01:06:18.580><c> said</c><01:06:18.640><c> the</c><01:06:18.880><c> performance</c><01:06:19.330><c> of</c>

01:06:19.410 --> 01:06:19.420 align:start position:0%
better and as I said the performance of
 

01:06:19.420 --> 01:06:21.120 align:start position:0%
better and as I said the performance of
these<01:06:19.510><c> is</c><01:06:19.720><c> getting</c><01:06:19.990><c> better</c><01:06:20.170><c> as</c><01:06:20.500><c> well</c><01:06:20.680><c> because</c>

01:06:21.120 --> 01:06:21.130 align:start position:0%
these is getting better as well because
 

01:06:21.130 --> 01:06:26.820 align:start position:0%
these is getting better as well because
of<01:06:21.930><c> optimizations</c><01:06:22.930><c> to</c><01:06:23.260><c> the</c><01:06:23.470><c> JVM</c><01:06:23.920><c> itself</c><01:06:25.830><c> yeah</c>

01:06:26.820 --> 01:06:26.830 align:start position:0%
of optimizations to the JVM itself yeah
 

01:06:26.830 --> 01:06:27.660 align:start position:0%
of optimizations to the JVM itself yeah
thanks

01:06:27.660 --> 01:06:27.670 align:start position:0%
thanks
 

01:06:27.670 --> 01:06:33.930 align:start position:0%
thanks
um<01:06:29.130><c> when</c><01:06:31.320><c> question</c><01:06:32.320><c> hint</c><01:06:33.250><c> results</c><01:06:33.790><c> or</c>

01:06:33.930 --> 01:06:33.940 align:start position:0%
um when question hint results or
 

01:06:33.940 --> 01:06:36.480 align:start position:0%
um when question hint results or
parallel<01:06:34.420><c> are</c><01:06:34.570><c> calculated</c><01:06:35.470><c> in</c><01:06:35.650><c> isolation</c>

01:06:36.480 --> 01:06:36.490 align:start position:0%
parallel are calculated in isolation
 

01:06:36.490 --> 01:06:40.200 align:start position:0%
parallel are calculated in isolation
would<01:06:37.390><c> it</c><01:06:37.570><c> make</c><01:06:37.780><c> a</c><01:06:38.020><c> difference</c><01:06:38.080><c> if</c><01:06:39.040><c> we</c><01:06:39.310><c> do</c><01:06:39.580><c> do</c>

01:06:40.200 --> 01:06:40.210 align:start position:0%
would it make a difference if we do do
 

01:06:40.210 --> 01:06:43.320 align:start position:0%
would it make a difference if we do do
parallel<01:06:40.780><c> in</c><01:06:40.990><c> collection</c><01:06:41.830><c> of</c><01:06:42.010><c> app</c><01:06:42.250><c> I</c><01:06:42.640><c> guess</c>

01:06:43.320 --> 01:06:43.330 align:start position:0%
parallel in collection of app I guess
 

01:06:43.330 --> 01:06:46.250 align:start position:0%
parallel in collection of app I guess
then<01:06:43.660><c> with</c><01:06:44.020><c> parallel</c><01:06:44.620><c> I</c><01:06:44.830><c> might</c><01:06:45.460><c> begin</c>

01:06:46.250 --> 01:06:46.260 align:start position:0%
then with parallel I might begin
 

01:06:46.260 --> 01:06:49.230 align:start position:0%
then with parallel I might begin
consuming<01:06:47.260><c> or</c><01:06:47.440><c> using</c><01:06:48.040><c> threads</c><01:06:48.400><c> that</c><01:06:48.970><c> could</c>

01:06:49.230 --> 01:06:49.240 align:start position:0%
consuming or using threads that could
 

01:06:49.240 --> 01:06:54.120 align:start position:0%
consuming or using threads that could
have<01:06:49.630><c> been</c><01:06:49.930><c> used</c><01:06:50.260><c> for</c><01:06:50.650><c> other</c><01:06:50.890><c> operations</c><01:06:53.130><c> I'm</c>

01:06:54.120 --> 01:06:54.130 align:start position:0%
have been used for other operations I'm
 

01:06:54.130 --> 01:07:00.090 align:start position:0%
have been used for other operations I'm
not<01:06:54.310><c> sure</c><01:06:54.880><c> if</c><01:06:55.090><c> that</c><01:06:55.300><c> is</c><01:06:56.310><c> what</c><01:06:57.540><c> can</c><01:06:58.540><c> I</c><01:06:58.920><c> notice</c><01:06:59.920><c> I</c>

01:07:00.090 --> 01:07:00.100 align:start position:0%
not sure if that is what can I notice I
 

01:07:00.100 --> 01:07:02.400 align:start position:0%
not sure if that is what can I notice I
quite<01:07:00.580><c> understand</c><01:07:01.420><c> because</c><01:07:01.600><c> if</c><01:07:01.840><c> the</c><01:07:01.960><c> question</c>

01:07:02.400 --> 01:07:02.410 align:start position:0%
quite understand because if the question
 

01:07:02.410 --> 01:07:04.980 align:start position:0%
quite understand because if the question
is<01:07:02.670><c> running</c><01:07:03.670><c> parallel</c><01:07:03.910><c> in</c><01:07:04.390><c> production</c>

01:07:04.980 --> 01:07:04.990 align:start position:0%
is running parallel in production
 

01:07:04.990 --> 01:07:07.890 align:start position:0%
is running parallel in production
different<01:07:05.650><c> to</c><01:07:05.860><c> running</c><01:07:06.340><c> parallel</c><01:07:07.180><c> in</c><01:07:07.450><c> these</c>

01:07:07.890 --> 01:07:07.900 align:start position:0%
different to running parallel in these
 

01:07:07.900 --> 01:07:16.970 align:start position:0%
different to running parallel in these
tests<01:07:09.540><c> as</c><01:07:11.340><c> I</c><01:07:12.340><c> understood</c><01:07:12.910><c> the</c><01:07:13.090><c> question</c><01:07:14.460><c> it</c><01:07:15.460><c> is</c>

01:07:16.970 --> 01:07:16.980 align:start position:0%
tests as I understood the question it is
 

01:07:16.980 --> 01:07:21.210 align:start position:0%
tests as I understood the question it is
let's<01:07:17.980><c> say</c><01:07:18.250><c> we</c><01:07:18.580><c> we</c><01:07:19.270><c> use</c><01:07:19.450><c> parallel</c><01:07:20.020><c> so</c><01:07:20.320><c> we</c><01:07:20.590><c> need</c>

01:07:21.210 --> 01:07:21.220 align:start position:0%
let's say we we use parallel so we need
 

01:07:21.220 --> 01:07:28.710 align:start position:0%
let's say we we use parallel so we need
to<01:07:21.520><c> use</c><01:07:21.760><c> leverage</c><01:07:22.540><c> other</c><01:07:22.960><c> threads</c><01:07:23.620><c> and</c><01:07:27.600><c> so</c><01:07:28.600><c> we</c>

01:07:28.710 --> 01:07:28.720 align:start position:0%
to use leverage other threads and so we
 

01:07:28.720 --> 01:07:32.280 align:start position:0%
to use leverage other threads and so we
wonder<01:07:29.140><c> if</c><01:07:29.350><c> we</c><01:07:29.760><c> affect</c><01:07:30.760><c> the</c><01:07:31.360><c> performance</c><01:07:31.720><c> of</c>

01:07:32.280 --> 01:07:32.290 align:start position:0%
wonder if we affect the performance of
 

01:07:32.290 --> 01:07:36.260 align:start position:0%
wonder if we affect the performance of
the<01:07:32.470><c> application</c><01:07:34.140><c> by</c><01:07:35.140><c> doing</c><01:07:35.470><c> that</c>

01:07:36.260 --> 01:07:36.270 align:start position:0%
the application by doing that
 

01:07:36.270 --> 01:07:40.770 align:start position:0%
the application by doing that
considering<01:07:37.270><c> we</c><01:07:37.480><c> consumed</c><01:07:38.170><c> the</c><01:07:38.770><c> thread</c><01:07:39.780><c> which</c>

01:07:40.770 --> 01:07:40.780 align:start position:0%
considering we consumed the thread which
 

01:07:40.780 --> 01:07:46.650 align:start position:0%
considering we consumed the thread which
could<01:07:41.110><c> be</c><01:07:41.290><c> used</c><01:07:41.560><c> for</c><01:07:41.770><c> a</c><01:07:41.980><c> bit</c><01:07:42.840><c> operation</c><01:07:43.840><c> I</c><01:07:45.660><c> I</c>

01:07:46.650 --> 01:07:46.660 align:start position:0%
could be used for a bit operation I I
 

01:07:46.660 --> 01:07:50.790 align:start position:0%
could be used for a bit operation I I
don't<01:07:47.020><c> think</c><01:07:47.500><c> it</c><01:07:48.220><c> works</c><01:07:48.640><c> that</c><01:07:48.940><c> way</c><01:07:49.590><c> maybe</c><01:07:50.590><c> I'm</c>

01:07:50.790 --> 01:07:50.800 align:start position:0%
don't think it works that way maybe I'm
 

01:07:50.800 --> 01:07:55.130 align:start position:0%
don't think it works that way maybe I'm
misunderstanding<01:07:51.070><c> the</c><01:07:51.580><c> question</c><01:07:51.940><c> but</c><01:07:54.090><c> what</c>

01:07:55.130 --> 01:07:55.140 align:start position:0%
misunderstanding the question but what
 

01:07:55.140 --> 01:07:58.230 align:start position:0%
misunderstanding the question but what
what<01:07:56.140><c> parallel</c><01:07:56.590><c> is</c><01:07:56.860><c> doing</c><01:07:57.400><c> is</c><01:07:57.520><c> under</c><01:07:57.880><c> covers</c>

01:07:58.230 --> 01:07:58.240 align:start position:0%
what parallel is doing is under covers
 

01:07:58.240 --> 01:08:00.930 align:start position:0%
what parallel is doing is under covers
it<01:07:58.420><c> uses</c><01:07:58.780><c> the</c><01:07:58.900><c> fork/join</c><01:07:59.440><c> framework</c><01:08:00.040><c> so</c><01:08:00.610><c> it</c>

01:08:00.930 --> 01:08:00.940 align:start position:0%
it uses the fork/join framework so it
 

01:08:00.940 --> 01:08:03.090 align:start position:0%
it uses the fork/join framework so it
will<01:08:01.180><c> be</c><01:08:01.390><c> spinning</c><01:08:01.900><c> up</c><01:08:02.170><c> if</c><01:08:02.380><c> you</c><01:08:02.500><c> like</c><01:08:02.680><c> its</c><01:08:02.920><c> own</c>

01:08:03.090 --> 01:08:03.100 align:start position:0%
will be spinning up if you like its own
 

01:08:03.100 --> 01:08:06.480 align:start position:0%
will be spinning up if you like its own
threads<01:08:04.060><c> and</c><01:08:04.590><c> running</c><01:08:05.590><c> the</c><01:08:06.040><c> whole</c><01:08:06.190><c> point</c><01:08:06.460><c> of</c>

01:08:06.480 --> 01:08:06.490 align:start position:0%
threads and running the whole point of
 

01:08:06.490 --> 01:08:08.540 align:start position:0%
threads and running the whole point of
that<01:08:06.550><c> parallel</c><01:08:07.060><c> is</c><01:08:07.210><c> to</c><01:08:07.420><c> run</c><01:08:07.630><c> the</c><01:08:07.780><c> work</c><01:08:07.990><c> on</c>

01:08:08.540 --> 01:08:08.550 align:start position:0%
that parallel is to run the work on
 

01:08:08.550 --> 01:08:12.450 align:start position:0%
that parallel is to run the work on
individual<01:08:09.600><c> CPUs</c><01:08:10.600><c> or</c><01:08:10.990><c> cause</c><01:08:11.920><c> and</c><01:08:12.250><c> a</c><01:08:12.310><c> few</c>

01:08:12.450 --> 01:08:12.460 align:start position:0%
individual CPUs or cause and a few
 

01:08:12.460 --> 01:08:15.060 align:start position:0%
individual CPUs or cause and a few
physical<01:08:12.760><c> CPUs</c><01:08:13.330><c> so</c><01:08:13.960><c> for</c><01:08:14.410><c> example</c><01:08:14.740><c> on</c><01:08:14.890><c> my</c>

01:08:15.060 --> 01:08:15.070 align:start position:0%
physical CPUs so for example on my
 

01:08:15.070 --> 01:08:17.400 align:start position:0%
physical CPUs so for example on my
macbook<01:08:15.340><c> I</c><01:08:15.700><c> can</c><01:08:15.970><c> get</c><01:08:16.180><c> parallel</c><01:08:16.660><c> to</c><01:08:16.840><c> use</c><01:08:17.050><c> four</c>

01:08:17.400 --> 01:08:17.410 align:start position:0%
macbook I can get parallel to use four
 

01:08:17.410 --> 01:08:20.870 align:start position:0%
macbook I can get parallel to use four
cores<01:08:17.970><c> nice</c><01:08:18.970><c> and</c><01:08:19.270><c> easily</c><01:08:19.660><c> and</c><01:08:19.960><c> just</c><01:08:20.140><c> basically</c>

01:08:20.870 --> 01:08:20.880 align:start position:0%
cores nice and easily and just basically
 

01:08:20.880 --> 01:08:23.730 align:start position:0%
cores nice and easily and just basically
make<01:08:21.880><c> the</c><01:08:22.090><c> most</c><01:08:22.240><c> out</c><01:08:22.480><c> the</c><01:08:22.720><c> hardware</c><01:08:23.290><c> that's</c>

01:08:23.730 --> 01:08:23.740 align:start position:0%
make the most out the hardware that's
 

01:08:23.740 --> 01:08:24.930 align:start position:0%
make the most out the hardware that's
the<01:08:23.860><c> point</c><01:08:24.010><c> about</c><01:08:24.250><c> parallel</c><01:08:24.580><c> to</c><01:08:24.700><c> make</c><01:08:24.850><c> the</c>

01:08:24.930 --> 01:08:24.940 align:start position:0%
the point about parallel to make the
 

01:08:24.940 --> 01:08:26.910 align:start position:0%
the point about parallel to make the
most<01:08:25.120><c> of</c><01:08:25.270><c> the</c><01:08:25.360><c> hardware</c><01:08:25.630><c> now</c><01:08:26.380><c> of</c><01:08:26.500><c> course</c><01:08:26.650><c> if</c>

01:08:26.910 --> 01:08:26.920 align:start position:0%
most of the hardware now of course if
 

01:08:26.920 --> 01:08:29.640 align:start position:0%
most of the hardware now of course if
you've<01:08:27.340><c> got</c><01:08:27.690><c> parallel</c><01:08:28.690><c> threads</c><01:08:29.110><c> making</c><01:08:29.530><c> the</c>

01:08:29.640 --> 01:08:29.650 align:start position:0%
you've got parallel threads making the
 

01:08:29.650 --> 01:08:32.280 align:start position:0%
you've got parallel threads making the
most<01:08:29.860><c> of</c><01:08:30.070><c> all</c><01:08:30.310><c> of</c><01:08:30.460><c> the</c><01:08:30.520><c> CPUs</c><01:08:31.090><c> it</c><01:08:31.660><c> could</c><01:08:32.050><c> be</c>

01:08:32.280 --> 01:08:32.290 align:start position:0%
most of all of the CPUs it could be
 

01:08:32.290 --> 01:08:34.890 align:start position:0%
most of all of the CPUs it could be
pushing<01:08:32.620><c> other</c><01:08:33.010><c> threads</c><01:08:33.490><c> off</c><01:08:33.790><c> the</c><01:08:34.240><c> CPU</c><01:08:34.660><c> so</c>

01:08:34.890 --> 01:08:34.900 align:start position:0%
pushing other threads off the CPU so
 

01:08:34.900 --> 01:08:36.420 align:start position:0%
pushing other threads off the CPU so
they<01:08:34.990><c> don't</c><01:08:35.170><c> get</c><01:08:35.260><c> any</c><01:08:35.410><c> time</c><01:08:35.620><c> I</c><01:08:35.860><c> don't</c><01:08:35.980><c> really</c>

01:08:36.420 --> 01:08:36.430 align:start position:0%
they don't get any time I don't really
 

01:08:36.430 --> 01:08:38.010 align:start position:0%
they don't get any time I don't really
know<01:08:36.610><c> how</c><01:08:36.760><c> to</c><01:08:36.790><c> scheduling</c><01:08:37.300><c> work</c><01:08:37.450><c> underneath</c>

01:08:38.010 --> 01:08:38.020 align:start position:0%
know how to scheduling work underneath
 

01:08:38.020 --> 01:08:41.240 align:start position:0%
know how to scheduling work underneath
the<01:08:38.140><c> covers</c><01:08:38.500><c> but</c><01:08:39.250><c> you're</c><01:08:39.430><c> not</c><01:08:39.640><c> going</c><01:08:39.970><c> to</c><01:08:40.120><c> be</c>

01:08:41.240 --> 01:08:41.250 align:start position:0%
the covers but you're not going to be
 

01:08:41.250 --> 01:08:44.910 align:start position:0%
the covers but you're not going to be
it's<01:08:42.250><c> not</c><01:08:42.520><c> going</c><01:08:42.850><c> to</c><01:08:43.000><c> be</c><01:08:43.589><c> interfering</c><01:08:44.589><c> with</c>

01:08:44.910 --> 01:08:44.920 align:start position:0%
it's not going to be interfering with
 

01:08:44.920 --> 01:08:46.769 align:start position:0%
it's not going to be interfering with
data<01:08:45.219><c> on</c><01:08:45.400><c> other</c><01:08:45.790><c> thread</c><01:08:46.180><c> so</c><01:08:46.390><c> it's</c><01:08:46.509><c> not</c><01:08:46.630><c> going</c>

01:08:46.769 --> 01:08:46.779 align:start position:0%
data on other thread so it's not going
 

01:08:46.779 --> 01:08:49.370 align:start position:0%
data on other thread so it's not going
to<01:08:46.839><c> be</c><01:08:46.960><c> reusing</c><01:08:47.230><c> other</c><01:08:48.219><c> threads</c><01:08:49.000><c> and</c>

01:08:49.370 --> 01:08:49.380 align:start position:0%
to be reusing other threads and
 

01:08:49.380 --> 01:08:51.959 align:start position:0%
to be reusing other threads and
interfering<01:08:50.380><c> with</c><01:08:50.529><c> them</c><01:08:50.710><c> from</c><01:08:51.250><c> a</c><01:08:51.400><c> data</c><01:08:51.670><c> point</c>

01:08:51.959 --> 01:08:51.969 align:start position:0%
interfering with them from a data point
 

01:08:51.969 --> 01:08:53.760 align:start position:0%
interfering with them from a data point
of<01:08:52.150><c> view</c><01:08:52.270><c> it</c><01:08:52.480><c> might</c><01:08:52.660><c> be</c><01:08:52.750><c> feeling</c><01:08:53.020><c> the</c><01:08:53.200><c> CPU</c><01:08:53.589><c> away</c>

01:08:53.760 --> 01:08:53.770 align:start position:0%
of view it might be feeling the CPU away
 

01:08:53.770 --> 01:08:55.650 align:start position:0%
of view it might be feeling the CPU away
from<01:08:53.980><c> them</c><01:08:54.160><c> but</c><01:08:54.880><c> I</c><01:08:54.940><c> don't</c><01:08:55.210><c> believe</c><01:08:55.299><c> there's</c>

01:08:55.650 --> 01:08:55.660 align:start position:0%
from them but I don't believe there's
 

01:08:55.660 --> 01:08:57.090 align:start position:0%
from them but I don't believe there's
gonna<01:08:55.810><c> you</c><01:08:55.989><c> don't</c><01:08:56.140><c> have</c><01:08:56.259><c> to</c><01:08:56.380><c> worry</c><01:08:56.710><c> about</c>

01:08:57.090 --> 01:08:57.100 align:start position:0%
gonna you don't have to worry about
 

01:08:57.100 --> 01:09:03.749 align:start position:0%
gonna you don't have to worry about
things<01:08:57.520><c> like</c><01:08:57.670><c> a</c><01:09:00.719><c> about</c><01:09:01.719><c> thread</c><01:09:02.080><c> safety</c><01:09:02.410><c> in</c><01:09:02.920><c> the</c>

01:09:03.749 --> 01:09:03.759 align:start position:0%
things like a about thread safety in the
 

01:09:03.759 --> 01:09:08.390 align:start position:0%
things like a about thread safety in the
way<01:09:03.940><c> that</c><01:09:04.239><c> we</c><01:09:04.630><c> traditionally</c><01:09:05.170><c> had</c><01:09:05.440><c> to</c><01:09:06.480><c> yeah</c><01:09:07.480><c> I</c>

01:09:08.390 --> 01:09:08.400 align:start position:0%
way that we traditionally had to yeah I
 

01:09:08.400 --> 01:09:14.130 align:start position:0%
way that we traditionally had to yeah I
think<01:09:09.400><c> you</c><01:09:09.759><c> are</c><01:09:09.850><c> right</c><01:09:10.000><c> here</c><01:09:10.390><c> and</c><01:09:10.859><c> and</c><01:09:13.140><c> okay</c>

01:09:14.130 --> 01:09:14.140 align:start position:0%
think you are right here and and okay
 

01:09:14.140 --> 01:09:18.150 align:start position:0%
think you are right here and and okay
let's<01:09:14.770><c> move</c><01:09:15.190><c> closer</c><01:09:15.969><c> oh</c><01:09:16.859><c> there's</c><01:09:17.859><c> a</c><01:09:17.950><c> lot</c>

01:09:18.150 --> 01:09:18.160 align:start position:0%
let's move closer oh there's a lot
 

01:09:18.160 --> 01:09:21.240 align:start position:0%
let's move closer oh there's a lot
question<01:09:18.790><c> do</c><01:09:19.569><c> does</c><01:09:20.020><c> IntelliJ</c><01:09:20.529><c> IDEA</c><01:09:20.830><c> provide</c>

01:09:21.240 --> 01:09:21.250 align:start position:0%
question do does IntelliJ IDEA provide
 

01:09:21.250 --> 01:09:23.459 align:start position:0%
question do does IntelliJ IDEA provide
suggestions<01:09:21.790><c> to</c><01:09:22.210><c> refactor</c><01:09:22.569><c> from</c><01:09:23.140><c> near</c><01:09:23.440><c> the</c>

01:09:23.459 --> 01:09:23.469 align:start position:0%
suggestions to refactor from near the
 

01:09:23.469 --> 01:09:27.300 align:start position:0%
suggestions to refactor from near the
time<01:09:23.830><c> to</c><01:09:24.160><c> ja</c><01:09:24.370><c> a</c><01:09:24.640><c> time</c><01:09:25.089><c> API</c><01:09:25.569><c> so</c><01:09:25.930><c> I</c><01:09:25.960><c> could</c><01:09:26.950><c> try</c><01:09:27.279><c> to</c>

01:09:27.300 --> 01:09:27.310 align:start position:0%
time to ja a time API so I could try to
 

01:09:27.310 --> 01:09:30.450 align:start position:0%
time to ja a time API so I could try to
answer<01:09:27.730><c> the</c><01:09:28.150><c> question</c><01:09:28.650><c> enjoy</c><01:09:29.650><c> Delia</c><01:09:30.009><c> doesn't</c>

01:09:30.450 --> 01:09:30.460 align:start position:0%
answer the question enjoy Delia doesn't
 

01:09:30.460 --> 01:09:33.599 align:start position:0%
answer the question enjoy Delia doesn't
suggest<01:09:31.270><c> it</c><01:09:31.660><c> yet</c><01:09:32.109><c> there</c><01:09:32.799><c> is</c><01:09:32.920><c> an</c><01:09:33.069><c> issue</c><01:09:33.250><c> in</c>

01:09:33.599 --> 01:09:33.609 align:start position:0%
suggest it yet there is an issue in
 

01:09:33.609 --> 01:09:38.880 align:start position:0%
suggest it yet there is an issue in
issue<01:09:34.089><c> tracker</c><01:09:34.480><c> and</c><01:09:34.890><c> we</c><01:09:35.890><c> still</c><01:09:37.230><c> track</c><01:09:38.230><c> roads</c>

01:09:38.880 --> 01:09:38.890 align:start position:0%
issue tracker and we still track roads
 

01:09:38.890 --> 01:09:41.930 align:start position:0%
issue tracker and we still track roads
and<01:09:39.489><c> feel</c><01:09:40.150><c> free</c><01:09:40.299><c> to</c><01:09:40.359><c> go</c><01:09:40.900><c> through</c><01:09:41.170><c> it</c><01:09:41.350><c> and</c>

01:09:41.930 --> 01:09:41.940 align:start position:0%
and feel free to go through it and
 

01:09:41.940 --> 01:09:45.599 align:start position:0%
and feel free to go through it and
definitely<01:09:42.940><c> we</c><01:09:43.299><c> can</c><01:09:43.420><c> implement</c><01:09:43.810><c> that</c><01:09:44.549><c> yeah</c><01:09:45.549><c> I</c>

01:09:45.599 --> 01:09:45.609 align:start position:0%
definitely we can implement that yeah I
 

01:09:45.609 --> 01:09:46.950 align:start position:0%
definitely we can implement that yeah I
really<01:09:46.000><c> wanted</c><01:09:46.180><c> to</c><01:09:46.299><c> show</c><01:09:46.450><c> you</c><01:09:46.509><c> some</c><01:09:46.690><c> day</c><01:09:46.810><c> some</c>

01:09:46.950 --> 01:09:46.960 align:start position:0%
really wanted to show you some day some
 

01:09:46.960 --> 01:09:48.300 align:start position:0%
really wanted to show you some day some
time<01:09:46.989><c> stuff</c><01:09:47.380><c> because</c><01:09:47.589><c> I</c><01:09:47.650><c> really</c><01:09:47.890><c> like</c><01:09:48.040><c> the</c><01:09:48.190><c> new</c>

01:09:48.300 --> 01:09:48.310 align:start position:0%
time stuff because I really like the new
 

01:09:48.310 --> 01:09:51.240 align:start position:0%
time stuff because I really like the new
date<01:09:48.520><c> and</c><01:09:48.700><c> time</c><01:09:48.910><c> and</c><01:09:49.270><c> API</c><01:09:49.900><c> but</c><01:09:50.440><c> I</c><01:09:50.710><c> don't</c><01:09:51.130><c> have</c>

01:09:51.240 --> 01:09:51.250 align:start position:0%
date and time and API but I don't have
 

01:09:51.250 --> 01:09:53.430 align:start position:0%
date and time and API but I don't have
any<01:09:51.370><c> really</c><01:09:51.640><c> good</c><01:09:51.759><c> examples</c><01:09:52.270><c> I</c><01:09:52.480><c> did</c><01:09:53.140><c> see</c><01:09:53.410><c> that</c>

01:09:53.430 --> 01:09:53.440 align:start position:0%
any really good examples I did see that
 

01:09:53.440 --> 01:09:56.580 align:start position:0%
any really good examples I did see that
there's<01:09:54.130><c> the</c><01:09:54.630><c> use</c><01:09:55.630><c> of</c><01:09:55.900><c> the</c><01:09:55.989><c> obsolete</c>

01:09:56.580 --> 01:09:56.590 align:start position:0%
there's the use of the obsolete
 

01:09:56.590 --> 01:09:58.680 align:start position:0%
there's the use of the obsolete
obsolete<01:09:56.980><c> date/time</c><01:09:57.670><c> API</c><01:09:58.000><c> but</c><01:09:58.270><c> that's</c><01:09:58.450><c> not</c>

01:09:58.680 --> 01:09:58.690 align:start position:0%
obsolete date/time API but that's not
 

01:09:58.690 --> 01:10:01.500 align:start position:0%
obsolete date/time API but that's not
the<01:09:58.960><c> other</c><01:09:59.170><c> time</c><01:09:59.380><c> that's</c><01:09:59.650><c> the</c><01:09:59.910><c> java.util</c><01:10:00.910><c> date</c>

01:10:01.500 --> 01:10:01.510 align:start position:0%
the other time that's the java.util date
 

01:10:01.510 --> 01:10:06.240 align:start position:0%
the other time that's the java.util date
and<01:10:01.780><c> Java</c><01:10:01.989><c> util</c><01:10:02.320><c> calendar</c><01:10:04.110><c> yes</c><01:10:05.110><c> I</c><01:10:05.440><c> think</c><01:10:06.100><c> that</c>

01:10:06.240 --> 01:10:06.250 align:start position:0%
and Java util calendar yes I think that
 

01:10:06.250 --> 01:10:10.640 align:start position:0%
and Java util calendar yes I think that
all<01:10:06.930><c> without</c><01:10:07.930><c> the</c><01:10:08.680><c> normal</c><01:10:08.890><c> questions</c><01:10:09.520><c> in</c><01:10:10.150><c> case</c>

01:10:10.640 --> 01:10:10.650 align:start position:0%
all without the normal questions in case
 

01:10:10.650 --> 01:10:14.459 align:start position:0%
all without the normal questions in case
you<01:10:11.650><c> have</c><01:10:12.420><c> other</c><01:10:13.420><c> questions</c><01:10:13.780><c> feel</c><01:10:14.260><c> free</c><01:10:14.290><c> to</c>

01:10:14.459 --> 01:10:14.469 align:start position:0%
you have other questions feel free to
 

01:10:14.469 --> 01:10:18.900 align:start position:0%
you have other questions feel free to
ask<01:10:14.950><c> them</c><01:10:15.400><c> in</c><01:10:15.640><c> Twitter</c><01:10:16.350><c> or</c><01:10:17.610><c> implement</c><01:10:18.610><c> we'll</c>

01:10:18.900 --> 01:10:18.910 align:start position:0%
ask them in Twitter or implement we'll
 

01:10:18.910 --> 01:10:22.470 align:start position:0%
ask them in Twitter or implement we'll
be<01:10:19.150><c> publishing</c><01:10:19.450><c> the</c><01:10:20.080><c> recording</c><01:10:20.770><c> soon</c><01:10:21.550><c> and</c><01:10:21.790><c> if</c>

01:10:22.470 --> 01:10:22.480 align:start position:0%
be publishing the recording soon and if
 

01:10:22.480 --> 01:10:26.580 align:start position:0%
be publishing the recording soon and if
you'll<01:10:23.440><c> find</c><01:10:23.800><c> some</c><01:10:24.219><c> question</c><01:10:24.960><c> not</c><01:10:25.960><c> addressed</c>

01:10:26.580 --> 01:10:26.590 align:start position:0%
you'll find some question not addressed
 

01:10:26.590 --> 01:10:30.000 align:start position:0%
you'll find some question not addressed
please<01:10:27.100><c> share</c><01:10:27.640><c> it</c><01:10:27.760><c> with</c><01:10:27.790><c> us</c><01:10:28.680><c> actually</c><01:10:29.680><c> you</c><01:10:29.890><c> can</c>

01:10:30.000 --> 01:10:30.010 align:start position:0%
please share it with us actually you can
 

01:10:30.010 --> 01:10:32.660 align:start position:0%
please share it with us actually you can
always<01:10:30.280><c> contact</c><01:10:30.550><c> me</c><01:10:30.760><c> over</c><01:10:30.850><c> Twitter</c>

01:10:32.660 --> 01:10:32.670 align:start position:0%
always contact me over Twitter
 

01:10:32.670 --> 01:10:38.390 align:start position:0%
always contact me over Twitter
cool<01:10:33.840><c> so</c><01:10:34.840><c> thank</c><01:10:35.170><c> you</c><01:10:35.320><c> for</c><01:10:36.010><c> your</c><01:10:36.190><c> time</c><01:10:36.840><c> hexa</c><01:10:37.840><c> I</c>

01:10:38.390 --> 01:10:38.400 align:start position:0%
cool so thank you for your time hexa I
 

01:10:38.400 --> 01:10:41.880 align:start position:0%
cool so thank you for your time hexa I
thank<01:10:39.400><c> you</c><01:10:39.550><c> bye</c>

