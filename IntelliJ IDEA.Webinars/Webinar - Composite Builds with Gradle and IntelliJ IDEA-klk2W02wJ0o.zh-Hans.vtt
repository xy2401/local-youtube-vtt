WEBVTT
Kind: captions
Language: zh-Hans

00:00:00.260 --> 00:00:05.580
您好，欢迎参加此在线讲座

00:00:02.909 --> 00:00:08.189
 Gradle我是Trisha的复合材料构建

00:00:05.580 --> 00:00:09.660
我在JetBrains工作我是喷气机

00:00:08.189 --> 00:00:12.690
范围开发者拥护者

00:00:09.660 --> 00:00:19.310
主要用于IntelliJ IDEA，我也加入了

00:00:12.690 --> 00:00:23.760
来自Gradle的Stefan irma嘿藏着

00:00:19.310 --> 00:00:28.170
循环然后我做得很好，是的，我

00:00:23.760 --> 00:00:30.960
幸存下来，所以我们这次网络研讨会的计划

00:00:28.170 --> 00:00:32.969
是，Soufan将经历

00:00:30.960 --> 00:00:35.130
哪些复合材料的目的是

00:00:32.969 --> 00:00:37.200
他们，并给一个演示，然后在那之后

00:00:35.130 --> 00:00:40.469
我将演示它的外观

00:00:37.200 --> 00:00:43.670
 IntelliJ IDEA 2017第一点针对我们

00:00:40.469 --> 00:00:45.649
听众中有一个区域

00:00:43.670 --> 00:00:48.360
 GoToWebinar，您可以在其中提问

00:00:45.649 --> 00:00:51.480
这样您可以在我们进行的过程中提出问题

00:00:48.360 --> 00:00:55.410
我会尝试将它们放置，然后我

00:00:51.480 --> 00:00:57.570
我会把它们读出来，然后也许

00:00:55.410 --> 00:00:59.670
我们可以播出一些答案

00:00:57.570 --> 00:01:02.340
随着我们的前进，我们将尝试找到

00:00:59.670 --> 00:01:03.989
合适的地方，那里

00:01:02.340 --> 00:01:05.309
可能是最后的机会

00:01:03.989 --> 00:01:07.979
跟进其他问题

00:01:05.309 --> 00:01:11.189
到目前为止还没有得到答案

00:01:07.979 --> 00:01:17.040
事不宜迟，让我们直接深入

00:01:11.189 --> 00:01:19.920
谢谢你，谢谢Gradle的帮助

00:01:17.040 --> 00:01:21.659
关于开发人员生产力及其一切的一切

00:01:19.920 --> 00:01:23.659
事实证明，这不只是关于

00:01:21.659 --> 00:01:26.880
使构建系统本身快速

00:01:23.659 --> 00:01:29.100
在过程中有很多过程

00:01:26.880 --> 00:01:32.070
发展会大大减慢

00:01:29.100 --> 00:01:36.270
开发他们和其中之一

00:01:32.070 --> 00:01:40.159
我们看过的过程是什么时候

00:01:36.270 --> 00:01:44.640
您尝试合并项目并尝试

00:01:40.159 --> 00:01:46.170
当别人在代码点上工作时

00:01:44.640 --> 00:01:49.470
您需要修复该错误，所以说您

00:01:46.170 --> 00:01:51.950
有一个使用

00:01:49.470 --> 00:01:55.079
由令牌团队开发的库

00:01:51.950 --> 00:01:57.000
现在你想把这个bug 

00:01:55.079 --> 00:02:00.869
他们的库或至少调试它

00:01:57.000 --> 00:02:03.719
不知何故你通常会做什么？ 

00:02:00.869 --> 00:02:07.110
签出您构建它的代码

00:02:03.719 --> 00:02:10.200
将其安装到本地仓库中

00:02:07.110 --> 00:02:12.300
更改构建以使用任何内容

00:02:10.200 --> 00:02:13.590
您刚刚安装到快照中的快照

00:02:12.300 --> 00:02:16.050
本地回购

00:02:13.590 --> 00:02:18.000
然后我们最终可以使用它

00:02:16.050 --> 00:02:19.800
相当烦人的流量然后

00:02:18.000 --> 00:02:23.550
您尝试的每一个小变化

00:02:19.800 --> 00:02:25.500
为该库做您必须安装

00:02:23.550 --> 00:02:29.069
再次尝试，然后在

00:02:25.500 --> 00:02:31.440
代码，因此存储库结构确实

00:02:29.069 --> 00:02:34.890
决定开发人员的经验，这

00:02:31.440 --> 00:02:37.830
这种痛苦导致很多人

00:02:34.890 --> 00:02:39.510
向大型整体木材移动

00:02:37.830 --> 00:02:43.379
电池，因为它更多

00:02:39.510 --> 00:02:47.280
您可以方便地与您一起工作

00:02:43.379 --> 00:02:49.290
当很多时候真的伸出一只手臂

00:02:47.280 --> 00:02:52.230
你想工作的情况

00:02:49.290 --> 00:02:54.780
在小型存储库上以实现模块化

00:02:52.230 --> 00:02:58.769
为了表现只是保持您的

00:02:54.780 --> 00:03:03.209
体积小，也用于代码

00:02:58.769 --> 00:03:05.400
优质的清酒，所以直到

00:03:03.209 --> 00:03:08.129
现在，您必须要解决的这个问题

00:03:05.400 --> 00:03:10.680
您的选择基本上就是

00:03:08.129 --> 00:03:13.379
将您的项目分成不同的

00:03:10.680 --> 00:03:16.950
仓库，您使用外部

00:03:13.379 --> 00:03:19.440
依赖关系，就像我在这里展示的

00:03:16.950 --> 00:03:22.350
依赖编译或我的公司和

00:03:19.440 --> 00:03:25.019
这样就可以部署到

00:03:22.350 --> 00:03:28.950
您的其他工厂或Nexus存储库

00:03:25.019 --> 00:03:30.750
然后你有这个问题，我

00:03:28.950 --> 00:03:32.579
只是概述了如果您想制作一个

00:03:30.750 --> 00:03:34.349
小小的改变，你必须安装它

00:03:32.579 --> 00:03:37.769
首先，然后更改您的账单以使用

00:03:34.349 --> 00:03:39.299
安装的版本与您放置的版本

00:03:37.769 --> 00:03:40.829
一切都可以整合到一个项目中

00:03:39.299 --> 00:03:42.739
项目依赖性

00:03:40.829 --> 00:03:45.620
给您一个快速的解决方法，但是它也

00:03:42.739 --> 00:03:49.400
往往会给你一个大项目

00:03:45.620 --> 00:03:53.010
很快失去控制，所以

00:03:49.400 --> 00:03:57.329
这就是我们试图做到的

00:03:53.010 --> 00:04:01.019
使用复合材料构建解决方案

00:03:57.329 --> 00:04:04.680
建立是非常简单的组合

00:04:01.019 --> 00:04:08.669
您可以包括账单的Gradle版本

00:04:04.680 --> 00:04:10.620
变成其他通常正常的账单

00:04:08.669 --> 00:04:14.849
彼此独立，因此发达

00:04:10.620 --> 00:04:17.280
由不同的团队和二进制

00:04:14.849 --> 00:04:20.039
从一个项目到另一个项目的依赖

00:04:17.280 --> 00:04:23.969
被直接项目取代

00:04:20.039 --> 00:04:26.490
依赖关系，因此复合材料表现为

00:04:23.969 --> 00:04:28.530
如果你有一张大账单

00:04:26.490 --> 00:04:31.860
包含所有项目，就好像您

00:04:28.530 --> 00:04:35.460
有那个单声道回购，它可以让你

00:04:31.860 --> 00:04:38.130
快速进行本地实验

00:04:35.460 --> 00:04:39.930
您要一起汇入几张账单

00:04:38.130 --> 00:04:42.270
我认为Tricia将显示IDE 

00:04:39.930 --> 00:04:44.130
以后例如越过

00:04:42.270 --> 00:04:47.940
存储库或将您的因素考虑在内

00:04:44.130 --> 00:04:51.240
需要它可以让您顺利迁移

00:04:47.940 --> 00:04:52.830
从整体到多仓库，也许

00:04:51.240 --> 00:04:56.130
甚至反过来取决于

00:04:52.830 --> 00:04:58.289
您需要什么，也是最酷的之一

00:04:56.130 --> 00:05:00.120
亲自为我提供的功能

00:04:58.289 --> 00:05:03.960
开发人员是，这也适用于

00:05:00.120 --> 00:05:06.539
信用插件，因此您可以设置巨大的

00:05:03.960 --> 00:05:10.710
具有本地版本的插件

00:05:06.539 --> 00:05:12.750
刚刚退房，所以进一步

00:05:10.710 --> 00:05:15.449
我要告诉你那是什么意思

00:05:12.750 --> 00:05:18.030
我在命令行上，您会

00:05:15.449 --> 00:05:20.370
可能想知道IntelliJ在哪里

00:05:18.030 --> 00:05:21.840
好吧，我不想破坏一切

00:05:20.370 --> 00:05:24.870
所以我将使用文本编辑器

00:05:21.840 --> 00:05:26.789
在这里，让我向您展示一个非常

00:05:24.870 --> 00:05:32.190
我刚刚解释的简单示例

00:05:26.789 --> 00:05:34.620
我们有一个应用程序

00:05:32.190 --> 00:05:36.539
对两个库的依赖

00:05:34.620 --> 00:05:39.659
书面号码，您使用的工具和字符串， 

00:05:36.539 --> 00:05:43.199
工具以及我进入应用程序的时间

00:05:39.659 --> 00:05:47.250
我会发现我什至不能

00:05:43.199 --> 00:05:48.659
之所以建立它，是因为这些库不是

00:05:47.250 --> 00:05:50.789
在我列为

00:05:48.659 --> 00:05:53.090
仓库，我也没有

00:05:50.789 --> 00:05:56.580
在本地安装，所以如果我说Gradle 

00:05:53.090 --> 00:05:59.159
请组装它会失败

00:05:56.580 --> 00:06:04.889
说嘿我找不到

00:05:59.159 --> 00:06:06.389
依赖关系，所以我现在可以去

00:06:04.889 --> 00:06:09.599
进入我的新工具项目

00:06:06.389 --> 00:06:11.460
还签出，我可以安装它

00:06:09.599 --> 00:06:15.509
到我的本地存储库中，然后我

00:06:11.460 --> 00:06:17.219
可以更改我的主要版本以使用

00:06:15.509 --> 00:06:19.770
我可以写的本地存储库

00:06:17.219 --> 00:06:22.139
这样的东西似乎是本地的Maven 

00:06:19.770 --> 00:06:25.020
然后我可以改变我的依赖

00:06:22.139 --> 00:06:28.229
声明1.1快照的声明

00:06:25.020 --> 00:06:30.900
等等等等，这很漂亮

00:06:28.229 --> 00:06:34.979
烦人但它能做什么

00:06:30.900 --> 00:06:39.979
那是Cal Gradle hain组装的

00:06:34.979 --> 00:06:45.440
试想一下，这另一种构建

00:06:39.979 --> 00:06:49.800
因为我的效用是我的金子的一部分

00:06:45.440 --> 00:06:52.889
所以也许爸爸你会看到Gradle 

00:06:49.800 --> 00:06:55.410
不仅可以构建我的应用，还可以

00:06:52.889 --> 00:07:00.330
建立了我的邪恶，这正是

00:06:55.410 --> 00:07:05.610
我需要的项目，如果我只是说

00:07:00.330 --> 00:07:10.949
 Gradle告诉我

00:07:05.610 --> 00:07:14.789
编译的配置，那么您将看到

00:07:10.949 --> 00:07:17.300
我将数字utils 100替换为

00:07:14.789 --> 00:07:21.660
该项目我的新工具编号通常

00:07:17.300 --> 00:07:25.620
所以就像我把

00:07:21.660 --> 00:07:27.000
将新工具编号到我的应用中，所以这是

00:07:25.620 --> 00:07:30.870
对快速本地化非常有用

00:07:27.000 --> 00:07:34.220
实验，实际上是这个版本

00:07:30.870 --> 00:07:40.220
有一个错误，所以说Gradle运行

00:07:34.220 --> 00:07:43.530
您的供稿说哦19加23等于437 

00:07:40.220 --> 00:07:47.520
不太可能，所以让我们看看发生了什么

00:07:43.530 --> 00:07:51.090
在我们的数字课上，是的，我做了

00:07:47.520 --> 00:07:54.180
一个简单的错误，让我们修复并告诉

00:07:51.090 --> 00:07:56.099
再次构建Gradle，您可以看到

00:07:54.180 --> 00:07:57.720
立即不给您的工具编号， 

00:07:56.099 --> 00:08:02.550
仅编号您的工具可以再次构建

00:07:57.720 --> 00:08:06.630
我的应用程序行为正常，所以这是

00:08:02.550 --> 00:08:09.599
简而言之，什么都是舒适

00:08:06.630 --> 00:08:13.080
关于你可以建立你的主要

00:08:09.599 --> 00:08:19.080
应用程序并包括其他构建

00:08:13.080 --> 00:08:21.900
替换依赖项，所以现在您可能

00:08:19.080 --> 00:08:24.960
不想写这个--包括构建

00:08:21.900 --> 00:08:29.070
每次或您可能想制作

00:08:24.960 --> 00:08:32.099
你可以做的更持久一些

00:08:29.070 --> 00:08:33.510
在设置或平板炉中

00:08:32.099 --> 00:08:36.120
你可以写的实例包括

00:08:33.510 --> 00:08:38.130
内置在您的工具中，但可能不会

00:08:36.120 --> 00:08:40.320
最好的主意，因为我的应用是

00:08:38.130 --> 00:08:43.000
应该是一个独立的项目

00:08:40.320 --> 00:08:45.520
因此，如果您签入

00:08:43.000 --> 00:08:47.620
到您的存储库中，然后您就能看到

00:08:45.520 --> 00:08:50.260
大概开始说我可以

00:08:47.620 --> 00:08:55.540
找到我的实用程序，它不是一闪而过的

00:08:50.260 --> 00:08:59.070
手册，但幸运的是，升级或

00:08:55.540 --> 00:09:01.240
只是一个普通的Gradle文件，或者您可以

00:08:59.070 --> 00:09:04.450
写一些预测变量然后说

00:09:01.240 --> 00:09:06.940
嘿，如果我的中立人存在

00:09:04.450 --> 00:09:09.880
因此基本上可以创建一个动态

00:09:06.940 --> 00:09:11.290
只是对本地做出反应的复合材料

00:09:09.880 --> 00:09:13.500
如果您拥有开发人员环境

00:09:11.290 --> 00:09:18.850
看看他们两个然后我要

00:09:13.500 --> 00:09:22.030
根据您也可以选择编译

00:09:18.850 --> 00:09:24.340
根本不改变您的应用程序，是我

00:09:22.030 --> 00:09:27.340
有第三个项目，包括

00:09:24.340 --> 00:09:29.410
他们这样的复合项目

00:09:27.340 --> 00:09:32.400
我在这里创建它真的就在那里

00:09:29.410 --> 00:09:35.830
包括我的应用程序和工具

00:09:32.400 --> 00:09:39.820
结果将是相同的，所以可以去

00:09:35.830 --> 00:09:42.430
在那里说Gradle不用跑

00:09:39.820 --> 00:09:44.050
指定任何包含的账单，因为

00:09:42.430 --> 00:09:46.510
他们保留在设置文件中， 

00:09:44.050 --> 00:09:51.640
您会看到它构建了我自己的工具和

00:09:46.510 --> 00:09:54.820
我的应用程序和构造结果

00:09:51.640 --> 00:09:57.280
可以让您真正结合

00:09:54.820 --> 00:10:01.270
开后更灵活

00:09:57.280 --> 00:10:03.990
详尽的例子只是一个快速点

00:10:01.270 --> 00:10:11.640
可能会增加您的尺寸

00:10:03.990 --> 00:10:15.880
命令行一点我确定

00:10:11.640 --> 00:10:17.620
更好，我认为这会更好

00:10:15.880 --> 00:10:23.770
如果还有其他查询，但是

00:10:17.620 --> 00:10:26.680
对我来说看起来更好，谢谢，很酷，所以我

00:10:23.770 --> 00:10:29.800
之前说过，这也适用于

00:10:26.680 --> 00:10:32.110
插件开发全部，所以我喜欢

00:10:29.800 --> 00:10:35.890
开发Gradle插件，许多

00:10:32.110 --> 00:10:38.050
你我想，所以让我们来看一下

00:10:35.890 --> 00:10:40.180
进入插件聋人项目并进入

00:10:38.050 --> 00:10:41.860
完美的消费者，所以我要

00:10:40.180 --> 00:10:44.800
看看正在使用我的项目

00:10:41.860 --> 00:10:47.350
插件，而我实际上已将其编辑为

00:10:44.800 --> 00:10:49.930
此处包含工具，因此通常

00:10:47.350 --> 00:10:52.750
开发插件时的操作

00:10:49.930 --> 00:10:55.750
在同一个存储库中，您有一个

00:10:52.750 --> 00:10:57.520
您的用户可以举几个例子

00:10:55.750 --> 00:11:01.800
弄清楚如何使用你的观点

00:10:57.520 --> 00:11:04.390
传统上您要做的是

00:11:01.800 --> 00:11:07.690
将插件安装到本地存储库

00:11:04.390 --> 00:11:11.620
然后现在尝试示例

00:11:07.690 --> 00:11:14.610
就用几张账单

00:11:11.620 --> 00:11:18.540
我说Gradle的消费者项目

00:11:14.610 --> 00:11:26.170
因为那是关于青春期的移植

00:11:18.540 --> 00:11:28.270
和我做的其他人，现在，如果我进入

00:11:26.170 --> 00:11:35.400
我的插件并实际更改代码

00:11:28.270 --> 00:11:40.120
说好吧，我想嘿，我喜欢你好， 

00:11:35.400 --> 00:11:43.540
今天再次摇篮信条我立即

00:11:40.120 --> 00:11:46.000
看到效果，所以我不再有这个

00:11:43.540 --> 00:11:48.190
我可以做的烦人的转变

00:11:46.000 --> 00:11:50.350
我可以立即插入更改

00:11:48.190 --> 00:11:57.220
看看它对持续发展有什么作用

00:11:50.350 --> 00:12:01.630
项目，所以这些是最基本的用途

00:11:57.220 --> 00:12:03.940
案例让本地开发商说我

00:12:01.630 --> 00:12:05.740
需要尝试另一个项目

00:12:03.940 --> 00:12:07.870
我需要尝试一个图书馆

00:12:05.740 --> 00:12:10.480
别人的buildin里面有个bug 

00:12:07.870 --> 00:12:12.910
或者我需要尝试一个插件

00:12:10.480 --> 00:12:16.089
有人建造的，不是

00:12:12.910 --> 00:12:21.480
做我想做的事，但有几个

00:12:16.089 --> 00:12:25.210
这些对于更大的人也很有用

00:12:21.480 --> 00:12:28.450
重构，例如当您

00:12:25.210 --> 00:12:30.700
从n1和reco转移到多仓库

00:12:28.450 --> 00:12:33.250
所以目前您所有的项目都在

00:12:30.700 --> 00:12:36.490
一个大的存储库，您想

00:12:33.250 --> 00:12:39.010
把它们分开，你有点

00:12:36.490 --> 00:12:40.750
你手上的问题，因为如果你只是

00:12:39.010 --> 00:12:42.880
将它们撕开并放入

00:12:40.750 --> 00:12:45.100
您可能是不同的存储库

00:12:42.880 --> 00:12:46.660
会陷入困境，因为

00:12:45.100 --> 00:12:49.930
发生在一个仓库中通常是

00:12:46.660 --> 00:12:52.510
模块相互引用

00:12:49.930 --> 00:12:55.030
纠结的方式有很多内部

00:12:52.510 --> 00:12:56.380
 API使用情况，应将它们分开

00:12:55.030 --> 00:12:58.360
分开给他们不同的释放

00:12:56.380 --> 00:13:01.210
周期可能会发生的是

00:12:58.360 --> 00:13:04.390
您的应用程序项目不断

00:13:01.210 --> 00:13:06.520
看起来天真无邪

00:13:04.390 --> 00:13:08.440
在库中进行更改，然后

00:13:06.520 --> 00:13:09.140
原来哦，如果内部API会

00:13:08.440 --> 00:13:10.820
实际离开

00:13:09.140 --> 00:13:12.920
通过其中一个应用程序，因为它们需要

00:13:10.820 --> 00:13:17.060
在一个大模型中很容易

00:13:12.920 --> 00:13:21.829
解决内部API使用问题，以便

00:13:17.060 --> 00:13:26.800
理想情况下，您希望拥有适当的API 

00:13:21.829 --> 00:13:30.320
在你把事情分开之前

00:13:26.800 --> 00:13:32.620
在以下情况下强制执行此适当的API拆分

00:13:30.320 --> 00:13:37.040
一切都建立在一个大的基础上

00:13:32.620 --> 00:13:39.649
没有任何界限可以很漂亮

00:13:37.040 --> 00:13:42.740
很难，那么什么样的构建允许

00:13:39.649 --> 00:13:47.870
你要说的嘿我要留下来

00:13:42.740 --> 00:13:49.519
在我的Lima逻辑存储库中，但我在

00:13:47.870 --> 00:13:52.220
要接受我的项目，已经

00:13:49.519 --> 00:13:55.880
使它们自成一体，所以我有点

00:13:52.220 --> 00:13:58.640
在这里完成构建一个单声道回购应用程序，我

00:13:55.880 --> 00:14:00.950
选择您要使用的号码和信息流

00:13:58.640 --> 00:14:03.740
 utils项目进入其模块文件夹，然后

00:14:00.950 --> 00:14:06.550
这两个项目是完全

00:14:03.740 --> 00:14:12.740
独立的，所以我可以进入

00:14:06.550 --> 00:14:20.120
一个数字util语句的回购模块

00:14:12.740 --> 00:14:24.800
说Gradle组装和这个项目

00:14:20.120 --> 00:14:26.660
本身建立，所以这是一个这是一个

00:14:24.800 --> 00:14:29.269
完全自给自足的Gradle 

00:14:26.660 --> 00:14:31.640
我可以将其导入IntelliJ项目

00:14:29.269 --> 00:14:33.019
例如说嘿，我只想

00:14:31.640 --> 00:14:33.440
使用数字工具而不是任何东西

00:14:33.019 --> 00:14:35.420
其他

00:14:33.440 --> 00:14:38.930
这可能会给我更快的广告

00:14:35.420 --> 00:14:44.570
经验比导入我的全部500 

00:14:38.930 --> 00:14:47.899
模块单声道回购，我也可以

00:14:44.570 --> 00:14:50.420
例如将其安装到我的本地

00:14:47.899 --> 00:14:54.850
存储库，以便以后在另一个存储库中使用

00:14:50.420 --> 00:14:59.180
项目，但我也可以一起使用

00:14:54.850 --> 00:15:02.420
还是我在这里所说的

00:14:59.180 --> 00:15:05.209
每个仓库一个仓库设置Gradle文件

00:15:02.420 --> 00:15:09.949
模块文件夹中的文件

00:15:05.209 --> 00:15:11.750
目录包括一本书，所以

00:15:09.949 --> 00:15:17.180
编号您要在其中打开字符串文字

00:15:11.750 --> 00:15:19.250
这种情况，您将在这些内容中看到

00:15:17.180 --> 00:15:22.440
我的一个回购应用程序具有的依赖项

00:15:19.250 --> 00:15:27.180
是二进制依赖项

00:15:22.440 --> 00:15:28.500
因此他们引用了

00:15:27.180 --> 00:15:34.709
从您的工具中可以感觉到的数字

00:15:28.500 --> 00:15:35.790
所以当我尝试运行时，我得到了相同的错误，所以

00:15:34.709 --> 00:15:38.339
我们将在一分钟内解决该问题

00:15:35.790 --> 00:15:45.000
当我说Gradle给我

00:15:38.339 --> 00:15:48.810
我的法力回购依赖可以

00:15:45.000 --> 00:15:52.170
看到我期望的替代品

00:15:48.810 --> 00:15:59.310
让我们这次再次修复该错误

00:15:52.170 --> 00:16:02.639
在这里，我们将继续做

00:15:59.310 --> 00:16:05.519
对的事情，现在我决定好了

00:16:02.639 --> 00:16:08.189
是时候将数字效用转移到自己的位置了

00:16:05.519 --> 00:16:11.699
知识库周修复了所有问题

00:16:08.189 --> 00:16:14.250
我们准备将其发布为自己的

00:16:11.699 --> 00:16:15.959
独立项目，我们不再

00:16:14.250 --> 00:16:17.220
将其捆绑成我们的大魔法

00:16:15.959 --> 00:16:20.009
回购这将是第一个

00:16:17.220 --> 00:16:23.699
我们搬到其他地方的事情

00:16:20.009 --> 00:16:29.250
让我们将其移动到其他位置

00:16:23.699 --> 00:16:30.870
您的工具在其他地方，所以现在

00:16:29.250 --> 00:16:35.069
不再在modules文件夹中找到

00:16:30.870 --> 00:16:36.899
当SI尝试运行时，您会看到

00:16:35.069 --> 00:16:41.100
踏板不再是建筑编号工具

00:16:36.899 --> 00:16:42.959
如果没有捡起它并显示

00:16:41.100 --> 00:16:45.949
再次以上，因为它现在正在使用

00:16:42.959 --> 00:16:49.199
是我本地存储库中的房间

00:16:45.949 --> 00:16:50.959
我之前安装的您可以看到

00:16:49.199 --> 00:16:54.089
线针仍在更换

00:16:50.959 --> 00:16:56.579
与字符串littles项目，而

00:16:54.089 --> 00:16:59.939
 number.you工具现在来自

00:16:56.579 --> 00:17:02.040
当地回购，您当然可以想象

00:16:59.939 --> 00:17:06.270
恰恰相反

00:17:02.040 --> 00:17:08.069
嗯，如果我有几个存储库，但是我

00:17:06.270 --> 00:17:12.600
实际上喜欢与单声道回购合作

00:17:08.069 --> 00:17:15.870
相反，我应该说嗯，这很大

00:17:12.600 --> 00:17:18.449
重构使其全部成为单一

00:17:15.870 --> 00:17:21.270
一口气建立的多项目我不

00:17:18.449 --> 00:17:25.740
我真的很想做那个

00:17:21.270 --> 00:17:27.539
我想走更多第一步，所以我

00:17:25.740 --> 00:17:29.940
只是把我所有的账单

00:17:27.539 --> 00:17:32.880
想要最终完成该项目， 

00:17:29.940 --> 00:17:34.929
将它们放到我的单声道仓库中的文件夹中

00:17:32.880 --> 00:17:38.049
并把它们包括在内

00:17:34.929 --> 00:17:40.509
他们的行为会像

00:17:38.049 --> 00:17:44.139
子项目再放一点

00:17:40.509 --> 00:17:46.389
隔离，然后我可以带他们一个

00:17:44.139 --> 00:17:51.279
一并转换为实际

00:17:46.389 --> 00:17:54.190
我的minoriko的子项目

00:17:51.279 --> 00:18:01.779
我会从其他地方搬到

00:17:54.190 --> 00:18:03.850
模块编号您的工具，然后运行

00:18:01.779 --> 00:18:07.269
那就是我要搬家时要做的

00:18:03.850 --> 00:18:10.919
从多重回购到主持人，所以Gretel 

00:18:07.269 --> 00:18:16.019
真正使教导保持界限

00:18:10.919 --> 00:18:20.019
一个回购和多波纹非常流利

00:18:16.019 --> 00:18:22.990
我想添加为最后一件事

00:18:20.019 --> 00:18:25.840
真的很酷的用例

00:18:22.990 --> 00:18:28.509
客户已经做的就是做

00:18:25.840 --> 00:18:32.350
 pi / 4上的这个，想像你有

00:18:28.509 --> 00:18:35.369
库团队，您的应用团队以及您的

00:18:32.350 --> 00:18:39.279
应用团队正在使用库版本1.2 

00:18:35.369 --> 00:18:40.809
现在他们不想使用快照

00:18:39.279 --> 00:18:43.419
因为那将建立他们的

00:18:40.809 --> 00:18:47.980
不可复制，他们不想

00:18:43.419 --> 00:18:50.320
得到图书馆小组的任何小盒子

00:18:47.980 --> 00:18:52.090
可能会在两次发布之间引入

00:18:50.320 --> 00:18:54.850
嗯，他们只想吃点东西

00:18:52.090 --> 00:18:56.470
那已经出版了，但另一方面

00:18:54.850 --> 00:18:59.409
图书馆团队真的很想

00:18:56.470 --> 00:19:00.970
知道该应用程序是否仍然可以运行

00:18:59.409 --> 00:19:04.149
与他们的下一个版本

00:19:00.970 --> 00:19:07.690
因此，如果问题在于两种力量

00:19:04.149 --> 00:19:09.730
在这里工作，我们是复合书

00:19:07.690 --> 00:19:11.769
可以很轻松地做到这一点

00:19:09.730 --> 00:19:14.889
 CI引出线可同时检查

00:19:11.769 --> 00:19:17.740
库和应用程序彼此相邻

00:19:14.889 --> 00:19:20.470
并将它们都合并到一起

00:19:17.740 --> 00:19:21.070
然后从运行所有测试

00:19:20.470 --> 00:19:23.679
第三窗格

00:19:21.070 --> 00:19:27.279
是的，该应用程序仍适用于下一个

00:19:23.679 --> 00:19:28.720
该库的主要次要版本是这样

00:19:27.279 --> 00:19:32.139
图书馆团队而不是

00:19:28.720 --> 00:19:34.210
反馈一个月的时间

00:19:32.139 --> 00:19:36.279
应用团队最终升级到他们的

00:19:34.210 --> 00:19:39.549
下一个版本，说哦，是的，你破产了

00:19:36.279 --> 00:19:41.639
他们在同一天就收到反馈

00:19:39.549 --> 00:19:44.919
 CI服务器说“嘿” 

00:19:41.639 --> 00:19:47.259
你很棒，升级不是二进制

00:19:44.919 --> 00:19:49.890
与一两个或您兼容

00:19:47.259 --> 00:19:55.419
弄错了你

00:19:49.890 --> 00:19:57.960
好，所以有一些限制

00:19:55.419 --> 00:20:00.970
现在我想指出

00:19:57.960 --> 00:20:03.010
我们目前正在研究

00:20:00.970 --> 00:20:07.750
第一个是，但是现在你不能

00:20:03.010 --> 00:20:10.059
目标任务并包括那些任务

00:20:07.750 --> 00:20:13.630
这就是我的妈妈回购应用

00:20:10.059 --> 00:20:18.850
目前无法对我说Gradle 

00:20:13.630 --> 00:20:21.070
 YouTube帐单，例如，这是

00:20:18.850 --> 00:20:22.980
我们很快会解决的问题

00:20:21.070 --> 00:20:25.840
其实

00:20:22.980 --> 00:20:27.429
我们目前还不支持自定义

00:20:25.840 --> 00:20:29.470
所以现在的出版物

00:20:27.429 --> 00:20:31.630
项目依赖项的替换是

00:20:29.470 --> 00:20:35.860
完全基于项目名称和

00:20:31.630 --> 00:20:38.110
项目组RFP与

00:20:35.860 --> 00:20:39.850
依赖表示法，然后将其替换

00:20:38.110 --> 00:20:42.820
与项目相关，如果他们

00:20:39.850 --> 00:20:45.580
那就不，我们将其扩展到

00:20:42.820 --> 00:20:48.720
使用发布插件，以便

00:20:45.580 --> 00:20:52.890
我们可以更换多个不同的手臂

00:20:48.720 --> 00:20:55.030
项目的依赖项表示法是

00:20:52.890 --> 00:20:59.049
包含的帐单目前也没有

00:20:55.030 --> 00:21:01.900
在权力中执行

00:20:59.049 --> 00:21:05.159
已经工作了，所以附有帐单

00:21:01.900 --> 00:21:08.440
将并行化

00:21:05.159 --> 00:21:12.570
连续构建当前未选择

00:21:08.440 --> 00:21:16.210
包括在这方面的账单上的变化是

00:21:12.570 --> 00:21:18.789
将被修复，它不在

00:21:16.210 --> 00:21:22.480
下个月的路线图，但

00:21:18.789 --> 00:21:24.370
我们肯定会解决的问题

00:21:22.480 --> 00:21:26.799
我们目前还不支持

00:21:24.370 --> 00:21:30.280
努力复合体

00:21:26.799 --> 00:21:31.780
包括另一项综合法案，但

00:21:30.280 --> 00:21:36.309
再次，这将是

00:21:31.780 --> 00:21:40.120
肯定会添加一些东西

00:21:36.309 --> 00:21:42.370
如果目前全部是更远的地方

00:21:40.120 --> 00:21:46.419
胸部需要使用相同的

00:21:42.370 --> 00:21:48.570
 Gradle版本，所以使用的恶魔是

00:21:46.419 --> 00:21:50.830
综合小组项目之一

00:21:48.570 --> 00:21:53.260
并且所有包含的账单都在

00:21:50.830 --> 00:21:55.570
相同的Gradle恶魔并使用相同的

00:21:53.260 --> 00:21:58.630
结果是Gradle版本，所以最后

00:21:55.570 --> 00:22:01.360
关键是我们的新兵训练营，所以你可能

00:21:58.630 --> 00:22:01.720
知道Gradle有云服务

00:22:01.360 --> 00:22:03.310
叫

00:22:01.720 --> 00:22:04.870
凯姆显然会变得更深

00:22:03.310 --> 00:22:07.270
洞悉您的情况

00:22:04.870 --> 00:22:11.230
建立哪些转移进行等

00:22:07.270 --> 00:22:14.050
他们目前不支持

00:22:11.230 --> 00:22:18.720
复合材料或主要是因为

00:22:14.050 --> 00:22:20.920
复合材料内部连接起来，所以

00:22:18.720 --> 00:22:23.350
我们想去的地方

00:22:20.920 --> 00:22:26.170
他们看起来就像一个大多

00:22:23.350 --> 00:22:28.720
项目构建，这样您就可以看到

00:22:26.170 --> 00:22:32.830
任务来自这个构建和旅行

00:22:28.720 --> 00:22:33.700
这么久，这是英国皇家空军的一项任务

00:22:32.830 --> 00:22:40.320
哦

00:22:33.700 --> 00:22:43.900
所以这也在工作中

00:22:40.320 --> 00:22:47.620
请按照Gradle块进行操作

00:22:43.900 --> 00:22:50.100
嗯，如果您想进一步了解

00:22:47.620 --> 00:22:52.630
舒适的发展，我们要

00:22:50.100 --> 00:22:56.530
在此功能上投入更多

00:22:52.630 --> 00:22:58.840
接下来的三个月，我将

00:22:56.530 --> 00:23:02.760
希望能把它交给你

00:22:58.840 --> 00:23:02.760
您可以看到我的IntelliJ IDEA屏幕

00:23:03.120 --> 00:23:08.770
很快，所以我基本上要走了

00:23:06.850 --> 00:23:12.790
通过你走路的例子

00:23:08.770 --> 00:23:14.830
从命令行进入，我

00:23:12.790 --> 00:23:16.870
给你看，所以请支持

00:23:14.830 --> 00:23:18.250
我们为IntelliJ IDEA提供支持

00:23:16.870 --> 00:23:20.020
同样的事情可能是最

00:23:18.250 --> 00:23:21.880
复杂的是第一个

00:23:20.020 --> 00:23:24.070
我们要设置的这个不

00:23:21.880 --> 00:23:25.690
有任何自动化，所以这

00:23:24.070 --> 00:23:27.130
显示出最坏的情况

00:23:25.690 --> 00:23:30.700
您必须设置的方案

00:23:27.130 --> 00:23:32.050
手动进行所有操作，这是

00:23:30.700 --> 00:23:34.420
您所拥有的示例

00:23:32.050 --> 00:23:37.300
我的应用程序让我们看一下主要

00:23:34.420 --> 00:23:39.760
这是你的主要课程

00:23:37.300 --> 00:23:42.580
在这里取决于这两件事

00:23:39.760 --> 00:23:46.840
如果我们查看构建文件，我们可以看到

00:23:42.580 --> 00:23:49.180
这些是这里的依赖以及什么

00:23:46.840 --> 00:23:51.160
我想做的是我需要设置

00:23:49.180 --> 00:23:53.200
 IntelliJ IDEA内部的复合构建

00:23:51.160 --> 00:23:56.020
这样就可以拾取这些依赖项

00:23:53.200 --> 00:23:58.600
并允许您导航到源

00:23:56.020 --> 00:24:01.240
这些依赖关系，所以我们要做的是

00:23:58.600 --> 00:24:02.920
在我们的Gradle项目窗口中

00:24:01.240 --> 00:24:04.930
可以通过做很多

00:24:02.920 --> 00:24:07.360
不同的东西要么你可以打开它

00:24:04.930 --> 00:24:10.060
从这里下来，也可以从

00:24:07.360 --> 00:24:12.430
在这里或我经常剪的是我

00:24:10.060 --> 00:24:15.130
使用命令II和I输入Gradle并

00:24:12.430 --> 00:24:19.900
然后我可以看到我的Gradle窗口是

00:24:15.130 --> 00:24:21.070
在那里让我关闭这些，所以

00:24:19.900 --> 00:24:24.460
我要做的是添加

00:24:21.070 --> 00:24:26.500
我的项目有一个新的Gradle项目

00:24:24.460 --> 00:24:28.980
将确保我去

00:24:26.500 --> 00:24:28.980
正确的位置

00:24:29.220 --> 00:24:37.930
我要从中添加构建Gradle 

00:24:32.610 --> 00:24:39.430
我的utils项目确保我已经

00:24:37.930 --> 00:24:40.830
有正确版本的Gradle等

00:24:39.430 --> 00:24:46.210
向前

00:24:40.830 --> 00:24:48.040
然后我可以做的就是设置

00:24:46.210 --> 00:24:50.380
内部的复合构建配置

00:24:48.040 --> 00:24:53.530
右键单击IntelliJ IDEA 

00:24:50.380 --> 00:24:56.290
我的应用程序构建，我可以选择我的工具

00:24:53.530 --> 00:24:59.560
作为我要包括的项目

00:24:56.290 --> 00:25:01.450
在我的复合建筑中，所以Gradle是

00:24:59.560 --> 00:25:06.190
将要消失在这里，我们建立

00:25:01.450 --> 00:25:08.680
我们去的项目，所以这些是

00:25:06.190 --> 00:25:18.790
这些是要包括的模块

00:25:08.680 --> 00:25:21.130
包括那些，我只需要

00:25:18.790 --> 00:25:22.240
在这里打开它，我们看到这不是

00:25:21.130 --> 00:25:24.010
捡了一切，所以我只是

00:25:22.240 --> 00:25:25.960
将刷新我的Gradle项目

00:25:24.010 --> 00:25:27.970
每当您在IntelliJ IDEA中工作时

00:25:25.960 --> 00:25:29.410
并且您对Gradle进行了一些更改

00:25:27.970 --> 00:25:31.660
似乎已经发生的变化

00:25:29.410 --> 00:25:32.980
拿起魔术刷新按钮是

00:25:31.660 --> 00:25:34.960
通常会做的事情

00:25:32.980 --> 00:25:37.080
一切对您都有效，所以您可以看到

00:25:34.960 --> 00:25:39.250
在这里，我们正在做一个Gradle构建

00:25:37.080 --> 00:25:41.830
好吧，希望我能看到什么

00:25:39.250 --> 00:25:43.870
按我的刷新我的魔术刷新按钮

00:25:41.830 --> 00:25:45.940
在Gradle项目上，现在您可以

00:25:43.870 --> 00:25:49.420
看到我的应用程序并具有依赖项

00:25:45.940 --> 00:25:52.090
在我的utils模块上以及

00:25:49.420 --> 00:25:57.310
主要工艺开始工作，所以如果我跑步

00:25:52.090 --> 00:26:03.460
这个农场IntelliJ IDEA，那么我们应该

00:25:57.310 --> 00:26:07.590
得到答案嗯好吧有趣

00:26:03.460 --> 00:26:07.590
哦，我知道我已经完成了

00:26:15.010 --> 00:26:19.340
我要去不代表

00:26:17.540 --> 00:26:20.810
 IDE为此构建了Gradle 

00:26:19.340 --> 00:26:23.380
特定的实例，因为我想

00:26:20.810 --> 00:26:32.570
使用IDE构建而不是Gradle显示它

00:26:23.380 --> 00:26:34.520
所以当我运行它时它将运行

00:26:32.570 --> 00:26:36.140
它，给我一个答案，现在是

00:26:34.520 --> 00:26:38.300
在这里我们可以看到导航

00:26:36.140 --> 00:26:40.190
数字点加数字是东西

00:26:38.300 --> 00:26:43.250
我们从样品号导入的

00:26:40.190 --> 00:26:46.550
 utils，我们去添加，这是我们

00:26:43.250 --> 00:26:48.470
可以解决这个问题，例如

00:26:46.550 --> 00:26:49.910
让我们看看我们所做的是当我们

00:26:48.470 --> 00:26:52.280
浏览了一些我们最终得出的数字

00:26:49.910 --> 00:26:55.070
在我的utils项目中，所以我们

00:26:52.280 --> 00:26:57.740
可以直接编辑此文件，然后

00:26:55.070 --> 00:27:03.470
当我们重新运行时，我们应该看到正确的

00:26:57.740 --> 00:27:05.720
回答，那么我们得到正确的答案

00:27:03.470 --> 00:27:08.180
所以现在当我们有了复合材料

00:27:05.720 --> 00:27:11.120
帐单并在IntelliJ IDEA中启用

00:27:08.180 --> 00:27:13.280
我在我的应用程序中，让我们回到这里哦

00:27:11.120 --> 00:27:14.960
我已经在那里，我可以做类似的事情

00:27:13.280 --> 00:27:16.970
显然我可以浏览代码

00:27:14.960 --> 00:27:18.800
是我们所看到的，但我们也可以做

00:27:16.970 --> 00:27:21.110
就像我们可以使用IntelliJ的功能

00:27:18.800 --> 00:27:23.600
做诸如重命名的事情，然后

00:27:21.110 --> 00:27:27.080
当我重命名时，它将

00:27:23.600 --> 00:27:30.920
重命名我库中的方法

00:27:27.080 --> 00:27:32.630
代码还可以，所以这是大多数

00:27:30.920 --> 00:27:34.220
困难的例子，因为我们必须

00:27:32.630 --> 00:27:37.100
手动添加我们对

00:27:34.220 --> 00:27:38.990
我想要的是不同的库代码

00:27:37.100 --> 00:27:41.390
显示是我想给你看一些

00:27:38.990 --> 00:27:44.150
希望更多

00:27:41.390 --> 00:27:47.300
导入的简单示例

00:27:44.150 --> 00:27:50.990
复合材料的构建是我们要做的事情之一

00:27:47.300 --> 00:27:53.380
可以让我们导入不同的内容

00:27:50.990 --> 00:27:53.380
项目

00:28:01.080 --> 00:28:05.740
所以合成的被演示的

00:28:04.390 --> 00:28:10.510
如果我较早从命令行

00:28:05.740 --> 00:28:12.100
导入此然后IntelliJ IDEA应该

00:28:10.510 --> 00:28:14.429
拾取所有依赖项

00:28:12.100 --> 00:28:20.020
是Gradle复合建筑的一部分

00:28:14.429 --> 00:28:22.510
所以我打开它，它拾起了Java 9 

00:28:20.020 --> 00:28:25.330
默认情况下会自动

00:28:22.510 --> 00:28:31.090
我们将得到一些有趣的结果

00:28:25.330 --> 00:28:33.039
打开我的Gradle窗口，现在在

00:28:31.090 --> 00:28:35.159
 Gradle窗口仍在运行

00:28:33.039 --> 00:28:37.600
在底部进行处理，因此

00:28:35.159 --> 00:28:39.490
窗户将在

00:28:37.600 --> 00:28:41.350
全部完成，但你可以看到我有

00:28:39.490 --> 00:28:43.480
对我的应用程序有依赖性

00:28:41.350 --> 00:28:46.840
对我的效用的依赖数

00:28:43.480 --> 00:28:49.299
我也有自己的根基

00:28:46.840 --> 00:28:54.640
例如，我们在这里开始，所以

00:28:49.299 --> 00:28:56.320
所有要导入的项目数据

00:28:54.640 --> 00:28:59.080
接受IntelliJ提供的默认值

00:28:56.320 --> 00:29:01.720
你然后你可以看到所有的

00:28:59.080 --> 00:29:04.270
适用于所有不同代码

00:29:01.720 --> 00:29:07.299
我们所依赖的项目

00:29:04.270 --> 00:29:09.370
当我们的复合build.gradle文件

00:29:07.299 --> 00:29:11.320
具有所有这些包含的构建

00:29:09.370 --> 00:29:13.000
 IntelliJ找到了所有这些构建， 

00:29:11.320 --> 00:29:15.279
将这些东西的代码导入为

00:29:13.000 --> 00:29:19.870
好，然后我们可以做类似的事情

00:29:15.279 --> 00:29:21.940
在路线上，例如我们可以运行

00:29:19.870 --> 00:29:22.570
我真的希望从那里建立

00:29:21.940 --> 00:29:26.470
这次工作

00:29:22.570 --> 00:29:28.510
好吧，那么一切都正常了，什么时候

00:29:26.470 --> 00:29:30.610
您从运行Gradle时开始运行

00:29:28.510 --> 00:29:31.600
您可以从IntelliJ IDEA内部执行任务

00:29:30.610 --> 00:29:35.320
要么让它有点熟悉

00:29:31.600 --> 00:29:37.390
文本输出或您可以将其分类

00:29:35.320 --> 00:29:39.159
绿色斑点的东西，所以你可以

00:29:37.390 --> 00:29:41.470
确切地知道是什么让他们得到的， 

00:29:39.159 --> 00:29:45.270
哪里有故障或有什么问题

00:29:41.470 --> 00:29:45.270
例如可能被忽略了

00:29:46.529 --> 00:29:51.820
所以这是IntelliJ IDEA的外观

00:29:50.020 --> 00:29:54.190
所有这些独立的依赖

00:29:51.820 --> 00:29:58.630
并提取所有代码

00:29:54.190 --> 00:29:59.030
项目取决于我们有一个

00:29:58.630 --> 00:30:06.350
看着

00:29:59.030 --> 00:30:10.510
另一个例子，所以让我们看一下

00:30:06.350 --> 00:30:10.510
关闭此一个导入另一个

00:30:23.179 --> 00:30:27.159
所以如果我们导入我们的mono仓库

00:30:38.740 --> 00:30:45.789
再次打开门窗，所以我们可以看到

00:30:44.260 --> 00:30:49.570
个别的项目是

00:30:45.789 --> 00:30:51.279
取决于我们何时可以看到

00:30:49.570 --> 00:31:02.110
完成索引编制等等，我们将看到

00:30:51.279 --> 00:31:04.570
所有这些都正确地出现了

00:31:02.110 --> 00:31:10.270
分钟，我们将看到这些作为

00:31:04.570 --> 00:31:11.770
我们去了IntelliJ模块

00:31:10.270 --> 00:31:20.350
是要导入的模块吗？ 

00:31:11.770 --> 00:31:22.500
全部都捡起来了

00:31:20.350 --> 00:31:24.730
从这些设置中

00:31:22.500 --> 00:31:26.080
从Bill Gradle和

00:31:24.730 --> 00:31:27.779
设置Gradle能够选择

00:31:26.080 --> 00:31:31.000
处理模块内部的所有内容， 

00:31:27.779 --> 00:31:32.830
将所有这些导入为IntelliJ模块

00:31:31.000 --> 00:31:34.090
同样，再次得到相同的结果

00:31:32.830 --> 00:31:36.970
您期望能够得到的东西

00:31:34.090 --> 00:31:39.130
您可以重命名，也可以浏览，然后

00:31:36.970 --> 00:31:41.020
以此类推

00:31:39.130 --> 00:31:42.610
看来这些复合材料建造得很好

00:31:41.020 --> 00:31:44.169
创建您的IntelliJ项目

00:31:42.610 --> 00:31:46.330
期望能够与您合作

00:31:44.169 --> 00:31:51.850
可以编辑文件重命名人员等

00:31:46.330 --> 00:31:55.330
第四，我得到的最后一个例子

00:31:51.850 --> 00:31:57.100
是当时正在开发的插件

00:31:55.330 --> 00:31:58.840
也应该自动工作我说

00:31:57.100 --> 00:32:03.960
单词应该，但第一个应该

00:31:58.840 --> 00:32:06.960
也很好，所以如果我们开放

00:32:03.960 --> 00:32:06.960
外挂程式

00:32:09.910 --> 00:32:16.330
我认为第一个是唯一的事情

00:32:14.950 --> 00:32:19.450
没用的实际上正在运行

00:32:16.330 --> 00:32:22.360
伟大的攻击，所以它可能会丢失

00:32:19.450 --> 00:32:23.920
包括东西的人行道

00:32:22.360 --> 00:32:26.740
他在UI中配置的哦

00:32:23.920 --> 00:32:28.120
进行谈话是的，我想

00:32:26.740 --> 00:32:29.740
对此感到惊讶，因为我

00:32:28.120 --> 00:32:32.170
以为应该是

00:32:29.740 --> 00:32:34.390
应该可以自动工作等等

00:32:32.170 --> 00:32:36.460
我要走了，有一个

00:32:34.390 --> 00:32:37.240
看一看，然后反馈给

00:32:36.460 --> 00:32:46.440
我们的团队也一样

00:32:37.240 --> 00:32:50.710
哦，再说一遍，它仍然是

00:32:46.440 --> 00:32:52.840
在这里建立和索引等等

00:32:50.710 --> 00:32:54.930
我们有我们的build.gradle有我们的

00:32:52.840 --> 00:32:58.780
构建脚本取决于

00:32:54.930 --> 00:33:01.120
这个磁盘问候插件，好吧

00:32:58.780 --> 00:33:02.590
所有这些，您将看到IntelliJ 

00:33:01.120 --> 00:33:04.330
她输入了问候代码

00:33:02.590 --> 00:33:06.160
插件，即使我所做的只是我

00:33:04.330 --> 00:33:08.830
为消费者打开了该项目， 

00:33:06.160 --> 00:33:11.640
它把它带进了代码

00:33:08.830 --> 00:33:14.050
问候插件，所以如果我运行这个

00:33:11.640 --> 00:33:21.040
让我们来看看消费者

00:33:14.050 --> 00:33:24.070
我要做的就是跑招呼鲍勃，所以

00:33:21.040 --> 00:33:34.120
我向鲍勃问好，但如果我想

00:33:24.070 --> 00:33:36.880
将问候任务更改为打招呼

00:33:34.120 --> 00:33:42.640
显然是资本，并且摆脱了

00:33:36.880 --> 00:33:44.260
当我重新运行时，这显然

00:33:42.640 --> 00:33:45.760
 IntelliJ IDE正在索引所有内容

00:33:44.260 --> 00:33:54.370
因为我刚刚创建了新的

00:33:45.760 --> 00:33:56.020
项目让我们尝试重新运行它，所以我

00:33:54.370 --> 00:33:57.940
重新运行，我得到鲍勃

00:33:56.020 --> 00:34:00.850
所以又像农夫说

00:33:57.940 --> 00:34:02.770
这使您能够工作

00:34:00.850 --> 00:34:05.020
直接与使用

00:34:02.770 --> 00:34:06.670
插件还能改变细节

00:34:05.020 --> 00:34:07.960
该插件，并看到那些看到

00:34:06.670 --> 00:34:10.149
这些变化的影响马上

00:34:07.960 --> 00:34:12.220
无需重建整体

00:34:10.149 --> 00:34:13.690
并喜欢将它们上传到存储库中

00:34:12.220 --> 00:34:17.730
依此类推，您可以使用

00:34:13.690 --> 00:34:20.320
就像是我的单个代码库一样

00:34:17.730 --> 00:34:23.270
认为这几乎就是我想要的

00:34:20.320 --> 00:34:24.380
演示，也许我们可以看看

00:34:23.270 --> 00:34:28.040
任何问题还有其他

00:34:24.380 --> 00:34:30.980
你想涵盖拉娜

00:34:28.040 --> 00:34:34.100
甜美很酷，看到也许

00:34:30.980 --> 00:34:36.409
要添加的一件事是， 

00:34:34.100 --> 00:34:39.950
知道Gradle保持着出色的Eclipse 

00:34:36.409 --> 00:34:43.179
名为Bill chip的插件也有

00:34:39.950 --> 00:34:46.840
自2.0版以来的这种支持现在

00:34:43.179 --> 00:34:49.070
您刚刚在IntelliJ导入中看到的内容

00:34:46.840 --> 00:34:54.050
复合材料在那里我们没有的东西

00:34:49.070 --> 00:34:58.790
是一个非常可爱的手臂手动用户界面，所以

00:34:54.050 --> 00:35:00.470
 um使用用户进行构建

00:34:58.790 --> 00:35:02.930
界面而不是使用设置，但是

00:35:00.470 --> 00:35:04.240
太棒了，这有点

00:35:02.930 --> 00:35:06.740
尚未报价

00:35:04.240 --> 00:35:09.190
所以基本上无论您使用哪个IDE 

00:35:06.740 --> 00:35:11.990
您可以获得复合材料构建的支持

00:35:09.190 --> 00:35:13.220
 GoPro，对，我要准备一个

00:35:11.990 --> 00:35:14.720
快速浏览这里的问题

00:35:13.220 --> 00:35:17.210
不幸的是，其中有很多人

00:35:14.720 --> 00:35:20.420
我们只是放下音频，所以我必须

00:35:17.210 --> 00:35:23.390
快速浏览一下，让我们

00:35:20.420 --> 00:35:25.640
看看，所以其中一个问题是

00:35:23.390 --> 00:35:29.440
这项工作与

00:35:25.640 --> 00:35:29.440
构建源项目中的依赖

00:35:29.560 --> 00:35:35.180
与插件不同还是没有

00:35:34.010 --> 00:35:37.730
那就是发生在

00:35:35.180 --> 00:35:41.420
在你一切都好之前开始

00:35:37.730 --> 00:35:43.760
所有的答案是否定的，因为

00:35:41.420 --> 00:35:46.960
设置之前执行源

00:35:43.760 --> 00:35:51.770
脚本已执行，因此这些源

00:35:46.960 --> 00:35:53.510
在这方面很特别，所以我们

00:35:51.770 --> 00:35:55.220
只能告诉你你拥有什么

00:35:53.510 --> 00:35:58.850
包含在洪水脚本之后

00:35:55.220 --> 00:36:04.820
已执行并在执行时建立巡视

00:35:58.850 --> 00:36:14.140
在那之前，另一个问题呢

00:36:04.820 --> 00:36:14.140
按需配置这项工作是吗

00:36:14.260 --> 00:36:20.210
听起来不错，演示应该可以工作

00:36:17.150 --> 00:36:22.250
这是一个关于

00:36:20.210 --> 00:36:25.220
哦，这是关于Java 9的，我不确定

00:36:22.250 --> 00:36:27.170
一个好话题与否，Gradle将如何发展

00:36:25.220 --> 00:36:28.970
复合构建与像素模块一起使用

00:36:27.170 --> 00:36:32.960
在Java 9中已经有一个计划

00:36:28.970 --> 00:36:36.140
支持它，而不是真正与

00:36:32.960 --> 00:36:37.570
芯片或模块秒

00:36:36.140 --> 00:36:41.270
舒适的山脊是通往

00:36:37.570 --> 00:36:43.880
分解或分解成大块

00:36:41.270 --> 00:36:47.690
较小的目标或合并希望

00:36:43.880 --> 00:36:51.610
以相同的想法处理不同的人

00:36:47.690 --> 00:36:54.140
会话与我建立的相同

00:36:51.610 --> 00:36:56.090
点击所有的就更多了

00:36:54.140 --> 00:36:59.630
摇篮项目级别像单

00:36:56.090 --> 00:37:01.790
子项目定义API和

00:36:59.630 --> 00:37:06.110
实现依赖定义API 

00:37:01.790 --> 00:37:07.520
和实施包，所以我们

00:37:06.110 --> 00:37:10.220
通过摇篮，因为我们已经添加了

00:37:07.520 --> 00:37:13.040
拆分API的能力

00:37:10.220 --> 00:37:17.000
实现依赖，我们将

00:37:13.040 --> 00:37:21.260
深入研究Java 9支持

00:37:17.000 --> 00:37:23.840
年，因此我们将增加对定义的支持

00:37:21.260 --> 00:37:26.300
您的api包是什么，然后

00:37:23.840 --> 00:37:28.160
生成模块描述符或

00:37:26.300 --> 00:37:29.840
也许从中读取信息

00:37:28.160 --> 00:37:34.070
模块描述符不完全是

00:37:29.840 --> 00:37:37.010
已签名，但前提是它与

00:37:34.070 --> 00:37:38.510
我会胜任的能力

00:37:37.010 --> 00:37:39.650
有关Java 9的全部问题

00:37:38.510 --> 00:37:40.670
在Gradle中，但我认为可能是

00:37:39.650 --> 00:37:43.100
稍微偏离主题

00:37:40.670 --> 00:37:46.040
对不起，我对自己的看法更加抱歉

00:37:43.100 --> 00:37:48.470
痛点和一般答案是

00:37:46.040 --> 00:37:50.600
我们不会在拼图上运行的信用卡

00:37:48.470 --> 00:37:53.150
因为发生了变化

00:37:50.600 --> 00:37:55.040
每次尝试都会改变，我们感到

00:37:53.150 --> 00:37:56.390
好吧，现在我们在拼图上运行，或者有

00:37:55.040 --> 00:38:00.470
另一份每晚账单

00:37:56.390 --> 00:38:03.820
再次有目的啊，所以我们推迟了

00:38:00.470 --> 00:38:07.220
暂时停止摇动兔子

00:38:03.820 --> 00:38:09.410
但是我们会在四月回到

00:38:07.220 --> 00:38:12.440
到绝对最小值

00:38:09.410 --> 00:38:14.660
拼图，然后我们将了解下一个

00:38:12.440 --> 00:38:19.730
例如um构建模块化的步骤

00:38:14.660 --> 00:38:22.100
应用程序并定义您的API，然后

00:38:19.730 --> 00:38:24.500
是的，我的意思是我绝对经历了

00:38:22.100 --> 00:38:26.870
 Java 9显然尚未发布的事实

00:38:24.500 --> 00:38:29.870
所以很多的早期访问

00:38:26.870 --> 00:38:31.120
建立就像交换

00:38:29.870 --> 00:38:34.850
工作正在进行中

00:38:31.120 --> 00:38:36.350
绝对嗯，我有一个问题

00:38:34.850 --> 00:38:38.360
包括第二层怎么样

00:38:36.350 --> 00:38:39.710
依赖，我想你可能有

00:38:38.360 --> 00:38:45.200
涵盖了局限性

00:38:39.710 --> 00:38:46.550
哦，不，这不重要吗

00:38:45.200 --> 00:38:48.350
的传递依存顺序

00:38:46.550 --> 00:38:50.120
任何依赖都可以是

00:38:48.350 --> 00:38:54.710
替换为

00:38:50.120 --> 00:38:56.120
一个不可思议的项目，所以这

00:38:54.710 --> 00:38:57.860
不仅适用于第一级

00:38:56.120 --> 00:39:00.050
您明确编辑的依赖项

00:38:57.860 --> 00:39:04.640
描述性词适用于所有传递词

00:39:00.050 --> 00:39:09.200
依赖，甚至像

00:39:04.640 --> 00:39:12.230
您在其他包含的帐单中

00:39:09.200 --> 00:39:14.660
依赖二进制可以

00:39:12.230 --> 00:39:17.680
由另一个提供

00:39:14.660 --> 00:39:19.820
增长将全部被取代

00:39:17.680 --> 00:39:22.130
完全整合到

00:39:19.820 --> 00:39:23.540
依赖解析引擎很酷，所以您

00:39:22.130 --> 00:39:26.030
基本上可以或多或少地使用它

00:39:23.540 --> 00:39:28.970
你期望依赖的想法去

00:39:26.030 --> 00:39:30.680
通过，我们在相关

00:39:28.970 --> 00:39:32.030
问题我可以用它代替罐子吗

00:39:30.680 --> 00:39:44.510
从他们的依赖

00:39:32.030 --> 00:39:47.020
仓库好问题，断然

00:39:44.510 --> 00:39:51.320
修理它，你通常没有一个小组

00:39:47.020 --> 00:39:55.970
这样可能不起作用

00:39:51.320 --> 00:39:59.440
我必须尝试，而我们

00:39:55.970 --> 00:40:01.670
我没有那个案子

00:39:59.440 --> 00:40:03.350
认为这可能是相同的问题是

00:40:01.670 --> 00:40:05.000
第二级依赖问题

00:40:03.350 --> 00:40:07.040
这是我的项目，对

00:40:05.000 --> 00:40:08.780
依赖公共的春天

00:40:07.040 --> 00:40:13.240
我可以记录评论吗

00:40:08.780 --> 00:40:16.100
作为复合依赖之前

00:40:13.240 --> 00:40:21.740
加载有关音频存在的更多问题

00:40:16.100 --> 00:40:25.310
一半将被捕获

00:40:21.740 --> 00:40:27.020
网络研讨会重播，不，我不认为

00:40:25.310 --> 00:40:29.120
因为我也失去了声音，所以我

00:40:27.020 --> 00:40:33.110
录制网络研讨会，以便我们做些什么

00:40:29.120 --> 00:40:34.880
尝试做的是快速浏览一下

00:40:33.110 --> 00:40:36.950
视频，看看我们是否可以编辑

00:40:34.880 --> 00:40:38.600
这样，至少我们没有大的

00:40:36.950 --> 00:40:40.880
差距，我们正在失去声音，所以会

00:40:38.600 --> 00:40:43.580
也许把那些切碎然后缝起来

00:40:40.880 --> 00:40:47.050
他们一起回到任何特别的地方

00:40:43.580 --> 00:40:52.040
为Gradle包装器设置的要求

00:40:47.050 --> 00:40:55.160
嗯，但不清楚

00:40:52.040 --> 00:40:56.840
好的，我没有了

00:40:55.160 --> 00:40:59.030
信息，如果写信的人

00:40:56.840 --> 00:41:03.800
这个问题也许可以增加更多

00:40:59.030 --> 00:41:11.690
细节真的很有用

00:41:03.800 --> 00:41:15.790
好吧，还有很多关于失踪的事情

00:41:11.690 --> 00:41:19.340
听起来很好，我会去解决这个问题

00:41:15.790 --> 00:41:20.960
你有没有启用复合

00:41:19.340 --> 00:41:22.430
我认为在Gradle项目部分构建

00:41:20.960 --> 00:41:24.440
那是我做演示的时候，我

00:41:22.430 --> 00:41:26.330
以为我表明我使自己感到舒适

00:41:24.440 --> 00:41:28.280
建立好，有人建议我

00:41:26.330 --> 00:41:33.260
使缓存无效并重新启动那是一个

00:41:28.280 --> 00:41:35.120
非常有用的建议，如果我们愿意

00:41:33.260 --> 00:41:37.130
能够使用委托来建立一个

00:41:35.120 --> 00:41:41.980
今天要Gradle我们需要做什么

00:41:37.130 --> 00:41:41.980
正在设置Gradle include build和

00:41:42.070 --> 00:41:46.910
两者都应该工作，所以我认为

00:41:44.570 --> 00:41:50.950
我们在演示中看到的是

00:41:46.910 --> 00:41:54.500
使用时运行Gradle任务

00:41:50.950 --> 00:41:57.980
没有的复合配置用户界面

00:41:54.500 --> 00:42:03.320
我确定Trisha是办公室工作

00:41:57.980 --> 00:42:06.050
它已经为Bill定义了

00:42:03.320 --> 00:42:07.970
与每个Gradle的设置，所以它应该

00:42:06.050 --> 00:42:10.310
感觉工作透明，应该

00:42:07.970 --> 00:42:11.960
和委托构建运行到Gradle 

00:42:10.310 --> 00:42:13.910
所有的东西都应该为

00:42:11.960 --> 00:42:15.950
无论您是否从

00:42:13.910 --> 00:42:18.140
在IDE内摇篮无论您是否

00:42:15.950 --> 00:42:20.120
运行IDE版本或是否正在运行

00:42:18.140 --> 00:42:22.360
将IDE构建委托给Gradle 

00:42:20.120 --> 00:42:24.980
如你所见，在那里建立

00:42:22.360 --> 00:42:28.400
我们称他们为

00:42:24.980 --> 00:42:30.200
改善，正如我所说，您知道

00:42:28.400 --> 00:42:31.370
这是一个抢先体验， 

00:42:30.200 --> 00:42:33.170
这对我们来说是个好消息，因为

00:42:31.370 --> 00:42:35.750
当我们发现这些问题时，这意味着

00:42:33.170 --> 00:42:37.370
我们可以在发布前修复它们，因此所有

00:42:35.750 --> 00:42:39.050
这应该在以下方面无缝地工作

00:42:37.370 --> 00:42:40.610
是否从Gradle运行它

00:42:39.050 --> 00:42:44.120
无论您是否从IDE运行它

00:42:40.610 --> 00:42:45.440
代表ide构建Gradle是CLI 

00:42:44.120 --> 00:42:49.190
支持复合材料

00:42:45.440 --> 00:42:52.450
包含在几乎次要版本中

00:42:49.190 --> 00:42:54.950
在桌子上，每个人都喝一口

00:42:52.450 --> 00:42:56.930
您可以在调试模式下运行并进入

00:42:54.950 --> 00:42:58.910
包含的版本中的代码

00:42:56.930 --> 00:43:00.410
绝对那是

00:42:58.910 --> 00:43:02.210
指出，因此，如果您要调试并且

00:43:00.410 --> 00:43:04.580
在其中包含断点

00:43:02.210 --> 00:43:07.790
项目，那么您应该能够停止

00:43:04.580 --> 00:43:09.290
在那些断点处，所以会建立

00:43:07.790 --> 00:43:10.430
如果添加了复合材料，则源工作

00:43:09.290 --> 00:43:15.110
在构建源设置中构建

00:43:10.430 --> 00:43:16.640
摇篮某人真的想得到

00:43:15.110 --> 00:43:25.579
特别

00:43:16.640 --> 00:43:28.099
这绝对是一个有效的观点

00:43:25.579 --> 00:43:31.309
我还没说实话

00:43:28.099 --> 00:43:36.769
没有尝试过我的失败尝试一下

00:43:31.309 --> 00:43:38.539
如果没有请打开错误

00:43:36.769 --> 00:43:40.760
合成构建工作以换出

00:43:38.539 --> 00:43:42.829
具有旧的Apply语法的插件

00:43:40.760 --> 00:43:46.910
和新的插件语法或仅

00:43:42.829 --> 00:43:49.640
不幸的是，新语法仅适用于

00:43:46.910 --> 00:43:51.680
目前的旧版构建脚本语法

00:43:49.640 --> 00:43:55.220
因为新的报告语法是

00:43:51.680 --> 00:43:59.180
根据特别出版物特别

00:43:55.220 --> 00:44:01.609
所谓的插件标记和兼容

00:43:59.180 --> 00:44:04.279
尚不支持自定义出版物

00:44:01.609 --> 00:44:09.170
这就是为什么功能超高的原因

00:44:04.279 --> 00:44:10.220
如果有的话，优先修复三个月

00:44:09.170 --> 00:44:12.319
可用于提交更改的工具

00:44:10.220 --> 00:44:15.109
一旦提交到他们分开

00:44:12.319 --> 00:44:17.650
回购我使用了墨水字符串utils和number 

00:44:15.109 --> 00:44:20.690
 utils，所以我相信这里的问题是

00:44:17.650 --> 00:44:23.329
在项目中超级有一个开放我

00:44:20.690 --> 00:44:25.339
没有一个开放但我说

00:44:23.329 --> 00:44:27.349
更改为问候插件，我

00:44:25.339 --> 00:44:29.720
如果我做一个改变消费者

00:44:27.349 --> 00:44:32.269
在IntelliJ IDEA内部提交将使

00:44:29.720 --> 00:44:35.359
将这些更改提交到

00:44:32.269 --> 00:44:37.400
个别不同的仓库，你没有

00:44:35.359 --> 00:44:39.049
承诺你必须承诺每个

00:44:37.400 --> 00:44:40.849
单独给自己的仓库

00:44:39.049 --> 00:44:42.680
我相信我还没有尝试过

00:44:40.849 --> 00:44:44.750
我正在与多个仓库项目合作

00:44:42.680 --> 00:44:47.450
通常手动确保

00:44:44.750 --> 00:44:51.789
将每组更改提交给

00:44:47.450 --> 00:44:53.839
正确的回购将与

00:44:51.789 --> 00:44:56.569
配置卡住了所有分辨率

00:44:53.839 --> 00:44:58.400
策略因版本冲突而失败是

00:44:56.569 --> 00:45:02.059
包含在库中的复合

00:44:58.400 --> 00:45:02.869
符合我不依赖的另一个依赖

00:45:02.059 --> 00:45:03.319
知道什么意思你知道什么

00:45:02.869 --> 00:45:05.569
那意味着

00:45:03.319 --> 00:45:07.369
好吧，它可以与配置一起使用

00:45:05.569 --> 00:45:10.160
就像同伴版本冲突一样

00:45:07.369 --> 00:45:13.630
复合材料包括一个库

00:45:10.160 --> 00:45:18.160
与另一个依赖冲突

00:45:13.630 --> 00:45:21.170
否，因为依赖替换是

00:45:18.160 --> 00:45:24.650
不是基于版本，所以一个项目

00:45:21.170 --> 00:45:27.529
依赖关系仅由

00:45:24.650 --> 00:45:30.109
专有名称，因此实际上不会

00:45:27.529 --> 00:45:34.369
碰撞，否则将只是产品

00:45:30.109 --> 00:45:39.289
我们会没事的

00:45:34.369 --> 00:45:41.059
只能与它一起使用哦，这是一个

00:45:39.289 --> 00:45:42.440
说唱歌手更加清晰

00:45:41.059 --> 00:45:44.289
应该与Gradle说唱歌手一起使用

00:45:42.440 --> 00:45:47.869
对构建脚本的任何更改均正确

00:45:44.289 --> 00:45:49.069
是的，我强烈建议大家

00:45:47.869 --> 00:45:50.509
使用Gradle包装器及其所有

00:45:49.069 --> 00:45:51.619
是的，我是

00:45:50.509 --> 00:45:53.210
我不必担心的评分应用程序

00:45:51.619 --> 00:45:56.029
正在使用哪个版本的Gradle 

00:45:53.210 --> 00:45:57.140
希望弯曲，你尝试过这个吗

00:45:56.029 --> 00:46:00.559
作为git子模块

00:45:57.140 --> 00:46:02.930
如果是的话，那是完全无缝的吗？ 

00:46:00.559 --> 00:46:05.920
模块当然非常接近

00:46:02.930 --> 00:46:09.230
我在中显示的modules文件夹

00:46:05.920 --> 00:46:10.579
主持人示例嗯，我个人不

00:46:09.230 --> 00:46:13.940
在获取子项方面有很多经验

00:46:10.579 --> 00:46:14.779
说实话的模块，但如果您使用的是

00:46:13.940 --> 00:46:18.289
子模块

00:46:14.779 --> 00:46:20.450
你知道而不必放弃Gradle 

00:46:18.289 --> 00:46:23.089
就算您成功使用了git 

00:46:20.450 --> 00:46:25.059
一般子模块或该gif 

00:46:23.089 --> 00:46:27.140
老师，那对你很好

00:46:25.059 --> 00:46:28.940
复合版本应该可以正常工作，所以您

00:46:27.140 --> 00:46:31.099
例如只会使用for循环

00:46:28.940 --> 00:46:35.150
遍历子模块文件夹

00:46:31.099 --> 00:46:36.799
并包括那些很棒的想法

00:46:35.150 --> 00:46:39.829
看起来像我们所有的问题

00:46:36.799 --> 00:46:40.910
希望我们能够写出来

00:46:39.829 --> 00:46:42.710
这些问题的答案，以及

00:46:40.910 --> 00:46:45.259
也许将它们包含在博客文章中，或者

00:46:42.710 --> 00:46:47.150
像我一样把它们放在本视频的结尾

00:46:45.259 --> 00:46:50.450
在此视频可用之前说

00:46:47.150 --> 00:46:53.029
大概几天后，将会

00:46:50.450 --> 00:46:55.430
公开感谢您非常感谢

00:46:53.029 --> 00:46:59.599
 Han演示组合物构建论坛

00:46:55.430 --> 00:47:04.779
或更开放的视野，是的，谢谢

00:46:59.599 --> 00:47:04.779
大家再见

