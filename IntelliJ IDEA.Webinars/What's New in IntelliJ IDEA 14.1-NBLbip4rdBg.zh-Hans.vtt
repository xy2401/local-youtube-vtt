WEBVTT
Kind: captions
Language: zh-Hans

00:00:00.000 --> 00:00:03.689
所以这次网络研讨会的格式是

00:00:01.979 --> 00:00:05.670
将在上半年覆盖

00:00:03.689 --> 00:00:08.610
以及对您的改进所做的更改

00:00:05.670 --> 00:00:11.429
版本控制重构

00:00:08.610 --> 00:00:13.889
热电联产D编译器和调试器

00:00:11.429 --> 00:00:15.960
还有一些小的变化

00:00:13.889 --> 00:00:17.369
第二个添加到编辑器中

00:00:15.960 --> 00:00:18.600
网络研讨会Brendan的一半要参加

00:00:17.369 --> 00:00:20.010
涵盖一些变化， 

00:00:18.600 --> 00:00:22.680
框架和库的改进

00:00:20.010 --> 00:00:26.130
像Android和spring以及医生

00:00:22.680 --> 00:00:28.260
整合我想做的第一件事

00:00:26.130 --> 00:00:30.150
显示是对的一些新更改

00:00:28.260 --> 00:00:31.439
版本控制您的第一件事

00:00:30.150 --> 00:00:33.510
可能注意到这第一件事

00:00:31.439 --> 00:00:35.040
对我来说很突出

00:00:33.510 --> 00:00:37.140
先生，您现在只有一个

00:00:35.040 --> 00:00:38.550
单一类型标签，称为版本

00:00:37.140 --> 00:00:40.379
控制他们曾经是一个版本

00:00:38.550 --> 00:00:43.079
控制一个，它改变一个我

00:00:40.379 --> 00:00:44.760
发现有些困惑，现在他们

00:00:43.079 --> 00:00:46.320
在一个选项卡中，您可以

00:00:44.760 --> 00:00:49.350
单击以获取与之相关的所有信息

00:00:46.320 --> 00:00:52.770
版本控制，所以在这里我可以看到我的

00:00:49.350 --> 00:00:54.800
本地更改和我可以查看的日志

00:00:52.770 --> 00:00:57.840
所有已提交的提交

00:00:54.800 --> 00:00:59.399
进入我的版本控制之一

00:00:57.840 --> 00:01:01.530
我想在这里谈论的事情在

00:00:59.399 --> 00:01:04.170
我实际上已经完成了这个特别的项目

00:01:01.530 --> 00:01:06.090
扎根于VCS的根源

00:01:04.170 --> 00:01:08.159
我有一个去github 

00:01:06.090 --> 00:01:10.619
由于太无聊的原因

00:01:08.159 --> 00:01:14.340
如果您单击此处进入

00:01:10.619 --> 00:01:17.100
提交的左边，这可以

00:01:14.340 --> 00:01:20.640
查看哪些提交去往哪个VCS路由

00:01:17.100 --> 00:01:24.299
并单击“路径”按钮

00:01:20.640 --> 00:01:26.460
我可以选择隐藏其中之一

00:01:24.299 --> 00:01:28.439
或者如果我有一个以上并隐藏更多

00:01:26.460 --> 00:01:29.790
比一个，所以我可以选择哪个

00:01:28.439 --> 00:01:31.680
可见，所以这给了我更多

00:01:29.790 --> 00:01:33.240
准确了解正在发生的事情

00:01:31.680 --> 00:01:37.290
与我的特定版本控制

00:01:33.240 --> 00:01:38.700
下次我敢说我可以

00:01:37.290 --> 00:01:41.579
向您展示这个项目，因为所有

00:01:38.700 --> 00:01:45.600
提交是我的名字，但如果我搬家

00:01:41.579 --> 00:01:49.110
我可以去一个稍微不同的项目

00:01:45.600 --> 00:01:52.439
您将成为自己的亮点，因此

00:01:49.110 --> 00:01:54.350
如果我在这里打开高亮迈克小姐

00:01:52.439 --> 00:01:57.210
你会看到一种淡黄色

00:01:54.350 --> 00:01:58.950
这些都是我所做的承诺

00:01:57.210 --> 00:02:00.630
这个特殊的项目，所以这是相当

00:01:58.950 --> 00:02:02.310
找到类似东西的好方法

00:02:00.630 --> 00:02:04.619
很明显，您所做的特定提交

00:02:02.310 --> 00:02:06.060
但也看到了可能以及如何

00:02:04.619 --> 00:02:07.860
许多其他人的承诺是

00:02:06.060 --> 00:02:09.060
自上次提交以来

00:02:07.860 --> 00:02:10.649
我认为那是超级好

00:02:09.060 --> 00:02:12.270
在您正常的项目中很有用

00:02:10.649 --> 00:02:14.870
与其他许多人合作

00:02:12.270 --> 00:02:14.870
事态发展

00:02:15.870 --> 00:02:23.049
对于版本控制的其他更改是

00:02:20.459 --> 00:02:25.680
如果您还记得是否曾经使用过

00:02:23.049 --> 00:02:28.870
在您可以使用

00:02:25.680 --> 00:02:31.900
热量和修订， 

00:02:28.870 --> 00:02:33.340
专用于代码行，因此

00:02:31.900 --> 00:02:36.459
例子我可以看到这行代码

00:02:33.340 --> 00:02:40.389
改变在这里，由我自己，如果我向上滚动

00:02:36.459 --> 00:02:43.329
到顶部，然后看到其他变化

00:02:40.389 --> 00:02:45.250
和其他人合而为一的15.1 

00:02:43.329 --> 00:02:48.280
我们所做的更改是这些

00:02:45.250 --> 00:02:50.230
更改使用颜色编码，因此旧更改

00:02:48.280 --> 00:02:52.780
是红色或红色阴影， 

00:02:50.230 --> 00:02:54.879
我们可以看到较新的阴影

00:02:52.780 --> 00:02:57.519
绿色的那种

00:02:54.879 --> 00:03:02.500
之间是一种公共的

00:02:57.519 --> 00:03:04.659
颜色，我猜是这样，如果我想要我是对的

00:03:02.500 --> 00:03:06.819
单击这些更改之一，我可以

00:03:04.659 --> 00:03:08.500
打开这个特定的版本

00:03:06.819 --> 00:03:10.840
具体修订并注释为

00:03:08.500 --> 00:03:12.609
好吧，如果我点击这个，那么我

00:03:10.840 --> 00:03:14.290
承认是这样的事情

00:03:12.609 --> 00:03:17.019
我所做的更改我添加了此特定内容

00:03:14.290 --> 00:03:19.810
其javadoc的方法，因为它是一个

00:03:17.019 --> 00:03:21.840
 javadoc公共方法的好主意

00:03:19.810 --> 00:03:25.959
查看文件其余部分的状态

00:03:21.840 --> 00:03:28.030
特殊的潜在攻击，您可能还会

00:03:25.959 --> 00:03:30.400
注意到还有另一个

00:03:28.030 --> 00:03:32.650
在那里有注释的选项

00:03:30.400 --> 00:03:34.180
现在可能不是立即修订

00:03:32.650 --> 00:03:36.099
很明显，这对我很有用，但是如果我

00:03:34.180 --> 00:03:37.750
在这里查找，我有两个更改

00:03:36.099 --> 00:03:39.400
到后面似乎会影响

00:03:37.750 --> 00:03:42.370
空白，似乎会影响

00:03:39.400 --> 00:03:44.379
方法，如果我看看它们， 

00:03:42.370 --> 00:03:46.259
一种影响白色空间的外观

00:03:44.379 --> 00:03:48.519
可能只是一种格式

00:03:46.259 --> 00:03:49.599
修订，所以我可能不想

00:03:48.519 --> 00:03:50.829
看看，因为它是

00:03:49.599 --> 00:03:53.949
可能只是空白， 

00:03:50.829 --> 00:03:55.659
压痕等等，对于这个

00:03:53.949 --> 00:03:57.519
我可能想注释上一个

00:03:55.659 --> 00:03:59.199
修订以查看更多

00:03:57.519 --> 00:04:01.629
之前发生的重大变化

00:03:59.199 --> 00:04:04.239
那么在这里我可以很好地看到

00:04:01.629 --> 00:04:06.099
空白空间的变化和事实

00:04:04.239 --> 00:04:10.090
所有这些方法已被转移

00:04:06.099 --> 00:04:11.919
我想做的最后一件事

00:04:10.090 --> 00:04:15.579
向您展示版本控制

00:04:11.919 --> 00:04:19.599
变化是有一种新的模式

00:04:15.579 --> 00:04:20.829
差异工具，所以如果我尝试，如果我变得性感

00:04:19.599 --> 00:04:26.080
显示我所做的更改之间的差异

00:04:20.829 --> 00:04:26.790
成为传统，我们僵硬地拥有了

00:04:26.080 --> 00:04:29.070
有

00:04:26.790 --> 00:04:31.290
文件在左侧，新文件在

00:04:29.070 --> 00:04:34.860
对的，我必须滚动一下

00:04:31.290 --> 00:04:36.840
在这方面我的改变值得

00:04:34.860 --> 00:04:40.800
特殊情况下我所做的是我做了一个

00:04:36.840 --> 00:04:42.690
通用参数，例如

00:04:40.800 --> 00:04:44.340
很多情况下这很有用，我

00:04:42.690 --> 00:04:46.590
认为很多人不介意

00:04:44.340 --> 00:04:48.810
并排比较，但有一个新

00:04:46.590 --> 00:04:51.540
查看器，或者我们可以选择一侧

00:04:48.810 --> 00:04:53.280
查看器，在这里我们可以看到原始的

00:04:51.540 --> 00:04:55.830
代码行或肯定是前一行

00:04:53.280 --> 00:04:57.870
顶部的代码行和新的

00:04:55.830 --> 00:05:00.000
直接在下面的代码行

00:04:57.870 --> 00:05:03.570
突出显示的特定更改

00:05:00.000 --> 00:05:04.920
如果您喜欢，则更绿色

00:05:03.570 --> 00:05:06.960
这给了我们更多的灵活性

00:05:04.920 --> 00:05:08.880
我们如何看待两者之间的差异

00:05:06.960 --> 00:05:12.690
文件的先前版本和

00:05:08.880 --> 00:05:15.360
我现在想做的新版本是

00:05:12.690 --> 00:05:18.150
继续进行重构中的更改

00:05:15.360 --> 00:05:21.420
哦，让这个项目，因为我完成了

00:05:18.150 --> 00:05:25.020
有了它，我们就可以开放

00:05:21.420 --> 00:05:27.630
项目，所以我认为的一件事是

00:05:25.020 --> 00:05:30.330
 IntelliJ IDEA 14.1真的很酷

00:05:27.630 --> 00:05:31.650
尽管有一些新的我

00:05:30.330 --> 00:05:33.990
保理，我给你看其中之一

00:05:31.650 --> 00:05:35.730
在一分钟内，现有的重构

00:05:33.990 --> 00:05:37.890
我们一直使用的时间实际上

00:05:35.730 --> 00:05:41.310
变得更聪明了，例如

00:05:37.890 --> 00:05:42.780
如果我要提取的提取方法

00:05:41.310 --> 00:05:44.910
先前版本中的此方法

00:05:42.780 --> 00:05:47.100
 IntelliJ，它将拉出那条线

00:05:44.910 --> 00:05:49.590
代码并将其放入方法中

00:05:47.100 --> 00:05:52.320
很棒，但是它不能做什么

00:05:49.590 --> 00:05:55.080
然后做的是找出上面的行是

00:05:52.320 --> 00:05:56.970
实际上与那条线非常相似，但是

00:05:55.080 --> 00:05:58.770
不完全相同，只是很小

00:05:56.970 --> 00:06:00.690
方法签名的变化将

00:05:58.770 --> 00:06:02.430
让我们重用那让我

00:06:00.690 --> 00:06:09.080
证明这一点，如果我把它拉出来

00:06:02.430 --> 00:06:12.720
进入一个方法，然后我们称之为打印

00:06:09.080 --> 00:06:13.890
在新版本中，让

00:06:12.720 --> 00:06:18.630
这个更大一点，我们可以看到它

00:06:13.890 --> 00:06:20.910
更好的情报表明我是

00:06:18.630 --> 00:06:22.920
也许你把这个字符串作为一个

00:06:20.910 --> 00:06:25.590
参数，那么也许我将能够

00:06:22.920 --> 00:06:27.720
用替换更多的代码实例

00:06:25.590 --> 00:06:30.660
这种新方法，所以我要接受

00:06:27.720 --> 00:06:32.580
我将要进行的签名更改

00:06:30.660 --> 00:06:34.740
最好也替换在顶部

00:06:32.580 --> 00:06:37.500
找到了另一个我可以使用的地方

00:06:34.740 --> 00:06:38.910
该方法，让我们替换掉我

00:06:37.500 --> 00:06:40.500
不知道你是否能看到，但是就在

00:06:38.910 --> 00:06:42.560
屏幕底部

00:06:40.500 --> 00:06:45.300
显示我正在使用的快捷方式

00:06:42.560 --> 00:06:47.850
做类似提取方法的事情

00:06:45.300 --> 00:06:48.900
在Windows上，所以我正在使用Windows的，但

00:06:47.850 --> 00:06:51.210
在底部，它将向您显示

00:06:48.900 --> 00:06:52.920
 Windows和地图绑定以及

00:06:51.210 --> 00:06:54.930
 Windows的通常非常类似于

00:06:52.920 --> 00:07:01.290
 Linux的，所以我不会忽略

00:06:54.930 --> 00:07:04.590
 Linux专家等也摘录

00:07:01.290 --> 00:07:06.780
方法更改是如果我们要提取

00:07:04.590 --> 00:07:08.490
我这里有一个方法

00:07:06.780 --> 00:07:11.850
实例方法，这里我有一个静态

00:07:08.490 --> 00:07:13.350
方法，如果我提取这个我成功

00:07:11.850 --> 00:07:17.010
再次使用罢工方法

00:07:13.350 --> 00:07:20.030
打印它再次为我提供相同的东西

00:07:17.010 --> 00:07:21.930
要我把它拉进打印机

00:07:20.030 --> 00:07:25.770
所以没关系

00:07:21.930 --> 00:07:28.530
我刚刚演示了

00:07:25.770 --> 00:07:30.450
我可以用新的代替

00:07:28.530 --> 00:07:33.210
方法调用，但需要将其转换为

00:07:30.450 --> 00:07:35.370
静态方法，如果这样做的话，如果我

00:07:33.210 --> 00:07:36.750
替换那里也许它弄清楚了

00:07:35.370 --> 00:07:38.400
这个新方法必须是静态的

00:07:36.750 --> 00:07:39.870
方法，但是没关系，因为它

00:07:38.400 --> 00:07:43.080
并没有真正影响这些

00:07:39.870 --> 00:07:45.930
调用该方法的两个地方

00:07:43.080 --> 00:07:47.669
提取方法intellij的想法只是

00:07:45.930 --> 00:07:49.400
在某些方面变得更聪明

00:07:47.669 --> 00:07:52.380
可能有的地方

00:07:49.400 --> 00:07:53.880
略有不同的形状可以复制

00:07:52.380 --> 00:07:57.210
使用我们已经分区的这些方法

00:07:53.880 --> 00:07:58.950
我们已经提取了，但不仅仅是

00:07:57.210 --> 00:08:02.580
提取已更改的方法

00:07:58.950 --> 00:08:04.560
是这样，呼叫层次结构是，但是如果

00:08:02.580 --> 00:08:06.419
例如，如果我们改变形状

00:08:04.560 --> 00:08:08.880
如果我们更改方法的

00:08:06.419 --> 00:08:11.940
方法参数我们也可以找出

00:08:08.880 --> 00:08:13.680
我要做一些更聪明的事情

00:08:11.940 --> 00:08:16.260
在此处向此方法添加参数

00:08:13.680 --> 00:08:18.120
我们所拥有的是称为fu cos的方法

00:08:16.260 --> 00:08:19.650
 bar方法称为bar，它调用bar 

00:08:18.120 --> 00:08:21.479
还有一种叫做Bears的方法

00:08:19.650 --> 00:08:23.970
没什么，但显然这是一个

00:08:21.479 --> 00:08:25.800
大大超过简化的例子，但

00:08:23.970 --> 00:08:28.110
想象一下，如果您有一个多层

00:08:25.800 --> 00:08:32.039
架构，找到一个并不少见

00:08:28.110 --> 00:08:33.780
调用层次结构，其中说一个方法

00:08:32.039 --> 00:08:35.909
您的服务层原因方法

00:08:33.780 --> 00:08:38.460
道层导致另一种方法

00:08:35.909 --> 00:08:41.070
其他地方，所以你可能有

00:08:38.460 --> 00:08:44.219
整个您的方法调用堆栈

00:08:41.070 --> 00:08:46.950
现在假设您要添加层次结构

00:08:44.219 --> 00:08:50.490
我是这种快速方法的参数

00:08:46.950 --> 00:08:52.709
要添加翻译

00:08:50.490 --> 00:08:54.060
叫我，因为我不会

00:08:52.709 --> 00:08:55.670
称它为整数，因为这是一个好主意

00:08:54.060 --> 00:08:58.649
调用方法作为调用参数

00:08:55.670 --> 00:09:00.510
有用的东西很好

00:08:58.649 --> 00:09:02.339
显然有一个功能

00:09:00.510 --> 00:09:04.399
 intellij中未充分使用的功能

00:09:02.339 --> 00:09:07.380
已经有一段时间了，这是

00:09:04.399 --> 00:09:11.850
传播参数功能，如果我

00:09:07.380 --> 00:09:14.910
听说这是我的选择

00:09:11.850 --> 00:09:16.709
从所有传播此参数

00:09:14.910 --> 00:09:18.779
通过酒吧和食物的方式

00:09:16.709 --> 00:09:21.480
因此，如果我选择foo，它将添加

00:09:18.779 --> 00:09:23.160
因为所有这些方法的参数

00:09:21.480 --> 00:09:25.230
它的死亡，我要重构这个

00:09:23.160 --> 00:09:27.660
测试，现在您可以看到我已经有了

00:09:25.230 --> 00:09:29.430
我所有的整数参数

00:09:27.660 --> 00:09:30.750
方法，这很好，显然是

00:09:29.430 --> 00:09:35.550
已经有一段时间了

00:09:30.750 --> 00:09:37.920
我知道的其中一项

00:09:35.550 --> 00:09:40.800
 14.1中即将进行的更改是

00:09:37.920 --> 00:09:43.470
如果我想例如现在删除此

00:09:40.800 --> 00:09:47.310
参数，因为我将不使用

00:09:43.470 --> 00:09:49.470
删除而不删除IntelliJ IDEA 

00:09:47.310 --> 00:09:51.899
检测到它也可以从中删除它

00:09:49.470 --> 00:09:53.490
以及呼叫层次结构

00:09:51.899 --> 00:09:58.560
单击foo，然后将其从所有

00:09:53.490 --> 00:10:01.709
这些方法同样有效

00:09:58.560 --> 00:10:05.640
如果我想使此方法静态

00:10:01.709 --> 00:10:08.430
重构使其静态，我们在那里分解

00:10:05.640 --> 00:10:11.149
 IntelliJ问我是否要

00:10:08.430 --> 00:10:16.410
我做的所有那些静态方法

00:10:11.149 --> 00:10:17.820
然后最后这个方法foo不是

00:10:16.410 --> 00:10:19.740
被使用并不奇怪，因为它是

00:10:17.820 --> 00:10:21.300
一个例子，但让我们说我们的顶级

00:10:19.740 --> 00:10:24.230
我们不再想要使用该方法

00:10:21.300 --> 00:10:26.430
删除它们然后IntelliJ IDEA 

00:10:24.230 --> 00:10:27.959
弄清楚我们可以删除所有

00:10:26.430 --> 00:10:32.459
这些方法，因为它们仅被使用

00:10:27.959 --> 00:10:33.839
在这个很酷的层次结构中

00:10:32.459 --> 00:10:35.610
方式的相当不错的改变

00:10:33.839 --> 00:10:37.200
 IntelliJ IDEA中的重构工作

00:10:35.610 --> 00:10:38.940
我们真的不需要学习那么多

00:10:37.200 --> 00:10:41.760
只是IntelliJ的新事物

00:10:38.940 --> 00:10:42.959
在什么时候向你建议其他事情

00:10:41.760 --> 00:10:45.470
您正在尝试重构那些

00:10:42.959 --> 00:10:49.800
也许以前没给你建议

00:10:45.470 --> 00:10:51.470
现在，我想向您展示

00:10:49.800 --> 00:10:54.270
我想的很酷的东西

00:10:51.470 --> 00:10:56.010
 IntelliJ IDEA要塞很重要

00:10:54.270 --> 00:10:58.230
不同的项目，因为你

00:10:56.010 --> 00:11:00.630
在RT点之前就知道了

00:10:58.230 --> 00:11:02.880
所以我想告诉你如何提取一个

00:11:00.630 --> 00:11:04.019
功能参数，现在我们都在使用

00:11:02.880 --> 00:11:06.179
 Java 8对

00:11:04.019 --> 00:11:07.980
或考虑使用Java 8是

00:11:06.179 --> 00:11:09.929
其他人，那么我们开始

00:11:07.980 --> 00:11:11.819
考虑更多功能

00:11:09.929 --> 00:11:13.739
模式，所以我们不只是在谈论

00:11:11.819 --> 00:11:15.809
绕过物体或绕过

00:11:13.739 --> 00:11:17.639
就像这里的布尔值或整数

00:11:15.809 --> 00:11:19.559
珍惜那里，我们可能会过去

00:11:17.639 --> 00:11:22.739
功能，所以我们可能会过去

00:11:19.559 --> 00:11:25.610
 lambdas，所以intellij的想法正在重构

00:11:22.739 --> 00:11:28.499
已经改变以帮助我们做到这一点

00:11:25.610 --> 00:11:31.049
所以说我们想要我所拥有的

00:11:28.499 --> 00:11:32.970
这是我有做三个的方法

00:11:31.049 --> 00:11:35.279
非常相似的东西取决于

00:11:32.970 --> 00:11:37.319
不同的标准，所以我要去做

00:11:35.279 --> 00:11:39.569
这很高兴这是

00:11:37.319 --> 00:11:41.339
现在很困惑，看起来像一个

00:11:39.569 --> 00:11:43.619
重构的正确地方，因为我

00:11:41.339 --> 00:11:50.759
重复代码，让我们尝试重构

00:11:43.619 --> 00:11:54.029
我们称之为增量派，所以我已经

00:11:50.759 --> 00:11:56.489
方法增量派让我们来做一些

00:11:54.029 --> 00:12:03.809
听起来像是我的重构

00:11:56.489 --> 00:12:05.369
我要很好地提取此参数

00:12:03.809 --> 00:12:09.809
要将其提取为参数

00:12:05.369 --> 00:12:12.449
我们现在也叫那个馅饼

00:12:09.809 --> 00:12:15.329
 IntelliJ计算出该代码可以

00:12:12.449 --> 00:12:18.569
替换为此方法，调用airs on 

00:12:15.329 --> 00:12:20.069
很好，所以我们减少了代码

00:12:18.569 --> 00:12:22.589
复制并取出一个

00:12:20.069 --> 00:12:24.209
很棒的方法，但是我们可能会

00:12:22.589 --> 00:12:26.459
想做的就是再走一步

00:12:24.209 --> 00:12:29.160
也许我们想做点事

00:12:26.459 --> 00:12:32.999
比我们想要的更通用

00:12:29.160 --> 00:12:36.600
这是我认为的“如果做方法”，我们

00:12:32.999 --> 00:12:39.029
想做一些基于

00:12:36.600 --> 00:12:42.600
一些标准，所以我想做的是

00:12:39.029 --> 00:12:45.990
现在我可以把它拉成lambda 

00:12:42.600 --> 00:12:48.660
 ctrl shift alt p是一个

00:12:45.990 --> 00:12:50.999
额外的按钮可按以提取

00:12:48.660 --> 00:12:52.529
参数功能参数

00:12:50.999 --> 00:12:54.389
我正在尝试提取这是一个

00:12:52.529 --> 00:12:56.669
功能参数IntelliJ IDEA 

00:12:54.389 --> 00:12:58.769
建议一些功能

00:12:56.669 --> 00:13:00.749
正确的接口和

00:12:58.769 --> 00:13:04.139
此特定的正确签名

00:13:00.749 --> 00:13:06.209
调用，因此不需要任何参数，并且

00:13:04.139 --> 00:13:08.459
返回void，因此建议这些

00:13:06.209 --> 00:13:09.959
功能接口，也许我可以

00:13:08.459 --> 00:13:11.879
使用runnable很好，但也许我

00:13:09.959 --> 00:13:13.799
决定可运行有点

00:13:11.879 --> 00:13:15.649
通常对我来说，所以我想要的是

00:13:13.799 --> 00:13:17.370
我自己的界面，所以让我们

00:13:15.649 --> 00:13:21.300
接口

00:13:17.370 --> 00:13:26.610
称它为发酵罐吧

00:13:21.300 --> 00:13:28.770
它是我们需要的增量增量方法

00:13:26.610 --> 00:13:30.089
要在驱动程序8下标记此标签，我们需要

00:13:28.770 --> 00:13:34.080
应该将此作为功能

00:13:30.089 --> 00:13:36.630
现在，当我尝试提取时界面

00:13:34.080 --> 00:13:38.880
这是它提供的功能参数

00:13:36.630 --> 00:13:41.279
我作为有效的增量

00:13:38.880 --> 00:13:46.230
功能参数，让我们这样做

00:13:41.279 --> 00:13:48.779
让我们现在关闭，你会看到什么

00:13:46.230 --> 00:13:51.180
 IntelliJ所做的已将其作为

00:13:48.779 --> 00:13:52.710
一个班上的匿名者

00:13:51.180 --> 00:13:56.070
很好，因为实际上这意味着我们

00:13:52.710 --> 00:13:57.930
即使在非Java 8外套中也可以使用

00:13:56.070 --> 00:14:00.060
如果我们可以在Java 6代码中使用它

00:13:57.930 --> 00:14:01.710
想要特别是如果说我们不是

00:14:00.060 --> 00:14:03.390
使用Java 8，但我们正在尝试

00:14:01.710 --> 00:14:05.880
重构我们的代码使其更具功能

00:14:03.390 --> 00:14:06.900
我们到达那里之前的风格，然后也许我们

00:14:05.880 --> 00:14:09.089
要删除这种方式的人有一个

00:14:06.900 --> 00:14:11.730
有很多样板，所以如果我们

00:14:09.089 --> 00:14:13.950
使用Java 8然后我们可以做的就是使用

00:14:11.730 --> 00:14:15.420
一些情报检查

00:14:13.950 --> 00:14:18.450
帮助使我们的代码多一点

00:14:15.420 --> 00:14:19.830
例如，在这种情况下，我很简洁

00:14:18.450 --> 00:14:22.080
将使用方法参考，因为

00:14:19.830 --> 00:14:25.500
我认为那是最短的电线

00:14:22.080 --> 00:14:27.209
热能代表这个，但你不

00:14:25.500 --> 00:14:30.390
必须使用方法参考代码

00:14:27.209 --> 00:14:32.279
例如他们将其重构为一盏灯

00:14:30.390 --> 00:14:34.709
我可以将其用作lambda或

00:14:32.279 --> 00:14:37.260
方法参考，所以这是IntelliJ IDEA 

00:14:34.709 --> 00:14:38.790
支持拉出功能

00:14:37.260 --> 00:14:41.279
参数，以便您可以开始传递

00:14:38.790 --> 00:14:42.300
不仅仅是对象周围的一些行为

00:14:41.279 --> 00:14:44.640
我觉得那真的很有趣

00:14:42.300 --> 00:14:50.250
在新版本中的此功能

00:14:44.640 --> 00:14:52.230
 IDE以及我们进行的重构

00:14:50.250 --> 00:14:53.910
在代码生成方面也有一些变化

00:14:52.230 --> 00:14:55.680
我觉得这两件事正在进行中

00:14:53.910 --> 00:14:57.930
相当齐头并进，因为这两个

00:14:55.680 --> 00:14:59.310
事情是接管一些的想法

00:14:57.930 --> 00:15:02.400
不想的无聊的东西

00:14:59.310 --> 00:15:04.470
去做，只是让你继续

00:15:02.400 --> 00:15:08.520
与更多有趣的编码，所以

00:15:04.470 --> 00:15:11.370
让我们举个例子，等于

00:15:08.520 --> 00:15:16.650
哈希码让我找到一个或让其表示

00:15:11.370 --> 00:15:19.650
不行，让我找一些

00:15:16.650 --> 00:15:21.300
事情和等于对我有点

00:15:19.650 --> 00:15:23.610
 pojo，所以这是一个Twitter用户

00:15:21.300 --> 00:15:25.020
现在说一系列属性

00:15:23.610 --> 00:15:28.620
想要在其上添加一个equals方法

00:15:25.020 --> 00:15:30.650
我可以使用生成等于

00:15:28.620 --> 00:15:30.650
哈希码

00:15:30.880 --> 00:15:34.450
通常我可能会使用IntelliJ 

00:15:32.890 --> 00:15:38.170
默认，让我们看一下

00:15:34.450 --> 00:15:43.210
让我们使用intellij的默认值

00:15:38.170 --> 00:15:45.520
使所有这些都非0和IntelliJ 

00:15:43.210 --> 00:15:47.530
现在一般x等于方法

00:15:45.520 --> 00:15:49.600
我是花括号的忠实粉丝

00:15:47.530 --> 00:15:52.150
在我的嘴唇周围，所以我有点想

00:15:49.600 --> 00:15:53.770
看起来有点像这样，但我产生了

00:15:52.150 --> 00:15:56.140
代码看起来不像我想要的代码

00:15:53.770 --> 00:15:58.720
看起来，以便我可以更改模板

00:15:56.140 --> 00:16:01.780
对于我生成的代码

00:15:58.720 --> 00:16:05.350
符合我的要求，让我们回来吧

00:16:01.780 --> 00:16:08.230
再次出来，所以这次我们要

00:16:05.350 --> 00:16:10.900
插入r等于情节，我们可以选择

00:16:08.230 --> 00:16:12.700
这些所有现有默认值之一，或者

00:16:10.900 --> 00:16:15.160
我要做的是

00:16:12.700 --> 00:16:17.770
创建我自己的模板

00:16:15.160 --> 00:16:23.050
疯狂在这里的默认值，我们称之为

00:16:17.770 --> 00:16:25.600
没有项目的默认设置，我想要什么

00:16:23.050 --> 00:16:29.380
我要做的是继续前进

00:16:25.600 --> 00:16:31.150
这些宏这是领域

00:16:29.380 --> 00:16:34.300
比较，它只是用来

00:16:31.150 --> 00:16:38.170
生成他们的equals方法，所以我想要

00:16:34.300 --> 00:16:40.420
把花括号放在我周围

00:16:38.170 --> 00:16:42.400
耳朵现在您会发现我敦促您不要

00:16:40.420 --> 00:16:45.010
需要正确格式化这个我可以

00:16:42.400 --> 00:16:47.560
实际上只是让我陷入困境

00:16:45.010 --> 00:16:49.150
或多或少我想去的地方和时间

00:16:47.560 --> 00:16:50.500
 IntelliJ将插入此代码，它将

00:16:49.150 --> 00:16:52.660
根据您的代码格式化代码

00:16:50.500 --> 00:16:54.520
标准，所以说我做那些

00:16:52.660 --> 00:16:55.900
改变我要重命名这个，以便

00:16:54.520 --> 00:16:57.700
我知道这是已经改变的

00:16:55.900 --> 00:17:00.100
还要展示母亲的特征

00:16:57.700 --> 00:17:02.410
你，所以如果我必须允许这是

00:17:00.100 --> 00:17:04.360
叫你可以看到

00:17:02.410 --> 00:17:06.579
智能为您提供一些代码提示

00:17:04.360 --> 00:17:08.230
甚至在这个模板的盒子里面，所以

00:17:06.579 --> 00:17:10.750
告诉我不再有宏

00:17:08.230 --> 00:17:12.850
叫做添加比较字段，那么

00:17:10.750 --> 00:17:14.500
我能做的是我可以寻找东西

00:17:12.850 --> 00:17:17.290
这是正确的，所以我想要项目领域

00:17:14.500 --> 00:17:20.589
比较，这样我就可以获得自动完成功能

00:17:17.290 --> 00:17:22.329
即使在此模板内，让我们来看

00:17:20.589 --> 00:17:24.459
我已将此项目发布为默认值

00:17:22.329 --> 00:17:26.290
更改了我的默认设置，使它卷曲了

00:17:24.459 --> 00:17:29.140
大括号在那里，应该

00:17:26.290 --> 00:17:33.550
我想做的所有事情都让我们点击

00:17:29.140 --> 00:17:36.160
通过单击所有这些现在当我

00:17:33.550 --> 00:17:38.650
得到我的本机代码我有花括号

00:17:36.160 --> 00:17:39.970
用我的精力等于代码，所以这是

00:17:38.650 --> 00:17:41.650
对我们来说是一个很好的功能

00:17:39.970 --> 00:17:43.540
如果我们希望我们的代码遵循特定的

00:17:41.650 --> 00:17:44.540
准则，我们可以有代码

00:17:43.540 --> 00:17:46.460
一代跟随

00:17:44.540 --> 00:17:48.440
准则，我们也不必

00:17:46.460 --> 00:17:53.240
忍受插入的任何东西

00:17:48.440 --> 00:17:56.210
接下来我们的代码中，我只有两个

00:17:53.240 --> 00:17:59.720
接下来我想向您展示更多领域

00:17:56.210 --> 00:18:03.500
我将继续使用C编译器

00:17:59.720 --> 00:18:07.160
和调试，因此在IntelliJ IDEA中

00:18:03.500 --> 00:18:09.740
青少年在参加考试班

00:18:07.160 --> 00:18:11.450
 IntelliJ IDEA 14我们有很多

00:18:09.740 --> 00:18:13.400
调试方面的改进

00:18:11.450 --> 00:18:15.590
我们有内置的想法

00:18:13.400 --> 00:18:18.470
反编译，所以如果我钻到代码

00:18:15.590 --> 00:18:20.080
我不拥有，所以例如在这里我

00:18:18.470 --> 00:18:22.250
实际上没有来源

00:18:20.080 --> 00:18:23.660
情报告诉我这很

00:18:22.250 --> 00:18:25.940
小文字，很难

00:18:23.660 --> 00:18:29.420
看到的，但这是一个反编译的分类器

00:18:25.940 --> 00:18:32.540
所以它是基于

00:18:29.420 --> 00:18:34.250
字节码，这使我可读

00:18:32.540 --> 00:18:37.550
代码，以便我了解发生了什么

00:18:34.250 --> 00:18:40.550
现在可以在IntelliJ 14中使用

00:18:37.550 --> 00:18:42.290
但在14.1中我实际上可以添加自己的

00:18:40.550 --> 00:18:44.750
这里的断点并逐步执行

00:18:42.290 --> 00:18:46.700
调试它，就像几乎是我自己的一样

00:18:44.750 --> 00:18:48.650
我拥有的代码给我很多

00:18:46.700 --> 00:18:50.450
即使在

00:18:48.650 --> 00:18:52.370
不是我的，因为我想弄清楚

00:18:50.450 --> 00:18:53.990
也许是一个特殊的问题或尝试

00:18:52.370 --> 00:18:58.550
弄清楚到底是怎么工作的

00:18:53.990 --> 00:19:00.830
所以我在这里放一个断点

00:18:58.550 --> 00:19:03.380
回到我的文字，如果我开始

00:19:00.830 --> 00:19:06.140
运行此，让我们开始调试

00:19:03.380 --> 00:19:08.030
它而不是运行它，我们可以看到

00:19:06.140 --> 00:19:13.640
我们可以看到的一些调试是

00:19:08.030 --> 00:19:15.200
做应该做的事

00:19:13.640 --> 00:19:19.430
非常喜欢新的调试功能

00:19:15.200 --> 00:19:21.410
无论如何，在版本14中，我认为

00:19:19.430 --> 00:19:23.360
这是在14.1中，我们得到了这些新的

00:19:21.410 --> 00:19:27.730
按钮，所以一切都很好

00:19:23.360 --> 00:19:30.020
闪亮和新颖，让我们走进

00:19:27.730 --> 00:19:32.750
我们在这里调试的地方

00:19:30.020 --> 00:19:34.730
进入反编译类，而我可以

00:19:32.750 --> 00:19:37.190
介入并继续寻找东西或

00:19:34.730 --> 00:19:39.830
我要去的不同之处

00:19:37.190 --> 00:19:41.480
我的突破点，在这里我可以再次看到

00:19:39.830 --> 00:19:44.210
我进入的在线调试

00:19:41.480 --> 00:19:46.580
 IntelliJ 14在这里可用，因此

00:19:44.210 --> 00:19:49.370
我可以看到实际值是一

00:19:46.580 --> 00:19:51.020
期望值为2，这是

00:19:49.370 --> 00:19:53.270
我们要去的字符串描述

00:19:51.020 --> 00:19:55.880
得到所以我这绝对是

00:19:53.270 --> 00:19:58.960
失败，所以我可以看到为什么失败了， 

00:19:55.880 --> 00:19:58.960
价值是什么

00:20:01.420 --> 00:20:07.040
所以我最后要看的是

00:20:03.890 --> 00:20:09.790
我想展示一些一般

00:20:07.040 --> 00:20:14.660
更改整体编辑器，所以让我们

00:20:09.790 --> 00:20:16.490
的最终项目以及许多

00:20:14.660 --> 00:20:17.930
变化使我们的生活成为

00:20:16.490 --> 00:20:22.310
开发人员容易一点

00:20:17.930 --> 00:20:23.570
例如，他们已经改变了

00:20:22.310 --> 00:20:25.790
诸如外观和感觉之类的东西

00:20:23.570 --> 00:20:29.960
标签，让我们看看标签

00:20:25.790 --> 00:20:32.180
在这里让我们快速拼写标签

00:20:29.960 --> 00:20:35.840
今天是糟糕的拼写天，让我们分开

00:20:32.180 --> 00:20:37.970
顶部的标签，如果我打开

00:20:35.840 --> 00:20:41.240
另一个标签在这里他们略有变化

00:20:37.970 --> 00:20:44.750
他们害怕爱它，所以那只是一个

00:20:41.240 --> 00:20:46.760
微小的增强，并谈到

00:20:44.750 --> 00:20:48.050
你可以看到，当你有

00:20:46.760 --> 00:20:49.310
这些事情很多，你有

00:20:48.050 --> 00:20:51.320
您的标签页打开，您已经拥有了

00:20:49.310 --> 00:20:53.750
窗户打开，你有一堆

00:20:51.320 --> 00:20:55.100
两侧的动词有很多

00:20:53.750 --> 00:20:57.830
东西进入的方式

00:20:55.100 --> 00:21:01.520
在你和你的实际代码之间

00:20:57.830 --> 00:21:04.190
的新模式是分散注意力，所以我

00:21:01.520 --> 00:21:06.260
可以进入无干扰模式

00:21:04.190 --> 00:21:08.240
摆脱了所有的混乱，我

00:21:06.260 --> 00:21:10.280
我可以只专注于我的代码

00:21:08.240 --> 00:21:12.770
仍然获得有用的信息，例如

00:21:10.280 --> 00:21:14.920
我已更改的代码行

00:21:12.770 --> 00:21:18.020
像一些错误的事情是

00:21:14.920 --> 00:21:20.270
我仍然可以在一边编码

00:21:18.020 --> 00:21:21.230
预期的方式和说话方式

00:21:20.270 --> 00:21:23.750
我将使用此模式

00:21:21.230 --> 00:21:27.110
展示一些新功能

00:21:23.750 --> 00:21:29.450
在HTML中，很容易更改

00:21:27.110 --> 00:21:31.460
并标记并忘记更改结束

00:21:29.450 --> 00:21:32.990
标签，我是说IntelliJ至少会告诉

00:21:31.460 --> 00:21:35.210
您，您缺少结束标记

00:21:32.990 --> 00:21:40.750
但是做这些事情很容易

00:21:35.210 --> 00:21:43.220
您设置的14.1中的简单错误

00:21:40.750 --> 00:21:46.940
同时进行标签编辑，如果我打开

00:21:43.220 --> 00:21:50.180
如果我改变的话，现在就可以了

00:21:46.940 --> 00:21:53.750
然后我的结束标签被更改为

00:21:50.180 --> 00:21:55.700
好吧，我可以在这里做，所以我知道

00:21:53.750 --> 00:21:57.590
我的HTML格式正确

00:21:55.700 --> 00:21:59.240
选项卡进行了哪些更改，以及

00:21:57.590 --> 00:22:00.740
有一个很好的方法只是停止

00:21:59.240 --> 00:22:05.420
我们犯了愚蠢的错误

00:22:00.740 --> 00:22:07.490
容易制作，我的左扬声器

00:22:05.420 --> 00:22:10.110
想展示我说再放两个

00:22:07.490 --> 00:22:14.549
浸在这里

00:22:10.110 --> 00:22:17.630
现在我可以做，我可以在里面创造两个诅咒

00:22:14.549 --> 00:22:20.850
按Shift + Alt，然后按

00:22:17.630 --> 00:22:24.540
用鼠标选择，我可以

00:22:20.850 --> 00:22:26.730
选择那些诅咒，它可以

00:22:24.540 --> 00:22:30.330
例如现在用两个

00:22:26.730 --> 00:22:33.660
几节经文，如果我创造

00:22:30.330 --> 00:22:36.720
下方还有两个光标

00:22:33.660 --> 00:22:39.299
在那里我可以粘贴这两个不同的

00:22:36.720 --> 00:22:41.520
价值观进入了两个新的位置

00:22:39.299 --> 00:22:42.690
诅咒，我认为这对于

00:22:41.520 --> 00:22:45.299
做诸如字符串操作之类的事情

00:22:42.690 --> 00:22:48.059
并在代码内移动内容

00:22:45.299 --> 00:22:51.410
这样你就可以整装待发

00:22:48.059 --> 00:22:56.520
代码或从中提取参数

00:22:51.410 --> 00:22:58.169
从具体的优势，我认为那是

00:22:56.520 --> 00:23:00.900
我所必须涵盖的所有内容

00:22:58.169 --> 00:23:03.330
我已经介绍了新的版本控制

00:23:00.900 --> 00:23:07.140
我介绍的重构功能

00:23:03.330 --> 00:23:09.630
我已经介绍了调试d的代码生成

00:23:07.140 --> 00:23:13.470
编译的代码，我已经介绍了一些

00:23:09.630 --> 00:23:16.740
对编辑器所做的更改，所以我们要

00:23:13.470 --> 00:23:18.270
切换到Tipton展示他的

00:23:16.740 --> 00:23:19.919
网络研讨会的一半，与此同时

00:23:18.270 --> 00:23:22.460
也许我们可以提出一些问题

00:23:19.919 --> 00:23:26.360
在我们交接的时候

00:23:22.460 --> 00:23:29.010
 Tricia um很棒，我真的很喜欢

00:23:26.360 --> 00:23:30.450
提取我认为的功能参数

00:23:29.010 --> 00:23:33.299
我会用很多保护

00:23:30.450 --> 00:23:35.070
我觉得那很酷

00:23:33.299 --> 00:23:39.990
认为这是我的新宠，我认为

00:23:35.070 --> 00:23:44.480
将来会经常使用

00:23:39.990 --> 00:23:47.790
我们有很多问题， 

00:23:44.480 --> 00:23:51.210
宝将继续回答他们

00:23:47.790 --> 00:23:54.990
网络研讨会屏幕，我将切换

00:23:51.210 --> 00:23:59.130
现在我的屏幕上，我会

00:23:54.990 --> 00:24:00.929
展示了三个新框架

00:23:59.130 --> 00:24:04.020
您会发现的技术

00:24:00.929 --> 00:24:08.429
 intellij 14.1的想法不是

00:24:04.020 --> 00:24:10.440
意味着全面，但是我认为他们

00:24:08.429 --> 00:24:14.640
突出一些非常好的功能

00:24:10.440 --> 00:24:17.700
获得框架支持，首先我们要去

00:24:14.640 --> 00:24:20.730
在 spring boot 上，所以有一个新的

00:24:17.700 --> 00:24:24.110
改进了对弹簧靴的支持，并

00:24:20.730 --> 00:24:26.130
我们将讨论如何部署

00:24:24.110 --> 00:24:29.370
使用docker真的很容易

00:24:26.130 --> 00:24:32.760
最后，我们将讨论一些新的

00:24:29.370 --> 00:24:37.080
对android支持的改进

00:24:32.760 --> 00:24:39.320
最新版本的IntelliJ IDEA，所以我

00:24:37.080 --> 00:24:43.710
将问题一直保留到最后

00:24:39.320 --> 00:24:46.230
我们会直接进入它，我有一个新的

00:24:43.710 --> 00:24:48.330
 spring boot 项目成立，并将

00:24:46.230 --> 00:24:50.970
快速查看如何设置新的

00:24:48.330 --> 00:24:54.360
使用向导启动springwood项目

00:24:50.970 --> 00:24:57.029
所以现在有一个Spring Boot初始化程序

00:24:54.360 --> 00:25:01.769
一个向导来帮助您启动和运行

00:24:57.029 --> 00:25:05.309
带有弹簧靴，因此您可以配置

00:25:01.769 --> 00:25:08.130
的所有初始化选项

00:25:05.309 --> 00:25:10.590
如果您使用的是Maven或

00:25:08.130 --> 00:25:13.549
基于Gradle的构建将能够

00:25:10.590 --> 00:25:16.080
在向导中告诉它，然后

00:25:13.549 --> 00:25:21.299
给它一个包装选项的语言

00:25:16.080 --> 00:25:24.929
依此类推，您需要选择一个

00:25:21.299 --> 00:25:26.700
核心依赖项的子集或

00:25:24.929 --> 00:25:28.830
您想要的技术垂直领域

00:25:26.700 --> 00:25:31.320
在您的spring内部很好的应用程序中使用

00:25:28.830 --> 00:25:35.070
并用弹簧靴做到了

00:25:31.320 --> 00:25:37.019
真的很容易使用约定

00:25:35.070 --> 00:25:40.220
春天，不必做很多事情

00:25:37.019 --> 00:25:44.820
配置，因此无论您使用

00:25:40.220 --> 00:25:51.419
这可以快速制作原型

00:25:44.820 --> 00:25:56.190
后端宁静的Web服务或保持

00:25:51.419 --> 00:26:00.389
用户面对的Web应用程序或其他东西

00:25:56.190 --> 00:26:03.750
否则你可以选择那些依赖

00:26:00.389 --> 00:26:05.610
您要导入的内容以及

00:26:03.750 --> 00:26:09.210
初始化向导会做的是

00:26:05.610 --> 00:26:12.299
配置您的Maven com或Gradle构建

00:26:09.210 --> 00:26:15.840
使用所有正确版本的脚本

00:26:12.299 --> 00:26:18.419
这些技术，并设置

00:26:15.840 --> 00:26:20.279
为您服务，因此您可以选择

00:26:18.419 --> 00:26:24.809
您想要的和springwood版本

00:26:20.279 --> 00:26:27.600
我认为spring boot 1.3是最近的

00:26:24.809 --> 00:26:30.720
就在本周发布，您可以使用

00:26:27.600 --> 00:26:34.470
所有这些都会拉低

00:26:30.720 --> 00:26:36.299
从一开始的项目模板

00:26:34.470 --> 00:26:37.460
春天，我哦，你将能够

00:26:36.299 --> 00:26:41.149
在您的内部使用

00:26:37.460 --> 00:26:44.480
 IED，因此现在已集成

00:26:41.149 --> 00:26:46.909
在IntelliJ IDEA中，它有助于

00:26:44.480 --> 00:26:49.880
迅速摆脱了

00:26:46.909 --> 00:26:52.279
使用什么样的技术

00:26:49.880 --> 00:26:56.059
几个简单的工作项目

00:26:52.279 --> 00:26:59.090
步骤，这是一个很棒的功能

00:26:56.059 --> 00:27:03.649
 spring boot ，现在打算使用IntelliJ IDEA 

00:26:59.090 --> 00:27:06.940
同样，但支持并没有结束

00:27:03.649 --> 00:27:09.710
在那里你可以进入你的 spring boot 

00:27:06.940 --> 00:27:12.820
应用程序，您可能不知道

00:27:09.710 --> 00:27:16.220
但您现在可以编辑属性文件

00:27:12.820 --> 00:27:19.130
在内部提供完整的代码帮助

00:27:16.220 --> 00:27:23.690
编辑，这真的很周到

00:27:19.130 --> 00:27:29.690
我认为完成了，所以代码完成了

00:27:23.690 --> 00:27:33.080
用于新的属性键，所以如果您不这样做

00:27:29.690 --> 00:27:36.200
知道整个全限定名

00:27:33.080 --> 00:27:39.740
对于键，您只需键入一个

00:27:36.200 --> 00:27:45.799
子字符串，然后从代码中选择

00:27:39.740 --> 00:27:50.240
完成，并且在完成

00:27:45.799 --> 00:27:52.909
价值，还有

00:27:50.240 --> 00:27:55.580
这些之间的导航支持

00:27:52.909 --> 00:28:00.350
这些属性及其属性

00:27:55.580 --> 00:28:03.559
 Java中的相关属性源

00:28:00.350 --> 00:28:06.500
这些对应于您可以的二传手

00:28:03.559 --> 00:28:09.409
指定是否有些东西

00:28:06.500 --> 00:28:13.580
在spring依赖中开始

00:28:09.409 --> 00:28:17.690
依赖项或自定义属性

00:28:13.580 --> 00:28:20.870
你可以自己定义

00:28:17.690 --> 00:28:23.240
有一个未定义的属性

00:28:20.870 --> 00:28:32.960
可以开始自己写我的习惯了

00:28:23.240 --> 00:28:36.590
属性，它会自动执行

00:28:32.960 --> 00:28:38.600
根据这些密钥进行验证

00:28:36.590 --> 00:28:41.990
说的很好，此属性不可用

00:28:38.600 --> 00:28:44.799
我们可以定义配置密钥和

00:28:41.990 --> 00:28:48.940
关于它的很多事情可以在里面创造出来

00:28:44.799 --> 00:28:48.940
在此JSON中，五个

00:28:49.560 --> 00:28:57.600
另外，即使您部署

00:28:54.360 --> 00:29:00.810
这到您的本地计算机

00:28:57.600 --> 00:29:03.720
有新的配置选项

00:29:00.810 --> 00:29:06.300
运行和调试配置，以便您将

00:29:03.720 --> 00:29:08.280
在调试中找到新的Spring Boot运行

00:29:06.300 --> 00:29:12.420
在这里配置，您将能够

00:29:08.280 --> 00:29:14.310
覆盖这些参数并指定

00:29:12.420 --> 00:29:17.850
您用于的任何活动配置文件

00:29:14.310 --> 00:29:20.400
春豆，所以我可以覆盖一个数字

00:29:17.850 --> 00:29:23.520
里面的人群的内部

00:29:20.400 --> 00:29:25.130
运行到发布配置，然后再次

00:29:23.520 --> 00:29:29.670
这里也有代码完成

00:29:25.130 --> 00:29:32.220
所以我们尝试做的是删除任何

00:29:29.670 --> 00:29:33.780
障碍，所以你不必看

00:29:32.220 --> 00:29:38.010
所有这些事情或混入

00:29:33.780 --> 00:29:43.290
和XML或类似的东西，所以

00:29:38.010 --> 00:29:46.950
非常有帮助，所以如果我们想继续

00:29:43.290 --> 00:29:49.800
并运行Springwood做的

00:29:46.950 --> 00:29:51.840
提供内置的应用服务器，因此

00:29:49.800 --> 00:29:56.460
您需要做的就是运行一个

00:29:51.840 --> 00:30:01.020
应用程序，它将部署到

00:29:56.460 --> 00:30:03.810
 Java或JVM的本地实例，以及

00:30:01.020 --> 00:30:06.720
然后我们就可以运行它并点击

00:30:03.810 --> 00:30:10.140
终点从我们的浏览器等

00:30:06.720 --> 00:30:12.990
如果你只是想一切都很好

00:30:10.140 --> 00:30:15.480
快速原型化我们已经拥有的应用程序

00:30:12.990 --> 00:30:18.270
看到了如何获得权利

00:30:15.480 --> 00:30:21.590
用新技术和类似的东西

00:30:18.270 --> 00:30:25.050
这个，但是假设您想从

00:30:21.590 --> 00:30:27.150
实施到执行（如果您愿意） 

00:30:25.050 --> 00:30:31.200
喜欢将其部署到生产中

00:30:27.150 --> 00:30:34.230
某个地方，您将能够做到这一点

00:30:31.200 --> 00:30:39.420
与码头工人联系，所以如果您听说过

00:30:34.230 --> 00:30:42.150
码头医生是一个管理平台

00:30:39.420 --> 00:30:44.270
您的构建，并允许您

00:30:42.150 --> 00:30:48.360
将它们部署在世界任何地方

00:30:44.270 --> 00:30:51.030
可复制的时尚，这就是这个

00:30:48.360 --> 00:30:52.980
使用IntelliJ IDEA 14真的很容易

00:30:51.030 --> 00:30:57.150
我们为医生介绍了一个新插件

00:30:52.980 --> 00:30:59.910
与弹簧靴一起工作

00:30:57.150 --> 00:31:01.920
太好了，您可以编辑它

00:30:59.910 --> 00:31:03.430
配置，您将能够

00:31:01.920 --> 00:31:06.090
指明

00:31:03.430 --> 00:31:08.740
服务器我已经设置了一个docker服务器

00:31:06.090 --> 00:31:11.770
这是一个非常简单的过程

00:31:08.740 --> 00:31:15.030
可以进入您的设置并安装

00:31:11.770 --> 00:31:18.370
 docker并给它docker端点

00:31:15.030 --> 00:31:20.890
在本地计算机或远程计算机上

00:31:18.370 --> 00:31:23.500
实例，您需要给它一个

00:31:20.890 --> 00:31:26.800
 docker文件以及我已经设置了docker 

00:31:23.500 --> 00:31:28.630
文件放在我的工作目录中

00:31:26.800 --> 00:31:30.970
而这将是我们将采取

00:31:28.630 --> 00:31:35.770
该工件并将其部署到运行中

00:31:30.970 --> 00:31:37.960
 docker实例，所以我们给它一个

00:31:35.770 --> 00:31:40.870
现在拍摄，我们来看看里面

00:31:37.960 --> 00:31:44.590
我们的运行屏幕在这里，它看起来像

00:31:40.870 --> 00:31:50.080
这个春季应用程序正在运行

00:31:44.590 --> 00:31:54.550
并且设置正确，所以我们停止

00:31:50.080 --> 00:31:57.730
并尝试此docker部署，以便

00:31:54.550 --> 00:32:02.140
我们为博士提供的第一件事

00:31:57.730 --> 00:32:07.090
支持是应用程序服务器视图

00:32:02.140 --> 00:32:09.010
因此，在docker中，您拥有医生主机

00:32:07.090 --> 00:32:11.860
当您进行部署时

00:32:09.010 --> 00:32:14.740
部署到映像，此映像可能

00:32:11.860 --> 00:32:17.920
有一个容器的成员是

00:32:14.740 --> 00:32:19.660
在你的医生岗位里面跑等等

00:32:17.920 --> 00:32:22.540
您将能够查看您的日志

00:32:19.660 --> 00:32:24.070
不必通过ssh连接它

00:32:22.540 --> 00:32:26.560
或类似的事情你可以做到

00:32:24.070 --> 00:32:30.070
就在您的应用程序服务器内部

00:32:26.560 --> 00:32:33.220
你在这里，所有的日志

00:32:30.070 --> 00:32:35.020
这些事件，所以我已经有一个

00:32:33.220 --> 00:32:37.270
运行容器，让我们签出

00:32:35.020 --> 00:32:39.540
现在的日志，您可以查看

00:32:37.270 --> 00:32:43.210
医生容器内的处理

00:32:39.540 --> 00:32:50.700
这应该与跑步

00:32:43.210 --> 00:32:56.170
如果我要进入我的进程

00:32:50.700 --> 00:32:59.940
在这里医生实例并运行docker yes 

00:32:56.170 --> 00:33:05.860
然后我会得到相同的信息

00:32:59.940 --> 00:33:07.960
就在这里一个不错的紧凑视图内

00:33:05.860 --> 00:33:09.940
看起来您将能够看到

00:33:07.960 --> 00:33:12.730
日志也是如此，而不是拖尾

00:33:09.940 --> 00:33:16.870
您的命令行上的日志，然后您

00:33:12.730 --> 00:33:19.710
可以在这里做这是这个

00:33:16.870 --> 00:33:22.950
整个博士。现在支持

00:33:19.710 --> 00:33:25.920
但是我们确实计划对此进行迭代

00:33:22.950 --> 00:33:28.390
引入更多的调试支持

00:33:25.920 --> 00:33:30.070
如果您需要进行调试，则可以

00:33:28.390 --> 00:33:34.990
在运行中指定调试端口

00:33:30.070 --> 00:33:38.520
配置，它会给你一些

00:33:34.990 --> 00:33:44.260
您可以在22个docker中传递的参数

00:33:38.520 --> 00:33:46.740
当您运行应用程序时，可以这样

00:33:44.260 --> 00:33:51.250
这就是两种功能

00:33:46.740 --> 00:33:54.160
从构想到实施

00:33:51.250 --> 00:33:57.400
仅仅在一个简单的春季就可以执行

00:33:54.160 --> 00:33:59.410
项目，所以您会发现

00:33:57.400 --> 00:34:02.980
我们提供的许多功能

00:33:59.410 --> 00:34:07.260
这些框架是

00:34:02.980 --> 00:34:09.760
精心设计以帮助您做到

00:34:07.260 --> 00:34:11.649
少开发应用程序

00:34:09.760 --> 00:34:14.139
尽可能的摩擦，所以我们尝试

00:34:11.649 --> 00:34:16.389
预期您的工作流程

00:34:14.139 --> 00:34:19.870
在开发过程中经历这些事件

00:34:16.389 --> 00:34:21.730
您的应用程序并提供这些

00:34:19.870 --> 00:34:24.340
功能，它们可能在以下位置不明显

00:34:21.730 --> 00:34:27.600
首先，但是一旦您熟悉它们

00:34:24.340 --> 00:34:30.960
他们会觉得自己会在家中

00:34:27.600 --> 00:34:36.310
想现在换档谈论

00:34:30.960 --> 00:34:41.379
 android开发，我们将结束

00:34:36.310 --> 00:34:44.980
项目并打开一个新的，依此类推

00:34:41.379 --> 00:34:48.340
 android android support我刚得到一个

00:34:44.980 --> 00:34:50.770
单元测试使整体更好

00:34:48.340 --> 00:34:53.919
所以这是一种期待已久的

00:34:50.770 --> 00:34:56.110
许多Android开发人员的功能，以及

00:34:53.919 --> 00:34:58.200
现在您可以运行要测试

00:34:56.110 --> 00:35:01.690
就在IDE上，所以这是主要的

00:34:58.200 --> 00:35:06.280
使用IntelliJ IDEA 14.1的好处和

00:35:01.690 --> 00:35:09.070
现在有一个新的构建变体工具

00:35:06.280 --> 00:35:11.650
您将看到左侧窗口

00:35:09.070 --> 00:35:13.720
您可以打开的构建变体窗口

00:35:11.650 --> 00:35:16.660
并关闭它，如果您正在跑步

00:35:13.720 --> 00:35:18.190
检测任务，那么您知道

00:35:16.660 --> 00:35:20.590
它必须部署到设备上

00:35:18.190 --> 00:35:22.600
有时候有点慢而笨拙

00:35:20.590 --> 00:35:25.660
所以如果你想加入

00:35:22.600 --> 00:35:28.960
您想要的TDD测试驱动的开发

00:35:25.660 --> 00:35:30.950
这些测试运行非常快，所以我有

00:35:28.960 --> 00:35:33.050
我的

00:35:30.950 --> 00:35:36.020
我的仪器测试在这里和这个

00:35:33.050 --> 00:35:38.530
如果我部署这个，它将在我的

00:35:36.020 --> 00:35:41.329
我已连接Android设备的设备

00:35:38.530 --> 00:35:44.869
那会同路而行

00:35:41.329 --> 00:35:46.780
将检查这些此消息是

00:35:44.869 --> 00:35:49.640
当我单击按钮时显示

00:35:46.780 --> 00:35:52.220
但是我可以在里面做同样的事情

00:35:49.640 --> 00:35:54.970
快速切换到本机即可获得我的IDE 

00:35:52.220 --> 00:35:57.020
具有此功能的测试是实验性的

00:35:54.970 --> 00:36:01.640
仍然可以，但是您可以启用此功能

00:35:57.020 --> 00:36:04.040
在您的设置下，您需要

00:36:01.640 --> 00:36:08.329
在最新版本的

00:36:04.040 --> 00:36:10.849
 Android构建工具，所以1.1 Android 

00:36:08.329 --> 00:36:13.310
 Gradle插件1点1点0或

00:36:10.849 --> 00:36:16.220
较新的，您可以启用该单元

00:36:13.310 --> 00:36:19.310
在这里测试支持，然后做什么

00:36:16.220 --> 00:36:22.790
你能做的就是去你的单位

00:36:19.310 --> 00:36:26.690
测试，您将能够运行这些

00:36:22.790 --> 00:36:28.970
直接，因此无论何时您想测试

00:36:26.690 --> 00:36:30.530
您内部的方法使您的主要

00:36:28.970 --> 00:36:33.410
活动或您是其中一项活动

00:36:30.530 --> 00:36:37.609
在您的应用程序中，您可以

00:36:33.410 --> 00:36:40.910
按ctrl shift T看看是否

00:36:37.609 --> 00:36:43.940
要测试此方法，则可以

00:36:40.910 --> 00:36:46.099
选择现有的测试类别或创建

00:36:43.940 --> 00:36:52.869
一个新的，将被创建

00:36:46.099 --> 00:36:52.869
在这个测试目录里面很幸运

00:36:56.440 --> 00:37:00.790
好吧，所以它已经包含了这个测试

00:37:01.329 --> 00:37:07.430
它会添加新的测试两个

00:37:05.660 --> 00:37:10.130
他们就是我现在想做的

00:37:07.430 --> 00:37:15.890
我将在本地运行此单元测试， 

00:37:10.130 --> 00:37:19.310
只是向您展示它有效，所以我可以

00:37:15.890 --> 00:37:22.400
从我去的地方开始运行它

00:37:19.310 --> 00:37:26.780
将相当快地执行它，而无需

00:37:22.400 --> 00:37:30.020
不得不去设备部署apk 

00:37:26.780 --> 00:37:32.119
您可以利用

00:37:30.020 --> 00:37:34.550
内在的渐进式补充

00:37:32.119 --> 00:37:36.880
 Android构建工具使这一工作变得相当公平

00:37:34.550 --> 00:37:36.880
快

00:37:45.540 --> 00:37:51.520
让我们在等待时将其最小化

00:37:47.770 --> 00:37:55.120
我会告诉你一些新的

00:37:51.520 --> 00:37:58.750
 Android中的功能，因此下一个功能

00:37:55.120 --> 00:38:01.390
我们要介绍的和IntelliJ IDEA 

00:37:58.750 --> 00:38:06.370
 14是快速创建的能力

00:38:01.390 --> 00:38:09.460
用一个小模板看脸

00:38:06.370 --> 00:38:11.860
您选择在哪里可以创建一个新的

00:38:09.460 --> 00:38:16.000
看脸模板并选择是否

00:38:11.860 --> 00:38:19.420
模拟或数字，这将创建一个

00:38:16.000 --> 00:38:23.790
内部功能齐全的表盘

00:38:19.420 --> 00:38:23.790
资源，以便您可以使用它来

00:38:24.150 --> 00:38:30.220
了解表盘如何工作，以及

00:38:26.800 --> 00:38:32.710
直接部署以建议和

00:38:30.220 --> 00:38:35.560
反复进行这种定制

00:38:32.710 --> 00:38:38.370
等等，这是adi模板

00:38:35.560 --> 00:38:41.980
供您使用和

00:38:38.370 --> 00:38:45.220
里面还有一个表盘向导

00:38:41.980 --> 00:38:46.810
您的新项目创建，因此，如果您

00:38:45.220 --> 00:38:51.790
创建一个新的android项目，然后

00:38:46.810 --> 00:38:57.090
能够给它一些表底灯

00:38:51.790 --> 00:39:00.010
信息确定，所以看起来像我们的

00:38:57.090 --> 00:39:04.150
 Gradle构建仍然令人耳目一新

00:39:00.010 --> 00:39:06.450
检查我们的测试，看看它们是否很好

00:39:04.150 --> 00:39:06.450
跑步

00:39:15.440 --> 00:39:17.500
您

00:39:31.290 --> 00:39:40.810
好的，所以这个测试看起来还是

00:39:35.140 --> 00:39:43.630
运行，但可能有一点

00:39:40.810 --> 00:39:47.560
即将完成，这就是全部

00:39:43.630 --> 00:39:49.000
按顺序在我的IDE中的站点上运行

00:39:47.560 --> 00:39:53.050
为了使这个工作，你只需要

00:39:49.000 --> 00:39:58.450
记住要向您添加一些信息

00:39:53.050 --> 00:40:01.960
建立您的build.gradle文件，这些

00:39:58.450 --> 00:40:05.200
测试编译依赖项将通知

00:40:01.960 --> 00:40:07.210
 IDE通知Gradle它

00:40:05.200 --> 00:40:08.920
将需要导入这些文件进行测试

00:40:07.210 --> 00:40:16.360
编译阶段，那将会发生

00:40:08.920 --> 00:40:20.940
直接在90上我们也可以测试j单位

00:40:16.360 --> 00:40:24.310
一旦Gradle导入完成， 

00:40:20.940 --> 00:40:28.630
我们将能够运行这些简单的测试

00:40:24.310 --> 00:40:30.280
你会给你甚至可以测试

00:40:28.630 --> 00:40:34.770
它失败，然后实施

00:40:30.280 --> 00:40:34.770
行为，然后测试应该成功

00:40:35.670 --> 00:40:44.920
这就是我们的三个特点

00:40:41.140 --> 00:40:49.720
想在春天为您示范

00:40:44.920 --> 00:40:55.060
使用docker启动，现在使用Android和

00:40:49.720 --> 00:40:56.200
 Android Wear支持，因此有一个

00:40:55.060 --> 00:41:00.250
其他框架数量

00:40:56.200 --> 00:41:02.200
支持的IntelliJ IDEA，我们提供

00:41:00.250 --> 00:41:04.870
支持以下所有框架

00:41:02.200 --> 00:41:07.570
同样的方式，所以我们尝试

00:41:04.870 --> 00:41:09.850
看所有的综合功能

00:41:07.570 --> 00:41:13.560
我们可以包括使您的发展

00:41:09.850 --> 00:41:18.070
生命周期要容易一些，并且

00:41:13.560 --> 00:41:20.080
弥补给你，所以这是

00:41:18.070 --> 00:41:24.400
在IntelliJ IDEA社区中可用

00:41:20.080 --> 00:41:26.080
版本和 spring boot 是功能

00:41:24.400 --> 00:41:28.420
在IntelliJ IDEA中可用

00:41:26.080 --> 00:41:31.420
终极的，所以我想去

00:41:28.420 --> 00:41:34.440
现在的问题，所以如果有

00:41:31.420 --> 00:41:37.680
问题，我们现在可以感觉到它们

00:41:34.440 --> 00:41:37.680
非常感谢

00:41:39.190 --> 00:41:43.240
谢谢布伦登，我真的很喜欢这个事实

00:41:40.930 --> 00:41:45.640
 IntelliJ现在支持最佳

00:41:43.240 --> 00:41:47.470
我为Android测试

00:41:45.640 --> 00:41:49.869
在外围的工作非常模糊

00:41:47.470 --> 00:41:51.099
 Android空间的年份，如果

00:41:49.869 --> 00:41:54.810
斯蒂芬妮（Stephanie）似乎是

00:41:51.099 --> 00:41:54.810
对开发人员来说有点沮丧

00:41:58.020 --> 00:42:03.520
是的，这是花了一个

00:42:00.849 --> 00:42:05.950
为减轻痛苦付出了很多努力

00:42:03.520 --> 00:42:07.690
惊ster没有配置

00:42:05.950 --> 00:42:09.190
事先我的意思是，如果您正在运行

00:42:07.690 --> 00:42:11.230
小电测试，那么你必须做

00:42:09.190 --> 00:42:13.210
内部大量配置

00:42:11.230 --> 00:42:14.950
脚本，但现在有直接支持

00:42:13.210 --> 00:42:18.910
里面的ID是

00:42:14.950 --> 00:42:23.170
棒极了，并且在工作时有效

00:42:18.910 --> 00:42:25.390
太好了，有一个问题是

00:42:23.170 --> 00:42:28.660
具体关于您的演示

00:42:25.390 --> 00:42:30.190
具有其属性的JSON文件

00:42:28.660 --> 00:42:31.569
说得好，这个问题是专门的

00:42:30.190 --> 00:42:35.170
那个带有

00:42:31.569 --> 00:42:38.220
物业过快了吗

00:42:35.170 --> 00:42:38.220
知道我在说哪一个

00:42:50.420 --> 00:42:53.920
权利一定是那个

00:43:28.869 --> 00:43:34.900
我以为我要聋了，但我没有

00:43:31.520 --> 00:43:34.900
认为我们可以再听到布伦达的声音了哦

00:43:35.829 --> 00:43:44.900
就像哦，我们是的，所以那些

00:43:42.440 --> 00:43:48.650
这些值将在内部定义

00:43:44.900 --> 00:43:51.049
您的编辑，您正在此处追逐文件，并且

00:43:48.650 --> 00:43:53.770
它们是自动验证的

00:43:51.049 --> 00:44:09.140
键入时会引入一个新值

00:43:53.770 --> 00:44:10.880
然后您只需点击创建

00:44:09.140 --> 00:44:13.700
您可以定义配置密钥

00:44:10.880 --> 00:44:17.599
我将介绍属性和

00:44:13.700 --> 00:44:22.460
你可以继续我做的事

00:44:17.599 --> 00:44:24.020
在里面添加另一个类

00:44:22.460 --> 00:44:28.660
配置属性，那么您将

00:44:24.020 --> 00:44:28.660
能够使用您说的那些值

00:44:29.890 --> 00:44:36.829
看到另一个问题，唯一的

00:44:35.029 --> 00:44:38.180
我可以看到的另一个问题是，我们

00:44:36.829 --> 00:44:40.700
听不到您的声音，但现在我们可以听到您的声音了

00:44:38.180 --> 00:44:42.230
所以哦，我们走了，那里有什么变化

00:44:40.700 --> 00:44:44.809
特别与grails有关

00:44:42.230 --> 00:44:47.779
事态发展，我什么也没看到

00:44:44.809 --> 00:44:50.869
关于鹌鹑，我没有在吗

00:44:47.779 --> 00:44:54.670
变更清单，但我知道

00:44:50.869 --> 00:44:59.329
那带来引导继续

00:44:54.670 --> 00:45:01.549
支持，他们在那里，您可以学习

00:44:59.329 --> 00:45:04.210
更多关于弹簧靴以及所有这些

00:45:01.549 --> 00:45:07.760
网络研讨会中发生的事情

00:45:04.210 --> 00:45:10.539
昨天实际上是在这个网络研讨会中

00:45:07.760 --> 00:45:13.059
今天将可供您观看

00:45:10.539 --> 00:45:16.849
所以我强烈建议我们的朋友

00:45:13.059 --> 00:45:19.549
斯蒂芬·妮可（Stephan Nicole）将与大家分享

00:45:16.849 --> 00:45:23.630
有关组的最新信息

00:45:19.549 --> 00:45:27.200
和grails和发展方面

00:45:23.630 --> 00:45:29.089
从关键角度出发的事情等等

00:45:27.200 --> 00:45:33.520
一定要检查一下

00:45:29.089 --> 00:45:38.500
网络研讨会变成了行动之春

00:45:33.520 --> 00:45:38.500
今天晚些时候可用

00:45:41.590 --> 00:45:50.900
太棒了，我们在

00:45:47.360 --> 00:45:52.660
我刚才提到的高DPI 

00:45:50.900 --> 00:45:54.860
一些文本很小且不可读， 

00:45:52.660 --> 00:46:01.760
从我的角度来看，我正在使用Windows 

00:45:54.860 --> 00:46:04.750
在HTTP i屏幕上

00:46:01.760 --> 00:46:08.360
我正在使用的14.1绝对有所改善

00:46:04.750 --> 00:46:10.040
那不是我的表现

00:46:08.360 --> 00:46:12.080
屏幕现在，所以我正在使用新的

00:46:10.040 --> 00:46:14.990
更新的版本肯定更好

00:46:12.080 --> 00:46:19.430
比我相信有可能

00:46:14.990 --> 00:46:22.070
还有一些正在发生的事情

00:46:19.430 --> 00:46:28.460
绝对是四个区域，那就是

00:46:22.070 --> 00:46:31.000
得到很多关注吗

00:46:28.460 --> 00:46:31.000
更多问题

