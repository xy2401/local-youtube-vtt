WEBVTT
Kind: captions
Language: zh-Hans

00:00:03.010 --> 00:00:07.120
所以我想给你看的东西

00:00:04.840 --> 00:00:08.920
今天是Phaneuf的新春天

00:00:07.120 --> 00:00:12.010
具有新的弹簧支持功能

00:00:08.920 --> 00:00:14.950
在整数15中，您可能知道

00:00:12.010 --> 00:00:18.160
春天的初始化是一个向导

00:00:14.950 --> 00:00:20.770
创建一个基于

00:00:18.160 --> 00:00:23.980
一组依赖关系，它是集成的

00:00:20.770 --> 00:00:26.619
在印，即因为折叠起来我想

00:00:23.980 --> 00:00:30.250
给你看一些新奇的东西

00:00:26.619 --> 00:00:32.770
如您所知，已添加15 

00:00:30.250 --> 00:00:35.379
 Springwood 123即将发布

00:00:32.770 --> 00:00:37.600
而且有很多新功能

00:00:35.379 --> 00:00:42.219
 IntelliJ IDEA转换已支持

00:00:37.600 --> 00:00:45.420
它们必须是有关新元数据的支持

00:00:42.219 --> 00:00:48.010
有关配置密钥的新功能

00:00:45.420 --> 00:00:50.859
智能前卫15也有很多

00:00:48.010 --> 00:00:53.859
更聪明的弹簧模型，并给

00:00:50.859 --> 00:00:56.469
您可以更好地了解依赖关系

00:00:53.859 --> 00:00:59.859
在您的项目和候选人中

00:00:56.469 --> 00:01:03.159
您也可以使用注射点15 

00:00:59.859 --> 00:01:08.010
引入了对也门格式的支持

00:01:03.159 --> 00:01:12.940
以及属性格式和

00:01:08.010 --> 00:01:16.300
最后，当你

00:01:12.940 --> 00:01:18.730
使用创建一个新项目

00:01:16.300 --> 00:01:22.030
向导将有很多东西

00:01:18.730 --> 00:01:24.310
自动为您配置好吧

00:01:22.030 --> 00:01:27.550
让我们开始吧，您可能知道这一点

00:01:24.310 --> 00:01:30.490
网站权利，可让您创建

00:01:27.550 --> 00:01:34.450
一个新项目很容易，所以您购物

00:01:30.490 --> 00:01:36.460
对于依赖关系，基本上

00:01:34.450 --> 00:01:39.610
您要使用的春季版

00:01:36.460 --> 00:01:42.370
建立您要使用的系统

00:01:39.610 --> 00:01:44.980
可以在那里看到所有选项

00:01:42.370 --> 00:01:48.550
下载该项目是一个zip文件

00:01:44.980 --> 00:01:51.820
然后您可以解压缩它

00:01:48.550 --> 00:01:54.760
将这些集成到ID中

00:01:51.820 --> 00:01:56.710
是您必须执行的手动步骤

00:01:54.760 --> 00:01:58.180
您必须要做的就是开始

00:01:56.710 --> 00:02:01.150
如果可以的话会更好

00:01:58.180 --> 00:02:05.380
从您的ID右到右

00:02:01.150 --> 00:02:07.030
不用离开它就可以这样做

00:02:05.380 --> 00:02:10.629
单击此创建新项目按钮

00:02:07.030 --> 00:02:15.639
然后选择初始化程序，这样就不新鲜了

00:02:10.629 --> 00:02:16.120
我已经有40个人了

00:02:15.639 --> 00:02:18.700
刚去

00:02:16.120 --> 00:02:20.849
保持默认权限，我要

00:02:18.700 --> 00:02:23.830
采取最新的春季好发布

00:02:20.849 --> 00:02:26.830
 15的新功能是您可以搜索

00:02:23.830 --> 00:02:28.569
依赖关系及其搜索

00:02:26.830 --> 00:02:31.799
以依赖的名义

00:02:28.569 --> 00:02:35.230
在说明中您也可以折叠

00:02:31.799 --> 00:02:37.060
项目，即使您搜索

00:02:35.230 --> 00:02:39.700
崩溃的东西会给

00:02:37.060 --> 00:02:43.510
你暗示有些东西

00:02:39.700 --> 00:02:45.909
在这里我有点

00:02:43.510 --> 00:02:47.709
这个简单的目的

00:02:45.909 --> 00:02:51.549
应用程序，我们不会构建一个

00:02:47.709 --> 00:02:56.560
我要选择网络和执行器的应用程序

00:02:51.549 --> 00:03:06.060
好吧，接下来，让我们打电话

00:02:56.560 --> 00:03:06.060
那就是我们在10到15知道的

00:03:07.709 --> 00:03:12.790
所以当你这样做的时候，有很多事情

00:03:10.810 --> 00:03:14.799
发生的事情，你可以看到，如果

00:03:12.790 --> 00:03:18.510
该项目可以自动

00:03:14.799 --> 00:03:21.209
已导入，因此您可以开始编码

00:03:18.510 --> 00:03:25.150
默认运行配置也是

00:03:21.209 --> 00:03:30.400
创建的基本上就可以运行

00:03:25.150 --> 00:03:34.269
新的应用程序基本上是从那里开始的

00:03:30.400 --> 00:03:36.340
如果你进入项目结构

00:03:34.269 --> 00:03:40.139
你看着物理学，你会看到

00:03:36.340 --> 00:03:40.139
与春天有关的皮草

00:03:45.980 --> 00:03:53.819
好的，对不起，所以基本上一切

00:03:51.450 --> 00:03:56.270
为您配置完毕，您就可以开始

00:03:53.819 --> 00:04:01.200
实际编写业务逻辑

00:03:56.270 --> 00:04:04.319
对于您的应用程序来说，第一件事

00:04:01.200 --> 00:04:06.390
我想告诉你你就是你所有人

00:04:04.319 --> 00:04:09.000
知道可能实际上是使用Spring Boot 

00:04:06.390 --> 00:04:10.800
询问你可能已经拥有了

00:04:09.000 --> 00:04:13.520
内容协助配置

00:04:10.800 --> 00:04:16.169
键，所以基本上你输入一些

00:04:13.520 --> 00:04:17.640
对应于某个键的击键

00:04:16.169 --> 00:04:20.419
您正在搜索并获得内容

00:04:17.640 --> 00:04:23.610
协助您也可以预设值

00:04:20.419 --> 00:04:25.490
文档链接到代码链接

00:04:23.610 --> 00:04:31.230
所以你有很多事情

00:04:25.490 --> 00:04:33.270
让您开箱即用，但在15分钟内

00:04:31.230 --> 00:04:37.500
在斯普林伍德，三分之一

00:04:33.270 --> 00:04:40.530
它有更多的功能，第一个

00:04:37.500 --> 00:04:42.419
东西已弃用，所以我知道

00:04:40.530 --> 00:04:45.030
那里有个钥匙叫做Spring Dutton 

00:04:42.419 --> 00:04:47.040
 vasilich前缀，用于

00:04:45.030 --> 00:04:50.100
为应用程序配置年份DMC前缀

00:04:47.040 --> 00:04:53.010
在三分之一中，我们实际上

00:04:50.100 --> 00:04:55.680
认为我们实际上发现了

00:04:53.010 --> 00:04:58.020
具有该键11的名称空间，因此我们将

00:04:55.680 --> 00:04:59.820
将其命名为其他名称，以便搜索

00:04:58.020 --> 00:05:02.610
对于Spring MVC前缀，您可以看到

00:04:59.820 --> 00:05:06.080
新的出现在底部，但

00:05:02.610 --> 00:05:08.640
另一个没有，原因是

00:05:06.080 --> 00:05:11.340
吃起来正确的原因是

00:05:08.640 --> 00:05:12.990
因为它将在底部

00:05:11.340 --> 00:05:16.500
它将始终位于底部，并且

00:05:12.990 --> 00:05:18.930
将被标记为已弃用，所以我

00:05:16.500 --> 00:05:21.570
调用文档，我可以看到

00:05:18.930 --> 00:05:24.960
密钥已被弃用，我可以

00:05:21.570 --> 00:05:27.180
还可以看到有什么新情况

00:05:24.960 --> 00:05:30.690
也是一种意图，所以艺术会随着你而进入

00:05:27.180 --> 00:05:33.780
所有人都知道，那么它将为我提供切换

00:05:30.690 --> 00:05:37.890
到新的密钥，它将修复

00:05:33.780 --> 00:05:40.680
配置对我来说另一件事

00:05:37.890 --> 00:05:45.090
我们在春季的123中添加的好一个

00:05:40.680 --> 00:05:47.700
二三是更多的帮助

00:05:45.090 --> 00:05:50.700
价值发现，所以如果我接受

00:05:47.700 --> 00:05:52.909
休眠黄色即可看到

00:05:50.700 --> 00:05:57.180
现在我变得非常好

00:05:52.909 --> 00:05:59.850
具有价值和文件的完成

00:05:57.180 --> 00:06:03.449
如果我在这里调用文档，我可以

00:05:59.850 --> 00:06:05.880
另请参阅可能的值列表

00:06:03.449 --> 00:06:07.530
可以看到类型为e的字符串

00:06:05.880 --> 00:06:09.360
什么都不是我们可以实际获取的

00:06:07.530 --> 00:06:11.100
这些值，这些是这些

00:06:09.360 --> 00:06:13.500
值实际上存储在

00:06:11.100 --> 00:06:15.300
元数据，所以在其他方面

00:06:13.500 --> 00:06:20.610
元数据中的条目，您将看到

00:06:15.300 --> 00:06:23.160
一分钟后，我们在IntelliJ IDEA 15中

00:06:20.610 --> 00:06:26.880
还会自动检测到匿名

00:06:23.160 --> 00:06:30.630
财产的目标广告，我们

00:06:26.880 --> 00:06:33.030
基本上为您提取值，因此

00:06:30.630 --> 00:06:36.570
如果你看你基本上得到相同的

00:06:33.030 --> 00:06:40.130
除了这件事，这实际上是

00:06:36.570 --> 00:06:42.150
实际上是从代码本身读取的

00:06:40.130 --> 00:06:44.669
 IntelliJ正在检查您的代码

00:06:42.150 --> 00:06:48.060
弄清楚我这样做的原因

00:06:44.669 --> 00:06:50.370
获取文档的价值

00:06:48.060 --> 00:06:53.180
你会自动得到

00:06:50.370 --> 00:06:59.039
开箱即用，也一样不错

00:06:53.180 --> 00:07:01.830
值列表也有一个更好的

00:06:59.039 --> 00:07:03.659
支持第三方配置

00:07:01.830 --> 00:07:05.880
关键，所以如果我以飞走为例

00:07:03.659 --> 00:07:09.389
基本上没有迁移到

00:07:05.880 --> 00:07:11.099
说些什么，然后我尝试去做

00:07:09.389 --> 00:07:13.979
我班上的土壤没有通过

00:07:11.099 --> 00:07:16.050
现在基本上没有任何东西

00:07:13.979 --> 00:07:18.690
没有真实的信息

00:07:16.050 --> 00:07:26.750
有关文档的元数据，但如果

00:07:18.690 --> 00:07:30.900
我向我的项目宣传，然后回去

00:07:26.750 --> 00:07:33.000
确保先进口

00:07:30.900 --> 00:07:36.150
首先确定它很重要我想是的

00:07:33.000 --> 00:07:38.699
现在是那时，我也得到了原始的

00:07:36.150 --> 00:07:41.039
设定者本身的文档

00:07:38.699 --> 00:07:43.680
这将使我基本上

00:07:41.039 --> 00:07:46.919
了解该物业的功能

00:07:43.680 --> 00:07:54.480
即使没有完整的说明

00:07:46.919 --> 00:07:55.920
在元数据中，所以也有

00:07:54.480 --> 00:08:00.210
一堆东​​西在那一个故障

00:07:55.920 --> 00:08:03.840
靠自己做，所以很聪明

00:08:00.210 --> 00:08:07.650
对某些类型的反应以及会发生什么

00:08:03.840 --> 00:08:09.170
但是我们将利用这种经验来捆绑

00:08:07.650 --> 00:08:11.570
以元数据格式

00:08:09.170 --> 00:08:16.590
每个人都可以以一致的方式使用它

00:08:11.570 --> 00:08:19.680
首先是您可以看到的类类型

00:08:16.590 --> 00:08:22.290
该新属性的类型为class 

00:08:19.680 --> 00:08:24.990
它基本上扩展了数据源

00:08:22.290 --> 00:08:28.170
如果这样做，您将获得

00:08:24.990 --> 00:08:31.710
匹配的类，因此匹配的列表

00:08:28.170 --> 00:08:33.600
您项目中的一个类

00:08:31.710 --> 00:08:36.300
像那里的数据源扩展

00:08:33.600 --> 00:08:39.740
只是一个我刚刚的1i 

00:08:36.300 --> 00:08:42.930
加入了Flyway，但我也可以很快

00:08:39.740 --> 00:08:45.690
添加GPS牙垢，它将带来

00:08:42.930 --> 00:08:49.560
如果我这样做的话，在gps支持中

00:08:45.690 --> 00:08:52.470
然后把你的东西花在那里

00:08:49.560 --> 00:08:53.940
显示具体类而不显示

00:08:52.470 --> 00:08:55.530
界面很好，因为如果您

00:08:53.940 --> 00:09:02.100
有很多与此匹配的界面

00:08:55.530 --> 00:09:04.320
可能污染列表的另一种类型

00:09:02.100 --> 00:09:06.690
我们在内部自动检测

00:09:04.320 --> 00:09:09.690
 jaggi 15是资源，例如

00:09:06.690 --> 00:09:11.730
后燃烧器位置是一个

00:09:09.690 --> 00:09:15.420
也来自春季资源

00:09:11.730 --> 00:09:17.040
抽象，所以我要去

00:09:15.420 --> 00:09:20.280
也许要删除它，因为我不

00:09:17.040 --> 00:09:22.230
有我不需要的任何东西

00:09:20.280 --> 00:09:24.120
这样做可以运行该应用程序，所以大家都知道

00:09:22.230 --> 00:09:26.970
关于这个美好的春天横幅吧

00:09:24.120 --> 00:09:30.600
所以我要自定义它，所以我

00:09:26.970 --> 00:09:36.800
要创建一个新文件，将其命名为my 

00:09:30.600 --> 00:09:39.510
横幅60我有一个模板

00:09:36.800 --> 00:09:42.480
然后我要问春天好用

00:09:39.510 --> 00:09:45.240
它，因为它是资源IntelliJ 

00:09:42.480 --> 00:09:47.220
基本上会给你我的清单

00:09:45.240 --> 00:09:50.850
匹配的东西，我基本上可以

00:09:47.220 --> 00:09:56.380
选择它，基本上我的应用程序正在使用

00:09:50.850 --> 00:09:58.000
现在横幅，所以任何一点是

00:09:56.380 --> 00:09:59.560
您定义并公开的属性

00:09:58.000 --> 00:10:01.720
作为资源，您将自动获得

00:09:59.560 --> 00:10:05.430
这样就可以完成照片的维修

00:10:01.720 --> 00:10:07.810
我们现在也支持的公式类型

00:10:05.430 --> 00:10:12.160
自动编码，因此如果您输入

00:10:07.810 --> 00:10:15.100
如果类型是

00:10:12.160 --> 00:10:17.920
叫集你自动得到自动

00:10:15.100 --> 00:10:21.940
完成，你也得到相同的

00:10:17.920 --> 00:10:23.110
笑剧类型的东西，所以如果你看

00:10:21.940 --> 00:10:26.020
你得到的最紧密的哑剧类型

00:10:23.110 --> 00:10:30.160
完成它，最后我们

00:10:26.020 --> 00:10:32.290
也有一些规则，基本上两个

00:10:30.160 --> 00:10:34.390
协助您如何

00:10:32.290 --> 00:10:37.870
您可以提供此类实例的值，如果

00:10:34.390 --> 00:10:39.460
我们采用您可以看到的最大文件大小

00:10:37.870 --> 00:10:43.120
您可以指出的文件

00:10:39.460 --> 00:10:45.880
并且每千字节大小博克4兆字节

00:10:43.120 --> 00:10:49.540
分别所以如果您输入内容

00:10:45.880 --> 00:10:55.780
这样，它将显示您的节目

00:10:49.540 --> 00:10:57.820
你这是一个验证错误，所以

00:10:55.780 --> 00:11:01.170
这些基本上都是好的

00:10:57.820 --> 00:11:03.400
您获得的最好的帮助

00:11:01.170 --> 00:11:06.160
弹簧暴露的配置键

00:11:03.400 --> 00:11:08.020
启动，但也许你不知道，但是

00:11:06.160 --> 00:11:10.180
添加您自己的树很容易，并且

00:11:08.020 --> 00:11:12.730
这样做非常重要，因为

00:11:10.180 --> 00:11:14.530
有些时候您的应用程序需要

00:11:12.730 --> 00:11:17.290
您需要进行一些自定义

00:11:14.530 --> 00:11:19.210
定制一些您可能会喜欢的东西

00:11:17.290 --> 00:11:21.100
实例在竞争中工作，您想要

00:11:19.210 --> 00:11:22.780
公开一组键以自定义

00:11:21.100 --> 00:11:24.850
图书馆的工作方式非常

00:11:22.780 --> 00:11:26.740
重要的一点是，你也

00:11:24.850 --> 00:11:29.860
提供相同的漂亮内容

00:11:26.740 --> 00:11:32.620
帮助您的用户，让我们看看如何

00:11:29.860 --> 00:11:34.240
我们可以创建自己的密钥并进行配置

00:11:32.620 --> 00:11:37.540
用斯普林伍德产生金属

00:11:34.240 --> 00:11:40.900
自动为你，我要

00:11:37.540 --> 00:11:43.090
创建一个您好属性的类

00:11:40.900 --> 00:11:45.010
我将创建一个rello服务

00:11:43.090 --> 00:11:49.510
基本上就是那个配置

00:11:45.010 --> 00:11:52.570
 20个关键之一是完美

00:11:49.510 --> 00:11:55.450
一个是目标权利，我要

00:11:52.570 --> 00:12:00.670
用那种纯真向你展示

00:11:55.450 --> 00:12:03.540
我会做的工作你好服务

00:12:00.670 --> 00:12:03.540
这项服务

00:12:06.840 --> 00:12:15.540
他们正在注入支票Maggie和

00:12:12.630 --> 00:12:18.270
我要用它放公共汽车合同

00:12:15.540 --> 00:12:24.990
只是在某件事上显示一条消息

00:12:18.270 --> 00:12:29.880
就像我要带前缀a 

00:12:24.990 --> 00:12:34.260
空间和目标还可以，很简单

00:12:29.880 --> 00:12:37.140
你可以看到intellij我们的身影

00:12:34.260 --> 00:12:38.880
正在弄清楚你好属性

00:12:37.140 --> 00:12:41.250
其实不是，不是视频

00:12:38.880 --> 00:12:43.020
在正确的上下文中编辑

00:12:41.250 --> 00:12:45.030
因为没有什么可以说明

00:12:43.020 --> 00:12:48.420
应该是斯堪内尔光束应该是

00:12:45.030 --> 00:12:50.310
自动创建到不能那样糟糕

00:12:48.420 --> 00:12:52.440
弹簧靴要处理的程序

00:12:50.310 --> 00:12:54.990
注释中有一个应用程序

00:12:52.440 --> 00:12:57.510
抱歉，您可以使用已启用的功能

00:12:54.990 --> 00:12:59.760
配置属性，您可以

00:12:57.510 --> 00:13:01.800
提供您可以的课程名称

00:12:59.760 --> 00:13:03.240
有你想要的那么多

00:13:01.800 --> 00:13:06.120
将删除它们并创建bean 

00:13:03.240 --> 00:13:09.120
对你来说另一种选择是

00:13:06.120 --> 00:13:11.250
实际删除该行，并添加

00:13:09.120 --> 00:13:12.660
该类的组件，并确保

00:13:11.250 --> 00:13:15.000
该班级由

00:13:12.660 --> 00:13:19.890
组件canny之类的LastPass canada 

00:13:15.000 --> 00:13:21.750
当然，你最好的20件事

00:13:19.890 --> 00:13:23.790
在这种情况下可以做到的很简单

00:13:21.750 --> 00:13:26.130
字符串，但是你可以有很多复杂的东西

00:13:23.790 --> 00:13:28.080
类型，如我们所见，您可以拥有

00:13:26.130 --> 00:13:31.650
一个可以拥有资源的课程

00:13:28.080 --> 00:13:33.900
有哑剧类型的概念

00:13:31.650 --> 00:13:35.760
要在这里双胞胎，以确保

00:13:33.900 --> 00:13:39.120
设置此值不是为了

00:13:35.760 --> 00:13:40.770
现在，让我们写信给你

00:13:39.120 --> 00:13:46.890
看到你没有帮助

00:13:40.770 --> 00:13:52.530
一切顺利，并显示为

00:13:46.890 --> 00:13:56.220
未知，所以如果我启动应用程序

00:13:52.530 --> 00:14:00.420
我很抱歉那可能更大

00:13:56.220 --> 00:14:01.650
此时，您将是一个好主意

00:14:00.420 --> 00:14:04.560
有更好的世界信息

00:14:01.650 --> 00:14:06.720
印在这里好吧，我们该如何解决

00:14:04.560 --> 00:14:09.660
我们可以确保这些元数据是

00:14:06.720 --> 00:14:12.180
自动创建好GID给定的

00:14:09.660 --> 00:14:15.060
您一个不错的疯子

00:14:12.180 --> 00:14:16.890
处理器不在交叉路径上，因此

00:14:15.060 --> 00:14:18.480
您可以打开我们的文档

00:14:16.890 --> 00:14:20.960
文档，您会发现

00:14:18.480 --> 00:14:28.529
你必须添加这个

00:14:20.960 --> 00:14:33.470
所以让我们这样做，一旦完成

00:14:28.529 --> 00:14:35.580
让我们重建，如果我们重建

00:14:33.470 --> 00:14:38.100
将会产生战斗

00:14:35.580 --> 00:14:41.100
自动为您服务，让我们看看如何

00:14:38.100 --> 00:14:43.620
不是，现在不是未知密钥

00:14:41.100 --> 00:14:47.160
并加上我的前缀

00:14:43.620 --> 00:14:49.740
像您所做的任何文档

00:14:47.160 --> 00:14:52.709
到目前为止您已经看到的spring boot key 

00:14:49.740 --> 00:14:54.690
也可以跳到代码等

00:14:52.709 --> 00:14:57.060
创建自己的密钥非常非常容易

00:14:54.690 --> 00:15:01.410
而且整合内容非常容易

00:14:57.060 --> 00:15:09.600
您自己的ID中的帮助权

00:15:01.410 --> 00:15:12.060
键好，那么你还能在哪里做什么

00:15:09.600 --> 00:15:14.459
否则你可以用窗户吗

00:15:12.060 --> 00:15:16.680
配置键，我告诉你

00:15:14.459 --> 00:15:20.250
关于我想弃用的支持

00:15:16.680 --> 00:15:23.399
快速快速演示如何

00:15:20.250 --> 00:15:25.320
实际使用那个目标

00:15:23.399 --> 00:15:27.270
这个名字不是很正确

00:15:25.320 --> 00:15:29.880
的目标，我们不希望那是

00:15:27.270 --> 00:15:33.930
我们要命名的错误启用

00:15:29.880 --> 00:15:35.850
完全正确，所以我们要修复此问题

00:15:33.930 --> 00:15:37.680
让我们添加getter和setter，以便

00:15:35.850 --> 00:15:40.020
我们实际上可以从

00:15:37.680 --> 00:15:42.810
环境，因为我们有一个API 

00:15:40.020 --> 00:15:46.080
我们不想破坏现有用户，所以

00:15:42.810 --> 00:15:48.990
我们将保持相同的方法， 

00:15:46.080 --> 00:15:51.630
没有打破他们，只是传递给

00:15:48.990 --> 00:15:53.730
新名称，但您有时需要

00:15:51.630 --> 00:15:57.029
告诉我们这个已经过时了

00:15:53.730 --> 00:16:00.120
为此，您可以注释

00:15:57.029 --> 00:16:03.690
使用你可以给出一个原因

00:16:00.120 --> 00:16:07.410
糟糕的名称和替换以及

00:16:03.690 --> 00:16:09.120
替代品能够敌对，所以如果你这样做

00:16:07.410 --> 00:16:11.700
那个弹簧靴会检测到

00:16:09.120 --> 00:16:15.329
批注将更新更新您的肉

00:16:11.700 --> 00:16:18.240
有点太IntelliJ IDEA 

00:16:15.329 --> 00:16:20.100
会读到并告诉你，但是

00:16:18.240 --> 00:16:23.880
现在已弃用，为什么和的

00:16:20.100 --> 00:16:25.709
当然你也可以喜欢

00:16:23.880 --> 00:16:28.079
早就喜欢你了

00:16:25.709 --> 00:16:30.500
 buddakan 50，你也可以为你做

00:16:28.079 --> 00:16:30.500
自己的牙齿

00:16:32.350 --> 00:16:37.939
很快也有对

00:16:34.970 --> 00:16:40.850
应用程序llame，所以我要创建一个

00:16:37.939 --> 00:16:44.569
 yamir文件而不是我猜我得到了

00:16:40.850 --> 00:16:47.869
同样的经验，所以说服务器很多

00:16:44.569 --> 00:16:51.199
说些什么的话，如果我是

00:16:47.869 --> 00:17:00.649
去这里，我会根据完成

00:16:51.199 --> 00:17:04.100
在我所处的路径上

00:17:00.649 --> 00:17:06.799
嗯，我想给你看更多的东西

00:17:04.100 --> 00:17:11.809
除了用例或您以外

00:17:06.799 --> 00:17:13.549
基本上可以提供价值清单，因此

00:17:11.809 --> 00:17:18.139
您将获得内容帮助

00:17:13.549 --> 00:17:20.600
也很有价值，但在我们这样做之前

00:17:18.139 --> 00:17:22.909
想创建一个自定义键，所以我想

00:17:20.600 --> 00:17:24.949
因为有一个极端的情况

00:17:22.909 --> 00:17:26.539
你不能用

00:17:24.949 --> 00:17:28.880
 Projo，但您仍然满意

00:17:26.539 --> 00:17:31.639
帮助您创建元数据

00:17:28.880 --> 00:17:34.250
当你最不想的时候，所以没有

00:17:31.639 --> 00:17:36.889
可以的检查方法，以便

00:17:34.250 --> 00:17:41.630
再次输入定义配置密钥

00:17:36.889 --> 00:17:44.000
柜台位于

00:17:41.630 --> 00:17:49.130
基本上写自己和

00:17:44.000 --> 00:17:51.470
基本上IntelliJ会为您提供帮助

00:17:49.130 --> 00:17:53.840
可以在任何地方获得全自动完成

00:17:51.470 --> 00:17:58.519
你如果描述不对你

00:17:53.840 --> 00:18:00.880
得到一些你得到一些早晨你得到

00:17:58.519 --> 00:18:09.500
也充满了完成

00:18:00.880 --> 00:18:12.289
值等等等，所以如果我去这里

00:18:09.500 --> 00:18:18.169
不再不知道了，我身体上

00:18:12.289 --> 00:18:21.889
同样的内容帮助，所以让我们

00:18:18.169 --> 00:18:24.980
让我们现在给一些让我们给一些

00:18:21.889 --> 00:18:27.380
前缀的值，所以我们想给

00:18:24.980 --> 00:18:30.500
给出一个值列表

00:18:27.380 --> 00:18:32.450
完美的球体，所以我需要做

00:18:30.500 --> 00:18:36.320
创建我们要去的其他元数据

00:18:32.450 --> 00:18:38.090
现在在新的部分中进行

00:18:36.320 --> 00:18:41.480
春季路线的新事物

00:18:38.090 --> 00:18:43.640
当这三个又是你时

00:18:41.480 --> 00:18:46.590
为此将充满完成

00:18:43.640 --> 00:18:51.120
那就是我要改变的外星人

00:18:46.590 --> 00:18:54.960
想要给它一个值列表和一个

00:18:51.120 --> 00:19:00.500
值在说明中打个招呼

00:18:54.960 --> 00:19:00.500
我可能什么时候都不知道

00:19:00.680 --> 00:19:10.380
你可以给它另一个

00:19:03.450 --> 00:19:15.120
值是您好Ledo和形式

00:19:10.380 --> 00:19:17.070
懂得非常正确地说些什么

00:19:15.120 --> 00:19:20.850
很好的intellij想法，我们会去解决的

00:19:17.070 --> 00:19:23.610
基本上会给你一个很好的

00:19:20.850 --> 00:19:28.650
内容帮助就像您所做的那样

00:19:23.610 --> 00:19:30.000
你玩得开心，我弄错了名字

00:19:28.650 --> 00:19:31.950
而不是前缀不是真的

00:19:30.000 --> 00:19:33.540
重要，但让我们将其修复为

00:19:31.950 --> 00:19:41.790
确保它实际上是

00:19:33.540 --> 00:19:46.740
对的岛屿，所以我们可以回去

00:19:41.790 --> 00:19:49.920
世界，让我们得到满足

00:19:46.740 --> 00:19:54.830
协助您拥有新的

00:19:49.920 --> 00:19:54.830
我猜这就是魔鬼的效果

00:19:55.730 --> 00:20:06.270
反正就是我很有趣，所以

00:20:02.640 --> 00:20:09.390
你也可以做的另一件事是你可以

00:20:06.270 --> 00:20:12.840
有价值提供者价值提供者a 

00:20:09.390 --> 00:20:15.929
教授IDE的方法，也可以收集

00:20:12.840 --> 00:20:17.820
正确的潜在价值

00:20:15.929 --> 00:20:24.240
关键一件事真的是真的

00:20:17.820 --> 00:20:26.670
很好，是我们吃饭吧

00:20:24.240 --> 00:20:35.010
快速让我们快速创建另一个

00:20:26.670 --> 00:20:42.630
这里的房产很酷，让我们说这是一个

00:20:35.010 --> 00:20:50.510
字符串，所以如果我去这里，我创建一个

00:20:42.630 --> 00:20:54.700
新条目或我可以提供提供商

00:20:50.510 --> 00:20:59.140
在提供商列表中

00:20:54.700 --> 00:21:00.610
其中一些，所以你这些是

00:20:59.140 --> 00:21:03.640
您所拥有的选择，让我们春意盎然

00:21:00.610 --> 00:21:05.500
 103也许我们可以在

00:21:03.640 --> 00:21:08.050
未来，但有趣的是

00:21:05.500 --> 00:21:09.610
弹簧是参考，所以弹簧销

00:21:08.050 --> 00:21:12.070
您基本上在教的参考

00:21:09.610 --> 00:21:17.830
密钥的值是名称的ID 

00:21:12.070 --> 00:21:20.080
光束，让我们看看我想

00:21:17.830 --> 00:21:22.120
由于某种原因，我想拥有

00:21:20.080 --> 00:21:25.930
参考类型的弹簧风

00:21:22.120 --> 00:21:29.410
整数只是为了简化操作，所以我

00:21:25.930 --> 00:21:31.060
要给它一个目标，以便它

00:21:29.410 --> 00:21:32.470
不返回所有的豆

00:21:31.060 --> 00:21:37.590
上下文，但仅仅是我

00:21:32.470 --> 00:21:52.840
有兴趣让我们创建一堆

00:21:37.590 --> 00:21:59.230
材料，如果我真的足够好

00:21:52.840 --> 00:22:03.190
做到那就是那时的足球

00:21:59.230 --> 00:22:05.800
如果我可以自动完成bean 

00:22:03.190 --> 00:22:08.680
键入不存在的光束，它将

00:22:05.800 --> 00:22:13.320
显示为错误，因为编辑器

00:22:08.680 --> 00:22:13.320
没发现这么大的洛丽塔

00:22:15.600 --> 00:22:24.220
对，所以你可以做很多事情

00:22:19.570 --> 00:22:26.200
记住配置键

00:22:24.220 --> 00:22:29.040
协助非常好，而且

00:22:26.200 --> 00:22:31.540
再次改善，您有了新功能

00:22:29.040 --> 00:22:33.850
这项新功能将会

00:22:31.540 --> 00:22:36.880
在春季达到30的好成绩

00:22:33.850 --> 00:22:41.770
下周您已经可以使用它们了

00:22:36.880 --> 00:22:44.290
您升级了关于我的22-250 

00:22:41.770 --> 00:22:49.840
对我来说就是这样，也许再次

00:22:44.290 --> 00:22:52.000
你知道吗，谢谢斯蒂芬

00:22:49.840 --> 00:22:54.910
第二部分我们要多一点

00:22:52.000 --> 00:22:58.300
将军离开 spring boot 世界

00:22:54.910 --> 00:23:01.870
并向前迈进以提供支持

00:22:58.300 --> 00:23:04.990
和IntelliJ 15中的全新事物

00:23:01.870 --> 00:23:08.500
这是弹簧模型图，所以

00:23:04.990 --> 00:23:10.990
快速回顾下一部分

00:23:08.500 --> 00:23:12.790
我们将看看新的支持

00:23:10.990 --> 00:23:15.310
用于默认的断头台注释

00:23:12.790 --> 00:23:18.700
方法以及方法参数

00:23:15.310 --> 00:23:21.160
自动自动借用我们要看

00:23:18.700 --> 00:23:23.010
在同盟国进行注释，这是一个

00:23:21.160 --> 00:23:27.340
扩展现有的非常好的方法

00:23:23.010 --> 00:23:29.080
春天的注释，然后我们

00:23:27.340 --> 00:23:31.480
要看一下应用程序事件

00:23:29.080 --> 00:23:36.340
支持已被编辑和IntelliJ 15 

00:23:31.480 --> 00:23:38.020
第二个大话题是春天

00:23:36.340 --> 00:23:41.670
模型依赖图

00:23:38.020 --> 00:23:45.250
理解和可视化的好方法

00:23:41.670 --> 00:23:46.780
希望修复一些安装错误

00:23:45.250 --> 00:23:49.630
关于您的弹簧配置

00:23:46.780 --> 00:23:51.520
特别是对于较大的项目和

00:23:49.630 --> 00:23:55.450
我今天想谈的最后一个话题是

00:23:51.520 --> 00:23:57.420
我们对未来事物的计划

00:23:55.450 --> 00:24:01.690
在IntelliJ IDEA中获得了弹簧支持

00:23:57.420 --> 00:24:09.070
 15点一好，让我们开始吧

00:24:01.690 --> 00:24:11.830
 Spring框架排名前四，因此第一

00:24:09.070 --> 00:24:15.040
我想在这个班上展示的东西是

00:24:11.830 --> 00:24:17.910
对at Beam注解的支持

00:24:15.040 --> 00:24:21.730
在默认方法和接口上

00:24:17.910 --> 00:24:25.080
 Java中已添加默认方法

00:24:21.730 --> 00:24:28.030
 8，所以您可以定义一个快速回顾

00:24:25.080 --> 00:24:30.820
基本的默认实现

00:24:28.030 --> 00:24:33.070
接口本身在接口本身

00:24:30.820 --> 00:24:35.440
基本上有点像摘要

00:24:33.070 --> 00:24:38.530
具有默认实现的类

00:24:35.440 --> 00:24:44.710
您可以覆盖继承者，但

00:24:38.530 --> 00:24:48.490
在界面上，我们提供以下服务

00:24:44.710 --> 00:24:50.770
在中声明的D类或服务

00:24:48.490 --> 00:24:54.490
这种方法或服务， 

00:24:50.770 --> 00:24:57.970
用图钉注释，如果我们

00:24:54.490 --> 00:25:01.260
继承此接口或配置

00:24:57.970 --> 00:25:03.130
也将继承此光束定义

00:25:01.260 --> 00:25:07.960
让我们来看看风琴

00:25:03.130 --> 00:25:12.130
构型，所以我们来配置它

00:25:07.960 --> 00:25:14.530
实现我们拥有的所有服务配置

00:25:12.130 --> 00:25:16.960
威士忌给定类型的现场服务

00:25:14.530 --> 00:25:18.340
我们期望尝试改变

00:25:16.960 --> 00:25:22.150
连线

00:25:18.340 --> 00:25:25.029
如果我们继续编辑或装订线图标

00:25:22.150 --> 00:25:27.909
我们可以导航到自动词

00:25:25.029 --> 00:25:31.179
服务实例，当我单击

00:25:27.909 --> 00:25:34.179
在这里，我实际上转移到了

00:25:31.179 --> 00:25:39.340
定义光束定义是

00:25:34.179 --> 00:25:43.419
继承接口回到我们

00:25:39.340 --> 00:25:46.409
配置下一件事情

00:25:43.419 --> 00:25:49.900
管理员支持正在支持

00:25:46.409 --> 00:25:53.020
方法参数，所以我们这里有一个

00:25:49.900 --> 00:25:55.740
很少的示范目的

00:25:53.020 --> 00:25:58.659
包装原始订单服务

00:25:55.740 --> 00:26:02.110
我们在订单服务中传递的

00:25:58.659 --> 00:26:04.270
此方法的参数，我们返回

00:26:02.110 --> 00:26:07.600
这个实例在另一个实例中

00:26:04.270 --> 00:26:09.899
如您所见，我们期望

00:26:07.600 --> 00:26:13.480
奇数或服务的原始实例

00:26:09.899 --> 00:26:15.880
提供，然后我可以单击

00:26:13.480 --> 00:26:19.110
在装订线图标上看到

00:26:15.880 --> 00:26:21.820
我们在IntelliJ中解决了

00:26:19.110 --> 00:26:26.950
我们可以验证我们的代码是正确的

00:26:21.820 --> 00:26:31.210
这里当然可以，我们也可以

00:26:26.950 --> 00:26:33.130
覆盖我们继承的默认值

00:26:31.210 --> 00:26:35.980
从自动服务配置界面

00:26:33.130 --> 00:26:44.850
让我们这样做并覆盖

00:26:35.980 --> 00:26:48.450
光束定义，也许我们想

00:26:44.850 --> 00:26:52.690
提供客户服务

00:26:48.450 --> 00:26:54.640
基本上只是一个假的实现

00:26:52.690 --> 00:27:01.809
现有订单服务中仅用于

00:26:54.640 --> 00:27:05.980
示范目的，是的，我们可以

00:27:01.809 --> 00:27:12.130
看到金星现在在这里正确设置

00:27:05.980 --> 00:27:16.419
以及接下来的主题

00:27:12.130 --> 00:27:18.399
是对盟友的支持

00:27:16.419 --> 00:27:21.340
是春天的新注解

00:27:18.399 --> 00:27:26.440
允许您重新定义的框架

00:27:21.340 --> 00:27:28.950
来自的现有注释参数

00:27:26.440 --> 00:27:31.559
内置的弹簧注释

00:27:28.950 --> 00:27:36.450
所以我在这里做了什么，我们定义了自己的

00:27:31.559 --> 00:27:39.299
继承的注释称为我的扫描仪

00:27:36.450 --> 00:27:42.360
从组件可以注释

00:27:39.299 --> 00:27:45.299
春天的框架，我们必须确保

00:27:42.360 --> 00:27:48.240
在保留注释中添加d 

00:27:45.299 --> 00:27:51.750
自己的元素，否则将不会被存储

00:27:48.240 --> 00:27:54.860
在课堂上，它不能用于

00:27:51.750 --> 00:27:58.260
通过spring框架和

00:27:54.860 --> 00:28:01.019
在这里，我们利用实现

00:27:58.260 --> 00:28:04.289
住院，所以基本上我们可以做的是

00:28:01.019 --> 00:28:07.110
从中重新定义现有属性

00:28:04.289 --> 00:28:11.399
在这种情况下继承注释

00:28:07.110 --> 00:28:14.100
组件获得类，我们可以重命名

00:28:11.399 --> 00:28:18.000
例如基本包属性

00:28:14.100 --> 00:28:20.580
在这里，我将其重命名为扫描，当然

00:28:18.000 --> 00:28:22.769
 IntelliJ提供所有完成

00:28:20.580 --> 00:28:25.799
这里也被

00:28:22.769 --> 00:28:28.620
来自父级的相应类型

00:28:25.799 --> 00:28:30.360
注释，您当然可以控制

00:28:28.620 --> 00:28:33.029
单击此处并转到原始内容

00:28:30.360 --> 00:28:36.149
定义是从继承的

00:28:33.029 --> 00:28:39.630
表示法，所以这是一种不错的方法

00:28:36.149 --> 00:28:41.730
在中创建自己的自定义符号

00:28:39.630 --> 00:28:45.659
一切都从默认的春天开始

00:28:41.730 --> 00:28:48.269
您可以重新定义属性的注释

00:28:45.659 --> 00:28:52.820
您可以添加自己的属性

00:28:48.269 --> 00:28:52.820
对于特别有趣

00:29:00.370 --> 00:29:06.610
好吧测试好吧，我们很抱歉

00:29:04.840 --> 00:29:09.520
从会议现场直播

00:29:06.610 --> 00:29:12.850
似乎有一些Wi-Fi问题

00:29:09.520 --> 00:29:16.809
让我们希望它保持稳定还可以

00:29:12.850 --> 00:29:19.360
注释的盟友是

00:29:16.809 --> 00:29:21.940
对您自己特别有用

00:29:19.360 --> 00:29:24.610
编写集成时的注释

00:29:21.940 --> 00:29:26.559
测试，您需要定义一些

00:29:24.610 --> 00:29:30.010
集成的特殊属性

00:29:26.559 --> 00:29:32.770
测试IntelliJ 15是否支持

00:29:30.010 --> 00:29:36.820
现在，让我们来看看我们的习惯

00:29:32.770 --> 00:29:39.400
测试注释基本上是

00:29:36.820 --> 00:29:41.520
默认位置的元注释

00:29:39.400 --> 00:29:44.490
上下文配置注释

00:29:41.520 --> 00:29:47.500
由春季测试框架提供

00:29:44.490 --> 00:29:49.660
再次，我在这里重载

00:29:47.500 --> 00:29:52.179
在这种情况下，现有属性

00:29:49.660 --> 00:29:55.030
对每个商品进行分类，我真的

00:29:52.179 --> 00:29:58.210
用我自己的名字找到它，我可以添加

00:29:55.030 --> 00:30:03.460
我自己的属性或我认为是什么

00:29:58.210 --> 00:30:07.870
我测试的必要条件当然是

00:30:03.460 --> 00:30:12.460
实际测试模型中也支持

00:30:07.870 --> 00:30:17.320
所以在这里我要运行一个小单元测试

00:30:12.460 --> 00:30:20.620
我的订单服务测试和依赖项

00:30:17.320 --> 00:30:24.580
分辨率和DB尼康当然是

00:30:20.620 --> 00:30:31.050
以及在我这里正确检测到的

00:30:24.580 --> 00:30:34.210
测试模型就好了

00:30:31.050 --> 00:30:40.090
金属注释和盟友的

00:30:34.210 --> 00:30:43.120
 IntelliJ 15中的注释支持，因此

00:30:40.090 --> 00:30:46.120
下一个大话题是对

00:30:43.120 --> 00:30:50.970
应用程序事件，这是非常好的

00:30:46.120 --> 00:30:54.250
发送和接收事件的方式或

00:30:50.970 --> 00:30:56.650
基本上是你春天里的信息

00:30:54.250 --> 00:31:04.310
应用程序，让我们看一下

00:30:56.650 --> 00:31:06.890
这样我们有

00:31:04.310 --> 00:31:11.120
该订单服务基本上需要

00:31:06.890 --> 00:31:14.030
订单ID和订单状态

00:31:11.120 --> 00:31:18.080
确认或未确认，并创建一个

00:31:14.030 --> 00:31:21.280
订购事件光束，然后发布

00:31:18.080 --> 00:31:23.930
第y个发布者实例字段，它是

00:31:21.280 --> 00:31:28.400
应用程序事件发布者

00:31:23.930 --> 00:31:32.210
春季提供的此订单事件可以

00:31:28.400 --> 00:31:34.970
只是一个普通的cho豆，否则我们可以

00:31:32.210 --> 00:31:38.120
也从基类继承

00:31:34.970 --> 00:31:40.490
教育活动以及我们自己

00:31:38.120 --> 00:31:43.610
属性，我们有这个源属性

00:31:40.490 --> 00:31:49.400
这里基本上定义了

00:31:43.610 --> 00:31:53.390
事件的起源，所以我们在这里要做的就是

00:31:49.400 --> 00:31:55.370
只是在这里和现在存储这些属性

00:31:53.390 --> 00:31:58.460
让我们来看看这个漂亮的小东西

00:31:55.370 --> 00:32:01.790
已发布活动旁边的图标

00:31:58.460 --> 00:32:05.270
调用，这是对的新支持

00:32:01.790 --> 00:32:08.270
 IntelliJ中的应用程序事件在这里，所以我

00:32:05.270 --> 00:32:12.260
现在可以导航到相应的

00:32:08.270 --> 00:32:15.310
事件监听器，显然有

00:32:12.260 --> 00:32:19.700
一些，让我们来看看

00:32:15.310 --> 00:32:21.530
最简单的一个，这是这里的任何一个

00:32:19.700 --> 00:32:23.780
事件监听器只需要

00:32:21.530 --> 00:32:26.980
用事件监听器注释

00:32:23.780 --> 00:32:32.120
注释，您可以传递

00:32:26.980 --> 00:32:34.820
预期事件类型的参数，因此

00:32:32.120 --> 00:32:38.540
当我们运行此应用程序时，我们将

00:32:34.820 --> 00:32:43.460
实际上发送我们的事件，我们将

00:32:38.540 --> 00:32:47.200
只需打印出订单ID年，我们

00:32:43.460 --> 00:32:50.750
还支持导航回

00:32:47.200 --> 00:32:53.740
起源，我也可以再次点击这里

00:32:50.750 --> 00:32:58.790
在您必须的图标上，并返回到任何

00:32:53.740 --> 00:33:02.000
事件发送者让我们看一下

00:32:58.790 --> 00:33:04.790
我们在这里的其他实现

00:33:02.000 --> 00:33:07.100
听众，让我们转到or事件

00:33:04.790 --> 00:33:10.160
处理器多一点

00:33:07.100 --> 00:33:13.010
再次复杂，我们有活动

00:33:10.160 --> 00:33:16.559
侦听器注释，但在这里我们找到一个

00:33:13.010 --> 00:33:18.749
称为条件的新属性

00:33:16.559 --> 00:33:22.830
所以条件基本上是弹性的

00:33:18.749 --> 00:33:25.799
您可以添加到您的el表达

00:33:22.830 --> 00:33:27.990
方法定义，它使您能够

00:33:25.799 --> 00:33:31.379
过滤实际上将是

00:33:27.990 --> 00:33:34.049
传递给这个方法，我们有

00:33:31.379 --> 00:33:37.320
参数自动完成

00:33:34.049 --> 00:33:40.049
例如，对于所有可用的豆

00:33:37.320 --> 00:33:42.509
就像你在这里看到的顺序

00:33:40.049 --> 00:33:45.389
我们通过也是在自动

00:33:42.509 --> 00:33:48.629
完成列表，当然，因为我们

00:33:45.389 --> 00:33:50.940
知道这种类型的参数

00:33:48.629 --> 00:33:54.299
得到所有的全部完成

00:33:50.940 --> 00:33:57.659
我们可以再次将此事件的属性

00:33:54.299 --> 00:34:00.539
调用快速文档，我们也可以

00:33:57.659 --> 00:34:02.610
导航到那里和所有通常的

00:34:00.539 --> 00:34:06.509
 IntelliJ的功能在此工作

00:34:02.610 --> 00:34:09.599
上下文以及这两种方法

00:34:06.509 --> 00:34:12.810
实际处理不同的订单

00:34:09.599 --> 00:34:16.020
有一个事件监听器处理所有

00:34:12.810 --> 00:34:17.879
确认订单订单，然后我们有

00:34:16.020 --> 00:34:20.760
一个事件监听器仅处理

00:34:17.879 --> 00:34:23.639
特别订单和特别订单是

00:34:20.760 --> 00:34:26.490
刚刚由这个春天AEL定义

00:34:23.639 --> 00:34:32.159
用于检查或ID的表达式

00:34:26.490 --> 00:34:35.849
公制42 ID，让我们快速

00:34:32.159 --> 00:34:39.960
运行我们的主要课程，基本上

00:34:35.849 --> 00:34:42.000
只需最小的设置即可实例化

00:34:39.960 --> 00:34:46.050
订购服务和我们的应用

00:34:42.000 --> 00:34:50.579
上下文，在这里我们将发布以下内容之一

00:34:46.050 --> 00:34:53.429
这些事件或事件以及我何时跑步

00:34:50.579 --> 00:34:59.240
带有触发器的this或event侦听器

00:34:53.429 --> 00:35:02.990
我们什么也看不到，因为那是一个女人

00:34:59.240 --> 00:35:09.359
好的，通常我们应该把系统拿出来

00:35:02.990 --> 00:35:14.010
它在确定之前就可以正常工作了

00:35:09.359 --> 00:35:18.440
应用程序事件支持，现在让我们

00:35:14.010 --> 00:35:22.579
转到弹簧模型依赖项清理

00:35:18.440 --> 00:35:25.619
让我们在这里切换到另一个项目

00:35:22.579 --> 00:35:28.500
那么弹簧模型的依赖性是什么

00:35:25.619 --> 00:35:30.180
广场，你可能已经知道

00:35:28.500 --> 00:35:31.770
现有图

00:35:30.180 --> 00:35:33.510
春豆在那里你可以看到所有

00:35:31.770 --> 00:35:36.410
豆之间的所有关系

00:35:33.510 --> 00:35:38.550
豆，例如所有有线

00:35:36.410 --> 00:35:42.180
关系或组件类型

00:35:38.550 --> 00:35:44.550
关系，在IntelliJ 15中

00:35:42.180 --> 00:35:47.270
引入了新的图表类型

00:35:44.550 --> 00:35:49.829
不显示豆子，但底层

00:35:47.270 --> 00:35:52.710
配置文件及其

00:35:49.829 --> 00:35:55.349
这样的关系通常更大

00:35:52.710 --> 00:35:57.300
春季应用程序，您将没有

00:35:55.349 --> 00:36:00.690
仅一个屏幕配置文件或

00:35:57.300 --> 00:36:06.119
课，但很多很多，通常

00:36:00.690 --> 00:36:08.760
他们将有很多关系

00:36:06.119 --> 00:36:11.069
他们之间有时他们不是很

00:36:08.760 --> 00:36:14.900
易于理解在导入时用于

00:36:11.069 --> 00:36:18.569
例子或使用某种星星

00:36:14.900 --> 00:36:21.440
导入以匹配特定的文件集

00:36:18.569 --> 00:36:24.359
例如或使用组件可以

00:36:21.440 --> 00:36:26.940
进入其他配置

00:36:24.359 --> 00:36:28.589
类巴士，那是

00:36:26.940 --> 00:36:31.079
真的很难理解，特别是如果

00:36:28.589 --> 00:36:33.089
您正在输入一个新项目，或者

00:36:31.079 --> 00:36:35.099
如果您想重构现有的

00:36:33.089 --> 00:36:37.440
弹簧配置，您需要

00:36:35.099 --> 00:36:41.460
了解为什么有些东西不

00:36:37.440 --> 00:36:45.000
像您期望的那样工作

00:36:41.460 --> 00:36:48.780
这个项目只是一个非常人为的

00:36:45.000 --> 00:36:51.960
包含大量Java的项目

00:36:48.780 --> 00:36:54.000
这里的配置类很正常

00:36:51.960 --> 00:36:59.240
没有任何bean的配置类

00:36:54.000 --> 00:37:02.780
以及大量的XML配置清单

00:36:59.240 --> 00:37:04.799
反过来包含其他文件

00:37:02.780 --> 00:37:08.190
配置设置选择组件

00:37:04.799 --> 00:37:10.740
扫描并导入，所以当我调用此

00:37:08.190 --> 00:37:16.579
现在的泉水依赖广场

00:37:10.740 --> 00:37:19.589
我将实际看到的图表菜单

00:37:16.579 --> 00:37:21.839
所有的结果图

00:37:19.589 --> 00:37:24.869
配置文件在最左边

00:37:21.839 --> 00:37:27.839
一边我们有我们的模块，然后我们有我们的

00:37:24.869 --> 00:37:30.420
弹簧五套

00:37:27.839 --> 00:37:33.089
春天的面，然后我们有那些

00:37:30.420 --> 00:37:36.059
主要音符基本精制

00:37:33.089 --> 00:37:39.660
在春季文件中，所以让我们

00:37:36.059 --> 00:37:43.140
快把这个

00:37:39.660 --> 00:37:45.869
面，所以基本上是顶层

00:37:43.140 --> 00:37:48.210
配置文件组，但与您一样

00:37:45.869 --> 00:37:50.160
可以看到，当我们进一步移动到

00:37:48.210 --> 00:37:52.079
对了还有很多

00:37:50.160 --> 00:37:54.450
我们看不到的配置文件

00:37:52.079 --> 00:37:56.819
在这些出没的配置中

00:37:54.450 --> 00:38:00.000
这些正是这些文件

00:37:56.819 --> 00:38:02.819
导入或扫描组件或

00:38:00.000 --> 00:38:05.549
我们支持的其他任何机制

00:38:02.819 --> 00:38:08.520
检测，我们在这里看到那些边缘

00:38:05.549 --> 00:38:11.490
它们用颜色编码并告诉我们

00:38:08.520 --> 00:38:14.549
在这里的示例中，我们有一个组件扫描

00:38:11.490 --> 00:38:17.760
此说明从XML到config eClass 

00:38:14.549 --> 00:38:19.470
所以很容易理解

00:38:17.760 --> 00:38:22.920
该配置类在哪里

00:38:19.470 --> 00:38:25.710
实际上来自你，当然你

00:38:22.920 --> 00:38:28.079
可以导航到这里的任何节点

00:38:25.710 --> 00:38:32.359
看看他们在做什么

00:38:28.079 --> 00:38:36.599
我们也可以去那些节点中的任何一个

00:38:32.359 --> 00:38:42.599
参见定义配置元素

00:38:36.599 --> 00:38:44.549
在这种情况下，组件游戏让我

00:38:42.599 --> 00:38:47.670
告诉你这个春天的另一个例子

00:38:44.549 --> 00:38:51.000
配置图回到

00:38:47.670 --> 00:38:54.059
您可能知道的 spring boot 世界

00:38:51.000 --> 00:38:56.849
在 spring boot 里，有很多人知道

00:38:54.059 --> 00:39:00.299
有些人会称其为魔术

00:38:56.849 --> 00:39:02.789
跳板的自动配置

00:39:00.299 --> 00:39:04.970
幕后发生的是

00:39:02.789 --> 00:39:07.950
斯普林伍德带有大量的

00:39:04.970 --> 00:39:10.140
所有的自动配置类

00:39:07.950 --> 00:39:14.010
它支持的框架和技术

00:39:10.140 --> 00:39:16.619
和黄昏那些自动配置

00:39:14.010 --> 00:39:20.369
类由

00:39:16.619 --> 00:39:22.380
斯普林伍德，他们工作，并在几个

00:39:20.369 --> 00:39:24.690
条件，例如存在或不存在

00:39:22.380 --> 00:39:28.140
班上某些班级的存在

00:39:24.690 --> 00:39:31.680
通过您的应用程序成为网络

00:39:28.140 --> 00:39:35.309
是否申请以及许多其他申请

00:39:31.680 --> 00:39:37.859
事情，然后基本上设置一些

00:39:35.309 --> 00:39:40.740
一种默认配置是

00:39:37.859 --> 00:39:44.160
生产力和跳板的关键

00:39:40.740 --> 00:39:47.190
或其中一个键，实际上

00:39:44.160 --> 00:39:49.200
看到你很有趣

00:39:47.190 --> 00:39:52.410
或配置看起来像

00:39:49.200 --> 00:39:54.180
运行时，您可以在这里执行此操作

00:39:52.410 --> 00:39:57.180
我这里准备的是一个非常

00:39:54.180 --> 00:40:00.180
人工弹簧靴项目使用

00:39:57.180 --> 00:40:04.730
实际具有123快照的最新春季

00:40:00.180 --> 00:40:07.349
然后在spring starter向导上

00:40:04.730 --> 00:40:09.299
检查所有依赖项

00:40:07.349 --> 00:40:12.119
可用，所以这是一个非常人为的

00:40:09.299 --> 00:40:17.849
项目，但只是获得尽可能多的笔记

00:40:12.119 --> 00:40:22.440
可能，当我们看一下

00:40:17.849 --> 00:40:29.160
弹簧模型依赖关系sc惜瓦尔

00:40:22.440 --> 00:40:31.260
注意，我必须单击此处，否则不会

00:40:29.160 --> 00:40:34.470
看起来太有趣了，因为现在

00:40:31.260 --> 00:40:37.170
我们在这里看到的只是我们的设置

00:40:34.470 --> 00:40:41.730
有我们自己的项目，所以我们只有

00:40:37.170 --> 00:40:43.680
我们的主要阶级，这与

00:40:41.730 --> 00:40:47.809
 Swing GUI应用程序正常

00:40:43.680 --> 00:40:50.130
春季图书应用类注解

00:40:47.809 --> 00:40:53.579
当我们变得更有趣时

00:40:50.130 --> 00:40:56.779
启用显示定义为的节点

00:40:53.579 --> 00:41:03.000
库中定义的配置节点

00:40:56.779 --> 00:41:05.420
所以这实际上是所有

00:41:03.000 --> 00:41:08.849
自动配置类是

00:41:05.420 --> 00:41:12.630
通过智能检测并进行处理

00:41:08.849 --> 00:41:15.059
顺便说一下，让我们快速看一下

00:41:12.630 --> 00:41:17.900
你会发现那里有一个巨大的

00:41:15.059 --> 00:41:22.309
自动创建国家/地区类别列表

00:41:17.900 --> 00:41:25.279
由跳板应用触发

00:41:22.309 --> 00:41:28.109
进而触发另一组

00:41:25.279 --> 00:41:29.910
其他配置或导入其他

00:41:28.109 --> 00:41:31.740
配置，仅此而已

00:41:29.910 --> 00:41:33.660
发生的魔法和春季启动

00:41:31.740 --> 00:41:35.789
通常在幕后

00:41:33.660 --> 00:41:38.460
没有看到，但这是一个不错的方法

00:41:35.789 --> 00:41:40.980
可视化所有发生的事情

00:41:38.460 --> 00:41:44.369
自动配置也是很好的方法

00:41:40.980 --> 00:41:47.460
如果您不想依赖，请进行调试

00:41:44.369 --> 00:41:50.190
您可以从中获得的信息

00:41:47.460 --> 00:41:51.809
从弹簧靴本身，如果有

00:41:50.190 --> 00:41:53.520
您其他配置中的某些错误

00:41:51.809 --> 00:41:56.000
事情并没有按您期望的那样工作

00:41:53.520 --> 00:41:56.000
他们是

00:41:56.049 --> 00:42:02.469
我们有一些春季计划

00:42:00.609 --> 00:42:06.400
以及模型依赖俱乐部

00:42:02.469 --> 00:42:09.099
正在考虑尽可能使用它

00:42:06.400 --> 00:42:12.519
弹簧模型设置的入口点

00:42:09.099 --> 00:42:15.009
相关重构实际上是因为我们

00:42:12.519 --> 00:42:16.569
现在拥有所有这些信息emoto的

00:42:15.009 --> 00:42:18.880
配置文件与每个

00:42:16.569 --> 00:42:21.099
其他，还有一些

00:42:18.880 --> 00:42:24.999
有趣的事情，所以我们希望能出现

00:42:21.099 --> 00:42:28.150
与未来这带我到我的

00:42:24.999 --> 00:42:31.449
我想谈的最后一点

00:42:28.150 --> 00:42:34.119
今天，这就是我们的计划

00:42:31.449 --> 00:42:39.429
春季支持和下一个版本

00:42:34.119 --> 00:42:42.219
 IntelliJ 15 note 1保持不变

00:42:39.429 --> 00:42:44.859
本主题为您自动配置

00:42:42.219 --> 00:42:47.859
可以看到图很复杂

00:42:44.859 --> 00:42:51.549
我们已经支持所有

00:42:47.859 --> 00:42:54.759
配置模型，使其启动

00:42:51.549 --> 00:42:57.910
 IntelliJ中的插件支持不会扫描

00:42:54.759 --> 00:43:01.479
订单配置文件和行为

00:42:57.910 --> 00:43:04.479
在护发素上定义

00:43:01.479 --> 00:43:09.429
这些并不能在所有

00:43:04.479 --> 00:43:12.339
那些，但我们尝试实现

00:43:09.429 --> 00:43:15.910
百分之八十到百分之九十的案例

00:43:12.339 --> 00:43:18.269
对于IntelliJ 15点一

00:43:15.910 --> 00:43:21.819
大多数项目的自动配置

00:43:18.269 --> 00:43:25.689
您将获得实际的模型

00:43:21.819 --> 00:43:27.329
将在运行时就像spring 

00:43:25.689 --> 00:43:31.299
开机会处理所有这些自动

00:43:27.329 --> 00:43:35.559
另一个配置类

00:43:31.299 --> 00:43:38.319
改进领域是电子应用

00:43:35.559 --> 00:43:40.599
泰米尔语编辑或支持，并且有一个

00:43:38.319 --> 00:43:46.900
我们想要的一些缺失的部分yandel 

00:43:40.599 --> 00:43:49.599
修复15个未赢得最后一个主题的

00:43:46.900 --> 00:43:51.839
这个区域的弹簧靴更远

00:43:49.599 --> 00:43:54.549
运行配置的改进

00:43:51.839 --> 00:43:58.660
与春天的融合

00:43:54.549 --> 00:44:02.140
启动1点3开发工具，这是一个非常

00:43:58.660 --> 00:44:03.459
提供自动v负载的好方法

00:44:02.140 --> 00:44:06.449
您的应用程序类别

00:44:03.459 --> 00:44:09.550
开发良好的应用程序

00:44:06.449 --> 00:44:12.790
到另一个春天更普遍

00:44:09.550 --> 00:44:15.070
嗯，我们计划更新现有的

00:44:12.790 --> 00:44:18.160
支持spring数据spring安全性

00:44:15.070 --> 00:44:21.960
春季整合使他们成长为

00:44:18.160 --> 00:44:25.900
春季和春季的最新GA版本

00:44:21.960 --> 00:44:29.920
找出电影是零零碎碎的

00:44:25.900 --> 00:44:32.710
一直是编辑，当然

00:44:29.920 --> 00:44:37.570
另一个大话题是云集成

00:44:32.710 --> 00:44:41.110
或支持云技术和

00:44:37.570 --> 00:44:43.210
 IDE，所以我们将尝试重新设计我们的产品

00:44:41.110 --> 00:44:45.550
现有的整合， 

00:44:43.210 --> 00:44:48.550
跑步之间的联系更紧密

00:44:45.550 --> 00:44:52.410
弹簧靴和运行弹簧靴

00:44:48.550 --> 00:44:54.970
云上的应用程序以及其他

00:44:52.410 --> 00:44:59.530
在这方面的改进肯定是

00:44:54.970 --> 00:45:02.740
计划中的最后一个15大主题

00:44:59.530 --> 00:45:05.290
第一点是提高对

00:45:02.740 --> 00:45:10.210
 Spring MVC Spring的Web框架

00:45:05.290 --> 00:45:12.400
使您拥有大多数可能性

00:45:10.210 --> 00:45:17.530
必须通过配置Spring MVC 

00:45:12.400 --> 00:45:20.440
注释支持，这一切都由我承担

00:45:17.530 --> 00:45:22.990
我希望有一些有趣的东西

00:45:20.440 --> 00:45:26.910
供您查看，现在我们将切换

00:45:22.990 --> 00:45:30.130
如果您有我，请切换到问题

00:45:26.910 --> 00:45:34.210
要感谢我们的主持人的加入

00:45:30.130 --> 00:45:37.990
我们出色的演讲一定要

00:45:34.210 --> 00:45:41.830
还要检查我们的网站，当然

00:45:37.990 --> 00:45:45.430
向我们发送您的反馈意见，让我们知道

00:45:41.830 --> 00:45:48.360
我们今天的工作方式和任何建议

00:45:45.430 --> 00:45:51.750
你保重大家谢谢

00:45:48.360 --> 00:45:51.750
祝你有美好的一天

