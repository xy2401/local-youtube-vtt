WEBVTT
Kind: captions
Language: zh-Hans

00:00:03.330 --> 00:00:08.950
今天我们必须涵盖很多

00:00:06.010 --> 00:00:14.710
地面，我们实际上将开始

00:00:08.950 --> 00:00:19.300
今天的春季靴子，我的第一件事

00:00:14.710 --> 00:00:21.820
要谈的是春天

00:00:19.300 --> 00:00:25.480
配置是非常必要的

00:00:21.820 --> 00:00:27.279
在你的身上架起弹簧

00:00:25.480 --> 00:00:31.449
在您的项目中的应用

00:00:27.279 --> 00:00:34.390
 IntelliJ和只是一个新功能是

00:00:31.449 --> 00:00:36.699
现在进入2016年的大门好多了

00:00:34.390 --> 00:00:39.219
自动检测时更新

00:00:36.699 --> 00:00:42.249
配置，所以我们的汽车

00:00:39.219 --> 00:00:44.829
侦探配置保留我们的设置

00:00:42.249 --> 00:00:47.649
开关IntelliJ IDEA可以识别

00:00:44.829 --> 00:00:50.049
自动覆盖弹簧

00:00:47.649 --> 00:00:52.089
引导应用程序以及spring MVC 

00:00:50.049 --> 00:00:55.089
您不需要设置的应用程序

00:00:52.089 --> 00:01:00.249
那些在春天自动手动

00:00:55.089 --> 00:01:04.269
方面和IntelliJ 2016中的新事物

00:01:00.249 --> 00:01:09.430
是否有设置默认值的修复程序

00:01:04.269 --> 00:01:14.170
抱歉，我需要切换回

00:01:09.430 --> 00:01:23.380
在这里提出决议

00:01:14.170 --> 00:01:25.930
看文字的问题，有一个

00:01:23.380 --> 00:01:28.090
快速修复，可创建默认上下文

00:01:25.930 --> 00:01:29.850
默认情况下，其中包括所有

00:01:28.090 --> 00:01:33.220
可用的挥杆配置文件

00:01:29.850 --> 00:01:35.650
 IntelliJ组成了一个新项目， 

00:01:33.220 --> 00:01:38.350
一直是一个问题，因为这使得

00:01:35.650 --> 00:01:41.050
 D文件应包含在内

00:01:38.350 --> 00:01:44.140
通过自动检测过程

00:01:41.050 --> 00:01:46.659
已固定为2602号规范

00:01:44.140 --> 00:01:49.450
在此创建默认上下文上创建

00:01:46.659 --> 00:01:52.300
在通知中，我实际上

00:01:49.450 --> 00:01:55.690
在这里得到警告，告诉我

00:01:52.300 --> 00:01:57.940
 IntelliJ形成自动检测

00:01:55.690 --> 00:02:02.530
我有一个春天心情类型的上下文

00:01:57.940 --> 00:02:04.810
春季示例应用程序及其

00:02:02.530 --> 00:02:08.470
实际上只会创建构面， 

00:02:04.810 --> 00:02:10.899
让所有自动检测文件集为

00:02:08.470 --> 00:02:15.069
自动添加到现在

00:02:10.899 --> 00:02:16.540
可以在这里打开构面，我可以

00:02:15.069 --> 00:02:18.370
已经看到春天了

00:02:16.540 --> 00:02:21.730
应用程序上下文是自动的

00:02:18.370 --> 00:02:25.689
检测到，如有必要，我可以添加

00:02:21.730 --> 00:02:27.430
手动将其他任何文件

00:02:25.689 --> 00:02:30.359
配置的上下文，但不会

00:02:27.430 --> 00:02:39.010
干扰那些自动配置的文件

00:02:30.359 --> 00:02:41.170
与订单创建上下文确定

00:02:39.010 --> 00:02:43.900
另一个小细节，但我仍然认为

00:02:41.170 --> 00:02:46.389
当您使用teespring时非常不错

00:02:43.900 --> 00:02:53.439
初始化向导创建一个新的

00:02:46.389 --> 00:02:56.950
 Springwood项目仅使用

00:02:53.439 --> 00:03:00.189
默认值在这里，当您选择

00:02:56.950 --> 00:03:01.959
首先，我们现在停止一个区域

00:03:00.189 --> 00:03:04.810
您可以在其中选择Springwood 

00:03:01.959 --> 00:03:07.720
版本在这里你可以崩溃， 

00:03:04.810 --> 00:03:10.569
在此处展开​​所有可用的启动器

00:03:07.720 --> 00:03:14.230
使浏览它们或您更容易

00:03:10.569 --> 00:03:18.189
可以在这里使用搜索字段

00:03:14.230 --> 00:03:19.900
只会突出显示所有匹配的星星

00:03:18.189 --> 00:03:24.909
就像您被设置所使用

00:03:19.900 --> 00:03:27.400
搜索，好事情是当你

00:03:24.909 --> 00:03:29.769
例如回到较旧的版本

00:03:27.400 --> 00:03:32.709
春天的时候你想知道树吗

00:03:29.769 --> 00:03:35.919
释放一些星星可能不会

00:03:32.709 --> 00:03:38.500
在该版本中以及当您

00:03:35.919 --> 00:03:41.019
只需将鼠标悬停在这些星星上，您就会看到

00:03:38.500 --> 00:03:42.940
工具提示，不仅可以给您一点

00:03:41.019 --> 00:03:46.030
关于恒星的一般描述

00:03:42.940 --> 00:03:49.389
关于，还告诉你什么春天

00:03:46.030 --> 00:03:51.459
仅星号需要版本

00:03:49.389 --> 00:03:53.260
可以在您的项目中使用

00:03:51.459 --> 00:03:58.510
这是找出原因的好方法

00:03:53.260 --> 00:04:01.150
有些东西不可用，所以也许

00:03:58.510 --> 00:04:03.430
 Stefan可以告诉我们更多些什么

00:04:01.150 --> 00:04:05.560
是Springwood 1.4中的新功能

00:04:03.430 --> 00:04:07.979
就像上周一样被释放了

00:04:05.560 --> 00:04:07.979
那个正确

00:04:09.989 --> 00:04:15.879
因此，Spring Boot 1.4最后发布了

00:04:13.030 --> 00:04:17.979
一周的确可以在顶部看到

00:04:15.879 --> 00:04:20.470
这是反应性的网络实验吗

00:04:17.979 --> 00:04:23.800
入门者，所以我们试图做的是

00:04:20.470 --> 00:04:25.450
是为了让您尝试新的

00:04:23.800 --> 00:04:27.550
使用Spring的反应性主动

00:04:25.450 --> 00:04:29.919
框架5，所以我们发布了第一个

00:04:27.550 --> 00:04:32.169
也是上周的里程碑

00:04:29.919 --> 00:04:37.120
因此，如果您想尝试这种抢先体验

00:04:32.169 --> 00:04:39.550
您可以这样做，我们还添加了一些

00:04:37.120 --> 00:04:42.639
新的序列巡视支持将不会

00:04:39.550 --> 00:04:45.460
下降得如此之快，以至于基础和新

00:04:42.639 --> 00:04:49.689
对于JS，这样您就可以现在找到它们

00:04:45.460 --> 00:04:51.249
在入门中，我们还

00:04:49.689 --> 00:04:53.710
添加了许多新功能， 

00:04:51.249 --> 00:04:55.419
像故障分析仪这样的手机

00:04:53.710 --> 00:04:58.840
这是您的spring boot应用程序

00:04:55.419 --> 00:05:01.599
无法启动，我们分析异常

00:04:58.840 --> 00:05:05.500
我们会尝试给您一个专门的错误

00:05:01.599 --> 00:05:08.500
消息我们也改善了很多

00:05:05.500 --> 00:05:11.139
切片测试支持，因此

00:05:08.500 --> 00:05:13.870
只能开始一部分的能力

00:05:11.139 --> 00:05:15.189
并仅关注其中的一层

00:05:13.870 --> 00:05:18.069
您的应用程序，例如

00:05:15.189 --> 00:05:20.860
可能有一个使用模拟MVC的测试

00:05:18.069 --> 00:05:23.289
对于每个控制器，就是这样

00:05:20.860 --> 00:05:26.589
只会为此加载上下文

00:05:23.289 --> 00:05:28.389
我们知道的特定控制器

00:05:26.589 --> 00:05:30.069
对于很多事情，例如你有相同的

00:05:28.389 --> 00:05:32.379
使用数据API的数据层

00:05:30.069 --> 00:05:35.789
测试我们有纯粹的休息客户

00:05:32.379 --> 00:05:39.759
其余的客户和卫生设施以及

00:05:35.789 --> 00:05:41.650
还有不止于此

00:05:39.759 --> 00:05:47.050
通常测试支持很多

00:05:41.650 --> 00:05:48.339
更容易配置，一切都很好，谢谢

00:05:47.050 --> 00:05:50.979
斯特凡的更新

00:05:48.339 --> 00:05:55.449
嗯，每个人都应该去尝试一下

00:05:50.979 --> 00:05:57.789
新1.4的另一个小巧之处

00:05:55.449 --> 00:06:00.669
关于春天的一点初始化

00:05:57.789 --> 00:06:04.479
向导，当我们回到第一页

00:06:00.669 --> 00:06:08.139
您可以在Maven和Gradle之间进行选择

00:06:04.479 --> 00:06:10.449
项目，现在当您创建一个

00:06:08.139 --> 00:06:12.129
更大的项目IntelliJ IDEA也将

00:06:10.449 --> 00:06:14.770
自动添加必要的

00:06:12.129 --> 00:06:17.409
 Springfest自动添加到您的项目

00:06:14.770 --> 00:06:19.479
所以这就是我们对

00:06:17.409 --> 00:06:26.080
长期以来的Maven项目

00:06:19.479 --> 00:06:30.029
东西不工作更大，所以现在我

00:06:26.080 --> 00:06:30.029
可以切换到演示模式

00:06:30.810 --> 00:06:35.649
转到应用程序属性

00:06:33.699 --> 00:06:38.529
支持以下配置文件

00:06:35.649 --> 00:06:42.279
春天的靴子，我们在这里只看到一个

00:06:38.529 --> 00:06:44.979
属实的财产

00:06:42.279 --> 00:06:46.179
所以这是一个已弃用的属性IntelliJ 

00:06:44.979 --> 00:06:48.399
希望我们对此

00:06:46.179 --> 00:06:52.409
也有快速的解决方法来替换它

00:06:48.399 --> 00:06:56.889
与任何新的财产是

00:06:52.409 --> 00:06:59.079
弃用更换和一个不错的新

00:06:56.889 --> 00:07:02.559
事情是当您打开文档时

00:06:59.079 --> 00:07:06.339
对于该配置属性，现在您

00:07:02.559 --> 00:07:11.019
也可以单击名为

00:07:06.339 --> 00:07:13.719
属性，请参阅有关的文档

00:07:11.019 --> 00:07:16.029
新的替代配置没有

00:07:13.719 --> 00:07:20.589
必须将其插入您的

00:07:16.029 --> 00:07:23.379
应用属性那里有

00:07:20.589 --> 00:07:25.059
修复了一些应用程序

00:07:23.379 --> 00:07:28.599
属性和应用Yama's 

00:07:25.059 --> 00:07:34.869
一般而言，我们的支持会改进此端口

00:07:28.599 --> 00:07:36.669
对于一些更奇特的方式

00:07:34.869 --> 00:07:39.999
注意配置键

00:07:36.669 --> 00:07:43.449
 Springwood允许使用多种符号

00:07:39.999 --> 00:07:45.879
例如小写的混合和东西

00:07:43.449 --> 00:07:48.969
这样我们现在好多了

00:07:45.879 --> 00:07:54.039
支持更多异国情调的变化

00:07:48.969 --> 00:07:57.759
使用自动和

00:07:54.039 --> 00:08:01.779
可以在以下位置配置的IntelliJ IDEA 

00:07:57.759 --> 00:08:06.459
编译器设置使项目

00:08:01.779 --> 00:08:09.129
自动支持小型项目

00:08:06.459 --> 00:08:11.669
创建本地spring元数据

00:08:09.129 --> 00:08:14.619
使用添加配置属性

00:08:11.669 --> 00:08:19.389
正确地有一个问题

00:08:14.619 --> 00:08:21.549
在此之前解决现在好了

00:08:19.389 --> 00:08:24.789
这就是我们要展示的关于春天的一切

00:08:21.549 --> 00:08:31.589
引导和最新版本，我要去

00:08:24.789 --> 00:08:34.659
现在切换到其他项目

00:08:31.589 --> 00:08:38.229
其他的东西，我们将要

00:08:34.659 --> 00:08:43.180
从春季缓存开始，所以斯特凡

00:08:38.229 --> 00:08:44.829
是春天缓存，所以缓存

00:08:43.180 --> 00:08:47.050
你是Spring Framework中的抽象

00:08:44.829 --> 00:08:49.389
不，这不是新的，真的

00:08:47.050 --> 00:08:51.730
在那里一段时间，我们改善了

00:08:49.389 --> 00:08:54.759
在最新的支持中

00:08:51.730 --> 00:08:56.070
 X线所以基本上是缓存

00:08:54.759 --> 00:09:01.890
基础架构可以让您

00:08:56.070 --> 00:09:04.400
标记方法击败方法

00:09:01.890 --> 00:09:09.630
包括现金方面，当您这样做时

00:09:04.400 --> 00:09:11.970
春天会自动检查您是否

00:09:09.630 --> 00:09:13.710
值计算的值

00:09:11.970 --> 00:09:16.730
该方法已经兑现

00:09:13.710 --> 00:09:18.960
事先再说一次，也许你可以打开一个

00:09:16.730 --> 00:09:21.030
具有一些缓存的类

00:09:18.960 --> 00:09:24.840
对其进行注释，以便我们可以获取

00:09:21.030 --> 00:09:26.520
因此，如果我们看一下这是一个

00:09:24.840 --> 00:09:28.560
不好的例子，因为它只在

00:09:26.520 --> 00:09:30.750
界面，但我们将讨论

00:09:28.560 --> 00:09:32.430
一分钟后，您就可以将其内置

00:09:30.750 --> 00:09:34.820
返回以下内容的新闻记者

00:09:32.430 --> 00:09:39.390
整数，它开始并

00:09:34.820 --> 00:09:42.570
如果您添加此参数

00:09:39.390 --> 00:09:44.640
 bin方法上的注释

00:09:42.570 --> 00:09:48.380
默认行为是计算机密钥

00:09:44.640 --> 00:09:51.750
根据开始和结束值，以及

00:09:48.380 --> 00:09:54.240
每当您在自己的方法中调用该方法

00:09:51.750 --> 00:09:56.150
代码，并且有一个现金方面

00:09:54.240 --> 00:09:58.470
将首先检查该密钥是否为

00:09:56.150 --> 00:10:01.590
在缓存名称中可用

00:09:58.470 --> 00:10:03.720
米卡的名字，如果是这样的话

00:10:01.590 --> 00:10:07.320
方法甚至不会被调用，所以

00:10:03.720 --> 00:10:10.320
你会得到你得到的条目

00:10:07.320 --> 00:10:13.950
如果不是，直接缓存

00:10:10.320 --> 00:10:15.870
和往常一样调用该方法

00:10:13.950 --> 00:10:18.390
返回值给调用者我们

00:10:15.870 --> 00:10:20.040
还将获取缓存，以便下一步

00:10:18.390 --> 00:10:22.500
用稳定的开始和结束进行呼叫

00:10:20.040 --> 00:10:27.500
参数有机会吃掉缓存

00:10:22.500 --> 00:10:31.140
一步步好，谢谢手机

00:10:27.500 --> 00:10:33.360
弹簧缓存简介

00:10:31.140 --> 00:10:36.840
说我们这里有随意的注解

00:10:33.360 --> 00:10:39.720
在界面上，只是警告

00:10:36.840 --> 00:10:42.690
 IntelliJ IDEA是一项新检查

00:10:39.720 --> 00:10:46.470
为什么春天不建议进入

00:10:42.690 --> 00:10:48.510
注释界面是的，是的

00:10:46.470 --> 00:10:50.730
在我回复之前，我认为这是

00:10:48.510 --> 00:10:53.640
是新注释这些新检查

00:10:50.730 --> 00:10:57.030
真的很棒，因为这是

00:10:53.640 --> 00:10:59.310
我们推广VRD的一些最佳做法

00:10:57.030 --> 00:11:03.080
 IDE，因此您使用的工具

00:10:59.310 --> 00:11:06.570
代码为您提供有关以下内容的即时反馈

00:11:03.080 --> 00:11:09.450
您正在做的事情以及建议

00:11:06.570 --> 00:11:10.920
如何设计您的组件

00:11:09.450 --> 00:11:13.560
这种特殊情况的原因

00:11:10.920 --> 00:11:15.840
我们添加此检查是因为

00:11:13.560 --> 00:11:18.060
你不应该把实施细节

00:11:15.840 --> 00:11:20.700
唯一的界面，这真的是

00:11:18.060 --> 00:11:22.860
实施细节，您可能会有

00:11:20.700 --> 00:11:26.010
这个的实现

00:11:22.860 --> 00:11:28.790
不需要兑现的服务

00:11:26.010 --> 00:11:31.830
不论出于何种原因请注意

00:11:28.790 --> 00:11:33.900
在界面上，但是实际上

00:11:31.830 --> 00:11:35.910
没有办法禁用它，这是一个

00:11:33.900 --> 00:11:40.110
实施细节成为

00:11:35.910 --> 00:11:42.540
默认好吧，所以让我们按照

00:11:40.110 --> 00:11:45.690
检查的建议，并在

00:11:42.540 --> 00:11:48.150
禁用此注释的最佳实践

00:11:45.690 --> 00:11:52.320
在界面上，让我们看一下

00:11:48.150 --> 00:11:55.980
在这里的实际实施中，所以我们

00:11:52.320 --> 00:11:59.460
有这个实现我们的服务器

00:11:55.980 --> 00:12:03.720
缓存服务及其构建方法

00:11:59.460 --> 00:12:05.670
整数列表，所以现在我将

00:12:03.720 --> 00:12:09.900
关于实现的喀尔巴鄂注释

00:12:05.670 --> 00:12:12.750
就像检查告诉我们的一样， 

00:12:09.900 --> 00:12:14.700
只是这里的问题，IntelliJ想要

00:12:12.750 --> 00:12:17.910
我们应该提供一个缓存名称

00:12:14.700 --> 00:12:20.730
基本上就像是键或哈希

00:12:17.910 --> 00:12:23.430
存储缓存结果的关键

00:12:20.730 --> 00:12:27.980
春天来了，然后返回

00:12:23.430 --> 00:12:27.980
测试结果而不是调用

00:12:28.040 --> 00:12:34.320
所以这又是这又如何

00:12:32.400 --> 00:12:37.230
可以真正帮助我们，也可以真正帮助您

00:12:34.320 --> 00:12:40.140
弄清楚具有的功能

00:12:37.230 --> 00:12:42.210
最初随着时间的流逝而发展

00:12:40.140 --> 00:12:45.510
引入了缓存抽象

00:12:42.210 --> 00:12:46.590
缓存名称也是如此

00:12:45.510 --> 00:12:47.880
缓存应该用于

00:12:46.590 --> 00:12:50.820
特定方法是强制性的

00:12:47.880 --> 00:12:53.450
属性，以便每当您使用Cashable时

00:12:50.820 --> 00:12:57.600
如果您没有提供缓存名称

00:12:53.450 --> 00:12:59.940
属性您的代码将无法编译，因此

00:12:57.600 --> 00:13:02.540
您真的很容易意识到

00:12:59.940 --> 00:13:05.310
在此期间出了点问题

00:13:02.540 --> 00:13:06.930
社区要求我们改善

00:13:05.310 --> 00:13:09.360
当前的支持，你可以

00:13:06.930 --> 00:13:11.880
基本上在课堂上看到

00:13:09.360 --> 00:13:13.440
是讨论图形符号，所以其中之一

00:13:11.880 --> 00:13:14.190
社区要求我们做的事情

00:13:13.440 --> 00:13:18.480
提高

00:13:14.190 --> 00:13:21.730
是外在化名称的一种方式

00:13:18.480 --> 00:13:23.889
您可以使用的缓存

00:13:21.730 --> 00:13:28.439
现在将现金配置为课程级别

00:13:23.889 --> 00:13:31.359
已经有一段时间了，但如果您这样做的话，任何现金

00:13:28.439 --> 00:13:32.769
该类上的方法将使用

00:13:31.359 --> 00:13:35.189
缓存服务缓存，因此您没有

00:13:32.769 --> 00:13:38.889
一遍又一遍地重复该值

00:13:35.189 --> 00:13:41.139
下一个不在此代码上

00:13:38.889 --> 00:13:42.879
没有一个额外的属性

00:13:41.139 --> 00:13:46.929
我们介绍了所谓的缓存解析器

00:13:42.879 --> 00:13:48.639
小牛结束了是豆的名字

00:13:46.929 --> 00:13:52.179
就像系统缓存管理器一样

00:13:48.639 --> 00:13:54.279
属性在那里，如果您指定它，我们

00:13:52.179 --> 00:13:55.839
将调用bean，以便小牛结束

00:13:54.279 --> 00:13:58.269
实施，您将有机会

00:13:55.839 --> 00:14:02.049
计算要在以下位置使用的缓存名称

00:13:58.269 --> 00:14:05.470
长话短说

00:14:02.049 --> 00:14:07.959
现在有很多方法可以指定缓存名称

00:14:05.470 --> 00:14:08.559
并且该属性不能在数据上

00:14:07.959 --> 00:14:11.470
不再

00:14:08.559 --> 00:14:15.749
所以我们需要一种警告您的方法

00:14:11.470 --> 00:14:17.799
这个班没有名字

00:14:15.749 --> 00:14:20.199
您确定这就是您想要的吗

00:14:17.799 --> 00:14:24.339
所以这个主意确实很棒

00:14:20.199 --> 00:14:27.970
支持那好吧，这很有趣，所以我们

00:14:24.339 --> 00:14:30.459
要取消对班级的评论

00:14:27.970 --> 00:14:33.069
在这里缓存配置符号

00:14:30.459 --> 00:14:35.319
定义缓存名称并立即

00:14:33.069 --> 00:14:38.169
检查就消失了

00:14:35.319 --> 00:14:40.359
期望如此，我们有几个

00:14:38.169 --> 00:14:44.230
这里的属性，例如缓存管理器

00:14:40.359 --> 00:14:48.309
密钥生成器，并且那些真值是关闭的

00:14:44.230 --> 00:14:50.709
自定义实现bean，您可以

00:14:48.309 --> 00:14:53.049
提供teespring缓存以备取用

00:14:50.709 --> 00:14:55.660
当然我们有自动完成

00:14:53.049 --> 00:15:00.100
通常可以在这里控制点击

00:14:55.660 --> 00:15:05.109
这里去那里，然后回到

00:15:00.100 --> 00:15:07.720
配置不再次提供Tory服务

00:15:05.109 --> 00:15:10.209
分钟，我们只删除缓存名称

00:15:07.720 --> 00:15:14.109
类级别的属性并放入

00:15:10.209 --> 00:15:16.619
它在这里和我的这种方法

00:15:14.109 --> 00:15:19.709
现在要做的是介绍另一个

00:15:16.619 --> 00:15:23.470
仅用于演示目的的方法

00:15:19.709 --> 00:15:29.810
应该有相同的回报

00:15:23.470 --> 00:15:34.490
输入并返回

00:15:29.810 --> 00:15:38.330
此处的tamo价值和可兑现的相同价值

00:15:34.490 --> 00:15:41.390
该方法的注释也是如此，所以我们

00:15:38.330 --> 00:15:44.920
没有两个使用相同方法的方法

00:15:41.390 --> 00:15:47.420
缓存名称，您会看到

00:15:44.920 --> 00:15:50.120
 IntelliJ立即添加新的装订线

00:15:47.420 --> 00:15:52.850
此处的图标，可让您转到

00:15:50.120 --> 00:15:55.670
使用该注释的其他缓存

00:15:52.850 --> 00:15:58.820
相同的缓存名称，所以当我重复时

00:15:55.670 --> 00:16:01.700
再次给它起个名字我

00:15:58.820 --> 00:16:05.060
可以实际得到所有

00:16:01.700 --> 00:16:06.680
使用cacheable注释的方法

00:16:05.060 --> 00:16:09.200
相同的缓存名称，我可以快速

00:16:06.680 --> 00:16:13.930
在他们之间导航以确保

00:16:09.200 --> 00:16:13.930
他们实际上应该遵循相同的规则

00:16:14.890 --> 00:16:22.160
好的，这就是导航

00:16:18.560 --> 00:16:25.580
重点突出，只需快速注释一下即可

00:16:22.160 --> 00:16:29.240
还提供您自己的元注释

00:16:25.580 --> 00:16:31.820
可兑现的，所以您可以添加一些

00:16:29.240 --> 00:16:34.630
在那里自定义属性或使用盟友

00:16:31.820 --> 00:16:37.220
用于重新定义现有属性

00:16:34.630 --> 00:16:39.770
我们在这里拥有的所有这四个

00:16:37.220 --> 00:16:41.980
为您的自定义元患者工作

00:16:39.770 --> 00:16:41.980
好

00:16:44.170 --> 00:16:50.960
所以我们跳到下一个主题

00:16:46.820 --> 00:16:53.210
是春季，还是拼写有弹性

00:16:50.960 --> 00:16:55.040
 Ellison表达语言提供者

00:16:53.210 --> 00:16:57.920
弹簧框架和使用

00:16:55.040 --> 00:17:00.860
在所有这些春季子项目中

00:16:57.920 --> 00:17:03.579
它允许您定义运行时

00:17:00.860 --> 00:17:07.699
各种条件或评估

00:17:03.579 --> 00:17:09.560
点，所以我们可以看到这种情况

00:17:07.699 --> 00:17:12.020
这里的属性略有

00:17:09.560 --> 00:17:14.839
不同的背景颜色和这个

00:17:12.020 --> 00:17:17.329
让我们发现，在这里我们找到了一个

00:17:14.839 --> 00:17:19.730
实际定义的拼写表达

00:17:17.329 --> 00:17:23.260
应该评估的条件

00:17:19.730 --> 00:17:26.720
在运行时，我们要做的一件事

00:17:23.260 --> 00:17:32.180
现在改善了很多，我们使用

00:17:26.720 --> 00:17:34.850
我们可以使用的上下文相关变量

00:17:32.180 --> 00:17:38.540
因此上下文相关变量

00:17:34.850 --> 00:17:41.300
时间表注释知道的示例

00:17:38.540 --> 00:17:43.250
关于我们这里的参数

00:17:41.300 --> 00:17:47.450
这样我就可以实际控制

00:17:43.250 --> 00:17:50.060
单击此处并转到参数

00:17:47.450 --> 00:17:54.620
在这个咒语中自动解决

00:17:50.060 --> 00:17:58.520
表达这当然意味着我们

00:17:54.620 --> 00:18:05.960
有自动完成的参数

00:17:58.520 --> 00:18:10.100
 Stefan也想在这里添加一些

00:18:05.960 --> 00:18:13.490
咬一下这里，如果你看的话

00:18:10.100 --> 00:18:16.360
如果您将其打开，则条件为Javadoc 

00:18:13.490 --> 00:18:19.460
他打开了木偶，也许要向

00:18:16.360 --> 00:18:23.210
这里的观众，如果您滚动一下

00:18:19.460 --> 00:18:25.670
您会看到这个Javadoc是

00:18:23.210 --> 00:18:27.620
实际上相当广泛的解释你

00:18:25.670 --> 00:18:31.160
这个特定的背景是什么

00:18:27.620 --> 00:18:33.920
春季表达语言默认为

00:18:31.160 --> 00:18:35.330
您会看到您可以访问

00:18:33.920 --> 00:18:38.630
您可以访问目标的方法

00:18:35.330 --> 00:18:40.940
这是目标实例

00:18:38.630 --> 00:18:44.510
访问将要访问的缓存

00:18:40.940 --> 00:18:47.030
用于那个问题和根本

00:18:44.510 --> 00:18:49.160
根上下文实际上从

00:18:47.030 --> 00:18:50.090
一种表达支持另一种表达

00:18:49.160 --> 00:18:52.400
一会儿就会看到

00:18:50.090 --> 00:18:54.910
所以这真的很棒，我们有一个

00:18:52.400 --> 00:18:57.970
完成对

00:18:54.910 --> 00:19:00.580
现在拼写，因为这样您就可以

00:18:57.970 --> 00:19:02.890
实际上是我们所支持的协助

00:19:00.580 --> 00:19:06.210
您可以在其中使用的可行性

00:19:02.890 --> 00:19:08.050
你的咒语表达正确

00:19:06.210 --> 00:19:10.830
斯蒂芬刚才提到

00:19:08.050 --> 00:19:14.380
上下文相关的路由变量或

00:19:10.830 --> 00:19:16.450
路由对象，如您所见

00:19:14.380 --> 00:19:19.120
实际上在这里知道路由对象，并且

00:19:16.450 --> 00:19:21.730
到将要使用的原型

00:19:19.120 --> 00:19:23.560
在春季运行时，当然我们

00:19:21.730 --> 00:19:26.500
可以从中访问所有属性

00:19:23.560 --> 00:19:31.920
对象，所以这是一个非常好的方法

00:19:26.500 --> 00:19:35.200
只是获得非常好的上下文相关

00:19:31.920 --> 00:19:40.000
全部协助完成导航

00:19:35.200 --> 00:19:43.810
这些表达方式也可以

00:19:40.000 --> 00:19:48.850
春季安全性较小，因此春季

00:19:43.810 --> 00:19:51.670
安全我们有各种注释

00:19:48.850 --> 00:19:54.040
我们也支持咒语

00:19:51.670 --> 00:19:55.920
很快就跳到一个非常简单的

00:19:54.040 --> 00:19:59.890
这里的示例正在使用广告

00:19:55.920 --> 00:20:02.830
预先授权的注释

00:19:59.890 --> 00:20:06.130
看到有一个has roll方法

00:20:02.830 --> 00:20:08.590
一遍又一遍地叫这是产量

00:20:06.130 --> 00:20:10.630
弹簧提供的物体

00:20:08.590 --> 00:20:13.180
咒语在运行时的安全性

00:20:10.630 --> 00:20:16.150
上下文，我们又有了Auto 

00:20:13.180 --> 00:20:19.660
在这里完成所有方法

00:20:16.150 --> 00:20:22.000
例如我们在这里，你知道它是

00:20:19.660 --> 00:20:24.160
只是确保您不会的好方法

00:20:22.000 --> 00:20:26.290
错过类型或错过任何关键噪音

00:20:24.160 --> 00:20:30.460
实际可用的功能

00:20:26.290 --> 00:20:34.570
您当然可以在这种aspera环境中

00:20:30.460 --> 00:20:39.700
在任何

00:20:34.570 --> 00:20:42.430
方法调用，但是好的新事物是

00:20:39.700 --> 00:20:45.340
我们编辑和拼写语言支持

00:20:42.430 --> 00:20:46.720
现在我们展示我们也支持展示

00:20:45.340 --> 00:20:50.860
参数信息

00:20:46.720 --> 00:20:53.230
快捷方式，所以当我使用命令PI时可以

00:20:50.860 --> 00:20:56.050
实际看到参数只是方法

00:20:53.230 --> 00:21:01.450
必须提供让我们只使用一个

00:20:56.050 --> 00:21:04.960
多一些参数，您可以使用

00:21:01.450 --> 00:21:06.290
正如您从Java或其他任何工具中了解的那样

00:21:04.960 --> 00:21:12.590
编程语言

00:21:06.290 --> 00:21:14.660
具有这个功能的另一个好地方

00:21:12.590 --> 00:21:19.040
改善的东西没有混乱

00:21:14.660 --> 00:21:23.720
 2016或两项运动得到改善

00:21:19.040 --> 00:21:30.950
自动完成，所以我们拥有所有

00:21:23.720 --> 00:21:32.900
这里的关键字，我们有很好的自动

00:21:30.950 --> 00:21:36.860
例如tu类型的完成

00:21:32.900 --> 00:21:40.010
参考，所以我只输入T然后点按

00:21:36.860 --> 00:21:43.970
它将自动切换到

00:21:40.010 --> 00:21:49.700
课程名称，以便我提供课程

00:21:43.970 --> 00:21:52.910
在这里命名任何东西，当然

00:21:49.700 --> 00:21:56.630
您可以再次导航到该类

00:21:52.910 --> 00:21:59.780
 Javadoc功能，甚至可以使用

00:21:56.630 --> 00:22:01.760
重命名，所以当您提到一个

00:21:59.780 --> 00:22:03.710
项目中的课程，然后重命名

00:22:01.760 --> 00:22:05.930
该类所有这些引用将是

00:22:03.710 --> 00:22:10.550
如您期望的那样进行了更新

00:22:05.930 --> 00:22:13.070
 IntelliJ当然是自动完成

00:22:10.550 --> 00:22:17.990
当您键入特殊字符时也有所改善

00:22:13.070 --> 00:22:19.790
字符，所以当您键入此符号时

00:22:17.990 --> 00:22:21.980
会自动弹出自动

00:22:19.790 --> 00:22:25.160
完成菜单，以便您可以继续

00:22:21.980 --> 00:22:28.910
在这里输入@同样适用

00:22:25.160 --> 00:22:32.840
标志，最重要的是

00:22:28.910 --> 00:22:37.760
解析的很多很多修复

00:22:32.840 --> 00:22:40.250
对这些表达式进行评估

00:22:37.760 --> 00:22:45.470
例如，我们支持嵌入式地图

00:22:40.250 --> 00:22:51.920
表示法，您可以在这里

00:22:45.470 --> 00:22:53.660
将一个带有值的键放在您的内部

00:22:51.920 --> 00:22:59.060
拼写表达，它将创建一个

00:22:53.660 --> 00:23:01.660
即时地图上的另一个

00:22:59.060 --> 00:23:07.010
正确知道的事情通过了我们

00:23:01.660 --> 00:23:13.420
以o开头的十六进制数

00:23:07.010 --> 00:23:15.950
个星期，我实际上了解到

00:23:13.420 --> 00:23:19.940
关键经文实际上是个案

00:23:15.950 --> 00:23:22.159
不敏感，所以如果您喜欢写

00:23:19.940 --> 00:23:24.860
好吧，散布而不是小写true 

00:23:22.159 --> 00:23:26.840
那里还没有正确通过

00:23:24.860 --> 00:23:30.649
实际上已经修复了数十个， 

00:23:26.840 --> 00:23:33.409
如果你的咒语表达可能有一些

00:23:30.649 --> 00:23:39.379
尝试之前的问题

00:23:33.409 --> 00:23:42.049
我希望它已修复，但又是一个新的重大改进

00:23:39.379 --> 00:23:44.509
拼写语言支持中的功能是

00:23:42.049 --> 00:23:54.169
不，我们有专门的颜色设置

00:23:44.509 --> 00:23:56.149
消除语言页面，因此

00:23:54.169 --> 00:24:00.500
例如，您不喜欢默认颜色

00:23:56.149 --> 00:24:06.230
我们可以例如更改方案

00:24:00.500 --> 00:24:11.600
关键字突出显示并选择一个

00:24:06.230 --> 00:24:13.549
像这样和你有点不同的颜色

00:24:11.600 --> 00:24:15.620
可以在预览中看到它的颜色

00:24:13.549 --> 00:24:17.779
捡起来，这种影响现在真的

00:24:15.620 --> 00:24:21.110
以前只是消除语言

00:24:17.779 --> 00:24:25.009
使用与JSP相同的设置

00:24:21.110 --> 00:24:27.350
表达语言，但因为有弹性

00:24:25.009 --> 00:24:31.000
我们的语言还有很多功能

00:24:27.350 --> 00:24:34.370
比2jc的语言，我们终于

00:24:31.000 --> 00:24:41.090
添加了专门的设置页面

00:24:34.370 --> 00:24:44.570
该语言，这全是拼写

00:24:41.090 --> 00:24:47.299
对我来说，但斯蒂芬（Stephane）有点过

00:24:44.570 --> 00:24:49.220
如果可以，请打开

00:24:47.299 --> 00:24:53.059
再说一遍，我对你们有个建议

00:24:49.220 --> 00:24:55.490
触发背景色

00:24:53.059 --> 00:24:57.980
咒语表达，所以如果你这样做

00:24:55.490 --> 00:25:00.860
你在打哈欠的一分钟内看到

00:24:57.980 --> 00:25:04.370
我叫这个咒语

00:25:00.860 --> 00:25:06.799
在您的代码中，我们将专门

00:25:04.370 --> 00:25:10.840
背景色的妙处

00:25:06.799 --> 00:25:13.190
就是IntelliJ IDEA 

00:25:10.840 --> 00:25:15.559
自动识别地点

00:25:13.190 --> 00:25:18.259
您可以实际使用表达式的地方

00:25:15.559 --> 00:25:22.009
因此，如果您碰巧尝试了一项新功能， 

00:25:18.259 --> 00:25:24.350
框架，您打开它

00:25:22.009 --> 00:25:25.639
您不知道的属性以及是否

00:25:24.350 --> 00:25:29.929
您开始打字，您将立即

00:25:25.639 --> 00:25:32.389
看到这是一个咒语表达， 

00:25:29.929 --> 00:25:33.930
两个你可以拥有什么样的功能

00:25:32.389 --> 00:25:35.640
使用它，所以它真的

00:25:33.930 --> 00:25:38.790
协助网络，即该ID 

00:25:35.640 --> 00:25:41.400
东西真的很棒，是的

00:25:38.790 --> 00:25:43.950
顺便说一句，这是斯特凡的一个不错的提示

00:25:41.400 --> 00:25:48.380
您可以使用语言注入

00:25:43.950 --> 00:25:52.920
 IntelliJ IDEA中的功能确保

00:25:48.380 --> 00:25:56.340
启用十亿美元

00:25:52.920 --> 00:25:58.950
以任何一种方式注入自定义语言

00:25:56.340 --> 00:26:03.270
支持的地方这些地方之一是

00:25:58.950 --> 00:26:05.940
字符串文字，例如，如果我添加

00:26:03.270 --> 00:26:10.080
我的元注释中的自定义属性

00:26:05.940 --> 00:26:13.710
应该启用拼写，我可以

00:26:10.080 --> 00:26:16.340
使用所有输入并使用注入

00:26:13.710 --> 00:26:19.140
语言参考功能

00:26:16.340 --> 00:26:21.780
 IntelliJ知道此属性是

00:26:19.140 --> 00:26:24.950
实际上是一种拼写语言表达， 

00:26:21.780 --> 00:26:28.110
您将收到所有这些咒语

00:26:24.950 --> 00:26:30.680
突出显示和自动完成

00:26:28.110 --> 00:26:34.410
在那些地方也是如此，这是一个很好的

00:26:30.680 --> 00:26:37.860
如果您在其中添加一些自定义内容

00:26:34.410 --> 00:26:43.440
注释或XML 

00:26:37.860 --> 00:26:50.250
太支持了

00:26:43.440 --> 00:26:54.360
 springier支持下一个主题spring core 

00:26:50.250 --> 00:26:57.540
所以Spring框架本身是一回事

00:26:54.360 --> 00:26:59.370
整体改善很多

00:26:57.540 --> 00:27:04.710
有多个时的性能

00:26:59.370 --> 00:27:06.930
项目同时开放

00:27:04.710 --> 00:27:13.130
突出表现只是

00:27:06.930 --> 00:27:16.950
现在好多了，让我们进入

00:27:13.130 --> 00:27:20.130
样本配置将展示

00:27:16.950 --> 00:27:25.130
我们最近编辑的新检查

00:27:20.130 --> 00:27:27.180
释放有关外部接线和

00:27:25.130 --> 00:27:30.450
您可以看到在此配置中

00:27:27.180 --> 00:27:33.150
上课让我们专注于这个自动

00:27:30.450 --> 00:27:35.040
有线领域这里有一个新的

00:27:33.150 --> 00:27:38.310
检查实际上突出了

00:27:35.040 --> 00:27:40.460
外线注解本身说明

00:27:38.310 --> 00:27:43.590
不建议现场注入

00:27:40.460 --> 00:27:45.389
斯蒂芬你能告诉我们更多有关

00:27:43.590 --> 00:27:49.979
这个请

00:27:45.389 --> 00:27:52.859
我当然可以这样，汽车讽刺领域

00:27:49.979 --> 00:27:55.049
就像我们不鼓励的事情

00:27:52.859 --> 00:27:58.889
在相当长的一段时间里，我们甚至有一个

00:27:55.049 --> 00:28:02.309
团队成员撰写博客文章的过程

00:27:58.889 --> 00:28:05.009
多年前关于它的原因

00:28:02.309 --> 00:28:07.889
不建议是因为有一个

00:28:05.009 --> 00:28:10.409
如果附加了生命周期问题

00:28:07.889 --> 00:28:12.029
实例，因为它是您期望的字段

00:28:10.409 --> 00:28:14.489
该字段可以在

00:28:12.029 --> 00:28:16.859
正确的构造函数，所以如果您使用Auto Y或

00:28:14.489 --> 00:28:19.829
这样的字段，您想访问

00:28:16.859 --> 00:28:22.950
在构造函数中，您将获得一个新的

00:28:19.829 --> 00:28:24.989
打印机异常的原因是

00:28:22.950 --> 00:28:27.179
能够使用设置字段

00:28:24.989 --> 00:28:29.190
反射我们实际上需要光束

00:28:27.179 --> 00:28:31.049
实例能够做到这一点

00:28:29.190 --> 00:28:33.109
我们要做的第一件事实际上是

00:28:31.049 --> 00:28:37.200
创建梁的实例并

00:28:33.109 --> 00:28:42.329
使用反射后立即设置

00:28:37.200 --> 00:28:45.029
字段本身的价值，所以它真的

00:28:42.329 --> 00:28:46.409
怪异的生命周期，真的不是

00:28:45.029 --> 00:28:50.909
您希望工作的东西

00:28:46.409 --> 00:28:53.009
这样，我们还添加了

00:28:50.909 --> 00:28:55.079
构造函数注入

00:28:53.009 --> 00:28:56.700
照片3中的画板，因此您可以使用

00:28:55.079 --> 00:28:58.950
配置中的构造函数注入

00:28:56.700 --> 00:29:02.759
现在上课，所以真的没有理由

00:28:58.950 --> 00:29:05.940
没有理由在下巴上使用下巴剔除

00:29:02.759 --> 00:29:07.709
我亲自测试中的生产代码

00:29:05.940 --> 00:29:09.959
使用静注很多，因为

00:29:07.709 --> 00:29:11.729
那里没有那里真的没有

00:29:09.959 --> 00:29:15.119
这个有一个构造函数的问题

00:29:11.729 --> 00:29:17.429
测试，所以这更容易

00:29:15.119 --> 00:29:22.200
在测试和IntelliJ中做到这一点

00:29:17.429 --> 00:29:23.940
也不会在测试中警告您，所以

00:29:22.200 --> 00:29:26.849
我们在这里收到来自IntelliJ的警告

00:29:23.940 --> 00:29:29.429
当然，您要做的第一步是

00:29:26.849 --> 00:29:31.229
您看到警告是按alt输入

00:29:29.429 --> 00:29:33.719
看看是否有快速解决方案和

00:29:31.229 --> 00:29:38.459
当然有一个是要改变的

00:29:33.719 --> 00:29:40.769
自动将现场连线到

00:29:38.459 --> 00:29:44.549
像Stephan一样的构造函数注入

00:29:40.769 --> 00:29:47.190
解释了，所以当我调用这个自动

00:29:44.549 --> 00:29:50.909
有线注释将移至

00:29:47.190 --> 00:29:53.219
构造函数，该字段将设置在

00:29:50.909 --> 00:29:55.259
构造函数和您可以做的一件事

00:29:53.219 --> 00:29:59.010
当您只有一个构造函数时

00:29:55.259 --> 00:30:01.440
您的配置类实际上也

00:29:59.010 --> 00:30:04.290
从中删除自动有线注释

00:30:01.440 --> 00:30:07.500
构造函数本身，所以您的代码

00:30:04.290 --> 00:30:10.010
看起来比注入的弹簧少

00:30:07.500 --> 00:30:10.010
之前

00:30:10.760 --> 00:30:19.980
好吧，关于自动接线的另一个话题是

00:30:13.860 --> 00:30:24.710
支持泛型，所以我们在这里

00:30:19.980 --> 00:30:26.940
另一种配置需要两个

00:30:24.710 --> 00:30:29.520
汽车构造中的参数

00:30:26.940 --> 00:30:32.040
重新连线自动连线注解

00:30:29.520 --> 00:30:35.420
在这里不再是强制性的，我们只

00:30:32.040 --> 00:30:40.050
有一个构造函数，所以我有这个

00:30:35.420 --> 00:30:44.250
接收类型的存储库接口

00:30:40.050 --> 00:30:46.920
参数，这里有两种类型

00:30:44.250 --> 00:30:49.470
员工一个部门，都

00:30:46.920 --> 00:30:52.680
在此定义为成员变量

00:30:49.470 --> 00:30:54.450
 Bean所提供的配置

00:30:52.680 --> 00:30:57.930
相同的配置类

00:30:54.450 --> 00:31:01.080
示范目的

00:30:57.930 --> 00:31:04.220
看到没有电线的工具

00:31:01.080 --> 00:31:07.430
这里的依赖切割器图标和

00:31:04.220 --> 00:31:10.770
 IntelliJ现在可以正确解析

00:31:07.430 --> 00:31:13.320
根据通用类型是

00:31:10.770 --> 00:31:16.470
标记为

00:31:13.320 --> 00:31:18.780
在这里存储，以便员工

00:31:16.470 --> 00:31:21.630
我可以使用浏览的存储库

00:31:18.780 --> 00:31:24.120
此图标将被正确解析

00:31:21.630 --> 00:31:26.850
当我从部门回来时

00:31:24.120 --> 00:31:28.830
仓库bean定义到地方

00:31:26.850 --> 00:31:32.700
用作自动悦悦的地方

00:31:28.830 --> 00:31:35.130
候选人不会告诉我好吗

00:31:32.700 --> 00:31:36.180
差不多是Khepera的需要，但另一个

00:31:35.130 --> 00:31:41.120
解决方法

00:31:36.180 --> 00:31:41.120
抱歉，那当然是示范

00:31:41.930 --> 00:31:51.480
好的，我们的事件监听器还有一个话题

00:31:46.010 --> 00:31:54.990
那些在

00:31:51.480 --> 00:31:57.450
以前的IntelliJ版本

00:31:54.990 --> 00:32:00.270
改进对自定义的支持

00:31:57.450 --> 00:32:02.730
事件侦听器的元注释，因此

00:32:00.270 --> 00:32:05.360
这是我的自定义事件监听器

00:32:02.730 --> 00:32:07.590
继承自T的注释

00:32:05.360 --> 00:32:12.660
原始的春季事件监听器

00:32:07.590 --> 00:32:17.700
注释，当我去

00:32:12.660 --> 00:32:19.920
我实际使用过的地方

00:32:17.700 --> 00:32:21.960
这里再次使用事件监听器符号

00:32:19.920 --> 00:32:25.560
有绝望的支持，我们可以看到这个

00:32:21.960 --> 00:32:28.380
非常好使用

00:32:25.560 --> 00:32:30.840
回望龙卡达，我们之前和时间

00:32:28.380 --> 00:32:33.840
我使用我的自定义事件监听器

00:32:30.840 --> 00:32:36.570
我重新定义D条件的注释

00:32:33.840 --> 00:32:39.210
属性可以是其他名称

00:32:36.570 --> 00:32:46.380
看到这些支持工作与

00:32:39.210 --> 00:32:49.680
在这些标准的弹簧注释中

00:32:46.380 --> 00:32:53.310
让我们快速回到主要

00:32:49.680 --> 00:32:56.370
配置我们显然有一些

00:32:53.310 --> 00:32:58.320
自动接线过程中的问题

00:32:56.370 --> 00:33:03.690
因为有多个豆子

00:32:58.320 --> 00:33:05.070
将匹配候选人，这是

00:33:03.690 --> 00:33:07.650
当然是故意为

00:33:05.070 --> 00:33:18.810
示范目的，所以当我尝试

00:33:07.650 --> 00:33:22.820
在春季运行此主要配置

00:33:18.810 --> 00:33:22.820
上下文当然不会启动

00:33:22.970 --> 00:33:30.360
因为有一个不满意的

00:33:25.050 --> 00:33:34.500
依赖在这里，好东西是

00:33:30.360 --> 00:33:37.290
现在在这些X中，我们将检测到

00:33:34.500 --> 00:33:39.690
一些特定的错误消息是

00:33:37.290 --> 00:33:41.880
由spring框架提供

00:33:39.690 --> 00:33:44.610
使用名称创建bean的示例错误

00:33:41.880 --> 00:33:47.490
一旦发现这些错误

00:33:44.610 --> 00:33:50.970
运行控制台中的消息，我们将通过

00:33:47.490 --> 00:33:53.190
他们，让你实际控制

00:33:50.970 --> 00:33:56.280
单击此处并转到相应的

00:33:53.190 --> 00:33:57.960
 bean，因为IntelliJ知道您的位置

00:33:56.280 --> 00:34:00.540
豆是什么以及它们如何命名

00:33:57.960 --> 00:34:03.600
这是当您的应用程序的好方法

00:34:00.540 --> 00:34:05.700
进行一些更改后无法启动

00:34:03.600 --> 00:34:08.220
赶快去一些地方

00:34:05.700 --> 00:34:09.780
显然很温暖，很可能

00:34:08.220 --> 00:34:11.430
 IntelliJ也将具有

00:34:09.780 --> 00:34:14.260
为您和您进行相应的检查

00:34:11.430 --> 00:34:17.230
帮助您修复它

00:34:14.260 --> 00:34:19.750
是的，我正要说允和我

00:34:17.230 --> 00:34:21.639
昨天准备了一个愉快的聊天

00:34:19.750 --> 00:34:23.470
网络研讨会，我们正在研究一些

00:34:21.639 --> 00:34:25.990
一些错误消息

00:34:23.470 --> 00:34:28.450
 Springwood中的Spring Framework是

00:34:25.990 --> 00:34:31.780
生产，我们已经发现在一起

00:34:28.450 --> 00:34:35.530
一些新的检查可能是

00:34:31.780 --> 00:34:37.750
已添加到IntelliJ IDE，所以也许您会

00:34:35.530 --> 00:34:41.679
找到自己，随时随地

00:34:37.750 --> 00:34:43.060
报告给您跟踪，可能是

00:34:41.679 --> 00:34:47.230
在将来的版本中添加

00:34:43.060 --> 00:34:50.919
智慧权是另一个常见错误

00:34:47.230 --> 00:34:53.320
是消息无法自动线束

00:34:50.919 --> 00:34:56.169
那也将通过

00:34:53.320 --> 00:35:00.850
与我们对错误的处理方式相同

00:34:56.169 --> 00:35:04.750
可以快速创建光束

00:35:00.850 --> 00:35:07.750
有点特殊或不是那么普遍

00:35:04.750 --> 00:35:15.300
已使用的主题，对的改进

00:35:07.750 --> 00:35:18.580
春季点工厂大火和斯蒂芬

00:35:15.300 --> 00:35:22.150
可以告诉我们更多关键弹簧

00:35:18.580 --> 00:35:25.720
使文件分解的原因是

00:35:22.150 --> 00:35:29.500
来自Spring Framework的通用SPI 

00:35:25.720 --> 00:35:31.330
允许您加载一个

00:35:29.500 --> 00:35:35.440
某些接口或某些负载

00:35:31.330 --> 00:35:37.510
组件很容易，所以我们使用

00:35:35.440 --> 00:35:40.690
内部例如春季

00:35:37.510 --> 00:35:43.450
允许您注册一个框架

00:35:40.690 --> 00:35:45.850
应用侦听器作为jar的一部分

00:35:43.450 --> 00:35:47.830
并确保该应用程序监听器

00:35:45.850 --> 00:35:49.630
甚至会被自动调用

00:35:47.830 --> 00:35:52.869
尽管您没有在

00:35:49.630 --> 00:35:54.550
基本上就是这样联系自己

00:35:52.869 --> 00:35:56.020
有一个应用程序监听器，您

00:35:54.550 --> 00:35:58.690
想要确保它将会是

00:35:56.020 --> 00:36:00.970
调用您在创建弹簧工厂

00:35:58.690 --> 00:36:03.369
某个地方，你注册你的

00:36:00.970 --> 00:36:06.910
在这种情况下我的实现

00:36:03.369 --> 00:36:09.760
该文件中的应用程序侦听器Spring 

00:36:06.910 --> 00:36:12.609
框架将扫描所有春季工厂

00:36:09.760 --> 00:36:16.330
文件从类路径，将

00:36:12.609 --> 00:36:17.800
自动注册组件

00:36:16.330 --> 00:36:19.390
春天的靴子是怎样的

00:36:17.800 --> 00:36:21.700
自动配置顺便说一句

00:36:19.390 --> 00:36:23.350
因此，如果您要创建自己的自动

00:36:21.700 --> 00:36:26.619
你需要告诉弹簧的配置

00:36:23.350 --> 00:36:27.610
引导以在启动时实际调用它

00:36:26.619 --> 00:36:30.520
有些豆子

00:36:27.610 --> 00:36:33.370
被创建以及您在其中进行的方式

00:36:30.520 --> 00:36:36.130
 Springwood要注册您的总数

00:36:33.370 --> 00:36:39.010
使用配置全限定名

00:36:36.130 --> 00:36:41.350
给定的键，在这种情况下，如果我们看

00:36:39.010 --> 00:36:43.600
在该图标旁边的

00:36:41.350 --> 00:36:46.480
类，然后单击它，我们实际上

00:36:43.600 --> 00:36:48.730
导航到弹簧工厂定义

00:36:46.480 --> 00:36:50.320
在该模块上，您可以找到

00:36:48.730 --> 00:36:52.060
关键，在这种情况下，这是夏天

00:36:50.320 --> 00:36:54.910
要注册的关键和春季框架

00:36:52.060 --> 00:36:57.310
听众，您将看到完整的

00:36:54.910 --> 00:36:59.290
该类的合格名称，因此yang可以

00:36:57.310 --> 00:37:03.550
也许不告诉我们更多关于

00:36:59.290 --> 00:37:06.160
是的，您当然可以控制点击

00:37:03.550 --> 00:37:09.970
这里再次回到实际

00:37:06.160 --> 00:37:12.520
使用课程的合格名称的课程

00:37:09.970 --> 00:37:15.340
我们在这里再次进行保理工作

00:37:12.520 --> 00:37:17.500
 IntelliJ也知道一些

00:37:15.340 --> 00:37:20.560
默认键，所以另一个

00:37:17.500 --> 00:37:23.470
春季可用的示例

00:37:20.560 --> 00:37:27.870
核心框架是应用程序

00:37:23.470 --> 00:37:30.250
上下文初始化器，这是另一个

00:37:27.870 --> 00:37:33.280
预定义键还有其他用于

00:37:30.250 --> 00:37:35.530
春天的好朋友斯蒂芬刚才提到

00:37:33.280 --> 00:37:39.160
他们将自动可用

00:37:35.530 --> 00:37:42.300
取决于弹簧的可用性

00:37:39.160 --> 00:37:45.730
您项目中的库

00:37:42.300 --> 00:37:57.010
这些弹簧工厂很好

00:37:45.730 --> 00:37:59.290
支持让我们跳入Spring MVC吧

00:37:57.010 --> 00:38:01.630
这里我们有一个非常基本的spring MVC 

00:37:59.290 --> 00:38:07.570
具有两个请求映射的控制器

00:38:01.630 --> 00:38:10.330
我们这里有一个叫做表演

00:38:07.570 --> 00:38:14.170
那就是我所说的老派

00:38:10.330 --> 00:38:17.800
因为它使用的是JSP页面

00:38:14.170 --> 00:38:20.320
查看，因此我可以像往常一样在这里

00:38:17.800 --> 00:38:23.290
现有，它允许您导航到

00:38:20.320 --> 00:38:26.370
相关视图或相关视图

00:38:23.290 --> 00:38:29.230
仅在请求映射中使用

00:38:26.370 --> 00:38:31.270
您也可以使用控制点击这里

00:38:29.230 --> 00:38:34.090
的构造函数中的视图名称

00:38:31.270 --> 00:38:38.590
模型和视图以导航到

00:38:34.090 --> 00:38:40.990
解决我们一直支持的JSP页面

00:38:38.590 --> 00:38:41.570
解决提供的属性

00:38:40.990 --> 00:38:45.290
内

00:38:41.570 --> 00:38:48.290
请求映射方法，以便我们可以

00:38:45.290 --> 00:38:49.990
实际上看到我们把这个属性

00:38:48.290 --> 00:38:54.830
进入模型并在此处查看地图

00:38:49.990 --> 00:38:56.930
在我们的JSP elo上下文中可用

00:38:54.830 --> 00:39:01.120
控制单击此处，转到实际

00:38:56.930 --> 00:39:05.450
该变量的定义

00:39:01.120 --> 00:39:09.110
这个黑色也可以在速度和

00:39:05.450 --> 00:39:10.880
免费标记，因此在第二个请求中

00:39:09.110 --> 00:39:15.410
映射是最新的

00:39:10.880 --> 00:39:19.250
我们再次使用免费标记，您可以控制

00:39:15.410 --> 00:39:21.860
单击此处或使用装订线图标进行操作

00:39:19.250 --> 00:39:24.140
导航到我的相关视图

00:39:21.860 --> 00:39:28.130
实际导航到的首选方式

00:39:24.140 --> 00:39:30.590
使用导航相关

00:39:28.130 --> 00:39:33.620
通用的符号快捷方式

00:39:30.590 --> 00:39:36.260
导航到任何内容的快捷方式

00:39:33.620 --> 00:39:40.160
与当前有关

00:39:36.260 --> 00:39:42.760
调用上下文，因此此快捷方式

00:39:40.160 --> 00:39:46.010
实际上在许多地方都可以使用

00:39:42.760 --> 00:39:49.550
也用于春豆

00:39:46.010 --> 00:39:51.530
快速向您展示相关的例子

00:39:49.550 --> 00:39:55.580
线豆切成

00:39:51.530 --> 00:39:58.820
候选人之类的东西，所以当我

00:39:55.580 --> 00:40:03.200
这样做实际上会向我提出建议

00:39:58.820 --> 00:40:05.060
您和现在的相应免费标记

00:40:03.200 --> 00:40:09.940
我们也支持解决这些问题

00:40:05.060 --> 00:40:14.240
自由标记和速度a中的属性

00:40:09.940 --> 00:40:17.780
看到更多关于这个的好技巧

00:40:14.240 --> 00:40:21.080
属性实际上是要使用show 

00:40:17.780 --> 00:40:25.060
快速定义快捷键ctrl shift E 

00:40:21.080 --> 00:40:27.470
这实际上向您展示了

00:40:25.060 --> 00:40:29.270
导航目标但没有离开

00:40:27.470 --> 00:40:32.420
当前的编辑器，因此您会弹出一个窗口

00:40:29.270 --> 00:40:38.810
它显示出与您将看到的相同的图像

00:40:32.420 --> 00:40:41.060
导航到额外的代码spring和

00:40:38.810 --> 00:40:43.610
 C的抗议收到了许多

00:40:41.060 --> 00:40:50.600
修复广告模型属性

00:40:43.610 --> 00:40:54.920
处理抱歉，不是一个好小东西

00:40:50.600 --> 00:40:58.220
我们在这里添加的触摸是当您拉动时

00:40:54.920 --> 00:41:00.890
这里的方法属性是有限的茶

00:40:58.220 --> 00:41:06.620
请求映射到某些HTTP 

00:41:00.890 --> 00:41:11.120
方法总是显示在

00:41:06.620 --> 00:41:13.010
春天的MVC到Lenore，所以当我列出

00:41:11.120 --> 00:41:17.660
在这里请求映射，您可以清楚地看到

00:41:13.010 --> 00:41:22.340
请参阅此处的获取请求映射

00:41:17.660 --> 00:41:26.210
括号，它们也很快

00:41:22.340 --> 00:41:29.480
停靠，这也显示在

00:41:26.210 --> 00:41:33.290
转到符号导航对话框，所以当我

00:41:29.480 --> 00:41:38.780
使用命令alt shift m4转到符号

00:41:33.290 --> 00:41:41.420
当我输入正斜杠时，我可以

00:41:38.780 --> 00:41:45.200
查看所有注册请求映射

00:41:41.420 --> 00:41:48.020
在我的项目中，现在我们请求方法

00:41:45.200 --> 00:41:50.150
也将在此导航中显示

00:41:48.020 --> 00:41:52.520
弹出，因此如果您有多个请求

00:41:50.150 --> 00:41:54.680
映射是相同的路径，但使用

00:41:52.520 --> 00:41:58.990
不同的HTTP方法

00:41:54.680 --> 00:41:58.990
以这种形式更容易区分它们

00:41:59.710 --> 00:42:07.580
这就是Spring MVC的相关内容， 

00:42:03.580 --> 00:42:10.190
实际上我们已经完成了展示

00:42:07.580 --> 00:42:14.810
所有新的东西或我们更新的东西

00:42:10.190 --> 00:42:18.350
在16.2中自然编辑20 

00:42:14.810 --> 00:42:22.220
我们跳入问答环节

00:42:18.350 --> 00:42:25.670
您2016年计划的简短更新

00:42:22.220 --> 00:42:30.650
 3号门，稍后将释放

00:42:25.670 --> 00:42:33.530
今年秋天，让我们再次开始

00:42:30.650 --> 00:42:37.370
弹簧靴弹簧靴

00:42:33.530 --> 00:42:40.670
支持有了新的扩展支持

00:42:37.370 --> 00:42:43.580
如Stefan在

00:42:40.670 --> 00:42:46.760
开始，所以我们将支持所有

00:42:43.580 --> 00:42:50.270
新的Spring Boot测试注释

00:42:46.760 --> 00:42:53.150
所以你一直在解决

00:42:50.270 --> 00:42:57.130
就像在平原上一样

00:42:53.150 --> 00:42:59.990
 Spring核心上下文配置设置

00:42:57.130 --> 00:43:02.870
下一个也是最大的话题是

00:42:59.990 --> 00:43:07.070
使弹簧和C支撑

00:43:02.870 --> 00:43:08.150
适用于春季启动应用程序

00:43:07.070 --> 00:43:11.180
你能行

00:43:08.150 --> 00:43:13.599
享有同等水平的支持

00:43:11.180 --> 00:43:16.130
导航到请求映射的示例

00:43:13.599 --> 00:43:18.680
解决我们的模型属性

00:43:16.130 --> 00:43:24.380
刚看到春天的食物

00:43:18.680 --> 00:43:27.109
您可能听说过的应用程序

00:43:24.380 --> 00:43:31.339
 Kotlin JVM编程语言

00:43:27.109 --> 00:43:33.829
这是很新的，它刚刚发布

00:43:31.339 --> 00:43:36.710
今年的最后一个不是全部发布

00:43:33.829 --> 00:43:40.579
而且在

00:43:36.710 --> 00:43:43.220
社区，实际上正在带来

00:43:40.579 --> 00:43:45.589
两个人似乎都喜欢它，所以当

00:43:43.220 --> 00:43:48.970
你去春天开始，我可以

00:43:45.589 --> 00:43:53.329
实际上创建一个四边形弹簧靴

00:43:48.970 --> 00:43:56.020
模板应用程序，我们自然

00:43:53.329 --> 00:44:00.200
想要扩展现有的支持

00:43:56.020 --> 00:44:02.839
所有注解所有突出显示

00:44:00.200 --> 00:44:06.170
事物和所有完成功能

00:44:02.839 --> 00:44:10.130
我们已经拥有Java与任何

00:44:06.170 --> 00:44:11.089
那些在Kotlin框架内的人

00:44:10.130 --> 00:44:14.809
马上

00:44:11.089 --> 00:44:16.760
使用咳嗽代码支持弹簧

00:44:14.809 --> 00:44:19.880
与Indy棉插件捆绑在一起

00:44:16.760 --> 00:44:23.210
本身有一些缺点，但

00:44:19.880 --> 00:44:25.460
现在这是唯一的解决方案，所以我们

00:44:23.210 --> 00:44:28.339
正在实际计划扩展

00:44:25.460 --> 00:44:31.430
我们对Java步骤的现有支持

00:44:28.339 --> 00:44:34.569
逐步使其与语言无关

00:44:31.430 --> 00:44:37.670
所有检查导航功能

00:44:34.569 --> 00:44:39.819
实际上将与切割代码一起使用

00:44:37.670 --> 00:44:39.819
好

00:44:39.900 --> 00:44:47.079
另一个大话题是支持更好

00:44:43.719 --> 00:44:49.690
正确导航测试上下文

00:44:47.079 --> 00:44:52.829
现在这些ping到window和teespring 

00:44:49.690 --> 00:44:57.219
方面和Bean的所有导航

00:44:52.829 --> 00:45:00.699
只包括您的生产环境

00:44:57.219 --> 00:45:04.059
在春季进行所有测试

00:45:00.699 --> 00:45:07.150
使用给定隐式上下文

00:45:04.059 --> 00:45:10.119
在您的测试课程中的注释

00:45:07.150 --> 00:45:12.369
可以导航到配置文件，但是您

00:45:10.119 --> 00:45:15.579
实际上看不到生成的豆

00:45:12.369 --> 00:45:18.130
为了您的测试，这真的是

00:45:15.579 --> 00:45:22.299
我们要添加的缺失功能

00:45:18.130 --> 00:45:25.569
下周是最后但并非最不重要的

00:45:22.299 --> 00:45:27.670
我们已经做了一些相当

00:45:25.569 --> 00:45:32.709
令人印象深刻的性能改进

00:45:27.670 --> 00:45:35.680
弹簧支撑意味着任何时候

00:45:32.709 --> 00:45:37.959
您在任何编辑器中输入内容

00:45:35.680 --> 00:45:41.739
具有更少的缓存和验证

00:45:37.959 --> 00:45:44.259
我们的春天模型，我们建立自己

00:45:41.739 --> 00:45:47.529
真正了解您的项目是什么

00:45:44.259 --> 00:45:50.979
这样做，您将有望享受很多

00:45:47.529 --> 00:45:54.069
不仅改善了总体性能

00:45:50.979 --> 00:45:56.739
突出显示，但总的来说

00:45:54.069 --> 00:46:00.969
在接下来的整个想法会更快

00:45:56.739 --> 00:46:02.859
发行版和2016年的抢先体验

00:46:00.969 --> 00:46:05.349
树实际上应该在以后开始

00:46:02.859 --> 00:46:08.170
一个月，你们都非常

00:46:05.349 --> 00:46:12.039
邀请尝试一下，请让

00:46:08.170 --> 00:46:14.890
我们知道是否有反馈和赞成票

00:46:12.039 --> 00:46:17.739
命令存在的问题或请

00:46:14.890 --> 00:46:20.289
对于新问题，我们很高兴听到

00:46:17.739 --> 00:46:25.809
从您那里得知您的问题

00:46:20.289 --> 00:46:28.289
希望是的，现在就这样

00:46:25.809 --> 00:46:28.289
进行问答

00:46:30.490 --> 00:46:36.780
感谢CNN斯蒂芬非常坚定

00:46:33.250 --> 00:46:41.440
已经让我们看看

00:46:36.780 --> 00:46:46.150
我们实际上没有很多问题

00:46:41.440 --> 00:46:50.830
是托马斯问的一个问题

00:46:46.150 --> 00:46:53.980
运行配置中的选项类似于

00:46:50.830 --> 00:46:57.280
一帧停用，我们有

00:46:53.980 --> 00:46:59.260
例如十个Tomcat的问题

00:46:57.280 --> 00:47:00.970
是我们是否要将其添加到

00:46:59.260 --> 00:47:03.960
以及Springwood发射器

00:47:00.970 --> 00:47:07.480
荣格，你有什么话要告诉莫莉

00:47:03.960 --> 00:47:09.700
是的，我回答这个问题，所以是

00:47:07.480 --> 00:47:12.520
那绝对是失踪者之一

00:47:09.700 --> 00:47:14.940
春天蓝图的功能

00:47:12.520 --> 00:47:17.530
与之比较时的配置

00:47:14.940 --> 00:47:20.200
一次使用普通行李箱

00:47:17.530 --> 00:47:25.690
配置到位

00:47:20.200 --> 00:47:29.730
我们将添加的资源更新

00:47:25.690 --> 00:47:33.369
这我们也计划改善

00:47:29.730 --> 00:47:35.890
有点隐藏，但仍在工作

00:47:33.369 --> 00:47:39.839
用于Spring Boot开发工具

00:47:35.890 --> 00:47:43.750
不仅可以重新加载

00:47:39.839 --> 00:47:46.839
资源或查看文件，即允许

00:47:43.750 --> 00:47:50.950
您可以随时随地替换代码

00:47:46.839 --> 00:47:52.510
我们仍在讨论大多数方法

00:47:50.950 --> 00:47:55.619
正确地做到这一点，但有

00:47:52.510 --> 00:47:55.619
绝对打算佛教

00:47:56.900 --> 00:48:04.900
年轻的事情看起来我们没有

00:48:01.670 --> 00:48:09.109
目前有更多问题

00:48:04.900 --> 00:48:11.690
如果-如果-如果你们中有些人仍然

00:48:09.109 --> 00:48:15.019
可以随时提问

00:48:11.690 --> 00:48:18.559
 Twitter或在评论中分享

00:48:15.019 --> 00:48:21.829
高大的博客文章，我们将在其中发布

00:48:18.559 --> 00:48:24.980
他们的设备，所以我认为就是这样

00:48:21.829 --> 00:48:27.079
感谢Jana和Stefan的出色表现

00:48:24.980 --> 00:48:29.890
演讲，谢谢大家

00:48:27.079 --> 00:48:29.890
看着我们

