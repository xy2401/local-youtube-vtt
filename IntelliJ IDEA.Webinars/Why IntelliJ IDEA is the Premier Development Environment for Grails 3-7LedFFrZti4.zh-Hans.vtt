WEBVTT
Kind: captions
Language: zh-Hans

00:00:03.330 --> 00:00:08.950
你好杰夫，谢谢你加入我们

00:00:05.560 --> 00:00:10.150
今天非常感谢你，很好

00:00:08.950 --> 00:00:11.500
早上好下午好晚上

00:00:10.150 --> 00:00:16.240
取决于你在哪里

00:00:11.500 --> 00:00:18.940
我的名字叫杰夫·布朗，正如安德烈所说

00:00:16.240 --> 00:00:21.460
我是Grails的联合创始人之一

00:00:18.940 --> 00:00:23.890
框架和Grails实践

00:00:21.460 --> 00:00:26.800
在达蒙的OSI法案中领导

00:00:23.890 --> 00:00:28.689
国会表示OCI是

00:00:26.800 --> 00:00:32.100
 Grails框架的管家和

00:00:28.689 --> 00:00:34.390
我已经有一段时间了

00:00:32.100 --> 00:00:36.730
参与了女孩项目， 

00:00:34.390 --> 00:00:39.039
我几乎一开始就有

00:00:36.730 --> 00:00:40.930
感到有些墨菲，我与人合着

00:00:39.039 --> 00:00:44.020
几个明确的指南

00:00:40.930 --> 00:00:46.090
 Grails的书你可以看到一个Twitter 

00:00:44.020 --> 00:00:47.800
处理一个电子邮件地址，以便您

00:00:46.090 --> 00:00:51.460
知道如何得到我的控制

00:00:47.800 --> 00:00:52.930
您需要我在圣保罗这里居住的任何物品

00:00:51.460 --> 00:00:55.570
路易斯·密苏里州在美国

00:00:52.930 --> 00:00:59.170
我们当然有

00:00:55.570 --> 00:01:02.829
 Gateway Arch这不是我的

00:00:59.170 --> 00:01:05.950
家人，这只是他们的照片

00:01:02.829 --> 00:01:08.230
在圣路易斯，我们拥有伟大的

00:01:05.950 --> 00:01:10.660
关于圣事路易斯是我们有

00:01:08.230 --> 00:01:13.270
圣路易斯·红雀队在这里和

00:01:10.660 --> 00:01:16.380
你们大多数人都知道的红衣主教

00:01:13.270 --> 00:01:19.140
是最成功的项目之一

00:01:16.380 --> 00:01:21.220
历史上的职业棒球队

00:01:19.140 --> 00:01:24.070
所以我鼓励你，如果你来

00:01:21.220 --> 00:01:26.320
圣路易斯打了我们，我们可以带您

00:01:24.070 --> 00:01:27.670
参加一场球赛，喝点晚餐

00:01:26.320 --> 00:01:29.200
有很多很棒的东西要看

00:01:27.670 --> 00:01:32.920
圣路易斯，但如果您愿意，请与我们联系

00:01:29.200 --> 00:01:35.050
将会在这里的时间在该地区

00:01:32.920 --> 00:01:36.940
在OC眼镜，我们是分布式的

00:01:35.050 --> 00:01:38.740
公司分布在世界各地

00:01:36.940 --> 00:01:40.960
但是我们的总部在圣路易

00:01:38.740 --> 00:01:42.730
自90年代中期以来，我们一直存在

00:01:40.960 --> 00:01:46.450
整个都是开源公司

00:01:42.730 --> 00:01:48.460
那时我们有140多名工程师

00:01:46.450 --> 00:01:50.830
在这里的团队中，许多人都有

00:01:48.460 --> 00:01:52.300
他们所在领域的高级学位，我们

00:01:50.830 --> 00:01:54.060
用一个覆盖整个地面

00:01:52.300 --> 00:01:56.350
软件工程实践与

00:01:54.060 --> 00:01:58.090
工业物联网实践

00:01:56.350 --> 00:02:00.640
我们围绕开放做了很多工作

00:01:58.090 --> 00:02:03.610
来源和培训已占很大比重

00:02:00.640 --> 00:02:05.470
自从

00:02:03.610 --> 00:02:07.930
开始，当然我们提供了很多

00:02:05.470 --> 00:02:09.610
关于groovy和grails的培训，以及

00:02:07.930 --> 00:02:12.569
 Gradle和所有技术

00:02:09.610 --> 00:02:14.349
在整个常规生态系统中

00:02:12.569 --> 00:02:16.240
一定要联系我们

00:02:14.349 --> 00:02:20.260
我们能做些什么来帮助您

00:02:16.240 --> 00:02:22.090
丹尼斯回来如此特别相关

00:02:20.260 --> 00:02:26.260
烤，所以哦，她一直是

00:02:22.090 --> 00:02:27.820
自2015年以来一直保持领先地位，我们一直在努力

00:02:26.260 --> 00:02:31.300
我们所拥有的技术取得成功

00:02:27.820 --> 00:02:34.390
大量投资并发展团队

00:02:31.300 --> 00:02:36.730
帮助加快开发工作

00:02:34.390 --> 00:02:38.110
所以在头几年和

00:02:36.730 --> 00:02:40.810
最近几年我们一直在发布

00:02:38.110 --> 00:02:43.450
每年大约30个发布

00:02:40.810 --> 00:02:45.610
很少有辩论，我们只能

00:02:43.450 --> 00:02:48.090
通过发展团队和

00:02:45.610 --> 00:02:50.530
就像我在技术上所说的那样进行投资

00:02:48.090 --> 00:02:52.180
我们真的在扩展技术

00:02:50.530 --> 00:02:54.220
触及范围

00:02:52.180 --> 00:02:55.390
我们正在扩展的形式与某人交谈

00:02:54.220 --> 00:02:58.030
许多不同的数据库和

00:02:55.390 --> 00:02:59.890
引入新的个人资料或进行互动

00:02:58.030 --> 00:03:03.820
还有很多其他技术，例如

00:02:59.890 --> 00:03:05.110
反应和有角度，我们只是

00:03:03.820 --> 00:03:06.790
最重要的是，我们

00:03:05.110 --> 00:03:08.260
在技​​术上投入大量资金， 

00:03:06.790 --> 00:03:11.800
像我们一样快地前进

00:03:08.260 --> 00:03:14.440
可以，而且实践正在

00:03:11.800 --> 00:03:18.040
取得了巨大的成功，我只希望

00:03:14.440 --> 00:03:19.420
将来与您一样

00:03:18.040 --> 00:03:22.210
说有什么可以联系我们

00:03:19.420 --> 00:03:24.280
我们竭尽所能帮助您，我们

00:03:22.210 --> 00:03:28.210
很想和你说话，所以我想

00:03:24.280 --> 00:03:31.320
正确了解技术细节是

00:03:28.210 --> 00:03:34.600
演讲的重点是

00:03:31.320 --> 00:03:36.490
高层次的议程我​​想要什么

00:03:34.600 --> 00:03:39.580
封面，所以我们有介绍

00:03:36.490 --> 00:03:41.470
就像我说的盲文

00:03:39.580 --> 00:03:44.440
系统是OCI的所在地，并且已经

00:03:41.470 --> 00:03:47.590
现在已经有一段时间了，我们

00:03:44.440 --> 00:03:50.410
取得了巨大的成功，但我想

00:03:47.590 --> 00:03:53.020
今天说的就是我想说的

00:03:50.410 --> 00:03:55.990
 IntelliJ IDEA之间的关系

00:03:53.020 --> 00:03:57.850
在Grails 3中，我将讨论一些

00:03:55.990 --> 00:04:01.240
关于我们如何去的一点历史

00:03:57.850 --> 00:04:03.880
我们今天在哪里，真的是我

00:04:01.240 --> 00:04:06.340
想进入是一些差异

00:04:03.880 --> 00:04:08.940
在Grails 2和rails 3之间

00:04:06.340 --> 00:04:12.370
特别是与

00:04:08.940 --> 00:04:14.440
 IDE中的生产率或种类

00:04:12.370 --> 00:04:17.109
 IDE可以提供的功能以及

00:04:14.440 --> 00:04:18.970
所以这里有一些细节

00:04:17.109 --> 00:04:21.130
重大变化或重大变化

00:04:18.970 --> 00:04:22.390
我们从铁轨到铁轨3 

00:04:21.130 --> 00:04:25.870
有一些细节， 

00:04:22.390 --> 00:04:28.570
特别与IDE功能有关

00:04:25.870 --> 00:04:30.050
周围有些混乱

00:04:28.570 --> 00:04:32.690
在社区中，我想要什么

00:04:30.050 --> 00:04:34.849
要做的就是压入一些

00:04:32.690 --> 00:04:36.530
具有智能的功能

00:04:34.849 --> 00:04:38.180
特别涉及建筑烤架

00:04:36.530 --> 00:04:41.990
三个应用程序演示了一些

00:04:38.180 --> 00:04:43.759
并澄清一些

00:04:41.990 --> 00:04:46.340
对关系的误解

00:04:43.759 --> 00:04:48.500
在这两个部分之间

00:04:46.340 --> 00:04:50.690
随着社区的增加

00:04:48.500 --> 00:04:51.560
智力是最终的补充，所以

00:04:50.690 --> 00:04:53.690
我要谈一点

00:04:51.560 --> 00:04:55.039
那就是那个特定区域

00:04:53.690 --> 00:04:58.340
那里有些混乱

00:04:55.039 --> 00:05:00.860
关于这两个之间的关系的社区

00:04:58.340 --> 00:05:03.620
做rails 3开发，所以有

00:05:00.860 --> 00:05:05.270
一些演示，我将演示一些

00:05:03.620 --> 00:05:07.280
技巧和窍门以及我使用的东西

00:05:05.270 --> 00:05:11.509
我每天在做开发时

00:05:07.280 --> 00:05:14.840
冰，我想你会发现

00:05:11.509 --> 00:05:16.219
有趣和乐于助人，然后结束

00:05:14.840 --> 00:05:19.879
我们将有时间

00:05:16.219 --> 00:05:23.960
问答，我将尽我所能

00:05:19.879 --> 00:05:28.069
可以在下面钻，所以演习3有

00:05:23.960 --> 00:05:28.639
已经存在超过2 

00:05:28.069 --> 00:05:29.659
年份

00:05:28.639 --> 00:05:32.389
我们大约要两个半

00:05:29.659 --> 00:05:36.199
自Rails 3发布以来已经有很多年了， 

00:05:32.389 --> 00:05:37.909
格栅3是主要版本，主要是

00:05:36.199 --> 00:05:40.180
向前迈进框架或

00:05:37.909 --> 00:05:43.250
框架的重大变化

00:05:40.180 --> 00:05:45.259
其中之一与构建有关

00:05:43.250 --> 00:05:47.180
系统，就是这样

00:05:45.259 --> 00:05:48.529
与IDE中的功能有关，并且

00:05:47.180 --> 00:05:52.159
我将示范其中的一些

00:05:48.529 --> 00:05:54.710
但在烤架2中，我们参加了格雷的婚礼

00:05:52.159 --> 00:05:56.840
 Grails-我们有自己的构建系统， 

00:05:54.710 --> 00:05:59.300
它建立在一项技术之上

00:05:56.840 --> 00:06:01.460
叫做甘斯

00:05:59.300 --> 00:06:04.550
有趣的groovy库

00:06:01.460 --> 00:06:05.979
与蚂蚁互动很容易

00:06:04.550 --> 00:06:10.009
工具的一些支持

00:06:05.979 --> 00:06:12.319
支持库和API的So Gans 

00:06:10.009 --> 00:06:14.719
是我们建造的技术

00:06:12.319 --> 00:06:20.330
之上的系统增长一和二

00:06:14.719 --> 00:06:22.430
而构建系统原为

00:06:20.330 --> 00:06:24.020
灵活，我们提供了扩展点，因此

00:06:22.430 --> 00:06:25.909
插件可以参与构建

00:06:24.020 --> 00:06:30.819
系统应用程序可以做出贡献

00:06:25.909 --> 00:06:33.919
东西到构建过程中，所以我们有一个

00:06:30.819 --> 00:06:36.139
可以灵活地扩展

00:06:33.919 --> 00:06:39.469
建立女孩1和2的系统，但是我们

00:06:36.139 --> 00:06:40.610
没有一个完全强大的

00:06:39.469 --> 00:06:43.009
完成

00:06:40.610 --> 00:06:43.880
我们没有列出的灵活构建系统

00:06:43.009 --> 00:06:45.200
去扫罗

00:06:43.880 --> 00:06:46.820
这个问题，或者我们专注于

00:06:45.200 --> 00:06:49.270
建立网络框架，我们建立了

00:06:46.820 --> 00:06:52.640
足够的构建工具来支持

00:06:49.270 --> 00:06:54.440
 Gradle的家伙做的超级好

00:06:52.640 --> 00:06:57.020
建造这个真的很棒

00:06:54.440 --> 00:06:59.180
真正强大的可扩展全功能

00:06:57.020 --> 00:07:00.800
建立功能更强大的系统

00:06:59.180 --> 00:07:03.080
比我们构建的构建系统

00:07:00.800 --> 00:07:05.840
对于想要如此的铁轨之一

00:07:03.080 --> 00:07:09.410
我们对女孩3所做的改变是

00:07:05.840 --> 00:07:12.230
从中删除了整个构建系统

00:07:09.410 --> 00:07:14.150
 Grails-并替换为Gradle 

00:07:12.230 --> 00:07:16.190
集成，并提供一个整体

00:07:14.150 --> 00:07:18.440
一堆的好处，我们有这个

00:07:16.190 --> 00:07:20.360
真正强大且可扩展的构建

00:07:18.440 --> 00:07:23.320
系统现在具有更多功能

00:07:20.360 --> 00:07:28.280
比我们的轻量级构建系统

00:07:23.320 --> 00:07:29.930
另一个事实是，每个

00:07:28.280 --> 00:07:32.210
 Grails 3应用程序内置

00:07:29.930 --> 00:07:35.510
 Gradle让我们消除了整体

00:07:32.210 --> 00:07:37.700
一堆与构建有关的东西

00:07:35.510 --> 00:07:39.830
时间插件，例如在Rails 2中

00:07:37.700 --> 00:07:42.860
有一些技术插件

00:07:39.830 --> 00:07:45.440
 cobertura和代码标记，这些是

00:07:42.860 --> 00:07:47.240
两者都建立时间技术，所以代码

00:07:45.440 --> 00:07:49.280
标记是一种将静态

00:07:47.240 --> 00:07:52.400
分析您的源代码和报告

00:07:49.280 --> 00:07:54.740
可疑的事情或你的事情

00:07:52.400 --> 00:07:56.210
可能会考虑违反您的方式

00:07:54.740 --> 00:07:57.820
希望将您的代码放在一起，但是

00:07:56.210 --> 00:08:01.520
在构建时进行所有操作， 

00:07:57.820 --> 00:08:03.110
 cobertura是一项用于

00:08:01.520 --> 00:08:05.180
跟踪代码覆盖率，以便您可以运行

00:08:03.110 --> 00:08:07.070
您的测试，然后下士

00:08:05.180 --> 00:08:08.600
报告会告诉您

00:08:07.070 --> 00:08:10.490
您的系统被测试覆盖

00:08:08.600 --> 00:08:13.340
工作，所以我们有那些插件

00:08:10.490 --> 00:08:15.830
浏览到Rails插件中

00:08:13.340 --> 00:08:17.750
这些东西，我们没有R是3 

00:08:15.830 --> 00:08:19.700
这些技术的插件，因为

00:08:17.750 --> 00:08:22.490
我们不需要它们，因为我们替换了

00:08:19.700 --> 00:08:24.530
我们用Gradle构建系统，而不是

00:08:22.490 --> 00:08:26.870
需要那些的自定义Grails插件

00:08:24.530 --> 00:08:29.810
建立可以使用的时间技术

00:08:26.870 --> 00:08:32.660
摇篮插件小提琴国只是

00:08:29.810 --> 00:08:34.430
拓宽了景观的种类

00:08:32.660 --> 00:08:36.260
所有插件的可能性

00:08:34.430 --> 00:08:39.110
存在于您可以使用的Gradle中

00:08:36.260 --> 00:08:40.969
那些轨道3d，所以那只是一个

00:08:39.110 --> 00:08:43.669
我们从中得到的好处清单

00:08:40.969 --> 00:08:45.290
移动摇篮另一个与

00:08:43.669 --> 00:08:47.120
 IP集成，我要

00:08:45.290 --> 00:08:48.680
仅在少数几个例子中展示一些

00:08:47.120 --> 00:08:51.050
分钟，所以我要进入一个IDE 

00:08:48.680 --> 00:08:55.610
并展示一些可能

00:08:51.050 --> 00:08:57.570
并不明显，但是为了使用IDE 

00:08:55.610 --> 00:09:00.600
有能力去

00:08:57.570 --> 00:09:03.269
与盲文街有效合作

00:09:00.600 --> 00:09:07.019
项目IDE不一定

00:09:03.269 --> 00:09:09.600
如果需要，需要明确的rails 3支持

00:09:07.019 --> 00:09:12.630
 IE的确很棒

00:09:09.600 --> 00:09:14.550
支持哪个IntelliJ IDEA可以做到这一点

00:09:12.630 --> 00:09:16.199
涵盖了很多领域， 

00:09:14.550 --> 00:09:18.329
使您达到可以成为自己的地步

00:09:16.199 --> 00:09:20.009
生产建设和发展

00:09:18.329 --> 00:09:23.699
调试支持Rails 3应用程序

00:09:20.009 --> 00:09:25.170
在项目中，所以大之一

00:09:23.699 --> 00:09:26.970
其中之一之间的差异

00:09:25.170 --> 00:09:28.620
智力之间的差异

00:09:26.970 --> 00:09:31.110
社区版和终极版

00:09:28.620 --> 00:09:33.329
版是Grails的三大支持和

00:09:31.110 --> 00:09:36.480
 Grails的三个支持仅存在于

00:09:33.329 --> 00:09:38.100
最终版特别

00:09:36.480 --> 00:09:40.970
它不在社区版中， 

00:09:38.100 --> 00:09:43.649
这造成了一些混乱的人

00:09:40.970 --> 00:09:46.199
通常会报告您无法执行

00:09:43.649 --> 00:09:49.050
 IntelliJ IDEA中的杂货店开发

00:09:46.199 --> 00:09:51.269
社区版，那不是

00:09:49.050 --> 00:09:53.069
如果你可以的话，我会

00:09:51.269 --> 00:09:55.050
展示其中的一些，Gradle是一个

00:09:53.069 --> 00:09:56.370
很大一部分，所以我会回到

00:09:55.050 --> 00:10:00.120
那一瞬间，当我们进入

00:09:56.370 --> 00:10:03.149
 IDE，但事实证明这是一个真正的

00:10:00.120 --> 00:10:05.880
对我们的用户而言，大不了的另一件事

00:10:03.149 --> 00:10:09.839
行之间的变化很大

00:10:05.880 --> 00:10:12.810
 2和rails 3是我们在Grails 3中

00:10:09.839 --> 00:10:15.720
拥抱了很多基于树的解决方案

00:10:12.810 --> 00:10:17.069
在运行时要做的事情

00:10:15.720 --> 00:10:18.779
时间，我会讲一点

00:10:17.069 --> 00:10:20.990
一点，我们将打开将看到一些

00:10:18.779 --> 00:10:24.089
一点点地显示在IDE中

00:10:20.990 --> 00:10:27.510
所以如果Grails开发人员很熟悉

00:10:24.089 --> 00:10:30.269
该框架添加了一个

00:10:27.510 --> 00:10:32.069
上课的全部能力

00:10:30.269 --> 00:10:33.690
你这样写，例如

00:10:32.069 --> 00:10:36.180
当您提供Grails应用程序时

00:10:33.690 --> 00:10:37.860
域类，所以在主类中是

00:10:36.180 --> 00:10:40.500
代表你的东西的类

00:10:37.860 --> 00:10:42.120
将要保留在数据库中，所以在

00:10:40.500 --> 00:10:46.019
当您提供Grails应用程序时

00:10:42.120 --> 00:10:47.189
域类通常就是你

00:10:46.019 --> 00:10:49.500
你要做的就是写课

00:10:47.189 --> 00:10:51.149
并在中声明持久属性

00:10:49.500 --> 00:10:52.769
上课，所以如果你在写一个人

00:10:51.149 --> 00:10:54.389
这个人可能有一个人

00:10:52.769 --> 00:10:56.459
姓氏或年龄

00:10:54.389 --> 00:10:58.319
是抄写一个人，并且可能

00:10:56.459 --> 00:11:00.120
是您在

00:10:58.319 --> 00:11:02.699
人员类的源代码，但是

00:11:00.120 --> 00:11:05.040
然后在运行时编译铜

00:11:02.699 --> 00:11:07.079
一堆功能已添加到

00:11:05.040 --> 00:11:09.029
例如，该类有一个方法

00:11:07.079 --> 00:11:10.680
称为假货，您可以创建一个

00:11:09.029 --> 00:11:11.420
域类的实例

00:11:10.680 --> 00:11:13.940
既保存

00:11:11.420 --> 00:11:15.620
方法，它将持久化对象

00:11:13.940 --> 00:11:17.510
到数据库，因此您不必

00:11:15.620 --> 00:11:19.040
写保存方法那安全的方法

00:11:17.510 --> 00:11:21.230
被添加到您的域类中

00:11:19.040 --> 00:11:23.240
框架和保存方法只是

00:11:21.230 --> 00:11:24.770
许多很多之一

00:11:23.240 --> 00:11:26.390
我们添加到主方法中的方法

00:11:24.770 --> 00:11:28.370
类和您所有其他的Grails 

00:11:26.390 --> 00:11:29.180
控制器和标签生命之类的工件

00:11:28.370 --> 00:11:31.910
和服务

00:11:29.180 --> 00:11:34.340
保存只是早期的暖桌

00:11:31.910 --> 00:11:36.680
烤架的版本，所以说Grails温暖

00:11:34.340 --> 00:11:39.530
所有这些东西都是被操纵的

00:11:36.680 --> 00:11:40.730
在运行时使用可扩展元类

00:11:39.530 --> 00:11:43.250
元编程

00:11:40.730 --> 00:11:45.770
所以Berube具有使其成为现实的能力

00:11:43.250 --> 00:11:47.960
很容易将行为添加到

00:11:45.770 --> 00:11:50.630
程序运行时运行时添加

00:11:47.960 --> 00:11:52.640
类和Grails的方法做了很多

00:11:50.630 --> 00:11:54.410
随着应用程序的发展

00:11:52.640 --> 00:11:57.140
正在启动，我们将迭代

00:11:54.410 --> 00:11:59.300
所有您的Binet类，动态地

00:11:57.140 --> 00:12:00.710
将保存方法添加到他们和所有

00:11:59.300 --> 00:12:03.050
其他需要添加的方法

00:12:00.710 --> 00:12:06.230
游戏类别，那就是

00:12:03.050 --> 00:12:08.360
强大的功能集

00:12:06.230 --> 00:12:10.340
 Ruby支持的事实

00:12:08.360 --> 00:12:12.380
女孩甚至不可能

00:12:10.340 --> 00:12:14.810
否则我们就没有意义了

00:12:12.380 --> 00:12:17.050
有那些获得选票，但那

00:12:14.810 --> 00:12:19.760
灵活性也有些昂贵

00:12:17.050 --> 00:12:21.920
使用像这样的运行时元编程

00:12:19.760 --> 00:12:24.590
在性能方面是广泛的

00:12:21.920 --> 00:12:26.960
在内存方面也很昂贵

00:12:24.590 --> 00:12:29.390
消耗总是元方法占用

00:12:26.960 --> 00:12:32.270
空间，甚至有成本

00:12:29.390 --> 00:12:34.190
与女孩相关联-我们

00:12:32.270 --> 00:12:36.230
开始远离该运行时

00:12:34.190 --> 00:12:38.390
元编程并过渡到

00:12:36.230 --> 00:12:40.700
我们能够编译的元程序

00:12:38.390 --> 00:12:43.310
将这些东西添加到您的班级

00:12:40.700 --> 00:12:46.580
编译时间，为了做到这一点

00:12:43.310 --> 00:12:48.680
框架必须建立自己的内部

00:12:46.580 --> 00:12:50.150
作为一种应用

00:12:48.680 --> 00:12:52.040
开发人员，您从来没有很好的互动

00:12:50.150 --> 00:12:54.730
但这是

00:12:52.040 --> 00:12:57.710
框架，这是我们自己的

00:12:54.730 --> 00:12:59.300
像系统一样的手工特质

00:12:57.710 --> 00:13:02.300
可以在编译时向类添加行为

00:12:59.300 --> 00:13:04.970
在Brill的3中，我们要做的是

00:13:02.300 --> 00:13:06.980
消除了几乎所有这些并搬走了

00:13:04.970 --> 00:13:09.170
特质的基本解决方案

00:13:06.980 --> 00:13:11.480
 groovy的最新版本有支持

00:13:09.170 --> 00:13:16.430
贸易和特质就像一个阶级

00:13:11.480 --> 00:13:18.260
但是与类不同的是，Ruby和Java是

00:13:16.430 --> 00:13:20.270
两种单一继承语言都对

00:13:18.260 --> 00:13:22.940
所以当您在groovy中编写类时

00:13:20.270 --> 00:13:24.560
你只有一个家长班

00:13:22.940 --> 00:13:24.930
不可能没有多重

00:13:24.560 --> 00:13:26.790
在这里

00:13:24.930 --> 00:13:29.189
所以你不能从多个扩展

00:13:26.790 --> 00:13:31.740
类，但您可以实现多个

00:13:29.189 --> 00:13:33.930
一棵树很像一堂课

00:13:31.740 --> 00:13:36.449
您编写的跟踪具有方法和

00:13:33.930 --> 00:13:38.999
字段和属性，然后是那棵树

00:13:36.449 --> 00:13:40.769
一个班级可以实现这一特质

00:13:38.999 --> 00:13:43.230
该行为成为该类的一部分

00:13:40.769 --> 00:13:45.119
除此之外，该类还可以

00:13:43.230 --> 00:13:46.889
实现任何数量的特征

00:13:45.119 --> 00:13:48.269
有点像多重继承

00:13:46.889 --> 00:13:50.970
你可以从很多方面得到行为

00:13:48.269 --> 00:13:52.860
不同的特征添加到您的班级

00:13:50.970 --> 00:13:56.309
女孩三个拥抱的方式是

00:13:52.860 --> 00:13:58.740
当您再次提供域类时

00:13:56.309 --> 00:14:00.869
例如，您不必表达

00:13:58.740 --> 00:14:03.660
主类实现任何特征

00:14:00.869 --> 00:14:06.149
该框架为您做到了

00:14:03.660 --> 00:14:07.829
与IDE相关的原因是因为所有

00:14:06.149 --> 00:14:10.110
该行为被添加到您的

00:14:07.829 --> 00:14:12.360
类在编译时以以下形式

00:14:10.110 --> 00:14:12.959
的特质得到了您的大力支持

00:14:12.360 --> 00:14:15.809
 OEE 

00:14:12.959 --> 00:14:17.339
用于自动完成和逐步操作

00:14:15.809 --> 00:14:19.769
调试您可以直接进入

00:14:17.339 --> 00:14:22.439
源代码中甚至没有的方法

00:14:19.769 --> 00:14:24.839
代码，例如在控制器中

00:14:22.439 --> 00:14:26.519
您可以调用该响应方法

00:14:24.839 --> 00:14:28.529
在调试模式下，您可以进入

00:14:26.519 --> 00:14:30.300
响应方法，然后将

00:14:28.529 --> 00:14:32.399
进入是特质，你可以

00:14:30.300 --> 00:14:34.410
调试发生了什么，仅此而已

00:14:32.399 --> 00:14:37.949
比处理起来容易得多

00:14:34.410 --> 00:14:40.410
试图调试并了解我

00:14:37.949 --> 00:14:42.240
在运行时正在运行

00:14:40.410 --> 00:14:44.579
元编程得分线应该

00:14:42.240 --> 00:14:48.600
再次编译该汉堡的时间

00:14:44.579 --> 00:14:51.870
与思想所能提供的支持有关

00:14:48.600 --> 00:14:54.029
提供做Grails 3开发

00:14:51.870 --> 00:14:56.759
这是对

00:14:54.029 --> 00:15:00.300
我们能用rails rails做些什么

00:14:56.759 --> 00:15:02.550
 1和2所以有些想法

00:15:00.300 --> 00:15:05.540
在较高的水平上，我

00:15:02.550 --> 00:15:08.220
要做的就是跳到IDE中

00:15:05.540 --> 00:15:10.290
展示了几个

00:15:08.220 --> 00:15:13.100
我要去做的事情是

00:15:10.290 --> 00:15:15.749
从社区版开始

00:15:13.100 --> 00:15:18.389
 IntelliJ在这里，所以我们正在与

00:15:15.749 --> 00:15:22.139
没有的智能版

00:15:18.389 --> 00:15:23.790
有Grails 3支持，我是什么

00:15:22.139 --> 00:15:28.439
我要做的是打开一个

00:15:23.790 --> 00:15:30.480
项目Grails 3项目，因此

00:15:28.439 --> 00:15:32.970
我在那里做的过程

00:15:30.480 --> 00:15:35.309
可能不同于烤架1 

00:15:32.970 --> 00:15:37.470
和2个开发人员已经习惯了

00:15:35.309 --> 00:15:38.700
不想从创建新项目

00:15:37.470 --> 00:15:40.500
基督教的资料

00:15:38.700 --> 00:15:42.380
我不想导入项目

00:15:40.500 --> 00:15:45.300
想做的就是打开项目， 

00:15:42.380 --> 00:15:47.100
选择作为父目录

00:15:45.300 --> 00:15:49.890
目录的顶级目录

00:15:47.100 --> 00:15:52.430
您的rails 3项目，您应该看到

00:15:49.890 --> 00:15:54.510
这样的对话框，这就是IDE 

00:15:52.430 --> 00:15:57.150
认识到这是一个摇篮

00:15:54.510 --> 00:15:59.490
项目，这将使

00:15:57.150 --> 00:16:01.920
整个功能

00:15:59.490 --> 00:16:04.080
将能够利用这样的优势

00:16:01.920 --> 00:16:06.360
此对话框的重要部分就在这里

00:16:04.080 --> 00:16:08.280
是表示使用

00:16:06.360 --> 00:16:10.530
您要制作的默认Gradle包装器

00:16:08.280 --> 00:16:12.600
确保这是配置，如果

00:16:10.530 --> 00:16:14.280
您无需配置

00:16:12.600 --> 00:16:15.870
一个摇篮屋，这里有个地方

00:16:14.280 --> 00:16:18.360
在这里您可以配置一个好的家

00:16:15.870 --> 00:16:21.210
我的情况是你不这样做

00:16:18.360 --> 00:16:23.400
更好的主意是让您使用Gradle 

00:16:21.210 --> 00:16:25.050
项目中的包装

00:16:23.400 --> 00:16:27.210
 Grayling包装器，因为它是

00:16:25.050 --> 00:16:29.400
项目正在使用Gradle版本

00:16:27.210 --> 00:16:31.710
已知可以使用该版本

00:16:29.400 --> 00:16:33.990
和这个版本的

00:16:31.710 --> 00:16:36.120
应用程序，当您切换回去时

00:16:33.990 --> 00:16:37.920
在Grails项目之间来回

00:16:36.120 --> 00:16:39.540
不想切换到

00:16:37.920 --> 00:16:41.280
如果您是不同版本的Gradle 

00:16:39.540 --> 00:16:43.140
使用包装的一部分

00:16:41.280 --> 00:16:44.550
 Grails项目以及其他任何项目

00:16:43.140 --> 00:16:46.740
你正在使用它的

00:16:44.550 --> 00:16:49.400
包装器，这将有一个反转

00:16:46.740 --> 00:16:51.810
那适合那个项目，所以

00:16:49.400 --> 00:16:53.790
像这样说这个单选按钮

00:16:51.810 --> 00:16:56.220
使用默认的Gradle包装器是

00:16:53.790 --> 00:16:58.530
重要的一步和聪明的人

00:16:56.220 --> 00:17:03.560
仅仅因为那

00:16:58.530 --> 00:17:06.120
合理的默认值，因此IDE 

00:17:03.560 --> 00:17:07.650
都参加过Grails项目， 

00:17:06.120 --> 00:17:09.780
记住我们在社区版中

00:17:07.650 --> 00:17:11.640
社区的智慧

00:17:09.780 --> 00:17:15.500
版本没有杂货店支持

00:17:11.640 --> 00:17:18.329
但我们将能够

00:17:15.500 --> 00:17:20.550
大量的开发工作

00:17:18.329 --> 00:17:23.100
没有社区版

00:17:20.550 --> 00:17:24.750
杂货店支持，所以此目录

00:17:23.100 --> 00:17:27.120
这里的结构应该看起来很熟悉

00:17:24.750 --> 00:17:29.250
您有Grails的几个开发人员- 

00:17:27.120 --> 00:17:32.190
应用程序及其下的目录

00:17:29.250 --> 00:17:34.710
像控制器和编织物，如果我们有

00:17:32.190 --> 00:17:36.150
服务到我们拥有的服务目录

00:17:34.710 --> 00:17:38.160
您将包含的域类

00:17:36.150 --> 00:17:39.900
目录，但请注意那些

00:17:38.160 --> 00:17:41.760
目录在这里不存在

00:17:39.900 --> 00:17:43.740
与我想要的东西有关

00:17:41.760 --> 00:17:46.800
指出有时候

00:17:43.740 --> 00:17:50.250
混淆报价，以便该项目

00:17:46.800 --> 00:17:52.270
我刚打开的是git这是礼物

00:17:50.250 --> 00:17:53.950
储存库和

00:17:52.270 --> 00:17:57.100
关于获得的东西之一

00:17:53.950 --> 00:17:59.169
是gif不支持存储为空

00:17:57.100 --> 00:18:01.270
目录，所以当您创建一个

00:17:59.169 --> 00:18:03.850
全新的Grails应用程序通常

00:18:01.270 --> 00:18:05.980
域目录将在那

00:18:03.850 --> 00:18:07.299
在SAP中，服务目录在

00:18:05.980 --> 00:18:09.580
标签网页目录

00:18:07.299 --> 00:18:13.510
目录将在那里，所以如果您打开

00:18:09.580 --> 00:18:15.460
 IDE piee中的项目合谋

00:18:13.510 --> 00:18:18.340
与Gradle找出您的

00:18:15.460 --> 00:18:20.049
源目录是和域

00:18:18.340 --> 00:18:21.520
和服务文件夹将被配置

00:18:20.049 --> 00:18:24.309
作为源字符串，就像

00:18:21.520 --> 00:18:25.929
控制器文件夹，如果你知道

00:18:24.309 --> 00:18:28.299
你可以告诉玩家，但是

00:18:25.929 --> 00:18:29.649
右边的文件夹是蓝色的

00:18:28.299 --> 00:18:31.690
反对其他一些

00:18:29.649 --> 00:18:33.730
灰色和蓝色的事实

00:18:31.690 --> 00:18:37.210
表示这是一个源目录

00:18:33.730 --> 00:18:39.130
并且IDE能够弄清楚

00:18:37.210 --> 00:18:41.200
这是一个源目录，因为它

00:18:39.130 --> 00:18:42.610
伸出手向Gradle询问

00:18:41.200 --> 00:18:45.279
嘿，这的所有来源在哪里

00:18:42.610 --> 00:18:47.529
项目，我们已经建立了集成

00:18:45.279 --> 00:18:50.559
进入Grails和Gradle 

00:18:47.529 --> 00:18:52.450
当您问Gradle时，共谋

00:18:50.559 --> 00:18:54.100
什么是Gradle的源目录

00:18:52.450 --> 00:18:58.720
请注意，此控制器文件夹是一个

00:18:54.100 --> 00:19:02.169
源目录，如果我要的话

00:18:58.720 --> 00:19:03.520
将启动Grails控制台

00:19:02.169 --> 00:19:07.059
稍后，我将打开

00:19:03.520 --> 00:19:09.159
终端，我就像真正的W 

00:19:07.059 --> 00:19:11.799
是格栅包装而不是Gradle 

00:19:09.159 --> 00:19:12.909
包装，但导轨包装和什么

00:19:11.799 --> 00:19:14.890
要做的是启动一个

00:19:12.909 --> 00:19:17.740
我可以在此处输入的交互式提示

00:19:14.890 --> 00:19:19.779
所以如果我以为创造了-我和GOM 

00:19:17.740 --> 00:19:22.299
按标签，我们将在此处获得自动完成

00:19:19.779 --> 00:19:24.340
或创建主类，然后

00:19:22.299 --> 00:19:26.679
指定捐赠类的名称

00:19:24.340 --> 00:19:30.610
我想创造的主要

00:19:26.679 --> 00:19:32.919
类刚刚创建，所以请注意

00:19:30.610 --> 00:19:35.830
域文件夹在这里刚刚创建

00:19:32.919 --> 00:19:37.630
它是灰色的，不是源文件夹

00:19:35.830 --> 00:19:38.710
所以如果我开始编辑文件

00:19:37.630 --> 00:19:41.860
该目录，我将要一些

00:19:38.710 --> 00:19:44.919
问题，如果我尝试导航到

00:19:41.860 --> 00:19:46.750
 IDE中的类，IDE不是

00:19:44.919 --> 00:19:48.820
会知道那个痛处或那个

00:19:46.750 --> 00:19:52.299
该目录中的文件表示

00:19:48.820 --> 00:19:54.549
类，所以我需要获得底线

00:19:52.299 --> 00:19:57.220
该域文件夹配置为

00:19:54.549 --> 00:19:59.110
源文件夹，一种方法是

00:19:57.220 --> 00:20:02.289
如果我右键单击该文件夹，然后

00:19:59.110 --> 00:20:04.870
选择将目录标记为源根目录

00:20:02.289 --> 00:20:06.140
那会做到的，这是一种方法

00:20:04.870 --> 00:20:08.360
告诉IDE 

00:20:06.140 --> 00:20:10.580
该文件夹是源文件夹，而您

00:20:08.360 --> 00:20:12.740
必须这样做才能使项e2 

00:20:10.580 --> 00:20:15.140
能够在该类中进行编译

00:20:12.740 --> 00:20:16.910
在文件夹中，但另一种方式

00:20:15.140 --> 00:20:19.040
关于这一点，请注意，该弹出窗口

00:20:16.910 --> 00:20:21.860
来到这里，说摇篮

00:20:19.040 --> 00:20:24.590
如果单击，则需要导入项目

00:20:21.860 --> 00:20:26.630
导入更改将发生的是

00:20:24.590 --> 00:20:27.920
 IDE将会重新评估

00:20:26.630 --> 00:20:29.600
环境，它会回到

00:20:27.920 --> 00:20:31.700
摇摇晃晃，说嘿，现在是什么

00:20:29.600 --> 00:20:34.400
源目录，此时

00:20:31.700 --> 00:20:38.420
由于此域文件夹存在，它将

00:20:34.400 --> 00:20:39.980
被配置为早期的源

00:20:38.420 --> 00:20:41.960
只是为了澄清当我提到

00:20:39.980 --> 00:20:44.390
 gif不支持跟踪为空

00:20:41.960 --> 00:20:46.190
我提到的文件夹，因为

00:20:44.390 --> 00:20:48.020
我正在正确执行的方案

00:20:46.190 --> 00:20:49.180
现在，Rails应用程序或

00:20:48.020 --> 00:20:51.350
有人将创建项目

00:20:49.180 --> 00:20:53.690
立即将其放入get中，然后

00:20:51.350 --> 00:20:55.700
别人检查出来，有

00:20:53.690 --> 00:20:57.500
没有域文件夹没有服务文件夹

00:20:55.700 --> 00:20:59.750
第一次创建名称类

00:20:57.500 --> 00:21:02.180
您必须处理的服务或标签

00:20:59.750 --> 00:21:05.480
这个问题，所以我可以点击导入

00:21:02.180 --> 00:21:07.970
更改，这将导致IDE 

00:21:05.480 --> 00:21:09.290
重新评估环境，其中之一

00:21:07.970 --> 00:21:11.210
的影响将是领域

00:21:09.290 --> 00:21:15.350
文件夹将被配置为源

00:21:11.210 --> 00:21:17.690
文件夹中，通常我会自动导入

00:21:15.350 --> 00:21:20.150
启用，因此，如果您单击该启用自动

00:21:17.690 --> 00:21:22.040
导入将随时发生

00:21:20.150 --> 00:21:24.820
 Grails构建更改，IDE将进行更改

00:21:22.040 --> 00:21:27.710
意识到这一点，并会自动

00:21:24.820 --> 00:21:31.310
为您重新导入东西，以便您可以或

00:21:27.710 --> 00:21:34.130
可能不希望打开它，但是

00:21:31.310 --> 00:21:36.740
获取该文件夹的第三种方法

00:21:34.130 --> 00:21:39.620
配置为源文件夹是

00:21:36.740 --> 00:21:41.720
打开Grails工具视图并选择

00:21:39.620 --> 00:21:45.110
您的顶级项目，然后单击

00:21:41.720 --> 00:21:46.880
小圆圈压抑着同样的东西

00:21:45.110 --> 00:21:49.400
事情会发生的，所以我现在点击

00:21:46.880 --> 00:21:51.200
那和ID现在伸手

00:21:49.400 --> 00:21:52.760
摇篮说嘿是什么

00:21:51.200 --> 00:21:54.200
事物的当前状态需要是什么

00:21:52.760 --> 00:21:55.130
配置为源文件夹，我

00:21:54.200 --> 00:21:57.190
期待一堆东西正在发生

00:21:55.130 --> 00:22:00.200
其他事情也在发生

00:21:57.190 --> 00:22:03.230
一旦一次，这里重建

00:22:00.200 --> 00:22:08.360
立即完成此域文件夹

00:22:03.230 --> 00:22:12.230
变成蓝色并开始营业，因此请注意

00:22:08.360 --> 00:22:13.940
这些神器持有者喜欢

00:22:12.230 --> 00:22:15.740
域和服务可能

00:22:13.940 --> 00:22:17.600
项目最初时不存在

00:22:15.740 --> 00:22:19.610
必须配置在IDE中导入的内容

00:22:17.600 --> 00:22:20.120
作为源文件夹，这是一个超级

00:22:19.610 --> 00:22:22.190
简单

00:22:20.120 --> 00:22:24.530
其实我几乎从来没有做过

00:22:22.190 --> 00:22:27.020
必须考虑一下，因为我有我的

00:22:24.530 --> 00:22:29.740
真正的发展，我有那个汽车

00:22:27.020 --> 00:22:32.630
导入启用，这一切都发生了

00:22:29.740 --> 00:22:36.710
同一件事相同的另一个地方

00:22:32.630 --> 00:22:38.600
出现这样的事情是因为我们

00:22:36.710 --> 00:22:40.790
使用Gradle作为我们的构建工具

00:22:38.600 --> 00:22:43.100
盲文3表达方式

00:22:40.790 --> 00:22:44.480
盲文3项目中的依赖项是

00:22:43.100 --> 00:22:46.760
用相同的方式表达

00:22:44.480 --> 00:22:49.070
任何Gradle项目的发展趋势，以及

00:22:46.760 --> 00:22:52.040
建了一个摇篮，有这个

00:22:49.070 --> 00:22:54.110
依赖块，这是标准的

00:22:52.040 --> 00:22:56.630
 Gradle和mavin的语法

00:22:54.110 --> 00:22:58.970
表达依赖性，如果您要

00:22:56.630 --> 00:23:00.910
在此处添加依赖项或更改

00:22:58.970 --> 00:23:04.130
依赖IDE 

00:23:00.910 --> 00:23:05.990
还不知道，所以如果你

00:23:04.130 --> 00:23:07.910
在库上添加依赖项，然后

00:23:05.990 --> 00:23:10.340
开始编辑源代码并尝试

00:23:07.910 --> 00:23:12.200
使用该库中的类构建

00:23:10.340 --> 00:23:14.630
如果您从

00:23:12.200 --> 00:23:17.720
 Gradle，但IDE会令人困惑，并且

00:23:14.630 --> 00:23:20.660
不会知道那些新图书馆

00:23:17.720 --> 00:23:23.120
除非您启用了自动导入功能，否则

00:23:20.660 --> 00:23:25.730
将依赖项添加到此版本后

00:23:23.120 --> 00:23:27.380
那Gradle文件出来这里做

00:23:25.730 --> 00:23:30.700
与之前提到的相同

00:23:27.380 --> 00:23:34.400
直到我告诉IDE刷新

00:23:30.700 --> 00:23:35.690
通过单击来刷新自身

00:23:34.400 --> 00:23:38.510
顶级项目，然后单击刷新

00:23:35.690 --> 00:23:41.390
然后告诉IDE重新评估

00:23:38.510 --> 00:23:43.550
所以现在新的依赖关系

00:23:41.390 --> 00:23:45.440
您在此处添加的内容将添加到

00:23:43.550 --> 00:23:47.090
想法中项目的课堂路径

00:23:45.440 --> 00:23:48.950
角度，然后您可以开始

00:23:47.090 --> 00:23:50.930
引用类

00:23:48.950 --> 00:23:53.090
图书馆表达对这里的依赖

00:23:50.930 --> 00:23:56.210
所以要注意，当您在做滑轨时

00:23:53.090 --> 00:23:59.480
随时随地在任何IDE中进行3开发

00:23:56.210 --> 00:24:01.940
更改依赖项或引入新的

00:23:59.480 --> 00:24:04.580
源文件夹（例如域文件夹） 

00:24:01.940 --> 00:24:06.530
 IDE需要另辟another径

00:24:04.580 --> 00:24:08.750
运行设置班级人员和

00:24:06.530 --> 00:24:10.550
源图和所有不同的

00:24:08.750 --> 00:24:13.730
我刚刚描述的技术有

00:24:10.550 --> 00:24:17.840
你可以去做的所有方式

00:24:13.730 --> 00:24:19.310
现在我要说的是

00:24:17.840 --> 00:24:20.630
我想开始那个理事会的备份

00:24:19.310 --> 00:24:22.850
不应该停止我想做的是

00:24:20.630 --> 00:24:25.070
产生脚手架或这个人

00:24:22.850 --> 00:24:28.870
我刚刚创建的课程，所以我们说

00:24:25.070 --> 00:24:30.200
人有名字和姓氏

00:24:28.870 --> 00:24:33.480
 [掌声] 

00:24:30.200 --> 00:24:36.330
就像那样，我想产生

00:24:33.480 --> 00:24:38.539
为此一些脚手架，所以当

00:24:36.330 --> 00:24:41.640
如果我键入，Grails委员会就在这里

00:24:38.539 --> 00:24:44.760
生成并再次获得制表符完成

00:24:41.640 --> 00:24:46.529
在这里，我可以点击完成生成

00:24:44.760 --> 00:24:49.019
全部，然后如果我开始输入名称

00:24:46.529 --> 00:24:52.200
域类，然后按Tab 

00:24:49.019 --> 00:24:53.730
在那里自动完成

00:24:52.200 --> 00:24:56.100
那里知道我所有的领域

00:24:53.730 --> 00:24:58.169
上课知道什么是合理的

00:24:56.100 --> 00:25:00.960
作为参数传递以生成所有

00:24:58.169 --> 00:25:04.309
所以我按了，现在默认

00:25:00.960 --> 00:25:07.710
为此生成了脚手架

00:25:04.309 --> 00:25:11.039
对于人类，我们去看看

00:25:07.710 --> 00:25:12.510
我们的人控人并注意

00:25:11.039 --> 00:25:14.610
我们不必做任何事情

00:25:12.510 --> 00:25:16.529
特殊的控制器的文件夹

00:25:14.610 --> 00:25:19.740
将其设置为源路径，因为

00:25:16.529 --> 00:25:21.389
控制器的文件夹在

00:25:19.740 --> 00:25:22.769
该项目最初是导入的

00:25:21.389 --> 00:25:24.809
因为那是我们碰巧放的地方

00:25:22.769 --> 00:25:26.490
 URL餐巾纸文件，因此域

00:25:24.809 --> 00:25:28.169
最初时文件夹不存在

00:25:26.490 --> 00:25:29.850
导入了我们必须处理的项目

00:25:28.169 --> 00:25:31.710
与它作为源文件夹

00:25:29.850 --> 00:25:36.210
当我们

00:25:31.710 --> 00:25:41.070
导入项目的适配器，以便在

00:25:36.210 --> 00:25:42.419
我可以给我添加ID的断点

00:25:41.070 --> 00:25:45.299
调试器大部分将用于

00:25:42.419 --> 00:25:50.639
就像在这里一样工作Java开发人员

00:25:45.299 --> 00:25:54.149
习惯了

00:25:50.639 --> 00:25:56.190
在Grails 3中改变的东西

00:25:54.149 --> 00:25:58.470
与调试和运行有关

00:25:56.190 --> 00:26:00.710
一般情况下，IDE中的应用程序

00:25:58.470 --> 00:26:02.909
重大的改变是

00:26:00.710 --> 00:26:05.070
记住，在Grails一和二中

00:26:02.909 --> 00:26:08.820
有我们自己的构建系统，以便

00:26:05.070 --> 00:26:10.740
构建系统或运行运行应用程序或

00:26:08.820 --> 00:26:12.779
调试应用程序或在以下位置执行任何操作

00:26:10.740 --> 00:26:15.419
 IE必须具备的所有应用程序

00:26:12.779 --> 00:26:19.019
做两件事之一

00:26:15.419 --> 00:26:21.510
完善流程并有效输入

00:26:19.019 --> 00:26:23.250
掠取空间，然后执行一些命令

00:26:21.510 --> 00:26:25.950
 IDE可以在命令行正确显示

00:26:23.250 --> 00:26:28.169
掏出类似的进程或ID 

00:26:25.950 --> 00:26:31.649
他可以打电话给我们的建筑

00:26:28.169 --> 00:26:33.659
系统通过API，但是

00:26:31.649 --> 00:26:34.470
 IDE必须特别知道

00:26:33.659 --> 00:26:36.049
关于Grails 

00:26:34.470 --> 00:26:39.389
为了做任何一件事情

00:26:36.049 --> 00:26:41.460
这不是Rails 3的情况

00:26:39.389 --> 00:26:42.450
再次记得我们在终极

00:26:41.460 --> 00:26:44.309
版

00:26:42.450 --> 00:26:46.169
对不起，穿着社区版

00:26:44.309 --> 00:26:48.659
没有的智能

00:26:46.169 --> 00:26:50.970
总共有三家杂货店支持

00:26:48.659 --> 00:26:54.359
增加了运行Grails的功能

00:26:50.970 --> 00:26:58.230
由标准公共机构申请

00:26:54.359 --> 00:27:00.029
 void main方法，因此每个Java IDE都知道

00:26:58.230 --> 00:27:02.429
如何运行一个有主

00:27:00.029 --> 00:27:04.440
方法，所以如果我只是右击

00:27:02.429 --> 00:27:08.580
这个编辑器，我要运行

00:27:04.440 --> 00:27:10.230
应用程序和尽可能的想法

00:27:08.580 --> 00:27:12.029
担心发生的一切是

00:27:10.230 --> 00:27:14.759
只是调用这个主要方法而已

00:27:12.029 --> 00:27:15.840
启动Tomcat或执行任何操作

00:27:14.759 --> 00:27:17.399
格里尔斯

00:27:15.840 --> 00:27:19.350
正确的是执行此操作

00:27:17.399 --> 00:27:21.149
就像其他标准一样

00:27:19.350 --> 00:27:24.179
 Java程序中的标准main方法

00:27:21.149 --> 00:27:26.519
这样做的效果是正确的

00:27:24.179 --> 00:27:28.320
现在Tomcat已启动

00:27:26.519 --> 00:27:32.609
正在构建和部署应用程序

00:27:28.320 --> 00:27:34.109
到Tomcat，所有这些都发生了

00:27:32.609 --> 00:27:37.019
通过运行此类中的main方法

00:27:34.109 --> 00:27:39.179
这使得它更容易

00:27:37.019 --> 00:27:42.600
从中运行应用程序

00:27:39.179 --> 00:27:45.389
 IDE，所以我们可以再次获得该应用程序

00:27:42.600 --> 00:27:47.789
在没有任何IDE支持的情况下运行

00:27:45.389 --> 00:27:49.889
我，或者至少有我烤

00:27:47.789 --> 00:27:51.259
具体的支持，所以我已经停止了该应用程序

00:27:49.889 --> 00:27:54.210
那里

00:27:51.259 --> 00:27:57.480
所以当我运行应用程序时

00:27:54.210 --> 00:27:59.850
此应用程序运行配置为

00:27:57.480 --> 00:28:01.950
是在John IntelliJ中创建的

00:27:59.850 --> 00:28:03.690
开发人员将成为或用户将成为

00:28:01.950 --> 00:28:05.279
熟悉这是两种

00:28:03.690 --> 00:28:07.289
标准的东西什么都没有

00:28:05.279 --> 00:28:09.600
关于这个，这是一个指定的类

00:28:07.289 --> 00:28:11.789
它有一个主要方法和IDE 

00:28:09.600 --> 00:28:14.429
知道该怎么做，一旦

00:28:11.789 --> 00:28:16.139
创建运行配置的一种方法是

00:28:14.429 --> 00:28:17.609
从这一点运行应用程序是我可以

00:28:16.139 --> 00:28:20.179
点击绿色箭头以运行

00:28:17.609 --> 00:28:23.789
应用程序，或者我可以单击绿色的bug 

00:28:20.179 --> 00:28:26.399
以调试模式运行该应用程序

00:28:23.789 --> 00:28:29.369
这就是我刚刚做的，我们已经

00:28:26.399 --> 00:28:33.090
此人控制器中的断点

00:28:29.369 --> 00:28:35.489
因此调试代理已开始查看

00:28:33.090 --> 00:28:37.409
在控制台中表示为

00:28:35.489 --> 00:28:39.419
一旦Tomcats启动并运行，我就可以

00:28:37.409 --> 00:28:43.399
向应用发送请求

00:28:39.419 --> 00:28:46.019
我们将能够达到这个断点， 

00:28:43.399 --> 00:28:50.879
像您一样调试应用程序

00:28:46.019 --> 00:28:52.109
可以在IntelliJ中使用任何JVM应用程序吗

00:28:50.879 --> 00:28:53.639
我们正在与默认

00:28:52.109 --> 00:28:56.100
脚手架我刚打到这个断点

00:28:53.639 --> 00:28:57.480
和做

00:28:56.100 --> 00:29:00.600
您期望的相同的东西

00:28:57.480 --> 00:29:02.400
能够在这里进行一步调试器

00:29:00.600 --> 00:29:04.590
我可以询问这个控制器

00:29:02.400 --> 00:29:06.570
查看所有的属性

00:29:04.590 --> 00:29:09.330
控制器，即使这些都不是

00:29:06.570 --> 00:29:11.340
属性有相应的来源

00:29:09.330 --> 00:29:13.020
代码条目这就是所有的东西

00:29:11.340 --> 00:29:16.680
被添加到您的控制器

00:29:13.020 --> 00:29:18.300
框架，即使IDE不支持

00:29:16.680 --> 00:29:21.060
这里对Grails一无所知

00:29:18.300 --> 00:29:23.240
它能够检查和发现所有

00:29:21.060 --> 00:29:26.580
此类中的这些属性

00:29:23.240 --> 00:29:29.060
因为所有这些属性

00:29:26.580 --> 00:29:32.310
在编译时添加到字节码

00:29:29.060 --> 00:29:34.740
再见Grails，这是非常不同的

00:29:32.310 --> 00:29:36.480
比您在Grylls中看到的要多

00:29:34.740 --> 00:29:38.850
一处正在添加所有内容的地方

00:29:36.480 --> 00:29:41.550
在运行时动态地

00:29:38.850 --> 00:29:43.800
能够检查这些问题

00:29:41.550 --> 00:29:47.550
因为ID甚至不知道如何

00:29:43.800 --> 00:29:49.170
发现它们存在，所以您得到了

00:29:47.550 --> 00:29:50.700
真的非常支持跑步

00:29:49.170 --> 00:29:52.500
应用程序调试

00:29:50.700 --> 00:29:54.510
应用程序，您可以运行单元测试

00:29:52.500 --> 00:29:56.670
您可以做大部分事情，因为

00:29:54.510 --> 00:29:58.800
您覆盖了很多领域

00:29:56.670 --> 00:30:01.650
社区增​​加了智能

00:29:58.800 --> 00:30:03.450
没有任何特定的增长工具

00:30:01.650 --> 00:30:05.850
有些事情你不会得到的

00:30:03.450 --> 00:30:07.770
您不会像GSP一样

00:30:05.850 --> 00:30:10.350
具有自动补全功能的编辑器

00:30:07.770 --> 00:30:11.970
将获得任何真正的具体但

00:30:10.350 --> 00:30:16.260
该应用程序绝对可以构建

00:30:11.970 --> 00:30:17.370
运行调试运行测试，所以有

00:30:16.260 --> 00:30:20.130
有一段时期

00:30:17.370 --> 00:30:22.200
在发布Rails 3之前几个月

00:30:20.130 --> 00:30:23.790
智能的第一个版本是

00:30:22.200 --> 00:30:26.370
发布了包括Grails的三个

00:30:23.790 --> 00:30:28.410
支持，在过去的几个月里

00:30:26.370 --> 00:30:30.840
每个IntelliJ社区版

00:30:28.410 --> 00:30:34.170
一天，完全有生产力

00:30:30.840 --> 00:30:36.120
那是一个很好的环境

00:30:34.170 --> 00:30:38.640
甚至进行Rails 3开发

00:30:36.120 --> 00:30:40.560
没有护栏3支撑Grails 3 

00:30:38.640 --> 00:30:42.180
最终版的支持甚至

00:30:40.560 --> 00:30:45.030
更好的是你得到一堆盲文

00:30:42.180 --> 00:30:47.340
您获得像JSP一样的特定支持

00:30:45.030 --> 00:30:49.320
编辑器，您将获得用于创建的向导

00:30:47.340 --> 00:30:51.210
因此，您可以右键单击并

00:30:49.320 --> 00:30:53.730
说创建一个新的控制器写一个新的

00:30:51.210 --> 00:30:55.200
让课堂上你得到那种东西

00:30:53.730 --> 00:30:57.090
的视觉表示

00:30:55.200 --> 00:30:59.550
域类之间的关系

00:30:57.090 --> 00:31:01.080
你从中得到真正的具体东西

00:30:59.550 --> 00:31:01.830
终极版不能从

00:31:01.080 --> 00:31:05.940
社区问题

00:31:01.830 --> 00:31:08.160
你也会得到像我这样的东西

00:31:05.940 --> 00:31:09.570
注意这个词回应了

00:31:08.160 --> 00:31:12.060
更容易看到也许在线设置

00:31:09.570 --> 00:31:14.430
下划线的团队强调

00:31:12.060 --> 00:31:16.920
这就是IDE告诉你，嘿，我

00:31:14.430 --> 00:31:19.620
不确定这是一个有效的方法调用或

00:31:16.920 --> 00:31:21.360
不正确Rivi允许支持动态

00:31:19.620 --> 00:31:24.210
分派您可以调用不

00:31:21.360 --> 00:31:25.680
存在，所以IDE不存在

00:31:24.210 --> 00:31:27.720
知道那是一个有效的方法调用

00:31:25.680 --> 00:31:30.120
不会使它成为无效代码

00:31:27.720 --> 00:31:33.030
仍然可以按需编译和工作

00:31:30.120 --> 00:31:34.170
但是这个想法是在暗示我

00:31:33.030 --> 00:31:36.630
不知道那是不是有效的方法

00:31:34.170 --> 00:31:38.220
颜色是，但是是的，您无法验证

00:31:36.630 --> 00:31:40.560
与此相同的称为

00:31:38.220 --> 00:31:44.250
人员计数，此引用

00:31:40.560 --> 00:31:47.250
参数，使那些带有黑色下划线的项目

00:31:44.250 --> 00:31:49.800
有些事情，即不能

00:31:47.250 --> 00:31:52.650
不知道所以这就是为什么

00:31:49.800 --> 00:31:55.100
他们强调说那里是黑色的

00:31:52.650 --> 00:31:58.200
我现在想做的是我想摆脱

00:31:55.100 --> 00:32:00.600
社区版，我们将

00:31:58.200 --> 00:32:02.520
跳进Ultimate Edition并

00:32:00.600 --> 00:32:03.420
展示几件事，但其中一件

00:32:02.520 --> 00:32:06.690
我想弄清楚的事情

00:32:03.420 --> 00:32:08.880
是绝对可以做Grails 

00:32:06.690 --> 00:32:11.310
 3社区版开发

00:32:08.880 --> 00:32:14.220
 IntelliJ并非常有生产力

00:32:11.310 --> 00:32:16.230
有些东西全都错过了

00:32:14.220 --> 00:32:17.790
这些女孩的具体东西和其他

00:32:16.230 --> 00:32:20.430
我刚才提到的其他项目

00:32:17.790 --> 00:32:23.160
但绝对可以做到

00:32:20.430 --> 00:32:26.600
工作，所以我现在想做的是

00:32:23.160 --> 00:32:31.880
我要检查一个Grails 3项目

00:32:26.600 --> 00:32:36.690
从我们的github存储库中取出

00:32:31.880 --> 00:32:38.940
那就是我要导入的

00:32:36.690 --> 00:32:40.560
分号远程礼品存储库

00:32:38.940 --> 00:32:42.120
我们再次在这里做，我们不接受

00:32:40.560 --> 00:32:44.490
任何圣杯的优势

00:32:42.120 --> 00:32:46.620
能力或错过能力

00:32:44.490 --> 00:32:49.710
 IDE 

00:32:46.620 --> 00:32:52.710
所以艾米知道如何拉

00:32:49.710 --> 00:32:56.070
礼物库中的项目

00:32:52.710 --> 00:32:58.290
知道如何处理Gradle 

00:32:56.070 --> 00:33:01.110
即只要知道这个项目是

00:32:58.290 --> 00:33:04.860
实际上是Gradle项目，所以我可以打开

00:33:01.110 --> 00:33:06.660
它以及我们刚刚看到的所有内容

00:33:04.860 --> 00:33:09.780
社区版也将发生

00:33:06.660 --> 00:33:11.580
在终极版中，我

00:33:09.780 --> 00:33:15.020
将演示一些其他

00:33:11.580 --> 00:33:15.020
为您提供东西的能力

00:33:15.740 --> 00:33:23.230
好的，所以IDE很划算

00:33:21.580 --> 00:33:25.780
现在与Gradle找出什么

00:33:23.230 --> 00:33:28.090
什么样的项目，这是什么

00:33:25.780 --> 00:33:29.620
源目录的信号旗

00:33:28.090 --> 00:33:31.420
这个项目有没有

00:33:29.620 --> 00:33:34.200
依赖当然很重要

00:33:31.420 --> 00:33:37.630
被添加到IDE的类路径并

00:33:34.200 --> 00:33:39.640
一旦导入完成，现在

00:33:37.630 --> 00:33:41.650
我们的状态与我们非常相似

00:33:39.640 --> 00:33:43.330
在社区，所以再次注意

00:33:41.650 --> 00:33:44.440
该项目没有主文件夹

00:33:43.330 --> 00:33:47.650
恰好没有任何域

00:33:44.440 --> 00:33:49.540
类或标签盖，所以如果我们创建

00:33:47.650 --> 00:33:51.610
主要课程或平板电脑，我们将

00:33:49.540 --> 00:33:53.050
同样的问题，我们有

00:33:51.610 --> 00:33:55.810
这就是我们需要的社区版

00:33:53.050 --> 00:34:00.270
告诉IDE这些文件夹是

00:33:55.810 --> 00:34:03.190
我们这个项目的短裤

00:34:00.270 --> 00:34:04.930
有一个简单的单元测试，那就是

00:34:03.190 --> 00:34:06.640
将允许我但我想使用

00:34:04.930 --> 00:34:09.010
指出几件事

00:34:06.640 --> 00:34:10.540
简单但对

00:34:09.010 --> 00:34:15.130
知道你是否在做Grails开发

00:34:10.540 --> 00:34:17.050
在湄，所以就像你可以运行

00:34:15.130 --> 00:34:20.320
应用程序或调试应用程序

00:34:17.050 --> 00:34:21.070
没有任何Grails特定的交互

00:34:20.320 --> 00:34:23.890
从IDE 

00:34:21.070 --> 00:34:26.250
单元测试也是如此，因此

00:34:23.890 --> 00:34:29.830
如果我在此单元测试中单击鼠标右键， 

00:34:26.250 --> 00:34:32.020
选择运行，单元测试将运行并

00:34:29.830 --> 00:34:33.810
第一次运行第一次测试

00:34:32.020 --> 00:34:36.850
项目和建筑必须进行

00:34:33.810 --> 00:34:38.560
这样，这是第一次测试

00:34:36.850 --> 00:34:40.900
比任何后续测试花费更长的时间

00:34:38.560 --> 00:34:42.430
圆，但一旦一切都建立了

00:34:40.900 --> 00:34:45.010
我们将能够重新运行测试

00:34:42.430 --> 00:34:47.080
顺便说一句，我有些

00:34:45.010 --> 00:34:49.090
尝试不使用键盘快捷键

00:34:47.080 --> 00:34:52.030
在这里，你可以看到我在做什么

00:34:49.090 --> 00:34:55.150
右键单击并单击我自己的菜单

00:34:52.030 --> 00:34:56.740
偏好是我使用起来更有效率

00:34:55.150 --> 00:34:59.170
这类键盘快捷键

00:34:56.740 --> 00:35:01.660
东西，所以你可以在菜单中看到

00:34:59.170 --> 00:35:04.690
进行测试的键盘快捷键是

00:35:01.660 --> 00:35:07.870
控制转移是，这就是我的方式

00:35:04.690 --> 00:35:09.880
通常会在测试中运行

00:35:07.870 --> 00:35:11.980
我正在使用菜单，所以您可以看到

00:35:09.880 --> 00:35:15.820
进行一件伟大的事情

00:35:11.980 --> 00:35:19.270
 IntelliJ就像很多人一样

00:35:15.820 --> 00:35:21.250
我，那是他们喜欢做的

00:35:19.270 --> 00:35:24.010
他们想要保留的一切

00:35:21.250 --> 00:35:25.660
而不是为我使用鼠标

00:35:24.010 --> 00:35:27.550
就个人而言，使用

00:35:25.660 --> 00:35:29.710
键盘和我想要的一切

00:35:27.550 --> 00:35:31.480
在IDE中可以用键盘来完成

00:35:29.710 --> 00:35:33.280
大多数事物都有捷径

00:35:31.480 --> 00:35:35.080
键盘快捷键已映射到

00:35:33.280 --> 00:35:35.410
他们可以看到键盘快捷键

00:35:35.080 --> 00:35:38.200
下一个

00:35:35.410 --> 00:35:39.820
这些菜单很多，还有一个系统

00:35:38.200 --> 00:35:41.500
在您可以的首选项中

00:35:39.820 --> 00:35:44.110
映射自己的任意键盘

00:35:41.500 --> 00:35:48.640
几乎所有功能的捷径

00:35:44.110 --> 00:35:51.390
 IDE提供的，所以这只是一部分

00:35:48.640 --> 00:35:54.040
一个很长的清单，但这是一个

00:35:51.390 --> 00:35:56.110
为什么我真的爱IntelliJ，为什么我

00:35:54.040 --> 00:35:57.520
我可以在智能方面多产

00:35:56.110 --> 00:35:59.920
配置它来做我做的事情

00:35:57.520 --> 00:36:01.540
想做，因为我是键盘用户

00:35:59.920 --> 00:36:04.780
我可以将键盘快捷键

00:36:01.540 --> 00:36:06.910
我日常所做的一切

00:36:04.780 --> 00:36:08.980
只是让它更有生产力

00:36:06.910 --> 00:36:11.710
所以这个测试就跑了

00:36:08.980 --> 00:36:13.870
通过但测试实际上正在运行

00:36:11.710 --> 00:36:16.360
在我们不希望它运行的状态下

00:36:13.870 --> 00:36:18.910
我会用我澄清一下

00:36:16.360 --> 00:36:22.180
意思是说，所以我要添加一个测试

00:36:18.910 --> 00:36:28.960
在这里，期望

00:36:22.180 --> 00:36:31.420
当前的环境是正确的测试，所以

00:36:28.960 --> 00:36:33.730
盲文系统具有环境概念

00:36:31.420 --> 00:36:36.700
您的应用程序可以是

00:36:33.730 --> 00:36:39.310
例如这样运行

00:36:36.700 --> 00:36:41.260
您输入rails space run应用

00:36:39.310 --> 00:36:43.750
应用程序在开发模式下运行

00:36:41.260 --> 00:36:45.520
当您运行测试应用程序时

00:36:43.750 --> 00:36:47.680
应该在测试模式下以及何时

00:36:45.520 --> 00:36:49.300
您构建战争文件或可执行文件以

00:36:47.680 --> 00:36:51.280
我们的文件应用程序应该

00:36:49.300 --> 00:36:52.750
以生产模式运行，然后您可以

00:36:51.280 --> 00:36:54.580
配置了不同的数据源

00:36:52.750 --> 00:36:56.560
对于那些不同的环境，您可以

00:36:54.580 --> 00:36:58.180
有行为的代码块

00:36:56.560 --> 00:37:00.430
不同，你可以拥有不同的春天

00:36:58.180 --> 00:37:01.780
对于不同的环境意味着很多

00:37:00.430 --> 00:37:03.700
您的应用程序中的某些内容可能是

00:37:01.780 --> 00:37:07.630
根据哪个可以燃烧您的

00:37:03.700 --> 00:37:10.900
生活，所以当您运行测试时

00:37:07.630 --> 00:37:12.940
当前的环境应该测试一下

00:37:10.900 --> 00:37:16.480
在此处按保留在土耳其龟重新运行

00:37:12.940 --> 00:37:19.930
这个测试，我们将看到的是

00:37:16.480 --> 00:37:23.140
测试将失败，因为测试

00:37:19.930 --> 00:37:25.450
实际上不在Tusk中运行

00:37:23.140 --> 00:37:27.220
环境，我们将看到它实际上是

00:37:25.450 --> 00:37:29.500
在开发环境中运行

00:37:27.220 --> 00:37:30.910
这取决于您的

00:37:29.500 --> 00:37:33.390
应用程序可能正在做

00:37:30.910 --> 00:37:33.390
有问题的

00:37:37.080 --> 00:37:41.670
所以一旦

00:37:39.420 --> 00:37:44.549
测试仍然应该通过，但是

00:37:41.670 --> 00:37:46.829
我期望第12行上的断言

00:37:44.549 --> 00:37:49.380
失败了，它的确失败了，所以我们

00:37:46.829 --> 00:37:50.760
当前预期的环境

00:37:49.380 --> 00:37:53.670
等于测试，但实际上

00:37:50.760 --> 00:37:56.339
发达所以好东西之一

00:37:53.670 --> 00:37:57.809
关于更改是不错的选择之一

00:37:56.339 --> 00:37:59.640
关于杂货店的方式的事情

00:37:57.809 --> 00:38:01.380
放在一起就是您可以运行的ID 

00:37:59.640 --> 00:38:04.799
无需交互即可进行测试

00:38:01.380 --> 00:38:06.420
与任何Rails环境相关的东西

00:38:04.799 --> 00:38:09.510
那就是我们正在做的，但是

00:38:06.420 --> 00:38:12.109
小型事件是IDE运行时

00:38:09.510 --> 00:38:14.970
测试环境未设置

00:38:12.109 --> 00:38:15.960
这样测试将在测试中运行

00:38:14.970 --> 00:38:17.730
他们将要遇到的环境

00:38:15.960 --> 00:38:20.069
亲爱的伙伴，还有一个

00:38:17.730 --> 00:38:23.069
解决这个问题的简单方法

00:38:20.069 --> 00:38:26.490
任务的运行配置，如果

00:38:23.069 --> 00:38:29.700
您设置烧烤架ENB系统

00:38:26.490 --> 00:38:32.670
要测试的属性会导致

00:38:29.700 --> 00:38:34.410
测试在测试环境中运行

00:38:32.670 --> 00:38:37.140
如果我重新运行该测试，该测试应该

00:38:34.410 --> 00:38:40.829
现在通过，但是方法有问题

00:38:37.140 --> 00:38:42.690
我刚才讲的是你可能

00:38:40.829 --> 00:38:44.309
你有很多测试

00:38:42.690 --> 00:38:45.540
项目你应该有很多

00:38:44.309 --> 00:38:47.040
在您的项目中进行测试

00:38:45.540 --> 00:38:50.040
数以千计的测试，您

00:38:47.040 --> 00:38:52.829
不想去做- 

00:38:50.040 --> 00:38:55.049
每一项中都包含Grails D＆B内容

00:38:52.829 --> 00:38:58.530
您的测试运行配置

00:38:55.049 --> 00:39:01.109
所以大多数测试只是通过了所以

00:38:58.530 --> 00:39:04.500
解决此问题的更好方法

00:39:01.109 --> 00:39:07.230
我所做的是我添加了突出显示的文本- 

00:39:04.500 --> 00:39:09.960
 Grails DN b等于测试，我补充说

00:39:07.230 --> 00:39:12.270
这个特定的vm选项

00:39:09.960 --> 00:39:13.890
运行该规格的配置，然后

00:39:12.270 --> 00:39:16.530
如果我不运行其他规范

00:39:13.890 --> 00:39:17.339
做一件不好的事情

00:39:16.530 --> 00:39:19.380
我要做的是

00:39:17.339 --> 00:39:24.619
删除该运行配置是什么

00:39:19.380 --> 00:39:29.400
现在消失了，在IDE中有这个

00:39:24.619 --> 00:39:31.859
用于创建的模板种类列表

00:39:29.400 --> 00:39:33.359
和运行配置以及最佳

00:39:31.859 --> 00:39:36.540
解释这个的方法只是跳进去

00:39:33.359 --> 00:39:39.000
所以有一个j单元运行配置

00:39:36.540 --> 00:39:41.819
模板在这里，但是这个东西是

00:39:39.000 --> 00:39:43.980
从那时开始，每个

00:39:41.819 --> 00:39:47.490
创建的J单元运行配置

00:39:43.980 --> 00:39:50.280
将根据定义进行配置

00:39:47.490 --> 00:39:52.710
在这里，例如，如果我说女孩-env 

00:39:50.280 --> 00:39:53.000
因为任务，我将再设置一个

00:39:52.710 --> 00:39:58.940
这里

00:39:53.000 --> 00:40:00.440
我们最喜欢的备注路线不会

00:39:58.940 --> 00:40:02.690
实际用于任何东西，但我

00:40:00.440 --> 00:40:04.850
把它放在那里，我们会看到它出现

00:40:02.690 --> 00:40:07.070
一会儿在其他地方，所以我已经

00:40:04.850 --> 00:40:11.600
完成是我编辑了默认模板

00:40:07.070 --> 00:40:13.370
用于j-unit运行配置并

00:40:11.600 --> 00:40:15.200
注意这不会改变任何

00:40:13.370 --> 00:40:18.140
您现有的配置是

00:40:15.200 --> 00:40:19.430
为什么我删除了设置配置

00:40:18.140 --> 00:40:21.860
刚才我想摆脱那个

00:40:19.430 --> 00:40:23.900
然后编辑此模板，现在从

00:40:21.860 --> 00:40:25.730
至此，所有运行

00:40:23.900 --> 00:40:28.130
配置j单元运行

00:40:25.730 --> 00:40:30.590
创建的配置将是

00:40:28.130 --> 00:40:32.690
用该模板创建的，所以如果我们去

00:40:30.590 --> 00:40:35.390
看看刚刚创建的这个

00:40:32.690 --> 00:40:36.800
这些东西现在都在那里

00:40:35.390 --> 00:40:38.150
我每次跑一个

00:40:36.800 --> 00:40:40.040
单元测试它将配置为

00:40:38.150 --> 00:40:42.250
那些系统属性是

00:40:40.040 --> 00:40:44.600
是我想要的，这是一次

00:40:42.250 --> 00:40:48.650
我要做的小配置

00:40:44.600 --> 00:40:51.110
当我第一次设置一个

00:40:48.650 --> 00:40:52.790
项目，然后将地图指向前方

00:40:51.110 --> 00:40:53.270
到位，我不必考虑

00:40:52.790 --> 00:40:55.160
那个了

00:40:53.270 --> 00:40:58.730
因此请注意，当您跑步时

00:40:55.160 --> 00:41:00.380
您从IDE进行的测试将在其中运行

00:40:58.730 --> 00:41:02.810
开发环境，除非您

00:41:00.380 --> 00:41:07.130
说其他话

00:41:02.810 --> 00:41:10.070
设置Grails DnB系统属性

00:41:07.130 --> 00:41:12.410
并为其分配测试值和一个

00:41:10.070 --> 00:41:14.690
施加的简单方法是编辑

00:41:12.410 --> 00:41:18.170
 j-unit运行配置的东西

00:41:14.690 --> 00:41:20.900
我只是行业还可以，所以我们可以

00:41:18.170 --> 00:41:23.150
在多个应用程序上运行该应用程序

00:41:20.900 --> 00:41:24.980
我们可以右键单击此处的方法，然后

00:41:23.150 --> 00:41:27.740
像我在社区中一样运行它

00:41:24.980 --> 00:41:30.590
编辑本版运行主要方法

00:41:27.740 --> 00:41:32.840
我能做的是我可以从

00:41:30.590 --> 00:41:37.780
在命令行中输入Grails空间

00:41:32.840 --> 00:41:40.730
运行应用程序，我可以使用Bradle从运行它

00:41:37.780 --> 00:41:42.440
引导运行任务，所以有几个

00:41:40.730 --> 00:41:45.920
我可以运行项目的方式，所以我会

00:41:42.440 --> 00:41:50.210
只需使用Gradle W蓝图运行它，如果

00:41:45.920 --> 00:41:52.850
如果您更喜欢点击东西

00:41:50.210 --> 00:41:58.520
而不是在这里输入内容

00:41:52.850 --> 00:42:01.100
到Gradle工具窗口和某个地方

00:41:58.520 --> 00:42:02.600
这里附近有便便

00:42:01.100 --> 00:42:04.850
所以我可以双击

00:42:02.600 --> 00:42:06.619
实际上，同一件事是

00:42:04.850 --> 00:42:09.019
发生键入启动在

00:42:06.619 --> 00:42:11.569
命令行，所以有很多

00:42:09.019 --> 00:42:16.069
应用程序的运行方式

00:42:11.569 --> 00:42:17.599
所以使用安全开发中的任何一个

00:42:16.069 --> 00:42:20.690
模式，什么才是最重要的

00:42:17.599 --> 00:42:23.749
对您有帮助的方式记得

00:42:20.690 --> 00:42:25.099
我可以调试这个项目只是

00:42:23.749 --> 00:42:27.440
就像我们在社区版中看到的一样

00:42:25.099 --> 00:42:29.839
可以在这里调试应用程序

00:42:27.440 --> 00:42:31.759
一旦运行配置创建好

00:42:29.839 --> 00:42:35.119
在这里我可以单击绿色的bug 

00:42:31.759 --> 00:42:38.210
在调试模式下运行的东西

00:42:35.119 --> 00:42:40.309
两者都明显吗

00:42:38.210 --> 00:42:43.099
给熟悉工作的人

00:42:40.309 --> 00:42:45.710
在IDE中，但另一种技术

00:42:43.099 --> 00:42:48.499
我经常使用的不是

00:42:45.710 --> 00:42:51.619
很明显是一旦您运行该应用程序

00:42:48.499 --> 00:42:54.859
从Gradle使用启动运行任务一

00:42:51.619 --> 00:42:59.269
您可以做的事情是指定-- 

00:42:54.859 --> 00:43:01.670
 debug-JVM，因此-debug ash JVM 

00:42:59.269 --> 00:43:04.430
而要做的是

00:43:01.670 --> 00:43:07.279
打算告诉Gradle启动

00:43:04.430 --> 00:43:09.650
调试代理何时应用

00:43:07.279 --> 00:43:11.720
启动，这就是现在

00:43:09.650 --> 00:43:14.299
发生了调试代理有

00:43:11.720 --> 00:43:17.269
已经开始了

00:43:14.299 --> 00:43:19.789
配置为暂停，表示正确

00:43:17.269 --> 00:43:22.400
现在，该过程被阻止并等待

00:43:19.789 --> 00:43:25.339
供远程调试器连接到

00:43:22.400 --> 00:43:26.359
过程，它会一直等下去，我想我永远

00:43:25.339 --> 00:43:27.980
不知道是否有超时，但是

00:43:26.359 --> 00:43:29.869
它会等待很长时间，所以

00:43:27.980 --> 00:43:31.759
刚刚暂停，现在该应用程序是

00:43:29.869 --> 00:43:34.339
除非我们连接，否则永远不会启动

00:43:31.759 --> 00:43:36.230
多虫，这是另一个

00:43:34.339 --> 00:43:39.369
很多人不知道该怎么做的事情

00:43:36.230 --> 00:43:42.920
可以，但是IntelliJ对

00:43:39.369 --> 00:43:44.180
创建一个远程调试会话，以便

00:43:42.920 --> 00:43:47.029
我想做的就是创建

00:43:44.180 --> 00:43:50.299
 IDE中的新运行配置

00:43:47.029 --> 00:43:52.670
这种类型称为遥控器，而我

00:43:50.299 --> 00:43:54.529
认为人们可能更容易

00:43:52.670 --> 00:43:56.269
如果能找到最好的地方

00:43:54.529 --> 00:43:58.609
被认为是远程调试

00:43:56.269 --> 00:44:01.460
人们不确定那是什么

00:43:58.609 --> 00:44:03.920
但我要创建一个新的遥控器

00:44:01.460 --> 00:44:06.950
配置，我通常称我为

00:44:03.920 --> 00:44:09.049
 RGB仅用于一小段远程调试

00:44:06.950 --> 00:44:11.239
名字，但你可以称呼任何东西

00:44:09.049 --> 00:44:13.130
你喜欢而且几乎总是这些

00:44:11.239 --> 00:44:16.460
默认值将是您想要的

00:44:13.130 --> 00:44:18.230
所以我将在其中单击“确定” 

00:44:16.460 --> 00:44:19.430
到目前为止，我们已经创建了一个运行

00:44:18.230 --> 00:44:20.030
配置称为

00:44:19.430 --> 00:44:21.800
我们的DV 

00:44:20.030 --> 00:44:24.110
我们还没有开始，我们刚刚创建了

00:44:21.800 --> 00:44:27.530
它的过程仍然在这里

00:44:24.110 --> 00:44:29.570
等待我们连接遥控器

00:44:27.530 --> 00:44:31.970
调试器，如果我选择

00:44:29.570 --> 00:44:35.450
已经运行配置并单击

00:44:31.970 --> 00:44:38.540
刚刚启动的错误

00:44:35.450 --> 00:44:41.270
 IDE中的远程调试器

00:44:38.540 --> 00:44:43.760
远程调试器已连接到

00:44:41.270 --> 00:44:46.460
已激活的调试代理

00:44:43.760 --> 00:44:49.940
在我们的程序中，现在我们的程序已启动

00:44:46.460 --> 00:44:56.540
和跑步我出去这里拍照

00:44:49.940 --> 00:44:59.300
冒号8080并离开这里，我们可以

00:44:56.540 --> 00:45:02.390
搜索我最喜欢的编曲之一

00:44:59.300 --> 00:45:05.360
乐队King Crimson并点击搜索

00:45:02.390 --> 00:45:07.340
 iTunes和刚才的请求已发送

00:45:05.360 --> 00:45:08.930
到iTunes Apple Store以及这些

00:45:07.340 --> 00:45:11.420
是所有的搜索结果

00:45:08.930 --> 00:45:13.190
从中我可以点击其中一个

00:45:11.420 --> 00:45:15.020
这些链接，现在我进入

00:45:13.190 --> 00:45:17.300
苹果商店做什么苹果

00:45:15.020 --> 00:45:19.220
商店允许我在那里做，但我的

00:45:17.300 --> 00:45:21.680
应用程序启动并运行， 

00:45:19.220 --> 00:45:24.920
因为我开始在调试模式下运行

00:45:21.680 --> 00:45:27.340
它与--调试-JVM和我连接

00:45:24.920 --> 00:45:31.550
一个远程调试器，所以现在如果我要

00:45:27.340 --> 00:45:34.150
来这里，在我的身上放一个断点

00:45:31.550 --> 00:45:37.460
控制器回到应用程序， 

00:45:34.150 --> 00:45:39.290
搜索或发起另一个搜索，我们

00:45:37.460 --> 00:45:41.680
刚打到这个断点，我就能看到

00:45:39.290 --> 00:45:44.210
搜索字词，我可以查询整体

00:45:41.680 --> 00:45:48.530
我周围的世界状况

00:45:44.210 --> 00:45:52.220
指向程序，所以它超级好

00:45:48.530 --> 00:45:54.950
易于将远程调试器连接到

00:45:52.220 --> 00:45:57.800
您从IDE获得的Grails应用程序

00:45:54.950 --> 00:46:00.050
再次，我要停止耶，但是步骤

00:45:57.800 --> 00:46:02.840
当我运行

00:46:00.050 --> 00:46:05.480
来自Gradle的应用程序，我包括- 

00:46:02.840 --> 00:46:07.190
 -调试-JVM，然后我必须连接

00:46:05.480 --> 00:46:10.850
来自IDE的远程调试器

00:46:07.190 --> 00:46:12.200
超级简单，但您只需要

00:46:10.850 --> 00:46:13.670
这样做，您只需要遥控器

00:46:12.200 --> 00:46:15.920
调试器的东西，如果您正在使用此

00:46:13.670 --> 00:46:17.810
与JVM业务相关的人员

00:46:15.920 --> 00:46:23.420
您正在通过以下方式调试应用程序

00:46:17.810 --> 00:46:24.950
使用ID内置的调试支持您

00:46:23.420 --> 00:46:27.110
不必在公司当中

00:46:24.950 --> 00:46:28.880
只是证明我在做

00:46:27.110 --> 00:46:29.960
我出于各种原因在那里发展

00:46:28.880 --> 00:46:32.650
可能想开始

00:46:29.960 --> 00:46:34.119
从脆性和

00:46:32.650 --> 00:46:36.460
我可能还想调试

00:46:34.119 --> 00:46:39.520
应用程序，所以我两个都做

00:46:36.460 --> 00:46:42.520
而ID确实使所有这些

00:46:39.520 --> 00:46:45.190
真的很容易做到

00:46:42.520 --> 00:46:47.289
聪明的人真的是超级

00:46:45.190 --> 00:46:48.849
我去过的生产环境

00:46:47.289 --> 00:46:51.010
我长期使用celibate 

00:46:48.849 --> 00:46:52.779
整个团队每天都在使用它

00:46:51.010 --> 00:46:56.380
盲文可以在LCI使用中看到

00:46:52.779 --> 00:46:58.569
每天都有IntelliJ 

00:46:56.380 --> 00:47:01.710
本身就是全部

00:46:58.569 --> 00:47:04.390
作为最好的IDE 

00:47:01.710 --> 00:47:06.069
杂货店发展我真的说

00:47:04.390 --> 00:47:08.260
在JVM中进行开发同样的事情

00:47:06.069 --> 00:47:10.299
一般，但特别是我花了我所有的时间

00:47:08.260 --> 00:47:13.599
时间做铁轨工作和事情只是

00:47:10.299 --> 00:47:16.299
效果很棒，所以也许其中一些

00:47:13.599 --> 00:47:17.980
您选择的理由放在

00:47:16.299 --> 00:47:21.220
我认为原因的简短列表

00:47:17.980 --> 00:47:23.980
 IntelliJ确实是最好的IDE 

00:47:21.220 --> 00:47:25.869
做杂货开发之一是你

00:47:23.980 --> 00:47:27.460
拥有可以使用的许可选项

00:47:25.869 --> 00:47:29.859
公开的社区版

00:47:27.460 --> 00:47:31.779
来源是免费的，这是一种很棒的方式

00:47:29.859 --> 00:47:33.099
把东西拿出来旋转一下，看看是否

00:47:31.779 --> 00:47:36.549
您喜欢它，也可以使用

00:47:33.099 --> 00:47:38.410
终极版可免费使用30天

00:47:36.549 --> 00:47:40.150
相信你可以下载它的东西

00:47:38.410 --> 00:47:42.760
完全可操作，不受限制

00:47:40.150 --> 00:47:44.140
除了时间限制以外的任何方式，但是

00:47:42.760 --> 00:47:46.329
您有选择，可以免费使用

00:47:44.140 --> 00:47:50.410
 IDE的开源版本或您

00:47:46.329 --> 00:47:54.130
可以从

00:47:50.410 --> 00:47:56.589
最终版的另一个原因

00:47:54.130 --> 00:47:58.839
我今天看到的真的是最好的

00:47:56.589 --> 00:48:01.990
用于进行Grails 3开发的IDE是

00:47:58.839 --> 00:48:04.690
我们必须获得的悠久历史

00:48:01.990 --> 00:48:07.059
 JetBrains的人们建造的人

00:48:04.690 --> 00:48:09.700
对烤架的支持真的很棒

00:48:07.059 --> 00:48:11.500
从一开始就真的

00:48:09.700 --> 00:48:14.589
老实说，我相信他们真的

00:48:11.500 --> 00:48:16.150
对Grails的大力支持

00:48:14.589 --> 00:48:18.039
甚至有道理，我曾经

00:48:16.150 --> 00:48:19.630
真的印象深刻，激动不已

00:48:18.039 --> 00:48:22.059
快速JetBrains 

00:48:19.630 --> 00:48:23.799
加入并进行重大投资

00:48:22.059 --> 00:48:27.279
在构建真正非常出色的Ruby中

00:48:23.799 --> 00:48:29.980
支持非常好的Grails支持

00:48:27.279 --> 00:48:31.539
他们只是带领了

00:48:29.980 --> 00:48:34.690
整个时候我们都在

00:48:31.539 --> 00:48:36.789
现在差不多十多年了

00:48:34.690 --> 00:48:40.510
其他存在，几乎整个

00:48:36.789 --> 00:48:42.789
 IntelliJ IDEA曾经真的

00:48:40.510 --> 00:48:45.460
伟大的Grails真的很棒Grails之一

00:48:42.789 --> 00:48:47.780
散布伟大的Grails来支持甚至

00:48:45.460 --> 00:48:50.240
更适合L街

00:48:47.780 --> 00:48:52.970
我们之间的合作非常好

00:48:50.240 --> 00:48:54.319
团队之间，因此北约和

00:48:52.970 --> 00:48:56.150
那里的其他人很聪明

00:48:54.319 --> 00:48:58.670
建立Groovy和Grails支持

00:48:56.150 --> 00:49:01.250
每当我们有问题或疑问时

00:48:58.670 --> 00:49:03.440
或如何使事情变得更好的想法

00:49:01.250 --> 00:49:05.150
我们听说英国队会伸出援手

00:49:03.440 --> 00:49:06.740
对那些家伙来说，他们总是超级容易

00:49:05.150 --> 00:49:11.119
与非常友好的人一起工作

00:49:06.740 --> 00:49:13.339
聪明的生产者，这已经

00:49:11.119 --> 00:49:15.380
我认为这很重要

00:49:13.339 --> 00:49:17.630
启用IDE的重要部分

00:49:15.380 --> 00:49:20.900
有这么大的支持

00:49:17.630 --> 00:49:22.700
多年来的框架和支持

00:49:20.900 --> 00:49:24.260
经常双向走

00:49:22.700 --> 00:49:26.089
杰夫（Jeff）系列的人将伸出援手

00:49:24.260 --> 00:49:29.270
对我们来说还不清楚

00:49:26.089 --> 00:49:31.250
关于Grails在内部如何工作或

00:49:29.270 --> 00:49:33.260
与支持有关的东西

00:49:31.250 --> 00:49:34.700
他们正在IDE中构建经销商

00:49:33.260 --> 00:49:37.490
那里的其他人之一

00:49:34.700 --> 00:49:39.140
与我们联系，我们将与

00:49:37.490 --> 00:49:40.369
他们，因为这是我们的兴趣

00:49:39.140 --> 00:49:42.380
他们有很大的支持

00:49:40.369 --> 00:49:44.390
好让彼此之间的合作

00:49:42.380 --> 00:49:46.550
团队一直非常

00:49:44.390 --> 00:49:50.030
太好了，我想我们一起努力

00:49:46.550 --> 00:49:51.319
好，最终结果就是你

00:49:50.030 --> 00:49:53.540
看，那真的是真的

00:49:51.319 --> 00:49:56.900
对Grails的一流支持

00:49:53.540 --> 00:50:00.470
 IDE中的框架确实是

00:49:56.900 --> 00:50:01.880
最好的Grails三项支持，我不支持

00:50:00.470 --> 00:50:04.460
认为有任何问题

00:50:01.880 --> 00:50:06.559
那个，实际上所有这些东西

00:50:04.460 --> 00:50:08.839
归结为最重要的部分是

00:50:06.559 --> 00:50:11.240
生产力和生产力有

00:50:08.839 --> 00:50:13.730
一直是

00:50:11.240 --> 00:50:14.839
罗缎我们为

00:50:13.730 --> 00:50:16.640
事情将如何进行

00:50:14.839 --> 00:50:19.030
框架生产力始终处于

00:50:16.640 --> 00:50:21.319
列表顶部我们如何制作东西

00:50:19.030 --> 00:50:23.450
为开发人员提高生产力

00:50:21.319 --> 00:50:25.069
开发人员的生产力可能是

00:50:23.450 --> 00:50:26.960
一个最重要的因素是

00:50:25.069 --> 00:50:28.819
当然在短名单上，就像我们

00:50:26.960 --> 00:50:30.559
实施新功能和想法，以及

00:50:28.819 --> 00:50:33.530
决定我们想要的东西

00:50:30.559 --> 00:50:35.690
在框架中工作，您可以

00:50:33.530 --> 00:50:37.700
仅从用户角度讲

00:50:35.690 --> 00:50:38.359
 JetBrains的员工采取了确切的措施

00:50:37.700 --> 00:50:41.000
同样的方法

00:50:38.359 --> 00:50:43.220
这是一个超级想法

00:50:41.000 --> 00:50:44.839
我喜欢的生产环境

00:50:43.220 --> 00:50:46.640
使用键盘可以完成所有操作

00:50:44.839 --> 00:50:48.920
允许我真的真的做到这一点

00:50:46.640 --> 00:50:50.720
灵活的人，他们不喜欢那样做

00:50:48.920 --> 00:50:52.190
你说你不必那样做

00:50:50.720 --> 00:50:55.000
不仅有一种做事的方法

00:50:52.190 --> 00:50:58.250
 IDE升级提供的选项

00:50:55.000 --> 00:50:59.900
使那对于

00:50:58.250 --> 00:51:01.309
不同的选择，我们会更有意义

00:50:59.900 --> 00:51:04.579
对于不同的人，生产力是

00:51:01.309 --> 00:51:06.230
从我们两个角度来看，真正的关键

00:51:04.579 --> 00:51:10.250
从Grails团队的角度来看， 

00:51:06.230 --> 00:51:11.809
来自Jeff Rains，我认为两者

00:51:10.250 --> 00:51:15.079
两个团队都做了非常非常

00:51:11.809 --> 00:51:17.359
实现我使用的那些目标的出色工作

00:51:15.079 --> 00:51:20.630
正如我在使用IntelliJ IDEA之前所说的

00:51:17.359 --> 00:51:22.480
每一天，我不能

00:51:20.630 --> 00:51:25.490
生产率更高

00:51:22.480 --> 00:51:28.160
专门用于建造Grails 

00:51:25.490 --> 00:51:30.140
应用程序再好不过了

00:51:28.160 --> 00:51:33.170
我什么都没有，但是什么都没有

00:51:30.140 --> 00:51:35.480
关于一口井的事情我是的

00:51:33.170 --> 00:51:37.369
认为就是这样Jeff谢谢你

00:51:35.480 --> 00:51:40.700
花时间做这个

00:51:37.369 --> 00:51:45.319
精彩的演讲，并感谢

00:51:40.700 --> 00:51:48.770
所有实际为我们做的参与者

00:51:45.319 --> 00:51:51.980
再有问题，有一个选择

00:51:48.770 --> 00:51:56.000
关于烤架的频道，有一个

00:51:51.980 --> 00:51:57.650
专用通道错误IntelliJ IDEA因此

00:51:56.000 --> 00:51:58.670
随时问所有问题

00:51:57.650 --> 00:52:02.450
未回答

00:51:58.670 --> 00:52:05.779
今天在那里，但以理乃至更高

00:52:02.450 --> 00:52:11.319
也许你在杰夫很高兴

00:52:05.779 --> 00:52:12.760
输入并复制绝对很棒

00:52:11.319 --> 00:52:15.589
感谢大家

00:52:12.760 --> 00:52:18.220
请继续关注，以获取更多网络研讨会和知识

00:52:15.589 --> 00:52:18.220
美好的一天

