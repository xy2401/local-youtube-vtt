WEBVTT
Kind: captions
Language: en

00:00:00.790 --> 00:00:02.810
[music]

00:00:12.730 --> 00:00:14.420
Hello and welcome to part 2

00:00:14.420 --> 00:00:19.550
of lesson one. In this section we're
going to look at the syntax that's used

00:00:19.550 --> 00:00:19.980
for

00:00:19.980 --> 00:00:24.810
Lambda expressions in Java. I
mentioned

00:00:24.810 --> 00:00:28.070
in the first part of this lesson that
Lambda expressions are

00:00:28.070 --> 00:00:32.060
like methods but they're not really
methods, so let's

00:00:32.060 --> 00:00:35.910
go into a little more detail about
why that is the case. The important thing

00:00:35.910 --> 00:00:36.450
here

00:00:36.450 --> 00:00:40.210
is that a Lambda expression, although it
represents

00:00:40.210 --> 00:00:43.760
a method in terms of how we would use

00:00:43.760 --> 00:00:47.449
a particular interface, it's not
associated

00:00:47.449 --> 00:00:51.789
with a class. That's a very important thing
we will come back to why that's

00:00:51.789 --> 00:00:55.670
really relevant as we go through
the rest to this lesson.

00:00:55.670 --> 00:00:59.399
But the most important thing to get is
that a Lambda expression

00:00:59.399 --> 00:01:02.980
represents method but is not associated
with a class,

00:01:02.980 --> 00:01:06.540
so we don't call it a method. What we call
it

00:01:06.540 --> 00:01:10.890
is anonymous function. We can see
here

00:01:10.890 --> 00:01:14.650
that the syntax of a Lambda expression

00:01:14.650 --> 00:01:19.110
is to use the Lambda operator. The Lambda operator
is like a little arrow

00:01:19.110 --> 00:01:24.020
formed by minus greater and a greater than symbol. On
the left hand side

00:01:24.020 --> 00:01:28.290
of the Lambda operator are the parameters

00:01:28.290 --> 00:01:32.730
that are past to the anonymous function, and in
the case

00:01:32.730 --> 00:01:36.280
of Lambda expressions, if

00:01:36.280 --> 00:01:39.380
you have a single parameter then

00:01:39.380 --> 00:01:42.910
you don't need to have the brackets. If
you have no parameters

00:01:42.910 --> 00:01:46.370
then you must have an empty set of
brackets. If you have more than one

00:01:46.370 --> 00:01:50.440
parameter, then you must have the
parameters separated by commas

00:01:50.440 --> 00:01:53.740
with brackets around them exactly the
same as you would

00:01:53.740 --> 00:01:58.710
in a method that you were calling. But in
the case one parameter,

00:01:58.710 --> 00:02:02.360
the brackets are optional; you can put
them but you don't have to.

00:02:02.360 --> 00:02:05.440
The right hand side

00:02:05.440 --> 00:02:09.399
all the Lambda operator is the body of
the Lambda expression

00:02:09.399 --> 00:02:12.610
and this is in essence the body of the
method,

00:02:12.610 --> 00:02:15.920
the body of the anonymous function.

00:02:15.920 --> 00:02:18.940
Again if you have a single line

00:02:18.940 --> 00:02:23.320
Lambda expression then you don't need
to include the braces.

00:02:23.320 --> 00:02:26.390
Uou can do (they're optional) but you
don't have to.

00:02:26.390 --> 00:02:30.060
If you have multi-line Lambda
expressions

00:02:30.060 --> 00:02:34.300
then you will need braces and each line
would need to be separated by semicolons

00:02:34.300 --> 00:02:39.520
exactly the same way that we use Java. For

00:02:39.520 --> 00:02:42.910
single line methods a single line bodies
like

00:02:42.910 --> 00:02:46.390
some the examples you've already seen
you don't need an explicit

00:02:46.390 --> 00:02:49.900
return statement. Again if you want to
you can put

00:02:49.900 --> 00:02:53.840
return statements in, but for

00:02:53.840 --> 00:02:57.390
very simple Lambda expressions where you've
only got one statement

00:02:57.390 --> 00:03:01.030
you don't need to have an explicit return statement.

00:03:01.030 --> 00:03:05.380
We will see some examples of that in a moment.
That is the

00:03:05.380 --> 00:03:08.390
the essence a Lambda expression. The
other thing

00:03:08.390 --> 00:03:11.980
is that a Lambda expression, just like
a method, can throw

00:03:11.980 --> 00:03:16.030
exceptions. So the body of the Lambda
expression

00:03:16.030 --> 00:03:19.150
can have statements which will throw
exceptions,

00:03:19.150 --> 00:03:22.700
then these must be processed
appropriately outside of the

00:03:22.700 --> 00:03:25.910
Lambda expressions, and they must be caught and
handled as they would be

00:03:25.910 --> 00:03:29.909
with any other code.

00:03:29.909 --> 00:03:32.540
Here we have some examples all

00:03:32.540 --> 00:03:35.730
Lambda expressions. The first one uses a

00:03:35.730 --> 00:03:39.140
Lambda expression where we have no parameters

00:03:39.140 --> 00:03:43.269
so we have empty brackets. On the right hand side
we have a very simple piece of code; 

00:03:43.840 --> 00:03:47.379
a single line, so we don’t need braces, 

00:03:47.379 --> 00:03:51.920
we simply print out “hello Lambda”.  
The second one is more of a mathematical

00:03:51.920 --> 00:03:55.590
function. We have one 

00:03:55.590 --> 00:03:59.040
parameter, x, so we don’t need to put
brackets around that

00:03:59.040 --> 00:04:02.049
and then we’re simply returning the value x plus

00:04:02.049 --> 00:04:06.950
10. The third example is a little more complicated, 

00:04:06.950 --> 00:04:10.269
what I have here is two parameters, 

00:04:10.269 --> 00:04:14.170
int x and int y, so again we must have the brackets
around that 

00:04:14.170 --> 00:04:18.329
and, in this case, I’ve chosen to use the braces, 

00:04:18.329 --> 00:04:21.560
even though I’ve got a single line statement.

00:04:21.560 --> 00:04:25.660
One other thing that’s interesting, or relevant 
here is, 

00:04:25.660 --> 00:04:29.229
that if I do have a single line statement and 
I put braces round it

00:04:29.229 --> 00:04:32.860
I must terminate that single line with a semi-colon.  

00:04:32.860 --> 00:04:35.860
If I don’t have the braces, I don’t need the semi-colon.  

00:04:35.860 --> 00:04:40.840
If I do put the braces there I do need the semi-colon.  

00:04:40.840 --> 00:04:44.599
The next example takes two strings as parameters, 

00:04:44.599 --> 00:04:48.690
string x and string y and returns the difference in length,

00:04:48.690 --> 00:04:52.260
so the compiler will figure out from what we’re doing that 

00:04:52.260 --> 00:04:55.400
obviously we’re passing in two strings and the 

00:04:55.400 --> 00:04:57.060
difference in length will return an int or a long.  

00:04:57.060 --> 00:05:02.550
Then we can have a slightly more complex 

00:05:02.550 --> 00:05:06.470
body of the Lambda expression, where we’re passing
in a single variable,

00:05:06.470 --> 00:05:10.520
string x, again I’ve chosen to put the brackets around 
that I didn’t have to

00:05:10.520 --> 00:05:14.550
and we do need the braces and we have three statements,

00:05:14.550 --> 00:05:19.170
listA dot add, listB dot remove and then we return the size

00:05:19.170 --> 00:05:22.600
of listB after having processed that, 
so we have an explicit return statement.  

00:05:22.600 --> 00:05:25.750
Because it’s a multi-line

00:05:25.750 --> 00:05:29.560
Lambda body we must have an explicit return 
statement in that case.  

00:05:29.560 --> 00:05:33.040
So these are all good examples of 
different Lambda expressions.  

00:05:33.040 --> 00:05:37.000
We’ll see many more of these as we go 
through the rest of the course.

00:05:37.000 --> 00:05:40.810
Now in terms of

00:05:40.810 --> 00:05:44.230
what the compiler can do, it can actually
now do

00:05:44.230 --> 00:05:47.940
better type inference. 
One of the things we did in JDK 8 

00:05:47.940 --> 00:05:51.300
was we rewrote a large part of the compiler 

00:05:51.300 --> 00:05:57.610
to handle type inference in a better way.  
What we have here is a situation where

00:05:57.610 --> 00:06:01.750
I've defined particular method so in
this case it's called process

00:06:01.750 --> 00:06:05.190
has a generic type parameter, T, and

00:06:05.190 --> 00:06:09.370
what I’m going to do is have two parameters passed to that, 
one is going to be a list

00:06:09.370 --> 00:06:13.210
of type T and the other is a comparator of type T. 

00:06:13.210 --> 00:06:18.040
 If I want to use that method 
 
102
00:06:18,040 --&gt; 00:06:21,190
then I could do something like this: I
can create

00:06:21.190 --> 00:06:24.880
list of type string and get it from

00:06:24.880 --> 00:06:28.390
somewhere. When I want call process

00:06:28.390 --> 00:06:32.080
I can call process, pass the list

00:06:32.080 --> 00:06:36.210
the one that I’ve retrieved form getList
as my first parameter

00:06:36.210 --> 00:06:39.660
and then I can use a Lambda expression

00:06:39.660 --> 00:06:44.590
to represent the comparator and we'll use the
same one that we saw an example of on the

00:06:44.590 --> 00:06:47.990
previous slide where we're passing in 
two strings x and y 

00:06:47.990 --> 00:06:51.460
and we’re returning the difference in 
length of those strings.  

00:06:51.460 --> 00:06:55.490
What that’s going to do is process something

00:06:55.490 --> 00:07:00.520
based on the difference in length
of the strings.

00:07:00.520 --> 00:07:03.229
The compiler is now smarter

00:07:03.229 --> 00:07:07.720
and that allows us to eliminate some of the work
that we would normally have to do

00:07:08.069 --> 00:07:11.770
do because, in this case, the compiler knows

00:07:11.770 --> 00:07:15.090
that list that we're passing into
process

00:07:15.090 --> 00:07:19.139
is of type string and from the definition of process 

00:07:19.139 --> 00:07:22.940
we know that the comparator must be of
the same type

00:07:22.940 --> 00:07:26.110
as the list, because it uses the same type parameter.  

00:07:26.110 --> 00:07:30.560
Now what we can do is we can simply say in our 

00:07:30.560 --> 00:07:34.139
process call pass in list and 

00:07:34.139 --> 00:07:39.449
when we define a Lambda expression we no
longer have to explicitly state

00:07:39.449 --> 00:07:40.250
the types

00:07:40.250 --> 00:07:44.810
of x and y because the compiler knows that
they must be strings 

00:07:44.810 --> 00:07:48.490
because the comparator must be of type string. 

00:07:48.490 --> 00:07:53.360
In this case we don’t have to explicitly put
the type in.  

00:07:53.360 --> 00:07:56.870
So we are completely free to put that
in if you want to,

00:07:56.870 --> 00:08:01.009
but if the compiler is able to infer the
type for us, which it is in this case, 

00:08:01.009 --> 00:08:05.250
then we don’t actually have to do that. 

00:08:05.250 --> 00:08:08.250
This is good because it gives us less code
to write, 

00:08:08.250 --> 00:08:11.680
it gives us clearer syntax and it’s easier
to understand what’s going on.  

00:08:11.680 --> 00:08:15.930
Don't be alarmed by this, in no way are
we introducing any form of

00:08:15.930 --> 00:08:19.789
dynamic typing to Java.

00:08:19.789 --> 00:08:23.210
X and Y are still very much statically typed as type
string.

00:08:23.210 --> 00:08:26.430
What we are giving you is more typing

00:08:26.430 --> 00:08:29.740
with less typing, which is a terrible pun I’m afraid.  

00:08:29.740 --> 00:08:34.010
To summarise section two, 

00:08:34.010 --> 00:08:37.610
the syntax we’ve used for Lambda expressions

00:08:37.610 --> 00:08:40.719
is very straightforward, it’s very simple. 
All you have to remember 

00:08:40.719 --> 00:08:44.149
is that it's like a method and you have
the Lambda 

00:08:44.149 --> 00:08:47.839
operator which is the arrow. The left hand side

00:08:47.839 --> 00:08:52.190
of the Lambda operator represents the parameters
that are being passed to the 

00:08:52.190 --> 00:08:52.720
method

00:08:52.720 --> 00:08:57.660
and the right hand side represents the body.
if you have a single

00:08:57.660 --> 00:09:01.459
parameter the brackets around the
parameter are optional.

00:09:01.459 --> 00:09:04.430
If you have a single statement for the
body of the Lambda

00:09:04.430 --> 00:09:08.680
the braces around that are optional and
if you do put braces around a single

00:09:08.680 --> 00:09:09.279
statement

00:09:09.279 --> 00:09:12.300
you must put a semi-colon on the end of
the line of code. 

00:09:12.300 --> 00:09:15.760
Type inference 

00:09:15.760 --> 00:09:19.360
means that we don't always have to
explicitly state

00:09:19.360 --> 00:09:23.380
the types of the parameters we’re using
in a Lambda expression.

00:09:23.380 --> 00:09:27.070
Frequently the compiler is able to infer
that for us

00:09:27.070 --> 00:09:31.690
based on the type of the Lambda expression
and therefore where it’s being used. 

00:09:31.690 --> 00:09:35.050
Java is very much still a strong,

00:09:35.050 --> 00:09:39.060
statically typed language, so there's no
worries about dynamic typing.

00:09:39.060 --> 00:09:42.480
And that is the end of 

00:09:42.480 --> 00:09:44.120
part two of this lesson.

