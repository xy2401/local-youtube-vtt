WEBVTT
Kind: captions
Language: zh-Hans

00:00:00.790 --> 00:00:06.000
 [音乐] 

00:00:12.740 --> 00:00:15.100
您好，欢迎来到第七节

00:00:15.100 --> 00:00:16.990
第一课

00:00:16.990 --> 00:00:19.910
在本节中，我们将研究一些新的方法

00:00:19.910 --> 00:00:21.210
在JDK 8中添加

00:00:21.210 --> 00:00:24.449
到标准的类库， 

00:00:24.449 --> 00:00:28.910
因为参数在函数式接口上， 

00:00:28.910 --> 00:00:33.309
您可以使用Lambda表达式来表达行为

00:00:33.309 --> 00:00:39.210
这些方法想要的。这些中的第一个

00:00:39.210 --> 00:00:42.730
在Iterable界面中。这意味着

00:00:42.730 --> 00:00:46.350
如果您现在有一个实现Iterable接口的类

00:00:46.350 --> 00:00:49.430
它将有一个名为forEach的新方法

00:00:49.430 --> 00:00:52.570
适用于它和forEach方法

00:00:52.570 --> 00:00:58.300
将消费者作为参数。从这里的例子中我们可以看到

00:00:58.300 --> 00:01:02.640
现在我们可以做的是myList，它是字符串类型的列表， 

00:01:02.640 --> 00:01:05.660
然后我们可以说每个元素

00:01:05.660 --> 00:01:08.970
在该集合中，我们要打印出其价值。 

00:01:08.970 --> 00:01:13.869
不必为此自己构造一个显式循环

00:01:13.869 --> 00:01:16.899
在集合上并具有for循环的主体

00:01:16.899 --> 00:01:20.780
做我们想做的事，我们可以使用Lambda表达式

00:01:20.780 --> 00:01:24.680
说说我们想在每个地方做什么

00:01:24.680 --> 00:01:28.310
集合中元素的迭代。 

00:01:28.310 --> 00:01:32.290
在这里，我们只想打印出行，打印出

00:01:32.290 --> 00:01:35.740
集合的元素，同样，我们可以在

00:01:35.740 --> 00:01:39.600
使用等效方法参考的简化形式。 

00:01:39.600 --> 00:01:43.630
集合接口

00:01:43.630 --> 00:01:46.649
已经添加了非常有用的新方法， 

00:01:46.649 --> 00:01:49.899
分别是removeif和removeif 

00:01:49.899 --> 00:01:54.430
以predicate为参数。这允许我们做什么

00:01:54.430 --> 00:01:58.439
用于特定集合，在这种情况下，示例是

00:01:58.439 --> 00:02:01.899
类型字符串列表，我们可以指定

00:02:01.899 --> 00:02:05.189
我们要删除的集合元素

00:02:05.189 --> 00:02:09.750
是否使用predicate返回true或false。 

00:02:09.750 --> 00:02:13.640
在该示例中，我要删除的是

00:02:13.640 --> 00:02:18.250
此字符串列表中的任何元素，其长度为零个字符。 

00:02:18.250 --> 00:02:21.540
很简单，我们只说哪里

00:02:21.540 --> 00:02:24.360
字符串的长度为零，则

00:02:24.360 --> 00:02:28.810
这些将被删除。同样，这是

00:02:28.810 --> 00:02:33.150
消除了为实现显式循环而要做的所有额外工作

00:02:33.150 --> 00:02:36.670
我们必须亲自检查集合的地方，测试是否

00:02:36.670 --> 00:02:40.280
字符串的长度为零，然后将其从集合中显式删除

00:02:40.280 --> 00:02:46.050
所有这些现在都可以通过一行代码实现。 

00:02:46.050 --> 00:02:49.740
列表接口，显然是它的子类

00:02:49.740 --> 00:02:52.980
集合接口，也有了新的

00:02:52.980 --> 00:02:56.459
方法添加到它。在这种情况下，它称为replaceAll 

00:02:56.459 --> 00:02:59.720
这需要一个UnaryOperator。 

00:02:59.720 --> 00:03:03.440
如果您还记得我们之前讨论的课程的较早部分

00:03:03.440 --> 00:03:07.320
中的接口

00:03:07.320 --> 00:03:12.430
 java.util.function包。同样，我们在这里可以做的就是

00:03:12.430 --> 00:03:13.950
字符串列表

00:03:13.950 --> 00:03:18.130
而我们要做的是替换所有内容

00:03:18.130 --> 00:03:21.880
那些字符串的集合

00:03:21.880 --> 00:03:25.550
用某种方式转换的字符串

00:03:25.550 --> 00:03:28.700
使用该UnaryOperator。在这种情况下，我们

00:03:28.700 --> 00:03:32.510
想要将所有字符串都转换为大写，并且

00:03:32.510 --> 00:03:36.320
我们可以用Lambda表达式做到这一点，我们说s是参数

00:03:36.320 --> 00:03:39.510
 s.toUpperCase是表达式的主体。 

00:03:39.510 --> 00:03:42.820
我们可以使用等效方法参考

00:03:42.820 --> 00:03:46.400
如果您还记得本课程前面的内容，则使用

00:03:46.400 --> 00:03:49.790
参数s作为我们的类， 

00:03:49.790 --> 00:03:52.860
字符串，我们使用UpperCase 

00:03:52.860 --> 00:03:55.959
作为方法的名称。那将给我们等效

00:03:55.959 --> 00:04:00.420
上面的代码。 

00:04:00.420 --> 00:04:04.160
列表接口还添加了另一种方法，即排序

00:04:04.160 --> 00:04:08.260
这真的是一种替代

00:04:08.260 --> 00:04:12.130
对于现有方法Collections.sort， 

00:04:12.130 --> 00:04:16.030
您可以在其中传递列表和比较器，但是这种方式

00:04:16.030 --> 00:04:19.769
它内置在列表界面中，因此您可以直接调用sort 

00:04:19.769 --> 00:04:24.890
在您拥有的列表上，而不必在集合上调用静态方法

00:04:24.890 --> 00:04:30.880
实用程序类。现在，再次使用我的字符串列表，我们可以简单地调用sort 

00:04:30.880 --> 00:04:35.770
我们可以传入一个比较器我们已经看到了以前使用的比较器。 

00:04:35.770 --> 00:04:39.190
我们传入两个参数x和y 

00:04:39.190 --> 00:04:42.430
并记住编译器可以使用类型推断。 

00:04:42.430 --> 00:04:47.050
它知道字符串类型的列表，所以它知道比较器将是类型

00:04:47.050 --> 00:04:47.620
串， 

00:04:47.620 --> 00:04:51.520
因此，作为比较器参数的x和y必须为string类型。 

00:04:51.520 --> 00:04:55.450
比较器的主体，比较方法

00:04:55.450 --> 00:04:59.230
就是简单地返回字符串之间的长度差， 

00:04:59.230 --> 00:05:03.580
这意味着我们实际上要做的是按长度对字符串进行排序。 

00:05:03.580 --> 00:05:07.170
的

00:05:07.170 --> 00:05:10.930
记录器类。这是一个很普遍的问题

00:05:10.930 --> 00:05:15.130
我们看到了日志记录，也没有其他类似的情况， 

00:05:15.130 --> 00:05:15.560
但

00:05:15.560 --> 00:05:18.680
日志记录就是一个很好的例子。我在做什么

00:05:18.680 --> 00:05:22.320
我是否要记录某种类型的消息

00:05:22.320 --> 00:05:26.180
而需要生成该消息的方式就是使用这个

00:05:26.180 --> 00:05:30.630
方法称为createComplexMessage。我正在使用

00:05:30.630 --> 00:05:33.790
日志中最好的消息

00:05:33.790 --> 00:05:37.590
 API表示我只想记录这些消息

00:05:37.590 --> 00:05:41.130
当日志记录级别设置为最佳时

00:05:41.130 --> 00:05:45.770
水平。很好，但是我们有问题

00:05:45.770 --> 00:05:49.290
是必须调用createComplexMessage 

00:05:49.290 --> 00:05:52.800
每次，即使不需要。 

00:05:52.800 --> 00:05:56.070
如果我将日志记录级别设置为info或warning 

00:05:56.070 --> 00:06:01.510
然后，当创建复杂消息并将其传递给该方法时

00:06:01.510 --> 00:06:05.650
最好的方法会说啊，水平未设置为

00:06:05.650 --> 00:06:10.100
最好，因此我们不需要使用此消息，因此我们将其忽略。但

00:06:10.100 --> 00:06:12.440
 createComplexMessage已被调用。 

00:06:12.440 --> 00:06:17.160
如果为了论证而花费五秒钟来创建复杂的消息， 

00:06:17.160 --> 00:06:22.760
然后每次我们称此为延迟五秒，无论

00:06:22.760 --> 00:06:27.639
是否使用它。这在某种程度上就像海森堡的

00:06:27.639 --> 00:06:29.669
不确定性原理适用于软件。 

00:06:29.669 --> 00:06:33.060
现在海森堡的不确定性原理来自量子力学和

00:06:33.060 --> 00:06:37.270
说观察事物的行为会改变您正在观察的事物

00:06:37.270 --> 00:06:41.510
但就我们的采伐而言，它具有相同的效果

00:06:41.510 --> 00:06:42.180
消息。 

00:06:42.180 --> 00:06:47.630
为了使这更容易并避免出现这些问题

00:06:47.630 --> 00:06:51.680
在logger类中，我们现在添加了每个版本的新版本

00:06:51.680 --> 00:06:54.950
记录API，所以最好的

00:06:54.950 --> 00:06:58.520
警告，信息等，这些信息会带给供应商

00:06:58.520 --> 00:07:02.470
作为争论。再说一遍，记得供应商

00:07:02.470 --> 00:07:06.180
是一个函数式接口，具有一种抽象方法

00:07:06.180 --> 00:07:09.520
我们可以使用Lambda表达式来表示。 

00:07:09.520 --> 00:07:12.690
这意味着通过更改我们的代码

00:07:12.690 --> 00:07:15.919
我们可以对性能产生很大的影响

00:07:15.919 --> 00:07:19.450
现在，我们正在做的只是改变

00:07:19.450 --> 00:07:23.960
呼吁最好。而不是传递createComplexMessage， 

00:07:23.960 --> 00:07:27.770
我们传递一个Lambda表达式，即

00:07:27.770 --> 00:07:30.960
供应商。在这种情况下，不需要任何参数， 

00:07:30.960 --> 00:07:34.289
因此左侧是空括号。右边是

00:07:34.289 --> 00:07:38.330
创建我们的复杂信息。现在要发生的是我们

00:07:38.330 --> 00:07:41.910
最好通过这个Lambda表达式

00:07:41.910 --> 00:07:44.940
然后只有最需要的时候才可以

00:07:44.940 --> 00:07:48.590
使用此供应商并调用适当的方法

00:07:48.590 --> 00:07:53.030
然后创建复杂的消息。很棒的是

00:07:53.030 --> 00:07:56.460
我们现在正在做的是传递行为

00:07:56.460 --> 00:08:01.530
而不是价值。我们正在传递说明

00:08:01.530 --> 00:08:05.340
如何创建消息，而不是实际消息。 

00:08:05.340 --> 00:08:09.520
这样，如果我们想忽略它，而不是忽略消息

00:08:09.520 --> 00:08:13.520
这是经过很长的过程创建的

00:08:13.520 --> 00:08:16.820
只是忽略了描述，这完全不需要时间。 

00:08:16.820 --> 00:08:19.110
好多了。 

00:08:19.110 --> 00:08:22.790
如果您有自己的代码，也可以在自己的代码中使用

00:08:22.790 --> 00:08:26.330
你不知道是否有条件的情况

00:08:26.330 --> 00:08:30.400
传递的值将不被使用。通过一种方式

00:08:30.400 --> 00:08:36.340
如何构造该消息可能会更有效率。总结部分

00:08:36.340 --> 00:08:36.830
那七

00:08:36.830 --> 00:08:40.560
 JDK 8中有许多新方法

00:08:40.560 --> 00:08:44.640
这使您能够使用Lambda表达式

00:08:44.640 --> 00:08:48.700
作为参数，其中大多数基于

00:08:48.700 --> 00:08:52.900
避免进行很多额外的循环构造， 

00:08:52.900 --> 00:08:56.150
尽管并非总是如此，因为如果您想到

00:08:56.150 --> 00:08:59.640
记录API，这允许我们做什么

00:08:59.640 --> 00:09:03.390
是为了消除我们获得的一些间接性能

00:09:03.390 --> 00:09:06.840
通过始终传递值。通过传递

00:09:06.840 --> 00:09:10.380
用来描述我们如何创建这些消息的行为或

00:09:10.380 --> 00:09:14.610
我们想要做些什么，这确实可以帮助我们改善

00:09:14.610 --> 00:09:19.740
我们应用程序的性能。 

00:09:19.740 --> 00:09:24.490
第一节课到此结束，我现在想做的是

00:09:24.490 --> 00:09:27.150
花一些时间总结一下我们所涵盖的内容

00:09:27.150 --> 00:09:33.710
在本课程中以及您到目前为止所学到的知识。我们已经讨论过Lambda 

00:09:33.710 --> 00:09:34.600
表达

00:09:34.600 --> 00:09:38.200
和我真正想传达的关键

00:09:38.200 --> 00:09:42.060
本课的内容是Lambda表达式为您提供了一个简单的方法

00:09:42.060 --> 00:09:42.760
方式

00:09:42.760 --> 00:09:47.340
将行为作为参数传递。而不是总是过去

00:09:47.340 --> 00:09:51.180
我们可以传递有关如何创建事物的描述的值

00:09:51.180 --> 00:09:56.060
就该参数而言。什么时候可以使用Lambda 

00:09:56.060 --> 00:09:59.380
表达式是我们拥有函数性接口的任何地方。 

00:09:59.380 --> 00:10:02.630
请记住，一个函数式接口只有一个

00:10:02.630 --> 00:10:06.600
抽象方法和Lambda表达式， 

00:10:06.600 --> 00:10:10.690
尽管它与类无关，但提供了

00:10:10.690 --> 00:10:14.410
抽象方法的实现是

00:10:14.410 --> 00:10:18.480
包含在该函数式接口中。我们有

00:10:18.480 --> 00:10:22.430
某些类型的Lambda表达式的简写形式，其中

00:10:22.430 --> 00:10:25.830
就Lambda主体而言，我们使用的是一种方法

00:10:25.830 --> 00:10:29.490
然后我们可以使用方法引用。如果我们使用构造函数

00:10:29.490 --> 00:10:31.630
作为我们Lambda中的一个声明

00:10:31.630 --> 00:10:35.100
表达式我们可以使用构造函数引用。 

00:10:35.100 --> 00:10:39.130
正如我们刚刚看到的，有许多有用的新方法

00:10:39.130 --> 00:10:42.620
在可以使用Lambda的JDK 8中，这些是

00:10:42.620 --> 00:10:45.690
在流API之外，我们将介绍

00:10:45.690 --> 00:10:49.590
在下一课中。到此为止

00:10:49.590 --> 00:10:50.520
第一堂课

