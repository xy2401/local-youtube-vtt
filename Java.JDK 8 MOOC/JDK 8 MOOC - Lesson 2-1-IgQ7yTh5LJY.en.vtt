WEBVTT
Kind: captions
Language: en

00:00:00.790 --> 00:00:03.340
[music]

00:00:13.679 --> 00:00:15.599
Hello and welcome to lesson

00:00:15.599 --> 00:00:18.860
two of the massive open and online course

00:00:18.860 --> 00:00:23.070
on JDK 8 functional programming. The

00:00:23.070 --> 00:00:26.820
idea of this lesson is to give you an
introduction to the streams

00:00:26.820 --> 00:00:31.300
API. Again my name is Simon Ritter,

00:00:31.300 --> 00:00:38.750
Java Technology Evangelist. In terms
that the agenda for this lesson,

00:00:38.750 --> 00:00:43.000
we're going to start with an
introduction to functional programming

00:00:43.000 --> 00:00:43.920
concepts

00:00:43.920 --> 00:00:48.500
and it's quite important to understand
some the significant differences

00:00:48.500 --> 00:00:51.839
between how we're used to programming Java

00:00:51.839 --> 00:00:57.229
for JDK 8 and how we need to think about
things from a functional perspective

00:00:57.229 --> 00:01:01.220
when we start using the streams API with
lambda expressions.

00:01:01.220 --> 00:01:05.650
We'll move from there into what we actually
mean by

00:01:05.650 --> 00:01:09.590
a stream and we'll look at the elements of 
the stream API

00:01:09.590 --> 00:01:13.010
in terms of how you put it together how
you use it.

00:01:13.010 --> 00:01:16.100
We'll then talk about some

00:01:16.100 --> 00:01:19.630
differences between streams when we're
dealing with

00:01:19.630 --> 00:01:24.609
streams of objects and when we're dealing with
streams of primitive types.

00:01:24.609 --> 00:01:27.840
This is one of the things about Java is
it's not

00:01:27.840 --> 00:01:31.759
fully object-oriented, it doesn't have
everything represented as an object.

00:01:31.759 --> 00:01:35.770
Sometimes we do need to think about
primitive types and for streams there are

00:01:35.770 --> 00:01:38.090
certain issues we need to be aware
of.

00:01:38.090 --> 00:01:43.030
Then we're going to talk about where you can
get a stream source from

00:01:43.030 --> 00:01:47.810
in JDK 8. There are numerous places where
you can create a stream source from

00:01:47.810 --> 00:01:51.679
and we'll talk about those as we go
through that part of the lesson.

00:01:51.679 --> 00:01:55.490
Then we'll talk about the stream
interface itself

00:01:55.490 --> 00:01:59.069
and what are called intermediate operations.
Don't worry about what those are now,

00:01:59.069 --> 00:02:00.219
we'll talk about those

00:02:00.219 --> 00:02:04.200
as we go through the elements of a stream.
The same with the next part, which is

00:02:04.200 --> 00:02:05.439
terminal operations,

00:02:05.439 --> 00:02:08.890
because again we'll talk about those when we talk about the elements of a stream.

00:02:08.890 --> 00:02:12.060
The last part of this lesson is

00:02:12.060 --> 00:02:15.440
about another class called the Optional
class

00:02:15.440 --> 00:02:18.760
and that has a lot of impact on

00:02:18.760 --> 00:02:22.770
certain aspects how we use streams but it's
also very useful

00:02:22.770 --> 00:02:24.459
in terms of other

00:02:24.459 --> 00:02:27.930
kinds of code and we'll explain what you can
actually use

00:02:27.930 --> 00:02:31.189
optionals for and that the different ways that they
can be applied

00:02:31.189 --> 00:02:36.319
to different situations.

00:02:36.319 --> 00:02:40.170
Letâ€™s start then with part 1 of lesson 2, which is about

00:02:40.170 --> 00:02:44.639
functional programming concepts. Now,

00:02:44.639 --> 00:02:48.200
Java is an imperative programming
language

00:02:48.200 --> 00:02:51.450
and, if we look at the way that we use
Java,

00:02:51.450 --> 00:02:54.939
specifically in terms all variables,

00:02:54.939 --> 00:02:59.650
names and values we need to be aware of
certain things.

00:02:59.650 --> 00:03:03.200
In Java we use a variable

00:03:03.200 --> 00:03:07.750
to provide an association. What this does is it provides an association between

00:03:07.750 --> 00:03:12.019
a name that we can recognize and we can use in
our code

00:03:12.019 --> 00:03:16.590
and value that's stored in association
with that variable name.

00:03:16.590 --> 00:03:19.870
What we then do is

00:03:19.870 --> 00:03:23.329
by associating values with variables

00:03:23.329 --> 00:03:26.849
we can use those in a sequence of
commands.

00:03:26.849 --> 00:03:31.650
Effectively, although you might not realise 
it when you look at your code

00:03:31.650 --> 00:03:35.959
because you see loops, you see
conditionals statements like if

00:03:35.959 --> 00:03:39.419
else and so on, what you're actually doing

00:03:39.419 --> 00:03:42.739
is creating a sequence of commands,

00:03:42.739 --> 00:03:46.540
which are assignments. You change

00:03:46.540 --> 00:03:51.689
a variable's value based on something.
The way we would do that is with the

00:03:51.689 --> 00:03:55.310
equal statement, so we say variable name
equals expression.

00:03:55.310 --> 00:03:59.269
The expression could be something as simple
as X=X+10,

00:03:59.269 --> 00:04:03.139
so we are adding 10 to X.

00:04:03.139 --> 00:04:06.519
X=X++, that wouldn't be a very good example

00:04:06.519 --> 00:04:10.579
and X++ is better example
because that's just incrementing the

00:04:10.579 --> 00:04:13.930
the variable, which is equivalent to X=X+1.

00:04:13.930 --> 00:04:17.870
X equals the result of calling

00:04:17.870 --> 00:04:22.070
process a value on X, so we can call a
method

00:04:22.070 --> 00:04:25.220
and that's another form of

00:04:25.220 --> 00:04:28.389
expressions. Expression can refer to other variables,

00:04:28.389 --> 00:04:32.150
so if I want to process X , I can also pass y

00:04:32.150 --> 00:04:34.000
as another part of the way that I want to

00:04:34.000 --> 00:04:37.699
process it. There's numerous different ways
we can do that,

00:04:37.699 --> 00:04:41.889
but it allows us to have complete
flexibility over how we use

00:04:41.889 --> 00:04:45.599
other variables. What we can do with that
is we can actually

00:04:45.599 --> 00:04:50.490
use the value based on changes that have
been made in the past.

00:04:50.490 --> 00:04:54.340
By the sequence of commands we can
gradually change different values

00:04:54.340 --> 00:04:57.830
and when we get to a certain point we
then have

00:04:57.830 --> 00:05:02.669
new value based on what's happened
previously. so the values that we got

00:05:02.669 --> 00:05:05.669
can, in effect be passed from command to command

00:05:05.669 --> 00:05:08.970
by using variables to represent them.

00:05:08.970 --> 00:05:12.830
If we want to repeat particular
command

00:05:12.830 --> 00:05:16.500
we can do that either explicitly by
simply saying

00:05:16.500 --> 00:05:20.330
X=X+10, the next line X=X+10, the next line X=X+10 and so on.

00:05:20.330 --> 00:05:23.410
Or we can use a loop, we can use a for loop,

00:05:23.410 --> 00:05:26.900
a while loop, we can use a do loop and we can repeat

00:05:26.900 --> 00:05:30.020
certain commands based on some kind

00:05:30.020 --> 00:05:34.099
of evaluation of an expression to determine
when we want to finish that

00:05:34.099 --> 00:05:38.820
loop. From a functional perspective

00:05:38.820 --> 00:05:42.830
this is the way that we don't do things at the
moment in Java until JDK 8.

00:05:42.830 --> 00:05:45.889
What we do is we base

00:05:45.889 --> 00:05:50.909
names and values in terms of our code on
structured function calls

00:05:50.909 --> 00:05:54.590
and if you think back to the very first
example that I used when talking about

00:05:54.590 --> 00:05:56.610
why we needed lambda expressions

00:05:56.610 --> 00:06:00.070
I said that we could rewrite our
explicit loop as

00:06:00.070 --> 00:06:04.219
a sequence of method calls that were
chained together and that's effectively

00:06:04.219 --> 00:06:05.969
what we do with functional programming:

00:06:05.969 --> 00:06:09.669
we take a function and then we call
another function on the results of that,

00:06:09.669 --> 00:06:13.669
we call another functional on the result of that and so
on. We chain together

00:06:13.669 --> 00:06:14.669
these functions

00:06:14.669 --> 00:06:19.469
to give us a set of results. So each function
receives the values

00:06:19.469 --> 00:06:22.909
from the previous function as input and
then when it's

00:06:22.909 --> 00:06:26.490
generated results it passes them back to

00:06:26.490 --> 00:06:29.630
the calling function and ultimately it
passes

00:06:29.630 --> 00:06:33.139
back to the assignment you want for the

00:06:33.139 --> 00:06:39.699
result. In terms of names that we
use for functional programming

00:06:39.699 --> 00:06:43.000
it's different to Java, it's different to
imperative programming

00:06:43.000 --> 00:06:46.760
because we only use names for the formal
parameters of 
109
00:06:46,760 --&gt; 00:06:50,470
our functions, and we can only assign

00:06:50.470 --> 00:06:54.270
that value once. So we assign the value
passing as a parameter

00:06:54.270 --> 00:06:57.540
and that's it; it's not changed, its not
modified.

00:06:57.540 --> 00:07:01.820
The variable is set once, its value is set once

00:07:01.820 --> 00:07:06.040
and that's it. There is no concept of the
command

00:07:06.040 --> 00:07:09.810
in functional programming as we are used
to imperative code.

00:07:09.810 --> 00:07:12.979
There is no idea of assigning
values

00:07:12.979 --> 00:07:16.010
because you can change values simply
executing a

00:07:16.010 --> 00:07:20.380
function and repeatedly calling that
functional or other functions

00:07:20.380 --> 00:07:25.120
from that function. There is no concept of
repetition

00:07:25.120 --> 00:07:28.479
in the sense that we have in imperative,

00:07:28.479 --> 00:07:32.370
Java code because we don't have a for loop,
we don't have a while loop; we

00:07:32.370 --> 00:07:38.320
don't have do loop. If we look at the
difference between names and values

00:07:38.320 --> 00:07:42.110
when it comes to imperative code verses functional code.
123
00:07:42,110 --&gt; 00:07:47,090
In imperative code the same name can be
associated with different values;

00:07:47.090 --> 00:07:50.830
that's the whole idea of a variable. In functional code

00:07:50.830 --> 00:07:54.130
a name is only at ever associated

00:07:54.130 --> 00:07:59.450
with one value. Execution order

00:07:59.450 --> 00:08:03.389
This is also very important from the
perspective

00:08:03.389 --> 00:08:06.510
of imperative versus functional.

00:08:06.510 --> 00:08:10.139
If we look at imperative code and how we
do things in

00:08:10.139 --> 00:08:13.330
in Java before JDK 8 we

00:08:13.330 --> 00:08:17.760
associate values with variable names and
those to be changed.

00:08:17.760 --> 00:08:21.770
The order that we execute commands in

00:08:21.770 --> 00:08:24.860
forms a contract this again goes back to

00:08:24.860 --> 00:08:28.590
the very first example used in lesson one.
By having a for loop

00:08:28.590 --> 00:08:32.110
where we iterate over a collection, the
iteration

00:08:32.110 --> 00:08:36.430
of that collection is in a defined order
based on how the iterator works.

00:08:36.430 --> 00:08:39.650
So that forms a contract with the
compiler

00:08:39.650 --> 00:08:43.649
met with the runtime about how that data
is processed.

00:08:43.649 --> 00:08:48.990
We can change that without potentially,
changing the behavior the application

00:08:48.990 --> 00:08:52.839
and unless we know that we're

00:08:52.839 --> 00:08:56.639
in a situation which could break an
application code.

00:08:56.639 --> 00:09:00.499
so the compiler can't reorder things
because it can't tell

00:09:00.499 --> 00:09:03.870
whether that would actually have an
impact on the

00:09:03.870 --> 00:09:07.399
results that generated. Functional code,

00:09:07.399 --> 00:09:11.009
remember, now we don't have names

00:09:11.009 --> 00:09:15.470
associated with values that can be
changed, so in this case

00:09:15.470 --> 00:09:18.779
the order of the execution does not impact
results.

00:09:18.779 --> 00:09:23.620
We call a method from another method, we
pass a function to another function

00:09:23.620 --> 00:09:26.689
how that function actually processes
doesn't matter.

00:09:26.689 --> 00:09:30.499
The results we get back will be from
that function and the

00:09:30.499 --> 00:09:33.899
order in which it happens doesn't matter.
So there's no

00:09:33.899 --> 00:09:37.980
fixed execution order in terms what
happens underneath

00:09:37.980 --> 00:09:42.309
in the way that function is processed in
way that method is processed.

00:09:42.309 --> 00:09:46.249
Which leads us to repetition.

00:09:46.249 --> 00:09:50.430
In our Java code, in imperative code,

00:09:50.430 --> 00:09:53.889
again we have values which are
associated with names

00:09:53.889 --> 00:09:57.379
and they can be changed by commands. So we
can

00:09:57.379 --> 00:10:00.480
repeat those commands using our

00:10:00.480 --> 00:10:06.339
loop ideas of for loops, do loops and we can repeatedly change

00:10:06.339 --> 00:10:10.110
variable. If we loop from X equals 0 to X equals 10

00:10:10.110 --> 00:10:13.189
we're repeatedly changing X between 0 and 10.

00:10:13.189 --> 00:10:17.370
So the new value is associated with the
same name

00:10:17.370 --> 00:10:22.480
through a loop through repetition. In
functional

00:10:22.480 --> 00:10:26.029
programming the values we have
associated with names

00:10:26.029 --> 00:10:30.240
may not be changed, so again, this goes back to what we said earlier.

00:10:30.240 --> 00:10:33.629
Now repeated changes are achieved by nested

00:10:33.629 --> 00:10:37.839
function calls so if we want to call the
same function three times we call back

00:10:37.839 --> 00:10:39.870
function from the first function

00:10:39.870 --> 00:10:44.709
then we call the function again so that provides us with

00:10:44.709 --> 00:10:48.679
a way of doing repetition but not in a
controlled way

00:10:48.679 --> 00:10:51.000
that we would have loop where you can
specify how many

00:10:51.000 --> 00:10:55.410
times it gets done. So in this case with
functional programming

00:10:55.410 --> 00:10:59.880
what we're actually doing to associate
new values

00:10:59.880 --> 00:11:04.380
with the same name is through recursion.
we're using recursion

00:11:04.380 --> 00:11:08.910
to provide this ability to modify things
and pass the state back.

00:11:08.910 --> 00:11:12.230
We'll talk more about this in lesson
3,

00:11:12.230 --> 00:11:15.800
when we look at some examples of
how to approach solving

00:11:15.800 --> 00:11:20.100
specific types problems and why you would need
to think in a more recursive way.

00:11:20.100 --> 00:11:23.750
Functions as values

00:11:23.750 --> 00:11:27.870
This is really the reason why we had to
include

00:11:27.870 --> 00:11:30.960
lambda expressions in JDK 8 because

00:11:30.960 --> 00:11:35.700
lambda expressions as we saw in lesson 1,
allows to pass

00:11:35.700 --> 00:11:39.440
behaviour as in the same way as we do

00:11:39.440 --> 00:11:42.590
a value. In effect,

00:11:42.590 --> 00:11:46.740
because functional programming allows a
function to be treated as a value,

00:11:46.740 --> 00:11:50.920
which means that we can pass as a
parameter to a method

00:11:50.920 --> 00:11:55.480
or function then we need this ability in
Java.

00:11:55.480 --> 00:11:59.250
So we could do it with anonymous
inner class, but the syntax was too

00:11:59.250 --> 00:12:00.120
complicated,

00:12:00.120 --> 00:12:03.810
the syntax was too verbose, we
needed a simple way

00:12:03.810 --> 00:12:07.580
doing it, and that's what lambda expressions 
give us. Now we have the ability

00:12:07.580 --> 00:12:08.250
to

00:12:08.250 --> 00:12:11.250
pass behaviour as a parameter

00:12:11.250 --> 00:12:14.339
and therefore we can take a more
functional approach

00:12:14.339 --> 00:12:17.540
because we can use the lambda expression
to

00:12:17.540 --> 00:12:20.820
to tell the method how we want to do
something

00:12:20.820 --> 00:12:25.430
by using that lambda expression to
represent the implementation.

00:12:25.430 --> 00:12:28.960
To summarise

00:12:28.960 --> 00:12:32.920
section 1 of lesson 2,  if you
compare imperative

00:12:32.920 --> 00:12:36.570
code verses functional their approaches

00:12:36.570 --> 00:12:40.190
are very different and we need to be
aware that

00:12:40.190 --> 00:12:44.140
when we start using the streams API, when we
start solving

00:12:44.140 --> 00:12:48.450
the kind of problems we can solve. If we
think imperatively

00:12:48.450 --> 00:12:52.000
then what we're doing is associating
values

00:12:52.000 --> 00:12:55.550
with names which to be changed. so that's
our variables and

00:12:55.550 --> 00:12:58.630
we can change the value of a variable

00:12:58.630 --> 00:13:02.390
any point in our code so long as it's not final.

00:13:02.390 --> 00:13:05.900
In terms of the order of execution what
we're really doing

00:13:05.900 --> 00:13:09.010
with imperative code is defining the
contract with

00:13:09.010 --> 00:13:12.540
the compiler and the runtime so that the
order of execution

00:13:12.540 --> 00:13:16.500
is important. If we want to do
repetition

00:13:16.500 --> 00:13:19.670
in imperative code then it is explicit.

00:13:19.670 --> 00:13:22.779
We use an external loop where we define

00:13:22.779 --> 00:13:26.180
a for loop with a particular
construct, we have a while loop, we have a

00:13:26.180 --> 00:13:26.720
do loop.

00:13:26.720 --> 00:13:30.220
These all explicit and we

00:13:30.220 --> 00:13:33.520
state our code how they are handled
with

00:13:33.520 --> 00:13:37.790
functional programming the values
associated with names

00:13:37.790 --> 00:13:41.220
used as parameter. Their value is set once

00:13:41.220 --> 00:13:45.260
and cannot be changed; that's a
significant difference to imperative.

00:13:45.260 --> 00:13:49.279
How the function actually processes

00:13:49.279 --> 00:13:52.790
its information that the parameters in the
data

00:13:52.790 --> 00:13:56.680
the order of execution is not
defined so

00:13:56.680 --> 00:13:59.890
this is where the ability to apply
parallel

00:13:59.890 --> 00:14:03.130
processing to these things becomes much
simpler because

00:14:03.130 --> 00:14:06.420
we don't have to worry about the
non-deterministic behavior

00:14:06.420 --> 00:14:10.670
of code when you start using multiple
threads and breaking up the job in two

00:14:10.670 --> 00:14:11.270
different

00:14:11.270 --> 00:14:14.640
tasks having those tasks potentially

00:14:14.640 --> 00:14:19.170
processed in a different order. The way
that we do repetition

00:14:19.170 --> 00:14:22.180
through functional programming is using

00:14:22.180 --> 00:14:25.270
recursion. You need to think when you're
dealing with

00:14:25.270 --> 00:14:28.300
functional programming about

00:14:28.300 --> 00:14:33.020
how you do things recursively rather
than with an explicit loop.

00:14:33.020 --> 00:14:36.440
And that is the end of section 1

00:14:36.440 --> 00:14:37.330
of lesson 2.

