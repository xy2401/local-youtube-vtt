WEBVTT
Kind: captions
Language: en

00:00:00.790 --> 00:00:02.810
[music]

00:00:13.730 --> 00:00:15.780
Hello and welcome to section 3

00:00:15.780 --> 00:00:20.070
of lesson 2. In this part of the course
we're going to talk about

00:00:20.070 --> 00:00:24.349
how you can work with streams of
objects and also streams

00:00:24.349 --> 00:00:29.219
primitive types in Java.

00:00:29.219 --> 00:00:33.160
If we look at the Java language it's not

00:00:33.160 --> 00:00:36.440
truly object-oriented. In order to

00:00:36.440 --> 00:00:39.780
improve performance, rather than
treating absolutely everything

00:00:39.780 --> 00:00:43.550
in Java as an object, we have primitives
types.

00:00:43.550 --> 00:00:46.900
so they're bytes, shorts, ints, longs,

00:00:46.900 --> 00:00:50.250
doubles, floats, and Chars that we can
use and

00:00:50.250 --> 00:00:53.570
there's also boolean as well, that we can
use

00:00:53.570 --> 00:00:57.850
to represent primitive values and

00:00:57.850 --> 00:01:02.660
if we want to use those primitives values
with certain type of classes,

00:01:02.660 --> 00:01:07.140
particularly collections, then we do need
to convert them into

00:01:07.140 --> 00:01:10.509
objects rather than the primitive
representation.

00:01:10.509 --> 00:01:15.500
So we have the equivalent classes, the
wrapper classes as they're called,

00:01:15.500 --> 00:01:20.190
for each of those primitive types. So
there is a Byte class, a Short class, an 

00:01:20.190 --> 00:01:21.479
Integer class and so on.

00:01:21.479 --> 00:01:27.090
In terms of how we use that we can
explicitly create

00:01:27.090 --> 00:01:31.350
objects at those types in our code and
we can explicitly retrieve the values

00:01:31.350 --> 00:01:32.090
from those

00:01:32.090 --> 00:01:35.680
objects if we want to, but

00:01:35.680 --> 00:01:39.909
while ago there was a some improvements
made around Java

00:01:39.909 --> 00:01:43.479
so we added what's called auto boxing and
unboxing.

00:01:43.479 --> 00:01:46.549
This means that if the compiler can
determine that

00:01:46.549 --> 00:01:49.560
what you're actually doing is using
primitive value

00:01:49.560 --> 00:01:52.580
where an object representation needs to
be used

00:01:52.580 --> 00:01:56.180
then it will create an object instance
for you

00:01:56.180 --> 00:02:00.520
of that wrapper class passing in the value as
the parameter to the constructor.

00:02:00.520 --> 00:02:03.570
If it can tell that where you need
something

00:02:03.570 --> 00:02:06.920
as a primitive value and you actually have an
object representation it will

00:02:06.920 --> 00:02:07.770
automatically

00:02:07.770 --> 00:02:12.989
unbox it and extract the value for you.
This leads us to

00:02:12.989 --> 00:02:16.879
needing to understand somethings about
how streams work.

00:02:16.879 --> 00:02:20.530
Because if we had a stream,

00:02:20.530 --> 00:02:24.909
by default everything is an object. So we
have a stream that

00:02:24.909 --> 00:02:28.629
we create from a source, which will be a
stream of objects, let's say from the

00:02:28.629 --> 00:02:29.200
collection.

00:02:29.200 --> 00:02:32.260
So in this example here what we're doing
is we're

00:02:32.260 --> 00:02:37.150
taking collection of students and we
create a stream. We then pass that into

00:02:37.150 --> 00:02:41.010
filter to look to see whether the
graduation year is 2015

00:02:41.010 --> 00:02:45.010
and then we pass that collection of
objects

00:02:45.010 --> 00:02:48.440
into map. At that point

00:02:48.440 --> 00:02:51.950
what we're going do is we're going to
retrieve the score

00:02:51.950 --> 00:02:55.940
of that student, but here we have a
little bit of an issue because

00:02:55.940 --> 00:03:00.650
the score that we're retrieving from
the student is actually going to be

00:03:00.650 --> 00:03:04.569
an int, so it's a primitive value. getScore

00:03:04.569 --> 00:03:08.239
is defined signature as returning an int, not an
Integer

00:03:08.239 --> 00:03:11.260
wrapper object. So it returns an int.

00:03:11.260 --> 00:03:15.560
That gives usa little bit of a problem because when
we do the map

00:03:15.560 --> 00:03:19.370
what's going to happen is that we return an
int

00:03:19.370 --> 00:03:22.879
from getScore and in order for that to
become stream of

00:03:22.879 --> 00:03:26.609
objects the stream then has to 

00:03:26.609 --> 00:03:29.620
auto-box those ints into Integer

00:03:29.620 --> 00:03:35.500
objects to create a stream of Integers. When we pass that stream of Integer

00:03:35.500 --> 00:03:39.459
objects to max, max actually needs to look
at the values,

00:03:39.459 --> 00:03:42.569
so max has then got to do the reverse. It's got to

00:03:42.569 --> 00:03:45.810
unbox each of those Integer objects to get
at the 

00:03:45.810 --> 00:03:50.069
value and that's an awful lot of work, so we
creating objects that we don't need.

00:03:50.069 --> 00:03:53.919
Passing them to a method which is then
simply can't take the values

00:03:53.919 --> 00:03:58.859
out of them and use those values to get
round that problem.

00:03:58.859 --> 00:04:02.900
What we've done with streams is to
provide 

00:04:02.900 --> 00:04:07.500
3 particular type-specific,

00:04:07.500 --> 00:04:11.150
or primitive type specific I should say
of stream.

00:04:11.150 --> 00:04:14.739
so there is an IntStream, a DoubleStream and a 
LongStream.

00:04:14.739 --> 00:04:18.720
we haven't bothered with ByteStream or
ShortStream or anything like that because

00:04:18.720 --> 00:04:20.260
those can be represented

00:04:20.260 --> 00:04:24.130
by either an IntStream or LongStream.

00:04:24.130 --> 00:04:29.020
What we can do with these is we
can change the way things work

00:04:29.020 --> 00:04:32.730
in terms of our code. If we go back to an
example now

00:04:32.730 --> 00:04:36.140
we pass the set of students who
graduated in the year

00:04:36.140 --> 00:04:39.680
2015 into mapToInt.

00:04:39.680 --> 00:04:43.150
What that will do is it will actually,
rather than creating

00:04:43.150 --> 00:04:46.610
stream of objects, which are the integer values

00:04:46.610 --> 00:04:49.770
boxed into Integer objects,

00:04:49.770 --> 00:04:53.550
it will create stream of ints. It will
create

00:04:53.550 --> 00:04:58.710
stream of primitive values. Therefore we
don't need to do

00:04:58.710 --> 00:05:02.290
any boxing or unboxing, because when the
pass it to max

00:05:02.290 --> 00:05:06.060
what's going to happen is it has a
stream of

00:05:06.060 --> 00:05:10.240
primitives values, so can simply evaluate
those to find the maximum value.

00:05:10.240 --> 00:05:13.370
It doesn't have to unbox things in order to get the
values

00:05:13.370 --> 00:05:18.169
as they go through.  To summarise Section 3,

00:05:18.169 --> 00:05:21.570
because Java has both primitive
types

00:05:21.570 --> 00:05:25.410
as well as object types, when we deal
with streams

00:05:25.410 --> 00:05:29.120
we need to have the ability to represent
certain

00:05:29.120 --> 00:05:34.360
primitive types of streams. And as I said,
there are three of those: IntStream,

00:05:34.360 --> 00:05:38.520
DoubleStream and LongStream. When
you want to use those

00:05:38.520 --> 00:05:41.650
you can use method like mapToInt,

00:05:41.650 --> 00:05:45.210
mapToDouble or mapToLong. There's also other

00:05:45.210 --> 00:05:48.960
methods so if you have a stream, let's say you have an IntStream 

00:05:48.960 --> 00:05:52.830
and you want to convert it to a stream
objects for whatever reason

00:05:52.830 --> 00:05:57.440
put in a collection, you do mapToObj, so
that you can go both ways.

00:05:57.440 --> 00:06:01.260
There's very effective
ways

00:06:01.260 --> 00:06:04.350
of processing both object
representations and

00:06:04.350 --> 00:06:08.700
primitive streams in the stream API and
that is the end

00:06:08.700 --> 00:06:09.479
of section 3.

