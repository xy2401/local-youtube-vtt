WEBVTT
Kind: captions
Language: en

00:00:00.849 --> 00:00:02.880
[music]

00:00:02.880 --> 00:00:13.360
 

00:00:13.360 --> 00:00:15.820
Hello and welcome to section 6

00:00:15.820 --> 00:00:17.769
of lesson 2.

00:00:17.769 --> 00:00:21.759
In this part we're going to talk about
the terminal operations that are available

00:00:21.759 --> 00:00:26.360
in the stream interface. We've talked about where
you can generate stream sources from,

00:00:26.360 --> 00:00:30.320
we've talked about various intermediate
operations that you can apply

00:00:30.320 --> 00:00:34.300
in terms of the pipeline now we're going to
talk about how you can have the

00:00:34.300 --> 00:00:37.610
other end if your pipeline, how you can
terminate

00:00:37.610 --> 00:00:41.050
that processing and generate either
explicit result

00:00:41.050 --> 00:00:44.790
or some kind of side effect. so as I said,

00:00:44.790 --> 00:00:48.409
terminal operations are all about how we
take

00:00:48.409 --> 00:00:51.910
the stream of values that we've been
processing

00:00:51.910 --> 00:00:55.430
and then terminate this pipeline
operations.

00:00:55.430 --> 00:01:00.260
And I also said in terms of how this
works internally,

00:01:00.260 --> 00:01:03.289
its only when we get to the terminal
operation

00:01:03.289 --> 00:01:07.420
that we actually do any real processing.
At that point we'll

00:01:07.420 --> 00:01:11.890
evaluate what needs to be done
internally in the library code

00:01:11.890 --> 00:01:16.410
and that way we can apply various
optimizations, we can do

00:01:16.410 --> 00:01:21.520
lazy evaluation we can merge, we fuse
operations together where required,

00:01:21.520 --> 00:01:24.670
we can eliminate redundant operations.

00:01:24.670 --> 00:01:28.259
I showed the example in the earlier
section of the

00:01:28.259 --> 00:01:32.869
the lesson where you skip limit and we
don't have to read all the lines from

00:01:32.869 --> 00:01:33.549
the file;

00:01:33.549 --> 00:01:37.579
we only read the number that would
need to match that skip

00:01:37.579 --> 00:01:40.920
limit. We can also do parallel execution.

00:01:40.920 --> 00:01:44.360
So we can identify where

00:01:44.360 --> 00:01:47.500
things to be done in parallel, we can
apply that, again we'll talk more about

00:01:47.500 --> 00:01:48.549
that in lesson 3.

00:01:48.549 --> 00:01:51.950
The ultimate result of a terminal operation

00:01:51.950 --> 00:01:59.290
is either explicit result or some kind of
side effect like printing a message.

00:01:59.290 --> 00:02:01.820
Let's start by looking how we can match

00:02:01.820 --> 00:02:05.560
elements because there are quite large
number terminal operations that

00:02:05.560 --> 00:02:10.070
are available in the standard stream API.
The first of these

00:02:10.070 --> 00:02:13.960
is findFirst, and what this will do is
it will take

00:02:13.960 --> 00:02:15.000
the input stream.

00:02:15.000 --> 00:02:16.000
The first one that matches

00:02:16.000 --> 00:02:18.000
will be the one that is returned

00:02:18.000 --> 00:02:22.450
and that will terminate the stream. This is a
a good example of how you can terminate

00:02:22.450 --> 00:02:23.640
an infinite stream,

00:02:23.640 --> 00:02:26.950
because you can simply say, 
Let's have an infinite stream of

00:02:26.960 --> 00:02:31.950
random numbers and we will stop when we
find the first one is greater than

00:02:31.950 --> 00:02:37.570
10 for example. There's also another
form of findFirst called findAny.

00:02:37.600 --> 00:02:42.000
It works in very much the same way as findFirst,

00:02:42.000 --> 00:02:45.660
but is for where you have parallel
streams.

00:02:45.680 --> 00:02:50.240
Now the reason of having findAny verse
findFirst

00:02:50.240 --> 00:02:53.120
is that findAny will give you a
result

00:02:53.120 --> 00:02:56.541
more quickly because its
non-deterministic.

00:02:56.560 --> 00:02:58.000
Any thread that matches

00:02:58.000 --> 00:03:02.620
will give you a result. If you want
deterministic result, as in

00:03:02.620 --> 00:03:05.970
if you want to have the same result
every time given the same set of

00:03:05.970 --> 00:03:09.250
inputs then you would need to use findFirst.
findAny

00:03:09.280 --> 00:03:14.180
will simply return a value that matches
but in a non-deterministic way

00:03:14.240 --> 00:03:17.030
when you have parallel streams.

00:03:17.030 --> 00:03:19.879
There are some other ones. There's
allMatch,

00:03:19.879 --> 00:03:23.861
which will ensure that all the elements
on the input stream

00:03:23.861 --> 00:03:27.270
match against the Predicate or not
that will return a boolean,

00:03:27.270 --> 00:03:31.380
true if they do match the Predicate
and false if they don't.

00:03:31.380 --> 00:03:34.619
Another one anyMatch,

00:03:34.619 --> 00:03:38.201
so if any of the elements on the
input stream match the

00:03:38.240 --> 00:03:41.330
Predicate based on predicate then it
will turn true,

00:03:41.330 --> 00:03:45.880
otherwise false and the inverse of that
which is noneMatch,

00:03:45.920 --> 00:03:50.600
so that will say if none of the elements match
the based on the Predicate

00:03:50.600 --> 00:03:54.370
then it will return true. There's various
different ways that you can use

00:03:54.400 --> 00:03:57.860
to match elements that are coming from
the process

00:03:57.920 --> 00:04:05.090
stream and been terminated accordingly.
If you want to collect results, this is

00:04:05.120 --> 00:04:06.400
something that

00:04:06.400 --> 00:04:09.909
you frequently want to do and get the
results into

00:04:09.920 --> 00:04:12.981
maybe a list or a map or
something like that.

00:04:12.981 --> 00:04:16.220
and collect is the way to do that

00:04:16.240 --> 00:04:19.609
What it does is it effectively performs
mutable reduction

00:04:19.609 --> 00:04:23.651
on the stream, so it takes the elements on
the stream and puts them into

00:04:23.651 --> 00:04:28.771
whatever Collector defines as the place
to put them. We're gonna spend a lot more time

00:04:28.779 --> 00:04:32.741
talking about this in lesson 3 so I
won't go into any more detail about that now.

00:04:32.760 --> 00:04:36.360
Similarly, if you want to create an array

00:04:36.360 --> 00:04:39.740
from the results, because that's not
collections in the sense of

00:04:39.760 --> 00:04:43.200
the classes then you can use toArray and

00:04:43.200 --> 00:04:50.320
that will return you an array, which
contains the elements of the input stream.

00:04:50.351 --> 00:04:54.040
There are also many ways of achieving
numerical results

00:04:54.040 --> 00:04:57.240
if you're dealing with an object stream.
We'll talk about

00:04:57.240 --> 00:05:00.730
primitive streams in a moment, but for a
object stream

00:05:00.730 --> 00:05:04.070
you can call count. What that

00:05:04.080 --> 00:05:07.250
will do is simply count how many elements are there on
the input stream.

00:05:07.280 --> 00:05:10.520
That way if you're reading lines from a
file,

00:05:10.520 --> 00:05:14.540
if you pass that into count it will tell you how
many lines

00:05:14.560 --> 00:05:17.780
there are in the file. There's also

00:05:17.780 --> 00:05:22.200
max and min which will use a Comparator

00:05:22.200 --> 00:05:25.720
to determine which is either the maximum
value

00:05:25.720 --> 00:05:29.170
or minimum value using that Comparator,

00:05:29.200 --> 00:05:32.490
so if you've got strings you can
compare

00:05:32.490 --> 00:05:35.480
length of them using the Comparator or you could add up

00:05:35.480 --> 00:05:39.010
the values at the individual characters
and compare based on that;

00:05:39.040 --> 00:05:42.390
whatever you want to do you can do using
the Comparator

00:05:42.400 --> 00:05:46.260
and you can either give it maximum value
or the minimum value.

00:05:46.260 --> 00:05:49.740
Both these return what's called an
Optional and

00:05:49.760 --> 00:05:53.380
I'll talk about that in next part of the
lesson; so don't worry about that now

00:05:53.380 --> 00:05:56.560
but it's essentially how we deal
with things

00:05:56.560 --> 00:05:59.800
if there are no elements on the
input stream what do we return.

00:06:01.360 --> 00:06:06.160
For primitive type streams, so the intStream,
DoubleStream and

00:06:06.240 --> 00:06:09.800
LongStream there's a couple of other
numerical

00:06:09.880 --> 00:06:13.690
terminal operations that we can use. One of those
is average,

00:06:13.690 --> 00:06:16.730
so that will return the arithmetic mean
of the

00:06:16.730 --> 00:06:20.040
stream. We've got numbers, add them up, divide by the

00:06:20.040 --> 00:06:24.510
number of elements in the stream and that's
what we get. That also returns an Optional.

00:06:24.510 --> 00:06:28.700
We'll talk about that next part of the lesson. sum

00:06:28.720 --> 00:06:32.670
returns the sum all the elements in stream
and

00:06:32.670 --> 00:06:36.040
that doesn't return Optional; if there
are no elements on the input stream

00:06:36.040 --> 00:06:39.750
it will return zero.

00:06:39.760 --> 00:06:42.210
Iteration. We've already seen that the

00:06:42.240 --> 00:06:45.250
a Iterable interface now has forEach

00:06:45.280 --> 00:06:48.880
method on it, but we can use that

00:06:48.880 --> 00:06:52.130
in terms of a stream as well. So we can say

00:06:52.160 --> 00:06:56.710
that for stream we can do forEach and
have a consumer

00:06:56.720 --> 00:07:00.040
process whatever the elements on the
input stream are.

00:07:00.040 --> 00:07:04.940
So we'll just repeat that for each element on the input stream.

00:07:04.960 --> 00:07:08.100
There's also one that's kind of related to that which is forEachOrdered.

00:07:08.100 --> 00:07:11.260
So that's very much like forEach,

00:07:11.280 --> 00:07:14.960
but again this is when you deal with
parallel streams

00:07:14.960 --> 00:07:18.430
and if you want to ensure that the

00:07:18.430 --> 00:07:21.940
ordering is the same then forEachOrdered will do that.

00:07:21.940 --> 00:07:25.290
It will guarantee that the same set of
input elements

00:07:25.290 --> 00:07:28.970
you get the same order of output
elements.

00:07:28.970 --> 00:07:34.000
forEach won't necessarily do that if
you have a parallel stream because there's non-determinism

00:07:34.000 --> 00:07:37.880
involved in that. forEachOrdered will make
sure that the order is the same.

00:07:37.880 --> 00:07:41.580
Be careful when you use these.

00:07:41.600 --> 00:07:45.770
There are definitely places where
they can be used very effectively,

00:07:45.770 --> 00:07:49.160
but you tend to,

00:07:49.160 --> 00:07:53.130
as we'll talk about in week 3 in the third
lesson there are some situations where

00:07:53.130 --> 00:07:55.000
you may be tempted to use these

00:07:55.000 --> 00:07:58.270
because you're still thinking in an
imperative style. We'll

00:07:58.270 --> 00:08:04.059
deal with that in week 3. Folding
a stream.

00:08:04.080 --> 00:08:08.241
This is where what we want to do is take
a input stream has multiple elements

00:08:08.241 --> 00:08:08.790
on it

00:08:08.790 --> 00:08:11.920
and we want to reduce it to a single
value.

00:08:11.920 --> 00:08:15.760
Now we can do that, as you've already
seen using something like

00:08:15.760 --> 00:08:19.110
count that will count how many elements there are on
the input stream.

00:08:19.120 --> 00:08:22.360
We can do things like sum, which will
add up all the values

00:08:22.360 --> 00:08:25.980
on the input stream, but reduce is a more

00:08:26.000 --> 00:08:29.040
general purpose way of doing that

00:08:29.040 --> 00:08:32.070
and this is much more the sort of functional
approach to programming.

00:08:32.080 --> 00:08:35.490
So what we do with the reduced method

00:08:35.520 --> 00:08:38.910
is we use BinaryOperator and

00:08:38.910 --> 00:08:42.870
remember back to the function package,
BinaryOperator

00:08:42.880 --> 00:08:46.340
is like a function but takes

00:08:46.340 --> 00:08:50.010
two input parameters

00:08:50.010 --> 00:08:54.270
and returns a type, all which are the same
and

00:08:54.270 --> 00:08:58.300
we call that the accumulator. What the
accumulator does is it takes

00:08:58.320 --> 00:09:02.420
a partial results on the next element in
the stream

00:09:02.420 --> 00:09:05.940
and returns a new partial result. So
that's why the

00:09:05.940 --> 00:09:09.310
a the types are all the same because it will

00:09:09.310 --> 00:09:12.400
turn a partial result  which is one
element that

00:09:12.400 --> 00:09:16.300
is whatever is the of a result so far,

00:09:16.320 --> 00:09:20.680
take the next element on the stream
apply the accumulator to that and

00:09:20.680 --> 00:09:24.670
return a new partial result, which will
be used the next time

00:09:24.670 --> 00:09:30.000
when we process next element in the stream. Again,
we're spend more time

00:09:30.000 --> 00:09:34.200
in week 3 talking about how to use the
reduce operator

00:09:34.200 --> 00:09:37.680
and reduce method in different
situations.

00:09:37.680 --> 00:09:42.800
So we'll talk about that in more detail
then. This also returns an Optional

00:09:42.800 --> 00:09:46.320
again, we'll talk about that next
part and then there are

00:09:46.320 --> 00:09:49.680
two other slight variations on this.

00:09:49.680 --> 00:09:54.080
One which takes an initial value and that
doesn't return an

00:09:54.080 --> 00:09:58.160
Optional because there's an initial values so if
there are no elements on the input stream

00:09:58.160 --> 00:10:02.000
then you can just return the initial value

00:10:02.000 --> 00:10:05.150
There's one which also takes an initial value and a BiFunction,

00:10:05.150 --> 00:10:08.800
which is really equivalent to doing a
map

00:10:08.800 --> 00:10:13.000
and then a reduction. so its
equivalent to

00:10:13.000 --> 00:10:17.610
doing the map using the BiFunction
and then doing the reduction using the

00:10:17.610 --> 00:10:19.690
initial value and the accumulator.

00:10:22.480 --> 00:10:24.480
To summarize section 6 then...

00:10:24.480 --> 00:10:27.530
A terminal operation will provide

00:10:27.530 --> 00:10:30.650
either an explicit result or side effect

00:10:30.720 --> 00:10:34.800
and a side effect could be something like using
the forEach terminal operation

00:10:34.800 --> 00:10:39.230
and printing out the values of the
stream. So that doesn't generate a

00:10:39.230 --> 00:10:40.750
specific result but

00:10:40.750 --> 00:10:42.740
does something with the

00:10:42.880 --> 00:10:45.880
input stream. They are many types of

00:10:45.880 --> 00:10:50.040
operation available, and we need to look
at some of these in

00:10:50.040 --> 00:10:53.100
more detail and we'll do that in week 3,
so we'll look at

00:10:53.120 --> 00:10:56.420
reductions, we'll look at collectors in more
detail

00:10:56.420 --> 00:11:00.200
when we get to lesson 3. And that

00:11:00.200 --> 00:11:02.360
is the end of section 6.

