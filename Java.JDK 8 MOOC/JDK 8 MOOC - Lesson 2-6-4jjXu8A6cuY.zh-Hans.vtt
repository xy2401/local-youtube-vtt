WEBVTT
Kind: captions
Language: zh-Hans

00:00:00.849 --> 00:00:02.880
 [音乐] 

00:00:13.360 --> 00:00:15.820
您好，欢迎来到第6节

00:00:15.820 --> 00:00:17.769
第二课

00:00:17.769 --> 00:00:21.759
在这一部分中，我们将讨论可用的终端操作

00:00:21.759 --> 00:00:26.360
在流接口中。我们已经讨论了您可以在何处生成流源， 

00:00:26.360 --> 00:00:30.320
我们已经讨论了可以应用的各种中间操作

00:00:30.320 --> 00:00:34.300
在管道方面，我们将讨论如何拥有

00:00:34.300 --> 00:00:37.610
另一端，如果您的管道，如何终止

00:00:37.610 --> 00:00:41.050
处理并产生显式结果

00:00:41.050 --> 00:00:44.790
或某种副作用。就像我说的

00:00:44.790 --> 00:00:48.409
终端操作全都与我们的态度有关

00:00:48.409 --> 00:00:51.910
我们一直在处理的价值流

00:00:51.910 --> 00:00:55.430
然后终止此管道操作。 

00:00:55.430 --> 00:01:00.260
我还谈到了内部运作方式， 

00:01:00.260 --> 00:01:03.289
只有当我们进入终端操作时

00:01:03.289 --> 00:01:07.420
我们实际上进行了任何实际处理。到那时，我们将

00:01:07.420 --> 00:01:11.890
评估库代码内部需要执行的操作

00:01:11.890 --> 00:01:16.410
这样我们可以应用各种优化，我们可以

00:01:16.410 --> 00:01:21.520
我们可以合并惰性评估，在需要时将操作融合在一起， 

00:01:21.520 --> 00:01:24.670
我们可以消除多余的操作。 

00:01:24.670 --> 00:01:28.259
我在前面的示例中展示了该示例

00:01:28.259 --> 00:01:32.869
在您跳过限制的课程中，我们不必阅读所有内容

00:01:32.869 --> 00:01:33.549
文件; 

00:01:33.549 --> 00:01:37.579
我们只读取与该跳过匹配的数字

00:01:37.579 --> 00:01:40.920
限制。我们还可以执行并行执行。 

00:01:40.920 --> 00:01:44.360
这样我们可以确定在哪里

00:01:44.360 --> 00:01:47.500
并行完成的事情，我们可以应用它，我们将再次讨论

00:01:47.500 --> 00:01:48.549
在第3课中

00:01:48.549 --> 00:01:51.950
终端操作的最终结果

00:01:51.950 --> 00:01:59.290
是显式结果或某种副作用，例如打印消息。 

00:01:59.290 --> 00:02:01.820
让我们从如何匹配开始

00:02:01.820 --> 00:02:05.560
元素，因为有大量的终端操作

00:02:05.560 --> 00:02:10.070
在标准流API中可用。这些中的第一个

00:02:10.070 --> 00:02:13.960
是findFirst，它将要做的是

00:02:13.960 --> 00:02:15.000
输入流。 

00:02:15.000 --> 00:02:16.000
第一个匹配

00:02:16.000 --> 00:02:18.000
将是返回的那个

00:02:18.000 --> 00:02:22.450
这将终止流。这是如何终止的一个很​​好的例子

00:02:22.450 --> 00:02:23.640
无限的溪流

00:02:23.640 --> 00:02:26.950
因为你可以简单地说，让我们拥有无限的

00:02:26.960 --> 00:02:31.950
随机数，当我们发现第一个大于

00:02:31.950 --> 00:02:37.570
以10为例。 findFirst还有另一种形式，称为findAny。 

00:02:37.600 --> 00:02:42.000
它的工作方式与findFirst几乎相同， 

00:02:42.000 --> 00:02:45.660
但适用于您有并行流的地方。 

00:02:45.680 --> 00:02:50.240
现在找到findAny的原因findFirst 

00:02:50.240 --> 00:02:53.120
是findAny会给你结果

00:02:53.120 --> 00:02:56.541
更快，因为它不确定。 

00:02:56.560 --> 00:02:58.000
任何匹配的线程

00:02:58.000 --> 00:03:02.620
会给你结果。如果要确定性的结果，例如

00:03:02.620 --> 00:03:05.970
如果您希望每次给定相同的一组结果都具有相同的结果

00:03:05.970 --> 00:03:09.250
输入，那么您将需要使用findFirst。 findAny 

00:03:09.280 --> 00:03:14.180
只会返回一个匹配但不确定的值

00:03:14.240 --> 00:03:17.030
当您有并行流时。 

00:03:17.030 --> 00:03:19.879
还有其他一些。有所有比赛， 

00:03:19.879 --> 00:03:23.861
这将确保输入流上的所有元素

00:03:23.861 --> 00:03:27.270
与谓词匹配或不匹配将返回布尔值， 

00:03:27.270 --> 00:03:31.380
如果它们与谓词匹配，则为true；否则，则为false。 

00:03:31.380 --> 00:03:34.619
另一个比赛， 

00:03:34.619 --> 00:03:38.201
因此，如果输入流中的任何元素与

00:03:38.240 --> 00:03:41.330
基于谓词的谓词将变为true， 

00:03:41.330 --> 00:03:45.880
否则为false，与noneMatch的取反， 

00:03:45.920 --> 00:03:50.600
这样就可以说是否所有元素都不符合基于谓词的

00:03:50.600 --> 00:03:54.370
然后它将返回true。您可以使用多种不同的方式

00:03:54.400 --> 00:03:57.860
匹配来自流程的元素

00:03:57.920 --> 00:04:05.090
流并因此终止。如果您想收集结果，这是

00:04:05.120 --> 00:04:06.400
一些东西

00:04:06.400 --> 00:04:09.909
您经常想做并获得结果

00:04:09.920 --> 00:04:12.981
也许是列表或地图之类的东西。 

00:04:12.981 --> 00:04:16.220
收集是做到这一点的方法

00:04:16.240 --> 00:04:19.609
它的作用是有效执行可变减少

00:04:19.609 --> 00:04:23.651
在流上，因此它将流上的元素放入其中

00:04:23.651 --> 00:04:28.771
无论Collector定义为放置它们的地方。我们要花更多的时间

00:04:28.779 --> 00:04:32.741
在第3课中讨论这一点，所以我现在不再赘述。 

00:04:32.760 --> 00:04:36.360
同样，如果要创建数组

00:04:36.360 --> 00:04:39.740
从结果来看，因为这不是集合

00:04:39.760 --> 00:04:43.200
然后可以使用toArray和

00:04:43.200 --> 00:04:50.320
这将返回一个数组，其中包含输入流的元素。 

00:04:50.351 --> 00:04:54.040
还有很多方法可以得到数值结果

00:04:54.040 --> 00:04:57.240
如果要处理对象流。我们将谈论

00:04:57.240 --> 00:05:00.730
片刻流，但是对于对象流

00:05:00.730 --> 00:05:04.070
您可以致电计数。那是什么

00:05:04.080 --> 00:05:07.250
要做的只是简单地计算输入流中有多少个元素。 

00:05:07.280 --> 00:05:10.520
这样，如果您正在从文件中读取行， 

00:05:10.520 --> 00:05:14.540
如果您将其计算在内，它将告诉您多少行

00:05:14.560 --> 00:05:17.780
在文件中。还有

00:05:17.780 --> 00:05:22.200
最大值和最小值将使用比较器

00:05:22.200 --> 00:05:25.720
确定哪个是最大值

00:05:25.720 --> 00:05:29.170
或使用该比较器的最小值， 

00:05:29.200 --> 00:05:32.490
所以如果你有琴弦可以比较

00:05:32.490 --> 00:05:35.480
使用比较器的长度，也可以加起来

00:05:35.480 --> 00:05:39.010
各个字符的值，并据此进行比较； 

00:05:39.040 --> 00:05:42.390
无论您想做什么，都可以使用比较器

00:05:42.400 --> 00:05:46.260
您可以给它最大值或最小值。 

00:05:46.260 --> 00:05:49.740
这两个都返回所谓的Optional和

00:05:49.760 --> 00:05:53.380
我将在本课程的下一部分中讨论这一点；所以现在不用担心

00:05:53.380 --> 00:05:56.560
但这实质上是我们处理事物的方式

00:05:56.560 --> 00:05:59.800
如果输入流上没有元素，我们将返回什么。 

00:06:01.360 --> 00:06:06.160
对于原始类型的流，因此intStream，DoubleStream和

00:06:06.240 --> 00:06:09.800
 LongStream还有一些其他数值

00:06:09.880 --> 00:06:13.690
我们可以使用的终端操作。其中之一是平均水平， 

00:06:13.690 --> 00:06:16.730
这样就可以返回

00:06:16.730 --> 00:06:20.040
流。我们有数字，将它们加起来，除以

00:06:20.040 --> 00:06:24.510
流中元素的数量，这就是我们得到的。这还会返回一个Optional。 

00:06:24.510 --> 00:06:28.700
我们将在本课程的下一部分中讨论。和

00:06:28.720 --> 00:06:32.670
返回流中所有元素的和

00:06:32.670 --> 00:06:36.040
没有返回Optional；如果输入流上没有元素

00:06:36.040 --> 00:06:39.750
它将返回零。 

00:06:39.760 --> 00:06:42.210
迭代。我们已经看到

00:06:42.240 --> 00:06:45.250
一个可迭代的接口现在具有forEach 

00:06:45.280 --> 00:06:48.880
方法，但是我们可以使用它

00:06:48.880 --> 00:06:52.130
在流方面也是如此。所以我们可以说

00:06:52.160 --> 00:06:56.710
对于流，我们可以做到forEach，并拥有一个消费者

00:06:56.720 --> 00:07:00.040
处理输入流上的任何元素。 

00:07:00.040 --> 00:07:04.940
因此，我们将对输入流中的每个元素重复此操作。 

00:07:04.960 --> 00:07:08.100
还有一种与forEachOrdered相关。 

00:07:08.100 --> 00:07:11.260
所以非常像forEach 

00:07:11.280 --> 00:07:14.960
但这又是当您处理并行流时

00:07:14.960 --> 00:07:18.430
如果您要确保

00:07:18.430 --> 00:07:21.940
排序是相同的，然后forEachOrdered将执行该操作。 

00:07:21.940 --> 00:07:25.290
它将确保输入元素相同

00:07:25.290 --> 00:07:28.970
您将获得相同顺序的输出元素。 

00:07:28.970 --> 00:07:34.000
如果您有并行流，forEach不一定会那样做，因为存在不确定性

00:07:34.000 --> 00:07:37.880
参与其中。 forEachOrdered将确保顺序相同。 

00:07:37.880 --> 00:07:41.580
使用它们时要小心。 

00:07:41.600 --> 00:07:45.770
肯定有一些地方可以非常有效地使用它们， 

00:07:45.770 --> 00:07:49.160
但是你倾向于

00:07:49.160 --> 00:07:53.130
正如我们将在第三课的第三周中讨论的那样，在某些情况下

00:07:53.130 --> 00:07:55.000
您可能会想使用这些

00:07:55.000 --> 00:07:58.270
因为您仍在以命令式的方式思考。好

00:07:58.270 --> 00:08:04.059
在第3周中处理该问题。 

00:08:04.080 --> 00:08:08.241
这是我们想要做的就是输入流中包含多个元素

00:08:08.241 --> 00:08:08.790
在上面

00:08:08.790 --> 00:08:11.920
并且我们希望将其减少为单个值。 

00:08:11.920 --> 00:08:15.760
现在我们可以做到，因为您已经看到使用类似

00:08:15.760 --> 00:08:19.110
计算将计算输入流中有多少个元素。 

00:08:19.120 --> 00:08:22.360
我们可以做诸如sum之类的事情，它将所有值相加

00:08:22.360 --> 00:08:25.980
在输入流上，但减少是更多

00:08:26.000 --> 00:08:29.040
通用方法

00:08:29.040 --> 00:08:32.070
这更是一种编程的功能方法。 

00:08:32.080 --> 00:08:35.490
那么我们用简化方法做什么

00:08:35.520 --> 00:08:38.910
我们使用BinaryOperator和

00:08:38.910 --> 00:08:42.870
记得回到函数包BinaryOperator 

00:08:42.880 --> 00:08:46.340
就像一个功能，但需要

00:08:46.340 --> 00:08:50.010
两个输入参数

00:08:50.010 --> 00:08:54.270
并返回一个相同的类型

00:08:54.270 --> 00:08:58.300
我们称之为累加器。累加器要做的是

00:08:58.320 --> 00:09:02.420
流中下一个元素的部分结果

00:09:02.420 --> 00:09:05.940
并返回新的部分结果。这就是为什么

00:09:05.940 --> 00:09:09.310
类型都是一样的，因为它将

00:09:09.310 --> 00:09:12.400
转一个部分结果是一个元素

00:09:12.400 --> 00:09:16.300
到目前为止的结果是什么， 

00:09:16.320 --> 00:09:20.680
将流中的下一个元素应用于累加器并

00:09:20.680 --> 00:09:24.670
返回一个新的部分结果，将在下次使用

00:09:24.670 --> 00:09:30.000
当我们处理流中的下一个元素时。同样，我们花更多的时间

00:09:30.000 --> 00:09:34.200
在第3周中讨论如何使用reduce运算符

00:09:34.200 --> 00:09:37.680
并减少不同情况下的方法。 

00:09:37.680 --> 00:09:42.800
因此，我们将在后面详细讨论。这也返回一个可选

00:09:42.800 --> 00:09:46.320
再次，我们将讨论下一部分，然后有

00:09:46.320 --> 00:09:49.680
在这方面还有其他两个细微变化。 

00:09:49.680 --> 00:09:54.080
一个具有初始值且不返回

00:09:54.080 --> 00:09:58.160
可选，因为有一个初始值，所以如果输入流上没有元素

00:09:58.160 --> 00:10:02.000
那么你就可以返回初始值

00:10:02.000 --> 00:10:05.150
还有一个也带有初始值和BiFunction， 

00:10:05.150 --> 00:10:08.800
这真的等效于绘制地图

00:10:08.800 --> 00:10:13.000
然后减少。所以相当于

00:10:13.000 --> 00:10:17.610
使用BiFunction绘制地图，然后使用

00:10:17.610 --> 00:10:19.690
初始值和累加器。 

00:10:22.480 --> 00:10:24.480
要总结第6节，那么... 

00:10:24.480 --> 00:10:27.530
终端操作将提供

00:10:27.530 --> 00:10:30.650
明确的结果或副作用

00:10:30.720 --> 00:10:34.800
副作用可能类似于使用forEach终端操作

00:10:34.800 --> 00:10:39.230
并打印出流的值。因此不会产生

00:10:39.230 --> 00:10:40.750
具体结果但是

00:10:40.750 --> 00:10:42.740
与

00:10:42.880 --> 00:10:45.880
输入流。他们有很多类型

00:10:45.880 --> 00:10:50.040
操作可用，我们需要看看其中的一些

00:10:50.040 --> 00:10:53.100
更多细节，我们将在第3周进行介绍，因此我们来看一下

00:10:53.120 --> 00:10:56.420
减少量，我们将更详细地研究收集器

00:10:56.420 --> 00:11:00.200
当我们上第三课时

00:11:00.200 --> 00:11:02.360
在第6节的末尾。 

