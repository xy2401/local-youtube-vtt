WEBVTT
Kind: captions
Language: en

00:00:00.919 --> 00:00:03.450
[music]

00:00:03.450 --> 00:00:13.849
 

00:00:13.849 --> 00:00:15.410
Hello and welcome to

00:00:15.410 --> 00:00:18.779
lesson 3 of this massive open online
course

00:00:18.779 --> 00:00:23.160
on Lambdas and streams JDK 8. In this
lesson

00:00:23.160 --> 00:00:26.720
we're going be looking at some more
advanced concepts around Lambda

00:00:26.720 --> 00:00:28.240
expressions and stream API.

00:00:28.240 --> 00:00:32.360
My name Simon Ritter and I am a Java Technology
Evangelist

00:00:32.360 --> 00:00:35.780
In terms of the agenda

00:00:35.780 --> 00:00:40.050
for this particular lesson, we're going
to start with looking at

00:00:40.050 --> 00:00:43.380
reductions because reductions

00:00:43.380 --> 00:00:46.489
are a way of creating a result from a set of

00:00:46.489 --> 00:00:50.660
data which is the stream and we need to
understand

00:00:50.660 --> 00:00:53.870
how to use those correctly in order to
get the kind

00:00:53.880 --> 00:00:57.580
results we're looking for, especially when
we're trying to take a functional

00:00:57.580 --> 00:00:58.171
approach.

00:00:58.171 --> 00:01:01.880
This is one of the things that, as Java
programmers,

00:01:01.880 --> 00:01:04.890
we need to think a little bit
differently, so we'll talk about that.

00:01:04.890 --> 00:01:08.590
We are then going to talk about finite and

00:01:08.600 --> 00:01:13.500
infinite streams because again, being
Java programmers, we tend to think in

00:01:13.500 --> 00:01:14.249
loops

00:01:14.249 --> 00:01:17.740
and when we have to deal with an 
infinite stream we

00:01:17.740 --> 00:01:20.741
tend to think about, how do we break
out of that stream

00:01:20.760 --> 00:01:24.140
and it's not actually the case that we
break out of the stream,

00:01:24.140 --> 00:01:28.160
but we can terminate an infinite stream.
So we'll talk about the differences

00:01:28.160 --> 00:01:31.579
and the two types of streams and the
approaches you can take.

00:01:31.579 --> 00:01:36.411
Then we'll look at where you should use the
forEach method,

00:01:36.411 --> 00:01:40.579
but also where you shouldn't use forEach
method. There are some

00:01:40.579 --> 00:01:43.751
very valid places where you can use that
particular method,

00:01:43.760 --> 00:01:47.690
but there are also a number of places where
you can fall into a

00:01:47.690 --> 00:01:50.899
trap of still thinking, because it

00:01:50.899 --> 00:01:54.650
still thinking loops, as you would do in
Java and

00:01:54.650 --> 00:01:57.681
then trying to apply that by thinking,
I'll use forEach

00:01:57.681 --> 00:02:03.670
for that and not doing it correctly. We'll 
look at some things you can do to avoid that.

00:02:03.680 --> 00:02:06.690
We will talk about collectors, which is
quite a big subject,

00:02:06.690 --> 00:02:10.280
and so I've created particular section on that.
So we can look at different kinds of

00:02:10.280 --> 00:02:11.430
collectors,

00:02:11.440 --> 00:02:14.880
different approaches you can take for
gathering the data and

00:02:14.880 --> 00:02:19.620
forming a collection from the results. We're going to
look at

00:02:19.620 --> 00:02:23.680
parallel streams because this is one of
the great

00:02:23.680 --> 00:02:28.650
advantages of using the stream API is
the fact that you can switch from

00:02:28.650 --> 00:02:32.060
sequential processing to parallel
processing

00:02:32.060 --> 00:02:35.469
without any change the way your code
actually works.

00:02:35.480 --> 00:02:40.121
But the trap you can fall
into with this is to think,

00:02:40.121 --> 00:02:43.130
ah, well, I can just always use a parallel
streams and it's

00:02:43.130 --> 00:02:46.390
always going to do things more quickly.
But that's not

00:02:46.400 --> 00:02:50.960
necessarily the case, so we need to
understand where you should use parallel

00:02:50.960 --> 00:02:53.120
streams and where it's actually less
efficient

00:02:53.120 --> 00:02:58.140
to use a parallel stream rather than a
sequential stream. We'll

00:02:58.140 --> 00:03:02.459
look at how to debug streams and Lambdas
because

00:03:02.459 --> 00:03:07.481
one of the things about streams API is it
does tend to hide quite a lot of the work from

00:03:07.481 --> 00:03:07.800
you.

00:03:07.800 --> 00:03:12.790
So it makes the code look very simple, but when
you want to start looking at how to

00:03:12.800 --> 00:03:15.780
analyze what's actually happening
with the code sometimes you need to take

00:03:15.780 --> 00:03:17.210
some slightly different approaches

00:03:17.210 --> 00:03:21.140
and so we'll look at that. Since this is
the last lesson

00:03:21.140 --> 00:03:25.320
in the course we'll wrap up everything at
the end with some conclusions

00:03:25.320 --> 00:03:29.550
about the whole Lambdas side of things
and streams API

00:03:29.550 --> 00:03:33.670
and what you can do next in terms of
learning about how to use those.

00:03:33.680 --> 00:03:37.510
Let's start

00:03:37.520 --> 00:03:41.149
with section 1: Understanding and using

00:03:41.149 --> 00:03:44.491
reductions.

00:03:44.491 --> 00:03:47.500
What we have to start with is a simple
problem

00:03:47.520 --> 00:03:51.080
and this was one that we used for
training course

00:03:51.080 --> 00:03:54.910
that we gave on Lambda and streams
when they first came out

00:03:54.910 --> 00:03:58.510
and the question was, how to find the
length

00:03:58.510 --> 00:04:01.840
of the longest line in a file. This is 
the solution that

00:04:01.840 --> 00:04:06.090
we provided. You start off with finding
that Path

00:04:06.090 --> 00:04:09.570
of the file that you want to read the
lines of text from.

00:04:09.600 --> 00:04:12.630
Then using that

00:04:12.640 --> 00:04:16.550
you can use the static method on the
Files class,

00:04:16.560 --> 00:04:19.610
which we saw in Lesson 2 and

00:04:19.610 --> 00:04:22.760
what this allows us to do is to extract
the lines of

00:04:22.760 --> 00:04:27.340
text from the file and provide it as a
stream.

00:04:27.360 --> 00:04:30.710
So our output stream, our stream source is a
set of

00:04:30.720 --> 00:04:35.480
lines of text being read from the file. We
pass that

00:04:35.480 --> 00:04:38.820
to mapToInt and that will create a

00:04:38.820 --> 00:04:43.030
stream of integer values using the Lambda
expression here,

00:04:43.040 --> 00:04:46.760
which is method reference, simply to say
give us the

00:04:46.760 --> 00:04:49.990
length of each of the strings on the
input stream.

00:04:50.000 --> 00:04:53.830
We pass that to max,

00:04:53.840 --> 00:04:58.270
which then obviously reduces it to a
single value, which is the biggest

00:04:58.270 --> 00:05:01.730
integer in the input stream. The length

00:05:01.730 --> 00:05:06.790
of the longest line in the
file. Since that will return an

00:05:06.790 --> 00:05:07.060
Optional,

00:05:07.060 --> 00:05:10.630
because we may not have any lines in our
file, we then

00:05:10.630 --> 00:05:13.880
use getAsInt to extract result. So
we're assuming

00:05:13.880 --> 00:05:17.130
there is some data there and we would get
a value as integer

00:05:17.130 --> 00:05:20.590
and that solves the problem. So you can
see

00:05:20.590 --> 00:05:23.950
it's fairly straightforward, doesn't
require a lot of code

00:05:23.950 --> 00:05:29.620
and has a very functional approach to it.

00:05:30.020 --> 00:05:33.840
Somebody then said to me, well that's nice,
but how do we change the problem

00:05:33.840 --> 00:05:34.370
slightly.

00:05:34.370 --> 00:05:38.089
How about if we say rather than finding the length
of the longest

00:05:38.089 --> 00:05:41.800
line in the file what if we want to find the
actual longest line in a

00:05:41.800 --> 00:05:45.820
file and it's very sensible question.

00:05:45.840 --> 00:05:49.250
So, I had to think about this and I thought, ok,

00:05:49.280 --> 00:05:52.981
how do we approach this to get the
result?

00:05:52.981 --> 00:05:56.139
The problem is really because being a
Java programmer

00:05:56.160 --> 00:06:00.201
I tend to think in loops and I tend to
think in terms of state.

00:06:00.240 --> 00:06:04.810
So I would think to myself I need to
keep a record of the longest line that I've

00:06:04.810 --> 00:06:06.610
read from the file so far

00:06:06.640 --> 00:06:10.279
and then use that until I've read all
the lines in the file.

00:06:10.279 --> 00:06:14.201
But I can't do that so I need a functional
approach.

00:06:14.240 --> 00:06:18.649
This is what I call the naive

00:06:18.649 --> 00:06:22.200
stream solution. What we do here

00:06:22.200 --> 00:06:25.670
is to, again, create the input stream

00:06:25.680 --> 00:06:29.150
from lines read from the file. But this time,

00:06:29.150 --> 00:06:32.490
because we're looking for the longest
line in the file I thought ok,

00:06:32.490 --> 00:06:35.661
let's sort all of the lines

00:06:35.680 --> 00:06:39.620
in the file by length. We use a simple Lambda
expression

00:06:39.620 --> 00:06:43.789
to represent the Comparator so x and y are strings

00:06:43.789 --> 00:06:47.420
and we're just returning the difference in
length between

00:06:47.440 --> 00:06:50.611
x and y. By doing it that way around we're
sorting based

00:06:50.640 --> 00:06:54.860
on longest line will be the first in the
sorted list.

00:06:54.880 --> 00:06:59.089
We can then pass that to findFirst

00:06:59.120 --> 00:07:02.471
which will simply return the first
element

00:07:02.480 --> 00:07:05.749
of the input stream, which will be the
longest line in the file.

00:07:05.760 --> 00:07:10.030
Then again, because that returns an
Optional we use get

00:07:10.030 --> 00:07:15.751
to extract the value from that and return it
as a string.

00:07:15.760 --> 00:07:18.100
This is good, so we've solved the problem,

00:07:18.100 --> 00:07:21.550
we've used a functional approach

00:07:21.550 --> 00:07:26.970
and we've solved the problem. No state
maintained it's all good. Well,

00:07:26.970 --> 00:07:30.710
yes, not really. The problem with this is
that by sorting

00:07:30.720 --> 00:07:34.250
all the lines in the file if we have a
big file

00:07:34.250 --> 00:07:37.930
then it's going to take a long time and
it's going to take a lot of resources,

00:07:37.930 --> 00:07:40.970
because the overhead of doing that
sorting is going to be quite

00:07:40.970 --> 00:07:41.830
substantial.

00:07:41.840 --> 00:07:46.670
I thought there must be a better
approach to this; a

00:07:46.670 --> 00:07:50.270
better functional approach, so let's
look at how we find that.

00:07:50.270 --> 00:07:54.320
The first thing I did was I went back
and said, ok,

00:07:54.320 --> 00:07:58.440
how I solve this if I was just going to
use Java

00:07:58.440 --> 00:08:02.960
without being functional? This is the
kind of approach we would use.

00:08:02.960 --> 00:08:06.460
We have a variable called longest which we

00:08:06.480 --> 00:08:11.360
initialize to be an empty string. Then we
repeatedly read lines from the file

00:08:11.360 --> 00:08:14.580
using while loop until there are no more
lines

00:08:14.580 --> 00:08:18.460
to read. Each line that we have, that we
read from the file,

00:08:18.480 --> 00:08:22.790
compare the length of that string
to

00:08:22.800 --> 00:08:26.160
our current longest line, and if it's
longer

00:08:26.160 --> 00:08:29.620
then we simply record it. At the
end

00:08:29.620 --> 00:08:34.220
we're going to have the longest line in the file. When you look at that

00:08:34.240 --> 00:08:38.320
you think, well that's 4 lines of code, great,
a really simple solution.

00:08:38.320 --> 00:08:41.460
Why do I need a functional approach?
The answer is

00:08:41.460 --> 00:08:45.170
yes it is simple but, it's inherently
serial.

00:08:45.200 --> 00:08:48.370
This goes back to beginning of lesson 1

00:08:48.400 --> 00:08:52.030
when we talked about why we needed
Lambda expressions because we need a

00:08:52.030 --> 00:08:52.890
simpler way

00:08:52.890 --> 00:08:58.100
of approaching functional programming in
Java. The problem is

00:08:58.100 --> 00:09:01.450
this is serial. Yes, we're reading lines from a file,

00:09:01.450 --> 00:09:05.200
we had a large set of data in a
list, an ArrayList

00:09:05.200 --> 00:09:09.200
then we might want to process it in parallel to
improve efficiency but

00:09:09.200 --> 00:09:12.250
we can't do that with this approach in our code.

00:09:12.250 --> 00:09:15.370
Similarly, because we have a variable

00:09:15.370 --> 00:09:18.500
we now no longer thread safe; we've got
mutable

00:09:18.500 --> 00:09:21.980
state. So we need a different approach we
need

00:09:22.000 --> 00:09:28.330
a functional approach, but without doing
something like a sort.

00:09:28.330 --> 00:09:29.580
Again, if you remember

00:09:29.600 --> 00:09:32.979
the beginning of lesson 2 we talked about
differences between functional

00:09:32.979 --> 00:09:34.981
programming and imperative programming

00:09:34.981 --> 00:09:38.629
and the way that functional programming

00:09:38.640 --> 00:09:43.211
approaches repeated operations is not
through using an explicit loop.

00:09:43.211 --> 00:09:48.080
The way that we do that with functional
programming is to repeatedly call

00:09:48.080 --> 00:09:51.300
functions on the results passed by other
functions.

00:09:51.300 --> 00:09:54.789
So it's more like a recursive approach.

00:09:55.760 --> 00:09:59.491
We can use that approach in terms of our code. What

00:09:59.520 --> 00:10:03.880
I've got here is a method that will recursively

00:10:03.880 --> 00:10:09.120
solve the problem of finding the longest
string. The idea is that we pass in a

00:10:09.120 --> 00:10:12.859
string, which is the current longest
string that we have,

00:10:12.880 --> 00:10:17.101
we pass an index to a list of strings
so we know at what point

00:10:17.120 --> 00:10:20.469
we're in terms of the search and then we pass
in the list.

00:10:20.480 --> 00:10:24.321
The recursive approach will split things
up so we take

00:10:24.321 --> 00:10:27.430
the first string in our list

00:10:27.440 --> 00:10:30.479
based on where the index is and we
compare it to

00:10:30.480 --> 00:10:33.521
the longest string of the rest of the list.

00:10:33.521 --> 00:10:39.979
That calls the method recursively and we can solve the problem. If you

00:10:40.000 --> 00:10:41.371
wanted to use that

00:10:41.371 --> 00:10:45.910
it will be a little bit tricky to do it
directly from the file; we could probably

00:10:45.920 --> 00:10:49.080
use memory mapping to do that, but it
will be quite involved.

00:10:49.080 --> 00:10:53.130
A simpler way is simply to read all the
lines into an ArrayList

00:10:53.130 --> 00:10:56.260
and then use that as our

00:10:56.260 --> 00:11:00.140
list that we pass into our method. We
start with an empty string, we

00:11:00.160 --> 00:11:03.310
start with position 0 in our list and
then

00:11:03.310 --> 00:11:06.360
the method will be called recursively
and we'll find

00:11:06.360 --> 00:11:09.699
longest string. This is good.

00:11:09.699 --> 00:11:13.511
So that no explicit loop, we've got no
mutable state,

00:11:13.520 --> 00:11:17.379
so we have a functional solution. In theory,

00:11:17.379 --> 00:11:21.922
well, unfortunately, the problem with this
is not really a usable one

00:11:21.922 --> 00:11:25.147
because if we had large set of data firstly we are

00:11:25.147 --> 00:11:29.180
going to read all that data
from the file into

00:11:29.200 --> 00:11:32.270
an ArrayList, so we need to make sure we've
got as much memory as

00:11:32.270 --> 00:11:33.721
the size the file.

00:11:33.760 --> 00:11:37.450
But then we're also going to create a new stack
frame

00:11:37.450 --> 00:11:41.250
for every line in the file. We're going to call
recursively

00:11:41.280 --> 00:11:46.070
generate new stack frame for every line.
That's more than likely, if we've got a

00:11:46.080 --> 00:11:49.490
file of any size going to generate an OutOfMemoryException.

00:11:49.520 --> 00:11:52.930
We will just run out of memory before we
can actually process everything.

00:11:52.960 --> 00:11:57.900
So let's go back to stream API,

00:11:57.920 --> 00:12:01.010
which is really what we're trying to do.
We're trying to find out how to use

00:12:01.040 --> 00:12:04.620
the stream API to solve this problem and

00:12:04.640 --> 00:12:08.530
if you look at the stream API we tend to
use this well-known pattern

00:12:08.560 --> 00:12:13.830
of filter, map, reduce. And in the case of
this particular problem

00:12:13.840 --> 00:12:17.500
we don't need to do any filtering,
because we're looking for the longest

00:12:17.500 --> 00:12:18.150
line

00:12:18.160 --> 00:12:21.360
in the file, so we're not trying to

00:12:21.360 --> 00:12:25.130
reduce that in terms that we're not
trying to eliminate any of the data

00:12:25.130 --> 00:12:28.640
to create subset. We also don't need to use
map,

00:12:28.640 --> 00:12:32.390
because we're not trying to convert from
anything, we're simply interested in

00:12:32.400 --> 00:12:37.230
each of the lines and whichever is the
longest. So all we're interested in here

00:12:37.230 --> 00:12:41.050
is reduce and

00:12:41.050 --> 00:12:45.200
if we recall the actual definition
of the reduce method from

00:12:45.200 --> 00:12:48.260
earlier in the course we'll see that

00:12:48.260 --> 00:12:51.330
the reduce method takes an accumulator

00:12:51.360 --> 00:12:54.550
as a parameter and the accumulator is

00:12:54.560 --> 00:12:58.370
a binary operator and, again, remember
back when we talked about the

00:12:58.400 --> 00:13:01.580
functional interfaces that been included
in the

00:13:01.600 --> 00:13:04.900
java.util.function package, BinaryOperator

00:13:04.900 --> 00:13:08.390
is in effect a BiFunction where

00:13:08.400 --> 00:13:12.760
you got two inputs and an output where all
the types

00:13:12.760 --> 00:13:16.240
are of the same so we going to take two inputs

00:13:16.240 --> 00:13:19.540
and generate an output of the same type.
The

00:13:19.540 --> 00:13:24.990
output of the final reduce is an
Optional.

00:13:24.990 --> 00:13:28.350
What we need to do to solve this problem
is to find

00:13:28.350 --> 00:13:32.390
the right accumulator, so we need to determine
what is the correct

00:13:32.400 --> 00:13:35.850
BinaryOperator, where we take two inputs
and generate an

00:13:35.850 --> 00:13:41.430
output in order to solve the problem. Again, if we go
back to looking at the reduce

00:13:41.440 --> 00:13:45.040
method definition what we find is

00:13:45.040 --> 00:13:49.540
that the accumulator is described as something
which takes the partial result

00:13:49.540 --> 00:13:53.290
and the next element and returns a new
partial result.

00:13:53.290 --> 00:13:58.370
In effect what it's doing is the same as a
recursive solution.

00:13:58.400 --> 00:14:01.420
So it's saying to take the

00:14:01.440 --> 00:14:05.020
first element of the stream and compare
against

00:14:05.040 --> 00:14:08.950
that and determine which is the longest
of those lines.

00:14:08.960 --> 00:14:12.470
Which obviously is that the first one
and then we'll compare against the rest.

00:14:12.480 --> 00:14:16.300
So we then apply the function
again,

00:14:16.320 --> 00:14:19.400
where we say to take the next element and
compare

00:14:19.400 --> 00:14:23.050
against our partial result, which is the
longest line we've found so far.

00:14:23.050 --> 00:14:28.430
We can effectively apply this reduce
operation multiple times, or the

00:14:28.430 --> 00:14:31.780
accumulator operation multiple
times for each line.

00:14:31.780 --> 00:14:35.340
We're processing the partial result against
the

00:14:35.360 --> 00:14:40.620
next string in our input stream. We don't
have all

00:14:40.640 --> 00:14:44.210
the stack frames because internally this
is not being done through

00:14:44.240 --> 00:14:47.540
an actual recursion, so we don't have to
worry about the

00:14:47.540 --> 00:14:51.490
impact on performance. What we end up with them

00:14:51.520 --> 00:14:55.980
is the solution. Same idea, we're
taking the lines

00:14:56.000 --> 00:14:59.490
read from the file and this time we're passing
it to

00:14:59.520 --> 00:15:03.480
out reduce method. This is a terminal
operation, so it

00:15:03.480 --> 00:15:07.030
won't return another stream and the

00:15:07.040 --> 00:15:10.570
the function that we're going to use in terms
of that

00:15:10.570 --> 00:15:13.630
takes two inputs: x and y which

00:15:13.630 --> 00:15:17.180
are strings and then compares the length
for those strings and

00:15:17.200 --> 00:15:22.350
returns whichever is the longest. The key
thing here

00:15:22.350 --> 00:15:25.770
is X, because in this case

00:15:25.770 --> 00:15:30.120
X is effectively maintaining the state for us

00:15:30.120 --> 00:15:34.210
but always holding the longest string
that we've found so far.

00:15:34.240 --> 00:15:36.460
This is our partial result.

00:15:36.480 --> 00:15:40.110
So as we read the elements on the
input stream,

00:15:40.110 --> 00:15:44.900
X is always going to represent the longest
string that we've found so far

00:15:44.900 --> 00:15:48.340
in the input stream, y is going to be

00:15:48.340 --> 00:15:51.520
the next element in the input stream. So
we're simply comparing the

00:15:51.520 --> 00:15:54.750
longest as we've found so far with the

00:15:54.750 --> 00:15:59.030
next element and determining whether the new partial result

00:15:59.040 --> 00:16:02.150
is the current one or the

00:16:02.160 --> 00:16:06.180
string that we just read. Now

00:16:06.180 --> 00:16:10.300
I showed this to an engineer in our team
and he said, ah yes, that's very good,

00:16:10.320 --> 00:16:14.660
but there's actually a simpler solution,
because you can use

00:16:14.660 --> 00:16:18.520
max. Remember max is just a specialized form

00:16:18.520 --> 00:16:22.110
over reduction but we also have another
form of max

00:16:22.110 --> 00:16:25.170
where you can pass a Comparator as a
parameter.

00:16:25.200 --> 00:16:29.000
We end up with simple solution where
we can simply say

00:16:29.000 --> 00:16:32.470
take the lines from a file as our stream source

00:16:32.480 --> 00:16:35.800
and pass that to max which uses

00:16:35.800 --> 00:16:39.060
a function, in this case it's ToIntFunction

00:16:39.060 --> 00:16:42.310
so that will generate integers as
results

00:16:42.320 --> 00:16:46.570
based on what we want to do in this case
it's going to be

00:16:46.570 --> 00:16:49.590
using length of the strings. So ComparingInt is a

00:16:49.600 --> 00:16:54.520
static method on Comparator we can
simply convert strings into lengths

00:16:54.520 --> 00:16:57.870
and then we will compare our strings

00:16:57.870 --> 00:17:01.140
based on length and return the maximum
of those.

00:17:01.140 --> 00:17:04.220
And then again that returns an Optional so

00:17:04.240 --> 00:17:07.639
we can get the results from that. But the
important thing here

00:17:07.639 --> 00:17:11.791
is to understand that what we're doing
is

00:17:11.791 --> 00:17:14.880
using reduction. To take the stream and

00:17:14.880 --> 00:17:19.150
reduce it to a single
value and

00:17:19.150 --> 00:17:22.929
the way that the reduction works is
defined

00:17:22.960 --> 00:17:26.051
by the accumulator. The accumulator

00:17:26.080 --> 00:17:29.800
is BinaryOperator, so it's one that takes
two inputs

00:17:29.800 --> 00:17:33.430
and returns an output all of the same type.

00:17:33.440 --> 00:17:37.070
And the accumulator is applied
successively to stream elements,

00:17:37.070 --> 00:17:40.070
so it gives us the effective recursive

00:17:40.080 --> 00:17:44.700
operation that we've seen in the
past. The reduce method

00:17:44.720 --> 00:17:48.440
maintains the partial result as state,

00:17:48.440 --> 00:17:52.130
but we don't see that explicitly, so we
don't need to worry about it.

00:17:52.160 --> 00:17:56.860
The important thing to take away from
this part of the lesson is that you do

00:17:56.880 --> 00:18:00.820
need to think differently. You need to stop
thinking in terms of loops,

00:18:00.820 --> 00:18:04.330
explicit loops, you need to stop thinking in terms
of explicit

00:18:04.330 --> 00:18:07.600
state and move to the idea of

00:18:07.600 --> 00:18:11.000
chaining together method calls having,

00:18:11.000 --> 00:18:15.410
in effect, we could achieve recursive processing in
order to give you this

00:18:15.440 --> 00:18:18.560
approach of

00:18:18.560 --> 00:18:23.780
how you repeatedly process data. And that
is the end

00:18:23.780 --> 00:18:25.600
of section 1 of this lesson.

