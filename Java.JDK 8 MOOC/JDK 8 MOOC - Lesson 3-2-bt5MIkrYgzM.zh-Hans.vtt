WEBVTT
Kind: captions
Language: zh-Hans

00:00:00.750 --> 00:00:03.290
 [音乐] 

00:00:13.580 --> 00:00:15.820
您好，欢迎来到第二部分

00:00:15.820 --> 00:00:19.390
第三课在这一部分，我们将讨论

00:00:19.390 --> 00:00:23.130
有限和无限流以及我们如何处理这些流。 

00:00:23.130 --> 00:00:26.680
如果我们看Java 

00:00:26.680 --> 00:00:30.090
我们来看命令式处理

00:00:30.090 --> 00:00:34.100
我们经常遇到不知道要多久的情况

00:00:34.100 --> 00:00:38.100
需要运行一个循环。所以我们必须处理

00:00:38.100 --> 00:00:41.190
我们循环的不确定链接。 

00:00:41.190 --> 00:00:44.820
我们可以很轻松地做到这一点。所以我们可以使用这样的东西

00:00:44.820 --> 00:00:49.470
在我们有一个while循环的地方，我们只说while为真。所以从理论上讲，循环是

00:00:49.470 --> 00:00:53.040
无穷。在循环中，我们进行了一些处理，因此

00:00:53.040 --> 00:00:56.360
我们正在做某事，然后我们进行了测试。 

00:00:56.360 --> 00:00:59.690
我们测试一下是否符合某些条件

00:00:59.690 --> 00:01:02.850
如果是这样，我们可以跳出循环。 

00:01:02.850 --> 00:01:06.520
在该条件为真之前，将继续执行此循环， 

00:01:06.520 --> 00:01:10.860
因此将无限期循环直到该语句为真

00:01:10.860 --> 00:01:14.780
然后我们将打破它。现在

00:01:14.780 --> 00:01:18.549
对于流，请记住我们没有显式循环， 

00:01:18.549 --> 00:01:22.549
那么我们如何使用无限流

00:01:22.549 --> 00:01:26.549
并决定我们要停止使用它

00:01:26.549 --> 00:01:29.940
流？我们可以使用两件事： 

00:01:29.940 --> 00:01:33.600
我们可以使用findFirst终端操作， 

00:01:33.600 --> 00:01:37.869
或者我们可以使用findAny。请记住，这些之间的区别

00:01:37.869 --> 00:01:40.990
是findFirst与之合作的， 

00:01:40.990 --> 00:01:45.280
顺序流和并行流，findAny 

00:01:45.280 --> 00:01:49.549
适用于您无需担心的并行流

00:01:49.549 --> 00:01:53.030
找到结果的任何特定流。所以

00:01:53.030 --> 00:01:56.650
您可以找到任何并行线程中的任何一个

00:01:56.650 --> 00:01:59.670
可以找到合适的值

00:01:59.670 --> 00:02:03.280
这将终止流。这实际上意味着什么

00:02:03.280 --> 00:02:07.290
是findAny给您不确定的结果

00:02:07.290 --> 00:02:11.909
如果您重复应用同一组数据。如果您使用findFirst 

00:02:11.909 --> 00:02:14.819
无论您是否正在使用

00:02:14.819 --> 00:02:15.590
顺序的

00:02:15.590 --> 00:02:18.360
或并行流。 

00:02:18.360 --> 00:02:21.909
举个例子，我在这里是

00:02:21.909 --> 00:02:25.500
使用Random类，我将创建

00:02:25.500 --> 00:02:29.940
无限的随机整数流，然后

00:02:29.940 --> 00:02:33.629
我想做的是一次终止该视频流

00:02:33.629 --> 00:02:37.150
我发现一个大于256的数字。 

00:02:37.150 --> 00:02:40.720
在这种情况下，我只是说findFirst而我使用

00:02:40.720 --> 00:02:44.500
 Lambda表达式，表示我是否大于256 

00:02:44.500 --> 00:02:47.569
将返回true，然后将终止

00:02:47.569 --> 00:02:50.859
流和r将设置为该值

00:02:50.859 --> 00:02:53.970
的随机数是，但我们知道它将大于

00:02:53.970 --> 00:02:59.310
 256.现在也有情况

00:02:59.310 --> 00:03:03.140
在这里使用无限流，但实际上需要

00:03:03.140 --> 00:03:06.140
它是无限的，所以您不想终止该流，而是想要继续

00:03:06.140 --> 00:03:08.400
在应用程序运行期间一直使用它。 

00:03:08.400 --> 00:03:12.560
在这种情况下，我们将什么用作终端操作？ 

00:03:12.560 --> 00:03:16.159
您会认为终端操作意味着您实际上是

00:03:16.159 --> 00:03:17.280
终止流， 

00:03:17.280 --> 00:03:21.829
因此它会停止，但我们不想这样做。在这种情况下

00:03:21.829 --> 00:03:25.870
我们可以使用forEach方法，这是一个很好的例子

00:03:25.870 --> 00:03:30.540
 forEach方法实际上是适用的。我们将在本课程的稍后部分讨论。 

00:03:30.540 --> 00:03:34.579
在这里，forEach方法消耗

00:03:34.579 --> 00:03:38.299
输入流上的每个元素，但不是

00:03:38.299 --> 00:03:41.470
终止它，所以我们可以消耗它很重要

00:03:41.470 --> 00:03:46.530
流中的元素，但实际上并没有终止它。 

00:03:46.530 --> 00:03:50.790
如果我们看一个例子，我在这里得到的是我为

00:03:50.790 --> 00:03:51.769
特定项目

00:03:51.769 --> 00:03:55.910
我有一个温度传感器，而温度传感器提供了

00:03:55.910 --> 00:03:59.699
一组字符串的温度值。 

00:03:59.699 --> 00:04:03.280
只要它正在运行，我就可以无限做

00:04:03.280 --> 00:04:06.989
您会收到几行文字，这为您提供了有关

00:04:06.989 --> 00:04:09.930
传感器的温度。 

00:04:09.930 --> 00:04:14.620
我想做的就是阅读华氏度的读数， 

00:04:14.620 --> 00:04:18.340
并将其转换为摄氏温度另一件事是

00:04:18.340 --> 00:04:21.959
返回的文本末尾总是大写F 

00:04:21.959 --> 00:04:25.280
表示是华氏温度。我也想

00:04:25.280 --> 00:04:29.440
通知侦听器（如果存在）的更改

00:04:29.440 --> 00:04:33.860
如果温度变化。这是我的代码。 

00:04:33.860 --> 00:04:38.150
我有我的ThermalReader，它是BufferedReader，我使用了lines方法

00:04:38.150 --> 00:04:41.620
提取一行文本作为流， 

00:04:41.620 --> 00:04:45.230
传递了mapToDouble，然后仅使用

00:04:45.230 --> 00:04:49.100
 parseDouble并从字符串末尾删除F， 

00:04:49.100 --> 00:04:54.270
因此我们可以将温度转换为双精度值。将其传递到地图中

00:04:54.270 --> 00:04:58.050
将其从华氏温度转换为摄氏温度。 

00:04:58.050 --> 00:05:02.450
将其传递给过滤器，以便我们可以测试是否

00:05:02.450 --> 00:05:05.550
当前温度与新温度不同。 

00:05:05.550 --> 00:05:09.130
然后用窥视

00:05:09.130 --> 00:05:12.790
取任何不同的值

00:05:12.790 --> 00:05:16.510
看看我们是否有一个听众。因此，我对侦听器使用了Optional； 

00:05:16.510 --> 00:05:20.950
如果存在，那么我们通过调用temperatureChanged来更新侦听器

00:05:20.950 --> 00:05:21.660
方法

00:05:21.660 --> 00:05:25.410
传递新的温度。终止流

00:05:25.410 --> 00:05:29.590
我们使用forEach，在这种情况下，forEach将要做什么

00:05:29.590 --> 00:05:33.070
是消耗温度，这将设置

00:05:33.070 --> 00:05:36.070
当前温度为新值。 

00:05:36.070 --> 00:05:39.830
总结本节， 

00:05:39.830 --> 00:05:43.570
我们可以看到我们可以同时拥有有限的流

00:05:43.570 --> 00:05:46.890
和无限以及我们如何使用它取决于

00:05:46.890 --> 00:05:52.030
我们实际如何使用。众所周知，与Java中的命令式编程不同

00:05:52.030 --> 00:05:52.580
它， 

00:05:52.580 --> 00:05:57.169
我们没有一个源源不断的概念。但您可以终止

00:05:57.169 --> 00:05:58.010
流， 

00:05:58.010 --> 00:06:01.160
使用findFirst或findAny基于

00:06:01.160 --> 00:06:04.990
条件在某一点上为真。所以我们可以拥有

00:06:04.990 --> 00:06:08.100
处理的想法，直到我们到达那个点

00:06:08.100 --> 00:06:10.300
事情是真的。 

00:06:10.300 --> 00:06:14.160
如果我们要使用无限流，则可以无限使用。 

00:06:14.160 --> 00:06:17.530
我们可以使用forEach方法来消耗

00:06:17.530 --> 00:06:20.920
流中的元素，但没有实际终止

00:06:20.920 --> 00:06:24.870
正在生成的流。那

00:06:24.870 --> 00:06:26.710
是本节课程的结尾。 

