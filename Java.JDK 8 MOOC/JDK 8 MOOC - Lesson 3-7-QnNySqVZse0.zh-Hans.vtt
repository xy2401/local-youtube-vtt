WEBVTT
Kind: captions
Language: zh-Hans

00:00:00.750 --> 00:00:03.320
 [音乐] 

00:00:13.269 --> 00:00:15.840
您好，欢迎来到第7节

00:00:15.840 --> 00:00:19.300
第3课的内容

00:00:19.300 --> 00:00:22.750
我想回顾的整个课程

00:00:22.750 --> 00:00:26.189
我们研究了3个方面的所有不同方面

00:00:26.189 --> 00:00:31.489
我们一直在做的课程。首先

00:00:31.489 --> 00:00:36.760
让我们回顾一下Lambda表达式。关于Lambda表达式的重要事项

00:00:36.760 --> 00:00:39.140
是它现在给我们一种简单的方法

00:00:39.140 --> 00:00:44.010
定义行为。我们可以分配给变量的行为， 

00:00:44.010 --> 00:00:48.160
我们可以作为参数传递的行为。而不是使用

00:00:48.160 --> 00:00:51.379
这些我们以前使用过的匿名内部类

00:00:51.379 --> 00:00:55.320
相当复杂的语法，非常简单，非常简洁

00:00:55.320 --> 00:00:58.670
允许我们将行为作为参数传递。 

00:00:58.670 --> 00:01:01.730
在哪里可以使用Lambda表达式

00:01:01.730 --> 00:01:05.940
在您将要使用的对象类型的任何地方

00:01:05.940 --> 00:01:10.330
您要分配给它的参数还是变量都是功能接口。 

00:01:10.330 --> 00:01:13.440
请记住，功能接口是具有

00:01:13.440 --> 00:01:17.820
只是一种抽象方法，但这并不一定意味着

00:01:17.820 --> 00:01:21.660
现在在JDK 8中，它在接口中只有一种方法。 

00:01:21.660 --> 00:01:24.670
 Lambda表达式的作用

00:01:24.670 --> 00:01:28.740
提供了该抽象方法的实现。 

00:01:28.740 --> 00:01:33.100
您可以将Lambda表达式视为一种方法，但是请记住它没有关联

00:01:33.100 --> 00:01:36.380
因此，它是一个匿名函数。 

00:01:36.380 --> 00:01:41.110
就流API而言

00:01:41.110 --> 00:01:45.520
这给我们带来了一种运作流程的方式

00:01:45.520 --> 00:01:48.720
这样我们就可以处理数据收集。 

00:01:48.720 --> 00:01:52.140
数据元素的数量可以用这种方式处理。 

00:01:52.140 --> 00:01:55.950
我们可以获取资源

00:01:55.950 --> 00:02:00.440
从不同的地方流。集合API 

00:02:00.440 --> 00:02:04.780
有很多方法可以做到这一点，但是还有其他地方

00:02:04.780 --> 00:02:08.340
在可以从中获取流的标准类中。 

00:02:08.340 --> 00:02:14.230
在文件方面，在目录，zip文件等方面。 

00:02:14.230 --> 00:02:17.540
关于流的重要一点是可以对其进行处理

00:02:17.540 --> 00:02:21.760
顺序或并行，并且在大多数情况下， 

00:02:21.760 --> 00:02:25.420
处理的方式，无论是顺序的还是并行的

00:02:25.420 --> 00:02:30.909
不会影响结果，并且无论使用什么代码都完全相同

00:02:30.909 --> 00:02:32.019
处理方式。 

00:02:32.019 --> 00:02:35.220
在结构上

00:02:35.220 --> 00:02:40.370
流您有一个源，然后可能是中间操作

00:02:40.370 --> 00:02:44.439
还有一些形成终端操作。如何

00:02:44.439 --> 00:02:47.540
中间操作以及终端操作方式

00:02:47.540 --> 00:02:51.540
实际上有效的方法通常是使用Lambda表达式定义的。 

00:02:51.540 --> 00:02:54.959
这就是Lambda表达式引入JDK 8的原因

00:02:54.959 --> 00:03:00.409
这样我们就可以以简单的方式构建流API。终端操作

00:03:00.409 --> 00:03:04.069
因为我们不知道他们是否会真正返回

00:03:04.069 --> 00:03:07.329
值返回可选值，并且

00:03:07.329 --> 00:03:11.959
可选类现在使我们能够避免过去遇到的许多问题

00:03:11.959 --> 00:03:15.030
使用空引用并可能具有

00:03:15.030 --> 00:03:19.090
 NullPointerException。将所有这些东西放在一起

00:03:19.090 --> 00:03:22.790
我们现在有了一种编程的函数式风格

00:03:22.790 --> 00:03:29.769
用Java提供给我们。作为Java真正重要的事情之一

00:03:29.769 --> 00:03:30.540
程序员

00:03:30.540 --> 00:03:33.769
当您使用Lambda表达式和流时

00:03:33.769 --> 00:03:37.979
是你确实需要换个角度思考。你要做的

00:03:37.979 --> 00:03:42.479
是您必须停止命令式思考，停止在以下方面思考

00:03:42.479 --> 00:03:43.159
循环

00:03:43.159 --> 00:03:47.379
停止思考使用可变状态和变量来保持

00:03:47.379 --> 00:03:50.709
价值观。从功能上思考

00:03:50.709 --> 00:03:55.190
记住我们在本课程中所做的事情。认为， 

00:03:55.190 --> 00:03:58.299
而不是使用循环，而是一个显式循环

00:03:58.299 --> 00:04:01.939
使用递归，将一系列方法调用链接在一起

00:04:01.939 --> 00:04:03.199
功能顺序

00:04:03.199 --> 00:04:07.349
提供重复的行为。 

00:04:07.349 --> 00:04:11.840
如果要使用forEach方法，请在使用前仔细考虑

00:04:11.840 --> 00:04:12.530
实际上做到了。 

00:04:12.530 --> 00:04:16.139
有没有更实用的方法来代替forEach方法？ 

00:04:16.139 --> 00:04:20.109
如果您只是打印出值，那很好，但是如果您尝试操作

00:04:20.109 --> 00:04:20.989
东西

00:04:20.989 --> 00:04:24.849
在forEach语句中，那么您可能确实需要

00:04:24.849 --> 00:04:25.930
代替它

00:04:25.930 --> 00:04:29.680
具有更多功能代码。流

00:04:29.680 --> 00:04:33.590
可以是无限的，但无限的流不需要永远持续下去。 

00:04:33.590 --> 00:04:37.460
我们看到使用findFirst或findAny之类的东西

00:04:37.460 --> 00:04:40.510
您可以终止无限流

00:04:40.510 --> 00:04:45.400
在满足特定条件的特定时间点。 

00:04:45.400 --> 00:04:48.860
另一件事，因为我们可以

00:04:48.860 --> 00:04:52.170
在流中并行执行代码

00:04:52.170 --> 00:04:56.110
不要总是认为代码会更快地执行。 

00:04:56.110 --> 00:05:01.040
是的，并行使您可以同时执行多项操作， 

00:05:01.040 --> 00:05:04.640
但是并行流始终会涉及更多工作。 

00:05:04.640 --> 00:05:08.910
有时，这比顺序执行的速度更快。 

00:05:08.910 --> 00:05:13.910
至此，为期三周的课程结束了。 

00:05:13.910 --> 00:05:18.160
希望您喜欢我们经历的一切，希望您发现很多

00:05:18.160 --> 00:05:19.660
有用的信息在这里

00:05:19.660 --> 00:05:23.080
它可以帮助您了解如何使用Lambda表达式， 

00:05:23.080 --> 00:05:26.700
如何使用流以及如何发展

00:05:26.700 --> 00:05:30.490
使用Java的代码更干净，更优雅。 

00:05:30.490 --> 00:05:31.590
非常感谢你

