WEBVTT
Kind: captions
Language: en

00:00:00.460 --> 00:00:04.300 align:start position:0%
 
[Music]

00:00:04.300 --> 00:00:04.310 align:start position:0%
[Music]
 

00:00:04.310 --> 00:00:07.610 align:start position:0%
[Music]
hi<00:00:05.310><c> my</c><00:00:05.759><c> name</c><00:00:05.970><c> is</c><00:00:06.060><c> Chris</c><00:00:06.270><c> Haggerty</c><00:00:06.690><c> I</c><00:00:06.870><c> work</c><00:00:07.470><c> in</c>

00:00:07.610 --> 00:00:07.620 align:start position:0%
hi my name is Chris Haggerty I work in
 

00:00:07.620 --> 00:00:09.980 align:start position:0%
hi my name is Chris Haggerty I work in
the<00:00:07.710><c> Java</c><00:00:07.919><c> platform</c><00:00:08.189><c> group</c><00:00:08.639><c> at</c><00:00:08.760><c> Oracle</c><00:00:09.090><c> and</c>

00:00:09.980 --> 00:00:09.990 align:start position:0%
the Java platform group at Oracle and
 

00:00:09.990 --> 00:00:11.060 align:start position:0%
the Java platform group at Oracle and
today<00:00:10.200><c> I'm</c><00:00:10.410><c> going</c><00:00:10.530><c> to</c><00:00:10.620><c> be</c><00:00:10.679><c> talking</c><00:00:10.830><c> about</c>

00:00:11.060 --> 00:00:11.070 align:start position:0%
today I'm going to be talking about
 

00:00:11.070 --> 00:00:13.520 align:start position:0%
today I'm going to be talking about
handling<00:00:11.639><c> response</c><00:00:12.030><c> data</c><00:00:12.240><c> with</c><00:00:12.809><c> the</c><00:00:12.900><c> Java</c><00:00:13.139><c> 11</c>

00:00:13.520 --> 00:00:13.530 align:start position:0%
handling response data with the Java 11
 

00:00:13.530 --> 00:00:19.189 align:start position:0%
handling response data with the Java 11
HTTP<00:00:14.400><c> client</c><00:00:17.180><c> in</c><00:00:18.180><c> this</c><00:00:18.330><c> session</c><00:00:18.600><c> we're</c><00:00:19.050><c> going</c>

00:00:19.189 --> 00:00:19.199 align:start position:0%
HTTP client in this session we're going
 

00:00:19.199 --> 00:00:20.779 align:start position:0%
HTTP client in this session we're going
to<00:00:19.289><c> take</c><00:00:19.529><c> a</c><00:00:19.560><c> high-level</c><00:00:19.980><c> look</c><00:00:20.279><c> at</c><00:00:20.550><c> three</c>

00:00:20.779 --> 00:00:20.789 align:start position:0%
to take a high-level look at three
 

00:00:20.789 --> 00:00:22.550 align:start position:0%
to take a high-level look at three
active<00:00:21.090><c> streams</c><00:00:21.359><c> interfaces</c><00:00:22.080><c> in</c><00:00:22.230><c> the</c><00:00:22.320><c> Java</c>

00:00:22.550 --> 00:00:22.560 align:start position:0%
active streams interfaces in the Java
 

00:00:22.560 --> 00:00:25.429 align:start position:0%
active streams interfaces in the Java
platform<00:00:22.830><c> and</c><00:00:23.279><c> how</c><00:00:23.490><c> they</c><00:00:23.640><c> operate</c><00:00:24.170><c> using</c><00:00:25.170><c> this</c>

00:00:25.429 --> 00:00:25.439 align:start position:0%
platform and how they operate using this
 

00:00:25.439 --> 00:00:27.920 align:start position:0%
platform and how they operate using this
knowledge<00:00:25.680><c> we</c><00:00:26.160><c> will</c><00:00:26.279><c> then</c><00:00:26.490><c> see</c><00:00:26.789><c> how</c><00:00:27.119><c> the</c><00:00:27.180><c> HTTP</c>

00:00:27.920 --> 00:00:27.930 align:start position:0%
knowledge we will then see how the HTTP
 

00:00:27.930 --> 00:00:30.589 align:start position:0%
knowledge we will then see how the HTTP
client<00:00:28.380><c> leverages</c><00:00:29.039><c> these</c><00:00:29.220><c> interfaces</c><00:00:29.730><c> to</c>

00:00:30.589 --> 00:00:30.599 align:start position:0%
client leverages these interfaces to
 

00:00:30.599 --> 00:00:33.799 align:start position:0%
client leverages these interfaces to
handle<00:00:30.960><c> request</c><00:00:31.320><c> and</c><00:00:31.560><c> response</c><00:00:31.740><c> bodies</c><00:00:32.809><c> will</c>

00:00:33.799 --> 00:00:33.809 align:start position:0%
handle request and response bodies will
 

00:00:33.809 --> 00:00:35.389 align:start position:0%
handle request and response bodies will
work<00:00:33.989><c> through</c><00:00:34.260><c> an</c><00:00:34.350><c> example</c><00:00:34.649><c> of</c><00:00:34.950><c> how</c><00:00:35.070><c> to</c><00:00:35.130><c> write</c>

00:00:35.389 --> 00:00:35.399 align:start position:0%
work through an example of how to write
 

00:00:35.399 --> 00:00:37.790 align:start position:0%
work through an example of how to write
a<00:00:35.430><c> custom</c><00:00:35.790><c> response</c><00:00:36.719><c> body</c><00:00:36.960><c> subscriber</c><00:00:37.530><c> and</c>

00:00:37.790 --> 00:00:37.800 align:start position:0%
a custom response body subscriber and
 

00:00:37.800 --> 00:00:40.310 align:start position:0%
a custom response body subscriber and
how<00:00:38.579><c> to</c><00:00:38.640><c> interoperate</c><00:00:39.090><c> with</c><00:00:39.600><c> existing</c><00:00:39.930><c> flow</c>

00:00:40.310 --> 00:00:40.320 align:start position:0%
how to interoperate with existing flow
 

00:00:40.320 --> 00:00:44.630 align:start position:0%
how to interoperate with existing flow
publishers<00:00:40.860><c> and</c><00:00:41.129><c> subscribers</c><00:00:43.640><c> before</c>

00:00:44.630 --> 00:00:44.640 align:start position:0%
publishers and subscribers before
 

00:00:44.640 --> 00:00:46.490 align:start position:0%
publishers and subscribers before
looking<00:00:44.940><c> at</c><00:00:45.120><c> the</c><00:00:45.270><c> reactive</c><00:00:45.660><c> streams</c><00:00:45.960><c> it</c><00:00:46.260><c> is</c>

00:00:46.490 --> 00:00:46.500 align:start position:0%
looking at the reactive streams it is
 

00:00:46.500 --> 00:00:48.170 align:start position:0%
looking at the reactive streams it is
useful<00:00:46.890><c> to</c><00:00:46.920><c> remind</c><00:00:47.250><c> ourselves</c><00:00:47.460><c> of</c><00:00:47.910><c> the</c>

00:00:48.170 --> 00:00:48.180 align:start position:0%
useful to remind ourselves of the
 

00:00:48.180 --> 00:00:50.270 align:start position:0%
useful to remind ourselves of the
classic<00:00:48.539><c> producer/consumer</c><00:00:49.530><c> paradigm</c><00:00:49.980><c> and</c>

00:00:50.270 --> 00:00:50.280 align:start position:0%
classic producer/consumer paradigm and
 

00:00:50.280 --> 00:00:52.700 align:start position:0%
classic producer/consumer paradigm and
some<00:00:51.030><c> of</c><00:00:51.149><c> the</c><00:00:51.270><c> potential</c><00:00:51.600><c> concerns</c><00:00:52.440><c> and</c>

00:00:52.700 --> 00:00:52.710 align:start position:0%
some of the potential concerns and
 

00:00:52.710 --> 00:00:55.670 align:start position:0%
some of the potential concerns and
issues<00:00:52.800><c> with</c><00:00:53.160><c> it</c><00:00:53.899><c> typically</c><00:00:54.899><c> the</c><00:00:55.230><c> producer</c>

00:00:55.670 --> 00:00:55.680 align:start position:0%
issues with it typically the producer
 

00:00:55.680 --> 00:00:58.369 align:start position:0%
issues with it typically the producer
generates<00:00:56.129><c> items</c><00:00:56.730><c> or</c><00:00:56.879><c> data</c><00:00:57.050><c> puts</c><00:00:58.050><c> them</c><00:00:58.199><c> in</c><00:00:58.289><c> a</c>

00:00:58.369 --> 00:00:58.379 align:start position:0%
generates items or data puts them in a
 

00:00:58.379 --> 00:01:00.950 align:start position:0%
generates items or data puts them in a
queue<00:00:58.649><c> or</c><00:00:58.859><c> buffer</c><00:00:59.129><c> of</c><00:00:59.280><c> sorts</c><00:00:59.660><c> at</c><00:01:00.660><c> the</c><00:01:00.750><c> same</c>

00:01:00.950 --> 00:01:00.960 align:start position:0%
queue or buffer of sorts at the same
 

00:01:00.960 --> 00:01:03.529 align:start position:0%
queue or buffer of sorts at the same
time<00:01:01.289><c> the</c><00:01:01.680><c> consumer</c><00:01:01.980><c> consumes</c><00:01:02.489><c> the</c><00:01:02.670><c> data</c><00:01:02.850><c> by</c>

00:01:03.529 --> 00:01:03.539 align:start position:0%
time the consumer consumes the data by
 

00:01:03.539 --> 00:01:05.570 align:start position:0%
time the consumer consumes the data by
removing<00:01:04.049><c> items</c><00:01:04.290><c> one</c><00:01:04.920><c> at</c><00:01:04.949><c> a</c><00:01:05.129><c> time</c><00:01:05.309><c> from</c><00:01:05.519><c> the</c>

00:01:05.570 --> 00:01:05.580 align:start position:0%
removing items one at a time from the
 

00:01:05.580 --> 00:01:08.690 align:start position:0%
removing items one at a time from the
buffer<00:01:05.909><c> the</c><00:01:06.799><c> problem</c><00:01:07.799><c> was</c><00:01:07.950><c> how</c><00:01:08.070><c> to</c><00:01:08.100><c> make</c><00:01:08.430><c> sure</c>

00:01:08.690 --> 00:01:08.700 align:start position:0%
buffer the problem was how to make sure
 

00:01:08.700 --> 00:01:10.460 align:start position:0%
buffer the problem was how to make sure
that<00:01:08.970><c> the</c><00:01:09.090><c> producer</c><00:01:09.510><c> is</c><00:01:09.600><c> not</c><00:01:09.780><c> blocked</c><00:01:10.140><c> when</c>

00:01:10.460 --> 00:01:10.470 align:start position:0%
that the producer is not blocked when
 

00:01:10.470 --> 00:01:12.440 align:start position:0%
that the producer is not blocked when
the<00:01:10.560><c> buffer</c><00:01:10.830><c> becomes</c><00:01:11.100><c> full</c><00:01:11.369><c> or</c><00:01:11.729><c> that</c><00:01:12.330><c> the</c>

00:01:12.440 --> 00:01:12.450 align:start position:0%
the buffer becomes full or that the
 

00:01:12.450 --> 00:01:14.960 align:start position:0%
the buffer becomes full or that the
consumer<00:01:12.960><c> is</c><00:01:13.140><c> not</c><00:01:13.290><c> trying</c><00:01:13.650><c> to</c><00:01:13.770><c> get</c><00:01:13.950><c> data</c><00:01:14.189><c> when</c>

00:01:14.960 --> 00:01:14.970 align:start position:0%
consumer is not trying to get data when
 

00:01:14.970 --> 00:01:16.760 align:start position:0%
consumer is not trying to get data when
the<00:01:15.060><c> buffer</c><00:01:15.330><c> is</c><00:01:15.479><c> empty</c><00:01:15.840><c> and</c><00:01:16.020><c> had</c><00:01:16.740><c> a</c>

00:01:16.760 --> 00:01:16.770 align:start position:0%
the buffer is empty and had a
 

00:01:16.770 --> 00:01:18.890 align:start position:0%
the buffer is empty and had a
notification<00:01:17.220><c> mechanism</c><00:01:18.030><c> to</c><00:01:18.180><c> implement</c><00:01:18.450><c> such</c>

00:01:18.890 --> 00:01:18.900 align:start position:0%
notification mechanism to implement such
 

00:01:18.900 --> 00:01:21.740 align:start position:0%
notification mechanism to implement such
if<00:01:19.170><c> it</c><00:01:19.320><c> happens</c><00:01:19.970><c> as</c><00:01:20.970><c> well</c><00:01:21.210><c> as</c><00:01:21.360><c> trying</c><00:01:21.630><c> to</c>

00:01:21.740 --> 00:01:21.750 align:start position:0%
if it happens as well as trying to
 

00:01:21.750 --> 00:01:24.820 align:start position:0%
if it happens as well as trying to
determine<00:01:22.080><c> a</c><00:01:22.320><c> reasonable</c><00:01:22.560><c> buffer</c><00:01:23.159><c> size</c>

00:01:24.820 --> 00:01:24.830 align:start position:0%
determine a reasonable buffer size
 

00:01:24.830 --> 00:01:28.609 align:start position:0%
determine a reasonable buffer size
moving<00:01:25.830><c> to</c><00:01:25.979><c> reactive</c><00:01:26.340><c> streams</c><00:01:27.080><c> the</c><00:01:28.080><c> producer</c>

00:01:28.609 --> 00:01:28.619 align:start position:0%
moving to reactive streams the producer
 

00:01:28.619 --> 00:01:30.710 align:start position:0%
moving to reactive streams the producer
is<00:01:28.770><c> known</c><00:01:29.189><c> as</c><00:01:29.430><c> a</c><00:01:29.460><c> publisher</c><00:01:29.970><c> that</c><00:01:30.270><c> publishes</c>

00:01:30.710 --> 00:01:30.720 align:start position:0%
is known as a publisher that publishes
 

00:01:30.720 --> 00:01:34.370 align:start position:0%
is known as a publisher that publishes
items<00:01:32.360><c> the</c><00:01:33.360><c> consumer</c><00:01:33.840><c> is</c><00:01:33.990><c> known</c><00:01:34.200><c> as</c><00:01:34.350><c> a</c>

00:01:34.370 --> 00:01:34.380 align:start position:0%
items the consumer is known as a
 

00:01:34.380 --> 00:01:37.880 align:start position:0%
items the consumer is known as a
subscriber<00:01:34.950><c> that</c><00:01:35.369><c> receives</c><00:01:35.729><c> items</c><00:01:36.890><c> the</c>

00:01:37.880 --> 00:01:37.890 align:start position:0%
subscriber that receives items the
 

00:01:37.890 --> 00:01:39.740 align:start position:0%
subscriber that receives items the
publisher<00:01:38.310><c> has</c><00:01:38.490><c> a</c><00:01:38.520><c> single</c><00:01:38.939><c> method</c><00:01:39.119><c> subscribed</c>

00:01:39.740 --> 00:01:39.750 align:start position:0%
publisher has a single method subscribed
 

00:01:39.750 --> 00:01:42.859 align:start position:0%
publisher has a single method subscribed
that<00:01:39.990><c> takes</c><00:01:40.200><c> a</c><00:01:40.320><c> subscriber</c><00:01:41.390><c> the</c><00:01:42.390><c> subscriber</c>

00:01:42.859 --> 00:01:42.869 align:start position:0%
that takes a subscriber the subscriber
 

00:01:42.869 --> 00:01:46.190 align:start position:0%
that takes a subscriber the subscriber
has<00:01:43.020><c> four</c><00:01:43.320><c> methods</c><00:01:44.060><c> unsubscribe</c><00:01:45.060><c> on</c><00:01:45.329><c> next</c><00:01:46.079><c> on</c>

00:01:46.190 --> 00:01:46.200 align:start position:0%
has four methods unsubscribe on next on
 

00:01:46.200 --> 00:01:49.280 align:start position:0%
has four methods unsubscribe on next on
error<00:01:46.979><c> and</c><00:01:47.250><c> uncomplete</c><00:01:47.899><c> we'll</c><00:01:48.899><c> take</c><00:01:49.079><c> a</c><00:01:49.110><c> look</c>

00:01:49.280 --> 00:01:49.290 align:start position:0%
error and uncomplete we'll take a look
 

00:01:49.290 --> 00:01:52.760 align:start position:0%
error and uncomplete we'll take a look
at<00:01:49.409><c> these</c><00:01:49.500><c> now</c><00:01:51.290><c> subscriber</c><00:01:52.290><c> can</c><00:01:52.619><c> be</c>

00:01:52.760 --> 00:01:52.770 align:start position:0%
at these now subscriber can be
 

00:01:52.770 --> 00:01:54.800 align:start position:0%
at these now subscriber can be
subscribed<00:01:53.250><c> to</c><00:01:53.399><c> a</c><00:01:53.520><c> publisher</c><00:01:54.000><c> by</c><00:01:54.299><c> calling</c><00:01:54.689><c> the</c>

00:01:54.800 --> 00:01:54.810 align:start position:0%
subscribed to a publisher by calling the
 

00:01:54.810 --> 00:01:57.200 align:start position:0%
subscribed to a publisher by calling the
publisher<00:01:55.229><c> subscribed</c><00:01:55.799><c> method</c><00:01:56.130><c> and</c><00:01:56.310><c> passing</c>

00:01:57.200 --> 00:01:57.210 align:start position:0%
publisher subscribed method and passing
 

00:01:57.210 --> 00:02:00.560 align:start position:0%
publisher subscribed method and passing
the<00:01:57.299><c> subscriber</c><00:01:58.610><c> to</c><00:01:59.610><c> publish</c><00:01:59.880><c> our</c><00:02:00.000><c> den</c><00:02:00.240><c> calls</c>

00:02:00.560 --> 00:02:00.570 align:start position:0%
the subscriber to publish our den calls
 

00:02:00.570 --> 00:02:02.810 align:start position:0%
the subscriber to publish our den calls
the<00:02:00.840><c> subscribers</c><00:02:01.439><c> unsubscribe</c><00:02:02.130><c> method</c><00:02:02.490><c> with</c>

00:02:02.810 --> 00:02:02.820 align:start position:0%
the subscribers unsubscribe method with
 

00:02:02.820 --> 00:02:05.600 align:start position:0%
the subscribers unsubscribe method with
a<00:02:02.850><c> subscription</c><00:02:03.740><c> this</c><00:02:04.740><c> handshake</c><00:02:05.159><c> between</c>

00:02:05.600 --> 00:02:05.610 align:start position:0%
a subscription this handshake between
 

00:02:05.610 --> 00:02:08.119 align:start position:0%
a subscription this handshake between
the<00:02:05.939><c> subscriber</c><00:02:06.390><c> and</c><00:02:06.630><c> the</c><00:02:06.719><c> publisher</c><00:02:07.170><c> results</c>

00:02:08.119 --> 00:02:08.129 align:start position:0%
the subscriber and the publisher results
 

00:02:08.129 --> 00:02:09.589 align:start position:0%
the subscriber and the publisher results
in<00:02:08.220><c> the</c><00:02:08.280><c> publisher</c><00:02:08.700><c> having</c><00:02:09.000><c> a</c><00:02:09.090><c> reference</c><00:02:09.450><c> to</c>

00:02:09.589 --> 00:02:09.599 align:start position:0%
in the publisher having a reference to
 

00:02:09.599 --> 00:02:11.380 align:start position:0%
in the publisher having a reference to
the<00:02:09.750><c> subscriber</c>

00:02:11.380 --> 00:02:11.390 align:start position:0%
the subscriber
 

00:02:11.390 --> 00:02:12.790 align:start position:0%
the subscriber
subscriber<00:02:11.870><c> having</c><00:02:12.290><c> the</c><00:02:12.380><c> publisher</c>

00:02:12.790 --> 00:02:12.800 align:start position:0%
subscriber having the publisher
 

00:02:12.800 --> 00:02:14.860 align:start position:0%
subscriber having the publisher
subscription<00:02:13.460><c> that</c><00:02:14.090><c> it</c><00:02:14.240><c> was</c><00:02:14.330><c> given</c><00:02:14.690><c> in</c>

00:02:14.860 --> 00:02:14.870 align:start position:0%
subscription that it was given in
 

00:02:14.870 --> 00:02:18.130 align:start position:0%
subscription that it was given in
unsubscribing<00:02:16.150><c> it</c><00:02:17.150><c> is</c><00:02:17.360><c> the</c><00:02:17.540><c> subscription</c>

00:02:18.130 --> 00:02:18.140 align:start position:0%
unsubscribing it is the subscription
 

00:02:18.140 --> 00:02:19.960 align:start position:0%
unsubscribing it is the subscription
that<00:02:18.380><c> acts</c><00:02:18.620><c> as</c><00:02:18.830><c> a</c><00:02:18.890><c> mechanism</c><00:02:19.160><c> for</c><00:02:19.850><c> the</c>

00:02:19.960 --> 00:02:19.970 align:start position:0%
that acts as a mechanism for the
 

00:02:19.970 --> 00:02:21.670 align:start position:0%
that acts as a mechanism for the
subscriber<00:02:20.390><c> to</c><00:02:20.630><c> send</c><00:02:20.870><c> signals</c><00:02:21.319><c> to</c><00:02:21.560><c> the</c>

00:02:21.670 --> 00:02:21.680 align:start position:0%
subscriber to send signals to the
 

00:02:21.680 --> 00:02:26.020 align:start position:0%
subscriber to send signals to the
publisher<00:02:22.190><c> for</c><00:02:23.620><c> example</c><00:02:24.640><c> using</c><00:02:25.640><c> this</c>

00:02:26.020 --> 00:02:26.030 align:start position:0%
publisher for example using this
 

00:02:26.030 --> 00:02:27.940 align:start position:0%
publisher for example using this
subscription<00:02:26.450><c> the</c><00:02:26.870><c> subscriber</c><00:02:27.350><c> can</c><00:02:27.620><c> request</c>

00:02:27.940 --> 00:02:27.950 align:start position:0%
subscription the subscriber can request
 

00:02:27.950 --> 00:02:30.480 align:start position:0%
subscription the subscriber can request
a<00:02:28.220><c> number</c><00:02:28.550><c> of</c><00:02:28.640><c> items</c><00:02:29.030><c> from</c><00:02:29.150><c> the</c><00:02:29.300><c> publisher</c><00:02:29.690><c> the</c>

00:02:30.480 --> 00:02:30.490 align:start position:0%
a number of items from the publisher the
 

00:02:30.490 --> 00:02:34.000 align:start position:0%
a number of items from the publisher the
publisher<00:02:31.490><c> can</c><00:02:32.180><c> then</c><00:02:32.390><c> publish</c><00:02:32.630><c> at</c><00:02:33.020><c> most</c><00:02:33.350><c> that</c>

00:02:34.000 --> 00:02:34.010 align:start position:0%
publisher can then publish at most that
 

00:02:34.010 --> 00:02:35.980 align:start position:0%
publisher can then publish at most that
number<00:02:34.400><c> of</c><00:02:34.490><c> items</c><00:02:34.850><c> by</c><00:02:35.420><c> calling</c><00:02:35.870><c> the</c>

00:02:35.980 --> 00:02:35.990 align:start position:0%
number of items by calling the
 

00:02:35.990 --> 00:02:38.800 align:start position:0%
number of items by calling the
subscribers<00:02:36.650><c> on</c><00:02:36.800><c> next</c><00:02:37.400><c> methods</c><00:02:37.820><c> and</c><00:02:37.970><c> number</c>

00:02:38.800 --> 00:02:38.810 align:start position:0%
subscribers on next methods and number
 

00:02:38.810 --> 00:02:42.340 align:start position:0%
subscribers on next methods and number
of<00:02:38.840><c> times</c><00:02:39.110><c> each</c><00:02:39.470><c> with</c><00:02:40.250><c> a</c><00:02:40.280><c> single</c><00:02:40.489><c> item</c><00:02:41.350><c> this</c>

00:02:42.340 --> 00:02:42.350 align:start position:0%
of times each with a single item this
 

00:02:42.350 --> 00:02:44.140 align:start position:0%
of times each with a single item this
request<00:02:42.739><c> mechanism</c><00:02:43.459><c> provides</c><00:02:43.910><c> the</c>

00:02:44.140 --> 00:02:44.150 align:start position:0%
request mechanism provides the
 

00:02:44.150 --> 00:02:46.600 align:start position:0%
request mechanism provides the
subscriber<00:02:44.630><c> with</c><00:02:44.870><c> back</c><00:02:45.170><c> pressure</c><00:02:45.500><c> since</c><00:02:46.370><c> it</c>

00:02:46.600 --> 00:02:46.610 align:start position:0%
subscriber with back pressure since it
 

00:02:46.610 --> 00:02:48.520 align:start position:0%
subscriber with back pressure since it
is<00:02:46.760><c> in</c><00:02:46.910><c> control</c><00:02:47.209><c> of</c><00:02:47.330><c> the</c><00:02:47.690><c> maximum</c><00:02:48.170><c> number</c><00:02:48.500><c> of</c>

00:02:48.520 --> 00:02:48.530 align:start position:0%
is in control of the maximum number of
 

00:02:48.530 --> 00:02:52.420 align:start position:0%
is in control of the maximum number of
items<00:02:48.739><c> that</c><00:02:49.400><c> may</c><00:02:49.550><c> be</c><00:02:49.580><c> sent</c><00:02:49.970><c> to</c><00:02:50.150><c> it</c><00:02:50.980><c> if</c><00:02:51.980><c> the</c>

00:02:52.420 --> 00:02:52.430 align:start position:0%
items that may be sent to it if the
 

00:02:52.430 --> 00:02:55.110 align:start position:0%
items that may be sent to it if the
publisher<00:02:52.760><c> has</c><00:02:53.030><c> no</c><00:02:53.209><c> more</c><00:02:53.390><c> items</c><00:02:53.750><c> to</c><00:02:54.019><c> publish</c>

00:02:55.110 --> 00:02:55.120 align:start position:0%
publisher has no more items to publish
 

00:02:55.120 --> 00:02:58.030 align:start position:0%
publisher has no more items to publish
then<00:02:56.120><c> it</c><00:02:56.269><c> calls</c><00:02:56.540><c> subscribers</c><00:02:57.440><c> on</c><00:02:57.620><c> complete</c>

00:02:58.030 --> 00:02:58.040 align:start position:0%
then it calls subscribers on complete
 

00:02:58.040 --> 00:03:00.850 align:start position:0%
then it calls subscribers on complete
method<00:02:58.330><c> this</c><00:02:59.330><c> informs</c><00:02:59.870><c> the</c><00:03:00.019><c> subscriber</c><00:03:00.500><c> that</c>

00:03:00.850 --> 00:03:00.860 align:start position:0%
method this informs the subscriber that
 

00:03:00.860 --> 00:03:03.220 align:start position:0%
method this informs the subscriber that
the<00:03:00.950><c> publisher</c><00:03:01.480><c> regardless</c><00:03:02.480><c> of</c><00:03:02.630><c> demand</c><00:03:02.959><c> for</c>

00:03:03.220 --> 00:03:03.230 align:start position:0%
the publisher regardless of demand for
 

00:03:03.230 --> 00:03:06.009 align:start position:0%
the publisher regardless of demand for
more<00:03:03.440><c> items</c><00:03:03.650><c> will</c><00:03:04.519><c> publish</c><00:03:04.850><c> no</c><00:03:05.150><c> more</c><00:03:05.390><c> items</c><00:03:05.630><c> to</c>

00:03:06.009 --> 00:03:06.019 align:start position:0%
more items will publish no more items to
 

00:03:06.019 --> 00:03:09.850 align:start position:0%
more items will publish no more items to
dis<00:03:06.380><c> subscriber</c><00:03:08.290><c> if</c><00:03:09.290><c> the</c><00:03:09.530><c> publisher</c>

00:03:09.850 --> 00:03:09.860 align:start position:0%
dis subscriber if the publisher
 

00:03:09.860 --> 00:03:12.130 align:start position:0%
dis subscriber if the publisher
encounters<00:03:10.400><c> an</c><00:03:10.519><c> error</c><00:03:10.670><c> say</c><00:03:11.570><c> reading</c><00:03:11.810><c> from</c><00:03:12.019><c> a</c>

00:03:12.130 --> 00:03:12.140 align:start position:0%
encounters an error say reading from a
 

00:03:12.140 --> 00:03:14.740 align:start position:0%
encounters an error say reading from a
file<00:03:12.350><c> or</c><00:03:12.380><c> network</c><00:03:12.970><c> then</c><00:03:13.970><c> it</c><00:03:14.090><c> informs</c><00:03:14.660><c> the</c>

00:03:14.740 --> 00:03:14.750 align:start position:0%
file or network then it informs the
 

00:03:14.750 --> 00:03:17.199 align:start position:0%
file or network then it informs the
subscriber<00:03:15.290><c> of</c><00:03:15.560><c> this</c><00:03:15.980><c> by</c><00:03:16.670><c> calling</c><00:03:17.120><c> the</c>

00:03:17.199 --> 00:03:17.209 align:start position:0%
subscriber of this by calling the
 

00:03:17.209 --> 00:03:19.449 align:start position:0%
subscriber of this by calling the
subscribers<00:03:17.810><c> on</c><00:03:17.959><c> error</c><00:03:18.440><c> method</c><00:03:18.890><c> with</c><00:03:19.430><c> a</c>

00:03:19.449 --> 00:03:19.459 align:start position:0%
subscribers on error method with a
 

00:03:19.459 --> 00:03:23.819 align:start position:0%
subscribers on error method with a
suitable<00:03:19.940><c> trouble</c><00:03:20.510><c> indicating</c><00:03:21.320><c> the</c><00:03:21.410><c> problem</c>

00:03:23.819 --> 00:03:23.829 align:start position:0%
 
 

00:03:23.829 --> 00:03:26.650 align:start position:0%
 
the<00:03:24.829><c> Java</c><00:03:25.070><c> platform</c><00:03:25.340><c> provides</c><00:03:26.060><c> support</c><00:03:26.480><c> for</c>

00:03:26.650 --> 00:03:26.660 align:start position:0%
the Java platform provides support for
 

00:03:26.660 --> 00:03:28.180 align:start position:0%
the Java platform provides support for
reactive<00:03:27.079><c> streams</c><00:03:27.380><c> to</c><00:03:27.829><c> a</c><00:03:27.890><c> number</c><00:03:28.160><c> of</c>

00:03:28.180 --> 00:03:28.190 align:start position:0%
reactive streams to a number of
 

00:03:28.190 --> 00:03:30.699 align:start position:0%
reactive streams to a number of
interfaces<00:03:28.850><c> in</c><00:03:29.209><c> the</c><00:03:29.390><c> java.util</c><00:03:30.200><c> concurrent</c>

00:03:30.699 --> 00:03:30.709 align:start position:0%
interfaces in the java.util concurrent
 

00:03:30.709 --> 00:03:33.370 align:start position:0%
interfaces in the java.util concurrent
flow<00:03:30.980><c> class</c><00:03:31.600><c> there</c><00:03:32.600><c> is</c><00:03:32.690><c> a</c><00:03:32.720><c> publisher</c><00:03:33.200><c> for</c>

00:03:33.370 --> 00:03:33.380 align:start position:0%
flow class there is a publisher for
 

00:03:33.380 --> 00:03:35.860 align:start position:0%
flow class there is a publisher for
publishing<00:03:33.709><c> items</c><00:03:34.160><c> a</c><00:03:34.600><c> subscriber</c><00:03:35.600><c> for</c>

00:03:35.860 --> 00:03:35.870 align:start position:0%
publishing items a subscriber for
 

00:03:35.870 --> 00:03:38.890 align:start position:0%
publishing items a subscriber for
receiving<00:03:36.200><c> items</c><00:03:36.650><c> a</c><00:03:37.329><c> subscriber</c><00:03:38.329><c> subscribes</c>

00:03:38.890 --> 00:03:38.900 align:start position:0%
receiving items a subscriber subscribes
 

00:03:38.900 --> 00:03:41.470 align:start position:0%
receiving items a subscriber subscribes
to<00:03:39.079><c> the</c><00:03:39.260><c> publisher</c><00:03:39.680><c> and</c><00:03:39.860><c> can</c><00:03:40.340><c> issue</c><00:03:40.579><c> requests</c>

00:03:41.470 --> 00:03:41.480 align:start position:0%
to the publisher and can issue requests
 

00:03:41.480 --> 00:03:46.120 align:start position:0%
to the publisher and can issue requests
for<00:03:42.470><c> items</c><00:03:42.530><c> as</c><00:03:43.040><c> needed</c><00:03:43.840><c> the</c><00:03:44.840><c> HTTP</c><00:03:45.650><c> client</c>

00:03:46.120 --> 00:03:46.130 align:start position:0%
for items as needed the HTTP client
 

00:03:46.130 --> 00:03:48.970 align:start position:0%
for items as needed the HTTP client
models<00:03:46.730><c> request</c><00:03:47.120><c> body</c><00:03:47.420><c> using</c><00:03:48.200><c> a</c><00:03:48.290><c> subtype</c><00:03:48.799><c> of</c>

00:03:48.970 --> 00:03:48.980 align:start position:0%
models request body using a subtype of
 

00:03:48.980 --> 00:03:51.870 align:start position:0%
models request body using a subtype of
flow<00:03:49.340><c> publisher</c><00:03:49.880><c> a</c><00:03:50.060><c> request</c><00:03:50.870><c> body</c><00:03:51.110><c> publisher</c>

00:03:51.870 --> 00:03:51.880 align:start position:0%
flow publisher a request body publisher
 

00:03:51.880 --> 00:03:54.880 align:start position:0%
flow publisher a request body publisher
the<00:03:52.880><c> HTTP</c><00:03:53.600><c> client</c><00:03:54.019><c> subscribes</c><00:03:54.500><c> to</c><00:03:54.650><c> this</c>

00:03:54.880 --> 00:03:54.890 align:start position:0%
the HTTP client subscribes to this
 

00:03:54.890 --> 00:03:57.400 align:start position:0%
the HTTP client subscribes to this
publisher<00:03:55.430><c> when</c><00:03:56.060><c> sending</c><00:03:56.540><c> a</c><00:03:56.660><c> request</c><00:03:56.840><c> to</c><00:03:57.260><c> has</c>

00:03:57.400 --> 00:03:57.410 align:start position:0%
publisher when sending a request to has
 

00:03:57.410 --> 00:04:00.940 align:start position:0%
publisher when sending a request to has
body<00:03:57.620><c> on</c><00:03:58.360><c> the</c><00:03:59.360><c> receiving</c><00:03:59.780><c> side</c><00:04:00.019><c> when</c><00:04:00.920><c> a</c>

00:04:00.940 --> 00:04:00.950 align:start position:0%
body on the receiving side when a
 

00:04:00.950 --> 00:04:02.710 align:start position:0%
body on the receiving side when a
response<00:04:01.370><c> code</c><00:04:01.640><c> and</c><00:04:01.880><c> headers</c><00:04:02.180><c> are</c><00:04:02.360><c> received</c>

00:04:02.710 --> 00:04:02.720 align:start position:0%
response code and headers are received
 

00:04:02.720 --> 00:04:05.910 align:start position:0%
response code and headers are received
the<00:04:03.320><c> HTTP</c><00:04:04.010><c> client</c><00:04:04.459><c> calls</c><00:04:04.730><c> the</c><00:04:05.120><c> body</c><00:04:05.329><c> hunger</c>

00:04:05.910 --> 00:04:05.920 align:start position:0%
the HTTP client calls the body hunger
 

00:04:05.920 --> 00:04:08.470 align:start position:0%
the HTTP client calls the body hunger
the<00:04:06.920><c> body</c><00:04:07.130><c> hunger</c><00:04:07.579><c> can</c><00:04:07.790><c> then</c><00:04:07.970><c> inspect</c><00:04:08.329><c> these</c>

00:04:08.470 --> 00:04:08.480 align:start position:0%
the body hunger can then inspect these
 

00:04:08.480 --> 00:04:10.990 align:start position:0%
the body hunger can then inspect these
values<00:04:08.900><c> if</c><00:04:09.079><c> it</c><00:04:09.200><c> wishes</c><00:04:09.380><c> before</c><00:04:10.190><c> creating</c><00:04:10.760><c> a</c>

00:04:10.990 --> 00:04:11.000 align:start position:0%
values if it wishes before creating a
 

00:04:11.000 --> 00:04:14.110 align:start position:0%
values if it wishes before creating a
body<00:04:11.299><c> subscriber</c><00:04:12.130><c> this</c><00:04:13.130><c> subscriber</c><00:04:13.640><c> returned</c>

00:04:14.110 --> 00:04:14.120 align:start position:0%
body subscriber this subscriber returned
 

00:04:14.120 --> 00:04:16.690 align:start position:0%
body subscriber this subscriber returned
by<00:04:14.269><c> the</c><00:04:14.329><c> body</c><00:04:14.570><c> hunter</c><00:04:14.959><c> will</c><00:04:15.769><c> be</c><00:04:15.950><c> used</c><00:04:16.280><c> to</c>

00:04:16.690 --> 00:04:16.700 align:start position:0%
by the body hunter will be used to
 

00:04:16.700 --> 00:04:18.550 align:start position:0%
by the body hunter will be used to
receive<00:04:17.000><c> and</c><00:04:17.269><c> process</c><00:04:17.419><c> the</c><00:04:17.780><c> actual</c><00:04:18.200><c> response</c>

00:04:18.550 --> 00:04:18.560 align:start position:0%
receive and process the actual response
 

00:04:18.560 --> 00:04:22.750 align:start position:0%
receive and process the actual response
body<00:04:18.769><c> bytes</c><00:04:19.720><c> the</c><00:04:20.720><c> HTTP</c><00:04:21.560><c> body</c><00:04:21.919><c> subscriber</c><00:04:22.460><c> is</c><00:04:22.700><c> a</c>

00:04:22.750 --> 00:04:22.760 align:start position:0%
body bytes the HTTP body subscriber is a
 

00:04:22.760 --> 00:04:24.670 align:start position:0%
body bytes the HTTP body subscriber is a
subtype<00:04:23.360><c> of</c><00:04:23.390><c> flow</c><00:04:23.810><c> subscriber</c>

00:04:24.670 --> 00:04:24.680 align:start position:0%
subtype of flow subscriber
 

00:04:24.680 --> 00:04:27.820 align:start position:0%
subtype of flow subscriber
and<00:04:25.000><c> httpclient</c><00:04:26.000><c> acts</c><00:04:26.870><c> as</c><00:04:27.169><c> a</c><00:04:27.199><c> publisher</c><00:04:27.710><c> of</c>

00:04:27.820 --> 00:04:27.830 align:start position:0%
and httpclient acts as a publisher of
 

00:04:27.830 --> 00:04:30.969 align:start position:0%
and httpclient acts as a publisher of
response<00:04:28.370><c> buddy</c><00:04:28.639><c> bytes</c><00:04:29.680><c> there</c><00:04:30.680><c> are</c><00:04:30.740><c> a</c><00:04:30.800><c> number</c>

00:04:30.969 --> 00:04:30.979 align:start position:0%
response buddy bytes there are a number
 

00:04:30.979 --> 00:04:32.590 align:start position:0%
response buddy bytes there are a number
of<00:04:31.130><c> factories</c><00:04:31.729><c> for</c><00:04:31.970><c> creating</c><00:04:32.389><c> body</c>

00:04:32.590 --> 00:04:32.600 align:start position:0%
of factories for creating body
 

00:04:32.600 --> 00:04:34.930 align:start position:0%
of factories for creating body
publishers<00:04:33.169><c> and</c><00:04:33.350><c> body</c><00:04:33.500><c> subscribers</c><00:04:34.190><c> for</c><00:04:34.729><c> most</c>

00:04:34.930 --> 00:04:34.940 align:start position:0%
publishers and body subscribers for most
 

00:04:34.940 --> 00:04:37.719 align:start position:0%
publishers and body subscribers for most
common<00:04:35.150><c> use</c><00:04:35.419><c> cases</c><00:04:35.800><c> like</c><00:04:36.800><c> publishing</c><00:04:37.370><c> request</c>

00:04:37.719 --> 00:04:37.729 align:start position:0%
common use cases like publishing request
 

00:04:37.729 --> 00:04:39.570 align:start position:0%
common use cases like publishing request
body<00:04:37.940><c> from</c><00:04:38.180><c> a</c><00:04:38.300><c> string</c><00:04:38.600><c> or</c><00:04:38.780><c> from</c><00:04:38.900><c> a</c><00:04:38.990><c> file</c><00:04:39.229><c> or</c>

00:04:39.570 --> 00:04:39.580 align:start position:0%
body from a string or from a file or
 

00:04:39.580 --> 00:04:41.920 align:start position:0%
body from a string or from a file or
converting<00:04:40.580><c> response</c><00:04:40.970><c> body</c><00:04:41.180><c> bytes</c><00:04:41.509><c> into</c><00:04:41.900><c> a</c>

00:04:41.920 --> 00:04:41.930 align:start position:0%
converting response body bytes into a
 

00:04:41.930 --> 00:04:46.600 align:start position:0%
converting response body bytes into a
string<00:04:42.289><c> or</c><00:04:42.500><c> streaming</c><00:04:42.919><c> them</c><00:04:43.160><c> to</c><00:04:43.370><c> a</c><00:04:43.400><c> file</c><00:04:45.610><c> in</c>

00:04:46.600 --> 00:04:46.610 align:start position:0%
string or streaming them to a file in
 

00:04:46.610 --> 00:04:48.310 align:start position:0%
string or streaming them to a file in
this<00:04:46.759><c> session</c><00:04:47.030><c> we're</c><00:04:47.449><c> going</c><00:04:47.630><c> to</c><00:04:47.720><c> focus</c><00:04:47.870><c> on</c><00:04:48.229><c> the</c>

00:04:48.310 --> 00:04:48.320 align:start position:0%
this session we're going to focus on the
 

00:04:48.320 --> 00:04:51.730 align:start position:0%
this session we're going to focus on the
response<00:04:49.360><c> body</c><00:04:50.360><c> handler</c><00:04:50.840><c> is</c><00:04:51.020><c> a</c><00:04:51.080><c> functional</c>

00:04:51.730 --> 00:04:51.740 align:start position:0%
response body handler is a functional
 

00:04:51.740 --> 00:04:53.409 align:start position:0%
response body handler is a functional
interface<00:04:52.160><c> that</c><00:04:52.460><c> has</c><00:04:52.520><c> a</c><00:04:52.669><c> single</c><00:04:52.940><c> methods</c>

00:04:53.409 --> 00:04:53.419 align:start position:0%
interface that has a single methods
 

00:04:53.419 --> 00:04:55.749 align:start position:0%
interface that has a single methods
apply<00:04:53.810><c> that</c><00:04:54.590><c> takes</c><00:04:54.860><c> a</c><00:04:54.949><c> response</c><00:04:55.340><c> info</c>

00:04:55.749 --> 00:04:55.759 align:start position:0%
apply that takes a response info
 

00:04:55.759 --> 00:04:58.770 align:start position:0%
apply that takes a response info
containing<00:04:56.720><c> the</c><00:04:56.810><c> status</c><00:04:57.169><c> code</c><00:04:57.349><c> and</c><00:04:57.620><c> headers</c>

00:04:58.770 --> 00:04:58.780 align:start position:0%
containing the status code and headers
 

00:04:58.780 --> 00:05:01.330 align:start position:0%
containing the status code and headers
the<00:04:59.780><c> body</c><00:04:59.990><c> handler</c><00:05:00.440><c> is</c><00:05:00.590><c> invoked</c><00:05:00.949><c> when</c><00:05:01.070><c> the</c>

00:05:01.330 --> 00:05:01.340 align:start position:0%
the body handler is invoked when the
 

00:05:01.340 --> 00:05:02.830 align:start position:0%
the body handler is invoked when the
response<00:05:01.639><c> status</c><00:05:01.880><c> code</c><00:05:02.270><c> and</c><00:05:02.419><c> headers</c><00:05:02.690><c> are</c>

00:05:02.830 --> 00:05:02.840 align:start position:0%
response status code and headers are
 

00:05:02.840 --> 00:05:05.589 align:start position:0%
response status code and headers are
available<00:05:03.289><c> but</c><00:05:03.919><c> before</c><00:05:04.370><c> the</c><00:05:04.639><c> actual</c><00:05:04.940><c> response</c>

00:05:05.589 --> 00:05:05.599 align:start position:0%
available but before the actual response
 

00:05:05.599 --> 00:05:08.409 align:start position:0%
available but before the actual response
body<00:05:05.840><c> bytes</c><00:05:06.169><c> have</c><00:05:06.349><c> been</c><00:05:06.530><c> received</c><00:05:07.240><c> the</c><00:05:08.240><c> body</c>

00:05:08.409 --> 00:05:08.419 align:start position:0%
body bytes have been received the body
 

00:05:08.419 --> 00:05:10.749 align:start position:0%
body bytes have been received the body
handler<00:05:08.840><c> can</c><00:05:09.020><c> inspect</c><00:05:09.380><c> the</c><00:05:10.220><c> response</c><00:05:10.520><c> code</c>

00:05:10.749 --> 00:05:10.759 align:start position:0%
handler can inspect the response code
 

00:05:10.759 --> 00:05:12.670 align:start position:0%
handler can inspect the response code
and<00:05:10.940><c> headers</c><00:05:11.210><c> before</c><00:05:11.780><c> returning</c><00:05:12.139><c> the</c><00:05:12.500><c> body</c>

00:05:12.670 --> 00:05:12.680 align:start position:0%
and headers before returning the body
 

00:05:12.680 --> 00:05:15.700 align:start position:0%
and headers before returning the body
subscriber<00:05:13.419><c> the</c><00:05:14.419><c> body</c><00:05:14.599><c> subscriber</c><00:05:15.139><c> will</c><00:05:15.500><c> then</c>

00:05:15.700 --> 00:05:15.710 align:start position:0%
subscriber the body subscriber will then
 

00:05:15.710 --> 00:05:17.589 align:start position:0%
subscriber the body subscriber will then
be<00:05:15.889><c> used</c><00:05:16.160><c> to</c><00:05:16.400><c> receive</c><00:05:16.669><c> the</c><00:05:16.849><c> actual</c><00:05:17.030><c> response</c>

00:05:17.589 --> 00:05:17.599 align:start position:0%
be used to receive the actual response
 

00:05:17.599 --> 00:05:22.600 align:start position:0%
be used to receive the actual response
body<00:05:17.840><c> bytes</c><00:05:20.470><c> body</c><00:05:21.470><c> subscriber</c><00:05:22.009><c> is</c><00:05:22.280><c> a</c><00:05:22.310><c> flow</c>

00:05:22.600 --> 00:05:22.610 align:start position:0%
body bytes body subscriber is a flow
 

00:05:22.610 --> 00:05:24.939 align:start position:0%
body bytes body subscriber is a flow
subscriber<00:05:23.180><c> of</c><00:05:23.449><c> an</c><00:05:23.900><c> aggregate</c><00:05:24.289><c> of</c><00:05:24.590><c> byte</c>

00:05:24.939 --> 00:05:24.949 align:start position:0%
subscriber of an aggregate of byte
 

00:05:24.949 --> 00:05:27.400 align:start position:0%
subscriber of an aggregate of byte
buffers<00:05:25.389><c> the</c><00:05:26.389><c> byte</c><00:05:26.599><c> buffers</c><00:05:26.990><c> contained</c>

00:05:27.400 --> 00:05:27.410 align:start position:0%
buffers the byte buffers contained
 

00:05:27.410 --> 00:05:30.580 align:start position:0%
buffers the byte buffers contained
response<00:05:27.860><c> body</c><00:05:28.099><c> bytes</c><00:05:28.960><c> by</c><00:05:29.960><c> the</c><00:05:30.020><c> subscriber</c>

00:05:30.580 --> 00:05:30.590 align:start position:0%
response body bytes by the subscriber
 

00:05:30.590 --> 00:05:32.860 align:start position:0%
response body bytes by the subscriber
has<00:05:30.860><c> a</c><00:05:31.010><c> single</c><00:05:31.490><c> abstract</c><00:05:31.970><c> method</c><00:05:32.300><c> get'</c><00:05:32.659><c> body</c>

00:05:32.860 --> 00:05:32.870 align:start position:0%
has a single abstract method get' body
 

00:05:32.870 --> 00:05:35.740 align:start position:0%
has a single abstract method get' body
that<00:05:33.770><c> returns</c><00:05:34.130><c> a</c><00:05:34.280><c> completion</c><00:05:34.760><c> stage</c><00:05:34.970><c> that</c>

00:05:35.740 --> 00:05:35.750 align:start position:0%
that returns a completion stage that
 

00:05:35.750 --> 00:05:38.920 align:start position:0%
that returns a completion stage that
completes<00:05:36.110><c> with</c><00:05:36.380><c> a</c><00:05:36.409><c> higher-level</c><00:05:37.360><c> type</c><00:05:38.360><c> that</c>

00:05:38.920 --> 00:05:38.930 align:start position:0%
completes with a higher-level type that
 

00:05:38.930 --> 00:05:40.990 align:start position:0%
completes with a higher-level type that
the<00:05:39.080><c> body</c><00:05:39.260><c> subscriber</c><00:05:39.770><c> implementation</c><00:05:40.610><c> will</c>

00:05:40.990 --> 00:05:41.000 align:start position:0%
the body subscriber implementation will
 

00:05:41.000 --> 00:05:44.469 align:start position:0%
the body subscriber implementation will
convert<00:05:41.360><c> the</c><00:05:41.479><c> response</c><00:05:41.810><c> body</c><00:05:42.050><c> bytes</c><00:05:42.349><c> into</c><00:05:43.479><c> the</c>

00:05:44.469 --> 00:05:44.479 align:start position:0%
convert the response body bytes into the
 

00:05:44.479 --> 00:05:46.240 align:start position:0%
convert the response body bytes into the
body<00:05:44.690><c> subscriber</c><00:05:45.169><c> class</c><00:05:45.470><c> contains</c><00:05:46.039><c> only</c>

00:05:46.240 --> 00:05:46.250 align:start position:0%
body subscriber class contains only
 

00:05:46.250 --> 00:05:49.240 align:start position:0%
body subscriber class contains only
study<00:05:46.789><c> static</c><00:05:47.330><c> factory</c><00:05:47.870><c> methods</c><00:05:48.199><c> and</c><00:05:48.440><c> these</c>

00:05:49.240 --> 00:05:49.250 align:start position:0%
study static factory methods and these
 

00:05:49.250 --> 00:05:51.430 align:start position:0%
study static factory methods and these
methods<00:05:49.550><c> are</c><00:05:49.970><c> factories</c><00:05:50.479><c> for</c><00:05:50.810><c> creating</c><00:05:51.229><c> body</c>

00:05:51.430 --> 00:05:51.440 align:start position:0%
methods are factories for creating body
 

00:05:51.440 --> 00:05:53.589 align:start position:0%
methods are factories for creating body
subscribers<00:05:52.130><c> that</c><00:05:52.820><c> can</c><00:05:52.970><c> be</c><00:05:53.090><c> used</c><00:05:53.300><c> for</c><00:05:53.449><c> most</c>

00:05:53.589 --> 00:05:53.599 align:start position:0%
subscribers that can be used for most
 

00:05:53.599 --> 00:05:56.860 align:start position:0%
subscribers that can be used for most
common<00:05:54.020><c> use</c><00:05:54.139><c> cases</c><00:05:55.240><c> by</c><00:05:56.240><c> converting</c><00:05:56.570><c> the</c>

00:05:56.860 --> 00:05:56.870 align:start position:0%
common use cases by converting the
 

00:05:56.870 --> 00:05:58.450 align:start position:0%
common use cases by converting the
response<00:05:57.169><c> body</c><00:05:57.380><c> into</c><00:05:57.800><c> a</c><00:05:57.830><c> byte</c><00:05:58.039><c> array</c><00:05:58.070><c> or</c>

00:05:58.450 --> 00:05:58.460 align:start position:0%
response body into a byte array or
 

00:05:58.460 --> 00:06:00.909 align:start position:0%
response body into a byte array or
string<00:05:58.759><c> or</c><00:05:58.970><c> streaming</c><00:05:59.870><c> it</c><00:06:00.050><c> to</c><00:06:00.199><c> a</c><00:06:00.229><c> file</c><00:06:00.500><c> or</c><00:06:00.740><c> an</c>

00:06:00.909 --> 00:06:00.919 align:start position:0%
string or streaming it to a file or an
 

00:06:00.919 --> 00:06:04.930 align:start position:0%
string or streaming it to a file or an
input<00:06:01.070><c> stream</c><00:06:03.250><c> let's</c><00:06:04.250><c> take</c><00:06:04.460><c> a</c><00:06:04.490><c> look</c><00:06:04.759><c> at</c>

00:06:04.930 --> 00:06:04.940 align:start position:0%
input stream let's take a look at
 

00:06:04.940 --> 00:06:06.909 align:start position:0%
input stream let's take a look at
writing<00:06:05.210><c> a</c><00:06:05.389><c> custom</c><00:06:05.780><c> body</c><00:06:05.990><c> subscriber</c><00:06:06.530><c> for</c>

00:06:06.909 --> 00:06:06.919 align:start position:0%
writing a custom body subscriber for
 

00:06:06.919 --> 00:06:12.310 align:start position:0%
writing a custom body subscriber for
handling<00:06:07.220><c> response</c><00:06:07.759><c> data</c><00:06:10.659><c> okay</c><00:06:11.690><c> so</c><00:06:12.110><c> let's</c>

00:06:12.310 --> 00:06:12.320 align:start position:0%
handling response data okay so let's
 

00:06:12.320 --> 00:06:13.839 align:start position:0%
handling response data okay so let's
take<00:06:12.470><c> a</c><00:06:12.500><c> look</c><00:06:12.830><c> at</c><00:06:12.949><c> how</c><00:06:13.070><c> to</c><00:06:13.130><c> write</c><00:06:13.340><c> a</c><00:06:13.400><c> custom</c>

00:06:13.839 --> 00:06:13.849 align:start position:0%
take a look at how to write a custom
 

00:06:13.849 --> 00:06:16.689 align:start position:0%
take a look at how to write a custom
body<00:06:14.090><c> hunger</c><00:06:14.509><c> and</c><00:06:14.630><c> body</c><00:06:14.780><c> subscriber</c><00:06:15.699><c> before</c>

00:06:16.689 --> 00:06:16.699 align:start position:0%
body hunger and body subscriber before
 

00:06:16.699 --> 00:06:18.760 align:start position:0%
body hunger and body subscriber before
doing<00:06:16.880><c> that</c><00:06:17.000><c> let's</c><00:06:17.750><c> take</c><00:06:17.930><c> a</c><00:06:17.960><c> look</c><00:06:18.229><c> at</c><00:06:18.440><c> how</c><00:06:18.590><c> one</c>

00:06:18.760 --> 00:06:18.770 align:start position:0%
doing that let's take a look at how one
 

00:06:18.770 --> 00:06:23.040 align:start position:0%
doing that let's take a look at how one
of<00:06:18.919><c> the</c><00:06:19.210><c> convenience</c><00:06:20.210><c> body</c><00:06:20.479><c> handlers</c><00:06:20.960><c> works</c>

00:06:23.040 --> 00:06:23.050 align:start position:0%
of the convenience body handlers works
 

00:06:23.050 --> 00:06:26.620 align:start position:0%
of the convenience body handlers works
so<00:06:24.050><c> here</c><00:06:24.320><c> we've</c><00:06:24.500><c> got</c><00:06:24.710><c> a</c><00:06:25.090><c> utility</c><00:06:26.090><c> get</c><00:06:26.270><c> method</c>

00:06:26.620 --> 00:06:26.630 align:start position:0%
so here we've got a utility get method
 

00:06:26.630 --> 00:06:30.219 align:start position:0%
so here we've got a utility get method
it<00:06:27.380><c> retrieves</c><00:06:27.800><c> a</c><00:06:28.099><c> given</c><00:06:28.460><c> URI</c><00:06:28.759><c> and</c><00:06:29.120><c> returns</c><00:06:30.020><c> the</c>

00:06:30.219 --> 00:06:30.229 align:start position:0%
it retrieves a given URI and returns the
 

00:06:30.229 --> 00:06:33.519 align:start position:0%
it retrieves a given URI and returns the
response<00:06:30.620><c> body</c><00:06:30.889><c> as</c><00:06:31.190><c> a</c><00:06:31.220><c> string</c><00:06:32.110><c> so</c><00:06:33.110><c> first</c><00:06:33.380><c> it</c>

00:06:33.519 --> 00:06:33.529 align:start position:0%
response body as a string so first it
 

00:06:33.529 --> 00:06:36.879 align:start position:0%
response body as a string so first it
creates<00:06:33.830><c> a</c><00:06:34.099><c> new</c><00:06:34.310><c> HTTP</c><00:06:35.150><c> client</c><00:06:35.570><c> over</c><00:06:36.469><c> which</c><00:06:36.650><c> the</c>

00:06:36.879 --> 00:06:36.889 align:start position:0%
creates a new HTTP client over which the
 

00:06:36.889 --> 00:06:37.460 align:start position:0%
creates a new HTTP client over which the
request

00:06:37.460 --> 00:06:37.470 align:start position:0%
request
 

00:06:37.470 --> 00:06:41.300 align:start position:0%
request
we<00:06:37.590><c> sent</c><00:06:38.120><c> and</c><00:06:39.120><c> it</c><00:06:39.300><c> builds</c><00:06:39.510><c> a</c><00:06:39.780><c> request</c><00:06:40.170><c> from</c><00:06:41.130><c> the</c>

00:06:41.300 --> 00:06:41.310 align:start position:0%
we sent and it builds a request from the
 

00:06:41.310 --> 00:06:44.630 align:start position:0%
we sent and it builds a request from the
given<00:06:41.550><c> URI</c><00:06:42.410><c> then</c><00:06:43.410><c> it</c><00:06:43.530><c> calls</c><00:06:43.740><c> the</c><00:06:43.920><c> send</c><00:06:44.160><c> async</c>

00:06:44.630 --> 00:06:44.640 align:start position:0%
given URI then it calls the send async
 

00:06:44.640 --> 00:06:47.960 align:start position:0%
given URI then it calls the send async
method<00:06:44.930><c> to</c><00:06:45.930><c> send</c><00:06:46.140><c> a</c><00:06:46.260><c> request</c><00:06:46.610><c> that</c><00:06:47.610><c> he</c><00:06:47.700><c> uses</c>

00:06:47.960 --> 00:06:47.970 align:start position:0%
method to send a request that he uses
 

00:06:47.970 --> 00:06:50.510 align:start position:0%
method to send a request that he uses
the<00:06:48.180><c> body</c><00:06:48.390><c> handlers</c><00:06:48.840><c> of</c><00:06:48.870><c> string</c><00:06:49.520><c> static</c>

00:06:50.510 --> 00:06:50.520 align:start position:0%
the body handlers of string static
 

00:06:50.520 --> 00:06:52.970 align:start position:0%
the body handlers of string static
factory<00:06:50.670><c> method</c><00:06:51.210><c> to</c><00:06:52.050><c> create</c><00:06:52.290><c> a</c><00:06:52.320><c> body</c><00:06:52.500><c> handler</c>

00:06:52.970 --> 00:06:52.980 align:start position:0%
factory method to create a body handler
 

00:06:52.980 --> 00:06:55.910 align:start position:0%
factory method to create a body handler
that<00:06:53.190><c> converts</c><00:06:54.180><c> the</c><00:06:54.390><c> response</c><00:06:54.750><c> body</c><00:06:54.930><c> bytes</c><00:06:55.290><c> to</c>

00:06:55.910 --> 00:06:55.920 align:start position:0%
that converts the response body bytes to
 

00:06:55.920 --> 00:06:58.970 align:start position:0%
that converts the response body bytes to
a<00:06:55.950><c> string</c><00:06:57.050><c> then</c><00:06:58.050><c> the</c><00:06:58.080><c> completable</c><00:06:58.590><c> future</c>

00:06:58.970 --> 00:06:58.980 align:start position:0%
a string then the completable future
 

00:06:58.980 --> 00:07:01.880 align:start position:0%
a string then the completable future
then<00:06:59.160><c> apply</c><00:06:59.430><c> method</c><00:06:59.790><c> maps</c><00:07:00.720><c> the</c><00:07:00.930><c> HTTP</c><00:07:01.650><c> response</c>

00:07:01.880 --> 00:07:01.890 align:start position:0%
then apply method maps the HTTP response
 

00:07:01.890 --> 00:07:05.000 align:start position:0%
then apply method maps the HTTP response
of<00:07:02.400><c> string</c><00:07:02.700><c> to</c><00:07:03.210><c> its</c><00:07:03.360><c> body</c><00:07:03.540><c> type</c><00:07:03.870><c> in</c><00:07:04.620><c> our</c><00:07:04.770><c> cases</c>

00:07:05.000 --> 00:07:05.010 align:start position:0%
of string to its body type in our cases
 

00:07:05.010 --> 00:07:07.520 align:start position:0%
of string to its body type in our cases
string<00:07:05.460><c> and</c><00:07:05.700><c> a</c><00:07:06.450><c> completable</c><00:07:06.900><c> future</c><00:07:07.350><c> of</c>

00:07:07.520 --> 00:07:07.530 align:start position:0%
string and a completable future of
 

00:07:07.530 --> 00:07:11.000 align:start position:0%
string and a completable future of
string<00:07:07.770><c> is</c><00:07:07.860><c> returned</c><00:07:09.140><c> so</c><00:07:10.140><c> we</c><00:07:10.230><c> can</c><00:07:10.350><c> see</c><00:07:10.500><c> example</c>

00:07:11.000 --> 00:07:11.010 align:start position:0%
string is returned so we can see example
 

00:07:11.010 --> 00:07:12.980 align:start position:0%
string is returned so we can see example
new<00:07:11.130><c> switch</c><00:07:11.310><c> of</c><00:07:11.550><c> this</c><00:07:11.730><c> get</c><00:07:12.060><c> methods</c><00:07:12.480><c> in</c><00:07:12.810><c> the</c>

00:07:12.980 --> 00:07:12.990 align:start position:0%
new switch of this get methods in the
 

00:07:12.990 --> 00:07:16.190 align:start position:0%
new switch of this get methods in the
main<00:07:13.140><c> method</c><00:07:13.520><c> so</c><00:07:14.520><c> here</c><00:07:14.550><c> we</c><00:07:14.850><c> can</c><00:07:15.000><c> see</c><00:07:15.180><c> the</c><00:07:16.020><c> get</c>

00:07:16.190 --> 00:07:16.200 align:start position:0%
main method so here we can see the get
 

00:07:16.200 --> 00:07:20.180 align:start position:0%
main method so here we can see the get
method<00:07:16.560><c> is</c><00:07:16.800><c> being</c><00:07:17.370><c> passed</c><00:07:17.670><c> URI</c><00:07:18.590><c> and</c><00:07:19.590><c> then</c><00:07:19.830><c> join</c>

00:07:20.180 --> 00:07:20.190 align:start position:0%
method is being passed URI and then join
 

00:07:20.190 --> 00:07:21.560 align:start position:0%
method is being passed URI and then join
is<00:07:20.400><c> being</c><00:07:20.580><c> called</c><00:07:20.760><c> on</c><00:07:21.030><c> the</c><00:07:21.150><c> computer</c><00:07:21.420><c> for</c>

00:07:21.560 --> 00:07:21.570 align:start position:0%
is being called on the computer for
 

00:07:21.570 --> 00:07:24.490 align:start position:0%
is being called on the computer for
future<00:07:21.900><c> that's</c><00:07:22.020><c> returns</c><00:07:23.060><c> this</c><00:07:24.060><c> blocks</c>

00:07:24.490 --> 00:07:24.500 align:start position:0%
future that's returns this blocks
 

00:07:24.500 --> 00:07:27.290 align:start position:0%
future that's returns this blocks
execution<00:07:25.500><c> until</c><00:07:25.710><c> the</c><00:07:26.100><c> string</c><00:07:26.490><c> response</c><00:07:27.090><c> body</c>

00:07:27.290 --> 00:07:27.300 align:start position:0%
execution until the string response body
 

00:07:27.300 --> 00:07:30.050 align:start position:0%
execution until the string response body
is<00:07:27.810><c> available</c><00:07:28.350><c> and</c><00:07:28.650><c> then</c><00:07:29.430><c> the</c><00:07:29.460><c> program</c><00:07:29.850><c> simply</c>

00:07:30.050 --> 00:07:30.060 align:start position:0%
is available and then the program simply
 

00:07:30.060 --> 00:07:39.080 align:start position:0%
is available and then the program simply
prints<00:07:30.540><c> out</c><00:07:30.660><c> the</c><00:07:30.690><c> body</c><00:07:31.550><c> so</c><00:07:32.550><c> let's</c><00:07:32.730><c> run</c><00:07:32.880><c> that</c><00:07:38.090><c> so</c>

00:07:39.080 --> 00:07:39.090 align:start position:0%
prints out the body so let's run that so
 

00:07:39.090 --> 00:07:40.940 align:start position:0%
prints out the body so let's run that so
here<00:07:39.270><c> we</c><00:07:39.390><c> can</c><00:07:39.480><c> see</c><00:07:39.660><c> the</c><00:07:39.810><c> response</c><00:07:40.020><c> body</c><00:07:40.470><c> string</c>

00:07:40.940 --> 00:07:40.950 align:start position:0%
here we can see the response body string
 

00:07:40.950 --> 00:07:44.230 align:start position:0%
here we can see the response body string
being<00:07:41.160><c> printed</c><00:07:41.340><c> out</c><00:07:41.550><c> and</c><00:07:41.820><c> it's</c><00:07:42.810><c> just</c><00:07:42.840><c> some</c><00:07:43.110><c> XML</c>

00:07:44.230 --> 00:07:44.240 align:start position:0%
being printed out and it's just some XML
 

00:07:44.240 --> 00:07:46.610 align:start position:0%
being printed out and it's just some XML
this<00:07:45.240><c> point</c><00:07:45.570><c> it'd</c><00:07:45.690><c> be</c><00:07:45.780><c> useful</c><00:07:46.169><c> to</c><00:07:46.290><c> see</c><00:07:46.470><c> the</c>

00:07:46.610 --> 00:07:46.620 align:start position:0%
this point it'd be useful to see the
 

00:07:46.620 --> 00:07:59.510 align:start position:0%
this point it'd be useful to see the
response<00:07:46.950><c> status</c><00:07:47.370><c> code</c><00:07:47.640><c> so</c><00:07:48.090><c> let's</c><00:07:48.120><c> print</c><00:07:48.510><c> that</c>

00:07:59.510 --> 00:07:59.520 align:start position:0%
 
 

00:07:59.520 --> 00:08:02.040 align:start position:0%
 
so<00:08:00.520><c> here</c><00:08:00.699><c> we</c><00:08:00.789><c> use</c><00:08:00.819><c> in</c><00:08:01.150><c> the</c><00:08:01.300><c> completable</c><00:08:01.659><c> future</c>

00:08:02.040 --> 00:08:02.050 align:start position:0%
so here we use in the completable future
 

00:08:02.050 --> 00:08:05.100 align:start position:0%
so here we use in the completable future
when<00:08:02.259><c> complete</c><00:08:02.620><c> methods</c><00:08:03.009><c> to</c><00:08:03.940><c> print</c><00:08:04.270><c> out</c><00:08:04.479><c> the</c>

00:08:05.100 --> 00:08:05.110 align:start position:0%
when complete methods to print out the
 

00:08:05.110 --> 00:08:07.260 align:start position:0%
when complete methods to print out the
status<00:08:05.470><c> code</c><00:08:05.650><c> really</c><00:08:06.550><c> we</c><00:08:06.819><c> should</c><00:08:07.000><c> be</c><00:08:07.060><c> checking</c>

00:08:07.260 --> 00:08:07.270 align:start position:0%
status code really we should be checking
 

00:08:07.270 --> 00:08:10.860 align:start position:0%
status code really we should be checking
that<00:08:07.659><c> the</c><00:08:08.080><c> response</c><00:08:08.949><c> value</c><00:08:09.159><c> is</c><00:08:09.520><c> none</c><00:08:09.789><c> no</c><00:08:10.000><c> in</c>

00:08:10.860 --> 00:08:10.870 align:start position:0%
that the response value is none no in
 

00:08:10.870 --> 00:08:13.920 align:start position:0%
that the response value is none no in
case<00:08:11.080><c> an</c><00:08:11.229><c> error</c><00:08:11.379><c> happens</c><00:08:11.800><c> for</c><00:08:12.340><c> simplicity</c><00:08:12.930><c> and</c>

00:08:13.920 --> 00:08:13.930 align:start position:0%
case an error happens for simplicity and
 

00:08:13.930 --> 00:08:17.520 align:start position:0%
case an error happens for simplicity and
just<00:08:14.199><c> print</c><00:08:14.409><c> it</c><00:08:14.530><c> for</c><00:08:14.680><c> now</c><00:08:16.080><c> so</c><00:08:17.080><c> running</c><00:08:17.379><c> that</c>

00:08:17.520 --> 00:08:17.530 align:start position:0%
just print it for now so running that
 

00:08:17.530 --> 00:08:20.969 align:start position:0%
just print it for now so running that
again<00:08:18.930><c> okay</c><00:08:19.930><c> great</c><00:08:20.169><c> we</c><00:08:20.319><c> can</c><00:08:20.440><c> see</c><00:08:20.560><c> the</c><00:08:20.650><c> response</c>

00:08:20.969 --> 00:08:20.979 align:start position:0%
again okay great we can see the response
 

00:08:20.979 --> 00:08:23.309 align:start position:0%
again okay great we can see the response
code<00:08:21.159><c> is</c><00:08:21.280><c> 200</c><00:08:21.789><c> so</c><00:08:22.449><c> everything</c><00:08:22.780><c> is</c><00:08:22.840><c> okay</c><00:08:23.139><c> and</c>

00:08:23.309 --> 00:08:23.319 align:start position:0%
code is 200 so everything is okay and
 

00:08:23.319 --> 00:08:27.029 align:start position:0%
code is 200 so everything is okay and
again<00:08:24.069><c> the</c><00:08:24.610><c> response</c><00:08:24.879><c> body</c><00:08:25.090><c> is</c><00:08:25.240><c> printed</c><00:08:26.039><c> all</c>

00:08:27.029 --> 00:08:27.039 align:start position:0%
again the response body is printed all
 

00:08:27.039 --> 00:08:29.610 align:start position:0%
again the response body is printed all
right<00:08:27.250><c> so</c><00:08:27.430><c> that's</c><00:08:27.550><c> everything</c><00:08:28.060><c> working</c><00:08:28.840><c> using</c>

00:08:29.610 --> 00:08:29.620 align:start position:0%
right so that's everything working using
 

00:08:29.620 --> 00:08:32.060 align:start position:0%
right so that's everything working using
one<00:08:29.770><c> of</c><00:08:29.800><c> the</c><00:08:30.009><c> convenience</c><00:08:30.520><c> body</c><00:08:31.300><c> handers</c>

00:08:32.060 --> 00:08:32.070 align:start position:0%
one of the convenience body handers
 

00:08:32.070 --> 00:08:44.970 align:start position:0%
one of the convenience body handers
let's<00:08:33.070><c> take</c><00:08:33.279><c> a</c><00:08:33.310><c> look</c><00:08:33.490><c> at</c><00:08:33.579><c> writing</c><00:08:33.849><c> our</c><00:08:33.969><c> own</c><00:08:43.980><c> so</c>

00:08:44.970 --> 00:08:44.980 align:start position:0%
let's take a look at writing our own so
 

00:08:44.980 --> 00:08:46.920 align:start position:0%
let's take a look at writing our own so
we<00:08:45.010><c> need</c><00:08:45.310><c> to</c><00:08:45.430><c> implement</c><00:08:45.700><c> the</c><00:08:46.149><c> body</c><00:08:46.329><c> subscriber</c>

00:08:46.920 --> 00:08:46.930 align:start position:0%
we need to implement the body subscriber
 

00:08:46.930 --> 00:08:50.850 align:start position:0%
we need to implement the body subscriber
interface<00:08:48.029><c> and</c><00:08:49.029><c> in</c><00:08:49.149><c> this</c><00:08:49.329><c> case</c><00:08:49.630><c> our</c><00:08:50.170><c> type</c><00:08:50.440><c> is</c><00:08:50.680><c> a</c>

00:08:50.850 --> 00:08:50.860 align:start position:0%
interface and in this case our type is a
 

00:08:50.860 --> 00:09:00.540 align:start position:0%
interface and in this case our type is a
string<00:08:58.290><c> okay</c><00:08:59.290><c> so</c><00:08:59.350><c> the</c><00:08:59.589><c> body</c><00:08:59.740><c> subscriber</c><00:09:00.310><c> has</c><00:09:00.459><c> a</c>

00:09:00.540 --> 00:09:00.550 align:start position:0%
string okay so the body subscriber has a
 

00:09:00.550 --> 00:09:02.550 align:start position:0%
string okay so the body subscriber has a
single<00:09:00.880><c> method</c><00:09:01.060><c> called</c><00:09:01.839><c> get</c><00:09:02.020><c> body</c><00:09:02.290><c> and</c><00:09:02.500><c> a</c>

00:09:02.550 --> 00:09:02.560 align:start position:0%
single method called get body and a
 

00:09:02.560 --> 00:09:05.160 align:start position:0%
single method called get body and a
return<00:09:02.800><c> to</c><00:09:02.950><c> completion</c><00:09:03.250><c> stage</c><00:09:03.579><c> of</c><00:09:03.760><c> T</c><00:09:04.020><c> T</c><00:09:05.020><c> is</c><00:09:05.079><c> a</c>

00:09:05.160 --> 00:09:05.170 align:start position:0%
return to completion stage of T T is a
 

00:09:05.170 --> 00:09:07.530 align:start position:0%
return to completion stage of T T is a
string<00:09:05.470><c> in</c><00:09:05.589><c> our</c><00:09:05.709><c> case</c><00:09:05.920><c> and</c><00:09:06.190><c> we</c><00:09:07.149><c> must</c><00:09:07.360><c> also</c>

00:09:07.530 --> 00:09:07.540 align:start position:0%
string in our case and we must also
 

00:09:07.540 --> 00:09:10.650 align:start position:0%
string in our case and we must also
implement<00:09:08.320><c> the</c><00:09:09.190><c> four</c><00:09:09.520><c> methods</c><00:09:09.940><c> from</c><00:09:10.390><c> flow</c>

00:09:10.650 --> 00:09:10.660 align:start position:0%
implement the four methods from flow
 

00:09:10.660 --> 00:09:13.699 align:start position:0%
implement the four methods from flow
subscriber<00:09:11.820><c> so</c><00:09:12.820><c> let's</c><00:09:13.029><c> take</c><00:09:13.180><c> a</c><00:09:13.209><c> look</c><00:09:13.420><c> at</c><00:09:13.480><c> them</c>

00:09:13.699 --> 00:09:13.709 align:start position:0%
subscriber so let's take a look at them
 

00:09:13.709 --> 00:09:16.949 align:start position:0%
subscriber so let's take a look at them
we'll<00:09:14.709><c> start</c><00:09:14.980><c> with</c><00:09:15.100><c> the</c><00:09:15.190><c> get</c><00:09:15.399><c> body</c><00:09:15.760><c> method</c><00:09:16.149><c> so</c>

00:09:16.949 --> 00:09:16.959 align:start position:0%
we'll start with the get body method so
 

00:09:16.959 --> 00:09:18.389 align:start position:0%
we'll start with the get body method so
they<00:09:17.050><c> get</c><00:09:17.200><c> body</c><00:09:17.470><c> method</c><00:09:17.829><c> needs</c><00:09:17.920><c> to</c><00:09:18.070><c> return</c><00:09:18.339><c> a</c>

00:09:18.389 --> 00:09:18.399 align:start position:0%
they get body method needs to return a
 

00:09:18.399 --> 00:09:21.750 align:start position:0%
they get body method needs to return a
completion<00:09:19.029><c> stage</c><00:09:19.240><c> of</c><00:09:19.510><c> string</c><00:09:20.250><c> so</c><00:09:21.250><c> let's</c><00:09:21.459><c> use</c>

00:09:21.750 --> 00:09:21.760 align:start position:0%
completion stage of string so let's use
 

00:09:21.760 --> 00:09:23.550 align:start position:0%
completion stage of string so let's use
complete<00:09:22.149><c> of</c><00:09:22.240><c> a</c><00:09:22.300><c> future</c><00:09:22.690><c> which</c><00:09:22.990><c> is</c><00:09:23.020><c> a</c><00:09:23.140><c> concrete</c>

00:09:23.550 --> 00:09:23.560 align:start position:0%
complete of a future which is a concrete
 

00:09:23.560 --> 00:09:36.460 align:start position:0%
complete of a future which is a concrete
implementation<00:09:24.310><c> of</c><00:09:24.459><c> a</c><00:09:24.670><c> completion</c><00:09:25.209><c> stage</c>

00:09:36.460 --> 00:09:36.470 align:start position:0%
 
 

00:09:36.470 --> 00:09:39.590 align:start position:0%
 
so<00:09:37.470><c> which</c><00:09:37.769><c> called</c><00:09:38.130><c> our</c><00:09:38.430><c> compatible</c><00:09:39.000><c> teacher</c>

00:09:39.590 --> 00:09:39.600 align:start position:0%
so which called our compatible teacher
 

00:09:39.600 --> 00:09:42.259 align:start position:0%
so which called our compatible teacher
hey<00:09:40.589><c> buddy</c><00:09:40.829><c> cf</c><00:09:41.279><c> because</c><00:09:41.730><c> it</c><00:09:41.819><c> holds</c><00:09:42.120><c> the</c>

00:09:42.259 --> 00:09:42.269 align:start position:0%
hey buddy cf because it holds the
 

00:09:42.269 --> 00:09:45.259 align:start position:0%
hey buddy cf because it holds the
response<00:09:42.750><c> body</c><00:09:43.550><c> and</c><00:09:44.550><c> where</c><00:09:44.759><c> you</c><00:09:44.819><c> can</c><00:09:44.940><c> return</c>

00:09:45.259 --> 00:09:45.269 align:start position:0%
response body and where you can return
 

00:09:45.269 --> 00:09:48.319 align:start position:0%
response body and where you can return
that<00:09:45.329><c> from</c><00:09:45.690><c> the</c><00:09:45.779><c> cat</c><00:09:45.930><c> body</c><00:09:46.079><c> method</c><00:09:47.149><c> now</c><00:09:48.149><c> I'll</c>

00:09:48.319 --> 00:09:48.329 align:start position:0%
that from the cat body method now I'll
 

00:09:48.329 --> 00:09:54.470 align:start position:0%
that from the cat body method now I'll
move<00:09:48.449><c> on</c><00:09:48.630><c> to</c><00:09:48.779><c> unsubscribe</c><00:09:49.589><c> so</c><00:09:52.819><c> the</c><00:09:53.819><c> HTTP</c>

00:09:54.470 --> 00:09:54.480 align:start position:0%
move on to unsubscribe so the HTTP
 

00:09:54.480 --> 00:09:56.449 align:start position:0%
move on to unsubscribe so the HTTP
clients<00:09:54.930><c> is</c><00:09:54.990><c> a</c><00:09:55.019><c> publisher</c><00:09:55.560><c> and</c><00:09:55.769><c> response</c><00:09:56.160><c> body</c>

00:09:56.449 --> 00:09:56.459 align:start position:0%
clients is a publisher and response body
 

00:09:56.459 --> 00:10:00.139 align:start position:0%
clients is a publisher and response body
and<00:09:57.470><c> this</c><00:09:58.470><c> string</c><00:09:58.740><c> subscriber</c><00:09:59.310><c> subscribe</c><00:09:59.670><c> to</c>

00:10:00.139 --> 00:10:00.149 align:start position:0%
and this string subscriber subscribe to
 

00:10:00.149 --> 00:10:02.780 align:start position:0%
and this string subscriber subscribe to
that<00:10:00.269><c> publisher</c><00:10:00.800><c> so</c><00:10:01.800><c> first</c><00:10:02.130><c> it</c><00:10:02.279><c> will</c><00:10:02.370><c> have</c><00:10:02.579><c> its</c>

00:10:02.780 --> 00:10:02.790 align:start position:0%
that publisher so first it will have its
 

00:10:02.790 --> 00:10:05.780 align:start position:0%
that publisher so first it will have its
unsubscribe<00:10:03.509><c> method</c><00:10:04.139><c> invoked</c><00:10:04.680><c> with</c><00:10:05.639><c> the</c>

00:10:05.780 --> 00:10:05.790 align:start position:0%
unsubscribe method invoked with the
 

00:10:05.790 --> 00:10:10.430 align:start position:0%
unsubscribe method invoked with the
subscription<00:10:06.389><c> from</c><00:10:07.170><c> the</c><00:10:07.290><c> HTTP</c><00:10:07.769><c> client</c><00:10:09.440><c> so</c>

00:10:10.430 --> 00:10:10.440 align:start position:0%
subscription from the HTTP client so
 

00:10:10.440 --> 00:10:23.180 align:start position:0%
subscription from the HTTP client so
let's<00:10:10.589><c> store</c><00:10:10.860><c> that</c><00:10:10.889><c> subscription</c>

00:10:23.180 --> 00:10:23.190 align:start position:0%
 
 

00:10:23.190 --> 00:10:26.790 align:start position:0%
 
okay<00:10:24.190><c> now</c><00:10:24.670><c> we</c><00:10:24.730><c> have</c><00:10:24.850><c> the</c><00:10:25.090><c> subscription</c><00:10:25.620><c> we</c><00:10:26.620><c> can</c>

00:10:26.790 --> 00:10:26.800 align:start position:0%
okay now we have the subscription we can
 

00:10:26.800 --> 00:10:28.860 align:start position:0%
okay now we have the subscription we can
request<00:10:27.130><c> some</c><00:10:27.670><c> more</c><00:10:27.910><c> response</c><00:10:28.270><c> body</c><00:10:28.510><c> from</c><00:10:28.750><c> the</c>

00:10:28.860 --> 00:10:28.870 align:start position:0%
request some more response body from the
 

00:10:28.870 --> 00:10:30.240 align:start position:0%
request some more response body from the
client<00:10:29.200><c> or</c><00:10:29.440><c> we</c><00:10:29.560><c> can</c><00:10:29.680><c> cancel</c><00:10:29.920><c> a</c><00:10:30.100><c> subscription</c>

00:10:30.240 --> 00:10:30.250 align:start position:0%
client or we can cancel a subscription
 

00:10:30.250 --> 00:10:33.360 align:start position:0%
client or we can cancel a subscription
if<00:10:30.760><c> we're</c><00:10:30.880><c> no</c><00:10:30.970><c> longer</c><00:10:31.120><c> interested</c><00:10:32.370><c> let's</c>

00:10:33.360 --> 00:10:33.370 align:start position:0%
if we're no longer interested let's
 

00:10:33.370 --> 00:10:36.950 align:start position:0%
if we're no longer interested let's
request<00:10:33.760><c> some</c><00:10:34.000><c> more</c><00:10:34.210><c> and</c><00:10:35.050><c> just</c><00:10:35.230><c> request</c><00:10:35.560><c> one</c>

00:10:36.950 --> 00:10:36.960 align:start position:0%
request some more and just request one
 

00:10:36.960 --> 00:10:39.390 align:start position:0%
request some more and just request one
at<00:10:37.960><c> this</c><00:10:38.140><c> point</c><00:10:38.380><c> we</c><00:10:38.530><c> can</c><00:10:38.650><c> look</c><00:10:38.770><c> up</c><00:10:38.890><c> hook</c><00:10:39.250><c> up</c>

00:10:39.390 --> 00:10:39.400 align:start position:0%
at this point we can look up hook up
 

00:10:39.400 --> 00:10:42.090 align:start position:0%
at this point we can look up hook up
error<00:10:39.820><c> handling</c><00:10:40.320><c> so</c><00:10:41.320><c> we</c><00:10:41.410><c> complete</c><00:10:41.770><c> the</c><00:10:41.920><c> body</c>

00:10:42.090 --> 00:10:42.100 align:start position:0%
error handling so we complete the body
 

00:10:42.100 --> 00:10:48.860 align:start position:0%
error handling so we complete the body
cf<00:10:42.550><c> exceptionally</c><00:10:43.390><c> after</c><00:10:43.870><c> an</c><00:10:44.680><c> error</c><00:10:44.950><c> happens</c>

00:10:48.860 --> 00:10:48.870 align:start position:0%
 
 

00:10:48.870 --> 00:10:52.290 align:start position:0%
 
in<00:10:49.870><c> this</c><00:10:50.050><c> simplement</c><00:10:50.560><c> implementation</c><00:10:51.550><c> then</c>

00:10:52.290 --> 00:10:52.300 align:start position:0%
in this simplement implementation then
 

00:10:52.300 --> 00:10:54.720 align:start position:0%
in this simplement implementation then
just<00:10:52.510><c> accumulate</c><00:10:53.020><c> all</c><00:10:53.260><c> of</c><00:10:53.290><c> response</c><00:10:53.770><c> data</c><00:10:54.400><c> on</c>

00:10:54.720 --> 00:10:54.730 align:start position:0%
just accumulate all of response data on
 

00:10:54.730 --> 00:10:58.050 align:start position:0%
just accumulate all of response data on
the<00:10:55.210><c> pipe</c><00:10:55.360><c> buffers</c><00:10:55.720><c> in</c><00:10:55.900><c> the</c><00:10:55.990><c> list</c><00:10:56.170><c> and</c><00:10:56.950><c> then</c><00:10:57.910><c> we</c>

00:10:58.050 --> 00:10:58.060 align:start position:0%
the pipe buffers in the list and then we
 

00:10:58.060 --> 00:11:01.260 align:start position:0%
the pipe buffers in the list and then we
will<00:10:58.150><c> convert</c><00:10:58.510><c> the</c><00:10:59.320><c> response</c><00:10:59.680><c> body</c><00:11:00.180><c> into</c><00:11:01.180><c> a</c>

00:11:01.260 --> 00:11:01.270 align:start position:0%
will convert the response body into a
 

00:11:01.270 --> 00:11:26.640 align:start position:0%
will convert the response body into a
string<00:11:01.540><c> at</c><00:11:01.660><c> the</c><00:11:01.780><c> end</c><00:11:03.450><c> so</c><00:11:04.450><c> let's</c><00:11:04.690><c> create</c><00:11:04.960><c> a</c><00:11:05.170><c> list</c>

00:11:26.640 --> 00:11:26.650 align:start position:0%
 
 

00:11:26.650 --> 00:11:29.550 align:start position:0%
 
okay<00:11:27.520><c> so</c><00:11:27.580><c> every</c><00:11:27.970><c> time</c><00:11:28.120><c> response</c><00:11:28.510><c> data</c><00:11:29.440><c> is</c>

00:11:29.550 --> 00:11:29.560 align:start position:0%
okay so every time response data is
 

00:11:29.560 --> 00:11:31.700 align:start position:0%
okay so every time response data is
received<00:11:29.710><c> we</c><00:11:30.400><c> add</c><00:11:30.520><c> it</c><00:11:30.640><c> to</c><00:11:30.670><c> the</c><00:11:30.790><c> list</c>

00:11:31.700 --> 00:11:31.710 align:start position:0%
received we add it to the list
 

00:11:31.710 --> 00:11:37.530 align:start position:0%
received we add it to the list
let's<00:11:32.710><c> keep</c><00:11:32.890><c> that</c><00:11:33.100><c> a</c><00:11:33.130><c> better</c><00:11:33.370><c> name</c><00:11:36.270><c> okay</c><00:11:37.270><c> great</c>

00:11:37.530 --> 00:11:37.540 align:start position:0%
let's keep that a better name okay great
 

00:11:37.540 --> 00:11:39.120 align:start position:0%
let's keep that a better name okay great
so<00:11:37.900><c> we're</c><00:11:38.020><c> only</c><00:11:38.140><c> left</c><00:11:38.380><c> with</c><00:11:38.530><c> the</c><00:11:38.650><c> uncomplete</c>

00:11:39.120 --> 00:11:39.130 align:start position:0%
so we're only left with the uncomplete
 

00:11:39.130 --> 00:11:42.300 align:start position:0%
so we're only left with the uncomplete
method<00:11:40.110><c> so</c><00:11:41.110><c> again</c><00:11:41.410><c> in</c><00:11:41.620><c> this</c><00:11:41.830><c> simple</c><00:11:42.070><c> move</c>

00:11:42.300 --> 00:11:42.310 align:start position:0%
method so again in this simple move
 

00:11:42.310 --> 00:11:45.540 align:start position:0%
method so again in this simple move
implementation<00:11:43.140><c> we</c><00:11:44.140><c> will</c><00:11:44.350><c> just</c><00:11:44.650><c> determine</c>

00:11:45.540 --> 00:11:45.550 align:start position:0%
implementation we will just determine
 

00:11:45.550 --> 00:11:47.340 align:start position:0%
implementation we will just determine
the<00:11:45.640><c> number</c><00:11:45.850><c> of</c><00:11:45.970><c> bytes</c><00:11:46.120><c> we</c><00:11:46.360><c> have</c><00:11:46.540><c> put</c><00:11:47.140><c> them</c><00:11:47.260><c> in</c>

00:11:47.340 --> 00:11:47.350 align:start position:0%
the number of bytes we have put them in
 

00:11:47.350 --> 00:11:49.440 align:start position:0%
the number of bytes we have put them in
a<00:11:47.380><c> byte</c><00:11:47.590><c> array</c><00:11:47.830><c> and</c><00:11:48.070><c> then</c><00:11:48.730><c> convert</c><00:11:49.060><c> that</c><00:11:49.240><c> byte</c>

00:11:49.440 --> 00:11:49.450 align:start position:0%
a byte array and then convert that byte
 

00:11:49.450 --> 00:12:02.740 align:start position:0%
a byte array and then convert that byte
array<00:11:49.660><c> into</c><00:11:49.870><c> a</c><00:11:49.960><c> string</c>

00:12:02.740 --> 00:12:02.750 align:start position:0%
 
 

00:12:02.750 --> 00:12:05.619 align:start position:0%
 
so<00:12:03.439><c> once</c><00:12:03.620><c> we</c><00:12:03.740><c> know</c><00:12:03.920><c> the</c><00:12:04.850><c> number</c><00:12:05.120><c> of</c><00:12:05.149><c> bytes</c><00:12:05.420><c> are</c>

00:12:05.619 --> 00:12:05.629 align:start position:0%
so once we know the number of bytes are
 

00:12:05.629 --> 00:12:07.240 align:start position:0%
so once we know the number of bytes are
remaining<00:12:05.870><c> in</c><00:12:06.019><c> each</c><00:12:06.139><c> byte</c><00:12:06.350><c> buffer</c><00:12:06.740><c> we</c><00:12:06.889><c> can</c><00:12:07.040><c> sum</c>

00:12:07.240 --> 00:12:07.250 align:start position:0%
remaining in each byte buffer we can sum
 

00:12:07.250 --> 00:12:09.009 align:start position:0%
remaining in each byte buffer we can sum
that<00:12:07.370><c> up</c><00:12:07.430><c> so</c><00:12:08.269><c> that's</c><00:12:08.420><c> the</c><00:12:08.509><c> total</c><00:12:08.629><c> number</c><00:12:08.990><c> of</c>

00:12:09.009 --> 00:12:09.019 align:start position:0%
that up so that's the total number of
 

00:12:09.019 --> 00:12:12.400 align:start position:0%
that up so that's the total number of
bytes<00:12:09.199><c> that</c><00:12:09.560><c> we</c><00:12:09.769><c> need</c><00:12:09.949><c> in</c><00:12:10.639><c> our</c><00:12:10.730><c> byte</c><00:12:10.939><c> array</c><00:12:11.410><c> so</c>

00:12:12.400 --> 00:12:12.410 align:start position:0%
bytes that we need in our byte array so
 

00:12:12.410 --> 00:12:18.360 align:start position:0%
bytes that we need in our byte array so
let's<00:12:12.589><c> create</c><00:12:12.800><c> a</c><00:12:12.889><c> fight</c><00:12:13.100><c> array</c><00:12:13.310><c> of</c><00:12:13.430><c> that</c><00:12:13.610><c> size</c>

00:12:18.360 --> 00:12:18.370 align:start position:0%
 
 

00:12:18.370 --> 00:12:31.940 align:start position:0%
 
okay<00:12:19.370><c> now</c><00:12:19.819><c> we</c><00:12:19.879><c> can</c><00:12:20.120><c> iterate</c><00:12:20.300><c> over</c><00:12:23.199><c> the</c><00:12:24.199><c> buffers</c>

00:12:31.940 --> 00:12:31.950 align:start position:0%
 
 

00:12:31.950 --> 00:12:37.790 align:start position:0%
 
and<00:12:32.760><c> that</c><00:12:32.880><c> them</c><00:12:33.029><c> to</c><00:12:33.149><c> a</c><00:12:33.180><c> byte</c><00:12:33.420><c> array</c><00:12:36.649><c> oops</c>

00:12:37.790 --> 00:12:37.800 align:start position:0%
and that them to a byte array oops
 

00:12:37.800 --> 00:12:41.660 align:start position:0%
and that them to a byte array oops
call<00:12:38.220><c> that</c><00:12:38.339><c> buffers</c><00:12:38.730><c> show</c><00:12:39.450><c> people</c><00:12:39.779><c> for</c><00:12:40.670><c> over</c>

00:12:41.660 --> 00:12:41.670 align:start position:0%
call that buffers show people for over
 

00:12:41.670 --> 00:12:45.050 align:start position:0%
call that buffers show people for over
doc<00:12:41.790><c> gets</c><00:12:42.290><c> byte</c><00:12:43.290><c> array</c><00:12:43.529><c> at</c><00:12:44.430><c> this</c><00:12:44.610><c> point</c><00:12:44.940><c> we</c>

00:12:45.050 --> 00:12:45.060 align:start position:0%
doc gets byte array at this point we
 

00:12:45.060 --> 00:12:52.129 align:start position:0%
doc gets byte array at this point we
need<00:12:45.209><c> an</c><00:12:45.329><c> offsets</c><00:12:45.930><c> so</c><00:12:47.630><c> it's</c><00:12:48.630><c> great</c><00:12:48.930><c> one</c><00:12:51.139><c> so</c>

00:12:52.129 --> 00:12:52.139 align:start position:0%
need an offsets so it's great one so
 

00:12:52.139 --> 00:12:54.410 align:start position:0%
need an offsets so it's great one so
there<00:12:52.320><c> should</c><00:12:52.440><c> be</c><00:12:52.529><c> zero</c><00:12:52.560><c> and</c><00:12:53.240><c> we</c><00:12:54.240><c> need</c><00:12:54.360><c> a</c>

00:12:54.410 --> 00:12:54.420 align:start position:0%
there should be zero and we need a
 

00:12:54.420 --> 00:12:56.629 align:start position:0%
there should be zero and we need a
length<00:12:54.660><c> and</c><00:12:55.079><c> the</c><00:12:55.320><c> length</c><00:12:55.470><c> is</c><00:12:55.709><c> going</c><00:12:55.889><c> to</c><00:12:56.040><c> be</c><00:12:56.130><c> the</c>

00:12:56.629 --> 00:12:56.639 align:start position:0%
length and the length is going to be the
 

00:12:56.639 --> 00:13:07.820 align:start position:0%
length and the length is going to be the
number<00:12:56.880><c> of</c><00:12:56.910><c> bytes</c><00:12:57.180><c> remaining</c>

00:13:07.820 --> 00:13:07.830 align:start position:0%
 
 

00:13:07.830 --> 00:13:14.889 align:start position:0%
 
and<00:13:08.550><c> this</c><00:13:08.880><c> is</c><00:13:09.060><c> offset</c><00:13:12.830><c> you</c><00:13:13.830><c> will</c><00:13:13.980><c> need</c><00:13:14.160><c> to</c>

00:13:14.889 --> 00:13:14.899 align:start position:0%
and this is offset you will need to
 

00:13:14.899 --> 00:13:22.400 align:start position:0%
and this is offset you will need to
increase<00:13:15.899><c> the</c><00:13:16.140><c> offset</c><00:13:16.880><c> as</c><00:13:17.880><c> we</c><00:13:18.029><c> iterate</c><00:13:21.410><c> okay</c>

00:13:22.400 --> 00:13:22.410 align:start position:0%
increase the offset as we iterate okay
 

00:13:22.410 --> 00:13:25.460 align:start position:0%
increase the offset as we iterate okay
now<00:13:22.830><c> we</c><00:13:22.890><c> have</c><00:13:23.010><c> a</c><00:13:23.190><c> response</c><00:13:23.870><c> but</c><00:13:24.870><c> he</c><00:13:24.930><c> bytes</c><00:13:25.200><c> in</c><00:13:25.410><c> a</c>

00:13:25.460 --> 00:13:25.470 align:start position:0%
now we have a response but he bytes in a
 

00:13:25.470 --> 00:13:27.259 align:start position:0%
now we have a response but he bytes in a
byte<00:13:25.620><c> array</c><00:13:25.649><c> let's</c><00:13:26.310><c> convert</c><00:13:26.610><c> that</c><00:13:26.790><c> to</c><00:13:27.240><c> a</c>

00:13:27.259 --> 00:13:27.269 align:start position:0%
byte array let's convert that to a
 

00:13:27.269 --> 00:13:33.769 align:start position:0%
byte array let's convert that to a
string<00:13:30.950><c> for</c><00:13:31.950><c> simplicity</c><00:13:32.430><c> purposes</c><00:13:32.779><c> we'll</c>

00:13:33.769 --> 00:13:33.779 align:start position:0%
string for simplicity purposes we'll
 

00:13:33.779 --> 00:13:35.920 align:start position:0%
string for simplicity purposes we'll
just<00:13:34.019><c> ignore</c><00:13:34.200><c> charge</c><00:13:34.709><c> at</c><00:13:34.890><c> conversion</c><00:13:35.279><c> for</c><00:13:35.610><c> now</c>

00:13:35.920 --> 00:13:35.930 align:start position:0%
just ignore charge at conversion for now
 

00:13:35.930 --> 00:13:38.840 align:start position:0%
just ignore charge at conversion for now
okay<00:13:36.930><c> great</c><00:13:37.200><c> we</c><00:13:37.350><c> have</c><00:13:37.529><c> our</c><00:13:37.649><c> string</c><00:13:38.040><c> let's</c>

00:13:38.840 --> 00:13:38.850 align:start position:0%
okay great we have our string let's
 

00:13:38.850 --> 00:13:45.550 align:start position:0%
okay great we have our string let's
complete<00:13:39.269><c> the</c><00:13:39.450><c> body</c><00:13:39.660><c> CF</c><00:13:40.339><c> with</c><00:13:41.339><c> that</c><00:13:41.519><c> string</c>

00:13:45.550 --> 00:13:45.560 align:start position:0%
 
 

00:13:45.560 --> 00:13:47.630 align:start position:0%
 
okay<00:13:46.560><c> at</c><00:13:46.649><c> this</c><00:13:46.740><c> point</c><00:13:46.860><c> everything</c><00:13:47.339><c> looks</c>

00:13:47.630 --> 00:13:47.640 align:start position:0%
okay at this point everything looks
 

00:13:47.640 --> 00:13:52.310 align:start position:0%
okay at this point everything looks
alright<00:13:48.209><c> we</c><00:13:48.959><c> forgot</c><00:13:49.350><c> one</c><00:13:49.709><c> thing</c><00:13:50.450><c> because</c><00:13:51.450><c> an</c>

00:13:52.310 --> 00:13:52.320 align:start position:0%
alright we forgot one thing because an
 

00:13:52.320 --> 00:13:54.380 align:start position:0%
alright we forgot one thing because an
unsubscribe<00:13:52.860><c> we've</c><00:13:53.279><c> only</c><00:13:53.459><c> requested</c><00:13:54.209><c> one</c>

00:13:54.380 --> 00:13:54.390 align:start position:0%
unsubscribe we've only requested one
 

00:13:54.390 --> 00:13:56.480 align:start position:0%
unsubscribe we've only requested one
more<00:13:54.570><c> call</c><00:13:54.810><c> back</c><00:13:55.019><c> every</c><00:13:55.829><c> time</c><00:13:56.010><c> we</c><00:13:56.130><c> receive</c><00:13:56.459><c> a</c>

00:13:56.480 --> 00:13:56.490 align:start position:0%
more call back every time we receive a
 

00:13:56.490 --> 00:13:58.730 align:start position:0%
more call back every time we receive a
call<00:13:56.850><c> back</c><00:13:57.029><c> we</c><00:13:57.420><c> want</c><00:13:57.660><c> to</c><00:13:57.750><c> request</c><00:13:58.079><c> another</c><00:13:58.529><c> one</c>

00:13:58.730 --> 00:13:58.740 align:start position:0%
call back we want to request another one
 

00:13:58.740 --> 00:14:03.560 align:start position:0%
call back we want to request another one
so<00:13:59.700><c> single</c><00:14:00.060><c> step</c><00:14:00.269><c> one</c><00:14:00.540><c> at</c><00:14:00.660><c> a</c><00:14:00.720><c> time</c><00:14:02.360><c> okay</c><00:14:03.360><c> now</c><00:14:03.390><c> we</c>

00:14:03.560 --> 00:14:03.570 align:start position:0%
so single step one at a time okay now we
 

00:14:03.570 --> 00:14:05.870 align:start position:0%
so single step one at a time okay now we
have<00:14:03.690><c> our</c><00:14:03.930><c> string</c><00:14:04.170><c> subscriber</c><00:14:04.680><c> let's</c><00:14:05.519><c> hook</c><00:14:05.760><c> it</c>

00:14:05.870 --> 00:14:05.880 align:start position:0%
have our string subscriber let's hook it
 

00:14:05.880 --> 00:14:09.560 align:start position:0%
have our string subscriber let's hook it
up<00:14:06.000><c> with</c><00:14:06.029><c> HTTP</c><00:14:06.959><c> clients</c><00:14:08.000><c> so</c><00:14:09.000><c> we</c><00:14:09.180><c> need</c><00:14:09.329><c> a</c>

00:14:09.560 --> 00:14:09.570 align:start position:0%
up with HTTP clients so we need a
 

00:14:09.570 --> 00:14:12.710 align:start position:0%
up with HTTP clients so we need a
response<00:14:10.250><c> sorry</c><00:14:11.250><c> a</c><00:14:11.579><c> response</c><00:14:12.060><c> body</c><00:14:12.270><c> handler</c>

00:14:12.710 --> 00:14:12.720 align:start position:0%
response sorry a response body handler
 

00:14:12.720 --> 00:14:16.069 align:start position:0%
response sorry a response body handler
here<00:14:14.149><c> response</c><00:14:15.149><c> body</c><00:14:15.390><c> handler</c><00:14:15.870><c> is</c><00:14:16.050><c> a</c>

00:14:16.069 --> 00:14:16.079 align:start position:0%
here response body handler is a
 

00:14:16.079 --> 00:14:17.660 align:start position:0%
here response body handler is a
functional<00:14:16.620><c> interface</c><00:14:16.950><c> it</c><00:14:17.220><c> takes</c><00:14:17.399><c> for</c><00:14:17.550><c> a</c>

00:14:17.660 --> 00:14:17.670 align:start position:0%
functional interface it takes for a
 

00:14:17.670 --> 00:14:21.920 align:start position:0%
functional interface it takes for a
response<00:14:18.570><c> info</c><00:14:19.100><c> returns</c><00:14:20.100><c> a</c><00:14:20.430><c> subscriber</c><00:14:20.970><c> in</c>

00:14:21.920 --> 00:14:21.930 align:start position:0%
response info returns a subscriber in
 

00:14:21.930 --> 00:14:23.810 align:start position:0%
response info returns a subscriber in
our<00:14:22.079><c> case</c><00:14:22.320><c> we'll</c><00:14:22.560><c> unconditionally</c><00:14:23.370><c> return</c><00:14:23.790><c> a</c>

00:14:23.810 --> 00:14:23.820 align:start position:0%
our case we'll unconditionally return a
 

00:14:23.820 --> 00:14:35.870 align:start position:0%
our case we'll unconditionally return a
string<00:14:24.060><c> subscriber</c><00:14:25.970><c> okay</c><00:14:26.970><c> so</c><00:14:27.029><c> let's</c><00:14:27.300><c> run</c><00:14:27.450><c> that</c>

00:14:35.870 --> 00:14:35.880 align:start position:0%
 
 

00:14:35.880 --> 00:14:38.030 align:start position:0%
 
okay<00:14:36.389><c> great</c><00:14:36.600><c> so</c><00:14:36.660><c> we've</c><00:14:36.959><c> response</c><00:14:37.350><c> code</c><00:14:37.560><c> 200</c>

00:14:38.030 --> 00:14:38.040 align:start position:0%
okay great so we've response code 200
 

00:14:38.040 --> 00:14:40.910 align:start position:0%
okay great so we've response code 200
again<00:14:38.310><c> and</c><00:14:39.060><c> we</c><00:14:39.180><c> have</c><00:14:39.389><c> our</c><00:14:39.600><c> response</c><00:14:40.170><c> buddy</c><00:14:40.620><c> as</c>

00:14:40.910 --> 00:14:40.920 align:start position:0%
again and we have our response buddy as
 

00:14:40.920 --> 00:14:43.879 align:start position:0%
again and we have our response buddy as
a<00:14:40.980><c> string</c><00:14:42.139><c> let's</c><00:14:43.139><c> just</c><00:14:43.319><c> take</c><00:14:43.500><c> a</c><00:14:43.529><c> look</c><00:14:43.800><c> at</c>

00:14:43.879 --> 00:14:43.889 align:start position:0%
a string let's just take a look at
 

00:14:43.889 --> 00:14:46.009 align:start position:0%
a string let's just take a look at
what's<00:14:44.069><c> happening</c><00:14:44.430><c> here</c><00:14:44.779><c> let's</c><00:14:45.779><c> add</c><00:14:45.990><c> a</c>

00:14:46.009 --> 00:14:46.019 align:start position:0%
what's happening here let's add a
 

00:14:46.019 --> 00:14:52.150 align:start position:0%
what's happening here let's add a
debugging<00:14:46.470><c> statement</c><00:14:47.069><c> to</c><00:14:47.310><c> your</c><00:14:47.430><c> next</c><00:14:47.819><c> call</c>

00:14:52.150 --> 00:14:52.160 align:start position:0%
 
 

00:14:52.160 --> 00:14:55.420 align:start position:0%
 
oops

00:14:55.420 --> 00:14:55.430 align:start position:0%
 
 

00:14:55.430 --> 00:14:58.720 align:start position:0%
 
next<00:14:56.430><c> it's</c><00:14:56.550><c> been</c><00:14:56.699><c> called</c><00:14:56.970><c> with</c><00:14:57.300><c> buffers</c><00:14:57.750><c> and</c>

00:14:58.720 --> 00:14:58.730 align:start position:0%
next it's been called with buffers and
 

00:14:58.730 --> 00:15:02.629 align:start position:0%
next it's been called with buffers and
we'll<00:14:59.730><c> change</c><00:15:00.089><c> the</c><00:15:00.300><c> URI</c><00:15:01.009><c> so</c><00:15:02.009><c> that</c><00:15:02.160><c> we</c><00:15:02.250><c> get</c><00:15:02.399><c> some</c>

00:15:02.629 --> 00:15:02.639 align:start position:0%
we'll change the URI so that we get some
 

00:15:02.639 --> 00:15:07.280 align:start position:0%
we'll change the URI so that we get some
more<00:15:02.790><c> response</c><00:15:03.420><c> data</c><00:15:05.750><c> okay</c><00:15:06.750><c> let's</c><00:15:06.990><c> run</c><00:15:07.139><c> that</c>

00:15:07.280 --> 00:15:07.290 align:start position:0%
more response data okay let's run that
 

00:15:07.290 --> 00:15:16.519 align:start position:0%
more response data okay let's run that
again<00:15:14.240><c> okay</c><00:15:15.240><c> we</c><00:15:15.420><c> can</c><00:15:15.569><c> see</c><00:15:15.720><c> on</c><00:15:15.870><c> Nexus</c><00:15:16.259><c> being</c>

00:15:16.519 --> 00:15:16.529 align:start position:0%
again okay we can see on Nexus being
 

00:15:16.529 --> 00:15:17.809 align:start position:0%
again okay we can see on Nexus being
called<00:15:16.800><c> a</c><00:15:16.920><c> number</c><00:15:17.040><c> of</c><00:15:17.190><c> times</c>

00:15:17.809 --> 00:15:17.819 align:start position:0%
called a number of times
 

00:15:17.819 --> 00:15:20.240 align:start position:0%
called a number of times
we're<00:15:18.569><c> T</c><00:15:18.839><c> PI</c><00:15:19.079><c> buffers</c><00:15:19.500><c> that</c><00:15:19.680><c> contain</c><00:15:20.069><c> the</c>

00:15:20.240 --> 00:15:20.250 align:start position:0%
we're T PI buffers that contain the
 

00:15:20.250 --> 00:15:22.490 align:start position:0%
we're T PI buffers that contain the
response<00:15:20.610><c> body</c><00:15:20.850><c> bytes</c><00:15:21.180><c> they</c><00:15:22.170><c> all</c><00:15:22.319><c> get</c>

00:15:22.490 --> 00:15:22.500 align:start position:0%
response body bytes they all get
 

00:15:22.500 --> 00:15:25.220 align:start position:0%
response body bytes they all get
accumulated<00:15:22.949><c> and</c><00:15:23.490><c> then</c><00:15:23.699><c> in</c><00:15:23.850><c> oncomplete</c><00:15:24.230><c> they</c>

00:15:25.220 --> 00:15:25.230 align:start position:0%
accumulated and then in oncomplete they
 

00:15:25.230 --> 00:15:27.800 align:start position:0%
accumulated and then in oncomplete they
get<00:15:25.560><c> converted</c><00:15:25.920><c> to</c><00:15:26.160><c> a</c><00:15:26.190><c> string</c><00:15:26.660><c> and</c><00:15:27.660><c> their</c>

00:15:27.800 --> 00:15:27.810 align:start position:0%
get converted to a string and their
 

00:15:27.810 --> 00:15:30.379 align:start position:0%
get converted to a string and their
string<00:15:28.110><c> in</c><00:15:28.230><c> this</c><00:15:28.350><c> case</c><00:15:28.589><c> some</c><00:15:28.889><c> XML</c><00:15:29.370><c> that</c><00:15:29.670><c> are</c>

00:15:30.379 --> 00:15:30.389 align:start position:0%
string in this case some XML that are
 

00:15:30.389 --> 00:15:36.230 align:start position:0%
string in this case some XML that are
very<00:15:30.569><c> a</c><00:15:30.630><c> very</c><00:15:30.720><c> long</c><00:15:31.110><c> line</c><00:15:34.670><c> okay</c><00:15:35.670><c> so</c><00:15:35.699><c> now</c><00:15:36.000><c> we've</c>

00:15:36.230 --> 00:15:36.240 align:start position:0%
very a very long line okay so now we've
 

00:15:36.240 --> 00:15:39.170 align:start position:0%
very a very long line okay so now we've
seen<00:15:36.540><c> how</c><00:15:36.870><c> to</c><00:15:37.019><c> write</c><00:15:37.259><c> a</c><00:15:37.290><c> custom</c><00:15:38.180><c> body</c>

00:15:39.170 --> 00:15:39.180 align:start position:0%
seen how to write a custom body
 

00:15:39.180 --> 00:15:42.050 align:start position:0%
seen how to write a custom body
subscriber<00:15:39.839><c> that</c><00:15:40.350><c> converts</c><00:15:40.740><c> the</c><00:15:41.060><c> response</c>

00:15:42.050 --> 00:15:42.060 align:start position:0%
subscriber that converts the response
 

00:15:42.060 --> 00:15:45.290 align:start position:0%
subscriber that converts the response
body<00:15:42.269><c> bytes</c><00:15:42.569><c> into</c><00:15:42.870><c> a</c><00:15:42.930><c> string</c><00:15:43.670><c> what</c><00:15:44.670><c> if</c><00:15:44.880><c> we</c><00:15:45.060><c> had</c>

00:15:45.290 --> 00:15:45.300 align:start position:0%
body bytes into a string what if we had
 

00:15:45.300 --> 00:15:48.860 align:start position:0%
body bytes into a string what if we had
a<00:15:45.569><c> flow</c><00:15:46.110><c> subscriber</c><00:15:46.680><c> to</c><00:15:47.399><c> an</c><00:15:47.490><c> existing</c><00:15:48.000><c> flow</c>

00:15:48.860 --> 00:15:48.870 align:start position:0%
a flow subscriber to an existing flow
 

00:15:48.870 --> 00:15:58.140 align:start position:0%
a flow subscriber to an existing flow
subscriber

00:15:58.140 --> 00:15:58.150 align:start position:0%
 
 

00:15:58.150 --> 00:16:00.670 align:start position:0%
 
and<00:15:59.150><c> we</c><00:15:59.240><c> wanted</c><00:15:59.480><c> to</c><00:15:59.540><c> use</c><00:15:59.630><c> that</c><00:15:59.900><c> with</c><00:16:00.050><c> the</c><00:16:00.110><c> HTTP</c>

00:16:00.670 --> 00:16:00.680 align:start position:0%
and we wanted to use that with the HTTP
 

00:16:00.680 --> 00:16:03.790 align:start position:0%
and we wanted to use that with the HTTP
clients<00:16:01.130><c> the</c><00:16:02.090><c> HTTP</c><00:16:02.720><c> client</c><00:16:03.110><c> only</c><00:16:03.320><c> worked</c><00:16:03.620><c> with</c>

00:16:03.790 --> 00:16:03.800 align:start position:0%
clients the HTTP client only worked with
 

00:16:03.800 --> 00:16:07.270 align:start position:0%
clients the HTTP client only worked with
buddy<00:16:04.130><c> subscribers</c><00:16:05.470><c> so</c><00:16:06.470><c> let's</c><00:16:06.950><c> see</c><00:16:07.100><c> how</c><00:16:07.220><c> we</c>

00:16:07.270 --> 00:16:07.280 align:start position:0%
buddy subscribers so let's see how we
 

00:16:07.280 --> 00:16:10.720 align:start position:0%
buddy subscribers so let's see how we
can<00:16:07.580><c> make</c><00:16:07.700><c> that</c><00:16:07.880><c> work</c><00:16:08.530><c> so</c><00:16:09.530><c> first</c><00:16:09.830><c> of</c><00:16:09.980><c> all</c><00:16:10.100><c> the</c>

00:16:10.720 --> 00:16:10.730 align:start position:0%
can make that work so first of all the
 

00:16:10.730 --> 00:16:12.190 align:start position:0%
can make that work so first of all the
flow<00:16:10.910><c> subscriber</c><00:16:11.390><c> doesn't</c><00:16:11.690><c> have</c><00:16:11.780><c> a</c><00:16:11.840><c> get</c><00:16:11.990><c> buddy</c>

00:16:12.190 --> 00:16:12.200 align:start position:0%
flow subscriber doesn't have a get buddy
 

00:16:12.200 --> 00:16:15.280 align:start position:0%
flow subscriber doesn't have a get buddy
method<00:16:13.150><c> and</c><00:16:14.150><c> it</c><00:16:14.420><c> also</c><00:16:14.570><c> doesn't</c><00:16:14.960><c> have</c><00:16:15.020><c> a</c><00:16:15.110><c> buddy</c>

00:16:15.280 --> 00:16:15.290 align:start position:0%
method and it also doesn't have a buddy
 

00:16:15.290 --> 00:16:19.180 align:start position:0%
method and it also doesn't have a buddy
CF<00:16:16.570><c> for</c><00:16:17.570><c> simplicity</c><00:16:18.170><c> let's</c><00:16:18.620><c> just</c><00:16:18.680><c> print</c><00:16:19.070><c> out</c>

00:16:19.180 --> 00:16:19.190 align:start position:0%
CF for simplicity let's just print out
 

00:16:19.190 --> 00:16:25.450 align:start position:0%
CF for simplicity let's just print out
the<00:16:19.250><c> error</c><00:16:19.580><c> if</c><00:16:19.910><c> one</c><00:16:20.150><c> were</c><00:16:20.300><c> to</c><00:16:20.330><c> occur</c><00:16:20.810><c> I</c><00:16:24.460><c> can</c>

00:16:25.450 --> 00:16:25.460 align:start position:0%
the error if one were to occur I can
 

00:16:25.460 --> 00:16:30.160 align:start position:0%
the error if one were to occur I can
remove<00:16:25.700><c> this</c><00:16:25.970><c> here</c><00:16:28.150><c> so</c><00:16:29.150><c> the</c><00:16:29.420><c> flow</c><00:16:29.690><c> subscriber</c>

00:16:30.160 --> 00:16:30.170 align:start position:0%
remove this here so the flow subscriber
 

00:16:30.170 --> 00:16:32.890 align:start position:0%
remove this here so the flow subscriber
still<00:16:30.470><c> needs</c><00:16:30.800><c> some</c><00:16:31.280><c> way</c><00:16:31.610><c> of</c><00:16:31.940><c> exposing</c><00:16:32.420><c> its</c>

00:16:32.890 --> 00:16:32.900 align:start position:0%
still needs some way of exposing its
 

00:16:32.900 --> 00:16:38.340 align:start position:0%
still needs some way of exposing its
data<00:16:35.410><c> so</c><00:16:36.410><c> let's</c><00:16:36.560><c> give</c><00:16:36.770><c> it</c><00:16:36.800><c> a</c><00:16:37.010><c> private</c><00:16:37.550><c> field</c>

00:16:38.340 --> 00:16:38.350 align:start position:0%
data so let's give it a private field
 

00:16:38.350 --> 00:16:49.500 align:start position:0%
data so let's give it a private field
string<00:16:39.820><c> to</c><00:16:40.820><c> hold</c><00:16:41.570><c> its</c><00:16:41.780><c> body</c><00:16:42.010><c> and</c><00:16:43.010><c> an</c><00:16:43.190><c> accessor</c>

00:16:49.500 --> 00:16:49.510 align:start position:0%
 
 

00:16:49.510 --> 00:16:57.550 align:start position:0%
 
get<00:16:50.510><c> body</c><00:16:50.750><c> to</c><00:16:51.110><c> return</c><00:16:51.410><c> the</c><00:16:51.590><c> body</c><00:16:56.320><c> ok</c><00:16:57.320><c> and</c>

00:16:57.550 --> 00:16:57.560 align:start position:0%
get body to return the body ok and
 

00:16:57.560 --> 00:17:00.970 align:start position:0%
get body to return the body ok and
uncomplete<00:16:58.100><c> now</c><00:16:58.450><c> we</c><00:16:59.450><c> need</c><00:16:59.630><c> to</c><00:16:59.750><c> set</c><00:17:00.020><c> the</c><00:17:00.770><c> body</c>

00:17:00.970 --> 00:17:00.980 align:start position:0%
uncomplete now we need to set the body
 

00:17:00.980 --> 00:17:08.620 align:start position:0%
uncomplete now we need to set the body
field<00:17:04.810><c> ok</c><00:17:06.370><c> so</c><00:17:07.370><c> now</c><00:17:07.520><c> we</c><00:17:07.580><c> are</c><00:17:07.700><c> string</c><00:17:08.090><c> subscriber</c>

00:17:08.620 --> 00:17:08.630 align:start position:0%
field ok so now we are string subscriber
 

00:17:08.630 --> 00:17:10.840 align:start position:0%
field ok so now we are string subscriber
which<00:17:08.960><c> is</c><00:17:09.230><c> an</c><00:17:09.770><c> implementation</c><00:17:10.040><c> of</c><00:17:10.490><c> a</c><00:17:10.610><c> flow</c>

00:17:10.840 --> 00:17:10.850 align:start position:0%
which is an implementation of a flow
 

00:17:10.850 --> 00:17:13.060 align:start position:0%
which is an implementation of a flow
subscriber<00:17:11.390><c> how</c><00:17:12.290><c> can</c><00:17:12.470><c> we</c><00:17:12.560><c> use</c><00:17:12.710><c> this</c><00:17:12.860><c> with</c><00:17:13.040><c> a</c>

00:17:13.060 --> 00:17:13.070 align:start position:0%
subscriber how can we use this with a
 

00:17:13.070 --> 00:17:16.780 align:start position:0%
subscriber how can we use this with a
HTTP<00:17:13.820><c> client</c><00:17:14.530><c> well</c><00:17:15.530><c> the</c><00:17:15.620><c> HTTP</c><00:17:16.340><c> client</c>

00:17:16.780 --> 00:17:16.790 align:start position:0%
HTTP client well the HTTP client
 

00:17:16.790 --> 00:17:20.170 align:start position:0%
HTTP client well the HTTP client
provides<00:17:18.400><c> convenience</c><00:17:19.400><c> static</c><00:17:20.060><c> factory</c>

00:17:20.170 --> 00:17:20.180 align:start position:0%
provides convenience static factory
 

00:17:20.180 --> 00:17:22.360 align:start position:0%
provides convenience static factory
methods<00:17:20.720><c> that</c><00:17:21.200><c> adapt</c><00:17:21.530><c> between</c><00:17:22.070><c> flow</c>

00:17:22.360 --> 00:17:22.370 align:start position:0%
methods that adapt between flow
 

00:17:22.370 --> 00:17:25.120 align:start position:0%
methods that adapt between flow
subscriber<00:17:22.880><c> and</c><00:17:23.150><c> body</c><00:17:23.450><c> subscriber</c><00:17:23.960><c> so</c><00:17:24.950><c> let's</c>

00:17:25.120 --> 00:17:25.130 align:start position:0%
subscriber and body subscriber so let's
 

00:17:25.130 --> 00:17:38.520 align:start position:0%
subscriber and body subscriber so let's
use<00:17:25.310><c> one</c><00:17:25.490><c> of</c><00:17:25.520><c> those</c>

00:17:38.520 --> 00:17:38.530 align:start position:0%
 
 

00:17:38.530 --> 00:17:40.920 align:start position:0%
 
so<00:17:39.190><c> there's</c><00:17:39.340><c> two</c><00:17:39.490><c> variants</c><00:17:39.940><c> of</c><00:17:40.000><c> the</c><00:17:40.600><c> from</c>

00:17:40.920 --> 00:17:40.930 align:start position:0%
so there's two variants of the from
 

00:17:40.930 --> 00:17:44.460 align:start position:0%
so there's two variants of the from
subscriber<00:17:41.410><c> adapter</c><00:17:42.000><c> the</c><00:17:43.000><c> first</c><00:17:43.270><c> takes</c><00:17:44.200><c> just</c>

00:17:44.460 --> 00:17:44.470 align:start position:0%
subscriber adapter the first takes just
 

00:17:44.470 --> 00:17:47.790 align:start position:0%
subscriber adapter the first takes just
a<00:17:44.590><c> subscriber</c><00:17:45.070><c> and</c><00:17:45.870><c> order</c><00:17:46.870><c> takes</c><00:17:47.530><c> a</c>

00:17:47.790 --> 00:17:47.800 align:start position:0%
a subscriber and order takes a
 

00:17:47.800 --> 00:17:50.180 align:start position:0%
a subscriber and order takes a
subscriber<00:17:48.370><c> with</c><00:17:48.820><c> a</c><00:17:49.090><c> finisher</c><00:17:49.750><c> function</c>

00:17:50.180 --> 00:17:50.190 align:start position:0%
subscriber with a finisher function
 

00:17:50.190 --> 00:17:52.680 align:start position:0%
subscriber with a finisher function
we're<00:17:51.190><c> going</c><00:17:51.220><c> to</c><00:17:51.400><c> use</c><00:17:51.520><c> the</c><00:17:51.640><c> latter</c><00:17:51.850><c> because</c><00:17:52.540><c> we</c>

00:17:52.680 --> 00:17:52.690 align:start position:0%
we're going to use the latter because we
 

00:17:52.690 --> 00:17:55.380 align:start position:0%
we're going to use the latter because we
need<00:17:52.810><c> to</c><00:17:52.930><c> extract</c><00:17:53.290><c> the</c><00:17:53.470><c> data</c><00:17:53.620><c> from</c><00:17:54.120><c> the</c><00:17:55.120><c> string</c>

00:17:55.380 --> 00:17:55.390 align:start position:0%
need to extract the data from the string
 

00:17:55.390 --> 00:17:59.190 align:start position:0%
need to extract the data from the string
subscriber<00:17:55.900><c> and</c><00:17:56.350><c> to</c><00:17:56.560><c> complete</c><00:17:56.950><c> the</c><00:17:58.200><c> HTTP</c>

00:17:59.190 --> 00:17:59.200 align:start position:0%
subscriber and to complete the HTTP
 

00:17:59.200 --> 00:18:04.200 align:start position:0%
subscriber and to complete the HTTP
computable<00:18:00.070><c> future</c><00:18:00.370><c> with</c><00:18:00.520><c> that</c><00:18:00.670><c> value</c><00:18:03.030><c> so</c><00:18:04.030><c> the</c>

00:18:04.200 --> 00:18:04.210 align:start position:0%
computable future with that value so the
 

00:18:04.210 --> 00:18:07.200 align:start position:0%
computable future with that value so the
new<00:18:04.360><c> string</c><00:18:04.810><c> subscriber</c><00:18:05.640><c> will</c><00:18:06.640><c> use</c><00:18:06.910><c> the</c>

00:18:07.200 --> 00:18:07.210 align:start position:0%
new string subscriber will use the
 

00:18:07.210 --> 00:18:10.590 align:start position:0%
new string subscriber will use the
string<00:18:07.660><c> subscriber</c><00:18:08.320><c> get</c><00:18:08.590><c> body</c><00:18:08.800><c> methods</c><00:18:09.600><c> to</c>

00:18:10.590 --> 00:18:10.600 align:start position:0%
string subscriber get body methods to
 

00:18:10.600 --> 00:18:11.790 align:start position:0%
string subscriber get body methods to
extract<00:18:10.690><c> the</c><00:18:11.110><c> data</c><00:18:11.230><c> from</c><00:18:11.530><c> the</c><00:18:11.620><c> flow</c>

00:18:11.790 --> 00:18:11.800 align:start position:0%
extract the data from the flow
 

00:18:11.800 --> 00:18:17.100 align:start position:0%
extract the data from the flow
subscriber<00:18:15.210><c> so</c><00:18:16.210><c> instead</c><00:18:16.510><c> of</c><00:18:16.600><c> using</c><00:18:16.810><c> a</c><00:18:16.960><c> new</c>

00:18:17.100 --> 00:18:17.110 align:start position:0%
subscriber so instead of using a new
 

00:18:17.110 --> 00:18:20.120 align:start position:0%
subscriber so instead of using a new
string<00:18:17.440><c> subscriber</c><00:18:17.950><c> here</c><00:18:18.310><c> we</c><00:18:19.180><c> can</c><00:18:19.390><c> use</c><00:18:19.630><c> the</c>

00:18:20.120 --> 00:18:20.130 align:start position:0%
string subscriber here we can use the
 

00:18:20.130 --> 00:18:31.460 align:start position:0%
string subscriber here we can use the
body<00:18:21.130><c> subscriber</c><00:18:22.200><c> okay</c><00:18:23.200><c> let's</c><00:18:23.410><c> run</c><00:18:23.560><c> that</c>

00:18:31.460 --> 00:18:31.470 align:start position:0%
 
 

00:18:31.470 --> 00:18:33.230 align:start position:0%
 
again<00:18:32.159><c> we</c><00:18:32.340><c> can</c><00:18:32.460><c> see</c><00:18:32.610><c> all</c><00:18:32.730><c> that</c><00:18:32.879><c> on</c><00:18:33.000><c> next</c>

00:18:33.230 --> 00:18:33.240 align:start position:0%
again we can see all that on next
 

00:18:33.240 --> 00:18:37.070 align:start position:0%
again we can see all that on next
implications<00:18:33.960><c> and</c><00:18:34.279><c> we</c><00:18:35.279><c> have</c><00:18:35.580><c> the</c><00:18:36.080><c> response</c>

00:18:37.070 --> 00:18:37.080 align:start position:0%
implications and we have the response
 

00:18:37.080 --> 00:18:40.580 align:start position:0%
implications and we have the response
body<00:18:37.289><c> as</c><00:18:37.470><c> a</c><00:18:37.500><c> string</c><00:18:37.799><c> again</c><00:18:39.289><c> we</c><00:18:40.289><c> can</c><00:18:40.440><c> simplify</c>

00:18:40.580 --> 00:18:40.590 align:start position:0%
body as a string again we can simplify
 

00:18:40.590 --> 00:18:43.249 align:start position:0%
body as a string again we can simplify
this<00:18:40.950><c> even</c><00:18:41.220><c> further</c><00:18:41.720><c> instead</c><00:18:42.720><c> of</c><00:18:42.840><c> using</c><00:18:43.080><c> a</c>

00:18:43.249 --> 00:18:43.259 align:start position:0%
this even further instead of using a
 

00:18:43.259 --> 00:18:45.289 align:start position:0%
this even further instead of using a
body<00:18:43.409><c> subscriber</c><00:18:44.009><c> directly</c><00:18:44.519><c> the</c><00:18:45.059><c> body</c>

00:18:45.289 --> 00:18:45.299 align:start position:0%
body subscriber directly the body
 

00:18:45.299 --> 00:18:49.430 align:start position:0%
body subscriber directly the body
handlers<00:18:45.899><c> and</c><00:18:46.649><c> body</c><00:18:46.919><c> handler</c><00:18:47.509><c> classes</c><00:18:48.509><c> expose</c>

00:18:49.430 --> 00:18:49.440 align:start position:0%
handlers and body handler classes expose
 

00:18:49.440 --> 00:18:51.680 align:start position:0%
handlers and body handler classes expose
factory<00:18:49.799><c> methods</c><00:18:50.129><c> of</c><00:18:50.549><c> similar</c><00:18:50.940><c> names</c><00:18:51.149><c> so</c>

00:18:51.680 --> 00:18:51.690 align:start position:0%
factory methods of similar names so
 

00:18:51.690 --> 00:19:05.310 align:start position:0%
factory methods of similar names so
let's<00:18:51.870><c> use</c><00:18:52.049><c> one</c><00:18:52.200><c> of</c><00:18:52.289><c> those</c><00:18:52.440><c> instead</c>

00:19:05.310 --> 00:19:05.320 align:start position:0%
 
 

00:19:05.320 --> 00:19:07.480 align:start position:0%
 
okay<00:19:06.320><c> so</c><00:19:06.380><c> we</c><00:19:06.590><c> don't</c><00:19:06.740><c> need</c><00:19:06.860><c> to</c><00:19:06.980><c> lambda</c><00:19:07.340><c> here</c>

00:19:07.480 --> 00:19:07.490 align:start position:0%
okay so we don't need to lambda here
 

00:19:07.490 --> 00:19:10.030 align:start position:0%
okay so we don't need to lambda here
anymore<00:19:07.900><c> should</c><00:19:08.900><c> be</c><00:19:08.990><c> I</c><00:19:09.020><c> use</c><00:19:09.320><c> the</c><00:19:09.440><c> body</c><00:19:09.620><c> handler</c>

00:19:10.030 --> 00:19:10.040 align:start position:0%
anymore should be I use the body handler
 

00:19:10.040 --> 00:19:12.820 align:start position:0%
anymore should be I use the body handler
directly<00:19:10.960><c> so</c><00:19:11.960><c> let's</c><00:19:12.140><c> run</c><00:19:12.290><c> that</c><00:19:12.470><c> to</c><00:19:12.650><c> make</c><00:19:12.800><c> sure</c>

00:19:12.820 --> 00:19:12.830 align:start position:0%
directly so let's run that to make sure
 

00:19:12.830 --> 00:19:19.900 align:start position:0%
directly so let's run that to make sure
it<00:19:12.980><c> works</c><00:19:18.460><c> okay</c><00:19:19.460><c> great</c>

00:19:19.900 --> 00:19:19.910 align:start position:0%
it works okay great
 

00:19:19.910 --> 00:19:23.710 align:start position:0%
it works okay great
same<00:19:20.330><c> output</c><00:19:20.890><c> so</c><00:19:21.890><c> we've</c><00:19:22.130><c> seen</c><00:19:22.340><c> how</c><00:19:22.400><c> to</c><00:19:22.730><c> write</c><00:19:23.690><c> a</c>

00:19:23.710 --> 00:19:23.720 align:start position:0%
same output so we've seen how to write a
 

00:19:23.720 --> 00:19:26.740 align:start position:0%
same output so we've seen how to write a
custom<00:19:24.020><c> body</c><00:19:24.710><c> handler</c><00:19:25.100><c> and</c><00:19:25.280><c> also</c><00:19:26.270><c> how</c><00:19:26.690><c> to</c>

00:19:26.740 --> 00:19:26.750 align:start position:0%
custom body handler and also how to
 

00:19:26.750 --> 00:19:32.920 align:start position:0%
custom body handler and also how to
adapt<00:19:27.230><c> a</c><00:19:27.500><c> flow</c><00:19:27.920><c> subscriber</c><00:19:28.720><c> to</c><00:19:29.720><c> the</c><00:19:29.960><c> HTTP</c><00:19:31.930><c> body</c>

00:19:32.920 --> 00:19:32.930 align:start position:0%
adapt a flow subscriber to the HTTP body
 

00:19:32.930 --> 00:19:38.320 align:start position:0%
adapt a flow subscriber to the HTTP body
handler<00:19:33.350><c> or</c><00:19:33.530><c> body</c><00:19:33.800><c> subscriber</c><00:19:37.120><c> there</c><00:19:38.120><c> are</c><00:19:38.300><c> a</c>

00:19:38.320 --> 00:19:38.330 align:start position:0%
handler or body subscriber there are a
 

00:19:38.330 --> 00:19:40.420 align:start position:0%
handler or body subscriber there are a
number<00:19:38.690><c> of</c><00:19:38.840><c> adapter</c><00:19:39.350><c> methods</c><00:19:39.740><c> that</c><00:19:40.040><c> support</c>

00:19:40.420 --> 00:19:40.430 align:start position:0%
number of adapter methods that support
 

00:19:40.430 --> 00:19:42.340 align:start position:0%
number of adapter methods that support
inter<00:19:40.730><c> operation</c><00:19:41.270><c> between</c><00:19:41.480><c> regular</c><00:19:42.110><c> flow</c>

00:19:42.340 --> 00:19:42.350 align:start position:0%
inter operation between regular flow
 

00:19:42.350 --> 00:19:44.560 align:start position:0%
inter operation between regular flow
types<00:19:42.650><c> like</c><00:19:43.400><c> flow</c><00:19:43.640><c> publisher</c><00:19:44.150><c> and</c><00:19:44.330><c> flow</c>

00:19:44.560 --> 00:19:44.570 align:start position:0%
types like flow publisher and flow
 

00:19:44.570 --> 00:19:47.380 align:start position:0%
types like flow publisher and flow
subscriber<00:19:45.320><c> and</c><00:19:45.620><c> their</c><00:19:46.190><c> HTTP</c><00:19:46.910><c> clients</c>

00:19:47.380 --> 00:19:47.390 align:start position:0%
subscriber and their HTTP clients
 

00:19:47.390 --> 00:19:50.290 align:start position:0%
subscriber and their HTTP clients
equivalents<00:19:48.250><c> the</c><00:19:49.250><c> one</c><00:19:49.400><c> we</c><00:19:49.550><c> just</c><00:19:49.790><c> seen</c><00:19:50.030><c> being</c>

00:19:50.290 --> 00:19:50.300 align:start position:0%
equivalents the one we just seen being
 

00:19:50.300 --> 00:19:52.810 align:start position:0%
equivalents the one we just seen being
used<00:19:50.540><c> in</c><00:19:50.720><c> a</c><00:19:50.780><c> demo</c><00:19:50.990><c> from</c><00:19:51.440><c> subscriber</c><00:19:52.010><c> has</c><00:19:52.490><c> two</c>

00:19:52.810 --> 00:19:52.820 align:start position:0%
used in a demo from subscriber has two
 

00:19:52.820 --> 00:19:55.870 align:start position:0%
used in a demo from subscriber has two
variants<00:19:53.420><c> the</c><00:19:54.350><c> first</c><00:19:54.590><c> just</c><00:19:54.890><c> accepts</c><00:19:55.340><c> a</c><00:19:55.520><c> flow</c>

00:19:55.870 --> 00:19:55.880 align:start position:0%
variants the first just accepts a flow
 

00:19:55.880 --> 00:19:58.180 align:start position:0%
variants the first just accepts a flow
subscriber<00:19:56.420><c> and</c><00:19:56.660><c> returns</c><00:19:57.350><c> a</c><00:19:57.500><c> body</c><00:19:57.680><c> subscriber</c>

00:19:58.180 --> 00:19:58.190 align:start position:0%
subscriber and returns a body subscriber
 

00:19:58.190 --> 00:20:01.420 align:start position:0%
subscriber and returns a body subscriber
avoid<00:19:58.640><c> in</c><00:19:59.570><c> this</c><00:19:59.990><c> case</c><00:20:00.260><c> the</c><00:20:00.590><c> response</c><00:20:00.950><c> body</c><00:20:01.220><c> is</c>

00:20:01.420 --> 00:20:01.430 align:start position:0%
avoid in this case the response body is
 

00:20:01.430 --> 00:20:03.220 align:start position:0%
avoid in this case the response body is
not<00:20:01.700><c> being</c><00:20:02.000><c> made</c><00:20:02.210><c> available</c><00:20:02.390><c> through</c><00:20:03.080><c> the</c>

00:20:03.220 --> 00:20:03.230 align:start position:0%
not being made available through the
 

00:20:03.230 --> 00:20:06.010 align:start position:0%
not being made available through the
HTTP<00:20:03.860><c> response</c><00:20:04.120><c> but</c><00:20:05.120><c> instead</c><00:20:05.420><c> through</c><00:20:05.840><c> some</c>

00:20:06.010 --> 00:20:06.020 align:start position:0%
HTTP response but instead through some
 

00:20:06.020 --> 00:20:08.230 align:start position:0%
HTTP response but instead through some
other<00:20:06.200><c> mechanism</c><00:20:06.890><c> like</c><00:20:07.550><c> an</c><00:20:07.760><c> entry</c><00:20:08.090><c> in</c><00:20:08.150><c> a</c>

00:20:08.230 --> 00:20:08.240 align:start position:0%
other mechanism like an entry in a
 

00:20:08.240 --> 00:20:11.260 align:start position:0%
other mechanism like an entry in a
database<00:20:09.040><c> the</c><00:20:10.040><c> second</c><00:20:10.430><c> variant</c><00:20:10.760><c> supports</c><00:20:11.180><c> a</c>

00:20:11.260 --> 00:20:11.270 align:start position:0%
database the second variant supports a
 

00:20:11.270 --> 00:20:13.090 align:start position:0%
database the second variant supports a
finisher<00:20:11.630><c> function</c><00:20:12.020><c> that</c><00:20:12.560><c> will</c><00:20:12.740><c> be</c><00:20:12.860><c> applied</c>

00:20:13.090 --> 00:20:13.100 align:start position:0%
finisher function that will be applied
 

00:20:13.100 --> 00:20:15.750 align:start position:0%
finisher function that will be applied
after<00:20:13.640><c> death</c><00:20:14.060><c> subscriber</c><00:20:14.510><c> has</c><00:20:14.810><c> completed</c><00:20:15.200><c> and</c>

00:20:15.750 --> 00:20:15.760 align:start position:0%
after death subscriber has completed and
 

00:20:15.760 --> 00:20:18.690 align:start position:0%
after death subscriber has completed and
we<00:20:16.760><c> seen</c><00:20:17.000><c> an</c><00:20:17.150><c> example</c><00:20:17.270><c> of</c><00:20:17.690><c> this</c><00:20:17.810><c> in</c><00:20:17.960><c> the</c><00:20:17.990><c> demo</c>

00:20:18.690 --> 00:20:18.700 align:start position:0%
we seen an example of this in the demo
 

00:20:18.700 --> 00:20:21.490 align:start position:0%
we seen an example of this in the demo
there<00:20:19.700><c> are</c><00:20:19.910><c> also</c><00:20:20.120><c> a</c><00:20:20.330><c> similar</c><00:20:20.780><c> pair</c><00:20:21.020><c> of</c><00:20:21.110><c> methods</c>

00:20:21.490 --> 00:20:21.500 align:start position:0%
there are also a similar pair of methods
 

00:20:21.500 --> 00:20:24.310 align:start position:0%
there are also a similar pair of methods
from<00:20:21.950><c> Lion</c><00:20:22.220><c> subscriber</c><00:20:22.760><c> that</c><00:20:23.630><c> interoperate</c>

00:20:24.310 --> 00:20:24.320 align:start position:0%
from Lion subscriber that interoperate
 

00:20:24.320 --> 00:20:27.430 align:start position:0%
from Lion subscriber that interoperate
with<00:20:24.350><c> flow</c><00:20:25.130><c> subscribers</c><00:20:25.850><c> of</c><00:20:26.030><c> string</c><00:20:26.440><c> where</c>

00:20:27.430 --> 00:20:27.440 align:start position:0%
with flow subscribers of string where
 

00:20:27.440 --> 00:20:30.070 align:start position:0%
with flow subscribers of string where
the<00:20:27.530><c> response</c><00:20:27.950><c> body</c><00:20:28.190><c> data</c><00:20:28.910><c> is</c><00:20:29.210><c> converted</c><00:20:29.570><c> to</c><00:20:29.930><c> a</c>

00:20:30.070 --> 00:20:30.080 align:start position:0%
the response body data is converted to a
 

00:20:30.080 --> 00:20:32.980 align:start position:0%
the response body data is converted to a
flow<00:20:30.380><c> of</c><00:20:30.590><c> string</c><00:20:30.920><c> lines</c><00:20:31.220><c> and</c><00:20:31.630><c> sent</c><00:20:32.630><c> to</c><00:20:32.870><c> the</c>

00:20:32.980 --> 00:20:32.990 align:start position:0%
flow of string lines and sent to the
 

00:20:32.990 --> 00:20:36.400 align:start position:0%
flow of string lines and sent to the
flow<00:20:33.140><c> subscriber</c><00:20:33.680><c> line</c><00:20:34.400><c> by</c><00:20:34.640><c> line</c><00:20:35.260><c> this</c><00:20:36.260><c> is</c>

00:20:36.400 --> 00:20:36.410 align:start position:0%
flow subscriber line by line this is
 

00:20:36.410 --> 00:20:38.020 align:start position:0%
flow subscriber line by line this is
somewhat<00:20:36.770><c> analogous</c><00:20:37.100><c> to</c><00:20:37.280><c> bufferedreader</c>

00:20:38.020 --> 00:20:38.030 align:start position:0%
somewhat analogous to bufferedreader
 

00:20:38.030 --> 00:20:41.200 align:start position:0%
somewhat analogous to bufferedreader
read<00:20:38.600><c> lines</c><00:20:38.840><c> or</c><00:20:39.170><c> the</c><00:20:39.890><c> niño</c><00:20:40.190><c> files</c><00:20:40.610><c> Lyons</c>

00:20:41.200 --> 00:20:41.210 align:start position:0%
read lines or the niño files Lyons
 

00:20:41.210 --> 00:20:43.840 align:start position:0%
read lines or the niño files Lyons
method<00:20:41.570><c> that</c><00:20:42.110><c> returns</c><00:20:42.530><c> a</c><00:20:42.710><c> stream</c><00:20:43.010><c> of</c><00:20:43.220><c> lines</c><00:20:43.520><c> in</c>

00:20:43.840 --> 00:20:43.850 align:start position:0%
method that returns a stream of lines in
 

00:20:43.850 --> 00:20:44.700 align:start position:0%
method that returns a stream of lines in
a<00:20:44.000><c> file</c>

00:20:44.700 --> 00:20:44.710 align:start position:0%
a file
 

00:20:44.710 --> 00:20:47.290 align:start position:0%
a file
there<00:20:45.710><c> are</c><00:20:45.800><c> also</c><00:20:45.980><c> equivalent</c><00:20:46.370><c> adapters</c><00:20:47.060><c> on</c>

00:20:47.290 --> 00:20:47.300 align:start position:0%
there are also equivalent adapters on
 

00:20:47.300 --> 00:20:52.270 align:start position:0%
there are also equivalent adapters on
the<00:20:47.420><c> sending</c><00:20:47.810><c> side</c><00:20:47.990><c> for</c><00:20:48.440><c> request</c><00:20:48.770><c> body</c><00:20:51.280><c> to</c>

00:20:52.270 --> 00:20:52.280 align:start position:0%
the sending side for request body to
 

00:20:52.280 --> 00:20:55.570 align:start position:0%
the sending side for request body to
summarize<00:20:52.720><c> the</c><00:20:53.720><c> HTTP</c><00:20:54.470><c> client</c><00:20:54.890><c> treats</c><00:20:55.340><c> boat</c>

00:20:55.570 --> 00:20:55.580 align:start position:0%
summarize the HTTP client treats boat
 

00:20:55.580 --> 00:20:57.520 align:start position:0%
summarize the HTTP client treats boat
requests<00:20:56.120><c> and</c><00:20:56.270><c> response</c><00:20:56.600><c> body</c><00:20:56.840><c> as</c><00:20:57.110><c> reactive</c>

00:20:57.520 --> 00:20:57.530 align:start position:0%
requests and response body as reactive
 

00:20:57.530 --> 00:21:00.010 align:start position:0%
requests and response body as reactive
streams<00:20:57.910><c> so</c><00:20:58.910><c> gets</c><00:20:59.090><c> the</c><00:20:59.240><c> benefits</c><00:20:59.660><c> of</c>

00:21:00.010 --> 00:21:00.020 align:start position:0%
streams so gets the benefits of
 

00:21:00.020 --> 00:21:01.750 align:start position:0%
streams so gets the benefits of
asynchronous<00:21:00.620><c> programming</c><00:21:01.070><c> with</c>

00:21:01.750 --> 00:21:01.760 align:start position:0%
asynchronous programming with
 

00:21:01.760 --> 00:21:04.720 align:start position:0%
asynchronous programming with
non-blocking<00:21:02.300><c> backpressure</c><00:21:03.310><c> we</c><00:21:04.310><c> seen</c><00:21:04.520><c> how</c><00:21:04.670><c> to</c>

00:21:04.720 --> 00:21:04.730 align:start position:0%
non-blocking backpressure we seen how to
 

00:21:04.730 --> 00:21:06.990 align:start position:0%
non-blocking backpressure we seen how to
write<00:21:05.030><c> a</c><00:21:05.210><c> custom</c><00:21:05.480><c> body</c><00:21:05.930><c> subscriber</c>

00:21:06.990 --> 00:21:07.000 align:start position:0%
write a custom body subscriber
 

00:21:07.000 --> 00:21:09.730 align:start position:0%
write a custom body subscriber
implementation<00:21:08.000><c> that</c><00:21:08.330><c> behaves</c><00:21:08.690><c> similar</c><00:21:09.140><c> to</c>

00:21:09.730 --> 00:21:09.740 align:start position:0%
implementation that behaves similar to
 

00:21:09.740 --> 00:21:11.530 align:start position:0%
implementation that behaves similar to
the<00:21:09.830><c> convenience</c><00:21:10.310><c> body</c><00:21:10.550><c> subscriber</c><00:21:11.120><c> returned</c>

00:21:11.530 --> 00:21:11.540 align:start position:0%
the convenience body subscriber returned
 

00:21:11.540 --> 00:21:15.730 align:start position:0%
the convenience body subscriber returned
by<00:21:11.750><c> body</c><00:21:11.990><c> subscribers</c><00:21:12.650><c> off</c><00:21:12.830><c> string</c><00:21:14.020><c> the</c><00:21:15.020><c> HTTP</c>

00:21:15.730 --> 00:21:15.740 align:start position:0%
by body subscribers off string the HTTP
 

00:21:15.740 --> 00:21:17.500 align:start position:0%
by body subscribers off string the HTTP
client<00:21:16.130><c> provides</c><00:21:16.460><c> a</c><00:21:16.580><c> number</c><00:21:16.700><c> of</c><00:21:16.850><c> adapters</c>

00:21:17.500 --> 00:21:17.510 align:start position:0%
client provides a number of adapters
 

00:21:17.510 --> 00:21:19.330 align:start position:0%
client provides a number of adapters
for<00:21:17.750><c> interoperating</c><00:21:18.410><c> with</c><00:21:18.530><c> existing</c>

00:21:19.330 --> 00:21:19.340 align:start position:0%
for interoperating with existing
 

00:21:19.340 --> 00:21:21.220 align:start position:0%
for interoperating with existing
reactive<00:21:20.000><c> streams</c><00:21:20.330><c> publishers</c><00:21:20.990><c> and</c>

00:21:21.220 --> 00:21:21.230 align:start position:0%
reactive streams publishers and
 

00:21:21.230 --> 00:21:26.230 align:start position:0%
reactive streams publishers and
subscribers<00:21:23.860><c> you</c><00:21:24.860><c> can</c><00:21:24.890><c> download</c><00:21:25.250><c> Java</c><00:21:25.730><c> 11</c><00:21:26.090><c> now</c>

00:21:26.230 --> 00:21:26.240 align:start position:0%
subscribers you can download Java 11 now
 

00:21:26.240 --> 00:21:29.260 align:start position:0%
subscribers you can download Java 11 now
at<00:21:26.390><c> this</c><00:21:26.510><c> URL</c><00:21:27.190><c> please</c><00:21:28.190><c> join</c><00:21:28.490><c> us</c><00:21:28.520><c> at</c><00:21:28.820><c> open</c><00:21:29.090><c> JDK</c>

00:21:29.260 --> 00:21:29.270 align:start position:0%
at this URL please join us at open JDK
 

00:21:29.270 --> 00:21:32.380 align:start position:0%
at this URL please join us at open JDK
or<00:21:29.930><c> follow</c><00:21:30.260><c> us</c><00:21:30.410><c> on</c><00:21:30.530><c> Twitter</c><00:21:30.590><c> at</c><00:21:31.070><c> open</c><00:21:31.670><c> JDK</c><00:21:31.850><c> or</c>

00:21:32.380 --> 00:21:32.390 align:start position:0%
or follow us on Twitter at open JDK or
 

00:21:32.390 --> 00:21:35.800 align:start position:0%
or follow us on Twitter at open JDK or
hashtag<00:21:33.080><c> Java</c><00:21:33.410><c> 11</c><00:21:33.850><c> my</c><00:21:34.850><c> own</c><00:21:34.970><c> twitter</c><00:21:35.270><c> handle</c><00:21:35.690><c> is</c>

00:21:35.800 --> 00:21:35.810 align:start position:0%
hashtag Java 11 my own twitter handle is
 

00:21:35.810 --> 00:21:43.060 align:start position:0%
hashtag Java 11 my own twitter handle is
at<00:21:36.260><c> checker</c><00:21:37.010><c> 999</c><00:21:41.350><c> oracle</c><00:21:42.350><c> is</c><00:21:42.470><c> the</c><00:21:42.590><c> steward</c><00:21:42.920><c> of</c>

00:21:43.060 --> 00:21:43.070 align:start position:0%
at checker 999 oracle is the steward of
 

00:21:43.070 --> 00:21:45.010 align:start position:0%
at checker 999 oracle is the steward of
java<00:21:43.370><c> providing</c><00:21:44.330><c> a</c><00:21:44.390><c> large</c><00:21:44.600><c> amount</c><00:21:44.900><c> of</c>

00:21:45.010 --> 00:21:45.020 align:start position:0%
java providing a large amount of
 

00:21:45.020 --> 00:21:46.870 align:start position:0%
java providing a large amount of
development<00:21:45.230><c> engineering</c><00:21:45.980><c> funding</c><00:21:46.430><c> for</c><00:21:46.790><c> the</c>

00:21:46.870 --> 00:21:46.880 align:start position:0%
development engineering funding for the
 

00:21:46.880 --> 00:21:50.980 align:start position:0%
development engineering funding for the
Java<00:21:47.090><c> SE</c><00:21:47.480><c> platform</c><00:21:47.990><c> and</c><00:21:48.200><c> open</c><00:21:48.710><c> JDK</c><00:21:49.990><c> Oracle</c>

00:21:50.980 --> 00:21:50.990 align:start position:0%
Java SE platform and open JDK Oracle
 

00:21:50.990 --> 00:21:52.990 align:start position:0%
Java SE platform and open JDK Oracle
provides<00:21:51.290><c> leading</c><00:21:51.800><c> class</c><00:21:52.010><c> premier</c><00:21:52.640><c> support</c>

00:21:52.990 --> 00:21:53.000 align:start position:0%
provides leading class premier support
 

00:21:53.000 --> 00:21:55.900 align:start position:0%
provides leading class premier support
for<00:21:53.600><c> a</c><00:21:53.630><c> low</c><00:21:53.810><c> cost</c><00:21:54.080><c> that's</c><00:21:54.980><c> easy</c><00:21:55.280><c> to</c><00:21:55.520><c> purchase</c>

00:21:55.900 --> 00:21:55.910 align:start position:0%
for a low cost that's easy to purchase
 

00:21:55.910 --> 00:21:58.480 align:start position:0%
for a low cost that's easy to purchase
with<00:21:56.630><c> simple</c><00:21:56.990><c> pricing</c><00:21:57.410><c> tiers</c><00:21:57.680><c> thank</c><00:21:58.220><c> you</c><00:21:58.340><c> for</c>

00:21:58.480 --> 00:21:58.490 align:start position:0%
with simple pricing tiers thank you for
 

00:21:58.490 --> 00:22:00.040 align:start position:0%
with simple pricing tiers thank you for
watching

00:22:00.040 --> 00:22:00.050 align:start position:0%
watching
 

00:22:00.050 --> 00:22:04.200 align:start position:0%
watching
[Music]

