WEBVTT
Kind: captions
Language: en

00:00:00.450 --> 00:00:04.300 align:start position:0%
 
[Music]

00:00:04.300 --> 00:00:04.310 align:start position:0%
[Music]
 

00:00:04.310 --> 00:00:07.579 align:start position:0%
[Music]
hi<00:00:05.339><c> my</c><00:00:05.759><c> name</c><00:00:05.940><c> is</c><00:00:06.060><c> Chris</c><00:00:06.270><c> Haggerty</c><00:00:06.690><c> I</c><00:00:06.839><c> work</c><00:00:07.440><c> in</c>

00:00:07.579 --> 00:00:07.589 align:start position:0%
hi my name is Chris Haggerty I work in
 

00:00:07.589 --> 00:00:09.919 align:start position:0%
hi my name is Chris Haggerty I work in
the<00:00:07.680><c> Java</c><00:00:07.919><c> platform</c><00:00:08.160><c> group</c><00:00:08.610><c> at</c><00:00:08.760><c> Oracle</c><00:00:09.090><c> and</c>

00:00:09.919 --> 00:00:09.929 align:start position:0%
the Java platform group at Oracle and
 

00:00:09.929 --> 00:00:11.060 align:start position:0%
the Java platform group at Oracle and
today<00:00:10.200><c> I'm</c><00:00:10.410><c> going</c><00:00:10.500><c> to</c><00:00:10.590><c> be</c><00:00:10.650><c> talking</c><00:00:10.800><c> about</c>

00:00:11.060 --> 00:00:11.070 align:start position:0%
today I'm going to be talking about
 

00:00:11.070 --> 00:00:13.520 align:start position:0%
today I'm going to be talking about
handling<00:00:11.610><c> response</c><00:00:12.000><c> data</c><00:00:12.240><c> with</c><00:00:12.780><c> a</c><00:00:12.809><c> Java</c><00:00:13.110><c> 11</c>

00:00:13.520 --> 00:00:13.530 align:start position:0%
handling response data with a Java 11
 

00:00:13.530 --> 00:00:19.189 align:start position:0%
handling response data with a Java 11
HTTP<00:00:14.400><c> client</c><00:00:17.180><c> in</c><00:00:18.180><c> this</c><00:00:18.359><c> session</c><00:00:18.630><c> we're</c><00:00:19.020><c> going</c>

00:00:19.189 --> 00:00:19.199 align:start position:0%
HTTP client in this session we're going
 

00:00:19.199 --> 00:00:20.689 align:start position:0%
HTTP client in this session we're going
to<00:00:19.289><c> take</c><00:00:19.500><c> a</c><00:00:19.529><c> high-level</c><00:00:19.949><c> look</c><00:00:20.279><c> at</c><00:00:20.550><c> the</c>

00:00:20.689 --> 00:00:20.699 align:start position:0%
to take a high-level look at the
 

00:00:20.699 --> 00:00:22.519 align:start position:0%
to take a high-level look at the
reactive<00:00:21.060><c> streams</c><00:00:21.359><c> interfaces</c><00:00:22.080><c> in</c><00:00:22.230><c> the</c><00:00:22.320><c> Java</c>

00:00:22.519 --> 00:00:22.529 align:start position:0%
reactive streams interfaces in the Java
 

00:00:22.529 --> 00:00:25.460 align:start position:0%
reactive streams interfaces in the Java
platform<00:00:22.800><c> and</c><00:00:23.279><c> how</c><00:00:23.490><c> they</c><00:00:23.609><c> operate</c><00:00:24.170><c> using</c><00:00:25.170><c> this</c>

00:00:25.460 --> 00:00:25.470 align:start position:0%
platform and how they operate using this
 

00:00:25.470 --> 00:00:27.890 align:start position:0%
platform and how they operate using this
knowledge<00:00:25.680><c> we</c><00:00:26.130><c> will</c><00:00:26.250><c> then</c><00:00:26.460><c> see</c><00:00:26.760><c> how</c><00:00:27.090><c> the</c><00:00:27.150><c> HTTP</c>

00:00:27.890 --> 00:00:27.900 align:start position:0%
knowledge we will then see how the HTTP
 

00:00:27.900 --> 00:00:30.589 align:start position:0%
knowledge we will then see how the HTTP
client<00:00:28.380><c> leverages</c><00:00:29.010><c> these</c><00:00:29.189><c> interfaces</c><00:00:29.699><c> to</c>

00:00:30.589 --> 00:00:30.599 align:start position:0%
client leverages these interfaces to
 

00:00:30.599 --> 00:00:33.770 align:start position:0%
client leverages these interfaces to
handle<00:00:30.929><c> request</c><00:00:31.289><c> and</c><00:00:31.560><c> response</c><00:00:31.740><c> bodies</c><00:00:32.780><c> we'll</c>

00:00:33.770 --> 00:00:33.780 align:start position:0%
handle request and response bodies we'll
 

00:00:33.780 --> 00:00:35.389 align:start position:0%
handle request and response bodies we'll
work<00:00:33.989><c> through</c><00:00:34.200><c> an</c><00:00:34.350><c> example</c><00:00:34.410><c> of</c><00:00:34.920><c> how</c><00:00:35.070><c> to</c><00:00:35.130><c> write</c>

00:00:35.389 --> 00:00:35.399 align:start position:0%
work through an example of how to write
 

00:00:35.399 --> 00:00:37.790 align:start position:0%
work through an example of how to write
a<00:00:35.430><c> custom</c><00:00:35.760><c> response</c><00:00:36.690><c> body</c><00:00:36.930><c> subscriber</c><00:00:37.500><c> and</c>

00:00:37.790 --> 00:00:37.800 align:start position:0%
a custom response body subscriber and
 

00:00:37.800 --> 00:00:40.280 align:start position:0%
a custom response body subscriber and
how<00:00:38.550><c> to</c><00:00:38.610><c> interoperate</c><00:00:39.090><c> with</c><00:00:39.600><c> existing</c><00:00:39.899><c> flow</c>

00:00:40.280 --> 00:00:40.290 align:start position:0%
how to interoperate with existing flow
 

00:00:40.290 --> 00:00:44.420 align:start position:0%
how to interoperate with existing flow
publishers<00:00:40.829><c> and</c><00:00:41.100><c> subscribers</c><00:00:43.430><c> before</c>

00:00:44.420 --> 00:00:44.430 align:start position:0%
publishers and subscribers before
 

00:00:44.430 --> 00:00:46.490 align:start position:0%
publishers and subscribers before
looking<00:00:44.940><c> at</c><00:00:45.120><c> the</c><00:00:45.180><c> reactive</c><00:00:45.660><c> streams</c><00:00:45.960><c> it</c><00:00:46.260><c> is</c>

00:00:46.490 --> 00:00:46.500 align:start position:0%
looking at the reactive streams it is
 

00:00:46.500 --> 00:00:48.139 align:start position:0%
looking at the reactive streams it is
useful<00:00:46.860><c> to</c><00:00:46.890><c> remind</c><00:00:47.309><c> ourselves</c><00:00:47.430><c> of</c><00:00:47.910><c> the</c>

00:00:48.139 --> 00:00:48.149 align:start position:0%
useful to remind ourselves of the
 

00:00:48.149 --> 00:00:50.270 align:start position:0%
useful to remind ourselves of the
classic<00:00:48.539><c> producer/consumer</c><00:00:49.530><c> paradigm</c><00:00:49.980><c> and</c>

00:00:50.270 --> 00:00:50.280 align:start position:0%
classic producer/consumer paradigm and
 

00:00:50.280 --> 00:00:52.700 align:start position:0%
classic producer/consumer paradigm and
some<00:00:51.000><c> of</c><00:00:51.120><c> the</c><00:00:51.239><c> potential</c><00:00:51.570><c> concerns</c><00:00:52.410><c> and</c>

00:00:52.700 --> 00:00:52.710 align:start position:0%
some of the potential concerns and
 

00:00:52.710 --> 00:00:55.670 align:start position:0%
some of the potential concerns and
issues<00:00:52.770><c> with</c><00:00:53.129><c> it</c><00:00:53.870><c> typically</c><00:00:54.870><c> the</c><00:00:55.230><c> producer</c>

00:00:55.670 --> 00:00:55.680 align:start position:0%
issues with it typically the producer
 

00:00:55.680 --> 00:00:58.340 align:start position:0%
issues with it typically the producer
generates<00:00:56.129><c> items</c><00:00:56.730><c> or</c><00:00:56.879><c> data</c><00:00:57.020><c> puts</c><00:00:58.020><c> them</c><00:00:58.170><c> in</c><00:00:58.260><c> a</c>

00:00:58.340 --> 00:00:58.350 align:start position:0%
generates items or data puts them in a
 

00:00:58.350 --> 00:01:00.920 align:start position:0%
generates items or data puts them in a
queue<00:00:58.620><c> or</c><00:00:58.829><c> buffer</c><00:00:59.129><c> of</c><00:00:59.280><c> sorts</c><00:00:59.640><c> at</c><00:01:00.629><c> the</c><00:01:00.750><c> same</c>

00:01:00.920 --> 00:01:00.930 align:start position:0%
queue or buffer of sorts at the same
 

00:01:00.930 --> 00:01:03.560 align:start position:0%
queue or buffer of sorts at the same
time<00:01:01.260><c> the</c><00:01:01.680><c> consumer</c><00:01:01.949><c> consumes</c><00:01:02.489><c> the</c><00:01:02.670><c> data</c><00:01:02.850><c> by</c>

00:01:03.560 --> 00:01:03.570 align:start position:0%
time the consumer consumes the data by
 

00:01:03.570 --> 00:01:05.600 align:start position:0%
time the consumer consumes the data by
removing<00:01:04.049><c> items</c><00:01:04.470><c> one</c><00:01:04.920><c> at</c><00:01:05.010><c> a</c><00:01:05.070><c> time</c><00:01:05.309><c> from</c><00:01:05.519><c> the</c>

00:01:05.600 --> 00:01:05.610 align:start position:0%
removing items one at a time from the
 

00:01:05.610 --> 00:01:08.660 align:start position:0%
removing items one at a time from the
buffer<00:01:06.470><c> the</c><00:01:07.470><c> problem</c><00:01:07.799><c> was</c><00:01:07.950><c> how</c><00:01:08.070><c> to</c><00:01:08.100><c> make</c><00:01:08.280><c> sure</c>

00:01:08.660 --> 00:01:08.670 align:start position:0%
buffer the problem was how to make sure
 

00:01:08.670 --> 00:01:10.460 align:start position:0%
buffer the problem was how to make sure
that<00:01:08.970><c> the</c><00:01:09.090><c> producer</c><00:01:09.479><c> is</c><00:01:09.570><c> not</c><00:01:09.780><c> blocked</c><00:01:10.140><c> when</c>

00:01:10.460 --> 00:01:10.470 align:start position:0%
that the producer is not blocked when
 

00:01:10.470 --> 00:01:12.410 align:start position:0%
that the producer is not blocked when
the<00:01:10.560><c> buffer</c><00:01:10.830><c> becomes</c><00:01:11.130><c> full</c><00:01:11.369><c> or</c><00:01:11.610><c> that</c><00:01:12.330><c> the</c>

00:01:12.410 --> 00:01:12.420 align:start position:0%
the buffer becomes full or that the
 

00:01:12.420 --> 00:01:14.929 align:start position:0%
the buffer becomes full or that the
consumer<00:01:12.930><c> is</c><00:01:13.110><c> not</c><00:01:13.290><c> trying</c><00:01:13.619><c> to</c><00:01:13.770><c> get</c><00:01:13.920><c> data</c><00:01:14.159><c> when</c>

00:01:14.929 --> 00:01:14.939 align:start position:0%
consumer is not trying to get data when
 

00:01:14.939 --> 00:01:16.760 align:start position:0%
consumer is not trying to get data when
the<00:01:15.060><c> buffer</c><00:01:15.330><c> is</c><00:01:15.450><c> empty</c><00:01:15.479><c> and</c><00:01:15.990><c> had</c><00:01:16.740><c> a</c>

00:01:16.760 --> 00:01:16.770 align:start position:0%
the buffer is empty and had a
 

00:01:16.770 --> 00:01:18.859 align:start position:0%
the buffer is empty and had a
notification<00:01:17.189><c> mechanism</c><00:01:18.030><c> to</c><00:01:18.180><c> implement</c><00:01:18.659><c> such</c>

00:01:18.859 --> 00:01:18.869 align:start position:0%
notification mechanism to implement such
 

00:01:18.869 --> 00:01:21.740 align:start position:0%
notification mechanism to implement such
if<00:01:19.170><c> it</c><00:01:19.290><c> happens</c><00:01:19.970><c> as</c><00:01:20.970><c> well</c><00:01:21.180><c> as</c><00:01:21.330><c> trying</c><00:01:21.600><c> to</c>

00:01:21.740 --> 00:01:21.750 align:start position:0%
if it happens as well as trying to
 

00:01:21.750 --> 00:01:24.820 align:start position:0%
if it happens as well as trying to
determine<00:01:22.049><c> a</c><00:01:22.320><c> reasonable</c><00:01:22.560><c> buffer</c><00:01:23.130><c> size</c>

00:01:24.820 --> 00:01:24.830 align:start position:0%
determine a reasonable buffer size
 

00:01:24.830 --> 00:01:28.580 align:start position:0%
determine a reasonable buffer size
moving<00:01:25.830><c> to</c><00:01:25.950><c> reactive</c><00:01:26.340><c> streams</c><00:01:27.080><c> the</c><00:01:28.080><c> producer</c>

00:01:28.580 --> 00:01:28.590 align:start position:0%
moving to reactive streams the producer
 

00:01:28.590 --> 00:01:30.710 align:start position:0%
moving to reactive streams the producer
is<00:01:28.770><c> known</c><00:01:29.189><c> as</c><00:01:29.430><c> a</c><00:01:29.460><c> publisher</c><00:01:29.970><c> that</c><00:01:30.240><c> publishes</c>

00:01:30.710 --> 00:01:30.720 align:start position:0%
is known as a publisher that publishes
 

00:01:30.720 --> 00:01:34.370 align:start position:0%
is known as a publisher that publishes
items<00:01:32.329><c> the</c><00:01:33.329><c> consumer</c><00:01:33.840><c> is</c><00:01:33.990><c> known</c><00:01:34.200><c> as</c><00:01:34.350><c> a</c>

00:01:34.370 --> 00:01:34.380 align:start position:0%
items the consumer is known as a
 

00:01:34.380 --> 00:01:37.880 align:start position:0%
items the consumer is known as a
subscriber<00:01:34.890><c> that</c><00:01:35.369><c> receives</c><00:01:35.700><c> items</c><00:01:36.890><c> the</c>

00:01:37.880 --> 00:01:37.890 align:start position:0%
subscriber that receives items the
 

00:01:37.890 --> 00:01:39.710 align:start position:0%
subscriber that receives items the
publisher<00:01:38.280><c> has</c><00:01:38.460><c> a</c><00:01:38.490><c> single</c><00:01:38.939><c> method</c><00:01:39.090><c> subscribed</c>

00:01:39.710 --> 00:01:39.720 align:start position:0%
publisher has a single method subscribed
 

00:01:39.720 --> 00:01:42.830 align:start position:0%
publisher has a single method subscribed
that<00:01:39.990><c> takes</c><00:01:40.200><c> a</c><00:01:40.320><c> subscriber</c><00:01:41.390><c> the</c><00:01:42.390><c> subscriber</c>

00:01:42.830 --> 00:01:42.840 align:start position:0%
that takes a subscriber the subscriber
 

00:01:42.840 --> 00:01:46.190 align:start position:0%
that takes a subscriber the subscriber
has<00:01:43.049><c> four</c><00:01:43.290><c> methods</c><00:01:44.030><c> unsubscribe</c><00:01:45.030><c> on</c><00:01:45.299><c> next</c><00:01:46.079><c> on</c>

00:01:46.190 --> 00:01:46.200 align:start position:0%
has four methods unsubscribe on next on
 

00:01:46.200 --> 00:01:49.280 align:start position:0%
has four methods unsubscribe on next on
error<00:01:46.979><c> and</c><00:01:47.250><c> on</c><00:01:47.490><c> complete</c><00:01:47.869><c> we'll</c><00:01:48.869><c> take</c><00:01:49.049><c> a</c><00:01:49.079><c> look</c>

00:01:49.280 --> 00:01:49.290 align:start position:0%
error and on complete we'll take a look
 

00:01:49.290 --> 00:01:52.730 align:start position:0%
error and on complete we'll take a look
at<00:01:49.409><c> these</c><00:01:49.500><c> now</c><00:01:49.740><c> a</c><00:01:51.290><c> subscriber</c><00:01:52.290><c> can</c><00:01:52.619><c> be</c>

00:01:52.730 --> 00:01:52.740 align:start position:0%
at these now a subscriber can be
 

00:01:52.740 --> 00:01:54.770 align:start position:0%
at these now a subscriber can be
subscribed<00:01:53.250><c> to</c><00:01:53.399><c> a</c><00:01:53.520><c> publisher</c><00:01:54.000><c> by</c><00:01:54.299><c> calling</c><00:01:54.689><c> the</c>

00:01:54.770 --> 00:01:54.780 align:start position:0%
subscribed to a publisher by calling the
 

00:01:54.780 --> 00:01:57.170 align:start position:0%
subscribed to a publisher by calling the
publisher<00:01:55.229><c> subscribed</c><00:01:55.799><c> method</c><00:01:56.100><c> and</c><00:01:56.310><c> passing</c>

00:01:57.170 --> 00:01:57.180 align:start position:0%
publisher subscribed method and passing
 

00:01:57.180 --> 00:02:00.560 align:start position:0%
publisher subscribed method and passing
the<00:01:57.299><c> subscriber</c><00:01:58.579><c> the</c><00:01:59.579><c> publisher</c><00:01:59.969><c> den</c><00:02:00.240><c> calls</c>

00:02:00.560 --> 00:02:00.570 align:start position:0%
the subscriber the publisher den calls
 

00:02:00.570 --> 00:02:02.780 align:start position:0%
the subscriber the publisher den calls
the<00:02:00.810><c> subscribers</c><00:02:01.439><c> unsubscribe</c><00:02:02.130><c> method</c><00:02:02.490><c> with</c>

00:02:02.780 --> 00:02:02.790 align:start position:0%
the subscribers unsubscribe method with
 

00:02:02.790 --> 00:02:05.780 align:start position:0%
the subscribers unsubscribe method with
a<00:02:02.820><c> subscription</c><00:02:03.740><c> this</c><00:02:04.740><c> handshake</c><00:02:05.130><c> between</c>

00:02:05.780 --> 00:02:05.790 align:start position:0%
a subscription this handshake between
 

00:02:05.790 --> 00:02:08.119 align:start position:0%
a subscription this handshake between
the<00:02:05.909><c> subscriber</c><00:02:06.390><c> and</c><00:02:06.630><c> the</c><00:02:06.719><c> publisher</c><00:02:07.170><c> results</c>

00:02:08.119 --> 00:02:08.129 align:start position:0%
the subscriber and the publisher results
 

00:02:08.129 --> 00:02:09.589 align:start position:0%
the subscriber and the publisher results
in<00:02:08.220><c> the</c><00:02:08.280><c> publisher</c><00:02:08.670><c> having</c><00:02:08.970><c> a</c><00:02:09.060><c> reference</c><00:02:09.450><c> to</c>

00:02:09.589 --> 00:02:09.599 align:start position:0%
in the publisher having a reference to
 

00:02:09.599 --> 00:02:12.260 align:start position:0%
in the publisher having a reference to
the<00:02:09.720><c> subscriber</c><00:02:10.200><c> and</c><00:02:10.500><c> the</c><00:02:11.400><c> subscriber</c><00:02:11.849><c> having</c>

00:02:12.260 --> 00:02:12.270 align:start position:0%
the subscriber and the subscriber having
 

00:02:12.270 --> 00:02:13.640 align:start position:0%
the subscriber and the subscriber having
the<00:02:12.360><c> publisher</c><00:02:12.810><c> subscription</c>

00:02:13.640 --> 00:02:13.650 align:start position:0%
the publisher subscription
 

00:02:13.650 --> 00:02:17.360 align:start position:0%
the publisher subscription
that<00:02:14.099><c> it</c><00:02:14.220><c> was</c><00:02:14.340><c> given</c><00:02:14.670><c> in</c><00:02:14.849><c> unsubscribing</c><00:02:16.069><c> it</c><00:02:17.069><c> is</c>

00:02:17.360 --> 00:02:17.370 align:start position:0%
that it was given in unsubscribing it is
 

00:02:17.370 --> 00:02:18.890 align:start position:0%
that it was given in unsubscribing it is
the<00:02:17.519><c> subscription</c><00:02:17.909><c> that</c><00:02:18.360><c> acts</c><00:02:18.599><c> as</c><00:02:18.840><c> a</c>

00:02:18.890 --> 00:02:18.900 align:start position:0%
the subscription that acts as a
 

00:02:18.900 --> 00:02:20.839 align:start position:0%
the subscription that acts as a
mechanism<00:02:19.140><c> for</c><00:02:19.620><c> the</c><00:02:19.950><c> subscriber</c><00:02:20.370><c> to</c><00:02:20.640><c> send</c>

00:02:20.839 --> 00:02:20.849 align:start position:0%
mechanism for the subscriber to send
 

00:02:20.849 --> 00:02:24.610 align:start position:0%
mechanism for the subscriber to send
signals<00:02:21.299><c> to</c><00:02:21.540><c> the</c><00:02:21.689><c> publisher</c><00:02:22.170><c> for</c><00:02:23.599><c> example</c>

00:02:24.610 --> 00:02:24.620 align:start position:0%
signals to the publisher for example
 

00:02:24.620 --> 00:02:27.319 align:start position:0%
signals to the publisher for example
using<00:02:25.620><c> the</c><00:02:26.010><c> subscription</c><00:02:26.610><c> the</c><00:02:26.849><c> subscriber</c>

00:02:27.319 --> 00:02:27.329 align:start position:0%
using the subscription the subscriber
 

00:02:27.329 --> 00:02:29.270 align:start position:0%
using the subscription the subscriber
can<00:02:27.599><c> request</c><00:02:27.959><c> a</c><00:02:28.230><c> number</c><00:02:28.530><c> of</c><00:02:28.620><c> items</c><00:02:29.010><c> from</c><00:02:29.159><c> the</c>

00:02:29.270 --> 00:02:29.280 align:start position:0%
can request a number of items from the
 

00:02:29.280 --> 00:02:32.599 align:start position:0%
can request a number of items from the
publisher<00:02:29.670><c> the</c><00:02:30.470><c> publisher</c><00:02:31.470><c> can</c><00:02:32.159><c> then</c><00:02:32.370><c> publish</c>

00:02:32.599 --> 00:02:32.609 align:start position:0%
publisher the publisher can then publish
 

00:02:32.609 --> 00:02:35.839 align:start position:0%
publisher the publisher can then publish
at<00:02:33.000><c> most</c><00:02:33.329><c> that</c><00:02:34.019><c> number</c><00:02:34.379><c> of</c><00:02:34.470><c> items</c><00:02:34.859><c> by</c><00:02:35.370><c> calling</c>

00:02:35.839 --> 00:02:35.849 align:start position:0%
at most that number of items by calling
 

00:02:35.849 --> 00:02:37.970 align:start position:0%
at most that number of items by calling
the<00:02:35.970><c> subscribers</c><00:02:36.629><c> our</c><00:02:36.780><c> next</c><00:02:37.379><c> method</c><00:02:37.769><c> and</c>

00:02:37.970 --> 00:02:37.980 align:start position:0%
the subscribers our next method and
 

00:02:37.980 --> 00:02:41.349 align:start position:0%
the subscribers our next method and
number<00:02:38.790><c> of</c><00:02:38.819><c> times</c><00:02:39.150><c> each</c><00:02:39.870><c> with</c><00:02:40.260><c> a</c><00:02:40.290><c> single</c><00:02:40.650><c> item</c>

00:02:41.349 --> 00:02:41.359 align:start position:0%
number of times each with a single item
 

00:02:41.359 --> 00:02:44.119 align:start position:0%
number of times each with a single item
this<00:02:42.359><c> request</c><00:02:42.750><c> mechanism</c><00:02:43.470><c> provides</c><00:02:43.890><c> the</c>

00:02:44.119 --> 00:02:44.129 align:start position:0%
this request mechanism provides the
 

00:02:44.129 --> 00:02:46.610 align:start position:0%
this request mechanism provides the
subscriber<00:02:44.609><c> with</c><00:02:44.849><c> back</c><00:02:45.150><c> pressure</c><00:02:45.480><c> since</c><00:02:46.349><c> it</c>

00:02:46.610 --> 00:02:46.620 align:start position:0%
subscriber with back pressure since it
 

00:02:46.620 --> 00:02:48.500 align:start position:0%
subscriber with back pressure since it
is<00:02:46.739><c> in</c><00:02:46.889><c> control</c><00:02:47.190><c> of</c><00:02:47.310><c> the</c><00:02:47.579><c> maximum</c><00:02:48.120><c> number</c><00:02:48.480><c> of</c>

00:02:48.500 --> 00:02:48.510 align:start position:0%
is in control of the maximum number of
 

00:02:48.510 --> 00:02:52.399 align:start position:0%
is in control of the maximum number of
items<00:02:48.930><c> that</c><00:02:49.349><c> may</c><00:02:49.530><c> be</c><00:02:49.590><c> sent</c><00:02:49.950><c> to</c><00:02:50.129><c> it</c><00:02:50.599><c> if</c><00:02:51.599><c> the</c>

00:02:52.399 --> 00:02:52.409 align:start position:0%
items that may be sent to it if the
 

00:02:52.409 --> 00:02:55.089 align:start position:0%
items that may be sent to it if the
publisher<00:02:52.739><c> has</c><00:02:53.010><c> no</c><00:02:53.220><c> more</c><00:02:53.370><c> items</c><00:02:53.549><c> to</c><00:02:54.000><c> publish</c>

00:02:55.089 --> 00:02:55.099 align:start position:0%
publisher has no more items to publish
 

00:02:55.099 --> 00:02:58.009 align:start position:0%
publisher has no more items to publish
then<00:02:56.099><c> it</c><00:02:56.250><c> calls</c><00:02:56.519><c> subscribers</c><00:02:57.450><c> on</c><00:02:57.599><c> complete</c>

00:02:58.009 --> 00:02:58.019 align:start position:0%
then it calls subscribers on complete
 

00:02:58.019 --> 00:03:00.830 align:start position:0%
then it calls subscribers on complete
method<00:02:58.310><c> this</c><00:02:59.310><c> informs</c><00:02:59.849><c> the</c><00:03:00.000><c> subscriber</c><00:03:00.480><c> that</c>

00:03:00.830 --> 00:03:00.840 align:start position:0%
method this informs the subscriber that
 

00:03:00.840 --> 00:03:03.229 align:start position:0%
method this informs the subscriber that
the<00:03:00.959><c> publisher</c><00:03:01.459><c> regardless</c><00:03:02.459><c> of</c><00:03:02.609><c> demand</c><00:03:02.970><c> for</c>

00:03:03.229 --> 00:03:03.239 align:start position:0%
the publisher regardless of demand for
 

00:03:03.239 --> 00:03:05.990 align:start position:0%
the publisher regardless of demand for
more<00:03:03.389><c> items</c><00:03:03.810><c> will</c><00:03:04.530><c> publish</c><00:03:04.859><c> no</c><00:03:05.129><c> more</c><00:03:05.370><c> items</c><00:03:05.670><c> to</c>

00:03:05.990 --> 00:03:06.000 align:start position:0%
more items will publish no more items to
 

00:03:06.000 --> 00:03:09.830 align:start position:0%
more items will publish no more items to
dis<00:03:06.359><c> subscriber</c><00:03:08.269><c> if</c><00:03:09.269><c> the</c><00:03:09.510><c> publisher</c>

00:03:09.830 --> 00:03:09.840 align:start position:0%
dis subscriber if the publisher
 

00:03:09.840 --> 00:03:12.140 align:start position:0%
dis subscriber if the publisher
encounters<00:03:10.379><c> an</c><00:03:10.500><c> error</c><00:03:10.650><c> say</c><00:03:11.549><c> reading</c><00:03:11.790><c> from</c><00:03:12.000><c> a</c>

00:03:12.140 --> 00:03:12.150 align:start position:0%
encounters an error say reading from a
 

00:03:12.150 --> 00:03:14.720 align:start position:0%
encounters an error say reading from a
file<00:03:12.359><c> or</c><00:03:12.540><c> network</c><00:03:12.950><c> then</c><00:03:13.950><c> it</c><00:03:14.069><c> informs</c><00:03:14.639><c> the</c>

00:03:14.720 --> 00:03:14.730 align:start position:0%
file or network then it informs the
 

00:03:14.730 --> 00:03:17.210 align:start position:0%
file or network then it informs the
subscriber<00:03:15.299><c> of</c><00:03:15.540><c> this</c><00:03:15.989><c> by</c><00:03:16.680><c> calling</c><00:03:17.099><c> the</c>

00:03:17.210 --> 00:03:17.220 align:start position:0%
subscriber of this by calling the
 

00:03:17.220 --> 00:03:19.430 align:start position:0%
subscriber of this by calling the
subscribers<00:03:17.790><c> on</c><00:03:17.940><c> error</c><00:03:18.419><c> method</c><00:03:18.900><c> with</c><00:03:19.410><c> a</c>

00:03:19.430 --> 00:03:19.440 align:start position:0%
subscribers on error method with a
 

00:03:19.440 --> 00:03:23.800 align:start position:0%
subscribers on error method with a
suitable<00:03:19.949><c> trouble</c><00:03:20.489><c> indicating</c><00:03:21.329><c> the</c><00:03:21.389><c> problem</c>

00:03:23.800 --> 00:03:23.810 align:start position:0%
 
 

00:03:23.810 --> 00:03:26.479 align:start position:0%
 
the<00:03:24.810><c> Java</c><00:03:25.049><c> platform</c><00:03:25.319><c> provides</c><00:03:26.040><c> support</c>

00:03:26.479 --> 00:03:26.489 align:start position:0%
the Java platform provides support
 

00:03:26.489 --> 00:03:28.220 align:start position:0%
the Java platform provides support
reactive<00:03:27.060><c> streams</c><00:03:27.359><c> to</c><00:03:27.810><c> a</c><00:03:27.870><c> number</c><00:03:28.139><c> of</c>

00:03:28.220 --> 00:03:28.230 align:start position:0%
reactive streams to a number of
 

00:03:28.230 --> 00:03:30.710 align:start position:0%
reactive streams to a number of
interfaces<00:03:28.530><c> in</c><00:03:29.250><c> the</c><00:03:29.370><c> java.util</c><00:03:30.209><c> concurrent</c>

00:03:30.710 --> 00:03:30.720 align:start position:0%
interfaces in the java.util concurrent
 

00:03:30.720 --> 00:03:33.319 align:start position:0%
interfaces in the java.util concurrent
flow<00:03:30.959><c> class</c><00:03:31.579><c> there</c><00:03:32.579><c> is</c><00:03:32.669><c> a</c><00:03:32.699><c> publisher</c><00:03:33.180><c> for</c>

00:03:33.319 --> 00:03:33.329 align:start position:0%
flow class there is a publisher for
 

00:03:33.329 --> 00:03:35.869 align:start position:0%
flow class there is a publisher for
publishing<00:03:33.690><c> items</c><00:03:34.169><c> a</c><00:03:34.609><c> subscriber</c><00:03:35.609><c> for</c>

00:03:35.869 --> 00:03:35.879 align:start position:0%
publishing items a subscriber for
 

00:03:35.879 --> 00:03:38.899 align:start position:0%
publishing items a subscriber for
receiving<00:03:36.209><c> items</c><00:03:36.629><c> a</c><00:03:37.310><c> subscriber</c><00:03:38.310><c> subscribes</c>

00:03:38.899 --> 00:03:38.909 align:start position:0%
receiving items a subscriber subscribes
 

00:03:38.909 --> 00:03:41.449 align:start position:0%
receiving items a subscriber subscribes
to<00:03:39.060><c> the</c><00:03:39.239><c> publisher</c><00:03:39.690><c> and</c><00:03:39.840><c> can</c><00:03:40.349><c> issue</c><00:03:40.530><c> requests</c>

00:03:41.449 --> 00:03:41.459 align:start position:0%
to the publisher and can issue requests
 

00:03:41.459 --> 00:03:46.099 align:start position:0%
to the publisher and can issue requests
for<00:03:42.449><c> items</c><00:03:42.510><c> as</c><00:03:43.019><c> needed</c><00:03:43.819><c> the</c><00:03:44.819><c> HTTP</c><00:03:45.629><c> client</c>

00:03:46.099 --> 00:03:46.109 align:start position:0%
for items as needed the HTTP client
 

00:03:46.109 --> 00:03:48.949 align:start position:0%
for items as needed the HTTP client
models<00:03:46.709><c> request</c><00:03:47.129><c> body</c><00:03:47.400><c> using</c><00:03:48.209><c> a</c><00:03:48.269><c> subtype</c><00:03:48.780><c> of</c>

00:03:48.949 --> 00:03:48.959 align:start position:0%
models request body using a subtype of
 

00:03:48.959 --> 00:03:51.849 align:start position:0%
models request body using a subtype of
flow<00:03:49.319><c> publisher</c><00:03:49.859><c> a</c><00:03:50.040><c> request</c><00:03:50.849><c> body</c><00:03:51.090><c> publisher</c>

00:03:51.849 --> 00:03:51.859 align:start position:0%
flow publisher a request body publisher
 

00:03:51.859 --> 00:03:54.860 align:start position:0%
flow publisher a request body publisher
the<00:03:52.859><c> HTTP</c><00:03:53.579><c> client</c><00:03:54.000><c> subscribes</c><00:03:54.479><c> to</c><00:03:54.659><c> this</c>

00:03:54.860 --> 00:03:54.870 align:start position:0%
the HTTP client subscribes to this
 

00:03:54.870 --> 00:03:57.259 align:start position:0%
the HTTP client subscribes to this
publisher<00:03:55.409><c> when</c><00:03:56.099><c> sending</c><00:03:56.519><c> a</c><00:03:56.639><c> request</c><00:03:56.819><c> that</c>

00:03:57.259 --> 00:03:57.269 align:start position:0%
publisher when sending a request that
 

00:03:57.269 --> 00:04:00.949 align:start position:0%
publisher when sending a request that
has<00:03:57.359><c> body</c><00:03:58.370><c> under</c><00:03:59.370><c> receiving</c><00:03:59.790><c> site</c><00:04:00.000><c> when</c><00:04:00.930><c> a</c>

00:04:00.949 --> 00:04:00.959 align:start position:0%
has body under receiving site when a
 

00:04:00.959 --> 00:04:02.689 align:start position:0%
has body under receiving site when a
response<00:04:01.379><c> code</c><00:04:01.620><c> and</c><00:04:01.859><c> headers</c><00:04:02.159><c> are</c><00:04:02.340><c> received</c>

00:04:02.689 --> 00:04:02.699 align:start position:0%
response code and headers are received
 

00:04:02.699 --> 00:04:05.890 align:start position:0%
response code and headers are received
the<00:04:03.299><c> HTTP</c><00:04:03.989><c> client</c><00:04:04.440><c> calls</c><00:04:04.709><c> the</c><00:04:05.099><c> body</c><00:04:05.310><c> handler</c>

00:04:05.890 --> 00:04:05.900 align:start position:0%
the HTTP client calls the body handler
 

00:04:05.900 --> 00:04:08.479 align:start position:0%
the HTTP client calls the body handler
the<00:04:06.900><c> body</c><00:04:07.109><c> handler</c><00:04:07.560><c> can</c><00:04:07.799><c> then</c><00:04:07.949><c> inspect</c><00:04:08.310><c> these</c>

00:04:08.479 --> 00:04:08.489 align:start position:0%
the body handler can then inspect these
 

00:04:08.489 --> 00:04:10.969 align:start position:0%
the body handler can then inspect these
values<00:04:08.879><c> if</c><00:04:09.060><c> it</c><00:04:09.180><c> wishes</c><00:04:09.359><c> before</c><00:04:10.169><c> creating</c><00:04:10.739><c> a</c>

00:04:10.969 --> 00:04:10.979 align:start position:0%
values if it wishes before creating a
 

00:04:10.979 --> 00:04:14.089 align:start position:0%
values if it wishes before creating a
body<00:04:11.280><c> subscriber</c><00:04:12.109><c> this</c><00:04:13.109><c> subscriber</c><00:04:13.620><c> returned</c>

00:04:14.089 --> 00:04:14.099 align:start position:0%
body subscriber this subscriber returned
 

00:04:14.099 --> 00:04:16.670 align:start position:0%
body subscriber this subscriber returned
by<00:04:14.280><c> the</c><00:04:14.340><c> body</c><00:04:14.549><c> hunter</c><00:04:14.970><c> will</c><00:04:15.750><c> be</c><00:04:15.780><c> used</c><00:04:16.260><c> to</c>

00:04:16.670 --> 00:04:16.680 align:start position:0%
by the body hunter will be used to
 

00:04:16.680 --> 00:04:18.529 align:start position:0%
by the body hunter will be used to
receive<00:04:17.010><c> and</c><00:04:17.250><c> process</c><00:04:17.400><c> the</c><00:04:17.789><c> actual</c><00:04:18.180><c> response</c>

00:04:18.529 --> 00:04:18.539 align:start position:0%
receive and process the actual response
 

00:04:18.539 --> 00:04:22.730 align:start position:0%
receive and process the actual response
body<00:04:18.780><c> bytes</c><00:04:19.729><c> the</c><00:04:20.729><c> HTTP</c><00:04:21.539><c> body</c><00:04:21.900><c> subscriber</c><00:04:22.440><c> is</c><00:04:22.680><c> a</c>

00:04:22.730 --> 00:04:22.740 align:start position:0%
body bytes the HTTP body subscriber is a
 

00:04:22.740 --> 00:04:24.840 align:start position:0%
body bytes the HTTP body subscriber is a
subtype<00:04:23.370><c> of</c><00:04:23.400><c> flow</c><00:04:23.789><c> subscriber</c>

00:04:24.840 --> 00:04:24.850 align:start position:0%
subtype of flow subscriber
 

00:04:24.850 --> 00:04:27.810 align:start position:0%
subtype of flow subscriber
and<00:04:24.990><c> httpclient</c><00:04:25.990><c> acts</c><00:04:26.860><c> as</c><00:04:27.160><c> a</c><00:04:27.190><c> publisher</c><00:04:27.700><c> of</c>

00:04:27.810 --> 00:04:27.820 align:start position:0%
and httpclient acts as a publisher of
 

00:04:27.820 --> 00:04:30.960 align:start position:0%
and httpclient acts as a publisher of
response<00:04:28.360><c> buddy</c><00:04:28.630><c> bytes</c><00:04:29.670><c> there</c><00:04:30.670><c> are</c><00:04:30.730><c> a</c><00:04:30.790><c> number</c>

00:04:30.960 --> 00:04:30.970 align:start position:0%
response buddy bytes there are a number
 

00:04:30.970 --> 00:04:32.580 align:start position:0%
response buddy bytes there are a number
of<00:04:31.120><c> factories</c><00:04:31.720><c> for</c><00:04:31.930><c> creating</c><00:04:32.380><c> body</c>

00:04:32.580 --> 00:04:32.590 align:start position:0%
of factories for creating body
 

00:04:32.590 --> 00:04:34.920 align:start position:0%
of factories for creating body
publishers<00:04:33.130><c> and</c><00:04:33.340><c> body</c><00:04:33.490><c> subscribers</c><00:04:34.180><c> for</c><00:04:34.720><c> most</c>

00:04:34.920 --> 00:04:34.930 align:start position:0%
publishers and body subscribers for most
 

00:04:34.930 --> 00:04:37.710 align:start position:0%
publishers and body subscribers for most
common<00:04:35.140><c> use</c><00:04:35.410><c> cases</c><00:04:35.790><c> like</c><00:04:36.790><c> publishing</c><00:04:37.360><c> request</c>

00:04:37.710 --> 00:04:37.720 align:start position:0%
common use cases like publishing request
 

00:04:37.720 --> 00:04:39.990 align:start position:0%
common use cases like publishing request
body<00:04:37.960><c> from</c><00:04:38.170><c> a</c><00:04:38.290><c> string</c><00:04:38.590><c> or</c><00:04:38.770><c> from</c><00:04:38.890><c> a</c><00:04:38.980><c> file</c><00:04:39.220><c> or</c>

00:04:39.990 --> 00:04:40.000 align:start position:0%
body from a string or from a file or
 

00:04:40.000 --> 00:04:41.910 align:start position:0%
body from a string or from a file or
converting<00:04:40.570><c> response</c><00:04:40.960><c> body</c><00:04:41.170><c> bytes</c><00:04:41.500><c> into</c><00:04:41.890><c> a</c>

00:04:41.910 --> 00:04:41.920 align:start position:0%
converting response body bytes into a
 

00:04:41.920 --> 00:04:46.590 align:start position:0%
converting response body bytes into a
string<00:04:42.280><c> or</c><00:04:42.490><c> streaming</c><00:04:42.910><c> them</c><00:04:43.150><c> to</c><00:04:43.330><c> a</c><00:04:43.360><c> file</c><00:04:45.600><c> in</c>

00:04:46.590 --> 00:04:46.600 align:start position:0%
string or streaming them to a file in
 

00:04:46.600 --> 00:04:48.300 align:start position:0%
string or streaming them to a file in
this<00:04:46.750><c> session</c><00:04:47.020><c> we're</c><00:04:47.440><c> going</c><00:04:47.590><c> to</c><00:04:47.680><c> focus</c><00:04:48.040><c> on</c><00:04:48.220><c> the</c>

00:04:48.300 --> 00:04:48.310 align:start position:0%
this session we're going to focus on the
 

00:04:48.310 --> 00:04:51.720 align:start position:0%
this session we're going to focus on the
response<00:04:49.350><c> body</c><00:04:50.350><c> handler</c><00:04:50.830><c> is</c><00:04:51.010><c> a</c><00:04:51.070><c> functional</c>

00:04:51.720 --> 00:04:51.730 align:start position:0%
response body handler is a functional
 

00:04:51.730 --> 00:04:53.400 align:start position:0%
response body handler is a functional
interface<00:04:52.150><c> that</c><00:04:52.450><c> has</c><00:04:52.630><c> a</c><00:04:52.660><c> single</c><00:04:52.930><c> methods</c>

00:04:53.400 --> 00:04:53.410 align:start position:0%
interface that has a single methods
 

00:04:53.410 --> 00:04:55.740 align:start position:0%
interface that has a single methods
apply<00:04:53.800><c> that</c><00:04:54.610><c> takes</c><00:04:54.850><c> a</c><00:04:54.940><c> response</c><00:04:55.330><c> info</c>

00:04:55.740 --> 00:04:55.750 align:start position:0%
apply that takes a response info
 

00:04:55.750 --> 00:04:58.760 align:start position:0%
apply that takes a response info
containing<00:04:56.710><c> the</c><00:04:56.800><c> status</c><00:04:57.160><c> code</c><00:04:57.340><c> and</c><00:04:57.610><c> headers</c>

00:04:58.760 --> 00:04:58.770 align:start position:0%
containing the status code and headers
 

00:04:58.770 --> 00:05:01.320 align:start position:0%
containing the status code and headers
the<00:04:59.770><c> body</c><00:04:59.980><c> handler</c><00:05:00.430><c> is</c><00:05:00.580><c> invoked</c><00:05:00.940><c> when</c><00:05:01.210><c> the</c>

00:05:01.320 --> 00:05:01.330 align:start position:0%
the body handler is invoked when the
 

00:05:01.330 --> 00:05:02.820 align:start position:0%
the body handler is invoked when the
response<00:05:01.630><c> status</c><00:05:02.050><c> code</c><00:05:02.260><c> and</c><00:05:02.410><c> headers</c><00:05:02.680><c> are</c>

00:05:02.820 --> 00:05:02.830 align:start position:0%
response status code and headers are
 

00:05:02.830 --> 00:05:05.580 align:start position:0%
response status code and headers are
available<00:05:03.280><c> but</c><00:05:03.910><c> before</c><00:05:04.330><c> the</c><00:05:04.630><c> actual</c><00:05:04.930><c> response</c>

00:05:05.580 --> 00:05:05.590 align:start position:0%
available but before the actual response
 

00:05:05.590 --> 00:05:08.400 align:start position:0%
available but before the actual response
body<00:05:05.830><c> bytes</c><00:05:06.160><c> have</c><00:05:06.310><c> been</c><00:05:06.520><c> received</c><00:05:07.230><c> the</c><00:05:08.230><c> body</c>

00:05:08.400 --> 00:05:08.410 align:start position:0%
body bytes have been received the body
 

00:05:08.410 --> 00:05:10.920 align:start position:0%
body bytes have been received the body
handler<00:05:08.830><c> can</c><00:05:09.010><c> inspect</c><00:05:09.510><c> response</c><00:05:10.510><c> code</c><00:05:10.750><c> and</c>

00:05:10.920 --> 00:05:10.930 align:start position:0%
handler can inspect response code and
 

00:05:10.930 --> 00:05:12.660 align:start position:0%
handler can inspect response code and
headers<00:05:11.200><c> before</c><00:05:11.770><c> returning</c><00:05:12.130><c> the</c><00:05:12.490><c> body</c>

00:05:12.660 --> 00:05:12.670 align:start position:0%
headers before returning the body
 

00:05:12.670 --> 00:05:15.690 align:start position:0%
headers before returning the body
subscriber<00:05:13.410><c> the</c><00:05:14.410><c> body</c><00:05:14.590><c> subscriber</c><00:05:15.130><c> will</c><00:05:15.490><c> then</c>

00:05:15.690 --> 00:05:15.700 align:start position:0%
subscriber the body subscriber will then
 

00:05:15.700 --> 00:05:17.580 align:start position:0%
subscriber the body subscriber will then
be<00:05:15.880><c> used</c><00:05:16.150><c> to</c><00:05:16.390><c> receive</c><00:05:16.660><c> the</c><00:05:16.840><c> actual</c><00:05:16.990><c> response</c>

00:05:17.580 --> 00:05:17.590 align:start position:0%
be used to receive the actual response
 

00:05:17.590 --> 00:05:22.590 align:start position:0%
be used to receive the actual response
body<00:05:17.830><c> bytes</c><00:05:20.460><c> body</c><00:05:21.460><c> subscriber</c><00:05:22.000><c> is</c><00:05:22.270><c> a</c><00:05:22.300><c> flow</c>

00:05:22.590 --> 00:05:22.600 align:start position:0%
body bytes body subscriber is a flow
 

00:05:22.600 --> 00:05:24.930 align:start position:0%
body bytes body subscriber is a flow
subscriber<00:05:23.170><c> of</c><00:05:23.410><c> an</c><00:05:23.890><c> aggregate</c><00:05:24.400><c> of</c><00:05:24.580><c> byte</c>

00:05:24.930 --> 00:05:24.940 align:start position:0%
subscriber of an aggregate of byte
 

00:05:24.940 --> 00:05:27.390 align:start position:0%
subscriber of an aggregate of byte
buffers<00:05:25.380><c> the</c><00:05:26.380><c> byte</c><00:05:26.590><c> buffers</c><00:05:26.980><c> contained</c>

00:05:27.390 --> 00:05:27.400 align:start position:0%
buffers the byte buffers contained
 

00:05:27.400 --> 00:05:30.570 align:start position:0%
buffers the byte buffers contained
response<00:05:27.850><c> body</c><00:05:28.090><c> bytes</c><00:05:28.950><c> by</c><00:05:29.950><c> the</c><00:05:30.010><c> subscriber</c>

00:05:30.570 --> 00:05:30.580 align:start position:0%
response body bytes by the subscriber
 

00:05:30.580 --> 00:05:32.850 align:start position:0%
response body bytes by the subscriber
has<00:05:30.940><c> a</c><00:05:31.000><c> single</c><00:05:31.480><c> abstract</c><00:05:31.960><c> method</c><00:05:32.290><c> get'</c><00:05:32.650><c> body</c>

00:05:32.850 --> 00:05:32.860 align:start position:0%
has a single abstract method get' body
 

00:05:32.860 --> 00:05:35.700 align:start position:0%
has a single abstract method get' body
that<00:05:33.760><c> returns</c><00:05:34.120><c> a</c><00:05:34.270><c> completion</c><00:05:34.750><c> stage</c><00:05:34.960><c> that</c>

00:05:35.700 --> 00:05:35.710 align:start position:0%
that returns a completion stage that
 

00:05:35.710 --> 00:05:37.340 align:start position:0%
that returns a completion stage that
completes<00:05:36.100><c> with</c><00:05:36.370><c> a</c><00:05:36.400><c> higher-level</c>

00:05:37.340 --> 00:05:37.350 align:start position:0%
completes with a higher-level
 

00:05:37.350 --> 00:05:39.750 align:start position:0%
completes with a higher-level
type<00:05:38.350><c> that</c><00:05:38.920><c> the</c><00:05:39.040><c> body</c><00:05:39.250><c> subscriber</c>

00:05:39.750 --> 00:05:39.760 align:start position:0%
type that the body subscriber
 

00:05:39.760 --> 00:05:41.790 align:start position:0%
type that the body subscriber
implementation<00:05:40.570><c> will</c><00:05:40.990><c> convert</c><00:05:41.350><c> to</c><00:05:41.380><c> response</c>

00:05:41.790 --> 00:05:41.800 align:start position:0%
implementation will convert to response
 

00:05:41.800 --> 00:05:45.150 align:start position:0%
implementation will convert to response
body<00:05:42.040><c> bytes</c><00:05:42.340><c> into</c><00:05:43.470><c> the</c><00:05:44.470><c> body</c><00:05:44.650><c> subscriber</c>

00:05:45.150 --> 00:05:45.160 align:start position:0%
body bytes into the body subscriber
 

00:05:45.160 --> 00:05:47.820 align:start position:0%
body bytes into the body subscriber
class<00:05:45.460><c> contains</c><00:05:46.030><c> only</c><00:05:46.240><c> study</c><00:05:46.780><c> static</c><00:05:47.320><c> factory</c>

00:05:47.820 --> 00:05:47.830 align:start position:0%
class contains only study static factory
 

00:05:47.830 --> 00:05:50.460 align:start position:0%
class contains only study static factory
methods<00:05:48.190><c> and</c><00:05:48.430><c> these</c><00:05:49.270><c> methods</c><00:05:49.540><c> are</c><00:05:49.960><c> factories</c>

00:05:50.460 --> 00:05:50.470 align:start position:0%
methods and these methods are factories
 

00:05:50.470 --> 00:05:52.950 align:start position:0%
methods and these methods are factories
for<00:05:50.800><c> creating</c><00:05:51.220><c> body</c><00:05:51.430><c> subscribers</c><00:05:52.120><c> that</c><00:05:52.810><c> can</c>

00:05:52.950 --> 00:05:52.960 align:start position:0%
for creating body subscribers that can
 

00:05:52.960 --> 00:05:56.220 align:start position:0%
for creating body subscribers that can
be<00:05:53.050><c> used</c><00:05:53.290><c> for</c><00:05:53.440><c> most</c><00:05:53.590><c> common</c><00:05:54.010><c> use</c><00:05:54.130><c> cases</c><00:05:55.230><c> by</c>

00:05:56.220 --> 00:05:56.230 align:start position:0%
be used for most common use cases by
 

00:05:56.230 --> 00:05:58.020 align:start position:0%
be used for most common use cases by
converting<00:05:56.560><c> the</c><00:05:56.860><c> response</c><00:05:57.160><c> body</c><00:05:57.370><c> into</c><00:05:57.760><c> a</c><00:05:57.790><c> byte</c>

00:05:58.020 --> 00:05:58.030 align:start position:0%
converting the response body into a byte
 

00:05:58.030 --> 00:06:00.210 align:start position:0%
converting the response body into a byte
array<00:05:58.270><c> or</c><00:05:58.450><c> string</c><00:05:58.750><c> or</c><00:05:58.960><c> streaming</c><00:05:59.860><c> it</c><00:06:00.040><c> to</c><00:06:00.190><c> a</c>

00:06:00.210 --> 00:06:00.220 align:start position:0%
array or string or streaming it to a
 

00:06:00.220 --> 00:06:04.470 align:start position:0%
array or string or streaming it to a
file<00:06:00.520><c> or</c><00:06:00.760><c> an</c><00:06:00.910><c> input</c><00:06:01.030><c> stream</c><00:06:03.210><c> let's</c><00:06:04.210><c> take</c><00:06:04.450><c> a</c>

00:06:04.470 --> 00:06:04.480 align:start position:0%
file or an input stream let's take a
 

00:06:04.480 --> 00:06:06.510 align:start position:0%
file or an input stream let's take a
look<00:06:04.750><c> at</c><00:06:04.930><c> writing</c><00:06:05.200><c> a</c><00:06:05.380><c> custom</c><00:06:05.770><c> body</c><00:06:05.980><c> subscriber</c>

00:06:06.510 --> 00:06:06.520 align:start position:0%
look at writing a custom body subscriber
 

00:06:06.520 --> 00:06:12.300 align:start position:0%
look at writing a custom body subscriber
for<00:06:06.850><c> handling</c><00:06:07.210><c> response</c><00:06:07.750><c> data</c><00:06:10.650><c> okay</c><00:06:11.650><c> so</c><00:06:12.100><c> let's</c>

00:06:12.300 --> 00:06:12.310 align:start position:0%
for handling response data okay so let's
 

00:06:12.310 --> 00:06:13.830 align:start position:0%
for handling response data okay so let's
take<00:06:12.430><c> a</c><00:06:12.490><c> look</c><00:06:12.820><c> at</c><00:06:12.940><c> how</c><00:06:13.060><c> to</c><00:06:13.120><c> write</c><00:06:13.360><c> a</c><00:06:13.390><c> custom</c>

00:06:13.830 --> 00:06:13.840 align:start position:0%
take a look at how to write a custom
 

00:06:13.840 --> 00:06:16.680 align:start position:0%
take a look at how to write a custom
body<00:06:14.080><c> hunger</c><00:06:14.500><c> and</c><00:06:14.620><c> body</c><00:06:14.770><c> subscriber</c><00:06:15.690><c> before</c>

00:06:16.680 --> 00:06:16.690 align:start position:0%
body hunger and body subscriber before
 

00:06:16.690 --> 00:06:18.750 align:start position:0%
body hunger and body subscriber before
doing<00:06:16.870><c> that</c><00:06:16.990><c> let's</c><00:06:17.740><c> take</c><00:06:17.920><c> a</c><00:06:17.950><c> look</c><00:06:18.250><c> at</c><00:06:18.430><c> how</c><00:06:18.580><c> one</c>

00:06:18.750 --> 00:06:18.760 align:start position:0%
doing that let's take a look at how one
 

00:06:18.760 --> 00:06:23.030 align:start position:0%
doing that let's take a look at how one
of<00:06:18.910><c> the</c><00:06:19.200><c> convenience</c><00:06:20.200><c> body</c><00:06:20.470><c> handlers</c><00:06:20.950><c> works</c>

00:06:23.030 --> 00:06:23.040 align:start position:0%
of the convenience body handlers works
 

00:06:23.040 --> 00:06:26.610 align:start position:0%
of the convenience body handlers works
so<00:06:24.040><c> here</c><00:06:24.310><c> we've</c><00:06:24.490><c> got</c><00:06:24.700><c> a</c><00:06:24.900><c> utility</c><00:06:25.900><c> get</c><00:06:26.230><c> method</c>

00:06:26.610 --> 00:06:26.620 align:start position:0%
so here we've got a utility get method
 

00:06:26.620 --> 00:06:30.210 align:start position:0%
so here we've got a utility get method
it<00:06:27.370><c> retrieves</c><00:06:27.790><c> a</c><00:06:28.090><c> given</c><00:06:28.420><c> URI</c><00:06:28.750><c> and</c><00:06:29.110><c> returns</c><00:06:30.010><c> the</c>

00:06:30.210 --> 00:06:30.220 align:start position:0%
it retrieves a given URI and returns the
 

00:06:30.220 --> 00:06:33.510 align:start position:0%
it retrieves a given URI and returns the
response<00:06:30.610><c> body</c><00:06:30.820><c> as</c><00:06:31.180><c> a</c><00:06:31.210><c> string</c><00:06:32.100><c> so</c><00:06:33.100><c> first</c><00:06:33.340><c> it</c>

00:06:33.510 --> 00:06:33.520 align:start position:0%
response body as a string so first it
 

00:06:33.520 --> 00:06:36.870 align:start position:0%
response body as a string so first it
creates<00:06:33.820><c> a</c><00:06:34.060><c> new</c><00:06:34.300><c> HTTP</c><00:06:35.140><c> client</c><00:06:35.560><c> over</c><00:06:36.460><c> which</c><00:06:36.640><c> the</c>

00:06:36.870 --> 00:06:36.880 align:start position:0%
creates a new HTTP client over which the
 

00:06:36.880 --> 00:06:37.500 align:start position:0%
creates a new HTTP client over which the
request<00:06:37.090><c> is</c><00:06:37.300><c> going</c>

00:06:37.500 --> 00:06:37.510 align:start position:0%
request is going
 

00:06:37.510 --> 00:06:41.100 align:start position:0%
request is going
he<00:06:37.570><c> sent</c><00:06:38.160><c> then</c><00:06:39.160><c> it</c><00:06:39.280><c> builds</c><00:06:39.640><c> a</c><00:06:39.760><c> request</c><00:06:40.150><c> from</c>

00:06:41.100 --> 00:06:41.110 align:start position:0%
he sent then it builds a request from
 

00:06:41.110 --> 00:06:44.640 align:start position:0%
he sent then it builds a request from
the<00:06:41.200><c> given</c><00:06:41.530><c> URI</c><00:06:42.390><c> then</c><00:06:43.390><c> it</c><00:06:43.510><c> calls</c><00:06:43.720><c> a</c><00:06:43.900><c> send</c><00:06:44.170><c> async</c>

00:06:44.640 --> 00:06:44.650 align:start position:0%
the given URI then it calls a send async
 

00:06:44.650 --> 00:06:47.940 align:start position:0%
the given URI then it calls a send async
method<00:06:44.910><c> to</c><00:06:45.910><c> send</c><00:06:46.150><c> a</c><00:06:46.240><c> request</c><00:06:46.590><c> that</c><00:06:47.590><c> he</c><00:06:47.680><c> uses</c>

00:06:47.940 --> 00:06:47.950 align:start position:0%
method to send a request that he uses
 

00:06:47.950 --> 00:06:50.490 align:start position:0%
method to send a request that he uses
the<00:06:48.160><c> body</c><00:06:48.370><c> hunters</c><00:06:48.850><c> of</c><00:06:49.000><c> string</c><00:06:49.500><c> static</c>

00:06:50.490 --> 00:06:50.500 align:start position:0%
the body hunters of string static
 

00:06:50.500 --> 00:06:52.950 align:start position:0%
the body hunters of string static
factory<00:06:50.680><c> method</c><00:06:51.190><c> to</c><00:06:52.030><c> create</c><00:06:52.270><c> a</c><00:06:52.300><c> body</c><00:06:52.480><c> hunter</c>

00:06:52.950 --> 00:06:52.960 align:start position:0%
factory method to create a body hunter
 

00:06:52.960 --> 00:06:55.920 align:start position:0%
factory method to create a body hunter
that<00:06:53.800><c> converts</c><00:06:54.160><c> the</c><00:06:54.370><c> response</c><00:06:54.730><c> body</c><00:06:54.970><c> bytes</c><00:06:55.300><c> to</c>

00:06:55.920 --> 00:06:55.930 align:start position:0%
that converts the response body bytes to
 

00:06:55.930 --> 00:06:58.980 align:start position:0%
that converts the response body bytes to
a<00:06:55.960><c> string</c><00:06:57.060><c> then</c><00:06:58.060><c> the</c><00:06:58.090><c> completable</c><00:06:58.570><c> future</c>

00:06:58.980 --> 00:06:58.990 align:start position:0%
a string then the completable future
 

00:06:58.990 --> 00:07:01.860 align:start position:0%
a string then the completable future
then<00:06:59.140><c> apply</c><00:06:59.410><c> method</c><00:06:59.770><c> Maps</c><00:07:00.700><c> the</c><00:07:00.910><c> HTTP</c><00:07:01.660><c> response</c>

00:07:01.860 --> 00:07:01.870 align:start position:0%
then apply method Maps the HTTP response
 

00:07:01.870 --> 00:07:05.130 align:start position:0%
then apply method Maps the HTTP response
of<00:07:02.380><c> string</c><00:07:02.680><c> to</c><00:07:03.220><c> its</c><00:07:03.370><c> body</c><00:07:03.520><c> type</c><00:07:03.880><c> in</c><00:07:04.210><c> our</c><00:07:04.750><c> cases</c>

00:07:05.130 --> 00:07:05.140 align:start position:0%
of string to its body type in our cases
 

00:07:05.140 --> 00:07:07.500 align:start position:0%
of string to its body type in our cases
string<00:07:05.440><c> and</c><00:07:05.680><c> a</c><00:07:06.430><c> completable</c><00:07:06.910><c> future</c><00:07:07.330><c> of</c>

00:07:07.500 --> 00:07:07.510 align:start position:0%
string and a completable future of
 

00:07:07.510 --> 00:07:10.980 align:start position:0%
string and a completable future of
string<00:07:07.750><c> is</c><00:07:07.870><c> returned</c><00:07:09.120><c> so</c><00:07:10.120><c> we</c><00:07:10.180><c> can</c><00:07:10.330><c> see</c><00:07:10.480><c> example</c>

00:07:10.980 --> 00:07:10.990 align:start position:0%
string is returned so we can see example
 

00:07:10.990 --> 00:07:13.110 align:start position:0%
string is returned so we can see example
new<00:07:11.140><c> such</c><00:07:11.320><c> artists</c><00:07:11.860><c> get</c><00:07:12.040><c> methods</c><00:07:12.460><c> in</c><00:07:12.670><c> the</c><00:07:12.970><c> main</c>

00:07:13.110 --> 00:07:13.120 align:start position:0%
new such artists get methods in the main
 

00:07:13.120 --> 00:07:16.380 align:start position:0%
new such artists get methods in the main
method<00:07:13.500><c> so</c><00:07:14.500><c> here</c><00:07:14.530><c> we</c><00:07:14.830><c> can</c><00:07:14.980><c> see</c><00:07:15.160><c> the</c><00:07:16.000><c> get</c><00:07:16.180><c> method</c>

00:07:16.380 --> 00:07:16.390 align:start position:0%
method so here we can see the get method
 

00:07:16.390 --> 00:07:20.370 align:start position:0%
method so here we can see the get method
is<00:07:16.780><c> being</c><00:07:17.380><c> passed</c><00:07:17.680><c> URI</c><00:07:18.600><c> and</c><00:07:19.600><c> then</c><00:07:19.840><c> join</c><00:07:20.200><c> is</c>

00:07:20.370 --> 00:07:20.380 align:start position:0%
is being passed URI and then join is
 

00:07:20.380 --> 00:07:21.870 align:start position:0%
is being passed URI and then join is
being<00:07:20.560><c> called</c><00:07:20.770><c> on</c><00:07:21.010><c> the</c><00:07:21.130><c> complete</c><00:07:21.370><c> of</c><00:07:21.490><c> a</c><00:07:21.550><c> future</c>

00:07:21.870 --> 00:07:21.880 align:start position:0%
being called on the complete of a future
 

00:07:21.880 --> 00:07:25.470 align:start position:0%
being called on the complete of a future
that's<00:07:22.030><c> returned</c><00:07:23.070><c> this</c><00:07:24.070><c> blocks</c><00:07:24.480><c> execution</c>

00:07:25.470 --> 00:07:25.480 align:start position:0%
that's returned this blocks execution
 

00:07:25.480 --> 00:07:27.780 align:start position:0%
that's returned this blocks execution
until<00:07:25.870><c> the</c><00:07:26.080><c> string</c><00:07:26.470><c> response</c><00:07:27.070><c> body</c><00:07:27.340><c> is</c>

00:07:27.780 --> 00:07:27.790 align:start position:0%
until the string response body is
 

00:07:27.790 --> 00:07:30.060 align:start position:0%
until the string response body is
available<00:07:28.330><c> and</c><00:07:28.690><c> then</c><00:07:29.410><c> the</c><00:07:29.440><c> program</c><00:07:29.830><c> simply</c>

00:07:30.060 --> 00:07:30.070 align:start position:0%
available and then the program simply
 

00:07:30.070 --> 00:07:39.060 align:start position:0%
available and then the program simply
prints<00:07:30.520><c> out</c><00:07:30.640><c> the</c><00:07:30.760><c> body</c><00:07:31.530><c> so</c><00:07:32.530><c> let's</c><00:07:32.560><c> run</c><00:07:32.860><c> that</c><00:07:38.070><c> so</c>

00:07:39.060 --> 00:07:39.070 align:start position:0%
prints out the body so let's run that so
 

00:07:39.070 --> 00:07:40.920 align:start position:0%
prints out the body so let's run that so
here<00:07:39.280><c> we</c><00:07:39.370><c> can</c><00:07:39.490><c> see</c><00:07:39.640><c> the</c><00:07:39.790><c> response</c><00:07:40.000><c> body</c><00:07:40.450><c> string</c>

00:07:40.920 --> 00:07:40.930 align:start position:0%
here we can see the response body string
 

00:07:40.930 --> 00:07:44.210 align:start position:0%
here we can see the response body string
being<00:07:41.140><c> printed</c><00:07:41.350><c> out</c><00:07:41.560><c> and</c><00:07:41.830><c> it's</c><00:07:42.790><c> just</c><00:07:42.850><c> some</c><00:07:43.090><c> XML</c>

00:07:44.210 --> 00:07:44.220 align:start position:0%
being printed out and it's just some XML
 

00:07:44.220 --> 00:07:46.590 align:start position:0%
being printed out and it's just some XML
this<00:07:45.220><c> point</c><00:07:45.550><c> it'd</c><00:07:45.670><c> be</c><00:07:45.760><c> useful</c><00:07:46.150><c> to</c><00:07:46.300><c> see</c><00:07:46.450><c> the</c>

00:07:46.590 --> 00:07:46.600 align:start position:0%
this point it'd be useful to see the
 

00:07:46.600 --> 00:07:59.490 align:start position:0%
this point it'd be useful to see the
response<00:07:46.930><c> status</c><00:07:47.200><c> code</c><00:07:47.620><c> so</c><00:07:48.070><c> let's</c><00:07:48.100><c> print</c><00:07:48.490><c> that</c>

00:07:59.490 --> 00:07:59.500 align:start position:0%
 
 

00:07:59.500 --> 00:08:02.020 align:start position:0%
 
so<00:08:00.500><c> here</c><00:08:00.680><c> we</c><00:08:00.800><c> use</c><00:08:00.980><c> in</c><00:08:01.160><c> the</c><00:08:01.280><c> completable</c><00:08:01.639><c> future</c>

00:08:02.020 --> 00:08:02.030 align:start position:0%
so here we use in the completable future
 

00:08:02.030 --> 00:08:05.080 align:start position:0%
so here we use in the completable future
when<00:08:02.240><c> complete</c><00:08:02.600><c> methods</c><00:08:02.990><c> to</c><00:08:03.950><c> print</c><00:08:04.250><c> out</c><00:08:04.490><c> the</c>

00:08:05.080 --> 00:08:05.090 align:start position:0%
when complete methods to print out the
 

00:08:05.090 --> 00:08:07.240 align:start position:0%
when complete methods to print out the
status<00:08:05.450><c> code</c><00:08:05.660><c> really</c><00:08:06.560><c> we</c><00:08:06.800><c> should</c><00:08:06.980><c> be</c><00:08:07.070><c> checking</c>

00:08:07.240 --> 00:08:07.250 align:start position:0%
status code really we should be checking
 

00:08:07.250 --> 00:08:10.870 align:start position:0%
status code really we should be checking
that<00:08:07.490><c> the</c><00:08:08.060><c> response</c><00:08:08.960><c> value</c><00:08:09.139><c> is</c><00:08:09.500><c> none</c><00:08:09.770><c> no</c><00:08:09.980><c> in</c>

00:08:10.870 --> 00:08:10.880 align:start position:0%
that the response value is none no in
 

00:08:10.880 --> 00:08:12.960 align:start position:0%
that the response value is none no in
case<00:08:11.090><c> an</c><00:08:11.210><c> error</c><00:08:11.389><c> happens</c><00:08:11.600><c> for</c><00:08:12.320><c> simplicity</c>

00:08:12.960 --> 00:08:12.970 align:start position:0%
case an error happens for simplicity
 

00:08:12.970 --> 00:08:17.290 align:start position:0%
case an error happens for simplicity
then<00:08:13.970><c> just</c><00:08:14.180><c> print</c><00:08:14.360><c> it</c><00:08:14.510><c> for</c><00:08:14.660><c> now</c><00:08:16.060><c> so</c><00:08:17.060><c> running</c>

00:08:17.290 --> 00:08:17.300 align:start position:0%
then just print it for now so running
 

00:08:17.300 --> 00:08:20.650 align:start position:0%
then just print it for now so running
that<00:08:17.510><c> again</c><00:08:18.910><c> okay</c><00:08:19.910><c> great</c><00:08:20.150><c> we</c><00:08:20.300><c> can</c><00:08:20.450><c> see</c><00:08:20.540><c> the</c>

00:08:20.650 --> 00:08:20.660 align:start position:0%
that again okay great we can see the
 

00:08:20.660 --> 00:08:22.780 align:start position:0%
that again okay great we can see the
response<00:08:20.810><c> code</c><00:08:21.139><c> is</c><00:08:21.290><c> 200</c><00:08:21.800><c> so</c><00:08:22.460><c> everything's</c>

00:08:22.780 --> 00:08:22.790 align:start position:0%
response code is 200 so everything's
 

00:08:22.790 --> 00:08:25.240 align:start position:0%
response code is 200 so everything's
okay<00:08:23.150><c> and</c><00:08:23.360><c> again</c><00:08:24.230><c> the</c><00:08:24.590><c> response</c><00:08:24.860><c> body</c><00:08:25.070><c> is</c>

00:08:25.240 --> 00:08:25.250 align:start position:0%
okay and again the response body is
 

00:08:25.250 --> 00:08:27.990 align:start position:0%
okay and again the response body is
printed<00:08:26.230><c> alright</c><00:08:27.230><c> so</c><00:08:27.410><c> that's</c><00:08:27.590><c> everything</c>

00:08:27.990 --> 00:08:28.000 align:start position:0%
printed alright so that's everything
 

00:08:28.000 --> 00:08:30.490 align:start position:0%
printed alright so that's everything
working<00:08:29.000><c> using</c><00:08:29.419><c> one</c><00:08:29.780><c> of</c><00:08:29.810><c> the</c><00:08:29.990><c> convenience</c>

00:08:30.490 --> 00:08:30.500 align:start position:0%
working using one of the convenience
 

00:08:30.500 --> 00:08:33.579 align:start position:0%
working using one of the convenience
body<00:08:31.280><c> handers</c><00:08:32.050><c> let's</c><00:08:33.050><c> take</c><00:08:33.260><c> a</c><00:08:33.289><c> look</c><00:08:33.469><c> at</c>

00:08:33.579 --> 00:08:33.589 align:start position:0%
body handers let's take a look at
 

00:08:33.589 --> 00:08:45.670 align:start position:0%
body handers let's take a look at
writing<00:08:33.830><c> our</c><00:08:33.950><c> own</c><00:08:43.960><c> so</c><00:08:44.960><c> we</c><00:08:44.990><c> need</c><00:08:45.290><c> to</c><00:08:45.440><c> implement</c>

00:08:45.670 --> 00:08:45.680 align:start position:0%
writing our own so we need to implement
 

00:08:45.680 --> 00:08:49.150 align:start position:0%
writing our own so we need to implement
the<00:08:46.160><c> body</c><00:08:46.339><c> subscriber</c><00:08:46.910><c> interface</c><00:08:47.980><c> and</c><00:08:48.980><c> in</c>

00:08:49.150 --> 00:08:49.160 align:start position:0%
the body subscriber interface and in
 

00:08:49.160 --> 00:08:59.480 align:start position:0%
the body subscriber interface and in
this<00:08:49.310><c> case</c><00:08:49.610><c> our</c><00:08:50.150><c> type</c><00:08:50.450><c> is</c><00:08:50.690><c> a</c><00:08:50.720><c> string</c>

00:08:59.480 --> 00:08:59.490 align:start position:0%
 
 

00:08:59.490 --> 00:09:01.190 align:start position:0%
 
the<00:08:59.550><c> body</c><00:08:59.730><c> subscriber</c><00:09:00.300><c> has</c><00:09:00.510><c> a</c><00:09:00.540><c> single</c><00:09:00.870><c> method</c>

00:09:01.190 --> 00:09:01.200 align:start position:0%
the body subscriber has a single method
 

00:09:01.200 --> 00:09:02.930 align:start position:0%
the body subscriber has a single method
called<00:09:01.830><c> get</c><00:09:02.040><c> body</c><00:09:02.279><c> in</c><00:09:02.459><c> a</c><00:09:02.520><c> return</c><00:09:02.790><c> to</c>

00:09:02.930 --> 00:09:02.940 align:start position:0%
called get body in a return to
 

00:09:02.940 --> 00:09:05.570 align:start position:0%
called get body in a return to
completion<00:09:03.360><c> stage</c><00:09:03.540><c> of</c><00:09:03.750><c> T</c><00:09:04.010><c> T</c><00:09:05.010><c> is</c><00:09:05.070><c> a</c><00:09:05.160><c> string</c><00:09:05.459><c> in</c>

00:09:05.570 --> 00:09:05.580 align:start position:0%
completion stage of T T is a string in
 

00:09:05.580 --> 00:09:09.170 align:start position:0%
completion stage of T T is a string in
our<00:09:05.700><c> case</c><00:09:05.910><c> and</c><00:09:06.180><c> we</c><00:09:07.140><c> must</c><00:09:07.320><c> also</c><00:09:07.529><c> implement</c><00:09:08.310><c> the</c>

00:09:09.170 --> 00:09:09.180 align:start position:0%
our case and we must also implement the
 

00:09:09.180 --> 00:09:12.800 align:start position:0%
our case and we must also implement the
four<00:09:09.510><c> methods</c><00:09:09.930><c> from</c><00:09:10.380><c> flow</c><00:09:10.649><c> subscriber</c><00:09:11.810><c> so</c>

00:09:12.800 --> 00:09:12.810 align:start position:0%
four methods from flow subscriber so
 

00:09:12.810 --> 00:09:14.960 align:start position:0%
four methods from flow subscriber so
let's<00:09:12.990><c> take</c><00:09:13.170><c> a</c><00:09:13.200><c> look</c><00:09:13.380><c> at</c><00:09:13.470><c> them</c><00:09:13.700><c> we'll</c><00:09:14.700><c> start</c>

00:09:14.960 --> 00:09:14.970 align:start position:0%
let's take a look at them we'll start
 

00:09:14.970 --> 00:09:17.180 align:start position:0%
let's take a look at them we'll start
with<00:09:15.089><c> the</c><00:09:15.180><c> get</c><00:09:15.390><c> body</c><00:09:15.720><c> method</c><00:09:16.140><c> so</c><00:09:16.950><c> they</c><00:09:17.040><c> get</c>

00:09:17.180 --> 00:09:17.190 align:start position:0%
with the get body method so they get
 

00:09:17.190 --> 00:09:18.980 align:start position:0%
with the get body method so they get
body<00:09:17.459><c> method</c><00:09:17.820><c> needs</c><00:09:17.910><c> to</c><00:09:18.060><c> return</c><00:09:18.330><c> a</c><00:09:18.390><c> completion</c>

00:09:18.980 --> 00:09:18.990 align:start position:0%
body method needs to return a completion
 

00:09:18.990 --> 00:09:22.220 align:start position:0%
body method needs to return a completion
stage<00:09:19.230><c> of</c><00:09:19.500><c> string</c><00:09:20.240><c> so</c><00:09:21.240><c> let's</c><00:09:21.450><c> use</c><00:09:21.750><c> completable</c>

00:09:22.220 --> 00:09:22.230 align:start position:0%
stage of string so let's use completable
 

00:09:22.230 --> 00:09:23.389 align:start position:0%
stage of string so let's use completable
future<00:09:22.680><c> which</c><00:09:22.980><c> is</c><00:09:23.010><c> a</c><00:09:23.130><c> concrete</c>

00:09:23.389 --> 00:09:23.399 align:start position:0%
future which is a concrete
 

00:09:23.399 --> 00:09:36.470 align:start position:0%
future which is a concrete
implementation<00:09:24.300><c> of</c><00:09:24.450><c> a</c><00:09:24.660><c> completion</c><00:09:25.200><c> stage</c>

00:09:36.470 --> 00:09:36.480 align:start position:0%
 
 

00:09:36.480 --> 00:09:39.600 align:start position:0%
 
so<00:09:37.480><c> we've</c><00:09:37.780><c> called</c><00:09:38.050><c> our</c><00:09:38.440><c> compatible</c><00:09:39.010><c> future</c>

00:09:39.600 --> 00:09:39.610 align:start position:0%
so we've called our compatible future
 

00:09:39.610 --> 00:09:42.270 align:start position:0%
so we've called our compatible future
hey<00:09:40.570><c> buddy</c><00:09:40.810><c> CF</c><00:09:41.260><c> because</c><00:09:41.590><c> it</c><00:09:41.830><c> holds</c><00:09:42.100><c> the</c>

00:09:42.270 --> 00:09:42.280 align:start position:0%
hey buddy CF because it holds the
 

00:09:42.280 --> 00:09:45.270 align:start position:0%
hey buddy CF because it holds the
response<00:09:42.730><c> body</c><00:09:43.230><c> and</c><00:09:44.230><c> where</c><00:09:44.740><c> you</c><00:09:44.800><c> can</c><00:09:44.950><c> return</c>

00:09:45.270 --> 00:09:45.280 align:start position:0%
response body and where you can return
 

00:09:45.280 --> 00:09:48.300 align:start position:0%
response body and where you can return
that<00:09:45.520><c> from</c><00:09:45.700><c> the</c><00:09:45.760><c> cat</c><00:09:45.910><c> body</c><00:09:46.060><c> method</c><00:09:47.160><c> now</c><00:09:48.160><c> we'll</c>

00:09:48.300 --> 00:09:48.310 align:start position:0%
that from the cat body method now we'll
 

00:09:48.310 --> 00:09:54.480 align:start position:0%
that from the cat body method now we'll
move<00:09:48.430><c> on</c><00:09:48.640><c> to</c><00:09:48.790><c> unsubscribe</c><00:09:49.570><c> so</c><00:09:52.830><c> the</c><00:09:53.830><c> HTTP</c>

00:09:54.480 --> 00:09:54.490 align:start position:0%
move on to unsubscribe so the HTTP
 

00:09:54.490 --> 00:09:56.430 align:start position:0%
move on to unsubscribe so the HTTP
clients<00:09:54.910><c> is</c><00:09:54.970><c> a</c><00:09:55.000><c> publisher</c><00:09:55.570><c> of</c><00:09:55.600><c> response</c><00:09:56.170><c> body</c>

00:09:56.430 --> 00:09:56.440 align:start position:0%
clients is a publisher of response body
 

00:09:56.440 --> 00:10:00.120 align:start position:0%
clients is a publisher of response body
and<00:09:57.480><c> this</c><00:09:58.480><c> string</c><00:09:58.720><c> subscriber</c><00:09:59.290><c> subscribe</c><00:09:59.950><c> to</c>

00:10:00.120 --> 00:10:00.130 align:start position:0%
and this string subscriber subscribe to
 

00:10:00.130 --> 00:10:02.760 align:start position:0%
and this string subscriber subscribe to
that<00:10:00.250><c> publisher</c><00:10:00.810><c> so</c><00:10:01.810><c> first</c><00:10:02.110><c> it</c><00:10:02.290><c> will</c><00:10:02.350><c> have</c><00:10:02.560><c> its</c>

00:10:02.760 --> 00:10:02.770 align:start position:0%
that publisher so first it will have its
 

00:10:02.770 --> 00:10:05.760 align:start position:0%
that publisher so first it will have its
unsubscribe<00:10:03.490><c> method</c><00:10:04.120><c> invoked</c><00:10:04.660><c> with</c><00:10:05.620><c> the</c>

00:10:05.760 --> 00:10:05.770 align:start position:0%
unsubscribe method invoked with the
 

00:10:05.770 --> 00:10:10.410 align:start position:0%
unsubscribe method invoked with the
subscription<00:10:06.370><c> from</c><00:10:07.180><c> the</c><00:10:07.270><c> HTTP</c><00:10:07.750><c> client</c><00:10:09.420><c> so</c>

00:10:10.410 --> 00:10:10.420 align:start position:0%
subscription from the HTTP client so
 

00:10:10.420 --> 00:10:23.180 align:start position:0%
subscription from the HTTP client so
let's<00:10:10.570><c> store</c><00:10:10.870><c> that</c><00:10:10.900><c> subscription</c>

00:10:23.180 --> 00:10:23.190 align:start position:0%
 
 

00:10:23.190 --> 00:10:26.790 align:start position:0%
 
okay<00:10:24.190><c> now</c><00:10:24.670><c> we</c><00:10:24.730><c> have</c><00:10:24.850><c> the</c><00:10:25.090><c> subscription</c><00:10:25.660><c> we</c><00:10:26.590><c> can</c>

00:10:26.790 --> 00:10:26.800 align:start position:0%
okay now we have the subscription we can
 

00:10:26.800 --> 00:10:28.830 align:start position:0%
okay now we have the subscription we can
request<00:10:27.130><c> some</c><00:10:27.670><c> more</c><00:10:27.880><c> response</c><00:10:28.240><c> body</c><00:10:28.480><c> from</c><00:10:28.720><c> the</c>

00:10:28.830 --> 00:10:28.840 align:start position:0%
request some more response body from the
 

00:10:28.840 --> 00:10:30.210 align:start position:0%
request some more response body from the
client<00:10:29.200><c> or</c><00:10:29.440><c> we</c><00:10:29.530><c> can</c><00:10:29.680><c> cancel</c><00:10:29.920><c> a</c><00:10:30.100><c> subscription</c>

00:10:30.210 --> 00:10:30.220 align:start position:0%
client or we can cancel a subscription
 

00:10:30.220 --> 00:10:33.360 align:start position:0%
client or we can cancel a subscription
if<00:10:30.760><c> we're</c><00:10:30.880><c> no</c><00:10:30.970><c> longer</c><00:10:31.240><c> interested</c><00:10:32.370><c> let's</c>

00:10:33.360 --> 00:10:33.370 align:start position:0%
if we're no longer interested let's
 

00:10:33.370 --> 00:10:36.950 align:start position:0%
if we're no longer interested let's
request<00:10:33.760><c> some</c><00:10:34.000><c> more</c><00:10:34.210><c> and</c><00:10:35.050><c> just</c><00:10:35.230><c> request</c><00:10:35.560><c> one</c>

00:10:36.950 --> 00:10:36.960 align:start position:0%
request some more and just request one
 

00:10:36.960 --> 00:10:39.390 align:start position:0%
request some more and just request one
at<00:10:37.960><c> this</c><00:10:38.110><c> point</c><00:10:38.380><c> we</c><00:10:38.500><c> can</c><00:10:38.650><c> look</c><00:10:38.770><c> up</c><00:10:38.860><c> hook</c><00:10:39.220><c> up</c>

00:10:39.390 --> 00:10:39.400 align:start position:0%
at this point we can look up hook up
 

00:10:39.400 --> 00:10:42.060 align:start position:0%
at this point we can look up hook up
error<00:10:39.820><c> handling</c><00:10:40.290><c> so</c><00:10:41.290><c> we</c><00:10:41.380><c> complete</c><00:10:41.770><c> the</c><00:10:41.920><c> body</c>

00:10:42.060 --> 00:10:42.070 align:start position:0%
error handling so we complete the body
 

00:10:42.070 --> 00:10:48.830 align:start position:0%
error handling so we complete the body
cf<00:10:42.520><c> exceptionally</c><00:10:43.390><c> after</c><00:10:43.840><c> an</c><00:10:44.680><c> error</c><00:10:44.950><c> happens</c>

00:10:48.830 --> 00:10:48.840 align:start position:0%
 
 

00:10:48.840 --> 00:10:52.290 align:start position:0%
 
in<00:10:49.840><c> this</c><00:10:50.050><c> simplement</c><00:10:50.550><c> implementation</c><00:10:51.550><c> then</c>

00:10:52.290 --> 00:10:52.300 align:start position:0%
in this simplement implementation then
 

00:10:52.300 --> 00:10:54.720 align:start position:0%
in this simplement implementation then
just<00:10:52.480><c> accumulate</c><00:10:53.020><c> all</c><00:10:53.230><c> of</c><00:10:53.260><c> response</c><00:10:53.770><c> data</c><00:10:54.400><c> on</c>

00:10:54.720 --> 00:10:54.730 align:start position:0%
just accumulate all of response data on
 

00:10:54.730 --> 00:10:56.280 align:start position:0%
just accumulate all of response data on
the<00:10:55.210><c> pipe</c><00:10:55.360><c> buffers</c><00:10:55.690><c> in</c><00:10:55.870><c> the</c><00:10:55.960><c> list</c>

00:10:56.280 --> 00:10:56.290 align:start position:0%
the pipe buffers in the list
 

00:10:56.290 --> 00:10:59.640 align:start position:0%
the pipe buffers in the list
and<00:10:56.910><c> then</c><00:10:57.910><c> we</c><00:10:58.060><c> will</c><00:10:58.120><c> convert</c><00:10:58.540><c> the</c><00:10:59.290><c> response</c>

00:10:59.640 --> 00:10:59.650 align:start position:0%
and then we will convert the response
 

00:10:59.650 --> 00:11:04.470 align:start position:0%
and then we will convert the response
body<00:11:00.180><c> into</c><00:11:01.180><c> a</c><00:11:01.240><c> string</c><00:11:01.510><c> at</c><00:11:01.660><c> the</c><00:11:01.690><c> end</c><00:11:03.450><c> so</c><00:11:04.450><c> let's</c>

00:11:04.470 --> 00:11:04.480 align:start position:0%
body into a string at the end so let's
 

00:11:04.480 --> 00:11:26.920 align:start position:0%
body into a string at the end so let's
create<00:11:04.960><c> a</c><00:11:05.170><c> list</c>

00:11:26.920 --> 00:11:26.930 align:start position:0%
 
 

00:11:26.930 --> 00:11:29.530 align:start position:0%
 
okay<00:11:27.500><c> so</c><00:11:27.560><c> every</c><00:11:27.950><c> time</c><00:11:28.070><c> response</c><00:11:28.490><c> date</c><00:11:29.390><c> is</c>

00:11:29.530 --> 00:11:29.540 align:start position:0%
okay so every time response date is
 

00:11:29.540 --> 00:11:31.680 align:start position:0%
okay so every time response date is
received<00:11:29.900><c> we</c><00:11:30.380><c> add</c><00:11:30.500><c> it</c><00:11:30.620><c> to</c><00:11:30.650><c> the</c><00:11:30.770><c> list</c>

00:11:31.680 --> 00:11:31.690 align:start position:0%
received we add it to the list
 

00:11:31.690 --> 00:11:37.510 align:start position:0%
received we add it to the list
let's<00:11:32.690><c> keep</c><00:11:32.900><c> that</c><00:11:33.080><c> a</c><00:11:33.110><c> better</c><00:11:33.350><c> name</c><00:11:36.250><c> okay</c><00:11:37.250><c> great</c>

00:11:37.510 --> 00:11:37.520 align:start position:0%
let's keep that a better name okay great
 

00:11:37.520 --> 00:11:39.100 align:start position:0%
let's keep that a better name okay great
so<00:11:37.880><c> we're</c><00:11:38.029><c> only</c><00:11:38.120><c> left</c><00:11:38.390><c> with</c><00:11:38.540><c> the</c><00:11:38.630><c> uncomplete</c>

00:11:39.100 --> 00:11:39.110 align:start position:0%
so we're only left with the uncomplete
 

00:11:39.110 --> 00:11:42.280 align:start position:0%
so we're only left with the uncomplete
method<00:11:40.089><c> so</c><00:11:41.089><c> again</c><00:11:41.390><c> in</c><00:11:41.600><c> this</c><00:11:41.810><c> implement</c>

00:11:42.280 --> 00:11:42.290 align:start position:0%
method so again in this implement
 

00:11:42.290 --> 00:11:45.550 align:start position:0%
method so again in this implement
implementation<00:11:43.150><c> we</c><00:11:44.150><c> will</c><00:11:44.330><c> just</c><00:11:44.600><c> determine</c>

00:11:45.550 --> 00:11:45.560 align:start position:0%
implementation we will just determine
 

00:11:45.560 --> 00:11:47.320 align:start position:0%
implementation we will just determine
the<00:11:45.650><c> number</c><00:11:45.770><c> of</c><00:11:45.950><c> bytes</c><00:11:46.130><c> we</c><00:11:46.279><c> have</c><00:11:46.520><c> put</c><00:11:47.120><c> them</c><00:11:47.240><c> in</c>

00:11:47.320 --> 00:11:47.330 align:start position:0%
the number of bytes we have put them in
 

00:11:47.330 --> 00:11:49.210 align:start position:0%
the number of bytes we have put them in
the<00:11:47.420><c> byte</c><00:11:47.570><c> array</c><00:11:47.810><c> and</c><00:11:48.050><c> then</c><00:11:48.740><c> convert</c><00:11:49.070><c> that</c>

00:11:49.210 --> 00:11:49.220 align:start position:0%
the byte array and then convert that
 

00:11:49.220 --> 00:12:02.750 align:start position:0%
the byte array and then convert that
byte<00:11:49.430><c> array</c><00:11:49.640><c> into</c><00:11:49.850><c> a</c><00:11:49.940><c> string</c>

00:12:02.750 --> 00:12:02.760 align:start position:0%
 
 

00:12:02.760 --> 00:12:05.600 align:start position:0%
 
so<00:12:03.420><c> once</c><00:12:03.630><c> we</c><00:12:03.750><c> know</c><00:12:03.860><c> the</c><00:12:04.860><c> number</c><00:12:04.980><c> of</c><00:12:05.220><c> fights</c><00:12:05.430><c> are</c>

00:12:05.600 --> 00:12:05.610 align:start position:0%
so once we know the number of fights are
 

00:12:05.610 --> 00:12:07.220 align:start position:0%
so once we know the number of fights are
remaining<00:12:05.880><c> in</c><00:12:06.000><c> each</c><00:12:06.149><c> byte</c><00:12:06.360><c> buffer</c><00:12:06.720><c> we</c><00:12:06.870><c> can</c><00:12:07.019><c> sum</c>

00:12:07.220 --> 00:12:07.230 align:start position:0%
remaining in each byte buffer we can sum
 

00:12:07.230 --> 00:12:08.990 align:start position:0%
remaining in each byte buffer we can sum
that<00:12:07.350><c> up</c><00:12:07.529><c> so</c><00:12:08.279><c> that's</c><00:12:08.339><c> the</c><00:12:08.490><c> total</c><00:12:08.610><c> number</c><00:12:08.970><c> of</c>

00:12:08.990 --> 00:12:09.000 align:start position:0%
that up so that's the total number of
 

00:12:09.000 --> 00:12:12.410 align:start position:0%
that up so that's the total number of
bytes<00:12:09.269><c> that</c><00:12:09.540><c> we</c><00:12:09.750><c> need</c><00:12:09.959><c> in</c><00:12:10.620><c> our</c><00:12:10.709><c> byte</c><00:12:10.949><c> array</c><00:12:11.420><c> so</c>

00:12:12.410 --> 00:12:12.420 align:start position:0%
bytes that we need in our byte array so
 

00:12:12.420 --> 00:12:18.370 align:start position:0%
bytes that we need in our byte array so
let's<00:12:12.570><c> create</c><00:12:12.810><c> a</c><00:12:12.870><c> fight</c><00:12:13.079><c> array</c><00:12:13.320><c> of</c><00:12:13.440><c> that</c><00:12:13.589><c> size</c>

00:12:18.370 --> 00:12:18.380 align:start position:0%
 
 

00:12:18.380 --> 00:12:31.920 align:start position:0%
 
okay<00:12:19.380><c> now</c><00:12:19.800><c> we</c><00:12:19.860><c> can</c><00:12:20.100><c> iterate</c><00:12:20.279><c> over</c><00:12:23.180><c> the</c><00:12:24.180><c> buffers</c>

00:12:31.920 --> 00:12:31.930 align:start position:0%
 
 

00:12:31.930 --> 00:12:37.770 align:start position:0%
 
and<00:12:32.740><c> nothing</c><00:12:33.040><c> to</c><00:12:33.130><c> a</c><00:12:33.160><c> byte</c><00:12:33.400><c> array</c><00:12:36.660><c> oops</c>

00:12:37.770 --> 00:12:37.780 align:start position:0%
and nothing to a byte array oops
 

00:12:37.780 --> 00:12:41.640 align:start position:0%
and nothing to a byte array oops
call<00:12:38.200><c> that</c><00:12:38.320><c> buffers</c><00:12:38.740><c> should</c><00:12:39.460><c> be</c><00:12:39.580><c> prefer</c><00:12:40.650><c> over</c>

00:12:41.640 --> 00:12:41.650 align:start position:0%
call that buffers should be prefer over
 

00:12:41.650 --> 00:12:45.060 align:start position:0%
call that buffers should be prefer over
doc<00:12:41.800><c> gets</c><00:12:42.300><c> byte</c><00:12:43.300><c> array</c><00:12:43.540><c> at</c><00:12:44.470><c> this</c><00:12:44.620><c> point</c><00:12:44.920><c> we</c>

00:12:45.060 --> 00:12:45.070 align:start position:0%
doc gets byte array at this point we
 

00:12:45.070 --> 00:12:52.140 align:start position:0%
doc gets byte array at this point we
need<00:12:45.160><c> an</c><00:12:45.310><c> offsets</c><00:12:45.910><c> so</c><00:12:47.610><c> it's</c><00:12:48.610><c> great</c><00:12:48.910><c> one</c><00:12:51.150><c> so</c>

00:12:52.140 --> 00:12:52.150 align:start position:0%
need an offsets so it's great one so
 

00:12:52.150 --> 00:12:54.360 align:start position:0%
need an offsets so it's great one so
there<00:12:52.300><c> should</c><00:12:52.450><c> be</c><00:12:52.510><c> zero</c><00:12:52.810><c> and</c><00:12:53.220><c> we</c><00:12:54.220><c> need</c><00:12:54.340><c> a</c>

00:12:54.360 --> 00:12:54.370 align:start position:0%
there should be zero and we need a
 

00:12:54.370 --> 00:12:56.640 align:start position:0%
there should be zero and we need a
length<00:12:54.640><c> and</c><00:12:55.060><c> the</c><00:12:55.300><c> length</c><00:12:55.510><c> is</c><00:12:55.690><c> going</c><00:12:55.870><c> to</c><00:12:56.020><c> be</c><00:12:56.140><c> the</c>

00:12:56.640 --> 00:12:56.650 align:start position:0%
length and the length is going to be the
 

00:12:56.650 --> 00:13:09.060 align:start position:0%
length and the length is going to be the
number<00:12:56.860><c> of</c><00:12:56.980><c> bytes</c><00:12:57.160><c> remaining</c><00:13:07.500><c> and</c><00:13:08.500><c> this</c><00:13:08.830><c> is</c>

00:13:09.060 --> 00:13:09.070 align:start position:0%
number of bytes remaining and this is
 

00:13:09.070 --> 00:13:16.850 align:start position:0%
number of bytes remaining and this is
offset<00:13:12.960><c> we'll</c><00:13:13.960><c> need</c><00:13:14.110><c> to</c><00:13:14.940><c> increase</c><00:13:15.940><c> the</c><00:13:16.120><c> offset</c>

00:13:16.850 --> 00:13:16.860 align:start position:0%
offset we'll need to increase the offset
 

00:13:16.860 --> 00:13:23.190 align:start position:0%
offset we'll need to increase the offset
as<00:13:17.860><c> we</c><00:13:18.010><c> iterate</c><00:13:21.390><c> okay</c><00:13:22.390><c> now</c><00:13:22.810><c> we</c><00:13:22.870><c> have</c><00:13:23.020><c> a</c>

00:13:23.190 --> 00:13:23.200 align:start position:0%
as we iterate okay now we have a
 

00:13:23.200 --> 00:13:25.650 align:start position:0%
as we iterate okay now we have a
response<00:13:23.880><c> body</c><00:13:24.880><c> bytes</c><00:13:25.180><c> in</c><00:13:25.390><c> a</c><00:13:25.450><c> byte</c><00:13:25.630><c> array</c>

00:13:25.650 --> 00:13:25.660 align:start position:0%
response body bytes in a byte array
 

00:13:25.660 --> 00:13:31.920 align:start position:0%
response body bytes in a byte array
let's<00:13:26.290><c> convert</c><00:13:26.590><c> that</c><00:13:26.770><c> to</c><00:13:27.220><c> a</c><00:13:27.250><c> string</c><00:13:30.930><c> for</c>

00:13:31.920 --> 00:13:31.930 align:start position:0%
let's convert that to a string for
 

00:13:31.930 --> 00:13:34.170 align:start position:0%
let's convert that to a string for
simplicity<00:13:32.440><c> purposes</c><00:13:32.760><c> we'll</c><00:13:33.760><c> just</c><00:13:34.000><c> ignore</c>

00:13:34.170 --> 00:13:34.180 align:start position:0%
simplicity purposes we'll just ignore
 

00:13:34.180 --> 00:13:37.170 align:start position:0%
simplicity purposes we'll just ignore
charge<00:13:34.690><c> at</c><00:13:34.900><c> conversion</c><00:13:35.260><c> for</c><00:13:35.590><c> now</c><00:13:35.940><c> okay</c><00:13:36.940><c> great</c>

00:13:37.170 --> 00:13:37.180 align:start position:0%
charge at conversion for now okay great
 

00:13:37.180 --> 00:13:39.420 align:start position:0%
charge at conversion for now okay great
we<00:13:37.330><c> have</c><00:13:37.510><c> our</c><00:13:37.660><c> string</c><00:13:38.050><c> let's</c><00:13:38.860><c> complete</c><00:13:39.250><c> the</c>

00:13:39.420 --> 00:13:39.430 align:start position:0%
we have our string let's complete the
 

00:13:39.430 --> 00:13:46.740 align:start position:0%
we have our string let's complete the
body<00:13:39.640><c> CF</c><00:13:40.320><c> with</c><00:13:41.320><c> that</c><00:13:41.530><c> string</c><00:13:45.540><c> okay</c><00:13:46.540><c> at</c><00:13:46.630><c> this</c>

00:13:46.740 --> 00:13:46.750 align:start position:0%
body CF with that string okay at this
 

00:13:46.750 --> 00:13:49.320 align:start position:0%
body CF with that string okay at this
point<00:13:46.840><c> everything</c><00:13:47.440><c> looks</c><00:13:47.620><c> alright</c><00:13:47.940><c> we</c><00:13:48.940><c> forgot</c>

00:13:49.320 --> 00:13:49.330 align:start position:0%
point everything looks alright we forgot
 

00:13:49.330 --> 00:13:50.450 align:start position:0%
point everything looks alright we forgot
one<00:13:49.690><c> thing</c>

00:13:50.450 --> 00:13:50.460 align:start position:0%
one thing
 

00:13:50.460 --> 00:13:53.430 align:start position:0%
one thing
because<00:13:51.460><c> an</c><00:13:52.300><c> unsubscribe</c><00:13:52.840><c> we've</c><00:13:53.290><c> only</c>

00:13:53.430 --> 00:13:53.440 align:start position:0%
because an unsubscribe we've only
 

00:13:53.440 --> 00:13:55.950 align:start position:0%
because an unsubscribe we've only
requested<00:13:54.190><c> one</c><00:13:54.400><c> more</c><00:13:54.580><c> call</c><00:13:54.790><c> back</c><00:13:55.000><c> every</c><00:13:55.690><c> time</c>

00:13:55.950 --> 00:13:55.960 align:start position:0%
requested one more call back every time
 

00:13:55.960 --> 00:13:57.750 align:start position:0%
requested one more call back every time
we<00:13:56.170><c> receive</c><00:13:56.470><c> a</c><00:13:56.500><c> call</c><00:13:56.800><c> back</c><00:13:57.010><c> we</c><00:13:57.400><c> want</c><00:13:57.670><c> to</c>

00:13:57.750 --> 00:13:57.760 align:start position:0%
we receive a call back we want to
 

00:13:57.760 --> 00:14:00.510 align:start position:0%
we receive a call back we want to
request<00:13:58.060><c> another</c><00:13:58.390><c> one</c><00:13:58.720><c> so</c><00:13:59.680><c> single</c><00:14:00.070><c> step</c><00:14:00.280><c> one</c>

00:14:00.510 --> 00:14:00.520 align:start position:0%
request another one so single step one
 

00:14:00.520 --> 00:14:04.170 align:start position:0%
request another one so single step one
at<00:14:00.640><c> a</c><00:14:00.670><c> time</c><00:14:02.340><c> okay</c><00:14:03.340><c> now</c><00:14:03.370><c> we</c><00:14:03.550><c> have</c><00:14:03.670><c> our</c><00:14:03.820><c> string</c>

00:14:04.170 --> 00:14:04.180 align:start position:0%
at a time okay now we have our string
 

00:14:04.180 --> 00:14:06.930 align:start position:0%
at a time okay now we have our string
subscriber<00:14:04.660><c> let's</c><00:14:05.500><c> hook</c><00:14:05.740><c> it</c><00:14:05.770><c> up</c><00:14:05.980><c> with</c><00:14:06.160><c> HTTP</c>

00:14:06.930 --> 00:14:06.940 align:start position:0%
subscriber let's hook it up with HTTP
 

00:14:06.940 --> 00:14:11.370 align:start position:0%
subscriber let's hook it up with HTTP
clients<00:14:07.980><c> so</c><00:14:08.980><c> we</c><00:14:09.160><c> need</c><00:14:09.340><c> a</c><00:14:09.550><c> response</c><00:14:10.260><c> sorry</c><00:14:11.260><c> a</c>

00:14:11.370 --> 00:14:11.380 align:start position:0%
clients so we need a response sorry a
 

00:14:11.380 --> 00:14:15.120 align:start position:0%
clients so we need a response sorry a
your<00:14:11.800><c> sponsor</c><00:14:12.130><c> body</c><00:14:12.310><c> handler</c><00:14:12.700><c> here</c><00:14:14.130><c> response</c>

00:14:15.120 --> 00:14:15.130 align:start position:0%
your sponsor body handler here response
 

00:14:15.130 --> 00:14:16.950 align:start position:0%
your sponsor body handler here response
party<00:14:15.460><c> handler</c><00:14:15.850><c> is</c><00:14:16.030><c> a</c><00:14:16.060><c> function</c><00:14:16.510><c> interfaced</c>

00:14:16.950 --> 00:14:16.960 align:start position:0%
party handler is a function interfaced
 

00:14:16.960 --> 00:14:20.400 align:start position:0%
party handler is a function interfaced
it<00:14:17.200><c> takes</c><00:14:17.380><c> for</c><00:14:17.530><c> a</c><00:14:17.710><c> response</c><00:14:18.580><c> info</c><00:14:19.110><c> returns</c><00:14:20.110><c> a</c>

00:14:20.400 --> 00:14:20.410 align:start position:0%
it takes for a response info returns a
 

00:14:20.410 --> 00:14:22.530 align:start position:0%
it takes for a response info returns a
subscriber<00:14:20.980><c> in</c><00:14:21.880><c> our</c><00:14:22.060><c> case</c><00:14:22.300><c> we'll</c>

00:14:22.530 --> 00:14:22.540 align:start position:0%
subscriber in our case we'll
 

00:14:22.540 --> 00:14:24.030 align:start position:0%
subscriber in our case we'll
unconditionally<00:14:23.380><c> return</c><00:14:23.770><c> a</c><00:14:23.800><c> string</c>

00:14:24.030 --> 00:14:24.040 align:start position:0%
unconditionally return a string
 

00:14:24.040 --> 00:14:35.369 align:start position:0%
unconditionally return a string
subscriber<00:14:25.950><c> okay</c><00:14:26.950><c> so</c><00:14:27.010><c> let's</c><00:14:27.280><c> run</c><00:14:27.460><c> that</c>

00:14:35.369 --> 00:14:35.379 align:start position:0%
 
 

00:14:35.379 --> 00:14:38.019 align:start position:0%
 
okay<00:14:36.379><c> great</c><00:14:36.589><c> so</c><00:14:36.649><c> we've</c><00:14:36.949><c> response</c><00:14:37.339><c> code</c><00:14:37.549><c> 200</c>

00:14:38.019 --> 00:14:38.029 align:start position:0%
okay great so we've response code 200
 

00:14:38.029 --> 00:14:40.929 align:start position:0%
okay great so we've response code 200
again<00:14:38.299><c> and</c><00:14:39.049><c> we</c><00:14:39.170><c> have</c><00:14:39.379><c> our</c><00:14:39.589><c> response</c><00:14:40.160><c> buddy</c><00:14:40.610><c> as</c>

00:14:40.929 --> 00:14:40.939 align:start position:0%
again and we have our response buddy as
 

00:14:40.939 --> 00:14:43.869 align:start position:0%
again and we have our response buddy as
a<00:14:40.999><c> string</c><00:14:42.129><c> let's</c><00:14:43.129><c> just</c><00:14:43.309><c> take</c><00:14:43.489><c> a</c><00:14:43.519><c> look</c><00:14:43.730><c> at</c>

00:14:43.869 --> 00:14:43.879 align:start position:0%
a string let's just take a look at
 

00:14:43.879 --> 00:14:45.970 align:start position:0%
a string let's just take a look at
what's<00:14:44.059><c> happening</c><00:14:44.420><c> here</c><00:14:44.769><c> let's</c><00:14:45.769><c> add</c><00:14:45.949><c> a</c>

00:14:45.970 --> 00:14:45.980 align:start position:0%
what's happening here let's add a
 

00:14:45.980 --> 00:14:52.139 align:start position:0%
what's happening here let's add a
debugging<00:14:46.459><c> statement</c><00:14:47.059><c> to</c><00:14:47.299><c> your</c><00:14:47.420><c> next</c><00:14:47.809><c> call</c>

00:14:52.139 --> 00:14:52.149 align:start position:0%
 
 

00:14:52.149 --> 00:14:55.410 align:start position:0%
 
oops

00:14:55.410 --> 00:14:55.420 align:start position:0%
 
 

00:14:55.420 --> 00:14:58.710 align:start position:0%
 
next<00:14:56.420><c> it's</c><00:14:56.540><c> been</c><00:14:56.689><c> called</c><00:14:56.989><c> with</c><00:14:57.290><c> buffers</c><00:14:57.739><c> and</c>

00:14:58.710 --> 00:14:58.720 align:start position:0%
next it's been called with buffers and
 

00:14:58.720 --> 00:15:02.619 align:start position:0%
next it's been called with buffers and
we'll<00:14:59.720><c> change</c><00:15:00.079><c> the</c><00:15:00.290><c> URI</c><00:15:00.999><c> so</c><00:15:01.999><c> that</c><00:15:02.149><c> we</c><00:15:02.239><c> get</c><00:15:02.420><c> some</c>

00:15:02.619 --> 00:15:02.629 align:start position:0%
we'll change the URI so that we get some
 

00:15:02.629 --> 00:15:07.269 align:start position:0%
we'll change the URI so that we get some
more<00:15:02.779><c> response</c><00:15:03.410><c> data</c><00:15:05.739><c> okay</c><00:15:06.739><c> let's</c><00:15:06.980><c> run</c><00:15:07.129><c> that</c>

00:15:07.269 --> 00:15:07.279 align:start position:0%
more response data okay let's run that
 

00:15:07.279 --> 00:15:16.509 align:start position:0%
more response data okay let's run that
again<00:15:14.230><c> okay</c><00:15:15.230><c> we</c><00:15:15.410><c> can</c><00:15:15.559><c> see</c><00:15:15.709><c> on</c><00:15:15.860><c> Nexus</c><00:15:16.249><c> being</c>

00:15:16.509 --> 00:15:16.519 align:start position:0%
again okay we can see on Nexus being
 

00:15:16.519 --> 00:15:19.059 align:start position:0%
again okay we can see on Nexus being
called<00:15:16.790><c> a</c><00:15:16.910><c> number</c><00:15:17.119><c> of</c><00:15:17.209><c> times</c><00:15:17.529><c> we</c><00:15:18.529><c> eat</c><00:15:18.860><c> by</c>

00:15:19.059 --> 00:15:19.069 align:start position:0%
called a number of times we eat by
 

00:15:19.069 --> 00:15:20.829 align:start position:0%
called a number of times we eat by
buffers<00:15:19.489><c> that</c><00:15:19.670><c> contain</c><00:15:20.059><c> the</c><00:15:20.239><c> response</c><00:15:20.600><c> body</c>

00:15:20.829 --> 00:15:20.839 align:start position:0%
buffers that contain the response body
 

00:15:20.839 --> 00:15:23.679 align:start position:0%
buffers that contain the response body
bytes<00:15:21.170><c> they</c><00:15:22.160><c> all</c><00:15:22.309><c> get</c><00:15:22.489><c> accumulated</c><00:15:22.939><c> and</c><00:15:23.449><c> then</c>

00:15:23.679 --> 00:15:23.689 align:start position:0%
bytes they all get accumulated and then
 

00:15:23.689 --> 00:15:24.400 align:start position:0%
bytes they all get accumulated and then
in<00:15:23.839><c> oncomplete</c>

00:15:24.400 --> 00:15:24.410 align:start position:0%
in oncomplete
 

00:15:24.410 --> 00:15:27.789 align:start position:0%
in oncomplete
they<00:15:25.220><c> get</c><00:15:25.549><c> converted</c><00:15:25.759><c> to</c><00:15:26.149><c> a</c><00:15:26.179><c> string</c><00:15:26.649><c> and</c><00:15:27.649><c> their</c>

00:15:27.789 --> 00:15:27.799 align:start position:0%
they get converted to a string and their
 

00:15:27.799 --> 00:15:30.369 align:start position:0%
they get converted to a string and their
string<00:15:28.100><c> in</c><00:15:28.220><c> this</c><00:15:28.339><c> case</c><00:15:28.579><c> some</c><00:15:28.879><c> XML</c><00:15:29.209><c> that</c><00:15:29.660><c> are</c>

00:15:30.369 --> 00:15:30.379 align:start position:0%
string in this case some XML that are
 

00:15:30.379 --> 00:15:36.220 align:start position:0%
string in this case some XML that are
very<00:15:30.559><c> a</c><00:15:30.619><c> very</c><00:15:30.860><c> long</c><00:15:31.100><c> line</c><00:15:34.660><c> okay</c><00:15:35.660><c> so</c><00:15:35.720><c> now</c><00:15:35.989><c> we've</c>

00:15:36.220 --> 00:15:36.230 align:start position:0%
very a very long line okay so now we've
 

00:15:36.230 --> 00:15:39.159 align:start position:0%
very a very long line okay so now we've
seen<00:15:36.499><c> how</c><00:15:36.769><c> to</c><00:15:36.949><c> write</c><00:15:37.249><c> a</c><00:15:37.279><c> custom</c><00:15:38.169><c> body</c>

00:15:39.159 --> 00:15:39.169 align:start position:0%
seen how to write a custom body
 

00:15:39.169 --> 00:15:42.039 align:start position:0%
seen how to write a custom body
subscriber<00:15:39.829><c> that</c><00:15:40.339><c> converts</c><00:15:40.730><c> the</c><00:15:41.049><c> response</c>

00:15:42.039 --> 00:15:42.049 align:start position:0%
subscriber that converts the response
 

00:15:42.049 --> 00:15:45.280 align:start position:0%
subscriber that converts the response
body<00:15:42.230><c> bytes</c><00:15:42.559><c> into</c><00:15:42.860><c> a</c><00:15:42.919><c> string</c><00:15:43.629><c> what</c><00:15:44.629><c> if</c><00:15:44.869><c> we</c><00:15:45.049><c> had</c>

00:15:45.280 --> 00:15:45.290 align:start position:0%
body bytes into a string what if we had
 

00:15:45.290 --> 00:15:48.850 align:start position:0%
body bytes into a string what if we had
a<00:15:45.619><c> flow</c><00:15:46.100><c> subscriber</c><00:15:46.669><c> to</c><00:15:47.389><c> an</c><00:15:47.480><c> existing</c><00:15:47.989><c> low</c>

00:15:48.850 --> 00:15:48.860 align:start position:0%
a flow subscriber to an existing low
 

00:15:48.860 --> 00:15:58.140 align:start position:0%
a flow subscriber to an existing low
subscriber

00:15:58.140 --> 00:15:58.150 align:start position:0%
 
 

00:15:58.150 --> 00:16:00.640 align:start position:0%
 
and<00:15:59.150><c> we</c><00:15:59.210><c> wanted</c><00:15:59.480><c> to</c><00:15:59.540><c> use</c><00:15:59.630><c> that</c><00:15:59.900><c> with</c><00:16:00.020><c> the</c><00:16:00.080><c> HTTP</c>

00:16:00.640 --> 00:16:00.650 align:start position:0%
and we wanted to use that with the HTTP
 

00:16:00.650 --> 00:16:03.790 align:start position:0%
and we wanted to use that with the HTTP
clients<00:16:01.100><c> the</c><00:16:02.060><c> HTTP</c><00:16:02.720><c> client</c><00:16:03.110><c> only</c><00:16:03.380><c> works</c><00:16:03.620><c> with</c>

00:16:03.790 --> 00:16:03.800 align:start position:0%
clients the HTTP client only works with
 

00:16:03.800 --> 00:16:07.330 align:start position:0%
clients the HTTP client only works with
buddy<00:16:04.130><c> subscribers</c><00:16:05.470><c> so</c><00:16:06.470><c> let's</c><00:16:06.920><c> see</c><00:16:07.100><c> how</c><00:16:07.220><c> we</c>

00:16:07.330 --> 00:16:07.340 align:start position:0%
buddy subscribers so let's see how we
 

00:16:07.340 --> 00:16:10.720 align:start position:0%
buddy subscribers so let's see how we
can<00:16:07.520><c> make</c><00:16:07.700><c> that</c><00:16:07.820><c> work</c><00:16:08.530><c> so</c><00:16:09.530><c> first</c><00:16:09.800><c> of</c><00:16:09.980><c> all</c><00:16:10.100><c> the</c>

00:16:10.720 --> 00:16:10.730 align:start position:0%
can make that work so first of all the
 

00:16:10.730 --> 00:16:12.190 align:start position:0%
can make that work so first of all the
flow<00:16:10.910><c> subscriber</c><00:16:11.360><c> doesn't</c><00:16:11.660><c> have</c><00:16:11.750><c> a</c><00:16:11.780><c> get</c><00:16:11.990><c> buddy</c>

00:16:12.190 --> 00:16:12.200 align:start position:0%
flow subscriber doesn't have a get buddy
 

00:16:12.200 --> 00:16:15.280 align:start position:0%
flow subscriber doesn't have a get buddy
method<00:16:13.150><c> and</c><00:16:14.150><c> it</c><00:16:14.390><c> also</c><00:16:14.570><c> doesn't</c><00:16:14.960><c> have</c><00:16:15.020><c> a</c><00:16:15.110><c> buddy</c>

00:16:15.280 --> 00:16:15.290 align:start position:0%
method and it also doesn't have a buddy
 

00:16:15.290 --> 00:16:19.180 align:start position:0%
method and it also doesn't have a buddy
CF<00:16:16.570><c> for</c><00:16:17.570><c> simplicity</c><00:16:18.170><c> let's</c><00:16:18.620><c> just</c><00:16:18.680><c> print</c><00:16:19.070><c> out</c>

00:16:19.180 --> 00:16:19.190 align:start position:0%
CF for simplicity let's just print out
 

00:16:19.190 --> 00:16:25.450 align:start position:0%
CF for simplicity let's just print out
the<00:16:19.250><c> error</c><00:16:19.580><c> if</c><00:16:19.910><c> one</c><00:16:20.120><c> were</c><00:16:20.270><c> to</c><00:16:20.330><c> occur</c><00:16:20.780><c> I</c><00:16:24.460><c> can</c>

00:16:25.450 --> 00:16:25.460 align:start position:0%
the error if one were to occur I can
 

00:16:25.460 --> 00:16:28.140 align:start position:0%
the error if one were to occur I can
remove<00:16:25.700><c> this</c><00:16:25.970><c> here</c>

00:16:28.140 --> 00:16:28.150 align:start position:0%
remove this here
 

00:16:28.150 --> 00:16:31.240 align:start position:0%
remove this here
so<00:16:29.150><c> the</c><00:16:29.390><c> flow</c><00:16:29.660><c> subscriber</c><00:16:30.170><c> still</c><00:16:30.470><c> needs</c><00:16:30.770><c> some</c>

00:16:31.240 --> 00:16:31.250 align:start position:0%
so the flow subscriber still needs some
 

00:16:31.250 --> 00:16:36.760 align:start position:0%
so the flow subscriber still needs some
way<00:16:31.580><c> of</c><00:16:31.910><c> exposing</c><00:16:32.390><c> its</c><00:16:32.870><c> data</c><00:16:35.380><c> so</c><00:16:36.380><c> let's</c><00:16:36.560><c> give</c>

00:16:36.760 --> 00:16:36.770 align:start position:0%
way of exposing its data so let's give
 

00:16:36.770 --> 00:16:41.770 align:start position:0%
way of exposing its data so let's give
it<00:16:36.800><c> a</c><00:16:37.010><c> private</c><00:16:37.550><c> field</c><00:16:38.320><c> string</c><00:16:39.820><c> to</c><00:16:40.820><c> hold</c><00:16:41.540><c> its</c>

00:16:41.770 --> 00:16:41.780 align:start position:0%
it a private field string to hold its
 

00:16:41.780 --> 00:16:51.400 align:start position:0%
it a private field string to hold its
body<00:16:42.010><c> and</c><00:16:43.010><c> an</c><00:16:43.160><c> accessor</c><00:16:49.480><c> get</c><00:16:50.480><c> body</c><00:16:50.750><c> to</c><00:16:51.110><c> return</c>

00:16:51.400 --> 00:16:51.410 align:start position:0%
body and an accessor get body to return
 

00:16:51.410 --> 00:16:59.440 align:start position:0%
body and an accessor get body to return
the<00:16:51.560><c> body</c><00:16:56.320><c> okay</c><00:16:57.320><c> in</c><00:16:57.530><c> the</c><00:16:57.590><c> uncomplete</c><00:16:58.100><c> now</c><00:16:58.450><c> we</c>

00:16:59.440 --> 00:16:59.450 align:start position:0%
the body okay in the uncomplete now we
 

00:16:59.450 --> 00:17:07.480 align:start position:0%
the body okay in the uncomplete now we
need<00:16:59.600><c> to</c><00:16:59.750><c> set</c><00:16:59.990><c> the</c><00:17:00.770><c> body</c><00:17:00.950><c> field</c><00:17:04.810><c> okay</c><00:17:06.370><c> so</c><00:17:07.370><c> now</c>

00:17:07.480 --> 00:17:07.490 align:start position:0%
need to set the body field okay so now
 

00:17:07.490 --> 00:17:09.730 align:start position:0%
need to set the body field okay so now
we<00:17:07.550><c> are</c><00:17:07.670><c> string</c><00:17:08.090><c> subscriber</c><00:17:08.630><c> which</c><00:17:08.930><c> is</c><00:17:09.200><c> an</c>

00:17:09.730 --> 00:17:09.740 align:start position:0%
we are string subscriber which is an
 

00:17:09.740 --> 00:17:12.250 align:start position:0%
we are string subscriber which is an
implementation<00:17:10.040><c> of</c><00:17:10.490><c> a</c><00:17:10.610><c> flow</c><00:17:10.850><c> subscriber</c><00:17:11.360><c> how</c>

00:17:12.250 --> 00:17:12.260 align:start position:0%
implementation of a flow subscriber how
 

00:17:12.260 --> 00:17:14.490 align:start position:0%
implementation of a flow subscriber how
can<00:17:12.470><c> we</c><00:17:12.560><c> use</c><00:17:12.680><c> this</c><00:17:12.830><c> with</c><00:17:13.040><c> the</c><00:17:13.100><c> HTTP</c><00:17:13.790><c> client</c>

00:17:14.490 --> 00:17:14.500 align:start position:0%
can we use this with the HTTP client
 

00:17:14.500 --> 00:17:18.360 align:start position:0%
can we use this with the HTTP client
well<00:17:15.500><c> the</c><00:17:15.590><c> HTTP</c><00:17:16.340><c> client</c><00:17:16.790><c> provides</c>

00:17:18.360 --> 00:17:18.370 align:start position:0%
well the HTTP client provides
 

00:17:18.370 --> 00:17:21.220 align:start position:0%
well the HTTP client provides
convenience<00:17:19.370><c> static</c><00:17:20.030><c> factory</c><00:17:20.180><c> methods</c><00:17:20.720><c> that</c>

00:17:21.220 --> 00:17:21.230 align:start position:0%
convenience static factory methods that
 

00:17:21.230 --> 00:17:23.440 align:start position:0%
convenience static factory methods that
adapt<00:17:21.530><c> between</c><00:17:22.070><c> flow</c><00:17:22.340><c> subscriber</c><00:17:22.880><c> and</c><00:17:23.180><c> body</c>

00:17:23.440 --> 00:17:23.450 align:start position:0%
adapt between flow subscriber and body
 

00:17:23.450 --> 00:17:38.160 align:start position:0%
adapt between flow subscriber and body
subscriber<00:17:23.960><c> so</c><00:17:24.920><c> let's</c><00:17:25.100><c> use</c><00:17:25.280><c> one</c><00:17:25.460><c> of</c><00:17:25.490><c> those</c>

00:17:38.160 --> 00:17:38.170 align:start position:0%
 
 

00:17:38.170 --> 00:17:40.900 align:start position:0%
 
so<00:17:39.170><c> there's</c><00:17:39.320><c> two</c><00:17:39.500><c> variants</c><00:17:39.920><c> of</c><00:17:40.010><c> the</c><00:17:40.580><c> from</c>

00:17:40.900 --> 00:17:40.910 align:start position:0%
so there's two variants of the from
 

00:17:40.910 --> 00:17:44.440 align:start position:0%
so there's two variants of the from
subscriber<00:17:41.390><c> adapter</c><00:17:41.980><c> the</c><00:17:42.980><c> first</c><00:17:43.280><c> takes</c><00:17:44.180><c> just</c>

00:17:44.440 --> 00:17:44.450 align:start position:0%
subscriber adapter the first takes just
 

00:17:44.450 --> 00:17:47.770 align:start position:0%
subscriber adapter the first takes just
a<00:17:44.600><c> subscriber</c><00:17:45.050><c> and</c><00:17:45.670><c> the</c><00:17:46.670><c> other</c><00:17:46.760><c> takes</c><00:17:47.510><c> a</c>

00:17:47.770 --> 00:17:47.780 align:start position:0%
a subscriber and the other takes a
 

00:17:47.780 --> 00:17:50.160 align:start position:0%
a subscriber and the other takes a
subscriber<00:17:48.380><c> with</c><00:17:48.800><c> a</c><00:17:49.100><c> finisher</c><00:17:49.730><c> function</c>

00:17:50.160 --> 00:17:50.170 align:start position:0%
subscriber with a finisher function
 

00:17:50.170 --> 00:17:52.660 align:start position:0%
subscriber with a finisher function
we're<00:17:51.170><c> going</c><00:17:51.200><c> to</c><00:17:51.350><c> use</c><00:17:51.500><c> the</c><00:17:51.650><c> latter</c><00:17:51.830><c> because</c><00:17:52.520><c> we</c>

00:17:52.660 --> 00:17:52.670 align:start position:0%
we're going to use the latter because we
 

00:17:52.670 --> 00:17:55.390 align:start position:0%
we're going to use the latter because we
need<00:17:52.820><c> to</c><00:17:52.910><c> extract</c><00:17:53.360><c> the</c><00:17:53.450><c> data</c><00:17:53.600><c> from</c><00:17:54.100><c> the</c><00:17:55.100><c> string</c>

00:17:55.390 --> 00:17:55.400 align:start position:0%
need to extract the data from the string
 

00:17:55.400 --> 00:17:59.170 align:start position:0%
need to extract the data from the string
subscriber<00:17:55.880><c> and</c><00:17:56.360><c> to</c><00:17:56.570><c> complete</c><00:17:56.930><c> the</c><00:17:58.180><c> HTTP</c>

00:17:59.170 --> 00:17:59.180 align:start position:0%
subscriber and to complete the HTTP
 

00:17:59.180 --> 00:18:04.000 align:start position:0%
subscriber and to complete the HTTP
computable<00:18:00.050><c> future</c><00:18:00.350><c> with</c><00:18:00.530><c> that</c><00:18:00.680><c> value</c><00:18:03.010><c> so</c>

00:18:04.000 --> 00:18:04.010 align:start position:0%
computable future with that value so
 

00:18:04.010 --> 00:18:07.210 align:start position:0%
computable future with that value so
your<00:18:04.220><c> new</c><00:18:04.340><c> string</c><00:18:04.820><c> subscriber</c><00:18:05.620><c> or</c><00:18:06.620><c> use</c><00:18:06.890><c> the</c>

00:18:07.210 --> 00:18:07.220 align:start position:0%
your new string subscriber or use the
 

00:18:07.220 --> 00:18:10.600 align:start position:0%
your new string subscriber or use the
string<00:18:07.640><c> subscriber</c><00:18:08.300><c> get</c><00:18:08.600><c> body</c><00:18:08.780><c> methods</c><00:18:09.610><c> to</c>

00:18:10.600 --> 00:18:10.610 align:start position:0%
string subscriber get body methods to
 

00:18:10.610 --> 00:18:11.800 align:start position:0%
string subscriber get body methods to
extract<00:18:10.700><c> the</c><00:18:11.090><c> data</c><00:18:11.240><c> from</c><00:18:11.390><c> the</c><00:18:11.630><c> flow</c>

00:18:11.800 --> 00:18:11.810 align:start position:0%
extract the data from the flow
 

00:18:11.810 --> 00:18:17.440 align:start position:0%
extract the data from the flow
subscriber<00:18:15.520><c> instead</c><00:18:16.520><c> of</c><00:18:16.610><c> using</c><00:18:16.790><c> a</c><00:18:16.970><c> new</c><00:18:17.090><c> string</c>

00:18:17.440 --> 00:18:17.450 align:start position:0%
subscriber instead of using a new string
 

00:18:17.450 --> 00:18:21.130 align:start position:0%
subscriber instead of using a new string
subscriber<00:18:17.960><c> here</c><00:18:18.260><c> we</c><00:18:19.160><c> can</c><00:18:19.400><c> use</c><00:18:19.610><c> the</c><00:18:20.140><c> body</c>

00:18:21.130 --> 00:18:21.140 align:start position:0%
subscriber here we can use the body
 

00:18:21.140 --> 00:18:31.540 align:start position:0%
subscriber here we can use the body
subscriber<00:18:22.180><c> okay</c><00:18:23.180><c> let's</c><00:18:23.420><c> run</c><00:18:23.570><c> that</c>

00:18:31.540 --> 00:18:31.550 align:start position:0%
 
 

00:18:31.550 --> 00:18:33.340 align:start position:0%
 
again<00:18:32.150><c> we</c><00:18:32.330><c> can</c><00:18:32.450><c> see</c><00:18:32.600><c> all</c><00:18:32.720><c> that</c><00:18:32.840><c> on</c><00:18:32.990><c> next</c>

00:18:33.340 --> 00:18:33.350 align:start position:0%
again we can see all that on next
 

00:18:33.350 --> 00:18:37.060 align:start position:0%
again we can see all that on next
implications<00:18:33.950><c> and</c><00:18:34.270><c> we</c><00:18:35.270><c> have</c><00:18:35.570><c> the</c><00:18:36.070><c> response</c>

00:18:37.060 --> 00:18:37.070 align:start position:0%
implications and we have the response
 

00:18:37.070 --> 00:18:40.570 align:start position:0%
implications and we have the response
body<00:18:37.310><c> as</c><00:18:37.460><c> a</c><00:18:37.490><c> string</c><00:18:37.760><c> again</c><00:18:39.280><c> we</c><00:18:40.280><c> can</c><00:18:40.430><c> simplify</c>

00:18:40.570 --> 00:18:40.580 align:start position:0%
body as a string again we can simplify
 

00:18:40.580 --> 00:18:43.240 align:start position:0%
body as a string again we can simplify
this<00:18:40.940><c> even</c><00:18:41.210><c> further</c><00:18:41.680><c> instead</c><00:18:42.680><c> of</c><00:18:42.830><c> using</c><00:18:43.070><c> a</c>

00:18:43.240 --> 00:18:43.250 align:start position:0%
this even further instead of using a
 

00:18:43.250 --> 00:18:45.280 align:start position:0%
this even further instead of using a
body<00:18:43.400><c> subscriber</c><00:18:44.000><c> directly</c><00:18:44.510><c> the</c><00:18:45.050><c> body</c>

00:18:45.280 --> 00:18:45.290 align:start position:0%
body subscriber directly the body
 

00:18:45.290 --> 00:18:49.390 align:start position:0%
body subscriber directly the body
handlers<00:18:45.860><c> and</c><00:18:46.610><c> body</c><00:18:46.910><c> handler</c><00:18:47.500><c> classes</c><00:18:48.500><c> expose</c>

00:18:49.390 --> 00:18:49.400 align:start position:0%
handlers and body handler classes expose
 

00:18:49.400 --> 00:18:51.670 align:start position:0%
handlers and body handler classes expose
factory<00:18:49.790><c> methods</c><00:18:50.120><c> of</c><00:18:50.540><c> similar</c><00:18:50.930><c> names</c><00:18:51.140><c> so</c>

00:18:51.670 --> 00:18:51.680 align:start position:0%
factory methods of similar names so
 

00:18:51.680 --> 00:19:05.310 align:start position:0%
factory methods of similar names so
let's<00:18:51.860><c> use</c><00:18:52.040><c> one</c><00:18:52.190><c> of</c><00:18:52.220><c> those</c><00:18:52.430><c> instead</c>

00:19:05.310 --> 00:19:05.320 align:start position:0%
 
 

00:19:05.320 --> 00:19:07.450 align:start position:0%
 
okay<00:19:06.320><c> so</c><00:19:06.380><c> we</c><00:19:06.559><c> don't</c><00:19:06.740><c> need</c><00:19:06.830><c> to</c><00:19:06.890><c> land</c><00:19:07.130><c> here</c>

00:19:07.450 --> 00:19:07.460 align:start position:0%
okay so we don't need to land here
 

00:19:07.460 --> 00:19:09.610 align:start position:0%
okay so we don't need to land here
anymore<00:19:08.090><c> should</c><00:19:08.899><c> we</c><00:19:08.960><c> only</c><00:19:09.110><c> just</c><00:19:09.350><c> a</c><00:19:09.409><c> buddy</c>

00:19:09.610 --> 00:19:09.620 align:start position:0%
anymore should we only just a buddy
 

00:19:09.620 --> 00:19:12.639 align:start position:0%
anymore should we only just a buddy
handler<00:19:10.039><c> directly</c><00:19:10.929><c> so</c><00:19:11.929><c> that's</c><00:19:12.110><c> really</c><00:19:12.350><c> not</c><00:19:12.470><c> to</c>

00:19:12.639 --> 00:19:12.649 align:start position:0%
handler directly so that's really not to
 

00:19:12.649 --> 00:19:19.899 align:start position:0%
handler directly so that's really not to
make<00:19:12.799><c> sure</c><00:19:12.950><c> it</c><00:19:13.070><c> works</c><00:19:18.460><c> okay</c><00:19:19.460><c> great</c>

00:19:19.899 --> 00:19:19.909 align:start position:0%
make sure it works okay great
 

00:19:19.909 --> 00:19:23.680 align:start position:0%
make sure it works okay great
same<00:19:20.330><c> output</c><00:19:20.890><c> so</c><00:19:21.890><c> we've</c><00:19:22.130><c> seen</c><00:19:22.340><c> how</c><00:19:22.399><c> to</c><00:19:22.700><c> write</c><00:19:23.659><c> a</c>

00:19:23.680 --> 00:19:23.690 align:start position:0%
same output so we've seen how to write a
 

00:19:23.690 --> 00:19:26.710 align:start position:0%
same output so we've seen how to write a
custom<00:19:24.020><c> body</c><00:19:24.679><c> Handler</c><00:19:25.070><c> and</c><00:19:25.450><c> also</c><00:19:26.450><c> how</c><00:19:26.659><c> to</c>

00:19:26.710 --> 00:19:26.720 align:start position:0%
custom body Handler and also how to
 

00:19:26.720 --> 00:19:32.919 align:start position:0%
custom body Handler and also how to
adapt<00:19:27.200><c> a</c><00:19:27.500><c> flow</c><00:19:27.890><c> subscriber</c><00:19:28.720><c> to</c><00:19:29.720><c> the</c><00:19:29.960><c> HTTP</c><00:19:31.929><c> body</c>

00:19:32.919 --> 00:19:32.929 align:start position:0%
adapt a flow subscriber to the HTTP body
 

00:19:32.929 --> 00:19:38.320 align:start position:0%
adapt a flow subscriber to the HTTP body
handler<00:19:33.350><c> or</c><00:19:33.500><c> body</c><00:19:33.799><c> subscriber</c><00:19:37.120><c> there</c><00:19:38.120><c> are</c><00:19:38.299><c> a</c>

00:19:38.320 --> 00:19:38.330 align:start position:0%
handler or body subscriber there are a
 

00:19:38.330 --> 00:19:40.389 align:start position:0%
handler or body subscriber there are a
number<00:19:38.659><c> of</c><00:19:38.809><c> adapter</c><00:19:39.320><c> methods</c><00:19:39.710><c> that</c><00:19:40.039><c> support</c>

00:19:40.389 --> 00:19:40.399 align:start position:0%
number of adapter methods that support
 

00:19:40.399 --> 00:19:42.340 align:start position:0%
number of adapter methods that support
inter<00:19:40.730><c> operation</c><00:19:41.270><c> between</c><00:19:41.480><c> regular</c><00:19:42.080><c> flow</c>

00:19:42.340 --> 00:19:42.350 align:start position:0%
inter operation between regular flow
 

00:19:42.350 --> 00:19:44.529 align:start position:0%
inter operation between regular flow
types<00:19:42.620><c> like</c><00:19:43.370><c> slow</c><00:19:43.640><c> publisher</c><00:19:44.120><c> and</c><00:19:44.330><c> slow</c>

00:19:44.529 --> 00:19:44.539 align:start position:0%
types like slow publisher and slow
 

00:19:44.539 --> 00:19:47.350 align:start position:0%
types like slow publisher and slow
subscriber<00:19:45.320><c> and</c><00:19:45.620><c> their</c><00:19:46.190><c> HTTP</c><00:19:46.909><c> client</c>

00:19:47.350 --> 00:19:47.360 align:start position:0%
subscriber and their HTTP client
 

00:19:47.360 --> 00:19:50.260 align:start position:0%
subscriber and their HTTP client
equivalents<00:19:48.250><c> the</c><00:19:49.250><c> one</c><00:19:49.399><c> we</c><00:19:49.520><c> just</c><00:19:49.549><c> seen</c><00:19:50.000><c> being</c>

00:19:50.260 --> 00:19:50.270 align:start position:0%
equivalents the one we just seen being
 

00:19:50.270 --> 00:19:52.810 align:start position:0%
equivalents the one we just seen being
used<00:19:50.510><c> in</c><00:19:50.720><c> a</c><00:19:50.779><c> demo</c><00:19:50.990><c> from</c><00:19:51.409><c> subscriber</c><00:19:52.010><c> has</c><00:19:52.549><c> two</c>

00:19:52.810 --> 00:19:52.820 align:start position:0%
used in a demo from subscriber has two
 

00:19:52.820 --> 00:19:55.870 align:start position:0%
used in a demo from subscriber has two
variants<00:19:53.390><c> the</c><00:19:54.320><c> first</c><00:19:54.559><c> just</c><00:19:54.890><c> accepts</c><00:19:55.340><c> a</c><00:19:55.490><c> flow</c>

00:19:55.870 --> 00:19:55.880 align:start position:0%
variants the first just accepts a flow
 

00:19:55.880 --> 00:19:58.149 align:start position:0%
variants the first just accepts a flow
subscriber<00:19:56.390><c> and</c><00:19:56.690><c> returns</c><00:19:57.320><c> a</c><00:19:57.470><c> body</c><00:19:57.649><c> subscriber</c>

00:19:58.149 --> 00:19:58.159 align:start position:0%
subscriber and returns a body subscriber
 

00:19:58.159 --> 00:20:01.419 align:start position:0%
subscriber and returns a body subscriber
avoid<00:19:58.690><c> in</c><00:19:59.690><c> this</c><00:19:59.990><c> case</c><00:20:00.260><c> the</c><00:20:00.559><c> response</c><00:20:00.950><c> body</c><00:20:01.159><c> is</c>

00:20:01.419 --> 00:20:01.429 align:start position:0%
avoid in this case the response body is
 

00:20:01.429 --> 00:20:03.190 align:start position:0%
avoid in this case the response body is
not<00:20:01.669><c> being</c><00:20:01.970><c> made</c><00:20:02.210><c> available</c><00:20:02.360><c> through</c><00:20:03.049><c> the</c>

00:20:03.190 --> 00:20:03.200 align:start position:0%
not being made available through the
 

00:20:03.200 --> 00:20:05.980 align:start position:0%
not being made available through the
HTTP<00:20:03.830><c> response</c><00:20:04.090><c> but</c><00:20:05.090><c> instead</c><00:20:05.419><c> through</c><00:20:05.809><c> some</c>

00:20:05.980 --> 00:20:05.990 align:start position:0%
HTTP response but instead through some
 

00:20:05.990 --> 00:20:08.200 align:start position:0%
HTTP response but instead through some
other<00:20:06.200><c> mechanism</c><00:20:06.860><c> like</c><00:20:07.549><c> an</c><00:20:07.760><c> entry</c><00:20:08.090><c> in</c><00:20:08.149><c> the</c>

00:20:08.200 --> 00:20:08.210 align:start position:0%
other mechanism like an entry in the
 

00:20:08.210 --> 00:20:11.230 align:start position:0%
other mechanism like an entry in the
database<00:20:09.010><c> the</c><00:20:10.010><c> second</c><00:20:10.429><c> variant</c><00:20:10.760><c> supports</c><00:20:11.149><c> a</c>

00:20:11.230 --> 00:20:11.240 align:start position:0%
database the second variant supports a
 

00:20:11.240 --> 00:20:13.120 align:start position:0%
database the second variant supports a
finisher<00:20:11.600><c> function</c><00:20:12.020><c> that</c><00:20:12.529><c> will</c><00:20:12.710><c> be</c><00:20:12.740><c> applied</c>

00:20:13.120 --> 00:20:13.130 align:start position:0%
finisher function that will be applied
 

00:20:13.130 --> 00:20:15.159 align:start position:0%
finisher function that will be applied
after<00:20:13.460><c> the</c><00:20:13.669><c> death</c><00:20:14.029><c> subscriber</c><00:20:14.510><c> has</c><00:20:14.779><c> completed</c>

00:20:15.159 --> 00:20:15.169 align:start position:0%
after the death subscriber has completed
 

00:20:15.169 --> 00:20:18.010 align:start position:0%
after the death subscriber has completed
and<00:20:15.730><c> we</c><00:20:16.730><c> seen</c><00:20:16.970><c> an</c><00:20:17.149><c> example</c><00:20:17.600><c> of</c><00:20:17.659><c> this</c><00:20:17.779><c> in</c><00:20:17.929><c> the</c>

00:20:18.010 --> 00:20:18.020 align:start position:0%
and we seen an example of this in the
 

00:20:18.020 --> 00:20:21.100 align:start position:0%
and we seen an example of this in the
demo<00:20:18.730><c> there</c><00:20:19.730><c> are</c><00:20:19.880><c> also</c><00:20:20.090><c> a</c><00:20:20.330><c> similar</c><00:20:20.779><c> pair</c><00:20:20.990><c> of</c>

00:20:21.100 --> 00:20:21.110 align:start position:0%
demo there are also a similar pair of
 

00:20:21.110 --> 00:20:23.590 align:start position:0%
demo there are also a similar pair of
methods<00:20:21.470><c> from</c><00:20:21.890><c> Lion</c><00:20:22.220><c> subscriber</c><00:20:22.760><c> that</c>

00:20:23.590 --> 00:20:23.600 align:start position:0%
methods from Lion subscriber that
 

00:20:23.600 --> 00:20:25.990 align:start position:0%
methods from Lion subscriber that
interoperate<00:20:24.320><c> with</c><00:20:24.350><c> flow</c><00:20:25.130><c> subscribers</c><00:20:25.820><c> of</c>

00:20:25.990 --> 00:20:26.000 align:start position:0%
interoperate with flow subscribers of
 

00:20:26.000 --> 00:20:29.169 align:start position:0%
interoperate with flow subscribers of
string<00:20:26.440><c> where</c><00:20:27.440><c> the</c><00:20:27.529><c> response</c><00:20:27.919><c> body</c><00:20:28.190><c> data</c><00:20:28.909><c> is</c>

00:20:29.169 --> 00:20:29.179 align:start position:0%
string where the response body data is
 

00:20:29.179 --> 00:20:31.620 align:start position:0%
string where the response body data is
converted<00:20:29.899><c> to</c><00:20:29.929><c> a</c><00:20:30.049><c> flow</c><00:20:30.380><c> of</c><00:20:30.409><c> string</c><00:20:30.890><c> lines</c><00:20:31.220><c> and</c>

00:20:31.620 --> 00:20:31.630 align:start position:0%
converted to a flow of string lines and
 

00:20:31.630 --> 00:20:35.190 align:start position:0%
converted to a flow of string lines and
sent<00:20:32.630><c> to</c><00:20:32.870><c> the</c><00:20:32.960><c> flow</c><00:20:33.140><c> subscriber</c><00:20:33.679><c> line</c><00:20:34.370><c> by</c><00:20:34.640><c> line</c>

00:20:35.190 --> 00:20:35.200 align:start position:0%
sent to the flow subscriber line by line
 

00:20:35.200 --> 00:20:37.269 align:start position:0%
sent to the flow subscriber line by line
this<00:20:36.200><c> is</c><00:20:36.260><c> somewhat</c><00:20:36.740><c> analogous</c><00:20:37.100><c> to</c>

00:20:37.269 --> 00:20:37.279 align:start position:0%
this is somewhat analogous to
 

00:20:37.279 --> 00:20:40.149 align:start position:0%
this is somewhat analogous to
bufferedreader<00:20:38.029><c> read</c><00:20:38.600><c> lines</c><00:20:38.840><c> or</c><00:20:39.140><c> the</c><00:20:39.860><c> niño</c>

00:20:40.149 --> 00:20:40.159 align:start position:0%
bufferedreader read lines or the niño
 

00:20:40.159 --> 00:20:43.000 align:start position:0%
bufferedreader read lines or the niño
files<00:20:40.580><c> Lions</c><00:20:41.210><c> method</c><00:20:41.570><c> that</c><00:20:42.110><c> returns</c><00:20:42.500><c> a</c><00:20:42.679><c> stream</c>

00:20:43.000 --> 00:20:43.010 align:start position:0%
files Lions method that returns a stream
 

00:20:43.010 --> 00:20:44.669 align:start position:0%
files Lions method that returns a stream
of<00:20:43.190><c> lines</c><00:20:43.520><c> in</c><00:20:43.850><c> a</c><00:20:44.000><c> file</c>

00:20:44.669 --> 00:20:44.679 align:start position:0%
of lines in a file
 

00:20:44.679 --> 00:20:47.289 align:start position:0%
of lines in a file
there<00:20:45.679><c> are</c><00:20:45.799><c> also</c><00:20:45.950><c> equivalent</c><00:20:46.370><c> adapters</c><00:20:47.059><c> on</c>

00:20:47.289 --> 00:20:47.299 align:start position:0%
there are also equivalent adapters on
 

00:20:47.299 --> 00:20:52.240 align:start position:0%
there are also equivalent adapters on
the<00:20:47.390><c> sending</c><00:20:47.750><c> side</c><00:20:47.990><c> for</c><00:20:48.440><c> request</c><00:20:48.770><c> body</c><00:20:51.250><c> to</c>

00:20:52.240 --> 00:20:52.250 align:start position:0%
the sending side for request body to
 

00:20:52.250 --> 00:20:55.539 align:start position:0%
the sending side for request body to
summarize<00:20:52.690><c> the</c><00:20:53.690><c> HTTP</c><00:20:54.440><c> client</c><00:20:54.890><c> treats</c><00:20:55.340><c> boat</c>

00:20:55.539 --> 00:20:55.549 align:start position:0%
summarize the HTTP client treats boat
 

00:20:55.549 --> 00:20:57.519 align:start position:0%
summarize the HTTP client treats boat
requests<00:20:56.120><c> and</c><00:20:56.270><c> response</c><00:20:56.570><c> body</c><00:20:56.840><c> as</c><00:20:57.110><c> reactive</c>

00:20:57.519 --> 00:20:57.529 align:start position:0%
requests and response body as reactive
 

00:20:57.529 --> 00:20:59.950 align:start position:0%
requests and response body as reactive
streams<00:20:57.880><c> so</c><00:20:58.880><c> gets</c><00:20:59.059><c> the</c><00:20:59.210><c> benefits</c><00:20:59.659><c> of</c>

00:20:59.950 --> 00:20:59.960 align:start position:0%
streams so gets the benefits of
 

00:20:59.960 --> 00:21:01.720 align:start position:0%
streams so gets the benefits of
asynchronous<00:21:00.620><c> programming</c><00:21:01.070><c> with</c>

00:21:01.720 --> 00:21:01.730 align:start position:0%
asynchronous programming with
 

00:21:01.730 --> 00:21:03.269 align:start position:0%
asynchronous programming with
non-blocking<00:21:02.270><c> backpressure</c>

00:21:03.269 --> 00:21:03.279 align:start position:0%
non-blocking backpressure
 

00:21:03.279 --> 00:21:05.919 align:start position:0%
non-blocking backpressure
we<00:21:04.279><c> seen</c><00:21:04.490><c> how</c><00:21:04.669><c> to</c><00:21:04.730><c> write</c><00:21:05.000><c> a</c><00:21:05.179><c> custom</c><00:21:05.450><c> body</c>

00:21:05.919 --> 00:21:05.929 align:start position:0%
we seen how to write a custom body
 

00:21:05.929 --> 00:21:08.649 align:start position:0%
we seen how to write a custom body
subscriber<00:21:07.000><c> implementation</c><00:21:08.000><c> that</c><00:21:08.299><c> behaves</c>

00:21:08.649 --> 00:21:08.659 align:start position:0%
subscriber implementation that behaves
 

00:21:08.659 --> 00:21:10.510 align:start position:0%
subscriber implementation that behaves
similar<00:21:09.140><c> to</c><00:21:09.710><c> the</c><00:21:09.830><c> convenience</c><00:21:10.309><c> body</c>

00:21:10.510 --> 00:21:10.520 align:start position:0%
similar to the convenience body
 

00:21:10.520 --> 00:21:12.639 align:start position:0%
similar to the convenience body
subscriber<00:21:11.120><c> returned</c><00:21:11.510><c> by</c><00:21:11.750><c> body</c><00:21:11.960><c> subscribers</c>

00:21:12.639 --> 00:21:12.649 align:start position:0%
subscriber returned by body subscribers
 

00:21:12.649 --> 00:21:15.350 align:start position:0%
subscriber returned by body subscribers
of<00:21:12.799><c> string</c>

00:21:15.350 --> 00:21:15.360 align:start position:0%
 
 

00:21:15.360 --> 00:21:17.360 align:start position:0%
 
ttp<00:21:15.750><c> client</c><00:21:16.110><c> provides</c><00:21:16.440><c> a</c><00:21:16.559><c> number</c><00:21:16.710><c> of</c><00:21:16.860><c> adapters</c>

00:21:17.360 --> 00:21:17.370 align:start position:0%
ttp client provides a number of adapters
 

00:21:17.370 --> 00:21:19.340 align:start position:0%
ttp client provides a number of adapters
for<00:21:17.400><c> interoperating</c><00:21:18.390><c> with</c><00:21:19.049><c> existing</c>

00:21:19.340 --> 00:21:19.350 align:start position:0%
for interoperating with existing
 

00:21:19.350 --> 00:21:21.200 align:start position:0%
for interoperating with existing
reactive<00:21:20.010><c> streams</c><00:21:20.309><c> publishers</c><00:21:20.970><c> and</c>

00:21:21.200 --> 00:21:21.210 align:start position:0%
reactive streams publishers and
 

00:21:21.210 --> 00:21:26.210 align:start position:0%
reactive streams publishers and
subscribers<00:21:23.840><c> you</c><00:21:24.840><c> can</c><00:21:25.020><c> download</c><00:21:25.260><c> java</c><00:21:25.710><c> 11</c><00:21:26.100><c> now</c>

00:21:26.210 --> 00:21:26.220 align:start position:0%
subscribers you can download java 11 now
 

00:21:26.220 --> 00:21:29.240 align:start position:0%
subscribers you can download java 11 now
at<00:21:26.370><c> this</c><00:21:26.460><c> URL</c><00:21:27.170><c> please</c><00:21:28.170><c> join</c><00:21:28.470><c> us</c><00:21:28.500><c> at</c><00:21:28.830><c> open</c><00:21:29.070><c> JDK</c>

00:21:29.240 --> 00:21:29.250 align:start position:0%
at this URL please join us at open JDK
 

00:21:29.250 --> 00:21:32.360 align:start position:0%
at this URL please join us at open JDK
or<00:21:29.790><c> follow</c><00:21:30.240><c> us</c><00:21:30.390><c> on</c><00:21:30.540><c> Twitter</c><00:21:30.809><c> at</c><00:21:31.130><c> openjdk</c><00:21:32.160><c> or</c>

00:21:32.360 --> 00:21:32.370 align:start position:0%
or follow us on Twitter at openjdk or
 

00:21:32.370 --> 00:21:35.780 align:start position:0%
or follow us on Twitter at openjdk or
hashtag<00:21:33.090><c> Java</c><00:21:33.390><c> 11</c><00:21:33.830><c> my</c><00:21:34.830><c> own</c><00:21:34.950><c> twitter</c><00:21:35.280><c> handle</c><00:21:35.700><c> is</c>

00:21:35.780 --> 00:21:35.790 align:start position:0%
hashtag Java 11 my own twitter handle is
 

00:21:35.790 --> 00:21:43.070 align:start position:0%
hashtag Java 11 my own twitter handle is
at<00:21:36.360><c> checker</c><00:21:36.990><c> 999</c><00:21:41.330><c> oracle</c><00:21:42.330><c> is</c><00:21:42.450><c> the</c><00:21:42.600><c> steward</c><00:21:42.929><c> of</c>

00:21:43.070 --> 00:21:43.080 align:start position:0%
at checker 999 oracle is the steward of
 

00:21:43.080 --> 00:21:44.990 align:start position:0%
at checker 999 oracle is the steward of
java<00:21:43.380><c> providing</c><00:21:44.309><c> a</c><00:21:44.370><c> large</c><00:21:44.580><c> amount</c><00:21:44.910><c> of</c>

00:21:44.990 --> 00:21:45.000 align:start position:0%
java providing a large amount of
 

00:21:45.000 --> 00:21:46.850 align:start position:0%
java providing a large amount of
development<00:21:45.510><c> engineering</c><00:21:45.960><c> funding</c><00:21:46.410><c> for</c><00:21:46.799><c> the</c>

00:21:46.850 --> 00:21:46.860 align:start position:0%
development engineering funding for the
 

00:21:46.860 --> 00:21:50.960 align:start position:0%
development engineering funding for the
Java<00:21:47.100><c> SE</c><00:21:47.460><c> platform</c><00:21:47.970><c> and</c><00:21:48.179><c> open</c><00:21:48.690><c> JDK</c><00:21:49.970><c> oracle</c>

00:21:50.960 --> 00:21:50.970 align:start position:0%
Java SE platform and open JDK oracle
 

00:21:50.970 --> 00:21:53.030 align:start position:0%
Java SE platform and open JDK oracle
provides<00:21:51.270><c> leading</c><00:21:51.780><c> class</c><00:21:51.990><c> premier</c><00:21:52.650><c> support</c>

00:21:53.030 --> 00:21:53.040 align:start position:0%
provides leading class premier support
 

00:21:53.040 --> 00:21:55.880 align:start position:0%
provides leading class premier support
for<00:21:53.580><c> a</c><00:21:53.610><c> low</c><00:21:53.820><c> cost</c><00:21:54.090><c> that's</c><00:21:54.960><c> easy</c><00:21:55.290><c> to</c><00:21:55.530><c> purchase</c>

00:21:55.880 --> 00:21:55.890 align:start position:0%
for a low cost that's easy to purchase
 

00:21:55.890 --> 00:21:58.490 align:start position:0%
for a low cost that's easy to purchase
with<00:21:56.640><c> simple</c><00:21:56.970><c> pricing</c><00:21:57.390><c> tiers</c><00:21:57.690><c> thank</c><00:21:58.200><c> you</c><00:21:58.320><c> for</c>

00:21:58.490 --> 00:21:58.500 align:start position:0%
with simple pricing tiers thank you for
 

00:21:58.500 --> 00:22:00.030 align:start position:0%
with simple pricing tiers thank you for
watching

00:22:00.030 --> 00:22:00.040 align:start position:0%
watching
 

00:22:00.040 --> 00:22:04.190 align:start position:0%
watching
[Music]

