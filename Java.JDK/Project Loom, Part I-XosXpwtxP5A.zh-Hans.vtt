WEBVTT
Kind: captions
Language: zh-Hans

00:00:01.460 --> 00:00:13.190
看到快活好吧，所以我是罗恩

00:00:10.679 --> 00:00:15.240
 Project Loon的Pressler技术主管

00:00:13.190 --> 00:00:19.439
显然我会在谈论

00:00:15.240 --> 00:00:23.580
今天，还有一点关于如何结束

00:00:19.439 --> 00:00:26.189
 JDK项目正在发生

00:00:23.580 --> 00:00:28.260
我说这个演讲大约一年

00:00:26.189 --> 00:00:30.810
这些项目实际上会有点老

00:00:28.260 --> 00:00:34.530
解释为什么它实际上是从

00:00:30.810 --> 00:00:36.600
我第一年的观点是Mark 

00:00:34.530 --> 00:00:41.610
罗纳德说我为甲骨文公司工作

00:00:36.600 --> 00:00:44.430
我要说的只是谎言，但

00:00:41.610 --> 00:00:47.730
首先，如果他们是一些

00:00:44.430 --> 00:00:52.309
不知道我是楼迷宫的人

00:00:47.730 --> 00:00:57.120
忘记了我们为什么要这样做

00:00:52.309 --> 00:01:01.920
目标是制作并发程序

00:00:57.120 --> 00:01:03.359
今天更容易写程序员

00:01:01.920 --> 00:01:06.420
基本上面临二元选择

00:01:03.359 --> 00:01:09.570
他们可以编写简单的阻止

00:01:06.420 --> 00:01:12.330
例如servlet之类的代码

00:01:09.570 --> 00:01:17.490
您是否已开始执行请求

00:01:12.330 --> 00:01:19.380
在一个线程中，代码很不错

00:01:17.490 --> 00:01:22.740
问题是现代操作

00:01:19.380 --> 00:01:27.060
系统可以管理更大的系统

00:01:22.740 --> 00:01:30.479
打开的TCP套接字数超出限制

00:01:27.060 --> 00:01:33.119
运行活动线程，所以这是一个

00:01:30.479 --> 00:01:34.110
可伸缩性瓶颈

00:01:33.119 --> 00:01:35.790
在做他们更在乎

00:01:34.110 --> 00:01:38.070
可扩展性，因此编写代码

00:01:35.790 --> 00:01:39.960
可扩展性很强，但它们使用异步

00:01:38.070 --> 00:01:42.030
带回调或可填充的代码

00:01:39.960 --> 00:01:44.640
未来或类似艺术Java或

00:01:42.030 --> 00:01:47.850
 akka所有其他异步

00:01:44.640 --> 00:01:50.880
框架，因此可扩展，但是

00:01:47.850 --> 00:01:54.560
代码通常更复杂

00:01:50.880 --> 00:01:58.799
重要的是，调试起来要困难得多

00:01:54.560 --> 00:02:01.200
这几乎是不可能的，它

00:01:58.799 --> 00:02:03.899
完全是不可能的

00:02:01.200 --> 00:02:06.479
与现有的阻止代码互操作

00:02:03.899 --> 00:02:09.000
非常不能将两者混在一起

00:02:06.479 --> 00:02:09.959
要么阻止，要么就不困难

00:02:09.000 --> 00:02:13.260
混合同步和异步

00:02:09.959 --> 00:02:14.530
代码，所以我们要使用此二进制文件

00:02:13.260 --> 00:02:18.640
选择离开

00:02:14.530 --> 00:02:21.010
基本上，这个想法是线程

00:02:18.640 --> 00:02:23.920
非常简单，这是一个很好的

00:02:21.010 --> 00:02:26.879
抽象，但它们的实现

00:02:23.920 --> 00:02:30.370
操作系统不足以

00:02:26.879 --> 00:02:33.670
我们有要求，所以我们只需

00:02:30.370 --> 00:02:35.560
更多线程，而不是依赖

00:02:33.670 --> 00:02:39.519
操作系统来管理它们

00:02:35.560 --> 00:02:41.859
因为它可以出于各种原因

00:02:39.519 --> 00:02:43.510
在运行时中有线程，我们称它们为

00:02:41.859 --> 00:02:45.640
这些是我们称之为轻量级的线程

00:02:43.510 --> 00:02:47.950
他们纤维我可以称他们为

00:02:45.640 --> 00:02:49.480
轻量级线程也可以

00:02:47.950 --> 00:02:52.389
有你想要的数量和原因

00:02:49.480 --> 00:02:55.209
使编码更容易的是

00:02:52.389 --> 00:02:56.980
现在有一个自然的翻译

00:02:55.209 --> 00:03:00.519
从并发的互联网

00:02:56.980 --> 00:03:02.439
会话或

00:03:00.519 --> 00:03:04.870
请求或用户，或者外向

00:03:02.439 --> 00:03:08.319
要求软件部门

00:03:04.870 --> 00:03:09.760
并发性是线程，所以

00:03:08.319 --> 00:03:15.609
可以是一对一的映射

00:03:09.760 --> 00:03:17.500
编写代码要容易得多，因此从

00:03:15.609 --> 00:03:20.500
用户的视角用户

00:03:17.500 --> 00:03:23.620
会写普通的简单

00:03:20.500 --> 00:03:24.910
阻止代码，但这不是

00:03:23.620 --> 00:03:26.319
操作系统会看到

00:03:24.910 --> 00:03:31.000
操作只会看到很少

00:03:26.319 --> 00:03:33.010
内核线程，如果使用，请使用

00:03:31.000 --> 00:03:34.389
任何I / O操作

00:03:33.010 --> 00:03:35.889
透视程序员会看起来

00:03:34.389 --> 00:03:37.810
就像阻止I / O，但是

00:03:35.889 --> 00:03:40.180
操作系统的角度来看

00:03:37.810 --> 00:03:41.919
会自动翻译成

00:03:40.180 --> 00:03:45.129
异步I / O，因此您获得相同的结果

00:03:41.919 --> 00:03:48.370
异步的可伸缩性优势

00:03:45.129 --> 00:03:50.979
代码，但方便和

00:03:48.370 --> 00:03:56.040
同步的可维护性优势

00:03:50.979 --> 00:03:58.900
代码，而不仅仅是其中之一

00:03:56.040 --> 00:04:01.000
我们希望写的理由

00:03:58.900 --> 00:04:04.290
并发程序更容易不仅仅是

00:04:01.000 --> 00:04:08.829
通过拥有尽可能多的线程

00:04:04.290 --> 00:04:11.889
而且还可以帮助您将它们编织在一起

00:04:08.829 --> 00:04:14.019
成为一个连贯的整体

00:04:11.889 --> 00:04:20.209
是我将要获得的最新作品

00:04:14.019 --> 00:04:22.580
到以后再好吧

00:04:20.209 --> 00:04:25.070
自从我改变了第一件事

00:04:22.580 --> 00:04:28.790
去年在这里是现在我们有一个

00:04:25.070 --> 00:04:31.130
您可以尝试运行的派对网站

00:04:28.790 --> 00:04:37.610
去那里已经有人了

00:04:31.130 --> 00:04:40.310
玩这个，如果你有

00:04:37.610 --> 00:04:42.800
有什么问题可以问我

00:04:40.310 --> 00:04:45.080
请在谈话中问我，也许我会

00:04:42.800 --> 00:04:49.600
告诉你这是以后的问题

00:04:45.080 --> 00:04:53.450
但是试着问好我在说

00:04:49.600 --> 00:04:57.500
真正的项目水槽首先是讨论

00:04:53.450 --> 00:05:00.100
 JVM较少，因此大约在2017年8月， 

00:04:57.500 --> 00:05:03.800
那么显然过程是

00:05:00.100 --> 00:05:05.150
你应该去周围更多

00:05:03.800 --> 00:05:07.370
如果是Oracle，会很有帮助，因为那是

00:05:05.150 --> 00:05:08.720
大多数人在内部去的地方

00:05:07.370 --> 00:05:11.450
在Oracle内部并找到想要的人

00:05:08.720 --> 00:05:12.410
看起来很奇怪

00:05:11.450 --> 00:05:15.710
一开始对我来说就是这样

00:05:12.410 --> 00:05:17.180
也是JVM的第一人称

00:05:15.710 --> 00:05:20.600
较少想参加该项目的人是

00:05:17.180 --> 00:05:24.890
艾伦·贝特曼（Alan Bateman）所以他有点共同领导

00:05:20.600 --> 00:05:30.320
和我在一起，他正在做大部分

00:05:24.890 --> 00:05:32.930
 API设计库可以正常工作

00:05:30.320 --> 00:05:35.660
回到那里，我们甚至都没有名字

00:05:32.930 --> 00:05:39.740
 Brian想出了我想的名字

00:05:35.660 --> 00:05:43.700
一天后，所以我们已经喜欢

00:05:39.740 --> 00:05:45.590
两个人，并将公告命名为

00:05:43.700 --> 00:05:48.410
打开的JDK邮件列表很快出现了

00:05:45.590 --> 00:05:50.930
之后，但是花了一个

00:05:48.410 --> 00:05:53.500
过程，所以我想直到十月

00:05:50.930 --> 00:05:59.120
直到实际上是一个官方项目

00:05:53.500 --> 00:06:01.970
 2017年10月，当时艾伦

00:05:59.120 --> 00:06:04.370
已经开始在图书馆工作

00:06:01.970 --> 00:06:06.110
虚拟机中什么都没有，但是

00:06:04.370 --> 00:06:09.710
开始致力于图书馆

00:06:06.110 --> 00:06:11.600
我为所有这些东西做好了准备

00:06:09.710 --> 00:06:14.120
在考虑如何实施

00:06:11.600 --> 00:06:17.840
连续性，使纤维得以实施

00:06:14.120 --> 00:06:20.060
在最基本的原语之上

00:06:17.840 --> 00:06:24.740
称为延续的虚拟机正在运行

00:06:20.060 --> 00:06:26.750
正确使用它，VM会给您

00:06:24.740 --> 00:06:27.740
延续和纤维是

00:06:26.750 --> 00:06:29.559
在它们的顶部实现

00:06:27.740 --> 00:06:35.279
图书馆

00:06:29.559 --> 00:06:38.109
所以我对如何做有个想法

00:06:35.279 --> 00:06:40.689
首先让我告诉你它的样子

00:06:38.109 --> 00:06:43.869
所以这是

00:06:40.689 --> 00:06:48.729
 API的延续基本上就像

00:06:43.869 --> 00:06:50.919
可运行的让我们回到它

00:06:48.729 --> 00:06:53.259
那一刻，它就像是可运行的

00:06:50.919 --> 00:06:55.389
没有任何跑步的概念

00:06:53.259 --> 00:06:57.369
事情并行，但这是一个特殊的

00:06:55.389 --> 00:06:59.199
一种可运行的，因此它与

00:06:57.369 --> 00:07:03.549
您调用的代码并在其中运行

00:06:59.199 --> 00:07:05.229
行，所以没有什么并行的，但是

00:07:03.549 --> 00:07:06.969
通过以下方式特殊

00:07:05.229 --> 00:07:08.409
可运行的运行您开始运行它

00:07:06.969 --> 00:07:12.129
运行到完成，然后返回

00:07:08.409 --> 00:07:14.529
呼叫者继续可以呼叫新

00:07:12.129 --> 00:07:16.959
操作称为yield，当

00:07:14.529 --> 00:07:18.459
延续会产生收益

00:07:16.959 --> 00:07:20.919
通过通话返回到

00:07:18.459 --> 00:07:22.749
来电者，下次

00:07:20.919 --> 00:07:25.239
连续运行而不是开始

00:07:22.749 --> 00:07:27.999
从一开始它就继续

00:07:25.239 --> 00:07:29.199
屈服点，所以延续非常

00:07:27.999 --> 00:07:30.969
很低级的你不应该

00:07:29.199 --> 00:07:33.549
开发人员不会使用它们

00:07:30.969 --> 00:07:34.779
直接你可以使用构造

00:07:33.549 --> 00:07:36.999
建立在它们之上

00:07:34.779 --> 00:07:38.949
构造其中之一是纤维，但如果

00:07:36.999 --> 00:07:41.079
你会使用它们，就像

00:07:38.949 --> 00:07:45.549
这会创建一个延续

00:07:41.079 --> 00:07:47.409
解释范围是什么，然后让我们

00:07:45.549 --> 00:07:50.679
说你有这个无限循环

00:07:47.409 --> 00:07:53.289
偶尔会有收益，所以这是你的

00:07:50.679 --> 00:07:55.509
某种可运行的延续，然后

00:07:53.289 --> 00:07:58.259
您的运行方式只要

00:07:55.509 --> 00:08:00.579
它没有完成，它将在何时完成

00:07:58.259 --> 00:08:02.469
那可运行的实际上

00:08:00.579 --> 00:08:04.179
终止，但只要未完成

00:08:02.469 --> 00:08:05.589
您将要再次运行它

00:08:04.179 --> 00:08:09.039
你运行它的时间将会继续

00:08:05.589 --> 00:08:12.399
在屈服点，几个重要的

00:08:09.039 --> 00:08:15.489
在这种情况下指出这里的产量

00:08:12.399 --> 00:08:17.739
实际上是在顶级Lambda中

00:08:15.489 --> 00:08:21.009
表达，但它可以深入人心

00:08:17.739 --> 00:08:24.219
麻袋，所以你可以嵌套在一些

00:08:21.009 --> 00:08:26.589
其他方法和范围

00:08:24.219 --> 00:08:29.139
神秘的范围参数是什么

00:08:26.589 --> 00:08:31.719
允许我们嵌套多个延续

00:08:29.139 --> 00:08:33.339
彼此相处，当你屈服于

00:08:31.719 --> 00:08:35.800
基本上可以告诉您的一定范围

00:08:33.339 --> 00:08:37.990
哪个调用者返回真实的类型

00:08:35.800 --> 00:08:40.599
就像抛出一个异常

00:08:37.990 --> 00:08:42.250
多个处理程序，因此您可以返回

00:08:40.599 --> 00:08:43.419
当你屈服时，你可以回到

00:08:42.250 --> 00:08:44.860
立即将其围起来

00:08:43.419 --> 00:08:46.959
或者如果你在几个里面

00:08:44.860 --> 00:08:49.000
延续，你可以跳到一个

00:08:46.959 --> 00:08:51.880
您返回到创建的呼叫者

00:08:49.000 --> 00:08:58.360
该范围的延续，所以这

00:08:51.880 --> 00:09:00.910
是API的一部分，因此我们拥有

00:08:58.360 --> 00:09:02.769
我们已经运行的构造函数已经完成

00:09:00.910 --> 00:09:04.360
而产量就是我们所看到的，正确的

00:09:02.769 --> 00:09:05.889
一开始甚至几乎在这里

00:09:04.360 --> 00:09:09.730
去年我们知道我们会

00:09:05.889 --> 00:09:13.269
一些技术限制之一

00:09:09.730 --> 00:09:16.779
是这样，当你继续

00:09:13.269 --> 00:09:19.839
屈服它必须记住它的状态，所以接下来

00:09:16.779 --> 00:09:21.880
您运行它的时间，它必须知道

00:09:19.839 --> 00:09:24.220
在哪里继续，你可以是几个

00:09:21.880 --> 00:09:25.660
方法很深，所以该状态的一部分是

00:09:24.220 --> 00:09:29.290
堆叠，因此需要延续

00:09:25.660 --> 00:09:31.600
记住堆栈，我们想移动

00:09:29.290 --> 00:09:34.740
堆放着，那是

00:09:31.600 --> 00:09:36.970
如果您有原生框架，您将无法做

00:09:34.740 --> 00:09:40.000
所以基本上延续有自己的

00:09:36.970 --> 00:09:41.560
堆栈，当您运行它时，我们说

00:09:40.000 --> 00:09:42.850
您安装延续，所以

00:09:41.560 --> 00:09:46.029
从概念上讲，您可以将其视为

00:09:42.850 --> 00:09:48.160
你拿延续栈， 

00:09:46.029 --> 00:09:49.870
将其附加到线程堆栈以及何时

00:09:48.160 --> 00:09:51.579
你屈服或卸下它

00:09:49.870 --> 00:09:56.019
堆栈的一部分并将其移至

00:09:51.579 --> 00:09:59.500
因此，如果您碰巧有一个本地人

00:09:56.019 --> 00:10:01.089
连续堆栈上的框架

00:09:59.500 --> 00:10:04.089
例如，你在延续中

00:10:01.089 --> 00:10:05.560
那你现在就叫J和J 

00:10:04.089 --> 00:10:07.570
您回叫到Java，然后您

00:10:05.560 --> 00:10:09.190
做一个收益，所以你有一个原生框架

00:10:07.570 --> 00:10:10.990
在那种情况下，我们说

00:10:09.190 --> 00:10:14.110
延续被固定，不可能

00:10:10.990 --> 00:10:16.149
屈服，当你发生这种情况时

00:10:14.110 --> 00:10:17.890
尝试让出这种方法

00:10:16.149 --> 00:10:20.529
被调用，默认情况下会抛出一个

00:10:17.890 --> 00:10:23.170
异常纤维还有其他作用，所以我们

00:10:20.529 --> 00:10:25.480
直到最后才知道这个限制

00:10:23.170 --> 00:10:30.339
我在这里的那一年，所以这就是我们

00:10:25.480 --> 00:10:33.310
有，但是这是一张幻灯片，向您展示

00:10:30.339 --> 00:10:36.760
样式是不同的是

00:10:33.310 --> 00:10:38.319
去年我在这里展示的一面

00:10:36.760 --> 00:10:40.089
要求是我们将需要

00:10:38.319 --> 00:10:44.230
数百万的延续，这意味着

00:10:40.089 --> 00:10:47.620
每个延续的足迹

00:10:44.230 --> 00:10:51.610
必须非常低，我们需要非常快

00:10:47.620 --> 00:10:53.079
任务切换，以便我们可以挂载

00:10:51.610 --> 00:10:55.630
并快速卸载连续

00:10:53.079 --> 00:10:57.310
我说从概念上讲

00:10:55.630 --> 00:10:58.779
想起来好像

00:10:57.310 --> 00:11:02.290
将其附加到的麻袋

00:10:58.779 --> 00:11:03.730
线程，所以我们认为还可以，如果

00:11:02.290 --> 00:11:07.210
一定非常快，我们不应该做任何事情

00:11:03.730 --> 00:11:09.160
复制，所以这只是概念性复制

00:11:07.210 --> 00:11:12.940
但是最简单的事情就是

00:11:09.160 --> 00:11:16.240
将堆栈指针指向

00:11:12.940 --> 00:11:18.940
延续堆栈是，我给你看了一个

00:11:16.240 --> 00:11:26.710
杰伊在这里如何做的全部事情

00:11:18.940 --> 00:11:28.240
重点，第二天就这样

00:11:26.710 --> 00:11:30.850
在斯德哥尔摩办公室有很多

00:11:28.240 --> 00:11:35.260
的GC人员，他们基本上告诉

00:11:30.850 --> 00:11:37.029
我们，这是不可能做到的，实际上

00:11:35.260 --> 00:11:38.320
约翰·罗斯（John Rose）在这里，他和我

00:11:37.029 --> 00:11:44.170
对此感到沮丧

00:11:38.320 --> 00:11:45.790
几天，所以我的意思不可能是

00:11:44.170 --> 00:11:48.040
完成可以完成，你不知道下

00:11:45.790 --> 00:11:51.850
几年的工作我另一张幻灯片

00:11:48.040 --> 00:11:56.529
向您展示了我们对去哪里有一些想法

00:11:51.850 --> 00:11:59.320
将延续堆栈存储在

00:11:56.529 --> 00:12:04.770
 Java堆或

00:11:59.320 --> 00:12:08.140
 C堆，那时候我们也不知道

00:12:04.770 --> 00:12:12.640
如果我们要存储配置

00:12:08.140 --> 00:12:15.700
堆在堆上，我们有两个

00:12:12.640 --> 00:12:18.040
如何做到的选择要么保持

00:12:15.700 --> 00:12:22.540
堆栈的布局与原样相同

00:12:18.040 --> 00:12:26.020
通常用于线程，但随后

00:12:22.540 --> 00:12:28.900
意味着参考或我们

00:12:26.020 --> 00:12:30.850
热点呼唤可以在任何地方

00:12:28.900 --> 00:12:33.520
堆栈，所以我们需要一个OOP映射

00:12:30.850 --> 00:12:34.660
告诉GC各种树

00:12:33.520 --> 00:12:37.510
到哪里寻找季节

00:12:34.660 --> 00:12:40.120
他们的篮球，另一个是

00:12:37.510 --> 00:12:44.140
分离基元和

00:12:40.120 --> 00:12:46.000
引用不同的射线，所以

00:12:44.140 --> 00:12:47.920
从字面上来看很多讨论

00:12:46.000 --> 00:12:49.540
我讲完演讲后的第二天，他们还说

00:12:47.920 --> 00:12:54.910
那是无法做到的

00:12:49.540 --> 00:12:57.100
所以我们决定去这个，我

00:12:54.910 --> 00:13:00.070
说我们很伤心，因为我们不能

00:12:57.100 --> 00:13:02.110
不用复制就做，所以你说好

00:13:00.070 --> 00:13:04.260
让我们复制并弄清楚

00:13:02.110 --> 00:13:04.260
后来

00:13:05.010 --> 00:13:11.289
所以这就是目前的原型

00:13:08.410 --> 00:13:13.839
启蒙是

00:13:11.289 --> 00:13:15.729
它从复制开始，但是我会

00:13:13.839 --> 00:13:19.720
告诉你一个很酷的技巧，我们来了

00:13:15.729 --> 00:13:21.729
这么说，这是一个本地麻袋

00:13:19.720 --> 00:13:23.589
这是普通的线程堆栈

00:13:21.729 --> 00:13:27.569
呼叫继续运行，您现在

00:13:23.589 --> 00:13:29.409
输入您要继续的

00:13:27.569 --> 00:13:31.379
内部有一个内部

00:13:29.409 --> 00:13:35.199
继续方法称为enter和

00:13:31.379 --> 00:13:38.049
然后它将运行您的可运行的

00:13:35.199 --> 00:13:41.529
这些将是框架，最终

00:13:38.049 --> 00:13:44.409
你想打电话给收益，所以当你打电话

00:13:41.529 --> 00:13:46.749
让它进入虚拟机并

00:13:44.409 --> 00:13:48.849
 VM中的本机方法称为“冻结” 

00:13:46.749 --> 00:13:52.029
冻结将要进行

00:13:48.849 --> 00:13:53.949
开始将框架复制到

00:13:52.029 --> 00:13:57.789
存储在

00:13:53.949 --> 00:14:00.519
普通的Java堆，因此它将被复制

00:13:57.789 --> 00:14:03.599
这个框架，然后虽然它是

00:14:00.519 --> 00:14:07.239
复制还必须检查

00:14:03.599 --> 00:14:12.129
例如，框架是本机框架

00:14:07.239 --> 00:14:15.029
知道您固定在哪种情况下，如果

00:14:12.129 --> 00:14:18.220
是不是要继续复制它们

00:14:15.029 --> 00:14:20.649
所以首先将延续复制为

00:14:18.220 --> 00:14:23.499
与所有引用一起进入

00:14:20.649 --> 00:14:24.849
所以堆栈是原始数组， 

00:14:23.499 --> 00:14:28.929
引用堆栈是

00:14:24.849 --> 00:14:32.009
对象数组，然后提取

00:14:28.929 --> 00:14:35.970
从该帧循环并复制到

00:14:32.009 --> 00:14:38.739
参考堆栈，它为

00:14:35.970 --> 00:14:39.699
所有帧我忘了一件事

00:14:38.739 --> 00:14:43.029
更改我们最近的幻灯片

00:14:39.699 --> 00:14:45.099
改变了，所以我展示了它是如何复制的

00:14:43.029 --> 00:14:46.269
这叫做栈顶

00:14:45.099 --> 00:14:47.859
从堆栈顶部向下复制

00:14:46.269 --> 00:14:49.029
实际上，现在我们将订单更改为

00:14:47.859 --> 00:14:52.989
将它们复制到另一个方向

00:14:49.029 --> 00:14:57.819
但相同的想法然后冻结

00:14:52.989 --> 00:14:59.739
要跳回去跑了，就是这样

00:14:57.819 --> 00:15:01.749
当我们想继续

00:14:59.739 --> 00:15:04.209
下次我们称为运行继续

00:15:01.749 --> 00:15:07.720
所以已经认识到延续

00:15:04.209 --> 00:15:09.549
有一些内部状态，所以它调用

00:15:07.720 --> 00:15:11.139
再次输入，但现在意识到

00:15:09.549 --> 00:15:12.720
那里有东西，所以要去

00:15:11.139 --> 00:15:17.019
打电话叫继续

00:15:12.720 --> 00:15:19.139
将要复制的帧

00:15:17.019 --> 00:15:21.670
将在堆栈上腾出一些空间， 

00:15:19.139 --> 00:15:23.230
它复制

00:15:21.670 --> 00:15:28.090
框架在另一个方向上

00:15:23.230 --> 00:15:29.760
首先它照原样复制框架

00:15:28.090 --> 00:15:33.250
将箍恢复到正确的位置

00:15:29.760 --> 00:15:35.920
因为GCS可能已经移动了

00:15:33.250 --> 00:15:38.470
周围的物体，只要它们在

00:15:35.920 --> 00:15:41.410
 GC知道在哪里进行操作的对象

00:15:38.470 --> 00:15:44.200
找到他们，如果他们已经搬迁了

00:15:41.410 --> 00:15:47.070
修复所有指针，所以我们必须

00:15:44.200 --> 00:15:51.150
将它们恢复到新值，并

00:15:47.070 --> 00:15:53.230
我们还必须修补框架，以便

00:15:51.150 --> 00:15:54.700
每个上的某种元数据

00:15:53.230 --> 00:15:57.730
框架以确保他们知道如何

00:15:54.700 --> 00:16:00.100
回到正确的地方，我们做

00:15:57.730 --> 00:16:05.850
其余的帧，然后

00:16:00.100 --> 00:16:09.790
我们返回并屈服，所以概念

00:16:05.850 --> 00:16:12.030
复制框架部分的想法

00:16:09.790 --> 00:16:14.770
堆栈实际上就是我们在做什么

00:16:12.030 --> 00:16:17.530
但是那不是我们想要做的

00:16:14.770 --> 00:16:18.790
我们不想复制任何东西， 

00:16:17.530 --> 00:16:22.060
这是下面的问题

00:16:18.790 --> 00:16:24.880
假设您为此付出的代价是

00:16:22.060 --> 00:16:29.260
堆叠深度呈线性关系

00:16:24.880 --> 00:16:32.800
你很有可能

00:16:29.260 --> 00:16:34.990
你会像一个深处的100种方法

00:16:32.800 --> 00:16:37.300
收益率非常紧密的循环，但每个

00:16:34.990 --> 00:16:41.140
当你屈服时，你必须复制那些

00:16:37.300 --> 00:16:43.000
来回100帧

00:16:41.140 --> 00:16:45.400
总的工作量是线性的

00:16:43.000 --> 00:16:48.610
堆栈的深度，那可以

00:16:45.400 --> 00:16:50.650
非常糟糕，所以埃里克从

00:16:48.610 --> 00:16:53.110
斯德哥尔摩狼来了

00:16:50.650 --> 00:16:54.910
这个想法，这就是我们在其中实施的

00:16:53.110 --> 00:16:58.450
原型，这个想法是

00:16:54.910 --> 00:17:00.970
叫做懒惰副本，所以我们第一次

00:16:58.450 --> 00:17:02.650
冻结或我们产生延续我们

00:17:00.970 --> 00:17:05.350
按照我的指示进行复制，但是

00:17:02.650 --> 00:17:07.839
这只是我们下次第一次

00:17:05.350 --> 00:17:12.250
想要我们想要继续

00:17:07.839 --> 00:17:14.440
继续我们正在做的是

00:17:12.250 --> 00:17:17.350
只是要复制所以这是相同的

00:17:14.440 --> 00:17:20.949
和以前一样，我们只复制一个或

00:17:17.350 --> 00:17:22.720
两帧，所以现在这是一个常数

00:17:20.949 --> 00:17:24.850
或多或少的恒定操作

00:17:22.720 --> 00:17:31.140
不取决于堆叠的深度

00:17:24.850 --> 00:17:34.809
我们只复制一两个框架，然后

00:17:31.140 --> 00:17:37.779
我们要做的是在那改变

00:17:34.809 --> 00:17:40.450
转到此框架的地址并替换

00:17:37.779 --> 00:17:44.499
它带有指向一些代码的指针

00:17:40.450 --> 00:17:51.659
我们称之为回程壁垒，如果您

00:17:44.499 --> 00:17:51.659
跑，然后我们回到你身边

