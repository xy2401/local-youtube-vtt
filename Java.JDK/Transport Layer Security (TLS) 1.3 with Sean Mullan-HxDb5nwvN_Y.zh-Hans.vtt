WEBVTT
Kind: captions
Language: zh-Hans

00:00:03.410 --> 00:00:10.019
您好，欢迎来到我的演讲

00:00:06.240 --> 00:00:13.559
传输层安全1.3 

00:00:10.019 --> 00:00:15.389
我的名字叫JDK 11中的新安全功能

00:00:13.559 --> 00:00:23.220
是肖恩·马伦（Sean Mullen），我是

00:00:15.389 --> 00:00:25.019
 Oracle的安全库团队

00:00:23.220 --> 00:00:28.619
首先，让我们开始一些背景

00:00:25.019 --> 00:00:30.900
 TLS的简要概述TLS是一个

00:00:28.619 --> 00:00:33.809
允许客户使用的标准协议

00:00:30.900 --> 00:00:36.899
和服务器进行安全通信

00:00:33.809 --> 00:00:38.219
通过它提供的Internet安全地

00:00:36.899 --> 00:00:40.829
的安全属性

00:00:38.219 --> 00:00:44.340
机密性，真实性和

00:00:40.829 --> 00:00:47.129
完整性TLS最常用于

00:00:44.340 --> 00:00:51.449
网络浏览器和网络服务器以确保安全

00:00:47.129 --> 00:00:53.309
 JDK通过Internet发送数据

00:00:51.449 --> 00:00:56.570
包括各种实现

00:00:53.309 --> 00:01:00.379
 SSL和TLS协议的版本

00:00:56.570 --> 00:01:05.460
特别是SSL版本3 TLS版本

00:01:00.379 --> 00:01:09.210
 1.0和1.2 d TLS，即数据报

00:01:05.460 --> 00:01:13.729
 TLS版本1.0和1.2的版本以及

00:01:09.210 --> 00:01:17.210
现在带有jdk 11 TLS版本1.3 

00:01:13.729 --> 00:01:20.340
请注意，SSL v3被广泛认为

00:01:17.210 --> 00:01:25.170
使用起来不安全，不安全， 

00:01:20.340 --> 00:01:27.570
默认情况下，在jdk中禁用

00:01:25.170 --> 00:01:31.110
在您的Java应用程序中使用TLS 

00:01:27.570 --> 00:01:34.490
可以使用java x net和java x net 

00:01:31.110 --> 00:01:37.560
 ssl包到Java点基础模块

00:01:34.490 --> 00:01:41.070
这些是使用的较低级别的api 

00:01:37.560 --> 00:01:45.030
 SSL和TLS，通常称为

00:01:41.070 --> 00:01:49.740
 JSF II或Java安全套接字

00:01:45.030 --> 00:01:51.210
扩展名（如果您使用的是HTTP） 

00:01:49.740 --> 00:01:55.259
想要建立安全的连接

00:01:51.210 --> 00:01:59.090
使用HTTPS，您现在可以使用新的JDK 

00:01:55.259 --> 00:02:04.290
 Java中的11个HTTP客户端API 

00:01:59.090 --> 00:02:06.469
 java.net HTTP中的net HTTP包

00:02:04.290 --> 00:02:06.469
模组

00:02:09.300 --> 00:02:14.830
那么为什么我们需要另一个版本的TLS 

00:02:12.190 --> 00:02:16.239
为什么我们需要TLS 21.3，让我们

00:02:14.830 --> 00:02:18.659
简要看看一些问题

00:02:16.239 --> 00:02:22.209
这些协议多年来

00:02:18.659 --> 00:02:24.040
第一个Excel v3具有多个

00:02:22.209 --> 00:02:27.239
漏洞，这是正式的

00:02:24.040 --> 00:02:31.049
 RFC中弃用的七五六八

00:02:27.239 --> 00:02:33.760
它应该不再在实践中使用

00:02:31.049 --> 00:02:36.540
 TLS协议有很多

00:02:33.760 --> 00:02:40.209
最近20年左右的挑战

00:02:36.540 --> 00:02:43.060
 RFC 747很好地总结了

00:02:40.209 --> 00:02:48.280
这些攻击，有趣的是

00:02:43.060 --> 00:02:50.560
请参阅TLS版本1.0和1.1都

00:02:48.280 --> 00:02:54.549
现在很老，正在迅速

00:02:50.560 --> 00:02:57.640
逐步淘汰TLS版本1.2是

00:02:54.549 --> 00:03:01.019
当前的TLS最佳做法，但它本身

00:02:57.640 --> 00:03:04.359
大约还十岁，所以

00:03:01.019 --> 00:03:06.849
人们普遍认为

00:03:04.359 --> 00:03:08.609
需要更新以更现代

00:03:06.849 --> 00:03:18.370
和最新的加密实践

00:03:08.609 --> 00:03:20.739
进步，因此TLS 1.3大约有四个

00:03:18.370 --> 00:03:24.639
多年的发展是最近

00:03:20.739 --> 00:03:26.280
 2000年8月发布18为RFC 84 

00:03:24.639 --> 00:03:30.130
六个

00:03:26.280 --> 00:03:32.849
 TLS 1.3是TLS的一项重大改进

00:03:30.130 --> 00:03:36.180
协议有两个主要好处

00:03:32.849 --> 00:03:38.169
增强安全性并提高速度

00:03:36.180 --> 00:03:45.069
让我们来看看每个

00:03:38.169 --> 00:03:48.510
更详细的改进

00:03:45.069 --> 00:03:51.940
增强安全性越安全

00:03:48.510 --> 00:03:54.639
 TLS 1.3删除了对过时的支持

00:03:51.940 --> 00:03:56.680
加密技术，可提高安全性

00:03:54.639 --> 00:03:59.230
并减少了会话可以

00:03:56.680 --> 00:04:01.410
由于密码不安全而被破坏

00:03:59.230 --> 00:04:05.620
套房或其他形式的弱者

00:04:01.410 --> 00:04:08.190
删除使用的密码学

00:04:05.620 --> 00:04:13.239
密码过时的密码学

00:04:08.190 --> 00:04:15.010
包括诸如

00:04:13.239 --> 00:04:19.359
静态RSA和diffie-hellman密钥

00:04:15.010 --> 00:04:20.690
交换CBC模式密码md5和sha-1 

00:04:19.359 --> 00:04:24.750
哈希函数

00:04:20.690 --> 00:04:30.090
三重DES和rc4密码以及任意

00:04:24.750 --> 00:04:31.770
 diffie-hellman也将TLS 1.3分组

00:04:30.090 --> 00:04:36.120
删除不安全的功能，例如

00:04:31.770 --> 00:04:38.070
压缩并重新协商这不是

00:04:36.120 --> 00:04:39.780
完整列表，您应该会看到RFC 

00:04:38.070 --> 00:04:43.820
和其他在线文学

00:04:39.780 --> 00:04:43.820
我已被删除或简化的功能

00:04:48.020 --> 00:04:54.770
通常，TLS 1.3支持更少的

00:04:52.199 --> 00:04:58.979
更现代的加密算法

00:04:54.770 --> 00:05:01.590
它增加了对RSA SSA-PSS的支持

00:04:58.979 --> 00:05:06.120
签名算法cha-cha 20和

00:05:01.590 --> 00:05:08.160
 poly 1305流加密x2 55 1 9 

00:05:06.120 --> 00:05:09.750
 X 4表示8 

00:05:08.160 --> 00:05:12.870
 diffie-hellman密钥协商机制

00:05:09.750 --> 00:05:15.990
和Edwards曲线数字签名

00:05:12.870 --> 00:05:18.780
算法所有这些都更现代

00:05:15.990 --> 00:05:22.039
加密算法更多

00:05:18.780 --> 00:05:22.039
高效，更安全

00:05:26.670 --> 00:05:32.460
 teyla的1.3也比以前更快

00:05:30.090 --> 00:05:34.980
 TLS协议的版本

00:05:32.460 --> 00:05:38.840
全新的握手模块

00:05:34.980 --> 00:05:41.610
需要更少的往返TLS 1.2 

00:05:38.840 --> 00:05:42.450
需要两次往返才能完成

00:05:41.610 --> 00:05:46.560
握手

00:05:42.450 --> 00:05:49.020
但是TLS 1.3使用一次往返

00:05:46.560 --> 00:05:59.370
默认值，并且可以选择预先共享

00:05:49.020 --> 00:06:01.470
键可以使用0往返，所以这里是

00:05:59.370 --> 00:06:05.310
有关TLS 1.3的一些详细信息

00:06:01.470 --> 00:06:08.970
在JDK 11中实现此功能

00:06:05.310 --> 00:06:11.220
是在喷射332中定义的，目标是

00:06:08.970 --> 00:06:14.520
喷气机将产生一个可互操作的

00:06:11.220 --> 00:06:17.850
 TLS 1.3实施支持所有

00:06:14.520 --> 00:06:19.850
所需的功能

00:06:17.850 --> 00:06:22.230
 RFC 

00:06:19.850 --> 00:06:24.480
因此，实现不

00:06:22.230 --> 00:06:27.360
支持许多可选功能，例如

00:06:24.480 --> 00:06:29.130
在RFC中指定，但是许多

00:06:27.360 --> 00:06:31.830
这些可选功能被认为

00:06:29.130 --> 00:06:36.110
重要，并且有望成为

00:06:31.830 --> 00:06:36.110
在JDK的后续版本中添加

00:06:36.440 --> 00:06:43.940
没有我们必须的新的api 

00:06:40.230 --> 00:06:47.130
添加以支持jdk TLS 1.3 

00:06:43.940 --> 00:06:50.220
实现，因此您使用

00:06:47.130 --> 00:06:52.800
与您使用TLS 1.3时相同的作业API 

00:06:50.220 --> 00:06:55.590
但是对于以前的TLS版本

00:06:52.800 --> 00:06:59.070
那里有一些新的算法名称

00:06:55.590 --> 00:07:03.290
现在是TLS V 1.3作为单元上下文

00:06:59.070 --> 00:07:06.510
算法和TLS V 1.3协议，以及

00:07:03.290 --> 00:07:10.830
有两个新的密码套件

00:07:06.510 --> 00:07:13.080
这是RSC的要求

00:07:10.830 --> 00:07:16.860
是一个名为JDK的新安全属性

00:07:13.080 --> 00:07:18.630
 TLS密钥限制，您可以使用它来

00:07:16.860 --> 00:07:20.730
限制算法的数据量

00:07:18.630 --> 00:07:24.830
可以使用一组特定的密钥进行加密

00:07:20.730 --> 00:07:27.300
这是一个属性值示例

00:07:24.830 --> 00:07:31.680
由以下算法的名称组成

00:07:27.300 --> 00:07:34.290
在这种情况下，AES GCM没有填充，后跟

00:07:31.680 --> 00:07:36.300
密钥更新即TLS消息

00:07:34.290 --> 00:07:39.810
一旦达到限制，就会发送

00:07:36.300 --> 00:07:40.080
达到然后极限本身

00:07:39.810 --> 00:07:42.629
是

00:07:40.080 --> 00:07:45.379
整数值（以字节为单位）或

00:07:42.629 --> 00:07:45.379
二的幂

00:07:46.639 --> 00:07:52.080
默认情况下，两者均启用TLS 1.3 

00:07:49.680 --> 00:07:53.669
客户端和服务器端，所以

00:07:52.080 --> 00:07:55.800
您不需要做任何专门的操作

00:07:53.669 --> 00:07:58.729
启用它，如果双方都使用

00:07:55.800 --> 00:07:58.729
支持它

00:07:58.789 --> 00:08:03.240
有一些兼容性问题

00:08:01.500 --> 00:08:06.030
升级到

00:08:03.240 --> 00:08:08.129
 TLS 1.3您应该检查发布

00:08:06.030 --> 00:08:11.990
给Jeff的笔记，看看是否有

00:08:08.129 --> 00:08:11.990
这些问题可能会影响您的应用程序

00:08:17.960 --> 00:08:25.080
因此，下一步我们鼓励您

00:08:21.389 --> 00:08:29.699
通过以下URL下载JDK 11 

00:08:25.080 --> 00:08:33.919
 ww Oracle comm / Java下载即可

00:08:29.699 --> 00:08:35.880
也加入开放的JDK网站

00:08:33.919 --> 00:08:39.899
在Twitter上关注我们以了解更多

00:08:35.880 --> 00:08:42.630
打开JDK句柄或使用时的信息

00:08:39.899 --> 00:08:45.800
哈希标签作业11或您也可以关注

00:08:42.630 --> 00:08:48.720
我在我的Twitter处理Shawn J Mullen I 

00:08:45.800 --> 00:08:50.640
经常发布有关Java安全性的很多文章，因此

00:08:48.720 --> 00:08:51.829
这是跟上最新进展的好方法

00:08:50.640 --> 00:08:54.170
发生在那个地区

00:08:51.829 --> 00:08:58.320
谢谢

00:08:54.170 --> 00:08:58.320
 [音乐] 

