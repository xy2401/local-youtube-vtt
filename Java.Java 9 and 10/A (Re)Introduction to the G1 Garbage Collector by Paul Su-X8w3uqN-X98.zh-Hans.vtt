WEBVTT
Kind: captions
Language: zh-Hans

00:00:00.000 --> 00:00:04.170
你好，我叫保罗，欢迎来到

00:00:02.370 --> 00:00:05.940
这个g1垃圾的截屏视频

00:00:04.170 --> 00:00:09.090
收藏家那里有很多信息

00:00:05.940 --> 00:00:10.679
在g1上已经可用，但是从G 1开始

00:00:09.090 --> 00:00:12.809
将成为默认的收集器

00:00:10.679 --> 00:00:14.849
 JDK 9我想借此机会

00:00:12.809 --> 00:00:17.640
对此进行高层次的介绍

00:00:14.849 --> 00:00:20.310
收藏家由于时间的限制这

00:00:17.640 --> 00:00:22.140
将是一个非常基本的概述，但更多

00:00:20.310 --> 00:00:27.269
比我的信息更详细

00:00:22.140 --> 00:00:28.920
关于我自己的一些事

00:00:27.269 --> 00:00:30.539
使用Java和开放式JDK 

00:00:28.920 --> 00:00:32.669
过去18年的社区

00:00:30.539 --> 00:00:35.309
主要在微型版空间

00:00:32.669 --> 00:00:37.440
目前，我管理热点垃圾

00:00:35.309 --> 00:00:38.940
今天的甲骨文公司收集团队

00:00:37.440 --> 00:00:40.590
我们将从简要介绍开始

00:00:38.940 --> 00:00:42.719
当前收藏家的种类

00:00:40.590 --> 00:00:45.329
在我们出发之前可以在热点找到

00:00:42.719 --> 00:00:46.710
到g1细节中，这些是

00:00:45.329 --> 00:00:49.469
当前支持的收集器

00:00:46.710 --> 00:00:51.300
热点序列旨在解决

00:00:49.469 --> 00:00:54.210
用例中内存占用量是

00:00:51.300 --> 00:00:55.559
关键并行应该是最佳的

00:00:54.210 --> 00:00:58.710
在大多数情况下的选择

00:00:55.559 --> 00:01:01.109
吞吐量很重要内置CMS 

00:00:58.710 --> 00:01:03.629
着重于延迟，但正在

00:01:01.109 --> 00:01:05.760
从JDK 9开始不推荐使用，因为

00:01:03.629 --> 00:01:09.119
大多数应用程序g1应该提供

00:01:05.760 --> 00:01:10.799
旨在提供更好的总体体验

00:01:09.119 --> 00:01:12.450
在吞吐量之间取得平衡

00:01:10.799 --> 00:01:16.470
和潜伏期，而不患上

00:01:12.450 --> 00:01:19.500
 g1提到的碎片现在是

00:01:16.470 --> 00:01:21.509
 JDK的默认收集器

00:01:19.500 --> 00:01:24.030
作为实验性标志引入

00:01:21.509 --> 00:01:28.200
 1614年并得到完全支持

00:01:24.030 --> 00:01:29.970
如上所述的7u 4中的收集器

00:01:28.200 --> 00:01:32.490
 g1的目标是提供平衡

00:01:29.970 --> 00:01:34.290
在吞吐量和延迟之间

00:01:32.490 --> 00:01:37.200
 g1的默认暂停目标设置为

00:01:34.290 --> 00:01:39.689
调整此值200毫秒

00:01:37.200 --> 00:01:42.570
用户可以调整g1以提供

00:01:39.689 --> 00:01:44.310
更低的延迟或更高的吞吐量

00:01:42.570 --> 00:01:46.110
更高的价值提供更高的价值

00:01:44.310 --> 00:01:48.720
以更高的吞吐量为代价

00:01:46.110 --> 00:01:50.369
总延迟或较低的值

00:01:48.720 --> 00:01:54.119
提供较低的吞吐量和较低的

00:01:50.369 --> 00:01:56.100
延迟有以下三个属性

00:01:54.119 --> 00:01:58.829
允许收集g1 

00:01:56.100 --> 00:02:00.960
细度为x'的对象的划分

00:01:58.829 --> 00:02:02.490
将堆分成较小的区域

00:02:00.960 --> 00:02:04.380
这些对象中存在哪些对象

00:02:02.490 --> 00:02:07.409
区域并跟踪

00:02:04.380 --> 00:02:09.840
这些区域之间的指针

00:02:07.409 --> 00:02:11.730
串行和并行收集器堆

00:02:09.840 --> 00:02:12.930
分为两个或三个

00:02:11.730 --> 00:02:15.810
地区

00:02:12.930 --> 00:02:18.120
与g1堆分为

00:02:15.810 --> 00:02:21.689
通常在附近的多个较小区域

00:02:18.120 --> 00:02:23.670
 2000个左右的区域使用这些区域

00:02:21.689 --> 00:02:26.480
以获得更好的粒度

00:02:23.670 --> 00:02:29.250
每个GC暂停时要收集很多垃圾

00:02:26.480 --> 00:02:31.560
与串行和并行标记不同

00:02:29.250 --> 00:02:33.569
 G 1的相位同时完成

00:02:31.560 --> 00:02:35.329
允许G 1查找所有活动物体

00:02:33.569 --> 00:02:37.500
无需停止Java应用程序

00:02:35.329 --> 00:02:39.750
可以标记多个对象

00:02:37.500 --> 00:02:41.340
地区同时

00:02:39.750 --> 00:02:43.200
将对象从一个区域移动到另一个区域

00:02:41.340 --> 00:02:45.629
您需要知道指向的指针

00:02:43.200 --> 00:02:47.639
 G 1跟踪那些对象

00:02:45.629 --> 00:02:49.230
区域之间的指针以

00:02:47.639 --> 00:02:52.440
避免将过时的指针留在

00:02:49.230 --> 00:02:55.319
 G 1堆可以决定收集一些

00:02:52.440 --> 00:02:56.730
一次可以做到区域

00:02:55.319 --> 00:02:59.060
限制对象的数量

00:02:56.730 --> 00:03:01.950
已处理，从而降低了暂停时间

00:02:59.060 --> 00:03:03.659
相对于其他收藏家g1有更多

00:03:01.950 --> 00:03:06.359
有关堆中对象状态的数据

00:03:03.659 --> 00:03:07.799
收集之前开始给予

00:03:06.359 --> 00:03:10.859
对长度的更多控制

00:03:07.799 --> 00:03:12.989
在G 1开始收集G 1时暂停

00:03:10.859 --> 00:03:15.209
需要至少一个空白区域才能移动

00:03:12.989 --> 00:03:17.010
将活动对象划分为一组区域是

00:03:15.209 --> 00:03:19.440
根据启发式方法（例如

00:03:17.010 --> 00:03:21.720
实时数据量

00:03:19.440 --> 00:03:23.340
堆是免费的，并且在正位置

00:03:21.720 --> 00:03:25.139
选定区域的活动对象

00:03:23.340 --> 00:03:27.480
被移入空区释放

00:03:25.139 --> 00:03:30.930
来自原始区域的内存

00:03:27.480 --> 00:03:32.400
堆现在更紧凑了

00:03:30.930 --> 00:03:34.730
在以下方面的许多重大改进

00:03:32.400 --> 00:03:38.430
自JDK 8起G 1 

00:03:34.730 --> 00:03:40.169
有很多变化，但5 

00:03:38.430 --> 00:03:42.299
重大改进是字符串

00:03:40.169 --> 00:03:44.639
重复数据删除类卸载后

00:03:42.299 --> 00:03:46.949
并发循环渴望回收

00:03:44.639 --> 00:03:48.870
大型物体自适应开始

00:03:46.949 --> 00:03:52.169
并发周期更有效

00:03:48.870 --> 00:03:53.819
暂停每个上的更详细的信息

00:03:52.169 --> 00:03:55.739
其中的可用版本

00:03:53.819 --> 00:03:57.870
笔记和调音指南

00:03:55.739 --> 00:04:00.569
这里的各个版本是一些链接

00:03:57.870 --> 00:04:02.750
有关gdk9的更多信息，您可以

00:04:00.569 --> 00:04:04.979
从Oracle comm下载JDK 9 

00:04:02.750 --> 00:04:07.199
参加公开讨论

00:04:04.979 --> 00:04:10.310
 JDK邮件列表或关注我们

00:04:07.199 --> 00:04:10.310
 Twitter的新闻和更新

