WEBVTT
Kind: captions
Language: en

00:00:03.170 --> 00:00:08.590 align:start position:0%
 
okay<00:00:04.360><c> hello</c><00:00:05.360><c> welcome</c><00:00:05.720><c> everybody</c><00:00:06.230><c> this</c><00:00:06.770><c> is</c><00:00:07.600><c> JDK</c>

00:00:08.590 --> 00:00:08.600 align:start position:0%
okay hello welcome everybody this is JDK
 

00:00:08.600 --> 00:00:09.880 align:start position:0%
okay hello welcome everybody this is JDK
9<00:00:08.750><c> the</c><00:00:08.990><c> hidden</c><00:00:09.320><c> gems</c>

00:00:09.880 --> 00:00:09.890 align:start position:0%
9 the hidden gems
 

00:00:09.890 --> 00:00:12.310 align:start position:0%
9 the hidden gems
I'm<00:00:10.220><c> Michael</c><00:00:10.670><c> vid</c><00:00:10.970><c> stet</c><00:00:11.210><c> until</c><00:00:11.810><c> recently</c><00:00:12.230><c> I</c>

00:00:12.310 --> 00:00:12.320 align:start position:0%
I'm Michael vid stet until recently I
 

00:00:12.320 --> 00:00:14.320 align:start position:0%
I'm Michael vid stet until recently I
used<00:00:12.590><c> to</c><00:00:12.770><c> be</c><00:00:12.860><c> a</c><00:00:12.890><c> JVM</c><00:00:13.400><c> tech</c><00:00:13.670><c> guy</c><00:00:13.910><c> and</c><00:00:14.210><c> then</c><00:00:14.300><c> I</c>

00:00:14.320 --> 00:00:14.330 align:start position:0%
used to be a JVM tech guy and then I
 

00:00:14.330 --> 00:00:16.090 align:start position:0%
used to be a JVM tech guy and then I
moved<00:00:14.600><c> to</c><00:00:14.690><c> the</c><00:00:14.840><c> dark</c><00:00:15.050><c> side</c><00:00:15.290><c> and</c><00:00:15.320><c> I'm</c><00:00:15.620><c> out</c><00:00:15.770><c> now</c>

00:00:16.090 --> 00:00:16.100 align:start position:0%
moved to the dark side and I'm out now
 

00:00:16.100 --> 00:00:18.400 align:start position:0%
moved to the dark side and I'm out now
managing<00:00:16.730><c> the</c><00:00:16.850><c> DBM</c><00:00:17.210><c> but</c><00:00:17.480><c> hopefully</c><00:00:18.170><c> I</c><00:00:18.199><c> will</c>

00:00:18.400 --> 00:00:18.410 align:start position:0%
managing the DBM but hopefully I will
 

00:00:18.410 --> 00:00:19.960 align:start position:0%
managing the DBM but hopefully I will
stay<00:00:18.800><c> technically</c><00:00:19.369><c> enough</c><00:00:19.519><c> for</c><00:00:19.669><c> this</c><00:00:19.730><c> to</c><00:00:19.880><c> be</c>

00:00:19.960 --> 00:00:19.970 align:start position:0%
stay technically enough for this to be
 

00:00:19.970 --> 00:00:20.909 align:start position:0%
stay technically enough for this to be
interesting

00:00:20.909 --> 00:00:20.919 align:start position:0%
interesting
 

00:00:20.919 --> 00:00:24.220 align:start position:0%
interesting
hi<00:00:21.919><c> I'm</c><00:00:22.099><c> sandy</c><00:00:22.579><c> sonatine</c><00:00:23.089><c> senior</c><00:00:23.900><c> software</c>

00:00:24.220 --> 00:00:24.230 align:start position:0%
hi I'm sandy sonatine senior software
 

00:00:24.230 --> 00:00:27.730 align:start position:0%
hi I'm sandy sonatine senior software
engineer<00:00:24.349><c> and</c><00:00:25.039><c> technically</c><00:00:26.050><c> Intel</c><00:00:27.050><c> and</c><00:00:27.289><c> we</c>

00:00:27.730 --> 00:00:27.740 align:start position:0%
engineer and technically Intel and we
 

00:00:27.740 --> 00:00:29.310 align:start position:0%
engineer and technically Intel and we
work<00:00:27.890><c> with</c><00:00:28.039><c> Oracle</c><00:00:28.490><c> and</c><00:00:28.759><c> the</c><00:00:28.970><c> open</c><00:00:29.150><c> JDK</c>

00:00:29.310 --> 00:00:29.320 align:start position:0%
work with Oracle and the open JDK
 

00:00:29.320 --> 00:00:32.080 align:start position:0%
work with Oracle and the open JDK
community<00:00:30.320><c> to</c><00:00:30.650><c> optimize</c><00:00:31.070><c> Java</c><00:00:31.400><c> for</c><00:00:31.849><c> Intel</c>

00:00:32.080 --> 00:00:32.090 align:start position:0%
community to optimize Java for Intel
 

00:00:32.090 --> 00:00:36.250 align:start position:0%
community to optimize Java for Intel
platforms<00:00:33.850><c> cool</c><00:00:34.850><c> so</c><00:00:35.629><c> we'll</c><00:00:35.750><c> be</c><00:00:35.870><c> talking</c><00:00:35.989><c> about</c>

00:00:36.250 --> 00:00:36.260 align:start position:0%
platforms cool so we'll be talking about
 

00:00:36.260 --> 00:00:39.189 align:start position:0%
platforms cool so we'll be talking about
hidden<00:00:36.710><c> gems</c><00:00:37.039><c> in</c><00:00:37.160><c> data</c><00:00:37.370><c> k9</c><00:00:37.670><c> this</c><00:00:38.449><c> is</c><00:00:38.899><c> the</c>

00:00:39.189 --> 00:00:39.199 align:start position:0%
hidden gems in data k9 this is the
 

00:00:39.199 --> 00:00:40.540 align:start position:0%
hidden gems in data k9 this is the
Oracle<00:00:39.469><c> version</c><00:00:39.800><c> of</c><00:00:40.039><c> the</c><00:00:40.129><c> slide</c><00:00:40.340><c> that</c><00:00:40.370><c> says</c>

00:00:40.540 --> 00:00:40.550 align:start position:0%
Oracle version of the slide that says
 

00:00:40.550 --> 00:00:42.220 align:start position:0%
Oracle version of the slide that says
that<00:00:40.910><c> everything</c><00:00:41.449><c> I'm</c><00:00:41.539><c> about</c><00:00:41.629><c> to</c><00:00:41.780><c> say</c><00:00:41.870><c> is</c><00:00:42.199><c> a</c>

00:00:42.220 --> 00:00:42.230 align:start position:0%
that everything I'm about to say is a
 

00:00:42.230 --> 00:00:44.439 align:start position:0%
that everything I'm about to say is a
lie<00:00:42.559><c> I</c><00:00:42.920><c> believe</c><00:00:43.430><c> that</c><00:00:43.550><c> Sonia</c><00:00:43.910><c> will</c><00:00:44.030><c> have</c><00:00:44.269><c> her</c>

00:00:44.439 --> 00:00:44.449 align:start position:0%
lie I believe that Sonia will have her
 

00:00:44.449 --> 00:00:46.150 align:start position:0%
lie I believe that Sonia will have her
corresponding<00:00:45.140><c> slide</c><00:00:45.350><c> at</c><00:00:45.500><c> the</c><00:00:45.530><c> end</c><00:00:45.620><c> of</c><00:00:46.039><c> the</c>

00:00:46.150 --> 00:00:46.160 align:start position:0%
corresponding slide at the end of the
 

00:00:46.160 --> 00:00:48.900 align:start position:0%
corresponding slide at the end of the
slide<00:00:46.370><c> deck</c><00:00:46.399><c> so</c><00:00:46.850><c> stay</c><00:00:47.329><c> tuned</c><00:00:47.690><c> for</c><00:00:47.840><c> that</c>

00:00:48.900 --> 00:00:48.910 align:start position:0%
slide deck so stay tuned for that
 

00:00:48.910 --> 00:00:53.560 align:start position:0%
slide deck so stay tuned for that
this<00:00:49.910><c> being</c><00:00:50.239><c> a</c><00:00:50.510><c> presentation</c><00:00:51.230><c> on</c><00:00:51.440><c> JDK</c><00:00:51.890><c> 9</c><00:00:52.570><c> at</c>

00:00:53.560 --> 00:00:53.570 align:start position:0%
this being a presentation on JDK 9 at
 

00:00:53.570 --> 00:00:55.689 align:start position:0%
this being a presentation on JDK 9 at
JavaOne<00:00:53.960><c> shortly</c><00:00:54.500><c> after</c><00:00:54.710><c> we</c><00:00:54.829><c> launched</c>

00:00:55.689 --> 00:00:55.699 align:start position:0%
JavaOne shortly after we launched
 

00:00:55.699 --> 00:00:57.610 align:start position:0%
JavaOne shortly after we launched
galvanize<00:00:56.149><c> clearly</c><00:00:56.870><c> is</c><00:00:56.929><c> two</c><00:00:57.199><c> dimension</c>

00:00:57.610 --> 00:00:57.620 align:start position:0%
galvanize clearly is two dimension
 

00:00:57.620 --> 00:00:59.229 align:start position:0%
galvanize clearly is two dimension
jigsaw<00:00:57.980><c> there's</c><00:00:58.219><c> no</c><00:00:58.370><c> way</c><00:00:58.489><c> around</c><00:00:58.670><c> that</c><00:00:58.910><c> right</c>

00:00:59.229 --> 00:00:59.239 align:start position:0%
jigsaw there's no way around that right
 

00:00:59.239 --> 00:01:00.849 align:start position:0%
jigsaw there's no way around that right
so<00:00:59.750><c> in</c><00:00:59.870><c> theory</c><00:01:00.050><c> this</c><00:01:00.320><c> could</c><00:01:00.379><c> be</c><00:01:00.829><c> a</c>

00:01:00.849 --> 00:01:00.859 align:start position:0%
so in theory this could be a
 

00:01:00.859 --> 00:01:02.709 align:start position:0%
so in theory this could be a
presentation<00:01:01.399><c> of</c><00:01:01.579><c> data</c><00:01:01.760><c> on</c><00:01:02.359><c> jigsaw</c>

00:01:02.709 --> 00:01:02.719 align:start position:0%
presentation of data on jigsaw
 

00:01:02.719 --> 00:01:04.299 align:start position:0%
presentation of data on jigsaw
specifically<00:01:03.289><c> so</c><00:01:03.440><c> all</c><00:01:03.589><c> the</c><00:01:03.769><c> great</c><00:01:03.980><c> stuff</c>

00:01:04.299 --> 00:01:04.309 align:start position:0%
specifically so all the great stuff
 

00:01:04.309 --> 00:01:06.970 align:start position:0%
specifically so all the great stuff
we've<00:01:04.580><c> done</c><00:01:04.610><c> to</c><00:01:04.940><c> modularize</c><00:01:05.120><c> the</c><00:01:05.600><c> JDK</c><00:01:06.050><c> the</c>

00:01:06.970 --> 00:01:06.980 align:start position:0%
we've done to modularize the JDK the
 

00:01:06.980 --> 00:01:09.460 align:start position:0%
we've done to modularize the JDK the
cool<00:01:07.189><c> tools</c><00:01:07.490><c> we</c><00:01:07.790><c> built</c><00:01:08.060><c> to</c><00:01:08.689><c> improve</c><00:01:09.079><c> on</c><00:01:09.350><c> that</c>

00:01:09.460 --> 00:01:09.470 align:start position:0%
cool tools we built to improve on that
 

00:01:09.470 --> 00:01:11.410 align:start position:0%
cool tools we built to improve on that
so<00:01:09.710><c> you</c><00:01:09.799><c> can</c><00:01:09.829><c> create</c><00:01:10.430><c> your</c><00:01:10.520><c> custom</c><00:01:11.030><c> theories</c>

00:01:11.410 --> 00:01:11.420 align:start position:0%
so you can create your custom theories
 

00:01:11.420 --> 00:01:13.600 align:start position:0%
so you can create your custom theories
you<00:01:12.049><c> can</c><00:01:12.229><c> start</c><00:01:12.439><c> out</c><00:01:12.590><c> with</c><00:01:12.799><c> this</c><00:01:12.979><c> module</c><00:01:13.189><c> graph</c>

00:01:13.600 --> 00:01:13.610 align:start position:0%
you can start out with this module graph
 

00:01:13.610 --> 00:01:15.580 align:start position:0%
you can start out with this module graph
that<00:01:13.850><c> we</c><00:01:14.000><c> have</c><00:01:14.119><c> in</c><00:01:14.240><c> the</c><00:01:14.329><c> JDK</c><00:01:14.780><c> you</c><00:01:15.439><c> can</c>

00:01:15.580 --> 00:01:15.590 align:start position:0%
that we have in the JDK you can
 

00:01:15.590 --> 00:01:17.469 align:start position:0%
that we have in the JDK you can
streamline<00:01:15.920><c> that</c><00:01:16.340><c> and</c><00:01:16.640><c> only</c><00:01:16.880><c> include</c><00:01:17.210><c> the</c>

00:01:17.469 --> 00:01:17.479 align:start position:0%
streamline that and only include the
 

00:01:17.479 --> 00:01:19.060 align:start position:0%
streamline that and only include the
modules<00:01:17.810><c> that</c><00:01:17.930><c> you</c><00:01:18.200><c> actually</c><00:01:18.439><c> need</c><00:01:18.680><c> for</c><00:01:18.920><c> your</c>

00:01:19.060 --> 00:01:19.070 align:start position:0%
modules that you actually need for your
 

00:01:19.070 --> 00:01:21.700 align:start position:0%
modules that you actually need for your
job<00:01:19.100><c> application</c><00:01:19.790><c> I</c><00:01:20.450><c> could</c><00:01:21.140><c> talk</c><00:01:21.409><c> about</c><00:01:21.439><c> how</c>

00:01:21.700 --> 00:01:21.710 align:start position:0%
job application I could talk about how
 

00:01:21.710 --> 00:01:24.039 align:start position:0%
job application I could talk about how
you<00:01:21.979><c> end</c><00:01:22.250><c> up</c><00:01:22.399><c> with</c><00:01:22.640><c> runtimes</c><00:01:23.540><c> they</c><00:01:23.810><c> are</c><00:01:23.869><c> very</c>

00:01:24.039 --> 00:01:24.049 align:start position:0%
you end up with runtimes they are very
 

00:01:24.049 --> 00:01:25.480 align:start position:0%
you end up with runtimes they are very
much<00:01:24.229><c> smaller</c>

00:01:25.480 --> 00:01:25.490 align:start position:0%
much smaller
 

00:01:25.490 --> 00:01:27.520 align:start position:0%
much smaller
I<00:01:25.520><c> could</c><00:01:26.030><c> also</c><00:01:26.149><c> touch</c><00:01:26.450><c> on</c><00:01:26.750><c> support</c><00:01:27.290><c> we've</c>

00:01:27.520 --> 00:01:27.530 align:start position:0%
I could also touch on support we've
 

00:01:27.530 --> 00:01:30.730 align:start position:0%
I could also touch on support we've
added<00:01:27.770><c> to</c><00:01:28.220><c> have</c><00:01:28.880><c> multi</c><00:01:29.869><c> release</c><00:01:30.140><c> jar</c><00:01:30.439><c> files</c>

00:01:30.730 --> 00:01:30.740 align:start position:0%
added to have multi release jar files
 

00:01:30.740 --> 00:01:33.069 align:start position:0%
added to have multi release jar files
and<00:01:31.100><c> in</c><00:01:31.880><c> a</c><00:01:32.000><c> way</c><00:01:32.119><c> make</c><00:01:32.360><c> sure</c><00:01:32.540><c> that</c><00:01:32.659><c> you</c><00:01:32.780><c> can</c><00:01:32.930><c> run</c>

00:01:33.069 --> 00:01:33.079 align:start position:0%
and in a way make sure that you can run
 

00:01:33.079 --> 00:01:35.260 align:start position:0%
and in a way make sure that you can run
your<00:01:33.259><c> job</c><00:01:33.590><c> application</c><00:01:33.740><c> no</c><00:01:34.310><c> matter</c><00:01:34.520><c> which</c><00:01:34.759><c> JDK</c>

00:01:35.260 --> 00:01:35.270 align:start position:0%
your job application no matter which JDK
 

00:01:35.270 --> 00:01:37.690 align:start position:0%
your job application no matter which JDK
you're<00:01:35.390><c> running</c><00:01:35.689><c> on</c><00:01:35.810><c> and</c><00:01:36.020><c> stream</c><00:01:36.700><c> seamlessly</c>

00:01:37.690 --> 00:01:37.700 align:start position:0%
you're running on and stream seamlessly
 

00:01:37.700 --> 00:01:39.940 align:start position:0%
you're running on and stream seamlessly
a<00:01:37.729><c> lot</c><00:01:38.360><c> of</c><00:01:38.420><c> people</c><00:01:38.659><c> to</c><00:01:38.780><c> do</c><00:01:38.899><c> that</c><00:01:39.049><c> and</c><00:01:39.290><c> I</c><00:01:39.799><c> can</c>

00:01:39.940 --> 00:01:39.950 align:start position:0%
a lot of people to do that and I can
 

00:01:39.950 --> 00:01:42.130 align:start position:0%
a lot of people to do that and I can
also<00:01:40.100><c> touch</c><00:01:40.369><c> on</c><00:01:40.610><c> support</c><00:01:41.360><c> we</c><00:01:41.570><c> have</c><00:01:41.719><c> added</c><00:01:42.049><c> to</c>

00:01:42.130 --> 00:01:42.140 align:start position:0%
also touch on support we have added to
 

00:01:42.140 --> 00:01:44.410 align:start position:0%
also touch on support we have added to
Java<00:01:42.350><c> C</c><00:01:42.560><c> to</c><00:01:42.860><c> make</c><00:01:43.009><c> that</c><00:01:43.189><c> even</c><00:01:43.340><c> easier</c><00:01:43.700><c> so</c><00:01:44.299><c> that</c>

00:01:44.410 --> 00:01:44.420 align:start position:0%
Java C to make that even easier so that
 

00:01:44.420 --> 00:01:46.749 align:start position:0%
Java C to make that even easier so that
you<00:01:44.509><c> can</c><00:01:44.659><c> compile</c><00:01:45.049><c> for</c><00:01:45.320><c> certain</c><00:01:45.680><c> JDK</c><00:01:46.189><c> release</c>

00:01:46.749 --> 00:01:46.759 align:start position:0%
you can compile for certain JDK release
 

00:01:46.759 --> 00:01:48.910 align:start position:0%
you can compile for certain JDK release
these<00:01:47.509><c> are</c><00:01:47.659><c> all</c><00:01:47.780><c> jigsaw</c><00:01:48.140><c> related</c><00:01:48.500><c> things</c><00:01:48.740><c> so</c>

00:01:48.910 --> 00:01:48.920 align:start position:0%
these are all jigsaw related things so
 

00:01:48.920 --> 00:01:50.200 align:start position:0%
these are all jigsaw related things so
we're<00:01:49.039><c> not</c><00:01:49.189><c> going</c><00:01:49.340><c> to</c><00:01:49.369><c> talk</c><00:01:49.520><c> about</c><00:01:49.729><c> that</c><00:01:49.909><c> this</c>

00:01:50.200 --> 00:01:50.210 align:start position:0%
we're not going to talk about that this
 

00:01:50.210 --> 00:01:53.560 align:start position:0%
we're not going to talk about that this
is<00:01:50.450><c> the</c><00:01:50.600><c> hidden</c><00:01:50.780><c> gems</c><00:01:51.170><c> of</c><00:01:51.500><c> JDK</c><00:01:51.770><c> 9</c><00:01:52.240><c> we're</c><00:01:53.240><c> going</c>

00:01:53.560 --> 00:01:53.570 align:start position:0%
is the hidden gems of JDK 9 we're going
 

00:01:53.570 --> 00:01:55.539 align:start position:0%
is the hidden gems of JDK 9 we're going
to<00:01:53.659><c> try</c><00:01:53.780><c> to</c><00:01:53.840><c> touch</c><00:01:54.110><c> on</c><00:01:54.320><c> the</c><00:01:54.439><c> other</c><00:01:55.100><c> stuff</c><00:01:55.490><c> that</c>

00:01:55.539 --> 00:01:55.549 align:start position:0%
to try to touch on the other stuff that
 

00:01:55.549 --> 00:01:58.179 align:start position:0%
to try to touch on the other stuff that
has<00:01:55.880><c> gone</c><00:01:55.909><c> into</c><00:01:56.210><c> data</c><00:01:56.509><c> k9</c><00:01:56.869><c> so</c><00:01:57.590><c> all</c><00:01:57.740><c> the</c><00:01:57.979><c> small</c>

00:01:58.179 --> 00:01:58.189 align:start position:0%
has gone into data k9 so all the small
 

00:01:58.189 --> 00:01:59.830 align:start position:0%
has gone into data k9 so all the small
things<00:01:58.219><c> that</c><00:01:58.579><c> tend</c><00:01:58.909><c> to</c><00:01:58.969><c> sort</c><00:01:59.210><c> of</c><00:01:59.329><c> end</c><00:01:59.539><c> up</c><00:01:59.719><c> in</c>

00:01:59.830 --> 00:01:59.840 align:start position:0%
things that tend to sort of end up in
 

00:01:59.840 --> 00:02:02.319 align:start position:0%
things that tend to sort of end up in
the<00:01:59.930><c> shadow</c><00:02:00.170><c> in</c><00:02:00.799><c> the</c><00:02:01.159><c> shade</c><00:02:01.369><c> behind</c><00:02:01.759><c> dat</c>

00:02:02.319 --> 00:02:02.329 align:start position:0%
the shadow in the shade behind dat
 

00:02:02.329 --> 00:02:05.740 align:start position:0%
the shadow in the shade behind dat
canine<00:02:02.719><c> jigsaw</c><00:02:03.369><c> I'm</c><00:02:04.369><c> gonna</c><00:02:04.609><c> start</c><00:02:04.850><c> dawn</c><00:02:05.149><c> by</c>

00:02:05.740 --> 00:02:05.750 align:start position:0%
canine jigsaw I'm gonna start dawn by
 

00:02:05.750 --> 00:02:07.599 align:start position:0%
canine jigsaw I'm gonna start dawn by
touching<00:02:05.990><c> on</c><00:02:06.229><c> tools</c><00:02:06.500><c> and</c><00:02:06.740><c> libraries</c><00:02:06.829><c> quickly</c>

00:02:07.599 --> 00:02:07.609 align:start position:0%
touching on tools and libraries quickly
 

00:02:07.609 --> 00:02:09.279 align:start position:0%
touching on tools and libraries quickly
I'm<00:02:07.850><c> gonna</c><00:02:08.090><c> say</c><00:02:08.240><c> something</c><00:02:08.600><c> about</c><00:02:08.660><c> hotspot</c>

00:02:09.279 --> 00:02:09.289 align:start position:0%
I'm gonna say something about hotspot
 

00:02:09.289 --> 00:02:11.619 align:start position:0%
I'm gonna say something about hotspot
and<00:02:09.440><c> JVM</c><00:02:09.800><c> and</c><00:02:10.490><c> Sanjay</c><00:02:10.940><c> is</c><00:02:10.970><c> gonna</c><00:02:11.180><c> touch</c><00:02:11.360><c> a</c><00:02:11.390><c> lot</c>

00:02:11.619 --> 00:02:11.629 align:start position:0%
and JVM and Sanjay is gonna touch a lot
 

00:02:11.629 --> 00:02:13.210 align:start position:0%
and JVM and Sanjay is gonna touch a lot
on<00:02:11.780><c> the</c><00:02:11.930><c> performance</c><00:02:12.620><c> improvements</c><00:02:13.099><c> we've</c>

00:02:13.210 --> 00:02:13.220 align:start position:0%
on the performance improvements we've
 

00:02:13.220 --> 00:02:14.649 align:start position:0%
on the performance improvements we've
done

00:02:14.649 --> 00:02:14.659 align:start position:0%
done
 

00:02:14.659 --> 00:02:17.320 align:start position:0%
done
if<00:02:15.290><c> you</c><00:02:15.409><c> go</c><00:02:15.530><c> to</c><00:02:15.590><c> the</c><00:02:15.799><c> JDK</c><00:02:16.189><c> 9</c><00:02:16.370><c> page</c><00:02:16.700><c> you'll</c><00:02:17.090><c> see</c>

00:02:17.320 --> 00:02:17.330 align:start position:0%
if you go to the JDK 9 page you'll see
 

00:02:17.330 --> 00:02:18.729 align:start position:0%
if you go to the JDK 9 page you'll see
something<00:02:17.599><c> along</c><00:02:18.019><c> the</c><00:02:18.140><c> lines</c><00:02:18.290><c> of</c><00:02:18.470><c> what's</c><00:02:18.650><c> on</c>

00:02:18.729 --> 00:02:18.739 align:start position:0%
something along the lines of what's on
 

00:02:18.739 --> 00:02:20.979 align:start position:0%
something along the lines of what's on
the<00:02:18.860><c> right-hand</c><00:02:19.040><c> side</c><00:02:19.519><c> here</c><00:02:19.549><c> so</c><00:02:19.970><c> we</c><00:02:20.209><c> have</c><00:02:20.510><c> you</c>

00:02:20.979 --> 00:02:20.989 align:start position:0%
the right-hand side here so we have you
 

00:02:20.989 --> 00:02:23.080 align:start position:0%
the right-hand side here so we have you
know<00:02:21.079><c> some</c><00:02:21.319><c> schedule</c><00:02:21.769><c> and</c><00:02:22.069><c> a</c><00:02:22.430><c> bunch</c><00:02:22.879><c> of</c>

00:02:23.080 --> 00:02:23.090 align:start position:0%
know some schedule and a bunch of
 

00:02:23.090 --> 00:02:25.330 align:start position:0%
know some schedule and a bunch of
features<00:02:23.269><c> that</c><00:02:23.959><c> we've</c><00:02:24.140><c> added</c><00:02:24.260><c> that</c><00:02:24.980><c> we</c><00:02:25.129><c> worked</c>

00:02:25.330 --> 00:02:25.340 align:start position:0%
features that we've added that we worked
 

00:02:25.340 --> 00:02:27.550 align:start position:0%
features that we've added that we worked
on<00:02:25.489><c> and</c><00:02:26.269><c> it</c><00:02:26.420><c> doesn't</c><00:02:26.750><c> look</c><00:02:26.870><c> much</c><00:02:26.900><c> until</c><00:02:27.530><c> we</c>

00:02:27.550 --> 00:02:27.560 align:start position:0%
on and it doesn't look much until we
 

00:02:27.560 --> 00:02:29.140 align:start position:0%
on and it doesn't look much until we
realize<00:02:27.950><c> that</c><00:02:27.980><c> the</c><00:02:28.220><c> page</c><00:02:28.400><c> is</c><00:02:28.430><c> significantly</c>

00:02:29.140 --> 00:02:29.150 align:start position:0%
realize that the page is significantly
 

00:02:29.150 --> 00:02:30.850 align:start position:0%
realize that the page is significantly
longer<00:02:29.420><c> than</c><00:02:29.599><c> that</c><00:02:29.720><c> thank</c><00:02:30.290><c> you</c><00:02:30.349><c> are</c><00:02:30.530><c> rarely</c><00:02:30.739><c> oh</c>

00:02:30.850 --> 00:02:30.860 align:start position:0%
longer than that thank you are rarely oh
 

00:02:30.860 --> 00:02:32.110 align:start position:0%
longer than that thank you are rarely oh
by<00:02:31.040><c> the</c><00:02:31.069><c> way</c><00:02:31.159><c> for</c><00:02:31.430><c> this</c><00:02:31.579><c> slide</c><00:02:31.819><c> and</c><00:02:32.030><c> the</c>

00:02:32.110 --> 00:02:32.120 align:start position:0%
by the way for this slide and the
 

00:02:32.120 --> 00:02:34.449 align:start position:0%
by the way for this slide and the
animation<00:02:32.540><c> I</c><00:02:32.989><c> don't</c><00:02:33.950><c> have</c><00:02:34.069><c> the</c><00:02:34.159><c> management</c>

00:02:34.449 --> 00:02:34.459 align:start position:0%
animation I don't have the management
 

00:02:34.459 --> 00:02:37.839 align:start position:0%
animation I don't have the management
skill<00:02:34.790><c> sets</c><00:02:35.060><c> yet</c><00:02:35.360><c> to</c><00:02:35.599><c> create</c><00:02:35.930><c> it</c><00:02:36.079><c> myself</c><00:02:36.849><c> but</c>

00:02:37.839 --> 00:02:37.849 align:start position:0%
skill sets yet to create it myself but
 

00:02:37.849 --> 00:02:39.430 align:start position:0%
skill sets yet to create it myself but
if<00:02:37.970><c> you</c><00:02:38.090><c> want</c><00:02:38.239><c> to</c><00:02:38.299><c> go</c><00:02:38.360><c> look</c><00:02:38.510><c> at</c><00:02:38.690><c> what's</c><00:02:38.930><c> in</c><00:02:39.079><c> JDK</c>

00:02:39.430 --> 00:02:39.440 align:start position:0%
if you want to go look at what's in JDK
 

00:02:39.440 --> 00:02:41.649 align:start position:0%
if you want to go look at what's in JDK
9<00:02:39.650><c> you</c><00:02:40.190><c> can</c><00:02:40.220><c> do</c><00:02:40.459><c> exactly</c><00:02:41.030><c> this</c><00:02:41.209><c> you</c><00:02:41.390><c> can</c><00:02:41.510><c> go</c><00:02:41.599><c> to</c>

00:02:41.649 --> 00:02:41.659 align:start position:0%
9 you can do exactly this you can go to
 

00:02:41.659 --> 00:02:44.050 align:start position:0%
9 you can do exactly this you can go to
the<00:02:41.870><c> JDK</c><00:02:42.170><c> 9</c><00:02:42.319><c> page</c><00:02:42.530><c> and</c><00:02:42.739><c> have</c><00:02:42.829><c> a</c><00:02:42.859><c> look</c><00:02:43.060><c> hopefully</c>

00:02:44.050 --> 00:02:44.060 align:start position:0%
the JDK 9 page and have a look hopefully
 

00:02:44.060 --> 00:02:46.330 align:start position:0%
the JDK 9 page and have a look hopefully
you'll<00:02:44.569><c> get</c><00:02:44.780><c> some</c><00:02:44.840><c> inspiration</c><00:02:45.769><c> from</c><00:02:46.010><c> this</c>

00:02:46.330 --> 00:02:46.340 align:start position:0%
you'll get some inspiration from this
 

00:02:46.340 --> 00:02:49.599 align:start position:0%
you'll get some inspiration from this
presentation<00:02:46.989><c> and</c><00:02:47.989><c> when</c><00:02:48.290><c> I</c><00:02:48.319><c> count</c><00:02:48.650><c> the</c><00:02:49.250><c> depths</c>

00:02:49.599 --> 00:02:49.609 align:start position:0%
presentation and when I count the depths
 

00:02:49.609 --> 00:02:51.039 align:start position:0%
presentation and when I count the depths
we<00:02:49.760><c> have</c><00:02:49.909><c> on</c><00:02:50.000><c> this</c><00:02:50.120><c> page</c><00:02:50.329><c> I</c><00:02:50.569><c> ended</c><00:02:50.810><c> up</c><00:02:50.900><c> with</c>

00:02:51.039 --> 00:02:51.049 align:start position:0%
we have on this page I ended up with
 

00:02:51.049 --> 00:02:53.830 align:start position:0%
we have on this page I ended up with
something

00:02:53.830 --> 00:02:53.840 align:start position:0%
 
 

00:02:53.840 --> 00:02:57.330 align:start position:0%
 
jep's<00:02:54.709><c> are</c><00:02:55.099><c> our</c><00:02:55.340><c> JDK</c><00:02:55.879><c> enhancement</c><00:02:56.629><c> proposals</c>

00:02:57.330 --> 00:02:57.340 align:start position:0%
jep's are our JDK enhancement proposals
 

00:02:57.340 --> 00:03:00.789 align:start position:0%
jep's are our JDK enhancement proposals
therefore<00:02:58.340><c> relatively</c><00:02:59.180><c> large</c><00:02:59.690><c> features</c><00:03:00.349><c> are</c>

00:03:00.789 --> 00:03:00.799 align:start position:0%
therefore relatively large features are
 

00:03:00.799 --> 00:03:03.910 align:start position:0%
therefore relatively large features are
very<00:03:01.129><c> visible</c><00:03:01.430><c> or</c><00:03:02.019><c> things</c><00:03:03.019><c> that</c><00:03:03.109><c> are</c><00:03:03.260><c> very</c><00:03:03.409><c> big</c>

00:03:03.910 --> 00:03:03.920 align:start position:0%
very visible or things that are very big
 

00:03:03.920 --> 00:03:05.920 align:start position:0%
very visible or things that are very big
impact<00:03:04.280><c> or</c><00:03:04.549><c> large</c><00:03:05.030><c> features</c><00:03:05.480><c> and</c><00:03:05.690><c> in</c><00:03:05.750><c> many</c>

00:03:05.920 --> 00:03:05.930 align:start position:0%
impact or large features and in many
 

00:03:05.930 --> 00:03:09.220 align:start position:0%
impact or large features and in many
cases<00:03:06.109><c> its</c><00:03:06.560><c> large</c><00:03:06.769><c> features</c><00:03:07.220><c> so</c><00:03:08.120><c> in</c><00:03:08.450><c> JDK</c><00:03:08.870><c> 9</c><00:03:09.049><c> we</c>

00:03:09.220 --> 00:03:09.230 align:start position:0%
cases its large features so in JDK 9 we
 

00:03:09.230 --> 00:03:12.099 align:start position:0%
cases its large features so in JDK 9 we
have<00:03:09.349><c> 90</c><00:03:09.889><c> really</c><00:03:10.489><c> big</c><00:03:10.639><c> features</c><00:03:11.090><c> this</c><00:03:11.510><c> is</c><00:03:11.750><c> just</c>

00:03:12.099 --> 00:03:12.109 align:start position:0%
have 90 really big features this is just
 

00:03:12.109 --> 00:03:14.890 align:start position:0%
have 90 really big features this is just
counting<00:03:12.379><c> the</c><00:03:12.739><c> Japs</c><00:03:13.040><c> on</c><00:03:13.970><c> top</c><00:03:14.299><c> of</c><00:03:14.480><c> that</c><00:03:14.569><c> we</c><00:03:14.780><c> have</c>

00:03:14.890 --> 00:03:14.900 align:start position:0%
counting the Japs on top of that we have
 

00:03:14.900 --> 00:03:16.750 align:start position:0%
counting the Japs on top of that we have
all<00:03:15.019><c> the</c><00:03:15.260><c> other</c><00:03:15.379><c> improvements</c><00:03:16.010><c> so</c><00:03:16.340><c> this</c><00:03:16.519><c> is</c><00:03:16.730><c> a</c>

00:03:16.750 --> 00:03:16.760 align:start position:0%
all the other improvements so this is a
 

00:03:16.760 --> 00:03:18.849 align:start position:0%
all the other improvements so this is a
big<00:03:17.060><c> release</c><00:03:17.420><c> for</c><00:03:17.629><c> us</c><00:03:17.659><c> it</c><00:03:17.930><c> contains</c><00:03:18.230><c> a</c><00:03:18.379><c> lot</c><00:03:18.620><c> of</c>

00:03:18.849 --> 00:03:18.859 align:start position:0%
big release for us it contains a lot of
 

00:03:18.859 --> 00:03:20.199 align:start position:0%
big release for us it contains a lot of
different<00:03:19.160><c> things</c><00:03:19.280><c> and</c><00:03:19.669><c> again</c><00:03:19.970><c> if</c><00:03:20.090><c> we're</c>

00:03:20.199 --> 00:03:20.209 align:start position:0%
different things and again if we're
 

00:03:20.209 --> 00:03:21.970 align:start position:0%
different things and again if we're
gonna<00:03:20.359><c> touch</c><00:03:20.569><c> on</c><00:03:20.690><c> a</c><00:03:20.750><c> few</c><00:03:20.810><c> of</c><00:03:21.199><c> them</c><00:03:21.349><c> in</c><00:03:21.799><c> this</c>

00:03:21.970 --> 00:03:21.980 align:start position:0%
gonna touch on a few of them in this
 

00:03:21.980 --> 00:03:27.000 align:start position:0%
gonna touch on a few of them in this
presentation<00:03:22.400><c> so</c><00:03:23.829><c> starting</c><00:03:24.829><c> with</c><00:03:25.250><c> the</c><00:03:26.030><c> the</c>

00:03:27.000 --> 00:03:27.010 align:start position:0%
presentation so starting with the the
 

00:03:27.010 --> 00:03:29.890 align:start position:0%
presentation so starting with the the
the<00:03:28.010><c> tools</c><00:03:28.190><c> and</c><00:03:28.310><c> libraries</c><00:03:28.629><c> one</c><00:03:29.629><c> thing</c><00:03:29.810><c> we</c>

00:03:29.890 --> 00:03:29.900 align:start position:0%
the tools and libraries one thing we
 

00:03:29.900 --> 00:03:31.839 align:start position:0%
the tools and libraries one thing we
have<00:03:30.079><c> added</c><00:03:30.440><c> and</c><00:03:30.620><c> I</c><00:03:30.709><c> don't</c><00:03:30.769><c> think</c><00:03:30.949><c> that's</c><00:03:31.579><c> not</c>

00:03:31.839 --> 00:03:31.849 align:start position:0%
have added and I don't think that's not
 

00:03:31.849 --> 00:03:33.849 align:start position:0%
have added and I don't think that's not
anything<00:03:31.970><c> like</c><00:03:32.239><c> no</c><00:03:32.680><c> presentation</c><00:03:33.680><c> of</c><00:03:33.769><c> the</c>

00:03:33.849 --> 00:03:33.859 align:start position:0%
anything like no presentation of the
 

00:03:33.859 --> 00:03:35.229 align:start position:0%
anything like no presentation of the
other<00:03:33.980><c> one</c><00:03:34.160><c> here</c><00:03:34.340><c> is</c><00:03:34.430><c> complete</c><00:03:34.790><c> without</c><00:03:35.060><c> at</c>

00:03:35.229 --> 00:03:35.239 align:start position:0%
other one here is complete without at
 

00:03:35.239 --> 00:03:37.089 align:start position:0%
other one here is complete without at
least<00:03:35.299><c> it</c><00:03:35.569><c> touching</c><00:03:36.109><c> on</c><00:03:36.260><c> Jay</c><00:03:36.470><c> shell</c><00:03:36.739><c> because</c>

00:03:37.089 --> 00:03:37.099 align:start position:0%
least it touching on Jay shell because
 

00:03:37.099 --> 00:03:40.569 align:start position:0%
least it touching on Jay shell because
it's<00:03:37.280><c> such</c><00:03:37.579><c> a</c><00:03:37.609><c> cool</c><00:03:37.940><c> tool</c><00:03:38.260><c> so</c><00:03:39.260><c> other</c><00:03:40.069><c> runtimes</c>

00:03:40.569 --> 00:03:40.579 align:start position:0%
it's such a cool tool so other runtimes
 

00:03:40.579 --> 00:03:43.960 align:start position:0%
it's such a cool tool so other runtimes
have<00:03:40.760><c> had</c><00:03:40.910><c> support</c><00:03:41.299><c> for</c><00:03:41.510><c> rebel</c><00:03:42.199><c> based</c><00:03:42.970><c> playing</c>

00:03:43.960 --> 00:03:43.970 align:start position:0%
have had support for rebel based playing
 

00:03:43.970 --> 00:03:46.119 align:start position:0%
have had support for rebel based playing
around<00:03:44.209><c> with</c><00:03:44.419><c> code</c><00:03:44.660><c> for</c><00:03:44.989><c> quite</c><00:03:45.349><c> some</c><00:03:45.709><c> time</c><00:03:45.739><c> and</c>

00:03:46.119 --> 00:03:46.129 align:start position:0%
around with code for quite some time and
 

00:03:46.129 --> 00:03:48.400 align:start position:0%
around with code for quite some time and
now<00:03:46.160><c> it's</c><00:03:46.400><c> the</c><00:03:46.910><c> turn</c><00:03:47.060><c> has</c><00:03:47.180><c> come</c><00:03:47.329><c> to</c><00:03:47.480><c> Java</c><00:03:47.690><c> so</c>

00:03:48.400 --> 00:03:48.410 align:start position:0%
now it's the turn has come to Java so
 

00:03:48.410 --> 00:03:51.009 align:start position:0%
now it's the turn has come to Java so
Jay<00:03:48.620><c> shell</c><00:03:48.889><c> is</c><00:03:49.069><c> a</c><00:03:49.099><c> read</c><00:03:49.430><c> eval</c><00:03:49.699><c> print</c><00:03:49.879><c> loop</c><00:03:50.299><c> tool</c>

00:03:51.009 --> 00:03:51.019 align:start position:0%
Jay shell is a read eval print loop tool
 

00:03:51.019 --> 00:03:53.860 align:start position:0%
Jay shell is a read eval print loop tool
that<00:03:51.739><c> you</c><00:03:51.829><c> can</c><00:03:51.949><c> use</c><00:03:52.010><c> to</c><00:03:52.250><c> try</c><00:03:52.940><c> out</c><00:03:53.090><c> things</c><00:03:53.449><c> try</c>

00:03:53.860 --> 00:03:53.870 align:start position:0%
that you can use to try out things try
 

00:03:53.870 --> 00:03:56.649 align:start position:0%
that you can use to try out things try
out<00:03:54.019><c> code</c><00:03:54.769><c> and</c><00:03:55.299><c> experiment</c><00:03:56.299><c> with</c><00:03:56.449><c> things</c>

00:03:56.649 --> 00:03:56.659 align:start position:0%
out code and experiment with things
 

00:03:56.659 --> 00:03:58.839 align:start position:0%
out code and experiment with things
without<00:03:56.989><c> having</c><00:03:57.440><c> to</c><00:03:57.739><c> create</c><00:03:58.129><c> your</c><00:03:58.370><c> Java</c><00:03:58.609><c> class</c>

00:03:58.839 --> 00:03:58.849 align:start position:0%
without having to create your Java class
 

00:03:58.849 --> 00:04:00.699 align:start position:0%
without having to create your Java class
file<00:03:59.120><c> and</c><00:03:59.359><c> use</c><00:03:59.510><c> Java</c><00:03:59.810><c> C</c><00:03:59.959><c> to</c><00:04:00.079><c> compile</c><00:04:00.409><c> it</c><00:04:00.560><c> and</c>

00:04:00.699 --> 00:04:00.709 align:start position:0%
file and use Java C to compile it and
 

00:04:00.709 --> 00:04:03.909 align:start position:0%
file and use Java C to compile it and
deploy<00:04:00.889><c> it</c><00:04:01.010><c> and</c><00:04:01.220><c> all</c><00:04:01.310><c> of</c><00:04:01.340><c> that</c><00:04:02.139><c> so</c><00:04:03.139><c> I'm</c><00:04:03.260><c> running</c>

00:04:03.909 --> 00:04:03.919 align:start position:0%
deploy it and all of that so I'm running
 

00:04:03.919 --> 00:04:05.879 align:start position:0%
deploy it and all of that so I'm running
Jay<00:04:04.250><c> shell</c><00:04:04.430><c> here</c><00:04:04.639><c> hopefully</c><00:04:05.120><c> you</c><00:04:05.209><c> can</c><00:04:05.329><c> see</c>

00:04:05.879 --> 00:04:05.889 align:start position:0%
Jay shell here hopefully you can see
 

00:04:05.889 --> 00:04:08.949 align:start position:0%
Jay shell here hopefully you can see
well<00:04:06.889><c> maybe</c><00:04:07.459><c> not</c><00:04:07.609><c> the</c><00:04:07.819><c> leftmost</c><00:04:08.239><c> couple</c><00:04:08.870><c> of</c>

00:04:08.949 --> 00:04:08.959 align:start position:0%
well maybe not the leftmost couple of
 

00:04:08.959 --> 00:04:11.979 align:start position:0%
well maybe not the leftmost couple of
pixels<00:04:09.319><c> but</c><00:04:10.040><c> at</c><00:04:10.430><c> least</c><00:04:10.549><c> GHL</c><00:04:11.030><c> you</c><00:04:11.720><c> can</c><00:04:11.900><c> do</c>

00:04:11.979 --> 00:04:11.989 align:start position:0%
pixels but at least GHL you can do
 

00:04:11.989 --> 00:04:13.780 align:start position:0%
pixels but at least GHL you can do
obviously<00:04:12.169><c> simple</c><00:04:12.739><c> things</c><00:04:12.919><c> like</c><00:04:13.190><c> adding</c><00:04:13.699><c> a</c>

00:04:13.780 --> 00:04:13.790 align:start position:0%
obviously simple things like adding a
 

00:04:13.790 --> 00:04:17.110 align:start position:0%
obviously simple things like adding a
couple<00:04:13.970><c> of</c><00:04:14.060><c> numbers</c><00:04:14.620><c> why</c><00:04:15.620><c> not</c><00:04:15.799><c> assign</c><00:04:16.250><c> a</c>

00:04:17.110 --> 00:04:17.120 align:start position:0%
couple of numbers why not assign a
 

00:04:17.120 --> 00:04:20.349 align:start position:0%
couple of numbers why not assign a
variable<00:04:17.510><c> and</c><00:04:17.989><c> why</c><00:04:18.470><c> not</c><00:04:18.650><c> say</c><00:04:18.889><c> you</c><00:04:19.639><c> know</c><00:04:19.729><c> take</c>

00:04:20.349 --> 00:04:20.359 align:start position:0%
variable and why not say you know take
 

00:04:20.359 --> 00:04:21.819 align:start position:0%
variable and why not say you know take
that<00:04:20.539><c> variable</c><00:04:20.900><c> and</c><00:04:21.019><c> add</c><00:04:21.109><c> four</c><00:04:21.349><c> these</c><00:04:21.530><c> are</c><00:04:21.680><c> all</c>

00:04:21.819 --> 00:04:21.829 align:start position:0%
that variable and add four these are all
 

00:04:21.829 --> 00:04:24.070 align:start position:0%
that variable and add four these are all
sort<00:04:22.070><c> of</c><00:04:22.130><c> standard</c><00:04:23.000><c> simple</c><00:04:23.389><c> things</c><00:04:23.630><c> you</c>

00:04:24.070 --> 00:04:24.080 align:start position:0%
sort of standard simple things you
 

00:04:24.080 --> 00:04:25.760 align:start position:0%
sort of standard simple things you
should<00:04:24.289><c> recognize</c><00:04:24.500><c> most</c><00:04:24.889><c> of</c><00:04:25.070><c> them</c>

00:04:25.760 --> 00:04:25.770 align:start position:0%
should recognize most of them
 

00:04:25.770 --> 00:04:28.290 align:start position:0%
should recognize most of them
that's<00:04:26.770><c> J</c><00:04:27.039><c> shell</c><00:04:27.250><c> in</c><00:04:27.370><c> itself</c><00:04:27.639><c> but</c><00:04:27.939><c> J</c><00:04:28.090><c> shell</c>

00:04:28.290 --> 00:04:28.300 align:start position:0%
that's J shell in itself but J shell
 

00:04:28.300 --> 00:04:30.420 align:start position:0%
that's J shell in itself but J shell
also<00:04:28.990><c> has</c><00:04:29.110><c> other</c><00:04:29.289><c> cool</c><00:04:29.560><c> functionalities</c><00:04:30.189><c> I'm</c>

00:04:30.420 --> 00:04:30.430 align:start position:0%
also has other cool functionalities I'm
 

00:04:30.430 --> 00:04:32.159 align:start position:0%
also has other cool functionalities I'm
gonna<00:04:30.580><c> actually</c><00:04:31.090><c> demo</c><00:04:31.449><c> another</c><00:04:31.750><c> thing</c><00:04:32.020><c> that</c>

00:04:32.159 --> 00:04:32.169 align:start position:0%
gonna actually demo another thing that
 

00:04:32.169 --> 00:04:34.920 align:start position:0%
gonna actually demo another thing that
we<00:04:32.289><c> have</c><00:04:32.319><c> added</c><00:04:33.310><c> in</c><00:04:33.490><c> jdk</c><00:04:33.849><c> 9</c><00:04:34.060><c> the</c><00:04:34.599><c> first</c><00:04:34.780><c> thing</c>

00:04:34.920 --> 00:04:34.930 align:start position:0%
we have added in jdk 9 the first thing
 

00:04:34.930 --> 00:04:36.959 align:start position:0%
we have added in jdk 9 the first thing
I'm<00:04:35.020><c> gonna</c><00:04:35.110><c> do</c><00:04:35.289><c> is</c><00:04:35.439><c> to</c><00:04:35.560><c> say</c><00:04:35.680><c> list</c><00:04:35.949><c> ov</c><00:04:36.430><c> and</c><00:04:36.729><c> then</c>

00:04:36.959 --> 00:04:36.969 align:start position:0%
I'm gonna do is to say list ov and then
 

00:04:36.969 --> 00:04:40.050 align:start position:0%
I'm gonna do is to say list ov and then
I'm<00:04:37.060><c> gonna</c><00:04:37.180><c> tab</c><00:04:37.830><c> and</c><00:04:38.830><c> J</c><00:04:39.400><c> shell</c><00:04:39.639><c> actually</c><00:04:39.939><c> has</c>

00:04:40.050 --> 00:04:40.060 align:start position:0%
I'm gonna tab and J shell actually has
 

00:04:40.060 --> 00:04:43.409 align:start position:0%
I'm gonna tab and J shell actually has
support<00:04:40.449><c> for</c><00:04:41.460><c> printing</c><00:04:42.460><c> out</c><00:04:42.580><c> the</c><00:04:42.789><c> Java</c><00:04:43.030><c> Docs</c>

00:04:43.409 --> 00:04:43.419 align:start position:0%
support for printing out the Java Docs
 

00:04:43.419 --> 00:04:45.839 align:start position:0%
support for printing out the Java Docs
for<00:04:43.900><c> methods</c><00:04:44.560><c> it</c><00:04:44.740><c> has</c><00:04:44.770><c> tab</c><00:04:45.099><c> completion</c><00:04:45.490><c> and</c>

00:04:45.839 --> 00:04:45.849 align:start position:0%
for methods it has tab completion and
 

00:04:45.849 --> 00:04:48.540 align:start position:0%
for methods it has tab completion and
and<00:04:46.330><c> can</c><00:04:46.449><c> also</c><00:04:46.599><c> print</c><00:04:47.409><c> out</c><00:04:47.500><c> the</c><00:04:47.949><c> Java</c><00:04:48.159><c> Docs</c><00:04:48.400><c> you</c>

00:04:48.540 --> 00:04:48.550 align:start position:0%
and can also print out the Java Docs you
 

00:04:48.550 --> 00:04:50.909 align:start position:0%
and can also print out the Java Docs you
can<00:04:48.610><c> get</c><00:04:48.849><c> help</c><00:04:49.090><c> in</c><00:04:49.389><c> the</c><00:04:49.750><c> J</c><00:04:49.900><c> shell</c><00:04:50.169><c> tool</c><00:04:50.409><c> itself</c>

00:04:50.909 --> 00:04:50.919 align:start position:0%
can get help in the J shell tool itself
 

00:04:50.919 --> 00:04:53.339 align:start position:0%
can get help in the J shell tool itself
in<00:04:51.520><c> case</c><00:04:51.849><c> you're</c><00:04:52.090><c> not</c><00:04:52.270><c> sure</c><00:04:52.449><c> what</c><00:04:52.719><c> parameters</c>

00:04:53.339 --> 00:04:53.349 align:start position:0%
in case you're not sure what parameters
 

00:04:53.349 --> 00:04:56.249 align:start position:0%
in case you're not sure what parameters
the<00:04:53.530><c> function</c><00:04:54.490><c> takes</c><00:04:54.840><c> method</c><00:04:55.840><c> takes</c><00:04:56.020><c> I</c><00:04:56.139><c> should</c>

00:04:56.249 --> 00:04:56.259 align:start position:0%
the function takes method takes I should
 

00:04:56.259 --> 00:05:00.179 align:start position:0%
the function takes method takes I should
say<00:04:56.789><c> in</c><00:04:57.789><c> this</c><00:04:58.060><c> case</c><00:04:58.270><c> it</c><00:04:58.960><c> may</c><00:04:59.169><c> be</c><00:04:59.229><c> a</c><00:04:59.319><c> bit</c><00:04:59.590><c> you</c>

00:05:00.179 --> 00:05:00.189 align:start position:0%
say in this case it may be a bit you
 

00:05:00.189 --> 00:05:01.800 align:start position:0%
say in this case it may be a bit you
know<00:05:00.310><c> mysterious</c><00:05:01.000><c> when</c><00:05:01.270><c> you</c><00:05:01.360><c> look</c><00:05:01.509><c> at</c><00:05:01.659><c> this</c>

00:05:01.800 --> 00:05:01.810 align:start position:0%
know mysterious when you look at this
 

00:05:01.810 --> 00:05:04.080 align:start position:0%
know mysterious when you look at this
but<00:05:02.050><c> what</c><00:05:02.620><c> I'm</c><00:05:02.710><c> gonna</c><00:05:02.830><c> say</c><00:05:03.099><c> next</c><00:05:03.310><c> is</c><00:05:03.759><c> that</c>

00:05:04.080 --> 00:05:04.090 align:start position:0%
but what I'm gonna say next is that
 

00:05:04.090 --> 00:05:05.369 align:start position:0%
but what I'm gonna say next is that
we've<00:05:04.270><c> added</c><00:05:04.449><c> a</c><00:05:04.629><c> func</c><00:05:04.840><c> a</c><00:05:05.080><c> piece</c><00:05:05.259><c> of</c>

00:05:05.369 --> 00:05:05.379 align:start position:0%
we've added a func a piece of
 

00:05:05.379 --> 00:05:07.679 align:start position:0%
we've added a func a piece of
functionality<00:05:05.529><c> called</c><00:05:06.210><c> convenience</c><00:05:07.210><c> methods</c>

00:05:07.679 --> 00:05:07.689 align:start position:0%
functionality called convenience methods
 

00:05:07.689 --> 00:05:11.879 align:start position:0%
functionality called convenience methods
for<00:05:08.009><c> collection</c><00:05:09.330><c> convenience</c><00:05:10.620><c> methods</c><00:05:11.620><c> for</c>

00:05:11.879 --> 00:05:11.889 align:start position:0%
for collection convenience methods for
 

00:05:11.889 --> 00:05:15.809 align:start position:0%
for collection convenience methods for
collections<00:05:12.310><c> Factory</c><00:05:13.180><c> whatever</c><00:05:13.539><c> I</c><00:05:14.490><c> have</c><00:05:15.490><c> a</c>

00:05:15.809 --> 00:05:15.819 align:start position:0%
collections Factory whatever I have a
 

00:05:15.819 --> 00:05:17.670 align:start position:0%
collections Factory whatever I have a
set<00:05:16.240><c> of</c><00:05:16.360><c> functions</c><00:05:16.810><c> methods</c><00:05:17.229><c> that</c><00:05:17.379><c> make</c><00:05:17.560><c> it</c>

00:05:17.670 --> 00:05:17.680 align:start position:0%
set of functions methods that make it
 

00:05:17.680 --> 00:05:19.890 align:start position:0%
set of functions methods that make it
easier<00:05:17.979><c> to</c><00:05:18.039><c> create</c><00:05:18.370><c> collections</c><00:05:18.939><c> with</c><00:05:19.870><c> a</c>

00:05:19.890 --> 00:05:19.900 align:start position:0%
easier to create collections with a
 

00:05:19.900 --> 00:05:22.110 align:start position:0%
easier to create collections with a
smallish<00:05:20.560><c> number</c><00:05:20.889><c> of</c><00:05:20.979><c> elements</c><00:05:21.370><c> so</c><00:05:21.580><c> you</c><00:05:21.849><c> can't</c>

00:05:22.110 --> 00:05:22.120 align:start position:0%
smallish number of elements so you can't
 

00:05:22.120 --> 00:05:23.610 align:start position:0%
smallish number of elements so you can't
use<00:05:22.300><c> this</c><00:05:22.539><c> to</c><00:05:22.750><c> create</c><00:05:22.930><c> collections</c><00:05:23.229><c> with</c><00:05:23.590><c> a</c>

00:05:23.610 --> 00:05:23.620 align:start position:0%
use this to create collections with a
 

00:05:23.620 --> 00:05:25.230 align:start position:0%
use this to create collections with a
hundred<00:05:23.949><c> elements</c><00:05:24.159><c> but</c><00:05:24.490><c> you</c><00:05:24.580><c> can</c><00:05:24.759><c> use</c><00:05:24.939><c> it</c><00:05:25.090><c> for</c>

00:05:25.230 --> 00:05:25.240 align:start position:0%
hundred elements but you can use it for
 

00:05:25.240 --> 00:05:28.110 align:start position:0%
hundred elements but you can use it for
single<00:05:25.779><c> element</c><00:05:26.139><c> or</c><00:05:26.379><c> up</c><00:05:26.650><c> to</c><00:05:26.800><c> eight</c><00:05:26.949><c> or</c><00:05:27.219><c> so</c><00:05:27.370><c> ten</c>

00:05:28.110 --> 00:05:28.120 align:start position:0%
single element or up to eight or so ten
 

00:05:28.120 --> 00:05:31.499 align:start position:0%
single element or up to eight or so ten
in<00:05:28.300><c> this</c><00:05:28.419><c> case</c><00:05:28.569><c> I</c><00:05:28.689><c> guess</c><00:05:28.860><c> and</c><00:05:30.089><c> the</c><00:05:31.089><c> nice</c><00:05:31.240><c> part</c>

00:05:31.499 --> 00:05:31.509 align:start position:0%
in this case I guess and the nice part
 

00:05:31.509 --> 00:05:33.149 align:start position:0%
in this case I guess and the nice part
about<00:05:31.539><c> these</c><00:05:31.750><c> things</c><00:05:32.050><c> is</c><00:05:32.229><c> obviously</c><00:05:32.379><c> takes</c>

00:05:33.149 --> 00:05:33.159 align:start position:0%
about these things is obviously takes
 

00:05:33.159 --> 00:05:34.860 align:start position:0%
about these things is obviously takes
less<00:05:33.370><c> typing</c><00:05:33.580><c> what</c><00:05:34.060><c> you'd</c><00:05:34.180><c> normally</c><00:05:34.389><c> have</c><00:05:34.779><c> to</c>

00:05:34.860 --> 00:05:34.870 align:start position:0%
less typing what you'd normally have to
 

00:05:34.870 --> 00:05:36.600 align:start position:0%
less typing what you'd normally have to
do<00:05:34.990><c> is</c><00:05:35.139><c> to</c><00:05:35.259><c> first</c><00:05:35.529><c> create</c><00:05:35.740><c> your</c><00:05:35.979><c> list</c><00:05:36.159><c> and</c><00:05:36.550><c> then</c>

00:05:36.600 --> 00:05:36.610 align:start position:0%
do is to first create your list and then
 

00:05:36.610 --> 00:05:38.490 align:start position:0%
do is to first create your list and then
go<00:05:36.699><c> add</c><00:05:37.029><c> and</c><00:05:37.389><c> add</c><00:05:37.629><c> and</c><00:05:37.659><c> then</c><00:05:38.110><c> you</c><00:05:38.199><c> can</c><00:05:38.349><c> start</c>

00:05:38.490 --> 00:05:38.500 align:start position:0%
go add and add and then you can start
 

00:05:38.500 --> 00:05:41.790 align:start position:0%
go add and add and then you can start
using<00:05:38.680><c> the</c><00:05:38.979><c> collection</c><00:05:39.940><c> yeah</c><00:05:40.779><c> with</c><00:05:41.229><c> this</c><00:05:41.469><c> you</c>

00:05:41.790 --> 00:05:41.800 align:start position:0%
using the collection yeah with this you
 

00:05:41.800 --> 00:05:43.649 align:start position:0%
using the collection yeah with this you
can<00:05:41.919><c> instead</c><00:05:42.219><c> create</c><00:05:42.520><c> a</c><00:05:42.550><c> list</c><00:05:42.849><c> of</c><00:05:43.210><c> let's</c><00:05:43.539><c> say</c>

00:05:43.649 --> 00:05:43.659 align:start position:0%
can instead create a list of let's say
 

00:05:43.659 --> 00:05:45.269 align:start position:0%
can instead create a list of let's say
I'm<00:05:43.750><c> gonna</c><00:05:43.900><c> have</c><00:05:44.289><c> three</c><00:05:44.589><c> elements</c><00:05:44.800><c> to</c><00:05:45.159><c> this</c>

00:05:45.269 --> 00:05:45.279 align:start position:0%
I'm gonna have three elements to this
 

00:05:45.279 --> 00:05:47.129 align:start position:0%
I'm gonna have three elements to this
list<00:05:45.550><c> and</c><00:05:45.759><c> all</c><00:05:45.879><c> of</c><00:05:45.969><c> a</c><00:05:46.029><c> sudden</c><00:05:46.300><c> I</c><00:05:46.360><c> have</c><00:05:46.539><c> a</c><00:05:46.839><c> list</c>

00:05:47.129 --> 00:05:47.139 align:start position:0%
list and all of a sudden I have a list
 

00:05:47.139 --> 00:05:50.219 align:start position:0%
list and all of a sudden I have a list
of<00:05:47.379><c> three</c><00:05:47.589><c> elements</c><00:05:48.569><c> what</c><00:05:49.569><c> you</c><00:05:49.690><c> can't</c><00:05:49.960><c> see</c>

00:05:50.219 --> 00:05:50.229 align:start position:0%
of three elements what you can't see
 

00:05:50.229 --> 00:05:53.100 align:start position:0%
of three elements what you can't see
here<00:05:50.259><c> I</c><00:05:50.680><c> I</c><00:05:51.069><c> guess</c><00:05:51.460><c> I</c><00:05:51.580><c> could</c><00:05:51.729><c> force</c><00:05:52.000><c> it</c><00:05:52.180><c> but</c><00:05:52.389><c> the</c>

00:05:53.100 --> 00:05:53.110 align:start position:0%
here I I guess I could force it but the
 

00:05:53.110 --> 00:05:54.990 align:start position:0%
here I I guess I could force it but the
collection<00:05:53.710><c> here</c><00:05:53.889><c> is</c><00:05:54.069><c> actually</c><00:05:54.400><c> immutable</c>

00:05:54.990 --> 00:05:55.000 align:start position:0%
collection here is actually immutable
 

00:05:55.000 --> 00:05:58.230 align:start position:0%
collection here is actually immutable
it's<00:05:55.270><c> it's</c><00:05:55.569><c> non-modifiable</c><00:05:56.580><c> so</c><00:05:57.580><c> you</c><00:05:57.639><c> get</c><00:05:58.029><c> back</c>

00:05:58.230 --> 00:05:58.240 align:start position:0%
it's it's non-modifiable so you get back
 

00:05:58.240 --> 00:06:00.119 align:start position:0%
it's it's non-modifiable so you get back
something<00:05:58.750><c> that</c><00:05:58.870><c> is</c><00:05:59.020><c> read-only</c><00:05:59.439><c> you</c><00:05:59.889><c> can't</c>

00:06:00.119 --> 00:06:00.129 align:start position:0%
something that is read-only you can't
 

00:06:00.129 --> 00:06:01.559 align:start position:0%
something that is read-only you can't
actually<00:06:00.310><c> add</c><00:06:00.550><c> elements</c><00:06:01.060><c> to</c><00:06:01.089><c> it</c><00:06:01.270><c> you</c><00:06:01.389><c> can't</c>

00:06:01.559 --> 00:06:01.569 align:start position:0%
actually add elements to it you can't
 

00:06:01.569 --> 00:06:03.510 align:start position:0%
actually add elements to it you can't
remove<00:06:01.900><c> elements</c><00:06:02.379><c> to</c><00:06:02.500><c> it</c><00:06:02.650><c> and</c><00:06:02.889><c> there</c><00:06:03.310><c> are</c><00:06:03.400><c> some</c>

00:06:03.510 --> 00:06:03.520 align:start position:0%
remove elements to it and there are some
 

00:06:03.520 --> 00:06:06.179 align:start position:0%
remove elements to it and there are some
nice<00:06:03.699><c> parts</c><00:06:04.360><c> to</c><00:06:04.539><c> that</c><00:06:04.569><c> that</c><00:06:05.439><c> we</c><00:06:05.740><c> can</c><00:06:05.979><c> leverage</c>

00:06:06.179 --> 00:06:06.189 align:start position:0%
nice parts to that that we can leverage
 

00:06:06.189 --> 00:06:09.540 align:start position:0%
nice parts to that that we can leverage
inside<00:06:06.759><c> of</c><00:06:06.879><c> the</c><00:06:06.969><c> JDK</c><00:06:07.240><c> in</c><00:06:07.479><c> the</c><00:06:07.569><c> JVM</c><00:06:07.960><c> to</c><00:06:08.740><c> optimize</c>

00:06:09.540 --> 00:06:09.550 align:start position:0%
inside of the JDK in the JVM to optimize
 

00:06:09.550 --> 00:06:12.300 align:start position:0%
inside of the JDK in the JVM to optimize
the<00:06:09.729><c> implementation</c><00:06:10.689><c> of</c><00:06:10.839><c> this</c><00:06:11.199><c> collection</c><00:06:11.529><c> so</c>

00:06:12.300 --> 00:06:12.310 align:start position:0%
the implementation of this collection so
 

00:06:12.310 --> 00:06:15.600 align:start position:0%
the implementation of this collection so
if<00:06:12.639><c> we</c><00:06:12.939><c> for</c><00:06:13.120><c> example</c><00:06:13.979><c> find</c><00:06:14.979><c> a</c><00:06:15.099><c> better</c><00:06:15.339><c> way</c><00:06:15.580><c> of</c>

00:06:15.600 --> 00:06:15.610 align:start position:0%
if we for example find a better way of
 

00:06:15.610 --> 00:06:17.189 align:start position:0%
if we for example find a better way of
representing<00:06:16.419><c> the</c><00:06:16.569><c> data</c><00:06:16.599><c> here</c><00:06:17.020><c> in</c><00:06:17.110><c> the</c>

00:06:17.189 --> 00:06:17.199 align:start position:0%
representing the data here in the
 

00:06:17.199 --> 00:06:19.320 align:start position:0%
representing the data here in the
background<00:06:17.620><c> without</c><00:06:18.219><c> the</c><00:06:18.550><c> the</c><00:06:18.849><c> full-blown</c>

00:06:19.320 --> 00:06:19.330 align:start position:0%
background without the the full-blown
 

00:06:19.330 --> 00:06:20.879 align:start position:0%
background without the the full-blown
collection<00:06:19.839><c> that</c><00:06:19.960><c> we'd</c><00:06:20.110><c> otherwise</c><00:06:20.319><c> have</c><00:06:20.770><c> to</c>

00:06:20.879 --> 00:06:20.889 align:start position:0%
collection that we'd otherwise have to
 

00:06:20.889 --> 00:06:24.360 align:start position:0%
collection that we'd otherwise have to
allocate<00:06:21.279><c> to</c><00:06:22.020><c> potentially</c><00:06:23.189><c> support</c><00:06:24.189><c> you</c>

00:06:24.360 --> 00:06:24.370 align:start position:0%
allocate to potentially support you
 

00:06:24.370 --> 00:06:26.070 align:start position:0%
allocate to potentially support you
adding<00:06:24.729><c> an</c><00:06:24.819><c> element</c><00:06:24.909><c> later</c><00:06:25.330><c> or</c><00:06:25.569><c> removing</c><00:06:25.960><c> an</c>

00:06:26.070 --> 00:06:26.080 align:start position:0%
adding an element later or removing an
 

00:06:26.080 --> 00:06:28.019 align:start position:0%
adding an element later or removing an
element<00:06:26.139><c> ATAR</c><00:06:26.560><c> we</c><00:06:27.219><c> can</c><00:06:27.370><c> optimize</c><00:06:27.490><c> something</c>

00:06:28.019 --> 00:06:28.029 align:start position:0%
element ATAR we can optimize something
 

00:06:28.029 --> 00:06:29.850 align:start position:0%
element ATAR we can optimize something
that<00:06:28.150><c> is</c><00:06:28.300><c> targeted</c><00:06:28.839><c> for</c><00:06:28.870><c> exactly</c><00:06:29.560><c> one</c><00:06:29.710><c> element</c>

00:06:29.850 --> 00:06:29.860 align:start position:0%
that is targeted for exactly one element
 

00:06:29.860 --> 00:06:32.219 align:start position:0%
that is targeted for exactly one element
without<00:06:30.669><c> any</c><00:06:30.879><c> modifications</c><00:06:31.539><c> to</c><00:06:31.599><c> it</c><00:06:31.870><c> and</c><00:06:32.110><c> that</c>

00:06:32.219 --> 00:06:32.229 align:start position:0%
without any modifications to it and that
 

00:06:32.229 --> 00:06:35.339 align:start position:0%
without any modifications to it and that
that<00:06:32.469><c> does</c><00:06:32.770><c> can</c><00:06:33.759><c> help</c><00:06:34.029><c> a</c><00:06:34.209><c> lot</c><00:06:34.389><c> with</c><00:06:34.539><c> footprint</c>

00:06:35.339 --> 00:06:35.349 align:start position:0%
that does can help a lot with footprint
 

00:06:35.349 --> 00:06:38.029 align:start position:0%
that does can help a lot with footprint
but<00:06:35.560><c> also</c><00:06:35.620><c> with</c><00:06:35.979><c> the</c><00:06:36.099><c> performance</c>

00:06:38.029 --> 00:06:38.039 align:start position:0%
but also with the performance
 

00:06:38.039 --> 00:06:40.119 align:start position:0%
but also with the performance
that's<00:06:38.639><c> another</c><00:06:38.849><c> example</c><00:06:39.059><c> I</c><00:06:39.569><c> guess</c><00:06:39.749><c> I</c><00:06:39.869><c> could</c>

00:06:40.119 --> 00:06:40.129 align:start position:0%
that's another example I guess I could
 

00:06:40.129 --> 00:06:43.850 align:start position:0%
that's another example I guess I could
create<00:06:41.129><c> some</c><00:06:41.599><c> we</c><00:06:42.599><c> all</c><00:06:42.719><c> love</c><00:06:42.899><c> strings</c><00:06:43.319><c> I'm</c>

00:06:43.850 --> 00:06:43.860 align:start position:0%
create some we all love strings I'm
 

00:06:43.860 --> 00:06:52.790 align:start position:0%
create some we all love strings I'm
gonna<00:06:44.039><c> create</c><00:06:44.339><c> a</c><00:06:44.399><c> hello</c><00:06:45.029><c> world</c><00:06:50.089><c> list</c><00:06:51.089><c> here</c><00:06:51.800><c> and</c>

00:06:52.790 --> 00:06:52.800 align:start position:0%
gonna create a hello world list here and
 

00:06:52.800 --> 00:06:56.570 align:start position:0%
gonna create a hello world list here and
then<00:06:53.189><c> just</c><00:06:54.029><c> because</c><00:06:54.929><c> I</c><00:06:55.139><c> like</c><00:06:55.289><c> streams</c><00:06:55.649><c> from</c>

00:06:56.570 --> 00:06:56.580 align:start position:0%
then just because I like streams from
 

00:06:56.580 --> 00:07:01.929 align:start position:0%
then just because I like streams from
Java<00:06:56.789><c> 8</c><00:06:56.999><c> I'm</c><00:06:57.330><c> gonna</c><00:06:57.569><c> say</c><00:06:57.779><c> for</c><00:06:58.199><c> each</c><00:06:59.689><c> system</c>

00:07:01.929 --> 00:07:01.939 align:start position:0%
Java 8 I'm gonna say for each system
 

00:07:01.939 --> 00:07:04.879 align:start position:0%
Java 8 I'm gonna say for each system
print<00:07:02.939><c> line</c><00:07:03.179><c> and</c><00:07:03.419><c> you'll</c><00:07:04.229><c> have</c><00:07:04.439><c> your</c><00:07:04.589><c> your</c>

00:07:04.879 --> 00:07:04.889 align:start position:0%
print line and you'll have your your
 

00:07:04.889 --> 00:07:07.070 align:start position:0%
print line and you'll have your your
string<00:07:05.189><c> piece</c><00:07:05.489><c> top</c><00:07:05.699><c> or</c><00:07:06.059><c> obviously</c><00:07:06.749><c> I</c><00:07:06.779><c> what</c><00:07:07.050><c> I</c>

00:07:07.070 --> 00:07:07.080 align:start position:0%
string piece top or obviously I what I
 

00:07:07.080 --> 00:07:12.309 align:start position:0%
string piece top or obviously I what I
also<00:07:07.259><c> can</c><00:07:07.529><c> do</c><00:07:07.649><c> is</c><00:07:07.919><c> put</c><00:07:08.519><c> this</c><00:07:08.699><c> together</c>

00:07:12.309 --> 00:07:12.319 align:start position:0%
 
 

00:07:12.319 --> 00:07:16.850 align:start position:0%
 
collectors<00:07:13.879><c> meaning</c><00:07:15.499><c> and</c><00:07:16.499><c> you</c><00:07:16.619><c> will</c><00:07:16.739><c> have</c>

00:07:16.850 --> 00:07:16.860 align:start position:0%
collectors meaning and you will have
 

00:07:16.860 --> 00:07:20.029 align:start position:0%
collectors meaning and you will have
your<00:07:17.009><c> food</c><00:07:17.249><c> hello</c><00:07:17.579><c> world</c><00:07:17.789><c> string</c><00:07:19.039><c> another</c>

00:07:20.029 --> 00:07:20.039 align:start position:0%
your food hello world string another
 

00:07:20.039 --> 00:07:21.439 align:start position:0%
your food hello world string another
piece<00:07:20.249><c> of</c><00:07:20.279><c> functionality</c><00:07:20.579><c> with</c><00:07:21.029><c> additive</c>

00:07:21.439 --> 00:07:21.449 align:start position:0%
piece of functionality with additive
 

00:07:21.449 --> 00:07:22.729 align:start position:0%
piece of functionality with additive
streams<00:07:21.689><c> while</c><00:07:21.929><c> I</c><00:07:21.989><c> want</c><00:07:22.169><c> we're</c><00:07:22.349><c> on</c><00:07:22.469><c> the</c><00:07:22.559><c> topic</c>

00:07:22.729 --> 00:07:22.739 align:start position:0%
streams while I want we're on the topic
 

00:07:22.739 --> 00:07:27.709 align:start position:0%
streams while I want we're on the topic
is<00:07:23.459><c> a</c><00:07:23.519><c> take</c><00:07:23.909><c> wild</c><00:07:25.459><c> operator</c><00:07:26.459><c> so</c><00:07:27.119><c> you</c><00:07:27.179><c> can</c><00:07:27.569><c> say</c>

00:07:27.709 --> 00:07:27.719 align:start position:0%
is a take wild operator so you can say
 

00:07:27.719 --> 00:07:30.290 align:start position:0%
is a take wild operator so you can say
for<00:07:27.959><c> example</c><00:07:27.989><c> that</c><00:07:28.399><c> pick</c><00:07:29.399><c> elements</c><00:07:29.909><c> from</c><00:07:30.089><c> this</c>

00:07:30.290 --> 00:07:30.300 align:start position:0%
for example that pick elements from this
 

00:07:30.300 --> 00:07:34.249 align:start position:0%
for example that pick elements from this
dream<00:07:30.569><c> while</c><00:07:31.379><c> this</c><00:07:31.829><c> thing</c><00:07:31.860><c> is</c><00:07:32.699><c> true</c><00:07:32.999><c> or</c><00:07:33.929><c> well</c>

00:07:34.249 --> 00:07:34.259 align:start position:0%
dream while this thing is true or well
 

00:07:34.259 --> 00:07:36.559 align:start position:0%
dream while this thing is true or well
the<00:07:34.379><c> thing</c><00:07:34.559><c> isn't</c><00:07:34.860><c> true</c><00:07:35.550><c> I</c><00:07:35.579><c> guess</c><00:07:35.819><c> so</c><00:07:36.419><c> I'm</c>

00:07:36.559 --> 00:07:36.569 align:start position:0%
the thing isn't true I guess so I'm
 

00:07:36.569 --> 00:07:39.859 align:start position:0%
the thing isn't true I guess so I'm
gonna<00:07:36.749><c> say</c><00:07:37.009><c> while</c><00:07:38.009><c> this</c><00:07:38.579><c> the</c><00:07:38.969><c> component</c><00:07:39.779><c> here</c>

00:07:39.859 --> 00:07:39.869 align:start position:0%
gonna say while this the component here
 

00:07:39.869 --> 00:07:42.619 align:start position:0%
gonna say while this the component here
doesn't<00:07:40.409><c> equal</c><00:07:40.739><c> comma</c><00:07:41.269><c> and</c><00:07:42.269><c> I'm</c><00:07:42.449><c> gonna</c>

00:07:42.619 --> 00:07:42.629 align:start position:0%
doesn't equal comma and I'm gonna
 

00:07:42.629 --> 00:07:47.330 align:start position:0%
doesn't equal comma and I'm gonna
collect<00:07:42.899><c> that</c><00:07:43.110><c> again</c>

00:07:47.330 --> 00:07:47.340 align:start position:0%
 
 

00:07:47.340 --> 00:07:49.280 align:start position:0%
 
and<00:07:48.120><c> you</c><00:07:48.210><c> one</c><00:07:48.360><c> will</c><00:07:48.480><c> get</c><00:07:48.660><c> the</c><00:07:48.750><c> hello</c><00:07:48.900><c> there's</c>

00:07:49.280 --> 00:07:49.290 align:start position:0%
and you one will get the hello there's
 

00:07:49.290 --> 00:07:53.420 align:start position:0%
and you one will get the hello there's
also<00:07:49.470><c> a</c><00:07:49.590><c> drop</c><00:07:50.150><c> dropped</c><00:07:51.150><c> while</c><00:07:51.710><c> so</c><00:07:52.710><c> two</c><00:07:53.220><c> new</c>

00:07:53.420 --> 00:07:53.430 align:start position:0%
also a drop dropped while so two new
 

00:07:53.430 --> 00:07:55.940 align:start position:0%
also a drop dropped while so two new
methods<00:07:53.730><c> armed</c><00:07:54.180><c> streams</c><00:07:54.540><c> we</c><00:07:55.170><c> like</c><00:07:55.320><c> streams</c><00:07:55.680><c> we</c>

00:07:55.940 --> 00:07:55.950 align:start position:0%
methods armed streams we like streams we
 

00:07:55.950 --> 00:07:58.340 align:start position:0%
methods armed streams we like streams we
like<00:07:56.130><c> optimizing</c><00:07:56.940><c> streams</c><00:07:57.240><c> and</c><00:07:57.900><c> we've</c>

00:07:58.340 --> 00:07:58.350 align:start position:0%
like optimizing streams and we've
 

00:07:58.350 --> 00:08:00.200 align:start position:0%
like optimizing streams and we've
optimized<00:07:58.800><c> streams</c><00:07:59.190><c> of</c><00:07:59.400><c> Arden</c><00:07:59.580><c> JDK</c><00:07:59.910><c> nine</c><00:08:00.060><c> as</c>

00:08:00.200 --> 00:08:00.210 align:start position:0%
optimized streams of Arden JDK nine as
 

00:08:00.210 --> 00:08:02.270 align:start position:0%
optimized streams of Arden JDK nine as
well<00:08:00.360><c> so</c><00:08:00.660><c> improvements</c><00:08:01.620><c> have</c><00:08:01.740><c> gone</c><00:08:01.890><c> in</c><00:08:02.010><c> in</c>

00:08:02.270 --> 00:08:02.280 align:start position:0%
well so improvements have gone in in
 

00:08:02.280 --> 00:08:04.780 align:start position:0%
well so improvements have gone in in
that<00:08:02.430><c> general</c><00:08:02.760><c> area</c>

00:08:04.780 --> 00:08:04.790 align:start position:0%
that general area
 

00:08:04.790 --> 00:08:07.310 align:start position:0%
that general area
speaking<00:08:05.790><c> of</c><00:08:05.910><c> concatenating</c><00:08:06.540><c> strings</c><00:08:06.690><c> and</c><00:08:07.260><c> I</c>

00:08:07.310 --> 00:08:07.320 align:start position:0%
speaking of concatenating strings and I
 

00:08:07.320 --> 00:08:09.650 align:start position:0%
speaking of concatenating strings and I
couldn't<00:08:07.950><c> find</c><00:08:08.250><c> a</c><00:08:08.400><c> good</c><00:08:08.430><c> way</c><00:08:08.940><c> of</c><00:08:08.970><c> showing</c><00:08:09.120><c> this</c>

00:08:09.650 --> 00:08:09.660 align:start position:0%
couldn't find a good way of showing this
 

00:08:09.660 --> 00:08:11.690 align:start position:0%
couldn't find a good way of showing this
because<00:08:09.960><c> it's</c><00:08:10.140><c> very</c><00:08:10.410><c> sort</c><00:08:10.860><c> of</c><00:08:10.920><c> low</c><00:08:11.070><c> level</c><00:08:11.100><c> and</c>

00:08:11.690 --> 00:08:11.700 align:start position:0%
because it's very sort of low level and
 

00:08:11.700 --> 00:08:14.990 align:start position:0%
because it's very sort of low level and
back-end<00:08:11.970><c> ish</c><00:08:12.360><c> in</c><00:08:12.690><c> nature</c><00:08:13.310><c> but</c><00:08:14.310><c> one</c><00:08:14.790><c> of</c><00:08:14.820><c> the</c>

00:08:14.990 --> 00:08:15.000 align:start position:0%
back-end ish in nature but one of the
 

00:08:15.000 --> 00:08:16.880 align:start position:0%
back-end ish in nature but one of the
things<00:08:15.210><c> we've</c><00:08:15.360><c> done</c><00:08:15.570><c> is</c><00:08:15.810><c> to</c><00:08:15.960><c> change</c><00:08:16.320><c> the</c><00:08:16.680><c> way</c>

00:08:16.880 --> 00:08:16.890 align:start position:0%
things we've done is to change the way
 

00:08:16.890 --> 00:08:19.520 align:start position:0%
things we've done is to change the way
we<00:08:17.190><c> generate</c><00:08:17.400><c> bytecode</c><00:08:18.270><c> for</c><00:08:18.530><c> concatenating</c>

00:08:19.520 --> 00:08:19.530 align:start position:0%
we generate bytecode for concatenating
 

00:08:19.530 --> 00:08:21.370 align:start position:0%
we generate bytecode for concatenating
strings<00:08:19.650><c> so</c><00:08:20.310><c> for</c><00:08:20.520><c> piecing</c><00:08:20.880><c> strings</c><00:08:21.210><c> together</c>

00:08:21.370 --> 00:08:21.380 align:start position:0%
strings so for piecing strings together
 

00:08:21.380 --> 00:08:24.200 align:start position:0%
strings so for piecing strings together
in<00:08:22.380><c> the</c><00:08:22.680><c> path</c><00:08:22.890><c> so</c><00:08:23.280><c> first</c><00:08:23.580><c> of</c><00:08:23.700><c> all</c><00:08:23.790><c> there's</c><00:08:24.120><c> a</c>

00:08:24.200 --> 00:08:24.210 align:start position:0%
in the path so first of all there's a
 

00:08:24.210 --> 00:08:26.300 align:start position:0%
in the path so first of all there's a
lot<00:08:24.300><c> of</c><00:08:24.600><c> string</c><00:08:24.780><c> manipulation</c><00:08:25.080><c> in</c><00:08:25.440><c> Java</c><00:08:25.650><c> so</c>

00:08:26.300 --> 00:08:26.310 align:start position:0%
lot of string manipulation in Java so
 

00:08:26.310 --> 00:08:28.250 align:start position:0%
lot of string manipulation in Java so
it's<00:08:26.460><c> very</c><00:08:26.700><c> important</c><00:08:27.480><c> for</c><00:08:27.600><c> us</c><00:08:27.720><c> to</c><00:08:27.900><c> get</c><00:08:28.110><c> that</c>

00:08:28.250 --> 00:08:28.260 align:start position:0%
it's very important for us to get that
 

00:08:28.260 --> 00:08:30.500 align:start position:0%
it's very important for us to get that
right<00:08:28.500><c> and</c><00:08:28.740><c> optimize</c><00:08:29.190><c> it</c><00:08:29.220><c> correctly</c><00:08:29.760><c> and</c><00:08:30.090><c> in</c>

00:08:30.500 --> 00:08:30.510 align:start position:0%
right and optimize it correctly and in
 

00:08:30.510 --> 00:08:32.650 align:start position:0%
right and optimize it correctly and in
the<00:08:30.600><c> past</c><00:08:30.900><c> what</c><00:08:31.200><c> we</c><00:08:31.350><c> had</c><00:08:31.500><c> was</c><00:08:31.710><c> a</c><00:08:31.740><c> series</c><00:08:32.280><c> of</c>

00:08:32.650 --> 00:08:32.660 align:start position:0%
the past what we had was a series of
 

00:08:32.660 --> 00:08:35.660 align:start position:0%
the past what we had was a series of
concatenation<00:08:33.660><c> append</c><00:08:34.470><c> operations</c><00:08:35.130><c> that</c><00:08:35.430><c> the</c>

00:08:35.660 --> 00:08:35.670 align:start position:0%
concatenation append operations that the
 

00:08:35.670 --> 00:08:37.850 align:start position:0%
concatenation append operations that the
the<00:08:36.000><c> JVM</c><00:08:36.480><c> and</c><00:08:36.630><c> the</c><00:08:36.720><c> JIT</c><00:08:36.870><c> compiler</c><00:08:37.290><c> had</c><00:08:37.560><c> to</c><00:08:37.680><c> sort</c>

00:08:37.850 --> 00:08:37.860 align:start position:0%
the JVM and the JIT compiler had to sort
 

00:08:37.860 --> 00:08:41.000 align:start position:0%
the JVM and the JIT compiler had to sort
of<00:08:38.600><c> trying</c><00:08:39.600><c> to</c><00:08:39.690><c> pattern</c><00:08:40.140><c> match</c><00:08:40.320><c> and</c><00:08:40.650><c> scrape</c>

00:08:41.000 --> 00:08:41.010 align:start position:0%
of trying to pattern match and scrape
 

00:08:41.010 --> 00:08:43.430 align:start position:0%
of trying to pattern match and scrape
out<00:08:41.280><c> and</c><00:08:41.700><c> piece</c><00:08:41.940><c> together</c><00:08:42.150><c> in</c><00:08:42.840><c> order</c><00:08:43.140><c> to</c><00:08:43.320><c> make</c>

00:08:43.430 --> 00:08:43.440 align:start position:0%
out and piece together in order to make
 

00:08:43.440 --> 00:08:44.960 align:start position:0%
out and piece together in order to make
sense<00:08:43.650><c> of</c><00:08:43.890><c> the</c><00:08:44.010><c> fact</c><00:08:44.190><c> that</c><00:08:44.310><c> in</c><00:08:44.490><c> the</c><00:08:44.640><c> end</c><00:08:44.670><c> is</c>

00:08:44.960 --> 00:08:44.970 align:start position:0%
sense of the fact that in the end is
 

00:08:44.970 --> 00:08:47.990 align:start position:0%
sense of the fact that in the end is
just<00:08:45.180><c> concatenating</c><00:08:45.720><c> two</c><00:08:45.930><c> strings</c><00:08:46.610><c> what</c><00:08:47.610><c> Java</c>

00:08:47.990 --> 00:08:48.000 align:start position:0%
just concatenating two strings what Java
 

00:08:48.000 --> 00:08:50.690 align:start position:0%
just concatenating two strings what Java
C<00:08:48.300><c> does</c><00:08:48.570><c> starting</c><00:08:49.080><c> with</c><00:08:49.200><c> nine</c><00:08:49.410><c> is</c><00:08:49.710><c> to</c><00:08:49.920><c> output</c><00:08:50.100><c> a</c>

00:08:50.690 --> 00:08:50.700 align:start position:0%
C does starting with nine is to output a
 

00:08:50.700 --> 00:08:52.970 align:start position:0%
C does starting with nine is to output a
bytecode<00:08:51.600><c> sequence</c><00:08:52.110><c> that</c><00:08:52.350><c> is</c><00:08:52.470><c> much</c><00:08:52.770><c> more</c>

00:08:52.970 --> 00:08:52.980 align:start position:0%
bytecode sequence that is much more
 

00:08:52.980 --> 00:08:54.860 align:start position:0%
bytecode sequence that is much more
obvious<00:08:53.370><c> for</c><00:08:53.400><c> us</c><00:08:53.610><c> to</c><00:08:53.730><c> work</c><00:08:53.910><c> with</c><00:08:53.940><c> it's</c><00:08:54.390><c> making</c>

00:08:54.860 --> 00:08:54.870 align:start position:0%
obvious for us to work with it's making
 

00:08:54.870 --> 00:08:56.720 align:start position:0%
obvious for us to work with it's making
use<00:08:55.020><c> of</c><00:08:55.050><c> the</c><00:08:55.380><c> invokedynamic</c><00:08:55.730><c> instruction</c>

00:08:56.720 --> 00:08:56.730 align:start position:0%
use of the invokedynamic instruction
 

00:08:56.730 --> 00:08:58.490 align:start position:0%
use of the invokedynamic instruction
which<00:08:57.150><c> is</c><00:08:57.180><c> an</c><00:08:57.480><c> instruction</c><00:08:57.930><c> we</c><00:08:58.050><c> added</c><00:08:58.320><c> very</c>

00:08:58.490 --> 00:08:58.500 align:start position:0%
which is an instruction we added very
 

00:08:58.500 --> 00:09:00.410 align:start position:0%
which is an instruction we added very
recently<00:08:58.920><c> in</c><00:08:59.460><c> the</c><00:08:59.610><c> first</c><00:08:59.880><c> and</c><00:09:00.120><c> only</c>

00:09:00.410 --> 00:09:00.420 align:start position:0%
recently in the first and only
 

00:09:00.420 --> 00:09:02.290 align:start position:0%
recently in the first and only
instruction<00:09:01.110><c> that</c><00:09:01.230><c> has</c><00:09:01.320><c> been</c><00:09:01.500><c> added</c><00:09:01.620><c> to</c><00:09:01.830><c> Java</c>

00:09:02.290 --> 00:09:02.300 align:start position:0%
instruction that has been added to Java
 

00:09:02.300 --> 00:09:05.150 align:start position:0%
instruction that has been added to Java
and<00:09:03.300><c> it's</c><00:09:03.750><c> using</c><00:09:03.900><c> this</c><00:09:04.140><c> instruction</c><00:09:04.650><c> to</c><00:09:04.680><c> to</c>

00:09:05.150 --> 00:09:05.160 align:start position:0%
and it's using this instruction to to
 

00:09:05.160 --> 00:09:07.040 align:start position:0%
and it's using this instruction to to
make<00:09:05.490><c> it</c><00:09:05.670><c> easier</c><00:09:05.940><c> for</c><00:09:05.970><c> the</c><00:09:06.180><c> JVM</c><00:09:06.570><c> to</c><00:09:06.720><c> detect</c>

00:09:07.040 --> 00:09:07.050 align:start position:0%
make it easier for the JVM to detect
 

00:09:07.050 --> 00:09:09.020 align:start position:0%
make it easier for the JVM to detect
this<00:09:07.260><c> the</c><00:09:08.010><c> other</c><00:09:08.160><c> nice</c><00:09:08.340><c> part</c><00:09:08.550><c> about</c><00:09:08.670><c> it</c><00:09:08.820><c> is</c>

00:09:09.020 --> 00:09:09.030 align:start position:0%
this the other nice part about it is
 

00:09:09.030 --> 00:09:12.470 align:start position:0%
this the other nice part about it is
that<00:09:09.240><c> that</c><00:09:09.810><c> same</c><00:09:10.080><c> pattern</c><00:09:10.350><c> it</c><00:09:11.190><c> can</c><00:09:11.250><c> week</c><00:09:11.820><c> or</c>

00:09:12.470 --> 00:09:12.480 align:start position:0%
that that same pattern it can week or
 

00:09:12.480 --> 00:09:13.790 align:start position:0%
that that same pattern it can week or
more<00:09:12.750><c> of</c><00:09:12.870><c> the</c><00:09:12.990><c> implementation</c><00:09:13.200><c> and</c><00:09:13.710><c> the</c>

00:09:13.790 --> 00:09:13.800 align:start position:0%
more of the implementation and the
 

00:09:13.800 --> 00:09:15.590 align:start position:0%
more of the implementation and the
optimization<00:09:14.250><c> opportunities</c><00:09:15.000><c> or</c><00:09:15.180><c> then</c><00:09:15.330><c> moved</c>

00:09:15.590 --> 00:09:15.600 align:start position:0%
optimization opportunities or then moved
 

00:09:15.600 --> 00:09:18.170 align:start position:0%
optimization opportunities or then moved
into<00:09:15.780><c> the</c><00:09:16.020><c> libraries</c><00:09:16.440><c> so</c><00:09:17.250><c> if</c><00:09:17.520><c> in</c><00:09:17.940><c> the</c><00:09:18.150><c> future</c>

00:09:18.170 --> 00:09:18.180 align:start position:0%
into the libraries so if in the future
 

00:09:18.180 --> 00:09:20.840 align:start position:0%
into the libraries so if in the future
release<00:09:19.020><c> of</c><00:09:19.290><c> the</c><00:09:19.380><c> JDK</c><00:09:19.620><c> we</c><00:09:19.950><c> find</c><00:09:20.220><c> a</c><00:09:20.310><c> better</c><00:09:20.550><c> way</c>

00:09:20.840 --> 00:09:20.850 align:start position:0%
release of the JDK we find a better way
 

00:09:20.850 --> 00:09:22.880 align:start position:0%
release of the JDK we find a better way
of<00:09:20.880><c> optimizing</c><00:09:21.420><c> this</c><00:09:21.660><c> we</c><00:09:22.020><c> have</c><00:09:22.290><c> that</c><00:09:22.590><c> same</c>

00:09:22.880 --> 00:09:22.890 align:start position:0%
of optimizing this we have that same
 

00:09:22.890 --> 00:09:25.130 align:start position:0%
of optimizing this we have that same
pattern<00:09:23.130><c> we</c><00:09:24.000><c> can</c><00:09:24.150><c> detect</c><00:09:24.420><c> it</c><00:09:24.630><c> and</c><00:09:24.810><c> again</c><00:09:25.020><c> the</c>

00:09:25.130 --> 00:09:25.140 align:start position:0%
pattern we can detect it and again the
 

00:09:25.140 --> 00:09:26.810 align:start position:0%
pattern we can detect it and again the
update<00:09:25.650><c> the</c><00:09:25.770><c> implementation</c><00:09:26.580><c> of</c>

00:09:26.810 --> 00:09:26.820 align:start position:0%
update the implementation of
 

00:09:26.820 --> 00:09:28.130 align:start position:0%
update the implementation of
concatenating<00:09:27.420><c> the</c><00:09:27.660><c> strings</c><00:09:27.930><c> in</c><00:09:28.080><c> the</c>

00:09:28.130 --> 00:09:28.140 align:start position:0%
concatenating the strings in the
 

00:09:28.140 --> 00:09:30.320 align:start position:0%
concatenating the strings in the
background<00:09:28.590><c> and</c><00:09:28.830><c> you</c><00:09:28.860><c> will</c><00:09:29.610><c> all</c><00:09:29.940><c> get</c><00:09:30.150><c> the</c>

00:09:30.320 --> 00:09:30.330 align:start position:0%
background and you will all get the
 

00:09:30.330 --> 00:09:31.790 align:start position:0%
background and you will all get the
benefits<00:09:30.900><c> of</c><00:09:30.990><c> that</c><00:09:31.140><c> without</c><00:09:31.380><c> having</c><00:09:31.680><c> to</c>

00:09:31.790 --> 00:09:31.800 align:start position:0%
benefits of that without having to
 

00:09:31.800 --> 00:09:36.590 align:start position:0%
benefits of that without having to
change<00:09:31.950><c> your</c><00:09:32.160><c> code</c><00:09:33.080><c> and</c><00:09:34.640><c> so</c><00:09:35.640><c> back</c><00:09:36.150><c> to</c><00:09:36.180><c> the</c>

00:09:36.590 --> 00:09:36.600 align:start position:0%
change your code and so back to the
 

00:09:36.600 --> 00:09:39.170 align:start position:0%
change your code and so back to the
presentation<00:09:36.890><c> I</c><00:09:37.890><c> walked</c><00:09:38.520><c> through</c><00:09:38.640><c> J</c><00:09:38.880><c> shell</c>

00:09:39.170 --> 00:09:39.180 align:start position:0%
presentation I walked through J shell
 

00:09:39.180 --> 00:09:41.510 align:start position:0%
presentation I walked through J shell
I've<00:09:39.450><c> touched</c><00:09:39.960><c> on</c><00:09:40.200><c> convenience</c><00:09:40.520><c> factory</c>

00:09:41.510 --> 00:09:41.520 align:start position:0%
I've touched on convenience factory
 

00:09:41.520 --> 00:09:42.980 align:start position:0%
I've touched on convenience factory
methods<00:09:41.970><c> for</c><00:09:42.120><c> collections</c><00:09:42.600><c> that</c><00:09:42.780><c> was</c><00:09:42.900><c> the</c>

00:09:42.980 --> 00:09:42.990 align:start position:0%
methods for collections that was the
 

00:09:42.990 --> 00:09:45.110 align:start position:0%
methods for collections that was the
order<00:09:43.140><c> of</c><00:09:43.290><c> the</c><00:09:43.410><c> words</c><00:09:43.560><c> I</c><00:09:43.740><c> was</c><00:09:43.860><c> looking</c><00:09:44.130><c> for</c><00:09:44.310><c> and</c>

00:09:45.110 --> 00:09:45.120 align:start position:0%
order of the words I was looking for and
 

00:09:45.120 --> 00:09:46.670 align:start position:0%
order of the words I was looking for and
in<00:09:45.360><c> the</c><00:09:45.510><c> five</c><00:09:45.690><c> string</c><00:09:45.960><c> concatenation</c><00:09:46.170><c> which</c>

00:09:46.670 --> 00:09:46.680 align:start position:0%
in the five string concatenation which
 

00:09:46.680 --> 00:09:49.180 align:start position:0%
in the five string concatenation which
is<00:09:46.980><c> again</c><00:09:47.190><c> the</c><00:09:47.370><c> concatenation</c><00:09:48.090><c> of</c><00:09:48.270><c> strings</c><00:09:48.390><c> I</c>

00:09:49.180 --> 00:09:49.190 align:start position:0%
is again the concatenation of strings I
 

00:09:49.190 --> 00:09:51.800 align:start position:0%
is again the concatenation of strings I
had<00:09:50.190><c> backup</c><00:09:50.610><c> slides</c><00:09:50.910><c> in</c><00:09:51.150><c> case</c><00:09:51.330><c> the</c><00:09:51.450><c> demo</c>

00:09:51.800 --> 00:09:51.810 align:start position:0%
had backup slides in case the demo
 

00:09:51.810 --> 00:09:53.970 align:start position:0%
had backup slides in case the demo
didn't<00:09:52.140><c> work</c><00:09:52.320><c> out</c>

00:09:53.970 --> 00:09:53.980 align:start position:0%
didn't work out
 

00:09:53.980 --> 00:09:56.920 align:start position:0%
didn't work out
if<00:09:54.980><c> you</c><00:09:55.339><c> want</c><00:09:55.610><c> to</c><00:09:55.760><c> know</c><00:09:55.880><c> more</c><00:09:56.149><c> about</c><00:09:56.180><c> J</c><00:09:56.660><c> shell</c>

00:09:56.920 --> 00:09:56.930 align:start position:0%
if you want to know more about J shell
 

00:09:56.930 --> 00:09:58.870 align:start position:0%
if you want to know more about J shell
there<00:09:57.560><c> are</c><00:09:57.649><c> plenty</c><00:09:57.890><c> of</c><00:09:58.010><c> sessions</c><00:09:58.399><c> during</c><00:09:58.550><c> Java</c>

00:09:58.870 --> 00:09:58.880 align:start position:0%
there are plenty of sessions during Java
 

00:09:58.880 --> 00:10:00.639 align:start position:0%
there are plenty of sessions during Java
one<00:09:59.089><c> I</c><00:09:59.269><c> recommend</c><00:09:59.839><c> that</c><00:09:59.930><c> you</c><00:09:59.990><c> go</c><00:10:00.200><c> to</c><00:10:00.260><c> at</c><00:10:00.440><c> least</c>

00:10:00.639 --> 00:10:00.649 align:start position:0%
one I recommend that you go to at least
 

00:10:00.649 --> 00:10:02.530 align:start position:0%
one I recommend that you go to at least
one<00:10:00.950><c> because</c><00:10:01.190><c> J</c><00:10:01.519><c> shell</c><00:10:01.730><c> is</c><00:10:01.880><c> extremely</c>

00:10:02.530 --> 00:10:02.540 align:start position:0%
one because J shell is extremely
 

00:10:02.540 --> 00:10:06.009 align:start position:0%
one because J shell is extremely
powerful<00:10:03.640><c> I</c><00:10:04.640><c> have</c><00:10:05.089><c> a</c><00:10:05.120><c> slide</c><00:10:05.420><c> at</c><00:10:05.540><c> the</c><00:10:05.570><c> end</c><00:10:05.660><c> where</c>

00:10:06.009 --> 00:10:06.019 align:start position:0%
powerful I have a slide at the end where
 

00:10:06.019 --> 00:10:09.310 align:start position:0%
powerful I have a slide at the end where
if<00:10:06.230><c> you</c><00:10:06.880><c> if</c><00:10:07.880><c> you</c><00:10:08.089><c> forget</c><00:10:08.480><c> about</c><00:10:08.570><c> what</c><00:10:09.019><c> was</c><00:10:09.200><c> on</c>

00:10:09.310 --> 00:10:09.320 align:start position:0%
if you if you forget about what was on
 

00:10:09.320 --> 00:10:10.410 align:start position:0%
if you if you forget about what was on
that<00:10:09.440><c> slide</c>

00:10:10.410 --> 00:10:10.420 align:start position:0%
that slide
 

00:10:10.420 --> 00:10:14.710 align:start position:0%
that slide
moving<00:10:11.420><c> into</c><00:10:11.570><c> the</c><00:10:11.750><c> VM</c><00:10:12.760><c> one</c><00:10:13.760><c> of</c><00:10:13.880><c> the</c><00:10:13.970><c> key</c><00:10:14.450><c> things</c>

00:10:14.710 --> 00:10:14.720 align:start position:0%
moving into the VM one of the key things
 

00:10:14.720 --> 00:10:16.569 align:start position:0%
moving into the VM one of the key things
we've<00:10:14.899><c> done</c><00:10:15.019><c> on</c><00:10:15.200><c> the</c><00:10:15.320><c> JVM</c><00:10:15.649><c> side</c><00:10:15.920><c> is</c><00:10:16.130><c> to</c><00:10:16.279><c> switch</c>

00:10:16.569 --> 00:10:16.579 align:start position:0%
we've done on the JVM side is to switch
 

00:10:16.579 --> 00:10:19.420 align:start position:0%
we've done on the JVM side is to switch
the<00:10:16.880><c> default</c><00:10:17.060><c> garbage</c><00:10:17.899><c> collector</c><00:10:18.380><c> it</c><00:10:18.920><c> used</c><00:10:19.220><c> to</c>

00:10:19.420 --> 00:10:19.430 align:start position:0%
the default garbage collector it used to
 

00:10:19.430 --> 00:10:21.850 align:start position:0%
the default garbage collector it used to
be<00:10:19.579><c> the</c><00:10:20.060><c> parallel</c><00:10:20.630><c> garbage</c><00:10:21.200><c> collector</c><00:10:21.560><c> but</c><00:10:21.709><c> we</c>

00:10:21.850 --> 00:10:21.860 align:start position:0%
be the parallel garbage collector but we
 

00:10:21.860 --> 00:10:24.069 align:start position:0%
be the parallel garbage collector but we
have<00:10:22.010><c> now</c><00:10:22.160><c> switched</c><00:10:22.220><c> over</c><00:10:22.760><c> to</c><00:10:22.880><c> use</c><00:10:23.120><c> g1</c><00:10:23.779><c> our</c>

00:10:24.069 --> 00:10:24.079 align:start position:0%
have now switched over to use g1 our
 

00:10:24.079 --> 00:10:26.259 align:start position:0%
have now switched over to use g1 our
garbage<00:10:24.620><c> first</c><00:10:24.920><c> garbage</c><00:10:25.579><c> collector</c><00:10:25.970><c> as</c><00:10:26.120><c> the</c>

00:10:26.259 --> 00:10:26.269 align:start position:0%
garbage first garbage collector as the
 

00:10:26.269 --> 00:10:30.130 align:start position:0%
garbage first garbage collector as the
default<00:10:27.160><c> the</c><00:10:28.160><c> g1</c><00:10:28.519><c> garbage</c><00:10:28.850><c> collector</c><00:10:29.149><c> has</c><00:10:29.360><c> as</c>

00:10:30.130 --> 00:10:30.140 align:start position:0%
default the g1 garbage collector has as
 

00:10:30.140 --> 00:10:32.949 align:start position:0%
default the g1 garbage collector has as
its<00:10:30.529><c> goal</c><00:10:30.620><c> to</c><00:10:31.130><c> provide</c><00:10:31.490><c> both</c><00:10:31.850><c> good</c><00:10:32.420><c> throughput</c>

00:10:32.949 --> 00:10:32.959 align:start position:0%
its goal to provide both good throughput
 

00:10:32.959 --> 00:10:37.090 align:start position:0%
its goal to provide both good throughput
and<00:10:33.170><c> low</c><00:10:34.070><c> latency</c><00:10:34.279><c> or</c><00:10:34.730><c> low</c><00:10:34.880><c> cost</c><00:10:35.120><c> times</c><00:10:35.709><c> it</c><00:10:36.709><c> is</c>

00:10:37.090 --> 00:10:37.100 align:start position:0%
and low latency or low cost times it is
 

00:10:37.100 --> 00:10:39.430 align:start position:0%
and low latency or low cost times it is
region<00:10:37.610><c> based</c><00:10:37.850><c> so</c><00:10:38.390><c> the</c><00:10:38.690><c> way</c><00:10:38.839><c> this</c><00:10:39.079><c> works</c><00:10:39.260><c> in</c>

00:10:39.430 --> 00:10:39.440 align:start position:0%
region based so the way this works in
 

00:10:39.440 --> 00:10:40.900 align:start position:0%
region based so the way this works in
the<00:10:39.529><c> background</c><00:10:39.680><c> is</c><00:10:40.040><c> that</c><00:10:40.070><c> the</c><00:10:40.279><c> whole</c><00:10:40.459><c> heap</c><00:10:40.700><c> is</c>

00:10:40.900 --> 00:10:40.910 align:start position:0%
the background is that the whole heap is
 

00:10:40.910 --> 00:10:43.660 align:start position:0%
the background is that the whole heap is
split<00:10:41.180><c> up</c><00:10:41.209><c> into</c><00:10:41.420><c> individual</c><00:10:42.230><c> regions</c><00:10:42.670><c> and</c>

00:10:43.660 --> 00:10:43.670 align:start position:0%
split up into individual regions and
 

00:10:43.670 --> 00:10:46.329 align:start position:0%
split up into individual regions and
then<00:10:43.940><c> it's</c><00:10:44.089><c> the</c><00:10:44.750><c> g1</c><00:10:45.019><c> collectors</c><00:10:45.440><c> choose</c><00:10:45.950><c> very</c>

00:10:46.329 --> 00:10:46.339 align:start position:0%
then it's the g1 collectors choose very
 

00:10:46.339 --> 00:10:48.190 align:start position:0%
then it's the g1 collectors choose very
carefully<00:10:46.430><c> which</c><00:10:47.060><c> regions</c><00:10:47.660><c> it's</c><00:10:47.870><c> going</c><00:10:48.079><c> to</c>

00:10:48.190 --> 00:10:48.200 align:start position:0%
carefully which regions it's going to
 

00:10:48.200 --> 00:10:51.250 align:start position:0%
carefully which regions it's going to
try<00:10:48.440><c> to</c><00:10:48.500><c> evacuate</c><00:10:49.070><c> to</c><00:10:49.370><c> empty</c><00:10:49.940><c> and</c><00:10:50.180><c> and</c><00:10:50.540><c> clean</c>

00:10:51.250 --> 00:10:51.260 align:start position:0%
try to evacuate to empty and and clean
 

00:10:51.260 --> 00:10:52.780 align:start position:0%
try to evacuate to empty and and clean
up<00:10:51.440><c> so</c><00:10:51.680><c> that</c><00:10:51.800><c> we</c><00:10:51.890><c> can</c><00:10:52.040><c> later</c><00:10:52.190><c> reuse</c><00:10:52.519><c> that</c><00:10:52.730><c> for</c>

00:10:52.780 --> 00:10:52.790 align:start position:0%
up so that we can later reuse that for
 

00:10:52.790 --> 00:10:56.199 align:start position:0%
up so that we can later reuse that for
new<00:10:53.060><c> allocations</c><00:10:53.920><c> and</c><00:10:54.920><c> basically</c><00:10:55.910><c> the</c><00:10:56.029><c> way</c><00:10:56.120><c> it</c>

00:10:56.199 --> 00:10:56.209 align:start position:0%
new allocations and basically the way it
 

00:10:56.209 --> 00:10:57.639 align:start position:0%
new allocations and basically the way it
works<00:10:56.240><c> is</c><00:10:56.570><c> that</c><00:10:56.600><c> it</c><00:10:56.810><c> picks</c><00:10:57.019><c> the</c><00:10:57.290><c> ones</c><00:10:57.470><c> that</c>

00:10:57.639 --> 00:10:57.649 align:start position:0%
works is that it picks the ones that
 

00:10:57.649 --> 00:10:59.439 align:start position:0%
works is that it picks the ones that
have<00:10:57.829><c> the</c><00:10:58.160><c> most</c><00:10:58.310><c> garbage</c><00:10:58.880><c> first</c><00:10:59.180><c> where</c><00:10:59.420><c> the</c>

00:10:59.439 --> 00:10:59.449 align:start position:0%
have the most garbage first where the
 

00:10:59.449 --> 00:11:01.569 align:start position:0%
have the most garbage first where the
fewest<00:11:00.019><c> objects</c><00:11:00.560><c> are</c><00:11:00.649><c> actually</c><00:11:00.890><c> live</c><00:11:01.160><c> still</c>

00:11:01.569 --> 00:11:01.579 align:start position:0%
fewest objects are actually live still
 

00:11:01.579 --> 00:11:03.579 align:start position:0%
fewest objects are actually live still
and<00:11:01.880><c> then</c><00:11:02.000><c> it</c><00:11:02.120><c> removes</c><00:11:02.870><c> all</c><00:11:03.170><c> those</c><00:11:03.380><c> live</c>

00:11:03.579 --> 00:11:03.589 align:start position:0%
and then it removes all those live
 

00:11:03.589 --> 00:11:06.189 align:start position:0%
and then it removes all those live
objects<00:11:04.070><c> out</c><00:11:04.160><c> to</c><00:11:04.190><c> somewhere</c><00:11:04.579><c> else</c><00:11:04.640><c> and</c><00:11:05.199><c> what</c>

00:11:06.189 --> 00:11:06.199 align:start position:0%
objects out to somewhere else and what
 

00:11:06.199 --> 00:11:07.780 align:start position:0%
objects out to somewhere else and what
you<00:11:06.290><c> have</c><00:11:06.470><c> in</c><00:11:06.649><c> after</c><00:11:07.190><c> that</c><00:11:07.310><c> is</c><00:11:07.430><c> obviously</c><00:11:07.730><c> a</c>

00:11:07.780 --> 00:11:07.790 align:start position:0%
you have in after that is obviously a
 

00:11:07.790 --> 00:11:09.460 align:start position:0%
you have in after that is obviously a
clean<00:11:08.060><c> empty</c><00:11:08.390><c> region</c><00:11:08.899><c> that</c><00:11:09.050><c> you</c><00:11:09.140><c> can</c><00:11:09.290><c> start</c>

00:11:09.460 --> 00:11:09.470 align:start position:0%
clean empty region that you can start
 

00:11:09.470 --> 00:11:11.889 align:start position:0%
clean empty region that you can start
allocating<00:11:09.620><c> in</c><00:11:10.070><c> so</c><00:11:10.730><c> their</c><00:11:11.240><c> name</c><00:11:11.420><c> comes</c><00:11:11.750><c> from</c>

00:11:11.889 --> 00:11:11.899 align:start position:0%
allocating in so their name comes from
 

00:11:11.899 --> 00:11:13.240 align:start position:0%
allocating in so their name comes from
the<00:11:12.050><c> fact</c><00:11:12.230><c> that</c><00:11:12.290><c> it's</c><00:11:12.470><c> taking</c><00:11:12.829><c> the</c><00:11:12.980><c> garbage</c>

00:11:13.240 --> 00:11:13.250 align:start position:0%
the fact that it's taking the garbage
 

00:11:13.250 --> 00:11:15.280 align:start position:0%
the fact that it's taking the garbage
first<00:11:13.760><c> as</c><00:11:14.060><c> if</c><00:11:14.209><c> you</c><00:11:14.540><c> know</c><00:11:14.660><c> the</c><00:11:14.810><c> regions</c><00:11:15.140><c> with</c>

00:11:15.280 --> 00:11:15.290 align:start position:0%
first as if you know the regions with
 

00:11:15.290 --> 00:11:18.790 align:start position:0%
first as if you know the regions with
the<00:11:15.320><c> most</c><00:11:15.529><c> garbage</c><00:11:15.920><c> first</c><00:11:17.140><c> the</c><00:11:18.140><c> default</c><00:11:18.500><c> post</c>

00:11:18.790 --> 00:11:18.800 align:start position:0%
the most garbage first the default post
 

00:11:18.800 --> 00:11:21.400 align:start position:0%
the most garbage first the default post
time<00:11:19.190><c> target</c><00:11:19.880><c> for</c><00:11:20.120><c> g1</c><00:11:20.449><c> is</c><00:11:20.660><c> 200</c><00:11:21.140><c> milliseconds</c>

00:11:21.400 --> 00:11:21.410 align:start position:0%
time target for g1 is 200 milliseconds
 

00:11:21.410 --> 00:11:24.040 align:start position:0%
time target for g1 is 200 milliseconds
but<00:11:21.860><c> this</c><00:11:22.010><c> can</c><00:11:22.279><c> be</c><00:11:22.310><c> tilled</c><00:11:22.730><c> so</c><00:11:23.149><c> if</c><00:11:23.300><c> you</c><00:11:23.570><c> want</c>

00:11:24.040 --> 00:11:24.050 align:start position:0%
but this can be tilled so if you want
 

00:11:24.050 --> 00:11:25.449 align:start position:0%
but this can be tilled so if you want
more<00:11:24.260><c> throughput</c><00:11:24.740><c> for</c><00:11:24.890><c> example</c><00:11:25.279><c> and</c><00:11:25.399><c> can</c>

00:11:25.449 --> 00:11:25.459 align:start position:0%
more throughput for example and can
 

00:11:25.459 --> 00:11:27.240 align:start position:0%
more throughput for example and can
tolerate<00:11:25.699><c> more</c><00:11:26.000><c> post</c><00:11:26.449><c> times</c>

00:11:27.240 --> 00:11:27.250 align:start position:0%
tolerate more post times
 

00:11:27.250 --> 00:11:29.829 align:start position:0%
tolerate more post times
then<00:11:28.250><c> you</c><00:11:28.339><c> can</c><00:11:28.519><c> continue</c><00:11:29.089><c> it</c><00:11:29.149><c> one</c><00:11:29.269><c> way</c><00:11:29.420><c> or</c><00:11:29.690><c> if</c>

00:11:29.829 --> 00:11:29.839 align:start position:0%
then you can continue it one way or if
 

00:11:29.839 --> 00:11:31.660 align:start position:0%
then you can continue it one way or if
you<00:11:29.990><c> want</c><00:11:30.380><c> low</c><00:11:30.649><c> post</c><00:11:30.949><c> times</c><00:11:31.220><c> but</c><00:11:31.459><c> you</c><00:11:31.550><c> can</c>

00:11:31.660 --> 00:11:31.670 align:start position:0%
you want low post times but you can
 

00:11:31.670 --> 00:11:33.220 align:start position:0%
you want low post times but you can
tolerate<00:11:31.940><c> and</c><00:11:32.300><c> throughput</c><00:11:32.630><c> overhead</c>

00:11:33.220 --> 00:11:33.230 align:start position:0%
tolerate and throughput overhead
 

00:11:33.230 --> 00:11:36.460 align:start position:0%
tolerate and throughput overhead
I<00:11:33.260><c> think</c><00:11:33.529><c> it's</c><00:11:33.709><c> unit</c><00:11:34.010><c> the</c><00:11:34.070><c> other</c><00:11:34.190><c> way</c><00:11:34.339><c> and</c><00:11:35.019><c> as</c><00:11:36.019><c> I</c>

00:11:36.460 --> 00:11:36.470 align:start position:0%
I think it's unit the other way and as I
 

00:11:36.470 --> 00:11:39.310 align:start position:0%
I think it's unit the other way and as I
mentioned<00:11:36.800><c> g1</c><00:11:37.070><c> has</c><00:11:37.279><c> been</c><00:11:37.610><c> in</c><00:11:37.850><c> the</c><00:11:38.149><c> JDK</c><00:11:38.570><c> for</c><00:11:39.290><c> a</c>

00:11:39.310 --> 00:11:39.320 align:start position:0%
mentioned g1 has been in the JDK for a
 

00:11:39.320 --> 00:11:42.400 align:start position:0%
mentioned g1 has been in the JDK for a
while<00:11:39.440><c> it's</c><00:11:40.100><c> been</c><00:11:40.250><c> made</c><00:11:40.519><c> before</c><00:11:40.670><c> now</c><00:11:41.029><c> and</c><00:11:41.410><c> we</c>

00:11:42.400 --> 00:11:42.410 align:start position:0%
while it's been made before now and we
 

00:11:42.410 --> 00:11:44.920 align:start position:0%
while it's been made before now and we
have<00:11:42.620><c> made</c><00:11:42.890><c> some</c><00:11:43.190><c> improvements</c><00:11:44.029><c> to</c><00:11:44.209><c> the</c>

00:11:44.920 --> 00:11:44.930 align:start position:0%
have made some improvements to the
 

00:11:44.930 --> 00:11:46.660 align:start position:0%
have made some improvements to the
implementation<00:11:45.589><c> of</c><00:11:45.949><c> do</c><00:11:46.070><c> you</c><00:11:46.160><c> want</c><00:11:46.310><c> to</c><00:11:46.430><c> make</c><00:11:46.550><c> it</c>

00:11:46.660 --> 00:11:46.670 align:start position:0%
implementation of do you want to make it
 

00:11:46.670 --> 00:11:49.210 align:start position:0%
implementation of do you want to make it
more<00:11:46.820><c> performant</c><00:11:47.620><c> this</c><00:11:48.620><c> is</c><00:11:48.829><c> an</c><00:11:49.040><c> ongoing</c>

00:11:49.210 --> 00:11:49.220 align:start position:0%
more performant this is an ongoing
 

00:11:49.220 --> 00:11:50.829 align:start position:0%
more performant this is an ongoing
effort<00:11:49.699><c> so</c><00:11:50.029><c> as</c><00:11:50.149><c> a</c><00:11:50.209><c> matter</c><00:11:50.390><c> of</c><00:11:50.480><c> fact</c><00:11:50.660><c> if</c><00:11:50.779><c> you</c>

00:11:50.829 --> 00:11:50.839 align:start position:0%
effort so as a matter of fact if you
 

00:11:50.839 --> 00:11:54.550 align:start position:0%
effort so as a matter of fact if you
would<00:11:51.110><c> pick</c><00:11:51.680><c> up</c><00:11:51.829><c> JDK</c><00:11:52.279><c> 10</c><00:11:52.720><c> take</c><00:11:53.720><c> the</c><00:11:53.870><c> code</c><00:11:54.380><c> today</c>

00:11:54.550 --> 00:11:54.560 align:start position:0%
would pick up JDK 10 take the code today
 

00:11:54.560 --> 00:11:56.769 align:start position:0%
would pick up JDK 10 take the code today
and<00:11:54.949><c> compile</c><00:11:55.250><c> it</c><00:11:55.430><c> you</c><00:11:56.089><c> would</c><00:11:56.240><c> find</c><00:11:56.420><c> that</c><00:11:56.630><c> we</c>

00:11:56.769 --> 00:11:56.779 align:start position:0%
and compile it you would find that we
 

00:11:56.779 --> 00:11:59.139 align:start position:0%
and compile it you would find that we
have<00:11:56.899><c> already</c><00:11:57.110><c> improved</c><00:11:57.680><c> on</c><00:11:57.920><c> what's</c><00:11:58.220><c> in</c><00:11:58.399><c> 9</c><00:11:58.670><c> so</c>

00:11:59.139 --> 00:11:59.149 align:start position:0%
have already improved on what's in 9 so
 

00:11:59.149 --> 00:12:00.639 align:start position:0%
have already improved on what's in 9 so
there<00:11:59.510><c> are</c><00:11:59.779><c> a</c><00:11:59.810><c> lot</c><00:11:59.870><c> there's</c><00:12:00.350><c> a</c><00:12:00.410><c> lot</c><00:12:00.470><c> of</c>

00:12:00.639 --> 00:12:00.649 align:start position:0%
there are a lot there's a lot of
 

00:12:00.649 --> 00:12:01.990 align:start position:0%
there are a lot there's a lot of
activity<00:12:01.160><c> going</c><00:12:01.190><c> on</c><00:12:01.520><c> here</c><00:12:01.579><c> and</c>

00:12:01.990 --> 00:12:02.000 align:start position:0%
activity going on here and
 

00:12:02.000 --> 00:12:04.720 align:start position:0%
activity going on here and
of<00:12:02.030><c> improvements</c><00:12:02.800><c> but</c><00:12:03.800><c> the</c><00:12:04.070><c> end</c><00:12:04.220><c> goal</c><00:12:04.430><c> here</c><00:12:04.460><c> is</c>

00:12:04.720 --> 00:12:04.730 align:start position:0%
of improvements but the end goal here is
 

00:12:04.730 --> 00:12:08.170 align:start position:0%
of improvements but the end goal here is
really<00:12:04.760><c> to</c><00:12:05.030><c> have</c><00:12:05.330><c> AGC</c><00:12:06.290><c> in</c><00:12:06.620><c> the</c><00:12:07.280><c> default</c><00:12:07.580><c> DC</c><00:12:08.030><c> be</c>

00:12:08.170 --> 00:12:08.180 align:start position:0%
really to have AGC in the default DC be
 

00:12:08.180 --> 00:12:10.410 align:start position:0%
really to have AGC in the default DC be
one<00:12:08.390><c> that</c><00:12:08.600><c> that</c><00:12:08.960><c> doesn't</c><00:12:09.380><c> only</c><00:12:09.680><c> care</c><00:12:10.190><c> about</c>

00:12:10.410 --> 00:12:10.420 align:start position:0%
one that that doesn't only care about
 

00:12:10.420 --> 00:12:12.820 align:start position:0%
one that that doesn't only care about
throughput<00:12:11.420><c> but</c><00:12:11.600><c> also</c><00:12:11.810><c> takes</c><00:12:12.230><c> low</c><00:12:12.440><c> latency</c>

00:12:12.820 --> 00:12:12.830 align:start position:0%
throughput but also takes low latency
 

00:12:12.830 --> 00:12:14.980 align:start position:0%
throughput but also takes low latency
into<00:12:13.010><c> account</c><00:12:13.300><c> and</c><00:12:14.300><c> we</c><00:12:14.450><c> believe</c><00:12:14.690><c> that</c><00:12:14.810><c> a</c><00:12:14.870><c> lot</c>

00:12:14.980 --> 00:12:14.990 align:start position:0%
into account and we believe that a lot
 

00:12:14.990 --> 00:12:16.780 align:start position:0%
into account and we believe that a lot
of<00:12:15.080><c> applications</c><00:12:15.590><c> going</c><00:12:15.830><c> forward</c><00:12:16.160><c> will</c><00:12:16.340><c> be</c><00:12:16.610><c> in</c>

00:12:16.780 --> 00:12:16.790 align:start position:0%
of applications going forward will be in
 

00:12:16.790 --> 00:12:18.010 align:start position:0%
of applications going forward will be in
one<00:12:17.000><c> way</c><00:12:17.150><c> or</c><00:12:17.180><c> another</c><00:12:17.330><c> latency-sensitive</c>

00:12:18.010 --> 00:12:18.020 align:start position:0%
one way or another latency-sensitive
 

00:12:18.020 --> 00:12:23.080 align:start position:0%
one way or another latency-sensitive
it's<00:12:18.650><c> not</c><00:12:18.800><c> just</c><00:12:19.160><c> bulk</c><00:12:19.570><c> processing</c><00:12:20.570><c> of</c><00:12:20.690><c> data</c><00:12:22.090><c> if</c>

00:12:23.080 --> 00:12:23.090 align:start position:0%
it's not just bulk processing of data if
 

00:12:23.090 --> 00:12:24.240 align:start position:0%
it's not just bulk processing of data if
you<00:12:23.480><c> want</c><00:12:23.660><c> to</c><00:12:23.720><c> know</c><00:12:23.810><c> more</c><00:12:24.020><c> about</c>

00:12:24.240 --> 00:12:24.250 align:start position:0%
you want to know more about
 

00:12:24.250 --> 00:12:26.530 align:start position:0%
you want to know more about
jg1<00:12:25.250><c> there</c><00:12:25.610><c> are</c><00:12:25.760><c> at</c><00:12:25.940><c> least</c><00:12:26.030><c> a</c><00:12:26.240><c> couple</c><00:12:26.450><c> of</c>

00:12:26.530 --> 00:12:26.540 align:start position:0%
jg1 there are at least a couple of
 

00:12:26.540 --> 00:12:27.970 align:start position:0%
jg1 there are at least a couple of
sessions<00:12:26.750><c> that</c><00:12:27.140><c> will</c><00:12:27.260><c> touch</c><00:12:27.440><c> on</c><00:12:27.560><c> that</c><00:12:27.740><c> so</c>

00:12:27.970 --> 00:12:27.980 align:start position:0%
sessions that will touch on that so
 

00:12:27.980 --> 00:12:31.840 align:start position:0%
sessions that will touch on that so
again<00:12:28.550><c> recommend</c><00:12:29.060><c> you</c><00:12:29.150><c> to</c><00:12:29.270><c> go</c><00:12:29.390><c> to</c><00:12:29.450><c> those</c><00:12:30.850><c> on</c>

00:12:31.840 --> 00:12:31.850 align:start position:0%
again recommend you to go to those on
 

00:12:31.850 --> 00:12:34.360 align:start position:0%
again recommend you to go to those on
the<00:12:31.910><c> topic</c><00:12:32.300><c> of</c><00:12:32.360><c> GCS</c><00:12:33.020><c> one</c><00:12:33.800><c> of</c><00:12:33.890><c> the</c><00:12:33.950><c> other</c><00:12:34.130><c> things</c>

00:12:34.360 --> 00:12:34.370 align:start position:0%
the topic of GCS one of the other things
 

00:12:34.370 --> 00:12:36.190 align:start position:0%
the topic of GCS one of the other things
we've<00:12:34.520><c> done</c><00:12:34.670><c> is</c><00:12:34.940><c> to</c><00:12:35.120><c> deprecate</c><00:12:35.360><c> and</c><00:12:35.840><c> remove</c>

00:12:36.190 --> 00:12:36.200 align:start position:0%
we've done is to deprecate and remove
 

00:12:36.200 --> 00:12:38.880 align:start position:0%
we've done is to deprecate and remove
some<00:12:36.620><c> of</c><00:12:36.650><c> the</c><00:12:36.860><c> the</c><00:12:37.160><c> code</c><00:12:37.340><c> we</c><00:12:37.490><c> have</c><00:12:37.640><c> in</c><00:12:37.790><c> the</c><00:12:37.880><c> JVM</c>

00:12:38.880 --> 00:12:38.890 align:start position:0%
some of the the code we have in the JVM
 

00:12:38.890 --> 00:12:41.260 align:start position:0%
some of the the code we have in the JVM
specifically<00:12:39.890><c> we</c><00:12:40.160><c> have</c><00:12:40.340><c> deprecated</c><00:12:41.090><c> the</c>

00:12:41.260 --> 00:12:41.270 align:start position:0%
specifically we have deprecated the
 

00:12:41.270 --> 00:12:44.020 align:start position:0%
specifically we have deprecated the
concurrent<00:12:41.960><c> mark-sweep</c><00:12:42.170><c> collector</c><00:12:43.010><c> the</c><00:12:43.760><c> the</c>

00:12:44.020 --> 00:12:44.030 align:start position:0%
concurrent mark-sweep collector the the
 

00:12:44.030 --> 00:12:47.740 align:start position:0%
concurrent mark-sweep collector the the
CMS<00:12:44.450><c> were</c><00:12:44.660><c> short</c><00:12:45.050><c> the</c><00:12:45.260><c> CMS</c><00:12:45.590><c> collector</c><00:12:46.330><c> CMS</c><00:12:47.330><c> has</c>

00:12:47.740 --> 00:12:47.750 align:start position:0%
CMS were short the CMS collector CMS has
 

00:12:47.750 --> 00:12:49.900 align:start position:0%
CMS were short the CMS collector CMS has
traditionally<00:12:48.560><c> been</c><00:12:48.590><c> used</c><00:12:48.950><c> in</c><00:12:49.190><c> low</c><00:12:49.370><c> latency</c>

00:12:49.900 --> 00:12:49.910 align:start position:0%
traditionally been used in low latency
 

00:12:49.910 --> 00:12:52.330 align:start position:0%
traditionally been used in low latency
use<00:12:50.630><c> cases</c><00:12:51.050><c> where</c><00:12:51.200><c> you</c><00:12:51.320><c> don't</c><00:12:51.500><c> have</c><00:12:51.860><c> very</c>

00:12:52.330 --> 00:12:52.340 align:start position:0%
use cases where you don't have very
 

00:12:52.340 --> 00:12:55.360 align:start position:0%
use cases where you don't have very
large<00:12:52.580><c> heaps</c><00:12:52.970><c> and</c><00:12:53.680><c> where</c><00:12:54.680><c> your</c><00:12:54.800><c> application</c>

00:12:55.360 --> 00:12:55.370 align:start position:0%
large heaps and where your application
 

00:12:55.370 --> 00:12:57.310 align:start position:0%
large heaps and where your application
is<00:12:55.490><c> relatively</c><00:12:56.210><c> well</c><00:12:56.480><c> behaved</c><00:12:56.810><c> if</c><00:12:56.990><c> I</c><00:12:57.080><c> put</c><00:12:57.230><c> it</c>

00:12:57.310 --> 00:12:57.320 align:start position:0%
is relatively well behaved if I put it
 

00:12:57.320 --> 00:12:59.890 align:start position:0%
is relatively well behaved if I put it
that<00:12:57.380><c> way</c><00:12:57.460><c> the</c><00:12:58.460><c> challenge</c><00:12:58.850><c> for</c><00:12:59.090><c> us</c><00:12:59.150><c> on</c><00:12:59.480><c> the</c><00:12:59.570><c> JVM</c>

00:12:59.890 --> 00:12:59.900 align:start position:0%
that way the challenge for us on the JVM
 

00:12:59.900 --> 00:13:01.690 align:start position:0%
that way the challenge for us on the JVM
side<00:13:00.170><c> has</c><00:13:00.350><c> been</c><00:13:00.380><c> that</c><00:13:00.680><c> the</c><00:13:00.800><c> code</c><00:13:01.100><c> base</c><00:13:01.400><c> the</c>

00:13:01.690 --> 00:13:01.700 align:start position:0%
side has been that the code base the
 

00:13:01.700 --> 00:13:03.400 align:start position:0%
side has been that the code base the
implementation<00:13:02.540><c> of</c><00:13:02.600><c> the</c><00:13:02.720><c> collector</c><00:13:03.080><c> has</c><00:13:03.230><c> been</c>

00:13:03.400 --> 00:13:03.410 align:start position:0%
implementation of the collector has been
 

00:13:03.410 --> 00:13:05.470 align:start position:0%
implementation of the collector has been
very<00:13:03.650><c> very</c><00:13:04.160><c> hard</c><00:13:04.430><c> to</c><00:13:04.550><c> maintain</c><00:13:04.670><c> and</c><00:13:05.210><c> it</c><00:13:05.360><c> has</c>

00:13:05.470 --> 00:13:05.480 align:start position:0%
very very hard to maintain and it has
 

00:13:05.480 --> 00:13:07.420 align:start position:0%
very very hard to maintain and it has
been<00:13:05.840><c> very</c><00:13:05.870><c> hard</c><00:13:06.410><c> to</c><00:13:06.620><c> evolve</c><00:13:07.040><c> the</c><00:13:07.310><c> other</c>

00:13:07.420 --> 00:13:07.430 align:start position:0%
been very hard to evolve the other
 

00:13:07.430 --> 00:13:09.579 align:start position:0%
been very hard to evolve the other
collectors<00:13:07.970><c> while</c><00:13:08.420><c> still</c><00:13:08.839><c> making</c><00:13:09.350><c> sure</c><00:13:09.380><c> that</c>

00:13:09.579 --> 00:13:09.589 align:start position:0%
collectors while still making sure that
 

00:13:09.589 --> 00:13:12.790 align:start position:0%
collectors while still making sure that
CMS<00:13:10.010><c> works</c><00:13:10.280><c> the</c><00:13:10.490><c> way</c><00:13:10.580><c> it</c><00:13:10.670><c> does</c><00:13:10.900><c> so</c><00:13:11.900><c> what</c><00:13:12.620><c> we've</c>

00:13:12.790 --> 00:13:12.800 align:start position:0%
CMS works the way it does so what we've
 

00:13:12.800 --> 00:13:15.579 align:start position:0%
CMS works the way it does so what we've
done<00:13:12.920><c> now</c><00:13:12.980><c> is</c><00:13:13.220><c> to</c><00:13:13.250><c> deprecated</c><00:13:13.760><c> it</c><00:13:13.880><c> the</c><00:13:14.660><c> goal</c><00:13:15.410><c> is</c>

00:13:15.579 --> 00:13:15.589 align:start position:0%
done now is to deprecated it the goal is
 

00:13:15.589 --> 00:13:18.070 align:start position:0%
done now is to deprecated it the goal is
to<00:13:15.770><c> remove</c><00:13:15.920><c> this</c><00:13:16.400><c> in</c><00:13:16.670><c> a</c><00:13:16.730><c> future</c><00:13:17.060><c> release</c><00:13:17.089><c> we</c>

00:13:18.070 --> 00:13:18.080 align:start position:0%
to remove this in a future release we
 

00:13:18.080 --> 00:13:21.250 align:start position:0%
to remove this in a future release we
haven't<00:13:18.290><c> decided</c><00:13:18.470><c> which</c><00:13:18.800><c> one</c><00:13:19.130><c> yet</c><00:13:19.630><c> and</c><00:13:20.630><c> the</c>

00:13:21.250 --> 00:13:21.260 align:start position:0%
haven't decided which one yet and the
 

00:13:21.260 --> 00:13:23.200 align:start position:0%
haven't decided which one yet and the
hope<00:13:21.560><c> and</c><00:13:21.830><c> goal</c><00:13:22.070><c> here</c><00:13:22.339><c> is</c><00:13:22.460><c> to</c><00:13:22.490><c> have</c><00:13:22.760><c> the</c><00:13:22.820><c> other</c>

00:13:23.200 --> 00:13:23.210 align:start position:0%
hope and goal here is to have the other
 

00:13:23.210 --> 00:13:25.690 align:start position:0%
hope and goal here is to have the other
collectors<00:13:23.870><c> fill</c><00:13:24.170><c> the</c><00:13:24.380><c> void</c><00:13:24.530><c> device</c><00:13:24.950><c> if</c><00:13:25.520><c> you</c>

00:13:25.690 --> 00:13:25.700 align:start position:0%
collectors fill the void device if you
 

00:13:25.700 --> 00:13:28.270 align:start position:0%
collectors fill the void device if you
so<00:13:25.820><c> will</c><00:13:26.170><c> there</c><00:13:27.170><c> will</c><00:13:27.350><c> be</c><00:13:27.380><c> cases</c><00:13:28.010><c> where</c><00:13:28.190><c> you</c>

00:13:28.270 --> 00:13:28.280 align:start position:0%
so will there will be cases where you
 

00:13:28.280 --> 00:13:29.740 align:start position:0%
so will there will be cases where you
may<00:13:28.400><c> have</c><00:13:28.430><c> to</c><00:13:28.640><c> tune</c><00:13:28.820><c> things</c><00:13:29.030><c> differently</c><00:13:29.570><c> for</c>

00:13:29.740 --> 00:13:29.750 align:start position:0%
may have to tune things differently for
 

00:13:29.750 --> 00:13:31.360 align:start position:0%
may have to tune things differently for
example<00:13:30.080><c> and</c><00:13:30.290><c> all</c><00:13:30.380><c> that</c><00:13:30.560><c> so</c><00:13:30.740><c> if</c><00:13:30.950><c> you're</c><00:13:31.190><c> using</c>

00:13:31.360 --> 00:13:31.370 align:start position:0%
example and all that so if you're using
 

00:13:31.370 --> 00:13:34.450 align:start position:0%
example and all that so if you're using
CMS<00:13:31.850><c> again</c><00:13:32.660><c> be</c><00:13:33.380><c> aware</c><00:13:33.500><c> of</c><00:13:33.710><c> the</c><00:13:33.950><c> fact</c><00:13:34.160><c> that</c><00:13:34.280><c> this</c>

00:13:34.450 --> 00:13:34.460 align:start position:0%
CMS again be aware of the fact that this
 

00:13:34.460 --> 00:13:37.120 align:start position:0%
CMS again be aware of the fact that this
is<00:13:34.700><c> going</c><00:13:34.910><c> away</c><00:13:35.210><c> and</c><00:13:35.420><c> that</c><00:13:35.480><c> we</c><00:13:36.380><c> very</c><00:13:36.980><c> much</c>

00:13:37.120 --> 00:13:37.130 align:start position:0%
is going away and that we very much
 

00:13:37.130 --> 00:13:39.550 align:start position:0%
is going away and that we very much
appreciate<00:13:37.640><c> feedback</c><00:13:37.820><c> on</c><00:13:38.330><c> d1</c><00:13:38.600><c> and</c><00:13:39.020><c> the</c><00:13:39.440><c> other</c>

00:13:39.550 --> 00:13:39.560 align:start position:0%
appreciate feedback on d1 and the other
 

00:13:39.560 --> 00:13:42.400 align:start position:0%
appreciate feedback on d1 and the other
collectors<00:13:40.010><c> help</c><00:13:40.700><c> us</c><00:13:40.910><c> improve</c><00:13:41.060><c> those</c><00:13:41.420><c> that's</c>

00:13:42.400 --> 00:13:42.410 align:start position:0%
collectors help us improve those that's
 

00:13:42.410 --> 00:13:44.490 align:start position:0%
collectors help us improve those that's
that's<00:13:42.800><c> the</c><00:13:42.950><c> future</c><00:13:43.250><c> where</c><00:13:43.430><c> we</c><00:13:43.520><c> want</c><00:13:43.730><c> to</c><00:13:43.790><c> go</c>

00:13:44.490 --> 00:13:44.500 align:start position:0%
that's the future where we want to go
 

00:13:44.500 --> 00:13:46.720 align:start position:0%
that's the future where we want to go
the<00:13:45.500><c> other</c><00:13:45.650><c> thing</c><00:13:45.860><c> we've</c><00:13:46.010><c> done</c><00:13:46.160><c> which</c><00:13:46.430><c> I</c><00:13:46.550><c> think</c>

00:13:46.720 --> 00:13:46.730 align:start position:0%
the other thing we've done which I think
 

00:13:46.730 --> 00:13:49.990 align:start position:0%
the other thing we've done which I think
effects<00:13:47.240><c> fewer</c><00:13:48.230><c> people</c><00:13:48.500><c> is</c><00:13:48.920><c> that</c><00:13:49.250><c> actually</c>

00:13:49.990 --> 00:13:50.000 align:start position:0%
effects fewer people is that actually
 

00:13:50.000 --> 00:13:52.870 align:start position:0%
effects fewer people is that actually
remove<00:13:50.390><c> some</c><00:13:50.810><c> of</c><00:13:50.839><c> the</c><00:13:51.290><c> GC</c><00:13:51.800><c> combinations</c><00:13:52.760><c> that</c>

00:13:52.870 --> 00:13:52.880 align:start position:0%
remove some of the GC combinations that
 

00:13:52.880 --> 00:13:56.140 align:start position:0%
remove some of the GC combinations that
we<00:13:53.120><c> have</c><00:13:53.330><c> in</c><00:13:53.630><c> earlier</c><00:13:53.960><c> JD</c><00:13:54.200><c> case</c><00:13:54.940><c> this</c><00:13:55.940><c> is</c>

00:13:56.140 --> 00:13:56.150 align:start position:0%
we have in earlier JD case this is
 

00:13:56.150 --> 00:13:59.050 align:start position:0%
we have in earlier JD case this is
something<00:13:56.180><c> we</c><00:13:56.960><c> deprecated</c><00:13:57.650><c> in</c><00:13:57.740><c> JDK</c><00:13:58.160><c> 8</c><00:13:58.310><c> and</c>

00:13:59.050 --> 00:13:59.060 align:start position:0%
something we deprecated in JDK 8 and
 

00:13:59.060 --> 00:14:01.420 align:start position:0%
something we deprecated in JDK 8 and
that<00:13:59.270><c> we</c><00:13:59.480><c> have</c><00:13:59.660><c> now</c><00:13:59.810><c> removed</c><00:14:00.170><c> completely</c><00:14:01.040><c> in</c><00:14:01.190><c> 9</c>

00:14:01.420 --> 00:14:01.430 align:start position:0%
that we have now removed completely in 9
 

00:14:01.430 --> 00:14:03.790 align:start position:0%
that we have now removed completely in 9
there<00:14:02.360><c> used</c><00:14:02.510><c> to</c><00:14:02.540><c> be</c><00:14:02.630><c> something</c><00:14:02.870><c> called</c><00:14:02.990><c> ICMS</c>

00:14:03.790 --> 00:14:03.800 align:start position:0%
there used to be something called ICMS
 

00:14:03.800 --> 00:14:07.390 align:start position:0%
there used to be something called ICMS
and<00:14:04.100><c> there</c><00:14:04.190><c> was</c><00:14:04.310><c> also</c><00:14:04.490><c> a</c><00:14:05.950><c> set</c><00:14:06.950><c> of</c><00:14:07.070><c> different</c>

00:14:07.390 --> 00:14:07.400 align:start position:0%
and there was also a set of different
 

00:14:07.400 --> 00:14:09.520 align:start position:0%
and there was also a set of different
combinations<00:14:08.120><c> of</c><00:14:08.240><c> various</c><00:14:08.630><c> DC's</c><00:14:09.050><c> that</c><00:14:09.320><c> seemed</c>

00:14:09.520 --> 00:14:09.530 align:start position:0%
combinations of various DC's that seemed
 

00:14:09.530 --> 00:14:13.020 align:start position:0%
combinations of various DC's that seemed
to<00:14:09.710><c> be</c><00:14:09.740><c> not</c><00:14:10.010><c> very</c><00:14:10.370><c> well</c><00:14:10.850><c> used</c><00:14:11.570><c> let's</c><00:14:11.959><c> say</c>

00:14:13.020 --> 00:14:13.030 align:start position:0%
to be not very well used let's say
 

00:14:13.030 --> 00:14:15.330 align:start position:0%
to be not very well used let's say
were<00:14:13.240><c> again</c><00:14:13.510><c> hard</c><00:14:13.840><c> for</c><00:14:14.050><c> us</c><00:14:14.140><c> to</c><00:14:14.260><c> maintain</c><00:14:14.410><c> those</c>

00:14:15.330 --> 00:14:15.340 align:start position:0%
were again hard for us to maintain those
 

00:14:15.340 --> 00:14:21.360 align:start position:0%
were again hard for us to maintain those
are<00:14:15.550><c> now</c><00:14:15.700><c> gone</c><00:14:19.260><c> other</c><00:14:20.260><c> stuff</c><00:14:20.650><c> we've</c><00:14:20.890><c> done</c><00:14:20.920><c> to</c>

00:14:21.360 --> 00:14:21.370 align:start position:0%
are now gone other stuff we've done to
 

00:14:21.370 --> 00:14:24.090 align:start position:0%
are now gone other stuff we've done to
improve<00:14:21.640><c> things</c><00:14:21.850><c> both</c><00:14:22.720><c> sharing</c><00:14:23.290><c> footprint</c>

00:14:24.090 --> 00:14:24.100 align:start position:0%
improve things both sharing footprint
 

00:14:24.100 --> 00:14:26.700 align:start position:0%
improve things both sharing footprint
and<00:14:24.340><c> performance</c><00:14:24.880><c> is</c><00:14:25.420><c> work</c><00:14:25.930><c> on</c><00:14:26.230><c> something</c><00:14:26.590><c> we</c>

00:14:26.700 --> 00:14:26.710 align:start position:0%
and performance is work on something we
 

00:14:26.710 --> 00:14:30.420 align:start position:0%
and performance is work on something we
call<00:14:26.890><c> CD</c><00:14:27.250><c> s</c><00:14:27.810><c> CD</c><00:14:28.810><c> s</c><00:14:28.960><c> is</c><00:14:29.170><c> short</c><00:14:29.500><c> for</c><00:14:29.710><c> class</c><00:14:30.040><c> data</c>

00:14:30.420 --> 00:14:30.430 align:start position:0%
call CD s CD s is short for class data
 

00:14:30.430 --> 00:14:32.550 align:start position:0%
call CD s CD s is short for class data
sharing<00:14:30.760><c> this</c><00:14:31.540><c> functionality</c><00:14:32.140><c> has</c><00:14:32.230><c> been</c><00:14:32.290><c> in</c>

00:14:32.550 --> 00:14:32.560 align:start position:0%
sharing this functionality has been in
 

00:14:32.560 --> 00:14:34.800 align:start position:0%
sharing this functionality has been in
the<00:14:32.650><c> JDK</c><00:14:33.010><c> for</c><00:14:33.220><c> quite</c><00:14:33.400><c> some</c><00:14:33.610><c> time</c><00:14:33.640><c> as</c><00:14:33.970><c> well</c><00:14:34.120><c> if</c>

00:14:34.800 --> 00:14:34.810 align:start position:0%
the JDK for quite some time as well if
 

00:14:34.810 --> 00:14:37.920 align:start position:0%
the JDK for quite some time as well if
you<00:14:34.990><c> used</c><00:14:35.290><c> to</c><00:14:35.500><c> be</c><00:14:35.590><c> limited</c><00:14:36.160><c> to</c><00:14:36.190><c> the</c><00:14:36.880><c> Java</c><00:14:37.300><c> base</c>

00:14:37.920 --> 00:14:37.930 align:start position:0%
you used to be limited to the Java base
 

00:14:37.930 --> 00:14:41.700 align:start position:0%
you used to be limited to the Java base
classes<00:14:38.530><c> the</c><00:14:39.310><c> JRE</c><00:14:39.580><c> classes</c><00:14:40.060><c> themselves</c><00:14:40.710><c> but</c>

00:14:41.700 --> 00:14:41.710 align:start position:0%
classes the JRE classes themselves but
 

00:14:41.710 --> 00:14:43.410 align:start position:0%
classes the JRE classes themselves but
as<00:14:41.860><c> of</c><00:14:42.130><c> I</c><00:14:42.370><c> think</c><00:14:42.430><c> one</c><00:14:42.850><c> of</c><00:14:42.880><c> the</c><00:14:43.030><c> eight</c><00:14:43.180><c> you</c>

00:14:43.410 --> 00:14:43.420 align:start position:0%
as of I think one of the eight you
 

00:14:43.420 --> 00:14:46.050 align:start position:0%
as of I think one of the eight you
updates<00:14:43.900><c> or</c><00:14:44.560><c> eight</c><00:14:44.740><c> updates</c><00:14:45.220><c> I</c><00:14:45.340><c> should</c><00:14:45.520><c> say</c><00:14:45.640><c> or</c>

00:14:46.050 --> 00:14:46.060 align:start position:0%
updates or eight updates I should say or
 

00:14:46.060 --> 00:14:49.290 align:start position:0%
updates or eight updates I should say or
nine<00:14:46.930><c> we</c><00:14:47.680><c> also</c><00:14:48.010><c> now</c><00:14:48.370><c> have</c><00:14:48.400><c> support</c><00:14:48.880><c> for</c>

00:14:49.290 --> 00:14:49.300 align:start position:0%
nine we also now have support for
 

00:14:49.300 --> 00:14:51.030 align:start position:0%
nine we also now have support for
application<00:14:49.990><c> classes</c><00:14:50.200><c> as</c><00:14:50.500><c> well</c><00:14:50.620><c> so</c><00:14:50.860><c> this</c><00:14:50.980><c> is</c>

00:14:51.030 --> 00:14:51.040 align:start position:0%
application classes as well so this is
 

00:14:51.040 --> 00:14:53.490 align:start position:0%
application classes as well so this is
not<00:14:51.310><c> limited</c><00:14:52.000><c> to</c><00:14:52.030><c> the</c><00:14:52.270><c> GRE</c><00:14:52.510><c> anymore</c><00:14:52.960><c> it's</c>

00:14:53.490 --> 00:14:53.500 align:start position:0%
not limited to the GRE anymore it's
 

00:14:53.500 --> 00:14:55.800 align:start position:0%
not limited to the GRE anymore it's
something<00:14:53.830><c> that</c><00:14:53.950><c> you</c><00:14:54.070><c> can</c><00:14:54.220><c> use</c><00:14:54.400><c> for</c><00:14:54.700><c> your</c><00:14:54.940><c> your</c>

00:14:55.800 --> 00:14:55.810 align:start position:0%
something that you can use for your your
 

00:14:55.810 --> 00:14:58.140 align:start position:0%
something that you can use for your your
application<00:14:56.290><c> classes</c><00:14:56.650><c> as</c><00:14:56.830><c> well</c><00:14:56.980><c> and</c><00:14:57.880><c> the</c><00:14:58.000><c> way</c>

00:14:58.140 --> 00:14:58.150 align:start position:0%
application classes as well and the way
 

00:14:58.150 --> 00:14:59.790 align:start position:0%
application classes as well and the way
this<00:14:58.360><c> effectively</c><00:14:58.780><c> works</c><00:14:59.080><c> is</c><00:14:59.320><c> that</c><00:14:59.530><c> you</c><00:14:59.650><c> have</c>

00:14:59.790 --> 00:14:59.800 align:start position:0%
this effectively works is that you have
 

00:14:59.800 --> 00:15:02.220 align:start position:0%
this effectively works is that you have
a<00:15:00.220><c> sort</c><00:15:00.550><c> of</c><00:15:00.610><c> training</c><00:15:00.850><c> run</c><00:15:01.180><c> where</c><00:15:01.870><c> you</c><00:15:01.990><c> run</c>

00:15:02.220 --> 00:15:02.230 align:start position:0%
a sort of training run where you run
 

00:15:02.230 --> 00:15:04.200 align:start position:0%
a sort of training run where you run
your<00:15:02.260><c> application</c><00:15:02.950><c> once</c><00:15:03.190><c> and</c><00:15:03.610><c> what</c><00:15:03.790><c> the</c><00:15:03.910><c> VM</c>

00:15:04.200 --> 00:15:04.210 align:start position:0%
your application once and what the VM
 

00:15:04.210 --> 00:15:06.080 align:start position:0%
your application once and what the VM
will<00:15:04.420><c> do</c><00:15:04.570><c> is</c><00:15:04.810><c> to</c><00:15:04.990><c> read</c><00:15:05.200><c> all</c><00:15:05.380><c> the</c><00:15:05.500><c> classes</c>

00:15:06.080 --> 00:15:06.090 align:start position:0%
will do is to read all the classes
 

00:15:06.090 --> 00:15:08.190 align:start position:0%
will do is to read all the classes
format<00:15:07.090><c> them</c><00:15:07.240><c> and</c><00:15:07.450><c> put</c><00:15:07.600><c> them</c><00:15:07.660><c> in</c><00:15:07.840><c> a</c><00:15:07.900><c> way</c><00:15:08.020><c> that</c>

00:15:08.190 --> 00:15:08.200 align:start position:0%
format them and put them in a way that
 

00:15:08.200 --> 00:15:10.440 align:start position:0%
format them and put them in a way that
the<00:15:08.290><c> JVM</c><00:15:08.710><c> likes</c><00:15:08.920><c> internally</c><00:15:09.580><c> in</c><00:15:09.820><c> a</c><00:15:09.940><c> more</c>

00:15:10.440 --> 00:15:10.450 align:start position:0%
the JVM likes internally in a more
 

00:15:10.450 --> 00:15:13.050 align:start position:0%
the JVM likes internally in a more
optimized<00:15:10.870><c> format</c><00:15:11.200><c> for</c><00:15:11.410><c> the</c><00:15:11.560><c> JVM</c><00:15:11.920><c> and</c><00:15:12.880><c> then</c>

00:15:13.050 --> 00:15:13.060 align:start position:0%
optimized format for the JVM and then
 

00:15:13.060 --> 00:15:14.820 align:start position:0%
optimized format for the JVM and then
store<00:15:13.390><c> that</c><00:15:13.690><c> into</c><00:15:14.140><c> what</c><00:15:14.290><c> we</c><00:15:14.440><c> call</c><00:15:14.650><c> the</c>

00:15:14.820 --> 00:15:14.830 align:start position:0%
store that into what we call the
 

00:15:14.830 --> 00:15:17.220 align:start position:0%
store that into what we call the
application<00:15:15.520><c> class</c><00:15:15.730><c> that</c><00:15:16.180><c> were</c><00:15:16.300><c> CVS</c><00:15:16.870><c> archive</c>

00:15:17.220 --> 00:15:17.230 align:start position:0%
application class that were CVS archive
 

00:15:17.230 --> 00:15:20.040 align:start position:0%
application class that were CVS archive
for<00:15:17.620><c> short</c><00:15:17.800><c> it's</c><00:15:18.760><c> effectively</c><00:15:19.450><c> a</c><00:15:19.570><c> shared</c>

00:15:20.040 --> 00:15:20.050 align:start position:0%
for short it's effectively a shared
 

00:15:20.050 --> 00:15:21.480 align:start position:0%
for short it's effectively a shared
library<00:15:20.260><c> much</c><00:15:20.650><c> like</c><00:15:20.860><c> you</c><00:15:20.980><c> defined</c><00:15:21.250><c> on</c><00:15:21.400><c> the</c>

00:15:21.480 --> 00:15:21.490 align:start position:0%
library much like you defined on the
 

00:15:21.490 --> 00:15:24.510 align:start position:0%
library much like you defined on the
operating<00:15:21.850><c> system</c><00:15:22.150><c> level</c><00:15:22.440><c> but</c><00:15:23.440><c> but</c><00:15:23.890><c> but</c><00:15:24.370><c> it's</c>

00:15:24.510 --> 00:15:24.520 align:start position:0%
operating system level but but but it's
 

00:15:24.520 --> 00:15:26.670 align:start position:0%
operating system level but but but it's
not<00:15:24.580><c> an</c><00:15:24.850><c> elf</c><00:15:25.000><c> it's</c><00:15:25.360><c> not</c><00:15:25.510><c> in</c><00:15:25.870><c> the</c><00:15:26.050><c> native</c><00:15:26.350><c> format</c>

00:15:26.670 --> 00:15:26.680 align:start position:0%
not an elf it's not in the native format
 

00:15:26.680 --> 00:15:28.320 align:start position:0%
not an elf it's not in the native format
of<00:15:26.830><c> the</c><00:15:26.950><c> operating</c><00:15:27.250><c> system</c><00:15:27.610><c> right</c><00:15:27.940><c> now</c><00:15:28.180><c> at</c>

00:15:28.320 --> 00:15:28.330 align:start position:0%
of the operating system right now at
 

00:15:28.330 --> 00:15:32.370 align:start position:0%
of the operating system right now at
least<00:15:28.890><c> and</c><00:15:29.890><c> then</c><00:15:30.900><c> that's</c><00:15:31.900><c> that's</c><00:15:32.260><c> your</c>

00:15:32.370 --> 00:15:32.380 align:start position:0%
least and then that's that's your
 

00:15:32.380 --> 00:15:34.170 align:start position:0%
least and then that's that's your
training<00:15:32.710><c> run</c><00:15:32.890><c> and</c><00:15:33.070><c> then</c><00:15:33.190><c> for</c><00:15:33.400><c> every</c><00:15:33.790><c> run</c>

00:15:34.170 --> 00:15:34.180 align:start position:0%
training run and then for every run
 

00:15:34.180 --> 00:15:36.450 align:start position:0%
training run and then for every run
subsequent<00:15:35.020><c> run</c><00:15:35.170><c> you</c><00:15:35.350><c> do</c><00:15:35.500><c> of</c><00:15:35.740><c> the</c><00:15:35.860><c> JVM</c><00:15:36.130><c> after</c>

00:15:36.450 --> 00:15:36.460 align:start position:0%
subsequent run you do of the JVM after
 

00:15:36.460 --> 00:15:38.670 align:start position:0%
subsequent run you do of the JVM after
that<00:15:36.610><c> will</c><00:15:37.060><c> point</c><00:15:37.390><c> where</c><00:15:38.050><c> you</c><00:15:38.170><c> can</c><00:15:38.350><c> point</c><00:15:38.500><c> it</c>

00:15:38.670 --> 00:15:38.680 align:start position:0%
that will point where you can point it
 

00:15:38.680 --> 00:15:40.710 align:start position:0%
that will point where you can point it
to<00:15:38.830><c> these</c><00:15:38.980><c> this</c><00:15:39.310><c> archive</c><00:15:39.700><c> and</c><00:15:40.300><c> it</c><00:15:40.420><c> will</c><00:15:40.540><c> make</c>

00:15:40.710 --> 00:15:40.720 align:start position:0%
to these this archive and it will make
 

00:15:40.720 --> 00:15:42.360 align:start position:0%
to these this archive and it will make
use<00:15:40.900><c> of</c><00:15:40.930><c> the</c><00:15:41.170><c> information</c><00:15:41.290><c> that</c><00:15:41.740><c> is</c><00:15:41.860><c> in</c><00:15:42.160><c> the</c>

00:15:42.360 --> 00:15:42.370 align:start position:0%
use of the information that is in the
 

00:15:42.370 --> 00:15:45.690 align:start position:0%
use of the information that is in the
archive<00:15:42.820><c> and</c><00:15:43.120><c> leverage</c><00:15:43.750><c> that</c><00:15:44.340><c> one</c><00:15:45.340><c> of</c><00:15:45.430><c> the</c><00:15:45.520><c> key</c>

00:15:45.690 --> 00:15:45.700 align:start position:0%
archive and leverage that one of the key
 

00:15:45.700 --> 00:15:47.730 align:start position:0%
archive and leverage that one of the key
things<00:15:46.000><c> we've</c><00:15:46.210><c> done</c><00:15:46.330><c> in</c><00:15:46.510><c> 89</c><00:15:46.870><c> year</c><00:15:47.380><c> is</c><00:15:47.590><c> to</c>

00:15:47.730 --> 00:15:47.740 align:start position:0%
things we've done in 89 year is to
 

00:15:47.740 --> 00:15:50.160 align:start position:0%
things we've done in 89 year is to
improve<00:15:48.070><c> on</c><00:15:48.280><c> what</c><00:15:48.730><c> is</c><00:15:48.880><c> in</c><00:15:49.060><c> what</c><00:15:49.390><c> goes</c><00:15:49.600><c> into</c><00:15:50.050><c> the</c>

00:15:50.160 --> 00:15:50.170 align:start position:0%
improve on what is in what goes into the
 

00:15:50.170 --> 00:15:51.810 align:start position:0%
improve on what is in what goes into the
archive<00:15:50.500><c> so</c><00:15:50.710><c> it</c><00:15:50.980><c> used</c><00:15:51.160><c> to</c><00:15:51.250><c> be</c><00:15:51.340><c> that</c><00:15:51.520><c> it</c><00:15:51.670><c> was</c>

00:15:51.810 --> 00:15:51.820 align:start position:0%
archive so it used to be that it was
 

00:15:51.820 --> 00:15:54.540 align:start position:0%
archive so it used to be that it was
basically<00:15:52.180><c> just</c><00:15:52.480><c> the</c><00:15:52.750><c> class</c><00:15:52.990><c> data</c><00:15:53.410><c> itself</c><00:15:54.010><c> the</c>

00:15:54.540 --> 00:15:54.550 align:start position:0%
basically just the class data itself the
 

00:15:54.550 --> 00:15:57.090 align:start position:0%
basically just the class data itself the
bytecode<00:15:54.760><c> and</c><00:15:55.090><c> the</c><00:15:55.390><c> side</c><00:15:55.570><c> structures</c><00:15:56.050><c> but</c><00:15:56.980><c> now</c>

00:15:57.090 --> 00:15:57.100 align:start position:0%
bytecode and the side structures but now
 

00:15:57.100 --> 00:15:59.850 align:start position:0%
bytecode and the side structures but now
we<00:15:57.160><c> can</c><00:15:57.370><c> also</c><00:15:57.490><c> store</c><00:15:57.940><c> in</c><00:15:58.270><c> turn</c><00:15:58.720><c> strings</c><00:15:59.200><c> and</c>

00:15:59.850 --> 00:15:59.860 align:start position:0%
we can also store in turn strings and
 

00:15:59.860 --> 00:16:01.350 align:start position:0%
we can also store in turn strings and
this<00:16:00.010><c> is</c><00:16:00.190><c> also</c><00:16:00.430><c> something</c><00:16:00.640><c> that</c><00:16:00.760><c> is</c><00:16:00.880><c> evolving</c>

00:16:01.350 --> 00:16:01.360 align:start position:0%
this is also something that is evolving
 

00:16:01.360 --> 00:16:03.060 align:start position:0%
this is also something that is evolving
is<00:16:01.480><c> where</c><00:16:01.660><c> we're</c><00:16:01.960><c> looking</c><00:16:02.140><c> at</c><00:16:02.380><c> adding</c><00:16:02.530><c> even</c>

00:16:03.060 --> 00:16:03.070 align:start position:0%
is where we're looking at adding even
 

00:16:03.070 --> 00:16:06.390 align:start position:0%
is where we're looking at adding even
more<00:16:03.250><c> to</c><00:16:03.430><c> this</c><00:16:03.520><c> going</c><00:16:03.730><c> forward</c><00:16:04.890><c> you</c><00:16:05.890><c> have</c><00:16:05.920><c> two</c>

00:16:06.390 --> 00:16:06.400 align:start position:0%
more to this going forward you have two
 

00:16:06.400 --> 00:16:09.270 align:start position:0%
more to this going forward you have two
major<00:16:06.940><c> types</c><00:16:07.660><c> of</c><00:16:08.110><c> improvements</c><00:16:08.380><c> here</c><00:16:08.770><c> the</c>

00:16:09.270 --> 00:16:09.280 align:start position:0%
major types of improvements here the
 

00:16:09.280 --> 00:16:12.420 align:start position:0%
major types of improvements here the
first<00:16:09.520><c> one</c><00:16:09.760><c> is</c><00:16:09.790><c> startup</c><00:16:10.480><c> time</c><00:16:10.690><c> so</c><00:16:11.290><c> by</c><00:16:11.830><c> four</c>

00:16:12.420 --> 00:16:12.430 align:start position:0%
first one is startup time so by four
 

00:16:12.430 --> 00:16:15.060 align:start position:0%
first one is startup time so by four
since<00:16:13.060><c> the</c><00:16:13.210><c> VM</c><00:16:13.420><c> no</c><00:16:13.630><c> longer</c><00:16:13.990><c> has</c><00:16:14.170><c> to</c><00:16:14.320><c> read</c><00:16:14.620><c> the</c>

00:16:15.060 --> 00:16:15.070 align:start position:0%
since the VM no longer has to read the
 

00:16:15.070 --> 00:16:17.190 align:start position:0%
since the VM no longer has to read the
class<00:16:15.310><c> data</c><00:16:15.550><c> from</c><00:16:15.850><c> file</c><00:16:16.270><c> from</c><00:16:16.570><c> your</c><00:16:16.630><c> jar</c><00:16:16.960><c> files</c>

00:16:17.190 --> 00:16:17.200 align:start position:0%
class data from file from your jar files
 

00:16:17.200 --> 00:16:19.680 align:start position:0%
class data from file from your jar files
for<00:16:17.440><c> class</c><00:16:17.620><c> files</c><00:16:17.890><c> and</c><00:16:18.150><c> massaged</c><00:16:19.150><c> that</c><00:16:19.180><c> and</c>

00:16:19.680 --> 00:16:19.690 align:start position:0%
for class files and massaged that and
 

00:16:19.690 --> 00:16:20.970 align:start position:0%
for class files and massaged that and
make<00:16:19.810><c> sure</c><00:16:19.840><c> that</c><00:16:19.990><c> it's</c><00:16:20.260><c> in</c><00:16:20.380><c> the</c><00:16:20.440><c> right</c><00:16:20.560><c> format</c>

00:16:20.970 --> 00:16:20.980 align:start position:0%
make sure that it's in the right format
 

00:16:20.980 --> 00:16:23.100 align:start position:0%
make sure that it's in the right format
and<00:16:21.220><c> again</c><00:16:21.400><c> all</c><00:16:21.550><c> of</c><00:16:21.580><c> that</c><00:16:21.700><c> instead</c><00:16:22.570><c> now</c><00:16:22.810><c> we</c><00:16:22.840><c> can</c>

00:16:23.100 --> 00:16:23.110 align:start position:0%
and again all of that instead now we can
 

00:16:23.110 --> 00:16:24.750 align:start position:0%
and again all of that instead now we can
just<00:16:23.290><c> pick</c><00:16:23.530><c> up</c><00:16:23.560><c> this</c><00:16:23.830><c> shared</c><00:16:24.190><c> archive</c><00:16:24.610><c> and</c>

00:16:24.750 --> 00:16:24.760 align:start position:0%
just pick up this shared archive and
 

00:16:24.760 --> 00:16:26.590 align:start position:0%
just pick up this shared archive and
it's<00:16:24.910><c> already</c><00:16:25.240><c> on</c><00:16:25.420><c> the</c><00:16:25.510><c> right</c>

00:16:26.590 --> 00:16:26.600 align:start position:0%
it's already on the right
 

00:16:26.600 --> 00:16:29.259 align:start position:0%
it's already on the right
you<00:16:26.839><c> get</c><00:16:26.990><c> startup</c><00:16:27.319><c> time</c><00:16:27.529><c> improvements</c><00:16:28.250><c> and</c><00:16:29.120><c> in</c>

00:16:29.259 --> 00:16:29.269 align:start position:0%
you get startup time improvements and in
 

00:16:29.269 --> 00:16:30.670 align:start position:0%
you get startup time improvements and in
this<00:16:29.449><c> specific</c><00:16:30.019><c> case</c><00:16:30.139><c> we're</c><00:16:30.380><c> looking</c><00:16:30.470><c> at</c>

00:16:30.670 --> 00:16:30.680 align:start position:0%
this specific case we're looking at
 

00:16:30.680 --> 00:16:35.620 align:start position:0%
this specific case we're looking at
WebLogic<00:16:31.130><c> server</c><00:16:32.139><c> based</c><00:16:33.139><c> domain</c><00:16:33.410><c> and</c><00:16:34.480><c> we</c><00:16:35.480><c> can</c>

00:16:35.620 --> 00:16:35.630 align:start position:0%
WebLogic server based domain and we can
 

00:16:35.630 --> 00:16:37.509 align:start position:0%
WebLogic server based domain and we can
see<00:16:35.779><c> that</c><00:16:35.990><c> the</c><00:16:36.170><c> improvement</c><00:16:36.620><c> is</c><00:16:36.740><c> ballpark</c>

00:16:37.509 --> 00:16:37.519 align:start position:0%
see that the improvement is ballpark
 

00:16:37.519 --> 00:16:39.879 align:start position:0%
see that the improvement is ballpark
25-30<00:16:38.240><c> percent</c><00:16:38.360><c> something</c><00:16:38.959><c> like</c><00:16:39.050><c> that</c><00:16:39.230><c> this</c>

00:16:39.879 --> 00:16:39.889 align:start position:0%
25-30 percent something like that this
 

00:16:39.889 --> 00:16:41.319 align:start position:0%
25-30 percent something like that this
will<00:16:40.100><c> clearly</c><00:16:40.459><c> vary</c><00:16:40.759><c> a</c><00:16:40.850><c> bit</c><00:16:40.910><c> on</c><00:16:41.180><c> your</c>

00:16:41.319 --> 00:16:41.329 align:start position:0%
will clearly vary a bit on your
 

00:16:41.329 --> 00:16:42.850 align:start position:0%
will clearly vary a bit on your
application<00:16:41.870><c> but</c><00:16:41.990><c> I</c><00:16:42.050><c> think</c><00:16:42.290><c> we've</c><00:16:42.470><c> seen</c><00:16:42.680><c> that</c>

00:16:42.850 --> 00:16:42.860 align:start position:0%
application but I think we've seen that
 

00:16:42.860 --> 00:16:45.160 align:start position:0%
application but I think we've seen that
typically<00:16:43.550><c> you'll</c><00:16:43.759><c> see</c><00:16:43.870><c> this</c><00:16:44.870><c> ballpark</c>

00:16:45.160 --> 00:16:45.170 align:start position:0%
typically you'll see this ballpark
 

00:16:45.170 --> 00:16:48.519 align:start position:0%
typically you'll see this ballpark
number<00:16:45.769><c> 25</c><00:16:46.430><c> 30</c><00:16:46.670><c> %</c><00:16:47.000><c> and</c><00:16:47.180><c> startup</c><00:16:47.449><c> time</c><00:16:47.600><c> so</c><00:16:48.410><c> it's</c>

00:16:48.519 --> 00:16:48.529 align:start position:0%
number 25 30 % and startup time so it's
 

00:16:48.529 --> 00:16:51.160 align:start position:0%
number 25 30 % and startup time so it's
pretty<00:16:48.680><c> significant</c><00:16:49.279><c> and</c><00:16:49.540><c> the</c><00:16:50.540><c> other</c><00:16:50.720><c> aspect</c>

00:16:51.160 --> 00:16:51.170 align:start position:0%
pretty significant and the other aspect
 

00:16:51.170 --> 00:16:52.900 align:start position:0%
pretty significant and the other aspect
of<00:16:51.230><c> this</c><00:16:51.350><c> is</c><00:16:51.410><c> footprint</c><00:16:51.920><c> so</c><00:16:52.490><c> the</c><00:16:52.579><c> fact</c><00:16:52.790><c> that</c>

00:16:52.900 --> 00:16:52.910 align:start position:0%
of this is footprint so the fact that
 

00:16:52.910 --> 00:16:54.340 align:start position:0%
of this is footprint so the fact that
now<00:16:53.000><c> more</c><00:16:53.360><c> of</c><00:16:53.480><c> the</c><00:16:53.600><c> data</c><00:16:53.779><c> can</c><00:16:54.079><c> be</c><00:16:54.139><c> shared</c>

00:16:54.340 --> 00:16:54.350 align:start position:0%
now more of the data can be shared
 

00:16:54.350 --> 00:16:56.559 align:start position:0%
now more of the data can be shared
across<00:16:54.860><c> instances</c><00:16:55.579><c> means</c><00:16:56.000><c> that</c><00:16:56.209><c> you</c><00:16:56.389><c> have</c>

00:16:56.559 --> 00:16:56.569 align:start position:0%
across instances means that you have
 

00:16:56.569 --> 00:16:59.769 align:start position:0%
across instances means that you have
less<00:16:57.050><c> waste</c><00:16:57.920><c> less</c><00:16:58.540><c> footprint</c><00:16:59.540><c> for</c><00:16:59.720><c> the</c>

00:16:59.769 --> 00:16:59.779 align:start position:0%
less waste less footprint for the
 

00:16:59.779 --> 00:17:01.900 align:start position:0%
less waste less footprint for the
individual<00:17:00.380><c> instances</c><00:17:00.889><c> and</c><00:17:01.220><c> obviously</c><00:17:01.790><c> the</c>

00:17:01.900 --> 00:17:01.910 align:start position:0%
individual instances and obviously the
 

00:17:01.910 --> 00:17:04.360 align:start position:0%
individual instances and obviously the
more<00:17:02.180><c> instances</c><00:17:02.750><c> you</c><00:17:02.899><c> run</c><00:17:03.110><c> the</c><00:17:03.350><c> better</c><00:17:03.500><c> this</c>

00:17:04.360 --> 00:17:04.370 align:start position:0%
more instances you run the better this
 

00:17:04.370 --> 00:17:05.949 align:start position:0%
more instances you run the better this
does<00:17:04.579><c> assume</c><00:17:04.939><c> to</c><00:17:05.240><c> some</c><00:17:05.419><c> extent</c><00:17:05.720><c> that</c><00:17:05.780><c> you're</c>

00:17:05.949 --> 00:17:05.959 align:start position:0%
does assume to some extent that you're
 

00:17:05.959 --> 00:17:08.799 align:start position:0%
does assume to some extent that you're
running<00:17:06.319><c> similar</c><00:17:07.069><c> applications</c><00:17:07.699><c> that</c><00:17:08.419><c> that</c>

00:17:08.799 --> 00:17:08.809 align:start position:0%
running similar applications that that
 

00:17:08.809 --> 00:17:11.919 align:start position:0%
running similar applications that that
it's<00:17:08.959><c> likely</c><00:17:09.110><c> the</c><00:17:09.319><c> same</c><00:17:09.589><c> exact</c><00:17:10.630><c> stack</c><00:17:11.630><c> of</c>

00:17:11.919 --> 00:17:11.929 align:start position:0%
it's likely the same exact stack of
 

00:17:11.929 --> 00:17:13.750 align:start position:0%
it's likely the same exact stack of
software<00:17:12.409><c> or</c><00:17:12.620><c> at</c><00:17:12.860><c> least</c><00:17:13.130><c> that</c><00:17:13.370><c> they</c><00:17:13.520><c> share</c>

00:17:13.750 --> 00:17:13.760 align:start position:0%
software or at least that they share
 

00:17:13.760 --> 00:17:16.360 align:start position:0%
software or at least that they share
some<00:17:14.000><c> common</c><00:17:14.030><c> frameworks</c><00:17:14.870><c> and</c><00:17:15.020><c> libraries</c><00:17:15.370><c> but</c>

00:17:16.360 --> 00:17:16.370 align:start position:0%
some common frameworks and libraries but
 

00:17:16.370 --> 00:17:18.340 align:start position:0%
some common frameworks and libraries but
I<00:17:16.400><c> think</c><00:17:16.610><c> from</c><00:17:17.329><c> what</c><00:17:17.480><c> we've</c><00:17:17.630><c> seen</c><00:17:17.839><c> that</c><00:17:17.990><c> that's</c>

00:17:18.340 --> 00:17:18.350 align:start position:0%
I think from what we've seen that that's
 

00:17:18.350 --> 00:17:20.799 align:start position:0%
I think from what we've seen that that's
a<00:17:18.530><c> very</c><00:17:18.709><c> typical</c><00:17:19.120><c> deployment</c><00:17:20.120><c> environment</c>

00:17:20.799 --> 00:17:20.809 align:start position:0%
a very typical deployment environment
 

00:17:20.809 --> 00:17:22.470 align:start position:0%
a very typical deployment environment
and<00:17:21.020><c> I</c><00:17:21.049><c> think</c><00:17:21.230><c> it's</c><00:17:21.319><c> even</c><00:17:21.470><c> more</c><00:17:21.620><c> common</c><00:17:22.130><c> with</c>

00:17:22.470 --> 00:17:22.480 align:start position:0%
and I think it's even more common with
 

00:17:22.480 --> 00:17:25.090 align:start position:0%
and I think it's even more common with
environments<00:17:23.480><c> like</c><00:17:23.600><c> doctor</c><00:17:24.010><c> where</c><00:17:25.010><c> you</c>

00:17:25.090 --> 00:17:25.100 align:start position:0%
environments like doctor where you
 

00:17:25.100 --> 00:17:26.919 align:start position:0%
environments like doctor where you
actually<00:17:25.429><c> have</c><00:17:25.669><c> the</c><00:17:25.789><c> exact</c><00:17:26.089><c> same</c><00:17:26.150><c> image</c><00:17:26.689><c> and</c>

00:17:26.919 --> 00:17:26.929 align:start position:0%
actually have the exact same image and
 

00:17:26.929 --> 00:17:28.179 align:start position:0%
actually have the exact same image and
you<00:17:27.020><c> stamp</c><00:17:27.319><c> out</c><00:17:27.559><c> multiple</c><00:17:28.010><c> different</c>

00:17:28.179 --> 00:17:28.189 align:start position:0%
you stamp out multiple different
 

00:17:28.189 --> 00:17:31.270 align:start position:0%
you stamp out multiple different
containers<00:17:28.880><c> from</c><00:17:29.150><c> that</c><00:17:29.980><c> so</c><00:17:30.980><c> the</c><00:17:31.100><c> nice</c><00:17:31.250><c> part</c>

00:17:31.270 --> 00:17:31.280 align:start position:0%
containers from that so the nice part
 

00:17:31.280 --> 00:17:33.279 align:start position:0%
containers from that so the nice part
here<00:17:31.580><c> is</c><00:17:31.760><c> that</c><00:17:32.030><c> this</c><00:17:32.450><c> works</c><00:17:32.780><c> together</c><00:17:33.049><c> with</c>

00:17:33.279 --> 00:17:33.289 align:start position:0%
here is that this works together with
 

00:17:33.289 --> 00:17:35.110 align:start position:0%
here is that this works together with
doctor<00:17:33.620><c> as</c><00:17:33.710><c> well</c><00:17:33.740><c> as</c><00:17:34.429><c> a</c><00:17:34.580><c> matter</c><00:17:34.760><c> of</c><00:17:34.820><c> fact</c><00:17:35.000><c> if</c>

00:17:35.110 --> 00:17:35.120 align:start position:0%
doctor as well as a matter of fact if
 

00:17:35.120 --> 00:17:37.210 align:start position:0%
doctor as well as a matter of fact if
you<00:17:35.150><c> place</c><00:17:35.539><c> the</c><00:17:35.900><c> the</c><00:17:36.200><c> shared</c><00:17:36.500><c> archive</c><00:17:36.919><c> in</c><00:17:37.130><c> a</c>

00:17:37.210 --> 00:17:37.220 align:start position:0%
you place the the shared archive in a
 

00:17:37.220 --> 00:17:39.100 align:start position:0%
you place the the shared archive in a
layer<00:17:37.429><c> that</c><00:17:37.760><c> gets</c><00:17:38.090><c> shared</c><00:17:38.390><c> across</c><00:17:38.690><c> doctor</c>

00:17:39.100 --> 00:17:39.110 align:start position:0%
layer that gets shared across doctor
 

00:17:39.110 --> 00:17:41.110 align:start position:0%
layer that gets shared across doctor
containers<00:17:39.590><c> then</c><00:17:39.799><c> it</c><00:17:40.309><c> will</c><00:17:40.460><c> work</c><00:17:40.610><c> very</c><00:17:40.669><c> much</c>

00:17:41.110 --> 00:17:41.120 align:start position:0%
containers then it will work very much
 

00:17:41.120 --> 00:17:43.289 align:start position:0%
containers then it will work very much
like<00:17:41.299><c> operating</c><00:17:41.750><c> system</c><00:17:42.080><c> shared</c><00:17:42.799><c> libraries</c>

00:17:43.289 --> 00:17:43.299 align:start position:0%
like operating system shared libraries
 

00:17:43.299 --> 00:17:45.909 align:start position:0%
like operating system shared libraries
and<00:17:44.299><c> it</c><00:17:44.419><c> may</c><00:17:44.570><c> not</c><00:17:44.780><c> look</c><00:17:45.080><c> like</c><00:17:45.140><c> we're</c><00:17:45.559><c> saving</c><00:17:45.830><c> a</c>

00:17:45.909 --> 00:17:45.919 align:start position:0%
and it may not look like we're saving a
 

00:17:45.919 --> 00:17:48.039 align:start position:0%
and it may not look like we're saving a
lot<00:17:46.039><c> so</c><00:17:46.309><c> the</c><00:17:46.610><c> the</c><00:17:46.880><c> bars</c><00:17:47.090><c> here</c><00:17:47.360><c> are</c><00:17:47.390><c> the</c><00:17:47.780><c> unique</c>

00:17:48.039 --> 00:17:48.049 align:start position:0%
lot so the the bars here are the unique
 

00:17:48.049 --> 00:17:50.350 align:start position:0%
lot so the the bars here are the unique
data<00:17:48.289><c> per</c><00:17:48.559><c> instance</c><00:17:48.919><c> with</c><00:17:49.520><c> and</c><00:17:49.820><c> without</c><00:17:49.970><c> app</c>

00:17:50.350 --> 00:17:50.360 align:start position:0%
data per instance with and without app
 

00:17:50.360 --> 00:17:54.070 align:start position:0%
data per instance with and without app
serious<00:17:50.799><c> it's</c><00:17:51.799><c> the</c><00:17:52.039><c> shared</c><00:17:52.370><c> data</c><00:17:53.210><c> with</c><00:17:53.809><c> and</c>

00:17:54.070 --> 00:17:54.080 align:start position:0%
serious it's the shared data with and
 

00:17:54.080 --> 00:17:57.279 align:start position:0%
serious it's the shared data with and
without<00:17:54.230><c> the</c><00:17:54.500><c> absolute</c><00:17:54.799><c> Lea's</c><00:17:55.159><c> and</c><00:17:55.700><c> it</c><00:17:56.210><c> is</c><00:17:56.450><c> the</c>

00:17:57.279 --> 00:17:57.289 align:start position:0%
without the absolute Lea's and it is the
 

00:17:57.289 --> 00:17:59.919 align:start position:0%
without the absolute Lea's and it is the
total<00:17:57.650><c> footprint</c><00:17:58.400><c> with</c><00:17:59.210><c> and</c><00:17:59.510><c> without</c><00:17:59.659><c> the</c>

00:17:59.919 --> 00:17:59.929 align:start position:0%
total footprint with and without the
 

00:17:59.929 --> 00:18:02.080 align:start position:0%
total footprint with and without the
absolute<00:18:00.080><c> yes</c><00:18:00.380><c> and</c><00:18:01.280><c> it</c><00:18:01.520><c> may</c><00:18:01.640><c> look</c><00:18:01.760><c> like</c><00:18:01.820><c> the</c>

00:18:02.080 --> 00:18:02.090 align:start position:0%
absolute yes and it may look like the
 

00:18:02.090 --> 00:18:04.060 align:start position:0%
absolute yes and it may look like the
bars<00:18:02.299><c> are</c><00:18:02.600><c> similar</c><00:18:03.080><c> you</c><00:18:03.350><c> should</c><00:18:03.890><c> note</c><00:18:04.039><c> that</c>

00:18:04.060 --> 00:18:04.070 align:start position:0%
bars are similar you should note that
 

00:18:04.070 --> 00:18:08.620 align:start position:0%
bars are similar you should note that
the<00:18:04.549><c> y</c><00:18:05.330><c> axis</c><00:18:05.780><c> is</c><00:18:05.809><c> logarithmic</c><00:18:07.240><c> but</c><00:18:08.240><c> in</c><00:18:08.360><c> the</c><00:18:08.480><c> end</c>

00:18:08.620 --> 00:18:08.630 align:start position:0%
the y axis is logarithmic but in the end
 

00:18:08.630 --> 00:18:11.080 align:start position:0%
the y axis is logarithmic but in the end
this<00:18:08.929><c> actually</c><00:18:09.590><c> does</c><00:18:09.799><c> add</c><00:18:10.100><c> up</c><00:18:10.130><c> over</c><00:18:10.730><c> time</c><00:18:10.909><c> so</c>

00:18:11.080 --> 00:18:11.090 align:start position:0%
this actually does add up over time so
 

00:18:11.090 --> 00:18:12.580 align:start position:0%
this actually does add up over time so
this<00:18:11.179><c> is</c><00:18:11.240><c> in</c><00:18:11.539><c> this</c><00:18:11.659><c> case</c><00:18:11.720><c> 10</c><00:18:12.200><c> different</c>

00:18:12.580 --> 00:18:12.590 align:start position:0%
this is in this case 10 different
 

00:18:12.590 --> 00:18:15.100 align:start position:0%
this is in this case 10 different
instances<00:18:13.100><c> if</c><00:18:13.520><c> you</c><00:18:14.150><c> run</c><00:18:14.330><c> even</c><00:18:14.510><c> more</c><00:18:14.750><c> you</c><00:18:14.929><c> get</c>

00:18:15.100 --> 00:18:15.110 align:start position:0%
instances if you run even more you get
 

00:18:15.110 --> 00:18:17.110 align:start position:0%
instances if you run even more you get
more<00:18:15.320><c> sharing</c><00:18:15.740><c> and</c><00:18:15.950><c> what</c><00:18:16.549><c> we're</c><00:18:16.700><c> seeing</c><00:18:16.880><c> here</c>

00:18:17.110 --> 00:18:17.120 align:start position:0%
more sharing and what we're seeing here
 

00:18:17.120 --> 00:18:19.390 align:start position:0%
more sharing and what we're seeing here
is<00:18:17.240><c> approximately</c><00:18:17.450><c> 10%</c><00:18:18.049><c> which</c><00:18:18.950><c> may</c><00:18:19.100><c> not</c><00:18:19.280><c> sound</c>

00:18:19.390 --> 00:18:19.400 align:start position:0%
is approximately 10% which may not sound
 

00:18:19.400 --> 00:18:21.940 align:start position:0%
is approximately 10% which may not sound
like<00:18:19.549><c> a</c><00:18:19.640><c> lot</c><00:18:19.760><c> for</c><00:18:19.909><c> like</c><00:18:20.630><c> my</c><00:18:20.840><c> laptop</c><00:18:21.289><c> but</c><00:18:21.620><c> if</c><00:18:21.799><c> you</c>

00:18:21.940 --> 00:18:21.950 align:start position:0%
like a lot for like my laptop but if you
 

00:18:21.950 --> 00:18:23.710 align:start position:0%
like a lot for like my laptop but if you
if<00:18:22.250><c> you</c><00:18:22.370><c> stamp</c><00:18:22.610><c> that</c><00:18:22.820><c> out</c><00:18:22.970><c> across</c><00:18:23.120><c> a</c><00:18:23.480><c> data</c>

00:18:23.710 --> 00:18:23.720 align:start position:0%
if you stamp that out across a data
 

00:18:23.720 --> 00:18:25.419 align:start position:0%
if you stamp that out across a data
center<00:18:24.110><c> with</c><00:18:24.320><c> hundreds</c><00:18:24.919><c> of</c><00:18:25.010><c> thousands</c><00:18:25.400><c> of</c>

00:18:25.419 --> 00:18:25.429 align:start position:0%
center with hundreds of thousands of
 

00:18:25.429 --> 00:18:26.799 align:start position:0%
center with hundreds of thousands of
instances<00:18:25.730><c> then</c><00:18:26.090><c> it</c><00:18:26.210><c> suddenly</c><00:18:26.450><c> starts</c>

00:18:26.799 --> 00:18:26.809 align:start position:0%
instances then it suddenly starts
 

00:18:26.809 --> 00:18:29.120 align:start position:0%
instances then it suddenly starts
turning<00:18:27.530><c> into</c><00:18:27.710><c> real</c><00:18:27.890><c> dollars</c>

00:18:29.120 --> 00:18:29.130 align:start position:0%
turning into real dollars
 

00:18:29.130 --> 00:18:34.340 align:start position:0%
turning into real dollars
I<00:18:31.040><c> want</c><00:18:32.040><c> to</c><00:18:32.130><c> mention</c><00:18:32.280><c> that</c><00:18:32.760><c> app</c><00:18:33.360><c> CDs</c><00:18:33.720><c> will</c><00:18:34.140><c> be</c>

00:18:34.340 --> 00:18:34.350 align:start position:0%
I want to mention that app CDs will be
 

00:18:34.350 --> 00:18:36.380 align:start position:0%
I want to mention that app CDs will be
open<00:18:34.680><c> sourced</c><00:18:34.980><c> this</c><00:18:35.400><c> is</c><00:18:35.580><c> functionality</c><00:18:35.970><c> that</c>

00:18:36.380 --> 00:18:36.390 align:start position:0%
open sourced this is functionality that
 

00:18:36.390 --> 00:18:38.600 align:start position:0%
open sourced this is functionality that
the<00:18:36.720><c> CD</c><00:18:37.050><c> s</c><00:18:37.170><c> aspect</c><00:18:37.620><c> has</c><00:18:37.740><c> always</c><00:18:37.950><c> been</c><00:18:38.160><c> open</c><00:18:38.460><c> but</c>

00:18:38.600 --> 00:18:38.610 align:start position:0%
the CD s aspect has always been open but
 

00:18:38.610 --> 00:18:40.670 align:start position:0%
the CD s aspect has always been open but
the<00:18:38.760><c> app</c><00:18:38.940><c> CD</c><00:18:39.360><c> s</c><00:18:39.450><c> aspect</c><00:18:39.870><c> has</c><00:18:39.990><c> been</c><00:18:40.020><c> closed</c><00:18:40.440><c> but</c>

00:18:40.670 --> 00:18:40.680 align:start position:0%
the app CD s aspect has been closed but
 

00:18:40.680 --> 00:18:43.130 align:start position:0%
the app CD s aspect has been closed but
we're<00:18:41.220><c> working</c><00:18:41.700><c> on</c><00:18:41.820><c> open</c><00:18:42.330><c> sourcing</c><00:18:42.630><c> this</c><00:18:42.750><c> I</c>

00:18:43.130 --> 00:18:43.140 align:start position:0%
we're working on open sourcing this I
 

00:18:43.140 --> 00:18:45.620 align:start position:0%
we're working on open sourcing this I
cannot<00:18:44.070><c> promise</c><00:18:44.340><c> which</c><00:18:44.670><c> exactly</c><00:18:45.090><c> release</c><00:18:45.390><c> it</c>

00:18:45.620 --> 00:18:45.630 align:start position:0%
cannot promise which exactly release it
 

00:18:45.630 --> 00:18:49.070 align:start position:0%
cannot promise which exactly release it
will<00:18:45.780><c> go</c><00:18:45.930><c> into</c><00:18:46.110><c> but</c><00:18:47.300><c> suffice</c><00:18:48.300><c> to</c><00:18:48.360><c> say</c><00:18:48.600><c> that</c><00:18:48.720><c> we</c>

00:18:49.070 --> 00:18:49.080 align:start position:0%
will go into but suffice to say that we
 

00:18:49.080 --> 00:18:51.410 align:start position:0%
will go into but suffice to say that we
were<00:18:49.500><c> very</c><00:18:50.040><c> eager</c><00:18:50.190><c> to</c><00:18:50.700><c> get</c><00:18:50.820><c> this</c><00:18:50.970><c> out</c><00:18:51.150><c> so</c><00:18:51.300><c> as</c>

00:18:51.410 --> 00:18:51.420 align:start position:0%
were very eager to get this out so as
 

00:18:51.420 --> 00:18:55.400 align:start position:0%
were very eager to get this out so as
soon<00:18:51.600><c> as</c><00:18:51.660><c> possible</c>

00:18:55.400 --> 00:18:55.410 align:start position:0%
 
 

00:18:55.410 --> 00:18:59.750 align:start position:0%
 
on<00:18:56.190><c> the</c><00:18:56.550><c> on</c><00:18:57.060><c> a</c><00:18:57.120><c> similar</c><00:18:57.600><c> topic</c><00:18:58.070><c> we</c><00:18:59.070><c> have</c><00:18:59.100><c> AB</c><00:18:59.520><c> CD</c>

00:18:59.750 --> 00:18:59.760 align:start position:0%
on the on a similar topic we have AB CD
 

00:18:59.760 --> 00:19:02.720 align:start position:0%
on the on a similar topic we have AB CD
s<00:18:59.940><c> that</c><00:19:00.150><c> takes</c><00:19:00.330><c> care</c><00:19:00.540><c> of</c><00:19:00.600><c> Java</c><00:19:01.110><c> class</c><00:19:01.470><c> data</c><00:19:01.830><c> and</c>

00:19:02.720 --> 00:19:02.730 align:start position:0%
s that takes care of Java class data and
 

00:19:02.730 --> 00:19:04.640 align:start position:0%
s that takes care of Java class data and
the<00:19:02.820><c> other</c><00:19:03.030><c> thing</c><00:19:03.390><c> we</c><00:19:03.510><c> worked</c><00:19:03.750><c> on</c><00:19:03.900><c> the</c><00:19:04.470><c> last</c>

00:19:04.640 --> 00:19:04.650 align:start position:0%
the other thing we worked on the last
 

00:19:04.650 --> 00:19:07.100 align:start position:0%
the other thing we worked on the last
few<00:19:04.890><c> years</c><00:19:04.920><c> is</c><00:19:05.480><c> functionality</c><00:19:06.480><c> called</c>

00:19:07.100 --> 00:19:07.110 align:start position:0%
few years is functionality called
 

00:19:07.110 --> 00:19:10.190 align:start position:0%
few years is functionality called
alt<00:19:07.740><c> or</c><00:19:07.980><c> ahead</c><00:19:08.340><c> of</c><00:19:08.370><c> time</c><00:19:08.670><c> compilation</c><00:19:09.020><c> so</c><00:19:10.020><c> this</c>

00:19:10.190 --> 00:19:10.200 align:start position:0%
alt or ahead of time compilation so this
 

00:19:10.200 --> 00:19:13.010 align:start position:0%
alt or ahead of time compilation so this
is<00:19:10.380><c> doing</c><00:19:10.680><c> with</c><00:19:10.860><c> AB</c><00:19:11.040><c> CD</c><00:19:11.310><c> with</c><00:19:12.000><c> JIT</c><00:19:12.270><c> compile</c><00:19:12.780><c> the</c>

00:19:13.010 --> 00:19:13.020 align:start position:0%
is doing with AB CD with JIT compile the
 

00:19:13.020 --> 00:19:15.290 align:start position:0%
is doing with AB CD with JIT compile the
data<00:19:13.070><c> there</c><00:19:14.070><c> were</c><00:19:14.100><c> Serge</c><00:19:14.430><c> it</c><00:19:14.670><c> compiled</c><00:19:15.030><c> code</c>

00:19:15.290 --> 00:19:15.300 align:start position:0%
data there were Serge it compiled code
 

00:19:15.300 --> 00:19:17.600 align:start position:0%
data there were Serge it compiled code
the<00:19:15.900><c> same</c><00:19:16.110><c> thing</c><00:19:16.320><c> that</c><00:19:16.440><c> AB</c><00:19:16.650><c> CD</c><00:19:16.920><c> s</c><00:19:17.100><c> does</c><00:19:17.400><c> with</c>

00:19:17.600 --> 00:19:17.610 align:start position:0%
the same thing that AB CD s does with
 

00:19:17.610 --> 00:19:19.580 align:start position:0%
the same thing that AB CD s does with
the<00:19:17.700><c> class</c><00:19:17.880><c> data</c><00:19:18.180><c> so</c><00:19:18.540><c> you</c><00:19:18.600><c> know</c><00:19:19.050><c> in</c><00:19:19.200><c> a</c><00:19:19.290><c> normal</c>

00:19:19.580 --> 00:19:19.590 align:start position:0%
the class data so you know in a normal
 

00:19:19.590 --> 00:19:21.380 align:start position:0%
the class data so you know in a normal
operating<00:19:20.160><c> system</c><00:19:20.550><c> shared</c><00:19:20.790><c> library</c><00:19:21.210><c> you</c><00:19:21.360><c> have</c>

00:19:21.380 --> 00:19:21.390 align:start position:0%
operating system shared library you have
 

00:19:21.390 --> 00:19:22.760 align:start position:0%
operating system shared library you have
the<00:19:21.570><c> data</c><00:19:21.810><c> aspect</c><00:19:22.200><c> then</c><00:19:22.320><c> you</c><00:19:22.410><c> have</c><00:19:22.500><c> the</c><00:19:22.590><c> code</c>

00:19:22.760 --> 00:19:22.770 align:start position:0%
the data aspect then you have the code
 

00:19:22.770 --> 00:19:26.210 align:start position:0%
the data aspect then you have the code
aspect<00:19:23.220><c> and</c><00:19:23.810><c> you</c><00:19:24.810><c> package</c><00:19:25.350><c> them</c><00:19:25.500><c> as</c><00:19:25.620><c> a</c><00:19:25.650><c> as</c><00:19:26.160><c> a</c>

00:19:26.210 --> 00:19:26.220 align:start position:0%
aspect and you package them as a as a
 

00:19:26.220 --> 00:19:28.580 align:start position:0%
aspect and you package them as a as a
live<00:19:26.520><c> something</c><00:19:26.940><c> else</c><00:19:27.090><c> probably</c><00:19:27.530><c> this</c><00:19:28.530><c> is</c>

00:19:28.580 --> 00:19:28.590 align:start position:0%
live something else probably this is
 

00:19:28.590 --> 00:19:31.730 align:start position:0%
live something else probably this is
doing<00:19:28.950><c> the</c><00:19:29.010><c> same</c><00:19:29.160><c> thing</c><00:19:29.220><c> with</c><00:19:29.880><c> code</c><00:19:30.740><c> so</c>

00:19:31.730 --> 00:19:31.740 align:start position:0%
doing the same thing with code so
 

00:19:31.740 --> 00:19:34.880 align:start position:0%
doing the same thing with code so
there's<00:19:32.220><c> a</c><00:19:32.310><c> tool</c><00:19:32.460><c> called</c><00:19:32.490><c> J</c><00:19:33.000><c> OTC</c><00:19:33.600><c> you</c><00:19:34.590><c> give</c><00:19:34.800><c> it</c>

00:19:34.880 --> 00:19:34.890 align:start position:0%
there's a tool called J OTC you give it
 

00:19:34.890 --> 00:19:36.350 align:start position:0%
there's a tool called J OTC you give it
a<00:19:34.950><c> class</c><00:19:35.100><c> file</c><00:19:35.400><c> and</c><00:19:35.700><c> it</c><00:19:35.790><c> will</c><00:19:35.910><c> spit</c><00:19:36.180><c> out</c><00:19:36.210><c> a</c>

00:19:36.350 --> 00:19:36.360 align:start position:0%
a class file and it will spit out a
 

00:19:36.360 --> 00:19:38.120 align:start position:0%
a class file and it will spit out a
shared<00:19:36.870><c> library</c><00:19:37.050><c> in</c><00:19:37.410><c> this</c><00:19:37.530><c> case</c><00:19:37.740><c> it</c><00:19:37.890><c> actually</c>

00:19:38.120 --> 00:19:38.130 align:start position:0%
shared library in this case it actually
 

00:19:38.130 --> 00:19:41.930 align:start position:0%
shared library in this case it actually
is<00:19:38.340><c> an</c><00:19:38.670><c> elf</c><00:19:38.880><c> you</c><00:19:39.620><c> can't</c><00:19:40.620><c> use</c><00:19:40.950><c> it</c><00:19:40.980><c> apart</c><00:19:41.700><c> from</c><00:19:41.790><c> in</c>

00:19:41.930 --> 00:19:41.940 align:start position:0%
is an elf you can't use it apart from in
 

00:19:41.940 --> 00:19:43.760 align:start position:0%
is an elf you can't use it apart from in
the<00:19:42.030><c> VM</c><00:19:42.270><c> obviously</c><00:19:42.660><c> but</c><00:19:42.840><c> it's</c><00:19:43.290><c> still</c><00:19:43.440><c> stored</c>

00:19:43.760 --> 00:19:43.770 align:start position:0%
the VM obviously but it's still stored
 

00:19:43.770 --> 00:19:47.810 align:start position:0%
the VM obviously but it's still stored
in<00:19:43.950><c> that</c><00:19:44.040><c> exact</c><00:19:44.400><c> same</c><00:19:44.520><c> format</c><00:19:46.100><c> so</c><00:19:47.100><c> you</c><00:19:47.370><c> you</c>

00:19:47.810 --> 00:19:47.820 align:start position:0%
in that exact same format so you you
 

00:19:47.820 --> 00:19:49.670 align:start position:0%
in that exact same format so you you
basically<00:19:48.450><c> do</c><00:19:48.630><c> again</c><00:19:48.870><c> sort</c><00:19:49.110><c> of</c><00:19:49.170><c> a</c><00:19:49.200><c> training</c>

00:19:49.670 --> 00:19:49.680 align:start position:0%
basically do again sort of a training
 

00:19:49.680 --> 00:19:51.260 align:start position:0%
basically do again sort of a training
run<00:19:49.980><c> but</c><00:19:50.280><c> in</c><00:19:50.400><c> this</c><00:19:50.460><c> case</c><00:19:50.640><c> it's</c><00:19:50.850><c> a</c><00:19:50.940><c> tool</c><00:19:51.120><c> that</c>

00:19:51.260 --> 00:19:51.270 align:start position:0%
run but in this case it's a tool that
 

00:19:51.270 --> 00:19:54.500 align:start position:0%
run but in this case it's a tool that
you<00:19:51.330><c> run</c><00:19:51.540><c> and</c><00:19:52.050><c> then</c><00:19:52.350><c> for</c><00:19:52.710><c> subsequent</c><00:19:53.270><c> JVM</c><00:19:54.270><c> runs</c>

00:19:54.500 --> 00:19:54.510 align:start position:0%
you run and then for subsequent JVM runs
 

00:19:54.510 --> 00:19:56.660 align:start position:0%
you run and then for subsequent JVM runs
you<00:19:54.900><c> point</c><00:19:55.320><c> it</c><00:19:55.500><c> to</c><00:19:55.590><c> that</c><00:19:55.620><c> shared</c><00:19:55.980><c> library</c><00:19:56.370><c> and</c>

00:19:56.660 --> 00:19:56.670 align:start position:0%
you point it to that shared library and
 

00:19:56.670 --> 00:19:59.510 align:start position:0%
you point it to that shared library and
the<00:19:57.000><c> shared</c><00:19:57.210><c> library</c><00:19:57.540><c> will</c><00:19:57.720><c> be</c><00:19:57.870><c> reused</c><00:19:58.520><c> the</c>

00:19:59.510 --> 00:19:59.520 align:start position:0%
the shared library will be reused the
 

00:19:59.520 --> 00:20:02.780 align:start position:0%
the shared library will be reused the
code<00:19:59.850><c> itself</c><00:20:00.300><c> is</c><00:20:00.990><c> not</c><00:20:01.620><c> as</c><00:20:01.890><c> efficient</c><00:20:02.430><c> and</c><00:20:02.610><c> not</c>

00:20:02.780 --> 00:20:02.790 align:start position:0%
code itself is not as efficient and not
 

00:20:02.790 --> 00:20:05.060 align:start position:0%
code itself is not as efficient and not
as<00:20:03.000><c> performant</c><00:20:03.690><c> as</c><00:20:03.900><c> you</c><00:20:04.050><c> would</c><00:20:04.230><c> what</c><00:20:04.590><c> would</c>

00:20:05.060 --> 00:20:05.070 align:start position:0%
as performant as you would what would
 

00:20:05.070 --> 00:20:07.490 align:start position:0%
as performant as you would what would
you<00:20:05.250><c> what</c><00:20:05.910><c> you</c><00:20:06.150><c> would</c><00:20:06.330><c> have</c><00:20:06.570><c> with</c><00:20:06.930><c> the</c><00:20:07.110><c> on</c><00:20:07.260><c> line</c>

00:20:07.490 --> 00:20:07.500 align:start position:0%
you what you would have with the on line
 

00:20:07.500 --> 00:20:09.620 align:start position:0%
you what you would have with the on line
jet<00:20:07.800><c> the</c><00:20:08.460><c> the</c><00:20:08.700><c> cervical</c><00:20:09.090><c> pilot</c><00:20:09.420><c> we</c><00:20:09.480><c> have</c>

00:20:09.620 --> 00:20:09.630 align:start position:0%
jet the the cervical pilot we have
 

00:20:09.630 --> 00:20:12.470 align:start position:0%
jet the the cervical pilot we have
inside<00:20:09.900><c> of</c><00:20:10.020><c> the</c><00:20:10.080><c> VM</c><00:20:10.550><c> but</c><00:20:11.550><c> the</c><00:20:11.910><c> nice</c><00:20:12.060><c> part</c><00:20:12.090><c> here</c>

00:20:12.470 --> 00:20:12.480 align:start position:0%
inside of the VM but the nice part here
 

00:20:12.480 --> 00:20:15.320 align:start position:0%
inside of the VM but the nice part here
is<00:20:12.630><c> that</c><00:20:12.930><c> the</c><00:20:13.860><c> code</c><00:20:14.130><c> that</c><00:20:14.430><c> is</c><00:20:14.580><c> stored</c><00:20:14.910><c> actually</c>

00:20:15.320 --> 00:20:15.330 align:start position:0%
is that the code that is stored actually
 

00:20:15.330 --> 00:20:17.420 align:start position:0%
is that the code that is stored actually
contains<00:20:15.810><c> a</c><00:20:16.020><c> lot</c><00:20:16.140><c> of</c><00:20:16.170><c> the</c><00:20:16.350><c> information</c><00:20:16.590><c> and</c>

00:20:17.420 --> 00:20:17.430 align:start position:0%
contains a lot of the information and
 

00:20:17.430 --> 00:20:20.060 align:start position:0%
contains a lot of the information and
profiling<00:20:18.300><c> code</c><00:20:18.720><c> that</c><00:20:18.990><c> is</c><00:20:19.110><c> needed</c><00:20:19.530><c> to</c><00:20:19.680><c> drive</c>

00:20:20.060 --> 00:20:20.070 align:start position:0%
profiling code that is needed to drive
 

00:20:20.070 --> 00:20:22.250 align:start position:0%
profiling code that is needed to drive
the<00:20:20.370><c> optimizations</c><00:20:21.060><c> later</c><00:20:21.330><c> during</c><00:20:21.840><c> runtime</c>

00:20:22.250 --> 00:20:22.260 align:start position:0%
the optimizations later during runtime
 

00:20:22.260 --> 00:20:24.530 align:start position:0%
the optimizations later during runtime
and<00:20:22.740><c> the</c><00:20:23.340><c> server</c><00:20:23.580><c> compiler</c><00:20:24.090><c> will</c><00:20:24.270><c> actually</c>

00:20:24.530 --> 00:20:24.540 align:start position:0%
and the server compiler will actually
 

00:20:24.540 --> 00:20:26.510 align:start position:0%
and the server compiler will actually
kick<00:20:24.750><c> in</c><00:20:24.930><c> and</c><00:20:25.140><c> improve</c><00:20:25.470><c> on</c><00:20:25.680><c> this</c><00:20:25.800><c> code</c><00:20:26.070><c> on</c><00:20:26.280><c> top</c>

00:20:26.510 --> 00:20:26.520 align:start position:0%
kick in and improve on this code on top
 

00:20:26.520 --> 00:20:28.670 align:start position:0%
kick in and improve on this code on top
of<00:20:26.730><c> what's</c><00:20:26.910><c> in</c><00:20:27.060><c> the</c><00:20:27.150><c> archive</c><00:20:27.570><c> so</c><00:20:28.290><c> basically</c>

00:20:28.670 --> 00:20:28.680 align:start position:0%
of what's in the archive so basically
 

00:20:28.680 --> 00:20:31.100 align:start position:0%
of what's in the archive so basically
you<00:20:28.860><c> get</c><00:20:29.040><c> like</c><00:20:29.430><c> the</c><00:20:29.640><c> first</c><00:20:29.880><c> tier</c><00:20:30.840><c> of</c>

00:20:31.100 --> 00:20:31.110 align:start position:0%
you get like the first tier of
 

00:20:31.110 --> 00:20:33.500 align:start position:0%
you get like the first tier of
performance<00:20:31.650><c> using</c><00:20:32.430><c> the</c><00:20:32.520><c> äôt</c><00:20:32.880><c> code</c><00:20:33.090><c> and</c><00:20:33.330><c> then</c>

00:20:33.500 --> 00:20:33.510 align:start position:0%
performance using the äôt code and then
 

00:20:33.510 --> 00:20:35.840 align:start position:0%
performance using the äôt code and then
during<00:20:33.900><c> runtime</c><00:20:34.230><c> will</c><00:20:34.620><c> optimize</c><00:20:34.830><c> on</c><00:20:35.520><c> top</c><00:20:35.730><c> of</c>

00:20:35.840 --> 00:20:35.850 align:start position:0%
during runtime will optimize on top of
 

00:20:35.850 --> 00:20:39.440 align:start position:0%
during runtime will optimize on top of
that<00:20:37.040><c> the</c><00:20:38.040><c> functionality</c><00:20:38.460><c> is</c><00:20:38.820><c> experimental</c>

00:20:39.440 --> 00:20:39.450 align:start position:0%
that the functionality is experimental
 

00:20:39.450 --> 00:20:42.380 align:start position:0%
that the functionality is experimental
in<00:20:39.960><c> 9</c><00:20:40.200><c> and</c><00:20:40.230><c> only</c><00:20:41.130><c> currently</c><00:20:41.490><c> available</c><00:20:41.760><c> on</c>

00:20:42.380 --> 00:20:42.390 align:start position:0%
in 9 and only currently available on
 

00:20:42.390 --> 00:20:45.530 align:start position:0%
in 9 and only currently available on
x64<00:20:43.130><c> that</c><00:20:44.130><c> said</c><00:20:44.430><c> we're</c><00:20:44.700><c> adding</c><00:20:45.120><c> platform</c>

00:20:45.530 --> 00:20:45.540 align:start position:0%
x64 that said we're adding platform
 

00:20:45.540 --> 00:20:50.150 align:start position:0%
x64 that said we're adding platform
support<00:20:46.310><c> over</c><00:20:47.310><c> time</c><00:20:47.490><c> and</c><00:20:48.560><c> similar</c><00:20:49.560><c> types</c><00:20:49.920><c> of</c>

00:20:50.150 --> 00:20:50.160 align:start position:0%
support over time and similar types of
 

00:20:50.160 --> 00:20:53.330 align:start position:0%
support over time and similar types of
benefits<00:20:50.370><c> can</c><00:20:51.210><c> be</c><00:20:51.240><c> seen</c><00:20:51.510><c> from</c><00:20:51.690><c> a</c><00:20:51.810><c> OT</c><00:20:52.050><c> here</c><00:20:52.290><c> I</c><00:20:52.470><c> am</c>

00:20:53.330 --> 00:20:53.340 align:start position:0%
benefits can be seen from a OT here I am
 

00:20:53.340 --> 00:20:55.880 align:start position:0%
benefits can be seen from a OT here I am
slide<00:20:53.610><c> on</c><00:20:53.760><c> it</c><00:20:53.910><c> actually</c><00:20:54.840><c> next</c><00:20:55.410><c> slide</c><00:20:55.650><c> isn't</c>

00:20:55.880 --> 00:20:55.890 align:start position:0%
slide on it actually next slide isn't
 

00:20:55.890 --> 00:20:59.030 align:start position:0%
slide on it actually next slide isn't
that<00:20:56.040><c> so</c><00:20:56.280><c> I'll</c><00:20:56.580><c> wait</c><00:20:57.450><c> with</c><00:20:57.630><c> that</c><00:20:57.780><c> but</c><00:20:58.770><c> you</c><00:20:58.860><c> have</c>

00:20:59.030 --> 00:20:59.040 align:start position:0%
that so I'll wait with that but you have
 

00:20:59.040 --> 00:21:00.470 align:start position:0%
that so I'll wait with that but you have
startup<00:20:59.400><c> you</c><00:20:59.580><c> have</c><00:20:59.700><c> time</c><00:21:00.150><c> to</c><00:21:00.330><c> peak</c>

00:21:00.470 --> 00:21:00.480 align:start position:0%
startup you have time to peak
 

00:21:00.480 --> 00:21:02.510 align:start position:0%
startup you have time to peak
performance<00:21:00.860><c> instead</c><00:21:01.860><c> of</c><00:21:02.010><c> having</c><00:21:02.220><c> to</c><00:21:02.400><c> go</c>

00:21:02.510 --> 00:21:02.520 align:start position:0%
performance instead of having to go
 

00:21:02.520 --> 00:21:04.460 align:start position:0%
performance instead of having to go
through<00:21:02.550><c> the</c><00:21:02.850><c> full</c><00:21:03.060><c> cycle</c><00:21:03.090><c> of</c><00:21:03.810><c> first</c>

00:21:04.460 --> 00:21:04.470 align:start position:0%
through the full cycle of first
 

00:21:04.470 --> 00:21:06.140 align:start position:0%
through the full cycle of first
interpreting<00:21:05.100><c> code</c><00:21:05.310><c> and</c><00:21:05.580><c> then</c><00:21:05.700><c> probe</c>

00:21:06.140 --> 00:21:06.150 align:start position:0%
interpreting code and then probe
 

00:21:06.150 --> 00:21:09.680 align:start position:0%
interpreting code and then probe
compiling<00:21:06.900><c> code</c><00:21:07.110><c> with</c><00:21:07.530><c> profiling</c><00:21:08.690><c> capturing</c>

00:21:09.680 --> 00:21:09.690 align:start position:0%
compiling code with profiling capturing
 

00:21:09.690 --> 00:21:11.810 align:start position:0%
compiling code with profiling capturing
code<00:21:10.020><c> in</c><00:21:10.230><c> it</c><00:21:10.380><c> and</c><00:21:10.590><c> then</c><00:21:10.800><c> optimizing</c><00:21:11.370><c> the</c><00:21:11.640><c> code</c>

00:21:11.810 --> 00:21:11.820 align:start position:0%
code in it and then optimizing the code
 

00:21:11.820 --> 00:21:14.810 align:start position:0%
code in it and then optimizing the code
fully<00:21:12.810><c> in</c><00:21:13.050><c> the</c><00:21:13.170><c> end</c><00:21:13.320><c> we</c><00:21:14.010><c> have</c><00:21:14.220><c> already</c><00:21:14.580><c> sort</c><00:21:14.730><c> of</c>

00:21:14.810 --> 00:21:14.820 align:start position:0%
fully in the end we have already sort of
 

00:21:14.820 --> 00:21:16.760 align:start position:0%
fully in the end we have already sort of
shortcut<00:21:15.240><c> the</c><00:21:15.390><c> first</c><00:21:15.600><c> part</c><00:21:15.840><c> of</c><00:21:15.870><c> that</c><00:21:16.050><c> so</c><00:21:16.680><c> you</c>

00:21:16.760 --> 00:21:16.770 align:start position:0%
shortcut the first part of that so you
 

00:21:16.770 --> 00:21:19.910 align:start position:0%
shortcut the first part of that so you
have<00:21:17.340><c> faster</c><00:21:18.000><c> time</c><00:21:18.570><c> Northshore</c><00:21:19.290><c> shorter</c><00:21:19.710><c> time</c>

00:21:19.910 --> 00:21:19.920 align:start position:0%
have faster time Northshore shorter time
 

00:21:19.920 --> 00:21:21.560 align:start position:0%
have faster time Northshore shorter time
to<00:21:19.950><c> peak</c><00:21:20.280><c> performance</c><00:21:20.310><c> or</c><00:21:20.910><c> reduce</c><00:21:21.240><c> time</c><00:21:21.420><c> to</c>

00:21:21.560 --> 00:21:21.570 align:start position:0%
to peak performance or reduce time to
 

00:21:21.570 --> 00:21:23.960 align:start position:0%
to peak performance or reduce time to
peak<00:21:21.720><c> performance</c><00:21:22.200><c> and</c><00:21:22.580><c> the</c><00:21:23.580><c> code</c><00:21:23.760><c> can</c>

00:21:23.960 --> 00:21:23.970 align:start position:0%
peak performance and the code can
 

00:21:23.970 --> 00:21:25.300 align:start position:0%
peak performance and the code can
obviously<00:21:24.240><c> also</c><00:21:24.360><c> be</c><00:21:24.720><c> shared</c><00:21:24.990><c> across</c>

00:21:25.300 --> 00:21:25.310 align:start position:0%
obviously also be shared across
 

00:21:25.310 --> 00:21:27.260 align:start position:0%
obviously also be shared across
instances<00:21:26.310><c> you</c><00:21:26.460><c> also</c><00:21:26.610><c> get</c><00:21:26.790><c> to</c><00:21:26.910><c> footprint</c>

00:21:27.260 --> 00:21:27.270 align:start position:0%
instances you also get to footprint
 

00:21:27.270 --> 00:21:30.350 align:start position:0%
instances you also get to footprint
savings<00:21:28.010><c> in</c><00:21:29.010><c> addition</c><00:21:29.580><c> to</c><00:21:29.730><c> being</c><00:21:29.880><c> something</c>

00:21:30.350 --> 00:21:30.360 align:start position:0%
savings in addition to being something
 

00:21:30.360 --> 00:21:32.390 align:start position:0%
savings in addition to being something
that<00:21:30.510><c> is</c><00:21:30.690><c> useful</c><00:21:30.900><c> to</c><00:21:31.260><c> end</c><00:21:31.410><c> users</c><00:21:31.620><c> this</c><00:21:32.130><c> is</c><00:21:32.250><c> also</c>

00:21:32.390 --> 00:21:32.400 align:start position:0%
that is useful to end users this is also
 

00:21:32.400 --> 00:21:33.710 align:start position:0%
that is useful to end users this is also
something<00:21:32.730><c> we're</c><00:21:33.090><c> planning</c><00:21:33.270><c> on</c><00:21:33.600><c> using</c>

00:21:33.710 --> 00:21:33.720 align:start position:0%
something we're planning on using
 

00:21:33.720 --> 00:21:36.740 align:start position:0%
something we're planning on using
internally<00:21:34.410><c> in</c><00:21:34.770><c> the</c><00:21:34.830><c> JDK</c><00:21:35.490><c> to</c><00:21:35.880><c> be</c><00:21:36.120><c> able</c><00:21:36.420><c> to</c><00:21:36.540><c> move</c>

00:21:36.740 --> 00:21:36.750 align:start position:0%
internally in the JDK to be able to move
 

00:21:36.750 --> 00:21:40.190 align:start position:0%
internally in the JDK to be able to move
our<00:21:37.110><c> JIT</c><00:21:37.380><c> compiler</c><00:21:38.310><c> up</c><00:21:39.240><c> into</c><00:21:39.720><c> Java</c><00:21:39.930><c> to</c>

00:21:40.190 --> 00:21:40.200 align:start position:0%
our JIT compiler up into Java to
 

00:21:40.200 --> 00:21:42.830 align:start position:0%
our JIT compiler up into Java to
implement<00:21:40.740><c> that</c><00:21:40.860><c> in</c><00:21:41.010><c> Java</c><00:21:41.190><c> instead</c><00:21:41.840><c> still</c>

00:21:42.830 --> 00:21:42.840 align:start position:0%
implement that in Java instead still
 

00:21:42.840 --> 00:21:44.600 align:start position:0%
implement that in Java instead still
working<00:21:43.170><c> progress</c><00:21:43.350><c> but</c><00:21:43.890><c> this</c><00:21:44.460><c> is</c>

00:21:44.600 --> 00:21:44.610 align:start position:0%
working progress but this is
 

00:21:44.610 --> 00:21:45.620 align:start position:0%
working progress but this is
functionality<00:21:44.940><c> that</c><00:21:45.210><c> is</c><00:21:45.330><c> sort</c><00:21:45.480><c> of</c><00:21:45.540><c> a</c>

00:21:45.620 --> 00:21:45.630 align:start position:0%
functionality that is sort of a
 

00:21:45.630 --> 00:21:49.210 align:start position:0%
functionality that is sort of a
prerequisite<00:21:46.620><c> for</c><00:21:46.680><c> that</c><00:21:46.890><c> I</c><00:21:47.900><c> won't</c><00:21:48.900><c> go</c><00:21:49.110><c> into</c>

00:21:49.210 --> 00:21:49.220 align:start position:0%
prerequisite for that I won't go into
 

00:21:49.220 --> 00:21:51.770 align:start position:0%
prerequisite for that I won't go into
exactly<00:21:50.220><c> all</c><00:21:50.460><c> the</c><00:21:50.490><c> details</c><00:21:51.270><c> of</c><00:21:51.420><c> this</c><00:21:51.510><c> slide</c>

00:21:51.770 --> 00:21:51.780 align:start position:0%
exactly all the details of this slide
 

00:21:51.780 --> 00:21:54.590 align:start position:0%
exactly all the details of this slide
but<00:21:52.470><c> I</c><00:21:52.500><c> will</c><00:21:52.800><c> say</c><00:21:53.100><c> that</c><00:21:53.400><c> it</c><00:21:54.180><c> is</c><00:21:54.360><c> showing</c>

00:21:54.590 --> 00:21:54.600 align:start position:0%
but I will say that it is showing
 

00:21:54.600 --> 00:21:56.570 align:start position:0%
but I will say that it is showing
basically<00:21:55.080><c> that</c><00:21:55.650><c> you</c><00:21:55.830><c> have</c><00:21:55.860><c> the</c><00:21:56.070><c> default</c><00:21:56.310><c> case</c>

00:21:56.570 --> 00:21:56.580 align:start position:0%
basically that you have the default case
 

00:21:56.580 --> 00:21:58.490 align:start position:0%
basically that you have the default case
you<00:21:57.300><c> have</c><00:21:57.420><c> the</c><00:21:57.540><c> case</c><00:21:57.750><c> where</c><00:21:57.960><c> you</c><00:21:58.050><c> have</c><00:21:58.200><c> only</c><00:21:58.320><c> a</c>

00:21:58.490 --> 00:21:58.500 align:start position:0%
you have the case where you have only a
 

00:21:58.500 --> 00:22:00.470 align:start position:0%
you have the case where you have only a
OT<00:21:58.830><c> you</c><00:21:59.100><c> have</c><00:21:59.250><c> the</c><00:21:59.400><c> case</c><00:21:59.610><c> where</c><00:21:59.640><c> you</c><00:21:59.910><c> have</c><00:21:59.940><c> CD</c><00:22:00.330><c> s</c>

00:22:00.470 --> 00:22:00.480 align:start position:0%
OT you have the case where you have CD s
 

00:22:00.480 --> 00:22:01.760 align:start position:0%
OT you have the case where you have CD s
and<00:22:00.810><c> you</c><00:22:00.870><c> have</c><00:22:01.020><c> the</c><00:22:01.140><c> case</c><00:22:01.290><c> where</c><00:22:01.530><c> you</c><00:22:01.620><c> have</c>

00:22:01.760 --> 00:22:01.770 align:start position:0%
and you have the case where you have
 

00:22:01.770 --> 00:22:03.830 align:start position:0%
and you have the case where you have
both<00:22:02.000><c> and</c><00:22:03.000><c> basically</c><00:22:03.450><c> what</c><00:22:03.690><c> it's</c>

00:22:03.830 --> 00:22:03.840 align:start position:0%
both and basically what it's
 

00:22:03.840 --> 00:22:05.060 align:start position:0%
both and basically what it's
highlighting<00:22:04.260><c> is</c><00:22:04.350><c> the</c><00:22:04.500><c> fact</c><00:22:04.710><c> that</c><00:22:04.800><c> they're</c>

00:22:05.060 --> 00:22:05.070 align:start position:0%
highlighting is the fact that they're
 

00:22:05.070 --> 00:22:08.060 align:start position:0%
highlighting is the fact that they're
both<00:22:05.460><c> improving</c><00:22:06.150><c> things</c><00:22:06.390><c> in</c><00:22:06.780><c> themselves</c><00:22:07.070><c> but</c>

00:22:08.060 --> 00:22:08.070 align:start position:0%
both improving things in themselves but
 

00:22:08.070 --> 00:22:09.800 align:start position:0%
both improving things in themselves but
together<00:22:08.340><c> is</c><00:22:08.880><c> where</c><00:22:09.090><c> we</c><00:22:09.210><c> get</c><00:22:09.450><c> the</c><00:22:09.570><c> most</c>

00:22:09.800 --> 00:22:09.810 align:start position:0%
together is where we get the most
 

00:22:09.810 --> 00:22:11.420 align:start position:0%
together is where we get the most
benefit<00:22:10.260><c> out</c><00:22:10.410><c> of</c><00:22:10.470><c> them</c>

00:22:11.420 --> 00:22:11.430 align:start position:0%
benefit out of them
 

00:22:11.430 --> 00:22:14.090 align:start position:0%
benefit out of them
so<00:22:11.880><c> together</c><00:22:12.270><c> CD</c><00:22:12.930><c> s</c><00:22:13.020><c> and</c><00:22:13.200><c> alt</c><00:22:13.500><c> together</c><00:22:13.770><c> is</c><00:22:14.070><c> a</c>

00:22:14.090 --> 00:22:14.100 align:start position:0%
so together CD s and alt together is a
 

00:22:14.100 --> 00:22:18.020 align:start position:0%
so together CD s and alt together is a
very<00:22:14.370><c> happy</c><00:22:14.700><c> combination</c><00:22:16.550><c> if</c><00:22:17.550><c> you</c><00:22:17.760><c> want</c><00:22:17.940><c> to</c>

00:22:18.020 --> 00:22:18.030 align:start position:0%
very happy combination if you want to
 

00:22:18.030 --> 00:22:19.670 align:start position:0%
very happy combination if you want to
know<00:22:18.120><c> more</c><00:22:18.300><c> about</c><00:22:18.390><c> a</c><00:22:18.660><c> OT</c><00:22:19.080><c> it</c><00:22:19.230><c> turns</c><00:22:19.440><c> out</c><00:22:19.560><c> that</c>

00:22:19.670 --> 00:22:19.680 align:start position:0%
know more about a OT it turns out that
 

00:22:19.680 --> 00:22:21.080 align:start position:0%
know more about a OT it turns out that
we<00:22:19.830><c> have</c><00:22:19.860><c> at</c><00:22:20.040><c> least</c><00:22:20.070><c> two</c><00:22:20.370><c> sessions</c><00:22:20.580><c> on</c><00:22:20.820><c> that</c><00:22:21.000><c> as</c>

00:22:21.080 --> 00:22:21.090 align:start position:0%
we have at least two sessions on that as
 

00:22:21.090 --> 00:22:23.360 align:start position:0%
we have at least two sessions on that as
well<00:22:21.210><c> so</c><00:22:21.500><c> again</c><00:22:22.500><c> I'll</c><00:22:22.710><c> have</c><00:22:22.890><c> a</c><00:22:22.920><c> slide</c><00:22:23.130><c> on</c><00:22:23.160><c> this</c>

00:22:23.360 --> 00:22:23.370 align:start position:0%
well so again I'll have a slide on this
 

00:22:23.370 --> 00:22:26.090 align:start position:0%
well so again I'll have a slide on this
later<00:22:23.610><c> at</c><00:22:24.330><c> the</c><00:22:24.510><c> end</c><00:22:24.630><c> of</c><00:22:24.720><c> the</c><00:22:24.870><c> the</c><00:22:25.590><c> presentation</c>

00:22:26.090 --> 00:22:26.100 align:start position:0%
later at the end of the the presentation
 

00:22:26.100 --> 00:22:29.210 align:start position:0%
later at the end of the the presentation
in<00:22:26.760><c> case</c><00:22:26.970><c> you</c><00:22:27.060><c> want</c><00:22:27.210><c> to</c><00:22:27.240><c> look</c><00:22:27.300><c> at</c><00:22:27.510><c> it</c><00:22:27.630><c> and</c><00:22:28.220><c> I'll</c>

00:22:29.210 --> 00:22:29.220 align:start position:0%
in case you want to look at it and I'll
 

00:22:29.220 --> 00:22:30.860 align:start position:0%
in case you want to look at it and I'll
go<00:22:29.430><c> through</c><00:22:29.670><c> the</c><00:22:29.790><c> rest</c><00:22:30.270><c> of</c><00:22:30.390><c> the</c><00:22:30.510><c> slides</c><00:22:30.690><c> really</c>

00:22:30.860 --> 00:22:30.870 align:start position:0%
go through the rest of the slides really
 

00:22:30.870 --> 00:22:34.220 align:start position:0%
go through the rest of the slides really
quickly<00:22:31.710><c> I'm</c><00:22:31.830><c> sorry</c><00:22:32.040><c> for</c><00:22:32.220><c> that</c><00:22:32.990><c> Java</c><00:22:33.990><c> flight</c>

00:22:34.220 --> 00:22:34.230 align:start position:0%
quickly I'm sorry for that Java flight
 

00:22:34.230 --> 00:22:36.260 align:start position:0%
quickly I'm sorry for that Java flight
recorder<00:22:34.650><c> I</c><00:22:34.830><c> want</c><00:22:35.220><c> to</c><00:22:35.310><c> highlight</c><00:22:35.670><c> that</c><00:22:35.880><c> this</c>

00:22:36.260 --> 00:22:36.270 align:start position:0%
recorder I want to highlight that this
 

00:22:36.270 --> 00:22:38.870 align:start position:0%
recorder I want to highlight that this
tool<00:22:36.630><c> has</c><00:22:36.900><c> helped</c><00:22:37.200><c> us</c><00:22:37.320><c> in</c><00:22:37.440><c> term</c><00:22:37.980><c> we</c><00:22:38.190><c> find</c><00:22:38.550><c> a</c><00:22:38.700><c> lot</c>

00:22:38.870 --> 00:22:38.880 align:start position:0%
tool has helped us in term we find a lot
 

00:22:38.880 --> 00:22:40.730 align:start position:0%
tool has helped us in term we find a lot
of<00:22:38.910><c> bottlenecks</c><00:22:39.480><c> this</c><00:22:39.720><c> is</c><00:22:39.960><c> functionality</c>

00:22:40.730 --> 00:22:40.740 align:start position:0%
of bottlenecks this is functionality
 

00:22:40.740 --> 00:22:42.920 align:start position:0%
of bottlenecks this is functionality
that<00:22:40.860><c> captures</c><00:22:41.490><c> information</c><00:22:41.730><c> in</c><00:22:42.570><c> a</c><00:22:42.690><c> very</c>

00:22:42.920 --> 00:22:42.930 align:start position:0%
that captures information in a very
 

00:22:42.930 --> 00:22:45.290 align:start position:0%
that captures information in a very
fine-grain<00:22:43.500><c> way</c><00:22:43.680><c> but</c><00:22:44.040><c> in</c><00:22:44.160><c> a</c><00:22:44.250><c> very</c><00:22:44.280><c> fast</c><00:22:44.910><c> and</c>

00:22:45.290 --> 00:22:45.300 align:start position:0%
fine-grain way but in a very fast and
 

00:22:45.300 --> 00:22:47.510 align:start position:0%
fine-grain way but in a very fast and
efficient<00:22:45.840><c> way</c><00:22:45.960><c> so</c><00:22:45.990><c> basically</c><00:22:46.560><c> the</c><00:22:47.130><c> goal</c><00:22:47.310><c> is</c>

00:22:47.510 --> 00:22:47.520 align:start position:0%
efficient way so basically the goal is
 

00:22:47.520 --> 00:22:49.460 align:start position:0%
efficient way so basically the goal is
to<00:22:47.640><c> have</c><00:22:47.730><c> it</c><00:22:47.880><c> default</c><00:22:48.240><c> on</c><00:22:48.510><c> and</c><00:22:48.870><c> always</c><00:22:48.990><c> collect</c>

00:22:49.460 --> 00:22:49.470 align:start position:0%
to have it default on and always collect
 

00:22:49.470 --> 00:22:51.920 align:start position:0%
to have it default on and always collect
all<00:22:49.620><c> this</c><00:22:49.740><c> data</c><00:22:50.060><c> and</c><00:22:51.060><c> we</c><00:22:51.270><c> also</c><00:22:51.300><c> have</c><00:22:51.690><c> some</c>

00:22:51.920 --> 00:22:51.930 align:start position:0%
all this data and we also have some
 

00:22:51.930 --> 00:22:54.980 align:start position:0%
all this data and we also have some
visualization<00:22:52.650><c> help</c><00:22:53.190><c> to</c><00:22:53.550><c> show</c><00:22:54.510><c> that</c><00:22:54.720><c> and</c><00:22:54.930><c> we</c>

00:22:54.980 --> 00:22:54.990 align:start position:0%
visualization help to show that and we
 

00:22:54.990 --> 00:22:55.250 align:start position:0%
visualization help to show that and we
can

00:22:55.250 --> 00:22:55.260 align:start position:0%
can
 

00:22:55.260 --> 00:22:56.750 align:start position:0%
can
we're<00:22:55.410><c> using</c><00:22:55.650><c> this</c><00:22:55.920><c> internally</c><00:22:56.400><c> to</c><00:22:56.550><c> drive</c>

00:22:56.750 --> 00:22:56.760 align:start position:0%
we're using this internally to drive
 

00:22:56.760 --> 00:23:00.290 align:start position:0%
we're using this internally to drive
development<00:22:58.250><c> JFR</c><00:22:59.250><c> is</c><00:22:59.490><c> also</c><00:22:59.850><c> being</c><00:23:00.000><c> open</c>

00:23:00.290 --> 00:23:00.300 align:start position:0%
development JFR is also being open
 

00:23:00.300 --> 00:23:02.780 align:start position:0%
development JFR is also being open
sourced<00:23:00.570><c> again</c><00:23:01.260><c> where</c><00:23:01.560><c> we</c><00:23:01.980><c> want</c><00:23:02.220><c> to</c><00:23:02.310><c> try</c><00:23:02.580><c> to</c><00:23:02.610><c> do</c>

00:23:02.780 --> 00:23:02.790 align:start position:0%
sourced again where we want to try to do
 

00:23:02.790 --> 00:23:04.280 align:start position:0%
sourced again where we want to try to do
that<00:23:02.940><c> as</c><00:23:03.060><c> quickly</c><00:23:03.300><c> as</c><00:23:03.480><c> possible</c><00:23:03.540><c> but</c><00:23:04.110><c> no</c>

00:23:04.280 --> 00:23:04.290 align:start position:0%
that as quickly as possible but no
 

00:23:04.290 --> 00:23:07.190 align:start position:0%
that as quickly as possible but no
quicker<00:23:05.330><c> and</c><00:23:06.330><c> if</c><00:23:06.540><c> you</c><00:23:06.660><c> want</c><00:23:06.840><c> to</c><00:23:06.900><c> know</c><00:23:06.960><c> about</c>

00:23:07.190 --> 00:23:07.200 align:start position:0%
quicker and if you want to know about
 

00:23:07.200 --> 00:23:09.080 align:start position:0%
quicker and if you want to know about
more<00:23:07.590><c> about</c><00:23:07.680><c> flight</c><00:23:08.190><c> recorder</c><00:23:08.610><c> or</c><00:23:08.850><c> for</c><00:23:09.000><c> that</c>

00:23:09.080 --> 00:23:09.090 align:start position:0%
more about flight recorder or for that
 

00:23:09.090 --> 00:23:10.340 align:start position:0%
more about flight recorder or for that
sake<00:23:09.240><c> Mission</c><00:23:09.570><c> Control</c><00:23:09.810><c> which</c><00:23:10.080><c> is</c><00:23:10.230><c> the</c>

00:23:10.340 --> 00:23:10.350 align:start position:0%
sake Mission Control which is the
 

00:23:10.350 --> 00:23:13.100 align:start position:0%
sake Mission Control which is the
visualization<00:23:10.710><c> tool</c><00:23:11.490><c> there</c><00:23:12.480><c> are</c><00:23:12.630><c> sessions</c><00:23:12.870><c> on</c>

00:23:13.100 --> 00:23:13.110 align:start position:0%
visualization tool there are sessions on
 

00:23:13.110 --> 00:23:16.340 align:start position:0%
visualization tool there are sessions on
that<00:23:13.230><c> as</c><00:23:13.320><c> well</c><00:23:14.360><c> and</c><00:23:15.360><c> I'll</c><00:23:15.540><c> skip</c><00:23:15.840><c> through</c><00:23:16.110><c> these</c>

00:23:16.340 --> 00:23:16.350 align:start position:0%
that as well and I'll skip through these
 

00:23:16.350 --> 00:23:18.470 align:start position:0%
that as well and I'll skip through these
slides<00:23:16.650><c> I</c><00:23:16.920><c> do</c><00:23:17.340><c> want</c><00:23:17.730><c> to</c><00:23:17.790><c> say</c><00:23:18.030><c> that</c><00:23:18.240><c> we've</c>

00:23:18.470 --> 00:23:18.480 align:start position:0%
slides I do want to say that we've
 

00:23:18.480 --> 00:23:21.350 align:start position:0%
slides I do want to say that we've
unified<00:23:18.780><c> our</c><00:23:19.260><c> login</c><00:23:19.620><c> framework</c><00:23:20.210><c> we</c><00:23:21.210><c> have</c><00:23:21.330><c> a</c>

00:23:21.350 --> 00:23:21.360 align:start position:0%
unified our login framework we have a
 

00:23:21.360 --> 00:23:23.540 align:start position:0%
unified our login framework we have a
unified<00:23:21.870><c> logging</c><00:23:22.440><c> framework</c><00:23:22.560><c> in</c><00:23:22.890><c> the</c><00:23:23.010><c> JVM</c><00:23:23.370><c> now</c>

00:23:23.540 --> 00:23:23.550 align:start position:0%
unified logging framework in the JVM now
 

00:23:23.550 --> 00:23:26.090 align:start position:0%
unified logging framework in the JVM now
there<00:23:24.090><c> used</c><00:23:24.300><c> to</c><00:23:24.420><c> be</c><00:23:24.480><c> like</c><00:23:24.870><c> four</c><00:23:25.260><c> or</c><00:23:25.560><c> ten</c><00:23:25.770><c> or</c>

00:23:26.090 --> 00:23:26.100 align:start position:0%
there used to be like four or ten or
 

00:23:26.100 --> 00:23:27.650 align:start position:0%
there used to be like four or ten or
twenty<00:23:26.580><c> or</c><00:23:26.610><c> something</c><00:23:26.970><c> depending</c><00:23:27.180><c> on</c><00:23:27.480><c> which</c>

00:23:27.650 --> 00:23:27.660 align:start position:0%
twenty or something depending on which
 

00:23:27.660 --> 00:23:30.650 align:start position:0%
twenty or something depending on which
subsystem<00:23:28.290><c> you</c><00:23:28.890><c> had</c><00:23:29.040><c> in</c><00:23:29.190><c> JVM</c><00:23:29.580><c> now</c><00:23:30.150><c> we</c><00:23:30.210><c> have</c><00:23:30.420><c> one</c>

00:23:30.650 --> 00:23:30.660 align:start position:0%
subsystem you had in JVM now we have one
 

00:23:30.660 --> 00:23:32.480 align:start position:0%
subsystem you had in JVM now we have one
so<00:23:30.960><c> you</c><00:23:31.050><c> can</c><00:23:31.200><c> control</c><00:23:31.440><c> all</c><00:23:31.650><c> the</c><00:23:31.830><c> logging</c><00:23:32.040><c> using</c>

00:23:32.480 --> 00:23:32.490 align:start position:0%
so you can control all the logging using
 

00:23:32.490 --> 00:23:34.580 align:start position:0%
so you can control all the logging using
this<00:23:32.580><c> one</c><00:23:32.850><c> framework</c><00:23:33.150><c> and</c><00:23:33.690><c> I'm</c><00:23:34.020><c> personally</c>

00:23:34.580 --> 00:23:34.590 align:start position:0%
this one framework and I'm personally
 

00:23:34.590 --> 00:23:37.850 align:start position:0%
this one framework and I'm personally
super<00:23:35.190><c> happy</c><00:23:35.310><c> to</c><00:23:35.490><c> see</c><00:23:35.610><c> that</c><00:23:36.380><c> this</c><00:23:37.380><c> was</c><00:23:37.590><c> a</c><00:23:37.650><c> very</c>

00:23:37.850 --> 00:23:37.860 align:start position:0%
super happy to see that this was a very
 

00:23:37.860 --> 00:23:41.150 align:start position:0%
super happy to see that this was a very
fast<00:23:38.460><c> snapshot</c><00:23:39.240><c> of</c><00:23:39.390><c> functionality</c><00:23:40.200><c> here</c><00:23:40.890><c> are</c>

00:23:41.150 --> 00:23:41.160 align:start position:0%
fast snapshot of functionality here are
 

00:23:41.160 --> 00:23:43.220 align:start position:0%
fast snapshot of functionality here are
other<00:23:41.550><c> things</c><00:23:41.940><c> that</c><00:23:42.090><c> went</c><00:23:42.390><c> into</c><00:23:42.600><c> JDK</c><00:23:43.050><c> 9</c>

00:23:43.220 --> 00:23:43.230 align:start position:0%
other things that went into JDK 9
 

00:23:43.230 --> 00:23:46.790 align:start position:0%
other things that went into JDK 9
grouped<00:23:43.710><c> together</c><00:23:44.040><c> and</c><00:23:45.290><c> the</c><00:23:46.290><c> whole</c><00:23:46.500><c> week</c>

00:23:46.790 --> 00:23:46.800 align:start position:0%
grouped together and the whole week
 

00:23:46.800 --> 00:23:48.050 align:start position:0%
grouped together and the whole week
obviously<00:23:47.040><c> you</c><00:23:47.400><c> will</c><00:23:47.490><c> have</c><00:23:47.550><c> a</c><00:23:47.670><c> chance</c><00:23:47.880><c> to</c>

00:23:48.050 --> 00:23:48.060 align:start position:0%
obviously you will have a chance to
 

00:23:48.060 --> 00:23:49.610 align:start position:0%
obviously you will have a chance to
catch<00:23:48.210><c> up</c><00:23:48.240><c> on</c><00:23:48.510><c> these</c><00:23:48.630><c> this</c><00:23:49.110><c> different</c><00:23:49.500><c> these</c>

00:23:49.610 --> 00:23:49.620 align:start position:0%
catch up on these this different these
 

00:23:49.620 --> 00:23:51.710 align:start position:0%
catch up on these this different these
different<00:23:49.830><c> aspects</c><00:23:50.400><c> but</c><00:23:50.570><c> hopefully</c><00:23:51.570><c> that</c>

00:23:51.710 --> 00:23:51.720 align:start position:0%
different aspects but hopefully that
 

00:23:51.720 --> 00:23:53.780 align:start position:0%
different aspects but hopefully that
gave<00:23:51.840><c> you</c><00:23:51.990><c> a</c><00:23:52.230><c> quick</c><00:23:52.560><c> insight</c><00:23:53.220><c> into</c><00:23:53.610><c> the</c>

00:23:53.780 --> 00:23:53.790 align:start position:0%
gave you a quick insight into the
 

00:23:53.790 --> 00:23:55.250 align:start position:0%
gave you a quick insight into the
functionality<00:23:54.210><c> aspect</c><00:23:54.690><c> and</c><00:23:54.840><c> with</c><00:23:54.960><c> that</c><00:23:55.140><c> I'm</c>

00:23:55.250 --> 00:23:55.260 align:start position:0%
functionality aspect and with that I'm
 

00:23:55.260 --> 00:23:56.450 align:start position:0%
functionality aspect and with that I'm
handing<00:23:55.530><c> over</c><00:23:55.590><c> to</c><00:23:55.830><c> Sandia</c><00:23:56.160><c> for</c><00:23:56.370><c> the</c>

00:23:56.450 --> 00:23:56.460 align:start position:0%
handing over to Sandia for the
 

00:23:56.460 --> 00:24:03.170 align:start position:0%
handing over to Sandia for the
performance<00:23:57.120><c> part</c><00:23:59.330><c> thanks</c><00:24:00.330><c> Michael</c><00:24:01.280><c> so</c><00:24:02.280><c> last</c>

00:24:03.170 --> 00:24:03.180 align:start position:0%
performance part thanks Michael so last
 

00:24:03.180 --> 00:24:05.270 align:start position:0%
performance part thanks Michael so last
couple<00:24:03.480><c> of</c><00:24:03.540><c> years</c><00:24:03.930><c> we</c><00:24:04.230><c> have</c><00:24:04.350><c> contributed</c><00:24:04.680><c> to</c>

00:24:05.270 --> 00:24:05.280 align:start position:0%
couple of years we have contributed to
 

00:24:05.280 --> 00:24:08.120 align:start position:0%
couple of years we have contributed to
and<00:24:05.730><c> collaborated</c><00:24:05.910><c> on</c><00:24:06.540><c> many</c><00:24:07.290><c> optimizations</c>

00:24:08.120 --> 00:24:08.130 align:start position:0%
and collaborated on many optimizations
 

00:24:08.130 --> 00:24:12.800 align:start position:0%
and collaborated on many optimizations
in<00:24:08.940><c> open</c><00:24:09.210><c> JDK</c><00:24:09.360><c> towards</c><00:24:10.260><c> Gerry</c><00:24:10.920><c> canine</c><00:24:11.660><c> so</c><00:24:12.660><c> some</c>

00:24:12.800 --> 00:24:12.810 align:start position:0%
in open JDK towards Gerry canine so some
 

00:24:12.810 --> 00:24:15.500 align:start position:0%
in open JDK towards Gerry canine so some
of<00:24:12.840><c> the</c><00:24:13.110><c> key</c><00:24:13.580><c> optimizations</c><00:24:14.580><c> include</c><00:24:15.030><c> the</c>

00:24:15.500 --> 00:24:15.510 align:start position:0%
of the key optimizations include the
 

00:24:15.510 --> 00:24:19.160 align:start position:0%
of the key optimizations include the
vectorization<00:24:16.320><c> and</c><00:24:16.710><c> has</c><00:24:16.890><c> been</c><00:24:17.480><c> mad</c><00:24:18.480><c> crypto</c>

00:24:19.160 --> 00:24:19.170 align:start position:0%
vectorization and has been mad crypto
 

00:24:19.170 --> 00:24:21.530 align:start position:0%
vectorization and has been mad crypto
and<00:24:19.650><c> compression</c><00:24:20.190><c> acceleration</c><00:24:20.790><c> compact</c>

00:24:21.530 --> 00:24:21.540 align:start position:0%
and compression acceleration compact
 

00:24:21.540 --> 00:24:24.920 align:start position:0%
and compression acceleration compact
strings<00:24:21.900><c> and</c><00:24:22.230><c> the</c><00:24:22.800><c> new</c><00:24:22.920><c> API</c><00:24:23.280><c> support</c><00:24:24.210><c> and</c>

00:24:24.920 --> 00:24:24.930 align:start position:0%
strings and the new API support and
 

00:24:24.930 --> 00:24:27.590 align:start position:0%
strings and the new API support and
optimizing<00:24:25.500><c> the</c><00:24:25.620><c> new</c><00:24:25.770><c> API</c><00:24:26.220><c> for</c><00:24:27.000><c> the</c><00:24:27.180><c> Intel</c>

00:24:27.590 --> 00:24:27.600 align:start position:0%
optimizing the new API for the Intel
 

00:24:27.600 --> 00:24:36.260 align:start position:0%
optimizing the new API for the Intel
platforms<00:24:30.410><c> so</c><00:24:31.850><c> the</c><00:24:33.440><c> Intel</c><00:24:34.730><c> recently</c><00:24:35.730><c> released</c>

00:24:36.260 --> 00:24:36.270 align:start position:0%
platforms so the Intel recently released
 

00:24:36.270 --> 00:24:39.740 align:start position:0%
platforms so the Intel recently released
skylake<00:24:36.780><c> platform</c><00:24:37.260><c> in</c><00:24:37.530><c> july</c><00:24:37.950><c> and</c><00:24:38.750><c> unless</c>

00:24:39.740 --> 00:24:39.750 align:start position:0%
skylake platform in july and unless
 

00:24:39.750 --> 00:24:42.650 align:start position:0%
skylake platform in july and unless
otherwise<00:24:40.020><c> stated</c><00:24:40.910><c> most</c><00:24:41.910><c> of</c><00:24:42.030><c> the</c><00:24:42.150><c> performance</c>

00:24:42.650 --> 00:24:42.660 align:start position:0%
otherwise stated most of the performance
 

00:24:42.660 --> 00:24:44.990 align:start position:0%
otherwise stated most of the performance
runs<00:24:42.900><c> are</c><00:24:43.230><c> done</c><00:24:43.620><c> on</c><00:24:43.800><c> the</c><00:24:43.950><c> top</c><00:24:44.130><c> pin</c><00:24:44.400><c> skylake</c>

00:24:44.990 --> 00:24:45.000 align:start position:0%
runs are done on the top pin skylake
 

00:24:45.000 --> 00:24:47.630 align:start position:0%
runs are done on the top pin skylake
platform<00:24:45.540><c> that</c><00:24:45.750><c> is</c><00:24:45.900><c> the</c><00:24:46.200><c> Intel</c><00:24:46.740><c> Xeon</c><00:24:46.770><c> Platinum</c>

00:24:47.630 --> 00:24:47.640 align:start position:0%
platform that is the Intel Xeon Platinum
 

00:24:47.640 --> 00:24:53.030 align:start position:0%
platform that is the Intel Xeon Platinum
8180<00:24:48.920><c> at</c><00:24:49.920><c> 2.5</c><00:24:50.790><c> gigahertz</c><00:24:51.180><c> with</c><00:24:51.570><c> turbo</c><00:24:52.050><c> at</c><00:24:52.380><c> 3.8</c>

00:24:53.030 --> 00:24:53.040 align:start position:0%
8180 at 2.5 gigahertz with turbo at 3.8
 

00:24:53.040 --> 00:24:58.190 align:start position:0%
8180 at 2.5 gigahertz with turbo at 3.8
gigahertz<00:24:53.340><c> so</c><00:24:53.850><c> with</c><00:24:54.090><c> 384</c><00:24:54.930><c> gb</c><00:24:55.320><c> of</c><00:24:55.350><c> ram</c><00:24:55.820><c> and</c><00:24:57.200><c> we</c>

00:24:58.190 --> 00:24:58.200 align:start position:0%
gigahertz so with 384 gb of ram and we
 

00:24:58.200 --> 00:25:00.200 align:start position:0%
gigahertz so with 384 gb of ram and we
are<00:24:58.290><c> comparing</c><00:24:58.680><c> the</c><00:24:58.830><c> latest</c><00:24:59.280><c> JDK</c><00:24:59.790><c> 8</c><00:24:59.820><c> release</c>

00:25:00.200 --> 00:25:00.210 align:start position:0%
are comparing the latest JDK 8 release
 

00:25:00.210 --> 00:25:04.100 align:start position:0%
are comparing the latest JDK 8 release
the<00:25:00.480><c> JDK</c><00:25:00.810><c> 8</c><00:25:00.960><c> update</c><00:25:01.380><c> 144</c><00:25:02.070><c> with</c><00:25:02.760><c> the</c><00:25:03.000><c> JDK</c><00:25:03.960><c> 9</c>

00:25:04.100 --> 00:25:04.110 align:start position:0%
the JDK 8 update 144 with the JDK 9
 

00:25:04.110 --> 00:25:06.440 align:start position:0%
the JDK 8 update 144 with the JDK 9
which<00:25:04.350><c> is</c><00:25:04.380><c> just</c><00:25:04.740><c> released</c><00:25:05.070><c> September</c><00:25:05.820><c> 22nd</c>

00:25:06.440 --> 00:25:06.450 align:start position:0%
which is just released September 22nd
 

00:25:06.450 --> 00:25:08.409 align:start position:0%
which is just released September 22nd
all<00:25:07.410><c> the</c><00:25:07.590><c> runs</c><00:25:07.770><c> were</c><00:25:08.070><c> on</c>

00:25:08.409 --> 00:25:08.419 align:start position:0%
all the runs were on
 

00:25:08.419 --> 00:25:13.960 align:start position:0%
all the runs were on
on<00:25:08.539><c> the</c><00:25:09.220><c> next</c><00:25:10.220><c> platform</c><00:25:11.739><c> so</c><00:25:12.739><c> on</c><00:25:13.429><c> the</c>

00:25:13.960 --> 00:25:13.970 align:start position:0%
on the next platform so on the
 

00:25:13.970 --> 00:25:18.190 align:start position:0%
on the next platform so on the
vectorization<00:25:15.220><c> enhancements</c><00:25:16.720><c> we</c><00:25:17.720><c> extended</c>

00:25:18.190 --> 00:25:18.200 align:start position:0%
vectorization enhancements we extended
 

00:25:18.200 --> 00:25:24.549 align:start position:0%
vectorization enhancements we extended
the<00:25:18.440><c> vectorization</c><00:25:18.769><c> to</c><00:25:20.139><c> 512</c><00:25:21.139><c> bits</c><00:25:21.999><c> the</c><00:25:23.559><c> JVM</c>

00:25:24.549 --> 00:25:24.559 align:start position:0%
the vectorization to 512 bits the JVM
 

00:25:24.559 --> 00:25:27.430 align:start position:0%
the vectorization to 512 bits the JVM
Jade<00:25:24.769><c> as</c><00:25:25.009><c> in</c><00:25:25.190><c> 38</c><00:25:25.629><c> already</c><00:25:26.629><c> supports</c><00:25:27.139><c> out</c><00:25:27.289><c> of</c>

00:25:27.430 --> 00:25:27.440 align:start position:0%
Jade as in 38 already supports out of
 

00:25:27.440 --> 00:25:29.499 align:start position:0%
Jade as in 38 already supports out of
vectorization<00:25:27.739><c> they</c><00:25:28.730><c> do</c><00:25:28.789><c> supervise</c><00:25:29.299><c> our</c>

00:25:29.499 --> 00:25:29.509 align:start position:0%
vectorization they do supervise our
 

00:25:29.509 --> 00:25:32.080 align:start position:0%
vectorization they do supervise our
vector<00:25:29.840><c> ization</c><00:25:30.369><c> so</c><00:25:31.369><c> that</c><00:25:31.519><c> has</c><00:25:31.730><c> been</c><00:25:31.940><c> now</c>

00:25:32.080 --> 00:25:32.090 align:start position:0%
vector ization so that has been now
 

00:25:32.090 --> 00:25:36.070 align:start position:0%
vector ization so that has been now
extended<00:25:32.629><c> to</c><00:25:32.830><c> 512</c><00:25:33.830><c> bits</c><00:25:34.389><c> to</c><00:25:35.389><c> benefit</c><00:25:35.779><c> from</c><00:25:35.899><c> the</c>

00:25:36.070 --> 00:25:36.080 align:start position:0%
extended to 512 bits to benefit from the
 

00:25:36.080 --> 00:25:38.200 align:start position:0%
extended to 512 bits to benefit from the
avx-512<00:25:36.529><c> that</c><00:25:37.039><c> is</c><00:25:37.159><c> supported</c><00:25:37.759><c> on</c><00:25:37.850><c> the</c><00:25:37.970><c> Skydeck</c>

00:25:38.200 --> 00:25:38.210 align:start position:0%
avx-512 that is supported on the Skydeck
 

00:25:38.210 --> 00:25:42.549 align:start position:0%
avx-512 that is supported on the Skydeck
platform<00:25:39.639><c> we</c><00:25:40.639><c> to</c><00:25:40.970><c> super</c><00:25:41.749><c> unrolling</c><00:25:42.169><c> of</c><00:25:42.440><c> the</c>

00:25:42.549 --> 00:25:42.559 align:start position:0%
platform we to super unrolling of the
 

00:25:42.559 --> 00:25:46.590 align:start position:0%
platform we to super unrolling of the
vectorized<00:25:43.149><c> main</c><00:25:44.149><c> loop</c><00:25:44.389><c> there</c><00:25:45.320><c> is</c><00:25:45.470><c> reduction</c>

00:25:46.590 --> 00:25:46.600 align:start position:0%
vectorized main loop there is reduction
 

00:25:46.600 --> 00:25:49.619 align:start position:0%
vectorized main loop there is reduction
support<00:25:47.600><c> is</c><00:25:47.749><c> added</c><00:25:48.230><c> vector</c><00:25:48.889><c> loops</c><00:25:49.129><c> with</c>

00:25:49.619 --> 00:25:49.629 align:start position:0%
support is added vector loops with
 

00:25:49.629 --> 00:25:52.899 align:start position:0%
support is added vector loops with
reduction<00:25:50.629><c> in</c><00:25:50.779><c> them</c><00:25:50.989><c> are</c><00:25:51.169><c> Nova</c><00:25:51.499><c> Christ</c><00:25:51.909><c> and</c>

00:25:52.899 --> 00:25:52.909 align:start position:0%
reduction in them are Nova Christ and
 

00:25:52.909 --> 00:25:55.810 align:start position:0%
reduction in them are Nova Christ and
also<00:25:53.359><c> there</c><00:25:53.690><c> is</c><00:25:53.840><c> support</c><00:25:54.320><c> for</c><00:25:54.820><c> additional</c>

00:25:55.810 --> 00:25:55.820 align:start position:0%
also there is support for additional
 

00:25:55.820 --> 00:25:58.149 align:start position:0%
also there is support for additional
operations<00:25:56.629><c> that</c><00:25:56.809><c> get</c><00:25:56.989><c> vectorized</c><00:25:57.440><c> now</c><00:25:57.679><c> so</c>

00:25:58.149 --> 00:25:58.159 align:start position:0%
operations that get vectorized now so
 

00:25:58.159 --> 00:26:00.879 align:start position:0%
operations that get vectorized now so
I'll<00:25:58.249><c> go</c><00:25:58.489><c> into</c><00:25:58.759><c> that</c><00:25:58.789><c> details</c><00:25:59.659><c> next</c><00:26:00.529><c> couple</c><00:26:00.830><c> of</c>

00:26:00.879 --> 00:26:00.889 align:start position:0%
I'll go into that details next couple of
 

00:26:00.889 --> 00:26:01.299 align:start position:0%
I'll go into that details next couple of
fights

00:26:01.299 --> 00:26:01.309 align:start position:0%
fights
 

00:26:01.309 --> 00:26:06.820 align:start position:0%
fights
so<00:26:02.379><c> avx-512</c><00:26:03.820><c> is</c><00:26:04.820><c> introduced</c><00:26:05.779><c> in</c><00:26:06.379><c> the</c><00:26:06.559><c> Intel</c>

00:26:06.820 --> 00:26:06.830 align:start position:0%
so avx-512 is introduced in the Intel
 

00:26:06.830 --> 00:26:09.009 align:start position:0%
so avx-512 is introduced in the Intel
Xeon<00:26:06.859><c> Phi</c><00:26:07.369><c> processor</c><00:26:07.940><c> and</c><00:26:08.179><c> is</c><00:26:08.330><c> available</c><00:26:08.539><c> on</c>

00:26:09.009 --> 00:26:09.019 align:start position:0%
Xeon Phi processor and is available on
 

00:26:09.019 --> 00:26:12.930 align:start position:0%
Xeon Phi processor and is available on
the<00:26:09.259><c> Intel</c><00:26:09.499><c> skylake</c><00:26:09.619><c> processor</c><00:26:10.489><c> it</c><00:26:11.269><c> basically</c>

00:26:12.930 --> 00:26:12.940 align:start position:0%
the Intel skylake processor it basically
 

00:26:12.940 --> 00:26:14.349 align:start position:0%
the Intel skylake processor it basically
extends

00:26:14.349 --> 00:26:14.359 align:start position:0%
extends
 

00:26:14.359 --> 00:26:20.639 align:start position:0%
extends
simply<00:26:14.749><c> to</c><00:26:14.989><c> 512</c><00:26:15.950><c> bit</c><00:26:16.609><c> wide</c><00:26:17.359><c> that</c><00:26:18.289><c> means</c><00:26:19.570><c> 64</c>

00:26:20.639 --> 00:26:20.649 align:start position:0%
simply to 512 bit wide that means 64
 

00:26:20.649 --> 00:26:23.349 align:start position:0%
simply to 512 bit wide that means 64
byte<00:26:21.649><c> operations</c><00:26:22.580><c> can</c><00:26:22.759><c> be</c><00:26:22.879><c> done</c><00:26:22.999><c> in</c><00:26:23.149><c> a</c><00:26:23.239><c> single</c>

00:26:23.349 --> 00:26:23.359 align:start position:0%
byte operations can be done in a single
 

00:26:23.359 --> 00:26:27.759 align:start position:0%
byte operations can be done in a single
instruction<00:26:24.070><c> or</c><00:26:25.070><c> 30</c><00:26:25.429><c> to</c><00:26:25.609><c> a</c><00:26:25.669><c> short</c><00:26:26.200><c> 16</c><00:26:27.200><c> in</c><00:26:27.440><c> tower</c>

00:26:27.759 --> 00:26:27.769 align:start position:0%
instruction or 30 to a short 16 in tower
 

00:26:27.769 --> 00:26:29.619 align:start position:0%
instruction or 30 to a short 16 in tower
16<00:26:28.249><c> single</c><00:26:28.460><c> position</c><00:26:29.090><c> and</c><00:26:29.359><c> 8</c>

00:26:29.619 --> 00:26:29.629 align:start position:0%
16 single position and 8
 

00:26:29.629 --> 00:26:31.090 align:start position:0%
16 single position and 8
double-precision<00:26:30.109><c> floating-point</c>

00:26:31.090 --> 00:26:31.100 align:start position:0%
double-precision floating-point
 

00:26:31.100 --> 00:26:33.549 align:start position:0%
double-precision floating-point
operations<00:26:31.639><c> can</c><00:26:31.820><c> be</c><00:26:31.850><c> done</c><00:26:32.139><c> in</c><00:26:33.139><c> a</c><00:26:33.259><c> single</c>

00:26:33.549 --> 00:26:33.559 align:start position:0%
operations can be done in a single
 

00:26:33.559 --> 00:26:37.899 align:start position:0%
operations can be done in a single
instruction<00:26:34.090><c> there</c><00:26:35.090><c> are</c><00:26:35.470><c> 32</c><00:26:36.470><c> CMM</c><00:26:37.190><c> registers</c>

00:26:37.899 --> 00:26:37.909 align:start position:0%
instruction there are 32 CMM registers
 

00:26:37.909 --> 00:26:41.169 align:start position:0%
instruction there are 32 CMM registers
which<00:26:38.149><c> are</c><00:26:38.269><c> 500</c><00:26:38.809><c> called</c><00:26:39.049><c> bit</c><00:26:39.259><c> wide</c><00:26:39.679><c> so</c><00:26:40.059><c> what</c><00:26:41.059><c> we</c>

00:26:41.169 --> 00:26:41.179 align:start position:0%
which are 500 called bit wide so what we
 

00:26:41.179 --> 00:26:46.060 align:start position:0%
which are 500 called bit wide so what we
have<00:26:41.330><c> done</c><00:26:41.480><c> is</c><00:26:41.720><c> to</c><00:26:44.049><c> add</c><00:26:45.049><c> support</c><00:26:45.710><c> for</c>

00:26:46.060 --> 00:26:46.070 align:start position:0%
have done is to add support for
 

00:26:46.070 --> 00:26:47.950 align:start position:0%
have done is to add support for
cogeneration<00:26:46.909><c> amick</c><00:26:47.480><c> so</c><00:26:47.600><c> I</c><00:26:47.690><c> went</c><00:26:47.869><c> to</c>

00:26:47.950 --> 00:26:47.960 align:start position:0%
cogeneration amick so I went to
 

00:26:47.960 --> 00:26:52.210 align:start position:0%
cogeneration amick so I went to
cogeneration<00:26:48.379><c> in</c><00:26:48.830><c> the</c><00:26:48.950><c> JVM</c><00:26:49.340><c> jet</c><00:26:49.609><c> and</c><00:26:51.220><c> extended</c>

00:26:52.210 --> 00:26:52.220 align:start position:0%
cogeneration in the JVM jet and extended
 

00:26:52.220 --> 00:26:55.169 align:start position:0%
cogeneration in the JVM jet and extended
the<00:26:52.369><c> similar</c><00:26:52.639><c> vectorization</c><00:26:52.999><c> we</c><00:26:53.960><c> have</c><00:26:54.080><c> also</c>

00:26:55.169 --> 00:26:55.179 align:start position:0%
the similar vectorization we have also
 

00:26:55.179 --> 00:26:57.549 align:start position:0%
the similar vectorization we have also
optimized<00:26:56.179><c> the</c><00:26:56.330><c> array</c><00:26:56.480><c> string</c><00:26:56.899><c> intrinsic</c>

00:26:57.549 --> 00:26:57.559 align:start position:0%
optimized the array string intrinsic
 

00:26:57.559 --> 00:27:03.129 align:start position:0%
optimized the array string intrinsic
methods<00:26:57.980><c> to</c><00:26:58.249><c> benefit</c><00:26:58.700><c> from</c><00:26:58.850><c> avx-512</c><00:27:00.970><c> so</c><00:27:02.139><c> this</c>

00:27:03.129 --> 00:27:03.139 align:start position:0%
methods to benefit from avx-512 so this
 

00:27:03.139 --> 00:27:06.249 align:start position:0%
methods to benefit from avx-512 so this
is<00:27:03.289><c> a</c><00:27:03.320><c> small</c><00:27:04.129><c> Java</c><00:27:04.789><c> example</c><00:27:05.029><c> that</c><00:27:05.749><c> we</c><00:27:06.049><c> have</c>

00:27:06.249 --> 00:27:06.259 align:start position:0%
is a small Java example that we have
 

00:27:06.259 --> 00:27:08.529 align:start position:0%
is a small Java example that we have
shown<00:27:06.789><c> that</c><00:27:07.789><c> we</c><00:27:07.909><c> have</c><00:27:07.940><c> used</c><00:27:08.210><c> to</c><00:27:08.330><c> show</c><00:27:08.509><c> the</c>

00:27:08.529 --> 00:27:08.539 align:start position:0%
shown that we have used to show the
 

00:27:08.539 --> 00:27:11.379 align:start position:0%
shown that we have used to show the
benefit<00:27:09.369><c> between</c><00:27:10.369><c> Gerry</c><00:27:10.549><c> cage</c>

00:27:11.379 --> 00:27:11.389 align:start position:0%
benefit between Gerry cage
 

00:27:11.389 --> 00:27:16.659 align:start position:0%
benefit between Gerry cage
nine<00:27:12.099><c> this</c><00:27:14.079><c> the</c><00:27:15.079><c> loop</c><00:27:15.229><c> colonel</c><00:27:15.589><c> does</c><00:27:15.829><c> get</c><00:27:16.129><c> auto</c>

00:27:16.659 --> 00:27:16.669 align:start position:0%
nine this the loop colonel does get auto
 

00:27:16.669 --> 00:27:18.759 align:start position:0%
nine this the loop colonel does get auto
vectorized<00:27:17.209><c> here</c><00:27:17.929><c> there</c><00:27:18.139><c> is</c><00:27:18.259><c> the</c><00:27:18.349><c> operation</c>

00:27:18.759 --> 00:27:18.769 align:start position:0%
vectorized here there is the operation
 

00:27:18.769 --> 00:27:22.839 align:start position:0%
vectorized here there is the operation
being<00:27:18.979><c> done</c><00:27:19.190><c> on</c><00:27:21.070><c> elements</c><00:27:22.070><c> of</c><00:27:22.190><c> two</c><00:27:22.369><c> arrays</c><00:27:22.669><c> and</c>

00:27:22.839 --> 00:27:22.849 align:start position:0%
being done on elements of two arrays and
 

00:27:22.849 --> 00:27:26.589 align:start position:0%
being done on elements of two arrays and
the<00:27:22.940><c> result</c><00:27:23.209><c> is</c><00:27:23.299><c> stored</c><00:27:23.479><c> in</c><00:27:24.440><c> a</c><00:27:24.559><c> third</c><00:27:24.769><c> array</c><00:27:25.599><c> so</c>

00:27:26.589 --> 00:27:26.599 align:start position:0%
the result is stored in a third array so
 

00:27:26.599 --> 00:27:28.629 align:start position:0%
the result is stored in a third array so
this<00:27:27.109><c> particular</c><00:27:27.289><c> example</c><00:27:28.039><c> with</c><00:27:28.219><c> different</c>

00:27:28.629 --> 00:27:28.639 align:start position:0%
this particular example with different
 

00:27:28.639 --> 00:27:31.810 align:start position:0%
this particular example with different
data<00:27:28.820><c> types</c><00:27:28.909><c> and</c><00:27:29.359><c> different</c><00:27:29.450><c> operations</c><00:27:30.820><c> is</c>

00:27:31.810 --> 00:27:31.820 align:start position:0%
data types and different operations is
 

00:27:31.820 --> 00:27:35.349 align:start position:0%
data types and different operations is
what<00:27:32.209><c> we</c><00:27:32.359><c> showed</c><00:27:32.629><c> to</c><00:27:32.929><c> ensure</c><00:27:33.289><c> the</c><00:27:33.409><c> benefit</c><00:27:34.359><c> so</c>

00:27:35.349 --> 00:27:35.359 align:start position:0%
what we showed to ensure the benefit so
 

00:27:35.359 --> 00:27:37.690 align:start position:0%
what we showed to ensure the benefit so
the<00:27:35.570><c> we</c><00:27:36.109><c> are</c><00:27:36.200><c> basically</c><00:27:36.469><c> comparing</c><00:27:37.009><c> the</c><00:27:37.309><c> 32</c>

00:27:37.690 --> 00:27:37.700 align:start position:0%
the we are basically comparing the 32
 

00:27:37.700 --> 00:27:40.509 align:start position:0%
the we are basically comparing the 32
byte<00:27:38.239><c> vectorization</c><00:27:38.829><c> that</c><00:27:39.829><c> was</c><00:27:39.979><c> available</c><00:27:40.249><c> on</c>

00:27:40.509 --> 00:27:40.519 align:start position:0%
byte vectorization that was available on
 

00:27:40.519 --> 00:27:44.440 align:start position:0%
byte vectorization that was available on
the<00:27:40.579><c> previous</c><00:27:41.059><c> platforms</c><00:27:41.659><c> to</c><00:27:42.619><c> 64</c><00:27:43.579><c> byte</c><00:27:43.999><c> that</c>

00:27:44.440 --> 00:27:44.450 align:start position:0%
the previous platforms to 64 byte that
 

00:27:44.450 --> 00:27:47.799 align:start position:0%
the previous platforms to 64 byte that
is<00:27:44.570><c> 512</c><00:27:45.200><c> bit</c><00:27:45.409><c> Elektra</c><00:27:46.219><c> ization</c><00:27:46.629><c> that's</c><00:27:47.629><c> now</c>

00:27:47.799 --> 00:27:47.809 align:start position:0%
is 512 bit Elektra ization that's now
 

00:27:47.809 --> 00:27:50.949 align:start position:0%
is 512 bit Elektra ization that's now
available<00:27:47.989><c> in</c><00:27:48.679><c> geni</c><00:27:48.979><c> k9</c><00:27:49.369><c> you</c><00:27:50.029><c> need</c><00:27:50.179><c> to</c><00:27:50.359><c> use</c><00:27:50.570><c> the</c>

00:27:50.949 --> 00:27:50.959 align:start position:0%
available in geni k9 you need to use the
 

00:27:50.959 --> 00:27:54.249 align:start position:0%
available in geni k9 you need to use the
use<00:27:51.259><c> of</c><00:27:51.440><c> X</c><00:27:51.649><c> equal</c><00:27:52.219><c> to</c><00:27:52.339><c> 3</c><00:27:52.719><c> JVM</c><00:27:53.719><c> command</c><00:27:54.079><c> line</c>

00:27:54.249 --> 00:27:54.259 align:start position:0%
use of X equal to 3 JVM command line
 

00:27:54.259 --> 00:27:57.659 align:start position:0%
use of X equal to 3 JVM command line
option<00:27:54.889><c> to</c><00:27:55.219><c> get</c><00:27:55.599><c> 512</c><00:27:56.599><c> bit</c><00:27:56.779><c> Twitter</c><00:27:57.079><c> ization</c>

00:27:57.659 --> 00:27:57.669 align:start position:0%
option to get 512 bit Twitter ization
 

00:27:57.669 --> 00:28:02.169 align:start position:0%
option to get 512 bit Twitter ization
and<00:27:58.669><c> we</c><00:27:59.479><c> also</c><00:27:59.989><c> show</c><00:28:00.919><c> the</c><00:28:01.700><c> benefit</c><00:28:02.149><c> of</c>

00:28:02.169 --> 00:28:02.179 align:start position:0%
and we also show the benefit of
 

00:28:02.179 --> 00:28:05.499 align:start position:0%
and we also show the benefit of
alignment<00:28:03.190><c> JVM</c><00:28:04.190><c> has</c><00:28:04.369><c> an</c><00:28:04.519><c> option</c><00:28:04.909><c> called</c><00:28:05.149><c> optic</c>

00:28:05.499 --> 00:28:05.509 align:start position:0%
alignment JVM has an option called optic
 

00:28:05.509 --> 00:28:07.769 align:start position:0%
alignment JVM has an option called optic
alignment<00:28:05.959><c> in</c><00:28:06.079><c> pipes</c><00:28:06.529><c> which</c><00:28:06.919><c> you</c><00:28:07.099><c> can</c><00:28:07.309><c> use</c><00:28:07.729><c> to</c>

00:28:07.769 --> 00:28:07.779 align:start position:0%
alignment in pipes which you can use to
 

00:28:07.779 --> 00:28:13.839 align:start position:0%
alignment in pipes which you can use to
align<00:28:08.779><c> the</c><00:28:09.079><c> data</c><00:28:09.320><c> type</c><00:28:10.119><c> so</c><00:28:12.190><c> this</c><00:28:13.190><c> chart</c><00:28:13.549><c> here</c>

00:28:13.839 --> 00:28:13.849 align:start position:0%
align the data type so this chart here
 

00:28:13.849 --> 00:28:18.339 align:start position:0%
align the data type so this chart here
shows<00:28:14.200><c> the</c><00:28:16.359><c> performance</c><00:28:17.359><c> gain</c><00:28:17.599><c> for</c>

00:28:18.339 --> 00:28:18.349 align:start position:0%
shows the performance gain for
 

00:28:18.349 --> 00:28:20.949 align:start position:0%
shows the performance gain for
floating-point<00:28:18.739><c> operation</c><00:28:19.369><c> from</c><00:28:20.209><c> 32</c><00:28:20.779><c> byte</c>

00:28:20.949 --> 00:28:20.959 align:start position:0%
floating-point operation from 32 byte
 

00:28:20.959 --> 00:28:24.279 align:start position:0%
floating-point operation from 32 byte
vector<00:28:21.349><c> to</c><00:28:21.679><c> 64</c><00:28:22.190><c> byte</c><00:28:22.369><c> vector</c><00:28:22.789><c> and</c><00:28:23.659><c> the</c>

00:28:24.279 --> 00:28:24.289 align:start position:0%
vector to 64 byte vector and the
 

00:28:24.289 --> 00:28:30.089 align:start position:0%
vector to 64 byte vector and the
performance<00:28:25.249><c> gain</c><00:28:25.929><c> is</c><00:28:26.929><c> up</c><00:28:27.559><c> to</c><00:28:27.859><c> 30</c><00:28:28.729><c> percent</c>

00:28:30.089 --> 00:28:30.099 align:start position:0%
performance gain is up to 30 percent
 

00:28:30.099 --> 00:28:33.310 align:start position:0%
performance gain is up to 30 percent
without<00:28:31.099><c> alignment</c><00:28:31.669><c> and</c><00:28:31.909><c> goes</c><00:28:32.539><c> up</c><00:28:32.749><c> to</c><00:28:32.869><c> 70</c>

00:28:33.310 --> 00:28:33.320 align:start position:0%
without alignment and goes up to 70
 

00:28:33.320 --> 00:28:39.519 align:start position:0%
without alignment and goes up to 70
percent<00:28:33.799><c> with</c><00:28:34.429><c> alignment</c><00:28:36.279><c> and</c><00:28:37.779><c> here</c><00:28:38.779><c> we</c><00:28:39.499><c> show</c>

00:28:39.519 --> 00:28:39.529 align:start position:0%
percent with alignment and here we show
 

00:28:39.529 --> 00:28:42.819 align:start position:0%
percent with alignment and here we show
the<00:28:39.769><c> performance</c><00:28:40.579><c> of</c><00:28:41.499><c> integer</c><00:28:42.499><c> arithmetic</c>

00:28:42.819 --> 00:28:42.829 align:start position:0%
the performance of integer arithmetic
 

00:28:42.829 --> 00:28:46.029 align:start position:0%
the performance of integer arithmetic
and<00:28:43.429><c> logical</c><00:28:43.909><c> operations</c><00:28:44.709><c> here</c><00:28:45.709><c> the</c>

00:28:46.029 --> 00:28:46.039 align:start position:0%
and logical operations here the
 

00:28:46.039 --> 00:28:49.509 align:start position:0%
and logical operations here the
performance<00:28:46.279><c> gain</c><00:28:46.940><c> is</c><00:28:47.749><c> up</c><00:28:48.169><c> to</c><00:28:48.469><c> 40</c><00:28:49.369><c> percent</c>

00:28:49.509 --> 00:28:49.519 align:start position:0%
performance gain is up to 40 percent
 

00:28:49.519 --> 00:28:52.359 align:start position:0%
performance gain is up to 40 percent
without<00:28:50.450><c> alignment</c><00:28:51.049><c> and</c><00:28:51.229><c> 80</c><00:28:51.440><c> percent</c><00:28:51.709><c> with</c>

00:28:52.359 --> 00:28:52.369 align:start position:0%
without alignment and 80 percent with
 

00:28:52.369 --> 00:28:58.839 align:start position:0%
without alignment and 80 percent with
alignment<00:28:55.659><c> so</c><00:28:56.659><c> the</c><00:28:56.869><c> auto</c><00:28:57.139><c> vectorization</c><00:28:57.849><c> not</c>

00:28:58.839 --> 00:28:58.849 align:start position:0%
alignment so the auto vectorization not
 

00:28:58.849 --> 00:29:00.969 align:start position:0%
alignment so the auto vectorization not
only<00:28:59.119><c> benefits</c><00:28:59.570><c> the</c><00:28:59.749><c> classic</c><00:29:00.200><c> Java</c><00:29:00.469><c> code</c><00:29:00.739><c> but</c>

00:29:00.969 --> 00:29:00.979 align:start position:0%
only benefits the classic Java code but
 

00:29:00.979 --> 00:29:02.829 align:start position:0%
only benefits the classic Java code but
it<00:29:01.190><c> also</c><00:29:01.459><c> helps</c><00:29:02.089><c> streams</c><00:29:02.450><c> that</c><00:29:02.690><c> was</c>

00:29:02.829 --> 00:29:02.839 align:start position:0%
it also helps streams that was
 

00:29:02.839 --> 00:29:06.579 align:start position:0%
it also helps streams that was
introduced<00:29:03.349><c> in</c><00:29:03.589><c> G</c><00:29:03.739><c> decade</c><00:29:04.149><c> so</c><00:29:05.169><c> okay</c><00:29:06.169><c> there</c><00:29:06.469><c> is</c>

00:29:06.579 --> 00:29:06.589 align:start position:0%
introduced in G decade so okay there is
 

00:29:06.589 --> 00:29:10.019 align:start position:0%
introduced in G decade so okay there is
a<00:29:06.619><c> lambda</c><00:29:07.389><c> somewhat</c><00:29:08.389><c> more</c><00:29:08.749><c> complex</c>

00:29:10.019 --> 00:29:10.029 align:start position:0%
a lambda somewhat more complex
 

00:29:10.029 --> 00:29:13.100 align:start position:0%
a lambda somewhat more complex
expression<00:29:11.029><c> than</c><00:29:11.209><c> the</c><00:29:11.419><c> previous</c><00:29:11.749><c> example</c>

00:29:13.100 --> 00:29:13.110 align:start position:0%
expression than the previous example
 

00:29:13.110 --> 00:29:16.460 align:start position:0%
expression than the previous example
and<00:29:13.200><c> this</c><00:29:13.800><c> lambda</c><00:29:14.130><c> gets</c><00:29:14.580><c> Auto</c><00:29:14.970><c> vectorized</c><00:29:15.480><c> and</c>

00:29:16.460 --> 00:29:16.470 align:start position:0%
and this lambda gets Auto vectorized and
 

00:29:16.470 --> 00:29:18.260 align:start position:0%
and this lambda gets Auto vectorized and
if<00:29:16.620><c> you</c><00:29:16.740><c> would</c><00:29:16.860><c> have</c><00:29:16.980><c> used</c><00:29:17.280><c> parallel</c><00:29:17.940><c> along</c>

00:29:18.260 --> 00:29:18.270 align:start position:0%
if you would have used parallel along
 

00:29:18.270 --> 00:29:22.910 align:start position:0%
if you would have used parallel along
with<00:29:18.480><c> this</c><00:29:19.880><c> this</c><00:29:20.880><c> lambda</c><00:29:21.300><c> then</c><00:29:21.600><c> you</c><00:29:22.050><c> would</c><00:29:22.230><c> see</c>

00:29:22.910 --> 00:29:22.920 align:start position:0%
with this this lambda then you would see
 

00:29:22.920 --> 00:29:25.340 align:start position:0%
with this this lambda then you would see
again<00:29:23.220><c> a</c><00:29:23.250><c> cross</c><00:29:23.610><c> multi-core</c><00:29:24.240><c> and</c><00:29:24.510><c> as</c><00:29:25.020><c> well</c><00:29:25.230><c> as</c>

00:29:25.340 --> 00:29:25.350 align:start position:0%
again a cross multi-core and as well as
 

00:29:25.350 --> 00:29:28.250 align:start position:0%
again a cross multi-core and as well as
you'll<00:29:25.530><c> benefit</c><00:29:25.920><c> from</c><00:29:26.160><c> the</c><00:29:26.690><c> vector</c><00:29:27.690><c> unit</c><00:29:28.050><c> on</c>

00:29:28.250 --> 00:29:28.260 align:start position:0%
you'll benefit from the vector unit on
 

00:29:28.260 --> 00:29:30.770 align:start position:0%
you'll benefit from the vector unit on
the<00:29:28.380><c> processor</c><00:29:28.860><c> so</c><00:29:29.550><c> here</c><00:29:29.790><c> this</c><00:29:30.210><c> run</c><00:29:30.450><c> is</c><00:29:30.600><c> done</c>

00:29:30.770 --> 00:29:30.780 align:start position:0%
the processor so here this run is done
 

00:29:30.780 --> 00:29:34.940 align:start position:0%
the processor so here this run is done
on<00:29:30.990><c> a</c><00:29:31.020><c> single</c><00:29:31.440><c> code</c><00:29:31.650><c> and</c><00:29:32.600><c> you</c><00:29:33.600><c> see</c><00:29:33.870><c> there's</c><00:29:34.860><c> a</c>

00:29:34.940 --> 00:29:34.950 align:start position:0%
on a single code and you see there's a
 

00:29:34.950 --> 00:29:40.070 align:start position:0%
on a single code and you see there's a
gain<00:29:35.190><c> up</c><00:29:35.760><c> to</c><00:29:36.080><c> 60%</c><00:29:37.310><c> with</c><00:29:38.310><c> alignment</c><00:29:39.180><c> and</c><00:29:39.570><c> 64</c>

00:29:40.070 --> 00:29:40.080 align:start position:0%
gain up to 60% with alignment and 64
 

00:29:40.080 --> 00:29:45.850 align:start position:0%
gain up to 60% with alignment and 64
byte<00:29:40.820><c> vector</c><00:29:43.610><c> so</c><00:29:44.610><c> as</c><00:29:44.790><c> I</c><00:29:44.940><c> mentioned</c><00:29:45.480><c> before</c>

00:29:45.850 --> 00:29:45.860 align:start position:0%
byte vector so as I mentioned before
 

00:29:45.860 --> 00:29:49.670 align:start position:0%
byte vector so as I mentioned before
jelly<00:29:46.860><c> canine</c><00:29:47.280><c> has</c><00:29:48.080><c> vectorization</c><00:29:49.080><c> and</c><00:29:49.530><c> has</c>

00:29:49.670 --> 00:29:49.680 align:start position:0%
jelly canine has vectorization and has
 

00:29:49.680 --> 00:29:53.480 align:start position:0%
jelly canine has vectorization and has
made<00:29:49.950><c> over</c><00:29:50.220><c> JDK</c><00:29:50.850><c> 8</c><00:29:51.060><c> so</c><00:29:51.930><c> in</c><00:29:52.200><c> dedicate</c><00:29:52.740><c> given</c><00:29:53.280><c> a</c>

00:29:53.480 --> 00:29:53.490 align:start position:0%
made over JDK 8 so in dedicate given a
 

00:29:53.490 --> 00:29:55.790 align:start position:0%
made over JDK 8 so in dedicate given a
simple<00:29:53.880><c> loop</c><00:29:54.000><c> like</c><00:29:54.270><c> I</c><00:29:54.450><c> showed</c><00:29:55.050><c> in</c><00:29:55.740><c> the</c>

00:29:55.790 --> 00:29:55.800 align:start position:0%
simple loop like I showed in the
 

00:29:55.800 --> 00:30:01.580 align:start position:0%
simple loop like I showed in the
previous<00:29:57.380><c> example</c><00:29:58.380><c> the</c><00:29:59.570><c> there</c><00:30:00.570><c> is</c><00:30:00.720><c> a</c><00:30:00.750><c> pre</c><00:30:01.320><c> loop</c>

00:30:01.580 --> 00:30:01.590 align:start position:0%
previous example the there is a pre loop
 

00:30:01.590 --> 00:30:04.190 align:start position:0%
previous example the there is a pre loop
main<00:30:02.160><c> loop</c><00:30:02.430><c> and</c><00:30:02.790><c> the</c><00:30:03.240><c> post</c><00:30:03.450><c> loop</c><00:30:03.690><c> generated</c>

00:30:04.190 --> 00:30:04.200 align:start position:0%
main loop and the post loop generated
 

00:30:04.200 --> 00:30:06.680 align:start position:0%
main loop and the post loop generated
the<00:30:04.380><c> pre</c><00:30:04.560><c> loop</c><00:30:04.770><c> does</c><00:30:04.980><c> the</c><00:30:05.690><c> destination</c>

00:30:06.680 --> 00:30:06.690 align:start position:0%
the pre loop does the destination
 

00:30:06.690 --> 00:30:09.620 align:start position:0%
the pre loop does the destination
alignment<00:30:07.230><c> and</c><00:30:07.550><c> the</c><00:30:08.550><c> main</c><00:30:08.730><c> loop</c><00:30:08.940><c> is</c><00:30:09.240><c> the</c><00:30:09.480><c> one</c>

00:30:09.620 --> 00:30:09.630 align:start position:0%
alignment and the main loop is the one
 

00:30:09.630 --> 00:30:12.170 align:start position:0%
alignment and the main loop is the one
that<00:30:09.780><c> gets</c><00:30:09.960><c> auto</c><00:30:10.290><c> vectorized</c><00:30:10.770><c> and</c><00:30:11.130><c> the</c><00:30:11.850><c> scalar</c>

00:30:12.170 --> 00:30:12.180 align:start position:0%
that gets auto vectorized and the scalar
 

00:30:12.180 --> 00:30:15.740 align:start position:0%
that gets auto vectorized and the scalar
post<00:30:12.810><c> loop</c><00:30:13.020><c> is</c><00:30:13.260><c> for</c><00:30:13.590><c> tail</c><00:30:13.770><c> processing</c><00:30:14.450><c> so</c><00:30:15.450><c> in</c>

00:30:15.740 --> 00:30:15.750 align:start position:0%
post loop is for tail processing so in
 

00:30:15.750 --> 00:30:19.700 align:start position:0%
post loop is for tail processing so in
jdk<00:30:16.530><c> 9</c><00:30:16.710><c> we</c><00:30:17.400><c> now</c><00:30:17.670><c> super</c><00:30:18.150><c> unroll</c><00:30:18.570><c> the</c><00:30:19.140><c> vector</c>

00:30:19.700 --> 00:30:19.710 align:start position:0%
jdk 9 we now super unroll the vector
 

00:30:19.710 --> 00:30:22.280 align:start position:0%
jdk 9 we now super unroll the vector
main<00:30:20.190><c> loop</c><00:30:20.480><c> since</c><00:30:21.480><c> the</c><00:30:21.570><c> vector</c><00:30:21.690><c> main</c><00:30:21.960><c> loop</c><00:30:22.170><c> a</c>

00:30:22.280 --> 00:30:22.290 align:start position:0%
main loop since the vector main loop a
 

00:30:22.290 --> 00:30:24.740 align:start position:0%
main loop since the vector main loop a
super<00:30:22.590><c> unroll</c><00:30:22.920><c> there</c><00:30:23.220><c> is</c><00:30:23.400><c> a</c><00:30:23.430><c> vector</c><00:30:23.790><c> single</c>

00:30:24.740 --> 00:30:24.750 align:start position:0%
super unroll there is a vector single
 

00:30:24.750 --> 00:30:28.040 align:start position:0%
super unroll there is a vector single
iteration<00:30:24.900><c> post</c><00:30:25.470><c> loop</c><00:30:25.940><c> which</c><00:30:26.940><c> can</c><00:30:27.330><c> do</c><00:30:27.660><c> as</c><00:30:27.840><c> much</c>

00:30:28.040 --> 00:30:28.050 align:start position:0%
iteration post loop which can do as much
 

00:30:28.050 --> 00:30:30.230 align:start position:0%
iteration post loop which can do as much
operation<00:30:28.650><c> remaining</c><00:30:29.010><c> operation</c><00:30:29.490><c> using</c>

00:30:30.230 --> 00:30:30.240 align:start position:0%
operation remaining operation using
 

00:30:30.240 --> 00:30:34.120 align:start position:0%
operation remaining operation using
vector<00:30:30.600><c> instructions</c><00:30:31.140><c> as</c><00:30:31.380><c> possible</c>

00:30:34.120 --> 00:30:34.130 align:start position:0%
vector instructions as possible
 

00:30:34.130 --> 00:30:39.100 align:start position:0%
vector instructions as possible
so<00:30:34.760><c> here</c><00:30:35.750><c> is</c><00:30:36.020><c> an</c><00:30:36.169><c> example</c><00:30:36.350><c> of</c><00:30:37.330><c> reduction</c><00:30:38.330><c> so</c>

00:30:39.100 --> 00:30:39.110 align:start position:0%
so here is an example of reduction so
 

00:30:39.110 --> 00:30:42.159 align:start position:0%
so here is an example of reduction so
the<00:30:39.320><c> highlighted</c><00:30:40.039><c> portion</c><00:30:40.460><c> of</c><00:30:40.580><c> the</c><00:30:40.880><c> code</c><00:30:41.210><c> is</c>

00:30:42.159 --> 00:30:42.169 align:start position:0%
the highlighted portion of the code is
 

00:30:42.169 --> 00:30:45.840 align:start position:0%
the highlighted portion of the code is
doing<00:30:42.890><c> the</c><00:30:43.720><c> sum</c><00:30:44.720><c> reduction</c><00:30:44.929><c> of</c>

00:30:45.840 --> 00:30:45.850 align:start position:0%
doing the sum reduction of
 

00:30:45.850 --> 00:30:49.320 align:start position:0%
doing the sum reduction of
multiplication<00:30:46.870><c> of</c><00:30:47.870><c> area</c><00:30:48.230><c> elements</c><00:30:48.650><c> and</c>

00:30:49.320 --> 00:30:49.330 align:start position:0%
multiplication of area elements and
 

00:30:49.330 --> 00:30:53.529 align:start position:0%
multiplication of area elements and
prior<00:30:50.330><c> to</c><00:30:50.410><c> JDK</c><00:30:51.410><c> 9</c><00:30:51.730><c> reduction</c><00:30:52.730><c> was</c><00:30:53.299><c> not</c>

00:30:53.529 --> 00:30:53.539 align:start position:0%
prior to JDK 9 reduction was not
 

00:30:53.539 --> 00:30:55.720 align:start position:0%
prior to JDK 9 reduction was not
supported<00:30:54.049><c> basically</c><00:30:54.530><c> if</c><00:30:54.679><c> there</c><00:30:54.830><c> was</c><00:30:54.980><c> such</c><00:30:55.700><c> a</c>

00:30:55.720 --> 00:30:55.730 align:start position:0%
supported basically if there was such a
 

00:30:55.730 --> 00:30:58.419 align:start position:0%
supported basically if there was such a
reduction<00:30:56.210><c> in</c><00:30:56.419><c> a</c><00:30:56.480><c> classic</c><00:30:57.200><c> Java</c><00:30:57.440><c> code</c><00:30:57.740><c> the</c>

00:30:58.419 --> 00:30:58.429 align:start position:0%
reduction in a classic Java code the
 

00:30:58.429 --> 00:31:00.669 align:start position:0%
reduction in a classic Java code the
loop<00:30:58.610><c> won't</c><00:30:58.789><c> get</c><00:30:59.059><c> vectorized</c><00:30:59.600><c> and</c><00:30:59.990><c> you</c><00:31:00.440><c> won't</c>

00:31:00.669 --> 00:31:00.679 align:start position:0%
loop won't get vectorized and you won't
 

00:31:00.679 --> 00:31:04.029 align:start position:0%
loop won't get vectorized and you won't
see<00:31:01.070><c> benefit</c><00:31:01.520><c> from</c><00:31:01.669><c> vectorization</c><00:31:03.039><c> angelica</c>

00:31:04.029 --> 00:31:04.039 align:start position:0%
see benefit from vectorization angelica
 

00:31:04.039 --> 00:31:08.350 align:start position:0%
see benefit from vectorization angelica
9<00:31:04.250><c> and</c><00:31:04.850><c> the</c><00:31:04.970><c> reduction</c><00:31:05.330><c> is</c><00:31:05.450><c> supported</c><00:31:06.080><c> and</c><00:31:07.360><c> you</c>

00:31:08.350 --> 00:31:08.360 align:start position:0%
9 and the reduction is supported and you
 

00:31:08.360 --> 00:31:13.659 align:start position:0%
9 and the reduction is supported and you
can<00:31:08.539><c> see</c><00:31:08.809><c> that</c><00:31:10.390><c> up</c><00:31:11.390><c> to</c><00:31:11.720><c> 2x</c><00:31:12.320><c> gain</c><00:31:12.770><c> is</c><00:31:13.100><c> seen</c><00:31:13.340><c> for</c>

00:31:13.659 --> 00:31:13.669 align:start position:0%
can see that up to 2x gain is seen for
 

00:31:13.669 --> 00:31:18.750 align:start position:0%
can see that up to 2x gain is seen for
this<00:31:13.909><c> particular</c><00:31:14.480><c> code</c><00:31:14.740><c> here</c><00:31:15.740><c> I</c><00:31:15.770><c> show</c><00:31:17.169><c> the</c>

00:31:18.750 --> 00:31:18.760 align:start position:0%
this particular code here I show the
 

00:31:18.760 --> 00:31:22.570 align:start position:0%
this particular code here I show the
vector<00:31:19.760><c> post</c><00:31:20.030><c> loop</c><00:31:20.330><c> to</c><00:31:20.630><c> generated</c><00:31:21.140><c> code</c><00:31:21.380><c> and</c><00:31:21.620><c> I</c>

00:31:22.570 --> 00:31:22.580 align:start position:0%
vector post loop to generated code and I
 

00:31:22.580 --> 00:31:25.750 align:start position:0%
vector post loop to generated code and I
can<00:31:22.880><c> see</c><00:31:23.059><c> that</c><00:31:23.210><c> the</c><00:31:23.600><c> multiplication</c><00:31:23.990><c> VP</c><00:31:24.679><c> ml</c><00:31:25.010><c> LD</c>

00:31:25.750 --> 00:31:25.760 align:start position:0%
can see that the multiplication VP ml LD
 

00:31:25.760 --> 00:31:28.270 align:start position:0%
can see that the multiplication VP ml LD
that<00:31:26.360><c> is</c><00:31:26.510><c> a</c><00:31:26.539><c> vector</c><00:31:26.870><c> instruction</c><00:31:27.409><c> and</c><00:31:28.130><c> the</c>

00:31:28.270 --> 00:31:28.280 align:start position:0%
that is a vector instruction and the
 

00:31:28.280 --> 00:31:31.120 align:start position:0%
that is a vector instruction and the
rest<00:31:28.429><c> of</c><00:31:28.549><c> the</c><00:31:28.700><c> code</c><00:31:28.880><c> is</c><00:31:29.090><c> for</c><00:31:29.480><c> the</c><00:31:30.130><c> summation</c>

00:31:31.120 --> 00:31:31.130 align:start position:0%
rest of the code is for the summation
 

00:31:31.130 --> 00:31:34.960 align:start position:0%
rest of the code is for the summation
the<00:31:31.610><c> reduction</c><00:31:32.270><c> operation</c><00:31:32.860><c> and</c><00:31:33.860><c> summation</c><00:31:34.730><c> is</c>

00:31:34.960 --> 00:31:34.970 align:start position:0%
the reduction operation and summation is
 

00:31:34.970 --> 00:31:38.740 align:start position:0%
the reduction operation and summation is
used<00:31:35.360><c> extensively</c><00:31:36.429><c> for</c><00:31:37.429><c> example</c><00:31:38.030><c> in</c>

00:31:38.740 --> 00:31:38.750 align:start position:0%
used extensively for example in
 

00:31:38.750 --> 00:31:40.930 align:start position:0%
used extensively for example in
convolution<00:31:39.590><c> for</c><00:31:39.770><c> image</c><00:31:40.039><c> processing</c><00:31:40.580><c> or</c>

00:31:40.930 --> 00:31:40.940 align:start position:0%
convolution for image processing or
 

00:31:40.940 --> 00:31:44.380 align:start position:0%
convolution for image processing or
k-means<00:31:41.929><c> algorithm</c><00:31:42.590><c> matrix</c><00:31:43.580><c> multiplication</c>

00:31:44.380 --> 00:31:44.390 align:start position:0%
k-means algorithm matrix multiplication
 

00:31:44.390 --> 00:31:49.049 align:start position:0%
k-means algorithm matrix multiplication
so<00:31:44.900><c> those</c><00:31:45.140><c> all</c><00:31:45.350><c> can</c><00:31:45.650><c> get</c><00:31:45.860><c> now</c><00:31:46.070><c> out</c><00:31:46.250><c> of</c><00:31:46.280><c> a</c><00:31:46.460><c> closed</c>

00:31:49.049 --> 00:31:49.059 align:start position:0%
 
 

00:31:49.059 --> 00:31:53.820 align:start position:0%
 
so<00:31:50.059><c> we</c><00:31:50.990><c> also</c><00:31:51.380><c> recognized</c><00:31:52.480><c> additional</c>

00:31:53.820 --> 00:31:53.830 align:start position:0%
so we also recognized additional
 

00:31:53.830 --> 00:31:56.289 align:start position:0%
so we also recognized additional
expressions<00:31:54.830><c> in</c><00:31:55.039><c> the</c><00:31:55.159><c> vector</c><00:31:55.460><c> loop</c><00:31:55.940><c> and</c>

00:31:56.289 --> 00:31:56.299 align:start position:0%
expressions in the vector loop and
 

00:31:56.299 --> 00:31:58.990 align:start position:0%
expressions in the vector loop and
basically<00:31:57.049><c> vectorize</c><00:31:57.470><c> the</c><00:31:57.620><c> loop</c><00:31:57.770><c> for</c><00:31:58.429><c> example</c>

00:31:58.990 --> 00:31:59.000 align:start position:0%
basically vectorize the loop for example
 

00:31:59.000 --> 00:32:02.890 align:start position:0%
basically vectorize the loop for example
the<00:31:59.809><c> math</c><00:32:00.020><c> dot</c><00:32:00.470><c> square</c><00:32:00.860><c> root</c><00:32:01.330><c> if</c><00:32:02.330><c> there</c><00:32:02.539><c> is</c><00:32:02.659><c> a</c>

00:32:02.890 --> 00:32:02.900 align:start position:0%
the math dot square root if there is a
 

00:32:02.900 --> 00:32:05.080 align:start position:0%
the math dot square root if there is a
square<00:32:03.799><c> root</c><00:32:03.860><c> performed</c><00:32:04.460><c> on</c><00:32:04.580><c> every</c><00:32:04.700><c> element</c>

00:32:05.080 --> 00:32:05.090 align:start position:0%
square root performed on every element
 

00:32:05.090 --> 00:32:07.510 align:start position:0%
square root performed on every element
of<00:32:05.210><c> the</c><00:32:05.360><c> array</c><00:32:05.450><c> that</c><00:32:05.840><c> now</c><00:32:06.020><c> gets</c><00:32:06.520><c> recognized</c>

00:32:07.510 --> 00:32:07.520 align:start position:0%
of the array that now gets recognized
 

00:32:07.520 --> 00:32:11.289 align:start position:0%
of the array that now gets recognized
and<00:32:07.909><c> we</c><00:32:08.780><c> generate</c><00:32:09.169><c> a</c><00:32:09.280><c> vector</c><00:32:10.280><c> square</c><00:32:11.179><c> root</c>

00:32:11.289 --> 00:32:11.299 align:start position:0%
and we generate a vector square root
 

00:32:11.299 --> 00:32:13.450 align:start position:0%
and we generate a vector square root
instruction<00:32:11.840><c> there</c><00:32:12.049><c> we</c><00:32:12.230><c> square</c><00:32:12.500><c> root</c><00:32:12.530><c> PV</c><00:32:13.010><c> and</c>

00:32:13.450 --> 00:32:13.460 align:start position:0%
instruction there we square root PV and
 

00:32:13.460 --> 00:32:16.539 align:start position:0%
instruction there we square root PV and
you<00:32:14.299><c> can</c><00:32:14.480><c> see</c><00:32:14.630><c> going</c><00:32:14.929><c> from</c><00:32:15.110><c> dedicate</c><00:32:15.530><c> to</c><00:32:15.890><c> JDK</c><00:32:16.340><c> 9</c>

00:32:16.539 --> 00:32:16.549 align:start position:0%
you can see going from dedicate to JDK 9
 

00:32:16.549 --> 00:32:21.039 align:start position:0%
you can see going from dedicate to JDK 9
we<00:32:17.330><c> see</c><00:32:17.360><c> about</c><00:32:18.460><c> greater</c><00:32:19.460><c> than</c><00:32:19.610><c> 5x</c><00:32:20.049><c> performance</c>

00:32:21.039 --> 00:32:21.049 align:start position:0%
we see about greater than 5x performance
 

00:32:21.049 --> 00:32:25.840 align:start position:0%
we see about greater than 5x performance
for<00:32:21.530><c> this</c><00:32:21.710><c> loop</c>

00:32:25.840 --> 00:32:25.850 align:start position:0%
 
 

00:32:25.850 --> 00:32:30.280 align:start position:0%
 
so<00:32:26.950><c> in</c><00:32:27.950><c> Cherokee</c><00:32:28.940><c> 9</c><00:32:29.120><c> there's</c><00:32:29.750><c> another</c><00:32:29.960><c> feature</c>

00:32:30.280 --> 00:32:30.290 align:start position:0%
so in Cherokee 9 there's another feature
 

00:32:30.290 --> 00:32:33.850 align:start position:0%
so in Cherokee 9 there's another feature
introduced<00:32:31.040><c> called</c><00:32:31.400><c> compact</c><00:32:31.850><c> strings</c><00:32:32.270><c> so</c><00:32:33.140><c> for</c>

00:32:33.850 --> 00:32:33.860 align:start position:0%
introduced called compact strings so for
 

00:32:33.860 --> 00:32:36.040 align:start position:0%
introduced called compact strings so for
this<00:32:34.010><c> we</c><00:32:34.250><c> collaborated</c><00:32:35.000><c> with</c><00:32:35.030><c> the</c><00:32:35.630><c> Oracle</c>

00:32:36.040 --> 00:32:36.050 align:start position:0%
this we collaborated with the Oracle
 

00:32:36.050 --> 00:32:40.330 align:start position:0%
this we collaborated with the Oracle
charlie<00:32:36.770><c> hunt</c><00:32:38.320><c> dimension</c><00:32:39.320><c> Tobias</c><00:32:39.890><c> Hartman</c>

00:32:40.330 --> 00:32:40.340 align:start position:0%
charlie hunt dimension Tobias Hartman
 

00:32:40.340 --> 00:32:44.370 align:start position:0%
charlie hunt dimension Tobias Hartman
and<00:32:40.580><c> many</c><00:32:40.940><c> others</c><00:32:41.620><c> so</c><00:32:42.620><c> basically</c><00:32:43.280><c> what</c>

00:32:44.370 --> 00:32:44.380 align:start position:0%
and many others so basically what
 

00:32:44.380 --> 00:32:49.920 align:start position:0%
and many others so basically what
compact<00:32:45.380><c> string</c><00:32:45.710><c> does</c><00:32:46.310><c> is</c><00:32:47.800><c> it</c><00:32:48.800><c> tries</c><00:32:49.250><c> to</c><00:32:49.640><c> use</c>

00:32:49.920 --> 00:32:49.930 align:start position:0%
compact string does is it tries to use
 

00:32:49.930 --> 00:32:53.260 align:start position:0%
compact string does is it tries to use
one<00:32:50.930><c> byte</c><00:32:51.170><c> storage</c><00:32:51.710><c> for</c><00:32:52.430><c> characters</c><00:32:52.970><c> of</c><00:32:53.150><c> a</c>

00:32:53.260 --> 00:32:53.270 align:start position:0%
one byte storage for characters of a
 

00:32:53.270 --> 00:32:58.570 align:start position:0%
one byte storage for characters of a
string<00:32:53.710><c> in</c><00:32:54.710><c> Java</c><00:32:54.770><c> by</c><00:32:55.490><c> default</c><00:32:57.070><c> it</c><00:32:58.070><c> supports</c>

00:32:58.570 --> 00:32:58.580 align:start position:0%
string in Java by default it supports
 

00:32:58.580 --> 00:33:01.210 align:start position:0%
string in Java by default it supports
the<00:32:58.640><c> Unicode</c><00:32:59.410><c> characters</c><00:33:00.410><c> that</c><00:33:00.710><c> is</c><00:33:00.860><c> there</c><00:33:01.130><c> are</c>

00:33:01.210 --> 00:33:01.220 align:start position:0%
the Unicode characters that is there are
 

00:33:01.220 --> 00:33:05.320 align:start position:0%
the Unicode characters that is there are
two<00:33:01.250><c> bytes</c><00:33:01.640><c> per</c><00:33:01.910><c> character</c><00:33:02.260><c> but</c><00:33:03.700><c> s</c><00:33:04.700><c> key</c><00:33:05.000><c> and</c>

00:33:05.320 --> 00:33:05.330 align:start position:0%
two bytes per character but s key and
 

00:33:05.330 --> 00:33:08.620 align:start position:0%
two bytes per character but s key and
English<00:33:06.220><c> the</c><00:33:07.220><c> upper</c><00:33:07.370><c> body</c><00:33:07.550><c> is</c><00:33:07.730><c> always</c><00:33:07.880><c> zero</c><00:33:08.390><c> so</c>

00:33:08.620 --> 00:33:08.630 align:start position:0%
English the upper body is always zero so
 

00:33:08.630 --> 00:33:12.610 align:start position:0%
English the upper body is always zero so
you<00:33:08.690><c> can</c><00:33:09.160><c> use</c><00:33:10.160><c> single</c><00:33:10.700><c> byte</c><00:33:11.140><c> for</c><00:33:12.140><c> characters</c>

00:33:12.610 --> 00:33:12.620 align:start position:0%
you can use single byte for characters
 

00:33:12.620 --> 00:33:15.580 align:start position:0%
you can use single byte for characters
so<00:33:13.010><c> without</c><00:33:14.000><c> changing</c><00:33:14.060><c> what's</c><00:33:14.810><c> visible</c><00:33:15.380><c> to</c>

00:33:15.580 --> 00:33:15.590 align:start position:0%
so without changing what's visible to
 

00:33:15.590 --> 00:33:20.560 align:start position:0%
so without changing what's visible to
the<00:33:15.950><c> user</c><00:33:16.630><c> internally</c><00:33:18.340><c> the</c><00:33:19.340><c> internal</c><00:33:20.270><c> storage</c>

00:33:20.560 --> 00:33:20.570 align:start position:0%
the user internally the internal storage
 

00:33:20.570 --> 00:33:22.240 align:start position:0%
the user internally the internal storage
is<00:33:20.690><c> changed</c><00:33:21.050><c> from</c><00:33:21.170><c> character</c><00:33:21.530><c> array</c><00:33:21.860><c> to</c><00:33:22.220><c> a</c>

00:33:22.240 --> 00:33:22.250 align:start position:0%
is changed from character array to a
 

00:33:22.250 --> 00:33:26.050 align:start position:0%
is changed from character array to a
byte<00:33:22.520><c> array</c><00:33:22.550><c> and</c><00:33:23.210><c> if</c><00:33:23.930><c> all</c><00:33:24.740><c> the</c><00:33:25.070><c> elements</c><00:33:25.940><c> of</c>

00:33:26.050 --> 00:33:26.060 align:start position:0%
byte array and if all the elements of
 

00:33:26.060 --> 00:33:30.730 align:start position:0%
byte array and if all the elements of
the<00:33:26.210><c> string</c><00:33:26.450><c> fit</c><00:33:27.260><c> within</c><00:33:27.560><c> a</c><00:33:27.740><c> byte</c><00:33:27.950><c> then</c><00:33:29.740><c> the</c>

00:33:30.730 --> 00:33:30.740 align:start position:0%
the string fit within a byte then the
 

00:33:30.740 --> 00:33:32.890 align:start position:0%
the string fit within a byte then the
string<00:33:31.010><c> elements</c><00:33:31.400><c> are</c><00:33:31.520><c> stored</c><00:33:31.760><c> in</c><00:33:31.850><c> a</c><00:33:32.000><c> single</c>

00:33:32.890 --> 00:33:32.900 align:start position:0%
string elements are stored in a single
 

00:33:32.900 --> 00:33:35.770 align:start position:0%
string elements are stored in a single
bytes<00:33:33.230><c> and</c><00:33:33.590><c> if</c><00:33:34.370><c> not</c><00:33:34.670><c> the</c><00:33:34.970><c> string</c><00:33:35.180><c> is</c><00:33:35.300><c> inflated</c>

00:33:35.770 --> 00:33:35.780 align:start position:0%
bytes and if not the string is inflated
 

00:33:35.780 --> 00:33:39.600 align:start position:0%
bytes and if not the string is inflated
and<00:33:35.930><c> two</c><00:33:36.080><c> pipes</c><00:33:36.350><c> are</c><00:33:36.530><c> used</c><00:33:36.560><c> for</c><00:33:37.310><c> element</c><00:33:37.910><c> so</c>

00:33:39.600 --> 00:33:39.610 align:start position:0%
and two pipes are used for element so
 

00:33:39.610 --> 00:33:41.980 align:start position:0%
and two pipes are used for element so
what<00:33:40.610><c> this</c><00:33:41.030><c> does</c><00:33:41.300><c> is</c><00:33:41.510><c> strings</c><00:33:41.780><c> are</c>

00:33:41.980 --> 00:33:41.990 align:start position:0%
what this does is strings are
 

00:33:41.990 --> 00:33:43.690 align:start position:0%
what this does is strings are
extensively<00:33:42.560><c> used</c><00:33:42.890><c> in</c><00:33:43.040><c> any</c><00:33:43.220><c> of</c><00:33:43.370><c> the</c><00:33:43.490><c> Java</c>

00:33:43.690 --> 00:33:43.700 align:start position:0%
extensively used in any of the Java
 

00:33:43.700 --> 00:33:46.450 align:start position:0%
extensively used in any of the Java
programs<00:33:44.180><c> so</c><00:33:44.360><c> it</c><00:33:44.480><c> reduces</c><00:33:44.840><c> the</c><00:33:45.500><c> underlying</c>

00:33:46.450 --> 00:33:46.460 align:start position:0%
programs so it reduces the underlying
 

00:33:46.460 --> 00:33:49.180 align:start position:0%
programs so it reduces the underlying
storage<00:33:46.790><c> that</c><00:33:47.180><c> is</c><00:33:47.330><c> used</c><00:33:47.540><c> by</c><00:33:47.630><c> the</c><00:33:47.750><c> program</c><00:33:48.190><c> and</c>

00:33:49.180 --> 00:33:49.190 align:start position:0%
storage that is used by the program and
 

00:33:49.190 --> 00:33:52.900 align:start position:0%
storage that is used by the program and
not<00:33:49.460><c> only</c><00:33:49.610><c> that</c><00:33:50.260><c> most</c><00:33:51.260><c> of</c><00:33:51.650><c> the</c><00:33:51.980><c> interesting</c>

00:33:52.900 --> 00:33:52.910 align:start position:0%
not only that most of the interesting
 

00:33:52.910 --> 00:33:57.820 align:start position:0%
not only that most of the interesting
operations<00:33:53.720><c> are</c><00:33:54.710><c> done</c><00:33:55.700><c> at</c><00:33:56.420><c> the</c><00:33:56.600><c> back</c><00:33:56.830><c> using</c>

00:33:57.820 --> 00:33:57.830 align:start position:0%
operations are done at the back using
 

00:33:57.830 --> 00:34:00.580 align:start position:0%
operations are done at the back using
vector<00:33:58.130><c> instructions</c><00:33:58.670><c> so</c><00:33:59.390><c> now</c><00:33:59.420><c> because</c><00:34:00.200><c> the</c>

00:34:00.580 --> 00:34:00.590 align:start position:0%
vector instructions so now because the
 

00:34:00.590 --> 00:34:03.250 align:start position:0%
vector instructions so now because the
string<00:34:01.190><c> is</c><00:34:01.520><c> the</c><00:34:02.120><c> string</c><00:34:02.510><c> elements</c><00:34:02.990><c> are</c><00:34:03.110><c> half</c>

00:34:03.250 --> 00:34:03.260 align:start position:0%
string is the string elements are half
 

00:34:03.260 --> 00:34:04.480 align:start position:0%
string is the string elements are half
the<00:34:03.290><c> size</c><00:34:03.590><c> you</c><00:34:03.830><c> can</c><00:34:03.980><c> do</c><00:34:04.130><c> double</c><00:34:04.460><c> the</c>

00:34:04.480 --> 00:34:04.490 align:start position:0%
the size you can do double the
 

00:34:04.490 --> 00:34:07.330 align:start position:0%
the size you can do double the
operations<00:34:05.180><c> behind</c><00:34:05.990><c> so</c><00:34:06.560><c> so</c><00:34:07.070><c> there</c><00:34:07.220><c> is</c><00:34:07.310><c> a</c>

00:34:07.330 --> 00:34:07.340 align:start position:0%
operations behind so so there is a
 

00:34:07.340 --> 00:34:10.950 align:start position:0%
operations behind so so there is a
performance<00:34:07.910><c> improvement</c><00:34:08.180><c> is</c><00:34:08.600><c> also</c><00:34:08.930><c> possible</c>

00:34:10.950 --> 00:34:10.960 align:start position:0%
performance improvement is also possible
 

00:34:10.960 --> 00:34:15.130 align:start position:0%
performance improvement is also possible
there<00:34:11.960><c> is</c><00:34:12.110><c> some</c><00:34:13.070><c> overhead</c><00:34:13.370><c> to</c><00:34:14.060><c> check</c><00:34:14.840><c> each</c>

00:34:15.130 --> 00:34:15.140 align:start position:0%
there is some overhead to check each
 

00:34:15.140 --> 00:34:17.410 align:start position:0%
there is some overhead to check each
element<00:34:15.680><c> and</c><00:34:16.130><c> inflate</c><00:34:16.700><c> the</c><00:34:16.850><c> string</c><00:34:17.060><c> if</c>

00:34:17.410 --> 00:34:17.420 align:start position:0%
element and inflate the string if
 

00:34:17.420 --> 00:34:20.860 align:start position:0%
element and inflate the string if
possible<00:34:18.020><c> so</c><00:34:18.320><c> both</c><00:34:18.500><c> this</c><00:34:19.060><c> the</c><00:34:20.060><c> the</c><00:34:20.600><c> memory</c>

00:34:20.860 --> 00:34:20.870 align:start position:0%
possible so both this the the memory
 

00:34:20.870 --> 00:34:22.360 align:start position:0%
possible so both this the the memory
size<00:34:21.170><c> which</c><00:34:21.590><c> improves</c><00:34:21.950><c> the</c><00:34:22.040><c> garbage</c>

00:34:22.360 --> 00:34:22.370 align:start position:0%
size which improves the garbage
 

00:34:22.370 --> 00:34:25.510 align:start position:0%
size which improves the garbage
collection<00:34:22.730><c> performance</c><00:34:23.240><c> and</c><00:34:23.480><c> the</c><00:34:24.520><c> ability</c>

00:34:25.510 --> 00:34:25.520 align:start position:0%
collection performance and the ability
 

00:34:25.520 --> 00:34:28.990 align:start position:0%
collection performance and the ability
to<00:34:25.550><c> do</c><00:34:25.850><c> double</c><00:34:26.210><c> the</c><00:34:26.240><c> operation</c><00:34:27.400><c> is</c><00:34:28.400><c> benefit</c><00:34:28.880><c> to</c>

00:34:28.990 --> 00:34:29.000 align:start position:0%
to do double the operation is benefit to
 

00:34:29.000 --> 00:34:31.060 align:start position:0%
to do double the operation is benefit to
the<00:34:29.120><c> applications</c>

00:34:31.060 --> 00:34:31.070 align:start position:0%
the applications
 

00:34:31.070 --> 00:34:35.350 align:start position:0%
the applications
here<00:34:31.880><c> this</c><00:34:32.780><c> is</c><00:34:32.810><c> an</c><00:34:33.170><c> example</c><00:34:34.030><c> we</c><00:34:35.030><c> had</c><00:34:35.180><c> run</c>

00:34:35.350 --> 00:34:35.360 align:start position:0%
here this is an example we had run
 

00:34:35.360 --> 00:34:38.160 align:start position:0%
here this is an example we had run
spectively<00:34:35.900><c> be</c><00:34:36.130><c> 2005</c><00:34:37.130><c> this</c><00:34:37.430><c> one</c><00:34:37.670><c> was</c><00:34:37.850><c> done</c>

00:34:38.160 --> 00:34:38.170 align:start position:0%
spectively be 2005 this one was done
 

00:34:38.170 --> 00:34:41.620 align:start position:0%
spectively be 2005 this one was done
on'y<00:34:39.170><c> has</c><00:34:39.680><c> well</c><00:34:39.920><c> a</c><00:34:39.950><c> desktop</c><00:34:40.400><c> and</c><00:34:40.790><c> this</c><00:34:41.450><c> is</c><00:34:41.600><c> a</c>

00:34:41.620 --> 00:34:41.630 align:start position:0%
on'y has well a desktop and this is a
 

00:34:41.630 --> 00:34:46.390 align:start position:0%
on'y has well a desktop and this is a
peak<00:34:41.930><c> run</c><00:34:42.200><c> so</c><00:34:43.100><c> we</c><00:34:44.030><c> saw</c><00:34:44.270><c> about</c><00:34:44.540><c> 5%</c><00:34:45.400><c> performance</c>

00:34:46.390 --> 00:34:46.400 align:start position:0%
peak run so we saw about 5% performance
 

00:34:46.400 --> 00:34:48.280 align:start position:0%
peak run so we saw about 5% performance
improvement<00:34:47.150><c> in</c><00:34:47.270><c> the</c><00:34:47.360><c> peak</c><00:34:47.570><c> throughput</c><00:34:48.050><c> first</c>

00:34:48.280 --> 00:34:48.290 align:start position:0%
improvement in the peak throughput first
 

00:34:48.290 --> 00:34:51.940 align:start position:0%
improvement in the peak throughput first
picture<00:34:48.680><c> baby</c><00:34:49.060><c> 2005</c><00:34:50.060><c> and</c><00:34:50.390><c> this</c><00:34:51.320><c> is</c><00:34:51.500><c> a</c><00:34:51.680><c> heap</c>

00:34:51.940 --> 00:34:51.950 align:start position:0%
picture baby 2005 and this is a heap
 

00:34:51.950 --> 00:34:57.730 align:start position:0%
picture baby 2005 and this is a heap
dump<00:34:52.660><c> so</c><00:34:53.660><c> you</c><00:34:53.750><c> can</c><00:34:54.170><c> see</c><00:34:54.410><c> that</c><00:34:54.940><c> the</c><00:34:56.380><c> the</c><00:34:57.380><c> total</c>

00:34:57.730 --> 00:34:57.740 align:start position:0%
dump so you can see that the the total
 

00:34:57.740 --> 00:35:00.340 align:start position:0%
dump so you can see that the the total
number<00:34:58.100><c> of</c><00:34:58.150><c> objects</c><00:34:59.150><c> instances</c><00:34:59.870><c> is</c><00:34:59.990><c> about</c>

00:35:00.340 --> 00:35:00.350 align:start position:0%
number of objects instances is about
 

00:35:00.350 --> 00:35:03.850 align:start position:0%
number of objects instances is about
similar<00:35:00.740><c> between</c><00:35:01.130><c> JDK</c><00:35:01.640><c> 8</c><00:35:01.670><c> and</c><00:35:02.000><c> JDK</c><00:35:02.270><c> 9</c><00:35:02.860><c> the</c>

00:35:03.850 --> 00:35:03.860 align:start position:0%
similar between JDK 8 and JDK 9 the
 

00:35:03.860 --> 00:35:07.900 align:start position:0%
similar between JDK 8 and JDK 9 the
number<00:35:04.220><c> of</c><00:35:04.460><c> bytes</c><00:35:05.060><c> that</c><00:35:05.930><c> is</c><00:35:06.170><c> used</c><00:35:06.860><c> is</c><00:35:07.340><c> reduced</c>

00:35:07.900 --> 00:35:07.910 align:start position:0%
number of bytes that is used is reduced
 

00:35:07.910 --> 00:35:11.670 align:start position:0%
number of bytes that is used is reduced
by<00:35:08.270><c> 20%</c><00:35:08.920><c> and</c><00:35:09.920><c> if</c><00:35:10.070><c> you</c><00:35:10.220><c> see</c><00:35:10.370><c> the</c><00:35:10.520><c> highlighted</c>

00:35:11.670 --> 00:35:11.680 align:start position:0%
by 20% and if you see the highlighted
 

00:35:11.680 --> 00:35:13.870 align:start position:0%
by 20% and if you see the highlighted
portion<00:35:12.680><c> which</c><00:35:12.860><c> is</c><00:35:12.890><c> showing</c><00:35:13.250><c> the</c><00:35:13.550><c> number</c><00:35:13.790><c> of</c>

00:35:13.870 --> 00:35:13.880 align:start position:0%
portion which is showing the number of
 

00:35:13.880 --> 00:35:16.570 align:start position:0%
portion which is showing the number of
instances<00:35:14.270><c> of</c><00:35:14.630><c> character</c><00:35:15.020><c> array</c><00:35:15.400><c> and</c><00:35:16.400><c> the</c>

00:35:16.570 --> 00:35:16.580 align:start position:0%
instances of character array and the
 

00:35:16.580 --> 00:35:18.460 align:start position:0%
instances of character array and the
number<00:35:16.760><c> of</c><00:35:16.850><c> instances</c><00:35:17.150><c> of</c><00:35:17.390><c> byte</c><00:35:18.080><c> array</c><00:35:18.320><c> so</c>

00:35:18.460 --> 00:35:18.470 align:start position:0%
number of instances of byte array so
 

00:35:18.470 --> 00:35:20.170 align:start position:0%
number of instances of byte array so
whatever<00:35:18.770><c> was</c><00:35:18.950><c> character</c><00:35:19.340><c> array</c><00:35:19.580><c> before</c><00:35:19.640><c> is</c>

00:35:20.170 --> 00:35:20.180 align:start position:0%
whatever was character array before is
 

00:35:20.180 --> 00:35:30.310 align:start position:0%
whatever was character array before is
now<00:35:20.390><c> by</c><00:35:20.690><c> today</c><00:35:21.050><c> with</c><00:35:22.000><c> JDK</c><00:35:23.000><c> 9</c><00:35:27.010><c> so</c><00:35:29.020><c> angelica</c><00:35:30.020><c> 9</c><00:35:30.170><c> we</c>

00:35:30.310 --> 00:35:30.320 align:start position:0%
now by today with JDK 9 so angelica 9 we
 

00:35:30.320 --> 00:35:33.310 align:start position:0%
now by today with JDK 9 so angelica 9 we
also<00:35:30.640><c> worked</c><00:35:31.640><c> on</c><00:35:31.820><c> optimizing</c><00:35:32.390><c> the</c><00:35:33.110><c> math</c>

00:35:33.310 --> 00:35:33.320 align:start position:0%
also worked on optimizing the math
 

00:35:33.320 --> 00:35:36.580 align:start position:0%
also worked on optimizing the math
library<00:35:33.530><c> some</c><00:35:34.040><c> of</c><00:35:34.160><c> the</c><00:35:34.430><c> key</c><00:35:35.260><c> trigonometric</c><00:35:36.260><c> a</c>

00:35:36.580 --> 00:35:36.590 align:start position:0%
library some of the key trigonometric a
 

00:35:36.590 --> 00:35:39.880 align:start position:0%
library some of the key trigonometric a
transcendental<00:35:37.310><c> methods</c><00:35:38.270><c> like</c><00:35:38.570><c> the</c><00:35:38.900><c> sine</c>

00:35:39.880 --> 00:35:39.890 align:start position:0%
transcendental methods like the sine
 

00:35:39.890 --> 00:35:45.010 align:start position:0%
transcendental methods like the sine
cost<00:35:40.250><c> an</c><00:35:41.170><c> exponential</c><00:35:42.170><c> and</c><00:35:42.530><c> log</c><00:35:43.960><c> they</c><00:35:44.960><c> were</c>

00:35:45.010 --> 00:35:45.020 align:start position:0%
cost an exponential and log they were
 

00:35:45.020 --> 00:35:48.540 align:start position:0%
cost an exponential and log they were
optimized<00:35:45.860><c> and</c><00:35:46.340><c> you</c><00:35:46.730><c> can</c><00:35:46.880><c> see</c><00:35:47.090><c> gain</c><00:35:47.390><c> up</c><00:35:47.600><c> to</c><00:35:47.750><c> 5x</c>

00:35:48.540 --> 00:35:48.550 align:start position:0%
optimized and you can see gain up to 5x
 

00:35:48.550 --> 00:35:51.790 align:start position:0%
optimized and you can see gain up to 5x
for<00:35:49.550><c> this</c><00:35:49.730><c> math</c><00:35:49.940><c> libraries</c><00:35:50.480><c> these</c><00:35:51.320><c> math</c>

00:35:51.790 --> 00:35:51.800 align:start position:0%
for this math libraries these math
 

00:35:51.800 --> 00:35:55.120 align:start position:0%
for this math libraries these math
libraries<00:35:52.370><c> are</c><00:35:53.170><c> extensively</c><00:35:54.170><c> used</c><00:35:54.530><c> in</c><00:35:54.830><c> big</c>

00:35:55.120 --> 00:35:55.130 align:start position:0%
libraries are extensively used in big
 

00:35:55.130 --> 00:35:58.480 align:start position:0%
libraries are extensively used in big
data<00:35:55.250><c> machine</c><00:35:55.580><c> learning</c><00:35:56.090><c> the</c><00:35:56.960><c> financial</c><00:35:57.680><c> of</c>

00:35:58.480 --> 00:35:58.490 align:start position:0%
data machine learning the financial of
 

00:35:58.490 --> 00:36:02.110 align:start position:0%
data machine learning the financial of
option<00:35:59.420><c> pricing</c><00:35:59.840><c> algorithms</c><00:36:00.410><c> and</c><00:36:00.770><c> HPC</c><00:36:01.700><c> and</c>

00:36:02.110 --> 00:36:02.120 align:start position:0%
option pricing algorithms and HPC and
 

00:36:02.120 --> 00:36:08.200 align:start position:0%
option pricing algorithms and HPC and
here<00:36:02.930><c> we</c><00:36:03.590><c> show</c><00:36:04.090><c> three</c><00:36:05.620><c> micros</c><00:36:06.620><c> for</c><00:36:07.580><c> financial</c>

00:36:08.200 --> 00:36:08.210 align:start position:0%
here we show three micros for financial
 

00:36:08.210 --> 00:36:10.840 align:start position:0%
here we show three micros for financial
option<00:36:08.540><c> pricing</c><00:36:08.960><c> the</c><00:36:09.170><c> Monte</c><00:36:09.590><c> Carlo</c><00:36:09.740><c> box</c><00:36:10.460><c> meter</c>

00:36:10.840 --> 00:36:10.850 align:start position:0%
option pricing the Monte Carlo box meter
 

00:36:10.850 --> 00:36:13.870 align:start position:0%
option pricing the Monte Carlo box meter
and<00:36:11.060><c> black</c><00:36:11.300><c> Scholes</c><00:36:11.570><c> and</c><00:36:12.010><c> they</c><00:36:13.010><c> see</c><00:36:13.070><c> gain</c><00:36:13.670><c> up</c>

00:36:13.870 --> 00:36:13.880 align:start position:0%
and black Scholes and they see gain up
 

00:36:13.880 --> 00:36:19.090 align:start position:0%
and black Scholes and they see gain up
to<00:36:14.000><c> 5x</c><00:36:15.490><c> and</c><00:36:16.990><c> for</c><00:36:17.990><c> example</c><00:36:18.440><c> and</c><00:36:18.680><c> these</c><00:36:18.950><c> are</c>

00:36:19.090 --> 00:36:19.100 align:start position:0%
to 5x and for example and these are
 

00:36:19.100 --> 00:36:23.560 align:start position:0%
to 5x and for example and these are
Gotham<00:36:19.550><c> see</c><00:36:20.060><c> use</c><00:36:20.770><c> cos</c><00:36:21.770><c> sine</c><00:36:22.370><c> log</c><00:36:22.880><c> square</c><00:36:23.390><c> root</c>

00:36:23.560 --> 00:36:23.570 align:start position:0%
Gotham see use cos sine log square root
 

00:36:23.570 --> 00:36:30.550 align:start position:0%
Gotham see use cos sine log square root
power<00:36:24.380><c> exp</c><00:36:25.130><c> etc</c><00:36:26.290><c> that's</c><00:36:27.290><c> why</c><00:36:27.470><c> the</c><00:36:27.530><c> game</c>

00:36:30.550 --> 00:36:30.560 align:start position:0%
 
 

00:36:30.560 --> 00:36:32.060 align:start position:0%
 
JDK<00:36:31.560><c> nine</c>

00:36:32.060 --> 00:36:32.070 align:start position:0%
JDK nine
 

00:36:32.070 --> 00:36:36.950 align:start position:0%
JDK nine
we<00:36:32.400><c> also</c><00:36:33.260><c> worked</c><00:36:34.260><c> on</c><00:36:34.470><c> optimizing</c><00:36:35.250><c> the</c><00:36:35.960><c> key</c>

00:36:36.950 --> 00:36:36.960 align:start position:0%
we also worked on optimizing the key
 

00:36:36.960 --> 00:36:40.600 align:start position:0%
we also worked on optimizing the key
crypto<00:36:37.500><c> algorithms</c><00:36:38.220><c> to</c><00:36:38.760><c> benefit</c><00:36:39.180><c> from</c><00:36:39.360><c> the</c>

00:36:40.600 --> 00:36:40.610 align:start position:0%
crypto algorithms to benefit from the
 

00:36:40.610 --> 00:36:43.160 align:start position:0%
crypto algorithms to benefit from the
internal<00:36:41.610><c> architecture</c><00:36:41.930><c> instruction</c><00:36:42.930><c> so</c>

00:36:43.160 --> 00:36:43.170 align:start position:0%
internal architecture instruction so
 

00:36:43.170 --> 00:36:46.360 align:start position:0%
internal architecture instruction so
Intel<00:36:43.430><c> Architecture</c><00:36:44.430><c> provides</c><00:36:44.880><c> in</c><00:36:45.720><c> yes</c><00:36:45.960><c> and</c><00:36:46.110><c> I</c>

00:36:46.360 --> 00:36:46.370 align:start position:0%
Intel Architecture provides in yes and I
 

00:36:46.370 --> 00:36:51.550 align:start position:0%
Intel Architecture provides in yes and I
catalyst<00:36:47.370><c> multiplied</c><00:36:47.880><c> and</c><00:36:49.940><c> you</c><00:36:50.940><c> know</c><00:36:51.030><c> avx2</c>

00:36:51.550 --> 00:36:51.560 align:start position:0%
catalyst multiplied and you know avx2
 

00:36:51.560 --> 00:36:54.710 align:start position:0%
catalyst multiplied and you know avx2
also<00:36:52.560><c> you</c><00:36:53.160><c> can</c><00:36:53.310><c> do</c><00:36:53.430><c> 64-bit</c><00:36:54.030><c> multiplies</c><00:36:54.450><c> and</c>

00:36:54.710 --> 00:36:54.720 align:start position:0%
also you can do 64-bit multiplies and
 

00:36:54.720 --> 00:36:56.270 align:start position:0%
also you can do 64-bit multiplies and
get<00:36:54.840><c> 128-bit</c><00:36:55.620><c> result</c>

00:36:56.270 --> 00:36:56.280 align:start position:0%
get 128-bit result
 

00:36:56.280 --> 00:37:01.640 align:start position:0%
get 128-bit result
so<00:36:56.760><c> all</c><00:36:57.300><c> that</c><00:36:58.520><c> used</c><00:36:59.520><c> at</c><00:36:59.760><c> the</c><00:37:00.000><c> back</c><00:37:00.270><c> in</c><00:37:00.750><c> the</c><00:37:01.080><c> in</c>

00:37:01.640 --> 00:37:01.650 align:start position:0%
so all that used at the back in the in
 

00:37:01.650 --> 00:37:05.540 align:start position:0%
so all that used at the back in the in
the<00:37:01.800><c> optimized</c><00:37:02.190><c> dubs</c><00:37:02.960><c> benefits</c><00:37:03.960><c> the</c><00:37:04.550><c> the</c>

00:37:05.540 --> 00:37:05.550 align:start position:0%
the optimized dubs benefits the the
 

00:37:05.550 --> 00:37:10.220 align:start position:0%
the optimized dubs benefits the the
crypto<00:37:06.230><c> Java</c><00:37:07.230><c> provides</c><00:37:07.940><c> all</c><00:37:08.940><c> the</c><00:37:09.230><c> crypto</c>

00:37:10.220 --> 00:37:10.230 align:start position:0%
crypto Java provides all the crypto
 

00:37:10.230 --> 00:37:13.610 align:start position:0%
crypto Java provides all the crypto
through<00:37:11.100><c> a</c><00:37:11.130><c> provider</c><00:37:11.610><c> framework</c><00:37:12.380><c> the</c><00:37:13.380><c> Java</c>

00:37:13.610 --> 00:37:13.620 align:start position:0%
through a provider framework the Java
 

00:37:13.620 --> 00:37:16.640 align:start position:0%
through a provider framework the Java
cryptography<00:37:14.220><c> architecture</c><00:37:14.850><c> and</c><00:37:15.410><c> sunjai</c><00:37:16.410><c> C</c>

00:37:16.640 --> 00:37:16.650 align:start position:0%
cryptography architecture and sunjai C
 

00:37:16.650 --> 00:37:18.890 align:start position:0%
cryptography architecture and sunjai C
is<00:37:16.890><c> the</c><00:37:17.100><c> default</c><00:37:17.490><c> provider</c><00:37:17.970><c> so</c><00:37:18.570><c> we</c><00:37:18.720><c> have</c>

00:37:18.890 --> 00:37:18.900 align:start position:0%
is the default provider so we have
 

00:37:18.900 --> 00:37:23.030 align:start position:0%
is the default provider so we have
optimized<00:37:19.380><c> the</c><00:37:19.560><c> Sun</c><00:37:19.890><c> JC</c><00:37:20.780><c> provider</c><00:37:22.040><c> methods</c>

00:37:23.030 --> 00:37:23.040 align:start position:0%
optimized the Sun JC provider methods
 

00:37:23.040 --> 00:37:27.800 align:start position:0%
optimized the Sun JC provider methods
through<00:37:23.490><c> optimized</c><00:37:24.120><c> ups</c><00:37:24.390><c> and</c><00:37:25.700><c> you</c><00:37:26.700><c> can</c><00:37:26.850><c> see</c><00:37:27.120><c> up</c>

00:37:27.800 --> 00:37:27.810 align:start position:0%
through optimized ups and you can see up
 

00:37:27.810 --> 00:37:36.040 align:start position:0%
through optimized ups and you can see up
to<00:37:28.520><c> 10x</c><00:37:29.520><c> gain</c><00:37:30.620><c> for</c><00:37:31.620><c> a</c><00:37:32.600><c> yes</c><00:37:33.600><c> counter</c><00:37:34.140><c> and</c><00:37:34.440><c> a</c><00:37:35.370><c> yes</c>

00:37:36.040 --> 00:37:36.050 align:start position:0%
to 10x gain for a yes counter and a yes
 

00:37:36.050 --> 00:37:42.140 align:start position:0%
to 10x gain for a yes counter and a yes
GCM<00:37:37.050><c> decode</c><00:37:38.270><c> so</c><00:37:39.270><c> the</c><00:37:39.420><c> the</c><00:37:39.720><c> SHA</c><00:37:41.150><c> optimization</c>

00:37:42.140 --> 00:37:42.150 align:start position:0%
GCM decode so the the SHA optimization
 

00:37:42.150 --> 00:37:45.320 align:start position:0%
GCM decode so the the SHA optimization
here<00:37:42.660><c> is</c><00:37:42.930><c> through</c><00:37:43.260><c> the</c><00:37:43.380><c> AVX</c><00:37:43.830><c> instructions</c><00:37:44.330><c> the</c>

00:37:45.320 --> 00:37:45.330 align:start position:0%
here is through the AVX instructions the
 

00:37:45.330 --> 00:37:50.380 align:start position:0%
here is through the AVX instructions the
AES<00:37:45.630><c> counter</c><00:37:46.220><c> and</c><00:37:47.900><c> the</c><00:37:48.900><c> AES</c><00:37:49.260><c> GCM</c><00:37:49.920><c> his</c>

00:37:50.380 --> 00:37:50.390 align:start position:0%
AES counter and the AES GCM his
 

00:37:50.390 --> 00:37:53.120 align:start position:0%
AES counter and the AES GCM his
expressions<00:37:51.390><c> are</c><00:37:51.540><c> three</c><00:37:51.720><c> a</c><00:37:51.750><c> yes</c><00:37:51.990><c> and</c><00:37:52.200><c> I</c><00:37:52.320><c> GCM</c>

00:37:53.120 --> 00:37:53.130 align:start position:0%
expressions are three a yes and I GCM
 

00:37:53.130 --> 00:37:54.800 align:start position:0%
expressions are three a yes and I GCM
also<00:37:53.400><c> has</c><00:37:53.550><c> a</c><00:37:53.580><c> G</c><00:37:53.820><c> hash</c><00:37:54.060><c> component</c><00:37:54.660><c> that</c>

00:37:54.800 --> 00:37:54.810 align:start position:0%
also has a G hash component that
 

00:37:54.810 --> 00:37:56.660 align:start position:0%
also has a G hash component that
benefits<00:37:55.410><c> from</c><00:37:55.620><c> the</c><00:37:55.800><c> catalyst</c><00:37:56.190><c> multiplied</c>

00:37:56.660 --> 00:37:56.670 align:start position:0%
benefits from the catalyst multiplied
 

00:37:56.670 --> 00:38:01.340 align:start position:0%
benefits from the catalyst multiplied
and<00:37:57.000><c> the</c><00:37:57.090><c> crypto</c><00:37:57.960><c> RSA</c><00:37:58.800><c> is</c><00:37:59.040><c> through</c><00:38:00.350><c> 64-bit</c>

00:38:01.340 --> 00:38:01.350 align:start position:0%
and the crypto RSA is through 64-bit
 

00:38:01.350 --> 00:38:05.240 align:start position:0%
and the crypto RSA is through 64-bit
multiply<00:38:02.780><c> giving</c><00:38:03.780><c> a</c><00:38:03.840><c> 128-bit</c><00:38:04.410><c> result</c><00:38:04.920><c> at</c><00:38:05.100><c> the</c>

00:38:05.240 --> 00:38:05.250 align:start position:0%
multiply giving a 128-bit result at the
 

00:38:05.250 --> 00:38:11.450 align:start position:0%
multiply giving a 128-bit result at the
ADC<00:38:05.640><c> X</c><00:38:05.790><c> 80</c><00:38:06.000><c> or</c><00:38:06.180><c> accessories</c><00:38:07.550><c> so</c><00:38:09.500><c> JDK</c><00:38:10.500><c> nine</c><00:38:11.040><c> for</c>

00:38:11.450 --> 00:38:11.460 align:start position:0%
ADC X 80 or accessories so JDK nine for
 

00:38:11.460 --> 00:38:15.310 align:start position:0%
ADC X 80 or accessories so JDK nine for
compression<00:38:12.030><c> acceleration</c><00:38:12.720><c> JDK</c><00:38:13.260><c> nine</c><00:38:13.820><c> also</c>

00:38:15.310 --> 00:38:15.320 align:start position:0%
compression acceleration JDK nine also
 

00:38:15.320 --> 00:38:19.330 align:start position:0%
compression acceleration JDK nine also
added<00:38:16.320><c> a</c><00:38:16.470><c> feature</c><00:38:17.420><c> prior</c><00:38:18.420><c> to</c><00:38:18.660><c> Cherokee</c><00:38:19.110><c> nine</c>

00:38:19.330 --> 00:38:19.340 align:start position:0%
added a feature prior to Cherokee nine
 

00:38:19.340 --> 00:38:23.900 align:start position:0%
added a feature prior to Cherokee nine
interrogate<00:38:20.390><c> the</c><00:38:21.390><c> the</c><00:38:22.380><c> sealy</c><00:38:22.770><c> was</c><00:38:22.980><c> bundled</c><00:38:23.580><c> a</c>

00:38:23.900 --> 00:38:23.910 align:start position:0%
interrogate the the sealy was bundled a
 

00:38:23.910 --> 00:38:27.170 align:start position:0%
interrogate the the sealy was bundled a
lot<00:38:24.480><c> as</c><00:38:24.930><c> part</c><00:38:25.200><c> of</c><00:38:25.290><c> the</c><00:38:25.410><c> lip</c><00:38:25.530><c> zipped</c><00:38:25.770><c> or</c><00:38:25.950><c> so</c><00:38:26.370><c> so</c>

00:38:27.170 --> 00:38:27.180 align:start position:0%
lot as part of the lip zipped or so so
 

00:38:27.180 --> 00:38:31.610 align:start position:0%
lot as part of the lip zipped or so so
now<00:38:27.450><c> in</c><00:38:27.870><c> jdk</c><00:38:28.860><c> nine</c><00:38:29.780><c> uses</c><00:38:30.780><c> the</c><00:38:30.930><c> system</c><00:38:31.110><c> Celebi</c>

00:38:31.610 --> 00:38:31.620 align:start position:0%
now in jdk nine uses the system Celebi
 

00:38:31.620 --> 00:38:33.770 align:start position:0%
now in jdk nine uses the system Celebi
instead<00:38:31.890><c> of</c><00:38:32.010><c> the</c><00:38:32.130><c> bundle</c><00:38:32.520><c> select</c><00:38:33.000><c> so</c><00:38:33.480><c> that</c>

00:38:33.770 --> 00:38:33.780 align:start position:0%
instead of the bundle select so that
 

00:38:33.780 --> 00:38:37.970 align:start position:0%
instead of the bundle select so that
gives<00:38:34.500><c> the</c><00:38:34.710><c> capability</c><00:38:35.460><c> to</c><00:38:35.790><c> the</c><00:38:36.540><c> user</c><00:38:36.980><c> to</c>

00:38:37.970 --> 00:38:37.980 align:start position:0%
gives the capability to the user to
 

00:38:37.980 --> 00:38:40.100 align:start position:0%
gives the capability to the user to
replace<00:38:38.640><c> the</c><00:38:39.090><c> systems</c><00:38:39.450><c> you</c><00:38:39.570><c> live</c><00:38:39.810><c> with</c><00:38:39.990><c> the</c>

00:38:40.100 --> 00:38:40.110 align:start position:0%
replace the systems you live with the
 

00:38:40.110 --> 00:38:41.840 align:start position:0%
replace the systems you live with the
software<00:38:40.500><c> accelerated</c><00:38:41.100><c> were</c><00:38:41.250><c> not</c><00:38:41.460><c> a</c><00:38:41.490><c> hardware</c>

00:38:41.840 --> 00:38:41.850 align:start position:0%
software accelerated were not a hardware
 

00:38:41.850 --> 00:38:42.590 align:start position:0%
software accelerated were not a hardware
accelerated

00:38:42.590 --> 00:38:42.600 align:start position:0%
accelerated
 

00:38:42.600 --> 00:38:47.120 align:start position:0%
accelerated
one<00:38:42.750><c> and</c><00:38:43.170><c> here</c><00:38:43.770><c> I</c><00:38:43.800><c> have</c><00:38:44.100><c> given</c><00:38:44.250><c> two</c><00:38:45.150><c> links</c><00:38:46.130><c> the</c>

00:38:47.120 --> 00:38:47.130 align:start position:0%
one and here I have given two links the
 

00:38:47.130 --> 00:38:48.800 align:start position:0%
one and here I have given two links the
software<00:38:47.460><c> acceleration</c><00:38:47.970><c> can</c><00:38:48.180><c> be</c><00:38:48.240><c> done</c><00:38:48.570><c> either</c>

00:38:48.800 --> 00:38:48.810 align:start position:0%
software acceleration can be done either
 

00:38:48.810 --> 00:38:51.070 align:start position:0%
software acceleration can be done either
through<00:38:48.990><c> the</c><00:38:49.650><c> Intel</c><00:38:49.980><c> performance</c><00:38:50.520><c> primitives</c>

00:38:51.070 --> 00:38:51.080 align:start position:0%
through the Intel performance primitives
 

00:38:51.080 --> 00:38:54.140 align:start position:0%
through the Intel performance primitives
or<00:38:52.080><c> there</c><00:38:52.320><c> is</c><00:38:52.440><c> a</c><00:38:52.470><c> github</c><00:38:52.920><c> project</c><00:38:53.610><c> which</c><00:38:54.000><c> is</c>

00:38:54.140 --> 00:38:54.150 align:start position:0%
or there is a github project which is
 

00:38:54.150 --> 00:38:56.600 align:start position:0%
or there is a github project which is
listed<00:38:54.450><c> in</c><00:38:54.570><c> the</c><00:38:54.660><c> document</c><00:38:55.080><c> here</c><00:38:55.370><c> that</c><00:38:56.370><c> could</c>

00:38:56.600 --> 00:38:56.610 align:start position:0%
listed in the document here that could
 

00:38:56.610 --> 00:38:59.450 align:start position:0%
listed in the document here that could
be<00:38:56.790><c> used</c><00:38:57.030><c> and</c><00:38:57.870><c> for</c><00:38:58.110><c> hardware</c><00:38:58.590><c> acceleration</c><00:38:59.040><c> in</c>

00:38:59.450 --> 00:38:59.460 align:start position:0%
be used and for hardware acceleration in
 

00:38:59.460 --> 00:39:02.960 align:start position:0%
be used and for hardware acceleration in
Intel<00:38:59.880><c> introduced</c><00:39:00.360><c> quick</c><00:39:01.320><c> assist</c><00:39:01.650><c> as</c><00:39:02.430><c> part</c><00:39:02.850><c> of</c>

00:39:02.960 --> 00:39:02.970 align:start position:0%
Intel introduced quick assist as part of
 

00:39:02.970 --> 00:39:06.170 align:start position:0%
Intel introduced quick assist as part of
the<00:39:03.440><c> skylake</c><00:39:04.440><c> the</c><00:39:04.800><c> chipset</c><00:39:05.220><c> Louisburg</c>

00:39:06.170 --> 00:39:06.180 align:start position:0%
the skylake the chipset Louisburg
 

00:39:06.180 --> 00:39:09.010 align:start position:0%
the skylake the chipset Louisburg
chipset<00:39:06.630><c> so</c><00:39:06.990><c> the</c><00:39:07.290><c> quick</c><00:39:07.830><c> assist</c><00:39:08.160><c> also</c><00:39:08.610><c> has</c>

00:39:09.010 --> 00:39:09.020 align:start position:0%
chipset so the quick assist also has
 

00:39:09.020 --> 00:39:12.260 align:start position:0%
chipset so the quick assist also has
compression<00:39:10.020><c> acceleration</c><00:39:11.270><c> capability</c>

00:39:12.260 --> 00:39:12.270 align:start position:0%
compression acceleration capability
 

00:39:12.270 --> 00:39:14.120 align:start position:0%
compression acceleration capability
through<00:39:12.600><c> a</c><00:39:12.630><c> driver</c><00:39:13.020><c> and</c><00:39:13.290><c> the</c><00:39:13.410><c> library</c><00:39:13.740><c> support</c>

00:39:14.120 --> 00:39:14.130 align:start position:0%
through a driver and the library support
 

00:39:14.130 --> 00:39:18.220 align:start position:0%
through a driver and the library support
that<00:39:14.730><c> can</c><00:39:14.910><c> be</c><00:39:14.940><c> found</c><00:39:15.180><c> at</c><00:39:15.360><c> the</c><00:39:15.510><c> link</c><00:39:15.540><c> given</c><00:39:16.320><c> him</c>

00:39:18.220 --> 00:39:18.230 align:start position:0%
that can be found at the link given him
 

00:39:18.230 --> 00:39:22.730 align:start position:0%
that can be found at the link given him
so<00:39:19.280><c> this</c><00:39:20.280><c> this</c><00:39:21.000><c> one</c><00:39:21.320><c> shows</c><00:39:22.320><c> the</c><00:39:22.350><c> performance</c>

00:39:22.730 --> 00:39:22.740 align:start position:0%
so this this one shows the performance
 

00:39:22.740 --> 00:39:24.320 align:start position:0%
so this this one shows the performance
improvement<00:39:23.520><c> through</c><00:39:23.760><c> software</c>

00:39:24.320 --> 00:39:24.330 align:start position:0%
improvement through software
 

00:39:24.330 --> 00:39:28.430 align:start position:0%
improvement through software
acceleration<00:39:25.080><c> I</c><00:39:25.320><c> used</c><00:39:26.600><c> open</c><00:39:27.600><c> source</c><00:39:27.630><c> the</c><00:39:28.230><c> leap</c>

00:39:28.430 --> 00:39:28.440 align:start position:0%
acceleration I used open source the leap
 

00:39:28.440 --> 00:39:31.970 align:start position:0%
acceleration I used open source the leap
from<00:39:29.010><c> the</c><00:39:29.940><c> link</c><00:39:30.090><c> given</c><00:39:30.180><c> here</c><00:39:30.810><c> and</c><00:39:31.140><c> the</c>

00:39:31.970 --> 00:39:31.980 align:start position:0%
from the link given here and the
 

00:39:31.980 --> 00:39:34.670 align:start position:0%
from the link given here and the
performance<00:39:32.550><c> shown</c><00:39:33.060><c> is</c><00:39:33.360><c> for</c><00:39:33.780><c> the</c><00:39:33.990><c> Calgary</c>

00:39:34.670 --> 00:39:34.680 align:start position:0%
performance shown is for the Calgary
 

00:39:34.680 --> 00:39:38.660 align:start position:0%
performance shown is for the Calgary
corpus<00:39:35.310><c> data</c><00:39:35.970><c> set</c><00:39:36.350><c> the</c><00:39:37.350><c> compression</c><00:39:37.680><c> portion</c>

00:39:38.660 --> 00:39:38.670 align:start position:0%
corpus data set the compression portion
 

00:39:38.670 --> 00:39:42.530 align:start position:0%
corpus data set the compression portion
and<00:39:39.980><c> the</c><00:39:40.980><c> only</c><00:39:41.130><c> thing</c><00:39:41.340><c> I</c><00:39:41.490><c> had</c><00:39:41.700><c> to</c><00:39:41.730><c> do</c><00:39:41.970><c> was</c><00:39:42.270><c> to</c>

00:39:42.530 --> 00:39:42.540 align:start position:0%
and the only thing I had to do was to
 

00:39:42.540 --> 00:39:44.690 align:start position:0%
and the only thing I had to do was to
get<00:39:43.170><c> the</c><00:39:43.290><c> source</c><00:39:43.500><c> code</c><00:39:43.590><c> built</c><00:39:43.950><c> a</c><00:39:44.040><c> library</c><00:39:44.190><c> and</c>

00:39:44.690 --> 00:39:44.700 align:start position:0%
get the source code built a library and
 

00:39:44.700 --> 00:39:48.260 align:start position:0%
get the source code built a library and
set<00:39:44.940><c> the</c><00:39:45.330><c> LD</c><00:39:46.230><c> library</c><00:39:46.410><c> path</c><00:39:46.650><c> to</c><00:39:47.250><c> the</c><00:39:48.000><c> built</c>

00:39:48.260 --> 00:39:48.270 align:start position:0%
set the LD library path to the built
 

00:39:48.270 --> 00:39:52.490 align:start position:0%
set the LD library path to the built
library<00:39:48.750><c> and</c><00:39:49.080><c> we</c><00:39:49.380><c> can</c><00:39:49.410><c> see</c><00:39:49.800><c> em</c><00:39:50.490><c> you</c><00:39:50.910><c> know</c><00:39:51.290><c> 1.5</c><00:39:52.290><c> X</c>

00:39:52.490 --> 00:39:52.500 align:start position:0%
library and we can see em you know 1.5 X
 

00:39:52.500 --> 00:39:56.270 align:start position:0%
library and we can see em you know 1.5 X
2<00:39:52.800><c> up</c><00:39:53.490><c> to</c><00:39:53.550><c> 3x</c><00:39:54.030><c> gain</c><00:39:54.300><c> in</c><00:39:55.170><c> compression</c><00:39:55.620><c> so</c><00:39:56.130><c> that</c>

00:39:56.270 --> 00:39:56.280 align:start position:0%
2 up to 3x gain in compression so that
 

00:39:56.280 --> 00:40:02.390 align:start position:0%
2 up to 3x gain in compression so that
was<00:39:56.370><c> very</c><00:39:56.400><c> encouraging</c><00:40:00.260><c> stuff</c><00:40:01.260><c> on</c><00:40:01.470><c> Freebird</c>

00:40:02.390 --> 00:40:02.400 align:start position:0%
was very encouraging stuff on Freebird
 

00:40:02.400 --> 00:40:10.660 align:start position:0%
was very encouraging stuff on Freebird
added<00:40:03.330><c> the</c><00:40:04.460><c> crc32</c><00:40:05.460><c> C</c><00:40:05.790><c> to</c><00:40:06.560><c> Java</c><00:40:07.560><c> 9</c><00:40:07.890><c> and</c><00:40:09.590><c> Intel</c>

00:40:10.660 --> 00:40:10.670 align:start position:0%
added the crc32 C to Java 9 and Intel
 

00:40:10.670 --> 00:40:14.480 align:start position:0%
added the crc32 C to Java 9 and Intel
has<00:40:11.670><c> the</c><00:40:12.060><c> instruction</c><00:40:12.630><c> called</c><00:40:12.950><c> crc32</c><00:40:13.950><c> C</c><00:40:14.250><c> which</c>

00:40:14.480 --> 00:40:14.490 align:start position:0%
has the instruction called crc32 C which
 

00:40:14.490 --> 00:40:19.550 align:start position:0%
has the instruction called crc32 C which
can<00:40:14.700><c> be</c><00:40:14.850><c> used</c><00:40:15.000><c> to</c><00:40:15.150><c> implement</c><00:40:16.220><c> the</c><00:40:17.330><c> crc32</c><00:40:18.330><c> C</c><00:40:18.600><c> of</c>

00:40:19.550 --> 00:40:19.560 align:start position:0%
can be used to implement the crc32 C of
 

00:40:19.560 --> 00:40:23.630 align:start position:0%
can be used to implement the crc32 C of
the<00:40:19.800><c> Java</c><00:40:19.980><c> 9</c><00:40:20.190><c> API</c><00:40:20.990><c> and</c><00:40:21.990><c> this</c><00:40:22.200><c> is</c><00:40:22.380><c> the</c><00:40:22.710><c> basically</c>

00:40:23.630 --> 00:40:23.640 align:start position:0%
the Java 9 API and this is the basically
 

00:40:23.640 --> 00:40:28.820 align:start position:0%
the Java 9 API and this is the basically
the<00:40:23.850><c> I</c><00:40:23.880><c> scuzzy</c><00:40:24.470><c> CRC</c><00:40:25.470><c> polynomial</c><00:40:26.180><c> and</c><00:40:27.800><c> prior</c><00:40:28.800><c> to</c>

00:40:28.820 --> 00:40:28.830 align:start position:0%
the I scuzzy CRC polynomial and prior to
 

00:40:28.830 --> 00:40:32.330 align:start position:0%
the I scuzzy CRC polynomial and prior to
JDK<00:40:29.790><c> 9</c><00:40:30.000><c> and</c><00:40:30.360><c> in</c><00:40:31.350><c> dedicate</c><00:40:31.830><c> as</c><00:40:32.040><c> well</c><00:40:32.220><c> as</c>

00:40:32.330 --> 00:40:32.340 align:start position:0%
JDK 9 and in dedicate as well as
 

00:40:32.340 --> 00:40:34.790 align:start position:0%
JDK 9 and in dedicate as well as
Cherokee<00:40:32.880><c> 9</c><00:40:33.210><c> both</c><00:40:33.540><c> have</c><00:40:33.810><c> the</c><00:40:34.020><c> Joey</c><00:40:34.260><c> tells</c><00:40:34.620><c> if</c>

00:40:34.790 --> 00:40:34.800 align:start position:0%
Cherokee 9 both have the Joey tells if
 

00:40:34.800 --> 00:40:37.820 align:start position:0%
Cherokee 9 both have the Joey tells if
crc32<00:40:35.610><c> which</c><00:40:35.820><c> is</c><00:40:35.970><c> a</c><00:40:36.000><c> different</c><00:40:36.480><c> the</c><00:40:37.320><c> CRC</c>

00:40:37.820 --> 00:40:37.830 align:start position:0%
crc32 which is a different the CRC
 

00:40:37.830 --> 00:40:43.160 align:start position:0%
crc32 which is a different the CRC
polynomial<00:40:39.200><c> and</c><00:40:40.200><c> and</c><00:40:41.130><c> that</c><00:40:41.340><c> was</c><00:40:41.550><c> the</c><00:40:42.300><c> the</c><00:40:42.810><c> JIT</c>

00:40:43.160 --> 00:40:43.170 align:start position:0%
polynomial and and that was the the JIT
 

00:40:43.170 --> 00:40:45.710 align:start position:0%
polynomial and and that was the the JIT
zip<00:40:43.560><c> crc32</c><00:40:44.220><c> is</c><00:40:44.340><c> optimized</c><00:40:44.790><c> using</c><00:40:45.090><c> the</c>

00:40:45.710 --> 00:40:45.720 align:start position:0%
zip crc32 is optimized using the
 

00:40:45.720 --> 00:40:49.730 align:start position:0%
zip crc32 is optimized using the
catalyst<00:40:46.140><c> multiplied</c><00:40:46.670><c> so</c><00:40:47.670><c> the</c><00:40:48.450><c> crc32</c><00:40:49.320><c> see</c><00:40:49.560><c> the</c>

00:40:49.730 --> 00:40:49.740 align:start position:0%
catalyst multiplied so the crc32 see the
 

00:40:49.740 --> 00:40:52.430 align:start position:0%
catalyst multiplied so the crc32 see the
new<00:40:49.920><c> API</c><00:40:50.370><c> gives</c><00:40:51.150><c> an</c><00:40:51.360><c> additional</c><00:40:51.630><c> 2x</c>

00:40:52.430 --> 00:40:52.440 align:start position:0%
new API gives an additional 2x
 

00:40:52.440 --> 00:40:54.770 align:start position:0%
new API gives an additional 2x
performance<00:40:52.880><c> improvement</c><00:40:53.880><c> over</c><00:40:54.750><c> a</c>

00:40:54.770 --> 00:40:54.780 align:start position:0%
performance improvement over a
 

00:40:54.780 --> 00:40:58.760 align:start position:0%
performance improvement over a
previously<00:40:55.290><c> optimized</c><00:40:55.740><c> version</c><00:40:56.190><c> so</c><00:40:57.170><c> and</c><00:40:58.170><c> we</c>

00:40:58.760 --> 00:40:58.770 align:start position:0%
previously optimized version so and we
 

00:40:58.770 --> 00:41:00.410 align:start position:0%
previously optimized version so and we
know<00:40:58.920><c> that</c><00:40:59.100><c> the</c><00:40:59.370><c> checksum</c><00:40:59.760><c> is</c><00:40:59.790><c> extensively</c>

00:41:00.410 --> 00:41:00.420 align:start position:0%
know that the checksum is extensively
 

00:41:00.420 --> 00:41:04.730 align:start position:0%
know that the checksum is extensively
used<00:41:01.460><c> wherever</c><00:41:02.460><c> there</c><00:41:02.760><c> is</c><00:41:02.790><c> a</c><00:41:02.910><c> lot</c><00:41:03.150><c> of</c><00:41:03.270><c> data</c><00:41:03.740><c> for</c>

00:41:04.730 --> 00:41:04.740 align:start position:0%
used wherever there is a lot of data for
 

00:41:04.740 --> 00:41:07.820 align:start position:0%
used wherever there is a lot of data for
example<00:41:04.800><c> Cassandra</c><00:41:05.700><c> HBase</c><00:41:05.850><c> they</c><00:41:06.390><c> all</c><00:41:06.540><c> use</c><00:41:06.830><c> the</c>

00:41:07.820 --> 00:41:07.830 align:start position:0%
example Cassandra HBase they all use the
 

00:41:07.830 --> 00:41:15.590 align:start position:0%
example Cassandra HBase they all use the
checksum<00:41:08.220><c> API</c><00:41:10.280><c> in</c><00:41:14.060><c> lexicographic</c><00:41:15.060><c> array</c>

00:41:15.590 --> 00:41:15.600 align:start position:0%
checksum API in lexicographic array
 

00:41:15.600 --> 00:41:18.770 align:start position:0%
checksum API in lexicographic array
comparison<00:41:16.440><c> was</c><00:41:16.980><c> introduced</c><00:41:17.640><c> by</c><00:41:18.420><c> Paul</c>

00:41:18.770 --> 00:41:18.780 align:start position:0%
comparison was introduced by Paul
 

00:41:18.780 --> 00:41:22.280 align:start position:0%
comparison was introduced by Paul
Sanders<00:41:19.290><c> and</c><00:41:19.650><c> we</c><00:41:20.610><c> worked</c><00:41:20.880><c> closely</c><00:41:21.000><c> with</c><00:41:21.330><c> Paul</c>

00:41:22.280 --> 00:41:22.290 align:start position:0%
Sanders and we worked closely with Paul
 

00:41:22.290 --> 00:41:24.980 align:start position:0%
Sanders and we worked closely with Paul
Sanders<00:41:22.740><c> to</c><00:41:22.980><c> optimize</c><00:41:23.520><c> the</c><00:41:24.360><c> area</c><00:41:24.600><c> compare</c>

00:41:24.980 --> 00:41:24.990 align:start position:0%
Sanders to optimize the area compare
 

00:41:24.990 --> 00:41:27.290 align:start position:0%
Sanders to optimize the area compare
using<00:41:25.350><c> the</c><00:41:25.650><c> same</c><00:41:25.830><c> D</c><00:41:25.980><c> instructions</c><00:41:26.520><c> at</c><00:41:27.060><c> the</c>

00:41:27.290 --> 00:41:27.300 align:start position:0%
using the same D instructions at the
 

00:41:27.300 --> 00:41:32.420 align:start position:0%
using the same D instructions at the
back<00:41:27.920><c> and</c><00:41:29.120><c> array</c><00:41:30.120><c> compare</c><00:41:30.630><c> is</c><00:41:30.800><c> used</c><00:41:31.800><c> in</c>

00:41:32.420 --> 00:41:32.430 align:start position:0%
back and array compare is used in
 

00:41:32.430 --> 00:41:36.200 align:start position:0%
back and array compare is used in
Cassandra<00:41:33.030><c> and</c><00:41:33.180><c> HBase</c><00:41:33.750><c> for</c><00:41:34.590><c> key</c><00:41:35.520><c> comparison</c>

00:41:36.200 --> 00:41:36.210 align:start position:0%
Cassandra and HBase for key comparison
 

00:41:36.210 --> 00:41:40.700 align:start position:0%
Cassandra and HBase for key comparison
so<00:41:37.340><c> for</c><00:41:38.340><c> example</c><00:41:38.700><c> Cassandra</c><00:41:39.150><c> uses</c><00:41:39.780><c> blocks</c><00:41:40.410><c> of</c>

00:41:40.700 --> 00:41:40.710 align:start position:0%
so for example Cassandra uses blocks of
 

00:41:40.710 --> 00:41:49.730 align:start position:0%
so for example Cassandra uses blocks of
size<00:41:41.040><c> 8</c><00:41:41.280><c> K</c><00:41:41.520><c> or</c><00:41:41.850><c> 64</c><00:41:42.690><c> K</c><00:41:43.190><c> so</c><00:41:46.850><c> you</c><00:41:47.850><c> know</c><00:41:48.050><c> and</c><00:41:49.050><c> there</c>

00:41:49.730 --> 00:41:49.740 align:start position:0%
size 8 K or 64 K so you know and there
 

00:41:49.740 --> 00:41:51.500 align:start position:0%
size 8 K or 64 K so you know and there
is<00:41:49.830><c> a</c><00:41:49.860><c> checksum</c><00:41:50.280><c> calculated</c><00:41:50.850><c> for</c><00:41:51.060><c> each</c><00:41:51.090><c> block</c>

00:41:51.500 --> 00:41:51.510 align:start position:0%
is a checksum calculated for each block
 

00:41:51.510 --> 00:41:57.170 align:start position:0%
is a checksum calculated for each block
so<00:41:53.390><c> this</c><00:41:54.390><c> is</c><00:41:55.020><c> going</c><00:41:55.290><c> to</c><00:41:55.380><c> benefit</c><00:41:55.710><c> that</c><00:41:55.950><c> and</c><00:41:56.670><c> we</c>

00:41:57.170 --> 00:41:57.180 align:start position:0%
so this is going to benefit that and we
 

00:41:57.180 --> 00:42:00.830 align:start position:0%
so this is going to benefit that and we
have<00:41:57.390><c> the</c><00:41:57.920><c> underlying</c><00:41:59.420><c> algorithm</c><00:42:00.420><c> a</c><00:42:00.540><c> team</c><00:42:00.720><c> is</c>

00:42:00.830 --> 00:42:00.840 align:start position:0%
have the underlying algorithm a team is
 

00:42:00.840 --> 00:42:06.440 align:start position:0%
have the underlying algorithm a team is
using<00:42:01.320><c> the</c><00:42:01.530><c> similar</c><00:42:02.400><c> instructions</c>

00:42:06.440 --> 00:42:06.450 align:start position:0%
 
 

00:42:06.450 --> 00:42:10.220 align:start position:0%
 
and<00:42:07.099><c> last</c><00:42:08.099><c> but</c><00:42:08.220><c> not</c><00:42:08.430><c> the</c><00:42:08.490><c> least</c><00:42:08.990><c> there</c><00:42:09.990><c> was</c><00:42:10.109><c> an</c>

00:42:10.220 --> 00:42:10.230 align:start position:0%
and last but not the least there was an
 

00:42:10.230 --> 00:42:15.020 align:start position:0%
and last but not the least there was an
MMA<00:42:10.619><c> API</c><00:42:11.069><c> added</c><00:42:11.579><c> by</c><00:42:12.030><c> Joe</c><00:42:12.569><c> Darcy</c><00:42:13.670><c> which</c><00:42:14.670><c> does</c>

00:42:15.020 --> 00:42:15.030 align:start position:0%
MMA API added by Joe Darcy which does
 

00:42:15.030 --> 00:42:21.640 align:start position:0%
MMA API added by Joe Darcy which does
the<00:42:15.359><c> multiplication</c><00:42:16.260><c> and</c><00:42:16.530><c> addition</c><00:42:16.980><c> and</c>

00:42:21.640 --> 00:42:21.650 align:start position:0%
 
 

00:42:21.650 --> 00:42:24.799 align:start position:0%
 
after<00:42:22.650><c> addition</c><00:42:23.640><c> the</c><00:42:23.790><c> truncation</c><00:42:24.180><c> part</c><00:42:24.599><c> has</c>

00:42:24.799 --> 00:42:24.809 align:start position:0%
after addition the truncation part has
 

00:42:24.809 --> 00:42:28.339 align:start position:0%
after addition the truncation part has
turned<00:42:25.079><c> after</c><00:42:26.040><c> addition</c><00:42:26.609><c> so</c><00:42:26.869><c> Java</c><00:42:27.869><c> spec</c><00:42:28.170><c> does</c>

00:42:28.339 --> 00:42:28.349 align:start position:0%
turned after addition so Java spec does
 

00:42:28.349 --> 00:42:32.120 align:start position:0%
turned after addition so Java spec does
not<00:42:28.500><c> allow</c><00:42:28.829><c> us</c><00:42:28.859><c> to</c><00:42:30.079><c> you</c><00:42:31.079><c> know</c><00:42:31.109><c> optimize</c><00:42:31.950><c> if</c>

00:42:32.120 --> 00:42:32.130 align:start position:0%
not allow us to you know optimize if
 

00:42:32.130 --> 00:42:34.329 align:start position:0%
not allow us to you know optimize if
there<00:42:32.280><c> is</c><00:42:32.430><c> a</c><00:42:32.460><c> multiplication</c><00:42:33.119><c> and</c><00:42:33.540><c> addition</c>

00:42:34.329 --> 00:42:34.339 align:start position:0%
there is a multiplication and addition
 

00:42:34.339 --> 00:42:37.970 align:start position:0%
there is a multiplication and addition
we<00:42:35.339><c> can't</c><00:42:35.579><c> optimize</c><00:42:35.940><c> that</c><00:42:36.329><c> using</c><00:42:36.960><c> FME</c><00:42:37.410><c> because</c>

00:42:37.970 --> 00:42:37.980 align:start position:0%
we can't optimize that using FME because
 

00:42:37.980 --> 00:42:41.450 align:start position:0%
we can't optimize that using FME because
it<00:42:38.460><c> expects</c><00:42:39.059><c> us</c><00:42:39.180><c> to</c><00:42:39.210><c> do</c><00:42:39.510><c> the</c><00:42:39.839><c> the</c><00:42:40.140><c> rounding</c><00:42:40.980><c> or</c>

00:42:41.450 --> 00:42:41.460 align:start position:0%
it expects us to do the the rounding or
 

00:42:41.460 --> 00:42:44.559 align:start position:0%
it expects us to do the the rounding or
the<00:42:41.640><c> truncation</c><00:42:41.970><c> part</c><00:42:42.359><c> after</c><00:42:42.960><c> each</c><00:42:43.349><c> operation</c>

00:42:44.559 --> 00:42:44.569 align:start position:0%
the truncation part after each operation
 

00:42:44.569 --> 00:42:48.010 align:start position:0%
the truncation part after each operation
so<00:42:45.569><c> with</c><00:42:46.020><c> this</c><00:42:46.170><c> new</c><00:42:46.380><c> API</c><00:42:46.680><c> now</c><00:42:47.400><c> we</c><00:42:47.460><c> can</c><00:42:47.700><c> optimize</c>

00:42:48.010 --> 00:42:48.020 align:start position:0%
so with this new API now we can optimize
 

00:42:48.020 --> 00:42:51.589 align:start position:0%
so with this new API now we can optimize
FME<00:42:49.020><c> using</c><00:42:49.530><c> the</c><00:42:49.920><c> underlying</c><00:42:50.849><c> architecture</c><00:42:51.119><c> as</c>

00:42:51.589 --> 00:42:51.599 align:start position:0%
FME using the underlying architecture as
 

00:42:51.599 --> 00:42:58.569 align:start position:0%
FME using the underlying architecture as
affirming<00:42:52.020><c> instruction</c><00:42:52.940><c> and</c><00:42:54.140><c> FMA</c><00:42:55.140><c> is</c><00:42:55.400><c> used</c><00:42:56.400><c> in</c>

00:42:58.569 --> 00:42:58.579 align:start position:0%
affirming instruction and FMA is used in
 

00:42:58.579 --> 00:43:02.270 align:start position:0%
affirming instruction and FMA is used in
convolution<00:42:59.579><c> for</c><00:42:59.970><c> image</c><00:43:00.930><c> processing</c><00:43:01.410><c> it</c><00:43:02.160><c> is</c>

00:43:02.270 --> 00:43:02.280 align:start position:0%
convolution for image processing it is
 

00:43:02.280 --> 00:43:07.339 align:start position:0%
convolution for image processing it is
used<00:43:02.579><c> in</c><00:43:02.819><c> matrix</c><00:43:03.210><c> multiplication</c><00:43:04.549><c> in</c><00:43:05.960><c> class</c>

00:43:07.339 --> 00:43:07.349 align:start position:0%
used in matrix multiplication in class
 

00:43:07.349 --> 00:43:12.559 align:start position:0%
used in matrix multiplication in class
algorithms<00:43:07.980><c> so</c><00:43:08.960><c> this</c><00:43:09.960><c> is</c><00:43:10.140><c> beneficial</c><00:43:11.130><c> for</c><00:43:12.030><c> HPC</c>

00:43:12.559 --> 00:43:12.569 align:start position:0%
algorithms so this is beneficial for HPC
 

00:43:12.569 --> 00:43:17.210 align:start position:0%
algorithms so this is beneficial for HPC
and<00:43:12.869><c> machine</c><00:43:13.170><c> learning</c><00:43:14.150><c> so</c><00:43:15.150><c> yeah</c><00:43:16.049><c> I</c><00:43:16.680><c> think</c>

00:43:17.210 --> 00:43:17.220 align:start position:0%
and machine learning so yeah I think
 

00:43:17.220 --> 00:43:22.400 align:start position:0%
and machine learning so yeah I think
what<00:43:18.180><c> others</c><00:43:20.270><c> have</c><00:43:21.270><c> shown</c><00:43:21.869><c> a</c><00:43:21.930><c> lot</c><00:43:22.140><c> of</c><00:43:22.170><c> new</c>

00:43:22.400 --> 00:43:22.410 align:start position:0%
what others have shown a lot of new
 

00:43:22.410 --> 00:43:26.030 align:start position:0%
what others have shown a lot of new
features<00:43:22.589><c> that</c><00:43:23.069><c> are</c><00:43:23.220><c> available</c><00:43:23.339><c> in</c><00:43:23.790><c> j9</c><00:43:25.040><c> so</c>

00:43:26.030 --> 00:43:26.040 align:start position:0%
features that are available in j9 so
 

00:43:26.040 --> 00:43:28.280 align:start position:0%
features that are available in j9 so
please<00:43:26.309><c> download</c><00:43:26.790><c> it</c><00:43:27.150><c> try</c><00:43:27.450><c> it</c><00:43:27.480><c> out</c><00:43:27.720><c> and</c><00:43:27.990><c> give</c>

00:43:28.280 --> 00:43:28.290 align:start position:0%
please download it try it out and give
 

00:43:28.290 --> 00:43:29.809 align:start position:0%
please download it try it out and give
us<00:43:28.319><c> feedback</c><00:43:28.470><c> and</c><00:43:29.190><c> this</c><00:43:29.400><c> is</c><00:43:29.549><c> the</c><00:43:29.670><c> legal</c>

00:43:29.809 --> 00:43:29.819 align:start position:0%
us feedback and this is the legal
 

00:43:29.819 --> 00:43:33.109 align:start position:0%
us feedback and this is the legal
disclaimer<00:43:30.660><c> and</c><00:43:30.990><c> optimization</c><00:43:31.799><c> notice</c><00:43:32.119><c> from</c>

00:43:33.109 --> 00:43:33.119 align:start position:0%
disclaimer and optimization notice from
 

00:43:33.119 --> 00:43:35.190 align:start position:0%
disclaimer and optimization notice from
Intel

00:43:35.190 --> 00:43:35.200 align:start position:0%
Intel
 

00:43:35.200 --> 00:43:40.430 align:start position:0%
Intel
[Applause]

