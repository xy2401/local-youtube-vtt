WEBVTT
Kind: captions
Language: zh-Hans

00:00:00.000 --> 00:00:04.950
我要说说这个秘密

00:00:01.680 --> 00:00:08.400
的历史和悲惨命运是枪

00:00:04.950 --> 00:00:10.740
安全，然后保罗将要讨论

00:00:08.400 --> 00:00:15.320
一些潜在的替代品

00:00:10.740 --> 00:00:17.760
至少有一些使用日光枪的保险柜

00:00:15.320 --> 00:00:21.000
这个房间有几个人

00:00:17.760 --> 00:00:24.119
从来没有写过使用日光枪的代码

00:00:21.000 --> 00:00:27.150
安全哦，超出我的预期

00:00:24.119 --> 00:00:30.330
好吧，我不认为我需要

00:00:27.150 --> 00:00:32.009
向这个听众解释太阳是什么

00:00:30.330 --> 00:00:33.840
杂项不安全是，但你可能会

00:00:32.009 --> 00:00:38.370
对它的一点点感兴趣

00:00:33.840 --> 00:00:40.469
历史，所以这真的意味着

00:00:38.370 --> 00:00:43.379
只是低级VM库界面

00:00:40.469 --> 00:00:46.440
专为在JDK中使用而设计

00:00:43.379 --> 00:00:47.969
你知道这是很普遍的事情

00:00:46.440 --> 00:00:49.920
查找高级语言

00:00:47.969 --> 00:00:51.360
实现了您的实现

00:00:49.920 --> 00:00:53.879
会以某种低级语言来部分了解

00:00:51.360 --> 00:00:58.520
部分地自己，应该没有

00:00:53.879 --> 00:01:01.199
奇怪的是Java有这两个之一

00:00:58.520 --> 00:01:03.600
它起源于我们最初介绍的

00:01:01.199 --> 00:01:05.700
它在1.4版本中用于

00:01:03.600 --> 00:01:08.580
有一些大的改写

00:01:05.700 --> 00:01:10.229
我们可能会想起所有的整行

00:01:08.580 --> 00:01:12.000
反射机械

00:01:10.229 --> 00:01:14.040
以前只是巨大的

00:01:12.000 --> 00:01:15.509
 j'ni代码的数量和非常慢

00:01:14.040 --> 00:01:18.270
有很大的改写

00:01:15.509 --> 00:01:20.280
反射，我们也用它来加快

00:01:18.270 --> 00:01:26.400
序列化，它用于

00:01:20.280 --> 00:01:29.820
新I / O中的直接缓冲区代码

00:01:26.400 --> 00:01:32.880
 Java 5进一步扩展了它

00:01:29.820 --> 00:01:35.820
主要支持jsr 166 Java util 

00:01:32.880 --> 00:01:37.799
并发原子和lakhs一些

00:01:35.820 --> 00:01:39.840
当你有东西的时候

00:01:37.799 --> 00:01:41.820
就像在公园停车一样

00:01:39.840 --> 00:01:44.250
也用于公司的其他事情

00:01:41.820 --> 00:01:46.829
照顾5个人的表现

00:01:44.250 --> 00:01:49.979
关于公司业绩诞生

00:01:46.829 --> 00:01:51.990
缩放的字体缓存和低级x11 

00:01:49.979 --> 00:01:53.880
接口任何x11接口

00:01:51.990 --> 00:01:55.439
对于AWT，您再次知道原来是

00:01:53.880 --> 00:01:57.780
写成一堆j'ni呼吁反对

00:01:55.439 --> 00:02:00.479
 X Lib很明显很慢

00:01:57.780 --> 00:02:02.509
原因，我们一起阅读

00:02:00.479 --> 00:02:05.250
不安全，这是对

00:02:02.509 --> 00:02:07.110
 Java util中还有Java 6的更多内容

00:02:05.250 --> 00:02:11.069
并发的它也被用来加快

00:02:07.110 --> 00:02:13.200
一些加密算法Java 7 

00:02:11.069 --> 00:02:17.310
更多更多的东西

00:02:13.200 --> 00:02:19.860
 java.util并发和其他

00:02:17.310 --> 00:02:21.989
其他其他性能工作Java 

00:02:19.860 --> 00:02:24.540
数学大十进制和大整数分别

00:02:21.989 --> 00:02:26.459
通过使用一些大大加快

00:02:24.540 --> 00:02:30.420
不安全的原语java.lang调用

00:02:26.459 --> 00:02:32.849
方法句柄当然使用了不安全的2d 

00:02:30.420 --> 00:02:35.550
渲染缓冲区，您知道负载

00:02:32.849 --> 00:02:37.319
 JMX的平均值，你知道为什么

00:02:35.550 --> 00:02:39.090
不安全，是的，这很方便

00:02:37.319 --> 00:02:41.160
放它的地方实际上不是

00:02:39.090 --> 00:02:42.810
其实并不安全，也不是一些

00:02:41.160 --> 00:02:45.900
可以肯定地说其他东西

00:02:42.810 --> 00:02:47.849
说实话，用Java哦，哇

00:02:45.900 --> 00:02:50.760
还有更多的工作使用并发的东西

00:02:47.849 --> 00:02:52.769
它也用在Mac OS Objective C中

00:02:50.760 --> 00:02:55.890
桥，我可能错过了一些用途，但

00:02:52.769 --> 00:02:58.110
这是你知道一个小时的reppin 

00:02:55.890 --> 00:02:59.930
通过我们的档案源代码

00:02:58.110 --> 00:03:05.040
仓库来解决

00:02:59.930 --> 00:03:07.950
就像所有api在太阳点星中一样

00:03:05.040 --> 00:03:11.790
打包一些杂项不安全从来没有

00:03:07.950 --> 00:03:14.760
用于外部用途，我们试图

00:03:11.790 --> 00:03:16.739
不鼓励我们拥有此页面

00:03:14.760 --> 00:03:18.739
最初在Java dot Sun上创建

00:03:16.739 --> 00:03:21.810
冷静这是Wayback Machine 

00:03:18.739 --> 00:03:23.250
 1998年2月15日，我认为是

00:03:21.810 --> 00:03:25.170
实际上在那之前创建了一点，但是

00:03:23.250 --> 00:03:27.600
这是最早的快照

00:03:25.170 --> 00:03:29.549
回溯机，但为什么开发人员

00:03:27.600 --> 00:03:32.430
不应该编写调用某些程序的程序

00:03:29.549 --> 00:03:35.489
您知道它们不属于的软件包

00:03:32.430 --> 00:03:36.420
受支持的公共Java接口

00:03:35.489 --> 00:03:40.170
这阻止了人们

00:03:36.420 --> 00:03:42.569
当然不是，我们没有做其他的

00:03:40.170 --> 00:03:44.250
我们试图使其至少

00:03:42.569 --> 00:03:47.130
通过放置一个有点难使用

00:03:44.250 --> 00:03:50.069
障碍，但我们使用的语言

00:03:47.130 --> 00:03:51.930
如果我们现在仍然只有

00:03:50.069 --> 00:03:57.410
我们可以做的很多

00:03:51.930 --> 00:04:00.359
所有人都承认对此负责

00:03:57.410 --> 00:04:03.780
和虚拟机中的硬编码名称

00:04:00.359 --> 00:04:06.810
对，这样可以使它变得很好一点

00:04:03.780 --> 00:04:08.730
很难不安全，你要么

00:04:06.810 --> 00:04:10.650
把外套穿在靴子上

00:04:08.730 --> 00:04:14.160
您现在必须执行以下操作

00:04:10.650 --> 00:04:16.560
著名的黑客，你知道这就是全部

00:04:14.160 --> 00:04:17.820
在堆栈溢出中，您知道要上课

00:04:16.560 --> 00:04:19.799
儿子儿子冈斯小姐的名字保存得到

00:04:17.820 --> 00:04:21.959
声明的字段使其可访问并且

00:04:19.799 --> 00:04:23.430
蓬勃发展，您就参加了众所周知的比赛

00:04:21.959 --> 00:04:24.840
您知道这段代码的成本加上

00:04:23.430 --> 00:04:27.130
编译器当然会警告您

00:04:24.840 --> 00:04:31.380
如果你真的想也可以关闭

00:04:27.130 --> 00:04:34.630
与-XD忽略符号文件为true 

00:04:31.380 --> 00:04:36.100
但是你知道，所以这是

00:04:34.630 --> 00:04:38.980
你知道可以用这个

00:04:36.100 --> 00:04:43.330
外面那是一件坏事，但这是

00:04:38.980 --> 00:04:45.550
在某些方面也是一件好事

00:04:43.330 --> 00:04:47.530
由java.util并发完成的工作

00:04:45.550 --> 00:04:49.180
道格·李（Doug Lee）和他的合作者

00:04:47.530 --> 00:04:51.820
谁在这个房间里，你知道这个

00:04:49.180 --> 00:04:54.070
最初发布之后，哦java.util 

00:04:51.820 --> 00:04:57.460
并发继续向外部发展

00:04:54.070 --> 00:05:00.160
这是可能的，因为儿子想念

00:04:57.460 --> 00:05:03.520
您知道可以使用枪支保险柜

00:05:00.160 --> 00:05:08.050
价格相当低，还可以

00:05:03.520 --> 00:05:09.490
对，因为我们相信道格，所以

00:05:08.050 --> 00:05:17.530
道格可以使用枪支的东西

00:05:09.490 --> 00:05:19.710
在JDK中安全，但实际上有些遗漏

00:05:17.530 --> 00:05:23.040
 JDK之外也使用了枪支保险柜

00:05:19.710 --> 00:05:26.650
它已经被许多项目使用

00:05:23.040 --> 00:05:28.390
去做那些非常

00:05:26.650 --> 00:05:31.540
即使不是完全也很难

00:05:28.390 --> 00:05:34.780
在JDK之外不可能做的是

00:05:31.540 --> 00:05:36.850
这是一件坏事，有点冒险

00:05:34.780 --> 00:05:40.480
以不稳定的业务为基础

00:05:36.850 --> 00:05:43.030
不支持的API，但我认为

00:05:40.480 --> 00:05:45.100
这实际上是一件好事，向您展示

00:05:43.030 --> 00:05:47.650
它向我们展示了如何推动平台

00:05:45.100 --> 00:05:50.110
转发并演示可以做什么

00:05:47.650 --> 00:05:51.910
如果您采用平台就可以完成

00:05:50.110 --> 00:05:55.750
正式定义，然后添加一个

00:05:51.910 --> 00:05:57.250
一点不安全的东西，所以我认为

00:05:55.750 --> 00:05:59.680
对整体来说是健康的

00:05:57.250 --> 00:06:02.320
生态系统，所以您知道，其中一些人

00:05:59.680 --> 00:06:05.200
安全地寄出这把枪是不安全的

00:06:02.320 --> 00:06:07.270
抽象非常不安全的抽象

00:06:05.200 --> 00:06:10.060
用于构建更好，更快，更安全

00:06:07.270 --> 00:06:13.030
抽象也可以

00:06:10.060 --> 00:06:15.460
你知道在某些情况下可以使用

00:06:13.030 --> 00:06:19.330
非正式的感觉

00:06:15.460 --> 00:06:23.140
尽管这一切，专家开发人员现在

00:06:19.330 --> 00:06:26.560
儿子小姐枪支安全已经并继续

00:06:23.140 --> 00:06:30.600
成为一个持续的负担

00:06:26.560 --> 00:06:33.460
负担有很多原因，一个是

00:06:30.600 --> 00:06:36.330
就像任何内部的API一样，否则

00:06:33.460 --> 00:06:40.650
被滥用，被滥用

00:06:36.330 --> 00:06:43.470
截至昨天有379个结果

00:06:40.650 --> 00:06:46.500
在堆栈溢出的人问你知道

00:06:43.470 --> 00:06:48.300
善意但也许天真的开发人员

00:06:46.500 --> 00:06:49.740
问我如何使用发送安全小姐枪

00:06:48.300 --> 00:06:51.630
解决你知道这个问题我听到了

00:06:49.740 --> 00:06:53.009
它真的很酷而且功能强大，我可以

00:06:51.630 --> 00:06:54.300
确实需要东西，所以他们就是你

00:06:53.009 --> 00:06:56.449
知道他们是你知道我们正在滚动

00:06:54.300 --> 00:06:58.919
通过这是相当有趣的

00:06:56.449 --> 00:07:04.229
这是一个例子，我该如何释放

00:06:58.919 --> 00:07:05.669
使用Sun Miss Gun记忆体可以保护您的安全

00:07:04.229 --> 00:07:07.350
知道在这里这又是成语

00:07:05.669 --> 00:07:09.300
如何获得不安全物体

00:07:07.350 --> 00:07:11.190
而且我要赠予一些东西， 

00:07:09.300 --> 00:07:12.930
省略我如何与如何工作

00:07:11.190 --> 00:07:19.070
免费的地址，也许我使用哈希

00:07:12.930 --> 00:07:23.760
我们都知道代码会导致什么

00:07:19.070 --> 00:07:25.889
因此，除了这之外， 

00:07:23.760 --> 00:07:29.100
你知道一个持续不断的花费了我

00:07:25.889 --> 00:07:31.440
整体生态系统是安全的

00:07:29.100 --> 00:07:33.960
问题，您知道Sun是

00:07:31.440 --> 00:07:36.510
那里有枪支保险柜

00:07:33.960 --> 00:07:39.660
容易获得，这很简单

00:07:36.510 --> 00:07:43.320
可通过JDK内部的任何代码访问

00:07:39.660 --> 00:07:45.780
本身就构成了强大的防御

00:07:43.320 --> 00:07:47.370
深入策略更难了

00:07:45.780 --> 00:07:49.349
我们制定的关键策略

00:07:47.370 --> 00:07:51.900
更安全的平台是让您知道

00:07:49.349 --> 00:07:54.449
围绕强大的多个边界

00:07:51.900 --> 00:07:55.800
操作，如果很容易

00:07:54.449 --> 00:07:57.539
弄清楚你知道的如果可以的话

00:07:55.800 --> 00:08:00.030
如果可以的话，可以利用一些

00:07:57.539 --> 00:08:02.699
进入jdk的漏洞

00:08:00.030 --> 00:08:04.020
代码，然后用一些枪支使您安全

00:08:02.699 --> 00:08:09.599
现在拥有您所能拥有的所有力量

00:08:04.020 --> 00:08:12.180
可能想要，还有

00:08:09.599 --> 00:08:13.680
持续的维护负担，因此

00:08:12.180 --> 00:08:15.780
并且承担了维护负担

00:08:13.680 --> 00:08:18.930
不只是那些从事

00:08:15.780 --> 00:08:21.060
 jdk本身也只是一般的你

00:08:18.930 --> 00:08:24.419
了解世界各地的开发商

00:08:21.060 --> 00:08:26.699
许多开发人员最终使用了不安全的

00:08:24.419 --> 00:08:29.070
他们甚至不知道对不起你

00:08:26.699 --> 00:08:30.960
建立您使用的应用程序

00:08:29.070 --> 00:08:33.300
行家，您下载了一半的互联网

00:08:30.960 --> 00:08:35.669
从Maven Central出发，您瞧瞧

00:08:33.300 --> 00:08:38.310
你知道十五个jar文件

00:08:35.669 --> 00:08:39.959
您的实际代码中有一些东西

00:08:38.310 --> 00:08:42.479
使用不安全的东西你甚至都不知道

00:08:39.959 --> 00:08:44.250
现在不安全是不稳定的不受支持

00:08:42.479 --> 00:08:46.110
如果它更改您的应用程序的API 

00:08:44.250 --> 00:08:47.790
当那件事发生时你会崩溃

00:08:46.110 --> 00:08:50.370
你会相信甚至知道

00:08:47.790 --> 00:08:52.560
该jar文件向下15级是

00:08:50.370 --> 00:08:53.400
问题不，你可能不会，谁

00:08:52.560 --> 00:08:53.800
你要怪你吗

00:08:53.400 --> 00:08:55.570
怪

00:08:53.800 --> 00:08:57.220
 Java运行时的实现者

00:08:55.570 --> 00:08:59.769
你不会责怪作者

00:08:57.220 --> 00:09:01.600
该图书馆，因为这种

00:08:59.769 --> 00:09:03.910
使我们这些人

00:09:01.600 --> 00:09:05.740
对JDK的工作相当不情愿

00:09:03.910 --> 00:09:08.170
进化一些你需要的枪支安全

00:09:05.740 --> 00:09:10.480
删除其中不是的东西

00:09:08.170 --> 00:09:11.980
在JDK中不再需要

00:09:10.480 --> 00:09:14.079
改变现有事物的行为

00:09:11.980 --> 00:09:16.029
而且因为我们一直不愿意

00:09:14.079 --> 00:09:17.529
改变它几乎已经成为事实

00:09:16.029 --> 00:09:18.940
标准的东西，然后更多的人

00:09:17.529 --> 00:09:20.910
开始依靠它，我们可以到达您的位置

00:09:18.940 --> 00:09:24.040
陷入这个漩涡

00:09:20.910 --> 00:09:26.950
依赖在哪里冻结和

00:09:24.040 --> 00:09:33.310
我们永远无法发展它，那么我们该如何

00:09:26.950 --> 00:09:36.399
摆脱jdk 9中的漩涡，作为

00:09:33.310 --> 00:09:39.640
项目拼图，我们将最感动

00:09:36.399 --> 00:09:42.660
内部api的内部模块边界

00:09:39.640 --> 00:09:46.600
所以会有很强的封装

00:09:42.660 --> 00:09:48.519
他们大多数人将无法使用

00:09:46.600 --> 00:09:50.019
即使使用设定的可访问技巧

00:09:48.519 --> 00:09:52.269
你甚至无法通过

00:09:50.019 --> 00:09:53.920
反映了一个例外

00:09:52.269 --> 00:09:58.140
如果您愿意使用命令行

00:09:53.920 --> 00:09:58.140
标记，您可以覆盖它，仅此而已

00:09:58.230 --> 00:10:04.899
从长远来看，这就是我们想要的

00:10:00.970 --> 00:10:06.820
用所有内部api做到这一点

00:10:04.899 --> 00:10:09.190
我们想要做的就是枪

00:10:06.820 --> 00:10:11.680
安全，我们已经说了一段时间了

00:10:09.190 --> 00:10:15.339
我们将用sundnes枪来做到这一点

00:10:11.680 --> 00:10:23.709
在jdk 9中安全，实际上从来没有

00:10:15.339 --> 00:10:25.690
是计划，实际计划是这样

00:10:23.709 --> 00:10:29.500
一些枪支安全小姐的命运，这是

00:10:25.690 --> 00:10:33.430
在我上次发布的JEP 260中

00:10:29.500 --> 00:10:35.350
在JDK 9中的一周如下所示

00:10:33.430 --> 00:10:39.220
可通过以下方式在类路径上进行编码

00:10:35.350 --> 00:10:42.850
默认情况下它将可用于编码

00:10:39.220 --> 00:10:44.529
如果您决定放置模块，则可以根据要求

00:10:42.850 --> 00:10:48.430
您可以在模块中声明的代码

00:10:44.529 --> 00:10:49.899
该模块要求的

00:10:48.430 --> 00:10:52.300
包含Sun的模块，此枪支安全

00:10:49.899 --> 00:10:54.970
您可以继续使用它，但是

00:10:52.300 --> 00:10:58.839
您会意识到您正在使用它

00:10:54.970 --> 00:11:01.329
不会进一步增强和结束

00:10:58.839 --> 00:11:03.250
时间广泛使用的功能和Sun 

00:11:01.329 --> 00:11:06.160
这个枪支保险箱将被迁移到更安全

00:11:03.250 --> 00:11:07.520
支持api，其中Paul会支持

00:11:06.160 --> 00:11:09.860
讨论

00:11:07.520 --> 00:11:11.900
片刻，所以这里是这里

00:11:09.860 --> 00:11:14.990
发生什么情况的秘诀

00:11:11.900 --> 00:11:18.770
在特定的JDK发布调用中发布

00:11:14.990 --> 00:11:20.510
如果支持的替换项，则为n 

00:11:18.770 --> 00:11:22.790
以前存在不安全的方法

00:11:20.510 --> 00:11:24.680
释放并减去1，我们将

00:11:22.790 --> 00:11:28.220
封装或删除该方法

00:11:24.680 --> 00:11:30.200
发布n，所以您对

00:11:28.220 --> 00:11:32.450
一个版本，以找出是否

00:11:30.200 --> 00:11:35.270
存在一种方法的替代品

00:11:32.450 --> 00:11:39.320
发布我们将弃用那种不安全的方法

00:11:35.270 --> 00:11:40.670
该版本中的方法，我们可能

00:11:39.320 --> 00:11:42.470
甚至以新的偶数弃用了它

00:11:40.670 --> 00:11:45.430
更强的弃用弃用标签

00:11:42.470 --> 00:11:45.430
更加烦人

00:11:45.460 --> 00:11:51.680
一次替换所有不安全的方法

00:11:48.110 --> 00:11:56.150
在以前的版本中存在一些遗漏

00:11:51.680 --> 00:11:58.040
枪支保险柜将被移除，所以您

00:11:56.150 --> 00:12:02.180
知道是否有价值

00:11:58.040 --> 00:12:04.580
的n个是10 11或12我将离开

00:12:02.180 --> 00:12:07.730
到将来不会尝试的井

00:12:04.580 --> 00:12:10.550
预测在那里前进

00:12:07.730 --> 00:12:12.710
独木舟，我们将继续过渡

00:12:10.550 --> 00:12:14.840
内置在床上的内部api 

00:12:12.710 --> 00:12:16.520
与一个对不起马库斯的vm 

00:12:14.840 --> 00:12:20.720
将是中的其他硬编码名称

00:12:16.520 --> 00:12:23.810
虚拟机，我们将它们放在包中

00:12:20.720 --> 00:12:28.880
其名称以JDK为前缀的

00:12:23.810 --> 00:12:30.170
内部这些将封装您

00:12:28.880 --> 00:12:34.340
将无法达到他们的

00:12:30.170 --> 00:12:37.010
内部结构，命令行标记除外

00:12:34.340 --> 00:12:39.320
那就是我们想要的故意

00:12:37.010 --> 00:12:42.650
希望人们知道他们何时

00:12:39.320 --> 00:12:44.420
使用这个我们希望人们

00:12:42.650 --> 00:12:46.760
当他们使用它时要负责任

00:12:44.420 --> 00:12:48.320
强制责任，我们可以，我们只能

00:12:46.760 --> 00:12:49.880
鼓励它，但我们至少可以使

00:12:48.320 --> 00:12:51.740
每个人都是专家

00:12:49.880 --> 00:12:53.240
开发人员或不知道他们何时

00:12:51.740 --> 00:12:56.090
在这支枪上使用它是安全的，所以

00:12:53.240 --> 00:12:59.180
命令行标志是设计使然

00:12:56.090 --> 00:13:03.710
有点难看，但仅需一秒钟

00:12:59.180 --> 00:13:05.450
杰里米（O） 

00:13:03.710 --> 00:13:07.190
这些这些内部的东西将是

00:13:05.450 --> 00:13:09.950
不支持他们将受到

00:13:07.190 --> 00:13:13.920
更改，恕不另行通知，但您会

00:13:09.950 --> 00:13:16.730
能够向他们提问

00:13:13.920 --> 00:13:16.730
德语

00:13:46.790 --> 00:13:58.920
对其他建议持开放态度，就是这样

00:13:55.500 --> 00:14:01.110
这真的是要明确

00:13:58.920 --> 00:14:05.550
并确保人们了解

00:14:01.110 --> 00:14:15.420
当他们盖房子或

00:14:05.550 --> 00:14:16.980
摩天大楼在流沙好，如果

00:14:15.420 --> 00:14:18.150
他们是如果他们正在运行代码

00:14:16.980 --> 00:14:19.200
例如，您知道他们在DevOps或

00:14:18.150 --> 00:14:20.610
好东西，他们可能

00:14:19.200 --> 00:14:24.630
负责保留该代码

00:14:20.610 --> 00:14:26.280
跑步，这可以说是一件好事

00:14:24.630 --> 00:14:28.800
让他们知道他们什么时候

00:14:26.280 --> 00:14:31.200
插入并放入下一个JDK更新

00:14:28.800 --> 00:14:43.470
释放可能会破裂的东西

00:14:31.200 --> 00:14:44.370
也许就是为什么我们在各个地方使用它

00:14:43.470 --> 00:14:52.740
在JRuby中

00:14:44.370 --> 00:14:54.750
但是我们一直但是你知道我

00:14:52.740 --> 00:14:56.930
了解您知道用户不知道

00:14:54.750 --> 00:14:58.710
关于这个，但我认为是

00:14:56.930 --> 00:15:02.600
不负责任的是

00:14:58.710 --> 00:15:02.600
图书馆还没有

00:15:40.320 --> 00:16:42.190
但这都是一个回购协议，因此很容易

00:15:42.579 --> 00:16:44.070
变化不是开源的，所以我们已经

00:16:42.190 --> 00:16:46.750
考虑过各种选择

00:16:44.070 --> 00:16:48.490
当然可以接受其他建议

00:16:46.750 --> 00:16:50.410
意思是当明显的人很好时

00:16:48.490 --> 00:16:52.390
每次都打印警告

00:16:50.410 --> 00:16:54.850
历史上我们从未印刷过

00:16:52.390 --> 00:16:57.160
从来没有运行时打印警告和

00:16:54.850 --> 00:17:03.120
这样，总会有一个

00:16:57.160 --> 00:17:07.020
对此有一定的抵抗力

00:17:03.120 --> 00:17:07.020
还有更多的问题悬崖

00:17:19.760 --> 00:17:26.390
所以基本上就是接受我们

00:17:22.260 --> 00:17:26.390
被困在漩涡n'中并完成

00:17:59.730 --> 00:18:03.730
是的

00:18:00.880 --> 00:18:06.160
保罗有话要说

00:18:03.730 --> 00:18:07.990
还有我们要去工作坊

00:18:06.160 --> 00:18:10.570
在此之后的时间，我们可以进入

00:18:07.990 --> 00:18:12.760
现在让我更深入

00:18:10.570 --> 00:18:14.170
只是留下你的注意，是的

00:18:12.760 --> 00:18:18.570
你不应该相信我说的一句话

00:18:14.170 --> 00:18:18.570
我没拍那些照片谢谢

