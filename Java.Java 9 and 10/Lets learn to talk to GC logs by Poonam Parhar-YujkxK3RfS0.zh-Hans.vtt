WEBVTT
Kind: captions
Language: zh-Hans

00:00:00.200 --> 00:00:06.569
 [音乐] 

00:00:03.259 --> 00:00:10.620
好的，大家好

00:00:06.569 --> 00:00:13.139
来参加本次会议的我是Poonam 

00:00:10.620 --> 00:00:15.630
我从事JVM维持工程

00:00:13.139 --> 00:00:17.850
甲骨文小组，在本次会议中，我们

00:00:15.630 --> 00:00:21.539
要去你知道谈论一些

00:00:17.850 --> 00:00:27.390
 Mac即将推出的新GC日志记录

00:00:21.539 --> 00:00:30.900
在Java 9中，强制性规定

00:00:27.390 --> 00:00:34.500
我必须包括新的GC登录

00:00:30.900 --> 00:00:38.719
 Java 9这是一个巨大的巨大变化

00:00:34.500 --> 00:00:43.500
更改Java 9和

00:00:38.719 --> 00:00:47.070
实际上，这是另一个重大变化

00:00:43.500 --> 00:00:50.809
 JDK 9中引入了

00:00:47.070 --> 00:00:53.670
是统一的JVM日志记录框架，因此

00:00:50.809 --> 00:00:57.750
 GC日志记录将使用此框架

00:00:53.670 --> 00:01:01.260
 JDK 9中的新框架来记录其

00:00:57.750 --> 00:01:03.860
消息，在本次会议中，我们

00:01:01.260 --> 00:01:08.280
谈谈你知道一点

00:01:03.860 --> 00:01:10.680
统一的JVM框架GC记录新的

00:01:08.280 --> 00:01:14.130
我们需要使用的命令行选项

00:01:10.680 --> 00:01:17.939
你知道看到等效

00:01:14.130 --> 00:01:22.110
我们将要使用的信息

00:01:17.939 --> 00:01:27.479
参见带有早期JDK版本的

00:01:22.110 --> 00:01:30.150
 GC记录选项，这就是我要去的地方

00:01:27.479 --> 00:01:35.850
谈论统一的JVM日志记录

00:01:30.150 --> 00:01:39.000
 Java 9中的新框架GC代码如何

00:01:35.850 --> 00:01:42.479
 DC日志记录代码被重新实现以使用

00:01:39.000 --> 00:01:45.420
该框架的新命令行选项- 

00:01:42.479 --> 00:01:50.250
 X日志实际上是由

00:01:45.420 --> 00:01:53.040
框架和GC代码引入了新的

00:01:50.250 --> 00:01:56.399
与该命令一起使用的标签

00:01:53.040 --> 00:01:59.250
行选项，您知道什么

00:01:56.399 --> 00:02:01.170
需要考虑的因素

00:01:59.250 --> 00:02:04.130
此命令行选项以获取

00:02:01.170 --> 00:02:07.920
 GC日志中的等效信息

00:02:04.130 --> 00:02:11.550
旧的GC日志记录标志发生了什么

00:02:07.920 --> 00:02:14.090
我们先看再看一些

00:02:11.550 --> 00:02:14.090
的例子

00:02:14.950 --> 00:02:23.170
统一的jvn日志记录框架JEP 1:58 

00:02:19.060 --> 00:02:25.510
谁是添加此新提案的提案

00:02:23.170 --> 00:02:30.370
增强功能以​​添加此新框架

00:02:25.510 --> 00:02:34.690
到JDK 9中，它添加了一个新的命令行

00:02:30.370 --> 00:02:39.130
选项减去X日志，并在那里

00:02:34.690 --> 00:02:43.540
你知道一些标签加进去吗

00:02:39.130 --> 00:02:45.460
您知道的JVM的各个部分

00:02:43.540 --> 00:02:48.550
代表JVM的不同部分

00:02:45.460 --> 00:02:52.180
可以与此命令一起使用

00:02:48.550 --> 00:02:55.360
行选项可微调信息

00:02:52.180 --> 00:02:59.890
我们想在日志中看到

00:02:55.360 --> 00:03:03.190
示例GC类JFR模块等，以及

00:02:59.890 --> 00:03:06.700
这些日志消息来自

00:03:03.190 --> 00:03:09.340
您知道的所有框架

00:03:06.700 --> 00:03:12.310
使用该框架的系统，我们可以

00:03:09.340 --> 00:03:16.900
使用标签对这些日志进行分类

00:03:12.310 --> 00:03:21.250
消息，可以使用

00:03:16.900 --> 00:03:25.770
标记与减号X的组合会记录您

00:03:21.250 --> 00:03:29.560
知道一组标签组合

00:03:25.770 --> 00:03:33.240
真正选择我们想要的消息

00:03:29.560 --> 00:03:38.230
以查看我们的日志记录和所有登录信息

00:03:33.240 --> 00:03:40.810
你能知道在不同层次完成吗

00:03:38.230 --> 00:03:44.459
有一定程度的定义错误

00:03:40.810 --> 00:03:48.640
警告信息debug.trace和开发

00:03:44.459 --> 00:03:50.380
开发非产品账单

00:03:48.640 --> 00:03:54.520
其他级别在

00:03:50.380 --> 00:03:57.490
产品帐单和消息可以是

00:03:54.520 --> 00:04:01.090
装饰，这意味着有

00:03:57.490 --> 00:04:04.720
某些可用的装饰器可以

00:04:01.090 --> 00:04:07.420
习惯于了解信息

00:04:04.720 --> 00:04:12.850
您可以将其他信息添加到

00:04:07.420 --> 00:04:15.640
日志消息和默认

00:04:12.850 --> 00:04:18.070
装饰器的正常运行时间级别和类型

00:04:15.640 --> 00:04:19.930
但您当然可以更改

00:04:18.070 --> 00:04:22.690
您想看到的装饰

00:04:19.930 --> 00:04:25.150
您的日志消息是可能的

00:04:22.690 --> 00:04:25.810
将日志重定向到文件，所以所有这些

00:04:25.150 --> 00:04:31.290
是

00:04:25.810 --> 00:04:31.290
在统一的JVM日志记录框架下

00:04:31.860 --> 00:04:40.690
 help选项可以与减号X一起使用

00:04:36.880 --> 00:04:44.080
日志，它没有为您提供任何信息

00:04:40.690 --> 00:04:46.840
夫妇的完整语法

00:04:44.080 --> 00:04:49.480
命令如何使用它

00:04:46.840 --> 00:04:50.530
可以与-X一起使用的选项

00:04:49.480 --> 00:04:53.290
日志

00:04:50.530 --> 00:04:58.270
 -这里要注意的最重要的事情

00:04:53.290 --> 00:05:01.930
你知道的是什么

00:04:58.270 --> 00:05:05.919
之后-X log：什么是

00:05:01.930 --> 00:05:08.680
标签和级别的组合

00:05:05.919 --> 00:05:11.290
我们希望看到即将到来的信息

00:05:08.680 --> 00:05:17.050
从不同的你知道

00:05:11.290 --> 00:05:20.680
 JVM，并注意星号或

00:05:17.050 --> 00:05:23.979
 d标签后面的星号将其设置

00:05:20.680 --> 00:05:26.530
表示通配符，表示II 

00:05:23.979 --> 00:05:29.320
想查看日志消息

00:05:26.530 --> 00:05:32.050
与这些你知道超级相关

00:05:29.320 --> 00:05:35.350
我在其上指定的标签集

00:05:32.050 --> 00:05:37.900
该命令以及-X锁定命令

00:05:35.350 --> 00:05:41.860
所以我想看看

00:05:37.900 --> 00:05:44.530
至少使用这些标签集进行了标签，但

00:05:41.860 --> 00:05:49.870
他们可能会让您知道其他类型的

00:05:44.530 --> 00:05:52.570
与他们紧密联系，让我们

00:05:49.870 --> 00:05:57.160
快速查看其他可以

00:05:52.570 --> 00:05:59.860
与-X日志一起使用可以更改

00:05:57.160 --> 00:06:02.410
使用输出您知道的输出

00:05:59.860 --> 00:06:05.440
选择是否要

00:06:02.410 --> 00:06:08.979
重定向到STD出所有您想要的

00:06:05.440 --> 00:06:11.830
将其重定向到装饰文件

00:06:08.979 --> 00:06:15.160
时间正常运行时间不适

00:06:11.830 --> 00:06:18.370
装饰器增强或添加

00:06:15.160 --> 00:06:22.030
信息到我的日志消息

00:06:18.370 --> 00:06:24.370
表示正常运行时间级别和标记

00:06:22.030 --> 00:06:27.750
默认启用，但您可以将其删除

00:06:24.370 --> 00:06:33.639
或更改它们以及输出选项

00:06:27.750 --> 00:06:36.700
基本上是-您知道-是启用还是

00:06:33.639 --> 00:06:39.980
禁用日志文件轮换或

00:06:36.700 --> 00:06:41.900
指定您有多少个日志文件

00:06:39.980 --> 00:06:45.020
要旋转的大小是多少

00:06:41.900 --> 00:06:49.760
您将成为的每个文件日志文件

00:06:45.020 --> 00:06:54.320
现在对统一的DC记录感兴趣，因此

00:06:49.760 --> 00:06:58.310
 Jeff 271的GC记录功能

00:06:54.320 --> 00:07:03.250
阅读也已重新实现以使用

00:06:58.310 --> 00:07:07.190
 GC使用的新框架-X日志

00:07:03.250 --> 00:07:09.620
命令，GC是要使用的主要标签

00:07:07.190 --> 00:07:14.390
用于-X日志，还有其他

00:07:09.620 --> 00:07:16.940
您也知道可以使用的标签

00:07:14.390 --> 00:07:20.990
调整我们正在使用的GC日志记录

00:07:16.940 --> 00:07:24.320
对旧的GC记录感兴趣

00:07:20.990 --> 00:07:30.080
选项可能会吓到

00:07:24.320 --> 00:07:32.090
已在JDK 9中删除，所以您知道我们是否

00:07:30.080 --> 00:07:34.700
是启动脚本还是您的命令行

00:07:32.090 --> 00:07:37.580
选项正在使用旧的GC日志记录

00:07:34.700 --> 00:07:44.360
选项，它们将必须在

00:07:37.580 --> 00:07:47.840
您开始使用Java 9 8 1 4 5 0 9- 

00:07:44.360 --> 00:07:52.760
是您知道的错误ID 

00:07:47.840 --> 00:07:54.740
此增强功能已集成到

00:07:52.760 --> 00:07:57.800
存储库，所以如果您对

00:07:54.740 --> 00:08:01.610
看看当时的具体变化

00:07:57.800 --> 00:08:04.820
为您所知de belem结束了GC 

00:08:01.610 --> 00:08:07.570
记录您可以看到所做的更改

00:08:04.820 --> 00:08:07.570
在这个错误下

00:08:08.540 --> 00:08:16.550
让我们看一下示例输出

00:08:13.370 --> 00:08:19.880
您将看到-X log GC 

00:08:16.550 --> 00:08:24.470
所以在这里我指定我想

00:08:19.880 --> 00:08:29.270
查看消息记录以下消息

00:08:24.470 --> 00:08:33.740
用GC标签标记并记录在

00:08:29.270 --> 00:08:37.250
级别跟踪，如果我们指定一个

00:08:33.740 --> 00:08:40.250
特定级别以下的消息

00:08:37.250 --> 00:08:43.160
水平也是你知道插槽，所以在这个

00:08:40.250 --> 00:08:47.030
用跟踪调试记录的案例消息

00:08:43.160 --> 00:08:49.390
信息错误和警告将获取日志，因此

00:08:47.030 --> 00:08:52.460
在输出中，我们可以看到所有

00:08:49.390 --> 00:08:53.900
用GC标记的消息是

00:08:52.460 --> 00:08:56.210
打印出来

00:08:53.900 --> 00:08:59.510
前三列来自

00:08:56.210 --> 00:09:02.480
日志记录框架，它们正常运行

00:08:59.510 --> 00:09:05.330
级别和标签，其余的

00:09:02.480 --> 00:09:12.290
消息来自GC代码吗

00:09:05.330 --> 00:09:15.710
您会看到您知道JVM中的代码

00:09:12.290 --> 00:09:17.510
我发生在旧的GC记录标志上

00:09:15.710 --> 00:09:20.000
说他们将被删除

00:09:17.510 --> 00:09:24.290
实际上它们已经在

00:09:20.000 --> 00:09:28.160
存储库，但我们仍然保留三个

00:09:24.290 --> 00:09:32.390
 GC引脚GC中最受欢迎的标志

00:09:28.160 --> 00:09:35.270
详细信息和X log GC，它们不会

00:09:32.390 --> 00:09:37.610
向您显示旧的输出，但它们有

00:09:35.270 --> 00:09:40.220
在内部映射到

00:09:37.610 --> 00:09:42.320
对应于X日志配置，因此

00:09:40.220 --> 00:09:44.180
你至少知道这些标志

00:09:42.320 --> 00:09:46.630
您不必更新您的发布

00:09:44.180 --> 00:09:50.150
脚本和命令行选项

00:09:46.630 --> 00:09:53.420
他们将显示新的输出，但他们

00:09:50.150 --> 00:09:56.120
仍然很荣幸你不会得到你

00:09:53.420 --> 00:10:00.050
知道错误消息，并且JVM 

00:09:56.120 --> 00:10:02.810
本身不启动这些标志是

00:10:00.050 --> 00:10:08.510
已过时，将在

00:10:02.810 --> 00:10:10.760
未来的Java版本，所以总共有43个GC 

00:10:08.510 --> 00:10:13.089
记录标志与此删除

00:10:10.760 --> 00:10:13.089
更改

00:10:14.839 --> 00:10:21.740
这是GC日志记录代码的示例

00:10:17.839 --> 00:10:24.290
更改伦顿作为免费的一部分

00:10:21.740 --> 00:10:27.920
实施，因此，如果您之前看到过， 

00:10:24.290 --> 00:10:29.810
支撑了GC详细信息，我们拥有了GC日志

00:10:27.920 --> 00:10:35.120
或TTY和

00:10:29.810 --> 00:10:37.910
它调用了函数print发送来

00:10:35.120 --> 00:10:41.450
将消息记录到控制台或

00:10:37.910 --> 00:10:45.170
到日志文件已被替换

00:10:41.450 --> 00:10:48.020
与日志下划线级别宏，那

00:10:45.170 --> 00:10:50.630
宏在日志记录中实现

00:10:48.020 --> 00:10:54.790
框架，所以此宏有什么作用

00:10:50.630 --> 00:10:59.029
你知道有不同的宏

00:10:54.790 --> 00:11:02.240
对于每个级别，在这里

00:10:59.029 --> 00:11:05.970
告诉我要记录此消息

00:11:02.240 --> 00:11:09.660
这是堆使用情况转换的详细信息

00:11:05.970 --> 00:11:12.060
与标签GC和

00:11:09.660 --> 00:11:15.779
堆，我想将此消息记录在

00:11:12.060 --> 00:11:20.459
信息级别，因此如果有人在命令

00:11:15.779 --> 00:11:22.740
该行使用X log：GC加热量等于

00:11:20.459 --> 00:11:25.319
信息，或者您不必说信息

00:11:22.740 --> 00:11:29.399
因为那是默认级别

00:11:25.319 --> 00:11:32.310
此消息将再次打印

00:11:29.399 --> 00:11:34.980
例如我们曾经有一个标志粉红色

00:11:32.310 --> 00:11:38.879
自适应尺寸政策

00:11:34.980 --> 00:11:43.259
删除并在跟踪记录消息

00:11:38.879 --> 00:11:50.639
使用标签GC和L go记录液位

00:11:43.259 --> 00:11:55.019
和消息保持不变

00:11:50.639 --> 00:11:57.660
例子，所以我尝试使用

00:11:55.019 --> 00:12:01.680
 g1垃圾收集器是默认的

00:11:57.660 --> 00:12:04.680
在JDK 9中，所以我的示例使用G 1 

00:12:01.680 --> 00:12:07.860
使用JDK 8，您知道默认值

00:12:04.680 --> 00:12:11.339
 JDK 9中的收集器，因此此示例使用

00:12:07.860 --> 00:12:12.870
 JDK 9和

00:12:11.339 --> 00:12:16.319
下一张幻灯片，我将向您展示示例

00:12:12.870 --> 00:12:18.689
使用G 1的JDK 9输出

00:12:16.319 --> 00:12:21.870
收集器，所以在这里我们可以看到这是

00:12:18.689 --> 00:12:25.529
您使用打印GC知道的常规输出

00:12:21.870 --> 00:12:31.740
获得等效信息的选项

00:12:25.529 --> 00:12:36.110
 Java 9中的新日志记录框架

00:12:31.740 --> 00:12:40.350
我们将使用减X对数冒号GC 

00:12:36.110 --> 00:12:43.379
因此，如果您正在使用打印GC，请打印GC 

00:12:40.350 --> 00:12:47.069
将被替换为减号X log： 

00:12:43.379 --> 00:12:51.480
 GC它给出相同的相同水平

00:12:47.069 --> 00:12:53.309
信息，你知道

00:12:51.480 --> 00:12:55.410
其他信息来自

00:12:53.309 --> 00:12:57.420
这些是标签的框架， 

00:12:55.410 --> 00:13:02.699
这是这个事件的时间

00:12:57.420 --> 00:13:06.959
发生，然后GC详细信息再次与

00:13:02.699 --> 00:13:08.790
带有JDK 8的g1收集器，这是

00:13:06.959 --> 00:13:12.620
我们过去获取的信息

00:13:08.790 --> 00:13:17.850
 Java 9中的GC详细信息，我们需要使用

00:13:12.620 --> 00:13:20.180
减X log：GC星号，所以G由GC星号表示

00:13:17.850 --> 00:13:24.450
或星号

00:13:20.180 --> 00:13:29.400
请记录以下消息

00:13:24.450 --> 00:13:32.550
它们中最少的GC标签，并且它们可能具有

00:13:29.400 --> 00:13:37.800
与他们相关的其他标签，如果

00:13:32.550 --> 00:13:41.430
您会在GC详细信息中注意到

00:13:37.800 --> 00:13:44.700
 g1你是你可以看到失败的水平

00:13:41.430 --> 00:13:48.660
您在这里了解的信息D日志记录

00:13:44.700 --> 00:13:51.930
消息给我们有关的信息

00:13:48.660 --> 00:13:56.760
关于g1的不同相位

00:13:51.930 --> 00:14:01.680
垃圾收集器，但带有X日志：GC 

00:13:56.760 --> 00:14:04.530
明星，信息丢失，所以

00:14:01.680 --> 00:14:09.690
其他收藏家，你会得到相同的

00:14:04.530 --> 00:14:12.660
 -X日志的信息级别： 

00:14:09.690 --> 00:14:16.890
 GC星，但带有g1 

00:14:12.660 --> 00:14:19.170
我们需要使用GC加相等于

00:14:16.890 --> 00:14:21.510
调试以获得阶段级别

00:14:19.170 --> 00:14:24.600
信息，因为该信息是

00:14:21.510 --> 00:14:28.200
在GC和阶段磁贴下记录和

00:14:24.600 --> 00:14:32.670
记录在调试级别，以便

00:14:28.200 --> 00:14:36.360
你知道细节水平分开

00:14:32.670 --> 00:14:39.330
来自GC star，您需要指定

00:14:36.360 --> 00:14:46.170
其他标签以获取更多详细信息

00:14:39.330 --> 00:14:49.920
级别信息打印堆添加GC 

00:14:46.170 --> 00:14:53.490
你知道用哪个我们可以得到

00:14:49.920 --> 00:14:57.420
堆使用之前或之后的堆使用详细信息

00:14:53.490 --> 00:15:02.670
我们将使用Java 9中的GC 

00:14:57.420 --> 00:15:06.420
 -X日志：GC +堆等于调试

00:15:02.670 --> 00:15:10.430
这意味着您知道的日志会打印日志

00:15:06.420 --> 00:15:13.830
标有GC和堆的消息，以及

00:15:10.430 --> 00:15:22.260
你知道在调试级别打印

00:15:13.830 --> 00:15:24.690
在调试级别，我们可以选择打印GC 

00:15:22.260 --> 00:15:28.980
应用程序并发时间打印GC 

00:15:24.690 --> 00:15:30.750
应用程序在JDK 8中的停止时间

00:15:28.980 --> 00:15:34.350
用于打印应用程序

00:15:30.750 --> 00:15:38.610
运行时和应用程序停止时间

00:15:34.350 --> 00:15:42.390
在JDK 9中，我们将使用-xlab：安全

00:15:38.610 --> 00:15:44.670
要点，因此使用此标签

00:15:42.390 --> 00:15:46.590
运行时间和应用程序停止时间

00:15:44.670 --> 00:15:49.290
相同类型的信息

00:15:46.590 --> 00:15:55.650
信息将与

00:15:49.290 --> 00:15:59.520
安全点标签打印适应尺寸

00:15:55.650 --> 00:16:03.120
您知道的策略会打印堆

00:15:59.520 --> 00:16:06.750
大小和收藏集

00:16:03.120 --> 00:16:12.420
正在由施工决策

00:16:06.750 --> 00:16:16.860
 Java 9中的收集器，我们使用GC +算法

00:16:12.420 --> 00:16:21.050
星等于痕迹，所以GC，我去

00:16:16.860 --> 00:16:28.260
尝试一下，再加上其他一些您知道的标签

00:16:21.050 --> 00:16:34.820
跟踪级别的消息继续

00:16:28.260 --> 00:16:38.370
用于打印

00:16:34.820 --> 00:16:41.280
幸存者人数是年龄分布

00:16:38.370 --> 00:16:45.120
幸存者中幸存物体的数量

00:16:41.280 --> 00:16:49.380
空格，因此对于该选项，我们将

00:16:45.120 --> 00:16:54.240
用负X log GC + h替换它是

00:16:49.380 --> 00:16:56.400
等于跟踪，所以它使您知道

00:16:54.240 --> 00:17:01.710
甚至文字也一样

00:16:56.400 --> 00:17:04.949
相同的信息，所以我们减去X 

00:17:01.710 --> 00:17:10.319
我们拥有的日志GC选项

00:17:04.949 --> 00:17:13.709
减去X log GC选项，直到JDK 9和

00:17:10.319 --> 00:17:17.850
这用于您知道重定向

00:17:13.709 --> 00:17:20.790
将输出记录到文件中，我们可以

00:17:17.850 --> 00:17:25.310
使用选项UGC日志文件旋转到

00:17:20.790 --> 00:17:28.350
启用日志文件旋转和

00:17:25.310 --> 00:17:32.060
这些选择几乎不可能

00:17:28.350 --> 00:17:34.710
用于启用旋转文件

00:17:32.060 --> 00:17:38.820
记录文件旋转并重定向

00:17:34.710 --> 00:17:42.300
即使输出到文件

00:17:38.820 --> 00:17:44.910
 JDK 9中仍然存在该选项

00:17:42.300 --> 00:17:47.490
减去x log GC，其余的

00:17:44.910 --> 00:17:51.000
选项将被删除

00:17:47.490 --> 00:17:54.060
和X log VC将映射为减X 

00:17:51.000 --> 00:17:57.690
您知道的日志GC：文件等于

00:17:54.060 --> 00:18:02.460
文件名，所以我们可以这样

00:17:57.690 --> 00:18:06.060
将输出重定向到文件，我们

00:18:02.460 --> 00:18:08.510
可以启用文件旋转并指定

00:18:06.060 --> 00:18:14.700
我们想要和使用的文件数以及

00:18:08.510 --> 00:18:17.670
每个文件的大小应该是多少

00:18:14.700 --> 00:18:20.820
其他有用的类型以获得更多您知道的

00:18:17.670 --> 00:18:26.540
有关减号X的信息和详细信息

00:18:20.820 --> 00:18:29.970
如果使用减X log则执行log命令：GC 

00:18:26.540 --> 00:18:35.040
星号等于迹线，以便打印

00:18:29.970 --> 00:18:38.190
您知道的最低级别的信息

00:18:35.040 --> 00:18:43.260
 GC日志记录信息，因此我们可以跟踪

00:18:38.190 --> 00:18:46.230
指定的最详细的级别

00:18:43.260 --> 00:18:48.960
和GC星号表示包括所有GC 

00:18:46.230 --> 00:18:51.900
相关选项所有与GC相关的标签

00:18:48.960 --> 00:18:53.790
在输出中，这样可以为您提供

00:18:51.900 --> 00:18:57.060
了解最低的所有GC日志记录

00:18:53.790 --> 00:18:59.760
水平和负X log全部等于

00:18:57.060 --> 00:19:02.520
跟踪，这意味着我想查看GC日志

00:18:59.760 --> 00:19:05.310
来自JVM的所有子系统

00:19:02.520 --> 00:19:08.340
最低的水平，有可能

00:19:05.310 --> 00:19:11.370
一起禁用日志记录

00:19:08.340 --> 00:19:14.940
带有X日志的禁用选项和

00:19:11.370 --> 00:19:18.240
正如我所说的，“帮助”提供了

00:19:14.940 --> 00:19:22.140
负号X的技术感和示例感

00:19:18.240 --> 00:19:25.350
 log命令和减x日志记录为

00:19:22.140 --> 00:19:27.420
等于跟踪实际上使您知道

00:19:25.350 --> 00:19:30.180
启用日志记录跟踪

00:19:27.420 --> 00:19:33.830
框架本身，因此它提供了

00:19:30.180 --> 00:19:37.680
有关可用类型的信息

00:19:33.830 --> 00:19:39.240
由系统实现的是什么

00:19:37.680 --> 00:19:41.580
可用标签集是什么

00:19:39.240 --> 00:19:45.210
可用的级别和装饰器，以及

00:19:41.580 --> 00:19:51.840
您的活动配置是什么

00:19:45.210 --> 00:19:55.740
知道可用税有可能

00:19:51.840 --> 00:20:00.380
动态配置减X日志是的

00:19:55.740 --> 00:20:02.480
我们可以使用J命令还是and bean 

00:20:00.380 --> 00:20:08.930
 -您知道动态更改

00:20:02.480 --> 00:20:12.980
如果使用VM，则减X日志的选项

00:20:08.930 --> 00:20:15.950
用J命令进行点日志诊断

00:20:12.980 --> 00:20:18.530
命令显示您知道什么是

00:20:15.950 --> 00:20:23.210
可用于配置的选项

00:20:18.530 --> 00:20:25.880
 -X log和的参数

00:20:23.210 --> 00:20:28.370
在此示例中，我使用的是

00:20:25.880 --> 00:20:30.890
等于GC星，这意味着我是

00:20:28.370 --> 00:20:37.730
更改可用于的标签

00:20:30.890 --> 00:20:42.020
 -X日志-GC星号，所以我放在一起

00:20:37.730 --> 00:20:46.490
你知道这些马s映射着旧的

00:20:42.020 --> 00:20:50.480
 GC标志-新的X日志配置

00:20:46.490 --> 00:20:53.300
可以给我们相当于GC的

00:20:50.480 --> 00:20:56.000
记录我们用来获取的信息

00:20:53.300 --> 00:20:58.640
与旧的标志，例如打印

00:20:56.000 --> 00:21:02.780
 g1打印堆区域是

00:20:58.640 --> 00:21:06.620
在JDK 9中的JDK 8中可用，我们可以使用X 

00:21:02.780 --> 00:21:08.450
日志：GC +区域等于跟踪，因此

00:21:06.620 --> 00:21:10.460
通过查看代码可以知道

00:21:08.450 --> 00:21:14.030
运行一些测试，我准备了这些

00:21:10.460 --> 00:21:18.020
表将旧选项映射到

00:21:14.030 --> 00:21:20.990
新的配置，所以也许你知道你

00:21:18.020 --> 00:21:23.120
以后可以参考这些表

00:21:20.990 --> 00:21:27.340
您正在将应用程序迁移到

00:21:23.120 --> 00:21:32.390
 Java 9和更新启动脚本

00:21:27.340 --> 00:21:35.730
所以我结束了你

00:21:32.390 --> 00:21:41.930
知道这个演讲非常感谢你

00:21:35.730 --> 00:21:41.930
 [掌声] 

00:21:45.529 --> 00:22:11.340
这个我会上传到某个地方

00:21:48.690 --> 00:22:15.559
这将是公开可用的，是的

00:22:11.340 --> 00:22:31.380
不知道是的

00:22:15.559 --> 00:22:34.080
是的，我想我们是用

00:22:31.380 --> 00:22:36.299
三个受欢迎的国旗先生，但它会

00:22:34.080 --> 00:22:39.450
你知道很多多余的东西吗

00:22:36.299 --> 00:22:48.029
代码并将其维护在代码库中

00:22:39.450 --> 00:23:00.110
本来很难，所以他们

00:22:48.029 --> 00:23:00.110
不要做任何事情，至少可以使JVM崩溃

00:23:05.149 --> 00:23:12.240
但是一旦知道，就让用户

00:23:08.250 --> 00:23:15.029
发射时有垃圾

00:23:12.240 --> 00:23:17.929
脚本，他们将永远不会删除它

00:23:15.029 --> 00:23:17.929
你懂

00:23:36.510 --> 00:23:43.240
是的，但是你知道在

00:23:39.700 --> 00:23:45.790
支持我已经看到你

00:23:43.240 --> 00:23:49.420
认为人们不在午餐

00:23:45.790 --> 00:23:50.830
控制他们的启动脚本，如果您

00:23:49.420 --> 00:23:53.110
看一下你知道的一些

00:23:50.830 --> 00:23:55.240
启动脚本，它们到处都是垃圾

00:23:53.110 --> 00:23:57.670
你知道人们不知道那些人在哪里

00:23:55.240 --> 00:24:00.430
选项来自，如果这是

00:23:57.670 --> 00:24:06.970
允许你拥有所有的垃圾

00:24:00.430 --> 00:24:09.910
累积在启动文件中，以便

00:24:06.970 --> 00:24:11.800
这将迫使他们将其删除

00:24:09.910 --> 00:24:13.930
是否应将垃圾清除到任何地方

00:24:11.800 --> 00:24:16.240
将来，如果我们现在复制它并删除

00:24:13.930 --> 00:24:30.970
将来无论如何你都会

00:24:16.240 --> 00:24:33.940
必须将其正确删除， 

00:24:30.970 --> 00:24:36.370
无论如何，我们说这些

00:24:33.940 --> 00:24:40.320
不受支持，我们不在乎您

00:24:36.370 --> 00:24:42.940
知道我们可以随时删除它们

00:24:40.320 --> 00:24:45.840
回到你的问题

00:24:42.940 --> 00:24:48.850
什么也不做，只是让他们在那里

00:24:45.840 --> 00:24:51.160
如果我们让他们在那里，你会

00:24:48.850 --> 00:24:52.990
遇到一些故障时期待输出

00:24:51.160 --> 00:24:55.840
发生你会说哦，我有这些

00:24:52.990 --> 00:24:57.880
为什么我看不到日志文件的选项

00:24:55.840 --> 00:25:01.720
为什么我看不到日志

00:24:57.880 --> 00:25:03.730
文件你不会知道，因为那为什么

00:25:01.720 --> 00:25:10.420
你不是告诉我我必须删除

00:25:03.730 --> 00:25:12.940
没有人读警告，他们只是

00:25:10.420 --> 00:25:14.860
你知道处理器启动了你吗

00:25:12.940 --> 00:25:17.640
从不读我正在打印的内容

00:25:14.860 --> 00:25:17.640
在控制台上

00:25:30.460 --> 00:25:33.690
解码变化

00:25:44.350 --> 00:25:47.039
是的

00:26:02.410 --> 00:26:11.530
所以这是一个宏，您知道我们有日志

00:26:07.460 --> 00:26:17.500
下划线信息日志和分数跟踪

00:26:11.530 --> 00:26:20.600
这些是封装的宏， 

00:26:17.500 --> 00:26:24.470
该宏定义为log下划线

00:26:20.600 --> 00:26:27.470
然后实际上吹入的水平

00:26:24.470 --> 00:26:36.650
每个级别都有这些不同的宏

00:26:27.470 --> 00:26:40.060
对，所以这个宏正在接受

00:26:36.650 --> 00:26:42.560
标签，然后调用一个函数

00:26:40.060 --> 00:26:44.980
通过它，你知道具体的

00:26:42.560 --> 00:26:48.730
该级别的功能和

00:26:44.980 --> 00:26:48.730
封装此消息

00:27:02.930 --> 00:27:12.450
是的，所以这个宏会

00:27:07.560 --> 00:27:14.610
实际检查您是否知道此级别是

00:27:12.450 --> 00:27:25.980
启用或未启用，然后记录

00:27:14.610 --> 00:27:31.230
消息，是的，所以此宏日志

00:27:25.980 --> 00:27:33.150
下划线跟踪实际上将检查

00:27:31.230 --> 00:27:36.260
这实际上扩展为代码， 

00:27:33.150 --> 00:27:36.260
这是一张支票

00:27:51.260 --> 00:28:17.720
我不知道对不对

00:28:06.200 --> 00:28:20.980
好的，好的，好的，我会得到

00:28:17.720 --> 00:28:25.610
与您联系，是的，肯定的

00:28:20.980 --> 00:28:28.250
所以是的，准备好要知道

00:28:25.610 --> 00:28:29.350
 Java 9中这种新的日志记录格式

00:28:28.250 --> 00:28:35.880
谢谢

00:28:29.350 --> 00:28:35.880
 [音乐] 

