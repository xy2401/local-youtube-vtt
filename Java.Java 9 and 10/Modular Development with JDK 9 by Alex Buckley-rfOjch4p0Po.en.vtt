WEBVTT
Kind: captions
Language: en

00:00:00.200 --> 00:00:03.700 align:start position:0%
 
[Music]

00:00:03.700 --> 00:00:03.710 align:start position:0%
[Music]
 

00:00:03.710 --> 00:00:09.290 align:start position:0%
[Music]
okay<00:00:05.450><c> hi</c><00:00:06.450><c> everyone</c><00:00:07.400><c> my</c><00:00:08.400><c> name</c><00:00:08.610><c> is</c><00:00:08.639><c> Alex</c><00:00:08.849><c> Buckley</c>

00:00:09.290 --> 00:00:09.300 align:start position:0%
okay hi everyone my name is Alex Buckley
 

00:00:09.300 --> 00:00:11.360 align:start position:0%
okay hi everyone my name is Alex Buckley
I<00:00:09.480><c> work</c><00:00:09.840><c> in</c><00:00:10.080><c> the</c><00:00:10.200><c> Java</c><00:00:10.440><c> platform</c><00:00:10.650><c> group</c><00:00:11.130><c> at</c>

00:00:11.360 --> 00:00:11.370 align:start position:0%
I work in the Java platform group at
 

00:00:11.370 --> 00:00:14.690 align:start position:0%
I work in the Java platform group at
Oracle<00:00:12.000><c> this</c><00:00:12.719><c> is</c><00:00:12.990><c> modular</c><00:00:13.950><c> development</c><00:00:14.070><c> with</c>

00:00:14.690 --> 00:00:14.700 align:start position:0%
Oracle this is modular development with
 

00:00:14.700 --> 00:00:18.099 align:start position:0%
Oracle this is modular development with
JDK<00:00:15.089><c> 9</c><00:00:15.269><c> thank</c><00:00:15.750><c> you</c><00:00:15.809><c> for</c><00:00:15.929><c> coming</c>

00:00:18.099 --> 00:00:18.109 align:start position:0%
JDK 9 thank you for coming
 

00:00:18.109 --> 00:00:21.140 align:start position:0%
JDK 9 thank you for coming
Jenny<00:00:19.109><c> k-9</c><00:00:19.470><c> is</c><00:00:19.800><c> fast</c><00:00:20.310><c> approaching</c><00:00:20.550><c> and</c>

00:00:21.140 --> 00:00:21.150 align:start position:0%
Jenny k-9 is fast approaching and
 

00:00:21.150 --> 00:00:23.960 align:start position:0%
Jenny k-9 is fast approaching and
there's<00:00:21.480><c> a</c><00:00:21.539><c> lot</c><00:00:21.810><c> in</c><00:00:22.050><c> it</c><00:00:22.310><c> some</c><00:00:23.310><c> of</c><00:00:23.430><c> the</c><00:00:23.550><c> features</c>

00:00:23.960 --> 00:00:23.970 align:start position:0%
there's a lot in it some of the features
 

00:00:23.970 --> 00:00:26.179 align:start position:0%
there's a lot in it some of the features
are<00:00:24.240><c> performance</c><00:00:25.230><c> improvements</c><00:00:25.830><c> such</c><00:00:26.130><c> as</c>

00:00:26.179 --> 00:00:26.189 align:start position:0%
are performance improvements such as
 

00:00:26.189 --> 00:00:27.320 align:start position:0%
are performance improvements such as
compact<00:00:26.609><c> strings</c>

00:00:27.320 --> 00:00:27.330 align:start position:0%
compact strings
 

00:00:27.330 --> 00:00:30.980 align:start position:0%
compact strings
some<00:00:28.320><c> are</c><00:00:28.590><c> tooling</c><00:00:29.220><c> improvements</c><00:00:30.029><c> like</c><00:00:30.240><c> the</c>

00:00:30.980 --> 00:00:30.990 align:start position:0%
some are tooling improvements like the
 

00:00:30.990 --> 00:00:33.470 align:start position:0%
some are tooling improvements like the
search<00:00:31.260><c> box</c><00:00:31.590><c> in</c><00:00:31.949><c> Java</c><00:00:32.250><c> doc</c><00:00:32.520><c> has</c><00:00:33.000><c> anyone</c><00:00:33.270><c> seen</c>

00:00:33.470 --> 00:00:33.480 align:start position:0%
search box in Java doc has anyone seen
 

00:00:33.480 --> 00:00:35.510 align:start position:0%
search box in Java doc has anyone seen
that<00:00:33.630><c> by</c><00:00:33.780><c> the</c><00:00:33.840><c> way</c><00:00:34.020><c> into</c><00:00:34.860><c> the</c><00:00:34.920><c> canine</c><00:00:35.250><c> the</c>

00:00:35.510 --> 00:00:35.520 align:start position:0%
that by the way into the canine the
 

00:00:35.520 --> 00:00:39.979 align:start position:0%
that by the way into the canine the
search<00:00:35.700><c> box</c><00:00:35.969><c> some</c><00:00:36.890><c> it's</c><00:00:37.890><c> pretty</c><00:00:38.219><c> cool</c><00:00:38.780><c> the</c><00:00:39.780><c> J</c>

00:00:39.979 --> 00:00:39.989 align:start position:0%
search box some it's pretty cool the J
 

00:00:39.989 --> 00:00:43.610 align:start position:0%
search box some it's pretty cool the J
shell<00:00:40.230><c> tool</c><00:00:40.550><c> does</c><00:00:41.550><c> anyone</c><00:00:41.760><c> tried</c><00:00:42.000><c> that</c><00:00:42.620><c> good</c>

00:00:43.610 --> 00:00:43.620 align:start position:0%
shell tool does anyone tried that good
 

00:00:43.620 --> 00:00:44.869 align:start position:0%
shell tool does anyone tried that good
yep

00:00:44.869 --> 00:00:44.879 align:start position:0%
yep
 

00:00:44.879 --> 00:00:47.420 align:start position:0%
yep
and<00:00:45.329><c> of</c><00:00:45.989><c> course</c><00:00:46.200><c> there</c><00:00:46.350><c> are</c><00:00:46.410><c> lots</c><00:00:46.590><c> of</c><00:00:46.649><c> updates</c>

00:00:47.420 --> 00:00:47.430 align:start position:0%
and of course there are lots of updates
 

00:00:47.430 --> 00:00:49.850 align:start position:0%
and of course there are lots of updates
to<00:00:47.670><c> existing</c><00:00:47.789><c> features</c><00:00:48.660><c> such</c><00:00:48.989><c> as</c><00:00:49.200><c> support</c><00:00:49.620><c> for</c>

00:00:49.850 --> 00:00:49.860 align:start position:0%
to existing features such as support for
 

00:00:49.860 --> 00:00:53.270 align:start position:0%
to existing features such as support for
Unicode<00:00:50.190><c> 8</c><00:00:51.260><c> but</c><00:00:52.260><c> the</c><00:00:52.320><c> main</c><00:00:52.469><c> feature</c><00:00:52.680><c> and</c><00:00:53.129><c> the</c>

00:00:53.270 --> 00:00:53.280 align:start position:0%
Unicode 8 but the main feature and the
 

00:00:53.280 --> 00:00:55.580 align:start position:0%
Unicode 8 but the main feature and the
one<00:00:53.460><c> that's</c><00:00:53.699><c> taken</c><00:00:54.120><c> some</c><00:00:54.690><c> years</c><00:00:55.050><c> to</c><00:00:55.110><c> come</c><00:00:55.410><c> to</c>

00:00:55.580 --> 00:00:55.590 align:start position:0%
one that's taken some years to come to
 

00:00:55.590 --> 00:01:00.139 align:start position:0%
one that's taken some years to come to
fruition<00:00:55.800><c> is</c><00:00:56.340><c> the</c><00:00:56.789><c> module</c><00:00:57.120><c> system</c><00:00:58.820><c> the</c><00:00:59.820><c> module</c>

00:01:00.139 --> 00:01:00.149 align:start position:0%
fruition is the module system the module
 

00:01:00.149 --> 00:01:02.180 align:start position:0%
fruition is the module system the module
system<00:01:00.510><c> is</c><00:01:00.600><c> a</c><00:01:00.629><c> big</c><00:01:00.840><c> deal</c><00:01:01.079><c> because</c><00:01:01.440><c> it</c><00:01:01.710><c> enables</c>

00:01:02.180 --> 00:01:02.190 align:start position:0%
system is a big deal because it enables
 

00:01:02.190 --> 00:01:05.840 align:start position:0%
system is a big deal because it enables
modular<00:01:02.760><c> development</c><00:01:03.359><c> all</c><00:01:03.719><c> the</c><00:01:03.780><c> way</c><00:01:04.199><c> down</c><00:01:04.850><c> the</c>

00:01:05.840 --> 00:01:05.850 align:start position:0%
modular development all the way down the
 

00:01:05.850 --> 00:01:07.940 align:start position:0%
modular development all the way down the
module<00:01:06.150><c> system</c><00:01:06.299><c> is</c><00:01:06.659><c> built</c><00:01:07.110><c> into</c><00:01:07.380><c> the</c><00:01:07.740><c> Java</c>

00:01:07.940 --> 00:01:07.950 align:start position:0%
module system is built into the Java
 

00:01:07.950 --> 00:01:10.039 align:start position:0%
module system is built into the Java
language<00:01:08.189><c> and</c><00:01:08.790><c> the</c><00:01:09.000><c> Java</c><00:01:09.240><c> Virtual</c><00:01:09.479><c> Machine</c>

00:01:10.039 --> 00:01:10.049 align:start position:0%
language and the Java Virtual Machine
 

00:01:10.049 --> 00:01:12.440 align:start position:0%
language and the Java Virtual Machine
so<00:01:10.710><c> that</c><00:01:10.860><c> the</c><00:01:10.950><c> applications</c><00:01:11.640><c> you</c><00:01:11.820><c> write</c><00:01:12.060><c> and</c>

00:01:12.440 --> 00:01:12.450 align:start position:0%
so that the applications you write and
 

00:01:12.450 --> 00:01:15.080 align:start position:0%
so that the applications you write and
the<00:01:12.900><c> libraries</c><00:01:13.320><c> you</c><00:01:13.350><c> consume</c><00:01:14.040><c> and</c><00:01:14.340><c> even</c><00:01:15.000><c> the</c>

00:01:15.080 --> 00:01:15.090 align:start position:0%
the libraries you consume and even the
 

00:01:15.090 --> 00:01:17.810 align:start position:0%
the libraries you consume and even the
JDK<00:01:15.540><c> itself</c><00:01:16.020><c> can</c><00:01:16.770><c> all</c><00:01:16.890><c> be</c><00:01:17.040><c> developed</c><00:01:17.580><c> and</c>

00:01:17.810 --> 00:01:17.820 align:start position:0%
JDK itself can all be developed and
 

00:01:17.820 --> 00:01:20.600 align:start position:0%
JDK itself can all be developed and
tested<00:01:18.299><c> and</c><00:01:18.780><c> packaged</c><00:01:19.470><c> and</c><00:01:19.740><c> deployed</c><00:01:20.250><c> as</c>

00:01:20.600 --> 00:01:20.610 align:start position:0%
tested and packaged and deployed as
 

00:01:20.610 --> 00:01:23.740 align:start position:0%
tested and packaged and deployed as
modules<00:01:21.240><c> managed</c><00:01:21.990><c> by</c><00:01:22.170><c> the</c><00:01:22.229><c> module</c><00:01:22.619><c> system</c>

00:01:23.740 --> 00:01:23.750 align:start position:0%
modules managed by the module system
 

00:01:23.750 --> 00:01:27.320 align:start position:0%
modules managed by the module system
making<00:01:24.750><c> everyone</c><00:01:25.140><c> play</c><00:01:25.590><c> by</c><00:01:25.950><c> the</c><00:01:26.009><c> same</c><00:01:26.430><c> modular</c>

00:01:27.320 --> 00:01:27.330 align:start position:0%
making everyone play by the same modular
 

00:01:27.330 --> 00:01:30.319 align:start position:0%
making everyone play by the same modular
rules<00:01:27.799><c> has</c><00:01:28.799><c> great</c><00:01:29.070><c> benefits</c><00:01:29.579><c> for</c><00:01:29.820><c> reliability</c>

00:01:30.319 --> 00:01:30.329 align:start position:0%
rules has great benefits for reliability
 

00:01:30.329 --> 00:01:33.410 align:start position:0%
rules has great benefits for reliability
maintainability<00:01:31.259><c> and</c><00:01:32.159><c> security</c><00:01:32.820><c> as</c><00:01:33.060><c> we'll</c>

00:01:33.410 --> 00:01:33.420 align:start position:0%
maintainability and security as we'll
 

00:01:33.420 --> 00:01:38.420 align:start position:0%
maintainability and security as we'll
see<00:01:33.689><c> in</c><00:01:33.930><c> the</c><00:01:34.079><c> rest</c><00:01:34.259><c> of</c><00:01:34.439><c> this</c><00:01:34.560><c> talk</c><00:01:36.680><c> so</c><00:01:37.680><c> with</c><00:01:38.280><c> the</c>

00:01:38.420 --> 00:01:38.430 align:start position:0%
see in the rest of this talk so with the
 

00:01:38.430 --> 00:01:40.550 align:start position:0%
see in the rest of this talk so with the
theme<00:01:38.640><c> of</c><00:01:38.670><c> modules</c><00:01:39.570><c> all</c><00:01:39.810><c> the</c><00:01:39.930><c> way</c><00:01:40.020><c> down</c><00:01:40.259><c> in</c>

00:01:40.550 --> 00:01:40.560 align:start position:0%
theme of modules all the way down in
 

00:01:40.560 --> 00:01:43.190 align:start position:0%
theme of modules all the way down in
mind<00:01:40.829><c> this</c><00:01:41.280><c> talk</c><00:01:41.520><c> has</c><00:01:41.700><c> three</c><00:01:41.939><c> parts</c><00:01:42.240><c> the</c><00:01:43.170><c> first</c>

00:01:43.190 --> 00:01:43.200 align:start position:0%
mind this talk has three parts the first
 

00:01:43.200 --> 00:01:45.020 align:start position:0%
mind this talk has three parts the first
part<00:01:43.500><c> explains</c><00:01:44.070><c> how</c><00:01:44.280><c> modules</c><00:01:44.759><c> are</c><00:01:45.000><c> a</c>

00:01:45.020 --> 00:01:45.030 align:start position:0%
part explains how modules are a
 

00:01:45.030 --> 00:01:47.840 align:start position:0%
part explains how modules are a
long-overdue<00:01:45.710><c> building</c><00:01:46.710><c> block</c><00:01:46.979><c> in</c><00:01:47.280><c> the</c>

00:01:47.840 --> 00:01:47.850 align:start position:0%
long-overdue building block in the
 

00:01:47.850 --> 00:01:51.620 align:start position:0%
long-overdue building block in the
structure<00:01:48.390><c> of</c><00:01:48.540><c> application</c><00:01:49.320><c> code</c><00:01:50.270><c> the</c><00:01:51.270><c> second</c>

00:01:51.620 --> 00:01:51.630 align:start position:0%
structure of application code the second
 

00:01:51.630 --> 00:01:53.749 align:start position:0%
structure of application code the second
part<00:01:51.810><c> is</c><00:01:51.990><c> about</c><00:01:52.140><c> how</c><00:01:52.439><c> applications</c><00:01:53.280><c> and</c><00:01:53.640><c> the</c>

00:01:53.749 --> 00:01:53.759 align:start position:0%
part is about how applications and the
 

00:01:53.759 --> 00:01:56.480 align:start position:0%
part is about how applications and the
libraries<00:01:54.240><c> data</c><00:01:54.450><c> pendin</c><00:01:54.990><c> can</c><00:01:55.740><c> migrate</c><00:01:56.189><c> to</c>

00:01:56.480 --> 00:01:56.490 align:start position:0%
libraries data pendin can migrate to
 

00:01:56.490 --> 00:01:58.910 align:start position:0%
libraries data pendin can migrate to
modules<00:01:56.960><c> more</c><00:01:57.960><c> broadly</c><00:01:58.200><c> it's</c><00:01:58.469><c> about</c><00:01:58.649><c> how</c><00:01:58.860><c> you</c>

00:01:58.910 --> 00:01:58.920 align:start position:0%
modules more broadly it's about how you
 

00:01:58.920 --> 00:02:02.170 align:start position:0%
modules more broadly it's about how you
can<00:01:59.189><c> mix</c><00:01:59.399><c> modular</c><00:01:59.939><c> code</c><00:02:00.119><c> and</c><00:02:00.360><c> on</c><00:02:00.450><c> modular</c><00:02:00.840><c> code</c>

00:02:02.170 --> 00:02:02.180 align:start position:0%
can mix modular code and on modular code
 

00:02:02.180 --> 00:02:05.030 align:start position:0%
can mix modular code and on modular code
the<00:02:03.180><c> third</c><00:02:03.479><c> part</c><00:02:03.780><c> is</c><00:02:03.930><c> about</c><00:02:04.049><c> the</c><00:02:04.290><c> structure</c><00:02:04.890><c> of</c>

00:02:05.030 --> 00:02:05.040 align:start position:0%
the third part is about the structure of
 

00:02:05.040 --> 00:02:07.910 align:start position:0%
the third part is about the structure of
the<00:02:05.219><c> modular</c><00:02:05.729><c> JDK</c><00:02:06.530><c> including</c><00:02:07.530><c> some</c><00:02:07.680><c> of</c><00:02:07.710><c> the</c>

00:02:07.910 --> 00:02:07.920 align:start position:0%
the modular JDK including some of the
 

00:02:07.920 --> 00:02:12.480 align:start position:0%
the modular JDK including some of the
compatibility<00:02:08.819><c> issues</c><00:02:09.270><c> that</c><00:02:09.599><c> arise</c><00:02:09.840><c> from</c><00:02:10.140><c> it</c>

00:02:12.480 --> 00:02:12.490 align:start position:0%
 
 

00:02:12.490 --> 00:02:15.870 align:start position:0%
 
so<00:02:12.960><c> programming</c><00:02:13.960><c> in</c><00:02:14.050><c> the</c><00:02:14.140><c> large</c><00:02:14.880><c> modular</c>

00:02:15.870 --> 00:02:15.880 align:start position:0%
so programming in the large modular
 

00:02:15.880 --> 00:02:19.140 align:start position:0%
so programming in the large modular
applications<00:02:17.370><c> in</c><00:02:18.370><c> object-oriented</c>

00:02:19.140 --> 00:02:19.150 align:start position:0%
applications in object-oriented
 

00:02:19.150 --> 00:02:22.140 align:start position:0%
applications in object-oriented
programming<00:02:19.540><c> the</c><00:02:20.110><c> basic</c><00:02:20.620><c> unit</c><00:02:21.130><c> of</c><00:02:21.280><c> reuse</c><00:02:21.790><c> is</c>

00:02:22.140 --> 00:02:22.150 align:start position:0%
programming the basic unit of reuse is
 

00:02:22.150 --> 00:02:25.620 align:start position:0%
programming the basic unit of reuse is
traditionally<00:02:22.870><c> the</c><00:02:23.050><c> class</c><00:02:24.450><c> programs</c><00:02:25.450><c> or</c>

00:02:25.620 --> 00:02:25.630 align:start position:0%
traditionally the class programs or
 

00:02:25.630 --> 00:02:28.260 align:start position:0%
traditionally the class programs or
classes<00:02:26.050><c> Java</c><00:02:26.770><c> has</c><00:02:27.010><c> wonderful</c><00:02:27.550><c> mechanisms</c>

00:02:28.260 --> 00:02:28.270 align:start position:0%
classes Java has wonderful mechanisms
 

00:02:28.270 --> 00:02:31.520 align:start position:0%
classes Java has wonderful mechanisms
for<00:02:28.540><c> promoting</c><00:02:29.020><c> reuse</c><00:02:29.980><c> of</c><00:02:30.250><c> a</c><00:02:30.790><c> class</c>

00:02:31.520 --> 00:02:31.530 align:start position:0%
for promoting reuse of a class
 

00:02:31.530 --> 00:02:34.370 align:start position:0%
for promoting reuse of a class
inheritance<00:02:32.530><c> for</c><00:02:32.890><c> reusing</c><00:02:33.310><c> behavior</c>

00:02:34.370 --> 00:02:34.380 align:start position:0%
inheritance for reusing behavior
 

00:02:34.380 --> 00:02:37.190 align:start position:0%
inheritance for reusing behavior
interfaces<00:02:35.380><c> for</c><00:02:35.800><c> reusing</c><00:02:36.370><c> abstractions</c>

00:02:37.190 --> 00:02:37.200 align:start position:0%
interfaces for reusing abstractions
 

00:02:37.200 --> 00:02:40.350 align:start position:0%
interfaces for reusing abstractions
separate<00:02:38.200><c> compilation</c><00:02:38.760><c> dynamic</c><00:02:39.760><c> linking</c><00:02:40.150><c> and</c>

00:02:40.350 --> 00:02:40.360 align:start position:0%
separate compilation dynamic linking and
 

00:02:40.360 --> 00:02:43.050 align:start position:0%
separate compilation dynamic linking and
access<00:02:41.290><c> control</c><00:02:41.740><c> all</c><00:02:42.010><c> the</c><00:02:42.160><c> way</c><00:02:42.250><c> down</c><00:02:42.460><c> to</c><00:02:42.820><c> the</c>

00:02:43.050 --> 00:02:43.060 align:start position:0%
access control all the way down to the
 

00:02:43.060 --> 00:02:45.060 align:start position:0%
access control all the way down to the
level<00:02:43.300><c> of</c><00:02:43.360><c> individual</c><00:02:43.900><c> fields</c><00:02:44.560><c> and</c><00:02:44.740><c> methods</c>

00:02:45.060 --> 00:02:45.070 align:start position:0%
level of individual fields and methods
 

00:02:45.070 --> 00:02:50.370 align:start position:0%
level of individual fields and methods
and<00:02:46.230><c> we've</c><00:02:47.230><c> had</c><00:02:47.440><c> nested</c><00:02:48.040><c> classes</c><00:02:48.480><c> since</c><00:02:49.480><c> 1997</c>

00:02:50.370 --> 00:02:50.380 align:start position:0%
and we've had nested classes since 1997
 

00:02:50.380 --> 00:02:52.610 align:start position:0%
and we've had nested classes since 1997
so<00:02:50.590><c> it</c><00:02:51.100><c> should</c><00:02:51.340><c> be</c><00:02:51.520><c> possible</c><00:02:51.730><c> for</c><00:02:52.000><c> a</c><00:02:52.240><c> single</c>

00:02:52.610 --> 00:02:52.620 align:start position:0%
so it should be possible for a single
 

00:02:52.620 --> 00:02:56.250 align:start position:0%
so it should be possible for a single
top-level<00:02:53.620><c> class</c><00:02:54.160><c> to</c><00:02:55.030><c> encapsulate</c><00:02:55.330><c> a</c><00:02:55.810><c> vast</c>

00:02:56.250 --> 00:02:56.260 align:start position:0%
top-level class to encapsulate a vast
 

00:02:56.260 --> 00:02:59.550 align:start position:0%
top-level class to encapsulate a vast
amount<00:02:56.710><c> of</c><00:02:56.890><c> functionality</c><00:02:58.290><c> with</c><00:02:59.290><c> that</c><00:02:59.410><c> in</c>

00:02:59.550 --> 00:02:59.560 align:start position:0%
amount of functionality with that in
 

00:02:59.560 --> 00:03:02.400 align:start position:0%
amount of functionality with that in
mind<00:02:59.910><c> I'm</c><00:03:00.910><c> setting</c><00:03:01.330><c> up</c><00:03:01.390><c> a</c><00:03:01.510><c> strawman</c><00:03:01.750><c> here</c><00:03:02.170><c> but</c>

00:03:02.400 --> 00:03:02.410 align:start position:0%
mind I'm setting up a strawman here but
 

00:03:02.410 --> 00:03:04.560 align:start position:0%
mind I'm setting up a strawman here but
keep<00:03:02.650><c> going</c><00:03:02.710><c> with</c><00:03:03.700><c> that</c><00:03:03.730><c> in</c><00:03:03.940><c> mind</c><00:03:04.090><c> it</c><00:03:04.300><c> seems</c>

00:03:04.560 --> 00:03:04.570 align:start position:0%
keep going with that in mind it seems
 

00:03:04.570 --> 00:03:06.930 align:start position:0%
keep going with that in mind it seems
like<00:03:04.870><c> an</c><00:03:05.050><c> application</c><00:03:05.260><c> could</c><00:03:06.160><c> be</c><00:03:06.220><c> a</c><00:03:06.370><c> single</c>

00:03:06.930 --> 00:03:06.940 align:start position:0%
like an application could be a single
 

00:03:06.940 --> 00:03:09.960 align:start position:0%
like an application could be a single
package<00:03:07.590><c> containing</c><00:03:08.590><c> a</c><00:03:08.770><c> few</c><00:03:09.190><c> very</c><00:03:09.610><c> rich</c>

00:03:09.960 --> 00:03:09.970 align:start position:0%
package containing a few very rich
 

00:03:09.970 --> 00:03:13.050 align:start position:0%
package containing a few very rich
classes<00:03:10.750><c> all</c><00:03:11.050><c> sharing</c><00:03:11.920><c> data</c><00:03:12.130><c> via</c><00:03:12.490><c> fields</c><00:03:12.940><c> and</c>

00:03:13.050 --> 00:03:13.060 align:start position:0%
classes all sharing data via fields and
 

00:03:13.060 --> 00:03:14.820 align:start position:0%
classes all sharing data via fields and
methods<00:03:13.180><c> accessible</c><00:03:14.020><c> within</c><00:03:14.230><c> the</c><00:03:14.500><c> package</c>

00:03:14.820 --> 00:03:14.830 align:start position:0%
methods accessible within the package
 

00:03:14.830 --> 00:03:18.560 align:start position:0%
methods accessible within the package
and<00:03:15.130><c> where</c><00:03:15.910><c> a</c><00:03:15.940><c> handful</c><00:03:16.690><c> of</c><00:03:16.770><c> public</c><00:03:17.770><c> classes</c>

00:03:18.560 --> 00:03:18.570 align:start position:0%
and where a handful of public classes
 

00:03:18.570 --> 00:03:21.900 align:start position:0%
and where a handful of public classes
form<00:03:19.570><c> the</c><00:03:19.720><c> entry</c><00:03:20.140><c> points</c><00:03:20.500><c> or</c><00:03:20.650><c> the</c><00:03:20.770><c> API</c><00:03:21.250><c> of</c><00:03:21.700><c> the</c>

00:03:21.900 --> 00:03:21.910 align:start position:0%
form the entry points or the API of the
 

00:03:21.910 --> 00:03:26.360 align:start position:0%
form the entry points or the API of the
application<00:03:22.510><c> right</c><00:03:24.450><c> not</c><00:03:25.450><c> really</c>

00:03:26.360 --> 00:03:26.370 align:start position:0%
application right not really
 

00:03:26.370 --> 00:03:29.550 align:start position:0%
application right not really
how<00:03:27.370><c> many</c><00:03:27.580><c> people</c><00:03:27.940><c> work</c><00:03:28.210><c> on</c><00:03:28.450><c> a</c><00:03:28.540><c> code</c><00:03:28.960><c> base</c><00:03:29.200><c> that</c>

00:03:29.550 --> 00:03:29.560 align:start position:0%
how many people work on a code base that
 

00:03:29.560 --> 00:03:32.490 align:start position:0%
how many people work on a code base that
consists<00:03:30.400><c> in</c><00:03:30.570><c> your</c><00:03:31.570><c> application</c><00:03:32.080><c> of</c><00:03:32.200><c> one</c>

00:03:32.490 --> 00:03:32.500 align:start position:0%
consists in your application of one
 

00:03:32.500 --> 00:03:37.950 align:start position:0%
consists in your application of one
package<00:03:34.050><c> no</c><00:03:35.050><c> hands</c><00:03:35.700><c> right</c><00:03:36.700><c> answer</c><00:03:37.000><c> two</c>

00:03:37.950 --> 00:03:37.960 align:start position:0%
package no hands right answer two
 

00:03:37.960 --> 00:03:44.160 align:start position:0%
package no hands right answer two
packages<00:03:39.090><c> three</c><00:03:40.090><c> packages</c><00:03:40.830><c> five</c><00:03:43.050><c> order</c><00:03:44.050><c> of</c>

00:03:44.160 --> 00:03:44.170 align:start position:0%
packages three packages five order of
 

00:03:44.170 --> 00:03:46.920 align:start position:0%
packages three packages five order of
ten<00:03:44.410><c> packages</c><00:03:44.920><c> in</c><00:03:45.070><c> your</c><00:03:45.100><c> codebase</c><00:03:45.600><c> one</c><00:03:46.600><c> we</c>

00:03:46.920 --> 00:03:46.930 align:start position:0%
ten packages in your codebase one we
 

00:03:46.930 --> 00:03:50.580 align:start position:0%
ten packages in your codebase one we
have<00:03:47.050><c> a</c><00:03:47.080><c> few</c><00:03:47.140><c> on</c><00:03:47.440><c> the</c><00:03:47.530><c> order</c><00:03:47.770><c> of</c><00:03:47.800><c> 10</c><00:03:48.070><c> a</c><00:03:48.640><c> 17</c><00:03:49.480><c> ok</c><00:03:49.750><c> at</c>

00:03:50.580 --> 00:03:50.590 align:start position:0%
have a few on the order of 10 a 17 ok at
 

00:03:50.590 --> 00:03:53.130 align:start position:0%
have a few on the order of 10 a 17 ok at
least<00:03:51.570><c> minute</c><00:03:52.570><c> right</c><00:03:52.750><c> right</c><00:03:52.990><c> right</c>

00:03:53.130 --> 00:03:53.140 align:start position:0%
least minute right right right
 

00:03:53.140 --> 00:03:54.420 align:start position:0%
least minute right right right
everyone<00:03:53.380><c> knows</c><00:03:53.500><c> the</c><00:03:53.620><c> minimum</c><00:03:53.920><c> but</c><00:03:54.160><c> who</c><00:03:54.280><c> knows</c>

00:03:54.420 --> 00:03:54.430 align:start position:0%
everyone knows the minimum but who knows
 

00:03:54.430 --> 00:03:59.090 align:start position:0%
everyone knows the minimum but who knows
the<00:03:54.580><c> maximum</c><00:03:55.560><c> order</c><00:03:56.560><c> of</c><00:03:56.710><c> perhaps</c><00:03:57.010><c> 50</c><00:03:57.580><c> packages</c>

00:03:59.090 --> 00:03:59.100 align:start position:0%
the maximum order of perhaps 50 packages
 

00:03:59.100 --> 00:04:01.550 align:start position:0%
the maximum order of perhaps 50 packages
there's<00:04:00.100><c> that</c><00:04:00.250><c> there</c><00:04:00.400><c> are</c><00:04:00.490><c> some</c><00:04:00.610><c> hands</c><00:04:00.820><c> maybe</c>

00:04:01.550 --> 00:04:01.560 align:start position:0%
there's that there are some hands maybe
 

00:04:01.560 --> 00:04:07.520 align:start position:0%
there's that there are some hands maybe
some<00:04:02.560><c> hands</c><00:04:02.920><c> the</c><00:04:03.310><c> are</c><00:04:03.550><c> sort</c><00:04:03.730><c> of</c><00:04:03.760><c> shooting</c><00:04:04.120><c> up</c>

00:04:07.520 --> 00:04:07.530 align:start position:0%
 
 

00:04:07.530 --> 00:04:09.780 align:start position:0%
 
just<00:04:08.530><c> just</c><00:04:08.740><c> your</c><00:04:08.830><c> codes</c><00:04:09.040><c> your</c><00:04:09.280><c> short</c><00:04:09.459><c> digital</c>

00:04:09.780 --> 00:04:09.790 align:start position:0%
just just your codes your short digital
 

00:04:09.790 --> 00:04:12.570 align:start position:0%
just just your codes your short digital
code<00:04:10.000><c> now</c><00:04:10.450><c> the</c><00:04:10.750><c> point</c><00:04:10.959><c> is</c><00:04:11.080><c> no</c><00:04:11.950><c> one</c><00:04:12.160><c> uses</c><00:04:12.430><c> a</c>

00:04:12.570 --> 00:04:12.580 align:start position:0%
code now the point is no one uses a
 

00:04:12.580 --> 00:04:16.949 align:start position:0%
code now the point is no one uses a
handful<00:04:13.330><c> of</c><00:04:13.540><c> packages</c><00:04:14.230><c> anymore</c><00:04:15.840><c> even</c><00:04:16.840><c> the</c>

00:04:16.949 --> 00:04:16.959 align:start position:0%
handful of packages anymore even the
 

00:04:16.959 --> 00:04:19.020 align:start position:0%
handful of packages anymore even the
smallest<00:04:17.320><c> microservice</c><00:04:18.340><c> wouldn't</c><00:04:18.880><c> be</c>

00:04:19.020 --> 00:04:19.030 align:start position:0%
smallest microservice wouldn't be
 

00:04:19.030 --> 00:04:21.830 align:start position:0%
smallest microservice wouldn't be
expected<00:04:19.780><c> to</c><00:04:19.930><c> fit</c><00:04:20.200><c> into</c><00:04:20.440><c> a</c><00:04:20.590><c> single</c><00:04:20.830><c> package</c>

00:04:21.830 --> 00:04:21.840 align:start position:0%
expected to fit into a single package
 

00:04:21.840 --> 00:04:25.170 align:start position:0%
expected to fit into a single package
programs<00:04:22.840><c> are</c><00:04:23.020><c> packages</c><00:04:23.669><c> multiple</c><00:04:24.669><c> packages</c>

00:04:25.170 --> 00:04:25.180 align:start position:0%
programs are packages multiple packages
 

00:04:25.180 --> 00:04:28.290 align:start position:0%
programs are packages multiple packages
not<00:04:25.270><c> classes</c><00:04:26.550><c> unfortunately</c><00:04:27.550><c> the</c><00:04:28.030><c> Java</c>

00:04:28.290 --> 00:04:28.300 align:start position:0%
not classes unfortunately the Java
 

00:04:28.300 --> 00:04:29.999 align:start position:0%
not classes unfortunately the Java
language<00:04:28.509><c> kind</c><00:04:28.990><c> of</c><00:04:29.050><c> gives</c><00:04:29.289><c> up</c><00:04:29.500><c> once</c><00:04:29.860><c> your</c>

00:04:29.999 --> 00:04:30.009 align:start position:0%
language kind of gives up once your
 

00:04:30.009 --> 00:04:32.790 align:start position:0%
language kind of gives up once your
program<00:04:30.340><c> is</c><00:04:30.490><c> bigger</c><00:04:30.729><c> than</c><00:04:31.570><c> a</c><00:04:31.660><c> package</c><00:04:31.990><c> here's</c>

00:04:32.790 --> 00:04:32.800 align:start position:0%
program is bigger than a package here's
 

00:04:32.800 --> 00:04:36.770 align:start position:0%
program is bigger than a package here's
the<00:04:33.100><c> hierarchy</c><00:04:34.030><c> of</c><00:04:34.060><c> accessibility</c><00:04:35.020><c> in</c><00:04:35.490><c> Java</c>

00:04:36.770 --> 00:04:36.780 align:start position:0%
the hierarchy of accessibility in Java
 

00:04:36.780 --> 00:04:39.450 align:start position:0%
the hierarchy of accessibility in Java
it's<00:04:37.780><c> simple</c><00:04:38.169><c> to</c><00:04:38.229><c> understand</c><00:04:38.680><c> easy</c><00:04:39.039><c> to</c><00:04:39.280><c> use</c>

00:04:39.450 --> 00:04:39.460 align:start position:0%
it's simple to understand easy to use
 

00:04:39.460 --> 00:04:41.129 align:start position:0%
it's simple to understand easy to use
and<00:04:39.729><c> strongly</c><00:04:40.180><c> enforced</c><00:04:40.300><c> at</c><00:04:40.810><c> compile-time</c>

00:04:41.129 --> 00:04:41.139 align:start position:0%
and strongly enforced at compile-time
 

00:04:41.139 --> 00:04:43.710 align:start position:0%
and strongly enforced at compile-time
and<00:04:41.410><c> run-time</c><00:04:41.910><c> but</c><00:04:42.910><c> it</c><00:04:43.000><c> has</c><00:04:43.120><c> a</c><00:04:43.150><c> big</c><00:04:43.360><c> weakness</c>

00:04:43.710 --> 00:04:43.720 align:start position:0%
and run-time but it has a big weakness
 

00:04:43.720 --> 00:04:47.450 align:start position:0%
and run-time but it has a big weakness
your<00:04:43.900><c> program</c><00:04:44.410><c> is</c><00:04:44.710><c> some</c><00:04:45.220><c> dozens</c><00:04:45.850><c> of</c><00:04:46.270><c> packages</c>

00:04:47.450 --> 00:04:47.460 align:start position:0%
your program is some dozens of packages
 

00:04:47.460 --> 00:04:50.150 align:start position:0%
your program is some dozens of packages
but<00:04:48.460><c> the</c><00:04:48.550><c> only</c><00:04:48.729><c> way</c><00:04:49.030><c> to</c><00:04:49.090><c> share</c><00:04:49.630><c> code</c><00:04:49.990><c> between</c>

00:04:50.150 --> 00:04:50.160 align:start position:0%
but the only way to share code between
 

00:04:50.160 --> 00:04:53.610 align:start position:0%
but the only way to share code between
packages<00:04:51.160><c> is</c><00:04:51.400><c> by</c><00:04:51.550><c> making</c><00:04:51.729><c> things</c><00:04:52.090><c> public</c><00:04:52.620><c> but</c>

00:04:53.610 --> 00:04:53.620 align:start position:0%
packages is by making things public but
 

00:04:53.620 --> 00:04:57.029 align:start position:0%
packages is by making things public but
then<00:04:53.740><c> you're</c><00:04:53.919><c> sharing</c><00:04:54.400><c> with</c><00:04:54.580><c> everyone</c><00:04:56.039><c> it's</c>

00:04:57.029 --> 00:04:57.039 align:start position:0%
then you're sharing with everyone it's
 

00:04:57.039 --> 00:04:59.400 align:start position:0%
then you're sharing with everyone it's
not<00:04:57.280><c> surprising</c><00:04:57.460><c> that</c><00:04:57.880><c> packaged</c><00:04:58.539><c> friendship</c>

00:04:59.400 --> 00:04:59.410 align:start position:0%
not surprising that packaged friendship
 

00:04:59.410 --> 00:05:01.379 align:start position:0%
not surprising that packaged friendship
in<00:04:59.650><c> one</c><00:05:00.220><c> form</c><00:05:00.520><c> or</c><00:05:00.639><c> another</c><00:05:00.699><c> has</c><00:05:01.060><c> been</c>

00:05:01.379 --> 00:05:01.389 align:start position:0%
in one form or another has been
 

00:05:01.389 --> 00:05:03.600 align:start position:0%
in one form or another has been
requested<00:05:01.960><c> many</c><00:05:02.199><c> times</c><00:05:02.530><c> over</c><00:05:02.770><c> the</c><00:05:02.919><c> years</c><00:05:03.039><c> a</c>

00:05:03.600 --> 00:05:03.610 align:start position:0%
requested many times over the years a
 

00:05:03.610 --> 00:05:05.670 align:start position:0%
requested many times over the years a
package<00:05:04.449><c> is</c><00:05:04.570><c> a</c><00:05:04.599><c> fine</c><00:05:04.870><c> way</c><00:05:05.080><c> to</c><00:05:05.139><c> organize</c>

00:05:05.670 --> 00:05:05.680 align:start position:0%
package is a fine way to organize
 

00:05:05.680 --> 00:05:07.920 align:start position:0%
package is a fine way to organize
classes<00:05:06.280><c> but</c><00:05:06.970><c> most</c><00:05:07.120><c> people</c><00:05:07.419><c> wish</c><00:05:07.570><c> there</c><00:05:07.750><c> was</c><00:05:07.900><c> a</c>

00:05:07.920 --> 00:05:07.930 align:start position:0%
classes but most people wish there was a
 

00:05:07.930 --> 00:05:12.900 align:start position:0%
classes but most people wish there was a
way<00:05:08.139><c> to</c><00:05:08.169><c> organize</c><00:05:08.729><c> packages</c><00:05:09.729><c> too</c><00:05:11.520><c> now</c><00:05:12.520><c> of</c>

00:05:12.900 --> 00:05:12.910 align:start position:0%
way to organize packages too now of
 

00:05:12.910 --> 00:05:14.820 align:start position:0%
way to organize packages too now of
course<00:05:13.060><c> you</c><00:05:13.210><c> can</c><00:05:13.360><c> put</c><00:05:13.509><c> some</c><00:05:13.780><c> packages</c><00:05:14.259><c> in</c><00:05:14.530><c> one</c>

00:05:14.820 --> 00:05:14.830 align:start position:0%
course you can put some packages in one
 

00:05:14.830 --> 00:05:16.740 align:start position:0%
course you can put some packages in one
jar<00:05:15.039><c> file</c><00:05:15.280><c> and</c><00:05:15.490><c> other</c><00:05:15.880><c> packages</c><00:05:16.330><c> in</c><00:05:16.509><c> another</c>

00:05:16.740 --> 00:05:16.750 align:start position:0%
jar file and other packages in another
 

00:05:16.750 --> 00:05:18.570 align:start position:0%
jar file and other packages in another
jar<00:05:16.960><c> file</c><00:05:17.199><c> and</c><00:05:17.410><c> so</c><00:05:17.590><c> on</c><00:05:17.620><c> but</c><00:05:17.889><c> that's</c><00:05:17.979><c> after</c>

00:05:18.570 --> 00:05:18.580 align:start position:0%
jar file and so on but that's after
 

00:05:18.580 --> 00:05:21.330 align:start position:0%
jar file and so on but that's after
compilation<00:05:19.289><c> it</c><00:05:20.289><c> doesn't</c><00:05:20.680><c> help</c><00:05:20.800><c> you</c><00:05:20.949><c> control</c>

00:05:21.330 --> 00:05:21.340 align:start position:0%
compilation it doesn't help you control
 

00:05:21.340 --> 00:05:23.040 align:start position:0%
compilation it doesn't help you control
access<00:05:21.699><c> from</c><00:05:22.150><c> one</c><00:05:22.300><c> package</c><00:05:22.660><c> to</c><00:05:22.840><c> another</c>

00:05:23.040 --> 00:05:23.050 align:start position:0%
access from one package to another
 

00:05:23.050 --> 00:05:25.860 align:start position:0%
access from one package to another
during<00:05:23.800><c> development</c><00:05:24.570><c> wouldn't</c><00:05:25.570><c> you</c><00:05:25.690><c> prefer</c>

00:05:25.860 --> 00:05:25.870 align:start position:0%
during development wouldn't you prefer
 

00:05:25.870 --> 00:05:28.890 align:start position:0%
during development wouldn't you prefer
to<00:05:26.139><c> group</c><00:05:27.099><c> your</c><00:05:27.340><c> packages</c><00:05:27.940><c> in</c><00:05:28.270><c> a</c><00:05:28.419><c> logical</c>

00:05:28.890 --> 00:05:28.900 align:start position:0%
to group your packages in a logical
 

00:05:28.900 --> 00:05:30.540 align:start position:0%
to group your packages in a logical
fashion<00:05:28.960><c> when</c><00:05:29.500><c> you're</c><00:05:29.620><c> actually</c><00:05:29.830><c> developing</c>

00:05:30.540 --> 00:05:30.550 align:start position:0%
fashion when you're actually developing
 

00:05:30.550 --> 00:05:34.620 align:start position:0%
fashion when you're actually developing
them<00:05:31.949><c> nodding</c><00:05:32.949><c> heads</c><00:05:33.250><c> perhaps</c><00:05:33.639><c> yeah</c><00:05:34.419><c> good</c>

00:05:34.620 --> 00:05:34.630 align:start position:0%
them nodding heads perhaps yeah good
 

00:05:34.630 --> 00:05:36.420 align:start position:0%
them nodding heads perhaps yeah good
thinking<00:05:34.870><c> as</c><00:05:35.050><c> to</c><00:05:35.139><c> that</c><00:05:35.229><c> yes</c><00:05:35.800><c> there</c><00:05:36.190><c> are</c><00:05:36.220><c> some</c>

00:05:36.420 --> 00:05:36.430 align:start position:0%
thinking as to that yes there are some
 

00:05:36.430 --> 00:05:39.810 align:start position:0%
thinking as to that yes there are some
nodding<00:05:36.580><c> heads</c><00:05:36.699><c> in</c><00:05:36.970><c> the</c><00:05:37.030><c> audience</c><00:05:38.820><c> that</c>

00:05:39.810 --> 00:05:39.820 align:start position:0%
nodding heads in the audience that
 

00:05:39.820 --> 00:05:43.050 align:start position:0%
nodding heads in the audience that
brings<00:05:40.030><c> me</c><00:05:40.210><c> to</c><00:05:40.330><c> modules</c><00:05:40.720><c> in</c><00:05:40.870><c> JDK</c><00:05:41.169><c> 9</c><00:05:41.380><c> a</c><00:05:42.060><c> module</c>

00:05:43.050 --> 00:05:43.060 align:start position:0%
brings me to modules in JDK 9 a module
 

00:05:43.060 --> 00:05:46.860 align:start position:0%
brings me to modules in JDK 9 a module
in<00:05:43.240><c> JDK</c><00:05:43.630><c> 9</c><00:05:43.840><c> is</c><00:05:44.080><c> a</c><00:05:44.650><c> set</c><00:05:45.070><c> of</c><00:05:45.280><c> packages</c><00:05:45.970><c> that</c><00:05:46.210><c> make</c>

00:05:46.860 --> 00:05:46.870 align:start position:0%
in JDK 9 is a set of packages that make
 

00:05:46.870 --> 00:05:49.980 align:start position:0%
in JDK 9 is a set of packages that make
sense<00:05:47.260><c> being</c><00:05:47.740><c> grouped</c><00:05:48.039><c> together</c><00:05:48.750><c> this</c><00:05:49.750><c> is</c><00:05:49.960><c> the</c>

00:05:49.980 --> 00:05:49.990 align:start position:0%
sense being grouped together this is the
 

00:05:49.990 --> 00:05:51.750 align:start position:0%
sense being grouped together this is the
classic<00:05:50.500><c> software</c><00:05:50.889><c> engineering</c><00:05:51.220><c> principle</c>

00:05:51.750 --> 00:05:51.760 align:start position:0%
classic software engineering principle
 

00:05:51.760 --> 00:05:54.990 align:start position:0%
classic software engineering principle
of<00:05:51.970><c> high</c><00:05:52.240><c> cohesion</c><00:05:53.250><c> some</c><00:05:54.250><c> of</c><00:05:54.400><c> the</c><00:05:54.520><c> packages</c>

00:05:54.990 --> 00:05:55.000 align:start position:0%
of high cohesion some of the packages
 

00:05:55.000 --> 00:05:57.390 align:start position:0%
of high cohesion some of the packages
are<00:05:55.210><c> intended</c><00:05:55.930><c> for</c><00:05:56.139><c> use</c><00:05:56.259><c> by</c><00:05:56.289><c> code</c><00:05:56.740><c> outside</c><00:05:57.009><c> the</c>

00:05:57.390 --> 00:05:57.400 align:start position:0%
are intended for use by code outside the
 

00:05:57.400 --> 00:06:01.020 align:start position:0%
are intended for use by code outside the
module<00:05:57.520><c> these</c><00:05:58.060><c> are</c><00:05:58.270><c> exported</c><00:05:59.110><c> packages</c><00:06:00.030><c> some</c>

00:06:01.020 --> 00:06:01.030 align:start position:0%
module these are exported packages some
 

00:06:01.030 --> 00:06:02.610 align:start position:0%
module these are exported packages some
of<00:06:01.150><c> the</c><00:06:01.210><c> packages</c><00:06:01.630><c> are</c><00:06:01.659><c> internal</c><00:06:02.470><c> to</c><00:06:02.590><c> the</c>

00:06:02.610 --> 00:06:02.620 align:start position:0%
of the packages are internal to the
 

00:06:02.620 --> 00:06:04.680 align:start position:0%
of the packages are internal to the
module<00:06:02.979><c> they</c><00:06:03.430><c> can</c><00:06:03.580><c> be</c><00:06:03.669><c> used</c><00:06:03.820><c> by</c><00:06:03.970><c> code</c><00:06:04.210><c> inside</c>

00:06:04.680 --> 00:06:04.690 align:start position:0%
module they can be used by code inside
 

00:06:04.690 --> 00:06:06.870 align:start position:0%
module they can be used by code inside
the<00:06:04.750><c> module</c><00:06:04.990><c> but</c><00:06:05.409><c> not</c><00:06:05.530><c> by</c><00:06:05.650><c> code</c><00:06:05.830><c> outside</c><00:06:06.250><c> these</c>

00:06:06.870 --> 00:06:06.880 align:start position:0%
the module but not by code outside these
 

00:06:06.880 --> 00:06:10.830 align:start position:0%
the module but not by code outside these
are<00:06:07.150><c> concealed</c><00:06:08.009><c> packages</c><00:06:09.270><c> now</c><00:06:10.270><c> the</c><00:06:10.330><c> word</c><00:06:10.539><c> use</c>

00:06:10.830 --> 00:06:10.840 align:start position:0%
are concealed packages now the word use
 

00:06:10.840 --> 00:06:13.379 align:start position:0%
are concealed packages now the word use
keeps<00:06:11.470><c> coming</c><00:06:11.830><c> up</c><00:06:11.949><c> used</c><00:06:12.490><c> by</c><00:06:12.699><c> use</c><00:06:12.909><c> by</c><00:06:13.120><c> use</c><00:06:13.270><c> by</c>

00:06:13.379 --> 00:06:13.389 align:start position:0%
keeps coming up used by use by use by
 

00:06:13.389 --> 00:06:16.350 align:start position:0%
keeps coming up used by use by use by
this<00:06:13.449><c> code</c><00:06:13.720><c> a</c><00:06:13.930><c> module</c><00:06:14.620><c> is</c><00:06:14.860><c> the</c><00:06:15.220><c> unit</c><00:06:15.610><c> of</c><00:06:15.789><c> reuse</c>

00:06:16.350 --> 00:06:16.360 align:start position:0%
this code a module is the unit of reuse
 

00:06:16.360 --> 00:06:18.960 align:start position:0%
this code a module is the unit of reuse
it<00:06:17.320><c> describes</c><00:06:17.889><c> which</c><00:06:18.159><c> of</c><00:06:18.310><c> its</c><00:06:18.430><c> packages</c><00:06:18.849><c> of</c>

00:06:18.960 --> 00:06:18.970 align:start position:0%
it describes which of its packages of
 

00:06:18.970 --> 00:06:20.999 align:start position:0%
it describes which of its packages of
external<00:06:19.449><c> use</c><00:06:19.630><c> and</c><00:06:19.930><c> which</c><00:06:20.169><c> are</c><00:06:20.409><c> concealed</c>

00:06:20.999 --> 00:06:21.009 align:start position:0%
external use and which are concealed
 

00:06:21.009 --> 00:06:24.420 align:start position:0%
external use and which are concealed
internal<00:06:21.699><c> use</c><00:06:21.849><c> a</c><00:06:22.289><c> program</c><00:06:23.289><c> built</c><00:06:23.590><c> of</c><00:06:23.889><c> modules</c>

00:06:24.420 --> 00:06:24.430 align:start position:0%
internal use a program built of modules
 

00:06:24.430 --> 00:06:27.120 align:start position:0%
internal use a program built of modules
will<00:06:25.120><c> be</c><00:06:25.270><c> more</c><00:06:25.539><c> reliable</c><00:06:26.259><c> than</c><00:06:26.530><c> a</c><00:06:26.650><c> program</c>

00:06:27.120 --> 00:06:27.130 align:start position:0%
will be more reliable than a program
 

00:06:27.130 --> 00:06:29.640 align:start position:0%
will be more reliable than a program
built<00:06:27.400><c> of</c><00:06:27.580><c> a</c><00:06:27.669><c> loose</c><00:06:27.970><c> set</c><00:06:28.509><c> of</c><00:06:28.720><c> packages</c><00:06:29.139><c> that</c>

00:06:29.640 --> 00:06:29.650 align:start position:0%
built of a loose set of packages that
 

00:06:29.650 --> 00:06:31.560 align:start position:0%
built of a loose set of packages that
can<00:06:29.830><c> access</c><00:06:30.009><c> each</c><00:06:30.370><c> other</c><00:06:30.580><c> freely</c><00:06:30.909><c> and</c><00:06:31.300><c> that</c>

00:06:31.560 --> 00:06:31.570 align:start position:0%
can access each other freely and that
 

00:06:31.570 --> 00:06:34.469 align:start position:0%
can access each other freely and that
exposed<00:06:32.050><c> to</c><00:06:32.349><c> many</c><00:06:32.530><c> AP</c><00:06:32.860><c> is</c><00:06:33.009><c> to</c><00:06:34.000><c> the</c><00:06:34.090><c> outside</c>

00:06:34.469 --> 00:06:34.479 align:start position:0%
exposed to many AP is to the outside
 

00:06:34.479 --> 00:06:36.710 align:start position:0%
exposed to many AP is to the outside
world

00:06:36.710 --> 00:06:36.720 align:start position:0%
world
 

00:06:36.720 --> 00:06:40.520 align:start position:0%
 
let's<00:06:37.650><c> look</c><00:06:37.950><c> at</c><00:06:38.490><c> the</c><00:06:39.000><c> Java</c><00:06:39.300><c> base</c><00:06:39.600><c> module</c><00:06:39.840><c> this</c>

00:06:40.520 --> 00:06:40.530 align:start position:0%
let's look at the Java base module this
 

00:06:40.530 --> 00:06:43.850 align:start position:0%
let's look at the Java base module this
is<00:06:40.710><c> the</c><00:06:40.830><c> foundation</c><00:06:41.640><c> in</c><00:06:42.060><c> gdk9</c><00:06:42.510><c> of</c><00:06:42.960><c> the</c><00:06:43.620><c> Java</c>

00:06:43.850 --> 00:06:43.860 align:start position:0%
is the foundation in gdk9 of the Java
 

00:06:43.860 --> 00:06:49.010 align:start position:0%
is the foundation in gdk9 of the Java
rescue<00:06:44.220><c> platform</c><00:06:45.740><c> it</c><00:06:47.360><c> it</c><00:06:48.360><c> grouped</c><00:06:48.750><c> the</c>

00:06:49.010 --> 00:06:49.020 align:start position:0%
rescue platform it it grouped the
 

00:06:49.020 --> 00:06:52.250 align:start position:0%
rescue platform it it grouped the
essential<00:06:49.680><c> Java</c><00:06:50.010><c> star</c><00:06:50.520><c> and</c><00:06:50.790><c> Java</c><00:06:51.480><c> X</c><00:06:51.720><c> dot</c><00:06:51.990><c> star</c>

00:06:52.250 --> 00:06:52.260 align:start position:0%
essential Java star and Java X dot star
 

00:06:52.260 --> 00:06:54.380 align:start position:0%
essential Java star and Java X dot star
packages<00:06:52.800><c> that</c><00:06:52.950><c> most</c><00:06:53.130><c> programs</c><00:06:53.550><c> need</c><00:06:53.820><c> it's</c>

00:06:54.380 --> 00:06:54.390 align:start position:0%
packages that most programs need it's
 

00:06:54.390 --> 00:06:57.710 align:start position:0%
packages that most programs need it's
where<00:06:54.630><c> java.lang</c><00:06:55.200><c> object</c><00:06:55.770><c> and</c><00:06:56.130><c> Java</c><00:06:57.090><c> IO</c><00:06:57.300><c> file</c>

00:06:57.710 --> 00:06:57.720 align:start position:0%
where java.lang object and Java IO file
 

00:06:57.720 --> 00:07:01.670 align:start position:0%
where java.lang object and Java IO file
and<00:06:58.080><c> Java</c><00:06:58.290><c> util</c><00:06:58.650><c> list</c><00:06:58.920><c> live</c><00:06:59.840><c> it</c><00:07:00.840><c> declared</c><00:07:01.380><c> in</c><00:07:01.590><c> a</c>

00:07:01.670 --> 00:07:01.680 align:start position:0%
and Java util list live it declared in a
 

00:07:01.680 --> 00:07:04.100 align:start position:0%
and Java util list live it declared in a
file<00:07:01.890><c> called</c><00:07:02.250><c> module</c><00:07:02.730><c> info</c><00:07:03.090><c> Java</c><00:07:03.510><c> this</c><00:07:03.870><c> gives</c>

00:07:04.100 --> 00:07:04.110 align:start position:0%
file called module info Java this gives
 

00:07:04.110 --> 00:07:06.260 align:start position:0%
file called module info Java this gives
the<00:07:04.320><c> name</c><00:07:04.530><c> of</c><00:07:04.710><c> the</c><00:07:04.800><c> module</c><00:07:04.950><c> and</c><00:07:05.430><c> its</c><00:07:05.610><c> exported</c>

00:07:06.260 --> 00:07:06.270 align:start position:0%
the name of the module and its exported
 

00:07:06.270 --> 00:07:09.470 align:start position:0%
the name of the module and its exported
packages<00:07:06.830><c> what</c><00:07:07.830><c> does</c><00:07:07.980><c> it</c><00:07:08.100><c> mean</c><00:07:08.280><c> to</c><00:07:08.550><c> export</c><00:07:09.150><c> the</c>

00:07:09.470 --> 00:07:09.480 align:start position:0%
packages what does it mean to export the
 

00:07:09.480 --> 00:07:12.140 align:start position:0%
packages what does it mean to export the
java.lang<00:07:09.990><c> package</c><00:07:10.670><c> it</c><00:07:11.670><c> means</c><00:07:11.880><c> that</c><00:07:12.060><c> the</c>

00:07:12.140 --> 00:07:12.150 align:start position:0%
java.lang package it means that the
 

00:07:12.150 --> 00:07:14.750 align:start position:0%
java.lang package it means that the
public<00:07:12.660><c> classes</c><00:07:13.350><c> of</c><00:07:13.860><c> java.lang</c><00:07:14.370><c> are</c>

00:07:14.750 --> 00:07:14.760 align:start position:0%
public classes of java.lang are
 

00:07:14.760 --> 00:07:20.110 align:start position:0%
public classes of java.lang are
accessible<00:07:15.660><c> to</c><00:07:15.870><c> code</c><00:07:16.800><c> outside</c><00:07:17.100><c> this</c><00:07:17.520><c> module</c><00:07:17.850><c> a</c>

00:07:20.110 --> 00:07:20.120 align:start position:0%
accessible to code outside this module a
 

00:07:20.120 --> 00:07:23.570 align:start position:0%
accessible to code outside this module a
package<00:07:21.120><c> that</c><00:07:21.330><c> is</c><00:07:21.420><c> not</c><00:07:21.680><c> explicitly</c><00:07:22.680><c> exported</c>

00:07:23.570 --> 00:07:23.580 align:start position:0%
package that is not explicitly exported
 

00:07:23.580 --> 00:07:28.460 align:start position:0%
package that is not explicitly exported
is<00:07:23.910><c> concealed</c><00:07:25.430><c> in</c><00:07:26.430><c> the</c><00:07:27.330><c> java</c><00:07:27.540><c> base</c><00:07:27.750><c> module</c><00:07:28.169><c> in</c>

00:07:28.460 --> 00:07:28.470 align:start position:0%
is concealed in the java base module in
 

00:07:28.470 --> 00:07:32.060 align:start position:0%
is concealed in the java base module in
in<00:07:28.740><c> red</c><00:07:29.120><c> many</c><00:07:30.120><c> comments</c><00:07:30.840><c> on</c><00:07:31.020><c> and</c><00:07:31.320><c> some</c>

00:07:32.060 --> 00:07:32.070 align:start position:0%
in red many comments on and some
 

00:07:32.070 --> 00:07:35.300 align:start position:0%
in red many comments on and some
packages<00:07:32.820><c> are</c><00:07:33.090><c> concealed</c><00:07:33.860><c> their</c><00:07:34.860><c> public</c>

00:07:35.300 --> 00:07:35.310 align:start position:0%
packages are concealed their public
 

00:07:35.310 --> 00:07:38.150 align:start position:0%
packages are concealed their public
classes<00:07:35.790><c> are</c><00:07:36.000><c> not</c><00:07:36.270><c> accessible</c><00:07:37.020><c> from</c><00:07:37.980><c> outside</c>

00:07:38.150 --> 00:07:38.160 align:start position:0%
classes are not accessible from outside
 

00:07:38.160 --> 00:07:41.510 align:start position:0%
classes are not accessible from outside
the<00:07:38.580><c> Java</c><00:07:38.790><c> based</c><00:07:38.970><c> module</c><00:07:39.919><c> this</c><00:07:40.919><c> is</c><00:07:40.980><c> the</c><00:07:41.130><c> first</c>

00:07:41.510 --> 00:07:41.520 align:start position:0%
the Java based module this is the first
 

00:07:41.520 --> 00:07:43.310 align:start position:0%
the Java based module this is the first
goal<00:07:41.820><c> of</c><00:07:41.850><c> the</c><00:07:42.090><c> module</c><00:07:42.390><c> system</c><00:07:42.810><c> strong</c>

00:07:43.310 --> 00:07:43.320 align:start position:0%
goal of the module system strong
 

00:07:43.320 --> 00:07:46.730 align:start position:0%
goal of the module system strong
encapsulation<00:07:44.100><c> a</c><00:07:44.490><c> module</c><00:07:45.450><c> isn't</c><00:07:45.900><c> just</c><00:07:46.260><c> a</c><00:07:46.500><c> set</c>

00:07:46.730 --> 00:07:46.740 align:start position:0%
encapsulation a module isn't just a set
 

00:07:46.740 --> 00:07:49.040 align:start position:0%
encapsulation a module isn't just a set
of<00:07:46.830><c> packages</c><00:07:47.160><c> it's</c><00:07:47.970><c> a</c><00:07:48.120><c> set</c><00:07:48.270><c> of</c><00:07:48.390><c> exported</c>

00:07:49.040 --> 00:07:49.050 align:start position:0%
of packages it's a set of exported
 

00:07:49.050 --> 00:07:51.680 align:start position:0%
of packages it's a set of exported
packages<00:07:49.530><c> and</c><00:07:49.740><c> conceals</c><00:07:50.280><c> packages</c><00:07:50.850><c> the</c>

00:07:51.680 --> 00:07:51.690 align:start position:0%
packages and conceals packages the
 

00:07:51.690 --> 00:07:54.020 align:start position:0%
packages and conceals packages the
public<00:07:52.050><c> classes</c><00:07:52.290><c> of</c><00:07:52.680><c> exported</c><00:07:53.400><c> packages</c><00:07:53.850><c> are</c>

00:07:54.020 --> 00:07:54.030 align:start position:0%
public classes of exported packages are
 

00:07:54.030 --> 00:07:57.650 align:start position:0%
public classes of exported packages are
accessible<00:07:54.630><c> outside</c><00:07:55.020><c> the</c><00:07:55.140><c> module</c><00:07:56.330><c> the</c><00:07:57.330><c> public</c>

00:07:57.650 --> 00:07:57.660 align:start position:0%
accessible outside the module the public
 

00:07:57.660 --> 00:08:00.020 align:start position:0%
accessible outside the module the public
classes<00:07:57.900><c> of</c><00:07:58.200><c> concealed</c><00:07:58.650><c> packages</c><00:07:59.250><c> are</c><00:07:59.460><c> not</c>

00:08:00.020 --> 00:08:00.030 align:start position:0%
classes of concealed packages are not
 

00:08:00.030 --> 00:08:04.490 align:start position:0%
classes of concealed packages are not
accessible<00:08:00.600><c> outside</c><00:08:00.990><c> the</c><00:08:01.380><c> module</c><00:08:02.690><c> so</c><00:08:03.690><c> the</c>

00:08:04.490 --> 00:08:04.500 align:start position:0%
accessible outside the module so the
 

00:08:04.500 --> 00:08:07.100 align:start position:0%
accessible outside the module so the
hierarchy<00:08:05.190><c> of</c><00:08:05.220><c> accessibility</c><00:08:05.940><c> is</c><00:08:06.419><c> bigger</c><00:08:06.810><c> in</c>

00:08:07.100 --> 00:08:07.110 align:start position:0%
hierarchy of accessibility is bigger in
 

00:08:07.110 --> 00:08:10.310 align:start position:0%
hierarchy of accessibility is bigger in
jdk<00:08:07.560><c> 9</c><00:08:07.800><c> than</c><00:08:08.220><c> in</c><00:08:08.340><c> jdk</c><00:08:08.729><c> AIDS</c><00:08:08.960><c> reading</c><00:08:09.960><c> upwards</c>

00:08:10.310 --> 00:08:10.320 align:start position:0%
jdk 9 than in jdk AIDS reading upwards
 

00:08:10.320 --> 00:08:13.100 align:start position:0%
jdk 9 than in jdk AIDS reading upwards
on<00:08:11.250><c> the</c><00:08:11.370><c> right</c><00:08:11.669><c> you</c><00:08:11.910><c> can</c><00:08:11.940><c> arrange</c><00:08:12.330><c> for</c><00:08:12.450><c> public</c>

00:08:13.100 --> 00:08:13.110 align:start position:0%
on the right you can arrange for public
 

00:08:13.110 --> 00:08:15.440 align:start position:0%
on the right you can arrange for public
classes<00:08:13.380><c> to</c><00:08:13.800><c> be</c><00:08:13.919><c> accessible</c><00:08:14.490><c> only</c><00:08:14.760><c> within</c>

00:08:15.440 --> 00:08:15.450 align:start position:0%
classes to be accessible only within
 

00:08:15.450 --> 00:08:19.040 align:start position:0%
classes to be accessible only within
their<00:08:15.750><c> module</c><00:08:16.110><c> or</c><00:08:17.600><c> accessible</c><00:08:18.600><c> within</c><00:08:18.810><c> their</c>

00:08:19.040 --> 00:08:19.050 align:start position:0%
their module or accessible within their
 

00:08:19.050 --> 00:08:22.719 align:start position:0%
their module or accessible within their
module<00:08:19.410><c> and</c><00:08:19.680><c> to</c><00:08:20.010><c> other</c><00:08:20.419><c> specific</c><00:08:21.419><c> modules</c><00:08:21.930><c> or</c>

00:08:22.719 --> 00:08:22.729 align:start position:0%
module and to other specific modules or
 

00:08:22.729 --> 00:08:25.909 align:start position:0%
module and to other specific modules or
accessible<00:08:23.729><c> to</c><00:08:23.850><c> everyone</c><00:08:24.260><c> so</c><00:08:25.260><c> to</c><00:08:25.350><c> be</c><00:08:25.500><c> clear</c><00:08:25.620><c> in</c>

00:08:25.909 --> 00:08:25.919 align:start position:0%
accessible to everyone so to be clear in
 

00:08:25.919 --> 00:08:28.159 align:start position:0%
accessible to everyone so to be clear in
jeddah<00:08:26.070><c> key</c><00:08:26.250><c> 9</c><00:08:26.400><c> if</c><00:08:26.640><c> you're</c><00:08:27.030><c> looking</c><00:08:27.360><c> at</c><00:08:27.510><c> public</c>

00:08:28.159 --> 00:08:28.169 align:start position:0%
jeddah key 9 if you're looking at public
 

00:08:28.169 --> 00:08:31.159 align:start position:0%
jeddah key 9 if you're looking at public
on<00:08:29.100><c> the</c><00:08:29.370><c> class</c><00:08:29.580><c> declaration</c><00:08:30.300><c> it</c><00:08:30.720><c> no</c><00:08:30.960><c> longer</c>

00:08:31.159 --> 00:08:31.169 align:start position:0%
on the class declaration it no longer
 

00:08:31.169 --> 00:08:33.459 align:start position:0%
on the class declaration it no longer
means<00:08:31.500><c> that</c><00:08:31.830><c> everyone</c><00:08:32.430><c> can</c><00:08:32.729><c> access</c><00:08:32.849><c> the</c><00:08:33.240><c> class</c>

00:08:33.459 --> 00:08:33.469 align:start position:0%
means that everyone can access the class
 

00:08:33.469 --> 00:08:36.110 align:start position:0%
means that everyone can access the class
access<00:08:34.469><c> depends</c><00:08:34.979><c> on</c><00:08:35.099><c> whether</c><00:08:35.310><c> the</c><00:08:35.520><c> class</c><00:08:35.820><c> is</c>

00:08:36.110 --> 00:08:36.120 align:start position:0%
access depends on whether the class is
 

00:08:36.120 --> 00:08:42.829 align:start position:0%
access depends on whether the class is
module<00:08:37.130><c> export</c><00:08:38.130><c> the</c><00:08:38.430><c> class's</c><00:08:38.880><c> package</c><00:08:41.839><c> since</c>

00:08:42.829 --> 00:08:42.839 align:start position:0%
module export the class's package since
 

00:08:42.839 --> 00:08:44.930 align:start position:0%
module export the class's package since
Java<00:08:43.080><c> base</c><00:08:43.320><c> is</c><00:08:43.530><c> a</c><00:08:43.560><c> module</c><00:08:43.890><c> let's</c><00:08:44.250><c> reuse</c><00:08:44.730><c> it</c>

00:08:44.930 --> 00:08:44.940 align:start position:0%
Java base is a module let's reuse it
 

00:08:44.940 --> 00:08:46.940 align:start position:0%
Java base is a module let's reuse it
with<00:08:45.540><c> a</c><00:08:45.570><c> module</c><00:08:45.930><c> of</c><00:08:46.050><c> our</c><00:08:46.140><c> own</c>

00:08:46.940 --> 00:08:46.950 align:start position:0%
with a module of our own
 

00:08:46.950 --> 00:08:50.120 align:start position:0%
with a module of our own
here's<00:08:47.610><c> the</c><00:08:47.850><c> simplest</c><00:08:48.360><c> possible</c><00:08:48.780><c> program</c><00:08:49.740><c> in</c>

00:08:50.120 --> 00:08:50.130 align:start position:0%
here's the simplest possible program in
 

00:08:50.130 --> 00:08:54.710 align:start position:0%
here's the simplest possible program in
one<00:08:50.460><c> package</c><00:08:51.260><c> komm</c><00:08:52.260><c> example</c><00:08:52.740><c> hello</c><00:08:53.720><c> let's</c>

00:08:54.710 --> 00:08:54.720 align:start position:0%
one package komm example hello let's
 

00:08:54.720 --> 00:08:56.900 align:start position:0%
one package komm example hello let's
declare<00:08:54.930><c> a</c><00:08:55.500><c> module</c><00:08:55.890><c> to</c><00:08:56.010><c> put</c><00:08:56.370><c> that</c><00:08:56.490><c> package</c><00:08:56.760><c> in</c>

00:08:56.900 --> 00:08:56.910 align:start position:0%
declare a module to put that package in
 

00:08:56.910 --> 00:09:00.380 align:start position:0%
declare a module to put that package in
hello<00:08:57.870><c> world</c><00:08:58.520><c> there's</c><00:08:59.520><c> a</c><00:08:59.640><c> module</c><00:09:00.030><c> in</c><00:09:00.150><c> photo</c>

00:09:00.380 --> 00:09:00.390 align:start position:0%
hello world there's a module in photo
 

00:09:00.390 --> 00:09:02.540 align:start position:0%
hello world there's a module in photo
Java<00:09:00.660><c> file</c><00:09:00.960><c> and</c><00:09:01.230><c> for</c><00:09:01.380><c> sake</c><00:09:01.500><c> of</c><00:09:01.530><c> argument</c><00:09:01.710><c> the</c>

00:09:02.540 --> 00:09:02.550 align:start position:0%
Java file and for sake of argument the
 

00:09:02.550 --> 00:09:04.640 align:start position:0%
Java file and for sake of argument the
module<00:09:02.850><c> will</c><00:09:03.120><c> export</c><00:09:03.690><c> the</c><00:09:03.990><c> calm</c><00:09:04.200><c> example</c>

00:09:04.640 --> 00:09:04.650 align:start position:0%
module will export the calm example
 

00:09:04.650 --> 00:09:07.180 align:start position:0%
module will export the calm example
Hello<00:09:04.860><c> package</c><00:09:05.220><c> with</c><00:09:05.430><c> the</c><00:09:05.580><c> exports</c><00:09:06.120><c> directive</c>

00:09:07.180 --> 00:09:07.190 align:start position:0%
Hello package with the exports directive
 

00:09:07.190 --> 00:09:09.470 align:start position:0%
Hello package with the exports directive
you're<00:09:08.190><c> probably</c><00:09:08.340><c> wondering</c><00:09:08.670><c> how</c><00:09:09.090><c> the</c><00:09:09.150><c> hello</c>

00:09:09.470 --> 00:09:09.480 align:start position:0%
you're probably wondering how the hello
 

00:09:09.480 --> 00:09:12.440 align:start position:0%
you're probably wondering how the hello
world<00:09:09.690><c> module</c><00:09:10.020><c> knows</c><00:09:10.530><c> that</c><00:09:11.370><c> it</c><00:09:11.520><c> has</c><00:09:11.550><c> a</c><00:09:11.760><c> package</c>

00:09:12.440 --> 00:09:12.450 align:start position:0%
world module knows that it has a package
 

00:09:12.450 --> 00:09:14.480 align:start position:0%
world module knows that it has a package
called<00:09:12.780><c> comm</c><00:09:13.140><c> example</c><00:09:13.650><c> hello</c><00:09:13.920><c> after</c><00:09:14.190><c> all</c>

00:09:14.480 --> 00:09:14.490 align:start position:0%
called comm example hello after all
 

00:09:14.490 --> 00:09:17.570 align:start position:0%
called comm example hello after all
nothing<00:09:14.670><c> in</c><00:09:14.940><c> the</c><00:09:15.060><c> package</c><00:09:15.890><c> seems</c><00:09:16.890><c> to</c><00:09:17.070><c> point</c><00:09:17.310><c> to</c>

00:09:17.570 --> 00:09:17.580 align:start position:0%
nothing in the package seems to point to
 

00:09:17.580 --> 00:09:20.840 align:start position:0%
nothing in the package seems to point to
the<00:09:17.760><c> module</c><00:09:18.680><c> it's</c><00:09:19.680><c> up</c><00:09:19.890><c> to</c><00:09:20.070><c> the</c><00:09:20.190><c> tooling</c><00:09:20.640><c> to</c>

00:09:20.840 --> 00:09:20.850 align:start position:0%
the module it's up to the tooling to
 

00:09:20.850 --> 00:09:23.150 align:start position:0%
the module it's up to the tooling to
decide<00:09:21.150><c> during</c><00:09:21.660><c> development</c><00:09:21.840><c> which</c><00:09:22.680><c> module</c>

00:09:23.150 --> 00:09:23.160 align:start position:0%
decide during development which module
 

00:09:23.160 --> 00:09:26.330 align:start position:0%
decide during development which module
each<00:09:23.700><c> package</c><00:09:24.180><c> belongs</c><00:09:24.540><c> to</c><00:09:24.780><c> in</c><00:09:25.020><c> practice</c><00:09:25.950><c> your</c>

00:09:26.330 --> 00:09:26.340 align:start position:0%
each package belongs to in practice your
 

00:09:26.340 --> 00:09:28.730 align:start position:0%
each package belongs to in practice your
IDE<00:09:26.700><c> will</c><00:09:27.030><c> take</c><00:09:27.210><c> care</c><00:09:27.390><c> of</c><00:09:27.450><c> it</c><00:09:27.690><c> you'll</c><00:09:28.320><c> create</c><00:09:28.650><c> a</c>

00:09:28.730 --> 00:09:28.740 align:start position:0%
IDE will take care of it you'll create a
 

00:09:28.740 --> 00:09:31.070 align:start position:0%
IDE will take care of it you'll create a
modular<00:09:29.160><c> job</c><00:09:29.370><c> or</c><00:09:29.490><c> application</c><00:09:30.030><c> be</c><00:09:30.660><c> asked</c><00:09:30.990><c> the</c>

00:09:31.070 --> 00:09:31.080 align:start position:0%
modular job or application be asked the
 

00:09:31.080 --> 00:09:33.020 align:start position:0%
modular job or application be asked the
name<00:09:31.200><c> of</c><00:09:31.350><c> the</c><00:09:31.470><c> module</c><00:09:31.620><c> then</c><00:09:32.340><c> every</c><00:09:32.670><c> package</c>

00:09:33.020 --> 00:09:33.030 align:start position:0%
name of the module then every package
 

00:09:33.030 --> 00:09:34.400 align:start position:0%
name of the module then every package
you<00:09:33.150><c> create</c><00:09:33.480><c> will</c><00:09:33.660><c> just</c><00:09:33.840><c> be</c><00:09:33.930><c> passed</c><00:09:34.140><c> to</c><00:09:34.260><c> that</c>

00:09:34.400 --> 00:09:34.410 align:start position:0%
you create will just be passed to that
 

00:09:34.410 --> 00:09:36.410 align:start position:0%
you create will just be passed to that
module<00:09:34.560><c> let's</c><00:09:35.100><c> know</c><00:09:35.460><c> they're</c><00:09:35.850><c> there</c><00:09:36.090><c> it</c><00:09:36.240><c> just</c>

00:09:36.410 --> 00:09:36.420 align:start position:0%
module let's know they're there it just
 

00:09:36.420 --> 00:09:40.160 align:start position:0%
module let's know they're there it just
happens<00:09:36.720><c> if</c><00:09:37.560><c> you</c><00:09:38.010><c> run</c><00:09:38.190><c> Java</c><00:09:38.460><c> C</c><00:09:38.700><c> by</c><00:09:38.910><c> hands</c><00:09:39.450><c> then</c>

00:09:40.160 --> 00:09:40.170 align:start position:0%
happens if you run Java C by hands then
 

00:09:40.170 --> 00:09:42.410 align:start position:0%
happens if you run Java C by hands then
Java<00:09:40.470><c> C</c><00:09:40.770><c> figures</c><00:09:41.250><c> out</c><00:09:41.430><c> which</c><00:09:41.730><c> module</c><00:09:42.210><c> each</c>

00:09:42.410 --> 00:09:42.420 align:start position:0%
Java C figures out which module each
 

00:09:42.420 --> 00:09:44.390 align:start position:0%
Java C figures out which module each
package<00:09:42.840><c> is</c><00:09:42.960><c> in</c><00:09:43.140><c> that's</c><00:09:43.350><c> why</c><00:09:43.620><c> the</c><00:09:43.680><c> module</c><00:09:44.130><c> info</c>

00:09:44.390 --> 00:09:44.400 align:start position:0%
package is in that's why the module info
 

00:09:44.400 --> 00:09:48.920 align:start position:0%
package is in that's why the module info
Java<00:09:44.820><c> file</c><00:09:45.320><c> is</c><00:09:46.320><c> at</c><00:09:46.590><c> the</c><00:09:46.710><c> same</c><00:09:46.920><c> level</c><00:09:47.370><c> in</c><00:09:47.630><c> SRC</c><00:09:48.630><c> as</c>

00:09:48.920 --> 00:09:48.930 align:start position:0%
Java file is at the same level in SRC as
 

00:09:48.930 --> 00:09:51.410 align:start position:0%
Java file is at the same level in SRC as
the<00:09:49.590><c> common</c><00:09:49.920><c> directory</c><00:09:50.100><c> containing</c><00:09:50.910><c> the</c>

00:09:51.410 --> 00:09:51.420 align:start position:0%
the common directory containing the
 

00:09:51.420 --> 00:09:54.560 align:start position:0%
the common directory containing the
package<00:09:52.490><c> the</c><00:09:53.490><c> benefit</c><00:09:53.910><c> of</c><00:09:54.060><c> relying</c><00:09:54.420><c> on</c>

00:09:54.560 --> 00:09:54.570 align:start position:0%
package the benefit of relying on
 

00:09:54.570 --> 00:09:56.540 align:start position:0%
package the benefit of relying on
tooling<00:09:55.020><c> is</c><00:09:55.230><c> that</c><00:09:55.710><c> it's</c><00:09:55.830><c> really</c><00:09:56.100><c> easy</c><00:09:56.130><c> to</c>

00:09:56.540 --> 00:09:56.550 align:start position:0%
tooling is that it's really easy to
 

00:09:56.550 --> 00:09:58.550 align:start position:0%
tooling is that it's really easy to
place<00:09:56.820><c> an</c><00:09:57.090><c> existing</c><00:09:57.570><c> package</c><00:09:57.960><c> in</c><00:09:58.200><c> a</c><00:09:58.380><c> module</c>

00:09:58.550 --> 00:09:58.560 align:start position:0%
place an existing package in a module
 

00:09:58.560 --> 00:10:01.370 align:start position:0%
place an existing package in a module
and<00:09:59.040><c> immediately</c><00:09:59.940><c> give</c><00:10:00.240><c> that</c><00:10:00.450><c> package</c><00:10:00.930><c> the</c>

00:10:01.370 --> 00:10:01.380 align:start position:0%
and immediately give that package the
 

00:10:01.380 --> 00:10:03.230 align:start position:0%
and immediately give that package the
benefit<00:10:01.860><c> of</c><00:10:01.890><c> strong</c><00:10:02.280><c> encapsulation</c>

00:10:03.230 --> 00:10:03.240 align:start position:0%
benefit of strong encapsulation
 

00:10:03.240 --> 00:10:06.620 align:start position:0%
benefit of strong encapsulation
we<00:10:03.930><c> don't</c><00:10:04.200><c> want</c><00:10:04.560><c> each</c><00:10:04.830><c> and</c><00:10:05.220><c> every</c><00:10:05.580><c> class</c><00:10:05.940><c> to</c>

00:10:06.620 --> 00:10:06.630 align:start position:0%
we don't want each and every class to
 

00:10:06.630 --> 00:10:09.170 align:start position:0%
we don't want each and every class to
have<00:10:06.810><c> to</c><00:10:06.960><c> opt</c><00:10:07.140><c> in</c><00:10:07.470><c> to</c><00:10:08.190><c> strongly</c><00:10:08.430><c> encapsulation</c>

00:10:09.170 --> 00:10:09.180 align:start position:0%
have to opt in to strongly encapsulation
 

00:10:09.180 --> 00:10:11.060 align:start position:0%
have to opt in to strongly encapsulation
by<00:10:09.720><c> declaring</c><00:10:10.200><c> the</c><00:10:10.290><c> module</c><00:10:10.590><c> it</c><00:10:10.710><c> belongs</c><00:10:10.950><c> to</c>

00:10:11.060 --> 00:10:11.070 align:start position:0%
by declaring the module it belongs to
 

00:10:11.070 --> 00:10:14.300 align:start position:0%
by declaring the module it belongs to
that<00:10:11.400><c> would</c><00:10:12.180><c> invite</c><00:10:12.420><c> errors</c><00:10:12.900><c> such</c><00:10:13.680><c> as</c><00:10:13.830><c> classes</c>

00:10:14.300 --> 00:10:14.310 align:start position:0%
that would invite errors such as classes
 

00:10:14.310 --> 00:10:16.220 align:start position:0%
that would invite errors such as classes
in<00:10:14.460><c> the</c><00:10:14.550><c> same</c><00:10:14.700><c> package</c><00:10:15.030><c> attempting</c><00:10:15.930><c> to</c><00:10:16.050><c> join</c>

00:10:16.220 --> 00:10:16.230 align:start position:0%
in the same package attempting to join
 

00:10:16.230 --> 00:10:19.160 align:start position:0%
in the same package attempting to join
different<00:10:16.590><c> modules</c><00:10:17.460><c> that's</c><00:10:18.240><c> a</c><00:10:18.420><c> big</c><00:10:18.600><c> no-no</c><00:10:18.780><c> for</c>

00:10:19.160 --> 00:10:19.170 align:start position:0%
different modules that's a big no-no for
 

00:10:19.170 --> 00:10:22.100 align:start position:0%
different modules that's a big no-no for
reasons<00:10:19.470><c> I'll</c><00:10:19.560><c> mention</c><00:10:19.770><c> later</c><00:10:20.930><c> one</c><00:10:21.930><c> more</c>

00:10:22.100 --> 00:10:22.110 align:start position:0%
reasons I'll mention later one more
 

00:10:22.110 --> 00:10:25.720 align:start position:0%
reasons I'll mention later one more
thing<00:10:22.550><c> the</c><00:10:23.550><c> say</c><00:10:24.060><c> hello</c><00:10:24.240><c> class</c><00:10:24.660><c> in</c><00:10:25.050><c> the</c><00:10:25.320><c> package</c>

00:10:25.720 --> 00:10:25.730 align:start position:0%
thing the say hello class in the package
 

00:10:25.730 --> 00:10:29.120 align:start position:0%
thing the say hello class in the package
imports<00:10:26.730><c> the</c><00:10:26.910><c> java.lang</c><00:10:27.360><c> package</c><00:10:27.980><c> where</c><00:10:28.980><c> is</c>

00:10:29.120 --> 00:10:29.130 align:start position:0%
imports the java.lang package where is
 

00:10:29.130 --> 00:10:33.650 align:start position:0%
imports the java.lang package where is
that<00:10:29.280><c> package</c><00:10:29.820><c> imported</c><00:10:30.720><c> from</c><00:10:32.360><c> now</c><00:10:33.360><c> you</c><00:10:33.420><c> might</c>

00:10:33.650 --> 00:10:33.660 align:start position:0%
that package imported from now you might
 

00:10:33.660 --> 00:10:36.020 align:start position:0%
that package imported from now you might
say<00:10:33.900><c> Alex</c><00:10:34.230><c> the</c><00:10:34.650><c> answer</c><00:10:35.070><c> is</c><00:10:35.190><c> obviously</c><00:10:35.760><c> Java</c>

00:10:36.020 --> 00:10:36.030 align:start position:0%
say Alex the answer is obviously Java
 

00:10:36.030 --> 00:10:38.060 align:start position:0%
say Alex the answer is obviously Java
base<00:10:36.240><c> because</c><00:10:37.050><c> you</c><00:10:37.140><c> told</c><00:10:37.500><c> me</c><00:10:37.650><c> a</c><00:10:37.680><c> minute</c><00:10:37.950><c> ago</c>

00:10:38.060 --> 00:10:38.070 align:start position:0%
base because you told me a minute ago
 

00:10:38.070 --> 00:10:40.490 align:start position:0%
base because you told me a minute ago
the<00:10:38.460><c> Java</c><00:10:38.700><c> based</c><00:10:38.940><c> exports</c><00:10:39.900><c> the</c><00:10:40.050><c> java.lang</c>

00:10:40.490 --> 00:10:40.500 align:start position:0%
the Java based exports the java.lang
 

00:10:40.500 --> 00:10:42.680 align:start position:0%
the Java based exports the java.lang
package<00:10:40.530><c> I</c><00:10:41.250><c> had</c><00:10:41.550><c> a</c><00:10:41.580><c> slide</c><00:10:41.910><c> that</c><00:10:42.090><c> showed</c><00:10:42.270><c> it</c><00:10:42.450><c> and</c>

00:10:42.680 --> 00:10:42.690 align:start position:0%
package I had a slide that showed it and
 

00:10:42.690 --> 00:10:45.110 align:start position:0%
package I had a slide that showed it and
your<00:10:43.530><c> rights</c><00:10:43.740><c> but</c><00:10:44.310><c> how</c><00:10:44.430><c> does</c><00:10:44.490><c> the</c><00:10:44.730><c> compiler</c>

00:10:45.110 --> 00:10:45.120 align:start position:0%
your rights but how does the compiler
 

00:10:45.120 --> 00:10:48.410 align:start position:0%
your rights but how does the compiler
know<00:10:45.480><c> that</c><00:10:45.690><c> in</c><00:10:46.440><c> general</c><00:10:46.920><c> when</c><00:10:47.820><c> you</c><00:10:47.880><c> import</c><00:10:48.300><c> a</c>

00:10:48.410 --> 00:10:48.420 align:start position:0%
know that in general when you import a
 

00:10:48.420 --> 00:10:50.570 align:start position:0%
know that in general when you import a
package<00:10:48.810><c> should</c><00:10:49.410><c> the</c><00:10:49.530><c> compiler</c><00:10:49.890><c> search</c><00:10:50.310><c> the</c>

00:10:50.570 --> 00:10:50.580 align:start position:0%
package should the compiler search the
 

00:10:50.580 --> 00:10:53.030 align:start position:0%
package should the compiler search the
file<00:10:50.820><c> system</c><00:10:51.390><c> looking</c><00:10:52.050><c> for</c><00:10:52.320><c> modules</c><00:10:52.740><c> which</c>

00:10:53.030 --> 00:10:53.040 align:start position:0%
file system looking for modules which
 

00:10:53.040 --> 00:10:54.980 align:start position:0%
file system looking for modules which
export<00:10:53.670><c> to</c><00:10:53.880><c> imported</c><00:10:54.360><c> package</c>

00:10:54.980 --> 00:10:54.990 align:start position:0%
export to imported package
 

00:10:54.990 --> 00:10:57.890 align:start position:0%
export to imported package
what<00:10:55.650><c> if</c><00:10:55.770><c> multiple</c><00:10:56.220><c> modules</c><00:10:56.540><c> export</c><00:10:57.540><c> the</c>

00:10:57.890 --> 00:10:57.900 align:start position:0%
what if multiple modules export the
 

00:10:57.900 --> 00:11:00.590 align:start position:0%
what if multiple modules export the
imported<00:10:58.440><c> package</c><00:10:58.830><c> obviously</c><00:10:59.070><c> java.lang</c><00:10:59.820><c> is</c>

00:11:00.590 --> 00:11:00.600 align:start position:0%
imported package obviously java.lang is
 

00:11:00.600 --> 00:11:02.269 align:start position:0%
imported package obviously java.lang is
a special<00:11:01.019><c> case</c><00:11:01.199><c> but</c><00:11:01.470><c> in</c><00:11:01.589><c> general</c><00:11:01.920><c> how</c><00:11:02.100><c> would</c>

00:11:02.269 --> 00:11:02.279 align:start position:0%
a special case but in general how would
 

00:11:02.279 --> 00:11:04.879 align:start position:0%
a special case but in general how would
a<00:11:02.310><c> compiler</c><00:11:02.730><c> know</c><00:11:03.000><c> which</c><00:11:03.209><c> module</c><00:11:03.829><c> exports</c><00:11:04.829><c> a</c>

00:11:04.879 --> 00:11:04.889 align:start position:0%
a compiler know which module exports a
 

00:11:04.889 --> 00:11:10.069 align:start position:0%
a compiler know which module exports a
package<00:11:06.649><c> if</c><00:11:07.649><c> we</c><00:11:08.310><c> intend</c><00:11:08.759><c> to</c><00:11:08.910><c> reuse</c><00:11:09.480><c> the</c><00:11:09.839><c> Java</c>

00:11:10.069 --> 00:11:10.079 align:start position:0%
package if we intend to reuse the Java
 

00:11:10.079 --> 00:11:12.170 align:start position:0%
package if we intend to reuse the Java
based<00:11:10.319><c> module</c><00:11:10.740><c> we</c><00:11:11.310><c> should</c><00:11:11.519><c> document</c><00:11:11.970><c> that</c>

00:11:12.170 --> 00:11:12.180 align:start position:0%
based module we should document that
 

00:11:12.180 --> 00:11:14.480 align:start position:0%
based module we should document that
fact<00:11:12.680><c> actually</c><00:11:13.680><c> since</c><00:11:13.920><c> we're</c><00:11:14.069><c> writing</c><00:11:14.279><c> a</c>

00:11:14.480 --> 00:11:14.490 align:start position:0%
fact actually since we're writing a
 

00:11:14.490 --> 00:11:16.340 align:start position:0%
fact actually since we're writing a
module<00:11:14.790><c> ourselves</c><00:11:15.300><c> we</c><00:11:15.420><c> must</c><00:11:15.600><c> document</c><00:11:15.959><c> that</c>

00:11:16.340 --> 00:11:16.350 align:start position:0%
module ourselves we must document that
 

00:11:16.350 --> 00:11:18.470 align:start position:0%
module ourselves we must document that
fact<00:11:16.649><c> this</c><00:11:17.310><c> is</c><00:11:17.490><c> the</c><00:11:17.519><c> second</c><00:11:18.000><c> goal</c><00:11:18.209><c> of</c><00:11:18.240><c> the</c>

00:11:18.470 --> 00:11:18.480 align:start position:0%
fact this is the second goal of the
 

00:11:18.480 --> 00:11:21.220 align:start position:0%
fact this is the second goal of the
module<00:11:18.870><c> system</c><00:11:19.019><c> reliable</c><00:11:19.949><c> dependencies</c><00:11:20.699><c> a</c>

00:11:21.220 --> 00:11:21.230 align:start position:0%
module system reliable dependencies a
 

00:11:21.230 --> 00:11:24.470 align:start position:0%
module system reliable dependencies a
module<00:11:22.230><c> isn't</c><00:11:22.740><c> just</c><00:11:22.980><c> a</c><00:11:23.100><c> set</c><00:11:23.250><c> of</c><00:11:23.339><c> packages</c><00:11:23.639><c> it's</c>

00:11:24.470 --> 00:11:24.480 align:start position:0%
module isn't just a set of packages it's
 

00:11:24.480 --> 00:11:26.749 align:start position:0%
module isn't just a set of packages it's
a<00:11:24.630><c> set</c><00:11:24.810><c> of</c><00:11:24.899><c> packages</c><00:11:25.230><c> that</c><00:11:25.529><c> depend</c><00:11:26.250><c> on</c><00:11:26.550><c> the</c>

00:11:26.749 --> 00:11:26.759 align:start position:0%
a set of packages that depend on the
 

00:11:26.759 --> 00:11:30.949 align:start position:0%
a set of packages that depend on the
packages<00:11:27.300><c> exported</c><00:11:28.290><c> by</c><00:11:28.769><c> other</c><00:11:28.980><c> modules</c><00:11:29.959><c> so</c>

00:11:30.949 --> 00:11:30.959 align:start position:0%
packages exported by other modules so
 

00:11:30.959 --> 00:11:34.490 align:start position:0%
packages exported by other modules so
the<00:11:31.620><c> HelloWorld</c><00:11:32.100><c> module</c><00:11:33.110><c> specifies</c><00:11:34.110><c> that</c><00:11:34.380><c> it</c>

00:11:34.490 --> 00:11:34.500 align:start position:0%
the HelloWorld module specifies that it
 

00:11:34.500 --> 00:11:37.579 align:start position:0%
the HelloWorld module specifies that it
reuses<00:11:35.310><c> the</c><00:11:35.790><c> Java</c><00:11:36.029><c> based</c><00:11:36.240><c> module</c><00:11:36.690><c> with</c><00:11:37.560><c> a</c>

00:11:37.579 --> 00:11:37.589 align:start position:0%
reuses the Java based module with a
 

00:11:37.589 --> 00:11:39.949 align:start position:0%
reuses the Java based module with a
requires<00:11:38.130><c> directive</c><00:11:38.850><c> in</c><00:11:39.089><c> its</c><00:11:39.540><c> module</c><00:11:39.870><c> in</c>

00:11:39.949 --> 00:11:39.959 align:start position:0%
requires directive in its module in
 

00:11:39.959 --> 00:11:40.840 align:start position:0%
requires directive in its module in
photo<00:11:40.199><c> Java</c>

00:11:40.840 --> 00:11:40.850 align:start position:0%
photo Java
 

00:11:40.850 --> 00:11:43.189 align:start position:0%
photo Java
this<00:11:41.850><c> means</c><00:11:42.089><c> that</c><00:11:42.209><c> code</c><00:11:42.480><c> in</c><00:11:42.660><c> the</c><00:11:42.750><c> HelloWorld</c>

00:11:43.189 --> 00:11:43.199 align:start position:0%
this means that code in the HelloWorld
 

00:11:43.199 --> 00:11:46.210 align:start position:0%
this means that code in the HelloWorld
module<00:11:43.560><c> can</c><00:11:43.889><c> import</c><00:11:44.339><c> any</c><00:11:44.790><c> of</c><00:11:45.480><c> the</c><00:11:45.600><c> packages</c>

00:11:46.210 --> 00:11:46.220 align:start position:0%
module can import any of the packages
 

00:11:46.220 --> 00:11:48.370 align:start position:0%
module can import any of the packages
exported<00:11:47.220><c> by</c><00:11:47.490><c> Java</c><00:11:47.730><c> base</c>

00:11:48.370 --> 00:11:48.380 align:start position:0%
exported by Java base
 

00:11:48.380 --> 00:11:50.720 align:start position:0%
exported by Java base
what<00:11:49.380><c> happens</c><00:11:49.680><c> if</c><00:11:49.800><c> code</c><00:11:50.009><c> in</c><00:11:50.190><c> hello</c><00:11:50.430><c> world</c>

00:11:50.720 --> 00:11:50.730 align:start position:0%
what happens if code in hello world
 

00:11:50.730 --> 00:11:52.720 align:start position:0%
what happens if code in hello world
tries<00:11:51.149><c> to</c><00:11:51.180><c> import</c><00:11:51.750><c> any</c><00:11:52.019><c> of</c><00:11:52.199><c> the</c><00:11:52.350><c> packages</c>

00:11:52.720 --> 00:11:52.730 align:start position:0%
tries to import any of the packages
 

00:11:52.730 --> 00:11:56.749 align:start position:0%
tries to import any of the packages
conceals<00:11:53.730><c> by</c><00:11:54.600><c> Java</c><00:11:54.870><c> base</c><00:11:55.139><c> such</c><00:11:56.069><c> as</c><00:11:56.100><c> and</c>

00:11:56.749 --> 00:11:56.759 align:start position:0%
conceals by Java base such as and
 

00:11:56.759 --> 00:11:58.129 align:start position:0%
conceals by Java base such as and
there's<00:11:56.940><c> one</c><00:11:57.089><c> in</c><00:11:57.180><c> red</c><00:11:57.360><c> some</c><00:11:57.630><c> security</c>

00:11:58.129 --> 00:11:58.139 align:start position:0%
there's one in red some security
 

00:11:58.139 --> 00:12:02.629 align:start position:0%
there's one in red some security
provider<00:12:00.410><c> here's</c><00:12:01.410><c> a</c><00:12:01.440><c> real</c><00:12:01.649><c> example</c><00:12:02.130><c> of</c><00:12:02.279><c> some</c>

00:12:02.629 --> 00:12:02.639 align:start position:0%
provider here's a real example of some
 

00:12:02.639 --> 00:12:05.960 align:start position:0%
provider here's a real example of some
code<00:12:02.880><c> that</c><00:12:03.180><c> does</c><00:12:03.300><c> that</c><00:12:03.329><c> GlassFish</c><00:12:04.019><c> 4.1</c><00:12:04.970><c> it</c>

00:12:05.960 --> 00:12:05.970 align:start position:0%
code that does that GlassFish 4.1 it
 

00:12:05.970 --> 00:12:08.629 align:start position:0%
code that does that GlassFish 4.1 it
doesn't<00:12:06.329><c> run</c><00:12:06.509><c> on</c><00:12:06.779><c> jdk</c><00:12:07.439><c> 9</c><00:12:07.649><c> because</c><00:12:08.189><c> the</c><00:12:08.310><c> VM</c>

00:12:08.629 --> 00:12:08.639 align:start position:0%
doesn't run on jdk 9 because the VM
 

00:12:08.639 --> 00:12:11.300 align:start position:0%
doesn't run on jdk 9 because the VM
throws<00:12:09.089><c> an</c><00:12:09.269><c> illegal</c><00:12:09.689><c> access</c><00:12:10.110><c> error</c><00:12:10.380><c> the</c><00:12:11.279><c> error</c>

00:12:11.300 --> 00:12:11.310 align:start position:0%
throws an illegal access error the error
 

00:12:11.310 --> 00:12:15.170 align:start position:0%
throws an illegal access error the error
message<00:12:11.910><c> is</c><00:12:12.290><c> a</c><00:12:13.290><c> class</c><00:12:13.800><c> concern</c><00:12:14.639><c> enterprise</c>

00:12:15.170 --> 00:12:15.180 align:start position:0%
message is a class concern enterprise
 

00:12:15.180 --> 00:12:17.090 align:start position:0%
message is a class concern enterprise
security<00:12:15.449><c> provide</c><00:12:16.079><c> a</c><00:12:16.110><c> policy</c><00:12:16.319><c> wrapper</c><00:12:16.769><c> in</c>

00:12:17.090 --> 00:12:17.100 align:start position:0%
security provide a policy wrapper in
 

00:12:17.100 --> 00:12:19.429 align:start position:0%
security provide a policy wrapper in
module<00:12:18.089><c> unnamed</c><00:12:18.660><c> module</c><00:12:19.079><c> don't</c><00:12:19.350><c> worry</c>

00:12:19.429 --> 00:12:19.439 align:start position:0%
module unnamed module don't worry
 

00:12:19.439 --> 00:12:22.490 align:start position:0%
module unnamed module don't worry
bailout<00:12:20.000><c> cannot</c><00:12:21.000><c> access</c><00:12:21.509><c> class</c><00:12:22.019><c> some</c>

00:12:22.490 --> 00:12:22.500 align:start position:0%
bailout cannot access class some
 

00:12:22.500 --> 00:12:25.400 align:start position:0%
bailout cannot access class some
security<00:12:23.130><c> provide</c><00:12:23.519><c> a</c><00:12:23.550><c> policy</c><00:12:23.850><c> file</c><00:12:24.269><c> in</c><00:12:24.600><c> module</c>

00:12:25.400 --> 00:12:25.410 align:start position:0%
security provide a policy file in module
 

00:12:25.410 --> 00:12:30.530 align:start position:0%
security provide a policy file in module
Java<00:12:25.709><c> base</c><00:12:27.470><c> now</c><00:12:28.470><c> a</c><00:12:28.709><c> glance</c><00:12:29.339><c> at</c><00:12:29.790><c> the</c><00:12:30.000><c> open</c><00:12:30.360><c> JDK</c>

00:12:30.530 --> 00:12:30.540 align:start position:0%
Java base now a glance at the open JDK
 

00:12:30.540 --> 00:12:33.530 align:start position:0%
Java base now a glance at the open JDK
repository<00:12:31.470><c> shows</c><00:12:32.189><c> us</c><00:12:32.430><c> that</c><00:12:32.610><c> the</c><00:12:32.819><c> policy</c><00:12:33.329><c> file</c>

00:12:33.530 --> 00:12:33.540 align:start position:0%
repository shows us that the policy file
 

00:12:33.540 --> 00:12:35.870 align:start position:0%
repository shows us that the policy file
class<00:12:33.839><c> is</c><00:12:34.079><c> declared</c><00:12:34.439><c> public</c><00:12:34.860><c> in</c><00:12:35.069><c> the</c><00:12:35.730><c> sun</c>

00:12:35.870 --> 00:12:35.880 align:start position:0%
class is declared public in the sun
 

00:12:35.880 --> 00:12:38.300 align:start position:0%
class is declared public in the sun
security<00:12:36.389><c> provider</c><00:12:36.720><c> package</c><00:12:37.110><c> but</c><00:12:37.980><c> because</c>

00:12:38.300 --> 00:12:38.310 align:start position:0%
security provider package but because
 

00:12:38.310 --> 00:12:40.610 align:start position:0%
security provider package but because
that<00:12:38.490><c> package</c><00:12:38.939><c> is</c><00:12:39.089><c> not</c><00:12:39.329><c> exported</c><00:12:40.170><c> by</c><00:12:40.319><c> java</c>

00:12:40.610 --> 00:12:40.620 align:start position:0%
that package is not exported by java
 

00:12:40.620 --> 00:12:44.030 align:start position:0%
that package is not exported by java
base<00:12:41.329><c> policy</c><00:12:42.329><c> file</c><00:12:42.600><c> is</c><00:12:42.839><c> only</c><00:12:43.139><c> accessible</c><00:12:43.589><c> from</c>

00:12:44.030 --> 00:12:44.040 align:start position:0%
base policy file is only accessible from
 

00:12:44.040 --> 00:12:47.509 align:start position:0%
base policy file is only accessible from
code<00:12:44.310><c> in</c><00:12:44.519><c> java</c><00:12:44.730><c> base</c><00:12:44.970><c> itself</c><00:12:46.040><c> so</c><00:12:47.040><c> to</c><00:12:47.100><c> be</c><00:12:47.279><c> clear</c>

00:12:47.509 --> 00:12:47.519 align:start position:0%
code in java base itself so to be clear
 

00:12:47.519 --> 00:12:49.999 align:start position:0%
code in java base itself so to be clear
in<00:12:47.730><c> jetty</c><00:12:47.880><c> k9</c><00:12:48.240><c> the</c><00:12:48.899><c> GlassFish</c><00:12:49.380><c> code</c><00:12:49.620><c> cannot</c>

00:12:49.999 --> 00:12:50.009 align:start position:0%
in jetty k9 the GlassFish code cannot
 

00:12:50.009 --> 00:12:52.370 align:start position:0%
in jetty k9 the GlassFish code cannot
access<00:12:50.519><c> the</c><00:12:50.759><c> public</c><00:12:51.180><c> policy</c><00:12:51.630><c> file</c><00:12:51.810><c> class</c><00:12:52.079><c> at</c>

00:12:52.370 --> 00:12:52.380 align:start position:0%
access the public policy file class at
 

00:12:52.380 --> 00:12:55.129 align:start position:0%
access the public policy file class at
compile<00:12:52.949><c> time</c><00:12:52.980><c> or</c><00:12:53.519><c> runtime</c><00:12:54.120><c> it's</c><00:12:54.720><c> exactly</c>

00:12:55.129 --> 00:12:55.139 align:start position:0%
compile time or runtime it's exactly
 

00:12:55.139 --> 00:12:57.410 align:start position:0%
compile time or runtime it's exactly
like<00:12:55.410><c> trying</c><00:12:55.920><c> to</c><00:12:56.040><c> access</c><00:12:56.189><c> a</c><00:12:56.399><c> package</c><00:12:56.939><c> private</c>

00:12:57.410 --> 00:12:57.420 align:start position:0%
like trying to access a package private
 

00:12:57.420 --> 00:12:59.569 align:start position:0%
like trying to access a package private
class<00:12:57.660><c> from</c><00:12:57.899><c> outside</c><00:12:58.230><c> the</c><00:12:58.319><c> package</c><00:12:58.620><c> Java</c><00:12:59.370><c> C</c>

00:12:59.569 --> 00:12:59.579 align:start position:0%
class from outside the package Java C
 

00:12:59.579 --> 00:13:01.519 align:start position:0%
class from outside the package Java C
gives<00:12:59.759><c> an</c><00:12:59.880><c> error</c><00:13:00.029><c> the</c><00:13:00.540><c> VM</c><00:13:00.779><c> throws</c><00:13:01.050><c> in</c><00:13:01.199><c> a</c><00:13:01.259><c> legal</c>

00:13:01.519 --> 00:13:01.529 align:start position:0%
gives an error the VM throws in a legal
 

00:13:01.529 --> 00:13:03.949 align:start position:0%
gives an error the VM throws in a legal
access<00:13:01.829><c> error</c><00:13:02.329><c> GlassFish</c><00:13:03.329><c> will</c><00:13:03.480><c> need</c><00:13:03.630><c> to</c><00:13:03.750><c> find</c>

00:13:03.949 --> 00:13:03.959 align:start position:0%
access error GlassFish will need to find
 

00:13:03.959 --> 00:13:07.340 align:start position:0%
access error GlassFish will need to find
a<00:13:04.110><c> supported</c><00:13:04.800><c> API</c><00:13:05.220><c> not</c><00:13:06.089><c> a</c><00:13:06.120><c> Sun</c><00:13:06.480><c> dot</c><00:13:06.689><c> star</c><00:13:06.959><c> API</c>

00:13:07.340 --> 00:13:07.350 align:start position:0%
a supported API not a Sun dot star API
 

00:13:07.350 --> 00:13:10.730 align:start position:0%
a supported API not a Sun dot star API
to<00:13:07.740><c> do</c><00:13:07.860><c> its</c><00:13:08.009><c> work</c>

00:13:10.730 --> 00:13:10.740 align:start position:0%
 
 

00:13:10.740 --> 00:13:12.980 align:start position:0%
 
I'd<00:13:11.160><c> like</c><00:13:11.339><c> to</c><00:13:11.459><c> return</c><00:13:11.730><c> to</c><00:13:12.089><c> the</c><00:13:12.330><c> module</c><00:13:12.570><c> Inferno</c>

00:13:12.980 --> 00:13:12.990 align:start position:0%
I'd like to return to the module Inferno
 

00:13:12.990 --> 00:13:15.380 align:start position:0%
I'd like to return to the module Inferno
Java<00:13:13.230><c> file</c><00:13:13.560><c> that</c><00:13:14.070><c> declares</c><00:13:14.520><c> the</c><00:13:14.940><c> hello</c><00:13:15.149><c> world</c>

00:13:15.380 --> 00:13:15.390 align:start position:0%
Java file that declares the hello world
 

00:13:15.390 --> 00:13:17.750 align:start position:0%
Java file that declares the hello world
module<00:13:16.010><c> it's</c><00:13:17.010><c> really</c><00:13:17.279><c> important</c><00:13:17.700><c> to</c>

00:13:17.750 --> 00:13:17.760 align:start position:0%
module it's really important to
 

00:13:17.760 --> 00:13:19.730 align:start position:0%
module it's really important to
understand<00:13:18.270><c> that</c><00:13:18.480><c> a</c><00:13:18.630><c> module</c><00:13:18.839><c> exports</c>

00:13:19.730 --> 00:13:19.740 align:start position:0%
understand that a module exports
 

00:13:19.740 --> 00:13:26.690 align:start position:0%
understand that a module exports
packages<00:13:20.720><c> but</c><00:13:21.720><c> it</c><00:13:21.839><c> requires</c><00:13:22.320><c> modules</c><00:13:25.700><c> the</c>

00:13:26.690 --> 00:13:26.700 align:start position:0%
packages but it requires modules the
 

00:13:26.700 --> 00:13:28.460 align:start position:0%
packages but it requires modules the
reason<00:13:27.149><c> is</c><00:13:27.270><c> due</c><00:13:27.510><c> to</c><00:13:27.690><c> an</c><00:13:27.779><c> old</c><00:13:27.930><c> software</c>

00:13:28.460 --> 00:13:28.470 align:start position:0%
reason is due to an old software
 

00:13:28.470 --> 00:13:30.740 align:start position:0%
reason is due to an old software
engineering<00:13:28.830><c> principle</c><00:13:29.370><c> the</c><00:13:29.820><c> unit</c><00:13:30.209><c> of</c><00:13:30.360><c> reuse</c>

00:13:30.740 --> 00:13:30.750 align:start position:0%
engineering principle the unit of reuse
 

00:13:30.750 --> 00:13:34.460 align:start position:0%
engineering principle the unit of reuse
is<00:13:31.140><c> the</c><00:13:31.560><c> unit</c><00:13:31.920><c> of</c><00:13:32.100><c> release</c><00:13:32.720><c> the</c><00:13:33.720><c> principle</c><00:13:34.260><c> is</c>

00:13:34.460 --> 00:13:34.470 align:start position:0%
is the unit of release the principle is
 

00:13:34.470 --> 00:13:37.400 align:start position:0%
is the unit of release the principle is
about<00:13:34.980><c> separation</c><00:13:35.250><c> of</c><00:13:35.700><c> concerns</c><00:13:35.880><c> you</c><00:13:36.750><c> reuse</c>

00:13:37.400 --> 00:13:37.410 align:start position:0%
about separation of concerns you reuse
 

00:13:37.410 --> 00:13:40.220 align:start position:0%
about separation of concerns you reuse
someone's<00:13:38.310><c> code</c><00:13:38.610><c> not</c><00:13:39.089><c> by</c><00:13:39.240><c> copy</c><00:13:39.540><c> pasting</c><00:13:40.110><c> it</c>

00:13:40.220 --> 00:13:40.230 align:start position:0%
someone's code not by copy pasting it
 

00:13:40.230 --> 00:13:42.410 align:start position:0%
someone's code not by copy pasting it
into<00:13:40.529><c> your</c><00:13:40.649><c> own</c><00:13:40.680><c> source</c><00:13:41.100><c> tree</c><00:13:41.370><c> but</c><00:13:42.270><c> by</c>

00:13:42.410 --> 00:13:42.420 align:start position:0%
into your own source tree but by
 

00:13:42.420 --> 00:13:45.199 align:start position:0%
into your own source tree but by
depending<00:13:43.110><c> in</c><00:13:43.320><c> some</c><00:13:43.770><c> way</c><00:13:43.950><c> on</c><00:13:44.190><c> the</c><00:13:44.640><c> black</c><00:13:44.850><c> box</c>

00:13:45.199 --> 00:13:45.209 align:start position:0%
depending in some way on the black box
 

00:13:45.209 --> 00:13:48.800 align:start position:0%
depending in some way on the black box
artifact<00:13:45.899><c> released</c><00:13:46.529><c> by</c><00:13:46.830><c> someone</c><00:13:47.190><c> else</c><00:13:47.630><c> now</c><00:13:48.630><c> in</c>

00:13:48.800 --> 00:13:48.810 align:start position:0%
artifact released by someone else now in
 

00:13:48.810 --> 00:13:50.990 align:start position:0%
artifact released by someone else now in
the<00:13:48.899><c> Java</c><00:13:49.140><c> ecosystem</c><00:13:49.890><c> there's</c><00:13:50.399><c> no</c><00:13:50.520><c> question</c>

00:13:50.990 --> 00:13:51.000 align:start position:0%
the Java ecosystem there's no question
 

00:13:51.000 --> 00:13:54.079 align:start position:0%
the Java ecosystem there's no question
that<00:13:51.029><c> the</c><00:13:51.330><c> unit</c><00:13:51.720><c> of</c><00:13:51.870><c> release</c><00:13:52.430><c> is</c><00:13:53.430><c> a</c><00:13:53.490><c> jar</c><00:13:53.850><c> file</c>

00:13:54.079 --> 00:13:54.089 align:start position:0%
that the unit of release is a jar file
 

00:13:54.089 --> 00:13:57.110 align:start position:0%
that the unit of release is a jar file
that<00:13:54.360><c> doesn't</c><00:13:55.290><c> change</c><00:13:55.470><c> with</c><00:13:55.680><c> modules</c><00:13:56.100><c> a</c><00:13:56.370><c> jar</c>

00:13:57.110 --> 00:13:57.120 align:start position:0%
that doesn't change with modules a jar
 

00:13:57.120 --> 00:13:59.180 align:start position:0%
that doesn't change with modules a jar
file<00:13:57.390><c> as</c><00:13:57.990><c> HelloWorld</c><00:13:58.230><c> aa</c><00:13:58.649><c> jar</c><00:13:58.890><c> that's</c><00:13:59.070><c> what</c>

00:13:59.180 --> 00:13:59.190 align:start position:0%
file as HelloWorld aa jar that's what
 

00:13:59.190 --> 00:14:01.550 align:start position:0%
file as HelloWorld aa jar that's what
you<00:13:59.250><c> built</c><00:13:59.459><c> today</c><00:13:59.640><c> simply</c><00:14:00.630><c> carries</c><00:14:01.200><c> the</c>

00:14:01.550 --> 00:14:01.560 align:start position:0%
you built today simply carries the
 

00:14:01.560 --> 00:14:04.610 align:start position:0%
you built today simply carries the
module<00:14:02.040><c> info</c><00:14:02.459><c> dot</c><00:14:02.640><c> class</c><00:14:03.060><c> file</c><00:14:03.589><c> that</c><00:14:04.589><c> a</c>

00:14:04.610 --> 00:14:04.620 align:start position:0%
module info dot class file that a
 

00:14:04.620 --> 00:14:06.410 align:start position:0%
module info dot class file that a
compiler<00:14:05.070><c> produced</c><00:14:05.550><c> from</c><00:14:05.790><c> module</c><00:14:05.910><c> in</c><00:14:06.209><c> photo</c>

00:14:06.410 --> 00:14:06.420 align:start position:0%
compiler produced from module in photo
 

00:14:06.420 --> 00:14:09.410 align:start position:0%
compiler produced from module in photo
Java<00:14:06.740><c> alongside</c><00:14:07.740><c> an</c><00:14:08.459><c> ordinary</c><00:14:08.910><c> class</c><00:14:09.120><c> files</c>

00:14:09.410 --> 00:14:09.420 align:start position:0%
Java alongside an ordinary class files
 

00:14:09.420 --> 00:14:12.079 align:start position:0%
Java alongside an ordinary class files
like<00:14:09.690><c> say</c><00:14:09.870><c> hello</c><00:14:09.990><c> we</c><00:14:10.860><c> call</c><00:14:11.100><c> this</c><00:14:11.279><c> a</c><00:14:11.339><c> modular</c>

00:14:12.079 --> 00:14:12.089 align:start position:0%
like say hello we call this a modular
 

00:14:12.089 --> 00:14:16.970 align:start position:0%
like say hello we call this a modular
jar<00:14:13.760><c> so</c><00:14:14.760><c> when</c><00:14:15.570><c> someone</c><00:14:15.930><c> releases</c><00:14:16.380><c> a</c><00:14:16.410><c> modular</c>

00:14:16.970 --> 00:14:16.980 align:start position:0%
jar so when someone releases a modular
 

00:14:16.980 --> 00:14:20.600 align:start position:0%
jar so when someone releases a modular
jar<00:14:17.190><c> for</c><00:14:17.730><c> their</c><00:14:17.850><c> module</c><00:14:18.180><c> its</c><00:14:19.110><c> reused</c><00:14:19.800><c> by</c>

00:14:20.600 --> 00:14:20.610 align:start position:0%
jar for their module its reused by
 

00:14:20.610 --> 00:14:23.600 align:start position:0%
jar for their module its reused by
someone<00:14:21.089><c> else</c><00:14:21.770><c> writing</c><00:14:22.770><c> requires</c><00:14:23.220><c> hello</c>

00:14:23.600 --> 00:14:23.610 align:start position:0%
someone else writing requires hello
 

00:14:23.610 --> 00:14:25.810 align:start position:0%
someone else writing requires hello
world<00:14:23.850><c> in</c><00:14:24.180><c> their</c><00:14:24.450><c> own</c><00:14:24.480><c> module</c><00:14:24.959><c> in</c><00:14:25.079><c> futur</c><00:14:25.380><c> Java</c>

00:14:25.810 --> 00:14:25.820 align:start position:0%
world in their own module in futur Java
 

00:14:25.820 --> 00:14:29.449 align:start position:0%
world in their own module in futur Java
the<00:14:26.820><c> re</c><00:14:27.060><c> user</c><00:14:27.410><c> benefits</c><00:14:28.410><c> from</c><00:14:28.649><c> an</c><00:14:28.800><c> explicit</c>

00:14:29.449 --> 00:14:29.459 align:start position:0%
the re user benefits from an explicit
 

00:14:29.459 --> 00:14:32.840 align:start position:0%
the re user benefits from an explicit
coherent<00:14:30.329><c> API</c><00:14:30.980><c> consisting</c><00:14:31.980><c> of</c><00:14:32.040><c> precisely</c><00:14:32.490><c> the</c>

00:14:32.840 --> 00:14:32.850 align:start position:0%
coherent API consisting of precisely the
 

00:14:32.850 --> 00:14:37.430 align:start position:0%
coherent API consisting of precisely the
exported<00:14:33.480><c> packages</c><00:14:34.310><c> the</c><00:14:35.310><c> releaser</c><00:14:36.440><c> benefits</c>

00:14:37.430 --> 00:14:37.440 align:start position:0%
exported packages the releaser benefits
 

00:14:37.440 --> 00:14:39.500 align:start position:0%
exported packages the releaser benefits
from<00:14:37.620><c> strong</c><00:14:37.950><c> encapsulation</c><00:14:38.610><c> of</c><00:14:38.940><c> conceals</c>

00:14:39.500 --> 00:14:39.510 align:start position:0%
from strong encapsulation of conceals
 

00:14:39.510 --> 00:14:42.079 align:start position:0%
from strong encapsulation of conceals
packages<00:14:40.140><c> inside</c><00:14:41.130><c> the</c><00:14:41.370><c> module</c><00:14:41.520><c> which</c>

00:14:42.079 --> 00:14:42.089 align:start position:0%
packages inside the module which
 

00:14:42.089 --> 00:14:44.870 align:start position:0%
packages inside the module which
underpin<00:14:43.020><c> the</c><00:14:43.200><c> API</c><00:14:43.470><c> even</c><00:14:44.399><c> if</c><00:14:44.490><c> there's</c><00:14:44.670><c> high</c>

00:14:44.870 --> 00:14:44.880 align:start position:0%
underpin the API even if there's high
 

00:14:44.880 --> 00:14:47.660 align:start position:0%
underpin the API even if there's high
coupling<00:14:45.450><c> inside</c><00:14:46.020><c> a</c><00:14:46.050><c> module</c><00:14:46.440><c> there's</c><00:14:47.339><c> loose</c>

00:14:47.660 --> 00:14:47.670 align:start position:0%
coupling inside a module there's loose
 

00:14:47.670 --> 00:14:49.819 align:start position:0%
coupling inside a module there's loose
coupling<00:14:47.970><c> between</c><00:14:48.390><c> modules</c><00:14:48.750><c> that's</c><00:14:49.620><c> another</c>

00:14:49.819 --> 00:14:49.829 align:start position:0%
coupling between modules that's another
 

00:14:49.829 --> 00:14:52.639 align:start position:0%
coupling between modules that's another
good<00:14:50.220><c> software</c><00:14:50.579><c> engineering</c><00:14:50.910><c> principle</c><00:14:51.649><c> so</c>

00:14:52.639 --> 00:14:52.649 align:start position:0%
good software engineering principle so
 

00:14:52.649 --> 00:14:55.100 align:start position:0%
good software engineering principle so
as<00:14:52.980><c> the</c><00:14:53.490><c> release</c><00:14:53.970><c> are</c><00:14:54.209><c> you're</c><00:14:54.420><c> exporting</c>

00:14:55.100 --> 00:14:55.110 align:start position:0%
as the release are you're exporting
 

00:14:55.110 --> 00:14:56.960 align:start position:0%
as the release are you're exporting
packages<00:14:55.800><c> but</c><00:14:56.010><c> as</c><00:14:56.100><c> the</c><00:14:56.220><c> reuse</c><00:14:56.579><c> err</c><00:14:56.610><c> you're</c>

00:14:56.960 --> 00:14:56.970 align:start position:0%
packages but as the reuse err you're
 

00:14:56.970 --> 00:15:03.290 align:start position:0%
packages but as the reuse err you're
you're<00:14:57.529><c> consuming</c><00:14:58.529><c> modules</c><00:15:00.200><c> ok</c><00:15:01.910><c> so</c><00:15:02.910><c> you</c><00:15:02.970><c> want</c>

00:15:03.290 --> 00:15:03.300 align:start position:0%
you're consuming modules ok so you want
 

00:15:03.300 --> 00:15:04.910 align:start position:0%
you're consuming modules ok so you want
to<00:15:03.510><c> require</c><00:15:03.839><c> Java</c><00:15:04.110><c> base</c><00:15:04.410><c> from</c><00:15:04.800><c> your</c>

00:15:04.910 --> 00:15:04.920 align:start position:0%
to require Java base from your
 

00:15:04.920 --> 00:15:08.000 align:start position:0%
to require Java base from your
HelloWorld<00:15:05.339><c> module</c><00:15:05.870><c> when</c><00:15:06.870><c> you</c><00:15:07.110><c> say</c><00:15:07.380><c> requires</c>

00:15:08.000 --> 00:15:08.010 align:start position:0%
HelloWorld module when you say requires
 

00:15:08.010 --> 00:15:11.060 align:start position:0%
HelloWorld module when you say requires
Java<00:15:08.459><c> base</c><00:15:08.700><c> in</c><00:15:09.000><c> module</c><00:15:09.899><c> in</c><00:15:10.050><c> photo</c><00:15:10.230><c> Java</c><00:15:10.560><c> where</c>

00:15:11.060 --> 00:15:11.070 align:start position:0%
Java base in module in photo Java where
 

00:15:11.070 --> 00:15:13.100 align:start position:0%
Java base in module in photo Java where
does<00:15:11.279><c> the</c><00:15:11.430><c> compiler</c><00:15:11.760><c> physically</c><00:15:12.510><c> look</c><00:15:12.690><c> for</c><00:15:12.990><c> it</c>

00:15:13.100 --> 00:15:13.110 align:start position:0%
does the compiler physically look for it
 

00:15:13.110 --> 00:15:16.670 align:start position:0%
does the compiler physically look for it
and<00:15:13.490><c> if</c><00:15:14.490><c> you've</c><00:15:14.940><c> built</c><00:15:15.180><c> the</c><00:15:15.630><c> modular</c><00:15:16.170><c> jar</c><00:15:16.410><c> file</c>

00:15:16.670 --> 00:15:16.680 align:start position:0%
and if you've built the modular jar file
 

00:15:16.680 --> 00:15:19.400 align:start position:0%
and if you've built the modular jar file
for<00:15:17.010><c> HelloWorld</c><00:15:17.430><c> jar</c><00:15:17.910><c> containing</c><00:15:18.900><c> module</c><00:15:19.320><c> in</c>

00:15:19.400 --> 00:15:19.410 align:start position:0%
for HelloWorld jar containing module in
 

00:15:19.410 --> 00:15:21.199 align:start position:0%
for HelloWorld jar containing module in
photo<00:15:19.620><c> class</c><00:15:19.860><c> where</c><00:15:20.310><c> do</c><00:15:20.430><c> you</c><00:15:20.490><c> physically</c><00:15:21.000><c> put</c>

00:15:21.199 --> 00:15:21.209 align:start position:0%
photo class where do you physically put
 

00:15:21.209 --> 00:15:21.730 align:start position:0%
photo class where do you physically put
that<00:15:21.390><c> jar</c>

00:15:21.730 --> 00:15:21.740 align:start position:0%
that jar
 

00:15:21.740 --> 00:15:25.750 align:start position:0%
that jar
well<00:15:22.960><c> JDK</c><00:15:23.960><c> 9</c><00:15:24.170><c> looks</c><00:15:24.650><c> for</c><00:15:24.860><c> modules</c><00:15:25.220><c> in</c><00:15:25.490><c> the</c>

00:15:25.750 --> 00:15:25.760 align:start position:0%
well JDK 9 looks for modules in the
 

00:15:25.760 --> 00:15:30.160 align:start position:0%
well JDK 9 looks for modules in the
system<00:15:26.450><c> image</c><00:15:26.630><c> and</c><00:15:27.020><c> on</c><00:15:27.920><c> the</c><00:15:28.100><c> module</c><00:15:28.580><c> path</c><00:15:29.170><c> the</c>

00:15:30.160 --> 00:15:30.170 align:start position:0%
system image and on the module path the
 

00:15:30.170 --> 00:15:33.160 align:start position:0%
system image and on the module path the
system<00:15:30.530><c> image</c><00:15:30.650><c> is</c><00:15:30.980><c> in</c><00:15:31.610><c> the</c><00:15:32.240><c> JDK</c><00:15:32.660><c> installation</c>

00:15:33.160 --> 00:15:33.170 align:start position:0%
system image is in the JDK installation
 

00:15:33.170 --> 00:15:33.940 align:start position:0%
system image is in the JDK installation
directory

00:15:33.940 --> 00:15:33.950 align:start position:0%
directory
 

00:15:33.950 --> 00:15:37.240 align:start position:0%
directory
it<00:15:34.820><c> contains</c><00:15:35.270><c> Java</c><00:15:35.900><c> base</c><00:15:36.140><c> and</c><00:15:36.500><c> a</c><00:15:36.800><c> few</c><00:15:37.040><c> dozen</c>

00:15:37.240 --> 00:15:37.250 align:start position:0%
it contains Java base and a few dozen
 

00:15:37.250 --> 00:15:41.650 align:start position:0%
it contains Java base and a few dozen
core<00:15:37.910><c> JDK</c><00:15:38.570><c> modules</c><00:15:39.520><c> the</c><00:15:40.520><c> module</c><00:15:40.940><c> path</c><00:15:41.180><c> is</c><00:15:41.450><c> set</c>

00:15:41.650 --> 00:15:41.660 align:start position:0%
core JDK modules the module path is set
 

00:15:41.660 --> 00:15:43.800 align:start position:0%
core JDK modules the module path is set
on<00:15:41.900><c> the</c><00:15:42.080><c> command</c><00:15:42.380><c> line</c><00:15:42.500><c> like</c><00:15:42.980><c> the</c><00:15:43.100><c> class</c><00:15:43.280><c> path</c>

00:15:43.800 --> 00:15:43.810 align:start position:0%
on the command line like the class path
 

00:15:43.810 --> 00:15:46.990 align:start position:0%
on the command line like the class path
except<00:15:44.810><c> that</c><00:15:44.990><c> the</c><00:15:45.110><c> module</c><00:15:45.590><c> path</c><00:15:45.890><c> points</c><00:15:46.790><c> to</c>

00:15:46.990 --> 00:15:47.000 align:start position:0%
except that the module path points to
 

00:15:47.000 --> 00:15:50.400 align:start position:0%
except that the module path points to
directories<00:15:48.190><c> containing</c><00:15:49.190><c> modular</c><00:15:49.670><c> jars</c>

00:15:50.400 --> 00:15:50.410 align:start position:0%
directories containing modular jars
 

00:15:50.410 --> 00:15:53.110 align:start position:0%
directories containing modular jars
rather<00:15:51.410><c> than</c><00:15:51.710><c> the</c><00:15:51.830><c> jars</c><00:15:52.070><c> themselves</c><00:15:52.850><c> which</c><00:15:53.000><c> is</c>

00:15:53.110 --> 00:15:53.120 align:start position:0%
rather than the jars themselves which is
 

00:15:53.120 --> 00:15:54.580 align:start position:0%
rather than the jars themselves which is
pretty<00:15:53.300><c> convenient</c><00:15:53.600><c> it</c><00:15:53.840><c> makes</c><00:15:53.990><c> the</c><00:15:54.170><c> the</c>

00:15:54.580 --> 00:15:54.590 align:start position:0%
pretty convenient it makes the the
 

00:15:54.590 --> 00:15:56.260 align:start position:0%
pretty convenient it makes the the
module<00:15:54.890><c> pastor</c><00:15:55.280><c> says</c><00:15:55.430><c> looking</c><00:15:55.700><c> at</c><00:15:55.820><c> the</c><00:15:56.030><c> libs</c>

00:15:56.260 --> 00:15:56.270 align:start position:0%
module pastor says looking at the libs
 

00:15:56.270 --> 00:15:58.210 align:start position:0%
module pastor says looking at the libs
and<00:15:56.570><c> there's</c><00:15:56.690><c> a</c><00:15:56.780><c> whole</c><00:15:56.960><c> bunch</c><00:15:57.200><c> of</c><00:15:57.410><c> there</c><00:15:58.130><c> are</c>

00:15:58.210 --> 00:15:58.220 align:start position:0%
and there's a whole bunch of there are
 

00:15:58.220 --> 00:16:00.520 align:start position:0%
and there's a whole bunch of there are
hundreds<00:15:58.520><c> of</c><00:15:58.660><c> modular</c><00:15:59.660><c> jars</c><00:15:59.900><c> perhaps</c><00:16:00.260><c> in</c><00:16:00.410><c> each</c>

00:16:00.520 --> 00:16:00.530 align:start position:0%
hundreds of modular jars perhaps in each
 

00:16:00.530 --> 00:16:04.750 align:start position:0%
hundreds of modular jars perhaps in each
directory<00:16:03.010><c> now</c><00:16:04.010><c> the</c><00:16:04.070><c> key</c><00:16:04.340><c> point</c><00:16:04.610><c> about</c>

00:16:04.750 --> 00:16:04.760 align:start position:0%
directory now the key point about
 

00:16:04.760 --> 00:16:07.870 align:start position:0%
directory now the key point about
modules<00:16:05.420><c> requiring</c><00:16:06.050><c> each</c><00:16:06.470><c> other</c><00:16:06.740><c> is</c><00:16:07.070><c> that</c><00:16:07.760><c> the</c>

00:16:07.870 --> 00:16:07.880 align:start position:0%
modules requiring each other is that the
 

00:16:07.880 --> 00:16:09.910 align:start position:0%
modules requiring each other is that the
module<00:16:08.180><c> system</c><00:16:08.540><c> can</c><00:16:08.750><c> check</c><00:16:09.050><c> the</c><00:16:09.260><c> requirements</c>

00:16:09.910 --> 00:16:09.920 align:start position:0%
module system can check the requirements
 

00:16:09.920 --> 00:16:11.650 align:start position:0%
module system can check the requirements
and<00:16:10.160><c> validate</c><00:16:10.730><c> that</c><00:16:10.760><c> a</c><00:16:11.000><c> modular</c><00:16:11.510><c> application</c>

00:16:11.650 --> 00:16:11.660 align:start position:0%
and validate that a modular application
 

00:16:11.660 --> 00:16:15.580 align:start position:0%
and validate that a modular application
is<00:16:12.380><c> sound</c><00:16:13.300><c> once</c><00:16:14.300><c> the</c><00:16:14.480><c> compiler</c><00:16:14.870><c> or</c><00:16:15.140><c> runtime</c>

00:16:15.580 --> 00:16:15.590 align:start position:0%
is sound once the compiler or runtime
 

00:16:15.590 --> 00:16:18.430 align:start position:0%
is sound once the compiler or runtime
has<00:16:15.770><c> found</c><00:16:16.160><c> the</c><00:16:16.850><c> initial</c><00:16:17.210><c> hello</c><00:16:17.750><c> world</c><00:16:18.020><c> module</c>

00:16:18.430 --> 00:16:18.440 align:start position:0%
has found the initial hello world module
 

00:16:18.440 --> 00:16:22.060 align:start position:0%
has found the initial hello world module
my<00:16:19.400><c> not</c><00:16:19.580><c> benign</c><00:16:19.820><c> assembles</c><00:16:20.500><c> in</c><00:16:21.500><c> the</c><00:16:21.740><c> system</c>

00:16:22.060 --> 00:16:22.070 align:start position:0%
my not benign assembles in the system
 

00:16:22.070 --> 00:16:24.250 align:start position:0%
my not benign assembles in the system
image<00:16:22.310><c> or</c><00:16:22.460><c> on</c><00:16:22.580><c> the</c><00:16:22.640><c> module</c><00:16:22.910><c> path</c><00:16:23.090><c> it</c><00:16:23.480><c> performs</c>

00:16:24.250 --> 00:16:24.260 align:start position:0%
image or on the module path it performs
 

00:16:24.260 --> 00:16:26.860 align:start position:0%
image or on the module path it performs
a<00:16:24.350><c> process</c><00:16:24.740><c> called</c><00:16:24.950><c> resolution</c><00:16:25.870><c> resolution</c>

00:16:26.860 --> 00:16:26.870 align:start position:0%
a process called resolution resolution
 

00:16:26.870 --> 00:16:29.950 align:start position:0%
a process called resolution resolution
means<00:16:27.560><c> inspecting</c><00:16:28.400><c> it</c><00:16:28.670><c> requires</c><00:16:29.330><c> directives</c>

00:16:29.950 --> 00:16:29.960 align:start position:0%
means inspecting it requires directives
 

00:16:29.960 --> 00:16:32.560 align:start position:0%
means inspecting it requires directives
and<00:16:30.380><c> finding</c><00:16:31.310><c> those</c><00:16:31.430><c> required</c><00:16:31.880><c> modules</c><00:16:32.390><c> in</c>

00:16:32.560 --> 00:16:32.570 align:start position:0%
and finding those required modules in
 

00:16:32.570 --> 00:16:34.030 align:start position:0%
and finding those required modules in
the<00:16:32.690><c> system</c><00:16:32.960><c> image</c><00:16:33.110><c> or</c><00:16:33.380><c> on</c><00:16:33.470><c> the</c><00:16:33.530><c> module</c><00:16:33.830><c> path</c>

00:16:34.030 --> 00:16:34.040 align:start position:0%
the system image or on the module path
 

00:16:34.040 --> 00:16:35.890 align:start position:0%
the system image or on the module path
and<00:16:34.370><c> then</c><00:16:34.610><c> recursively</c><00:16:34.940><c> resolving</c><00:16:35.720><c> them</c>

00:16:35.890 --> 00:16:35.900 align:start position:0%
and then recursively resolving them
 

00:16:35.900 --> 00:16:39.730 align:start position:0%
and then recursively resolving them
we're<00:16:36.680><c> building</c><00:16:37.070><c> a</c><00:16:37.160><c> graph</c><00:16:37.960><c> whose</c><00:16:38.960><c> nodes</c><00:16:39.020><c> are</c>

00:16:39.730 --> 00:16:39.740 align:start position:0%
we're building a graph whose nodes are
 

00:16:39.740 --> 00:16:42.450 align:start position:0%
we're building a graph whose nodes are
modules<00:16:40.250><c> and</c><00:16:40.580><c> whose</c><00:16:40.850><c> edges</c><00:16:41.360><c> are</c><00:16:41.570><c> the</c><00:16:41.870><c> requires</c>

00:16:42.450 --> 00:16:42.460 align:start position:0%
modules and whose edges are the requires
 

00:16:42.460 --> 00:16:45.730 align:start position:0%
modules and whose edges are the requires
relation<00:16:43.460><c> and</c><00:16:43.730><c> to</c><00:16:44.450><c> be</c><00:16:44.570><c> clear</c><00:16:44.780><c> in</c><00:16:44.960><c> JDK</c><00:16:45.260><c> 9</c><00:16:45.440><c> we</c><00:16:45.620><c> do</c>

00:16:45.730 --> 00:16:45.740 align:start position:0%
relation and to be clear in JDK 9 we do
 

00:16:45.740 --> 00:16:50.070 align:start position:0%
relation and to be clear in JDK 9 we do
this<00:16:45.890><c> at</c><00:16:46.010><c> compile-time</c><00:16:46.370><c> and</c><00:16:46.700><c> run-time</c><00:16:48.940><c> if</c>

00:16:50.070 --> 00:16:50.080 align:start position:0%
this at compile-time and run-time if
 

00:16:50.080 --> 00:16:52.300 align:start position:0%
this at compile-time and run-time if
resolutions<00:16:51.080><c> succeed</c><00:16:51.530><c> you</c><00:16:51.830><c> get</c><00:16:51.950><c> three</c>

00:16:52.300 --> 00:16:52.310 align:start position:0%
resolutions succeed you get three
 

00:16:52.310 --> 00:16:56.530 align:start position:0%
resolutions succeed you get three
guarantees<00:16:53.920><c> first</c><00:16:54.920><c> every</c><00:16:55.850><c> module</c><00:16:56.060><c> that</c><00:16:56.450><c> is</c>

00:16:56.530 --> 00:16:56.540 align:start position:0%
guarantees first every module that is
 

00:16:56.540 --> 00:17:00.100 align:start position:0%
guarantees first every module that is
required<00:16:57.050><c> is</c><00:16:57.950><c> available</c><00:16:58.780><c> okay</c><00:16:59.780><c> pretty</c>

00:17:00.100 --> 00:17:00.110 align:start position:0%
required is available okay pretty
 

00:17:00.110 --> 00:17:02.080 align:start position:0%
required is available okay pretty
obvious<00:17:00.500><c> but</c><00:17:01.040><c> a</c><00:17:01.100><c> big</c><00:17:01.280><c> improvement</c><00:17:01.790><c> over</c><00:17:01.880><c> the</c>

00:17:02.080 --> 00:17:02.090 align:start position:0%
obvious but a big improvement over the
 

00:17:02.090 --> 00:17:03.850 align:start position:0%
obvious but a big improvement over the
class<00:17:02.270><c> path</c><00:17:02.540><c> where</c><00:17:03.200><c> you</c><00:17:03.350><c> don't</c><00:17:03.560><c> discover</c>

00:17:03.850 --> 00:17:03.860 align:start position:0%
class path where you don't discover
 

00:17:03.860 --> 00:17:08.440 align:start position:0%
class path where you don't discover
missing<00:17:04.280><c> jars</c><00:17:04.550><c> until</c><00:17:05.300><c> later</c><00:17:06.430><c> seconds</c><00:17:07.450><c> modules</c>

00:17:08.440 --> 00:17:08.450 align:start position:0%
missing jars until later seconds modules
 

00:17:08.450 --> 00:17:11.400 align:start position:0%
missing jars until later seconds modules
don't<00:17:08.930><c> depend</c><00:17:09.470><c> on</c><00:17:09.650><c> each</c><00:17:09.770><c> other</c><00:17:10.040><c> in</c><00:17:10.340><c> a</c><00:17:10.610><c> cycle</c>

00:17:11.400 --> 00:17:11.410 align:start position:0%
don't depend on each other in a cycle
 

00:17:11.410 --> 00:17:14.110 align:start position:0%
don't depend on each other in a cycle
cyclic<00:17:12.410><c> dependencies</c><00:17:13.070><c> are</c><00:17:13.340><c> a</c><00:17:13.370><c> design</c><00:17:13.790><c> smell</c>

00:17:14.110 --> 00:17:14.120 align:start position:0%
cyclic dependencies are a design smell
 

00:17:14.120 --> 00:17:16.300 align:start position:0%
cyclic dependencies are a design smell
and<00:17:14.360><c> we're</c><00:17:15.020><c> taking</c><00:17:15.170><c> the</c><00:17:15.410><c> opportunity</c><00:17:15.500><c> to</c>

00:17:16.300 --> 00:17:16.310 align:start position:0%
and we're taking the opportunity to
 

00:17:16.310 --> 00:17:19.240 align:start position:0%
and we're taking the opportunity to
prohibit<00:17:17.000><c> them</c><00:17:17.180><c> in</c><00:17:17.300><c> modules</c><00:17:17.750><c> from</c><00:17:18.410><c> day</c><00:17:18.650><c> one</c><00:17:18.950><c> of</c>

00:17:19.240 --> 00:17:19.250 align:start position:0%
prohibit them in modules from day one of
 

00:17:19.250 --> 00:17:23.020 align:start position:0%
prohibit them in modules from day one of
JDK<00:17:19.790><c> 9</c><00:17:20.620><c> now</c><00:17:21.620><c> some</c><00:17:21.830><c> of</c><00:17:21.860><c> you</c><00:17:22.040><c> are</c><00:17:22.070><c> thinking</c><00:17:22.220><c> Alex</c>

00:17:23.020 --> 00:17:23.030 align:start position:0%
JDK 9 now some of you are thinking Alex
 

00:17:23.030 --> 00:17:24.550 align:start position:0%
JDK 9 now some of you are thinking Alex
this<00:17:23.210><c> is</c><00:17:23.390><c> just</c><00:17:23.660><c> dependency</c><00:17:24.260><c> management</c>

00:17:24.550 --> 00:17:24.560 align:start position:0%
this is just dependency management
 

00:17:24.560 --> 00:17:26.260 align:start position:0%
this is just dependency management
haven't<00:17:25.010><c> you</c><00:17:25.070><c> heard</c><00:17:25.250><c> of</c><00:17:25.370><c> maven</c><00:17:25.730><c> who</c><00:17:26.120><c> is</c>

00:17:26.260 --> 00:17:26.270 align:start position:0%
haven't you heard of maven who is
 

00:17:26.270 --> 00:17:29.300 align:start position:0%
haven't you heard of maven who is
thinking<00:17:26.570><c> that</c><00:17:27.670><c> you're</c><00:17:28.670><c> definitely</c><00:17:29.000><c> not</c>

00:17:29.300 --> 00:17:29.310 align:start position:0%
thinking that you're definitely not
 

00:17:29.310 --> 00:17:30.740 align:start position:0%
thinking that you're definitely not
but<00:17:29.850><c> definitely</c><00:17:30.030><c> not</c><00:17:30.300><c> thinking</c><00:17:30.450><c> of</c><00:17:30.660><c> an</c>

00:17:30.740 --> 00:17:30.750 align:start position:0%
but definitely not thinking of an
 

00:17:30.750 --> 00:17:36.590 align:start position:0%
but definitely not thinking of an
elephant<00:17:31.080><c> you're</c><00:17:31.170><c> not</c><00:17:31.320><c> thinking</c><00:17:35.330><c> sure</c>

00:17:36.590 --> 00:17:36.600 align:start position:0%
elephant you're not thinking sure
 

00:17:36.600 --> 00:17:41.600 align:start position:0%
elephant you're not thinking sure
cyclic<00:17:36.990><c> dependences</c><00:17:37.470><c> are</c><00:17:38.750><c> well</c><00:17:39.750><c> yeah</c><00:17:40.040><c> now</c><00:17:41.040><c> let</c>

00:17:41.600 --> 00:17:41.610 align:start position:0%
cyclic dependences are well yeah now let
 

00:17:41.610 --> 00:17:43.250 align:start position:0%
cyclic dependences are well yeah now let
me<00:17:41.670><c> say</c><00:17:41.820><c> maven</c><00:17:42.240><c> only</c><00:17:42.630><c> works</c><00:17:42.810><c> at</c><00:17:42.990><c> compile</c><00:17:43.230><c> time</c>

00:17:43.250 --> 00:17:43.260 align:start position:0%
me say maven only works at compile time
 

00:17:43.260 --> 00:17:45.680 align:start position:0%
me say maven only works at compile time
and<00:17:43.650><c> this</c><00:17:44.400><c> resolution</c><00:17:44.670><c> process</c><00:17:45.270><c> works</c><00:17:45.480><c> at</c>

00:17:45.680 --> 00:17:45.690 align:start position:0%
and this resolution process works at
 

00:17:45.690 --> 00:17:48.950 align:start position:0%
and this resolution process works at
runtime<00:17:45.900><c> as</c><00:17:46.350><c> well</c><00:17:47.030><c> but</c><00:17:48.030><c> more</c><00:17:48.270><c> importantly</c><00:17:48.750><c> let</c>

00:17:48.950 --> 00:17:48.960 align:start position:0%
runtime as well but more importantly let
 

00:17:48.960 --> 00:17:50.990 align:start position:0%
runtime as well but more importantly let
me<00:17:49.080><c> come</c><00:17:49.290><c> to</c><00:17:49.530><c> resolutions</c><00:17:50.100><c> third</c><00:17:50.400><c> guarantee</c>

00:17:50.990 --> 00:17:51.000 align:start position:0%
me come to resolutions third guarantee
 

00:17:51.000 --> 00:17:53.810 align:start position:0%
me come to resolutions third guarantee
if<00:17:52.040><c> coding</c><00:17:53.040><c> one</c><00:17:53.250><c> module</c>

00:17:53.810 --> 00:17:53.820 align:start position:0%
if coding one module
 

00:17:53.820 --> 00:17:57.260 align:start position:0%
if coding one module
imports<00:17:54.720><c> a</c><00:17:54.840><c> package</c><00:17:55.430><c> then</c><00:17:56.430><c> that</c><00:17:56.640><c> package</c><00:17:57.060><c> is</c>

00:17:57.260 --> 00:17:57.270 align:start position:0%
imports a package then that package is
 

00:17:57.270 --> 00:18:02.320 align:start position:0%
imports a package then that package is
exported<00:17:58.110><c> from</c><00:17:58.380><c> exactly</c><00:17:59.070><c> one</c><00:17:59.790><c> other</c><00:18:00.230><c> module</c>

00:18:02.320 --> 00:18:02.330 align:start position:0%
exported from exactly one other module
 

00:18:02.330 --> 00:18:04.970 align:start position:0%
exported from exactly one other module
now<00:18:03.330><c> this</c><00:18:03.510><c> guarantee</c><00:18:04.020><c> obviously</c><00:18:04.710><c> relies</c><00:18:04.950><c> on</c>

00:18:04.970 --> 00:18:04.980 align:start position:0%
now this guarantee obviously relies on
 

00:18:04.980 --> 00:18:07.280 align:start position:0%
now this guarantee obviously relies on
exports<00:18:05.700><c> as</c><00:18:05.850><c> well</c><00:18:06.000><c> as</c><00:18:06.120><c> requires</c><00:18:06.480><c> so</c><00:18:06.990><c> you</c><00:18:07.080><c> won't</c>

00:18:07.280 --> 00:18:07.290 align:start position:0%
exports as well as requires so you won't
 

00:18:07.290 --> 00:18:10.430 align:start position:0%
exports as well as requires so you won't
find<00:18:07.620><c> it</c><00:18:07.800><c> in</c><00:18:07.920><c> maven</c><00:18:08.540><c> it</c><00:18:09.540><c> means</c><00:18:09.870><c> there</c><00:18:10.080><c> are</c><00:18:10.230><c> no</c>

00:18:10.430 --> 00:18:10.440 align:start position:0%
find it in maven it means there are no
 

00:18:10.440 --> 00:18:12.920 align:start position:0%
find it in maven it means there are no
splits<00:18:11.190><c> packages</c><00:18:11.880><c> which</c><00:18:12.270><c> is</c><00:18:12.420><c> what</c><00:18:12.570><c> happens</c>

00:18:12.920 --> 00:18:12.930 align:start position:0%
splits packages which is what happens
 

00:18:12.930 --> 00:18:15.560 align:start position:0%
splits packages which is what happens
when<00:18:13.080><c> two</c><00:18:13.230><c> jars</c><00:18:13.710><c> on</c><00:18:13.980><c> the</c><00:18:14.100><c> classpath</c><00:18:14.610><c> contained</c>

00:18:15.560 --> 00:18:15.570 align:start position:0%
when two jars on the classpath contained
 

00:18:15.570 --> 00:18:17.570 align:start position:0%
when two jars on the classpath contained
the<00:18:15.660><c> same</c><00:18:15.900><c> package</c><00:18:16.140><c> and</c><00:18:16.620><c> you</c><00:18:17.070><c> load</c><00:18:17.250><c> some</c>

00:18:17.570 --> 00:18:17.580 align:start position:0%
the same package and you load some
 

00:18:17.580 --> 00:18:19.340 align:start position:0%
the same package and you load some
classes<00:18:18.000><c> in</c><00:18:18.030><c> the</c><00:18:18.210><c> package</c><00:18:18.480><c> from</c><00:18:18.660><c> one</c><00:18:18.720><c> jar</c><00:18:19.110><c> and</c>

00:18:19.340 --> 00:18:19.350 align:start position:0%
classes in the package from one jar and
 

00:18:19.350 --> 00:18:21.320 align:start position:0%
classes in the package from one jar and
other<00:18:19.740><c> classes</c><00:18:20.220><c> in</c><00:18:20.340><c> the</c><00:18:20.430><c> package</c><00:18:20.730><c> from</c><00:18:21.210><c> the</c>

00:18:21.320 --> 00:18:21.330 align:start position:0%
other classes in the package from the
 

00:18:21.330 --> 00:18:23.870 align:start position:0%
other classes in the package from the
other<00:18:21.480><c> jar</c><00:18:21.770><c> split</c><00:18:22.770><c> packages</c><00:18:23.220><c> are</c><00:18:23.430><c> a</c><00:18:23.460><c> huge</c>

00:18:23.870 --> 00:18:23.880 align:start position:0%
other jar split packages are a huge
 

00:18:23.880 --> 00:18:25.910 align:start position:0%
other jar split packages are a huge
failing<00:18:24.480><c> of</c><00:18:24.660><c> the</c><00:18:24.840><c> class</c><00:18:25.050><c> path</c><00:18:25.350><c> mechanism</c>

00:18:25.910 --> 00:18:25.920 align:start position:0%
failing of the class path mechanism
 

00:18:25.920 --> 00:18:27.200 align:start position:0%
failing of the class path mechanism
because<00:18:26.130><c> they</c><00:18:26.370><c> lead</c><00:18:26.520><c> to</c><00:18:26.610><c> incredibly</c>

00:18:27.200 --> 00:18:27.210 align:start position:0%
because they lead to incredibly
 

00:18:27.210 --> 00:18:30.380 align:start position:0%
because they lead to incredibly
difficult<00:18:27.510><c> to</c><00:18:27.900><c> debug</c><00:18:28.050><c> scenarios</c><00:18:29.270><c> because</c><00:18:30.270><c> of</c>

00:18:30.380 --> 00:18:30.390 align:start position:0%
difficult to debug scenarios because of
 

00:18:30.390 --> 00:18:32.300 align:start position:0%
difficult to debug scenarios because of
resolution<00:18:30.960><c> they</c><00:18:31.740><c> are</c><00:18:31.860><c> completely</c>

00:18:32.300 --> 00:18:32.310 align:start position:0%
resolution they are completely
 

00:18:32.310 --> 00:18:34.180 align:start position:0%
resolution they are completely
impossible<00:18:33.030><c> in</c><00:18:33.210><c> a</c><00:18:33.630><c> modular</c><00:18:33.960><c> application</c>

00:18:34.180 --> 00:18:34.190 align:start position:0%
impossible in a modular application
 

00:18:34.190 --> 00:18:36.380 align:start position:0%
impossible in a modular application
which<00:18:35.190><c> is</c><00:18:35.310><c> great</c><00:18:35.550><c> for</c><00:18:35.850><c> long</c><00:18:35.970><c> term</c><00:18:36.210><c> maintenance</c>

00:18:36.380 --> 00:18:36.390 align:start position:0%
which is great for long term maintenance
 

00:18:36.390 --> 00:18:38.660 align:start position:0%
which is great for long term maintenance
and<00:18:37.080><c> this</c><00:18:37.770><c> is</c><00:18:37.920><c> really</c><00:18:38.160><c> what</c><00:18:38.310><c> we</c><00:18:38.430><c> mean</c><00:18:38.460><c> by</c>

00:18:38.660 --> 00:18:38.670 align:start position:0%
and this is really what we mean by
 

00:18:38.670 --> 00:18:41.210 align:start position:0%
and this is really what we mean by
reliable<00:18:39.270><c> dependencies</c><00:18:40.110><c> the</c><00:18:40.530><c> dependencies</c>

00:18:41.210 --> 00:18:41.220 align:start position:0%
reliable dependencies the dependencies
 

00:18:41.220 --> 00:18:44.840 align:start position:0%
reliable dependencies the dependencies
in<00:18:41.460><c> a</c><00:18:41.790><c> graph</c><00:18:42.030><c> of</c><00:18:42.270><c> modules</c><00:18:42.690><c> are</c><00:18:42.960><c> reliable</c><00:18:43.950><c> when</c>

00:18:44.840 --> 00:18:44.850 align:start position:0%
in a graph of modules are reliable when
 

00:18:44.850 --> 00:18:47.060 align:start position:0%
in a graph of modules are reliable when
each<00:18:45.060><c> module</c><00:18:45.570><c> can</c><00:18:45.840><c> access</c><00:18:46.260><c> only</c><00:18:46.440><c> one</c><00:18:46.800><c> version</c>

00:18:47.060 --> 00:18:47.070 align:start position:0%
each module can access only one version
 

00:18:47.070 --> 00:18:48.470 align:start position:0%
each module can access only one version
of<00:18:47.370><c> a</c><00:18:47.430><c> package</c><00:18:47.790><c> at</c><00:18:47.880><c> a</c><00:18:47.970><c> time</c>

00:18:48.470 --> 00:18:48.480 align:start position:0%
of a package at a time
 

00:18:48.480 --> 00:18:51.980 align:start position:0%
of a package at a time
and<00:18:49.850><c> the</c><00:18:50.850><c> third</c><00:18:51.030><c> guarantee</c><00:18:51.420><c> is</c><00:18:51.570><c> a</c><00:18:51.600><c> big</c><00:18:51.810><c> deal</c>

00:18:51.980 --> 00:18:51.990 align:start position:0%
and the third guarantee is a big deal
 

00:18:51.990 --> 00:18:54.800 align:start position:0%
and the third guarantee is a big deal
for<00:18:52.290><c> performance</c><00:18:52.800><c> too</c><00:18:53.480><c> because</c><00:18:54.480><c> we</c><00:18:54.630><c> know</c>

00:18:54.800 --> 00:18:54.810 align:start position:0%
for performance too because we know
 

00:18:54.810 --> 00:18:56.960 align:start position:0%
for performance too because we know
which<00:18:55.080><c> module</c><00:18:55.530><c> exports</c><00:18:56.310><c> which</c><00:18:56.520><c> package</c>

00:18:56.960 --> 00:18:56.970 align:start position:0%
which module exports which package
 

00:18:56.970 --> 00:18:59.990 align:start position:0%
which module exports which package
there's<00:18:57.930><c> no</c><00:18:58.140><c> need</c><00:18:58.380><c> to</c><00:18:58.560><c> scan</c><00:18:58.980><c> every</c><00:18:59.370><c> module</c><00:18:59.580><c> in</c>

00:18:59.990 --> 00:19:00.000 align:start position:0%
there's no need to scan every module in
 

00:19:00.000 --> 00:19:01.430 align:start position:0%
there's no need to scan every module in
the<00:19:00.120><c> system</c><00:19:00.390><c> image</c><00:19:00.510><c> and</c><00:19:00.840><c> on</c><00:19:00.900><c> the</c><00:19:00.960><c> module</c><00:19:01.230><c> path</c>

00:19:01.430 --> 00:19:01.440 align:start position:0%
the system image and on the module path
 

00:19:01.440 --> 00:19:04.550 align:start position:0%
the system image and on the module path
when<00:19:02.100><c> trying</c><00:19:02.370><c> to</c><00:19:02.460><c> load</c><00:19:02.610><c> a</c><00:19:02.640><c> class</c><00:19:03.560><c> contrast</c>

00:19:04.550 --> 00:19:04.560 align:start position:0%
when trying to load a class contrast
 

00:19:04.560 --> 00:19:06.380 align:start position:0%
when trying to load a class contrast
that<00:19:04.770><c> with</c><00:19:04.920><c> how</c><00:19:04.980><c> you</c><00:19:05.130><c> load</c><00:19:05.370><c> classes</c><00:19:05.940><c> from</c><00:19:06.300><c> the</c>

00:19:06.380 --> 00:19:06.390 align:start position:0%
that with how you load classes from the
 

00:19:06.390 --> 00:19:08.300 align:start position:0%
that with how you load classes from the
class<00:19:06.600><c> path</c><00:19:06.870><c> this</c><00:19:07.260><c> is</c><00:19:07.410><c> the</c><00:19:07.500><c> class</c><00:19:07.710><c> path</c><00:19:07.980><c> some</c>

00:19:08.300 --> 00:19:08.310 align:start position:0%
class path this is the class path some
 

00:19:08.310 --> 00:19:10.310 align:start position:0%
class path this is the class path some
of<00:19:08.430><c> you</c><00:19:08.520><c> Mason's</c><00:19:08.940><c> before</c><00:19:09.240><c> the</c><00:19:09.840><c> class</c><00:19:10.050><c> path</c>

00:19:10.310 --> 00:19:10.320 align:start position:0%
of you Mason's before the class path
 

00:19:10.320 --> 00:19:14.420 align:start position:0%
of you Mason's before the class path
from<00:19:10.620><c> Hadoop</c><00:19:11.660><c> the</c><00:19:12.660><c> compiler</c><00:19:13.050><c> or</c><00:19:13.200><c> runtime</c><00:19:13.740><c> has</c>

00:19:14.420 --> 00:19:14.430 align:start position:0%
from Hadoop the compiler or runtime has
 

00:19:14.430 --> 00:19:17.180 align:start position:0%
from Hadoop the compiler or runtime has
to<00:19:14.640><c> do</c><00:19:14.760><c> a</c><00:19:14.790><c> linear</c><00:19:15.090><c> search</c><00:19:15.300><c> through</c><00:19:15.930><c> 110</c><00:19:16.830><c> jars</c>

00:19:17.180 --> 00:19:17.190 align:start position:0%
to do a linear search through 110 jars
 

00:19:17.190 --> 00:19:20.300 align:start position:0%
to do a linear search through 110 jars
whenever<00:19:17.730><c> a</c><00:19:17.940><c> new</c><00:19:18.120><c> class</c><00:19:18.360><c> is</c><00:19:18.720><c> needed</c><00:19:19.190><c> now</c><00:19:20.190><c> of</c>

00:19:20.300 --> 00:19:20.310 align:start position:0%
whenever a new class is needed now of
 

00:19:20.310 --> 00:19:21.770 align:start position:0%
whenever a new class is needed now of
course<00:19:20.490><c> the</c><00:19:20.670><c> implementation</c><00:19:21.330><c> can</c><00:19:21.360><c> speed</c>

00:19:21.770 --> 00:19:21.780 align:start position:0%
course the implementation can speed
 

00:19:21.780 --> 00:19:23.750 align:start position:0%
course the implementation can speed
things<00:19:22.020><c> up</c><00:19:22.200><c> by</c><00:19:22.410><c> caching</c><00:19:23.160><c> the</c><00:19:23.190><c> classes</c><00:19:23.640><c> it</c>

00:19:23.750 --> 00:19:23.760 align:start position:0%
things up by caching the classes it
 

00:19:23.760 --> 00:19:25.340 align:start position:0%
things up by caching the classes it
found<00:19:24.030><c> when</c><00:19:24.360><c> it</c><00:19:24.390><c> wasn't</c><00:19:24.630><c> looking</c><00:19:24.840><c> for</c><00:19:25.170><c> them</c>

00:19:25.340 --> 00:19:25.350 align:start position:0%
found when it wasn't looking for them
 

00:19:25.350 --> 00:19:28.070 align:start position:0%
found when it wasn't looking for them
but<00:19:26.220><c> they're</c><00:19:26.370><c> still</c><00:19:26.580><c> the</c><00:19:26.730><c> same</c><00:19:26.970><c> nasty</c><00:19:27.570><c> half</c>

00:19:28.070 --> 00:19:28.080 align:start position:0%
but they're still the same nasty half
 

00:19:28.080 --> 00:19:29.990 align:start position:0%
but they're still the same nasty half
here<00:19:28.350><c> half</c><00:19:28.380><c> their</c><00:19:28.860><c> problem</c><00:19:29.310><c> of</c><00:19:29.490><c> packages</c>

00:19:29.990 --> 00:19:30.000 align:start position:0%
here half their problem of packages
 

00:19:30.000 --> 00:19:33.440 align:start position:0%
here half their problem of packages
split<00:19:30.360><c> across</c><00:19:30.690><c> multiple</c><00:19:30.810><c> jars</c><00:19:32.000><c> in</c><00:19:33.000><c> fact</c><00:19:33.330><c> if</c>

00:19:33.440 --> 00:19:33.450 align:start position:0%
split across multiple jars in fact if
 

00:19:33.450 --> 00:19:34.850 align:start position:0%
split across multiple jars in fact if
you<00:19:33.540><c> think</c><00:19:33.570><c> about</c><00:19:33.810><c> it</c><00:19:34.110><c> the</c><00:19:34.200><c> class</c><00:19:34.410><c> path</c><00:19:34.680><c> is</c>

00:19:34.850 --> 00:19:34.860 align:start position:0%
you think about it the class path is
 

00:19:34.860 --> 00:19:37.760 align:start position:0%
you think about it the class path is
crazy<00:19:35.300><c> with</c><00:19:36.300><c> a</c><00:19:36.330><c> hundred</c><00:19:36.750><c> and</c><00:19:36.870><c> ten</c><00:19:37.020><c> jars</c><00:19:37.350><c> there</c>

00:19:37.760 --> 00:19:37.770 align:start position:0%
crazy with a hundred and ten jars there
 

00:19:37.770 --> 00:19:40.070 align:start position:0%
crazy with a hundred and ten jars there
are<00:19:37.860><c> over</c><00:19:38.100><c> 12,000</c><00:19:38.940><c> possible</c><00:19:39.420><c> interactions</c>

00:19:40.070 --> 00:19:40.080 align:start position:0%
are over 12,000 possible interactions
 

00:19:40.080 --> 00:19:42.830 align:start position:0%
are over 12,000 possible interactions
between<00:19:40.380><c> classes</c><00:19:41.130><c> in</c><00:19:41.310><c> different</c><00:19:41.370><c> jars</c>

00:19:42.830 --> 00:19:42.840 align:start position:0%
between classes in different jars
 

00:19:42.840 --> 00:19:45.650 align:start position:0%
between classes in different jars
each<00:19:42.930><c> one</c><00:19:43.230><c> starting</c><00:19:43.830><c> a</c><00:19:43.890><c> linear</c><00:19:44.130><c> search</c><00:19:44.660><c> the</c>

00:19:45.650 --> 00:19:45.660 align:start position:0%
each one starting a linear search the
 

00:19:45.660 --> 00:19:47.800 align:start position:0%
each one starting a linear search the
classpath<00:19:46.110><c> is</c><00:19:46.350><c> the</c><00:19:46.470><c> ultimate</c><00:19:46.980><c> in</c><00:19:47.160><c> AirAsia</c>

00:19:47.800 --> 00:19:47.810 align:start position:0%
classpath is the ultimate in AirAsia
 

00:19:47.810 --> 00:19:50.180 align:start position:0%
classpath is the ultimate in AirAsia
whatever<00:19:48.810><c> you</c><00:19:49.020><c> know</c><00:19:49.260><c> about</c><00:19:49.530><c> the</c><00:19:49.710><c> structure</c><00:19:50.010><c> of</c>

00:19:50.180 --> 00:19:50.190 align:start position:0%
whatever you know about the structure of
 

00:19:50.190 --> 00:19:52.700 align:start position:0%
whatever you know about the structure of
your<00:19:50.400><c> application</c><00:19:50.610><c> the</c><00:19:51.570><c> classpath</c><00:19:52.050><c> throws</c><00:19:52.530><c> it</c>

00:19:52.700 --> 00:19:52.710 align:start position:0%
your application the classpath throws it
 

00:19:52.710 --> 00:19:55.010 align:start position:0%
your application the classpath throws it
away<00:19:52.800><c> and</c><00:19:53.190><c> connect</c><00:19:53.940><c> every</c><00:19:54.360><c> jar</c><00:19:54.570><c> to</c><00:19:54.780><c> every</c>

00:19:55.010 --> 00:19:55.020 align:start position:0%
away and connect every jar to every
 

00:19:55.020 --> 00:19:58.580 align:start position:0%
away and connect every jar to every
other<00:19:55.140><c> jar</c><00:19:55.670><c> with</c><00:19:56.670><c> modules</c><00:19:57.180><c> a</c><00:19:57.570><c> module</c><00:19:58.380><c> info</c>

00:19:58.580 --> 00:19:58.590 align:start position:0%
other jar with modules a module info
 

00:19:58.590 --> 00:20:01.010 align:start position:0%
other jar with modules a module info
Java<00:19:58.920><c> you're</c><00:19:59.520><c> telling</c><00:19:59.940><c> resolution</c><00:20:00.630><c> what</c><00:20:00.870><c> you</c>

00:20:01.010 --> 00:20:01.020 align:start position:0%
Java you're telling resolution what you
 

00:20:01.020 --> 00:20:02.690 align:start position:0%
Java you're telling resolution what you
know<00:20:01.290><c> about</c><00:20:01.680><c> the</c><00:20:01.890><c> structure</c><00:20:02.430><c> of</c><00:20:02.550><c> your</c>

00:20:02.690 --> 00:20:02.700 align:start position:0%
know about the structure of your
 

00:20:02.700 --> 00:20:05.090 align:start position:0%
know about the structure of your
application<00:20:02.910><c> and</c><00:20:03.570><c> it</c><00:20:04.380><c> uses</c><00:20:04.680><c> that</c><00:20:04.920><c> information</c>

00:20:05.090 --> 00:20:05.100 align:start position:0%
application and it uses that information
 

00:20:05.100 --> 00:20:07.550 align:start position:0%
application and it uses that information
to<00:20:05.550><c> provide</c><00:20:06.090><c> safety</c><00:20:06.450><c> and</c><00:20:06.660><c> performance</c><00:20:06.960><c> at</c>

00:20:07.550 --> 00:20:07.560 align:start position:0%
to provide safety and performance at
 

00:20:07.560 --> 00:20:12.380 align:start position:0%
to provide safety and performance at
both<00:20:07.740><c> compile-time</c><00:20:08.220><c> and</c><00:20:08.760><c> run-time</c><00:20:11.120><c> now</c><00:20:12.120><c> with</c>

00:20:12.380 --> 00:20:12.390 align:start position:0%
both compile-time and run-time now with
 

00:20:12.390 --> 00:20:14.180 align:start position:0%
both compile-time and run-time now with
all<00:20:12.660><c> of</c><00:20:12.870><c> this</c><00:20:12.960><c> talk</c><00:20:13.140><c> of</c><00:20:13.200><c> dependencies</c><00:20:13.980><c> and</c>

00:20:14.180 --> 00:20:14.190 align:start position:0%
all of this talk of dependencies and
 

00:20:14.190 --> 00:20:15.890 align:start position:0%
all of this talk of dependencies and
resolution<00:20:14.760><c> and</c><00:20:14.880><c> the</c><00:20:15.060><c> module</c><00:20:15.360><c> path</c><00:20:15.570><c> I</c><00:20:15.870><c> know</c>

00:20:15.890 --> 00:20:15.900 align:start position:0%
resolution and the module path I know
 

00:20:15.900 --> 00:20:17.240 align:start position:0%
resolution and the module path I know
what<00:20:16.200><c> you're</c><00:20:16.290><c> thinking</c><00:20:16.620><c> where</c><00:20:16.920><c> are</c><00:20:17.100><c> the</c>

00:20:17.240 --> 00:20:17.250 align:start position:0%
what you're thinking where are the
 

00:20:17.250 --> 00:20:19.370 align:start position:0%
what you're thinking where are the
version<00:20:17.610><c> numbers</c><00:20:17.940><c> who</c><00:20:18.840><c> is</c><00:20:18.960><c> thinking</c><00:20:19.260><c> where</c>

00:20:19.370 --> 00:20:19.380 align:start position:0%
version numbers who is thinking where
 

00:20:19.380 --> 00:20:22.280 align:start position:0%
version numbers who is thinking where
are<00:20:19.410><c> the</c><00:20:19.530><c> version</c><00:20:19.830><c> numbers</c><00:20:20.160><c> yes</c><00:20:20.670><c> a</c><00:20:21.390><c> number</c><00:20:22.050><c> of</c>

00:20:22.280 --> 00:20:22.290 align:start position:0%
are the version numbers yes a number of
 

00:20:22.290 --> 00:20:23.420 align:start position:0%
are the version numbers yes a number of
people<00:20:22.440><c> are</c><00:20:22.650><c> think</c><00:20:22.800><c> you</c><00:20:22.860><c> where</c><00:20:22.980><c> the</c><00:20:23.160><c> version</c>

00:20:23.420 --> 00:20:23.430 align:start position:0%
people are think you where the version
 

00:20:23.430 --> 00:20:26.330 align:start position:0%
people are think you where the version
numbers<00:20:23.900><c> can</c><00:20:24.900><c> my</c><00:20:25.200><c> module</c><00:20:25.620><c> and</c><00:20:26.070><c> the</c><00:20:26.160><c> world</c>

00:20:26.330 --> 00:20:26.340 align:start position:0%
numbers can my module and the world
 

00:20:26.340 --> 00:20:29.570 align:start position:0%
numbers can my module and the world
require<00:20:26.880><c> x</c><00:20:27.180><c> and</c><00:20:27.450><c> y</c><00:20:27.570><c> where</c><00:20:28.410><c> x</c><00:20:28.620><c> requires</c><00:20:28.860><c> version</c>

00:20:29.570 --> 00:20:29.580 align:start position:0%
require x and y where x requires version
 

00:20:29.580 --> 00:20:32.150 align:start position:0%
require x and y where x requires version
1<00:20:29.760><c> of</c><00:20:29.910><c> some</c><00:20:30.090><c> library</c><00:20:30.570><c> and</c><00:20:30.780><c> y</c><00:20:31.290><c> requires</c><00:20:31.740><c> version</c>

00:20:32.150 --> 00:20:32.160 align:start position:0%
1 of some library and y requires version
 

00:20:32.160 --> 00:20:35.960 align:start position:0%
1 of some library and y requires version
2<00:20:32.370><c> of</c><00:20:32.400><c> the</c><00:20:32.700><c> same</c><00:20:33.210><c> library</c><00:20:33.920><c> now</c><00:20:34.920><c> this</c><00:20:35.820><c> is</c><00:20:35.940><c> a</c>

00:20:35.960 --> 00:20:35.970 align:start position:0%
2 of the same library now this is a
 

00:20:35.970 --> 00:20:37.820 align:start position:0%
2 of the same library now this is a
difficult<00:20:36.240><c> problem</c><00:20:36.510><c> the</c><00:20:37.410><c> problem</c><00:20:37.710><c> with</c>

00:20:37.820 --> 00:20:37.830 align:start position:0%
difficult problem the problem with
 

00:20:37.830 --> 00:20:39.860 align:start position:0%
difficult problem the problem with
multiple<00:20:38.190><c> versions</c><00:20:38.580><c> is</c><00:20:38.880><c> that</c><00:20:38.910><c> a</c><00:20:39.240><c> class</c><00:20:39.570><c> loader</c>

00:20:39.860 --> 00:20:39.870 align:start position:0%
multiple versions is that a class loader
 

00:20:39.870 --> 00:20:42.440 align:start position:0%
multiple versions is that a class loader
can't<00:20:40.290><c> have</c><00:20:40.530><c> two</c><00:20:40.800><c> classes</c><00:20:41.180><c> with</c><00:20:42.180><c> the</c><00:20:42.330><c> same</c>

00:20:42.440 --> 00:20:42.450 align:start position:0%
can't have two classes with the same
 

00:20:42.450 --> 00:20:44.780 align:start position:0%
can't have two classes with the same
packaging<00:20:42.870><c> class</c><00:20:43.080><c> name</c><00:20:43.400><c> now</c><00:20:44.400><c> if</c><00:20:44.610><c> you're</c><00:20:44.760><c> using</c>

00:20:44.780 --> 00:20:44.790 align:start position:0%
packaging class name now if you're using
 

00:20:44.790 --> 00:20:47.870 align:start position:0%
packaging class name now if you're using
maven<00:20:45.270><c> it</c><00:20:46.110><c> will</c><00:20:46.380><c> and</c><00:20:46.620><c> you</c><00:20:46.890><c> have</c><00:20:47.340><c> some</c><00:20:47.640><c> version</c>

00:20:47.870 --> 00:20:47.880 align:start position:0%
maven it will and you have some version
 

00:20:47.880 --> 00:20:49.610 align:start position:0%
maven it will and you have some version
dependencies<00:20:48.600><c> it</c><00:20:48.750><c> will</c><00:20:48.900><c> pick</c><00:20:49.140><c> one</c><00:20:49.170><c> of</c><00:20:49.410><c> the</c>

00:20:49.610 --> 00:20:49.620 align:start position:0%
dependencies it will pick one of the
 

00:20:49.620 --> 00:20:51.320 align:start position:0%
dependencies it will pick one of the
versions<00:20:49.980><c> for</c><00:20:50.190><c> you</c><00:20:50.340><c> in</c><00:20:50.850><c> which</c><00:20:51.000><c> case</c><00:20:51.030><c> you</c><00:20:51.300><c> are</c>

00:20:51.320 --> 00:20:51.330 align:start position:0%
versions for you in which case you are
 

00:20:51.330 --> 00:20:53.300 align:start position:0%
versions for you in which case you are
not<00:20:51.570><c> getting</c><00:20:52.050><c> the</c><00:20:52.350><c> two</c><00:20:52.500><c> versions</c><00:20:52.980><c> you</c><00:20:53.100><c> thought</c>

00:20:53.300 --> 00:20:53.310 align:start position:0%
not getting the two versions you thought
 

00:20:53.310 --> 00:20:56.120 align:start position:0%
not getting the two versions you thought
you<00:20:53.430><c> were</c><00:20:53.580><c> or</c><00:20:53.940><c> in</c><00:20:54.810><c> some</c><00:20:55.050><c> cases</c><00:20:55.320><c> depending</c><00:20:55.830><c> on</c>

00:20:56.120 --> 00:20:56.130 align:start position:0%
you were or in some cases depending on
 

00:20:56.130 --> 00:20:58.040 align:start position:0%
you were or in some cases depending on
the<00:20:56.190><c> artifact</c><00:20:56.580><c> names</c><00:20:56.820><c> it'll</c><00:20:57.480><c> put</c><00:20:57.630><c> them</c><00:20:57.750><c> both</c>

00:20:58.040 --> 00:20:58.050 align:start position:0%
the artifact names it'll put them both
 

00:20:58.050 --> 00:21:00.770 align:start position:0%
the artifact names it'll put them both
on<00:20:58.350><c> the</c><00:20:58.800><c> class</c><00:20:59.010><c> path</c><00:20:59.340><c> in</c><00:21:00.060><c> which</c><00:21:00.240><c> case</c><00:21:00.480><c> you</c><00:21:00.630><c> get</c>

00:21:00.770 --> 00:21:00.780 align:start position:0%
on the class path in which case you get
 

00:21:00.780 --> 00:21:02.810 align:start position:0%
on the class path in which case you get
the<00:21:00.930><c> split</c><00:21:01.140><c> package</c><00:21:01.440><c> problem</c><00:21:01.830><c> now</c><00:21:02.670><c> you've</c>

00:21:02.810 --> 00:21:02.820 align:start position:0%
the split package problem now you've
 

00:21:02.820 --> 00:21:04.370 align:start position:0%
the split package problem now you've
been<00:21:02.940><c> thinking</c><00:21:03.360><c> it's</c><00:21:03.480><c> possible</c><00:21:03.660><c> with</c><00:21:04.080><c> maven</c>

00:21:04.370 --> 00:21:04.380 align:start position:0%
been thinking it's possible with maven
 

00:21:04.380 --> 00:21:06.290 align:start position:0%
been thinking it's possible with maven
to<00:21:04.500><c> have</c><00:21:04.680><c> multiple</c><00:21:05.160><c> versions</c><00:21:05.310><c> because</c><00:21:05.970><c> no</c><00:21:06.120><c> one</c>

00:21:06.290 --> 00:21:06.300 align:start position:0%
to have multiple versions because no one
 

00:21:06.300 --> 00:21:08.120 align:start position:0%
to have multiple versions because no one
stopped<00:21:06.660><c> you</c><00:21:06.780><c> from</c><00:21:06.870><c> doing</c><00:21:07.050><c> it</c><00:21:07.320><c> but</c><00:21:07.980><c> in</c><00:21:08.100><c> reality</c>

00:21:08.120 --> 00:21:08.130 align:start position:0%
stopped you from doing it but in reality
 

00:21:08.130 --> 00:21:10.280 align:start position:0%
stopped you from doing it but in reality
you<00:21:08.670><c> cannot</c><00:21:09.000><c> do</c><00:21:09.240><c> it</c><00:21:09.390><c> without</c><00:21:09.540><c> playing</c><00:21:10.020><c> games</c>

00:21:10.280 --> 00:21:10.290 align:start position:0%
you cannot do it without playing games
 

00:21:10.290 --> 00:21:12.380 align:start position:0%
you cannot do it without playing games
with<00:21:10.470><c> class</c><00:21:10.710><c> loaders</c><00:21:11.160><c> which</c><00:21:11.400><c> maven</c><00:21:11.940><c> doesn't</c>

00:21:12.380 --> 00:21:12.390 align:start position:0%
with class loaders which maven doesn't
 

00:21:12.390 --> 00:21:15.440 align:start position:0%
with class loaders which maven doesn't
do<00:21:12.740><c> now</c><00:21:13.740><c> if</c><00:21:13.980><c> you</c><00:21:14.430><c> do</c><00:21:14.610><c> play</c><00:21:14.850><c> the</c><00:21:15.000><c> game</c><00:21:15.180><c> where</c>

00:21:15.440 --> 00:21:15.450 align:start position:0%
do now if you do play the game where
 

00:21:15.450 --> 00:21:17.420 align:start position:0%
do now if you do play the game where
every<00:21:15.780><c> module</c><00:21:16.260><c> is</c><00:21:16.440><c> loaded</c><00:21:16.680><c> in</c><00:21:16.950><c> its</c><00:21:17.070><c> own</c><00:21:17.190><c> class</c>

00:21:17.420 --> 00:21:17.430 align:start position:0%
every module is loaded in its own class
 

00:21:17.430 --> 00:21:19.610 align:start position:0%
every module is loaded in its own class
loader<00:21:17.700><c> you</c><00:21:18.630><c> would</c><00:21:18.750><c> better</c><00:21:18.960><c> make</c><00:21:19.140><c> sure</c><00:21:19.410><c> the</c>

00:21:19.610 --> 00:21:19.620 align:start position:0%
loader you would better make sure the
 

00:21:19.620 --> 00:21:22.220 align:start position:0%
loader you would better make sure the
objects<00:21:20.190><c> from</c><00:21:20.340><c> version</c><00:21:20.820><c> 1</c><00:21:21.060><c> and</c><00:21:21.330><c> version</c><00:21:21.450><c> 2</c><00:21:21.900><c> of</c>

00:21:22.220 --> 00:21:22.230 align:start position:0%
objects from version 1 and version 2 of
 

00:21:22.230 --> 00:21:25.490 align:start position:0%
objects from version 1 and version 2 of
the<00:21:22.410><c> library</c><00:21:22.860><c> don't</c><00:21:23.670><c> leak</c><00:21:24.000><c> out</c><00:21:24.300><c> to</c><00:21:24.960><c> a</c><00:21:24.990><c> common</c>

00:21:25.490 --> 00:21:25.500 align:start position:0%
the library don't leak out to a common
 

00:21:25.500 --> 00:21:28.310 align:start position:0%
the library don't leak out to a common
caller<00:21:25.770><c> like</c><00:21:26.370><c> hello</c><00:21:26.640><c> worlds</c><00:21:27.320><c> otherwise</c>

00:21:28.310 --> 00:21:28.320 align:start position:0%
caller like hello worlds otherwise
 

00:21:28.320 --> 00:21:29.690 align:start position:0%
caller like hello worlds otherwise
you'll<00:21:28.560><c> get</c><00:21:28.770><c> the</c><00:21:28.920><c> dreaded</c><00:21:29.130><c> class</c><00:21:29.430><c> cast</c>

00:21:29.690 --> 00:21:29.700 align:start position:0%
you'll get the dreaded class cast
 

00:21:29.700 --> 00:21:31.730 align:start position:0%
you'll get the dreaded class cast
exception<00:21:29.880><c> where</c><00:21:30.420><c> you</c><00:21:30.510><c> can't</c><00:21:30.780><c> cast</c><00:21:31.140><c> foo</c><00:21:31.500><c> to</c>

00:21:31.730 --> 00:21:31.740 align:start position:0%
exception where you can't cast foo to
 

00:21:31.740 --> 00:21:33.740 align:start position:0%
exception where you can't cast foo to
foo<00:21:31.920><c> because</c><00:21:32.580><c> the</c><00:21:32.730><c> foo</c><00:21:32.910><c> from</c><00:21:33.120><c> library</c><00:21:33.420><c> 1</c><00:21:33.570><c> and</c>

00:21:33.740 --> 00:21:33.750 align:start position:0%
foo because the foo from library 1 and
 

00:21:33.750 --> 00:21:35.530 align:start position:0%
foo because the foo from library 1 and
the<00:21:33.810><c> food</c><00:21:33.960><c> from</c><00:21:34.110><c> library</c><00:21:34.380><c> 2</c><00:21:34.500><c> are</c><00:21:34.650><c> different</c>

00:21:35.530 --> 00:21:35.540 align:start position:0%
the food from library 2 are different
 

00:21:35.540 --> 00:21:37.910 align:start position:0%
the food from library 2 are different
ok<00:21:36.540><c> you're</c><00:21:36.690><c> thinking</c><00:21:37.020><c> this</c><00:21:37.200><c> is</c><00:21:37.410><c> this</c><00:21:37.710><c> seems</c>

00:21:37.910 --> 00:21:37.920 align:start position:0%
ok you're thinking this is this seems
 

00:21:37.920 --> 00:21:39.560 align:start position:0%
ok you're thinking this is this seems
the<00:21:38.010><c> complicated</c><00:21:38.520><c> problem</c><00:21:38.850><c> and</c><00:21:38.940><c> class</c>

00:21:39.560 --> 00:21:39.570 align:start position:0%
the complicated problem and class
 

00:21:39.570 --> 00:21:41.150 align:start position:0%
the complicated problem and class
loaders<00:21:39.900><c> are</c><00:21:39.990><c> complicated</c><00:21:40.560><c> nevermind</c>

00:21:41.150 --> 00:21:41.160 align:start position:0%
loaders are complicated nevermind
 

00:21:41.160 --> 00:21:42.710 align:start position:0%
loaders are complicated nevermind
multiple<00:21:41.550><c> versions</c><00:21:41.910><c> of</c><00:21:41.970><c> a</c><00:21:42.030><c> library</c><00:21:42.210><c> forget</c>

00:21:42.710 --> 00:21:42.720 align:start position:0%
multiple versions of a library forget
 

00:21:42.720 --> 00:21:46.130 align:start position:0%
multiple versions of a library forget
that<00:21:42.900><c> can</c><00:21:43.710><c> I</c><00:21:43.740><c> just</c><00:21:44.130><c> say</c><00:21:44.340><c> that</c><00:21:44.700><c> by</c><00:21:44.910><c> module</c><00:21:45.840><c> one's</c>

00:21:46.130 --> 00:21:46.140 align:start position:0%
that can I just say that by module one's
 

00:21:46.140 --> 00:21:48.890 align:start position:0%
that can I just say that by module one's
version<00:21:46.560><c> 2</c><00:21:46.770><c> of</c><00:21:47.040><c> some</c><00:21:47.970><c> library</c><00:21:48.390><c> and</c><00:21:48.570><c> not</c><00:21:48.750><c> that</c>

00:21:48.890 --> 00:21:48.900 align:start position:0%
version 2 of some library and not that
 

00:21:48.900 --> 00:21:52.070 align:start position:0%
version 2 of some library and not that
buggy<00:21:49.080><c> version</c><00:21:49.560><c> 1</c><00:21:49.790><c> well</c><00:21:50.820><c> now</c><00:21:51.270><c> you're</c><00:21:51.630><c> the</c><00:21:51.840><c> why</c>

00:21:52.070 --> 00:21:52.080 align:start position:0%
buggy version 1 well now you're the why
 

00:21:52.080 --> 00:21:55.250 align:start position:0%
buggy version 1 well now you're the why
on<00:21:52.470><c> the</c><00:21:53.070><c> slide</c><00:21:53.310><c> you</c><00:21:54.120><c> want</c><00:21:54.300><c> version</c><00:21:54.750><c> 2</c><00:21:54.960><c> you're</c>

00:21:55.250 --> 00:21:55.260 align:start position:0%
on the slide you want version 2 you're
 

00:21:55.260 --> 00:21:56.180 align:start position:0%
on the slide you want version 2 you're
sure<00:21:55.440><c> of</c><00:21:55.470><c> it</c>

00:21:56.180 --> 00:21:56.190 align:start position:0%
sure of it
 

00:21:56.190 --> 00:21:58.399 align:start position:0%
sure of it
but<00:21:56.669><c> you</c><00:21:56.909><c> might</c><00:21:57.149><c> be</c><00:21:57.330><c> your</c><00:21:57.629><c> module</c><00:21:57.990><c> might</c><00:21:58.259><c> be</c>

00:21:58.399 --> 00:21:58.409 align:start position:0%
but you might be your module might be
 

00:21:58.409 --> 00:22:00.740 align:start position:0%
but you might be your module might be
reused<00:21:59.039><c> in</c><00:21:59.370><c> a</c><00:21:59.460><c> larger</c><00:21:59.820><c> application</c><00:22:00.299><c> where</c>

00:22:00.740 --> 00:22:00.750 align:start position:0%
reused in a larger application where
 

00:22:00.750 --> 00:22:02.930 align:start position:0%
reused in a larger application where
someone<00:22:01.169><c> else</c><00:22:01.440><c> is</c><00:22:01.980><c> equally</c><00:22:02.399><c> sure</c><00:22:02.610><c> they</c><00:22:02.759><c> want</c>

00:22:02.930 --> 00:22:02.940 align:start position:0%
someone else is equally sure they want
 

00:22:02.940 --> 00:22:07.820 align:start position:0%
someone else is equally sure they want
version<00:22:03.269><c> one</c><00:22:04.610><c> so</c><00:22:05.610><c> the</c><00:22:06.450><c> module</c><00:22:06.840><c> system</c><00:22:07.230><c> forces</c>

00:22:07.820 --> 00:22:07.830 align:start position:0%
version one so the module system forces
 

00:22:07.830 --> 00:22:09.710 align:start position:0%
version one so the module system forces
you<00:22:07.950><c> to</c><00:22:07.980><c> pick</c><00:22:08.340><c> a</c><00:22:08.549><c> single</c><00:22:08.940><c> version</c><00:22:09.120><c> of</c><00:22:09.509><c> each</c>

00:22:09.710 --> 00:22:09.720 align:start position:0%
you to pick a single version of each
 

00:22:09.720 --> 00:22:12.499 align:start position:0%
you to pick a single version of each
module<00:22:09.990><c> required</c><00:22:10.799><c> by</c><00:22:11.070><c> the</c><00:22:11.129><c> application</c><00:22:11.639><c> in</c>

00:22:12.499 --> 00:22:12.509 align:start position:0%
module required by the application in
 

00:22:12.509 --> 00:22:15.049 align:start position:0%
module required by the application in
module<00:22:13.230><c> in</c><00:22:13.379><c> photo</c><00:22:13.559><c> Java</c><00:22:13.889><c> you</c><00:22:14.580><c> require</c><00:22:15.029><c> a</c>

00:22:15.049 --> 00:22:15.059 align:start position:0%
module in photo Java you require a
 

00:22:15.059 --> 00:22:17.560 align:start position:0%
module in photo Java you require a
module<00:22:15.600><c> by</c><00:22:15.779><c> name</c><00:22:16.049><c> not</c><00:22:16.679><c> by</c><00:22:16.830><c> name</c><00:22:17.009><c> in</c><00:22:17.129><c> version</c>

00:22:17.560 --> 00:22:17.570 align:start position:0%
module by name not by name in version
 

00:22:17.570 --> 00:22:21.049 align:start position:0%
module by name not by name in version
when<00:22:18.570><c> the</c><00:22:18.720><c> compiler</c><00:22:19.259><c> or</c><00:22:19.289><c> runtime</c><00:22:19.889><c> scans</c><00:22:20.820><c> the</c>

00:22:21.049 --> 00:22:21.059 align:start position:0%
when the compiler or runtime scans the
 

00:22:21.059 --> 00:22:23.240 align:start position:0%
when the compiler or runtime scans the
system<00:22:21.389><c> image</c><00:22:21.570><c> or</c><00:22:21.779><c> the</c><00:22:21.870><c> module</c><00:22:22.049><c> path</c><00:22:22.409><c> looking</c>

00:22:23.240 --> 00:22:23.250 align:start position:0%
system image or the module path looking
 

00:22:23.250 --> 00:22:25.639 align:start position:0%
system image or the module path looking
for<00:22:23.549><c> that</c><00:22:23.669><c> named</c><00:22:23.940><c> module</c><00:22:24.330><c> only</c><00:22:25.230><c> the</c><00:22:25.350><c> first</c>

00:22:25.639 --> 00:22:25.649 align:start position:0%
for that named module only the first
 

00:22:25.649 --> 00:22:28.490 align:start position:0%
for that named module only the first
module<00:22:26.309><c> of</c><00:22:26.460><c> that</c><00:22:26.580><c> name</c><00:22:26.759><c> is</c><00:22:26.940><c> found</c><00:22:27.259><c> so</c><00:22:28.259><c> just</c>

00:22:28.490 --> 00:22:28.500 align:start position:0%
module of that name is found so just
 

00:22:28.500 --> 00:22:30.710 align:start position:0%
module of that name is found so just
like<00:22:28.649><c> it's</c><00:22:28.830><c> up</c><00:22:29.009><c> to</c><00:22:29.039><c> the</c><00:22:29.309><c> tooling</c><00:22:29.789><c> to</c><00:22:30.360><c> help</c><00:22:30.570><c> you</c>

00:22:30.710 --> 00:22:30.720 align:start position:0%
like it's up to the tooling to help you
 

00:22:30.720 --> 00:22:34.430 align:start position:0%
like it's up to the tooling to help you
associate<00:22:31.409><c> packages</c><00:22:32.100><c> with</c><00:22:32.639><c> a</c><00:22:32.669><c> module</c><00:22:33.259><c> it's</c><00:22:34.259><c> up</c>

00:22:34.430 --> 00:22:34.440 align:start position:0%
associate packages with a module it's up
 

00:22:34.440 --> 00:22:36.259 align:start position:0%
associate packages with a module it's up
to<00:22:34.590><c> the</c><00:22:34.679><c> tooling</c><00:22:35.009><c> also</c><00:22:35.340><c> to</c><00:22:35.399><c> help</c><00:22:35.669><c> you</c><00:22:35.909><c> pick</c>

00:22:36.259 --> 00:22:36.269 align:start position:0%
to the tooling also to help you pick
 

00:22:36.269 --> 00:22:39.080 align:start position:0%
to the tooling also to help you pick
that<00:22:36.509><c> single</c><00:22:37.049><c> version</c><00:22:37.289><c> of</c><00:22:37.559><c> your</c><00:22:38.370><c> dependencies</c>

00:22:39.080 --> 00:22:39.090 align:start position:0%
that single version of your dependencies
 

00:22:39.090 --> 00:22:45.980 align:start position:0%
that single version of your dependencies
so<00:22:44.059><c> there's</c><00:22:45.059><c> a</c><00:22:45.120><c> little</c><00:22:45.419><c> more</c><00:22:45.570><c> to</c><00:22:45.659><c> say</c><00:22:45.690><c> about</c>

00:22:45.980 --> 00:22:45.990 align:start position:0%
so there's a little more to say about
 

00:22:45.990 --> 00:22:48.169 align:start position:0%
so there's a little more to say about
that<00:22:46.169><c> a</c><00:22:46.230><c> lot</c><00:22:46.500><c> later</c><00:22:46.710><c> if</c><00:22:47.100><c> I</c><00:22:47.309><c> have</c><00:22:47.460><c> time</c><00:22:47.700><c> but</c><00:22:48.000><c> the</c>

00:22:48.169 --> 00:22:48.179 align:start position:0%
that a lot later if I have time but the
 

00:22:48.179 --> 00:22:50.090 align:start position:0%
that a lot later if I have time but the
thing<00:22:48.990><c> to</c><00:22:49.049><c> remember</c><00:22:49.230><c> for</c><00:22:49.500><c> now</c><00:22:49.740><c> is</c><00:22:49.919><c> that</c><00:22:49.950><c> a</c>

00:22:50.090 --> 00:22:50.100 align:start position:0%
thing to remember for now is that a
 

00:22:50.100 --> 00:22:52.190 align:start position:0%
thing to remember for now is that a
module<00:22:50.460><c> is</c><00:22:50.669><c> a</c><00:22:50.700><c> set</c><00:22:51.120><c> of</c><00:22:51.240><c> packages</c><00:22:51.570><c> designed</c><00:22:51.899><c> for</c>

00:22:52.190 --> 00:22:52.200 align:start position:0%
module is a set of packages designed for
 

00:22:52.200 --> 00:22:54.889 align:start position:0%
module is a set of packages designed for
reuse<00:22:52.549><c> they</c><00:22:53.549><c> offer</c><00:22:53.730><c> strong</c><00:22:54.240><c> encapsulation</c>

00:22:54.889 --> 00:22:54.899 align:start position:0%
reuse they offer strong encapsulation
 

00:22:54.899 --> 00:22:57.769 align:start position:0%
reuse they offer strong encapsulation
and<00:22:55.259><c> reliable</c><00:22:55.769><c> dependencies</c><00:22:56.460><c> and</c><00:22:56.779><c> module</c>

00:22:57.769 --> 00:22:57.779 align:start position:0%
and reliable dependencies and module
 

00:22:57.779 --> 00:23:00.139 align:start position:0%
and reliable dependencies and module
aware<00:22:58.019><c> tooling</c><00:22:58.470><c> will</c><00:22:58.649><c> be</c><00:22:58.769><c> a</c><00:22:58.799><c> big</c><00:22:59.039><c> part</c><00:22:59.309><c> of</c><00:22:59.549><c> the</c>

00:23:00.139 --> 00:23:00.149 align:start position:0%
aware tooling will be a big part of the
 

00:23:00.149 --> 00:23:05.990 align:start position:0%
aware tooling will be a big part of the
modular<00:23:00.570><c> development</c><00:23:00.799><c> experience</c><00:23:05.000><c> moving</c>

00:23:05.990 --> 00:23:06.000 align:start position:0%
modular development experience moving
 

00:23:06.000 --> 00:23:10.159 align:start position:0%
modular development experience moving
swiftly<00:23:06.299><c> on</c><00:23:07.669><c> let's</c><00:23:08.669><c> talk</c><00:23:08.850><c> about</c><00:23:08.909><c> how</c><00:23:09.870><c> we</c><00:23:09.929><c> would</c>

00:23:10.159 --> 00:23:10.169 align:start position:0%
swiftly on let's talk about how we would
 

00:23:10.169 --> 00:23:12.649 align:start position:0%
swiftly on let's talk about how we would
take<00:23:10.320><c> an</c><00:23:10.470><c> existing</c><00:23:10.710><c> application</c><00:23:11.490><c> and</c><00:23:11.659><c> migrate</c>

00:23:12.649 --> 00:23:12.659 align:start position:0%
take an existing application and migrate
 

00:23:12.659 --> 00:23:15.590 align:start position:0%
take an existing application and migrate
it<00:23:12.809><c> to</c><00:23:12.840><c> modules</c><00:23:13.309><c> now</c><00:23:14.309><c> since</c><00:23:15.029><c> it's</c><00:23:15.269><c> impossible</c>

00:23:15.590 --> 00:23:15.600 align:start position:0%
it to modules now since it's impossible
 

00:23:15.600 --> 00:23:18.649 align:start position:0%
it to modules now since it's impossible
to<00:23:16.169><c> modularize</c><00:23:16.649><c> the</c><00:23:17.279><c> Java</c><00:23:17.549><c> ecosystem</c><00:23:18.330><c> all</c><00:23:18.509><c> at</c>

00:23:18.649 --> 00:23:18.659 align:start position:0%
to modularize the Java ecosystem all at
 

00:23:18.659 --> 00:23:20.659 align:start position:0%
to modularize the Java ecosystem all at
once<00:23:18.870><c> we're</c><00:23:19.830><c> going</c><00:23:20.009><c> to</c><00:23:20.100><c> be</c><00:23:20.190><c> living</c><00:23:20.490><c> with</c><00:23:20.639><c> a</c>

00:23:20.659 --> 00:23:20.669 align:start position:0%
once we're going to be living with a
 

00:23:20.669 --> 00:23:22.490 align:start position:0%
once we're going to be living with a
combination<00:23:21.240><c> of</c><00:23:21.330><c> modular</c><00:23:21.870><c> code</c><00:23:22.049><c> that's</c>

00:23:22.490 --> 00:23:22.500 align:start position:0%
combination of modular code that's
 

00:23:22.500 --> 00:23:25.519 align:start position:0%
combination of modular code that's
modular<00:23:22.980><c> jars</c><00:23:23.250><c> on</c><00:23:23.639><c> the</c><00:23:23.789><c> module</c><00:23:24.090><c> path</c><00:23:24.299><c> and</c><00:23:24.659><c> non</c>

00:23:25.519 --> 00:23:25.529 align:start position:0%
modular jars on the module path and non
 

00:23:25.529 --> 00:23:27.710 align:start position:0%
modular jars on the module path and non
modular<00:23:25.980><c> code</c><00:23:26.190><c> that</c><00:23:26.490><c> traditional</c><00:23:27.090><c> jars</c><00:23:27.360><c> I</c>

00:23:27.710 --> 00:23:27.720 align:start position:0%
modular code that traditional jars I
 

00:23:27.720 --> 00:23:29.060 align:start position:0%
modular code that traditional jars I
don't<00:23:27.990><c> wanna</c><00:23:28.110><c> call</c><00:23:28.289><c> them</c><00:23:28.379><c> I</c><00:23:28.710><c> don't</c><00:23:28.830><c> want</c><00:23:29.009><c> to</c>

00:23:29.060 --> 00:23:29.070 align:start position:0%
don't wanna call them I don't want to
 

00:23:29.070 --> 00:23:30.590 align:start position:0%
don't wanna call them I don't want to
call<00:23:29.159><c> them</c><00:23:29.250><c> legacy</c><00:23:29.669><c> jars</c><00:23:29.909><c> they're</c><00:23:30.149><c> just</c><00:23:30.330><c> jars</c>

00:23:30.590 --> 00:23:30.600 align:start position:0%
call them legacy jars they're just jars
 

00:23:30.600 --> 00:23:34.369 align:start position:0%
call them legacy jars they're just jars
on<00:23:30.809><c> the</c><00:23:30.899><c> classpath</c><00:23:31.429><c> for</c><00:23:32.429><c> a</c><00:23:32.490><c> while</c><00:23:33.110><c> that's</c><00:23:34.110><c> fine</c>

00:23:34.369 --> 00:23:34.379 align:start position:0%
on the classpath for a while that's fine
 

00:23:34.379 --> 00:23:36.590 align:start position:0%
on the classpath for a while that's fine
and<00:23:34.620><c> JDK</c><00:23:34.980><c> 9</c><00:23:35.250><c> has</c><00:23:35.460><c> tools</c><00:23:35.730><c> for</c><00:23:36.120><c> easing</c><00:23:36.509><c> the</c>

00:23:36.590 --> 00:23:36.600 align:start position:0%
and JDK 9 has tools for easing the
 

00:23:36.600 --> 00:23:38.690 align:start position:0%
and JDK 9 has tools for easing the
migration<00:23:37.080><c> that's</c><00:23:37.529><c> what</c><00:23:37.740><c> this</c><00:23:37.889><c> section</c><00:23:38.460><c> is</c>

00:23:38.690 --> 00:23:38.700 align:start position:0%
migration that's what this section is
 

00:23:38.700 --> 00:23:41.960 align:start position:0%
migration that's what this section is
about<00:23:39.409><c> so</c><00:23:40.409><c> we'll</c><00:23:41.220><c> start</c><00:23:41.549><c> with</c><00:23:41.820><c> a</c><00:23:41.850><c> simple</c>

00:23:41.960 --> 00:23:41.970 align:start position:0%
about so we'll start with a simple
 

00:23:41.970 --> 00:23:44.240 align:start position:0%
about so we'll start with a simple
application<00:23:42.470><c> that</c><00:23:43.470><c> we</c><00:23:43.590><c> want</c><00:23:43.769><c> to</c><00:23:43.830><c> migrate</c><00:23:44.220><c> from</c>

00:23:44.240 --> 00:23:44.250 align:start position:0%
application that we want to migrate from
 

00:23:44.250 --> 00:23:47.269 align:start position:0%
application that we want to migrate from
the<00:23:44.639><c> class</c><00:23:44.789><c> path</c><00:23:45.090><c> at</c><00:23:46.049><c> heart</c><00:23:46.470><c> it</c><00:23:46.769><c> has</c><00:23:46.950><c> three</c>

00:23:47.269 --> 00:23:47.279 align:start position:0%
the class path at heart it has three
 

00:23:47.279 --> 00:23:49.129 align:start position:0%
the class path at heart it has three
layers<00:23:47.399><c> at</c><00:23:47.820><c> the</c><00:23:47.850><c> top</c><00:23:48.120><c> of</c><00:23:48.419><c> your</c><00:23:48.450><c> application</c>

00:23:49.129 --> 00:23:49.139 align:start position:0%
layers at the top of your application
 

00:23:49.139 --> 00:23:52.460 align:start position:0%
layers at the top of your application
jars<00:23:50.659><c> might</c><00:23:51.659><c> be</c><00:23:51.779><c> more</c><00:23:51.960><c> than</c><00:23:52.080><c> one</c><00:23:52.169><c> of</c><00:23:52.320><c> these</c>

00:23:52.460 --> 00:23:52.470 align:start position:0%
jars might be more than one of these
 

00:23:52.470 --> 00:23:54.289 align:start position:0%
jars might be more than one of these
because<00:23:53.309><c> you've</c><00:23:53.490><c> got</c><00:23:53.610><c> so</c><00:23:53.789><c> many</c><00:23:53.850><c> packages</c>

00:23:54.289 --> 00:23:54.299 align:start position:0%
because you've got so many packages
 

00:23:54.299 --> 00:23:57.350 align:start position:0%
because you've got so many packages
right<00:23:54.659><c> at</c><00:23:55.500><c> the</c><00:23:55.620><c> bottom</c><00:23:55.889><c> is</c><00:23:56.009><c> the</c><00:23:56.100><c> JDK</c><00:23:56.519><c> and</c><00:23:56.789><c> in</c>

00:23:57.350 --> 00:23:57.360 align:start position:0%
right at the bottom is the JDK and in
 

00:23:57.360 --> 00:23:58.730 align:start position:0%
right at the bottom is the JDK and in
the<00:23:57.480><c> middle</c><00:23:57.690><c> there's</c><00:23:57.929><c> a</c><00:23:58.019><c> bunch</c><00:23:58.169><c> of</c><00:23:58.320><c> library</c>

00:23:58.730 --> 00:23:58.740 align:start position:0%
the middle there's a bunch of library
 

00:23:58.740 --> 00:24:00.529 align:start position:0%
the middle there's a bunch of library
jars<00:23:59.009><c> downloaded</c><00:23:59.669><c> from</c><00:23:59.820><c> the</c><00:23:59.940><c> internet</c><00:24:00.330><c> and</c>

00:24:00.529 --> 00:24:00.539 align:start position:0%
jars downloaded from the internet and
 

00:24:00.539 --> 00:24:04.639 align:start position:0%
jars downloaded from the internet and
thrown<00:24:00.929><c> on</c><00:24:01.259><c> the</c><00:24:01.409><c> class</c><00:24:01.620><c> path</c><00:24:03.289><c> now</c><00:24:04.289><c> I've</c><00:24:04.470><c> hinted</c>

00:24:04.639 --> 00:24:04.649 align:start position:0%
thrown on the class path now I've hinted
 

00:24:04.649 --> 00:24:06.799 align:start position:0%
thrown on the class path now I've hinted
that<00:24:04.830><c> we've</c><00:24:05.129><c> turned</c><00:24:05.490><c> the</c><00:24:05.820><c> JDK</c><00:24:06.210><c> into</c><00:24:06.419><c> modules</c>

00:24:06.799 --> 00:24:06.809 align:start position:0%
that we've turned the JDK into modules
 

00:24:06.809 --> 00:24:08.960 align:start position:0%
that we've turned the JDK into modules
and<00:24:07.110><c> in</c><00:24:07.169><c> this</c><00:24:07.289><c> section</c><00:24:07.500><c> green</c><00:24:08.250><c> boxes</c><00:24:08.759><c> will</c>

00:24:08.960 --> 00:24:08.970 align:start position:0%
and in this section green boxes will
 

00:24:08.970 --> 00:24:09.340 align:start position:0%
and in this section green boxes will
represent

00:24:09.340 --> 00:24:09.350 align:start position:0%
represent
 

00:24:09.350 --> 00:24:11.980 align:start position:0%
represent
modules<00:24:09.820><c> you've</c><00:24:10.820><c> already</c><00:24:10.970><c> seen</c><00:24:11.390><c> Java</c><00:24:11.750><c> base</c>

00:24:11.980 --> 00:24:11.990 align:start position:0%
modules you've already seen Java base
 

00:24:11.990 --> 00:24:14.200 align:start position:0%
modules you've already seen Java base
and<00:24:12.320><c> you</c><00:24:13.070><c> won't</c><00:24:13.220><c> be</c><00:24:13.340><c> surprised</c><00:24:13.880><c> to</c><00:24:14.090><c> learn</c>

00:24:14.200 --> 00:24:14.210 align:start position:0%
and you won't be surprised to learn
 

00:24:14.210 --> 00:24:15.940 align:start position:0%
and you won't be surprised to learn
there<00:24:14.720><c> are</c><00:24:14.750><c> also</c><00:24:14.990><c> modules</c><00:24:15.530><c> for</c><00:24:15.740><c> logging</c>

00:24:15.940 --> 00:24:15.950 align:start position:0%
there are also modules for logging
 

00:24:15.950 --> 00:24:19.000 align:start position:0%
there are also modules for logging
database<00:24:16.640><c> access</c><00:24:17.090><c> XML</c><00:24:17.780><c> processing</c><00:24:18.200><c> Java</c>

00:24:19.000 --> 00:24:19.010 align:start position:0%
database access XML processing Java
 

00:24:19.010 --> 00:24:21.070 align:start position:0%
database access XML processing Java
logging<00:24:19.370><c> Java</c><00:24:19.610><c> sequel</c><00:24:19.940><c> Java</c><00:24:20.120><c> XML</c><00:24:20.630><c> and</c><00:24:20.809><c> many</c>

00:24:21.070 --> 00:24:21.080 align:start position:0%
logging Java sequel Java XML and many
 

00:24:21.080 --> 00:24:21.510 align:start position:0%
logging Java sequel Java XML and many
more

00:24:21.510 --> 00:24:21.520 align:start position:0%
more
 

00:24:21.520 --> 00:24:24.220 align:start position:0%
more
but<00:24:22.520><c> our</c><00:24:22.640><c> application</c><00:24:23.419><c> isn't</c><00:24:23.570><c> modularized</c>

00:24:24.220 --> 00:24:24.230 align:start position:0%
but our application isn't modularized
 

00:24:24.230 --> 00:24:26.590 align:start position:0%
but our application isn't modularized
and<00:24:24.530><c> nor</c><00:24:24.679><c> any</c><00:24:24.890><c> of</c><00:24:25.070><c> the</c><00:24:25.160><c> libraries</c><00:24:25.549><c> should</c><00:24:26.450><c> we</c>

00:24:26.590 --> 00:24:26.600 align:start position:0%
and nor any of the libraries should we
 

00:24:26.600 --> 00:24:29.110 align:start position:0%
and nor any of the libraries should we
monitor<00:24:26.990><c> eyes</c><00:24:27.140><c> the</c><00:24:27.320><c> application</c><00:24:27.919><c> it's</c><00:24:28.700><c> up</c><00:24:28.970><c> to</c>

00:24:29.110 --> 00:24:29.120 align:start position:0%
monitor eyes the application it's up to
 

00:24:29.120 --> 00:24:31.029 align:start position:0%
monitor eyes the application it's up to
you<00:24:29.240><c> you</c><00:24:30.080><c> can</c><00:24:30.260><c> just</c><00:24:30.289><c> run</c><00:24:30.559><c> it</c><00:24:30.590><c> on</c><00:24:30.740><c> the</c><00:24:30.860><c> class</c>

00:24:31.029 --> 00:24:31.039 align:start position:0%
you you can just run it on the class
 

00:24:31.039 --> 00:24:32.470 align:start position:0%
you you can just run it on the class
path<00:24:31.309><c> like</c><00:24:31.700><c> you</c><00:24:31.820><c> always</c><00:24:31.970><c> did</c>

00:24:32.470 --> 00:24:32.480 align:start position:0%
path like you always did
 

00:24:32.480 --> 00:24:34.240 align:start position:0%
path like you always did
class<00:24:32.720><c> path</c><00:24:32.960><c> is</c><00:24:33.110><c> not</c><00:24:33.289><c> going</c><00:24:33.590><c> away</c><00:24:33.679><c> in</c><00:24:34.070><c> jeddah</c>

00:24:34.240 --> 00:24:34.250 align:start position:0%
class path is not going away in jeddah
 

00:24:34.250 --> 00:24:38.110 align:start position:0%
class path is not going away in jeddah
k9<00:24:35.020><c> but</c><00:24:36.020><c> we</c><00:24:36.230><c> modularized</c><00:24:36.919><c> the</c><00:24:37.160><c> jdk</c><00:24:37.700><c> for</c><00:24:38.090><c> a</c>

00:24:38.110 --> 00:24:38.120 align:start position:0%
k9 but we modularized the jdk for a
 

00:24:38.120 --> 00:24:40.539 align:start position:0%
k9 but we modularized the jdk for a
reason<00:24:38.630><c> to</c><00:24:39.350><c> improve</c><00:24:39.740><c> security</c><00:24:39.980><c> through</c>

00:24:40.539 --> 00:24:40.549 align:start position:0%
reason to improve security through
 

00:24:40.549 --> 00:24:42.460 align:start position:0%
reason to improve security through
strong<00:24:40.789><c> encapsulation</c><00:24:41.570><c> and</c><00:24:41.750><c> stability</c>

00:24:42.460 --> 00:24:42.470 align:start position:0%
strong encapsulation and stability
 

00:24:42.470 --> 00:24:44.520 align:start position:0%
strong encapsulation and stability
through<00:24:43.100><c> reliable</c><00:24:43.520><c> dependences</c>

00:24:44.520 --> 00:24:44.530 align:start position:0%
through reliable dependences
 

00:24:44.530 --> 00:24:46.870 align:start position:0%
through reliable dependences
applications<00:24:45.530><c> might</c><00:24:45.770><c> want</c><00:24:45.950><c> to</c><00:24:46.039><c> benefit</c><00:24:46.520><c> from</c>

00:24:46.870 --> 00:24:46.880 align:start position:0%
applications might want to benefit from
 

00:24:46.880 --> 00:24:48.520 align:start position:0%
applications might want to benefit from
this<00:24:47.120><c> just</c><00:24:47.419><c> like</c><00:24:47.570><c> the</c><00:24:47.690><c> jdk</c><00:24:48.049><c> does</c><00:24:48.260><c> there's</c>

00:24:48.520 --> 00:24:48.530 align:start position:0%
this just like the jdk does there's
 

00:24:48.530 --> 00:24:50.799 align:start position:0%
this just like the jdk does there's
nothing<00:24:48.770><c> special</c><00:24:49.070><c> about</c><00:24:49.309><c> the</c><00:24:49.789><c> jdk</c><00:24:50.179><c> modules</c><00:24:50.600><c> so</c>

00:24:50.799 --> 00:24:50.809 align:start position:0%
nothing special about the jdk modules so
 

00:24:50.809 --> 00:24:53.260 align:start position:0%
nothing special about the jdk modules so
just<00:24:50.990><c> modules</c><00:24:51.520><c> so</c><00:24:52.520><c> let's</c><00:24:52.669><c> see</c><00:24:52.850><c> how</c><00:24:52.970><c> we</c><00:24:53.030><c> might</c>

00:24:53.260 --> 00:24:53.270 align:start position:0%
just modules so let's see how we might
 

00:24:53.270 --> 00:24:56.860 align:start position:0%
just modules so let's see how we might
turn<00:24:53.570><c> this</c><00:24:54.080><c> application</c><00:24:54.710><c> into</c><00:24:54.950><c> modules</c><00:24:55.870><c> let's</c>

00:24:56.860 --> 00:24:56.870 align:start position:0%
turn this application into modules let's
 

00:24:56.870 --> 00:24:58.500 align:start position:0%
turn this application into modules let's
imagine<00:24:57.080><c> the</c><00:24:57.320><c> application</c><00:24:57.860><c> is</c><00:24:57.950><c> in</c><00:24:58.070><c> two</c><00:24:58.190><c> jars</c>

00:24:58.500 --> 00:24:58.510 align:start position:0%
imagine the application is in two jars
 

00:24:58.510 --> 00:25:01.990 align:start position:0%
imagine the application is in two jars
main<00:24:59.510><c> code</c><00:24:59.750><c> in</c><00:24:59.960><c> my</c><00:25:00.080><c> app</c><00:25:00.200><c> jar</c><00:25:00.679><c> helper</c><00:25:01.520><c> code</c><00:25:01.730><c> in</c>

00:25:01.990 --> 00:25:02.000 align:start position:0%
main code in my app jar helper code in
 

00:25:02.000 --> 00:25:04.960 align:start position:0%
main code in my app jar helper code in
my<00:25:02.179><c> lib</c><00:25:02.419><c> jar</c><00:25:03.080><c> and</c><00:25:03.950><c> let's</c><00:25:04.250><c> also</c><00:25:04.429><c> imagine</c><00:25:04.669><c> that</c>

00:25:04.960 --> 00:25:04.970 align:start position:0%
my lib jar and let's also imagine that
 

00:25:04.970 --> 00:25:07.480 align:start position:0%
my lib jar and let's also imagine that
the<00:25:05.210><c> soup</c><00:25:05.450><c> of</c><00:25:05.720><c> library</c><00:25:06.350><c> jars</c><00:25:06.590><c> is</c><00:25:06.950><c> limited</c><00:25:07.370><c> to</c>

00:25:07.480 --> 00:25:07.490 align:start position:0%
the soup of library jars is limited to
 

00:25:07.490 --> 00:25:09.460 align:start position:0%
the soup of library jars is limited to
jackson<00:25:07.970><c> the</c><00:25:08.240><c> JSON</c><00:25:08.659><c> processing</c><00:25:08.809><c> library</c>

00:25:09.460 --> 00:25:09.470 align:start position:0%
jackson the JSON processing library
 

00:25:09.470 --> 00:25:12.370 align:start position:0%
jackson the JSON processing library
jackson<00:25:10.340><c> comes</c><00:25:10.610><c> as</c><00:25:10.940><c> three</c><00:25:11.330><c> jars</c><00:25:11.539><c> core</c><00:25:12.110><c> data</c>

00:25:12.370 --> 00:25:12.380 align:start position:0%
jackson comes as three jars core data
 

00:25:12.380 --> 00:25:14.740 align:start position:0%
jackson comes as three jars core data
bind<00:25:12.679><c> and</c><00:25:12.980><c> annotations</c><00:25:13.490><c> and</c><00:25:13.789><c> we</c><00:25:14.510><c> have</c><00:25:14.630><c> the</c>

00:25:14.740 --> 00:25:14.750 align:start position:0%
bind and annotations and we have the
 

00:25:14.750 --> 00:25:19.029 align:start position:0%
bind and annotations and we have the
modular<00:25:15.110><c> jdk</c><00:25:15.799><c> on</c><00:25:15.890><c> the</c><00:25:15.980><c> bottom</c><00:25:17.770><c> this</c><00:25:18.770><c> is</c><00:25:18.919><c> how</c>

00:25:19.029 --> 00:25:19.039 align:start position:0%
modular jdk on the bottom this is how
 

00:25:19.039 --> 00:25:20.680 align:start position:0%
modular jdk on the bottom this is how
we'd<00:25:19.190><c> run</c><00:25:19.340><c> the</c><00:25:19.460><c> application</c><00:25:20.000><c> today</c><00:25:20.240><c> we've</c><00:25:20.539><c> got</c>

00:25:20.680 --> 00:25:20.690 align:start position:0%
we'd run the application today we've got
 

00:25:20.690 --> 00:25:22.510 align:start position:0%
we'd run the application today we've got
to<00:25:20.809><c> set</c><00:25:20.990><c> up</c><00:25:21.020><c> the</c><00:25:21.140><c> Lib</c><00:25:21.500><c> directory</c><00:25:21.620><c> to</c><00:25:22.159><c> include</c>

00:25:22.510 --> 00:25:22.520 align:start position:0%
to set up the Lib directory to include
 

00:25:22.520 --> 00:25:24.130 align:start position:0%
to set up the Lib directory to include
our<00:25:22.669><c> application</c><00:25:23.270><c> jars</c><00:25:23.510><c> and</c><00:25:23.720><c> our</c><00:25:23.840><c> library</c>

00:25:24.130 --> 00:25:24.140 align:start position:0%
our application jars and our library
 

00:25:24.140 --> 00:25:26.020 align:start position:0%
our application jars and our library
jars<00:25:24.350><c> pointing</c><00:25:25.130><c> the</c><00:25:25.190><c> class</c><00:25:25.370><c> path</c><00:25:25.640><c> out</c><00:25:25.820><c> of</c><00:25:25.909><c> them</c>

00:25:26.020 --> 00:25:26.030 align:start position:0%
jars pointing the class path out of them
 

00:25:26.030 --> 00:25:28.060 align:start position:0%
jars pointing the class path out of them
then<00:25:26.570><c> run</c><00:25:26.840><c> the</c><00:25:26.990><c> application</c><00:25:27.530><c> using</c><00:25:27.799><c> the</c><00:25:27.830><c> java</c>

00:25:28.060 --> 00:25:28.070 align:start position:0%
then run the application using the java
 

00:25:28.070 --> 00:25:30.669 align:start position:0%
then run the application using the java
launcher<00:25:28.580><c> one</c><00:25:29.480><c> of</c><00:25:29.630><c> the</c><00:25:29.750><c> things</c><00:25:29.960><c> we'd</c><00:25:30.169><c> gain</c><00:25:30.409><c> by</c>

00:25:30.669 --> 00:25:30.679 align:start position:0%
launcher one of the things we'd gain by
 

00:25:30.679 --> 00:25:32.560 align:start position:0%
launcher one of the things we'd gain by
modularizing<00:25:31.280><c> is</c><00:25:31.549><c> not</c><00:25:31.760><c> having</c><00:25:32.030><c> to</c><00:25:32.120><c> list</c><00:25:32.360><c> out</c>

00:25:32.560 --> 00:25:32.570 align:start position:0%
modularizing is not having to list out
 

00:25:32.570 --> 00:25:34.570 align:start position:0%
modularizing is not having to list out
the<00:25:32.600><c> dependencies</c><00:25:33.440><c> on</c><00:25:33.620><c> the</c><00:25:33.770><c> command-line</c><00:25:34.220><c> in</c>

00:25:34.570 --> 00:25:34.580 align:start position:0%
the dependencies on the command-line in
 

00:25:34.580 --> 00:25:37.810 align:start position:0%
the dependencies on the command-line in
script<00:25:34.940><c> and</c><00:25:35.330><c> where</c><00:25:36.260><c> they</c><00:25:36.350><c> can</c><00:25:36.409><c> typos</c><00:25:37.340><c> no</c><00:25:37.640><c> one</c>

00:25:37.810 --> 00:25:37.820 align:start position:0%
script and where they can typos no one
 

00:25:37.820 --> 00:25:39.610 align:start position:0%
script and where they can typos no one
will<00:25:37.940><c> detect</c><00:25:38.210><c> anything's</c><00:25:38.690><c> wrong</c><00:25:38.870><c> until</c><00:25:39.169><c> much</c>

00:25:39.610 --> 00:25:39.620 align:start position:0%
will detect anything's wrong until much
 

00:25:39.620 --> 00:25:43.779 align:start position:0%
will detect anything's wrong until much
later<00:25:40.929><c> so</c><00:25:41.929><c> let's</c><00:25:42.140><c> look</c><00:25:42.289><c> at</c><00:25:42.470><c> a</c><00:25:42.650><c> scenario</c><00:25:43.370><c> for</c>

00:25:43.779 --> 00:25:43.789 align:start position:0%
later so let's look at a scenario for
 

00:25:43.789 --> 00:25:46.810 align:start position:0%
later so let's look at a scenario for
migrating<00:25:44.120><c> this</c><00:25:44.390><c> application</c><00:25:44.990><c> top</c><00:25:45.409><c> down</c><00:25:45.820><c> here</c>

00:25:46.810 --> 00:25:46.820 align:start position:0%
migrating this application top down here
 

00:25:46.820 --> 00:25:49.330 align:start position:0%
migrating this application top down here
we<00:25:47.179><c> first</c><00:25:47.630><c> modularize</c><00:25:48.289><c> the</c><00:25:48.530><c> application</c><00:25:49.100><c> jars</c>

00:25:49.330 --> 00:25:49.340 align:start position:0%
we first modularize the application jars
 

00:25:49.340 --> 00:25:51.370 align:start position:0%
we first modularize the application jars
without<00:25:50.140><c> modularizing</c>

00:25:51.370 --> 00:25:51.380 align:start position:0%
without modularizing
 

00:25:51.380 --> 00:25:54.430 align:start position:0%
without modularizing
the<00:25:51.740><c> library</c><00:25:52.070><c> jars</c><00:25:52.480><c> now</c><00:25:53.480><c> in</c><00:25:53.630><c> general</c><00:25:53.960><c> if</c><00:25:54.110><c> you</c>

00:25:54.430 --> 00:25:54.440 align:start position:0%
the library jars now in general if you
 

00:25:54.440 --> 00:25:55.930 align:start position:0%
the library jars now in general if you
depend<00:25:54.710><c> on</c><00:25:54.799><c> third-party</c><00:25:55.039><c> libraries</c><00:25:55.700><c> you're</c>

00:25:55.930 --> 00:25:55.940 align:start position:0%
depend on third-party libraries you're
 

00:25:55.940 --> 00:25:58.630 align:start position:0%
depend on third-party libraries you're
depending<00:25:56.539><c> on</c><00:25:56.659><c> them</c><00:25:56.840><c> to</c><00:25:56.990><c> modularize</c><00:25:57.169><c> and</c><00:25:57.890><c> we</c>

00:25:58.630 --> 00:25:58.640 align:start position:0%
depending on them to modularize and we
 

00:25:58.640 --> 00:26:00.490 align:start position:0%
depending on them to modularize and we
can<00:25:58.820><c> make</c><00:25:58.940><c> it</c><00:25:59.090><c> easier</c><00:25:59.450><c> for</c><00:25:59.720><c> libraries</c><00:26:00.380><c> to</c>

00:26:00.490 --> 00:26:00.500 align:start position:0%
can make it easier for libraries to
 

00:26:00.500 --> 00:26:02.740 align:start position:0%
can make it easier for libraries to
modularize<00:26:00.679><c> but</c><00:26:01.309><c> generally</c><00:26:01.909><c> we</c><00:26:02.120><c> all</c><00:26:02.299><c> have</c><00:26:02.600><c> to</c>

00:26:02.740 --> 00:26:02.750 align:start position:0%
modularize but generally we all have to
 

00:26:02.750 --> 00:26:05.409 align:start position:0%
modularize but generally we all have to
wait<00:26:02.900><c> for</c><00:26:03.110><c> them</c><00:26:03.230><c> to</c><00:26:03.350><c> do</c><00:26:03.440><c> it</c><00:26:03.820><c> no</c><00:26:04.820><c> one</c><00:26:04.940><c> can</c><00:26:04.970><c> force</c>

00:26:05.409 --> 00:26:05.419 align:start position:0%
wait for them to do it no one can force
 

00:26:05.419 --> 00:26:08.770 align:start position:0%
wait for them to do it no one can force
them<00:26:06.010><c> so</c><00:26:07.010><c> it</c><00:26:07.159><c> may</c><00:26:07.400><c> well</c><00:26:07.760><c> be</c><00:26:07.789><c> that</c><00:26:08.059><c> some</c><00:26:08.539><c> of</c><00:26:08.570><c> the</c>

00:26:08.770 --> 00:26:08.780 align:start position:0%
them so it may well be that some of the
 

00:26:08.780 --> 00:26:10.690 align:start position:0%
them so it may well be that some of the
libraries<00:26:09.169><c> you</c><00:26:09.230><c> depend</c><00:26:09.740><c> on</c><00:26:09.950><c> are</c><00:26:10.190><c> not</c>

00:26:10.690 --> 00:26:10.700 align:start position:0%
libraries you depend on are not
 

00:26:10.700 --> 00:26:14.529 align:start position:0%
libraries you depend on are not
modularized<00:26:11.299><c> yet</c><00:26:11.570><c> that's</c><00:26:12.080><c> okay</c><00:26:13.210><c> now</c><00:26:14.210><c> for</c><00:26:14.419><c> your</c>

00:26:14.529 --> 00:26:14.539 align:start position:0%
modularized yet that's okay now for your
 

00:26:14.539 --> 00:26:16.659 align:start position:0%
modularized yet that's okay now for your
application<00:26:15.230><c> jars</c><00:26:15.500><c> that</c><00:26:15.770><c> you</c><00:26:15.860><c> do</c><00:26:16.010><c> control</c><00:26:16.429><c> the</c>

00:26:16.659 --> 00:26:16.669 align:start position:0%
application jars that you do control the
 

00:26:16.669 --> 00:26:19.630 align:start position:0%
application jars that you do control the
obvious<00:26:17.210><c> path</c><00:26:17.990><c> is</c><00:26:18.350><c> to</c><00:26:18.500><c> turn</c><00:26:18.740><c> them</c><00:26:18.950><c> one-to-one</c>

00:26:19.630 --> 00:26:19.640 align:start position:0%
obvious path is to turn them one-to-one
 

00:26:19.640 --> 00:26:21.420 align:start position:0%
obvious path is to turn them one-to-one
into<00:26:20.179><c> modular</c><00:26:20.360><c> jars</c>

00:26:21.420 --> 00:26:21.430 align:start position:0%
into modular jars
 

00:26:21.430 --> 00:26:23.070 align:start position:0%
into modular jars
where<00:26:21.670><c> each</c><00:26:21.790><c> jar</c><00:26:22.090><c> has</c><00:26:22.330><c> a</c><00:26:22.360><c> module</c><00:26:22.750><c> in</c><00:26:22.870><c> photo</c>

00:26:23.070 --> 00:26:23.080 align:start position:0%
where each jar has a module in photo
 

00:26:23.080 --> 00:26:25.080 align:start position:0%
where each jar has a module in photo
class<00:26:23.260><c> file</c><00:26:23.560><c> this</c><00:26:24.460><c> is</c><00:26:24.640><c> not</c><00:26:24.790><c> always</c><00:26:24.940><c> possible</c>

00:26:25.080 --> 00:26:25.090 align:start position:0%
class file this is not always possible
 

00:26:25.090 --> 00:26:27.570 align:start position:0%
class file this is not always possible
especially<00:26:25.780><c> if</c><00:26:26.170><c> the</c><00:26:26.350><c> code</c><00:26:26.710><c> in</c><00:26:26.860><c> the</c><00:26:26.980><c> jars</c><00:26:27.220><c> has</c>

00:26:27.570 --> 00:26:27.580 align:start position:0%
especially if the code in the jars has
 

00:26:27.580 --> 00:26:29.850 align:start position:0%
especially if the code in the jars has
cyclic<00:26:27.970><c> dependencies</c><00:26:28.630><c> but</c><00:26:28.900><c> let's</c><00:26:29.530><c> go</c><00:26:29.680><c> with</c><00:26:29.800><c> it</c>

00:26:29.850 --> 00:26:29.860 align:start position:0%
cyclic dependencies but let's go with it
 

00:26:29.860 --> 00:26:33.570 align:start position:0%
cyclic dependencies but let's go with it
for<00:26:30.070><c> now</c><00:26:30.930><c> now</c><00:26:31.930><c> if</c><00:26:32.560><c> we're</c><00:26:33.040><c> going</c><00:26:33.160><c> to</c><00:26:33.220><c> turn</c><00:26:33.400><c> each</c>

00:26:33.570 --> 00:26:33.580 align:start position:0%
for now now if we're going to turn each
 

00:26:33.580 --> 00:26:36.600 align:start position:0%
for now now if we're going to turn each
application<00:26:34.030><c> jar</c><00:26:34.480><c> into</c><00:26:34.780><c> a</c><00:26:35.140><c> modular</c><00:26:35.440><c> jar</c><00:26:35.890><c> we'll</c>

00:26:36.600 --> 00:26:36.610 align:start position:0%
application jar into a modular jar we'll
 

00:26:36.610 --> 00:26:38.820 align:start position:0%
application jar into a modular jar we'll
need<00:26:36.760><c> to</c><00:26:36.970><c> write</c><00:26:37.150><c> a</c><00:26:37.390><c> module</c><00:26:37.870><c> declaration</c><00:26:38.650><c> in</c>

00:26:38.820 --> 00:26:38.830 align:start position:0%
need to write a module declaration in
 

00:26:38.830 --> 00:26:42.000 align:start position:0%
need to write a module declaration in
module<00:26:39.100><c> in</c><00:26:39.220><c> photo</c><00:26:39.460><c> Java</c><00:26:39.930><c> that</c><00:26:40.930><c> gives</c><00:26:41.290><c> a</c><00:26:41.440><c> name</c><00:26:41.680><c> a</c>

00:26:42.000 --> 00:26:42.010 align:start position:0%
module in photo Java that gives a name a
 

00:26:42.010 --> 00:26:44.340 align:start position:0%
module in photo Java that gives a name a
list<00:26:42.490><c> of</c><00:26:42.670><c> required</c><00:26:43.000><c> modules</c><00:26:43.240><c> and</c><00:26:43.840><c> a</c><00:26:44.080><c> list</c><00:26:44.260><c> of</c>

00:26:44.340 --> 00:26:44.350 align:start position:0%
list of required modules and a list of
 

00:26:44.350 --> 00:26:47.610 align:start position:0%
list of required modules and a list of
exported<00:26:44.860><c> packages</c><00:26:45.390><c> the</c><00:26:46.390><c> names</c><00:26:46.570><c> are</c><00:26:46.750><c> easy</c><00:26:46.870><c> my</c>

00:26:47.610 --> 00:26:47.620 align:start position:0%
exported packages the names are easy my
 

00:26:47.620 --> 00:26:50.490 align:start position:0%
exported packages the names are easy my
after<00:26:47.860><c> my</c><00:26:47.980><c> Lib</c><00:26:48.270><c> we</c><00:26:49.270><c> don't</c><00:26:49.480><c> yet</c><00:26:49.960><c> know</c><00:26:50.020><c> though</c>

00:26:50.490 --> 00:26:50.500 align:start position:0%
after my Lib we don't yet know though
 

00:26:50.500 --> 00:26:54.060 align:start position:0%
after my Lib we don't yet know though
what<00:26:50.530><c> each</c><00:26:51.010><c> module</c><00:26:51.430><c> depends</c><00:26:52.090><c> on</c><00:26:52.680><c> we</c><00:26:53.680><c> can</c><00:26:53.860><c> make</c>

00:26:54.060 --> 00:26:54.070 align:start position:0%
what each module depends on we can make
 

00:26:54.070 --> 00:26:56.370 align:start position:0%
what each module depends on we can make
manual<00:26:54.940><c> analysis</c><00:26:55.450><c> of</c><00:26:55.600><c> the</c><00:26:55.690><c> source</c><00:26:55.930><c> files</c><00:26:56.200><c> of</c>

00:26:56.370 --> 00:26:56.380 align:start position:0%
manual analysis of the source files of
 

00:26:56.380 --> 00:26:57.780 align:start position:0%
manual analysis of the source files of
the<00:26:56.470><c> class</c><00:26:56.650><c> files</c><00:26:56.920><c> but</c><00:26:57.250><c> there's</c><00:26:57.340><c> an</c><00:26:57.490><c> easier</c>

00:26:57.780 --> 00:26:57.790 align:start position:0%
the class files but there's an easier
 

00:26:57.790 --> 00:27:01.230 align:start position:0%
the class files but there's an easier
way<00:26:57.850><c> the</c><00:26:58.540><c> Jade</c><00:26:58.780><c> EPS</c><00:26:58.960><c> tool</c><00:26:59.850><c> Jade</c><00:27:00.850><c> EPS</c>

00:27:01.230 --> 00:27:01.240 align:start position:0%
way the Jade EPS tool Jade EPS
 

00:27:01.240 --> 00:27:04.320 align:start position:0%
way the Jade EPS tool Jade EPS
scans<00:27:01.690><c> class</c><00:27:02.080><c> files</c><00:27:02.440><c> or</c><00:27:02.830><c> jar</c><00:27:03.070><c> files</c><00:27:03.340><c> and</c><00:27:03.730><c> tells</c>

00:27:04.320 --> 00:27:04.330 align:start position:0%
scans class files or jar files and tells
 

00:27:04.330 --> 00:27:07.380 align:start position:0%
scans class files or jar files and tells
you<00:27:04.510><c> what</c><00:27:04.690><c> code</c><00:27:05.350><c> from</c><00:27:05.620><c> other</c><00:27:05.770><c> jar</c><00:27:06.190><c> files</c><00:27:06.520><c> that</c>

00:27:07.380 --> 00:27:07.390 align:start position:0%
you what code from other jar files that
 

00:27:07.390 --> 00:27:09.630 align:start position:0%
you what code from other jar files that
code<00:27:07.570><c> depends</c><00:27:07.960><c> on</c><00:27:08.080><c> now</c><00:27:08.890><c> Jade</c><00:27:09.100><c> EPS</c><00:27:09.250><c> actually</c>

00:27:09.630 --> 00:27:09.640 align:start position:0%
code depends on now Jade EPS actually
 

00:27:09.640 --> 00:27:13.140 align:start position:0%
code depends on now Jade EPS actually
came<00:27:09.970><c> with</c><00:27:10.330><c> JDK</c><00:27:10.870><c> 8</c><00:27:10.900><c> and</c><00:27:11.670><c> there's</c><00:27:12.670><c> an</c><00:27:12.760><c> improved</c>

00:27:13.140 --> 00:27:13.150 align:start position:0%
came with JDK 8 and there's an improved
 

00:27:13.150 --> 00:27:16.530 align:start position:0%
came with JDK 8 and there's an improved
version<00:27:13.390><c> in</c><00:27:13.870><c> JDK</c><00:27:14.290><c> 9</c><00:27:14.560><c> now</c><00:27:15.460><c> while</c><00:27:15.910><c> this</c><00:27:16.060><c> isn't</c><00:27:16.240><c> a</c>

00:27:16.530 --> 00:27:16.540 align:start position:0%
version in JDK 9 now while this isn't a
 

00:27:16.540 --> 00:27:18.960 align:start position:0%
version in JDK 9 now while this isn't a
perfect<00:27:16.630><c> solution</c><00:27:17.290><c> come</c><00:27:18.070><c> on</c><00:27:18.160><c> to</c><00:27:18.280><c> that</c><00:27:18.430><c> it's</c><00:27:18.880><c> a</c>

00:27:18.960 --> 00:27:18.970 align:start position:0%
perfect solution come on to that it's a
 

00:27:18.970 --> 00:27:22.140 align:start position:0%
perfect solution come on to that it's a
pretty<00:27:19.150><c> good</c><00:27:19.210><c> start</c><00:27:19.570><c> so</c><00:27:20.610><c> we'll</c><00:27:21.610><c> run</c><00:27:21.760><c> Jade</c><00:27:21.970><c> Epps</c>

00:27:22.140 --> 00:27:22.150 align:start position:0%
pretty good start so we'll run Jade Epps
 

00:27:22.150 --> 00:27:24.930 align:start position:0%
pretty good start so we'll run Jade Epps
on<00:27:22.300><c> the</c><00:27:22.420><c> application</c><00:27:22.900><c> jars</c><00:27:23.550><c> the</c><00:27:24.550><c> Jackson</c>

00:27:24.930 --> 00:27:24.940 align:start position:0%
on the application jars the Jackson
 

00:27:24.940 --> 00:27:26.340 align:start position:0%
on the application jars the Jackson
libraries<00:27:25.270><c> are</c><00:27:25.420><c> assumes</c><00:27:25.750><c> to</c><00:27:25.870><c> be</c><00:27:25.930><c> on</c><00:27:26.050><c> the</c><00:27:26.170><c> class</c>

00:27:26.340 --> 00:27:26.350 align:start position:0%
libraries are assumes to be on the class
 

00:27:26.350 --> 00:27:28.890 align:start position:0%
libraries are assumes to be on the class
path<00:27:26.620><c> here</c><00:27:26.890><c> and</c><00:27:27.640><c> we</c><00:27:27.760><c> see</c><00:27:27.940><c> that</c><00:27:28.090><c> my</c><00:27:28.270><c> app</c><00:27:28.420><c> jar</c>

00:27:28.890 --> 00:27:28.900 align:start position:0%
path here and we see that my app jar
 

00:27:28.900 --> 00:27:31.560 align:start position:0%
path here and we see that my app jar
depends<00:27:29.680><c> on</c><00:27:29.800><c> two</c><00:27:29.950><c> of</c><00:27:30.070><c> the</c><00:27:30.160><c> Jackson</c><00:27:30.550><c> jars</c><00:27:30.790><c> which</c>

00:27:31.560 --> 00:27:31.570 align:start position:0%
depends on two of the Jackson jars which
 

00:27:31.570 --> 00:27:33.390 align:start position:0%
depends on two of the Jackson jars which
remember<00:27:31.990><c> and</c><00:27:32.080><c> not</c><00:27:32.140><c> modularized</c><00:27:32.680><c> yet</c><00:27:32.920><c> this</c><00:27:33.280><c> is</c>

00:27:33.390 --> 00:27:33.400 align:start position:0%
remember and not modularized yet this is
 

00:27:33.400 --> 00:27:35.490 align:start position:0%
remember and not modularized yet this is
just<00:27:33.610><c> looking</c><00:27:33.790><c> at</c><00:27:34.000><c> the</c><00:27:34.210><c> the</c><00:27:34.630><c> references</c><00:27:35.410><c> in</c>

00:27:35.490 --> 00:27:35.500 align:start position:0%
just looking at the the references in
 

00:27:35.500 --> 00:27:38.340 align:start position:0%
just looking at the the references in
bytecode<00:27:35.890><c> and</c><00:27:36.130><c> of</c><00:27:36.910><c> course</c><00:27:37.150><c> on</c><00:27:37.390><c> my</c><00:27:37.630><c> little</c><00:27:37.810><c> jar</c>

00:27:38.340 --> 00:27:38.350 align:start position:0%
bytecode and of course on my little jar
 

00:27:38.350 --> 00:27:41.430 align:start position:0%
bytecode and of course on my little jar
plus<00:27:39.310><c> my</c><00:27:39.520><c> app</c><00:27:39.670><c> jar</c><00:27:40.180><c> depends</c><00:27:40.630><c> on</c><00:27:40.750><c> the</c><00:27:40.990><c> JDK</c>

00:27:41.430 --> 00:27:41.440 align:start position:0%
plus my app jar depends on the JDK
 

00:27:41.440 --> 00:27:45.270 align:start position:0%
plus my app jar depends on the JDK
modules<00:27:41.950><c> Java</c><00:27:42.400><c> base</c><00:27:42.610><c> and</c><00:27:42.880><c> Java</c><00:27:43.060><c> sequel</c><00:27:43.480><c> say</c><00:27:44.280><c> my</c>

00:27:45.270 --> 00:27:45.280 align:start position:0%
modules Java base and Java sequel say my
 

00:27:45.280 --> 00:27:48.660 align:start position:0%
modules Java base and Java sequel say my
live<00:27:45.490><c> jar</c><00:27:46.110><c> only</c><00:27:47.110><c> depends</c><00:27:47.680><c> on</c><00:27:47.740><c> Java</c><00:27:47.950><c> base</c><00:27:48.190><c> so</c>

00:27:48.660 --> 00:27:48.670 align:start position:0%
live jar only depends on Java base so
 

00:27:48.670 --> 00:27:50.940 align:start position:0%
live jar only depends on Java base so
that's<00:27:48.820><c> nice</c><00:27:49.000><c> and</c><00:27:49.180><c> simple</c><00:27:49.450><c> now</c><00:27:50.350><c> we</c><00:27:50.410><c> can</c><00:27:50.770><c> write</c>

00:27:50.940 --> 00:27:50.950 align:start position:0%
that's nice and simple now we can write
 

00:27:50.950 --> 00:27:54.270 align:start position:0%
that's nice and simple now we can write
our<00:27:51.430><c> module</c><00:27:51.760><c> declarations</c><00:27:52.800><c> let's</c><00:27:53.800><c> start</c><00:27:54.100><c> with</c>

00:27:54.270 --> 00:27:54.280 align:start position:0%
our module declarations let's start with
 

00:27:54.280 --> 00:27:56.550 align:start position:0%
our module declarations let's start with
the<00:27:54.400><c> easy</c><00:27:54.580><c> one</c><00:27:55.000><c> the</c><00:27:55.270><c> helper</c><00:27:55.660><c> code</c><00:27:56.020><c> in</c><00:27:56.230><c> my</c><00:27:56.260><c> lib</c>

00:27:56.550 --> 00:27:56.560 align:start position:0%
the easy one the helper code in my lib
 

00:27:56.560 --> 00:27:59.040 align:start position:0%
the easy one the helper code in my lib
we<00:27:57.280><c> know</c><00:27:57.400><c> it</c><00:27:57.520><c> depends</c><00:27:57.760><c> on</c><00:27:57.850><c> Java</c><00:27:58.030><c> base</c><00:27:58.240><c> we</c><00:27:59.020><c> can</c>

00:27:59.040 --> 00:27:59.050 align:start position:0%
we know it depends on Java base we can
 

00:27:59.050 --> 00:28:01.470 align:start position:0%
we know it depends on Java base we can
write<00:27:59.440><c> requires</c><00:27:59.860><c> Java</c><00:28:00.160><c> base</c><00:28:00.400><c> though</c><00:28:00.700><c> I've</c>

00:28:01.470 --> 00:28:01.480 align:start position:0%
write requires Java base though I've
 

00:28:01.480 --> 00:28:02.700 align:start position:0%
write requires Java base though I've
sort<00:28:01.690><c> of</c><00:28:01.750><c> been</c><00:28:01.840><c> stringing</c><00:28:02.140><c> you</c><00:28:02.320><c> along</c><00:28:02.350><c> you</c>

00:28:02.700 --> 00:28:02.710 align:start position:0%
sort of been stringing you along you
 

00:28:02.710 --> 00:28:05.160 align:start position:0%
sort of been stringing you along you
don't<00:28:02.920><c> have</c><00:28:03.130><c> to</c><00:28:03.400><c> it's</c><00:28:03.940><c> always</c><00:28:04.360><c> put</c><00:28:04.630><c> in</c><00:28:04.780><c> for</c><00:28:05.020><c> you</c>

00:28:05.160 --> 00:28:05.170 align:start position:0%
don't have to it's always put in for you
 

00:28:05.170 --> 00:28:07.170 align:start position:0%
don't have to it's always put in for you
by<00:28:05.320><c> the</c><00:28:05.380><c> compiler</c><00:28:05.800><c> because</c><00:28:06.190><c> every</c><00:28:06.940><c> Java</c>

00:28:07.170 --> 00:28:07.180 align:start position:0%
by the compiler because every Java
 

00:28:07.180 --> 00:28:09.180 align:start position:0%
by the compiler because every Java
program<00:28:07.630><c> ultimately</c><00:28:08.110><c> relies</c><00:28:08.500><c> on</c><00:28:08.530><c> java.lang</c>

00:28:09.180 --> 00:28:09.190 align:start position:0%
program ultimately relies on java.lang
 

00:28:09.190 --> 00:28:11.340 align:start position:0%
program ultimately relies on java.lang
objects<00:28:09.730><c> so</c><00:28:10.090><c> you</c><00:28:10.150><c> always</c><00:28:10.480><c> what</c><00:28:10.930><c> you</c><00:28:11.080><c> cannot</c>

00:28:11.340 --> 00:28:11.350 align:start position:0%
objects so you always what you cannot
 

00:28:11.350 --> 00:28:15.060 align:start position:0%
objects so you always what you cannot
not<00:28:11.710><c> require</c><00:28:12.160><c> Java</c><00:28:12.340><c> base</c><00:28:12.640><c> and</c><00:28:13.770><c> from</c><00:28:14.770><c> the</c><00:28:14.860><c> Jade</c>

00:28:15.060 --> 00:28:15.070 align:start position:0%
not require Java base and from the Jade
 

00:28:15.070 --> 00:28:18.330 align:start position:0%
not require Java base and from the Jade
EPS<00:28:15.250><c> run</c><00:28:15.520><c> we</c><00:28:16.360><c> we</c><00:28:16.780><c> knew</c><00:28:17.110><c> that</c><00:28:17.380><c> my</c><00:28:17.620><c> app</c><00:28:17.650><c> jar</c>

00:28:18.330 --> 00:28:18.340 align:start position:0%
EPS run we we knew that my app jar
 

00:28:18.340 --> 00:28:21.210 align:start position:0%
EPS run we we knew that my app jar
depends<00:28:18.970><c> on</c><00:28:19.090><c> my</c><00:28:19.270><c> lip</c><00:28:19.510><c> if</c><00:28:20.200><c> we'd</c><00:28:20.590><c> run</c><00:28:20.800><c> Jade</c><00:28:21.040><c> Epps</c>

00:28:21.210 --> 00:28:21.220 align:start position:0%
depends on my lip if we'd run Jade Epps
 

00:28:21.220 --> 00:28:23.010 align:start position:0%
depends on my lip if we'd run Jade Epps
with<00:28:21.430><c> more</c><00:28:21.610><c> options</c><00:28:22.060><c> we'd</c><00:28:22.330><c> have</c><00:28:22.450><c> seen</c><00:28:22.630><c> that</c><00:28:22.810><c> in</c>

00:28:23.010 --> 00:28:23.020 align:start position:0%
with more options we'd have seen that in
 

00:28:23.020 --> 00:28:26.160 align:start position:0%
with more options we'd have seen that in
particular<00:28:23.170><c> my</c><00:28:24.070><c> app</c><00:28:24.220><c> jar</c><00:28:24.820><c> needs</c><00:28:25.660><c> a</c><00:28:25.900><c> particular</c>

00:28:26.160 --> 00:28:26.170 align:start position:0%
particular my app jar needs a particular
 

00:28:26.170 --> 00:28:29.610 align:start position:0%
particular my app jar needs a particular
package<00:28:26.860><c> in</c><00:28:27.160><c> my</c><00:28:27.880><c> Lib</c><00:28:28.200><c> now</c><00:28:29.200><c> we</c><00:28:29.260><c> could</c><00:28:29.590><c> write</c>

00:28:29.610 --> 00:28:29.620 align:start position:0%
package in my Lib now we could write
 

00:28:29.620 --> 00:28:32.700 align:start position:0%
package in my Lib now we could write
exports<00:28:30.580><c> a</c><00:28:30.910><c> package</c><00:28:31.870><c> in</c><00:28:32.110><c> this</c><00:28:32.530><c> module</c>

00:28:32.700 --> 00:28:32.710 align:start position:0%
exports a package in this module
 

00:28:32.710 --> 00:28:34.580 align:start position:0%
exports a package in this module
declaration<00:28:33.460><c> to</c><00:28:33.670><c> allow</c><00:28:33.910><c> anyone</c>

00:28:34.580 --> 00:28:34.590 align:start position:0%
declaration to allow anyone
 

00:28:34.590 --> 00:28:36.799 align:start position:0%
declaration to allow anyone
access<00:28:35.010><c> the</c><00:28:35.190><c> package</c><00:28:35.520><c> but</c><00:28:36.360><c> if</c><00:28:36.480><c> we're</c><00:28:36.630><c> sure</c>

00:28:36.799 --> 00:28:36.809 align:start position:0%
access the package but if we're sure
 

00:28:36.809 --> 00:28:39.470 align:start position:0%
access the package but if we're sure
that<00:28:37.080><c> no</c><00:28:37.260><c> one</c><00:28:37.470><c> except</c><00:28:37.950><c> my</c><00:28:38.309><c> app</c><00:28:38.490><c> will</c><00:28:39.270><c> need</c>

00:28:39.470 --> 00:28:39.480 align:start position:0%
that no one except my app will need
 

00:28:39.480 --> 00:28:43.279 align:start position:0%
that no one except my app will need
access<00:28:39.740><c> we</c><00:28:40.740><c> can</c><00:28:40.770><c> use</c><00:28:41.100><c> a</c><00:28:41.220><c> qualified</c><00:28:41.820><c> export</c><00:28:42.510><c> to</c>

00:28:43.279 --> 00:28:43.289 align:start position:0%
access we can use a qualified export to
 

00:28:43.289 --> 00:28:45.230 align:start position:0%
access we can use a qualified export to
maximize<00:28:43.830><c> the</c><00:28:44.039><c> encapsulation</c><00:28:44.580><c> to</c><00:28:44.850><c> say</c><00:28:45.029><c> that</c>

00:28:45.230 --> 00:28:45.240 align:start position:0%
maximize the encapsulation to say that
 

00:28:45.240 --> 00:28:47.779 align:start position:0%
maximize the encapsulation to say that
package<00:28:45.630><c> there</c><00:28:45.659><c> is</c><00:28:46.049><c> exported</c><00:28:46.620><c> only</c><00:28:47.070><c> to</c><00:28:47.640><c> code</c>

00:28:47.779 --> 00:28:47.789 align:start position:0%
package there is exported only to code
 

00:28:47.789 --> 00:28:52.279 align:start position:0%
package there is exported only to code
in<00:28:48.000><c> my</c><00:28:48.029><c> app</c><00:28:50.600><c> let's</c><00:28:51.600><c> turn</c><00:28:51.809><c> to</c><00:28:51.840><c> the</c><00:28:52.020><c> module</c>

00:28:52.279 --> 00:28:52.289 align:start position:0%
in my app let's turn to the module
 

00:28:52.289 --> 00:28:55.250 align:start position:0%
in my app let's turn to the module
declaration<00:28:52.860><c> for</c><00:28:53.070><c> my</c><00:28:53.190><c> app</c><00:28:53.630><c> it</c><00:28:54.630><c> requires</c><00:28:55.020><c> my</c>

00:28:55.250 --> 00:28:55.260 align:start position:0%
declaration for my app it requires my
 

00:28:55.260 --> 00:28:58.279 align:start position:0%
declaration for my app it requires my
lib<00:28:55.470><c> no</c><00:28:55.799><c> surprise</c><00:28:56.130><c> and</c><00:28:56.429><c> some</c><00:28:57.240><c> JDK</c><00:28:57.600><c> modules</c><00:28:58.020><c> and</c>

00:28:58.279 --> 00:28:58.289 align:start position:0%
lib no surprise and some JDK modules and
 

00:28:58.289 --> 00:29:00.740 align:start position:0%
lib no surprise and some JDK modules and
we<00:28:58.890><c> know</c><00:28:59.039><c> it's</c><00:28:59.190><c> going</c><00:28:59.400><c> to</c><00:28:59.520><c> use</c><00:28:59.730><c> Jackson</c><00:29:00.270><c> but</c>

00:29:00.740 --> 00:29:00.750 align:start position:0%
we know it's going to use Jackson but
 

00:29:00.750 --> 00:29:02.600 align:start position:0%
we know it's going to use Jackson but
we're<00:29:00.929><c> not</c><00:29:01.110><c> sure</c><00:29:01.500><c> yet</c><00:29:01.529><c> how</c><00:29:02.130><c> to</c><00:29:02.159><c> write</c><00:29:02.490><c> the</c>

00:29:02.600 --> 00:29:02.610 align:start position:0%
we're not sure yet how to write the
 

00:29:02.610 --> 00:29:04.220 align:start position:0%
we're not sure yet how to write the
requires<00:29:02.970><c> directives</c><00:29:03.570><c> because</c><00:29:03.960><c> they're</c><00:29:04.140><c> not</c>

00:29:04.220 --> 00:29:04.230 align:start position:0%
requires directives because they're not
 

00:29:04.230 --> 00:29:07.610 align:start position:0%
requires directives because they're not
modules<00:29:04.679><c> yet</c><00:29:05.000><c> does</c><00:29:06.000><c> that</c><00:29:06.270><c> mean</c><00:29:06.480><c> that</c><00:29:06.690><c> we</c><00:29:06.899><c> which</c>

00:29:07.610 --> 00:29:07.620 align:start position:0%
modules yet does that mean that we which
 

00:29:07.620 --> 00:29:09.950 align:start position:0%
modules yet does that mean that we which
means<00:29:07.830><c> you</c><00:29:07.980><c> have</c><00:29:08.580><c> to</c><00:29:08.610><c> turn</c><00:29:08.940><c> Jackson</c><00:29:09.570><c> into</c>

00:29:09.950 --> 00:29:09.960 align:start position:0%
means you have to turn Jackson into
 

00:29:09.960 --> 00:29:11.810 align:start position:0%
means you have to turn Jackson into
modules<00:29:10.320><c> before</c><00:29:10.950><c> you</c><00:29:11.340><c> can</c><00:29:11.490><c> write</c><00:29:11.669><c> this</c>

00:29:11.810 --> 00:29:11.820 align:start position:0%
modules before you can write this
 

00:29:11.820 --> 00:29:13.519 align:start position:0%
modules before you can write this
declaration<00:29:12.390><c> that</c><00:29:12.600><c> would</c><00:29:13.110><c> be</c><00:29:13.230><c> unfortunate</c>

00:29:13.519 --> 00:29:13.529 align:start position:0%
declaration that would be unfortunate
 

00:29:13.529 --> 00:29:16.430 align:start position:0%
declaration that would be unfortunate
since<00:29:14.070><c> we</c><00:29:14.520><c> you</c><00:29:14.909><c> don't</c><00:29:15.210><c> control</c><00:29:15.720><c> the</c><00:29:15.779><c> Jackson</c>

00:29:16.430 --> 00:29:16.440 align:start position:0%
since we you don't control the Jackson
 

00:29:16.440 --> 00:29:20.899 align:start position:0%
since we you don't control the Jackson
jar<00:29:16.649><c> files</c><00:29:18.470><c> if</c><00:29:19.470><c> only</c><00:29:19.950><c> there</c><00:29:20.100><c> was</c><00:29:20.220><c> some</c><00:29:20.460><c> way</c><00:29:20.490><c> for</c>

00:29:20.899 --> 00:29:20.909 align:start position:0%
jar files if only there was some way for
 

00:29:20.909 --> 00:29:22.970 align:start position:0%
jar files if only there was some way for
the<00:29:20.970><c> Jackson</c><00:29:21.390><c> jar</c><00:29:21.630><c> files</c><00:29:21.899><c> to</c><00:29:22.110><c> somehow</c><00:29:22.529><c> become</c>

00:29:22.970 --> 00:29:22.980 align:start position:0%
the Jackson jar files to somehow become
 

00:29:22.980 --> 00:29:25.700 align:start position:0%
the Jackson jar files to somehow become
modules<00:29:23.720><c> automatically</c><00:29:24.720><c> look</c><00:29:24.960><c> how</c><00:29:25.080><c> green</c>

00:29:25.700 --> 00:29:25.710 align:start position:0%
modules automatically look how green
 

00:29:25.710 --> 00:29:28.669 align:start position:0%
modules automatically look how green
they're<00:29:25.950><c> going</c><00:29:26.390><c> we</c><00:29:27.390><c> don't</c><00:29:27.510><c> know</c><00:29:27.720><c> we</c><00:29:28.230><c> didn't</c>

00:29:28.669 --> 00:29:28.679 align:start position:0%
they're going we don't know we didn't
 

00:29:28.679 --> 00:29:30.019 align:start position:0%
they're going we don't know we didn't
write<00:29:28.799><c> Jackson</c><00:29:29.159><c> we</c><00:29:29.309><c> don't</c><00:29:29.520><c> know</c><00:29:29.669><c> what</c><00:29:29.880><c> their</c>

00:29:30.019 --> 00:29:30.029 align:start position:0%
write Jackson we don't know what their
 

00:29:30.029 --> 00:29:31.730 align:start position:0%
write Jackson we don't know what their
dependencies<00:29:30.600><c> and</c><00:29:30.720><c> exports</c><00:29:31.169><c> would</c><00:29:31.289><c> be</c><00:29:31.470><c> but</c><00:29:31.649><c> we</c>

00:29:31.730 --> 00:29:31.740 align:start position:0%
dependencies and exports would be but we
 

00:29:31.740 --> 00:29:32.690 align:start position:0%
dependencies and exports would be but we
have<00:29:31.860><c> a</c><00:29:31.890><c> pretty</c><00:29:32.070><c> good</c><00:29:32.190><c> idea</c><00:29:32.429><c> of</c><00:29:32.490><c> what</c><00:29:32.640><c> the</c>

00:29:32.690 --> 00:29:32.700 align:start position:0%
have a pretty good idea of what the
 

00:29:32.700 --> 00:29:34.250 align:start position:0%
have a pretty good idea of what the
names<00:29:32.880><c> would</c><00:29:33.059><c> be</c><00:29:33.179><c> they</c><00:29:33.480><c> basically</c><00:29:34.110><c> be</c><00:29:34.230><c> the</c>

00:29:34.250 --> 00:29:34.260 align:start position:0%
names would be they basically be the
 

00:29:34.260 --> 00:29:39.230 align:start position:0%
names would be they basically be the
same<00:29:34.529><c> names</c><00:29:34.770><c> as</c><00:29:35.039><c> the</c><00:29:35.730><c> jars</c><00:29:37.399><c> if</c><00:29:38.399><c> we</c><00:29:38.940><c> could</c><00:29:39.120><c> do</c>

00:29:39.230 --> 00:29:39.240 align:start position:0%
same names as the jars if we could do
 

00:29:39.240 --> 00:29:41.750 align:start position:0%
same names as the jars if we could do
that<00:29:39.590><c> we</c><00:29:40.590><c> could</c><00:29:40.620><c> finish</c><00:29:40.950><c> writing</c><00:29:41.279><c> the</c><00:29:41.490><c> module</c>

00:29:41.750 --> 00:29:41.760 align:start position:0%
that we could finish writing the module
 

00:29:41.760 --> 00:29:44.120 align:start position:0%
that we could finish writing the module
declaration<00:29:42.299><c> for</c><00:29:42.480><c> my</c><00:29:42.600><c> app</c><00:29:42.750><c> happy</c><00:29:43.500><c> faces</c><00:29:43.710><c> on</c>

00:29:44.120 --> 00:29:44.130 align:start position:0%
declaration for my app happy faces on
 

00:29:44.130 --> 00:29:48.740 align:start position:0%
declaration for my app happy faces on
those<00:29:44.760><c> requires</c><00:29:45.179><c> directives</c><00:29:47.570><c> we'd</c><00:29:48.570><c> have</c><00:29:48.720><c> a</c>

00:29:48.740 --> 00:29:48.750 align:start position:0%
those requires directives we'd have a
 

00:29:48.750 --> 00:29:50.779 align:start position:0%
those requires directives we'd have a
lovely<00:29:48.960><c> module</c><00:29:49.380><c> graph</c><00:29:49.620><c> with</c><00:29:50.429><c> my</c><00:29:50.640><c> app</c>

00:29:50.779 --> 00:29:50.789 align:start position:0%
lovely module graph with my app
 

00:29:50.789 --> 00:29:53.389 align:start position:0%
lovely module graph with my app
depending<00:29:51.390><c> on</c><00:29:51.480><c> my</c><00:29:51.659><c> lib</c><00:29:51.870><c> and</c><00:29:52.080><c> Jackson</c><00:29:53.010><c> Koren</c>

00:29:53.389 --> 00:29:53.399 align:start position:0%
depending on my lib and Jackson Koren
 

00:29:53.399 --> 00:29:55.549 align:start position:0%
depending on my lib and Jackson Koren
Jackson<00:29:53.700><c> data</c><00:29:53.880><c> bind</c><00:29:54.149><c> and</c><00:29:54.480><c> Java</c><00:29:54.960><c> base</c><00:29:55.169><c> and</c><00:29:55.409><c> Java</c>

00:29:55.549 --> 00:29:55.559 align:start position:0%
Jackson data bind and Java base and Java
 

00:29:55.559 --> 00:30:01.360 align:start position:0%
Jackson data bind and Java base and Java
sequel<00:29:56.010><c> and</c><00:29:56.779><c> my</c><00:29:57.779><c> Lib</c><00:29:57.990><c> depending</c><00:29:58.890><c> on</c><00:29:58.950><c> Java</c><00:29:59.130><c> base</c>

00:30:01.360 --> 00:30:01.370 align:start position:0%
 
 

00:30:01.370 --> 00:30:03.710 align:start position:0%
 
the<00:30:02.370><c> good</c><00:30:02.549><c> news</c><00:30:02.730><c> is</c><00:30:02.970><c> we</c><00:30:03.090><c> can</c><00:30:03.120><c> do</c><00:30:03.330><c> this</c>

00:30:03.710 --> 00:30:03.720 align:start position:0%
the good news is we can do this
 

00:30:03.720 --> 00:30:07.250 align:start position:0%
the good news is we can do this
with<00:30:04.140><c> automatic</c><00:30:04.679><c> modules</c><00:30:05.220><c> an</c><00:30:06.260><c> automatic</c>

00:30:07.250 --> 00:30:07.260 align:start position:0%
with automatic modules an automatic
 

00:30:07.260 --> 00:30:10.100 align:start position:0%
with automatic modules an automatic
module<00:30:07.710><c> is</c><00:30:08.159><c> a</c><00:30:08.460><c> module</c><00:30:08.700><c> whose</c><00:30:09.179><c> declaration</c><00:30:09.960><c> is</c>

00:30:10.100 --> 00:30:10.110 align:start position:0%
module is a module whose declaration is
 

00:30:10.110 --> 00:30:13.639 align:start position:0%
module is a module whose declaration is
inferred<00:30:10.830><c> by</c><00:30:11.640><c> the</c><00:30:11.700><c> module</c><00:30:12.210><c> system</c><00:30:12.559><c> from</c><00:30:13.559><c> a</c>

00:30:13.639 --> 00:30:13.649 align:start position:0%
inferred by the module system from a
 

00:30:13.649 --> 00:30:16.909 align:start position:0%
inferred by the module system from a
traditional<00:30:14.399><c> jar</c><00:30:14.760><c> that</c><00:30:15.090><c> you</c><00:30:15.899><c> have</c><00:30:16.230><c> placed</c><00:30:16.590><c> on</c>

00:30:16.909 --> 00:30:16.919 align:start position:0%
traditional jar that you have placed on
 

00:30:16.919 --> 00:30:20.840 align:start position:0%
traditional jar that you have placed on
the<00:30:17.190><c> convert</c><00:30:17.789><c> module</c><00:30:18.210><c> path</c><00:30:19.520><c> they're</c><00:30:20.520><c> real</c>

00:30:20.840 --> 00:30:20.850 align:start position:0%
the convert module path they're real
 

00:30:20.850 --> 00:30:22.700 align:start position:0%
the convert module path they're real
modules<00:30:21.360><c> there</c><00:30:21.659><c> they're</c><00:30:22.110><c> really</c><00:30:22.380><c> there</c><00:30:22.559><c> at</c>

00:30:22.700 --> 00:30:22.710 align:start position:0%
modules there they're really there at
 

00:30:22.710 --> 00:30:25.130 align:start position:0%
modules there they're really there at
runtime<00:30:22.890><c> you</c><00:30:23.370><c> don't</c><00:30:23.880><c> change</c><00:30:24.330><c> the</c><00:30:24.659><c> jar</c><00:30:24.870><c> file</c><00:30:25.080><c> I</c>

00:30:25.130 --> 00:30:25.140 align:start position:0%
runtime you don't change the jar file I
 

00:30:25.140 --> 00:30:26.299 align:start position:0%
runtime you don't change the jar file I
can<00:30:25.289><c> get</c><00:30:25.440><c> this</c><00:30:25.559><c> across</c><00:30:25.710><c> enough</c><00:30:25.950><c> you</c><00:30:26.070><c> don't</c>

00:30:26.299 --> 00:30:26.309 align:start position:0%
can get this across enough you don't
 

00:30:26.309 --> 00:30:28.250 align:start position:0%
can get this across enough you don't
change<00:30:26.610><c> the</c><00:30:26.820><c> jar</c><00:30:27.059><c> file</c><00:30:27.330><c> in</c><00:30:27.510><c> any</c><00:30:27.659><c> way</c><00:30:27.899><c> because</c>

00:30:28.250 --> 00:30:28.260 align:start position:0%
change the jar file in any way because
 

00:30:28.260 --> 00:30:29.899 align:start position:0%
change the jar file in any way because
you<00:30:28.529><c> don't</c><00:30:28.740><c> know</c><00:30:28.830><c> anything</c><00:30:29.250><c> about</c><00:30:29.580><c> what</c><00:30:29.789><c> it's</c>

00:30:29.899 --> 00:30:29.909 align:start position:0%
you don't know anything about what it's
 

00:30:29.909 --> 00:30:33.230 align:start position:0%
you don't know anything about what it's
doing<00:30:30.830><c> the</c><00:30:31.830><c> module</c><00:30:32.159><c> name</c><00:30:32.340><c> of</c><00:30:32.610><c> an</c><00:30:32.760><c> automatic</c>

00:30:33.230 --> 00:30:33.240 align:start position:0%
doing the module name of an automatic
 

00:30:33.240 --> 00:30:34.970 align:start position:0%
doing the module name of an automatic
module<00:30:33.539><c> that</c><00:30:33.779><c> you</c><00:30:33.870><c> require</c><00:30:34.260><c> is</c><00:30:34.470><c> derived</c><00:30:34.799><c> from</c>

00:30:34.970 --> 00:30:34.980 align:start position:0%
module that you require is derived from
 

00:30:34.980 --> 00:30:37.399 align:start position:0%
module that you require is derived from
the<00:30:35.130><c> jar</c><00:30:35.309><c> file</c><00:30:35.549><c> name</c><00:30:35.820><c> it</c><00:30:36.659><c> exports</c><00:30:37.169><c> all</c><00:30:37.289><c> this</c>

00:30:37.399 --> 00:30:37.409 align:start position:0%
the jar file name it exports all this
 

00:30:37.409 --> 00:30:39.139 align:start position:0%
the jar file name it exports all this
packages<00:30:37.890><c> and</c><00:30:38.159><c> it</c><00:30:38.279><c> requires</c><00:30:38.700><c> all</c><00:30:38.940><c> other</c>

00:30:39.139 --> 00:30:39.149 align:start position:0%
packages and it requires all other
 

00:30:39.149 --> 00:30:44.270 align:start position:0%
packages and it requires all other
modules<00:30:40.070><c> in</c><00:30:41.090><c> effect</c><00:30:42.590><c> automatic</c><00:30:43.590><c> modules</c><00:30:44.010><c> mean</c>

00:30:44.270 --> 00:30:44.280 align:start position:0%
modules in effect automatic modules mean
 

00:30:44.280 --> 00:30:48.019 align:start position:0%
modules in effect automatic modules mean
that<00:30:44.460><c> today's</c><00:30:44.820><c> jars</c><00:30:45.409><c> are</c><00:30:46.409><c> already</c><00:30:47.100><c> tomorrow</c>

00:30:48.019 --> 00:30:48.029 align:start position:0%
that today's jars are already tomorrow
 

00:30:48.029 --> 00:30:53.089 align:start position:0%
that today's jars are already tomorrow
modules<00:30:50.330><c> now</c><00:30:51.330><c> once</c><00:30:52.169><c> automatic</c><00:30:52.739><c> modules</c>

00:30:53.089 --> 00:30:53.099 align:start position:0%
modules now once automatic modules
 

00:30:53.099 --> 00:30:55.879 align:start position:0%
modules now once automatic modules
spring<00:30:53.820><c> into</c><00:30:54.119><c> existence</c><00:30:54.149><c> for</c><00:30:55.139><c> Jackson</c><00:30:55.590><c> core</c>

00:30:55.879 --> 00:30:55.889 align:start position:0%
spring into existence for Jackson core
 

00:30:55.889 --> 00:30:57.379 align:start position:0%
spring into existence for Jackson core
Jackson<00:30:56.399><c> data</c><00:30:56.580><c> binds</c><00:30:56.879><c> and</c><00:30:57.090><c> Jackson</c>

00:30:57.379 --> 00:30:57.389 align:start position:0%
Jackson data binds and Jackson
 

00:30:57.389 --> 00:30:59.119 align:start position:0%
Jackson data binds and Jackson
annotation<00:30:57.960><c> because</c><00:30:58.379><c> you</c><00:30:58.499><c> move</c><00:30:58.710><c> you</c><00:30:58.919><c> put</c>

00:30:59.119 --> 00:30:59.129 align:start position:0%
annotation because you move you put
 

00:30:59.129 --> 00:31:01.879 align:start position:0%
annotation because you move you put
those<00:30:59.279><c> jars</c><00:30:59.639><c> on</c><00:30:59.969><c> the</c><00:31:00.179><c> module</c><00:31:00.479><c> path</c><00:31:00.690><c> the</c><00:31:01.619><c> module</c>

00:31:01.879 --> 00:31:01.889 align:start position:0%
those jars on the module path the module
 

00:31:01.889 --> 00:31:03.919 align:start position:0%
those jars on the module path the module
graph<00:31:02.129><c> looks</c><00:31:02.429><c> quite</c><00:31:02.639><c> different</c><00:31:02.779><c> because</c><00:31:03.779><c> the</c>

00:31:03.919 --> 00:31:03.929 align:start position:0%
graph looks quite different because the
 

00:31:03.929 --> 00:31:06.139 align:start position:0%
graph looks quite different because the
automatic<00:31:04.049><c> modules</c><00:31:04.739><c> basically</c><00:31:05.279><c> say</c><00:31:05.489><c> requires</c>

00:31:06.139 --> 00:31:06.149 align:start position:0%
automatic modules basically say requires
 

00:31:06.149 --> 00:31:08.959 align:start position:0%
automatic modules basically say requires
everything<00:31:06.690><c> they</c><00:31:07.469><c> require</c><00:31:07.859><c> each</c><00:31:08.070><c> other</c><00:31:08.279><c> they</c>

00:31:08.959 --> 00:31:08.969 align:start position:0%
everything they require each other they
 

00:31:08.969 --> 00:31:11.060 align:start position:0%
everything they require each other they
require<00:31:09.389><c> all</c><00:31:09.599><c> the</c><00:31:09.779><c> modules</c><00:31:09.899><c> in</c><00:31:10.320><c> the</c><00:31:10.349><c> JDK</c><00:31:10.799><c> image</c>

00:31:11.060 --> 00:31:11.070 align:start position:0%
require all the modules in the JDK image
 

00:31:11.070 --> 00:31:13.759 align:start position:0%
require all the modules in the JDK image
and<00:31:11.479><c> they</c><00:31:12.479><c> require</c><00:31:12.809><c> all</c><00:31:12.989><c> of</c><00:31:13.109><c> your</c><00:31:13.229><c> modules</c><00:31:13.590><c> as</c>

00:31:13.759 --> 00:31:13.769 align:start position:0%
and they require all of your modules as
 

00:31:13.769 --> 00:31:15.680 align:start position:0%
and they require all of your modules as
well<00:31:13.799><c> and</c><00:31:14.219><c> they</c><00:31:14.789><c> explore</c><00:31:15.029><c> all</c><00:31:15.179><c> their</c><00:31:15.269><c> packages</c>

00:31:15.680 --> 00:31:15.690 align:start position:0%
well and they explore all their packages
 

00:31:15.690 --> 00:31:17.629 align:start position:0%
well and they explore all their packages
now<00:31:16.289><c> this</c><00:31:16.710><c> might</c><00:31:16.919><c> not</c><00:31:17.099><c> be</c><00:31:17.249><c> the</c><00:31:17.399><c> set</c><00:31:17.609><c> of</c>

00:31:17.629 --> 00:31:17.639 align:start position:0%
now this might not be the set of
 

00:31:17.639 --> 00:31:19.820 align:start position:0%
now this might not be the set of
requires<00:31:18.119><c> and</c><00:31:18.359><c> exports</c><00:31:18.840><c> that</c><00:31:19.200><c> the</c><00:31:19.349><c> Jackson</c>

00:31:19.820 --> 00:31:19.830 align:start position:0%
requires and exports that the Jackson
 

00:31:19.830 --> 00:31:21.560 align:start position:0%
requires and exports that the Jackson
maintainer<00:31:20.279><c> x'</c><00:31:20.429><c> would</c><00:31:20.580><c> write</c><00:31:20.759><c> by</c><00:31:20.909><c> hands</c><00:31:21.419><c> um</c>

00:31:21.560 --> 00:31:21.570 align:start position:0%
maintainer x' would write by hands um
 

00:31:21.570 --> 00:31:24.320 align:start position:0%
maintainer x' would write by hands um
but<00:31:22.320><c> it's</c><00:31:22.440><c> actually</c><00:31:22.859><c> the</c><00:31:23.820><c> way</c><00:31:23.909><c> automatic</c>

00:31:24.320 --> 00:31:24.330 align:start position:0%
but it's actually the way automatic
 

00:31:24.330 --> 00:31:25.729 align:start position:0%
but it's actually the way automatic
modules<00:31:24.599><c> do</c><00:31:24.719><c> this</c><00:31:24.869><c> is</c><00:31:24.989><c> a</c><00:31:25.019><c> feature</c><00:31:25.320><c> not</c><00:31:25.559><c> a</c><00:31:25.619><c> bug</c>

00:31:25.729 --> 00:31:25.739 align:start position:0%
modules do this is a feature not a bug
 

00:31:25.739 --> 00:31:28.789 align:start position:0%
modules do this is a feature not a bug
because<00:31:26.159><c> it</c><00:31:26.429><c> emulates</c><00:31:26.909><c> the</c><00:31:27.389><c> behavior</c><00:31:27.989><c> of</c><00:31:28.200><c> the</c>

00:31:28.789 --> 00:31:28.799 align:start position:0%
because it emulates the behavior of the
 

00:31:28.799 --> 00:31:32.119 align:start position:0%
because it emulates the behavior of the
classpath<00:31:29.309><c> it</c><00:31:30.149><c> provides</c><00:31:30.960><c> the</c><00:31:31.529><c> maximum</c>

00:31:32.119 --> 00:31:32.129 align:start position:0%
classpath it provides the maximum
 

00:31:32.129 --> 00:31:35.419 align:start position:0%
classpath it provides the maximum
possible<00:31:32.869><c> compatibility</c><00:31:33.869><c> surface</c><00:31:34.379><c> for</c><00:31:35.129><c> code</c>

00:31:35.419 --> 00:31:35.429 align:start position:0%
possible compatibility surface for code
 

00:31:35.429 --> 00:31:38.749 align:start position:0%
possible compatibility surface for code
in<00:31:35.639><c> jar</c><00:31:35.849><c> files</c><00:31:36.119><c> and</c><00:31:37.249><c> it's</c><00:31:38.249><c> actually</c><00:31:38.580><c> better</c>

00:31:38.749 --> 00:31:38.759 align:start position:0%
in jar files and it's actually better
 

00:31:38.759 --> 00:31:40.549 align:start position:0%
in jar files and it's actually better
than<00:31:39.059><c> when</c><00:31:39.299><c> everything</c><00:31:39.809><c> was</c><00:31:39.929><c> a</c><00:31:39.989><c> jar</c><00:31:40.289><c> on</c><00:31:40.320><c> the</c>

00:31:40.549 --> 00:31:40.559 align:start position:0%
than when everything was a jar on the
 

00:31:40.559 --> 00:31:42.469 align:start position:0%
than when everything was a jar on the
classpath<00:31:40.979><c> for</c><00:31:41.219><c> example</c><00:31:41.580><c> you</c><00:31:42.179><c> have</c><00:31:42.299><c> to</c><00:31:42.389><c> look</c>

00:31:42.469 --> 00:31:42.479 align:start position:0%
classpath for example you have to look
 

00:31:42.479 --> 00:31:45.430 align:start position:0%
classpath for example you have to look
carefully<00:31:42.659><c> there</c><00:31:42.989><c> is</c><00:31:43.109><c> no</c><00:31:43.409><c> arrow</c><00:31:43.820><c> from</c><00:31:44.820><c> my</c><00:31:45.089><c> lib</c>

00:31:45.430 --> 00:31:45.440 align:start position:0%
carefully there is no arrow from my lib
 

00:31:45.440 --> 00:31:49.969 align:start position:0%
carefully there is no arrow from my lib
to<00:31:46.440><c> my</c><00:31:46.679><c> app</c><00:31:47.119><c> so</c><00:31:48.119><c> there's</c><00:31:48.299><c> no</c><00:31:48.479><c> danger</c><00:31:48.690><c> of</c><00:31:49.440><c> helper</c>

00:31:49.969 --> 00:31:49.979 align:start position:0%
to my app so there's no danger of helper
 

00:31:49.979 --> 00:31:52.669 align:start position:0%
to my app so there's no danger of helper
code<00:31:50.190><c> in</c><00:31:50.399><c> my</c><00:31:50.429><c> Lib</c><00:31:51.200><c> accidentally</c><00:31:52.200><c> reaching</c>

00:31:52.669 --> 00:31:52.679 align:start position:0%
code in my Lib accidentally reaching
 

00:31:52.679 --> 00:31:55.399 align:start position:0%
code in my Lib accidentally reaching
into<00:31:53.070><c> my</c><00:31:53.099><c> apps</c><00:31:53.489><c> internals</c><00:31:54.239><c> on</c><00:31:54.509><c> the</c><00:31:54.929><c> classpath</c>

00:31:55.399 --> 00:31:55.409 align:start position:0%
into my apps internals on the classpath
 

00:31:55.409 --> 00:31:57.619 align:start position:0%
into my apps internals on the classpath
code<00:31:55.710><c> in</c><00:31:55.859><c> my</c><00:31:55.889><c> live</c><00:31:56.190><c> jar</c><00:31:56.639><c> could</c><00:31:56.820><c> access</c><00:31:57.179><c> code</c><00:31:57.479><c> in</c>

00:31:57.619 --> 00:31:57.629 align:start position:0%
code in my live jar could access code in
 

00:31:57.629 --> 00:31:59.749 align:start position:0%
code in my live jar could access code in
my<00:31:57.809><c> app</c><00:31:57.929><c> dot</c><00:31:58.169><c> jar</c><00:31:58.440><c> my</c><00:31:59.099><c> lip</c><00:31:59.279><c> dot</c><00:31:59.399><c> jar</c><00:31:59.609><c> could</c>

00:31:59.749 --> 00:31:59.759 align:start position:0%
my app dot jar my lip dot jar could
 

00:31:59.759 --> 00:32:01.489 align:start position:0%
my app dot jar my lip dot jar could
access<00:32:00.089><c> code</c><00:32:00.359><c> in</c><00:32:00.509><c> my</c><00:32:00.599><c> aperture</c><00:32:00.839><c> quite</c><00:32:01.289><c> easily</c>

00:32:01.489 --> 00:32:01.499 align:start position:0%
access code in my aperture quite easily
 

00:32:01.499 --> 00:32:03.889 align:start position:0%
access code in my aperture quite easily
without<00:32:02.429><c> really</c><00:32:02.820><c> even</c><00:32:03.059><c> knowing</c><00:32:03.210><c> it</c><00:32:03.479><c> and</c><00:32:03.719><c> that</c>

00:32:03.889 --> 00:32:03.899 align:start position:0%
without really even knowing it and that
 

00:32:03.899 --> 00:32:05.509 align:start position:0%
without really even knowing it and that
causes<00:32:04.440><c> maintenance</c><00:32:05.009><c> headaches</c><00:32:05.279><c> down</c><00:32:05.460><c> the</c>

00:32:05.509 --> 00:32:05.519 align:start position:0%
causes maintenance headaches down the
 

00:32:05.519 --> 00:32:08.359 align:start position:0%
causes maintenance headaches down the
road<00:32:05.989><c> now</c><00:32:06.989><c> you</c><00:32:07.409><c> might</c><00:32:07.589><c> think</c><00:32:07.619><c> we</c><00:32:08.099><c> could</c><00:32:08.249><c> do</c>

00:32:08.359 --> 00:32:08.369 align:start position:0%
road now you might think we could do
 

00:32:08.369 --> 00:32:08.690 align:start position:0%
road now you might think we could do
better

00:32:08.690 --> 00:32:08.700 align:start position:0%
better
 

00:32:08.700 --> 00:32:10.940 align:start position:0%
better
perhaps<00:32:09.330><c> the</c><00:32:09.479><c> module</c><00:32:09.779><c> system</c><00:32:10.139><c> could</c><00:32:10.409><c> run</c><00:32:10.649><c> Jade</c>

00:32:10.940 --> 00:32:10.950 align:start position:0%
perhaps the module system could run Jade
 

00:32:10.950 --> 00:32:13.009 align:start position:0%
perhaps the module system could run Jade
EPS<00:32:11.129><c> on</c><00:32:11.339><c> the</c><00:32:11.460><c> Jackson</c><00:32:11.789><c> jars</c><00:32:12.059><c> at</c><00:32:12.269><c> startup</c><00:32:12.809><c> and</c>

00:32:13.009 --> 00:32:13.019 align:start position:0%
EPS on the Jackson jars at startup and
 

00:32:13.019 --> 00:32:15.709 align:start position:0%
EPS on the Jackson jars at startup and
try<00:32:13.739><c> to</c><00:32:13.799><c> figure</c><00:32:14.070><c> out</c><00:32:14.190><c> what</c><00:32:14.489><c> modules</c><00:32:14.940><c> the</c><00:32:15.479><c> Jax</c>

00:32:15.709 --> 00:32:15.719 align:start position:0%
try to figure out what modules the Jax
 

00:32:15.719 --> 00:32:18.829 align:start position:0%
try to figure out what modules the Jax
and<00:32:15.899><c> jars</c><00:32:16.139><c> require</c><00:32:17.719><c> unfortunately</c><00:32:18.719><c> this</c>

00:32:18.829 --> 00:32:18.839 align:start position:0%
and jars require unfortunately this
 

00:32:18.839 --> 00:32:20.539 align:start position:0%
and jars require unfortunately this
wouldn't<00:32:19.139><c> really</c><00:32:19.259><c> help</c><00:32:19.469><c> the</c><00:32:20.099><c> reason</c><00:32:20.399><c> is</c><00:32:20.519><c> that</c>

00:32:20.539 --> 00:32:20.549 align:start position:0%
wouldn't really help the reason is that
 

00:32:20.549 --> 00:32:22.729 align:start position:0%
wouldn't really help the reason is that
libraries<00:32:21.210><c> like</c><00:32:21.389><c> Jackson</c><00:32:21.839><c> often</c><00:32:22.349><c> make</c><00:32:22.499><c> use</c><00:32:22.529><c> of</c>

00:32:22.729 --> 00:32:22.739 align:start position:0%
libraries like Jackson often make use of
 

00:32:22.739 --> 00:32:25.070 align:start position:0%
libraries like Jackson often make use of
core<00:32:23.129><c> reflection</c><00:32:23.700><c> the</c><00:32:24.210><c> java.lang</c><00:32:24.690><c> reflect</c>

00:32:25.070 --> 00:32:25.080 align:start position:0%
core reflection the java.lang reflect
 

00:32:25.080 --> 00:32:28.339 align:start position:0%
core reflection the java.lang reflect
API<00:32:25.409><c> to</c><00:32:26.219><c> inspect</c><00:32:27.080><c> application</c><00:32:28.080><c> classes</c>

00:32:28.339 --> 00:32:28.349 align:start position:0%
API to inspect application classes
 

00:32:28.349 --> 00:32:31.940 align:start position:0%
API to inspect application classes
dynamically<00:32:29.359><c> Jade</c><00:32:30.359><c> EPS</c><00:32:30.539><c> can</c><00:32:30.809><c> see</c><00:32:31.139><c> the</c><00:32:31.469><c> use</c><00:32:31.710><c> of</c>

00:32:31.940 --> 00:32:31.950 align:start position:0%
dynamically Jade EPS can see the use of
 

00:32:31.950 --> 00:32:33.919 align:start position:0%
dynamically Jade EPS can see the use of
core<00:32:32.159><c> reflection</c><00:32:32.759><c> but</c><00:32:32.940><c> it</c><00:32:33.059><c> can't</c><00:32:33.330><c> predict</c>

00:32:33.919 --> 00:32:33.929 align:start position:0%
core reflection but it can't predict
 

00:32:33.929 --> 00:32:36.440 align:start position:0%
core reflection but it can't predict
statically<00:32:34.649><c> what</c><00:32:35.429><c> classes</c><00:32:36.059><c> will</c><00:32:36.299><c> be</c>

00:32:36.440 --> 00:32:36.450 align:start position:0%
statically what classes will be
 

00:32:36.450 --> 00:32:39.619 align:start position:0%
statically what classes will be
inspected<00:32:37.080><c> dynamically</c><00:32:37.799><c> and</c><00:32:38.219><c> in</c><00:32:39.029><c> fact</c><00:32:39.210><c> the</c>

00:32:39.619 --> 00:32:39.629 align:start position:0%
inspected dynamically and in fact the
 

00:32:39.629 --> 00:32:41.389 align:start position:0%
inspected dynamically and in fact the
Jackson<00:32:39.989><c> Beta</c><00:32:40.139><c> bind</c><00:32:40.440><c> module</c><00:32:40.830><c> does</c><00:32:40.979><c> exactly</c>

00:32:41.389 --> 00:32:41.399 align:start position:0%
Jackson Beta bind module does exactly
 

00:32:41.399 --> 00:32:43.430 align:start position:0%
Jackson Beta bind module does exactly
this<00:32:41.519><c> kind</c><00:32:41.789><c> of</c><00:32:41.940><c> reflection</c><00:32:42.479><c> it's</c><00:32:43.049><c> going</c><00:32:43.320><c> to</c>

00:32:43.430 --> 00:32:43.440 align:start position:0%
this kind of reflection it's going to
 

00:32:43.440 --> 00:32:45.289 align:start position:0%
this kind of reflection it's going to
grow<00:32:43.649><c> all</c><00:32:43.859><c> over</c><00:32:43.979><c> your</c><00:32:44.369><c> application</c><00:32:45.029><c> classes</c>

00:32:45.289 --> 00:32:45.299 align:start position:0%
grow all over your application classes
 

00:32:45.299 --> 00:32:48.229 align:start position:0%
grow all over your application classes
so<00:32:45.779><c> it</c><00:32:45.929><c> can</c><00:32:46.139><c> convert</c><00:32:46.559><c> between</c><00:32:46.830><c> them</c><00:32:47.429><c> and</c><00:32:47.669><c> JSON</c>

00:32:48.229 --> 00:32:48.239 align:start position:0%
so it can convert between them and JSON
 

00:32:48.239 --> 00:32:51.799 align:start position:0%
so it can convert between them and JSON
documents<00:32:48.749><c> so</c><00:32:49.529><c> if</c><00:32:49.889><c> my</c><00:32:50.369><c> app</c><00:32:50.549><c> has</c><00:32:50.820><c> classes</c><00:32:51.479><c> for</c>

00:32:51.799 --> 00:32:51.809 align:start position:0%
documents so if my app has classes for
 

00:32:51.809 --> 00:32:54.499 align:start position:0%
documents so if my app has classes for
which<00:32:51.989><c> it</c><00:32:52.259><c> wants</c><00:32:52.589><c> Jax</c><00:32:52.859><c> and</c><00:32:53.070><c> data</c><00:32:53.249><c> binding</c><00:32:53.509><c> we</c>

00:32:54.499 --> 00:32:54.509 align:start position:0%
which it wants Jax and data binding we
 

00:32:54.509 --> 00:32:56.869 align:start position:0%
which it wants Jax and data binding we
want<00:32:54.779><c> the</c><00:32:54.960><c> effect</c><00:32:55.349><c> of</c><00:32:55.710><c> saying</c><00:32:56.190><c> that</c><00:32:56.399><c> Jax</c><00:32:56.669><c> and</c>

00:32:56.869 --> 00:32:56.879 align:start position:0%
want the effect of saying that Jax and
 

00:32:56.879 --> 00:32:59.749 align:start position:0%
want the effect of saying that Jax and
data<00:32:57.059><c> bind</c><00:32:57.389><c> requires</c><00:32:58.169><c> my</c><00:32:58.529><c> app</c><00:32:58.679><c> amongst</c><00:32:59.519><c> many</c>

00:32:59.749 --> 00:32:59.759 align:start position:0%
data bind requires my app amongst many
 

00:32:59.759 --> 00:33:00.740 align:start position:0%
data bind requires my app amongst many
other<00:32:59.909><c> things</c>

00:33:00.740 --> 00:33:00.750 align:start position:0%
other things
 

00:33:00.750 --> 00:33:02.840 align:start position:0%
other things
that's<00:33:00.870><c> exactly</c><00:33:01.380><c> what</c><00:33:01.590><c> automatic</c><00:33:02.430><c> modules</c>

00:33:02.840 --> 00:33:02.850 align:start position:0%
that's exactly what automatic modules
 

00:33:02.850 --> 00:33:09.590 align:start position:0%
that's exactly what automatic modules
give<00:33:03.570><c> you</c><00:33:04.850><c> is</c><00:33:06.050><c> one</c><00:33:07.050><c> more</c><00:33:07.230><c> wrinkle</c><00:33:08.210><c> when</c><00:33:09.210><c> code</c>

00:33:09.590 --> 00:33:09.600 align:start position:0%
give you is one more wrinkle when code
 

00:33:09.600 --> 00:33:12.290 align:start position:0%
give you is one more wrinkle when code
that<00:33:10.170><c> was</c><00:33:10.290><c> that</c><00:33:10.530><c> was</c><00:33:10.680><c> Jackson</c><00:33:11.490><c> going</c><00:33:11.730><c> up</c><00:33:11.820><c> to</c><00:33:12.060><c> my</c>

00:33:12.290 --> 00:33:12.300 align:start position:0%
that was that was Jackson going up to my
 

00:33:12.300 --> 00:33:15.050 align:start position:0%
that was that was Jackson going up to my
app<00:33:12.480><c> when</c><00:33:13.140><c> code</c><00:33:13.500><c> in</c><00:33:13.830><c> my</c><00:33:13.890><c> app</c><00:33:14.340><c> calls</c><00:33:14.790><c> the</c>

00:33:15.050 --> 00:33:15.060 align:start position:0%
app when code in my app calls the
 

00:33:15.060 --> 00:33:19.040 align:start position:0%
app when code in my app calls the
Jackson<00:33:15.510><c> API</c><00:33:16.280><c> it</c><00:33:17.280><c> passes</c><00:33:17.940><c> its</c><00:33:18.510><c> own</c><00:33:18.720><c> class</c>

00:33:19.040 --> 00:33:19.050 align:start position:0%
Jackson API it passes its own class
 

00:33:19.050 --> 00:33:23.090 align:start position:0%
Jackson API it passes its own class
object<00:33:19.680><c> there</c><00:33:20.550><c> it</c><00:33:20.640><c> is</c><00:33:20.960><c> the</c><00:33:21.960><c> far</c><00:33:22.140><c> right</c><00:33:22.320><c> the</c>

00:33:23.090 --> 00:33:23.100 align:start position:0%
object there it is the far right the
 

00:33:23.100 --> 00:33:25.640 align:start position:0%
object there it is the far right the
intent<00:33:23.520><c> is</c><00:33:23.700><c> that</c><00:33:23.760><c> Jackson</c><00:33:24.720><c> data</c><00:33:24.930><c> bind</c><00:33:25.260><c> can</c>

00:33:25.640 --> 00:33:25.650 align:start position:0%
intent is that Jackson data bind can
 

00:33:25.650 --> 00:33:28.610 align:start position:0%
intent is that Jackson data bind can
create<00:33:26.130><c> an</c><00:33:26.370><c> instance</c><00:33:27.030><c> of</c><00:33:27.270><c> that</c><00:33:27.620><c> application</c>

00:33:28.610 --> 00:33:28.620 align:start position:0%
create an instance of that application
 

00:33:28.620 --> 00:33:31.370 align:start position:0%
create an instance of that application
class<00:33:28.890><c> my</c><00:33:29.130><c> value</c><00:33:29.550><c> and</c><00:33:29.760><c> then</c><00:33:30.390><c> reflectively</c><00:33:31.080><c> set</c>

00:33:31.370 --> 00:33:31.380 align:start position:0%
class my value and then reflectively set
 

00:33:31.380 --> 00:33:33.830 align:start position:0%
class my value and then reflectively set
the<00:33:31.500><c> name</c><00:33:31.680><c> and</c><00:33:31.860><c> age</c><00:33:32.010><c> fields</c><00:33:32.640><c> of</c><00:33:32.850><c> this</c><00:33:33.330><c> my</c><00:33:33.540><c> value</c>

00:33:33.830 --> 00:33:33.840 align:start position:0%
the name and age fields of this my value
 

00:33:33.840 --> 00:33:35.960 align:start position:0%
the name and age fields of this my value
instance<00:33:34.230><c> based</c><00:33:34.740><c> on</c><00:33:34.950><c> the</c><00:33:35.100><c> content</c><00:33:35.520><c> of</c><00:33:35.700><c> this</c>

00:33:35.960 --> 00:33:35.970 align:start position:0%
instance based on the content of this
 

00:33:35.970 --> 00:33:40.190 align:start position:0%
instance based on the content of this
here<00:33:36.150><c> JSON</c><00:33:36.510><c> document</c><00:33:37.670><c> however</c><00:33:38.900><c> this</c><00:33:39.900><c> code</c>

00:33:40.190 --> 00:33:40.200 align:start position:0%
here JSON document however this code
 

00:33:40.200 --> 00:33:42.680 align:start position:0%
here JSON document however this code
fails<00:33:40.640><c> because</c><00:33:41.640><c> we</c><00:33:41.790><c> never</c><00:33:41.970><c> got</c><00:33:42.150><c> around</c><00:33:42.300><c> to</c>

00:33:42.680 --> 00:33:42.690 align:start position:0%
fails because we never got around to
 

00:33:42.690 --> 00:33:46.490 align:start position:0%
fails because we never got around to
saying<00:33:43.110><c> what</c><00:33:43.470><c> my</c><00:33:43.740><c> app</c><00:33:44.390><c> exports</c><00:33:45.390><c> to</c><00:33:46.080><c> Jackson</c>

00:33:46.490 --> 00:33:46.500 align:start position:0%
saying what my app exports to Jackson
 

00:33:46.500 --> 00:33:49.850 align:start position:0%
saying what my app exports to Jackson
data<00:33:46.650><c> binds</c><00:33:47.300><c> now</c><00:33:48.300><c> this</c><00:33:48.750><c> in</c><00:33:48.960><c> some</c><00:33:49.110><c> sense</c><00:33:49.380><c> is</c><00:33:49.620><c> is</c>

00:33:49.850 --> 00:33:49.860 align:start position:0%
data binds now this in some sense is is
 

00:33:49.860 --> 00:33:52.010 align:start position:0%
data binds now this in some sense is is
gentle<00:33:50.670><c> because</c><00:33:51.000><c> my</c><00:33:51.300><c> app</c><00:33:51.420><c> doesn't</c><00:33:51.780><c> really</c>

00:33:52.010 --> 00:33:52.020 align:start position:0%
gentle because my app doesn't really
 

00:33:52.020 --> 00:33:54.380 align:start position:0%
gentle because my app doesn't really
have<00:33:52.260><c> an</c><00:33:52.350><c> API</c><00:33:52.620><c> it's</c><00:33:52.950><c> an</c><00:33:53.070><c> application</c><00:33:53.640><c> but</c><00:33:54.240><c> if</c>

00:33:54.380 --> 00:33:54.390 align:start position:0%
have an API it's an application but if
 

00:33:54.390 --> 00:33:56.750 align:start position:0%
have an API it's an application but if
it<00:33:54.540><c> wants</c><00:33:54.840><c> to</c><00:33:54.870><c> allow</c><00:33:55.200><c> Jackson</c><00:33:55.830><c> to</c><00:33:56.130><c> manipulate</c>

00:33:56.750 --> 00:33:56.760 align:start position:0%
it wants to allow Jackson to manipulate
 

00:33:56.760 --> 00:33:59.770 align:start position:0%
it wants to allow Jackson to manipulate
instances<00:33:57.540><c> of</c><00:33:57.720><c> its</c><00:33:57.930><c> classes</c><00:33:58.530><c> by</c><00:33:58.800><c> reflection</c>

00:33:59.770 --> 00:33:59.780 align:start position:0%
instances of its classes by reflection
 

00:33:59.780 --> 00:34:02.570 align:start position:0%
instances of its classes by reflection
then<00:34:00.780><c> my</c><00:34:01.020><c> app</c><00:34:01.170><c> still</c><00:34:01.500><c> need</c><00:34:01.650><c> to</c><00:34:01.830><c> export</c><00:34:02.250><c> some</c>

00:34:02.570 --> 00:34:02.580 align:start position:0%
then my app still need to export some
 

00:34:02.580 --> 00:34:05.330 align:start position:0%
then my app still need to export some
packages<00:34:03.110><c> strong</c><00:34:04.110><c> encapsulation</c><00:34:04.710><c> applies</c>

00:34:05.330 --> 00:34:05.340 align:start position:0%
packages strong encapsulation applies
 

00:34:05.340 --> 00:34:07.130 align:start position:0%
packages strong encapsulation applies
not<00:34:05.550><c> only</c><00:34:05.610><c> to</c><00:34:05.820><c> references</c><00:34:06.570><c> from</c><00:34:06.690><c> one</c><00:34:06.930><c> module</c>

00:34:07.130 --> 00:34:07.140 align:start position:0%
not only to references from one module
 

00:34:07.140 --> 00:34:09.860 align:start position:0%
not only to references from one module
turn<00:34:07.530><c> to</c><00:34:07.860><c> another</c><00:34:08.040><c> compile</c><00:34:08.700><c> time</c><00:34:08.970><c> but</c><00:34:09.720><c> also</c>

00:34:09.860 --> 00:34:09.870 align:start position:0%
turn to another compile time but also
 

00:34:09.870 --> 00:34:13.399 align:start position:0%
turn to another compile time but also
for<00:34:10.260><c> reflective</c><00:34:10.860><c> access</c><00:34:11.310><c> at</c><00:34:11.580><c> runtime</c><00:34:11.850><c> if</c><00:34:12.720><c> a</c>

00:34:13.399 --> 00:34:13.409 align:start position:0%
for reflective access at runtime if a
 

00:34:13.409 --> 00:34:15.860 align:start position:0%
for reflective access at runtime if a
module<00:34:13.710><c> doesn't</c><00:34:13.980><c> export</c><00:34:14.610><c> a</c><00:34:14.820><c> package</c><00:34:15.210><c> then</c>

00:34:15.860 --> 00:34:15.870 align:start position:0%
module doesn't export a package then
 

00:34:15.870 --> 00:34:18.560 align:start position:0%
module doesn't export a package then
code<00:34:16.139><c> in</c><00:34:16.320><c> other</c><00:34:16.560><c> modules</c><00:34:17.250><c> can't</c><00:34:17.700><c> inspect</c><00:34:18.330><c> the</c>

00:34:18.560 --> 00:34:18.570 align:start position:0%
code in other modules can't inspect the
 

00:34:18.570 --> 00:34:22.820 align:start position:0%
code in other modules can't inspect the
classes<00:34:19.110><c> by</c><00:34:19.560><c> reflection</c><00:34:20.419><c> now</c><00:34:21.419><c> a</c><00:34:21.830><c> reflective</c>

00:34:22.820 --> 00:34:22.830 align:start position:0%
classes by reflection now a reflective
 

00:34:22.830 --> 00:34:26.119 align:start position:0%
classes by reflection now a reflective
relationship<00:34:23.790><c> between</c><00:34:24.919><c> application</c><00:34:25.919><c> code</c>

00:34:26.119 --> 00:34:26.129 align:start position:0%
relationship between application code
 

00:34:26.129 --> 00:34:29.180 align:start position:0%
relationship between application code
and<00:34:26.190><c> library</c><00:34:26.669><c> code</c><00:34:26.850><c> is</c><00:34:27.090><c> common</c><00:34:28.190><c> application</c>

00:34:29.180 --> 00:34:29.190 align:start position:0%
and library code is common application
 

00:34:29.190 --> 00:34:31.700 align:start position:0%
and library code is common application
containers<00:34:29.820><c> might</c><00:34:30.210><c> walk</c><00:34:30.600><c> over</c><00:34:30.960><c> classes</c><00:34:31.440><c> to</c>

00:34:31.700 --> 00:34:31.710 align:start position:0%
containers might walk over classes to
 

00:34:31.710 --> 00:34:33.919 align:start position:0%
containers might walk over classes to
find<00:34:31.950><c> annotated</c><00:34:32.669><c> methods</c><00:34:33.030><c> to</c><00:34:33.179><c> be</c><00:34:33.300><c> exposed</c><00:34:33.720><c> as</c>

00:34:33.919 --> 00:34:33.929 align:start position:0%
find annotated methods to be exposed as
 

00:34:33.929 --> 00:34:36.530 align:start position:0%
find annotated methods to be exposed as
endpoints<00:34:35.120><c> dependency</c><00:34:36.120><c> injection</c>

00:34:36.530 --> 00:34:36.540 align:start position:0%
endpoints dependency injection
 

00:34:36.540 --> 00:34:38.360 align:start position:0%
endpoints dependency injection
frameworks<00:34:37.050><c> will</c><00:34:37.409><c> call</c><00:34:37.710><c> your</c><00:34:37.980><c> methods</c>

00:34:38.360 --> 00:34:38.370 align:start position:0%
frameworks will call your methods
 

00:34:38.370 --> 00:34:41.149 align:start position:0%
frameworks will call your methods
reflectively<00:34:39.710><c> serialization</c><00:34:40.710><c> frameworks</c>

00:34:41.149 --> 00:34:41.159 align:start position:0%
reflectively serialization frameworks
 

00:34:41.159 --> 00:34:43.369 align:start position:0%
reflectively serialization frameworks
will<00:34:41.639><c> reflectively</c><00:34:42.240><c> create</c><00:34:42.780><c> and</c><00:34:43.020><c> modify</c>

00:34:43.369 --> 00:34:43.379 align:start position:0%
will reflectively create and modify
 

00:34:43.379 --> 00:34:46.790 align:start position:0%
will reflectively create and modify
instances<00:34:44.340><c> of</c><00:34:44.580><c> your</c><00:34:44.639><c> classes</c><00:34:45.800><c> many</c>

00:34:46.790 --> 00:34:46.800 align:start position:0%
instances of your classes many
 

00:34:46.800 --> 00:34:49.700 align:start position:0%
instances of your classes many
applications<00:34:47.580><c> use</c><00:34:47.879><c> these</c><00:34:48.389><c> facilities</c><00:34:48.570><c> and</c><00:34:49.200><c> in</c>

00:34:49.700 --> 00:34:49.710 align:start position:0%
applications use these facilities and in
 

00:34:49.710 --> 00:34:51.290 align:start position:0%
applications use these facilities and in
order<00:34:49.980><c> for</c><00:34:50.010><c> them</c><00:34:50.159><c> to</c><00:34:50.220><c> work</c><00:34:50.460><c> we</c><00:34:50.730><c> somehow</c><00:34:50.970><c> have</c>

00:34:51.290 --> 00:34:51.300 align:start position:0%
order for them to work we somehow have
 

00:34:51.300 --> 00:34:53.840 align:start position:0%
order for them to work we somehow have
to<00:34:51.330><c> expose</c><00:34:51.840><c> otherwise</c><00:34:52.850><c> encapsulated</c>

00:34:53.840 --> 00:34:53.850 align:start position:0%
to expose otherwise encapsulated
 

00:34:53.850 --> 00:34:57.410 align:start position:0%
to expose otherwise encapsulated
application<00:34:54.510><c> classes</c><00:34:54.750><c> via</c><00:34:55.440><c> reflection</c><00:34:56.420><c> now</c>

00:34:57.410 --> 00:34:57.420 align:start position:0%
application classes via reflection now
 

00:34:57.420 --> 00:34:59.240 align:start position:0%
application classes via reflection now
we<00:34:57.480><c> could</c><00:34:57.690><c> do</c><00:34:57.780><c> that</c><00:34:57.900><c> by</c><00:34:58.080><c> exporting</c><00:34:58.650><c> the</c>

00:34:59.240 --> 00:34:59.250 align:start position:0%
we could do that by exporting the
 

00:34:59.250 --> 00:35:01.310 align:start position:0%
we could do that by exporting the
application<00:35:00.060><c> packages</c><00:35:00.450><c> but</c><00:35:01.080><c> there's</c><00:35:01.260><c> a</c>

00:35:01.310 --> 00:35:01.320 align:start position:0%
application packages but there's a
 

00:35:01.320 --> 00:35:03.830 align:start position:0%
application packages but there's a
finer-grained<00:35:01.730><c> mechanism</c><00:35:02.730><c> that</c><00:35:03.030><c> is</c><00:35:03.180><c> specific</c>

00:35:03.830 --> 00:35:03.840 align:start position:0%
finer-grained mechanism that is specific
 

00:35:03.840 --> 00:35:07.910 align:start position:0%
finer-grained mechanism that is specific
to<00:35:03.870><c> access</c><00:35:04.530><c> by</c><00:35:04.740><c> reflection</c><00:35:06.590><c> that</c><00:35:07.590><c> mechanism</c>

00:35:07.910 --> 00:35:07.920 align:start position:0%
to access by reflection that mechanism
 

00:35:07.920 --> 00:35:09.260 align:start position:0%
to access by reflection that mechanism
is<00:35:08.280><c> the</c><00:35:08.520><c> open</c>

00:35:09.260 --> 00:35:09.270 align:start position:0%
is the open
 

00:35:09.270 --> 00:35:12.210 align:start position:0%
is the open
directive<00:35:10.319><c> so</c><00:35:11.319><c> let's</c><00:35:11.530><c> say</c><00:35:11.710><c> our</c><00:35:11.740><c> domain</c>

00:35:12.210 --> 00:35:12.220 align:start position:0%
directive so let's say our domain
 

00:35:12.220 --> 00:35:14.430 align:start position:0%
directive so let's say our domain
classes<00:35:12.520><c> like</c><00:35:13.000><c> my</c><00:35:13.119><c> value</c><00:35:13.480><c> are</c><00:35:13.690><c> in</c><00:35:13.869><c> this</c><00:35:14.079><c> comm</c>

00:35:14.430 --> 00:35:14.440 align:start position:0%
classes like my value are in this comm
 

00:35:14.440 --> 00:35:17.339 align:start position:0%
classes like my value are in this comm
my<00:35:14.619><c> app</c><00:35:14.770><c> domain</c><00:35:14.980><c> package</c><00:35:15.490><c> we</c><00:35:16.390><c> can</c><00:35:16.420><c> open</c><00:35:17.140><c> that</c>

00:35:17.339 --> 00:35:17.349 align:start position:0%
my app domain package we can open that
 

00:35:17.349 --> 00:35:20.730 align:start position:0%
my app domain package we can open that
package<00:35:17.859><c> up</c><00:35:18.069><c> for</c><00:35:18.490><c> access</c><00:35:19.000><c> by</c><00:35:19.569><c> reflection</c><00:35:20.319><c> to</c>

00:35:20.730 --> 00:35:20.740 align:start position:0%
package up for access by reflection to
 

00:35:20.740 --> 00:35:23.730 align:start position:0%
package up for access by reflection to
all<00:35:21.069><c> modules</c><00:35:21.369><c> or</c><00:35:21.940><c> we</c><00:35:22.540><c> can</c><00:35:22.720><c> qualify</c><00:35:23.079><c> the</c><00:35:23.260><c> opens</c>

00:35:23.730 --> 00:35:23.740 align:start position:0%
all modules or we can qualify the opens
 

00:35:23.740 --> 00:35:26.359 align:start position:0%
all modules or we can qualify the opens
just<00:35:24.099><c> like</c><00:35:24.160><c> we</c><00:35:24.339><c> did</c><00:35:24.490><c> for</c><00:35:24.609><c> exports</c><00:35:25.150><c> before</c>

00:35:26.359 --> 00:35:26.369 align:start position:0%
just like we did for exports before
 

00:35:26.369 --> 00:35:30.290 align:start position:0%
just like we did for exports before
opening<00:35:27.369><c> a</c><00:35:27.490><c> package</c><00:35:27.700><c> is</c><00:35:28.319><c> narrower</c><00:35:29.319><c> and</c><00:35:29.619><c> deeper</c>

00:35:30.290 --> 00:35:30.300 align:start position:0%
opening a package is narrower and deeper
 

00:35:30.300 --> 00:35:34.500 align:start position:0%
opening a package is narrower and deeper
than<00:35:31.300><c> exporting</c><00:35:32.020><c> a</c><00:35:32.260><c> package</c><00:35:33.510><c> narrower</c>

00:35:34.500 --> 00:35:34.510 align:start position:0%
than exporting a package narrower
 

00:35:34.510 --> 00:35:38.250 align:start position:0%
than exporting a package narrower
because<00:35:35.410><c> opens</c><00:35:36.160><c> only</c><00:35:36.550><c> has</c><00:35:37.210><c> an</c><00:35:37.540><c> effect</c><00:35:37.960><c> at</c>

00:35:38.250 --> 00:35:38.260 align:start position:0%
because opens only has an effect at
 

00:35:38.260 --> 00:35:38.849 align:start position:0%
because opens only has an effect at
runtime

00:35:38.849 --> 00:35:38.859 align:start position:0%
runtime
 

00:35:38.859 --> 00:35:41.550 align:start position:0%
runtime
whereas<00:35:39.819><c> exports</c><00:35:40.450><c> applies</c><00:35:40.810><c> at</c><00:35:41.140><c> compile-time</c>

00:35:41.550 --> 00:35:41.560 align:start position:0%
whereas exports applies at compile-time
 

00:35:41.560 --> 00:35:45.990 align:start position:0%
whereas exports applies at compile-time
and<00:35:41.950><c> run-time</c><00:35:42.720><c> but</c><00:35:43.720><c> deeper</c><00:35:44.380><c> because</c><00:35:45.250><c> opens</c>

00:35:45.990 --> 00:35:46.000 align:start position:0%
and run-time but deeper because opens
 

00:35:46.000 --> 00:35:49.410 align:start position:0%
and run-time but deeper because opens
allows<00:35:46.540><c> all</c><00:35:47.130><c> elements</c><00:35:48.130><c> of</c><00:35:48.250><c> that</c><00:35:48.670><c> package</c><00:35:49.150><c> to</c>

00:35:49.410 --> 00:35:49.420 align:start position:0%
allows all elements of that package to
 

00:35:49.420 --> 00:35:51.290 align:start position:0%
allows all elements of that package to
be<00:35:49.540><c> accessed</c><00:35:50.109><c> by</c><00:35:50.380><c> reflection</c>

00:35:51.290 --> 00:35:51.300 align:start position:0%
be accessed by reflection
 

00:35:51.300 --> 00:35:54.780 align:start position:0%
be accessed by reflection
whereas<00:35:52.300><c> exports</c><00:35:53.050><c> only</c><00:35:53.470><c> allows</c><00:35:53.790><c> reflective</c>

00:35:54.780 --> 00:35:54.790 align:start position:0%
whereas exports only allows reflective
 

00:35:54.790 --> 00:35:59.490 align:start position:0%
whereas exports only allows reflective
access<00:35:55.150><c> to</c><00:35:55.390><c> public</c><00:35:56.250><c> elements</c><00:35:58.230><c> it</c><00:35:59.230><c> sort</c><00:35:59.380><c> of</c><00:35:59.410><c> a</c>

00:35:59.490 --> 00:35:59.500 align:start position:0%
access to public elements it sort of a
 

00:35:59.500 --> 00:36:01.500 align:start position:0%
access to public elements it sort of a
lot<00:35:59.619><c> simpler</c><00:35:59.950><c> to</c><00:36:00.130><c> use</c><00:36:00.160><c> than</c><00:36:00.730><c> to</c><00:36:00.849><c> explain</c><00:36:01.270><c> in</c>

00:36:01.500 --> 00:36:01.510 align:start position:0%
lot simpler to use than to explain in
 

00:36:01.510 --> 00:36:06.170 align:start position:0%
lot simpler to use than to explain in
some<00:36:02.440><c> ways</c><00:36:04.560><c> we</c><00:36:05.560><c> could</c><00:36:05.710><c> go</c><00:36:05.800><c> in</c><00:36:05.920><c> the</c><00:36:05.980><c> other</c>

00:36:06.170 --> 00:36:06.180 align:start position:0%
some ways we could go in the other
 

00:36:06.180 --> 00:36:08.180 align:start position:0%
some ways we could go in the other
direction<00:36:06.360><c> to</c><00:36:06.660><c> rather</c><00:36:07.230><c> than</c><00:36:07.410><c> opening</c><00:36:08.070><c> a</c>

00:36:08.180 --> 00:36:08.190 align:start position:0%
direction to rather than opening a
 

00:36:08.190 --> 00:36:11.060 align:start position:0%
direction to rather than opening a
specific<00:36:08.910><c> package</c><00:36:09.360><c> for</c><00:36:09.660><c> reflection</c><00:36:10.260><c> we</c><00:36:10.890><c> could</c>

00:36:11.060 --> 00:36:11.070 align:start position:0%
specific package for reflection we could
 

00:36:11.070 --> 00:36:14.270 align:start position:0%
specific package for reflection we could
open<00:36:11.190><c> all</c><00:36:11.790><c> of</c><00:36:12.630><c> our</c><00:36:12.810><c> my</c><00:36:13.110><c> app</c><00:36:13.290><c> packages</c><00:36:13.920><c> for</c>

00:36:14.270 --> 00:36:14.280 align:start position:0%
open all of our my app packages for
 

00:36:14.280 --> 00:36:17.660 align:start position:0%
open all of our my app packages for
reflection<00:36:14.850><c> by</c><00:36:15.030><c> anyone</c><00:36:15.650><c> you</c><00:36:16.650><c> declare</c><00:36:17.040><c> you</c>

00:36:17.660 --> 00:36:17.670 align:start position:0%
reflection by anyone you declare you
 

00:36:17.670 --> 00:36:20.380 align:start position:0%
reflection by anyone you declare you
could<00:36:17.850><c> declare</c><00:36:18.150><c> my</c><00:36:18.360><c> app</c><00:36:18.480><c> as</c><00:36:18.660><c> an</c><00:36:18.780><c> open</c><00:36:19.260><c> module</c>

00:36:20.380 --> 00:36:20.390 align:start position:0%
could declare my app as an open module
 

00:36:20.390 --> 00:36:23.690 align:start position:0%
could declare my app as an open module
open<00:36:21.390><c> modules</c><00:36:21.750><c> give</c><00:36:21.930><c> you</c><00:36:22.080><c> half</c><00:36:22.920><c> the</c><00:36:23.250><c> benefits</c>

00:36:23.690 --> 00:36:23.700 align:start position:0%
open modules give you half the benefits
 

00:36:23.700 --> 00:36:25.460 align:start position:0%
open modules give you half the benefits
of<00:36:23.910><c> modularity</c><00:36:24.270><c> you</c><00:36:25.020><c> get</c><00:36:25.230><c> reliable</c>

00:36:25.460 --> 00:36:25.470 align:start position:0%
of modularity you get reliable
 

00:36:25.470 --> 00:36:27.500 align:start position:0%
of modularity you get reliable
dependencies<00:36:26.220><c> all</c><00:36:26.490><c> the</c><00:36:26.610><c> requires</c><00:36:26.940><c> clauses</c>

00:36:27.500 --> 00:36:27.510 align:start position:0%
dependencies all the requires clauses
 

00:36:27.510 --> 00:36:29.960 align:start position:0%
dependencies all the requires clauses
will<00:36:27.800><c> get</c><00:36:28.800><c> resolved</c><00:36:29.310><c> at</c><00:36:29.460><c> compile-time</c><00:36:29.760><c> and</c>

00:36:29.960 --> 00:36:29.970 align:start position:0%
will get resolved at compile-time and
 

00:36:29.970 --> 00:36:32.440 align:start position:0%
will get resolved at compile-time and
run-time<00:36:30.080><c> but</c><00:36:31.080><c> not</c><00:36:31.320><c> strong</c><00:36:31.740><c> encapsulation</c>

00:36:32.440 --> 00:36:32.450 align:start position:0%
run-time but not strong encapsulation
 

00:36:32.450 --> 00:36:35.210 align:start position:0%
run-time but not strong encapsulation
because<00:36:33.450><c> anyone</c><00:36:33.990><c> can</c><00:36:34.200><c> reflect</c><00:36:34.740><c> their</c><00:36:35.040><c> way</c>

00:36:35.210 --> 00:36:35.220 align:start position:0%
because anyone can reflect their way
 

00:36:35.220 --> 00:36:37.640 align:start position:0%
because anyone can reflect their way
into<00:36:35.580><c> the</c><00:36:36.060><c> private</c><00:36:36.510><c> fields</c><00:36:36.930><c> and</c><00:36:37.080><c> methods</c><00:36:37.200><c> of</c>

00:36:37.640 --> 00:36:37.650 align:start position:0%
into the private fields and methods of
 

00:36:37.650 --> 00:36:41.630 align:start position:0%
into the private fields and methods of
my<00:36:38.220><c> app</c><00:36:38.720><c> but</c><00:36:39.720><c> since</c><00:36:40.170><c> frameworks</c><00:36:40.830><c> that</c><00:36:41.010><c> reflect</c>

00:36:41.630 --> 00:36:41.640 align:start position:0%
my app but since frameworks that reflect
 

00:36:41.640 --> 00:36:44.060 align:start position:0%
my app but since frameworks that reflect
deeply<00:36:41.940><c> into</c><00:36:42.660><c> application</c><00:36:43.350><c> code</c><00:36:43.560><c> are</c><00:36:43.860><c> a</c>

00:36:44.060 --> 00:36:44.070 align:start position:0%
deeply into application code are a
 

00:36:44.070 --> 00:36:46.510 align:start position:0%
deeply into application code are a
reality<00:36:44.700><c> in</c><00:36:44.970><c> everyday</c><00:36:45.420><c> Java</c><00:36:45.660><c> development</c>

00:36:46.510 --> 00:36:46.520 align:start position:0%
reality in everyday Java development
 

00:36:46.520 --> 00:36:49.040 align:start position:0%
reality in everyday Java development
application<00:36:47.520><c> code</c><00:36:47.760><c> can't</c><00:36:48.180><c> always</c><00:36:48.600><c> be</c>

00:36:49.040 --> 00:36:49.050 align:start position:0%
application code can't always be
 

00:36:49.050 --> 00:36:51.170 align:start position:0%
application code can't always be
strongly<00:36:49.380><c> encapsulated</c><00:36:50.220><c> and</c><00:36:50.370><c> open</c><00:36:50.760><c> modules</c>

00:36:51.170 --> 00:36:51.180 align:start position:0%
strongly encapsulated and open modules
 

00:36:51.180 --> 00:36:53.360 align:start position:0%
strongly encapsulated and open modules
we<00:36:51.420><c> think</c><00:36:51.660><c> are</c><00:36:51.810><c> a</c><00:36:51.840><c> pragmatic</c><00:36:52.350><c> solution</c><00:36:52.590><c> it's</c>

00:36:53.360 --> 00:36:53.370 align:start position:0%
we think are a pragmatic solution it's
 

00:36:53.370 --> 00:36:56.030 align:start position:0%
we think are a pragmatic solution it's
up<00:36:53.520><c> to</c><00:36:53.730><c> the</c><00:36:53.820><c> application</c><00:36:54.210><c> a</c><00:36:54.800><c> developer</c><00:36:55.800><c> to</c>

00:36:56.030 --> 00:36:56.040 align:start position:0%
up to the application a developer to
 

00:36:56.040 --> 00:36:59.510 align:start position:0%
up to the application a developer to
choose<00:36:56.930><c> note</c><00:36:57.930><c> that</c><00:36:58.230><c> this</c><00:36:58.860><c> open</c><00:36:59.220><c> module</c>

00:36:59.510 --> 00:36:59.520 align:start position:0%
choose note that this open module
 

00:36:59.520 --> 00:37:01.640 align:start position:0%
choose note that this open module
doesn't<00:36:59.850><c> but</c><00:36:59.970><c> an</c><00:37:00.060><c> open</c><00:37:00.330><c> module</c><00:37:00.600><c> can</c><00:37:00.960><c> still</c><00:37:01.290><c> use</c>

00:37:01.640 --> 00:37:01.650 align:start position:0%
doesn't but an open module can still use
 

00:37:01.650 --> 00:37:04.820 align:start position:0%
doesn't but an open module can still use
exports<00:37:02.580><c> directives</c><00:37:03.270><c> in</c><00:37:03.690><c> module</c><00:37:04.560><c> inferred</c>

00:37:04.820 --> 00:37:04.830 align:start position:0%
exports directives in module inferred
 

00:37:04.830 --> 00:37:08.540 align:start position:0%
exports directives in module inferred
Java<00:37:05.190><c> to</c><00:37:06.060><c> define</c><00:37:06.510><c> and</c><00:37:07.350><c> of</c><00:37:07.500><c> a</c><00:37:07.590><c> static</c><00:37:08.070><c> API</c><00:37:08.430><c> for</c>

00:37:08.540 --> 00:37:08.550 align:start position:0%
Java to define and of a static API for
 

00:37:08.550 --> 00:37:13.850 align:start position:0%
Java to define and of a static API for
use<00:37:09.000><c> at</c><00:37:09.180><c> compile</c><00:37:09.540><c> time</c><00:37:09.570><c> and</c><00:37:12.290><c> now</c><00:37:13.290><c> we</c><00:37:13.350><c> can</c><00:37:13.680><c> run</c>

00:37:13.850 --> 00:37:13.860 align:start position:0%
use at compile time and now we can run
 

00:37:13.860 --> 00:37:15.530 align:start position:0%
use at compile time and now we can run
our<00:37:14.010><c> modular</c><00:37:14.340><c> application</c><00:37:14.910><c> with</c><00:37:15.060><c> a</c><00:37:15.090><c> simple</c>

00:37:15.530 --> 00:37:15.540 align:start position:0%
our modular application with a simple
 

00:37:15.540 --> 00:37:18.500 align:start position:0%
our modular application with a simple
invocation<00:37:16.490><c> assume</c><00:37:17.490><c> our</c><00:37:17.640><c> modular</c><00:37:18.240><c> jars</c>

00:37:18.500 --> 00:37:18.510 align:start position:0%
invocation assume our modular jars
 

00:37:18.510 --> 00:37:21.440 align:start position:0%
invocation assume our modular jars
that's<00:37:18.990><c> my</c><00:37:19.200><c> app</c><00:37:19.350><c> jar</c><00:37:20.280><c> and</c><00:37:20.550><c> my</c><00:37:20.640><c> libs</c><00:37:20.850><c> are</c><00:37:21.180><c> and</c>

00:37:21.440 --> 00:37:21.450 align:start position:0%
that's my app jar and my libs are and
 

00:37:21.450 --> 00:37:25.400 align:start position:0%
that's my app jar and my libs are and
now<00:37:21.630><c> in</c><00:37:21.810><c> EM</c><00:37:22.140><c> lip</c><00:37:22.500><c> and</c><00:37:22.740><c> the</c><00:37:23.780><c> unchanged</c><00:37:24.780><c> Jaxon</c>

00:37:25.400 --> 00:37:25.410 align:start position:0%
now in EM lip and the unchanged Jaxon
 

00:37:25.410 --> 00:37:28.670 align:start position:0%
now in EM lip and the unchanged Jaxon
jars<00:37:25.680><c> are</c><00:37:26.040><c> still</c><00:37:26.370><c> in</c><00:37:26.610><c> Lib</c><00:37:27.170><c> we</c><00:37:28.170><c> just</c><00:37:28.440><c> have</c><00:37:28.560><c> to</c>

00:37:28.670 --> 00:37:28.680 align:start position:0%
jars are still in Lib we just have to
 

00:37:28.680 --> 00:37:31.160 align:start position:0%
jars are still in Lib we just have to
tell<00:37:28.830><c> the</c><00:37:28.920><c> Java</c><00:37:29.130><c> launcher</c><00:37:29.610><c> where</c><00:37:30.330><c> the</c><00:37:30.840><c> module</c>

00:37:31.160 --> 00:37:31.170 align:start position:0%
tell the Java launcher where the module
 

00:37:31.170 --> 00:37:33.560 align:start position:0%
tell the Java launcher where the module
pass<00:37:31.350><c> should</c><00:37:31.710><c> be</c><00:37:32.040><c> set</c><00:37:32.250><c> and</c><00:37:32.520><c> it</c><00:37:33.180><c> will</c><00:37:33.270><c> figure</c>

00:37:33.560 --> 00:37:33.570 align:start position:0%
pass should be set and it will figure
 

00:37:33.570 --> 00:37:36.170 align:start position:0%
pass should be set and it will figure
out<00:37:33.720><c> which</c><00:37:34.680><c> of</c><00:37:34.920><c> the</c><00:37:35.040><c> jars</c><00:37:35.310><c> on</c><00:37:35.550><c> the</c><00:37:35.640><c> module</c><00:37:35.940><c> path</c>

00:37:36.170 --> 00:37:36.180 align:start position:0%
out which of the jars on the module path
 

00:37:36.180 --> 00:37:40.570 align:start position:0%
out which of the jars on the module path
should<00:37:36.480><c> be</c><00:37:36.630><c> turned</c><00:37:36.930><c> into</c><00:37:37.200><c> automatic</c><00:37:37.650><c> modules</c>

00:37:40.570 --> 00:37:40.580 align:start position:0%
 
 

00:37:40.580 --> 00:37:45.290 align:start position:0%
 
so<00:37:42.080><c> when</c><00:37:43.080><c> you</c><00:37:43.200><c> migrate</c><00:37:43.530><c> each</c><00:37:44.340><c> application</c><00:37:44.880><c> jar</c>

00:37:45.290 --> 00:37:45.300 align:start position:0%
so when you migrate each application jar
 

00:37:45.300 --> 00:37:47.150 align:start position:0%
so when you migrate each application jar
is<00:37:45.480><c> usually</c><00:37:45.900><c> a</c><00:37:45.930><c> good</c><00:37:46.170><c> candidate</c><00:37:46.710><c> to</c><00:37:47.010><c> be</c><00:37:47.130><c> a</c>

00:37:47.150 --> 00:37:47.160 align:start position:0%
is usually a good candidate to be a
 

00:37:47.160 --> 00:37:50.750 align:start position:0%
is usually a good candidate to be a
module<00:37:47.780><c> each</c><00:37:48.780><c> library</c><00:37:49.380><c> jar</c><00:37:49.650><c> will</c><00:37:49.920><c> migrate</c><00:37:50.280><c> at</c>

00:37:50.750 --> 00:37:50.760 align:start position:0%
module each library jar will migrate at
 

00:37:50.760 --> 00:37:54.200 align:start position:0%
module each library jar will migrate at
its<00:37:50.970><c> own</c><00:37:51.090><c> pace</c><00:37:51.120><c> and</c><00:37:52.400><c> automatic</c><00:37:53.400><c> modules</c><00:37:53.820><c> mean</c>

00:37:54.200 --> 00:37:54.210 align:start position:0%
its own pace and automatic modules mean
 

00:37:54.210 --> 00:37:57.470 align:start position:0%
its own pace and automatic modules mean
you<00:37:54.810><c> are</c><00:37:54.960><c> not</c><00:37:55.170><c> waiting</c><00:37:55.560><c> for</c><00:37:56.130><c> the</c><00:37:56.280><c> weakest</c><00:37:56.850><c> link</c>

00:37:57.470 --> 00:37:57.480 align:start position:0%
you are not waiting for the weakest link
 

00:37:57.480 --> 00:38:01.810 align:start position:0%
you are not waiting for the weakest link
that<00:37:58.170><c> would</c><00:37:58.260><c> be</c><00:37:58.410><c> very</c><00:37:58.590><c> sad</c><00:37:58.970><c> we</c><00:37:59.970><c> had</c><00:38:00.000><c> to</c><00:38:00.120><c> do</c><00:38:00.270><c> that</c>

00:38:01.810 --> 00:38:01.820 align:start position:0%
that would be very sad we had to do that
 

00:38:01.820 --> 00:38:05.380 align:start position:0%
that would be very sad we had to do that
nearly<00:38:02.820><c> there</c><00:38:03.710><c> let's</c><00:38:04.710><c> talk</c><00:38:04.920><c> about</c><00:38:05.040><c> the</c>

00:38:05.380 --> 00:38:05.390 align:start position:0%
nearly there let's talk about the
 

00:38:05.390 --> 00:38:14.140 align:start position:0%
nearly there let's talk about the
the<00:38:05.630><c> JDK</c><00:38:11.050><c> roughly</c><00:38:12.050><c> speaking</c><00:38:12.280><c> the</c><00:38:13.280><c> size</c><00:38:13.700><c> of</c><00:38:14.000><c> the</c>

00:38:14.140 --> 00:38:14.150 align:start position:0%
the JDK roughly speaking the size of the
 

00:38:14.150 --> 00:38:17.260 align:start position:0%
the JDK roughly speaking the size of the
Java<00:38:14.390><c> platform</c><00:38:14.690><c> has</c><00:38:15.680><c> been</c><00:38:15.920><c> going</c><00:38:16.370><c> up</c><00:38:16.550><c> with</c><00:38:17.060><c> the</c>

00:38:17.260 --> 00:38:17.270 align:start position:0%
Java platform has been going up with the
 

00:38:17.270 --> 00:38:21.010 align:start position:0%
Java platform has been going up with the
square<00:38:17.750><c> of</c><00:38:18.050><c> the</c><00:38:18.590><c> major</c><00:38:18.770><c> version</c><00:38:19.310><c> number</c><00:38:20.020><c> Java</c>

00:38:21.010 --> 00:38:21.020 align:start position:0%
square of the major version number Java
 

00:38:21.020 --> 00:38:24.190 align:start position:0%
square of the major version number Java
1.0<00:38:21.680><c> had</c><00:38:22.040><c> only</c><00:38:22.190><c> a</c><00:38:22.280><c> few</c><00:38:22.340><c> hundred</c><00:38:22.700><c> classes</c><00:38:23.390><c> Java</c>

00:38:24.190 --> 00:38:24.200 align:start position:0%
1.0 had only a few hundred classes Java
 

00:38:24.200 --> 00:38:28.000 align:start position:0%
1.0 had only a few hundred classes Java
9<00:38:24.470><c> is</c><00:38:24.680><c> tens</c><00:38:24.950><c> of</c><00:38:25.160><c> thousands</c><00:38:25.750><c> the</c><00:38:26.750><c> JDK</c><00:38:27.290><c> 1.0</c>

00:38:28.000 --> 00:38:28.010 align:start position:0%
9 is tens of thousands the JDK 1.0
 

00:38:28.010 --> 00:38:31.600 align:start position:0%
9 is tens of thousands the JDK 1.0
download<00:38:28.610><c> it</c><00:38:29.390><c> it</c><00:38:29.870><c> still</c><00:38:30.140><c> installs</c><00:38:30.500><c> and</c><00:38:30.830><c> no</c><00:38:31.310><c> 7</c>

00:38:31.600 --> 00:38:31.610 align:start position:0%
download it it still installs and no 7
 

00:38:31.610 --> 00:38:35.950 align:start position:0%
download it it still installs and no 7
was<00:38:32.270><c> under</c><00:38:32.690><c> 4</c><00:38:32.990><c> Meg</c><00:38:33.250><c> the</c><00:38:34.250><c> JDK</c><00:38:34.760><c> 9</c><00:38:35.030><c> download</c><00:38:35.600><c> is</c><00:38:35.900><c> a</c>

00:38:35.950 --> 00:38:35.960 align:start position:0%
was under 4 Meg the JDK 9 download is a
 

00:38:35.960 --> 00:38:37.380 align:start position:0%
was under 4 Meg the JDK 9 download is a
hundred<00:38:36.350><c> and</c><00:38:36.470><c> 50</c><00:38:36.740><c> Meg</c>

00:38:37.380 --> 00:38:37.390 align:start position:0%
hundred and 50 Meg
 

00:38:37.390 --> 00:38:40.900 align:start position:0%
hundred and 50 Meg
now<00:38:38.390><c> when</c><00:38:38.570><c> the</c><00:38:38.690><c> Java</c><00:38:38.900><c> platform</c><00:38:39.170><c> was</c><00:38:39.770><c> small</c><00:38:40.100><c> the</c>

00:38:40.900 --> 00:38:40.910 align:start position:0%
now when the Java platform was small the
 

00:38:40.910 --> 00:38:43.660 align:start position:0%
now when the Java platform was small the
organization<00:38:41.810><c> of</c><00:38:41.930><c> the</c><00:38:42.080><c> JDK</c><00:38:42.290><c> code</c><00:38:42.770><c> wasn't</c><00:38:43.430><c> a</c>

00:38:43.660 --> 00:38:43.670 align:start position:0%
organization of the JDK code wasn't a
 

00:38:43.670 --> 00:38:46.390 align:start position:0%
organization of the JDK code wasn't a
problem<00:38:43.880><c> but</c><00:38:44.260><c> every</c><00:38:45.260><c> year</c><00:38:45.320><c> the</c><00:38:45.560><c> platform</c><00:38:46.160><c> grew</c>

00:38:46.390 --> 00:38:46.400 align:start position:0%
problem but every year the platform grew
 

00:38:46.400 --> 00:38:48.400 align:start position:0%
problem but every year the platform grew
a<00:38:46.430><c> little</c><00:38:46.520><c> bigger</c><00:38:46.910><c> and</c><00:38:47.510><c> now</c><00:38:47.630><c> it's</c><00:38:47.780><c> huge</c><00:38:48.200><c> and</c>

00:38:48.400 --> 00:38:48.410 align:start position:0%
a little bigger and now it's huge and
 

00:38:48.410 --> 00:38:51.850 align:start position:0%
a little bigger and now it's huge and
monolithic<00:38:49.480><c> in</c><00:38:50.480><c> reality</c><00:38:51.170><c> the</c><00:38:51.380><c> Java</c><00:38:51.590><c> platform</c>

00:38:51.850 --> 00:38:51.860 align:start position:0%
monolithic in reality the Java platform
 

00:38:51.860 --> 00:38:54.880 align:start position:0%
monolithic in reality the Java platform
is<00:38:52.400><c> not</c><00:38:52.640><c> one</c><00:38:52.820><c> thing</c><00:38:53.030><c> it's</c><00:38:53.780><c> more</c><00:38:54.290><c> like</c><00:38:54.500><c> 25</c>

00:38:54.880 --> 00:38:54.890 align:start position:0%
is not one thing it's more like 25
 

00:38:54.890 --> 00:38:57.250 align:start position:0%
is not one thing it's more like 25
separate<00:38:55.520><c> frameworks</c><00:38:55.970><c> including</c><00:38:56.780><c> the</c><00:38:56.960><c> swing</c>

00:38:57.250 --> 00:38:57.260 align:start position:0%
separate frameworks including the swing
 

00:38:57.260 --> 00:38:59.470 align:start position:0%
separate frameworks including the swing
UI<00:38:57.530><c> framework</c><00:38:58.070><c> the</c><00:38:58.700><c> crypto</c><00:38:59.030><c> framework</c>

00:38:59.470 --> 00:38:59.480 align:start position:0%
UI framework the crypto framework
 

00:38:59.480 --> 00:39:01.540 align:start position:0%
UI framework the crypto framework
scripting<00:39:00.170><c> framework</c><00:39:00.320><c> multiple</c><00:39:01.160><c> xml</c>

00:39:01.540 --> 00:39:01.550 align:start position:0%
scripting framework multiple xml
 

00:39:01.550 --> 00:39:03.610 align:start position:0%
scripting framework multiple xml
processing<00:39:01.700><c> frameworks</c><00:39:02.420><c> and</c><00:39:02.720><c> so</c><00:39:02.870><c> on</c><00:39:03.080><c> there's</c>

00:39:03.610 --> 00:39:03.620 align:start position:0%
processing frameworks and so on there's
 

00:39:03.620 --> 00:39:05.530 align:start position:0%
processing frameworks and so on there's
no<00:39:03.770><c> reason</c><00:39:04.160><c> these</c><00:39:04.280><c> separate</c><00:39:04.670><c> frameworks</c><00:39:05.120><c> have</c>

00:39:05.530 --> 00:39:05.540 align:start position:0%
no reason these separate frameworks have
 

00:39:05.540 --> 00:39:07.660 align:start position:0%
no reason these separate frameworks have
to<00:39:05.810><c> be</c><00:39:05.960><c> so</c><00:39:06.170><c> tightly</c><00:39:06.590><c> coupled</c><00:39:06.770><c> in</c><00:39:07.100><c> one</c><00:39:07.250><c> download</c>

00:39:07.660 --> 00:39:07.670 align:start position:0%
to be so tightly coupled in one download
 

00:39:07.670 --> 00:39:11.230 align:start position:0%
to be so tightly coupled in one download
in<00:39:08.230><c> fact</c><00:39:09.230><c> it's</c><00:39:09.650><c> an</c><00:39:09.800><c> impediment</c><00:39:10.190><c> for</c><00:39:10.790><c> us</c><00:39:10.970><c> in</c>

00:39:11.230 --> 00:39:11.240 align:start position:0%
in fact it's an impediment for us in
 

00:39:11.240 --> 00:39:13.570 align:start position:0%
in fact it's an impediment for us in
developing<00:39:11.390><c> the</c><00:39:11.840><c> JDK</c><00:39:12.200><c> the</c><00:39:12.440><c> overly</c><00:39:13.310><c> tight</c>

00:39:13.570 --> 00:39:13.580 align:start position:0%
developing the JDK the overly tight
 

00:39:13.580 --> 00:39:16.810 align:start position:0%
developing the JDK the overly tight
coupling<00:39:14.800><c> raises</c><00:39:15.800><c> development</c><00:39:16.340><c> and</c><00:39:16.520><c> testing</c>

00:39:16.810 --> 00:39:16.820 align:start position:0%
coupling raises development and testing
 

00:39:16.820 --> 00:39:19.150 align:start position:0%
coupling raises development and testing
costs<00:39:17.300><c> which</c><00:39:17.600><c> turns</c><00:39:17.900><c> into</c><00:39:18.080><c> slower</c><00:39:18.530><c> platform</c>

00:39:19.150 --> 00:39:19.160 align:start position:0%
costs which turns into slower platform
 

00:39:19.160 --> 00:39:22.690 align:start position:0%
costs which turns into slower platform
evolution<00:39:19.730><c> plus</c><00:39:20.510><c> the</c><00:39:21.230><c> larger</c><00:39:21.740><c> the</c><00:39:21.950><c> surface</c><00:39:22.490><c> of</c>

00:39:22.690 --> 00:39:22.700 align:start position:0%
evolution plus the larger the surface of
 

00:39:22.700 --> 00:39:25.210 align:start position:0%
evolution plus the larger the surface of
your<00:39:22.880><c> platform</c><00:39:23.390><c> more</c><00:39:24.170><c> difficult</c><00:39:24.710><c> it</c><00:39:24.860><c> is</c><00:39:25.010><c> to</c>

00:39:25.210 --> 00:39:25.220 align:start position:0%
your platform more difficult it is to
 

00:39:25.220 --> 00:39:28.570 align:start position:0%
your platform more difficult it is to
secure<00:39:25.580><c> and</c><00:39:26.680><c> it's</c><00:39:27.680><c> an</c><00:39:27.800><c> impediment</c><00:39:28.040><c> to</c><00:39:28.340><c> lots</c><00:39:28.490><c> of</c>

00:39:28.570 --> 00:39:28.580 align:start position:0%
secure and it's an impediment to lots of
 

00:39:28.580 --> 00:39:30.490 align:start position:0%
secure and it's an impediment to lots of
users<00:39:28.910><c> both</c><00:39:29.450><c> those</c><00:39:29.690><c> who</c><00:39:29.870><c> want</c><00:39:30.050><c> to</c><00:39:30.110><c> run</c><00:39:30.320><c> their</c>

00:39:30.490 --> 00:39:30.500 align:start position:0%
users both those who want to run their
 

00:39:30.500 --> 00:39:32.530 align:start position:0%
users both those who want to run their
applications<00:39:30.620><c> on</c><00:39:31.280><c> smaller</c><00:39:31.670><c> devices</c><00:39:31.790><c> and</c>

00:39:32.530 --> 00:39:32.540 align:start position:0%
applications on smaller devices and
 

00:39:32.540 --> 00:39:35.320 align:start position:0%
applications on smaller devices and
those<00:39:33.410><c> who</c><00:39:33.620><c> want</c><00:39:33.800><c> to</c><00:39:33.830><c> run</c><00:39:34.040><c> more</c><00:39:34.400><c> instances</c><00:39:35.090><c> of</c>

00:39:35.320 --> 00:39:35.330 align:start position:0%
those who want to run more instances of
 

00:39:35.330 --> 00:39:38.470 align:start position:0%
those who want to run more instances of
their<00:39:35.810><c> application</c><00:39:36.440><c> on</c><00:39:36.680><c> large</c><00:39:37.040><c> systems</c><00:39:37.520><c> even</c>

00:39:38.470 --> 00:39:38.480 align:start position:0%
their application on large systems even
 

00:39:38.480 --> 00:39:40.690 align:start position:0%
their application on large systems even
if<00:39:38.720><c> you</c><00:39:38.840><c> only</c><00:39:38.990><c> want</c><00:39:39.260><c> a</c><00:39:39.440><c> part</c><00:39:39.740><c> of</c><00:39:39.890><c> the</c><00:39:40.100><c> JDK</c>

00:39:40.690 --> 00:39:40.700 align:start position:0%
if you only want a part of the JDK
 

00:39:40.700 --> 00:39:43.680 align:start position:0%
if you only want a part of the JDK
you've<00:39:41.120><c> got</c><00:39:41.300><c> to</c><00:39:41.420><c> take</c><00:39:41.600><c> all</c><00:39:41.960><c> of</c><00:39:42.020><c> it</c>

00:39:43.680 --> 00:39:43.690 align:start position:0%
you've got to take all of it
 

00:39:43.690 --> 00:39:46.930 align:start position:0%
you've got to take all of it
the<00:39:44.690><c> good</c><00:39:44.870><c> news</c><00:39:45.080><c> of</c><00:39:45.290><c> course</c><00:39:45.470><c> is</c><00:39:45.740><c> that</c><00:39:45.860><c> JDK</c><00:39:46.340><c> 9</c><00:39:46.550><c> is</c>

00:39:46.930 --> 00:39:46.940 align:start position:0%
the good news of course is that JDK 9 is
 

00:39:46.940 --> 00:39:50.710 align:start position:0%
the good news of course is that JDK 9 is
modular<00:39:47.830><c> we've</c><00:39:48.830><c> taken</c><00:39:49.100><c> the</c><00:39:49.370><c> monolithic</c><00:39:49.880><c> RT</c>

00:39:50.710 --> 00:39:50.720 align:start position:0%
modular we've taken the monolithic RT
 

00:39:50.720 --> 00:39:53.410 align:start position:0%
modular we've taken the monolithic RT
jar<00:39:51.110><c> file</c><00:39:51.350><c> and</c><00:39:51.620><c> broken</c><00:39:52.490><c> it</c><00:39:52.580><c> up</c><00:39:52.700><c> into</c><00:39:52.970><c> a</c><00:39:53.090><c> few</c>

00:39:53.410 --> 00:39:53.420 align:start position:0%
jar file and broken it up into a few
 

00:39:53.420 --> 00:39:56.350 align:start position:0%
jar file and broken it up into a few
dozen<00:39:53.870><c> modules</c><00:39:54.460><c> some</c><00:39:55.460><c> of</c><00:39:55.610><c> these</c><00:39:55.730><c> are</c><00:39:55.940><c> part</c><00:39:56.150><c> of</c>

00:39:56.350 --> 00:39:56.360 align:start position:0%
dozen modules some of these are part of
 

00:39:56.360 --> 00:39:59.200 align:start position:0%
dozen modules some of these are part of
the<00:39:56.420><c> Java</c><00:39:56.870><c> SE</c><00:39:57.230><c> specification</c><00:39:58.040><c> some</c><00:39:58.820><c> are</c><00:39:58.940><c> just</c>

00:39:59.200 --> 00:39:59.210 align:start position:0%
the Java SE specification some are just
 

00:39:59.210 --> 00:40:02.350 align:start position:0%
the Java SE specification some are just
just<00:39:59.900><c> parts</c><00:40:00.680><c> of</c><00:40:00.860><c> the</c><00:40:01.040><c> jdk</c><00:40:01.520><c> implementation</c>

00:40:02.350 --> 00:40:02.360 align:start position:0%
just parts of the jdk implementation
 

00:40:02.360 --> 00:40:05.980 align:start position:0%
just parts of the jdk implementation
here's<00:40:03.140><c> a</c><00:40:03.230><c> graph</c><00:40:03.470><c> of</c><00:40:03.680><c> the</c><00:40:03.860><c> Java</c><00:40:04.130><c> SE</c><00:40:04.460><c> modules</c><00:40:04.990><c> we</c>

00:40:05.980 --> 00:40:05.990 align:start position:0%
here's a graph of the Java SE modules we
 

00:40:05.990 --> 00:40:07.480 align:start position:0%
here's a graph of the Java SE modules we
can<00:40:06.140><c> see</c><00:40:06.290><c> at</c><00:40:06.380><c> the</c><00:40:06.410><c> bottom</c><00:40:06.620><c> there's</c><00:40:07.010><c> Java</c><00:40:07.280><c> base</c>

00:40:07.480 --> 00:40:07.490 align:start position:0%
can see at the bottom there's Java base
 

00:40:07.490 --> 00:40:10.120 align:start position:0%
can see at the bottom there's Java base
which<00:40:08.480><c> everything</c><00:40:08.930><c> depends</c><00:40:09.320><c> on</c><00:40:09.410><c> and</c><00:40:09.650><c> which</c>

00:40:10.120 --> 00:40:10.130 align:start position:0%
which everything depends on and which
 

00:40:10.130 --> 00:40:13.390 align:start position:0%
which everything depends on and which
depends<00:40:10.550><c> on</c><00:40:10.640><c> nothing</c><00:40:10.850><c> itself</c><00:40:12.100><c> we've</c><00:40:13.100><c> broken</c>

00:40:13.390 --> 00:40:13.400 align:start position:0%
depends on nothing itself we've broken
 

00:40:13.400 --> 00:40:15.160 align:start position:0%
depends on nothing itself we've broken
out<00:40:13.640><c> the</c><00:40:13.670><c> various</c><00:40:14.180><c> frameworks</c><00:40:14.510><c> into</c><00:40:14.990><c> their</c>

00:40:15.160 --> 00:40:15.170 align:start position:0%
out the various frameworks into their
 

00:40:15.170 --> 00:40:17.590 align:start position:0%
out the various frameworks into their
own<00:40:15.380><c> modules</c><00:40:15.800><c> instrumentation</c><00:40:16.700><c> logging</c><00:40:17.120><c> XML</c>

00:40:17.590 --> 00:40:17.600 align:start position:0%
own modules instrumentation logging XML
 

00:40:17.600 --> 00:40:18.420 align:start position:0%
own modules instrumentation logging XML
scripting

00:40:18.420 --> 00:40:18.430 align:start position:0%
scripting
 

00:40:18.430 --> 00:40:22.140 align:start position:0%
scripting
etc<00:40:18.849><c> which</c><00:40:19.630><c> you</c><00:40:19.750><c> can</c><00:40:19.900><c> use</c><00:40:20.109><c> by</c><00:40:20.829><c> requires</c><00:40:21.220><c> or</c><00:40:21.819><c> not</c>

00:40:22.140 --> 00:40:22.150 align:start position:0%
etc which you can use by requires or not
 

00:40:22.150 --> 00:40:26.819 align:start position:0%
etc which you can use by requires or not
as<00:40:22.420><c> your</c><00:40:23.319><c> needs</c><00:40:23.500><c> dictate</c><00:40:24.210><c> at</c><00:40:25.210><c> the</c><00:40:25.599><c> top</c><00:40:25.829><c> there's</c>

00:40:26.819 --> 00:40:26.829 align:start position:0%
as your needs dictate at the top there's
 

00:40:26.829 --> 00:40:29.849 align:start position:0%
as your needs dictate at the top there's
a<00:40:27.220><c> Java</c><00:40:27.730><c> SE</c><00:40:28.299><c> module</c><00:40:28.690><c> which</c><00:40:29.319><c> has</c><00:40:29.500><c> no</c><00:40:29.650><c> actual</c>

00:40:29.849 --> 00:40:29.859 align:start position:0%
a Java SE module which has no actual
 

00:40:29.859 --> 00:40:32.970 align:start position:0%
a Java SE module which has no actual
code<00:40:30.220><c> in</c><00:40:30.369><c> it</c><00:40:30.480><c> but</c><00:40:31.480><c> just</c><00:40:31.690><c> has</c><00:40:31.900><c> dependencies</c><00:40:32.559><c> so</c>

00:40:32.970 --> 00:40:32.980 align:start position:0%
code in it but just has dependencies so
 

00:40:32.980 --> 00:40:35.819 align:start position:0%
code in it but just has dependencies so
you<00:40:33.520><c> can</c><00:40:33.760><c> say</c><00:40:33.970><c> requires</c><00:40:34.510><c> Java</c><00:40:34.930><c> SE</c><00:40:35.349><c> and</c><00:40:35.650><c> be</c>

00:40:35.819 --> 00:40:35.829 align:start position:0%
you can say requires Java SE and be
 

00:40:35.829 --> 00:40:37.410 align:start position:0%
you can say requires Java SE and be
guaranteed<00:40:36.039><c> to</c><00:40:36.430><c> have</c><00:40:36.730><c> all</c><00:40:36.880><c> of</c><00:40:37.059><c> these</c><00:40:37.150><c> modules</c>

00:40:37.410 --> 00:40:37.420 align:start position:0%
guaranteed to have all of these modules
 

00:40:37.420 --> 00:40:41.309 align:start position:0%
guaranteed to have all of these modules
available<00:40:39.210><c> it's</c><00:40:40.210><c> worth</c><00:40:40.420><c> mentioning</c><00:40:40.900><c> that</c>

00:40:41.309 --> 00:40:41.319 align:start position:0%
available it's worth mentioning that
 

00:40:41.319 --> 00:40:43.559 align:start position:0%
available it's worth mentioning that
merely<00:40:41.710><c> finding</c><00:40:42.400><c> these</c><00:40:42.609><c> module</c><00:40:43.000><c> boundaries</c>

00:40:43.559 --> 00:40:43.569 align:start position:0%
merely finding these module boundaries
 

00:40:43.569 --> 00:40:46.319 align:start position:0%
merely finding these module boundaries
which<00:40:44.170><c> might</c><00:40:44.380><c> be</c><00:40:44.529><c> obvious</c><00:40:44.680><c> in</c><00:40:45.160><c> hindsight</c><00:40:45.339><c> will</c>

00:40:46.319 --> 00:40:46.329 align:start position:0%
which might be obvious in hindsight will
 

00:40:46.329 --> 00:40:48.440 align:start position:0%
which might be obvious in hindsight will
they<00:40:46.510><c> tremendous</c><00:40:46.990><c> engineering</c><00:40:47.559><c> efforts</c>

00:40:48.440 --> 00:40:48.450 align:start position:0%
they tremendous engineering efforts
 

00:40:48.450 --> 00:40:51.569 align:start position:0%
they tremendous engineering efforts
decoupling<00:40:49.450><c> a</c><00:40:49.630><c> monolith</c><00:40:50.140><c> is</c><00:40:50.440><c> much</c><00:40:51.250><c> harder</c>

00:40:51.569 --> 00:40:51.579 align:start position:0%
decoupling a monolith is much harder
 

00:40:51.579 --> 00:40:53.819 align:start position:0%
decoupling a monolith is much harder
than<00:40:51.789><c> building</c><00:40:52.450><c> a</c><00:40:52.599><c> decoupled</c><00:40:53.200><c> system</c><00:40:53.260><c> from</c>

00:40:53.819 --> 00:40:53.829 align:start position:0%
than building a decoupled system from
 

00:40:53.829 --> 00:40:56.039 align:start position:0%
than building a decoupled system from
the<00:40:53.950><c> beginning</c><00:40:54.039><c> we</c><00:40:54.910><c> had</c><00:40:55.089><c> to</c><00:40:55.210><c> undo</c><00:40:55.510><c> years</c><00:40:55.900><c> of</c>

00:40:56.039 --> 00:40:56.049 align:start position:0%
the beginning we had to undo years of
 

00:40:56.049 --> 00:40:58.470 align:start position:0%
the beginning we had to undo years of
bad<00:40:56.349><c> assumptions</c><00:40:57.010><c> and</c><00:40:57.279><c> accidental</c><00:40:58.059><c> couplings</c>

00:40:58.470 --> 00:40:58.480 align:start position:0%
bad assumptions and accidental couplings
 

00:40:58.480 --> 00:41:02.819 align:start position:0%
bad assumptions and accidental couplings
inside<00:40:59.170><c> our</c><00:40:59.319><c> tea</c><00:40:59.470><c> jar</c><00:40:59.890><c> but</c><00:41:00.730><c> going</c><00:41:01.329><c> forward</c><00:41:01.869><c> the</c>

00:41:02.819 --> 00:41:02.829 align:start position:0%
inside our tea jar but going forward the
 

00:41:02.829 --> 00:41:05.099 align:start position:0%
inside our tea jar but going forward the
discipline<00:41:03.400><c> imposed</c><00:41:03.910><c> by</c><00:41:04.359><c> the</c><00:41:04.420><c> module</c><00:41:04.900><c> system</c>

00:41:05.099 --> 00:41:05.109 align:start position:0%
discipline imposed by the module system
 

00:41:05.109 --> 00:41:07.859 align:start position:0%
discipline imposed by the module system
will<00:41:05.950><c> prevent</c><00:41:06.339><c> us</c><00:41:06.579><c> from</c><00:41:06.880><c> accidentally</c>

00:41:07.859 --> 00:41:07.869 align:start position:0%
will prevent us from accidentally
 

00:41:07.869 --> 00:41:10.980 align:start position:0%
will prevent us from accidentally
sliding<00:41:08.559><c> back</c><00:41:08.940><c> into</c><00:41:09.940><c> a</c><00:41:09.970><c> big</c><00:41:10.210><c> ball</c><00:41:10.359><c> of</c><00:41:10.569><c> mud</c><00:41:10.720><c> I</c>

00:41:10.980 --> 00:41:10.990 align:start position:0%
sliding back into a big ball of mud I
 

00:41:10.990 --> 00:41:15.529 align:start position:0%
sliding back into a big ball of mud I
mean<00:41:11.289><c> a</c><00:41:11.319><c> monolith</c><00:41:13.920><c> the</c><00:41:14.920><c> difference</c><00:41:15.220><c> between</c>

00:41:15.529 --> 00:41:15.539 align:start position:0%
mean a monolith the difference between
 

00:41:15.539 --> 00:41:17.579 align:start position:0%
mean a monolith the difference between
solid<00:41:16.539><c> lines</c><00:41:16.720><c> and</c><00:41:16.869><c> dotted</c><00:41:17.079><c> lines</c><00:41:17.289><c> is</c><00:41:17.500><c> an</c>

00:41:17.579 --> 00:41:17.589 align:start position:0%
solid lines and dotted lines is an
 

00:41:17.589 --> 00:41:18.690 align:start position:0%
solid lines and dotted lines is an
excellent<00:41:17.920><c> question</c><00:41:18.039><c> we</c><00:41:18.309><c> should</c><00:41:18.460><c> discuss</c>

00:41:18.690 --> 00:41:18.700 align:start position:0%
excellent question we should discuss
 

00:41:18.700 --> 00:41:23.670 align:start position:0%
excellent question we should discuss
later<00:41:20.940><c> the</c><00:41:21.940><c> Java</c><00:41:22.420><c> SE</c><00:41:22.720><c> modules</c><00:41:23.079><c> are</c><00:41:23.289><c> actually</c><00:41:23.650><c> a</c>

00:41:23.670 --> 00:41:23.680 align:start position:0%
later the Java SE modules are actually a
 

00:41:23.680 --> 00:41:26.099 align:start position:0%
later the Java SE modules are actually a
small<00:41:24.099><c> subset</c><00:41:24.700><c> of</c><00:41:24.730><c> the</c><00:41:24.940><c> modules</c><00:41:25.539><c> you'll</c><00:41:25.779><c> find</c>

00:41:26.099 --> 00:41:26.109 align:start position:0%
small subset of the modules you'll find
 

00:41:26.109 --> 00:41:29.640 align:start position:0%
small subset of the modules you'll find
in<00:41:26.319><c> the</c><00:41:26.410><c> JDK</c><00:41:26.799><c> 9</c><00:41:26.980><c> system</c><00:41:27.400><c> image</c><00:41:27.880><c> if</c><00:41:28.150><c> you</c><00:41:29.020><c> do</c><00:41:29.319><c> Java</c>

00:41:29.640 --> 00:41:29.650 align:start position:0%
in the JDK 9 system image if you do Java
 

00:41:29.650 --> 00:41:32.220 align:start position:0%
in the JDK 9 system image if you do Java
-<00:41:30.160><c> -</c><00:41:30.430><c> list</c><00:41:30.640><c> modules</c><00:41:31.029><c> you'll</c><00:41:31.599><c> see</c><00:41:31.839><c> those</c><00:41:32.020><c> two</c>

00:41:32.220 --> 00:41:32.230 align:start position:0%
- - list modules you'll see those two
 

00:41:32.230 --> 00:41:35.039 align:start position:0%
- - list modules you'll see those two
dozen<00:41:32.529><c> or</c><00:41:32.650><c> so</c><00:41:32.730><c> in</c><00:41:33.730><c> Java</c><00:41:33.940><c> SE</c><00:41:34.240><c> modules</c><00:41:34.660><c> Java</c>

00:41:35.039 --> 00:41:35.049 align:start position:0%
dozen or so in Java SE modules Java
 

00:41:35.049 --> 00:41:37.799 align:start position:0%
dozen or so in Java SE modules Java
based<00:41:35.230><c> sequel</c><00:41:35.920><c> logging</c><00:41:36.250><c> etc</c><00:41:36.700><c> as</c><00:41:36.849><c> well</c><00:41:37.420><c> as</c><00:41:37.480><c> some</c>

00:41:37.799 --> 00:41:37.809 align:start position:0%
based sequel logging etc as well as some
 

00:41:37.809 --> 00:41:40.140 align:start position:0%
based sequel logging etc as well as some
Java<00:41:38.079><c> FX</c><00:41:38.260><c> modules</c><00:41:38.829><c> and</c><00:41:39.130><c> then</c><00:41:39.339><c> a</c><00:41:39.369><c> large</c><00:41:39.700><c> number</c>

00:41:40.140 --> 00:41:40.150 align:start position:0%
Java FX modules and then a large number
 

00:41:40.150 --> 00:41:44.400 align:start position:0%
Java FX modules and then a large number
of<00:41:40.329><c> JDK</c><00:41:41.020><c> specific</c><00:41:41.890><c> modules</c><00:41:42.279><c> JDK</c><00:41:43.210><c> compiler</c><00:41:43.750><c> JDK</c>

00:41:44.400 --> 00:41:44.410 align:start position:0%
of JDK specific modules JDK compiler JDK
 

00:41:44.410 --> 00:41:47.640 align:start position:0%
of JDK specific modules JDK compiler JDK
Java<00:41:44.680><c> doc</c><00:41:44.950><c> dedicate</c><00:41:45.670><c> J</c><00:41:45.880><c> shell</c><00:41:46.200><c> jdk</c><00:41:47.200><c> Jade</c><00:41:47.440><c> EPS</c>

00:41:47.640 --> 00:41:47.650 align:start position:0%
Java doc dedicate J shell jdk Jade EPS
 

00:41:47.650 --> 00:41:49.799 align:start position:0%
Java doc dedicate J shell jdk Jade EPS
is<00:41:47.920><c> its</c><00:41:48.069><c> own</c><00:41:48.190><c> module</c><00:41:48.400><c> the</c><00:41:48.789><c> Jade</c><00:41:48.940><c> EPS</c><00:41:49.119><c> tool</c><00:41:49.329><c> is</c><00:41:49.539><c> a</c>

00:41:49.799 --> 00:41:49.809 align:start position:0%
is its own module the Jade EPS tool is a
 

00:41:49.809 --> 00:41:52.319 align:start position:0%
is its own module the Jade EPS tool is a
column<00:41:50.500><c> in</c><00:41:50.680><c> the</c><00:41:50.740><c> middle</c><00:41:50.980><c> and</c><00:41:51.190><c> so</c><00:41:51.970><c> on</c><00:41:52.089><c> and</c><00:41:52.240><c> so</c><00:41:52.299><c> on</c>

00:41:52.319 --> 00:41:52.329 align:start position:0%
column in the middle and so on and so on
 

00:41:52.329 --> 00:41:55.079 align:start position:0%
column in the middle and so on and so on
they're<00:41:53.049><c> all</c><00:41:53.260><c> located</c><00:41:53.770><c> in</c><00:41:54.190><c> the</c><00:41:54.460><c> system</c><00:41:54.819><c> image</c>

00:41:55.079 --> 00:41:55.089 align:start position:0%
they're all located in the system image
 

00:41:55.089 --> 00:41:57.059 align:start position:0%
they're all located in the system image
but<00:41:56.020><c> apart</c><00:41:56.260><c> from</c><00:41:56.319><c> that</c><00:41:56.440><c> they're</c><00:41:56.740><c> just</c>

00:41:57.059 --> 00:41:57.069 align:start position:0%
but apart from that they're just
 

00:41:57.069 --> 00:41:59.039 align:start position:0%
but apart from that they're just
ordinary<00:41:57.400><c> modules</c><00:41:58.000><c> with</c><00:41:58.299><c> requires</c><00:41:58.750><c> and</c>

00:41:59.039 --> 00:41:59.049 align:start position:0%
ordinary modules with requires and
 

00:41:59.049 --> 00:42:03.690 align:start position:0%
ordinary modules with requires and
exports<00:41:59.470><c> directives</c><00:41:59.950><c> like</c><00:42:00.039><c> any</c><00:42:00.309><c> other</c><00:42:02.700><c> I'd</c>

00:42:03.690 --> 00:42:03.700 align:start position:0%
exports directives like any other I'd
 

00:42:03.700 --> 00:42:05.549 align:start position:0%
exports directives like any other I'd
like<00:42:03.940><c> to</c><00:42:04.089><c> spend</c><00:42:04.270><c> some</c><00:42:04.420><c> time</c><00:42:04.569><c> by</c><00:42:05.140><c> which</c><00:42:05.289><c> I</c><00:42:05.440><c> mean</c>

00:42:05.549 --> 00:42:05.559 align:start position:0%
like to spend some time by which I mean
 

00:42:05.559 --> 00:42:08.910 align:start position:0%
like to spend some time by which I mean
the<00:42:05.740><c> remaining</c><00:42:06.220><c> time</c><00:42:06.549><c> on</c><00:42:07.710><c> expectations</c><00:42:08.710><c> of</c>

00:42:08.910 --> 00:42:08.920 align:start position:0%
the remaining time on expectations of
 

00:42:08.920 --> 00:42:14.130 align:start position:0%
the remaining time on expectations of
compatibility<00:42:09.549><c> from</c><00:42:10.539><c> JDK</c><00:42:10.930><c> 9</c><00:42:12.270><c> this</c><00:42:13.270><c> applies</c><00:42:14.109><c> to</c>

00:42:14.130 --> 00:42:14.140 align:start position:0%
compatibility from JDK 9 this applies to
 

00:42:14.140 --> 00:42:16.230 align:start position:0%
compatibility from JDK 9 this applies to
everyone<00:42:14.740><c> here</c><00:42:15.220><c> and</c><00:42:15.400><c> it</c><00:42:15.490><c> doesn't</c><00:42:15.730><c> because</c>

00:42:16.230 --> 00:42:16.240 align:start position:0%
everyone here and it doesn't because
 

00:42:16.240 --> 00:42:17.519 align:start position:0%
everyone here and it doesn't because
you're<00:42:16.450><c> not</c><00:42:16.569><c> the</c><00:42:16.690><c> ones</c><00:42:16.869><c> who</c><00:42:17.319><c> necessarily</c>

00:42:17.519 --> 00:42:17.529 align:start position:0%
you're not the ones who necessarily
 

00:42:17.529 --> 00:42:21.299 align:start position:0%
you're not the ones who necessarily
relying<00:42:18.460><c> on</c><00:42:18.579><c> some</c><00:42:18.789><c> of</c><00:42:18.910><c> this</c><00:42:18.970><c> stuff</c><00:42:19.270><c> but</c><00:42:20.309><c> it's</c>

00:42:21.299 --> 00:42:21.309 align:start position:0%
relying on some of this stuff but it's
 

00:42:21.309 --> 00:42:22.710 align:start position:0%
relying on some of this stuff but it's
worth<00:42:21.579><c> everyone</c><00:42:22.029><c> understanding</c><00:42:22.569><c> what's</c>

00:42:22.710 --> 00:42:22.720 align:start position:0%
worth everyone understanding what's
 

00:42:22.720 --> 00:42:26.849 align:start position:0%
worth everyone understanding what's
going<00:42:22.990><c> on</c><00:42:23.109><c> here</c><00:42:24.450><c> some</c><00:42:25.450><c> misc</c><00:42:25.720><c> base64</c><00:42:26.529><c> encode</c>

00:42:26.849 --> 00:42:26.859 align:start position:0%
going on here some misc base64 encode
 

00:42:26.859 --> 00:42:30.329 align:start position:0%
going on here some misc base64 encode
and<00:42:27.190><c> some</c><00:42:27.819><c> misc</c><00:42:28.059><c> base64</c><00:42:28.900><c> decoder</c><00:42:29.349><c> does</c><00:42:30.099><c> anyone</c>

00:42:30.329 --> 00:42:30.339 align:start position:0%
and some misc base64 decoder does anyone
 

00:42:30.339 --> 00:42:31.599 align:start position:0%
and some misc base64 decoder does anyone
use<00:42:30.400><c> them</c>

00:42:31.599 --> 00:42:31.609 align:start position:0%
use them
 

00:42:31.609 --> 00:42:33.849 align:start position:0%
use them
oh<00:42:31.749><c> that</c><00:42:32.749><c> was</c><00:42:32.839><c> more</c><00:42:32.989><c> how</c><00:42:33.109><c> I</c><00:42:33.140><c> was</c><00:42:33.319><c> expecting</c><00:42:33.380><c> no</c>

00:42:33.849 --> 00:42:33.859 align:start position:0%
oh that was more how I was expecting no
 

00:42:33.859 --> 00:42:35.319 align:start position:0%
oh that was more how I was expecting no
hands<00:42:34.309><c> I</c><00:42:34.369><c> was</c><00:42:34.519><c> going</c><00:42:34.670><c> to</c><00:42:34.729><c> say</c><00:42:34.789><c> are</c><00:42:34.940><c> but</c><00:42:35.119><c> all</c><00:42:35.209><c> of</c>

00:42:35.319 --> 00:42:35.329 align:start position:0%
hands I was going to say are but all of
 

00:42:35.329 --> 00:42:37.120 align:start position:0%
hands I was going to say are but all of
your<00:42:35.450><c> libraries</c><00:42:35.719><c> do</c><00:42:35.839><c> but</c><00:42:36.019><c> okay</c><00:42:36.469><c> so</c><00:42:36.859><c> those</c>

00:42:37.120 --> 00:42:37.130 align:start position:0%
your libraries do but okay so those
 

00:42:37.130 --> 00:42:40.329 align:start position:0%
your libraries do but okay so those
classes<00:42:37.670><c> are</c><00:42:37.819><c> gone</c><00:42:38.119><c> in</c><00:42:38.539><c> JDK</c><00:42:39.019><c> 9</c><00:42:39.229><c> they</c><00:42:40.069><c> are</c><00:42:40.190><c> not</c>

00:42:40.329 --> 00:42:40.339 align:start position:0%
classes are gone in JDK 9 they are not
 

00:42:40.339 --> 00:42:42.430 align:start position:0%
classes are gone in JDK 9 they are not
strongly<00:42:40.609><c> encapsulated</c><00:42:41.390><c> they're</c><00:42:41.630><c> physically</c>

00:42:42.430 --> 00:42:42.440 align:start position:0%
strongly encapsulated they're physically
 

00:42:42.440 --> 00:42:44.529 align:start position:0%
strongly encapsulated they're physically
not<00:42:42.589><c> there</c><00:42:42.829><c> so</c><00:42:43.279><c> this</c><00:42:43.430><c> met</c><00:42:43.670><c> this</c><00:42:43.880><c> might</c><00:42:44.299><c> break</c>

00:42:44.529 --> 00:42:44.539 align:start position:0%
not there so this met this might break
 

00:42:44.539 --> 00:42:47.739 align:start position:0%
not there so this met this might break
some<00:42:45.349><c> libraries</c><00:42:45.769><c> that</c><00:42:45.890><c> you</c><00:42:46.069><c> use</c><00:42:46.309><c> if</c><00:42:46.640><c> it</c><00:42:47.599><c> does</c>

00:42:47.739 --> 00:42:47.749 align:start position:0%
some libraries that you use if it does
 

00:42:47.749 --> 00:42:50.079 align:start position:0%
some libraries that you use if it does
file<00:42:48.680><c> a</c><00:42:48.709><c> bug</c><00:42:48.950><c> with</c><00:42:49.249><c> the</c><00:42:49.279><c> library</c><00:42:49.700><c> maintainer</c>

00:42:50.079 --> 00:42:50.089 align:start position:0%
file a bug with the library maintainer
 

00:42:50.089 --> 00:42:52.359 align:start position:0%
file a bug with the library maintainer
z'<00:42:50.239><c> and</c><00:42:50.420><c> tell</c><00:42:51.079><c> them</c><00:42:51.259><c> to</c><00:42:51.469><c> use</c><00:42:51.619><c> the</c><00:42:51.799><c> excellent</c>

00:42:52.359 --> 00:42:52.369 align:start position:0%
z' and tell them to use the excellent
 

00:42:52.369 --> 00:42:58.650 align:start position:0%
z' and tell them to use the excellent
base64<00:42:53.239><c> class</c><00:42:53.859><c> introduced</c><00:42:54.859><c> in</c><00:42:55.130><c> JDK</c><00:42:55.729><c> 8</c><00:42:57.130><c> second</c>

00:42:58.650 --> 00:42:58.660 align:start position:0%
base64 class introduced in JDK 8 second
 

00:42:58.660 --> 00:43:02.259 align:start position:0%
base64 class introduced in JDK 8 second
who<00:42:59.660><c> uses</c><00:42:59.930><c> some</c><00:43:00.259><c> miss</c><00:43:00.410><c> gun</c><00:43:00.589><c> safe</c><00:43:01.029><c> same</c><00:43:02.029><c> hands</c>

00:43:02.259 --> 00:43:02.269 align:start position:0%
who uses some miss gun safe same hands
 

00:43:02.269 --> 00:43:05.499 align:start position:0%
who uses some miss gun safe same hands
are<00:43:02.539><c> different</c><00:43:02.869><c> hands</c><00:43:03.349><c> okay</c><00:43:03.819><c> so</c><00:43:04.819><c> some</c><00:43:05.299><c> mystic</c>

00:43:05.499 --> 00:43:05.509 align:start position:0%
are different hands okay so some mystic
 

00:43:05.509 --> 00:43:08.440 align:start position:0%
are different hands okay so some mystic
on<00:43:05.569><c> safe</c><00:43:05.749><c> has</c><00:43:05.989><c> not</c><00:43:06.289><c> gone</c><00:43:06.559><c> away</c><00:43:06.940><c> the</c><00:43:07.940><c> Sun</c><00:43:08.180><c> misc</c>

00:43:08.440 --> 00:43:08.450 align:start position:0%
on safe has not gone away the Sun misc
 

00:43:08.450 --> 00:43:12.190 align:start position:0%
on safe has not gone away the Sun misc
package<00:43:08.900><c> is</c><00:43:09.140><c> exported</c><00:43:09.979><c> by</c><00:43:10.369><c> a</c><00:43:10.969><c> JDK</c><00:43:11.630><c> module</c><00:43:11.959><c> to</c>

00:43:12.190 --> 00:43:12.200 align:start position:0%
package is exported by a JDK module to
 

00:43:12.200 --> 00:43:14.349 align:start position:0%
package is exported by a JDK module to
the<00:43:12.229><c> hand</c><00:43:12.499><c> supported</c><00:43:13.009><c> and</c><00:43:13.160><c> the</c><00:43:13.700><c> unsafe</c><00:43:14.059><c> class</c>

00:43:14.349 --> 00:43:14.359 align:start position:0%
the hand supported and the unsafe class
 

00:43:14.359 --> 00:43:18.819 align:start position:0%
the hand supported and the unsafe class
is<00:43:14.779><c> still</c><00:43:15.140><c> there</c><00:43:16.150><c> however</c><00:43:17.410><c> while</c><00:43:18.410><c> the</c><00:43:18.619><c> Sun</c>

00:43:18.819 --> 00:43:18.829 align:start position:0%
is still there however while the Sun
 

00:43:18.829 --> 00:43:22.420 align:start position:0%
is still there however while the Sun
misc<00:43:19.099><c> package</c><00:43:19.609><c> is</c><00:43:19.880><c> exported</c><00:43:20.829><c> many</c><00:43:21.829><c> JDK</c>

00:43:22.420 --> 00:43:22.430 align:start position:0%
misc package is exported many JDK
 

00:43:22.430 --> 00:43:25.539 align:start position:0%
misc package is exported many JDK
internal<00:43:22.969><c> packages</c><00:43:23.479><c> are</c><00:43:23.719><c> not</c><00:43:24.200><c> and</c><00:43:24.589><c> again</c><00:43:25.190><c> this</c>

00:43:25.539 --> 00:43:25.549 align:start position:0%
internal packages are not and again this
 

00:43:25.549 --> 00:43:27.099 align:start position:0%
internal packages are not and again this
might<00:43:25.759><c> break</c><00:43:25.999><c> some</c><00:43:26.239><c> libraries</c><00:43:26.599><c> that</c><00:43:26.719><c> you</c><00:43:26.869><c> use</c>

00:43:27.099 --> 00:43:27.109 align:start position:0%
might break some libraries that you use
 

00:43:27.109 --> 00:43:29.229 align:start position:0%
might break some libraries that you use
because<00:43:27.709><c> library</c><00:43:28.160><c> code</c><00:43:28.309><c> will</c><00:43:28.609><c> fail</c><00:43:28.910><c> if</c><00:43:29.150><c> it</c>

00:43:29.229 --> 00:43:29.239 align:start position:0%
because library code will fail if it
 

00:43:29.239 --> 00:43:32.349 align:start position:0%
because library code will fail if it
tries<00:43:29.479><c> to</c><00:43:29.509><c> access</c><00:43:29.779><c> classes</c><00:43:30.529><c> in</c><00:43:30.789><c> the</c><00:43:31.789><c> concealed</c>

00:43:32.349 --> 00:43:32.359 align:start position:0%
tries to access classes in the concealed
 

00:43:32.359 --> 00:43:35.499 align:start position:0%
tries to access classes in the concealed
package<00:43:32.900><c> common</c><00:43:33.799><c> crypto</c><00:43:34.130><c> Sun</c><00:43:34.339><c> provider</c><00:43:34.670><c> or</c>

00:43:35.499 --> 00:43:35.509 align:start position:0%
package common crypto Sun provider or
 

00:43:35.509 --> 00:43:37.689 align:start position:0%
package common crypto Sun provider or
comma<00:43:36.049><c> Sun</c><00:43:36.319><c> or</c><00:43:36.559><c> the</c><00:43:36.589><c> patch</c><00:43:36.829><c> is</c><00:43:37.009><c> X</c><00:43:37.160><c> YZ</c><00:43:37.309><c> internal</c>

00:43:37.689 --> 00:43:37.699 align:start position:0%
comma Sun or the patch is X YZ internal
 

00:43:37.699 --> 00:43:41.620 align:start position:0%
comma Sun or the patch is X YZ internal
Jax<00:43:37.880><c> P</c><00:43:38.059><c> or</c><00:43:38.569><c> Sun</c><00:43:39.170><c> nioh</c><00:43:39.380><c> CH</c><00:43:39.769><c> or</c><00:43:40.160><c> Sun</c><00:43:40.489><c> net</c><00:43:40.699><c> www</c><00:43:41.449><c> or</c>

00:43:41.620 --> 00:43:41.630 align:start position:0%
Jax P or Sun nioh CH or Sun net www or
 

00:43:41.630 --> 00:43:43.959 align:start position:0%
Jax P or Sun nioh CH or Sun net www or
Sun<00:43:42.019><c> reflect</c><00:43:42.349><c> annotation</c><00:43:42.890><c> or</c><00:43:43.039><c> some</c><00:43:43.489><c> security</c>

00:43:43.959 --> 00:43:43.969 align:start position:0%
Sun reflect annotation or some security
 

00:43:43.969 --> 00:43:46.180 align:start position:0%
Sun reflect annotation or some security
x.509<00:43:44.690><c> and</c><00:43:44.989><c> most</c><00:43:45.319><c> of</c><00:43:45.499><c> you</c><00:43:45.619><c> don't</c><00:43:45.769><c> care</c><00:43:46.069><c> about</c>

00:43:46.180 --> 00:43:46.190 align:start position:0%
x.509 and most of you don't care about
 

00:43:46.190 --> 00:43:48.099 align:start position:0%
x.509 and most of you don't care about
any<00:43:46.519><c> of</c><00:43:46.699><c> these</c><00:43:46.819><c> packages</c><00:43:47.209><c> but</c><00:43:47.509><c> the</c><00:43:47.630><c> person</c><00:43:48.019><c> who</c>

00:43:48.099 --> 00:43:48.109 align:start position:0%
any of these packages but the person who
 

00:43:48.109 --> 00:43:54.009 align:start position:0%
any of these packages but the person who
does<00:43:48.430><c> has</c><00:43:49.430><c> a</c><00:43:49.459><c> problem</c><00:43:51.729><c> finally</c><00:43:52.839><c> we</c><00:43:53.839><c> need</c><00:43:53.959><c> to</c>

00:43:54.009 --> 00:43:54.019 align:start position:0%
does has a problem finally we need to
 

00:43:54.019 --> 00:43:57.670 align:start position:0%
does has a problem finally we need to
talk<00:43:54.229><c> again</c><00:43:54.769><c> about</c><00:43:54.920><c> exports</c><00:43:56.529><c> exporting</c><00:43:57.529><c> a</c>

00:43:57.670 --> 00:43:57.680 align:start position:0%
talk again about exports exporting a
 

00:43:57.680 --> 00:44:01.439 align:start position:0%
talk again about exports exporting a
package<00:43:58.539><c> means</c><00:43:59.539><c> you</c><00:44:00.049><c> can</c><00:44:00.289><c> compile</c><00:44:00.799><c> and</c><00:44:01.190><c> run</c>

00:44:01.439 --> 00:44:01.449 align:start position:0%
package means you can compile and run
 

00:44:01.449 --> 00:44:04.029 align:start position:0%
package means you can compile and run
against<00:44:02.449><c> the</c><00:44:02.539><c> public</c><00:44:02.959><c> members</c><00:44:03.380><c> of</c><00:44:03.650><c> the</c><00:44:03.829><c> public</c>

00:44:04.029 --> 00:44:04.039 align:start position:0%
against the public members of the public
 

00:44:04.039 --> 00:44:07.439 align:start position:0%
against the public members of the public
classes<00:44:04.459><c> of</c><00:44:04.910><c> that</c><00:44:05.089><c> package</c><00:44:05.479><c> it's</c><00:44:05.989><c> an</c><00:44:06.079><c> API</c>

00:44:07.439 --> 00:44:07.449 align:start position:0%
classes of that package it's an API
 

00:44:07.449 --> 00:44:10.509 align:start position:0%
classes of that package it's an API
exporting<00:44:08.449><c> a</c><00:44:08.509><c> package</c><00:44:08.900><c> either</c><00:44:09.829><c> from</c><00:44:10.130><c> a</c><00:44:10.190><c> Java</c>

00:44:10.509 --> 00:44:10.519 align:start position:0%
exporting a package either from a Java
 

00:44:10.519 --> 00:44:12.489 align:start position:0%
exporting a package either from a Java
mounted<00:44:10.940><c> JDK</c><00:44:11.239><c> module</c><00:44:11.569><c> or</c><00:44:11.869><c> from</c><00:44:12.019><c> your</c><00:44:12.109><c> module</c>

00:44:12.489 --> 00:44:12.499 align:start position:0%
mounted JDK module or from your module
 

00:44:12.499 --> 00:44:15.819 align:start position:0%
mounted JDK module or from your module
is<00:44:12.650><c> not</c><00:44:13.459><c> about</c><00:44:14.359><c> letting</c><00:44:14.749><c> library</c><00:44:15.289><c> code</c><00:44:15.469><c> use</c>

00:44:15.819 --> 00:44:15.829 align:start position:0%
is not about letting library code use
 

00:44:15.829 --> 00:44:18.910 align:start position:0%
is not about letting library code use
reflection<00:44:16.519><c> to</c><00:44:16.699><c> access</c><00:44:17.119><c> private</c><00:44:17.749><c> elements</c><00:44:18.589><c> if</c>

00:44:18.910 --> 00:44:18.920 align:start position:0%
reflection to access private elements if
 

00:44:18.920 --> 00:44:20.829 align:start position:0%
reflection to access private elements if
you<00:44:19.130><c> recall</c><00:44:19.369><c> that</c><00:44:19.430><c> was</c><00:44:19.759><c> what</c><00:44:19.910><c> an</c><00:44:20.089><c> open</c><00:44:20.479><c> module</c>

00:44:20.829 --> 00:44:20.839 align:start position:0%
you recall that was what an open module
 

00:44:20.839 --> 00:44:24.939 align:start position:0%
you recall that was what an open module
allowed<00:44:21.619><c> but</c><00:44:22.489><c> none</c><00:44:22.819><c> of</c><00:44:23.059><c> the</c><00:44:23.390><c> JDK</c><00:44:23.809><c> modules</c><00:44:24.499><c> are</c>

00:44:24.939 --> 00:44:24.949 align:start position:0%
allowed but none of the JDK modules are
 

00:44:24.949 --> 00:44:30.969 align:start position:0%
allowed but none of the JDK modules are
open<00:44:26.979><c> let</c><00:44:27.979><c> me</c><00:44:28.160><c> give</c><00:44:29.089><c> you</c><00:44:29.209><c> an</c><00:44:29.299><c> example</c><00:44:29.709><c> the</c><00:44:30.709><c> Java</c>

00:44:30.969 --> 00:44:30.979 align:start position:0%
open let me give you an example the Java
 

00:44:30.979 --> 00:44:33.670 align:start position:0%
open let me give you an example the Java
based<00:44:31.219><c> module</c><00:44:31.749><c> exports</c><00:44:32.749><c> a</c><00:44:32.869><c> package</c><00:44:33.229><c> called</c>

00:44:33.670 --> 00:44:33.680 align:start position:0%
based module exports a package called
 

00:44:33.680 --> 00:44:37.390 align:start position:0%
based module exports a package called
Java<00:44:34.039><c> dot</c><00:44:34.279><c> security</c><00:44:35.680><c> which</c><00:44:36.680><c> contains</c><00:44:37.190><c> a</c>

00:44:37.390 --> 00:44:37.400 align:start position:0%
Java dot security which contains a
 

00:44:37.400 --> 00:44:40.599 align:start position:0%
Java dot security which contains a
public<00:44:37.940><c> class</c><00:44:38.269><c> called</c><00:44:38.869><c> key</c><00:44:39.079><c> store</c><00:44:39.609><c> the</c>

00:44:40.599 --> 00:44:40.609 align:start position:0%
public class called key store the
 

00:44:40.609 --> 00:44:42.849 align:start position:0%
public class called key store the
purpose<00:44:41.029><c> of</c><00:44:41.180><c> this</c><00:44:41.299><c> class</c><00:44:41.569><c> when</c><00:44:42.440><c> I</c><00:44:42.529><c> find</c><00:44:42.769><c> my</c>

00:44:42.849 --> 00:44:42.859 align:start position:0%
purpose of this class when I find my
 

00:44:42.859 --> 00:44:44.800 align:start position:0%
purpose of this class when I find my
pointer

00:44:44.800 --> 00:44:44.810 align:start position:0%
pointer
 

00:44:44.810 --> 00:44:47.230 align:start position:0%
pointer
the<00:44:45.440><c> purpose</c><00:44:45.800><c> of</c><00:44:45.950><c> this</c><00:44:46.070><c> class</c><00:44:46.340><c> is</c><00:44:46.670><c> and</c><00:44:46.940><c> I</c><00:44:47.060><c> quote</c>

00:44:47.230 --> 00:44:47.240 align:start position:0%
the purpose of this class is and I quote
 

00:44:47.240 --> 00:44:50.440 align:start position:0%
the purpose of this class is and I quote
a<00:44:47.770><c> storage</c><00:44:48.770><c> facility</c><00:44:49.340><c> for</c><00:44:49.850><c> cryptographic</c>

00:44:50.440 --> 00:44:50.450 align:start position:0%
a storage facility for cryptographic
 

00:44:50.450 --> 00:44:54.550 align:start position:0%
a storage facility for cryptographic
keys<00:44:51.230><c> and</c><00:44:51.620><c> certificates</c><00:44:52.400><c> if</c><00:44:53.140><c> ever</c><00:44:54.140><c> there</c><00:44:54.410><c> was</c>

00:44:54.550 --> 00:44:54.560 align:start position:0%
keys and certificates if ever there was
 

00:44:54.560 --> 00:44:58.840 align:start position:0%
keys and certificates if ever there was
a<00:44:54.620><c> public</c><00:44:55.400><c> class</c><00:44:55.790><c> in</c><00:44:56.210><c> an</c><00:44:56.750><c> API</c><00:44:57.130><c> whose</c><00:44:58.130><c> private</c>

00:44:58.840 --> 00:44:58.850 align:start position:0%
a public class in an API whose private
 

00:44:58.850 --> 00:45:01.540 align:start position:0%
a public class in an API whose private
fields<00:44:59.540><c> should</c><00:44:59.930><c> be</c><00:45:00.140><c> strongly</c><00:45:00.550><c> encapsulated</c>

00:45:01.540 --> 00:45:01.550 align:start position:0%
fields should be strongly encapsulated
 

00:45:01.550 --> 00:45:06.310 align:start position:0%
fields should be strongly encapsulated
it's<00:45:01.820><c> this</c><00:45:02.270><c> one</c><00:45:04.630><c> well</c><00:45:05.630><c> here</c><00:45:05.900><c> is</c><00:45:05.990><c> a</c><00:45:06.080><c> stack</c>

00:45:06.310 --> 00:45:06.320 align:start position:0%
it's this one well here is a stack
 

00:45:06.320 --> 00:45:10.210 align:start position:0%
it's this one well here is a stack
overflow<00:45:06.800><c> question</c><00:45:07.250><c> from</c><00:45:07.490><c> July</c><00:45:07.760><c> 2016</c><00:45:09.220><c> someone</c>

00:45:10.210 --> 00:45:10.220 align:start position:0%
overflow question from July 2016 someone
 

00:45:10.220 --> 00:45:13.630 align:start position:0%
overflow question from July 2016 someone
this<00:45:10.550><c> is</c><00:45:10.700><c> on</c><00:45:10.790><c> JDK</c><00:45:11.090><c> 8</c><00:45:11.120><c> was</c><00:45:11.780><c> using</c><00:45:12.170><c> reflection</c><00:45:12.650><c> to</c>

00:45:13.630 --> 00:45:13.640 align:start position:0%
this is on JDK 8 was using reflection to
 

00:45:13.640 --> 00:45:16.180 align:start position:0%
this is on JDK 8 was using reflection to
access<00:45:14.060><c> a</c><00:45:14.210><c> private</c><00:45:14.780><c> field</c><00:45:15.110><c> in</c><00:45:15.530><c> the</c><00:45:15.800><c> keystore</c>

00:45:16.180 --> 00:45:16.190 align:start position:0%
access a private field in the keystore
 

00:45:16.190 --> 00:45:19.300 align:start position:0%
access a private field in the keystore
class<00:45:16.490><c> and</c><00:45:17.050><c> not</c><00:45:18.050><c> only</c><00:45:18.230><c> did</c><00:45:18.530><c> this</c><00:45:18.650><c> person</c><00:45:18.890><c> feel</c>

00:45:19.300 --> 00:45:19.310 align:start position:0%
class and not only did this person feel
 

00:45:19.310 --> 00:45:21.400 align:start position:0%
class and not only did this person feel
free<00:45:19.700><c> to</c><00:45:19.730><c> reflect</c><00:45:20.480><c> over</c><00:45:20.720><c> key</c><00:45:21.050><c> stores</c>

00:45:21.400 --> 00:45:21.410 align:start position:0%
free to reflect over key stores
 

00:45:21.410 --> 00:45:24.970 align:start position:0%
free to reflect over key stores
internals<00:45:22.660><c> they</c><00:45:23.660><c> actually</c><00:45:23.990><c> got</c><00:45:24.110><c> annoyed</c><00:45:24.530><c> when</c>

00:45:24.970 --> 00:45:24.980 align:start position:0%
internals they actually got annoyed when
 

00:45:24.980 --> 00:45:27.610 align:start position:0%
internals they actually got annoyed when
the<00:45:25.100><c> internals</c><00:45:25.700><c> were</c><00:45:25.880><c> changed</c><00:45:26.570><c> in</c><00:45:26.840><c> a</c><00:45:27.230><c> JDK</c>

00:45:27.610 --> 00:45:27.620 align:start position:0%
the internals were changed in a JDK
 

00:45:27.620 --> 00:45:30.700 align:start position:0%
the internals were changed in a JDK
update<00:45:27.980><c> a</c><00:45:28.190><c> JDK</c><00:45:28.580><c> 8</c><00:45:28.730><c> updates</c><00:45:29.270><c> the</c><00:45:30.200><c> Java</c><00:45:30.440><c> security</c>

00:45:30.700 --> 00:45:30.710 align:start position:0%
update a JDK 8 updates the Java security
 

00:45:30.710 --> 00:45:34.420 align:start position:0%
update a JDK 8 updates the Java security
package<00:45:31.400><c> in</c><00:45:31.880><c> JDK</c><00:45:32.390><c> 9</c><00:45:32.600><c> is</c><00:45:32.900><c> exported</c><00:45:33.860><c> so</c><00:45:34.070><c> you</c><00:45:34.130><c> can</c>

00:45:34.420 --> 00:45:34.430 align:start position:0%
package in JDK 9 is exported so you can
 

00:45:34.430 --> 00:45:37.180 align:start position:0%
package in JDK 9 is exported so you can
code<00:45:34.760><c> against</c><00:45:35.210><c> the</c><00:45:35.300><c> keystore</c><00:45:35.750><c> api</c><00:45:36.140><c> not</c><00:45:36.920><c> so</c>

00:45:37.180 --> 00:45:37.190 align:start position:0%
code against the keystore api not so
 

00:45:37.190 --> 00:45:38.800 align:start position:0%
code against the keystore api not so
that<00:45:37.370><c> you</c><00:45:37.460><c> can</c><00:45:37.640><c> reflect</c><00:45:37.940><c> over</c><00:45:38.270><c> key</c><00:45:38.540><c> stores</c>

00:45:38.800 --> 00:45:38.810 align:start position:0%
that you can reflect over key stores
 

00:45:38.810 --> 00:45:41.260 align:start position:0%
that you can reflect over key stores
internals<00:45:39.410><c> one</c><00:45:40.400><c> of</c><00:45:40.520><c> the</c><00:45:40.640><c> reasons</c><00:45:41.060><c> we</c><00:45:41.240><c> think</c>

00:45:41.260 --> 00:45:41.270 align:start position:0%
internals one of the reasons we think
 

00:45:41.270 --> 00:45:43.780 align:start position:0%
internals one of the reasons we think
strong<00:45:41.840><c> encapsulation</c><00:45:42.500><c> is</c><00:45:42.770><c> so</c><00:45:42.950><c> important</c><00:45:43.520><c> is</c>

00:45:43.780 --> 00:45:43.790 align:start position:0%
strong encapsulation is so important is
 

00:45:43.790 --> 00:45:46.900 align:start position:0%
strong encapsulation is so important is
that<00:45:44.180><c> it</c><00:45:44.510><c> will</c><00:45:44.660><c> let</c><00:45:44.870><c> us</c><00:45:45.080><c> evolve</c><00:45:45.620><c> the</c><00:45:45.890><c> JDK</c><00:45:46.550><c> more</c>

00:45:46.900 --> 00:45:46.910 align:start position:0%
that it will let us evolve the JDK more
 

00:45:46.910 --> 00:45:49.570 align:start position:0%
that it will let us evolve the JDK more
rapidly<00:45:47.390><c> and</c><00:45:47.690><c> reliably</c><00:45:48.130><c> because</c><00:45:49.130><c> we</c><00:45:49.310><c> all</c><00:45:49.370><c> know</c>

00:45:49.570 --> 00:45:49.580 align:start position:0%
rapidly and reliably because we all know
 

00:45:49.580 --> 00:45:52.320 align:start position:0%
rapidly and reliably because we all know
that<00:45:49.820><c> no</c><00:45:50.000><c> one</c><00:45:50.240><c> can</c><00:45:50.270><c> rely</c><00:45:50.960><c> on</c><00:45:51.250><c> unspecified</c>

00:45:52.320 --> 00:45:52.330 align:start position:0%
that no one can rely on unspecified
 

00:45:52.330 --> 00:45:56.200 align:start position:0%
that no one can rely on unspecified
implementation<00:45:53.330><c> details</c><00:45:55.090><c> unfortunately</c><00:45:56.090><c> of</c>

00:45:56.200 --> 00:45:56.210 align:start position:0%
implementation details unfortunately of
 

00:45:56.210 --> 00:45:57.940 align:start position:0%
implementation details unfortunately of
course<00:45:56.240><c> there's</c><00:45:56.750><c> there's</c><00:45:57.020><c> this</c><00:45:57.410><c> this</c><00:45:57.740><c> guy's</c>

00:45:57.940 --> 00:45:57.950 align:start position:0%
course there's there's this this guy's
 

00:45:57.950 --> 00:45:59.410 align:start position:0%
course there's there's this this guy's
basically<00:45:58.430><c> writing</c><00:45:58.640><c> a</c><00:45:58.820><c> library</c><00:45:59.210><c> there's</c>

00:45:59.410 --> 00:45:59.420 align:start position:0%
basically writing a library there's
 

00:45:59.420 --> 00:46:00.910 align:start position:0%
basically writing a library there's
library<00:45:59.840><c> code</c><00:45:59.990><c> out</c><00:46:00.200><c> there</c><00:46:00.230><c> which</c><00:46:00.650><c> has</c><00:46:00.800><c> been</c>

00:46:00.910 --> 00:46:00.920 align:start position:0%
library code out there which has been
 

00:46:00.920 --> 00:46:04.210 align:start position:0%
library code out there which has been
relying<00:46:01.340><c> on</c><00:46:01.640><c> these</c><00:46:01.820><c> details</c><00:46:02.360><c> for</c><00:46:02.780><c> years</c><00:46:03.220><c> so</c>

00:46:04.210 --> 00:46:04.220 align:start position:0%
relying on these details for years so
 

00:46:04.220 --> 00:46:05.980 align:start position:0%
relying on these details for years so
there's<00:46:04.430><c> going</c><00:46:04.610><c> to</c><00:46:04.700><c> be</c><00:46:04.790><c> some</c><00:46:05.090><c> migration</c><00:46:05.510><c> pain</c>

00:46:05.980 --> 00:46:05.990 align:start position:0%
there's going to be some migration pain
 

00:46:05.990 --> 00:46:08.110 align:start position:0%
there's going to be some migration pain
for<00:46:06.290><c> these</c><00:46:06.380><c> libraries</c><00:46:06.860><c> and</c><00:46:07.130><c> for</c><00:46:07.970><c> the</c>

00:46:08.110 --> 00:46:08.120 align:start position:0%
for these libraries and for the
 

00:46:08.120 --> 00:46:09.940 align:start position:0%
for these libraries and for the
applications<00:46:08.900><c> that</c><00:46:09.260><c> rely</c><00:46:09.470><c> on</c><00:46:09.620><c> these</c>

00:46:09.940 --> 00:46:09.950 align:start position:0%
applications that rely on these
 

00:46:09.950 --> 00:46:12.940 align:start position:0%
applications that rely on these
libraries<00:46:10.430><c> if</c><00:46:11.050><c> this</c><00:46:12.050><c> happens</c><00:46:12.440><c> to</c><00:46:12.620><c> your</c><00:46:12.710><c> hap</c>

00:46:12.940 --> 00:46:12.950 align:start position:0%
libraries if this happens to your hap
 

00:46:12.950 --> 00:46:15.250 align:start position:0%
libraries if this happens to your hap
Legation<00:46:13.430><c> then</c><00:46:14.060><c> again</c><00:46:14.330><c> please</c><00:46:14.660><c> file</c><00:46:14.960><c> a</c><00:46:14.990><c> bug</c>

00:46:15.250 --> 00:46:15.260 align:start position:0%
Legation then again please file a bug
 

00:46:15.260 --> 00:46:19.600 align:start position:0%
Legation then again please file a bug
with<00:46:15.830><c> the</c><00:46:15.860><c> library</c><00:46:16.220><c> maintenance</c><00:46:18.610><c> finally</c>

00:46:19.600 --> 00:46:19.610 align:start position:0%
with the library maintenance finally
 

00:46:19.610 --> 00:46:22.060 align:start position:0%
with the library maintenance finally
finally<00:46:20.000><c> I</c><00:46:20.410><c> again</c><00:46:21.410><c> just</c><00:46:21.650><c> want</c><00:46:21.740><c> to</c><00:46:21.830><c> make</c><00:46:21.950><c> you</c>

00:46:22.060 --> 00:46:22.070 align:start position:0%
finally I again just want to make you
 

00:46:22.070 --> 00:46:24.910 align:start position:0%
finally I again just want to make you
aware<00:46:22.100><c> that</c><00:46:22.400><c> some</c><00:46:23.030><c> internal</c><00:46:24.020><c> aspects</c><00:46:24.590><c> of</c><00:46:24.800><c> the</c>

00:46:24.910 --> 00:46:24.920 align:start position:0%
aware that some internal aspects of the
 

00:46:24.920 --> 00:46:27.160 align:start position:0%
aware that some internal aspects of the
JDK<00:46:25.130><c> have</c><00:46:25.670><c> been</c><00:46:25.820><c> overhauled</c><00:46:26.240><c> and</c><00:46:26.720><c> again</c><00:46:27.050><c> it</c>

00:46:27.160 --> 00:46:27.170 align:start position:0%
JDK have been overhauled and again it
 

00:46:27.170 --> 00:46:28.720 align:start position:0%
JDK have been overhauled and again it
probably<00:46:27.500><c> won't</c><00:46:27.650><c> affect</c><00:46:27.740><c> you</c><00:46:28.130><c> but</c><00:46:28.310><c> it</c><00:46:28.400><c> might</c>

00:46:28.720 --> 00:46:28.730 align:start position:0%
probably won't affect you but it might
 

00:46:28.730 --> 00:46:31.060 align:start position:0%
probably won't affect you but it might
affect<00:46:29.150><c> the</c><00:46:29.930><c> libraries</c><00:46:30.350><c> and</c><00:46:30.500><c> tools</c><00:46:30.650><c> you</c><00:46:30.800><c> rely</c>

00:46:31.060 --> 00:46:31.070 align:start position:0%
affect the libraries and tools you rely
 

00:46:31.070 --> 00:46:33.430 align:start position:0%
affect the libraries and tools you rely
on<00:46:31.100><c> code</c><00:46:31.970><c> that</c><00:46:32.210><c> assumes</c><00:46:32.630><c> there's</c><00:46:33.020><c> a</c><00:46:33.080><c> file</c>

00:46:33.430 --> 00:46:33.440 align:start position:0%
on code that assumes there's a file
 

00:46:33.440 --> 00:46:35.800 align:start position:0%
on code that assumes there's a file
called<00:46:33.770><c> RTO</c><00:46:34.250><c> Jarl</c><00:46:34.850><c> tools</c><00:46:35.090><c> jar</c><00:46:35.540><c> in</c><00:46:35.720><c> a</c>

00:46:35.800 --> 00:46:35.810 align:start position:0%
called RTO Jarl tools jar in a
 

00:46:35.810 --> 00:46:39.060 align:start position:0%
called RTO Jarl tools jar in a
particular<00:46:36.110><c> directory</c><00:46:36.560><c> will</c><00:46:36.980><c> fail</c><00:46:37.250><c> on</c><00:46:37.580><c> JDK</c><00:46:38.330><c> 9</c>

00:46:39.060 --> 00:46:39.070 align:start position:0%
particular directory will fail on JDK 9
 

00:46:39.070 --> 00:46:43.150 align:start position:0%
particular directory will fail on JDK 9
scripts<00:46:40.070><c> that</c><00:46:40.280><c> try</c><00:46:40.490><c> to</c><00:46:40.550><c> patch</c><00:46:40.940><c> the</c><00:46:41.300><c> JDK</c><00:46:41.900><c> with</c><00:46:42.680><c> -</c>

00:46:43.150 --> 00:46:43.160 align:start position:0%
scripts that try to patch the JDK with -
 

00:46:43.160 --> 00:46:45.970 align:start position:0%
scripts that try to patch the JDK with -
X<00:46:43.310><c> blue</c><00:46:43.460><c> class</c><00:46:43.700><c> path</c><00:46:43.970><c> slash</c><00:46:44.270><c> P</c><00:46:44.600><c> will</c><00:46:45.350><c> fail</c><00:46:45.680><c> on</c>

00:46:45.970 --> 00:46:45.980 align:start position:0%
X blue class path slash P will fail on
 

00:46:45.980 --> 00:46:49.750 align:start position:0%
X blue class path slash P will fail on
JDK<00:46:46.580><c> 9</c><00:46:47.080><c> code</c><00:46:48.080><c> that</c><00:46:48.290><c> assumes</c><00:46:48.620><c> the</c><00:46:48.950><c> application</c>

00:46:49.750 --> 00:46:49.760 align:start position:0%
JDK 9 code that assumes the application
 

00:46:49.760 --> 00:46:52.810 align:start position:0%
JDK 9 code that assumes the application
class<00:46:50.030><c> loader</c><00:46:50.330><c> is</c><00:46:50.690><c> a</c><00:46:50.750><c> URL</c><00:46:51.500><c> class</c><00:46:51.890><c> loader</c><00:46:52.190><c> will</c>

00:46:52.810 --> 00:46:52.820 align:start position:0%
class loader is a URL class loader will
 

00:46:52.820 --> 00:46:57.070 align:start position:0%
class loader is a URL class loader will
fail<00:46:53.090><c> on</c><00:46:53.420><c> JDK</c><00:46:54.050><c> 9</c><00:46:54.640><c> code</c><00:46:55.640><c> that</c><00:46:55.820><c> assumes</c><00:46:56.120><c> all</c><00:46:56.330><c> JDK</c>

00:46:57.070 --> 00:46:57.080 align:start position:0%
fail on JDK 9 code that assumes all JDK
 

00:46:57.080 --> 00:46:59.280 align:start position:0%
fail on JDK 9 code that assumes all JDK
classes<00:46:57.620><c> are</c><00:46:57.830><c> defined</c><00:46:58.610><c> by</c><00:46:58.850><c> the</c>

00:46:59.280 --> 00:46:59.290 align:start position:0%
classes are defined by the
 

00:46:59.290 --> 00:47:04.080 align:start position:0%
classes are defined by the
strap<00:46:59.590><c> loader</c><00:47:00.280><c> will</c><00:47:01.270><c> fail</c><00:47:01.570><c> on</c><00:47:01.870><c> JDK</c><00:47:02.440><c> 9</c><00:47:03.090><c> code</c>

00:47:04.080 --> 00:47:04.090 align:start position:0%
strap loader will fail on JDK 9 code
 

00:47:04.090 --> 00:47:05.700 align:start position:0%
strap loader will fail on JDK 9 code
that<00:47:04.270><c> assumes</c><00:47:04.630><c> the</c><00:47:04.810><c> version</c><00:47:05.320><c> strings</c>

00:47:05.700 --> 00:47:05.710 align:start position:0%
that assumes the version strings
 

00:47:05.710 --> 00:47:08.580 align:start position:0%
that assumes the version strings
reported<00:47:06.340><c> by</c><00:47:06.460><c> system</c><00:47:07.210><c> properties</c><00:47:07.630><c> begin</c><00:47:08.380><c> with</c>

00:47:08.580 --> 00:47:08.590 align:start position:0%
reported by system properties begin with
 

00:47:08.590 --> 00:47:13.740 align:start position:0%
reported by system properties begin with
one<00:47:08.890><c> dots</c><00:47:09.460><c> will</c><00:47:10.420><c> fail</c><00:47:10.750><c> on</c><00:47:11.050><c> JDK</c><00:47:11.830><c> 9</c><00:47:12.180><c> again</c><00:47:13.180><c> if</c><00:47:13.360><c> you</c>

00:47:13.740 --> 00:47:13.750 align:start position:0%
one dots will fail on JDK 9 again if you
 

00:47:13.750 --> 00:47:15.770 align:start position:0%
one dots will fail on JDK 9 again if you
see<00:47:13.930><c> libraries</c><00:47:14.380><c> failing</c><00:47:14.860><c> due</c><00:47:15.070><c> to</c><00:47:15.220><c> these</c>

00:47:15.770 --> 00:47:15.780 align:start position:0%
see libraries failing due to these
 

00:47:15.780 --> 00:47:19.680 align:start position:0%
see libraries failing due to these
assumptions<00:47:16.780><c> on</c><00:47:17.070><c> never</c><00:47:18.070><c> documented</c><00:47:18.880><c> never</c>

00:47:19.680 --> 00:47:19.690 align:start position:0%
assumptions on never documented never
 

00:47:19.690 --> 00:47:21.890 align:start position:0%
assumptions on never documented never
specified<00:47:20.130><c> never</c><00:47:21.130><c> standardized</c>

00:47:21.890 --> 00:47:21.900 align:start position:0%
specified never standardized
 

00:47:21.900 --> 00:47:25.020 align:start position:0%
specified never standardized
implementation<00:47:22.900><c> details</c><00:47:23.290><c> file</c><00:47:24.280><c> a</c><00:47:24.310><c> bug</c><00:47:24.640><c> with</c>

00:47:25.020 --> 00:47:25.030 align:start position:0%
implementation details file a bug with
 

00:47:25.030 --> 00:47:29.970 align:start position:0%
implementation details file a bug with
the<00:47:25.060><c> library</c><00:47:25.450><c> maintenance</c><00:47:27.990><c> so</c><00:47:28.990><c> the</c><00:47:29.620><c> modular</c>

00:47:29.970 --> 00:47:29.980 align:start position:0%
the library maintenance so the modular
 

00:47:29.980 --> 00:47:32.700 align:start position:0%
the library maintenance so the modular
JDK<00:47:30.370><c> is</c><00:47:30.580><c> modules</c><00:47:31.060><c> all</c><00:47:31.240><c> the</c><00:47:31.330><c> way</c><00:47:31.450><c> down</c><00:47:31.710><c> some</c>

00:47:32.700 --> 00:47:32.710 align:start position:0%
JDK is modules all the way down some
 

00:47:32.710 --> 00:47:35.670 align:start position:0%
JDK is modules all the way down some
misc<00:47:32.950><c> is</c><00:47:33.130><c> exported</c><00:47:33.900><c> JDK</c><00:47:34.900><c> internal</c><00:47:35.290><c> packages</c>

00:47:35.670 --> 00:47:35.680 align:start position:0%
misc is exported JDK internal packages
 

00:47:35.680 --> 00:47:38.940 align:start position:0%
misc is exported JDK internal packages
are<00:47:35.800><c> nots</c><00:47:35.950><c> and</c><00:47:36.330><c> beware</c><00:47:37.330><c> of</c><00:47:37.390><c> libraries</c><00:47:38.020><c> relying</c>

00:47:38.940 --> 00:47:38.950 align:start position:0%
are nots and beware of libraries relying
 

00:47:38.950 --> 00:47:46.230 align:start position:0%
are nots and beware of libraries relying
on<00:47:39.160><c> JDK</c><00:47:39.610><c> internals</c><00:47:40.120><c> in</c><00:47:43.170><c> JDK</c><00:47:44.170><c> 9</c><00:47:44.380><c> a</c><00:47:45.030><c> module</c><00:47:46.030><c> is</c><00:47:46.210><c> a</c>

00:47:46.230 --> 00:47:46.240 align:start position:0%
on JDK internals in JDK 9 a module is a
 

00:47:46.240 --> 00:47:48.890 align:start position:0%
on JDK internals in JDK 9 a module is a
set<00:47:46.450><c> of</c><00:47:46.570><c> packages</c><00:47:46.990><c> designed</c><00:47:47.140><c> for</c><00:47:47.500><c> reuse</c>

00:47:48.890 --> 00:47:48.900 align:start position:0%
set of packages designed for reuse
 

00:47:48.900 --> 00:47:51.600 align:start position:0%
set of packages designed for reuse
automatic<00:47:49.900><c> modules</c><00:47:50.350><c> help</c><00:47:51.070><c> migrates</c>

00:47:51.600 --> 00:47:51.610 align:start position:0%
automatic modules help migrates
 

00:47:51.610 --> 00:47:56.580 align:start position:0%
automatic modules help migrates
libraries<00:47:52.420><c> and</c><00:47:53.970><c> with</c><00:47:54.970><c> modules</c><00:47:55.450><c> the</c><00:47:55.690><c> JDK</c><00:47:56.230><c> can</c>

00:47:56.580 --> 00:47:56.590 align:start position:0%
libraries and with modules the JDK can
 

00:47:56.590 --> 00:47:59.790 align:start position:0%
libraries and with modules the JDK can
evolve<00:47:56.830><c> more</c><00:47:57.370><c> rapidly</c><00:47:57.430><c> and</c><00:47:58.120><c> reliably</c><00:47:58.800><c> but</c>

00:47:59.790 --> 00:47:59.800 align:start position:0%
evolve more rapidly and reliably but
 

00:47:59.800 --> 00:48:02.550 align:start position:0%
evolve more rapidly and reliably but
popular<00:48:00.730><c> libraries</c><00:48:01.330><c> and</c><00:48:01.510><c> tooling</c><00:48:01.840><c> are</c><00:48:02.050><c> not</c>

00:48:02.550 --> 00:48:02.560 align:start position:0%
popular libraries and tooling are not
 

00:48:02.560 --> 00:48:09.150 align:start position:0%
popular libraries and tooling are not
yet<00:48:02.830><c> all</c><00:48:03.040><c> compatible</c><00:48:03.700><c> with</c><00:48:04.180><c> JDK</c><00:48:04.600><c> 9</c><00:48:07.860><c> in</c><00:48:08.860><c> the</c><00:48:09.010><c> 2</c>

00:48:09.150 --> 00:48:09.160 align:start position:0%
yet all compatible with JDK 9 in the 2
 

00:48:09.160 --> 00:48:11.460 align:start position:0%
yet all compatible with JDK 9 in the 2
minutes<00:48:09.430><c> remaining</c><00:48:09.670><c> for</c><00:48:10.150><c> the</c><00:48:10.720><c> network</c><00:48:11.410><c> the</c>

00:48:11.460 --> 00:48:11.470 align:start position:0%
minutes remaining for the network the
 

00:48:11.470 --> 00:48:12.600 align:start position:0%
minutes remaining for the network the
last<00:48:11.620><c> two</c><00:48:11.770><c> slides</c><00:48:11.890><c> and</c><00:48:12.250><c> all</c><00:48:12.370><c> of</c><00:48:12.490><c> your</c>

00:48:12.600 --> 00:48:12.610 align:start position:0%
last two slides and all of your
 

00:48:12.610 --> 00:48:16.140 align:start position:0%
last two slides and all of your
questions<00:48:12.970><c> are</c><00:48:13.290><c> I</c><00:48:14.290><c> need</c><00:48:14.920><c> to</c><00:48:15.400><c> acknowledge</c><00:48:16.120><c> that</c>

00:48:16.140 --> 00:48:16.150 align:start position:0%
questions are I need to acknowledge that
 

00:48:16.150 --> 00:48:17.820 align:start position:0%
questions are I need to acknowledge that
there's<00:48:16.450><c> a</c><00:48:16.510><c> huge</c><00:48:16.810><c> amount</c><00:48:17.080><c> in</c><00:48:17.380><c> the</c><00:48:17.500><c> module</c>

00:48:17.820 --> 00:48:17.830 align:start position:0%
there's a huge amount in the module
 

00:48:17.830 --> 00:48:19.890 align:start position:0%
there's a huge amount in the module
system<00:48:18.250><c> that</c><00:48:18.640><c> I</c><00:48:18.670><c> haven't</c><00:48:19.150><c> had</c><00:48:19.330><c> time</c><00:48:19.570><c> to</c><00:48:19.630><c> talk</c>

00:48:19.890 --> 00:48:19.900 align:start position:0%
system that I haven't had time to talk
 

00:48:19.900 --> 00:48:22.980 align:start position:0%
system that I haven't had time to talk
about<00:48:20.160><c> you</c><00:48:21.160><c> can</c><00:48:21.310><c> encapsulate</c><00:48:21.690><c> resources</c><00:48:22.690><c> in</c><00:48:22.900><c> a</c>

00:48:22.980 --> 00:48:22.990 align:start position:0%
about you can encapsulate resources in a
 

00:48:22.990 --> 00:48:25.620 align:start position:0%
about you can encapsulate resources in a
module<00:48:23.170><c> largest</c><00:48:23.860><c> classes</c><00:48:24.280><c> you</c><00:48:25.150><c> can</c><00:48:25.300><c> express</c>

00:48:25.620 --> 00:48:25.630 align:start position:0%
module largest classes you can express
 

00:48:25.630 --> 00:48:27.600 align:start position:0%
module largest classes you can express
optional<00:48:26.290><c> dependencies</c><00:48:26.950><c> by</c><00:48:27.160><c> programming</c>

00:48:27.600 --> 00:48:27.610 align:start position:0%
optional dependencies by programming
 

00:48:27.610 --> 00:48:30.030 align:start position:0%
optional dependencies by programming
with<00:48:27.820><c> services</c><00:48:28.330><c> you</c><00:48:29.080><c> can</c><00:48:29.290><c> build</c><00:48:29.470><c> custom</c>

00:48:30.030 --> 00:48:30.040 align:start position:0%
with services you can build custom
 

00:48:30.040 --> 00:48:33.030 align:start position:0%
with services you can build custom
system<00:48:30.580><c> images</c><00:48:31.060><c> with</c><00:48:31.420><c> the</c><00:48:31.630><c> j-link</c><00:48:32.110><c> tool</c><00:48:32.410><c> so</c>

00:48:33.030 --> 00:48:33.040 align:start position:0%
system images with the j-link tool so
 

00:48:33.040 --> 00:48:35.820 align:start position:0%
system images with the j-link tool so
you<00:48:33.100><c> can</c><00:48:33.370><c> drop</c><00:48:33.610><c> CORBA</c><00:48:34.300><c> right</c><00:48:34.810><c> now</c><00:48:35.020><c> if</c><00:48:35.380><c> you</c><00:48:35.620><c> want</c>

00:48:35.820 --> 00:48:35.830 align:start position:0%
you can drop CORBA right now if you want
 

00:48:35.830 --> 00:48:39.030 align:start position:0%
you can drop CORBA right now if you want
and<00:48:36.160><c> you</c><00:48:37.000><c> can</c><00:48:37.240><c> in</c><00:48:37.540><c> fact</c><00:48:37.570><c> spin</c><00:48:38.290><c> up</c><00:48:38.410><c> multiple</c>

00:48:39.030 --> 00:48:39.040 align:start position:0%
and you can in fact spin up multiple
 

00:48:39.040 --> 00:48:41.720 align:start position:0%
and you can in fact spin up multiple
versions<00:48:39.550><c> of</c><00:48:39.730><c> a</c><00:48:39.880><c> module</c><00:48:40.120><c> with</c><00:48:41.110><c> the</c><00:48:41.260><c> layer</c><00:48:41.440><c> API</c>

00:48:41.720 --> 00:48:41.730 align:start position:0%
versions of a module with the layer API
 

00:48:41.730 --> 00:48:44.430 align:start position:0%
versions of a module with the layer API
if<00:48:42.730><c> you're</c><00:48:43.330><c> interested</c><00:48:43.900><c> in</c><00:48:43.990><c> this</c><00:48:44.080><c> kind</c><00:48:44.290><c> of</c>

00:48:44.430 --> 00:48:44.440 align:start position:0%
if you're interested in this kind of
 

00:48:44.440 --> 00:48:47.250 align:start position:0%
if you're interested in this kind of
thing<00:48:44.650><c> it</c><00:48:45.130><c> recommends</c><00:48:45.580><c> two</c><00:48:45.730><c> books</c><00:48:45.990><c> the</c><00:48:46.990><c> first</c>

00:48:47.250 --> 00:48:47.260 align:start position:0%
thing it recommends two books the first
 

00:48:47.260 --> 00:48:50.400 align:start position:0%
thing it recommends two books the first
is<00:48:47.530><c> Java</c><00:48:47.950><c> 9</c><00:48:48.220><c> modularity</c><00:48:48.730><c> out</c><00:48:49.540><c> now</c><00:48:49.900><c> in</c><00:48:50.140><c> early</c>

00:48:50.400 --> 00:48:50.410 align:start position:0%
is Java 9 modularity out now in early
 

00:48:50.410 --> 00:48:52.650 align:start position:0%
is Java 9 modularity out now in early
access<00:48:50.530><c> form</c><00:48:51.100><c> it's</c><00:48:52.060><c> a</c><00:48:52.180><c> very</c><00:48:52.360><c> pragmatic</c>

00:48:52.650 --> 00:48:52.660 align:start position:0%
access form it's a very pragmatic
 

00:48:52.660 --> 00:48:55.230 align:start position:0%
access form it's a very pragmatic
walkthrough<00:48:53.560><c> of</c><00:48:53.770><c> the</c><00:48:54.100><c> entire</c><00:48:54.490><c> module</c><00:48:54.670><c> system</c>

00:48:55.230 --> 00:48:55.240 align:start position:0%
walkthrough of the entire module system
 

00:48:55.240 --> 00:48:58.920 align:start position:0%
walkthrough of the entire module system
and<00:48:55.480><c> the</c><00:48:55.930><c> modular</c><00:48:56.290><c> JDK</c><00:48:56.680><c> the</c><00:48:57.540><c> other</c><00:48:58.540><c> book</c><00:48:58.750><c> is</c>

00:48:58.920 --> 00:48:58.930 align:start position:0%
and the modular JDK the other book is
 

00:48:58.930 --> 00:49:01.350 align:start position:0%
and the modular JDK the other book is
java<00:48:59.290><c> application</c><00:48:59.920><c> architecture</c><00:49:00.550><c> from</c><00:49:00.730><c> 2012</c>

00:49:01.350 --> 00:49:01.360 align:start position:0%
java application architecture from 2012
 

00:49:01.360 --> 00:49:04.080 align:start position:0%
java application architecture from 2012
it's<00:49:01.960><c> a</c><00:49:02.140><c> principled</c><00:49:02.770><c> look</c><00:49:03.010><c> at</c><00:49:03.280><c> constructing</c>

00:49:04.080 --> 00:49:04.090 align:start position:0%
it's a principled look at constructing
 

00:49:04.090 --> 00:49:07.080 align:start position:0%
it's a principled look at constructing
modular<00:49:04.540><c> applications</c><00:49:05.550><c> it</c><00:49:06.550><c> says</c><00:49:06.820><c> I</c><00:49:07.000><c> was</c>

00:49:07.080 --> 00:49:07.090 align:start position:0%
modular applications it says I was
 

00:49:07.090 --> 00:49:09.420 align:start position:0%
modular applications it says I was
joined<00:49:07.330><c> the</c><00:49:07.450><c> title</c><00:49:07.810><c> it's</c><00:49:08.170><c> it's</c><00:49:08.500><c> not</c><00:49:08.710><c> specific</c>

00:49:09.420 --> 00:49:09.430 align:start position:0%
joined the title it's it's not specific
 

00:49:09.430 --> 00:49:11.290 align:start position:0%
joined the title it's it's not specific
to<00:49:09.460><c> any</c><00:49:10.030><c> module</c><00:49:10.450><c> system</c><00:49:10.780><c> really</c>

00:49:11.290 --> 00:49:11.300 align:start position:0%
to any module system really
 

00:49:11.300 --> 00:49:13.150 align:start position:0%
to any module system really
it<00:49:11.660><c> has</c><00:49:11.810><c> a</c><00:49:11.839><c> lot</c><00:49:12.140><c> of</c><00:49:12.170><c> very</c><00:49:12.560><c> very</c><00:49:12.710><c> good</c><00:49:12.830><c> advice</c>

00:49:13.150 --> 00:49:13.160 align:start position:0%
it has a lot of very very good advice
 

00:49:13.160 --> 00:49:15.040 align:start position:0%
it has a lot of very very good advice
that<00:49:13.849><c> applies</c><00:49:14.150><c> whether</c><00:49:14.180><c> you're</c><00:49:14.690><c> using</c><00:49:14.869><c> a</c>

00:49:15.040 --> 00:49:15.050 align:start position:0%
that applies whether you're using a
 

00:49:15.050 --> 00:49:16.990 align:start position:0%
that applies whether you're using a
module<00:49:15.230><c> system</c><00:49:15.770><c> or</c><00:49:15.920><c> just</c><00:49:16.220><c> relying</c><00:49:16.760><c> on</c>

00:49:16.990 --> 00:49:17.000 align:start position:0%
module system or just relying on
 

00:49:17.000 --> 00:49:19.180 align:start position:0%
module system or just relying on
traditional<00:49:17.570><c> jars</c><00:49:18.200><c> about</c><00:49:18.650><c> how</c><00:49:18.770><c> to</c><00:49:18.830><c> structure</c>

00:49:19.180 --> 00:49:19.190 align:start position:0%
traditional jars about how to structure
 

00:49:19.190 --> 00:49:23.530 align:start position:0%
traditional jars about how to structure
an<00:49:19.369><c> application</c><00:49:21.430><c> so</c><00:49:22.430><c> the</c><00:49:23.060><c> best</c><00:49:23.180><c> thing</c><00:49:23.359><c> you</c><00:49:23.390><c> can</c>

00:49:23.530 --> 00:49:23.540 align:start position:0%
an application so the best thing you can
 

00:49:23.540 --> 00:49:25.900 align:start position:0%
an application so the best thing you can
do<00:49:23.660><c> to</c><00:49:23.810><c> prepare</c><00:49:23.960><c> for</c><00:49:24.140><c> jdk</c><00:49:24.680><c> 9</c><00:49:24.859><c> is</c><00:49:25.130><c> download</c><00:49:25.640><c> an</c>

00:49:25.900 --> 00:49:25.910 align:start position:0%
do to prepare for jdk 9 is download an
 

00:49:25.910 --> 00:49:28.650 align:start position:0%
do to prepare for jdk 9 is download an
early<00:49:26.240><c> access</c><00:49:26.540><c> binary</c><00:49:26.990><c> has</c><00:49:27.290><c> anyone</c><00:49:27.619><c> done</c><00:49:27.740><c> that</c>

00:49:28.650 --> 00:49:28.660 align:start position:0%
early access binary has anyone done that
 

00:49:28.660 --> 00:49:32.380 align:start position:0%
early access binary has anyone done that
some<00:49:29.660><c> hands</c><00:49:30.290><c> okay</c><00:49:30.920><c> some</c><00:49:31.609><c> hand</c><00:49:31.880><c> thank</c><00:49:32.089><c> you</c><00:49:32.210><c> if</c>

00:49:32.380 --> 00:49:32.390 align:start position:0%
some hands okay some hand thank you if
 

00:49:32.390 --> 00:49:35.530 align:start position:0%
some hands okay some hand thank you if
you're<00:49:33.380><c> a</c><00:49:33.410><c> library</c><00:49:33.710><c> maintainer</c><00:49:34.400><c> these</c><00:49:35.270><c> runge</c>

00:49:35.530 --> 00:49:35.540 align:start position:0%
you're a library maintainer these runge
 

00:49:35.540 --> 00:49:38.320 align:start position:0%
you're a library maintainer these runge
a<00:49:35.720><c> depth</c><00:49:35.960><c> to</c><00:49:36.260><c> see</c><00:49:36.440><c> what</c><00:49:36.619><c> JDK</c><00:49:37.099><c> internals</c><00:49:37.670><c> you</c>

00:49:38.320 --> 00:49:38.330 align:start position:0%
a depth to see what JDK internals you
 

00:49:38.330 --> 00:49:40.690 align:start position:0%
a depth to see what JDK internals you
rely<00:49:38.630><c> on</c><00:49:38.660><c> you</c><00:49:39.170><c> can</c><00:49:39.320><c> do</c><00:49:39.410><c> this</c><00:49:39.560><c> right</c><00:49:39.800><c> now</c><00:49:39.859><c> on</c><00:49:40.339><c> JDK</c>

00:49:40.690 --> 00:49:40.700 align:start position:0%
rely on you can do this right now on JDK
 

00:49:40.700 --> 00:49:43.620 align:start position:0%
rely on you can do this right now on JDK
8<00:49:40.730><c> that</c><00:49:41.119><c> will</c><00:49:41.270><c> that</c><00:49:41.480><c> will</c><00:49:41.540><c> work</c><00:49:41.960><c> on</c><00:49:42.140><c> JDK</c><00:49:42.500><c> AIDS</c>

00:49:43.620 --> 00:49:43.630 align:start position:0%
8 that will that will work on JDK AIDS
 

00:49:43.630 --> 00:49:45.670 align:start position:0%
8 that will that will work on JDK AIDS
everything<00:49:44.630><c> you</c><00:49:44.750><c> ever</c><00:49:44.930><c> wanted</c><00:49:45.349><c> to</c><00:49:45.410><c> know</c><00:49:45.530><c> about</c>

00:49:45.670 --> 00:49:45.680 align:start position:0%
everything you ever wanted to know about
 

00:49:45.680 --> 00:49:49.240 align:start position:0%
everything you ever wanted to know about
the<00:49:46.099><c> module</c><00:49:46.430><c> system</c><00:49:46.609><c> is</c><00:49:47.080><c> discussed</c><00:49:48.080><c> on</c><00:49:48.470><c> open</c>

00:49:49.240 --> 00:49:49.250 align:start position:0%
the module system is discussed on open
 

00:49:49.250 --> 00:49:53.589 align:start position:0%
the module system is discussed on open
JDK<00:49:49.400><c> in</c><00:49:49.910><c> jet</c><00:49:50.770><c> 261</c><00:49:51.770><c> I</c><00:49:52.060><c> cannot</c><00:49:53.060><c> emphasize</c><00:49:53.240><c> enough</c>

00:49:53.589 --> 00:49:53.599 align:start position:0%
JDK in jet 261 I cannot emphasize enough
 

00:49:53.599 --> 00:49:55.900 align:start position:0%
JDK in jet 261 I cannot emphasize enough
how<00:49:54.020><c> much</c><00:49:54.140><c> valuable</c><00:49:54.740><c> information</c><00:49:55.099><c> lives</c><00:49:55.670><c> in</c>

00:49:55.900 --> 00:49:55.910 align:start position:0%
how much valuable information lives in
 

00:49:55.910 --> 00:50:00.130 align:start position:0%
how much valuable information lives in
jet<00:49:56.180><c> 261</c><00:49:57.460><c> there's</c><00:49:58.460><c> also</c><00:49:58.670><c> jet</c><00:49:59.030><c> 260</c><00:49:59.660><c> which</c>

00:50:00.130 --> 00:50:00.140 align:start position:0%
jet 261 there's also jet 260 which
 

00:50:00.140 --> 00:50:03.010 align:start position:0%
jet 261 there's also jet 260 which
identifies<00:50:00.770><c> the</c><00:50:00.980><c> JDK</c><00:50:01.520><c> internal</c><00:50:02.030><c> classes</c><00:50:02.570><c> like</c>

00:50:03.010 --> 00:50:03.020 align:start position:0%
identifies the JDK internal classes like
 

00:50:03.020 --> 00:50:05.859 align:start position:0%
identifies the JDK internal classes like
some<00:50:03.349><c> miss</c><00:50:03.530><c> gun</c><00:50:03.710><c> safe</c><00:50:03.980><c> that</c><00:50:04.580><c> are</c><00:50:04.730><c> exposed</c><00:50:05.390><c> in</c>

00:50:05.859 --> 00:50:05.869 align:start position:0%
some miss gun safe that are exposed in
 

00:50:05.869 --> 00:50:09.820 align:start position:0%
some miss gun safe that are exposed in
JDK<00:50:06.290><c> 9</c><00:50:06.609><c> jet</c><00:50:07.609><c> 223</c><00:50:08.390><c> which</c><00:50:08.570><c> defines</c><00:50:09.410><c> the</c><00:50:09.619><c> new</c>

00:50:09.820 --> 00:50:09.830 align:start position:0%
JDK 9 jet 223 which defines the new
 

00:50:09.830 --> 00:50:13.960 align:start position:0%
JDK 9 jet 223 which defines the new
version<00:50:10.430><c> strings</c><00:50:10.820><c> beginning</c><00:50:11.660><c> 9</c><00:50:11.960><c> dots</c><00:50:12.560><c> and</c><00:50:12.970><c> jet</c>

00:50:13.960 --> 00:50:13.970 align:start position:0%
version strings beginning 9 dots and jet
 

00:50:13.970 --> 00:50:16.930 align:start position:0%
version strings beginning 9 dots and jet
220<00:50:14.630><c> which</c><00:50:14.869><c> describes</c><00:50:15.320><c> how</c><00:50:15.470><c> RT</c><00:50:15.950><c> jar</c><00:50:16.369><c> has</c><00:50:16.730><c> gone</c>

00:50:16.930 --> 00:50:16.940 align:start position:0%
220 which describes how RT jar has gone
 

00:50:16.940 --> 00:50:17.609 align:start position:0%
220 which describes how RT jar has gone
away

00:50:17.609 --> 00:50:17.619 align:start position:0%
away
 

00:50:17.619 --> 00:50:21.339 align:start position:0%
away
finally<00:50:18.619><c> jet</c><00:50:19.400><c> 200</c><00:50:20.060><c> gives</c><00:50:20.330><c> an</c><00:50:20.480><c> overview</c><00:50:20.900><c> of</c><00:50:21.109><c> the</c>

00:50:21.339 --> 00:50:21.349 align:start position:0%
finally jet 200 gives an overview of the
 

00:50:21.349 --> 00:50:23.920 align:start position:0%
finally jet 200 gives an overview of the
JDK<00:50:21.680><c> modules</c><00:50:22.339><c> but</c><00:50:23.000><c> if</c><00:50:23.210><c> you've</c><00:50:23.359><c> already</c><00:50:23.510><c> read</c>

00:50:23.920 --> 00:50:23.930 align:start position:0%
JDK modules but if you've already read
 

00:50:23.930 --> 00:50:25.990 align:start position:0%
JDK modules but if you've already read
jet<00:50:24.170><c> 261</c><00:50:24.859><c> which</c><00:50:25.190><c> should</c><00:50:25.520><c> because</c><00:50:25.730><c> it's</c><00:50:25.880><c> very</c>

00:50:25.990 --> 00:50:26.000 align:start position:0%
jet 261 which should because it's very
 

00:50:26.000 --> 00:50:27.910 align:start position:0%
jet 261 which should because it's very
good<00:50:26.240><c> there</c><00:50:26.750><c> won't</c><00:50:26.900><c> be</c><00:50:26.960><c> any</c><00:50:27.109><c> surprises</c><00:50:27.260><c> and</c>

00:50:27.910 --> 00:50:27.920 align:start position:0%
good there won't be any surprises and
 

00:50:27.920 --> 00:50:30.040 align:start position:0%
good there won't be any surprises and
with<00:50:28.520><c> that</c><00:50:28.700><c> exactly</c><00:50:29.300><c> the</c><00:50:29.450><c> time</c><00:50:29.660><c> thank</c><00:50:29.990><c> you</c>

00:50:30.040 --> 00:50:30.050 align:start position:0%
with that exactly the time thank you
 

00:50:30.050 --> 00:50:37.570 align:start position:0%
with that exactly the time thank you
very<00:50:30.170><c> much</c><00:50:35.440><c> so</c><00:50:36.440><c> we</c><00:50:36.589><c> now</c><00:50:36.710><c> have</c><00:50:36.920><c> negative</c><00:50:37.369><c> time</c>

00:50:37.570 --> 00:50:37.580 align:start position:0%
very much so we now have negative time
 

00:50:37.580 --> 00:50:40.599 align:start position:0%
very much so we now have negative time
for<00:50:37.760><c> questions</c><00:50:38.089><c> so</c><00:50:38.720><c> we</c><00:50:39.290><c> all</c><00:50:39.560><c> tealights</c><00:50:39.890><c> you</c>

00:50:40.599 --> 00:50:40.609 align:start position:0%
for questions so we all tealights you
 

00:50:40.609 --> 00:50:42.130 align:start position:0%
for questions so we all tealights you
someone<00:50:41.119><c> had</c><00:50:41.210><c> you</c><00:50:41.359><c> had</c><00:50:41.480><c> a</c><00:50:41.510><c> question</c><00:50:41.839><c> earlier</c>

00:50:42.130 --> 00:50:42.140 align:start position:0%
someone had you had a question earlier
 

00:50:42.140 --> 00:51:03.920 align:start position:0%
someone had you had a question earlier
do<00:50:42.619><c> this</c><00:50:42.770><c> quickly</c>

00:51:03.920 --> 00:51:03.930 align:start position:0%
 
 

00:51:03.930 --> 00:51:06.260 align:start position:0%
 
versions<00:51:04.440><c> of</c><00:51:04.560><c> a</c><00:51:04.620><c> jar</c><00:51:04.830><c> in</c><00:51:05.280><c> Jeddah</c><00:51:05.520><c> k-8</c><00:51:05.820><c> on</c><00:51:06.060><c> the</c>

00:51:06.260 --> 00:51:06.270 align:start position:0%
versions of a jar in Jeddah k-8 on the
 

00:51:06.270 --> 00:51:08.750 align:start position:0%
versions of a jar in Jeddah k-8 on the
class<00:51:06.450><c> path</c><00:51:06.720><c> you</c><00:51:07.320><c> would</c><00:51:07.500><c> typically</c><00:51:07.830><c> shade</c><00:51:08.130><c> the</c>

00:51:08.750 --> 00:51:08.760 align:start position:0%
class path you would typically shade the
 

00:51:08.760 --> 00:51:12.350 align:start position:0%
class path you would typically shade the
packages<00:51:09.860><c> that</c><00:51:10.860><c> that</c><00:51:11.490><c> will</c><00:51:11.670><c> continue</c><00:51:12.090><c> to</c><00:51:12.210><c> work</c>

00:51:12.350 --> 00:51:12.360 align:start position:0%
packages that that will continue to work
 

00:51:12.360 --> 00:51:14.720 align:start position:0%
packages that that will continue to work
jar<00:51:13.170><c> files</c><00:51:13.440><c> both</c><00:51:13.710><c> on</c><00:51:13.890><c> the</c><00:51:13.980><c> class</c><00:51:14.160><c> path</c><00:51:14.430><c> and</c>

00:51:14.720 --> 00:51:14.730 align:start position:0%
jar files both on the class path and
 

00:51:14.730 --> 00:51:16.310 align:start position:0%
jar files both on the class path and
modular<00:51:15.210><c> jar</c><00:51:15.420><c> files</c><00:51:15.630><c> on</c><00:51:15.780><c> the</c><00:51:15.840><c> module</c><00:51:16.110><c> path</c>

00:51:16.310 --> 00:51:16.320 align:start position:0%
modular jar files on the module path
 

00:51:16.320 --> 00:51:18.530 align:start position:0%
modular jar files on the module path
there's<00:51:17.160><c> nothing</c><00:51:17.640><c> that</c><00:51:17.970><c> thus</c><00:51:18.120><c> better</c><00:51:18.330><c> the</c>

00:51:18.530 --> 00:51:18.540 align:start position:0%
there's nothing that thus better the
 

00:51:18.540 --> 00:51:20.270 align:start position:0%
there's nothing that thus better the
specialness<00:51:18.990><c> is</c><00:51:19.140><c> all</c><00:51:19.380><c> in</c><00:51:19.560><c> the</c><00:51:19.650><c> module</c><00:51:19.950><c> info</c>

00:51:20.270 --> 00:51:20.280 align:start position:0%
specialness is all in the module info
 

00:51:20.280 --> 00:51:23.870 align:start position:0%
specialness is all in the module info
dot<00:51:21.120><c> class</c><00:51:21.300><c> file</c><00:51:21.630><c> the</c><00:51:22.200><c> contents</c><00:51:22.950><c> of</c><00:51:23.160><c> those</c>

00:51:23.870 --> 00:51:23.880 align:start position:0%
dot class file the contents of those
 

00:51:23.880 --> 00:51:25.790 align:start position:0%
dot class file the contents of those
module<00:51:24.330><c> if</c><00:51:24.570><c> they</c><00:51:24.720><c> are</c><00:51:24.870><c> in</c><00:51:24.990><c> fact</c><00:51:25.140><c> containing</c>

00:51:25.790 --> 00:51:25.800 align:start position:0%
module if they are in fact containing
 

00:51:25.800 --> 00:51:32.410 align:start position:0%
module if they are in fact containing
renamed<00:51:26.280><c> rebased</c><00:51:26.790><c> your</c><00:51:27.120><c> word</c><00:51:27.270><c> packages</c><00:51:27.860><c> fine</c>

00:51:32.410 --> 00:51:32.420 align:start position:0%
 
 

00:51:32.420 --> 00:51:36.950 align:start position:0%
 
if<00:51:33.710><c> your</c><00:51:34.710><c> if</c><00:51:34.860><c> you</c><00:51:35.190><c> have</c><00:51:35.220><c> if</c><00:51:36.210><c> you</c><00:51:36.390><c> have</c><00:51:36.540><c> shaded</c>

00:51:36.950 --> 00:51:36.960 align:start position:0%
if your if you have if you have shaded
 

00:51:36.960 --> 00:51:39.470 align:start position:0%
if your if you have if you have shaded
the<00:51:37.170><c> package</c><00:51:37.740><c> and</c><00:51:38.070><c> renamed</c><00:51:38.460><c> it</c><00:51:38.640><c> even</c><00:51:39.300><c> if</c><00:51:39.360><c> it's</c>

00:51:39.470 --> 00:51:39.480 align:start position:0%
the package and renamed it even if it's
 

00:51:39.480 --> 00:51:41.300 align:start position:0%
the package and renamed it even if it's
being<00:51:39.600><c> exported</c><00:51:39.960><c> the</c><00:51:40.410><c> there</c><00:51:41.010><c> are</c><00:51:41.070><c> different</c>

00:51:41.300 --> 00:51:41.310 align:start position:0%
being exported the there are different
 

00:51:41.310 --> 00:51:44.450 align:start position:0%
being exported the there are different
they're<00:51:41.580><c> different</c><00:51:41.610><c> classes</c><00:51:43.280><c> that</c><00:51:44.280><c> was</c><00:51:44.430><c> a</c>

00:51:44.450 --> 00:51:44.460 align:start position:0%
they're different classes that was a
 

00:51:44.460 --> 00:51:56.030 align:start position:0%
they're different classes that was a
question<00:51:46.310><c> you</c><00:51:47.310><c> had</c><00:51:47.430><c> a</c><00:51:47.460><c> question</c><00:51:48.110><c> hey</c><00:51:54.170><c> al</c><00:51:55.170><c> how</c>

00:51:56.030 --> 00:51:56.040 align:start position:0%
question you had a question hey al how
 

00:51:56.040 --> 00:51:57.200 align:start position:0%
question you had a question hey al how
do<00:51:56.100><c> you</c><00:51:56.220><c> test</c><00:51:56.400><c> classes</c><00:51:56.820><c> that</c><00:51:56.970><c> are</c><00:51:57.090><c> not</c>

00:51:57.200 --> 00:51:57.210 align:start position:0%
do you test classes that are not
 

00:51:57.210 --> 00:52:00.290 align:start position:0%
do you test classes that are not
exported<00:51:57.960><c> there</c><00:51:58.830><c> are</c><00:51:59.010><c> this</c><00:51:59.790><c> is</c><00:51:59.970><c> this</c><00:52:00.120><c> is</c><00:52:00.270><c> a</c>

00:52:00.290 --> 00:52:00.300 align:start position:0%
exported there are this is this is a
 

00:52:00.300 --> 00:52:02.690 align:start position:0%
exported there are this is this is a
talk<00:52:00.570><c> in</c><00:52:00.720><c> itself</c><00:52:00.990><c> the</c><00:52:01.590><c> short</c><00:52:01.860><c> answer</c><00:52:02.280><c> is</c><00:52:02.310><c> there</c>

00:52:02.690 --> 00:52:02.700 align:start position:0%
talk in itself the short answer is there
 

00:52:02.700 --> 00:52:04.940 align:start position:0%
talk in itself the short answer is there
is<00:52:02.820><c> a</c><00:52:02.850><c> command</c><00:52:03.150><c> line</c><00:52:03.300><c> flag</c><00:52:03.570><c> to</c><00:52:03.780><c> patch</c><00:52:04.080><c> classes</c>

00:52:04.940 --> 00:52:04.950 align:start position:0%
is a command line flag to patch classes
 

00:52:04.950 --> 00:52:08.090 align:start position:0%
is a command line flag to patch classes
into<00:52:05.610><c> a</c><00:52:05.640><c> module</c><00:52:06.240><c> so</c><00:52:07.230><c> you</c><00:52:07.560><c> can</c><00:52:07.740><c> access</c><00:52:07.950><c> the</c>

00:52:08.090 --> 00:52:08.100 align:start position:0%
into a module so you can access the
 

00:52:08.100 --> 00:52:10.190 align:start position:0%
into a module so you can access the
internals<00:52:08.550><c> GEB</c><00:52:08.970><c> 261</c><00:52:09.630><c> has</c><00:52:09.840><c> all</c><00:52:10.080><c> the</c>

00:52:10.190 --> 00:52:10.200 align:start position:0%
internals GEB 261 has all the
 

00:52:10.200 --> 00:52:12.710 align:start position:0%
internals GEB 261 has all the
information<00:52:10.590><c> about</c><00:52:10.680><c> that</c><00:52:10.950><c> the</c><00:52:11.940><c> real</c><00:52:12.180><c> answer</c>

00:52:12.710 --> 00:52:12.720 align:start position:0%
information about that the real answer
 

00:52:12.720 --> 00:52:14.900 align:start position:0%
information about that the real answer
is<00:52:12.960><c> that</c><00:52:13.350><c> testing</c><00:52:13.740><c> frameworks</c><00:52:14.250><c> that</c><00:52:14.460><c> wish</c><00:52:14.760><c> to</c>

00:52:14.900 --> 00:52:14.910 align:start position:0%
is that testing frameworks that wish to
 

00:52:14.910 --> 00:52:17.720 align:start position:0%
is that testing frameworks that wish to
test<00:52:15.150><c> non-public</c><00:52:15.930><c> non</c><00:52:16.380><c> exported</c><00:52:17.010><c> non</c><00:52:17.340><c> open</c>

00:52:17.720 --> 00:52:17.730 align:start position:0%
test non-public non exported non open
 

00:52:17.730 --> 00:52:21.110 align:start position:0%
test non-public non exported non open
elements<00:52:18.540><c> of</c><00:52:18.630><c> a</c><00:52:18.720><c> module</c><00:52:19.020><c> should</c><00:52:19.790><c> use</c><00:52:20.790><c> the</c>

00:52:21.110 --> 00:52:21.120 align:start position:0%
elements of a module should use the
 

00:52:21.120 --> 00:52:23.660 align:start position:0%
elements of a module should use the
method<00:52:21.690><c> handles</c><00:52:22.050><c> lookup</c><00:52:22.380><c> API</c><00:52:22.770><c> to</c><00:52:23.460><c> access</c>

00:52:23.660 --> 00:52:23.670 align:start position:0%
method handles lookup API to access
 

00:52:23.670 --> 00:52:26.380 align:start position:0%
method handles lookup API to access
module<00:52:24.270><c> internals</c><00:52:25.080><c> in</c><00:52:25.260><c> a</c><00:52:25.380><c> constrained</c><00:52:25.980><c> way</c>

00:52:26.380 --> 00:52:26.390 align:start position:0%
module internals in a constrained way
 

00:52:26.390 --> 00:52:29.570 align:start position:0%
module internals in a constrained way
that<00:52:27.390><c> is</c><00:52:27.600><c> that</c><00:52:28.080><c> is</c><00:52:28.230><c> an</c><00:52:28.470><c> entire</c><00:52:28.770><c> days</c><00:52:29.040><c> worth</c><00:52:29.070><c> of</c>

00:52:29.570 --> 00:52:29.580 align:start position:0%
that is that is an entire days worth of
 

00:52:29.580 --> 00:52:33.910 align:start position:0%
that is that is an entire days worth of
talk<00:52:31.190><c> but</c><00:52:32.190><c> you</c><00:52:32.340><c> it</c><00:52:32.550><c> only</c><00:52:33.180><c> requires</c><00:52:33.720><c> the</c>

00:52:33.910 --> 00:52:33.920 align:start position:0%
talk but you it only requires the
 

00:52:33.920 --> 00:52:36.980 align:start position:0%
talk but you it only requires the
testing<00:52:34.920><c> framework</c><00:52:35.630><c> to</c><00:52:36.630><c> spin</c><00:52:36.870><c> its</c>

00:52:36.980 --> 00:52:36.990 align:start position:0%
testing framework to spin its
 

00:52:36.990 --> 00:52:40.000 align:start position:0%
testing framework to spin its
infrastructure<00:52:37.500><c> once</c><00:52:37.800><c> to</c><00:52:38.550><c> use</c><00:52:38.670><c> the</c><00:52:38.820><c> write</c><00:52:38.970><c> API</c>

00:52:40.000 --> 00:52:40.010 align:start position:0%
infrastructure once to use the write API
 

00:52:40.010 --> 00:52:48.520 align:start position:0%
infrastructure once to use the write API
I'm<00:52:41.010><c> a</c><00:52:41.130><c> question</c><00:52:41.370><c> from</c><00:52:41.520><c> the</c><00:52:41.610><c> back</c><00:52:47.240><c> yes</c>

00:52:48.520 --> 00:52:48.530 align:start position:0%
I'm a question from the back yes
 

00:52:48.530 --> 00:52:52.450 align:start position:0%
I'm a question from the back yes
was<00:52:48.620><c> what</c><00:52:48.800><c> the</c><00:52:49.240><c> qualified</c><00:52:50.240><c> export</c><00:52:50.830><c> was</c><00:52:51.830><c> let</c><00:52:52.430><c> me</c>

00:52:52.450 --> 00:52:52.460 align:start position:0%
was what the qualified export was let me
 

00:52:52.460 --> 00:52:59.260 align:start position:0%
was what the qualified export was let me
go<00:52:52.640><c> back</c><00:52:55.690><c> that</c><00:52:56.690><c> export</c><00:52:57.230><c> exports</c><00:52:58.070><c> the</c><00:52:58.880><c> package</c>

00:52:59.260 --> 00:52:59.270 align:start position:0%
go back that export exports the package
 

00:52:59.270 --> 00:53:03.370 align:start position:0%
go back that export exports the package
to<00:52:59.630><c> a</c><00:52:59.870><c> specific</c><00:53:00.620><c> friend</c><00:53:00.830><c> module</c><00:53:01.310><c> yes</c><00:53:01.880><c> I</c><00:53:02.380><c> think</c>

00:53:03.370 --> 00:53:03.380 align:start position:0%
to a specific friend module yes I think
 

00:53:03.380 --> 00:53:04.870 align:start position:0%
to a specific friend module yes I think
that<00:53:03.680><c> is</c><00:53:03.770><c> all</c><00:53:03.860><c> we</c><00:53:03.890><c> have</c><00:53:04.070><c> time</c><00:53:04.190><c> for</c><00:53:04.250><c> again</c><00:53:04.700><c> thank</c>

00:53:04.870 --> 00:53:04.880 align:start position:0%
that is all we have time for again thank
 

00:53:04.880 --> 00:53:05.230 align:start position:0%
that is all we have time for again thank
you

00:53:05.230 --> 00:53:05.240 align:start position:0%
you
 

00:53:05.240 --> 00:53:11.769 align:start position:0%
you
[Music]

