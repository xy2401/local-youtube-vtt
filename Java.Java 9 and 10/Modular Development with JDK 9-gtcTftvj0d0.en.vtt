WEBVTT
Kind: captions
Language: en

00:00:03.189 --> 00:00:07.599 align:start position:0%
 
hi<00:00:04.189><c> everyone</c><00:00:04.990><c> it's</c><00:00:05.990><c> 5:30</c><00:00:06.529><c> and</c><00:00:06.830><c> we</c><00:00:07.340><c> only</c><00:00:07.460><c> have</c>

00:00:07.599 --> 00:00:07.609 align:start position:0%
hi everyone it's 5:30 and we only have
 

00:00:07.609 --> 00:00:10.230 align:start position:0%
hi everyone it's 5:30 and we only have
45<00:00:08.000><c> minutes</c><00:00:08.179><c> so</c><00:00:09.050><c> I'm</c><00:00:09.170><c> going</c><00:00:09.290><c> to</c><00:00:09.349><c> get</c><00:00:09.500><c> started</c>

00:00:10.230 --> 00:00:10.240 align:start position:0%
45 minutes so I'm going to get started
 

00:00:10.240 --> 00:00:12.759 align:start position:0%
45 minutes so I'm going to get started
thank<00:00:11.240><c> you</c><00:00:11.360><c> all</c><00:00:11.480><c> for</c><00:00:11.660><c> coming</c><00:00:11.690><c> my</c><00:00:12.080><c> name</c><00:00:12.230><c> is</c><00:00:12.410><c> Alex</c>

00:00:12.759 --> 00:00:12.769 align:start position:0%
thank you all for coming my name is Alex
 

00:00:12.769 --> 00:00:15.159 align:start position:0%
thank you all for coming my name is Alex
Buckley<00:00:13.160><c> I'm</c><00:00:13.370><c> the</c><00:00:13.849><c> spec</c><00:00:14.599><c> lead</c><00:00:14.749><c> for</c><00:00:14.929><c> the</c><00:00:14.990><c> Java</c>

00:00:15.159 --> 00:00:15.169 align:start position:0%
Buckley I'm the spec lead for the Java
 

00:00:15.169 --> 00:00:22.360 align:start position:0%
Buckley I'm the spec lead for the Java
language<00:00:15.349><c> and</c><00:00:15.950><c> VM</c><00:00:16.190><c> at</c><00:00:16.369><c> Oracle</c><00:00:19.840><c> JDK</c><00:00:20.840><c> 9</c><00:00:21.200><c> is</c><00:00:21.590><c> here</c>

00:00:22.360 --> 00:00:22.370 align:start position:0%
language and VM at Oracle JDK 9 is here
 

00:00:22.370 --> 00:00:26.050 align:start position:0%
language and VM at Oracle JDK 9 is here
and<00:00:22.640><c> there's</c><00:00:23.390><c> a</c><00:00:23.450><c> lot</c><00:00:23.660><c> in</c><00:00:23.900><c> it</c><00:00:24.850><c> some</c><00:00:25.850><c> of</c><00:00:25.970><c> the</c>

00:00:26.050 --> 00:00:26.060 align:start position:0%
and there's a lot in it some of the
 

00:00:26.060 --> 00:00:27.880 align:start position:0%
and there's a lot in it some of the
features<00:00:26.480><c> are</c><00:00:26.720><c> performance</c><00:00:27.350><c> improvements</c>

00:00:27.880 --> 00:00:27.890 align:start position:0%
features are performance improvements
 

00:00:27.890 --> 00:00:31.180 align:start position:0%
features are performance improvements
such<00:00:28.460><c> as</c><00:00:28.520><c> compact</c><00:00:29.000><c> strings</c><00:00:29.560><c> some</c><00:00:30.560><c> our</c><00:00:30.800><c> tooling</c>

00:00:31.180 --> 00:00:31.190 align:start position:0%
such as compact strings some our tooling
 

00:00:31.190 --> 00:00:33.310 align:start position:0%
such as compact strings some our tooling
improvements<00:00:31.940><c> like</c><00:00:31.970><c> the</c><00:00:32.300><c> search</c><00:00:32.480><c> box</c><00:00:32.840><c> in</c><00:00:33.079><c> Java</c>

00:00:33.310 --> 00:00:33.320 align:start position:0%
improvements like the search box in Java
 

00:00:33.320 --> 00:00:34.990 align:start position:0%
improvements like the search box in Java
doc<00:00:33.559><c> that</c><00:00:33.860><c> Mark</c><00:00:34.010><c> showed</c><00:00:34.219><c> in</c><00:00:34.340><c> the</c><00:00:34.430><c> keynote</c><00:00:34.730><c> and</c>

00:00:34.990 --> 00:00:35.000 align:start position:0%
doc that Mark showed in the keynote and
 

00:00:35.000 --> 00:00:38.590 align:start position:0%
doc that Mark showed in the keynote and
the<00:00:35.420><c> new</c><00:00:35.540><c> J</c><00:00:35.720><c> shell</c><00:00:35.930><c> tool</c><00:00:36.910><c> strawpoll</c><00:00:37.910><c> has</c>

00:00:38.590 --> 00:00:38.600 align:start position:0%
the new J shell tool strawpoll has
 

00:00:38.600 --> 00:00:41.890 align:start position:0%
the new J shell tool strawpoll has
anyone<00:00:38.870><c> downloaded</c><00:00:39.320><c> JDK</c><00:00:39.650><c> 9</c><00:00:39.829><c> yet</c><00:00:40.390><c> right</c><00:00:41.390><c> answer</c>

00:00:41.890 --> 00:00:41.900 align:start position:0%
anyone downloaded JDK 9 yet right answer
 

00:00:41.900 --> 00:00:45.520 align:start position:0%
anyone downloaded JDK 9 yet right answer
has<00:00:42.410><c> anyone</c><00:00:42.739><c> played</c><00:00:43.100><c> with</c><00:00:43.400><c> J</c><00:00:43.550><c> shell</c><00:00:44.260><c> also</c><00:00:45.260><c> the</c>

00:00:45.520 --> 00:00:45.530 align:start position:0%
has anyone played with J shell also the
 

00:00:45.530 --> 00:00:46.930 align:start position:0%
has anyone played with J shell also the
right<00:00:45.680><c> answer</c><00:00:46.070><c> is</c><00:00:46.220><c> it</c><00:00:46.460><c> the</c><00:00:46.550><c> coolest</c><00:00:46.790><c> thing</c>

00:00:46.930 --> 00:00:46.940 align:start position:0%
right answer is it the coolest thing
 

00:00:46.940 --> 00:00:47.200 align:start position:0%
right answer is it the coolest thing
ever

00:00:47.200 --> 00:00:47.210 align:start position:0%
ever
 

00:00:47.210 --> 00:00:52.870 align:start position:0%
ever
yes<00:00:48.200><c> good</c><00:00:50.470><c> some</c><00:00:51.470><c> of</c><00:00:51.710><c> course</c><00:00:52.010><c> on</c><00:00:52.250><c> this</c><00:00:52.640><c> vast</c>

00:00:52.870 --> 00:00:52.880 align:start position:0%
yes good some of course on this vast
 

00:00:52.880 --> 00:00:55.090 align:start position:0%
yes good some of course on this vast
list<00:00:53.239><c> are</c><00:00:53.480><c> updates</c><00:00:54.050><c> to</c><00:00:54.230><c> existing</c><00:00:54.350><c> features</c>

00:00:55.090 --> 00:00:55.100 align:start position:0%
list are updates to existing features
 

00:00:55.100 --> 00:00:58.090 align:start position:0%
list are updates to existing features
such<00:00:55.370><c> as</c><00:00:55.399><c> support</c><00:00:56.030><c> for</c><00:00:56.180><c> Unicode</c><00:00:56.540><c> 8</c><00:00:57.070><c> but</c><00:00:58.070><c> the</c>

00:00:58.090 --> 00:00:58.100 align:start position:0%
such as support for Unicode 8 but the
 

00:00:58.100 --> 00:01:00.310 align:start position:0%
such as support for Unicode 8 but the
main<00:00:58.280><c> feature</c><00:00:58.460><c> and</c><00:00:58.970><c> the</c><00:00:59.720><c> one</c><00:00:59.870><c> that's</c><00:01:00.079><c> taken</c>

00:01:00.310 --> 00:01:00.320 align:start position:0%
main feature and the one that's taken
 

00:01:00.320 --> 00:01:02.799 align:start position:0%
main feature and the one that's taken
many<00:01:00.500><c> years</c><00:01:00.620><c> to</c><00:01:00.920><c> come</c><00:01:01.190><c> to</c><00:01:01.370><c> fruition</c><00:01:01.640><c> is</c><00:01:02.210><c> the</c>

00:01:02.799 --> 00:01:02.809 align:start position:0%
many years to come to fruition is the
 

00:01:02.809 --> 00:01:06.670 align:start position:0%
many years to come to fruition is the
module<00:01:03.050><c> system</c><00:01:04.630><c> the</c><00:01:05.630><c> module</c><00:01:05.960><c> system</c><00:01:06.290><c> is</c><00:01:06.409><c> a</c><00:01:06.439><c> big</c>

00:01:06.670 --> 00:01:06.680 align:start position:0%
module system the module system is a big
 

00:01:06.680 --> 00:01:08.350 align:start position:0%
module system the module system is a big
deal<00:01:06.890><c> because</c><00:01:07.190><c> it</c><00:01:07.460><c> enables</c><00:01:07.880><c> modular</c>

00:01:08.350 --> 00:01:08.360 align:start position:0%
deal because it enables modular
 

00:01:08.360 --> 00:01:11.320 align:start position:0%
deal because it enables modular
development<00:01:08.900><c> all</c><00:01:09.260><c> the</c><00:01:09.320><c> way</c><00:01:09.710><c> down</c><00:01:10.090><c> the</c><00:01:11.090><c> java</c>

00:01:11.320 --> 00:01:11.330 align:start position:0%
development all the way down the java
 

00:01:11.330 --> 00:01:13.240 align:start position:0%
development all the way down the java
language<00:01:11.540><c> and</c><00:01:12.200><c> the</c><00:01:12.470><c> java</c><00:01:12.710><c> virtual</c><00:01:12.979><c> machine</c>

00:01:13.240 --> 00:01:13.250 align:start position:0%
language and the java virtual machine
 

00:01:13.250 --> 00:01:16.420 align:start position:0%
language and the java virtual machine
understand<00:01:14.210><c> modules</c><00:01:14.690><c> very</c><00:01:14.990><c> deeply</c><00:01:15.380><c> so</c><00:01:16.250><c> that</c>

00:01:16.420 --> 00:01:16.430 align:start position:0%
understand modules very deeply so that
 

00:01:16.430 --> 00:01:18.730 align:start position:0%
understand modules very deeply so that
the<00:01:16.520><c> applications</c><00:01:17.150><c> you</c><00:01:17.360><c> write</c><00:01:17.690><c> and</c><00:01:18.260><c> the</c>

00:01:18.730 --> 00:01:18.740 align:start position:0%
the applications you write and the
 

00:01:18.740 --> 00:01:21.550 align:start position:0%
the applications you write and the
libraries<00:01:19.130><c> you</c><00:01:19.280><c> consume</c><00:01:19.909><c> and</c><00:01:20.210><c> even</c><00:01:21.020><c> the</c><00:01:21.110><c> jdk</c>

00:01:21.550 --> 00:01:21.560 align:start position:0%
libraries you consume and even the jdk
 

00:01:21.560 --> 00:01:24.490 align:start position:0%
libraries you consume and even the jdk
itself<00:01:22.010><c> can</c><00:01:22.880><c> all</c><00:01:23.000><c> be</c><00:01:23.180><c> developed</c><00:01:23.780><c> and</c><00:01:24.080><c> tested</c>

00:01:24.490 --> 00:01:24.500 align:start position:0%
itself can all be developed and tested
 

00:01:24.500 --> 00:01:27.100 align:start position:0%
itself can all be developed and tested
and<00:01:24.950><c> packaged</c><00:01:25.670><c> and</c><00:01:25.909><c> deployed</c><00:01:26.390><c> as</c><00:01:26.659><c> modules</c>

00:01:27.100 --> 00:01:27.110 align:start position:0%
and packaged and deployed as modules
 

00:01:27.110 --> 00:01:29.980 align:start position:0%
and packaged and deployed as modules
with<00:01:27.979><c> clear</c><00:01:28.310><c> api's</c><00:01:28.760><c> and</c><00:01:29.150><c> well</c><00:01:29.630><c> protected</c>

00:01:29.980 --> 00:01:29.990 align:start position:0%
with clear api's and well protected
 

00:01:29.990 --> 00:01:32.980 align:start position:0%
with clear api's and well protected
internals<00:01:31.030><c> making</c><00:01:32.030><c> everyone</c><00:01:32.390><c> play</c><00:01:32.689><c> by</c><00:01:32.930><c> the</c>

00:01:32.980 --> 00:01:32.990 align:start position:0%
internals making everyone play by the
 

00:01:32.990 --> 00:01:35.080 align:start position:0%
internals making everyone play by the
same<00:01:33.260><c> modular</c><00:01:33.799><c> rules</c><00:01:34.040><c> has</c><00:01:34.729><c> great</c><00:01:34.939><c> benefits</c>

00:01:35.080 --> 00:01:35.090 align:start position:0%
same modular rules has great benefits
 

00:01:35.090 --> 00:01:37.570 align:start position:0%
same modular rules has great benefits
for<00:01:35.689><c> reliability</c><00:01:36.409><c> maintainability</c><00:01:36.710><c> and</c>

00:01:37.570 --> 00:01:37.580 align:start position:0%
for reliability maintainability and
 

00:01:37.580 --> 00:01:39.670 align:start position:0%
for reliability maintainability and
security<00:01:38.090><c> as</c><00:01:38.360><c> we'll</c><00:01:38.540><c> see</c><00:01:38.750><c> in</c><00:01:38.930><c> the</c><00:01:39.409><c> rest</c><00:01:39.590><c> of</c>

00:01:39.670 --> 00:01:39.680 align:start position:0%
security as we'll see in the rest of
 

00:01:39.680 --> 00:01:43.990 align:start position:0%
security as we'll see in the rest of
this<00:01:39.799><c> talk</c><00:01:41.710><c> so</c><00:01:42.710><c> with</c><00:01:42.920><c> the</c><00:01:43.010><c> theme</c><00:01:43.220><c> of</c><00:01:43.250><c> modules</c>

00:01:43.990 --> 00:01:44.000 align:start position:0%
this talk so with the theme of modules
 

00:01:44.000 --> 00:01:46.060 align:start position:0%
this talk so with the theme of modules
all<00:01:44.210><c> the</c><00:01:44.330><c> way</c><00:01:44.450><c> down</c><00:01:44.689><c> in</c><00:01:44.900><c> minds</c><00:01:45.350><c> we've</c><00:01:45.950><c> got</c>

00:01:46.060 --> 00:01:46.070 align:start position:0%
all the way down in minds we've got
 

00:01:46.070 --> 00:01:48.130 align:start position:0%
all the way down in minds we've got
three<00:01:46.280><c> parts</c><00:01:46.430><c> the</c><00:01:47.150><c> first</c><00:01:47.180><c> part</c><00:01:47.420><c> explains</c><00:01:47.930><c> how</c>

00:01:48.130 --> 00:01:48.140 align:start position:0%
three parts the first part explains how
 

00:01:48.140 --> 00:01:50.050 align:start position:0%
three parts the first part explains how
modules<00:01:48.530><c> are</c><00:01:48.830><c> alive</c><00:01:49.189><c> at</c><00:01:49.430><c> you</c><00:01:49.520><c> building</c><00:01:49.880><c> block</c>

00:01:50.050 --> 00:01:50.060 align:start position:0%
modules are alive at you building block
 

00:01:50.060 --> 00:01:53.170 align:start position:0%
modules are alive at you building block
in<00:01:50.210><c> the</c><00:01:50.330><c> structure</c><00:01:50.750><c> of</c><00:01:50.780><c> application</c><00:01:51.680><c> code</c><00:01:52.180><c> the</c>

00:01:53.170 --> 00:01:53.180 align:start position:0%
in the structure of application code the
 

00:01:53.180 --> 00:01:54.820 align:start position:0%
in the structure of application code the
second<00:01:53.509><c> part</c><00:01:53.689><c> is</c><00:01:53.869><c> about</c><00:01:54.020><c> how</c><00:01:54.320><c> applications</c>

00:01:54.820 --> 00:01:54.830 align:start position:0%
second part is about how applications
 

00:01:54.830 --> 00:01:57.820 align:start position:0%
second part is about how applications
and<00:01:55.340><c> the</c><00:01:55.670><c> libraries</c><00:01:56.150><c> they</c><00:01:56.330><c> depend</c><00:01:56.780><c> on</c><00:01:56.990><c> can</c>

00:01:57.820 --> 00:01:57.830 align:start position:0%
and the libraries they depend on can
 

00:01:57.830 --> 00:01:59.770 align:start position:0%
and the libraries they depend on can
migrate<00:01:58.009><c> to</c><00:01:58.340><c> modules</c><00:01:58.759><c> that</c><00:01:59.270><c> is</c><00:01:59.420><c> it's</c><00:01:59.570><c> about</c>

00:01:59.770 --> 00:01:59.780 align:start position:0%
migrate to modules that is it's about
 

00:01:59.780 --> 00:02:02.020 align:start position:0%
migrate to modules that is it's about
how<00:01:59.990><c> you</c><00:02:00.049><c> can</c><00:02:00.409><c> mix</c><00:02:00.619><c> modular</c><00:02:01.220><c> and</c><00:02:01.369><c> non</c><00:02:01.579><c> modular</c>

00:02:02.020 --> 00:02:02.030 align:start position:0%
how you can mix modular and non modular
 

00:02:02.030 --> 00:02:04.630 align:start position:0%
how you can mix modular and non modular
code<00:02:02.240><c> and</c><00:02:02.740><c> the</c><00:02:03.740><c> third</c><00:02:03.890><c> part</c><00:02:04.159><c> is</c><00:02:04.280><c> about</c><00:02:04.430><c> the</c>

00:02:04.630 --> 00:02:04.640 align:start position:0%
code and the third part is about the
 

00:02:04.640 --> 00:02:07.420 align:start position:0%
code and the third part is about the
structure<00:02:05.119><c> of</c><00:02:05.150><c> the</c><00:02:05.420><c> modular</c><00:02:05.900><c> JDK</c><00:02:06.439><c> including</c>

00:02:07.420 --> 00:02:07.430 align:start position:0%
structure of the modular JDK including
 

00:02:07.430 --> 00:02:09.339 align:start position:0%
structure of the modular JDK including
some<00:02:07.610><c> of</c><00:02:07.640><c> the</c><00:02:07.850><c> compatibility</c><00:02:08.479><c> issues</c><00:02:09.049><c> that</c>

00:02:09.339 --> 00:02:09.349 align:start position:0%
some of the compatibility issues that
 

00:02:09.349 --> 00:02:11.339 align:start position:0%
some of the compatibility issues that
arise<00:02:09.590><c> from</c><00:02:09.890><c> that</c>

00:02:11.339 --> 00:02:11.349 align:start position:0%
arise from that
 

00:02:11.349 --> 00:02:15.890 align:start position:0%
arise from that
so<00:02:12.580><c> programming</c><00:02:13.580><c> in</c><00:02:13.700><c> the</c><00:02:13.790><c> large</c>

00:02:15.890 --> 00:02:15.900 align:start position:0%
 
 

00:02:15.900 --> 00:02:18.660 align:start position:0%
 
in<00:02:16.900><c> object-oriented</c><00:02:17.770><c> programming</c><00:02:18.340><c> the</c>

00:02:18.660 --> 00:02:18.670 align:start position:0%
in object-oriented programming the
 

00:02:18.670 --> 00:02:21.750 align:start position:0%
in object-oriented programming the
traditionally<00:02:19.450><c> the</c><00:02:19.630><c> basic</c><00:02:20.170><c> unit</c><00:02:20.740><c> of</c><00:02:20.890><c> reuse</c><00:02:21.400><c> is</c>

00:02:21.750 --> 00:02:21.760 align:start position:0%
traditionally the basic unit of reuse is
 

00:02:21.760 --> 00:02:24.630 align:start position:0%
traditionally the basic unit of reuse is
traditionally<00:02:22.630><c> the</c><00:02:22.840><c> class</c><00:02:23.370><c> Java</c><00:02:24.370><c> has</c>

00:02:24.630 --> 00:02:24.640 align:start position:0%
traditionally the class Java has
 

00:02:24.640 --> 00:02:27.540 align:start position:0%
traditionally the class Java has
wonderful<00:02:25.030><c> mechanisms</c><00:02:25.900><c> for</c><00:02:26.200><c> promoting</c><00:02:26.830><c> reuse</c>

00:02:27.540 --> 00:02:27.550 align:start position:0%
wonderful mechanisms for promoting reuse
 

00:02:27.550 --> 00:02:29.940 align:start position:0%
wonderful mechanisms for promoting reuse
of<00:02:27.730><c> a</c><00:02:27.820><c> class</c><00:02:28.260><c> inheritance</c><00:02:29.260><c> for</c><00:02:29.530><c> reusing</c>

00:02:29.940 --> 00:02:29.950 align:start position:0%
of a class inheritance for reusing
 

00:02:29.950 --> 00:02:32.160 align:start position:0%
of a class inheritance for reusing
behavior<00:02:30.450><c> interfaces</c><00:02:31.450><c> for</c><00:02:31.630><c> reusing</c>

00:02:32.160 --> 00:02:32.170 align:start position:0%
behavior interfaces for reusing
 

00:02:32.170 --> 00:02:34.070 align:start position:0%
behavior interfaces for reusing
abstractions<00:02:32.830><c> separate</c><00:02:33.610><c> compilation</c>

00:02:34.070 --> 00:02:34.080 align:start position:0%
abstractions separate compilation
 

00:02:34.080 --> 00:02:37.020 align:start position:0%
abstractions separate compilation
dynamic<00:02:35.080><c> linking</c><00:02:35.470><c> and</c><00:02:35.680><c> access</c><00:02:36.340><c> control</c><00:02:36.820><c> down</c>

00:02:37.020 --> 00:02:37.030 align:start position:0%
dynamic linking and access control down
 

00:02:37.030 --> 00:02:39.000 align:start position:0%
dynamic linking and access control down
to<00:02:37.090><c> the</c><00:02:37.270><c> level</c><00:02:37.570><c> of</c><00:02:37.690><c> individual</c><00:02:38.230><c> fields</c><00:02:38.770><c> and</c>

00:02:39.000 --> 00:02:39.010 align:start position:0%
to the level of individual fields and
 

00:02:39.010 --> 00:02:42.720 align:start position:0%
to the level of individual fields and
methods<00:02:39.160><c> and</c><00:02:40.290><c> we've</c><00:02:41.290><c> had</c><00:02:41.560><c> nested</c><00:02:42.400><c> classes</c>

00:02:42.720 --> 00:02:42.730 align:start position:0%
methods and we've had nested classes
 

00:02:42.730 --> 00:02:46.020 align:start position:0%
methods and we've had nested classes
since<00:02:43.530><c> 1997</c><00:02:44.530><c> so</c><00:02:45.190><c> it</c><00:02:45.280><c> should</c><00:02:45.460><c> be</c><00:02:45.490><c> possible</c><00:02:45.730><c> for</c>

00:02:46.020 --> 00:02:46.030 align:start position:0%
since 1997 so it should be possible for
 

00:02:46.030 --> 00:02:48.390 align:start position:0%
since 1997 so it should be possible for
a<00:02:46.240><c> single</c><00:02:46.540><c> top-level</c><00:02:47.350><c> class</c><00:02:47.740><c> to</c><00:02:48.070><c> encapsulate</c>

00:02:48.390 --> 00:02:48.400 align:start position:0%
a single top-level class to encapsulate
 

00:02:48.400 --> 00:02:52.350 align:start position:0%
a single top-level class to encapsulate
a<00:02:48.880><c> vast</c><00:02:49.240><c> amount</c><00:02:49.660><c> of</c><00:02:49.810><c> functionality</c><00:02:51.180><c> with</c><00:02:52.180><c> that</c>

00:02:52.350 --> 00:02:52.360 align:start position:0%
a vast amount of functionality with that
 

00:02:52.360 --> 00:02:54.630 align:start position:0%
a vast amount of functionality with that
in<00:02:52.570><c> mind</c><00:02:52.810><c> it</c><00:02:53.230><c> seems</c><00:02:53.500><c> that</c><00:02:54.070><c> an</c><00:02:54.220><c> application</c>

00:02:54.630 --> 00:02:54.640 align:start position:0%
in mind it seems that an application
 

00:02:54.640 --> 00:02:57.060 align:start position:0%
in mind it seems that an application
could<00:02:54.970><c> be</c><00:02:55.030><c> a</c><00:02:55.120><c> single</c><00:02:55.420><c> package</c><00:02:55.930><c> containing</c><00:02:56.920><c> a</c>

00:02:57.060 --> 00:02:57.070 align:start position:0%
could be a single package containing a
 

00:02:57.070 --> 00:02:59.730 align:start position:0%
could be a single package containing a
few<00:02:57.430><c> very</c><00:02:57.850><c> rich</c><00:02:58.150><c> classes</c><00:02:58.750><c> all</c><00:02:59.020><c> sharing</c><00:02:59.560><c> data</c>

00:02:59.730 --> 00:02:59.740 align:start position:0%
few very rich classes all sharing data
 

00:02:59.740 --> 00:03:01.890 align:start position:0%
few very rich classes all sharing data
and<00:02:59.920><c> fields</c><00:03:00.460><c> accessible</c><00:03:01.120><c> within</c><00:03:01.300><c> the</c><00:03:01.540><c> package</c>

00:03:01.890 --> 00:03:01.900 align:start position:0%
and fields accessible within the package
 

00:03:01.900 --> 00:03:03.900 align:start position:0%
and fields accessible within the package
and<00:03:02.200><c> where</c><00:03:02.500><c> a</c><00:03:02.530><c> handful</c><00:03:03.070><c> of</c><00:03:03.130><c> public</c><00:03:03.670><c> classes</c>

00:03:03.900 --> 00:03:03.910 align:start position:0%
and where a handful of public classes
 

00:03:03.910 --> 00:03:06.900 align:start position:0%
and where a handful of public classes
form<00:03:04.570><c> the</c><00:03:04.720><c> entry</c><00:03:05.140><c> points</c><00:03:05.560><c> or</c><00:03:05.920><c> the</c><00:03:06.100><c> API</c><00:03:06.370><c> of</c><00:03:06.760><c> the</c>

00:03:06.900 --> 00:03:06.910 align:start position:0%
form the entry points or the API of the
 

00:03:06.910 --> 00:03:11.390 align:start position:0%
form the entry points or the API of the
application<00:03:07.830><c> right</c><00:03:09.810><c> not</c><00:03:10.810><c> really</c>

00:03:11.390 --> 00:03:11.400 align:start position:0%
application right not really
 

00:03:11.400 --> 00:03:13.920 align:start position:0%
application right not really
how<00:03:12.400><c> many</c><00:03:12.610><c> people</c><00:03:13.000><c> work</c><00:03:13.210><c> on</c><00:03:13.360><c> a</c><00:03:13.420><c> code</c><00:03:13.690><c> base</c><00:03:13.900><c> that</c>

00:03:13.920 --> 00:03:13.930 align:start position:0%
how many people work on a code base that
 

00:03:13.930 --> 00:03:17.910 align:start position:0%
how many people work on a code base that
consists<00:03:14.650><c> of</c><00:03:14.740><c> one</c><00:03:15.070><c> package</c><00:03:16.770><c> literally</c><00:03:17.770><c> no</c>

00:03:17.910 --> 00:03:17.920 align:start position:0%
consists of one package literally no
 

00:03:17.920 --> 00:03:21.300 align:start position:0%
consists of one package literally no
hands<00:03:18.450><c> two</c><00:03:19.450><c> packages</c><00:03:19.840><c> just</c><00:03:20.290><c> your</c><00:03:21.190><c> own</c>

00:03:21.300 --> 00:03:21.310 align:start position:0%
hands two packages just your own
 

00:03:21.310 --> 00:03:23.400 align:start position:0%
hands two packages just your own
codebase<00:03:21.730><c> not</c><00:03:22.000><c> the</c><00:03:22.150><c> dependencies</c><00:03:22.720><c> three</c>

00:03:23.400 --> 00:03:23.410 align:start position:0%
codebase not the dependencies three
 

00:03:23.410 --> 00:03:26.970 align:start position:0%
codebase not the dependencies three
packages<00:03:24.840><c> how</c><00:03:25.840><c> many</c><00:03:26.020><c> people</c><00:03:26.380><c> work</c><00:03:26.560><c> on</c><00:03:26.740><c> a</c><00:03:26.770><c> code</c>

00:03:26.970 --> 00:03:26.980 align:start position:0%
packages how many people work on a code
 

00:03:26.980 --> 00:03:30.230 align:start position:0%
packages how many people work on a code
base<00:03:27.190><c> that</c><00:03:27.220><c> is</c><00:03:27.520><c> on</c><00:03:27.820><c> the</c><00:03:28.090><c> order</c><00:03:28.450><c> of</c><00:03:28.480><c> 10</c><00:03:28.840><c> packages</c>

00:03:30.230 --> 00:03:30.240 align:start position:0%
base that is on the order of 10 packages
 

00:03:30.240 --> 00:03:35.130 align:start position:0%
base that is on the order of 10 packages
some<00:03:31.240><c> hands</c><00:03:32.070><c> 20</c><00:03:33.070><c> packages</c><00:03:33.600><c> wow</c><00:03:34.600><c> this</c><00:03:34.840><c> is</c><00:03:34.990><c> going</c>

00:03:35.130 --> 00:03:35.140 align:start position:0%
some hands 20 packages wow this is going
 

00:03:35.140 --> 00:03:37.380 align:start position:0%
some hands 20 packages wow this is going
higher<00:03:35.440><c> than</c><00:03:35.470><c> it</c><00:03:35.800><c> did</c><00:03:35.950><c> it</c><00:03:36.100><c> the</c><00:03:36.970><c> last</c><00:03:37.150><c> time</c><00:03:37.300><c> I</c>

00:03:37.380 --> 00:03:37.390 align:start position:0%
higher than it did it the last time I
 

00:03:37.390 --> 00:03:40.650 align:start position:0%
higher than it did it the last time I
gave<00:03:37.540><c> this</c><00:03:37.690><c> talk</c><00:03:37.900><c> 50</c><00:03:38.590><c> packages</c><00:03:39.070><c> and</c><00:03:39.520><c> this</c><00:03:40.510><c> is</c>

00:03:40.650 --> 00:03:40.660 align:start position:0%
gave this talk 50 packages and this is
 

00:03:40.660 --> 00:03:45.870 align:start position:0%
gave this talk 50 packages and this is
just<00:03:40.930><c> your</c><00:03:41.080><c> own</c><00:03:41.230><c> codebase</c><00:03:44.100><c> probably</c><00:03:45.100><c> 3</c><00:03:45.310><c> or</c><00:03:45.400><c> 400</c>

00:03:45.870 --> 00:03:45.880 align:start position:0%
just your own codebase probably 3 or 400
 

00:03:45.880 --> 00:03:46.770 align:start position:0%
just your own codebase probably 3 or 400
in<00:03:45.940><c> the</c><00:03:46.060><c> front</c><00:03:46.270><c> that's</c><00:03:46.360><c> why</c><00:03:46.510><c> you're</c><00:03:46.660><c> in</c><00:03:46.690><c> the</c>

00:03:46.770 --> 00:03:46.780 align:start position:0%
in the front that's why you're in the
 

00:03:46.780 --> 00:03:49.430 align:start position:0%
in the front that's why you're in the
front<00:03:46.900><c> row</c><00:03:47.050><c> taking</c><00:03:47.350><c> notes</c><00:03:47.530><c> because</c><00:03:47.830><c> it</c><00:03:47.980><c> yeah</c>

00:03:49.430 --> 00:03:49.440 align:start position:0%
front row taking notes because it yeah
 

00:03:49.440 --> 00:03:52.110 align:start position:0%
front row taking notes because it yeah
so<00:03:50.440><c> this</c><00:03:50.650><c> has</c><00:03:50.830><c> made</c><00:03:51.010><c> my</c><00:03:51.160><c> point</c><00:03:51.400><c> far</c><00:03:51.760><c> better</c>

00:03:52.110 --> 00:03:52.120 align:start position:0%
so this has made my point far better
 

00:03:52.120 --> 00:03:55.320 align:start position:0%
so this has made my point far better
than<00:03:52.480><c> I</c><00:03:52.620><c> could</c><00:03:53.620><c> have</c><00:03:53.709><c> made</c><00:03:53.830><c> myself</c><00:03:54.330><c> programs</c>

00:03:55.320 --> 00:03:55.330 align:start position:0%
than I could have made myself programs
 

00:03:55.330 --> 00:03:57.390 align:start position:0%
than I could have made myself programs
do<00:03:55.510><c> not</c><00:03:55.540><c> consist</c><00:03:56.050><c> of</c><00:03:56.170><c> a</c><00:03:56.230><c> handful</c><00:03:56.740><c> of</c><00:03:56.890><c> packages</c>

00:03:57.390 --> 00:03:57.400 align:start position:0%
do not consist of a handful of packages
 

00:03:57.400 --> 00:04:00.210 align:start position:0%
do not consist of a handful of packages
anymore<00:03:57.940><c> even</c><00:03:58.780><c> the</c><00:03:58.900><c> smallest</c><00:03:59.260><c> microservice</c>

00:04:00.210 --> 00:04:00.220 align:start position:0%
anymore even the smallest microservice
 

00:04:00.220 --> 00:04:02.010 align:start position:0%
anymore even the smallest microservice
wouldn't<00:04:00.550><c> be</c><00:04:00.640><c> expected</c><00:04:01.209><c> to</c><00:04:01.300><c> fit</c><00:04:01.450><c> into</c><00:04:01.660><c> a</c>

00:04:02.010 --> 00:04:02.020 align:start position:0%
wouldn't be expected to fit into a
 

00:04:02.020 --> 00:04:05.340 align:start position:0%
wouldn't be expected to fit into a
single<00:04:02.650><c> package</c><00:04:03.130><c> programs</c><00:04:03.910><c> our</c><00:04:04.180><c> packages</c><00:04:04.810><c> not</c>

00:04:05.340 --> 00:04:05.350 align:start position:0%
single package programs our packages not
 

00:04:05.350 --> 00:04:07.310 align:start position:0%
single package programs our packages not
classes<00:04:05.950><c> in</c><00:04:06.220><c> Java</c>

00:04:07.310 --> 00:04:07.320 align:start position:0%
classes in Java
 

00:04:07.320 --> 00:04:09.900 align:start position:0%
classes in Java
unfortunately<00:04:08.320><c> the</c><00:04:08.890><c> Java</c><00:04:09.130><c> language</c><00:04:09.370><c> kind</c><00:04:09.820><c> of</c>

00:04:09.900 --> 00:04:09.910 align:start position:0%
unfortunately the Java language kind of
 

00:04:09.910 --> 00:04:11.940 align:start position:0%
unfortunately the Java language kind of
gives<00:04:10.209><c> up</c><00:04:10.420><c> once</c><00:04:10.840><c> your</c><00:04:11.020><c> program</c><00:04:11.500><c> is</c><00:04:11.650><c> bigger</c>

00:04:11.940 --> 00:04:11.950 align:start position:0%
gives up once your program is bigger
 

00:04:11.950 --> 00:04:15.420 align:start position:0%
gives up once your program is bigger
than<00:04:12.670><c> a</c><00:04:12.790><c> single</c><00:04:12.970><c> package</c><00:04:13.830><c> just</c><00:04:14.830><c> imagine</c><00:04:15.280><c> how</c>

00:04:15.420 --> 00:04:15.430 align:start position:0%
than a single package just imagine how
 

00:04:15.430 --> 00:04:17.490 align:start position:0%
than a single package just imagine how
difficult<00:04:15.670><c> it</c><00:04:16.060><c> is</c><00:04:16.120><c> to</c><00:04:16.180><c> control</c><00:04:16.630><c> reuse</c><00:04:17.140><c> within</c>

00:04:17.490 --> 00:04:17.500 align:start position:0%
difficult it is to control reuse within
 

00:04:17.500 --> 00:04:20.099 align:start position:0%
difficult it is to control reuse within
a<00:04:17.590><c> really</c><00:04:17.799><c> large</c><00:04:18.160><c> code</c><00:04:18.459><c> base</c><00:04:18.700><c> it</c><00:04:19.570><c> says</c><00:04:19.840><c> here</c>

00:04:20.099 --> 00:04:20.109 align:start position:0%
a really large code base it says here
 

00:04:20.109 --> 00:04:24.060 align:start position:0%
a really large code base it says here
like<00:04:20.590><c> the</c><00:04:20.880><c> 217</c><00:04:21.880><c> official</c><00:04:22.330><c> packages</c><00:04:22.840><c> in</c><00:04:23.110><c> JDK</c><00:04:23.890><c> 8</c>

00:04:24.060 --> 00:04:24.070 align:start position:0%
like the 217 official packages in JDK 8
 

00:04:24.070 --> 00:04:28.350 align:start position:0%
like the 217 official packages in JDK 8
but<00:04:24.400><c> what's</c><00:04:24.580><c> 217</c><00:04:25.560><c> to</c><00:04:26.560><c> your</c><00:04:26.740><c> codebase</c>

00:04:28.350 --> 00:04:28.360 align:start position:0%
but what's 217 to your codebase
 

00:04:28.360 --> 00:04:32.310 align:start position:0%
but what's 217 to your codebase
the<00:04:29.360><c> only</c><00:04:29.660><c> way</c><00:04:29.840><c> to</c><00:04:30.740><c> share</c><00:04:31.040><c> code</c><00:04:31.430><c> between</c>

00:04:32.310 --> 00:04:32.320 align:start position:0%
the only way to share code between
 

00:04:32.320 --> 00:04:35.770 align:start position:0%
the only way to share code between
packages<00:04:33.320><c> is</c><00:04:33.620><c> with</c><00:04:34.160><c> the</c><00:04:34.280><c> public</c><00:04:34.670><c> modifier</c><00:04:35.120><c> but</c>

00:04:35.770 --> 00:04:35.780 align:start position:0%
packages is with the public modifier but
 

00:04:35.780 --> 00:04:37.650 align:start position:0%
packages is with the public modifier but
then<00:04:35.990><c> you're</c><00:04:36.170><c> sharing</c><00:04:36.650><c> it</c><00:04:36.770><c> with</c><00:04:36.800><c> everyone</c>

00:04:37.650 --> 00:04:37.660 align:start position:0%
then you're sharing it with everyone
 

00:04:37.660 --> 00:04:40.030 align:start position:0%
then you're sharing it with everyone
it's<00:04:38.660><c> not</c><00:04:38.840><c> surprising</c><00:04:39.050><c> that</c><00:04:39.470><c> packaged</c>

00:04:40.030 --> 00:04:40.040 align:start position:0%
it's not surprising that packaged
 

00:04:40.040 --> 00:04:42.220 align:start position:0%
it's not surprising that packaged
friendship<00:04:40.790><c> in</c><00:04:40.970><c> one</c><00:04:41.270><c> form</c><00:04:41.570><c> or</c><00:04:41.720><c> another</c><00:04:41.780><c> has</c>

00:04:42.220 --> 00:04:42.230 align:start position:0%
friendship in one form or another has
 

00:04:42.230 --> 00:04:44.050 align:start position:0%
friendship in one form or another has
been<00:04:42.350><c> requested</c><00:04:42.920><c> many</c><00:04:43.130><c> times</c><00:04:43.460><c> over</c><00:04:43.670><c> the</c><00:04:43.850><c> years</c>

00:04:44.050 --> 00:04:44.060 align:start position:0%
been requested many times over the years
 

00:04:44.060 --> 00:04:47.170 align:start position:0%
been requested many times over the years
a<00:04:44.650><c> package</c><00:04:45.650><c> is</c><00:04:45.800><c> a</c><00:04:45.830><c> a</c><00:04:46.130><c> great</c><00:04:46.670><c> way</c><00:04:46.880><c> to</c><00:04:46.910><c> organize</c>

00:04:47.170 --> 00:04:47.180 align:start position:0%
a package is a a great way to organize
 

00:04:47.180 --> 00:04:49.780 align:start position:0%
a package is a a great way to organize
classes<00:04:47.690><c> but</c><00:04:48.500><c> most</c><00:04:48.680><c> people</c><00:04:49.010><c> wish</c><00:04:49.430><c> there</c><00:04:49.640><c> was</c><00:04:49.760><c> a</c>

00:04:49.780 --> 00:04:49.790 align:start position:0%
classes but most people wish there was a
 

00:04:49.790 --> 00:04:55.000 align:start position:0%
classes but most people wish there was a
way<00:04:49.940><c> to</c><00:04:50.000><c> organize</c><00:04:50.240><c> packages</c><00:04:51.230><c> to</c><00:04:53.740><c> modules</c><00:04:54.740><c> let</c>

00:04:55.000 --> 00:04:55.010 align:start position:0%
way to organize packages to modules let
 

00:04:55.010 --> 00:04:57.580 align:start position:0%
way to organize packages to modules let
you<00:04:55.190><c> do</c><00:04:55.370><c> that</c><00:04:55.550><c> a</c><00:04:55.910><c> module</c><00:04:56.720><c> is</c><00:04:57.050><c> a</c><00:04:57.080><c> set</c><00:04:57.440><c> of</c>

00:04:57.580 --> 00:04:57.590 align:start position:0%
you do that a module is a set of
 

00:04:57.590 --> 00:05:01.270 align:start position:0%
you do that a module is a set of
packages<00:04:58.090><c> designed</c><00:04:59.090><c> for</c><00:04:59.300><c> reuse</c><00:05:00.070><c> this</c><00:05:01.070><c> is</c><00:05:01.250><c> a</c>

00:05:01.270 --> 00:05:01.280 align:start position:0%
packages designed for reuse this is a
 

00:05:01.280 --> 00:05:03.550 align:start position:0%
packages designed for reuse this is a
long<00:05:01.640><c> overdue</c><00:05:02.180><c> building</c><00:05:02.720><c> block</c><00:05:02.930><c> in</c><00:05:03.170><c> the</c><00:05:03.350><c> java</c>

00:05:03.550 --> 00:05:03.560 align:start position:0%
long overdue building block in the java
 

00:05:03.560 --> 00:05:06.670 align:start position:0%
long overdue building block in the java
language<00:05:03.740><c> in</c><00:05:04.340><c> effect</c><00:05:05.030><c> modules</c><00:05:05.780><c> record</c><00:05:06.350><c> the</c>

00:05:06.670 --> 00:05:06.680 align:start position:0%
language in effect modules record the
 

00:05:06.680 --> 00:05:09.010 align:start position:0%
language in effect modules record the
structure<00:05:07.250><c> of</c><00:05:07.400><c> your</c><00:05:07.550><c> program</c><00:05:08.060><c> so</c><00:05:08.750><c> that</c><00:05:08.930><c> the</c>

00:05:09.010 --> 00:05:09.020 align:start position:0%
structure of your program so that the
 

00:05:09.020 --> 00:05:11.650 align:start position:0%
structure of your program so that the
packages<00:05:09.530><c> you</c><00:05:09.710><c> want</c><00:05:10.040><c> to</c><00:05:10.280><c> be</c><00:05:10.400><c> reused</c><00:05:10.940><c> can</c><00:05:11.420><c> be</c>

00:05:11.650 --> 00:05:11.660 align:start position:0%
packages you want to be reused can be
 

00:05:11.660 --> 00:05:12.430 align:start position:0%
packages you want to be reused can be
reused

00:05:12.430 --> 00:05:12.440 align:start position:0%
reused
 

00:05:12.440 --> 00:05:14.800 align:start position:0%
reused
while<00:05:12.860><c> the</c><00:05:13.040><c> packages</c><00:05:13.520><c> you</c><00:05:13.670><c> don't</c><00:05:14.000><c> want</c><00:05:14.540><c> to</c><00:05:14.660><c> be</c>

00:05:14.800 --> 00:05:14.810 align:start position:0%
while the packages you don't want to be
 

00:05:14.810 --> 00:05:19.300 align:start position:0%
while the packages you don't want to be
reused<00:05:15.320><c> can't</c><00:05:16.100><c> be</c><00:05:16.610><c> reused</c><00:05:17.060><c> a</c><00:05:17.860><c> program</c><00:05:18.860><c> built</c>

00:05:19.300 --> 00:05:19.310 align:start position:0%
reused can't be reused a program built
 

00:05:19.310 --> 00:05:21.760 align:start position:0%
reused can't be reused a program built
of<00:05:19.580><c> modules</c><00:05:20.060><c> will</c><00:05:20.330><c> be</c><00:05:20.360><c> more</c><00:05:20.660><c> reliable</c><00:05:21.200><c> than</c><00:05:21.650><c> a</c>

00:05:21.760 --> 00:05:21.770 align:start position:0%
of modules will be more reliable than a
 

00:05:21.770 --> 00:05:23.860 align:start position:0%
of modules will be more reliable than a
program<00:05:22.190><c> built</c><00:05:22.700><c> from</c><00:05:23.000><c> a</c><00:05:23.090><c> loose</c><00:05:23.330><c> set</c><00:05:23.750><c> of</c>

00:05:23.860 --> 00:05:23.870 align:start position:0%
program built from a loose set of
 

00:05:23.870 --> 00:05:26.110 align:start position:0%
program built from a loose set of
packages<00:05:24.380><c> in</c><00:05:24.590><c> jar</c><00:05:24.800><c> files</c><00:05:25.040><c> that</c><00:05:25.790><c> can</c><00:05:25.940><c> access</c>

00:05:26.110 --> 00:05:26.120 align:start position:0%
packages in jar files that can access
 

00:05:26.120 --> 00:05:28.210 align:start position:0%
packages in jar files that can access
each<00:05:26.450><c> other</c><00:05:26.660><c> freely</c><00:05:27.110><c> and</c><00:05:27.440><c> that</c><00:05:27.500><c> exposed</c><00:05:28.040><c> to</c>

00:05:28.210 --> 00:05:28.220 align:start position:0%
each other freely and that exposed to
 

00:05:28.220 --> 00:05:32.010 align:start position:0%
each other freely and that exposed to
many<00:05:28.400><c> AP</c><00:05:28.700><c> is</c><00:05:28.850><c> to</c><00:05:29.210><c> the</c><00:05:29.300><c> outside</c><00:05:29.690><c> world</c>

00:05:32.010 --> 00:05:32.020 align:start position:0%
 
 

00:05:32.020 --> 00:05:36.220 align:start position:0%
 
in<00:05:33.020><c> other</c><00:05:33.200><c> words</c><00:05:33.470><c> in</c><00:05:34.040><c> jetty</c><00:05:34.640><c> canine</c><00:05:35.230><c> packet</c>

00:05:36.220 --> 00:05:36.230 align:start position:0%
in other words in jetty canine packet
 

00:05:36.230 --> 00:05:42.610 align:start position:0%
in other words in jetty canine packet
our<00:05:36.320><c> programs</c><00:05:36.800><c> are</c><00:05:37.150><c> modules</c><00:05:41.230><c> here's</c><00:05:42.230><c> a</c><00:05:42.290><c> module</c>

00:05:42.610 --> 00:05:42.620 align:start position:0%
our programs are modules here's a module
 

00:05:42.620 --> 00:05:44.800 align:start position:0%
our programs are modules here's a module
that<00:05:43.010><c> everyone</c><00:05:43.580><c> will</c><00:05:43.790><c> soon</c><00:05:44.030><c> be</c><00:05:44.270><c> familiar</c><00:05:44.630><c> with</c>

00:05:44.800 --> 00:05:44.810 align:start position:0%
that everyone will soon be familiar with
 

00:05:44.810 --> 00:05:48.670 align:start position:0%
that everyone will soon be familiar with
Java<00:05:45.590><c> base</c><00:05:46.240><c> it's</c><00:05:47.240><c> the</c><00:05:47.450><c> foundation</c><00:05:47.780><c> of</c><00:05:48.140><c> every</c>

00:05:48.670 --> 00:05:48.680 align:start position:0%
Java base it's the foundation of every
 

00:05:48.680 --> 00:05:50.920 align:start position:0%
Java base it's the foundation of every
Java<00:05:48.890><c> program</c><00:05:49.310><c> like</c><00:05:49.730><c> java.lang</c><00:05:50.360><c> object</c><00:05:50.780><c> is</c>

00:05:50.920 --> 00:05:50.930 align:start position:0%
Java program like java.lang object is
 

00:05:50.930 --> 00:05:54.580 align:start position:0%
Java program like java.lang object is
the<00:05:51.050><c> root</c><00:05:51.230><c> of</c><00:05:51.320><c> every</c><00:05:51.530><c> class</c><00:05:52.480><c> in</c><00:05:53.480><c> blue</c><00:05:53.960><c> are</c><00:05:54.350><c> the</c>

00:05:54.580 --> 00:05:54.590 align:start position:0%
the root of every class in blue are the
 

00:05:54.590 --> 00:05:57.010 align:start position:0%
the root of every class in blue are the
packages<00:05:55.100><c> of</c><00:05:55.250><c> Java</c><00:05:55.490><c> base</c><00:05:55.760><c> intended</c><00:05:56.660><c> for</c><00:05:56.840><c> use</c>

00:05:57.010 --> 00:05:57.020 align:start position:0%
packages of Java base intended for use
 

00:05:57.020 --> 00:06:00.300 align:start position:0%
packages of Java base intended for use
by<00:05:57.050><c> code</c><00:05:57.590><c> outside</c><00:05:58.220><c> the</c><00:05:58.820><c> module</c><00:05:58.970><c> these</c><00:05:59.750><c> are</c><00:05:59.960><c> its</c>

00:06:00.300 --> 00:06:00.310 align:start position:0%
by code outside the module these are its
 

00:06:00.310 --> 00:06:04.150 align:start position:0%
by code outside the module these are its
exported<00:06:01.310><c> packages</c><00:06:02.110><c> in</c><00:06:03.110><c> red</c><00:06:03.440><c> are</c><00:06:03.680><c> the</c>

00:06:04.150 --> 00:06:04.160 align:start position:0%
exported packages in red are the
 

00:06:04.160 --> 00:06:07.390 align:start position:0%
exported packages in red are the
packages<00:06:04.640><c> internal</c><00:06:05.600><c> to</c><00:06:05.990><c> Java</c><00:06:06.200><c> base</c><00:06:06.410><c> they</c><00:06:07.190><c> can</c>

00:06:07.390 --> 00:06:07.400 align:start position:0%
packages internal to Java base they can
 

00:06:07.400 --> 00:06:09.850 align:start position:0%
packages internal to Java base they can
be<00:06:07.520><c> used</c><00:06:07.730><c> by</c><00:06:07.910><c> code</c><00:06:08.150><c> inside</c><00:06:08.510><c> the</c><00:06:08.870><c> module</c><00:06:09.350><c> but</c>

00:06:09.850 --> 00:06:09.860 align:start position:0%
be used by code inside the module but
 

00:06:09.860 --> 00:06:12.490 align:start position:0%
be used by code inside the module but
not<00:06:10.010><c> by</c><00:06:10.160><c> code</c><00:06:10.430><c> outside</c><00:06:10.820><c> the</c><00:06:11.270><c> module</c><00:06:11.390><c> these</c><00:06:12.350><c> are</c>

00:06:12.490 --> 00:06:12.500 align:start position:0%
not by code outside the module these are
 

00:06:12.500 --> 00:06:16.600 align:start position:0%
not by code outside the module these are
its<00:06:12.710><c> conceals</c><00:06:13.570><c> packages</c><00:06:14.570><c> a</c><00:06:15.460><c> module</c><00:06:16.460><c> is</c>

00:06:16.600 --> 00:06:16.610 align:start position:0%
its conceals packages a module is
 

00:06:16.610 --> 00:06:18.850 align:start position:0%
its conceals packages a module is
declared<00:06:17.000><c> in</c><00:06:17.270><c> a</c><00:06:17.660><c> new</c><00:06:17.840><c> kind</c><00:06:18.110><c> of</c><00:06:18.230><c> file</c><00:06:18.440><c> called</c>

00:06:18.850 --> 00:06:18.860 align:start position:0%
declared in a new kind of file called
 

00:06:18.860 --> 00:06:21.610 align:start position:0%
declared in a new kind of file called
module<00:06:19.490><c> in</c><00:06:19.580><c> photo</c><00:06:19.760><c> Java</c><00:06:20.110><c> it</c><00:06:21.110><c> gives</c><00:06:21.350><c> the</c><00:06:21.500><c> name</c>

00:06:21.610 --> 00:06:21.620 align:start position:0%
module in photo Java it gives the name
 

00:06:21.620 --> 00:06:23.940 align:start position:0%
module in photo Java it gives the name
of<00:06:21.800><c> the</c><00:06:21.890><c> module</c><00:06:22.040><c> and</c><00:06:22.430><c> its</c><00:06:22.670><c> exported</c><00:06:23.300><c> packages</c>

00:06:23.940 --> 00:06:23.950 align:start position:0%
of the module and its exported packages
 

00:06:23.950 --> 00:06:27.100 align:start position:0%
of the module and its exported packages
by<00:06:24.950><c> exporting</c><00:06:25.580><c> the</c><00:06:25.730><c> java.lang</c><00:06:26.180><c> package</c><00:06:26.210><c> it</c>

00:06:27.100 --> 00:06:27.110 align:start position:0%
by exporting the java.lang package it
 

00:06:27.110 --> 00:06:28.900 align:start position:0%
by exporting the java.lang package it
means<00:06:27.380><c> that</c><00:06:27.590><c> the</c><00:06:27.680><c> public</c><00:06:27.950><c> classes</c><00:06:28.580><c> of</c>

00:06:28.900 --> 00:06:28.910 align:start position:0%
means that the public classes of
 

00:06:28.910 --> 00:06:30.850 align:start position:0%
means that the public classes of
java.lang<00:06:29.390><c> are</c><00:06:29.660><c> accessible</c><00:06:30.380><c> from</c><00:06:30.710><c> outside</c>

00:06:30.850 --> 00:06:30.860 align:start position:0%
java.lang are accessible from outside
 

00:06:30.860 --> 00:06:33.730 align:start position:0%
java.lang are accessible from outside
java<00:06:31.340><c> base</c><00:06:31.550><c> and</c><00:06:31.910><c> a</c><00:06:32.720><c> package</c><00:06:33.110><c> that</c><00:06:33.350><c> is</c><00:06:33.440><c> not</c>

00:06:33.730 --> 00:06:33.740 align:start position:0%
java base and a package that is not
 

00:06:33.740 --> 00:06:36.700 align:start position:0%
java base and a package that is not
explicitly<00:06:34.570><c> exported</c><00:06:35.570><c> such</c><00:06:35.870><c> as</c><00:06:36.050><c> calm</c><00:06:36.350><c> sun</c>

00:06:36.700 --> 00:06:36.710 align:start position:0%
explicitly exported such as calm sun
 

00:06:36.710 --> 00:06:39.940 align:start position:0%
explicitly exported such as calm sun
crypto<00:06:37.220><c> provider</c><00:06:37.610><c> is</c><00:06:37.880><c> concealed</c><00:06:38.560><c> its</c><00:06:39.560><c> public</c>

00:06:39.940 --> 00:06:39.950 align:start position:0%
crypto provider is concealed its public
 

00:06:39.950 --> 00:06:41.790 align:start position:0%
crypto provider is concealed its public
classes<00:06:40.190><c> are</c><00:06:40.610><c> not</c><00:06:41.030><c> access</c>

00:06:41.790 --> 00:06:41.800 align:start position:0%
classes are not access
 

00:06:41.800 --> 00:06:45.540 align:start position:0%
classes are not access
table<00:06:42.039><c> outside</c><00:06:42.610><c> Java</c><00:06:43.090><c> base</c><00:06:44.159><c> so</c><00:06:45.159><c> this</c><00:06:45.280><c> is</c><00:06:45.430><c> the</c>

00:06:45.540 --> 00:06:45.550 align:start position:0%
table outside Java base so this is the
 

00:06:45.550 --> 00:06:47.969 align:start position:0%
table outside Java base so this is the
first<00:06:45.759><c> feature</c><00:06:46.090><c> of</c><00:06:46.330><c> modules</c><00:06:46.750><c> in</c><00:06:46.870><c> JDK</c><00:06:47.169><c> 9</c><00:06:47.349><c> strong</c>

00:06:47.969 --> 00:06:47.979 align:start position:0%
first feature of modules in JDK 9 strong
 

00:06:47.979 --> 00:06:51.360 align:start position:0%
first feature of modules in JDK 9 strong
encapsulation<00:06:48.699><c> a</c><00:06:49.060><c> module</c><00:06:49.960><c> isn't</c><00:06:50.379><c> just</c><00:06:50.979><c> a</c><00:06:51.220><c> set</c>

00:06:51.360 --> 00:06:51.370 align:start position:0%
encapsulation a module isn't just a set
 

00:06:51.370 --> 00:06:53.760 align:start position:0%
encapsulation a module isn't just a set
of<00:06:51.400><c> packages</c><00:06:51.940><c> it's</c><00:06:52.479><c> a</c><00:06:52.629><c> set</c><00:06:52.810><c> of</c><00:06:52.930><c> exported</c>

00:06:53.760 --> 00:06:53.770 align:start position:0%
of packages it's a set of exported
 

00:06:53.770 --> 00:06:56.820 align:start position:0%
of packages it's a set of exported
packages<00:06:54.220><c> and</c><00:06:54.430><c> concealed</c><00:06:55.300><c> packages</c><00:06:55.930><c> the</c>

00:06:56.820 --> 00:06:56.830 align:start position:0%
packages and concealed packages the
 

00:06:56.830 --> 00:06:58.980 align:start position:0%
packages and concealed packages the
public<00:06:57.220><c> classes</c><00:06:57.490><c> of</c><00:06:57.789><c> exported</c><00:06:58.270><c> packages</c><00:06:58.780><c> are</c>

00:06:58.980 --> 00:06:58.990 align:start position:0%
public classes of exported packages are
 

00:06:58.990 --> 00:07:01.770 align:start position:0%
public classes of exported packages are
accessible<00:06:59.590><c> outside</c><00:06:59.979><c> the</c><00:07:00.099><c> module</c><00:07:00.419><c> the</c><00:07:01.419><c> public</c>

00:07:01.770 --> 00:07:01.780 align:start position:0%
accessible outside the module the public
 

00:07:01.780 --> 00:07:04.499 align:start position:0%
accessible outside the module the public
classes<00:07:01.990><c> of</c><00:07:02.289><c> concealed</c><00:07:02.949><c> packages</c><00:07:03.639><c> are</c><00:07:03.879><c> not</c>

00:07:04.499 --> 00:07:04.509 align:start position:0%
classes of concealed packages are not
 

00:07:04.509 --> 00:07:08.390 align:start position:0%
classes of concealed packages are not
accessible<00:07:05.050><c> outside</c><00:07:05.680><c> the</c><00:07:06.129><c> module</c>

00:07:08.390 --> 00:07:08.400 align:start position:0%
accessible outside the module
 

00:07:08.400 --> 00:07:11.010 align:start position:0%
accessible outside the module
this<00:07:09.400><c> means</c><00:07:09.639><c> that</c><00:07:09.759><c> access</c><00:07:10.270><c> control</c><00:07:10.720><c> is</c><00:07:10.870><c> more</c>

00:07:11.010 --> 00:07:11.020 align:start position:0%
this means that access control is more
 

00:07:11.020 --> 00:07:14.339 align:start position:0%
this means that access control is more
powerful<00:07:11.440><c> in</c><00:07:11.740><c> JDK</c><00:07:12.159><c> 9</c><00:07:12.370><c> than</c><00:07:13.030><c> in</c><00:07:13.120><c> JDK</c><00:07:13.479><c> 8</c><00:07:13.509><c> in</c>

00:07:14.339 --> 00:07:14.349 align:start position:0%
powerful in JDK 9 than in JDK 8 in
 

00:07:14.349 --> 00:07:17.159 align:start position:0%
powerful in JDK 9 than in JDK 8 in
jeddah<00:07:15.039><c> k9</c><00:07:15.370><c> you</c><00:07:15.879><c> can</c><00:07:16.060><c> arrange</c><00:07:16.330><c> for</c><00:07:16.539><c> public</c>

00:07:17.159 --> 00:07:17.169 align:start position:0%
jeddah k9 you can arrange for public
 

00:07:17.169 --> 00:07:19.550 align:start position:0%
jeddah k9 you can arrange for public
classes<00:07:17.440><c> to</c><00:07:17.800><c> be</c><00:07:17.889><c> accessible</c><00:07:18.370><c> to</c><00:07:18.610><c> everyone</c><00:07:18.879><c> or</c>

00:07:19.550 --> 00:07:19.560 align:start position:0%
classes to be accessible to everyone or
 

00:07:19.560 --> 00:07:21.899 align:start position:0%
classes to be accessible to everyone or
accessible<00:07:20.560><c> only</c><00:07:20.740><c> to</c><00:07:21.009><c> other</c><00:07:21.159><c> classes</c><00:07:21.669><c> in</c><00:07:21.819><c> the</c>

00:07:21.899 --> 00:07:21.909 align:start position:0%
accessible only to other classes in the
 

00:07:21.909 --> 00:07:24.629 align:start position:0%
accessible only to other classes in the
same<00:07:22.090><c> module</c><00:07:22.379><c> or</c><00:07:23.379><c> sort</c><00:07:23.860><c> of</c><00:07:23.889><c> a</c><00:07:23.979><c> halfway</c><00:07:24.400><c> house</c>

00:07:24.629 --> 00:07:24.639 align:start position:0%
same module or sort of a halfway house
 

00:07:24.639 --> 00:07:26.279 align:start position:0%
same module or sort of a halfway house
where<00:07:24.669><c> they're</c><00:07:25.120><c> accessible</c><00:07:25.419><c> to</c><00:07:25.719><c> classes</c><00:07:26.139><c> in</c>

00:07:26.279 --> 00:07:26.289 align:start position:0%
where they're accessible to classes in
 

00:07:26.289 --> 00:07:28.379 align:start position:0%
where they're accessible to classes in
the<00:07:26.650><c> same</c><00:07:26.889><c> module</c><00:07:27.069><c> and</c><00:07:27.550><c> a</c><00:07:27.639><c> limited</c><00:07:28.120><c> set</c><00:07:28.360><c> of</c>

00:07:28.379 --> 00:07:28.389 align:start position:0%
the same module and a limited set of
 

00:07:28.389 --> 00:07:32.010 align:start position:0%
the same module and a limited set of
friend<00:07:28.900><c> modules</c><00:07:29.759><c> so</c><00:07:30.759><c> if</c><00:07:31.120><c> we're</c><00:07:31.599><c> looking</c><00:07:31.719><c> at</c>

00:07:32.010 --> 00:07:32.020 align:start position:0%
friend modules so if we're looking at
 

00:07:32.020 --> 00:07:35.100 align:start position:0%
friend modules so if we're looking at
public<00:07:32.770><c> on</c><00:07:33.159><c> a</c><00:07:33.430><c> class</c><00:07:33.699><c> declaration</c><00:07:34.389><c> it</c><00:07:34.840><c> no</c>

00:07:35.100 --> 00:07:35.110 align:start position:0%
public on a class declaration it no
 

00:07:35.110 --> 00:07:37.379 align:start position:0%
public on a class declaration it no
longer<00:07:35.560><c> means</c><00:07:35.770><c> that</c><00:07:36.129><c> everyone</c><00:07:36.669><c> can</c><00:07:37.240><c> access</c>

00:07:37.379 --> 00:07:37.389 align:start position:0%
longer means that everyone can access
 

00:07:37.389 --> 00:07:40.950 align:start position:0%
longer means that everyone can access
the<00:07:38.169><c> class</c><00:07:38.909><c> access</c><00:07:39.909><c> depends</c><00:07:40.419><c> on</c><00:07:40.539><c> whether</c><00:07:40.719><c> the</c>

00:07:40.950 --> 00:07:40.960 align:start position:0%
the class access depends on whether the
 

00:07:40.960 --> 00:07:43.920 align:start position:0%
the class access depends on whether the
class's<00:07:41.469><c> module</c><00:07:42.270><c> exports</c><00:07:43.270><c> the</c><00:07:43.419><c> class's</c>

00:07:43.920 --> 00:07:43.930 align:start position:0%
class's module exports the class's
 

00:07:43.930 --> 00:07:49.279 align:start position:0%
class's module exports the class's
package

00:07:49.279 --> 00:07:49.289 align:start position:0%
 
 

00:07:49.289 --> 00:07:52.559 align:start position:0%
 
since<00:07:50.289><c> Java</c><00:07:50.590><c> base</c><00:07:50.860><c> is</c><00:07:51.219><c> a</c><00:07:51.279><c> module</c><00:07:51.729><c> let's</c><00:07:52.090><c> reuse</c>

00:07:52.559 --> 00:07:52.569 align:start position:0%
since Java base is a module let's reuse
 

00:07:52.569 --> 00:07:56.100 align:start position:0%
since Java base is a module let's reuse
it<00:07:52.779><c> with</c><00:07:53.349><c> the</c><00:07:53.440><c> module</c><00:07:53.800><c> of</c><00:07:54.009><c> our</c><00:07:54.400><c> own</c><00:07:55.020><c> here's</c><00:07:56.020><c> a</c>

00:07:56.100 --> 00:07:56.110 align:start position:0%
it with the module of our own here's a
 

00:07:56.110 --> 00:07:58.820 align:start position:0%
it with the module of our own here's a
class<00:07:56.409><c> in</c><00:07:56.770><c> the</c><00:07:57.130><c> package</c><00:07:57.550><c> comm</c><00:07:57.849><c> example</c><00:07:58.300><c> hello</c>

00:07:58.820 --> 00:07:58.830 align:start position:0%
class in the package comm example hello
 

00:07:58.830 --> 00:08:01.830 align:start position:0%
class in the package comm example hello
very<00:07:59.830><c> simple</c><00:08:00.130><c> class</c><00:08:00.310><c> and</c><00:08:00.789><c> let's</c><00:08:01.270><c> declare</c><00:08:01.449><c> a</c>

00:08:01.830 --> 00:08:01.840 align:start position:0%
very simple class and let's declare a
 

00:08:01.840 --> 00:08:04.110 align:start position:0%
very simple class and let's declare a
module<00:08:02.229><c> for</c><00:08:02.500><c> it</c><00:08:02.650><c> hello</c><00:08:03.039><c> world</c><00:08:03.069><c> at</c><00:08:03.699><c> the</c><00:08:03.849><c> bottom</c>

00:08:04.110 --> 00:08:04.120 align:start position:0%
module for it hello world at the bottom
 

00:08:04.120 --> 00:08:07.860 align:start position:0%
module for it hello world at the bottom
in<00:08:04.529><c> module</c><00:08:05.529><c> in</c><00:08:05.620><c> photo</c><00:08:05.800><c> Java</c><00:08:06.630><c> for</c><00:08:07.630><c> sake</c><00:08:07.750><c> of</c>

00:08:07.860 --> 00:08:07.870 align:start position:0%
in module in photo Java for sake of
 

00:08:07.870 --> 00:08:09.959 align:start position:0%
in module in photo Java for sake of
argument<00:08:08.259><c> let's</c><00:08:08.409><c> export</c><00:08:09.130><c> the</c><00:08:09.310><c> calm</c><00:08:09.490><c> example</c>

00:08:09.959 --> 00:08:09.969 align:start position:0%
argument let's export the calm example
 

00:08:09.969 --> 00:08:13.249 align:start position:0%
argument let's export the calm example
hello<00:08:10.180><c> package</c><00:08:10.629><c> with</c><00:08:11.379><c> the</c><00:08:11.590><c> exports</c><00:08:12.279><c> directive</c>

00:08:13.249 --> 00:08:13.259 align:start position:0%
hello package with the exports directive
 

00:08:13.259 --> 00:08:17.040 align:start position:0%
hello package with the exports directive
now<00:08:14.259><c> you're</c><00:08:14.409><c> probably</c><00:08:14.710><c> wondering</c><00:08:15.990><c> how</c><00:08:16.990><c> the</c>

00:08:17.040 --> 00:08:17.050 align:start position:0%
now you're probably wondering how the
 

00:08:17.050 --> 00:08:20.249 align:start position:0%
now you're probably wondering how the
hello<00:08:17.500><c> world</c><00:08:17.800><c> module</c><00:08:18.219><c> knows</c><00:08:19.060><c> that</c><00:08:19.900><c> it</c><00:08:20.050><c> has</c><00:08:20.080><c> a</c>

00:08:20.249 --> 00:08:20.259 align:start position:0%
hello world module knows that it has a
 

00:08:20.259 --> 00:08:22.890 align:start position:0%
hello world module knows that it has a
package<00:08:20.800><c> called</c><00:08:21.400><c> comm</c><00:08:21.669><c> example</c><00:08:22.150><c> hello</c><00:08:22.419><c> after</c>

00:08:22.890 --> 00:08:22.900 align:start position:0%
package called comm example hello after
 

00:08:22.900 --> 00:08:25.350 align:start position:0%
package called comm example hello after
all<00:08:23.229><c> nothing</c><00:08:23.440><c> in</c><00:08:23.740><c> the</c><00:08:23.889><c> package</c><00:08:24.400><c> seems</c><00:08:25.150><c> to</c>

00:08:25.350 --> 00:08:25.360 align:start position:0%
all nothing in the package seems to
 

00:08:25.360 --> 00:08:30.059 align:start position:0%
all nothing in the package seems to
point<00:08:25.599><c> to</c><00:08:26.020><c> the</c><00:08:26.139><c> hello</c><00:08:26.409><c> world</c><00:08:26.680><c> module</c><00:08:28.860><c> it's</c><00:08:29.860><c> up</c>

00:08:30.059 --> 00:08:30.069 align:start position:0%
point to the hello world module it's up
 

00:08:30.069 --> 00:08:32.189 align:start position:0%
point to the hello world module it's up
to<00:08:30.279><c> the</c><00:08:30.400><c> tooling</c><00:08:30.879><c> to</c><00:08:31.449><c> decide</c><00:08:31.779><c> during</c>

00:08:32.189 --> 00:08:32.199 align:start position:0%
to the tooling to decide during
 

00:08:32.199 --> 00:08:35.339 align:start position:0%
to the tooling to decide during
developments<00:08:32.949><c> which</c><00:08:33.789><c> module</c><00:08:34.240><c> each</c><00:08:34.659><c> package</c>

00:08:35.339 --> 00:08:35.349 align:start position:0%
developments which module each package
 

00:08:35.349 --> 00:08:38.430 align:start position:0%
developments which module each package
belongs<00:08:35.740><c> to</c><00:08:36.010><c> in</c><00:08:36.510><c> practice</c><00:08:37.510><c> your</c><00:08:37.779><c> ID</c><00:08:37.959><c> will</c><00:08:38.260><c> take</c>

00:08:38.430 --> 00:08:38.440 align:start position:0%
belongs to in practice your ID will take
 

00:08:38.440 --> 00:08:40.620 align:start position:0%
belongs to in practice your ID will take
care<00:08:38.649><c> of</c><00:08:38.800><c> it</c><00:08:38.949><c> you'll</c><00:08:39.459><c> create</c><00:08:39.789><c> a</c><00:08:39.880><c> modular</c><00:08:40.390><c> java</c>

00:08:40.620 --> 00:08:40.630 align:start position:0%
care of it you'll create a modular java
 

00:08:40.630 --> 00:08:42.630 align:start position:0%
care of it you'll create a modular java
application<00:08:41.320><c> and</c><00:08:41.529><c> be</c><00:08:41.649><c> asked</c><00:08:42.039><c> the</c><00:08:42.159><c> name</c><00:08:42.339><c> of</c><00:08:42.550><c> the</c>

00:08:42.630 --> 00:08:42.640 align:start position:0%
application and be asked the name of the
 

00:08:42.640 --> 00:08:45.060 align:start position:0%
application and be asked the name of the
module<00:08:42.940><c> then</c><00:08:43.870><c> every</c><00:08:44.199><c> package</c><00:08:44.560><c> you</c><00:08:44.680><c> create</c>

00:08:45.060 --> 00:08:45.070 align:start position:0%
module then every package you create
 

00:08:45.070 --> 00:08:46.470 align:start position:0%
module then every package you create
will<00:08:45.370><c> be</c><00:08:45.399><c> part</c><00:08:45.760><c> of</c><00:08:45.910><c> that</c><00:08:45.970><c> module</c>

00:08:46.470 --> 00:08:46.480 align:start position:0%
will be part of that module
 

00:08:46.480 --> 00:08:51.000 align:start position:0%
will be part of that module
if<00:08:47.260><c> you</c><00:08:47.740><c> run</c><00:08:47.949><c> Java</c><00:08:48.250><c> C</c><00:08:48.459><c> by</c><00:08:48.610><c> hand</c><00:08:49.560><c> then</c><00:08:50.560><c> Java</c><00:08:50.800><c> C</c>

00:08:51.000 --> 00:08:51.010 align:start position:0%
if you run Java C by hand then Java C
 

00:08:51.010 --> 00:08:53.519 align:start position:0%
if you run Java C by hand then Java C
figures<00:08:51.520><c> out</c><00:08:51.730><c> which</c><00:08:52.060><c> module</c><00:08:52.600><c> each</c><00:08:52.930><c> package</c><00:08:53.410><c> is</c>

00:08:53.519 --> 00:08:53.529 align:start position:0%
figures out which module each package is
 

00:08:53.529 --> 00:08:55.690 align:start position:0%
figures out which module each package is
in<00:08:53.709><c> that's</c><00:08:54.160><c> why</c><00:08:54.399><c> module</c><00:08:54.850><c> inferred</c>

00:08:55.690 --> 00:08:55.700 align:start position:0%
in that's why module inferred
 

00:08:55.700 --> 00:08:57.940 align:start position:0%
in that's why module inferred
is<00:08:56.180><c> at</c><00:08:56.660><c> the</c><00:08:56.690><c> same</c><00:08:56.960><c> level</c><00:08:56.990><c> as</c><00:08:57.620><c> the</c><00:08:57.770><c> comm</c>

00:08:57.940 --> 00:08:57.950 align:start position:0%
is at the same level as the comm
 

00:08:57.950 --> 00:09:00.130 align:start position:0%
is at the same level as the comm
directory<00:08:58.520><c> in</c><00:08:59.029><c> other</c><00:08:59.120><c> words</c><00:08:59.330><c> if</c><00:08:59.510><c> modern</c><00:09:00.020><c> I</c>

00:09:00.130 --> 00:09:00.140 align:start position:0%
directory in other words if modern I
 

00:09:00.140 --> 00:09:01.780 align:start position:0%
directory in other words if modern I
forgot<00:09:00.380><c> Java</c><00:09:00.620><c> is</c><00:09:00.860><c> at</c><00:09:01.010><c> the</c><00:09:01.100><c> same</c><00:09:01.279><c> level</c><00:09:01.610><c> as</c><00:09:01.700><c> the</c>

00:09:01.780 --> 00:09:01.790 align:start position:0%
forgot Java is at the same level as the
 

00:09:01.790 --> 00:09:03.610 align:start position:0%
forgot Java is at the same level as the
package<00:09:02.090><c> hierarchy</c><00:09:02.690><c> then</c><00:09:02.870><c> Java</c><00:09:03.110><c> C</c><00:09:03.350><c> treats</c>

00:09:03.610 --> 00:09:03.620 align:start position:0%
package hierarchy then Java C treats
 

00:09:03.620 --> 00:09:05.500 align:start position:0%
package hierarchy then Java C treats
those<00:09:03.860><c> all</c><00:09:04.460><c> those</c><00:09:04.670><c> source</c><00:09:04.940><c> files</c><00:09:05.180><c> as</c><00:09:05.360><c> one</c>

00:09:05.500 --> 00:09:05.510 align:start position:0%
those all those source files as one
 

00:09:05.510 --> 00:09:10.090 align:start position:0%
those all those source files as one
module<00:09:07.360><c> the</c><00:09:08.360><c> benefit</c><00:09:08.779><c> of</c><00:09:08.900><c> relying</c><00:09:09.260><c> on</c><00:09:09.470><c> tooling</c>

00:09:10.090 --> 00:09:10.100 align:start position:0%
module the benefit of relying on tooling
 

00:09:10.100 --> 00:09:12.820 align:start position:0%
module the benefit of relying on tooling
to<00:09:10.790><c> decide</c><00:09:11.090><c> module</c><00:09:11.510><c> membership</c><00:09:12.020><c> is</c><00:09:12.529><c> that</c><00:09:12.710><c> it's</c>

00:09:12.820 --> 00:09:12.830 align:start position:0%
to decide module membership is that it's
 

00:09:12.830 --> 00:09:15.100 align:start position:0%
to decide module membership is that it's
really<00:09:13.130><c> easy</c><00:09:13.160><c> to</c><00:09:13.490><c> place</c><00:09:13.850><c> an</c><00:09:14.029><c> existing</c><00:09:14.630><c> package</c>

00:09:15.100 --> 00:09:15.110 align:start position:0%
really easy to place an existing package
 

00:09:15.110 --> 00:09:17.200 align:start position:0%
really easy to place an existing package
in<00:09:15.260><c> a</c><00:09:15.350><c> module</c><00:09:15.680><c> and</c><00:09:15.920><c> immediately</c><00:09:16.850><c> give</c><00:09:17.029><c> that</c>

00:09:17.200 --> 00:09:17.210 align:start position:0%
in a module and immediately give that
 

00:09:17.210 --> 00:09:18.880 align:start position:0%
in a module and immediately give that
package<00:09:17.630><c> the</c><00:09:17.960><c> benefit</c><00:09:18.440><c> of</c><00:09:18.470><c> strong</c>

00:09:18.880 --> 00:09:18.890 align:start position:0%
package the benefit of strong
 

00:09:18.890 --> 00:09:19.780 align:start position:0%
package the benefit of strong
encapsulation

00:09:19.780 --> 00:09:19.790 align:start position:0%
encapsulation
 

00:09:19.790 --> 00:09:23.019 align:start position:0%
encapsulation
we<00:09:20.270><c> don't</c><00:09:20.480><c> want</c><00:09:20.750><c> each</c><00:09:20.960><c> and</c><00:09:21.290><c> every</c><00:09:21.529><c> class</c><00:09:22.029><c> like</c>

00:09:23.019 --> 00:09:23.029 align:start position:0%
we don't want each and every class like
 

00:09:23.029 --> 00:09:26.500 align:start position:0%
we don't want each and every class like
say<00:09:23.210><c> hello</c><00:09:23.480><c> to</c><00:09:24.170><c> have</c><00:09:24.320><c> to</c><00:09:24.440><c> opt</c><00:09:24.710><c> in</c><00:09:25.029><c> by</c><00:09:26.029><c> declaring</c>

00:09:26.500 --> 00:09:26.510 align:start position:0%
say hello to have to opt in by declaring
 

00:09:26.510 --> 00:09:28.480 align:start position:0%
say hello to have to opt in by declaring
the<00:09:26.660><c> module</c><00:09:27.020><c> it</c><00:09:27.170><c> belongs</c><00:09:27.440><c> to</c><00:09:27.529><c> that</c><00:09:28.310><c> would</c>

00:09:28.480 --> 00:09:28.490 align:start position:0%
the module it belongs to that would
 

00:09:28.490 --> 00:09:31.150 align:start position:0%
the module it belongs to that would
invite<00:09:28.790><c> errors</c><00:09:29.450><c> such</c><00:09:30.200><c> as</c><00:09:30.230><c> classes</c><00:09:30.890><c> in</c><00:09:31.040><c> the</c>

00:09:31.150 --> 00:09:31.160 align:start position:0%
invite errors such as classes in the
 

00:09:31.160 --> 00:09:33.850 align:start position:0%
invite errors such as classes in the
same<00:09:31.339><c> package</c><00:09:31.839><c> trying</c><00:09:32.839><c> to</c><00:09:32.990><c> join</c><00:09:33.200><c> different</c>

00:09:33.850 --> 00:09:33.860 align:start position:0%
same package trying to join different
 

00:09:33.860 --> 00:09:36.010 align:start position:0%
same package trying to join different
modules<00:09:34.250><c> and</c><00:09:34.670><c> that's</c><00:09:35.180><c> a</c><00:09:35.300><c> big</c><00:09:35.450><c> no-no</c><00:09:35.779><c> for</c>

00:09:36.010 --> 00:09:36.020 align:start position:0%
modules and that's a big no-no for
 

00:09:36.020 --> 00:09:41.110 align:start position:0%
modules and that's a big no-no for
reasons<00:09:36.410><c> I'll</c><00:09:36.620><c> mention</c><00:09:36.950><c> later</c><00:09:39.940><c> one</c><00:09:40.940><c> more</c>

00:09:41.110 --> 00:09:41.120 align:start position:0%
reasons I'll mention later one more
 

00:09:41.120 --> 00:09:46.150 align:start position:0%
reasons I'll mention later one more
thing<00:09:42.310><c> the</c><00:09:43.310><c> say</c><00:09:43.490><c> hello</c><00:09:43.610><c> class</c><00:09:44.440><c> imports</c><00:09:45.440><c> the</c>

00:09:46.150 --> 00:09:46.160 align:start position:0%
thing the say hello class imports the
 

00:09:46.160 --> 00:09:48.880 align:start position:0%
thing the say hello class imports the
java.lang<00:09:46.580><c> package</c><00:09:47.050><c> where</c><00:09:48.050><c> is</c><00:09:48.230><c> that</c><00:09:48.380><c> package</c>

00:09:48.880 --> 00:09:48.890 align:start position:0%
java.lang package where is that package
 

00:09:48.890 --> 00:09:52.900 align:start position:0%
java.lang package where is that package
imported<00:09:49.670><c> from</c><00:09:50.830><c> now</c><00:09:51.830><c> you</c><00:09:51.980><c> might</c><00:09:52.130><c> say</c><00:09:52.370><c> the</c>

00:09:52.900 --> 00:09:52.910 align:start position:0%
imported from now you might say the
 

00:09:52.910 --> 00:09:55.000 align:start position:0%
imported from now you might say the
answer<00:09:53.240><c> is</c><00:09:53.360><c> obviously</c><00:09:53.960><c> Java</c><00:09:54.320><c> base</c><00:09:54.560><c> because</c>

00:09:55.000 --> 00:09:55.010 align:start position:0%
answer is obviously Java base because
 

00:09:55.010 --> 00:09:57.490 align:start position:0%
answer is obviously Java base because
you<00:09:55.100><c> told</c><00:09:55.310><c> me</c><00:09:55.460><c> a</c><00:09:55.670><c> minute</c><00:09:56.060><c> ago</c><00:09:56.330><c> that</c><00:09:56.600><c> Java</c><00:09:57.290><c> base</c>

00:09:57.490 --> 00:09:57.500 align:start position:0%
you told me a minute ago that Java base
 

00:09:57.500 --> 00:09:59.950 align:start position:0%
you told me a minute ago that Java base
exports<00:09:58.279><c> the</c><00:09:58.430><c> java.lang</c><00:09:58.880><c> package</c><00:09:58.910><c> and</c><00:09:59.540><c> you're</c>

00:09:59.950 --> 00:09:59.960 align:start position:0%
exports the java.lang package and you're
 

00:09:59.960 --> 00:10:01.900 align:start position:0%
exports the java.lang package and you're
right<00:10:00.170><c> in</c><00:10:00.440><c> general</c><00:10:00.620><c> but</c><00:10:01.220><c> how</c><00:10:01.490><c> does</c><00:10:01.730><c> the</c>

00:10:01.900 --> 00:10:01.910 align:start position:0%
right in general but how does the
 

00:10:01.910 --> 00:10:05.230 align:start position:0%
right in general but how does the
compiler<00:10:02.510><c> know</c><00:10:03.110><c> that</c><00:10:03.640><c> should</c><00:10:04.640><c> it</c><00:10:04.730><c> search</c><00:10:04.970><c> the</c>

00:10:05.230 --> 00:10:05.240 align:start position:0%
compiler know that should it search the
 

00:10:05.240 --> 00:10:07.210 align:start position:0%
compiler know that should it search the
file<00:10:05.480><c> system</c><00:10:05.930><c> looking</c><00:10:06.320><c> for</c><00:10:06.470><c> modules</c><00:10:06.890><c> which</c>

00:10:07.210 --> 00:10:07.220 align:start position:0%
file system looking for modules which
 

00:10:07.220 --> 00:10:09.190 align:start position:0%
file system looking for modules which
export<00:10:07.850><c> the</c><00:10:08.060><c> imported</c><00:10:08.600><c> package</c>

00:10:09.190 --> 00:10:09.200 align:start position:0%
export the imported package
 

00:10:09.200 --> 00:10:12.070 align:start position:0%
export the imported package
what<00:10:09.920><c> if</c><00:10:10.040><c> multiple</c><00:10:10.610><c> modules</c><00:10:10.810><c> export</c><00:10:11.810><c> the</c>

00:10:12.070 --> 00:10:12.080 align:start position:0%
what if multiple modules export the
 

00:10:12.080 --> 00:10:17.079 align:start position:0%
what if multiple modules export the
imported<00:10:12.589><c> package</c><00:10:14.110><c> if</c><00:10:15.110><c> we</c><00:10:15.950><c> intends</c><00:10:16.400><c> to</c><00:10:16.640><c> reuse</c>

00:10:17.079 --> 00:10:17.089 align:start position:0%
imported package if we intends to reuse
 

00:10:17.089 --> 00:10:19.420 align:start position:0%
imported package if we intends to reuse
the<00:10:17.300><c> Java</c><00:10:17.510><c> base</c><00:10:17.750><c> module</c><00:10:18.200><c> we</c><00:10:18.950><c> should</c><00:10:19.190><c> document</c>

00:10:19.420 --> 00:10:19.430 align:start position:0%
the Java base module we should document
 

00:10:19.430 --> 00:10:21.970 align:start position:0%
the Java base module we should document
that<00:10:19.910><c> fact</c><00:10:20.320><c> actually</c><00:10:21.320><c> since</c><00:10:21.500><c> we're</c><00:10:21.650><c> writing</c><00:10:21.950><c> a</c>

00:10:21.970 --> 00:10:21.980 align:start position:0%
that fact actually since we're writing a
 

00:10:21.980 --> 00:10:23.590 align:start position:0%
that fact actually since we're writing a
module<00:10:22.250><c> ourselves</c><00:10:22.730><c> we</c><00:10:22.850><c> must</c><00:10:23.000><c> document</c><00:10:23.510><c> that</c>

00:10:23.590 --> 00:10:23.600 align:start position:0%
module ourselves we must document that
 

00:10:23.600 --> 00:10:25.990 align:start position:0%
module ourselves we must document that
fact<00:10:23.930><c> this</c><00:10:24.680><c> is</c><00:10:24.860><c> the</c><00:10:24.890><c> second</c><00:10:25.460><c> feature</c><00:10:25.640><c> of</c>

00:10:25.990 --> 00:10:26.000 align:start position:0%
fact this is the second feature of
 

00:10:26.000 --> 00:10:28.960 align:start position:0%
fact this is the second feature of
modules<00:10:26.540><c> in</c><00:10:26.690><c> JDK</c><00:10:27.020><c> 9</c><00:10:27.200><c> reliable</c><00:10:27.980><c> dependencies</c><00:10:28.700><c> a</c>

00:10:28.960 --> 00:10:28.970 align:start position:0%
modules in JDK 9 reliable dependencies a
 

00:10:28.970 --> 00:10:31.930 align:start position:0%
modules in JDK 9 reliable dependencies a
module<00:10:29.930><c> isn't</c><00:10:30.170><c> just</c><00:10:30.560><c> a</c><00:10:30.680><c> set</c><00:10:30.830><c> of</c><00:10:30.920><c> packages</c><00:10:31.220><c> it's</c>

00:10:31.930 --> 00:10:31.940 align:start position:0%
module isn't just a set of packages it's
 

00:10:31.940 --> 00:10:34.329 align:start position:0%
module isn't just a set of packages it's
a<00:10:32.120><c> set</c><00:10:32.270><c> of</c><00:10:32.390><c> packages</c><00:10:32.690><c> that</c><00:10:33.310><c> reuses</c><00:10:34.310><c> the</c>

00:10:34.329 --> 00:10:34.339 align:start position:0%
a set of packages that reuses the
 

00:10:34.339 --> 00:10:38.680 align:start position:0%
a set of packages that reuses the
packages<00:10:35.410><c> exported</c><00:10:36.410><c> by</c><00:10:36.680><c> other</c><00:10:36.920><c> modules</c><00:10:37.690><c> so</c>

00:10:38.680 --> 00:10:38.690 align:start position:0%
packages exported by other modules so
 

00:10:38.690 --> 00:10:41.530 align:start position:0%
packages exported by other modules so
the<00:10:38.900><c> HelloWorld</c><00:10:39.500><c> module</c><00:10:40.180><c> specifies</c><00:10:41.180><c> that</c><00:10:41.420><c> it</c>

00:10:41.530 --> 00:10:41.540 align:start position:0%
the HelloWorld module specifies that it
 

00:10:41.540 --> 00:10:43.690 align:start position:0%
the HelloWorld module specifies that it
reuses<00:10:42.290><c> the</c><00:10:42.500><c> Java</c><00:10:42.740><c> base</c><00:10:42.980><c> module</c><00:10:43.220><c> with</c><00:10:43.670><c> a</c>

00:10:43.690 --> 00:10:43.700 align:start position:0%
reuses the Java base module with a
 

00:10:43.700 --> 00:10:45.970 align:start position:0%
reuses the Java base module with a
requires<00:10:44.150><c> directive</c><00:10:44.720><c> in</c><00:10:45.140><c> its</c><00:10:45.470><c> module</c><00:10:45.860><c> in</c>

00:10:45.970 --> 00:10:45.980 align:start position:0%
requires directive in its module in
 

00:10:45.980 --> 00:10:47.100 align:start position:0%
requires directive in its module in
photo<00:10:46.160><c> Java</c>

00:10:47.100 --> 00:10:47.110 align:start position:0%
photo Java
 

00:10:47.110 --> 00:10:50.170 align:start position:0%
photo Java
this<00:10:48.110><c> means</c><00:10:48.380><c> that</c><00:10:48.740><c> code</c><00:10:49.280><c> in</c><00:10:49.490><c> the</c><00:10:49.730><c> HelloWorld</c>

00:10:50.170 --> 00:10:50.180 align:start position:0%
this means that code in the HelloWorld
 

00:10:50.180 --> 00:10:53.340 align:start position:0%
this means that code in the HelloWorld
module<00:10:50.540><c> can</c><00:10:51.260><c> import</c><00:10:51.740><c> any</c><00:10:52.130><c> of</c><00:10:52.490><c> the</c><00:10:52.640><c> packages</c>

00:10:53.340 --> 00:10:53.350 align:start position:0%
module can import any of the packages
 

00:10:53.350 --> 00:10:55.710 align:start position:0%
module can import any of the packages
exported<00:10:54.350><c> by</c><00:10:54.500><c> Java</c><00:10:54.770><c> base</c>

00:10:55.710 --> 00:10:55.720 align:start position:0%
exported by Java base
 

00:10:55.720 --> 00:10:58.870 align:start position:0%
exported by Java base
what<00:10:56.720><c> happens</c><00:10:57.080><c> if</c><00:10:57.350><c> code</c><00:10:58.160><c> in</c><00:10:58.339><c> the</c><00:10:58.430><c> HelloWorld</c>

00:10:58.870 --> 00:10:58.880 align:start position:0%
what happens if code in the HelloWorld
 

00:10:58.880 --> 00:11:01.030 align:start position:0%
what happens if code in the HelloWorld
module<00:10:59.270><c> tries</c><00:11:00.050><c> to</c><00:11:00.170><c> import</c><00:11:00.529><c> any</c><00:11:00.770><c> of</c><00:11:00.920><c> the</c>

00:11:01.030 --> 00:11:01.040 align:start position:0%
module tries to import any of the
 

00:11:01.040 --> 00:11:04.540 align:start position:0%
module tries to import any of the
packages<00:11:01.630><c> concealed</c><00:11:02.630><c> by</c><00:11:03.050><c> Java</c><00:11:03.320><c> base</c><00:11:03.560><c> such</c><00:11:04.339><c> as</c>

00:11:04.540 --> 00:11:04.550 align:start position:0%
packages concealed by Java base such as
 

00:11:04.550 --> 00:11:07.180 align:start position:0%
packages concealed by Java base such as
Sun<00:11:04.930><c> security</c><00:11:05.930><c> provider</c>

00:11:07.180 --> 00:11:07.190 align:start position:0%
Sun security provider
 

00:11:07.190 --> 00:11:11.710 align:start position:0%
Sun security provider
read<00:11:09.310><c> here's</c><00:11:10.310><c> a</c><00:11:10.340><c> real</c><00:11:10.520><c> example</c><00:11:11.060><c> of</c><00:11:11.150><c> some</c><00:11:11.450><c> code</c>

00:11:11.710 --> 00:11:11.720 align:start position:0%
read here's a real example of some code
 

00:11:11.720 --> 00:11:14.190 align:start position:0%
read here's a real example of some code
that<00:11:11.750><c> does</c><00:11:12.380><c> that</c><00:11:12.590><c> last</c><00:11:13.430><c> fish</c><00:11:13.670><c> for</c><00:11:13.880><c> point</c><00:11:14.120><c> one</c>

00:11:14.190 --> 00:11:14.200 align:start position:0%
that does that last fish for point one
 

00:11:14.200 --> 00:11:17.080 align:start position:0%
that does that last fish for point one
it<00:11:15.200><c> doesn't</c><00:11:15.680><c> run</c><00:11:15.950><c> on</c><00:11:15.980><c> JDK</c><00:11:16.460><c> nine</c><00:11:16.640><c> because</c><00:11:16.880><c> the</c>

00:11:17.080 --> 00:11:17.090 align:start position:0%
it doesn't run on JDK nine because the
 

00:11:17.090 --> 00:11:19.840 align:start position:0%
it doesn't run on JDK nine because the
VM<00:11:17.360><c> throws</c><00:11:17.750><c> in</c><00:11:17.930><c> illegal</c><00:11:18.320><c> access</c><00:11:18.740><c> error</c><00:11:19.100><c> the</c>

00:11:19.840 --> 00:11:19.850 align:start position:0%
VM throws in illegal access error the
 

00:11:19.850 --> 00:11:22.180 align:start position:0%
VM throws in illegal access error the
error<00:11:19.880><c> message</c><00:11:20.420><c> is</c><00:11:20.660><c> class</c><00:11:21.560><c> comm</c><00:11:21.890><c> son</c>

00:11:22.180 --> 00:11:22.190 align:start position:0%
error message is class comm son
 

00:11:22.190 --> 00:11:24.430 align:start position:0%
error message is class comm son
enterprise<00:11:22.670><c> security</c><00:11:23.150><c> provider</c><00:11:23.870><c> policy</c>

00:11:24.430 --> 00:11:24.440 align:start position:0%
enterprise security provider policy
 

00:11:24.440 --> 00:11:26.890 align:start position:0%
enterprise security provider policy
wrapper<00:11:24.800><c> in</c><00:11:25.010><c> module</c><00:11:25.880><c> unnamed</c><00:11:26.240><c> module</c><00:11:26.660><c> don't</c>

00:11:26.890 --> 00:11:26.900 align:start position:0%
wrapper in module unnamed module don't
 

00:11:26.900 --> 00:11:29.230 align:start position:0%
wrapper in module unnamed module don't
worry<00:11:27.020><c> about</c><00:11:27.110><c> that</c><00:11:27.320><c> cannot</c><00:11:28.070><c> access</c><00:11:28.400><c> class</c><00:11:28.760><c> son</c>

00:11:29.230 --> 00:11:29.240 align:start position:0%
worry about that cannot access class son
 

00:11:29.240 --> 00:11:31.960 align:start position:0%
worry about that cannot access class son
security<00:11:29.870><c> provider</c><00:11:30.260><c> policy</c><00:11:30.770><c> file</c><00:11:30.980><c> in</c><00:11:31.310><c> module</c>

00:11:31.960 --> 00:11:31.970 align:start position:0%
security provider policy file in module
 

00:11:31.970 --> 00:11:37.150 align:start position:0%
security provider policy file in module
Java<00:11:32.270><c> base</c><00:11:34.360><c> now</c><00:11:35.360><c> a</c><00:11:35.570><c> glance</c><00:11:36.050><c> at</c><00:11:36.500><c> the</c><00:11:36.650><c> open</c><00:11:36.980><c> JDK</c>

00:11:37.150 --> 00:11:37.160 align:start position:0%
Java base now a glance at the open JDK
 

00:11:37.160 --> 00:11:39.790 align:start position:0%
Java base now a glance at the open JDK
repository<00:11:38.030><c> shows</c><00:11:38.300><c> us</c><00:11:38.510><c> that</c><00:11:38.660><c> the</c><00:11:38.810><c> policy</c><00:11:39.500><c> file</c>

00:11:39.790 --> 00:11:39.800 align:start position:0%
repository shows us that the policy file
 

00:11:39.800 --> 00:11:43.890 align:start position:0%
repository shows us that the policy file
class<00:11:40.310><c> in</c><00:11:41.240><c> Sun</c><00:11:41.840><c> Security</c><00:11:42.350><c> is</c><00:11:42.530><c> declared</c><00:11:43.190><c> public</c>

00:11:43.890 --> 00:11:43.900 align:start position:0%
class in Sun Security is declared public
 

00:11:43.900 --> 00:11:47.620 align:start position:0%
class in Sun Security is declared public
but<00:11:44.900><c> because</c><00:11:45.230><c> that</c><00:11:45.710><c> package</c><00:11:46.220><c> is</c><00:11:46.460><c> not</c><00:11:46.760><c> exported</c>

00:11:47.620 --> 00:11:47.630 align:start position:0%
but because that package is not exported
 

00:11:47.630 --> 00:11:50.440 align:start position:0%
but because that package is not exported
by<00:11:47.840><c> Java</c><00:11:48.170><c> base</c><00:11:48.760><c> policy</c><00:11:49.760><c> file</c><00:11:50.030><c> is</c><00:11:50.270><c> only</c>

00:11:50.440 --> 00:11:50.450 align:start position:0%
by Java base policy file is only
 

00:11:50.450 --> 00:11:53.850 align:start position:0%
by Java base policy file is only
accessible<00:11:50.990><c> from</c><00:11:51.740><c> code</c><00:11:52.010><c> in</c><00:11:52.250><c> Java</c><00:11:52.730><c> base</c><00:11:52.880><c> itself</c>

00:11:53.850 --> 00:11:53.860 align:start position:0%
accessible from code in Java base itself
 

00:11:53.860 --> 00:11:56.530 align:start position:0%
accessible from code in Java base itself
to<00:11:54.860><c> be</c><00:11:54.980><c> clear</c><00:11:55.220><c> in</c><00:11:55.430><c> jetty</c><00:11:56.030><c> canine</c><00:11:56.330><c> the</c>

00:11:56.530 --> 00:11:56.540 align:start position:0%
to be clear in jetty canine the
 

00:11:56.540 --> 00:11:59.020 align:start position:0%
to be clear in jetty canine the
GlassFish<00:11:56.960><c> code</c><00:11:57.230><c> cannot</c><00:11:57.590><c> access</c><00:11:58.040><c> this</c><00:11:58.340><c> public</c>

00:11:59.020 --> 00:11:59.030 align:start position:0%
GlassFish code cannot access this public
 

00:11:59.030 --> 00:12:01.420 align:start position:0%
GlassFish code cannot access this public
policy<00:11:59.600><c> file</c><00:12:00.020><c> class</c><00:12:00.290><c> at</c><00:12:00.590><c> compile</c><00:12:01.010><c> time</c><00:12:01.040><c> or</c>

00:12:01.420 --> 00:12:01.430 align:start position:0%
policy file class at compile time or
 

00:12:01.430 --> 00:12:03.070 align:start position:0%
policy file class at compile time or
runtime<00:12:01.910><c> it's</c><00:12:02.150><c> exactly</c><00:12:02.540><c> like</c><00:12:02.630><c> trying</c><00:12:03.020><c> to</c>

00:12:03.070 --> 00:12:03.080 align:start position:0%
runtime it's exactly like trying to
 

00:12:03.080 --> 00:12:05.560 align:start position:0%
runtime it's exactly like trying to
access<00:12:03.290><c> a</c><00:12:03.560><c> package</c><00:12:04.010><c> private</c><00:12:04.400><c> class</c><00:12:04.610><c> Java</c><00:12:05.360><c> C</c>

00:12:05.560 --> 00:12:05.570 align:start position:0%
access a package private class Java C
 

00:12:05.570 --> 00:12:07.570 align:start position:0%
access a package private class Java C
gives<00:12:05.720><c> an</c><00:12:05.840><c> error</c><00:12:05.960><c> and</c><00:12:06.230><c> the</c><00:12:06.530><c> VM</c><00:12:06.800><c> throws</c><00:12:07.130><c> illegal</c>

00:12:07.570 --> 00:12:07.580 align:start position:0%
gives an error and the VM throws illegal
 

00:12:07.580 --> 00:12:09.940 align:start position:0%
gives an error and the VM throws illegal
access<00:12:07.970><c> error</c><00:12:08.210><c> sorry</c><00:12:09.110><c> GlassFish</c><00:12:09.650><c> you'll</c><00:12:09.800><c> have</c>

00:12:09.940 --> 00:12:09.950 align:start position:0%
access error sorry GlassFish you'll have
 

00:12:09.950 --> 00:12:12.100 align:start position:0%
access error sorry GlassFish you'll have
to<00:12:10.070><c> find</c><00:12:10.250><c> a</c><00:12:10.460><c> supported</c><00:12:10.970><c> API</c><00:12:11.270><c> not</c><00:12:11.660><c> one</c><00:12:11.840><c> of</c><00:12:11.960><c> these</c>

00:12:12.100 --> 00:12:12.110 align:start position:0%
to find a supported API not one of these
 

00:12:12.110 --> 00:12:18.730 align:start position:0%
to find a supported API not one of these
conceal<00:12:12.950><c> Sun</c><00:12:13.340><c> dot</c><00:12:13.520><c> star</c><00:12:13.760><c> api's</c><00:12:17.380><c> I'd</c><00:12:18.380><c> like</c><00:12:18.620><c> to</c>

00:12:18.730 --> 00:12:18.740 align:start position:0%
conceal Sun dot star api's I'd like to
 

00:12:18.740 --> 00:12:20.740 align:start position:0%
conceal Sun dot star api's I'd like to
return<00:12:19.040><c> to</c><00:12:19.250><c> the</c><00:12:19.400><c> hello</c><00:12:19.760><c> earth</c><00:12:20.000><c> to</c><00:12:20.270><c> the</c><00:12:20.390><c> module</c>

00:12:20.740 --> 00:12:20.750 align:start position:0%
return to the hello earth to the module
 

00:12:20.750 --> 00:12:23.500 align:start position:0%
return to the hello earth to the module
info<00:12:20.990><c> dot</c><00:12:21.110><c> Java</c><00:12:21.350><c> file</c><00:12:21.650><c> that</c><00:12:22.340><c> declares</c><00:12:22.850><c> the</c>

00:12:23.500 --> 00:12:23.510 align:start position:0%
info dot Java file that declares the
 

00:12:23.510 --> 00:12:26.560 align:start position:0%
info dot Java file that declares the
HelloWorld<00:12:23.990><c> module</c><00:12:24.790><c> it's</c><00:12:25.790><c> really</c><00:12:26.120><c> important</c>

00:12:26.560 --> 00:12:26.570 align:start position:0%
HelloWorld module it's really important
 

00:12:26.570 --> 00:12:28.990 align:start position:0%
HelloWorld module it's really important
to<00:12:26.690><c> understand</c><00:12:27.170><c> that</c><00:12:27.590><c> a</c><00:12:27.650><c> module</c><00:12:28.000><c> exports</c>

00:12:28.990 --> 00:12:29.000 align:start position:0%
to understand that a module exports
 

00:12:29.000 --> 00:12:35.920 align:start position:0%
to understand that a module exports
packages<00:12:29.890><c> but</c><00:12:30.890><c> requires</c><00:12:31.430><c> modules</c><00:12:34.480><c> the</c><00:12:35.480><c> reason</c>

00:12:35.920 --> 00:12:35.930 align:start position:0%
packages but requires modules the reason
 

00:12:35.930 --> 00:12:37.930 align:start position:0%
packages but requires modules the reason
is<00:12:36.140><c> due</c><00:12:36.560><c> to</c><00:12:36.710><c> an</c><00:12:36.800><c> old</c><00:12:36.980><c> software</c><00:12:37.520><c> engineering</c>

00:12:37.930 --> 00:12:37.940 align:start position:0%
is due to an old software engineering
 

00:12:37.940 --> 00:12:41.470 align:start position:0%
is due to an old software engineering
principle<00:12:38.510><c> the</c><00:12:39.260><c> unit</c><00:12:39.650><c> of</c><00:12:39.860><c> reuse</c><00:12:40.370><c> is</c><00:12:40.730><c> the</c><00:12:41.120><c> unit</c>

00:12:41.470 --> 00:12:41.480 align:start position:0%
principle the unit of reuse is the unit
 

00:12:41.480 --> 00:12:44.560 align:start position:0%
principle the unit of reuse is the unit
of<00:12:41.660><c> release</c><00:12:42.340><c> this</c><00:12:43.340><c> principle</c><00:12:43.850><c> is</c><00:12:44.060><c> ultimately</c>

00:12:44.560 --> 00:12:44.570 align:start position:0%
of release this principle is ultimately
 

00:12:44.570 --> 00:12:47.680 align:start position:0%
of release this principle is ultimately
about<00:12:44.960><c> separation</c><00:12:45.590><c> of</c><00:12:45.740><c> concerns</c><00:12:45.950><c> you</c><00:12:46.880><c> reuse</c>

00:12:47.680 --> 00:12:47.690 align:start position:0%
about separation of concerns you reuse
 

00:12:47.690 --> 00:12:50.860 align:start position:0%
about separation of concerns you reuse
someone's<00:12:48.590><c> code</c><00:12:48.950><c> not</c><00:12:49.670><c> by</c><00:12:49.850><c> copy</c><00:12:50.120><c> pasting</c><00:12:50.750><c> it</c>

00:12:50.860 --> 00:12:50.870 align:start position:0%
someone's code not by copy pasting it
 

00:12:50.870 --> 00:12:52.990 align:start position:0%
someone's code not by copy pasting it
into<00:12:51.200><c> your</c><00:12:51.320><c> own</c><00:12:51.470><c> source</c><00:12:51.770><c> tree</c><00:12:52.070><c> but</c><00:12:52.880><c> by</c>

00:12:52.990 --> 00:12:53.000 align:start position:0%
into your own source tree but by
 

00:12:53.000 --> 00:12:55.350 align:start position:0%
into your own source tree but by
depending<00:12:53.360><c> in</c><00:12:53.630><c> some</c><00:12:53.870><c> way</c><00:12:54.020><c> on</c><00:12:54.290><c> the</c><00:12:54.320><c> black</c><00:12:54.740><c> box</c>

00:12:55.350 --> 00:12:55.360 align:start position:0%
depending in some way on the black box
 

00:12:55.360 --> 00:12:59.260 align:start position:0%
depending in some way on the black box
artifact<00:12:56.360><c> released</c><00:12:57.080><c> by</c><00:12:57.290><c> someone</c><00:12:57.620><c> else</c><00:12:58.030><c> now</c><00:12:59.030><c> in</c>

00:12:59.260 --> 00:12:59.270 align:start position:0%
artifact released by someone else now in
 

00:12:59.270 --> 00:13:01.960 align:start position:0%
artifact released by someone else now in
the<00:12:59.780><c> Java</c><00:12:59.990><c> ecosystem</c><00:13:00.740><c> there's</c><00:13:01.339><c> no</c><00:13:01.490><c> question</c>

00:13:01.960 --> 00:13:01.970 align:start position:0%
the Java ecosystem there's no question
 

00:13:01.970 --> 00:13:04.050 align:start position:0%
the Java ecosystem there's no question
that<00:13:02.089><c> the</c><00:13:02.240><c> unit</c><00:13:02.600><c> of</c><00:13:02.750><c> release</c><00:13:03.140><c> is</c><00:13:03.440><c> the</c><00:13:03.589><c> jar</c><00:13:03.800><c> file</c>

00:13:04.050 --> 00:13:04.060 align:start position:0%
that the unit of release is the jar file
 

00:13:04.060 --> 00:13:06.880 align:start position:0%
that the unit of release is the jar file
that<00:13:05.060><c> doesn't</c><00:13:05.240><c> change</c><00:13:05.570><c> with</c><00:13:05.720><c> modules</c><00:13:06.140><c> a</c><00:13:06.410><c> jar</c>

00:13:06.880 --> 00:13:06.890 align:start position:0%
that doesn't change with modules a jar
 

00:13:06.890 --> 00:13:09.100 align:start position:0%
that doesn't change with modules a jar
file<00:13:07.160><c> simply</c><00:13:07.730><c> carries</c><00:13:08.240><c> the</c><00:13:08.390><c> module</c><00:13:08.750><c> info</c><00:13:09.020><c> dot</c>

00:13:09.100 --> 00:13:09.110 align:start position:0%
file simply carries the module info dot
 

00:13:09.110 --> 00:13:11.290 align:start position:0%
file simply carries the module info dot
class<00:13:09.350><c> file</c><00:13:09.650><c> produced</c><00:13:10.490><c> from</c><00:13:10.640><c> module</c><00:13:10.910><c> info</c><00:13:11.180><c> to</c>

00:13:11.290 --> 00:13:11.300 align:start position:0%
class file produced from module info to
 

00:13:11.300 --> 00:13:13.630 align:start position:0%
class file produced from module info to
Java<00:13:11.570><c> alongside</c><00:13:12.380><c> the</c><00:13:12.770><c> ordinary</c><00:13:13.130><c> class</c><00:13:13.339><c> files</c>

00:13:13.630 --> 00:13:13.640 align:start position:0%
Java alongside the ordinary class files
 

00:13:13.640 --> 00:13:17.260 align:start position:0%
Java alongside the ordinary class files
we<00:13:13.910><c> call</c><00:13:14.120><c> this</c><00:13:14.240><c> a</c><00:13:14.300><c> modular</c><00:13:14.960><c> jar</c><00:13:15.670><c> so</c><00:13:16.670><c> when</c>

00:13:17.260 --> 00:13:17.270 align:start position:0%
we call this a modular jar so when
 

00:13:17.270 --> 00:13:19.750 align:start position:0%
we call this a modular jar so when
someone<00:13:17.660><c> releases</c><00:13:18.260><c> a</c><00:13:18.470><c> modular</c><00:13:19.070><c> jar</c><00:13:19.310><c> for</c><00:13:19.700><c> the</c>

00:13:19.750 --> 00:13:19.760 align:start position:0%
someone releases a modular jar for the
 

00:13:19.760 --> 00:13:20.050 align:start position:0%
someone releases a modular jar for the
hell

00:13:20.050 --> 00:13:20.060 align:start position:0%
hell
 

00:13:20.060 --> 00:13:23.290 align:start position:0%
hell
world<00:13:20.270><c> module</c><00:13:20.600><c> it's</c><00:13:21.350><c> reused</c><00:13:22.040><c> by</c><00:13:22.310><c> someone</c><00:13:22.940><c> else</c>

00:13:23.290 --> 00:13:23.300 align:start position:0%
world module it's reused by someone else
 

00:13:23.300 --> 00:13:26.380 align:start position:0%
world module it's reused by someone else
writing<00:13:24.200><c> requires</c><00:13:24.800><c> hello</c><00:13:25.190><c> world</c><00:13:25.460><c> in</c><00:13:26.090><c> their</c>

00:13:26.380 --> 00:13:26.390 align:start position:0%
writing requires hello world in their
 

00:13:26.390 --> 00:13:29.550 align:start position:0%
writing requires hello world in their
own<00:13:26.420><c> module</c><00:13:26.900><c> in</c><00:13:27.050><c> photo</c><00:13:27.290><c> Java</c><00:13:27.940><c> the</c><00:13:28.940><c> reuse</c><00:13:29.450><c> er</c>

00:13:29.550 --> 00:13:29.560 align:start position:0%
own module in photo Java the reuse er
 

00:13:29.560 --> 00:13:32.500 align:start position:0%
own module in photo Java the reuse er
benefits<00:13:30.560><c> from</c><00:13:30.740><c> an</c><00:13:30.860><c> explicit</c><00:13:31.460><c> coherent</c><00:13:32.150><c> API</c>

00:13:32.500 --> 00:13:32.510 align:start position:0%
benefits from an explicit coherent API
 

00:13:32.510 --> 00:13:34.540 align:start position:0%
benefits from an explicit coherent API
consisting<00:13:33.290><c> of</c><00:13:33.350><c> precisely</c><00:13:33.800><c> the</c><00:13:34.220><c> green</c>

00:13:34.540 --> 00:13:34.550 align:start position:0%
consisting of precisely the green
 

00:13:34.550 --> 00:13:37.720 align:start position:0%
consisting of precisely the green
exported<00:13:35.360><c> packages</c><00:13:35.840><c> and</c><00:13:36.190><c> the</c><00:13:37.190><c> releaser</c>

00:13:37.720 --> 00:13:37.730 align:start position:0%
exported packages and the releaser
 

00:13:37.730 --> 00:13:40.060 align:start position:0%
exported packages and the releaser
benefits<00:13:38.720><c> from</c><00:13:38.900><c> strong</c><00:13:39.170><c> encapsulation</c><00:13:39.770><c> of</c>

00:13:40.060 --> 00:13:40.070 align:start position:0%
benefits from strong encapsulation of
 

00:13:40.070 --> 00:13:43.150 align:start position:0%
benefits from strong encapsulation of
con<00:13:40.400><c> sealed</c><00:13:40.760><c> packages</c><00:13:41.560><c> inside</c><00:13:42.560><c> the</c><00:13:42.800><c> module</c>

00:13:43.150 --> 00:13:43.160 align:start position:0%
con sealed packages inside the module
 

00:13:43.160 --> 00:13:46.810 align:start position:0%
con sealed packages inside the module
which<00:13:43.760><c> support</c><00:13:44.300><c> the</c><00:13:44.780><c> exported</c><00:13:45.290><c> API</c><00:13:45.590><c> so</c><00:13:46.580><c> even</c>

00:13:46.810 --> 00:13:46.820 align:start position:0%
which support the exported API so even
 

00:13:46.820 --> 00:13:49.120 align:start position:0%
which support the exported API so even
if<00:13:46.910><c> there's</c><00:13:47.150><c> high</c><00:13:47.690><c> coupling</c><00:13:48.230><c> inside</c><00:13:48.830><c> a</c><00:13:48.860><c> module</c>

00:13:49.120 --> 00:13:49.130 align:start position:0%
if there's high coupling inside a module
 

00:13:49.130 --> 00:13:51.520 align:start position:0%
if there's high coupling inside a module
there's<00:13:49.730><c> loose</c><00:13:50.030><c> coupling</c><00:13:50.330><c> between</c><00:13:51.080><c> modules</c>

00:13:51.520 --> 00:13:51.530 align:start position:0%
there's loose coupling between modules
 

00:13:51.530 --> 00:13:53.320 align:start position:0%
there's loose coupling between modules
another<00:13:52.490><c> good</c><00:13:52.670><c> software</c><00:13:52.940><c> engineering</c>

00:13:53.320 --> 00:13:53.330 align:start position:0%
another good software engineering
 

00:13:53.330 --> 00:13:59.620 align:start position:0%
another good software engineering
principle<00:13:56.380><c> okay</c><00:13:57.380><c> so</c><00:13:58.280><c> you're</c><00:13:58.820><c> requiring</c><00:13:59.240><c> Java</c>

00:13:59.620 --> 00:13:59.630 align:start position:0%
principle okay so you're requiring Java
 

00:13:59.630 --> 00:14:01.480 align:start position:0%
principle okay so you're requiring Java
base<00:13:59.870><c> from</c><00:14:00.320><c> your</c><00:14:00.380><c> HelloWorld</c><00:14:00.920><c> module</c><00:14:01.310><c> and</c>

00:14:01.480 --> 00:14:01.490 align:start position:0%
base from your HelloWorld module and
 

00:14:01.490 --> 00:14:04.090 align:start position:0%
base from your HelloWorld module and
you've<00:14:02.450><c> built</c><00:14:02.720><c> a</c><00:14:02.900><c> modular</c><00:14:03.320><c> jar</c><00:14:03.530><c> for</c><00:14:04.010><c> your</c>

00:14:04.090 --> 00:14:04.100 align:start position:0%
you've built a modular jar for your
 

00:14:04.100 --> 00:14:07.620 align:start position:0%
you've built a modular jar for your
module<00:14:04.430><c> where</c><00:14:05.270><c> do</c><00:14:05.420><c> you</c><00:14:05.510><c> put</c><00:14:05.750><c> a</c><00:14:05.990><c> modular</c><00:14:06.500><c> jar</c>

00:14:07.620 --> 00:14:07.630 align:start position:0%
module where do you put a modular jar
 

00:14:07.630 --> 00:14:10.540 align:start position:0%
module where do you put a modular jar
jdk<00:14:08.630><c> nine</c><00:14:08.810><c> looks</c><00:14:09.170><c> for</c><00:14:09.380><c> modules</c><00:14:09.740><c> in</c><00:14:09.980><c> the</c><00:14:10.190><c> system</c>

00:14:10.540 --> 00:14:10.550 align:start position:0%
jdk nine looks for modules in the system
 

00:14:10.550 --> 00:14:13.870 align:start position:0%
jdk nine looks for modules in the system
image<00:14:10.790><c> and</c><00:14:11.090><c> on</c><00:14:11.660><c> the</c><00:14:11.780><c> module</c><00:14:12.080><c> path</c><00:14:12.520><c> the</c><00:14:13.520><c> system</c>

00:14:13.870 --> 00:14:13.880 align:start position:0%
image and on the module path the system
 

00:14:13.880 --> 00:14:16.060 align:start position:0%
image and on the module path the system
image<00:14:14.030><c> is</c><00:14:14.360><c> in</c><00:14:14.900><c> the</c><00:14:15.170><c> JDK</c><00:14:15.680><c> installation</c>

00:14:16.060 --> 00:14:16.070 align:start position:0%
image is in the JDK installation
 

00:14:16.070 --> 00:14:19.390 align:start position:0%
image is in the JDK installation
directory<00:14:16.760><c> that</c><00:14:17.110><c> contains</c><00:14:18.110><c> Java</c><00:14:18.650><c> base</c><00:14:18.890><c> and</c><00:14:19.220><c> a</c>

00:14:19.390 --> 00:14:19.400 align:start position:0%
directory that contains Java base and a
 

00:14:19.400 --> 00:14:22.960 align:start position:0%
directory that contains Java base and a
few<00:14:19.610><c> dozen</c><00:14:19.790><c> core</c><00:14:20.390><c> modules</c><00:14:21.460><c> the</c><00:14:22.460><c> module</c><00:14:22.760><c> path</c>

00:14:22.960 --> 00:14:22.970 align:start position:0%
few dozen core modules the module path
 

00:14:22.970 --> 00:14:24.730 align:start position:0%
few dozen core modules the module path
is<00:14:23.240><c> set</c><00:14:23.420><c> on</c><00:14:23.660><c> the</c><00:14:23.810><c> command</c><00:14:24.110><c> line</c><00:14:24.350><c> like</c><00:14:24.380><c> the</c>

00:14:24.730 --> 00:14:24.740 align:start position:0%
is set on the command line like the
 

00:14:24.740 --> 00:14:26.980 align:start position:0%
is set on the command line like the
class<00:14:24.920><c> path</c><00:14:25.240><c> except</c><00:14:26.240><c> that</c><00:14:26.360><c> the</c><00:14:26.450><c> module</c><00:14:26.780><c> path</c>

00:14:26.980 --> 00:14:26.990 align:start position:0%
class path except that the module path
 

00:14:26.990 --> 00:14:29.710 align:start position:0%
class path except that the module path
points<00:14:27.440><c> to</c><00:14:27.590><c> directories</c><00:14:28.280><c> containing</c><00:14:29.240><c> modular</c>

00:14:29.710 --> 00:14:29.720 align:start position:0%
points to directories containing modular
 

00:14:29.720 --> 00:14:32.910 align:start position:0%
points to directories containing modular
jars<00:14:29.990><c> rather</c><00:14:30.980><c> than</c><00:14:31.310><c> to</c><00:14:31.610><c> the</c><00:14:31.760><c> jars</c><00:14:32.030><c> themselves</c>

00:14:32.910 --> 00:14:32.920 align:start position:0%
jars rather than to the jars themselves
 

00:14:32.920 --> 00:14:38.350 align:start position:0%
jars rather than to the jars themselves
so<00:14:33.920><c> Java</c><00:14:34.880><c> P</c><00:14:35.090><c> Java</c><00:14:35.600><c> -</c><00:14:36.350><c> P</c><00:14:36.650><c> mods</c><00:14:37.180><c> specifies</c><00:14:38.180><c> that</c>

00:14:38.350 --> 00:14:38.360 align:start position:0%
so Java P Java - P mods specifies that
 

00:14:38.360 --> 00:14:41.560 align:start position:0%
so Java P Java - P mods specifies that
modular<00:14:38.750><c> jars</c><00:14:39.020><c> are</c><00:14:39.290><c> to</c><00:14:39.500><c> be</c><00:14:39.650><c> found</c><00:14:39.920><c> in</c><00:14:40.430><c> the</c><00:14:41.390><c> mods</c>

00:14:41.560 --> 00:14:41.570 align:start position:0%
modular jars are to be found in the mods
 

00:14:41.570 --> 00:14:44.980 align:start position:0%
modular jars are to be found in the mods
directory<00:14:42.050><c> and</c><00:14:42.340><c> -</c><00:14:43.340><c> M</c><00:14:43.520><c> HelloWorld</c><00:14:44.150><c> specifies</c>

00:14:44.980 --> 00:14:44.990 align:start position:0%
directory and - M HelloWorld specifies
 

00:14:44.990 --> 00:14:51.490 align:start position:0%
directory and - M HelloWorld specifies
the<00:14:45.320><c> module</c><00:14:45.680><c> to</c><00:14:46.190><c> run</c><00:14:49.840><c> the</c><00:14:50.840><c> key</c><00:14:51.020><c> point</c><00:14:51.290><c> then</c>

00:14:51.490 --> 00:14:51.500 align:start position:0%
the module to run the key point then
 

00:14:51.500 --> 00:14:53.650 align:start position:0%
the module to run the key point then
about<00:14:51.800><c> modules</c><00:14:52.220><c> requiring</c><00:14:52.790><c> each</c><00:14:53.120><c> other</c><00:14:53.390><c> is</c>

00:14:53.650 --> 00:14:53.660 align:start position:0%
about modules requiring each other is
 

00:14:53.660 --> 00:14:55.480 align:start position:0%
about modules requiring each other is
that<00:14:53.840><c> the</c><00:14:53.930><c> module</c><00:14:54.260><c> system</c><00:14:54.470><c> can</c><00:14:55.160><c> check</c><00:14:55.370><c> the</c>

00:14:55.480 --> 00:14:55.490 align:start position:0%
that the module system can check the
 

00:14:55.490 --> 00:14:57.790 align:start position:0%
that the module system can check the
requirements<00:14:56.120><c> and</c><00:14:56.360><c> validate</c><00:14:57.050><c> that</c><00:14:57.230><c> a</c><00:14:57.290><c> modular</c>

00:14:57.790 --> 00:14:57.800 align:start position:0%
requirements and validate that a modular
 

00:14:57.800 --> 00:15:00.940 align:start position:0%
requirements and validate that a modular
application<00:14:57.950><c> is</c><00:14:58.700><c> sound</c><00:14:59.440><c> once</c><00:15:00.440><c> the</c><00:15:00.560><c> compiler</c>

00:15:00.940 --> 00:15:00.950 align:start position:0%
application is sound once the compiler
 

00:15:00.950 --> 00:15:03.190 align:start position:0%
application is sound once the compiler
or<00:15:01.040><c> runtime</c><00:15:01.610><c> has</c><00:15:01.850><c> found</c><00:15:02.180><c> the</c><00:15:02.450><c> initial</c><00:15:02.660><c> module</c>

00:15:03.190 --> 00:15:03.200 align:start position:0%
or runtime has found the initial module
 

00:15:03.200 --> 00:15:05.800 align:start position:0%
or runtime has found the initial module
HelloWorld<00:15:03.950><c> in</c><00:15:04.520><c> the</c><00:15:04.730><c> system</c><00:15:05.030><c> image</c><00:15:05.180><c> or</c><00:15:05.510><c> on</c><00:15:05.720><c> the</c>

00:15:05.800 --> 00:15:05.810 align:start position:0%
HelloWorld in the system image or on the
 

00:15:05.810 --> 00:15:08.200 align:start position:0%
HelloWorld in the system image or on the
module<00:15:06.080><c> path</c><00:15:06.290><c> it</c><00:15:06.920><c> performs</c><00:15:07.400><c> process</c><00:15:07.850><c> called</c>

00:15:08.200 --> 00:15:08.210 align:start position:0%
module path it performs process called
 

00:15:08.210 --> 00:15:11.830 align:start position:0%
module path it performs process called
resolution<00:15:09.100><c> resolution</c><00:15:10.100><c> means</c><00:15:10.840><c> inspecting</c>

00:15:11.830 --> 00:15:11.840 align:start position:0%
resolution resolution means inspecting
 

00:15:11.840 --> 00:15:14.800 align:start position:0%
resolution resolution means inspecting
it<00:15:11.960><c> requires</c><00:15:12.520><c> directives</c><00:15:13.520><c> and</c><00:15:13.820><c> finding</c><00:15:14.630><c> those</c>

00:15:14.800 --> 00:15:14.810 align:start position:0%
it requires directives and finding those
 

00:15:14.810 --> 00:15:17.350 align:start position:0%
it requires directives and finding those
required<00:15:15.320><c> modules</c><00:15:15.950><c> in</c><00:15:16.250><c> the</c><00:15:16.640><c> system</c><00:15:16.940><c> image</c><00:15:17.090><c> or</c>

00:15:17.350 --> 00:15:17.360 align:start position:0%
required modules in the system image or
 

00:15:17.360 --> 00:15:19.180 align:start position:0%
required modules in the system image or
on<00:15:17.570><c> the</c><00:15:17.660><c> module</c><00:15:17.960><c> path</c><00:15:18.200><c> then</c><00:15:18.800><c> recursively</c>

00:15:19.180 --> 00:15:19.190 align:start position:0%
on the module path then recursively
 

00:15:19.190 --> 00:15:22.540 align:start position:0%
on the module path then recursively
resolving<00:15:20.180><c> them</c><00:15:20.860><c> we're</c><00:15:21.860><c> building</c><00:15:22.220><c> a</c><00:15:22.310><c> graph</c>

00:15:22.540 --> 00:15:22.550 align:start position:0%
resolving them we're building a graph
 

00:15:22.550 --> 00:15:26.110 align:start position:0%
resolving them we're building a graph
whose<00:15:23.360><c> nodes</c><00:15:23.720><c> and</c><00:15:24.290><c> modules</c><00:15:24.650><c> and</c><00:15:24.980><c> whose</c><00:15:25.670><c> edges</c>

00:15:26.110 --> 00:15:26.120 align:start position:0%
whose nodes and modules and whose edges
 

00:15:26.120 --> 00:15:28.840 align:start position:0%
whose nodes and modules and whose edges
are<00:15:26.300><c> the</c><00:15:26.540><c> requires</c><00:15:26.930><c> relation</c><00:15:27.920><c> and</c><00:15:28.190><c> to</c><00:15:28.730><c> be</c>

00:15:28.840 --> 00:15:28.850 align:start position:0%
are the requires relation and to be
 

00:15:28.850 --> 00:15:30.370 align:start position:0%
are the requires relation and to be
clear<00:15:29.060><c> in</c><00:15:29.270><c> jetty</c><00:15:29.420><c> Cana</c><00:15:29.720><c> and</c><00:15:29.870><c> we</c><00:15:29.960><c> do</c><00:15:30.050><c> this</c><00:15:30.230><c> at</c>

00:15:30.370 --> 00:15:30.380 align:start position:0%
clear in jetty Cana and we do this at
 

00:15:30.380 --> 00:15:33.800 align:start position:0%
clear in jetty Cana and we do this at
compile<00:15:30.800><c> time</c><00:15:30.830><c> and</c>

00:15:33.800 --> 00:15:33.810 align:start position:0%
 
 

00:15:33.810 --> 00:15:36.570 align:start position:0%
 
time.if<00:15:34.810><c> resolution</c><00:15:35.500><c> succeeds</c><00:15:35.980><c> you</c><00:15:36.370><c> get</c>

00:15:36.570 --> 00:15:36.580 align:start position:0%
time.if resolution succeeds you get
 

00:15:36.580 --> 00:15:39.810 align:start position:0%
time.if resolution succeeds you get
three<00:15:36.940><c> guarantees</c><00:15:37.470><c> first</c><00:15:38.470><c> every</c><00:15:39.310><c> module</c><00:15:39.460><c> that</c>

00:15:39.810 --> 00:15:39.820 align:start position:0%
three guarantees first every module that
 

00:15:39.820 --> 00:15:42.630 align:start position:0%
three guarantees first every module that
is<00:15:39.910><c> required</c><00:15:40.360><c> is</c><00:15:40.720><c> available</c><00:15:41.530><c> okay</c><00:15:42.220><c> pretty</c>

00:15:42.630 --> 00:15:42.640 align:start position:0%
is required is available okay pretty
 

00:15:42.640 --> 00:15:44.610 align:start position:0%
is required is available okay pretty
obvious<00:15:43.030><c> but</c><00:15:43.330><c> a</c><00:15:43.390><c> big</c><00:15:43.570><c> improvement</c><00:15:43.840><c> over</c><00:15:44.500><c> the</c>

00:15:44.610 --> 00:15:44.620 align:start position:0%
obvious but a big improvement over the
 

00:15:44.620 --> 00:15:46.080 align:start position:0%
obvious but a big improvement over the
class<00:15:44.800><c> path</c><00:15:45.100><c> where</c><00:15:45.400><c> you</c><00:15:45.430><c> don't</c><00:15:45.670><c> discover</c>

00:15:46.080 --> 00:15:46.090 align:start position:0%
class path where you don't discover
 

00:15:46.090 --> 00:15:49.020 align:start position:0%
class path where you don't discover
these<00:15:46.840><c> identity</c><00:15:47.560><c> lists</c><00:15:47.890><c> missing</c><00:15:48.310><c> jars</c><00:15:48.640><c> until</c>

00:15:49.020 --> 00:15:49.030 align:start position:0%
these identity lists missing jars until
 

00:15:49.030 --> 00:15:53.010 align:start position:0%
these identity lists missing jars until
later<00:15:49.830><c> second</c><00:15:50.850><c> modules</c><00:15:51.850><c> don't</c><00:15:52.600><c> depend</c><00:15:52.870><c> on</c>

00:15:53.010 --> 00:15:53.020 align:start position:0%
later second modules don't depend on
 

00:15:53.020 --> 00:15:53.610 align:start position:0%
later second modules don't depend on
each<00:15:53.170><c> other</c>

00:15:53.610 --> 00:15:53.620 align:start position:0%
each other
 

00:15:53.620 --> 00:15:56.760 align:start position:0%
each other
in<00:15:53.710><c> a</c><00:15:53.860><c> cycle</c><00:15:54.450><c> cyclic</c><00:15:55.450><c> dependencies</c><00:15:56.140><c> leads</c><00:15:56.560><c> to</c>

00:15:56.760 --> 00:15:56.770 align:start position:0%
in a cycle cyclic dependencies leads to
 

00:15:56.770 --> 00:15:59.040 align:start position:0%
in a cycle cyclic dependencies leads to
code<00:15:57.040><c> that</c><00:15:57.250><c> is</c><00:15:57.340><c> hard</c><00:15:57.550><c> to</c><00:15:57.700><c> maintain</c><00:15:57.850><c> and</c><00:15:58.360><c> we're</c>

00:15:59.040 --> 00:15:59.050 align:start position:0%
code that is hard to maintain and we're
 

00:15:59.050 --> 00:16:01.320 align:start position:0%
code that is hard to maintain and we're
taking<00:15:59.200><c> the</c><00:15:59.470><c> opportunity</c><00:15:59.500><c> to</c><00:16:00.220><c> prohibit</c><00:16:01.120><c> them</c>

00:16:01.320 --> 00:16:01.330 align:start position:0%
taking the opportunity to prohibit them
 

00:16:01.330 --> 00:16:05.790 align:start position:0%
taking the opportunity to prohibit them
in<00:16:01.630><c> modules</c><00:16:02.260><c> from</c><00:16:02.530><c> day</c><00:16:02.800><c> one</c><00:16:03.100><c> of</c><00:16:03.370><c> JDK</c><00:16:03.850><c> 9</c><00:16:04.800><c> now</c>

00:16:05.790 --> 00:16:05.800 align:start position:0%
in modules from day one of JDK 9 now
 

00:16:05.800 --> 00:16:07.320 align:start position:0%
in modules from day one of JDK 9 now
some<00:16:06.010><c> of</c><00:16:06.040><c> you</c><00:16:06.220><c> are</c><00:16:06.310><c> thinking</c><00:16:06.340><c> this</c><00:16:07.090><c> is</c><00:16:07.300><c> just</c>

00:16:07.320 --> 00:16:07.330 align:start position:0%
some of you are thinking this is just
 

00:16:07.330 --> 00:16:09.660 align:start position:0%
some of you are thinking this is just
dependency<00:16:08.170><c> management</c><00:16:08.470><c> doesn't</c><00:16:09.220><c> may</c><00:16:09.490><c> even</c>

00:16:09.660 --> 00:16:09.670 align:start position:0%
dependency management doesn't may even
 

00:16:09.670 --> 00:16:13.050 align:start position:0%
dependency management doesn't may even
do<00:16:09.820><c> this</c><00:16:09.970><c> who</c><00:16:10.480><c> is</c><00:16:10.630><c> thinking</c><00:16:10.780><c> that</c><00:16:11.790><c> some</c><00:16:12.790><c> hands</c>

00:16:13.050 --> 00:16:13.060 align:start position:0%
do this who is thinking that some hands
 

00:16:13.060 --> 00:16:15.510 align:start position:0%
do this who is thinking that some hands
okay<00:16:13.600><c> you</c><00:16:13.660><c> know</c><00:16:13.870><c> that's</c><00:16:14.110><c> fair</c><00:16:14.380><c> now</c><00:16:15.280><c> bear</c><00:16:15.490><c> in</c>

00:16:15.510 --> 00:16:15.520 align:start position:0%
okay you know that's fair now bear in
 

00:16:15.520 --> 00:16:17.340 align:start position:0%
okay you know that's fair now bear in
mind<00:16:15.640><c> that</c><00:16:15.940><c> maven</c><00:16:16.360><c> only</c><00:16:16.570><c> works</c><00:16:16.780><c> at</c><00:16:17.020><c> compile</c>

00:16:17.340 --> 00:16:17.350 align:start position:0%
mind that maven only works at compile
 

00:16:17.350 --> 00:16:20.070 align:start position:0%
mind that maven only works at compile
time<00:16:17.640><c> and</c><00:16:18.640><c> this</c><00:16:18.940><c> resolution</c><00:16:19.150><c> process</c><00:16:19.840><c> works</c>

00:16:20.070 --> 00:16:20.080 align:start position:0%
time and this resolution process works
 

00:16:20.080 --> 00:16:22.800 align:start position:0%
time and this resolution process works
at<00:16:20.260><c> runtime</c><00:16:20.500><c> as</c><00:16:20.950><c> well</c><00:16:21.210><c> but</c><00:16:22.210><c> more</c><00:16:22.360><c> importantly</c>

00:16:22.800 --> 00:16:22.810 align:start position:0%
at runtime as well but more importantly
 

00:16:22.810 --> 00:16:24.720 align:start position:0%
at runtime as well but more importantly
let<00:16:23.080><c> me</c><00:16:23.200><c> come</c><00:16:23.410><c> to</c><00:16:23.530><c> resolutions</c><00:16:24.250><c> third</c>

00:16:24.720 --> 00:16:24.730 align:start position:0%
let me come to resolutions third
 

00:16:24.730 --> 00:16:29.460 align:start position:0%
let me come to resolutions third
guarantee<00:16:25.770><c> if</c><00:16:26.770><c> code</c><00:16:27.490><c> in</c><00:16:27.760><c> one</c><00:16:28.120><c> module</c><00:16:28.470><c> imports</c>

00:16:29.460 --> 00:16:29.470 align:start position:0%
guarantee if code in one module imports
 

00:16:29.470 --> 00:16:32.490 align:start position:0%
guarantee if code in one module imports
a<00:16:29.590><c> package</c><00:16:30.090><c> then</c><00:16:31.090><c> the</c><00:16:31.240><c> package</c><00:16:31.660><c> package</c><00:16:32.140><c> is</c>

00:16:32.490 --> 00:16:32.500 align:start position:0%
a package then the package package is
 

00:16:32.500 --> 00:16:36.560 align:start position:0%
a package then the package package is
exported<00:16:33.400><c> from</c><00:16:33.730><c> exactly</c><00:16:34.300><c> one</c><00:16:34.570><c> other</c><00:16:34.930><c> module</c>

00:16:36.560 --> 00:16:36.570 align:start position:0%
exported from exactly one other module
 

00:16:36.570 --> 00:16:40.290 align:start position:0%
exported from exactly one other module
this<00:16:37.570><c> guarantee</c><00:16:38.020><c> relies</c><00:16:38.440><c> on</c><00:16:38.580><c> exports</c><00:16:39.580><c> as</c><00:16:39.910><c> well</c>

00:16:40.290 --> 00:16:40.300 align:start position:0%
this guarantee relies on exports as well
 

00:16:40.300 --> 00:16:42.120 align:start position:0%
this guarantee relies on exports as well
as<00:16:40.450><c> requires</c><00:16:40.840><c> so</c><00:16:41.200><c> you</c><00:16:41.260><c> won't</c><00:16:41.500><c> find</c><00:16:41.740><c> it</c><00:16:41.950><c> in</c>

00:16:42.120 --> 00:16:42.130 align:start position:0%
as requires so you won't find it in
 

00:16:42.130 --> 00:16:44.280 align:start position:0%
as requires so you won't find it in
maven<00:16:42.580><c> it</c><00:16:42.910><c> means</c><00:16:43.330><c> there</c><00:16:43.570><c> are</c><00:16:43.600><c> no</c><00:16:43.720><c> split</c>

00:16:44.280 --> 00:16:44.290 align:start position:0%
maven it means there are no split
 

00:16:44.290 --> 00:16:46.740 align:start position:0%
maven it means there are no split
packages<00:16:44.860><c> which</c><00:16:45.610><c> is</c><00:16:45.640><c> what</c><00:16:45.910><c> happens</c><00:16:46.270><c> when</c><00:16:46.450><c> two</c>

00:16:46.740 --> 00:16:46.750 align:start position:0%
packages which is what happens when two
 

00:16:46.750 --> 00:16:48.780 align:start position:0%
packages which is what happens when two
jars<00:16:47.050><c> on</c><00:16:47.290><c> the</c><00:16:47.410><c> classpath</c><00:16:47.920><c> contain</c><00:16:48.490><c> the</c><00:16:48.610><c> same</c>

00:16:48.780 --> 00:16:48.790 align:start position:0%
jars on the classpath contain the same
 

00:16:48.790 --> 00:16:51.090 align:start position:0%
jars on the classpath contain the same
package<00:16:49.030><c> and</c><00:16:49.480><c> you</c><00:16:49.840><c> load</c><00:16:50.020><c> some</c><00:16:50.290><c> classes</c><00:16:50.830><c> from</c>

00:16:51.090 --> 00:16:51.100 align:start position:0%
package and you load some classes from
 

00:16:51.100 --> 00:16:53.310 align:start position:0%
package and you load some classes from
one<00:16:51.280><c> jar</c><00:16:51.550><c> and</c><00:16:51.790><c> other</c><00:16:52.330><c> classes</c><00:16:52.900><c> in</c><00:16:53.050><c> the</c><00:16:53.140><c> same</c>

00:16:53.310 --> 00:16:53.320 align:start position:0%
one jar and other classes in the same
 

00:16:53.320 --> 00:16:56.160 align:start position:0%
one jar and other classes in the same
package<00:16:53.500><c> from</c><00:16:54.040><c> the</c><00:16:54.160><c> other</c><00:16:54.310><c> jar</c><00:16:55.170><c> split</c>

00:16:56.160 --> 00:16:56.170 align:start position:0%
package from the other jar split
 

00:16:56.170 --> 00:16:58.470 align:start position:0%
package from the other jar split
packages<00:16:56.620><c> are</c><00:16:56.770><c> a</c><00:16:56.800><c> huge</c><00:16:57.160><c> failing</c><00:16:57.760><c> of</c><00:16:57.970><c> the</c><00:16:58.150><c> class</c>

00:16:58.470 --> 00:16:58.480 align:start position:0%
packages are a huge failing of the class
 

00:16:58.480 --> 00:17:00.870 align:start position:0%
packages are a huge failing of the class
path<00:16:58.780><c> mechanism</c><00:16:59.380><c> because</c><00:17:00.100><c> they</c><00:17:00.220><c> lead</c><00:17:00.400><c> to</c><00:17:00.430><c> very</c>

00:17:00.870 --> 00:17:00.880 align:start position:0%
path mechanism because they lead to very
 

00:17:00.880 --> 00:17:04.470 align:start position:0%
path mechanism because they lead to very
difficult<00:17:01.600><c> to</c><00:17:01.780><c> debug</c><00:17:02.140><c> scenarios</c><00:17:03.360><c> thanks</c><00:17:04.360><c> to</c>

00:17:04.470 --> 00:17:04.480 align:start position:0%
difficult to debug scenarios thanks to
 

00:17:04.480 --> 00:17:06.270 align:start position:0%
difficult to debug scenarios thanks to
resolution<00:17:04.990><c> they're</c><00:17:05.500><c> completely</c><00:17:06.010><c> impossible</c>

00:17:06.270 --> 00:17:06.280 align:start position:0%
resolution they're completely impossible
 

00:17:06.280 --> 00:17:08.160 align:start position:0%
resolution they're completely impossible
in<00:17:06.699><c> a</c><00:17:06.790><c> modular</c><00:17:06.970><c> application</c><00:17:07.720><c> which</c><00:17:07.959><c> is</c>

00:17:08.160 --> 00:17:08.170 align:start position:0%
in a modular application which is
 

00:17:08.170 --> 00:17:10.069 align:start position:0%
in a modular application which is
obviously<00:17:08.860><c> good</c><00:17:09.040><c> for</c><00:17:09.069><c> long</c><00:17:09.339><c> term</c><00:17:09.579><c> maintenance</c>

00:17:10.069 --> 00:17:10.079 align:start position:0%
obviously good for long term maintenance
 

00:17:10.079 --> 00:17:12.720 align:start position:0%
obviously good for long term maintenance
and<00:17:11.079><c> this</c><00:17:11.199><c> is</c><00:17:11.380><c> what</c><00:17:11.530><c> we</c><00:17:11.740><c> we</c><00:17:12.220><c> really</c><00:17:12.459><c> mean</c><00:17:12.699><c> by</c>

00:17:12.720 --> 00:17:12.730 align:start position:0%
and this is what we we really mean by
 

00:17:12.730 --> 00:17:15.630 align:start position:0%
and this is what we we really mean by
reliable<00:17:13.329><c> dependencies</c><00:17:14.140><c> the</c><00:17:14.829><c> dependencies</c>

00:17:15.630 --> 00:17:15.640 align:start position:0%
reliable dependencies the dependencies
 

00:17:15.640 --> 00:17:18.900 align:start position:0%
reliable dependencies the dependencies
in<00:17:15.819><c> a</c><00:17:15.910><c> graph</c><00:17:16.180><c> are</c><00:17:16.569><c> reliable</c><00:17:17.350><c> when</c><00:17:18.189><c> each</c><00:17:18.430><c> module</c>

00:17:18.900 --> 00:17:18.910 align:start position:0%
in a graph are reliable when each module
 

00:17:18.910 --> 00:17:21.480 align:start position:0%
in a graph are reliable when each module
can<00:17:19.180><c> access</c><00:17:19.689><c> only</c><00:17:19.930><c> one</c><00:17:20.380><c> version</c><00:17:20.650><c> of</c><00:17:20.980><c> a</c><00:17:21.100><c> package</c>

00:17:21.480 --> 00:17:21.490 align:start position:0%
can access only one version of a package
 

00:17:21.490 --> 00:17:26.760 align:start position:0%
can access only one version of a package
at<00:17:22.060><c> a</c><00:17:22.120><c> time</c><00:17:24.930><c> the</c><00:17:25.930><c> guarantee</c><00:17:26.290><c> of</c><00:17:26.319><c> no</c><00:17:26.530><c> split</c>

00:17:26.760 --> 00:17:26.770 align:start position:0%
at a time the guarantee of no split
 

00:17:26.770 --> 00:17:28.800 align:start position:0%
at a time the guarantee of no split
packages<00:17:27.189><c> is</c><00:17:27.400><c> a</c><00:17:27.430><c> big</c><00:17:27.760><c> deal</c><00:17:27.939><c> for</c><00:17:27.970><c> performance</c>

00:17:28.800 --> 00:17:28.810 align:start position:0%
packages is a big deal for performance
 

00:17:28.810 --> 00:17:31.620 align:start position:0%
packages is a big deal for performance
as<00:17:28.960><c> well</c><00:17:29.400><c> because</c><00:17:30.400><c> we</c><00:17:30.520><c> know</c><00:17:30.640><c> precisely</c><00:17:30.850><c> which</c>

00:17:31.620 --> 00:17:31.630 align:start position:0%
as well because we know precisely which
 

00:17:31.630 --> 00:17:35.010 align:start position:0%
as well because we know precisely which
module<00:17:32.200><c> exports</c><00:17:33.130><c> which</c><00:17:33.340><c> package</c><00:17:33.880><c> there's</c><00:17:34.840><c> no</c>

00:17:35.010 --> 00:17:35.020 align:start position:0%
module exports which package there's no
 

00:17:35.020 --> 00:17:37.110 align:start position:0%
module exports which package there's no
need<00:17:35.230><c> to</c><00:17:35.260><c> scan</c><00:17:35.620><c> every</c><00:17:36.040><c> module</c><00:17:36.370><c> in</c><00:17:36.670><c> the</c><00:17:36.820><c> system</c>

00:17:37.110 --> 00:17:37.120 align:start position:0%
need to scan every module in the system
 

00:17:37.120 --> 00:17:39.060 align:start position:0%
need to scan every module in the system
image<00:17:37.270><c> and</c><00:17:37.570><c> on</c><00:17:37.660><c> the</c><00:17:37.750><c> module</c><00:17:38.020><c> path</c><00:17:38.230><c> when</c><00:17:38.800><c> trying</c>

00:17:39.060 --> 00:17:39.070 align:start position:0%
image and on the module path when trying
 

00:17:39.070 --> 00:17:42.150 align:start position:0%
image and on the module path when trying
to<00:17:39.130><c> load</c><00:17:39.310><c> a</c><00:17:39.340><c> class</c><00:17:40.680><c> contrast</c><00:17:41.680><c> that</c><00:17:41.890><c> with</c><00:17:42.100><c> how</c>

00:17:42.150 --> 00:17:42.160 align:start position:0%
to load a class contrast that with how
 

00:17:42.160 --> 00:17:44.350 align:start position:0%
to load a class contrast that with how
you<00:17:42.340><c> load</c><00:17:42.700><c> classes</c><00:17:43.300><c> from</c><00:17:43.450><c> the</c><00:17:43.600><c> class</c><00:17:43.780><c> path</c>

00:17:44.350 --> 00:17:44.360 align:start position:0%
you load classes from the class path
 

00:17:44.360 --> 00:17:47.529 align:start position:0%
you load classes from the class path
here's<00:17:44.899><c> the</c><00:17:45.080><c> classpath</c><00:17:45.590><c> for</c><00:17:46.190><c> hadoop</c><00:17:46.549><c> the</c>

00:17:47.529 --> 00:17:47.539 align:start position:0%
here's the classpath for hadoop the
 

00:17:47.539 --> 00:17:50.289 align:start position:0%
here's the classpath for hadoop the
compiler<00:17:47.990><c> or</c><00:17:48.289><c> runtime</c><00:17:48.799><c> has</c><00:17:49.700><c> to</c><00:17:49.850><c> do</c><00:17:49.970><c> a</c><00:17:50.000><c> linear</c>

00:17:50.289 --> 00:17:50.299 align:start position:0%
compiler or runtime has to do a linear
 

00:17:50.299 --> 00:17:53.980 align:start position:0%
compiler or runtime has to do a linear
search<00:17:50.539><c> through</c><00:17:51.340><c> 110</c><00:17:52.340><c> jars</c><00:17:52.669><c> whenever</c><00:17:53.659><c> a</c><00:17:53.750><c> new</c>

00:17:53.980 --> 00:17:53.990 align:start position:0%
search through 110 jars whenever a new
 

00:17:53.990 --> 00:17:56.200 align:start position:0%
search through 110 jars whenever a new
class<00:17:54.260><c> is</c><00:17:54.470><c> needed</c><00:17:54.620><c> of</c><00:17:55.549><c> course</c><00:17:56.059><c> the</c>

00:17:56.200 --> 00:17:56.210 align:start position:0%
class is needed of course the
 

00:17:56.210 --> 00:17:57.909 align:start position:0%
class is needed of course the
implementation<00:17:56.450><c> can</c><00:17:57.169><c> speed</c><00:17:57.500><c> things</c><00:17:57.649><c> up</c><00:17:57.890><c> by</c>

00:17:57.909 --> 00:17:57.919 align:start position:0%
implementation can speed things up by
 

00:17:57.919 --> 00:18:00.460 align:start position:0%
implementation can speed things up by
caching<00:17:58.730><c> the</c><00:17:58.850><c> classes</c><00:17:59.330><c> it</c><00:17:59.450><c> found</c><00:17:59.750><c> when</c><00:18:00.350><c> it</c>

00:18:00.460 --> 00:18:00.470 align:start position:0%
caching the classes it found when it
 

00:18:00.470 --> 00:18:02.289 align:start position:0%
caching the classes it found when it
wasn't<00:18:00.769><c> looking</c><00:18:00.860><c> for</c><00:18:01.190><c> them</c><00:18:01.340><c> but</c><00:18:01.519><c> there's</c>

00:18:02.289 --> 00:18:02.299 align:start position:0%
wasn't looking for them but there's
 

00:18:02.299 --> 00:18:04.539 align:start position:0%
wasn't looking for them but there's
still<00:18:02.570><c> this</c><00:18:02.809><c> nasty</c><00:18:03.320><c> half</c><00:18:03.620><c> here</c><00:18:03.980><c> half</c><00:18:04.010><c> their</c>

00:18:04.539 --> 00:18:04.549 align:start position:0%
still this nasty half here half their
 

00:18:04.549 --> 00:18:07.000 align:start position:0%
still this nasty half here half their
problem<00:18:05.000><c> of</c><00:18:05.120><c> packages</c><00:18:05.600><c> being</c><00:18:05.870><c> split</c><00:18:06.289><c> across</c>

00:18:07.000 --> 00:18:07.010 align:start position:0%
problem of packages being split across
 

00:18:07.010 --> 00:18:09.610 align:start position:0%
problem of packages being split across
multiple<00:18:07.130><c> jars</c><00:18:07.789><c> how</c><00:18:08.120><c> would</c><00:18:08.269><c> you</c><00:18:08.360><c> even</c><00:18:08.620><c> find</c>

00:18:09.610 --> 00:18:09.620 align:start position:0%
multiple jars how would you even find
 

00:18:09.620 --> 00:18:13.180 align:start position:0%
multiple jars how would you even find
out<00:18:09.769><c> that</c><00:18:09.980><c> that's</c><00:18:10.100><c> going</c><00:18:10.340><c> on</c><00:18:11.769><c> if</c><00:18:12.769><c> you</c><00:18:13.010><c> think</c>

00:18:13.180 --> 00:18:13.190 align:start position:0%
out that that's going on if you think
 

00:18:13.190 --> 00:18:15.279 align:start position:0%
out that that's going on if you think
about<00:18:13.399><c> it</c><00:18:13.610><c> the</c><00:18:13.760><c> class</c><00:18:14.090><c> path</c><00:18:14.480><c> is</c><00:18:14.870><c> pretty</c><00:18:15.019><c> crazy</c>

00:18:15.279 --> 00:18:15.289 align:start position:0%
about it the class path is pretty crazy
 

00:18:15.289 --> 00:18:17.919 align:start position:0%
about it the class path is pretty crazy
with<00:18:16.159><c> a</c><00:18:16.220><c> hundred</c><00:18:16.669><c> and</c><00:18:16.789><c> ten</c><00:18:16.970><c> jars</c><00:18:17.269><c> there</c><00:18:17.809><c> are</c>

00:18:17.919 --> 00:18:17.929 align:start position:0%
with a hundred and ten jars there are
 

00:18:17.929 --> 00:18:20.289 align:start position:0%
with a hundred and ten jars there are
over<00:18:18.139><c> 12,000</c><00:18:19.130><c> possible</c><00:18:19.639><c> interactions</c>

00:18:20.289 --> 00:18:20.299 align:start position:0%
over 12,000 possible interactions
 

00:18:20.299 --> 00:18:23.350 align:start position:0%
over 12,000 possible interactions
between<00:18:20.539><c> classes</c><00:18:21.350><c> in</c><00:18:21.559><c> different</c><00:18:21.950><c> jars</c><00:18:22.519><c> each</c>

00:18:23.350 --> 00:18:23.360 align:start position:0%
between classes in different jars each
 

00:18:23.360 --> 00:18:26.680 align:start position:0%
between classes in different jars each
one<00:18:23.779><c> starting</c><00:18:24.409><c> a</c><00:18:24.529><c> linear</c><00:18:24.889><c> search</c><00:18:25.450><c> the</c><00:18:26.450><c> class</c>

00:18:26.680 --> 00:18:26.690 align:start position:0%
one starting a linear search the class
 

00:18:26.690 --> 00:18:29.799 align:start position:0%
one starting a linear search the class
path<00:18:27.019><c> is</c><00:18:27.260><c> the</c><00:18:27.380><c> ultimate</c><00:18:27.889><c> in</c><00:18:28.130><c> erasure</c><00:18:28.809><c> whatever</c>

00:18:29.799 --> 00:18:29.809 align:start position:0%
path is the ultimate in erasure whatever
 

00:18:29.809 --> 00:18:31.029 align:start position:0%
path is the ultimate in erasure whatever
you<00:18:29.990><c> know</c><00:18:30.139><c> about</c><00:18:30.350><c> the</c><00:18:30.500><c> structure</c><00:18:30.919><c> of</c><00:18:31.010><c> your</c>

00:18:31.029 --> 00:18:31.039 align:start position:0%
you know about the structure of your
 

00:18:31.039 --> 00:18:32.830 align:start position:0%
you know about the structure of your
application<00:18:31.309><c> the</c><00:18:31.760><c> class</c><00:18:32.059><c> path</c><00:18:32.360><c> throws</c><00:18:32.720><c> it</c>

00:18:32.830 --> 00:18:32.840 align:start position:0%
application the class path throws it
 

00:18:32.840 --> 00:18:34.629 align:start position:0%
application the class path throws it
away<00:18:32.960><c> and</c><00:18:33.320><c> connects</c><00:18:34.010><c> everything</c><00:18:34.340><c> to</c>

00:18:34.629 --> 00:18:34.639 align:start position:0%
away and connects everything to
 

00:18:34.639 --> 00:18:37.509 align:start position:0%
away and connects everything to
everything<00:18:35.029><c> else</c><00:18:35.470><c> with</c><00:18:36.470><c> modules</c><00:18:36.980><c> you</c><00:18:37.490><c> are</c>

00:18:37.509 --> 00:18:37.519 align:start position:0%
everything else with modules you are
 

00:18:37.519 --> 00:18:40.360 align:start position:0%
everything else with modules you are
telling<00:18:38.179><c> resolution</c><00:18:39.080><c> what</c><00:18:39.830><c> you</c><00:18:40.010><c> know</c><00:18:40.190><c> about</c>

00:18:40.360 --> 00:18:40.370 align:start position:0%
telling resolution what you know about
 

00:18:40.370 --> 00:18:42.669 align:start position:0%
telling resolution what you know about
the<00:18:40.639><c> structure</c><00:18:41.149><c> of</c><00:18:41.510><c> your</c><00:18:41.539><c> application</c><00:18:41.870><c> those</c>

00:18:42.669 --> 00:18:42.679 align:start position:0%
the structure of your application those
 

00:18:42.679 --> 00:18:44.919 align:start position:0%
the structure of your application those
requires<00:18:43.070><c> directives</c><00:18:43.549><c> and</c><00:18:43.760><c> it</c><00:18:44.330><c> uses</c><00:18:44.779><c> that</c>

00:18:44.919 --> 00:18:44.929 align:start position:0%
requires directives and it uses that
 

00:18:44.929 --> 00:18:46.899 align:start position:0%
requires directives and it uses that
information<00:18:45.139><c> to</c><00:18:45.590><c> provide</c><00:18:46.070><c> both</c><00:18:46.309><c> safety</c><00:18:46.669><c> and</c>

00:18:46.899 --> 00:18:46.909 align:start position:0%
information to provide both safety and
 

00:18:46.909 --> 00:18:53.399 align:start position:0%
information to provide both safety and
performance<00:18:47.750><c> at</c><00:18:48.380><c> compile-time</c><00:18:49.220><c> and</c><00:18:49.760><c> run-time</c>

00:18:53.399 --> 00:18:53.409 align:start position:0%
 
 

00:18:53.409 --> 00:18:56.529 align:start position:0%
 
the<00:18:54.409><c> prohibition</c><00:18:55.159><c> of</c><00:18:55.309><c> split</c><00:18:55.669><c> packages</c><00:18:56.269><c> in</c>

00:18:56.529 --> 00:18:56.539 align:start position:0%
the prohibition of split packages in
 

00:18:56.539 --> 00:18:59.169 align:start position:0%
the prohibition of split packages in
modules<00:18:57.139><c> has</c><00:18:57.620><c> an</c><00:18:57.769><c> impact</c><00:18:58.100><c> on</c><00:18:58.309><c> application</c>

00:18:59.169 --> 00:18:59.179 align:start position:0%
modules has an impact on application
 

00:18:59.179 --> 00:19:02.740 align:start position:0%
modules has an impact on application
design<00:18:59.570><c> as</c><00:18:59.899><c> well</c><00:19:00.669><c> one</c><00:19:01.669><c> reason</c><00:19:02.149><c> that</c><00:19:02.179><c> a</c><00:19:02.360><c> package</c>

00:19:02.740 --> 00:19:02.750 align:start position:0%
design as well one reason that a package
 

00:19:02.750 --> 00:19:05.980 align:start position:0%
design as well one reason that a package
might<00:19:03.019><c> have</c><00:19:03.230><c> been</c><00:19:03.409><c> split</c><00:19:03.830><c> across</c><00:19:04.279><c> jars</c><00:19:04.840><c> was</c><00:19:05.840><c> to</c>

00:19:05.980 --> 00:19:05.990 align:start position:0%
might have been split across jars was to
 

00:19:05.990 --> 00:19:08.019 align:start position:0%
might have been split across jars was to
allow<00:19:06.260><c> different</c><00:19:06.320><c> parts</c><00:19:07.159><c> of</c><00:19:07.309><c> an</c><00:19:07.429><c> application</c>

00:19:08.019 --> 00:19:08.029 align:start position:0%
allow different parts of an application
 

00:19:08.029 --> 00:19:10.990 align:start position:0%
allow different parts of an application
to<00:19:08.690><c> share</c><00:19:08.929><c> package</c><00:19:09.470><c> private</c><00:19:09.980><c> code</c><00:19:10.220><c> while</c>

00:19:10.990 --> 00:19:11.000 align:start position:0%
to share package private code while
 

00:19:11.000 --> 00:19:12.490 align:start position:0%
to share package private code while
allowing<00:19:11.539><c> the</c><00:19:11.630><c> parts</c><00:19:12.019><c> to</c><00:19:12.169><c> evolve</c>

00:19:12.490 --> 00:19:12.500 align:start position:0%
allowing the parts to evolve
 

00:19:12.500 --> 00:19:16.210 align:start position:0%
allowing the parts to evolve
independently<00:19:13.779><c> now</c><00:19:14.779><c> these</c><00:19:15.169><c> jars</c><00:19:15.500><c> can't</c><00:19:15.980><c> be</c>

00:19:16.210 --> 00:19:16.220 align:start position:0%
independently now these jars can't be
 

00:19:16.220 --> 00:19:17.799 align:start position:0%
independently now these jars can't be
turned<00:19:16.519><c> into</c><00:19:16.730><c> modules</c><00:19:17.179><c> because</c><00:19:17.419><c> they</c><00:19:17.690><c> would</c>

00:19:17.799 --> 00:19:17.809 align:start position:0%
turned into modules because they would
 

00:19:17.809 --> 00:19:20.379 align:start position:0%
turned into modules because they would
all<00:19:17.960><c> be</c><00:19:18.610><c> exporting</c><00:19:19.610><c> the</c><00:19:19.760><c> same</c><00:19:19.940><c> package</c>

00:19:20.379 --> 00:19:20.389 align:start position:0%
all be exporting the same package
 

00:19:20.389 --> 00:19:22.690 align:start position:0%
all be exporting the same package
however<00:19:21.230><c> the</c><00:19:21.440><c> module</c><00:19:21.769><c> system</c><00:19:22.100><c> has</c><00:19:22.250><c> a</c><00:19:22.279><c> better</c>

00:19:22.690 --> 00:19:22.700 align:start position:0%
however the module system has a better
 

00:19:22.700 --> 00:19:24.909 align:start position:0%
however the module system has a better
way<00:19:23.000><c> to</c><00:19:23.029><c> structure</c><00:19:23.779><c> the</c><00:19:23.870><c> application</c><00:19:23.919><c> than</c>

00:19:24.909 --> 00:19:24.919 align:start position:0%
way to structure the application than
 

00:19:24.919 --> 00:19:29.169 align:start position:0%
way to structure the application than
splitting<00:19:25.250><c> a</c><00:19:25.429><c> package</c><00:19:27.519><c> let</c><00:19:28.519><c> me</c><00:19:28.610><c> set</c><00:19:28.820><c> up</c><00:19:28.940><c> this</c>

00:19:29.169 --> 00:19:29.179 align:start position:0%
splitting a package let me set up this
 

00:19:29.179 --> 00:19:32.620 align:start position:0%
splitting a package let me set up this
scenario<00:19:29.690><c> in</c><00:19:30.019><c> a</c><00:19:30.139><c> bit</c><00:19:30.289><c> more</c><00:19:30.380><c> detail</c><00:19:31.450><c> assume</c><00:19:32.450><c> all</c>

00:19:32.620 --> 00:19:32.630 align:start position:0%
scenario in a bit more detail assume all
 

00:19:32.630 --> 00:19:35.669 align:start position:0%
scenario in a bit more detail assume all
of<00:19:32.809><c> this</c><00:19:32.929><c> takes</c><00:19:33.200><c> place</c><00:19:33.409><c> in</c><00:19:33.529><c> a</c><00:19:33.799><c> pre</c><00:19:34.190><c> JDK</c><00:19:34.880><c> 9</c><00:19:35.120><c> world</c>

00:19:35.669 --> 00:19:35.679 align:start position:0%
of this takes place in a pre JDK 9 world
 

00:19:35.679 --> 00:19:39.370 align:start position:0%
of this takes place in a pre JDK 9 world
so<00:19:36.679><c> on</c><00:19:37.039><c> the</c><00:19:37.490><c> Left</c><00:19:37.639><c> the</c><00:19:38.539><c> application</c><00:19:39.110><c> has</c><00:19:39.230><c> an</c>

00:19:39.370 --> 00:19:39.380 align:start position:0%
so on the Left the application has an
 

00:19:39.380 --> 00:19:42.220 align:start position:0%
so on the Left the application has an
API<00:19:39.940><c> intended</c><00:19:40.940><c> to</c><00:19:41.059><c> be</c><00:19:41.179><c> globally</c><00:19:41.750><c> accessible</c>

00:19:42.220 --> 00:19:42.230 align:start position:0%
API intended to be globally accessible
 

00:19:42.230 --> 00:19:45.340 align:start position:0%
API intended to be globally accessible
it's<00:19:43.190><c> the</c><00:19:43.370><c> public</c><00:19:43.760><c> foo</c><00:19:44.000><c> interface</c><00:19:44.510><c> in</c><00:19:44.870><c> package</c>

00:19:45.340 --> 00:19:45.350 align:start position:0%
it's the public foo interface in package
 

00:19:45.350 --> 00:19:49.000 align:start position:0%
it's the public foo interface in package
P<00:19:46.179><c> the</c><00:19:47.179><c> application</c><00:19:47.720><c> also</c><00:19:47.870><c> has</c><00:19:48.049><c> some</c><00:19:48.529><c> helper</c>

00:19:49.000 --> 00:19:49.010 align:start position:0%
P the application also has some helper
 

00:19:49.010 --> 00:19:51.159 align:start position:0%
P the application also has some helper
code<00:19:49.220><c> which</c><00:19:49.820><c> creates</c><00:19:50.269><c> or</c><00:19:50.480><c> assists</c>

00:19:51.159 --> 00:19:51.169 align:start position:0%
code which creates or assists
 

00:19:51.169 --> 00:19:53.950 align:start position:0%
code which creates or assists
implementations<00:19:52.100><c> of</c><00:19:52.250><c> the</c><00:19:52.429><c> API</c><00:19:52.960><c> ideally</c>

00:19:53.950 --> 00:19:53.960 align:start position:0%
implementations of the API ideally
 

00:19:53.960 --> 00:19:56.350 align:start position:0%
implementations of the API ideally
without<00:19:54.139><c> being</c><00:19:54.770><c> accessible</c><00:19:55.460><c> by</c><00:19:55.639><c> users</c><00:19:56.120><c> of</c><00:19:56.149><c> the</c>

00:19:56.350 --> 00:19:56.360 align:start position:0%
without being accessible by users of the
 

00:19:56.360 --> 00:19:57.590 align:start position:0%
without being accessible by users of the
application

00:19:57.590 --> 00:19:57.600 align:start position:0%
application
 

00:19:57.600 --> 00:20:00.440 align:start position:0%
application
it's<00:19:57.720><c> the</c><00:19:57.840><c> pee</c><00:19:58.020><c> helper</c><00:19:58.350><c> package</c><00:19:58.710><c> and</c><00:19:59.450><c> finally</c>

00:20:00.440 --> 00:20:00.450 align:start position:0%
it's the pee helper package and finally
 

00:20:00.450 --> 00:20:03.549 align:start position:0%
it's the pee helper package and finally
on<00:20:01.260><c> the</c><00:20:01.559><c> right</c><00:20:01.770><c> the</c><00:20:02.370><c> application</c><00:20:02.970><c> has</c>

00:20:03.549 --> 00:20:03.559 align:start position:0%
on the right the application has
 

00:20:03.559 --> 00:20:05.950 align:start position:0%
on the right the application has
implementations<00:20:04.559><c> of</c><00:20:04.890><c> the</c><00:20:05.130><c> API</c><00:20:05.400><c> again</c>

00:20:05.950 --> 00:20:05.960 align:start position:0%
implementations of the API again
 

00:20:05.960 --> 00:20:09.529 align:start position:0%
implementations of the API again
intended<00:20:06.960><c> not</c><00:20:07.260><c> to</c><00:20:07.320><c> be</c><00:20:07.650><c> user</c><00:20:07.919><c> accessible</c><00:20:08.539><c> those</c>

00:20:09.529 --> 00:20:09.539 align:start position:0%
intended not to be user accessible those
 

00:20:09.539 --> 00:20:11.630 align:start position:0%
intended not to be user accessible those
are<00:20:09.690><c> classes</c><00:20:10.140><c> x</c><00:20:10.350><c> and</c><00:20:10.590><c> y</c><00:20:10.740><c> which</c><00:20:11.340><c> live</c><00:20:11.520><c> in</c>

00:20:11.630 --> 00:20:11.640 align:start position:0%
are classes x and y which live in
 

00:20:11.640 --> 00:20:14.150 align:start position:0%
are classes x and y which live in
different<00:20:11.789><c> jar</c><00:20:12.030><c> files</c><00:20:12.330><c> and</c><00:20:12.690><c> implements</c><00:20:13.590><c> the</c><00:20:13.799><c> p</c>

00:20:14.150 --> 00:20:14.160 align:start position:0%
different jar files and implements the p
 

00:20:14.160 --> 00:20:18.320 align:start position:0%
different jar files and implements the p
dot<00:20:14.190><c> foo</c><00:20:14.580><c> api</c><00:20:16.250><c> in</c><00:20:17.250><c> order</c><00:20:17.549><c> for</c><00:20:17.700><c> the</c><00:20:17.789><c> helper</c><00:20:18.120><c> code</c>

00:20:18.320 --> 00:20:18.330 align:start position:0%
dot foo api in order for the helper code
 

00:20:18.330 --> 00:20:20.270 align:start position:0%
dot foo api in order for the helper code
and<00:20:18.660><c> the</c><00:20:18.900><c> implementations</c><00:20:19.559><c> to</c><00:20:19.890><c> work</c><00:20:20.070><c> together</c>

00:20:20.270 --> 00:20:20.280 align:start position:0%
and the implementations to work together
 

00:20:20.280 --> 00:20:22.669 align:start position:0%
and the implementations to work together
they<00:20:20.789><c> need</c><00:20:20.940><c> to</c><00:20:21.000><c> be</c><00:20:21.179><c> in</c><00:20:21.270><c> the</c><00:20:21.360><c> same</c><00:20:21.510><c> package</c><00:20:21.690><c> the</c>

00:20:22.669 --> 00:20:22.679 align:start position:0%
they need to be in the same package the
 

00:20:22.679 --> 00:20:25.159 align:start position:0%
they need to be in the same package the
implementations<00:20:23.640><c> are</c><00:20:23.880><c> definitely</c><00:20:24.539><c> you</c><00:20:25.049><c> would</c>

00:20:25.159 --> 00:20:25.169 align:start position:0%
implementations are definitely you would
 

00:20:25.169 --> 00:20:27.169 align:start position:0%
implementations are definitely you would
definitely<00:20:25.350><c> make</c><00:20:25.679><c> them</c><00:20:25.799><c> package</c><00:20:26.160><c> private</c><00:20:26.610><c> so</c>

00:20:27.169 --> 00:20:27.179 align:start position:0%
definitely make them package private so
 

00:20:27.179 --> 00:20:30.860 align:start position:0%
definitely make them package private so
that<00:20:27.210><c> user</c><00:20:27.510><c> code</c><00:20:27.840><c> can't</c><00:20:28.410><c> access</c><00:20:28.799><c> them</c><00:20:29.570><c> now</c><00:20:30.570><c> the</c>

00:20:30.860 --> 00:20:30.870 align:start position:0%
that user code can't access them now the
 

00:20:30.870 --> 00:20:33.919 align:start position:0%
that user code can't access them now the
helper<00:20:31.200><c> class</c><00:20:31.730><c> foo</c><00:20:32.730><c> helper</c><00:20:33.150><c> is</c><00:20:33.299><c> then</c><00:20:33.480><c> packaged</c>

00:20:33.919 --> 00:20:33.929 align:start position:0%
helper class foo helper is then packaged
 

00:20:33.929 --> 00:20:37.100 align:start position:0%
helper class foo helper is then packaged
private<00:20:34.380><c> -</c><00:20:34.770><c> it</c><00:20:35.070><c> could</c><00:20:35.789><c> be</c><00:20:35.940><c> public</c><00:20:36.090><c> but</c><00:20:36.840><c> then</c><00:20:37.020><c> it</c>

00:20:37.100 --> 00:20:37.110 align:start position:0%
private - it could be public but then it
 

00:20:37.110 --> 00:20:38.750 align:start position:0%
private - it could be public but then it
will<00:20:37.200><c> be</c><00:20:37.289><c> accessible</c><00:20:37.679><c> to</c><00:20:37.799><c> users</c><00:20:38.070><c> and</c><00:20:38.460><c> we</c><00:20:38.580><c> don't</c>

00:20:38.750 --> 00:20:38.760 align:start position:0%
will be accessible to users and we don't
 

00:20:38.760 --> 00:20:43.190 align:start position:0%
will be accessible to users and we don't
want<00:20:38.909><c> that</c><00:20:41.630><c> there's</c><00:20:42.630><c> a</c><00:20:42.690><c> bunch</c><00:20:42.870><c> of</c><00:20:42.990><c> problems</c>

00:20:43.190 --> 00:20:43.200 align:start position:0%
want that there's a bunch of problems
 

00:20:43.200 --> 00:20:45.320 align:start position:0%
want that there's a bunch of problems
with<00:20:43.740><c> this</c><00:20:43.890><c> setup</c><00:20:44.130><c> which</c><00:20:44.520><c> is</c><00:20:44.700><c> really</c><00:20:45.120><c> the</c><00:20:45.210><c> only</c>

00:20:45.320 --> 00:20:45.330 align:start position:0%
with this setup which is really the only
 

00:20:45.330 --> 00:20:48.380 align:start position:0%
with this setup which is really the only
way<00:20:45.570><c> you</c><00:20:45.630><c> had</c><00:20:45.870><c> to</c><00:20:45.960><c> structure</c><00:20:46.789><c> an</c><00:20:47.789><c> application</c>

00:20:48.380 --> 00:20:48.390 align:start position:0%
way you had to structure an application
 

00:20:48.390 --> 00:20:51.860 align:start position:0%
way you had to structure an application
prior<00:20:49.169><c> to</c><00:20:49.320><c> 9</c><00:20:50.059><c> for</c><00:20:51.059><c> one</c><00:20:51.210><c> thing</c><00:20:51.450><c> you've</c><00:20:51.659><c> got</c><00:20:51.840><c> to</c>

00:20:51.860 --> 00:20:51.870 align:start position:0%
prior to 9 for one thing you've got to
 

00:20:51.870 --> 00:20:54.049 align:start position:0%
prior to 9 for one thing you've got to
make<00:20:52.110><c> sure</c><00:20:52.350><c> that</c><00:20:52.620><c> the</c><00:20:52.740><c> implementations</c><00:20:53.610><c> in</c>

00:20:54.049 --> 00:20:54.059 align:start position:0%
make sure that the implementations in
 

00:20:54.059 --> 00:20:57.260 align:start position:0%
make sure that the implementations in
the<00:20:54.900><c> P</c><00:20:55.080><c> helper</c><00:20:55.440><c> package</c><00:20:55.770><c> don't</c><00:20:56.280><c> tread</c><00:20:56.789><c> on</c><00:20:56.820><c> each</c>

00:20:57.260 --> 00:20:57.270 align:start position:0%
the P helper package don't tread on each
 

00:20:57.270 --> 00:21:00.409 align:start position:0%
the P helper package don't tread on each
other's<00:20:57.690><c> toes</c><00:20:58.159><c> there</c><00:20:59.159><c> can't</c><00:20:59.460><c> be</c><00:20:59.610><c> any</c><00:20:59.940><c> class</c>

00:21:00.409 --> 00:21:00.419 align:start position:0%
other's toes there can't be any class
 

00:21:00.419 --> 00:21:02.029 align:start position:0%
other's toes there can't be any class
name<00:21:00.690><c> overlaps</c><00:21:01.140><c> between</c><00:21:01.919><c> the</c>

00:21:02.029 --> 00:21:02.039 align:start position:0%
name overlaps between the
 

00:21:02.039 --> 00:21:03.620 align:start position:0%
name overlaps between the
implementations<00:21:02.669><c> since</c><00:21:03.360><c> they</c><00:21:03.510><c> all</c>

00:21:03.620 --> 00:21:03.630 align:start position:0%
implementations since they all
 

00:21:03.630 --> 00:21:05.960 align:start position:0%
implementations since they all
contribute<00:21:04.169><c> to</c><00:21:04.440><c> the</c><00:21:04.530><c> same</c><00:21:04.710><c> package</c><00:21:04.950><c> P</c><00:21:05.850><c> dot</c>

00:21:05.960 --> 00:21:05.970 align:start position:0%
contribute to the same package P dot
 

00:21:05.970 --> 00:21:07.940 align:start position:0%
contribute to the same package P dot
helper<00:21:06.299><c> despite</c><00:21:07.110><c> living</c><00:21:07.320><c> in</c><00:21:07.500><c> different</c><00:21:07.679><c> jar</c>

00:21:07.940 --> 00:21:07.950 align:start position:0%
helper despite living in different jar
 

00:21:07.950 --> 00:21:12.230 align:start position:0%
helper despite living in different jar
files<00:21:08.220><c> a</c><00:21:10.250><c> second</c><00:21:11.250><c> problem</c><00:21:11.429><c> is</c><00:21:11.669><c> that</c><00:21:11.730><c> you</c><00:21:11.880><c> can't</c>

00:21:12.230 --> 00:21:12.240 align:start position:0%
files a second problem is that you can't
 

00:21:12.240 --> 00:21:15.100 align:start position:0%
files a second problem is that you can't
make<00:21:12.419><c> effective</c><00:21:13.140><c> use</c><00:21:13.380><c> of</c><00:21:13.409><c> sub</c><00:21:14.010><c> packages</c><00:21:14.610><c> as</c>

00:21:15.100 --> 00:21:15.110 align:start position:0%
make effective use of sub packages as
 

00:21:15.110 --> 00:21:17.720 align:start position:0%
make effective use of sub packages as
these<00:21:16.110><c> implementations</c><00:21:16.890><c> grow</c><00:21:17.130><c> larger</c><00:21:17.580><c> it</c>

00:21:17.720 --> 00:21:17.730 align:start position:0%
these implementations grow larger it
 

00:21:17.730 --> 00:21:20.029 align:start position:0%
these implementations grow larger it
will<00:21:17.909><c> be</c><00:21:18.030><c> natural</c><00:21:18.240><c> for</c><00:21:18.870><c> them</c><00:21:19.320><c> to</c><00:21:19.350><c> introduce</c>

00:21:20.029 --> 00:21:20.039 align:start position:0%
will be natural for them to introduce
 

00:21:20.039 --> 00:21:23.149 align:start position:0%
will be natural for them to introduce
sub<00:21:20.309><c> packages</c><00:21:21.080><c> but</c><00:21:22.080><c> some</c><00:21:22.350><c> packages</c><00:21:22.830><c> can't</c>

00:21:23.149 --> 00:21:23.159 align:start position:0%
sub packages but some packages can't
 

00:21:23.159 --> 00:21:25.940 align:start position:0%
sub packages but some packages can't
access<00:21:23.669><c> the</c><00:21:23.850><c> package</c><00:21:24.240><c> private</c><00:21:24.690><c> code</c><00:21:24.929><c> in</c><00:21:25.230><c> P</c><00:21:25.770><c> dot</c>

00:21:25.940 --> 00:21:25.950 align:start position:0%
access the package private code in P dot
 

00:21:25.950 --> 00:21:28.669 align:start position:0%
access the package private code in P dot
helper<00:21:26.309><c> so</c><00:21:27.030><c> you</c><00:21:27.090><c> really</c><00:21:27.720><c> would</c><00:21:27.929><c> need</c><00:21:28.110><c> a</c><00:21:28.140><c> public</c>

00:21:28.669 --> 00:21:28.679 align:start position:0%
helper so you really would need a public
 

00:21:28.679 --> 00:21:30.799 align:start position:0%
helper so you really would need a public
class<00:21:28.830><c> in</c><00:21:29.100><c> P</c><00:21:29.250><c> dot</c><00:21:29.400><c> helper</c><00:21:29.760><c> to</c><00:21:30.450><c> act</c><00:21:30.600><c> as</c><00:21:30.780><c> a</c>

00:21:30.799 --> 00:21:30.809 align:start position:0%
class in P dot helper to act as a
 

00:21:30.809 --> 00:21:33.470 align:start position:0%
class in P dot helper to act as a
backdoor<00:21:31.380><c> for</c><00:21:31.679><c> some</c><00:21:31.919><c> packages</c><00:21:32.460><c> living</c><00:21:33.299><c> in</c><00:21:33.390><c> the</c>

00:21:33.470 --> 00:21:33.480 align:start position:0%
backdoor for some packages living in the
 

00:21:33.480 --> 00:21:34.760 align:start position:0%
backdoor for some packages living in the
implementations<00:21:34.169><c> but</c><00:21:34.470><c> then</c><00:21:34.620><c> of</c><00:21:34.740><c> course</c>

00:21:34.760 --> 00:21:34.770 align:start position:0%
implementations but then of course
 

00:21:34.770 --> 00:21:37.190 align:start position:0%
implementations but then of course
anyone<00:21:35.190><c> in</c><00:21:35.400><c> the</c><00:21:35.490><c> world</c><00:21:35.640><c> can</c><00:21:36.270><c> get</c><00:21:36.960><c> to</c><00:21:37.110><c> the</c>

00:21:37.190 --> 00:21:37.200 align:start position:0%
anyone in the world can get to the
 

00:21:37.200 --> 00:21:41.779 align:start position:0%
anyone in the world can get to the
backdoor<00:21:37.380><c> as</c><00:21:38.280><c> well</c><00:21:38.490><c> a</c><00:21:40.220><c> third</c><00:21:41.220><c> problem</c><00:21:41.490><c> of</c>

00:21:41.779 --> 00:21:41.789 align:start position:0%
backdoor as well a third problem of
 

00:21:41.789 --> 00:21:43.610 align:start position:0%
backdoor as well a third problem of
course<00:21:42.000><c> is</c><00:21:42.150><c> that</c><00:21:42.270><c> anyone</c><00:21:42.750><c> can</c><00:21:42.809><c> make</c><00:21:43.110><c> a</c><00:21:43.260><c> jar</c>

00:21:43.610 --> 00:21:43.620 align:start position:0%
course is that anyone can make a jar
 

00:21:43.620 --> 00:21:46.220 align:start position:0%
course is that anyone can make a jar
with<00:21:43.890><c> classes</c><00:21:44.429><c> in</c><00:21:44.669><c> the</c><00:21:44.850><c> p</c><00:21:45.000><c> dot</c><00:21:45.179><c> helper</c><00:21:45.539><c> package</c>

00:21:46.220 --> 00:21:46.230 align:start position:0%
with classes in the p dot helper package
 

00:21:46.230 --> 00:21:48.680 align:start position:0%
with classes in the p dot helper package
and<00:21:46.440><c> start</c><00:21:47.010><c> relying</c><00:21:47.340><c> on</c><00:21:47.520><c> the</c><00:21:48.000><c> helper</c><00:21:48.299><c> code</c><00:21:48.510><c> in</c>

00:21:48.680 --> 00:21:48.690 align:start position:0%
and start relying on the helper code in
 

00:21:48.690 --> 00:21:51.980 align:start position:0%
and start relying on the helper code in
the<00:21:48.780><c> api</c><00:21:49.049><c> jar</c><00:21:49.470><c> and</c><00:21:49.679><c> the</c><00:21:50.130><c> details</c><00:21:50.580><c> of</c><00:21:50.909><c> classes</c><00:21:51.750><c> x</c>

00:21:51.980 --> 00:21:51.990 align:start position:0%
the api jar and the details of classes x
 

00:21:51.990 --> 00:21:57.890 align:start position:0%
the api jar and the details of classes x
and<00:21:52.260><c> y</c><00:21:52.409><c> in</c><00:21:52.740><c> the</c><00:21:53.220><c> implementation</c><00:21:53.520><c> jars</c>

00:21:57.890 --> 00:21:57.900 align:start position:0%
 
 

00:21:57.900 --> 00:22:01.160 align:start position:0%
 
what's<00:21:58.620><c> really</c><00:21:58.980><c> going</c><00:21:59.340><c> on</c><00:21:59.670><c> here</c><00:22:00.150><c> is</c><00:22:00.330><c> that</c><00:22:00.870><c> the</c>

00:22:01.160 --> 00:22:01.170 align:start position:0%
what's really going on here is that the
 

00:22:01.170 --> 00:22:03.500 align:start position:0%
what's really going on here is that the
package<00:22:01.559><c> P</c><00:22:01.830><c> dot</c><00:22:01.980><c> helper</c><00:22:02.370><c> is</c><00:22:02.520><c> being</c><00:22:02.820><c> overloaded</c>

00:22:03.500 --> 00:22:03.510 align:start position:0%
package P dot helper is being overloaded
 

00:22:03.510 --> 00:22:06.680 align:start position:0%
package P dot helper is being overloaded
it<00:22:04.500><c> started</c><00:22:05.190><c> life</c><00:22:05.400><c> as</c><00:22:05.610><c> a</c><00:22:05.670><c> simple</c><00:22:06.150><c> namespace</c>

00:22:06.680 --> 00:22:06.690 align:start position:0%
it started life as a simple namespace
 

00:22:06.690 --> 00:22:10.280 align:start position:0%
it started life as a simple namespace
for<00:22:07.050><c> code</c><00:22:07.740><c> that</c><00:22:08.040><c> helps</c><00:22:08.309><c> the</c><00:22:08.580><c> API</c><00:22:08.990><c> but</c><00:22:09.990><c> now</c><00:22:10.140><c> it</c>

00:22:10.280 --> 00:22:10.290 align:start position:0%
for code that helps the API but now it
 

00:22:10.290 --> 00:22:12.980 align:start position:0%
for code that helps the API but now it
finds<00:22:10.650><c> itself</c><00:22:10.980><c> being</c><00:22:11.309><c> the</c><00:22:11.820><c> unnatural</c><00:22:12.330><c> home</c>

00:22:12.980 --> 00:22:12.990 align:start position:0%
finds itself being the unnatural home
 

00:22:12.990 --> 00:22:15.220 align:start position:0%
finds itself being the unnatural home
for<00:22:13.290><c> all</c><00:22:13.380><c> kinds</c><00:22:13.740><c> of</c><00:22:13.830><c> vaguely</c><00:22:14.100><c> related</c><00:22:14.700><c> things</c>

00:22:15.220 --> 00:22:15.230 align:start position:0%
for all kinds of vaguely related things
 

00:22:15.230 --> 00:22:17.990 align:start position:0%
for all kinds of vaguely related things
what<00:22:16.230><c> was</c><00:22:16.380><c> the</c><00:22:16.590><c> developer</c><00:22:17.250><c> meant</c><00:22:17.400><c> to</c><00:22:17.490><c> do</c><00:22:17.640><c> in</c>

00:22:17.990 --> 00:22:18.000 align:start position:0%
what was the developer meant to do in
 

00:22:18.000 --> 00:22:20.810 align:start position:0%
what was the developer meant to do in
JDK<00:22:18.750><c> 8</c><00:22:18.780><c> the</c><00:22:19.140><c> only</c><00:22:19.410><c> structuring</c><00:22:20.160><c> mechanisms</c>

00:22:20.810 --> 00:22:20.820 align:start position:0%
JDK 8 the only structuring mechanisms
 

00:22:20.820 --> 00:22:23.080 align:start position:0%
JDK 8 the only structuring mechanisms
were<00:22:21.030><c> classes</c><00:22:21.690><c> interfaces</c><00:22:21.930><c> and</c><00:22:22.440><c> packages</c>

00:22:23.080 --> 00:22:23.090 align:start position:0%
were classes interfaces and packages
 

00:22:23.090 --> 00:22:25.430 align:start position:0%
were classes interfaces and packages
splitting<00:22:24.090><c> the</c><00:22:24.210><c> package</c><00:22:24.540><c> across</c><00:22:24.809><c> jar</c><00:22:25.170><c> files</c>

00:22:25.430 --> 00:22:25.440 align:start position:0%
splitting the package across jar files
 

00:22:25.440 --> 00:22:28.220 align:start position:0%
splitting the package across jar files
was<00:22:25.860><c> seen</c><00:22:26.100><c> as</c><00:22:26.280><c> acceptable</c><00:22:26.809><c> but</c><00:22:27.809><c> you</c><00:22:27.870><c> can</c><00:22:28.050><c> see</c>

00:22:28.220 --> 00:22:28.230 align:start position:0%
was seen as acceptable but you can see
 

00:22:28.230 --> 00:22:31.490 align:start position:0%
was seen as acceptable but you can see
that<00:22:28.380><c> it</c><00:22:28.470><c> has</c><00:22:28.500><c> a</c><00:22:28.650><c> host</c><00:22:28.980><c> of</c><00:22:29.250><c> downsides</c><00:22:30.500><c> in</c>

00:22:31.490 --> 00:22:31.500 align:start position:0%
that it has a host of downsides in
 

00:22:31.500 --> 00:22:33.980 align:start position:0%
that it has a host of downsides in
jeddah<00:22:32.070><c> canine</c><00:22:32.429><c> the</c><00:22:33.030><c> structuring</c><00:22:33.510><c> mechanisms</c>

00:22:33.980 --> 00:22:33.990 align:start position:0%
jeddah canine the structuring mechanisms
 

00:22:33.990 --> 00:22:36.040 align:start position:0%
jeddah canine the structuring mechanisms
are<00:22:34.170><c> classes</c><00:22:34.710><c> interfaces</c><00:22:34.980><c> packages</c><00:22:35.880><c> and</c>

00:22:36.040 --> 00:22:36.050 align:start position:0%
are classes interfaces packages and
 

00:22:36.050 --> 00:22:40.010 align:start position:0%
are classes interfaces packages and
modules<00:22:37.580><c> modules</c><00:22:38.580><c> take</c><00:22:38.910><c> the</c><00:22:39.179><c> strain</c><00:22:39.630><c> of</c>

00:22:40.010 --> 00:22:40.020 align:start position:0%
modules modules take the strain of
 

00:22:40.020 --> 00:22:42.260 align:start position:0%
modules modules take the strain of
encapsulation<00:22:40.770><c> and</c><00:22:41.190><c> concealment</c>

00:22:42.260 --> 00:22:42.270 align:start position:0%
encapsulation and concealment
 

00:22:42.270 --> 00:22:45.560 align:start position:0%
encapsulation and concealment
so<00:22:42.960><c> that</c><00:22:43.140><c> packages</c><00:22:43.770><c> can</c><00:22:44.040><c> focus</c><00:22:44.340><c> solely</c><00:22:44.730><c> on</c>

00:22:45.560 --> 00:22:45.570 align:start position:0%
so that packages can focus solely on
 

00:22:45.570 --> 00:22:48.110 align:start position:0%
so that packages can focus solely on
being<00:22:46.050><c> namespaces</c><00:22:46.950><c> that</c><00:22:47.160><c> are</c><00:22:47.550><c> meaning</c><00:22:47.850><c> that</c><00:22:48.059><c> a</c>

00:22:48.110 --> 00:22:48.120 align:start position:0%
being namespaces that are meaning that a
 

00:22:48.120 --> 00:22:52.640 align:start position:0%
being namespaces that are meaning that a
meaningful<00:22:48.480><c> to</c><00:22:49.020><c> the</c><00:22:49.140><c> developer</c><00:22:51.410><c> so</c><00:22:52.410><c> here's</c>

00:22:52.640 --> 00:22:52.650 align:start position:0%
meaningful to the developer so here's
 

00:22:52.650 --> 00:22:54.650 align:start position:0%
meaningful to the developer so here's
the<00:22:52.800><c> same</c><00:22:52.980><c> application</c><00:22:53.640><c> developed</c><00:22:54.540><c> as</c>

00:22:54.650 --> 00:22:54.660 align:start position:0%
the same application developed as
 

00:22:54.660 --> 00:22:59.540 align:start position:0%
the same application developed as
modules<00:22:55.610><c> let's</c><00:22:56.610><c> turn</c><00:22:57.059><c> API</c><00:22:57.929><c> jar</c><00:22:58.530><c> into</c><00:22:59.309><c> a</c>

00:22:59.540 --> 00:22:59.550 align:start position:0%
modules let's turn API jar into a
 

00:22:59.550 --> 00:23:01.370 align:start position:0%
modules let's turn API jar into a
modular<00:22:59.820><c> jar</c><00:23:00.270><c> by</c><00:23:00.809><c> adding</c><00:23:01.170><c> a</c><00:23:01.230><c> module</c>

00:23:01.370 --> 00:23:01.380 align:start position:0%
modular jar by adding a module
 

00:23:01.380 --> 00:23:03.580 align:start position:0%
modular jar by adding a module
declaration<00:23:02.160><c> I'm</c><00:23:02.670><c> going</c><00:23:02.850><c> to</c><00:23:02.910><c> show</c><00:23:03.030><c> it</c><00:23:03.179><c> here</c>

00:23:03.580 --> 00:23:03.590 align:start position:0%
declaration I'm going to show it here
 

00:23:03.590 --> 00:23:07.190 align:start position:0%
declaration I'm going to show it here
the<00:23:04.590><c> module</c><00:23:04.920><c> called</c><00:23:05.280><c> API</c><00:23:06.080><c> exports</c><00:23:07.080><c> the</c>

00:23:07.190 --> 00:23:07.200 align:start position:0%
the module called API exports the
 

00:23:07.200 --> 00:23:10.790 align:start position:0%
the module called API exports the
package<00:23:07.580><c> p2</c><00:23:08.580><c> everyone</c><00:23:09.090><c> that's</c><00:23:09.960><c> the</c><00:23:10.200><c> main</c><00:23:10.500><c> API</c>

00:23:10.790 --> 00:23:10.800 align:start position:0%
package p2 everyone that's the main API
 

00:23:10.800 --> 00:23:13.760 align:start position:0%
package p2 everyone that's the main API
and<00:23:11.330><c> exports</c><00:23:12.330><c> the</c><00:23:12.510><c> helper</c><00:23:12.990><c> package</c><00:23:13.380><c> P</c><00:23:13.620><c> dot</c>

00:23:13.760 --> 00:23:13.770 align:start position:0%
and exports the helper package P dot
 

00:23:13.770 --> 00:23:17.660 align:start position:0%
and exports the helper package P dot
helper<00:23:14.130><c> to</c><00:23:14.700><c> its</c><00:23:14.880><c> friend</c><00:23:15.530><c> modules</c><00:23:16.530><c> import</c><00:23:17.490><c> one</c>

00:23:17.660 --> 00:23:17.670 align:start position:0%
helper to its friend modules import one
 

00:23:17.670 --> 00:23:23.270 align:start position:0%
helper to its friend modules import one
and<00:23:17.910><c> imple</c><00:23:18.660><c> to</c><00:23:20.420><c> the</c><00:23:21.420><c> second</c><00:23:21.900><c> export</c><00:23:22.620><c> directive</c>

00:23:23.270 --> 00:23:23.280 align:start position:0%
and imple to the second export directive
 

00:23:23.280 --> 00:23:25.299 align:start position:0%
and imple to the second export directive
of<00:23:23.520><c> Petr</c><00:23:24.030><c> helper</c><00:23:24.450><c> is</c><00:23:24.600><c> called</c><00:23:24.870><c> a</c><00:23:24.990><c> qualified</c>

00:23:25.299 --> 00:23:25.309 align:start position:0%
of Petr helper is called a qualified
 

00:23:25.309 --> 00:23:29.270 align:start position:0%
of Petr helper is called a qualified
exports<00:23:26.309><c> any</c><00:23:27.210><c> module</c><00:23:27.900><c> in</c><00:23:28.170><c> the</c><00:23:28.440><c> world</c><00:23:28.740><c> can</c>

00:23:29.270 --> 00:23:29.280 align:start position:0%
exports any module in the world can
 

00:23:29.280 --> 00:23:33.110 align:start position:0%
exports any module in the world can
require<00:23:29.820><c> the</c><00:23:30.179><c> API</c><00:23:30.570><c> module</c><00:23:31.140><c> and</c><00:23:31.520><c> access</c><00:23:32.520><c> the</c>

00:23:33.110 --> 00:23:33.120 align:start position:0%
require the API module and access the
 

00:23:33.120 --> 00:23:36.290 align:start position:0%
require the API module and access the
package<00:23:33.450><c> P</c><00:23:33.860><c> but</c><00:23:34.860><c> only</c><00:23:35.040><c> the</c><00:23:35.370><c> friend</c><00:23:35.760><c> modules</c>

00:23:36.290 --> 00:23:36.300 align:start position:0%
package P but only the friend modules
 

00:23:36.300 --> 00:23:40.160 align:start position:0%
package P but only the friend modules
can<00:23:36.929><c> access</c><00:23:37.380><c> the</c><00:23:37.530><c> package</c><00:23:37.920><c> P</c><00:23:38.340><c> dot</c><00:23:38.490><c> helper</c><00:23:39.170><c> now</c>

00:23:40.160 --> 00:23:40.170 align:start position:0%
can access the package P dot helper now
 

00:23:40.170 --> 00:23:42.620 align:start position:0%
can access the package P dot helper now
I'm<00:23:40.410><c> not</c><00:23:40.559><c> showing</c><00:23:41.040><c> the</c><00:23:41.220><c> module</c><00:23:41.610><c> direction</c><00:23:42.120><c> I'm</c>

00:23:42.620 --> 00:23:42.630 align:start position:0%
I'm not showing the module direction I'm
 

00:23:42.630 --> 00:23:45.020 align:start position:0%
I'm not showing the module direction I'm
not<00:23:42.780><c> showing</c><00:23:43.020><c> the</c><00:23:43.140><c> module</c><00:23:43.559><c> declarations</c><00:23:44.250><c> for</c>

00:23:45.020 --> 00:23:45.030 align:start position:0%
not showing the module declarations for
 

00:23:45.030 --> 00:23:46.760 align:start position:0%
not showing the module declarations for
the<00:23:45.210><c> friend</c><00:23:45.420><c> modules</c><00:23:45.900><c> but</c><00:23:46.530><c> they</c><00:23:46.620><c> will</c>

00:23:46.760 --> 00:23:46.770 align:start position:0%
the friend modules but they will
 

00:23:46.770 --> 00:23:49.580 align:start position:0%
the friend modules but they will
obviously<00:23:46.950><c> require</c><00:23:47.370><c> the</c><00:23:48.210><c> API</c><00:23:48.540><c> module</c><00:23:49.020><c> in</c>

00:23:49.580 --> 00:23:49.590 align:start position:0%
obviously require the API module in
 

00:23:49.590 --> 00:23:53.870 align:start position:0%
obviously require the API module in
order<00:23:49.890><c> to</c><00:23:50.220><c> access</c><00:23:50.400><c> the</c><00:23:51.559><c> p</c><00:23:52.559><c> dot</c><00:23:52.590><c> foo</c><00:23:53.160><c> interface</c>

00:23:53.870 --> 00:23:53.880 align:start position:0%
order to access the p dot foo interface
 

00:23:53.880 --> 00:23:57.560 align:start position:0%
order to access the p dot foo interface
that<00:23:54.600><c> they</c><00:23:54.750><c> implements</c><00:23:55.760><c> the</c><00:23:56.760><c> friend</c><00:23:57.059><c> modules</c>

00:23:57.560 --> 00:23:57.570 align:start position:0%
that they implements the friend modules
 

00:23:57.570 --> 00:23:59.990 align:start position:0%
that they implements the friend modules
won't<00:23:57.929><c> export</c><00:23:58.740><c> anything</c><00:23:59.250><c> and</c><00:23:59.429><c> they</c><00:23:59.970><c> can</c>

00:23:59.990 --> 00:24:00.000 align:start position:0%
won't export anything and they can
 

00:24:00.000 --> 00:24:02.750 align:start position:0%
won't export anything and they can
organize<00:24:00.780><c> their</c><00:24:01.200><c> concealed</c><00:24:01.830><c> packages</c><00:24:02.580><c> as</c>

00:24:02.750 --> 00:24:02.760 align:start position:0%
organize their concealed packages as
 

00:24:02.760 --> 00:24:07.490 align:start position:0%
organize their concealed packages as
they<00:24:03.360><c> wish</c><00:24:04.910><c> now</c><00:24:05.910><c> the</c><00:24:05.970><c> P</c><00:24:06.540><c> dot</c><00:24:06.720><c> helper</c><00:24:07.110><c> package</c>

00:24:07.490 --> 00:24:07.500 align:start position:0%
they wish now the P dot helper package
 

00:24:07.500 --> 00:24:10.250 align:start position:0%
they wish now the P dot helper package
isn't<00:24:07.970><c> overloaded</c><00:24:08.970><c> with</c><00:24:09.840><c> implementation</c>

00:24:10.250 --> 00:24:10.260 align:start position:0%
isn't overloaded with implementation
 

00:24:10.260 --> 00:24:11.400 align:start position:0%
isn't overloaded with implementation
classes

00:24:11.400 --> 00:24:11.410 align:start position:0%
classes
 

00:24:11.410 --> 00:24:14.850 align:start position:0%
classes
multiple<00:24:11.860><c> jars</c><00:24:12.450><c> the</c><00:24:13.450><c> naming</c><00:24:13.930><c> of</c><00:24:14.080><c> packages</c><00:24:14.650><c> is</c>

00:24:14.850 --> 00:24:14.860 align:start position:0%
multiple jars the naming of packages is
 

00:24:14.860 --> 00:24:18.240 align:start position:0%
multiple jars the naming of packages is
much<00:24:15.400><c> clearer</c><00:24:16.140><c> throughout</c><00:24:17.140><c> all</c><00:24:17.380><c> three</c><00:24:17.860><c> jars</c>

00:24:18.240 --> 00:24:18.250 align:start position:0%
much clearer throughout all three jars
 

00:24:18.250 --> 00:24:21.390 align:start position:0%
much clearer throughout all three jars
and<00:24:18.670><c> more</c><00:24:19.660><c> implementations</c><00:24:20.590><c> can</c><00:24:20.800><c> be</c><00:24:21.160><c> added</c>

00:24:21.390 --> 00:24:21.400 align:start position:0%
and more implementations can be added
 

00:24:21.400 --> 00:24:25.710 align:start position:0%
and more implementations can be added
smoothly<00:24:21.870><c> in</c><00:24:22.870><c> effect</c><00:24:23.580><c> modules</c><00:24:24.580><c> make</c><00:24:25.000><c> packages</c>

00:24:25.710 --> 00:24:25.720 align:start position:0%
smoothly in effect modules make packages
 

00:24:25.720 --> 00:24:29.190 align:start position:0%
smoothly in effect modules make packages
as<00:24:25.900><c> cheap</c><00:24:26.350><c> as</c><00:24:26.560><c> classes</c><00:24:27.310><c> and</c><00:24:27.640><c> then</c><00:24:28.390><c> control</c><00:24:28.960><c> the</c>

00:24:29.190 --> 00:24:29.200 align:start position:0%
as cheap as classes and then control the
 

00:24:29.200 --> 00:24:36.050 align:start position:0%
as cheap as classes and then control the
reuse<00:24:29.590><c> of</c><00:24:29.620><c> packages</c><00:24:30.400><c> very</c><00:24:31.090><c> precisely</c><00:24:34.440><c> so</c><00:24:35.440><c> a</c>

00:24:36.050 --> 00:24:36.060 align:start position:0%
reuse of packages very precisely so a
 

00:24:36.060 --> 00:24:38.610 align:start position:0%
reuse of packages very precisely so a
module<00:24:37.060><c> is</c><00:24:37.210><c> a</c><00:24:37.240><c> set</c><00:24:37.510><c> of</c><00:24:37.630><c> packages</c><00:24:37.960><c> designed</c><00:24:38.260><c> for</c>

00:24:38.610 --> 00:24:38.620 align:start position:0%
module is a set of packages designed for
 

00:24:38.620 --> 00:24:41.370 align:start position:0%
module is a set of packages designed for
reuse<00:24:39.090><c> they</c><00:24:40.090><c> offer</c><00:24:40.240><c> strong</c><00:24:40.720><c> encapsulation</c>

00:24:41.370 --> 00:24:41.380 align:start position:0%
reuse they offer strong encapsulation
 

00:24:41.380 --> 00:24:45.210 align:start position:0%
reuse they offer strong encapsulation
and<00:24:41.770><c> reliable</c><00:24:42.730><c> dependencies</c><00:24:43.450><c> and</c><00:24:44.220><c> the</c>

00:24:45.210 --> 00:24:45.220 align:start position:0%
and reliable dependencies and the
 

00:24:45.220 --> 00:24:47.700 align:start position:0%
and reliable dependencies and the
tooling<00:24:45.820><c> the</c><00:24:46.060><c> command-line</c><00:24:46.540><c> tool</c><00:24:46.870><c> in</c><00:24:47.020><c> VI</c><00:24:47.170><c> des</c>

00:24:47.700 --> 00:24:47.710 align:start position:0%
tooling the command-line tool in VI des
 

00:24:47.710 --> 00:24:50.280 align:start position:0%
tooling the command-line tool in VI des
will<00:24:48.040><c> be</c><00:24:48.280><c> a</c><00:24:48.310><c> big</c><00:24:48.730><c> parts</c><00:24:49.240><c> of</c><00:24:49.330><c> modular</c>

00:24:50.280 --> 00:24:50.290 align:start position:0%
will be a big parts of modular
 

00:24:50.290 --> 00:24:57.390 align:start position:0%
will be a big parts of modular
developments<00:24:53.550><c> part</c><00:24:54.550><c> two</c><00:24:55.950><c> will</c><00:24:56.950><c> talk</c><00:24:57.190><c> now</c>

00:24:57.390 --> 00:24:57.400 align:start position:0%
developments part two will talk now
 

00:24:57.400 --> 00:24:59.160 align:start position:0%
developments part two will talk now
about<00:24:57.640><c> how</c><00:24:57.850><c> to</c><00:24:58.090><c> take</c><00:24:58.420><c> an</c><00:24:58.570><c> existing</c>

00:24:59.160 --> 00:24:59.170 align:start position:0%
about how to take an existing
 

00:24:59.170 --> 00:25:02.390 align:start position:0%
about how to take an existing
application<00:24:59.380><c> and</c><00:25:00.160><c> migrate</c><00:25:01.150><c> it</c><00:25:01.300><c> to</c><00:25:01.330><c> modules</c>

00:25:02.390 --> 00:25:02.400 align:start position:0%
application and migrate it to modules
 

00:25:02.400 --> 00:25:05.460 align:start position:0%
application and migrate it to modules
since<00:25:03.400><c> it's</c><00:25:03.610><c> impossible</c><00:25:03.970><c> to</c><00:25:04.540><c> modularize</c><00:25:04.810><c> the</c>

00:25:05.460 --> 00:25:05.470 align:start position:0%
since it's impossible to modularize the
 

00:25:05.470 --> 00:25:07.770 align:start position:0%
since it's impossible to modularize the
Java<00:25:05.680><c> ecosystem</c><00:25:06.400><c> all</c><00:25:06.520><c> at</c><00:25:06.640><c> once</c><00:25:06.820><c> we're</c><00:25:07.540><c> going</c>

00:25:07.770 --> 00:25:07.780 align:start position:0%
Java ecosystem all at once we're going
 

00:25:07.780 --> 00:25:09.240 align:start position:0%
Java ecosystem all at once we're going
to<00:25:07.870><c> be</c><00:25:07.990><c> living</c><00:25:08.290><c> with</c><00:25:08.440><c> a</c><00:25:08.470><c> combination</c><00:25:08.860><c> of</c>

00:25:09.240 --> 00:25:09.250 align:start position:0%
to be living with a combination of
 

00:25:09.250 --> 00:25:11.610 align:start position:0%
to be living with a combination of
modular<00:25:09.730><c> code</c><00:25:09.940><c> that's</c><00:25:10.330><c> modular</c><00:25:10.750><c> jars</c><00:25:10.990><c> on</c><00:25:11.380><c> the</c>

00:25:11.610 --> 00:25:11.620 align:start position:0%
modular code that's modular jars on the
 

00:25:11.620 --> 00:25:13.830 align:start position:0%
modular code that's modular jars on the
module<00:25:11.920><c> path</c><00:25:12.160><c> and</c><00:25:12.520><c> non</c><00:25:13.120><c> modular</c><00:25:13.630><c> code</c>

00:25:13.830 --> 00:25:13.840 align:start position:0%
module path and non modular code
 

00:25:13.840 --> 00:25:16.350 align:start position:0%
module path and non modular code
traditional<00:25:14.650><c> jars</c><00:25:14.920><c> on</c><00:25:15.070><c> the</c><00:25:15.160><c> class</c><00:25:15.370><c> path</c><00:25:15.670><c> for</c><00:25:16.330><c> a</c>

00:25:16.350 --> 00:25:16.360 align:start position:0%
traditional jars on the class path for a
 

00:25:16.360 --> 00:25:19.770 align:start position:0%
traditional jars on the class path for a
while<00:25:16.630><c> that's</c><00:25:17.440><c> fine</c><00:25:17.860><c> and</c><00:25:18.130><c> JDK</c><00:25:18.700><c> nine</c><00:25:19.060><c> can</c><00:25:19.480><c> ease</c>

00:25:19.770 --> 00:25:19.780 align:start position:0%
while that's fine and JDK nine can ease
 

00:25:19.780 --> 00:25:21.660 align:start position:0%
while that's fine and JDK nine can ease
that<00:25:20.020><c> migration</c><00:25:20.410><c> that's</c><00:25:21.010><c> what</c><00:25:21.280><c> this</c><00:25:21.400><c> section</c>

00:25:21.660 --> 00:25:21.670 align:start position:0%
that migration that's what this section
 

00:25:21.670 --> 00:25:25.890 align:start position:0%
that migration that's what this section
is<00:25:22.000><c> about</c><00:25:24.180><c> we'll</c><00:25:25.180><c> start</c><00:25:25.480><c> with</c><00:25:25.660><c> a</c><00:25:25.690><c> simple</c>

00:25:25.890 --> 00:25:25.900 align:start position:0%
is about we'll start with a simple
 

00:25:25.900 --> 00:25:28.020 align:start position:0%
is about we'll start with a simple
application<00:25:26.620><c> that</c><00:25:26.650><c> we</c><00:25:26.980><c> want</c><00:25:27.190><c> to</c><00:25:27.280><c> migrate</c><00:25:27.820><c> from</c>

00:25:28.020 --> 00:25:28.030 align:start position:0%
application that we want to migrate from
 

00:25:28.030 --> 00:25:31.860 align:start position:0%
application that we want to migrate from
the<00:25:28.720><c> class</c><00:25:28.930><c> path</c><00:25:29.550><c> at</c><00:25:30.550><c> heart</c><00:25:30.910><c> a</c><00:25:31.120><c> typical</c><00:25:31.690><c> Java</c>

00:25:31.860 --> 00:25:31.870 align:start position:0%
the class path at heart a typical Java
 

00:25:31.870 --> 00:25:34.650 align:start position:0%
the class path at heart a typical Java
application<00:25:32.560><c> has</c><00:25:32.800><c> three</c><00:25:33.220><c> layers</c><00:25:33.370><c> at</c><00:25:34.300><c> the</c><00:25:34.450><c> top</c>

00:25:34.650 --> 00:25:34.660 align:start position:0%
application has three layers at the top
 

00:25:34.660 --> 00:25:36.570 align:start position:0%
application has three layers at the top
are<00:25:34.840><c> your</c><00:25:34.990><c> application</c><00:25:35.650><c> jars</c><00:25:35.890><c> there</c><00:25:36.400><c> might</c><00:25:36.550><c> be</c>

00:25:36.570 --> 00:25:36.580 align:start position:0%
are your application jars there might be
 

00:25:36.580 --> 00:25:38.640 align:start position:0%
are your application jars there might be
one<00:25:36.790><c> or</c><00:25:36.910><c> more</c><00:25:36.940><c> of</c><00:25:37.180><c> these</c><00:25:37.300><c> at</c><00:25:38.110><c> the</c><00:25:38.200><c> bottom</c><00:25:38.560><c> is</c>

00:25:38.640 --> 00:25:38.650 align:start position:0%
one or more of these at the bottom is
 

00:25:38.650 --> 00:25:40.830 align:start position:0%
one or more of these at the bottom is
the<00:25:38.770><c> JDK</c><00:25:39.220><c> and</c><00:25:39.520><c> in</c><00:25:40.210><c> the</c><00:25:40.300><c> middle</c><00:25:40.540><c> there's</c><00:25:40.780><c> a</c>

00:25:40.830 --> 00:25:40.840 align:start position:0%
the JDK and in the middle there's a
 

00:25:40.840 --> 00:25:42.540 align:start position:0%
the JDK and in the middle there's a
bunch<00:25:41.050><c> of</c><00:25:41.200><c> library</c><00:25:41.560><c> jars</c><00:25:41.800><c> downloaded</c><00:25:42.400><c> from</c>

00:25:42.540 --> 00:25:42.550 align:start position:0%
bunch of library jars downloaded from
 

00:25:42.550 --> 00:25:44.340 align:start position:0%
bunch of library jars downloaded from
the<00:25:42.670><c> internet</c><00:25:42.700><c> and</c><00:25:43.240><c> thrown</c><00:25:43.630><c> on</c><00:25:43.900><c> the</c><00:25:44.140><c> class</c>

00:25:44.340 --> 00:25:44.350 align:start position:0%
the internet and thrown on the class
 

00:25:44.350 --> 00:25:47.090 align:start position:0%
the internet and thrown on the class
path<00:25:44.590><c> does</c><00:25:45.130><c> this</c><00:25:45.220><c> look</c><00:25:45.340><c> familiar</c><00:25:45.520><c> to</c><00:25:46.000><c> anyone</c>

00:25:47.090 --> 00:25:47.100 align:start position:0%
path does this look familiar to anyone
 

00:25:47.100 --> 00:25:52.170 align:start position:0%
path does this look familiar to anyone
some<00:25:48.100><c> nods</c><00:25:48.310><c> yes</c><00:25:50.160><c> now</c><00:25:51.160><c> I've</c><00:25:51.310><c> hinted</c><00:25:51.520><c> that</c><00:25:51.730><c> we've</c>

00:25:52.170 --> 00:25:52.180 align:start position:0%
some nods yes now I've hinted that we've
 

00:25:52.180 --> 00:25:54.570 align:start position:0%
some nods yes now I've hinted that we've
turned<00:25:52.420><c> the</c><00:25:52.600><c> JDK</c><00:25:53.020><c> into</c><00:25:53.380><c> modules</c><00:25:53.740><c> and</c><00:25:54.070><c> so</c><00:25:54.460><c> in</c>

00:25:54.570 --> 00:25:54.580 align:start position:0%
turned the JDK into modules and so in
 

00:25:54.580 --> 00:25:56.460 align:start position:0%
turned the JDK into modules and so in
this<00:25:54.730><c> part</c><00:25:54.970><c> green</c><00:25:55.510><c> boxes</c><00:25:55.960><c> will</c><00:25:56.140><c> represent</c>

00:25:56.460 --> 00:25:56.470 align:start position:0%
this part green boxes will represent
 

00:25:56.470 --> 00:25:58.680 align:start position:0%
this part green boxes will represent
modules<00:25:56.950><c> you've</c><00:25:57.850><c> already</c><00:25:58.000><c> seen</c><00:25:58.330><c> the</c><00:25:58.480><c> Java</c>

00:25:58.680 --> 00:25:58.690 align:start position:0%
modules you've already seen the Java
 

00:25:58.690 --> 00:26:00.660 align:start position:0%
modules you've already seen the Java
base<00:25:58.900><c> module</c><00:25:59.290><c> and</c><00:25:59.590><c> you</c><00:25:59.980><c> won't</c><00:26:00.160><c> be</c><00:26:00.280><c> surprised</c>

00:26:00.660 --> 00:26:00.670 align:start position:0%
base module and you won't be surprised
 

00:26:00.670 --> 00:26:02.040 align:start position:0%
base module and you won't be surprised
to<00:26:00.790><c> learn</c><00:26:00.820><c> that</c><00:26:00.970><c> there</c><00:26:01.330><c> are</c><00:26:01.450><c> modules</c><00:26:01.570><c> for</c>

00:26:02.040 --> 00:26:02.050 align:start position:0%
to learn that there are modules for
 

00:26:02.050 --> 00:26:04.320 align:start position:0%
to learn that there are modules for
logging<00:26:02.260><c> database</c><00:26:02.860><c> access</c><00:26:03.370><c> XML</c><00:26:03.880><c> processing</c>

00:26:04.320 --> 00:26:04.330 align:start position:0%
logging database access XML processing
 

00:26:04.330 --> 00:26:08.460 align:start position:0%
logging database access XML processing
etc<00:26:04.570><c> here</c><00:26:05.410><c> they</c><00:26:05.500><c> are</c><00:26:06.450><c> but</c><00:26:07.450><c> our</c><00:26:07.660><c> application</c>

00:26:08.460 --> 00:26:08.470 align:start position:0%
etc here they are but our application
 

00:26:08.470 --> 00:26:10.680 align:start position:0%
etc here they are but our application
isn't<00:26:08.710><c> modularized</c><00:26:09.610><c> and</c><00:26:09.940><c> nor</c><00:26:10.120><c> any</c><00:26:10.390><c> of</c><00:26:10.570><c> the</c>

00:26:10.680 --> 00:26:10.690 align:start position:0%
isn't modularized and nor any of the
 

00:26:10.690 --> 00:26:12.990 align:start position:0%
isn't modularized and nor any of the
libraries<00:26:11.110><c> should</c><00:26:11.470><c> we</c><00:26:12.310><c> modularize</c><00:26:12.820><c> our</c>

00:26:12.990 --> 00:26:13.000 align:start position:0%
libraries should we modularize our
 

00:26:13.000 --> 00:26:15.600 align:start position:0%
libraries should we modularize our
application<00:26:13.600><c> obviously</c><00:26:14.170><c> it's</c><00:26:14.920><c> up</c><00:26:15.070><c> to</c><00:26:15.220><c> you</c><00:26:15.370><c> you</c>

00:26:15.600 --> 00:26:15.610 align:start position:0%
application obviously it's up to you you
 

00:26:15.610 --> 00:26:17.640 align:start position:0%
application obviously it's up to you you
could<00:26:16.030><c> just</c><00:26:16.270><c> run</c><00:26:16.390><c> it</c><00:26:16.540><c> on</c><00:26:16.660><c> the</c><00:26:16.750><c> class</c><00:26:16.960><c> path</c><00:26:17.260><c> like</c>

00:26:17.640 --> 00:26:17.650 align:start position:0%
could just run it on the class path like
 

00:26:17.650 --> 00:26:20.670 align:start position:0%
could just run it on the class path like
you<00:26:17.800><c> did</c><00:26:17.950><c> in</c><00:26:18.040><c> JDK</c><00:26:18.430><c> s</c><00:26:18.730><c> but</c><00:26:19.570><c> we</c><00:26:19.600><c> modular</c><00:26:20.290><c> eyes</c><00:26:20.440><c> the</c>

00:26:20.670 --> 00:26:20.680 align:start position:0%
you did in JDK s but we modular eyes the
 

00:26:20.680 --> 00:26:23.130 align:start position:0%
you did in JDK s but we modular eyes the
JDK<00:26:21.160><c> for</c><00:26:21.400><c> a</c><00:26:21.430><c> reason</c><00:26:21.910><c> to</c><00:26:22.540><c> improve</c><00:26:22.900><c> security</c>

00:26:23.130 --> 00:26:23.140 align:start position:0%
JDK for a reason to improve security
 

00:26:23.140 --> 00:26:24.460 align:start position:0%
JDK for a reason to improve security
through<00:26:23.740><c> strong</c>

00:26:24.460 --> 00:26:24.470 align:start position:0%
through strong
 

00:26:24.470 --> 00:26:27.100 align:start position:0%
through strong
halation<00:26:24.799><c> and</c><00:26:25.159><c> stability</c><00:26:26.000><c> through</c><00:26:26.600><c> reliable</c>

00:26:27.100 --> 00:26:27.110 align:start position:0%
halation and stability through reliable
 

00:26:27.110 --> 00:26:29.830 align:start position:0%
halation and stability through reliable
dependences<00:26:28.240><c> applications</c><00:26:29.240><c> might</c><00:26:29.570><c> want</c><00:26:29.750><c> to</c>

00:26:29.830 --> 00:26:29.840 align:start position:0%
dependences applications might want to
 

00:26:29.840 --> 00:26:31.090 align:start position:0%
dependences applications might want to
benefit<00:26:30.230><c> from</c><00:26:30.289><c> that</c>

00:26:31.090 --> 00:26:31.100 align:start position:0%
benefit from that
 

00:26:31.100 --> 00:26:33.580 align:start position:0%
benefit from that
just<00:26:31.520><c> like</c><00:26:31.640><c> the</c><00:26:31.789><c> jdk</c><00:26:32.120><c> does</c><00:26:32.330><c> so</c><00:26:33.140><c> let's</c><00:26:33.260><c> look</c><00:26:33.470><c> at</c>

00:26:33.580 --> 00:26:33.590 align:start position:0%
just like the jdk does so let's look at
 

00:26:33.590 --> 00:26:35.980 align:start position:0%
just like the jdk does so let's look at
how<00:26:33.710><c> we</c><00:26:33.770><c> might</c><00:26:34.039><c> turn</c><00:26:34.309><c> the</c><00:26:34.460><c> application</c><00:26:35.210><c> into</c>

00:26:35.980 --> 00:26:35.990 align:start position:0%
how we might turn the application into
 

00:26:35.990 --> 00:26:41.020 align:start position:0%
how we might turn the application into
modules<00:26:38.559><c> let's</c><00:26:39.559><c> imagine</c><00:26:39.890><c> our</c><00:26:40.250><c> application</c><00:26:40.940><c> is</c>

00:26:41.020 --> 00:26:41.030 align:start position:0%
modules let's imagine our application is
 

00:26:41.030 --> 00:26:43.870 align:start position:0%
modules let's imagine our application is
two<00:26:41.179><c> jars</c><00:26:41.419><c> with</c><00:26:42.140><c> main</c><00:26:42.440><c> code</c><00:26:42.770><c> in</c><00:26:43.039><c> my</c><00:26:43.250><c> app</c><00:26:43.370><c> car</c>

00:26:43.870 --> 00:26:43.880 align:start position:0%
two jars with main code in my app car
 

00:26:43.880 --> 00:26:47.830 align:start position:0%
two jars with main code in my app car
and<00:26:44.150><c> helper</c><00:26:44.809><c> code</c><00:26:45.020><c> in</c><00:26:45.320><c> my</c><00:26:45.380><c> Libby</c><00:26:45.950><c> R</c><00:26:46.659><c> let's</c><00:26:47.659><c> also</c>

00:26:47.830 --> 00:26:47.840 align:start position:0%
and helper code in my Libby R let's also
 

00:26:47.840 --> 00:26:50.409 align:start position:0%
and helper code in my Libby R let's also
imagine<00:26:48.470><c> that</c><00:26:48.500><c> the</c><00:26:48.860><c> soup</c><00:26:49.130><c> of</c><00:26:49.370><c> library</c><00:26:49.940><c> jars</c><00:26:50.179><c> is</c>

00:26:50.409 --> 00:26:50.419 align:start position:0%
imagine that the soup of library jars is
 

00:26:50.419 --> 00:26:52.539 align:start position:0%
imagine that the soup of library jars is
limited<00:26:50.809><c> to</c><00:26:50.929><c> Jack's</c><00:26:51.169><c> on</c><00:26:51.440><c> the</c><00:26:51.679><c> JSON</c><00:26:52.159><c> processing</c>

00:26:52.539 --> 00:26:52.549 align:start position:0%
limited to Jack's on the JSON processing
 

00:26:52.549 --> 00:26:55.659 align:start position:0%
limited to Jack's on the JSON processing
library<00:26:53.240><c> Jackson</c><00:26:54.230><c> comes</c><00:26:54.440><c> as</c><00:26:54.590><c> three</c><00:26:54.770><c> jars</c><00:26:54.980><c> core</c>

00:26:55.659 --> 00:26:55.669 align:start position:0%
library Jackson comes as three jars core
 

00:26:55.669 --> 00:26:58.659 align:start position:0%
library Jackson comes as three jars core
data<00:26:56.030><c> bind</c><00:26:56.299><c> and</c><00:26:56.600><c> annotations</c><00:26:57.169><c> and</c><00:26:57.530><c> we</c><00:26:58.490><c> have</c>

00:26:58.659 --> 00:26:58.669 align:start position:0%
data bind and annotations and we have
 

00:26:58.669 --> 00:27:02.649 align:start position:0%
data bind and annotations and we have
the<00:26:58.789><c> modulus</c><00:26:59.150><c> JDK</c><00:26:59.600><c> at</c><00:26:59.840><c> the</c><00:26:59.929><c> bottom</c><00:27:01.600><c> this</c><00:27:02.600><c> is</c>

00:27:02.649 --> 00:27:02.659 align:start position:0%
the modulus JDK at the bottom this is
 

00:27:02.659 --> 00:27:04.899 align:start position:0%
the modulus JDK at the bottom this is
how<00:27:02.900><c> we'd</c><00:27:03.080><c> run</c><00:27:03.260><c> the</c><00:27:03.409><c> application</c><00:27:03.980><c> today</c><00:27:04.130><c> we've</c>

00:27:04.899 --> 00:27:04.909 align:start position:0%
how we'd run the application today we've
 

00:27:04.909 --> 00:27:06.610 align:start position:0%
how we'd run the application today we've
got<00:27:05.090><c> to</c><00:27:05.240><c> set</c><00:27:05.450><c> up</c><00:27:05.630><c> the</c><00:27:05.809><c> Lib</c><00:27:05.960><c> directory</c><00:27:06.110><c> to</c>

00:27:06.610 --> 00:27:06.620 align:start position:0%
got to set up the Lib directory to
 

00:27:06.620 --> 00:27:08.529 align:start position:0%
got to set up the Lib directory to
include<00:27:06.890><c> our</c><00:27:07.039><c> application</c><00:27:07.580><c> jars</c><00:27:07.820><c> and</c><00:27:08.179><c> library</c>

00:27:08.529 --> 00:27:08.539 align:start position:0%
include our application jars and library
 

00:27:08.539 --> 00:27:10.299 align:start position:0%
include our application jars and library
jars<00:27:08.750><c> and</c><00:27:09.080><c> point</c><00:27:09.320><c> the</c><00:27:09.409><c> classpath</c><00:27:09.830><c> at</c><00:27:10.070><c> them</c>

00:27:10.299 --> 00:27:10.309 align:start position:0%
jars and point the classpath at them
 

00:27:10.309 --> 00:27:12.520 align:start position:0%
jars and point the classpath at them
maven<00:27:11.150><c> does</c><00:27:11.299><c> this</c><00:27:11.419><c> for</c><00:27:11.630><c> me</c><00:27:11.750><c> well</c><00:27:11.929><c> yes</c><00:27:12.230><c> but</c><00:27:12.440><c> it</c>

00:27:12.520 --> 00:27:12.530 align:start position:0%
maven does this for me well yes but it
 

00:27:12.530 --> 00:27:13.750 align:start position:0%
maven does this for me well yes but it
does<00:27:12.860><c> this</c><00:27:13.039><c> and</c><00:27:13.250><c> it's</c><00:27:13.340><c> good</c><00:27:13.460><c> to</c><00:27:13.549><c> know</c><00:27:13.669><c> what</c>

00:27:13.750 --> 00:27:13.760 align:start position:0%
does this and it's good to know what
 

00:27:13.760 --> 00:27:15.669 align:start position:0%
does this and it's good to know what
it's<00:27:13.909><c> doing</c><00:27:14.090><c> under</c><00:27:14.270><c> the</c><00:27:14.360><c> covers</c>

00:27:15.669 --> 00:27:15.679 align:start position:0%
it's doing under the covers
 

00:27:15.679 --> 00:27:17.169 align:start position:0%
it's doing under the covers
then<00:27:16.159><c> we</c><00:27:16.250><c> run</c><00:27:16.370><c> the</c><00:27:16.490><c> application</c><00:27:16.580><c> with</c><00:27:17.090><c> the</c>

00:27:17.169 --> 00:27:17.179 align:start position:0%
then we run the application with the
 

00:27:17.179 --> 00:27:19.480 align:start position:0%
then we run the application with the
Java<00:27:17.419><c> launcher</c><00:27:17.809><c> one</c><00:27:18.590><c> of</c><00:27:18.740><c> the</c><00:27:18.860><c> things</c><00:27:19.070><c> we</c><00:27:19.250><c> gain</c>

00:27:19.480 --> 00:27:19.490 align:start position:0%
Java launcher one of the things we gain
 

00:27:19.490 --> 00:27:21.279 align:start position:0%
Java launcher one of the things we gain
by<00:27:19.520><c> modularizing</c><00:27:20.240><c> is</c><00:27:20.539><c> not</c><00:27:20.690><c> having</c><00:27:20.929><c> to</c><00:27:21.110><c> list</c>

00:27:21.279 --> 00:27:21.289 align:start position:0%
by modularizing is not having to list
 

00:27:21.289 --> 00:27:25.840 align:start position:0%
by modularizing is not having to list
dependencies<00:27:21.890><c> on</c><00:27:22.130><c> the</c><00:27:22.460><c> command</c><00:27:22.700><c> line</c><00:27:24.850><c> so</c>

00:27:25.840 --> 00:27:25.850 align:start position:0%
dependencies on the command line so
 

00:27:25.850 --> 00:27:27.940 align:start position:0%
dependencies on the command line so
let's<00:27:26.030><c> look</c><00:27:26.150><c> at</c><00:27:26.299><c> one</c><00:27:26.450><c> scenario</c><00:27:26.750><c> for</c><00:27:27.260><c> mod</c><00:27:27.500><c> for</c>

00:27:27.940 --> 00:27:27.950 align:start position:0%
let's look at one scenario for mod for
 

00:27:27.950 --> 00:27:29.860 align:start position:0%
let's look at one scenario for mod for
migrating<00:27:28.429><c> this</c><00:27:28.789><c> application</c><00:27:29.419><c> the</c><00:27:29.630><c> top-down</c>

00:27:29.860 --> 00:27:29.870 align:start position:0%
migrating this application the top-down
 

00:27:29.870 --> 00:27:33.760 align:start position:0%
migrating this application the top-down
scenario<00:27:31.240><c> here</c><00:27:32.240><c> we</c><00:27:32.450><c> first</c><00:27:32.809><c> modular</c><00:27:33.110><c> eyes</c><00:27:33.470><c> our</c>

00:27:33.760 --> 00:27:33.770 align:start position:0%
scenario here we first modular eyes our
 

00:27:33.770 --> 00:27:37.659 align:start position:0%
scenario here we first modular eyes our
application<00:27:34.400><c> jars</c><00:27:34.669><c> without</c><00:27:35.600><c> touching</c><00:27:36.669><c> the</c>

00:27:37.659 --> 00:27:37.669 align:start position:0%
application jars without touching the
 

00:27:37.669 --> 00:27:41.169 align:start position:0%
application jars without touching the
library<00:27:38.030><c> jars</c><00:27:38.860><c> now</c><00:27:39.860><c> in</c><00:27:40.100><c> general</c><00:27:40.760><c> if</c><00:27:40.970><c> you're</c>

00:27:41.169 --> 00:27:41.179 align:start position:0%
library jars now in general if you're
 

00:27:41.179 --> 00:27:43.510 align:start position:0%
library jars now in general if you're
depending<00:27:41.659><c> on</c><00:27:41.750><c> third-party</c><00:27:42.020><c> libraries</c><00:27:42.799><c> you</c>

00:27:43.510 --> 00:27:43.520 align:start position:0%
depending on third-party libraries you
 

00:27:43.520 --> 00:27:45.430 align:start position:0%
depending on third-party libraries you
are<00:27:43.669><c> depending</c><00:27:44.150><c> on</c><00:27:44.210><c> them</c><00:27:44.419><c> to</c><00:27:44.570><c> modularize</c><00:27:44.750><c> and</c>

00:27:45.430 --> 00:27:45.440 align:start position:0%
are depending on them to modularize and
 

00:27:45.440 --> 00:27:48.100 align:start position:0%
are depending on them to modularize and
we<00:27:46.220><c> can</c><00:27:46.400><c> make</c><00:27:46.549><c> it</c><00:27:46.730><c> easier</c><00:27:47.240><c> for</c><00:27:47.480><c> libraries</c><00:27:47.960><c> to</c>

00:27:48.100 --> 00:27:48.110 align:start position:0%
we can make it easier for libraries to
 

00:27:48.110 --> 00:27:50.289 align:start position:0%
we can make it easier for libraries to
modularize<00:27:48.289><c> but</c><00:27:49.010><c> we</c><00:27:49.190><c> we</c><00:27:49.520><c> all</c><00:27:49.669><c> have</c><00:27:49.970><c> to</c><00:27:50.150><c> wait</c>

00:27:50.289 --> 00:27:50.299 align:start position:0%
modularize but we we all have to wait
 

00:27:50.299 --> 00:27:52.860 align:start position:0%
modularize but we we all have to wait
for<00:27:50.600><c> them</c><00:27:50.690><c> to</c><00:27:50.720><c> do</c><00:27:50.990><c> it</c><00:27:51.169><c> no</c><00:27:51.559><c> one</c><00:27:51.679><c> can</c><00:27:51.890><c> force</c><00:27:52.220><c> them</c>

00:27:52.860 --> 00:27:52.870 align:start position:0%
for them to do it no one can force them
 

00:27:52.870 --> 00:27:55.299 align:start position:0%
for them to do it no one can force them
so<00:27:53.870><c> it</c><00:27:53.990><c> may</c><00:27:54.140><c> well</c><00:27:54.320><c> be</c><00:27:54.500><c> that</c><00:27:54.530><c> some</c><00:27:54.950><c> of</c><00:27:55.220><c> the</c>

00:27:55.299 --> 00:27:55.309 align:start position:0%
so it may well be that some of the
 

00:27:55.309 --> 00:27:56.919 align:start position:0%
so it may well be that some of the
libraries<00:27:55.700><c> you</c><00:27:55.730><c> depend</c><00:27:56.150><c> on</c><00:27:56.299><c> are</c><00:27:56.539><c> not</c>

00:27:56.919 --> 00:27:56.929 align:start position:0%
libraries you depend on are not
 

00:27:56.929 --> 00:28:01.630 align:start position:0%
libraries you depend on are not
modularized<00:27:57.650><c> yet</c><00:27:57.980><c> that's</c><00:27:58.400><c> okay</c><00:28:00.549><c> for</c><00:28:01.549><c> your</c>

00:28:01.630 --> 00:28:01.640 align:start position:0%
modularized yet that's okay for your
 

00:28:01.640 --> 00:28:04.779 align:start position:0%
modularized yet that's okay for your
application<00:28:02.480><c> jars</c><00:28:02.750><c> the</c><00:28:03.559><c> obvious</c><00:28:03.919><c> path</c><00:28:04.190><c> is</c><00:28:04.460><c> to</c>

00:28:04.779 --> 00:28:04.789 align:start position:0%
application jars the obvious path is to
 

00:28:04.789 --> 00:28:07.180 align:start position:0%
application jars the obvious path is to
turn<00:28:05.120><c> them</c><00:28:05.330><c> one-to-one</c><00:28:05.900><c> into</c><00:28:06.470><c> modular</c><00:28:06.799><c> jars</c>

00:28:07.180 --> 00:28:07.190 align:start position:0%
turn them one-to-one into modular jars
 

00:28:07.190 --> 00:28:10.029 align:start position:0%
turn them one-to-one into modular jars
where<00:28:08.000><c> each</c><00:28:08.210><c> jar</c><00:28:08.600><c> file</c><00:28:08.840><c> has</c><00:28:09.320><c> a</c><00:28:09.380><c> module</c><00:28:09.679><c> info</c>

00:28:10.029 --> 00:28:10.039 align:start position:0%
where each jar file has a module info
 

00:28:10.039 --> 00:28:12.880 align:start position:0%
where each jar file has a module info
dot<00:28:10.159><c> class</c><00:28:10.400><c> file</c><00:28:10.929><c> this</c><00:28:11.929><c> is</c><00:28:12.080><c> not</c><00:28:12.320><c> always</c>

00:28:12.880 --> 00:28:12.890 align:start position:0%
dot class file this is not always
 

00:28:12.890 --> 00:28:14.950 align:start position:0%
dot class file this is not always
possible<00:28:13.190><c> especially</c><00:28:14.120><c> if</c><00:28:14.299><c> the</c><00:28:14.570><c> application</c>

00:28:14.950 --> 00:28:14.960 align:start position:0%
possible especially if the application
 

00:28:14.960 --> 00:28:17.649 align:start position:0%
possible especially if the application
jars<00:28:15.380><c> have</c><00:28:15.710><c> cyclic</c><00:28:16.340><c> dependencies</c><00:28:17.240><c> between</c>

00:28:17.649 --> 00:28:17.659 align:start position:0%
jars have cyclic dependencies between
 

00:28:17.659 --> 00:28:19.840 align:start position:0%
jars have cyclic dependencies between
their<00:28:17.809><c> classes</c><00:28:17.960><c> but</c><00:28:18.890><c> let's</c><00:28:19.309><c> go</c><00:28:19.460><c> with</c><00:28:19.640><c> it</c><00:28:19.669><c> for</c>

00:28:19.840 --> 00:28:19.850 align:start position:0%
their classes but let's go with it for
 

00:28:19.850 --> 00:28:23.830 align:start position:0%
their classes but let's go with it for
now<00:28:21.490><c> if</c><00:28:22.490><c> we're</c><00:28:23.090><c> going</c><00:28:23.299><c> to</c><00:28:23.419><c> turn</c><00:28:23.600><c> each</c>

00:28:23.830 --> 00:28:23.840 align:start position:0%
now if we're going to turn each
 

00:28:23.840 --> 00:28:27.220 align:start position:0%
now if we're going to turn each
application<00:28:24.289><c> jar</c><00:28:24.789><c> into</c><00:28:25.789><c> a</c><00:28:26.000><c> modular</c><00:28:26.419><c> jar</c><00:28:26.659><c> we'll</c>

00:28:27.220 --> 00:28:27.230 align:start position:0%
application jar into a modular jar we'll
 

00:28:27.230 --> 00:28:28.990 align:start position:0%
application jar into a modular jar we'll
need<00:28:27.409><c> to</c><00:28:27.530><c> write</c><00:28:27.679><c> a</c><00:28:27.710><c> module</c><00:28:27.950><c> declaration</c><00:28:28.789><c> in</c>

00:28:28.990 --> 00:28:29.000 align:start position:0%
need to write a module declaration in
 

00:28:29.000 --> 00:28:31.930 align:start position:0%
need to write a module declaration in
module<00:28:29.539><c> in</c><00:28:29.659><c> photo</c><00:28:29.870><c> Java</c><00:28:30.700><c> recall</c><00:28:31.700><c> that</c><00:28:31.909><c> a</c>

00:28:31.930 --> 00:28:31.940 align:start position:0%
module in photo Java recall that a
 

00:28:31.940 --> 00:28:35.560 align:start position:0%
module in photo Java recall that a
module<00:28:32.090><c> declaration</c><00:28:32.899><c> gives</c><00:28:33.289><c> a</c><00:28:33.830><c> name</c><00:28:34.039><c> and</c><00:28:34.570><c> a</c>

00:28:35.560 --> 00:28:35.570 align:start position:0%
module declaration gives a name and a
 

00:28:35.570 --> 00:28:37.560 align:start position:0%
module declaration gives a name and a
list<00:28:35.750><c> of</c><00:28:35.840><c> exported</c><00:28:36.350><c> packages</c><00:28:36.799><c> and</c>

00:28:37.560 --> 00:28:37.570 align:start position:0%
list of exported packages and
 

00:28:37.570 --> 00:28:40.920 align:start position:0%
list of exported packages and
list<00:28:37.780><c> of</c><00:28:37.900><c> required</c><00:28:38.320><c> modules</c><00:28:39.360><c> the</c><00:28:40.360><c> names</c><00:28:40.630><c> are</c>

00:28:40.920 --> 00:28:40.930 align:start position:0%
list of required modules the names are
 

00:28:40.930 --> 00:28:42.950 align:start position:0%
list of required modules the names are
easy<00:28:41.080><c> we'll</c><00:28:41.410><c> call</c><00:28:41.680><c> them</c><00:28:41.860><c> my</c><00:28:42.130><c> app</c><00:28:42.310><c> and</c><00:28:42.580><c> my</c><00:28:42.730><c> lib</c>

00:28:42.950 --> 00:28:42.960 align:start position:0%
easy we'll call them my app and my lib
 

00:28:42.960 --> 00:28:45.690 align:start position:0%
easy we'll call them my app and my lib
but<00:28:43.960><c> we</c><00:28:44.110><c> don't</c><00:28:44.530><c> yet</c><00:28:44.680><c> know</c><00:28:44.740><c> what</c><00:28:45.100><c> each</c><00:28:45.310><c> module</c>

00:28:45.690 --> 00:28:45.700 align:start position:0%
but we don't yet know what each module
 

00:28:45.700 --> 00:28:48.690 align:start position:0%
but we don't yet know what each module
depends<00:28:46.240><c> on</c><00:28:46.350><c> we</c><00:28:47.350><c> could</c><00:28:47.560><c> make</c><00:28:47.740><c> a</c><00:28:48.010><c> manual</c>

00:28:48.690 --> 00:28:48.700 align:start position:0%
depends on we could make a manual
 

00:28:48.700 --> 00:28:50.910 align:start position:0%
depends on we could make a manual
analysis<00:28:49.690><c> of</c><00:28:49.840><c> either</c><00:28:49.990><c> the</c><00:28:50.200><c> source</c><00:28:50.440><c> files</c><00:28:50.740><c> or</c>

00:28:50.910 --> 00:28:50.920 align:start position:0%
analysis of either the source files or
 

00:28:50.920 --> 00:28:53.430 align:start position:0%
analysis of either the source files or
the<00:28:50.950><c> class</c><00:28:51.190><c> files</c><00:28:51.840><c> but</c><00:28:52.840><c> there's</c><00:28:52.990><c> a</c><00:28:53.050><c> better</c><00:28:53.230><c> way</c>

00:28:53.430 --> 00:28:53.440 align:start position:0%
the class files but there's a better way
 

00:28:53.440 --> 00:28:56.970 align:start position:0%
the class files but there's a better way
the<00:28:53.590><c> Jaidev</c><00:28:53.980><c> tool</c><00:28:54.510><c> Jade</c><00:28:55.510><c> EPS</c><00:28:55.690><c> scans</c><00:28:56.560><c> class</c>

00:28:56.970 --> 00:28:56.980 align:start position:0%
the Jaidev tool Jade EPS scans class
 

00:28:56.980 --> 00:28:59.700 align:start position:0%
the Jaidev tool Jade EPS scans class
files<00:28:57.310><c> which</c><00:28:57.580><c> are</c><00:28:57.760><c> files</c><00:28:58.060><c> and</c><00:28:58.420><c> tells</c><00:28:58.990><c> you</c><00:28:59.170><c> what</c>

00:28:59.700 --> 00:28:59.710 align:start position:0%
files which are files and tells you what
 

00:28:59.710 --> 00:29:03.150 align:start position:0%
files which are files and tells you what
code<00:29:00.010><c> from</c><00:29:00.250><c> other</c><00:29:00.370><c> jars</c><00:29:00.910><c> they</c><00:29:01.450><c> depend</c><00:29:01.810><c> on</c><00:29:02.160><c> Jade</c>

00:29:03.150 --> 00:29:03.160 align:start position:0%
code from other jars they depend on Jade
 

00:29:03.160 --> 00:29:06.930 align:start position:0%
code from other jars they depend on Jade
EPS<00:29:03.340><c> actually</c><00:29:03.880><c> came</c><00:29:04.180><c> in</c><00:29:04.450><c> JDK</c><00:29:05.110><c> 8</c><00:29:05.790><c> and</c><00:29:06.790><c> there's</c>

00:29:06.930 --> 00:29:06.940 align:start position:0%
EPS actually came in JDK 8 and there's
 

00:29:06.940 --> 00:29:09.660 align:start position:0%
EPS actually came in JDK 8 and there's
an<00:29:07.060><c> improved</c><00:29:07.390><c> version</c><00:29:07.600><c> of</c><00:29:07.870><c> JDK</c><00:29:08.230><c> 9</c><00:29:08.620><c> so</c><00:29:09.430><c> whilst</c>

00:29:09.660 --> 00:29:09.670 align:start position:0%
an improved version of JDK 9 so whilst
 

00:29:09.670 --> 00:29:12.720 align:start position:0%
an improved version of JDK 9 so whilst
this<00:29:09.880><c> analysis</c><00:29:10.420><c> it</c><00:29:11.260><c> can't</c><00:29:11.710><c> be</c><00:29:11.920><c> a</c><00:29:11.950><c> perfect</c>

00:29:12.720 --> 00:29:12.730 align:start position:0%
this analysis it can't be a perfect
 

00:29:12.730 --> 00:29:14.810 align:start position:0%
this analysis it can't be a perfect
solution<00:29:12.970><c> it's</c><00:29:13.270><c> a</c><00:29:13.330><c> pretty</c><00:29:13.510><c> good</c><00:29:13.690><c> start</c><00:29:13.960><c> so</c>

00:29:14.810 --> 00:29:14.820 align:start position:0%
solution it's a pretty good start so
 

00:29:14.820 --> 00:29:17.670 align:start position:0%
solution it's a pretty good start so
we'll<00:29:15.820><c> run</c><00:29:15.970><c> Jade</c><00:29:16.180><c> EPS</c><00:29:16.330><c> on</c><00:29:16.600><c> the</c><00:29:17.200><c> application</c>

00:29:17.670 --> 00:29:17.680 align:start position:0%
we'll run Jade EPS on the application
 

00:29:17.680 --> 00:29:19.770 align:start position:0%
we'll run Jade EPS on the application
jars<00:29:17.890><c> with</c><00:29:18.640><c> the</c><00:29:18.790><c> jacks</c><00:29:19.030><c> and</c><00:29:19.180><c> libraries</c><00:29:19.570><c> on</c><00:29:19.690><c> the</c>

00:29:19.770 --> 00:29:19.780 align:start position:0%
jars with the jacks and libraries on the
 

00:29:19.780 --> 00:29:23.160 align:start position:0%
jars with the jacks and libraries on the
class<00:29:19.960><c> path</c><00:29:20.850><c> we</c><00:29:21.850><c> see</c><00:29:22.060><c> that</c><00:29:22.270><c> my</c><00:29:22.420><c> app</c><00:29:22.570><c> jar</c>

00:29:23.160 --> 00:29:23.170 align:start position:0%
class path we see that my app jar
 

00:29:23.170 --> 00:29:25.380 align:start position:0%
class path we see that my app jar
depends<00:29:24.010><c> on</c><00:29:24.130><c> two</c><00:29:24.430><c> of</c><00:29:24.580><c> the</c><00:29:24.700><c> jacks</c><00:29:24.940><c> and</c><00:29:25.120><c> jars</c>

00:29:25.380 --> 00:29:25.390 align:start position:0%
depends on two of the jacks and jars
 

00:29:25.390 --> 00:29:27.630 align:start position:0%
depends on two of the jacks and jars
which<00:29:26.140><c> remember</c><00:29:26.800><c> are</c><00:29:26.890><c> not</c><00:29:27.040><c> none</c><00:29:27.490><c> of</c><00:29:27.520><c> these</c>

00:29:27.630 --> 00:29:27.640 align:start position:0%
which remember are not none of these
 

00:29:27.640 --> 00:29:29.030 align:start position:0%
which remember are not none of these
modules<00:29:28.180><c> yet</c>

00:29:29.030 --> 00:29:29.040 align:start position:0%
modules yet
 

00:29:29.040 --> 00:29:32.880 align:start position:0%
modules yet
and<00:29:30.040><c> of</c><00:29:30.160><c> course</c><00:29:30.370><c> on</c><00:29:30.550><c> my</c><00:29:30.700><c> live</c><00:29:30.850><c> jar</c><00:29:31.270><c> plus</c><00:29:32.260><c> my</c><00:29:32.770><c> app</c>

00:29:32.880 --> 00:29:32.890 align:start position:0%
and of course on my live jar plus my app
 

00:29:32.890 --> 00:29:35.850 align:start position:0%
and of course on my live jar plus my app
dot<00:29:33.130><c> jar</c><00:29:33.340><c> depends</c><00:29:33.760><c> on</c><00:29:33.880><c> the</c><00:29:34.030><c> JDK</c><00:29:34.510><c> modules</c><00:29:35.020><c> Java</c>

00:29:35.850 --> 00:29:35.860 align:start position:0%
dot jar depends on the JDK modules Java
 

00:29:35.860 --> 00:29:38.490 align:start position:0%
dot jar depends on the JDK modules Java
base<00:29:36.130><c> and</c><00:29:36.460><c> Java</c><00:29:36.700><c> sequel</c><00:29:37.180><c> Jade</c><00:29:37.420><c> EPS</c><00:29:37.600><c> knows</c><00:29:37.960><c> if</c>

00:29:38.490 --> 00:29:38.500 align:start position:0%
base and Java sequel Jade EPS knows if
 

00:29:38.500 --> 00:29:41.250 align:start position:0%
base and Java sequel Jade EPS knows if
you're<00:29:39.010><c> using</c><00:29:39.370><c> the</c><00:29:39.700><c> JDBC</c><00:29:40.180><c> API</c><00:29:40.210><c> that</c><00:29:40.810><c> it's</c><00:29:40.990><c> it's</c>

00:29:41.250 --> 00:29:41.260 align:start position:0%
you're using the JDBC API that it's it's
 

00:29:41.260 --> 00:29:44.490 align:start position:0%
you're using the JDBC API that it's it's
coming<00:29:41.530><c> from</c><00:29:41.800><c> the</c><00:29:42.100><c> Java</c><00:29:42.340><c> sequel</c><00:29:42.730><c> module</c><00:29:43.500><c> maile</c>

00:29:44.490 --> 00:29:44.500 align:start position:0%
coming from the Java sequel module maile
 

00:29:44.500 --> 00:29:46.110 align:start position:0%
coming from the Java sequel module maile
a<00:29:44.530><c> block</c><00:29:44.710><c> jar</c><00:29:44.920><c> it</c><00:29:45.190><c> turns</c><00:29:45.400><c> out</c><00:29:45.550><c> depends</c><00:29:45.880><c> only</c><00:29:45.970><c> on</c>

00:29:46.110 --> 00:29:46.120 align:start position:0%
a block jar it turns out depends only on
 

00:29:46.120 --> 00:29:48.570 align:start position:0%
a block jar it turns out depends only on
Java<00:29:46.360><c> base</c><00:29:46.570><c> so</c><00:29:46.900><c> that's</c><00:29:47.080><c> nice</c><00:29:47.230><c> and</c><00:29:47.260><c> simple</c><00:29:47.710><c> now</c>

00:29:48.570 --> 00:29:48.580 align:start position:0%
Java base so that's nice and simple now
 

00:29:48.580 --> 00:29:50.640 align:start position:0%
Java base so that's nice and simple now
we<00:29:48.640><c> have</c><00:29:49.210><c> what's</c><00:29:49.720><c> needed</c><00:29:50.140><c> to</c><00:29:50.320><c> write</c><00:29:50.500><c> the</c>

00:29:50.640 --> 00:29:50.650 align:start position:0%
we have what's needed to write the
 

00:29:50.650 --> 00:29:55.140 align:start position:0%
we have what's needed to write the
module<00:29:50.950><c> declarations</c><00:29:53.700><c> we'll</c><00:29:54.700><c> start</c><00:29:54.940><c> with</c><00:29:55.060><c> the</c>

00:29:55.140 --> 00:29:55.150 align:start position:0%
module declarations we'll start with the
 

00:29:55.150 --> 00:29:57.990 align:start position:0%
module declarations we'll start with the
easy<00:29:55.330><c> one</c><00:29:55.600><c> my</c><00:29:55.840><c> Lib</c><00:29:56.370><c> we</c><00:29:57.370><c> know</c><00:29:57.490><c> it</c><00:29:57.610><c> depends</c><00:29:57.940><c> on</c>

00:29:57.990 --> 00:29:58.000 align:start position:0%
easy one my Lib we know it depends on
 

00:29:58.000 --> 00:30:00.210 align:start position:0%
easy one my Lib we know it depends on
Java<00:29:58.210><c> base</c><00:29:58.450><c> we</c><00:29:59.110><c> can</c><00:29:59.260><c> write</c><00:29:59.470><c> requires</c><00:29:59.950><c> Java</c>

00:30:00.210 --> 00:30:00.220 align:start position:0%
Java base we can write requires Java
 

00:30:00.220 --> 00:30:01.860 align:start position:0%
Java base we can write requires Java
base<00:30:00.460><c> and</c><00:30:00.670><c> I</c><00:30:00.730><c> showed</c><00:30:00.940><c> that</c><00:30:00.970><c> earlier</c><00:30:01.420><c> though</c>

00:30:01.860 --> 00:30:01.870 align:start position:0%
base and I showed that earlier though
 

00:30:01.870 --> 00:30:05.100 align:start position:0%
base and I showed that earlier though
actually<00:30:02.050><c> we</c><00:30:02.440><c> don't</c><00:30:02.620><c> have</c><00:30:03.250><c> to</c><00:30:03.510><c> it's</c><00:30:04.510><c> always</c>

00:30:05.100 --> 00:30:05.110 align:start position:0%
actually we don't have to it's always
 

00:30:05.110 --> 00:30:08.010 align:start position:0%
actually we don't have to it's always
put<00:30:05.560><c> in</c><00:30:05.740><c> for</c><00:30:06.070><c> you</c><00:30:06.310><c> by</c><00:30:06.580><c> the</c><00:30:06.640><c> compiler</c><00:30:07.120><c> because</c>

00:30:08.010 --> 00:30:08.020 align:start position:0%
put in for you by the compiler because
 

00:30:08.020 --> 00:30:10.620 align:start position:0%
put in for you by the compiler because
every<00:30:08.650><c> Java</c><00:30:08.920><c> program</c><00:30:09.490><c> ultimately</c><00:30:09.700><c> relies</c><00:30:10.600><c> on</c>

00:30:10.620 --> 00:30:10.630 align:start position:0%
every Java program ultimately relies on
 

00:30:10.630 --> 00:30:13.590 align:start position:0%
every Java program ultimately relies on
java.lang<00:30:11.440><c> objects</c><00:30:12.100><c> you</c><00:30:12.910><c> can't</c><00:30:13.120><c> write</c><00:30:13.300><c> a</c><00:30:13.330><c> Java</c>

00:30:13.590 --> 00:30:13.600 align:start position:0%
java.lang objects you can't write a Java
 

00:30:13.600 --> 00:30:16.410 align:start position:0%
java.lang objects you can't write a Java
program<00:30:14.050><c> that</c><00:30:14.230><c> doesn't</c><00:30:15.090><c> indirectly</c><00:30:16.090><c> rely</c><00:30:16.390><c> on</c>

00:30:16.410 --> 00:30:16.420 align:start position:0%
program that doesn't indirectly rely on
 

00:30:16.420 --> 00:30:18.510 align:start position:0%
program that doesn't indirectly rely on
java.lang<00:30:16.810><c> object</c><00:30:17.200><c> so</c><00:30:17.800><c> you</c><00:30:17.830><c> don't</c><00:30:18.280><c> actually</c>

00:30:18.510 --> 00:30:18.520 align:start position:0%
java.lang object so you don't actually
 

00:30:18.520 --> 00:30:20.520 align:start position:0%
java.lang object so you don't actually
have<00:30:18.940><c> to</c><00:30:19.000><c> write</c><00:30:19.240><c> requires</c><00:30:19.690><c> Java</c><00:30:19.990><c> base</c><00:30:20.230><c> it</c><00:30:20.470><c> will</c>

00:30:20.520 --> 00:30:20.530 align:start position:0%
have to write requires Java base it will
 

00:30:20.530 --> 00:30:23.880 align:start position:0%
have to write requires Java base it will
always<00:30:20.830><c> be</c><00:30:20.980><c> put</c><00:30:21.130><c> in</c><00:30:21.220><c> for</c><00:30:21.430><c> you</c><00:30:22.440><c> now</c><00:30:23.440><c> from</c><00:30:23.800><c> the</c>

00:30:23.880 --> 00:30:23.890 align:start position:0%
always be put in for you now from the
 

00:30:23.890 --> 00:30:27.240 align:start position:0%
always be put in for you now from the
Jade<00:30:24.250><c> EPS</c><00:30:24.490><c> run</c><00:30:24.840><c> we</c><00:30:25.840><c> know</c><00:30:26.020><c> that</c><00:30:26.260><c> my</c><00:30:26.470><c> app</c><00:30:26.650><c> jar</c>

00:30:27.240 --> 00:30:27.250 align:start position:0%
Jade EPS run we know that my app jar
 

00:30:27.250 --> 00:30:30.600 align:start position:0%
Jade EPS run we know that my app jar
depends<00:30:28.060><c> on</c><00:30:28.210><c> my</c><00:30:28.660><c> lip</c><00:30:28.870><c> and</c><00:30:29.050><c> if</c><00:30:29.980><c> we'd</c><00:30:30.160><c> run</c><00:30:30.400><c> J</c>

00:30:30.600 --> 00:30:30.610 align:start position:0%
depends on my lip and if we'd run J
 

00:30:30.610 --> 00:30:32.100 align:start position:0%
depends on my lip and if we'd run J
depth<00:30:30.850><c> with</c><00:30:31.030><c> more</c><00:30:31.210><c> options</c><00:30:31.600><c> we'd</c><00:30:31.780><c> have</c><00:30:31.900><c> seen</c>

00:30:32.100 --> 00:30:32.110 align:start position:0%
depth with more options we'd have seen
 

00:30:32.110 --> 00:30:34.200 align:start position:0%
depth with more options we'd have seen
that<00:30:32.380><c> my</c><00:30:32.680><c> apt</c><00:30:32.830><c> or</c><00:30:33.010><c> jar</c><00:30:33.310><c> needs</c><00:30:33.910><c> a</c><00:30:34.060><c> particular</c>

00:30:34.200 --> 00:30:34.210 align:start position:0%
that my apt or jar needs a particular
 

00:30:34.210 --> 00:30:39.650 align:start position:0%
that my apt or jar needs a particular
package<00:30:34.930><c> in</c><00:30:35.650><c> my</c><00:30:35.890><c> lib</c><00:30:36.070><c> so</c><00:30:38.040><c> we</c><00:30:39.040><c> could</c><00:30:39.280><c> write</c>

00:30:39.650 --> 00:30:39.660 align:start position:0%
package in my lib so we could write
 

00:30:39.660 --> 00:30:42.540 align:start position:0%
package in my lib so we could write
exports<00:30:40.660><c> for</c><00:30:41.140><c> that</c><00:30:41.320><c> package</c><00:30:41.740><c> in</c><00:30:42.310><c> this</c>

00:30:42.540 --> 00:30:42.550 align:start position:0%
exports for that package in this
 

00:30:42.550 --> 00:30:45.090 align:start position:0%
exports for that package in this
declaration<00:30:42.790><c> to</c><00:30:43.420><c> allow</c><00:30:43.630><c> anyone</c><00:30:44.080><c> to</c><00:30:44.470><c> access</c>

00:30:45.090 --> 00:30:45.100 align:start position:0%
declaration to allow anyone to access
 

00:30:45.100 --> 00:30:47.790 align:start position:0%
declaration to allow anyone to access
the<00:30:45.400><c> package</c><00:30:45.760><c> but</c><00:30:46.030><c> as</c><00:30:46.240><c> we</c><00:30:46.900><c> saw</c><00:30:47.140><c> earlier</c><00:30:47.170><c> with</c>

00:30:47.790 --> 00:30:47.800 align:start position:0%
the package but as we saw earlier with
 

00:30:47.800 --> 00:30:49.720 align:start position:0%
the package but as we saw earlier with
the<00:30:47.830><c> qualified</c><00:30:48.730><c> exports</c>

00:30:49.720 --> 00:30:49.730 align:start position:0%
the qualified exports
 

00:30:49.730 --> 00:30:52.630 align:start position:0%
the qualified exports
if<00:30:49.880><c> we're</c><00:30:50.300><c> sure</c><00:30:50.660><c> that</c><00:30:51.350><c> no</c><00:30:51.590><c> one</c><00:30:51.800><c> except</c><00:30:52.280><c> my</c><00:30:52.490><c> app</c>

00:30:52.630 --> 00:30:52.640 align:start position:0%
if we're sure that no one except my app
 

00:30:52.640 --> 00:30:55.300 align:start position:0%
if we're sure that no one except my app
needs<00:30:53.060><c> to</c><00:30:53.180><c> access</c><00:30:53.750><c> this</c><00:30:54.050><c> comm</c><00:30:54.590><c> my</c><00:30:54.770><c> app</c><00:30:54.920><c> util</c>

00:30:55.300 --> 00:30:55.310 align:start position:0%
needs to access this comm my app util
 

00:30:55.310 --> 00:30:58.660 align:start position:0%
needs to access this comm my app util
package<00:30:55.700><c> we</c><00:30:56.300><c> can</c><00:30:56.480><c> use</c><00:30:56.660><c> a</c><00:30:56.690><c> qualified</c><00:30:57.530><c> export</c><00:30:58.160><c> to</c>

00:30:58.660 --> 00:30:58.670 align:start position:0%
package we can use a qualified export to
 

00:30:58.670 --> 00:31:04.090 align:start position:0%
package we can use a qualified export to
maximize<00:30:59.270><c> the</c><00:30:59.510><c> encapsulation</c><00:31:02.770><c> let's</c><00:31:03.770><c> turn</c><00:31:04.070><c> to</c>

00:31:04.090 --> 00:31:04.100 align:start position:0%
maximize the encapsulation let's turn to
 

00:31:04.100 --> 00:31:07.720 align:start position:0%
maximize the encapsulation let's turn to
the<00:31:04.400><c> module</c><00:31:04.760><c> declaration</c><00:31:05.360><c> for</c><00:31:05.660><c> my</c><00:31:05.870><c> app</c><00:31:06.730><c> it</c>

00:31:07.720 --> 00:31:07.730 align:start position:0%
the module declaration for my app it
 

00:31:07.730 --> 00:31:10.150 align:start position:0%
the module declaration for my app it
requires<00:31:08.090><c> my</c><00:31:08.300><c> Lib</c><00:31:08.510><c> which</c><00:31:09.440><c> we</c><00:31:09.560><c> just</c><00:31:09.710><c> wrote</c><00:31:09.920><c> and</c>

00:31:10.150 --> 00:31:10.160 align:start position:0%
requires my Lib which we just wrote and
 

00:31:10.160 --> 00:31:13.240 align:start position:0%
requires my Lib which we just wrote and
some<00:31:11.090><c> JDK</c><00:31:11.840><c> modules</c><00:31:12.230><c> Java</c><00:31:12.500><c> based</c><00:31:12.680><c> and</c><00:31:12.890><c> Java</c><00:31:13.070><c> C</c>

00:31:13.240 --> 00:31:13.250 align:start position:0%
some JDK modules Java based and Java C
 

00:31:13.250 --> 00:31:15.400 align:start position:0%
some JDK modules Java based and Java C
call<00:31:13.460><c> and</c><00:31:14.210><c> we</c><00:31:14.360><c> know</c><00:31:14.540><c> it's</c><00:31:14.750><c> going</c><00:31:15.050><c> to</c><00:31:15.170><c> use</c>

00:31:15.400 --> 00:31:15.410 align:start position:0%
call and we know it's going to use
 

00:31:15.410 --> 00:31:17.800 align:start position:0%
call and we know it's going to use
Jackson<00:31:15.980><c> but</c><00:31:16.640><c> we're</c><00:31:16.790><c> not</c><00:31:16.940><c> sure</c><00:31:17.180><c> how</c><00:31:17.420><c> to</c><00:31:17.480><c> write</c>

00:31:17.800 --> 00:31:17.810 align:start position:0%
Jackson but we're not sure how to write
 

00:31:17.810 --> 00:31:20.260 align:start position:0%
Jackson but we're not sure how to write
the<00:31:18.080><c> requires</c><00:31:18.440><c> directives</c><00:31:19.040><c> yet</c><00:31:19.280><c> for</c><00:31:19.880><c> Jackson</c>

00:31:20.260 --> 00:31:20.270 align:start position:0%
the requires directives yet for Jackson
 

00:31:20.270 --> 00:31:23.350 align:start position:0%
the requires directives yet for Jackson
because<00:31:20.600><c> Jackson</c><00:31:21.020><c> is</c><00:31:21.170><c> and</c><00:31:21.320><c> modules</c><00:31:22.180><c> does</c><00:31:23.180><c> that</c>

00:31:23.350 --> 00:31:23.360 align:start position:0%
because Jackson is and modules does that
 

00:31:23.360 --> 00:31:25.780 align:start position:0%
because Jackson is and modules does that
mean<00:31:23.600><c> that</c><00:31:23.840><c> we</c><00:31:24.080><c> have</c><00:31:24.410><c> to</c><00:31:24.440><c> turn</c><00:31:24.770><c> Jackson</c><00:31:25.370><c> into</c>

00:31:25.780 --> 00:31:25.790 align:start position:0%
mean that we have to turn Jackson into
 

00:31:25.790 --> 00:31:28.090 align:start position:0%
mean that we have to turn Jackson into
modules<00:31:26.210><c> before</c><00:31:27.020><c> we</c><00:31:27.170><c> can</c><00:31:27.350><c> modular</c><00:31:27.740><c> eyes</c><00:31:27.860><c> our</c>

00:31:28.090 --> 00:31:28.100 align:start position:0%
modules before we can modular eyes our
 

00:31:28.100 --> 00:31:30.010 align:start position:0%
modules before we can modular eyes our
app<00:31:28.250><c> that</c><00:31:28.550><c> would</c><00:31:28.670><c> be</c><00:31:28.790><c> very</c><00:31:28.940><c> unfortunate</c><00:31:29.390><c> since</c>

00:31:30.010 --> 00:31:30.020 align:start position:0%
app that would be very unfortunate since
 

00:31:30.020 --> 00:31:31.900 align:start position:0%
app that would be very unfortunate since
we<00:31:30.260><c> don't</c><00:31:30.410><c> I</c><00:31:30.710><c> don't</c><00:31:31.190><c> mean</c><00:31:31.370><c> we</c><00:31:31.490><c> I</c><00:31:31.520><c> mean</c><00:31:31.640><c> you</c>

00:31:31.900 --> 00:31:31.910 align:start position:0%
we don't I don't mean we I mean you
 

00:31:31.910 --> 00:31:36.040 align:start position:0%
we don't I don't mean we I mean you
don't<00:31:32.390><c> control</c><00:31:32.780><c> the</c><00:31:32.930><c> Jackson</c><00:31:33.320><c> jar</c><00:31:33.500><c> files</c><00:31:35.050><c> if</c>

00:31:36.040 --> 00:31:36.050 align:start position:0%
don't control the Jackson jar files if
 

00:31:36.050 --> 00:31:38.020 align:start position:0%
don't control the Jackson jar files if
only<00:31:36.410><c> there</c><00:31:36.560><c> was</c><00:31:36.680><c> some</c><00:31:36.980><c> way</c><00:31:37.010><c> for</c><00:31:37.430><c> the</c><00:31:37.520><c> Jackson</c>

00:31:38.020 --> 00:31:38.030 align:start position:0%
only there was some way for the Jackson
 

00:31:38.030 --> 00:31:40.300 align:start position:0%
only there was some way for the Jackson
jar<00:31:38.270><c> files</c><00:31:38.570><c> to</c><00:31:38.930><c> somehow</c><00:31:39.380><c> become</c><00:31:39.800><c> modules</c>

00:31:40.300 --> 00:31:40.310 align:start position:0%
jar files to somehow become modules
 

00:31:40.310 --> 00:31:43.090 align:start position:0%
jar files to somehow become modules
automatically<00:31:41.470><c> we</c><00:31:42.470><c> don't</c><00:31:42.650><c> know</c><00:31:42.770><c> what</c><00:31:42.950><c> their</c>

00:31:43.090 --> 00:31:43.100 align:start position:0%
automatically we don't know what their
 

00:31:43.100 --> 00:31:45.940 align:start position:0%
automatically we don't know what their
dependencies<00:31:43.970><c> and</c><00:31:44.150><c> exports</c><00:31:44.720><c> would</c><00:31:44.870><c> be</c><00:31:45.080><c> but</c><00:31:45.830><c> we</c>

00:31:45.940 --> 00:31:45.950 align:start position:0%
dependencies and exports would be but we
 

00:31:45.950 --> 00:31:47.530 align:start position:0%
dependencies and exports would be but we
have<00:31:46.100><c> a</c><00:31:46.130><c> pretty</c><00:31:46.310><c> good</c><00:31:46.520><c> idea</c><00:31:46.670><c> what</c><00:31:47.180><c> their</c><00:31:47.390><c> names</c>

00:31:47.530 --> 00:31:47.540 align:start position:0%
have a pretty good idea what their names
 

00:31:47.540 --> 00:31:49.720 align:start position:0%
have a pretty good idea what their names
would<00:31:47.720><c> be</c><00:31:47.870><c> they'd</c><00:31:48.110><c> be</c><00:31:48.410><c> the</c><00:31:48.560><c> same</c><00:31:48.590><c> as</c><00:31:49.040><c> the</c><00:31:49.490><c> jars</c>

00:31:49.720 --> 00:31:49.730 align:start position:0%
would be they'd be the same as the jars
 

00:31:49.730 --> 00:31:52.960 align:start position:0%
would be they'd be the same as the jars
Jackson<00:31:50.390><c> core</c><00:31:51.170><c> Jackson</c><00:31:51.890><c> databinding</c><00:31:52.430><c> Jackson</c>

00:31:52.960 --> 00:31:52.970 align:start position:0%
Jackson core Jackson databinding Jackson
 

00:31:52.970 --> 00:31:54.670 align:start position:0%
Jackson core Jackson databinding Jackson
the<00:31:53.060><c> annotations</c><00:31:53.660><c> it's</c><00:31:53.900><c> obvious</c><00:31:54.290><c> from</c><00:31:54.440><c> the</c>

00:31:54.670 --> 00:31:54.680 align:start position:0%
the annotations it's obvious from the
 

00:31:54.680 --> 00:31:59.410 align:start position:0%
the annotations it's obvious from the
jars<00:31:55.720><c> if</c><00:31:56.720><c> we</c><00:31:57.650><c> could</c><00:31:57.860><c> do</c><00:31:58.040><c> that</c><00:31:58.220><c> we</c><00:31:59.090><c> could</c><00:31:59.120><c> finish</c>

00:31:59.410 --> 00:31:59.420 align:start position:0%
jars if we could do that we could finish
 

00:31:59.420 --> 00:32:01.720 align:start position:0%
jars if we could do that we could finish
writing<00:31:59.810><c> the</c><00:32:00.140><c> module</c><00:32:00.440><c> declaration</c><00:32:01.040><c> for</c><00:32:01.610><c> my</c>

00:32:01.720 --> 00:32:01.730 align:start position:0%
writing the module declaration for my
 

00:32:01.730 --> 00:32:06.280 align:start position:0%
writing the module declaration for my
app<00:32:03.490><c> we'd</c><00:32:04.490><c> have</c><00:32:04.640><c> a</c><00:32:04.670><c> lovely</c><00:32:04.850><c> module</c><00:32:05.270><c> graph</c><00:32:05.570><c> with</c>

00:32:06.280 --> 00:32:06.290 align:start position:0%
app we'd have a lovely module graph with
 

00:32:06.290 --> 00:32:08.560 align:start position:0%
app we'd have a lovely module graph with
my<00:32:06.500><c> app</c><00:32:06.620><c> depending</c><00:32:07.250><c> on</c><00:32:07.370><c> my</c><00:32:07.640><c> lib</c><00:32:07.850><c> and</c><00:32:08.090><c> Jackson</c>

00:32:08.560 --> 00:32:08.570 align:start position:0%
my app depending on my lib and Jackson
 

00:32:08.570 --> 00:32:10.660 align:start position:0%
my app depending on my lib and Jackson
core<00:32:08.840><c> and</c><00:32:09.080><c> Jackson</c><00:32:09.410><c> data</c><00:32:09.560><c> bind</c><00:32:09.860><c> and</c><00:32:10.160><c> also</c><00:32:10.490><c> on</c>

00:32:10.660 --> 00:32:10.670 align:start position:0%
core and Jackson data bind and also on
 

00:32:10.670 --> 00:32:15.790 align:start position:0%
core and Jackson data bind and also on
Java<00:32:11.330><c> base</c><00:32:11.540><c> and</c><00:32:11.750><c> java</c><00:32:11.930><c> sequel</c><00:32:14.380><c> the</c><00:32:15.380><c> good</c><00:32:15.590><c> news</c>

00:32:15.790 --> 00:32:15.800 align:start position:0%
Java base and java sequel the good news
 

00:32:15.800 --> 00:32:18.280 align:start position:0%
Java base and java sequel the good news
is<00:32:16.160><c> that</c><00:32:16.460><c> we</c><00:32:16.700><c> can</c><00:32:16.880><c> do</c><00:32:16.970><c> this</c><00:32:17.150><c> with</c><00:32:17.870><c> automatic</c>

00:32:18.280 --> 00:32:18.290 align:start position:0%
is that we can do this with automatic
 

00:32:18.290 --> 00:32:22.270 align:start position:0%
is that we can do this with automatic
modules<00:32:18.920><c> an</c><00:32:20.020><c> automatic</c><00:32:21.020><c> module</c><00:32:21.380><c> is</c><00:32:21.680><c> a</c><00:32:22.010><c> module</c>

00:32:22.270 --> 00:32:22.280 align:start position:0%
modules an automatic module is a module
 

00:32:22.280 --> 00:32:25.090 align:start position:0%
modules an automatic module is a module
whose<00:32:22.760><c> declaration</c><00:32:23.570><c> is</c><00:32:23.720><c> inferred</c><00:32:24.650><c> by</c><00:32:25.070><c> the</c>

00:32:25.090 --> 00:32:25.100 align:start position:0%
whose declaration is inferred by the
 

00:32:25.100 --> 00:32:28.450 align:start position:0%
whose declaration is inferred by the
module<00:32:25.580><c> system</c><00:32:26.060><c> from</c><00:32:26.870><c> a</c><00:32:26.900><c> jar</c><00:32:27.260><c> on</c><00:32:27.560><c> the</c><00:32:28.130><c> module</c>

00:32:28.450 --> 00:32:28.460 align:start position:0%
module system from a jar on the module
 

00:32:28.460 --> 00:32:32.080 align:start position:0%
module system from a jar on the module
path<00:32:28.960><c> so</c><00:32:29.960><c> if</c><00:32:30.080><c> we</c><00:32:30.290><c> have</c><00:32:30.530><c> jars</c><00:32:30.890><c> that</c><00:32:31.280><c> are</c><00:32:31.790><c> not</c>

00:32:32.080 --> 00:32:32.090 align:start position:0%
path so if we have jars that are not
 

00:32:32.090 --> 00:32:35.320 align:start position:0%
path so if we have jars that are not
modular<00:32:32.660><c> jars</c><00:32:32.930><c> we</c><00:32:33.770><c> can</c><00:32:33.950><c> still</c><00:32:34.400><c> put</c><00:32:34.970><c> them</c><00:32:35.090><c> on</c>

00:32:35.320 --> 00:32:35.330 align:start position:0%
modular jars we can still put them on
 

00:32:35.330 --> 00:32:38.320 align:start position:0%
modular jars we can still put them on
the<00:32:35.540><c> module</c><00:32:36.080><c> path</c><00:32:36.410><c> and</c><00:32:36.830><c> the</c><00:32:37.580><c> module</c><00:32:38.060><c> system</c>

00:32:38.320 --> 00:32:38.330 align:start position:0%
the module path and the module system
 

00:32:38.330 --> 00:32:41.790 align:start position:0%
the module path and the module system
will<00:32:38.750><c> turn</c><00:32:39.020><c> them</c><00:32:39.200><c> into</c><00:32:39.290><c> modules</c><00:32:39.800><c> in</c><00:32:40.670><c> effect</c>

00:32:41.790 --> 00:32:41.800 align:start position:0%
will turn them into modules in effect
 

00:32:41.800 --> 00:32:43.810 align:start position:0%
will turn them into modules in effect
automatic<00:32:42.800><c> modules</c><00:32:43.160><c> are</c><00:32:43.340><c> a</c><00:32:43.370><c> feature</c><00:32:43.610><c> that</c>

00:32:43.810 --> 00:32:43.820 align:start position:0%
automatic modules are a feature that
 

00:32:43.820 --> 00:32:46.570 align:start position:0%
automatic modules are a feature that
means<00:32:44.120><c> yesterday's</c><00:32:44.780><c> jars</c><00:32:45.230><c> are</c><00:32:45.710><c> already</c>

00:32:46.570 --> 00:32:46.580 align:start position:0%
means yesterday's jars are already
 

00:32:46.580 --> 00:32:53.860 align:start position:0%
means yesterday's jars are already
today's<00:32:47.260><c> modules</c><00:32:51.370><c> once</c><00:32:52.480><c> automatic</c><00:32:53.480><c> modules</c>

00:32:53.860 --> 00:32:53.870 align:start position:0%
today's modules once automatic modules
 

00:32:53.870 --> 00:32:56.920 align:start position:0%
today's modules once automatic modules
spring<00:32:54.620><c> into</c><00:32:54.980><c> existence</c><00:32:55.210><c> for</c><00:32:56.210><c> Jackson</c><00:32:56.660><c> core</c>

00:32:56.920 --> 00:32:56.930 align:start position:0%
spring into existence for Jackson core
 

00:32:56.930 --> 00:32:58.510 align:start position:0%
spring into existence for Jackson core
Jax<00:32:57.290><c> and</c><00:32:57.470><c> data</c><00:32:57.650><c> bind</c><00:32:57.950><c> and</c><00:32:58.190><c> Jackson</c>

00:32:58.510 --> 00:32:58.520 align:start position:0%
Jax and data bind and Jackson
 

00:32:58.520 --> 00:33:00.430 align:start position:0%
Jax and data bind and Jackson
annotations<00:32:59.060><c> the</c><00:32:59.240><c> module</c><00:32:59.510><c> graph</c><00:32:59.750><c> looks</c><00:33:00.110><c> quite</c>

00:33:00.430 --> 00:33:00.440 align:start position:0%
annotations the module graph looks quite
 

00:33:00.440 --> 00:33:01.650 align:start position:0%
annotations the module graph looks quite
different

00:33:01.650 --> 00:33:01.660 align:start position:0%
different
 

00:33:01.660 --> 00:33:04.680 align:start position:0%
different
the<00:33:02.470><c> automatic</c><00:33:02.890><c> modules</c><00:33:03.430><c> basically</c><00:33:04.180><c> say</c>

00:33:04.680 --> 00:33:04.690 align:start position:0%
the automatic modules basically say
 

00:33:04.690 --> 00:33:07.170 align:start position:0%
the automatic modules basically say
requires<00:33:05.260><c> for</c><00:33:05.710><c> everything</c><00:33:06.220><c> that</c><00:33:06.940><c> is</c><00:33:07.060><c> they</c>

00:33:07.170 --> 00:33:07.180 align:start position:0%
requires for everything that is they
 

00:33:07.180 --> 00:33:09.360 align:start position:0%
requires for everything that is they
require<00:33:07.390><c> each</c><00:33:07.840><c> other</c><00:33:08.080><c> and</c><00:33:08.350><c> all</c><00:33:09.070><c> the</c><00:33:09.220><c> modules</c>

00:33:09.360 --> 00:33:09.370 align:start position:0%
require each other and all the modules
 

00:33:09.370 --> 00:33:12.240 align:start position:0%
require each other and all the modules
in<00:33:09.910><c> the</c><00:33:10.090><c> JDK</c><00:33:10.480><c> and</c><00:33:10.660><c> all</c><00:33:11.200><c> of</c><00:33:11.320><c> your</c><00:33:11.500><c> modules</c><00:33:11.710><c> as</c>

00:33:12.240 --> 00:33:12.250 align:start position:0%
in the JDK and all of your modules as
 

00:33:12.250 --> 00:33:15.240 align:start position:0%
in the JDK and all of your modules as
well<00:33:12.460><c> and</c><00:33:12.790><c> they</c><00:33:13.660><c> export</c><00:33:14.320><c> all</c><00:33:14.650><c> of</c><00:33:14.710><c> their</c>

00:33:15.240 --> 00:33:15.250 align:start position:0%
well and they export all of their
 

00:33:15.250 --> 00:33:17.940 align:start position:0%
well and they export all of their
packages<00:33:15.870><c> now</c><00:33:16.870><c> whilst</c><00:33:17.140><c> this</c><00:33:17.410><c> may</c><00:33:17.650><c> very</c><00:33:17.890><c> well</c>

00:33:17.940 --> 00:33:17.950 align:start position:0%
packages now whilst this may very well
 

00:33:17.950 --> 00:33:20.850 align:start position:0%
packages now whilst this may very well
not<00:33:18.460><c> be</c><00:33:18.520><c> the</c><00:33:18.910><c> set</c><00:33:19.150><c> of</c><00:33:19.180><c> requires</c><00:33:19.900><c> and</c><00:33:20.260><c> export</c>

00:33:20.850 --> 00:33:20.860 align:start position:0%
not be the set of requires and export
 

00:33:20.860 --> 00:33:23.100 align:start position:0%
not be the set of requires and export
directives<00:33:21.460><c> that</c><00:33:22.180><c> the</c><00:33:22.330><c> maintainer</c><00:33:22.810><c> zuv</c>

00:33:23.100 --> 00:33:23.110 align:start position:0%
directives that the maintainer zuv
 

00:33:23.110 --> 00:33:25.560 align:start position:0%
directives that the maintainer zuv
Jackson<00:33:23.620><c> would</c><00:33:23.770><c> write</c><00:33:24.010><c> by</c><00:33:24.220><c> hands</c><00:33:24.820><c> it's</c>

00:33:25.560 --> 00:33:25.570 align:start position:0%
Jackson would write by hands it's
 

00:33:25.570 --> 00:33:28.500 align:start position:0%
Jackson would write by hands it's
actually<00:33:26.050><c> a</c><00:33:26.260><c> feature</c><00:33:27.040><c> because</c><00:33:27.850><c> it</c><00:33:27.880><c> it</c>

00:33:28.500 --> 00:33:28.510 align:start position:0%
actually a feature because it it
 

00:33:28.510 --> 00:33:30.560 align:start position:0%
actually a feature because it it
emulates<00:33:28.930><c> the</c><00:33:29.230><c> behavior</c><00:33:29.770><c> of</c><00:33:29.800><c> the</c><00:33:30.040><c> classpath</c>

00:33:30.560 --> 00:33:30.570 align:start position:0%
emulates the behavior of the classpath
 

00:33:30.570 --> 00:33:33.560 align:start position:0%
emulates the behavior of the classpath
it<00:33:31.570><c> provides</c><00:33:31.990><c> the</c><00:33:32.200><c> maximum</c><00:33:32.410><c> possible</c>

00:33:33.560 --> 00:33:33.570 align:start position:0%
it provides the maximum possible
 

00:33:33.570 --> 00:33:36.630 align:start position:0%
it provides the maximum possible
compatibility<00:33:34.570><c> surface</c><00:33:35.050><c> for</c><00:33:35.800><c> code</c><00:33:36.010><c> in</c><00:33:36.340><c> jar</c>

00:33:36.630 --> 00:33:36.640 align:start position:0%
compatibility surface for code in jar
 

00:33:36.640 --> 00:33:40.650 align:start position:0%
compatibility surface for code in jar
files<00:33:37.440><c> and</c><00:33:38.440><c> actually</c><00:33:39.130><c> overall</c><00:33:39.940><c> this</c><00:33:40.480><c> is</c>

00:33:40.650 --> 00:33:40.660 align:start position:0%
files and actually overall this is
 

00:33:40.660 --> 00:33:42.750 align:start position:0%
files and actually overall this is
better<00:33:41.020><c> than</c><00:33:41.500><c> when</c><00:33:41.830><c> everything</c><00:33:42.220><c> was</c><00:33:42.340><c> a</c><00:33:42.400><c> jar</c><00:33:42.670><c> on</c>

00:33:42.750 --> 00:33:42.760 align:start position:0%
better than when everything was a jar on
 

00:33:42.760 --> 00:33:45.120 align:start position:0%
better than when everything was a jar on
the<00:33:42.910><c> classpath</c><00:33:43.420><c> for</c><00:33:43.750><c> example</c><00:33:44.110><c> if</c><00:33:44.920><c> you</c><00:33:45.010><c> look</c>

00:33:45.120 --> 00:33:45.130 align:start position:0%
the classpath for example if you look
 

00:33:45.130 --> 00:33:47.960 align:start position:0%
the classpath for example if you look
carefully<00:33:45.280><c> there's</c><00:33:46.180><c> no</c><00:33:46.420><c> arrow</c><00:33:46.780><c> from</c><00:33:47.230><c> my</c><00:33:47.440><c> lib</c>

00:33:47.960 --> 00:33:47.970 align:start position:0%
carefully there's no arrow from my lib
 

00:33:47.970 --> 00:33:51.630 align:start position:0%
carefully there's no arrow from my lib
to<00:33:48.970><c> my</c><00:33:49.180><c> app</c><00:33:49.360><c> so</c><00:33:49.690><c> there</c><00:33:50.530><c> is</c><00:33:50.650><c> no</c><00:33:50.770><c> danger</c><00:33:50.980><c> of</c><00:33:51.370><c> code</c>

00:33:51.630 --> 00:33:51.640 align:start position:0%
to my app so there is no danger of code
 

00:33:51.640 --> 00:33:54.540 align:start position:0%
to my app so there is no danger of code
in<00:33:51.880><c> my</c><00:33:51.910><c> lib</c><00:33:52.530><c> accidentally</c><00:33:53.530><c> reaching</c><00:33:54.070><c> into</c><00:33:54.430><c> the</c>

00:33:54.540 --> 00:33:54.550 align:start position:0%
in my lib accidentally reaching into the
 

00:33:54.550 --> 00:33:58.560 align:start position:0%
in my lib accidentally reaching into the
apps<00:33:54.820><c> internals</c><00:33:55.830><c> on</c><00:33:56.830><c> the</c><00:33:57.190><c> classpath</c><00:33:57.700><c> code</c><00:33:58.420><c> in</c>

00:33:58.560 --> 00:33:58.570 align:start position:0%
apps internals on the classpath code in
 

00:33:58.570 --> 00:34:00.600 align:start position:0%
apps internals on the classpath code in
my<00:33:58.600><c> lib</c><00:33:58.870><c> dot</c><00:33:59.050><c> jar</c><00:33:59.260><c> could</c><00:33:59.500><c> access</c><00:33:59.920><c> code</c><00:34:00.250><c> in</c><00:34:00.430><c> my</c>

00:34:00.600 --> 00:34:00.610 align:start position:0%
my lib dot jar could access code in my
 

00:34:00.610 --> 00:34:02.670 align:start position:0%
my lib dot jar could access code in my
app<00:34:00.760><c> dot</c><00:34:01.030><c> jar</c><00:34:01.270><c> quite</c><00:34:01.570><c> easily</c><00:34:01.780><c> without</c><00:34:02.320><c> even</c>

00:34:02.670 --> 00:34:02.680 align:start position:0%
app dot jar quite easily without even
 

00:34:02.680 --> 00:34:04.470 align:start position:0%
app dot jar quite easily without even
knowing<00:34:02.950><c> it</c><00:34:03.100><c> and</c><00:34:03.400><c> that's</c><00:34:04.090><c> what</c><00:34:04.240><c> causes</c>

00:34:04.470 --> 00:34:04.480 align:start position:0%
knowing it and that's what causes
 

00:34:04.480 --> 00:34:09.960 align:start position:0%
knowing it and that's what causes
maintenance<00:34:05.050><c> headaches</c><00:34:05.350><c> down</c><00:34:06.160><c> the</c><00:34:06.220><c> road</c><00:34:08.970><c> so</c>

00:34:09.960 --> 00:34:09.970 align:start position:0%
maintenance headaches down the road so
 

00:34:09.970 --> 00:34:12.510 align:start position:0%
maintenance headaches down the road so
when<00:34:10.240><c> thinking</c><00:34:11.020><c> about</c><00:34:11.290><c> migration</c><00:34:11.800><c> each</c>

00:34:12.510 --> 00:34:12.520 align:start position:0%
when thinking about migration each
 

00:34:12.520 --> 00:34:14.730 align:start position:0%
when thinking about migration each
application<00:34:13.090><c> jar</c><00:34:13.510><c> is</c><00:34:13.690><c> usually</c><00:34:14.290><c> a</c><00:34:14.470><c> good</c>

00:34:14.730 --> 00:34:14.740 align:start position:0%
application jar is usually a good
 

00:34:14.740 --> 00:34:18.720 align:start position:0%
application jar is usually a good
candidate<00:34:15.399><c> to</c><00:34:15.639><c> be</c><00:34:16.030><c> a</c><00:34:16.060><c> module</c><00:34:17.010><c> each</c><00:34:18.010><c> library</c>

00:34:18.720 --> 00:34:18.730 align:start position:0%
candidate to be a module each library
 

00:34:18.730 --> 00:34:21.710 align:start position:0%
candidate to be a module each library
jar<00:34:19.000><c> will</c><00:34:19.540><c> modular</c><00:34:20.080><c> eyes</c><00:34:20.260><c> at</c><00:34:20.560><c> its</c><00:34:20.830><c> own</c><00:34:21.070><c> pace</c>

00:34:21.710 --> 00:34:21.720 align:start position:0%
jar will modular eyes at its own pace
 

00:34:21.720 --> 00:34:24.600 align:start position:0%
jar will modular eyes at its own pace
but<00:34:22.720><c> automatic</c><00:34:23.290><c> modules</c><00:34:23.679><c> mean</c><00:34:24.070><c> you</c><00:34:24.250><c> are</c><00:34:24.399><c> not</c>

00:34:24.600 --> 00:34:24.610 align:start position:0%
but automatic modules mean you are not
 

00:34:24.610 --> 00:34:32.280 align:start position:0%
but automatic modules mean you are not
waiting<00:34:24.850><c> for</c><00:34:25.690><c> the</c><00:34:25.810><c> weakest</c><00:34:26.139><c> link</c><00:34:30.899><c> now</c><00:34:31.899><c> I'd</c>

00:34:32.280 --> 00:34:32.290 align:start position:0%
waiting for the weakest link now I'd
 

00:34:32.290 --> 00:34:34.139 align:start position:0%
waiting for the weakest link now I'd
like<00:34:32.470><c> to</c><00:34:32.530><c> turn</c><00:34:32.770><c> our</c><00:34:32.950><c> attention</c><00:34:33.070><c> in</c><00:34:33.460><c> this</c><00:34:33.610><c> final</c>

00:34:34.139 --> 00:34:34.149 align:start position:0%
like to turn our attention in this final
 

00:34:34.149 --> 00:34:39.570 align:start position:0%
like to turn our attention in this final
section<00:34:34.330><c> to</c><00:34:34.780><c> the</c><00:34:34.929><c> modular</c><00:34:35.440><c> JDK</c><00:34:38.250><c> 20</c><00:34:39.250><c> years</c><00:34:39.429><c> ago</c>

00:34:39.570 --> 00:34:39.580 align:start position:0%
section to the modular JDK 20 years ago
 

00:34:39.580 --> 00:34:42.030 align:start position:0%
section to the modular JDK 20 years ago
the<00:34:40.030><c> Java</c><00:34:40.330><c> platform</c><00:34:40.540><c> was</c><00:34:41.080><c> small</c><00:34:41.350><c> just</c><00:34:41.679><c> a</c><00:34:41.830><c> few</c>

00:34:42.030 --> 00:34:42.040 align:start position:0%
the Java platform was small just a few
 

00:34:42.040 --> 00:34:44.430 align:start position:0%
the Java platform was small just a few
hundred<00:34:42.159><c> classes</c><00:34:42.760><c> and</c><00:34:43.030><c> the</c><00:34:43.720><c> organization</c><00:34:44.320><c> of</c>

00:34:44.430 --> 00:34:44.440 align:start position:0%
hundred classes and the organization of
 

00:34:44.440 --> 00:34:47.430 align:start position:0%
hundred classes and the organization of
the<00:34:44.530><c> JDK</c><00:34:44.710><c> was</c><00:34:45.190><c> not</c><00:34:45.399><c> a</c><00:34:45.429><c> problem</c><00:34:46.139><c> but</c><00:34:47.139><c> every</c><00:34:47.409><c> year</c>

00:34:47.430 --> 00:34:47.440 align:start position:0%
the JDK was not a problem but every year
 

00:34:47.440 --> 00:34:49.560 align:start position:0%
the JDK was not a problem but every year
the<00:34:47.649><c> platform</c><00:34:48.250><c> grew</c><00:34:48.490><c> bigger</c><00:34:48.730><c> and</c><00:34:48.909><c> now</c><00:34:49.419><c> it's</c>

00:34:49.560 --> 00:34:49.570 align:start position:0%
the platform grew bigger and now it's
 

00:34:49.570 --> 00:34:52.500 align:start position:0%
the platform grew bigger and now it's
tens<00:34:49.870><c> of</c><00:34:50.169><c> thousands</c><00:34:50.710><c> of</c><00:34:50.800><c> classes</c><00:34:51.310><c> the</c><00:34:51.940><c> JDK</c><00:34:52.360><c> is</c>

00:34:52.500 --> 00:34:52.510 align:start position:0%
tens of thousands of classes the JDK is
 

00:34:52.510 --> 00:34:56.430 align:start position:0%
tens of thousands of classes the JDK is
huge<00:34:52.960><c> and</c><00:34:53.230><c> worse</c><00:34:53.830><c> it's</c><00:34:54.159><c> monolithic</c><00:34:55.020><c> now</c><00:34:56.020><c> in</c>

00:34:56.430 --> 00:34:56.440 align:start position:0%
huge and worse it's monolithic now in
 

00:34:56.440 --> 00:34:58.500 align:start position:0%
huge and worse it's monolithic now in
reality<00:34:56.740><c> the</c><00:34:57.250><c> Java</c><00:34:57.460><c> platform</c><00:34:57.700><c> is</c><00:34:58.090><c> not</c><00:34:58.300><c> one</c>

00:34:58.500 --> 00:34:58.510 align:start position:0%
reality the Java platform is not one
 

00:34:58.510 --> 00:35:01.770 align:start position:0%
reality the Java platform is not one
thing<00:34:58.780><c> it's</c><00:34:59.740><c> more</c><00:35:00.040><c> like</c><00:35:00.250><c> 25</c><00:35:01.180><c> separate</c>

00:35:01.770 --> 00:35:01.780 align:start position:0%
thing it's more like 25 separate
 

00:35:01.780 --> 00:35:03.750 align:start position:0%
thing it's more like 25 separate
frameworks<00:35:02.290><c> including</c><00:35:03.160><c> the</c><00:35:03.280><c> swing</c><00:35:03.580><c> UI</c>

00:35:03.750 --> 00:35:03.760 align:start position:0%
frameworks including the swing UI
 

00:35:03.760 --> 00:35:06.030 align:start position:0%
frameworks including the swing UI
framework<00:35:04.360><c> the</c><00:35:04.870><c> crypto</c><00:35:05.290><c> framework</c><00:35:05.770><c> a</c>

00:35:06.030 --> 00:35:06.040 align:start position:0%
framework the crypto framework a
 

00:35:06.040 --> 00:35:08.430 align:start position:0%
framework the crypto framework a
scripting<00:35:06.730><c> framework</c><00:35:07.080><c> multiple</c><00:35:08.080><c> XML</c>

00:35:08.430 --> 00:35:08.440 align:start position:0%
scripting framework multiple XML
 

00:35:08.440 --> 00:35:11.190 align:start position:0%
scripting framework multiple XML
processing<00:35:08.920><c> frameworks</c><00:35:09.400><c> and</c><00:35:09.610><c> so</c><00:35:09.760><c> on</c><00:35:10.200><c> there's</c>

00:35:11.190 --> 00:35:11.200 align:start position:0%
processing frameworks and so on there's
 

00:35:11.200 --> 00:35:13.230 align:start position:0%
processing frameworks and so on there's
no<00:35:11.380><c> reason</c><00:35:11.770><c> these</c><00:35:11.890><c> separate</c><00:35:12.310><c> frameworks</c><00:35:12.760><c> have</c>

00:35:13.230 --> 00:35:13.240 align:start position:0%
no reason these separate frameworks have
 

00:35:13.240 --> 00:35:14.640 align:start position:0%
no reason these separate frameworks have
to<00:35:13.390><c> be</c><00:35:13.510><c> tightly</c><00:35:14.080><c> coupled</c>

00:35:14.640 --> 00:35:14.650 align:start position:0%
to be tightly coupled
 

00:35:14.650 --> 00:35:17.849 align:start position:0%
to be tightly coupled
one<00:35:14.829><c> download</c><00:35:15.339><c> in</c><00:35:16.329><c> fact</c><00:35:16.750><c> it's</c><00:35:17.109><c> an</c><00:35:17.319><c> impediment</c>

00:35:17.849 --> 00:35:17.859 align:start position:0%
one download in fact it's an impediment
 

00:35:17.859 --> 00:35:21.539 align:start position:0%
one download in fact it's an impediment
in<00:35:18.430><c> developing</c><00:35:19.240><c> the</c><00:35:19.359><c> JDK</c><00:35:19.809><c> the</c><00:35:20.279><c> overly</c><00:35:21.279><c> tight</c>

00:35:21.539 --> 00:35:21.549 align:start position:0%
in developing the JDK the overly tight
 

00:35:21.549 --> 00:35:24.870 align:start position:0%
in developing the JDK the overly tight
coupling<00:35:22.020><c> perhaps</c><00:35:23.020><c> accidental</c><00:35:23.880><c> raises</c>

00:35:24.870 --> 00:35:24.880 align:start position:0%
coupling perhaps accidental raises
 

00:35:24.880 --> 00:35:27.150 align:start position:0%
coupling perhaps accidental raises
development<00:35:25.510><c> and</c><00:35:25.660><c> testing</c><00:35:26.200><c> costs</c><00:35:26.410><c> which</c>

00:35:27.150 --> 00:35:27.160 align:start position:0%
development and testing costs which
 

00:35:27.160 --> 00:35:29.069 align:start position:0%
development and testing costs which
turns<00:35:27.490><c> into</c><00:35:27.670><c> slower</c><00:35:28.059><c> platform</c><00:35:28.539><c> evolution</c>

00:35:29.069 --> 00:35:29.079 align:start position:0%
turns into slower platform evolution
 

00:35:29.079 --> 00:35:32.250 align:start position:0%
turns into slower platform evolution
plus<00:35:30.069><c> the</c><00:35:30.549><c> larger</c><00:35:31.029><c> the</c><00:35:31.210><c> surface</c><00:35:31.569><c> of</c><00:35:31.990><c> your</c>

00:35:32.250 --> 00:35:32.260 align:start position:0%
plus the larger the surface of your
 

00:35:32.260 --> 00:35:35.779 align:start position:0%
plus the larger the surface of your
platform<00:35:32.770><c> the</c><00:35:33.309><c> harder</c><00:35:33.730><c> it</c><00:35:33.880><c> is</c><00:35:33.910><c> to</c><00:35:34.150><c> secure</c><00:35:34.900><c> and</c>

00:35:35.779 --> 00:35:35.789 align:start position:0%
platform the harder it is to secure and
 

00:35:35.789 --> 00:35:38.130 align:start position:0%
platform the harder it is to secure and
it's<00:35:36.789><c> an</c><00:35:36.880><c> impediment</c><00:35:37.089><c> to</c><00:35:37.510><c> a</c><00:35:37.660><c> lot</c><00:35:37.839><c> of</c><00:35:37.869><c> users</c>

00:35:38.130 --> 00:35:38.140 align:start position:0%
it's an impediment to a lot of users
 

00:35:38.140 --> 00:35:39.599 align:start position:0%
it's an impediment to a lot of users
both<00:35:38.529><c> those</c><00:35:38.740><c> who</c><00:35:38.770><c> want</c><00:35:39.130><c> to</c><00:35:39.190><c> run</c><00:35:39.460><c> their</c>

00:35:39.599 --> 00:35:39.609 align:start position:0%
both those who want to run their
 

00:35:39.609 --> 00:35:41.760 align:start position:0%
both those who want to run their
applications<00:35:39.730><c> on</c><00:35:40.450><c> smaller</c><00:35:40.809><c> devices</c><00:35:40.960><c> and</c>

00:35:41.760 --> 00:35:41.770 align:start position:0%
applications on smaller devices and
 

00:35:41.770 --> 00:35:44.010 align:start position:0%
applications on smaller devices and
those<00:35:42.400><c> who</c><00:35:42.520><c> want</c><00:35:42.700><c> to</c><00:35:42.760><c> run</c><00:35:42.910><c> more</c><00:35:43.150><c> instances</c><00:35:43.869><c> of</c>

00:35:44.010 --> 00:35:44.020 align:start position:0%
those who want to run more instances of
 

00:35:44.020 --> 00:35:46.799 align:start position:0%
those who want to run more instances of
their<00:35:44.289><c> application</c><00:35:44.950><c> on</c><00:35:45.130><c> large</c><00:35:45.400><c> systems</c><00:35:45.880><c> even</c>

00:35:46.799 --> 00:35:46.809 align:start position:0%
their application on large systems even
 

00:35:46.809 --> 00:35:49.019 align:start position:0%
their application on large systems even
if<00:35:46.900><c> you</c><00:35:46.990><c> only</c><00:35:47.200><c> wanted</c><00:35:47.589><c> a</c><00:35:47.680><c> part</c><00:35:47.920><c> of</c><00:35:48.039><c> the</c><00:35:48.160><c> JDK</c><00:35:48.579><c> you</c>

00:35:49.019 --> 00:35:49.029 align:start position:0%
if you only wanted a part of the JDK you
 

00:35:49.029 --> 00:35:53.880 align:start position:0%
if you only wanted a part of the JDK you
had<00:35:49.240><c> to</c><00:35:49.390><c> take</c><00:35:49.569><c> all</c><00:35:49.750><c> of</c><00:35:49.779><c> it</c><00:35:52.140><c> that</c><00:35:53.140><c> all</c><00:35:53.289><c> changes</c>

00:35:53.880 --> 00:35:53.890 align:start position:0%
had to take all of it that all changes
 

00:35:53.890 --> 00:35:57.660 align:start position:0%
had to take all of it that all changes
in<00:35:54.160><c> JDK</c><00:35:54.730><c> 9</c><00:35:55.349><c> we've</c><00:35:56.349><c> taken</c><00:35:56.589><c> the</c><00:35:56.799><c> monolithic</c><00:35:57.190><c> JDK</c>

00:35:57.660 --> 00:35:57.670 align:start position:0%
in JDK 9 we've taken the monolithic JDK
 

00:35:57.670 --> 00:35:59.819 align:start position:0%
in JDK 9 we've taken the monolithic JDK
and<00:35:57.880><c> broken</c><00:35:58.630><c> it</c><00:35:58.720><c> up</c><00:35:58.839><c> into</c><00:35:59.079><c> a</c><00:35:59.200><c> few</c><00:35:59.500><c> dozen</c>

00:35:59.819 --> 00:35:59.829 align:start position:0%
and broken it up into a few dozen
 

00:35:59.829 --> 00:36:02.460 align:start position:0%
and broken it up into a few dozen
modules<00:36:00.220><c> some</c><00:36:00.940><c> are</c><00:36:01.210><c> part</c><00:36:01.569><c> of</c><00:36:01.720><c> the</c><00:36:01.869><c> Java</c><00:36:02.109><c> SE</c>

00:36:02.460 --> 00:36:02.470 align:start position:0%
modules some are part of the Java SE
 

00:36:02.470 --> 00:36:05.519 align:start position:0%
modules some are part of the Java SE
specification<00:36:03.279><c> some</c><00:36:03.880><c> up</c><00:36:04.000><c> just</c><00:36:04.480><c> parts</c><00:36:04.990><c> of</c><00:36:05.140><c> the</c>

00:36:05.519 --> 00:36:05.529 align:start position:0%
specification some up just parts of the
 

00:36:05.529 --> 00:36:08.609 align:start position:0%
specification some up just parts of the
JDK<00:36:05.849><c> implementation</c><00:36:06.849><c> here's</c><00:36:07.809><c> a</c><00:36:07.869><c> graph</c><00:36:08.109><c> of</c><00:36:08.349><c> the</c>

00:36:08.609 --> 00:36:08.619 align:start position:0%
JDK implementation here's a graph of the
 

00:36:08.619 --> 00:36:11.789 align:start position:0%
JDK implementation here's a graph of the
Java<00:36:08.829><c> SE</c><00:36:09.190><c> modules</c><00:36:09.579><c> at</c><00:36:10.480><c> the</c><00:36:10.839><c> bottom</c><00:36:11.109><c> there's</c>

00:36:11.789 --> 00:36:11.799 align:start position:0%
Java SE modules at the bottom there's
 

00:36:11.799 --> 00:36:14.190 align:start position:0%
Java SE modules at the bottom there's
Java<00:36:12.069><c> base</c><00:36:12.309><c> which</c><00:36:13.029><c> everything</c><00:36:13.720><c> depends</c><00:36:14.109><c> on</c>

00:36:14.190 --> 00:36:14.200 align:start position:0%
Java base which everything depends on
 

00:36:14.200 --> 00:36:16.970 align:start position:0%
Java base which everything depends on
and<00:36:14.470><c> which</c><00:36:14.859><c> depends</c><00:36:15.279><c> on</c><00:36:15.369><c> nothing</c><00:36:15.640><c> itself</c>

00:36:16.970 --> 00:36:16.980 align:start position:0%
and which depends on nothing itself
 

00:36:16.980 --> 00:36:19.440 align:start position:0%
and which depends on nothing itself
we've<00:36:17.980><c> broken</c><00:36:18.250><c> out</c><00:36:18.460><c> the</c><00:36:18.579><c> various</c><00:36:18.940><c> frameworks</c>

00:36:19.440 --> 00:36:19.450 align:start position:0%
we've broken out the various frameworks
 

00:36:19.450 --> 00:36:21.569 align:start position:0%
we've broken out the various frameworks
into<00:36:19.720><c> their</c><00:36:19.960><c> own</c><00:36:20.140><c> modules</c><00:36:20.589><c> instrumentation</c>

00:36:21.569 --> 00:36:21.579 align:start position:0%
into their own modules instrumentation
 

00:36:21.579 --> 00:36:24.359 align:start position:0%
into their own modules instrumentation
logging<00:36:22.059><c> XML</c><00:36:22.660><c> scripting</c><00:36:23.500><c> desktop</c><00:36:23.980><c> which</c><00:36:24.190><c> you</c>

00:36:24.359 --> 00:36:24.369 align:start position:0%
logging XML scripting desktop which you
 

00:36:24.369 --> 00:36:27.839 align:start position:0%
logging XML scripting desktop which you
can<00:36:24.640><c> require</c><00:36:25.240><c> or</c><00:36:25.569><c> not</c><00:36:26.410><c> require</c><00:36:26.859><c> as</c><00:36:27.130><c> your</c><00:36:27.700><c> needs</c>

00:36:27.839 --> 00:36:27.849 align:start position:0%
can require or not require as your needs
 

00:36:27.849 --> 00:36:31.980 align:start position:0%
can require or not require as your needs
dictate<00:36:28.829><c> there's</c><00:36:29.829><c> a</c><00:36:30.099><c> Java</c><00:36:30.730><c> SE</c><00:36:31.119><c> module</c><00:36:31.539><c> at</c><00:36:31.930><c> the</c>

00:36:31.980 --> 00:36:31.990 align:start position:0%
dictate there's a Java SE module at the
 

00:36:31.990 --> 00:36:35.190 align:start position:0%
dictate there's a Java SE module at the
top<00:36:32.260><c> which</c><00:36:32.440><c> has</c><00:36:32.680><c> no</c><00:36:32.920><c> code</c><00:36:33.549><c> in</c><00:36:33.579><c> it</c><00:36:33.880><c> it</c><00:36:34.779><c> just</c><00:36:34.839><c> has</c>

00:36:35.190 --> 00:36:35.200 align:start position:0%
top which has no code in it it just has
 

00:36:35.200 --> 00:36:37.920 align:start position:0%
top which has no code in it it just has
dependencies<00:36:35.740><c> so</c><00:36:36.640><c> you</c><00:36:36.700><c> can</c><00:36:37.029><c> say</c><00:36:37.299><c> requires</c>

00:36:37.920 --> 00:36:37.930 align:start position:0%
dependencies so you can say requires
 

00:36:37.930 --> 00:36:41.279 align:start position:0%
dependencies so you can say requires
Java<00:36:38.470><c> SE</c><00:36:38.950><c> and</c><00:36:39.309><c> be</c><00:36:39.789><c> guaranteed</c><00:36:40.420><c> to</c><00:36:40.450><c> have</c><00:36:40.809><c> all</c><00:36:41.049><c> of</c>

00:36:41.279 --> 00:36:41.289 align:start position:0%
Java SE and be guaranteed to have all of
 

00:36:41.289 --> 00:36:44.309 align:start position:0%
Java SE and be guaranteed to have all of
these<00:36:41.440><c> modules</c><00:36:41.650><c> available</c><00:36:43.020><c> now</c><00:36:44.020><c> it's</c><00:36:44.170><c> worth</c>

00:36:44.309 --> 00:36:44.319 align:start position:0%
these modules available now it's worth
 

00:36:44.319 --> 00:36:46.650 align:start position:0%
these modules available now it's worth
mentioning<00:36:44.579><c> that</c><00:36:45.579><c> merely</c><00:36:45.789><c> finding</c><00:36:46.480><c> these</c>

00:36:46.650 --> 00:36:46.660 align:start position:0%
mentioning that merely finding these
 

00:36:46.660 --> 00:36:48.690 align:start position:0%
mentioning that merely finding these
module<00:36:47.079><c> boundaries</c><00:36:47.680><c> and</c><00:36:47.980><c> relationships</c>

00:36:48.690 --> 00:36:48.700 align:start position:0%
module boundaries and relationships
 

00:36:48.700 --> 00:36:50.940 align:start position:0%
module boundaries and relationships
which<00:36:48.910><c> might</c><00:36:49.119><c> be</c><00:36:49.210><c> obvious</c><00:36:49.390><c> in</c><00:36:49.809><c> hindsight</c><00:36:49.950><c> was</c>

00:36:50.940 --> 00:36:50.950 align:start position:0%
which might be obvious in hindsight was
 

00:36:50.950 --> 00:36:53.130 align:start position:0%
which might be obvious in hindsight was
a<00:36:51.010><c> tremendous</c><00:36:51.609><c> engineering</c><00:36:52.150><c> efforts</c><00:36:52.480><c> you'll</c>

00:36:53.130 --> 00:36:53.140 align:start position:0%
a tremendous engineering efforts you'll
 

00:36:53.140 --> 00:36:55.589 align:start position:0%
a tremendous engineering efforts you'll
find<00:36:53.470><c> in</c><00:36:53.589><c> your</c><00:36:53.619><c> own</c><00:36:53.920><c> code</c><00:36:54.250><c> that</c><00:36:54.490><c> decoupling</c><00:36:55.420><c> a</c>

00:36:55.589 --> 00:36:55.599 align:start position:0%
find in your own code that decoupling a
 

00:36:55.599 --> 00:36:58.650 align:start position:0%
find in your own code that decoupling a
monolith<00:36:56.170><c> is</c><00:36:56.589><c> much</c><00:36:57.369><c> harder</c><00:36:57.700><c> than</c><00:36:57.940><c> building</c><00:36:58.569><c> a</c>

00:36:58.650 --> 00:36:58.660 align:start position:0%
monolith is much harder than building a
 

00:36:58.660 --> 00:37:00.210 align:start position:0%
monolith is much harder than building a
loosely<00:36:58.869><c> coupled</c><00:36:59.349><c> system</c><00:36:59.710><c> from</c><00:37:00.069><c> the</c>

00:37:00.210 --> 00:37:00.220 align:start position:0%
loosely coupled system from the
 

00:37:00.220 --> 00:37:00.720 align:start position:0%
loosely coupled system from the
beginning

00:37:00.720 --> 00:37:00.730 align:start position:0%
beginning
 

00:37:00.730 --> 00:37:03.720 align:start position:0%
beginning
the<00:37:01.660><c> good</c><00:37:01.869><c> news</c><00:37:02.109><c> going</c><00:37:02.349><c> forward</c><00:37:02.890><c> is</c><00:37:03.069><c> that</c><00:37:03.609><c> the</c>

00:37:03.720 --> 00:37:03.730 align:start position:0%
the good news going forward is that the
 

00:37:03.730 --> 00:37:06.390 align:start position:0%
the good news going forward is that the
discipline<00:37:04.240><c> imposed</c><00:37:04.809><c> by</c><00:37:05.140><c> modules</c><00:37:05.619><c> will</c>

00:37:06.390 --> 00:37:06.400 align:start position:0%
discipline imposed by modules will
 

00:37:06.400 --> 00:37:08.970 align:start position:0%
discipline imposed by modules will
prevent<00:37:06.849><c> all</c><00:37:07.059><c> of</c><00:37:07.119><c> us</c><00:37:07.630><c> from</c><00:37:08.289><c> accidentally</c>

00:37:08.970 --> 00:37:08.980 align:start position:0%
prevent all of us from accidentally
 

00:37:08.980 --> 00:37:12.390 align:start position:0%
prevent all of us from accidentally
recreating<00:37:09.549><c> a</c><00:37:10.150><c> monolith</c><00:37:10.839><c> from</c><00:37:11.400><c> backsliding</c>

00:37:12.390 --> 00:37:12.400 align:start position:0%
recreating a monolith from backsliding
 

00:37:12.400 --> 00:37:16.039 align:start position:0%
recreating a monolith from backsliding
into<00:37:12.549><c> the</c><00:37:12.789><c> big</c><00:37:13.240><c> ball</c><00:37:13.450><c> of</c><00:37:13.630><c> mud</c>

00:37:16.039 --> 00:37:16.049 align:start position:0%
 
 

00:37:16.049 --> 00:37:18.259 align:start position:0%
 
I'd<00:37:16.739><c> like</c><00:37:17.009><c> to</c><00:37:17.160><c> quickly</c><00:37:17.489><c> review</c><00:37:18.089><c> the</c>

00:37:18.259 --> 00:37:18.269 align:start position:0%
I'd like to quickly review the
 

00:37:18.269 --> 00:37:22.269 align:start position:0%
I'd like to quickly review the
expectations<00:37:18.719><c> of</c><00:37:19.469><c> compatibility</c><00:37:20.299><c> from</c><00:37:21.299><c> JDK</c><00:37:21.719><c> 9</c>

00:37:22.269 --> 00:37:22.279 align:start position:0%
expectations of compatibility from JDK 9
 

00:37:22.279 --> 00:37:25.880 align:start position:0%
expectations of compatibility from JDK 9
first<00:37:23.279><c> up</c><00:37:23.549><c> there</c><00:37:24.390><c> are</c><00:37:24.539><c> various</c><00:37:25.079><c> technologies</c>

00:37:25.880 --> 00:37:25.890 align:start position:0%
first up there are various technologies
 

00:37:25.890 --> 00:37:29.539 align:start position:0%
first up there are various technologies
from<00:37:26.219><c> Java</c><00:37:26.759><c> EE</c><00:37:26.939><c> that</c><00:37:27.509><c> ship</c><00:37:28.469><c> in</c><00:37:28.619><c> the</c><00:37:28.739><c> JDK</c><00:37:29.279><c> as</c>

00:37:29.539 --> 00:37:29.549 align:start position:0%
from Java EE that ship in the JDK as
 

00:37:29.549 --> 00:37:32.479 align:start position:0%
from Java EE that ship in the JDK as
well<00:37:29.999><c> as</c><00:37:30.150><c> in</c><00:37:30.299><c> app</c><00:37:30.449><c> servers</c><00:37:30.959><c> the</c><00:37:31.859><c> list</c><00:37:32.099><c> of</c><00:37:32.279><c> Java</c>

00:37:32.479 --> 00:37:32.489 align:start position:0%
well as in app servers the list of Java
 

00:37:32.489 --> 00:37:35.870 align:start position:0%
well as in app servers the list of Java
EE<00:37:32.759><c> modules</c><00:37:33.390><c> in</c><00:37:33.660><c> JDK</c><00:37:34.319><c> 9</c><00:37:34.529><c> includes</c><00:37:35.400><c> CORBA</c>

00:37:35.870 --> 00:37:35.880 align:start position:0%
EE modules in JDK 9 includes CORBA
 

00:37:35.880 --> 00:37:40.089 align:start position:0%
EE modules in JDK 9 includes CORBA
Jack's<00:37:36.599><c> B</c><00:37:36.929><c> jax-ws</c><00:37:37.679><c> and</c><00:37:38.429><c> common</c><00:37:39.209><c> annotations</c>

00:37:40.089 --> 00:37:40.099 align:start position:0%
Jack's B jax-ws and common annotations
 

00:37:40.099 --> 00:37:42.769 align:start position:0%
Jack's B jax-ws and common annotations
these<00:37:41.099><c> modules</c><00:37:41.640><c> which</c><00:37:41.819><c> were</c><00:37:41.939><c> not</c><00:37:42.150><c> on</c><00:37:42.359><c> the</c><00:37:42.599><c> I</c>

00:37:42.769 --> 00:37:42.779 align:start position:0%
these modules which were not on the I
 

00:37:42.779 --> 00:37:44.269 align:start position:0%
these modules which were not on the I
didn't<00:37:43.170><c> have</c><00:37:43.289><c> them</c><00:37:43.410><c> on</c><00:37:43.529><c> the</c><00:37:43.650><c> previous</c><00:37:44.039><c> slide</c>

00:37:44.269 --> 00:37:44.279 align:start position:0%
didn't have them on the previous slide
 

00:37:44.279 --> 00:37:46.339 align:start position:0%
didn't have them on the previous slide
to<00:37:44.429><c> keep</c><00:37:44.579><c> it</c><00:37:44.699><c> simpler</c><00:37:44.939><c> but</c><00:37:45.359><c> they</c><00:37:45.449><c> are</c><00:37:45.599><c> in</c><00:37:45.779><c> JDK</c><00:37:46.170><c> 9</c>

00:37:46.339 --> 00:37:46.349 align:start position:0%
to keep it simpler but they are in JDK 9
 

00:37:46.349 --> 00:37:50.689 align:start position:0%
to keep it simpler but they are in JDK 9
are<00:37:47.509><c> deprecated</c><00:37:48.509><c> in</c><00:37:48.689><c> JDK</c><00:37:49.469><c> 9</c><00:37:49.679><c> and</c><00:37:49.949><c> will</c><00:37:50.549><c> be</c>

00:37:50.689 --> 00:37:50.699 align:start position:0%
are deprecated in JDK 9 and will be
 

00:37:50.699 --> 00:37:54.079 align:start position:0%
are deprecated in JDK 9 and will be
removed<00:37:51.150><c> in</c><00:37:51.569><c> a</c><00:37:51.719><c> future</c><00:37:52.079><c> release</c><00:37:52.880><c> because</c><00:37:53.880><c> of</c>

00:37:54.079 --> 00:37:54.089 align:start position:0%
removed in a future release because of
 

00:37:54.089 --> 00:37:57.890 align:start position:0%
removed in a future release because of
that<00:37:54.299><c> they</c><00:37:55.170><c> are</c><00:37:55.199><c> disabled</c><00:37:56.130><c> by</c><00:37:56.400><c> default</c><00:37:56.459><c> in</c><00:37:57.209><c> JDK</c>

00:37:57.890 --> 00:37:57.900 align:start position:0%
that they are disabled by default in JDK
 

00:37:57.900 --> 00:38:00.199 align:start position:0%
that they are disabled by default in JDK
9<00:37:58.140><c> if</c><00:37:58.679><c> you're</c><00:37:59.369><c> running</c><00:37:59.579><c> code</c><00:37:59.939><c> on</c><00:38:00.089><c> the</c>

00:38:00.199 --> 00:38:00.209 align:start position:0%
9 if you're running code on the
 

00:38:00.209 --> 00:38:02.689 align:start position:0%
9 if you're running code on the
classpath<00:38:00.809><c> you</c><00:38:01.410><c> may</c><00:38:01.619><c> need</c><00:38:01.829><c> to</c><00:38:01.979><c> use</c><00:38:02.009><c> the</c><00:38:02.489><c> add</c>

00:38:02.689 --> 00:38:02.699 align:start position:0%
classpath you may need to use the add
 

00:38:02.699 --> 00:38:05.479 align:start position:0%
classpath you may need to use the add
modules<00:38:03.359><c> command</c><00:38:03.869><c> line</c><00:38:04.140><c> flag</c><00:38:04.439><c> to</c><00:38:04.979><c> enable</c>

00:38:05.479 --> 00:38:05.489 align:start position:0%
modules command line flag to enable
 

00:38:05.489 --> 00:38:12.289 align:start position:0%
modules command line flag to enable
these<00:38:06.179><c> Java</c><00:38:06.509><c> EE</c><00:38:06.749><c> modules</c><00:38:10.279><c> seconds</c><00:38:11.279><c> a</c><00:38:11.459><c> lot</c><00:38:12.150><c> of</c>

00:38:12.289 --> 00:38:12.299 align:start position:0%
these Java EE modules seconds a lot of
 

00:38:12.299 --> 00:38:14.779 align:start position:0%
these Java EE modules seconds a lot of
tools<00:38:12.569><c> and</c><00:38:12.989><c> libraries</c><00:38:13.259><c> try</c><00:38:13.979><c> to</c><00:38:14.039><c> access</c><00:38:14.309><c> parts</c>

00:38:14.779 --> 00:38:14.789 align:start position:0%
tools and libraries try to access parts
 

00:38:14.789 --> 00:38:17.239 align:start position:0%
tools and libraries try to access parts
of<00:38:15.119><c> the</c><00:38:15.209><c> JDK</c><00:38:15.420><c> that</c><00:38:16.049><c> are</c><00:38:16.140><c> meant</c><00:38:16.319><c> for</c><00:38:16.439><c> internal</c>

00:38:17.239 --> 00:38:17.249 align:start position:0%
of the JDK that are meant for internal
 

00:38:17.249 --> 00:38:18.819 align:start position:0%
of the JDK that are meant for internal
use<00:38:17.489><c> only</c>

00:38:18.819 --> 00:38:18.829 align:start position:0%
use only
 

00:38:18.829 --> 00:38:21.049 align:start position:0%
use only
unfortunately<00:38:19.829><c> it'll</c><00:38:20.549><c> take</c><00:38:20.699><c> a</c><00:38:20.729><c> while</c><00:38:21.029><c> for</c>

00:38:21.049 --> 00:38:21.059 align:start position:0%
unfortunately it'll take a while for
 

00:38:21.059 --> 00:38:23.779 align:start position:0%
unfortunately it'll take a while for
tool<00:38:21.630><c> and</c><00:38:21.959><c> library</c><00:38:22.380><c> developers</c><00:38:22.859><c> to</c><00:38:23.459><c> move</c><00:38:23.640><c> away</c>

00:38:23.779 --> 00:38:23.789 align:start position:0%
tool and library developers to move away
 

00:38:23.789 --> 00:38:27.019 align:start position:0%
tool and library developers to move away
from<00:38:23.939><c> this</c><00:38:24.239><c> practice</c><00:38:24.499><c> so</c><00:38:25.499><c> JDK</c><00:38:25.890><c> 9</c><00:38:26.069><c> temporarily</c>

00:38:27.019 --> 00:38:27.029 align:start position:0%
from this practice so JDK 9 temporarily
 

00:38:27.029 --> 00:38:31.279 align:start position:0%
from this practice so JDK 9 temporarily
allows<00:38:27.929><c> access</c><00:38:28.499><c> to</c><00:38:29.089><c> JDK</c><00:38:30.089><c> internals</c><00:38:30.660><c> but</c>

00:38:31.279 --> 00:38:31.289 align:start position:0%
allows access to JDK internals but
 

00:38:31.289 --> 00:38:34.819 align:start position:0%
allows access to JDK internals but
prints<00:38:31.650><c> a</c><00:38:31.859><c> warning</c><00:38:32.339><c> when</c><00:38:32.849><c> it</c><00:38:32.969><c> happens</c><00:38:33.829><c> now</c>

00:38:34.819 --> 00:38:34.829 align:start position:0%
prints a warning when it happens now
 

00:38:34.829 --> 00:38:37.009 align:start position:0%
prints a warning when it happens now
there's<00:38:35.069><c> a</c><00:38:35.160><c> command</c><00:38:35.670><c> line</c><00:38:35.910><c> flag</c><00:38:36.299><c> to</c><00:38:36.630><c> avoid</c>

00:38:37.009 --> 00:38:37.019 align:start position:0%
there's a command line flag to avoid
 

00:38:37.019 --> 00:38:39.919 align:start position:0%
there's a command line flag to avoid
these<00:38:37.289><c> warnings</c><00:38:37.859><c> so</c><00:38:38.729><c> please</c><00:38:39.029><c> check</c><00:38:39.390><c> with</c><00:38:39.630><c> tool</c>

00:38:39.919 --> 00:38:39.929 align:start position:0%
these warnings so please check with tool
 

00:38:39.929 --> 00:38:41.870 align:start position:0%
these warnings so please check with tool
and<00:38:40.229><c> library</c><00:38:40.650><c> developers</c><00:38:41.160><c> about</c><00:38:41.400><c> how</c><00:38:41.819><c> to</c>

00:38:41.870 --> 00:38:41.880 align:start position:0%
and library developers about how to
 

00:38:41.880 --> 00:38:45.499 align:start position:0%
and library developers about how to
deploy<00:38:42.359><c> on</c><00:38:42.839><c> JDK</c><00:38:43.380><c> 9</c><00:38:43.589><c> or</c><00:38:44.339><c> just</c><00:38:44.789><c> searched</c><00:38:44.999><c> a</c><00:38:45.209><c> Cova</c>

00:38:45.499 --> 00:38:45.509 align:start position:0%
deploy on JDK 9 or just searched a Cova
 

00:38:45.509 --> 00:38:47.479 align:start position:0%
deploy on JDK 9 or just searched a Cova
flow<00:38:45.689><c> where</c><00:38:46.079><c> people</c><00:38:46.380><c> have</c><00:38:46.559><c> been</c><00:38:46.589><c> asking</c><00:38:47.279><c> for</c><00:38:47.459><c> a</c>

00:38:47.479 --> 00:38:47.489 align:start position:0%
flow where people have been asking for a
 

00:38:47.489 --> 00:38:48.099 align:start position:0%
flow where people have been asking for a
few<00:38:47.670><c> weeks</c><00:38:47.849><c> now</c>

00:38:48.099 --> 00:38:48.109 align:start position:0%
few weeks now
 

00:38:48.109 --> 00:38:50.900 align:start position:0%
few weeks now
why<00:38:49.109><c> isn't</c><00:38:49.349><c> stuff</c><00:38:49.799><c> running</c><00:38:50.219><c> what</c><00:38:50.670><c> is</c><00:38:50.789><c> this</c>

00:38:50.900 --> 00:38:50.910 align:start position:0%
why isn't stuff running what is this
 

00:38:50.910 --> 00:38:53.359 align:start position:0%
why isn't stuff running what is this
exception<00:38:51.599><c> what</c><00:38:51.959><c> is</c><00:38:52.170><c> this</c><00:38:52.289><c> warning</c><00:38:52.709><c> what</c><00:38:53.219><c> do</c><00:38:53.339><c> I</c>

00:38:53.359 --> 00:38:53.369 align:start position:0%
exception what is this warning what do I
 

00:38:53.369 --> 00:38:55.849 align:start position:0%
exception what is this warning what do I
have<00:38:53.579><c> to</c><00:38:53.729><c> do</c><00:38:53.849><c> and</c><00:38:54.029><c> the</c><00:38:54.089><c> answer</c><00:38:54.119><c> is</c><00:38:54.859><c> temporarily</c>

00:38:55.849 --> 00:38:55.859 align:start position:0%
have to do and the answer is temporarily
 

00:38:55.859 --> 00:39:02.779 align:start position:0%
have to do and the answer is temporarily
add<00:38:56.339><c> opens</c><00:39:00.469><c> there</c><00:39:01.469><c> are</c><00:39:01.619><c> also</c><00:39:01.890><c> miscellaneous</c>

00:39:02.779 --> 00:39:02.789 align:start position:0%
add opens there are also miscellaneous
 

00:39:02.789 --> 00:39:05.239 align:start position:0%
add opens there are also miscellaneous
changes<00:39:03.329><c> in</c><00:39:03.479><c> JDK</c><00:39:03.900><c> 9</c><00:39:04.079><c> that</c><00:39:04.349><c> are</c><00:39:04.439><c> unrelated</c><00:39:04.890><c> to</c>

00:39:05.239 --> 00:39:05.249 align:start position:0%
changes in JDK 9 that are unrelated to
 

00:39:05.249 --> 00:39:07.699 align:start position:0%
changes in JDK 9 that are unrelated to
modules<00:39:05.699><c> but</c><00:39:06.449><c> might</c><00:39:06.660><c> affect</c><00:39:06.989><c> code</c><00:39:07.319><c> that</c><00:39:07.559><c> ran</c>

00:39:07.699 --> 00:39:07.709 align:start position:0%
modules but might affect code that ran
 

00:39:07.709 --> 00:39:10.189 align:start position:0%
modules but might affect code that ran
on<00:39:07.739><c> JDK</c><00:39:08.249><c> 8</c><00:39:08.279><c> and</c><00:39:08.699><c> I</c><00:39:08.729><c> want</c><00:39:09.150><c> to</c><00:39:09.239><c> be</c><00:39:09.359><c> upfront</c><00:39:09.900><c> about</c>

00:39:10.189 --> 00:39:10.199 align:start position:0%
on JDK 8 and I want to be upfront about
 

00:39:10.199 --> 00:39:13.069 align:start position:0%
on JDK 8 and I want to be upfront about
them<00:39:10.469><c> notably</c><00:39:11.279><c> code</c><00:39:12.029><c> that</c><00:39:12.269><c> assumes</c><00:39:12.660><c> the</c><00:39:12.839><c> Java</c>

00:39:13.069 --> 00:39:13.079 align:start position:0%
them notably code that assumes the Java
 

00:39:13.079 --> 00:39:15.319 align:start position:0%
them notably code that assumes the Java
version<00:39:13.650><c> string</c><00:39:14.039><c> begins</c><00:39:14.400><c> with</c><00:39:14.609><c> 1</c><00:39:14.819><c> dots</c><00:39:15.089><c> or</c>

00:39:15.319 --> 00:39:15.329 align:start position:0%
version string begins with 1 dots or
 

00:39:15.329 --> 00:39:17.630 align:start position:0%
version string begins with 1 dots or
assumes<00:39:16.170><c> that</c><00:39:16.289><c> the</c><00:39:16.499><c> JDK</c><00:39:16.890><c> lives</c><00:39:17.189><c> in</c><00:39:17.309><c> a</c><00:39:17.400><c> file</c>

00:39:17.630 --> 00:39:17.640 align:start position:0%
assumes that the JDK lives in a file
 

00:39:17.640 --> 00:39:21.120 align:start position:0%
assumes that the JDK lives in a file
called<00:39:17.939><c> RT</c><00:39:18.359><c> jar</c><00:39:18.749><c> will</c><00:39:19.319><c> fail</c><00:39:19.679><c> on</c><00:39:19.979><c> JDK</c><00:39:20.429><c> 9</c>

00:39:21.120 --> 00:39:21.130 align:start position:0%
called RT jar will fail on JDK 9
 

00:39:21.130 --> 00:39:24.480 align:start position:0%
called RT jar will fail on JDK 9
again<00:39:21.970><c> please</c><00:39:22.329><c> check</c><00:39:22.720><c> with</c><00:39:22.990><c> tool</c><00:39:23.650><c> and</c><00:39:23.950><c> library</c>

00:39:24.480 --> 00:39:24.490 align:start position:0%
again please check with tool and library
 

00:39:24.490 --> 00:39:26.700 align:start position:0%
again please check with tool and library
developers<00:39:24.970><c> about</c><00:39:25.210><c> which</c><00:39:25.720><c> versions</c><00:39:26.440><c> are</c>

00:39:26.700 --> 00:39:26.710 align:start position:0%
developers about which versions are
 

00:39:26.710 --> 00:39:30.779 align:start position:0%
developers about which versions are
needed<00:39:27.250><c> to</c><00:39:27.430><c> run</c><00:39:27.730><c> on</c><00:39:28.029><c> JDK</c><00:39:28.839><c> 9</c><00:39:29.049><c> you</c><00:39:29.950><c> can't</c><00:39:30.309><c> assume</c>

00:39:30.779 --> 00:39:30.789 align:start position:0%
needed to run on JDK 9 you can't assume
 

00:39:30.789 --> 00:39:33.120 align:start position:0%
needed to run on JDK 9 you can't assume
that<00:39:30.849><c> older</c><00:39:31.509><c> versions</c><00:39:32.049><c> of</c><00:39:32.230><c> tools</c><00:39:32.740><c> and</c>

00:39:33.120 --> 00:39:33.130 align:start position:0%
that older versions of tools and
 

00:39:33.130 --> 00:39:39.630 align:start position:0%
that older versions of tools and
libraries<00:39:33.420><c> will</c><00:39:34.420><c> run</c><00:39:34.660><c> on</c><00:39:34.809><c> JDK</c><00:39:35.200><c> 9</c><00:39:38.039><c> so</c><00:39:39.039><c> in</c><00:39:39.430><c> the</c>

00:39:39.630 --> 00:39:39.640 align:start position:0%
libraries will run on JDK 9 so in the
 

00:39:39.640 --> 00:39:43.069 align:start position:0%
libraries will run on JDK 9 so in the
modular<00:39:40.000><c> JDK</c><00:39:40.420><c> its</c><00:39:41.049><c> modules</c><00:39:41.349><c> all</c><00:39:41.799><c> the</c><00:39:41.890><c> way</c><00:39:42.009><c> down</c>

00:39:43.069 --> 00:39:43.079 align:start position:0%
modular JDK its modules all the way down
 

00:39:43.079 --> 00:39:47.039 align:start position:0%
modular JDK its modules all the way down
JDK<00:39:44.079><c> internals</c><00:39:44.799><c> are</c><00:39:45.160><c> accessible</c><00:39:46.089><c> temporarily</c>

00:39:47.039 --> 00:39:47.049 align:start position:0%
JDK internals are accessible temporarily
 

00:39:47.049 --> 00:39:50.819 align:start position:0%
JDK internals are accessible temporarily
in<00:39:47.740><c> JDK</c><00:39:48.220><c> 9</c><00:39:48.400><c> and</c><00:39:48.750><c> you</c><00:39:49.750><c> may</c><00:39:49.930><c> need</c><00:39:50.170><c> to</c><00:39:50.529><c> upgrade</c>

00:39:50.819 --> 00:39:50.829 align:start position:0%
in JDK 9 and you may need to upgrade
 

00:39:50.829 --> 00:39:55.039 align:start position:0%
in JDK 9 and you may need to upgrade
tools<00:39:51.670><c> and</c><00:39:52.059><c> libraries</c><00:39:52.329><c> to</c><00:39:52.930><c> their</c><00:39:53.500><c> JDK</c><00:39:54.130><c> 9</c><00:39:54.400><c> aware</c>

00:39:55.039 --> 00:39:55.049 align:start position:0%
tools and libraries to their JDK 9 aware
 

00:39:55.049 --> 00:40:04.589 align:start position:0%
tools and libraries to their JDK 9 aware
versions<00:40:01.109><c> in</c><00:40:02.109><c> sum</c><00:40:02.529><c> a</c><00:40:03.000><c> module</c><00:40:04.000><c> is</c><00:40:04.210><c> a</c><00:40:04.240><c> set</c><00:40:04.509><c> of</c>

00:40:04.589 --> 00:40:04.599 align:start position:0%
versions in sum a module is a set of
 

00:40:04.599 --> 00:40:07.980 align:start position:0%
versions in sum a module is a set of
packages<00:40:05.079><c> designed</c><00:40:05.230><c> for</c><00:40:05.589><c> reuse</c><00:40:06.990><c> automatic</c>

00:40:07.980 --> 00:40:07.990 align:start position:0%
packages designed for reuse automatic
 

00:40:07.990 --> 00:40:10.710 align:start position:0%
packages designed for reuse automatic
modules<00:40:08.410><c> assist</c><00:40:08.980><c> with</c><00:40:09.160><c> migration</c><00:40:09.640><c> to</c><00:40:10.299><c> modules</c>

00:40:10.710 --> 00:40:10.720 align:start position:0%
modules assist with migration to modules
 

00:40:10.720 --> 00:40:13.380 align:start position:0%
modules assist with migration to modules
and<00:40:11.170><c> you</c><00:40:11.890><c> may</c><00:40:12.130><c> need</c><00:40:12.309><c> to</c><00:40:12.519><c> upgrade</c><00:40:12.670><c> tools</c><00:40:13.180><c> and</c>

00:40:13.380 --> 00:40:13.390 align:start position:0%
and you may need to upgrade tools and
 

00:40:13.390 --> 00:40:19.609 align:start position:0%
and you may need to upgrade tools and
libraries<00:40:13.509><c> to</c><00:40:14.200><c> their</c><00:40:14.319><c> JDK</c><00:40:14.769><c> 9</c><00:40:14.980><c> aware</c><00:40:15.940><c> versions</c>

00:40:19.609 --> 00:40:19.619 align:start position:0%
 
 

00:40:19.619 --> 00:40:22.019 align:start position:0%
 
there<00:40:20.619><c> is</c><00:40:20.650><c> a</c><00:40:20.740><c> huge</c><00:40:21.099><c> amount</c><00:40:21.430><c> in</c><00:40:21.579><c> the</c><00:40:21.730><c> module</c>

00:40:22.019 --> 00:40:22.029 align:start position:0%
there is a huge amount in the module
 

00:40:22.029 --> 00:40:23.940 align:start position:0%
there is a huge amount in the module
system<00:40:22.420><c> that</c><00:40:22.720><c> I</c><00:40:22.750><c> haven't</c><00:40:23.019><c> had</c><00:40:23.259><c> time</c><00:40:23.559><c> to</c><00:40:23.799><c> talk</c>

00:40:23.940 --> 00:40:23.950 align:start position:0%
system that I haven't had time to talk
 

00:40:23.950 --> 00:40:27.269 align:start position:0%
system that I haven't had time to talk
about<00:40:24.420><c> you</c><00:40:25.420><c> can</c><00:40:25.599><c> encapsulate</c><00:40:25.920><c> resources</c><00:40:26.920><c> in</c><00:40:27.190><c> a</c>

00:40:27.269 --> 00:40:27.279 align:start position:0%
about you can encapsulate resources in a
 

00:40:27.279 --> 00:40:29.549 align:start position:0%
about you can encapsulate resources in a
module<00:40:27.460><c> not</c><00:40:27.819><c> just</c><00:40:28.000><c> classes</c><00:40:28.420><c> you</c><00:40:29.140><c> can</c><00:40:29.259><c> express</c>

00:40:29.549 --> 00:40:29.559 align:start position:0%
module not just classes you can express
 

00:40:29.559 --> 00:40:31.529 align:start position:0%
module not just classes you can express
optional<00:40:30.250><c> dependencies</c><00:40:30.910><c> by</c><00:40:31.119><c> programming</c>

00:40:31.529 --> 00:40:31.539 align:start position:0%
optional dependencies by programming
 

00:40:31.539 --> 00:40:33.900 align:start position:0%
optional dependencies by programming
with<00:40:31.750><c> services</c><00:40:32.259><c> you</c><00:40:33.009><c> can</c><00:40:33.190><c> build</c><00:40:33.400><c> custom</c>

00:40:33.900 --> 00:40:33.910 align:start position:0%
with services you can build custom
 

00:40:33.910 --> 00:40:35.819 align:start position:0%
with services you can build custom
system<00:40:34.329><c> images</c><00:40:34.720><c> with</c><00:40:34.930><c> the</c><00:40:35.019><c> j-link</c><00:40:35.349><c> tools</c><00:40:35.619><c> so</c>

00:40:35.819 --> 00:40:35.829 align:start position:0%
system images with the j-link tools so
 

00:40:35.829 --> 00:40:37.710 align:start position:0%
system images with the j-link tools so
you<00:40:35.859><c> can</c><00:40:35.980><c> physically</c><00:40:36.549><c> drop</c><00:40:36.880><c> CORBA</c><00:40:37.299><c> right</c><00:40:37.509><c> now</c>

00:40:37.710 --> 00:40:37.720 align:start position:0%
you can physically drop CORBA right now
 

00:40:37.720 --> 00:40:40.410 align:start position:0%
you can physically drop CORBA right now
if<00:40:37.960><c> you</c><00:40:38.079><c> want</c><00:40:38.259><c> to</c><00:40:38.470><c> and</c><00:40:39.029><c> you</c><00:40:40.029><c> can</c><00:40:40.059><c> spin</c><00:40:40.359><c> up</c>

00:40:40.410 --> 00:40:40.420 align:start position:0%
if you want to and you can spin up
 

00:40:40.420 --> 00:40:42.269 align:start position:0%
if you want to and you can spin up
multiple<00:40:40.900><c> versions</c><00:40:41.289><c> of</c><00:40:41.410><c> a</c><00:40:41.500><c> library</c><00:40:41.920><c> with</c><00:40:42.160><c> the</c>

00:40:42.269 --> 00:40:42.279 align:start position:0%
multiple versions of a library with the
 

00:40:42.279 --> 00:40:45.240 align:start position:0%
multiple versions of a library with the
module<00:40:42.579><c> layer</c><00:40:42.819><c> API</c><00:40:43.500><c> if</c><00:40:44.500><c> you're</c><00:40:44.740><c> interested</c><00:40:45.160><c> in</c>

00:40:45.240 --> 00:40:45.250 align:start position:0%
module layer API if you're interested in
 

00:40:45.250 --> 00:40:46.620 align:start position:0%
module layer API if you're interested in
this<00:40:45.339><c> kind</c><00:40:45.400><c> of</c><00:40:45.609><c> thing</c><00:40:45.789><c> I</c><00:40:45.910><c> recommend</c><00:40:46.059><c> two</c><00:40:46.420><c> books</c>

00:40:46.620 --> 00:40:46.630 align:start position:0%
this kind of thing I recommend two books
 

00:40:46.630 --> 00:40:49.769 align:start position:0%
this kind of thing I recommend two books
the<00:40:47.500><c> first</c><00:40:47.529><c> is</c><00:40:48.009><c> Java</c><00:40:48.339><c> 9</c><00:40:48.519><c> modularity</c><00:40:48.940><c> out</c><00:40:49.359><c> this</c>

00:40:49.769 --> 00:40:49.779 align:start position:0%
the first is Java 9 modularity out this
 

00:40:49.779 --> 00:40:52.559 align:start position:0%
the first is Java 9 modularity out this
week<00:40:50.079><c> it's</c><00:40:50.920><c> a</c><00:40:51.130><c> pragmatic</c><00:40:51.640><c> walkthrough</c><00:40:52.329><c> of</c><00:40:52.359><c> the</c>

00:40:52.559 --> 00:40:52.569 align:start position:0%
week it's a pragmatic walkthrough of the
 

00:40:52.569 --> 00:40:55.349 align:start position:0%
week it's a pragmatic walkthrough of the
entire<00:40:53.140><c> module</c><00:40:53.650><c> system</c><00:40:54.009><c> and</c><00:40:54.220><c> the</c><00:40:54.609><c> modular</c><00:40:54.940><c> JDK</c>

00:40:55.349 --> 00:40:55.359 align:start position:0%
entire module system and the modular JDK
 

00:40:55.359 --> 00:40:57.749 align:start position:0%
entire module system and the modular JDK
and<00:40:56.319><c> the</c><00:40:56.410><c> other</c><00:40:56.529><c> is</c><00:40:56.740><c> java</c><00:40:57.039><c> application</c>

00:40:57.749 --> 00:40:57.759 align:start position:0%
and the other is java application
 

00:40:57.759 --> 00:40:59.370 align:start position:0%
and the other is java application
architecture<00:40:58.450><c> from</c><00:40:58.660><c> 2012</c>

00:40:59.370 --> 00:40:59.380 align:start position:0%
architecture from 2012
 

00:40:59.380 --> 00:41:02.220 align:start position:0%
architecture from 2012
it<00:40:59.829><c> is</c><00:41:00.009><c> a</c><00:41:00.039><c> principled</c><00:41:00.880><c> look</c><00:41:01.150><c> at</c><00:41:01.420><c> constructing</c>

00:41:02.220 --> 00:41:02.230 align:start position:0%
it is a principled look at constructing
 

00:41:02.230 --> 00:41:04.170 align:start position:0%
it is a principled look at constructing
modular<00:41:02.650><c> applications</c><00:41:03.279><c> it's</c><00:41:03.490><c> nothing</c><00:41:03.910><c> to</c><00:41:04.059><c> do</c>

00:41:04.170 --> 00:41:04.180 align:start position:0%
modular applications it's nothing to do
 

00:41:04.180 --> 00:41:06.240 align:start position:0%
modular applications it's nothing to do
with<00:41:04.210><c> Jada</c><00:41:04.450><c> q9</c><00:41:04.750><c> logic</c><00:41:05.079><c> saw</c><00:41:05.230><c> and</c><00:41:06.009><c> it</c><00:41:06.130><c> has</c>

00:41:06.240 --> 00:41:06.250 align:start position:0%
with Jada q9 logic saw and it has
 

00:41:06.250 --> 00:41:08.400 align:start position:0%
with Jada q9 logic saw and it has
fantastic<00:41:06.430><c> advice</c><00:41:07.000><c> that</c><00:41:07.569><c> applies</c><00:41:07.839><c> whether</c><00:41:08.170><c> or</c>

00:41:08.400 --> 00:41:08.410 align:start position:0%
fantastic advice that applies whether or
 

00:41:08.410 --> 00:41:10.529 align:start position:0%
fantastic advice that applies whether or
not<00:41:08.529><c> you</c><00:41:08.769><c> use</c><00:41:08.950><c> this</c><00:41:09.130><c> module</c><00:41:09.339><c> system</c><00:41:09.849><c> OSGi</c><00:41:10.420><c> is</c>

00:41:10.529 --> 00:41:10.539 align:start position:0%
not you use this module system OSGi is
 

00:41:10.539 --> 00:41:13.410 align:start position:0%
not you use this module system OSGi is
in<00:41:10.809><c> the</c><00:41:10.930><c> title</c><00:41:11.319><c> it's</c><00:41:11.920><c> it's</c><00:41:12.519><c> it's</c><00:41:12.849><c> general</c>

00:41:13.410 --> 00:41:13.420 align:start position:0%
in the title it's it's it's general
 

00:41:13.420 --> 00:41:15.569 align:start position:0%
in the title it's it's it's general
advice<00:41:13.720><c> about</c><00:41:13.930><c> structuring</c><00:41:14.710><c> large</c><00:41:15.099><c> Java</c>

00:41:15.569 --> 00:41:15.579 align:start position:0%
advice about structuring large Java
 

00:41:15.579 --> 00:41:20.249 align:start position:0%
advice about structuring large Java
programs<00:41:17.460><c> so</c><00:41:18.460><c> JDK</c><00:41:18.789><c> 9</c><00:41:18.970><c> is</c><00:41:19.210><c> here</c><00:41:19.420><c> it's</c><00:41:19.690><c> on</c><00:41:19.869><c> JDK</c>

00:41:20.249 --> 00:41:20.259 align:start position:0%
programs so JDK 9 is here it's on JDK
 

00:41:20.259 --> 00:41:22.440 align:start position:0%
programs so JDK 9 is here it's on JDK
dot<00:41:20.410><c> java.net</c><00:41:20.829><c> today</c><00:41:21.160><c> if</c><00:41:21.369><c> you're</c><00:41:22.059><c> a</c><00:41:22.089><c> library</c>

00:41:22.440 --> 00:41:22.450 align:start position:0%
dot java.net today if you're a library
 

00:41:22.450 --> 00:41:24.779 align:start position:0%
dot java.net today if you're a library
maintainer<00:41:23.170><c> please</c><00:41:23.589><c> run</c><00:41:23.859><c> Jade</c><00:41:24.099><c> EPS</c><00:41:24.309><c> to</c><00:41:24.609><c> see</c>

00:41:24.779 --> 00:41:24.789 align:start position:0%
maintainer please run Jade EPS to see
 

00:41:24.789 --> 00:41:27.089 align:start position:0%
maintainer please run Jade EPS to see
what<00:41:25.029><c> JDK</c><00:41:25.569><c> internals</c><00:41:26.140><c> you</c><00:41:26.289><c> rely</c><00:41:26.619><c> on</c><00:41:26.650><c> you</c><00:41:26.980><c> can</c>

00:41:27.089 --> 00:41:27.099 align:start position:0%
what JDK internals you rely on you can
 

00:41:27.099 --> 00:41:29.099 align:start position:0%
what JDK internals you rely on you can
do<00:41:27.220><c> this</c><00:41:27.369><c> right</c><00:41:27.609><c> now</c><00:41:27.670><c> even</c><00:41:28.119><c> on</c><00:41:28.299><c> on</c><00:41:28.450><c> JDK</c><00:41:28.869><c> 8</c>

00:41:29.099 --> 00:41:29.109 align:start position:0%
do this right now even on on JDK 8
 

00:41:29.109 --> 00:41:31.020 align:start position:0%
do this right now even on on JDK 8
installs

00:41:31.020 --> 00:41:31.030 align:start position:0%
installs
 

00:41:31.030 --> 00:41:33.540 align:start position:0%
installs
everything<00:41:31.990><c> you</c><00:41:32.200><c> ever</c><00:41:32.230><c> wanted</c><00:41:32.860><c> to</c><00:41:32.920><c> know</c><00:41:33.070><c> about</c>

00:41:33.540 --> 00:41:33.550 align:start position:0%
everything you ever wanted to know about
 

00:41:33.550 --> 00:41:36.090 align:start position:0%
everything you ever wanted to know about
the<00:41:33.850><c> module</c><00:41:34.210><c> system</c><00:41:34.390><c> is</c><00:41:34.780><c> discussed</c><00:41:35.320><c> in</c><00:41:35.560><c> JEP</c>

00:41:36.090 --> 00:41:36.100 align:start position:0%
the module system is discussed in JEP
 

00:41:36.100 --> 00:41:39.230 align:start position:0%
the module system is discussed in JEP
which<00:41:36.460><c> is</c><00:41:36.610><c> jdk</c><00:41:37.060><c> enhancement</c><00:41:37.600><c> proposal</c><00:41:38.020><c> 261</c><00:41:38.980><c> I</c>

00:41:39.230 --> 00:41:39.240 align:start position:0%
which is jdk enhancement proposal 261 I
 

00:41:39.240 --> 00:41:41.250 align:start position:0%
which is jdk enhancement proposal 261 I
cannot<00:41:40.240><c> emphasize</c><00:41:40.420><c> enough</c><00:41:40.720><c> how</c><00:41:41.050><c> much</c>

00:41:41.250 --> 00:41:41.260 align:start position:0%
cannot emphasize enough how much
 

00:41:41.260 --> 00:41:44.480 align:start position:0%
cannot emphasize enough how much
valuable<00:41:41.830><c> information</c><00:41:42.280><c> lives</c><00:41:43.180><c> in</c><00:41:43.360><c> Jeff</c><00:41:43.540><c> to</c><00:41:43.750><c> 61</c>

00:41:44.480 --> 00:41:44.490 align:start position:0%
valuable information lives in Jeff to 61
 

00:41:44.490 --> 00:41:47.550 align:start position:0%
valuable information lives in Jeff to 61
there's<00:41:45.490><c> also</c><00:41:45.640><c> JEP</c><00:41:46.000><c> 260</c><00:41:46.600><c> which</c><00:41:46.780><c> identifies</c>

00:41:47.550 --> 00:41:47.560 align:start position:0%
there's also JEP 260 which identifies
 

00:41:47.560 --> 00:41:50.130 align:start position:0%
there's also JEP 260 which identifies
the<00:41:47.590><c> JDK</c><00:41:48.370><c> internal</c><00:41:49.120><c> classes</c><00:41:49.750><c> that</c><00:41:50.020><c> are</c>

00:41:50.130 --> 00:41:50.140 align:start position:0%
the JDK internal classes that are
 

00:41:50.140 --> 00:41:53.970 align:start position:0%
the JDK internal classes that are
temporarily<00:41:50.680><c> exposed</c><00:41:51.370><c> in</c><00:41:51.700><c> jetty</c><00:41:51.880><c> 9</c><00:41:52.290><c> jet</c><00:41:53.290><c> 223</c>

00:41:53.970 --> 00:41:53.980 align:start position:0%
temporarily exposed in jetty 9 jet 223
 

00:41:53.980 --> 00:41:55.680 align:start position:0%
temporarily exposed in jetty 9 jet 223
which<00:41:54.010><c> defines</c><00:41:54.610><c> the</c><00:41:54.760><c> new</c><00:41:54.970><c> version</c><00:41:55.360><c> strings</c>

00:41:55.680 --> 00:41:55.690 align:start position:0%
which defines the new version strings
 

00:41:55.690 --> 00:41:58.020 align:start position:0%
which defines the new version strings
beginning<00:41:56.110><c> with</c><00:41:56.230><c> 9</c><00:41:56.470><c> and</c><00:41:56.800><c> jet</c><00:41:57.340><c> 220</c><00:41:57.850><c> which</c>

00:41:58.020 --> 00:41:58.030 align:start position:0%
beginning with 9 and jet 220 which
 

00:41:58.030 --> 00:42:00.600 align:start position:0%
beginning with 9 and jet 220 which
discusses<00:41:58.420><c> how</c><00:41:59.320><c> our</c><00:41:59.470><c> Tiaras</c><00:41:59.950><c> gone</c><00:42:00.160><c> away</c><00:42:00.370><c> and</c>

00:42:00.600 --> 00:42:00.610 align:start position:0%
discusses how our Tiaras gone away and
 

00:42:00.610 --> 00:42:03.080 align:start position:0%
discusses how our Tiaras gone away and
the<00:42:01.060><c> structure</c><00:42:01.450><c> of</c><00:42:01.480><c> the</c><00:42:01.750><c> modular</c><00:42:02.320><c> jdk</c><00:42:02.710><c> and</c>

00:42:03.080 --> 00:42:03.090 align:start position:0%
the structure of the modular jdk and
 

00:42:03.090 --> 00:42:06.600 align:start position:0%
the structure of the modular jdk and
finally<00:42:04.090><c> jet</c><00:42:04.630><c> 200</c><00:42:05.350><c> gives</c><00:42:05.560><c> an</c><00:42:05.710><c> overview</c><00:42:06.190><c> of</c><00:42:06.430><c> the</c>

00:42:06.600 --> 00:42:06.610 align:start position:0%
finally jet 200 gives an overview of the
 

00:42:06.610 --> 00:42:10.020 align:start position:0%
finally jet 200 gives an overview of the
the<00:42:07.240><c> java</c><00:42:07.510><c> SE</c><00:42:07.990><c> and</c><00:42:08.290><c> the</c><00:42:08.470><c> jdk</c><00:42:08.860><c> modules</c><00:42:09.310><c> but</c><00:42:09.940><c> if</c>

00:42:10.020 --> 00:42:10.030 align:start position:0%
the java SE and the jdk modules but if
 

00:42:10.030 --> 00:42:12.360 align:start position:0%
the java SE and the jdk modules but if
you've<00:42:10.180><c> read</c><00:42:10.480><c> jet</c><00:42:10.750><c> 261</c><00:42:11.560><c> there</c><00:42:12.010><c> won't</c><00:42:12.160><c> be</c><00:42:12.220><c> any</c>

00:42:12.360 --> 00:42:12.370 align:start position:0%
you've read jet 261 there won't be any
 

00:42:12.370 --> 00:42:14.280 align:start position:0%
you've read jet 261 there won't be any
surprises<00:42:12.730><c> because</c><00:42:13.120><c> 260</c><00:42:13.930><c> one's</c><00:42:14.080><c> already</c>

00:42:14.280 --> 00:42:14.290 align:start position:0%
surprises because 260 one's already
 

00:42:14.290 --> 00:42:15.810 align:start position:0%
surprises because 260 one's already
talked<00:42:14.590><c> about</c><00:42:14.800><c> the</c><00:42:15.010><c> modules</c><00:42:15.340><c> and</c><00:42:15.550><c> the</c><00:42:15.610><c> class</c>

00:42:15.810 --> 00:42:15.820 align:start position:0%
talked about the modules and the class
 

00:42:15.820 --> 00:42:17.910 align:start position:0%
talked about the modules and the class
load<00:42:16.060><c> ism</c><00:42:16.420><c> how</c><00:42:17.050><c> you</c><00:42:17.110><c> compile</c><00:42:17.440><c> against</c><00:42:17.830><c> them</c>

00:42:17.910 --> 00:42:17.920 align:start position:0%
load ism how you compile against them
 

00:42:17.920 --> 00:42:21.540 align:start position:0%
load ism how you compile against them
and<00:42:18.040><c> patch</c><00:42:18.190><c> them</c><00:42:18.430><c> etc</c><00:42:19.260><c> and</c><00:42:20.260><c> with</c><00:42:20.620><c> that</c><00:42:20.800><c> thank</c>

00:42:21.540 --> 00:42:21.550 align:start position:0%
and patch them etc and with that thank
 

00:42:21.550 --> 00:42:27.910 align:start position:0%
and patch them etc and with that thank
you<00:42:21.580><c> very</c><00:42:21.700><c> much</c>

00:42:27.910 --> 00:42:27.920 align:start position:0%
 
 

00:42:27.920 --> 00:42:30.609 align:start position:0%
 
we<00:42:28.490><c> have</c><00:42:28.640><c> three</c><00:42:28.940><c> minutes</c><00:42:29.059><c> for</c><00:42:29.390><c> questions</c><00:42:29.869><c> that</c>

00:42:30.609 --> 00:42:30.619 align:start position:0%
we have three minutes for questions that
 

00:42:30.619 --> 00:42:33.519 align:start position:0%
we have three minutes for questions that
was<00:42:30.740><c> a</c><00:42:30.769><c> question</c><00:42:30.950><c> here</c><00:42:31.250><c> to</c><00:42:31.369><c> be</c><00:42:31.460><c> fair</c><00:42:31.640><c> that</c><00:42:32.529><c> my</c>

00:42:33.519 --> 00:42:33.529 align:start position:0%
was a question here to be fair that my
 

00:42:33.529 --> 00:42:36.849 align:start position:0%
was a question here to be fair that my
Alan<00:42:33.859><c> I</c><00:42:34.010><c> don't</c><00:42:34.250><c> make</c><00:42:34.400><c> good</c><00:42:34.609><c> thank</c><00:42:35.329><c> you</c><00:42:35.619><c> in</c><00:42:36.619><c> the</c>

00:42:36.849 --> 00:42:36.859 align:start position:0%
Alan I don't make good thank you in the
 

00:42:36.859 --> 00:42:38.740 align:start position:0%
Alan I don't make good thank you in the
keynote<00:42:37.190><c> it</c><00:42:37.369><c> said</c><00:42:37.609><c> that</c><00:42:37.789><c> we</c><00:42:37.910><c> were</c><00:42:38.450><c> gonna</c><00:42:38.539><c> be</c>

00:42:38.740 --> 00:42:38.750 align:start position:0%
keynote it said that we were gonna be
 

00:42:38.750 --> 00:42:40.509 align:start position:0%
keynote it said that we were gonna be
going<00:42:38.960><c> to</c><00:42:38.990><c> a</c><00:42:39.109><c> six-month</c><00:42:39.529><c> cadence</c><00:42:40.010><c> does</c><00:42:40.369><c> that</c>

00:42:40.509 --> 00:42:40.519 align:start position:0%
going to a six-month cadence does that
 

00:42:40.519 --> 00:42:42.670 align:start position:0%
going to a six-month cadence does that
mean<00:42:40.670><c> that</c><00:42:40.910><c> our</c><00:42:41.299><c> warnings</c><00:42:41.750><c> will</c><00:42:41.960><c> will</c><00:42:42.440><c> become</c>

00:42:42.670 --> 00:42:42.680 align:start position:0%
mean that our warnings will will become
 

00:42:42.680 --> 00:42:46.000 align:start position:0%
mean that our warnings will will become
errors<00:42:43.010><c> in</c><00:42:43.220><c> six</c><00:42:43.490><c> months</c><00:42:43.760><c> or</c><00:42:44.349><c> like</c><00:42:45.349><c> with</c><00:42:45.619><c> incue</c>

00:42:46.000 --> 00:42:46.010 align:start position:0%
errors in six months or like with incue
 

00:42:46.010 --> 00:42:46.420 align:start position:0%
errors in six months or like with incue
bation

00:42:46.420 --> 00:42:46.430 align:start position:0%
bation
 

00:42:46.430 --> 00:42:49.150 align:start position:0%
bation
so<00:42:47.029><c> the</c><00:42:47.150><c> question</c><00:42:47.450><c> is</c><00:42:47.569><c> if</c><00:42:48.440><c> the</c><00:42:48.680><c> JDK</c><00:42:49.010><c> has</c><00:42:49.039><c> been</c>

00:42:49.150 --> 00:42:49.160 align:start position:0%
so the question is if the JDK has been
 

00:42:49.160 --> 00:42:50.410 align:start position:0%
so the question is if the JDK has been
released<00:42:49.490><c> every</c><00:42:49.700><c> six</c><00:42:49.910><c> months</c><00:42:50.180><c> and</c><00:42:50.269><c> we're</c>

00:42:50.410 --> 00:42:50.420 align:start position:0%
released every six months and we're
 

00:42:50.420 --> 00:42:51.970 align:start position:0%
released every six months and we're
printing<00:42:50.690><c> warnings</c><00:42:51.170><c> about</c><00:42:51.289><c> temporarily</c>

00:42:51.970 --> 00:42:51.980 align:start position:0%
printing warnings about temporarily
 

00:42:51.980 --> 00:42:53.470 align:start position:0%
printing warnings about temporarily
allowing<00:42:52.460><c> access</c><00:42:52.549><c> to</c><00:42:52.789><c> something</c><00:42:53.089><c> does</c><00:42:53.329><c> that</c>

00:42:53.470 --> 00:42:53.480 align:start position:0%
allowing access to something does that
 

00:42:53.480 --> 00:42:55.029 align:start position:0%
allowing access to something does that
mean<00:42:53.630><c> that</c><00:42:53.839><c> clock</c><00:42:54.019><c> is</c><00:42:54.200><c> is</c><00:42:54.380><c> counting</c><00:42:54.920><c> on</c><00:42:54.980><c> a</c>

00:42:55.029 --> 00:42:55.039 align:start position:0%
mean that clock is is counting on a
 

00:42:55.039 --> 00:42:56.549 align:start position:0%
mean that clock is is counting on a
six-month<00:42:55.339><c> deadline</c>

00:42:56.549 --> 00:42:56.559 align:start position:0%
six-month deadline
 

00:42:56.559 --> 00:43:01.120 align:start position:0%
six-month deadline
nothing<00:42:57.559><c> is</c><00:42:57.680><c> ever</c><00:42:57.710><c> set</c><00:42:58.130><c> hard-and-fast</c><00:43:00.130><c> we</c>

00:43:01.120 --> 00:43:01.130 align:start position:0%
nothing is ever set hard-and-fast we
 

00:43:01.130 --> 00:43:03.910 align:start position:0%
nothing is ever set hard-and-fast we
don't<00:43:01.309><c> say</c><00:43:01.519><c> it's</c><00:43:01.730><c> than</c><00:43:02.269><c> exactly</c><00:43:03.019><c> the</c><00:43:03.380><c> next</c>

00:43:03.910 --> 00:43:03.920 align:start position:0%
don't say it's than exactly the next
 

00:43:03.920 --> 00:43:08.099 align:start position:0%
don't say it's than exactly the next
release<00:43:04.220><c> the</c><00:43:04.970><c> the</c><00:43:05.769><c> it'll</c><00:43:06.769><c> be</c><00:43:06.890><c> the</c><00:43:07.339><c> the</c><00:43:07.549><c> the</c><00:43:07.579><c> the</c>

00:43:08.099 --> 00:43:08.109 align:start position:0%
release the the it'll be the the the the
 

00:43:08.109 --> 00:43:10.450 align:start position:0%
release the the it'll be the the the the
encapsulation<00:43:09.109><c> would</c><00:43:09.319><c> be</c><00:43:09.410><c> dialed</c><00:43:09.710><c> up</c><00:43:09.829><c> but</c><00:43:10.339><c> in</c>

00:43:10.450 --> 00:43:10.460 align:start position:0%
encapsulation would be dialed up but in
 

00:43:10.460 --> 00:43:13.420 align:start position:0%
encapsulation would be dialed up but in
a<00:43:10.579><c> soon</c><00:43:11.349><c> the</c><00:43:12.349><c> future</c><00:43:12.650><c> will</c><00:43:12.769><c> be</c><00:43:12.890><c> here</c><00:43:13.099><c> sooner</c>

00:43:13.420 --> 00:43:13.430 align:start position:0%
a soon the future will be here sooner
 

00:43:13.430 --> 00:43:14.019 align:start position:0%
a soon the future will be here sooner
than<00:43:13.549><c> we</c><00:43:13.670><c> think</c>

00:43:14.019 --> 00:43:14.029 align:start position:0%
than we think
 

00:43:14.029 --> 00:43:21.519 align:start position:0%
than we think
let<00:43:14.690><c> me</c><00:43:14.779><c> put</c><00:43:14.900><c> it</c><00:43:14.990><c> that</c><00:43:15.049><c> way</c><00:43:20.049><c> this</c><00:43:21.049><c> video</c><00:43:21.349><c> is</c>

00:43:21.519 --> 00:43:21.529 align:start position:0%
let me put it that way this video is
 

00:43:21.529 --> 00:43:24.430 align:start position:0%
let me put it that way this video is
available<00:43:22.750><c> you</c><00:43:23.750><c> actually</c><00:43:23.990><c> don't</c><00:43:24.109><c> the</c><00:43:24.260><c> slides</c>

00:43:24.430 --> 00:43:24.440 align:start position:0%
available you actually don't the slides
 

00:43:24.440 --> 00:43:25.809 align:start position:0%
available you actually don't the slides
because<00:43:24.769><c> you</c><00:43:24.829><c> need</c><00:43:24.950><c> the</c><00:43:25.039><c> notes</c><00:43:25.190><c> as</c><00:43:25.369><c> well</c><00:43:25.490><c> so</c>

00:43:25.809 --> 00:43:25.819 align:start position:0%
because you need the notes as well so
 

00:43:25.819 --> 00:43:30.370 align:start position:0%
because you need the notes as well so
the<00:43:26.000><c> video</c><00:43:26.210><c> is</c><00:43:26.359><c> the</c><00:43:26.450><c> best</c><00:43:26.480><c> thing</c><00:43:27.460><c> yeah</c><00:43:28.750><c> hey</c><00:43:29.750><c> is</c>

00:43:30.370 --> 00:43:30.380 align:start position:0%
the video is the best thing yeah hey is
 

00:43:30.380 --> 00:43:33.490 align:start position:0%
the video is the best thing yeah hey is
there<00:43:30.619><c> any</c><00:43:30.829><c> way</c><00:43:31.039><c> to</c><00:43:31.329><c> depend</c><00:43:32.329><c> on</c><00:43:32.599><c> a</c><00:43:33.049><c> package</c>

00:43:33.490 --> 00:43:33.500 align:start position:0%
there any way to depend on a package
 

00:43:33.500 --> 00:43:37.150 align:start position:0%
there any way to depend on a package
without<00:43:33.950><c> specifying</c><00:43:34.789><c> the</c><00:43:35.390><c> module</c><00:43:35.950><c> is</c><00:43:36.950><c> there</c>

00:43:37.150 --> 00:43:37.160 align:start position:0%
without specifying the module is there
 

00:43:37.160 --> 00:43:38.890 align:start position:0%
without specifying the module is there
any<00:43:37.279><c> way</c><00:43:37.400><c> to</c><00:43:37.430><c> basically</c><00:43:38.029><c> require</c><00:43:38.509><c> a</c><00:43:38.539><c> package</c>

00:43:38.890 --> 00:43:38.900 align:start position:0%
any way to basically require a package
 

00:43:38.900 --> 00:43:41.440 align:start position:0%
any way to basically require a package
yeah<00:43:39.289><c> and</c><00:43:39.529><c> not</c><00:43:39.650><c> a</c><00:43:39.710><c> module</c><00:43:40.160><c> no</c><00:43:40.640><c> the</c><00:43:40.940><c> dependent</c>

00:43:41.440 --> 00:43:41.450 align:start position:0%
yeah and not a module no the dependent
 

00:43:41.450 --> 00:43:43.329 align:start position:0%
yeah and not a module no the dependent
the<00:43:41.660><c> granularity</c><00:43:42.410><c> of</c><00:43:42.440><c> dependencies</c><00:43:43.160><c> is</c>

00:43:43.329 --> 00:43:43.339 align:start position:0%
the granularity of dependencies is
 

00:43:43.339 --> 00:43:46.660 align:start position:0%
the granularity of dependencies is
module<00:43:43.970><c> to</c><00:43:44.299><c> module</c><00:43:44.420><c> so</c><00:43:45.319><c> you</c><00:43:45.380><c> can</c><00:43:46.099><c> have</c><00:43:46.309><c> two</c>

00:43:46.660 --> 00:43:46.670 align:start position:0%
module to module so you can have two
 

00:43:46.670 --> 00:43:49.480 align:start position:0%
module to module so you can have two
modules<00:43:47.089><c> that</c><00:43:47.390><c> provide</c><00:43:48.490><c> alternative</c>

00:43:49.480 --> 00:43:49.490 align:start position:0%
modules that provide alternative
 

00:43:49.490 --> 00:43:51.910 align:start position:0%
modules that provide alternative
implementations<00:43:50.359><c> of</c><00:43:50.539><c> a</c><00:43:50.660><c> package</c><00:43:50.960><c> you</c><00:43:51.440><c> can</c><00:43:51.710><c> do</c>

00:43:51.910 --> 00:43:51.920 align:start position:0%
implementations of a package you can do
 

00:43:51.920 --> 00:43:54.309 align:start position:0%
implementations of a package you can do
that<00:43:52.069><c> with</c><00:43:52.279><c> services</c><00:43:52.819><c> I</c><00:43:53.119><c> meant</c><00:43:53.809><c> to</c><00:43:54.019><c> you</c><00:43:54.140><c> my</c>

00:43:54.309 --> 00:43:54.319 align:start position:0%
that with services I meant to you my
 

00:43:54.319 --> 00:44:00.190 align:start position:0%
that with services I meant to you my
talk<00:43:54.529><c> on</c><00:43:54.710><c> Wednesday</c><00:43:55.339><c> about</c><00:43:55.579><c> services</c>

00:44:00.190 --> 00:44:00.200 align:start position:0%
 
 

00:44:00.200 --> 00:44:07.200 align:start position:0%
 
there's<00:44:00.890><c> a</c><00:44:00.950><c> question</c><00:44:01.190><c> at</c><00:44:01.280><c> the</c><00:44:01.340><c> very</c><00:44:01.490><c> back</c>

00:44:07.200 --> 00:44:07.210 align:start position:0%
 
 

00:44:07.210 --> 00:44:08.830 align:start position:0%
 
hello

00:44:08.830 --> 00:44:08.840 align:start position:0%
hello
 

00:44:08.840 --> 00:44:11.350 align:start position:0%
hello
so<00:44:09.230><c> do</c><00:44:09.530><c> you</c><00:44:09.680><c> know</c><00:44:10.190><c> anything</c><00:44:10.640><c> about</c><00:44:10.850><c> the</c><00:44:11.180><c> future</c>

00:44:11.350 --> 00:44:11.360 align:start position:0%
so do you know anything about the future
 

00:44:11.360 --> 00:44:15.220 align:start position:0%
so do you know anything about the future
of<00:44:11.810><c> OSGi</c><00:44:12.580><c> regarding</c><00:44:13.580><c> the</c><00:44:14.150><c> modular</c><00:44:14.660><c> station</c><00:44:15.110><c> of</c>

00:44:15.220 --> 00:44:15.230 align:start position:0%
of OSGi regarding the modular station of
 

00:44:15.230 --> 00:44:29.500 align:start position:0%
of OSGi regarding the modular station of
the<00:44:15.260><c> JDK</c><00:44:16.360><c> No</c><00:44:17.390><c> next</c><00:44:18.020><c> question</c><00:44:27.760><c> what</c><00:44:28.760><c> about</c><00:44:29.000><c> war</c>

00:44:29.500 --> 00:44:29.510 align:start position:0%
the JDK No next question what about war
 

00:44:29.510 --> 00:44:39.750 align:start position:0%
the JDK No next question what about war
applications<00:44:31.390><c> ask</c><00:44:32.390><c> the</c><00:44:32.990><c> e4j</c><00:44:33.860><c> initiative</c><00:44:34.870><c> okey</c>

00:44:39.750 --> 00:44:39.760 align:start position:0%
 
 

00:44:39.760 --> 00:44:43.690 align:start position:0%
 
mr.<00:44:40.760><c> Robert</c><00:44:40.970><c> Schulte</c><00:44:41.270><c> has</c><00:44:41.390><c> a</c><00:44:41.420><c> question</c><00:44:42.700><c> what</c>

00:44:43.690 --> 00:44:43.700 align:start position:0%
mr. Robert Schulte has a question what
 

00:44:43.700 --> 00:44:49.090 align:start position:0%
mr. Robert Schulte has a question what
could<00:44:43.790><c> it</c><00:44:43.880><c> possibly</c><00:44:43.940><c> be</c><00:44:47.440><c> so</c><00:44:48.440><c> can</c><00:44:48.740><c> you</c><00:44:48.830><c> spend</c>

00:44:49.090 --> 00:44:49.100 align:start position:0%
could it possibly be so can you spend
 

00:44:49.100 --> 00:44:52.500 align:start position:0%
could it possibly be so can you spend
some<00:44:49.280><c> words</c><00:44:49.490><c> about</c><00:44:50.080><c> migrating</c><00:44:51.080><c> libraries</c><00:44:51.740><c> and</c>

00:44:52.500 --> 00:44:52.510 align:start position:0%
some words about migrating libraries and
 

00:44:52.510 --> 00:44:56.710 align:start position:0%
some words about migrating libraries and
about<00:44:53.510><c> the</c><00:44:53.690><c> automated</c><00:44:54.110><c> model</c><00:44:54.440><c> name</c><00:44:55.720><c> the</c>

00:44:56.710 --> 00:44:56.720 align:start position:0%
about the automated model name the
 

00:44:56.720 --> 00:44:58.000 align:start position:0%
about the automated model name the
question<00:44:56.960><c> is</c><00:44:57.080><c> what</c><00:44:57.380><c> about</c><00:44:57.470><c> migrating</c>

00:44:58.000 --> 00:44:58.010 align:start position:0%
question is what about migrating
 

00:44:58.010 --> 00:45:00.670 align:start position:0%
question is what about migrating
libraries<00:44:59.110><c> libraries</c><00:45:00.110><c> are</c><00:45:00.230><c> just</c><00:45:00.440><c> Java</c>

00:45:00.670 --> 00:45:00.680 align:start position:0%
libraries libraries are just Java
 

00:45:00.680 --> 00:45:02.560 align:start position:0%
libraries libraries are just Java
classes<00:45:01.010><c> at</c><00:45:01.310><c> the</c><00:45:01.400><c> end</c><00:45:01.520><c> of</c><00:45:01.670><c> the</c><00:45:01.730><c> day</c><00:45:01.880><c> if</c><00:45:02.210><c> they</c><00:45:02.360><c> so</c>

00:45:02.560 --> 00:45:02.570 align:start position:0%
classes at the end of the day if they so
 

00:45:02.570 --> 00:45:05.710 align:start position:0%
classes at the end of the day if they so
happen<00:45:02.960><c> to</c><00:45:02.990><c> call</c><00:45:03.680><c> set</c><00:45:03.950><c> accessible</c><00:45:04.550><c> okay</c><00:45:05.420><c> quick</c>

00:45:05.710 --> 00:45:05.720 align:start position:0%
happen to call set accessible okay quick
 

00:45:05.720 --> 00:45:08.110 align:start position:0%
happen to call set accessible okay quick
strawpoll<00:45:06.170><c> who</c><00:45:06.470><c> has</c><00:45:06.950><c> used</c><00:45:07.190><c> core</c><00:45:07.520><c> reflection</c>

00:45:08.110 --> 00:45:08.120 align:start position:0%
strawpoll who has used core reflection
 

00:45:08.120 --> 00:45:11.470 align:start position:0%
strawpoll who has used core reflection
in<00:45:08.420><c> their</c><00:45:08.690><c> recent</c><00:45:08.870><c> lives</c><00:45:10.030><c> okay</c><00:45:11.030><c> to</c><00:45:11.090><c> be</c><00:45:11.300><c> fair</c>

00:45:11.470 --> 00:45:11.480 align:start position:0%
in their recent lives okay to be fair
 

00:45:11.480 --> 00:45:13.480 align:start position:0%
in their recent lives okay to be fair
some<00:45:11.750><c> hands</c><00:45:11.990><c> who</c><00:45:12.170><c> who</c><00:45:12.500><c> including</c><00:45:13.310><c> said</c>

00:45:13.480 --> 00:45:13.490 align:start position:0%
some hands who who including said
 

00:45:13.490 --> 00:45:16.750 align:start position:0%
some hands who who including said
accessible<00:45:14.030><c> ah</c><00:45:14.860><c> it's</c><00:45:15.860><c> like</c><00:45:15.950><c> a</c><00:45:16.010><c> set</c><00:45:16.250><c> accessible</c>

00:45:16.750 --> 00:45:16.760 align:start position:0%
accessible ah it's like a set accessible
 

00:45:16.760 --> 00:45:20.950 align:start position:0%
accessible ah it's like a set accessible
support<00:45:17.120><c> group</c><00:45:17.330><c> in</c><00:45:17.480><c> here</c><00:45:17.690><c> okay</c><00:45:18.820><c> so</c><00:45:19.820><c> I</c><00:45:20.090><c> sort</c><00:45:20.900><c> of</c>

00:45:20.950 --> 00:45:20.960 align:start position:0%
support group in here okay so I sort of
 

00:45:20.960 --> 00:45:22.090 align:start position:0%
support group in here okay so I sort of
want<00:45:21.110><c> to</c><00:45:21.200><c> ask</c><00:45:21.380><c> you</c><00:45:21.590><c> what</c><00:45:21.740><c> do</c><00:45:21.800><c> you</c><00:45:21.830><c> call</c><00:45:21.980><c> he's</c>

00:45:22.090 --> 00:45:22.100 align:start position:0%
want to ask you what do you call he's
 

00:45:22.100 --> 00:45:23.560 align:start position:0%
want to ask you what do you call he's
had<00:45:22.190><c> accessible</c><00:45:22.640><c> on</c><00:45:22.730><c> but</c><00:45:22.940><c> we're</c><00:45:23.240><c> out</c><00:45:23.360><c> of</c><00:45:23.390><c> time</c>

00:45:23.560 --> 00:45:23.570 align:start position:0%
had accessible on but we're out of time
 

00:45:23.570 --> 00:45:26.560 align:start position:0%
had accessible on but we're out of time
so<00:45:24.050><c> for</c><00:45:24.260><c> libraries</c><00:45:24.710><c> if</c><00:45:25.520><c> libraries</c><00:45:26.030><c> are</c><00:45:26.210><c> trying</c>

00:45:26.560 --> 00:45:26.570 align:start position:0%
so for libraries if libraries are trying
 

00:45:26.570 --> 00:45:30.100 align:start position:0%
so for libraries if libraries are trying
to<00:45:27.460><c> defy</c><00:45:28.460><c> define</c><00:45:29.270><c> classes</c><00:45:29.780><c> into</c><00:45:30.020><c> the</c>

00:45:30.100 --> 00:45:30.110 align:start position:0%
to defy define classes into the
 

00:45:30.110 --> 00:45:32.230 align:start position:0%
to defy define classes into the
application<00:45:30.650><c> class</c><00:45:30.860><c> loader</c><00:45:31.220><c> they</c><00:45:32.060><c> should</c>

00:45:32.230 --> 00:45:32.240 align:start position:0%
application class loader they should
 

00:45:32.240 --> 00:45:33.520 align:start position:0%
application class loader they should
create<00:45:32.420><c> their</c><00:45:32.570><c> own</c><00:45:32.600><c> class</c><00:45:32.900><c> loader</c><00:45:33.200><c> that's</c><00:45:33.380><c> a</c>

00:45:33.520 --> 00:45:33.530 align:start position:0%
create their own class loader that's a
 

00:45:33.530 --> 00:45:36.520 align:start position:0%
create their own class loader that's a
specific<00:45:33.770><c> piece</c><00:45:34.160><c> of</c><00:45:34.280><c> advice</c><00:45:34.550><c> if</c><00:45:35.360><c> just</c><00:45:36.320><c> to</c><00:45:36.410><c> say</c>

00:45:36.520 --> 00:45:36.530 align:start position:0%
specific piece of advice if just to say
 

00:45:36.530 --> 00:45:38.590 align:start position:0%
specific piece of advice if just to say
son<00:45:36.770><c> Mis</c><00:45:36.920><c> gun</c><00:45:37.070><c> safe</c><00:45:37.310><c> is</c><00:45:37.520><c> still</c><00:45:37.790><c> accessible</c><00:45:38.210><c> in</c>

00:45:38.590 --> 00:45:38.600 align:start position:0%
son Mis gun safe is still accessible in
 

00:45:38.600 --> 00:45:41.560 align:start position:0%
son Mis gun safe is still accessible in
JDK<00:45:38.930><c> 9</c><00:45:39.340><c> if</c><00:45:40.340><c> you</c><00:45:40.670><c> are</c><00:45:40.790><c> using</c><00:45:40.970><c> a</c><00:45:41.120><c> four</c><00:45:41.270><c> off</c><00:45:41.360><c> heat</c>

00:45:41.560 --> 00:45:41.570 align:start position:0%
JDK 9 if you are using a four off heat
 

00:45:41.570 --> 00:45:43.390 align:start position:0%
JDK 9 if you are using a four off heat
memory<00:45:41.840><c> access</c><00:45:42.230><c> you</c><00:45:42.380><c> should</c><00:45:42.560><c> be</c><00:45:42.680><c> using</c><00:45:42.890><c> var</c>

00:45:43.390 --> 00:45:43.400 align:start position:0%
memory access you should be using var
 

00:45:43.400 --> 00:45:45.250 align:start position:0%
memory access you should be using var
handles<00:45:43.880><c> instead</c><00:45:44.120><c> and</c><00:45:44.660><c> then</c><00:45:44.960><c> you</c><00:45:45.050><c> should</c><00:45:45.200><c> be</c>

00:45:45.250 --> 00:45:45.260 align:start position:0%
handles instead and then you should be
 

00:45:45.260 --> 00:45:47.170 align:start position:0%
handles instead and then you should be
using<00:45:45.410><c> multi</c><00:45:45.740><c> release</c><00:45:46.010><c> jars</c><00:45:46.310><c> to</c><00:45:46.700><c> put</c><00:45:46.910><c> the</c><00:45:47.000><c> var</c>

00:45:47.170 --> 00:45:47.180 align:start position:0%
using multi release jars to put the var
 

00:45:47.180 --> 00:45:49.360 align:start position:0%
using multi release jars to put the var
handle<00:45:47.510><c> code</c><00:45:47.720><c> in</c><00:45:47.900><c> a</c><00:45:47.960><c> separate</c><00:45:48.350><c> directory</c><00:45:49.250><c> for</c>

00:45:49.360 --> 00:45:49.370 align:start position:0%
handle code in a separate directory for
 

00:45:49.370 --> 00:45:50.530 align:start position:0%
handle code in a separate directory for
nine<00:45:49.520><c> and</c><00:45:49.550><c> then</c><00:45:49.850><c> what</c><00:45:50.000><c> you</c><00:45:50.090><c> were</c><00:45:50.180><c> doing</c><00:45:50.420><c> on</c>

00:45:50.530 --> 00:45:50.540 align:start position:0%
nine and then what you were doing on
 

00:45:50.540 --> 00:45:52.330 align:start position:0%
nine and then what you were doing on
eight<00:45:50.690><c> and</c><00:45:50.720><c> there's</c><00:45:51.080><c> a</c><00:45:51.140><c> whole</c><00:45:51.380><c> there</c><00:45:52.130><c> could</c><00:45:52.280><c> be</c>

00:45:52.330 --> 00:45:52.340 align:start position:0%
eight and there's a whole there could be
 

00:45:52.340 --> 00:45:53.920 align:start position:0%
eight and there's a whole there could be
entire<00:45:52.580><c> presentations</c><00:45:53.240><c> about</c><00:45:53.360><c> that</c><00:45:53.630><c> is</c><00:45:53.780><c> there</c>

00:45:53.920 --> 00:45:53.930 align:start position:0%
entire presentations about that is there
 

00:45:53.930 --> 00:45:56.410 align:start position:0%
entire presentations about that is there
a<00:45:53.960><c> specific</c><00:45:54.640><c> because</c><00:45:55.640><c> no</c><00:45:56.030><c> one</c><00:45:56.180><c> here</c><00:45:56.300><c> is</c><00:45:56.390><c> a</c>

00:45:56.410 --> 00:45:56.420 align:start position:0%
a specific because no one here is a
 

00:45:56.420 --> 00:46:00.640 align:start position:0%
a specific because no one here is a
library<00:45:56.720><c> maintainer</c><00:45:57.080><c> right</c><00:45:58.180><c> one</c><00:45:59.180><c> hand</c><00:45:59.650><c> two</c>

00:46:00.640 --> 00:46:00.650 align:start position:0%
library maintainer right one hand two
 

00:46:00.650 --> 00:46:03.760 align:start position:0%
library maintainer right one hand two
hands<00:46:00.860><c> okay</c><00:46:01.520><c> well</c><00:46:02.180><c> it's</c><00:46:02.360><c> all</c><00:46:02.510><c> about</c>

00:46:03.760 --> 00:46:03.770 align:start position:0%
hands okay well it's all about
 

00:46:03.770 --> 00:46:06.460 align:start position:0%
hands okay well it's all about
keeping<00:46:04.760><c> the</c><00:46:04.910><c> amazing</c><00:46:05.420><c> ecosystem</c><00:46:05.600><c> McLean's</c>

00:46:06.460 --> 00:46:06.470 align:start position:0%
keeping the amazing ecosystem McLean's
 

00:46:06.470 --> 00:46:10.330 align:start position:0%
keeping the amazing ecosystem McLean's
so<00:46:06.800><c> if</c><00:46:07.040><c> you</c><00:46:07.160><c> are</c><00:46:07.340><c> a</c><00:46:07.370><c> library</c><00:46:08.150><c> builder</c><00:46:08.920><c> and</c><00:46:09.920><c> you</c>

00:46:10.330 --> 00:46:10.340 align:start position:0%
so if you are a library builder and you
 

00:46:10.340 --> 00:46:13.990 align:start position:0%
so if you are a library builder and you
want<00:46:10.490><c> to</c><00:46:10.580><c> refer</c><00:46:10.880><c> to</c><00:46:11.800><c> Josh</c><00:46:12.800><c> which</c><00:46:13.070><c> are</c><00:46:13.310><c> not</c><00:46:13.760><c> yet</c>

00:46:13.990 --> 00:46:14.000 align:start position:0%
want to refer to Josh which are not yet
 

00:46:14.000 --> 00:46:17.140 align:start position:0%
want to refer to Josh which are not yet
modules<00:46:14.920><c> please</c><00:46:15.920><c> only</c><00:46:16.160><c> refer</c><00:46:16.610><c> to</c><00:46:16.760><c> them</c><00:46:16.940><c> if</c>

00:46:17.140 --> 00:46:17.150 align:start position:0%
modules please only refer to them if
 

00:46:17.150 --> 00:46:20.110 align:start position:0%
modules please only refer to them if
they<00:46:17.630><c> have</c><00:46:17.900><c> a</c><00:46:18.110><c> module</c><00:46:18.980><c> name</c><00:46:19.070><c> with</c><00:46:19.850><c> the</c>

00:46:20.110 --> 00:46:20.120 align:start position:0%
they have a module name with the
 

00:46:20.120 --> 00:46:22.990 align:start position:0%
they have a module name with the
manifest<00:46:20.660><c> file</c><00:46:20.870><c> and</c><00:46:21.200><c> not</c><00:46:21.890><c> based</c><00:46:22.370><c> on</c><00:46:22.550><c> their</c><00:46:22.820><c> of</c>

00:46:22.990 --> 00:46:23.000 align:start position:0%
manifest file and not based on their of
 

00:46:23.000 --> 00:46:25.720 align:start position:0%
manifest file and not based on their of
jar<00:46:23.660><c> file</c><00:46:23.900><c> name</c><00:46:24.140><c> that</c><00:46:24.380><c> is</c><00:46:25.100><c> an</c><00:46:25.220><c> excellent</c><00:46:25.520><c> point</c>

00:46:25.720 --> 00:46:25.730 align:start position:0%
jar file name that is an excellent point
 

00:46:25.730 --> 00:46:27.280 align:start position:0%
jar file name that is an excellent point
that<00:46:25.910><c> you</c><00:46:26.000><c> gave</c><00:46:26.210><c> me</c><00:46:26.360><c> every</c><00:46:26.720><c> opportunity</c><00:46:26.750><c> to</c>

00:46:27.280 --> 00:46:27.290 align:start position:0%
that you gave me every opportunity to
 

00:46:27.290 --> 00:46:29.710 align:start position:0%
that you gave me every opportunity to
make<00:46:27.560><c> and</c><00:46:27.740><c> I</c><00:46:27.800><c> failed</c><00:46:28.100><c> to</c><00:46:28.430><c> do</c><00:46:28.580><c> so</c><00:46:28.610><c> the</c><00:46:29.330><c> point</c><00:46:29.570><c> is</c>

00:46:29.710 --> 00:46:29.720 align:start position:0%
make and I failed to do so the point is
 

00:46:29.720 --> 00:46:31.570 align:start position:0%
make and I failed to do so the point is
that<00:46:29.780><c> libraries</c><00:46:30.470><c> library</c><00:46:31.010><c> maintain</c><00:46:31.400><c> errs</c>

00:46:31.570 --> 00:46:31.580 align:start position:0%
that libraries library maintain errs
 

00:46:31.580 --> 00:46:33.910 align:start position:0%
that libraries library maintain errs
even<00:46:31.940><c> if</c><00:46:32.030><c> they</c><00:46:32.210><c> don't</c><00:46:32.690><c> declare</c><00:46:33.470><c> a</c><00:46:33.530><c> module</c>

00:46:33.910 --> 00:46:33.920 align:start position:0%
even if they don't declare a module
 

00:46:33.920 --> 00:46:36.520 align:start position:0%
even if they don't declare a module
explicitly<00:46:34.490><c> should</c><00:46:35.000><c> go</c><00:46:35.200><c> should</c><00:46:36.200><c> should</c>

00:46:36.520 --> 00:46:36.530 align:start position:0%
explicitly should go should should
 

00:46:36.530 --> 00:46:39.730 align:start position:0%
explicitly should go should should
indeed<00:46:37.040><c> put</c><00:46:37.190><c> it</c><00:46:37.310><c> in</c><00:46:37.370><c> their</c><00:46:37.490><c> palm</c><00:46:37.700><c> and</c><00:46:38.740><c> specify</c>

00:46:39.730 --> 00:46:39.740 align:start position:0%
indeed put it in their palm and specify
 

00:46:39.740 --> 00:46:42.850 align:start position:0%
indeed put it in their palm and specify
the<00:46:39.770><c> automatic</c><00:46:40.640><c> module</c><00:46:41.120><c> name</c><00:46:41.360><c> manifest</c><00:46:42.200><c> entry</c>

00:46:42.850 --> 00:46:42.860 align:start position:0%
the automatic module name manifest entry
 

00:46:42.860 --> 00:46:46.960 align:start position:0%
the automatic module name manifest entry
that<00:46:43.700><c> is</c><00:46:43.760><c> a</c><00:46:43.880><c> way</c><00:46:44.120><c> to</c><00:46:44.180><c> commit</c><00:46:44.990><c> to</c><00:46:45.560><c> a</c><00:46:45.590><c> name</c><00:46:45.950><c> for</c><00:46:46.910><c> a</c>

00:46:46.960 --> 00:46:46.970 align:start position:0%
that is a way to commit to a name for a
 

00:46:46.970 --> 00:46:49.090 align:start position:0%
that is a way to commit to a name for a
modular<00:46:47.540><c> jar</c><00:46:47.780><c> without</c><00:46:48.290><c> actually</c><00:46:48.920><c> putting</c>

00:46:49.090 --> 00:46:49.100 align:start position:0%
modular jar without actually putting
 

00:46:49.100 --> 00:46:53.310 align:start position:0%
modular jar without actually putting
module<00:46:49.580><c> info</c><00:46:49.940><c> class</c><00:46:50.750><c> in</c><00:46:51.140><c> the</c><00:46:51.380><c> modular</c><00:46:51.830><c> jar</c><00:46:52.520><c> and</c>

00:46:53.310 --> 00:46:53.320 align:start position:0%
module info class in the modular jar and
 

00:46:53.320 --> 00:46:55.750 align:start position:0%
module info class in the modular jar and
committing<00:46:54.320><c> to</c><00:46:54.350><c> a</c><00:46:54.500><c> stable</c><00:46:54.920><c> name</c><00:46:55.250><c> for</c><00:46:55.520><c> a</c><00:46:55.550><c> module</c>

00:46:55.750 --> 00:46:55.760 align:start position:0%
committing to a stable name for a module
 

00:46:55.760 --> 00:47:00.300 align:start position:0%
committing to a stable name for a module
is<00:46:56.180><c> a</c><00:46:56.210><c> huge</c><00:46:56.870><c> deal</c><00:46:57.730><c> and</c><00:46:58.730><c> we</c><00:46:58.880><c> encourage</c><00:46:59.300><c> library</c>

00:47:00.300 --> 00:47:00.310 align:start position:0%
is a huge deal and we encourage library
 

00:47:00.310 --> 00:47:03.250 align:start position:0%
is a huge deal and we encourage library
maintainer<00:47:01.310><c> x'</c><00:47:01.490><c> to</c><00:47:01.790><c> do</c><00:47:02.000><c> that</c><00:47:02.180><c> even</c><00:47:03.050><c> if</c><00:47:03.140><c> they</c>

00:47:03.250 --> 00:47:03.260 align:start position:0%
maintainer x' to do that even if they
 

00:47:03.260 --> 00:47:04.870 align:start position:0%
maintainer x' to do that even if they
haven't<00:47:03.620><c> looked</c><00:47:03.890><c> in</c><00:47:04.100><c> any</c><00:47:04.220><c> way</c><00:47:04.430><c> at</c><00:47:04.700><c> the</c>

00:47:04.870 --> 00:47:04.880 align:start position:0%
haven't looked in any way at the
 

00:47:04.880 --> 00:47:07.420 align:start position:0%
haven't looked in any way at the
encapsulation<00:47:05.330><c> story</c><00:47:05.750><c> or</c><00:47:06.200><c> the</c><00:47:06.440><c> nato</c><00:47:06.650><c> or</c><00:47:06.800><c> what</c>

00:47:07.420 --> 00:47:07.430 align:start position:0%
encapsulation story or the nato or what
 

00:47:07.430 --> 00:47:08.620 align:start position:0%
encapsulation story or the nato or what
they're<00:47:07.550><c> gonna</c><00:47:07.640><c> export</c><00:47:08.150><c> or</c><00:47:08.420><c> what</c><00:47:08.510><c> they're</c>

00:47:08.620 --> 00:47:08.630 align:start position:0%
they're gonna export or what they're
 

00:47:08.630 --> 00:47:12.070 align:start position:0%
they're gonna export or what they're
gonna<00:47:08.750><c> require</c><00:47:10.450><c> may</c><00:47:11.450><c> be</c><00:47:11.510><c> one</c><00:47:11.720><c> very</c><00:47:11.870><c> quick</c>

00:47:12.070 --> 00:47:12.080 align:start position:0%
gonna require may be one very quick
 

00:47:12.080 --> 00:47:17.230 align:start position:0%
gonna require may be one very quick
question<00:47:12.550><c> was</c><00:47:13.550><c> there</c><00:47:13.670><c> one</c><00:47:13.790><c> there</c><00:47:15.100><c> no</c><00:47:16.100><c> one</c><00:47:17.030><c> very</c>

00:47:17.230 --> 00:47:17.240 align:start position:0%
question was there one there no one very
 

00:47:17.240 --> 00:47:20.620 align:start position:0%
question was there one there no one very
quick<00:47:17.390><c> question</c><00:47:17.660><c> from</c><00:47:17.750><c> the</c><00:47:17.870><c> back</c>

00:47:20.620 --> 00:47:20.630 align:start position:0%
 
 

00:47:20.630 --> 00:47:25.420 align:start position:0%
 
I<00:47:22.120><c> wheeze</c><00:47:23.120><c> the</c><00:47:23.630><c> Java</c><00:47:24.050><c> cryptology</c><00:47:24.800><c> extension</c>

00:47:25.420 --> 00:47:25.430 align:start position:0%
I wheeze the Java cryptology extension
 

00:47:25.430 --> 00:47:28.120 align:start position:0%
I wheeze the Java cryptology extension
for<00:47:25.760><c> like</c><00:47:25.940><c> bouncy</c><00:47:26.510><c> castle</c><00:47:27.020><c> and</c><00:47:27.320><c> we</c><00:47:27.440><c> have</c><00:47:27.980><c> to</c>

00:47:28.120 --> 00:47:28.130 align:start position:0%
for like bouncy castle and we have to
 

00:47:28.130 --> 00:47:33.700 align:start position:0%
for like bouncy castle and we have to
sign<00:47:28.370><c> that</c><00:47:29.170><c> with</c><00:47:30.170><c> a</c><00:47:31.660><c> digital</c><00:47:32.710><c> certificate</c>

00:47:33.700 --> 00:47:33.710 align:start position:0%
sign that with a digital certificate
 

00:47:33.710 --> 00:47:36.120 align:start position:0%
sign that with a digital certificate
from<00:47:33.890><c> Oracle</c><00:47:34.520><c> to</c><00:47:34.850><c> be</c><00:47:34.910><c> able</c><00:47:35.120><c> to</c><00:47:35.300><c> deploy</c><00:47:35.750><c> that</c>

00:47:36.120 --> 00:47:36.130 align:start position:0%
from Oracle to be able to deploy that
 

00:47:36.130 --> 00:47:39.160 align:start position:0%
from Oracle to be able to deploy that
what<00:47:37.130><c> changes</c><00:47:37.730><c> will</c><00:47:37.970><c> will</c><00:47:38.390><c> have</c><00:47:38.600><c> to</c><00:47:38.660><c> be</c><00:47:38.930><c> made</c>

00:47:39.160 --> 00:47:39.170 align:start position:0%
what changes will will have to be made
 

00:47:39.170 --> 00:47:42.340 align:start position:0%
what changes will will have to be made
to<00:47:39.950><c> do</c><00:47:40.100><c> that</c><00:47:40.310><c> if</c><00:47:40.520><c> any</c><00:47:40.780><c> so</c><00:47:41.780><c> this</c><00:47:41.900><c> is</c><00:47:42.050><c> really</c><00:47:42.230><c> a</c>

00:47:42.340 --> 00:47:42.350 align:start position:0%
to do that if any so this is really a
 

00:47:42.350 --> 00:47:45.220 align:start position:0%
to do that if any so this is really a
question<00:47:42.500><c> about</c><00:47:42.680><c> signed</c><00:47:43.130><c> modular</c><00:47:43.790><c> jars</c><00:47:44.030><c> yeah</c>

00:47:45.220 --> 00:47:45.230 align:start position:0%
question about signed modular jars yeah
 

00:47:45.230 --> 00:47:47.260 align:start position:0%
question about signed modular jars yeah
Allen<00:47:46.190><c> can</c><00:47:46.400><c> best</c><00:47:46.550><c> answer</c><00:47:46.910><c> that</c><00:47:46.940><c> on</c><00:47:47.180><c> the</c>

00:47:47.260 --> 00:47:47.270 align:start position:0%
Allen can best answer that on the
 

00:47:47.270 --> 00:47:50.650 align:start position:0%
Allen can best answer that on the
microphone<00:47:48.970><c> your</c><00:47:49.970><c> answer</c><00:47:50.240><c> castle</c><00:47:50.570><c> should</c>

00:47:50.650 --> 00:47:50.660 align:start position:0%
microphone your answer castle should
 

00:47:50.660 --> 00:47:53.440 align:start position:0%
microphone your answer castle should
workers<00:47:50.990><c> before</c><00:47:51.140><c> the</c><00:47:52.090><c> the</c><00:47:53.090><c> security</c>

00:47:53.440 --> 00:47:53.450 align:start position:0%
workers before the the security
 

00:47:53.450 --> 00:47:55.110 align:start position:0%
workers before the the security
configuration<00:47:53.600><c> file</c><00:47:54.200><c> is</c><00:47:54.230><c> slightly</c><00:47:54.590><c> changed</c>

00:47:55.110 --> 00:47:55.120 align:start position:0%
configuration file is slightly changed
 

00:47:55.120 --> 00:47:57.250 align:start position:0%
configuration file is slightly changed
in<00:47:56.120><c> that</c><00:47:56.300><c> you</c><00:47:56.450><c> actually</c><00:47:56.480><c> give</c><00:47:56.840><c> the</c><00:47:57.050><c> security</c>

00:47:57.250 --> 00:47:57.260 align:start position:0%
in that you actually give the security
 

00:47:57.260 --> 00:47:59.590 align:start position:0%
in that you actually give the security
provider<00:47:57.890><c> name</c><00:47:58.490><c> broader</c><00:47:59.180><c> than</c><00:47:59.300><c> the</c><00:47:59.420><c> class</c>

00:47:59.590 --> 00:47:59.600 align:start position:0%
provider name broader than the class
 

00:47:59.600 --> 00:48:00.640 align:start position:0%
provider name broader than the class
file<00:47:59.870><c> but</c><00:48:00.140><c> there's</c><00:48:00.290><c> a</c><00:48:00.380><c> backward</c>

00:48:00.640 --> 00:48:00.650 align:start position:0%
file but there's a backward
 

00:48:00.650 --> 00:48:02.340 align:start position:0%
file but there's a backward
compatibility<00:48:01.100><c> that</c><00:48:01.430><c> just</c><00:48:01.610><c> keeps</c><00:48:01.760><c> existing</c>

00:48:02.340 --> 00:48:02.350 align:start position:0%
compatibility that just keeps existing
 

00:48:02.350 --> 00:48:05.140 align:start position:0%
compatibility that just keeps existing
providers<00:48:03.350><c> actually</c><00:48:03.710><c> working</c><00:48:03.920><c> I</c><00:48:04.310><c> can't</c><00:48:04.970><c> give</c>

00:48:05.140 --> 00:48:05.150 align:start position:0%
providers actually working I can't give
 

00:48:05.150 --> 00:48:09.850 align:start position:0%
providers actually working I can't give
you<00:48:05.240><c> the</c><00:48:05.390><c> full</c><00:48:05.540><c> answer</c><00:48:05.690><c> on</c><00:48:05.960><c> the</c><00:48:06.080><c> signed</c><00:48:08.860><c> crypto</c>

00:48:09.850 --> 00:48:09.860 align:start position:0%
you the full answer on the signed crypto
 

00:48:09.860 --> 00:48:11.740 align:start position:0%
you the full answer on the signed crypto
provider<00:48:10.220><c> as</c><00:48:10.430><c> packaged</c><00:48:10.820><c> as</c><00:48:10.910><c> a</c><00:48:10.940><c> module</c><00:48:11.450><c> because</c>

00:48:11.740 --> 00:48:11.750 align:start position:0%
provider as packaged as a module because
 

00:48:11.750 --> 00:48:13.270 align:start position:0%
provider as packaged as a module because
there's<00:48:11.930><c> there's</c><00:48:12.500><c> a</c><00:48:12.560><c> couple</c><00:48:12.710><c> of</c><00:48:12.830><c> issues</c><00:48:12.920><c> there</c>

00:48:13.270 --> 00:48:13.280 align:start position:0%
there's there's a couple of issues there
 

00:48:13.280 --> 00:48:14.860 align:start position:0%
there's there's a couple of issues there
that<00:48:13.310><c> is</c><00:48:13.610><c> just</c><00:48:13.820><c> way</c><00:48:14.060><c> beyond</c><00:48:14.360><c> the</c><00:48:14.540><c> scope</c><00:48:14.720><c> of</c>

00:48:14.860 --> 00:48:14.870 align:start position:0%
that is just way beyond the scope of
 

00:48:14.870 --> 00:48:17.670 align:start position:0%
that is just way beyond the scope of
module<00:48:15.590><c> time</c><00:48:15.830><c> but</c><00:48:16.790><c> there's</c><00:48:16.940><c> a</c><00:48:17.030><c> security</c><00:48:17.450><c> bar</c>

00:48:17.670 --> 00:48:17.680 align:start position:0%
module time but there's a security bar
 

00:48:17.680 --> 00:48:19.900 align:start position:0%
module time but there's a security bar
tomorrow<00:48:18.680><c> night</c><00:48:18.980><c> that</c><00:48:19.190><c> actually</c><00:48:19.490><c> Sean</c><00:48:19.670><c> Mullan</c>

00:48:19.900 --> 00:48:19.910 align:start position:0%
tomorrow night that actually Sean Mullan
 

00:48:19.910 --> 00:48:23.500 align:start position:0%
tomorrow night that actually Sean Mullan
is<00:48:20.120><c> is</c><00:48:20.330><c> is</c><00:48:21.200><c> legal</c><00:48:21.620><c> that</c><00:48:21.700><c> will</c><00:48:22.700><c> be</c><00:48:22.850><c> an</c><00:48:23.120><c> excellent</c>

00:48:23.500 --> 00:48:23.510 align:start position:0%
is is is legal that will be an excellent
 

00:48:23.510 --> 00:48:26.470 align:start position:0%
is is is legal that will be an excellent
place<00:48:23.750><c> to</c><00:48:24.020><c> bring</c><00:48:24.140><c> yourself</c><00:48:24.470><c> right</c><00:48:25.420><c> thank</c><00:48:26.420><c> you</c>

00:48:26.470 --> 00:48:26.480 align:start position:0%
place to bring yourself right thank you
 

00:48:26.480 --> 00:48:28.600 align:start position:0%
place to bring yourself right thank you
again

