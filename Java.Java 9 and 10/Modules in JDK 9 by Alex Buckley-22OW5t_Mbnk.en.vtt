WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:05.410 align:start position:0%
 
hi<00:00:00.269><c> everyone</c><00:00:00.570><c> welcome</c><00:00:01.290><c> to</c><00:00:01.319><c> modules</c><00:00:01.920><c> in</c><00:00:02.190><c> JDK</c><00:00:02.760><c> 9</c>

00:00:05.410 --> 00:00:05.420 align:start position:0%
 
 

00:00:05.420 --> 00:00:08.629 align:start position:0%
 
my<00:00:06.420><c> name</c><00:00:06.600><c> is</c><00:00:06.899><c> Alex</c><00:00:07.290><c> Buckley</c><00:00:07.649><c> and</c><00:00:07.830><c> I</c><00:00:08.309><c> write</c><00:00:08.490><c> the</c>

00:00:08.629 --> 00:00:08.639 align:start position:0%
my name is Alex Buckley and I write the
 

00:00:08.639 --> 00:00:10.879 align:start position:0%
my name is Alex Buckley and I write the
specification<00:00:08.849><c> of</c><00:00:09.599><c> the</c><00:00:09.900><c> Java</c><00:00:10.139><c> language</c><00:00:10.349><c> and</c>

00:00:10.879 --> 00:00:10.889 align:start position:0%
specification of the Java language and
 

00:00:10.889 --> 00:00:13.430 align:start position:0%
specification of the Java language and
the<00:00:10.950><c> java</c><00:00:11.190><c> virtual</c><00:00:11.429><c> machine</c><00:00:11.990><c> i've</c><00:00:12.990><c> worked</c><00:00:13.290><c> on</c>

00:00:13.430 --> 00:00:13.440 align:start position:0%
the java virtual machine i've worked on
 

00:00:13.440 --> 00:00:16.400 align:start position:0%
the java virtual machine i've worked on
the<00:00:13.559><c> java</c><00:00:13.769><c> platform</c><00:00:13.950><c> since</c><00:00:14.639><c> 2006</c><00:00:15.540><c> so</c><00:00:15.900><c> i've</c>

00:00:16.400 --> 00:00:16.410 align:start position:0%
the java platform since 2006 so i've
 

00:00:16.410 --> 00:00:19.429 align:start position:0%
the java platform since 2006 so i've
seen<00:00:16.590><c> the</c><00:00:16.770><c> full</c><00:00:17.010><c> life</c><00:00:17.220><c> cycles</c><00:00:17.730><c> of</c><00:00:17.940><c> JDK</c><00:00:18.359><c> 7</c><00:00:18.779><c> 8</c><00:00:18.990><c> &amp;</c><00:00:19.410><c> 9</c>

00:00:19.429 --> 00:00:19.439 align:start position:0%
seen the full life cycles of JDK 7 8 &amp; 9
 

00:00:19.439 --> 00:00:22.460 align:start position:0%
seen the full life cycles of JDK 7 8 &amp; 9
I<00:00:20.070><c> worked</c><00:00:20.910><c> on</c><00:00:21.060><c> project</c><00:00:21.510><c> coin</c><00:00:21.720><c> and</c><00:00:22.050><c> invoke</c>

00:00:22.460 --> 00:00:22.470 align:start position:0%
I worked on project coin and invoke
 

00:00:22.470 --> 00:00:25.429 align:start position:0%
I worked on project coin and invoke
dynamic<00:00:22.920><c> in</c><00:00:23.070><c> JDK</c><00:00:23.400><c> 7</c><00:00:23.730><c> on</c><00:00:23.930><c> lambdas</c><00:00:24.930><c> and</c><00:00:25.199><c> type</c>

00:00:25.429 --> 00:00:25.439 align:start position:0%
dynamic in JDK 7 on lambdas and type
 

00:00:25.439 --> 00:00:28.040 align:start position:0%
dynamic in JDK 7 on lambdas and type
annotations<00:00:26.010><c> in</c><00:00:26.220><c> JDK</c><00:00:26.550><c> 8</c><00:00:26.580><c> and</c><00:00:27.000><c> on</c><00:00:27.570><c> the</c><00:00:27.689><c> modules</c>

00:00:28.040 --> 00:00:28.050 align:start position:0%
annotations in JDK 8 and on the modules
 

00:00:28.050 --> 00:00:29.960 align:start position:0%
annotations in JDK 8 and on the modules
in<00:00:28.260><c> JDK</c><00:00:28.590><c> 9</c><00:00:28.800><c> that</c><00:00:29.130><c> we'll</c><00:00:29.250><c> be</c><00:00:29.429><c> talking</c><00:00:29.670><c> about</c>

00:00:29.960 --> 00:00:29.970 align:start position:0%
in JDK 9 that we'll be talking about
 

00:00:29.970 --> 00:00:34.190 align:start position:0%
in JDK 9 that we'll be talking about
today<00:00:31.969><c> first</c><00:00:32.969><c> we'll</c><00:00:33.690><c> talk</c><00:00:33.899><c> about</c><00:00:33.960><c> what</c>

00:00:34.190 --> 00:00:34.200 align:start position:0%
today first we'll talk about what
 

00:00:34.200 --> 00:00:36.740 align:start position:0%
today first we'll talk about what
modules<00:00:34.710><c> are</c><00:00:35.250><c> and</c><00:00:35.550><c> how</c><00:00:35.940><c> they</c><00:00:36.090><c> improve</c><00:00:36.390><c> the</c>

00:00:36.740 --> 00:00:36.750 align:start position:0%
modules are and how they improve the
 

00:00:36.750 --> 00:00:39.950 align:start position:0%
modules are and how they improve the
developer<00:00:37.140><c> experience</c><00:00:38.149><c> second</c><00:00:39.149><c> we'll</c><00:00:39.719><c> talk</c>

00:00:39.950 --> 00:00:39.960 align:start position:0%
developer experience second we'll talk
 

00:00:39.960 --> 00:00:41.990 align:start position:0%
developer experience second we'll talk
about<00:00:40.140><c> how</c><00:00:40.500><c> the</c><00:00:40.559><c> JDK</c><00:00:41.129><c> has</c><00:00:41.340><c> been</c><00:00:41.640><c> turned</c><00:00:41.910><c> into</c>

00:00:41.990 --> 00:00:42.000 align:start position:0%
about how the JDK has been turned into
 

00:00:42.000 --> 00:00:45.260 align:start position:0%
about how the JDK has been turned into
modules<00:00:42.570><c> and</c><00:00:42.899><c> third</c><00:00:43.829><c> we'll</c><00:00:44.430><c> talk</c><00:00:44.700><c> about</c><00:00:44.850><c> some</c>

00:00:45.260 --> 00:00:45.270 align:start position:0%
modules and third we'll talk about some
 

00:00:45.270 --> 00:00:46.670 align:start position:0%
modules and third we'll talk about some
of<00:00:45.360><c> the</c><00:00:45.450><c> things</c><00:00:45.660><c> you</c><00:00:45.840><c> need</c><00:00:45.989><c> to</c><00:00:46.200><c> know</c><00:00:46.379><c> about</c>

00:00:46.670 --> 00:00:46.680 align:start position:0%
of the things you need to know about
 

00:00:46.680 --> 00:00:52.250 align:start position:0%
of the things you need to know about
migrating<00:00:47.280><c> to</c><00:00:47.820><c> JDK</c><00:00:48.210><c> 9</c><00:00:50.600><c> one</c><00:00:51.600><c> of</c><00:00:51.719><c> the</c><00:00:51.840><c> core</c>

00:00:52.250 --> 00:00:52.260 align:start position:0%
migrating to JDK 9 one of the core
 

00:00:52.260 --> 00:00:54.560 align:start position:0%
migrating to JDK 9 one of the core
features<00:00:52.530><c> of</c><00:00:53.039><c> any</c><00:00:53.430><c> programming</c><00:00:54.000><c> language</c><00:00:54.360><c> is</c>

00:00:54.560 --> 00:00:54.570 align:start position:0%
features of any programming language is
 

00:00:54.570 --> 00:00:57.170 align:start position:0%
features of any programming language is
the<00:00:54.719><c> ability</c><00:00:54.960><c> to</c><00:00:55.350><c> reuse</c><00:00:55.770><c> code</c><00:00:56.070><c> so</c><00:00:56.820><c> the</c><00:00:56.940><c> large</c>

00:00:57.170 --> 00:00:57.180 align:start position:0%
the ability to reuse code so the large
 

00:00:57.180 --> 00:00:58.849 align:start position:0%
the ability to reuse code so the large
programs<00:00:57.690><c> can</c><00:00:58.079><c> be</c><00:00:58.199><c> built</c><00:00:58.379><c> from</c><00:00:58.469><c> small</c>

00:00:58.849 --> 00:00:58.859 align:start position:0%
programs can be built from small
 

00:00:58.859 --> 00:01:03.049 align:start position:0%
programs can be built from small
programs<00:00:59.309><c> in</c><00:01:00.210><c> Java</c><00:01:00.870><c> the</c><00:01:01.559><c> basic</c><00:01:01.980><c> unit</c><00:01:02.399><c> of</c><00:01:02.579><c> reuse</c>

00:01:03.049 --> 00:01:03.059 align:start position:0%
programs in Java the basic unit of reuse
 

00:01:03.059 --> 00:01:05.840 align:start position:0%
programs in Java the basic unit of reuse
is<00:01:03.420><c> traditionally</c><00:01:04.290><c> the</c><00:01:04.409><c> class</c><00:01:04.680><c> Java</c><00:01:05.640><c> has</c>

00:01:05.840 --> 00:01:05.850 align:start position:0%
is traditionally the class Java has
 

00:01:05.850 --> 00:01:08.630 align:start position:0%
is traditionally the class Java has
wonderful<00:01:06.299><c> mechanisms</c><00:01:07.020><c> for</c><00:01:07.560><c> promoting</c><00:01:08.250><c> reuse</c>

00:01:08.630 --> 00:01:08.640 align:start position:0%
wonderful mechanisms for promoting reuse
 

00:01:08.640 --> 00:01:11.300 align:start position:0%
wonderful mechanisms for promoting reuse
of<00:01:08.670><c> a</c><00:01:08.909><c> class</c><00:01:09.119><c> such</c><00:01:09.960><c> as</c><00:01:09.990><c> inheritance</c><00:01:10.530><c> for</c>

00:01:11.300 --> 00:01:11.310 align:start position:0%
of a class such as inheritance for
 

00:01:11.310 --> 00:01:13.880 align:start position:0%
of a class such as inheritance for
reusing<00:01:11.760><c> behavior</c><00:01:12.180><c> and</c><00:01:12.530><c> interfaces</c><00:01:13.530><c> for</c>

00:01:13.880 --> 00:01:13.890 align:start position:0%
reusing behavior and interfaces for
 

00:01:13.890 --> 00:01:15.490 align:start position:0%
reusing behavior and interfaces for
reusing<00:01:14.369><c> abstractions</c>

00:01:15.490 --> 00:01:15.500 align:start position:0%
reusing abstractions
 

00:01:15.500 --> 00:01:18.890 align:start position:0%
reusing abstractions
however<00:01:16.500><c> when</c><00:01:17.400><c> your</c><00:01:17.549><c> Java</c><00:01:17.790><c> program</c><00:01:18.360><c> gets</c><00:01:18.720><c> to</c>

00:01:18.890 --> 00:01:18.900 align:start position:0%
however when your Java program gets to
 

00:01:18.900 --> 00:01:23.660 align:start position:0%
however when your Java program gets to
be<00:01:19.020><c> 5</c><00:01:19.350><c> 10</c><00:01:19.890><c> 20</c><00:01:20.490><c> packages</c><00:01:20.820><c> in</c><00:01:21.360><c> 2</c><00:01:22.140><c> 4</c><00:01:22.619><c> 8</c><00:01:22.920><c> jar</c><00:01:23.400><c> files</c>

00:01:23.660 --> 00:01:23.670 align:start position:0%
be 5 10 20 packages in 2 4 8 jar files
 

00:01:23.670 --> 00:01:26.090 align:start position:0%
be 5 10 20 packages in 2 4 8 jar files
it<00:01:24.119><c> becomes</c><00:01:24.780><c> difficult</c><00:01:25.049><c> to</c><00:01:25.439><c> visualize</c><00:01:26.070><c> how</c>

00:01:26.090 --> 00:01:26.100 align:start position:0%
it becomes difficult to visualize how
 

00:01:26.100 --> 00:01:27.800 align:start position:0%
it becomes difficult to visualize how
all<00:01:26.610><c> those</c><00:01:26.820><c> classes</c><00:01:27.390><c> and</c><00:01:27.570><c> interfaces</c>

00:01:27.800 --> 00:01:27.810 align:start position:0%
all those classes and interfaces
 

00:01:27.810 --> 00:01:30.410 align:start position:0%
all those classes and interfaces
interact<00:01:28.799><c> which</c><00:01:29.610><c> means</c><00:01:29.820><c> it's</c><00:01:29.970><c> hard</c><00:01:30.210><c> to</c>

00:01:30.410 --> 00:01:30.420 align:start position:0%
interact which means it's hard to
 

00:01:30.420 --> 00:01:36.080 align:start position:0%
interact which means it's hard to
control<00:01:30.680><c> who</c><00:01:31.680><c> is</c><00:01:31.950><c> reusing</c><00:01:32.759><c> what</c><00:01:34.579><c> just</c><00:01:35.579><c> imagine</c>

00:01:36.080 --> 00:01:36.090 align:start position:0%
control who is reusing what just imagine
 

00:01:36.090 --> 00:01:38.630 align:start position:0%
control who is reusing what just imagine
how<00:01:36.270><c> difficult</c><00:01:36.540><c> it</c><00:01:36.900><c> is</c><00:01:37.110><c> to</c><00:01:37.380><c> control</c><00:01:38.070><c> reuse</c>

00:01:38.630 --> 00:01:38.640 align:start position:0%
how difficult it is to control reuse
 

00:01:38.640 --> 00:01:41.590 align:start position:0%
how difficult it is to control reuse
within<00:01:39.030><c> a</c><00:01:39.090><c> really</c><00:01:39.509><c> large</c><00:01:39.750><c> code</c><00:01:40.079><c> base</c><00:01:40.259><c> like</c><00:01:41.040><c> the</c>

00:01:41.590 --> 00:01:41.600 align:start position:0%
within a really large code base like the
 

00:01:41.600 --> 00:01:44.870 align:start position:0%
within a really large code base like the
217<00:01:42.600><c> official</c><00:01:43.259><c> packages</c><00:01:43.770><c> shown</c><00:01:44.220><c> here</c><00:01:44.520><c> from</c>

00:01:44.870 --> 00:01:44.880 align:start position:0%
217 official packages shown here from
 

00:01:44.880 --> 00:01:48.460 align:start position:0%
217 official packages shown here from
JDK<00:01:45.390><c> 8</c><00:01:45.979><c> the</c><00:01:46.979><c> only</c><00:01:47.280><c> way</c><00:01:47.460><c> to</c><00:01:47.520><c> share</c><00:01:47.970><c> code</c><00:01:48.270><c> between</c>

00:01:48.460 --> 00:01:48.470 align:start position:0%
JDK 8 the only way to share code between
 

00:01:48.470 --> 00:01:52.760 align:start position:0%
JDK 8 the only way to share code between
packages<00:01:49.470><c> is</c><00:01:49.740><c> with</c><00:01:50.310><c> the</c><00:01:50.490><c> public</c><00:01:51.060><c> modifier</c><00:01:51.960><c> but</c>

00:01:52.760 --> 00:01:52.770 align:start position:0%
packages is with the public modifier but
 

00:01:52.770 --> 00:01:55.480 align:start position:0%
packages is with the public modifier but
then<00:01:53.009><c> the</c><00:01:53.159><c> code</c><00:01:53.369><c> is</c><00:01:53.520><c> shared</c><00:01:53.790><c> with</c><00:01:54.060><c> everyone</c><00:01:54.630><c> a</c>

00:01:55.480 --> 00:01:55.490 align:start position:0%
then the code is shared with everyone a
 

00:01:55.490 --> 00:01:57.649 align:start position:0%
then the code is shared with everyone a
package<00:01:56.490><c> is</c><00:01:56.670><c> a</c><00:01:56.700><c> great</c><00:01:57.030><c> way</c><00:01:57.270><c> to</c><00:01:57.299><c> organize</c>

00:01:57.649 --> 00:01:57.659 align:start position:0%
package is a great way to organize
 

00:01:57.659 --> 00:02:00.590 align:start position:0%
package is a great way to organize
classes<00:01:58.520><c> but</c><00:01:59.520><c> most</c><00:01:59.549><c> people</c><00:02:00.060><c> wish</c><00:02:00.240><c> there</c><00:02:00.450><c> was</c><00:02:00.570><c> a</c>

00:02:00.590 --> 00:02:00.600 align:start position:0%
classes but most people wish there was a
 

00:02:00.600 --> 00:02:04.429 align:start position:0%
classes but most people wish there was a
way<00:02:00.780><c> to</c><00:02:00.810><c> organize</c><00:02:01.250><c> packages</c><00:02:02.250><c> to</c><00:02:03.200><c> modules</c><00:02:04.200><c> let</c>

00:02:04.429 --> 00:02:04.439 align:start position:0%
way to organize packages to modules let
 

00:02:04.439 --> 00:02:07.249 align:start position:0%
way to organize packages to modules let
you<00:02:04.530><c> do</c><00:02:04.680><c> that</c><00:02:04.860><c> a</c><00:02:05.360><c> module</c><00:02:06.360><c> is</c><00:02:06.630><c> a</c><00:02:06.689><c> set</c><00:02:07.140><c> of</c>

00:02:07.249 --> 00:02:07.259 align:start position:0%
you do that a module is a set of
 

00:02:07.259 --> 00:02:10.760 align:start position:0%
you do that a module is a set of
packages<00:02:07.619><c> designed</c><00:02:08.429><c> for</c><00:02:08.910><c> reuse</c><00:02:09.560><c> this</c><00:02:10.560><c> is</c><00:02:10.739><c> a</c>

00:02:10.760 --> 00:02:10.770 align:start position:0%
packages designed for reuse this is a
 

00:02:10.770 --> 00:02:12.740 align:start position:0%
packages designed for reuse this is a
long-overdue<00:02:11.280><c> building</c><00:02:11.910><c> block</c><00:02:12.120><c> in</c><00:02:12.360><c> the</c><00:02:12.540><c> java</c>

00:02:12.740 --> 00:02:12.750 align:start position:0%
long-overdue building block in the java
 

00:02:12.750 --> 00:02:13.699 align:start position:0%
long-overdue building block in the java
language

00:02:13.699 --> 00:02:13.709 align:start position:0%
language
 

00:02:13.709 --> 00:02:16.099 align:start position:0%
language
in<00:02:13.980><c> effect</c><00:02:14.280><c> modules</c><00:02:15.269><c> recalled</c><00:02:15.810><c> to</c><00:02:16.079><c> the</c>

00:02:16.099 --> 00:02:16.109 align:start position:0%
in effect modules recalled to the
 

00:02:16.109 --> 00:02:18.770 align:start position:0%
in effect modules recalled to the
structure<00:02:16.769><c> of</c><00:02:16.799><c> your</c><00:02:16.980><c> program</c><00:02:17.579><c> so</c><00:02:18.450><c> that</c><00:02:18.659><c> the</c>

00:02:18.770 --> 00:02:18.780 align:start position:0%
structure of your program so that the
 

00:02:18.780 --> 00:02:22.130 align:start position:0%
structure of your program so that the
parts<00:02:19.260><c> you</c><00:02:19.500><c> want</c><00:02:19.859><c> to</c><00:02:20.310><c> be</c><00:02:20.459><c> reused</c><00:02:21.030><c> can</c><00:02:21.840><c> be</c>

00:02:22.130 --> 00:02:22.140 align:start position:0%
parts you want to be reused can be
 

00:02:22.140 --> 00:02:23.059 align:start position:0%
parts you want to be reused can be
reused

00:02:23.059 --> 00:02:23.069 align:start position:0%
reused
 

00:02:23.069 --> 00:02:26.059 align:start position:0%
reused
while<00:02:23.760><c> the</c><00:02:24.000><c> parts</c><00:02:24.420><c> you</c><00:02:24.629><c> don't</c><00:02:24.989><c> want</c><00:02:25.709><c> to</c><00:02:25.920><c> be</c>

00:02:26.059 --> 00:02:26.069 align:start position:0%
while the parts you don't want to be
 

00:02:26.069 --> 00:02:31.190 align:start position:0%
while the parts you don't want to be
reused<00:02:26.599><c> can't</c><00:02:27.599><c> be</c><00:02:28.260><c> reused</c><00:02:28.500><c> a</c><00:02:29.930><c> program</c><00:02:30.930><c> built</c>

00:02:31.190 --> 00:02:31.200 align:start position:0%
reused can't be reused a program built
 

00:02:31.200 --> 00:02:33.830 align:start position:0%
reused can't be reused a program built
of<00:02:31.319><c> modules</c><00:02:31.769><c> will</c><00:02:32.099><c> be</c><00:02:32.129><c> more</c><00:02:32.489><c> reliable</c><00:02:33.209><c> than</c><00:02:33.780><c> a</c>

00:02:33.830 --> 00:02:33.840 align:start position:0%
of modules will be more reliable than a
 

00:02:33.840 --> 00:02:35.780 align:start position:0%
of modules will be more reliable than a
program<00:02:34.139><c> built</c><00:02:34.829><c> from</c><00:02:35.069><c> a</c><00:02:35.159><c> loose</c><00:02:35.430><c> set</c><00:02:35.670><c> of</c>

00:02:35.780 --> 00:02:35.790 align:start position:0%
program built from a loose set of
 

00:02:35.790 --> 00:02:38.030 align:start position:0%
program built from a loose set of
packages<00:02:36.180><c> in</c><00:02:36.599><c> jar</c><00:02:36.840><c> files</c><00:02:37.139><c> that</c><00:02:37.530><c> can</c><00:02:37.709><c> access</c>

00:02:38.030 --> 00:02:38.040 align:start position:0%
packages in jar files that can access
 

00:02:38.040 --> 00:02:39.800 align:start position:0%
packages in jar files that can access
each<00:02:38.189><c> other</c><00:02:38.370><c> freely</c><00:02:38.700><c> and</c><00:02:39.030><c> that</c><00:02:39.209><c> exposed</c><00:02:39.629><c> to</c>

00:02:39.800 --> 00:02:39.810 align:start position:0%
each other freely and that exposed to
 

00:02:39.810 --> 00:02:43.190 align:start position:0%
each other freely and that exposed to
many<00:02:39.959><c> api's</c><00:02:40.439><c> to</c><00:02:40.709><c> the</c><00:02:40.799><c> outside</c><00:02:41.189><c> world</c><00:02:42.109><c> here's</c><00:02:43.109><c> a</c>

00:02:43.190 --> 00:02:43.200 align:start position:0%
many api's to the outside world here's a
 

00:02:43.200 --> 00:02:45.170 align:start position:0%
many api's to the outside world here's a
module<00:02:43.560><c> that</c><00:02:44.040><c> everyone</c><00:02:44.670><c> will</c><00:02:44.849><c> soon</c><00:02:45.030><c> be</c>

00:02:45.170 --> 00:02:45.180 align:start position:0%
module that everyone will soon be
 

00:02:45.180 --> 00:02:48.080 align:start position:0%
module that everyone will soon be
familiar<00:02:45.569><c> with</c><00:02:45.750><c> Java</c><00:02:46.409><c> base</c><00:02:46.790><c> it's</c><00:02:47.790><c> the</c>

00:02:48.080 --> 00:02:48.090 align:start position:0%
familiar with Java base it's the
 

00:02:48.090 --> 00:02:50.300 align:start position:0%
familiar with Java base it's the
foundation<00:02:48.540><c> of</c><00:02:48.810><c> every</c><00:02:49.169><c> Java</c><00:02:49.409><c> program</c><00:02:49.889><c> like</c>

00:02:50.300 --> 00:02:50.310 align:start position:0%
foundation of every Java program like
 

00:02:50.310 --> 00:02:52.369 align:start position:0%
foundation of every Java program like
java.lang<00:02:51.000><c> object</c><00:02:51.450><c> is</c><00:02:51.629><c> the</c><00:02:51.780><c> root</c><00:02:51.959><c> of</c><00:02:52.079><c> every</c>

00:02:52.369 --> 00:02:52.379 align:start position:0%
java.lang object is the root of every
 

00:02:52.379 --> 00:02:55.250 align:start position:0%
java.lang object is the root of every
class<00:02:52.590><c> in</c><00:02:53.400><c> blue</c><00:02:53.790><c> are</c><00:02:54.060><c> the</c><00:02:54.389><c> packages</c><00:02:54.870><c> of</c><00:02:55.019><c> Java</c>

00:02:55.250 --> 00:02:55.260 align:start position:0%
class in blue are the packages of Java
 

00:02:55.260 --> 00:02:58.459 align:start position:0%
class in blue are the packages of Java
base<00:02:55.549><c> intended</c><00:02:56.549><c> for</c><00:02:56.790><c> use</c><00:02:57.000><c> by</c><00:02:57.030><c> code</c><00:02:57.599><c> outside</c>

00:02:58.459 --> 00:02:58.469 align:start position:0%
base intended for use by code outside
 

00:02:58.469 --> 00:03:01.459 align:start position:0%
base intended for use by code outside
the<00:02:58.680><c> module</c><00:02:58.909><c> these</c><00:02:59.909><c> are</c><00:03:00.120><c> its</c><00:03:00.469><c> exported</c>

00:03:01.459 --> 00:03:01.469 align:start position:0%
the module these are its exported
 

00:03:01.469 --> 00:03:06.619 align:start position:0%
the module these are its exported
packages<00:03:02.750><c> in</c><00:03:03.750><c> red</c><00:03:04.230><c> other</c><00:03:04.609><c> packages</c><00:03:05.629><c> internal</c>

00:03:06.619 --> 00:03:06.629 align:start position:0%
packages in red other packages internal
 

00:03:06.629 --> 00:03:09.679 align:start position:0%
packages in red other packages internal
to<00:03:07.230><c> Java</c><00:03:07.469><c> base</c><00:03:07.709><c> they</c><00:03:08.639><c> can</c><00:03:08.879><c> be</c><00:03:09.000><c> used</c><00:03:09.209><c> by</c><00:03:09.329><c> code</c>

00:03:09.679 --> 00:03:09.689 align:start position:0%
to Java base they can be used by code
 

00:03:09.689 --> 00:03:11.899 align:start position:0%
to Java base they can be used by code
inside<00:03:10.200><c> the</c><00:03:10.260><c> module</c><00:03:10.650><c> but</c><00:03:11.280><c> not</c><00:03:11.459><c> by</c><00:03:11.639><c> code</c>

00:03:11.899 --> 00:03:11.909 align:start position:0%
inside the module but not by code
 

00:03:11.909 --> 00:03:14.479 align:start position:0%
inside the module but not by code
outside<00:03:12.719><c> the</c><00:03:12.870><c> module</c><00:03:13.159><c> these</c><00:03:14.159><c> are</c><00:03:14.340><c> its</c>

00:03:14.479 --> 00:03:14.489 align:start position:0%
outside the module these are its
 

00:03:14.489 --> 00:03:19.339 align:start position:0%
outside the module these are its
concealed<00:03:15.469><c> packages</c><00:03:16.469><c> a</c><00:03:17.720><c> module</c><00:03:18.720><c> is</c><00:03:18.870><c> declared</c>

00:03:19.339 --> 00:03:19.349 align:start position:0%
concealed packages a module is declared
 

00:03:19.349 --> 00:03:22.009 align:start position:0%
concealed packages a module is declared
in<00:03:19.650><c> a</c><00:03:19.799><c> new</c><00:03:20.010><c> kind</c><00:03:20.280><c> of</c><00:03:20.430><c> file</c><00:03:20.609><c> called</c><00:03:21.090><c> module</c><00:03:21.599><c> info</c>

00:03:22.009 --> 00:03:22.019 align:start position:0%
in a new kind of file called module info
 

00:03:22.019 --> 00:03:25.309 align:start position:0%
in a new kind of file called module info
Java<00:03:22.699><c> it</c><00:03:23.699><c> gives</c><00:03:24.060><c> the</c><00:03:24.299><c> name</c><00:03:24.479><c> of</c><00:03:24.629><c> the</c><00:03:24.720><c> module</c><00:03:24.870><c> and</c>

00:03:25.309 --> 00:03:25.319 align:start position:0%
Java it gives the name of the module and
 

00:03:25.319 --> 00:03:28.939 align:start position:0%
Java it gives the name of the module and
its<00:03:25.859><c> exported</c><00:03:26.579><c> packages</c><00:03:27.229><c> by</c><00:03:28.229><c> exporting</c><00:03:28.889><c> the</c>

00:03:28.939 --> 00:03:28.949 align:start position:0%
its exported packages by exporting the
 

00:03:28.949 --> 00:03:31.399 align:start position:0%
its exported packages by exporting the
java.lang<00:03:29.790><c> package</c><00:03:29.819><c> it</c><00:03:30.810><c> means</c><00:03:31.109><c> that</c><00:03:31.319><c> the</c>

00:03:31.399 --> 00:03:31.409 align:start position:0%
java.lang package it means that the
 

00:03:31.409 --> 00:03:34.159 align:start position:0%
java.lang package it means that the
public<00:03:31.799><c> classes</c><00:03:32.579><c> of</c><00:03:33.090><c> java.lang</c><00:03:33.810><c> are</c>

00:03:34.159 --> 00:03:34.169 align:start position:0%
public classes of java.lang are
 

00:03:34.169 --> 00:03:37.449 align:start position:0%
public classes of java.lang are
accessible<00:03:35.099><c> from</c><00:03:35.579><c> outside</c><00:03:35.729><c> java</c><00:03:36.329><c> base</c><00:03:36.599><c> a</c>

00:03:37.449 --> 00:03:37.459 align:start position:0%
accessible from outside java base a
 

00:03:37.459 --> 00:03:41.289 align:start position:0%
accessible from outside java base a
package<00:03:38.459><c> that</c><00:03:38.729><c> is</c><00:03:38.849><c> not</c><00:03:39.319><c> explicitly</c><00:03:40.319><c> exported</c>

00:03:41.289 --> 00:03:41.299 align:start position:0%
package that is not explicitly exported
 

00:03:41.299 --> 00:03:44.689 align:start position:0%
package that is not explicitly exported
such<00:03:42.299><c> as</c><00:03:42.479><c> calm</c><00:03:42.750><c> sun</c><00:03:43.139><c> crypto</c><00:03:43.709><c> provider</c><00:03:44.129><c> is</c>

00:03:44.689 --> 00:03:44.699 align:start position:0%
such as calm sun crypto provider is
 

00:03:44.699 --> 00:03:47.929 align:start position:0%
such as calm sun crypto provider is
concealed<00:03:45.419><c> it's</c><00:03:46.319><c> public</c><00:03:46.709><c> classes</c><00:03:46.949><c> are</c><00:03:47.340><c> not</c>

00:03:47.929 --> 00:03:47.939 align:start position:0%
concealed it's public classes are not
 

00:03:47.939 --> 00:03:52.189 align:start position:0%
concealed it's public classes are not
accessible<00:03:48.810><c> outside</c><00:03:49.169><c> java</c><00:03:49.799><c> base</c><00:03:50.959><c> this</c><00:03:51.959><c> is</c><00:03:52.019><c> the</c>

00:03:52.189 --> 00:03:52.199 align:start position:0%
accessible outside java base this is the
 

00:03:52.199 --> 00:03:55.580 align:start position:0%
accessible outside java base this is the
first<00:03:52.620><c> feature</c><00:03:52.829><c> of</c><00:03:53.189><c> modules</c><00:03:53.669><c> in</c><00:03:53.939><c> jdk</c><00:03:54.419><c> 9</c><00:03:54.629><c> strong</c>

00:03:55.580 --> 00:03:55.590 align:start position:0%
first feature of modules in jdk 9 strong
 

00:03:55.590 --> 00:03:58.610 align:start position:0%
first feature of modules in jdk 9 strong
encapsulation<00:03:56.459><c> a</c><00:03:56.819><c> module</c><00:03:57.569><c> isn't</c><00:03:57.989><c> just</c><00:03:58.349><c> a</c><00:03:58.470><c> set</c>

00:03:58.610 --> 00:03:58.620 align:start position:0%
encapsulation a module isn't just a set
 

00:03:58.620 --> 00:04:01.309 align:start position:0%
encapsulation a module isn't just a set
of<00:03:58.739><c> packages</c><00:03:59.069><c> it's</c><00:03:59.879><c> a</c><00:04:00.060><c> set</c><00:04:00.239><c> of</c><00:04:00.359><c> exported</c>

00:04:01.309 --> 00:04:01.319 align:start position:0%
of packages it's a set of exported
 

00:04:01.319 --> 00:04:05.349 align:start position:0%
of packages it's a set of exported
packages<00:04:01.799><c> and</c><00:04:02.009><c> concealed</c><00:04:02.970><c> packages</c>

00:04:05.349 --> 00:04:05.359 align:start position:0%
packages and concealed packages
 

00:04:05.359 --> 00:04:08.479 align:start position:0%
packages and concealed packages
this<00:04:06.359><c> means</c><00:04:06.629><c> that</c><00:04:06.780><c> access</c><00:04:07.680><c> control</c><00:04:08.129><c> is</c><00:04:08.310><c> more</c>

00:04:08.479 --> 00:04:08.489 align:start position:0%
this means that access control is more
 

00:04:08.489 --> 00:04:11.809 align:start position:0%
this means that access control is more
powerful<00:04:09.180><c> in</c><00:04:09.359><c> jdk</c><00:04:09.750><c> 9</c><00:04:09.959><c> than</c><00:04:10.680><c> in</c><00:04:10.799><c> jdk</c><00:04:11.189><c> 8</c><00:04:11.340><c> in</c>

00:04:11.809 --> 00:04:11.819 align:start position:0%
powerful in jdk 9 than in jdk 8 in
 

00:04:11.819 --> 00:04:14.420 align:start position:0%
powerful in jdk 9 than in jdk 8 in
jeddah<00:04:12.569><c> q9</c><00:04:12.930><c> you</c><00:04:13.349><c> can</c><00:04:13.530><c> arrange</c><00:04:13.799><c> for</c><00:04:13.919><c> public</c>

00:04:14.420 --> 00:04:14.430 align:start position:0%
jeddah q9 you can arrange for public
 

00:04:14.430 --> 00:04:18.370 align:start position:0%
jeddah q9 you can arrange for public
classes<00:04:14.699><c> to</c><00:04:15.120><c> be</c><00:04:15.239><c> accessible</c><00:04:15.810><c> to</c><00:04:15.959><c> everyone</c><00:04:16.759><c> or</c>

00:04:18.370 --> 00:04:18.380 align:start position:0%
classes to be accessible to everyone or
 

00:04:18.380 --> 00:04:21.349 align:start position:0%
classes to be accessible to everyone or
accessible<00:04:19.380><c> only</c><00:04:19.560><c> to</c><00:04:20.009><c> other</c><00:04:20.220><c> classes</c><00:04:20.699><c> in</c><00:04:21.120><c> the</c>

00:04:21.349 --> 00:04:21.359 align:start position:0%
accessible only to other classes in the
 

00:04:21.359 --> 00:04:25.700 align:start position:0%
accessible only to other classes in the
same<00:04:21.539><c> module</c><00:04:22.130><c> or</c><00:04:23.840><c> accessible</c><00:04:24.840><c> to</c><00:04:25.020><c> classes</c><00:04:25.529><c> in</c>

00:04:25.700 --> 00:04:25.710 align:start position:0%
same module or accessible to classes in
 

00:04:25.710 --> 00:04:27.350 align:start position:0%
same module or accessible to classes in
the<00:04:25.860><c> same</c><00:04:26.070><c> module</c><00:04:26.310><c> and</c><00:04:26.789><c> a</c><00:04:27.150><c> limb</c>

00:04:27.350 --> 00:04:27.360 align:start position:0%
the same module and a limb
 

00:04:27.360 --> 00:04:30.860 align:start position:0%
the same module and a limb
set<00:04:27.780><c> of</c><00:04:28.050><c> friend</c><00:04:28.349><c> modules</c><00:04:29.090><c> so</c><00:04:30.090><c> if</c><00:04:30.539><c> you're</c>

00:04:30.860 --> 00:04:30.870 align:start position:0%
set of friend modules so if you're
 

00:04:30.870 --> 00:04:33.379 align:start position:0%
set of friend modules so if you're
looking<00:04:31.199><c> at</c><00:04:31.319><c> public</c><00:04:31.650><c> on</c><00:04:32.069><c> a</c><00:04:32.129><c> class</c><00:04:32.639><c> declaration</c>

00:04:33.379 --> 00:04:33.389 align:start position:0%
looking at public on a class declaration
 

00:04:33.389 --> 00:04:36.320 align:start position:0%
looking at public on a class declaration
it<00:04:34.080><c> no</c><00:04:34.289><c> longer</c><00:04:34.650><c> means</c><00:04:34.860><c> that</c><00:04:35.129><c> everyone</c><00:04:35.849><c> can</c>

00:04:36.320 --> 00:04:36.330 align:start position:0%
it no longer means that everyone can
 

00:04:36.330 --> 00:04:39.170 align:start position:0%
it no longer means that everyone can
access<00:04:36.719><c> the</c><00:04:36.870><c> class</c><00:04:37.490><c> access</c><00:04:38.490><c> depends</c><00:04:39.030><c> on</c>

00:04:39.170 --> 00:04:39.180 align:start position:0%
access the class access depends on
 

00:04:39.180 --> 00:04:42.559 align:start position:0%
access the class access depends on
whether<00:04:39.449><c> the</c><00:04:39.689><c> class's</c><00:04:40.319><c> module</c><00:04:41.210><c> exports</c><00:04:42.210><c> the</c>

00:04:42.559 --> 00:04:42.569 align:start position:0%
whether the class's module exports the
 

00:04:42.569 --> 00:04:45.469 align:start position:0%
whether the class's module exports the
classes<00:04:43.080><c> package</c><00:04:43.610><c> when</c><00:04:44.610><c> you</c><00:04:44.729><c> write</c><00:04:44.969><c> your</c><00:04:45.240><c> own</c>

00:04:45.469 --> 00:04:45.479 align:start position:0%
classes package when you write your own
 

00:04:45.479 --> 00:04:48.439 align:start position:0%
classes package when you write your own
module<00:04:46.050><c> you</c><00:04:46.889><c> specify</c><00:04:47.460><c> the</c><00:04:47.520><c> modules</c><00:04:48.000><c> it</c>

00:04:48.439 --> 00:04:48.449 align:start position:0%
module you specify the modules it
 

00:04:48.449 --> 00:04:51.439 align:start position:0%
module you specify the modules it
depends<00:04:48.960><c> on</c><00:04:49.250><c> this</c><00:04:50.250><c> is</c><00:04:50.430><c> the</c><00:04:50.580><c> second</c><00:04:51.060><c> feature</c><00:04:51.210><c> of</c>

00:04:51.439 --> 00:04:51.449 align:start position:0%
depends on this is the second feature of
 

00:04:51.449 --> 00:04:54.559 align:start position:0%
depends on this is the second feature of
modules<00:04:51.990><c> in</c><00:04:52.169><c> JDK</c><00:04:52.530><c> nine</c><00:04:52.879><c> reliable</c><00:04:53.879><c> dependences</c>

00:04:54.559 --> 00:04:54.569 align:start position:0%
modules in JDK nine reliable dependences
 

00:04:54.569 --> 00:04:56.899 align:start position:0%
modules in JDK nine reliable dependences
a<00:04:54.870><c> module</c><00:04:55.740><c> isn't</c><00:04:55.919><c> just</c><00:04:56.280><c> a</c><00:04:56.400><c> set</c><00:04:56.550><c> of</c><00:04:56.639><c> packages</c>

00:04:56.899 --> 00:04:56.909 align:start position:0%
a module isn't just a set of packages
 

00:04:56.909 --> 00:04:59.959 align:start position:0%
a module isn't just a set of packages
it's<00:04:57.659><c> the</c><00:04:57.840><c> set</c><00:04:58.050><c> of</c><00:04:58.169><c> packages</c><00:04:58.530><c> that</c><00:04:59.039><c> reuse</c><00:04:59.729><c> the</c>

00:04:59.959 --> 00:04:59.969 align:start position:0%
it's the set of packages that reuse the
 

00:04:59.969 --> 00:05:04.760 align:start position:0%
it's the set of packages that reuse the
packages<00:05:00.620><c> exported</c><00:05:01.620><c> by</c><00:05:02.009><c> other</c><00:05:02.279><c> modules</c><00:05:03.770><c> here</c>

00:05:04.760 --> 00:05:04.770 align:start position:0%
packages exported by other modules here
 

00:05:04.770 --> 00:05:07.369 align:start position:0%
packages exported by other modules here
we<00:05:05.520><c> have</c><00:05:05.699><c> a</c><00:05:05.729><c> hello</c><00:05:06.360><c> world</c><00:05:06.389><c> module</c><00:05:07.020><c> that</c>

00:05:07.369 --> 00:05:07.379 align:start position:0%
we have a hello world module that
 

00:05:07.379 --> 00:05:10.610 align:start position:0%
we have a hello world module that
exports<00:05:07.979><c> a</c><00:05:08.069><c> package</c><00:05:08.400><c> of</c><00:05:08.490><c> its</c><00:05:08.610><c> own</c><00:05:08.789><c> and</c><00:05:09.620><c> depends</c>

00:05:10.610 --> 00:05:10.620 align:start position:0%
exports a package of its own and depends
 

00:05:10.620 --> 00:05:14.409 align:start position:0%
exports a package of its own and depends
on<00:05:10.830><c> Java</c><00:05:11.129><c> base</c><00:05:11.430><c> with</c><00:05:12.210><c> the</c><00:05:12.389><c> requires</c><00:05:12.840><c> keyword</c>

00:05:14.409 --> 00:05:14.419 align:start position:0%
on Java base with the requires keyword
 

00:05:14.419 --> 00:05:17.629 align:start position:0%
on Java base with the requires keyword
this<00:05:15.419><c> means</c><00:05:15.689><c> the</c><00:05:16.259><c> code</c><00:05:16.800><c> in</c><00:05:17.009><c> the</c><00:05:17.099><c> HelloWorld</c>

00:05:17.629 --> 00:05:17.639 align:start position:0%
this means the code in the HelloWorld
 

00:05:17.639 --> 00:05:20.409 align:start position:0%
this means the code in the HelloWorld
module<00:05:18.000><c> can</c><00:05:18.599><c> import</c><00:05:18.960><c> any</c><00:05:19.289><c> of</c><00:05:19.469><c> the</c><00:05:19.590><c> packages</c>

00:05:20.409 --> 00:05:20.419 align:start position:0%
module can import any of the packages
 

00:05:20.419 --> 00:05:24.200 align:start position:0%
module can import any of the packages
exported<00:05:21.419><c> by</c><00:05:21.750><c> Java</c><00:05:22.020><c> base</c><00:05:22.759><c> but</c><00:05:23.759><c> there</c><00:05:23.939><c> is</c><00:05:24.060><c> no</c>

00:05:24.200 --> 00:05:24.210 align:start position:0%
exported by Java base but there is no
 

00:05:24.210 --> 00:05:26.869 align:start position:0%
exported by Java base but there is no
way<00:05:24.389><c> for</c><00:05:24.419><c> code</c><00:05:24.840><c> in</c><00:05:25.080><c> the</c><00:05:25.199><c> HelloWorld</c><00:05:25.680><c> module</c><00:05:26.069><c> to</c>

00:05:26.869 --> 00:05:26.879 align:start position:0%
way for code in the HelloWorld module to
 

00:05:26.879 --> 00:05:29.809 align:start position:0%
way for code in the HelloWorld module to
import<00:05:27.300><c> any</c><00:05:27.479><c> of</c><00:05:27.629><c> the</c><00:05:27.750><c> packages</c><00:05:28.099><c> concealed</c><00:05:29.099><c> by</c>

00:05:29.809 --> 00:05:29.819 align:start position:0%
import any of the packages concealed by
 

00:05:29.819 --> 00:05:32.540 align:start position:0%
import any of the packages concealed by
Java<00:05:30.090><c> base</c><00:05:30.560><c> there</c><00:05:31.560><c> are</c><00:05:31.680><c> quite</c><00:05:31.860><c> a</c><00:05:31.889><c> few</c><00:05:32.009><c> benefits</c>

00:05:32.540 --> 00:05:32.550 align:start position:0%
Java base there are quite a few benefits
 

00:05:32.550 --> 00:05:35.269 align:start position:0%
Java base there are quite a few benefits
to<00:05:32.759><c> putting</c><00:05:32.940><c> code</c><00:05:33.180><c> in</c><00:05:33.300><c> modules</c><00:05:33.830><c> for</c><00:05:34.830><c> a</c><00:05:34.860><c> starts</c>

00:05:35.269 --> 00:05:35.279 align:start position:0%
to putting code in modules for a starts
 

00:05:35.279 --> 00:05:37.700 align:start position:0%
to putting code in modules for a starts
the<00:05:35.969><c> HelloWorld</c><00:05:36.419><c> module</c><00:05:36.779><c> can</c><00:05:37.110><c> be</c><00:05:37.139><c> run</c><00:05:37.469><c> with</c><00:05:37.680><c> a</c>

00:05:37.700 --> 00:05:37.710 align:start position:0%
the HelloWorld module can be run with a
 

00:05:37.710 --> 00:05:40.490 align:start position:0%
the HelloWorld module can be run with a
simple<00:05:38.190><c> Java</c><00:05:38.669><c> command</c><00:05:39.300><c> that</c><00:05:40.050><c> points</c><00:05:40.319><c> to</c><00:05:40.469><c> a</c>

00:05:40.490 --> 00:05:40.500 align:start position:0%
simple Java command that points to a
 

00:05:40.500 --> 00:05:43.939 align:start position:0%
simple Java command that points to a
directory<00:05:41.129><c> of</c><00:05:41.159><c> modules</c><00:05:41.669><c> the</c><00:05:42.210><c> minus</c><00:05:42.509><c> P</c><00:05:42.719><c> and</c><00:05:42.949><c> the</c>

00:05:43.939 --> 00:05:43.949 align:start position:0%
directory of modules the minus P and the
 

00:05:43.949 --> 00:05:47.059 align:start position:0%
directory of modules the minus P and the
module<00:05:44.310><c> to</c><00:05:44.460><c> be</c><00:05:44.580><c> run</c><00:05:44.759><c> the</c><00:05:45.330><c> minus</c><00:05:45.659><c> M</c><00:05:45.889><c> you</c><00:05:46.889><c> don't</c>

00:05:47.059 --> 00:05:47.069 align:start position:0%
module to be run the minus M you don't
 

00:05:47.069 --> 00:05:49.279 align:start position:0%
module to be run the minus M you don't
need<00:05:47.279><c> to</c><00:05:47.520><c> set</c><00:05:47.699><c> the</c><00:05:47.849><c> class</c><00:05:48.060><c> path</c><00:05:48.330><c> the</c><00:05:48.900><c> modules</c>

00:05:49.279 --> 00:05:49.289 align:start position:0%
need to set the class path the modules
 

00:05:49.289 --> 00:05:52.369 align:start position:0%
need to set the class path the modules
themselves<00:05:49.589><c> say</c><00:05:50.520><c> what</c><00:05:50.699><c> they</c><00:05:50.849><c> depend</c><00:05:51.180><c> on</c><00:05:51.330><c> JDK</c><00:05:52.169><c> 9</c>

00:05:52.369 --> 00:05:52.379 align:start position:0%
themselves say what they depend on JDK 9
 

00:05:52.379 --> 00:05:54.950 align:start position:0%
themselves say what they depend on JDK 9
checks<00:05:53.099><c> the</c><00:05:53.279><c> dependencies</c><00:05:53.879><c> both</c><00:05:54.509><c> when</c><00:05:54.930><c> you</c>

00:05:54.950 --> 00:05:54.960 align:start position:0%
checks the dependencies both when you
 

00:05:54.960 --> 00:05:59.119 align:start position:0%
checks the dependencies both when you
compile<00:05:55.589><c> and</c><00:05:55.979><c> when</c><00:05:56.669><c> you</c><00:05:56.819><c> run</c><00:05:57.469><c> it</c><00:05:58.469><c> checks</c><00:05:58.889><c> that</c>

00:05:59.119 --> 00:05:59.129 align:start position:0%
compile and when you run it checks that
 

00:05:59.129 --> 00:06:01.070 align:start position:0%
compile and when you run it checks that
every<00:05:59.580><c> module</c><00:05:59.759><c> that</c><00:06:00.120><c> is</c><00:06:00.240><c> required</c><00:06:00.719><c> is</c>

00:06:01.070 --> 00:06:01.080 align:start position:0%
every module that is required is
 

00:06:01.080 --> 00:06:03.649 align:start position:0%
every module that is required is
available<00:06:01.949><c> that's</c><00:06:02.639><c> a</c><00:06:02.789><c> big</c><00:06:02.939><c> improvement</c><00:06:03.509><c> over</c>

00:06:03.649 --> 00:06:03.659 align:start position:0%
available that's a big improvement over
 

00:06:03.659 --> 00:06:05.360 align:start position:0%
available that's a big improvement over
the<00:06:03.990><c> class</c><00:06:04.199><c> path</c><00:06:04.469><c> where</c><00:06:04.740><c> you</c><00:06:04.770><c> don't</c><00:06:05.039><c> discover</c>

00:06:05.360 --> 00:06:05.370 align:start position:0%
the class path where you don't discover
 

00:06:05.370 --> 00:06:09.079 align:start position:0%
the class path where you don't discover
missing<00:06:05.789><c> jars</c><00:06:06.060><c> until</c><00:06:06.599><c> later</c><00:06:07.669><c> it</c><00:06:08.669><c> checks</c><00:06:09.000><c> that</c>

00:06:09.079 --> 00:06:09.089 align:start position:0%
missing jars until later it checks that
 

00:06:09.089 --> 00:06:11.480 align:start position:0%
missing jars until later it checks that
modules<00:06:09.569><c> don't</c><00:06:09.930><c> require</c><00:06:10.409><c> each</c><00:06:10.740><c> other</c><00:06:11.069><c> in</c><00:06:11.339><c> a</c>

00:06:11.480 --> 00:06:11.490 align:start position:0%
modules don't require each other in a
 

00:06:11.490 --> 00:06:14.240 align:start position:0%
modules don't require each other in a
cycle<00:06:12.080><c> cycles</c><00:06:13.080><c> lead</c><00:06:13.319><c> to</c><00:06:13.500><c> code</c><00:06:13.710><c> that</c><00:06:13.889><c> is</c><00:06:14.009><c> hard</c>

00:06:14.240 --> 00:06:14.250 align:start position:0%
cycle cycles lead to code that is hard
 

00:06:14.250 --> 00:06:17.929 align:start position:0%
cycle cycles lead to code that is hard
to<00:06:14.339><c> understand</c><00:06:14.969><c> and</c><00:06:15.210><c> maintain</c><00:06:16.430><c> finally</c><00:06:17.430><c> it</c>

00:06:17.929 --> 00:06:17.939 align:start position:0%
to understand and maintain finally it
 

00:06:17.939 --> 00:06:20.240 align:start position:0%
to understand and maintain finally it
checks<00:06:18.300><c> that</c><00:06:18.449><c> a</c><00:06:18.509><c> package</c><00:06:18.900><c> is</c><00:06:19.020><c> exported</c><00:06:19.770><c> from</c>

00:06:20.240 --> 00:06:20.250 align:start position:0%
checks that a package is exported from
 

00:06:20.250 --> 00:06:23.059 align:start position:0%
checks that a package is exported from
exactly<00:06:20.699><c> one</c><00:06:21.060><c> other</c><00:06:21.330><c> module</c><00:06:21.800><c> this</c><00:06:22.800><c> means</c>

00:06:23.059 --> 00:06:23.069 align:start position:0%
exactly one other module this means
 

00:06:23.069 --> 00:06:25.429 align:start position:0%
exactly one other module this means
there<00:06:23.279><c> are</c><00:06:23.400><c> no</c><00:06:23.550><c> split</c><00:06:24.089><c> packages</c><00:06:24.629><c> split</c>

00:06:25.429 --> 00:06:25.439 align:start position:0%
there are no split packages split
 

00:06:25.439 --> 00:06:27.019 align:start position:0%
there are no split packages split
packages<00:06:25.919><c> are</c><00:06:26.039><c> the</c><00:06:26.129><c> mess</c><00:06:26.400><c> you</c><00:06:26.610><c> get</c><00:06:26.759><c> on</c><00:06:26.939><c> the</c>

00:06:27.019 --> 00:06:27.029 align:start position:0%
packages are the mess you get on the
 

00:06:27.029 --> 00:06:29.360 align:start position:0%
packages are the mess you get on the
class<00:06:27.240><c> path</c><00:06:27.539><c> when</c><00:06:27.839><c> two</c><00:06:28.139><c> jars</c><00:06:28.529><c> contain</c><00:06:29.189><c> the</c>

00:06:29.360 --> 00:06:29.370 align:start position:0%
class path when two jars contain the
 

00:06:29.370 --> 00:06:31.640 align:start position:0%
class path when two jars contain the
same<00:06:29.580><c> package</c><00:06:29.879><c> and</c><00:06:30.330><c> you</c><00:06:30.689><c> load</c><00:06:30.870><c> some</c><00:06:31.169><c> classes</c>

00:06:31.640 --> 00:06:31.650 align:start position:0%
same package and you load some classes
 

00:06:31.650 --> 00:06:33.589 align:start position:0%
same package and you load some classes
from<00:06:31.830><c> one</c><00:06:32.039><c> jar</c><00:06:32.279><c> and</c><00:06:32.520><c> other</c><00:06:32.759><c> classes</c><00:06:33.270><c> from</c><00:06:33.479><c> the</c>

00:06:33.589 --> 00:06:33.599 align:start position:0%
from one jar and other classes from the
 

00:06:33.599 --> 00:06:35.930 align:start position:0%
from one jar and other classes from the
other<00:06:33.750><c> jar</c><00:06:34.050><c> avoiding</c><00:06:35.009><c> split</c><00:06:35.250><c> packages</c><00:06:35.759><c> is</c>

00:06:35.930 --> 00:06:35.940 align:start position:0%
other jar avoiding split packages is
 

00:06:35.940 --> 00:06:39.170 align:start position:0%
other jar avoiding split packages is
also<00:06:36.509><c> a</c><00:06:36.539><c> win</c><00:06:36.839><c> for</c><00:06:37.139><c> performance</c><00:06:37.649><c> because</c><00:06:38.370><c> JDK</c><00:06:38.940><c> 9</c>

00:06:39.170 --> 00:06:39.180 align:start position:0%
also a win for performance because JDK 9
 

00:06:39.180 --> 00:06:41.189 align:start position:0%
also a win for performance because JDK 9
knows<00:06:39.509><c> exactly</c><00:06:39.870><c> where</c><00:06:40.289><c> each</c><00:06:40.319><c> package</c>

00:06:41.189 --> 00:06:41.199 align:start position:0%
knows exactly where each package
 

00:06:41.199 --> 00:06:43.499 align:start position:0%
knows exactly where each package
which<00:06:41.949><c> is</c><00:06:42.099><c> much</c><00:06:42.219><c> better</c><00:06:42.490><c> than</c><00:06:42.729><c> repeatedly</c>

00:06:43.499 --> 00:06:43.509 align:start position:0%
which is much better than repeatedly
 

00:06:43.509 --> 00:06:45.510 align:start position:0%
which is much better than repeatedly
scanning<00:06:44.020><c> every</c><00:06:44.469><c> jar</c><00:06:44.710><c> on</c><00:06:44.830><c> the</c><00:06:44.979><c> classpath</c>

00:06:45.510 --> 00:06:45.520 align:start position:0%
scanning every jar on the classpath
 

00:06:45.520 --> 00:06:48.480 align:start position:0%
scanning every jar on the classpath
looking<00:06:46.180><c> for</c><00:06:46.360><c> a</c><00:06:46.389><c> needed</c><00:06:46.780><c> class</c><00:06:47.340><c> by</c><00:06:48.340><c> the</c><00:06:48.400><c> way</c>

00:06:48.480 --> 00:06:48.490 align:start position:0%
looking for a needed class by the way
 

00:06:48.490 --> 00:06:51.600 align:start position:0%
looking for a needed class by the way
modules<00:06:49.449><c> are</c><00:06:49.599><c> not</c><00:06:49.719><c> mandatory</c><00:06:50.199><c> you</c><00:06:50.710><c> can</c><00:06:51.340><c> keep</c>

00:06:51.600 --> 00:06:51.610 align:start position:0%
modules are not mandatory you can keep
 

00:06:51.610 --> 00:06:54.450 align:start position:0%
modules are not mandatory you can keep
putting<00:06:51.969><c> jars</c><00:06:52.360><c> on</c><00:06:52.569><c> the</c><00:06:52.689><c> classpath</c><00:06:53.229><c> and</c><00:06:53.529><c> jdk</c><00:06:54.249><c> 9</c>

00:06:54.450 --> 00:06:54.460 align:start position:0%
putting jars on the classpath and jdk 9
 

00:06:54.460 --> 00:06:57.059 align:start position:0%
putting jars on the classpath and jdk 9
supports<00:06:55.090><c> a</c><00:06:55.240><c> gradual</c><00:06:55.810><c> migration</c><00:06:55.990><c> to</c><00:06:56.680><c> modules</c>

00:06:57.059 --> 00:06:57.069 align:start position:0%
supports a gradual migration to modules
 

00:06:57.069 --> 00:06:59.279 align:start position:0%
supports a gradual migration to modules
so<00:06:57.819><c> that</c><00:06:57.849><c> you</c><00:06:58.150><c> can</c><00:06:58.360><c> choose</c><00:06:58.629><c> the</c><00:06:58.810><c> trade-off</c><00:06:59.259><c> of</c>

00:06:59.279 --> 00:06:59.289 align:start position:0%
so that you can choose the trade-off of
 

00:06:59.289 --> 00:07:01.260 align:start position:0%
so that you can choose the trade-off of
how<00:06:59.680><c> much</c><00:06:59.889><c> work</c><00:07:00.189><c> you're</c><00:07:00.490><c> willing</c><00:07:00.819><c> to</c><00:07:00.849><c> do</c><00:07:01.120><c> to</c>

00:07:01.260 --> 00:07:01.270 align:start position:0%
how much work you're willing to do to
 

00:07:01.270 --> 00:07:03.929 align:start position:0%
how much work you're willing to do to
modularize<00:07:01.860><c> versus</c><00:07:02.860><c> the</c><00:07:03.340><c> benefits</c><00:07:03.789><c> of</c>

00:07:03.929 --> 00:07:03.939 align:start position:0%
modularize versus the benefits of
 

00:07:03.939 --> 00:07:06.899 align:start position:0%
modularize versus the benefits of
modules<00:07:04.650><c> let's</c><00:07:05.650><c> turn</c><00:07:05.949><c> our</c><00:07:06.099><c> attention</c><00:07:06.129><c> to</c><00:07:06.759><c> the</c>

00:07:06.899 --> 00:07:06.909 align:start position:0%
modules let's turn our attention to the
 

00:07:06.909 --> 00:07:10.890 align:start position:0%
modules let's turn our attention to the
JDK<00:07:08.009><c> 20</c><00:07:09.009><c> years</c><00:07:09.189><c> ago</c><00:07:09.340><c> the</c><00:07:09.789><c> Java</c><00:07:10.090><c> platform</c><00:07:10.330><c> was</c>

00:07:10.890 --> 00:07:10.900 align:start position:0%
JDK 20 years ago the Java platform was
 

00:07:10.900 --> 00:07:13.529 align:start position:0%
JDK 20 years ago the Java platform was
small<00:07:11.199><c> just</c><00:07:11.590><c> a</c><00:07:11.710><c> few</c><00:07:11.889><c> hundred</c><00:07:11.979><c> classes</c><00:07:12.580><c> and</c><00:07:12.819><c> the</c>

00:07:13.529 --> 00:07:13.539 align:start position:0%
small just a few hundred classes and the
 

00:07:13.539 --> 00:07:15.980 align:start position:0%
small just a few hundred classes and the
organization<00:07:14.259><c> of</c><00:07:14.349><c> the</c><00:07:14.439><c> JDK</c><00:07:14.620><c> wasn't</c><00:07:15.490><c> a</c><00:07:15.550><c> problem</c>

00:07:15.980 --> 00:07:15.990 align:start position:0%
organization of the JDK wasn't a problem
 

00:07:15.990 --> 00:07:18.420 align:start position:0%
organization of the JDK wasn't a problem
but<00:07:16.990><c> every</c><00:07:17.199><c> year</c><00:07:17.289><c> the</c><00:07:17.469><c> platform</c><00:07:17.979><c> grew</c><00:07:18.159><c> bigger</c>

00:07:18.420 --> 00:07:18.430 align:start position:0%
but every year the platform grew bigger
 

00:07:18.430 --> 00:07:19.950 align:start position:0%
but every year the platform grew bigger
and<00:07:18.580><c> now</c><00:07:18.879><c> it's</c><00:07:19.060><c> tens</c><00:07:19.300><c> of</c><00:07:19.449><c> thousands</c><00:07:19.900><c> of</c>

00:07:19.950 --> 00:07:19.960 align:start position:0%
and now it's tens of thousands of
 

00:07:19.960 --> 00:07:22.920 align:start position:0%
and now it's tens of thousands of
classes<00:07:20.439><c> the</c><00:07:21.129><c> JDK</c><00:07:21.550><c> is</c><00:07:21.789><c> huge</c><00:07:22.180><c> and</c><00:07:22.389><c> worse</c><00:07:22.599><c> its</c>

00:07:22.920 --> 00:07:22.930 align:start position:0%
classes the JDK is huge and worse its
 

00:07:22.930 --> 00:07:26.550 align:start position:0%
classes the JDK is huge and worse its
monolithic<00:07:24.240><c> in</c><00:07:25.240><c> reality</c><00:07:25.810><c> the</c><00:07:26.050><c> Java</c><00:07:26.259><c> platform</c>

00:07:26.550 --> 00:07:26.560 align:start position:0%
monolithic in reality the Java platform
 

00:07:26.560 --> 00:07:28.890 align:start position:0%
monolithic in reality the Java platform
is<00:07:26.949><c> not</c><00:07:27.129><c> one</c><00:07:27.430><c> thing</c><00:07:27.759><c> it's</c><00:07:28.060><c> more</c><00:07:28.300><c> like</c><00:07:28.479><c> 25</c>

00:07:28.890 --> 00:07:28.900 align:start position:0%
is not one thing it's more like 25
 

00:07:28.900 --> 00:07:31.679 align:start position:0%
is not one thing it's more like 25
separate<00:07:29.529><c> frameworks</c><00:07:30.120><c> including</c><00:07:31.120><c> the</c><00:07:31.300><c> swing</c>

00:07:31.679 --> 00:07:31.689 align:start position:0%
separate frameworks including the swing
 

00:07:31.689 --> 00:07:34.200 align:start position:0%
separate frameworks including the swing
UI<00:07:31.870><c> framework</c><00:07:32.469><c> a</c><00:07:32.800><c> crypto</c><00:07:33.460><c> framework</c><00:07:33.939><c> a</c>

00:07:34.200 --> 00:07:34.210 align:start position:0%
UI framework a crypto framework a
 

00:07:34.210 --> 00:07:36.119 align:start position:0%
UI framework a crypto framework a
scripting<00:07:34.689><c> framework</c><00:07:34.839><c> multiple</c><00:07:35.710><c> XML</c>

00:07:36.119 --> 00:07:36.129 align:start position:0%
scripting framework multiple XML
 

00:07:36.129 --> 00:07:38.579 align:start position:0%
scripting framework multiple XML
processing<00:07:36.550><c> frameworks</c><00:07:37.029><c> and</c><00:07:37.330><c> so</c><00:07:37.479><c> on</c><00:07:37.659><c> there's</c>

00:07:38.579 --> 00:07:38.589 align:start position:0%
processing frameworks and so on there's
 

00:07:38.589 --> 00:07:40.379 align:start position:0%
processing frameworks and so on there's
no<00:07:38.710><c> reason</c><00:07:39.099><c> these</c><00:07:39.279><c> separate</c><00:07:39.699><c> frameworks</c><00:07:40.150><c> have</c>

00:07:40.379 --> 00:07:40.389 align:start position:0%
no reason these separate frameworks have
 

00:07:40.389 --> 00:07:42.409 align:start position:0%
no reason these separate frameworks have
to<00:07:40.539><c> be</c><00:07:40.629><c> tightly</c><00:07:40.900><c> coupled</c><00:07:41.199><c> in</c><00:07:41.499><c> one</c><00:07:41.680><c> download</c><00:07:42.129><c> in</c>

00:07:42.409 --> 00:07:42.419 align:start position:0%
to be tightly coupled in one download in
 

00:07:42.419 --> 00:07:45.659 align:start position:0%
to be tightly coupled in one download in
fact<00:07:43.419><c> it's</c><00:07:43.839><c> an</c><00:07:44.020><c> impediment</c><00:07:44.409><c> in</c><00:07:44.949><c> developing</c>

00:07:45.659 --> 00:07:45.669 align:start position:0%
fact it's an impediment in developing
 

00:07:45.669 --> 00:07:49.110 align:start position:0%
fact it's an impediment in developing
the<00:07:45.819><c> JDK</c><00:07:46.240><c> the</c><00:07:46.680><c> overly</c><00:07:47.680><c> tight</c><00:07:47.919><c> coupling</c><00:07:48.219><c> raises</c>

00:07:49.110 --> 00:07:49.120 align:start position:0%
the JDK the overly tight coupling raises
 

00:07:49.120 --> 00:07:51.420 align:start position:0%
the JDK the overly tight coupling raises
development<00:07:49.839><c> and</c><00:07:50.050><c> testing</c><00:07:50.469><c> costs</c><00:07:50.680><c> which</c>

00:07:51.420 --> 00:07:51.430 align:start position:0%
development and testing costs which
 

00:07:51.430 --> 00:07:53.719 align:start position:0%
development and testing costs which
turns<00:07:51.699><c> into</c><00:07:51.909><c> slower</c><00:07:52.419><c> platform</c><00:07:53.050><c> evolution</c>

00:07:53.719 --> 00:07:53.729 align:start position:0%
turns into slower platform evolution
 

00:07:53.729 --> 00:07:56.700 align:start position:0%
turns into slower platform evolution
plus<00:07:54.729><c> the</c><00:07:55.449><c> larger</c><00:07:55.839><c> the</c><00:07:55.960><c> surface</c><00:07:56.229><c> of</c><00:07:56.560><c> your</c>

00:07:56.700 --> 00:07:56.710 align:start position:0%
plus the larger the surface of your
 

00:07:56.710 --> 00:07:58.709 align:start position:0%
plus the larger the surface of your
platform<00:07:57.219><c> the</c><00:07:57.789><c> more</c><00:07:57.969><c> difficult</c><00:07:58.180><c> it</c><00:07:58.539><c> is</c><00:07:58.689><c> to</c>

00:07:58.709 --> 00:07:58.719 align:start position:0%
platform the more difficult it is to
 

00:07:58.719 --> 00:08:01.950 align:start position:0%
platform the more difficult it is to
secure<00:07:59.229><c> and</c><00:07:59.879><c> it's</c><00:08:00.879><c> an</c><00:08:00.969><c> impediment</c><00:08:01.210><c> to</c><00:08:01.629><c> a</c><00:08:01.779><c> lot</c>

00:08:01.950 --> 00:08:01.960 align:start position:0%
secure and it's an impediment to a lot
 

00:08:01.960 --> 00:08:03.540 align:start position:0%
secure and it's an impediment to a lot
of<00:08:01.990><c> users</c><00:08:02.229><c> both</c><00:08:02.680><c> those</c><00:08:02.889><c> who</c><00:08:02.919><c> want</c><00:08:03.279><c> to</c><00:08:03.339><c> run</c>

00:08:03.540 --> 00:08:03.550 align:start position:0%
of users both those who want to run
 

00:08:03.550 --> 00:08:04.980 align:start position:0%
of users both those who want to run
their<00:08:03.729><c> applications</c><00:08:03.819><c> on</c><00:08:04.509><c> smaller</c><00:08:04.839><c> devices</c>

00:08:04.980 --> 00:08:04.990 align:start position:0%
their applications on smaller devices
 

00:08:04.990 --> 00:08:07.920 align:start position:0%
their applications on smaller devices
and<00:08:05.710><c> those</c><00:08:06.250><c> who</c><00:08:06.460><c> want</c><00:08:06.639><c> to</c><00:08:06.759><c> run</c><00:08:06.939><c> more</c><00:08:07.210><c> instances</c>

00:08:07.920 --> 00:08:07.930 align:start position:0%
and those who want to run more instances
 

00:08:07.930 --> 00:08:09.839 align:start position:0%
and those who want to run more instances
of<00:08:08.110><c> their</c><00:08:08.259><c> of</c><00:08:08.439><c> their</c><00:08:08.589><c> application</c><00:08:09.189><c> on</c><00:08:09.339><c> large</c>

00:08:09.839 --> 00:08:09.849 align:start position:0%
of their of their application on large
 

00:08:09.849 --> 00:08:12.629 align:start position:0%
of their of their application on large
systems<00:08:10.319><c> even</c><00:08:11.319><c> if</c><00:08:11.409><c> you</c><00:08:11.529><c> only</c><00:08:11.740><c> wanted</c><00:08:12.189><c> a</c><00:08:12.399><c> part</c>

00:08:12.629 --> 00:08:12.639 align:start position:0%
systems even if you only wanted a part
 

00:08:12.639 --> 00:08:14.600 align:start position:0%
systems even if you only wanted a part
of<00:08:12.759><c> the</c><00:08:12.849><c> JDK</c><00:08:13.060><c> you've</c><00:08:13.719><c> had</c><00:08:13.899><c> to</c><00:08:14.020><c> take</c><00:08:14.169><c> all</c><00:08:14.349><c> of</c><00:08:14.379><c> it</c>

00:08:14.600 --> 00:08:14.610 align:start position:0%
of the JDK you've had to take all of it
 

00:08:14.610 --> 00:08:18.779 align:start position:0%
of the JDK you've had to take all of it
that<00:08:15.610><c> all</c><00:08:15.759><c> changes</c><00:08:16.270><c> in</c><00:08:16.479><c> JDK</c><00:08:16.899><c> 9</c><00:08:17.520><c> we've</c><00:08:18.520><c> taken</c>

00:08:18.779 --> 00:08:18.789 align:start position:0%
that all changes in JDK 9 we've taken
 

00:08:18.789 --> 00:08:21.510 align:start position:0%
that all changes in JDK 9 we've taken
the<00:08:19.060><c> monolithic</c><00:08:19.539><c> JDK</c><00:08:20.169><c> and</c><00:08:20.379><c> broken</c><00:08:21.129><c> it</c><00:08:21.219><c> up</c><00:08:21.339><c> into</c>

00:08:21.510 --> 00:08:21.520 align:start position:0%
the monolithic JDK and broken it up into
 

00:08:21.520 --> 00:08:24.269 align:start position:0%
the monolithic JDK and broken it up into
a<00:08:21.699><c> few</c><00:08:21.969><c> dozen</c><00:08:22.300><c> modules</c><00:08:22.860><c> some</c><00:08:23.860><c> of</c><00:08:23.979><c> these</c><00:08:24.069><c> are</c>

00:08:24.269 --> 00:08:24.279 align:start position:0%
a few dozen modules some of these are
 

00:08:24.279 --> 00:08:26.760 align:start position:0%
a few dozen modules some of these are
part<00:08:24.460><c> of</c><00:08:24.580><c> the</c><00:08:24.759><c> Java</c><00:08:25.000><c> SE</c><00:08:25.389><c> specification</c><00:08:26.199><c> some</c>

00:08:26.760 --> 00:08:26.770 align:start position:0%
part of the Java SE specification some
 

00:08:26.770 --> 00:08:29.070 align:start position:0%
part of the Java SE specification some
are<00:08:27.009><c> just</c><00:08:27.399><c> part</c><00:08:27.610><c> of</c><00:08:27.789><c> the</c><00:08:27.909><c> JDK</c><00:08:28.089><c> implementation</c>

00:08:29.070 --> 00:08:29.080 align:start position:0%
are just part of the JDK implementation
 

00:08:29.080 --> 00:08:33.120 align:start position:0%
are just part of the JDK implementation
here's<00:08:29.649><c> a</c><00:08:29.710><c> graph</c><00:08:29.919><c> of</c><00:08:30.189><c> the</c><00:08:30.460><c> Java</c><00:08:30.729><c> SE</c><00:08:31.210><c> modules</c><00:08:32.130><c> at</c>

00:08:33.120 --> 00:08:33.130 align:start position:0%
here's a graph of the Java SE modules at
 

00:08:33.130 --> 00:08:36.029 align:start position:0%
here's a graph of the Java SE modules at
the<00:08:33.399><c> bottom</c><00:08:33.729><c> there's</c><00:08:34.690><c> Java</c><00:08:34.930><c> base</c><00:08:35.169><c> which</c>

00:08:36.029 --> 00:08:36.039 align:start position:0%
the bottom there's Java base which
 

00:08:36.039 --> 00:08:38.250 align:start position:0%
the bottom there's Java base which
everything<00:08:36.550><c> depends</c><00:08:36.940><c> on</c><00:08:37.060><c> and</c><00:08:37.240><c> which</c><00:08:37.839><c> depends</c>

00:08:38.250 --> 00:08:38.260 align:start position:0%
everything depends on and which depends
 

00:08:38.260 --> 00:08:41.430 align:start position:0%
everything depends on and which depends
on<00:08:38.320><c> nothing</c><00:08:38.560><c> itself</c><00:08:39.870><c> we've</c><00:08:40.870><c> broken</c><00:08:41.140><c> out</c><00:08:41.409><c> the</c>

00:08:41.430 --> 00:08:41.440 align:start position:0%
on nothing itself we've broken out the
 

00:08:41.440 --> 00:08:43.259 align:start position:0%
on nothing itself we've broken out the
various<00:08:41.979><c> frameworks</c><00:08:42.519><c> into</c><00:08:42.820><c> their</c><00:08:43.120><c> own</c>

00:08:43.259 --> 00:08:43.269 align:start position:0%
various frameworks into their own
 

00:08:43.269 --> 00:08:46.530 align:start position:0%
various frameworks into their own
modules<00:08:44.130><c> instrumentation</c><00:08:45.130><c> logging</c><00:08:45.880><c> XML</c>

00:08:46.530 --> 00:08:46.540 align:start position:0%
modules instrumentation logging XML
 

00:08:46.540 --> 00:08:49.259 align:start position:0%
modules instrumentation logging XML
scripting<00:08:47.199><c> desktop</c><00:08:47.829><c> which</c><00:08:48.550><c> you</c><00:08:48.730><c> can</c><00:08:48.910><c> require</c>

00:08:49.259 --> 00:08:49.269 align:start position:0%
scripting desktop which you can require
 

00:08:49.269 --> 00:08:53.690 align:start position:0%
scripting desktop which you can require
or<00:08:49.630><c> not</c><00:08:50.230><c> require</c><00:08:50.620><c> as</c><00:08:50.829><c> you'll</c><00:08:51.399><c> need</c><00:08:51.550><c> to</c><00:08:51.640><c> dictate</c>

00:08:53.690 --> 00:08:53.700 align:start position:0%
or not require as you'll need to dictate
 

00:08:53.700 --> 00:08:56.120 align:start position:0%
or not require as you'll need to dictate
there's<00:08:53.850><c> a</c><00:08:53.880><c> Java</c><00:08:54.510><c> SE</c><00:08:54.960><c> module</c><00:08:55.320><c> which</c><00:08:55.710><c> has</c><00:08:55.920><c> no</c>

00:08:56.120 --> 00:08:56.130 align:start position:0%
there's a Java SE module which has no
 

00:08:56.130 --> 00:08:58.430 align:start position:0%
there's a Java SE module which has no
actual<00:08:56.820><c> code</c><00:08:57.120><c> in</c><00:08:57.390><c> it</c><00:08:57.540><c> but</c><00:08:58.080><c> just</c><00:08:58.290><c> has</c>

00:08:58.430 --> 00:08:58.440 align:start position:0%
actual code in it but just has
 

00:08:58.440 --> 00:09:01.160 align:start position:0%
actual code in it but just has
dependences<00:08:59.100><c> so</c><00:08:59.820><c> you</c><00:08:59.880><c> can</c><00:09:00.090><c> say</c><00:09:00.300><c> requires</c><00:09:00.810><c> java</c>

00:09:01.160 --> 00:09:01.170 align:start position:0%
dependences so you can say requires java
 

00:09:01.170 --> 00:09:03.170 align:start position:0%
dependences so you can say requires java
SE<00:09:01.560><c> and</c><00:09:01.800><c> be</c><00:09:02.070><c> guaranteed</c><00:09:02.610><c> to</c><00:09:02.640><c> have</c><00:09:02.910><c> all</c><00:09:03.030><c> these</c>

00:09:03.170 --> 00:09:03.180 align:start position:0%
SE and be guaranteed to have all these
 

00:09:03.180 --> 00:09:05.330 align:start position:0%
SE and be guaranteed to have all these
modules<00:09:03.390><c> available</c><00:09:03.950><c> it's</c><00:09:04.950><c> worth</c><00:09:05.130><c> mentioning</c>

00:09:05.330 --> 00:09:05.340 align:start position:0%
modules available it's worth mentioning
 

00:09:05.340 --> 00:09:07.880 align:start position:0%
modules available it's worth mentioning
that<00:09:05.730><c> merely</c><00:09:06.540><c> finding</c><00:09:07.260><c> these</c><00:09:07.470><c> module</c>

00:09:07.880 --> 00:09:07.890 align:start position:0%
that merely finding these module
 

00:09:07.890 --> 00:09:09.680 align:start position:0%
that merely finding these module
boundaries<00:09:08.460><c> which</c><00:09:08.730><c> might</c><00:09:08.970><c> be</c><00:09:09.090><c> obvious</c><00:09:09.240><c> in</c>

00:09:09.680 --> 00:09:09.690 align:start position:0%
boundaries which might be obvious in
 

00:09:09.690 --> 00:09:12.050 align:start position:0%
boundaries which might be obvious in
hindsight<00:09:09.860><c> was</c><00:09:10.860><c> a</c><00:09:10.890><c> tremendous</c><00:09:11.490><c> engineering</c>

00:09:12.050 --> 00:09:12.060 align:start position:0%
hindsight was a tremendous engineering
 

00:09:12.060 --> 00:09:14.720 align:start position:0%
hindsight was a tremendous engineering
effort<00:09:12.360><c> you'll</c><00:09:13.290><c> find</c><00:09:13.590><c> in</c><00:09:13.740><c> your</c><00:09:13.770><c> own</c><00:09:14.010><c> code</c><00:09:14.280><c> that</c>

00:09:14.720 --> 00:09:14.730 align:start position:0%
effort you'll find in your own code that
 

00:09:14.730 --> 00:09:17.450 align:start position:0%
effort you'll find in your own code that
decoupling<00:09:15.660><c> a</c><00:09:15.870><c> monolith</c><00:09:16.290><c> is</c><00:09:16.620><c> much</c><00:09:17.160><c> harder</c>

00:09:17.450 --> 00:09:17.460 align:start position:0%
decoupling a monolith is much harder
 

00:09:17.460 --> 00:09:19.820 align:start position:0%
decoupling a monolith is much harder
than<00:09:17.820><c> building</c><00:09:18.540><c> a</c><00:09:18.630><c> loosely</c><00:09:18.870><c> coupled</c><00:09:19.440><c> system</c>

00:09:19.820 --> 00:09:19.830 align:start position:0%
than building a loosely coupled system
 

00:09:19.830 --> 00:09:20.780 align:start position:0%
than building a loosely coupled system
from<00:09:20.100><c> the</c><00:09:20.250><c> beginning</c>

00:09:20.780 --> 00:09:20.790 align:start position:0%
from the beginning
 

00:09:20.790 --> 00:09:23.780 align:start position:0%
from the beginning
the<00:09:21.720><c> good</c><00:09:21.900><c> news</c><00:09:22.140><c> going</c><00:09:22.470><c> forward</c><00:09:22.890><c> is</c><00:09:23.040><c> that</c><00:09:23.460><c> the</c>

00:09:23.780 --> 00:09:23.790 align:start position:0%
the good news going forward is that the
 

00:09:23.790 --> 00:09:25.820 align:start position:0%
the good news going forward is that the
discipline<00:09:24.300><c> imposed</c><00:09:24.780><c> by</c><00:09:25.020><c> modules</c><00:09:25.470><c> will</c>

00:09:25.820 --> 00:09:25.830 align:start position:0%
discipline imposed by modules will
 

00:09:25.830 --> 00:09:27.950 align:start position:0%
discipline imposed by modules will
prevent<00:09:26.130><c> all</c><00:09:26.400><c> of</c><00:09:26.700><c> us</c><00:09:26.850><c> from</c><00:09:27.300><c> accidentally</c>

00:09:27.950 --> 00:09:27.960 align:start position:0%
prevent all of us from accidentally
 

00:09:27.960 --> 00:09:30.770 align:start position:0%
prevent all of us from accidentally
recreating<00:09:28.560><c> a</c><00:09:29.040><c> monolith</c><00:09:29.460><c> I'd</c><00:09:30.360><c> like</c><00:09:30.630><c> to</c>

00:09:30.770 --> 00:09:30.780 align:start position:0%
recreating a monolith I'd like to
 

00:09:30.780 --> 00:09:32.840 align:start position:0%
recreating a monolith I'd like to
quickly<00:09:31.050><c> review</c><00:09:31.560><c> the</c><00:09:31.620><c> expectations</c><00:09:32.610><c> of</c>

00:09:32.840 --> 00:09:32.850 align:start position:0%
quickly review the expectations of
 

00:09:32.850 --> 00:09:36.800 align:start position:0%
quickly review the expectations of
compatibility<00:09:33.510><c> from</c><00:09:34.080><c> JDK</c><00:09:34.440><c> 9</c><00:09:35.180><c> first</c><00:09:36.180><c> up</c><00:09:36.420><c> there</c>

00:09:36.800 --> 00:09:36.810 align:start position:0%
compatibility from JDK 9 first up there
 

00:09:36.810 --> 00:09:39.050 align:start position:0%
compatibility from JDK 9 first up there
are<00:09:36.990><c> various</c><00:09:37.470><c> technologies</c><00:09:38.130><c> from</c><00:09:38.550><c> Java</c><00:09:38.790><c> EE</c>

00:09:39.050 --> 00:09:39.060 align:start position:0%
are various technologies from Java EE
 

00:09:39.060 --> 00:09:42.590 align:start position:0%
are various technologies from Java EE
that<00:09:39.990><c> ship</c><00:09:40.290><c> in</c><00:09:40.500><c> the</c><00:09:40.740><c> JDK</c><00:09:41.220><c> as</c><00:09:41.460><c> well</c><00:09:42.060><c> as</c><00:09:42.300><c> in</c><00:09:42.450><c> app</c>

00:09:42.590 --> 00:09:42.600 align:start position:0%
that ship in the JDK as well as in app
 

00:09:42.600 --> 00:09:45.920 align:start position:0%
that ship in the JDK as well as in app
servers<00:09:43.100><c> the</c><00:09:44.100><c> list</c><00:09:44.310><c> of</c><00:09:44.490><c> Java</c><00:09:44.730><c> EE</c><00:09:45.030><c> modules</c><00:09:45.690><c> in</c>

00:09:45.920 --> 00:09:45.930 align:start position:0%
servers the list of Java EE modules in
 

00:09:45.930 --> 00:09:50.990 align:start position:0%
servers the list of Java EE modules in
JDK<00:09:46.590><c> 9</c><00:09:46.800><c> includes</c><00:09:47.640><c> Cober</c><00:09:48.120><c> Jack's</c><00:09:48.930><c> B</c><00:09:49.250><c> jax-ws</c><00:09:50.250><c> and</c>

00:09:50.990 --> 00:09:51.000 align:start position:0%
JDK 9 includes Cober Jack's B jax-ws and
 

00:09:51.000 --> 00:09:54.460 align:start position:0%
JDK 9 includes Cober Jack's B jax-ws and
common<00:09:51.720><c> annotations</c><00:09:52.610><c> these</c><00:09:53.610><c> modules</c><00:09:54.180><c> are</c>

00:09:54.460 --> 00:09:54.470 align:start position:0%
common annotations these modules are
 

00:09:54.470 --> 00:09:57.650 align:start position:0%
common annotations these modules are
deprecated<00:09:55.470><c> in</c><00:09:55.620><c> JDK</c><00:09:56.340><c> 9</c><00:09:56.550><c> and</c><00:09:56.820><c> will</c><00:09:57.120><c> be</c><00:09:57.240><c> removed</c>

00:09:57.650 --> 00:09:57.660 align:start position:0%
deprecated in JDK 9 and will be removed
 

00:09:57.660 --> 00:10:01.100 align:start position:0%
deprecated in JDK 9 and will be removed
in<00:09:57.990><c> a</c><00:09:58.080><c> future</c><00:09:58.470><c> release</c><00:09:59.150><c> because</c><00:10:00.150><c> of</c><00:10:00.330><c> this</c><00:10:00.450><c> they</c>

00:10:01.100 --> 00:10:01.110 align:start position:0%
in a future release because of this they
 

00:10:01.110 --> 00:10:03.940 align:start position:0%
in a future release because of this they
are<00:10:01.260><c> disabled</c><00:10:01.920><c> by</c><00:10:02.160><c> default</c><00:10:02.220><c> in</c><00:10:02.790><c> JDK</c><00:10:03.390><c> 9</c><00:10:03.570><c> if</c>

00:10:03.940 --> 00:10:03.950 align:start position:0%
are disabled by default in JDK 9 if
 

00:10:03.950 --> 00:10:06.440 align:start position:0%
are disabled by default in JDK 9 if
you're<00:10:04.950><c> running</c><00:10:05.100><c> code</c><00:10:05.400><c> on</c><00:10:05.520><c> the</c><00:10:05.610><c> classpath</c><00:10:06.090><c> you</c>

00:10:06.440 --> 00:10:06.450 align:start position:0%
you're running code on the classpath you
 

00:10:06.450 --> 00:10:09.110 align:start position:0%
you're running code on the classpath you
may<00:10:06.660><c> need</c><00:10:06.840><c> to</c><00:10:06.990><c> use</c><00:10:07.020><c> the</c><00:10:07.260><c> add</c><00:10:07.680><c> modules</c><00:10:08.460><c> command</c>

00:10:09.110 --> 00:10:09.120 align:start position:0%
may need to use the add modules command
 

00:10:09.120 --> 00:10:13.240 align:start position:0%
may need to use the add modules command
line<00:10:09.360><c> flag</c><00:10:09.660><c> to</c><00:10:10.380><c> enable</c><00:10:10.830><c> the</c><00:10:11.100><c> Java</c><00:10:11.340><c> EE</c><00:10:11.580><c> modules</c>

00:10:13.240 --> 00:10:13.250 align:start position:0%
line flag to enable the Java EE modules
 

00:10:13.250 --> 00:10:17.000 align:start position:0%
line flag to enable the Java EE modules
second<00:10:14.250><c> a</c><00:10:14.490><c> lot</c><00:10:15.300><c> of</c><00:10:15.450><c> tools</c><00:10:15.720><c> and</c><00:10:15.900><c> libraries</c><00:10:16.080><c> try</c>

00:10:17.000 --> 00:10:17.010 align:start position:0%
second a lot of tools and libraries try
 

00:10:17.010 --> 00:10:19.850 align:start position:0%
second a lot of tools and libraries try
to<00:10:17.070><c> access</c><00:10:17.640><c> parts</c><00:10:17.910><c> of</c><00:10:18.240><c> the</c><00:10:18.360><c> JDK</c><00:10:18.710><c> that</c><00:10:19.710><c> are</c>

00:10:19.850 --> 00:10:19.860 align:start position:0%
to access parts of the JDK that are
 

00:10:19.860 --> 00:10:22.690 align:start position:0%
to access parts of the JDK that are
meant<00:10:20.040><c> for</c><00:10:20.130><c> internal</c><00:10:20.850><c> use</c><00:10:21.060><c> only</c>

00:10:22.690 --> 00:10:22.700 align:start position:0%
meant for internal use only
 

00:10:22.700 --> 00:10:24.890 align:start position:0%
meant for internal use only
unfortunately<00:10:23.700><c> it'll</c><00:10:24.300><c> take</c><00:10:24.540><c> a</c><00:10:24.570><c> while</c><00:10:24.840><c> for</c>

00:10:24.890 --> 00:10:24.900 align:start position:0%
unfortunately it'll take a while for
 

00:10:24.900 --> 00:10:26.900 align:start position:0%
unfortunately it'll take a while for
tool<00:10:25.350><c> and</c><00:10:25.680><c> library</c><00:10:26.010><c> developers</c><00:10:26.490><c> to</c><00:10:26.640><c> move</c><00:10:26.760><c> away</c>

00:10:26.900 --> 00:10:26.910 align:start position:0%
tool and library developers to move away
 

00:10:26.910 --> 00:10:29.930 align:start position:0%
tool and library developers to move away
from<00:10:27.060><c> this</c><00:10:27.300><c> practice</c><00:10:27.750><c> so</c><00:10:28.500><c> JDK</c><00:10:28.890><c> 9</c><00:10:29.070><c> temporarily</c>

00:10:29.930 --> 00:10:29.940 align:start position:0%
from this practice so JDK 9 temporarily
 

00:10:29.940 --> 00:10:33.320 align:start position:0%
from this practice so JDK 9 temporarily
allows<00:10:30.570><c> access</c><00:10:30.960><c> to</c><00:10:31.260><c> JDK</c><00:10:31.920><c> internals</c><00:10:32.550><c> but</c>

00:10:33.320 --> 00:10:33.330 align:start position:0%
allows access to JDK internals but
 

00:10:33.330 --> 00:10:37.400 align:start position:0%
allows access to JDK internals but
prints<00:10:33.630><c> a</c><00:10:33.780><c> warning</c><00:10:34.320><c> when</c><00:10:34.800><c> it</c><00:10:34.980><c> happens</c><00:10:36.410><c> there's</c>

00:10:37.400 --> 00:10:37.410 align:start position:0%
prints a warning when it happens there's
 

00:10:37.410 --> 00:10:39.260 align:start position:0%
prints a warning when it happens there's
a<00:10:37.470><c> command</c><00:10:37.890><c> line</c><00:10:38.100><c> flag</c><00:10:38.430><c> to</c><00:10:38.700><c> avoid</c><00:10:39.060><c> these</c>

00:10:39.260 --> 00:10:39.270 align:start position:0%
a command line flag to avoid these
 

00:10:39.270 --> 00:10:42.050 align:start position:0%
a command line flag to avoid these
warnings<00:10:39.750><c> so</c><00:10:40.590><c> please</c><00:10:40.920><c> check</c><00:10:41.250><c> with</c><00:10:41.430><c> tool</c><00:10:41.730><c> and</c>

00:10:42.050 --> 00:10:42.060 align:start position:0%
warnings so please check with tool and
 

00:10:42.060 --> 00:10:44.390 align:start position:0%
warnings so please check with tool and
library<00:10:42.480><c> developers</c><00:10:42.930><c> about</c><00:10:43.530><c> how</c><00:10:43.920><c> to</c><00:10:43.980><c> deploy</c>

00:10:44.390 --> 00:10:44.400 align:start position:0%
library developers about how to deploy
 

00:10:44.400 --> 00:10:48.740 align:start position:0%
library developers about how to deploy
on<00:10:44.850><c> JDK</c><00:10:45.660><c> 9</c><00:10:46.340><c> finally</c><00:10:47.340><c> there</c><00:10:48.210><c> are</c><00:10:48.240><c> miscellaneous</c>

00:10:48.740 --> 00:10:48.750 align:start position:0%
on JDK 9 finally there are miscellaneous
 

00:10:48.750 --> 00:10:51.620 align:start position:0%
on JDK 9 finally there are miscellaneous
changes<00:10:49.560><c> in</c><00:10:49.770><c> JDK</c><00:10:50.310><c> 9</c><00:10:50.520><c> that</c><00:10:50.910><c> are</c><00:10:51.030><c> unrelated</c><00:10:51.390><c> to</c>

00:10:51.620 --> 00:10:51.630 align:start position:0%
changes in JDK 9 that are unrelated to
 

00:10:51.630 --> 00:10:53.870 align:start position:0%
changes in JDK 9 that are unrelated to
modules<00:10:52.050><c> but</c><00:10:52.770><c> might</c><00:10:52.920><c> affect</c><00:10:53.250><c> code</c><00:10:53.520><c> that</c><00:10:53.730><c> ran</c>

00:10:53.870 --> 00:10:53.880 align:start position:0%
modules but might affect code that ran
 

00:10:53.880 --> 00:10:57.770 align:start position:0%
modules but might affect code that ran
on<00:10:53.910><c> JDK</c><00:10:54.360><c> 8</c><00:10:55.190><c> notably</c><00:10:56.190><c> code</c><00:10:57.150><c> that</c><00:10:57.330><c> assumes</c><00:10:57.660><c> the</c>

00:10:57.770 --> 00:10:57.780 align:start position:0%
on JDK 8 notably code that assumes the
 

00:10:57.780 --> 00:10:59.840 align:start position:0%
on JDK 8 notably code that assumes the
Java<00:10:58.050><c> version</c><00:10:58.350><c> stream</c><00:10:58.830><c> begins</c><00:10:59.190><c> with</c><00:10:59.370><c> one</c><00:10:59.640><c> dot</c>

00:10:59.840 --> 00:10:59.850 align:start position:0%
Java version stream begins with one dot
 

00:10:59.850 --> 00:11:02.930 align:start position:0%
Java version stream begins with one dot
or<00:11:00.350><c> assumes</c><00:11:01.350><c> that</c><00:11:01.440><c> the</c><00:11:01.650><c> JDK</c><00:11:02.040><c> lives</c><00:11:02.520><c> in</c><00:11:02.640><c> a</c><00:11:02.730><c> file</c>

00:11:02.930 --> 00:11:02.940 align:start position:0%
or assumes that the JDK lives in a file
 

00:11:02.940 --> 00:11:07.250 align:start position:0%
or assumes that the JDK lives in a file
called<00:11:03.270><c> RT</c><00:11:03.720><c> jar</c><00:11:04.110><c> will</c><00:11:04.830><c> fail</c><00:11:05.130><c> on</c><00:11:05.430><c> JDK</c><00:11:05.910><c> 9</c><00:11:06.260><c> again</c>

00:11:07.250 --> 00:11:07.260 align:start position:0%
called RT jar will fail on JDK 9 again
 

00:11:07.260 --> 00:11:07.850 align:start position:0%
called RT jar will fail on JDK 9 again
please

00:11:07.850 --> 00:11:07.860 align:start position:0%
please
 

00:11:07.860 --> 00:11:09.470 align:start position:0%
please
check<00:11:08.070><c> with</c><00:11:08.250><c> tool</c><00:11:08.490><c> and</c><00:11:08.700><c> library</c><00:11:09.029><c> developers</c>

00:11:09.470 --> 00:11:09.480 align:start position:0%
check with tool and library developers
 

00:11:09.480 --> 00:11:11.600 align:start position:0%
check with tool and library developers
about<00:11:09.810><c> which</c><00:11:10.019><c> versions</c><00:11:10.560><c> are</c><00:11:10.860><c> needed</c><00:11:11.250><c> to</c><00:11:11.459><c> run</c>

00:11:11.600 --> 00:11:11.610 align:start position:0%
about which versions are needed to run
 

00:11:11.610 --> 00:11:15.380 align:start position:0%
about which versions are needed to run
on<00:11:11.760><c> JDK</c><00:11:12.149><c> 9</c><00:11:12.329><c> to</c><00:11:13.110><c> conclude</c><00:11:13.490><c> JDK</c><00:11:14.490><c> 9</c><00:11:14.670><c> is</c><00:11:14.910><c> important</c>

00:11:15.380 --> 00:11:15.390 align:start position:0%
on JDK 9 to conclude JDK 9 is important
 

00:11:15.390 --> 00:11:17.780 align:start position:0%
on JDK 9 to conclude JDK 9 is important
because<00:11:15.990><c> it</c><00:11:16.230><c> enables</c><00:11:16.500><c> modular</c><00:11:17.220><c> development</c>

00:11:17.780 --> 00:11:17.790 align:start position:0%
because it enables modular development
 

00:11:17.790 --> 00:11:21.290 align:start position:0%
because it enables modular development
all<00:11:18.000><c> the</c><00:11:18.630><c> way</c><00:11:18.750><c> down</c><00:11:19.339><c> the</c><00:11:20.339><c> java</c><00:11:20.579><c> language</c><00:11:20.790><c> and</c>

00:11:21.290 --> 00:11:21.300 align:start position:0%
all the way down the java language and
 

00:11:21.300 --> 00:11:23.180 align:start position:0%
all the way down the java language and
the<00:11:21.420><c> java</c><00:11:21.660><c> virtual</c><00:11:21.779><c> machine</c><00:11:22.200><c> understand</c>

00:11:23.180 --> 00:11:23.190 align:start position:0%
the java virtual machine understand
 

00:11:23.190 --> 00:11:25.579 align:start position:0%
the java virtual machine understand
modules<00:11:23.640><c> very</c><00:11:23.910><c> deeply</c><00:11:24.329><c> so</c><00:11:25.260><c> that</c><00:11:25.290><c> the</c>

00:11:25.579 --> 00:11:25.589 align:start position:0%
modules very deeply so that the
 

00:11:25.589 --> 00:11:28.130 align:start position:0%
modules very deeply so that the
applications<00:11:26.399><c> you</c><00:11:26.579><c> write</c><00:11:26.850><c> and</c><00:11:27.149><c> the</c><00:11:27.779><c> libraries</c>

00:11:28.130 --> 00:11:28.140 align:start position:0%
applications you write and the libraries
 

00:11:28.140 --> 00:11:31.610 align:start position:0%
applications you write and the libraries
you<00:11:28.260><c> consume</c><00:11:28.800><c> and</c><00:11:29.100><c> even</c><00:11:29.760><c> the</c><00:11:29.850><c> jdk</c><00:11:30.269><c> itself</c><00:11:30.690><c> can</c>

00:11:31.610 --> 00:11:31.620 align:start position:0%
you consume and even the jdk itself can
 

00:11:31.620 --> 00:11:34.250 align:start position:0%
you consume and even the jdk itself can
all<00:11:31.769><c> be</c><00:11:31.950><c> developed</c><00:11:32.490><c> and</c><00:11:32.730><c> tested</c><00:11:33.180><c> and</c><00:11:33.600><c> packaged</c>

00:11:34.250 --> 00:11:34.260 align:start position:0%
all be developed and tested and packaged
 

00:11:34.260 --> 00:11:37.069 align:start position:0%
all be developed and tested and packaged
and<00:11:34.500><c> deployed</c><00:11:35.040><c> as</c><00:11:35.250><c> modules</c><00:11:35.670><c> with</c><00:11:36.240><c> clear</c><00:11:36.600><c> api's</c>

00:11:37.069 --> 00:11:37.079 align:start position:0%
and deployed as modules with clear api's
 

00:11:37.079 --> 00:11:40.670 align:start position:0%
and deployed as modules with clear api's
and<00:11:37.440><c> well</c><00:11:37.920><c> protected</c><00:11:38.279><c> internals</c><00:11:39.680><c> making</c>

00:11:40.670 --> 00:11:40.680 align:start position:0%
and well protected internals making
 

00:11:40.680 --> 00:11:42.949 align:start position:0%
and well protected internals making
everyone<00:11:41.040><c> play</c><00:11:41.310><c> by</c><00:11:41.550><c> the</c><00:11:41.610><c> same</c><00:11:42.060><c> modular</c><00:11:42.750><c> rules</c>

00:11:42.949 --> 00:11:42.959 align:start position:0%
everyone play by the same modular rules
 

00:11:42.959 --> 00:11:44.660 align:start position:0%
everyone play by the same modular rules
has<00:11:43.290><c> great</c><00:11:43.500><c> benefits</c><00:11:43.950><c> for</c><00:11:44.160><c> reliability</c>

00:11:44.660 --> 00:11:44.670 align:start position:0%
has great benefits for reliability
 

00:11:44.670 --> 00:11:47.630 align:start position:0%
has great benefits for reliability
maintainability<00:11:45.510><c> and</c><00:11:46.290><c> security</c><00:11:46.800><c> though</c><00:11:47.490><c> it</c>

00:11:47.630 --> 00:11:47.640 align:start position:0%
maintainability and security though it
 

00:11:47.640 --> 00:11:49.639 align:start position:0%
maintainability and security though it
may<00:11:47.790><c> take</c><00:11:48.029><c> some</c><00:11:48.209><c> time</c><00:11:48.269><c> for</c><00:11:48.480><c> popular</c><00:11:49.110><c> tools</c><00:11:49.350><c> and</c>

00:11:49.639 --> 00:11:49.649 align:start position:0%
may take some time for popular tools and
 

00:11:49.649 --> 00:11:52.280 align:start position:0%
may take some time for popular tools and
libraries<00:11:50.010><c> to</c><00:11:50.220><c> catch</c><00:11:50.519><c> up</c><00:11:50.760><c> you</c><00:11:51.110><c> can</c><00:11:52.110><c> download</c>

00:11:52.280 --> 00:11:52.290 align:start position:0%
libraries to catch up you can download
 

00:11:52.290 --> 00:11:55.220 align:start position:0%
libraries to catch up you can download
JDK<00:11:52.890><c> 9</c><00:11:53.100><c> now</c><00:11:53.459><c> and</c><00:11:53.730><c> follow</c><00:11:54.570><c> what's</c><00:11:54.839><c> happening</c>

00:11:55.220 --> 00:11:55.230 align:start position:0%
JDK 9 now and follow what's happening
 

00:11:55.230 --> 00:11:58.610 align:start position:0%
JDK 9 now and follow what's happening
with<00:11:55.350><c> JDK</c><00:11:55.709><c> development</c><00:11:56.220><c> at</c><00:11:56.370><c> open</c><00:11:56.940><c> JDK</c><00:11:57.620><c> also</c>

00:11:58.610 --> 00:11:58.620 align:start position:0%
with JDK development at open JDK also
 

00:11:58.620 --> 00:12:00.800 align:start position:0%
with JDK development at open JDK also
follow<00:11:58.860><c> us</c><00:11:59.070><c> on</c><00:11:59.310><c> Twitter</c><00:11:59.610><c> at</c><00:11:59.910><c> open</c><00:12:00.180><c> JDK</c><00:12:00.300><c> and</c>

00:12:00.800 --> 00:12:00.810 align:start position:0%
follow us on Twitter at open JDK and
 

00:12:00.810 --> 00:12:03.800 align:start position:0%
follow us on Twitter at open JDK and
hashtag<00:12:01.290><c> Java</c><00:12:01.620><c> 9</c><00:12:01.890><c> and</c><00:12:02.790><c> with</c><00:12:02.940><c> that</c><00:12:03.120><c> thank</c><00:12:03.750><c> you</c>

00:12:03.800 --> 00:12:03.810 align:start position:0%
hashtag Java 9 and with that thank you
 

00:12:03.810 --> 00:12:06.140 align:start position:0%
hashtag Java 9 and with that thank you
very<00:12:03.959><c> much</c>

