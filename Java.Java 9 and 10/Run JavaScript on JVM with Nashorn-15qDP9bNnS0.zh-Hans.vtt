WEBVTT
Kind: captions
Language: zh-Hans

00:00:00.000 --> 00:00:05.990
所以你们有多少人必须

00:00:02.129 --> 00:00:09.389
编写JavaScript表单验证代码

00:00:05.990 --> 00:00:10.650
对，所以我想做的一件事

00:00:09.389 --> 00:00:12.900
挑战你去想我

00:00:10.650 --> 00:00:15.859
通过这次演讲你能赚多少钱

00:00:12.900 --> 00:00:19.260
重用完全相同的验证逻辑

00:00:15.859 --> 00:00:21.240
在您的Java应用程序内部

00:00:19.260 --> 00:00:22.949
有越来越多的工具可以做到这一点

00:00:21.240 --> 00:00:25.380
经典之一是

00:00:22.949 --> 00:00:28.590
犀牛已经存在了很长时间，但是

00:00:25.380 --> 00:00:30.660
 Java和VM中现在的标准

00:00:28.590 --> 00:00:33.930
虚拟机中有一个名为nashorn的工具

00:00:30.660 --> 00:00:35.760
任何人都使用天然的，所以全国范围内

00:00:33.930 --> 00:00:37.890
性能更高

00:00:35.760 --> 00:00:39.899
内置的JavaScript环境

00:00:37.890 --> 00:00:42.030
我一直不跟你聊天的时候

00:00:39.899 --> 00:00:44.040
那也有类似的事情

00:00:42.030 --> 00:00:47.309
关闭脚本，如果您正在编写

00:00:44.040 --> 00:00:49.410
您可以将闭包编译为

00:00:47.309 --> 00:00:52.289
带有关闭脚本的JavaScript，但是

00:00:49.410 --> 00:00:54.420
还有一个J甜蜜，哪个J甜蜜的你

00:00:52.289 --> 00:00:56.610
可以编写标准的Java，它将

00:00:54.420 --> 00:00:59.660
将Java编译为JavaScript 

00:00:56.610 --> 00:01:01.949
然后可以放入浏览器页面

00:00:59.660 --> 00:01:05.040
那国家或国家号呢？ 

00:01:01.949 --> 00:01:08.310
就像我说的是JD kaise JavaScript 

00:01:05.040 --> 00:01:10.650
解决方案运送标准在JDK中

00:01:08.310 --> 00:01:13.680
 Java VM，所以一直都有

00:01:10.650 --> 00:01:15.750
甲骨文正在认真努力

00:01:13.680 --> 00:01:18.090
使其成为高性能

00:01:15.750 --> 00:01:21.150
知道在Java 7中您具有invokedynamic 

00:01:18.090 --> 00:01:23.340
有改进的地方

00:01:21.150 --> 00:01:25.710
每个Java版本以改进

00:01:23.340 --> 00:01:28.140
 Nashua的表现我不会告诉你

00:01:25.710 --> 00:01:30.900
它与nodejs平价

00:01:28.140 --> 00:01:32.909
但差距在缩小

00:01:30.900 --> 00:01:36.960
它要执行的情况

00:01:32.909 --> 00:01:38.850
他知道靠近节点J，但是你

00:01:36.960 --> 00:01:41.400
知道最大的不同是

00:01:38.850 --> 00:01:44.310
您在Java VM中，因此您可以访问

00:01:41.400 --> 00:01:47.189
到Java VM中的设施

00:01:44.310 --> 00:01:49.170
不存在于node.js根权没有js' 

00:01:47.189 --> 00:01:52.649
没有线程，就没有

00:01:49.170 --> 00:01:56.040
 node.js的线程，所以您

00:01:52.649 --> 00:01:58.259
使用它，您知道将数据发送回

00:01:56.040 --> 00:02:00.119
您必须在工人之间来回

00:01:58.259 --> 00:02:02.460
发送本质上的消息对象

00:02:00.119 --> 00:02:04.680
按值传递数据，但我们知道

00:02:02.460 --> 00:02:06.899
说你有类似的东西

00:02:04.680 --> 00:02:09.479
破坏者环形缓冲区的权利是

00:02:06.899 --> 00:02:11.700
超高性能Java环形缓冲区

00:02:09.479 --> 00:02:14.010
结构，它就像一些

00:02:11.700 --> 00:02:15.900
股票交易应用程序使用它

00:02:14.010 --> 00:02:17.819
如果您有8 GB的内存

00:02:15.900 --> 00:02:19.379
您共享的数据结构

00:02:17.819 --> 00:02:21.420
一堆线程之间

00:02:19.379 --> 00:02:23.400
线程正在同时操作

00:02:21.420 --> 00:02:26.730
你不能去交8场演出

00:02:23.400 --> 00:02:29.640
反对工人之间的权利，所以你可以

00:02:26.730 --> 00:02:31.650
在Java VM中使用JavaScript进行操作

00:02:29.640 --> 00:02:34.680
甚至在node.js中都做不到的

00:02:31.650 --> 00:02:36.750
对，甚至不可能，所以一个苹果

00:02:34.680 --> 00:02:38.760
与苹果的性能比较很难

00:02:36.750 --> 00:02:42.239
因为设施

00:02:38.760 --> 00:02:42.930
根本不在那里，这有多容易

00:02:42.239 --> 00:02:44.640
出发

00:02:42.930 --> 00:02:46.650
所以这两行告诉你

00:02:44.640 --> 00:02:49.440
超级简单的例子

00:02:46.650 --> 00:02:51.030
 Java脚本，要求您提供新的

00:02:49.440 --> 00:02:53.280
脚本引擎中的脚本引擎

00:02:51.030 --> 00:02:55.739
经理，您要求的名称是Nashorn 

00:02:53.280 --> 00:02:57.480
然后在这里您进行引擎评估，而您

00:02:55.739 --> 00:03:00.239
可以在其中放置任何想要的JavaScript 

00:02:57.480 --> 00:03:02.910
它将运行它将转换为

00:03:00.239 --> 00:03:04.799
 Java字节码并执行它，但是您可以

00:03:02.910 --> 00:03:06.599
不仅你知道吐东西

00:03:04.799 --> 00:03:09.209
如果实例化一个

00:03:06.599 --> 00:03:11.040
 JavaScript中的对象然后返回

00:03:09.209 --> 00:03:13.530
你将要取回一个物体

00:03:11.040 --> 00:03:16.980
 Java中可以调用方法的句柄

00:03:13.530 --> 00:03:19.230
甚至可以传递Java对象

00:03:16.980 --> 00:03:23.069
进入并拥有该JavaScript对象

00:03:19.230 --> 00:03:25.109
 Java对象及其上的调用方法

00:03:23.069 --> 00:03:27.480
所有功能都可以无缝进行，仅此而已

00:03:25.109 --> 00:03:28.440
 Java VM中有更多对象，因此

00:03:27.480 --> 00:03:30.359
我希望你们能做的一件事

00:03:28.440 --> 00:03:32.220
考虑是不要考虑

00:03:30.359 --> 00:03:35.459
就像Java中的JavaScript世界一样

00:03:32.220 --> 00:03:38.160
世界Java是人类语言Java 

00:03:35.459 --> 00:03:39.750
 VM无法正确运行Java源代码

00:03:38.160 --> 00:03:42.930
它运行Java字节码

00:03:39.750 --> 00:03:45.720
 Nashorn将JavaScript编译成

00:03:42.930 --> 00:03:47.849
 Java字节码所以Nashorn的JavaScript 

00:03:45.720 --> 00:03:51.180
只是产生Java的另一种方式

00:03:47.849 --> 00:03:52.889
字节码，所以如果您已经有

00:03:51.180 --> 00:03:56.310
验证逻辑（如果您已经拥有） 

00:03:52.889 --> 00:03:58.079
现有JavaScript中的价值

00:03:56.310 --> 00:04:00.690
您必须为Web应用程序编写

00:03:58.079 --> 00:04:02.609
在用Java重写之前，请先

00:04:00.690 --> 00:04:04.200
退后一步，就像我们可以使用

00:04:02.609 --> 00:04:06.120
那我们必须重写它，并且

00:04:04.200 --> 00:04:08.730
真的考虑那个权利，因为如果

00:04:06.120 --> 00:04:12.000
你的位置是

00:04:08.730 --> 00:04:14.669
不仅要执行验证逻辑

00:04:12.000 --> 00:04:16.500
假设在您的Web应用程序中

00:04:14.669 --> 00:04:17.789
现在您正在谈论做一个iOS 

00:04:16.500 --> 00:04:19.859
本机应用程序，您正在谈论

00:04:17.789 --> 00:04:21.320
做一个您知道的Android本机应用程序

00:04:19.859 --> 00:04:23.700
你将不得不保持你的

00:04:21.320 --> 00:04:25.860
该验证的Objective-C版本

00:04:23.700 --> 00:04:27.900
就像逻辑上那样

00:04:25.860 --> 00:04:29.520
验证逻辑您的Java脚本

00:04:27.900 --> 00:04:31.530
验证逻辑就是全部

00:04:29.520 --> 00:04:34.380
工程时间，这些都是

00:04:31.530 --> 00:04:36.360
失败的机会就可以

00:04:34.380 --> 00:04:38.360
在您的版本和

00:04:36.360 --> 00:04:40.860
这就是您遇到严重错误的方式

00:04:38.360 --> 00:04:42.750
平台，所以您想知道不

00:04:40.860 --> 00:04:45.330
重复自己的真相

00:04:42.750 --> 00:04:47.550
您可以重用该代码吗？ 

00:04:45.330 --> 00:04:53.400
这就是同构应用

00:04:47.550 --> 00:04:55.320
关于这是埃克曼剧本，我认为是五个

00:04:53.400 --> 00:04:56.910
有一些Xmas脚本六个，但是

00:04:55.320 --> 00:05:00.360
你可以知道你可以跑步

00:04:56.910 --> 00:05:03.030
可以使用Babel进行表达

00:05:00.360 --> 00:05:06.360
 webpack和Babel，并与

00:05:03.030 --> 00:05:09.150
可以在nashua上运行的转译器

00:05:06.360 --> 00:05:11.430
您可以使用Eknath脚本的六个构造

00:05:09.150 --> 00:05:13.139
他们只是被转译，所以有一些

00:05:11.430 --> 00:05:14.940
性能方面的考虑，但和我一样

00:05:13.139 --> 00:05:17.490
说自然的肯定在

00:05:14.940 --> 00:05:19.770
积极发展Oracle绝对是

00:05:17.490 --> 00:05:22.310
得到它Java中的JavaScript很大

00:05:19.770 --> 00:05:25.110
交易，然后他们追求

00:05:22.310 --> 00:05:27.500
因为您知道现实是针对Java的

00:05:25.110 --> 00:05:29.490
浏览器小程序正确

00:05:27.500 --> 00:05:31.110
没人在想我

00:05:29.490 --> 00:05:33.060
在那之前，现在，即使那样

00:05:31.110 --> 00:05:35.820
他们正式走了，没人

00:05:33.060 --> 00:05:38.699
使用小程序真的很高兴

00:05:35.820 --> 00:05:40.500
现在有一段时间了，所以网络只是

00:05:38.699 --> 00:05:43.710
变得越来越大

00:05:40.500 --> 00:05:45.930
 Javascript无处不在

00:05:43.710 --> 00:05:47.820
与诸如PhoneGap Apache之类的工具一起使用

00:05:45.930 --> 00:05:50.099
科尔多瓦有人玩过你吗

00:05:47.820 --> 00:05:52.800
你可以建立一个简单的网站吗

00:05:50.099 --> 00:05:54.240
应用程序并将其打包为网络

00:05:52.800 --> 00:05:55.979
商店，您可以将其放入Apple 

00:05:54.240 --> 00:05:57.900
商店把它放在Android商店中

00:05:55.979 --> 00:06:00.120
这些强大的平台

00:05:57.900 --> 00:06:01.560
正在出现让您移动代码

00:06:00.120 --> 00:06:05.010
各种不同之间

00:06:01.560 --> 00:06:09.710
你可以得到nodejs的环境

00:06:05.010 --> 00:06:09.710
是的

00:06:17.120 --> 00:06:28.050
是的，所以你应该可以

00:06:25.020 --> 00:06:31.110
从中调用任何Java对象上的任何方法

00:06:28.050 --> 00:06:34.050
使用Nashorn的javascript 

00:06:31.110 --> 00:06:35.250
我相信我可以用Java编写

00:06:34.050 --> 00:06:37.250
相信你应该能够MIT 

00:06:35.250 --> 00:06:40.890
可以做诸如操纵线程之类的事情

00:06:37.250 --> 00:06:42.540
从JavaScript中使用Nashorn 

00:06:40.890 --> 00:06:44.940
你知道你是否有能力

00:06:42.540 --> 00:06:46.950
你可以打电话给你的东西

00:06:44.940 --> 00:06:49.470
 Java对象上的调用方法

00:06:46.950 --> 00:06:51.750
您可以通过在Java上调用方法来完成

00:06:49.470 --> 00:06:53.790
您可能需要做的事情

00:06:51.750 --> 00:06:55.170
铸造你可能必须去取决于

00:06:53.790 --> 00:06:58.140
例如，如果您尝试真正做某事

00:06:55.170 --> 00:07:01.290
低级别的我没有Pat的答案

00:06:58.140 --> 00:07:03.030
你知道的话会很容易，但是

00:07:01.290 --> 00:07:04.650
你应该做任何你能做的

00:07:03.030 --> 00:07:08.580
您应该能够使用的Java 

00:07:04.650 --> 00:07:09.990
 JavaScript可能有一些类似的东西

00:07:08.580 --> 00:07:11.970
可能是一些有趣的事情

00:07:09.990 --> 00:07:14.340
如果你喜欢你就会得到

00:07:11.970 --> 00:07:16.530
知道您正在使用转换的方法

00:07:14.340 --> 00:07:18.870
你知道类型检测

00:07:16.530 --> 00:07:21.000
在其中扮演重要角色，可能会

00:07:18.870 --> 00:07:22.530
有点复杂，但您可能会有

00:07:21.000 --> 00:07:25.230
做类似写适配器的事情

00:07:22.530 --> 00:07:27.570
 Java中的类，它提供了JavaScript 

00:07:25.230 --> 00:07:30.320
几乎没有什么帮助，只是为了了解

00:07:27.570 --> 00:07:30.320
打字系统

