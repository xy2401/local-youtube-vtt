WEBVTT
Kind: captions
Language: zh-Hans

00:00:03.260 --> 00:00:08.750
好的，谢谢大家的光临

00:00:06.859 --> 00:00:10.610
我是埃里克，今天我们要谈一个

00:00:08.750 --> 00:00:13.910
关于g1垃圾收集器的一点

00:00:10.610 --> 00:00:15.709
 JDK 9，但在我们开始之前，我只是

00:00:13.910 --> 00:00:17.660
想给你看这张幻灯片

00:00:15.709 --> 00:00:26.300
在那里闲逛几秒钟

00:00:17.660 --> 00:00:27.859
让您享受，现在已经不在了

00:00:26.300 --> 00:00:29.839
让我们看看今天的议程的方式

00:00:27.859 --> 00:00:31.970
我们要谈论的是g1 

00:00:29.839 --> 00:00:33.920
垃圾收集器，首先我们是

00:00:31.970 --> 00:00:37.370
从快速介绍开始

00:00:33.920 --> 00:00:39.710
在2017年的g1上，我们将继续

00:00:37.370 --> 00:00:43.039
研究g1的五个主要改进

00:00:39.710 --> 00:00:44.539
从JDK 8开始，最后但并非最不重要

00:00:43.039 --> 00:00:46.309
我们会偷看一下

00:00:44.539 --> 00:00:50.719
进入未来，看看会发生什么

00:00:46.309 --> 00:00:52.940
对于d1，但我是谁我是Eric我想

00:00:50.719 --> 00:00:55.129
我工作的程序垃圾收集器

00:00:52.940 --> 00:00:57.710
 Oracle在JVM GC团队中已经做到

00:00:55.129 --> 00:00:59.149
所以过去大约六年

00:00:57.710 --> 00:01:01.339
我在g1上工作了三年

00:00:59.149 --> 00:01:03.530
垃圾收集器，我是评论员

00:01:01.339 --> 00:01:09.820
并在衰落中开放，我贡献了

00:01:03.530 --> 00:01:12.170
很多，所以在2017年快速介绍了g1 

00:01:09.820 --> 00:01:14.060
首先是什么垃圾收集器

00:01:12.170 --> 00:01:16.220
什么是g1很好解决垃圾

00:01:14.060 --> 00:01:19.370
收集是管理内存的一种方式

00:01:16.220 --> 00:01:21.140
因此在Java中，程序员不需要

00:01:19.370 --> 00:01:22.730
明确地去记忆自己

00:01:21.140 --> 00:01:24.890
您将为您的对象分配新的

00:01:22.730 --> 00:01:26.390
然后内存将被回收

00:01:24.890 --> 00:01:28.820
垃圾收集器一旦没有

00:01:26.390 --> 00:01:30.680
使用时间更长，您可以将其与

00:01:28.820 --> 00:01:32.840
看看程序程序员必须在哪里

00:01:30.680 --> 00:01:35.630
自己使用管理内存

00:01:32.840 --> 00:01:37.280
 malloc和如何释放天灾

00:01:35.630 --> 00:01:38.750
集合可以很好地处理所有对象

00:01:37.280 --> 00:01:41.570
将分配在内存区域

00:01:38.750 --> 00:01:43.670
这些对象称为堆

00:01:41.570 --> 00:01:47.420
分别与

00:01:43.670 --> 00:01:50.420
这些字段可以包含的字段

00:01:47.420 --> 00:01:54.320
对其他对象的引用

00:01:50.420 --> 00:01:56.690
谷歌内部价值分配

00:01:54.320 --> 00:01:58.600
您将开始越来越多的对象

00:01:56.690 --> 00:02:00.920
填满这个称为堆的内存区域， 

00:01:58.600 --> 00:02:02.570
一旦完全填满

00:02:00.920 --> 00:02:05.390
没有空间分配更多

00:02:02.570 --> 00:02:06.800
显然，诸如此类的东西

00:02:05.390 --> 00:02:08.989
如果该程序要现在发生

00:02:06.800 --> 00:02:10.879
继续运行它将要做什么

00:02:08.989 --> 00:02:13.519
碰巧是垃圾收集器

00:02:10.879 --> 00:02:14.020
将强制您的应用程序，然后

00:02:13.519 --> 00:02:15.940
将

00:02:14.020 --> 00:02:17.950
查看当前正在使用哪些对象

00:02:15.940 --> 00:02:19.510
通过该程序，因为如果您认为

00:02:17.950 --> 00:02:21.460
关于何时用Java编写该方法

00:02:19.510 --> 00:02:23.500
你可能会分配一堆对象

00:02:21.460 --> 00:02:25.150
一些计算，然后返回

00:02:23.500 --> 00:02:26.770
结果，但您用于

00:02:25.150 --> 00:02:27.370
比赛你真的不需要他们

00:02:26.770 --> 00:02:29.500
不再

00:02:27.370 --> 00:02:32.350
所以垃圾医生会找出来

00:02:29.500 --> 00:02:34.480
哪些对象正在使用中，并将这样做

00:02:32.350 --> 00:02:36.850
从所谓的路线开始

00:02:34.480 --> 00:02:39.460
为了找出哪些对象是

00:02:36.850 --> 00:02:41.710
生活和堆放，并被

00:02:39.460 --> 00:02:44.080
您在应用程序中停止的程序

00:02:41.710 --> 00:02:46.090
您扫描Fred堆栈中的Java 

00:02:44.080 --> 00:02:49.690
您找到引用指向的线程

00:02:46.090 --> 00:02:51.340
拿出这样的物体，然后你说

00:02:49.690 --> 00:02:54.160
现在我找到了那些我

00:02:51.340 --> 00:02:55.720
会认为他们活着，但正如你所见

00:02:54.160 --> 00:02:58.300
在幻灯片上，我们只是更多

00:02:55.720 --> 00:03:00.700
对象，我们可以遍历

00:02:58.300 --> 00:03:03.100
每个对象中的字段依次

00:03:00.700 --> 00:03:04.960
参考，然后我们会发现

00:03:03.100 --> 00:03:08.230
从中可以访问的更多对象

00:03:04.960 --> 00:03:10.690
根，如果您继续这样做

00:03:08.230 --> 00:03:13.270
迭代此算法，我们将

00:03:10.690 --> 00:03:15.820
一旦有，就模拟或找到它们

00:03:13.270 --> 00:03:17.620
找到了那些我们可以压实的物体

00:03:15.820 --> 00:03:19.120
到堆的一端

00:03:17.620 --> 00:03:21.790
内存管理中可用的方案

00:03:19.120 --> 00:03:24.160
但这是对象可以

00:03:21.790 --> 00:03:25.720
被压紧到另一个堆，我们

00:03:24.160 --> 00:03:27.760
现在将有连续的免费

00:03:25.720 --> 00:03:30.670
我们可以用于新的存储区

00:03:27.760 --> 00:03:33.100
程序可以重新分配

00:03:30.670 --> 00:03:36.540
跑步，突然有更多空间

00:03:33.100 --> 00:03:39.100
用于在其中分配新对象

00:03:36.540 --> 00:03:41.830
 Jae-won就是这样的垃圾收集器之一

00:03:39.100 --> 00:03:44.170
算法，这是第一页

00:03:41.830 --> 00:03:46.810
原始纸正在

00:03:44.170 --> 00:03:49.300
现在有点老了，所以纸是

00:03:46.810 --> 00:03:52.060
 2004年发表在g1垃圾上

00:03:49.300 --> 00:03:54.510
 JDK的收藏家进行了实验

00:03:52.060 --> 00:03:58.540
支持6至14天的第一天

00:03:54.510 --> 00:04:01.900
 2012年JDK 7 u 4中的官方支持

00:03:58.540 --> 00:04:04.209
而今年几周前，当JDK 9 

00:04:01.900 --> 00:04:07.270
已发布q1成为默认值

00:04:04.209 --> 00:04:07.900
 JDK的收集器，因此

00:04:07.270 --> 00:04:09.850
信息

00:04:07.900 --> 00:04:12.610
阅读旧博客时要小心

00:04:09.850 --> 00:04:14.770
发布有关G的堆栈溢出答案等

00:04:12.610 --> 00:04:20.290
 1，因为发生了很大的变化

00:04:14.770 --> 00:04:22.690
在2009年至2017年之间，G 1 

00:04:20.290 --> 00:04:25.810
自诞生以来就发展了很多

00:04:22.690 --> 00:04:28.600
在实验支持下引入

00:04:25.810 --> 00:04:30.760
所以g1的目标是

00:04:28.600 --> 00:04:32.830
吞吐量和低延迟

00:04:30.760 --> 00:04:35.320
吞吐量，您可以将其视为

00:04:32.830 --> 00:04:38.440
大致每笔交易的数量

00:04:35.320 --> 00:04:40.750
秒或总的运行时间

00:04:38.440 --> 00:04:42.639
程序，而延迟会更多

00:04:40.750 --> 00:04:45.850
对应于一个的最大时间

00:04:42.639 --> 00:04:49.720
交易和默认邮寄电话

00:04:45.850 --> 00:04:52.030
 g1的发布时间为200毫秒

00:04:49.720 --> 00:04:54.340
目标可以调整，你可以对g1说我

00:04:52.030 --> 00:04:55.960
还可以停顿更长的时间

00:04:54.340 --> 00:04:57.730
如果有后端，将会出现

00:04:55.960 --> 00:04:59.830
服务，例如更长的请求

00:04:57.730 --> 00:05:01.900
时代，但反过来你会变得更好

00:04:59.830 --> 00:05:04.960
吞吐量并完成更多工作

00:05:01.900 --> 00:05:07.180
时间单位，而如果您担心

00:05:04.960 --> 00:05:10.360
关于延迟，并说我不想

00:05:07.180 --> 00:05:12.370
它根本不发布或很少发布

00:05:10.360 --> 00:05:15.130
可以将此值降低到更低

00:05:12.370 --> 00:05:16.120
价值，但总会有一个权衡取舍

00:05:15.130 --> 00:05:19.360
在这里，你将不得不牺牲

00:05:16.120 --> 00:05:22.750
一点点的吞吐量，但是您将

00:05:19.360 --> 00:05:25.000
得到较短的力量，那你怎么办

00:05:22.750 --> 00:05:27.760
想达到这个目标的目的是

00:05:25.000 --> 00:05:29.860
在这里使用甲基

00:05:27.760 --> 00:05:30.490
基于世代区域的记忆

00:05:29.860 --> 00:05:33.190
管理

00:05:30.490 --> 00:05:36.340
这是一个术语，所以堆被拆分了

00:05:33.190 --> 00:05:39.610
分成多个区域，因此区域大小

00:05:36.340 --> 00:05:41.740
例如，将取决于堆大小

00:05:39.610 --> 00:05:44.260
如果您有4 GB的堆，则g1 

00:05:41.740 --> 00:05:48.610
将其分为2048 2兆字节

00:05:44.260 --> 00:05:52.120
新对象分配到的区域

00:05:48.610 --> 00:05:54.250
所谓的伊甸园地区和约翰

00:05:52.120 --> 00:05:56.890
收集将在多个

00:05:54.250 --> 00:05:58.990
伊甸园地区已在

00:05:56.890 --> 00:06:01.110
 j-1这样年轻的收藏家会发现

00:05:58.990 --> 00:06:03.310
在那些伊甸园地区的活物和

00:06:01.110 --> 00:06:07.330
紧凑地复制它们以生存

00:06:03.310 --> 00:06:10.120
然后，区域对象将继续是

00:06:07.330 --> 00:06:12.520
在伊甸园地区分配

00:06:10.120 --> 00:06:14.590
而如果一个对象可以存活多个

00:06:12.520 --> 00:06:18.490
约翰收集他们紧凑

00:06:14.590 --> 00:06:20.260
复制到旧的区域，例如

00:06:18.490 --> 00:06:21.729
程序不断运行

00:06:20.260 --> 00:06:23.620
中间体将用于

00:06:21.729 --> 00:06:25.720
青年收藏品的分配将

00:06:23.620 --> 00:06:27.850
碰巧物体会幸存

00:06:25.720 --> 00:06:29.950
并进入一些生存地区

00:06:27.850 --> 00:06:31.960
方式可以存活更长的时间

00:06:29.950 --> 00:06:35.919
越来越多的地区与生活

00:06:31.960 --> 00:06:37.419
对象，而不是迟于g1 

00:06:35.919 --> 00:06:39.909
将必须开始一个并发标记

00:06:37.419 --> 00:06:41.740
循环寻找旧地区

00:06:39.909 --> 00:06:45.220
实际使用哪些对象

00:06:41.740 --> 00:06:48.460
求职申请是哪个

00:06:45.220 --> 00:06:50.020
在这段时间内没有停止

00:06:48.460 --> 00:06:51.750
并发标记将运行

00:06:50.020 --> 00:06:53.770
连同您的工作申请

00:06:51.750 --> 00:06:57.599
遍历堆并找到所有

00:06:53.770 --> 00:07:00.310
这些古老地区的生物

00:06:57.599 --> 00:07:03.220
然后一次并发标记周期

00:07:00.310 --> 00:07:05.020
完成，甚至可以在一个古老的地区生存

00:07:03.220 --> 00:07:07.390
或收集在所谓的混合

00:07:05.020 --> 00:07:09.669
再次收集活动对象

00:07:07.390 --> 00:07:12.880
紧凑地复制到幸存者和老

00:07:09.669 --> 00:07:14.620
弧度，所以在这边

00:07:12.880 --> 00:07:15.880
例子，我们把所有的伊甸园

00:07:14.620 --> 00:07:17.919
和生存区域必须

00:07:15.880 --> 00:07:23.890
每次都收集并在

00:07:17.919 --> 00:07:25.990
两个老地区收集的结果是

00:07:23.890 --> 00:07:27.909
当我们收集更多的东西时，时间在G 

00:07:25.990 --> 00:07:30.370
越来越多的旧地区

00:07:27.909 --> 00:07:32.560
的堆将变为空闲，然后

00:07:30.370 --> 00:07:34.450
一旦他们不再是老了

00:07:32.560 --> 00:07:35.979
适合收集的渐变

00:07:34.450 --> 00:07:38.289
例如，它们可能包含太多直播

00:07:35.979 --> 00:07:40.720
物品也不值得收集

00:07:38.289 --> 00:07:44.229
吉邦将再次恢复做垃圾

00:07:40.720 --> 00:07:45.849
因此，集合g1移动并

00:07:44.229 --> 00:07:48.310
以下状态之间的转换

00:07:45.849 --> 00:07:50.919
它从做年轻的收藏开始

00:07:48.310 --> 00:07:53.050
将对象复制到幸存者中

00:07:50.919 --> 00:07:55.090
地区并将其推广到旧地区

00:07:53.050 --> 00:07:57.010
过了一会儿，就像堆越来越

00:07:55.090 --> 00:07:59.349
越来越多的并发标记

00:07:57.010 --> 00:08:00.490
周期将开始并发

00:07:59.349 --> 00:08:02.560
马克·索特卡（Sotka）不仅在跑

00:08:00.490 --> 00:08:04.240
与您的应用程序同时进行

00:08:02.560 --> 00:08:05.860
也会发生年轻的收藏

00:08:04.240 --> 00:08:09.010
在并发标记圈中

00:08:05.860 --> 00:08:10.510
一旦硬标记完成就运行g1 

00:08:09.010 --> 00:08:13.060
过渡与混合有关

00:08:10.510 --> 00:08:15.220
收藏，一旦它们不再

00:08:13.060 --> 00:08:17.380
并在合适的地方收集

00:08:15.220 --> 00:08:21.000
再次过渡回去做命令

00:08:17.380 --> 00:08:24.190
集合，所以循环重复

00:08:21.000 --> 00:08:26.260
所以我们包装了一些关于

00:08:24.190 --> 00:08:27.820
 g1的工作方式我们将看五个

00:08:26.260 --> 00:08:30.900
重大改进及其进展

00:08:27.820 --> 00:08:33.550
自JDK 8以来所做的事情

00:08:30.900 --> 00:08:36.640
所以我们来看看字符串

00:08:33.550 --> 00:08:38.110
在8020年推出的应用程序

00:08:36.640 --> 00:08:41.200
会看到布卸下

00:08:38.110 --> 00:08:42.969
并发标记与2-14 

00:08:41.200 --> 00:08:44.949
我们将看到热切的填海

00:08:42.969 --> 00:08:46.589
在8个地区引入的庞大地区

00:08:44.949 --> 00:08:50.200
 16 

00:08:46.589 --> 00:08:51.850
然后是适应性的

00:08:50.200 --> 00:08:55.209
并发标记周期

00:08:51.850 --> 00:08:56.620
雪人不仅是最近，而且也是

00:08:55.209 --> 00:08:58.000
收集效率更高

00:08:56.620 --> 00:09:00.279
也被运送到雪人犬身上

00:08:58.000 --> 00:09:03.670
但让我们从字符串开始

00:09:00.279 --> 00:09:05.829
应用程序，因此在此示例中

00:09:03.670 --> 00:09:09.459
分配两个字符串，我有一个命名

00:09:05.829 --> 00:09:12.250
 conf one和j1 j1我们经常把你的1 

00:09:09.459 --> 00:09:13.860
他们的内容非常相似，如果

00:09:12.250 --> 00:09:16.600
你看他们实际上是的幻灯片

00:09:13.860 --> 00:09:19.209
相同，现在您可能会认为

00:09:16.600 --> 00:09:20.700
一点我们不能更好地利用

00:09:19.209 --> 00:09:23.350
而不是拥有

00:09:20.700 --> 00:09:26.320
堆上重复的字符数组

00:09:23.350 --> 00:09:31.720
占用宝贵的空间我们可以做

00:09:26.320 --> 00:09:33.910
那样可以吗？ 

00:09:31.720 --> 00:09:36.550
 Java程序的任何问题，如果我们

00:09:33.910 --> 00:09:38.649
要做这个小技巧

00:09:36.550 --> 00:09:39.160
实际上完全合法有效

00:09:38.649 --> 00:09:41.320
精细

00:09:39.160 --> 00:09:43.510
因为在Java中，像字符串

00:09:41.320 --> 00:09:46.180
字符数组的值都是私有的

00:09:43.510 --> 00:09:49.060
最后，如果我们在

00:09:46.180 --> 00:09:52.390
 Java程序不会看到的场景

00:09:49.060 --> 00:09:55.720
注意我们执行此方法的任何不同

00:09:52.390 --> 00:09:57.820
是在收集期间g1将所有

00:09:55.720 --> 00:10:00.880
新分配的新字符串到队列

00:09:57.820 --> 00:10:04.000
然后年轻的收藏是

00:10:00.880 --> 00:10:06.010
完成g1将同时检查是否有

00:10:04.000 --> 00:10:08.230
两个字符串等于两个字符串是否相等

00:10:06.010 --> 00:10:09.850
一样，那么你可以让他们

00:10:08.230 --> 00:10:12.279
我会给一个混合并参考

00:10:09.850 --> 00:10:14.560
相同的字符数组，请注意

00:10:12.279 --> 00:10:16.779
这与反过来是不一样的

00:10:14.560 --> 00:10:18.730
依次关心的字符串

00:10:16.779 --> 00:10:20.290
字符串对象，而在

00:10:18.730 --> 00:10:22.170
应用程序关心字符

00:10:20.290 --> 00:10:24.670
数组或值字段以及

00:10:22.170 --> 00:10:29.079
在AVM内部，他们使用不同的

00:10:24.670 --> 00:10:31.750
表可以节省大量内存，并且

00:10:29.079 --> 00:10:33.130
堆上的很多足迹取决于

00:10:31.750 --> 00:10:35.410
当然在您的申请中

00:10:33.130 --> 00:10:37.029
有很多也许很多SQL 

00:10:35.410 --> 00:10:40.510
重复或非常重复的陈述

00:10:37.029 --> 00:10:43.000
包含相同的值

00:10:40.510 --> 00:10:45.399
成为一个大的内存保护程序

00:10:43.000 --> 00:10:46.990
由于它将使用更多的CPU 

00:10:45.399 --> 00:10:49.120
到正在进行的并发工作

00:10:46.990 --> 00:10:50.949
同时，这可能也会花费

00:10:49.120 --> 00:10:53.350
约翰稍长一点

00:10:50.949 --> 00:10:55.120
收藏，所以如果它值得，那就值得

00:10:53.350 --> 00:10:57.520
是否取决于您的应用

00:10:55.120 --> 00:11:00.190
节省多少内存和您的CPU 

00:10:57.520 --> 00:11:02.890
要求，您可以尝试一下

00:11:00.190 --> 00:11:07.720
在Yeti k8u 20中使用学生应用程序

00:11:02.890 --> 00:11:09.490
然后下一个改进是

00:11:07.720 --> 00:11:12.190
去看这个课

00:11:09.490 --> 00:11:16.960
并发标记，这很棘手

00:11:12.190 --> 00:11:18.940
主题，因此堆上的对象具有

00:11:16.960 --> 00:11:21.160
对应的班级和那些班级

00:11:18.940 --> 00:11:24.010
依次由一个类加载

00:11:21.160 --> 00:11:26.470
加载器何时所有对象

00:11:24.010 --> 00:11:29.200
堆上一个类的实例是

00:11:26.470 --> 00:11:33.370
死了，这意味着该类本身是

00:11:29.200 --> 00:11:36.250
已死，如果所有最近的都由

00:11:33.370 --> 00:11:38.230
同一类加载器已死，这意味着

00:11:36.250 --> 00:11:40.300
我们可以卸载这些类并

00:11:38.230 --> 00:11:43.690
垃圾收集对应的类

00:11:40.300 --> 00:11:47.230
装载机现在的问题是我们如何

00:11:43.690 --> 00:11:50.530
找出班级是否已经死亡

00:11:47.230 --> 00:11:53.200
 j1将遍历整个堆

00:11:50.530 --> 00:11:56.110
并因此找到活动对象

00:11:53.200 --> 00:11:57.820
它将遇到有生命的物体，并且可以

00:11:56.110 --> 00:12:00.010
因此从那些新颖的物体中找到

00:11:57.820 --> 00:12:02.080
他们属于哪一类

00:12:00.010 --> 00:12:04.450
 Orion的来源并标记

00:12:02.080 --> 00:12:06.610
自从

00:12:04.450 --> 00:12:09.550
子句只能在所有

00:12:06.610 --> 00:12:12.520
该子句加载的类交叉

00:12:09.550 --> 00:12:15.220
装载机已死，我们将标记为已关闭

00:12:12.520 --> 00:12:18.460
处理实时和加载的所有类

00:12:15.220 --> 00:12:20.170
与d1遍历一样的类加载器

00:12:18.460 --> 00:12:22.270
堆越来越多，发现越来越多

00:12:20.170 --> 00:12:23.890
活物会越来越多

00:12:22.270 --> 00:12:26.080
被标记为直播，相应的

00:12:23.890 --> 00:12:27.520
堆之后的类加载器

00:12:26.080 --> 00:12:30.490
当我们发现所有直播时的点击率

00:12:27.520 --> 00:12:33.010
我们可以依次遍历的对象

00:12:30.490 --> 00:12:34.720
类加载器图并找出

00:12:33.010 --> 00:12:36.550
虽然那里有一个开放的课堂

00:12:34.720 --> 00:12:37.570
没有工作就是活着，这意味着

00:12:36.550 --> 00:12:39.670
关闭或已死

00:12:37.570 --> 00:12:43.600
我们可以卸载所有的类

00:12:39.670 --> 00:12:45.850
类加载器已加载，因此棘手

00:12:43.600 --> 00:12:48.910
所有对象都经过后的句子

00:12:45.850 --> 00:12:50.830
访问然后卸载所有已加载的类

00:12:48.910 --> 00:12:53.350
按类别分类的非现场装载机

00:12:50.830 --> 00:12:55.600
在g1中有两种算法

00:12:53.350 --> 00:12:58.390
访问堆上的所有活动对象

00:12:55.600 --> 00:13:02.770
你有并发标记是

00:12:58.390 --> 00:13:04.540
找出

00:13:02.770 --> 00:13:06.910
当前标记期间的实时损失，但

00:13:04.540 --> 00:13:08.770
它表现很好，然后我们也

00:13:06.910 --> 00:13:11.050
退回完整垃圾回收

00:13:08.770 --> 00:13:13.140
这很容易找出

00:13:11.050 --> 00:13:15.630
哪些课程是直播的

00:13:13.140 --> 00:13:19.680
它很慢，会导致更长的暂停

00:13:15.630 --> 00:13:23.220
所以在JDK 240中，我们终于发货了

00:13:19.680 --> 00:13:24.870
并发标记后卸载

00:13:23.220 --> 00:13:27.600
由旗布控制

00:13:24.870 --> 00:13:31.470
卸载并发标记，它是

00:13:27.600 --> 00:13:34.440
自1840年起默认启用，它可以

00:13:31.470 --> 00:13:36.480
减少全额补足的需要

00:13:34.440 --> 00:13:39.000
如果您的应用中有很多DC， 

00:13:36.480 --> 00:13:43.769
您加载和卸载了很多类， 

00:13:39.000 --> 00:13:45.899
再次在t14中可用，下一个

00:13:43.769 --> 00:13:49.890
小技巧或改进或功能

00:13:45.899 --> 00:13:51.810
做好是钱，但是一个

00:13:49.890 --> 00:13:53.850
重要的是同等的填海或

00:13:51.810 --> 00:13:57.570
圆顶冰屋回收大片地区和

00:13:53.850 --> 00:14:00.000
这是在1860年发货的，所以让我们

00:13:57.570 --> 00:14:02.399
当物体更大时，看着那个

00:14:00.000 --> 00:14:04.829
他们被称为一半以上的地区

00:14:02.399 --> 00:14:06.870
在g1和该地区的巨大

00:14:04.829 --> 00:14:11.370
被分配或称为巨大

00:14:06.870 --> 00:14:12.839
区域g1不复制巨大

00:14:11.370 --> 00:14:15.029
因为它也是对象

00:14:12.839 --> 00:14:16.829
昂贵，他们是大半

00:14:15.029 --> 00:14:18.930
区域，因此占用大量内存

00:14:16.829 --> 00:14:21.449
因此复制它们需要很多

00:14:18.930 --> 00:14:23.940
时间我们不想做但

00:14:21.449 --> 00:14:26.190
另一方面，这些对象使用

00:14:23.940 --> 00:14:27.779
很多记忆，如果它们死了，我们

00:14:26.190 --> 00:14:29.310
想要很快释放它，所以

00:14:27.779 --> 00:14:32.130
我们可以将其重用于其他对象

00:14:29.310 --> 00:14:34.760
分配，所以我们要做的是

00:14:32.130 --> 00:14:37.500
利用g1跟踪的事实

00:14:34.760 --> 00:14:39.390
可以在旧区域之间引用

00:14:37.500 --> 00:14:41.519
在幻灯片上可以看到，我们有几个

00:14:39.390 --> 00:14:44.640
古老的半径地区和一个巨大的地方

00:14:41.519 --> 00:14:46.920
区域，我们看到没有传入

00:14:44.640 --> 00:14:49.949
提到那个巨大的物体

00:14:46.920 --> 00:14:52.110
在这个庞大的地区，有一个

00:14:49.949 --> 00:14:54.930
巨大的传出引用

00:14:52.110 --> 00:14:56.699
对象，但由于没有传入

00:14:54.930 --> 00:14:58.199
来自其他旧对象的引用

00:14:56.699 --> 00:14:59.790
渐变，这意味着唯一

00:14:58.199 --> 00:15:02.730
可以保留这个巨大的物体

00:14:59.790 --> 00:15:04.709
活着是约翰地区的一个物体

00:15:02.730 --> 00:15:06.959
在一个地区或生存地区

00:15:04.709 --> 00:15:08.940
但要记得当我们做一个巨人

00:15:06.959 --> 00:15:11.910
收藏品，我们将现场直播

00:15:08.940 --> 00:15:14.040
所有约翰地区的对象

00:15:11.910 --> 00:15:16.199
在垃圾收集期间，g1会检查

00:15:14.040 --> 00:15:19.980
如果抽屉和约翰的参考

00:15:16.199 --> 00:15:21.839
年轻的人反对这个庞大的对象，如果

00:15:19.980 --> 00:15:24.540
找不到约翰的参考

00:15:21.839 --> 00:15:25.690
很明显，我们知道什么都没有

00:15:24.540 --> 00:15:27.520
对这个人

00:15:25.690 --> 00:15:31.240
我们可以回收内存并重复使用

00:15:27.520 --> 00:15:33.400
之后，第1天可以使用此功能

00:15:31.240 --> 00:15:35.290
在一个

00:15:33.400 --> 00:15:37.840
年轻的收藏，它不需要

00:15:35.290 --> 00:15:40.270
等待并发标记完成

00:15:37.840 --> 00:15:43.180
意识到物体已经死了

00:15:40.270 --> 00:15:45.400
于1860年推出，可以帮助平息

00:15:43.180 --> 00:15:50.890
如果您分配了一大笔钱，就会亏损

00:15:45.400 --> 00:15:52.900
对象，所以下一个功能会看起来

00:15:50.890 --> 00:15:57.010
 at是自适应的并发类型

00:15:52.900 --> 00:15:59.020
标记，这是在JDK 9中交付的，因此

00:15:57.010 --> 00:16:00.970
看起来并发的标记周期

00:15:59.020 --> 00:16:03.130
通过所有

00:16:00.970 --> 00:16:06.040
再次需要一些旧区域

00:16:03.130 --> 00:16:08.560
一点时间直到完成，但是

00:16:06.040 --> 00:16:10.570
它确实完成很重要，因为如果

00:16:08.560 --> 00:16:12.100
它没有完成，然后g1没有

00:16:10.570 --> 00:16:16.950
需要的活动信息

00:16:12.100 --> 00:16:19.330
收集旧地区的物体

00:16:16.950 --> 00:16:22.030
并流标记必须在之前完成

00:16:19.330 --> 00:16:23.260
堆满了旧的地区和

00:16:22.030 --> 00:16:27.660
问题当然是解决了

00:16:23.260 --> 00:16:30.700
在ek9之前应该已经变形了

00:16:27.660 --> 00:16:34.150
您必须使用标志启动堆

00:16:30.700 --> 00:16:36.850
或kc％，表示您设置了一个值

00:16:34.150 --> 00:16:38.980
例如35和并发标记

00:16:36.850 --> 00:16:41.770
将在堆为35％时启动

00:16:38.980 --> 00:16:43.660
现在满了，这显然是一种方法

00:16:41.770 --> 00:16:46.540
静态方式来做到这一点

00:16:43.660 --> 00:16:48.070
遇到这个问题

00:16:46.540 --> 00:16:49.900
并发标记传奇也开始了

00:16:48.070 --> 00:16:52.480
早期导致稍差

00:16:49.900 --> 00:16:55.030
性能或为时已晚

00:16:52.480 --> 00:16:56.950
无法收集旧区域，所以在9中

00:16:55.030 --> 00:17:00.130
用更具适应性的替换它

00:16:56.950 --> 00:17:02.230
我们确实将动态计算用于

00:17:00.130 --> 00:17:05.170
最初的收藏

00:17:02.230 --> 00:17:07.090
对人体工程学引擎的价值

00:17:05.170 --> 00:17:08.890
该标志的然后我们对运行时进行采样

00:17:07.090 --> 00:17:11.860
数据并查看应用程序

00:17:08.890 --> 00:17:13.720
分配执行以及多少数据

00:17:11.860 --> 00:17:16.420
您分配，然后我们可以使用那些

00:17:13.720 --> 00:17:18.760
样本和以前的反馈

00:17:16.420 --> 00:17:21.580
并发标记周期以确定何时

00:17:18.760 --> 00:17:23.680
开始下一个，当然

00:17:21.580 --> 00:17:27.910
我们总是有安全余量，因为我们

00:17:23.680 --> 00:17:30.400
我真的很想及时完成，所以这

00:17:27.910 --> 00:17:33.250
导致更少的并发标记

00:17:30.400 --> 00:17:36.970
失败反过来使您免于

00:17:33.250 --> 00:17:40.900
大部分回退到完整的GCS 

00:17:36.970 --> 00:17:43.360
这由一个标志控制-xxg一个

00:17:40.900 --> 00:17:45.520
我希望使用自适应，并且已启用

00:17:43.360 --> 00:17:55.000
默认情况下是89，我建议您

00:17:45.520 --> 00:17:56.590
保持打开状态，让我们看一下

00:17:55.000 --> 00:17:59.860
我们新的更有效的收藏

00:17:56.590 --> 00:18:03.370
在JDK 9中已经介绍过，我们做了很多

00:17:59.860 --> 00:18:06.520
实际上进入UDK 9的工作

00:18:03.370 --> 00:18:08.860
超过250条公告

00:18:06.520 --> 00:18:10.600
 G 1到处都是东西

00:18:08.860 --> 00:18:13.360
有更多的平行相姐妹

00:18:10.600 --> 00:18:15.580
改善剥离尺寸平行释放

00:18:13.360 --> 00:18:18.730
我们有T实验室调整并发标记的大小

00:18:15.580 --> 00:18:19.930
从规则和更多更新

00:18:18.730 --> 00:18:23.940
内部数据结构

00:18:19.930 --> 00:18:28.090
垃圾收集器，我们有180多个

00:18:23.940 --> 00:18:31.150
您的G 1 GC中的错误修复

00:18:28.090 --> 00:18:33.340
犬，这一切的作用是什么

00:18:31.150 --> 00:18:36.760
我们实际上有多少改进

00:18:33.340 --> 00:18:39.700
嗯，实际上吸收量很大

00:18:36.760 --> 00:18:41.350
在这里，我有一堆漂亮的徽标， 

00:18:39.700 --> 00:18:43.120
编写一些各种各样的东西，然后我用管道

00:18:41.350 --> 00:18:47.200
合法的幻灯片出来了

00:18:43.120 --> 00:18:49.290
幻灯片，因此J 1已被少校拾取

00:18:47.200 --> 00:18:52.000
 Java框架和应用程序

00:18:49.290 --> 00:18:55.300
特别是Google应用程序，例如

00:18:52.000 --> 00:18:57.820
一些非常知名的ID 

00:18:55.300 --> 00:19:00.370
服务器端框架如此之多

00:18:57.820 --> 00:19:02.050
公司也已切换或

00:19:00.370 --> 00:19:04.720
切换到g1进行工作负载

00:19:02.050 --> 00:19:07.540
特别是那些他们关心的人

00:19:04.720 --> 00:19:10.320
发布时间，但也关心

00:19:07.540 --> 00:19:13.660
吞吐量需要混合使用

00:19:10.320 --> 00:19:16.750
切记始终与最新的JDK一起运行

00:19:13.660 --> 00:19:18.400
如果使用D 1运行则释放

00:19:16.750 --> 00:19:20.680
因为不断改进

00:19:18.400 --> 00:19:21.790
保持添加状态，以便您确保获得

00:19:20.680 --> 00:19:25.150
最好的表现

00:19:21.790 --> 00:19:27.730
以最新版本运行，让我们

00:19:25.150 --> 00:19:30.250
展望g1的未来

00:19:27.730 --> 00:19:31.810
这是怎么回事

00:19:30.250 --> 00:19:34.300
我不是坐在我们旁边吗

00:19:31.810 --> 00:19:37.090
持续改善甚至发展

00:19:34.300 --> 00:19:39.010
尽管9刚刚发布，所以对于

00:19:37.090 --> 00:19:42.220
我们期待明年的DK版本

00:19:39.010 --> 00:19:43.900
前向并行后退全DC，因此

00:19:42.220 --> 00:19:45.790
你们所有人都有细胞的原因

00:19:43.900 --> 00:19:47.680
问题将回退，这是

00:19:45.790 --> 00:19:50.140
完全的UC应该不会发生

00:19:47.680 --> 00:19:52.750
一个，但是如果确实发生了

00:19:50.140 --> 00:19:54.250
在帖子中真的很痛苦，所以对于

00:19:52.750 --> 00:19:56.800
我们期待的下一个十年版本

00:19:54.250 --> 00:19:58.840
正向平行折回充分利用

00:19:56.800 --> 00:20:01.510
即使是失败案例

00:19:58.840 --> 00:20:02.860
您将拥有更快，更快的速度

00:20:01.510 --> 00:20:04.960
复苏

00:20:02.860 --> 00:20:07.270
现在正在对此进行审查

00:20:04.960 --> 00:20:11.320
邮件列表，您可以看到更多

00:20:07.270 --> 00:20:15.340
 Jeff 307中的细节打开了一个衰减

00:20:11.320 --> 00:20:17.350
你的坚果一直斜线307 

00:20:15.340 --> 00:20:19.780
也对

00:20:17.350 --> 00:20:22.180
核心扫描当然是

00:20:19.780 --> 00:20:24.580
扫描是g1工作原理的详细信息， 

00:20:22.180 --> 00:20:26.710
它需要执行很多工作，所以

00:20:24.580 --> 00:20:29.380
今年夏天，我们修改了代码， 

00:20:26.710 --> 00:20:33.760
改善了很多，解决了

00:20:29.380 --> 00:20:36.070
以很好的提升和较短的姿势，但我们

00:20:33.760 --> 00:20:39.010
不要停在那里，我们继续

00:20:36.070 --> 00:20:41.800
持续不断地推动

00:20:39.010 --> 00:20:43.450
当有补丁继续进行时

00:20:41.800 --> 00:20:45.520
同时重建记忆集

00:20:43.450 --> 00:20:47.110
我们今天没有调查

00:20:45.520 --> 00:20:50.020
记得姐姐我们的关键数据结构

00:20:47.110 --> 00:20:51.930
讨论g1的工作原理，并在将来

00:20:50.020 --> 00:20:54.460
希望可以同时重建它们

00:20:51.930 --> 00:20:56.860
我们还在做很多工作

00:20:54.460 --> 00:20:58.600
人体工程学引擎试图对其进行改进

00:20:56.860 --> 00:21:01.210
并改善您的经济状况

00:20:58.600 --> 00:21:03.970
必须尽可能多地调音，但是g1可以

00:21:01.210 --> 00:21:08.110
自己找出要使用的值， 

00:21:03.970 --> 00:21:09.880
如果需要，现在设置什么标志

00:21:08.110 --> 00:21:13.870
保持联系，希望您会

00:21:09.880 --> 00:21:17.020
请加入社区热点-TC- 

00:21:13.870 --> 00:21:18.820
使用在开放指示器java.net上有

00:21:17.020 --> 00:21:21.640
很多经验丰富的用户都在经历这种痛苦

00:21:18.820 --> 00:21:23.170
列表，包括GC开发人员和

00:21:21.640 --> 00:21:25.120
您在那里的所有用户都在提供帮助

00:21:23.170 --> 00:21:27.520
互相谢谢你，我们真的

00:21:25.120 --> 00:21:29.830
感谢您认识那些谁

00:21:27.520 --> 00:21:31.030
调音很多，有很多经验

00:21:29.830 --> 00:21:33.910
帮助新来的人

00:21:31.030 --> 00:21:35.500
社区，还有一个问题，我们GC 

00:21:33.910 --> 00:21:37.750
开发人员还阅读了此邮件列表

00:21:35.500 --> 00:21:39.580
但不幸的是我们并不总是有

00:21:37.750 --> 00:21:41.830
是时候回答了，再次感谢您

00:21:39.580 --> 00:21:44.980
您的公司提供答案，您也可以

00:21:41.830 --> 00:21:46.710
使用我在OpenJDK频道上找到我们

00:21:44.980 --> 00:21:49.480
 IRC top c.net 

00:21:46.710 --> 00:21:53.130
如果有的话我们可以和我们聊天

00:21:49.480 --> 00:21:56.080
我们通常会遇到的问题和

00:21:53.130 --> 00:21:59.370
最后但并非最不重要的是，您可以找到我， 

00:21:56.080 --> 00:22:00.960
 JDK和JVM魔鬼的其他几个

00:21:59.370 --> 00:22:03.809
在Oracle的DevOps角落

00:22:00.960 --> 00:22:06.240
开发人员长期在Moscone West分享您

00:22:03.809 --> 00:22:08.580
可以了解更多有关在2g中工作的信息

00:22:06.240 --> 00:22:10.740
在开放指标java.net并学习

00:22:08.580 --> 00:22:13.740
有关工作人员和Java的更多信息

00:22:10.740 --> 00:22:16.830
 Java，如果您在Twitter上，请关注

00:22:13.740 --> 00:22:20.100
在OpenJDK，在worker和

00:22:16.830 --> 00:22:21.840
主题标签Java one和DevOps以及

00:22:20.100 --> 00:22:30.029
我想离开说谢谢

00:22:21.840 --> 00:22:32.870
和时间跳动的问题，所以

00:22:30.029 --> 00:22:32.870
是的问题

00:22:35.190 --> 00:22:39.870
不，我的问题是我要重复一遍

00:22:37.470 --> 00:22:41.220
视频，他们有吗

00:22:39.870 --> 00:22:43.860
我可以分享的绩效数字

00:22:41.220 --> 00:22:45.179
与您或基准测试结果有关，不，我

00:22:43.860 --> 00:22:47.789
没有可以与您分享的人

00:22:45.179 --> 00:22:49.260
不幸的是今天一片

00:22:47.789 --> 00:22:51.590
试试看，看看它的表现如何

00:22:49.260 --> 00:22:54.529
想你会很满意

00:22:51.590 --> 00:22:59.429
是的问题

00:22:54.529 --> 00:23:01.260
故事又来了，是的，所以

00:22:59.429 --> 00:23:03.450
问题是这些地区有多大？ 

00:23:01.260 --> 00:23:06.510
区域可以从1兆字节开始

00:23:03.450 --> 00:23:09.929
到32兆字节取决于您

00:23:06.510 --> 00:23:12.750
可以设置自己-x6 g1 he 

00:23:09.929 --> 00:23:14.610
生产，但我可能会建议

00:23:12.750 --> 00:23:16.830
你离开的你想选择吗

00:23:14.610 --> 00:23:18.510
合适的，所以我有区域

00:23:16.830 --> 00:23:20.460
看一下堆的总大小，然后

00:23:18.510 --> 00:23:22.559
决定但是如果您有问题

00:23:20.460 --> 00:23:24.450
例如巨大的分配

00:23:22.559 --> 00:23:27.529
和巨大的物体，那么你可能

00:23:24.450 --> 00:23:27.529
想把它撞起来

00:23:30.590 --> 00:23:38.150
是的，在这里再次提问

00:23:34.240 --> 00:23:39.710
是的，所以问题是一个物体是否

00:23:38.150 --> 00:23:41.150
大于阅读尺寸，我说

00:23:39.710 --> 00:23:42.860
读数可能只有一个

00:23:41.150 --> 00:23:44.480
兆字节（如果分配） 

00:23:42.860 --> 00:23:47.690
示例一个半兆字节的字节

00:23:44.480 --> 00:23:48.559
一些R的数组没有图像数据或

00:23:47.690 --> 00:23:51.350
某事

00:23:48.559 --> 00:23:53.210
当G 1分配好时， 

00:23:51.350 --> 00:23:55.520
区域和大型区域可以跨越

00:23:53.210 --> 00:23:57.620
多个区域，因此对象将是

00:23:55.520 --> 00:23:59.809
连续布置在多个人中

00:23:57.620 --> 00:24:02.120
在这种情况下，如果您有弹性

00:23:59.809 --> 00:24:04.760
 1/2兆字节的分配和1兆字节的分配

00:24:02.120 --> 00:24:07.100
地区，但仍然是唯一的

00:24:04.760 --> 00:24:12.230
在这两个区域中的对象

00:24:07.100 --> 00:24:14.440
在彼此旁边是的问题

00:24:12.230 --> 00:24:14.440
背部

00:24:15.700 --> 00:24:20.120
所以问题是这个功能

00:24:18.710 --> 00:24:22.760
吃在发布的应用程序

00:24:20.120 --> 00:24:25.700
默认情况下8020处于打开状态

00:24:22.760 --> 00:24:27.530
默认，因为其中花费很少

00:24:25.700 --> 00:24:30.049
 CPU方面都可以并发工作

00:24:27.530 --> 00:24:32.659
而且，也可以帮你摆个姿势

00:24:30.049 --> 00:24:37.600
我们默认情况下将其关闭，因此您可以选择

00:24:32.659 --> 00:24:37.600
是的，对前面的问题

00:24:43.370 --> 00:24:46.889
所以问题是，我明白了

00:24:45.630 --> 00:24:49.289
问题，如果问题

00:24:46.889 --> 00:24:51.630
问题是是否从复制对象

00:24:49.289 --> 00:24:55.080
一个地区到另一个地区，我们如何

00:24:51.630 --> 00:24:57.000
确保没有Java线程或您的

00:24:55.080 --> 00:25:00.299
程序正在修改以同时服从

00:24:57.000 --> 00:25:02.279
应用程序停止JVM的时间

00:25:00.299 --> 00:25:04.380
可以停止您所使用的Java应用程序

00:25:02.279 --> 00:25:06.630
除了gee应该不会知道

00:25:04.380 --> 00:25:08.490
在日志中，但应用程序是

00:25:06.630 --> 00:25:10.080
停止了-没有您的工作

00:25:08.490 --> 00:25:13.620
申请同时进行

00:25:10.080 --> 00:25:20.580
作为对象被复制是的问题

00:25:13.620 --> 00:25:22.049
空气滤清器，所以问题是

00:25:20.580 --> 00:25:24.600
有附属收藏吗

00:25:22.049 --> 00:25:27.179
与并发标记相似的选项

00:25:24.600 --> 00:25:31.010
你的意思是例如两个并发

00:25:27.179 --> 00:25:31.010
查找活动对象引擎见证

00:25:31.250 --> 00:25:37.260
是的，所以糖果同时找到

00:25:34.289 --> 00:25:39.059
就像期刊区域中的对象一样

00:25:37.260 --> 00:25:41.580
不能阻止世界，但这是

00:25:39.059 --> 00:25:43.980
基于非常大的假设

00:25:41.580 --> 00:25:46.019
通常对于大多数Java来说都是如此

00:25:43.980 --> 00:25:48.570
对象分配要么死亡，要么年轻

00:25:46.019 --> 00:25:49.980
或者他们活了很长时间

00:25:48.570 --> 00:25:52.350
即使你会填满邪恶

00:25:49.980 --> 00:25:55.139
伊甸园地区有很多物体

00:25:52.350 --> 00:25:58.350
当我们停下来时，我们只需要关心

00:25:55.139 --> 00:26:01.110
活物，通常很多

00:25:58.350 --> 00:26:04.679
比总数少得多

00:26:01.110 --> 00:26:08.370
对象已分配，因此

00:26:04.679 --> 00:26:13.519
我们没有这样的问题

00:26:08.370 --> 00:26:13.519
约翰·约翰长集合是问题

00:26:23.980 --> 00:26:27.280
所以问题是你有没有想过

00:26:25.420 --> 00:26:32.250
关于也许使用某种工作

00:26:27.280 --> 00:26:32.250
提供提示的注释是的

00:26:38.950 --> 00:26:44.009
你的意思是关于某个特定班级的提示

00:26:44.519 --> 00:26:50.609
是的，不，我们没有得到太多

00:26:47.499 --> 00:26:54.429
想到了，我们不认为有

00:26:50.609 --> 00:26:57.340
我们可以从这些提示中使用很多

00:26:54.429 --> 00:27:00.909
通常可以通过将其拟合

00:26:57.340 --> 00:27:03.759
 JVM本身，所以不，我们不认为

00:27:00.909 --> 00:27:06.099
关于它，但我们可能会做，但我不知道

00:27:03.759 --> 00:27:10.479
认为我们有太多我们可以珍视的东西

00:27:06.099 --> 00:27:16.659
我可以从中脱身

00:27:10.479 --> 00:27:22.779
另一个问题可能在后面

00:27:16.659 --> 00:27:24.099
我会预见其他任何大事

00:27:22.779 --> 00:27:26.859
给我一个改进

00:27:24.099 --> 00:27:29.229
确实认为那些持有

00:27:26.859 --> 00:27:32.200
当然可以在这边

00:27:29.229 --> 00:27:34.389
你和我之间有所不同，但这些是

00:27:32.200 --> 00:27:36.669
对我来说是很大的进步

00:27:34.389 --> 00:27:37.869
那些正在寻求重建的人

00:27:36.669 --> 00:27:41.499
记住SAT和改进的人体工程学

00:27:37.869 --> 00:27:43.599
希望也会导致大

00:27:41.499 --> 00:27:46.139
对我来说这些进步很大

00:27:43.599 --> 00:27:46.139
你我不知道

00:28:00.890 --> 00:28:09.030
是的，没做任何研究

00:28:06.450 --> 00:28:13.500
我们真的彻底改变了GC 

00:28:09.030 --> 00:28:16.830
想想一年大概300天这样的GC 

00:28:13.500 --> 00:28:18.510
是的，我们确实考虑了很多

00:28:16.830 --> 00:28:20.370
想在这里站起来猜测

00:28:18.510 --> 00:28:21.540
进去，什么会敲，但是的

00:28:20.370 --> 00:28:24.690
我们有很多活动

00:28:21.540 --> 00:28:25.920
希望这样做会导致

00:28:24.690 --> 00:28:28.050
并非总是有一些不错的改进

00:28:25.920 --> 00:28:29.640
不幸的是这样做，但是很多

00:28:28.050 --> 00:28:31.380
时间我们可以做一些很好的

00:28:29.640 --> 00:28:34.940
仪器，我们将继续做

00:28:31.380 --> 00:28:34.940
所以是的问题

00:28:43.730 --> 00:28:47.769
是的，所以问题是多少钱

00:28:45.559 --> 00:28:53.419
同时标记减少了对

00:28:47.769 --> 00:28:56.630
或者是完整UC的时间，所以G 1不会

00:28:53.419 --> 00:28:58.580
您在正常操作中看到的有用

00:28:56.630 --> 00:29:00.980
正如您在幻灯片上看到的那样，甚至更喜欢

00:28:58.580 --> 00:29:02.450
在年轻的收藏之间移动，然后

00:29:00.980 --> 00:29:04.700
过渡到年轻的收藏和

00:29:02.450 --> 00:29:06.710
并发标记，然后过渡到

00:29:04.700 --> 00:29:08.779
而是混合收藏，所以它将

00:29:06.710 --> 00:29:10.480
逐渐收集旧的辐射

00:29:08.779 --> 00:29:12.350
多个混合馆藏

00:29:10.480 --> 00:29:15.500
最好不必做一个完整的

00:29:12.350 --> 00:29:18.649
收集意味着很多

00:29:15.500 --> 00:29:20.630
与之相比，强制时间更短

00:29:18.649 --> 00:29:21.769
完整的收藏，所以希望我们会

00:29:20.630 --> 00:29:23.480
并发标记和混合

00:29:21.769 --> 00:29:25.940
您可以避免狂欢的集合

00:29:23.480 --> 00:29:28.090
完全不需要它们

00:29:25.940 --> 00:29:28.090
完全没有

