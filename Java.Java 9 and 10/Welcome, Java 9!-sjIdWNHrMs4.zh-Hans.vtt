WEBVTT
Kind: captions
Language: zh-Hans

00:00:00.030 --> 00:00:04.620
大家好，欢迎来到全新的

00:00:02.460 --> 00:00:06.540
 YouTube频道Cole FX我的名字是

00:00:04.620 --> 00:00:07.980
 Nikhil的结语，在这个频道中

00:00:06.540 --> 00:00:10.440
一般讨论软件开发

00:00:07.980 --> 00:00:12.780
特别关注JVM和

00:00:10.440 --> 00:00:14.820
今天的Java是特别的一天

00:00:12.780 --> 00:00:18.900
因为我们正在工作，而我

00:00:14.820 --> 00:00:20.760
派对Java 9今天发布，如果您在

00:00:18.900 --> 00:00:22.590
在Twitter上关注我或阅读我的

00:00:20.760 --> 00:00:25.080
您已经知道我的想法的博客

00:00:22.590 --> 00:00:27.180
因此，我开始了这个YouTube频道

00:00:25.080 --> 00:00:28.800
决定问Java的其他成员

00:00:27.180 --> 00:00:31.109
他们对新的想法

00:00:28.800 --> 00:00:34.290
事不宜迟地发布，让我们见面

00:00:31.109 --> 00:00:36.600
嗨，我是西蒙·枫

00:00:34.290 --> 00:00:39.120
开发者倡导总监为零

00:00:36.600 --> 00:00:40.800
你好，我是史蒂文·科尔布

00:00:39.120 --> 00:00:43.980
工程负责人类型和伽玛

00:00:40.800 --> 00:00:46.230
创意jato项目嗨，我叫

00:00:43.980 --> 00:00:50.160
基督教西班牙，我是

00:00:46.230 --> 00:00:51.840
 JUnit五个核心团队您好，我是Nicola，我是

00:00:50.160 --> 00:00:54.870
 Java开发人员作者兼培训师

00:00:51.840 --> 00:00:57.239
核心效果，嗨，我是Trisha，我是

00:00:54.870 --> 00:00:58.829
 JetBrains的开发倡导者您好，我是

00:00:57.239 --> 00:01:00.510
克里斯汀·拉加德我正在用短语

00:00:58.829 --> 00:01:03.120
担任开发人员经理

00:01:00.510 --> 00:01:04.530
关系，我的名字是阳光明媚的猴子， 

00:01:03.120 --> 00:01:06.150
我是一名软件架构师

00:01:04.530 --> 00:01:07.920
在荷兰发光，作者

00:01:06.150 --> 00:01:10.790
哦，罗尼·巴奇

00:01:07.920 --> 00:01:14.070
我是伊恩·谢尔顿（Ian Sheldon） 

00:01:10.790 --> 00:01:17.340
弹簧工作的软件开发人员

00:01:14.070 --> 00:01:19.200
关键数据团队我是Marco 

00:01:17.340 --> 00:01:21.990
 Beckwith我是准时的经理

00:01:19.200 --> 00:01:24.810
我有咨询服务的表演者

00:01:21.990 --> 00:01:27.900
叫代码Karim LLC你好，我叫

00:01:24.810 --> 00:01:29.250
我是Rafael的开放源代码作者

00:01:27.900 --> 00:01:30.900
像哥们一样，我也很属于自己

00:01:29.250 --> 00:01:31.590
莫吉托，而不是我是顾问

00:01:30.900 --> 00:01:33.750
和奥斯陆

00:01:31.590 --> 00:01:35.430
我叫Wayne Beaton我是导演

00:01:33.750 --> 00:01:36.270
 Eclipse上的开源项目

00:01:35.430 --> 00:01:39.570
基础

00:01:36.270 --> 00:01:41.430
我代表大约300开放

00:01:39.570 --> 00:01:42.990
 Eclipse托管的源项目

00:01:41.430 --> 00:01:45.810
涵盖各种基础的

00:01:42.990 --> 00:01:48.720
技术领域你好，我叫西蒙

00:01:45.810 --> 00:01:51.360
我和美世（Mercer）担任副首席技术官

00:01:48.720 --> 00:01:52.950
 Azul系统欢迎女士们和

00:01:51.360 --> 00:01:54.899
先生们，非常感谢你

00:01:52.950 --> 00:01:56.310
如果你是这个视频的一部分

00:01:54.899 --> 00:01:57.840
有兴趣了解更多有关这些的信息

00:01:56.310 --> 00:01:59.490
 Java专家或他们的项目

00:01:57.840 --> 00:02:01.770
提到检查出描述框

00:01:59.490 --> 00:02:02.909
其中充满了有用的链接，而

00:02:01.770 --> 00:02:04.500
你在那儿打了订阅

00:02:02.909 --> 00:02:06.689
按钮，这样您就不会错过我的其他任何人

00:02:04.500 --> 00:02:08.520
我问每位客人的影片

00:02:06.689 --> 00:02:10.920
同样的问题，你最喜欢什么

00:02:08.520 --> 00:02:12.989
 Java系列功能对我的工作有何影响， 

00:02:10.920 --> 00:02:13.860
我对您的项目有什么影响

00:02:12.989 --> 00:02:15.750
 java行有

00:02:13.860 --> 00:02:18.000
更广泛的社区有什么好处

00:02:15.750 --> 00:02:19.440
在新版本中学习的资源我们

00:02:18.000 --> 00:02:21.150
一步一步地解决这些问题

00:02:19.440 --> 00:02:22.800
我等不及要听答案了

00:02:21.150 --> 00:02:25.080
我们以掌声结束

00:02:22.800 --> 00:02:26.360
 JDK团队说了很多

00:02:25.080 --> 00:02:29.520
让我们继续

00:02:26.360 --> 00:02:31.110
 Java 9甚至包含许多功能

00:02:29.520 --> 00:02:34.530
除了模块系统，这里还有

00:02:31.110 --> 00:02:38.310
面板最喜欢我的功能

00:02:34.530 --> 00:02:40.440
使Java 9有趣的API 

00:02:38.310 --> 00:02:43.230
语言改变了已经发生的改变

00:02:40.440 --> 00:02:45.630
对流API进行了更改

00:02:43.230 --> 00:02:47.250
出厂的

00:02:45.630 --> 00:02:49.890
方法的初始值设定项

00:02:47.250 --> 00:02:52.110
所有这些对API的微小更改

00:02:49.890 --> 00:02:54.510
这使得Java更加容易和友好

00:02:52.110 --> 00:02:57.209
像你知道的新发展

00:02:54.510 --> 00:02:58.890
新流程处理api这些是

00:02:57.209 --> 00:03:01.080
我认为最多的Java 9件

00:02:58.890 --> 00:03:02.520
有趣，所以除了新模块

00:03:01.080 --> 00:03:04.140
 Java 9中的系统我也在寻找

00:03:02.520 --> 00:03:04.980
转发到一种私有方法

00:03:04.140 --> 00:03:06.690
介面

00:03:04.980 --> 00:03:08.220
我们已经添加了能够添加

00:03:06.690 --> 00:03:09.870
静态方法和默认方法

00:03:08.220 --> 00:03:12.120
 Java 8，但是私有方法会有所帮助

00:03:09.870 --> 00:03:15.030
此外，我们的设计特色

00:03:12.120 --> 00:03:17.850
再加上收集工厂，所以你

00:03:15.030 --> 00:03:19.590
也可以做一组和的列表

00:03:17.850 --> 00:03:22.230
映射将非常适合

00:03:19.590 --> 00:03:24.630
我正在寻找的缩短街机

00:03:22.230 --> 00:03:27.000
转发到我们的收藏工厂

00:03:24.630 --> 00:03:28.019
我正在寻找的Java 9功能的方法

00:03:27.000 --> 00:03:28.620
向最强者前进

00:03:28.019 --> 00:03:31.019
封装

00:03:28.620 --> 00:03:32.400
我以为该死的次数

00:03:31.019 --> 00:03:34.350
我希望我不必做这种类型

00:03:32.400 --> 00:03:36.720
公开，但别无选择

00:03:34.350 --> 00:03:38.250
你知道我还有另一种选择

00:03:36.720 --> 00:03:40.739
只是公开而不是出口

00:03:38.250 --> 00:03:42.209
包装我想我会经常使用

00:03:40.739 --> 00:03:43.920
我真的很期待

00:03:42.209 --> 00:03:45.690
我认为我现在要使用Java功能

00:03:43.920 --> 00:03:47.370
使用最多的是工厂方法

00:03:45.690 --> 00:03:49.200
集合可能看起来像一个

00:03:47.370 --> 00:03:50.850
语言变化很小，但是

00:03:49.200 --> 00:03:52.440
这只会让我的生活很多

00:03:50.850 --> 00:03:55.799
简化我的各种代码

00:03:52.440 --> 00:03:58.110
我认为大部分时间都写

00:03:55.799 --> 00:04:00.690
我期待第二次走

00:03:58.110 --> 00:04:02.580
 api，因为这真的很有趣

00:04:00.690 --> 00:04:04.470
到目前为止，您必须创建一个

00:04:02.580 --> 00:04:06.380
获取堆栈的异常或您有

00:04:04.470 --> 00:04:10.920
使用提交我们在内部api 

00:04:06.380 --> 00:04:12.810
但是所有这些事情都渴望

00:04:10.920 --> 00:04:14.940
他们创建了整个堆栈，如果您

00:04:12.810 --> 00:04:16.890
只需要一两个框架

00:04:14.940 --> 00:04:20.910
不可能，那是真的

00:04:16.890 --> 00:04:24.479
有趣和一个功能是

00:04:20.910 --> 00:04:25.830
不幸的是，实验性的ASP HTTP 

00:04:24.479 --> 00:04:26.870
对客户来说，我认为不需要

00:04:25.830 --> 00:04:29.310
说明

00:04:26.870 --> 00:04:31.230
我很期待看到Javon 

00:04:29.310 --> 00:04:33.420
 inés旗舰功能模块系统

00:04:31.230 --> 00:04:35.310
我相信在现实世界中会做到

00:04:33.420 --> 00:04:36.660
模块化是最重要的之一

00:04:35.310 --> 00:04:38.430
软件中的架构原则

00:04:36.660 --> 00:04:40.250
发展，但需要时间

00:04:38.430 --> 00:04:42.630
人们掌握并拥抱模块

00:04:40.250 --> 00:04:44.100
强大的封装和显式

00:04:42.630 --> 00:04:46.770
依赖关系将改变您的方式

00:04:44.100 --> 00:04:48.750
编码和设计我自己的一件事

00:04:46.770 --> 00:04:53.130
真的很期待

00:04:48.750 --> 00:04:54.600
可选API的附加功能之一

00:04:53.130 --> 00:04:56.670
我最喜欢的是竞争锁

00:04:54.600 --> 00:04:59.250
我通常讲的优化

00:04:56.670 --> 00:05:00.900
上还有弦密度

00:04:59.250 --> 00:05:01.770
正在进行的项目

00:05:00.900 --> 00:05:04.740
几年了

00:05:01.770 --> 00:05:07.320
我认为var手柄非常好

00:05:04.740 --> 00:05:10.040
手柄的功能基本上是

00:05:07.320 --> 00:05:13.260
公开直接内存访问和

00:05:10.040 --> 00:05:15.720
 Java的低级功能

00:05:13.260 --> 00:05:18.210
图书馆，直到现在这经常

00:05:15.720 --> 00:05:20.820
您自己使用不安全的API slyke 

00:05:18.210 --> 00:05:22.860
在msconfig上，这是非常重要的

00:05:20.820 --> 00:05:25.500
朝着揭露这个方向

00:05:22.860 --> 00:05:28.800
特征和标准化的方式

00:05:25.500 --> 00:05:31.260
有两个我特别喜欢的功能

00:05:28.800 --> 00:05:34.050
 jk9他们实际上都很小

00:05:31.260 --> 00:05:36.390
第一个甚至不是其中的一部分

00:05:34.050 --> 00:05:37.380
图书馆或图书馆的工作语言

00:05:36.390 --> 00:05:39.660
 Java虚拟机

00:05:37.380 --> 00:05:42.240
这就是我们现在拥有的事实

00:05:39.660 --> 00:05:43.920
可搜索的文档并转到Java 

00:05:42.240 --> 00:05:46.110
文件，如果您需要类似

00:05:43.920 --> 00:05:47.970
字符串生成器或类似的东西

00:05:46.110 --> 00:05:49.770
您不必一直滚动

00:05:47.970 --> 00:05:51.720
到字符串生成器，您只需键入

00:05:49.770 --> 00:05:54.900
它进入搜索栏，我发现

00:05:51.720 --> 00:05:56.340
令人难以置信的有用

00:05:54.900 --> 00:05:58.290
这22年来，我不会

00:05:56.340 --> 00:06:00.450
非常了解其他功能

00:05:58.290 --> 00:06:01.830
特别是像我注意到这个

00:06:00.450 --> 00:06:04.650
前几天我想使用它

00:06:01.830 --> 00:06:08.400
在JDK 8中不存在或者是

00:06:04.650 --> 00:06:10.890
有效地使用最终变量

00:06:08.400 --> 00:06:14.190
尝试使用资源块，所以现在您

00:06:10.890 --> 00:06:15.360
可以使用不在

00:06:14.190 --> 00:06:17.430
在没有资源块的情况下进行试用

00:06:15.360 --> 00:06:19.440
必须将其分配给新变量

00:06:17.430 --> 00:06:22.740
名字，我发现这可能非常

00:06:19.440 --> 00:06:24.570
很有用哇人们真的很喜欢

00:06:22.740 --> 00:06:27.750
收藏工厂是您的最爱

00:06:24.570 --> 00:06:29.850
让我在民意测验中知道

00:06:27.750 --> 00:06:32.340
 Java系列带来的不仅仅是新事物

00:06:29.850 --> 00:06:33.960
玩具虽然有很多项目

00:06:32.340 --> 00:06:35.850
需要一些清理才能正确

00:06:33.960 --> 00:06:37.169
运行新版本，我想

00:06:35.850 --> 00:06:39.930
为我的客人知道他们是否

00:06:37.169 --> 00:06:42.870
项目也被感染

00:06:39.930 --> 00:06:45.930
所以家Java九去效果杰

00:06:42.870 --> 00:06:49.979
很好地反叛了Java的关键部分之一

00:06:45.930 --> 00:06:51.360
 9是拼图模块系统和那些

00:06:49.979 --> 00:06:53.340
你们当中那些熟悉耐用性的人

00:06:51.360 --> 00:06:56.600
这是一个允许工作的工具

00:06:53.340 --> 00:06:59.580
现在要重新加载的课程和资源

00:06:56.600 --> 00:07:01.860
在Java之前的九个阶段

00:06:59.580 --> 00:07:03.509
几乎可以完成所有事情

00:07:01.860 --> 00:07:05.669
将与类class和

00:07:03.509 --> 00:07:07.169
类加载器

00:07:05.669 --> 00:07:09.360
糟糕的面包和黄油，但是

00:07:07.169 --> 00:07:13.979
 Java 9我们将介绍整个

00:07:09.360 --> 00:07:15.810
您知道新模块系统的模块

00:07:13.979 --> 00:07:17.729
路径将由

00:07:15.810 --> 00:07:20.760
范围将涉及的每个模块

00:07:17.729 --> 00:07:23.430
由每个模块确定，因此取决于

00:07:20.760 --> 00:07:25.620
其他模块可见的是

00:07:23.430 --> 00:07:27.690
由模块弹出模块信息确定

00:07:25.620 --> 00:07:29.550
点Java，因此我们需要了解

00:07:27.690 --> 00:07:31.349
 Java模块，我们需要更好

00:07:29.550 --> 00:07:33.570
将模块重新加载到前端或Java中

00:07:31.349 --> 00:07:36.449
以及模块上的类

00:07:33.570 --> 00:07:38.070
 Java 9的相对路径

00:07:36.449 --> 00:07:39.360
对我们的特殊影响很小

00:07:38.070 --> 00:07:40.620
项目主要是因为我们可能

00:07:39.360 --> 00:07:42.690
需要坚持使用Java率

00:07:40.620 --> 00:07:45.090
对于保险公司而言，短期而言，但我们

00:07:42.690 --> 00:07:48.780
将寻求添加模块信息到

00:07:45.090 --> 00:07:50.250
我们的开源项目

00:07:48.780 --> 00:07:52.139
人们想在Java 9上使用它们

00:07:50.250 --> 00:07:58.260
最好在这里有模块信息

00:07:52.139 --> 00:08:01.320
我们可以在其中集成Java 9个模块

00:07:58.260 --> 00:08:03.720
期末考试课程的过程或

00:08:01.320 --> 00:08:06.630
您正在进行的项目模块

00:08:03.720 --> 00:08:07.440
我们仍在探索最佳方法的任务

00:08:06.630 --> 00:08:09.599
处理它

00:08:07.440 --> 00:08:11.460
我已经在Java 9上尝试过

00:08:09.599 --> 00:08:13.770
我的小型微服务应用程序

00:08:11.460 --> 00:08:15.720
前一阵子我发现

00:08:13.770 --> 00:08:17.250
拼图对于维修非常有用

00:08:15.720 --> 00:08:19.289
我不关心的一些设计问题

00:08:17.250 --> 00:08:22.199
通常要考虑很多

00:08:19.289 --> 00:08:24.449
明显的模块化封装

00:08:22.199 --> 00:08:25.949
我想公开哪些代码

00:08:24.449 --> 00:08:27.720
我想隐藏哪些位

00:08:25.949 --> 00:08:30.270
我发现总体来说，这就是我的代码

00:08:27.720 --> 00:08:32.909
更干净，设计更好的我认为

00:08:30.270 --> 00:08:35.130
最大的部分将是

00:08:32.909 --> 00:08:38.580
现代化，所以我们需要确保

00:08:35.130 --> 00:08:40.289
与他的演员完美搭配

00:08:38.580 --> 00:08:43.020
 Java 9和模块系统

00:08:40.289 --> 00:08:44.820
激活我当前的项目是OSGi 

00:08:43.020 --> 00:08:46.740
基于，我完全希望保留

00:08:44.820 --> 00:08:48.570
即使使用Java 9模块也是如此

00:08:46.740 --> 00:08:51.089
系统就位获取应用程序

00:08:48.570 --> 00:08:52.709
在Java 9类路径上运行涉及

00:08:51.089 --> 00:08:53.250
调解图书馆的一些问题

00:08:52.709 --> 00:08:56.640
那

00:08:53.250 --> 00:08:58.140
规则和滥用我期望的ADK保险

00:08:56.640 --> 00:08:59.970
这是很多人的练习

00:08:58.140 --> 00:09:03.510
杰夫和我释放后将会经历

00:08:59.970 --> 00:09:07.470
实际上这是我的任务之一，而不是

00:09:03.510 --> 00:09:11.580
我最喜欢的任务，以检查发生了什么

00:09:07.470 --> 00:09:16.410
如果人们使用Java 9尝试Spring数据

00:09:11.580 --> 00:09:19.230
最有趣的部分是有两个

00:09:16.410 --> 00:09:22.980
由于模块损坏的东西

00:09:19.230 --> 00:09:25.410
我们在春季数据本身中修复了系统

00:09:22.980 --> 00:09:27.300
这样我们现在很好，我不

00:09:25.410 --> 00:09:30.330
认为这会带来很大的影响

00:09:27.300 --> 00:09:32.040
允许访问的最新更改

00:09:30.330 --> 00:09:35.280
例如合法访问

00:09:32.040 --> 00:09:37.560
真的打破了一切，我们在

00:09:35.280 --> 00:09:39.630
运动特征的途径

00:09:37.560 --> 00:09:41.430
更新库，因为它在那里

00:09:39.630 --> 00:09:42.960
破损大部分时间都在发生

00:09:41.430 --> 00:09:44.780
因此我们的代码不会受到太大影响

00:09:42.960 --> 00:09:48.330
因为我们没有用很多

00:09:44.780 --> 00:09:50.910
我们代码中的非标准化功能

00:09:48.330 --> 00:09:52.860
 Eclipse预测JAF和9的影响

00:09:50.910 --> 00:09:55.680
已经有一段时间了

00:09:52.860 --> 00:09:57.360
编译器团队必须基于

00:09:55.680 --> 00:10:00.120
规格不在

00:09:57.360 --> 00:10:01.740
在开放式JDK中实施，因此他们已经

00:10:00.120 --> 00:10:04.860
与Mark Reinholds团队合作

00:10:01.740 --> 00:10:06.540
阐明Eclipse规范的各个方面

00:10:04.860 --> 00:10:08.010
 Java开发团队已经将

00:10:06.540 --> 00:10:10.350
投入大量精力

00:10:08.010 --> 00:10:14.339
 Eclipse的Java编译器更新

00:10:10.350 --> 00:10:16.350
支持Java 9 ecj是独立的

00:10:14.339 --> 00:10:18.870
并完全开源实现

00:10:16.350 --> 00:10:21.150
这些当然是Java编译器

00:10:18.870 --> 00:10:23.940
编译器更新馈入Eclipse 

00:10:21.150 --> 00:10:26.880
 IDE对Java 9的更新支持

00:10:23.940 --> 00:10:28.620
网络工具支持以及您的更多支持

00:10:26.880 --> 00:10:30.810
推进我们产生的项目

00:10:28.620 --> 00:10:33.030
 Eclipse集合之类的库或

00:10:30.810 --> 00:10:34.320
 Eclipse链接将不得不决定

00:10:33.030 --> 00:10:37.350
他们是否会提供他们的

00:10:34.320 --> 00:10:38.970
代码作为我正在寻找的适当模块

00:10:37.350 --> 00:10:42.060
前进到新的第一版

00:10:38.970 --> 00:10:44.010
 Eclipse open j9项目实现

00:10:42.060 --> 00:10:47.670
 Java语言的JVM 

00:10:44.010 --> 00:10:50.010
支持Java 9的人不得不说

00:10:47.670 --> 00:10:53.700
就我个人而言，我们真的没有

00:10:50.010 --> 00:10:56.940
我们致力于开发JVM的项目

00:10:53.700 --> 00:10:58.740
所以从我们的角度来看，所有JDK 

00:10:56.940 --> 00:11:01.350
 9表示我们发布了一个新版本

00:10:58.740 --> 00:11:03.680
 sulu基于开放的JDK源代码

00:11:01.350 --> 00:11:06.540
我们将发布新版本的

00:11:03.680 --> 00:11:09.270
低延迟垃圾的商业JVM 

00:11:06.540 --> 00:11:11.790
收集和更快的JIT编译器，以及

00:11:09.270 --> 00:11:14.700
我们也将jdk设为9jk 9 

00:11:11.790 --> 00:11:16.680
很快，听起来也不太好

00:11:14.700 --> 00:11:18.720
不好，也许会比我们更顺畅

00:11:16.680 --> 00:11:20.700
预期的，但是这对于

00:11:18.720 --> 00:11:24.120
整个生态系统你怎么看

00:11:20.700 --> 00:11:27.330
它会受到影响，所以我认为约翰是

00:11:24.120 --> 00:11:30.330
去它会改变生态系统

00:11:27.330 --> 00:11:33.000
和更广泛的工作社区有两种方式

00:11:30.330 --> 00:11:35.970
第一种方式是我认为这是第一种

00:11:33.000 --> 00:11:39.330
首先进入一种新的Java室

00:11:35.970 --> 00:11:42.210
所有模块系统将是

00:11:39.330 --> 00:11:45.840
在我们的中心

00:11:42.210 --> 00:11:47.280
在Java中更快地改变事物

00:11:45.840 --> 00:11:48.660
未来，那是第一件事

00:11:47.280 --> 00:11:51.420
它还不在那里，但是

00:11:48.660 --> 00:11:52.800
第一步当然是第二件事

00:11:51.420 --> 00:11:55.350
想想它将如何改变Java 

00:11:52.800 --> 00:11:58.170
生态系统每个图书馆都很高

00:11:55.350 --> 00:12:00.510
框架应用服务器的每个人都在前进

00:11:58.170 --> 00:12:02.700
需要确保他们支持

00:12:00.510 --> 00:12:04.320
想要使用模块的应用程序

00:12:02.700 --> 00:12:07.680
系统是否正在转向他们

00:12:04.320 --> 00:12:09.420
库框架工具

00:12:07.680 --> 00:12:11.520
不能的自动模块

00:12:09.420 --> 00:12:14.130
由应用程序使用还是

00:12:11.520 --> 00:12:16.830
他们选择全程

00:12:14.130 --> 00:12:20.100
并使用模块中的

00:12:16.830 --> 00:12:21.900
摄影班，你知道改变

00:12:20.100 --> 00:12:24.120
他们把自己变成负面的名字

00:12:21.900 --> 00:12:26.460
模块完全取决于他们，但是

00:12:24.120 --> 00:12:29.490
整个Java社区将

00:12:26.460 --> 00:12:31.920
需要加强并确保

00:12:29.490 --> 00:12:33.360
他们肯定支持您的了解，所以我

00:12:31.920 --> 00:12:34.650
认为毫无疑问，Java没有

00:12:33.360 --> 00:12:37.200
会在更大范围内引起一些问题

00:12:34.650 --> 00:12:38.880
社区，这是你的专业

00:12:37.200 --> 00:12:41.130
发布它引入了大视野功能

00:12:38.880 --> 00:12:42.750
从根本上说，就是骇客

00:12:41.130 --> 00:12:43.110
过去20年来我们一直在使用

00:12:42.750 --> 00:12:44.700
年份

00:12:43.110 --> 00:12:46.620
这些黑客中的许多将

00:12:44.700 --> 00:12:48.570
现在关门了

00:12:46.620 --> 00:12:51.210
学期，但无疑会导致我们一些

00:12:48.570 --> 00:12:53.220
短期内是痛苦的，是的，这很难

00:12:51.210 --> 00:12:55.860
一个不容易回答的模块

00:12:53.220 --> 00:12:58.320
系统打包了一些迁移功能

00:12:55.860 --> 00:13:00.090
因此从理论上讲

00:12:58.320 --> 00:13:03.210
整个社区

00:13:00.090 --> 00:13:05.910
生态系统逐步模块化

00:13:03.210 --> 00:13:08.490
每个项目都按照自己的进度

00:13:05.910 --> 00:13:10.620
这有点像理想， 

00:13:08.490 --> 00:13:13.770
不是很明显

00:13:10.620 --> 00:13:15.120
完全像那样工作，所以我确定

00:13:13.770 --> 00:13:17.160
不会有像这样的分裂

00:13:15.120 --> 00:13:19.709
在Python 2和3之间

00:13:17.160 --> 00:13:21.149
 -在Java 8中，在Java 9中不是

00:13:19.709 --> 00:13:22.860
不可能会有更多

00:13:21.149 --> 00:13:24.540
保留更新到Java 9 

00:13:22.860 --> 00:13:27.360
比战争当升级到Java八

00:13:24.540 --> 00:13:28.860
就更广泛的社区拼图而言

00:13:27.360 --> 00:13:30.629
有很大的潜力

00:13:28.860 --> 00:13:32.279
对我们发展方式的影响

00:13:30.629 --> 00:13:34.410
以我们消费其他方式的方式

00:13:32.279 --> 00:13:36.449
代码，所以我真的很感兴趣

00:13:34.410 --> 00:13:38.550
那里会发生什么

00:13:36.449 --> 00:13:40.410
我不太确定到底能多快

00:13:38.550 --> 00:13:42.240
这将被采用，但我认为

00:13:40.410 --> 00:13:44.129
这将是非常有趣的

00:13:42.240 --> 00:13:46.259
 Java 9的发布现已开始

00:13:44.129 --> 00:13:48.079
我们在Java社区的角落

00:13:46.259 --> 00:13:50.250
重视我开发的软件

00:13:48.079 --> 00:13:52.379
特别想鼓励图书馆

00:13:50.250 --> 00:13:54.480
保持采用模块系统

00:13:52.379 --> 00:13:56.879
作为应用程序开发人员，我们可以

00:13:54.480 --> 00:14:00.930
从长远来看，从中受益

00:13:56.879 --> 00:14:03.540
 JRE所用的API的年限和

00:14:00.930 --> 00:14:06.589
得到优化以获得模块化的权利，所以我

00:14:03.540 --> 00:14:09.209
没有看到很多人跳进去

00:14:06.589 --> 00:14:11.220
现代化其当前的应用程序

00:14:09.209 --> 00:14:15.680
但我看到它的长期利益是

00:14:11.220 --> 00:14:18.569
模块化将要开放

00:14:15.680 --> 00:14:22.709
的理解以及

00:14:18.569 --> 00:14:24.720
依赖性和相关性以及

00:14:22.709 --> 00:14:26.430
在图书馆和一切之间

00:14:24.720 --> 00:14:29.279
这将使整个国家受益

00:14:26.430 --> 00:14:31.860
从长远来看生态系统

00:14:29.279 --> 00:14:33.899
学期，我希望有点模块化

00:14:31.860 --> 00:14:37.290
基本上被接受为一般概念

00:14:33.899 --> 00:14:39.029
而且更多的图书馆迁移了，但是我

00:14:37.290 --> 00:14:41.699
也认为很多图书馆会

00:14:39.029 --> 00:14:43.110
随着时间的流逝，死了，因为许多图书馆

00:14:41.699 --> 00:14:44.939
真的不再维护了

00:14:43.110 --> 00:14:48.360
至今仍在使用，因为它们可以

00:14:44.939 --> 00:14:49.529
今天用过，但我认为那些图书馆

00:14:48.360 --> 00:14:51.509
不再有太多支持了

00:14:49.529 --> 00:14:53.519
会消失，也许那是一个好习惯

00:14:51.509 --> 00:14:55.500
东西，所以你不应该新

00:14:53.519 --> 00:14:57.360
图书馆可以在这种情况下发展壮大， 

00:14:55.500 --> 00:14:59.670
是的，我很高兴看到发生了什么

00:14:57.360 --> 00:15:01.709
那我就不确定

00:14:59.670 --> 00:15:03.980
约翰今晚本身的直接影响

00:15:01.709 --> 00:15:06.389
我将在更广泛的Java社区中拥有

00:15:03.980 --> 00:15:08.689
很想知道什么样的真实

00:15:06.389 --> 00:15:11.699
该社区将看到的采用率

00:15:08.689 --> 00:15:14.339
不管接下来的清理工作

00:15:11.699 --> 00:15:17.279
在Java 9之前，它纠结了核心

00:15:14.339 --> 00:15:19.529
库使模块化甚至

00:15:17.279 --> 00:15:22.319
可能有必要的工作

00:15:19.529 --> 00:15:25.199
本身可以延长Java的寿命

00:15:22.319 --> 00:15:26.759
一定很有趣，看看

00:15:25.199 --> 00:15:29.040
更广泛的社区决定与

00:15:26.759 --> 00:15:29.520
例如谁将提供他们的模块

00:15:29.040 --> 00:15:33.150
码

00:15:29.520 --> 00:15:34.980
模块形式的时间会告诉我我认为JDK 9 

00:15:33.150 --> 00:15:37.050
将会产生很大的影响， 

00:15:34.980 --> 00:15:40.680
最大的事情是确保

00:15:37.050 --> 00:15:43.460
人们的代码在JDK 9上运行是因为

00:15:40.680 --> 00:15:47.700
各种封装

00:15:43.460 --> 00:15:49.380
 JDK和

00:15:47.700 --> 00:15:51.480
尤其在您

00:15:49.380 --> 00:15:53.610
使用框架或第三方

00:15:51.480 --> 00:15:55.260
使用诸如

00:15:53.610 --> 00:15:57.270
一些误解，你可能不是

00:15:55.260 --> 00:15:58.740
意识到显然有

00:15:57.270 --> 00:16:02.130
命令行选项将启用

00:15:58.740 --> 00:16:03.390
您可以使过渡更容易，但是

00:16:02.130 --> 00:16:06.000
这将产生很大的影响

00:16:03.390 --> 00:16:07.920
人们开始使用JDK 9 

00:16:06.000 --> 00:16:09.350
并确保其代码在

00:16:07.920 --> 00:16:11.400
没有任何问题

00:16:09.350 --> 00:16:13.320
我要提到的另一件事是

00:16:11.400 --> 00:16:15.810
有很多命令行选项

00:16:13.320 --> 00:16:18.420
 -xx个在

00:16:15.810 --> 00:16:19.860
 JDK 8和JDK 9就是这样

00:16:18.420 --> 00:16:23.040
人们将不得不适应

00:16:19.860 --> 00:16:24.780
听起来好像社区需要

00:16:23.040 --> 00:16:26.910
加强游戏，真正了解

00:16:24.780 --> 00:16:28.940
模块化和兼容性挑战

00:16:26.910 --> 00:16:32.400
您可以推荐的任何好的资源

00:16:28.940 --> 00:16:35.670
我给你一个选择--书籍

00:16:32.400 --> 00:16:39.600
围绕Java模块化和拼图

00:16:35.670 --> 00:16:42.540
首先是Nicola Pollock的Java模块

00:16:39.600 --> 00:16:44.190
曼宁的系统书第二本是

00:16:42.540 --> 00:16:46.980
实际上是我自己回顾过的一个，所以我

00:16:44.190 --> 00:16:48.990
知道这是一本很棒的书，叫做

00:16:46.980 --> 00:16:51.390
 Java 9，称为Java 9模块化

00:16:48.990 --> 00:16:53.970
这不是莱利的书，那是保罗的

00:16:51.390 --> 00:16:55.830
贝克尔，沙和Mac，所以我都相信

00:16:53.970 --> 00:16:58.130
将会是好书，我认为

00:16:55.830 --> 00:17:00.420
每个开发人员真正需要的每个人

00:16:58.130 --> 00:17:03.450
学习并了解即将发生的事情

00:17:00.420 --> 00:17:05.190
 Java 9及更高版本的模块系统

00:17:03.450 --> 00:17:06.270
还有模块部分

00:17:05.190 --> 00:17:08.040
将会影响所有人的东西

00:17:06.270 --> 00:17:09.570
我认为这是

00:17:08.040 --> 00:17:11.970
对所有开发人员来说都很重要

00:17:09.570 --> 00:17:14.250
了解，所以你可以寻找一件事

00:17:11.970 --> 00:17:16.170
在Java 9上是我关于模块名称的博客， 

00:17:14.250 --> 00:17:18.720
确切的模块是什么以及如何

00:17:16.170 --> 00:17:21.950
不同于人工制品，你知道

00:17:18.720 --> 00:17:23.790
我要说正确的好书得到书

00:17:21.950 --> 00:17:26.220
你一定要看看我的

00:17:23.790 --> 00:17:28.050
我在其中的实际Java 9演示文稿

00:17:26.220 --> 00:17:29.220
尝试进行现场演示

00:17:28.050 --> 00:17:31.560
 Java 9中的一些功能

00:17:29.220 --> 00:17:33.240
实际上，显然我要使用

00:17:31.560 --> 00:17:35.160
您还读了我的书《 Jaafar》 

00:17:33.240 --> 00:17:37.680
最近完成的模块化

00:17:35.160 --> 00:17:38.640
由Ronnie作为组织者发布

00:17:37.680 --> 00:17:40.410
美元，我当然要

00:17:38.640 --> 00:17:41.720
提到我们放干的视频

00:17:40.410 --> 00:17:43.490
会议结束后

00:17:41.720 --> 00:17:46.040
关于最新的最新话题

00:17:43.490 --> 00:17:48.230
如果您想知道会发生什么

00:17:46.040 --> 00:17:51.200
了解实现支持需要采取的措施

00:17:48.230 --> 00:17:53.060
适用于Java 9，包括独立的

00:17:51.200 --> 00:17:56.410
的开源实现

00:17:53.060 --> 00:18:01.550
编译器签出wiki dot eclipse.org 

00:17:56.410 --> 00:18:02.630
大写的J Java 9我要打击

00:18:01.550 --> 00:18:04.040
我自己的喇叭在这里，我要说

00:18:02.630 --> 00:18:05.900
我有几件事

00:18:04.040 --> 00:18:07.400
我认为对您很有用

00:18:05.900 --> 00:18:09.650
可以在YouTube上找到我已经完成的

00:18:07.400 --> 00:18:11.810
演示文稿中的55个新功能

00:18:09.650 --> 00:18:13.640
 JDK 9在许多会议和

00:18:11.810 --> 00:18:14.990
最近我写了几本书

00:18:13.640 --> 00:18:16.040
人们可能会写的博客条目

00:18:14.990 --> 00:18:19.490
觉得有用

00:18:16.040 --> 00:18:21.050
其中之一与答案有关

00:18:19.490 --> 00:18:23.570
上一个问题在哪里

00:18:21.050 --> 00:18:24.950
我从以下方面看了变化

00:18:23.570 --> 00:18:27.080
命令行事实上我做了一个整个博客

00:18:24.950 --> 00:18:29.780
之间的所有不兼容的变化

00:18:27.080 --> 00:18:34.400
我认为人们会选择JDK 8和JDK 9 

00:18:29.780 --> 00:18:36.110
可能会发现它非常有用哦

00:18:34.400 --> 00:18:38.630
回来已经让我把这个

00:18:36.110 --> 00:18:40.280
某个地方把它包起来，我问我的

00:18:38.630 --> 00:18:43.310
客人很好，如果他们想感谢

00:18:40.280 --> 00:18:45.530
 JDK团队和哦，男孩，他们不是这样的

00:18:43.310 --> 00:18:47.450
是给您的JDK工程师

00:18:45.530 --> 00:18:50.270
你可以沐浴在来之不易的荣耀中

00:18:47.450 --> 00:18:53.750
你的辛苦，我认为马克·莱因霍德（Mark Reinhold）做过

00:18:50.270 --> 00:18:55.520
你知道很多好的工作

00:18:53.750 --> 00:19:00.160
留意生态系统的建议

00:18:55.520 --> 00:19:03.410
努力确保Java 9在

00:19:00.160 --> 00:19:06.200
一个更好的国家供采纳

00:19:03.410 --> 00:19:07.580
 JDK团队非常感谢生态系统

00:19:06.200 --> 00:19:09.920
在Java 9方面非常努力

00:19:07.580 --> 00:19:11.840
发布模块是一个棘手的问题， 

00:19:09.920 --> 00:19:13.850
我们想出了一个解决方案

00:19:11.840 --> 00:19:16.400
最后，虽然努力

00:19:13.850 --> 00:19:18.500
短期内会像

00:19:16.400 --> 00:19:20.240
保留和减轻亚历克斯·巴克利（Alex Buckley）作为

00:19:18.500 --> 00:19:22.730
我看到那三个是第一个

00:19:20.240 --> 00:19:23.930
现代系统努力的路线，但是

00:19:22.730 --> 00:19:25.790
我敢肯定他们不是唯一的人

00:19:23.930 --> 00:19:26.930
对，所以我要感谢所有默默无闻的人

00:19:25.790 --> 00:19:29.660
在

00:19:26.930 --> 00:19:32.120
我肯定会参加很多背景

00:19:29.660 --> 00:19:34.880
在将近10个模型后制作模型系统

00:19:32.120 --> 00:19:37.760
年终于来到Java生态系统

00:19:34.880 --> 00:19:39.500
在Java 9中非常感谢我想

00:19:37.760 --> 00:19:41.870
感谢整个JK团队的所有努力

00:19:39.500 --> 00:19:43.190
在这个版本上的辛苦工作

00:19:41.870 --> 00:19:45.020
虽然要出去，但一定是

00:19:43.190 --> 00:19:46.850
如此努力工作，他们一直

00:19:45.020 --> 00:19:48.530
真正回应任何问题

00:19:46.850 --> 00:19:51.260
我们有任何来自社区的反馈

00:19:48.530 --> 00:19:53.600
他们花了时间听

00:19:51.260 --> 00:19:54.590
我们并改变语言

00:19:53.600 --> 00:19:56.750
实际上

00:19:54.590 --> 00:19:59.390
这实际上会帮助我认为这是

00:19:56.750 --> 00:20:00.950
太好了，谢谢你

00:19:59.390 --> 00:20:03.110
 [音乐] 

00:20:00.950 --> 00:20:08.000
我一定要感谢马克·雷诺兹

00:20:03.110 --> 00:20:11.390
为了让我对一切都不太糟

00:20:08.000 --> 00:20:13.640
我的意见，所以我认为有时候

00:20:11.390 --> 00:20:17.270
不容易，我想换一种方式

00:20:13.640 --> 00:20:19.550
周围也是如此，所以他做得很好

00:20:17.270 --> 00:20:22.640
模块系统对于

00:20:19.550 --> 00:20:25.310
 JDK本身是必需的步骤，因此

00:20:22.640 --> 00:20:28.370
显然所有其他人都有

00:20:25.310 --> 00:20:30.590
从事Java 9 Brian胆量John Rose I的工作

00:20:28.370 --> 00:20:33.710
不要以为可以挑出来

00:20:30.590 --> 00:20:35.480
我想要一些非常具体的人

00:20:33.710 --> 00:20:38.060
感谢Alex Berkeley和Ellen Bateman 

00:20:35.480 --> 00:20:39.500
从JDK中可以看到我们两个主要参与者

00:20:38.060 --> 00:20:41.060
模块系统的实施

00:20:39.500 --> 00:20:42.680
在爪哇之夜，但他们也

00:20:41.060 --> 00:20:44.570
亲切的服务时间

00:20:42.680 --> 00:20:46.640
 Javan 9的技术评审员

00:20:44.570 --> 00:20:49.640
模块化书谢谢大家

00:20:46.640 --> 00:20:51.770
我是表演团队的一员

00:20:49.640 --> 00:20:53.270
 JDK性能团队，所以我想

00:20:51.770 --> 00:20:55.940
感谢表演团队中的每个人

00:20:53.270 --> 00:20:58.580
用于在Java 9中出色地完成工作

00:20:55.940 --> 00:21:01.190
释放弗拉基米尔的损失

00:20:58.580 --> 00:21:03.110
他从事物联网工作的编译器团队

00:21:01.190 --> 00:21:04.910
完成，还有很多其他的事情

00:21:03.110 --> 00:21:07.250
开发人员真的非常感谢你

00:21:04.910 --> 00:21:09.080
感谢所有的辛勤工作，是的，我

00:21:07.250 --> 00:21:11.000
想我要感谢马克·莱因霍尔德他

00:21:09.080 --> 00:21:13.970
真的在那里，你有很多

00:21:11.000 --> 00:21:16.700
批评可能是部分应得的，但

00:21:13.970 --> 00:21:18.110
也经常不配，他真的

00:21:16.700 --> 00:21:19.370
推了进去

00:21:18.110 --> 00:21:21.170
考虑人们在关注什么

00:21:19.370 --> 00:21:24.200
我认为他确实做得很好

00:21:21.170 --> 00:21:26.170
在那里，并感谢他获得

00:21:24.200 --> 00:21:28.280
拼图完成的这项工作是一个艰巨的项目

00:21:26.170 --> 00:21:30.860
是的，我认为那里有很多

00:21:28.280 --> 00:21:32.990
参与《 JJ 9》的人

00:21:30.860 --> 00:21:34.970
这可能是一个人的错

00:21:32.990 --> 00:21:37.130
淘汰一个特定的人

00:21:34.970 --> 00:21:38.480
我觉得一个人的情况

00:21:37.130 --> 00:21:41.210
需要被挑出来，那不是

00:21:38.480 --> 00:21:43.190
权利持有，你必须为他效劳

00:21:41.210 --> 00:21:45.140
坚持了这么久，最后

00:21:43.190 --> 00:21:47.660
最终完成模块化

00:21:45.140 --> 00:21:49.760
模块化进入JDK，所以我把我的

00:21:47.660 --> 00:21:51.760
勇往直前和他的毅力

00:21:49.760 --> 00:21:55.700
为了使这个通过

00:21:51.760 --> 00:21:59.030
终于荒野了，一切都很棒

00:21:55.700 --> 00:22:01.460
指导词让我都很高兴

00:21:59.030 --> 00:22:02.750
今天就是这样，再次感谢

00:22:01.460 --> 00:22:04.610
很棒的人参加了

00:22:02.750 --> 00:22:06.410
视频，请确保跟随他们

00:22:04.610 --> 00:22:07.970
 Twitter或查看他们的链接

00:22:06.410 --> 00:22:09.769
放在说明框中

00:22:07.970 --> 00:22:12.590
如果您想观看更多有关的视频

00:22:09.769 --> 00:22:14.029
软件开发JVM和Java make 

00:22:12.590 --> 00:22:15.830
一定要订阅此频道或

00:22:14.029 --> 00:22:17.950
在推特上关注我

00:22:15.830 --> 00:22:20.870
帕塔克这么长

00:22:17.950 --> 00:22:24.409
欢迎工作，知道这很高兴

00:22:20.870 --> 00:22:26.960
终于让您Java 9到这里了

00:22:24.409 --> 00:22:30.529
在网上用评论拴住我一个

00:22:26.960 --> 00:22:32.840
终于欢迎我们的Java 9霸主

00:22:30.529 --> 00:22:38.779
 Java 9在这里，我期待着

00:22:32.840 --> 00:22:41.720
 1903年嘿道场9我想我们已经等了

00:22:38.779 --> 00:22:44.110
现在足够长的时间，祝你好运

00:22:41.720 --> 00:22:50.200
滴答滴答地打发时间Joe 9 

00:22:44.110 --> 00:22:50.200
欢迎Java 9欢迎JDK 9 

00:22:50.279 --> 00:22:52.340
啊

