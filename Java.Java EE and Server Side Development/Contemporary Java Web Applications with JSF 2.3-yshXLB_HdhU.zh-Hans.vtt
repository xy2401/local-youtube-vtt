WEBVTT
Kind: captions
Language: zh-Hans

00:00:03.190 --> 00:00:08.740
你好，嘿，你知道我叫埃德·伯恩斯

00:00:06.479 --> 00:00:11.230
新幽默好吧，你去

00:00:08.740 --> 00:00:14.549
我很高兴今天在这里讲话

00:00:11.230 --> 00:00:17.020
关于JSF 2.3，让我们开始吧

00:00:14.549 --> 00:00:18.310
此安全港声明是标准的

00:00:17.020 --> 00:00:20.560
但是我在跟你谈论的一切

00:00:18.310 --> 00:00:25.470
已经完成，所以你可以数

00:00:20.560 --> 00:00:30.539
就可以了，所以这个演讲假设基本

00:00:25.470 --> 00:00:32.920
对JSF和JSF的熟悉程度很多

00:00:30.539 --> 00:00:35.469
浮华的组件和美妙的方法

00:00:32.920 --> 00:00:38.530
使用它还有其他资源

00:00:35.469 --> 00:00:40.660
访问有关JSF的观点

00:00:38.530 --> 00:00:45.190
这个话题多一点

00:00:40.660 --> 00:00:49.059
前面的历史内容紧随其后

00:00:45.190 --> 00:00:50.230
对JSF的一些看法，然后

00:00:49.059 --> 00:00:52.180
谈话的重点是新功能

00:00:50.230 --> 00:00:55.180
评论，我将完全在

00:00:52.180 --> 00:00:57.730
在大多数情况下，NetBeans我都很友善

00:00:55.180 --> 00:01:01.449
通过代码打开和

00:00:57.730 --> 00:01:04.000
然后给你一些关于开放的话

00:01:01.449 --> 00:01:06.820
 Java EE和JSF的观点

00:01:04.000 --> 00:01:08.950
我打算离开五到十

00:01:06.820 --> 00:01:11.230
分钟的质量检查时间，即使我们

00:01:08.950 --> 00:01:14.170
我认为会议时长只有45分钟

00:01:11.230 --> 00:01:15.370
我们可以做到，我有点想

00:01:14.170 --> 00:01:17.260
保持互动性

00:01:15.370 --> 00:01:19.660
可能我知道他们正在录制这个

00:01:17.260 --> 00:01:23.680
会议，所以每当有人问一个

00:01:19.660 --> 00:01:25.510
问题，我一定会回答重复

00:01:23.680 --> 00:01:26.980
这个问题，所以如果你有一个问题

00:01:25.510 --> 00:01:28.630
您想看到的地址

00:01:26.980 --> 00:01:32.680
即使在中间也举手

00:01:28.630 --> 00:01:36.640
会议，因此JSDF一直在

00:01:32.680 --> 00:01:38.620
很长时间，这是JSF的16年了

00:01:36.640 --> 00:01:43.090
宣布Java 1主题演讲

00:01:38.620 --> 00:01:46.120
 2001年有人记得这个吗

00:01:43.090 --> 00:01:51.100
首次安装时滑动

00:01:46.120 --> 00:01:52.830
好吧，所以基本思想仍然是

00:01:51.100 --> 00:01:58.240
同样，您知道这就是简单的Java 

00:01:52.830 --> 00:02:00.010
服务器端Web框架的内容以及原因

00:01:58.240 --> 00:02:01.480
你知道怎么可能仍然

00:02:00.010 --> 00:02:04.660
如此久远的相关性

00:02:01.480 --> 00:02:08.080
很好的抽象和JSF的核心

00:02:04.660 --> 00:02:12.040
因为任何规范实际上都是

00:02:08.080 --> 00:02:14.530
抽象，它是一种抽象

00:02:12.040 --> 00:02:17.050
使您可以构建

00:02:14.530 --> 00:02:19.030
快速构建可维护的本地化

00:02:17.050 --> 00:02:22.240
它将确保与设备无关的安全

00:02:19.030 --> 00:02:24.670
漂亮，使用起来很有趣

00:02:22.240 --> 00:02:27.280
准备本次会议我做了一点

00:02:24.670 --> 00:02:30.880
关于stackoverflow的研究这里有很多

00:02:27.280 --> 00:02:35.370
相比某些堆栈溢出命中

00:02:30.880 --> 00:02:38.290
截至昨天的其他热门

00:02:35.370 --> 00:02:40.810
 JSF的优势在于

00:02:38.290 --> 00:02:44.500
指标，我正在与某人交谈

00:02:40.810 --> 00:02:46.090
 PHP开发人员参加聚会

00:02:44.500 --> 00:02:48.310
昨晚有人去那个零

00:02:46.090 --> 00:02:52.600
周转党一，是的，好的

00:02:48.310 --> 00:02:54.180
祝你玩得开心

00:02:52.600 --> 00:02:57.370
那些扔那个的人

00:02:54.180 --> 00:02:59.680
与PHP开发人员交谈，他们说

00:02:57.370 --> 00:03:03.130
是的，Stack Overflow是一个

00:02:59.680 --> 00:03:03.610
很好的安全措施，因为我有

00:03:03.130 --> 00:03:08.710
某种意义上

00:03:03.610 --> 00:03:10.300
秋藤有一种感觉，如果有的话

00:03:08.710 --> 00:03:13.090
问题，我会有一个

00:03:10.300 --> 00:03:14.350
为此，现在来看

00:03:13.090 --> 00:03:16.450
给你一些观点

00:03:14.350 --> 00:03:22.560
图，如果您将PHP添加到其中

00:03:16.450 --> 00:03:25.270
所有其他都变成噪音，所以

00:03:22.560 --> 00:03:27.459
那只是我不知道的事情

00:03:25.270 --> 00:03:28.720
我不是PHP用户，所以我没有

00:03:27.459 --> 00:03:32.040
真的尝试这样做，但这是一个

00:03:28.720 --> 00:03:32.040
很多堆栈溢出

00:03:32.500 --> 00:03:36.850
所以JSF怎么仍然有意义

00:03:35.800 --> 00:03:40.050
对

00:03:36.850 --> 00:03:42.550
 JSF具有悠久的历史

00:03:40.050 --> 00:03:45.160
来自社区生活的可靠想法

00:03:42.550 --> 00:03:47.050
室内社区，所以它不是死人

00:03:45.160 --> 00:03:49.090
这是一个活着的东西，这是一个

00:03:47.050 --> 00:03:50.680
所有人都活着的东西

00:03:49.090 --> 00:03:52.720
我已经认识并与之合作

00:03:50.680 --> 00:03:54.580
这些年来， 

00:03:52.720 --> 00:03:58.989
仍然充满活力和活跃

00:03:54.580 --> 00:04:01.239
社区，我感到非常荣幸

00:03:58.989 --> 00:04:03.970
与一些优秀的工程师一起工作

00:04:01.239 --> 00:04:05.470
多年来的内外

00:04:03.970 --> 00:04:08.880
赞助的公司

00:04:05.470 --> 00:04:11.530
首先开发Sun，然后是Oracle， 

00:04:08.880 --> 00:04:13.150
我一直很幸运能够

00:04:11.530 --> 00:04:15.580
接受这些想法并将其引入

00:04:13.150 --> 00:04:18.190
 facelets Ajax网站获得推送列表

00:04:15.580 --> 00:04:19.690
不断地提出您的想法

00:04:18.190 --> 00:04:24.810
知道来自社区， 

00:04:19.690 --> 00:04:27.729
现在在核心Java平台中

00:04:24.810 --> 00:04:29.040
只是一个私人笔记，这是15年

00:04:27.729 --> 00:04:31.350
六个月零两天

00:04:29.040 --> 00:04:33.600
从我第一次有JSF演讲开始

00:04:31.350 --> 00:04:36.810
所以我觉得很荣幸

00:04:33.600 --> 00:04:38.430
有这么长的时间，你知道有

00:04:36.810 --> 00:04:41.430
和您讨论其他一些事情

00:04:38.430 --> 00:04:44.340
昨天见过哦，我在

00:04:41.430 --> 00:04:48.290
背景可能是的，这就是JSF 

00:04:44.340 --> 00:04:48.290
在后台是正确的

00:04:48.660 --> 00:04:52.740
室内居住社区的另一个原因

00:04:50.880 --> 00:04:54.780
是否有两个独立的开源

00:04:52.740 --> 00:04:56.910
实施Arco Mahara 

00:04:54.780 --> 00:04:58.680
参考实现

00:04:56.910 --> 00:05:01.530
在所有这些应用程序服务器中常见

00:04:58.680 --> 00:05:03.540
和Apache我的阶段，这是看到的

00:05:01.530 --> 00:05:07.740
是不完整的列表，所有这些应用

00:05:03.540 --> 00:05:09.800
服务器JBoss wildfly做得很棒

00:05:07.740 --> 00:05:12.180
您可以在以下两个列表中看到它

00:05:09.800 --> 00:05:15.420
方便地在

00:05:12.180 --> 00:05:18.960
不同的实现，所以当我看

00:05:15.420 --> 00:05:20.820
按照已经完成的JCP标准

00:05:18.960 --> 00:05:23.400
多年来，我认为JSF就是其中之一

00:05:20.820 --> 00:05:25.260
那是最直接和可证明的

00:05:23.400 --> 00:05:26.910
兑现承诺

00:05:25.260 --> 00:05:29.610
多个单独的实现

00:05:26.910 --> 00:05:33.270
交换它，我的意思是您可以执行JSON 

00:05:29.610 --> 00:05:34.650
那也有很多人

00:05:33.270 --> 00:05:36.630
许多人在那里使用

00:05:34.650 --> 00:05:38.940
形式完全不同的想法

00:05:36.630 --> 00:05:41.670
杰克逊，你必须重写

00:05:38.940 --> 00:05:45.390
代码，而实际上使用JSF 

00:05:41.670 --> 00:05:47.340
一些合理的要求实现

00:05:45.390 --> 00:05:51.720
供应商独立性的价值主张

00:05:47.340 --> 00:05:53.850
根据规格，所以虽然

00:05:51.720 --> 00:05:56.940
为这次演讲做准备，我有一个

00:05:53.850 --> 00:05:58.910
与我的老朋友交谈，以及

00:05:56.940 --> 00:06:01.290
匿名的创始人查克·斯维奇

00:05:58.910 --> 00:06:03.510
我想问他，因为他是

00:06:01.290 --> 00:06:06.380
关于这方面的最新信息

00:06:03.510 --> 00:06:09.660
在当代环境中使用JSF 

00:06:06.380 --> 00:06:11.910
你知道在这里尝试任何人

00:06:09.660 --> 00:06:13.860
 primefaces一个JSF组件库可以

00:06:11.910 --> 00:06:16.320
很多人

00:06:13.860 --> 00:06:18.570
他说JSF仍然被大量使用

00:06:16.320 --> 00:06:21.660
后台应用程序政府

00:06:18.570 --> 00:06:24.660
愿意保留他们的代理银行

00:06:21.660 --> 00:06:26.430
服务器端的业务逻辑在哪里

00:06:24.660 --> 00:06:30.270
他们可能很保守

00:06:26.430 --> 00:06:32.340
有关数据安全性和

00:06:30.270 --> 00:06:36.720
向客户推送业务逻辑

00:06:32.340 --> 00:06:38.370
另一个关键用例是JSF 

00:06:36.720 --> 00:06:39.490
旨在从

00:06:38.370 --> 00:06:41.500
一开始

00:06:39.490 --> 00:06:45.120
这是一种应用风格

00:06:41.500 --> 00:06:49.300
从那以后发展变得越来越少

00:06:45.120 --> 00:06:51.610
不知道面向公众的广泛传播

00:06:49.300 --> 00:06:54.190
应用，但对于大多数具有

00:06:51.610 --> 00:06:55.960
俘虏的观众，你在哪里

00:06:54.190 --> 00:06:58.539
你必须使用的东西是否只是

00:06:55.960 --> 00:07:01.360
做你的工作，或者这就是你的工作

00:06:58.539 --> 00:07:03.490
使用大量屏幕的代理商

00:07:01.360 --> 00:07:05.680
正确，因此任何基于排序的应用

00:07:03.490 --> 00:07:07.030
基于屏幕的位置

00:07:05.680 --> 00:07:09.729
由许多不同的人创作或

00:07:07.030 --> 00:07:14.289
他们可能共享一个共同的团队

00:07:09.729 --> 00:07:15.729
模板对它有好处，也有好处

00:07:14.289 --> 00:07:19.389
已经有足够多的人知道如何

00:07:15.729 --> 00:07:21.760
用它是足够好的国王

00:07:19.389 --> 00:07:23.380
在某种意义上，它也知道

00:07:21.760 --> 00:07:27.280
数量很容易找到人

00:07:23.380 --> 00:07:28.510
富有成效，其他人也一样

00:07:27.280 --> 00:07:30.490
有他们想要的观点

00:07:28.510 --> 00:07:32.349
分享为什么他们仍在使用它

00:07:30.490 --> 00:07:42.900
虽然很老而且有很多

00:07:32.349 --> 00:07:42.900
还有其他选择，对吧

00:07:46.450 --> 00:07:51.620
你找不到想做的人

00:07:48.740 --> 00:07:53.360
角或JSF哦，好

00:07:51.620 --> 00:07:55.400
所以你说的是

00:07:53.360 --> 00:07:57.020
相反，断言是

00:07:55.400 --> 00:08:01.340
相反地​​找到谁是

00:07:57.020 --> 00:08:03.890
高效地使用数据好吧好吧不是

00:08:01.340 --> 00:08:05.750
那是大数据，与

00:08:03.890 --> 00:08:08.750
贾泰灵魂告诉我的也许是

00:08:05.750 --> 00:08:12.830
市场特定的东西可能是

00:08:08.750 --> 00:08:15.470
你知道在西欧他在那里

00:08:12.830 --> 00:08:18.820
这是更常见的我不知道吗

00:08:15.470 --> 00:08:18.820
其他观点

00:08:25.550 --> 00:08:28.610
 [音乐] 

00:08:29.730 --> 00:08:32.730
对

00:08:54.540 --> 00:09:02.829
是的，这是你的嘴，所以

00:08:59.410 --> 00:09:04.300
贾瓦斯（Jawas）的观点是人们接JSF 

00:09:02.829 --> 00:09:05.470
在学校期间，然后他们进入

00:09:04.300 --> 00:09:08.170
工作场所，这是不同的

00:09:05.470 --> 00:09:09.700
环境，所以总有一些

00:09:08.170 --> 00:09:12.640
意见，我们可以进一步讨论

00:09:09.700 --> 00:09:15.040
等一下我去展览区

00:09:12.640 --> 00:09:18.640
如果您想为此弯曲我的耳朵或

00:09:15.040 --> 00:09:22.390
任何其他主题，让我们来做新功能

00:09:18.640 --> 00:09:27.250
在我这样做之前先回顾一下，尽管我想

00:09:22.390 --> 00:09:32.079
指出我们已经搬走了一切

00:09:27.250 --> 00:09:33.730
关于Java EE到github上，我有一个

00:09:32.079 --> 00:09:35.290
在我讲话的另一部分

00:09:33.730 --> 00:09:42.100
就是说给我我的观点

00:09:35.290 --> 00:09:44.829
成为Eclipse基础的Java EE 

00:09:42.100 --> 00:09:47.320
主登陆页面是Java EE到github 

00:09:44.829 --> 00:09:48.670
数据和我将要使用的样本

00:09:47.320 --> 00:09:51.220
显示此功能和所有其他功能

00:09:48.670 --> 00:09:58.260
这是新功能，Java EE 8在以下位置可用

00:09:51.220 --> 00:09:58.260
那里的URL，所以让我们看一下

00:09:59.100 --> 00:10:04.690
您的新功能还有更多

00:10:02.380 --> 00:10:06.420
 JSF 2.3中的新功能

00:10:04.690 --> 00:10:09.699
他们都有相同的

00:10:06.420 --> 00:10:12.160
你很少了解的特征

00:10:09.699 --> 00:10:14.680
正确投放增量功能广告，这样您就可以

00:10:12.160 --> 00:10:17.620
想想他们在

00:10:14.680 --> 00:10:20.019
 Java本身周一的主题演讲

00:10:17.620 --> 00:10:21.730
核心Java SE移至增量

00:10:20.019 --> 00:10:24.459
我们已经有的发布时间表

00:10:21.730 --> 00:10:27.310
为此，但不是时间范围

00:10:24.459 --> 00:10:28.959
对，所以我们将看看是否

00:10:27.310 --> 00:10:30.940
日食他们可以释放更多

00:10:28.959 --> 00:10:35.980
我经常相信他们将能够

00:10:30.940 --> 00:10:37.480
使用servlet进行哦服务器推送

00:10:35.980 --> 00:10:37.959
好消息是，大多数情况下

00:10:37.480 --> 00:10:39.610
免费

00:10:37.959 --> 00:10:43.180
实际上，如果

00:10:39.610 --> 00:10:48.130
您正在使用直接的JSF WebSocket 

00:10:43.180 --> 00:10:50.199
推送Ajax方法调用多字段

00:10:48.130 --> 00:10:52.470
验证时间很长

00:10:50.199 --> 00:10:56.940
抢手功能

00:10:52.470 --> 00:10:59.700
和更紧密的CDI集成，然后

00:10:56.940 --> 00:11:01.140
我会告诉我所有的一切

00:10:59.700 --> 00:11:03.240
知道我们可以打开列表，如果

00:11:01.140 --> 00:11:09.690
任何人都有他们想要的其他功能

00:11:03.240 --> 00:11:15.090
探索它，我们可以看看那开始

00:11:09.690 --> 00:11:16.700
用服务器推送出去，所以当我

00:11:15.090 --> 00:11:20.040
为我调查的演讲做准备

00:11:16.700 --> 00:11:22.080
当它被添加到最后

00:11:20.040 --> 00:11:25.500
实施规范

00:11:22.080 --> 00:11:27.480
并遇到了我为此所做的承诺

00:11:25.500 --> 00:11:29.010
我只是觉得这很有趣

00:11:27.480 --> 00:11:31.110
这可能是最后一个

00:11:29.010 --> 00:11:33.780
在Java上提交到JSF被拒绝

00:11:31.110 --> 00:11:35.730
移动起来，所以我做了同样的事情

00:11:33.780 --> 00:11:37.200
也是移动之前最后提交的JIRA 

00:11:35.730 --> 00:11:38.760
到github问题跟踪器，非常感谢

00:11:37.200 --> 00:11:43.290
 Jeff为所有出色的托管服务

00:11:38.760 --> 00:11:45.390
年，所以我们第一次来到java.net 

00:11:43.290 --> 00:11:47.490
你知道我们自己有这个

00:11:45.390 --> 00:11:49.140
问题跟踪器，然后他们得到了

00:11:47.490 --> 00:11:51.060
 Atlassian JIRA的许可证，以及

00:11:49.140 --> 00:11:54.510
就像彻底改变了我们的世界

00:11:51.060 --> 00:11:58.140
事实上，JSF的发展非常

00:11:54.510 --> 00:11:59.760
高

00:11:58.140 --> 00:12:01.350
像这样的质量问题跟踪器

00:11:59.760 --> 00:12:03.720
很多东西带给社区

00:12:01.350 --> 00:12:06.900
问题跟踪器中的反馈，我们

00:12:03.720 --> 00:12:08.790
在规范期间完全依赖JIRA 

00:12:06.900 --> 00:12:09.930
开发过程跟踪

00:12:08.790 --> 00:12:12.050
我们正在实施的问题

00:12:09.930 --> 00:12:15.120
一切，所以我们做了很多事情

00:12:12.050 --> 00:12:18.630
我确实想简单指出

00:12:15.120 --> 00:12:21.720
我在末尾发表的这篇博客文章

00:12:18.630 --> 00:12:23.910
 java.net时代这么久，感谢所有人

00:12:21.720 --> 00:12:26.910
提交，所以这对我很重要

00:12:23.910 --> 00:12:29.370
因为有很多人在工作

00:12:26.910 --> 00:12:31.290
多年来，在java.net上

00:12:29.370 --> 00:12:38.450
迁移到github的人

00:12:31.290 --> 00:12:38.450
成功谢谢你的确定

00:12:39.890 --> 00:12:44.840
让我们看一下代码，然后第一个

00:12:42.950 --> 00:12:46.970
我想做的就是从

00:12:44.840 --> 00:12:49.670
一个小样，如果你看过我的

00:12:46.970 --> 00:12:52.250
 servlet说话有点看东西

00:12:49.670 --> 00:12:56.390
在GlassFish样本中也是如此

00:12:52.250 --> 00:12:58.640
 servlet区域，他们有一个超级超级

00:12:56.390 --> 00:13:01.940
简单的服务器推线，显示了如何

00:12:58.640 --> 00:13:03.500
在JSF之外使用服务器推送

00:13:01.940 --> 00:13:05.480
这些样品的优点在于

00:13:03.500 --> 00:13:07.190
他们真的是你知道显示

00:13:05.480 --> 00:13:07.970
裸露的骨头，你什么都没有

00:13:07.190 --> 00:13:12.260
其他在这里

00:13:07.970 --> 00:13:15.110
所以这是一个简单的servlet， 

00:13:12.260 --> 00:13:18.440
得到方法，我们接受我们提出的要求

00:13:15.110 --> 00:13:22.430
对于新的推送构建器，我们添加了CSS 

00:13:18.440 --> 00:13:24.800
文件，然后我们告诉推送生成器

00:13:22.430 --> 00:13:27.710
发送推送，然后我们写出

00:13:24.800 --> 00:13:31.430
恰好引用该HTML的HTML 

00:13:27.710 --> 00:13:34.360
 CSS文件，如果我们查看网页

00:13:31.430 --> 00:13:36.800
当然，我们会看到我们的CSS文件

00:13:34.360 --> 00:13:41.690
它在浏览器中的外观是

00:13:36.800 --> 00:13:44.540
让我们重新加载它，让我们看看

00:13:41.690 --> 00:13:48.650
 chrome net内部，看看HTTP- 

00:13:44.540 --> 00:13:57.680
您可以看到我们是否选择了此选项

00:13:48.650 --> 00:14:00.710
看到有服务器推送，让我们看看

00:13:57.680 --> 00:14:04.580
这是一个推销承诺吗，是的

00:14:00.710 --> 00:14:08.690
推送承诺，这是HTTP-伪

00:14:04.580 --> 00:14:10.250
标头和CSS的路径在那里

00:14:08.690 --> 00:14:10.910
那真的很容易

00:14:10.250 --> 00:14:15.080
了解

00:14:10.910 --> 00:14:20.240
在jsf方面，因为所有

00:14:15.080 --> 00:14:23.240
 JSF与之关联的资源

00:14:20.240 --> 00:14:26.050
我们事先知道的页面

00:14:23.240 --> 00:14:28.670
能够修改规范

00:14:26.050 --> 00:14:31.040
我可以在这里告诉你这是

00:14:28.670 --> 00:14:32.810
一点实际的文字和JSF 2.3 

00:14:31.040 --> 00:14:34.940
规范实际上没有人看过

00:14:32.810 --> 00:14:37.790
任何JSF或任何其他Java EE 

00:14:34.940 --> 00:14:40.390
多年来的规格很好

00:14:37.790 --> 00:14:44.180
你认为有那些有用吗

00:14:40.390 --> 00:14:47.180
好的，因为那是另一个方面

00:14:44.180 --> 00:14:48.860
 Eclipse的事情是

00:14:47.180 --> 00:14:50.360
我能想到的开源项目

00:14:48.860 --> 00:14:51.430
不用理会

00:14:50.360 --> 00:14:53.290
规格

00:14:51.430 --> 00:14:55.150
和测试套件，我的意思是他们可能

00:14:53.290 --> 00:14:57.250
有测试驱动的开发，所以他们

00:14:55.150 --> 00:15:00.370
可能有一个测试套件，所以这件事

00:14:57.250 --> 00:15:02.770
他们真的没有是规范的东西

00:15:00.370 --> 00:15:05.830
因此，看看如何

00:15:02.770 --> 00:15:07.840
进化，因为它是必须要做的

00:15:05.830 --> 00:15:09.340
以轻巧的方式，我认为这是

00:15:07.840 --> 00:15:12.010
 CDI员工之一

00:15:09.340 --> 00:15:13.720
真的做得很好，我的意思是

00:15:12.010 --> 00:15:16.030
规范应该能够从

00:15:13.720 --> 00:15:18.310
代码与Javadoc相同

00:15:16.030 --> 00:15:20.080
他们做得很好

00:15:18.310 --> 00:15:21.610
他们估计这变得很漂亮

00:15:20.080 --> 00:15:24.910
与Java的组合接近它

00:15:21.610 --> 00:15:28.230
 CDI中的doc和asciidoc，所以我希望

00:15:24.910 --> 00:15:28.230
他们能够做到这一点

00:15:29.100 --> 00:15:33.520
当然不是全部

00:15:32.290 --> 00:15:36.280
这就是为什么他们回落到

00:15:33.520 --> 00:15:38.560
 asciidoc，所以这不是一个完美的解决方案

00:15:36.280 --> 00:15:41.230
因此我们得出的解决方案是

00:15:38.560 --> 00:15:42.910
多年来与JSF在一起，你知道吗

00:15:41.230 --> 00:15:45.330
尽可能在生成的

00:15:42.910 --> 00:15:48.580
文档，但是当您需要

00:15:45.330 --> 00:15:49.960
跨度很大的文字说明

00:15:48.580 --> 00:15:53.590
代码的不同部分

00:15:49.960 --> 00:15:56.110
核心规范是为了什么

00:15:53.590 --> 00:15:59.370
如果您是

00:15:56.110 --> 00:16:03.930
在服务器上运行以使用服务器推送

00:15:59.370 --> 00:16:07.800
我们希望将其保持在较高水平

00:16:03.930 --> 00:16:11.170
规格，只要你知道

00:16:07.800 --> 00:16:13.330
遵守所有HTTP要求

00:16:11.170 --> 00:16:15.250
必须先开始推送

00:16:13.330 --> 00:16:18.010
 HTML响应将呈现给

00:16:15.250 --> 00:16:20.440
客户，还有另外两个

00:16:18.010 --> 00:16:22.360
在方法方面的要求

00:16:20.440 --> 00:16:24.820
我们知道我们将是正确的

00:16:22.360 --> 00:16:27.130
它必须安全且可兑现，所以我们

00:16:24.820 --> 00:16:32.050
对于所有JSF资源都知道

00:16:27.130 --> 00:16:33.670
会落在那把伞下，所以我们

00:16:32.050 --> 00:16:37.800
我们只是选择执行

00:16:33.670 --> 00:16:42.210
修改外部上下文类并

00:16:37.800 --> 00:16:45.670
当它在代码操作URL中时

00:16:42.210 --> 00:16:48.730
将为每种资源完成

00:16:45.670 --> 00:16:51.670
这将被渲染，我们最终

00:16:48.730 --> 00:16:53.940
最终在这里调用此方法

00:16:51.670 --> 00:16:53.940
看到

00:16:54.830 --> 00:17:05.750
搜索这种方式是必需的

00:17:01.340 --> 00:17:07.930
如果可能的话，那么我们做一个

00:17:05.750 --> 00:17:11.320
很少检查是否支持推送

00:17:07.930 --> 00:17:14.350
因为我们需要您仍然知道JSF 

00:17:11.320 --> 00:17:16.880
即使它是Java EE八的一部分

00:17:14.350 --> 00:17:18.350
可以在较旧的东西上运行它

00:17:16.880 --> 00:17:20.510
可能没有那些课程

00:17:18.350 --> 00:17:21.920
虽然这不是我们的功能

00:17:20.510 --> 00:17:24.350
真的支持了，我们是说

00:17:21.920 --> 00:17:30.740
您必须在Java EE的Java上运行它

00:17:24.350 --> 00:17:32.690
八个容器，所以我们检查了

00:17:30.740 --> 00:17:35.690
是否支持该属性

00:17:32.690 --> 00:17:37.190
我们也不想推办问题

00:17:35.690 --> 00:17:39.410
另一个推动，我们已经推动了

00:17:37.190 --> 00:17:41.120
 URL，因为使用JSF可能会有很多

00:17:39.410 --> 00:17:42.830
不同的页面，其中一些

00:17:41.120 --> 00:17:46.430
可能会引用相同的资源，因此

00:17:42.830 --> 00:17:50.810
您跟踪它，我们使用

00:17:46.430 --> 00:17:55.340
计算缺席检查，然后

00:17:50.810 --> 00:17:56.630
我们在此处添加资源URL 

00:17:55.340 --> 00:17:58.190
我们实际上做了推，所以这是

00:17:56.630 --> 00:18:02.780
您在简单的代码中看到的相同代码

00:17:58.190 --> 00:18:06.080
例子，但是它是内置的

00:18:02.780 --> 00:18:08.210
 JSF的实现，我们也知道

00:18:06.080 --> 00:18:09.530
自从头以来没有修改过

00:18:08.210 --> 00:18:12.170
如果自标头起没有修改

00:18:09.530 --> 00:18:14.150
那么我们可以安全地推动

00:18:12.170 --> 00:18:15.500
从头开始修改，那么我们知道

00:18:14.150 --> 00:18:19.550
它在浏览器的缓存中，我们

00:18:15.500 --> 00:18:21.140
不会推它，所以如果我们看一下

00:18:19.550 --> 00:18:22.850
更复杂的例子

00:18:21.140 --> 00:18:26.840
您已经拥有的primefaces展示柜

00:18:22.850 --> 00:18:29.630
可能看到你知道它有一个数字

00:18:26.840 --> 00:18:35.750
这里的图像和资源，如果我们

00:18:29.630 --> 00:18:38.570
回到您的铬网检查器

00:18:35.750 --> 00:18:40.070
可以看到还有更多的推送承诺

00:18:38.570 --> 00:18:41.750
我通常会看到那里

00:18:40.070 --> 00:18:47.350
像一百四十四点，让我

00:18:41.750 --> 00:18:47.350
重新加载此班次重新加载

00:18:49.300 --> 00:18:53.000
是的，你去了

00:18:50.990 --> 00:18:59.690
虽然有更多相同的地方

00:18:53.000 --> 00:19:04.400
推诺，好吧，有人有吗

00:18:59.690 --> 00:19:06.020
关于服务器的问题推吧

00:19:04.400 --> 00:19:09.559
是我刚才说的

00:19:06.020 --> 00:19:12.679
真的很容易，就像这样

00:19:09.559 --> 00:19:15.050
一般的http / 2关注它真的HCB 

00:19:12.679 --> 00:19:17.270
以你做事的方式打开它的头

00:19:15.050 --> 00:19:18.620
您必须进行的许多优化

00:19:17.270 --> 00:19:23.420
之前在您的网站上做过

00:19:18.620 --> 00:19:25.580
例如图像分片，对不起

00:19:23.420 --> 00:19:27.440
域分片和图像精灵是

00:19:25.580 --> 00:19:31.280
人们太技术性的技巧

00:19:27.440 --> 00:19:33.290
在HC之前用于优化性能

00:19:31.280 --> 00:19:34.790
 b2和那些技术不是

00:19:33.290 --> 00:19:38.600
实际上使性能变差

00:19:34.790 --> 00:19:39.950
 HTTP 2，所以您知道您正在研究它

00:19:38.600 --> 00:19:45.050
在考虑之前要仔细

00:19:39.950 --> 00:19:47.870
将所有内容移至http-是

00:19:45.050 --> 00:19:50.900
 F本身从未做过任何领域

00:19:47.870 --> 00:19:53.809
分片或图像拼写为您

00:19:50.900 --> 00:19:54.800
在这方面，你将一事无成

00:19:53.809 --> 00:19:57.400
知道你有问题吗

00:19:54.800 --> 00:19:57.400
观察

00:20:01.720 --> 00:20:05.200
好问题好问题

00:20:03.850 --> 00:20:08.140
有办法将其关闭吗

00:20:05.200 --> 00:20:10.240
因此，当我们在规范中执行此操作时， 

00:20:08.140 --> 00:20:12.430
只是想保持它超级课程，所以

00:20:10.240 --> 00:20:14.860
目前不，那是

00:20:12.430 --> 00:20:16.660
您将不得不添加

00:20:14.860 --> 00:20:18.280
您可以轻松想像一下

00:20:16.660 --> 00:20:21.310
您可以定义页面的一部分或

00:20:18.280 --> 00:20:23.980
某种资源模式

00:20:21.310 --> 00:20:27.640
匹配，甚至实际上可能在

00:20:23.980 --> 00:20:29.680
资源库本身会有一些

00:20:27.640 --> 00:20:32.650
指示推送这些资源的方式

00:20:29.680 --> 00:20:36.250
还是不是，但答案是一切

00:20:32.650 --> 00:20:39.430
如果您要使用HCB，则将其推送

00:20:36.250 --> 00:20:41.580
浏览器当然可以将其关闭，而我

00:20:39.430 --> 00:20:44.940
想你知道我给你看了代码

00:20:41.580 --> 00:20:47.350
你可能可以做的是

00:20:44.940 --> 00:20:49.480
那里有一个过滤器

00:20:47.350 --> 00:20:51.520
属性并将其放置，然后禁用

00:20:49.480 --> 00:20:56.440
这样，就有一种工作方式

00:20:51.520 --> 00:20:59.950
一切都好吧，让我们

00:20:56.440 --> 00:21:01.240
现在从网络服务器推送到

00:20:59.950 --> 00:21:04.810
网站和现在推送这些是不同的

00:21:01.240 --> 00:21:07.480
各种推送WebSocket推送是

00:21:04.810 --> 00:21:14.710
更多的有意和应用

00:21:07.480 --> 00:21:19.600
级别，因此我们在Java中有一个示例

00:21:14.710 --> 00:21:26.550
 EE样本让我确保我关闭了

00:21:19.600 --> 00:21:26.550
我不需要的其他东西

00:21:28.669 --> 00:21:34.580
而且我也想给一个很大的很大

00:21:31.070 --> 00:21:38.299
大声喊着，谢谢你我的合作

00:21:34.580 --> 00:21:40.280
和同事曼弗雷德·格林，他是我的

00:21:38.299 --> 00:21:43.429
霍斯特（Khost）的正式合伙人，但在此方面处于领先地位

00:21:40.280 --> 00:21:47.720
幸运的是他没能力成为

00:21:43.429 --> 00:21:49.700
在这里和我一起礼物

00:21:47.720 --> 00:21:51.559
整理样品的时间

00:21:49.700 --> 00:21:54.590
版本在这里，所以这是一次战争

00:21:51.559 --> 00:21:56.530
您可以部署的一个很好的

00:21:54.590 --> 00:22:00.230
 [音乐] 

00:21:56.530 --> 00:22:03.110
标题页以及所有示例和

00:22:00.230 --> 00:22:05.299
典型的简单风格，我们都拥有

00:22:03.110 --> 00:22:08.900
在那里为您列出了，让我们来看一下

00:22:05.299 --> 00:22:12.679
在websocket示例中，如果您只是

00:22:08.900 --> 00:22:14.179
单击发送消息，您将返回到

00:22:12.679 --> 00:22:17.360
前一个窗口，有一条消息

00:22:14.179 --> 00:22:19.690
它已经被推动了，让我们来看一下

00:22:17.360 --> 00:22:19.690
编码

00:22:24.870 --> 00:22:27.870
网络套接字

00:22:28.270 --> 00:22:40.500
好的，所以在这里您有一个Facebook页面

00:22:36.780 --> 00:22:40.500
应该做的这么大

00:22:44.320 --> 00:22:48.850
你也会看到我们很丑

00:22:46.720 --> 00:22:50.830
 NetBeans I版本的红线

00:22:48.850 --> 00:22:53.230
这里没有Java EE 8 

00:22:50.830 --> 00:22:55.379
里面的东西，对不起，我没有

00:22:53.230 --> 00:22:57.850
关于何时可用的答案

00:22:55.379 --> 00:22:59.259
这有点不同

00:22:57.850 --> 00:23:01.149
而且我还没听说什么

00:22:59.259 --> 00:23:05.830
关于Java的NetBeans的发展

00:23:01.149 --> 00:23:08.440
 et8，所以我无法回答所有问题

00:23:05.830 --> 00:23:11.379
出色的文档不是您的完成

00:23:08.440 --> 00:23:14.379
期望在这里工作不大，所以你

00:23:11.379 --> 00:23:25.710
让我实际使用Java 

00:23:14.379 --> 00:23:25.710
 doc到本地，否，我没有用

00:23:27.779 --> 00:23:33.850
好吧，我们只需要处理代码

00:23:30.850 --> 00:23:36.129
因此您创建了一个

00:23:33.850 --> 00:23:37.809
基本上是一个名字，你必须使用

00:23:36.129 --> 00:23:40.480
在另一边的那个名字

00:23:37.809 --> 00:23:43.269
东西，所以你可以看到另一个

00:23:40.480 --> 00:23:46.720
打开的页面，因此当您访问此页面时

00:23:43.269 --> 00:23:51.539
通过打开Web套接字结束页

00:23:46.720 --> 00:23:51.539
新窗口中的常规href 

00:23:52.499 --> 00:24:00.429
 WebSockets，您可以在这里看到

00:23:55.809 --> 00:24:02.049
有一个F事件，它打开了

00:24:00.429 --> 00:24:05.769
 F事件不是新事物

00:24:02.049 --> 00:24:07.899
由于JSF-哦，类型是post 

00:24:05.769 --> 00:24:10.389
在JSF生命周期中呈现视图

00:24:07.899 --> 00:24:12.309
呈现视图后，此事件为

00:24:10.389 --> 00:24:14.440
将要开火，它会打电话

00:24:12.309 --> 00:24:17.769
此WebSocket光束发送方法和

00:24:14.440 --> 00:24:21.549
让我们进入其中，这是

00:24:17.769 --> 00:24:25.360
只是一个普通的旧CDI光束，我们

00:24:21.549 --> 00:24:28.779
注入推送上下文和名称

00:24:25.360 --> 00:24:30.970
推送上下文是我的频道，我们

00:24:28.779 --> 00:24:34.509
正在发送警报，所以这是我的频道

00:24:30.970 --> 00:24:38.919
事情与我的频道相符

00:24:34.509 --> 00:24:42.549
在这里也是on消息

00:24:38.919 --> 00:24:46.059
将被评估，所以当

00:24:42.549 --> 00:24:48.879
 WebSocket Beam发送的是

00:24:46.059 --> 00:24:50.590
要打电话给这个家伙

00:24:48.879 --> 00:24:51.920
功能警报消息，然后采取

00:24:50.590 --> 00:24:54.570
警报和

00:24:51.920 --> 00:25:00.530
因此，我们可以返回到

00:24:54.570 --> 00:25:00.530
索引，以便对这个有任何疑问

00:25:11.580 --> 00:25:17.440
是的，这是不同的，我们有一个

00:25:16.150 --> 00:25:20.140
该问题的不同特征

00:25:17.440 --> 00:25:22.270
这个例子只是交流

00:25:20.140 --> 00:25:25.120
一个页面到另一个WebSocket 

00:25:22.270 --> 00:25:26.440
当被推挤是单向的事情

00:25:25.120 --> 00:25:28.390
服务器要发送一些消息

00:25:26.440 --> 00:25:29.880
给客户，所以无论是一页

00:25:28.390 --> 00:25:32.020
有几个不同的页面

00:25:29.880 --> 00:25:35.679
到其他地方去

00:25:32.020 --> 00:25:37.570
所以客户回电就是那个

00:25:35.679 --> 00:25:41.740
接下来我要说的是F 

00:25:37.570 --> 00:25:48.130
冒号命令脚本好吗那里的问题

00:25:41.740 --> 00:25:49.480
填写mmm问题是我是否知道

00:25:48.130 --> 00:25:52.840
自动完成工作IntelliJ 

00:25:49.480 --> 00:25:54.429
发夹我不知道是的，我希望我

00:25:52.840 --> 00:25:57.160
意味着通常他们得到它，这是其中之一

00:25:54.429 --> 00:25:59.110
甲骨文决定的那些事

00:25:57.160 --> 00:26:01.090
去年大新闻大捐款

00:25:59.110 --> 00:26:05.440
新闻你有点在这里看到一个模式

00:26:01.090 --> 00:26:07.270
进行大量剥离，所以当我们

00:26:05.440 --> 00:26:09.100
那件事我们把它给了阿帕奇

00:26:07.270 --> 00:26:11.020
你知道那仍然是一件大事

00:26:09.100 --> 00:26:13.170
所以这仍在进行中

00:26:11.020 --> 00:26:13.170
题

00:26:21.040 --> 00:26:24.130
我相信它将在所有

00:26:22.810 --> 00:26:25.960
问题是您是否有多份副本

00:26:24.130 --> 00:26:27.550
在同一页面上，您确实要推送

00:26:25.960 --> 00:26:30.070
它会出现在所有人身上吗？ 

00:26:27.550 --> 00:26:31.510
认为这是因为它是浏览器

00:26:30.070 --> 00:26:38.520
知道那些联系

00:26:31.510 --> 00:26:38.520
引导您知道的其他任何问题

00:26:39.280 --> 00:26:45.150
啊，我可以尝试，我没有那个变焦

00:26:43.360 --> 00:26:47.560
事情打开了，我在弄乱

00:26:45.150 --> 00:26:51.180
分辨率让我尝试做到这一点

00:26:47.560 --> 00:26:51.180
在这里过时的方式

00:26:51.630 --> 00:26:59.440
是的，我不知道我已经知道了

00:26:54.670 --> 00:27:03.870
以最低的速度运行

00:26:59.440 --> 00:27:03.870
你想怎么来戴夫帮我

00:27:04.380 --> 00:27:10.920
但我想我可能已将其关闭

00:27:08.650 --> 00:27:10.920
不知何故

00:27:19.530 --> 00:27:29.700
是的，我知道我以某种方式将其关闭

00:27:23.840 --> 00:27:33.660
没关系，是的，我很糟糕， 

00:27:29.700 --> 00:27:36.450
是的，我知道，但我知道了

00:27:33.660 --> 00:27:40.830
关掉一些关于偏好的东西

00:27:36.450 --> 00:27:47.130
那个我不知道是不是

00:27:40.830 --> 00:27:49.140
对不起，我会尝试的，我会尝试的

00:27:47.130 --> 00:27:51.420
多说出来，你知道你

00:27:49.140 --> 00:27:54.210
您可以自己检查样本

00:27:51.420 --> 00:27:57.330
看到他们，这是我能做的最好的

00:27:54.210 --> 00:27:59.670
此时，对不起，我们走吧

00:27:57.330 --> 00:28:03.210
回到我想要的下一个

00:27:59.670 --> 00:28:06.410
在这里提到

00:28:03.210 --> 00:28:09.270
因此，Ajax的职业方法是

00:28:06.410 --> 00:28:13.800
使用命令脚本标记实现

00:28:09.270 --> 00:28:15.390
这很简单，让我们来

00:28:13.800 --> 00:28:21.870
看看他在代码中做什么

00:28:15.390 --> 00:28:24.660
那里的命令脚本使用示例

00:28:21.870 --> 00:28:28.410
使用JSF进行服务器端Ajax调用是

00:28:24.660 --> 00:28:31.470
这样就可以看到没有ABCD 

00:28:28.410 --> 00:28:33.180
硬编码在页面中，我们只是

00:28:31.470 --> 00:28:36.900
调用命令脚本

00:28:33.180 --> 00:28:39.780
执行，这将导致一个ajax 

00:28:36.900 --> 00:28:43.830
请求发送到服务器和

00:28:39.780 --> 00:28:46.320
您是否会知道重新渲染

00:28:43.830 --> 00:28:49.500
输出部分在这里，如果您使用过

00:28:46.320 --> 00:28:51.540
 F：这个Ajax标签非常相似

00:28:49.500 --> 00:28:53.760
但这只允许您追尾

00:28:51.540 --> 00:28:56.040
直接从此发送输出

00:28:53.760 --> 00:28:58.860
东西，把它放到你想去的地方

00:28:56.040 --> 00:29:01.680
在那里做，让我们看看我认为

00:28:58.860 --> 00:29:04.380
只会看到正确的输入

00:29:01.680 --> 00:29:08.250
小写和大写都没有

00:29:04.380 --> 00:29:12.570
再寄回去真的很好

00:29:08.250 --> 00:29:15.060
简单的例子，这是你必须设置

00:29:12.570 --> 00:29:17.350
它会在true.you上自动运行

00:29:15.060 --> 00:29:19.600
然后将其设置为自动运行

00:29:17.350 --> 00:29:23.559
好吧，你可以将它绑定到某些事件

00:29:19.600 --> 00:29:27.130
在页面上，我想的名字是

00:29:23.559 --> 00:29:29.679
可选，因此来自

00:29:27.130 --> 00:29:36.340
脚本这是另一个社区

00:29:29.679 --> 00:29:40.019
由社区贡献好所有

00:29:36.340 --> 00:29:44.049
接下来是多字段验证

00:29:40.019 --> 00:29:47.590
这是使用F：整个验证

00:29:44.049 --> 00:29:53.200
梁，我要抓住一点机会

00:29:47.590 --> 00:29:55.679
再次在这里，看看我能否找到我在哪里

00:29:53.200 --> 00:29:55.679
把这个

00:30:06.880 --> 00:30:09.880
是的

00:30:12.460 --> 00:30:20.050
好的

00:30:15.160 --> 00:30:22.990
好吧，让我们开始吧

00:30:20.050 --> 00:30:25.830
我希望这是Javadoc的顶层

00:30:22.990 --> 00:30:25.830
要为我做

00:30:29.220 --> 00:30:37.080
 index.html我知道的JSF伪造

00:30:33.270 --> 00:30:40.860
好的，是的，如果你现在就去，那就是

00:30:37.080 --> 00:30:42.810
那就是Firefox很快，是的，如果您看

00:30:40.860 --> 00:30:48.180
在公开的jsf Javadoc中

00:30:42.810 --> 00:30:53.790
对不起的是github的网站

00:30:48.180 --> 00:31:02.700
我噢削减的github的Java EE 

00:30:53.790 --> 00:31:06.540
 JavaServer面临规范，应该有一个

00:31:02.700 --> 00:31:08.490
链接到此处的Java文档，如果可以的话

00:31:06.540 --> 00:31:12.330
并发现您将来到此页面

00:31:08.490 --> 00:31:14.190
同样，您会在这里看到和

00:31:12.330 --> 00:31:16.320
它有这个颜色编码的东西，所以你

00:31:14.190 --> 00:31:19.560
可以轻松查看哪些内容已更改

00:31:16.320 --> 00:31:25.290
以及新增和新增的内容，因此，如果我们看一下

00:31:19.560 --> 00:31:29.700
在VTL文档中，如果我们转到f 

00:31:25.290 --> 00:31:32.250
看到验证整个豆在那里

00:31:29.700 --> 00:31:34.530
这支持通过

00:31:32.250 --> 00:31:37.710
启用Lavina验证类别，因此

00:31:34.530 --> 00:31:40.310
它完全基于CDI，让我们

00:31:37.710 --> 00:31:40.310
看代码

00:31:45.310 --> 00:31:48.310
好的

00:31:51.320 --> 00:31:59.760
现在他们会抱着我在这里，所以我们

00:31:54.870 --> 00:32:01.620
有两个文本字段输入一个文本

00:31:59.760 --> 00:32:03.750
值一，你可以看到它具有

00:32:01.620 --> 00:32:05.970
验证其中的光束标签，然后

00:32:03.750 --> 00:32:08.450
其他输入文本两个带有验证

00:32:05.970 --> 00:32:13.980
里面的光束，最后你有了

00:32:08.450 --> 00:32:17.060
这是底部的那个

00:32:13.980 --> 00:32:19.860
整个光束，所以关键是

00:32:17.060 --> 00:32:22.470
定期的JSF验证基于

00:32:19.860 --> 00:32:28.410
字段，而CDI验证基于

00:32:22.470 --> 00:32:31.110
真正地和CDI一起处理pojos对象

00:32:28.410 --> 00:32:35.220
当我们将其集成到JSF中时进行验证

00:32:31.110 --> 00:32:37.800
 2.0我们让他们为CDI添加了功能

00:32:35.220 --> 00:32:40.200
那是如果我要给你一个模特

00:32:37.800 --> 00:32:42.030
带有这个值将是有效的

00:32:40.200 --> 00:32:44.370
它将使我们返回启用状态

00:32:42.030 --> 00:32:46.790
是否有效

00:32:44.370 --> 00:32:50.490
我们先发制人地进行检查

00:32:46.790 --> 00:32:52.950
而CDI想要的真正方法

00:32:50.490 --> 00:32:56.220
操作阻止了无效的东西

00:32:52.950 --> 00:32:57.810
曾经进入模型，所以你

00:32:56.220 --> 00:32:59.460
将物体带给事物

00:32:57.810 --> 00:33:01.290
其实不，那是另一种方式

00:32:59.460 --> 00:33:03.390
您已经在模型中注入了东西

00:33:01.290 --> 00:33:04.860
已经，您将验证整个

00:33:03.390 --> 00:33:08.580
并会说这是否有效或

00:33:04.860 --> 00:33:10.740
不是，所以我们在这里要做的是转弯

00:33:08.580 --> 00:33:14.580
倒置并将值推入

00:33:10.740 --> 00:33:16.980
光束，然后要求CDI做

00:33:14.580 --> 00:33:22.050
专门在此部分进行验证

00:33:16.980 --> 00:33:27.510
就在这里，所以如果我们看整个

00:33:22.050 --> 00:33:32.210
我们在这里经过的光束

00:33:27.510 --> 00:33:35.820
找到一个新的注释在哪里

00:33:32.210 --> 00:33:38.850
是的，他添加了一个约束，所以

00:33:35.820 --> 00:33:41.370
约束，这是一个标准，这是

00:33:38.850 --> 00:33:48.330
你怎么做，你只是找到一个约束

00:33:41.370 --> 00:33:50.430
验证器，然后有一个POJO 

00:33:48.330 --> 00:33:52.960
此处的值设置为一和设置值

00:33:50.430 --> 00:33:57.640
两个和

00:33:52.960 --> 00:34:03.450
只是看这段代码是验证器

00:33:57.640 --> 00:34:05.440
不，那是另一回事

00:34:03.450 --> 00:34:07.659
试图找到业务所在

00:34:05.440 --> 00:34:10.210
逻辑就是整个验证器

00:34:07.659 --> 00:34:12.760
实际上是在这种情况下

00:34:10.210 --> 00:34:15.250
一直显示错误，所以这是

00:34:12.760 --> 00:34:17.020
您将能够采取的

00:34:15.250 --> 00:34:19.330
整个光束在这里，并检查值，以便

00:34:17.020 --> 00:34:22.119
让我们在这里进行更改让我们做

00:34:19.330 --> 00:34:28.599
一些实时编码，如果我们在

00:34:22.119 --> 00:34:31.389
示例应用程序的浏览器列表不断增加

00:34:28.599 --> 00:34:34.589
回到验证整个光束，无论我

00:34:31.389 --> 00:34:39.129
放在这里会给我无效的

00:34:34.589 --> 00:34:43.060
无法验证意味着，让我们只是

00:34:39.129 --> 00:34:48.490
将此更改为true并重新部署

00:34:43.060 --> 00:34:52.830
应用程序已经重新部署，如果

00:34:48.490 --> 00:34:52.830
我们这样做我希望它能工作

00:34:54.089 --> 00:35:00.430
是的，它奏效了，没有抱怨你

00:34:57.880 --> 00:35:02.349
没有在那里看到消息怎么办

00:35:00.430 --> 00:35:04.180
你实际上是通过这里的整体

00:35:02.349 --> 00:35:06.369
梁，您可以检查所有

00:35:04.180 --> 00:35:08.470
设置然后比较的属性

00:35:06.369 --> 00:35:11.170
他们，所以最常见的例子是

00:35:08.470 --> 00:35:13.930
这里使用的是输入密码字段

00:35:11.170 --> 00:35:15.430
两次正确，所以您必须确保

00:35:13.930 --> 00:35:17.140
第一个值与第二个相同

00:35:15.430 --> 00:35:18.910
价值，因此，要做到这一点，您需要

00:35:17.140 --> 00:35:21.010
传递给对象的验证器

00:35:18.910 --> 00:35:23.440
具有所有属性，因此

00:35:21.010 --> 00:35:25.330
不仅可以是任何数量的

00:35:23.440 --> 00:35:28.660
您可以在光束上检查的字段

00:35:25.330 --> 00:35:33.880
所以像任何一种

00:35:28.660 --> 00:35:36.440
问题就可以了

00:35:33.880 --> 00:35:39.109
是的，确实是一个有趣的

00:35:36.440 --> 00:35:41.809
关于问题跟踪器的事情

00:35:39.109 --> 00:35:44.930
实际上是第一号问题，但是当

00:35:41.809 --> 00:35:46.549
我们做了JSF 1.0 1.2我们没有

00:35:44.930 --> 00:35:49.130
 bean验证框架，但我们知道

00:35:46.549 --> 00:35:51.829
来了，所以这是其中之一

00:35:49.130 --> 00:35:54.109
人们说哦，Java EE太慢了

00:35:51.829 --> 00:35:56.450
是的，但是如果你要接受

00:35:54.109 --> 00:35:59.089
来自各地的东西，并做到这一点

00:35:56.450 --> 00:36:01.579
正确并具有抽象去

00:35:59.089 --> 00:36:05.210
正确的层，你知道那是我们的事情

00:36:01.579 --> 00:36:08.720
我们这里有一个庞大的企业， 

00:36:05.210 --> 00:36:11.089
确保我们可以定义自己的解决方案

00:36:08.720 --> 00:36:13.460
发明自己的api并自己做

00:36:11.089 --> 00:36:15.770
对，那不是正确的事情

00:36:13.460 --> 00:36:17.660
平台，现在我们有了CDI和bean 

00:36:15.770 --> 00:36:19.849
验证您可以全部使用验证

00:36:17.660 --> 00:36:21.920
遍地不只是为了

00:36:19.849 --> 00:36:26.059
 JSF，这是

00:36:21.920 --> 00:36:27.680
 Web框架Wars使JSF看起来如此

00:36:26.059 --> 00:36:29.839
不好，因为他们没有任何

00:36:27.680 --> 00:36:32.450
你可以称它为行李，但我实际上

00:36:29.839 --> 00:36:34.940
称它为正确做

00:36:32.450 --> 00:36:36.319
他们可以创新的整个平台

00:36:34.940 --> 00:36:38.240
并直接在他们的东西

00:36:36.319 --> 00:36:40.190
规格，而不是它们的规格

00:36:38.240 --> 00:36:42.650
实施而不必担心

00:36:40.190 --> 00:36:45.740
关于其他人利用

00:36:42.650 --> 00:36:51.890
这是公地的悲剧

00:36:45.740 --> 00:36:54.049
好吧，让我们来看看

00:36:51.890 --> 00:36:56.059
 CDI集成现在这真的是

00:36:54.049 --> 00:36:59.750
有点在雷达之下，但公平

00:36:56.059 --> 00:37:01.819
大量的工作，并且没有演示

00:36:59.750 --> 00:37:04.490
好吧，因为这就像是，这是

00:37:01.819 --> 00:37:06.140
首先应该如何工作，但我

00:37:04.490 --> 00:37:12.500
认为曼弗雷德确实做了一些伟大的事情

00:37:06.140 --> 00:37:15.109
 CDI注入示例

00:37:12.500 --> 00:37:17.990
样本是的他很少可以啊

00:37:15.109 --> 00:37:20.299
这是一个很好的方法，所以

00:37:17.990 --> 00:37:22.309
非详尽的注射目标清单

00:37:20.299 --> 00:37:24.950
所以我们做的一件事就是

00:37:22.309 --> 00:37:28.520
使大量的东西更具可注射性

00:37:24.950 --> 00:37:30.619
有所有这些对象，就像你知道的

00:37:28.520 --> 00:37:34.280
 knit参数标题表

00:37:30.619 --> 00:37:35.850
您可以基于应用程序映射基础上下文

00:37:34.280 --> 00:37:39.090
只需将它们注入您的

00:37:35.850 --> 00:37:40.740
豆很容易，所以如果我们看着

00:37:39.090 --> 00:37:44.430
我希望在此页面上看到一个

00:37:40.740 --> 00:37:47.220
很多表达式，然后它们是

00:37:44.430 --> 00:37:53.840
会被指向要去的豆子

00:37:47.220 --> 00:38:00.860
向我们展示所有这些属性注入

00:37:53.840 --> 00:38:04.290
好吧，哦，我去了，我做了索引

00:38:00.860 --> 00:38:07.790
对不起，确实是

00:38:04.290 --> 00:38:12.150
所以注入被注入的假象

00:38:07.790 --> 00:38:14.130
让我们看一下注入均值

00:38:12.150 --> 00:38:16.020
你可以在这里看到这些都是

00:38:14.130 --> 00:38:17.520
现在可以注入的东西，这个

00:38:16.020 --> 00:38:20.550
就是一个很好的例子，因为它只是

00:38:17.520 --> 00:38:22.950
在一处展示所有内容

00:38:20.550 --> 00:38:26.010
只是用常规的CDI方法完成

00:38:22.950 --> 00:38:29.250
你期望它会做，它把

00:38:26.010 --> 00:38:34.200
此处和使用帖子中的一些值

00:38:29.250 --> 00:38:38.540
构造注释，所以让我问

00:38:34.200 --> 00:38:43.890
听众是谁还在用旧

00:38:38.540 --> 00:38:48.930
老式的常规JSF托管bean 

00:38:43.890 --> 00:38:51.630
没关系，CDI看起来像什么吗

00:38:48.930 --> 00:38:53.940
你当然想搬到

00:38:51.630 --> 00:38:56.210
其他人想分享的是

00:38:53.940 --> 00:38:59.870
您最终想要获得CDI的

00:38:56.210 --> 00:38:59.870
可能还可以

00:39:04.380 --> 00:39:14.650
然后做Tomcat是的，好吧

00:39:11.770 --> 00:39:16.900
所以大卫指出了一个非常普遍的

00:39:14.650 --> 00:39:19.090
我想要的JSF使用模式

00:39:16.900 --> 00:39:21.850
将观众吸引到谁在使用

00:39:19.090 --> 00:39:28.840
 JSF仅在不带直线的Tomcat上

00:39:21.850 --> 00:39:31.240
其他Java EE的东西还可以，这样

00:39:28.840 --> 00:39:32.890
只是来自你知道的东西

00:39:31.240 --> 00:39:35.859
我就是那种Web框架

00:39:32.890 --> 00:39:38.200
之前在谈论，这是

00:39:35.859 --> 00:39:41.290
 Apache Tommy拥有的一件事

00:39:38.200 --> 00:39:43.090
真的很好解决是这样的

00:39:41.290 --> 00:39:45.609
这就是为什么我认为David Blevins有一个

00:39:43.090 --> 00:39:47.320
真正的机会，使一些

00:39:45.609 --> 00:39:49.420
这里进步很大

00:39:47.320 --> 00:39:52.840
它是Tomcat，但也有开放的网络

00:39:49.420 --> 00:39:55.900
豆和CDI东西烤出来的

00:39:52.840 --> 00:39:58.869
无论如何，我的好选择

00:39:55.900 --> 00:40:00.730
指出这一点是有一点

00:39:58.869 --> 00:40:02.020
与CVI和其中之一的学习曲线

00:40:00.730 --> 00:40:06.220
你要记住的是

00:40:02.020 --> 00:40:09.400
当你得到这个东西的阶段上下文

00:40:06.220 --> 00:40:12.280
这不是实际的实际阶段环境

00:40:09.400 --> 00:40:14.800
那你就可以知道自己下调了

00:40:12.280 --> 00:40:16.000
它到您的任何实现类

00:40:14.800 --> 00:40:18.550
想知道你会得到一个

00:40:16.000 --> 00:40:22.119
代理，他们用

00:40:18.550 --> 00:40:25.630
动态代理，因此您必须接受

00:40:22.119 --> 00:40:29.140
那是因为神奇的秘密酱

00:40:25.630 --> 00:40:31.600
让CDI让CDI做到所有

00:40:29.140 --> 00:40:34.210
创造您从未使用过的东西

00:40:31.600 --> 00:40:35.740
注射类型的新操作员

00:40:34.210 --> 00:40:39.750
框架是相同的

00:40:35.740 --> 00:40:39.750
春天春天也做代理

00:40:40.059 --> 00:40:51.699
好吧，让我们看看我们有，让我们看看我们

00:40:44.680 --> 00:40:53.140
从45开始，我们开始是5 

00:40:51.699 --> 00:40:55.569
分钟好，谢谢，这就是我的意思

00:40:53.140 --> 00:40:57.789
想知道好吧，这些都是

00:40:55.569 --> 00:40:59.559
我想了解的功能和

00:40:57.789 --> 00:41:00.819
我想保存问题，所以五个

00:40:59.559 --> 00:41:03.449
 10分钟

00:41:00.819 --> 00:41:09.849
让我安排感兴趣的会议

00:41:03.449 --> 00:41:11.199
滑动当前幻灯片，而我拍

00:41:09.849 --> 00:41:12.880
这些是其他一些问题

00:41:11.199 --> 00:41:15.609
我特别想提一提

00:41:12.880 --> 00:41:17.769
给我在这里波特兰深潜

00:41:15.609 --> 00:41:19.900
今晚5:30我的好朋友弗农

00:41:17.769 --> 00:41:21.519
单身人士，所以这些很棒

00:41:19.900 --> 00:41:23.170
这些都是很棒的会议

00:41:21.519 --> 00:41:25.150
我可能会尝试去尽可能多的人

00:41:23.170 --> 00:41:27.279
他们中，我可能会全力以赴

00:41:25.150 --> 00:41:33.459
推开它，以便其他打开

00:41:27.279 --> 00:41:36.549
这里的问题是我认为的剪辑

00:41:33.459 --> 00:41:39.400
杰伊与杰伊的对比

00:41:36.549 --> 00:41:41.589
 servlet jsf就像是理想的候选人

00:41:39.400 --> 00:41:43.799
向前迈进了

00:41:41.589 --> 00:41:46.479
社区至少有两个政党

00:41:43.799 --> 00:41:49.089
 Liferay和Omni的面孔

00:41:46.479 --> 00:41:52.119
表示有兴趣接管和

00:41:49.089 --> 00:41:55.179
不断推动规范发展

00:41:52.119 --> 00:41:56.529
可能甚至更多，但对我来说

00:41:55.179 --> 00:41:58.959
这两方中的任何一方都是

00:41:56.529 --> 00:42:00.339
很好，因为他们已经在

00:41:58.959 --> 00:42:01.959
他们已经知道该怎么做的社区

00:42:00.339 --> 00:42:05.349
他们认识他们很久的事情

00:42:01.959 --> 00:42:09.099
时间，他们有经济利益

00:42:05.349 --> 00:42:11.589
在前进，让我们成为

00:42:09.099 --> 00:42:13.779
坦率地说，Oracle为

00:42:11.589 --> 00:42:15.309
股东的经济利益

00:42:13.779 --> 00:42:17.949
对于一个人来说，这绝对是一件好事

00:42:15.309 --> 00:42:22.059
上市公司做，你知道

00:42:17.949 --> 00:42:24.039
每个人都应该记住， 

00:42:22.059 --> 00:42:25.449
命令其他利益相关者去做

00:42:24.039 --> 00:42:28.209
他们也必须这样

00:42:25.449 --> 00:42:30.009
知道公关想成为的全能面孔

00:42:28.209 --> 00:42:33.160
成功并做到这一点，他们已经

00:42:30.009 --> 00:42:34.479
制定了正确的商业计划和人员配置

00:42:33.160 --> 00:42:36.759
为此，人生也一样

00:42:34.479 --> 00:42:39.489
他们有一种商业模式

00:42:36.759 --> 00:42:42.789
部分到大部分实际上由

00:42:39.489 --> 00:42:45.640
 JSF，所以他们也想这样做

00:42:42.789 --> 00:42:50.049
所以我认为这都是来自的好消息

00:42:45.640 --> 00:42:52.170
那边，还有其他问题吗

00:42:50.049 --> 00:42:52.170
知道

00:42:54.300 --> 00:43:01.570
好吧，如果我说我的其他伺服讲话

00:42:57.640 --> 00:43:03.760
 servlet是这么基础的

00:43:01.570 --> 00:43:06.160
这将变得更加困难

00:43:03.760 --> 00:43:09.579
所有现有的利益相关者

00:43:06.160 --> 00:43:12.099
继续以相同的方式进行比赛

00:43:09.579 --> 00:43:15.400
他们与JCP合作，我想我不知道

00:43:12.099 --> 00:43:16.750
但这更像是一个组织

00:43:15.400 --> 00:43:18.490
挑战胜于技术挑战

00:43:16.750 --> 00:43:21.040
虽然这是一个技术

00:43:18.490 --> 00:43:22.900
好吧，因为没有历史

00:43:21.040 --> 00:43:24.640
在不同的servlet中交换

00:43:22.900 --> 00:43:26.500
实现不同的容器

00:43:24.640 --> 00:43:27.040
就像操作系统的一部分一样

00:43:26.500 --> 00:43:29.320
真

00:43:27.040 --> 00:43:32.020
而对于JSF来说， 

00:43:29.320 --> 00:43:35.200
可插拔的，我负债累累

00:43:32.020 --> 00:43:36.579
感谢曼弗雷德·盖勒和马丁

00:43:35.200 --> 00:43:38.470
 marin小妞和所有来自

00:43:36.579 --> 00:43:40.960
落后的公司aryan 

00:43:38.470 --> 00:43:42.160
我的脸，你知道我认识他们

00:43:40.960 --> 00:43:43.720
多年以来，这是一个真实的

00:43:42.160 --> 00:43:48.329
很高兴与他们合作

00:43:43.720 --> 00:43:48.329
年以及其他任何问题

00:43:51.680 --> 00:43:54.550
嗯

00:44:03.520 --> 00:44:07.900
一个好问题，如果您正在使用JSF与

00:44:05.740 --> 00:44:11.170
春天是否意味着您不能升级到

00:44:07.900 --> 00:44:14.680
 2.3我确实认为我们已经付出了很多

00:44:11.170 --> 00:44:18.880
与CDI合作，我想答案

00:44:14.680 --> 00:44:22.780
可能是的，我们真的

00:44:18.880 --> 00:44:25.480
试图推广CDI平台

00:44:22.780 --> 00:44:29.890
是我希望MVC要做的事情之一

00:44:25.480 --> 00:44:31.720
规范能够解决，以便

00:44:29.890 --> 00:44:38.740
他们也很便携

00:44:31.720 --> 00:44:40.930
知道好吗，如果我认为Berger没有时间

00:44:38.740 --> 00:44:42.520
非常感谢你，我真的

00:44:40.930 --> 00:44:43.610
感谢您参加会议

00:44:42.520 --> 00:44:49.050
祝你一切顺利

00:44:43.610 --> 00:44:49.050
 [掌声] 

