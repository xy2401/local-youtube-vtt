WEBVTT
Kind: captions
Language: zh-Hans

00:00:00.000 --> 00:00:05.730
跳进来，你受过训练，意识到我

00:00:01.979 --> 00:00:07.919
忘记了我的笔记本电脑，但是现在我有了我的笔记本电脑

00:00:05.730 --> 00:00:15.179
和我在一起但是30秒钟我就像在哦

00:00:07.919 --> 00:00:18.570
在我的大腿上拉屎我是的，不要问那是

00:00:15.179 --> 00:00:21.449
很早，所以我乘飞机飞过巴黎

00:00:18.570 --> 00:00:24.420
被耽搁了，我知道我们大多数人都有

00:00:21.449 --> 00:00:26.369
我来这里时与港口相撞

00:00:24.420 --> 00:00:30.599
一小时前才到达

00:00:26.369 --> 00:00:33.380
所以一切都很好，我有一些

00:00:30.599 --> 00:00:35.730
我也有很多演示

00:00:33.380 --> 00:00:38.760
自然会走，所以我的名字是

00:00:35.730 --> 00:00:40.290
 David Alaba说我在Oracle工作， 

00:00:38.760 --> 00:00:46.160
今天我们要讨论一个项目

00:00:40.290 --> 00:00:48.480
我之前提到过的哈里丹

00:00:46.160 --> 00:00:50.670
即使我有法国口音

00:00:48.480 --> 00:00:54.629
来自我工作的比利时

00:00:50.670 --> 00:00:58.020
 Oracle我正在向美国报告

00:00:54.629 --> 00:01:01.530
是某人，所以这是我在瑞典

00:00:58.020 --> 00:01:02.879
 2017年为重点， 

00:01:01.530 --> 00:01:04.769
观众发推文说这不是真的

00:01:02.879 --> 00:01:06.689
会议，除非您阅读了Oracle 

00:01:04.769 --> 00:01:14.970
至少要声明的教学大纲

00:01:06.689 --> 00:01:16.979
一次，因此请享受另一个免责声明

00:01:14.970 --> 00:01:20.270
我不知道这是谁吗

00:01:16.979 --> 00:01:23.189
您正在使用那些新的Mac键盘

00:01:20.270 --> 00:01:25.290
蝴蝶键盘，我会做演示， 

00:01:23.189 --> 00:01:26.790
我很确定我会

00:01:25.290 --> 00:01:29.689
演示无法正常工作，这是因为

00:01:26.790 --> 00:01:32.340
键盘，我会告诉你

00:01:29.689 --> 00:01:33.900
所以今天的议程我们要

00:01:32.340 --> 00:01:35.850
讨论卤化物，所以我将从

00:01:33.900 --> 00:01:38.460
关于伊利丹的介绍，这是什么

00:01:35.850 --> 00:01:40.259
然后我基本上会告诉你

00:01:38.460 --> 00:01:41.729
行动不多，希望我们会

00:01:40.259 --> 00:01:45.600
最后有一些时间来回答

00:01:41.729 --> 00:01:47.040
问题，所以Haledon首先有人

00:01:45.600 --> 00:01:50.399
猜猜Haledon是什么意思

00:01:47.040 --> 00:01:53.579
青瓷意味着我正常

00:01:50.399 --> 00:01:55.680
也不知道，所以我们不得不检查

00:01:53.579 --> 00:01:57.479
这样写的维基百科是一种鸟

00:01:55.680 --> 00:01:59.159
细长的流线型身体和长

00:01:57.479 --> 00:02:00.750
尖的翅膀你好

00:01:59.159 --> 00:02:04.530
机动性和非常高效

00:02:00.750 --> 00:02:07.170
基本上是只鸟

00:02:04.530 --> 00:02:08.819
这就是行销的方式和好处

00:02:07.170 --> 00:02:10.259
关于那种类型的事情

00:02:08.819 --> 00:02:12.860
鸟是他们通常非常

00:02:10.259 --> 00:02:17.270
涉及云的敏捷

00:02:12.860 --> 00:02:20.270
因此名字如此隐蔽

00:02:17.270 --> 00:02:22.970
点IO只需简单地输入

00:02:20.270 --> 00:02:25.990
 Haledon基本上是Java的集合

00:02:22.970 --> 00:02:28.460
开发微服务的库

00:02:25.990 --> 00:02:31.490
这是一个我们拥有的项目

00:02:28.460 --> 00:02:34.280
去年10月推出，所以

00:02:31.490 --> 00:02:36.280
很新，显然是开源的

00:02:34.280 --> 00:02:40.160
它是Apache V-一切都在github上

00:02:36.280 --> 00:02:42.800
所以github.com斜线oracle斜线Haledon 

00:02:40.160 --> 00:02:45.070
我们在推特上我们也有一个公众

00:02:42.800 --> 00:02:48.080
松弛的渠道，我们有这个

00:02:45.070 --> 00:02:49.610
 helenandheid高级网站，如果您只是

00:02:48.080 --> 00:02:51.920
必须记住一种资源就是一种

00:02:49.610 --> 00:02:53.690
链接只是转到我欠的Haledon 

00:02:51.920 --> 00:02:55.190
一切都从那里链接到你

00:02:53.690 --> 00:02:58.250
会看到这是一个精心设计的

00:02:55.190 --> 00:03:02.660
网站，即使它已经设计

00:02:58.250 --> 00:03:04.970
因此，在开始之前

00:03:02.660 --> 00:03:07.430
 Haledon适合哪里，所以这是

00:03:04.970 --> 00:03:09.410
基本上我们对Java micro的看法

00:03:07.430 --> 00:03:11.900
服务框架景观，这是我们的

00:03:09.410 --> 00:03:14.000
查看，所以不要以这种方式

00:03:11.900 --> 00:03:15.980
市场的普遍看法，但这是

00:03:14.000 --> 00:03:18.370
基本上我会把市场分类

00:03:15.980 --> 00:03:21.140
所以我们基本上看到三种类型的

00:03:18.370 --> 00:03:23.090
编写微服务的框架

00:03:21.140 --> 00:03:24.980
 Java首先，我们有完整的堆栈

00:03:23.090 --> 00:03:27.560
例如带来良好的框架

00:03:24.980 --> 00:03:29.720
 Java EE Jakarta II也将适用于此

00:03:27.560 --> 00:03:31.190
那么我们有所有的框架

00:03:29.720 --> 00:03:33.140
基于微观特征

00:03:31.190 --> 00:03:34.940
规格他们显然更多

00:03:33.140 --> 00:03:37.370
比全栈框架轻巧

00:03:34.940 --> 00:03:38.900
在能力方面，也许他们没有

00:03:37.370 --> 00:03:40.400
有所有的能力和所有的

00:03:38.900 --> 00:03:42.860
波纹管和所有的钟声和口哨声

00:03:40.400 --> 00:03:45.320
我们拥有完整的堆栈框架，但是

00:03:42.860 --> 00:03:47.810
敏捷比敏捷更强大

00:03:45.320 --> 00:03:49.940
全栈框架，然后在

00:03:47.810 --> 00:03:52.519
底部有麦克，我们称之为微

00:03:49.940 --> 00:03:54.170
框架通常非常精益

00:03:52.519 --> 00:03:55.970
轻量级框架

00:03:54.170 --> 00:03:58.489
再次具有比

00:03:55.970 --> 00:04:01.610
微型配置文件，但那些

00:03:58.489 --> 00:04:03.170
框架也很有吸引力

00:04:01.610 --> 00:04:07.370
基于微概要文件的框架的术语

00:04:03.170 --> 00:04:09.410
我们已经公开使用BRT payara夸克

00:04:07.370 --> 00:04:12.290
那些日子我相信dontel现在

00:04:09.410 --> 00:04:14.959
在微型框架方面正在飞行

00:04:12.290 --> 00:04:17.630
我们是标枪之类的框架

00:04:14.959 --> 00:04:19.370
微节点等等海伦在哪里

00:04:17.630 --> 00:04:21.289
身体健康，我认为海伦很

00:04:19.370 --> 00:04:24.320
恰好适合两个

00:04:21.289 --> 00:04:27.100
使其适合微观轮廓水平

00:04:24.320 --> 00:04:29.710
所以写上有盖就可以

00:04:27.100 --> 00:04:33.490
使用所有微型配置文件API，但它

00:04:29.710 --> 00:04:34.840
也坐在微观框架层面

00:04:33.490 --> 00:04:36.280
因为你会看到对你有效

00:04:34.840 --> 00:04:38.020
基本上有选择，我们有两个

00:04:36.280 --> 00:04:39.280
编程模型，由您决定

00:04:38.020 --> 00:04:43.720
开发人员决定采用哪种方法

00:04:39.280 --> 00:04:47.050
您要使用，所以我们添加了NAC 

00:04:43.720 --> 00:04:49.630
这实际上是纯Java SE的方式

00:04:47.050 --> 00:04:51.580
编写微服务，这就是为什么我们

00:04:49.630 --> 00:04:56.110
称之为微框架

00:04:51.580 --> 00:04:58.060
基本上是我们的功能样式

00:04:56.110 --> 00:04:59.620
有一些反应性Coverity， 

00:04:58.060 --> 00:05:01.930
非常透明，所以没有隐藏

00:04:59.620 --> 00:05:03.790
像注射一样的魔术

00:05:01.930 --> 00:05:07.690
利比亚Al-anon您基本上看到了您

00:05:03.790 --> 00:05:10.180
写出您想要的东西，我们

00:05:07.690 --> 00:05:12.070
稍后会看到一些代码，然后

00:05:10.180 --> 00:05:13.960
基于此，我们编写了一个MP 

00:05:12.070 --> 00:05:17.500
基本上符合宏

00:05:13.960 --> 00:05:20.530
配置文件规范

00:05:17.500 --> 00:05:22.900
声明式的风格比AC的领先优势

00:05:20.530 --> 00:05:24.850
真正当务之急是当务之急

00:05:22.900 --> 00:05:27.190
在MP的领先优势中，您显然会使用

00:05:24.850 --> 00:05:30.700
例如注释一些

00:05:27.190 --> 00:05:32.470
就交流而言，您不会这样做

00:05:30.700 --> 00:05:34.210
 API方面，我们实际上是在谈论微

00:05:32.470 --> 00:05:36.460
配置文件，所以我们使用的是CGI Jack's 

00:05:34.210 --> 00:05:38.500
逮捕Jason PJ和B等，依此类推

00:05:36.460 --> 00:05:40.510
因此，如果您来自微型

00:05:38.500 --> 00:05:43.690
概要文件或Java空间

00:05:40.510 --> 00:05:46.419
通常你会去哪里，我会

00:05:43.690 --> 00:05:50.169
喜欢使用圣名MP编程

00:05:46.419 --> 00:05:52.930
现在来看一下架构

00:05:50.169 --> 00:05:54.640
哈里丹AC我们有三个核心

00:05:52.930 --> 00:05:56.020
我们有一个Web服务器的组件

00:05:54.640 --> 00:05:57.820
组件我们有一个配置

00:05:56.020 --> 00:06:02.530
组件，我们有一个安全

00:05:57.820 --> 00:06:04.840
正如我提到的安全组件

00:06:02.530 --> 00:06:08.140
 Halidon没有隐藏的魔术

00:06:04.840 --> 00:06:10.150
 AC，所以很简单透明

00:06:08.140 --> 00:06:11.979
注射否控制反转否

00:06:10.150 --> 00:06:13.210
包装技巧等等，等等

00:06:11.979 --> 00:06:16.080
一天结束时我们是什么

00:06:13.210 --> 00:06:18.850
生成是一个纯Java C应用程序

00:06:16.080 --> 00:06:21.160
 Web服务器组件的内部

00:06:18.850 --> 00:06:23.710
正在使用nettie，这就是

00:06:21.160 --> 00:06:26.590
在此基础上讲很有意义

00:06:23.710 --> 00:06:28.210
我们有一个Halligan MP，所以基本上

00:06:26.590 --> 00:06:31.330
正在利用潜在的伊利丹

00:06:28.210 --> 00:06:36.130
 ase平台基本建立哈里丹

00:06:31.330 --> 00:06:38.410
议员旁边，我们有一个额外的

00:06:36.130 --> 00:06:40.480
可选项目，基本上有帮助

00:06:38.410 --> 00:06:43.090
整合外部服务

00:06:40.480 --> 00:06:44.860
那就是Hillen的一部分

00:06:43.090 --> 00:06:47.050
项目，但我们唯一需要的是

00:06:44.860 --> 00:06:50.410
使用所有这些组件基本上是

00:06:47.050 --> 00:06:52.870
 CDI，因此您可以接受这些服务

00:06:50.410 --> 00:06:58.120
集成并使用它使用

00:06:52.870 --> 00:06:59.470
任何微型配置文件的实现，如果

00:06:58.120 --> 00:07:03.910
我们来看这三个的能力

00:06:59.470 --> 00:07:06.340
响应式Web服务器的核心组件

00:07:03.910 --> 00:07:07.930
简单，因此提供简单的功能

00:07:06.340 --> 00:07:09.370
具有反应流API的路由模型

00:07:07.930 --> 00:07:12.040
那是我们稍后会看到的

00:07:09.370 --> 00:07:13.419
基于它提供的Letty 

00:07:12.040 --> 00:07:15.460
跟踪指标和健康检查

00:07:13.419 --> 00:07:17.620
能力再次是那件事

00:07:15.460 --> 00:07:20.500
我们还将利用微型

00:07:17.620 --> 00:07:22.840
侧面的东西也是

00:07:20.500 --> 00:07:24.580
重要的是要记住，所以我们有两个

00:07:22.840 --> 00:07:26.620
级别，我们在SC方面有领先优势，然后我们

00:07:24.580 --> 00:07:28.510
有一个领先的国会议员说，那里

00:07:26.620 --> 00:07:31.000
有一些来自L的API的功能

00:07:28.510 --> 00:07:33.580
可用于的MP微型配置文件

00:07:31.000 --> 00:07:36.280
 AC端通常可以使用Jersey 

00:07:33.580 --> 00:07:39.190
如果你想在苍鹭和南卡罗来纳州

00:07:36.280 --> 00:07:41.050
这样做JSON P，所以它也是一个API 

00:07:39.190 --> 00:07:43.360
您可以在交流侧使用

00:07:41.050 --> 00:07:46.000
再建一个，但是通常你会

00:07:43.360 --> 00:07:48.580
我可能不想在AC上使用CDI 

00:07:46.000 --> 00:07:52.270
如果您想使用CDI， 

00:07:48.580 --> 00:07:54.250
必须在微型侧面

00:07:52.270 --> 00:07:56.919
指令Web服务器还提供了

00:07:54.250 --> 00:07:58.630
能够进行静态Web服务的功能

00:07:56.919 --> 00:08:00.789
这不是一个成熟的网站

00:07:58.630 --> 00:08:02.349
服务器，但如果您的应用程序

00:08:00.789 --> 00:08:04.120
服务需要做一些基本的网页

00:08:02.349 --> 00:08:06.010
服务是你可以做的

00:08:04.120 --> 00:08:09.520
直接在您的Allegiant SC中

00:08:06.010 --> 00:08:13.270
现在，如果我们查看配置

00:08:09.520 --> 00:08:14.560
配置组件是

00:08:13.270 --> 00:08:17.200
您可以用来基本

00:08:14.560 --> 00:08:20.020
处理配置，使其支持

00:08:17.200 --> 00:08:21.300
多个数据源

00:08:20.020 --> 00:08:27.430
测试我们正在谈论的单词

00:08:21.300 --> 00:08:29.830
属性文件，简单文件等

00:08:27.430 --> 00:08:32.020
等它支持不同的困难

00:08:29.830 --> 00:08:35.440
您可以用来处理这些数据的

00:08:32.020 --> 00:08:39.099
来源，例如JSON hawk等等

00:08:35.440 --> 00:08:40.570
等等，这也可以养活自己

00:08:39.099 --> 00:08:42.669
获取资源的能力

00:08:40.570 --> 00:08:45.310
对不起，您的配置来自其他

00:08:42.669 --> 00:08:48.730
来源，例如每个CD或

00:08:45.310 --> 00:08:51.280
门或平面端点

00:08:48.730 --> 00:08:53.020
事情，你也可以扩展它

00:08:51.280 --> 00:08:56.560
你可以例如我有JSON 

00:08:53.020 --> 00:08:59.500
两者都通过掌握观点而你

00:08:56.560 --> 00:09:01.660
可以很容易地消耗掉它，你也可以

00:08:59.500 --> 00:09:03.850
具体处理配置

00:09:01.660 --> 00:09:05.530
格式，如果您不满意

00:09:03.850 --> 00:09:07.570
开箱即用的格式

00:09:05.530 --> 00:09:09.490
你有能力扩展和隐藏

00:09:07.570 --> 00:09:14.920
您的家用解析器与您的戒指

00:09:09.490 --> 00:09:16.630
自己的代码配置格式非常精确

00:09:14.920 --> 00:09:19.240
这个想法是它对

00:09:16.630 --> 00:09:20.740
一旦您获取了所有配置

00:09:19.240 --> 00:09:22.030
配置，您将基本上有一个

00:09:20.740 --> 00:09:24.220
您可以访问的内存树

00:09:22.030 --> 00:09:30.250
从您的透明访问

00:09:24.220 --> 00:09:31.660
您也可以使用Pooler的应用程序

00:09:30.250 --> 00:09:33.580
想法是，一旦您获取了

00:09:31.660 --> 00:09:34.960
收到通知后，抱歉

00:09:33.580 --> 00:09:36.970
配置也许你想知道

00:09:34.960 --> 00:09:39.820
给定的配置已经

00:09:36.970 --> 00:09:41.680
已更新，因此配置本身

00:09:39.820 --> 00:09:43.570
是不可变的，因此不会改变，但是

00:09:41.680 --> 00:09:44.950
如果外部配置已经

00:09:43.570 --> 00:09:47.440
改变了那也许是你

00:09:44.950 --> 00:09:48.820
想知道您的代码中，所以

00:09:47.440 --> 00:09:51.100
完全有可能的事情

00:09:48.820 --> 00:09:53.040
您可以将某种侦听器附加到

00:09:51.100 --> 00:09:55.650
收到该配置的通知

00:09:53.040 --> 00:09:58.210
例如，属性已更新

00:09:55.650 --> 00:09:59.950
作为但并非最不重要的安全

00:09:58.210 --> 00:10:02.950
基本上可以让您

00:09:59.950 --> 00:10:04.210
保护您的应用程序安全

00:10:02.950 --> 00:10:06.640
提供身份验证的框

00:10:04.210 --> 00:10:09.730
授权出站安全圣

00:10:06.640 --> 00:10:12.100
东西等等等等等等

00:10:09.730 --> 00:10:17.340
我们提供不同的提供商，所以

00:10:12.100 --> 00:10:20.230
有GWT HTTP基本HTTP摘要

00:10:17.340 --> 00:10:22.570
谷歌登出，所以有一个

00:10:20.230 --> 00:10:25.660
 Google登录提供商不高

00:10:22.570 --> 00:10:28.030
 DC等等等，所以我不会发展

00:10:25.660 --> 00:10:31.870
好吧，我不记得了

00:10:28.030 --> 00:10:33.450
他们中的，所以看看文档，这是

00:10:31.870 --> 00:10:35.890
基本上是三个核心组成部分

00:10:33.450 --> 00:10:38.890
 eridan SE，您将使用那些

00:10:35.890 --> 00:10:40.980
组件来构建您的应用程序

00:10:38.890 --> 00:10:47.970
这是一个非常基本的片段集

00:10:40.980 --> 00:10:51.220
腺嘌呤SC应用程序，所以您会看到

00:10:47.970 --> 00:10:52.690
创建一个Web服务器，我们基本上

00:10:51.220 --> 00:10:55.840
使用我们已有的一些概念

00:10:52.690 --> 00:10:58.270
在JavaScript旁注通常如此

00:10:55.840 --> 00:10:59.740
 Web服务器创建约定

00:10:58.270 --> 00:11:01.660
配置，所以如果我们不指定

00:10:59.740 --> 00:11:04.210
我们将采用默认值的任何内容

00:11:01.660 --> 00:11:07.010
有网络服务器后的默认值

00:11:04.210 --> 00:11:09.889
信用，我们需要提供一些常规

00:11:07.010 --> 00:11:14.540
所以这是一个简单的路由定义

00:11:09.889 --> 00:11:19.190
路由基本上就是你绑在一起

00:11:14.540 --> 00:11:20.899
 HTTP方法带有一些路径映射，因此

00:11:19.190 --> 00:11:22.430
例如在这种情况下，我只是

00:11:20.899 --> 00:11:26.389
指定在这种情况下，我要

00:11:22.430 --> 00:11:29.029
任何HTTP方法的答案，请放

00:11:26.389 --> 00:11:32.170
发布删除等，依此类推

00:11:29.029 --> 00:11:34.820
路径，这称为处理程序，因此

00:11:32.170 --> 00:11:36.529
处理程序基本上得到一个请求和一个

00:11:34.820 --> 00:11:38.750
响应，我们可以轻松更改

00:11:36.529 --> 00:11:41.810
在一起下多个

00:11:38.750 --> 00:11:43.579
处理程序通常会提供

00:11:41.810 --> 00:11:47.120
回应，因此它将回应

00:11:43.579 --> 00:11:48.440
到远程端点的

00:11:47.120 --> 00:11:51.050
我们在这里使用

00:11:48.440 --> 00:11:54.290
回应对象或回应感

00:11:51.050 --> 00:11:56.660
在AC上向你问好海伦，但我们也可以

00:11:54.290 --> 00:12:00.260
一起检查它们，以便处理程序可以

00:11:56.660 --> 00:12:03.769
也可以例如这样

00:12:00.260 --> 00:12:05.899
这个想法是，我们将有一个

00:12:03.769 --> 00:12:07.820
首先会基本调用的处理程序

00:12:05.899 --> 00:12:09.589
另一个处理程序是

00:12:07.820 --> 00:12:11.959
会做其他事情，最后

00:12:09.589 --> 00:12:14.810
当天的最终处理程序会很好

00:12:11.959 --> 00:12:17.329
藏身者将回应发送给

00:12:14.810 --> 00:12:20.510
连接的远程端点，否则它将

00:12:17.329 --> 00:12:23.000
抛出将被处理的错误

00:12:20.510 --> 00:12:24.319
我们正在定义我们正在使用的路由

00:12:23.000 --> 00:12:26.300
构建模式，所以我们构建对象

00:12:24.319 --> 00:12:28.190
而我们要做的唯一一件事

00:12:26.300 --> 00:12:30.350
实际上是一个引导程序

00:12:28.190 --> 00:12:33.230
在网络上调用staff方法

00:12:30.350 --> 00:12:34.910
服务器，我们走了，我们有一个小

00:12:33.230 --> 00:12:40.940
在ellen中运行的Web服务器

00:12:34.910 --> 00:12:43.519
老实说，海伦和C是一回事

00:12:40.940 --> 00:12:46.370
我们有一个亚麻MP，现在

00:12:43.519 --> 00:12:48.649
基于微观特征，因此任何人

00:12:46.370 --> 00:12:53.089
知道什么人不知道什么

00:12:48.649 --> 00:12:54.829
简而言之，事实并非如此

00:12:53.089 --> 00:12:57.319
这基本上是一组规范

00:12:54.829 --> 00:12:58.130
由reddit IBM发起，以满足他们

00:12:57.319 --> 00:13:01.459
罗伯与皮拉

00:12:58.130 --> 00:13:03.589
当Java EE不断发展，所以他们

00:13:01.459 --> 00:13:05.990
决定努力并尝试利用

00:13:03.589 --> 00:13:08.750
划分形式定义其他

00:13:05.990 --> 00:13:10.880
更加针对宏的API 

00:13:08.750 --> 00:13:13.250
从那时起，Oracle服务便加入了

00:13:10.880 --> 00:13:14.959
这是倡议，现在是微

00:13:13.250 --> 00:13:16.550
轮廓是两个的微观轮廓

00:13:14.959 --> 00:13:18.769
所以基本上是基于时间的

00:13:16.550 --> 00:13:20.250
规格，所以我想每六个

00:13:18.769 --> 00:13:24.030
他们正在与几个月发布

00:13:20.250 --> 00:13:25.830
有什么可用的，这就是我们

00:13:24.030 --> 00:13:29.640
用于更多的企业方面

00:13:25.830 --> 00:13:32.220
 Haledon的居民我住在mp，所以这是

00:13:29.640 --> 00:13:35.370
议员海伦（Helene）现在让我们放大宏

00:13:32.220 --> 00:13:39.450
侧面，看看我们今天在哪里

00:13:35.370 --> 00:13:42.000
与伊朗国会议员，所以我们首先开始

00:13:39.450 --> 00:13:44.670
支持micro profile 1.0，所以jax-rs 

00:13:42.000 --> 00:13:46.920
 CDI和JSONP现在我们是

00:13:44.670 --> 00:13:48.420
支持1个微轮廓1 2 

00:13:46.920 --> 00:13:50.460
表示我们支持配置

00:13:48.420 --> 00:13:53.640
我们支持的微型配置文件的api 

00:13:50.460 --> 00:13:57.180
矩阵API，我将检查转弯和GWT 

00:13:53.640 --> 00:13:59.660
从技术上讲，我们也在支持

00:13:57.180 --> 00:14:02.550
 JSON在当前的Helena版本中

00:13:59.660 --> 00:14:04.890
不属于微观档案-因此

00:14:02.550 --> 00:14:08.820
现在我们在微

00:14:04.890 --> 00:14:10.680
配置文件1.2和2.2，显然我们是

00:14:08.820 --> 00:14:15.990
努力完全遵守

00:14:10.680 --> 00:14:18.810
微型档案2.2，正如我提到的MP 

00:14:15.990 --> 00:14:23.160
基于交流，所以如果我们看例如

00:14:18.810 --> 00:14:24.960
微型配置文件配置API是

00:14:23.160 --> 00:14:27.360
与我们所拥有的不同

00:14:24.960 --> 00:14:29.370
在交流方面说

00:14:27.360 --> 00:14:31.890
引擎盖中的微配置文件配置API 

00:14:29.370 --> 00:14:39.290
 Haledon MP显然正在使用

00:14:31.890 --> 00:14:42.420
哈里丹交流配置API，所以这就是

00:14:39.290 --> 00:14:46.710
其余端点在harridan MP中看起来像

00:14:42.420 --> 00:14:47.880
基本上是jax-rs， 

00:14:46.710 --> 00:14:49.590
在这方面没有新内容

00:14:47.880 --> 00:14:53.250
这是我们所有人都曾使用过的API 

00:14:49.590 --> 00:14:55.050
使用多年，所以我们有一个

00:14:53.250 --> 00:14:56.580
在这种情况下使用一种方法的类

00:14:55.050 --> 00:14:58.980
这是一种资源方法

00:14:56.580 --> 00:15:01.350
用HUD注释获取注释

00:14:58.980 --> 00:15:06.360
所以这将回答HTTP GET 

00:15:01.350 --> 00:15:08.580
帽子路径下的请求

00:15:06.360 --> 00:15:10.920
每当我们有要求时

00:15:08.580 --> 00:15:12.390
只是向你问好Haledon MP，所以

00:15:10.920 --> 00:15:17.700
基本上和我们之前的例子相同

00:15:12.390 --> 00:15:19.380
之前，但在MP上使用线索编写，因此

00:15:17.700 --> 00:15:21.630
我很快提到了可选

00:15:19.380 --> 00:15:22.890
属于CDI扩展项目

00:15:21.630 --> 00:15:25.410
哈里丹，但那不是那个

00:15:22.890 --> 00:15:28.560
您需要立即使用

00:15:25.410 --> 00:15:30.120
我们提供了三个扩展名之一

00:15:28.560 --> 00:15:32.190
连接到数据库要连接

00:15:30.120 --> 00:15:33.040
 Redis并想连接到Oracle 

00:15:32.190 --> 00:15:36.339
云对象

00:15:33.040 --> 00:15:38.110
或在后台我们只需要CDI，所以

00:15:36.339 --> 00:15:39.910
这意味着您可以使用给定的

00:15:38.110 --> 00:15:43.300
他们与其他任何人都是开源的

00:15:39.910 --> 00:15:46.149
微型配置文件的实现

00:15:43.300 --> 00:15:48.310
数据源扩展看起来像你

00:15:46.149 --> 00:15:50.920
首先需要定义以定义您的

00:15:48.310 --> 00:15:53.290
配置，例如使用

00:15:50.920 --> 00:15:55.569
微型配置文件配置API 

00:15:53.290 --> 00:15:57.880
那将是属性文件

00:15:55.569 --> 00:15:59.980
在这种情况下，通过课程就可以了

00:15:57.880 --> 00:16:03.610
在配置文件中定义所有内容

00:15:59.980 --> 00:16:06.430
然后您使用CDI注入

00:16:03.610 --> 00:16:08.199
该数据源连接以及

00:16:06.430 --> 00:16:10.980
关于这一点，您可以使用e使用

00:16:08.199 --> 00:16:14.680
您的其他数据源连接

00:16:10.980 --> 00:16:18.430
匿名微个人资料代码，让我们

00:16:14.680 --> 00:16:20.920
看一看，实际上是

00:16:18.430 --> 00:16:23.440
演示只是开玩笑

00:16:20.920 --> 00:16:26.699
东京，因为它的演示是著名的商店

00:16:23.440 --> 00:16:31.269
在东京，现在是演示时间

00:16:26.699 --> 00:16:33.370
所以我们今天会看到的很好

00:16:31.269 --> 00:16:36.310
首先看看我们如何轻松

00:16:33.370 --> 00:16:38.350
引导Haledon我看到了国会议员

00:16:36.310 --> 00:16:43.029
应用程序，我们将看一些

00:16:38.350 --> 00:16:46.930
配置API，我们将检查一些基本

00:16:43.029 --> 00:16:48.730
路由一些JSON处理，我们将

00:16:46.930 --> 00:16:51.069
可能尝试docker，然后我们将

00:16:48.730 --> 00:16:52.389
也看看kubernetes，因为

00:16:51.069 --> 00:16:54.399
我们正在做的一件事

00:16:52.389 --> 00:16:56.290
基本上是盖子，所以我们给

00:16:54.399 --> 00:16:58.480
您可以轻松使用的框架

00:16:56.290 --> 00:16:59.829
编写该图像的Web服务

00:16:58.480 --> 00:17:02.459
最终，您将

00:16:59.829 --> 00:17:04.809
部署这些Web服务，以便我们

00:17:02.459 --> 00:17:07.419
尝试引导您如何轻松

00:17:04.809 --> 00:17:11.140
创建如何轻松地泊坞窗

00:17:07.419 --> 00:17:13.150
你的哈里丹代码，一旦博士。眼睛

00:17:11.140 --> 00:17:15.790
显然，您可以将其部署在docker中

00:17:13.150 --> 00:17:19.350
 kubernetes对不起，让我们看一下

00:17:15.790 --> 00:17:19.350
行动起来会更清楚

00:17:22.819 --> 00:17:30.690
所以我要做的第一件事

00:17:26.520 --> 00:17:35.790
有没有办法调整投影仪

00:17:30.690 --> 00:17:37.440
因为这不是第一件事

00:17:35.790 --> 00:17:39.809
我要做的是引导程序， 

00:17:37.440 --> 00:17:45.840
 Haledon申请，因此我们

00:17:39.809 --> 00:17:47.880
提供一个Maven原型

00:17:45.840 --> 00:17:49.770
原型生成您可以使用它来

00:17:47.880 --> 00:17:54.170
引导Eider并担任AC 

00:17:49.770 --> 00:17:54.170
应用程序或Haledon MP应用程序

00:18:01.010 --> 00:18:10.010
是的，颜色很时髦，很好

00:18:09.030 --> 00:18:15.090
好

00:18:10.010 --> 00:18:16.679
因此，如果我们看一下Quick Start SC， 

00:18:15.090 --> 00:18:19.350
一堆已创建的文件

00:18:16.679 --> 00:18:21.540
对我们来说，如果您看到有一个双关语

00:18:19.350 --> 00:18:27.870
文件，所以它基本上只是一个专家

00:18:21.540 --> 00:18:32.790
项目，这样我们就可以使用我们的ID，让我们

00:18:27.870 --> 00:18:43.679
看看我们在这里，让我们

00:18:32.790 --> 00:18:46.080
首先在源中看到，所以我们看到

00:18:43.679 --> 00:18:47.760
我们有一个docker目录或Java 

00:18:46.080 --> 00:18:49.200
目录和社区目录，以及

00:18:47.760 --> 00:18:50.820
资源目录，所以我们有一个

00:18:49.200 --> 00:18:53.570
看一下Java目录，我们有两个

00:18:50.820 --> 00:18:58.920
一流的服务和主要服务

00:18:53.570 --> 00:19:00.780
所以这是应用程序

00:18:58.920 --> 00:19:05.160
已经生成了，让我们来看一下

00:19:00.780 --> 00:19:08.220
主要是什么

00:19:05.160 --> 00:19:10.440
在末尾是否可读

00:19:08.220 --> 00:19:12.210
是的，所以我们有一种方法

00:19:10.440 --> 00:19:13.590
东西，所以基本上就是那里

00:19:12.210 --> 00:19:15.900
一切都会发生，所以如果你看

00:19:13.590 --> 00:19:18.360
从头开始，我们在做什么

00:19:15.900 --> 00:19:19.530
在这里，所以我们首先配置

00:19:18.360 --> 00:19:22.110
锁管理器没有花哨

00:19:19.530 --> 00:19:26.850
在那里，然后我们基本上在创建

00:19:22.110 --> 00:19:28.500
一个配置对象，所以再做一次

00:19:26.850 --> 00:19:30.240
约定优于配置

00:19:28.500 --> 00:19:33.300
鉴于这里我没有指定

00:19:30.240 --> 00:19:34.650
开箱即用的任何东西

00:19:33.300 --> 00:19:37.650
进入

00:19:34.650 --> 00:19:40.430
我班上通过的文件，以便

00:19:37.650 --> 00:19:43.050
就是说，如果我看我的课程准证

00:19:40.430 --> 00:19:44.700
资源我应该有一个应用程序

00:19:43.050 --> 00:19:48.330
 Java的基础，这基本上就是我要去的地方

00:19:44.700 --> 00:19:50.610
存储我的配置，所以这是一个机器学习

00:19:48.330 --> 00:19:53.010
文件，它可能是JSON文件，或者

00:19:50.610 --> 00:19:54.480
如果本来可以很好的Java 

00:19:53.010 --> 00:19:56.820
属性文件等等

00:19:54.480 --> 00:19:59.010
那是要处理的东西

00:19:56.820 --> 00:20:02.910
直接由框架为您服务，因此您

00:19:59.010 --> 00:20:09.570
不必处理，所以如果我们去

00:20:02.910 --> 00:20:10.860
回到源头，我的意思是这样配置

00:20:09.570 --> 00:20:13.320
创建我们可以访问我们的

00:20:10.860 --> 00:20:14.910
配置，接下来我们

00:20:13.320 --> 00:20:18.240
在做我们正在创建服务器

00:20:14.910 --> 00:20:20.100
再次配置对象

00:20:18.240 --> 00:20:24.900
我们只是在使用create方法

00:20:20.100 --> 00:20:28.680
这里我们使用对不起的服务器

00:20:24.900 --> 00:20:30.950
在这里配置我们只想

00:20:28.680 --> 00:20:33.660
访问我们的配置

00:20:30.950 --> 00:20:35.550
配置文件，以便我可以

00:20:33.660 --> 00:20:39.620
只需使用即可访问该配置

00:20:35.550 --> 00:20:41.970
只是一个标准的点缀符号所以

00:20:39.620 --> 00:20:43.440
我真正的唯一配置

00:20:41.970 --> 00:20:45.570
这里需要的是服务器配置

00:20:43.440 --> 00:20:48.180
基本上，如果我看这里

00:20:45.570 --> 00:20:51.150
我需要提供的最低限度让我们看看

00:20:48.180 --> 00:20:52.770
资源应用程序和服务器是

00:20:51.150 --> 00:20:59.610
基本上只是一个端口和绑定

00:20:52.770 --> 00:21:02.070
我需要提供的地址就可以了

00:20:59.610 --> 00:21:05.070
所以我们有这个Web服务器配置

00:21:02.070 --> 00:21:07.470
文件，因此服务器配置在这里，所以我们

00:21:05.070 --> 00:21:09.810
可以做的下一步，我们可以实际创建

00:21:07.470 --> 00:21:12.870
网络服务器，以便网络服务器创建我们通过

00:21:09.810 --> 00:21:15.390
这个配置文件不好意思

00:21:12.870 --> 00:21:18.870
我们也通过了这个创建路由

00:21:15.390 --> 00:21:20.100
的方法中获取配置

00:21:18.870 --> 00:21:23.910
参数，所以如果我们看一下

00:21:20.100 --> 00:21:26.940
如果得到创建，对不起

00:21:23.910 --> 00:21:31.320
基本上是我们的路由方法

00:21:26.940 --> 00:21:34.530
将为此创建所有例程

00:21:31.320 --> 00:21:37.530
给什么服务器，所以第一件事

00:21:34.530 --> 00:21:40.740
我们确实在创造一个

00:21:37.530 --> 00:21:42.560
矩阵我们有矩阵支持，所以我们

00:21:40.740 --> 00:21:45.210
希望在我们内部获得中间人支持

00:21:42.560 --> 00:21:48.029
微服务，那么我们正在创建这些

00:21:45.210 --> 00:21:51.899
一个很棒的服务对象

00:21:48.029 --> 00:21:54.149
真的很好，我们都会回到

00:21:51.899 --> 00:21:56.789
稍后再说，让我们继续

00:21:54.149 --> 00:21:59.719
这个C main，所以我们正在创建这个

00:21:56.789 --> 00:22:04.649
光栅对象问候服务对象

00:21:59.719 --> 00:22:08.070
所以我们在这里，然后我们

00:22:04.649 --> 00:22:10.619
随便什么，我们提供两个

00:22:08.070 --> 00:22:12.570
这种情况下，这是一个消费者，所以一旦

00:22:10.619 --> 00:22:14.039
开始我们有一个accept方法

00:22:12.570 --> 00:22:15.809
基本上，这是一个会

00:22:14.039 --> 00:22:17.580
只需在Web服务器处于

00:22:15.809 --> 00:22:18.479
实际上开始，所以在这种情况下

00:22:17.580 --> 00:22:21.719
我们正在做的唯一的事情

00:22:18.479 --> 00:22:23.460
我们只是显示

00:22:21.719 --> 00:22:26.369
我们的服务器就是这样

00:22:23.460 --> 00:22:27.929
而且我们也有这个特别的嗡嗡声

00:22:26.369 --> 00:22:31.229
因为基本上我们在这里是一个

00:22:27.929 --> 00:22:33.570
完成阶段，因此服务器

00:22:31.229 --> 00:22:35.460
可以开始，所以我们很好，否则失败了

00:22:33.570 --> 00:22:37.099
那样的话，我们有例外

00:22:35.460 --> 00:22:39.599
限制我们可以将其传递给函数

00:22:37.099 --> 00:22:41.039
做某事以防万一

00:22:39.599 --> 00:22:43.919
错误的，在那种情况下唯一的事情

00:22:41.039 --> 00:22:45.469
我们可以做的基本上只是显示

00:22:43.919 --> 00:22:49.649
堆栈跟踪

00:22:45.469 --> 00:22:51.450
所以我们的网络服务器启动了

00:22:49.649 --> 00:22:54.089
一切都真的发生了

00:22:51.450 --> 00:22:58.619
发生在这里，所以如果我们回到

00:22:54.089 --> 00:23:01.049
创建常规方法，以便我们

00:22:58.619 --> 00:23:05.609
指标，我们拥有网格服务

00:23:01.049 --> 00:23:07.649
也有来自头部的健康支持

00:23:05.609 --> 00:23:10.830
具有几乎完成功能的盒子

00:23:07.649 --> 00:23:12.869
我们正在提供一些健康检查

00:23:10.830 --> 00:23:15.330
您可以使用的还可以添加您的

00:23:12.869 --> 00:23:16.739
拥有，所以通常你会有特定的

00:23:15.330 --> 00:23:18.599
客户检查自己的应用程序

00:23:16.739 --> 00:23:20.609
但是我们提供了一些

00:23:18.599 --> 00:23:24.419
开箱即用的髋部尺寸

00:23:20.609 --> 00:23:26.099
磁盘大小，我不记得是哪一个

00:23:24.419 --> 00:23:27.690
无论如何，这就是我在这里要做的

00:23:26.099 --> 00:23:29.460
检查健康检查基本上我只是

00:23:27.690 --> 00:23:33.029
隐藏默认的健康检查

00:23:29.460 --> 00:23:35.999
海伦为我提供了我建立的

00:23:33.029 --> 00:23:37.919
对象，最后我在这里做什么

00:23:35.999 --> 00:23:40.049
我实际上正在构建所有

00:23:37.919 --> 00:23:42.659
为我的方法路由，所以我要去

00:23:40.049 --> 00:23:45.659
 JSON支持

00:23:42.659 --> 00:23:48.089
这种情况下我需要JSON支持

00:23:45.659 --> 00:23:50.789
我从来没有的其他或矩阵的标题

00:23:48.089 --> 00:23:53.729
记住哪一个正在输出JSON 

00:23:50.789 --> 00:23:56.750
无论如何，所以我们要添加JSON支持， 

00:23:53.729 --> 00:23:59.150
也很健康

00:23:56.750 --> 00:24:01.040
检查对象，以便我们可以观看

00:23:59.150 --> 00:24:02.840
基本上我们只是在注册所有

00:24:01.040 --> 00:24:05.480
我们的L堆栈已经在

00:24:02.840 --> 00:24:08.450
在这种情况下，这只是默认情况

00:24:05.480 --> 00:24:11.420
我们有了指标，最后

00:24:08.450 --> 00:24:16.880
我们还定义了我们的终点

00:24:11.420 --> 00:24:21.160
所以只要我们到达斜线网格路径

00:24:16.880 --> 00:24:28.460
我们将使用这些出色的服务

00:24:21.160 --> 00:24:30.410
端点在这里定义，所以如果我们

00:24:28.460 --> 00:24:34.640
看着那个家伙，真的没有

00:24:30.410 --> 00:24:36.530
喜欢在这里实现这项服务

00:24:34.640 --> 00:24:38.420
界面，基本上我们需要

00:24:36.530 --> 00:24:40.340
覆盖此更新方法，因此

00:24:38.420 --> 00:24:43.910
基本上我们在更新她

00:24:40.340 --> 00:24:47.240
路由规则，所以我们在做什么

00:24:43.910 --> 00:24:49.700
在这里，我们定义了一个新规则，因此

00:24:47.240 --> 00:24:54.320
每当有一个获取请求

00:24:49.700 --> 00:24:56.260
在路线上，这样的斜线基本上我们

00:24:54.320 --> 00:24:59.000
使用默认的消息钓鱼者

00:24:56.260 --> 00:25:01.040
每当有一个请求

00:24:59.000 --> 00:25:03.680
通过传递参数，我们正在使用这个

00:25:01.040 --> 00:25:06.560
消息钓鱼者，只要有

00:25:03.680 --> 00:25:09.560
请求我们使用的put方法

00:25:06.560 --> 00:25:11.330
这个更新问候处理程序，我们可以

00:25:09.560 --> 00:25:16.220
基本上看看这些

00:25:11.330 --> 00:25:18.440
一个人会很好地返回你好，所以它

00:25:16.220 --> 00:25:20.090
不会更改任何其他处理程序

00:25:18.440 --> 00:25:25.450
刚刚发送了响应源和响应

00:25:20.090 --> 00:25:28.130
它只是有一个世界，这个世界

00:25:25.450 --> 00:25:30.230
基本相同，但在这种情况下

00:25:28.130 --> 00:25:31.970
使用具有

00:25:30.230 --> 00:25:35.030
初始请求的一部分，所以您好

00:25:31.970 --> 00:25:36.830
以及给定的参数和您的

00:25:35.030 --> 00:25:41.710
只是用来更新光栅

00:25:36.830 --> 00:25:47.390
我们拥有的，让我们来看一下

00:25:41.710 --> 00:25:50.320
所以这基本上是一个简单的Halden MSC 

00:25:47.390 --> 00:25:50.320
这样申请

00:26:02.460 --> 00:26:12.880
所以那很正常所以也许你没有

00:26:10.000 --> 00:26:14.289
有时间，但是当我们建立

00:26:12.880 --> 00:26:18.070
你们的服务看到我们正在测试

00:26:14.289 --> 00:26:20.140
服务和测试通过网络下雪了我们

00:26:18.070 --> 00:26:22.120
网络服务器故障我认为

00:26:20.140 --> 00:26:25.179
因为我的防火墙，我将继续使用

00:26:22.120 --> 00:26:33.610
它直接，我们会看到的，如果我们

00:26:25.179 --> 00:26:40.210
去这里，我们有一个罐子快速入门，我看到了

00:26:33.610 --> 00:26:43.049
罐子，所以基本上这只是我们的

00:26:40.210 --> 00:26:43.049
我们拥有的应用程序

00:26:46.160 --> 00:26:52.700
所以我们不空间我们什么都不传递

00:26:48.650 --> 00:26:55.340
我们有一个你好世界，我们通过了

00:26:52.700 --> 00:27:03.680
向人们打招呼，等等等等

00:26:55.340 --> 00:27:07.640
您获得了ID，接下来我该怎么做

00:27:03.680 --> 00:27:10.910
我有我的我的应用程序，所以我的罐子

00:27:07.640 --> 00:27:22.790
我可以轻松地泊坞窗

00:27:10.910 --> 00:27:24.430
应用程序是否可以键入

00:27:22.790 --> 00:27:28.400
包装盒中提供了一个docker文件

00:27:24.430 --> 00:27:32.030
所以Haledon最近在AC方面领先了

00:27:28.400 --> 00:27:32.590
已经建立，所以现在我们可以泊坞窗运行

00:27:32.030 --> 00:27:37.940
一

00:27:32.590 --> 00:27:38.270
 -所以我的身上什么也没有

00:27:37.940 --> 00:27:52.040
道尔

00:27:38.270 --> 00:27:54.670
所以docker run然后是

00:27:52.040 --> 00:27:54.670
图像是

00:28:02.070 --> 00:28:15.219
它开始了，显然你看到了

00:28:10.269 --> 00:28:17.919
工作，现在，如果我去docker PS you 

00:28:15.219 --> 00:28:19.119
看到它在docker中很有趣，所以您看到了

00:28:17.919 --> 00:28:23.679
我们有应用程序在其中运行

00:28:19.119 --> 00:28:27.279
码头工人，现在，如果我将其杀死，显然

00:28:23.679 --> 00:28:31.479
将无法工作，所以那是你看到的是

00:28:27.279 --> 00:28:33.820
简单地从纯Helen转变为简单方法

00:28:31.479 --> 00:28:39.489
和C代码电影到docker我们也可以

00:28:33.820 --> 00:28:43.229
将其移至社区

00:28:39.489 --> 00:28:47.919
让我们看看并得到，所以我有一个

00:28:43.229 --> 00:28:55.259
我在这里运行的社区集群

00:28:47.919 --> 00:28:55.259
可以看到变得如此

00:29:04.780 --> 00:29:15.700
让我们感到抱歉，让你两身都这样

00:29:12.130 --> 00:29:20.430
那颗星星在运行，所以现在可以访问

00:29:15.700 --> 00:29:20.430
我需要得到

00:29:34.170 --> 00:29:39.970
这是IP，因此现在可以运行

00:29:37.620 --> 00:29:41.740
在我的社区集群中

00:29:39.970 --> 00:29:50.580
我的社区中正在运行相同的代码

00:29:41.740 --> 00:29:50.580
集群所以本地主机你好世界

00:29:50.880 --> 00:29:54.700
所以基本上你很快就看到了

00:29:53.260 --> 00:29:57.010
我们能够在表带上戴上皮带

00:29:54.700 --> 00:30:00.760
 AC应用程序将其移至docker 

00:29:57.010 --> 00:30:03.970
然后将其部署到社区，以便接吻

00:30:00.760 --> 00:30:13.210
现在我需要确定要删除

00:30:03.970 --> 00:30:14.920
剩下的我就好吧好吧好吧所以

00:30:13.210 --> 00:30:17.470
简而言之，我知道五分钟

00:30:14.920 --> 00:30:23.140
五分钟的Etsy潜在客户概述

00:30:17.470 --> 00:30:26.770
所以我们很快讨论了几个

00:30:23.140 --> 00:30:29.380
配置启动路由JSON I 

00:30:26.770 --> 00:30:31.360
将在此应用程序中讨论Jason 

00:30:29.380 --> 00:30:34.600
所以接下来我想

00:30:31.360 --> 00:30:37.870
告诉你基本上是我们如何整合

00:30:34.600 --> 00:30:39.910
与Haledon咆哮，非常确定

00:30:37.870 --> 00:30:42.160
你们大多数人都知道咆哮，所以咆哮是

00:30:39.910 --> 00:30:43.960
通用超字体Polly得到了另一个

00:30:42.160 --> 00:30:46.630
机器，它提供了很大的容量

00:30:43.960 --> 00:30:49.000
喜欢例如不做的能力

00:30:46.630 --> 00:30:51.220
两者之间的互操作性

00:30:49.000 --> 00:30:52.840
语言不同，但其中之一

00:30:51.220 --> 00:30:55.540
我们非常想在山上使用

00:30:52.840 --> 00:30:58.750
物联网的缺点是，未来的发展

00:30:55.540 --> 00:31:01.360
提前编译的时间

00:30:58.750 --> 00:31:03.900
由Crowell提供，所以这个想法是

00:31:01.360 --> 00:31:07.990
基本上，您将从

00:31:03.900 --> 00:31:09.520
一些Java代码咆哮我们将采用Java 

00:31:07.990 --> 00:31:11.050
代码，它将花很多时间

00:31:09.520 --> 00:31:13.000
该代码的编译，以便在

00:31:11.050 --> 00:31:16.600
一天结束时，我们得到的是本地人

00:31:13.000 --> 00:31:19.120
将嵌入的Linux外来可执行文件

00:31:16.600 --> 00:31:20.740
特定的虚拟机，因为

00:31:19.120 --> 00:31:22.179
记住我们是在用Java聊天

00:31:20.740 --> 00:31:23.770
代码，这意味着我们需要

00:31:22.179 --> 00:31:25.510
内存管理，我们需要一些

00:31:23.770 --> 00:31:26.920
线程管理等

00:31:25.510 --> 00:31:28.420
通常的能力是

00:31:26.920 --> 00:31:28.900
由Java Virtual提供

00:31:28.420 --> 00:31:31.170
机

00:31:28.900 --> 00:31:33.850
但显然，鉴于我们拥有

00:31:31.170 --> 00:31:35.710
在一天结束时甚至没有Linux 

00:31:33.850 --> 00:31:37.929
可执行文件不是我们要做的

00:31:35.710 --> 00:31:40.300
可以从外面使用

00:31:37.929 --> 00:31:42.059
所以基本上rel将嵌入

00:31:40.300 --> 00:31:46.919
直接在我们内部的基板VM 

00:31:42.059 --> 00:31:46.919
可执行文件，所以让我们看一下

00:31:49.030 --> 00:32:09.260
所以我这里是一个基础项目

00:31:53.900 --> 00:32:10.610
我先杀了那个家伙

00:32:09.260 --> 00:32:12.910
好吧，这是一个相对简单的

00:32:10.610 --> 00:32:15.430
应用程序，所以让我们尝试快速

00:32:12.910 --> 00:32:20.420
了解应用程序在做什么

00:32:15.430 --> 00:32:22.490
所以一切都从这里开始

00:32:20.420 --> 00:32:25.130
你可以放心地忽略那件事

00:32:22.490 --> 00:32:26.990
我们只是针对

00:32:25.130 --> 00:32:29.480
我们使用的yam el paso是因为

00:32:26.990 --> 00:32:32.240
有个防盗井，里面有个虫子

00:32:29.480 --> 00:32:33.560
那条路将是非常结果

00:32:32.240 --> 00:32:35.780
很快，那不是什么

00:32:33.560 --> 00:32:40.960
重要，因此我们正在创建一个配置

00:32:35.780 --> 00:32:43.970
对象，然后我们创建一个

00:32:40.960 --> 00:32:46.100
该服务器中的服务器配置

00:32:43.970 --> 00:32:48.380
我们定义的配置

00:32:46.100 --> 00:32:51.020
叛徒是示踪剂，所以我们想使用

00:32:48.380 --> 00:32:52.490
基本上我们想要的拉链罐打开跟踪

00:32:51.020 --> 00:32:56.750
在我们的内部直接添加跟踪

00:32:52.490 --> 00:33:05.420
应用程序，然后我们创建一个网站

00:32:56.750 --> 00:33:07.790
像我们之前看到的服务器，所以我们

00:33:05.420 --> 00:33:10.340
使用这些特定的工具来创建Web服务器

00:33:07.790 --> 00:33:12.110
路由，因此我们将对其进行检查，然后我们

00:33:10.340 --> 00:33:15.710
如果一切正常，请启动Web服务器

00:33:12.110 --> 00:33:17.720
好吧，如果一切都没有，我们很高兴

00:33:15.710 --> 00:33:22.070
进行得如此顺利，我们不是很高兴，所以让我们

00:33:17.720 --> 00:33:23.420
看一下这个路由方法

00:33:22.070 --> 00:33:27.710
基本上就是我们定义所有

00:33:23.420 --> 00:33:31.040
为我们的服务进行路由，因此第一个

00:33:27.710 --> 00:33:32.990
我们在这里说的东西在这里定义

00:33:31.040 --> 00:33:35.210
我们基本上只是从

00:33:32.990 --> 00:33:36.470
所以配置对象基本上在

00:33:35.210 --> 00:33:38.540
这种情况将来自UML 

00:33:36.470 --> 00:33:40.310
文件通过类传递，但它可能有

00:33:38.540 --> 00:33:43.100
是另一个数据源

00:33:40.310 --> 00:33:46.280
真的很重要，然后我们定义一个

00:33:43.100 --> 00:33:47.600
网络支持，所以我们想拥有

00:33:46.280 --> 00:33:51.560
在应用程序中进行跟踪，但是我们

00:33:47.600 --> 00:33:54.740
也想开箱即用

00:33:51.560 --> 00:33:57.080
由我们提供的应用程序提供

00:33:54.740 --> 00:33:58.360
指定特定的自定义神鹰

00:33:57.080 --> 00:34:00.460
对

00:33:58.360 --> 00:34:03.340
不仅如此， 

00:34:00.460 --> 00:34:09.940
性支持直接在我们体内

00:34:03.340 --> 00:34:12.099
应用程序，所以在这种情况下，让我们看看

00:34:09.940 --> 00:34:15.339
正在使用提供的气囊之一

00:34:12.099 --> 00:34:17.830
 OHIP内存检查，我们正朝着这个方向前进

00:34:15.339 --> 00:34:21.970
这是我要检查的习惯，所以这个

00:34:17.830 --> 00:34:23.679
基本上会提供一些时间

00:34:21.970 --> 00:34:26.109
信息基本上从什么时候开始

00:34:23.679 --> 00:34:28.690
不仅如此

00:34:26.109 --> 00:34:31.300
基本上是一些时机

00:34:28.690 --> 00:34:34.179
而不是那样，所以我们一直在追踪我们

00:34:31.300 --> 00:34:35.889
有矩阵，我们有健康检查

00:34:34.179 --> 00:34:38.290
还增加了安全性，所以我们不会

00:34:35.889 --> 00:34:40.210
我们其余的一些终点，所以我们

00:34:38.290 --> 00:34:47.169
基本上使用了三个核心部分

00:34:40.210 --> 00:34:49.570
的哈里丹AC，所以我们只需要

00:34:47.169 --> 00:34:51.429
基本上注册我们所有的路由规则

00:34:49.570 --> 00:34:53.320
因此，对于OG星，我们注册的矩阵

00:34:51.429 --> 00:34:56.560
网络安全性Weaver刚看到

00:34:53.320 --> 00:34:58.839
健康，然后我们不需要定义

00:34:56.560 --> 00:35:01.510
端点本身，所以第一个

00:34:58.839 --> 00:35:06.640
斜线基本上我们有一个标准

00:35:01.510 --> 00:35:10.750
处理程序斜线管理员将有点

00:35:06.640 --> 00:35:15.580
不同，所以这是安全的，我们可以

00:35:10.750 --> 00:35:17.500
如果我们去的话，检查它的安全性

00:35:15.580 --> 00:35:19.450
在配置文件中，所以我们看到

00:35:17.500 --> 00:35:21.339
我们在配置文件中也

00:35:19.450 --> 00:35:22.930
定义安全性我们可以定义

00:35:21.339 --> 00:35:25.030
以编程方式或

00:35:22.930 --> 00:35:27.880
通过配置，或者我们可以混合使用

00:35:25.030 --> 00:35:37.060
匹配，所以基本上我们在定义

00:35:27.880 --> 00:35:38.800
 HTTP基本认证

00:35:37.060 --> 00:35:41.260
配置文件，仅用于演示

00:35:38.800 --> 00:35:44.290
显然我们可以做区域并存储它们

00:35:41.260 --> 00:35:46.960
在一个安全的商店中，所以我们必须使用一个

00:35:44.290 --> 00:35:50.230
是作为角色管理员，另一个

00:35:46.960 --> 00:35:52.030
扮演用户角色，然后我们就

00:35:50.230 --> 00:35:56.550
需要指定我们想要的路径

00:35:52.030 --> 00:36:00.190
安全，因此管理员只能由

00:35:56.550 --> 00:36:03.520
管理员用户我的意思是对不起用户

00:36:00.190 --> 00:36:07.569
管理员角色和斜杠JSON也可以

00:36:03.520 --> 00:36:11.670
仅由具有以下任一功能的用户访问

00:36:07.569 --> 00:36:11.670
用户角色或首席门罗

00:36:17.359 --> 00:36:24.690
所以我们在哪里还好，所以我们在这里

00:36:22.529 --> 00:36:26.940
所以我们有这个管理员是安全的

00:36:24.690 --> 00:36:29.999
然后我们定义这个JSON端点

00:36:26.940 --> 00:36:32.809
这也是安全的，因此我们

00:36:29.999 --> 00:36:32.809
隐藏在JSON支持中

00:36:34.170 --> 00:36:43.739
詹森（J'son）在这里

00:36:37.880 --> 00:36:45.989
基本上不使用JSON P，而是使用Jason B 

00:36:43.739 --> 00:36:47.519
直接输出Java的能力

00:36:45.989 --> 00:36:53.670
将封送至JSON的对象

00:36:47.519 --> 00:36:55.700
通过端点记录，所以如果我们去

00:36:53.670 --> 00:36:55.700
背部

00:37:06.430 --> 00:37:09.430
您

00:37:19.120 --> 00:37:25.550
所以这是一个具有Jason的应用程序

00:37:23.150 --> 00:37:29.120
 B支持JSONP支持安全性跟踪

00:37:25.550 --> 00:37:35.110
矩阵L检查，让我们尝试运行

00:37:29.120 --> 00:37:35.110
在帽徽中的应用

00:37:44.589 --> 00:37:49.759
因此应用重量Hedeman 

00:37:47.420 --> 00:37:51.739
千字节，但这仅仅是

00:37:49.759 --> 00:37:53.089
我需要添加的所有应用程序

00:37:51.739 --> 00:37:55.130
使用的库和

00:37:53.089 --> 00:37:59.619
显然，运行时是Java Runtime 

00:37:55.130 --> 00:37:59.619
运行，我们可以运行应用程序

00:38:07.869 --> 00:38:18.170
我有可以使用的设计要点

00:38:11.029 --> 00:38:20.779
访问该应用程序，所以从

00:38:18.170 --> 00:38:22.339
塞缪尔配置，所以这是配置

00:38:20.779 --> 00:38:25.309
来自配置文件，如果

00:38:22.339 --> 00:38:28.430
我显然尝试访问管理员

00:38:25.309 --> 00:38:32.779
应该不起作用，因为该端点是

00:38:28.430 --> 00:38:38.150
安全的，如果我们看这里

00:38:32.779 --> 00:38:40.249
确实是未经授权的访问，因此

00:38:38.150 --> 00:38:43.099
基本上是故事的Java方面

00:38:40.249 --> 00:38:45.410
所以这里没有什么新鲜的东西

00:38:43.099 --> 00:38:48.199
现在要做，我要用烤架

00:38:45.410 --> 00:38:49.009
基本上将Java代码变成了

00:38:48.199 --> 00:38:51.439
本地执行者

00:38:49.009 --> 00:38:56.469
可执行文件，那是

00:38:51.439 --> 00:38:56.469
大概需要两两分钟，让我们来看看

00:39:05.960 --> 00:39:13.890
那就是原始图像，所以

00:39:11.820 --> 00:39:16.020
发生在这里，所以基本上首先

00:39:13.890 --> 00:39:18.630
应用程序是使用常规构建的

00:39:16.020 --> 00:39:23.970
 Java工具链，然后咆哮

00:39:18.630 --> 00:39:26.040
将会把它变成一个本地人

00:39:23.970 --> 00:39:27.510
可执行文件需要

00:39:26.040 --> 00:39:29.310
一点时间，所以如果您有任何问题

00:39:27.510 --> 00:39:31.680
那是问你的好时机

00:39:29.310 --> 00:39:36.330
问题我们有两分钟

00:39:31.680 --> 00:39:38.060
如果没有的话，我们面前没有问题

00:39:36.330 --> 00:39:48.090
有什么问题我有很好的笑话

00:39:38.060 --> 00:39:50.100
当我们引导时这并不有趣

00:39:48.090 --> 00:39:51.960
每当我在使用Maven 

00:39:50.100 --> 00:39:53.970
引导应用程序的原型

00:39:51.960 --> 00:39:56.460
正在提供docker文件和

00:39:53.970 --> 00:40:00.270
社区申请腺苷和

00:39:56.460 --> 00:40:02.070
有点空，这是一个相当

00:40:00.270 --> 00:40:05.220
昂贵的操作，但这就是事实

00:40:02.070 --> 00:40:07.290
你只在构建时做，而我

00:40:05.220 --> 00:40:11.430
不知道你能听见吗，但我的粉丝或

00:40:07.290 --> 00:40:13.860
一种疯狂的游戏，但这

00:40:11.430 --> 00:40:16.490
提供的好处，您将看到

00:40:13.860 --> 00:40:16.490
不到一分钟

00:40:19.670 --> 00:40:22.670
三

00:40:24.170 --> 00:40:32.269
哪个首先回答取决于

00:40:27.690 --> 00:40:32.269
但是等一下你会看到

00:40:33.349 --> 00:40:37.440
因为无论何时你都很清楚

00:40:35.940 --> 00:40:39.119
部署您不想使用咆哮

00:40:37.440 --> 00:40:40.500
那不是那只是一件事

00:40:39.119 --> 00:40:45.299
在您的应用程序中将使用的

00:40:40.500 --> 00:41:06.089
基本上可以部署了

00:40:45.299 --> 00:41:08.819
我们到那里是的，这很好

00:41:06.089 --> 00:41:10.619
点，因此有一些限制

00:41:08.819 --> 00:41:13.170
今天的例子咆哮仅限于Java 8 

00:41:10.619 --> 00:41:15.599
因此，但他们正在努力增加

00:41:13.170 --> 00:41:17.220
支持Java 11，还有其他功能

00:41:15.599 --> 00:41:19.859
限制，例如如果您使用

00:41:17.220 --> 00:41:21.180
反射你需要配置你做

00:41:19.859 --> 00:41:23.160
你需要做一些具体的

00:41:21.180 --> 00:41:25.140
配置，如果您正在做的每一件事

00:41:23.160 --> 00:41:27.390
字节操作，例如咆哮是

00:41:25.140 --> 00:41:31.349
可能不是一个很好的选择，所以有一个

00:41:27.390 --> 00:41:33.329
很少有例外，用例很少

00:41:31.349 --> 00:41:35.759
没有道理或只是咆哮不会

00:41:33.329 --> 00:41:39.509
工作，但对于那些类型的应用程序

00:41:35.759 --> 00:41:41.730
有效，所以您看到2分钟21 

00:41:39.509 --> 00:41:48.690
秒，让我们看一下

00:41:41.730 --> 00:41:51.329
已经生成，所以如果我们在这里看，那么你

00:41:48.690 --> 00:41:55.140
看到我们有这些绿色的头

00:41:51.329 --> 00:41:57.059
例如本机映像26 MB，因此

00:41:55.140 --> 00:41:59.009
基本上是我们的应用程序

00:41:57.059 --> 00:42:02.220
所有内置的，因为它在

00:41:59.009 --> 00:42:10.680
这是Mac原生可执行文件，因此

00:42:02.220 --> 00:42:13.440
我可以运行它，我的防火墙抱怨那是

00:42:10.680 --> 00:42:17.640
很好，所以您看到应用程序已启动

00:42:13.440 --> 00:42:19.619
在这种情况下，是11毫秒

00:42:17.640 --> 00:42:23.099
完全相同的应用程序

00:42:19.619 --> 00:42:25.799
它具有跟踪功能，具有健康状态

00:42:23.099 --> 00:42:30.869
检查等等等等，以便我可以显示

00:42:25.799 --> 00:42:33.359
你那我就杀了

00:42:30.869 --> 00:42:34.809
应用程序，我将开始举例

00:42:33.359 --> 00:42:39.130
别针

00:42:34.809 --> 00:42:42.039
所以1994 1-1现在让我们重新运行

00:42:39.130 --> 00:42:45.549
申请是

00:42:42.039 --> 00:42:51.130
我很想知道，所以现在我们要寻找

00:42:45.549 --> 00:42:57.039
例如在zip King，所以9 4 1是的

00:42:51.130 --> 00:42:59.380
没有痕迹好吧，所以现在如果我去这里，如果

00:42:57.039 --> 00:43:02.169
我从访问应用程序你好

00:42:59.380 --> 00:43:08.229
 samyama，如果我回去，回到邮编

00:43:02.169 --> 00:43:10.569
良好的轨迹，嗨，又一个短语，这是

00:43:08.229 --> 00:43:16.479
 Java代码基本上已经转向

00:43:10.569 --> 00:43:19.949
进入本机代码再见咆哮我可以尝试

00:43:16.479 --> 00:43:25.769
访问管理员将无法正常工作

00:43:19.949 --> 00:43:30.429
如果我找到痕迹又回到这里

00:43:25.769 --> 00:43:36.009
你看到我确实不是

00:43:30.429 --> 00:43:39.299
允许不访问该资源

00:43:36.009 --> 00:43:41.859
只是我也有健康

00:43:39.299 --> 00:43:47.949
检查，我认为这是房子，不是

00:43:41.859 --> 00:43:50.130
健康，你看到那是从

00:43:47.949 --> 00:43:53.349
我的键盘，因为这不是空格

00:43:50.130 --> 00:43:56.439
这是一个空间，所以这基本上是

00:43:53.349 --> 00:44:00.009
由

00:43:56.439 --> 00:44:02.409
应用程序，是的，我们有

00:44:00.009 --> 00:44:05.319
自定义健康检查提供者

00:44:02.409 --> 00:44:07.869
提供仅提供中心状态

00:44:05.319 --> 00:44:11.349
一些时间信息，这是

00:44:07.869 --> 00:44:12.699
髋关节记忆，我将堆栈提供者

00:44:11.349 --> 00:44:18.459
标准内置提供程序之一

00:44:12.699 --> 00:44:22.359
我们也在使用其他东西，所以我们

00:44:18.459 --> 00:44:34.259
有安全我们有健康检查

00:44:22.359 --> 00:44:36.000
我们有一点追踪矩阵

00:44:34.259 --> 00:44:38.130
矩阵

00:44:36.000 --> 00:44:41.910
所以这不是矩阵

00:44:38.130 --> 00:44:44.700
提供开箱即用，因此再次保留

00:44:41.910 --> 00:44:46.920
介意这是我们从Java开始

00:44:44.700 --> 00:44:50.880
 Haledon SC应用程序编写的代码

00:44:46.920 --> 00:44:53.580
带有JSON是JSON PC端口安全性

00:44:50.880 --> 00:44:55.560
检查矩阵，可能还有其他东西

00:44:53.580 --> 00:45:00.960
网络服务器，基本上，大部分

00:44:55.560 --> 00:45:04.220
我们拥有使用RAL的能力

00:45:00.960 --> 00:45:10.880
把它变成对不起，不是正确的地方

00:45:04.220 --> 00:45:13.830
我们将其变成26兆字节

00:45:10.880 --> 00:45:16.880
我们显然可以运行的可执行文件

00:45:13.830 --> 00:45:23.940
在泊坞窗内，如果我泊坞窗

00:45:16.880 --> 00:45:28.770
让我们看看我是否对码头工人的眼睛好吗

00:45:23.940 --> 00:45:39.600
需要基本上是因为我有

00:45:28.770 --> 00:45:41.880
基本上，这就是我们

00:45:39.600 --> 00:45:46.320
基本上也提供了能力

00:45:41.880 --> 00:45:47.880
去博士我给博士。看你的代码，但

00:45:46.320 --> 00:45:49.680
为此，我们使用docker是因为

00:45:47.880 --> 00:45:51.120
显然，我们需要生产一个Linux 

00:45:49.680 --> 00:45:52.620
将在docker中运行的可执行文件

00:45:51.120 --> 00:45:54.540
所以我们在docker里面做

00:45:52.620 --> 00:45:57.960
容器有点棘手，因为我们

00:45:54.540 --> 00:45:59.970
正在使用docker to，我们正在使用

00:45:57.960 --> 00:46:03.270
在docker中，本机映像

00:45:59.970 --> 00:46:06.570
格拉夫生产本地人的能力

00:46:03.270 --> 00:46:09.390
该图像将在其他地方运行

00:46:06.570 --> 00:46:12.030
这是咆哮的，所以你看到

00:46:09.390 --> 00:46:13.980
基本上是通过结合Haledon和咆哮

00:46:12.030 --> 00:46:15.420
您可以快速启动

00:46:13.980 --> 00:46:16.890
是时候回答你的问题了

00:46:15.420 --> 00:46:21.750
因为如果我们在

00:46:16.890 --> 00:46:24.360
这个家伙18毫秒

00:46:21.750 --> 00:46:26.220
快速，因为我们正在追踪支持

00:46:24.360 --> 00:46:32.600
我们有健康检查等等

00:46:26.220 --> 00:46:32.600
在26兆字节的可执行文件中

00:46:35.930 --> 00:46:39.900
当它已经开始，那是一个很好的

00:46:38.040 --> 00:46:41.910
指出我们必须要做的事情

00:46:39.900 --> 00:46:43.230
比较何时使用Java 

00:46:41.910 --> 00:46:46.710
例如

00:46:43.230 --> 00:46:48.720
奇怪的地方与咆哮的东西

00:46:46.710 --> 00:46:52.050
在Java方面的时间我会喜欢他吗

00:46:48.720 --> 00:46:54.060
较慢但我们拥有的东西

00:46:52.050 --> 00:46:56.700
例如，带有JIT的Java端是

00:46:54.060 --> 00:46:59.430
之后将进行的优化

00:46:56.700 --> 00:47:02.310
有时候我们在做一些

00:46:59.430 --> 00:47:04.080
基准，所以我今天可以添加

00:47:02.310 --> 00:47:07.320
我真的不能给你任何数字

00:47:04.080 --> 00:47:10.020
但就足迹启动时间而言

00:47:07.320 --> 00:47:11.130
内存消耗反弹现在非常好

00:47:10.020 --> 00:47:14.369
随着时间的推移，如果您有一个应用程序

00:47:11.130 --> 00:47:17.490
运行数天至数月的服务

00:47:14.369 --> 00:47:20.790
专注于

00:47:17.490 --> 00:47:22.200
通过使用纯性能方面

00:47:20.790 --> 00:47:24.680
举例说明我们拥有的所有能力

00:47:22.200 --> 00:47:26.580
在标准的Java虚拟机中

00:47:24.680 --> 00:47:30.410
因为归根结底，如果你是

00:47:26.580 --> 00:47:30.410
只需启动一次应用程序

00:47:35.900 --> 00:47:39.290
让我们来看看

00:47:48.880 --> 00:47:52.370
这也是启动时间

00:47:51.080 --> 00:47:53.870
等等，我会足迹

00:47:52.370 --> 00:47:55.490
明天在我的服务会议上讨论

00:47:53.870 --> 00:47:58.400
我将讨论一个

00:47:55.490 --> 00:48:01.730
不同的角度，所以我给了你一个非常

00:47:58.400 --> 00:48:04.460
 Haledon SC腺嘌呤MP的快速概述

00:48:01.730 --> 00:48:06.590
基本上是纯标准微

00:48:04.460 --> 00:48:07.910
拉斐尔·PI的好处之一

00:48:06.590 --> 00:48:10.400
 Al-anon您可以选择是

00:48:07.910 --> 00:48:12.920
使用AC，他使我们能够

00:48:10.400 --> 00:48:14.540
创新，因为我们正在定义API 

00:48:12.920 --> 00:48:17.750
和我们自己的能力

00:48:14.540 --> 00:48:19.400
 Allanon MP在

00:48:17.750 --> 00:48:21.350
感觉到您只是在使用标准

00:48:19.400 --> 00:48:23.270
因此您可以从其他位置切换

00:48:21.350 --> 00:48:26.000
麦克风实现可以追溯到

00:48:23.270 --> 00:48:28.010
等等，您大部分

00:48:26.000 --> 00:48:30.560
开发人员知道大多数微

00:48:28.010 --> 00:48:33.500
个人资料API，因此更容易开始

00:48:30.560 --> 00:48:36.860
那些，所以我们今天在哪里，所以我们

00:48:33.500 --> 00:48:40.220
在十月份我们推出了十点四

00:48:36.860 --> 00:48:43.040
做了一堆事情，今天我们是

00:48:40.220 --> 00:48:48.170
基本上在1.0.1发布

00:48:43.040 --> 00:48:50.000
上周，所以在过去的几个月中

00:48:48.170 --> 00:48:52.340
人们非常注重确保

00:48:50.000 --> 00:48:54.560
我们是1.0的一件事

00:48:52.340 --> 00:48:58.970
我们在1.0中所做的尝试试图稳定

00:48:54.560 --> 00:49:02.300
大部分的API都是如此，除了少数

00:48:58.970 --> 00:49:05.120
一种案例API我们拥有的API 

00:49:02.300 --> 00:49:06.500
今天你很好，你可以放心

00:49:05.120 --> 00:49:09.550
他们会在那里很长一段时间

00:49:06.500 --> 00:49:12.530
他们不会，我们不会破坏他们

00:49:09.550 --> 00:49:14.840
因此在1.0中，我们增加了对

00:49:12.530 --> 00:49:16.730
杰森B是的所以没有

00:49:14.840 --> 00:49:19.270
参考实现

00:49:16.730 --> 00:49:22.970
杰克逊，所以你可以再次选择

00:49:19.270 --> 00:49:27.380
持续使用的JSON实现

00:49:22.970 --> 00:49:32.360
一周我们已经发布了1.0.1的一些修复程序

00:49:27.380 --> 00:49:34.790
还有一些特定的东西

00:49:32.360 --> 00:49:37.190
确保浏览器可以在

00:49:34.790 --> 00:49:39.560
唐恩，我看到一些我应该

00:49:37.190 --> 00:49:41.600
值得一提的是，咆哮几乎只能完成

00:49:39.560 --> 00:49:43.280
在LaDonna上工作，我们不确定

00:49:41.600 --> 00:49:47.090
罗斯支持

00:49:43.280 --> 00:49:51.350
在此阶段，MP方面的领先优势

00:49:47.090 --> 00:49:53.540
路线图，所以当零完成时

00:49:51.350 --> 00:49:56.120
支持micro profile 1.2，因此下一个

00:49:53.540 --> 00:49:58.700
重要的是要努力确保

00:49:56.120 --> 00:49:59.630
我们是否支持所有微型

00:49:58.700 --> 00:50:02.800
个人资料

00:49:59.630 --> 00:50:05.510
到API，我们也在努力

00:50:02.800 --> 00:50:09.440
坚持不懈，因此对GP和

00:50:05.510 --> 00:50:12.950
 GTA不仅在宏配置文件方面，而且在

00:50:09.440 --> 00:50:14.990
在SE方面也许考试意义和

00:50:12.950 --> 00:50:17.020
后来我们有很多事情

00:50:14.990 --> 00:50:20.960
我们想像HTTP一样支持

00:50:17.020 --> 00:50:22.520
 WebSockets支持我们在哪里

00:50:20.960 --> 00:50:24.170
也想有一个可以

00:50:22.520 --> 00:50:26.840
您可以轻松使用的是

00:50:24.170 --> 00:50:28.610
引导应用程序而不是使用

00:50:26.840 --> 00:50:31.730
 Maven原型更重要

00:50:28.610 --> 00:50:35.770
用户友好等等等等，所以我们

00:50:31.730 --> 00:50:40.580
有很多我们想做的事情

00:50:35.770 --> 00:50:42.800
所以就支撑着一个场景而言

00:50:40.580 --> 00:50:44.720
用于开发微型程序的Java库

00:50:42.800 --> 00:50:47.420
服务一切都是开源的，所以

00:50:44.720 --> 00:50:51.080
您可以尝试一下，真的没有

00:50:47.420 --> 00:50:52.910
与之相关的成本是

00:50:51.080 --> 00:50:56.810
资源，如果您只需要记住

00:50:52.910 --> 00:50:59.210
一个链接harridan dot io您可以访问

00:50:56.810 --> 00:51:01.550
所有资源，包括

00:50:59.210 --> 00:51:03.440
 github repo等，我们有一个非常

00:51:01.550 --> 00:51:05.630
好的和精心设计的文档，因此

00:51:03.440 --> 00:51:08.330
我们有一张CD入门指南， 

00:51:05.630 --> 00:51:11.750
基本上会指导您逐步进行

00:51:08.330 --> 00:51:13.700
如何写出引导伊利丹

00:51:11.750 --> 00:51:16.190
 LC或MP应用程序如何执行karai的

00:51:13.700 --> 00:51:19.400
它如何部署到docker，现在去

00:51:16.190 --> 00:51:23.000
进一步尝试一下，不花钱

00:51:19.400 --> 00:51:29.240
任何真的是我们所需要的东西

00:51:23.000 --> 00:51:31.670
想要你做，如果你喜欢

00:51:29.240 --> 00:51:32.990
给我们一颗星星，它不需要任何费用

00:51:31.670 --> 00:51:38.360
但这是我们真正的事情

00:51:32.990 --> 00:51:40.040
欣赏，几乎及时

00:51:38.360 --> 00:51:41.540
我要感谢你的时间

00:51:40.040 --> 00:51:47.210
我不确定我们是否有时间

00:51:41.540 --> 00:51:49.250
问题，我们也不知道吗

00:51:47.210 --> 00:51:50.690
无论如何，我会在这里，所以我仍然有一个

00:51:49.250 --> 00:51:52.610
明天的会议上，我认为这是一个主题演讲

00:51:50.690 --> 00:51:56.630
关于Cerberus的会议

00:51:52.610 --> 00:51:59.660
所以就抓住我或问问题吧

00:51:56.630 --> 00:52:02.710
意思是如果没人把我们踢出房间

00:51:59.660 --> 00:52:02.710
我可以提问

00:52:05.940 --> 00:52:12.940
不，不，现在我们正在努力

00:52:09.910 --> 00:52:15.370
每天的性能数字

00:52:12.940 --> 00:52:16.810
不利的一面让哈利登·塞勒完成了MP Aaron 

00:52:15.370 --> 00:52:19.480
我看到咆哮等等

00:52:16.810 --> 00:52:22.210
我的意思是我们还有很长的路要走

00:52:19.480 --> 00:52:24.340
清单，所以我们只专注于

00:52:22.210 --> 00:52:34.830
我们自己在这个阶段已经是

00:52:24.340 --> 00:52:44.350
有很多事情要做，我可以

00:52:34.830 --> 00:52:46.480
是的，简而言之，是的，但是我们

00:52:44.350 --> 00:52:47.980
不一定需要所有

00:52:46.480 --> 00:52:49.990
我们具有退火能力

00:52:47.980 --> 00:52:51.310
哈利登SE，你明天会看到

00:52:49.990 --> 00:52:52.900
完成是一个快速的平台服务

00:52:51.310 --> 00:52:54.460
平台，您明天将看到

00:52:52.900 --> 00:52:56.110
功能以及功能是

00:52:54.460 --> 00:52:58.030
很基本的东西

00:52:56.110 --> 00:53:00.790
得到一些输入并产生的方法

00:52:58.030 --> 00:53:02.620
在这种情况下，我们没有其他输出

00:53:00.790 --> 00:53:06.670
有很多功能

00:53:02.620 --> 00:53:09.940
我们不需要像安全一样

00:53:06.670 --> 00:53:12.480
所有通过映射的方式等等

00:53:09.940 --> 00:53:14.590
我们不使用它，而且功能

00:53:12.480 --> 00:53:17.110
大多数时候您在调用

00:53:14.590 --> 00:53:19.450
使用HTTP功能，但功能可以

00:53:17.110 --> 00:53:21.540
也可以使用不同的方式来调用

00:53:19.450 --> 00:53:26.050
像我们有一个调度程序或

00:53:21.540 --> 00:53:29.110
也许队列，例如一个功能

00:53:26.050 --> 00:53:36.070
一个功能本身并不绑定到http 

00:53:29.110 --> 00:53:39.820
这实际上是HTTP的要点，但是

00:53:36.070 --> 00:53:44.590
例如，我们还在

00:53:39.820 --> 00:53:46.970
房子的功能面了

00:53:44.590 --> 00:53:50.850
问题

00:53:46.970 --> 00:53:52.520
好吧，然后感谢您的寻找

00:53:50.850 --> 00:53:58.849
时间

00:53:52.520 --> 00:53:58.849
 [掌声] 

