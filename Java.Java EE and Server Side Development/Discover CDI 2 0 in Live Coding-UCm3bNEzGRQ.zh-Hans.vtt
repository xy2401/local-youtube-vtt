WEBVTT
Kind: captions
Language: zh-Hans

00:00:03.410 --> 00:00:09.299
大家好，很高兴在这里见到你

00:00:06.840 --> 00:00:13.019
很高兴有你在这里而不是

00:00:09.299 --> 00:00:16.040
发生冰块堵塞事件

00:00:13.019 --> 00:00:20.669
迪安大学

00:00:16.040 --> 00:00:24.149
所以今天我们要谈谈CGI 

00:00:20.669 --> 00:00:27.960
 -我们将尝试使一些生活

00:00:24.149 --> 00:00:29.849
编码和CGI-让我们开始吧

00:00:27.960 --> 00:00:32.070
介绍自己，所以我不在

00:00:29.849 --> 00:00:35.370
假设您正在为reddit工作， 

00:00:32.070 --> 00:00:38.429
要推测的CGI，您可以按照

00:00:35.370 --> 00:00:42.289
我在Twitter上起床等等

00:00:38.429 --> 00:00:45.749
也从事微型档案项目

00:00:42.289 --> 00:00:48.089
将大量使用CGI， 

00:00:45.749 --> 00:00:50.339
宏宏配置文件，所以会有

00:00:48.089 --> 00:00:52.769
来自宏配置文件的一些反馈

00:00:50.339 --> 00:00:55.760
下一个版本的CGI中的项目

00:00:52.769 --> 00:00:59.640
我对此感到非常兴奋

00:00:55.760 --> 00:01:03.030
那我们要谈什么

00:00:59.640 --> 00:01:06.659
将在两张幻灯片中向您介绍CGI 

00:01:03.030 --> 00:01:10.350
如果您不完全了解所有

00:01:06.659 --> 00:01:13.440
 CGI中的新内容-我还链接了

00:01:10.350 --> 00:01:16.290
关于所有

00:01:13.440 --> 00:01:20.070
 CDI的新功能-我没有

00:01:16.290 --> 00:01:23.400
 45分钟内列出所有这些时间

00:01:20.070 --> 00:01:24.750
并在此期间减少生活

00:01:23.400 --> 00:01:27.210
这个演讲

00:01:24.750 --> 00:01:30.420
我将检查现有的代码

00:01:27.210 --> 00:01:33.210
我认为一年以前

00:01:30.420 --> 00:01:35.520
与CDI的矩阵集成

00:01:33.210 --> 00:01:39.180
整合是在生活编码中完成的，但

00:01:35.520 --> 00:01:41.880
 CDI一个-现在我要讲的是

00:01:39.180 --> 00:01:45.810
并向您展示我们如何

00:01:41.880 --> 00:01:49.100
将其迁移到CDI-大部分内容

00:01:45.810 --> 00:01:52.140
我们将在本次演讲中看到

00:01:49.100 --> 00:01:56.490
 CDI和扩展的高级功能

00:01:52.140 --> 00:01:58.920
但每天都会有一些设置方法

00:01:56.490 --> 00:02:03.300
用户的东西，但如果你不是

00:01:58.920 --> 00:02:10.050
非常了解您拥有的CDI扩展

00:02:03.300 --> 00:02:11.760
为了-保持专注-得到它

00:02:10.050 --> 00:02:14.520
我们要去做吗？ 

00:02:11.760 --> 00:02:18.060
切换现有测试

00:02:14.520 --> 00:02:24.450
在这个项目中，并使用新的中央情报局

00:02:18.060 --> 00:02:26.910
 C功能启动我们的测试

00:02:24.450 --> 00:02:30.390
目前正在使用我们的kuleana 

00:02:26.910 --> 00:02:32.580
使用CGI SC启动它们，然后

00:02:30.390 --> 00:02:36.330
我们将迁移现有矩阵

00:02:32.580 --> 00:02:37.410
如果有时间我可以扩展到CDI 2 

00:02:36.330 --> 00:02:41.180
希望如此

00:02:37.410 --> 00:02:45.330
如果现场演示的神将与我们同在，我

00:02:41.180 --> 00:02:48.600
将NASA卡努事件添加到

00:02:45.330 --> 00:02:51.360
项目也一样，我们会完成的

00:02:48.600 --> 00:02:55.860
让我们开始吧，CG的新功能

00:02:51.360 --> 00:02:59.610
我拍了两张幻灯片，所以我们添加了

00:02:55.860 --> 00:03:04.890
在运行时支持遍历

00:02:59.610 --> 00:03:07.530
在Java C中，我们必须将功能添加到

00:03:04.890 --> 00:03:10.890
请求上下文激活率低

00:03:07.530 --> 00:03:12.780
因为请求上下文没有

00:03:10.890 --> 00:03:16.680
说在Java C中相同的含义是

00:03:12.780 --> 00:03:19.620
它可能在Java EE中有，所以我们添加了一个

00:03:16.680 --> 00:03:22.350
功能来激活该上下文

00:03:19.620 --> 00:03:24.840
 Java C的上下文艺术，但也可以是

00:03:22.350 --> 00:03:28.470
用在Java上，我们有很多

00:03:24.840 --> 00:03:31.350
事件公告，所以最

00:03:28.470 --> 00:03:34.350
重要的公告是

00:03:31.350 --> 00:03:38.550
同步事件支持和事件

00:03:34.350 --> 00:03:41.490
订购支持，以便您可以随时检查

00:03:38.550 --> 00:03:43.190
看到你可以查看谈话内容

00:03:41.490 --> 00:03:47.700
以下链接包含所有详细信息

00:03:43.190 --> 00:03:50.900
我们还为拦截器添加了一个生成的

00:03:47.700 --> 00:03:54.750
所以现在您可以在

00:03:50.900 --> 00:03:57.110
在不可能之前生产垃圾箱

00:03:54.750 --> 00:04:00.450
现在您可以添加int渐近蛋白

00:03:57.110 --> 00:04:02.730
我们还添加了一些帮助程序，例如

00:04:00.450 --> 00:04:05.010
内置注释文字，因此不是

00:04:02.730 --> 00:04:08.760
很大，但是现在您不必

00:04:05.010 --> 00:04:11.340
自己创建自己的注释

00:04:08.760 --> 00:04:14.580
用于创建注释的文字

00:04:11.340 --> 00:04:17.010
实例，我们介绍了

00:04:14.580 --> 00:04:21.600
配置器API，我们将去看看

00:04:17.010 --> 00:04:23.700
在这次谈话中很多，所以功能

00:04:21.600 --> 00:04:27.080
我们将在本次演讲中使用的是支持

00:04:23.700 --> 00:04:29.509
 Java C事件公告

00:04:27.080 --> 00:04:32.240
也许最终与同步

00:04:29.509 --> 00:04:35.599
观察者内置注释文字

00:04:32.240 --> 00:04:37.880
在config configurator API中，这样

00:04:35.599 --> 00:04:39.919
这是CDI的两张幻灯片-如果您

00:04:37.880 --> 00:04:43.610
想要了解更多有关CDI的知识

00:04:39.919 --> 00:04:46.940
接吻是可以的，所以让我们开始吧

00:04:43.610 --> 00:04:52.490
现有的项目矩阵CDI很大

00:04:46.940 --> 00:04:55.610
快速了解矩阵

00:04:52.490 --> 00:04:57.620
项目，所以矩阵非常简单

00:04:55.610 --> 00:05:00.470
来自Drop Rosati的项目

00:04:57.620 --> 00:05:02.630
它为您提供了不同的矩阵类型

00:05:00.470 --> 00:05:05.659
所以我们可以控制时间

00:05:02.630 --> 00:05:08.449
书面使用它到你手上的矩阵

00:05:05.659 --> 00:05:10.940
一个项目，以便您可以使用不同的项目

00:05:08.449 --> 00:05:11.479
记者方法来获得

00:05:10.940 --> 00:05:15.560
信息

00:05:11.479 --> 00:05:18.289
 J混合控制台日志等

00:05:15.560 --> 00:05:21.110
项目的中心a 

00:05:18.289 --> 00:05:25.580
指标注册表以及所有

00:05:21.110 --> 00:05:29.300
指标存储和删除向导

00:05:25.580 --> 00:05:34.180
为您提供注释，您可以

00:05:29.300 --> 00:05:38.960
使用您自己的框架来实施

00:05:34.180 --> 00:05:43.099
 AOP这样就能注释方法

00:05:38.960 --> 00:05:45.080
或课时我们有时间算，等等，但是

00:05:43.099 --> 00:05:49.789
背后没有代码，您必须

00:05:45.080 --> 00:05:53.479
开发它，就是这样，这是为了

00:05:49.789 --> 00:05:58.009
快速回顾的prasada，现在最后

00:05:53.479 --> 00:06:01.490
年，我们创建了

00:05:58.009 --> 00:06:08.150
采用CDI的指标，那么做了什么

00:06:01.490 --> 00:06:11.300
我们做到了以下目标

00:06:08.150 --> 00:06:13.310
增加了生产注射剂的能力

00:06:11.300 --> 00:06:17.360
多个指标，因此指标是

00:06:13.310 --> 00:06:23.349
定时锥金属等

00:06:17.360 --> 00:06:26.840
所以我们可以生产它们，我们有Cydia我们

00:06:23.349 --> 00:06:30.349
添加了拥有

00:06:26.840 --> 00:06:34.969
矩阵注解可用作拦截器

00:06:30.349 --> 00:06:36.910
我们还添加了一个事实，如果您

00:06:34.969 --> 00:06:39.120
访问矩阵

00:06:36.910 --> 00:06:42.690
通过cd-i和@inject批注

00:06:39.120 --> 00:06:46.420
或通过度量标准注册表a 

00:06:42.690 --> 00:06:48.100
访问的经典方式

00:06:46.420 --> 00:06:50.620
这些指标可以得到相同的矩阵，如果

00:06:48.100 --> 00:06:52.930
您使用的名称不是

00:06:50.620 --> 00:06:56.350
由于监视我们

00:06:52.930 --> 00:06:58.630
客人，因为当您要求

00:06:56.350 --> 00:07:01.330
度量标准注册表注册表的度量标准

00:06:58.630 --> 00:07:06.070
而这个指标对不起不存在

00:07:01.330 --> 00:07:10.210
是自动创建的，所以我们开始了

00:07:06.070 --> 00:07:13.510
从这里开始，这是非常基本的代码

00:07:10.210 --> 00:07:17.890
使用指标，所以这里没有CDI，所以在这里您

00:07:13.510 --> 00:07:20.680
看到我有一个班主任

00:07:17.890 --> 00:07:23.980
注册表是一个静态字段， 

00:07:20.680 --> 00:07:28.150
我有一种想要的方法

00:07:23.980 --> 00:07:31.180
一个计时器，所以我要问的是

00:07:28.150 --> 00:07:33.640
注册表和计时器调用我的计时器，如果

00:07:31.180 --> 00:07:37.230
这个吃这个计时器存在

00:07:33.640 --> 00:07:41.200
如果没有，我会得到现有的计时器

00:07:37.230 --> 00:07:44.350
矩阵板条箱对我来说我用这个超时

00:07:41.200 --> 00:07:47.620
开始用时间来衡量时间

00:07:44.350 --> 00:07:53.110
就上下文而言，我要做的所有事情

00:07:47.620 --> 00:07:56.380
在try-catch程序段和最终程序中执行

00:07:53.110 --> 00:07:59.530
阻止我停止计时器，这非常

00:07:56.380 --> 00:08:03.760
最后没有CDI的基本代码

00:07:59.530 --> 00:08:06.360
整合之后，我们就这样结束了

00:08:03.760 --> 00:08:08.620
我们增加了生产能力

00:08:06.360 --> 00:08:12.640
不同的指标，所以我们在这里

00:08:08.620 --> 00:08:14.530
产生两个计时器，一个叫做我的计时器

00:08:12.640 --> 00:08:18.760
第二个叫我的第二个计时器

00:08:14.530 --> 00:08:24.040
以及真正的原件和容量

00:08:18.760 --> 00:08:26.800
使用随附的注释

00:08:24.040 --> 00:08:29.200
指标，因此在这里我们使用出席

00:08:26.800 --> 00:08:31.890
注解，我们说好的方法

00:08:29.200 --> 00:08:31.890
应该

00:08:31.979 --> 00:08:37.690
是时候与

00:08:35.829 --> 00:08:41.050
我的时间，我们所有人都会

00:08:37.690 --> 00:08:43.479
我的计时器计时器抱歉

00:08:41.050 --> 00:08:45.430
从矩阵注册表中检索

00:08:43.479 --> 00:08:50.350
该方法的执行时间将

00:08:45.430 --> 00:08:52.139
被记录下来，这就是当前

00:08:50.350 --> 00:08:55.329
代码正在做

00:08:52.139 --> 00:08:58.060
现在让我们来看一下这段代码

00:08:55.329 --> 00:09:01.870
因为如果我们想迁移它来做

00:08:58.060 --> 00:09:07.120
 CDI可能更好

00:09:01.870 --> 00:09:11.680
是的，在那里，所以让我们开始吧

00:09:07.120 --> 00:09:14.199
确定项目的测试

00:09:11.680 --> 00:09:16.690
我们正在测试的东西

00:09:14.199 --> 00:09:20.410
有趣的事情，所以这个测试正确

00:09:16.690 --> 00:09:25.589
现在正在使用Arquillian每个人都知道

00:09:20.410 --> 00:09:30.040
基利安好吧，对于那些不这样做的人

00:09:25.589 --> 00:09:32.589
 artyom是构建微型计算机的方式

00:09:30.040 --> 00:09:36.970
所有的应用程序包

00:09:32.589 --> 00:09:38.980
您需要的组件，我有几个

00:09:36.970 --> 00:09:41.439
像环境，但是你有很多

00:09:38.980 --> 00:09:43.389
不同的插件程序，所以你

00:09:41.439 --> 00:09:47.730
可以决定你想要什么，但是IRRI 

00:09:43.389 --> 00:09:52.449
需要与其他java ee灯配合使用

00:09:47.730 --> 00:09:55.449
 CDI部署和使用功能

00:09:52.449 --> 00:09:58.319
 CDI，因此您可以使用意大利语使用

00:09:55.449 --> 00:10:03.310
您要测试的艺术注入

00:09:58.319 --> 00:10:06.550
所以在Anarkali和测试中使用不同的光束

00:10:03.310 --> 00:10:09.130
你有一个方法在

00:10:06.550 --> 00:10:11.199
在此部署静态方法

00:10:09.130 --> 00:10:13.360
您描述自己的方法

00:10:11.199 --> 00:10:19.089
创造你所投入的东西

00:10:13.360 --> 00:10:22.029
存档，所以我在这里对不起

00:10:19.089 --> 00:10:25.269
创建一个称为“工作中测试”的档案

00:10:22.029 --> 00:10:29.860
我将所有元素都放在

00:10:25.269 --> 00:10:32.769
包装或氧化剂基质我也是你

00:10:29.860 --> 00:10:38.110
并从外面添加信息

00:10:32.769 --> 00:10:40.779
我都把战争放在罐子里

00:10:38.110 --> 00:10:43.170
指标核心和指标注释

00:10:40.779 --> 00:10:45.149
所以我可以打包

00:10:43.170 --> 00:10:47.490
在世界上与所有这些对手

00:10:45.149 --> 00:10:50.940
信息，当然我添加了

00:10:47.490 --> 00:10:54.029
 bean xml2激活白痴，是的

00:10:50.940 --> 00:10:56.130
每天晚上，我激活

00:10:54.029 --> 00:10:59.760
扩展名，所以我有一个扩展名，我们将

00:10:56.130 --> 00:11:02.339
看到之后，我要添加它

00:10:59.760 --> 00:11:02.910
扩展在这里包和我

00:11:02.339 --> 00:11:06.449
返回

00:11:02.910 --> 00:11:11.670
牛我所以我可以拿这个做

00:11:06.449 --> 00:11:16.339
部署我的测试很简单，所以

00:11:11.670 --> 00:11:19.649
第一个测试是我们正在测试应该

00:11:16.339 --> 00:11:26.040
拦截器是代码，所以我打电话给

00:11:19.649 --> 00:11:28.769
 MGB仓上注入的方法

00:11:26.040 --> 00:11:30.420
在这里，如果我们看看这种方法，你可以

00:11:28.769 --> 00:11:33.990
看到抱歉

00:11:30.420 --> 00:11:38.070
您可以看到此方法是

00:11:33.990 --> 00:11:40.560
在与我的时间注释

00:11:38.070 --> 00:11:44.449
计时器计时器计时器，我们要检查

00:11:40.560 --> 00:11:48.600
那位计时器在学校期间

00:11:44.449 --> 00:11:50.970
通话之间，所以我们在这里测试

00:11:48.600 --> 00:11:53.459
所以我们得到了一个叫做我的计时器

00:11:50.970 --> 00:11:56.130
计时器，我们正在获取信息

00:11:53.459 --> 00:11:59.490
多少次被称为

00:11:56.130 --> 00:12:04.800
在第二次测试中进行断言

00:11:59.490 --> 00:12:08.190
是关于注射的测试

00:12:04.800 --> 00:12:10.470
通过CGI度量并检索

00:12:08.190 --> 00:12:13.649
通过度量抵制来度量

00:12:10.470 --> 00:12:17.699
我重复的街道是一样的吗

00:12:13.649 --> 00:12:19.829
再次当你用

00:12:17.699 --> 00:12:23.279
街头定时器，如果您在此处输入名字， 

00:12:19.829 --> 00:12:28.980
如果您尚未使用此名称， 

00:12:23.279 --> 00:12:30.720
尚未尝试达到指标

00:12:28.980 --> 00:12:33.720
与南我的计时器将被创建

00:12:30.720 --> 00:12:37.110
自动，所以这里的想法是

00:12:33.720 --> 00:12:40.920
确保我反对的计时器

00:12:37.110 --> 00:12:45.569
每年我的计时器名称是

00:12:40.920 --> 00:12:47.370
与旋钮相同，对不起定时器

00:12:45.569 --> 00:12:49.350
富含同名的

00:12:47.370 --> 00:12:52.069
注册表，我们正在做这个测试确定

00:12:49.350 --> 00:12:52.069
和

00:12:53.269 --> 00:13:00.889
是的，最后我对

00:12:57.050 --> 00:13:04.220
我已经声明的所有矩阵的事实

00:13:00.889 --> 00:13:07.129
在我的程序中，我的应用程序是

00:13:04.220 --> 00:13:13.850
在注册表中注册的

00:13:07.129 --> 00:13:20.740
最后的测试还可以，如果我们去

00:13:13.850 --> 00:13:28.610
对执行该操作的扩展名

00:13:20.740 --> 00:13:31.569
魔术英雄，所以我的CDI扩展名是

00:13:28.610 --> 00:13:36.199
这里不熟悉CGI扩展

00:13:31.569 --> 00:13:40.309
好吧，只有一个家伙，对不起你

00:13:36.199 --> 00:13:46.129
我很少退缩和CJ假设

00:13:40.309 --> 00:13:49.759
所以扩展是一种修改所有

00:13:46.129 --> 00:13:52.009
我们在CDI中拥有的元数据主要是

00:13:49.759 --> 00:13:58.059
注册新的Bean修改现有的

00:13:52.009 --> 00:14:01.209
 bean并修改添加注释

00:13:58.059 --> 00:14:04.879
粗略地添加现有注释

00:14:01.209 --> 00:14:07.519
要向中添加功能的元素

00:14:04.879 --> 00:14:11.869
确定在此扩展中，我们

00:14:07.519 --> 00:14:13.629
有另一种方法

00:14:11.869 --> 00:14:16.429
实例第一种方法很简单

00:14:13.629 --> 00:14:19.869
我们正在观察之前

00:14:16.429 --> 00:14:23.059
发现生命周期，即使您处于

00:14:19.869 --> 00:14:27.049
当您的集装箱CGI叫我的

00:14:23.059 --> 00:14:29.839
启动它在第七种

00:14:27.049 --> 00:14:32.029
一定的顺序，所以我们在这里听

00:14:29.839 --> 00:14:35.119
到bin发现之前的第一个事件

00:14:32.029 --> 00:14:37.879
在发现中我可以

00:14:35.119 --> 00:14:41.839
添加一个注释作为限定符

00:14:37.879 --> 00:14:46.189
 CDI资格赛，所以我在这里

00:14:41.839 --> 00:14:49.189
指标注释，我不是全部

00:14:46.189 --> 00:14:54.190
来自指标，我将其添加

00:14:49.189 --> 00:14:59.660
作为预选赛第二

00:14:54.190 --> 00:15:03.740
这里的方法是关于拦截器的，所以我

00:14:59.660 --> 00:15:07.580
要检查定时注释

00:15:03.740 --> 00:15:09.800
来自矩阵，现在说好吧

00:15:07.580 --> 00:15:12.440
应该是拦截器绑定，因为

00:15:09.800 --> 00:15:14.390
当我明白了它什么都没有的时候

00:15:12.440 --> 00:15:16.100
批注，所以我想将其声明为

00:15:14.390 --> 00:15:19.640
拦截器绑定，所以我正在

00:15:16.100 --> 00:15:22.010
我正在观察同一事件

00:15:19.640 --> 00:15:24.950
看到这里，我在之前使用

00:15:22.010 --> 00:15:30.290
发现方法，称为广告

00:15:24.950 --> 00:15:34.310
拦截器绑定在这种方法我

00:15:30.290 --> 00:15:36.170
必须添加新的数据类型

00:15:34.310 --> 00:15:39.080
拦截器绑定我要添加我

00:15:36.170 --> 00:15:41.420
我可以增加课程吗

00:15:39.080 --> 00:15:44.410
直接但是在这里不可能

00:15:41.420 --> 00:15:47.270
因为如果我们去时间

00:15:44.410 --> 00:15:51.290
您在这里看到的注释时间

00:15:47.270 --> 00:15:55.610
关于成员姓名和

00:15:51.290 --> 00:15:57.830
绝对的问题是，如果您

00:15:55.610 --> 00:16:00.279
不要向该成员添加信息

00:15:57.830 --> 00:16:04.550
他们将被用来区分两个

00:16:00.279 --> 00:16:09.140
注释的版本不同

00:16:04.550 --> 00:16:13.990
如果你写一些我的话

00:16:09.140 --> 00:16:16.850
我们一两个时间的定时器

00:16:13.990 --> 00:16:18.350
会有两个不同的拦截器

00:16:16.850 --> 00:16:20.990
绑定，所以我必须创建两个

00:16:18.350 --> 00:16:22.660
在的不同拦截器

00:16:20.990 --> 00:16:25.390
时间我的

00:16:22.660 --> 00:16:30.070
我的计时器，还有我的计时器-所以我

00:16:25.390 --> 00:16:31.600
必须在上添加特定的元注释

00:16:30.070 --> 00:16:35.260
那些号码

00:16:31.600 --> 00:16:38.670
这是非约束性注释

00:16:35.260 --> 00:16:42.250
我不能直接添加的原因

00:16:38.670 --> 00:16:45.210
无法在此处直接添加时间类别

00:16:42.250 --> 00:16:49.690
我必须创建一个带注释的孩子

00:16:45.210 --> 00:16:51.430
这将对所有未绑定

00:16:49.690 --> 00:16:53.620
成员，所以我创建了一个

00:16:51.430 --> 00:16:58.740
实施，这就是我们

00:16:53.620 --> 00:17:01.660
大多数时候都在进行CDI扩展

00:16:58.740 --> 00:17:04.120
实施spi以增加我们的脚

00:17:01.660 --> 00:17:07.120
较早，所以我们将看看

00:17:04.120 --> 00:17:11.140
后来，但我创建了自己的，我尝试了

00:17:07.120 --> 00:17:15.820
将那些非约束性的添加为确定的

00:17:11.140 --> 00:17:18.339
第三是很有趣的部分

00:17:15.820 --> 00:17:23.020
扩展是扩展的一部分

00:17:18.339 --> 00:17:26.530
捕获所有产生的指标，因此

00:17:23.020 --> 00:17:31.000
在这里，我观察了所有制片人

00:17:26.530 --> 00:17:35.250
定义指标，所以我这样做是因为

00:17:31.000 --> 00:17:39.640
我正在观察均匀的生产者

00:17:35.250 --> 00:17:43.030
这里的通配符说这个

00:17:39.640 --> 00:17:47.140
生产者可以在任何阶层，但他们

00:17:43.030 --> 00:17:50.470
应该产生看到什么

00:17:47.140 --> 00:17:55.180
扩展了指标，所以所有生产者

00:17:50.470 --> 00:17:58.600
生产指标将被触发

00:17:55.180 --> 00:18:00.820
这个生命周期事件

00:17:58.600 --> 00:18:03.370
我也在注入我可以做的经理

00:18:00.820 --> 00:18:08.520
在任何观察者的生命周期中做到这一点

00:18:03.370 --> 00:18:13.320
我在这里做的事情是我正在测试

00:18:08.520 --> 00:18:16.080
我对此有指标注释吗

00:18:13.320 --> 00:18:21.120
如果是这种情况，则在此指标生成器上

00:18:16.080 --> 00:18:24.060
我检索了这个名字并使用了这个名字

00:18:21.120 --> 00:18:26.190
我创建了自己的制作人

00:18:24.060 --> 00:18:31.290
一些魔术的东西，我们稍后会看到

00:18:26.190 --> 00:18:35.700
但它会大致检查是否

00:18:31.290 --> 00:18:38.730
检查矩阵是否已经在

00:18:35.700 --> 00:18:42.390
如果是这样，而不是注册表

00:18:38.730 --> 00:18:45.720
创建指标，它给了我

00:18:42.390 --> 00:18:47.520
注册表中的指标以及是否

00:18:45.720 --> 00:18:49.530
所关联的注册表中不存在

00:18:47.520 --> 00:18:51.690
地址到注册表金额，以及

00:18:49.530 --> 00:18:56.520
归还吧，对不起

00:18:51.690 --> 00:19:01.170
还有这个中的最后一个方法

00:18:56.520 --> 00:19:04.020
扩展实际上就是

00:19:01.170 --> 00:19:06.270
确保所有的指标

00:19:04.020 --> 00:19:10.200
声明为生产者将被创建

00:19:06.270 --> 00:19:12.630
在应用程序运行之前

00:19:10.200 --> 00:19:15.600
不确定我将拥有

00:19:12.630 --> 00:19:20.730
注册表和指标中的相同指标

00:19:15.600 --> 00:19:23.430
在那我会注入好，所以我们

00:19:20.730 --> 00:19:29.400
现在可以运行此测试，我将去

00:19:23.430 --> 00:19:31.920
之后甚至更深层的代码

00:19:29.400 --> 00:19:37.830
我们知道我现在是否可以运行它

00:19:31.920 --> 00:19:40.680
所以我开始测试，我的眼睛我

00:19:37.830 --> 00:19:44.640
没有提到它，但我只是使用测试

00:19:40.680 --> 00:19:46.440
 G，但您可以不使用in 

00:19:44.640 --> 00:19:50.790
我使用测试程序G的程序，因为

00:19:46.440 --> 00:19:54.540
以后使用CDI C会更容易

00:19:50.790 --> 00:19:57.030
引导容器，以便我有我的

00:19:54.540 --> 00:20:00.600
三个测试通过了，我想证明

00:19:57.030 --> 00:20:04.800
你这个代码不是假的

00:20:00.600 --> 00:20:09.080
代码或有趣的东西，所以如果我命令一个

00:20:04.800 --> 00:20:14.130
这些方法的方法，我认为

00:20:09.080 --> 00:20:17.370
测试一个通过是的，所以我在这里评论

00:20:14.130 --> 00:20:19.410
您会在该部分看到评论

00:20:17.370 --> 00:20:20.000
当时的as拦截器绑定

00:20:19.410 --> 00:20:23.120
和

00:20:20.000 --> 00:20:24.410
所谓的测试应该是时间

00:20:23.120 --> 00:20:29.060
拦截或冷

00:20:24.410 --> 00:20:37.390
不通过，不是真正的代码

00:20:29.060 --> 00:20:42.160
好的，哇，好的，让我们开始吧

00:20:37.390 --> 00:20:42.160
也许我在这个话题上有一些幻灯片

00:20:43.120 --> 00:20:56.000
好吧，让我们从切换到se开始

00:20:51.940 --> 00:21:00.190
所以在切换到交流之前，我们要

00:20:56.000 --> 00:21:06.560
切换到CDI，以便切换到CDI-我

00:21:00.190 --> 00:21:13.400
必须输入我的计划XML，而我必须

00:21:06.560 --> 00:21:15.530
改变，你看到它可读吗

00:21:13.400 --> 00:21:22.790
我要更改CDI的版本

00:21:15.530 --> 00:21:25.640
在这里，我也必须改变

00:21:22.790 --> 00:21:28.340
实施的版本

00:21:25.640 --> 00:21:30.380
现在我正在使用野生的二四五

00:21:28.340 --> 00:21:33.500
我将切换到最新版本

00:21:30.380 --> 00:21:38.770
三口井中，这是参考

00:21:33.500 --> 00:21:43.790
实现，是的，我会

00:21:38.770 --> 00:21:45.850
野性的自由，哦那个决赛，我

00:21:43.790 --> 00:21:49.250
我猜有变化

00:21:45.850 --> 00:21:52.160
让我检查不应该应该没事

00:21:49.250 --> 00:21:57.440
现在让我告诉你我们

00:21:52.160 --> 00:21:59.390
运行CDI-因此，如果我们看一下

00:21:57.440 --> 00:22:02.350
大引擎，如果我们看一下控制台

00:21:59.390 --> 00:22:06.050
在这里，您会看到井的版本是

00:22:02.350 --> 00:22:11.450
二四五好吧，如果我运行测试

00:22:06.050 --> 00:22:15.800
再次应该是自由的哦

00:22:11.450 --> 00:22:20.150
手指好吧好吧，你看到一个免费的，所以我

00:22:15.800 --> 00:22:23.450
我已切换为CI-哦，现在让我们

00:22:20.150 --> 00:22:27.320
多做一点，所以我们将使用

00:22:23.450 --> 00:22:30.900
 CDI SC引导程序API，因此看起来

00:22:27.320 --> 00:22:35.100
像这样，我们介绍了

00:22:30.900 --> 00:22:38.570
两个新界面一个界面和一个

00:22:35.100 --> 00:22:43.620
顺便说一句，所以SC容器

00:22:38.570 --> 00:22:45.300
容器接口和SE cotner 

00:22:43.620 --> 00:22:47.900
初始化接口

00:22:45.300 --> 00:22:50.580
所以我们已经初始化了哦，你有一个

00:22:47.900 --> 00:22:54.260
模式，您可以创建一个新实例

00:22:50.580 --> 00:22:58.470
初始化程序你有很多

00:22:54.260 --> 00:23:01.560
我们可以禁用波束发现的功能

00:22:58.470 --> 00:23:05.820
并一一加进来

00:23:01.560 --> 00:23:08.400
在我们上课的地方添加属性

00:23:05.820 --> 00:23:09.420
最后一切都好

00:23:08.400 --> 00:23:13.920
你什么时候你有权利

00:23:09.420 --> 00:23:16.320
您的欧洲Nara您的配置

00:23:13.920 --> 00:23:20.160
调用初始化，它返回您

00:23:16.320 --> 00:23:23.010
现在与s的of等于

00:23:20.160 --> 00:23:27.480
没有类型，所以在我使用的示例中

00:23:23.010 --> 00:23:30.840
容器以检索类型为bin的容器

00:23:27.480 --> 00:23:32.580
我自己很简单，因为

00:23:30.840 --> 00:23:34.170
容器正在实现实例

00:23:32.580 --> 00:23:35.490
界面（如果您使用的是

00:23:34.170 --> 00:23:38.580
在Cydia中进行程序化查找

00:23:35.490 --> 00:23:42.960
大概知道一个柠檬好吧，所以我们

00:23:38.580 --> 00:23:47.550
要在我们的测试中使用它，如果我去

00:23:42.960 --> 00:23:51.500
回到我要去的测试中

00:23:47.550 --> 00:23:58.410
删除所有arquillians的东西，所以

00:23:51.500 --> 00:24:01.320
在这里，我不会在外部，我会

00:23:58.410 --> 00:24:08.420
删除此方法好吗

00:24:01.320 --> 00:24:08.420
因此，让我们创建一种在之后启动的方法

00:24:08.720 --> 00:24:11.930
就像是

00:24:15.520 --> 00:24:24.290
好吧，让我开始，我没有音乐

00:24:19.610 --> 00:24:30.950
我不会唱歌，所以我会用我们

00:24:24.290 --> 00:24:37.640
刚刚看到，所以我正在创建一口

00:24:30.950 --> 00:24:42.530
苗圃和一个可行的海运集装箱

00:24:37.640 --> 00:24:45.950
正确的拼写和使用大海

00:24:42.530 --> 00:24:54.140
容器初始化程序创建一个新的

00:24:45.950 --> 00:24:58.760
实例并添加包

00:24:54.140 --> 00:25:01.970
我的测试，所以我必须添加，以便我可以添加

00:24:58.760 --> 00:25:04.190
通过班级的包裹，所以我可以

00:25:01.970 --> 00:25:08.660
说好的，请添加带有

00:25:04.190 --> 00:25:15.110
上课，所以我可以上这堂课

00:25:08.660 --> 00:25:18.670
在测试中添加所有内容，我

00:25:15.110 --> 00:25:23.990
也可以添加我还必须添加所有

00:25:18.670 --> 00:25:26.630
包和项目中，所以我

00:25:23.990 --> 00:25:29.690
要输入指标扩展类，以便

00:25:26.630 --> 00:25:33.260
我在这里添加所有软件包

00:25:29.690 --> 00:25:37.550
测试和在项目中

00:25:33.260 --> 00:25:42.920
这个课我也要加

00:25:37.550 --> 00:25:47.240
扩展名，因此剪切添加扩展名

00:25:42.920 --> 00:25:50.890
并听取我的班级

00:25:47.240 --> 00:25:50.890
扩展矩阵扩展

00:25:50.910 --> 00:25:54.109
 [音乐] 

00:25:54.409 --> 00:25:57.409
哇

00:25:58.810 --> 00:26:06.630
我有一个新的拼写指标扩展名

00:26:07.830 --> 00:26:18.910
好的，应该还可以，我可以打电话给

00:26:12.130 --> 00:26:23.410
用点初始化在这里

00:26:18.910 --> 00:26:28.480
会更好，所以现在我有了我的

00:26:23.410 --> 00:26:32.860
容器，所以如果我的测试不在

00:26:28.480 --> 00:26:35.170
使用注射我可以停在那里

00:26:32.860 --> 00:26:37.510
喜欢公司，还可以，但是你知道

00:26:35.170 --> 00:26:42.430
我在测试中注入一些东西，所以我

00:26:37.510 --> 00:26:44.710
必须做一个额外的技巧来执行

00:26:42.430 --> 00:26:47.980
注射我的测试，所以我必须

00:26:44.710 --> 00:26:53.260
检索垃圾箱管理器，所以我

00:26:47.980 --> 00:26:55.750
在这里可以以g为单位

00:26:53.260 --> 00:26:59.650
扩展或测试G侦听器

00:26:55.750 --> 00:27:03.760
有更清洁的东西，所以只

00:26:59.650 --> 00:27:07.170
给你看，这样我可以找回

00:27:03.760 --> 00:27:07.170
集装箱经理

00:27:08.280 --> 00:27:16.390
好的垃圾桶管理器，我将能够

00:27:11.770 --> 00:27:20.290
创建所谓的注射

00:27:16.390 --> 00:27:22.120
禁制令的目标，所以让我们去

00:27:20.290 --> 00:27:29.700
注射目标和类型

00:27:22.120 --> 00:27:32.700
我的测试班级类型和

00:27:29.700 --> 00:27:38.680
这个注射目标将由

00:27:32.700 --> 00:27:40.900
我必须提供的垃圾桶经理

00:27:38.680 --> 00:27:51.750
为此，我必须提供一个注释

00:27:40.900 --> 00:27:51.750
这样创建的时代应该还可以

00:27:53.230 --> 00:28:01.789
如果这样做，我会更具可读性

00:27:56.690 --> 00:28:05.929
这样的事情还可以，之后

00:28:01.789 --> 00:28:13.549
我将使用这个注射目标

00:28:05.929 --> 00:28:16.429
对我的测试对象执行注射

00:28:13.549 --> 00:28:20.960
我正在注入这个，我正在创建一个

00:28:16.429 --> 00:28:23.960
创造上下文，因为它不存在

00:28:20.960 --> 00:28:27.740
与我创建的范围

00:28:23.960 --> 00:28:30.350
创建性上下文，如果为null，那么我有一个

00:28:27.740 --> 00:28:32.960
默认默认要和最后但不是

00:28:30.350 --> 00:28:36.669
至少如果我想启动此代码

00:28:32.960 --> 00:28:43.610
在我进行所有测试之前，我将在

00:28:36.669 --> 00:28:46.490
上课之前，您可以在测试中使用

00:28:43.610 --> 00:28:48.470
非静态上课前

00:28:46.490 --> 00:28:51.320
 g单位不是这种方法

00:28:48.470 --> 00:28:54.080
我之所以选择测试引擎的原因

00:28:51.320 --> 00:28:57.350
这，但有一个技巧，甚至夹具

00:28:54.080 --> 00:28:59.179
需要五个，我想我看到了，所以在这里

00:28:57.350 --> 00:29:02.059
我所做的事情我删除了所有

00:28:59.179 --> 00:29:06.350
偶尔参考并创建了我的

00:29:02.059 --> 00:29:08.059
自己的引导区，所以可以

00:29:06.350 --> 00:29:10.490
老实说，这里的部分有点混乱

00:29:08.059 --> 00:29:12.470
但是你可以想象拥有自己的是

00:29:10.490 --> 00:29:18.020
现在自动执行此操作

00:29:12.470 --> 00:29:20.330
可以只根据我的考试和CISC进行测试

00:29:18.020 --> 00:29:26.390
而且不起作用

00:29:20.330 --> 00:29:29.750
好吧，是的，这是正常的

00:29:26.390 --> 00:29:36.320
为什么会有这个，因为我只添加到

00:29:29.750 --> 00:29:38.510
我对Travis I的项目名称限制

00:29:36.320 --> 00:29:42.159
没有特拉维斯的所有课程，所以

00:29:38.510 --> 00:29:48.559
你必须改变我的诗

00:29:42.159 --> 00:29:54.140
对更大的依赖

00:29:48.559 --> 00:29:56.380
打包前进，让我们起诉吧

00:29:54.140 --> 00:29:58.660
那就是我不需要

00:29:56.380 --> 00:30:04.660
我不会再这样了，是的，我可以

00:29:58.660 --> 00:30:10.570
添加依赖关系不确定我会找到它

00:30:04.660 --> 00:30:12.820
很好，是的，这就是她

00:30:10.570 --> 00:30:19.380
阴影，我要走最后一个

00:30:12.820 --> 00:30:23.380
一个不在这里的是的，所以

00:30:19.380 --> 00:30:27.280
免费获得一个决赛，所以我要添加这个

00:30:23.380 --> 00:30:30.370
消除对井的依赖

00:30:27.280 --> 00:30:33.780
 Java，将其用于Java C 

00:30:30.370 --> 00:30:41.169
否则我将无法引导

00:30:33.780 --> 00:30:44.530
文档是为了确保

00:30:41.169 --> 00:30:47.890
每个人都在跟踪，所以现在我

00:30:44.530 --> 00:30:51.370
用我自己的容器运行测试

00:30:47.890 --> 00:30:53.679
所以是的，你看到我有新的

00:30:51.370 --> 00:30:55.150
有关此处的信息

00:30:53.679 --> 00:30:57.220
我没有的交易服务

00:30:55.150 --> 00:31:00.970
但我不需要考试

00:30:57.220 --> 00:31:04.840
哦，好吧，那是一个

00:31:00.970 --> 00:31:09.280
韩国人在某些音乐中可能有点偏爱

00:31:04.840 --> 00:31:12.159
用例，因此您可以使用

00:31:09.280 --> 00:31:17.460
参加测试的最低CDI资料和

00:31:12.159 --> 00:31:24.159
向您展示，向您展示

00:31:17.460 --> 00:31:27.520
这个引导程序无处不在

00:31:24.159 --> 00:31:32.020
我将切换我的实现和使用

00:31:27.520 --> 00:31:35.820
开放的过度实施

00:31:32.020 --> 00:31:41.140
 Web bean，我有一个开放的Web bean 

00:31:35.820 --> 00:31:45.940
 se这是打开的最后一个版本

00:31:41.140 --> 00:31:48.730
 Web bean se是201 so时代

00:31:45.940 --> 00:31:50.860
我删除了很好的开关以打开Web Bean 

00:31:48.730 --> 00:31:53.909
以相同的方式运行测试，所以我不

00:31:50.860 --> 00:31:57.150
更改我的代码或需要依赖

00:31:53.909 --> 00:31:59.370
手指手指

00:31:57.150 --> 00:32:02.490
所以它以您看到的方式起作用

00:31:59.370 --> 00:32:04.230
在ZZZ中打开网页的详细信息

00:32:02.490 --> 00:32:07.050
午餐时间，但可能很有趣，因为

00:32:04.230 --> 00:32:13.080
它列出了所有发现的垃圾箱

00:32:07.050 --> 00:32:18.720
在启动时好，所以现在我们正在使用

00:32:13.080 --> 00:32:24.570
 CD是这样，让我们​​开始扩展

00:32:18.720 --> 00:32:27.740
马上开始给我检查，哇

00:32:24.570 --> 00:32:27.740
说话还可以

00:32:29.250 --> 00:32:33.420
让我们从第一部分开始

00:32:32.220 --> 00:32:35.640
不用做任何事

00:32:33.420 --> 00:32:39.240
指标作为限定词，我们可以保留它

00:32:35.640 --> 00:32:42.500
因为我们只使用一个类

00:32:39.240 --> 00:32:46.650
变得有趣，在这里你看到我们

00:32:42.500 --> 00:32:48.330
添加拦截器绑定

00:32:46.650 --> 00:32:51.240
带注释的类型，我必须创建它

00:32:48.330 --> 00:32:54.240
这堂课的态度是什么

00:32:51.240 --> 00:32:57.210
所有方法均非绑定类型

00:32:54.240 --> 00:33:01.050
所以在这个带注释的类型中，我只是

00:32:57.210 --> 00:33:05.830
装饰带注释的类型，所以这里

00:33:01.050 --> 00:33:08.830
代表，我要归还所有

00:33:05.830 --> 00:33:11.620
代表的价值提出诉讼

00:33:08.830 --> 00:33:13.510
在数据类型下，除非我要求

00:33:11.620 --> 00:33:15.850
当我从

00:33:13.510 --> 00:33:17.740
方法我将采用这些方法， 

00:33:15.850 --> 00:33:21.220
复活节而不是威胁

00:33:17.740 --> 00:33:23.260
方法我将用

00:33:21.220 --> 00:33:27.760
非约束和态度方法

00:33:23.260 --> 00:33:33.519
装饰方法有点复杂

00:33:27.760 --> 00:33:35.649
这个想法是说好吧，我想成为

00:33:33.519 --> 00:33:41.220
可以说我对此没有约束力

00:33:35.649 --> 00:33:42.490
不在原始位置上的方法

00:33:41.220 --> 00:33:46.630
资源

00:33:42.490 --> 00:33:51.070
所以这个非绑定注释方法是

00:33:46.630 --> 00:33:54.279
做的完全一样，只是在做

00:33:51.070 --> 00:33:57.669
关于添加非的东西

00:33:54.279 --> 00:34:00.370
绑定到方法，所以当我要求

00:33:57.669 --> 00:34:02.529
我采用的方法上的注释

00:34:00.370 --> 00:34:07.120
原始注释并添加非绑定

00:34:02.529 --> 00:34:11.530
当我被问到存在

00:34:07.120 --> 00:34:15.010
非约束力的如果是我

00:34:11.530 --> 00:34:17.849
返回true，所以我有这点

00:34:15.010 --> 00:34:22.450
理想的约束力对我所有

00:34:17.849 --> 00:34:25.599
元素我在这里有两个课，再加上一个

00:34:22.450 --> 00:34:27.639
上层阶级在这里没有约束文字

00:34:25.599 --> 00:34:30.490
有一些想法，所以免费上课免费

00:34:27.639 --> 00:34:36.429
我将替换的类将其替换为

00:34:30.490 --> 00:34:39.609
简单的CDI编码，是的，我可以使用

00:34:36.429 --> 00:34:42.270
 Cydia的新功能配置

00:34:39.609 --> 00:34:44.859
拦截器绑定，因此无需添加

00:34:42.270 --> 00:34:49.359
这样我的拦截器绑定

00:34:44.859 --> 00:34:53.399
配置它，我可以得到的方法

00:34:49.359 --> 00:34:57.810
下方的拦截​​器将关闭

00:34:53.399 --> 00:35:03.940
对于这种方法，我会

00:34:57.810 --> 00:35:08.070
采取的方法，我不需要

00:35:03.940 --> 00:35:08.070
大括号，但无论如何，我会添加

00:35:09.650 --> 00:35:15.150
不具有约束力的我不使用不

00:35:13.170 --> 00:35:18.510
使用我创建的非绑定文字

00:35:15.150 --> 00:35:25.430
不再，因为我现在有文字

00:35:18.510 --> 00:35:25.430
规格就是这样

00:35:28.790 --> 00:35:36.190
糟糕，我的意思是这是什么问题

00:35:41.080 --> 00:35:45.700
是的，我必须要我对不起

00:35:43.480 --> 00:35:50.530
给他们当然我必须给

00:35:45.700 --> 00:35:54.880
这个班好吧，是的

00:35:50.530 --> 00:35:57.520
我删除了三个大班和两个大班

00:35:54.880 --> 00:36:00.960
上课再讲一次

00:35:57.520 --> 00:36:04.620
很小的东西让我们尝试

00:36:00.960 --> 00:36:04.620
如果在工作

00:36:06.210 --> 00:36:15.040
是的，你有十分钟给你看

00:36:10.600 --> 00:36:18.580
 D和H接下来会很容易

00:36:15.040 --> 00:36:21.550
是最棘手的部分之一

00:36:18.580 --> 00:36:29.860
代码，以便在此显示ID 

00:36:21.550 --> 00:36:33.580
你的想法错误是当我检测到这个

00:36:29.860 --> 00:36:36.580
在我的代码中，所以我在这里产生一个计时器

00:36:33.580 --> 00:36:37.930
这是一个指标，它扩展了他们

00:36:36.580 --> 00:36:41.410
指标，它实现指标

00:36:37.930 --> 00:36:46.450
我想不能的界面

00:36:41.410 --> 00:36:50.650
每当我想成为时执行此代码

00:36:46.450 --> 00:36:53.590
可以检查注册表，如果我是计时器

00:36:50.650 --> 00:36:56.290
如果是一个指标，如果我的名字是

00:36:53.590 --> 00:36:59.920
存在（如果存在）我返回了

00:36:56.290 --> 00:37:01.930
现有的如果不是我创建

00:36:59.920 --> 00:37:05.980
指标添加到注册表并返回

00:37:01.930 --> 00:37:10.090
东西还可以，所以实际上这段代码

00:37:05.980 --> 00:37:13.210
是我的用户将被声明的方式

00:37:10.090 --> 00:37:15.940
我的指标，我要添加下一个

00:37:13.210 --> 00:37:19.660
接下来的功能是棘手的部分

00:37:15.940 --> 00:37:25.090
这样可以避免创建额外的指标

00:37:19.660 --> 00:37:34.090
如果不需要的话在这里做

00:37:25.090 --> 00:37:35.710
我的1/2代码我必须下降才能听

00:37:34.090 --> 00:37:41.170
我展示的过程生产者

00:37:35.710 --> 00:37:43.630
开始我要获取指标

00:37:41.170 --> 00:37:46.500
在生产者上标注，因为我

00:37:43.630 --> 00:37:51.590
需要名称来获得名称

00:37:46.500 --> 00:37:55.470
 Dmytryk我要求还可以，我是

00:37:51.590 --> 00:38:00.060
改变原来的生产者

00:37:55.470 --> 00:38:02.310
观察者被一个项目拦截

00:38:00.060 --> 00:38:04.410
我创造了自己，这就是新的

00:38:02.310 --> 00:38:08.070
公制生产者，与我们相同

00:38:04.410 --> 00:38:12.780
在度量标准生产者装饰之前看

00:38:08.070 --> 00:38:15.660
现有的生产者还可以，请致电

00:38:12.780 --> 00:38:19.140
无限的装饰生产者

00:38:15.660 --> 00:38:21.330
除非涉及到生产

00:38:19.140 --> 00:38:24.600
元素，所以当我想产生

00:38:21.330 --> 00:38:26.160
元素我在这里检索注册表

00:38:24.600 --> 00:38:29.790
有点复杂，我们会看到

00:38:26.160 --> 00:38:32.340
我们要简化之后

00:38:29.790 --> 00:38:36.120
测试注册表是否包含

00:38:32.340 --> 00:38:39.150
指标与我收到的名称（如果是

00:38:36.120 --> 00:38:42.840
如果不是这种情况，我会

00:38:39.150 --> 00:38:46.290
通过调用

00:38:42.840 --> 00:38:50.640
装饰生产者的生产方法

00:38:46.290 --> 00:38:53.550
最后，我从

00:38:50.640 --> 00:38:57.630
注册表，所以我将使用此代码，但

00:38:53.550 --> 00:39:03.200
我将以更简单的方式使用它，所以我

00:38:57.630 --> 00:39:06.630
将摆脱这个班回到我

00:39:03.200 --> 00:39:13.380
扩展是

00:39:06.630 --> 00:39:18.540
好吧，这个时代将被使用

00:39:13.380 --> 00:39:20.730
不再使用了，所以我会用PP 

00:39:18.540 --> 00:39:23.400
流程生产者，我有一个配置

00:39:20.730 --> 00:39:30.260
生产者在其中配置生产者

00:39:23.400 --> 00:39:30.260
让我定义一个要产生的函数

00:39:30.310 --> 00:39:37.410
光束的元素，所以我会产生

00:39:34.870 --> 00:39:41.560
它的韦弗

00:39:37.410 --> 00:39:47.080
所以我收到了一个创作背景CD 

00:39:41.560 --> 00:39:49.810
我会为我提供它，而我会

00:39:47.080 --> 00:39:54.930
把代码对不起，我会把代码

00:39:49.810 --> 00:39:57.580
这是我以前复制的

00:39:54.930 --> 00:39:59.590
制片人，我将检查几件事

00:39:57.580 --> 00:40:01.690
所以在这里我不再需要了

00:39:59.590 --> 00:40:08.440
因为我有一个非常方便的方法

00:40:01.690 --> 00:40:09.850
在CDI中达到实例-这

00:40:08.440 --> 00:40:14.590
方便的方法

00:40:09.850 --> 00:40:16.930
使用垃圾桶管理器，这样我就可以创建一个

00:40:14.590 --> 00:40:20.050
实例，这就是您所知道的实例

00:40:16.930 --> 00:40:23.740
作为程序化查找机制

00:40:20.050 --> 00:40:31.960
我可以在此实例中做到这一点

00:40:23.740 --> 00:40:36.850
选择度量标准注册表类型，然后我

00:40:31.960 --> 00:40:40.150
可以获取实例，所以在这里我有一个简单的

00:40:36.850 --> 00:40:42.280
我在这里到达注册表的方式

00:40:40.150 --> 00:40:48.600
不使用指标名称，而是使用

00:40:42.280 --> 00:40:53.380
这里好，这里一样

00:40:48.600 --> 00:40:57.310
好吧，这里不再一样了

00:40:53.380 --> 00:40:59.830
但这不是专家II 

00:40:57.310 --> 00:41:03.250
我需要那个，我需要达到

00:40:59.830 --> 00:41:11.250
用这个装饰，让我们做这个

00:41:03.250 --> 00:41:11.250
错误，所以它是G的生产者

00:41:11.769 --> 00:41:25.010
好，装饰，是我找回来的

00:41:20.210 --> 00:41:27.740
从流程生产者那里好，所以我

00:41:25.010 --> 00:41:31.789
不再需要这条线，我也不需要

00:41:27.740 --> 00:41:39.500
认为我再创建了一个类

00:41:31.789 --> 00:41:42.640
我可以用Java 8做清洁工的方法

00:41:39.500 --> 00:41:45.319
代码启动测试交叉手指

00:41:42.640 --> 00:41:51.140
好吧，我没有用开放式Web Bean进行测试

00:41:45.319 --> 00:41:55.299
在此之前，它还活着，是的，我们

00:41:51.140 --> 00:41:59.240
还剩几分钟来做最后

00:41:55.299 --> 00:42:03.200
观察者在我们这样的延伸时代

00:41:59.240 --> 00:42:05.740
观察事件的观察者

00:42:03.200 --> 00:42:08.750
问题验证后，在哪里

00:42:05.740 --> 00:42:10.730
一切都准备好运行我的

00:42:08.750 --> 00:42:14.329
应用程序后，我有此事件

00:42:10.730 --> 00:42:16.910
工厂验证，我想要的是

00:42:14.329 --> 00:42:20.180
触发所有

00:42:16.910 --> 00:42:22.789
生产者在我的应用程序中，以确保

00:42:20.180 --> 00:42:25.250
他们已在指标中注册

00:42:22.789 --> 00:42:28.099
注册表以避免我可以

00:42:25.250 --> 00:42:32.329
如果我使用

00:42:28.099 --> 00:42:36.529
指标303，或者如果我注入指标

00:42:32.329 --> 00:42:41.269
所以时代我要删除它并使用

00:42:36.529 --> 00:42:45.319
一些较小的东西，所以我要做什么

00:42:41.269 --> 00:42:50.569
我已经在创建实例之前完成了

00:42:45.319 --> 00:42:55.089
距离我可以选择想要的元素

00:42:50.569 --> 00:42:55.089
检索，所以在这里

00:42:55.160 --> 00:43:02.740
指标还可以，但不是这个

00:42:58.670 --> 00:43:06.070
是的，这个人要小心，因为他们是

00:43:02.740 --> 00:43:09.640
度量标准上的度量标准注释和

00:43:06.070 --> 00:43:13.670
界面还可以

00:43:09.640 --> 00:43:16.490
我想检索所有指标

00:43:13.670 --> 00:43:20.270
因为我上面有注释

00:43:16.490 --> 00:43:23.390
我将检查使用的任何Poli火

00:43:20.270 --> 00:43:25.640
威慑和实例还可以

00:43:23.390 --> 00:43:28.130
所以是的，我有更正，我有办法

00:43:25.640 --> 00:43:30.500
遍历所有

00:43:28.130 --> 00:43:35.410
通过我的生产者定义的指标

00:43:30.500 --> 00:43:38.390
应用程序，现在我可以使用草料了

00:43:35.410 --> 00:43:41.360
从我的收藏和每个矩阵

00:43:38.390 --> 00:43:43.760
实际上我什么也不想做

00:43:41.360 --> 00:43:47.060
触发创建，因此它将触发

00:43:43.760 --> 00:43:48.740
生产者时代的代码，使

00:43:47.060 --> 00:43:51.440
确保所有指标将

00:43:48.740 --> 00:43:54.590
像这样注册，并且是Mac 

00:43:51.440 --> 00:44:00.950
使代码更容易阅读

00:43:54.590 --> 00:44:05.710
较容易阅读，对不起，应该没问题，我们

00:44:00.950 --> 00:44:09.350
完成它，这很好

00:44:05.710 --> 00:44:13.090
好的，就是这样，我认为我没有任何东西

00:44:09.350 --> 00:44:17.240
还剩时间，如果您有任何疑问

00:44:13.090 --> 00:44:20.720
我会在外面准备回答，我

00:44:17.240 --> 00:44:22.970
鼓励您检查幻灯片

00:44:20.720 --> 00:44:25.490
关于CDI的套索新功能

00:44:22.970 --> 00:44:29.450
拥有我们所有的比赛

00:44:25.490 --> 00:44:33.530
在本次演讲中提出谢谢

00:44:29.450 --> 00:44:33.530
 [掌声] 

