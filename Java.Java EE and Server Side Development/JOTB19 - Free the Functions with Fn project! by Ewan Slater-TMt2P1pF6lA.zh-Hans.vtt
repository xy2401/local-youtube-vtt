WEBVTT
Kind: captions
Language: zh-Hans

00:00:08.200 --> 00:00:15.400
嗨，我叫你，我和斯莱特说话

00:00:13.210 --> 00:00:19.320
我释放了功能，这是关于

00:00:15.400 --> 00:00:21.970
开源服务和FN项目

00:00:19.320 --> 00:00:24.970
在接下来的20分钟内，我将

00:00:21.970 --> 00:00:27.460
谈论服务是什么原因

00:00:24.970 --> 00:00:31.060
重要的是为什么你应该选择你的

00:00:27.460 --> 00:00:35.079
服务平台和FN精心

00:00:31.060 --> 00:00:37.239
现在进行项目我的滚筒Oracle正在

00:00:35.079 --> 00:00:38.860
云架构师，这意味着我工作

00:00:37.239 --> 00:00:42.610
与Oracle客户和合作伙伴

00:00:38.860 --> 00:00:46.840
帮助他们设计构建部署并

00:00:42.610 --> 00:00:49.510
在云上运行应用程序，但是我

00:00:46.840 --> 00:00:51.219
真正做到了，我一直都在做

00:00:49.510 --> 00:00:54.129
自从我职业生涯开始

00:00:51.219 --> 00:00:58.839
研究科学家是我解决问题

00:00:54.129 --> 00:01:02.530
解决问题通常会沸腾

00:00:58.839 --> 00:01:05.019
归结为几件事，关键之一是

00:01:02.530 --> 00:01:06.880
简化问题，是的，如果可以的话

00:01:05.019 --> 00:01:09.610
使问题尽可能简单

00:01:06.880 --> 00:01:12.280
那么解决起来就容易了

00:01:09.610 --> 00:01:13.930
它分为几块，您限制了

00:01:12.280 --> 00:01:16.210
范围，以确保您

00:01:13.930 --> 00:01:18.970
专注于真正的事情

00:01:16.210 --> 00:01:20.790
很重要的事情

00:01:18.970 --> 00:01:24.520
重要的是选择正确的

00:01:20.790 --> 00:01:28.030
抽象，例如，如果您是

00:01:24.520 --> 00:01:30.250
看着几何，你就是

00:01:28.030 --> 00:01:34.119
考虑到你知道表面

00:01:30.250 --> 00:01:35.799
例如，如果您选择

00:01:34.119 --> 00:01:38.439
球形极的抽象

00:01:35.799 --> 00:01:40.479
协调数学会很多

00:01:38.439 --> 00:01:42.700
更容易，你的问题会很多

00:01:40.479 --> 00:01:46.450
比您尝试坚持要简单

00:01:42.700 --> 00:01:49.020
笛卡尔协调一个抽象

00:01:46.450 --> 00:01:52.990
带我到服务器的欲望

00:01:49.020 --> 00:01:55.750
那么什么是CNC F服务良好的服务

00:01:52.990 --> 00:01:57.520
定义是这样，我把一些

00:01:55.750 --> 00:01:59.680
粗体字强调

00:01:57.520 --> 00:02:01.079
但是无服务器计算是指

00:01:59.680 --> 00:02:04.539
建立和运行的概念

00:02:01.079 --> 00:02:06.909
不需要服务器的应用程序

00:02:04.539 --> 00:02:08.950
管理它描述了更细粒度

00:02:06.909 --> 00:02:12.150
应用程序所在的部署模型

00:02:08.950 --> 00:02:15.880
捆绑为一个或多个功能是

00:02:12.150 --> 00:02:18.130
上传到平台然后执行

00:02:15.880 --> 00:02:22.270
缩放和计费以响应

00:02:18.130 --> 00:02:23.830
目前所需的确切需求

00:02:22.270 --> 00:02:26.550
将在需要时运行

00:02:23.830 --> 00:02:29.730
他们不会跑

00:02:26.550 --> 00:02:32.100
实际上等待事情发生，所以

00:02:29.730 --> 00:02:34.080
什么服务是我们的抽象

00:02:32.100 --> 00:02:35.880
将基础架构抽象出来

00:02:34.080 --> 00:02:39.540
我们与此相关的操作

00:02:35.880 --> 00:02:40.860
如果我们构建一个应用程序并运行

00:02:39.540 --> 00:02:43.230
它在这个抽象的顶部

00:02:40.860 --> 00:02:46.500
基础设施，我们可以说我们有一个

00:02:43.230 --> 00:02:48.630
服务架构和开发人员

00:02:46.500 --> 00:02:53.310
然后我们可以专注于交付

00:02:48.630 --> 00:02:55.290
业务需要什么功能

00:02:53.310 --> 00:02:57.840
使用功能即服务，因为

00:02:55.290 --> 00:03:00.000
这是服务的计算组成部分

00:02:57.840 --> 00:03:04.950
这就是我们的业务逻辑要去的地方

00:03:00.000 --> 00:03:06.420
执行，所以当我们在阶段

00:03:04.950 --> 00:03:09.240
我们正在做的是写小

00:03:06.420 --> 00:03:10.920
功能是因为它们很小

00:03:09.240 --> 00:03:13.830
应该容易写，应该是

00:03:10.920 --> 00:03:16.320
容易正确，他们应该做一个

00:03:13.830 --> 00:03:18.840
好吧，他们应该很容易

00:03:16.320 --> 00:03:21.720
了解他们应该很容易

00:03:18.840 --> 00:03:24.050
维护，我们将继续运行它们

00:03:21.720 --> 00:03:27.960
此无服务器平台的顶部或

00:03:24.050 --> 00:03:30.930
现在抽象的基础架构

00:03:27.960 --> 00:03:34.020
伯克利大学做了关于

00:03:30.930 --> 00:03:36.270
三月份的服务计算很好

00:03:34.020 --> 00:03:38.190
值得一看，我已经讲了一些

00:03:36.270 --> 00:03:39.959
点在这里，但他们在谈论

00:03:38.190 --> 00:03:42.030
人们被服务吸引

00:03:39.959 --> 00:03:44.310
功能服务计算和

00:03:42.030 --> 00:03:47.430
特别是他们的功能

00:03:44.310 --> 00:03:49.800
描述为新的计算机抽象

00:03:47.430 --> 00:03:54.420
有望成为未来

00:03:49.800 --> 00:03:57.600
云计算可能会有点高

00:03:54.420 --> 00:03:59.820
 P，但我认为他们的意思是

00:03:57.600 --> 00:04:02.250
在很多情况下，我们一直在做

00:03:59.820 --> 00:04:04.830
到目前为止，云技术已成为传统

00:04:02.250 --> 00:04:07.470
应用程序并将其移至

00:04:04.830 --> 00:04:09.690
云或创建看起来像的应用程序

00:04:07.470 --> 00:04:12.870
像他们在云上一样，所以我们

00:04:09.690 --> 00:04:15.209
今天真正完成的工作是与

00:04:12.870 --> 00:04:17.130
没有服务器，我们实际上开始转向

00:04:15.209 --> 00:04:19.770
我们开发应用程序的关键点

00:04:17.130 --> 00:04:23.250
为云而不仅仅是我们

00:04:19.770 --> 00:04:25.650
运行它，人们看到什么

00:04:23.250 --> 00:04:28.590
客户看到编程的增加

00:04:25.650 --> 00:04:30.300
生产率以及节省成本

00:04:28.590 --> 00:04:34.140
因为你只消耗资源

00:04:30.300 --> 00:04:35.700
当您需要开发人员的帮助时

00:04:34.140 --> 00:04:38.250
观点上我们也避免这种情况

00:04:35.700 --> 00:04:39.340
业务行为说明

00:04:38.250 --> 00:04:41.800
做一点事

00:04:39.340 --> 00:04:44.080
在我们做他们做的事之前

00:04:41.800 --> 00:04:46.150
认为我们应该做一堆

00:04:44.080 --> 00:04:49.120
我们必须事先做的事情

00:04:46.150 --> 00:04:51.520
令他们感到沮丧的是无服务器

00:04:49.120 --> 00:04:55.479
使我们远离那个，因为那是

00:04:51.520 --> 00:04:57.880
被抽象出来，所以它的优点

00:04:55.479 --> 00:05:00.310
服务应该使发展

00:04:57.880 --> 00:05:02.710
更容易改善开发人员

00:05:00.310 --> 00:05:05.139
生产力应该增加我们

00:05:02.710 --> 00:05:07.419
作为开发人员应该提供帮助的敏捷性

00:05:05.139 --> 00:05:09.550
使业务更加敏捷

00:05:07.419 --> 00:05:14.320
还应该降低开发成本

00:05:09.550 --> 00:05:17.380
软件并立即进行操作（如果有） 

00:05:14.320 --> 00:05:19.120
有缺点，必须有缺点

00:05:17.380 --> 00:05:22.060
我目前看到的第一名是

00:05:19.120 --> 00:05:24.160
闪亮的服务器少了，凉了，热了，所以

00:05:22.060 --> 00:05:26.080
人们将在任何地方使用它，他们

00:05:24.160 --> 00:05:28.060
一定会在它的地方使用它

00:05:26.080 --> 00:05:30.940
不适当的话，他们会得到

00:05:28.060 --> 00:05:32.800
心烦意乱，指责无服务器的对方

00:05:30.940 --> 00:05:34.780
问题是锁定，您不一定

00:05:32.800 --> 00:05:36.880
拿一些你写的东西

00:05:34.780 --> 00:05:40.840
一个服务平台并在其上运行

00:05:36.880 --> 00:05:43.000
另一个UA也可能会发现

00:05:40.840 --> 00:05:44.560
平台限制您的选择

00:05:43.000 --> 00:05:47.860
你可以写你的语言

00:05:44.560 --> 00:05:50.560
根据您可以在何处进行编程

00:05:47.860 --> 00:05:52.960
写你的程序，他们可能是

00:05:50.560 --> 00:05:55.270
固执己见

00:05:52.960 --> 00:06:00.039
你如何抽象你的功能

00:05:55.270 --> 00:06:02.190
并在某种意义上为它们建模

00:06:00.039 --> 00:06:05.470
选择一个服务平台

00:06:02.190 --> 00:06:07.450
你几乎要选择一个笼子，它可能

00:06:05.470 --> 00:06:10.690
被镀金的笼子，这可能是一个非常非常

00:06:07.450 --> 00:06:13.810
漂亮的笼子，但在那扇门关上之前

00:06:10.690 --> 00:06:17.440
锁，我认为您需要确保

00:06:13.810 --> 00:06:23.169
那个笼子里有足够的自由

00:06:17.440 --> 00:06:26.410
让我开心，现在和别人聊天

00:06:23.169 --> 00:06:29.740
我与某人或某人一起工作

00:06:26.410 --> 00:06:31.870
或所有这些自由很重要

00:06:29.740 --> 00:06:34.210
想要自由选择什么语言

00:06:31.870 --> 00:06:35.530
他们在想要的地方写他们的功能

00:06:34.210 --> 00:06:38.560
自由选择那些地方

00:06:35.530 --> 00:06:41.950
函数运行，他们想决定如何

00:06:38.560 --> 00:06:43.780
他们将应用程序打包

00:06:41.950 --> 00:06:47.409
不想依赖于一个

00:06:43.780 --> 00:06:50.620
供应商，他们可以作为个人或作为

00:06:47.409 --> 00:06:51.980
组织对

00:06:50.620 --> 00:06:54.680
依赖

00:06:51.980 --> 00:06:58.430
单一供应商，遇到麻烦

00:06:54.680 --> 00:07:01.850
他们可能想要那种关系恶化

00:06:58.430 --> 00:07:04.670
能够将其功能从

00:07:01.850 --> 00:07:07.760
一个云到本地环境

00:07:04.670 --> 00:07:10.100
到不同的云甚至运行在

00:07:07.760 --> 00:07:13.670
跨多个分散模型

00:07:10.100 --> 00:07:16.400
同时他们可能也有云

00:07:13.670 --> 00:07:18.830
您知道的隐私问题不会

00:07:16.400 --> 00:07:24.500
一定要信任所有人

00:07:18.830 --> 00:07:26.510
云提供商和终极自由

00:07:24.500 --> 00:07:28.940
获得或最终的自由

00:07:26.510 --> 00:07:31.490
他们中有些人想要的是

00:07:28.940 --> 00:07:33.740
他们决定平台目录是

00:07:31.490 --> 00:07:35.930
他们不喜欢的方式是

00:07:33.740 --> 00:07:38.810
分叉甚至创造的能力

00:07:35.930 --> 00:07:41.180
他们自己的无服务器平台又如何

00:07:38.810 --> 00:07:43.640
他们真正想做的是释放

00:07:41.180 --> 00:07:46.910
功能和我们前进的方式

00:07:43.640 --> 00:07:50.540
释放功能是通过移动到

00:07:46.910 --> 00:07:52.640
开源服务现在有一个

00:07:50.540 --> 00:07:55.850
开源服务平台数量

00:07:52.640 --> 00:07:58.220
例如那里有开放的拂尘

00:07:55.850 --> 00:08:00.140
我要谈谈开放票价

00:07:58.220 --> 00:08:03.460
关于FN，因为这是我

00:08:00.140 --> 00:08:07.790
顺便说一句，那不是我的日常工作

00:08:03.460 --> 00:08:10.340
因此FN项目是一项开源服务

00:08:07.790 --> 00:08:12.860
您可以将其部署到的计算平台

00:08:10.340 --> 00:08:16.490
任何云，本地或您的

00:08:12.860 --> 00:08:19.640
笔记本电脑，我们将功能建模为

00:08:16.490 --> 00:08:22.250
容器中有大量的

00:08:19.640 --> 00:08:24.410
我正在做的人

00:08:22.250 --> 00:08:27.170
我们对云事件具有本地支持

00:08:24.410 --> 00:08:29.840
它由Oracle支持，但独立

00:08:27.170 --> 00:08:31.820
在CNC的代表处进行管理

00:08:29.840 --> 00:08:36.200
我们有一个基于语言的工作流程

00:08:31.820 --> 00:08:38.000
现在称为流的机制会发生什么

00:08:36.200 --> 00:08:40.640
与FN是你要的功能，这是

00:08:38.000 --> 00:08:42.710
依赖关系，你把它们烤成一个

00:08:40.640 --> 00:08:47.000
泊坞窗图片

00:08:42.710 --> 00:08:49.490
专为您准备的独立包装

00:08:47.000 --> 00:08:52.610
函数里面的函数应该是

00:08:49.490 --> 00:08:56.030
无状态的任何状态都需要

00:08:52.610 --> 00:08:59.230
写出到外部存储或

00:08:56.030 --> 00:09:02.750
数据库，因为这些都是短暂的

00:08:59.230 --> 00:09:05.630
他们将按需运行

00:09:02.750 --> 00:09:09.680
在执行过程中存在并且

00:09:05.630 --> 00:09:12.740
他们会消失，所以你的FN 

00:09:09.680 --> 00:09:14.990
函数看起来像是一小块

00:09:12.740 --> 00:09:19.220
将其包装到容器中的代码

00:09:14.990 --> 00:09:22.310
图片从http输入

00:09:19.220 --> 00:09:25.730
流，基本上是UNIX上的HTTP 

00:09:22.310 --> 00:09:28.790
套接字和任何环境变量

00:09:25.730 --> 00:09:31.880
为该容器写入设置的

00:09:28.790 --> 00:09:37.339
回到HTTP流，并登录到

00:09:31.880 --> 00:09:39.980
 syslog，所以这是Ruby中的hello世界

00:09:37.339 --> 00:09:42.050
对于FM，我们要做的第一件事是

00:09:39.980 --> 00:09:43.399
需要功能的fdk 

00:09:42.050 --> 00:09:47.300
开发套件，我将详细讨论

00:09:43.399 --> 00:09:49.040
一秒钟，然后我们有我们的

00:09:47.300 --> 00:09:52.220
这里需要两个参数

00:09:49.040 --> 00:09:55.069
上下文和输入上下文是一种

00:09:52.220 --> 00:09:57.529
有关调用输入的元数据

00:09:55.069 --> 00:09:59.089
实际上在这种情况下，有效载荷

00:09:57.529 --> 00:10:01.399
检查看看我们是否有名字

00:09:59.089 --> 00:10:04.639
并打个招呼的名字，如果有的话

00:10:01.399 --> 00:10:08.569
我们打招呼的世界，然后是FD案

00:10:04.639 --> 00:10:12.560
调用handle方法执行

00:10:08.569 --> 00:10:15.110
功能现在你可以得到

00:10:12.560 --> 00:10:18.589
来自CLI的样板代码，然后您

00:10:15.110 --> 00:10:20.810
在其中执行FN-在此运行时Ruby 

00:10:18.589 --> 00:10:23.750
如果有其他人，你给它一个

00:10:20.810 --> 00:10:26.509
函数名称，然后部署

00:10:23.750 --> 00:10:28.430
在应用程序中以及在其中运行

00:10:26.509 --> 00:10:30.589
真的有点像一个名称空间

00:10:28.430 --> 00:10:33.500
函数，然后可以调用它

00:10:30.589 --> 00:10:37.970
使用命令行或此

00:10:33.500 --> 00:10:40.189
超难忘的友好网址

00:10:37.970 --> 00:10:42.880
实际上发生在部署过程中

00:10:40.189 --> 00:10:45.649
对容器进行多阶段构建

00:10:42.880 --> 00:10:47.899
当我们将其推送到注册表时，您可以

00:10:45.649 --> 00:10:50.870
如果您愿意，请使用docker hub，然后我们

00:10:47.899 --> 00:10:53.060
创建一个更新功能端点

00:10:50.870 --> 00:10:57.230
服务器将延迟加载图像

00:10:53.060 --> 00:10:58.790
需要时F衰减功能

00:10:57.230 --> 00:11:01.009
开发套件，使它们发挥作用

00:10:58.790 --> 00:11:03.500
编写函数更容易，因为

00:11:01.009 --> 00:11:05.600
在示例中，您要做的是包括

00:11:03.500 --> 00:11:07.370
包装或图书馆或宝石或

00:11:05.600 --> 00:11:10.069
你的语言叫什么

00:11:07.370 --> 00:11:13.220
关于您编写​​函数的事情

00:11:10.069 --> 00:11:14.870
该接口和F DK负责

00:11:13.220 --> 00:11:16.930
将输入数据提供给

00:11:14.870 --> 00:11:20.350
功能并写出任何

00:11:16.930 --> 00:11:23.320
目前我们的输出和错误

00:11:20.350 --> 00:11:28.300
 F作为Python项目的一部分而衰减

00:11:23.320 --> 00:11:32.529
 Ruby Java节点和dotnet核心是

00:11:28.300 --> 00:11:36.580
最近加了，为了我的罪过

00:11:32.529 --> 00:11:39.220
以fdk的方式维护Ruby fdk 

00:11:36.580 --> 00:11:41.800
工程它打开里面的插座

00:11:39.220 --> 00:11:44.740
功能容器和FN服务器

00:11:41.800 --> 00:11:47.170
然后将fdk连接到该套接字

00:11:44.740 --> 00:11:48.730
传递来自HTTP流的输入并

00:11:47.170 --> 00:11:51.130
执行赋予它的功能

00:11:48.730 --> 00:11:54.790
在上下文中输入并发送回

00:11:51.130 --> 00:11:57.100
输出并记录任何错误（如果不这样做） 

00:11:54.790 --> 00:11:59.500
为您的语言准备一个FD K 

00:11:57.100 --> 00:12:01.680
没问题，因为它基于

00:11:59.500 --> 00:12:05.649
码头工人，你有几个选择

00:12:01.680 --> 00:12:08.110
实际上是三个，所以最简单的一个是

00:12:05.649 --> 00:12:10.300
带上自己的docker文件，FN将

00:12:08.110 --> 00:12:13.810
在该docker文件上构建函数或

00:12:10.300 --> 00:12:16.420
您可以带来自己的形象，FN将

00:12:13.810 --> 00:12:20.620
让您基于此构建函数

00:12:16.420 --> 00:12:23.230
形象您可以做的另一件事是使用

00:12:20.620 --> 00:12:24.850
所谓的热包裹，所以如果你有

00:12:23.230 --> 00:12:28.060
从命令运行的程序

00:12:24.850 --> 00:12:31.720
行，您可以将其放入docker文件中

00:12:28.060 --> 00:12:34.410
然后包含热包装二进制文件

00:12:31.720 --> 00:12:37.660
作为构建过程的一部分， 

00:12:34.410 --> 00:12:40.420
有效地将输入

00:12:37.660 --> 00:12:42.339
从HTTP流并将其传递给您

00:12:40.420 --> 00:12:44.140
标准摄入量程序

00:12:42.339 --> 00:12:49.690
程序返回标准输出并发送

00:12:44.140 --> 00:12:52.690
它返回HTTP流，所以从热包装

00:12:49.690 --> 00:12:54.520
我们去热门功能，所以我说我们

00:12:52.690 --> 00:12:58.180
功能是短暂的，他们实际上

00:12:54.520 --> 00:12:59.800
至少运行一次，然后运行一次

00:12:58.180 --> 00:13:02.470
他们经过了短暂的等待

00:12:59.800 --> 00:13:05.950
默认终止是30秒，但

00:13:02.470 --> 00:13:07.779
这是可配置的，如果您得到

00:13:05.950 --> 00:13:10.150
函数之前的另一个调用

00:13:07.779 --> 00:13:12.339
超时，那么我们将重用

00:13:10.150 --> 00:13:15.100
容器而不是旋转

00:13:12.339 --> 00:13:17.770
另一个这样的功能容器

00:13:15.100 --> 00:13:20.410
具有潜在的可重用性，并且

00:13:17.770 --> 00:13:22.839
需要处理多个邀请，因为

00:13:20.410 --> 00:13:24.220
好吧，这也是另一个很好的理由

00:13:22.839 --> 00:13:25.930
确保您的功能是无状态的

00:13:24.220 --> 00:13:27.430
因为如果有后续

00:13:25.930 --> 00:13:29.810
调用你不需要的东西

00:13:27.430 --> 00:13:33.890
从前一个徘徊

00:13:29.810 --> 00:13:36.680
就像我说的那样会引起问题

00:13:33.890 --> 00:13:39.440
在FN部署创建默认结束之前

00:13:36.680 --> 00:13:41.900
用非友好网址指向

00:13:39.440 --> 00:13:44.870
由CLI使用，您将获得其中之一

00:13:41.900 --> 00:13:47.870
根据功能部署，我们还有

00:13:44.870 --> 00:13:50.360
触发器的概念，因此您可以使用

00:13:47.870 --> 00:13:53.839
引发更难忘的回忆或

00:13:50.360 --> 00:13:55.490
对人类有用的有意义的URL 

00:13:53.839 --> 00:13:57.110
这些的倍数，所以你可能有

00:13:55.490 --> 00:13:59.990
针对不同受众的不同URL 

00:13:57.110 --> 00:14:03.200
您可以在

00:13:59.990 --> 00:14:06.370
使用CLI或func Yamma进行飞行

00:14:03.200 --> 00:14:10.580
这是函数的描述符

00:14:06.370 --> 00:14:13.250
 FN服务器是API网关，所以它

00:14:10.580 --> 00:14:15.050
管理应用程序和功能

00:14:13.250 --> 00:14:17.570
说应用程序基本上是一个命名空间

00:14:15.050 --> 00:14:21.050
一堆功能，它处理

00:14:17.570 --> 00:14:23.300
假期功能本身运行

00:14:21.050 --> 00:14:26.810
作为容器，它承载功能

00:14:23.300 --> 00:14:28.730
在docker中使用docker的容器

00:14:26.810 --> 00:14:30.680
意味着如果出现问题，我们已经

00:14:28.730 --> 00:14:33.170
限制了我们不影响的爆炸半径

00:14:30.680 --> 00:14:35.690
 N之外的意思是

00:14:33.170 --> 00:14:37.400
我们不是那么依赖

00:14:35.690 --> 00:14:38.870
 Docker版本在主机中

00:14:37.400 --> 00:14:40.610
环境，因为我们可以拥有

00:14:38.870 --> 00:14:43.100
内部不同的docker版本

00:14:40.610 --> 00:14:46.280
并且减少了容器的机会

00:14:43.100 --> 00:14:47.960
生产中的名称冲突

00:14:46.280 --> 00:14:49.760
通常您通常会运行

00:14:47.960 --> 00:14:52.400
在古巴ATS上，但您负担很重

00:14:49.760 --> 00:14:54.950
平衡器，那么您将拥有一组FN 

00:14:52.400 --> 00:14:56.690
您指向的服务器实例

00:14:54.950 --> 00:14:59.270
容器注册表也有一个

00:14:56.690 --> 00:15:03.050
数据数据库的对象存储和数据

00:14:59.270 --> 00:15:04.850
用于元数据和请求过程

00:15:03.050 --> 00:15:09.080
像这样的要求

00:15:04.850 --> 00:15:11.240
在您将其路由到FN服务器并

00:15:09.080 --> 00:15:13.760
然后它检查并说我已经

00:15:11.240 --> 00:15:16.190
有一个正在运行的，如果我

00:15:13.760 --> 00:15:19.190
我是否可以将请求发送给

00:15:16.190 --> 00:15:20.750
不，我会把它旋转起来

00:15:19.190 --> 00:15:23.900
知道了，我必须将其从

00:15:20.750 --> 00:15:26.540
存储库，然后您知道发送

00:15:23.900 --> 00:15:29.120
业务数据返回给呼叫者并放入

00:15:26.540 --> 00:15:33.290
日志等的任何信息进入

00:15:29.120 --> 00:15:36.080
对象存储现在我说了我们的功能

00:15:33.290 --> 00:15:37.910
很小，所以不太可能是

00:15:36.080 --> 00:15:40.190
能够做大生意

00:15:37.910 --> 00:15:41.520
一个功能的操作，所以我们需要一个

00:15:40.190 --> 00:15:44.310
通向

00:15:41.520 --> 00:15:47.930
您精心安排他们一起努力

00:15:44.310 --> 00:15:51.090
做有意义的业务任务， 

00:15:47.930 --> 00:15:53.970
在FN中，这就是所谓的流

00:15:51.090 --> 00:15:56.460
这是一个基于承诺的编排

00:15:53.970 --> 00:15:59.490
您不必学习新的方言

00:15:56.460 --> 00:16:01.950
 yanil或xml或类似的东西，以及

00:15:59.490 --> 00:16:05.040
它给你的是一种构成方式

00:16:01.950 --> 00:16:07.800
您的功能结合起来非常灵活

00:16:05.040 --> 00:16:09.330
您可以串联运行这些功能

00:16:07.800 --> 00:16:10.710
可以并行运行，可以运行

00:16:09.330 --> 00:16:13.590
同步Doak和runni 

00:16:10.710 --> 00:16:16.440
异步，您的流程将是

00:16:13.590 --> 00:16:18.690
用Java语言编写的代码，例如eat 

00:16:16.440 --> 00:16:20.730
本身是作为一个函数编写的， 

00:16:18.690 --> 00:16:23.160
作为功​​能部署在

00:16:20.730 --> 00:16:25.650
应用程序，所以如果你想

00:16:23.160 --> 00:16:27.330
可以把业务逻辑放在这里，但我

00:16:25.650 --> 00:16:29.100
真的建议不要这样做

00:16:27.330 --> 00:16:30.330
认为指挥应该指挥和

00:16:29.100 --> 00:16:35.370
乐器演奏者应该演奏

00:16:30.330 --> 00:16:37.470
工具，例如我们可以使用

00:16:35.370 --> 00:16:38.970
实施传奇的流程

00:16:37.470 --> 00:16:40.530
您经营业务的模式

00:16:38.970 --> 00:16:42.930
分散的交易

00:16:40.530 --> 00:16:44.700
您无法使用的多种服务

00:16:42.930 --> 00:16:47.580
像两阶段提交这样的东西，所以你

00:16:44.700 --> 00:16:50.640
有一套本地服务水平

00:16:47.580 --> 00:16:53.400
每个交易都会触发下一个交易

00:16:50.640 --> 00:16:55.170
事件和失败时，您将撤消

00:16:53.400 --> 00:16:57.660
以前的交易而不是

00:16:55.170 --> 00:17:03.240
回滚，所以说应用学分

00:16:57.660 --> 00:17:06.720
借方，所以我们可能有FN 

00:17:03.240 --> 00:17:08.640
充当我们的旅行社，所以在旅行中

00:17:06.720 --> 00:17:11.580
佐贺我们想去度假我们想要一个

00:17:08.640 --> 00:17:13.020
酒店，汽车和航班，所以我们开始

00:17:11.580 --> 00:17:15.180
通过预订航班（如果失败） 

00:17:13.020 --> 00:17:16.800
我们会停下来，否则我们将预订

00:17:15.180 --> 00:17:18.810
酒店，如果失败，我们需要取消

00:17:16.800 --> 00:17:21.810
飞行是补偿步骤

00:17:18.810 --> 00:17:23.520
否则我们会订车，如果那

00:17:21.810 --> 00:17:25.230
失败，我们需要取消酒店，并且

00:17:23.520 --> 00:17:28.290
否则我们要继续

00:17:25.230 --> 00:17:32.100
假期，所以代码看起来

00:17:28.290 --> 00:17:33.660
这样的事情，所以我们有一个你

00:17:32.100 --> 00:17:35.790
看不到那里我们有航班

00:17:33.660 --> 00:17:37.980
未来在那里，我们有一个旅馆的未来

00:17:35.790 --> 00:17:39.960
我们有汽车的未来，然后我们

00:17:37.980 --> 00:17:41.460
将它们组合在一起，所以我们从

00:17:39.960 --> 00:17:44.280
未来的飞行，然后我们去

00:17:41.460 --> 00:17:47.030
酒店，然后车，如果一切

00:17:44.280 --> 00:17:50.400
作品，我们收到成功电子邮件

00:17:47.030 --> 00:17:52.350
否则我们会特别

00:17:50.400 --> 00:17:54.540
撰写，我们将首先重试

00:17:52.350 --> 00:17:58.620
然后取消每个功能

00:17:54.540 --> 00:18:00.030
以便最后

00:17:58.620 --> 00:18:02.520
去度假，否则一切都会

00:18:00.030 --> 00:18:05.970
 Flo有语言时取消

00:18:02.520 --> 00:18:09.330
支持Java和Python以及node go 

00:18:05.970 --> 00:18:10.130
正在开发中，而Ruby正在我的工作中

00:18:09.330 --> 00:18:14.820
清单

00:18:10.130 --> 00:18:17.790
所以总结服务是一种使用方式

00:18:14.820 --> 00:18:20.880
抽象以简化我们的工作

00:18:17.790 --> 00:18:23.730
应该提高开发人员的生产力吗

00:18:20.880 --> 00:18:25.590
应该降低我们的成本，并在许多方面

00:18:23.730 --> 00:18:28.010
有可能成为统治者

00:18:25.590 --> 00:18:31.110
开发新应用程序的范例

00:18:28.010 --> 00:18:34.470
但您应该选择使用

00:18:31.110 --> 00:18:39.660
照顾，因为在某种程度上

00:18:34.470 --> 00:18:42.270
镀金的笼子，FM项目是

00:18:39.660 --> 00:18:44.970
开源服务平台

00:18:42.270 --> 00:18:47.730
便携式，您可以在任何地方运行它

00:18:44.970 --> 00:18:50.820
与语言无关的它具有多个F DK 

00:18:47.730 --> 00:18:53.970
内置的反馈和贡献是

00:18:50.820 --> 00:18:56.490
如果您想了解更多FM，欢迎您

00:18:53.970 --> 00:18:58.440
项目点IO我们有些懈怠

00:18:56.490 --> 00:19:01.200
工作区那里的友好社区

00:18:58.440 --> 00:19:05.250
您可以在Twitter上关注我们或查看我们

00:19:01.200 --> 00:19:07.350
甚至在github上做出贡献谢谢

00:19:05.250 --> 00:19:08.370
你非常我的名字叫联合国斯莱特

00:19:07.350 --> 00:19:11.290
如果你想和我联系

00:19:08.370 --> 00:19:18.559
 Twitter可能是最简单的方法

00:19:11.290 --> 00:19:20.699
 [掌声] 

00:19:18.559 --> 00:19:23.070
听众没有问题

00:19:20.699 --> 00:19:27.119
但是我自己一个人

00:19:23.070 --> 00:19:29.820
你如何控制码头工人的数量

00:19:27.119 --> 00:19:37.039
我们的FN服务器可以使用的容器

00:19:29.820 --> 00:19:39.719
旋转，以便在服务器内可以

00:19:37.039 --> 00:19:41.009
配置你知道你在想什么

00:19:39.719 --> 00:19:44.009
关于多少内存和多少

00:19:41.009 --> 00:19:45.479
资源会消耗掉，是的，你

00:19:44.009 --> 00:19:49.949
可以为码头工人配置

00:19:45.479 --> 00:19:53.539
 FN服务器的容器还可以

00:19:49.949 --> 00:19:53.539
谢谢，让我们再次感谢

00:19:59.740 --> 00:20:01.800
您

