WEBVTT
Kind: captions
Language: zh-Hans

00:00:03.630 --> 00:00:09.700
欢迎来到神话破坏者，为什么奇怪

00:00:07.630 --> 00:00:12.849
重量级的会议标题vs 

00:00:09.700 --> 00:00:14.590
轻巧的，因为我得到了

00:00:12.849 --> 00:00:17.230
实际上一直在提问

00:00:14.590 --> 00:00:20.109
昨天有人在推特上说

00:00:17.230 --> 00:00:21.699
会议中有人表示Java也是如此

00:00:20.109 --> 00:00:23.800
沉重的重量，这实际上意味着什么

00:00:21.699 --> 00:00:27.069
我不知道问演讲者我没有

00:00:23.800 --> 00:00:28.989
知道这意味着什么，在项目中我可以

00:00:27.069 --> 00:00:30.220
一遍又一遍地告诉你故事

00:00:28.989 --> 00:00:32.110
他们想要的一个项目

00:00:30.220 --> 00:00:34.540
微服务作为他们拥有的庞大商店

00:00:32.110 --> 00:00:36.490
数百个Java EE应用程序

00:00:34.540 --> 00:00:38.890
我的意思是真正的Java应用程序

00:00:36.490 --> 00:00:40.630
表示应用程序服务器，然后说

00:00:38.890 --> 00:00:42.520
全部用于微服务，将无法正常工作

00:00:40.630 --> 00:00:45.160
不再是这个想法了

00:00:42.520 --> 00:00:46.900
码头，我被问到如何做到这一点

00:00:45.160 --> 00:00:49.540
看这是好地方

00:00:46.900 --> 00:00:52.300
一生为我工作，因为那时你

00:00:49.540 --> 00:00:53.830
知道我们必须跳码头才能工作

00:00:52.300 --> 00:00:55.030
就像带有

00:00:53.830 --> 00:00:57.250
依赖注入和其他一切

00:00:55.030 --> 00:00:58.810
问题是我们将获得的成就

00:00:57.250 --> 00:01:00.670
你真的相信，如果我愿意你

00:00:58.810 --> 00:01:02.500
为您了解斑驳码头

00:01:00.670 --> 00:01:04.360
表现得像假冒的应用程序服务器

00:01:02.500 --> 00:01:05.619
一天的结束，我将成为

00:01:04.360 --> 00:01:08.259
比你知道的还要聪明

00:01:05.619 --> 00:01:09.460
飞行或PI R或Thome小组和老鼠

00:01:08.259 --> 00:01:11.289
应用服务器将是

00:01:09.460 --> 00:01:13.149
较小，他们说实际上没事

00:01:11.289 --> 00:01:16.569
发生了什么事

00:01:13.149 --> 00:01:19.719
他们在演讲后抛弃的情况

00:01:16.569 --> 00:01:21.429
码头，他们和帕亚拉傻瓜一起去了

00:01:19.719 --> 00:01:23.979
这种情况在其他生产中

00:01:21.429 --> 00:01:27.249
项目白班傻瓜或托米加

00:01:23.979 --> 00:01:29.319
我没用过的是你现在明白为什么

00:01:27.249 --> 00:01:31.869
话语之后，一切都是网络

00:01:29.319 --> 00:01:33.639
个人资料，因为没有可衡量的

00:01:31.869 --> 00:01:35.380
如果我做不到，我的项目就会有所不同

00:01:33.639 --> 00:01:37.209
措施我不喜欢这样的优化

00:01:35.380 --> 00:01:40.899
所以我总是使用完整的应用程序

00:01:37.209 --> 00:01:42.880
服务器，甚至我认为，即使有

00:01:40.899 --> 00:01:46.539
在Raspberry Pi上运行还是不运行

00:01:42.880 --> 00:01:49.119
有所作为，所以它带来了巨大的变化

00:01:46.539 --> 00:01:51.249
应用的区别

00:01:49.119 --> 00:01:53.709
服务器供应商，因为如果他们必须

00:01:51.249 --> 00:01:55.810
提供他们拥有的完整平台

00:01:53.709 --> 00:01:57.130
他们要做很多工作

00:01:55.810 --> 00:02:00.399
没人关心的旧东西

00:01:57.130 --> 00:02:01.749
我在窗下好吗， 

00:02:00.399 --> 00:02:03.849
应用程序服务的用户

00:02:01.749 --> 00:02:05.469
我我忘了提当然可以

00:02:03.849 --> 00:02:07.950
在任何时候问我问题

00:02:05.469 --> 00:02:07.950
第一个问题

00:02:10.709 --> 00:02:18.579
是的，我们将在此期间看一下

00:02:16.180 --> 00:02:20.980
会议上，我将发动一群

00:02:18.579 --> 00:02:22.629
 PR一群，如果还有其他一群

00:02:20.980 --> 00:02:27.310
我们可以启动任何可访问的

00:02:22.629 --> 00:02:29.650
正确并测量这一点，是的，还有什么

00:02:27.310 --> 00:02:31.930
我通常这样做很危险

00:02:29.650 --> 00:02:33.909
参与这样的讨论，因为如果

00:02:31.930 --> 00:02:35.139
你开始争论什么是

00:02:33.909 --> 00:02:37.239
重量轻巧的这是

00:02:35.139 --> 00:02:39.400
无休止的会议，我的意思是

00:02:37.239 --> 00:02:41.379
没有胜利者，那么我们该怎么办

00:02:39.400 --> 00:02:42.730
会议马上回家

00:02:41.379 --> 00:02:45.159
概念验证创建读取更新

00:02:42.730 --> 00:02:47.290
用性能测试手段删除

00:02:45.159 --> 00:02:49.389
结果，说看这些是

00:02:47.290 --> 00:02:52.060
数字，现在您可以决定知道

00:02:49.389 --> 00:02:53.650
值得保存，我不知道五个品牌

00:02:52.060 --> 00:02:56.620
二十使五百梅格成为极客

00:02:53.650 --> 00:02:59.409
或其他什么，如果有人说，如果

00:02:56.620 --> 00:03:01.629
我们这样做可以节省五千美元

00:02:59.409 --> 00:03:02.799
或两万美元，那不是

00:03:01.629 --> 00:03:05.709
还是可以，但是我的内no 

00:03:02.799 --> 00:03:07.810
决定悲伤的故事是，如果你这样做

00:03:05.709 --> 00:03:10.269
您将始终坚持申请

00:03:07.810 --> 00:03:11.980
服务，所以如果您愿意

00:03:10.269 --> 00:03:16.959
生活更加精彩

00:03:11.980 --> 00:03:19.120
实验不做我该做的

00:03:16.959 --> 00:03:20.949
我有一个网络博客，并在研讨会中

00:03:19.120 --> 00:03:22.989
这很有趣，所以

00:03:20.949 --> 00:03:24.609
喜欢问题和答案，然后在

00:03:22.989 --> 00:03:27.549
最后一个月的第一个星期一

00:03:24.609 --> 00:03:32.019
欧洲中部时间下午6点，我忘记了实际上是什么

00:03:27.549 --> 00:03:33.669
听到我们减去9个小时，我想，我

00:03:32.019 --> 00:03:35.859
没有时间通过​​回答问题

00:03:33.669 --> 00:03:39.069
电子邮件，所以我可以进行直播

00:03:35.859 --> 00:03:41.109
有人问我他们用这种方式

00:03:39.069 --> 00:03:44.470
就像来自whitefly的HTTP服务器

00:03:41.109 --> 00:03:46.479
他们只想拥有

00:03:44.470 --> 00:03:48.699
在jax-rs中露面，他们很漂亮

00:03:46.479 --> 00:03:51.549
远，但这取决于依赖性

00:03:48.699 --> 00:03:53.019
注射无效，所以我想

00:03:51.549 --> 00:03:54.729
没时间回答我有什么兴趣

00:03:53.019 --> 00:03:57.040
他们花了多少时间进行优化

00:03:54.729 --> 00:03:58.659
这，如果他们准备好了，它将

00:03:57.040 --> 00:04:00.280
他们首先遇到什么问题

00:03:58.659 --> 00:04:02.019
这将是

00:04:00.280 --> 00:04:03.900
仅用于项目的技术

00:04:02.019 --> 00:04:06.099
创建了自己的应用程序服务器， 

00:04:03.900 --> 00:04:07.930
我们已经很有趣的看到了什么

00:04:06.099 --> 00:04:10.539
该应用服务器是否为

00:04:07.930 --> 00:04:12.909
更快或更小或更轻

00:04:10.539 --> 00:04:15.549
比实际的白色意味着什么

00:04:12.909 --> 00:04:17.409
行，所以我问他们为什么不开始

00:04:15.549 --> 00:04:19.409
白飞，然后删除任何内容

00:04:17.409 --> 00:04:22.510
你不喜欢为什么创建自己的

00:04:19.409 --> 00:04:27.670
不，没有答案，因为正确

00:04:22.510 --> 00:04:29.710
容易做到这一点好吧，所以我开始

00:04:27.670 --> 00:04:30.730
总是带有定义，因为有人

00:04:29.710 --> 00:04:32.950
重量轻巧的这是

00:04:30.730 --> 00:04:35.050
我刚开了一对字典

00:04:32.950 --> 00:04:39.280
屏幕截图及其重量级

00:04:35.050 --> 00:04:42.310
没关系，拳击不适用于

00:04:39.280 --> 00:04:44.590
超过平均重量的应用服务器

00:04:42.310 --> 00:04:47.860
这可能是最有趣的故事

00:04:44.590 --> 00:04:50.440
形容词这个非常重要的

00:04:47.860 --> 00:04:52.090
有影响力的这将是沉重的

00:04:50.440 --> 00:04:55.120
那里很好，如果可以，那么Java是

00:04:52.090 --> 00:04:58.720
非常重，好吧，否则

00:04:55.120 --> 00:05:00.550
轻巧意味着有时候是你

00:04:58.720 --> 00:05:03.490
知道这是业余拳击秤

00:05:00.550 --> 00:05:06.700
它的重量从57到60公斤不等

00:05:03.490 --> 00:05:09.520
形容词手段缺乏严肃性

00:05:06.700 --> 00:05:11.770
深度或影响力使之有趣

00:05:09.520 --> 00:05:13.180
相当轻巧，这就是我所看到的

00:05:11.770 --> 00:05:13.630
我看到的所有这些解决方案是

00:05:13.180 --> 00:05:17.500
轻巧的

00:05:13.630 --> 00:05:21.370
他们很有趣，但是

00:05:17.500 --> 00:05:24.190
轻巧意味着没有意义，所以

00:05:21.370 --> 00:05:26.260
嗯，如果你来参加项目并说是

00:05:24.190 --> 00:05:29.830
太重了，我在项目中

00:05:26.260 --> 00:05:32.980
我会问你几点启动时间

00:05:29.830 --> 00:05:37.590
下载大小CPU开销你是什么

00:05:32.980 --> 00:05:40.990
的意思是或者这仅仅是行销对不起

00:05:37.590 --> 00:05:46.510
好吧，这是最后一盏灯

00:05:40.990 --> 00:05:48.640
只是一些工作坊，这是最后一个

00:05:46.510 --> 00:05:50.140
行谢谢你，所以问题是我

00:05:48.640 --> 00:05:51.520
想做的就是开始一些

00:05:50.140 --> 00:05:53.500
应用服务就像

00:05:51.520 --> 00:05:56.200
你，并衡量这一点，问题是

00:05:53.500 --> 00:05:58.150
我们得到一些数字，所以应用

00:05:56.200 --> 00:06:00.040
服务器已满，我将使用已满，我

00:05:58.150 --> 00:06:02.710
总是使用micros，因为你问

00:06:00.040 --> 00:06:05.830
所以问题是我们应该怎么做

00:06:02.710 --> 00:06:08.260
比较我的意思是，如果这

00:06:05.830 --> 00:06:09.730
出来的是重量级的

00:06:08.260 --> 00:06:12.000
比较正确的东西

00:06:09.730 --> 00:06:16.180
这是轻量级的

00:06:12.000 --> 00:06:19.530
嗯，它也会使用工程，所以

00:06:16.180 --> 00:06:23.590
已经有什么，还有什么

00:06:19.530 --> 00:06:25.840
是的，Tomcat太无聊了

00:06:23.590 --> 00:06:30.010
要做的就是创造最终的微

00:06:25.840 --> 00:06:32.560
服务什么，WebLogic II拥有什么

00:06:30.010 --> 00:06:33.970
它，但我没有最新版本，但是

00:06:32.560 --> 00:06:36.050
我曾经测量过，所以我会告诉

00:06:33.970 --> 00:06:39.340
我可以尝试启动它的数字，但是

00:06:36.050 --> 00:06:41.479
长时间没有启动它WebLogic 

00:06:39.340 --> 00:06:46.669
下降向导是的，我什至会做什么

00:06:41.479 --> 00:06:48.289
更糟糕的是我会提供白色

00:06:46.669 --> 00:06:50.389
白少耶

00:06:48.289 --> 00:06:51.770
白色少或重量轻，绝对

00:06:50.389 --> 00:06:53.139
没有意义，所以我想做什么

00:06:51.770 --> 00:06:55.190
是创造最终

00:06:53.139 --> 00:06:58.940
微服务实际的一个太监上校

00:06:55.190 --> 00:07:00.470
我将以一个罐子开始

00:06:58.940 --> 00:07:12.020
最终的事情将是Java C项目

00:07:00.470 --> 00:07:13.130
并称它为白色主哦，我希望

00:07:12.020 --> 00:07:17.150
这是正确的

00:07:13.130 --> 00:07:19.370
这没什么，只是一个

00:07:17.150 --> 00:07:22.580
泵，我想做的是

00:07:19.370 --> 00:07:28.699
想要创建一个Java类，并

00:07:22.580 --> 00:07:36.050
冷静点吧，谢谢娜娜

00:07:28.699 --> 00:07:42.669
然后是一种主要的方法public public 

00:07:36.050 --> 00:07:46.969
静态void main和serverocket权利

00:07:42.669 --> 00:07:52.940
假设1990年不是

00:07:46.969 --> 00:07:57.770
使用新的并销毁一些异常

00:07:52.940 --> 00:08:03.430
可变插座，然后是Zorka点

00:07:57.770 --> 00:08:06.069
接受我得到的是插座和

00:08:03.430 --> 00:08:08.870
至少是双重块，所以我们可以测量

00:08:06.069 --> 00:08:11.169
它会收到多少异想天开，我

00:08:08.870 --> 00:08:13.279
会说不管你在做什么

00:08:11.169 --> 00:08:15.199
这是绝对的轻量化

00:08:13.279 --> 00:08:17.419
那里不会有其他下落

00:08:15.199 --> 00:08:19.279
用我们的Tomcats nanos或其他任何东西

00:08:17.419 --> 00:08:19.909
小于这个，所以这是我们的

00:08:19.279 --> 00:08:21.349
参考

00:08:19.909 --> 00:08:24.770
最小的服务器

00:08:21.349 --> 00:08:28.490
单线像笔记，但

00:08:24.770 --> 00:08:30.409
小服务器同意，所以我认为这是

00:08:28.490 --> 00:08:33.409
这是合理的

00:08:30.409 --> 00:08:38.599
这是套接字，抱歉，这叫做

00:08:33.409 --> 00:08:43.820
屁股和屁股滚滚滚滚滚滚而来

00:08:38.599 --> 00:08:49.800
猜对然后对

00:08:43.820 --> 00:08:52.350
白色少获取字节我认为应该

00:08:49.800 --> 00:08:56.040
工作，所以我会建立蚂蚁或只是

00:08:52.350 --> 00:09:01.770
转到命令行，这是垃圾

00:08:56.040 --> 00:09:05.779
文件夹没有没有Maven包，那么我们

00:09:01.770 --> 00:09:09.570
应该让T达到目标，我说Java 

00:09:05.779 --> 00:09:13.140
减去CP，这不是可执行目标

00:09:09.570 --> 00:09:17.160
这是什么，这是平静的

00:09:13.140 --> 00:09:19.320
空气六角，我认为纳米是正确的

00:09:17.160 --> 00:09:23.130
曾经很酷的权利

00:09:19.320 --> 00:09:24.570
这是未来的纳米服务，所以如果

00:09:23.130 --> 00:09:28.050
你想不出名

00:09:24.570 --> 00:09:29.700
会议发言人没有依赖性

00:09:28.050 --> 00:09:31.110
离开一切都落在你身上

00:09:29.700 --> 00:09:34.740
向导们说你的申请

00:09:31.110 --> 00:09:39.990
服务器要重量级使用此

00:09:34.740 --> 00:09:42.050
然后J visual VM启动它，你做什么

00:09:39.990 --> 00:09:42.050
期望

00:09:48.580 --> 00:09:55.010
所以它使用尺寸25 

00:09:52.580 --> 00:09:58.810
总消耗量最大为250， 

00:09:55.010 --> 00:10:01.340
现在它使用60 16 MB的RAM 

00:09:58.810 --> 00:10:03.640
所以不管我们是什么意思

00:10:01.340 --> 00:10:05.150
这样做永远不会比这更好

00:10:03.640 --> 00:10:07.940
大家都同意

00:10:05.150 --> 00:10:10.640
所以是JD k-19我可以做一些条纹

00:10:07.940 --> 00:10:13.250
与模块装载机的问题是

00:10:10.640 --> 00:10:14.840
如果我有这样的问题

00:10:13.250 --> 00:10:17.420
应用服务器应该在

00:10:14.840 --> 00:10:18.920
苹果手表正确，否则我们会认真对待

00:10:17.420 --> 00:10:22.580
预算问题，因为我知道

00:10:18.920 --> 00:10:24.770
我们，但在德国，我可以购买64 GB 

00:10:22.580 --> 00:10:28.220
服务器的ECC Ram数量约为400 

00:10:24.770 --> 00:10:31.450
欧元，所以如果我运行性能

00:10:28.220 --> 00:10:33.620
垃圾收集器，您看到它是7兆欧

00:10:31.450 --> 00:10:36.110
但我必须经常运行

00:10:33.620 --> 00:10:39.350
因为没有压力所以它将

00:10:36.110 --> 00:10:41.240
永远不要为此优化所有人

00:10:39.350 --> 00:10:43.640
同意好的实验权，这

00:10:41.240 --> 00:10:52.330
应该实际工作，所以如果我去这里， 

00:10:43.640 --> 00:11:03.320
说Curl Curl让我们看看localhost是什么

00:10:52.330 --> 00:11:04.730
 1980年会很酷，你看如何

00:11:03.320 --> 00:11:07.820
轻量级的Java是带注释的尝试

00:11:04.730 --> 00:11:11.570
更多代码否，并且使用Java SE淘汰了

00:11:07.820 --> 00:11:13.250
的盒子现在的应用服务器，所以

00:11:11.570 --> 00:11:13.850
对我来说最容易的是启动白色玻璃瓶

00:11:13.250 --> 00:11:15.560
帕亚拉

00:11:13.850 --> 00:11:17.960
因为我有它们并在其中逗乐

00:11:15.560 --> 00:11:20.000
项目，所以这是白色的航班n-1 

00:11:17.960 --> 00:11:21.800
满是当前的一个，有11个

00:11:20.000 --> 00:11:23.690
东西，但这是全薪

00:11:21.800 --> 00:11:27.890
您可以下载payara白色航班

00:11:23.690 --> 00:11:30.500
如果你去白蝇，那么我们可以

00:11:27.890 --> 00:11:32.720
立即检查实例下载

00:11:30.500 --> 00:11:34.040
以及我使用的所有应用程序

00:11:32.720 --> 00:11:37.730
分配我用完整的

00:11:34.040 --> 00:11:40.700
最大最大当然十一个全

00:11:37.730 --> 00:11:44.300
网络和发行，有134 

00:11:40.700 --> 00:11:47.540
兆字节下载大小，所以这是

00:11:44.300 --> 00:11:50.990
最大可用白光

00:11:47.540 --> 00:11:53.980
也都在150左右

00:11:50.990 --> 00:11:56.180
您发现一项技术将永远

00:11:53.980 --> 00:11:58.370
希望比这个小

00:11:56.180 --> 00:12:00.440
是我们有问题吗

00:11:58.370 --> 00:12:01.280
就像你知道5张iPhone图片一样

00:12:00.440 --> 00:12:03.800
说

00:12:01.280 --> 00:12:06.890
好的，其他所有下载

00:12:03.800 --> 00:12:09.500
通常比某些iPhone大

00:12:06.890 --> 00:12:11.570
应用大于150 EPS，因此

00:12:09.500 --> 00:12:13.040
问题是什么问题，我

00:12:11.570 --> 00:12:14.930
经常在Docker映像中构建它们

00:12:13.040 --> 00:12:16.790
甚至下载大小也不是

00:12:14.930 --> 00:12:18.830
问题，但因此我使用最大的

00:12:16.790 --> 00:12:21.110
例如，如果你看这里

00:12:18.830 --> 00:12:23.480
 servlet只有28 

00:12:21.110 --> 00:12:25.880
只是servlet，但我从未见过

00:12:23.480 --> 00:12:27.470
我项目中生产中的servlet 

00:12:25.880 --> 00:12:29.420
我有时我们会建立负载平衡器

00:12:27.470 --> 00:12:32.000
仅使用servlet，但我的意思通常是

00:12:29.420 --> 00:12:33.740
您还需要其他东西

00:12:32.000 --> 00:12:35.660
意味着这里的参考是28混合

00:12:33.740 --> 00:12:39.770
对，所以它是最小的

00:12:35.660 --> 00:12:42.620
白光好，所以现在我开始

00:12:39.770 --> 00:12:44.600
这没有一点

00:12:42.620 --> 00:12:46.490
作弊，但他们在欺骗

00:12:44.600 --> 00:12:51.440
我的缺点是因为这只白蝇

00:12:46.490 --> 00:12:53.600
我已经有这个最高的监控了

00:12:51.440 --> 00:12:55.730
设置，所以有最大的开销，所以

00:12:53.600 --> 00:12:59.570
我们在这里测量的DD是

00:12:55.730 --> 00:13:03.820
可能所有的一切，让我们去这里

00:12:59.570 --> 00:13:08.080
视觉，我们在这里看到JBoss完整

00:13:03.820 --> 00:13:12.860
单击以监视，我们看到使用了87 Meg 

00:13:08.080 --> 00:13:15.680
无需任何更改即可执行GC我们看到了

00:13:12.860 --> 00:13:19.280
下降到40 Meg我们在Java中所拥有的

00:13:15.680 --> 00:13:21.350
是五个梅格的权利或六个七的权利

00:13:19.280 --> 00:13:22.850
这意味着什么很好，所以我们有

00:13:21.350 --> 00:13:25.850
确切地说，否则你知道我

00:13:22.850 --> 00:13:29.300
遇到很多麻烦所以我们有七个

00:13:25.850 --> 00:13:34.580
 Java SE的最大提升

00:13:29.300 --> 00:13:36.770
空闲时间会增加，因为

00:13:34.580 --> 00:13:39.140
附带X的盒子

00:13:36.770 --> 00:13:41.810
设置，这样可以减轻压力

00:13:39.140 --> 00:13:43.280
 JVM让垃圾变成垃圾，那我该怎么办

00:13:41.810 --> 00:13:46.130
要做的就是使其具有可比性

00:13:43.280 --> 00:13:48.740
删除所有设置，然后将

00:13:46.130 --> 00:13:52.310
少点，但我们看看我是否执行垃圾

00:13:48.740 --> 00:13:54.620
收集，然后大约是35兆，所以

00:13:52.310 --> 00:13:58.070
这意味着我们可以节省30 MB的RAM 

00:13:54.620 --> 00:14:00.950
现在我的生产中每个微服务

00:13:58.070 --> 00:14:02.930
项目我们最多有20个

00:14:00.950 --> 00:14:04.370
服务将意味着20个团队

00:14:02.930 --> 00:14:06.980
是独立的，这意味着完全

00:14:04.370 --> 00:14:07.520
在我的客户中设置可以节省600个混音

00:14:06.980 --> 00:14:10.339
的RAM 

00:14:07.520 --> 00:14:12.470
现在想像我，说忘记你的

00:14:10.339 --> 00:14:14.660
应用服务我们应该更多

00:14:12.470 --> 00:14:17.150
轻量的，如果我们这样做，它是

00:14:14.660 --> 00:14:21.650
几天，我们将节省一次

00:14:17.150 --> 00:14:22.940
大约600混合在米和主要

00:14:21.650 --> 00:14:24.980
客户会问是企业

00:14:22.940 --> 00:14:27.050
公司或金钱规则就在那里

00:14:24.980 --> 00:14:29.930
不像Tequesta说好的，多少钱

00:14:27.050 --> 00:14:33.170
大概5美分，他们

00:14:29.930 --> 00:14:35.720
说好吧，你完全陌生

00:14:33.170 --> 00:14:37.910
可以说云到底是什么，所以我做了

00:14:35.720 --> 00:14:40.640
一些payara和白色的皮毛和亚马逊

00:14:37.910 --> 00:14:44.390
 accs，我忘了禁用它

00:14:40.640 --> 00:14:46.880
云与ELB，每张成本为16美元

00:14:44.390 --> 00:14:49.880
一个月到白色苍蝇病

00:14:46.880 --> 00:14:51.170
一直运行，所以问题是

00:14:49.880 --> 00:14:55.310
有一个更大的公司，你可以

00:14:51.170 --> 00:14:57.620
每月节省50％至$ 8 

00:14:55.310 --> 00:15:01.670
差异，我的意思是，这很重要吗

00:14:57.620 --> 00:15:07.580
所以现在我们做了白光

00:15:01.670 --> 00:15:11.450
谁说WebSphere可以，请尝试使用WebSphere这样

00:15:07.580 --> 00:15:16.130
我只是请提醒我停止

00:15:11.450 --> 00:15:16.670
服务，因此WebSphere与众不同

00:15:16.130 --> 00:15:26.510
夹

00:15:16.670 --> 00:15:36.680
我安装了Web seon服务，所以这是

00:15:26.510 --> 00:15:39.500
最后一个，所以这是开始

00:15:36.680 --> 00:15:40.190
这不是WebSphere内核

00:15:39.500 --> 00:15:44.090
已经

00:15:40.190 --> 00:15:48.110
 II这样说，它使用

00:15:44.090 --> 00:15:49.850
 Java 7 Web配置文件以及相关性和

00:15:48.110 --> 00:15:51.500
这是您可以获得的韦伯斯特

00:15:49.850 --> 00:15:55.370
使用Web c许可证，这是较新的

00:15:51.500 --> 00:15:55.880
一个，让我们在这里去，我们看到

00:15:55.370 --> 00:15:58.070
这里

00:15:55.880 --> 00:16:01.640
 comm i BN网站内核启动这是

00:15:58.070 --> 00:16:04.850
强烈抗议，所以我在这里切换显示器

00:16:01.640 --> 00:16:08.960
我们看到它是90 MB的RAM 

00:16:04.850 --> 00:16:09.290
执行GC下降到40 

00:16:08.960 --> 00:16:11.540
手段

00:16:09.290 --> 00:16:13.480
韦伯斯特是你可以放心使用白色

00:16:11.540 --> 00:16:16.970
飞到墨西哥

00:16:13.480 --> 00:16:19.780
与WebSphere部署相比

00:16:16.970 --> 00:16:22.640
在所有应用服务中的一场小战

00:16:19.780 --> 00:16:24.050
通常一秒钟左右

00:16:22.640 --> 00:16:26.600
这就是需要的

00:16:24.050 --> 00:16:27.710
当然，应用程序越疯狂

00:16:26.600 --> 00:16:30.500
让你

00:16:27.710 --> 00:16:33.080
这就是为什么我很酷的故事

00:16:30.500 --> 00:16:35.540
就像实际上的Java E是因为

00:16:33.080 --> 00:16:37.190
战争总是很小，因为

00:16:35.540 --> 00:16:39.200
那里什么都没有

00:16:37.190 --> 00:16:41.600
应用服务器的文凭

00:16:39.200 --> 00:16:44.390
总是总是快疯了

00:16:41.600 --> 00:16:45.950
我说的项目使用Java e然后

00:16:44.390 --> 00:16:48.170
抱怨不如你说的那么快

00:16:45.950 --> 00:16:50.810
需要五秒钟，我们注意到了

00:16:48.170 --> 00:16:52.310
他们感染了病毒直到病毒扫描仪

00:16:50.810 --> 00:16:53.720
它扫描了之前的所有内容

00:16:52.310 --> 00:16:55.820
有些东西可以部署它，我的意思是

00:16:53.720 --> 00:16:56.900
是一个不同的故事，但是如果你是

00:16:55.820 --> 00:16:58.820
抱怨部署

00:16:56.900 --> 00:17:00.290
确实进行性能检查或其他

00:16:58.820 --> 00:17:03.290
病毒扫描程序，以便他们扫描

00:17:00.290 --> 00:17:06.290
一切，所以这是WebSphere a 

00:17:03.290 --> 00:17:10.750
自由简介，我实际上忘记了

00:17:06.290 --> 00:17:14.390
我认为这是九十八岁

00:17:10.750 --> 00:17:19.250
 WebSphere这是 localhost 90 

00:17:14.390 --> 00:17:22.190
八十岁，我想是的，并且拥有完整的Java 

00:17:19.250 --> 00:17:24.860
七个支持和模块就可以了

00:17:22.190 --> 00:17:28.640
有完整的命令行，所以我能做什么

00:17:24.860 --> 00:17:30.950
服务清单上有所有这些

00:17:28.640 --> 00:17:32.540
我可以将其存档的服务器转储到这里

00:17:30.950 --> 00:17:34.250
您可以创建服务并关闭它们

00:17:32.540 --> 00:17:36.920
苍蝇，所以这就是自由

00:17:34.250 --> 00:17:39.020
配置文件，所以我会做间谍时代

00:17:36.920 --> 00:17:41.630
顺便说一下，WebLogic将以

00:17:39.020 --> 00:17:44.300
 100兆欧，这是最大的一个

00:17:41.630 --> 00:17:46.220
我认为开销是完美的

00:17:44.300 --> 00:17:49.310
我录制了有关网络的截屏视频

00:17:46.220 --> 00:17:51.380
以及90兆的麦格

00:17:49.310 --> 00:17:55.340
或类似的东西，所以这是

00:17:51.380 --> 00:17:57.290
最大，但这仍然不是问题，所以

00:17:55.340 --> 00:17:59.480
好像不是花了500兆欧

00:17:57.290 --> 00:18:01.010
大概是白色的两倍

00:17:59.480 --> 00:18:03.740
像ATM X之类的文件

00:18:01.010 --> 00:18:05.480
所以你总是可以说没有网

00:18:03.740 --> 00:18:07.040
逻辑很重，因为它是两倍

00:18:05.480 --> 00:18:09.170
像我一样大

00:18:07.040 --> 00:18:11.480
意思是数字ATM考试好吗

00:18:09.170 --> 00:18:17.890
问题是我们有谁的项目X和

00:18:11.480 --> 00:18:21.620
永远是一件好事的方式

00:18:17.890 --> 00:18:26.930
将此与Chrome和我的测试进行比较

00:18:21.620 --> 00:18:28.730
窗口现在需要70 Meg的RAM，所以

00:18:26.930 --> 00:18:30.970
这意味着如果你真的是真的

00:18:28.730 --> 00:18:34.880
轻量级永不打开浏览器

00:18:30.970 --> 00:18:36.980
好吧，所以我们有白蝇，我们有

00:18:34.880 --> 00:18:38.780
自由，如果你喜欢payara 

00:18:36.980 --> 00:18:42.339
段落将类似，所以我们应该做

00:18:38.780 --> 00:18:47.089
现在要完成，所以

00:18:42.339 --> 00:18:48.589
服务器停止并停止默认

00:18:47.089 --> 00:18:51.289
服务器，您需要做什么

00:18:48.589 --> 00:18:52.639
进行配置，以便您访问用户

00:18:51.289 --> 00:18:57.429
我做了什么

00:18:52.639 --> 00:19:01.989
服务器默认服务器不能server.xml 

00:18:57.429 --> 00:19:05.329
抱歉，这是完整配置

00:19:01.989 --> 00:19:07.099
这是我不得不告诉网站的使用

00:19:05.329 --> 00:19:08.929
网站资料7哦，没有完整的

00:19:07.099 --> 00:19:11.809
个人资料中有类似网络的内容

00:19:08.929 --> 00:19:14.359
配置文件加上依赖关系，但它确实

00:19:11.809 --> 00:19:20.239
不管这个，例如B和CDI都是

00:19:14.359 --> 00:19:22.099
包括已经可以了，这不是

00:19:20.239 --> 00:19:25.699
最近的一个因为我用这个

00:19:22.099 --> 00:19:27.349
在生产中，所以开始那个，我

00:19:25.699 --> 00:19:30.259
不想启动玻璃55 

00:19:27.349 --> 00:19:34.459
因为就像没有补丁的payara 

00:19:30.259 --> 00:19:42.799
对，所以现在就开始

00:19:34.459 --> 00:19:44.389
看看这个，你看到了

00:19:42.799 --> 00:19:47.149
来了，这已经不再具有可比性

00:19:44.389 --> 00:19:50.689
因为它附带-混合512 MB 

00:19:47.149 --> 00:19:54.129
内存，但是如果我们去这里，我们会发现

00:19:50.689 --> 00:19:57.109
现在JVM已经解决了130 

00:19:54.129 --> 00:19:59.329
兆字节的RAM，但它有太多的RAM 

00:19:57.109 --> 00:20:01.209
分配，因此没有压力

00:19:59.329 --> 00:20:05.179
在垃圾收集器上收集

00:20:01.209 --> 00:20:09.529
不幸的是我将不得不杀死

00:20:05.179 --> 00:20:11.539
与Java相关的所有事情

00:20:09.529 --> 00:20:15.439
通过类共享进行分析

00:20:11.539 --> 00:20:17.329
然后我们这样做，然后我会

00:20:15.439 --> 00:20:19.489
只是告诉你，我会实施

00:20:17.329 --> 00:20:20.869
展开一场小规模的战争并衡量

00:20:19.489 --> 00:20:23.539
性能并查看开销

00:20:20.869 --> 00:20:25.459
其实是然后开始这些群

00:20:23.539 --> 00:20:27.079
所以在薪ara群和空心

00:20:25.459 --> 00:20:29.269
蜂拥而至

00:20:27.079 --> 00:20:31.729
差异，那么您可以将其与

00:20:29.269 --> 00:20:33.799
 CD号如果不是可以的话，很好的策略

00:20:31.729 --> 00:20:36.409
做其他事情，但我尝试知道

00:20:33.799 --> 00:20:39.279
看看有多少你能

00:20:36.409 --> 00:20:39.279
实际保存是

00:21:00.040 --> 00:21:04.970
是的，实际上

00:21:03.110 --> 00:21:07.460
所以我们一直在进行压力测试

00:21:04.970 --> 00:21:08.960
我实际上将创建一个

00:21:07.460 --> 00:21:10.430
如果您喜欢GB，则使用该应用程序

00:21:08.960 --> 00:21:11.990
交易，看到它是最

00:21:10.430 --> 00:21:13.940
然后，如果您拥有全部

00:21:11.990 --> 00:21:17.600
方面加载不多

00:21:13.940 --> 00:21:19.460
区别，但是如果

00:21:17.600 --> 00:21:21.740
移民局他们超级聪明

00:21:19.460 --> 00:21:22.700
不会正确开始，然后如果开始

00:21:21.740 --> 00:21:27.220
部署第一个，但您会看到

00:21:22.700 --> 00:21:33.590
其实没有什么区别

00:21:27.220 --> 00:21:38.000
所以实际上很好，所以大多数

00:21:33.590 --> 00:21:41.720
我的客户他们与两个

00:21:38.000 --> 00:21:43.430
我认为GB的RAM 

00:21:41.720 --> 00:21:46.130
会分配更多的，因为有你

00:21:43.430 --> 00:21:48.980
知道他们的意思是什么

00:21:46.130 --> 00:21:52.060
喜欢，所以这是最粉虱

00:21:48.980 --> 00:21:56.300
他们一起运行的payara-极客考试组合

00:21:52.060 --> 00:21:57.830
当然，这什么也没说，因为

00:21:56.300 --> 00:21:59.240
如果您开始兑现您的申请

00:21:57.830 --> 00:22:03.110
你知道这真的取决于我们

00:21:59.240 --> 00:22:05.600
这样做监视现在我们有薪金

00:22:03.110 --> 00:22:07.940
从垃圾收集和

00:22:05.600 --> 00:22:12.230
你再看是41最大，所以看起来

00:22:07.940 --> 00:22:12.650
 40兆字节是绝对限制

00:22:12.230 --> 00:22:14.510
没有限制

00:22:12.650 --> 00:22:18.140
所有这些服务器都是40 Mac， 

00:22:14.510 --> 00:22:20.300
 Tomcat我大约在10 Meg左右测试过一次

00:22:18.140 --> 00:22:22.610
这就是你可以Tomcat或码头，但

00:22:20.300 --> 00:22:24.530
虽然可以再增加6兆字节

00:22:22.610 --> 00:22:28.070
说Tomcat肿是因为两次

00:22:24.530 --> 00:22:30.230
和我的兰花一样大，但是

00:22:28.070 --> 00:22:32.800
你知道论据是，如果你知道

00:22:30.230 --> 00:22:35.390
数字我的意思是什么问题

00:22:32.800 --> 00:22:37.450
好吧，那是我的全职

00:22:35.390 --> 00:22:44.510
重量级的人没有意义

00:22:37.450 --> 00:22:52.060
同意，所以现在我们有payara等

00:22:44.510 --> 00:22:57.380
让我们实现一些事情

00:22:52.060 --> 00:23:01.460
昨天我在如何称呼它

00:22:57.380 --> 00:23:05.510
主题演讲Oracle代码主题演讲

00:23:01.460 --> 00:23:06.600
有很多FAS FAS对，你知道吗

00:23:05.510 --> 00:23:10.380
它是

00:23:06.600 --> 00:23:16.470
食物即服务，所以这就是

00:23:10.380 --> 00:23:17.730
应该在这里可扩展，所以我会

00:23:16.470 --> 00:23:22.110
喜欢创建一个我所做的项目

00:23:17.730 --> 00:23:26.370
昨天刚教回来

00:23:22.110 --> 00:23:27.720
迁移回Java EE 7，因为我

00:23:26.370 --> 00:23:31.890
想要使用所有服务， 

00:23:27.720 --> 00:23:39.690
这个8只能在GlassFish 5上运行， 

00:23:31.890 --> 00:23:42.920
它带有一个，它一无所有

00:23:39.690 --> 00:23:42.920
在建

00:23:47.760 --> 00:24:02.040
因此，我将创建一个Java类， 

00:23:52.170 --> 00:24:11.340
称其为食物服务食物资源

00:24:02.040 --> 00:24:16.260
终点，终点是食物和

00:24:11.340 --> 00:24:19.980
一只猫，我会只用它- 

00:24:16.260 --> 00:24:25.620
通常我只会拥有EJB 

00:24:19.980 --> 00:24:27.930
已经然后字符串get然后

00:24:25.620 --> 00:24:31.110
因为你问我我想

00:24:27.930 --> 00:24:35.850
获得并激活依赖性

00:24:31.110 --> 00:24:38.280
注射，所以我要说食物经理

00:24:35.850 --> 00:24:43.590
所有企业应用程序都需要一位经理

00:24:38.280 --> 00:24:46.590
然后是另一个无状态光束

00:24:43.590 --> 00:24:48.150
无状态光束有一个或我们可以做的

00:24:46.590 --> 00:24:51.270
要求应付或类似

00:24:48.150 --> 00:24:53.460
无状态我想很多人都说蜜蜂

00:24:51.270 --> 00:24:55.050
最重的是请求范围

00:24:53.460 --> 00:25:01.170
他们会慢一些，所以我很高兴做

00:24:55.050 --> 00:25:03.210
它是无状态的，但是食物又是什么

00:25:01.170 --> 00:25:06.870
我们已经得到了昨天

00:25:03.210 --> 00:25:10.740
沙拉当然是这样装饰的沙拉

00:25:06.870 --> 00:25:16.440
卫生沙拉和一些

00:25:10.740 --> 00:25:23.820
随机噪声，因此我们将其保存下来， 

00:25:16.440 --> 00:25:28.440
那我可以给食品经理调频

00:25:23.820 --> 00:25:30.630
这是this.fm点食品的回报，我

00:25:28.440 --> 00:25:32.250
认为足够了，所以我只是

00:25:30.630 --> 00:25:34.200
相邻的对象我会离开它

00:25:32.250 --> 00:25:36.990
会快到这个JSON对象

00:25:34.200 --> 00:25:38.220
没什么大不了，我希望

00:25:36.990 --> 00:25:41.130
等一会儿

00:25:38.220 --> 00:25:46.350
所有的薪水都在运行，所以让我们

00:25:41.130 --> 00:25:49.460
部署它，并运行payara，我会

00:25:46.350 --> 00:25:49.460
现在失去payara 

00:25:50.780 --> 00:25:54.330
可以说没有很多

00:25:52.860 --> 00:25:55.890
应用之间的差异

00:25:54.330 --> 00:25:57.750
有关开销的服务或

00:25:55.890 --> 00:26:00.330
我的意思是运行时性能

00:25:57.750 --> 00:26:14.010
多年来疯狂地优化，所以

00:26:00.330 --> 00:26:16.850
资源食物所以资源食物和猫

00:26:14.010 --> 00:26:16.850
错了吗

00:26:19.289 --> 00:26:22.460
佩里小姐的东西

00:26:25.170 --> 00:26:35.520
功能是可以服务的资源， 

00:26:27.990 --> 00:26:39.660
食物不错，所以现在我们在这里

00:26:35.520 --> 00:26:41.490
我的意思是注射到EG蜜蜂上

00:26:39.660 --> 00:26:43.440
在现实世界中，我们可能会

00:26:41.490 --> 00:26:45.450
另一只AG蜜蜂注射了些东西

00:26:43.440 --> 00:26:47.790
我们可以衡量差异，而我

00:26:45.450 --> 00:26:49.710
想要使用JPA，因为大多数

00:26:47.790 --> 00:26:51.420
 Spring Drop Wizard项目也有

00:26:49.710 --> 00:26:52.650
 GPA所以没有什么可比的

00:26:51.420 --> 00:26:54.720
我想比较的是

00:26:52.650 --> 00:26:57.120
特定事物的应用，例如

00:26:54.720 --> 00:26:59.940
 CDI和蜜蜂，这就是我们所能做的

00:26:57.120 --> 00:27:02.310
开销可能来自正确的地方

00:26:59.940 --> 00:27:05.370
所以我们有GlassFish 

00:27:02.310 --> 00:27:07.200
连接到那，然后我会

00:27:05.370 --> 00:27:10.470
喜欢做的是一个很好的工具，叫做Apache 

00:27:07.200 --> 00:27:12.660
 Apache随附的基准测试

00:27:10.470 --> 00:27:13.800
如果您在所有平台上都可以使用

00:27:12.660 --> 00:27:17.000
安装Apache Web服务器

00:27:13.800 --> 00:27:21.300
工具-请参阅此并发数量

00:27:17.000 --> 00:27:24.690
流程说5-n是数字

00:27:21.300 --> 00:27:26.210
的请求，我可以说1000再走

00:27:24.690 --> 00:27:34.560
接着就，随即

00:27:26.210 --> 00:27:37.260
是什么问题，是的-谢谢你

00:27:34.560 --> 00:27:39.870
如您现在所见，每个请求

00:27:37.260 --> 00:27:44.220
第二个是1,400，这令人惊讶

00:27:39.870 --> 00:27:48.000
低，我们现在可以看一下显示器

00:27:44.220 --> 00:27:50.190
而且我们看到执行GC并没有

00:27:48.000 --> 00:27:51.960
真的没有多大影响

00:27:50.190 --> 00:27:54.840
有一点是对的，因为

00:27:51.960 --> 00:27:59.430
加载并启动所有内容，但

00:27:54.840 --> 00:28:01.800
如果我再做一次并执行GC，它将成功

00:27:59.430 --> 00:28:03.330
回到大约60，这是通常的

00:28:01.800 --> 00:28:05.970
行为和所有应用程序，因此实际上

00:28:03.330 --> 00:28:08.250
我会争辩说，如果申请得到

00:28:05.970 --> 00:28:09.990
更大，你有一天，那么你

00:28:08.250 --> 00:28:11.190
获取带有缓存的entitymanager，并

00:28:09.990 --> 00:28:14.190
有并发事务

00:28:11.190 --> 00:28:17.310
大量的RAM，但这从来不是问题

00:28:14.190 --> 00:28:18.660
所以我的意思是从一开始就是果冻

00:28:17.310 --> 00:28:20.220
从来没有见过我们必须做的项目

00:28:18.660 --> 00:28:21.810
从应用服务器迁移

00:28:20.220 --> 00:28:23.790
因为它太大，太慢或

00:28:21.810 --> 00:28:26.000
无论什么，总是错误的交易

00:28:23.790 --> 00:28:29.000
来自处理锁定的交易或

00:28:26.000 --> 00:28:32.430
无论我是什么，我们都这样做了

00:28:29.000 --> 00:28:36.180
现在有另一种工具

00:28:32.430 --> 00:28:40.830
更方便，更轻松的工作

00:28:36.180 --> 00:28:51.600
工具，这叫做J Mita三

00:28:40.830 --> 00:28:54.510
一个，这个开始，所以我可以

00:28:51.600 --> 00:28:59.700
说我想有一个线程组

00:28:54.510 --> 00:29:02.640
有五个线程，它应该运行

00:28:59.700 --> 00:29:05.910
永远，然后加速就可以了，然后

00:29:02.640 --> 00:29:10.440
我要添加一个采样器HTTP请求

00:29:05.910 --> 00:29:14.820
这就是道路，而我

00:29:10.440 --> 00:29:18.810
需要 localhost 和8080这么快

00:29:14.820 --> 00:29:20.640
资源食物，然后一件事是

00:29:18.810 --> 00:29:21.990
叫听众，我只想

00:29:20.640 --> 00:29:25.590
有东西叫

00:29:21.990 --> 00:29:31.680
摘要报告是的，这就是我

00:29:25.590 --> 00:29:33.750
通常需要，我说开始就知道了

00:29:31.680 --> 00:29:36.780
重要的是这里的零错误

00:29:33.750 --> 00:29:38.520
表示这是实际的压力测试，因此

00:29:36.780 --> 00:29:39.990
这就是我们在

00:29:38.520 --> 00:29:42.090
开始见你的项目

00:29:39.990 --> 00:29:44.130
知道我们需要多少资源

00:29:42.090 --> 00:29:45.990
这是我通常的操作滞后， 

00:29:44.130 --> 00:29:48.600
在会议上这样做只是为了

00:29:45.990 --> 00:29:51.900
你知道一个想法是什么应用

00:29:48.600 --> 00:29:55.250
服务这样做，然后您会在这里看到

00:29:51.900 --> 00:29:58.380
 CPU使用率是60，所以不是很好

00:29:55.250 --> 00:30:03.270
压力测试，因为应该是80 

00:29:58.380 --> 00:30:04.980
是的，我们在这里看到需要的TDD 

00:30:03.270 --> 00:30:06.600
更多的内存，但是如果我执行垃圾

00:30:04.980 --> 00:30:09.330
收集总是可以追溯到我们的

00:30:06.600 --> 00:30:11.340
大约60和沉重的负担，现在

00:30:09.330 --> 00:30:13.650
来了我想要的很酷的东西

00:30:11.340 --> 00:30:15.990
要衡量的是

00:30:13.650 --> 00:30:19.590
 ejbs拦截器和依赖项

00:30:15.990 --> 00:30:23.850
注射，所以我想切换到

00:30:19.590 --> 00:30:25.770
更简单并查看CPU采样，所以现在

00:30:23.850 --> 00:30:30.110
这就像非常非常

00:30:25.770 --> 00:30:33.810
低开销，我在这里看到的是

00:30:30.110 --> 00:30:35.520
开销最大的是同步威胁Verka 

00:30:33.810 --> 00:30:37.320
得到任务，我认为原因是我

00:30:35.520 --> 00:30:39.570
小姐配置了薪水是

00:30:37.320 --> 00:30:43.020
只是五个威胁并不重要

00:30:39.570 --> 00:30:46.080
但很酷的故事是没有

00:30:43.020 --> 00:30:48.060
每个伊维萨岛，所以首页似乎

00:30:46.080 --> 00:30:50.280
喜欢蜜蜂，所有的东西都喜欢

00:30:48.060 --> 00:30:51.360
不消耗任何CPU周期

00:30:50.280 --> 00:30:53.760
到其他东西

00:30:51.360 --> 00:30:58.740
和你应该做什么，只是

00:30:53.760 --> 00:31:02.250
搜索我的包裹，这就是你

00:30:58.740 --> 00:31:04.260
看到这两个类，这是

00:31:02.250 --> 00:31:06.600
例如B的开销是

00:31:04.260 --> 00:31:08.730
拦截器或开始的代理

00:31:06.600 --> 00:31:11.429
交易指标监控

00:31:08.730 --> 00:31:14.130
如您所见，性能是

00:31:11.429 --> 00:31:17.040
 egb的总开销为零1 

00:31:14.130 --> 00:31:20.280
百分比，因此，如果它可以删除例如B 

00:31:17.040 --> 00:31:23.669
可以说最多900毫秒

00:31:20.280 --> 00:31:25.799
在测试过程中，这是没有意义的

00:31:23.669 --> 00:31:27.780
其实我从来没有做过压力测试

00:31:25.799 --> 00:31:30.360
例如，如果我们将B出现在顶部

00:31:27.780 --> 00:31:32.940
有HTTP层，这很自然

00:31:30.360 --> 00:31:34.620
当然是因为HTTP层做了很多

00:31:32.940 --> 00:31:36.390
他们已经解析了HTTP的工作

00:31:34.620 --> 00:31:38.910
协议启动我们应该使用的线程

00:31:36.390 --> 00:31:42.299
但由于未知原因，大多数

00:31:38.910 --> 00:31:44.040
工作队试图摆脱CDI和

00:31:42.299 --> 00:31:46.710
例如B他们实行了自己的

00:31:44.040 --> 00:31:48.470
框架从未奏效，然后我们

00:31:46.710 --> 00:31:50.970
退后脱颖而出，它又能正常工作

00:31:48.470 --> 00:31:54.240
什么又变得无聊了

00:31:50.970 --> 00:31:57.450
你现在可以称它为重量级，所以我

00:31:54.240 --> 00:31:59.549
关键是你知道的架构

00:31:57.450 --> 00:32:02.429
你应该先测量并过早

00:31:59.549 --> 00:32:04.080
优化是万恶之源

00:32:02.429 --> 00:32:06.660
体系结构，因为如果您要创建

00:32:04.080 --> 00:32:07.350
拖着你自己的慢雪花

00:32:06.660 --> 00:32:09.870
在jax-rs中

00:32:07.350 --> 00:32:13.380
没有人会明白你为什么这样做， 

00:32:09.870 --> 00:32:18.210
不会有任何问题的支持

00:32:13.380 --> 00:32:22.590
关于这个，那么我想这样我的

00:32:18.210 --> 00:32:26.510
 CPU现在很热，所以我想

00:32:22.590 --> 00:32:26.510
切换让我们看看

00:32:32.720 --> 00:32:38.509
谁是来自payara的您的Pyro所拥有的

00:32:35.299 --> 00:32:42.529
优先拉屎我忘了总是你

00:32:38.509 --> 00:32:49.389
我现在想阅读域监视

00:32:42.529 --> 00:32:55.369
监视域是

00:32:49.389 --> 00:33:00.919
可以的服务器交易服务

00:32:55.369 --> 00:33:02.840
看到我们从17,000的测试开始

00:33:00.919 --> 00:33:06.019
百万笔交易，没有

00:33:02.840 --> 00:33:07.970
回滚，所以我们现在还得到了

00:33:06.019 --> 00:33:09.489
完成完全完全监视

00:33:07.970 --> 00:33:11.629
开箱即用

00:33:09.489 --> 00:33:13.249
如果您的白蝇是真的， 

00:33:11.629 --> 00:33:15.739
 Liberty配置所有应用程序服务器

00:33:13.249 --> 00:33:18.919
这是您免费获得的东西

00:33:15.739 --> 00:33:20.359
从您自己的秘密和jax-rs开始

00:33:18.919 --> 00:33:22.129
如果您有嫉妒，我们什么也没有

00:33:20.359 --> 00:33:24.349
一点点，但您可以免费获得

00:33:22.129 --> 00:33:26.239
最酷的故事是我可以拿下杰森

00:33:24.349 --> 00:33:28.909
所以我可以创造一个体面的你知道的反应

00:33:26.239 --> 00:33:30.499
应用程序来监视它，或者如果您有

00:33:28.909 --> 00:33:36.169
您当然可以使用服务巴士

00:33:30.499 --> 00:33:37.820
 XML，如果您喜欢B的年份，那么这是

00:33:36.169 --> 00:33:39.919
您免费获得的一切

00:33:37.820 --> 00:33:46.009
舱壁，也没有时间

00:33:39.919 --> 00:33:49.070
提这个，是的，这就是我

00:33:46.009 --> 00:33:52.249
说这最后的测试是最高的

00:33:49.070 --> 00:33:55.999
可能的开销，因为我做了什么

00:33:52.249 --> 00:33:58.899
在这里，他们在payara，而我

00:33:55.999 --> 00:34:02.419
服务始终在完整监视器中运行

00:33:58.899 --> 00:34:05.389
配置你可以看到这是我的

00:34:02.419 --> 00:34:07.070
标准设置，所有监控甚至彩色

00:34:05.389 --> 00:34:09.020
没有使用的酒吧很高，所以

00:34:07.070 --> 00:34:12.440
尽可能高的采样和监控

00:34:09.020 --> 00:34:14.750
如此水平，这就是为什么，因为我们

00:34:12.440 --> 00:34:16.879
在所有压力测试中进行全面测量

00:34:14.750 --> 00:34:18.770
我们的测试是最高的

00:34:16.879 --> 00:34:20.210
监视是否足够好我们可以去

00:34:18.770 --> 00:34:22.940
在生产中以最高的可能

00:34:20.210 --> 00:34:24.440
监控，如果没有，我将停用

00:34:22.940 --> 00:34:26.450
所以我们总是做得尽可能高

00:34:24.440 --> 00:34:28.879
监控Wi-Fi同样如此

00:34:26.450 --> 00:34:30.260
我做的事会激活所有东西，所以

00:34:28.879 --> 00:34:32.089
激活不是那么容易，但是你

00:34:30.260 --> 00:34:34.429
永远不会做，你永远不会激活

00:34:32.089 --> 00:34:36.109
生产中有东西，但是如果

00:34:34.429 --> 00:34:36.710
一切都经过测试压力测试在那里

00:34:36.109 --> 00:34:38.629
不是问题

00:34:36.710 --> 00:34:40.579
所以这是最糟糕的可能

00:34:38.629 --> 00:34:42.559
您可以实现的性能，这是

00:34:40.579 --> 00:34:44.869
通常最慢的东西

00:34:42.559 --> 00:34:45.840
每笔交易约5,000至10,000笔交易

00:34:44.869 --> 00:34:47.700
第二作为

00:34:45.840 --> 00:34:50.310
此设置中的每秒事务数

00:34:47.700 --> 00:34:51.810
这是例如

00:34:50.310 --> 00:34:53.520
 B当然没有业务逻辑

00:34:51.810 --> 00:34:54.930
但我的意思是如果您介绍业务

00:34:53.520 --> 00:35:00.060
逻辑确实毫无意义

00:34:54.930 --> 00:35:13.070
对话我同意了问题否

00:35:00.060 --> 00:35:17.280
然后我想停止payara和

00:35:13.070 --> 00:35:20.010
然后再次去垃圾，因为我

00:35:17.280 --> 00:35:22.830
以后将其删除Java-Jarrah 

00:35:20.010 --> 00:35:24.690
 payara micro现在是micro，我

00:35:22.830 --> 00:35:29.580
可以说部署，我想就是这个

00:35:24.690 --> 00:35:31.380
部署FAS的方式应该是目标，然后

00:35:29.580 --> 00:35:36.330
我们这里有FIS 

00:35:31.380 --> 00:35:38.550
所以现在PI是微启动的

00:35:36.330 --> 00:35:40.920
我真的很喜欢微支付

00:35:38.550 --> 00:35:43.170
您下载它可以做到这一点

00:35:40.920 --> 00:35:46.470
在我眼中是最终用例

00:35:43.170 --> 00:35:48.660
对于微型，如果您只需要，它会更简单

00:35:46.470 --> 00:35:50.430
因此，如果您必须创建一个泊坞窗

00:35:48.660 --> 00:35:52.440
文件，你只有一件事，而你没有

00:35:50.430 --> 00:35:55.170
必须解压缩，以便档案文件

00:35:52.440 --> 00:35:57.240
有点简单，但是因此我拥有了所有

00:35:55.170 --> 00:35:59.340
对于文件来说这不是一个大问题

00:35:57.240 --> 00:36:00.660
我，但是如果您从Java开始， 

00:35:59.340 --> 00:36:01.020
表示看到这样的东西真是太好了

00:36:00.660 --> 00:36:09.810
这个

00:36:01.020 --> 00:36:15.120
所以嗯西班牙海鲜饭微型监视器170 

00:36:09.810 --> 00:36:18.540
因此执行GC可以回溯到大约

00:36:15.120 --> 00:36:21.960
有30然后回到5060 

00:36:18.540 --> 00:36:23.580
说差不多你必须做的

00:36:21.960 --> 00:36:25.590
可重复的测试，我将不得不

00:36:23.580 --> 00:36:28.650
杀死笔记本电脑上所有打开的JVM 

00:36:25.590 --> 00:36:33.870
但你看到它在同一个球场

00:36:28.650 --> 00:36:37.980
没错，所以嗯，我

00:36:33.870 --> 00:36:38.970
可以开始不了哦，我们已经看到了10,000 

00:36:37.980 --> 00:36:41.970
您看到的每秒交易数

00:36:38.970 --> 00:36:44.430
有10,000，所以现在有4000 

00:36:41.970 --> 00:36:46.710
这是现在的PI R micro，但是有

00:36:44.430 --> 00:36:48.720
 10,000所以清盘所以我忘了

00:36:46.710 --> 00:36:54.300
现在向您展示它被称为高切

00:36:48.720 --> 00:36:57.090
更高，还可以，粉虱为空心，所以现在

00:36:54.300 --> 00:36:58.050
这是我们有一群，我们有D空心

00:36:57.090 --> 00:37:00.330
一群

00:36:58.050 --> 00:37:03.150
现在这实际上是要使用的东西

00:37:00.330 --> 00:37:06.030
空心的蜂群意味着它已经准备好

00:37:03.150 --> 00:37:08.580
使用配置文件，您只需指定

00:37:06.030 --> 00:37:10.320
该应用程序，因此您不会注意到

00:37:08.580 --> 00:37:11.730
整个马文地狱与所有

00:37:10.320 --> 00:37:13.500
依赖性问题我不明白你

00:37:11.730 --> 00:37:15.510
不必这样做，这是

00:37:13.500 --> 00:37:19.920
绝对不错，所以我可以说是Java 

00:37:15.510 --> 00:37:24.680
 -字符微轮廓群，然后

00:37:19.920 --> 00:37:29.150
指向两个DFAS相同

00:37:24.680 --> 00:37:32.460
它开始，您看到它开始了

00:37:29.150 --> 00:37:34.310
 JAXA res CD我是Jason bean，非常密集

00:37:32.460 --> 00:37:37.770
交易和jax-rs以及

00:37:34.310 --> 00:37:42.710
然后说这是建议

00:37:37.770 --> 00:37:47.190
准备好了，什么是开销监视器

00:37:42.710 --> 00:37:51.690
这是Apache在哪里，看不到它

00:37:47.190 --> 00:37:55.380
就像哦，是吗，它是显示器70 

00:37:51.690 --> 00:37:57.740
执行GC会回到30，这是

00:37:55.380 --> 00:37:59.700
第一个微型，最多可以节省10个

00:37:57.740 --> 00:38:02.130
有人问我你知道的问题

00:37:59.700 --> 00:38:04.620
你看到我对我的看法是什么

00:38:02.130 --> 00:38:07.800
如果您现在选择数字

00:38:04.620 --> 00:38:09.870
想省下10兆，用微型好吗

00:38:07.800 --> 00:38:12.690
和一点点的问题是

00:38:09.870 --> 00:38:16.530
营销，所以payara很棒，但是如果您

00:38:12.690 --> 00:38:20.400
去白蝇成群，这就是我得到的

00:38:16.530 --> 00:38:22.950
很多问题，所以先选择合适的尺寸

00:38:20.400 --> 00:38:26.670
您的服务暗示着

00:38:22.950 --> 00:38:31.670
太大，然后再尝试

00:38:26.670 --> 00:38:35.580
您会看到这个简单的项目设置

00:38:31.670 --> 00:38:38.370
从头开始的会话太难了

00:38:35.580 --> 00:38:40.950
是的，很酷的故事就是你

00:38:38.370 --> 00:38:43.560
得到那么你将不得不重建

00:38:40.950 --> 00:38:47.430
皮亚特广告对不起那里的白色

00:38:43.560 --> 00:38:49.530
飞，你的应用程序一遍又一遍好

00:38:47.430 --> 00:38:51.660
现在，最后一件事是建造时间， 

00:38:49.530 --> 00:38:53.640
码头工人和云非常重要的事情

00:38:51.660 --> 00:38:55.380
有人说云怎么办

00:38:53.640 --> 00:38:59.700
微小，所以我现在

00:38:55.380 --> 00:39:05.430
想给你看这个好吧，所以杀死

00:38:59.700 --> 00:39:07.920
蜂拥而至，去FAS，现在我有了

00:39:05.430 --> 00:39:10.380
我的Maven项目，所以我能做什么

00:39:07.920 --> 00:39:11.970
做大一点我可以说行家

00:39:10.380 --> 00:39:14.850
清洁包装

00:39:11.970 --> 00:39:17.700
它可以正确构建应用程序

00:39:14.850 --> 00:39:22.950
现在可以做我可以说Maven包

00:39:17.700 --> 00:39:33.060
而且什么也没有，因为我忘记了

00:39:22.950 --> 00:39:38.880
 docker文件，所以我们需要FAS，我将

00:39:33.060 --> 00:39:43.460
说我需要其他和码头工人

00:39:38.880 --> 00:39:47.160
文件，我要说的是来自

00:39:43.460 --> 00:39:52.980
这是我自己的医生资料库X让我们

00:39:47.160 --> 00:39:54.870
说白谎我忘了

00:39:52.980 --> 00:39:57.480
显示汤米汤米汤米与

00:39:54.870 --> 00:39:59.880
自由很小，我和汤米

00:39:57.480 --> 00:40:13.910
总是用汤米加，所以汤米是

00:39:59.880 --> 00:40:13.910
也将目标FAS点战争复制到

00:40:14.840 --> 00:40:21.290
在那里部署，所以这是

00:40:17.910 --> 00:40:28.520
 dockerfile，现在我可以说多卡构建了

00:40:21.290 --> 00:40:28.520
 -茶爪哇一种FAA食品即服务点

00:40:30.980 --> 00:40:41.910
建造的小巧，所以你现在已经完全

00:40:40.080 --> 00:40:48.270
您可以将可执行映像推送到

00:40:41.910 --> 00:40:52.830
云计算，因此我们现在可以再次尝试

00:40:48.270 --> 00:40:54.480
与获取我们的一样，所以在上一个项目中

00:40:52.830 --> 00:40:56.570
他们使用技术不会

00:40:54.480 --> 00:40:59.370
提起这么简单的启动花了40秒钟

00:40:56.570 --> 00:41:01.140
所有的依赖都被拉了

00:40:59.370 --> 00:41:02.910
服务是对的服务是对的

00:41:01.140 --> 00:41:05.370
之后叹了口气，但为什么我要说

00:41:02.910 --> 00:41:06.740
等待40秒只是为了看建造

00:41:05.370 --> 00:41:09.120
在游戏中打开相同的东西

00:41:06.740 --> 00:41:11.340
因此，这里的杀手tip 

00:41:09.120 --> 00:41:13.110
空心群或微轮廓甚至都没有

00:41:11.340 --> 00:41:14.750
尝试一遍又一遍地构建服务器

00:41:13.110 --> 00:41:21.530
再次没有任何意义

00:41:14.750 --> 00:41:27.000
现在有点作弊，因为

00:41:21.530 --> 00:41:28.880
泊坞窗图片，您在这里看到的是

00:41:27.000 --> 00:41:33.780
下列

00:41:28.880 --> 00:41:41.340
有很多图像等一下

00:41:33.780 --> 00:41:44.490
这是最后一张图片，所以食物

00:41:41.340 --> 00:41:47.400
服务，这是560 Meg的RAM 

00:41:44.490 --> 00:41:49.740
您可以按磁盘空间逐个查看磁盘

00:41:47.400 --> 00:41:52.320
再次建立它是560反复

00:41:49.740 --> 00:41:54.390
再一次，如果你看到的只是联盟我

00:41:52.320 --> 00:41:56.340
认为那个男人不敢再讨论

00:41:54.390 --> 00:41:58.020
没有空间，所以出问题了

00:41:56.340 --> 00:42:03.690
显示正确，现在我告诉你

00:41:58.020 --> 00:42:05.160
医生历史j1 FAS现在是

00:42:03.690 --> 00:42:06.360
应用程序的杀手feature 

00:42:05.160 --> 00:42:09.660
使用应用程序服务的服务器

00:42:06.360 --> 00:42:16.020
乌云密布的战争，如果你这样做

00:42:09.660 --> 00:42:18.930
看看那里是啊，是的，所以

00:42:16.020 --> 00:42:22.380
您在这里看到的第一层是

00:42:18.930 --> 00:42:23.990
中心建六操作系统

00:42:22.380 --> 00:42:29.520
几个月前

00:42:23.990 --> 00:42:33.000
现在在这里我建了这是Java六个月

00:42:29.520 --> 00:42:35.430
以前Java八百种混合，然后四个月

00:42:33.000 --> 00:42:37.950
以前我创建了一个白旗，这些是

00:42:35.430 --> 00:42:40.860
层和很酷的故事是我们

00:42:37.950 --> 00:42:43.130
今天大约在一分钟前为戴尔制造

00:42:40.860 --> 00:42:45.440
是4k 

00:42:43.130 --> 00:42:47.599
所以这就是为什么你总是需要

00:42:45.440 --> 00:42:51.049
基础设施之间的分离

00:42:47.599 --> 00:42:52.999
战争和很酷的故事是什么

00:42:51.049 --> 00:42:55.849
你在云端做得太多

00:42:52.999 --> 00:42:58.940
 EM添加一些蔬菜，例如

00:42:55.849 --> 00:43:01.190
您在Amazon Google Cloud中获得的德语

00:42:58.940 --> 00:43:04.460
亚洲还是让您的私人码头工人变得僵化

00:43:01.190 --> 00:43:09.410
注册表，您将推动560 

00:43:04.460 --> 00:43:11.359
兆字节减去3k，然后确定

00:43:09.410 --> 00:43:13.489
他们推动码头工人的方式就像

00:43:11.359 --> 00:43:15.680
一个孩子一直不知道

00:43:13.489 --> 00:43:18.019
变化或延迟是相同的，那么你

00:43:15.680 --> 00:43:20.299
因此只会推这三种情况

00:43:18.019 --> 00:43:22.549
我所有的云项目都快疯了

00:43:20.299 --> 00:43:25.430
因为推到云端不需要

00:43:22.549 --> 00:43:28.369
传输三千字节，但如果我

00:43:25.430 --> 00:43:31.039
会说，没有

00:43:28.369 --> 00:43:32.749
我将首先创建我的构建

00:43:31.039 --> 00:43:35.269
会很疯狂，我不得不

00:43:32.749 --> 00:43:38.829
将所有东西和罐子放在Maven中

00:43:35.269 --> 00:43:43.670
让我们等第二个城市垃圾

00:43:38.829 --> 00:43:47.150
 LS Minos，所以您看到的是nanos 

00:43:43.670 --> 00:43:49.700
空心群是86 Mac，微型群是60 

00:43:47.150 --> 00:43:53.029
梅格，这意味着我要推动每个

00:43:49.700 --> 00:43:57.489
时间最大为62，再加上3 KB 

00:43:53.029 --> 00:44:00.140
云，这很重要

00:43:57.489 --> 00:44:01.640
所以这是当你有克莱德云

00:44:00.140 --> 00:44:04.190
你必须有一个很好的理由

00:44:01.640 --> 00:44:06.499
用拿来我们甚至没有的超级罐子

00:44:04.190 --> 00:44:08.450
得到它，我问过很多次了

00:44:06.499 --> 00:44:10.099
合理的答案我知道为什么他们使用

00:44:08.450 --> 00:44:12.440
在一个项目中的超级罐子说

00:44:10.099 --> 00:44:14.269
在docker之前开始，然后他们

00:44:12.440 --> 00:44:16.009
你不是更好，所以我会

00:44:14.269 --> 00:44:17.660
了解，但现在确实可以

00:44:16.009 --> 00:44:20.059
如果你从软件上考虑

00:44:17.660 --> 00:44:21.859
工程学角度我为什么要

00:44:20.059 --> 00:44:23.900
一遍又一遍地建立相同的东西

00:44:21.859 --> 00:44:26.239
在60中只有3 KB 

00:44:23.900 --> 00:44:28.519
如果我将所有内容都迁移到

00:44:26.239 --> 00:44:31.460
泵，我将制造60最大

00:44:28.519 --> 00:44:33.920
一遍又一遍为什么你知道

00:44:31.460 --> 00:44:37.759
回答你可以现在给我，或者我们可以

00:44:33.920 --> 00:44:40.130
搬出去，但我不知道好吗

00:44:37.759 --> 00:44:43.309
我想时间已经差不多了

00:44:40.130 --> 00:44:47.049
回答任何问题，因为我晚上

00:44:43.309 --> 00:44:47.049
下届会议权

00:45:05.410 --> 00:45:13.220
是的，如果客户有

00:45:11.030 --> 00:45:17.950
你已经知道与红头合同

00:45:13.220 --> 00:45:21.140
如果他们有Tomcat Tommy和

00:45:17.950 --> 00:45:24.470
如果他们戴着眼镜， 

00:45:21.140 --> 00:45:26.090
或Sun payara，我不在乎我用在

00:45:24.470 --> 00:45:29.060
我的项目Tommy pyar和白人斗争

00:45:26.090 --> 00:45:31.010
到目前为止，我从未喜欢过微型，但我

00:45:29.060 --> 00:45:32.630
不会为什么，因为如果您必须

00:45:31.010 --> 00:45:34.670
配置他们那里你需要相同的

00:45:32.630 --> 00:45:39.020
不像您这样的地方的XML文件

00:45:34.670 --> 00:45:40.970
永远不需要配置是的

00:45:39.020 --> 00:45:42.350
这是我真正完全反对的

00:45:40.970 --> 00:45:43.550
所以在我的项目中，您将有两个

00:45:42.350 --> 00:45:45.020
这样做的确有很好的理由，所以我

00:45:43.550 --> 00:45:47.900
不要把它拿走，我永远也不会

00:45:45.020 --> 00:45:49.850
回答为什么要这样做，因为在

00:45:47.900 --> 00:45:52.250
规则码头工人和云绝对

00:45:49.850 --> 00:45:54.230
无关紧要，我也到了港区

00:45:52.250 --> 00:45:56.210
拉取您知道使用高山的要求

00:45:54.230 --> 00:45:57.950
 Linux，而不是已发送的操作系统，但Luke已发送

00:45:56.210 --> 00:46:01.340
给我所有客户都知道的命令

00:45:57.950 --> 00:46:03.170
我会说如果每100个

00:46:01.340 --> 00:46:06.140
机器曾经在乎的机器

00:46:03.170 --> 00:46:08.030
你知道这是同一个故事，所以

00:46:06.140 --> 00:46:09.980
我们可以争论然后做出线性或什么

00:46:08.030 --> 00:46:13.520
互相关心的丽娜

00:46:09.980 --> 00:46:15.350
是这个空间的兆字节，是的

00:46:13.520 --> 00:46:17.420
这就是我可以在五个中告诉你的

00:46:15.350 --> 00:46:19.369
数年才能完成

00:46:17.420 --> 00:46:21.440
我会说你用不同的答案

00:46:19.369 --> 00:46:23.900
 GlassFish但原因是草

00:46:21.440 --> 00:46:26.300
是的参考实现

00:46:23.900 --> 00:46:28.310
您可以购买支持，这是

00:46:26.300 --> 00:46:29.660
像这样的独特权利是

00:46:28.310 --> 00:46:31.160
从来没有，但是现在没有

00:46:29.660 --> 00:46:32.000
支持GlassFish，但有

00:46:31.160 --> 00:46:34.220
支持payara 

00:46:32.000 --> 00:46:36.500
这也很好，因为如果您获得PI R 5 

00:46:34.220 --> 00:46:38.210
之所以吸引人，是因为最后一条鱼V 5 

00:46:36.500 --> 00:46:42.230
是Java的参考实现

00:46:38.210 --> 00:46:43.700
 8和payara 5我猜会是

00:46:42.230 --> 00:46:45.680
蚀刻玻璃在哪里可以买到

00:46:43.700 --> 00:46:48.890
支持，所以他们有一点优势

00:46:45.680 --> 00:46:50.720
我会说好，然后谢谢你，我必须

00:46:48.890 --> 00:46:52.120
如果您需要丑陋，请参加下一个课程

00:46:50.720 --> 00:46:54.180
贴图

00:46:52.120 --> 00:46:54.180
您

