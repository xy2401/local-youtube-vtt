WEBVTT
Kind: captions
Language: zh-Hans

00:00:03.500 --> 00:00:07.800
所以我觉得人流慢了

00:00:06.569 --> 00:00:10.590
下来，所以我们开始

00:00:07.800 --> 00:00:12.920
因此，欢迎您跳跃并开始您的

00:00:10.590 --> 00:00:17.160
 Java EE开发微服务

00:00:12.920 --> 00:00:20.490
我是Kate Stanley夫人。格雷厄姆宪章我们

00:00:17.160 --> 00:00:22.140
两者都适用于IBM，我们希望

00:00:20.490 --> 00:00:24.869
今天要给你一些信息

00:00:22.140 --> 00:00:30.480
关于为什么我们认为Java很合适

00:00:24.869 --> 00:00:31.830
对于微服务，这就是

00:00:30.480 --> 00:00:33.690
我们将要与您交谈的内容

00:00:31.830 --> 00:00:36.420
大约今天， 

00:00:33.690 --> 00:00:37.860
微服务介绍只是一个

00:00:36.420 --> 00:00:41.330
快速举手的人已经在这里

00:00:37.860 --> 00:00:44.070
以为他们知道微服务是什么

00:00:41.330 --> 00:00:46.320
好的，我们将做一些介绍

00:00:44.070 --> 00:00:47.910
然后希望为您设置我们所处的水平

00:00:46.320 --> 00:00:51.060
然后我们将讨论Java 

00:00:47.910 --> 00:00:53.010
 EE Evolution关于docker和

00:00:51.060 --> 00:00:54.510
微服务一些包装

00:00:53.010 --> 00:00:56.370
您可能需要考虑的事项

00:00:54.510 --> 00:00:58.650
在创建时考虑一下

00:00:56.370 --> 00:01:01.260
应用程序，然后又如何

00:00:58.650 --> 00:01:03.600
使用开放的API规范和

00:01:01.260 --> 00:01:06.119
结论我们将展示几个

00:01:03.600 --> 00:01:08.790
的演示以及我们将尽力保持

00:01:06.119 --> 00:01:11.340
关于Java EE的讨论颇为笼统

00:01:08.790 --> 00:01:13.020
因为我们俩都在为IBM工作，所以我们要

00:01:11.340 --> 00:01:15.810
演示我们知道的事情

00:01:13.020 --> 00:01:19.710
我们习惯了并希望演示

00:01:15.810 --> 00:01:21.320
众神今天对我们微笑，让我们开始吧

00:01:19.710 --> 00:01:26.370
开始了

00:01:21.320 --> 00:01:29.550
那么它们使用的微服务是什么

00:01:26.370 --> 00:01:33.180
组成一个复杂的应用程序使用

00:01:29.550 --> 00:01:35.820
小型独立自主可更换

00:01:33.180 --> 00:01:39.390
通过语言交流的过程

00:01:35.820 --> 00:01:41.550
不可知的api而不是部署

00:01:39.390 --> 00:01:43.890
您将其部署到一个大应用程序中

00:01:41.550 --> 00:01:46.409
很多小块，他们来了

00:01:43.890 --> 00:01:48.090
一些优势，然后是某种

00:01:46.409 --> 00:01:50.159
的复杂性和困难

00:01:48.090 --> 00:01:52.920
同时，所以每当我给

00:01:50.159 --> 00:01:55.590
微粒子的谈话我总是会说走

00:01:52.920 --> 00:01:56.790
看一看不只是选择微

00:01:55.590 --> 00:01:58.200
服务，因为您认为这将

00:01:56.790 --> 00:02:00.720
解决您所有的问题，因为它确实

00:01:58.200 --> 00:02:03.390
有一些额外的复杂性，所以一些

00:02:00.720 --> 00:02:05.280
优点是您可以扩展

00:02:03.390 --> 00:02:09.959
您的应用程序是单独的

00:02:05.280 --> 00:02:13.079
您可以部署微型新版本

00:02:09.959 --> 00:02:14.939
服务很快，但是后来

00:02:13.079 --> 00:02:15.900
从某些缺点

00:02:14.939 --> 00:02:17.790
有

00:02:15.900 --> 00:02:21.930
弹性主义者，这些服务如何相互作用

00:02:17.790 --> 00:02:23.549
以及他们如何互相称呼

00:02:21.930 --> 00:02:27.540
值得一提的事情

00:02:23.549 --> 00:02:29.790
微服务是十二个传真，所以十二个

00:02:27.540 --> 00:02:31.980
因素是一种构建方法

00:02:29.790 --> 00:02:34.109
软件即服务应用程序

00:02:31.980 --> 00:02:36.359
由Heroku的开发人员创建

00:02:34.109 --> 00:02:38.400
虽然我不会说你

00:02:36.359 --> 00:02:40.200
必须遵循所有这些因素，如果

00:02:38.400 --> 00:02:42.750
你想建立一个成功的微型

00:02:40.200 --> 00:02:44.819
服务绝对是一个好的开始

00:02:42.750 --> 00:02:47.159
指向让您思考和拥有

00:02:44.819 --> 00:02:48.989
你的头在正确的空间，所以我

00:02:47.159 --> 00:02:51.959
列出所有我不会去的地方

00:02:48.989 --> 00:02:54.810
今天就对它们全部进行详细介绍， 

00:02:51.959 --> 00:02:57.329
你可以去十二因子网阅读

00:02:54.810 --> 00:02:59.250
关于不同的因素，但是如果你

00:02:57.329 --> 00:03:01.139
在构建时记住这些

00:02:59.250 --> 00:03:03.510
微服务，那么您会发现

00:03:01.139 --> 00:03:05.159
您的应用程序更适合

00:03:03.510 --> 00:03:06.810
云，更适合那种

00:03:05.159 --> 00:03:12.000
您想要的微环境

00:03:06.810 --> 00:03:14.400
服务，所以我们应该寻找什么

00:03:12.000 --> 00:03:16.500
在微服务环境中

00:03:14.400 --> 00:03:18.569
不仅是十二个因素，而且

00:03:16.500 --> 00:03:21.449
一点点也是如此明显

00:03:18.569 --> 00:03:22.590
您一些微服务技术

00:03:21.449 --> 00:03:24.959
可能想看看你怎么样

00:03:22.590 --> 00:03:26.940
保护您的应用程序之一

00:03:24.959 --> 00:03:29.220
微服务的其他考虑

00:03:26.940 --> 00:03:31.739
是因为沟通方面

00:03:29.220 --> 00:03:33.930
您需要考虑容错能力和

00:03:31.739 --> 00:03:36.629
如果你的一个你打算怎么办

00:03:33.930 --> 00:03:37.949
服务下降了另一件事可能

00:03:36.629 --> 00:03:41.129
在看你打算怎么做

00:03:37.949 --> 00:03:43.349
负载平衡或您打算如何

00:03:41.129 --> 00:03:44.489
首先找到服务

00:03:43.349 --> 00:03:45.870
有一些不同的技术

00:03:44.489 --> 00:03:47.340
您将需要注意

00:03:45.870 --> 00:03:49.139
当你试图决定自己

00:03:47.340 --> 00:03:52.739
微服务可能需要

00:03:49.139 --> 00:03:54.840
环境接下来的两个

00:03:52.739 --> 00:03:57.530
直接来自十二个因素

00:03:54.840 --> 00:03:59.370
快速启动并彻底关机

00:03:57.530 --> 00:04:00.659
个别微服务应为

00:03:59.370 --> 00:04:03.269
你可以扔掉的东西

00:04:00.659 --> 00:04:04.829
一旦扔掉你应该

00:04:03.269 --> 00:04:06.750
能够再次启动它

00:04:04.829 --> 00:04:08.280
快速，所以您会听到人们说

00:04:06.750 --> 00:04:10.799
微服务应该是无状态的

00:04:08.280 --> 00:04:13.019
你不想做某种事情

00:04:10.799 --> 00:04:16.289
您存储一些数据的过程

00:04:13.019 --> 00:04:17.669
那是在缓存中并且必须友好

00:04:16.289 --> 00:04:19.320
想到之前

00:04:17.669 --> 00:04:20.729
如果应用程序关闭

00:04:19.320 --> 00:04:24.330
掉下来，你应该能够

00:04:20.729 --> 00:04:26.700
开始一个新的并继续

00:04:24.330 --> 00:04:28.229
朝着微服务的方向发展

00:04:26.700 --> 00:04:29.529
与云原生一起

00:04:28.229 --> 00:04:31.899
应用程序和运动

00:04:29.529 --> 00:04:34.449
到云端，因此占用的空间很小

00:04:31.899 --> 00:04:36.459
在这里有用，因为您要付费

00:04:34.449 --> 00:04:38.619
您正在使用的空间量

00:04:36.459 --> 00:04:40.299
经常，那又是微型的地方

00:04:38.619 --> 00:04:42.159
服务扩展，因为

00:04:40.299 --> 00:04:44.439
你只想扩大规模

00:04:42.159 --> 00:04:45.819
您需要而不必付出很多

00:04:44.439 --> 00:04:50.499
不属于你的空间和事物

00:04:45.819 --> 00:04:51.969
实际使用外部化配置是

00:04:50.499 --> 00:04:54.399
你想做的事情

00:04:51.969 --> 00:04:56.679
微服务再次来自

00:04:54.399 --> 00:04:58.809
十二个因素基本上意味着

00:04:56.679 --> 00:05:02.349
比拥有您的特定应用程序

00:04:58.809 --> 00:05:04.149
具有所有的详细配置

00:05:02.349 --> 00:05:06.939
您想要成为的特定环境

00:05:04.149 --> 00:05:08.409
能够注入该配置，以便可能

00:05:06.939 --> 00:05:10.479
通过环境变量

00:05:08.409 --> 00:05:11.859
示例，这样您就可以重新部署

00:05:10.479 --> 00:05:13.719
您的应用程序有很多不同

00:05:11.859 --> 00:05:15.699
环境，而您刚刚更改了

00:05:13.719 --> 00:05:17.829
注入到的配置

00:05:15.699 --> 00:05:22.269
应用程序您不会紧紧抓住所有

00:05:17.829 --> 00:05:24.159
具有配置目的的应用程序

00:05:22.269 --> 00:05:27.489
与微服务是为了能够

00:05:24.159 --> 00:05:29.979
迭代得更快，并从中获得更多收益

00:05:27.489 --> 00:05:32.229
应用程序，这需要

00:05:29.979 --> 00:05:35.049
能够做出改变并推动他们

00:05:32.229 --> 00:05:38.139
和开发人员的能力需求

00:05:35.049 --> 00:05:39.669
实际运行开发中的东西

00:05:38.139 --> 00:05:42.039
与生产中的相同

00:05:39.669 --> 00:05:43.239
您会发现您的开发人员是否在

00:05:42.039 --> 00:05:45.039
完全不同于

00:05:43.239 --> 00:05:46.959
当您尝试生产什么

00:05:45.039 --> 00:05:48.489
部署到生产中

00:05:46.959 --> 00:05:51.039
有一个问题，这会减慢速度

00:05:48.489 --> 00:05:52.599
开发商之间的时间间隔

00:05:51.039 --> 00:05:55.089
进行第一个代码更改及其

00:05:52.599 --> 00:05:56.739
从一开始就投入生产

00:05:55.089 --> 00:05:59.109
转到麦克风接收器的原因

00:05:56.739 --> 00:06:00.999
看到的是加快那个周期

00:05:59.109 --> 00:06:03.519
具有开发和生产平价

00:06:00.999 --> 00:06:06.219
非常重要，然后是最后一个

00:06:03.519 --> 00:06:07.479
我们要谈的是集装箱化

00:06:06.219 --> 00:06:09.189
关于它的优点

00:06:07.479 --> 00:06:10.569
容器化，但这是你的事

00:06:09.189 --> 00:06:13.439
可能要考虑您是否要搬家

00:06:10.569 --> 00:06:13.439
给麦克风后备人员

00:06:17.860 --> 00:06:23.960
所以很明显我想我已经听过

00:06:21.110 --> 00:06:26.689
很多人说，因为有一个

00:06:23.960 --> 00:06:29.240
 Java太慢的看法

00:06:26.689 --> 00:06:31.789
肿，我认为值得一看

00:06:29.240 --> 00:06:34.370
回顾一下Java的历史

00:06:31.789 --> 00:06:37.339
芦苇不明白我们如何去

00:06:34.370 --> 00:06:39.879
这种感觉，然后我也会

00:06:37.339 --> 00:06:42.919
继续看一些

00:06:39.879 --> 00:06:45.740
行业中的供应商正在努力

00:06:42.919 --> 00:06:49.089
有点偏离这种观点

00:06:45.740 --> 00:06:52.039
 Java是个肿的缓慢

00:06:49.089 --> 00:06:55.009
环境，所以如果我们回顾过去

00:06:52.039 --> 00:06:58.689
 1998年，第一个Java EE诞生了

00:06:55.009 --> 00:07:01.669
少量的规格和

00:06:58.689 --> 00:07:02.899
少数技术及以上

00:07:01.669 --> 00:07:05.990
我们增加了越来越多的岁月

00:07:02.899 --> 00:07:08.800
规格达到点

00:07:05.990 --> 00:07:13.069
我们现在使用Java EE 8和

00:07:08.800 --> 00:07:15.139
 2009年的情况很明显

00:07:13.069 --> 00:07:16.999
有必要的时间表

00:07:15.139 --> 00:07:20.959
一些较小的东西，所以我们开始

00:07:16.999 --> 00:07:23.629
创建配置文件，例如网络

00:07:20.959 --> 00:07:27.050
配置文件，然后为所有Evol平台

00:07:23.629 --> 00:07:31.459
技术，但我认为我们已经

00:07:27.050 --> 00:07:33.439
看到的是您可以创建配置文件

00:07:31.459 --> 00:07:36.080
与客户交谈时的网络个人资料，以及

00:07:33.439 --> 00:07:38.300
我们在DM产品中拥有

00:07:36.080 --> 00:07:40.069
与他们说得很好的个人资料保持一致

00:07:38.300 --> 00:07:42.770
没关系，我喜欢个人资料，但我

00:07:40.069 --> 00:07:44.719
只是想要这种功能，或者实际上我

00:07:42.770 --> 00:07:47.629
不想只我所有的网络个人资料

00:07:44.719 --> 00:07:49.610
需要servlet或servlet和cdi以及

00:07:47.629 --> 00:07:51.229
这样的事情，所以客户

00:07:49.610 --> 00:07:54.620
想要选择

00:07:51.229 --> 00:07:56.180
他们使用的功能使配置文件

00:07:54.620 --> 00:07:58.909
有点帮助，我认为实际上

00:07:56.180 --> 00:08:00.289
配置文件帮助的主要方式是

00:07:58.909 --> 00:08:02.749
他们使您了解什么是

00:08:00.289 --> 00:08:04.399
供应商提供，因此如果供应商说他们

00:08:02.749 --> 00:08:05.629
支持网站资料，那就太好了

00:08:04.399 --> 00:08:06.589
你知道如果你要去那

00:08:05.629 --> 00:08:07.879
供应商，他们拥有所有这些

00:08:06.589 --> 00:08:10.129
能力的一部分

00:08:07.879 --> 00:08:12.529
您不一定需要的规格

00:08:10.129 --> 00:08:15.379
使用它们，有一些

00:08:12.529 --> 00:08:17.330
提供许多

00:08:15.379 --> 00:08:19.629
超越了

00:08:17.330 --> 00:08:22.309
网页个人资料和完整平台

00:08:19.629 --> 00:08:25.009
环境，以便他们提供缩减

00:08:22.309 --> 00:08:26.689
我猜最常见的例子

00:08:25.009 --> 00:08:29.949
是Tomcat，这只是一种

00:08:26.689 --> 00:08:29.949
基本的Web容器Capab 

00:08:30.210 --> 00:08:34.880
但是接下来发生了什么

00:08:32.519 --> 00:08:39.019
过去几年，我们在

00:08:34.880 --> 00:08:41.310
韦伯斯特五年前与自由

00:08:39.019 --> 00:08:42.870
实际上有些环境给

00:08:41.310 --> 00:08:44.640
您选择的能力

00:08:42.870 --> 00:08:47.070
究竟您具有哪些功能

00:08:44.640 --> 00:08:49.290
开始要使用so而不是

00:08:47.070 --> 00:08:50.940
当将Java EE视为平台时

00:08:49.290 --> 00:08:53.220
你必须把整个事情

00:08:50.940 --> 00:08:55.079
它可能会肿胀，可能

00:08:53.220 --> 00:08:57.720
慢，等等，你可以开始思考

00:08:55.079 --> 00:09:00.480
关于Java EE的一系列功能

00:08:57.720 --> 00:09:01.829
 API集，然后选择哪个API API 

00:09:00.480 --> 00:09:03.120
你想用来解决你的

00:09:01.829 --> 00:09:06.149
特定的业务问题

00:09:03.120 --> 00:09:09.089
开放自由和韦伯斯特自由

00:09:06.149 --> 00:09:11.459
我们有这种功能的概念

00:09:09.089 --> 00:09:14.100
你可以看到我的指针不会点亮

00:09:11.459 --> 00:09:15.899
在右侧，这只是一个

00:09:14.100 --> 00:09:19.470
服务器配置的示例

00:09:15.899 --> 00:09:21.600
将使用jax-rs 2.1并打开api 3.0 

00:09:19.470 --> 00:09:23.310
因此您可能在此示例中

00:09:21.600 --> 00:09:26.070
休息服务，并希望公开

00:09:23.310 --> 00:09:29.209
 api以一些文档的形式出现

00:09:26.070 --> 00:09:32.250
然后可以由某些消费者使用

00:09:29.209 --> 00:09:34.199
然后我们让您将其缩小

00:09:32.250 --> 00:09:35.760
服务器关闭，所以它只包含那些

00:09:34.199 --> 00:09:36.990
这两个功能或任何

00:09:35.760 --> 00:09:39.990
这些能力的能力

00:09:36.990 --> 00:09:41.880
依靠，所以你得到一个很好的约束

00:09:39.990 --> 00:09:45.180
恰好适合的包装

00:09:41.880 --> 00:09:48.540
目的是在野火财富冰暖有

00:09:45.180 --> 00:09:51.060
它有这个分数概念作品

00:09:48.540 --> 00:09:53.820
略有不同，因此基于

00:09:51.060 --> 00:09:56.070
 Maven的依赖声明，所以你

00:09:53.820 --> 00:09:57.990
宣布哪个野外是野蝇

00:09:56.070 --> 00:10:00.510
你告诉我我在IBM工作

00:09:57.990 --> 00:10:02.430
因为我不能说野蝇将你蜂拥而至

00:10:00.510 --> 00:10:04.380
选择并选择您的野蝇群

00:10:02.430 --> 00:10:06.089
基于依赖关系的分数，而您

00:10:04.380 --> 00:10:08.490
做了一个pom，然后构建将

00:10:06.089 --> 00:10:10.350
输出可执行或可运行的jar 

00:10:08.490 --> 00:10:15.240
然后可以运行包括

00:10:10.350 --> 00:10:18.750
这些功能，这就是

00:10:15.240 --> 00:10:20.360
方面和我们未曾见过的方式

00:10:18.750 --> 00:10:23.250
必须作为一组规范

00:10:20.360 --> 00:10:25.740
进化了，但是供应商如何提供

00:10:23.250 --> 00:10:27.839
 KDE功能使它变得更多

00:10:25.740 --> 00:10:29.910
合适，更适合做

00:10:27.839 --> 00:10:32.370
微服务远不止于此

00:10:29.910 --> 00:10:34.920
我有种感觉

00:10:32.370 --> 00:10:36.390
没有像我们需要的那样发展

00:10:34.920 --> 00:10:39.779
为了满足以下要求

00:10:36.390 --> 00:10:41.880
微服务等一群供应商

00:10:39.779 --> 00:10:44.639
聚在一起形成微探针

00:10:41.880 --> 00:10:46.230
我，然后某个时候

00:10:44.639 --> 00:10:48.630
移到日蚀，所以现在有

00:10:46.230 --> 00:10:50.310
 Eclipse微型配置文件项目和

00:10:48.630 --> 00:10:52.500
 Eclipse微型概要文件的目的是

00:10:50.310 --> 00:10:58.050
真正发展和孵化， 

00:10:52.500 --> 00:11:01.440
试用以下规范

00:10:58.050 --> 00:11:01.800
在微服务领域，第一个

00:11:01.440 --> 00:11:04.709
一

00:11:01.800 --> 00:11:07.370
所以微轮廓1 0很漂亮

00:11:04.709 --> 00:11:09.600
基本它只是引用了三个e 

00:11:07.370 --> 00:11:11.160
规格，所以它说你要

00:11:09.600 --> 00:11:12.720
想要使用您想要的jax-rs 

00:11:11.160 --> 00:11:14.220
使用CDI进行注射，您将

00:11:12.720 --> 00:11:17.519
想要使用JSONP与

00:11:14.220 --> 00:11:20.550
杰森，然后它创建了研究

00:11:17.519 --> 00:11:22.709
创建自己的规范

00:11:20.550 --> 00:11:25.110
第一个是配置，这再次与

00:11:22.709 --> 00:11:27.300
凯特说的关于12因子的话

00:11:25.110 --> 00:11:29.160
配置规范可让您外部化

00:11:27.300 --> 00:11:31.290
应用程序外部的配置

00:11:29.160 --> 00:11:32.639
所以你可以拥有这个可部署的单位

00:11:31.290 --> 00:11:34.680
在开始和移动时进行构建

00:11:32.639 --> 00:11:36.089
通过您的管道并在

00:11:34.680 --> 00:11:37.529
您不必使用不同的环境

00:11:36.089 --> 00:11:38.940
重建那件事，你只是改变

00:11:37.529 --> 00:11:41.790
通过时的配置

00:11:38.940 --> 00:11:43.170
我不会去的管道容错

00:11:41.790 --> 00:11:46.519
通过所有这些，但我会挑选出来

00:11:43.170 --> 00:11:49.829
我的一些最爱，所以容错

00:11:46.519 --> 00:11:52.050
当您开始考虑组装时

00:11:49.829 --> 00:11:54.740
一组应用程序

00:11:52.050 --> 00:11:57.029
协作服务或微服务

00:11:54.740 --> 00:11:59.519
那么你需要开始处理

00:11:57.029 --> 00:12:01.410
像这样的问题

00:11:59.519 --> 00:12:03.449
网络参与和事实

00:12:01.410 --> 00:12:05.279
可能是另一个团队负责

00:12:03.449 --> 00:12:06.990
部署您依赖的东西

00:12:05.279 --> 00:12:09.870
在那件事上可能会消失

00:12:06.990 --> 00:12:12.149
他们可能会升级，可能会失败

00:12:09.870 --> 00:12:15.149
它平放在脸上或其他任何故障

00:12:12.149 --> 00:12:16.980
公差确实是定义一些API 

00:12:15.149 --> 00:12:18.750
您定义的漂亮注释

00:12:16.980 --> 00:12:21.630
您要顺序使用的策略

00:12:18.750 --> 00:12:23.310
处理潜力和

00:12:21.630 --> 00:12:25.319
的可用性或不可靠性

00:12:23.310 --> 00:12:26.670
您所依赖的服务

00:12:25.319 --> 00:12:29.519
标准化，我认为这就像五个

00:12:26.670 --> 00:12:32.759
像隔板一样的图案

00:12:29.519 --> 00:12:35.279
和断路器有点

00:12:32.759 --> 00:12:37.139
谢谢你，还有定义的能力

00:12:35.279 --> 00:12:39.149
备用服务，例如，如果您

00:12:37.139 --> 00:12:41.100
重试服务五次，您仍然

00:12:39.149 --> 00:12:45.569
没有得到一个体面的答案，你

00:12:41.100 --> 00:12:48.120
可以去，然后打电话给后备

00:12:45.569 --> 00:12:51.600
所以我要做的只是演示

00:12:48.120 --> 00:12:57.670
上帝允许并快速

00:12:51.600 --> 00:13:00.840
正确尺寸的演示

00:12:57.670 --> 00:13:03.910
服务器环境，因此我将使用

00:13:00.840 --> 00:13:07.540
开放自由开放限制是

00:13:03.910 --> 00:13:09.190
我们这的开源应用服务器

00:13:07.540 --> 00:13:15.880
不是我的笔记本电脑，所以我会很漂亮

00:13:09.190 --> 00:13:23.830
你们大家能看到很慢吗

00:13:15.880 --> 00:13:25.330
前面好吧，我会讲讲的，所以我们

00:13:23.830 --> 00:13:27.880
我要做的就是打开门

00:13:25.330 --> 00:13:29.920
自由点IO，我已经下载了一个zip 

00:13:27.880 --> 00:13:33.490
服务器的软件包zip软件包

00:13:29.920 --> 00:13:35.680
 76 76兆字节，其中包括完整的Java 

00:13:33.490 --> 00:13:37.840
七种功能和微观特征

00:13:35.680 --> 00:13:40.630
 1.2最新功能

00:13:37.840 --> 00:13:47.200
微型配置文件的安装是

00:13:40.630 --> 00:13:49.900
解压缩到磁盘上，所以第三次很幸运

00:13:47.200 --> 00:13:51.310
所以我们在这里有这个目录

00:13:49.900 --> 00:13:53.110
那是服务器和

00:13:51.310 --> 00:13:54.820
那是第一件事，这是服务器

00:13:53.110 --> 00:13:57.340
运行时，但实际上不是服务器

00:13:54.820 --> 00:13:58.510
实例或任何服务器配置，因此

00:13:57.340 --> 00:14:01.720
我要做的第一件事就是

00:13:58.510 --> 00:14:09.790
需要找到反斜杠是创建一个

00:14:01.720 --> 00:14:13.500
服务器确定，所以我创建了一个默认

00:14:09.790 --> 00:14:21.010
服务器，我可以运行该服务器

00:14:13.500 --> 00:14:23.560
所以我有反斜杠

00:14:21.010 --> 00:14:26.230
好吧，我不认为我提到过

00:14:23.560 --> 00:14:28.870
很多供应商都非常关注

00:14:26.230 --> 00:14:31.530
付出很多努力

00:14:28.870 --> 00:14:33.850
服务启动，例如

00:14:31.530 --> 00:14:35.890
网站Liberty开始于

00:14:33.850 --> 00:14:39.250
其他应用程序的秒数

00:14:35.890 --> 00:14:40.890
服务器也这样做，所以

00:14:39.250 --> 00:14:43.330
我想要的浏览器不是吗

00:14:40.890 --> 00:14:46.780
您甚至如何为我准备好网址

00:14:43.330 --> 00:14:48.370
谢谢哦，我们可以看到它已经打开了

00:14:46.780 --> 00:14:49.930
自由运行我没有任何应用程序

00:14:48.370 --> 00:14:53.320
部署只是一种默认

00:14:49.930 --> 00:14:55.870
登陆页面，因此正在运行

00:14:53.320 --> 00:15:00.010
运行一些功能，所以我

00:14:55.870 --> 00:15:02.560
要做的就是进入服务器

00:15:00.010 --> 00:15:04.370
目录

00:15:02.560 --> 00:15:07.070
这是服务器

00:15:04.370 --> 00:15:11.210
配置很重要，请记住

00:15:07.070 --> 00:15:18.970
编辑器我们拥有Visual Studio 

00:15:11.210 --> 00:15:18.970
代码，所以如果我只是编辑server.xml 

00:15:19.210 --> 00:15:24.890
这只是默认服务器

00:15:21.470 --> 00:15:27.490
现在的配置就是弹出

00:15:24.890 --> 00:15:27.490
在那一个

00:15:32.260 --> 00:15:37.990
你有多少钱运行多少

00:15:34.200 --> 00:15:39.700
是的，所以您可以看到默认

00:15:37.990 --> 00:15:41.380
我们拥有的服务器配置

00:15:39.700 --> 00:15:43.240
这个特殊的分布是

00:15:41.380 --> 00:15:47.590
将要放入JSP，但可以说我只是

00:15:43.240 --> 00:15:50.170
想做小服务程序，我们将把

00:15:47.590 --> 00:15:52.150
 Servlet 3.1版本

00:15:50.170 --> 00:15:53.890
我可以保存下来，您可以看到

00:15:52.150 --> 00:15:57.580
运行它的服务器端

00:15:53.890 --> 00:16:01.210
说好吧，我不再需要JSP 2.3或

00:15:57.580 --> 00:16:03.760
表达式语言3 0所以现在我有了

00:16:01.210 --> 00:16:06.430
仅运行servlet的服务器

00:16:03.760 --> 00:16:08.020
刚捡了所有的东西，但是我已经

00:16:06.430 --> 00:16:11.080
完成开发工作后，我建立了自己

00:16:08.020 --> 00:16:16.180
应用程序，我现在要打包

00:16:11.080 --> 00:16:18.610
那东西放到发行版中，所以我

00:16:16.180 --> 00:16:19.990
要打包服务器，我

00:16:18.610 --> 00:16:26.890
使其成为可执行文件或

00:16:19.990 --> 00:16:29.970
可运行的jar，所以我需要指定和

00:16:26.890 --> 00:16:29.970
 [音乐] 

00:16:32.310 --> 00:16:40.120
我假设这是一个逗号

00:16:35.340 --> 00:16:42.550
好的，正如我在开始时所说的

00:16:40.120 --> 00:16:43.180
演示至少下载包是76 

00:16:42.550 --> 00:16:45.010
兆字节

00:16:43.180 --> 00:16:54.250
我现在要打包服务器

00:16:45.010 --> 00:16:56.860
我们可以看到现在大约有15个

00:16:54.250 --> 00:16:59.980
一半的Meg服务器分布

00:16:56.860 --> 00:17:01.670
可以只运行服务器，我可以运行

00:16:59.980 --> 00:17:04.820
现在这样

00:17:01.670 --> 00:17:04.820
 [音乐] 

00:17:07.569 --> 00:17:13.730
我认为几乎每个供应商

00:17:11.379 --> 00:17:15.409
现在支持可运行的罐子，但是我已经

00:17:13.730 --> 00:17:17.000
待会儿我们会讨论是否

00:17:15.409 --> 00:17:22.009
可运行的罐子是对的，或者

00:17:17.000 --> 00:17:27.740
不好，如果我返回浏览器

00:17:22.009 --> 00:17:29.809
只需刷新该页面，是的，您可以

00:17:27.740 --> 00:17:32.210
看到服务器正在运行，这仅仅是

00:17:29.809 --> 00:17:39.500
一个例子，我现在就把它杀死

00:17:32.210 --> 00:17:43.299
不会给我们带来任何麻烦

00:17:39.500 --> 00:17:43.299
马上回到幻灯片

00:17:49.860 --> 00:17:53.000
 [音乐] 

00:17:53.649 --> 00:18:01.820
好吧，我没有专心于

00:17:56.659 --> 00:18:03.379
我需要做的幻灯片可能不会做

00:18:01.820 --> 00:18:07.509
从一开始就行了

00:18:03.379 --> 00:18:14.990
是的，所以大概要做调频功能

00:18:07.509 --> 00:18:18.409
外星人键盘不好意思

00:18:14.990 --> 00:18:21.529
所以我们已经看到了另一种选择

00:18:18.409 --> 00:18:25.070
使用Java re功能的方法

00:18:21.529 --> 00:18:30.590
现在我想以

00:18:25.070 --> 00:18:32.000
概念，所以这里的人正在使用docker好的

00:18:30.590 --> 00:18:33.159
当然您可能对此有更多了解

00:18:32.000 --> 00:18:36.379
比我

00:18:33.159 --> 00:18:40.909
谁在做微服务，但没有

00:18:36.379 --> 00:18:42.019
和docker好吧，我会对

00:18:40.909 --> 00:18:46.100
知道你在用什么，但也许不知道

00:18:42.019 --> 00:18:49.039
刚才我们看到了很强的相关性

00:18:46.100 --> 00:18:53.000
在微服务和docker之间

00:18:49.039 --> 00:18:55.460
容器，所以容器是一个概念

00:18:53.000 --> 00:18:59.899
建立在两种功能之上

00:18:55.460 --> 00:19:01.970
一个是隔离的概念

00:18:59.899 --> 00:19:05.960
您可以或名称空间

00:19:01.970 --> 00:19:10.360
这样就可以避免名字的闪烁

00:19:05.960 --> 00:19:13.039
在环境中的某些事物

00:19:10.360 --> 00:19:16.129
 Linux具有名称空间的概念，因此

00:19:13.039 --> 00:19:19.220
这样可以避免文件冲突

00:19:16.129 --> 00:19:22.759
系统上的用户和

00:19:19.220 --> 00:19:25.129
网络等，这样的帮助

00:19:22.759 --> 00:19:26.720
你避免在那些事情上发生冲突

00:19:25.129 --> 00:19:29.269
然后它具有控制的概念

00:19:26.720 --> 00:19:31.190
组或查看组，然后让您

00:19:29.269 --> 00:19:34.669
划分系统资源

00:19:31.190 --> 00:19:36.710
因此分配一定数量的CPU或

00:19:34.669 --> 00:19:40.009
一定数量的内存

00:19:36.710 --> 00:19:43.070
特定的容器，因此控件

00:19:40.009 --> 00:19:44.840
团体有助于避免爱管闲事的概念

00:19:43.070 --> 00:19:47.149
邻居，如果你听说过

00:19:44.840 --> 00:19:49.789
之前但知道它知道它知道

00:19:47.149 --> 00:19:51.230
吵闹的邻居，所以名字空间的事

00:19:49.789 --> 00:19:53.059
是爱管闲事的邻居，因为你不能

00:19:51.230 --> 00:19:55.669
看到你邻居的东西控制

00:19:53.059 --> 00:19:57.259
组是吵闹的邻居

00:19:55.669 --> 00:19:59.659
本质上说，如果您患有严重疾病

00:19:57.259 --> 00:20:01.670
表现微服务之类的

00:19:59.659 --> 00:20:03.650
在同一主机上运行

00:20:01.670 --> 00:20:05.510
因为你可以限制资源

00:20:03.650 --> 00:20:07.670
它可以使用它不能然后整个

00:20:05.510 --> 00:20:10.700
系统，所以我认为在Java re'世界中

00:20:07.670 --> 00:20:12.740
多年来，客户已经部署

00:20:10.700 --> 00:20:15.140
多个应用程序相同

00:20:12.740 --> 00:20:18.080
应用服务器实例结束

00:20:15.140 --> 00:20:19.940
这些年变得不那么普遍了

00:20:18.080 --> 00:20:23.330
模式，因为这种噪音在嘈杂

00:20:19.940 --> 00:20:24.650
邻居问题，因为会

00:20:23.330 --> 00:20:26.420
发生是因为他们部署了多个

00:20:24.650 --> 00:20:28.220
一个应用程序可能

00:20:26.420 --> 00:20:30.020
表现不好或需要更多

00:20:28.220 --> 00:20:31.550
资源，您最终会饿死

00:20:30.020 --> 00:20:35.510
资源的其他应用

00:20:31.550 --> 00:20:37.160
造成自己的问题，所以让我们

00:20:35.510 --> 00:20:41.240
看一下Docker的一些特质

00:20:37.160 --> 00:20:43.190
所以码头工人提供的东西

00:20:41.240 --> 00:20:46.520
 docker文件的概念

00:20:43.190 --> 00:20:49.610
文件描述了你什么时候你

00:20:46.520 --> 00:20:51.230
建立您想要的图像

00:20:49.610 --> 00:20:54.500
在此包含图像

00:20:51.230 --> 00:20:56.510
一个特殊的例子，我们已经有一个

00:20:54.500 --> 00:21:00.530
定义的WebSphere Liberty映像

00:20:56.510 --> 00:21:03.890
我们要向其中添加墙文件

00:21:00.530 --> 00:21:06.200
这样便可以建立另一层

00:21:03.890 --> 00:21:08.000
在顶部包括另一层

00:21:06.200 --> 00:21:10.790
那场战争，然后你可以得到

00:21:08.000 --> 00:21:14.450
映像，然后可以进行部署

00:21:10.790 --> 00:21:16.700
作为一个容器，所以码头工人给你

00:21:14.450 --> 00:21:19.010
这种一致的定义方式

00:21:16.700 --> 00:21:23.720
包装也是一种方式

00:21:19.010 --> 00:21:25.730
独立于Java和

00:21:23.720 --> 00:21:26.960
微服务是多语言的

00:21:25.730 --> 00:21:28.820
概念你不会只是

00:21:26.960 --> 00:21:30.800
一定在您的组织中

00:21:28.820 --> 00:21:33.410
部署您可能要部署的Java 

00:21:30.800 --> 00:21:34.880
许多其他类型的事情，所以这给

00:21:33.410 --> 00:21:36.200
您是描述所有

00:21:34.880 --> 00:21:39.020
这些东西以一致的方式

00:21:36.200 --> 00:21:41.420
包括诸如

00:21:39.020 --> 00:21:43.190
您正在部署的东西，例如什么

00:21:41.420 --> 00:21:46.700
我需要提供端口

00:21:43.190 --> 00:21:48.650
我谈论过的那种东西

00:21:46.700 --> 00:21:52.370
层次是什么

00:21:48.650 --> 00:21:55.610
层是当您重复使用它们并构建时

00:21:52.370 --> 00:21:58.040
那些层之上的东西可以是

00:21:55.610 --> 00:22:00.110
被环境缓存，这意味着

00:21:58.040 --> 00:22:02.000
您的磁盘使用量较少，因为它

00:22:00.110 --> 00:22:03.920
只是将其缓存，然后结束，所以

00:22:02.000 --> 00:22:06.500
那种对你的定义

00:22:03.920 --> 00:22:08.570
然后建立，除非我/因为

00:22:06.500 --> 00:22:10.760
你不动，因为他们被缓存

00:22:08.570 --> 00:22:14.170
每次您在顶部建立新图像时

00:22:10.760 --> 00:22:14.170
你不会四处走动

00:22:14.270 --> 00:22:20.280
你有一个一致的API，所以码头工人

00:22:17.910 --> 00:22:23.130
定义诸如您可以做的事情

00:22:20.280 --> 00:22:24.690
日志记录，指标和数量等

00:22:23.130 --> 00:22:26.340
那些东西是一致的

00:22:24.690 --> 00:22:28.140
跨越不同类型的事物

00:22:26.340 --> 00:22:30.840
你选择放入里面

00:22:28.140 --> 00:22:34.080
您的Docker容器和最终容器

00:22:30.840 --> 00:22:36.000
事情是不变的，所以你可以和

00:22:34.080 --> 00:22:37.740
这又与12个因素有关

00:22:36.000 --> 00:22:39.330
使事物本质上不可变

00:22:37.740 --> 00:22:41.250
全力以赴

00:22:39.330 --> 00:22:43.260
而不是指外面的事情

00:22:41.250 --> 00:22:45.270
这意味着内容不

00:22:43.260 --> 00:22:46.679
移动时行为会有所不同

00:22:45.270 --> 00:22:48.360
它通过您的管道，因为他们是

00:22:46.679 --> 00:22:50.160
不依赖外部事物

00:22:48.360 --> 00:22:59.820
码头工人以外的环境

00:22:50.160 --> 00:23:03.240
容器好，所以我们要去看看

00:22:59.820 --> 00:23:05.160
现在另一个演示，我要去

00:23:03.240 --> 00:23:07.860
要做的就是与IBM创建一个项目

00:23:05.160 --> 00:23:11.610
云开发人员工具CLI 

00:23:07.860 --> 00:23:14.070
满口的名字，但基本上都在

00:23:11.610 --> 00:23:16.919
 IBM我们有几种不同的方式

00:23:14.070 --> 00:23:18.690
您生成一个入门项目，所以我们

00:23:16.919 --> 00:23:20.580
有一个CLI，您可以通过IBM进入

00:23:18.690 --> 00:23:22.440
云，还有一个网络圈

00:23:20.580 --> 00:23:24.510
自由源特定页面，它们

00:23:22.440 --> 00:23:26.070
都生成类似的应用程序，但是

00:23:24.510 --> 00:23:27.720
它只是给您一个不同的条目

00:23:26.070 --> 00:23:30.059
点，所以我要产生一些东西

00:23:27.720 --> 00:23:32.549
然后我将展示如何构建和运行

00:23:30.059 --> 00:23:35.070
 Maven和码头工人，然后如何

00:23:32.549 --> 00:23:37.980
实际使用市长和博士学位

00:23:35.070 --> 00:23:40.500
持续部署您的环境

00:23:37.980 --> 00:23:42.480
应用程序和Reis，无需重新启动

00:23:40.500 --> 00:23:43.830
容器，因为如果您必须

00:23:42.480 --> 00:23:45.840
每次您重新启动容器

00:23:43.830 --> 00:23:47.280
想看到一个更新，然后那种

00:23:45.840 --> 00:23:51.299
减慢了您的开发时间，所以

00:23:47.280 --> 00:23:53.760
只是进行开发的好方法，所以我

00:23:51.299 --> 00:23:56.220
将在虚拟机中运行，因为

00:23:53.760 --> 00:23:58.110
我正在运行Windows，但我发现

00:23:56.220 --> 00:24:00.480
码头工人的行为要好一点

00:23:58.110 --> 00:24:01.470
我正在运行Linux，所以这就是演示的原因

00:24:00.480 --> 00:24:02.850
较早的时候运行有点慢，因为

00:24:01.470 --> 00:24:06.450
我已经在该虚拟机中运行

00:24:02.850 --> 00:24:09.990
背景，以便创建一个项目我

00:24:06.450 --> 00:24:12.419
将运行VX开发人员创建，因此VX开发人员是

00:24:09.990 --> 00:24:13.950
我已安装的CLI工具及其

00:24:12.419 --> 00:24:16.440
在这里问我是否要登录

00:24:13.950 --> 00:24:18.750
如果我登录到bluemix，则bluemix 

00:24:16.440 --> 00:24:20.970
是我们的IBM云，那么我可以将其带到

00:24:18.750 --> 00:24:23.190
在云中提供实际服务

00:24:20.970 --> 00:24:25.140
对我来说，像Cloudant之类的东西

00:24:23.190 --> 00:24:26.340
我们的Watson服务，但现在我是

00:24:25.140 --> 00:24:27.840
将继续运行而没有日志

00:24:26.340 --> 00:24:30.870
它只是不会做任何事情

00:24:27.840 --> 00:24:33.390
预配件，然后去

00:24:30.870 --> 00:24:35.280
检索什么启动器，以便我可以选择我的

00:24:33.390 --> 00:24:37.230
起点，在这里我要

00:24:35.280 --> 00:24:39.870
选择我想要微服务， 

00:24:37.230 --> 00:24:42.600
然后我有一些语言选择

00:24:39.870 --> 00:24:52.020
您可以在顶部看到我们没有

00:24:42.600 --> 00:24:52.890
如果那足够大，希望你们

00:24:52.020 --> 00:24:57.090
可以看到

00:24:52.890 --> 00:25:00.840
但是四个选项是Java云母

00:24:57.090 --> 00:25:03.390
配置文件Java EE节点Python，然后

00:25:00.840 --> 00:25:05.970
 Java春天，所以我要选择微型

00:25:03.390 --> 00:25:08.010
对Java EE进行概要分析，因为这是一个主题

00:25:05.970 --> 00:25:12.480
这次演讲的内容是

00:25:08.010 --> 00:25:17.400
项目并创建它，我可以将其关闭

00:25:12.480 --> 00:25:19.980
由于Wi-Fi可能会或可能会继续

00:25:17.400 --> 00:25:21.240
不能愉快地产生，所以我匹配一个

00:25:19.980 --> 00:25:23.940
切换到我创建的一个

00:25:21.240 --> 00:25:27.960
在此之前， 

00:25:23.940 --> 00:25:33.030
背景，所以我可以看看

00:25:27.960 --> 00:25:35.430
我之前生成的代码等等

00:25:33.030 --> 00:25:36.930
这是当您生成一个

00:25:35.430 --> 00:25:39.780
应用程序，你会得到一大堆

00:25:36.930 --> 00:25:41.730
内容，您将得到一个pom文件来构建它

00:25:39.780 --> 00:25:44.340
您会得到一个docker文件来运行它

00:25:41.730 --> 00:25:46.590
如果你愿意的话，你也会得到一些掌舵

00:25:44.340 --> 00:25:48.000
使用头盔和一些bluemix运行

00:25:46.590 --> 00:25:49.770
如果要创建特定的文件

00:25:48.000 --> 00:25:52.710
部署到的工具链和管道

00:25:49.770 --> 00:25:57.150
 bluemix，因此您可以获得一整套东西

00:25:52.710 --> 00:25:59.850
准备好您可以开始了，我

00:25:57.150 --> 00:26:02.700
可能想要构建我的应用程序

00:25:59.850 --> 00:26:04.770
令人羡慕的卸载，所以它设置为

00:26:02.700 --> 00:26:08.160
在这种情况下运行Liberty是我们的Java 

00:26:04.770 --> 00:26:10.950
 EE微型配置文件首选供应商及其

00:26:08.160 --> 00:26:12.960
将构建应用程序然后启动

00:26:10.950 --> 00:26:14.820
 Liberty服务器并实际运行

00:26:12.960 --> 00:26:16.620
针对服务的集成测试

00:26:14.820 --> 00:26:18.210
你可以看到那里的健康状况

00:26:16.620 --> 00:26:19.950
端点以确保应用程序

00:26:18.210 --> 00:26:23.430
正常运行，然后完成

00:26:19.950 --> 00:26:26.220
建立，然后我需要建立我的

00:26:23.430 --> 00:26:29.190
码头集装箱，所以我有一个码头工人

00:26:26.220 --> 00:26:31.200
文件就在这里，我们可以

00:26:29.190 --> 00:26:34.170
看看，所以你可以看到它基于

00:26:31.200 --> 00:26:36.030
在WebSphere Liberty映像上，因此

00:26:34.170 --> 00:26:37.980
 WebSphere Liberty中包含大量图像

00:26:36.030 --> 00:26:39.070
您可以检查的集线器，然后

00:26:37.980 --> 00:26:41.620
我们只是在复制

00:26:39.070 --> 00:26:48.490
从服务器内容到

00:26:41.620 --> 00:26:53.650
容器，所以如果我构建它并标记

00:26:48.490 --> 00:26:56.500
它与J一个演示开始建立我的

00:26:53.650 --> 00:26:58.570
容器，正如Graham所说的那样

00:26:56.500 --> 00:27:01.270
缓存，所以您可以看到它已被使用

00:26:58.570 --> 00:27:03.130
应用程序的缓存版本

00:27:01.270 --> 00:27:11.200
服务器，所以它很快

00:27:03.130 --> 00:27:13.960
打造酷，这样就可以了，现在我可以

00:27:11.200 --> 00:27:16.360
运行我的容器，这样我就可以运行它

00:27:13.960 --> 00:27:17.680
与码头工人运行，然后它将

00:27:16.360 --> 00:27:19.570
启动，我可以访问我的

00:27:17.680 --> 00:27:22.630
应用程序，那都很好

00:27:19.570 --> 00:27:24.460
但在这种情况下，我要做一些

00:27:22.630 --> 00:27:26.410
更改我的应用程序，因此

00:27:24.460 --> 00:27:29.680
我要做的是使用

00:27:26.410 --> 00:27:32.230
码头工人卷，所以我做了一个码头工人我

00:27:29.680 --> 00:27:35.050
需要指定端口，所以我要

00:27:32.230 --> 00:27:37.740
指定90-80作为端口，然后我将

00:27:35.050 --> 00:27:44.620
指定我要挂载的音量

00:27:37.740 --> 00:27:47.380
认为我的音量在Jone演示上，我

00:27:44.620 --> 00:27:53.490
知道我的服务器在我的目标内

00:27:47.380 --> 00:27:53.490
目录，所以它在目标哦自由

00:27:54.600 --> 00:28:06.550
 wlp好的，实际上可以打印和WP用户

00:28:04.080 --> 00:28:08.050
服务器，它被称为默认

00:28:06.550 --> 00:28:10.270
服务器是默认服务器名称

00:28:08.050 --> 00:28:12.250
它得到了，然后我要

00:28:10.270 --> 00:28:14.290
将其映射到config目录，以便

00:28:12.250 --> 00:28:16.990
为此配置目录

00:28:14.290 --> 00:28:19.240
 docker容器，以便您可以

00:28:16.990 --> 00:28:20.710
将您的配置放在那里，然后泊坞窗

00:28:19.240 --> 00:28:25.170
 Lib C的图片只会接您

00:28:20.710 --> 00:28:28.800
配置，然后我指定了名称

00:28:25.170 --> 00:28:28.800
我的容器

00:28:29.950 --> 00:28:33.860
这样就可以启动Liberty服务器

00:28:32.360 --> 00:28:38.150
你可以看到日志出来了

00:28:33.860 --> 00:28:41.030
在那里，它应该拿起

00:28:38.150 --> 00:28:42.770
我在其中拥有的server.xml内容

00:28:41.030 --> 00:28:46.220
目标目录，所以如果我告诉你我的

00:28:42.770 --> 00:28:47.809
快速定位目标目录

00:28:46.220 --> 00:28:49.730
看到我做环境并安装时

00:28:47.809 --> 00:28:51.530
它在这里放了一个自由，所以我有一个整体

00:28:49.730 --> 00:28:56.090
安装的本地版本的Liberty 

00:28:51.530 --> 00:28:58.940
对我来说，然后在用户服务器内部

00:28:56.090 --> 00:29:00.470
默认服务器目录，然后我有

00:28:58.940 --> 00:29:03.230
我在这里看到的配置是

00:29:00.470 --> 00:29:05.540
与格雷厄姆非常相似

00:29:03.230 --> 00:29:07.190
显示较早，如果您选择微型

00:29:05.540 --> 00:29:09.860
服务，那么您会获得微观档案

00:29:07.190 --> 00:29:14.090
自由市场的1o功能

00:29:09.860 --> 00:29:15.440
个人资料功能，因此我的应用程序现在

00:29:14.090 --> 00:29:21.860
运行，我应该能够访问

00:29:15.440 --> 00:29:23.480
所以如果我去这个URL那么

00:29:21.860 --> 00:29:25.669
应该告诉我我的申请是否

00:29:23.480 --> 00:29:27.500
运行时，我在以下位置获得健康终结点

00:29:25.669 --> 00:29:29.090
这只是杰森的那一刻

00:29:27.500 --> 00:29:34.160
返回，但他们的目标是

00:29:29.090 --> 00:29:35.990
曾经的微轮廓健康

00:29:34.160 --> 00:29:40.700
规格可用，我们将

00:29:35.990 --> 00:29:43.270
切换到使用我也有一个

00:29:40.700 --> 00:29:47.750
端点示例，所以如果我转到v1 

00:29:43.270 --> 00:29:50.540
然后它说一些数据已经

00:29:47.750 --> 00:29:54.380
打印出来，所以如果我回去，我可以

00:29:50.540 --> 00:29:56.330
实际更新我的应用程序，因此

00:29:54.380 --> 00:30:01.000
例子在这里运行，它只是说

00:29:56.330 --> 00:30:10.099
一些数据，所以我可以更新为

00:30:01.000 --> 00:30:12.859
打个招呼，然后我可以保存

00:30:10.099 --> 00:30:16.679
现在您可以实际设置Liberty 

00:30:12.859 --> 00:30:18.659
在vs代码中自动更新

00:30:16.679 --> 00:30:21.389
但是为了这个演示，因为我想

00:30:18.659 --> 00:30:23.580
保持一点供应商不可知我

00:30:21.389 --> 00:30:25.440
只是要显示正在运行的Maven， 

00:30:23.580 --> 00:30:29.609
其他一些供应商也有选择

00:30:25.440 --> 00:30:31.049
您可以在其中实际运行Maven任务

00:30:29.609 --> 00:30:32.279
然后将为您执行此更新

00:30:31.049 --> 00:30:34.499
我们会在后台运行

00:30:32.279 --> 00:30:39.479
这样您就可以看到我以前的应用

00:30:34.499 --> 00:30:41.340
如果我看到一张CD，就可以创建

00:30:39.479 --> 00:30:43.229
我要去做一个MDM包

00:30:41.340 --> 00:30:46.200
复制我刚才的包

00:30:43.229 --> 00:30:47.849
更改，以便再次编译

00:30:46.200 --> 00:30:50.759
我所有的课程，然后将其复制

00:30:47.849 --> 00:30:53.580
跨越，我们应该看到服务器在

00:30:50.759 --> 00:30:55.139
左侧视图是

00:30:53.580 --> 00:30:56.759
获得了一些更新，因此发现

00:30:55.139 --> 00:30:58.259
没有功能上的更新

00:30:56.759 --> 00:31:00.149
服务器配置，但注意到

00:30:58.259 --> 00:31:02.249
网络上有更新

00:31:00.149 --> 00:31:05.190
应用程序，它在那里过时了

00:31:02.249 --> 00:31:07.700
如果我回去刷新一下，那么你

00:31:05.190 --> 00:31:09.749
可以看到我的新消息，所以当你

00:31:07.700 --> 00:31:12.269
然后将其通过管道

00:31:09.749 --> 00:31:14.609
您可能不希望使用卷

00:31:12.269 --> 00:31:16.019
坚持使用您的docker文件

00:31:14.609 --> 00:31:18.239
您传递的一个不变的对象

00:31:16.019 --> 00:31:19.799
通过管道，但用于发展

00:31:18.239 --> 00:31:23.960
在当地很高兴没有

00:31:19.799 --> 00:31:23.960
关闭您的Docker容器

00:31:25.710 --> 00:31:30.749
不，我现在没有重建Docker映像

00:31:28.169 --> 00:31:33.509
所以我在这里所做的就是安装

00:31:30.749 --> 00:31:36.359
卷到Docker容器中

00:31:33.509 --> 00:31:38.039
而不是使用副本

00:31:36.359 --> 00:31:39.929
我的配置被复制的

00:31:38.039 --> 00:31:42.029
 docker文件，它实际上是在使用

00:31:39.929 --> 00:31:43.830
我安装的位置，所以当我做

00:31:42.029 --> 00:31:46.200
原来的MDM包

00:31:43.830 --> 00:31:48.299
在那里更新，实际上如果我愿意

00:31:46.200 --> 00:31:50.639
使用了内置的支持

00:31:48.299 --> 00:31:52.440
我们在vs代码中获得自由，或者

00:31:50.639 --> 00:31:54.299
在Eclipse中也有工具

00:31:52.440 --> 00:31:56.099
本来可以设置的，以便我

00:31:54.299 --> 00:31:57.929
可以只更改类保存它，然后

00:31:56.099 --> 00:32:04.950
它会自动更新为

00:31:57.929 --> 00:32:08.190
我是的所以这是我的容器在捡

00:32:04.950 --> 00:32:11.759
当我做MV并安装时

00:32:08.190 --> 00:32:14.489
此文件夹中已更新的应用程序

00:32:11.759 --> 00:32:16.289
在我的drop ins文件夹中， 

00:32:14.489 --> 00:32:17.909
那就是它的拾取，所以我安装了

00:32:16.289 --> 00:32:20.159
苏打汽水整个目录

00:32:17.909 --> 00:32:21.869
这是默认服务器目录

00:32:20.159 --> 00:32:22.320
我在外面出来的就是这样

00:32:21.869 --> 00:32:24.269
当我做

00:32:22.320 --> 00:32:28.649
并将您复制的文件打包在那里

00:32:24.269 --> 00:32:30.330
然后更新进行得很好，所以我认为

00:32:28.649 --> 00:32:35.820
这就是我要演示的全部

00:32:30.330 --> 00:32:39.269
的观点，我要停止码头工人

00:32:35.820 --> 00:32:41.389
容器，因为这会减慢速度

00:32:39.269 --> 00:32:41.389
下

00:33:04.210 --> 00:33:13.600
然后通向下一个

00:33:10.029 --> 00:33:15.730
如果我们做的是我刚才做的演示

00:33:13.600 --> 00:33:17.529
不喜欢在回答您的问题

00:33:15.730 --> 00:33:23.110
最后再问一次，但希望

00:33:17.529 --> 00:33:25.149
这应该回答人们以为你是一个

00:33:23.110 --> 00:33:26.580
车前草，我们只是要问

00:33:25.149 --> 00:33:29.289
恰到好处的时间

00:33:26.580 --> 00:33:31.179
好吧，所以包装，当你

00:33:29.289 --> 00:33:32.470
考虑您的微型包装

00:33:31.179 --> 00:33:34.619
服务有很多

00:33:32.470 --> 00:33:36.970
您可能想要的特征

00:33:34.619 --> 00:33:39.159
问自己我想做什么

00:33:36.970 --> 00:33:41.529
从我的包装中实现我想要吗

00:33:39.159 --> 00:33:43.799
可以在外部配置，因为我

00:33:41.529 --> 00:33:46.149
想要跟随十二个因素

00:33:43.799 --> 00:33:48.879
我希望它是一成不变的

00:33:46.149 --> 00:33:50.619
再次与十二个因素有关，所以我

00:33:48.879 --> 00:33:52.840
可以相信我的事

00:33:50.619 --> 00:33:55.090
一开始就构建并运行我的单元测试

00:33:52.840 --> 00:33:58.799
我要反对的是同一件事

00:33:55.090 --> 00:34:00.940
在我的暂存环境中进行测试

00:33:58.799 --> 00:34:04.179
可维护的我们都希望可维护性

00:34:00.940 --> 00:34:07.869
我们和您所做的选择

00:34:04.179 --> 00:34:09.429
在包装方面可能是可能

00:34:07.869 --> 00:34:13.270
影响主要因素的可维护性

00:34:09.429 --> 00:34:15.040
您的微服务始终如一

00:34:13.270 --> 00:34:18.280
你想保持一致性吗

00:34:15.040 --> 00:34:21.399
微服务，因此您可以部署许多

00:34:18.280 --> 00:34:24.069
微服务一致性可以帮助

00:34:21.399 --> 00:34:25.450
人们想搬家的条件

00:34:24.069 --> 00:34:28.809
团队和从事不同的微工作

00:34:25.450 --> 00:34:30.849
服务等，以最大程度地重用

00:34:28.809 --> 00:34:33.940
再次分享您采用的方法

00:34:30.849 --> 00:34:36.159
帮助您最大程度地重复利用和共享

00:34:33.940 --> 00:34:38.260
想要分离您构建的内容

00:34:36.159 --> 00:34:40.750
作为一个团队或一个小队

00:34:38.260 --> 00:34:42.669
应用程序代码以及您要重用的内容

00:34:40.750 --> 00:34:45.399
这可能是供应商的Java 

00:34:42.669 --> 00:34:46.569
环境，或者可能是开放的

00:34:45.399 --> 00:34:48.730
您要添加的源框架

00:34:46.569 --> 00:34:51.190
进入那种环境

00:34:48.730 --> 00:34:53.980
分离可能很重要，然后一个

00:34:51.190 --> 00:34:56.079
像大象一样

00:34:53.980 --> 00:34:59.049
在房间里适合我

00:34:56.079 --> 00:35:01.210
与许多大客户合作

00:34:59.049 --> 00:35:03.549
有独立的开发团队独立的运营

00:35:01.210 --> 00:35:06.549
团队和举起手来，如果那是

00:35:03.549 --> 00:35:08.410
你在这里工作的环境是的，所以

00:35:06.549 --> 00:35:10.569
机会主义者和PI Server是什么

00:35:08.410 --> 00:35:12.339
他们已经做了很多年了

00:35:10.569 --> 00:35:14.099
他们对此负责

00:35:12.339 --> 00:35:16.299
伟大而历史悠久的开发团队

00:35:14.099 --> 00:35:18.070
向墙上扔一个战争文件

00:35:16.299 --> 00:35:19.690
一些配置或什么说

00:35:18.070 --> 00:35:21.610
为我做到这一点，现在开发团队是

00:35:19.690 --> 00:35:24.300
我正在做微服务

00:35:21.610 --> 00:35:27.220
给你一个苹果罐，他们去

00:35:24.300 --> 00:35:29.400
我该怎么办，所以

00:35:27.220 --> 00:35:32.230
重要的考虑，因为

00:35:29.400 --> 00:35:34.060
组织变革相当

00:35:32.230 --> 00:35:38.490
通常比技术难得多

00:35:34.060 --> 00:35:41.770
改变好了，所以我们谈到了

00:35:38.490 --> 00:35:43.600
 yup服务器以及如何

00:35:41.770 --> 00:35:45.190
自定义您的运行时环境

00:35:43.600 --> 00:35:46.960
我们已经谈过，我们看到了一些例子

00:35:45.190 --> 00:35:49.240
可运行的罐子，我们谈到了

00:35:46.960 --> 00:35:51.160
容器，什么是最好的选择

00:35:49.240 --> 00:35:55.870
什么是最合适的，它可以

00:35:51.160 --> 00:35:57.660
因此，如果您使用的是docker和

00:35:55.870 --> 00:36:00.070
特别是如果你是一个会说多种语言的人

00:35:57.660 --> 00:36:02.110
我们正在部署多个环境

00:36:00.070 --> 00:36:04.000
事情然后你会想要

00:36:02.110 --> 00:36:06.340
使用docker作为包装

00:36:04.000 --> 00:36:08.370
机制，事情是一旦你

00:36:06.340 --> 00:36:10.840
做码头工人，那么你可能想

00:36:08.370 --> 00:36:12.550
受益于所有docker功能

00:36:10.840 --> 00:36:14.830
所以我们谈论的是

00:36:12.550 --> 00:36:17.680
层和图像以及

00:36:14.830 --> 00:36:19.690
缓存等等，所以考虑一下

00:36:17.680 --> 00:36:21.130
构建他们，我可以看到它的想法

00:36:19.690 --> 00:36:23.470
关于在

00:36:21.130 --> 00:36:26.110
基础操作的种类

00:36:23.470 --> 00:36:27.790
系统将Java放下

00:36:26.110 --> 00:36:29.560
服务器关闭，然后可能有

00:36:27.790 --> 00:36:32.230
它们是框架和库

00:36:29.560 --> 00:36:35.290
在开源中重复使用开源，或者

00:36:32.230 --> 00:36:37.600
你是一个内部开发的人

00:36:35.290 --> 00:36:40.090
可能希望将它们作为一个

00:36:37.600 --> 00:36:41.890
层，因为将它们放在那里

00:36:40.090 --> 00:36:43.720
让他们明确你知道哪个

00:36:41.890 --> 00:36:44.710
然后您的Docker容器正在使用

00:36:43.720 --> 00:36:46.210
这些东西，如果你有一个

00:36:44.710 --> 00:36:48.190
安全漏洞，或者您需要

00:36:46.210 --> 00:36:50.830
升级您认为可以看到的内容

00:36:48.190 --> 00:36:52.540
很容易你的依赖是什么

00:36:50.830 --> 00:36:54.430
而你可能需要做一个

00:36:52.540 --> 00:36:56.530
重新部署或重建和重新部署

00:36:54.430 --> 00:36:58.420
特定的微服务，然后

00:36:56.530 --> 00:37:01.660
最终在其中添加您的应用程序

00:36:58.420 --> 00:37:04.480
希望您沿着那个栈走下去时

00:37:01.660 --> 00:37:05.620
事情很少发生

00:37:04.480 --> 00:37:07.920
最重要的事情将会改变

00:37:05.620 --> 00:37:11.050
最重要的是您的应用程序代码

00:37:07.920 --> 00:37:14.110
如果你在做可运行的罐子

00:37:11.050 --> 00:37:15.640
而且我认为您的灵活性降低了， 

00:37:14.110 --> 00:37:19.260
也没有用，特别是工作

00:37:15.640 --> 00:37:19.260
非常适合多语言环境

00:37:19.970 --> 00:37:25.160
但是，即使您正在使用docker 

00:37:22.820 --> 00:37:27.920
正如我提到的组织

00:37:25.160 --> 00:37:29.300
你可能不是那个人

00:37:27.920 --> 00:37:32.120
创建可能会

00:37:29.300 --> 00:37:33.740
成为我们的行动团队，在这种情况下又会发生战争

00:37:32.120 --> 00:37:35.540
对你来说可能是最好的事情

00:37:33.740 --> 00:37:36.950
开发团队以打包方式创建

00:37:35.540 --> 00:37:37.970
然后将其交给操作团队

00:37:36.950 --> 00:37:40.190
然后你去做码头工人

00:37:37.970 --> 00:37:42.350
事情，而不是那个

00:37:40.190 --> 00:37:43.670
给他们一个可执行的jar 

00:37:42.350 --> 00:37:45.560
然后他们必须去里面看

00:37:43.670 --> 00:37:46.820
并尝试找到您的战争档案并拉

00:37:45.560 --> 00:37:56.150
拿出来放进去

00:37:46.820 --> 00:37:58.970
码头集装箱好了，所以最后一件事

00:37:56.150 --> 00:38:03.260
我们想在这里说的是

00:37:58.970 --> 00:38:05.630
开放的API规范，让您

00:38:03.260 --> 00:38:08.900
谁不知道这是一个简单的标准

00:38:05.630 --> 00:38:11.780
 API说明格式第2版原为

00:38:08.900 --> 00:38:14.570
发布于2014年10月

00:38:11.780 --> 00:38:16.910
然后是从招摇，然后

00:38:14.570 --> 00:38:19.940
现在版本3是开放的API 

00:38:16.910 --> 00:38:21.530
规格，所以招摇

00:38:19.940 --> 00:38:23.480
规格很好

00:38:21.530 --> 00:38:25.580
赃物作为开放API的一部分捐赠

00:38:23.480 --> 00:38:26.840
规格，还有一些

00:38:25.580 --> 00:38:28.910
不同的实现方式

00:38:26.840 --> 00:38:30.980
提到那里大摇大摆，经常有人

00:38:28.910 --> 00:38:34.310
使用招摇和开放的API作为

00:38:30.980 --> 00:38:37.130
可互换的单词，你可以找到一个

00:38:34.310 --> 00:38:39.260
许多供应商实际上都支持

00:38:37.130 --> 00:38:41.510
他们的应用服务器的一部分说

00:38:39.260 --> 00:38:44.000
自由的例子，我们有一个功能

00:38:41.510 --> 00:38:45.650
那就是提供它，并再次

00:38:44.000 --> 00:38:49.220
野蝇群中有一部分

00:38:45.650 --> 00:38:52.000
提供了为什么这对微型有用

00:38:49.220 --> 00:38:54.500
微服务的服务很好

00:38:52.000 --> 00:38:57.170
服务之间的通信是

00:38:54.500 --> 00:38:59.060
确实是您需要获得的关键方面

00:38:57.170 --> 00:39:01.430
对，因为你突然陷入

00:38:59.060 --> 00:39:03.140
分布式系统需要具备良好的

00:39:01.430 --> 00:39:06.230
那些不同的人之间的交流

00:39:03.140 --> 00:39:08.210
零件以及微服务

00:39:06.230 --> 00:39:09.980
通常会发生组织变革

00:39:08.210 --> 00:39:12.230
您拥有不同的团队

00:39:09.980 --> 00:39:13.580
不同的微服务

00:39:12.230 --> 00:39:15.920
一直编写代码的过程

00:39:13.580 --> 00:39:18.650
部署和支持，这意味着

00:39:15.920 --> 00:39:21.290
您需要一个有据可查的API 

00:39:18.650 --> 00:39:23.870
在不同的微服务之间

00:39:21.290 --> 00:39:26.750
开放的API规范非常有用

00:39:23.870 --> 00:39:29.390
好在这里，它可以用于测试

00:39:26.750 --> 00:39:31.520
特别是要确保

00:39:29.390 --> 00:39:33.250
特定生产者和消费者

00:39:31.520 --> 00:39:35.530
 API也保持

00:39:33.250 --> 00:39:37.840
您选择的规格

00:39:35.530 --> 00:39:39.730
有一套不同的工具

00:39:37.840 --> 00:39:41.440
您可以使用一种这样的工具是

00:39:39.730 --> 00:39:44.320
所谓的契约

00:39:41.440 --> 00:39:46.660
定义可以由

00:39:44.320 --> 00:39:48.940
人们生产API以确保

00:39:46.660 --> 00:39:50.470
他们没有退缩任何东西，或者

00:39:48.940 --> 00:39:53.710
改变了任何会破坏他们的东西

00:39:50.470 --> 00:39:56.020
消费者要考虑的另一件事

00:39:53.710 --> 00:39:58.990
它是由对微服务的渴望驱动的

00:39:56.020 --> 00:40:01.420
生命周期短，所以没有

00:39:58.990 --> 00:40:02.890
一个大的应用程序开始

00:40:01.420 --> 00:40:04.840
很久以前写的

00:40:02.890 --> 00:40:06.730
继续在自己的边缘添加片段

00:40:04.840 --> 00:40:09.310
可能正在编写新的应用程序

00:40:06.730 --> 00:40:10.599
更频繁的是

00:40:09.310 --> 00:40:12.820
能够有一些有用的

00:40:10.599 --> 00:40:15.250
自动生成的代码，所以我已经

00:40:12.820 --> 00:40:17.109
今天演示了我们如何产生

00:40:15.250 --> 00:40:19.770
应用程序，但实际上能够

00:40:17.109 --> 00:40:22.000
基于API dess生成

00:40:19.770 --> 00:40:24.599
规范非常有用，那就是

00:40:22.000 --> 00:40:27.880
可以使用开放API文档的地方

00:40:24.599 --> 00:40:31.599
它也是多语言和多供应商

00:40:27.880 --> 00:40:33.340
环境，因此您甚至可以使用开放式API 

00:40:31.599 --> 00:40:34.599
如果您是由微服务组成的

00:40:33.340 --> 00:40:37.930
不同的服务

00:40:34.599 --> 00:40:39.760
语言对我自己来说

00:40:37.930 --> 00:40:41.470
与我的同事一起工作

00:40:39.760 --> 00:40:43.570
需要与之相互作用的微粒体

00:40:41.470 --> 00:40:45.369
我的，即使有一个书面的说

00:40:43.570 --> 00:40:47.349
 JavaScript或Python或其他我们可以

00:40:45.369 --> 00:40:50.619
所有人对他们如何有这种看法

00:40:47.349 --> 00:40:52.570
应该互动，所以我提到了代码

00:40:50.619 --> 00:40:54.910
一代有很多开源

00:40:52.570 --> 00:40:57.070
如果您去看Maven，可以使用的工具

00:40:54.910 --> 00:41:00.640
例如，有一整套你

00:40:57.070 --> 00:41:03.010
可以使用，实际上一些供应商

00:41:00.640 --> 00:41:05.470
像内置支持一样为您提供

00:41:03.010 --> 00:41:08.830
根据规范生成代码或

00:41:05.470 --> 00:41:10.900
生成实际文档以显示

00:41:08.830 --> 00:41:13.599
基于的API规范

00:41:10.900 --> 00:41:15.400
代码，因此您可以同时使用两种方式

00:41:13.599 --> 00:41:17.410
 IBM cloud我们为您提供了一个选择

00:41:15.400 --> 00:41:19.690
给定生成一个应用程序

00:41:17.410 --> 00:41:21.580
文件，我们也提供

00:41:19.690 --> 00:41:23.020
我的自由应用加速器

00:41:21.580 --> 00:41:24.940
前面提到过，所以你可以看到

00:41:23.020 --> 00:41:26.980
角落里有招摇按钮

00:41:24.940 --> 00:41:28.480
 Wildfly群项目生成器

00:41:26.980 --> 00:41:30.250
这相当于它们的

00:41:28.480 --> 00:41:34.960
应用加速器还提供了

00:41:30.250 --> 00:41:36.849
选项，这是一种快速的选择

00:41:34.960 --> 00:41:38.710
图，以防您不知道什么

00:41:36.849 --> 00:41:40.630
如果您要

00:41:38.710 --> 00:41:43.900
使用这项技术，以便您拥有

00:41:40.630 --> 00:41:45.920
以类似方式指定实际端点

00:41:43.900 --> 00:41:48.290
与Chuck或s一样

00:41:45.920 --> 00:41:50.630
然后您可以添加其他类型的用户

00:41:48.290 --> 00:41:52.339
信息以及招摇和

00:41:50.630 --> 00:41:56.000
好东西是它产生的

00:41:52.339 --> 00:41:58.640
产生这个UI，所以我已经用了很多

00:41:56.000 --> 00:42:00.740
在进行开发时，因为您可以

00:41:58.640 --> 00:42:02.089
这是可视化API和

00:42:00.740 --> 00:42:04.400
真正了解什么

00:42:02.089 --> 00:42:06.440
团队想要退出API，以及您如何

00:42:04.400 --> 00:42:08.240
可能会与之互动，因此

00:42:06.440 --> 00:42:10.099
使用Liberty的示例

00:42:08.240 --> 00:42:15.140
 API发现功能，您将获得

00:42:10.099 --> 00:42:18.079
这是你的一部分，所以在

00:42:15.140 --> 00:42:20.720
结论我们认为您应该考虑

00:42:18.079 --> 00:42:22.670
 Java EE的个别功能

00:42:20.720 --> 00:42:25.160
这不是你必须采取的

00:42:22.670 --> 00:42:26.569
作为一大块，您可以选择

00:42:25.160 --> 00:42:29.150
您想要和制作的不同作品

00:42:26.569 --> 00:42:31.280
它最适合您，您应该

00:42:29.150 --> 00:42:33.230
选择适合您的运行时

00:42:31.280 --> 00:42:35.210
您需要的特定功能

00:42:33.230 --> 00:42:37.849
和不同的供应商提供不同的

00:42:35.210 --> 00:42:41.690
如何使用此功能的选项

00:42:37.849 --> 00:42:44.660
 docker作为打包模型jar文件

00:42:41.690 --> 00:42:46.280
也许不是有用的东西， 

00:42:44.660 --> 00:42:48.020
其实你可以坚持

00:42:46.280 --> 00:42:49.609
手机，但又要取决于什么

00:42:48.020 --> 00:42:50.900
你在做但在说话或

00:42:49.609 --> 00:42:53.089
您环境中的某些东西会

00:42:50.900 --> 00:42:55.819
绝对对微服务有用

00:42:53.089 --> 00:42:58.010
然后是Mike的个人资料

00:42:55.819 --> 00:42:59.839
社区增​​加了编程模型

00:42:58.010 --> 00:43:01.339
要点并删除样板

00:42:59.839 --> 00:43:03.200
否则您将不得不阅读

00:43:01.339 --> 00:43:05.660
写，以便它提供注释和

00:43:03.200 --> 00:43:08.270
编写微服务的东西

00:43:05.660 --> 00:43:11.480
更快，代码更多

00:43:08.270 --> 00:43:14.030
清洁最后我们大摇大摆或

00:43:11.480 --> 00:43:16.640
您可以打开API规范

00:43:14.030 --> 00:43:18.440
用作Java EE的一部分

00:43:16.640 --> 00:43:20.450
不同的供应商支持它，然后它

00:43:18.440 --> 00:43:24.380
即使您有一个也可以使用

00:43:20.450 --> 00:43:26.030
多语言环境，所以我们有一些

00:43:24.380 --> 00:43:28.130
如果您想阅读这里的资源

00:43:26.030 --> 00:43:29.690
有关微服务的更多信息，还有一个

00:43:28.130 --> 00:43:32.540
我实际上与他合写的红皮书

00:43:29.690 --> 00:43:34.700
我的一些同事和那种

00:43:32.540 --> 00:43:36.559
给出了Java的一般概述，但

00:43:34.700 --> 00:43:39.530
它里面有一些Java EE细节

00:43:36.559 --> 00:43:41.599
好，而dev dotnet是WebSphere 

00:43:39.530 --> 00:43:43.730
 Liberty开发人员网站

00:43:41.599 --> 00:43:46.369
开发人员本人和Gro包括

00:43:43.730 --> 00:43:48.200
关于自由的工作已经写了文章

00:43:46.369 --> 00:43:50.089
那里以及有关微服务的文件

00:43:48.200 --> 00:43:52.309
然后你也可以去微

00:43:50.089 --> 00:43:55.040
服务构建者

00:43:52.309 --> 00:43:57.440
 Liberty和IBM Cloud私有版本

00:43:55.040 --> 00:43:58.549
我向您展示的bxf工具，然后

00:43:57.440 --> 00:43:59.569
当然，我们有打开链接

00:43:58.549 --> 00:44:01.369
自由

00:43:59.569 --> 00:44:03.890
我们最近宣布了和玲子

00:44:01.369 --> 00:44:05.989
个人资料生气，如果您想阅读

00:44:03.890 --> 00:44:09.229
那么我们有一些资源供您

00:44:05.989 --> 00:44:10.759
还要检查一下，所以我认为

00:44:09.229 --> 00:44:12.079
差不多我们有时间要谢谢你

00:44:10.759 --> 00:44:13.750
非常欢迎光临，我们欢迎任何

00:44:12.079 --> 00:44:18.639
问题

00:44:13.750 --> 00:44:18.639
 [掌声] 

