WEBVTT
Kind: captions
Language: zh-Hans

00:00:04.870 --> 00:00:07.920
大家好

00:00:16.670 --> 00:00:25.800
你好，你好，欢迎来到另一个雅加达

00:00:20.610 --> 00:00:30.390
塞巴斯蒂安今天举行的技术讲座- 

00:00:25.800 --> 00:00:33.360
纳里在这里与我们道歉

00:00:30.390 --> 00:00:37.350
每个人都有一点点延迟

00:00:33.360 --> 00:00:39.840
这当然是技术

00:00:37.350 --> 00:00:44.160
造成了问题，所以这不是我们永远不会

00:00:39.840 --> 00:00:50.129
我们，所以我就把写完的东西交出去

00:00:44.160 --> 00:00:53.219
给塞巴斯蒂安，让他有机会

00:00:50.129 --> 00:00:56.670
开始与机舱erik kubernetes和

00:00:53.219 --> 00:01:00.719
开发人员感谢雅加达东部EO 

00:00:56.670 --> 00:01:04.199
塞巴斯蒂安加入，是的

00:01:00.719 --> 00:01:06.630
是的，非常感谢

00:01:04.199 --> 00:01:09.270
介绍，从我身边我很高兴

00:01:06.630 --> 00:01:12.750
妈妈塞巴斯蒂安-努尔，欢迎来到

00:01:09.270 --> 00:01:18.299
这次的kubernetes和sto为雅加达

00:01:12.750 --> 00:01:20.729
 EE开发人员对我自己的了解Bastian- 

00:01:18.299 --> 00:01:23.820
 na在德国慕尼黑出生和长大， 

00:01:20.729 --> 00:01:26.490
我是IBM的开发人员拥护者，我

00:01:23.820 --> 00:01:28.710
具有类似Java的背景，并且

00:01:26.490 --> 00:01:31.470
后台的企业软件

00:01:28.710 --> 00:01:35.070
一般，今天我想向您展示

00:01:31.470 --> 00:01:36.540
为什么我们使用Java EE或

00:01:35.070 --> 00:01:38.570
提花EE开发人员应

00:01:36.540 --> 00:01:41.340
对云原生技术感兴趣

00:01:38.570 --> 00:01:44.280
特别是kubernetes initio和什么

00:01:41.340 --> 00:01:47.040
所以我们会看到一点

00:01:44.280 --> 00:01:49.320
关于这一点，首先我想

00:01:47.040 --> 00:01:52.590
介绍一个示例微服务

00:01:49.320 --> 00:01:54.479
 quote-unquote示例应用程序或

00:01:52.590 --> 00:01:56.490
实际上两个应用

00:01:54.479 --> 00:01:57.930
因为一个应用程序很无聊，我们

00:01:56.490 --> 00:01:59.880
想要沟通

00:01:57.930 --> 00:02:01.920
特别是与容器

00:01:59.880 --> 00:02:04.530
编排和服务措施以及

00:02:01.920 --> 00:02:08.820
所有这些，我喜欢咖啡

00:02:04.530 --> 00:02:12.000
所以我要有一个企业Java 

00:02:08.820 --> 00:02:13.980
企业咖啡的例子

00:02:12.000 --> 00:02:16.850
我们要去咖啡厅吗

00:02:13.980 --> 00:02:20.010
两个企业咖啡的例子

00:02:16.850 --> 00:02:22.260
应用程序-如果您使用微型服务器

00:02:20.010 --> 00:02:24.100
想要，一个叫做咖啡店， 

00:02:22.260 --> 00:02:26.260
另一个叫做咖啡师

00:02:24.100 --> 00:02:29.470
表示如果我们要点咖啡

00:02:26.260 --> 00:02:31.750
一个开发商，我们去咖啡店

00:02:29.470 --> 00:02:35.110
客户并点咖啡订单， 

00:02:31.750 --> 00:02:37.750
然后为了我们的例子

00:02:35.110 --> 00:02:39.490
我们有一个来自

00:02:37.750 --> 00:02:41.830
咖啡店到咖啡师的后端

00:02:39.490 --> 00:02:44.530
所以它有点像我们

00:02:41.830 --> 00:02:46.960
有要求进来或喝咖啡

00:02:44.530 --> 00:02:50.170
可能是HTTP端点或

00:02:46.960 --> 00:02:52.840
无论我们提供什么边界， 

00:02:50.170 --> 00:02:54.760
然后向

00:02:52.840 --> 00:02:56.740
咖啡师后端，所以我们要拥有或

00:02:54.760 --> 00:02:59.170
咖啡，然后像开始

00:02:56.740 --> 00:03:02.350
咖啡冲泡过程和命令

00:02:59.170 --> 00:03:05.590
在咖啡师后端系统还可以

00:03:02.350 --> 00:03:08.410
终于是去了足够的代码幻灯片

00:03:05.590 --> 00:03:11.260
所以我实际上只有两个

00:03:08.410 --> 00:03:15.070
使用两个的企业应用程序

00:03:11.260 --> 00:03:18.280
 Java EE api或提花EE api和

00:03:15.070 --> 00:03:21.160
和将来一样

00:03:18.280 --> 00:03:23.500
我将在其中展示一点

00:03:21.160 --> 00:03:27.400
第二个叫做咖啡店

00:03:23.500 --> 00:03:30.100
另一个叫做咖啡师，所以这些

00:03:27.400 --> 00:03:33.430
是我们要开发的Java Enterprise项目

00:03:30.100 --> 00:03:35.530
具有提供的Java EE 8 API 

00:03:33.430 --> 00:03:40.090
再过一会儿

00:03:35.530 --> 00:03:43.180
只是因为我很勇敢，所以我使用JDK 11 

00:03:40.090 --> 00:03:45.730
已经在我使用的应用程序服务器上

00:03:43.180 --> 00:03:48.070
打开自由，让我快速拥有

00:03:45.730 --> 00:03:50.650
一些快速的代码演练，以及

00:03:48.070 --> 00:03:52.990
那我们今天要部署

00:03:50.650 --> 00:03:56.380
仅Java少一点

00:03:52.990 --> 00:03:58.870
 EE或卡片EE API的功能更多

00:03:56.380 --> 00:04:00.820
关于云原生环境，所以我们

00:03:58.870 --> 00:04:02.800
快速使用docker进行部署

00:04:00.820 --> 00:04:06.820
容器，当然还有kubernetes 

00:04:02.800 --> 00:04:09.760
集群和存储服务网格，如何

00:04:06.820 --> 00:04:12.550
适用于此订单咖啡过程的是

00:04:09.760 --> 00:04:14.650
让我们看一看

00:04:12.550 --> 00:04:18.790
称为ortus的资源

00:04:14.650 --> 00:04:20.980
所以我们的订单咖啡边界将是

00:04:18.790 --> 00:04:23.890
我们的实体HTTP端点

00:04:20.980 --> 00:04:25.450
使用jax-rs来实现，例如Enterprise 

00:04:23.890 --> 00:04:27.550
我们可能熟悉的开发人员

00:04:25.450 --> 00:04:31.390
 jax-rs，所以我们在路径上有类似的东西

00:04:27.550 --> 00:04:33.729
或在使

00:04:31.390 --> 00:04:36.010
给我们带来了麻烦的我们

00:04:33.729 --> 00:04:37.970
在这里，然后我们有像

00:04:36.010 --> 00:04:41.240
给我们下订单

00:04:37.970 --> 00:04:44.270
位置Jason格式，也需要

00:04:41.240 --> 00:04:47.630
点些命令点咖啡，或者我们可以

00:04:44.270 --> 00:04:51.800
提供飞机工作或物体的类型

00:04:47.630 --> 00:04:56.000
 Java类咖啡订单，这意味着我们

00:04:51.800 --> 00:04:58.220
将发布一个特定的JSON对象

00:04:56.000 --> 00:05:00.620
代表这里的咖啡订单

00:04:58.220 --> 00:05:02.570
让我们快速走来走去

00:05:00.620 --> 00:05:08.660
这个代码我们要去咖啡店

00:05:02.570 --> 00:05:10.940
或这里的咖啡成分

00:05:08.660 --> 00:05:14.600
我们拥有业务逻辑的课程

00:05:10.940 --> 00:05:16.550
点一杯咖啡，如果我们有一个

00:05:14.600 --> 00:05:18.440
看图，最终我们

00:05:16.550 --> 00:05:20.180
想调用第二个系统

00:05:18.440 --> 00:05:22.040
将会有一个同步请求

00:05:20.180 --> 00:05:24.410
咖啡师系统，这意味着我们有点

00:05:22.040 --> 00:05:26.870
有一些可能是HTTP的客户端调用

00:05:24.410 --> 00:05:28.850
在这种情况下，这就是我所拥有的

00:05:26.870 --> 00:05:31.910
在另一个称为

00:05:28.850 --> 00:05:35.210
实际上是HTTP客户端的咖啡师

00:05:31.910 --> 00:05:37.070
在我的情况下，我在

00:05:35.210 --> 00:05:40.010
客户端连接到该后端

00:05:37.070 --> 00:05:42.410
好吧，那么这意味着

00:05:40.010 --> 00:05:44.120
好，我们要在这里创建一个请求

00:05:42.410 --> 00:05:48.080
我们将使用jax-ur作为

00:05:44.120 --> 00:05:51.190
客户端API可以很好地进行HTTP放置

00:05:48.080 --> 00:05:54.650
请求到其他资源

00:05:51.190 --> 00:05:58.940
好了，对于代码级别来说足够了

00:05:54.650 --> 00:06:01.100
如果我们想在Java EE api上

00:05:58.940 --> 00:06:03.680
在本机云中运行该示例

00:06:01.100 --> 00:06:06.020
首先设定我们可能拥有的

00:06:03.680 --> 00:06:08.270
很好，我们想在docker中运行它

00:06:06.020 --> 00:06:11.780
容器，这意味着我们需要一个码头工人

00:06:08.270 --> 00:06:13.730
这意味着我们需要更暗的图像

00:06:11.780 --> 00:06:15.650
例如文件，所以这是码头工人

00:06:13.730 --> 00:06:18.050
申请咖啡店申请，以及

00:06:15.650 --> 00:06:21.140
在提花ee中，实际上非常

00:06:18.050 --> 00:06:23.720
容易做，因为如果我们使用薄

00:06:21.140 --> 00:06:25.610
部署工件大部分是我们

00:06:23.720 --> 00:06:29.270
需求实际上是在我们的基础映像中完成的

00:06:25.610 --> 00:06:32.150
因此我们可以提供许多图像并创建

00:06:29.270 --> 00:06:33.830
像我们想要的图像一样，我使用

00:06:32.150 --> 00:06:36.830
包含开放自由的图像

00:06:33.830 --> 00:06:39.230
应用服务器加上JDK 11加上一些

00:06:36.830 --> 00:06:41.890
额外的东西，我将在一秒钟内显示

00:06:39.230 --> 00:06:45.260
然后我们将添加一些薄

00:06:41.890 --> 00:06:47.840
配置还显示了更多内容

00:06:45.260 --> 00:06:49.700
一秒钟，然后实际上只有什么

00:06:47.840 --> 00:06:50.980
我们真正在添加的东西

00:06:49.700 --> 00:06:53.800
发展

00:06:50.980 --> 00:06:56.200
华夫饼是我们的部署工件

00:06:53.800 --> 00:06:58.660
我们内部的咖啡店大战

00:06:56.200 --> 00:07:01.930
目标，如果我们使用Maven构建

00:06:58.660 --> 00:07:06.400
差不多就是这样，让我们

00:07:01.930 --> 00:07:09.100
快速演示我们将要行家

00:07:06.400 --> 00:07:11.020
建立一个项目的初次清洁包装

00:07:09.100 --> 00:07:15.580
然后我们会有类似的东西

00:07:11.020 --> 00:07:18.640
更黑暗的构建来建立我们的形象

00:07:15.580 --> 00:07:21.340
一个具体的办法，并建立它和

00:07:18.640 --> 00:07:23.680
同样，这实际上是超级快

00:07:21.340 --> 00:07:25.480
因为我们仅将缓存用于

00:07:23.680 --> 00:07:27.850
基本图像层归功于

00:07:25.480 --> 00:07:29.680
 Docker的写时复制文件系统

00:07:27.850 --> 00:07:32.140
然后我们进行精简部署

00:07:29.680 --> 00:07:33.790
如果我们使用的话，它实际上很小

00:07:32.140 --> 00:07:36.310
该方法仅提供

00:07:33.790 --> 00:07:39.760
依赖关系，所以是20 KB， 

00:07:36.310 --> 00:07:42.850
然后我们建立建立这个，然后我们

00:07:39.760 --> 00:07:46.450
没事没事，实际上是对的

00:07:42.850 --> 00:07:50.140
对于咖啡师系统，所以咖啡师

00:07:46.450 --> 00:07:52.150
那我要变得更简单

00:07:50.140 --> 00:07:55.930
在这里做，我谈论一些

00:07:52.150 --> 00:07:59.530
关于那以后我在这里我只用微

00:07:55.930 --> 00:08:01.480
配置文件依赖关系

00:07:59.530 --> 00:08:04.980
如果我实际上只用杰克的逮捕

00:08:01.480 --> 00:08:08.020
和CDI，并以JSONP为例

00:08:04.980 --> 00:08:10.900
对于咖啡师来说就足够了

00:08:08.020 --> 00:08:13.270
无论如何如果我使用

00:08:10.900 --> 00:08:15.460
也支持的应用程序服务器

00:08:13.270 --> 00:08:17.230
微观轮廓或您知道组合

00:08:15.460 --> 00:08:20.050
的api取决于您所需要的

00:08:17.230 --> 00:08:22.480
您的项目也是可能的

00:08:20.050 --> 00:08:24.580
我们咖啡师的缠扰者档案

00:08:22.480 --> 00:08:27.550
应用程序看起来非常相似

00:08:24.580 --> 00:08:30.720
而我们的部署工件咖啡师

00:08:27.550 --> 00:08:34.030
 odwar和这里的同一件事

00:08:30.720 --> 00:08:36.790
好了，Docker假设就足够了

00:08:34.030 --> 00:08:39.010
我们已经知道了，所以让我们开始吧

00:08:36.790 --> 00:08:41.500
进入kubernetes世界

00:08:39.010 --> 00:08:41.950
因此，如果我们建立一个我刚刚展示的

00:08:41.500 --> 00:08:44.410
您

00:08:41.950 --> 00:08:46.060
好吧，我们可以在本地部署

00:08:44.410 --> 00:08:47.950
这有点无聊，实际上是因为

00:08:46.060 --> 00:08:50.620
我们想在本机云中运行

00:08:47.950 --> 00:08:53.290
在kubernetes集群中设置

00:08:50.620 --> 00:08:55.330
可以运行我们的docker容器，但是现在

00:08:53.290 --> 00:08:57.430
好吧，我想有一种方法

00:08:55.330 --> 00:08:59.950
管理一些容器，这是

00:08:57.430 --> 00:09:00.400
 kubernetes真正进入的地方

00:08:59.950 --> 00:09:03.850
玩

00:09:00.400 --> 00:09:04.660
为什么kubernetes很好kubernetes是如此

00:09:03.850 --> 00:09:07.180
叫

00:09:04.660 --> 00:09:10.330
容器编排很好，这意味着

00:09:07.180 --> 00:09:12.040
在容器中精心安排

00:09:10.330 --> 00:09:13.960
听起来就意味着如果我们有一个

00:09:12.040 --> 00:09:16.990
生产设置或更多

00:09:13.960 --> 00:09:19.360
我们拥有的复杂环境

00:09:16.990 --> 00:09:22.030
实际上有多个节点，而不仅仅是一个

00:09:19.360 --> 00:09:24.370
运行笔记本电脑之类的东西

00:09:22.030 --> 00:09:26.350
很容易变得很复杂

00:09:24.370 --> 00:09:28.990
在生产中很好地运行所有这些

00:09:26.350 --> 00:09:31.060
对，我们需要管理所需的网络

00:09:28.990 --> 00:09:31.780
设置端口并转发它们等等

00:09:31.060 --> 00:09:33.900
依此类推

00:09:31.780 --> 00:09:36.580
我们需要协调我们的位置

00:09:33.900 --> 00:09:39.040
各个容器实际运行并

00:09:36.580 --> 00:09:41.500
依此类推，所以这实际上是

00:09:39.040 --> 00:09:44.470
该技术已经在

00:09:41.500 --> 00:09:48.610
有点准备生产的方式

00:09:44.470 --> 00:09:50.380
意味着我们可以很好地部署它，那么该怎么做

00:09:48.610 --> 00:09:52.210
我们有一个kubernetes集群

00:09:50.380 --> 00:09:54.250
有很多方法可以做到这一点

00:09:52.210 --> 00:09:57.640
例如我们可以在

00:09:54.250 --> 00:09:59.860
我们正在运行的笔记本电脑，或者我们可以去

00:09:57.640 --> 00:10:03.070
我使用的用于托管环境的云

00:09:59.860 --> 00:10:03.910
被称为IKS的IBM云

00:10:03.070 --> 00:10:06.970
管理kubernetes 

00:10:03.910 --> 00:10:10.600
这就是我要在这里使用的

00:10:06.970 --> 00:10:13.030
所以我们有了多维数据集控制命令行

00:10:10.600 --> 00:10:16.450
可用于访问kubernetes 

00:10:13.030 --> 00:10:19.240
然后我们可以像剪辑一样

00:10:16.450 --> 00:10:21.880
控制为我们提供的服务

00:10:19.240 --> 00:10:24.670
运行或给我们运行部分

00:10:21.880 --> 00:10:29.260
这意味着当前是空的，所以

00:10:24.670 --> 00:10:31.780
那是什么服务或吊舱，如何

00:10:29.260 --> 00:10:33.990
我们的应用程序看起来像

00:10:31.780 --> 00:10:37.690
容器编排是什么

00:10:33.990 --> 00:10:40.930
类似于以下内容，我们会很好

00:10:37.690 --> 00:10:43.150
零件和所谓的服务

00:10:40.930 --> 00:10:46.390
服务是合乎逻辑的

00:10:43.150 --> 00:10:49.840
应用程序或应用程序之上的抽象

00:10:46.390 --> 00:10:51.400
在我们的案例中，微服务

00:10:49.840 --> 00:10:53.950
表示如果我们有咖啡店

00:10:51.400 --> 00:10:56.380
应用程序本身

00:10:53.950 --> 00:10:58.780
将是可能支持的服务

00:10:56.380 --> 00:11:00.310
被多个正在运行的实例

00:10:58.780 --> 00:11:02.140
如果你想拥有多个

00:11:00.310 --> 00:11:04.540
运行应用程序服务器或

00:11:02.140 --> 00:11:06.790
都提供的容器或运行时

00:11:04.540 --> 00:11:09.130
相同的功能

00:11:06.790 --> 00:11:11.890
实施咖啡店服务

00:11:09.130 --> 00:11:14.650
通过多个运行部分，吊舱是

00:11:11.890 --> 00:11:17.080
社区中的原子工作量，以便

00:11:14.650 --> 00:11:17.769
表示我们有一个或多个运行部件

00:11:17.080 --> 00:11:20.410
和

00:11:17.769 --> 00:11:23.410
其中两个包含一个集装箱，一个码头

00:11:20.410 --> 00:11:25.779
例如docker容器，这是

00:11:23.410 --> 00:11:28.540
咖啡厅提供的服务和

00:11:25.779 --> 00:11:30.519
现在，如果我们要访问某个订单

00:11:28.540 --> 00:11:33.100
咖啡，我们将要访问该咖啡

00:11:30.519 --> 00:11:36.220
商店服务并最终一次运行

00:11:33.100 --> 00:11:38.170
在这里实例，然后以相同的方式

00:11:36.220 --> 00:11:40.350
如果他们在运行容器，如果我们

00:11:38.170 --> 00:11:42.699
应用程序想要访问另一个

00:11:40.350 --> 00:11:44.949
应用程序，例如咖啡师吧

00:11:42.699 --> 00:11:47.139
访问该服务并最终合而为一

00:11:44.949 --> 00:11:51.670
运转的豆荚，和相同

00:11:47.139 --> 00:11:55.299
往回走，让我快速向您展示一些

00:11:51.670 --> 00:11:58.989
 llamo代码yay每个人都喜欢em哦，所以

00:11:55.299 --> 00:12:00.790
这是我想如何定义的现代方式

00:11:58.989 --> 00:12:02.949
云原生资源

00:12:00.790 --> 00:12:06.189
我们将有一些llamo定义

00:12:02.949 --> 00:12:08.019
现在可以很好地进行服务和部署

00:12:06.189 --> 00:12:10.569
坚持什么是部署

00:12:08.019 --> 00:12:13.480
部署是一种管理方式

00:12:10.569 --> 00:12:15.970
零件以更复杂的方式

00:12:13.480 --> 00:12:18.549
例如，如果我们说我们正在跑步

00:12:15.970 --> 00:12:21.459
实例一个正在运行的容器，现在我们

00:12:18.549 --> 00:12:25.869
想要实际部署新版本或

00:12:21.459 --> 00:12:28.240
放大或缩小表示我们改为

00:12:25.869 --> 00:12:30.189
直接创建零件的过程

00:12:28.240 --> 00:12:32.319
创建用于管理零件的资源

00:12:30.189 --> 00:12:35.920
我们，这就是部署，我们可以

00:12:32.319 --> 00:12:39.369
现在说请提供1：1副本

00:12:35.920 --> 00:12:41.410
以下规范的一部分

00:12:39.369 --> 00:12:45.809
以下docker镜像的示例

00:12:41.410 --> 00:12:48.009
我们刚刚建立并运行

00:12:45.809 --> 00:12:50.529
这里是服务

00:12:48.009 --> 00:12:52.779
定义，所以这只是定义一个

00:12:50.529 --> 00:12:55.449
给咖啡店起个名字

00:12:52.779 --> 00:12:58.029
服务，它将向前发展

00:12:55.449 --> 00:13:01.059
端口90-80是默认端口

00:12:58.029 --> 00:13:04.360
向以下部分开放自由

00:13:01.059 --> 00:13:07.809
以及包含此标签的应用程序咖啡

00:13:04.360 --> 00:13:10.089
店，所以我可能有多个部分

00:13:07.809 --> 00:13:12.369
支持我的咖啡店服务，这一切

00:13:10.089 --> 00:13:14.559
将从服务中选择

00:13:12.369 --> 00:13:16.360
该服务进行负载平衡或

00:13:14.559 --> 00:13:19.569
负载分配到所有正在运行的

00:13:16.360 --> 00:13:23.499
实例在那里，咖啡师

00:13:19.569 --> 00:13:26.399
一个看起来很相似，我们有一个咖啡师

00:13:23.499 --> 00:13:29.470
服务在这里与一个命名的咖啡师和

00:13:26.399 --> 00:13:32.160
当然也部署这两个

00:13:29.470 --> 00:13:34.990
应用程序再次完全隔离

00:13:32.160 --> 00:13:37.210
好吧，现在让我们这样做

00:13:34.990 --> 00:13:40.810
让我们最后部署一些我们正在

00:13:37.210 --> 00:13:43.350
将使用Q控制apply命令来

00:13:40.810 --> 00:13:48.040
好好运用我们拥有的这些资源

00:13:43.350 --> 00:13:51.550
所以我们要把整个

00:13:48.040 --> 00:13:53.490
文件夹实际上在咖啡店外

00:13:51.550 --> 00:13:56.500
咖啡师，然后它将创建

00:13:53.490 --> 00:13:58.030
所有资源对我们来说是为什么

00:13:56.500 --> 00:14:00.370
这被称为应用，这是

00:13:58.030 --> 00:14:03.040
其实是一个很好的故事，我们可以说哦，如果我

00:14:00.370 --> 00:14:06.700
重新申请它实际上没有伤害

00:14:03.040 --> 00:14:08.830
这些资源的任何应用或

00:14:06.700 --> 00:14:10.510
更改或创建，具体取决于

00:14:08.830 --> 00:14:12.940
集群的当前状态，如果

00:14:10.510 --> 00:14:13.750
在集群中已经存在

00:14:12.940 --> 00:14:16.510
没关系

00:14:13.750 --> 00:14:18.610
现在，如果我要服务

00:14:16.510 --> 00:14:20.770
在我的集群Q控件中

00:14:18.610 --> 00:14:23.590
服务，我会看到一家咖啡店和一家

00:14:20.770 --> 00:14:26.230
咖啡师服务和可爱的控制得到

00:14:23.590 --> 00:14:28.840
豆荚给我很好，跑步给了我

00:14:26.230 --> 00:14:33.280
跑步壶和咖啡厅，以及

00:14:28.840 --> 00:14:39.640
对于咖啡师来说还不错，所以现在

00:14:33.280 --> 00:14:42.870
我们将访问它，我得到我的

00:14:39.640 --> 00:14:46.590
我说我正在运行的群集中的群集IP 

00:14:42.870 --> 00:14:49.270
例如咖啡店资源订单

00:14:46.590 --> 00:14:51.700
这给了我咖啡订单

00:14:49.270 --> 00:14:53.680
空JSON空数组，因为

00:14:51.700 --> 00:14:56.380
那里没有订单

00:14:53.680 --> 00:14:58.480
系统，所以这对应于您

00:14:56.380 --> 00:15:01.030
刚刚在订单资源中看到的是

00:14:58.480 --> 00:15:05.440
现在部署在这里的就是咖啡

00:15:01.030 --> 00:15:07.660
 IP时访问的商店应用程序

00:15:05.440 --> 00:15:09.910
集群咖啡店的

00:15:07.660 --> 00:15:12.520
我的应用程序的上下文路径和

00:15:09.910 --> 00:15:15.100
资源实际上就是我所有的名字

00:15:12.520 --> 00:15:17.800
 jax-rs应用程序在这里，然后我们结束

00:15:15.100 --> 00:15:20.890
在订单资源上，我们

00:15:17.800 --> 00:15:23.770
获取订单和其中的系统

00:15:20.890 --> 00:15:27.400
例如，实际上默认的内存

00:15:23.770 --> 00:15:30.010
案例，所以这里什么都没有

00:15:27.400 --> 00:15:32.230
还没有咖啡，但让我们改变一下

00:15:30.010 --> 00:15:36.130
我们要煮些咖啡，以便

00:15:32.230 --> 00:15:38.260
意味着我需要向此发布一些JSON 

00:15:36.130 --> 00:15:40.330
正确的资源将创建一个帖子

00:15:38.260 --> 00:15:41.500
要求使用内核

00:15:40.330 --> 00:15:43.240
我们将在其中发布一些

00:15:41.500 --> 00:15:45.310
应用程序JSON内容

00:15:43.240 --> 00:15:48.910
键入，让我们来看看咖啡如何

00:15:45.310 --> 00:15:50.290
或实际上看起来像咖啡

00:15:48.910 --> 00:15:53.380
订单有一堆东西， 

00:15:50.290 --> 00:15:55.660
特别是咖啡类型，但我们想

00:15:53.380 --> 00:15:58.270
提供意式浓缩咖啡或

00:15:55.660 --> 00:16:00.910
拿铁咖啡或我们想要的任何东西

00:15:58.270 --> 00:16:04.630
喝酒吧，我们想喝一杯

00:16:00.910 --> 00:16:06.760
这里的意式浓缩咖啡，我们将创造

00:16:04.630 --> 00:16:09.630
那并希望它能正常工作201 

00:16:06.760 --> 00:16:13.630
已创建，因此已创建并

00:16:09.630 --> 00:16:14.920
希望很好，是的

00:16:13.630 --> 00:16:17.230
在系统中

00:16:14.920 --> 00:16:18.580
好吧，这显然是个好消息

00:16:17.230 --> 00:16:21.570
我们现在喝咖啡

00:16:18.580 --> 00:16:26.260
至少在我们的咖啡订购系统中

00:16:21.570 --> 00:16:30.820
好了，所以你可能有一件事

00:16:26.260 --> 00:16:33.250
注意到，如果您看看咖啡师

00:16:30.820 --> 00:16:35.470
我们的咖啡正在提供服务

00:16:33.250 --> 00:16:40.720
如果您关注商店申请

00:16:35.470 --> 00:16:42.790
在我们的httpclient中我们如何连接到

00:16:40.720 --> 00:16:46.990
另一个已经存在的应用程序

00:16:42.790 --> 00:16:49.870
非常有趣的是我们没有配置

00:16:46.990 --> 00:16:52.990
任何IP地址或任何DNS解析

00:16:49.870 --> 00:16:55.360
像这样的DM 

00:16:52.990 --> 00:16:58.260
个体个体环境

00:16:55.360 --> 00:17:01.120
我们可能只指定了咖啡师

00:16:58.260 --> 00:17:04.300
对我们来说这实际上是一个很好的故事

00:17:01.120 --> 00:17:06.970
因为这使我们能够

00:17:04.300 --> 00:17:10.959
甚至对该URL进行硬编码并摆脱

00:17:06.970 --> 00:17:13.410
特定于环境的配置

00:17:10.959 --> 00:17:16.540
那如何运作

00:17:13.410 --> 00:17:20.709
每个默认的kubernetes都在哪里

00:17:16.540 --> 00:17:22.630
 DNS解析资源

00:17:20.709 --> 00:17:24.490
所有群集的内部DNS解析

00:17:22.630 --> 00:17:26.679
服务名称，因此意味着

00:17:24.490 --> 00:17:29.410
这个名字的咖啡师，我们实际上可以

00:17:26.679 --> 00:17:31.900
将咖啡师访问主机名查找

00:17:29.410 --> 00:17:34.270
在内部的名称空间中

00:17:31.900 --> 00:17:36.130
集群并最终在运行之一

00:17:34.270 --> 00:17:38.380
咖啡师应用程序的实例

00:17:36.130 --> 00:17:40.840
这非常好，因为那时我们不

00:17:38.380 --> 00:17:44.620
必须配置一个ax p地址或一个

00:17:40.840 --> 00:17:47.110
 DNS名称，例如测试系统点

00:17:44.620 --> 00:17:48.880
咖啡师示例公司等

00:17:47.110 --> 00:17:52.740
等等，这使得它非常容易

00:17:48.880 --> 00:17:56.340
让我们在这里摆脱配置

00:17:52.740 --> 00:17:59.789
这是关于这里的kubernetes和

00:17:56.340 --> 00:18:03.809
那么显然很好，因为我们

00:17:59.789 --> 00:18:06.330
看到这已经给了我们跑步

00:18:03.809 --> 00:18:09.890
在某油井生产中的应用

00:18:06.330 --> 00:18:12.120
生产设置，还有更多事情

00:18:09.890 --> 00:18:14.130
当涉及到配置

00:18:12.120 --> 00:18:16.500
示例和配置是一个非常

00:18:14.130 --> 00:18:20.640
有趣的部分，特别是如果我们谈论

00:18:16.500 --> 00:18:23.159
大约12:12因数应用，所以12 

00:18:20.640 --> 00:18:25.200
因素是有趣的方面

00:18:23.159 --> 00:18:27.740
在该计划中已经建立的

00:18:25.200 --> 00:18:30.539
在这里你可以看看

00:18:27.740 --> 00:18:32.850
特别是如果我们建立我们的企业

00:18:30.539 --> 00:18:34.950
使用或Cloud Native的应用程序

00:18:32.850 --> 00:18:36.899
使用容器和技术

00:18:34.950 --> 00:18:38.909
容器编排，您可能会有

00:18:36.899 --> 00:18:41.730
看起来几乎所有这些

00:18:38.909 --> 00:18:45.210
因素已经申请

00:18:41.730 --> 00:18:47.220
意味着摆脱的示例配置

00:18:45.210 --> 00:18:50.070
应用程序上的配置

00:18:47.220 --> 00:18:52.169
水平，而是尝试从

00:18:50.070 --> 00:18:54.960
在应用程序之外

00:18:52.169 --> 00:18:57.870
这意味着我们不想

00:18:54.960 --> 00:19:00.000
配置哪个咖啡师后端

00:18:57.870 --> 00:19:01.919
我们在制作时使用的应用程序

00:19:00.000 --> 00:19:05.220
使用DNS的一部分环境

00:19:01.919 --> 00:19:07.740
分辨率或换句话说，如果我们有

00:19:05.220 --> 00:19:10.740
更改复制，如果有的话

00:19:07.740 --> 00:19:12.870
为什么它必须表现不同

00:19:10.740 --> 00:19:16.020
不同的环境，那么我们就不

00:19:12.870 --> 00:19:18.360
要建立多个运行多个

00:19:16.020 --> 00:19:21.809
二进制文件实际上不，我们要构建

00:19:18.360 --> 00:19:24.210
一次使用同一二进制文件提供

00:19:21.809 --> 00:19:25.799
遍地开花，潜力无限

00:19:24.210 --> 00:19:29.190
与外界的差异

00:19:25.799 --> 00:19:31.679
为什么因为可靠性，又因为

00:19:29.190 --> 00:19:34.590
测试意味着我们不断

00:19:31.679 --> 00:19:37.679
我们想要建立我们的交付管道

00:19:34.590 --> 00:19:40.710
映像和二进制一次并使用

00:19:37.679 --> 00:19:42.870
在每个阶段和测试中都是二进制的

00:19:40.710 --> 00:19:45.090
因此，我们可以确定以后

00:19:42.870 --> 00:19:48.690
它会起作用，因为我们始终会测试

00:19:45.090 --> 00:19:53.539
同一件事，所以这是我的一件事

00:19:48.690 --> 00:20:00.029
已经在这里使用，特别是

00:19:53.539 --> 00:20:02.909
如果你和你在这里喝咖啡

00:20:00.029 --> 00:20:05.940
也许已经看到了我的位置

00:20:02.909 --> 00:20:06.400
这实际上是在注入或

00:20:05.940 --> 00:20:08.650
存在

00:20:06.400 --> 00:20:11.620
当我喝咖啡的时候这个数字很好

00:20:08.650 --> 00:20:14.800
酿造我会说，如果我们有

00:20:11.620 --> 00:20:17.020
我们的咖啡订单，例如

00:20:14.800 --> 00:20:19.930
在这里访问该订单，然后我们

00:20:17.020 --> 00:20:22.210
可能会很好，我们也有一个位置

00:20:19.930 --> 00:20:26.470
可用的默认值是

00:20:22.210 --> 00:20:29.410
在Java上繁衍，所以在这个岛上

00:20:26.470 --> 00:20:31.420
这种情况是从哪里来的

00:20:29.410 --> 00:20:35.800
实际上配置此酿造位置

00:20:31.420 --> 00:20:40.360
这样我们将使用微型

00:20:35.800 --> 00:20:43.450
配置文件配置，所以实际上，如果您使用

00:20:40.360 --> 00:20:47.020
支持

00:20:43.450 --> 00:20:49.000
以及Java EE或Jakarta EE标准

00:20:47.020 --> 00:20:51.250
例如，作为微型配置文件项目

00:20:49.000 --> 00:20:53.950
 micah配置文件配置

00:20:51.250 --> 00:20:56.530
您可以实际使用和混合搭配

00:20:53.950 --> 00:20:58.810
同时存在的所有api 

00:20:56.530 --> 00:21:02.440
属于Java EE的企业Java 

00:20:58.810 --> 00:21:05.560
大幅削减微轮廓，为什么我要

00:21:02.440 --> 00:21:07.630
用这个好我想配置一个

00:21:05.560 --> 00:21:10.150
在这里配置我的应用程序

00:21:07.630 --> 00:21:12.400
有点云原生的方式，这意味着我

00:21:10.150 --> 00:21:14.200
不想在这里更改我的应用程序

00:21:12.400 --> 00:21:16.000
但从

00:21:14.200 --> 00:21:19.420
在这种情况下，实际上

00:21:16.000 --> 00:21:22.080
由环境变量很好地提供

00:21:19.420 --> 00:21:25.270
你怎么知道这有多个

00:21:22.080 --> 00:21:27.220
微型配置文件中的默认配置源

00:21:25.270 --> 00:21:30.520
可用，表示此查找键

00:21:27.220 --> 00:21:32.680
可能是从这里注入的位置

00:21:30.520 --> 00:21:34.750
我的环境变量示例

00:21:32.680 --> 00:21:36.880
运行我的系统的容器，以便

00:21:34.750 --> 00:21:39.360
开箱即用

00:21:36.880 --> 00:21:42.850
那我可以在这里提供这个位置

00:21:39.360 --> 00:21:46.360
默认被称为home和

00:21:42.850 --> 00:21:48.690
我有几个可用的位置

00:21:46.360 --> 00:21:51.760
查找很好，默认为home或

00:21:48.690 --> 00:21:54.220
除非它在

00:21:51.760 --> 00:21:57.670
环境变量，它在哪里

00:21:54.220 --> 00:21:59.860
来自我的部署中

00:21:57.670 --> 00:22:02.070
你可能已经看到了

00:21:59.860 --> 00:22:04.390
我要设置一个环境变量

00:22:02.070 --> 00:22:06.790
位置，所以这是一个kubernetes 

00:22:04.390 --> 00:22:09.670
具体配置非常相似

00:22:06.790 --> 00:22:11.890
到在环境中运行的docker 

00:22:09.670 --> 00:22:13.780
变量实际执行的参数

00:22:11.890 --> 00:22:16.360
在引擎盖下设置

00:22:13.780 --> 00:22:18.910
环境变量很好

00:22:16.360 --> 00:22:20.080
特定值，因此您可以设置一个

00:22:18.910 --> 00:22:23.380
值

00:22:20.080 --> 00:22:26.200
直接例如Java或说

00:22:23.380 --> 00:22:29.380
值实际上来自配置映射

00:22:26.200 --> 00:22:31.690
或其他配置存储，因此

00:22:29.380 --> 00:22:33.370
配置映射是古巴语中的另一种类型

00:22:31.690 --> 00:22:36.430
我可以实际配置的Aires 

00:22:33.370 --> 00:22:38.500
在环境中然后

00:22:36.430 --> 00:22:41.290
稍后我真正想要实现的

00:22:38.500 --> 00:22:44.440
这是说在这次跑步中很好

00:22:41.290 --> 00:22:47.380
部署我想使用配置

00:22:44.440 --> 00:22:51.340
该环境配置图

00:22:47.380 --> 00:22:53.650
配置，否则我实际上

00:22:51.340 --> 00:22:55.300
将此代码片段外包

00:22:53.650 --> 00:22:57.340
不同的文件

00:22:55.300 --> 00:22:58.600
测试环境中的环境

00:22:57.340 --> 00:23:01.000
生产环境，我要

00:22:58.600 --> 00:23:01.540
用不同的方式覆盖

00:23:01.000 --> 00:23:04.510
位置

00:23:01.540 --> 00:23:05.890
然后我可以重新配置我的

00:23:04.510 --> 00:23:08.680
无需实际更改的应用程序

00:23:05.890 --> 00:23:12.160
图像，所以这是非常好的，这

00:23:08.680 --> 00:23:15.880
很好地实施12这种方法

00:23:12.160 --> 00:23:18.550
这里有12个因素

00:23:15.880 --> 00:23:22.180
即将要讲的12个因素

00:23:18.550 --> 00:23:24.940
现在，如果我们看看这个

00:23:22.180 --> 00:23:27.550
已经在生产中运行此示例

00:23:24.940 --> 00:23:29.980
但是生产肯定不好

00:23:27.550 --> 00:23:33.100
准备好了，例如缺少

00:23:29.980 --> 00:23:35.790
关注，现在这是服务的地方

00:23:33.100 --> 00:23:40.180
网格或sto起作用

00:23:35.790 --> 00:23:42.490
特别是如果我们考虑得好

00:23:40.180 --> 00:23:45.250
部分可观察性发生了什么

00:23:42.490 --> 00:23:48.190
在我们的应用程序中，那么我们可能不会

00:23:45.250 --> 00:23:51.250
好在这里看到或知道一切，以便

00:23:48.190 --> 00:23:53.320
只是因为我们的资源

00:23:51.250 --> 00:23:57.070
请求已在此处创建，只是

00:23:53.320 --> 00:23:58.690
因为我们的图表显然表明

00:23:57.070 --> 00:24:00.820
咖啡师应用程序被调用

00:23:58.690 --> 00:24:03.070
我们实际上不知道发生了什么

00:24:00.820 --> 00:24:05.320
我们并没有真正进入系统

00:24:03.070 --> 00:24:08.320
我们这里缺乏可观察性，但是

00:24:05.320 --> 00:24:11.020
幸好我在这里有集群

00:24:08.320 --> 00:24:13.930
不仅是kubernetes集群，而且

00:24:11.020 --> 00:24:17.260
实际上，一个sto集群和SDO是一个

00:24:13.930 --> 00:24:20.560
很好的服务网格技术

00:24:17.260 --> 00:24:24.220
可能是使用最广泛的服务

00:24:20.560 --> 00:24:26.770
网格技术在那里，它沉重

00:24:24.220 --> 00:24:29.260
基于kubernetes或支持

00:24:26.770 --> 00:24:32.050
 kubernetes并能很好地协同工作

00:24:29.260 --> 00:24:33.880
什么是服务网格

00:24:32.050 --> 00:24:36.010
服务网格是一个网格

00:24:33.880 --> 00:24:38.080
互连微服务

00:24:36.010 --> 00:24:41.050
我们实际上可以添加的部署

00:24:38.080 --> 00:24:42.970
每个人都有一些担忧

00:24:41.050 --> 00:24:45.160
无需更改应用程序

00:24:42.970 --> 00:24:46.930
直接添加应用程序

00:24:45.160 --> 00:24:49.210
来自外部的担忧

00:24:46.930 --> 00:24:52.690
透明的方式表示关注

00:24:49.210 --> 00:24:56.320
可观察性或弹性或更高

00:24:52.690 --> 00:24:59.470
先进的交通管理，让我们

00:24:56.320 --> 00:25:02.080
从这里的可观察性开始

00:24:59.470 --> 00:25:07.330
有一种方法让我们看一下

00:25:02.080 --> 00:25:08.740
它又在工作我的秘密港口

00:25:07.330 --> 00:25:11.830
转发说这有效

00:25:08.740 --> 00:25:14.350
这是斧头上的图什么是图安娜

00:25:11.830 --> 00:25:16.150
那是一种监控技术，我

00:25:14.350 --> 00:25:18.550
没有设置那实际上是

00:25:16.150 --> 00:25:21.580
被提供并包含在ECU中

00:25:18.550 --> 00:25:24.130
安装，所以我们会拥有我们

00:25:21.580 --> 00:25:27.070
这里有一些仪表板

00:25:24.130 --> 00:25:31.240
实际可用，并且已经

00:25:27.070 --> 00:25:33.610
为我的服务很好地激活了，所以我们

00:25:31.240 --> 00:25:35.860
我又在这里有咖啡店服务

00:25:33.610 --> 00:25:38.830
没有配置使用自动

00:25:35.860 --> 00:25:42.160
在技​​术内发现M 

00:25:38.830 --> 00:25:44.920
现在我不认识你，但我想

00:25:42.160 --> 00:25:46.930
我们需要更多的咖啡，所以我

00:25:44.920 --> 00:25:53.080
我要去创造一些新的

00:25:46.930 --> 00:25:56.500
咖啡创建一些新的咖啡

00:25:53.080 --> 00:25:58.660
再来点新咖啡你的新咖啡

00:25:56.500 --> 00:26:03.160
咖啡新咖啡只是为了多喝点咖啡

00:25:58.660 --> 00:26:04.870
系统中的流量，现在我

00:26:03.160 --> 00:26:07.420
会在我的咖啡中看到更多

00:26:04.870 --> 00:26:10.480
店，所以我看到这家咖啡店

00:26:07.420 --> 00:26:12.730
服务实际上现在有一些流量，所以

00:26:10.480 --> 00:26:15.250
它包括一些默认值

00:26:12.730 --> 00:26:17.080
开箱即用的技术指标

00:26:15.250 --> 00:26:19.870
示例请求量是多少

00:26:17.080 --> 00:26:22.990
是该请求和持续时间

00:26:19.870 --> 00:26:24.880
具体服务以及当我们查看

00:26:22.990 --> 00:26:27.100
咖啡师服务，我们也看到了这一点，我们

00:26:24.880 --> 00:26:28.060
现在实际上有一些流量

00:26:27.100 --> 00:26:31.810
进入系统

00:26:28.060 --> 00:26:33.670
我们也看看

00:26:31.810 --> 00:26:36.700
流量来自，我们看到o是

00:26:33.670 --> 00:26:38.290
其实是从咖啡店来的

00:26:36.700 --> 00:26:41.410
这意味着咖啡厅是

00:26:38.290 --> 00:26:44.120
确实把我们的服务称为咖啡师

00:26:41.410 --> 00:26:46.429
服务还可以

00:26:44.120 --> 00:26:49.159
这样就可以直接使用

00:26:46.429 --> 00:26:50.840
与Cortana一起监控

00:26:49.159 --> 00:26:57.650
另一个有趣的故事

00:26:50.840 --> 00:26:59.539
现在提供的是它的连接

00:26:57.650 --> 00:27:02.480
失败了，所以我要在这里做什么

00:26:59.539 --> 00:27:04.669
其实我要把那部分关掉

00:27:02.480 --> 00:27:06.620
具体财富服务纳入

00:27:04.669 --> 00:27:08.570
集群，所以这是行动并在

00:27:06.620 --> 00:27:10.640
 localhost ，但在内部运行

00:27:08.570 --> 00:27:13.460
集群，我只是用一个可爱的

00:27:10.640 --> 00:27:15.169
控制端口转发命令

00:27:13.460 --> 00:27:18.370
我们有一个可爱的小家伙

00:27:15.169 --> 00:27:21.890
与德国人Yaga一起

00:27:18.370 --> 00:27:24.289
分布式跟踪技术以及

00:27:21.890 --> 00:27:26.570
我们可以跟踪单个请求

00:27:24.289 --> 00:27:28.460
通过系统到

00:27:26.570 --> 00:27:30.740
能够回溯实际的情况

00:27:28.460 --> 00:27:34.039
正在进行，哪个请求正在进行

00:27:30.740 --> 00:27:35.240
通过哪个具体实例，如果

00:27:34.039 --> 00:27:38.240
你要去看看

00:27:35.240 --> 00:27:40.750
特殊要求，我们将看到

00:27:38.240 --> 00:27:43.909
好吧，这实际上是这个请求

00:27:40.750 --> 00:27:49.070
当集群到

00:27:43.909 --> 00:27:51.289
入口入口网关，它最终

00:27:49.070 --> 00:27:53.029
在咖啡店申请，然后

00:27:51.289 --> 00:27:55.850
我们还有另一个要求

00:27:53.029 --> 00:27:59.330
同步致电我们的咖啡师

00:27:55.850 --> 00:28:01.640
带有请求的应用程序

00:27:59.330 --> 00:28:03.649
我们已经知道如果我们看看

00:28:01.640 --> 00:28:08.240
应放置在请求中的代码

00:28:03.649 --> 00:28:10.370
该URL，所以现在我们看到这是

00:28:08.240 --> 00:28:12.169
实际上被称为，我们看到

00:28:10.370 --> 00:28:14.059
咖啡店实际上是在打电话

00:28:12.169 --> 00:28:15.770
咖啡师服务的实例，所以我们

00:28:14.059 --> 00:28:21.549
可以回溯我们内部发生的事情

00:28:15.770 --> 00:28:26.330
系统另一个有趣的技术是

00:28:21.549 --> 00:28:29.510
这个被称为关键盟友的钥匙

00:28:26.330 --> 00:28:31.370
盟友是服务图技术加上

00:28:29.510 --> 00:28:33.320
一堆实际上是

00:28:31.370 --> 00:28:35.149
了解配置历史

00:28:33.320 --> 00:28:38.210
所以它知道这里发生了什么

00:28:35.149 --> 00:28:40.610
让我们在这里看动画

00:28:38.210 --> 00:28:43.070
我们所看到的我们将看到所有

00:28:40.610 --> 00:28:45.230
在这里存储资源，例如咖啡

00:28:43.070 --> 00:28:47.299
商店服务和咖啡师服务以及

00:28:45.230 --> 00:28:50.450
而其中哪一个特别

00:28:47.299 --> 00:28:54.590
版本说明了

00:28:50.450 --> 00:28:56.750
第二个是打电话给这个

00:28:54.590 --> 00:28:57.530
看看实际的要求

00:28:56.750 --> 00:28:59.300
通过系统

00:28:57.530 --> 00:29:02.060
并建立

00:28:59.300 --> 00:29:04.340
我们的微服务相当不错

00:29:02.060 --> 00:29:06.530
坦率地说，因为我们

00:29:04.340 --> 00:29:08.570
只有两个应用程序，一个调用

00:29:06.530 --> 00:29:11.420
其他，但如果你能想象我们是否有一个

00:29:08.570 --> 00:29:14.600
更复杂的设置，然后我们实际上

00:29:11.420 --> 00:29:18.710
查看哪个版本正在调用哪个版本

00:29:14.600 --> 00:29:20.870
应用程序，现在如何工作

00:29:18.710 --> 00:29:26.450
特别是可观察性

00:29:20.870 --> 00:29:28.070
提供开箱即用的服务

00:29:26.450 --> 00:29:32.210
网格技术或在Istria中

00:29:28.070 --> 00:29:35.030
特别是我们拥有的是

00:29:32.210 --> 00:29:37.490
 kubernetes服务以及我们的服务

00:29:35.030 --> 00:29:40.130
运行良好的部署

00:29:37.490 --> 00:29:41.720
实例运行Pod，但现在我们

00:29:40.130 --> 00:29:44.300
而不是只拥有主要

00:29:41.720 --> 00:29:46.490
容器我们实际上有第二个

00:29:44.300 --> 00:29:50.510
所谓的边车集装箱

00:29:46.490 --> 00:29:54.050
代理容器，实际上，如果我们调用

00:29:50.510 --> 00:29:55.760
服务，例如咖啡店

00:29:54.050 --> 00:29:59.030
我们的请求实际上最终在

00:29:55.760 --> 00:30:00.890
代理容器，然后我们将或可能

00:29:59.030 --> 00:30:03.710
将我们的请求转发给主要

00:30:00.890 --> 00:30:05.660
容器，然后如果主容器

00:30:03.710 --> 00:30:08.990
如果我们的应用程序要访问

00:30:05.660 --> 00:30:12.020
另一个服务很好，它访问

00:30:08.990 --> 00:30:14.230
也通过代理和那个请求

00:30:12.020 --> 00:30:16.640
结束于另一个代理

00:30:14.230 --> 00:30:18.380
将其转发到

00:30:16.640 --> 00:30:18.770
咖啡师实例和整个事情

00:30:18.380 --> 00:30:21.110
背部

00:30:18.770 --> 00:30:23.690
这些边柜是

00:30:21.110 --> 00:30:26.210
如果我们部署在每个锅里

00:30:23.690 --> 00:30:28.730
每个都有多个零件

00:30:26.210 --> 00:30:33.440
其中一个将拥有自己的代理

00:30:28.730 --> 00:30:35.330
所以这也是为什么如果我们看看

00:30:33.440 --> 00:30:37.730
您看到的实际上是我们拥有的部分

00:30:35.330 --> 00:30:40.070
每个部分有两个容器

00:30:37.730 --> 00:30:42.050
已经有两个，他们正在运行， 

00:30:40.070 --> 00:30:44.630
这也可以在以后提供

00:30:42.050 --> 00:30:47.180
框我没有指定两个容器

00:30:44.630 --> 00:30:50.450
每个已经指定一个，但这是

00:30:47.180 --> 00:30:52.720
被钢注入，现在你

00:30:50.450 --> 00:30:55.310
可以很好地想象所有这些

00:30:52.720 --> 00:30:58.010
可观察性行之有效，因为现在

00:30:55.310 --> 00:30:59.810
代理在这里看到所有通信

00:30:58.010 --> 00:31:02.450
并有能力发出

00:30:59.810 --> 00:31:05.930
信息，例如普罗米修斯

00:31:02.450 --> 00:31:09.020
和核心动物区系，或是Yaga和主要盟友

00:31:05.930 --> 00:31:10.940
依此类推，还有另一个

00:31:09.020 --> 00:31:13.880
要做的事情

00:31:10.940 --> 00:31:17.390
 -卡ee或实际上在我们的应用程序中

00:31:13.880 --> 00:31:19.580
如果我们想做那个工作，因为

00:31:17.390 --> 00:31:22.130
好吧，如果您看一下，或者如果您

00:31:19.580 --> 00:31:26.060
想象一下在跟踪中如何分布

00:31:22.130 --> 00:31:28.250
技术特别有效，我们如何

00:31:26.060 --> 00:31:31.550
 Yaga知道或怎么知道

00:31:28.250 --> 00:31:34.370
要求与这些相关

00:31:31.550 --> 00:31:37.280
要求很好的答案，不是

00:31:34.370 --> 00:31:39.350
因为那只是因为

00:31:37.280 --> 00:31:41.270
请求恰巧发生在

00:31:39.350 --> 00:31:43.250
与其他请求同时

00:31:41.270 --> 00:31:45.860
并不意味着一个引起了另一个

00:31:43.250 --> 00:31:48.500
但实际上我们要做的是

00:31:45.860 --> 00:31:51.170
提供相关ID，通常是

00:31:48.500 --> 00:31:54.880
 HTTP标头信息，这是

00:31:51.170 --> 00:31:58.340
实际上我们必须手动执行

00:31:54.880 --> 00:32:01.700
 Jager或Zipkin引入了事实

00:31:58.340 --> 00:32:05.990
标准开放Zipkin或开放跟踪

00:32:01.700 --> 00:32:09.950
我们必须传递HTTP标头的地方

00:32:05.990 --> 00:32:11.930
他们通常被称为X-B 3-tres 

00:32:09.950 --> 00:32:14.990
广告范围ID等，依此类推

00:32:11.930 --> 00:32:17.390
可能在我们需要之前见过他们

00:32:14.990 --> 00:32:18.710
在我们的同步请求中传递它们

00:32:17.390 --> 00:32:22.310
这实际上经历了我们

00:32:18.710 --> 00:32:25.010
申请，因为我们有订单

00:32:22.310 --> 00:32:26.870
资源，如果我们创建一个新的

00:32:25.010 --> 00:32:30.470
咖啡订单，我们最终会在

00:32:26.870 --> 00:32:33.170
这种资源，然后注入这些

00:32:30.470 --> 00:32:35.330
我们的HTTP标头，但这意味着

00:32:33.170 --> 00:32:39.260
现在在我们的应用程序中，我们知道会

00:32:35.330 --> 00:32:43.610
需要通过这些HTTP标头

00:32:39.260 --> 00:32:47.330
他们在下一个电话中传递给他们

00:32:43.610 --> 00:32:51.380
这里进入HTTP客户端将它们传递给这里

00:32:47.330 --> 00:32:53.090
或实际上将它们传递给

00:32:51.380 --> 00:32:57.110
提取HTTP标头信息

00:32:53.090 --> 00:32:58.970
再次-将其放到DHCP客户端

00:32:57.110 --> 00:33:02.390
因为那是一个同步请求

00:32:58.970 --> 00:33:04.520
很好，那行得通，但这将是

00:33:02.390 --> 00:33:06.920
其实很麻烦，所以我们不

00:33:04.520 --> 00:33:10.730
想要做到这一点，我们可以幸运地做

00:33:06.920 --> 00:33:13.130
很好地使用另一个项目是

00:33:10.730 --> 00:33:16.270
由微型配置文件提供

00:33:13.130 --> 00:33:20.690
称为微型配置文件公开跟踪和

00:33:16.270 --> 00:33:23.480
现在，如果你看看我的具体

00:33:20.690 --> 00:33:24.770
我的处女项目我什至没有

00:33:23.480 --> 00:33:28.130
介绍该API 

00:33:24.770 --> 00:33:31.160
为什么我只使用Java八个api加号

00:33:28.130 --> 00:33:34.970
云母配置文件配置加上实际运行状况

00:33:31.160 --> 00:33:37.420
检查这是由于kubernetes 

00:33:34.970 --> 00:33:40.460
我们要介绍的健康检查

00:33:37.420 --> 00:33:43.010
但不是微个人资料公开跟踪

00:33:40.460 --> 00:33:45.950
为什么会这样，因为我们什至不使用

00:33:43.010 --> 00:33:49.460
 API，但我们能做的就是指导

00:33:45.950 --> 00:33:53.480
在这种情况下，我们的运行时将Liberty打开

00:33:49.460 --> 00:33:55.760
请提供此功能以供使用

00:33:53.480 --> 00:33:58.730
跟踪头并将其传递出去

00:33:55.760 --> 00:34:01.070
自动将任何一个框

00:33:58.730 --> 00:34:04.610
客户如何运作

00:34:01.070 --> 00:34:07.010
所以现在这是针对自由的

00:34:04.610 --> 00:34:09.770
我在这里做的是我配置了

00:34:07.010 --> 00:34:12.679
通过这些功能运行Liberty 

00:34:09.770 --> 00:34:14.690
我可以使用，所以现在有点

00:34:12.679 --> 00:34:17.300
有点优化的版本

00:34:14.690 --> 00:34:20.540
我可以说再详细一点

00:34:17.300 --> 00:34:23.659
特别是这些功能在我的

00:34:20.540 --> 00:34:25.370
运行运行时，以便优化我的

00:34:23.659 --> 00:34:26.870
运行时有点，什么是

00:34:25.370 --> 00:34:30.470
有趣的部分实际上是这些

00:34:26.870 --> 00:34:32.720
云母简介打开跟踪，而

00:34:30.470 --> 00:34:35.360
自由特定的Zipkin实施

00:34:32.720 --> 00:34:38.090
这些是做什么的

00:34:35.360 --> 00:34:40.669
这些东西使我真正受益

00:34:38.090 --> 00:34:43.399
如果我收到系统请求

00:34:40.669 --> 00:34:46.760
具有这些开放的跟踪标头

00:34:43.399 --> 00:34:48.950
可用，那么实际上我可以通过

00:34:46.760 --> 00:34:52.340
他们在这里，如果我最终在

00:34:48.950 --> 00:34:54.050
 HTTP客户端中的同步请求

00:34:52.340 --> 00:34:56.419
一个jax-rs客户程序，它将

00:34:54.050 --> 00:34:58.160
自动将这些标头传递给我

00:34:56.419 --> 00:35:00.770
请求，我不必做任何事情

00:34:58.160 --> 00:35:02.300
否则我只需要指示运行时

00:35:00.770 --> 00:35:04.820
这实际上是

00:35:02.300 --> 00:35:06.800
应用程序，这将工作，它

00:35:04.820 --> 00:35:08.660
之所以有效，是因为虽然我们看到这

00:35:06.800 --> 00:35:10.520
实际上连接到另一个

00:35:08.660 --> 00:35:15.260
与其他请求相关，因此

00:35:10.520 --> 00:35:18.350
显示在这一特定页面中， 

00:35:15.260 --> 00:35:20.990
一个请求导致另一个

00:35:18.350 --> 00:35:24.220
我们需要为跟踪添加什么

00:35:20.990 --> 00:35:27.020
除了这里的例子，我们可以看到

00:35:24.220 --> 00:35:28.850
服务网格可以很好地提供所有

00:35:27.020 --> 00:35:31.220
这些信息，然后进一步

00:35:28.850 --> 00:35:32.720
可行的是我们将拥有控制权

00:35:31.220 --> 00:35:36.050
由多个组成的平面

00:35:32.720 --> 00:35:38.480
 pi由by提供的组件

00:35:36.050 --> 00:35:40.010
绝缘

00:35:38.480 --> 00:35:42.440
而那个控制计划实际上

00:35:40.010 --> 00:35:45.170
与所有人沟通

00:35:42.440 --> 00:35:47.180
代理容器，这样我们就可以

00:35:45.170 --> 00:35:49.700
配置代理容器的方式

00:35:47.180 --> 00:35:52.910
他们实际上应该表现出来，而且我们

00:35:49.700 --> 00:35:56.570
可以将所有遥测数据抓取到

00:35:52.910 --> 00:35:58.160
提供可观察性

00:35:56.570 --> 00:36:01.340
那是关于

00:35:58.160 --> 00:36:05.090
可观察性部分我们还能做什么

00:36:01.340 --> 00:36:08.240
实际上是有一些

00:36:05.090 --> 00:36:11.840
更多有关高级联网的信息或更多信息

00:36:08.240 --> 00:36:14.420
交通管理，因为我们有这些

00:36:11.840 --> 00:36:16.850
代理和代理容器

00:36:14.420 --> 00:36:19.300
可用，所以我们现在可以说

00:36:16.850 --> 00:36:22.160
好吧，而不是路由到这个咖啡师

00:36:19.300 --> 00:36:25.840
实例出于某种原因转至

00:36:22.160 --> 00:36:28.910
其他或提供更多

00:36:25.840 --> 00:36:32.240
弹性，所以代理现在

00:36:28.910 --> 00:36:33.650
对此有更多控制，让我们开始吧

00:36:32.240 --> 00:36:37.040
有一些更先进的流量

00:36:33.650 --> 00:36:40.400
管理，这是一个有趣的部分，让我

00:36:37.040 --> 00:36:42.590
快速向您展示一些资源

00:36:40.400 --> 00:36:44.500
现在在这里我有很多内容

00:36:42.590 --> 00:36:47.840
提供我会为您提供更多

00:36:44.500 --> 00:36:49.340
我可以实际阅读和阅读的资源

00:36:47.840 --> 00:36:51.770
观看，还有一点

00:36:49.340 --> 00:36:54.590
一个小时，但只是一个介绍

00:36:51.770 --> 00:36:57.140
我们为了配置

00:36:54.590 --> 00:37:00.170
交通管理是我们要做的

00:36:57.140 --> 00:37:02.030
一些更多的骆驼，尤其是一些

00:37:00.170 --> 00:37:04.520
非常像的资源

00:37:02.030 --> 00:37:08.720
人文资源，实际上是这些

00:37:04.520 --> 00:37:10.670
是罪犯的扩展名，所以一种是

00:37:08.720 --> 00:37:13.010
称为虚拟服务，另一个

00:37:10.670 --> 00:37:16.180
被称为目标池，所以

00:37:13.010 --> 00:37:18.680
这些虚拟服务很好

00:37:16.180 --> 00:37:21.800
配置服务的一部分

00:37:18.680 --> 00:37:24.290
维修服务网关于

00:37:21.800 --> 00:37:26.480
流量路由，以便它配置

00:37:24.290 --> 00:37:30.140
在这种情况下的路由规则

00:37:26.480 --> 00:37:32.630
咖啡师服务，这是什么？ 

00:37:30.140 --> 00:37:34.700
服务网格中的服务

00:37:32.630 --> 00:37:38.090
默认所有kubernetes服务

00:37:34.700 --> 00:37:40.850
实际上是服务网格服务

00:37:38.090 --> 00:37:42.830
以及我们还可以有更多

00:37:40.850 --> 00:37:45.800
例如高级示例，我们可以

00:37:42.830 --> 00:37:49.400
提供通配符虚拟服务部门

00:37:45.800 --> 00:37:51.290
或通过服务扩展我们的网格

00:37:49.400 --> 00:37:52.380
实际上不是我们的kubernetes的一部分

00:37:51.290 --> 00:37:55.200
群集为

00:37:52.380 --> 00:37:57.000
被称为虚拟服务，我们可以

00:37:55.200 --> 00:38:00.839
在这种情况下，提供一些路由

00:37:57.000 --> 00:38:04.589
 HTTP路由所有的

00:38:00.839 --> 00:38:06.809
路由到咖啡师主持人，请写信给

00:38:04.589 --> 00:38:08.849
咖啡师后端，所以非常

00:38:06.809 --> 00:38:12.000
无聊实际上是默认路线

00:38:08.849 --> 00:38:15.750
在这里，我们有这个目的地规则

00:38:12.000 --> 00:38:18.269
可以为

00:38:15.750 --> 00:38:20.700
咖啡师的特定目的地

00:38:18.269 --> 00:38:23.819
例如目的地，如果我们想

00:38:20.700 --> 00:38:26.250
有一些进一步的授权或一些

00:38:23.819 --> 00:38:30.000
我们也可以在其中执行双向TLS 

00:38:26.250 --> 00:38:33.180
交易我们可以在这里提供它

00:38:30.000 --> 00:38:34.950
还提供了子集是什么

00:38:33.180 --> 00:38:37.259
子集是一个子集

00:38:34.950 --> 00:38:40.049
特定服务的细分设置

00:38:37.259 --> 00:38:44.940
我们可以划分特定服务的地方

00:38:40.049 --> 00:38:48.210
到多个略有不同的实例

00:38:44.940 --> 00:38:52.140
所以我们这里只有一个子集

00:38:48.210 --> 00:38:54.000
实际上称为v1，它会选择所有

00:38:52.140 --> 00:38:56.490
这些实例在此处带有特定标签

00:38:54.000 --> 00:38:58.650
您可能在此之前已经看到

00:38:56.490 --> 00:39:00.960
标签实际上是在

00:38:58.650 --> 00:39:03.509
盆，所以这是另一米

00:39:00.960 --> 00:39:05.730
信息-我将选择一些

00:39:03.509 --> 00:39:06.990
开箱即用的信息

00:39:05.730 --> 00:39:09.029
什么也没做，因为我们总是

00:39:06.990 --> 00:39:12.900
路由到该标签，但我们可以指定

00:39:09.029 --> 00:39:15.029
那咖啡店的样子

00:39:12.900 --> 00:39:16.799
就像很相似，你有一个虚拟的

00:39:15.029 --> 00:39:19.980
服务和目的地规则

00:39:16.799 --> 00:39:21.480
由于那也是用户所面对的

00:39:19.980 --> 00:39:23.849
应用程序，我们有一些东西

00:39:21.480 --> 00:39:25.950
如果您熟悉，则称为网关

00:39:23.849 --> 00:39:28.319
 kubernetes进入这实际上是

00:39:25.950 --> 00:39:31.589
非常相似，这提供了入口

00:39:28.319 --> 00:39:33.630
进入服务网格的原因

00:39:31.589 --> 00:39:36.180
暂时使用网关，因为这是

00:39:33.630 --> 00:39:38.460
知道这里是地理配置

00:39:36.180 --> 00:39:42.259
然后就可以使用了

00:39:38.460 --> 00:39:44.789
在此处更正资源和代理，以及

00:39:42.259 --> 00:39:48.960
我们也会很好地路由一切

00:39:44.789 --> 00:39:51.980
如果我们现在将v1子集

00:39:48.960 --> 00:39:54.240
想要进一步

00:39:51.980 --> 00:39:57.569
在这里配置我们可以做什么

00:39:54.240 --> 00:40:01.380
实际上很好地提供了另一个子集

00:39:57.569 --> 00:40:03.720
只是为了好玩，我们现在也叫我

00:40:01.380 --> 00:40:05.340
让我们现场编码一些llamo 

00:40:03.720 --> 00:40:08.930
在这里勇敢

00:40:05.340 --> 00:40:12.360
那实际上有效，我现在增强了我的

00:40:08.930 --> 00:40:15.630
咖啡店服务的一部分

00:40:12.360 --> 00:40:19.890
可能还包括b2 

00:40:15.630 --> 00:40:23.430
在我实际拥有v2示例之前

00:40:19.890 --> 00:40:25.560
这里很好地使用了不同的方法

00:40:23.430 --> 00:40:27.810
不同的图像在这里稍微起作用

00:40:25.560 --> 00:40:30.470
不同的是，我们可以做的很好

00:40:27.810 --> 00:40:34.230
例如我们可以切换流量

00:40:30.470 --> 00:40:38.550
使用v2子集代替

00:40:34.230 --> 00:40:46.200
人们每个子集，所以我们可以

00:40:38.550 --> 00:40:49.260
这样做我们可以立即应用

00:40:46.200 --> 00:40:52.410
关于这个的故事是因为这些

00:40:49.260 --> 00:40:55.560
资源扩展了kubernetes的问题

00:40:52.410 --> 00:40:59.130
资源，或者他们可以在这里看到我们可以

00:40:55.560 --> 00:41:01.500
实际使用多维数据集控件来很好地使用

00:40:59.130 --> 00:41:03.570
相同外观的相同资源， 

00:41:01.500 --> 00:41:05.970
感觉例如多维数据集控件得到

00:41:03.570 --> 00:41:08.220
服务给我们服务和排队

00:41:05.970 --> 00:41:10.410
虚拟服务的控制使我们

00:41:08.220 --> 00:41:12.660
这些虚拟服务不

00:41:10.410 --> 00:41:15.330
在独立的kubernetes集群中工作

00:41:12.660 --> 00:41:18.000
但是一旦我们安装了它就可以工作

00:41:15.330 --> 00:41:19.920
因为它扩展了我们的API，所以我们可以使用

00:41:18.000 --> 00:41:21.960
相同的外观和感觉

00:41:19.920 --> 00:41:27.630
非常适合开发人员或用户

00:41:21.960 --> 00:41:30.840
经验，现在，如果我们要求

00:41:27.630 --> 00:41:33.120
咖啡订单再次，这实际上是

00:41:30.840 --> 00:41:35.430
空，为什么现在好，因为我们使用

00:41:33.120 --> 00:41:40.080
其他应用程序，默认情况下，我们

00:41:35.430 --> 00:41:41.850
系统中没有任何订单，因此

00:41:40.080 --> 00:41:44.250
让我们更改它，我们创建另一个

00:41:41.850 --> 00:41:45.960
咖啡订单，现在我们实际上看到了

00:41:44.250 --> 00:41:50.820
路由选择不同

00:41:45.960 --> 00:41:53.940
应用程序到v2应用程序

00:41:50.820 --> 00:41:56.460
这里有不同的反应，所以我们

00:41:53.940 --> 00:41:58.710
引入一些超媒体链接

00:41:56.460 --> 00:42:03.450
记住ID的话

00:41:58.710 --> 00:42:07.650
从以前开始，所以现在要重新路由

00:42:03.450 --> 00:42:11.100
从子集v1到v2的流量，但是

00:42:07.650 --> 00:42:12.870
手动或明确地不仅由

00:42:11.100 --> 00:42:16.650
 kubernetes部署我们能做什么

00:42:12.870 --> 00:42:19.000
同样，例如我们可以在这里做什么

00:42:16.650 --> 00:42:22.090
是提供更多

00:42:19.000 --> 00:42:25.060
先进的方案，所以代替

00:42:22.090 --> 00:42:28.600
有一个目的地，我们可能会说得很好

00:42:25.060 --> 00:42:35.260
我们想要有两个目的地v1 

00:42:28.600 --> 00:42:37.690
也许有70％的流量，我们- 

00:42:35.260 --> 00:42:41.290
 30％的流量，这就是我们的方式

00:42:37.690 --> 00:42:45.190
可以实施一些测试

00:42:41.290 --> 00:42:47.350
这个例子意味着我们部署到特定的

00:42:45.190 --> 00:42:50.050
版本的应用程序，现在我们

00:42:47.350 --> 00:42:53.260
实际指导代理的ISTE- 

00:42:50.050 --> 00:42:56.950
做好与

00:42:53.260 --> 00:43:01.000
基于百分比的路由在这里，如果

00:42:56.950 --> 00:43:06.400
我们说我们不仅要再做一次

00:43:01.000 --> 00:43:08.710
创建它，但让我们要求

00:43:06.400 --> 00:43:10.600
咖啡订单，所以我们要么会好起来

00:43:08.710 --> 00:43:12.880
所有订单的全程回应

00:43:10.600 --> 00:43:14.830
在此之前或之前创建

00:43:12.880 --> 00:43:18.820
用新的应用程序响应

00:43:14.830 --> 00:43:22.180
使用v2应用程序，这就是方法

00:43:18.820 --> 00:43:26.470
我们可以在这里实施be测试

00:43:22.180 --> 00:43:28.690
金丝雀发布，例如，如果我们

00:43:26.470 --> 00:43:30.820
有一个新版本，我们只想

00:43:28.690 --> 00:43:33.400
在这里发芽我们的特定子集

00:43:30.820 --> 00:43:35.620
用户介绍的变化不大

00:43:33.400 --> 00:43:39.940
爆炸的方式，但仅举例说明

00:43:35.620 --> 00:43:42.760
流量的5％或10:30等

00:43:39.940 --> 00:43:46.180
依此类推，然后逐渐增加

00:43:42.760 --> 00:43:49.420
这样做对我们有很大帮助

00:43:46.180 --> 00:43:52.950
我们可以在这里实际做到

00:43:49.420 --> 00:43:58.060
自动化的方式，还有什么

00:43:52.950 --> 00:44:01.090
我们可以有其他方法

00:43:58.060 --> 00:44:03.010
我们也在我们进行一些测试

00:44:01.090 --> 00:44:05.560
说好吧，而不是我们实际上

00:44:03.010 --> 00:44:08.380
介绍了一些进一步的标准

00:44:05.560 --> 00:44:12.850
例如说而不是路线

00:44:08.380 --> 00:44:20.740
匹配流量，例如匹配

00:44:12.850 --> 00:44:28.530
 HTTP标头认为这是一个数组- 

00:44:20.740 --> 00:44:28.530
例如带标题Pete 

00:44:28.810 --> 00:44:43.930
我认为它被命名为用户代理，不是

00:44:39.310 --> 00:44:47.370
标头用户代理，即名称

00:44:43.930 --> 00:44:51.210
然后以抹布X为例

00:44:47.370 --> 00:44:56.490
认为这是默认示例

00:44:51.210 --> 00:45:01.930
在此处路由Firefox浏览器

00:44:56.490 --> 00:45:06.210
前往这条路线v2，其余前往v1 

00:45:01.930 --> 00:45:08.980
我希望这个路由是正确的

00:45:06.210 --> 00:45:13.140
再次，这是llamo现场编码

00:45:08.980 --> 00:45:21.300
哦，这是不正确的错误

00:45:13.140 --> 00:45:23.830
标头使用代理，此正确无误

00:45:21.300 --> 00:45:28.780
所以这就是为什么我不应该活

00:45:23.830 --> 00:45:31.570
我想我需要用mo编码

00:45:28.780 --> 00:45:35.890
看看那个样子

00:45:31.570 --> 00:45:42.280
就像您使用座席行动路线

00:45:35.890 --> 00:45:44.650
哦，这是正确的，是的，第一个在

00:45:42.280 --> 00:45:48.940
数组第二个不再存在

00:45:44.650 --> 00:45:52.030
编码，但是现在我们可以看到

00:45:48.940 --> 00:45:54.850
我们要求我们的咖啡订单，那么现在我们

00:45:52.030 --> 00:45:58.060
始终获得该版本v1，除非我们

00:45:54.850 --> 00:45:59.980
在这种情况下指定HTTP标头用户

00:45:58.060 --> 00:46:02.650
代理商或我们实际上使用

00:45:59.980 --> 00:46:05.170
 Firefox浏览器，然后我们所有人都只能得到

00:46:02.650 --> 00:46:07.270
这个资源，所以这又是为了

00:46:05.170 --> 00:46:10.810
进一步测试以路由特定的

00:46:07.270 --> 00:46:15.880
该资源的部分用户

00:46:10.810 --> 00:46:18.940
例如，让我们再次撤消此操作

00:46:15.880 --> 00:46:22.330
让我们将一切路由到我们再次赢得

00:46:18.940 --> 00:46:25.060
并应用，所以这是如何介绍

00:46:22.330 --> 00:46:27.820
一些进一步的高级流量管理

00:46:25.060 --> 00:46:29.740
我在这里也将包括的内容

00:46:27.820 --> 00:46:32.290
给我们一些代码实际上是一些

00:46:29.740 --> 00:46:35.650
示例它可以做什么连接金丝雀

00:46:32.290 --> 00:46:37.930
以更自动化的方式发布

00:46:35.650 --> 00:46:39.870
因此，您当然应该做的一部分

00:46:37.930 --> 00:46:42.730
您的连续部署流程

00:46:39.870 --> 00:46:45.099
或作为您部署的一部分

00:46:42.730 --> 00:46:47.740
不是像我这样以手动方式

00:46:45.099 --> 00:46:49.359
只是通过手动编辑llamo而完成的， 

00:46:47.740 --> 00:46:51.550
实际上提供一些自动化

00:46:49.359 --> 00:46:54.130
你把这部分变成你的

00:46:51.550 --> 00:46:56.950
部署说好，我们有一个新

00:46:54.130 --> 00:46:58.869
在这里部署意味着我们有了一个新的

00:46:56.950 --> 00:47:01.390
咖啡店或咖啡师的版本

00:46:58.869 --> 00:47:03.640
示例以及我们如何部署该示例

00:47:01.390 --> 00:47:06.490
大爆炸的方法，但为了设定

00:47:03.640 --> 00:47:08.829
新版本的咖啡师并使用

00:47:06.490 --> 00:47:12.400
逐步增加流量

00:47:08.829 --> 00:47:15.250
从1％路由到5％到25％ 

00:47:12.400 --> 00:47:17.890
到您要指定的任何内容，然后

00:47:15.250 --> 00:47:19.869
也使用提供的监控来查看

00:47:17.890 --> 00:47:21.640
是否立即更新新版本

00:47:19.869 --> 00:47:24.280
炸毁并产生很多错误

00:47:21.640 --> 00:47:26.440
然后自动回滚

00:47:24.280 --> 00:47:28.750
就是这种情况，或者您可以推出

00:47:26.440 --> 00:47:31.780
进一步增加流量

00:47:28.750 --> 00:47:34.690
不会影响那么多用户，如果

00:47:31.780 --> 00:47:36.339
出问题了，要

00:47:34.690 --> 00:47:38.859
有一个更好的自动化方法

00:47:36.339 --> 00:47:41.589
部署，这是一种方法， 

00:47:38.859 --> 00:47:44.130
你应该接受我告诉你的

00:47:41.589 --> 00:47:47.440
之前是我们也有一些

00:47:44.130 --> 00:47:50.319
内建弹性，我们可以

00:47:47.440 --> 00:47:53.470
其实要做的就是说好

00:47:50.319 --> 00:47:55.540
如果咖啡师服务真的去了

00:47:53.470 --> 00:47:57.280
下来，变得不可用怎么办

00:47:55.540 --> 00:48:00.849
如果不是这样，我们的应用程序会做出反应

00:47:57.280 --> 00:48:07.089
在那里，如果你看看

00:48:00.849 --> 00:48:08.980
我们的咖啡师HCP客户很好

00:48:07.089 --> 00:48:10.829
将HTTP客户端与超时一起使用

00:48:08.980 --> 00:48:13.829
这总是一个好主意

00:48:10.829 --> 00:48:16.690
所以我们在这里指定行为的时间

00:48:13.829 --> 00:48:18.609
但是如果我们使用一些

00:48:16.690 --> 00:48:20.890
技术，那不是

00:48:18.609 --> 00:48:23.230
情况或如果不是这样

00:48:20.890 --> 00:48:25.119
得到很好的支持或指定

00:48:23.230 --> 00:48:27.670
实际上在这种情况下，我们也可以使用

00:48:25.119 --> 00:48:31.599
例如我们的超时行为

00:48:27.670 --> 00:48:34.329
通过SEO配置代理什么

00:48:31.599 --> 00:48:38.079
我们实际上可以做的是提供

00:48:34.329 --> 00:48:40.540
超时定义，例如一个

00:48:38.079 --> 00:48:42.609
第二个是这条路线的一部分

00:48:40.540 --> 00:48:46.270
而这是在我们的

00:48:42.609 --> 00:48:49.089
虚拟服务路由，因此如果我们应用

00:48:46.270 --> 00:48:52.140
那意味着当我们有

00:48:49.089 --> 00:48:52.140
正在应用超时

00:48:52.839 --> 00:48:57.880
现在，如果我们很好地煮咖啡

00:48:55.029 --> 00:49:02.559
超时保护的订单

00:48:57.880 --> 00:49:04.749
我猜它看起来很好吗

00:49:02.559 --> 00:49:06.039
很好喜欢我们如何测试它

00:49:04.749 --> 00:49:09.579
那个超时是否真的在

00:49:06.039 --> 00:49:12.069
之所以应用，是因为该路线现在是

00:49:09.579 --> 00:49:13.930
由一秒钟的超时保护

00:49:12.069 --> 00:49:15.940
意味着是否需要更长的时间，或者

00:49:13.930 --> 00:49:19.269
咖啡师应用程序不可用

00:49:15.940 --> 00:49:21.430
然后这将终止连接

00:49:19.269 --> 00:49:24.489
一秒钟，但为了测试我们

00:49:21.430 --> 00:49:27.549
要么需要重新部署故障

00:49:24.489 --> 00:49:29.140
咖啡师应用程序的测试版本

00:49:27.549 --> 00:49:31.390
为了对其进行良好的测试

00:49:29.140 --> 00:49:34.960
正确地测试是否

00:49:31.390 --> 00:49:38.109
实际情况还是我们很好地使用了一些

00:49:34.960 --> 00:49:41.469
行为Byam有一些功能，但是

00:49:38.109 --> 00:49:43.569
这样做实际上可以做到

00:49:41.469 --> 00:49:47.079
测试目的，我们实际上可以

00:49:43.569 --> 00:49:50.469
引入一些错误，这意味着

00:49:47.079 --> 00:49:53.170
为了好玩，我们实际上可以指示

00:49:50.469 --> 00:49:55.329
咖啡师服务好丢一些

00:49:53.170 --> 00:49:58.690
箭头或使涂药器

00:49:55.329 --> 00:50:01.269
连接速度较慢，所以我们可以做的是

00:49:58.690 --> 00:50:04.479
实际上引入一些缺陷

00:50:01.269 --> 00:50:09.009
例如一些延迟，假设我们要

00:50:04.479 --> 00:50:10.839
固定延迟三秒，但

00:50:09.009 --> 00:50:13.930
并非一直如此，仅在

00:50:10.839 --> 00:50:16.660
现在的情况用于测试

00:50:13.930 --> 00:50:19.420
不要在生产中这样做

00:50:16.660 --> 00:50:24.940
使应用程序变慢，以便

00:50:19.420 --> 00:50:29.019
测试我们的行为

00:50:24.940 --> 00:50:31.809
应用或良好的环境

00:50:29.019 --> 00:50:35.710
这里发生了什么

00:50:31.809 --> 00:50:38.109
该请求立即生效，或者

00:50:35.710 --> 00:50:40.930
在一个中调用的摘要应用程序

00:50:38.109 --> 00:50:42.430
同步方式需要三秒钟

00:50:40.930 --> 00:50:44.170
实际上对于

00:50:42.430 --> 00:50:46.619
超时，然后我们超时

00:50:44.170 --> 00:50:50.650
一会儿

00:50:46.619 --> 00:50:53.410
提供在这里，然后我们也很好看

00:50:50.650 --> 00:50:56.680
如果我们有一个错误请求

00:50:53.410 --> 00:50:59.549
看看我们让我们尝试找出有问题的地方

00:50:56.680 --> 00:51:02.530
在我们的分布式跟踪中请求此处

00:50:59.549 --> 00:51:05.650
以Yaga为例

00:51:02.530 --> 00:51:09.220
所以我现在可以根据找到一个

00:51:05.650 --> 00:51:12.730
我们在这里追踪了多少

00:51:09.220 --> 00:51:14.980
一个变量，如果我们看一下

00:51:12.730 --> 00:51:17.170
实际上是一个特定的请求

00:51:14.980 --> 00:51:19.330
一秒钟或之后被终止

00:51:17.170 --> 00:51:23.430
我们也看到了，所以这实际上是

00:51:19.330 --> 00:51:23.430
更有趣的关键盟友

00:51:23.550 --> 00:51:28.120
现在可观察的服务图

00:51:25.780 --> 00:51:32.830
向我们提供了更多详细信息，因此在此之前

00:51:28.120 --> 00:51:35.080
我们有v1和v2，所以现在

00:51:32.830 --> 00:51:37.120
可用，因为它知道

00:51:35.080 --> 00:51:39.130
子集，它会在我们处于

00:51:37.120 --> 00:51:42.010
我们要去之前和之前

00:51:39.130 --> 00:51:44.590
现在实际路由到两个版本

00:51:42.010 --> 00:51:47.140
仅路由到v1，但我们看到这是

00:51:44.590 --> 00:51:49.090
当我们完全获得功能时

00:51:47.140 --> 00:51:52.360
我很棒的特定错误

00:51:49.090 --> 00:51:53.710
这里是上次计算得出的

00:51:52.360 --> 00:51:57.220
再次提供更多

00:51:53.710 --> 00:52:00.190
可观察性这是怎么回事

00:51:57.220 --> 00:52:02.470
与Cortana一起，我们所看到的以及

00:52:00.190 --> 00:52:04.540
咖啡店申请成功率

00:52:02.470 --> 00:52:07.150
下去等等，这样

00:52:04.540 --> 00:52:11.070
为您提供一些信息

00:52:07.150 --> 00:52:13.210
框，因此对

00:52:11.070 --> 00:52:14.740
调试和测试目的

00:52:13.210 --> 00:52:18.370
一般，如果您想测试您的

00:52:14.740 --> 00:52:20.800
应用程序一旦外部响应

00:52:18.370 --> 00:52:23.260
系统有问题，那么您可以

00:52:20.800 --> 00:52:26.980
看看那个也很

00:52:23.260 --> 00:52:30.190
有用的，所以很快就做最后一件事

00:52:26.980 --> 00:52:33.040
很好如何调试Java 

00:52:30.190 --> 00:52:35.890
 Kubernetes中的企业应用程序

00:52:33.040 --> 00:52:38.410
环境，所以有一些工具

00:52:35.890 --> 00:52:41.250
可以实际帮助您或

00:52:38.410 --> 00:52:43.270
调试这里发生的事情并

00:52:41.250 --> 00:52:46.150
我想告诉你的是

00:52:43.270 --> 00:52:50.110
两件事是一种叫做监视的工具， 

00:52:46.150 --> 00:52:52.660
由亚当豆制成的

00:52:50.110 --> 00:52:54.640
好，并不多，实际上听

00:52:52.660 --> 00:52:57.310
对于任何文件更改和重建，以及

00:52:54.640 --> 00:52:59.290
将您的应用程序重新部署到精简版

00:52:57.310 --> 00:53:02.290
部署工件相同的东西我们

00:52:59.290 --> 00:53:05.500
在这里，你也可以做得很好

00:53:02.290 --> 00:53:09.100
如果您将瓦数用于部署，并且

00:53:05.500 --> 00:53:11.470
实际存在的目录

00:53:09.100 --> 00:53:14.320
连接到正在运行的容器，您可以

00:53:11.470 --> 00:53:16.620
如何重新部署您的Docker容器

00:53:14.320 --> 00:53:20.190
不仅是本地贴花

00:53:16.620 --> 00:53:22.080
好吧，但现在我们也有kubernetes，所以

00:53:20.190 --> 00:53:24.270
可以，我提供了一些信息

00:53:22.080 --> 00:53:26.220
如果你想看看汉娜看看

00:53:24.270 --> 00:53:29.610
那与本地码头工人如何工作

00:53:26.220 --> 00:53:34.380
容器，我们也使用什么

00:53:29.610 --> 00:53:39.000
如果使用kubernetes集群可以很好地工作

00:53:34.380 --> 00:53:41.700
您使用称为网真的工具

00:53:39.000 --> 00:53:45.270
那是一个很好的连接工具

00:53:41.700 --> 00:53:48.150
替换在

00:53:45.270 --> 00:53:50.730
本地的kubernetes环境

00:53:48.150 --> 00:53:53.370
进程或本地正在运行的容器

00:53:50.730 --> 00:53:55.020
那是什么好介绍了两个

00:53:53.370 --> 00:53:57.450
方式代理您实际所在的位置

00:53:55.020 --> 00:53:59.910
提供运行实例

00:53:57.450 --> 00:54:01.950
咖啡店等服务

00:53:59.910 --> 00:54:03.630
然后很好地提供该服务

00:54:01.950 --> 00:54:06.240
在你本地运行的东西

00:54:03.630 --> 00:54:09.000
笔记本电脑仅用于测试目的，您可以

00:54:06.240 --> 00:54:10.620
连接到集群并使用

00:54:09.000 --> 00:54:12.420
相同的联网功能

00:54:10.620 --> 00:54:15.660
我显示的dns分辨率示例

00:54:12.420 --> 00:54:18.450
您之前以及是否使用过这样的工具

00:54:15.660 --> 00:54:21.630
向您建议此监视和部署工具

00:54:18.450 --> 00:54:23.910
甚至可以热重新加载代码

00:54:21.630 --> 00:54:26.850
在这里进行代码更改并进行更改

00:54:23.910 --> 00:54:30.570
反映在您的应用程序中

00:54:26.850 --> 00:54:33.030
例如，如果我们提供此订单

00:54:30.570 --> 00:54:35.400
再次举例，我们有咖啡订单

00:54:33.030 --> 00:54:37.950
现在好了，我们有时间或

00:54:35.400 --> 00:54:40.440
例子，所以花了太长时间，但是现在

00:54:37.950 --> 00:54:43.260
我们看到ok新应用没有订单

00:54:40.440 --> 00:54:46.260
系统，现在这里是

00:54:43.260 --> 00:54:49.560
这实际上是被取代，然后

00:54:46.260 --> 00:54:53.270
在当地，我们有杯咖啡

00:54:49.560 --> 00:54:55.590
购买集装箱，如果我们访问我们的

00:54:53.270 --> 00:54:58.050
应用在这里，我们实际上最终以

00:54:55.590 --> 00:55:02.010
本地运行的容器以及我们可以做什么

00:54:58.050 --> 00:55:06.570
然后要做的实际上是改变某些东西

00:55:02.010 --> 00:55:10.440
我们的应用程序说的很好

00:55:06.570 --> 00:55:13.380
而不是只在这里提供订单

00:55:10.440 --> 00:55:17.850
还提供一些假设的位置

00:55:13.380 --> 00:55:20.010
我刚才给你看过的，所以我们想要

00:55:17.850 --> 00:55:24.480
加强介绍和

00:55:20.010 --> 00:55:25.650
位置以及我们现在的位置

00:55:24.480 --> 00:55:28.170
这实际上是在做

00:55:25.650 --> 00:55:29.890
重建我们的复制，然后

00:55:28.170 --> 00:55:31.690
立即重新部署

00:55:29.890 --> 00:55:33.820
特别是如果您使用应用程序

00:55:31.690 --> 00:55:35.560
可以快速重新部署的服务器

00:55:33.820 --> 00:55:38.500
表示您的更改是自动的

00:55:35.560 --> 00:55:43.150
反映好吧，现在你看不到

00:55:38.500 --> 00:55:45.520
任何事情，因为我们必须创建一个

00:55:43.150 --> 00:55:47.560
先点菜，然后你现在看得很好

00:55:45.520 --> 00:55:52.330
也在订单资源中

00:55:47.560 --> 00:55:54.880
 Java中提供位置的情况

00:55:52.330 --> 00:55:57.610
再一次，我们可以改变并重新部署

00:55:54.880 --> 00:55:59.230
或介绍一些其他示例

00:55:57.610 --> 00:56:01.270
立刻你就会拥有你

00:55:59.230 --> 00:56:02.830
实际存在的可用更改

00:56:01.270 --> 00:56:05.080
仅在您的运行和泊坞窗中

00:56:02.830 --> 00:56:08.680
容器或本地，但很快

00:56:05.080 --> 00:56:10.390
您会很快看到它重新部署，如果

00:56:08.680 --> 00:56:11.800
您使用网真之类的工具

00:56:10.390 --> 00:56:13.660
您实际上可以将其连接到您的

00:56:11.800 --> 00:56:15.460
本地发展到本地

00:56:13.660 --> 00:56:18.370
 kubernetes集群开发

00:56:15.460 --> 00:56:21.010
目的并调试或开发您的

00:56:18.370 --> 00:56:22.720
应用程序连接到他们以及

00:56:21.010 --> 00:56:25.210
在当地放弃他们

00:56:22.720 --> 00:56:28.900
容器，如果您需要或使用这样的

00:56:25.210 --> 00:56:32.050
改善您的发展的工具

00:56:28.900 --> 00:56:35.770
生产力，这是另一种方式

00:56:32.050 --> 00:56:37.750
好介绍一些

00:56:35.770 --> 00:56:40.600
为您提高生产力

00:56:37.750 --> 00:56:44.590
 Jakarta EE应用程序内部

00:56:40.600 --> 00:56:46.450
 kubernetes环境，所以如果您采取

00:56:44.590 --> 00:56:49.000
进行容器编排或

00:56:46.450 --> 00:56:51.370
 kubernetes em一般是什么

00:56:49.000 --> 00:56:53.070
为我们提供了一些东西

00:56:51.370 --> 00:56:55.300
例如我们有一些服务发现

00:56:53.070 --> 00:56:57.430
只要我们在咖啡师那里看到

00:56:55.300 --> 00:57:00.310
应用我们有一些DNS解析

00:56:57.430 --> 00:57:02.380
开箱即用

00:57:00.310 --> 00:57:04.480
服务专门分发我们的

00:57:02.380 --> 00:57:07.260
加载并在

00:57:04.480 --> 00:57:10.420
我们可能会指定多个实例， 

00:57:07.260 --> 00:57:12.520
当然kubernetes也会设置所有

00:57:10.420 --> 00:57:14.770
复杂的网络和

00:57:12.520 --> 00:57:17.130
配置我们的应用程序，所以我们

00:57:14.770 --> 00:57:20.800
不必在我们的应用程序中这样做

00:57:17.130 --> 00:57:22.540
我们也有一些部署

00:57:20.800 --> 00:57:24.760
可扩展性选项，我们可以部署新的

00:57:22.540 --> 00:57:26.740
停机时间为零的版本，我们可以扩展

00:57:24.760 --> 00:57:29.530
上下有一个副本两个

00:57:26.740 --> 00:57:32.350
以非常简单的方式复制十个

00:57:29.530 --> 00:57:36.700
声明式方法什么服务

00:57:32.350 --> 00:57:39.550
主人提供的是他们进一步增加

00:57:36.700 --> 00:57:42.490
我们的一些横切关注点

00:57:39.550 --> 00:57:43.540
以透明的方式提供服务，这意味着

00:57:42.490 --> 00:57:46.390
不变

00:57:43.540 --> 00:57:49.200
诸如此类的应用

00:57:46.390 --> 00:57:51.220
弹性和流量管理

00:57:49.200 --> 00:57:53.640
可观察性认证

00:57:51.220 --> 00:57:56.680
授权等等。 

00:57:53.640 --> 00:57:58.330
我特别喜欢的是它

00:57:56.680 --> 00:58:00.970
与方法融为一体

00:57:58.330 --> 00:58:03.280
 Java Enterprise之所以没有

00:58:00.970 --> 00:58:04.990
把所有这些问题都纳入

00:58:03.280 --> 00:58:08.080
我们的应用程序或进入

00:58:04.990 --> 00:58:11.080
实施，所以我们实际运送的是

00:58:08.080 --> 00:58:13.570
仍然是一个精简的部署工件， 

00:58:11.080 --> 00:58:15.520
很好地建立和整合

00:58:13.570 --> 00:58:17.890
与码头工人容器

00:58:15.520 --> 00:58:21.670
感谢复制和写入文件系统

00:58:17.890 --> 00:58:24.100
层，这意味着我们的业务逻辑

00:58:21.670 --> 00:58:27.490
在应用程序中提供

00:58:24.100 --> 00:58:31.420
使用Java和Turk的Java代码

00:58:27.490 --> 00:58:32.710
 api以及其他一切都很好

00:58:31.420 --> 00:58:35.110
要么由

00:58:32.710 --> 00:58:37.390
应用程序的应用程序运行时

00:58:35.110 --> 00:58:39.940
容器在这里或属于

00:58:37.390 --> 00:58:42.340
在这种情况下，那么环境

00:58:39.940 --> 00:58:45.340
集群和stosidecar容器

00:58:42.340 --> 00:58:47.500
因此，我们实际上可以专注于

00:58:45.340 --> 00:58:50.830
作为开发人员我们应该关注什么

00:58:47.500 --> 00:58:53.320
那就是实现业务逻辑

00:58:50.830 --> 00:58:56.680
现在，如果您需要更多资源

00:58:53.320 --> 00:58:58.750
或一半你有这个例子

00:58:56.680 --> 00:59:02.170
在github上可用的所有代码

00:58:58.750 --> 00:59:05.530
这里实际上包括一些工作坊

00:59:02.170 --> 00:59:10.300
我们创造了可以去的地方

00:59:05.530 --> 00:59:13.000
您的isteió在kubernetes集群中

00:59:10.300 --> 00:59:15.010
云，所以您可以免费获得它

00:59:13.000 --> 00:59:17.320
并尝试使用kubernetes，如果您

00:59:15.010 --> 00:59:20.170
希望我们有很多资源

00:59:17.320 --> 00:59:22.180
在这里可以看到咖啡店

00:59:20.170 --> 00:59:24.460
和咖啡师服务创建您自己的

00:59:22.180 --> 00:59:26.890
咖啡，也很好看

00:59:24.460 --> 00:59:29.500
的可观察性功能是看如何

00:59:26.890 --> 00:59:32.680
与Java EE提花EE集成

00:59:29.500 --> 00:59:34.150
和微观概况，看看

00:59:32.680 --> 00:59:37.030
如果您愿意，我会为您提供

00:59:34.150 --> 00:59:39.070
所有这些链接以及操作方法

00:59:37.030 --> 00:59:41.650
这是WOD监视和部署方法

00:59:39.070 --> 00:59:44.710
使用docker和kubernetes 

00:59:41.650 --> 00:59:47.200
除了我希望的调试示例

00:59:44.710 --> 00:59:52.050
这对您来说是非常有帮助的会议

00:59:47.200 --> 00:59:52.050
非常感谢您的关注

00:59:52.520 --> 00:59:56.330
非常感谢塞巴斯蒂安的出色

00:59:54.200 --> 00:59:59.900
演示，感谢社区

00:59:56.330 --> 01:00:01.550
出来看着它真是太棒了

00:59:59.900 --> 01:00:03.830
就像塞巴斯蒂安所说，他将提供

01:00:01.550 --> 01:00:06.550
链接，我将其放入描述中

01:00:03.830 --> 01:00:09.260
下方供所有人访问， 

01:00:06.550 --> 01:00:11.090
目前我们没有问题，所以

01:00:09.260 --> 01:00:13.570
感谢您加入我们，我们将会看到

01:00:11.090 --> 01:00:18.280
您参加我们的下一次雅加达EE技术讲座

01:00:13.570 --> 01:00:18.280
大家好，谢谢

