WEBVTT
Kind: captions
Language: zh-Hans

00:00:03.590 --> 00:00:07.790
已经可以了，非常感谢

00:00:06.600 --> 00:00:10.830
每个人都在参加这次演讲

00:00:07.790 --> 00:00:12.780
显然有很多选择， 

00:00:10.830 --> 00:00:15.180
我真的特别非常

00:00:12.780 --> 00:00:19.320
惊喜地看到我很多

00:00:15.180 --> 00:00:21.449
熟悉的面孔和很多演讲者

00:00:19.320 --> 00:00:24.630
我认为这将是重要的

00:00:21.449 --> 00:00:26.400
希望能及时与我们所有人交谈

00:00:24.630 --> 00:00:29.070
一个，也许稍微超过D个

00:00:26.400 --> 00:00:30.990
老实说你知道我会

00:00:29.070 --> 00:00:35.970
要求您考虑交付

00:00:30.990 --> 00:00:37.110
这么说，让我说话

00:00:35.970 --> 00:00:37.740
关于...的动机

00:00:37.110 --> 00:00:40.110
这个演讲

00:00:37.740 --> 00:00:42.320
这项工作是有益的，并且

00:00:40.110 --> 00:00:46.700
坦率地说，我参与了破坏神话的活动

00:00:42.320 --> 00:00:49.830
个人有点厌倦了

00:00:46.700 --> 00:00:52.590
宣传这份工作，即某种程度上不

00:00:49.830 --> 00:00:55.320
在现实中在云上运行

00:00:52.590 --> 00:00:58.020
绝对是相反的java运行

00:00:55.320 --> 00:01:00.870
实际上，它在云上非常出色

00:00:58.020 --> 00:01:03.570
可能是支持的财富之一

00:01:00.870 --> 00:01:05.670
当今云技术是和

00:01:03.570 --> 00:01:08.100
我们有点不知所措

00:01:05.670 --> 00:01:10.050
不能把叙述说出来

00:01:08.100 --> 00:01:11.940
我们将在

00:01:10.050 --> 00:01:13.740
这一讲可能不对，但在

00:01:11.940 --> 00:01:16.290
至少我们必须从某个地方开始

00:01:13.740 --> 00:01:18.090
 Java EE社区开始改变

00:01:16.290 --> 00:01:19.350
改变叙述并成为

00:01:18.090 --> 00:01:21.720
有点平衡

00:01:19.350 --> 00:01:25.920
叙述好吧，这就是动机

00:01:21.720 --> 00:01:29.330
对于这次演讲，我将简要介绍每个

00:01:25.920 --> 00:01:32.159
我们当中的一个我有两个很棒

00:01:29.330 --> 00:01:33.840
大家在这里和我一起工作

00:01:32.159 --> 00:01:35.670
的大部分繁重工作

00:01:33.840 --> 00:01:38.490
我现在要告诉你，我

00:01:35.670 --> 00:01:41.250
真是感激这些家伙

00:01:38.490 --> 00:01:43.650
已经做了演讲，但是那是

00:01:41.250 --> 00:01:45.960
我让罗德里戈干燥并介绍

00:01:43.650 --> 00:01:48.120
大家好，大家好，我叫

00:01:45.960 --> 00:01:50.130
 Rodrigo Bartolotta我是高级经理

00:01:48.120 --> 00:01:53.790
我目前从事帽技术咨询

00:01:50.130 --> 00:01:55.409
充当能力领导

00:01:53.790 --> 00:01:58.820
云服务产品，显然

00:01:55.409 --> 00:02:01.830
参与Java多年

00:01:58.820 --> 00:02:04.200
是的，我是Ryan cupric，来自

00:02:01.830 --> 00:02:05.340
我在化学系工作

00:02:04.200 --> 00:02:07.939
配方软件

00:02:05.340 --> 00:02:09.679
我运行康涅狄格州的Java使用

00:02:07.939 --> 00:02:13.640
并合着了几本书

00:02:09.679 --> 00:02:15.650
我叫Reza Rahman，我是大四

00:02:13.640 --> 00:02:17.750
 CAPTA Consulting的经理架构师

00:02:15.650 --> 00:02:21.349
我参与了Java生态系统

00:02:17.750 --> 00:02:25.099
一会儿，是的，只是在这里

00:02:21.349 --> 00:02:27.470
分享分享一些我需要的东西， 

00:02:25.099 --> 00:02:30.290
这显然是必不可少的邪恶幻灯片

00:02:27.470 --> 00:02:32.480
一名天主教徒为罗德里戈（Rodrigo）支付

00:02:30.290 --> 00:02:34.040
和我的费用来这里

00:02:32.480 --> 00:02:36.980
基本上，我们为此感到自豪

00:02:34.040 --> 00:02:38.540
这真是一个伟大的公司

00:02:36.980 --> 00:02:40.670
一个国家，它是全国性的全方位服务

00:02:38.540 --> 00:02:43.640
 IT咨询公司赢得了很多

00:02:40.670 --> 00:02:45.920
一直奖励您知道的一些

00:02:43.640 --> 00:02:50.540
很棒的人为它工作

00:02:45.920 --> 00:02:51.680
罗德里戈在这里不像我自己好吗，所以这

00:02:50.540 --> 00:02:53.480
大概是我们的议程

00:02:51.680 --> 00:02:55.519
所以我们首先是

00:02:53.480 --> 00:02:58.940
在云上谈论Java EE 

00:02:55.519 --> 00:03:02.900
作为鸟瞰图，那么我们要

00:02:58.940 --> 00:03:05.120
深入探讨Java的每个变体

00:03:02.900 --> 00:03:07.040
 EE分别在时钟上运行

00:03:05.120 --> 00:03:08.480
如果您去过云，因为

00:03:07.040 --> 00:03:10.040
这些首字母缩略词都没有

00:03:08.480 --> 00:03:12.019
令您大吃一惊

00:03:10.040 --> 00:03:14.840
服务泊坞窗上的基础架构或

00:03:12.019 --> 00:03:18.139
集装箱即服务平台

00:03:14.840 --> 00:03:20.840
作为服务，也作为

00:03:18.139 --> 00:03:23.959
基本上在裸机上运行Java EE 

00:03:20.840 --> 00:03:26.269
最后基于JVM的最佳解决方案

00:03:23.959 --> 00:03:30.859
 Java EE的功能或功能

00:03:26.269 --> 00:03:33.049
服务还可以，您知道吗

00:03:30.859 --> 00:03:35.180
实际上，Java EE一直在运行

00:03:33.049 --> 00:03:36.769
永远的云，其实你知道我

00:03:35.180 --> 00:03:38.750
有许多客户

00:03:36.769 --> 00:03:41.930
在云上运行Java EE 

00:03:38.750 --> 00:03:43.970
事实上，这永远是可能的， 

00:03:41.930 --> 00:03:46.430
自Java以来​​人们一直在这样做

00:03:43.970 --> 00:03:48.200
 EE 6时间框架，这是现实

00:03:46.430 --> 00:03:50.389
至少持续了好五个

00:03:48.200 --> 00:03:52.060
年，我们真的很难过

00:03:50.389 --> 00:03:55.849
还没有叙述的权利

00:03:52.060 --> 00:03:58.370
特别是你知道发生了什么

00:03:55.849 --> 00:04:00.680
我在Java上看到的云部署

00:03:58.370 --> 00:04:04.340
到目前为止，EE实际上实际上有很多

00:04:00.680 --> 00:04:06.650
它是基于AWS的部署

00:04:04.340 --> 00:04:08.120
我认为这是现实

00:04:06.650 --> 00:04:10.700
绝大部分技术

00:04:08.120 --> 00:04:13.400
实际上有增量功能

00:04:10.700 --> 00:04:16.669
 Java EE 7中都内置了这些功能

00:04:13.400 --> 00:04:18.350
和Java 8可以使云受益

00:04:16.669 --> 00:04:19.709
希望会有一个

00:04:18.350 --> 00:04:22.289
更多

00:04:19.709 --> 00:04:23.759
将在Java的下一版本中发布

00:04:22.289 --> 00:04:27.590
专门研究问题

00:04:23.759 --> 00:04:30.300
您实际需要的是什么

00:04:27.590 --> 00:04:33.000
运行Java的云应用程序

00:04:30.300 --> 00:04:37.169
在各种变体上运行的应用程序

00:04:33.000 --> 00:04:39.389
云，因此它正在运行Java jaan 

00:04:37.169 --> 00:04:41.400
实际上是超级容易的

00:04:39.389 --> 00:04:43.590
运行任何技术都是超级好

00:04:41.400 --> 00:04:47.220
容易，所以Java EE绝对不是

00:04:43.590 --> 00:04:48.780
你们大多数人都例外

00:04:47.220 --> 00:04:50.910
知道国际原子能机构的主要供应商

00:04:48.780 --> 00:04:52.620
超级容易做到的就是大

00:04:50.910 --> 00:04:56.520
对于玩家来说，很明显的是

00:04:52.620 --> 00:04:58.830
您和AWS Java EE一起玩

00:04:56.520 --> 00:05:00.840
与码头工人非常好，好的，这是

00:04:58.830 --> 00:05:02.550
另一种时尚品，我

00:05:00.840 --> 00:05:04.590
我真的很想提出一个

00:05:02.550 --> 00:05:06.560
会议也看到了如何

00:05:04.590 --> 00:05:09.419
关系实际上是共生的

00:05:06.560 --> 00:05:11.940
在Java EE和Docker之间

00:05:09.419 --> 00:05:14.610
容器是服务提供商

00:05:11.940 --> 00:05:16.949
基于docker的Java Java EE 

00:05:14.610 --> 00:05:20.159
作品与之相得益彰

00:05:16.949 --> 00:05:22.830
 docker它与那些CAS配合得很好

00:05:20.159 --> 00:05:24.990
基于解决方案，实际上

00:05:22.830 --> 00:05:27.810
有很多不错的配对选项，例如

00:05:24.990 --> 00:05:30.720
好吧，我的意思是说Java EE确实拥有最多的优势

00:05:27.810 --> 00:05:33.990
成对选项的数量可能与

00:05:30.720 --> 00:05:37.050
裸机JVM的例外

00:05:33.990 --> 00:05:39.360
确实有许多供应商

00:05:37.050 --> 00:05:42.240
专注于这个，你知道一些名字

00:05:39.360 --> 00:05:44.550
 openshift Oracle云bluemix ruku和

00:05:42.240 --> 00:05:49.560
 jelastic，实际上我可能没有

00:05:44.550 --> 00:05:52.469
做完了，帮了忙，做了2/1 

00:05:49.560 --> 00:05:54.599
谢谢你提醒我的问题

00:05:52.469 --> 00:05:56.580
 IP应该是哪个AP 

00:05:54.599 --> 00:05:58.139
也是在这个列表中，如果我们

00:05:56.580 --> 00:06:01.680
最近认证的云平台

00:05:58.139 --> 00:06:03.930
反对Java EE 7，所以要弥补

00:06:01.680 --> 00:06:07.080
打算写一篇关于它的博客文章

00:06:03.930 --> 00:06:09.870
信不信由你，您知道Java EE 

00:06:07.080 --> 00:06:12.000
裸机也可以很好地工作

00:06:09.870 --> 00:06:13.860
基于金属JVM的bastrop平台I 

00:06:12.000 --> 00:06:15.659
认为这是一个非常有趣的变体

00:06:13.860 --> 00:06:17.789
我很高兴那部分是

00:06:15.659 --> 00:06:20.520
会被瑞安覆盖，我认为他

00:06:17.789 --> 00:06:22.020
会为此做一个很好的正义

00:06:20.520 --> 00:06:22.590
因为那是四个

00:06:22.020 --> 00:06:24.750
点数

00:06:22.590 --> 00:06:25.710
担心某些热度不确定

00:06:24.750 --> 00:06:27.659
点是可以的

00:06:25.710 --> 00:06:29.460
 Java，他不在那些

00:06:27.659 --> 00:06:31.680
绝对是真的环境

00:06:29.460 --> 00:06:33.180
事实并非如此，因为您会看到

00:06:31.680 --> 00:06:34.770
因为我们有

00:06:33.180 --> 00:06:37.229
一堆解决方案

00:06:34.770 --> 00:06:38.490
允许Java应用程序在Java C上运行

00:06:37.229 --> 00:06:40.979
这些名称中的一些是

00:06:38.490 --> 00:06:43.560
野生苍蝇群payara微昏迷Lizzie 

00:06:40.979 --> 00:06:47.210
和WebSphere Liberty，甚至那个

00:06:43.560 --> 00:06:49.830
实际上不是一个完整的列表，可以

00:06:47.210 --> 00:06:52.020
所以我不会花太多时间

00:06:49.830 --> 00:06:54.330
幻灯片让我解释一下这张幻灯片

00:06:52.020 --> 00:06:56.820
其实有一个应用程序

00:06:54.330 --> 00:06:58.080
有所谓的货物追踪器，所以

00:06:56.820 --> 00:06:59.940
该应用程序的目的是

00:06:58.080 --> 00:07:01.610
实际展示坚实的设计

00:06:59.940 --> 00:07:03.870
模式是设计中的两个主要驱动力

00:07:01.610 --> 00:07:06.060
 Java应用程序中的设计模式

00:07:03.870 --> 00:07:09.090
这是我非常方便的应用程序

00:07:06.060 --> 00:07:10.590
发现做各种工作eBay的演示

00:07:09.090 --> 00:07:12.930
因为这是一个不平凡的应用

00:07:10.590 --> 00:07:18.570
它使用了大约10,000行代码

00:07:12.930 --> 00:07:22.289
各种Java API都是JSF JPA u jb j 

00:07:18.570 --> 00:07:25.139
 ms j批处理之类的，好吧，我们将

00:07:22.289 --> 00:07:28.440
可能还要添加这些列表

00:07:25.139 --> 00:07:31.289
是工作的一部分，尤其是官员

00:07:28.440 --> 00:07:34.349
从那以后在java.net上的Java EE项目

00:07:31.289 --> 00:07:38.130
它掉了，它是github的一部分

00:07:34.349 --> 00:07:39.570
 Java EE存储库，但说实话

00:07:38.130 --> 00:07:42.210
不是很好的状态，所以我们已经

00:07:39.570 --> 00:07:45.449
完成是我们已经破解了该东西，我们

00:07:42.210 --> 00:07:50.039
现在有一个项目的承载者，我们

00:07:45.449 --> 00:07:52.680
叫j 3e j 3 dot github io ok and 

00:07:50.039 --> 00:07:54.360
您会发现以前使用过的网站

00:07:52.680 --> 00:07:56.159
在运行在那里的java.net上运行

00:07:54.360 --> 00:07:59.400
暂时希望我们解决这个问题

00:07:56.159 --> 00:08:01.740
问题，我们将其纳入EE 4j 

00:07:59.400 --> 00:08:07.560
项目而不是j 3e 

00:08:01.740 --> 00:08:12.630
项目还可以，因此可以同时使用Java EE 

00:08:07.560 --> 00:08:14.190
在什么是是仅仅是你的

00:08:12.630 --> 00:08:16.500
别人机器上的数据中心

00:08:14.190 --> 00:08:17.759
好吧，所以您得到的基本上是

00:08:16.500 --> 00:08:20.490
大体裸露

00:08:17.759 --> 00:08:23.430
您的裸机硬件级别

00:08:20.490 --> 00:08:25.860
代替您的机器配置

00:08:23.430 --> 00:08:27.990
通过您的部门订购

00:08:25.860 --> 00:08:29.550
有一些你的自杀迷你装

00:08:27.990 --> 00:08:31.380
那对你很好，别人

00:08:29.550 --> 00:08:35.459
做那个东西，你只要点击

00:08:31.380 --> 00:08:38.219
您在网页上知道的一些东西

00:08:35.459 --> 00:08:40.649
为您创造那台裸机

00:08:38.219 --> 00:08:42.550
可以，但是很可能使用一些

00:08:40.649 --> 00:08:44.110
虚拟化软件或酒店

00:08:42.550 --> 00:08:46.890
而不是有人亲自购买

00:08:44.110 --> 00:08:49.899
机器并将其粘贴在机架中

00:08:46.890 --> 00:08:52.180
到目前为止，这是通往

00:08:49.899 --> 00:08:55.149
大多数人都是现实的云

00:08:52.180 --> 00:08:59.170
使用云计算的人实际上正在使用

00:08:55.149 --> 00:09:02.170
 iOS平台，当然您也知道

00:08:59.170 --> 00:09:04.920
我想大家都知道

00:09:02.170 --> 00:09:07.959
 AWS最大的参与者是您吗？ 

00:09:04.920 --> 00:09:12.100
所以我说的Java非常好用

00:09:07.959 --> 00:09:13.450
为什么不就这样呢

00:09:12.100 --> 00:09:15.940
另一个服务器恰好是

00:09:13.450 --> 00:09:18.040
托管在别人的机器上

00:09:15.940 --> 00:09:20.140
当然可以设置一个Java环境

00:09:18.040 --> 00:09:22.990
并在上面部署您的应用程序

00:09:20.140 --> 00:09:25.510
除此之外，我们将不涉及

00:09:22.990 --> 00:09:27.279
除了这大部分之外，还有太多细节

00:09:25.510 --> 00:09:30.160
我作为供应商的实际份额

00:09:27.279 --> 00:09:33.459
 Java EE API的特定支持

00:09:30.160 --> 00:09:35.260
特别是他们提供Java的图像

00:09:33.459 --> 00:09:37.660
 EE应用服务器预建映像

00:09:35.260 --> 00:09:40.110
您可以更轻松地在

00:09:37.660 --> 00:09:42.760
有基础平台，所以您进入

00:09:40.110 --> 00:09:45.100
 Azure，您将其视为您的图像

00:09:42.760 --> 00:09:46.899
库，您将看到各种图像

00:09:45.100 --> 00:09:51.250
应用服务器的工作类似

00:09:46.899 --> 00:09:53.140
在AWS上有可用的AMI 

00:09:51.250 --> 00:09:55.180
是专门针对基于Java EE的

00:09:53.140 --> 00:09:56.829
应用服务器，所以实际上

00:09:55.180 --> 00:09:58.570
模糊了我们不会覆盖的线

00:09:56.829 --> 00:10:01.870
细节很棒，但这模糊了线条

00:09:58.570 --> 00:10:03.700
在iis和通过之间

00:10:01.870 --> 00:10:05.529
实际上，这条线越来越模糊了， 

00:10:03.700 --> 00:10:07.690
更正确的是从字面上看

00:10:05.529 --> 00:10:10.570
几次点击之间的区别

00:10:07.690 --> 00:10:13.690
如何将某物归类为IAS与

00:10:10.570 --> 00:10:15.130
实际上将某类归类为通过

00:10:13.690 --> 00:10:16.750
我将跳过优点和缺点

00:10:15.130 --> 00:10:19.630
为了时间的利益，因为我们有

00:10:16.750 --> 00:10:21.910
一吨的材料要经过，所以我

00:10:19.630 --> 00:10:23.110
我不会去谈我的利弊

00:10:21.910 --> 00:10:25.329
认为我们大部分是

00:10:23.110 --> 00:10:26.949
了解这些东西会使

00:10:25.329 --> 00:10:29.890
显然，您可以使用幻灯片

00:10:26.949 --> 00:10:30.370
你可以看看它，以便所有

00:10:29.890 --> 00:10:32.890
说过

00:10:30.370 --> 00:10:35.589
让我把它交给罗德里戈

00:10:32.890 --> 00:10:38.110
谁将展示我们的第一个演示

00:10:35.589 --> 00:10:41.310
在裸机上运行Java EE 

00:10:38.110 --> 00:10:41.310
 iOS平台

00:10:42.440 --> 00:10:47.509
好的，正如Reza所说，这是

00:10:45.199 --> 00:10:49.639
链接，以便我们涵盖的所有内容

00:10:47.509 --> 00:10:51.589
在github中可用并且它是实时的

00:10:49.639 --> 00:10:53.690
分享，这样每个人都可以看着你

00:10:51.589 --> 00:10:54.620
知道更多细节，所以第一个

00:10:53.690 --> 00:10:56.860
要经历的事情

00:10:54.620 --> 00:11:00.920
您知道基础架构即服务

00:10:56.860 --> 00:11:05.389
我们从AWS开始，并充分利用

00:11:00.920 --> 00:11:09.139
他们的ec2服务，所以这里的任何人

00:11:05.389 --> 00:11:09.920
熟悉AWS ec2，我觉得有些帮助

00:11:09.139 --> 00:11:11.899
谢谢

00:11:09.920 --> 00:11:15.319
所以这基本上是他们的虚拟

00:11:11.899 --> 00:11:16.779
机器选项已经说过了

00:11:15.319 --> 00:11:20.660
可以与许多其他云提供商一起使用

00:11:16.779 --> 00:11:21.920
对，因此在这种情况下，大多数来电

00:11:20.660 --> 00:11:24.500
提供者，他们有某种

00:11:21.920 --> 00:11:26.990
提到的市场

00:11:24.500 --> 00:11:28.910
对，这样您就可以识别一个

00:11:26.990 --> 00:11:31.160
您选择的应用服务器和

00:11:28.910 --> 00:11:32.480
你知道我会从一个非常你开始

00:11:31.160 --> 00:11:35.029
知道有趣，所以你可以知道

00:11:32.480 --> 00:11:38.810
寻找您可以拥有的另一选择

00:11:35.029 --> 00:11:41.389
预先配置的映像，然后开始

00:11:38.810 --> 00:11:43.430
您的设置已经到位，或者您可以创建

00:11:41.389 --> 00:11:45.800
你自己的权利，让我们假设你

00:11:43.430 --> 00:11:47.209
启动您的实例您的虚拟机

00:11:45.800 --> 00:11:49.750
您进行配置，然后

00:11:47.209 --> 00:11:52.420
创建自己的图像，稍后再使用

00:11:49.750 --> 00:11:54.949
重用，这可能非常有趣

00:11:52.420 --> 00:11:56.750
您可以将其视为人工制品

00:11:54.949 --> 00:11:57.949
在您移动时通过管道

00:11:56.750 --> 00:11:59.959
在开发的过程中

00:11:57.949 --> 00:12:01.880
生产你很可能有一个

00:11:59.959 --> 00:12:05.089
成为你的阿米的神器

00:12:01.880 --> 00:12:08.540
溢青少年和与几个你包

00:12:05.089 --> 00:12:11.870
知道你会去的碎片

00:12:08.540 --> 00:12:15.139
在您的软件生命周期过程中

00:12:11.870 --> 00:12:17.029
我正在用Ubuntu接你

00:12:15.139 --> 00:12:19.160
一无所知，我们在

00:12:17.029 --> 00:12:22.279
选择一个实例类型

00:12:19.160 --> 00:12:24.519
几乎有多少内存和CPU 

00:12:22.279 --> 00:12:28.250
要给这个虚拟机

00:12:24.519 --> 00:12:31.610
对，我们的下一步是网络，这些

00:12:28.250 --> 00:12:34.130
他们常用的步骤以及任何路线或

00:12:31.610 --> 00:12:37.670
机器的服务类型对您来说

00:12:34.130 --> 00:12:41.569
明确地定义一个网络

00:12:37.670 --> 00:12:43.850
我们想拥有公共IP的情况

00:12:41.569 --> 00:12:46.250
所以我们启用它，因为我们只是

00:12:43.850 --> 00:12:49.160
采用我们给的默认配置

00:12:46.250 --> 00:12:51.290
所以有一些存储空间，很高兴看到

00:12:49.160 --> 00:12:53.209
与其他云进行对比和比较

00:12:51.290 --> 00:12:56.149
提供者如何区分

00:12:53.209 --> 00:12:59.329
你的眼睛或他们的api使她的生活

00:12:56.149 --> 00:13:02.149
作为开发人员显然更容易命名

00:12:59.329 --> 00:13:03.649
它可能很难，但是

00:13:02.149 --> 00:13:05.449
这很重要，因为在这种情况下

00:13:03.649 --> 00:13:06.860
我们正在创建一条特定的路线，或者

00:13:05.449 --> 00:13:08.259
机器，但如果您有数百个

00:13:06.860 --> 00:13:11.209
成千上万的

00:13:08.259 --> 00:13:13.610
环境您需要的工作量

00:13:11.209 --> 00:13:16.160
识别并轻松尝试找出

00:13:13.610 --> 00:13:18.649
在这种情况下做什么是正确的

00:13:16.160 --> 00:13:21.800
我只是你知道给一些

00:13:18.649 --> 00:13:25.220
名字，所以我要叫这个我知道

00:13:21.800 --> 00:13:28.399
 Java是实例演示然后

00:13:25.220 --> 00:13:30.649
下一步是确定防火墙

00:13:28.399 --> 00:13:31.610
在AWS术语中称为

00:13:30.649 --> 00:13:34.339
安全组

00:13:31.610 --> 00:13:36.139
好的，因此您知道我们是

00:13:34.339 --> 00:13:38.839
部署一个

00:13:36.139 --> 00:13:40.249
将要运行8080端口里亚尔，以便

00:13:38.839 --> 00:13:42.949
在一个应用程序上运行的应用程序

00:13:40.249 --> 00:13:46.550
玻璃鱼，所以我们也想启用

00:13:42.949 --> 00:13:49.699
控制台管理员在端口48 48上很明显

00:13:46.550 --> 00:13:51.740
我们需要提供这些资源，并且

00:13:49.699 --> 00:13:54.439
因此，我已经有一个

00:13:51.740 --> 00:13:58.189
预配置的预设置安全组

00:13:54.439 --> 00:13:59.720
在这里，我们回顾一下我们在看你的东西

00:13:58.189 --> 00:14:00.350
知道没有警告说我要

00:13:59.720 --> 00:14:03.049
付钱

00:14:00.350 --> 00:14:05.449
显然一件有趣的事

00:14:03.049 --> 00:14:08.449
要注意的是他们所有的云提供商

00:14:05.449 --> 00:14:10.850
有免费的免费入门类型

00:14:08.449 --> 00:14:13.309
接近所有人，所以真的

00:14:10.850 --> 00:14:15.980
最好采取一个用户案例

00:14:13.309 --> 00:14:17.720
有和去探索不同

00:14:15.980 --> 00:14:20.420
然后确定什么才是最好的

00:14:17.720 --> 00:14:23.029
选项，从这里开始

00:14:20.420 --> 00:14:25.579
启动该实例，您必须有一个

00:14:23.029 --> 00:14:28.369
安全需要拥有您的Pam文件，以便

00:14:25.579 --> 00:14:30.559
您可以稍后在SSH上说启动和

00:14:28.369 --> 00:14:32.959
 AWS将在幕后做些事情

00:14:30.559 --> 00:14:34.699
显然为了时间的利益，我已经

00:14:32.959 --> 00:14:38.149
有一个预先配置的

00:14:34.699 --> 00:14:41.029
已经启动并运行，现在我

00:14:38.149 --> 00:14:43.399
你知道暴露那个IP地址吗

00:14:41.029 --> 00:14:46.970
可以进来说好在那里

00:14:43.399 --> 00:14:49.220
一切都在运行哦，不对，所以让我们

00:14:46.970 --> 00:14:52.579
看看端口48上是否有东西

00:14:49.220 --> 00:14:56.779
显然我的互联网连接是

00:14:52.579 --> 00:15:01.380
没有帮助我，永远不会发生

00:14:56.779 --> 00:15:04.620
让我们再试一次

00:15:01.380 --> 00:15:10.590
所以如果没有

00:15:04.620 --> 00:15:13.110
可以上网，但是基本上

00:15:10.590 --> 00:15:14.850
想法是，我们将看到如何

00:15:13.110 --> 00:15:16.740
会和下一个摇一摇

00:15:14.850 --> 00:15:24.930
我认为建议是严格输入

00:15:16.740 --> 00:15:28.080
现在在前面的HTTP中，让我们

00:15:24.930 --> 00:15:32.370
看谢谢

00:15:28.080 --> 00:15:34.140
我们去了，非常感谢你，所以你

00:15:32.370 --> 00:15:36.570
知道这就是你知道的管理控制台

00:15:34.140 --> 00:15:37.920
现在，如果我更改

00:15:36.570 --> 00:15:39.540
港口，显然你可以做任何事情

00:15:37.920 --> 00:15:41.460
您可以使用任何应用程序服务器

00:15:39.540 --> 00:15:44.640
没什么，你不知道

00:15:41.460 --> 00:15:47.840
特别是如果我使用8080端口

00:15:44.640 --> 00:15:49.980
我应该在这里有一个不同的消息

00:15:47.840 --> 00:15:51.750
指着我所有的话

00:15:49.980 --> 00:15:56.750
应用服务器已启动并正在运行，并且

00:15:51.750 --> 00:15:56.750
最终我的货物跟踪器应用程序

00:15:58.040 --> 00:16:05.310
好吧，但是因为它点亮了负载

00:16:03.270 --> 00:16:07.320
时间的利益，我认为

00:16:05.310 --> 00:16:09.900
您的消息在幕后

00:16:07.320 --> 00:16:11.390
没看到我必须设置Java 

00:16:09.900 --> 00:16:14.070
没看到我必须设置

00:16:11.390 --> 00:16:16.050
 GlassFish我自己，所以重点是

00:16:14.070 --> 00:16:19.650
我的申请没有任何变化

00:16:16.050 --> 00:16:21.150
只是你需要考虑的战争文件

00:16:19.650 --> 00:16:23.520
关于您需要的基础架构权利

00:16:21.150 --> 00:16:25.260
考虑网络配置

00:16:23.520 --> 00:16:26.880
防火墙，所以有一些需要

00:16:25.260 --> 00:16:29.280
你需要扮演你的一小部分

00:16:26.880 --> 00:16:33.290
知道这种情况下的管理员角色

00:16:29.280 --> 00:16:33.290
不管您选择的呼叫提供商

00:16:36.490 --> 00:16:41.740
好吧，所以下一个变种

00:16:39.649 --> 00:16:45.260
我们要谈论的本质上是

00:16:41.740 --> 00:16:48.110
将Java EE与docker或容器一起使用

00:16:45.260 --> 00:16:50.450
继续作为服务平台，那么

00:16:48.110 --> 00:16:51.620
如罗德里戈所说，发生了

00:16:50.450 --> 00:16:55.730
也提到

00:16:51.620 --> 00:17:00.200
亚马逊有一个很好的概念

00:16:55.730 --> 00:17:02.839
亚马逊图像与您的说法相似

00:17:00.200 --> 00:17:05.120
对图像有正确的概念

00:17:02.839 --> 00:17:07.670
现实是这些是专有图像

00:17:05.120 --> 00:17:09.140
特定于那些平台，因此，如果您

00:17:07.670 --> 00:17:11.030
想要创建一个图像

00:17:09.140 --> 00:17:13.400
图片并上传到他们的市场

00:17:11.030 --> 00:17:15.319
不知何故等等等等现实

00:17:13.400 --> 00:17:17.420
是所有不必要的

00:17:15.319 --> 00:17:20.449
因为码头工人正变得如此

00:17:17.420 --> 00:17:22.610
商品权利，所以不要依赖

00:17:20.449 --> 00:17:25.640
他们自己专有的ami系统

00:17:22.610 --> 00:17:27.770
眼睛是提供者，而一些

00:17:25.640 --> 00:17:30.050
最好的提供商所做的只是

00:17:27.770 --> 00:17:32.510
说嘿我们支持docker对吧

00:17:30.050 --> 00:17:34.790
无论您的形象是什么， 

00:17:32.510 --> 00:17:36.740
来自docker hub的镜像或创建自己的镜像

00:17:34.790 --> 00:17:39.950
将您自己的映像发布到docker hub 

00:17:36.740 --> 00:17:42.200
并使用它来启动服务器

00:17:39.950 --> 00:17:43.850
实例，实际上是多个服务器

00:17:42.200 --> 00:17:46.700
在某些情况下，大多数情况下

00:17:43.850 --> 00:17:48.850
容器即服务的解决方案

00:17:46.700 --> 00:17:51.860
解决方案不只是一个问题

00:17:48.850 --> 00:17:54.350
与

00:17:51.860 --> 00:17:56.179
泊坞窗图片，但它们实际上有

00:17:54.350 --> 00:17:57.679
编排内置于其中

00:17:56.179 --> 00:17:59.870
与所有的编排很好

00:17:57.679 --> 00:18:01.850
可以支持的框架

00:17:59.870 --> 00:18:04.730
 dogger主要实际上是kubernetes 

00:18:01.850 --> 00:18:05.960
是最主要的

00:18:04.730 --> 00:18:08.360
云提供商正在支持

00:18:05.960 --> 00:18:11.030
 kubernetes，因此您基本上可以

00:18:08.360 --> 00:18:12.440
上下旋转，你知道你的集群

00:18:11.030 --> 00:18:15.020
并在其中创建一个群集和非零

00:18:12.440 --> 00:18:18.620
只是相对而言的一个简单实例

00:18:15.020 --> 00:18:20.360
自动化的时尚，所以这是

00:18:18.620 --> 00:18:22.160
什么叫你知道这个新模型

00:18:20.360 --> 00:18:25.000
称为无服务容器， 

00:18:22.160 --> 00:18:28.220
实际上这是相当普遍的

00:18:25.000 --> 00:18:31.520
正如我在Java EE之前提到的那样

00:18:28.220 --> 00:18:34.190
实际上是非常合适的

00:18:31.520 --> 00:18:35.960
对于docker模型，它的工作原理极为出色

00:18:34.190 --> 00:18:38.540
嗯，有几个原因

00:18:35.960 --> 00:18:41.450
所以这不是你曾经的情况

00:18:38.540 --> 00:18:43.670
 Java EE和

00:18:41.450 --> 00:18:45.400
码头工人基本上已经过时了

00:18:43.670 --> 00:18:47.710
对，所以这是一个

00:18:45.400 --> 00:18:49.420
那里的批评

00:18:47.710 --> 00:18:50.890
您基本上会在互联网上阅读

00:18:49.420 --> 00:18:53.200
他们想告诉你的是

00:18:50.890 --> 00:18:55.630
码头工人图像是整体的，所以你

00:18:53.200 --> 00:18:58.030
希望docker映像尽可能小

00:18:55.630 --> 00:19:00.850
可能使那个整体式码头工人

00:18:58.030 --> 00:19:02.590
图像不会变得太大，而是

00:19:00.850 --> 00:19:04.060
部署不会太困难

00:19:02.590 --> 00:19:06.160
以及类似的猜猜是什么

00:19:04.060 --> 00:19:07.840
码头工人想通了

00:19:06.160 --> 00:19:10.360
图因为这个问题

00:19:07.840 --> 00:19:12.100
不是解决方案，没有问题

00:19:10.360 --> 00:19:14.080
特定于Java EE，但猜猜如果

00:19:12.100 --> 00:19:15.850
您有数据库服务器或网站

00:19:14.080 --> 00:19:18.400
具有相同问题的服务器

00:19:15.850 --> 00:19:20.860
他们会产生大图像，所以

00:19:18.400 --> 00:19:22.600
已经退出的docker解决方案

00:19:20.860 --> 00:19:24.790
现在已经一年半了

00:19:22.600 --> 00:19:26.980
叫码头工人分层好吗

00:19:24.790 --> 00:19:29.410
就是说你不部署你的

00:19:26.980 --> 00:19:31.600
每次您都使用整个docker映像

00:19:29.410 --> 00:19:34.810
部署实际上是我的改变

00:19:31.600 --> 00:19:37.540
我的形象正确，这意味着你

00:19:34.810 --> 00:19:39.580
基本上可以遵循自然模型

00:19:37.540 --> 00:19:41.620
 Java EE应用程序服务器所在的位置

00:19:39.580 --> 00:19:43.750
在关注点分离方面

00:19:41.620 --> 00:19:46.450
所以您的基础架构层就是您的应用

00:19:43.750 --> 00:19:48.280
服务器，而您的电线只是

00:19:46.450 --> 00:19:50.710
您所套用的Delta值是唯一的

00:19:48.280 --> 00:19:52.660
一个码头工人正在改变的事情

00:19:50.710 --> 00:19:54.340
部署到另一个权利，因此

00:19:52.660 --> 00:19:56.080
最初的docker部署是的，那是

00:19:54.340 --> 00:19:58.360
会很大，因为它将包含

00:19:56.080 --> 00:20:01.660
应用程序服务器和您的线路，但是您猜到了

00:19:58.360 --> 00:20:03.190
您的后续部署

00:20:01.660 --> 00:20:05.530
您的Java应用程序服务器将

00:20:03.190 --> 00:20:07.810
比其他任何东西都要小

00:20:05.530 --> 00:20:10.000
替代方案，因为您的增量

00:20:07.810 --> 00:20:11.200
一点很干净，就是

00:20:10.000 --> 00:20:13.810
战争文件好吗

00:20:11.200 --> 00:20:16.240
相比之下，假设您是

00:20:13.810 --> 00:20:17.290
做了一些努力来创建一个公平的罐子

00:20:16.240 --> 00:20:19.330
解决方案很好猜

00:20:17.290 --> 00:20:21.820
因为那个公平的Jar解决方案不会

00:20:19.330 --> 00:20:23.230
之间有明确的界限

00:20:21.820 --> 00:20:25.870
部署单元和基础架构

00:20:23.230 --> 00:20:28.030
您实际上实际上是在部署

00:20:25.870 --> 00:20:30.580
每次都有较重的docker映像

00:20:28.030 --> 00:20:32.850
您可以部署相同的东西

00:20:30.580 --> 00:20:35.140
发生你再次与码头工人认识

00:20:32.850 --> 00:20:37.600
集群和docker缓存所有

00:20:35.140 --> 00:20:40.330
因为这些功能起作用

00:20:37.600 --> 00:20:41.650
与Java EE的配合非常好

00:20:40.330 --> 00:20:44.050
应用还可以

00:20:41.650 --> 00:20:47.620
所以那边那是什么

00:20:44.050 --> 00:20:50.110
是什么意思，这意味着你知道

00:20:47.620 --> 00:20:51.610
现在我们应该好好评估一下

00:20:50.110 --> 00:20:53.860
你看码头，但是如果你看

00:20:51.610 --> 00:20:55.600
在Docker生态系统中表现如何

00:20:53.860 --> 00:20:57.450
支持Java，事实证明

00:20:55.600 --> 00:20:59.519
很好地支持Java EE 

00:20:57.450 --> 00:21:01.740
所以实际上是码头工人图像

00:20:59.519 --> 00:21:03.240
每个Java EE都可用

00:21:01.740 --> 00:21:05.399
那里的平台

00:21:03.240 --> 00:21:07.080
不是没有预建的

00:21:05.399 --> 00:21:09.360
您可以使用的docker映像

00:21:07.080 --> 00:21:12.269
使用并运行它，并保持

00:21:09.360 --> 00:21:15.510
一切顺利，因此我谨记

00:21:12.269 --> 00:21:17.220
再把它交给罗德里戈

00:21:15.510 --> 00:21:20.399
他会部署他会告诉你

00:21:17.220 --> 00:21:26.340
如何部署授权的Java EE 

00:21:20.399 --> 00:21:29.070
图像到云平台上

00:21:26.340 --> 00:21:30.779
这就是我们的结果

00:21:29.070 --> 00:21:35.250
期待以前的部署

00:21:30.779 --> 00:21:37.440
对，所以Reza说的第一步

00:21:35.250 --> 00:21:39.179
是我们需要一个码头工人文件，所以我们

00:21:37.440 --> 00:21:41.450
需要获取最初的战争文件

00:21:39.179 --> 00:21:45.059
我们知道我们的基础架构中

00:21:41.450 --> 00:21:47.220
部署到应用服务器，我们

00:21:45.059 --> 00:21:48.960
在这种情况下，我们有一个阻止程序文件

00:21:47.220 --> 00:21:51.419
你会在音乐上知道吗

00:21:48.960 --> 00:21:54.240
顺便说一句，今天他们

00:21:51.419 --> 00:21:56.340
第一个或第一个支持

00:21:54.240 --> 00:21:58.260
 Java EE 8所以您真的知道了

00:21:56.340 --> 00:22:00.450
真的很棒，您会看到三行

00:21:58.260 --> 00:22:03.720
代码我们没有薪水

00:22:00.450 --> 00:22:06.059
我们已经部署了文件，我们

00:22:03.720 --> 00:22:08.010
那么您知道启动我们的域是

00:22:06.059 --> 00:22:10.769
在github上有一个参考

00:22:08.010 --> 00:22:12.720
为此，之后您可以推动

00:22:10.769 --> 00:22:14.519
您的docker映像就可以创建一个

00:22:12.720 --> 00:22:16.980
 docker图像或更暗的billdocker标签

00:22:14.519 --> 00:22:19.200
 docker push right，您需要构建它

00:22:16.980 --> 00:22:21.539
它会构建您需要标记的图像

00:22:19.200 --> 00:22:23.279
因此您将docker映像与

00:22:21.539 --> 00:22:25.590
一些码头的一些目的地

00:22:23.279 --> 00:22:27.570
注册表，然后将其推送到一些

00:22:25.590 --> 00:22:31.019
在这种情况下较暗的寄存器

00:22:27.570 --> 00:22:34.860
可用的，我们将使用一次

00:22:31.019 --> 00:22:38.330
再次，AWS我们正在此方面探索ECS 

00:22:34.860 --> 00:22:42.269
这是他们的ec2容器服务

00:22:38.330 --> 00:22:44.700
与kubernetes的目的相同或

00:22:42.269 --> 00:22:47.909
您知道类似的一种

00:22:44.700 --> 00:22:50.340
提供一个容器注册表，这样

00:22:47.909 --> 00:22:52.320
开始有点引导您通过

00:22:50.340 --> 00:22:54.809
非常好的和简单的方法来学习和

00:22:52.320 --> 00:22:56.490
了解如何设置和创建

00:22:54.809 --> 00:22:58.049
您的Docker注册表，以便我可以进入

00:22:56.490 --> 00:23:02.730
在这里说你知道我要创造

00:22:58.049 --> 00:23:05.190
我的货物跟踪器仓库执行下一步

00:23:02.730 --> 00:23:07.110
它为您提供了所有的信息

00:23:05.190 --> 00:23:09.270
基本上是复制和粘贴以及什么

00:23:07.110 --> 00:23:11.280
如果这是你，你会做

00:23:09.270 --> 00:23:13.830
您再次在本地变暗的图像

00:23:11.280 --> 00:23:15.720
标记为您推送可用

00:23:13.830 --> 00:23:17.550
在da de Blasio系统中，或者您可以

00:23:15.720 --> 00:23:21.870
如果你想暴露在其他地方

00:23:17.550 --> 00:23:23.760
你知道是否要在这种情况下

00:23:21.870 --> 00:23:25.170
不会再为这些步骤运行这些步骤

00:23:23.760 --> 00:23:27.390
时间的利益，但我已经做到了

00:23:25.170 --> 00:23:29.900
显然，之前和我已经

00:23:27.390 --> 00:23:34.650
我在这里提出的故事我要剪掉我的

00:23:29.900 --> 00:23:38.150
重新发布或URL，我跟着

00:23:34.650 --> 00:23:40.140
下一步，所以一旦我有了我的

00:23:38.150 --> 00:23:42.750
存放我需要的其他东西

00:23:40.140 --> 00:23:44.610
用AWS术语考虑，但您知道

00:23:42.750 --> 00:23:47.580
总的来说，这种知识二

00:23:44.610 --> 00:23:49.350
可以转移到我们需要的其他任何地方

00:23:47.580 --> 00:23:50.010
任务定义，这是什么

00:23:49.350 --> 00:23:52.620
意思

00:23:50.010 --> 00:23:55.050
每次运行容器时，您都需要

00:23:52.620 --> 00:23:56.700
指定或可能要指定

00:23:55.050 --> 00:23:58.560
当你做一个暴露的部分

00:23:56.700 --> 00:24:00.480
较暗的一个会露出安装的零件

00:23:58.560 --> 00:24:02.160
给出环境变量的体积

00:24:00.480 --> 00:24:04.320
所以有一些配置

00:24:02.160 --> 00:24:07.590
您提供该docker run 

00:24:04.320 --> 00:24:09.960
您将其转化为任务

00:24:07.590 --> 00:24:12.750
定义正确，所以在这种情况下，我是

00:24:09.960 --> 00:24:15.930
因为我正在做第88部分，所以我会保持

00:24:12.750 --> 00:24:18.000
显然会将88部分保留在此处

00:24:15.930 --> 00:24:20.030
对于您想要的更复杂的部署

00:24:18.000 --> 00:24:22.470
让容器协调器

00:24:20.030 --> 00:24:23.940
识别并动态分配零件

00:24:22.470 --> 00:24:25.920
对你来说你不想束缚自己

00:24:23.940 --> 00:24:29.280
单个端口将带来主机

00:24:25.920 --> 00:24:32.130
残酷的机器限制让打开

00:24:29.280 --> 00:24:36.260
最后一个问题最多

00:24:32.130 --> 00:24:38.880
步骤是一项服务，所以一旦我们有了

00:24:36.260 --> 00:24:41.550
注册表中可用的Docker容器

00:24:38.880 --> 00:24:44.190
我们定义了运行所需的内容

00:24:41.550 --> 00:24:46.230
现在我们有一项服务会告诉您

00:24:44.190 --> 00:24:48.570
知道让这家伙跑我需要一个

00:24:46.230 --> 00:24:52.380
码头工人运行或一个容器在

00:24:48.570 --> 00:24:56.310
所有的时间或十或一百个

00:24:52.380 --> 00:24:58.740
我们的案例我们的货物追踪服务

00:24:56.310 --> 00:25:00.360
说我们只需要一个

00:24:58.740 --> 00:25:03.120
不会放任何负载平衡器或

00:25:00.360 --> 00:25:06.390
此时任何更复杂的事情， 

00:25:03.120 --> 00:25:08.460
然后我的搜索需要在

00:25:06.390 --> 00:25:11.280
群集权，而不是群集

00:25:08.460 --> 00:25:13.830
 WebLogic群集中的传统或

00:25:11.280 --> 00:25:16.710
应用服务器集群，但更多

00:25:13.830 --> 00:25:18.540
想起更高层次的单位

00:25:16.710 --> 00:25:19.840
您可以在其中拥有多种服务

00:25:18.540 --> 00:25:21.970
该集群和

00:25:19.840 --> 00:25:24.090
将协调和协调所有

00:25:21.970 --> 00:25:29.159
容器放置以及所有这些

00:25:24.090 --> 00:25:32.980
所以这是我的货运龙门

00:25:29.159 --> 00:25:35.559
集群，我们可以指定

00:25:32.980 --> 00:25:37.600
将被分配给

00:25:35.559 --> 00:25:39.130
该集群，因此一旦您创建自己的

00:25:37.600 --> 00:25:40.539
知道您的集装箱记录交易员

00:25:39.130 --> 00:25:43.620
需要给它一些计算能力

00:25:40.539 --> 00:25:46.179
这样就可以部署集装箱Imraan和

00:25:43.620 --> 00:25:48.370
没什么，所以我们在这里给你一些

00:25:46.179 --> 00:25:50.770
了解CPU内存组合AWS条款

00:25:48.370 --> 00:25:53.470
对于实例类型，我们说多少

00:25:50.770 --> 00:25:55.419
这些将再次分配，我会给

00:25:53.470 --> 00:25:58.450
他们是这里的一对钥匙

00:25:55.419 --> 00:26:00.490
大家接下来我们会审查任务

00:25:58.450 --> 00:26:03.370
步骤，然后我们就可以进入

00:26:00.490 --> 00:26:05.440
一旦我们运行就可以运行它的位置

00:26:03.370 --> 00:26:07.450
这很有趣，因为这

00:26:05.440 --> 00:26:10.210
你知道图形用户界面和

00:26:07.450 --> 00:26:13.809
就像AWS暴露的其他一切一样

00:26:10.210 --> 00:26:15.460
视情况而定，因此您可以

00:26:13.809 --> 00:26:17.169
自动化您应该做的一切

00:26:15.460 --> 00:26:18.220
如果您在云中部署了某些东西，请写

00:26:17.169 --> 00:26:21.010
那应该是百分之一百

00:26:18.220 --> 00:26:22.929
自动化，他们有一些

00:26:21.010 --> 00:26:25.659
称为云的形成和背后的

00:26:22.929 --> 00:26:27.370
场景云形成正在管理和

00:26:25.659 --> 00:26:30.909
创造那些的编排

00:26:27.370 --> 00:26:34.090
为您服务我这里有一个集群

00:26:30.909 --> 00:26:36.279
已经设置好了，我有我的货物追踪器

00:26:34.090 --> 00:26:39.669
你可以看到我给的服务

00:26:36.279 --> 00:26:43.960
一台残酷的机器与之相关

00:26:39.669 --> 00:26:45.760
因为我告诉它运行一项服务，所以我可以

00:26:43.960 --> 00:26:48.840
来这里说有一个

00:26:45.760 --> 00:26:51.880
它造成了任务的拦截器，并且

00:26:48.840 --> 00:26:55.510
从那个任务中我可以得到所有的

00:26:51.880 --> 00:26:57.640
细节，最后我去找你

00:26:55.510 --> 00:26:59.590
知道应用程序，所以让我们看看

00:26:57.640 --> 00:27:02.289
到时候我会看起来更多

00:26:59.590 --> 00:27:04.450
完美的作品，所以我已经打包

00:27:02.289 --> 00:27:06.760
我之前见过的PI R 

00:27:04.450 --> 00:27:08.350
如果我做货物追踪器，这是我的

00:27:06.760 --> 00:27:10.809
再次申请，你知道

00:27:08.350 --> 00:27:15.029
可用，易于使用

00:27:10.809 --> 00:27:15.029
以及我的控制台

00:27:16.509 --> 00:27:20.649
好吧，下一站是

00:27:18.219 --> 00:27:23.889
正如我所说，平台即服务

00:27:20.649 --> 00:27:29.289
图像对之间的区别

00:27:23.889 --> 00:27:31.449
和码头工人，真正的对是和对

00:27:29.289 --> 00:27:35.079
在这一点上，它是图像

00:27:31.449 --> 00:27:36.969
非常紧密地内置在UI中

00:27:35.079 --> 00:27:39.029
所以你不必做任何其他事情

00:27:36.969 --> 00:27:41.109
只是本地支持

00:27:39.029 --> 00:27:42.519
和许多应用服务器

00:27:41.109 --> 00:27:44.529
实际应用服务器

00:27:42.519 --> 00:27:46.269
它总是隐式的，所以无论何时

00:27:44.529 --> 00:27:48.009
使用那个解决方案就是

00:27:46.269 --> 00:27:49.359
暗示您正在使用

00:27:48.009 --> 00:27:51.519
特定的应用服务器以及

00:27:49.359 --> 00:27:52.749
减少一些样板

00:27:51.519 --> 00:27:55.119
您需要执行的一些其他步骤

00:27:52.749 --> 00:27:57.789
如果您不使用通行证则需要

00:27:55.119 --> 00:27:59.289
解决方案，所以这里基本上会发生什么

00:27:57.789 --> 00:28:01.089
是您的部署部门真的

00:27:59.289 --> 00:28:02.769
成为只是点，然后单击设置您的

00:28:01.089 --> 00:28:04.419
服务器，您只需部署您的war文件

00:28:02.769 --> 00:28:06.669
那就是你那基本上就是你

00:28:04.419 --> 00:28:08.079
部署单元通常

00:28:06.669 --> 00:28:09.809
将带有某种控制台

00:28:08.079 --> 00:28:12.879
您可以管理您的访问权限

00:28:09.809 --> 00:28:15.729
申请，当然您也可以

00:28:12.879 --> 00:28:16.409
加入很多Java e-pass解决方案

00:28:15.729 --> 00:28:19.839
有空

00:28:16.409 --> 00:28:23.589
 openshift Oracle云Bluemix Jelastic 

00:28:19.839 --> 00:28:25.179
小憩也再次我要跳过

00:28:23.589 --> 00:28:27.940
优点和缺点我认为这有点

00:28:25.179 --> 00:28:30.519
除非也许不是重点

00:28:27.940 --> 00:28:33.249
这样我们就可以进行演示了

00:28:30.519 --> 00:28:39.219
您可以进一步挖掘更多

00:28:33.249 --> 00:28:41.829
这里的细节还好，所以转移了

00:28:39.219 --> 00:28:45.219
现在齿轮，我们将与jelastic一起

00:28:41.829 --> 00:28:47.440
这里的任何人都熟悉jelastic great 

00:28:45.219 --> 00:28:49.959
我想几手

00:28:47.440 --> 00:28:52.869
 jelastic，你知道它很近但是我想

00:28:49.959 --> 00:28:56.049
太好了，是这样

00:28:52.869 --> 00:28:58.059
容易设置我从未听说过的东西

00:28:56.049 --> 00:29:00.279
老实说，我从未听说过

00:28:58.059 --> 00:29:02.079
我以前从未使用过它

00:29:00.279 --> 00:29:03.669
认为这就是我想要的

00:29:02.079 --> 00:29:05.319
法律规定这就是我要抛出的内容

00:29:03.669 --> 00:29:07.959
一种平台，我可以

00:29:05.319 --> 00:29:09.789
外观，轻松入门，因此

00:29:07.959 --> 00:29:11.319
他们有你可以导入的概念

00:29:09.789 --> 00:29:12.789
您可以导出的环境

00:29:11.319 --> 00:29:14.499
他们也有一个环境

00:29:12.789 --> 00:29:18.309
您可以知道的市场

00:29:14.499 --> 00:29:19.929
利用以下环境中的预配置环境

00:29:18.309 --> 00:29:22.449
这种情况下，我们要去一个新的

00:29:19.929 --> 00:29:25.149
环境，就像payara 

00:29:22.449 --> 00:29:25.960
 jelastic也支持je8 

00:29:25.149 --> 00:29:28.539
以便

00:29:25.960 --> 00:29:31.629
你知道我想表现的惊人

00:29:28.539 --> 00:29:34.029
这显然是他们的支持

00:29:31.629 --> 00:29:36.039
 Java和PHP（如果有人） 

00:29:34.029 --> 00:29:38.769
有趣的PHP，他们有docker和

00:29:36.039 --> 00:29:41.169
其他的东西，但看看这个UI吧

00:29:38.769 --> 00:29:45.039
我们在这里看到的是我们可以

00:29:41.169 --> 00:29:46.869
定义，我们可以使用一个很好的选择

00:29:45.039 --> 00:29:48.820
 Java上的应用程序服务器数量

00:29:46.869 --> 00:29:51.850
你知道他们有GlassFish的生态系统

00:29:48.820 --> 00:29:54.190
他们有JBoss payara，还有很多

00:29:51.850 --> 00:29:55.360
其他人对，所以这真的很好

00:29:54.190 --> 00:29:58.029
不是你在每个地方都能找到的东西

00:29:55.360 --> 00:30:00.610
单一呼叫提供商，但说

00:29:58.029 --> 00:30:03.269
在这里，我将不再是皮卡帕拉我

00:30:00.610 --> 00:30:05.769
想要获取最新版本的payara 

00:30:03.269 --> 00:30:08.259
如你所见我正在加载

00:30:05.769 --> 00:30:11.080
获得JDK 8的最新版本

00:30:08.259 --> 00:30:13.149
 payara，如果它把你带到这里

00:30:11.080 --> 00:30:17.049
中间的盒子你能看到那好吗

00:30:13.149 --> 00:30:18.759
我让我给他更多权利，如果你

00:30:17.049 --> 00:30:20.230
看看这中间的盒子

00:30:18.759 --> 00:30:22.119
开箱即用

00:30:20.230 --> 00:30:24.879
可扩展性，因此您可以拥有垂直

00:30:22.119 --> 00:30:27.070
可扩展性，基本上你知道

00:30:24.879 --> 00:30:30.279
你要多少内存和CPU 

00:30:27.070 --> 00:30:31.659
从一开始就分配，所以你

00:30:30.279 --> 00:30:34.269
知道在这种情况下我是说你知道

00:30:31.659 --> 00:30:37.149
我会给你3G的记忆

00:30:34.269 --> 00:30:38.740
很多CPU，您可以成长为

00:30:37.149 --> 00:30:41.169
一定水平，所以如果您的应用程序

00:30:38.740 --> 00:30:43.269
在负载下在负载下

00:30:41.169 --> 00:30:45.850
计算能力，你知道增加

00:30:43.269 --> 00:30:48.100
与您同时在下方

00:30:45.850 --> 00:30:50.710
它也提供水平

00:30:48.100 --> 00:30:53.110
可伸缩性

00:30:50.710 --> 00:30:55.419
节点，或者如果您需要多个节点， 

00:30:53.110 --> 00:30:57.940
只需您知道定义什么

00:30:55.419 --> 00:31:00.340
你想要正确的部分吗

00:30:57.940 --> 00:31:02.559
如果你知道的话，这也是我一次

00:31:00.340 --> 00:31:04.539
添加为我创建的多个节点

00:31:02.559 --> 00:31:06.519
那抽象的那一层

00:31:04.539 --> 00:31:08.350
负载平衡正在增加引擎X负载

00:31:06.519 --> 00:31:10.840
平衡器认为，这非常方便

00:31:08.350 --> 00:31:12.190
尤其对您有帮助

00:31:10.840 --> 00:31:14.080
那些已经有工作量的

00:31:12.190 --> 00:31:16.809
在本地运行有一个很高的

00:31:14.080 --> 00:31:18.580
机会我们用nginx或a 

00:31:16.809 --> 00:31:22.389
类似的代理负载均衡器

00:31:18.580 --> 00:31:24.009
解决方案，所以这是非常好的

00:31:22.389 --> 00:31:25.960
也有一些有趣的你知道

00:31:24.009 --> 00:31:27.999
他们也向您提供费用，我

00:31:25.960 --> 00:31:30.249
认为这很有价值，而且很有用

00:31:27.999 --> 00:31:32.080
盒子里有一些变量

00:31:30.249 --> 00:31:33.669
在出口部分提到

00:31:32.080 --> 00:31:36.820
环境，所以有一个

00:31:33.669 --> 00:31:37.180
预先配置的环境安装

00:31:36.820 --> 00:31:39.610
组

00:31:37.180 --> 00:31:42.340
在这里自动处理

00:31:39.610 --> 00:31:44.170
群集模式下的PI R或GlassFish 

00:31:42.340 --> 00:31:46.030
所以在其他两个选项之前

00:31:44.170 --> 00:31:48.610
在看着我们将不得不这样做

00:31:46.030 --> 00:31:50.800
有提升自己的权利，所以这是

00:31:48.610 --> 00:31:52.450
你知道这非常好

00:31:50.800 --> 00:31:54.550
您将拥有一个环境名称

00:31:52.450 --> 00:31:59.830
可以设置该环境名称

00:31:54.550 --> 00:32:01.300
 DNS和您可以做的另一件事

00:31:59.830 --> 00:32:03.160
你知道连接你的应用程序

00:32:01.300 --> 00:32:05.470
通过Maven在这种情况下，我有

00:32:03.160 --> 00:32:07.300
货物追踪或战争档案，我可以点击

00:32:05.470 --> 00:32:09.460
在上面我有一个环境

00:32:07.300 --> 00:32:10.870
预设，我可以定义它

00:32:09.460 --> 00:32:12.430
知道这是一个战士应用程序

00:32:10.870 --> 00:32:16.210
知道可以部署到

00:32:12.430 --> 00:32:18.190
特定的环境，再次是

00:32:16.210 --> 00:32:20.050
与您将要执行的操作相同

00:32:18.190 --> 00:32:22.780
你知道控制台的意思是

00:32:20.050 --> 00:32:25.480
部署的战争文件，因此也成为

00:32:22.780 --> 00:32:27.850
我想要的东西非常方便

00:32:25.480 --> 00:32:31.660
告诉你我提到我有一个

00:32:27.850 --> 00:32:33.910
在这里预先配置实例

00:32:31.660 --> 00:32:43.960
去那是我的那一个

00:32:33.910 --> 00:32:46.240
提到有关自动集群用户

00:32:43.960 --> 00:32:49.780
和密码，我只是想

00:32:46.240 --> 00:32:52.150
证明那是因为我再想一遍

00:32:49.780 --> 00:32:53.560
它确实会在我们前进的过程中增加价值吗

00:32:52.150 --> 00:32:55.020
通过这个，所以你正在看

00:32:53.560 --> 00:32:57.610
你知道payara 

00:32:55.020 --> 00:32:59.230
如您所见，这里有一个集群

00:32:57.610 --> 00:33:00.970
起，我有我不必做

00:32:59.230 --> 00:33:02.830
任何东西，然后就可以了

00:33:00.970 --> 00:33:05.770
通过以下方式部署应用程序

00:33:02.830 --> 00:33:07.480
您知道网络控制台，也可以

00:33:05.770 --> 00:33:09.850
来到这里，你知道选择战争

00:33:07.480 --> 00:33:12.010
并部署它

00:33:09.850 --> 00:33:15.070
提供了一些Messam指标

00:33:12.010 --> 00:33:16.930
哎呀，这是拓扑，但确实

00:33:15.070 --> 00:33:18.910
给出一些非常好的指标， 

00:33:16.930 --> 00:33:22.120
可以开始分析发生了什么

00:33:18.910 --> 00:33:24.070
在幕后它为您打开了一些东西

00:33:22.120 --> 00:33:25.780
有趣的是它使您可以访问

00:33:24.070 --> 00:33:29.610
到文件夹中的某些文件

00:33:25.780 --> 00:33:33.790
整体的结构视角

00:33:29.610 --> 00:33:35.890
与以前的方法一起使用

00:33:33.790 --> 00:33:38.080
知道我们黑暗时，我们不得不

00:33:35.890 --> 00:33:39.400
创建一个docker文件，我们必须有一个

00:33:38.080 --> 00:33:41.140
快速了解一点

00:33:39.400 --> 00:33:43.690
容器编排和其他内容

00:33:41.140 --> 00:33:45.520
在这种情况下，我们不必更改

00:33:43.690 --> 00:33:46.970
我们剩下的任何应用程序

00:33:45.520 --> 00:33:49.610
成为战争文件吧

00:33:46.970 --> 00:33:51.830
基础设施知识是

00:33:49.610 --> 00:33:53.240
非常少，所以我想你知道

00:33:51.830 --> 00:33:55.130
为那些想要的人增加很多价值

00:33:53.240 --> 00:33:59.600
探索并走那条路

00:33:55.130 --> 00:34:03.470
云好

00:33:59.600 --> 00:34:04.880
因此前进，尽管大多数云

00:34:03.470 --> 00:34:07.100
提供者在谈话时

00:34:04.880 --> 00:34:09.560
关于Java支持，他们有一些方法

00:34:07.100 --> 00:34:11.480
安装应用程序服务器的过程

00:34:09.560 --> 00:34:13.430
通过泊坞窗映像或

00:34:11.480 --> 00:34:16.070
他们建立的本机图像

00:34:13.430 --> 00:34:19.100
或像

00:34:16.070 --> 00:34:22.730
弹性空间但是很小

00:34:19.100 --> 00:34:24.620
那里的云提供商数量

00:34:22.730 --> 00:34:26.900
没有唯一的灵活性

00:34:24.620 --> 00:34:29.000
他们支持的是

00:34:26.900 --> 00:34:31.880
 Tomcat或码头，或者您在这里

00:34:29.000 --> 00:34:34.220
您的jdk环境，仅此而已

00:34:31.880 --> 00:34:36.410
正确，然后您必须建立

00:34:34.220 --> 00:34:36.950
其余应用程序基于

00:34:36.410 --> 00:34:38.660
在那

00:34:36.950 --> 00:34:41.120
对，所以没有很多

00:34:38.660 --> 00:34:43.190
这些真的很大，只有那些

00:34:41.120 --> 00:34:46.520
有这种限制

00:34:43.190 --> 00:34:49.310
环境是Heroku和GAE都很好

00:34:46.520 --> 00:34:50.810
显然在这种情况下

00:34:49.310 --> 00:34:52.160
我们讨论的其他解决方案是

00:34:50.810 --> 00:34:54.770
因为他们都不能上班

00:34:52.160 --> 00:34:56.090
需要某种安装或某种

00:34:54.770 --> 00:34:58.040
一种重新配置

00:34:56.090 --> 00:35:00.170
不会使用的应用程序服务器

00:34:58.040 --> 00:35:02.930
在这种情况下是可能的，但是

00:35:00.170 --> 00:35:04.970
你可以在这里做实际上是不依赖

00:35:02.930 --> 00:35:06.800
之所以这样，是因为现在您拥有了所有

00:35:04.970 --> 00:35:09.140
这些Java EE不错的Java（如果您是

00:35:06.800 --> 00:35:11.540
您可以创建一个罐子的解决方案

00:35:09.140 --> 00:35:14.780
而不是战争文件并部署

00:35:11.540 --> 00:35:16.190
在裸机JVM之上，所以我

00:35:14.780 --> 00:35:18.200
会在

00:35:16.190 --> 00:35:22.960
时间的兴趣在这里，这将会

00:35:18.200 --> 00:35:25.430
有点惊喜

00:35:22.960 --> 00:35:27.160
我这样做的唯一原因是瑞安

00:35:25.430 --> 00:35:29.360
他是因为我知道他可以应付

00:35:27.160 --> 00:35:32.990
先生

00:35:29.360 --> 00:35:34.790
所以我一定要说说我们的

00:35:32.990 --> 00:35:37.220
这是我们的最终资源

00:35:34.790 --> 00:35:42.290
好的，然后我要交给它

00:35:37.220 --> 00:35:43.730
剩下的大部分交给瑞安

00:35:42.290 --> 00:35:46.280
这次我们拥有的是

00:35:43.730 --> 00:35:48.470
还有大约10分钟的时间

00:35:46.280 --> 00:35:50.810
在这里做的是尝试给你一个真正的

00:35:48.470 --> 00:35:52.390
入门的好起点

00:35:50.810 --> 00:35:55.100
使用Java应用程序在云上

00:35:52.390 --> 00:35:55.820
他们是你最好的资源

00:35:55.100 --> 00:36:00.950
的

00:35:55.820 --> 00:36:02.720
那个Rodrigo的github仓库

00:36:00.950 --> 00:36:04.310
表明他实际上有特定的

00:36:02.720 --> 00:36:10.960
彼此之间的指令云

00:36:04.310 --> 00:36:13.010
平台和一些我们未展示的平台

00:36:10.960 --> 00:36:15.200
有关如何获取的分步说明

00:36:13.010 --> 00:36:17.690
从那些开始

00:36:15.200 --> 00:36:20.660
有些显然我们没有

00:36:17.690 --> 00:36:23.030
有时间掩盖正确，所以很好

00:36:20.660 --> 00:36:27.430
事情是我确实做了

00:36:23.030 --> 00:36:30.109
一些研究并试图找到要点

00:36:27.430 --> 00:36:31.850
那些特定云上的引用

00:36:30.109 --> 00:36:33.440
您如何设置Java的环境

00:36:31.850 --> 00:36:35.960
在那些特定环境中的EE 

00:36:33.440 --> 00:36:38.660
类似于什么罗德里戈

00:36:35.960 --> 00:36:40.790
会在他的身上写下你知道的

00:36:38.660 --> 00:36:43.580
 github存储库，所以有些

00:36:40.790 --> 00:36:47.780
除了什么之外的其他资源

00:36:43.580 --> 00:36:49.940
与Rodriguez一起使用我们的github 

00:36:47.780 --> 00:36:51.560
储存我要说的最后一句话

00:36:49.940 --> 00:36:54.800
说如果我不说其他话

00:36:51.560 --> 00:36:57.109
因为时间是你知道

00:36:54.800 --> 00:36:59.720
基本上，我们的目的是让您

00:36:57.109 --> 00:37:02.810
开始运行Java应用程序

00:36:59.720 --> 00:37:04.700
尽快在云上

00:37:02.810 --> 00:37:07.340
给你，你可以使用所有的

00:37:04.700 --> 00:37:09.410
我们已经去过的资源

00:37:07.340 --> 00:37:11.330
创造了如此多的工时

00:37:09.410 --> 00:37:12.680
你可以利用它，当然

00:37:11.330 --> 00:37:15.380
那些演讲者请

00:37:12.680 --> 00:37:17.930
考虑发表我们的演讲

00:37:15.380 --> 00:37:20.330
并这样说，你可以

00:37:17.930 --> 00:37:23.560
他并跑着讲这个话

00:37:20.330 --> 00:37:26.090
我将把它交给

00:37:23.560 --> 00:37:28.250
瑞安在本讲余下的时间里可能

00:37:26.090 --> 00:37:32.990
我会告诉你这就是他所拥有的

00:37:28.250 --> 00:37:36.260
可能值得自己演讲

00:37:32.990 --> 00:37:39.380
对，所以真的不做品牌瑞安

00:37:36.260 --> 00:37:40.550
就像这里，谢谢，所以现在我们

00:37:39.380 --> 00:37:43.160
我想我已经清除了

00:37:40.550 --> 00:37:45.680
其实和七个人说话

00:37:43.160 --> 00:37:47.060
这是如此简单，我可以

00:37:45.680 --> 00:37:48.680
使它更长，因为它是如此

00:37:47.060 --> 00:37:50.000
快速实际部署应用程序

00:37:48.680 --> 00:37:52.520
这实际上比我想象的要容易

00:37:50.000 --> 00:37:54.830
这将是在此之前

00:37:52.520 --> 00:37:56.750
我实际上没有使用过的演示文稿

00:37:54.830 --> 00:37:58.550
 Heroku以前以为是

00:37:56.750 --> 00:38:00.680
曾经在会议上

00:37:58.550 --> 00:38:02.270
主要是Ruby开发人员

00:38:00.680 --> 00:38:04.430
使用它，所以我认为这是一个红宝石

00:38:02.270 --> 00:38:06.240
平台，但事实并非如此

00:38:04.430 --> 00:38:08.580
平台真的很好

00:38:06.240 --> 00:38:10.380
 Java 8并安装了一点

00:38:08.580 --> 00:38:11.850
与其他东西有些不同

00:38:10.380 --> 00:38:13.770
我们已经按顺序看过了

00:38:11.850 --> 00:38:16.530
将代码实际推到那里

00:38:13.770 --> 00:38:18.480
使用git，所以您实际上将推送使用get 

00:38:16.530 --> 00:38:20.520
将代码推送到它，否则您可以拥有

00:38:18.480 --> 00:38:22.290
它绑定到您的git存储库中，以便

00:38:20.520 --> 00:38:25.860
每次您推送代码时都会从中提取

00:38:22.290 --> 00:38:28.410
您进行同步并为您下拉

00:38:25.860 --> 00:38:31.740
它确实支持附加组件，并且有一个

00:38:28.410 --> 00:38:34.200
您知道的附加组件数量

00:38:31.740 --> 00:38:35.190
像预先配置的数据库附加组件一样

00:38:34.200 --> 00:38:37.080
您可以快速启动并运行

00:38:35.190 --> 00:38:39.630
它有RabbitMQ，我将不会使用

00:38:37.080 --> 00:38:42.030
对于此演示文稿，它确实支持

00:38:39.630 --> 00:38:44.580
过程扩展一切运行

00:38:42.030 --> 00:38:46.260
隔离，它有一个很好的日志记录

00:38:44.580 --> 00:38:47.580
基础设施，以便在命令上

00:38:46.260 --> 00:38:49.680
行在您的计算机上，您可以

00:38:47.580 --> 00:38:52.680
重新登录，因此非常开发

00:38:49.680 --> 00:38:56.760
我认为以中心为中心

00:38:52.680 --> 00:38:58.590
免费试用，然后

00:38:56.760 --> 00:39:00.540
爱好水平是一步

00:38:58.590 --> 00:39:02.760
基本上不睡觉，但是不睡觉

00:39:00.540 --> 00:39:05.160
三十分钟后让它睡觉

00:39:02.760 --> 00:39:07.410
从大约512 Meg的RAM开始

00:39:05.160 --> 00:39:09.540
分配给您的Java的应用程序

00:39:07.410 --> 00:39:11.340
进程被分配，因此取决于

00:39:09.540 --> 00:39:12.810
您正在部署的应用程序

00:39:11.340 --> 00:39:14.850
您可能需要实际移至

00:39:12.810 --> 00:39:19.650
如果是较大的Java EE，则为付费层

00:39:14.850 --> 00:39:21.210
应用或其部分

00:39:19.650 --> 00:39:24.869
本演示的前一部分

00:39:21.210 --> 00:39:26.369
将payara集中在此的完整服务器上

00:39:24.869 --> 00:39:28.160
我实际上是演讲的一部分

00:39:26.369 --> 00:39:31.320
会看PI或微型，因为

00:39:28.160 --> 00:39:33.720
我们基本上只能部署一个

00:39:31.320 --> 00:39:36.390
 jar文件到服务器，我们实际上可以

00:39:33.720 --> 00:39:38.240
复制完整的服务器，尽管我认为

00:39:36.390 --> 00:39:40.890
有一些解决方法

00:39:38.240 --> 00:39:42.600
您可以在其中检查GlassFish 

00:39:40.890 --> 00:39:45.030
您的存储库并将其下拉

00:39:42.600 --> 00:39:48.450
这样，但我不建议

00:39:45.030 --> 00:39:50.100
与pyrrha是它实际上是pyro 

00:39:48.450 --> 00:39:51.540
否则你可能已经做到了

00:39:50.100 --> 00:39:53.130
有一个我正在工作的单独演示

00:39:51.540 --> 00:39:55.560
让我们温暖微，所以你可以做到

00:39:53.130 --> 00:39:56.790
这两个Pyro都不错

00:39:55.560 --> 00:39:58.890
比起起床容易

00:39:56.790 --> 00:40:00.600
在几分钟内运行

00:39:58.890 --> 00:40:02.910
如果您不熟悉，则实施

00:40:00.600 --> 00:40:05.520
 Eclipse实现了Eclipse micro 

00:40:02.910 --> 00:40:08.730
配置文件约70兆的大小和

00:40:05.520 --> 00:40:11.010
您已经获得了我所提供的所有服务

00:40:08.730 --> 00:40:12.660
默认情况下， 

00:40:11.010 --> 00:40:14.850
文档现在有点少了

00:40:12.660 --> 00:40:16.170
我说EJ要轻，EJ要

00:40:14.850 --> 00:40:18.540
灯亮表示您未收到任何消息

00:40:16.170 --> 00:40:20.430
驱动bean的确支持

00:40:18.540 --> 00:40:22.800
消息驱动bean z'如此希望

00:40:20.430 --> 00:40:26.730
他们将更新他们的文档

00:40:22.800 --> 00:40:28.410
很快，因为这是如此简单，所以我不得不

00:40:26.730 --> 00:40:33.870
让它变得更难一点，所以我决定

00:40:28.410 --> 00:40:37.020
用pyro pyro micro拉入AWS 

00:40:33.870 --> 00:40:39.590
您默认情况下不会打开mq，因此您

00:40:37.020 --> 00:40:43.890
没有JMS提供者fukusa 

00:40:39.590 --> 00:40:46.200
提供RabbitMQ作为附加组件

00:40:43.890 --> 00:40:48.210
没有AR AR文件资源适配器

00:40:46.200 --> 00:40:50.850
可插入GlassFish或

00:40:48.210 --> 00:40:52.320
 dénia任何其他应用程序容器

00:40:50.850 --> 00:40:54.930
为了使用消息驱动的bean z'I 

00:40:52.320 --> 00:40:58.710
需要找到另一个解决方案

00:40:54.930 --> 00:41:02.190
我曾经做过，我曾经使用过payara 

00:40:58.710 --> 00:41:04.530
用于亚马逊的概念验证RER适配器

00:41:02.190 --> 00:41:05.940
 sqs亚马逊的排队系统

00:41:04.530 --> 00:41:08.460
意味着我要做的就是创造

00:41:05.940 --> 00:41:11.640
在亚马逊上排队，然后添加

00:41:08.460 --> 00:41:13.320
根据我的代码，他们是货物捕手

00:41:11.640 --> 00:41:14.610
应用程序，因此我将展示

00:41:13.320 --> 00:41:18.000
我对货物进行的修改

00:41:14.610 --> 00:41:19.470
跟踪修改申请，因此

00:41:18.000 --> 00:41:21.360
到目前为止，所有演示都没有

00:41:19.470 --> 00:41:23.520
更改为实际应用

00:41:21.360 --> 00:41:26.160
我实际上不得不做出改变的时间

00:41:23.520 --> 00:41:28.170
使货物跟踪器脱离开放式MQ 

00:41:26.160 --> 00:41:29.760
因为他们在其中进行了硬编码设置

00:41:28.170 --> 00:41:31.740
除非那是我

00:41:29.760 --> 00:41:32.910
我对主要的主要更改

00:41:31.740 --> 00:41:39.210
然后第二个是调整

00:41:32.910 --> 00:41:43.380
用于使用payara sqs插件RER 

00:41:39.210 --> 00:41:45.840
文件，基本上就是这样

00:41:43.380 --> 00:41:50.250
开始这是最初的开放

00:41:45.840 --> 00:41:51.750
 MQ MDB代码，所以我基本上是这样显示的

00:41:50.250 --> 00:41:53.220
这是我们拥有的起始代码

00:41:51.750 --> 00:41:55.260
我们的信息驱动我们有我们的

00:41:53.220 --> 00:41:59.400
目的地查找一切开放

00:41:55.260 --> 00:42:03.060
 MQ，当我将其更改为使用时

00:41:59.400 --> 00:42:04.500
您所拥有的AR AR的代码

00:42:03.060 --> 00:42:05.910
更改代码我不得不

00:42:04.500 --> 00:42:09.290
稍微改变消息驱动的bean 

00:42:05.910 --> 00:42:15.510
一点使其与

00:42:09.290 --> 00:42:16.830
 payara sqs是sqs适配器，所以一些

00:42:15.510 --> 00:42:18.360
我必须将其更改为Amazon的更改

00:42:16.830 --> 00:42:20.460
问我们听众是否实施

00:42:18.360 --> 00:42:22.050
消息监听器实际上试图

00:42:20.460 --> 00:42:24.810
开火他们实际上试图抬头

00:42:22.050 --> 00:42:26.070
 em打开实际上不是的em多维数据集

00:42:24.810 --> 00:42:27.330
安装在哈拉的外面，这花了我一个

00:42:26.070 --> 00:42:28.920
而要弄清楚这就是为什么

00:42:27.330 --> 00:42:30.600
应用程序实际上并未运行

00:42:28.920 --> 00:42:32.070
因为我就像你知道我是

00:42:30.600 --> 00:42:35.190
检查我以为我已经离开了文件

00:42:32.070 --> 00:42:36.510
我已经删除了所有

00:42:35.190 --> 00:42:37.770
显然，访问键

00:42:36.510 --> 00:42:39.450
现在他们没有的演示文稿

00:42:37.770 --> 00:42:42.480
没有什么比这更简单的方法了

00:42:39.450 --> 00:42:44.550
他们在那里，然后你注释

00:42:42.480 --> 00:42:47.100
接收带有on sqs消息的消息至

00:42:44.550 --> 00:42:49.530
收到消息，然后在网络上

00:42:47.100 --> 00:42:52.620
该XML删除了所有的引用

00:42:49.530 --> 00:42:54.420
打开只是删除的mq 

00:42:52.620 --> 00:42:56.070
必须在那里添加任何东西，然后

00:42:54.420 --> 00:42:59.370
因此应用程序将部署在路由上

00:42:56.070 --> 00:43:01.140
卸下货物追踪器，以便您可以

00:42:59.370 --> 00:43:02.280
只需在打开时

00:43:01.140 --> 00:43:04.200
您不必打开的应用程序

00:43:02.280 --> 00:43:05.910
另一个网站，然后导航到

00:43:04.200 --> 00:43:07.680
货物跟踪或应用程序削减货物

00:43:05.910 --> 00:43:10.320
跟踪器，因此它只是使其在

00:43:07.680 --> 00:43:13.110
应用程序的根

00:43:10.320 --> 00:43:17.040
更改货物跟踪器具有一类

00:43:13.110 --> 00:43:18.600
基本上调度事件以打开MQ 

00:43:17.040 --> 00:43:21.030
所以这个课需要一点

00:43:18.600 --> 00:43:23.310
丢了一些更改，所以这是Java 

00:43:21.030 --> 00:43:25.770
 EE 7代码，用于与

00:43:23.310 --> 00:43:27.360
排队这是我被更改的代码

00:43:25.770 --> 00:43:29.670
抱歉，这是发送邮件的代码

00:43:27.360 --> 00:43:32.880
使用JMS上下文的消息

00:43:29.670 --> 00:43:35.670
发送所有标准，所以这是

00:43:32.880 --> 00:43:37.620
修改代码以使用sqs 

00:43:35.670 --> 00:43:39.780
看到我必须添加我的连接

00:43:37.620 --> 00:43:42.570
最重要的一项

00:43:39.780 --> 00:43:44.340
资源查看sqs连接

00:43:42.570 --> 00:43:46.710
工厂并在

00:43:44.340 --> 00:43:48.570
构造函数，然后是方法method 

00:43:46.710 --> 00:43:50.700
他们现在发送消息

00:43:48.570 --> 00:43:52.080
只支持发送短信，所以我

00:43:50.700 --> 00:43:53.490
必须在那里调整一些代码

00:43:52.080 --> 00:43:55.950
那实际上是在发送对象

00:43:53.490 --> 00:43:58.740
将它们转换为文本部署

00:43:55.950 --> 00:44:01.530
步骤很简单，您安装

00:43:58.740 --> 00:44:03.360
您计算机上本地的Heroku SDK，以及

00:44:01.530 --> 00:44:05.340
这给你一个命令行来执行

00:44:03.360 --> 00:44:07.590
命令，所以第一个第一个你

00:44:05.340 --> 00:44:09.730
执行实际上是Heroku loggin 

00:44:07.590 --> 00:44:11.710
然后设置一个会话就像

00:44:09.730 --> 00:44:13.300
您第一次使用AWS登录

00:44:11.710 --> 00:44:15.340
本地计算机，因此您不必登录

00:44:13.300 --> 00:44:17.380
对于所有后续命令

00:44:15.340 --> 00:44:20.230
创建您创建的应用程序

00:44:17.380 --> 00:44:23.650
如果您不提供名字，则由它组成

00:44:20.230 --> 00:44:26.619
随机的东西为您添加一个过程

00:44:23.650 --> 00:44:29.020
带有命令行的文件来调用您的

00:44:26.619 --> 00:44:31.990
应用程序，然后提交更改

00:44:29.020 --> 00:44:32.619
在本地获取，然后您进行git push 

00:44:31.990 --> 00:44:34.210
春子

00:44:32.619 --> 00:44:36.100
所以你只是说被推向晴子

00:44:34.210 --> 00:44:40.720
命令行已经设置了所有内容

00:44:36.100 --> 00:44:42.310
和您的代码实际上是什么

00:44:40.720 --> 00:44:43.840
在这一点上是从

00:44:42.310 --> 00:44:45.970
您的代码却需要您

00:44:43.840 --> 00:44:47.320
推到它，它甚至没有建立

00:44:45.970 --> 00:44:49.270
在那边，所以它实际上建立了

00:44:47.320 --> 00:44:50.830
代码不是您没有在部署构建

00:44:49.270 --> 00:44:52.630
您正在部署源代码的代码

00:44:50.830 --> 00:44:54.730
文件，然后将其构建并运行

00:44:52.630 --> 00:44:56.800
对，所以很干净，您不必

00:44:54.730 --> 00:44:58.300
担心您知道的东西被缓存了

00:44:56.800 --> 00:45:00.700
在本地计算机上输出任何东西

00:44:58.300 --> 00:45:02.950
在那之后，你就可以

00:45:00.700 --> 00:45:05.680
可以扩大规模，所以我可以启动一个发电机

00:45:02.950 --> 00:45:08.560
去走，然后你去打开谁

00:45:05.680 --> 00:45:10.990
打开应用程序，然后最后

00:45:08.560 --> 00:45:14.440
如果您想查看日志，请登录

00:45:10.990 --> 00:45:15.880
斜线尾巴，现在我提到了过程

00:45:14.440 --> 00:45:17.560
归档proc文件是魔术

00:45:15.880 --> 00:45:21.250
使我们所有人都这样工作，但在

00:45:17.560 --> 00:45:22.720
开始，我有了网络冒号

00:45:21.250 --> 00:45:23.650
告诉它这是一个Web应用程序

00:45:22.720 --> 00:45:26.470
实际上是要确保我

00:45:23.650 --> 00:45:28.750
绑定到端口，所以如果我不绑定我的应用程序

00:45:26.470 --> 00:45:31.030
启动并没有绑定到网络

00:45:28.750 --> 00:45:32.380
预期的法院然后会说

00:45:31.030 --> 00:45:34.630
启动失败，它将终止

00:45:32.380 --> 00:45:37.000
所以这是命令行

00:45:34.630 --> 00:45:40.119
启动Mike pyro micro我做Java 

00:45:37.000 --> 00:45:41.920
仪表盘IR微型就是发火的

00:45:40.119 --> 00:45:45.520
这就是整个GlassFish应用程序

00:45:41.920 --> 00:45:47.170
我在一个jar文件中处理服务器--端口和

00:45:45.520 --> 00:45:50.650
美元符号端口就是环境

00:45:47.170 --> 00:45:52.720
变量那个那个那个的端口

00:45:50.650 --> 00:45:54.100
遥想让它开始不是

00:45:52.720 --> 00:45:55.510
将要成为80端口，而我将成为

00:45:54.100 --> 00:45:57.160
端口8080将会是一些端口

00:45:55.510 --> 00:45:58.540
他们组成了伟大的他们将成为

00:45:57.160 --> 00:46:00.970
希望确保您的鲍登是

00:45:58.540 --> 00:46:04.060
在我部署的内容上提供内容

00:46:00.970 --> 00:46:05.470
 AR AR文件，然后部署轨道

00:46:04.060 --> 00:46:07.990
战争，正如您所看到的， 

00:46:05.470 --> 00:46:09.910
目标斜线货运跟踪器点战争如此

00:46:07.990 --> 00:46:12.190
我正在提取未构建的代码

00:46:09.910 --> 00:46:15.210
我推动了他们建立了战争的代码

00:46:12.190 --> 00:46:18.190
文件在输出中，现在我运行它

00:46:15.210 --> 00:46:18.580
这基本上就是我们要演示的演示

00:46:18.190 --> 00:46:21.610
的

00:46:18.580 --> 00:46:23.650
我是，但是那是你知道你是否可以拥有

00:46:21.610 --> 00:46:25.120
您的应用程序已推送并运行

00:46:23.650 --> 00:46:26.650
如果你去那里根本没有任何时间

00:46:25.120 --> 00:46:28.570
通过他们的行政会议，您

00:46:26.650 --> 00:46:32.530
可以设置SSL证书

00:46:28.570 --> 00:46:33.850
轻松在上面添加内容

00:46:32.530 --> 00:46:36.730
真的很容易，我不得不做得更多

00:46:33.850 --> 00:46:39.010
复杂会使我做的更长

00:46:36.730 --> 00:46:40.510
旋转应用程序抱歉

00:46:39.010 --> 00:46:46.960
是的，没有什么比危险的生活

00:46:40.510 --> 00:46:49.530
是的，我会说的一句话

00:46:46.960 --> 00:46:49.530
好的

00:47:02.580 --> 00:47:07.740
我从来没有这样做，所以第一件事

00:47:05.550 --> 00:47:09.420
我要做的就是做一个Heroku推送

00:47:07.740 --> 00:47:14.400
您将看到的是来自的输出

00:47:09.420 --> 00:47:16.920
服务器哦，一切都是最新的

00:47:14.400 --> 00:47:17.880
没有什么可以推的，所以

00:47:16.920 --> 00:47:19.380
实际上已经在运行

00:47:17.880 --> 00:47:22.460
嗯，如果我正在创建一个新的应用程序

00:47:19.380 --> 00:47:22.460
我会去谁

00:47:33.300 --> 00:47:37.500
哦，伟大的将要创建，所以这是

00:47:35.460 --> 00:47:41.220
在Haruko上创建另一个弹出窗口

00:47:37.500 --> 00:47:42.930
我不打算这样做，所以

00:47:41.220 --> 00:47:44.610
完成另一个应用程序，应用程序名称为

00:47:42.930 --> 00:47:49.140
实际上他们还是随机创造了

00:47:44.610 --> 00:47:50.940
名字仍然很丰富，我现在可以推送本地

00:47:49.140 --> 00:47:52.530
因为我的公司不在本地

00:47:50.940 --> 00:47:55.110
所以自约会以来我一直在推动一切

00:47:52.530 --> 00:47:58.400
我已经可以做到了

00:47:55.110 --> 00:47:58.400
跑步，所以你会很高兴看到跑步

00:48:28.240 --> 00:48:34.690
该应用程序应该可以正常运行

00:48:32.260 --> 00:48:36.490
好吧，让我们基本上在

00:48:34.690 --> 00:48:38.380
下次有人说夏威夷时的摘要

00:48:36.490 --> 00:48:39.670
无法在云上运行，请致电

00:48:38.380 --> 00:48:41.559
不要在上面走

00:48:39.670 --> 00:48:43.990
他在云上工作的Java非常丰富

00:48:41.559 --> 00:48:45.970
老实说，还有很多

00:48:43.990 --> 00:48:49.540
选项，以及几乎所有其他内容， 

00:48:45.970 --> 00:48:52.270
请在出门途中离开

00:48:49.540 --> 00:48:55.300
我们提供了一些很好的反馈，您知道很多

00:48:52.270 --> 00:48:57.490
很多小时，很多个人

00:48:55.300 --> 00:48:59.589
为了使这个演示发生而做出了牺牲

00:48:57.490 --> 00:49:01.990
请给予支持以帮助我们

00:48:59.589 --> 00:49:03.369
一些反馈，并在何时获取日志

00:49:01.990 --> 00:49:06.250
有些事情行不通，我们做

00:49:03.369 --> 00:49:09.130
 hiroko日志--尾巴或数字

00:49:06.250 --> 00:49:10.869
只是标准的故事而已

00:49:09.130 --> 00:49:12.609
我们可以看到所有日志，因此我能够

00:49:10.869 --> 00:49:13.869
撤回什么日志

00:49:12.609 --> 00:49:14.770
实际上在服务器上执行了

00:49:13.869 --> 00:49:16.599
您实际上可以看到该应用程序是

00:49:14.770 --> 00:49:22.390
现在部署，我们仍然

00:49:16.599 --> 00:49:25.950
部署实际实例化的东西

00:49:22.390 --> 00:49:25.950
我们去的Derby数据库

00:49:26.530 --> 00:49:29.530
现在

00:49:33.360 --> 00:49:37.470
在那里，我们尝试跟踪器

00:49:37.680 --> 00:49:41.920
所以它正在运行，也很烂

00:49:39.970 --> 00:49:44.430
如果我们开始执行动作

00:49:41.920 --> 00:49:46.900
排队的东西将由亚马逊处理

00:49:44.430 --> 00:49:49.540
好的，非常感谢，我很感激

00:49:46.900 --> 00:49:51.730
希望感谢您的耐心等待

00:49:49.540 --> 00:49:55.880
很有用，谢谢

00:49:51.730 --> 00:49:55.880
 [掌声] 

