WEBVTT
Kind: captions
Language: en

00:00:03.180 --> 00:00:06.980 align:start position:0%
 
well<00:00:04.170><c> good</c><00:00:04.620><c> morning</c><00:00:04.650><c> everyone</c><00:00:05.600><c> welcome</c><00:00:06.600><c> to</c>

00:00:06.980 --> 00:00:06.990 align:start position:0%
well good morning everyone welcome to
 

00:00:06.990 --> 00:00:14.299 align:start position:0%
well good morning everyone welcome to
this<00:00:07.109><c> talk</c><00:00:07.400><c> thank</c><00:00:08.400><c> you</c><00:00:08.490><c> for</c><00:00:08.670><c> coming</c><00:00:13.190><c> can</c><00:00:14.190><c> we</c>

00:00:14.299 --> 00:00:14.309 align:start position:0%
this talk thank you for coming can we
 

00:00:14.309 --> 00:00:30.660 align:start position:0%
this talk thank you for coming can we
switch<00:00:14.520><c> to</c><00:00:14.760><c> the</c><00:00:15.139><c> what</c><00:00:16.139><c> doesn't</c><00:00:16.410><c> work</c>

00:00:30.660 --> 00:00:30.670 align:start position:0%
 
 

00:00:30.670 --> 00:00:34.080 align:start position:0%
 
yeah<00:00:32.730><c> thank</c><00:00:33.730><c> you</c>

00:00:34.080 --> 00:00:34.090 align:start position:0%
yeah thank you
 

00:00:34.090 --> 00:00:36.420 align:start position:0%
yeah thank you
all<00:00:35.050><c> right</c><00:00:35.230><c> so</c><00:00:35.410><c> welcome</c><00:00:35.559><c> to</c><00:00:35.920><c> welcome</c><00:00:36.070><c> to</c><00:00:36.309><c> this</c>

00:00:36.420 --> 00:00:36.430 align:start position:0%
all right so welcome to welcome to this
 

00:00:36.430 --> 00:00:39.710 align:start position:0%
all right so welcome to welcome to this
code<00:00:36.670><c> talk</c><00:00:36.970><c> thank</c><00:00:37.450><c> you</c><00:00:37.540><c> for</c><00:00:37.720><c> coming</c>

00:00:39.710 --> 00:00:39.720 align:start position:0%
code talk thank you for coming
 

00:00:39.720 --> 00:00:42.479 align:start position:0%
code talk thank you for coming
this<00:00:40.720><c> is</c><00:00:40.870><c> a</c><00:00:40.900><c> talk</c><00:00:41.110><c> about</c><00:00:41.140><c> lambda</c><00:00:41.829><c> expression</c>

00:00:42.479 --> 00:00:42.489 align:start position:0%
this is a talk about lambda expression
 

00:00:42.489 --> 00:00:44.880 align:start position:0%
this is a talk about lambda expression
free<00:00:42.910><c> your</c><00:00:43.120><c> lambdas</c><00:00:43.510><c> it's</c><00:00:43.930><c> in</c><00:00:44.079><c> fact</c><00:00:44.260><c> a</c><00:00:44.379><c> replay</c>

00:00:44.880 --> 00:00:44.890 align:start position:0%
free your lambdas it's in fact a replay
 

00:00:44.890 --> 00:00:47.040 align:start position:0%
free your lambdas it's in fact a replay
I<00:00:45.010><c> already</c><00:00:45.910><c> did</c><00:00:46.360><c> last</c><00:00:46.629><c> year</c>

00:00:47.040 --> 00:00:47.050 align:start position:0%
I already did last year
 

00:00:47.050 --> 00:00:49.259 align:start position:0%
I already did last year
so<00:00:47.199><c> if</c><00:00:47.860><c> you</c><00:00:48.010><c> saw</c><00:00:48.309><c> this</c><00:00:48.460><c> talk</c><00:00:48.699><c> last</c><00:00:48.879><c> year</c><00:00:49.030><c> it's</c>

00:00:49.259 --> 00:00:49.269 align:start position:0%
so if you saw this talk last year it's
 

00:00:49.269 --> 00:00:53.310 align:start position:0%
so if you saw this talk last year it's
mostly<00:00:49.839><c> the</c><00:00:50.050><c> same</c><00:00:50.190><c> this</c><00:00:51.190><c> year</c><00:00:52.079><c> this</c><00:00:53.079><c> is</c><00:00:53.290><c> a</c>

00:00:53.310 --> 00:00:53.320 align:start position:0%
mostly the same this year this is a
 

00:00:53.320 --> 00:00:56.009 align:start position:0%
mostly the same this year this is a
tutorial<00:00:53.980><c> session</c><00:00:54.370><c> so</c><00:00:54.970><c> we</c><00:00:55.269><c> will</c><00:00:55.480><c> be</c><00:00:55.629><c> starting</c>

00:00:56.009 --> 00:00:56.019 align:start position:0%
tutorial session so we will be starting
 

00:00:56.019 --> 00:00:57.540 align:start position:0%
tutorial session so we will be starting
at<00:00:56.140><c> the</c><00:00:56.230><c> very</c><00:00:56.440><c> beginning</c><00:00:56.920><c> of</c><00:00:57.070><c> lambda</c>

00:00:57.540 --> 00:00:57.550 align:start position:0%
at the very beginning of lambda
 

00:00:57.550 --> 00:00:59.790 align:start position:0%
at the very beginning of lambda
expressions<00:00:58.059><c> I</c><00:00:58.300><c> would</c><00:00:58.989><c> not</c><00:00:59.140><c> assume</c><00:00:59.440><c> that</c><00:00:59.650><c> you</c>

00:00:59.790 --> 00:00:59.800 align:start position:0%
expressions I would not assume that you
 

00:00:59.800 --> 00:01:02.939 align:start position:0%
expressions I would not assume that you
have<00:00:59.949><c> any</c><00:01:00.760><c> knowledge</c><00:01:01.059><c> about</c><00:01:01.620><c> writing</c><00:01:02.620><c> lambdas</c>

00:01:02.939 --> 00:01:02.949 align:start position:0%
have any knowledge about writing lambdas
 

00:01:02.949 --> 00:01:06.090 align:start position:0%
have any knowledge about writing lambdas
who<00:01:03.789><c> never</c><00:01:04.030><c> wrote</c><00:01:04.539><c> lambda</c><00:01:05.440><c> expressions</c><00:01:05.950><c> in</c>

00:01:06.090 --> 00:01:06.100 align:start position:0%
who never wrote lambda expressions in
 

00:01:06.100 --> 00:01:13.380 align:start position:0%
who never wrote lambda expressions in
Java<00:01:07.229><c> all</c><00:01:08.229><c> right</c><00:01:09.869><c> and</c><00:01:10.869><c> who</c><00:01:11.910><c> if</c><00:01:12.910><c> you</c><00:01:12.970><c> consider</c>

00:01:13.380 --> 00:01:13.390 align:start position:0%
Java all right and who if you consider
 

00:01:13.390 --> 00:01:15.749 align:start position:0%
Java all right and who if you consider
yourself<00:01:13.539><c> as</c><00:01:13.869><c> a</c><00:01:13.899><c> seasoned</c><00:01:14.380><c> lambda</c><00:01:15.070><c> expression</c>

00:01:15.749 --> 00:01:15.759 align:start position:0%
yourself as a seasoned lambda expression
 

00:01:15.759 --> 00:01:20.160 align:start position:0%
yourself as a seasoned lambda expression
writer<00:01:17.789><c> okay</c><00:01:18.789><c> about</c><00:01:19.420><c> the</c><00:01:19.630><c> same</c><00:01:19.840><c> amount</c><00:01:20.080><c> of</c>

00:01:20.160 --> 00:01:20.170 align:start position:0%
writer okay about the same amount of
 

00:01:20.170 --> 00:01:23.940 align:start position:0%
writer okay about the same amount of
people<00:01:20.670><c> so</c><00:01:21.670><c> we'll</c><00:01:21.820><c> build</c><00:01:22.060><c> up</c><00:01:22.270><c> on</c><00:01:22.539><c> things</c><00:01:22.990><c> from</c>

00:01:23.940 --> 00:01:23.950 align:start position:0%
people so we'll build up on things from
 

00:01:23.950 --> 00:01:26.330 align:start position:0%
people so we'll build up on things from
side<00:01:24.250><c> to</c><00:01:24.280><c> side</c><00:01:24.429><c> and</c><00:01:24.820><c> for</c><00:01:24.970><c> example</c><00:01:25.300><c> to</c><00:01:25.690><c> create</c>

00:01:26.330 --> 00:01:26.340 align:start position:0%
side to side and for example to create
 

00:01:26.340 --> 00:01:29.160 align:start position:0%
side to side and for example to create
patterns<00:01:27.340><c> that</c><00:01:27.550><c> we</c><00:01:27.789><c> can't</c><00:01:28.149><c> write</c><00:01:28.420><c> without</c><00:01:28.869><c> and</c>

00:01:29.160 --> 00:01:29.170 align:start position:0%
patterns that we can't write without and
 

00:01:29.170 --> 00:01:30.660 align:start position:0%
patterns that we can't write without and
expression<00:01:29.679><c> they</c><00:01:29.800><c> see</c><00:01:29.979><c> this</c><00:01:30.100><c> is</c><00:01:30.310><c> really</c><00:01:30.580><c> the</c>

00:01:30.660 --> 00:01:30.670 align:start position:0%
expression they see this is really the
 

00:01:30.670 --> 00:01:33.389 align:start position:0%
expression they see this is really the
topic<00:01:30.910><c> of</c><00:01:31.509><c> this</c><00:01:31.660><c> talk</c><00:01:31.840><c> it</c><00:01:32.560><c> is</c><00:01:32.770><c> really</c><00:01:33.190><c> about</c>

00:01:33.389 --> 00:01:33.399 align:start position:0%
topic of this talk it is really about
 

00:01:33.399 --> 00:01:35.490 align:start position:0%
topic of this talk it is really about
lambdas<00:01:33.880><c> and</c><00:01:33.910><c> functional</c><00:01:34.570><c> interfaces</c><00:01:35.020><c> and</c>

00:01:35.490 --> 00:01:35.500 align:start position:0%
lambdas and functional interfaces and
 

00:01:35.500 --> 00:01:37.530 align:start position:0%
lambdas and functional interfaces and
things<00:01:35.560><c> like</c><00:01:35.950><c> that</c><00:01:36.009><c> it</c><00:01:36.430><c> is</c><00:01:36.490><c> not</c><00:01:37.060><c> to</c><00:01:37.240><c> talk</c><00:01:37.390><c> about</c>

00:01:37.530 --> 00:01:37.540 align:start position:0%
things like that it is not to talk about
 

00:01:37.540 --> 00:01:39.480 align:start position:0%
things like that it is not to talk about
streams<00:01:38.110><c> and</c><00:01:38.320><c> characters</c><00:01:38.740><c> so</c><00:01:38.920><c> I</c><00:01:38.979><c> will</c><00:01:39.189><c> not</c><00:01:39.369><c> be</c>

00:01:39.480 --> 00:01:39.490 align:start position:0%
streams and characters so I will not be
 

00:01:39.490 --> 00:01:42.359 align:start position:0%
streams and characters so I will not be
covering<00:01:39.880><c> this</c><00:01:40.030><c> topic</c><00:01:40.229><c> at</c><00:01:41.229><c> all</c><00:01:41.439><c> I</c><00:01:41.710><c> will</c><00:01:42.009><c> use</c>

00:01:42.359 --> 00:01:42.369 align:start position:0%
covering this topic at all I will use
 

00:01:42.369 --> 00:01:44.160 align:start position:0%
covering this topic at all I will use
numbers<00:01:42.759><c> in</c><00:01:43.030><c> collection</c><00:01:43.600><c> streams</c><00:01:44.020><c> and</c>

00:01:44.160 --> 00:01:44.170 align:start position:0%
numbers in collection streams and
 

00:01:44.170 --> 00:01:46.710 align:start position:0%
numbers in collection streams and
cultures<00:01:44.500><c> by</c><00:01:45.159><c> the</c><00:01:45.220><c> way</c><00:01:45.490><c> they</c><00:01:45.909><c> are</c><00:01:46.060><c> available</c>

00:01:46.710 --> 00:01:46.720 align:start position:0%
cultures by the way they are available
 

00:01:46.720 --> 00:01:51.359 align:start position:0%
cultures by the way they are available
seats<00:01:46.990><c> at</c><00:01:47.140><c> the</c><00:01:47.229><c> front</c><00:01:47.530><c> so</c><00:01:48.040><c> please</c><00:01:50.100><c> if</c><00:01:51.100><c> you</c><00:01:51.159><c> have</c>

00:01:51.359 --> 00:01:51.369 align:start position:0%
seats at the front so please if you have
 

00:01:51.369 --> 00:01:52.950 align:start position:0%
seats at the front so please if you have
an<00:01:51.490><c> available</c><00:01:51.700><c> stick</c><00:01:52.149><c> next</c><00:01:52.329><c> to</c><00:01:52.450><c> you</c><00:01:52.600><c> can</c><00:01:52.840><c> you</c>

00:01:52.950 --> 00:01:52.960 align:start position:0%
an available stick next to you can you
 

00:01:52.960 --> 00:01:58.340 align:start position:0%
an available stick next to you can you
raise<00:01:53.110><c> your</c><00:01:53.140><c> hand</c><00:01:56.610><c> take</c><00:01:57.610><c> your</c><00:01:57.759><c> pick</c>

00:01:58.340 --> 00:01:58.350 align:start position:0%
raise your hand take your pick
 

00:01:58.350 --> 00:02:01.560 align:start position:0%
raise your hand take your pick
alright<00:01:59.350><c> my</c><00:01:59.619><c> name</c><00:01:59.770><c> is</c><00:01:59.799><c> Josie</c><00:02:00.250><c> I</c><00:02:00.460><c> live</c><00:02:00.759><c> in</c><00:02:00.939><c> in</c>

00:02:01.560 --> 00:02:01.570 align:start position:0%
alright my name is Josie I live in in
 

00:02:01.570 --> 00:02:05.370 align:start position:0%
alright my name is Josie I live in in
the<00:02:01.630><c> Paris</c><00:02:02.049><c> Area</c><00:02:02.219><c> I</c><00:02:03.270><c> put</c><00:02:04.270><c> just</c><00:02:04.299><c> some</c><00:02:04.719><c> link</c><00:02:04.990><c> here</c>

00:02:05.370 --> 00:02:05.380 align:start position:0%
the Paris Area I put just some link here
 

00:02:05.380 --> 00:02:08.580 align:start position:0%
the Paris Area I put just some link here
my<00:02:05.740><c> Twitter</c><00:02:06.009><c> account</c><00:02:06.130><c> github</c><00:02:06.759><c> account</c><00:02:07.090><c> I</c><00:02:07.590><c> have</c>

00:02:08.580 --> 00:02:08.590 align:start position:0%
my Twitter account github account I have
 

00:02:08.590 --> 00:02:10.410 align:start position:0%
my Twitter account github account I have
two<00:02:08.829><c> open</c><00:02:09.160><c> source</c><00:02:09.369><c> projects</c><00:02:09.910><c> called</c><00:02:10.149><c> stream</c>

00:02:10.410 --> 00:02:10.420 align:start position:0%
two open source projects called stream
 

00:02:10.420 --> 00:02:12.090 align:start position:0%
two open source projects called stream
duties<00:02:10.780><c> and</c><00:02:10.959><c> character</c><00:02:11.350><c> GT</c><00:02:11.620><c> that</c><00:02:11.829><c> you</c><00:02:11.950><c> might</c>

00:02:12.090 --> 00:02:12.100 align:start position:0%
duties and character GT that you might
 

00:02:12.100 --> 00:02:14.280 align:start position:0%
duties and character GT that you might
check<00:02:12.310><c> if</c><00:02:12.489><c> you're</c><00:02:12.670><c> interested</c><00:02:13.060><c> in</c><00:02:13.180><c> and</c><00:02:13.750><c> I</c><00:02:13.959><c> also</c>

00:02:14.280 --> 00:02:14.290 align:start position:0%
check if you're interested in and I also
 

00:02:14.290 --> 00:02:15.930 align:start position:0%
check if you're interested in and I also
have<00:02:14.530><c> a</c><00:02:14.560><c> SlideShare</c><00:02:15.100><c> account</c><00:02:15.130><c> I'll</c><00:02:15.640><c> publish</c>

00:02:15.930 --> 00:02:15.940 align:start position:0%
have a SlideShare account I'll publish
 

00:02:15.940 --> 00:02:19.020 align:start position:0%
have a SlideShare account I'll publish
those<00:02:16.329><c> lights</c><00:02:16.630><c> on</c><00:02:16.870><c> my</c><00:02:17.140><c> SlideShare</c><00:02:17.590><c> account</c><00:02:18.030><c> by</c>

00:02:19.020 --> 00:02:19.030 align:start position:0%
those lights on my SlideShare account by
 

00:02:19.030 --> 00:02:21.780 align:start position:0%
those lights on my SlideShare account by
tonight<00:02:19.570><c> and</c><00:02:19.870><c> also</c><00:02:20.140><c> some</c><00:02:20.530><c> content</c><00:02:20.920><c> on</c><00:02:21.100><c> a</c>

00:02:21.780 --> 00:02:21.790 align:start position:0%
tonight and also some content on a
 

00:02:21.790 --> 00:02:23.940 align:start position:0%
tonight and also some content on a
github<00:02:22.090><c> by</c><00:02:22.870><c> the</c><00:02:22.930><c> way</c><00:02:23.170><c> I'm</c><00:02:23.260><c> also</c><00:02:23.410><c> a</c><00:02:23.590><c> Java</c>

00:02:23.940 --> 00:02:23.950 align:start position:0%
github by the way I'm also a Java
 

00:02:23.950 --> 00:02:31.819 align:start position:0%
github by the way I'm also a Java
champion<00:02:24.400><c> and</c><00:02:24.640><c> the</c><00:02:25.329><c> Java</c><00:02:25.540><c> work</c><00:02:25.840><c> star</c><00:02:26.940><c> music</c>

00:02:31.819 --> 00:02:31.829 align:start position:0%
 
 

00:02:31.829 --> 00:02:34.680 align:start position:0%
 
before<00:02:32.829><c> we</c><00:02:33.040><c> start</c><00:02:33.459><c> I'd</c><00:02:33.850><c> like</c><00:02:34.030><c> to</c><00:02:34.180><c> apologize</c>

00:02:34.680 --> 00:02:34.690 align:start position:0%
before we start I'd like to apologize
 

00:02:34.690 --> 00:02:36.599 align:start position:0%
before we start I'd like to apologize
because<00:02:34.989><c> from</c><00:02:35.380><c> the</c><00:02:35.500><c> next</c><00:02:35.799><c> two</c><00:02:36.040><c> hours</c><00:02:36.400><c> you'll</c>

00:02:36.599 --> 00:02:36.609 align:start position:0%
because from the next two hours you'll
 

00:02:36.609 --> 00:02:40.229 align:start position:0%
because from the next two hours you'll
have<00:02:36.640><c> to</c><00:02:36.940><c> learn</c><00:02:37.230><c> English</c><00:02:38.760><c> speaking</c><00:02:39.760><c> with</c><00:02:40.090><c> the</c>

00:02:40.229 --> 00:02:40.239 align:start position:0%
have to learn English speaking with the
 

00:02:40.239 --> 00:02:42.680 align:start position:0%
have to learn English speaking with the
French<00:02:40.569><c> accent</c>

00:02:42.680 --> 00:02:42.690 align:start position:0%
French accent
 

00:02:42.690 --> 00:02:45.450 align:start position:0%
French accent
the<00:02:43.690><c> alternative</c><00:02:44.200><c> would</c><00:02:44.320><c> be</c><00:02:44.380><c> that</c><00:02:45.040><c> I</c><00:02:45.130><c> speak</c>

00:02:45.450 --> 00:02:45.460 align:start position:0%
the alternative would be that I speak
 

00:02:45.460 --> 00:02:48.800 align:start position:0%
the alternative would be that I speak
French<00:02:45.700><c> that</c><00:02:46.920><c> probably</c><00:02:47.920><c> wouldn't</c><00:02:48.250><c> work</c><00:02:48.310><c> much</c>

00:02:48.800 --> 00:02:48.810 align:start position:0%
French that probably wouldn't work much
 

00:02:48.810 --> 00:02:52.500 align:start position:0%
French that probably wouldn't work much
okay<00:02:49.810><c> so</c><00:02:49.870><c> if</c><00:02:50.170><c> you</c><00:02:50.290><c> have</c><00:02:50.380><c> questions</c><00:02:51.510><c> to</c>

00:02:52.500 --> 00:02:52.510 align:start position:0%
okay so if you have questions to
 

00:02:52.510 --> 00:02:54.180 align:start position:0%
okay so if you have questions to
solutions<00:02:52.960><c> you</c><00:02:53.110><c> raise</c><00:02:53.320><c> your</c><00:02:53.350><c> hand</c><00:02:53.680><c> you</c><00:02:53.890><c> shout</c>

00:02:54.180 --> 00:02:54.190 align:start position:0%
solutions you raise your hand you shout
 

00:02:54.190 --> 00:02:57.000 align:start position:0%
solutions you raise your hand you shout
you<00:02:54.550><c> make</c><00:02:55.300><c> yourself</c><00:02:55.720><c> heard</c><00:02:56.050><c> so</c><00:02:56.500><c> that</c><00:02:56.530><c> I</c><00:02:56.800><c> can</c>

00:02:57.000 --> 00:02:57.010 align:start position:0%
you make yourself heard so that I can
 

00:02:57.010 --> 00:02:59.520 align:start position:0%
you make yourself heard so that I can
hear<00:02:57.520><c> you</c><00:02:57.700><c> hear</c><00:02:58.120><c> you</c><00:02:58.270><c> and</c><00:02:58.420><c> see</c><00:02:58.630><c> you</c><00:02:58.780><c> if</c><00:02:59.350><c> you</c>

00:02:59.520 --> 00:02:59.530 align:start position:0%
hear you hear you and see you if you
 

00:02:59.530 --> 00:03:00.960 align:start position:0%
hear you hear you and see you if you
don't<00:02:59.740><c> or</c><00:02:59.890><c> if</c><00:02:59.920><c> you</c><00:03:00.100><c> have</c><00:03:00.220><c> questions</c><00:03:00.370><c> up</c><00:03:00.730><c> to</c><00:03:00.760><c> the</c>

00:03:00.960 --> 00:03:00.970 align:start position:0%
don't or if you have questions up to the
 

00:03:00.970 --> 00:03:02.700 align:start position:0%
don't or if you have questions up to the
top<00:03:01.180><c> whatever</c><00:03:01.420><c> you</c><00:03:01.990><c> can</c><00:03:02.170><c> use</c><00:03:02.320><c> this</c><00:03:02.470><c> hashtag</c>

00:03:02.700 --> 00:03:02.710 align:start position:0%
top whatever you can use this hashtag
 

00:03:02.710 --> 00:03:06.150 align:start position:0%
top whatever you can use this hashtag
and<00:03:03.340><c> try</c><00:03:03.580><c> to</c><00:03:03.750><c> watch</c><00:03:04.750><c> it</c><00:03:04.960><c> monitor</c><00:03:05.710><c> it</c><00:03:05.830><c> so</c><00:03:05.860><c> that</c>

00:03:06.150 --> 00:03:06.160 align:start position:0%
and try to watch it monitor it so that
 

00:03:06.160 --> 00:03:09.290 align:start position:0%
and try to watch it monitor it so that
you<00:03:06.370><c> I</c><00:03:06.640><c> can</c><00:03:07.060><c> answer</c><00:03:07.210><c> you</c><00:03:07.450><c> using</c><00:03:07.780><c> using</c><00:03:08.380><c> Twitter</c>

00:03:09.290 --> 00:03:09.300 align:start position:0%
you I can answer you using using Twitter
 

00:03:09.300 --> 00:03:12.570 align:start position:0%
you I can answer you using using Twitter
okay<00:03:10.320><c> we're</c><00:03:11.320><c> going</c><00:03:11.470><c> to</c><00:03:11.560><c> begin</c><00:03:12.130><c> with</c><00:03:12.400><c> very</c>

00:03:12.570 --> 00:03:12.580 align:start position:0%
okay we're going to begin with very
 

00:03:12.580 --> 00:03:16.770 align:start position:0%
okay we're going to begin with very
basic<00:03:13.360><c> stuff</c><00:03:13.810><c> first</c><00:03:14.620><c> question</c><00:03:15.180><c> what</c><00:03:16.180><c> is</c><00:03:16.210><c> this</c>

00:03:16.770 --> 00:03:16.780 align:start position:0%
basic stuff first question what is this
 

00:03:16.780 --> 00:03:20.550 align:start position:0%
basic stuff first question what is this
code<00:03:17.050><c> doing</c><00:03:18.030><c> this</c><00:03:19.030><c> is</c><00:03:19.180><c> the</c><00:03:19.330><c> easy</c><00:03:19.600><c> quiz</c><00:03:20.020><c> of</c><00:03:20.380><c> the</c>

00:03:20.550 --> 00:03:20.560 align:start position:0%
code doing this is the easy quiz of the
 

00:03:20.560 --> 00:03:25.680 align:start position:0%
code doing this is the easy quiz of the
day<00:03:21.840><c> right</c><00:03:22.840><c> so</c><00:03:23.500><c> this</c><00:03:23.710><c> is</c><00:03:23.770><c> basically</c><00:03:24.730><c> a</c><00:03:24.880><c> compare</c>

00:03:25.680 --> 00:03:25.690 align:start position:0%
day right so this is basically a compare
 

00:03:25.690 --> 00:03:28.950 align:start position:0%
day right so this is basically a compare
table<00:03:25.930><c> okay</c><00:03:27.330><c> comparator</c><00:03:28.330><c> this</c><00:03:28.510><c> is</c><00:03:28.660><c> this</c><00:03:28.810><c> is</c>

00:03:28.950 --> 00:03:28.960 align:start position:0%
table okay comparator this is this is
 

00:03:28.960 --> 00:03:31.530 align:start position:0%
table okay comparator this is this is
Java<00:03:29.200><c> five</c><00:03:29.590><c> code</c><00:03:29.920><c> right</c><00:03:30.370><c> we</c><00:03:31.030><c> could</c><00:03:31.180><c> write</c><00:03:31.420><c> this</c>

00:03:31.530 --> 00:03:31.540 align:start position:0%
Java five code right we could write this
 

00:03:31.540 --> 00:03:34.080 align:start position:0%
Java five code right we could write this
code<00:03:31.780><c> in</c><00:03:32.100><c> 2004</c><00:03:33.100><c> when</c><00:03:33.460><c> Java</c><00:03:33.610><c> 5</c><00:03:33.880><c> was</c><00:03:34.060><c> released</c>

00:03:34.080 --> 00:03:34.090 align:start position:0%
code in 2004 when Java 5 was released
 

00:03:34.090 --> 00:03:36.990 align:start position:0%
code in 2004 when Java 5 was released
and<00:03:34.630><c> this</c><00:03:35.440><c> is</c><00:03:35.620><c> a</c><00:03:35.650><c> compiler</c><00:03:36.010><c> that</c><00:03:36.160><c> basically</c>

00:03:36.990 --> 00:03:37.000 align:start position:0%
and this is a compiler that basically
 

00:03:37.000 --> 00:03:39.870 align:start position:0%
and this is a compiler that basically
compared<00:03:37.480><c> to</c><00:03:37.720><c> people</c><00:03:38.140><c> using</c><00:03:39.010><c> the</c><00:03:39.250><c> last</c><00:03:39.460><c> name</c><00:03:39.670><c> I</c>

00:03:39.870 --> 00:03:39.880 align:start position:0%
compared to people using the last name I
 

00:03:39.880 --> 00:03:41.970 align:start position:0%
compared to people using the last name I
want<00:03:40.300><c> to</c><00:03:40.480><c> sort</c><00:03:40.750><c> a</c><00:03:40.900><c> list</c><00:03:40.930><c> of</c><00:03:41.200><c> people</c><00:03:41.500><c> I</c><00:03:41.650><c> can</c><00:03:41.830><c> use</c>

00:03:41.970 --> 00:03:41.980 align:start position:0%
want to sort a list of people I can use
 

00:03:41.980 --> 00:03:45.500 align:start position:0%
want to sort a list of people I can use
this<00:03:42.160><c> comparator</c><00:03:42.760><c> this</c><00:03:43.240><c> is</c><00:03:43.390><c> very</c><00:03:43.570><c> basic</c><00:03:43.930><c> stuff</c>

00:03:45.500 --> 00:03:45.510 align:start position:0%
this comparator this is very basic stuff
 

00:03:45.510 --> 00:03:48.600 align:start position:0%
this comparator this is very basic stuff
two<00:03:46.510><c> questions</c><00:03:46.860><c> do</c><00:03:47.860><c> you</c><00:03:47.920><c> think</c><00:03:48.130><c> this</c><00:03:48.250><c> code</c><00:03:48.459><c> is</c>

00:03:48.600 --> 00:03:48.610 align:start position:0%
two questions do you think this code is
 

00:03:48.610 --> 00:03:57.320 align:start position:0%
two questions do you think this code is
readable<00:03:50.010><c> no</c><00:03:53.610><c> it's</c><00:03:54.610><c> not</c><00:03:54.700><c> that</c><00:03:54.880><c> bad</c><00:03:55.090><c> right</c><00:03:55.390><c> I</c>

00:03:57.320 --> 00:03:57.330 align:start position:0%
readable no it's not that bad right I
 

00:03:57.330 --> 00:04:00.750 align:start position:0%
readable no it's not that bad right I
wouldn't<00:03:58.330><c> say</c><00:03:58.600><c> it's</c><00:03:58.750><c> very</c><00:03:59.110><c> readable</c><00:03:59.410><c> but</c><00:03:59.860><c> kind</c>

00:04:00.750 --> 00:04:00.760 align:start position:0%
wouldn't say it's very readable but kind
 

00:04:00.760 --> 00:04:04.400 align:start position:0%
wouldn't say it's very readable but kind
of<00:04:00.820><c> okay</c><00:04:01.180><c> we</c><00:04:01.990><c> use</c><00:04:02.470><c> to</c><00:04:02.680><c> this</c><00:04:02.800><c> code</c><00:04:03.040><c> in</c><00:04:03.190><c> fact</c>

00:04:04.400 --> 00:04:04.410 align:start position:0%
of okay we use to this code in fact
 

00:04:04.410 --> 00:04:07.250 align:start position:0%
of okay we use to this code in fact
would<00:04:05.410><c> you</c><00:04:05.530><c> say</c><00:04:05.740><c> that</c><00:04:05.920><c> this</c><00:04:06.130><c> code</c><00:04:06.340><c> is</c><00:04:06.370><c> robust</c>

00:04:07.250 --> 00:04:07.260 align:start position:0%
would you say that this code is robust
 

00:04:07.260 --> 00:04:12.930 align:start position:0%
would you say that this code is robust
can<00:04:08.260><c> it</c><00:04:08.350><c> crash</c><00:04:09.930><c> yes</c><00:04:10.930><c> you</c><00:04:11.080><c> can</c><00:04:11.260><c> try</c><00:04:11.440><c> if</c><00:04:12.340><c> p1</c><00:04:12.700><c> is</c>

00:04:12.930 --> 00:04:12.940 align:start position:0%
can it crash yes you can try if p1 is
 

00:04:12.940 --> 00:04:14.610 align:start position:0%
can it crash yes you can try if p1 is
new<00:04:13.150><c> lore</c><00:04:13.450><c> the</c><00:04:13.690><c> last</c><00:04:13.870><c> name</c><00:04:14.050><c> is</c><00:04:14.200><c> new</c>

00:04:14.610 --> 00:04:14.620 align:start position:0%
new lore the last name is new
 

00:04:14.620 --> 00:04:16.830 align:start position:0%
new lore the last name is new
I<00:04:14.650><c> do</c><00:04:15.490><c> not</c><00:04:15.640><c> check</c><00:04:15.880><c> for</c><00:04:15.910><c> any</c><00:04:16.209><c> kind</c><00:04:16.420><c> of</c><00:04:16.540><c> new</c>

00:04:16.830 --> 00:04:16.840 align:start position:0%
I do not check for any kind of new
 

00:04:16.840 --> 00:04:18.660 align:start position:0%
I do not check for any kind of new
pointer<00:04:17.170><c> exceptions</c><00:04:17.650><c> so</c><00:04:17.830><c> your</c><00:04:18.370><c> pointer</c>

00:04:18.660 --> 00:04:18.670 align:start position:0%
pointer exceptions so your pointer
 

00:04:18.670 --> 00:04:20.580 align:start position:0%
pointer exceptions so your pointer
exception<00:04:19.090><c> can</c><00:04:19.209><c> be</c><00:04:19.390><c> raised</c><00:04:19.630><c> using</c><00:04:20.049><c> this</c><00:04:20.320><c> kind</c>

00:04:20.580 --> 00:04:20.590 align:start position:0%
exception can be raised using this kind
 

00:04:20.590 --> 00:04:24.360 align:start position:0%
exception can be raised using this kind
of<00:04:20.650><c> code</c><00:04:21.150><c> all</c><00:04:22.150><c> right</c><00:04:22.590><c> let</c><00:04:23.590><c> us</c><00:04:23.710><c> make</c><00:04:24.190><c> it</c><00:04:24.340><c> a</c>

00:04:24.360 --> 00:04:24.370 align:start position:0%
of code all right let us make it a
 

00:04:24.370 --> 00:04:28.230 align:start position:0%
of code all right let us make it a
little<00:04:24.640><c> more</c><00:04:24.850><c> complex</c><00:04:25.240><c> with</c><00:04:26.230><c> this</c><00:04:26.410><c> one</c><00:04:27.240><c> what</c>

00:04:28.230 --> 00:04:28.240 align:start position:0%
little more complex with this one what
 

00:04:28.240 --> 00:04:31.260 align:start position:0%
little more complex with this one what
does<00:04:28.450><c> this</c><00:04:28.600><c> could</c><00:04:28.810><c> do</c><00:04:29.040><c> well</c><00:04:30.040><c> basically</c><00:04:30.640><c> kind</c>

00:04:31.260 --> 00:04:31.270 align:start position:0%
does this could do well basically kind
 

00:04:31.270 --> 00:04:34.290 align:start position:0%
does this could do well basically kind
of<00:04:31.360><c> does</c><00:04:31.570><c> the</c><00:04:31.720><c> same</c><00:04:31.960><c> thing</c><00:04:33.120><c> compares</c><00:04:34.120><c> two</c>

00:04:34.290 --> 00:04:34.300 align:start position:0%
of does the same thing compares two
 

00:04:34.300 --> 00:04:35.790 align:start position:0%
of does the same thing compares two
people<00:04:34.570><c> using</c><00:04:34.720><c> the</c><00:04:34.990><c> last</c><00:04:35.169><c> name</c><00:04:35.380><c> and</c><00:04:35.620><c> if</c><00:04:35.770><c> the</c>

00:04:35.790 --> 00:04:35.800 align:start position:0%
people using the last name and if the
 

00:04:35.800 --> 00:04:37.980 align:start position:0%
people using the last name and if the
last<00:04:36.070><c> name</c><00:04:36.280><c> is</c><00:04:36.400><c> the</c><00:04:36.550><c> same</c><00:04:36.730><c> it</c><00:04:37.419><c> compressed</c><00:04:37.900><c> the</c>

00:04:37.980 --> 00:04:37.990 align:start position:0%
last name is the same it compressed the
 

00:04:37.990 --> 00:04:41.150 align:start position:0%
last name is the same it compressed the
first<00:04:38.230><c> name</c><00:04:38.440><c> to</c><00:04:39.130><c> sort</c><00:04:39.820><c> this</c><00:04:40.240><c> list</c><00:04:40.300><c> of</c><00:04:40.660><c> people</c>

00:04:41.150 --> 00:04:41.160 align:start position:0%
first name to sort this list of people
 

00:04:41.160 --> 00:04:45.050 align:start position:0%
first name to sort this list of people
and<00:04:42.160><c> if</c><00:04:42.370><c> I</c><00:04:42.490><c> ask</c><00:04:42.669><c> myself</c><00:04:43.350><c> is</c><00:04:44.350><c> this</c><00:04:44.440><c> code</c>

00:04:45.050 --> 00:04:45.060 align:start position:0%
and if I ask myself is this code
 

00:04:45.060 --> 00:04:50.969 align:start position:0%
and if I ask myself is this code
readable<00:04:47.280><c> hmm</c><00:04:48.450><c> is</c><00:04:49.450><c> it</c><00:04:49.690><c> is</c><00:04:49.930><c> it</c><00:04:50.140><c> more</c><00:04:50.770><c> readable</c>

00:04:50.969 --> 00:04:50.979 align:start position:0%
readable hmm is it is it more readable
 

00:04:50.979 --> 00:04:52.740 align:start position:0%
readable hmm is it is it more readable
than<00:04:51.250><c> the</c><00:04:51.460><c> previous</c><00:04:51.820><c> one</c>

00:04:52.740 --> 00:04:52.750 align:start position:0%
than the previous one
 

00:04:52.750 --> 00:04:55.710 align:start position:0%
than the previous one
quite<00:04:53.320><c> not</c><00:04:53.610><c> it's</c><00:04:54.610><c> probably</c><00:04:54.790><c> less</c><00:04:55.090><c> treatable</c>

00:04:55.710 --> 00:04:55.720 align:start position:0%
quite not it's probably less treatable
 

00:04:55.720 --> 00:04:58.500 align:start position:0%
quite not it's probably less treatable
why<00:04:55.840><c> because</c><00:04:56.170><c> I</c><00:04:56.290><c> have</c><00:04:56.320><c> a</c><00:04:56.470><c> if</c><00:04:56.890><c> in</c><00:04:57.250><c> it</c><00:04:57.430><c> and</c><00:04:57.820><c> we'll</c>

00:04:58.500 --> 00:04:58.510 align:start position:0%
why because I have a if in it and we'll
 

00:04:58.510 --> 00:05:01.050 align:start position:0%
why because I have a if in it and we'll
I<00:04:58.780><c> guess</c><00:04:59.350><c> we</c><00:04:59.530><c> all</c><00:04:59.650><c> know</c><00:04:59.860><c> the</c><00:05:00.190><c> sonar</c><00:05:00.550><c> toolkit</c>

00:05:01.050 --> 00:05:01.060 align:start position:0%
I guess we all know the sonar toolkit
 

00:05:01.060 --> 00:05:03.720 align:start position:0%
I guess we all know the sonar toolkit
there<00:05:01.750><c> is</c><00:05:01.870><c> this</c><00:05:02.050><c> cyclomatic</c><00:05:02.980><c> complexity</c>

00:05:03.720 --> 00:05:03.730 align:start position:0%
there is this cyclomatic complexity
 

00:05:03.730 --> 00:05:06.300 align:start position:0%
there is this cyclomatic complexity
computed<00:05:04.240><c> by</c><00:05:04.360><c> so</c><00:05:04.630><c> now</c><00:05:04.780><c> and</c><00:05:04.990><c> we</c><00:05:05.170><c> have</c><00:05:05.320><c> increased</c>

00:05:06.300 --> 00:05:06.310 align:start position:0%
computed by so now and we have increased
 

00:05:06.310 --> 00:05:08.670 align:start position:0%
computed by so now and we have increased
the<00:05:06.850><c> cyclomatic</c><00:05:07.240><c> complexity</c><00:05:07.900><c> of</c><00:05:08.050><c> this</c><00:05:08.200><c> code</c>

00:05:08.670 --> 00:05:08.680 align:start position:0%
the cyclomatic complexity of this code
 

00:05:08.680 --> 00:05:11.670 align:start position:0%
the cyclomatic complexity of this code
so<00:05:09.250><c> yes</c><00:05:09.730><c> readability</c><00:05:10.150><c> as</c><00:05:10.600><c> as</c><00:05:10.900><c> decreased</c><00:05:11.410><c> a</c><00:05:11.530><c> bit</c>

00:05:11.670 --> 00:05:11.680 align:start position:0%
so yes readability as as decreased a bit
 

00:05:11.680 --> 00:05:15.000 align:start position:0%
so yes readability as as decreased a bit
and<00:05:12.060><c> also</c><00:05:13.060><c> robustness</c><00:05:13.600><c> because</c><00:05:14.350><c> if</c><00:05:14.500><c> you</c><00:05:14.560><c> p1</c><00:05:14.830><c> is</c>

00:05:15.000 --> 00:05:15.010 align:start position:0%
and also robustness because if you p1 is
 

00:05:15.010 --> 00:05:18.720 align:start position:0%
and also robustness because if you p1 is
new<00:05:15.600><c> get</c><00:05:16.600><c> last</c><00:05:16.810><c> name</c><00:05:17.020><c> returns</c><00:05:17.830><c> a</c><00:05:17.950><c> new</c><00:05:18.100><c> value</c><00:05:18.400><c> of</c>

00:05:18.720 --> 00:05:18.730 align:start position:0%
new get last name returns a new value of
 

00:05:18.730 --> 00:05:21.060 align:start position:0%
new get last name returns a new value of
first<00:05:19.090><c> name</c><00:05:19.270><c> right</c><00:05:19.630><c> on</c><00:05:19.780><c> the</c><00:05:19.900><c> new</c><00:05:20.020><c> value</c><00:05:20.320><c> this</c>

00:05:21.060 --> 00:05:21.070 align:start position:0%
first name right on the new value this
 

00:05:21.070 --> 00:05:23.040 align:start position:0%
first name right on the new value this
code<00:05:21.280><c> will</c><00:05:21.460><c> also</c><00:05:21.610><c> throw</c><00:05:22.450><c> a</c><00:05:22.540><c> null</c><00:05:22.750><c> pointer</c>

00:05:23.040 --> 00:05:23.050 align:start position:0%
code will also throw a null pointer
 

00:05:23.050 --> 00:05:26.430 align:start position:0%
code will also throw a null pointer
exception<00:05:23.550><c> which</c><00:05:24.550><c> is</c><00:05:24.700><c> if</c><00:05:25.660><c> I</c><00:05:25.840><c> want</c><00:05:26.020><c> to</c><00:05:26.140><c> make</c><00:05:26.290><c> it</c>

00:05:26.430 --> 00:05:26.440 align:start position:0%
exception which is if I want to make it
 

00:05:26.440 --> 00:05:29.340 align:start position:0%
exception which is if I want to make it
robust<00:05:26.860><c> it</c><00:05:27.340><c> will</c><00:05:27.610><c> be</c><00:05:28.300><c> much</c><00:05:28.480><c> more</c><00:05:28.630><c> complex</c><00:05:28.990><c> and</c>

00:05:29.340 --> 00:05:29.350 align:start position:0%
robust it will be much more complex and
 

00:05:29.350 --> 00:05:31.590 align:start position:0%
robust it will be much more complex and
much<00:05:29.920><c> less</c><00:05:30.220><c> readable</c><00:05:30.700><c> because</c><00:05:31.120><c> I</c><00:05:31.150><c> will</c><00:05:31.390><c> have</c>

00:05:31.590 --> 00:05:31.600 align:start position:0%
much less readable because I will have
 

00:05:31.600 --> 00:05:34.710 align:start position:0%
much less readable because I will have
all<00:05:31.810><c> this</c><00:05:31.990><c> technical</c><00:05:32.950><c> code</c><00:05:33.820><c> to</c><00:05:34.180><c> check</c><00:05:34.360><c> for</c><00:05:34.540><c> new</c>

00:05:34.710 --> 00:05:34.720 align:start position:0%
all this technical code to check for new
 

00:05:34.720 --> 00:05:38.460 align:start position:0%
all this technical code to check for new
stuff<00:05:34.990><c> inside</c><00:05:35.890><c> my</c><00:05:36.070><c> application</c><00:05:36.580><c> code</c><00:05:37.470><c> all</c>

00:05:38.460 --> 00:05:38.470 align:start position:0%
stuff inside my application code all
 

00:05:38.470 --> 00:05:47.460 align:start position:0%
stuff inside my application code all
right<00:05:42.270><c> what</c><00:05:43.270><c> is</c><00:05:43.420><c> this</c><00:05:43.600><c> code</c><00:05:43.810><c> doing</c><00:05:46.470><c> compare</c>

00:05:47.460 --> 00:05:47.470 align:start position:0%
right what is this code doing compare
 

00:05:47.470 --> 00:05:50.970 align:start position:0%
right what is this code doing compare
people<00:05:47.770><c> using</c><00:05:48.130><c> the</c><00:05:48.250><c> last</c><00:05:48.430><c> name</c><00:05:49.650><c> then</c><00:05:50.650><c> using</c>

00:05:50.970 --> 00:05:50.980 align:start position:0%
people using the last name then using
 

00:05:50.980 --> 00:05:53.550 align:start position:0%
people using the last name then using
the<00:05:51.190><c> first</c><00:05:51.520><c> name</c><00:05:51.760><c> and</c><00:05:52.510><c> if</c><00:05:52.750><c> the</c><00:05:52.900><c> last</c><00:05:53.260><c> name</c><00:05:53.440><c> and</c>

00:05:53.550 --> 00:05:53.560 align:start position:0%
the first name and if the last name and
 

00:05:53.560 --> 00:05:55.140 align:start position:0%
the first name and if the last name and
the<00:05:53.650><c> first</c><00:05:53.680><c> name</c><00:05:53.919><c> is</c><00:05:54.070><c> the</c><00:05:54.130><c> same</c><00:05:54.460><c> which</c><00:05:54.700><c> can</c>

00:05:55.140 --> 00:05:55.150 align:start position:0%
the first name is the same which can
 

00:05:55.150 --> 00:05:58.370 align:start position:0%
the first name is the same which can
happen<00:05:55.330><c> of</c><00:05:55.600><c> course</c><00:05:55.980><c> compare</c><00:05:56.980><c> using</c><00:05:57.280><c> the</c><00:05:57.430><c> ages</c>

00:05:58.370 --> 00:05:58.380 align:start position:0%
happen of course compare using the ages
 

00:05:58.380 --> 00:05:59.610 align:start position:0%
happen of course compare using the ages
yeah

00:05:59.610 --> 00:05:59.620 align:start position:0%
yeah
 

00:05:59.620 --> 00:06:05.070 align:start position:0%
yeah
how<00:06:00.340><c> about</c><00:06:00.550><c> readability</c><00:06:02.100><c> hmm</c><00:06:03.750><c> not</c><00:06:04.750><c> that</c><00:06:04.780><c> great</c>

00:06:05.070 --> 00:06:05.080 align:start position:0%
how about readability hmm not that great
 

00:06:05.080 --> 00:06:07.980 align:start position:0%
how about readability hmm not that great
right<00:06:05.290><c> much</c><00:06:06.280><c> much</c><00:06:06.790><c> lower</c><00:06:07.030><c> I</c><00:06:07.360><c> would</c><00:06:07.510><c> say</c><00:06:07.810><c> that</c>

00:06:07.980 --> 00:06:07.990 align:start position:0%
right much much lower I would say that
 

00:06:07.990 --> 00:06:09.659 align:start position:0%
right much much lower I would say that
this<00:06:08.140><c> is</c><00:06:08.200><c> the</c><00:06:08.440><c> kind</c><00:06:08.620><c> of</c><00:06:08.710><c> code</c><00:06:08.890><c> was</c><00:06:09.070><c> so</c><00:06:09.280><c> used</c><00:06:09.520><c> to</c>

00:06:09.659 --> 00:06:09.669 align:start position:0%
this is the kind of code was so used to
 

00:06:09.669 --> 00:06:12.450 align:start position:0%
this is the kind of code was so used to
see<00:06:10.000><c> in</c><00:06:10.479><c> application</c><00:06:11.110><c> that</c><00:06:11.380><c> we</c><00:06:11.890><c> do</c><00:06:12.010><c> not</c><00:06:12.130><c> really</c>

00:06:12.450 --> 00:06:12.460 align:start position:0%
see in application that we do not really
 

00:06:12.460 --> 00:06:15.210 align:start position:0%
see in application that we do not really
need<00:06:12.729><c> to</c><00:06:12.940><c> read</c><00:06:13.210><c> it</c><00:06:13.360><c> line</c><00:06:13.720><c> by</c><00:06:13.750><c> line</c><00:06:13.950><c> we</c><00:06:14.950><c> just</c>

00:06:15.210 --> 00:06:15.220 align:start position:0%
need to read it line by line we just
 

00:06:15.220 --> 00:06:18.420 align:start position:0%
need to read it line by line we just
have<00:06:15.820><c> a</c><00:06:15.850><c> global</c><00:06:16.660><c> look</c><00:06:17.169><c> at</c><00:06:17.380><c> it</c><00:06:17.500><c> and</c><00:06:17.740><c> we</c><00:06:17.950><c> see</c><00:06:18.160><c> we</c>

00:06:18.420 --> 00:06:18.430 align:start position:0%
have a global look at it and we see we
 

00:06:18.430 --> 00:06:20.719 align:start position:0%
have a global look at it and we see we
understand<00:06:18.820><c> what</c><00:06:18.970><c> it</c><00:06:19.090><c> does</c><00:06:19.120><c> and</c><00:06:19.540><c> so</c><00:06:20.110><c> so</c><00:06:20.500><c> we</c>

00:06:20.719 --> 00:06:20.729 align:start position:0%
understand what it does and so so we
 

00:06:20.729 --> 00:06:24.930 align:start position:0%
understand what it does and so so we
understand<00:06:21.729><c> what</c><00:06:21.910><c> it</c><00:06:22.030><c> does</c><00:06:22.060><c> yeah</c><00:06:23.729><c> and</c><00:06:24.729><c> it's</c>

00:06:24.930 --> 00:06:24.940 align:start position:0%
understand what it does yeah and it's
 

00:06:24.940 --> 00:06:28.050 align:start position:0%
understand what it does yeah and it's
not<00:06:25.090><c> that</c><00:06:25.300><c> robust</c><00:06:25.780><c> neither</c><00:06:26.350><c> and</c><00:06:26.760><c> by</c><00:06:27.760><c> the</c><00:06:27.820><c> way</c>

00:06:28.050 --> 00:06:28.060 align:start position:0%
not that robust neither and by the way
 

00:06:28.060 --> 00:06:31.350 align:start position:0%
not that robust neither and by the way
since<00:06:28.510><c> we</c><00:06:28.810><c> do</c><00:06:29.020><c> not</c><00:06:29.169><c> read</c><00:06:29.530><c> it</c><00:06:29.680><c> line</c><00:06:30.010><c> by</c><00:06:30.040><c> line</c><00:06:30.360><c> we</c>

00:06:31.350 --> 00:06:31.360 align:start position:0%
since we do not read it line by line we
 

00:06:31.360 --> 00:06:34.560 align:start position:0%
since we do not read it line by line we
do<00:06:31.540><c> not</c><00:06:31.660><c> see</c><00:06:31.960><c> problems</c><00:06:32.740><c> that</c><00:06:33.160><c> could</c><00:06:33.430><c> be</c><00:06:33.610><c> could</c>

00:06:34.560 --> 00:06:34.570 align:start position:0%
do not see problems that could be could
 

00:06:34.570 --> 00:06:38.790 align:start position:0%
do not see problems that could be could
have<00:06:34.600><c> sneaked</c><00:06:35.050><c> in</c><00:06:35.440><c> those</c><00:06:35.650><c> code</c><00:06:35.860><c> yeah</c><00:06:37.800><c> you</c>

00:06:38.790 --> 00:06:38.800 align:start position:0%
have sneaked in those code yeah you
 

00:06:38.800 --> 00:06:41.280 align:start position:0%
have sneaked in those code yeah you
check<00:06:39.070><c> really</c><00:06:39.880><c> I</c><00:06:40.060><c> will</c><00:06:40.450><c> I</c><00:06:40.479><c> will</c><00:06:40.630><c> fix</c><00:06:40.960><c> the</c><00:06:41.140><c> code</c>

00:06:41.280 --> 00:06:41.290 align:start position:0%
check really I will I will fix the code
 

00:06:41.290 --> 00:06:46.230 align:start position:0%
check really I will I will fix the code
right<00:06:41.740><c> oh</c><00:06:42.930><c> my</c><00:06:43.930><c> god</c><00:06:44.110><c> I</c><00:06:44.410><c> was</c><00:06:45.400><c> comparing</c><00:06:45.790><c> the</c><00:06:46.030><c> last</c>

00:06:46.230 --> 00:06:46.240 align:start position:0%
right oh my god I was comparing the last
 

00:06:46.240 --> 00:06:48.000 align:start position:0%
right oh my god I was comparing the last
name<00:06:46.450><c> of</c><00:06:46.570><c> the</c><00:06:46.600><c> first</c><00:06:46.690><c> person</c><00:06:47.020><c> with</c><00:06:47.560><c> the</c><00:06:47.740><c> site</c>

00:06:48.000 --> 00:06:48.010 align:start position:0%
name of the first person with the site
 

00:06:48.010 --> 00:06:49.560 align:start position:0%
name of the first person with the site
with<00:06:48.280><c> the</c><00:06:48.370><c> first</c><00:06:48.640><c> thing</c><00:06:48.820><c> with</c><00:06:48.970><c> of</c><00:06:49.150><c> the</c><00:06:49.270><c> second</c>

00:06:49.560 --> 00:06:49.570 align:start position:0%
with the first thing with of the second
 

00:06:49.570 --> 00:06:51.540 align:start position:0%
with the first thing with of the second
one<00:06:49.750><c> did</c><00:06:50.110><c> you</c><00:06:50.260><c> see</c><00:06:50.410><c> but</c><00:06:50.950><c> did</c><00:06:51.130><c> show</c><00:06:51.310><c> it</c><00:06:51.430><c> again</c>

00:06:51.540 --> 00:06:51.550 align:start position:0%
one did you see but did show it again
 

00:06:51.550 --> 00:06:54.270 align:start position:0%
one did you see but did show it again
right<00:06:52.510><c> since</c><00:06:53.410><c> we</c><00:06:53.590><c> have</c><00:06:53.770><c> some</c><00:06:53.979><c> kind</c><00:06:54.130><c> of</c>

00:06:54.270 --> 00:06:54.280 align:start position:0%
right since we have some kind of
 

00:06:54.280 --> 00:06:56.520 align:start position:0%
right since we have some kind of
automatic<00:06:54.850><c> reading</c><00:06:55.450><c> of</c><00:06:55.600><c> this</c><00:06:55.750><c> code</c><00:06:55.990><c> we</c><00:06:56.169><c> do</c><00:06:56.380><c> not</c>

00:06:56.520 --> 00:06:56.530 align:start position:0%
automatic reading of this code we do not
 

00:06:56.530 --> 00:06:59.700 align:start position:0%
automatic reading of this code we do not
we<00:06:57.310><c> give</c><00:06:57.880><c> places</c><00:06:58.450><c> for</c><00:06:58.690><c> sneaky</c><00:06:59.110><c> bugs</c><00:06:59.320><c> to</c><00:06:59.530><c> hide</c>

00:06:59.700 --> 00:06:59.710 align:start position:0%
we give places for sneaky bugs to hide
 

00:06:59.710 --> 00:07:03.210 align:start position:0%
we give places for sneaky bugs to hide
in<00:06:59.890><c> and</c><00:07:00.960><c> there</c><00:07:01.960><c> was</c><00:07:02.110><c> a</c><00:07:02.140><c> bug</c><00:07:02.380><c> in</c><00:07:02.530><c> this</c><00:07:02.620><c> code</c><00:07:02.710><c> that</c>

00:07:03.210 --> 00:07:03.220 align:start position:0%
in and there was a bug in this code that
 

00:07:03.220 --> 00:07:05.820 align:start position:0%
in and there was a bug in this code that
we<00:07:03.430><c> maybe</c><00:07:04.080><c> somebody</c>

00:07:05.820 --> 00:07:05.830 align:start position:0%
we maybe somebody
 

00:07:05.830 --> 00:07:08.430 align:start position:0%
we maybe somebody
some<00:07:06.129><c> of</c><00:07:06.220><c> you</c><00:07:06.310><c> didn't</c><00:07:06.610><c> see</c><00:07:06.819><c> at</c><00:07:07.300><c> first</c><00:07:07.440><c> you'd</c>

00:07:08.430 --> 00:07:08.440 align:start position:0%
some of you didn't see at first you'd
 

00:07:08.440 --> 00:07:11.909 align:start position:0%
some of you didn't see at first you'd
better<00:07:08.620><c> have</c><00:07:08.800><c> a</c><00:07:08.830><c> very</c><00:07:08.949><c> good</c><00:07:10.319><c> unit</c><00:07:11.319><c> test</c><00:07:11.650><c> case</c>

00:07:11.909 --> 00:07:11.919 align:start position:0%
better have a very good unit test case
 

00:07:11.919 --> 00:07:14.640 align:start position:0%
better have a very good unit test case
to<00:07:11.949><c> fix</c><00:07:12.849><c> this</c><00:07:13.000><c> code</c><00:07:13.270><c> alright</c><00:07:13.509><c> big</c><00:07:13.720><c> to</c><00:07:13.900><c> see</c><00:07:14.470><c> this</c>

00:07:14.640 --> 00:07:14.650 align:start position:0%
to fix this code alright big to see this
 

00:07:14.650 --> 00:07:15.990 align:start position:0%
to fix this code alright big to see this
bug<00:07:14.830><c> because</c><00:07:15.009><c> you</c><00:07:15.250><c> need</c><00:07:15.400><c> to</c><00:07:15.490><c> have</c><00:07:15.610><c> two</c><00:07:15.819><c> people</c>

00:07:15.990 --> 00:07:16.000 align:start position:0%
bug because you need to have two people
 

00:07:16.000 --> 00:07:18.749 align:start position:0%
bug because you need to have two people
with<00:07:16.270><c> the</c><00:07:16.419><c> same</c><00:07:16.629><c> last</c><00:07:16.690><c> name</c><00:07:17.139><c> and</c><00:07:17.349><c> the</c><00:07:18.280><c> last</c>

00:07:18.749 --> 00:07:18.759 align:start position:0%
with the same last name and the last
 

00:07:18.759 --> 00:07:21.839 align:start position:0%
with the same last name and the last
name<00:07:18.940><c> of</c><00:07:19.060><c> the</c><00:07:19.180><c> first</c><00:07:19.300><c> person</c><00:07:19.780><c> has</c><00:07:20.500><c> to</c><00:07:20.740><c> be</c><00:07:20.919><c> lower</c>

00:07:21.839 --> 00:07:21.849 align:start position:0%
name of the first person has to be lower
 

00:07:21.849 --> 00:07:23.309 align:start position:0%
name of the first person has to be lower
than<00:07:22.180><c> the</c><00:07:22.389><c> first</c><00:07:22.659><c> thing</c><00:07:22.810><c> for</c><00:07:22.930><c> the</c><00:07:22.990><c> second</c>

00:07:23.309 --> 00:07:23.319 align:start position:0%
than the first thing for the second
 

00:07:23.319 --> 00:07:26.430 align:start position:0%
than the first thing for the second
person<00:07:23.500><c> to</c><00:07:23.830><c> see</c><00:07:23.979><c> this</c><00:07:24.389><c> so</c><00:07:25.389><c> this</c><00:07:25.599><c> is</c><00:07:25.750><c> typically</c>

00:07:26.430 --> 00:07:26.440 align:start position:0%
person to see this so this is typically
 

00:07:26.440 --> 00:07:28.559 align:start position:0%
person to see this so this is typically
the<00:07:26.650><c> kind</c><00:07:26.889><c> of</c><00:07:27.009><c> bug</c><00:07:27.310><c> that</c><00:07:27.340><c> will</c><00:07:27.699><c> make</c><00:07:27.940><c> it</c><00:07:28.090><c> into</c>

00:07:28.559 --> 00:07:28.569 align:start position:0%
the kind of bug that will make it into
 

00:07:28.569 --> 00:07:30.749 align:start position:0%
the kind of bug that will make it into
your<00:07:28.720><c> production</c><00:07:28.870><c> code</c><00:07:29.319><c> if</c><00:07:30.190><c> you're</c><00:07:30.430><c> just</c>

00:07:30.749 --> 00:07:30.759 align:start position:0%
your production code if you're just
 

00:07:30.759 --> 00:07:33.659 align:start position:0%
your production code if you're just
sorting<00:07:31.300><c> lists</c><00:07:32.199><c> of</c><00:07:32.319><c> students</c><00:07:32.830><c> or</c><00:07:32.979><c> pupil</c><00:07:33.520><c> or</c>

00:07:33.659 --> 00:07:33.669 align:start position:0%
sorting lists of students or pupil or
 

00:07:33.669 --> 00:07:35.969 align:start position:0%
sorting lists of students or pupil or
pupils<00:07:34.210><c> in</c><00:07:34.330><c> a</c><00:07:34.360><c> classroom</c><00:07:35.139><c> it</c><00:07:35.409><c> might</c><00:07:35.620><c> be</c><00:07:35.740><c> okay</c>

00:07:35.969 --> 00:07:35.979 align:start position:0%
pupils in a classroom it might be okay
 

00:07:35.979 --> 00:07:39.689 align:start position:0%
pupils in a classroom it might be okay
but<00:07:36.009><c> if</c><00:07:36.280><c> you</c><00:07:36.520><c> are</c><00:07:36.780><c> drawing</c><00:07:37.780><c> the</c><00:07:38.770><c> winner</c><00:07:39.009><c> of</c><00:07:39.190><c> 1</c>

00:07:39.689 --> 00:07:39.699 align:start position:0%
but if you are drawing the winner of 1
 

00:07:39.699 --> 00:07:41.670 align:start position:0%
but if you are drawing the winner of 1
million<00:07:39.940><c> price</c><00:07:40.389><c> and</c><00:07:40.690><c> some</c><00:07:41.139><c> kind</c><00:07:41.319><c> of</c><00:07:41.379><c> loss</c><00:07:41.530><c> we</c>

00:07:41.670 --> 00:07:41.680 align:start position:0%
million price and some kind of loss we
 

00:07:41.680 --> 00:07:44.670 align:start position:0%
million price and some kind of loss we
might<00:07:41.949><c> be</c><00:07:42.069><c> in</c><00:07:42.129><c> trouble</c><00:07:42.159><c> if</c><00:07:42.580><c> you</c><00:07:42.699><c> do</c><00:07:42.789><c> that</c><00:07:43.620><c> ok</c><00:07:44.620><c> so</c>

00:07:44.670 --> 00:07:44.680 align:start position:0%
might be in trouble if you do that ok so
 

00:07:44.680 --> 00:07:46.350 align:start position:0%
might be in trouble if you do that ok so
the<00:07:45.099><c> problem</c><00:07:45.400><c> with</c><00:07:45.550><c> this</c><00:07:45.639><c> comparator</c><00:07:46.060><c> here</c><00:07:46.180><c> I</c>

00:07:46.350 --> 00:07:46.360 align:start position:0%
the problem with this comparator here I
 

00:07:46.360 --> 00:07:48.629 align:start position:0%
the problem with this comparator here I
am<00:07:46.659><c> really</c><00:07:47.110><c> trying</c><00:07:47.500><c> to</c><00:07:47.830><c> address</c><00:07:47.919><c> a</c><00:07:48.159><c> very</c>

00:07:48.629 --> 00:07:48.639 align:start position:0%
am really trying to address a very
 

00:07:48.639 --> 00:07:51.689 align:start position:0%
am really trying to address a very
simple<00:07:49.300><c> and</c><00:07:49.509><c> very</c><00:07:49.599><c> classical</c><00:07:50.590><c> problem</c><00:07:50.979><c> I</c><00:07:51.190><c> need</c>

00:07:51.689 --> 00:07:51.699 align:start position:0%
simple and very classical problem I need
 

00:07:51.699 --> 00:07:54.420 align:start position:0%
simple and very classical problem I need
to<00:07:51.940><c> sort</c><00:07:52.389><c> a</c><00:07:52.569><c> list</c><00:07:52.599><c> of</c><00:07:52.870><c> people</c><00:07:53.259><c> using</c><00:07:54.099><c> the</c><00:07:54.250><c> last</c>

00:07:54.420 --> 00:07:54.430 align:start position:0%
to sort a list of people using the last
 

00:07:54.430 --> 00:07:56.909 align:start position:0%
to sort a list of people using the last
name<00:07:54.669><c> their</c><00:07:54.969><c> first</c><00:07:55.150><c> name</c><00:07:55.389><c> and</c><00:07:55.629><c> their</c><00:07:55.780><c> age</c><00:07:55.930><c> and</c>

00:07:56.909 --> 00:07:56.919 align:start position:0%
name their first name and their age and
 

00:07:56.919 --> 00:07:59.249 align:start position:0%
name their first name and their age and
every<00:07:57.159><c> time</c><00:07:57.340><c> I</c><00:07:57.370><c> add</c><00:07:57.639><c> a</c><00:07:57.669><c> criteria</c><00:07:58.360><c> in</c><00:07:58.719><c> in</c><00:07:59.050><c> this</c>

00:07:59.249 --> 00:07:59.259 align:start position:0%
every time I add a criteria in in this
 

00:07:59.259 --> 00:08:02.640 align:start position:0%
every time I add a criteria in in this
in<00:07:59.469><c> this</c><00:07:59.590><c> comparison</c><00:08:00.099><c> I</c><00:08:01.319><c> increase</c><00:08:02.319><c> the</c>

00:08:02.640 --> 00:08:02.650 align:start position:0%
in this comparison I increase the
 

00:08:02.650 --> 00:08:04.770 align:start position:0%
in this comparison I increase the
cyclomatic<00:08:02.949><c> complexity</c><00:08:03.610><c> I</c><00:08:03.969><c> decrease</c><00:08:04.569><c> the</c>

00:08:04.770 --> 00:08:04.780 align:start position:0%
cyclomatic complexity I decrease the
 

00:08:04.780 --> 00:08:07.830 align:start position:0%
cyclomatic complexity I decrease the
robustness<00:08:05.139><c> and</c><00:08:05.699><c> I</c><00:08:06.699><c> have</c><00:08:06.879><c> a</c><00:08:06.909><c> terrible</c><00:08:07.389><c> mess</c><00:08:07.659><c> of</c>

00:08:07.830 --> 00:08:07.840 align:start position:0%
robustness and I have a terrible mess of
 

00:08:07.840 --> 00:08:10.050 align:start position:0%
robustness and I have a terrible mess of
a<00:08:07.930><c> code</c><00:08:08.110><c> that</c><00:08:08.229><c> is</c><00:08:08.289><c> very</c><00:08:08.770><c> hard</c><00:08:09.009><c> to</c><00:08:09.159><c> fix</c><00:08:09.430><c> if</c><00:08:09.789><c> there</c>

00:08:10.050 --> 00:08:10.060 align:start position:0%
a code that is very hard to fix if there
 

00:08:10.060 --> 00:08:12.779 align:start position:0%
a code that is very hard to fix if there
are<00:08:10.150><c> bugs</c><00:08:10.389><c> in</c><00:08:10.509><c> it</c><00:08:10.659><c> so</c><00:08:11.650><c> this</c><00:08:11.860><c> is</c><00:08:11.919><c> exactly</c><00:08:12.490><c> what</c><00:08:12.759><c> I</c>

00:08:12.779 --> 00:08:12.789 align:start position:0%
are bugs in it so this is exactly what I
 

00:08:12.789 --> 00:08:15.209 align:start position:0%
are bugs in it so this is exactly what I
do<00:08:12.909><c> not</c><00:08:13.300><c> want</c><00:08:13.599><c> to</c><00:08:13.690><c> do</c><00:08:13.810><c> and</c><00:08:14.080><c> this</c><00:08:14.710><c> is</c><00:08:14.860><c> what</c><00:08:15.039><c> we</c>

00:08:15.209 --> 00:08:15.219 align:start position:0%
do not want to do and this is what we
 

00:08:15.219 --> 00:08:16.800 align:start position:0%
do not want to do and this is what we
are<00:08:15.279><c> going</c><00:08:15.400><c> to</c><00:08:15.490><c> address</c><00:08:15.759><c> using</c><00:08:16.419><c> lambda</c>

00:08:16.800 --> 00:08:16.810 align:start position:0%
are going to address using lambda
 

00:08:16.810 --> 00:08:18.659 align:start position:0%
are going to address using lambda
expressions<00:08:17.409><c> and</c><00:08:17.740><c> patterns</c><00:08:18.159><c> with</c><00:08:18.370><c> using</c>

00:08:18.659 --> 00:08:18.669 align:start position:0%
expressions and patterns with using
 

00:08:18.669 --> 00:08:21.149 align:start position:0%
expressions and patterns with using
default<00:08:18.880><c> beta</c><00:08:19.240><c> system</c><00:08:19.800><c> basically</c><00:08:20.800><c> the</c><00:08:20.979><c> code</c>

00:08:21.149 --> 00:08:21.159 align:start position:0%
default beta system basically the code
 

00:08:21.159 --> 00:08:23.850 align:start position:0%
default beta system basically the code
we<00:08:21.310><c> are</c><00:08:21.340><c> going</c><00:08:21.610><c> to</c><00:08:21.699><c> write</c><00:08:21.909><c> is</c><00:08:22.090><c> this</c><00:08:22.240><c> one</c><00:08:22.860><c> which</c>

00:08:23.850 --> 00:08:23.860 align:start position:0%
we are going to write is this one which
 

00:08:23.860 --> 00:08:26.129 align:start position:0%
we are going to write is this one which
does<00:08:24.159><c> the</c><00:08:24.340><c> exact</c><00:08:24.669><c> same</c><00:08:24.789><c> thing</c><00:08:25.000><c> as</c><00:08:25.719><c> the</c>

00:08:26.129 --> 00:08:26.139 align:start position:0%
does the exact same thing as the
 

00:08:26.139 --> 00:08:28.830 align:start position:0%
does the exact same thing as the
previous<00:08:26.319><c> one</c><00:08:26.729><c> the</c><00:08:27.729><c> difference</c><00:08:28.090><c> being</c><00:08:28.300><c> if</c><00:08:28.630><c> I</c>

00:08:28.830 --> 00:08:28.840 align:start position:0%
previous one the difference being if I
 

00:08:28.840 --> 00:08:31.260 align:start position:0%
previous one the difference being if I
add<00:08:29.050><c> criteria</c><00:08:29.560><c> through</c><00:08:30.250><c> my</c><00:08:30.400><c> comparator</c><00:08:31.029><c> I</c>

00:08:31.260 --> 00:08:31.270 align:start position:0%
add criteria through my comparator I
 

00:08:31.270 --> 00:08:34.889 align:start position:0%
add criteria through my comparator I
will<00:08:31.810><c> just</c><00:08:32.140><c> add</c><00:08:32.789><c> method</c><00:08:33.789><c> calls</c><00:08:34.029><c> so</c><00:08:34.539><c> I</c><00:08:34.599><c> do</c><00:08:34.659><c> not</c>

00:08:34.889 --> 00:08:34.899 align:start position:0%
will just add method calls so I do not
 

00:08:34.899 --> 00:08:38.069 align:start position:0%
will just add method calls so I do not
increase<00:08:35.169><c> socratic</c><00:08:36.099><c> complexity</c><00:08:36.640><c> and</c><00:08:37.000><c> all</c><00:08:37.839><c> the</c>

00:08:38.069 --> 00:08:38.079 align:start position:0%
increase socratic complexity and all the
 

00:08:38.079 --> 00:08:41.040 align:start position:0%
increase socratic complexity and all the
code<00:08:38.320><c> that</c><00:08:38.919><c> is</c><00:08:39.039><c> going</c><00:08:39.190><c> to</c><00:08:39.459><c> make</c><00:08:39.729><c> my</c><00:08:40.570><c> competitor</c>

00:08:41.040 --> 00:08:41.050 align:start position:0%
code that is going to make my competitor
 

00:08:41.050 --> 00:08:42.870 align:start position:0%
code that is going to make my competitor
robust<00:08:41.440><c> that</c><00:08:41.979><c> is</c><00:08:42.130><c> all</c><00:08:42.310><c> the</c><00:08:42.430><c> code</c><00:08:42.579><c> that</c><00:08:42.760><c> will</c>

00:08:42.870 --> 00:08:42.880 align:start position:0%
robust that is all the code that will
 

00:08:42.880 --> 00:08:44.250 align:start position:0%
robust that is all the code that will
check<00:08:43.089><c> for</c><00:08:43.300><c> null</c><00:08:43.390><c> pointer</c><00:08:43.719><c> exception</c><00:08:44.140><c> and</c>

00:08:44.250 --> 00:08:44.260 align:start position:0%
check for null pointer exception and
 

00:08:44.260 --> 00:08:48.480 align:start position:0%
check for null pointer exception and
stuff<00:08:44.470><c> is</c><00:08:45.130><c> pushed</c><00:08:45.640><c> in</c><00:08:46.360><c> the</c><00:08:46.810><c> API</c><00:08:47.110><c> code</c><00:08:47.470><c> does</c><00:08:48.310><c> not</c>

00:08:48.480 --> 00:08:48.490 align:start position:0%
stuff is pushed in the API code does not
 

00:08:48.490 --> 00:08:51.060 align:start position:0%
stuff is pushed in the API code does not
leak<00:08:48.760><c> in</c><00:08:49.209><c> my</c><00:08:49.240><c> application</c><00:08:50.050><c> code</c><00:08:50.260><c> so</c><00:08:50.800><c> it</c><00:08:50.890><c> does</c>

00:08:51.060 --> 00:08:51.070 align:start position:0%
leak in my application code so it does
 

00:08:51.070 --> 00:08:53.939 align:start position:0%
leak in my application code so it does
not<00:08:51.190><c> make</c><00:08:51.430><c> my</c><00:08:51.640><c> application</c><00:08:52.180><c> code</c><00:08:52.360><c> any</c><00:08:52.959><c> any</c>

00:08:53.939 --> 00:08:53.949 align:start position:0%
not make my application code any any
 

00:08:53.949 --> 00:08:58.680 align:start position:0%
not make my application code any any
more<00:08:54.130><c> complex</c><00:08:55.380><c> all</c><00:08:56.380><c> right</c><00:08:56.910><c> so</c><00:08:57.910><c> let</c><00:08:58.240><c> us</c><00:08:58.270><c> take</c><00:08:58.630><c> a</c>

00:08:58.680 --> 00:08:58.690 align:start position:0%
more complex all right so let us take a
 

00:08:58.690 --> 00:09:00.780 align:start position:0%
more complex all right so let us take a
closer<00:08:58.959><c> look</c><00:08:59.079><c> at</c><00:08:59.440><c> the</c><00:08:59.589><c> comparator</c><00:09:00.100><c> basically</c>

00:09:00.780 --> 00:09:00.790 align:start position:0%
closer look at the comparator basically
 

00:09:00.790 --> 00:09:03.000 align:start position:0%
closer look at the comparator basically
what<00:09:00.940><c> we</c><00:09:01.120><c> want</c><00:09:01.300><c> to</c><00:09:01.420><c> do</c><00:09:01.570><c> is</c><00:09:01.839><c> to</c><00:09:02.140><c> sort</c><00:09:02.470><c> the</c>

00:09:03.000 --> 00:09:03.010 align:start position:0%
what we want to do is to sort the
 

00:09:03.010 --> 00:09:05.220 align:start position:0%
what we want to do is to sort the
strings<00:09:03.459><c> of</c><00:09:03.640><c> a</c><00:09:04.089><c> list</c><00:09:04.660><c> of</c><00:09:04.810><c> strings</c><00:09:05.050><c> of</c>

00:09:05.220 --> 00:09:05.230 align:start position:0%
strings of a list of strings of
 

00:09:05.230 --> 00:09:07.410 align:start position:0%
strings of a list of strings of
character<00:09:05.680><c> so</c><00:09:05.890><c> that</c><00:09:06.459><c> we</c><00:09:06.820><c> can</c><00:09:07.000><c> create</c><00:09:07.269><c> a</c>

00:09:07.410 --> 00:09:07.420 align:start position:0%
character so that we can create a
 

00:09:07.420 --> 00:09:09.840 align:start position:0%
character so that we can create a
comparator<00:09:08.079><c> of</c><00:09:08.140><c> string</c><00:09:08.500><c> here</c><00:09:09.190><c> I'm</c><00:09:09.279><c> sorting</c><00:09:09.730><c> my</c>

00:09:09.840 --> 00:09:09.850 align:start position:0%
comparator of string here I'm sorting my
 

00:09:09.850 --> 00:09:12.360 align:start position:0%
comparator of string here I'm sorting my
strings<00:09:10.300><c> using</c><00:09:11.019><c> their</c><00:09:11.290><c> length</c><00:09:11.500><c> instead</c><00:09:12.220><c> of</c>

00:09:12.360 --> 00:09:12.370 align:start position:0%
strings using their length instead of
 

00:09:12.370 --> 00:09:14.280 align:start position:0%
strings using their length instead of
the<00:09:12.519><c> alphabetical</c><00:09:13.420><c> order</c><00:09:13.660><c> person</c><00:09:14.140><c> the</c>

00:09:14.280 --> 00:09:14.290 align:start position:0%
the alphabetical order person the
 

00:09:14.290 --> 00:09:17.610 align:start position:0%
the alphabetical order person the
natural<00:09:14.709><c> order</c><00:09:15.060><c> okay</c><00:09:16.079><c> so</c><00:09:17.079><c> I</c><00:09:17.140><c> can</c><00:09:17.290><c> create</c><00:09:17.500><c> a</c>

00:09:17.610 --> 00:09:17.620 align:start position:0%
natural order okay so I can create a
 

00:09:17.620 --> 00:09:19.550 align:start position:0%
natural order okay so I can create a
combat<00:09:17.890><c> so</c><00:09:18.010><c> this</c><00:09:18.160><c> is</c><00:09:18.310><c> the</c><00:09:18.490><c> Java</c>

00:09:19.550 --> 00:09:19.560 align:start position:0%
combat so this is the Java
 

00:09:19.560 --> 00:09:22.160 align:start position:0%
combat so this is the Java
five<00:09:19.950><c> have</c><00:09:20.220><c> to</c><00:09:20.340><c> Java</c><00:09:20.550><c> 7</c><00:09:20.820><c> way</c><00:09:21.420><c> of</c><00:09:21.630><c> writing</c><00:09:21.900><c> it</c>

00:09:22.160 --> 00:09:22.170 align:start position:0%
five have to Java 7 way of writing it
 

00:09:22.170 --> 00:09:25.370 align:start position:0%
five have to Java 7 way of writing it
and<00:09:22.910><c> what</c><00:09:23.910><c> do</c><00:09:24.060><c> I</c><00:09:24.150><c> do</c><00:09:24.210><c> with</c><00:09:24.570><c> this</c><00:09:24.750><c> comparator</c>

00:09:25.370 --> 00:09:25.380 align:start position:0%
and what do I do with this comparator
 

00:09:25.380 --> 00:09:28.490 align:start position:0%
and what do I do with this comparator
the<00:09:26.420><c> in</c><00:09:27.420><c> a</c><00:09:27.540><c> nutshell</c><00:09:27.720><c> what</c><00:09:27.990><c> I</c><00:09:28.020><c> want</c><00:09:28.230><c> to</c><00:09:28.290><c> do</c><00:09:28.410><c> is</c>

00:09:28.490 --> 00:09:28.500 align:start position:0%
the in a nutshell what I want to do is
 

00:09:28.500 --> 00:09:30.620 align:start position:0%
the in a nutshell what I want to do is
to<00:09:28.620><c> pass</c><00:09:28.860><c> this</c><00:09:29.130><c> comparator</c><00:09:29.670><c> to</c><00:09:29.700><c> salt</c><00:09:30.150><c> methods</c>

00:09:30.620 --> 00:09:30.630 align:start position:0%
to pass this comparator to salt methods
 

00:09:30.630 --> 00:09:33.170 align:start position:0%
to pass this comparator to salt methods
so<00:09:31.020><c> I've</c><00:09:31.110><c> got</c><00:09:31.290><c> two</c><00:09:31.529><c> in</c><00:09:31.920><c> the</c><00:09:32.100><c> JDK</c><00:09:32.520><c> arrays</c><00:09:33.000><c> dot</c>

00:09:33.170 --> 00:09:33.180 align:start position:0%
so I've got two in the JDK arrays dot
 

00:09:33.180 --> 00:09:36.079 align:start position:0%
so I've got two in the JDK arrays dot
sort<00:09:33.240><c> and</c><00:09:33.630><c> Corrections</c><00:09:34.140><c> that</c><00:09:34.290><c> sort</c><00:09:34.560><c> and</c><00:09:35.089><c> those</c>

00:09:36.079 --> 00:09:36.089 align:start position:0%
sort and Corrections that sort and those
 

00:09:36.089 --> 00:09:38.480 align:start position:0%
sort and Corrections that sort and those
sort<00:09:36.570><c> method</c><00:09:36.750><c> are</c><00:09:37.230><c> going</c><00:09:37.589><c> to</c><00:09:37.770><c> use</c><00:09:38.010><c> this</c>

00:09:38.480 --> 00:09:38.490 align:start position:0%
sort method are going to use this
 

00:09:38.490 --> 00:09:42.410 align:start position:0%
sort method are going to use this
comparator<00:09:39.150><c> later</c><00:09:39.990><c> on</c><00:09:40.279><c> what</c><00:09:41.279><c> did</c><00:09:41.460><c> we</c><00:09:41.610><c> do</c><00:09:41.760><c> we</c>

00:09:42.410 --> 00:09:42.420 align:start position:0%
comparator later on what did we do we
 

00:09:42.420 --> 00:09:45.290 align:start position:0%
comparator later on what did we do we
just<00:09:42.690><c> passed</c><00:09:43.080><c> the</c><00:09:43.830><c> piece</c><00:09:44.040><c> of</c><00:09:44.190><c> code</c><00:09:44.430><c> as</c><00:09:45.240><c> a</c>

00:09:45.290 --> 00:09:45.300 align:start position:0%
just passed the piece of code as a
 

00:09:45.300 --> 00:09:48.400 align:start position:0%
just passed the piece of code as a
parameter<00:09:46.140><c> to</c><00:09:46.380><c> a</c><00:09:46.680><c> method</c><00:09:47.010><c> and</c><00:09:47.240><c> this</c><00:09:48.240><c> method</c>

00:09:48.400 --> 00:09:48.410 align:start position:0%
parameter to a method and this method
 

00:09:48.410 --> 00:09:51.470 align:start position:0%
parameter to a method and this method
here<00:09:49.410><c> in</c><00:09:49.529><c> this</c><00:09:49.680><c> case</c><00:09:49.890><c> the</c><00:09:50.040><c> salt</c><00:09:50.339><c> method</c><00:09:50.550><c> we'll</c>

00:09:51.470 --> 00:09:51.480 align:start position:0%
here in this case the salt method we'll
 

00:09:51.480 --> 00:09:54.470 align:start position:0%
here in this case the salt method we'll
be<00:09:51.660><c> using</c><00:09:51.839><c> that</c><00:09:52.170><c> code</c><00:09:52.440><c> later</c><00:09:53.220><c> on</c><00:09:53.460><c> and</c><00:09:54.089><c> several</c>

00:09:54.470 --> 00:09:54.480 align:start position:0%
be using that code later on and several
 

00:09:54.480 --> 00:09:57.769 align:start position:0%
be using that code later on and several
times<00:09:54.830><c> right</c><00:09:55.830><c> and</c><00:09:56.100><c> why</c><00:09:56.610><c> did</c><00:09:56.910><c> I</c><00:09:56.940><c> use</c><00:09:57.360><c> an</c>

00:09:57.769 --> 00:09:57.779 align:start position:0%
times right and why did I use an
 

00:09:57.779 --> 00:10:00.610 align:start position:0%
times right and why did I use an
instance<00:09:58.500><c> of</c><00:09:58.800><c> an</c><00:09:59.070><c> animist</c><00:09:59.550><c> class</c><00:09:59.730><c> to</c><00:09:59.880><c> do</c><00:09:59.970><c> that</c>

00:10:00.610 --> 00:10:00.620 align:start position:0%
instance of an animist class to do that
 

00:10:00.620 --> 00:10:03.170 align:start position:0%
instance of an animist class to do that
well<00:10:01.620><c> just</c><00:10:01.950><c> because</c><00:10:02.250><c> this</c><00:10:02.400><c> is</c><00:10:02.580><c> the</c><00:10:02.610><c> only</c><00:10:02.880><c> way</c><00:10:03.150><c> I</c>

00:10:03.170 --> 00:10:03.180 align:start position:0%
well just because this is the only way I
 

00:10:03.180 --> 00:10:05.990 align:start position:0%
well just because this is the only way I
have<00:10:03.540><c> pass</c><00:10:04.170><c> code</c><00:10:04.470><c> as</c><00:10:04.589><c> a</c><00:10:04.620><c> parameter</c><00:10:04.920><c> in</c><00:10:05.400><c> Java</c><00:10:05.640><c> 7</c>

00:10:05.990 --> 00:10:06.000 align:start position:0%
have pass code as a parameter in Java 7
 

00:10:06.000 --> 00:10:08.660 align:start position:0%
have pass code as a parameter in Java 7
if<00:10:06.660><c> I</c><00:10:06.839><c> want</c><00:10:07.050><c> to</c><00:10:07.170><c> pass</c><00:10:07.350><c> code</c><00:10:07.589><c> as</c><00:10:07.740><c> a</c><00:10:07.770><c> parameter</c><00:10:08.010><c> in</c>

00:10:08.660 --> 00:10:08.670 align:start position:0%
if I want to pass code as a parameter in
 

00:10:08.670 --> 00:10:11.269 align:start position:0%
if I want to pass code as a parameter in
Java<00:10:08.880><c> 7</c><00:10:09.060><c> I</c><00:10:09.450><c> have</c><00:10:10.080><c> to</c><00:10:10.230><c> use</c><00:10:10.440><c> an</c><00:10:10.680><c> instance</c><00:10:11.130><c> of</c>

00:10:11.269 --> 00:10:11.279 align:start position:0%
Java 7 I have to use an instance of
 

00:10:11.279 --> 00:10:13.010 align:start position:0%
Java 7 I have to use an instance of
anonymous<00:10:11.670><c> class</c><00:10:11.880><c> I</c><00:10:12.120><c> do</c><00:10:12.360><c> not</c><00:10:12.570><c> have</c><00:10:12.720><c> any</c><00:10:12.900><c> other</c>

00:10:13.010 --> 00:10:13.020 align:start position:0%
anonymous class I do not have any other
 

00:10:13.020 --> 00:10:17.480 align:start position:0%
anonymous class I do not have any other
solutions<00:10:13.620><c> to</c><00:10:13.680><c> do</c><00:10:13.890><c> that</c><00:10:15.560><c> with</c><00:10:16.560><c> lambda</c><00:10:16.770><c> Azam</c><00:10:17.220><c> I</c>

00:10:17.480 --> 00:10:17.490 align:start position:0%
solutions to do that with lambda Azam I
 

00:10:17.490 --> 00:10:20.780 align:start position:0%
solutions to do that with lambda Azam I
can<00:10:18.450><c> pass</c><00:10:18.720><c> this</c><00:10:18.960><c> code</c><00:10:19.230><c> precisely</c><00:10:20.220><c> as</c><00:10:20.490><c> a</c><00:10:20.520><c> lambda</c>

00:10:20.780 --> 00:10:20.790 align:start position:0%
can pass this code precisely as a lambda
 

00:10:20.790 --> 00:10:23.870 align:start position:0%
can pass this code precisely as a lambda
expression<00:10:21.390><c> so</c><00:10:21.630><c> lambda</c><00:10:21.870><c> is</c><00:10:22.140><c> basically</c><00:10:22.650><c> a</c><00:10:23.040><c> way</c>

00:10:23.870 --> 00:10:23.880 align:start position:0%
expression so lambda is basically a way
 

00:10:23.880 --> 00:10:27.380 align:start position:0%
expression so lambda is basically a way
to<00:10:23.910><c> rewrite</c><00:10:24.450><c> this</c><00:10:25.230><c> comparator</c><00:10:25.790><c> how</c><00:10:26.790><c> is</c><00:10:27.150><c> the</c>

00:10:27.380 --> 00:10:27.390 align:start position:0%
to rewrite this comparator how is the
 

00:10:27.390 --> 00:10:29.690 align:start position:0%
to rewrite this comparator how is the
lambda<00:10:27.570><c> returned</c><00:10:28.380><c> now</c><00:10:28.530><c> I</c><00:10:28.830><c> just</c><00:10:29.220><c> need</c><00:10:29.640><c> to</c>

00:10:29.690 --> 00:10:29.700 align:start position:0%
lambda returned now I just need to
 

00:10:29.700 --> 00:10:31.400 align:start position:0%
lambda returned now I just need to
consider<00:10:30.210><c> that</c><00:10:30.450><c> I</c><00:10:30.720><c> have</c><00:10:30.810><c> a</c><00:10:30.990><c> block</c><00:10:31.260><c> of</c>

00:10:31.400 --> 00:10:31.410 align:start position:0%
consider that I have a block of
 

00:10:31.410 --> 00:10:34.310 align:start position:0%
consider that I have a block of
parameter<00:10:31.920><c> to</c><00:10:32.130><c> the</c><00:10:32.220><c> method</c><00:10:32.610><c> of</c><00:10:33.390><c> this</c>

00:10:34.310 --> 00:10:34.320 align:start position:0%
parameter to the method of this
 

00:10:34.320 --> 00:10:37.340 align:start position:0%
parameter to the method of this
comparator<00:10:34.860><c> here</c><00:10:35.700><c> the</c><00:10:35.940><c> two</c><00:10:36.120><c> strings</c><00:10:36.450><c> and</c><00:10:37.170><c> a</c>

00:10:37.340 --> 00:10:37.350 align:start position:0%
comparator here the two strings and a
 

00:10:37.350 --> 00:10:39.620 align:start position:0%
comparator here the two strings and a
return<00:10:37.710><c> statement</c><00:10:37.920><c> and</c><00:10:38.460><c> the</c><00:10:39.300><c> lambda</c><00:10:39.480><c> is</c>

00:10:39.620 --> 00:10:39.630 align:start position:0%
return statement and the lambda is
 

00:10:39.630 --> 00:10:42.500 align:start position:0%
return statement and the lambda is
bigger<00:10:39.990><c> as</c><00:10:40.410><c> that</c><00:10:40.710><c> I</c><00:10:40.950><c> just</c><00:10:41.550><c> copy/paste</c><00:10:42.060><c> the</c>

00:10:42.500 --> 00:10:42.510 align:start position:0%
bigger as that I just copy/paste the
 

00:10:42.510 --> 00:10:45.280 align:start position:0%
bigger as that I just copy/paste the
block<00:10:42.720><c> of</c><00:10:42.870><c> parameter</c><00:10:43.580><c> draw</c><00:10:44.580><c> this</c><00:10:44.850><c> little</c>

00:10:45.280 --> 00:10:45.290 align:start position:0%
block of parameter draw this little
 

00:10:45.290 --> 00:10:50.690 align:start position:0%
block of parameter draw this little
ASCII<00:10:46.290><c> art</c><00:10:46.580><c> a</c><00:10:47.580><c> row</c><00:10:48.740><c> using</c><00:10:49.740><c> it</c><00:10:49.890><c> their</c><00:10:50.130><c> sign</c><00:10:50.430><c> and</c>

00:10:50.690 --> 00:10:50.700 align:start position:0%
ASCII art a row using it their sign and
 

00:10:50.700 --> 00:10:53.990 align:start position:0%
ASCII art a row using it their sign and
greater<00:10:51.270><c> than</c><00:10:51.360><c> sign</c><00:10:51.810><c> this</c><00:10:52.290><c> is</c><00:10:52.500><c> just</c><00:10:53.339><c> LG</c><00:10:53.730><c> about</c>

00:10:53.990 --> 00:10:54.000 align:start position:0%
greater than sign this is just LG about
 

00:10:54.000 --> 00:10:57.170 align:start position:0%
greater than sign this is just LG about
the<00:10:54.210><c> old</c><00:10:54.360><c> days</c><00:10:54.540><c> of</c><00:10:54.750><c> computing</c><00:10:55.380><c> right</c><00:10:55.770><c> and</c><00:10:56.180><c> push</c>

00:10:57.170 --> 00:10:57.180 align:start position:0%
the old days of computing right and push
 

00:10:57.180 --> 00:11:00.500 align:start position:0%
the old days of computing right and push
the<00:10:57.360><c> return</c><00:10:57.660><c> statement</c><00:10:58.820><c> this</c><00:10:59.820><c> is</c><00:10:59.880><c> the</c><00:11:00.060><c> way</c><00:11:00.360><c> and</c>

00:11:00.500 --> 00:11:00.510 align:start position:0%
the return statement this is the way and
 

00:11:00.510 --> 00:11:02.000 align:start position:0%
the return statement this is the way and
we're<00:11:00.690><c> going</c><00:11:00.870><c> to</c><00:11:01.020><c> see</c><00:11:01.200><c> many</c><00:11:01.380><c> examples</c><00:11:01.470><c> of</c><00:11:01.950><c> that</c>

00:11:02.000 --> 00:11:02.010 align:start position:0%
we're going to see many examples of that
 

00:11:02.010 --> 00:11:06.550 align:start position:0%
we're going to see many examples of that
this<00:11:02.430><c> is</c><00:11:02.640><c> how</c><00:11:03.120><c> we</c><00:11:03.180><c> write</c><00:11:03.540><c> lambdas</c><00:11:03.990><c> in</c><00:11:04.530><c> general</c>

00:11:06.550 --> 00:11:06.560 align:start position:0%
this is how we write lambdas in general
 

00:11:06.560 --> 00:11:10.940 align:start position:0%
this is how we write lambdas in general
the<00:11:07.560><c> comparator</c><00:11:08.130><c> interface</c><00:11:09.350><c> becomes</c><00:11:10.350><c> in</c><00:11:10.740><c> Java</c>

00:11:10.940 --> 00:11:10.950 align:start position:0%
the comparator interface becomes in Java
 

00:11:10.950 --> 00:11:13.550 align:start position:0%
the comparator interface becomes in Java
8<00:11:11.250><c> what</c><00:11:11.850><c> is</c><00:11:11.970><c> called</c><00:11:12.209><c> a</c><00:11:12.360><c> functional</c><00:11:12.959><c> interface</c>

00:11:13.550 --> 00:11:13.560 align:start position:0%
8 what is called a functional interface
 

00:11:13.560 --> 00:11:15.890 align:start position:0%
8 what is called a functional interface
what<00:11:14.190><c> is</c><00:11:14.310><c> a</c><00:11:14.339><c> functional</c><00:11:14.910><c> interface</c><00:11:15.360><c> it's</c><00:11:15.690><c> an</c>

00:11:15.890 --> 00:11:15.900 align:start position:0%
what is a functional interface it's an
 

00:11:15.900 --> 00:11:18.350 align:start position:0%
what is a functional interface it's an
interface<00:11:16.410><c> that</c><00:11:16.650><c> has</c><00:11:16.709><c> only</c><00:11:17.190><c> one</c><00:11:17.610><c> abstract</c>

00:11:18.350 --> 00:11:18.360 align:start position:0%
interface that has only one abstract
 

00:11:18.360 --> 00:11:20.900 align:start position:0%
interface that has only one abstract
method<00:11:18.750><c> this</c><00:11:19.260><c> is</c><00:11:19.320><c> the</c><00:11:19.680><c> most</c><00:11:20.430><c> simple</c>

00:11:20.900 --> 00:11:20.910 align:start position:0%
method this is the most simple
 

00:11:20.910 --> 00:11:22.550 align:start position:0%
method this is the most simple
definition<00:11:21.480><c> of</c><00:11:21.570><c> what</c><00:11:22.050><c> a</c><00:11:22.080><c> functional</c>

00:11:22.550 --> 00:11:22.560 align:start position:0%
definition of what a functional
 

00:11:22.560 --> 00:11:25.449 align:start position:0%
definition of what a functional
interface<00:11:23.010><c> is</c><00:11:23.450><c> the</c><00:11:24.450><c> functional</c><00:11:24.990><c> interface</c>

00:11:25.449 --> 00:11:25.459 align:start position:0%
interface is the functional interface
 

00:11:25.459 --> 00:11:29.180 align:start position:0%
interface is the functional interface
may<00:11:26.459><c> be</c><00:11:26.520><c> annotated</c><00:11:27.390><c> with</c><00:11:27.839><c> this</c><00:11:28.190><c> functional</c>

00:11:29.180 --> 00:11:29.190 align:start position:0%
may be annotated with this functional
 

00:11:29.190 --> 00:11:31.670 align:start position:0%
may be annotated with this functional
interface<00:11:29.640><c> annotation</c><00:11:30.420><c> it's</c><00:11:31.140><c> not</c><00:11:31.380><c> mandatory</c>

00:11:31.670 --> 00:11:31.680 align:start position:0%
interface annotation it's not mandatory
 

00:11:31.680 --> 00:11:32.750 align:start position:0%
interface annotation it's not mandatory
it<00:11:32.190><c> sits</c>

00:11:32.750 --> 00:11:32.760 align:start position:0%
it sits
 

00:11:32.760 --> 00:11:35.930 align:start position:0%
it sits
optional<00:11:33.410><c> you</c><00:11:34.410><c> don't</c><00:11:34.440><c> have</c><00:11:34.650><c> to</c><00:11:34.920><c> do</c><00:11:35.040><c> it</c><00:11:35.160><c> if</c><00:11:35.760><c> you</c>

00:11:35.930 --> 00:11:35.940 align:start position:0%
optional you don't have to do it if you
 

00:11:35.940 --> 00:11:37.880 align:start position:0%
optional you don't have to do it if you
do<00:11:36.090><c> it</c><00:11:36.120><c> the</c><00:11:36.450><c> compiler</c><00:11:36.960><c> will</c><00:11:37.230><c> tell</c><00:11:37.500><c> you</c><00:11:37.680><c> at</c>

00:11:37.880 --> 00:11:37.890 align:start position:0%
do it the compiler will tell you at
 

00:11:37.890 --> 00:11:40.610 align:start position:0%
do it the compiler will tell you at
compile<00:11:38.550><c> time</c><00:11:38.580><c> that</c><00:11:39.300><c> is</c><00:11:39.450><c> in</c><00:11:39.690><c> your</c><00:11:39.900><c> IDE</c><00:11:40.260><c> and</c>

00:11:40.610 --> 00:11:40.620 align:start position:0%
compile time that is in your IDE and
 

00:11:40.620 --> 00:11:43.160 align:start position:0%
compile time that is in your IDE and
we'll<00:11:40.980><c> see</c><00:11:41.130><c> that</c><00:11:41.310><c> if</c><00:11:41.940><c> this</c><00:11:42.330><c> annotated</c>

00:11:43.160 --> 00:11:43.170 align:start position:0%
we'll see that if this annotated
 

00:11:43.170 --> 00:11:46.040 align:start position:0%
we'll see that if this annotated
interface<00:11:43.620><c> is</c><00:11:43.830><c> indeed</c><00:11:44.340><c> functional</c><00:11:44.880><c> or</c><00:11:45.000><c> not</c><00:11:45.180><c> if</c>

00:11:46.040 --> 00:11:46.050 align:start position:0%
interface is indeed functional or not if
 

00:11:46.050 --> 00:11:48.740 align:start position:0%
interface is indeed functional or not if
you<00:11:46.230><c> don't</c><00:11:46.410><c> do</c><00:11:46.590><c> it</c><00:11:46.970><c> then</c><00:11:47.970><c> the</c><00:11:48.240><c> compiler</c><00:11:48.540><c> will</c>

00:11:48.740 --> 00:11:48.750 align:start position:0%
you don't do it then the compiler will
 

00:11:48.750 --> 00:11:50.750 align:start position:0%
you don't do it then the compiler will
tell<00:11:48.990><c> you</c><00:11:49.110><c> if</c><00:11:49.380><c> you</c><00:11:49.650><c> try</c><00:11:49.980><c> to</c><00:11:50.040><c> implement</c><00:11:50.400><c> this</c>

00:11:50.750 --> 00:11:50.760 align:start position:0%
tell you if you try to implement this
 

00:11:50.760 --> 00:11:53.000 align:start position:0%
tell you if you try to implement this
interface<00:11:51.090><c> using</c><00:11:51.600><c> a</c><00:11:51.690><c> lambda</c><00:11:51.870><c> hey</c><00:11:52.470><c> you</c><00:11:52.530><c> can</c><00:11:52.860><c> do</c>

00:11:53.000 --> 00:11:53.010 align:start position:0%
interface using a lambda hey you can do
 

00:11:53.010 --> 00:11:55.160 align:start position:0%
interface using a lambda hey you can do
that<00:11:53.160><c> because</c><00:11:54.000><c> this</c><00:11:54.330><c> is</c><00:11:54.480><c> not</c><00:11:54.600><c> a</c><00:11:54.660><c> functional</c>

00:11:55.160 --> 00:11:55.170 align:start position:0%
that because this is not a functional
 

00:11:55.170 --> 00:11:57.140 align:start position:0%
that because this is not a functional
interface<00:11:55.620><c> so</c><00:11:55.920><c> it's</c><00:11:56.190><c> just</c><00:11:56.400><c> something</c><00:11:56.670><c> that</c><00:11:57.000><c> is</c>

00:11:57.140 --> 00:11:57.150 align:start position:0%
interface so it's just something that is
 

00:11:57.150 --> 00:11:59.690 align:start position:0%
interface so it's just something that is
here<00:11:57.330><c> to</c><00:11:57.510><c> help</c><00:11:57.750><c> you</c><00:11:57.900><c> to</c><00:11:58.380><c> helpers</c><00:11:58.740><c> it's</c><00:11:59.490><c> not</c>

00:11:59.690 --> 00:11:59.700 align:start position:0%
here to help you to helpers it's not
 

00:11:59.700 --> 00:12:02.120 align:start position:0%
here to help you to helpers it's not
something<00:12:00.060><c> that</c><00:12:00.090><c> is</c><00:12:00.330><c> mandatory</c><00:12:00.830><c> by</c><00:12:01.830><c> the</c><00:12:01.890><c> way</c>

00:12:02.120 --> 00:12:02.130 align:start position:0%
something that is mandatory by the way
 

00:12:02.130 --> 00:12:05.740 align:start position:0%
something that is mandatory by the way
since<00:12:02.640><c> it</c><00:12:03.180><c> is</c><00:12:03.450><c> not</c><00:12:03.630><c> mandatory</c><00:12:03.870><c> it</c><00:12:04.530><c> is</c><00:12:04.830><c> also</c><00:12:05.040><c> a</c>

00:12:05.740 --> 00:12:05.750 align:start position:0%
since it is not mandatory it is also a
 

00:12:05.750 --> 00:12:10.910 align:start position:0%
since it is not mandatory it is also a
way<00:12:07.610><c> to</c><00:12:08.610><c> take</c><00:12:09.030><c> your</c><00:12:09.180><c> old</c><00:12:09.480><c> Java</c><00:12:09.870><c> let</c><00:12:10.560><c> us</c><00:12:10.680><c> save</c>

00:12:10.910 --> 00:12:10.920 align:start position:0%
way to take your old Java let us save
 

00:12:10.920 --> 00:12:14.870 align:start position:0%
way to take your old Java let us save
five<00:12:11.250><c> code</c><00:12:12.060><c> in</c><00:12:12.930><c> jars</c><00:12:13.290><c> and</c><00:12:13.580><c> implement</c><00:12:14.580><c> it</c><00:12:14.700><c> using</c>

00:12:14.870 --> 00:12:14.880 align:start position:0%
five code in jars and implement it using
 

00:12:14.880 --> 00:12:16.550 align:start position:0%
five code in jars and implement it using
lambda<00:12:15.240><c> expression</c><00:12:15.840><c> in</c><00:12:15.990><c> the</c><00:12:16.110><c> Java</c><00:12:16.290><c> eight</c>

00:12:16.550 --> 00:12:16.560 align:start position:0%
lambda expression in the Java eight
 

00:12:16.560 --> 00:12:18.860 align:start position:0%
lambda expression in the Java eight
parts<00:12:16.890><c> of</c><00:12:16.980><c> your</c><00:12:17.100><c> application</c><00:12:17.640><c> without</c><00:12:18.240><c> having</c>

00:12:18.860 --> 00:12:18.870 align:start position:0%
parts of your application without having
 

00:12:18.870 --> 00:12:22.910 align:start position:0%
parts of your application without having
to<00:12:19.020><c> recombine</c><00:12:19.560><c> those</c><00:12:20.270><c> so</c><00:12:21.270><c> it's</c><00:12:21.420><c> also</c><00:12:21.920><c> for</c>

00:12:22.910 --> 00:12:22.920 align:start position:0%
to recombine those so it's also for
 

00:12:22.920 --> 00:12:27.200 align:start position:0%
to recombine those so it's also for
backward<00:12:23.250><c> compatibility</c><00:12:23.820><c> reasons</c><00:12:25.820><c> demo</c><00:12:26.820><c> time</c>

00:12:27.200 --> 00:12:27.210 align:start position:0%
backward compatibility reasons demo time
 

00:12:27.210 --> 00:12:31.160 align:start position:0%
backward compatibility reasons demo time
great<00:12:27.540><c> I</c><00:12:28.880><c> love</c><00:12:29.880><c> demos</c><00:12:30.180><c> but</c><00:12:30.600><c> I</c><00:12:30.750><c> need</c><00:12:30.900><c> my</c><00:12:30.990><c> glasses</c>

00:12:31.160 --> 00:12:31.170 align:start position:0%
great I love demos but I need my glasses
 

00:12:31.170 --> 00:12:35.270 align:start position:0%
great I love demos but I need my glasses
okay<00:12:31.830><c> it's</c><00:12:32.040><c> the</c><00:12:32.190><c> phone</c><00:12:32.400><c> big</c><00:12:32.580><c> enough</c><00:12:33.170><c> yeah</c><00:12:34.280><c> if</c>

00:12:35.270 --> 00:12:35.280 align:start position:0%
okay it's the phone big enough yeah if
 

00:12:35.280 --> 00:12:37.820 align:start position:0%
okay it's the phone big enough yeah if
you<00:12:35.490><c> if</c><00:12:35.610><c> you</c><00:12:35.700><c> can't</c><00:12:35.910><c> read</c><00:12:36.300><c> the</c><00:12:36.420><c> code</c><00:12:36.600><c> just</c><00:12:36.870><c> just</c>

00:12:37.820 --> 00:12:37.830 align:start position:0%
you if you can't read the code just just
 

00:12:37.830 --> 00:12:43.370 align:start position:0%
you if you can't read the code just just
tell<00:12:37.950><c> me</c><00:12:38.070><c> I</c><00:12:38.100><c> can</c><00:12:38.370><c> yeah</c><00:12:39.410><c> you</c><00:12:40.410><c> do</c><00:12:40.530><c> that</c><00:12:42.260><c> while</c><00:12:43.260><c> I'm</c>

00:12:43.370 --> 00:12:43.380 align:start position:0%
tell me I can yeah you do that while I'm
 

00:12:43.380 --> 00:12:45.650 align:start position:0%
tell me I can yeah you do that while I'm
doing<00:12:43.650><c> that</c><00:12:43.680><c> if</c><00:12:44.280><c> you</c><00:12:44.790><c> can</c><00:12:44.970><c> raise</c><00:12:45.150><c> your</c><00:12:45.210><c> hand</c><00:12:45.540><c> if</c>

00:12:45.650 --> 00:12:45.660 align:start position:0%
doing that if you can raise your hand if
 

00:12:45.660 --> 00:12:47.510 align:start position:0%
doing that if you can raise your hand if
you<00:12:45.750><c> have</c><00:12:45.870><c> an</c><00:12:45.990><c> empty</c><00:12:46.140><c> seat</c><00:12:46.440><c> near</c><00:12:47.220><c> you</c><00:12:47.370><c> because</c>

00:12:47.510 --> 00:12:47.520 align:start position:0%
you have an empty seat near you because
 

00:12:47.520 --> 00:12:55.230 align:start position:0%
you have an empty seat near you because
there<00:12:47.790><c> are</c><00:12:47.850><c> people</c>

00:12:55.230 --> 00:12:55.240 align:start position:0%
 
 

00:12:55.240 --> 00:12:59.700 align:start position:0%
 
is<00:12:56.240><c> it</c><00:12:56.360><c> better</c><00:12:56.720><c> yeah</c><00:12:57.470><c> is</c><00:12:57.710><c> it</c><00:12:57.890><c> now</c><00:12:58.010><c> okay</c><00:12:59.000><c> fine</c><00:12:59.330><c> so</c>

00:12:59.700 --> 00:12:59.710 align:start position:0%
is it better yeah is it now okay fine so
 

00:12:59.710 --> 00:13:08.470 align:start position:0%
is it better yeah is it now okay fine so
this<00:13:00.710><c> is</c><00:13:00.860><c> a</c><00:13:00.890><c> list</c><00:13:01.780><c> okay</c><00:13:03.970><c> once</c><00:13:04.970><c> a</c><00:13:05.180><c> list</c><00:13:07.240><c> and</c><00:13:08.240><c> we</c>

00:13:08.470 --> 00:13:08.480 align:start position:0%
this is a list okay once a list and we
 

00:13:08.480 --> 00:13:16.000 align:start position:0%
this is a list okay once a list and we
are<00:13:08.570><c> going</c><00:13:08.720><c> to</c><00:13:08.900><c> use</c><00:13:10.450><c> this</c><00:13:12.460><c> this</c><00:13:14.620><c> new</c><00:13:15.620><c> for</c><00:13:15.890><c> each</c>

00:13:16.000 --> 00:13:16.010 align:start position:0%
are going to use this this new for each
 

00:13:16.010 --> 00:13:18.790 align:start position:0%
are going to use this this new for each
method<00:13:16.670><c> defined</c><00:13:17.630><c> on</c><00:13:17.780><c> the</c><00:13:17.900><c> interval</c><00:13:17.930><c> interface</c>

00:13:18.790 --> 00:13:18.800 align:start position:0%
method defined on the interval interface
 

00:13:18.800 --> 00:13:22.180 align:start position:0%
method defined on the interval interface
that<00:13:19.550><c> allows</c><00:13:20.500><c> that</c><00:13:21.500><c> takes</c><00:13:21.740><c> a</c><00:13:21.860><c> long</c><00:13:21.950><c> that</c><00:13:22.130><c> that</c>

00:13:22.180 --> 00:13:22.190 align:start position:0%
that allows that takes a long that that
 

00:13:22.190 --> 00:13:23.830 align:start position:0%
that allows that takes a long that that
is<00:13:22.460><c> going</c><00:13:22.640><c> to</c><00:13:22.760><c> be</c><00:13:22.880><c> applied</c><00:13:23.120><c> on</c><00:13:23.330><c> the</c><00:13:23.420><c> list</c><00:13:23.570><c> and</c>

00:13:23.830 --> 00:13:23.840 align:start position:0%
is going to be applied on the list and
 

00:13:23.840 --> 00:13:26.710 align:start position:0%
is going to be applied on the list and
here<00:13:24.290><c> this</c><00:13:24.470><c> for</c><00:13:24.650><c> each</c><00:13:24.770><c> method</c><00:13:24.980><c> takes</c><00:13:25.970><c> a</c><00:13:26.330><c> non</c><00:13:26.600><c> de</c>

00:13:26.710 --> 00:13:26.720 align:start position:0%
here this for each method takes a non de
 

00:13:26.720 --> 00:13:28.420 align:start position:0%
here this for each method takes a non de
expression<00:13:27.170><c> as</c><00:13:27.290><c> a</c><00:13:27.320><c> parameter</c><00:13:27.560><c> and</c><00:13:28.040><c> the</c>

00:13:28.420 --> 00:13:28.430 align:start position:0%
expression as a parameter and the
 

00:13:28.430 --> 00:13:30.730 align:start position:0%
expression as a parameter and the
question<00:13:28.790><c> I'm</c><00:13:28.940><c> asking</c><00:13:29.150><c> myself</c><00:13:29.510><c> is</c><00:13:29.840><c> how</c><00:13:30.320><c> can</c><00:13:30.620><c> I</c>

00:13:30.730 --> 00:13:30.740 align:start position:0%
question I'm asking myself is how can I
 

00:13:30.740 --> 00:13:32.980 align:start position:0%
question I'm asking myself is how can I
write<00:13:30.980><c> this</c><00:13:31.370><c> lambda</c><00:13:31.610><c> expression</c><00:13:31.780><c> this</c><00:13:32.780><c> lambda</c>

00:13:32.980 --> 00:13:32.990 align:start position:0%
write this lambda expression this lambda
 

00:13:32.990 --> 00:13:35.110 align:start position:0%
write this lambda expression this lambda
expression<00:13:33.130><c> -</c><00:13:34.130><c> right</c><00:13:34.280><c> along</c><00:13:34.550><c> the</c><00:13:34.640><c> expression</c>

00:13:35.110 --> 00:13:35.120 align:start position:0%
expression - right along the expression
 

00:13:35.120 --> 00:13:37.120 align:start position:0%
expression - right along the expression
you<00:13:35.240><c> need</c><00:13:35.360><c> to</c><00:13:35.510><c> identify</c><00:13:35.800><c> what</c><00:13:36.800><c> is</c><00:13:36.980><c> the</c>

00:13:37.120 --> 00:13:37.130 align:start position:0%
you need to identify what is the
 

00:13:37.130 --> 00:13:39.580 align:start position:0%
you need to identify what is the
interface<00:13:37.640><c> you</c><00:13:38.090><c> need</c><00:13:38.270><c> to</c><00:13:38.390><c> implement</c><00:13:38.540><c> it</c><00:13:39.410><c> has</c>

00:13:39.580 --> 00:13:39.590 align:start position:0%
interface you need to implement it has
 

00:13:39.590 --> 00:13:41.950 align:start position:0%
interface you need to implement it has
to<00:13:39.770><c> be</c><00:13:39.920><c> a</c><00:13:39.950><c> functional</c><00:13:40.460><c> interface</c><00:13:40.880><c> and</c><00:13:41.180><c> what</c><00:13:41.750><c> is</c>

00:13:41.950 --> 00:13:41.960 align:start position:0%
to be a functional interface and what is
 

00:13:41.960 --> 00:13:44.560 align:start position:0%
to be a functional interface and what is
the<00:13:42.200><c> abstract</c><00:13:42.950><c> method</c><00:13:43.310><c> of</c><00:13:43.520><c> this</c><00:13:43.790><c> interface</c><00:13:44.150><c> so</c>

00:13:44.560 --> 00:13:44.570 align:start position:0%
the abstract method of this interface so
 

00:13:44.570 --> 00:13:47.200 align:start position:0%
the abstract method of this interface so
this<00:13:45.320><c> is</c><00:13:45.500><c> what</c><00:13:45.680><c> I'm</c><00:13:45.770><c> going</c><00:13:45.980><c> to</c><00:13:46.040><c> do</c><00:13:46.220><c> for</c><00:13:46.940><c> that</c><00:13:46.970><c> I</c>

00:13:47.200 --> 00:13:47.210 align:start position:0%
this is what I'm going to do for that I
 

00:13:47.210 --> 00:13:49.080 align:start position:0%
this is what I'm going to do for that I
can<00:13:47.390><c> navigate</c><00:13:47.540><c> to</c><00:13:47.960><c> the</c><00:13:48.080><c> fridge</c><00:13:48.320><c> method</c><00:13:48.710><c> oh</c>

00:13:49.080 --> 00:13:49.090 align:start position:0%
can navigate to the fridge method oh
 

00:13:49.090 --> 00:13:53.370 align:start position:0%
can navigate to the fridge method oh
okay<00:13:50.090><c> it's</c><00:13:50.210><c> a</c><00:13:50.300><c> default</c><00:13:50.840><c> method</c><00:13:51.880><c> to</c><00:13:52.880><c> see</c><00:13:53.030><c> that</c>

00:13:53.370 --> 00:13:53.380 align:start position:0%
okay it's a default method to see that
 

00:13:53.380 --> 00:13:56.680 align:start position:0%
okay it's a default method to see that
this<00:13:54.380><c> method</c><00:13:54.860><c> takes</c><00:13:55.430><c> a</c><00:13:55.610><c> consumer</c><00:13:56.210><c> as</c><00:13:56.630><c> a</c>

00:13:56.680 --> 00:13:56.690 align:start position:0%
this method takes a consumer as a
 

00:13:56.690 --> 00:13:59.320 align:start position:0%
this method takes a consumer as a
parameter<00:13:56.990><c> I'm</c><00:13:57.950><c> going</c><00:13:58.160><c> to</c><00:13:58.340><c> watch</c><00:13:58.550><c> this</c>

00:13:59.320 --> 00:13:59.330 align:start position:0%
parameter I'm going to watch this
 

00:13:59.330 --> 00:14:02.230 align:start position:0%
parameter I'm going to watch this
consumer<00:13:59.900><c> interface</c><00:14:00.440><c> this</c><00:14:01.220><c> is</c><00:14:01.280><c> indeed</c><00:14:01.850><c> a</c>

00:14:02.230 --> 00:14:02.240 align:start position:0%
consumer interface this is indeed a
 

00:14:02.240 --> 00:14:05.020 align:start position:0%
consumer interface this is indeed a
functional<00:14:02.870><c> interface</c><00:14:03.290><c> so</c><00:14:04.130><c> by</c><00:14:04.280><c> definition</c><00:14:04.460><c> it</c>

00:14:05.020 --> 00:14:05.030 align:start position:0%
functional interface so by definition it
 

00:14:05.030 --> 00:14:07.840 align:start position:0%
functional interface so by definition it
has<00:14:05.060><c> only</c><00:14:05.360><c> one</c><00:14:05.660><c> abstract</c><00:14:06.050><c> method</c><00:14:06.670><c> which</c><00:14:07.670><c> is</c>

00:14:07.840 --> 00:14:07.850 align:start position:0%
has only one abstract method which is
 

00:14:07.850 --> 00:14:10.510 align:start position:0%
has only one abstract method which is
the<00:14:08.000><c> accept</c><00:14:08.480><c> method</c><00:14:08.540><c> here</c><00:14:09.170><c> how</c><00:14:10.070><c> can</c><00:14:10.130><c> i</c>

00:14:10.510 --> 00:14:10.520 align:start position:0%
the accept method here how can i
 

00:14:10.520 --> 00:14:12.880 align:start position:0%
the accept method here how can i
implement<00:14:11.090><c> this</c><00:14:11.390><c> abstract</c><00:14:11.930><c> method</c><00:14:12.290><c> using</c><00:14:12.800><c> a</c>

00:14:12.880 --> 00:14:12.890 align:start position:0%
implement this abstract method using a
 

00:14:12.890 --> 00:14:15.760 align:start position:0%
implement this abstract method using a
lambda<00:14:13.510><c> well</c><00:14:14.510><c> as</c><00:14:14.660><c> we</c><00:14:14.810><c> saw</c><00:14:14.990><c> in</c><00:14:15.080><c> the</c><00:14:15.170><c> slide</c><00:14:15.410><c> I</c>

00:14:15.760 --> 00:14:15.770 align:start position:0%
lambda well as we saw in the slide I
 

00:14:15.770 --> 00:14:18.160 align:start position:0%
lambda well as we saw in the slide I
just<00:14:16.520><c> need</c><00:14:16.670><c> to</c><00:14:16.790><c> copy</c><00:14:16.970><c> paste</c><00:14:17.300><c> the</c><00:14:17.780><c> block</c><00:14:18.020><c> of</c>

00:14:18.160 --> 00:14:18.170 align:start position:0%
just need to copy paste the block of
 

00:14:18.170 --> 00:14:22.870 align:start position:0%
just need to copy paste the block of
parameter<00:14:18.680><c> let</c><00:14:19.640><c> me</c><00:14:19.790><c> do</c><00:14:19.910><c> that</c><00:14:21.670><c> draw</c><00:14:22.670><c> this</c>

00:14:22.870 --> 00:14:22.880 align:start position:0%
parameter let me do that draw this
 

00:14:22.880 --> 00:14:27.400 align:start position:0%
parameter let me do that draw this
little<00:14:23.470><c> old</c><00:14:24.470><c> fashioned</c><00:14:24.950><c> hour</c><00:14:25.190><c> like</c><00:14:26.050><c> ask</c><00:14:27.050><c> yacht</c>

00:14:27.400 --> 00:14:27.410 align:start position:0%
little old fashioned hour like ask yacht
 

00:14:27.410 --> 00:14:32.980 align:start position:0%
little old fashioned hour like ask yacht
and<00:14:27.640><c> return</c><00:14:28.640><c> void</c><00:14:29.830><c> so</c><00:14:30.830><c> if</c><00:14:31.250><c> I</c><00:14:31.660><c> just</c><00:14:32.660><c> want</c><00:14:32.900><c> to</c>

00:14:32.980 --> 00:14:32.990 align:start position:0%
and return void so if I just want to
 

00:14:32.990 --> 00:14:35.040 align:start position:0%
and return void so if I just want to
return<00:14:33.230><c> what</c><00:14:33.470><c> I</c><00:14:33.500><c> can</c><00:14:33.770><c> write</c><00:14:33.950><c> it</c><00:14:34.160><c> like</c><00:14:34.280><c> that</c>

00:14:35.040 --> 00:14:35.050 align:start position:0%
return what I can write it like that
 

00:14:35.050 --> 00:14:37.360 align:start position:0%
return what I can write it like that
this<00:14:36.050><c> is</c><00:14:36.260><c> a</c><00:14:36.290><c> block</c><00:14:36.500><c> of</c><00:14:36.650><c> code</c><00:14:36.830><c> that</c><00:14:36.890><c> returns</c>

00:14:37.360 --> 00:14:37.370 align:start position:0%
this is a block of code that returns
 

00:14:37.370 --> 00:14:40.120 align:start position:0%
this is a block of code that returns
void<00:14:37.460><c> so</c><00:14:38.180><c> at</c><00:14:38.300><c> least</c><00:14:38.540><c> it</c><00:14:38.870><c> should</c><00:14:39.050><c> compile</c><00:14:39.410><c> as</c>

00:14:40.120 --> 00:14:40.130 align:start position:0%
void so at least it should compile as
 

00:14:40.130 --> 00:14:43.510 align:start position:0%
void so at least it should compile as
long<00:14:40.430><c> as</c><00:14:40.610><c> I</c><00:14:40.760><c> say</c><00:14:40.970><c> that</c><00:14:41.210><c> this</c><00:14:41.420><c> T</c><00:14:42.260><c> is</c><00:14:42.800><c> in</c><00:14:42.950><c> fact</c><00:14:43.190><c> the</c>

00:14:43.510 --> 00:14:43.520 align:start position:0%
long as I say that this T is in fact the
 

00:14:43.520 --> 00:14:46.960 align:start position:0%
long as I say that this T is in fact the
string<00:14:43.760><c> and</c><00:14:44.380><c> indeed</c><00:14:45.380><c> this</c><00:14:45.800><c> code</c><00:14:46.100><c> does</c><00:14:46.490><c> compile</c>

00:14:46.960 --> 00:14:46.970 align:start position:0%
string and indeed this code does compile
 

00:14:46.970 --> 00:14:49.360 align:start position:0%
string and indeed this code does compile
the<00:14:47.780><c> lambda</c><00:14:48.080><c> I</c><00:14:48.110><c> just</c><00:14:48.410><c> wrote</c><00:14:48.650><c> using</c><00:14:49.040><c> this</c>

00:14:49.360 --> 00:14:49.370 align:start position:0%
the lambda I just wrote using this
 

00:14:49.370 --> 00:14:51.850 align:start position:0%
the lambda I just wrote using this
method<00:14:49.790><c> is</c><00:14:50.270><c> an</c><00:14:50.540><c> implementation</c><00:14:50.870><c> of</c><00:14:51.350><c> the</c>

00:14:51.850 --> 00:14:51.860 align:start position:0%
method is an implementation of the
 

00:14:51.860 --> 00:14:55.420 align:start position:0%
method is an implementation of the
consumer<00:14:52.430><c> interface</c><00:14:53.770><c> of</c><00:14:54.770><c> course</c><00:14:55.010><c> it</c><00:14:55.130><c> doesn't</c>

00:14:55.420 --> 00:14:55.430 align:start position:0%
consumer interface of course it doesn't
 

00:14:55.430 --> 00:15:00.310 align:start position:0%
consumer interface of course it doesn't
do<00:14:55.520><c> much</c><00:14:56.020><c> so</c><00:14:57.020><c> let</c><00:14:57.170><c> us</c><00:14:57.200><c> try</c><00:14:57.620><c> to</c><00:14:57.710><c> be</c><00:14:58.960><c> smart</c><00:14:59.960><c> here</c>

00:15:00.310 --> 00:15:00.320 align:start position:0%
do much so let us try to be smart here
 

00:15:00.320 --> 00:15:05.970 align:start position:0%
do much so let us try to be smart here
I'm<00:15:00.500><c> going</c><00:15:00.680><c> to</c><00:15:01.010><c> print</c><00:15:01.880><c> out</c>

00:15:05.970 --> 00:15:05.980 align:start position:0%
 
 

00:15:05.980 --> 00:15:09.400 align:start position:0%
 
this<00:15:06.980><c> string</c><00:15:07.760><c> of</c><00:15:07.880><c> character</c><00:15:08.300><c> okay</c><00:15:09.140><c> that</c><00:15:09.320><c> I</c>

00:15:09.400 --> 00:15:09.410 align:start position:0%
this string of character okay that I
 

00:15:09.410 --> 00:15:23.400 align:start position:0%
this string of character okay that I
call<00:15:09.650><c> t</c><00:15:09.920><c> enough</c><00:15:10.310><c> s</c><00:15:10.690><c> and</c><00:15:11.690><c> if</c><00:15:11.840><c> I</c><00:15:11.990><c> run</c><00:15:12.140><c> this</c><00:15:12.290><c> code</c>

00:15:23.400 --> 00:15:23.410 align:start position:0%
 
 

00:15:23.410 --> 00:15:26.339 align:start position:0%
 
okay<00:15:24.129><c> it</c><00:15:24.339><c> just</c><00:15:24.639><c> print</c><00:15:25.089><c> out</c><00:15:25.239><c> the</c><00:15:25.809><c> content</c><00:15:26.169><c> of</c>

00:15:26.339 --> 00:15:26.349 align:start position:0%
okay it just print out the content of
 

00:15:26.349 --> 00:15:30.509 align:start position:0%
okay it just print out the content of
the<00:15:26.439><c> list</c><00:15:27.569><c> by</c><00:15:28.569><c> the</c><00:15:28.599><c> way</c><00:15:28.809><c> I</c><00:15:28.959><c> do</c><00:15:29.289><c> not</c><00:15:29.709><c> have</c><00:15:30.189><c> to</c>

00:15:30.509 --> 00:15:30.519 align:start position:0%
the list by the way I do not have to
 

00:15:30.519 --> 00:15:33.739 align:start position:0%
the list by the way I do not have to
write<00:15:30.759><c> the</c><00:15:31.749><c> type</c><00:15:32.019><c> of</c><00:15:32.319><c> the</c><00:15:32.559><c> parameter</c><00:15:32.739><c> here</c>

00:15:33.739 --> 00:15:33.749 align:start position:0%
write the type of the parameter here
 

00:15:33.749 --> 00:15:36.379 align:start position:0%
write the type of the parameter here
because<00:15:34.749><c> the</c><00:15:34.869><c> compiler</c><00:15:35.259><c> is</c><00:15:35.439><c> smart</c><00:15:35.769><c> enough</c>

00:15:36.379 --> 00:15:36.389 align:start position:0%
because the compiler is smart enough
 

00:15:36.389 --> 00:15:38.549 align:start position:0%
because the compiler is smart enough
since<00:15:37.389><c> he</c><00:15:37.569><c> knows</c><00:15:37.809><c> the</c><00:15:38.079><c> method</c><00:15:38.410><c> I</c><00:15:38.529><c> am</c>

00:15:38.549 --> 00:15:38.559 align:start position:0%
since he knows the method I am
 

00:15:38.559 --> 00:15:41.189 align:start position:0%
since he knows the method I am
implementing<00:15:39.369><c> it</c><00:15:39.939><c> is</c><00:15:40.059><c> smart</c><00:15:40.509><c> enough</c><00:15:40.689><c> to</c><00:15:40.839><c> guess</c>

00:15:41.189 --> 00:15:41.199 align:start position:0%
implementing it is smart enough to guess
 

00:15:41.199 --> 00:15:44.039 align:start position:0%
implementing it is smart enough to guess
the<00:15:41.859><c> type</c><00:15:42.129><c> of</c><00:15:42.399><c> T</c><00:15:42.609><c> the</c><00:15:43.269><c> compiler</c><00:15:43.599><c> knows</c><00:15:43.689><c> that</c>

00:15:44.039 --> 00:15:44.049 align:start position:0%
the type of T the compiler knows that
 

00:15:44.049 --> 00:15:47.519 align:start position:0%
the type of T the compiler knows that
this<00:15:44.289><c> is</c><00:15:44.949><c> in</c><00:15:45.159><c> fact</c><00:15:45.189><c> a</c><00:15:45.639><c> string</c><00:15:45.879><c> of</c><00:15:45.999><c> character</c><00:15:46.529><c> so</c>

00:15:47.519 --> 00:15:47.529 align:start position:0%
this is in fact a string of character so
 

00:15:47.529 --> 00:15:49.679 align:start position:0%
this is in fact a string of character so
you<00:15:48.039><c> see</c><00:15:48.189><c> that</c><00:15:48.309><c> it's</c><00:15:48.489><c> not</c><00:15:48.579><c> that</c><00:15:49.059><c> complex</c><00:15:49.479><c> to</c>

00:15:49.679 --> 00:15:49.689 align:start position:0%
you see that it's not that complex to
 

00:15:49.689 --> 00:15:52.439 align:start position:0%
you see that it's not that complex to
right-handers<00:15:50.489><c> let</c><00:15:51.489><c> us</c><00:15:51.639><c> take</c><00:15:52.299><c> another</c>

00:15:52.439 --> 00:15:52.449 align:start position:0%
right-handers let us take another
 

00:15:52.449 --> 00:15:55.979 align:start position:0%
right-handers let us take another
example<00:15:53.849><c> with</c><00:15:54.849><c> another</c><00:15:55.119><c> functional</c>

00:15:55.979 --> 00:15:55.989 align:start position:0%
example with another functional
 

00:15:55.989 --> 00:15:57.539 align:start position:0%
example with another functional
interface<00:15:56.439><c> which</c><00:15:56.679><c> is</c><00:15:56.709><c> the</c><00:15:57.039><c> iterable</c>

00:15:57.539 --> 00:15:57.549 align:start position:0%
interface which is the iterable
 

00:15:57.549 --> 00:16:00.210 align:start position:0%
interface which is the iterable
interface<00:15:58.289><c> let</c><00:15:59.289><c> us</c><00:15:59.439><c> write</c><00:15:59.679><c> an</c><00:15:59.859><c> iterable</c>

00:16:00.210 --> 00:16:00.220 align:start position:0%
interface let us write an iterable
 

00:16:00.220 --> 00:16:07.859 align:start position:0%
interface let us write an iterable
string<00:16:02.699><c> okay</c><00:16:05.129><c> let</c><00:16:06.129><c> us</c><00:16:06.279><c> take</c><00:16:06.849><c> a</c><00:16:06.879><c> look</c><00:16:07.149><c> at</c><00:16:07.599><c> this</c>

00:16:07.859 --> 00:16:07.869 align:start position:0%
string okay let us take a look at this
 

00:16:07.869 --> 00:16:11.159 align:start position:0%
string okay let us take a look at this
interval<00:16:08.319><c> interface</c><00:16:09.239><c> this</c><00:16:10.239><c> little</c><00:16:10.599><c> interface</c>

00:16:11.159 --> 00:16:11.169 align:start position:0%
interval interface this little interface
 

00:16:11.169 --> 00:16:13.439 align:start position:0%
interval interface this little interface
is<00:16:11.470><c> not</c><00:16:11.739><c> annotated</c><00:16:12.249><c> with</c><00:16:12.970><c> functional</c>

00:16:13.439 --> 00:16:13.449 align:start position:0%
is not annotated with functional
 

00:16:13.449 --> 00:16:15.539 align:start position:0%
is not annotated with functional
interface<00:16:13.899><c> but</c><00:16:14.289><c> it</c><00:16:14.529><c> has</c><00:16:14.679><c> only</c><00:16:14.889><c> one</c><00:16:15.189><c> abstract</c>

00:16:15.539 --> 00:16:15.549 align:start position:0%
interface but it has only one abstract
 

00:16:15.549 --> 00:16:19.679 align:start position:0%
interface but it has only one abstract
method<00:16:15.879><c> which</c><00:16:16.689><c> returns</c><00:16:17.619><c> an</c><00:16:18.459><c> iterator</c><00:16:18.699><c> does</c>

00:16:19.679 --> 00:16:19.689 align:start position:0%
method which returns an iterator does
 

00:16:19.689 --> 00:16:22.379 align:start position:0%
method which returns an iterator does
not<00:16:19.899><c> take</c><00:16:20.109><c> any</c><00:16:20.349><c> parameter</c><00:16:20.729><c> let</c><00:16:21.729><c> us</c><00:16:21.849><c> implement</c>

00:16:22.379 --> 00:16:22.389 align:start position:0%
not take any parameter let us implement
 

00:16:22.389 --> 00:16:24.889 align:start position:0%
not take any parameter let us implement
that<00:16:22.599><c> method</c><00:16:22.799><c> using</c><00:16:23.799><c> a</c><00:16:23.889><c> lambda</c><00:16:24.039><c> expression</c>

00:16:24.889 --> 00:16:24.899 align:start position:0%
that method using a lambda expression
 

00:16:24.899 --> 00:16:30.479 align:start position:0%
that method using a lambda expression
copy/paste<00:16:25.899><c> the</c><00:16:26.439><c> block</c><00:16:26.619><c> of</c><00:16:26.769><c> code</c><00:16:29.369><c> it's</c><00:16:30.369><c> an</c>

00:16:30.479 --> 00:16:30.489 align:start position:0%
copy/paste the block of code it's an
 

00:16:30.489 --> 00:16:33.529 align:start position:0%
copy/paste the block of code it's an
empty<00:16:30.669><c> block</c><00:16:30.939><c> of</c><00:16:31.089><c> code</c><00:16:31.439><c> draw</c><00:16:32.439><c> this</c><00:16:32.679><c> little</c>

00:16:33.529 --> 00:16:33.539 align:start position:0%
empty block of code draw this little
 

00:16:33.539 --> 00:16:38.219 align:start position:0%
empty block of code draw this little
arrow<00:16:34.949><c> stuff</c><00:16:35.949><c> and</c><00:16:36.189><c> return</c><00:16:36.970><c> an</c><00:16:37.299><c> iterator</c><00:16:37.419><c> so</c><00:16:38.199><c> I</c>

00:16:38.219 --> 00:16:38.229 align:start position:0%
arrow stuff and return an iterator so I
 

00:16:38.229 --> 00:16:42.059 align:start position:0%
arrow stuff and return an iterator so I
could<00:16:38.589><c> well</c><00:16:38.799><c> return</c><00:16:39.699><c> the</c><00:16:40.539><c> null</c><00:16:40.720><c> value</c><00:16:41.069><c> this</c>

00:16:42.059 --> 00:16:42.069 align:start position:0%
could well return the null value this
 

00:16:42.069 --> 00:16:44.639 align:start position:0%
could well return the null value this
code<00:16:42.369><c> should</c><00:16:42.699><c> compile</c><00:16:43.269><c> and</c><00:16:43.539><c> indeed</c><00:16:43.869><c> it</c><00:16:44.379><c> does</c>

00:16:44.639 --> 00:16:44.649 align:start position:0%
code should compile and indeed it does
 

00:16:44.649 --> 00:16:47.039 align:start position:0%
code should compile and indeed it does
compile<00:16:45.039><c> now</c><00:16:45.399><c> I</c><00:16:45.699><c> should</c><00:16:46.419><c> be</c><00:16:46.539><c> returning</c><00:16:46.869><c> of</c>

00:16:47.039 --> 00:16:47.049 align:start position:0%
compile now I should be returning of
 

00:16:47.049 --> 00:16:50.549 align:start position:0%
compile now I should be returning of
course<00:16:47.289><c> a</c><00:16:47.409><c> real</c><00:16:47.649><c> iterator</c><00:16:48.429><c> I've</c><00:16:49.239><c> got</c><00:16:49.569><c> a</c><00:16:49.929><c> list</c>

00:16:50.549 --> 00:16:50.559 align:start position:0%
course a real iterator I've got a list
 

00:16:50.559 --> 00:16:54.359 align:start position:0%
course a real iterator I've got a list
of<00:16:50.739><c> strings</c><00:16:51.129><c> here</c><00:16:51.759><c> so</c><00:16:52.029><c> I</c><00:16:52.119><c> can</c><00:16:52.389><c> just</c><00:16:53.069><c> take</c><00:16:54.069><c> the</c>

00:16:54.359 --> 00:16:54.369 align:start position:0%
of strings here so I can just take the
 

00:16:54.369 --> 00:16:56.579 align:start position:0%
of strings here so I can just take the
iterator<00:16:54.819><c> from</c><00:16:55.419><c> this</c><00:16:55.600><c> list</c><00:16:55.839><c> of</c><00:16:55.959><c> string</c><00:16:56.259><c> and</c>

00:16:56.579 --> 00:16:56.589 align:start position:0%
iterator from this list of string and
 

00:16:56.589 --> 00:16:58.949 align:start position:0%
iterator from this list of string and
this<00:16:57.100><c> is</c><00:16:57.339><c> an</c><00:16:57.459><c> implementation</c><00:16:57.759><c> of</c><00:16:58.239><c> the</c>

00:16:58.949 --> 00:16:58.959 align:start position:0%
this is an implementation of the
 

00:16:58.959 --> 00:17:04.319 align:start position:0%
this is an implementation of the
iterable<00:16:59.379><c> interface</c><00:16:59.709><c> I</c><00:17:00.639><c> can</c><00:17:01.479><c> check</c><00:17:01.659><c> that</c><00:17:03.329><c> just</c>

00:17:04.319 --> 00:17:04.329 align:start position:0%
iterable interface I can check that just
 

00:17:04.329 --> 00:17:07.259 align:start position:0%
iterable interface I can check that just
by<00:17:04.829><c> passing</c><00:17:05.829><c> this</c><00:17:05.980><c> iterable</c><00:17:06.610><c> to</c><00:17:06.850><c> this</c><00:17:06.970><c> for</c>

00:17:07.259 --> 00:17:07.269 align:start position:0%
by passing this iterable to this for
 

00:17:07.269 --> 00:17:14.220 align:start position:0%
by passing this iterable to this for
each<00:17:07.389><c> pattern</c><00:17:09.600><c> and</c><00:17:11.399><c> print</c><00:17:12.629><c> the</c><00:17:13.629><c> result</c><00:17:13.809><c> like</c>

00:17:14.220 --> 00:17:14.230 align:start position:0%
each pattern and print the result like
 

00:17:14.230 --> 00:17:19.319 align:start position:0%
each pattern and print the result like
that<00:17:15.299><c> it</c><00:17:16.299><c> indeed</c><00:17:17.399><c> prints</c><00:17:18.399><c> out</c><00:17:18.610><c> all</c><00:17:19.059><c> the</c>

00:17:19.319 --> 00:17:19.329 align:start position:0%
that it indeed prints out all the
 

00:17:19.329 --> 00:17:21.600 align:start position:0%
that it indeed prints out all the
elements<00:17:19.389><c> of</c><00:17:19.839><c> the</c><00:17:20.289><c> interface</c><00:17:20.649><c> of</c><00:17:20.829><c> the</c><00:17:21.309><c> other</c>

00:17:21.600 --> 00:17:21.610 align:start position:0%
elements of the interface of the other
 

00:17:21.610 --> 00:17:26.279 align:start position:0%
elements of the interface of the other
list<00:17:22.439><c> we</c><00:17:23.439><c> can</c><00:17:23.589><c> take</c><00:17:23.740><c> one</c><00:17:23.919><c> last</c><00:17:24.069><c> example</c><00:17:25.289><c> with</c>

00:17:26.279 --> 00:17:26.289 align:start position:0%
list we can take one last example with
 

00:17:26.289 --> 00:17:32.330 align:start position:0%
list we can take one last example with
another<00:17:26.620><c> interface</c><00:17:28.110><c> the</c><00:17:29.110><c> executor</c><00:17:29.620><c> interface</c>

00:17:32.330 --> 00:17:32.340 align:start position:0%
 
 

00:17:32.340 --> 00:17:34.200 align:start position:0%
 
executor

00:17:34.200 --> 00:17:34.210 align:start position:0%
executor
 

00:17:34.210 --> 00:17:37.670 align:start position:0%
executor
this<00:17:34.960><c> executor</c><00:17:35.500><c> interface</c><00:17:35.950><c> is</c><00:17:36.580><c> also</c><00:17:36.970><c> a</c>

00:17:37.670 --> 00:17:37.680 align:start position:0%
this executor interface is also a
 

00:17:37.680 --> 00:17:40.280 align:start position:0%
this executor interface is also a
functional<00:17:38.680><c> interface</c><00:17:39.130><c> it</c><00:17:39.400><c> has</c><00:17:39.460><c> only</c><00:17:39.820><c> one</c>

00:17:40.280 --> 00:17:40.290 align:start position:0%
functional interface it has only one
 

00:17:40.290 --> 00:17:42.930 align:start position:0%
functional interface it has only one
abstract<00:17:41.290><c> method</c><00:17:41.590><c> once</c><00:17:42.310><c> again</c><00:17:42.550><c> it's</c><00:17:42.730><c> not</c>

00:17:42.930 --> 00:17:42.940 align:start position:0%
abstract method once again it's not
 

00:17:42.940 --> 00:17:45.540 align:start position:0%
abstract method once again it's not
annotated<00:17:43.360><c> with</c><00:17:43.960><c> functional</c><00:17:44.440><c> interface</c><00:17:44.830><c> but</c>

00:17:45.540 --> 00:17:45.550 align:start position:0%
annotated with functional interface but
 

00:17:45.550 --> 00:17:48.810 align:start position:0%
annotated with functional interface but
we<00:17:45.700><c> can</c><00:17:45.910><c> still</c><00:17:46.210><c> work</c><00:17:47.080><c> with</c><00:17:47.140><c> it</c><00:17:47.440><c> it</c><00:17:48.310><c> takes</c><00:17:48.520><c> a</c><00:17:48.700><c> run</c>

00:17:48.810 --> 00:17:48.820 align:start position:0%
we can still work with it it takes a run
 

00:17:48.820 --> 00:17:50.970 align:start position:0%
we can still work with it it takes a run
a<00:17:48.880><c> ball</c><00:17:49.120><c> as</c><00:17:49.480><c> a</c><00:17:49.540><c> parameter</c><00:17:49.900><c> so</c><00:17:50.380><c> let</c><00:17:50.530><c> us</c><00:17:50.560><c> take</c>

00:17:50.970 --> 00:17:50.980 align:start position:0%
a ball as a parameter so let us take
 

00:17:50.980 --> 00:17:55.940 align:start position:0%
a ball as a parameter so let us take
this<00:17:51.280><c> block</c><00:17:51.550><c> of</c><00:17:51.700><c> code</c><00:17:51.730><c> and</c><00:17:52.660><c> copy</c><00:17:52.870><c> paste</c><00:17:53.020><c> it</c>

00:17:55.940 --> 00:17:55.950 align:start position:0%
 
 

00:17:55.950 --> 00:18:00.690 align:start position:0%
 
draw<00:17:56.950><c> this</c><00:17:57.160><c> little</c><00:17:57.490><c> arrow</c><00:17:58.050><c> and</c><00:17:59.190><c> it</c><00:18:00.190><c> returns</c>

00:18:00.690 --> 00:18:00.700 align:start position:0%
draw this little arrow and it returns
 

00:18:00.700 --> 00:18:05.220 align:start position:0%
draw this little arrow and it returns
void<00:18:00.940><c> so</c><00:18:01.600><c> I</c><00:18:01.870><c> can</c><00:18:02.380><c> implement</c><00:18:02.770><c> it</c><00:18:03.810><c> using</c><00:18:04.810><c> this</c>

00:18:05.220 --> 00:18:05.230 align:start position:0%
void so I can implement it using this
 

00:18:05.230 --> 00:18:06.240 align:start position:0%
void so I can implement it using this
dump

00:18:06.240 --> 00:18:06.250 align:start position:0%
dump
 

00:18:06.250 --> 00:18:09.120 align:start position:0%
dump
order<00:18:06.610><c> and</c><00:18:06.760><c> this</c><00:18:07.480><c> should</c><00:18:07.720><c> compile</c><00:18:08.110><c> and</c><00:18:08.380><c> indeed</c>

00:18:09.120 --> 00:18:09.130 align:start position:0%
order and this should compile and indeed
 

00:18:09.130 --> 00:18:12.660 align:start position:0%
order and this should compile and indeed
it<00:18:09.250><c> does</c><00:18:10.290><c> now</c><00:18:11.290><c> what</c><00:18:11.470><c> I</c><00:18:11.500><c> need</c><00:18:11.620><c> to</c><00:18:11.770><c> do</c><00:18:12.010><c> is</c><00:18:12.340><c> of</c>

00:18:12.660 --> 00:18:12.670 align:start position:0%
it does now what I need to do is of
 

00:18:12.670 --> 00:18:15.540 align:start position:0%
it does now what I need to do is of
course<00:18:12.780><c> execute</c><00:18:13.800><c> this</c><00:18:14.800><c> run</c><00:18:15.010><c> a</c><00:18:15.040><c> ball</c><00:18:15.250><c> so</c><00:18:15.520><c> I</c>

00:18:15.540 --> 00:18:15.550 align:start position:0%
course execute this run a ball so I
 

00:18:15.550 --> 00:18:18.900 align:start position:0%
course execute this run a ball so I
could<00:18:15.940><c> write</c><00:18:16.930><c> this</c><00:18:17.010><c> command</c><00:18:18.010><c> ran</c><00:18:18.490><c> for</c>

00:18:18.900 --> 00:18:18.910 align:start position:0%
could write this command ran for
 

00:18:18.910 --> 00:18:21.690 align:start position:0%
could write this command ran for
instance<00:18:19.240><c> to</c><00:18:19.480><c> execute</c><00:18:19.870><c> this</c><00:18:20.440><c> run</c><00:18:20.650><c> of</c><00:18:20.740><c> all</c><00:18:20.830><c> I'm</c>

00:18:21.690 --> 00:18:21.700 align:start position:0%
instance to execute this run of all I'm
 

00:18:21.700 --> 00:18:26.480 align:start position:0%
instance to execute this run of all I'm
going<00:18:22.030><c> to</c><00:18:22.330><c> call</c><00:18:22.630><c> this</c><00:18:23.010><c> executor</c><00:18:24.480><c> number</c>

00:18:26.480 --> 00:18:26.490 align:start position:0%
going to call this executor number
 

00:18:26.490 --> 00:18:28.740 align:start position:0%
going to call this executor number
because<00:18:27.490><c> of</c><00:18:27.520><c> course</c><00:18:27.850><c> it's</c><00:18:28.030><c> not</c><00:18:28.210><c> it's</c>

00:18:28.740 --> 00:18:28.750 align:start position:0%
because of course it's not it's
 

00:18:28.750 --> 00:18:30.720 align:start position:0%
because of course it's not it's
executing<00:18:29.680><c> the</c><00:18:29.800><c> runnable</c><00:18:30.190><c> in</c><00:18:30.340><c> the</c><00:18:30.430><c> current</c>

00:18:30.720 --> 00:18:30.730 align:start position:0%
executing the runnable in the current
 

00:18:30.730 --> 00:18:32.640 align:start position:0%
executing the runnable in the current
thread<00:18:30.940><c> which</c><00:18:31.180><c> is</c><00:18:31.210><c> not</c><00:18:31.570><c> what</c><00:18:32.080><c> an</c><00:18:32.200><c> executor</c>

00:18:32.640 --> 00:18:32.650 align:start position:0%
thread which is not what an executor
 

00:18:32.650 --> 00:18:35.460 align:start position:0%
thread which is not what an executor
should<00:18:32.830><c> do</c><00:18:32.980><c> if</c><00:18:33.730><c> I</c><00:18:33.910><c> want</c><00:18:34.120><c> to</c><00:18:34.240><c> create</c><00:18:34.510><c> another</c>

00:18:35.460 --> 00:18:35.470 align:start position:0%
should do if I want to create another
 

00:18:35.470 --> 00:18:39.270 align:start position:0%
should do if I want to create another
executor<00:18:36.280><c> that</c><00:18:36.460><c> can</c><00:18:36.610><c> that</c><00:18:36.850><c> I</c><00:18:36.970><c> can</c><00:18:37.000><c> call</c><00:18:38.280><c> smart</c>

00:18:39.270 --> 00:18:39.280 align:start position:0%
executor that can that I can call smart
 

00:18:39.280 --> 00:18:42.570 align:start position:0%
executor that can that I can call smart
executor<00:18:39.910><c> and</c><00:18:40.380><c> run</c><00:18:41.380><c> this</c><00:18:41.560><c> task</c><00:18:41.800><c> in</c><00:18:42.250><c> another</c>

00:18:42.570 --> 00:18:42.580 align:start position:0%
executor and run this task in another
 

00:18:42.580 --> 00:18:48.380 align:start position:0%
executor and run this task in another
thread<00:18:42.880><c> I</c><00:18:43.330><c> could</c><00:18:44.260><c> use</c><00:18:44.470><c> these</c><00:18:44.820><c> executors</c>

00:18:48.380 --> 00:18:48.390 align:start position:0%
 
 

00:18:48.390 --> 00:18:52.650 align:start position:0%
 
executors<00:18:49.390><c> actually</c><00:18:49.750><c> matado</c><00:18:51.300><c> new</c><00:18:52.300><c> or</c><00:18:52.630><c> a</c>

00:18:52.650 --> 00:18:52.660 align:start position:0%
executors actually matado new or a
 

00:18:52.660 --> 00:18:58.590 align:start position:0%
executors actually matado new or a
single<00:18:52.930><c> thread</c><00:18:53.260><c> executor</c><00:18:56.220><c> execute</c><00:18:57.600><c> this</c>

00:18:58.590 --> 00:18:58.600 align:start position:0%
single thread executor execute this
 

00:18:58.600 --> 00:19:03.570 align:start position:0%
single thread executor execute this
command<00:18:58.810><c> as</c><00:18:59.230><c> a</c><00:18:59.290><c> parameter</c><00:19:02.220><c> so</c><00:19:03.220><c> that</c><00:19:03.370><c> you</c><00:19:03.430><c> can</c>

00:19:03.570 --> 00:19:03.580 align:start position:0%
command as a parameter so that you can
 

00:19:03.580 --> 00:19:08.070 align:start position:0%
command as a parameter so that you can
see<00:19:04.710><c> all</c><00:19:05.710><c> right</c><00:19:05.830><c> we</c><00:19:06.730><c> can</c><00:19:06.910><c> test</c><00:19:07.120><c> this</c><00:19:07.270><c> code</c><00:19:07.510><c> for</c>

00:19:08.070 --> 00:19:08.080 align:start position:0%
see all right we can test this code for
 

00:19:08.080 --> 00:19:12.450 align:start position:0%
see all right we can test this code for
that<00:19:08.110><c> I</c><00:19:08.260><c> need</c><00:19:08.590><c> a</c><00:19:08.950><c> runnable</c><00:19:11.040><c> this</c><00:19:12.040><c> would</c><00:19:12.250><c> be</c><00:19:12.340><c> my</c>

00:19:12.450 --> 00:19:12.460 align:start position:0%
that I need a runnable this would be my
 

00:19:12.460 --> 00:19:16.320 align:start position:0%
that I need a runnable this would be my
task<00:19:13.980><c> by</c><00:19:14.980><c> the</c><00:19:15.040><c> way</c><00:19:15.310><c> if</c><00:19:15.370><c> I</c><00:19:15.550><c> check</c><00:19:15.820><c> the</c><00:19:15.940><c> runnable</c>

00:19:16.320 --> 00:19:16.330 align:start position:0%
task by the way if I check the runnable
 

00:19:16.330 --> 00:19:19.440 align:start position:0%
task by the way if I check the runnable
interface<00:19:16.780><c> guess</c><00:19:17.710><c> what</c><00:19:18.030><c> relays</c><00:19:19.030><c> are</c><00:19:19.210><c> sewn</c>

00:19:19.440 --> 00:19:19.450 align:start position:0%
interface guess what relays are sewn
 

00:19:19.450 --> 00:19:21.210 align:start position:0%
interface guess what relays are sewn
functional<00:19:20.020><c> interface</c><00:19:20.410><c> so</c><00:19:20.620><c> I</c><00:19:20.650><c> can</c><00:19:20.920><c> implement</c>

00:19:21.210 --> 00:19:21.220 align:start position:0%
functional interface so I can implement
 

00:19:21.220 --> 00:19:24.410 align:start position:0%
functional interface so I can implement
a<00:19:21.490><c> runnable</c><00:19:21.850><c> using</c><00:19:22.480><c> a</c><00:19:22.570><c> lambda</c><00:19:22.740><c> let</c><00:19:23.740><c> us</c><00:19:23.830><c> do</c><00:19:23.950><c> that</c>

00:19:24.410 --> 00:19:24.420 align:start position:0%
a runnable using a lambda let us do that
 

00:19:24.420 --> 00:19:28.460 align:start position:0%
a runnable using a lambda let us do that
what<00:19:25.420><c> does</c><00:19:25.570><c> it</c><00:19:25.630><c> take</c><00:19:25.930><c> takes</c><00:19:26.350><c> no</c><00:19:27.220><c> parameter</c><00:19:27.760><c> and</c>

00:19:28.460 --> 00:19:28.470 align:start position:0%
what does it take takes no parameter and
 

00:19:28.470 --> 00:19:30.840 align:start position:0%
what does it take takes no parameter and
doesn't<00:19:29.470><c> return</c><00:19:29.620><c> anything</c><00:19:30.040><c> so</c><00:19:30.430><c> I</c><00:19:30.460><c> should</c><00:19:30.730><c> be</c>

00:19:30.840 --> 00:19:30.850 align:start position:0%
doesn't return anything so I should be
 

00:19:30.850 --> 00:19:38.779 align:start position:0%
doesn't return anything so I should be
able<00:19:30.940><c> to</c><00:19:32.460><c> implement</c><00:19:33.460><c> it</c><00:19:34.110><c> like</c><00:19:35.110><c> that</c>

00:19:38.779 --> 00:19:38.789 align:start position:0%
 
 

00:19:38.789 --> 00:19:43.999 align:start position:0%
 
looks<00:19:39.449><c> like</c><00:19:39.659><c> JavaScript</c><00:19:40.199><c> right</c><00:19:42.679><c> okay</c><00:19:43.679><c> so</c><00:19:43.739><c> this</c>

00:19:43.999 --> 00:19:44.009 align:start position:0%
looks like JavaScript right okay so this
 

00:19:44.009 --> 00:19:46.249 align:start position:0%
looks like JavaScript right okay so this
is<00:19:44.190><c> this</c><00:19:44.309><c> is</c><00:19:44.459><c> a</c><00:19:44.489><c> random</c><00:19:45.259><c> compiled</c>

00:19:46.249 --> 00:19:46.259 align:start position:0%
is this is a random compiled
 

00:19:46.259 --> 00:19:48.619 align:start position:0%
is this is a random compiled
and<00:19:46.949><c> it</c><00:19:47.099><c> would</c><00:19:47.459><c> work</c><00:19:47.729><c> of</c><00:19:47.969><c> course</c><00:19:48.239><c> it</c><00:19:48.359><c> wouldn't</c>

00:19:48.619 --> 00:19:48.629 align:start position:0%
and it would work of course it wouldn't
 

00:19:48.629 --> 00:19:50.930 align:start position:0%
and it would work of course it wouldn't
do<00:19:48.749><c> much</c><00:19:48.899><c> but</c><00:19:49.139><c> it</c><00:19:49.469><c> would</c><00:19:49.649><c> work</c><00:19:49.799><c> so</c><00:19:50.399><c> what</c><00:19:50.639><c> I</c><00:19:50.669><c> can</c>

00:19:50.930 --> 00:19:50.940 align:start position:0%
do much but it would work so what I can
 

00:19:50.940 --> 00:19:54.349 align:start position:0%
do much but it would work so what I can
do<00:19:51.059><c> is</c><00:19:51.239><c> appoint</c><00:19:51.629><c> for</c><00:19:51.869><c> instance</c><00:19:53.059><c> just</c><00:19:54.059><c> print</c>

00:19:54.349 --> 00:19:54.359 align:start position:0%
do is appoint for instance just print
 

00:19:54.359 --> 00:20:01.699 align:start position:0%
do is appoint for instance just print
out<00:19:54.509><c> the</c><00:19:55.190><c> thread</c><00:19:56.190><c> Amina</c><00:19:56.519><c> I</c><00:19:56.940><c> am</c><00:19:57.359><c> in</c><00:19:57.509><c> thread</c><00:20:00.709><c> read</c>

00:20:01.699 --> 00:20:01.709 align:start position:0%
out the thread Amina I am in thread read
 

00:20:01.709 --> 00:20:10.989 align:start position:0%
out the thread Amina I am in thread read
current<00:20:02.129><c> read</c><00:20:09.139><c> something</c><00:20:10.139><c> like</c><00:20:10.169><c> that</c><00:20:10.440><c> and</c>

00:20:10.989 --> 00:20:10.999 align:start position:0%
current read something like that and
 

00:20:10.999 --> 00:20:17.859 align:start position:0%
current read something like that and
then<00:20:12.559><c> dump</c><00:20:13.559><c> executors</c><00:20:14.569><c> execute</c><00:20:16.190><c> this</c><00:20:17.190><c> task</c>

00:20:17.859 --> 00:20:17.869 align:start position:0%
then dump executors execute this task
 

00:20:17.869 --> 00:20:24.159 align:start position:0%
then dump executors execute this task
and<00:20:19.399><c> do</c><00:20:20.399><c> it</c><00:20:20.519><c> again</c><00:20:20.819><c> with</c><00:20:21.059><c> my</c><00:20:21.299><c> smart</c><00:20:22.169><c> executor</c>

00:20:24.159 --> 00:20:24.169 align:start position:0%
and do it again with my smart executor
 

00:20:24.169 --> 00:20:28.549 align:start position:0%
and do it again with my smart executor
if<00:20:25.169><c> I</c><00:20:25.349><c> run</c><00:20:25.529><c> this</c><00:20:25.679><c> code</c><00:20:26.089><c> indeed</c><00:20:27.089><c> the</c><00:20:28.049><c> first</c><00:20:28.319><c> one</c>

00:20:28.549 --> 00:20:28.559 align:start position:0%
if I run this code indeed the first one
 

00:20:28.559 --> 00:20:30.409 align:start position:0%
if I run this code indeed the first one
was<00:20:28.859><c> executed</c><00:20:29.339><c> in</c><00:20:29.429><c> the</c><00:20:29.549><c> main</c><00:20:29.729><c> thread</c><00:20:29.999><c> which</c><00:20:30.209><c> is</c>

00:20:30.409 --> 00:20:30.419 align:start position:0%
was executed in the main thread which is
 

00:20:30.419 --> 00:20:34.159 align:start position:0%
was executed in the main thread which is
which<00:20:30.719><c> is</c><00:20:30.749><c> exactly</c><00:20:32.299><c> what</c><00:20:33.299><c> is</c><00:20:33.419><c> expected</c><00:20:33.539><c> and</c>

00:20:34.159 --> 00:20:34.169 align:start position:0%
which is exactly what is expected and
 

00:20:34.169 --> 00:20:36.919 align:start position:0%
which is exactly what is expected and
the<00:20:34.589><c> second</c><00:20:34.919><c> one</c><00:20:35.099><c> executed</c><00:20:35.789><c> in</c><00:20:35.969><c> one</c><00:20:36.659><c> thread</c>

00:20:36.919 --> 00:20:36.929 align:start position:0%
the second one executed in one thread
 

00:20:36.929 --> 00:20:39.319 align:start position:0%
the second one executed in one thread
one<00:20:37.169><c> which</c><00:20:37.379><c> is</c><00:20:37.529><c> the</c><00:20:37.679><c> thread</c><00:20:37.919><c> of</c><00:20:38.190><c> my</c><00:20:38.369><c> executor</c>

00:20:39.319 --> 00:20:39.329 align:start position:0%
one which is the thread of my executor
 

00:20:39.329 --> 00:20:43.939 align:start position:0%
one which is the thread of my executor
service<00:20:39.359><c> I</c><00:20:40.699><c> need</c><00:20:41.699><c> to</c><00:20:41.879><c> shut</c><00:20:42.869><c> this</c><00:20:43.259><c> by</c><00:20:43.709><c> hand</c>

00:20:43.939 --> 00:20:43.949 align:start position:0%
service I need to shut this by hand
 

00:20:43.949 --> 00:20:45.709 align:start position:0%
service I need to shut this by hand
because<00:20:44.279><c> I</c><00:20:44.369><c> did</c><00:20:44.639><c> not</c><00:20:44.789><c> shut</c><00:20:45.089><c> down</c><00:20:45.119><c> this</c><00:20:45.449><c> mod</c>

00:20:45.709 --> 00:20:45.719 align:start position:0%
because I did not shut down this mod
 

00:20:45.719 --> 00:20:48.349 align:start position:0%
because I did not shut down this mod
executable<00:20:46.440><c> which</c><00:20:47.190><c> is</c><00:20:47.339><c> of</c><00:20:47.489><c> course</c><00:20:47.639><c> very</c><00:20:47.969><c> wrong</c>

00:20:48.349 --> 00:20:48.359 align:start position:0%
executable which is of course very wrong
 

00:20:48.359 --> 00:20:50.209 align:start position:0%
executable which is of course very wrong
don't<00:20:49.199><c> use</c><00:20:49.379><c> this</c><00:20:49.499><c> kind</c><00:20:49.559><c> of</c><00:20:49.799><c> code</c><00:20:50.039><c> in</c>

00:20:50.209 --> 00:20:50.219 align:start position:0%
don't use this kind of code in
 

00:20:50.219 --> 00:20:53.389 align:start position:0%
don't use this kind of code in
production<00:20:50.809><c> just</c><00:20:51.809><c> one</c><00:20:51.989><c> note</c><00:20:52.229><c> if</c><00:20:52.499><c> I</c><00:20:52.739><c> take</c><00:20:53.219><c> this</c>

00:20:53.389 --> 00:20:53.399 align:start position:0%
production just one note if I take this
 

00:20:53.399 --> 00:20:56.599 align:start position:0%
production just one note if I take this
code<00:20:53.789><c> here</c><00:20:54.389><c> as</c><00:20:54.599><c> an</c><00:20:54.899><c> iterable</c><00:20:55.259><c> and</c><00:20:55.649><c> copy-paste</c>

00:20:56.599 --> 00:20:56.609 align:start position:0%
code here as an iterable and copy-paste
 

00:20:56.609 --> 00:20:57.499 align:start position:0%
code here as an iterable and copy-paste
there

00:20:57.499 --> 00:20:57.509 align:start position:0%
there
 

00:20:57.509 --> 00:21:02.509 align:start position:0%
there
I<00:20:57.539><c> have</c><00:21:00.289><c> no</c><00:21:01.289><c> if</c><00:21:01.409><c> you</c><00:21:01.529><c> can</c><00:21:01.709><c> see</c><00:21:01.919><c> it</c><00:21:01.979><c> I</c><00:21:02.190><c> have</c><00:21:02.279><c> a</c>

00:21:02.509 --> 00:21:02.519 align:start position:0%
I have no if you can see it I have a
 

00:21:02.519 --> 00:21:03.409 align:start position:0%
I have no if you can see it I have a
compiler

00:21:03.409 --> 00:21:03.419 align:start position:0%
compiler
 

00:21:03.419 --> 00:21:07.549 align:start position:0%
compiler
oops<00:21:03.690><c> I</c><00:21:04.019><c> have</c><00:21:04.529><c> a</c><00:21:04.559><c> compiler</c><00:21:05.129><c> error</c><00:21:06.319><c> this</c><00:21:07.319><c> code</c>

00:21:07.549 --> 00:21:07.559 align:start position:0%
oops I have a compiler error this code
 

00:21:07.559 --> 00:21:09.919 align:start position:0%
oops I have a compiler error this code
does<00:21:07.739><c> not</c><00:21:07.769><c> compile</c><00:21:08.219><c> why</c><00:21:08.879><c> because</c><00:21:09.479><c> the</c>

00:21:09.919 --> 00:21:09.929 align:start position:0%
does not compile why because the
 

00:21:09.929 --> 00:21:13.009 align:start position:0%
does not compile why because the
compiler<00:21:10.349><c> has</c><00:21:10.739><c> to</c><00:21:11.129><c> know</c><00:21:11.639><c> at</c><00:21:11.940><c> compile</c><00:21:12.419><c> time</c><00:21:12.449><c> the</c>

00:21:13.009 --> 00:21:13.019 align:start position:0%
compiler has to know at compile time the
 

00:21:13.019 --> 00:21:15.069 align:start position:0%
compiler has to know at compile time the
type<00:21:13.349><c> of</c><00:21:13.649><c> lambda</c><00:21:14.129><c> expression</c><00:21:14.609><c> I</c><00:21:14.699><c> am</c><00:21:14.819><c> writing</c>

00:21:15.069 --> 00:21:15.079 align:start position:0%
type of lambda expression I am writing
 

00:21:15.079 --> 00:21:18.289 align:start position:0%
type of lambda expression I am writing
so<00:21:16.079><c> lambda</c><00:21:16.469><c> should</c><00:21:16.709><c> be</c><00:21:16.889><c> either</c><00:21:17.159><c> affected</c><00:21:17.969><c> to</c><00:21:18.269><c> a</c>

00:21:18.289 --> 00:21:18.299 align:start position:0%
so lambda should be either affected to a
 

00:21:18.299 --> 00:21:21.199 align:start position:0%
so lambda should be either affected to a
field<00:21:18.690><c> or</c><00:21:18.989><c> variable</c><00:21:19.679><c> will</c><00:21:20.339><c> be</c><00:21:20.369><c> sent</c><00:21:20.969><c> as</c><00:21:21.179><c> a</c>

00:21:21.199 --> 00:21:21.209 align:start position:0%
field or variable will be sent as a
 

00:21:21.209 --> 00:21:24.349 align:start position:0%
field or variable will be sent as a
parameter<00:21:21.599><c> or</c><00:21:22.019><c> be</c><00:21:22.469><c> written</c><00:21:22.859><c> by</c><00:21:23.219><c> by</c><00:21:23.669><c> a</c><00:21:23.699><c> method</c><00:21:24.149><c> I</c>

00:21:24.349 --> 00:21:24.359 align:start position:0%
parameter or be written by by a method I
 

00:21:24.359 --> 00:21:27.409 align:start position:0%
parameter or be written by by a method I
cannot<00:21:25.079><c> take</c><00:21:25.319><c> a</c><00:21:25.349><c> lambda</c><00:21:25.649><c> as</c><00:21:26.039><c> it</c><00:21:26.309><c> is</c><00:21:26.459><c> put</c><00:21:27.299><c> it</c>

00:21:27.409 --> 00:21:27.419 align:start position:0%
cannot take a lambda as it is put it
 

00:21:27.419 --> 00:21:30.259 align:start position:0%
cannot take a lambda as it is put it
just<00:21:27.869><c> like</c><00:21:28.019><c> that</c><00:21:28.049><c> in</c><00:21:28.379><c> this</c><00:21:28.499><c> code</c><00:21:28.799><c> and</c><00:21:29.269><c> hope</c>

00:21:30.259 --> 00:21:30.269 align:start position:0%
just like that in this code and hope
 

00:21:30.269 --> 00:21:33.289 align:start position:0%
just like that in this code and hope
that<00:21:31.129><c> it</c><00:21:32.129><c> would</c><00:21:32.249><c> work</c><00:21:32.429><c> for</c><00:21:32.579><c> instance</c><00:21:32.969><c> if</c><00:21:33.119><c> I</c>

00:21:33.289 --> 00:21:33.299 align:start position:0%
that it would work for instance if I
 

00:21:33.299 --> 00:21:37.389 align:start position:0%
that it would work for instance if I
just<00:21:34.199><c> copy</c><00:21:34.799><c> paste</c><00:21:35.129><c> this</c><00:21:35.279><c> code</c><00:21:35.519><c> here</c><00:21:35.879><c> like</c><00:21:36.059><c> that</c>

00:21:37.389 --> 00:21:37.399 align:start position:0%
just copy paste this code here like that
 

00:21:37.399 --> 00:21:40.129 align:start position:0%
just copy paste this code here like that
put<00:21:38.399><c> it</c><00:21:38.429><c> into</c><00:21:38.789><c> parenthesis</c><00:21:38.969><c> and</c><00:21:39.569><c> code</c><00:21:39.869><c> like</c>

00:21:40.129 --> 00:21:40.139 align:start position:0%
put it into parenthesis and code like
 

00:21:40.139 --> 00:21:41.959 align:start position:0%
put it into parenthesis and code like
that<00:21:40.319><c> I</c><00:21:40.589><c> will</c><00:21:41.099><c> have</c><00:21:41.249><c> a</c><00:21:41.279><c> compiler</c><00:21:41.669><c> error</c>

00:21:41.959 --> 00:21:41.969 align:start position:0%
that I will have a compiler error
 

00:21:41.969 --> 00:21:44.299 align:start position:0%
that I will have a compiler error
because<00:21:42.359><c> the</c><00:21:42.449><c> compiler</c><00:21:42.899><c> cannot</c><00:21:43.289><c> guess</c><00:21:43.619><c> what</c>

00:21:44.299 --> 00:21:44.309 align:start position:0%
because the compiler cannot guess what
 

00:21:44.309 --> 00:21:45.979 align:start position:0%
because the compiler cannot guess what
is<00:21:44.429><c> the</c><00:21:44.579><c> type</c><00:21:44.789><c> of</c><00:21:44.819><c> the</c><00:21:45.059><c> lambda</c><00:21:45.359><c> of</c><00:21:45.659><c> just</c>

00:21:45.979 --> 00:21:45.989 align:start position:0%
is the type of the lambda of just
 

00:21:45.989 --> 00:21:47.839 align:start position:0%
is the type of the lambda of just
written<00:21:46.139><c> I</c><00:21:46.469><c> need</c><00:21:46.919><c> to</c><00:21:47.039><c> put</c><00:21:47.249><c> it</c><00:21:47.369><c> in</c><00:21:47.519><c> a</c><00:21:47.579><c> variable</c>

00:21:47.839 --> 00:21:47.849 align:start position:0%
written I need to put it in a variable
 

00:21:47.849 --> 00:21:52.140 align:start position:0%
written I need to put it in a variable
for<00:21:48.209><c> that</c>

00:21:52.140 --> 00:21:52.150 align:start position:0%
 
 

00:21:52.150 --> 00:21:56.350 align:start position:0%
 
I'm<00:21:53.150><c> going</c><00:21:53.420><c> to</c><00:21:53.630><c> swim</c><00:21:54.590><c> to</c><00:21:54.980><c> this</c><00:21:55.100><c> go</c><00:21:55.360><c> alright</c>

00:21:56.350 --> 00:21:56.360 align:start position:0%
I'm going to swim to this go alright
 

00:21:56.360 --> 00:22:03.310 align:start position:0%
I'm going to swim to this go alright
alright<00:21:59.200><c> let's</c><00:22:00.200><c> continue</c><00:22:01.060><c> so</c><00:22:02.060><c> writing</c><00:22:02.960><c> along</c>

00:22:03.310 --> 00:22:03.320 align:start position:0%
alright let's continue so writing along
 

00:22:03.320 --> 00:22:05.380 align:start position:0%
alright let's continue so writing along
down<00:22:03.530><c> in</c><00:22:03.770><c> a</c><00:22:03.860><c> chair</c><00:22:03.890><c> is</c><00:22:04.340><c> a</c><00:22:04.520><c> matter</c><00:22:04.820><c> of</c><00:22:04.970><c> finding</c>

00:22:05.380 --> 00:22:05.390 align:start position:0%
down in a chair is a matter of finding
 

00:22:05.390 --> 00:22:08.110 align:start position:0%
down in a chair is a matter of finding
you<00:22:05.900><c> what</c><00:22:06.440><c> interface</c><00:22:07.100><c> what</c><00:22:07.430><c> functional</c>

00:22:08.110 --> 00:22:08.120 align:start position:0%
you what interface what functional
 

00:22:08.120 --> 00:22:11.050 align:start position:0%
you what interface what functional
interface<00:22:08.600><c> I</c><00:22:08.900><c> am</c><00:22:09.170><c> implementing</c><00:22:09.590><c> and</c><00:22:09.980><c> in</c><00:22:10.880><c> that</c>

00:22:11.050 --> 00:22:11.060 align:start position:0%
interface I am implementing and in that
 

00:22:11.060 --> 00:22:13.540 align:start position:0%
interface I am implementing and in that
interface<00:22:11.360><c> to</c><00:22:11.720><c> identify</c><00:22:12.290><c> which</c><00:22:12.740><c> method</c><00:22:13.220><c> I</c><00:22:13.460><c> am</c>

00:22:13.540 --> 00:22:13.550 align:start position:0%
interface to identify which method I am
 

00:22:13.550 --> 00:22:15.970 align:start position:0%
interface to identify which method I am
implementing<00:22:14.330><c> and</c><00:22:14.720><c> when</c><00:22:15.440><c> I</c><00:22:15.470><c> have</c><00:22:15.740><c> identified</c>

00:22:15.970 --> 00:22:15.980 align:start position:0%
implementing and when I have identified
 

00:22:15.980 --> 00:22:18.160 align:start position:0%
implementing and when I have identified
that<00:22:16.550><c> it's</c><00:22:17.030><c> a</c><00:22:17.150><c> matter</c><00:22:17.330><c> of</c><00:22:17.420><c> taking</c><00:22:17.690><c> the</c><00:22:17.870><c> block</c>

00:22:18.160 --> 00:22:18.170 align:start position:0%
that it's a matter of taking the block
 

00:22:18.170 --> 00:22:20.500 align:start position:0%
that it's a matter of taking the block
of<00:22:18.320><c> parameter</c><00:22:19.060><c> understanding</c><00:22:20.060><c> what</c><00:22:20.300><c> should</c>

00:22:20.500 --> 00:22:20.510 align:start position:0%
of parameter understanding what should
 

00:22:20.510 --> 00:22:22.660 align:start position:0%
of parameter understanding what should
be<00:22:20.630><c> returned</c><00:22:20.960><c> and</c><00:22:21.200><c> be</c><00:22:21.800><c> smart</c><00:22:22.130><c> and</c><00:22:22.430><c> put</c><00:22:22.580><c> the</c>

00:22:22.660 --> 00:22:22.670 align:start position:0%
be returned and be smart and put the
 

00:22:22.670 --> 00:22:26.290 align:start position:0%
be returned and be smart and put the
right<00:22:22.820><c> code</c><00:22:23.090><c> in</c><00:22:23.740><c> the</c><00:22:24.740><c> body</c><00:22:24.920><c> of</c><00:22:25.040><c> them</c><00:22:25.300><c> so</c>

00:22:26.290 --> 00:22:26.300 align:start position:0%
right code in the body of them so
 

00:22:26.300 --> 00:22:28.780 align:start position:0%
right code in the body of them so
basically<00:22:26.480><c> a</c><00:22:26.810><c> method</c><00:22:27.130><c> lambda</c><00:22:28.130><c> is</c><00:22:28.310><c> just</c><00:22:28.370><c> a</c>

00:22:28.780 --> 00:22:28.790 align:start position:0%
basically a method lambda is just a
 

00:22:28.790 --> 00:22:32.440 align:start position:0%
basically a method lambda is just a
method<00:22:28.970><c> that</c><00:22:29.960><c> I</c><00:22:30.020><c> can</c><00:22:30.320><c> pass</c><00:22:30.590><c> as</c><00:22:30.890><c> a</c><00:22:30.950><c> parameter</c><00:22:31.450><c> in</c>

00:22:32.440 --> 00:22:32.450 align:start position:0%
method that I can pass as a parameter in
 

00:22:32.450 --> 00:22:38.470 align:start position:0%
method that I can pass as a parameter in
my<00:22:32.660><c> code</c><00:22:32.900><c> in</c><00:22:33.110><c> my</c><00:22:33.170><c> application</c><00:22:37.450><c> there</c><00:22:38.450><c> is</c>

00:22:38.470 --> 00:22:38.480 align:start position:0%
my code in my application there is
 

00:22:38.480 --> 00:22:41.230 align:start position:0%
my code in my application there is
something<00:22:39.040><c> kind</c><00:22:40.040><c> of</c><00:22:40.160><c> where</c><00:22:40.400><c> that</c><00:22:40.700><c> just</c><00:22:40.850><c> happen</c>

00:22:41.230 --> 00:22:41.240 align:start position:0%
something kind of where that just happen
 

00:22:41.240 --> 00:22:43.630 align:start position:0%
something kind of where that just happen
ah<00:22:41.270><c> yes</c><00:22:41.900><c> this</c><00:22:42.170><c> funny</c><00:22:42.740><c> syntax</c><00:22:43.220><c> is</c><00:22:43.370><c> called</c><00:22:43.580><c> a</c>

00:22:43.630 --> 00:22:43.640 align:start position:0%
ah yes this funny syntax is called a
 

00:22:43.640 --> 00:22:44.980 align:start position:0%
ah yes this funny syntax is called a
method<00:22:43.820><c> reference</c><00:22:44.330><c> we</c><00:22:44.450><c> are</c><00:22:44.510><c> going</c><00:22:44.660><c> to</c><00:22:44.810><c> see</c>

00:22:44.980 --> 00:22:44.990 align:start position:0%
method reference we are going to see
 

00:22:44.990 --> 00:22:46.750 align:start position:0%
method reference we are going to see
that<00:22:45.110><c> in</c><00:22:45.290><c> a</c><00:22:45.350><c> minute</c><00:22:45.470><c> that</c><00:22:46.100><c> is</c><00:22:46.220><c> the</c><00:22:46.370><c> for</c><00:22:46.610><c> each</c>

00:22:46.750 --> 00:22:46.760 align:start position:0%
that in a minute that is the for each
 

00:22:46.760 --> 00:22:50.380 align:start position:0%
that in a minute that is the for each
method<00:22:47.560><c> is</c><00:22:48.560><c> defined</c><00:22:48.830><c> on</c><00:22:49.130><c> the</c><00:22:49.910><c> iterable</c>

00:22:50.380 --> 00:22:50.390 align:start position:0%
method is defined on the iterable
 

00:22:50.390 --> 00:22:52.720 align:start position:0%
method is defined on the iterable
interface<00:22:50.540><c> this</c><00:22:51.350><c> is</c><00:22:51.560><c> the</c><00:22:51.830><c> code</c><00:22:52.100><c> that</c><00:22:52.130><c> we</c><00:22:52.520><c> just</c>

00:22:52.720 --> 00:22:52.730 align:start position:0%
interface this is the code that we just
 

00:22:52.730 --> 00:22:58.360 align:start position:0%
interface this is the code that we just
wrote<00:22:53.140><c> here</c><00:22:54.370><c> right</c><00:22:55.370><c> and</c><00:22:56.180><c> has</c><00:22:57.110><c> been</c><00:22:57.410><c> added</c><00:22:57.800><c> in</c>

00:22:58.360 --> 00:22:58.370 align:start position:0%
wrote here right and has been added in
 

00:22:58.370 --> 00:23:01.060 align:start position:0%
wrote here right and has been added in
Java<00:22:58.580><c> 8</c><00:22:58.880><c> so</c><00:22:59.720><c> adding</c><00:23:00.440><c> a</c><00:23:00.530><c> method</c><00:23:00.830><c> in</c><00:23:00.980><c> an</c>

00:23:01.060 --> 00:23:01.070 align:start position:0%
Java 8 so adding a method in an
 

00:23:01.070 --> 00:23:04.120 align:start position:0%
Java 8 so adding a method in an
interface<00:23:01.550><c> of</c><00:23:01.850><c> course</c><00:23:02.470><c> implies</c><00:23:03.470><c> that</c><00:23:03.680><c> all</c><00:23:03.920><c> the</c>

00:23:04.120 --> 00:23:04.130 align:start position:0%
interface of course implies that all the
 

00:23:04.130 --> 00:23:05.920 align:start position:0%
interface of course implies that all the
implementations<00:23:04.850><c> of</c><00:23:04.940><c> that</c><00:23:05.120><c> interface</c><00:23:05.570><c> should</c>

00:23:05.920 --> 00:23:05.930 align:start position:0%
implementations of that interface should
 

00:23:05.930 --> 00:23:10.570 align:start position:0%
implementations of that interface should
be<00:23:06.080><c> updated</c><00:23:07.720><c> for</c><00:23:08.720><c> the</c><00:23:09.050><c> code</c><00:23:09.200><c> to</c><00:23:09.230><c> work</c><00:23:09.500><c> and</c><00:23:09.860><c> of</c>

00:23:10.570 --> 00:23:10.580 align:start position:0%
be updated for the code to work and of
 

00:23:10.580 --> 00:23:13.480 align:start position:0%
be updated for the code to work and of
course<00:23:11.170><c> it</c><00:23:12.170><c> would</c><00:23:12.650><c> have</c><00:23:12.800><c> meant</c><00:23:12.980><c> to</c><00:23:13.100><c> refactor</c>

00:23:13.480 --> 00:23:13.490 align:start position:0%
course it would have meant to refactor
 

00:23:13.490 --> 00:23:15.730 align:start position:0%
course it would have meant to refactor
all<00:23:13.730><c> the</c><00:23:13.880><c> collection</c><00:23:14.270><c> API</c><00:23:14.540><c> and</c><00:23:14.930><c> all</c><00:23:15.530><c> the</c>

00:23:15.730 --> 00:23:15.740 align:start position:0%
all the collection API and all the
 

00:23:15.740 --> 00:23:18.310 align:start position:0%
all the collection API and all the
existing<00:23:16.000><c> implementations</c><00:23:17.000><c> of</c><00:23:17.290><c> iterable</c>

00:23:18.310 --> 00:23:18.320 align:start position:0%
existing implementations of iterable
 

00:23:18.320 --> 00:23:20.350 align:start position:0%
existing implementations of iterable
interval<00:23:18.800><c> is</c><00:23:18.920><c> the</c><00:23:18.950><c> root</c><00:23:19.310><c> interface</c><00:23:20.000><c> of</c><00:23:20.180><c> all</c>

00:23:20.350 --> 00:23:20.360 align:start position:0%
interval is the root interface of all
 

00:23:20.360 --> 00:23:23.920 align:start position:0%
interval is the root interface of all
the<00:23:20.450><c> collection</c><00:23:20.900><c> yard</c><00:23:22.120><c> so</c><00:23:23.120><c> so</c><00:23:23.540><c> it</c><00:23:23.630><c> would</c><00:23:23.810><c> have</c>

00:23:23.920 --> 00:23:23.930 align:start position:0%
the collection yard so so it would have
 

00:23:23.930 --> 00:23:26.620 align:start position:0%
the collection yard so so it would have
required<00:23:24.110><c> to</c><00:23:24.590><c> update</c><00:23:24.980><c> all</c><00:23:25.610><c> the</c><00:23:26.030><c> code</c><00:23:26.270><c> around</c>

00:23:26.620 --> 00:23:26.630 align:start position:0%
required to update all the code around
 

00:23:26.630 --> 00:23:28.180 align:start position:0%
required to update all the code around
which<00:23:26.900><c> would</c><00:23:27.140><c> not</c><00:23:27.320><c> have</c><00:23:27.350><c> been</c><00:23:27.680><c> possible</c><00:23:27.860><c> of</c>

00:23:28.180 --> 00:23:28.190 align:start position:0%
which would not have been possible of
 

00:23:28.190 --> 00:23:30.580 align:start position:0%
which would not have been possible of
course<00:23:28.220><c> it</c><00:23:29.090><c> would</c><00:23:29.300><c> have</c><00:23:29.420><c> broken</c><00:23:29.810><c> the</c><00:23:30.230><c> backward</c>

00:23:30.580 --> 00:23:30.590 align:start position:0%
course it would have broken the backward
 

00:23:30.590 --> 00:23:32.950 align:start position:0%
course it would have broken the backward
compatibility<00:23:31.130><c> of</c><00:23:32.060><c> the</c><00:23:32.510><c> correction</c>

00:23:32.950 --> 00:23:32.960 align:start position:0%
compatibility of the correction
 

00:23:32.960 --> 00:23:35.590 align:start position:0%
compatibility of the correction
framework<00:23:33.350><c> which</c><00:23:34.190><c> is</c><00:23:34.430><c> not</c><00:23:34.850><c> possible</c><00:23:35.120><c> so</c><00:23:35.480><c> now</c>

00:23:35.590 --> 00:23:35.600 align:start position:0%
framework which is not possible so now
 

00:23:35.600 --> 00:23:37.150 align:start position:0%
framework which is not possible so now
go<00:23:35.750><c> in</c><00:23:35.840><c> Java</c><00:23:36.050><c> to</c><00:23:36.080><c> do</c><00:23:36.320><c> this</c><00:23:36.470><c> kind</c><00:23:36.710><c> of</c><00:23:36.770><c> thing</c><00:23:36.950><c> so</c>

00:23:37.150 --> 00:23:37.160 align:start position:0%
go in Java to do this kind of thing so
 

00:23:37.160 --> 00:23:40.930 align:start position:0%
go in Java to do this kind of thing so
the<00:23:37.910><c> way</c><00:23:38.090><c> interfaces</c><00:23:38.900><c> work</c><00:23:39.460><c> if</c><00:23:40.460><c> you</c><00:23:40.670><c> have</c><00:23:40.820><c> an</c>

00:23:40.930 --> 00:23:40.940 align:start position:0%
the way interfaces work if you have an
 

00:23:40.940 --> 00:23:43.120 align:start position:0%
the way interfaces work if you have an
empty<00:23:41.150><c> seat</c><00:23:41.470><c> near</c><00:23:42.470><c> you</c><00:23:42.650><c> can</c><00:23:42.800><c> you</c><00:23:42.920><c> raise</c><00:23:43.100><c> your</c>

00:23:43.120 --> 00:23:43.130 align:start position:0%
empty seat near you can you raise your
 

00:23:43.130 --> 00:23:45.190 align:start position:0%
empty seat near you can you raise your
hand<00:23:43.370><c> again</c><00:23:43.580><c> please</c><00:23:44.240><c> comment</c><00:23:44.630><c> can</c><00:23:44.780><c> have</c><00:23:45.140><c> a</c>

00:23:45.190 --> 00:23:45.200 align:start position:0%
hand again please comment can have a
 

00:23:45.200 --> 00:23:49.570 align:start position:0%
hand again please comment can have a
seat<00:23:45.380><c> downtown</c><00:23:45.770><c> stay</c><00:23:46.010><c> at</c><00:23:46.880><c> the</c><00:23:47.000><c> back</c><00:23:48.460><c> so</c><00:23:49.460><c> the</c>

00:23:49.570 --> 00:23:49.580 align:start position:0%
seat downtown stay at the back so the
 

00:23:49.580 --> 00:23:51.940 align:start position:0%
seat downtown stay at the back so the
way<00:23:49.730><c> interfaces</c><00:23:50.360><c> work</c><00:23:50.900><c> have</c><00:23:51.230><c> been</c><00:23:51.260><c> modified</c>

00:23:51.940 --> 00:23:51.950 align:start position:0%
way interfaces work have been modified
 

00:23:51.950 --> 00:23:55.030 align:start position:0%
way interfaces work have been modified
in<00:23:52.130><c> Java</c><00:23:52.340><c> 8</c><00:23:52.550><c> and</c><00:23:53.020><c> for</c><00:23:54.020><c> each</c><00:23:54.140><c> method</c><00:23:54.380><c> is</c><00:23:54.650><c> in</c><00:23:54.830><c> fact</c>

00:23:55.030 --> 00:23:55.040 align:start position:0%
in Java 8 and for each method is in fact
 

00:23:55.040 --> 00:23:57.460 align:start position:0%
in Java 8 and for each method is in fact
a<00:23:55.160><c> default</c><00:23:55.700><c> method</c><00:23:55.910><c> what</c><00:23:56.840><c> is</c><00:23:56.870><c> a</c><00:23:57.050><c> default</c>

00:23:57.460 --> 00:23:57.470 align:start position:0%
a default method what is a default
 

00:23:57.470 --> 00:24:00.580 align:start position:0%
a default method what is a default
method<00:23:57.650><c> it's</c><00:23:58.250><c> a</c><00:23:58.430><c> regular</c><00:23:58.820><c> method</c><00:23:59.140><c> added</c><00:24:00.140><c> in</c><00:24:00.380><c> an</c>

00:24:00.580 --> 00:24:00.590 align:start position:0%
method it's a regular method added in an
 

00:24:00.590 --> 00:24:02.740 align:start position:0%
method it's a regular method added in an
interface<00:24:01.040><c> along</c><00:24:01.760><c> with</c><00:24:02.150><c> its</c><00:24:02.330><c> implementation</c>

00:24:02.740 --> 00:24:02.750 align:start position:0%
interface along with its implementation
 

00:24:02.750 --> 00:24:04.330 align:start position:0%
interface along with its implementation
it<00:24:03.380><c> just</c><00:24:03.620><c> had</c><00:24:03.770><c> the</c><00:24:03.920><c> default</c>

00:24:04.330 --> 00:24:04.340 align:start position:0%
it just had the default
 

00:24:04.340 --> 00:24:06.909 align:start position:0%
it just had the default
keyword<00:24:04.640><c> in</c><00:24:04.789><c> front</c><00:24:05.029><c> of</c><00:24:05.179><c> in</c><00:24:05.390><c> front</c><00:24:05.600><c> of</c><00:24:05.720><c> it</c><00:24:05.919><c> right</c>

00:24:06.909 --> 00:24:06.919 align:start position:0%
keyword in front of in front of it right
 

00:24:06.919 --> 00:24:11.230 align:start position:0%
keyword in front of in front of it right
and<00:24:08.350><c> there's</c><00:24:09.350><c> something</c><00:24:09.710><c> it's</c><00:24:10.279><c> it</c><00:24:10.669><c> is</c><00:24:10.820><c> just</c><00:24:11.090><c> a</c>

00:24:11.230 --> 00:24:11.240 align:start position:0%
and there's something it's it is just a
 

00:24:11.240 --> 00:24:15.130 align:start position:0%
and there's something it's it is just a
plain<00:24:11.529><c> regular</c><00:24:12.529><c> method</c><00:24:12.860><c> very</c><00:24:13.549><c> very</c><00:24:14.179><c> easy</c><00:24:14.900><c> to</c>

00:24:15.130 --> 00:24:15.140 align:start position:0%
plain regular method very very easy to
 

00:24:15.140 --> 00:24:19.060 align:start position:0%
plain regular method very very easy to
understand<00:24:15.529><c> the</c><00:24:15.799><c> this</c><00:24:16.220><c> default</c><00:24:17.120><c> method</c><00:24:17.470><c> is</c><00:24:18.470><c> a</c>

00:24:19.060 --> 00:24:19.070 align:start position:0%
understand the this default method is a
 

00:24:19.070 --> 00:24:20.950 align:start position:0%
understand the this default method is a
normal<00:24:19.460><c> method</c><00:24:19.610><c> put</c><00:24:20.000><c> in</c><00:24:20.120><c> an</c><00:24:20.240><c> interface</c><00:24:20.630><c> what</c>

00:24:20.950 --> 00:24:20.960 align:start position:0%
normal method put in an interface what
 

00:24:20.960 --> 00:24:22.330 align:start position:0%
normal method put in an interface what
is<00:24:21.080><c> new</c><00:24:21.289><c> is</c><00:24:21.440><c> that</c><00:24:21.470><c> we</c><00:24:21.650><c> can</c><00:24:21.950><c> now</c><00:24:22.130><c> have</c>

00:24:22.330 --> 00:24:22.340 align:start position:0%
is new is that we can now have
 

00:24:22.340 --> 00:24:24.580 align:start position:0%
is new is that we can now have
implementations<00:24:23.210><c> in</c><00:24:23.480><c> an</c><00:24:23.690><c> interface</c><00:24:24.080><c> was</c><00:24:24.409><c> not</c>

00:24:24.580 --> 00:24:24.590 align:start position:0%
implementations in an interface was not
 

00:24:24.590 --> 00:24:27.370 align:start position:0%
implementations in an interface was not
possible<00:24:25.070><c> up</c><00:24:25.460><c> to</c><00:24:25.640><c> Java</c><00:24:25.850><c> 7</c><00:24:26.000><c> but</c><00:24:26.750><c> it</c><00:24:26.960><c> is</c><00:24:27.080><c> a</c><00:24:27.110><c> new</c>

00:24:27.370 --> 00:24:27.380 align:start position:0%
possible up to Java 7 but it is a new
 

00:24:27.380 --> 00:24:31.149 align:start position:0%
possible up to Java 7 but it is a new
concept<00:24:27.590><c> of</c><00:24:29.260><c> interface</c><00:24:30.260><c> it</c><00:24:30.529><c> is</c><00:24:30.710><c> not</c><00:24:30.890><c> a</c><00:24:30.919><c> new</c>

00:24:31.149 --> 00:24:31.159 align:start position:0%
concept of interface it is not a new
 

00:24:31.159 --> 00:24:33.610 align:start position:0%
concept of interface it is not a new
concept<00:24:31.370><c> of</c><00:24:31.760><c> method</c><00:24:32.120><c> it</c><00:24:32.450><c> is</c><00:24:32.510><c> just</c><00:24:32.870><c> a</c><00:24:32.990><c> plain</c><00:24:33.409><c> old</c>

00:24:33.610 --> 00:24:33.620 align:start position:0%
concept of method it is just a plain old
 

00:24:33.620 --> 00:24:36.070 align:start position:0%
concept of method it is just a plain old
regular<00:24:34.010><c> method</c><00:24:34.549><c> as</c><00:24:35.029><c> well</c><00:24:35.270><c> used</c><00:24:35.510><c> to</c><00:24:35.630><c> write</c>

00:24:36.070 --> 00:24:36.080 align:start position:0%
regular method as well used to write
 

00:24:36.080 --> 00:24:39.430 align:start position:0%
regular method as well used to write
down<00:24:36.399><c> this</c><00:24:37.399><c> is</c><00:24:37.700><c> how</c><00:24:38.000><c> it</c><00:24:38.360><c> has</c><00:24:38.600><c> been</c><00:24:38.750><c> sold</c><00:24:39.080><c> to</c><00:24:39.260><c> us</c>

00:24:39.430 --> 00:24:39.440 align:start position:0%
down this is how it has been sold to us
 

00:24:39.440 --> 00:24:42.490 align:start position:0%
down this is how it has been sold to us
when<00:24:40.279><c> Java</c><00:24:40.520><c> 8</c><00:24:40.700><c> was</c><00:24:40.909><c> released</c><00:24:41.080><c> almost</c><00:24:42.080><c> 4</c><00:24:42.470><c> years</c>

00:24:42.490 --> 00:24:42.500 align:start position:0%
when Java 8 was released almost 4 years
 

00:24:42.500 --> 00:24:45.430 align:start position:0%
when Java 8 was released almost 4 years
ago<00:24:43.179><c> but</c><00:24:44.179><c> it</c><00:24:44.330><c> is</c><00:24:44.450><c> much</c><00:24:44.720><c> much</c><00:24:44.990><c> more</c><00:24:45.260><c> than</c><00:24:45.409><c> that</c>

00:24:45.430 --> 00:24:45.440 align:start position:0%
ago but it is much much more than that
 

00:24:45.440 --> 00:24:47.769 align:start position:0%
ago but it is much much more than that
and<00:24:45.799><c> and</c><00:24:46.340><c> I</c><00:24:46.490><c> guess</c><00:24:46.700><c> that</c><00:24:46.940><c> in</c><00:24:47.149><c> a</c><00:24:47.210><c> few</c><00:24:47.510><c> years</c><00:24:47.690><c> from</c>

00:24:47.769 --> 00:24:47.779 align:start position:0%
and and I guess that in a few years from
 

00:24:47.779 --> 00:24:50.350 align:start position:0%
and and I guess that in a few years from
now<00:24:48.110><c> people</c><00:24:48.320><c> will</c><00:24:48.649><c> not</c><00:24:49.039><c> be</c><00:24:49.279><c> learning</c><00:24:49.789><c> that</c>

00:24:50.350 --> 00:24:50.360 align:start position:0%
now people will not be learning that
 

00:24:50.360 --> 00:24:52.180 align:start position:0%
now people will not be learning that
default<00:24:50.840><c> method</c><00:24:51.020><c> have</c><00:24:51.320><c> been</c><00:24:51.500><c> introduced</c><00:24:51.980><c> for</c>

00:24:52.180 --> 00:24:52.190 align:start position:0%
default method have been introduced for
 

00:24:52.190 --> 00:24:53.740 align:start position:0%
default method have been introduced for
the<00:24:52.220><c> backward</c><00:24:52.669><c> compatibility</c><00:24:53.210><c> bla</c><00:24:53.570><c> bla</c><00:24:53.690><c> bla</c>

00:24:53.740 --> 00:24:53.750 align:start position:0%
the backward compatibility bla bla bla
 

00:24:53.750 --> 00:24:57.700 align:start position:0%
the backward compatibility bla bla bla
they<00:24:54.590><c> will</c><00:24:54.980><c> learn</c><00:24:55.100><c> something</c><00:24:55.460><c> else</c><00:24:55.730><c> and</c><00:24:56.720><c> by</c>

00:24:57.700 --> 00:24:57.710 align:start position:0%
they will learn something else and by
 

00:24:57.710 --> 00:24:59.560 align:start position:0%
they will learn something else and by
the<00:24:57.770><c> way</c><00:24:57.950><c> we</c><00:24:58.100><c> can</c><00:24:58.250><c> also</c><00:24:58.279><c> put</c><00:24:58.760><c> public</c><00:24:59.029><c> static</c>

00:24:59.560 --> 00:24:59.570 align:start position:0%
the way we can also put public static
 

00:24:59.570 --> 00:25:03.340 align:start position:0%
the way we can also put public static
methods<00:24:59.960><c> in</c><00:25:00.289><c> Java</c><00:25:00.470><c> 8</c><00:25:00.799><c> in</c><00:25:01.520><c> interfaces</c><00:25:02.210><c> which</c><00:25:03.200><c> is</c>

00:25:03.340 --> 00:25:03.350 align:start position:0%
methods in Java 8 in interfaces which is
 

00:25:03.350 --> 00:25:05.560 align:start position:0%
methods in Java 8 in interfaces which is
new<00:25:03.559><c> and</c><00:25:03.770><c> in</c><00:25:04.220><c> Java</c><00:25:04.460><c> 9</c><00:25:04.640><c> will</c><00:25:04.909><c> be</c><00:25:05.090><c> able</c><00:25:05.210><c> to</c><00:25:05.419><c> put</c>

00:25:05.560 --> 00:25:05.570 align:start position:0%
new and in Java 9 will be able to put
 

00:25:05.570 --> 00:25:10.600 align:start position:0%
new and in Java 9 will be able to put
private<00:25:05.899><c> static</c><00:25:06.440><c> methods</c><00:25:06.799><c> to</c><00:25:08.529><c> so</c><00:25:09.529><c> a</c><00:25:09.860><c> function</c>

00:25:10.600 --> 00:25:10.610 align:start position:0%
private static methods to so a function
 

00:25:10.610 --> 00:25:13.870 align:start position:0%
private static methods to so a function
will<00:25:10.730><c> isn't</c><00:25:10.850><c> so</c><00:25:11.390><c> now</c><00:25:12.260><c> in</c><00:25:12.440><c> an</c><00:25:12.590><c> interface</c><00:25:13.039><c> I</c><00:25:13.399><c> can</c>

00:25:13.870 --> 00:25:13.880 align:start position:0%
will isn't so now in an interface I can
 

00:25:13.880 --> 00:25:16.419 align:start position:0%
will isn't so now in an interface I can
have<00:25:14.090><c> abstract</c><00:25:14.960><c> methods</c><00:25:15.350><c> default</c><00:25:16.039><c> methods</c>

00:25:16.419 --> 00:25:16.429 align:start position:0%
have abstract methods default methods
 

00:25:16.429 --> 00:25:19.810 align:start position:0%
have abstract methods default methods
and<00:25:16.640><c> static</c><00:25:17.419><c> methods</c><00:25:17.799><c> only</c><00:25:18.799><c> abstract</c><00:25:19.490><c> methods</c>

00:25:19.810 --> 00:25:19.820 align:start position:0%
and static methods only abstract methods
 

00:25:19.820 --> 00:25:23.080 align:start position:0%
and static methods only abstract methods
count<00:25:20.320><c> to</c><00:25:21.320><c> tell</c><00:25:21.529><c> if</c><00:25:21.679><c> an</c><00:25:21.830><c> interfaces</c><00:25:22.490><c> is</c><00:25:23.029><c> a</c>

00:25:23.080 --> 00:25:23.090 align:start position:0%
count to tell if an interfaces is a
 

00:25:23.090 --> 00:25:25.570 align:start position:0%
count to tell if an interfaces is a
functional<00:25:23.630><c> interface</c><00:25:24.049><c> or</c><00:25:24.350><c> not</c><00:25:24.590><c> default</c><00:25:25.370><c> and</c>

00:25:25.570 --> 00:25:25.580 align:start position:0%
functional interface or not default and
 

00:25:25.580 --> 00:25:28.360 align:start position:0%
functional interface or not default and
static<00:25:25.909><c> method</c><00:25:26.240><c> do</c><00:25:26.779><c> not</c><00:25:26.929><c> count</c><00:25:27.140><c> which</c><00:25:28.010><c> is</c><00:25:28.190><c> nice</c>

00:25:28.360 --> 00:25:28.370 align:start position:0%
static method do not count which is nice
 

00:25:28.370 --> 00:25:30.340 align:start position:0%
static method do not count which is nice
because<00:25:28.580><c> it</c><00:25:28.820><c> means</c><00:25:29.179><c> that</c><00:25:29.450><c> I</c><00:25:29.480><c> will</c><00:25:29.630><c> be</c><00:25:29.960><c> able</c><00:25:30.080><c> to</c>

00:25:30.340 --> 00:25:30.350 align:start position:0%
because it means that I will be able to
 

00:25:30.350 --> 00:25:32.110 align:start position:0%
because it means that I will be able to
put<00:25:30.529><c> abstract</c><00:25:31.250><c> methods</c><00:25:31.580><c> in</c><00:25:31.730><c> function</c>

00:25:32.110 --> 00:25:32.120 align:start position:0%
put abstract methods in function
 

00:25:32.120 --> 00:25:34.539 align:start position:0%
put abstract methods in function
interface<00:25:32.330><c> and</c><00:25:32.630><c> add</c><00:25:32.720><c> a</c><00:25:32.750><c> bunch</c><00:25:33.020><c> of</c><00:25:33.200><c> of</c><00:25:33.860><c> default</c>

00:25:34.539 --> 00:25:34.549 align:start position:0%
interface and add a bunch of of default
 

00:25:34.549 --> 00:25:36.899 align:start position:0%
interface and add a bunch of of default
method<00:25:34.850><c> which</c><00:25:35.059><c> is</c><00:25:35.240><c> what</c><00:25:35.510><c> I'm</c><00:25:35.630><c> going</c><00:25:35.840><c> to</c><00:25:35.899><c> do</c>

00:25:36.899 --> 00:25:36.909 align:start position:0%
method which is what I'm going to do
 

00:25:36.909 --> 00:25:45.549 align:start position:0%
method which is what I'm going to do
another<00:25:41.200><c> what</c><00:25:42.200><c> are</c><00:25:42.320><c> we</c><00:25:42.409><c> going</c><00:25:42.559><c> to</c><00:25:42.679><c> do</c><00:25:44.559><c> I'm</c>

00:25:45.549 --> 00:25:45.559 align:start position:0%
another what are we going to do I'm
 

00:25:45.559 --> 00:25:46.630 align:start position:0%
another what are we going to do I'm
going<00:25:45.740><c> to</c><00:25:45.890><c> close</c><00:25:46.130><c> this</c><00:25:46.340><c> tab</c>

00:25:46.630 --> 00:25:46.640 align:start position:0%
going to close this tab
 

00:25:46.640 --> 00:25:53.690 align:start position:0%
going to close this tab
I<00:25:48.220><c> don't</c><00:25:49.220><c> need</c><00:25:49.309><c> it</c><00:25:49.460><c> anymore</c>

00:25:53.690 --> 00:25:53.700 align:start position:0%
 
 

00:25:53.700 --> 00:25:56.600 align:start position:0%
 
I<00:25:53.779><c> prepare</c><00:25:54.779><c> the</c><00:25:55.049><c> two</c><00:25:55.919><c> interfaces</c><00:25:56.130><c> we</c><00:25:56.519><c> are</c>

00:25:56.600 --> 00:25:56.610 align:start position:0%
I prepare the two interfaces we are
 

00:25:56.610 --> 00:25:57.440 align:start position:0%
I prepare the two interfaces we are
going<00:25:56.760><c> to</c><00:25:56.880><c> use</c><00:25:57.029><c> now</c>

00:25:57.440 --> 00:25:57.450 align:start position:0%
going to use now
 

00:25:57.450 --> 00:25:59.600 align:start position:0%
going to use now
first<00:25:57.750><c> the</c><00:25:57.929><c> my</c><00:25:58.110><c> consumer</c><00:25:58.679><c> interface</c><00:25:59.039><c> which</c><00:25:59.429><c> is</c>

00:25:59.600 --> 00:25:59.610 align:start position:0%
first the my consumer interface which is
 

00:25:59.610 --> 00:26:02.029 align:start position:0%
first the my consumer interface which is
a<00:25:59.639><c> mimic</c><00:25:59.880><c> of</c><00:26:00.149><c> a</c><00:26:00.210><c> consumer</c><00:26:00.899><c> interface</c><00:26:01.289><c> from</c><00:26:01.889><c> the</c>

00:26:02.029 --> 00:26:02.039 align:start position:0%
a mimic of a consumer interface from the
 

00:26:02.039 --> 00:26:03.289 align:start position:0%
a mimic of a consumer interface from the
java.util<00:26:02.490><c> package</c><00:26:02.519><c> that</c><00:26:02.970><c> we're</c><00:26:03.120><c> going</c><00:26:03.240><c> to</c>

00:26:03.289 --> 00:26:03.299 align:start position:0%
java.util package that we're going to
 

00:26:03.299 --> 00:26:06.139 align:start position:0%
java.util package that we're going to
talk<00:26:03.570><c> about</c><00:26:03.720><c> in</c><00:26:04.500><c> a</c><00:26:04.559><c> minute</c><00:26:04.730><c> and</c><00:26:05.730><c> we</c><00:26:05.940><c> are</c><00:26:06.000><c> going</c>

00:26:06.139 --> 00:26:06.149 align:start position:0%
talk about in a minute and we are going
 

00:26:06.149 --> 00:26:07.789 align:start position:0%
talk about in a minute and we are going
to<00:26:06.299><c> do</c><00:26:06.480><c> stuff</c><00:26:06.720><c> with</c><00:26:06.899><c> it</c><00:26:07.019><c> what</c><00:26:07.409><c> is</c><00:26:07.529><c> a</c><00:26:07.559><c> consumer</c>

00:26:07.789 --> 00:26:07.799 align:start position:0%
to do stuff with it what is a consumer
 

00:26:07.799 --> 00:26:10.580 align:start position:0%
to do stuff with it what is a consumer
it<00:26:08.730><c> has</c><00:26:08.880><c> only</c><00:26:09.000><c> one</c><00:26:09.330><c> method</c><00:26:09.600><c> this</c><00:26:10.289><c> is</c><00:26:10.350><c> the</c>

00:26:10.580 --> 00:26:10.590 align:start position:0%
it has only one method this is the
 

00:26:10.590 --> 00:26:12.259 align:start position:0%
it has only one method this is the
system<00:26:10.950><c> dot</c><00:26:11.100><c> out</c><00:26:11.220><c> dot</c><00:26:11.279><c> println</c><00:26:11.460><c> we've</c><00:26:12.120><c> been</c>

00:26:12.259 --> 00:26:12.269 align:start position:0%
system dot out dot println we've been
 

00:26:12.269 --> 00:26:14.149 align:start position:0%
system dot out dot println we've been
using<00:26:12.510><c> with</c><00:26:12.809><c> the</c><00:26:12.899><c> Forex</c><00:26:13.200><c> method</c><00:26:13.529><c> a</c><00:26:13.710><c> few</c>

00:26:14.149 --> 00:26:14.159 align:start position:0%
using with the Forex method a few
 

00:26:14.159 --> 00:26:20.840 align:start position:0%
using with the Forex method a few
minutes<00:26:14.490><c> ago</c><00:26:14.610><c> right</c><00:26:15.059><c> so</c><00:26:17.480><c> I'm</c><00:26:18.480><c> going</c><00:26:18.779><c> to</c><00:26:19.850><c> create</c>

00:26:20.840 --> 00:26:20.850 align:start position:0%
minutes ago right so I'm going to create
 

00:26:20.850 --> 00:26:24.409 align:start position:0%
minutes ago right so I'm going to create
a<00:26:21.000><c> first</c><00:26:21.299><c> consumer</c><00:26:21.690><c> consumer</c><00:26:22.320><c> string</c><00:26:23.419><c> for</c>

00:26:24.409 --> 00:26:24.419 align:start position:0%
a first consumer consumer string for
 

00:26:24.419 --> 00:26:44.410 align:start position:0%
a first consumer consumer string for
instance<00:26:24.840><c> are</c><00:26:25.080><c> eating</c><00:26:25.440><c> yeah</c>

00:26:44.410 --> 00:26:44.420 align:start position:0%
 
 

00:26:44.420 --> 00:26:54.850 align:start position:0%
 
yeah<00:26:45.420><c> this</c><00:26:46.350><c> is</c><00:26:47.180><c> eating</c><00:26:48.290><c> yes</c><00:26:50.330><c> okay</c><00:26:51.330><c> and</c><00:26:51.740><c> if</c><00:26:52.740><c> I'm</c>

00:26:54.850 --> 00:26:54.860 align:start position:0%
yeah this is eating yes okay and if I'm
 

00:26:54.860 --> 00:26:57.590 align:start position:0%
yeah this is eating yes okay and if I'm
calling<00:26:55.860><c> the</c><00:26:56.190><c> accept</c><00:26:56.640><c> method</c><00:26:56.700><c> of</c><00:26:57.180><c> this</c><00:26:57.330><c> my</c>

00:26:57.590 --> 00:26:57.600 align:start position:0%
calling the accept method of this my
 

00:26:57.600 --> 00:27:05.030 align:start position:0%
calling the accept method of this my
consumer<00:26:58.020><c> interface</c><00:26:59.390><c> eating</c><00:27:00.390><c> chicken</c><00:27:01.260><c> and</c><00:27:04.040><c> I</c>

00:27:05.030 --> 00:27:05.040 align:start position:0%
consumer interface eating chicken and I
 

00:27:05.040 --> 00:27:07.550 align:start position:0%
consumer interface eating chicken and I
run<00:27:05.250><c> this</c><00:27:05.370><c> code</c><00:27:05.430><c> it</c><00:27:06.150><c> just</c><00:27:06.570><c> displays</c><00:27:06.900><c> eating</c>

00:27:07.550 --> 00:27:07.560 align:start position:0%
run this code it just displays eating
 

00:27:07.560 --> 00:27:10.220 align:start position:0%
run this code it just displays eating
chicken<00:27:07.860><c> which</c><00:27:08.070><c> is</c><00:27:08.100><c> nice</c><00:27:08.480><c> I'm</c><00:27:09.480><c> going</c><00:27:09.870><c> to</c><00:27:10.050><c> write</c>

00:27:10.220 --> 00:27:10.230 align:start position:0%
chicken which is nice I'm going to write
 

00:27:10.230 --> 00:27:18.260 align:start position:0%
chicken which is nice I'm going to write
a<00:27:10.260><c> second</c><00:27:10.860><c> consumer</c><00:27:14.750><c> drinking</c><00:27:16.940><c> right</c><00:27:17.940><c> there's</c>

00:27:18.260 --> 00:27:18.270 align:start position:0%
a second consumer drinking right there's
 

00:27:18.270 --> 00:27:24.590 align:start position:0%
a second consumer drinking right there's
almost<00:27:18.630><c> the</c><00:27:18.720><c> same</c>

00:27:24.590 --> 00:27:24.600 align:start position:0%
 
 

00:27:24.600 --> 00:27:31.800 align:start position:0%
 
drinking<00:27:25.710><c> I'm</c><00:27:26.710><c> going</c><00:27:27.070><c> to</c><00:27:27.220><c> run</c><00:27:27.400><c> it</c><00:27:30.810><c> drinking</c>

00:27:31.800 --> 00:27:31.810 align:start position:0%
drinking I'm going to run it drinking
 

00:27:31.810 --> 00:27:41.730 align:start position:0%
drinking I'm going to run it drinking
drinking<00:27:32.260><c> except</c><00:27:34.200><c> coffee</c><00:27:39.900><c> okay</c><00:27:40.900><c> chicken</c><00:27:41.560><c> and</c>

00:27:41.730 --> 00:27:41.740 align:start position:0%
drinking except coffee okay chicken and
 

00:27:41.740 --> 00:27:43.230 align:start position:0%
drinking except coffee okay chicken and
drinking<00:27:42.070><c> coffee</c><00:27:42.130><c> now</c><00:27:42.550><c> suppose</c><00:27:42.940><c> I</c><00:27:43.060><c> will</c><00:27:43.180><c> I</c>

00:27:43.230 --> 00:27:43.240 align:start position:0%
drinking coffee now suppose I will I
 

00:27:43.240 --> 00:27:49.890 align:start position:0%
drinking coffee now suppose I will I
want<00:27:43.630><c> to</c><00:27:43.810><c> create</c><00:27:44.110><c> another</c><00:27:44.170><c> consumer</c><00:27:48.900><c> eating</c>

00:27:49.890 --> 00:27:49.900 align:start position:0%
want to create another consumer eating
 

00:27:49.900 --> 00:27:56.010 align:start position:0%
want to create another consumer eating
and<00:27:52.200><c> drinking</c><00:27:53.200><c> I</c><00:27:53.700><c> want</c><00:27:54.700><c> in</c><00:27:54.820><c> fact</c><00:27:55.030><c> to</c><00:27:55.360><c> compose</c>

00:27:56.010 --> 00:27:56.020 align:start position:0%
and drinking I want in fact to compose
 

00:27:56.020 --> 00:27:59.990 align:start position:0%
and drinking I want in fact to compose
those<00:27:56.320><c> two</c><00:27:56.530><c> consumers</c><00:27:56.860><c> into</c><00:27:57.580><c> one</c><00:27:57.760><c> just</c><00:27:58.270><c> one</c>

00:27:59.990 --> 00:28:00.000 align:start position:0%
those two consumers into one just one
 

00:28:00.000 --> 00:28:03.630 align:start position:0%
those two consumers into one just one
and<00:28:01.000><c> for</c><00:28:01.600><c> that</c><00:28:01.690><c> I</c><00:28:02.080><c> would</c><00:28:02.770><c> like</c><00:28:03.010><c> to</c><00:28:03.220><c> write</c><00:28:03.430><c> this</c>

00:28:03.630 --> 00:28:03.640 align:start position:0%
and for that I would like to write this
 

00:28:03.640 --> 00:28:09.090 align:start position:0%
and for that I would like to write this
kind<00:28:03.820><c> of</c><00:28:03.970><c> code</c><00:28:04.030><c> and</c><00:28:04.810><c> then</c><00:28:07.050><c> drinking</c><00:28:08.050><c> okay</c><00:28:09.010><c> of</c>

00:28:09.090 --> 00:28:09.100 align:start position:0%
kind of code and then drinking okay of
 

00:28:09.100 --> 00:28:10.560 align:start position:0%
kind of code and then drinking okay of
course<00:28:09.370><c> this</c><00:28:09.520><c> and</c><00:28:09.730><c> then</c><00:28:09.910><c> method</c><00:28:10.240><c> doesn't</c><00:28:10.420><c> work</c>

00:28:10.560 --> 00:28:10.570 align:start position:0%
course this and then method doesn't work
 

00:28:10.570 --> 00:28:13.440 align:start position:0%
course this and then method doesn't work
on<00:28:10.840><c> it</c><00:28:10.990><c> and</c><00:28:11.230><c> then</c><00:28:11.350><c> I</c><00:28:11.560><c> need</c><00:28:11.710><c> to</c><00:28:11.800><c> create</c><00:28:12.010><c> it</c><00:28:12.450><c> how</c>

00:28:13.440 --> 00:28:13.450 align:start position:0%
on it and then I need to create it how
 

00:28:13.450 --> 00:28:15.360 align:start position:0%
on it and then I need to create it how
can<00:28:13.510><c> i</c><00:28:13.870><c> implement</c><00:28:14.530><c> this</c><00:28:14.860><c> kind</c><00:28:14.920><c> of</c><00:28:15.190><c> thought</c>

00:28:15.360 --> 00:28:15.370 align:start position:0%
can i implement this kind of thought
 

00:28:15.370 --> 00:28:17.550 align:start position:0%
can i implement this kind of thought
this<00:28:15.700><c> is</c><00:28:15.850><c> very</c><00:28:15.880><c> basic</c><00:28:16.510><c> pattern</c><00:28:17.020><c> right</c><00:28:17.230><c> I</c><00:28:17.260><c> won't</c>

00:28:17.550 --> 00:28:17.560 align:start position:0%
this is very basic pattern right I won't
 

00:28:17.560 --> 00:28:19.350 align:start position:0%
this is very basic pattern right I won't
just<00:28:17.830><c> to</c><00:28:17.980><c> create</c><00:28:18.190><c> a</c><00:28:18.280><c> consumer</c><00:28:18.760><c> that</c><00:28:18.940><c> will</c><00:28:19.210><c> be</c>

00:28:19.350 --> 00:28:19.360 align:start position:0%
just to create a consumer that will be
 

00:28:19.360 --> 00:28:21.270 align:start position:0%
just to create a consumer that will be
the<00:28:19.540><c> combination</c><00:28:20.440><c> of</c><00:28:20.560><c> the</c><00:28:20.710><c> first</c><00:28:20.950><c> consumer</c>

00:28:21.270 --> 00:28:21.280 align:start position:0%
the combination of the first consumer
 

00:28:21.280 --> 00:28:23.040 align:start position:0%
the combination of the first consumer
and<00:28:21.580><c> that</c><00:28:21.730><c> the</c><00:28:22.150><c> chaining</c><00:28:22.570><c> of</c><00:28:22.750><c> the</c><00:28:22.840><c> first</c>

00:28:23.040 --> 00:28:23.050 align:start position:0%
and that the chaining of the first
 

00:28:23.050 --> 00:28:24.630 align:start position:0%
and that the chaining of the first
consumer<00:28:23.350><c> and</c><00:28:23.590><c> then</c><00:28:23.710><c> the</c><00:28:23.860><c> second</c><00:28:24.220><c> consumer</c>

00:28:24.630 --> 00:28:24.640 align:start position:0%
consumer and then the second consumer
 

00:28:24.640 --> 00:28:27.690 align:start position:0%
consumer and then the second consumer
what<00:28:25.480><c> if</c><00:28:25.600><c> I</c><00:28:25.810><c> check</c><00:28:26.020><c> this</c><00:28:26.050><c> method</c><00:28:26.620><c> and</c><00:28:27.040><c> then</c>

00:28:27.690 --> 00:28:27.700 align:start position:0%
what if I check this method and then
 

00:28:27.700 --> 00:28:30.780 align:start position:0%
what if I check this method and then
what<00:28:28.630><c> is</c><00:28:28.750><c> this</c><00:28:28.960><c> method</c><00:28:29.400><c> it</c><00:28:30.400><c> is</c><00:28:30.460><c> a</c><00:28:30.610><c> method</c>

00:28:30.780 --> 00:28:30.790 align:start position:0%
what is this method it is a method
 

00:28:30.790 --> 00:28:31.410 align:start position:0%
what is this method it is a method
called

00:28:31.410 --> 00:28:31.420 align:start position:0%
called
 

00:28:31.420 --> 00:28:34.680 align:start position:0%
called
only<00:28:32.080><c> eating</c><00:28:32.800><c> object</c><00:28:33.490><c> here</c><00:28:33.760><c> so</c><00:28:34.390><c> it's</c><00:28:34.540><c> an</c>

00:28:34.680 --> 00:28:34.690 align:start position:0%
only eating object here so it's an
 

00:28:34.690 --> 00:28:38.280 align:start position:0%
only eating object here so it's an
instance<00:28:35.230><c> method</c><00:28:35.350><c> of</c><00:28:36.010><c> the</c><00:28:36.400><c> eating</c><00:28:36.580><c> object</c><00:28:37.420><c> so</c>

00:28:38.280 --> 00:28:38.290 align:start position:0%
instance method of the eating object so
 

00:28:38.290 --> 00:28:40.700 align:start position:0%
instance method of the eating object so
I<00:28:38.560><c> have</c><00:28:38.770><c> on</c><00:28:39.100><c> this</c><00:28:39.400><c> my</c><00:28:39.790><c> consume</c><00:28:40.210><c> interface</c>

00:28:40.700 --> 00:28:40.710 align:start position:0%
I have on this my consume interface
 

00:28:40.710 --> 00:28:45.720 align:start position:0%
I have on this my consume interface
another<00:28:41.710><c> method</c><00:28:41.950><c> called</c><00:28:42.900><c> and</c><00:28:43.900><c> then</c><00:28:44.160><c> of</c><00:28:45.160><c> course</c>

00:28:45.720 --> 00:28:45.730 align:start position:0%
another method called and then of course
 

00:28:45.730 --> 00:28:47.370 align:start position:0%
another method called and then of course
that<00:28:46.120><c> is</c><00:28:46.240><c> going</c><00:28:46.300><c> to</c><00:28:46.540><c> take</c><00:28:46.750><c> something</c><00:28:47.050><c> and</c>

00:28:47.370 --> 00:28:47.380 align:start position:0%
that is going to take something and
 

00:28:47.380 --> 00:28:48.240 align:start position:0%
that is going to take something and
return<00:28:47.710><c> something</c>

00:28:48.240 --> 00:28:48.250 align:start position:0%
return something
 

00:28:48.250 --> 00:28:50.910 align:start position:0%
return something
what<00:28:48.940><c> does</c><00:28:49.090><c> it</c><00:28:49.210><c> take</c><00:28:49.390><c> as</c><00:28:49.570><c> a</c><00:28:49.600><c> parameter</c><00:28:49.920><c> it</c>

00:28:50.910 --> 00:28:50.920 align:start position:0%
what does it take as a parameter it
 

00:28:50.920 --> 00:28:53.490 align:start position:0%
what does it take as a parameter it
takes<00:28:51.130><c> a</c><00:28:51.250><c> my</c><00:28:51.400><c> consumer</c><00:28:51.960><c> and</c><00:28:52.960><c> what</c><00:28:53.170><c> does</c><00:28:53.380><c> it</c>

00:28:53.490 --> 00:28:53.500 align:start position:0%
takes a my consumer and what does it
 

00:28:53.500 --> 00:28:56.930 align:start position:0%
takes a my consumer and what does it
return<00:28:53.680><c> them</c><00:28:54.070><c> returns</c><00:28:54.910><c> another</c><00:28:55.210><c> micron</c><00:28:56.170><c> Shiva</c>

00:28:56.930 --> 00:28:56.940 align:start position:0%
return them returns another micron Shiva
 

00:28:56.940 --> 00:29:03.690 align:start position:0%
return them returns another micron Shiva
do<00:28:57.940><c> that</c><00:28:58.150><c> I</c><00:28:59.670><c> take</c><00:29:00.670><c> my</c><00:29:00.730><c> consumer</c><00:29:02.610><c> as</c><00:29:03.610><c> a</c>

00:29:03.690 --> 00:29:03.700 align:start position:0%
do that I take my consumer as a
 

00:29:03.700 --> 00:29:10.100 align:start position:0%
do that I take my consumer as a
parameter<00:29:04.030><c> and</c><00:29:07.800><c> return</c><00:29:08.800><c> my</c><00:29:09.100><c> consumer</c><00:29:09.520><c> object</c>

00:29:10.100 --> 00:29:10.110 align:start position:0%
parameter and return my consumer object
 

00:29:10.110 --> 00:29:12.750 align:start position:0%
parameter and return my consumer object
if<00:29:11.110><c> I</c><00:29:11.260><c> write</c><00:29:11.500><c> it</c><00:29:11.680><c> like</c><00:29:11.710><c> that</c><00:29:11.980><c> this</c><00:29:12.190><c> interface</c>

00:29:12.750 --> 00:29:12.760 align:start position:0%
if I write it like that this interface
 

00:29:12.760 --> 00:29:15.570 align:start position:0%
if I write it like that this interface
is<00:29:12.940><c> perfectly</c><00:29:13.360><c> legal</c><00:29:13.690><c> but</c><00:29:14.470><c> of</c><00:29:14.590><c> course</c><00:29:14.830><c> you</c>

00:29:15.570 --> 00:29:15.580 align:start position:0%
is perfectly legal but of course you
 

00:29:15.580 --> 00:29:17.190 align:start position:0%
is perfectly legal but of course you
have<00:29:15.610><c> the</c><00:29:15.880><c> problems</c><00:29:16.300><c> because</c><00:29:16.690><c> I</c><00:29:16.840><c> have</c><00:29:17.080><c> an</c>

00:29:17.190 --> 00:29:17.200 align:start position:0%
have the problems because I have an
 

00:29:17.200 --> 00:29:19.230 align:start position:0%
have the problems because I have an
interface<00:29:17.470><c> that</c><00:29:17.680><c> has</c><00:29:17.890><c> to</c><00:29:18.310><c> abstract</c><00:29:18.910><c> methods</c>

00:29:19.230 --> 00:29:19.240 align:start position:0%
interface that has to abstract methods
 

00:29:19.240 --> 00:29:21.660 align:start position:0%
interface that has to abstract methods
it's<00:29:20.020><c> not</c><00:29:20.200><c> a</c><00:29:20.230><c> functional</c><00:29:20.830><c> interface</c><00:29:21.250><c> anymore</c>

00:29:21.660 --> 00:29:21.670 align:start position:0%
it's not a functional interface anymore
 

00:29:21.670 --> 00:29:23.640 align:start position:0%
it's not a functional interface anymore
so<00:29:22.330><c> it</c><00:29:22.390><c> does</c><00:29:22.570><c> not</c><00:29:22.690><c> compile</c><00:29:23.110><c> I</c><00:29:23.290><c> cannot</c>

00:29:23.640 --> 00:29:23.650 align:start position:0%
so it does not compile I cannot
 

00:29:23.650 --> 00:29:26.090 align:start position:0%
so it does not compile I cannot
implement<00:29:23.980><c> this</c><00:29:24.250><c> interface</c><00:29:24.550><c> using</c><00:29:25.510><c> a</c><00:29:25.570><c> lambda</c>

00:29:26.090 --> 00:29:26.100 align:start position:0%
implement this interface using a lambda
 

00:29:26.100 --> 00:29:33.180 align:start position:0%
implement this interface using a lambda
by<00:29:27.100><c> the</c><00:29:27.160><c> way</c><00:29:27.370><c> if</c><00:29:28.120><c> I</c><00:29:28.300><c> add</c>

00:29:33.180 --> 00:29:33.190 align:start position:0%
 
 

00:29:33.190 --> 00:29:37.719 align:start position:0%
 
this<00:29:34.190><c> functional</c><00:29:34.879><c> interface</c><00:29:36.729><c> annotation</c>

00:29:37.719 --> 00:29:37.729 align:start position:0%
this functional interface annotation
 

00:29:37.729 --> 00:29:41.049 align:start position:0%
this functional interface annotation
here<00:29:37.999><c> you</c><00:29:38.779><c> see</c><00:29:38.989><c> that</c><00:29:39.139><c> this</c><00:29:39.559><c> time</c><00:29:39.829><c> the</c><00:29:40.549><c> the</c>

00:29:41.049 --> 00:29:41.059 align:start position:0%
here you see that this time the the
 

00:29:41.059 --> 00:29:43.269 align:start position:0%
here you see that this time the the
compiler<00:29:41.449><c> will</c><00:29:42.079><c> be</c><00:29:42.229><c> raised</c><00:29:42.469><c> on</c><00:29:42.709><c> the</c><00:29:42.919><c> interface</c>

00:29:43.269 --> 00:29:43.279 align:start position:0%
compiler will be raised on the interface
 

00:29:43.279 --> 00:29:45.459 align:start position:0%
compiler will be raised on the interface
itself<00:29:43.669><c> since</c><00:29:44.149><c> I</c><00:29:44.329><c> have</c><00:29:44.509><c> two</c><00:29:44.809><c> abstract</c><00:29:45.169><c> method</c>

00:29:45.459 --> 00:29:45.469 align:start position:0%
itself since I have two abstract method
 

00:29:45.469 --> 00:29:47.469 align:start position:0%
itself since I have two abstract method
and<00:29:45.829><c> this</c><00:29:46.099><c> interface</c><00:29:46.519><c> is</c><00:29:46.729><c> not</c><00:29:46.909><c> a</c><00:29:46.969><c> functional</c>

00:29:47.469 --> 00:29:47.479 align:start position:0%
and this interface is not a functional
 

00:29:47.479 --> 00:29:52.089 align:start position:0%
and this interface is not a functional
interface<00:29:47.929><c> anymore</c><00:29:49.269><c> so</c><00:29:50.269><c> this</c><00:29:50.949><c> adding</c><00:29:51.949><c> this</c>

00:29:52.089 --> 00:29:52.099 align:start position:0%
interface anymore so this adding this
 

00:29:52.099 --> 00:29:54.369 align:start position:0%
interface anymore so this adding this
method<00:29:52.519><c> as</c><00:29:52.759><c> an</c><00:29:52.969><c> abstract</c><00:29:53.329><c> method</c><00:29:53.449><c> is</c><00:29:53.839><c> not</c><00:29:54.229><c> the</c>

00:29:54.369 --> 00:29:54.379 align:start position:0%
method as an abstract method is not the
 

00:29:54.379 --> 00:29:57.669 align:start position:0%
method as an abstract method is not the
way<00:29:54.499><c> to</c><00:29:54.529><c> go</c><00:29:54.829><c> but</c><00:29:55.129><c> remember</c><00:29:55.999><c> I</c><00:29:56.179><c> can</c><00:29:56.479><c> add</c><00:29:56.690><c> default</c>

00:29:57.669 --> 00:29:57.679 align:start position:0%
way to go but remember I can add default
 

00:29:57.679 --> 00:30:00.369 align:start position:0%
way to go but remember I can add default
methods<00:29:58.099><c> on</c><00:29:58.519><c> Maya</c><00:29:59.239><c> fractional</c><00:29:59.779><c> interface</c><00:30:00.169><c> on</c>

00:30:00.369 --> 00:30:00.379 align:start position:0%
methods on Maya fractional interface on
 

00:30:00.379 --> 00:30:03.249 align:start position:0%
methods on Maya fractional interface on
any<00:30:01.039><c> kind</c><00:30:01.249><c> of</c><00:30:01.399><c> interface</c><00:30:01.789><c> by</c><00:30:01.940><c> the</c><00:30:01.999><c> way</c><00:30:02.149><c> so</c><00:30:03.049><c> let</c>

00:30:03.249 --> 00:30:03.259 align:start position:0%
any kind of interface by the way so let
 

00:30:03.259 --> 00:30:06.759 align:start position:0%
any kind of interface by the way so let
us<00:30:03.289><c> make</c><00:30:03.619><c> this</c><00:30:03.940><c> interface</c><00:30:04.940><c> default</c><00:30:05.479><c> this</c><00:30:06.469><c> time</c>

00:30:06.759 --> 00:30:06.769 align:start position:0%
us make this interface default this time
 

00:30:06.769 --> 00:30:13.569 align:start position:0%
us make this interface default this time
I<00:30:06.949><c> need</c><00:30:07.159><c> to</c><00:30:07.279><c> provide</c><00:30:09.069><c> an</c><00:30:10.069><c> implementation</c><00:30:12.579><c> and</c>

00:30:13.569 --> 00:30:13.579 align:start position:0%
I need to provide an implementation and
 

00:30:13.579 --> 00:30:15.909 align:start position:0%
I need to provide an implementation and
you<00:30:13.669><c> see</c><00:30:13.849><c> that</c><00:30:13.999><c> this</c><00:30:14.569><c> code</c><00:30:14.839><c> does</c><00:30:15.289><c> compile</c><00:30:15.709><c> my</c>

00:30:15.909 --> 00:30:15.919 align:start position:0%
you see that this code does compile my
 

00:30:15.919 --> 00:30:18.999 align:start position:0%
you see that this code does compile my
interface<00:30:16.759><c> is</c><00:30:16.999><c> functional</c><00:30:17.569><c> again</c><00:30:17.929><c> and</c><00:30:18.889><c> of</c>

00:30:18.999 --> 00:30:19.009 align:start position:0%
interface is functional again and of
 

00:30:19.009 --> 00:30:21.819 align:start position:0%
interface is functional again and of
course<00:30:19.279><c> I</c><00:30:19.549><c> can</c><00:30:20.389><c> implement</c><00:30:20.659><c> it</c><00:30:20.959><c> using</c><00:30:21.379><c> lambda</c>

00:30:21.819 --> 00:30:21.829 align:start position:0%
course I can implement it using lambda
 

00:30:21.829 --> 00:30:24.699 align:start position:0%
course I can implement it using lambda
expressions<00:30:22.479><c> so</c><00:30:23.479><c> now</c><00:30:23.599><c> what</c><00:30:23.779><c> should</c><00:30:23.929><c> I</c><00:30:24.049><c> do</c><00:30:24.109><c> in</c>

00:30:24.699 --> 00:30:24.709 align:start position:0%
expressions so now what should I do in
 

00:30:24.709 --> 00:30:28.269 align:start position:0%
expressions so now what should I do in
this<00:30:24.979><c> and</c><00:30:25.629><c> then</c><00:30:26.629><c> method</c><00:30:26.859><c> what</c><00:30:27.859><c> I</c><00:30:27.889><c> need</c><00:30:28.129><c> to</c>

00:30:28.269 --> 00:30:28.279 align:start position:0%
this and then method what I need to
 

00:30:28.279 --> 00:30:32.889 align:start position:0%
this and then method what I need to
return<00:30:28.579><c> is</c><00:30:28.999><c> a</c><00:30:29.059><c> my</c><00:30:29.299><c> consumer</c><00:30:30.249><c> okay</c><00:30:31.359><c> my</c><00:30:32.359><c> consumer</c>

00:30:32.889 --> 00:30:32.899 align:start position:0%
return is a my consumer okay my consumer
 

00:30:32.899 --> 00:30:35.649 align:start position:0%
return is a my consumer okay my consumer
is<00:30:33.139><c> a</c><00:30:33.169><c> functional</c><00:30:33.709><c> interface</c><00:30:34.129><c> so</c><00:30:34.909><c> it</c><00:30:35.209><c> can</c><00:30:35.509><c> be</c>

00:30:35.649 --> 00:30:35.659 align:start position:0%
is a functional interface so it can be
 

00:30:35.659 --> 00:30:38.979 align:start position:0%
is a functional interface so it can be
implemented<00:30:35.989><c> using</c><00:30:36.409><c> a</c><00:30:37.099><c> lambda</c><00:30:37.659><c> what</c><00:30:38.659><c> is</c><00:30:38.809><c> this</c>

00:30:38.979 --> 00:30:38.989 align:start position:0%
implemented using a lambda what is this
 

00:30:38.989 --> 00:30:41.889 align:start position:0%
implemented using a lambda what is this
lambda<00:30:39.229><c> well</c><00:30:40.099><c> just</c><00:30:40.849><c> need</c><00:30:41.029><c> to</c><00:30:41.149><c> apply</c><00:30:41.419><c> the</c><00:30:41.479><c> exact</c>

00:30:41.889 --> 00:30:41.899 align:start position:0%
lambda well just need to apply the exact
 

00:30:41.899 --> 00:30:42.969 align:start position:0%
lambda well just need to apply the exact
same<00:30:42.079><c> method</c><00:30:42.440><c> with</c><00:30:42.589><c> it</c>

00:30:42.969 --> 00:30:42.979 align:start position:0%
same method with it
 

00:30:42.979 --> 00:30:46.629 align:start position:0%
same method with it
we<00:30:43.219><c> applied</c><00:30:43.519><c> previously</c><00:30:44.949><c> identify</c><00:30:45.949><c> the</c><00:30:46.009><c> only</c>

00:30:46.629 --> 00:30:46.639 align:start position:0%
we applied previously identify the only
 

00:30:46.639 --> 00:30:48.549 align:start position:0%
we applied previously identify the only
abstract<00:30:46.999><c> method</c><00:30:47.359><c> of</c><00:30:47.809><c> the</c><00:30:47.989><c> my</c><00:30:48.109><c> consumer</c>

00:30:48.549 --> 00:30:48.559 align:start position:0%
abstract method of the my consumer
 

00:30:48.559 --> 00:30:51.609 align:start position:0%
abstract method of the my consumer
interface<00:30:49.149><c> then</c><00:30:50.149><c> copy/paste</c><00:30:50.779><c> the</c><00:30:51.259><c> block</c><00:30:51.469><c> of</c>

00:30:51.609 --> 00:30:51.619 align:start position:0%
interface then copy/paste the block of
 

00:30:51.619 --> 00:30:56.549 align:start position:0%
interface then copy/paste the block of
parameter<00:30:53.559><c> draw</c><00:30:54.559><c> this</c><00:30:54.769><c> little</c><00:30:55.190><c> funny</c><00:30:55.789><c> right</c>

00:30:56.549 --> 00:30:56.559 align:start position:0%
parameter draw this little funny right
 

00:30:56.559 --> 00:31:02.889 align:start position:0%
parameter draw this little funny right
stuff<00:30:57.559><c> and</c><00:30:58.059><c> return</c><00:30:59.859><c> okay</c><00:31:00.859><c> boy</c><00:31:01.359><c> so</c><00:31:02.359><c> if</c><00:31:02.479><c> I</c><00:31:02.629><c> write</c>

00:31:02.889 --> 00:31:02.899 align:start position:0%
stuff and return okay boy so if I write
 

00:31:02.899 --> 00:31:06.609 align:start position:0%
stuff and return okay boy so if I write
it<00:31:03.109><c> like</c><00:31:03.379><c> that</c><00:31:03.949><c> it</c><00:31:04.879><c> should</c><00:31:05.089><c> compile</c><00:31:05.619><c> and</c>

00:31:06.609 --> 00:31:06.619 align:start position:0%
it like that it should compile and
 

00:31:06.619 --> 00:31:08.589 align:start position:0%
it like that it should compile and
indeed<00:31:06.949><c> it</c><00:31:07.129><c> does</c><00:31:07.369><c> compile</c><00:31:07.789><c> this</c><00:31:07.969><c> it</c><00:31:08.209><c> this</c><00:31:08.389><c> is</c><00:31:08.569><c> a</c>

00:31:08.589 --> 00:31:08.599 align:start position:0%
indeed it does compile this it this is a
 

00:31:08.599 --> 00:31:11.049 align:start position:0%
indeed it does compile this it this is a
consumer<00:31:09.079><c> alright</c><00:31:10.069><c> so</c><00:31:10.249><c> now</c><00:31:10.429><c> I</c><00:31:10.459><c> need</c><00:31:10.699><c> to</c><00:31:10.759><c> be</c><00:31:11.029><c> a</c>

00:31:11.049 --> 00:31:11.059 align:start position:0%
consumer alright so now I need to be a
 

00:31:11.059 --> 00:31:15.879 align:start position:0%
consumer alright so now I need to be a
little<00:31:11.359><c> smarter</c><00:31:13.299><c> what</c><00:31:14.299><c> I</c><00:31:14.329><c> expect</c><00:31:14.899><c> here</c><00:31:15.259><c> is</c><00:31:15.529><c> to</c>

00:31:15.879 --> 00:31:15.889 align:start position:0%
little smarter what I expect here is to
 

00:31:15.889 --> 00:31:20.169 align:start position:0%
little smarter what I expect here is to
first<00:31:17.440><c> consumer</c><00:31:18.459><c> the</c><00:31:19.459><c> object</c><00:31:19.729><c> I</c><00:31:19.819><c> am</c><00:31:19.849><c> going</c><00:31:20.059><c> to</c>

00:31:20.169 --> 00:31:20.179 align:start position:0%
first consumer the object I am going to
 

00:31:20.179 --> 00:31:23.979 align:start position:0%
first consumer the object I am going to
pass<00:31:20.359><c> to</c><00:31:20.419><c> this</c><00:31:20.949><c> compost</c><00:31:21.949><c> consumer</c><00:31:22.659><c> to</c><00:31:23.659><c> consume</c>

00:31:23.979 --> 00:31:23.989 align:start position:0%
pass to this compost consumer to consume
 

00:31:23.989 --> 00:31:25.419 align:start position:0%
pass to this compost consumer to consume
them<00:31:24.169><c> with</c><00:31:24.379><c> the</c><00:31:24.559><c> first</c><00:31:24.829><c> consumer</c><00:31:25.309><c> the</c>

00:31:25.419 --> 00:31:25.429 align:start position:0%
them with the first consumer the
 

00:31:25.429 --> 00:31:28.899 align:start position:0%
them with the first consumer the
consumer<00:31:25.549><c> I</c><00:31:26.089><c> am</c><00:31:26.389><c> in</c><00:31:26.539><c> this</c><00:31:27.289><c> consumer</c><00:31:28.009><c> and</c><00:31:28.219><c> then</c>

00:31:28.899 --> 00:31:28.909 align:start position:0%
consumer I am in this consumer and then
 

00:31:28.909 --> 00:31:33.399 align:start position:0%
consumer I am in this consumer and then
the<00:31:29.059><c> consumer</c><00:31:29.259><c> passed</c><00:31:30.259><c> as</c><00:31:30.769><c> a</c><00:31:30.829><c> parameter</c><00:31:32.409><c> so</c>

00:31:33.399 --> 00:31:33.409 align:start position:0%
the consumer passed as a parameter so
 

00:31:33.409 --> 00:31:35.769 align:start position:0%
the consumer passed as a parameter so
let<00:31:33.559><c> us</c><00:31:33.589><c> do</c><00:31:33.799><c> that</c><00:31:33.979><c> when</c><00:31:34.699><c> I</c><00:31:34.729><c> am</c><00:31:34.849><c> in</c><00:31:35.119><c> this</c><00:31:35.299><c> code</c><00:31:35.539><c> I</c>

00:31:35.769 --> 00:31:35.779 align:start position:0%
let us do that when I am in this code I
 

00:31:35.779 --> 00:31:38.919 align:start position:0%
let us do that when I am in this code I
am<00:31:36.109><c> in</c><00:31:36.259><c> an</c><00:31:36.379><c> instance</c><00:31:36.829><c> of</c><00:31:36.979><c> a</c><00:31:37.099><c> consumer</c><00:31:37.879><c> so</c><00:31:38.599><c> I</c><00:31:38.629><c> can</c>

00:31:38.919 --> 00:31:38.929 align:start position:0%
am in an instance of a consumer so I can
 

00:31:38.929 --> 00:31:42.230 align:start position:0%
am in an instance of a consumer so I can
call<00:31:39.199><c> this</c><00:31:40.509><c> accept</c>

00:31:42.230 --> 00:31:42.240 align:start position:0%
call this accept
 

00:31:42.240 --> 00:31:46.880 align:start position:0%
call this accept
of<00:31:42.510><c> T</c><00:31:44.570><c> maybe</c><00:31:45.570><c> print</c><00:31:45.990><c> out</c><00:31:46.140><c> something</c><00:31:46.590><c> like</c><00:31:46.710><c> that</c>

00:31:46.880 --> 00:31:46.890 align:start position:0%
of T maybe print out something like that
 

00:31:46.890 --> 00:31:51.230 align:start position:0%
of T maybe print out something like that
and<00:31:47.190><c> then</c><00:31:47.820><c> and</c><00:31:48.290><c> then</c><00:31:49.290><c> consume</c><00:31:49.800><c> this</c><00:31:50.550><c> T</c><00:31:50.880><c> object</c>

00:31:51.230 --> 00:31:51.240 align:start position:0%
and then and then consume this T object
 

00:31:51.240 --> 00:31:54.470 align:start position:0%
and then and then consume this T object
with<00:31:51.750><c> the</c><00:31:51.960><c> other</c><00:31:52.200><c> consumer</c><00:31:53.190><c> passed</c><00:31:53.970><c> as</c><00:31:54.420><c> a</c>

00:31:54.470 --> 00:31:54.480 align:start position:0%
with the other consumer passed as a
 

00:31:54.480 --> 00:31:59.900 align:start position:0%
with the other consumer passed as a
parameter<00:31:56.480><c> right</c><00:31:57.480><c> now</c><00:31:58.260><c> if</c><00:31:58.500><c> I</c><00:31:58.760><c> eating</c><00:31:59.760><c> and</c>

00:31:59.900 --> 00:31:59.910 align:start position:0%
parameter right now if I eating and
 

00:31:59.910 --> 00:32:07.700 align:start position:0%
parameter right now if I eating and
drinking<00:32:02.030><c> eating</c><00:32:03.030><c> and</c><00:32:03.630><c> drinking</c><00:32:04.400><c> accept</c><00:32:06.710><c> good</c>

00:32:07.700 --> 00:32:07.710 align:start position:0%
drinking eating and drinking accept good
 

00:32:07.710 --> 00:32:10.790 align:start position:0%
drinking eating and drinking accept good
food<00:32:07.980><c> okay</c><00:32:08.970><c> I'm</c><00:32:09.060><c> not</c><00:32:09.210><c> really</c><00:32:09.780><c> drinking</c><00:32:10.410><c> good</c>

00:32:10.790 --> 00:32:10.800 align:start position:0%
food okay I'm not really drinking good
 

00:32:10.800 --> 00:32:13.250 align:start position:0%
food okay I'm not really drinking good
food<00:32:11.040><c> but</c><00:32:11.220><c> anyway</c><00:32:11.520><c> it</c><00:32:12.300><c> will</c><00:32:12.540><c> just</c><00:32:12.810><c> work</c><00:32:12.930><c> like</c>

00:32:13.250 --> 00:32:13.260 align:start position:0%
food but anyway it will just work like
 

00:32:13.260 --> 00:32:16.790 align:start position:0%
food but anyway it will just work like
that<00:32:13.370><c> my</c><00:32:14.370><c> default</c><00:32:14.580><c> method</c><00:32:15.800><c> implemented</c>

00:32:16.790 --> 00:32:16.800 align:start position:0%
that my default method implemented
 

00:32:16.800 --> 00:32:19.700 align:start position:0%
that my default method implemented
invite<00:32:17.370><c> the</c><00:32:17.610><c> chaining</c><00:32:18.300><c> of</c><00:32:18.480><c> the</c><00:32:18.660><c> to</c><00:32:18.900><c> consumers</c>

00:32:19.700 --> 00:32:19.710 align:start position:0%
invite the chaining of the to consumers
 

00:32:19.710 --> 00:32:23.540 align:start position:0%
invite the chaining of the to consumers
this<00:32:20.220><c> and</c><00:32:20.550><c> other</c><00:32:20.940><c> passed</c><00:32:21.660><c> as</c><00:32:21.990><c> a</c><00:32:22.050><c> parameter</c><00:32:22.550><c> so</c>

00:32:23.540 --> 00:32:23.550 align:start position:0%
this and other passed as a parameter so
 

00:32:23.550 --> 00:32:26.090 align:start position:0%
this and other passed as a parameter so
you<00:32:23.610><c> see</c><00:32:23.790><c> that</c><00:32:24.050><c> using</c><00:32:25.050><c> this</c><00:32:25.200><c> kind</c><00:32:25.470><c> of</c><00:32:25.710><c> default</c>

00:32:26.090 --> 00:32:26.100 align:start position:0%
you see that using this kind of default
 

00:32:26.100 --> 00:32:30.470 align:start position:0%
you see that using this kind of default
method<00:32:26.630><c> allows</c><00:32:27.630><c> us</c><00:32:27.840><c> to</c><00:32:28.250><c> invite</c><00:32:29.250><c> opens</c><00:32:29.760><c> up</c><00:32:29.910><c> all</c>

00:32:30.470 --> 00:32:30.480 align:start position:0%
method allows us to invite opens up all
 

00:32:30.480 --> 00:32:32.030 align:start position:0%
method allows us to invite opens up all
the<00:32:30.630><c> way</c><00:32:30.750><c> of</c><00:32:30.900><c> new</c><00:32:31.080><c> patterns</c><00:32:31.260><c> that</c><00:32:31.860><c> is</c>

00:32:32.030 --> 00:32:32.040 align:start position:0%
the way of new patterns that is
 

00:32:32.040 --> 00:32:34.700 align:start position:0%
the way of new patterns that is
composing<00:32:32.550><c> lambda</c><00:32:33.330><c> expressions</c><00:32:33.870><c> and</c><00:32:34.110><c> this</c><00:32:34.560><c> is</c>

00:32:34.700 --> 00:32:34.710 align:start position:0%
composing lambda expressions and this is
 

00:32:34.710 --> 00:32:37.220 align:start position:0%
composing lambda expressions and this is
what<00:32:34.860><c> we</c><00:32:35.010><c> are</c><00:32:35.100><c> going</c><00:32:35.220><c> to</c><00:32:35.400><c> do</c><00:32:35.720><c> until</c><00:32:36.720><c> the</c><00:32:37.020><c> end</c><00:32:37.140><c> of</c>

00:32:37.220 --> 00:32:37.230 align:start position:0%
what we are going to do until the end of
 

00:32:37.230 --> 00:32:44.540 align:start position:0%
what we are going to do until the end of
this<00:32:37.410><c> of</c><00:32:37.920><c> this</c><00:32:38.130><c> session</c><00:32:41.930><c> let</c><00:32:42.930><c> us</c><00:32:43.080><c> take</c><00:32:43.550><c> another</c>

00:32:44.540 --> 00:32:44.550 align:start position:0%
this of this session let us take another
 

00:32:44.550 --> 00:32:47.990 align:start position:0%
this of this session let us take another
example<00:32:45.680><c> with</c><00:32:46.680><c> the</c><00:32:46.950><c> with</c><00:32:47.160><c> another</c><00:32:47.490><c> functional</c>

00:32:47.990 --> 00:32:48.000 align:start position:0%
example with the with another functional
 

00:32:48.000 --> 00:32:49.760 align:start position:0%
example with the with another functional
interface<00:32:48.450><c> from</c><00:32:48.720><c> the</c><00:32:48.780><c> JDK</c><00:32:49.260><c> that</c><00:32:49.500><c> I</c><00:32:49.530><c> have</c>

00:32:49.760 --> 00:32:49.770 align:start position:0%
interface from the JDK that I have
 

00:32:49.770 --> 00:32:58.360 align:start position:0%
interface from the JDK that I have
mimicked<00:32:50.190><c> here</c><00:32:50.990><c> any</c><00:32:51.990><c> available</c><00:32:52.500><c> seats</c>

00:32:58.360 --> 00:32:58.370 align:start position:0%
 
 

00:32:58.370 --> 00:33:00.380 align:start position:0%
 
alright<00:32:59.370><c> so</c><00:32:59.550><c> it</c><00:32:59.760><c> might</c><00:32:59.910><c> predict</c><00:33:00.270><c> eight</c>

00:33:00.380 --> 00:33:00.390 align:start position:0%
alright so it might predict eight
 

00:33:00.390 --> 00:33:02.000 align:start position:0%
alright so it might predict eight
interface<00:33:00.750><c> once</c><00:33:00.990><c> again</c><00:33:01.200><c> it</c><00:33:01.350><c> is</c><00:33:01.380><c> a</c><00:33:01.530><c> mimic</c><00:33:01.860><c> of</c>

00:33:02.000 --> 00:33:02.010 align:start position:0%
interface once again it is a mimic of
 

00:33:02.010 --> 00:33:04.190 align:start position:0%
interface once again it is a mimic of
the<00:33:02.070><c> predicate</c><00:33:02.610><c> interface</c><00:33:03.120><c> available</c><00:33:03.360><c> on</c><00:33:03.960><c> J</c>

00:33:04.190 --> 00:33:04.200 align:start position:0%
the predicate interface available on J
 

00:33:04.200 --> 00:33:08.000 align:start position:0%
the predicate interface available on J
in<00:33:04.530><c> the</c><00:33:04.680><c> JDK</c><00:33:05.070><c> and</c><00:33:05.490><c> we</c><00:33:06.420><c> are</c><00:33:06.510><c> going</c><00:33:06.720><c> to</c><00:33:07.010><c> write</c>

00:33:08.000 --> 00:33:08.010 align:start position:0%
in the JDK and we are going to write
 

00:33:08.010 --> 00:33:10.480 align:start position:0%
in the JDK and we are going to write
some<00:33:08.250><c> some</c><00:33:08.880><c> stuff</c><00:33:09.150><c> with</c><00:33:09.360><c> it</c>

00:33:10.480 --> 00:33:10.490 align:start position:0%
some some stuff with it
 

00:33:10.490 --> 00:33:13.130 align:start position:0%
some some stuff with it
so<00:33:11.490><c> my</c><00:33:11.700><c> we</c><00:33:12.150><c> are</c><00:33:12.240><c> going</c><00:33:12.420><c> to</c><00:33:12.570><c> take</c><00:33:12.750><c> for</c><00:33:13.080><c> instance</c>

00:33:13.130 --> 00:33:13.140 align:start position:0%
so my we are going to take for instance
 

00:33:13.140 --> 00:33:20.540 align:start position:0%
so my we are going to take for instance
of<00:33:13.500><c> my</c><00:33:13.620><c> predicate</c><00:33:14.040><c> of</c><00:33:15.950><c> Austria</c><00:33:19.130><c> my</c><00:33:20.130><c> particular</c>

00:33:20.540 --> 00:33:20.550 align:start position:0%
of my predicate of Austria my particular
 

00:33:20.550 --> 00:33:23.600 align:start position:0%
of my predicate of Austria my particular
string<00:33:20.940><c> you</c><00:33:21.120><c> know</c><00:33:22.080><c> not</c><00:33:22.380><c> new</c><00:33:22.620><c> right</c><00:33:22.860><c> and</c><00:33:23.490><c> it</c>

00:33:23.600 --> 00:33:23.610 align:start position:0%
string you know not new right and it
 

00:33:23.610 --> 00:33:26.990 align:start position:0%
string you know not new right and it
will<00:33:23.760><c> just</c><00:33:24.000><c> check</c><00:33:24.240><c> if</c><00:33:25.340><c> this</c><00:33:26.340><c> this</c><00:33:26.670><c> given</c>

00:33:26.990 --> 00:33:27.000 align:start position:0%
will just check if this this given
 

00:33:27.000 --> 00:33:34.190 align:start position:0%
will just check if this this given
string<00:33:27.270><c> of</c><00:33:27.360><c> character</c><00:33:30.530><c> or</c><00:33:31.530><c> not</c><00:33:32.510><c> and</c><00:33:33.510><c> I'm</c><00:33:33.990><c> going</c>

00:33:34.190 --> 00:33:34.200 align:start position:0%
string of character or not and I'm going
 

00:33:34.200 --> 00:33:41.690 align:start position:0%
string of character or not and I'm going
to<00:33:34.230><c> take</c><00:33:34.500><c> another</c><00:33:34.620><c> one</c><00:33:37.190><c> shorter</c><00:33:38.480><c> and</c><00:33:39.480><c> then</c><00:33:40.700><c> all</c>

00:33:41.690 --> 00:33:41.700 align:start position:0%
to take another one shorter and then all
 

00:33:41.700 --> 00:33:48.319 align:start position:0%
to take another one shorter and then all
right<00:33:41.910><c> it's</c><00:33:42.590><c> it</c><00:33:43.590><c> will</c><00:33:43.770><c> be</c><00:33:43.920><c> s</c><00:33:44.130><c> that</c><00:33:45.060><c> length</c>

00:33:48.319 --> 00:33:48.329 align:start position:0%
 
 

00:33:48.329 --> 00:33:53.189 align:start position:0%
 
length<00:33:49.979><c> less</c><00:33:50.979><c> than</c><00:33:51.879><c> ten</c><00:33:52.089><c> those</c><00:33:52.869><c> are</c><00:33:53.049><c> two</c>

00:33:53.189 --> 00:33:53.199 align:start position:0%
length less than ten those are two
 

00:33:53.199 --> 00:33:55.199 align:start position:0%
length less than ten those are two
predicates<00:33:53.679><c> and</c><00:33:54.039><c> a</c><00:33:54.189><c> natural</c><00:33:54.579><c> way</c><00:33:54.759><c> to</c><00:33:54.789><c> combine</c>

00:33:55.199 --> 00:33:55.209 align:start position:0%
predicates and a natural way to combine
 

00:33:55.209 --> 00:33:57.419 align:start position:0%
predicates and a natural way to combine
predicates<00:33:55.959><c> to</c><00:33:56.049><c> compose</c><00:33:56.499><c> predicates</c><00:33:56.979><c> is</c><00:33:57.189><c> for</c>

00:33:57.419 --> 00:33:57.429 align:start position:0%
predicates to compose predicates is for
 

00:33:57.429 --> 00:33:59.549 align:start position:0%
predicates to compose predicates is for
instance<00:33:57.609><c> two</c><00:33:57.999><c> to</c><00:33:58.539><c> use</c><00:33:58.749><c> and</c><00:33:59.169><c> meet</c><00:33:59.319><c> the</c><00:33:59.439><c> other</c>

00:33:59.549 --> 00:33:59.559 align:start position:0%
instance two to use and meet the other
 

00:33:59.559 --> 00:34:08.089 align:start position:0%
instance two to use and meet the other
so<00:33:59.889><c> not</c><00:34:00.099><c> new</c><00:34:01.529><c> dot</c><00:34:02.529><c> and</c><00:34:03.689><c> shorter</c><00:34:06.389><c> than</c><00:34:07.389><c> ten</c>

00:34:08.089 --> 00:34:08.099 align:start position:0%
so not new dot and shorter than ten
 

00:34:08.099 --> 00:34:20.430 align:start position:0%
so not new dot and shorter than ten
should<00:34:09.099><c> also</c><00:34:09.279><c> be</c><00:34:09.609><c> a</c><00:34:09.940><c> predicate</c><00:34:10.779><c> a</c><00:34:10.839><c> string</c><00:34:19.440><c> that</c>

00:34:20.430 --> 00:34:20.440 align:start position:0%
should also be a predicate a string that
 

00:34:20.440 --> 00:34:25.319 align:start position:0%
should also be a predicate a string that
I'm<00:34:20.589><c> going</c><00:34:20.829><c> to</c><00:34:20.950><c> call</c><00:34:21.190><c> let's</c><00:34:21.909><c> say</c><00:34:22.059><c> p1</c><00:34:23.789><c> okay</c><00:34:24.789><c> so</c>

00:34:25.319 --> 00:34:25.329 align:start position:0%
I'm going to call let's say p1 okay so
 

00:34:25.329 --> 00:34:27.210 align:start position:0%
I'm going to call let's say p1 okay so
once<00:34:25.690><c> again</c><00:34:25.809><c> I</c><00:34:25.990><c> am</c><00:34:26.259><c> facing</c><00:34:26.499><c> the</c><00:34:26.740><c> exact</c><00:34:27.039><c> same</c>

00:34:27.210 --> 00:34:27.220 align:start position:0%
once again I am facing the exact same
 

00:34:27.220 --> 00:34:29.549 align:start position:0%
once again I am facing the exact same
problem<00:34:27.609><c> as</c><00:34:27.789><c> the</c><00:34:27.970><c> the</c><00:34:28.419><c> composition</c><00:34:28.779><c> of</c><00:34:29.230><c> my</c><00:34:29.499><c> to</c>

00:34:29.549 --> 00:34:29.559 align:start position:0%
problem as the the composition of my to
 

00:34:29.559 --> 00:34:32.700 align:start position:0%
problem as the the composition of my to
consumers<00:34:30.159><c> Here</c><00:34:30.849><c> I</c><00:34:30.879><c> am</c><00:34:31.089><c> and</c><00:34:31.509><c> method</c><00:34:32.139><c> that</c><00:34:32.589><c> is</c>

00:34:32.700 --> 00:34:32.710 align:start position:0%
consumers Here I am and method that is
 

00:34:32.710 --> 00:34:35.399 align:start position:0%
consumers Here I am and method that is
an<00:34:32.859><c> instance</c><00:34:33.309><c> method</c><00:34:33.460><c> of</c><00:34:34.089><c> the</c><00:34:34.389><c> not</c><00:34:34.629><c> new</c><00:34:34.899><c> object</c>

00:34:35.399 --> 00:34:35.409 align:start position:0%
an instance method of the not new object
 

00:34:35.409 --> 00:34:38.069 align:start position:0%
an instance method of the not new object
so<00:34:36.009><c> it</c><00:34:36.249><c> is</c><00:34:36.369><c> an</c><00:34:36.759><c> instant</c><00:34:37.210><c> method</c><00:34:37.599><c> into</c><00:34:37.960><c> my</c>

00:34:38.069 --> 00:34:38.079 align:start position:0%
so it is an instant method into my
 

00:34:38.079 --> 00:34:42.239 align:start position:0%
so it is an instant method into my
predicate<00:34:38.559><c> interface</c><00:34:40.409><c> it</c><00:34:41.409><c> cannot</c><00:34:41.799><c> be</c><00:34:42.009><c> another</c>

00:34:42.239 --> 00:34:42.249 align:start position:0%
predicate interface it cannot be another
 

00:34:42.249 --> 00:34:44.489 align:start position:0%
predicate interface it cannot be another
abstract<00:34:42.789><c> method</c><00:34:43.089><c> because</c><00:34:43.359><c> if</c><00:34:43.509><c> it</c><00:34:43.659><c> was</c><00:34:43.929><c> it</c>

00:34:44.489 --> 00:34:44.499 align:start position:0%
abstract method because if it was it
 

00:34:44.499 --> 00:34:47.489 align:start position:0%
abstract method because if it was it
would<00:34:45.269><c> break</c><00:34:46.269><c> the</c><00:34:46.659><c> functional</c><00:34:47.139><c> interface</c>

00:34:47.489 --> 00:34:47.499 align:start position:0%
would break the functional interface
 

00:34:47.499 --> 00:34:49.409 align:start position:0%
would break the functional interface
stuff<00:34:47.740><c> so</c><00:34:48.099><c> I'm</c><00:34:48.190><c> going</c><00:34:48.399><c> to</c><00:34:48.549><c> make</c><00:34:48.730><c> it</c><00:34:48.909><c> a</c><00:34:48.940><c> default</c>

00:34:49.409 --> 00:34:49.419 align:start position:0%
stuff so I'm going to make it a default
 

00:34:49.419 --> 00:34:54.589 align:start position:0%
stuff so I'm going to make it a default
method<00:34:49.950><c> and</c><00:34:50.950><c> then</c><00:34:52.499><c> this</c><00:34:53.499><c> and</c><00:34:53.829><c> then</c><00:34:54.039><c> method</c>

00:34:54.589 --> 00:34:54.599 align:start position:0%
method and then this and then method
 

00:34:54.599 --> 00:34:57.210 align:start position:0%
method and then this and then method
takes<00:34:55.599><c> a</c><00:34:55.749><c> predicate</c><00:34:56.200><c> as</c><00:34:56.379><c> a</c><00:34:56.409><c> parameter</c><00:34:56.679><c> and</c>

00:34:57.210 --> 00:34:57.220 align:start position:0%
takes a predicate as a parameter and
 

00:34:57.220 --> 00:35:00.569 align:start position:0%
takes a predicate as a parameter and
returns<00:34:57.789><c> also</c><00:34:58.450><c> a</c><00:34:58.690><c> predicate</c><00:34:59.220><c> let</c><00:35:00.220><c> us</c><00:35:00.369><c> do</c><00:35:00.519><c> that</c>

00:35:00.569 --> 00:35:00.579 align:start position:0%
returns also a predicate let us do that
 

00:35:00.579 --> 00:35:05.670 align:start position:0%
returns also a predicate let us do that
so<00:35:02.069><c> return</c><00:35:03.069><c> the</c><00:35:03.220><c> predicate</c><00:35:04.529><c> takes</c><00:35:05.529><c> a</c>

00:35:05.670 --> 00:35:05.680 align:start position:0%
so return the predicate takes a
 

00:35:05.680 --> 00:35:08.640 align:start position:0%
so return the predicate takes a
predicate<00:35:06.160><c> as</c><00:35:06.700><c> a</c><00:35:06.789><c> parameter</c><00:35:07.200><c> so</c><00:35:08.200><c> if</c><00:35:08.289><c> I</c><00:35:08.440><c> just</c>

00:35:08.640 --> 00:35:08.650 align:start position:0%
predicate as a parameter so if I just
 

00:35:08.650 --> 00:35:11.220 align:start position:0%
predicate as a parameter so if I just
return<00:35:09.039><c> near</c><00:35:09.369><c> here</c><00:35:09.789><c> it</c><00:35:10.630><c> should</c><00:35:10.839><c> at</c><00:35:11.019><c> least</c>

00:35:11.220 --> 00:35:11.230 align:start position:0%
return near here it should at least
 

00:35:11.230 --> 00:35:18.180 align:start position:0%
return near here it should at least
compile<00:35:12.269><c> it</c><00:35:13.269><c> does</c><00:35:13.480><c> not</c><00:35:13.660><c> oh</c><00:35:15.839><c> yes</c><00:35:16.839><c> sorry</c><00:35:17.109><c> this</c><00:35:17.950><c> is</c>

00:35:18.180 --> 00:35:18.190 align:start position:0%
compile it does not oh yes sorry this is
 

00:35:18.190 --> 00:35:20.930 align:start position:0%
compile it does not oh yes sorry this is
just<00:35:18.220><c> and</c><00:35:18.970><c> here</c><00:35:19.599><c> so</c><00:35:19.960><c> now</c><00:35:20.170><c> it</c><00:35:20.349><c> should</c><00:35:20.380><c> compile</c>

00:35:20.930 --> 00:35:20.940 align:start position:0%
just and here so now it should compile
 

00:35:20.940 --> 00:35:25.559 align:start position:0%
just and here so now it should compile
thank<00:35:21.940><c> you</c><00:35:22.470><c> all</c><00:35:23.470><c> right</c><00:35:23.650><c> so</c><00:35:24.160><c> what</c><00:35:24.970><c> do</c><00:35:25.089><c> I</c><00:35:25.180><c> return</c>

00:35:25.559 --> 00:35:25.569 align:start position:0%
thank you all right so what do I return
 

00:35:25.569 --> 00:35:28.410 align:start position:0%
thank you all right so what do I return
and<00:35:26.140><c> my</c><00:35:26.380><c> predicate</c><00:35:26.920><c> how</c><00:35:27.849><c> do</c><00:35:27.910><c> i</c><00:35:28.119><c> implement</c>

00:35:28.410 --> 00:35:28.420 align:start position:0%
and my predicate how do i implement
 

00:35:28.420 --> 00:35:31.620 align:start position:0%
and my predicate how do i implement
predicates<00:35:29.380><c> using</c><00:35:29.920><c> a</c><00:35:29.980><c> lambda</c><00:35:30.279><c> this</c><00:35:31.059><c> lambda</c><00:35:31.509><c> is</c>

00:35:31.620 --> 00:35:31.630 align:start position:0%
predicates using a lambda this lambda is
 

00:35:31.630 --> 00:35:33.390 align:start position:0%
predicates using a lambda this lambda is
an<00:35:31.749><c> implementation</c><00:35:32.019><c> of</c><00:35:32.559><c> the</c><00:35:32.680><c> test</c><00:35:32.980><c> method</c>

00:35:33.390 --> 00:35:33.400 align:start position:0%
an implementation of the test method
 

00:35:33.400 --> 00:35:37.259 align:start position:0%
an implementation of the test method
that<00:35:34.269><c> is</c><00:35:34.390><c> here</c><00:35:34.779><c> always</c><00:35:35.470><c> the</c><00:35:35.650><c> same</c><00:35:36.089><c> process</c><00:35:37.089><c> of</c>

00:35:37.259 --> 00:35:37.269 align:start position:0%
that is here always the same process of
 

00:35:37.269 --> 00:35:39.420 align:start position:0%
that is here always the same process of
creating<00:35:37.930><c> this</c><00:35:38.109><c> lambda</c><00:35:38.319><c> so</c><00:35:39.009><c> I'm</c><00:35:39.069><c> just</c><00:35:39.249><c> going</c>

00:35:39.420 --> 00:35:39.430 align:start position:0%
creating this lambda so I'm just going
 

00:35:39.430 --> 00:35:41.960 align:start position:0%
creating this lambda so I'm just going
to<00:35:39.489><c> copy</c><00:35:39.730><c> paste</c><00:35:40.059><c> the</c><00:35:40.210><c> block</c><00:35:40.390><c> of</c><00:35:40.539><c> parameter</c><00:35:40.989><c> I</c>

00:35:41.960 --> 00:35:41.970 align:start position:0%
to copy paste the block of parameter I
 

00:35:41.970 --> 00:35:44.700 align:start position:0%
to copy paste the block of parameter I
need<00:35:42.970><c> to</c><00:35:43.089><c> return</c><00:35:43.359><c> a</c><00:35:43.390><c> boolean</c><00:35:43.660><c> so</c><00:35:43.989><c> if</c><00:35:44.200><c> I</c><00:35:44.380><c> just</c>

00:35:44.700 --> 00:35:44.710 align:start position:0%
need to return a boolean so if I just
 

00:35:44.710 --> 00:35:47.519 align:start position:0%
need to return a boolean so if I just
return<00:35:45.009><c> true</c><00:35:45.249><c> with</c><00:35:45.910><c> a</c><00:35:46.029><c> first</c><00:35:46.329><c> step</c><00:35:46.599><c> to</c><00:35:46.989><c> see</c><00:35:47.230><c> at</c>

00:35:47.519 --> 00:35:47.529 align:start position:0%
return true with a first step to see at
 

00:35:47.529 --> 00:35:49.859 align:start position:0%
return true with a first step to see at
least<00:35:47.589><c> that</c><00:35:48.009><c> could</c><00:35:48.190><c> compile</c><00:35:48.549><c> indeed</c><00:35:49.480><c> it</c><00:35:49.599><c> does</c>

00:35:49.859 --> 00:35:49.869 align:start position:0%
least that could compile indeed it does
 

00:35:49.869 --> 00:35:53.009 align:start position:0%
least that could compile indeed it does
and<00:35:50.109><c> this</c><00:35:50.769><c> boolean</c><00:35:51.220><c> should</c><00:35:52.119><c> be</c><00:35:52.359><c> the</c><00:35:52.569><c> logical</c>

00:35:53.009 --> 00:35:53.019 align:start position:0%
and this boolean should be the logical
 

00:35:53.019 --> 00:35:56.519 align:start position:0%
and this boolean should be the logical
end<00:35:53.259><c> of</c><00:35:53.739><c> the</c><00:35:54.190><c> predicate</c><00:35:54.759><c> I</c><00:35:54.940><c> am</c><00:35:55.180><c> inner</c><00:35:55.529><c> using</c>

00:35:56.519 --> 00:35:56.529 align:start position:0%
end of the predicate I am inner using
 

00:35:56.529 --> 00:35:57.790 align:start position:0%
end of the predicate I am inner using
this<00:35:56.680><c> test</c><00:35:56.980><c> method</c>

00:35:57.790 --> 00:35:57.800 align:start position:0%
this test method
 

00:35:57.800 --> 00:35:59.820 align:start position:0%
this test method
and<00:35:57.890><c> the</c><00:35:58.010><c> predicate</c><00:35:58.340><c> passed</c><00:35:59.090><c> as</c><00:35:59.360><c> a</c><00:35:59.420><c> parameter</c>

00:35:59.820 --> 00:35:59.830 align:start position:0%
and the predicate passed as a parameter
 

00:35:59.830 --> 00:36:11.730 align:start position:0%
and the predicate passed as a parameter
so<00:36:00.830><c> here</c><00:36:01.130><c> is</c><00:36:01.250><c> just</c><00:36:01.580><c> this</c><00:36:02.480><c> test</c><00:36:03.320><c> of</c><00:36:04.250><c> T</c><00:36:04.490><c> and</c><00:36:07.060><c> test</c>

00:36:11.730 --> 00:36:11.740 align:start position:0%
 
 

00:36:11.740 --> 00:36:25.360 align:start position:0%
 
we<00:36:12.740><c> can</c><00:36:12.890><c> test</c><00:36:13.370><c> this</c><00:36:13.550><c> code</c><00:36:15.700><c> p1</c><00:36:16.700><c> the</c><00:36:17.330><c> test</c><00:36:24.370><c> stable</c>

00:36:25.360 --> 00:36:25.370 align:start position:0%
we can test this code p1 the test stable
 

00:36:25.370 --> 00:36:34.099 align:start position:0%
we can test this code p1 the test stable
printer<00:36:25.730><c> n</c><00:36:27.370><c> test</c><00:36:28.370><c> with</c>

00:36:34.099 --> 00:36:34.109 align:start position:0%
 
 

00:36:34.109 --> 00:36:49.090 align:start position:0%
 
from<00:36:35.109><c> this</c><00:36:35.259><c> code</c><00:36:35.940><c> oops</c>

00:36:49.090 --> 00:36:49.100 align:start position:0%
 
 

00:36:49.100 --> 00:36:55.829 align:start position:0%
 
sorry

00:36:55.829 --> 00:36:55.839 align:start position:0%
 
 

00:36:55.839 --> 00:36:59.470 align:start position:0%
 
nine-nine

00:36:59.470 --> 00:36:59.480 align:start position:0%
 
 

00:36:59.480 --> 00:37:06.350 align:start position:0%
 
yes<00:37:00.480><c> one</c><00:37:00.720><c> reason</c><00:37:01.080><c> this</c><00:37:01.380><c> is</c><00:37:01.530><c> a</c><00:37:01.560><c> pretty</c><00:37:01.800><c> cake</c>

00:37:06.350 --> 00:37:06.360 align:start position:0%
 
 

00:37:06.360 --> 00:37:17.020 align:start position:0%
 
oh<00:37:07.310><c> yeah</c><00:37:08.310><c> right</c><00:37:08.670><c> sorry</c><00:37:11.420><c> yes</c><00:37:12.420><c> that's</c><00:37:12.750><c> right</c>

00:37:17.020 --> 00:37:17.030 align:start position:0%
 
 

00:37:17.030 --> 00:37:19.570 align:start position:0%
 
okay<00:37:18.030><c> thank</c><00:37:18.390><c> you</c>

00:37:19.570 --> 00:37:19.580 align:start position:0%
okay thank you
 

00:37:19.580 --> 00:37:23.360 align:start position:0%
okay thank you
what<00:37:20.580><c> happens</c><00:37:20.970><c> uh</c><00:37:21.240><c> okay</c><00:37:21.960><c> so</c><00:37:22.020><c> this</c><00:37:22.710><c> what</c><00:37:23.190><c> like</c>

00:37:23.360 --> 00:37:23.370 align:start position:0%
what happens uh okay so this what like
 

00:37:23.370 --> 00:37:26.300 align:start position:0%
what happens uh okay so this what like
that<00:37:23.520><c> what</c><00:37:23.790><c> happens</c><00:37:24.120><c> if</c><00:37:24.240><c> I</c><00:37:24.420><c> pass</c><00:37:24.660><c> no</c><00:37:25.250><c> as</c><00:37:26.250><c> a</c>

00:37:26.300 --> 00:37:26.310 align:start position:0%
that what happens if I pass no as a
 

00:37:26.310 --> 00:37:30.740 align:start position:0%
that what happens if I pass no as a
parameter<00:37:26.670><c> here</c><00:37:27.950><c> this</c><00:37:28.950><c> is</c><00:37:29.100><c> interesting</c><00:37:29.630><c> if</c><00:37:30.630><c> I</c>

00:37:30.740 --> 00:37:30.750 align:start position:0%
parameter here this is interesting if I
 

00:37:30.750 --> 00:37:33.040 align:start position:0%
parameter here this is interesting if I
run<00:37:30.960><c> this</c><00:37:31.080><c> code</c><00:37:31.290><c> of</c><00:37:31.470><c> course</c><00:37:31.740><c> oops</c>

00:37:33.040 --> 00:37:33.050 align:start position:0%
run this code of course oops
 

00:37:33.050 --> 00:37:38.300 align:start position:0%
run this code of course oops
I'm<00:37:34.050><c> going</c><00:37:34.290><c> to</c><00:37:35.930><c> if</c><00:37:36.930><c> I</c><00:37:37.110><c> run</c><00:37:37.620><c> this</c><00:37:37.770><c> code</c><00:37:37.830><c> of</c>

00:37:38.300 --> 00:37:38.310 align:start position:0%
I'm going to if I run this code of
 

00:37:38.310 --> 00:37:39.890 align:start position:0%
I'm going to if I run this code of
course<00:37:38.670><c> I</c><00:37:38.760><c> have</c><00:37:38.910><c> a</c><00:37:38.940><c> null</c><00:37:39.180><c> pointer</c><00:37:39.480><c> exception</c>

00:37:39.890 --> 00:37:39.900 align:start position:0%
course I have a null pointer exception
 

00:37:39.900 --> 00:37:42.650 align:start position:0%
course I have a null pointer exception
but<00:37:40.560><c> the</c><00:37:40.650><c> interesting</c><00:37:41.040><c> point</c><00:37:41.310><c> is</c><00:37:41.610><c> where</c><00:37:42.360><c> does</c>

00:37:42.650 --> 00:37:42.660 align:start position:0%
but the interesting point is where does
 

00:37:42.660 --> 00:37:45.290 align:start position:0%
but the interesting point is where does
this<00:37:42.900><c> no</c><00:37:43.110><c> pointer</c><00:37:43.440><c> exception</c><00:37:43.890><c> comes</c><00:37:44.250><c> from</c><00:37:44.550><c> you</c>

00:37:45.290 --> 00:37:45.300 align:start position:0%
this no pointer exception comes from you
 

00:37:45.300 --> 00:37:47.800 align:start position:0%
this no pointer exception comes from you
see<00:37:45.480><c> that</c><00:37:45.630><c> it</c><00:37:45.750><c> comes</c><00:37:45.990><c> from</c><00:37:46.260><c> inside</c><00:37:46.560><c> the</c><00:37:47.010><c> lambda</c>

00:37:47.800 --> 00:37:47.810 align:start position:0%
see that it comes from inside the lambda
 

00:37:47.810 --> 00:37:51.440 align:start position:0%
see that it comes from inside the lambda
which<00:37:48.810><c> is</c><00:37:48.840><c> here</c><00:37:49.680><c> if</c><00:37:50.220><c> all</c><00:37:50.550><c> there</c><00:37:50.730><c> is</c><00:37:50.820><c> now</c><00:37:50.970><c> this</c>

00:37:51.440 --> 00:37:51.450 align:start position:0%
which is here if all there is now this
 

00:37:51.450 --> 00:37:54.380 align:start position:0%
which is here if all there is now this
code<00:37:51.750><c> is</c><00:37:52.470><c> going</c><00:37:52.680><c> to</c><00:37:52.800><c> throw</c><00:37:53.160><c> the</c><00:37:53.850><c> null</c><00:37:54.030><c> pointer</c>

00:37:54.380 --> 00:37:54.390 align:start position:0%
code is going to throw the null pointer
 

00:37:54.390 --> 00:37:56.960 align:start position:0%
code is going to throw the null pointer
exception<00:37:54.810><c> as</c><00:37:55.110><c> long</c><00:37:55.530><c> as</c><00:37:55.710><c> the</c><00:37:55.860><c> first</c><00:37:56.130><c> test</c><00:37:56.340><c> is</c>

00:37:56.960 --> 00:37:56.970 align:start position:0%
exception as long as the first test is
 

00:37:56.970 --> 00:38:02.200 align:start position:0%
exception as long as the first test is
true<00:37:58.130><c> so</c><00:37:59.130><c> it</c><00:37:59.730><c> means</c><00:38:00.000><c> that</c><00:38:00.120><c> if</c><00:38:00.780><c> I</c><00:38:01.020><c> do</c><00:38:01.080><c> not</c><00:38:01.260><c> call</c>

00:38:02.200 --> 00:38:02.210 align:start position:0%
true so it means that if I do not call
 

00:38:02.210 --> 00:38:06.080 align:start position:0%
true so it means that if I do not call
this<00:38:03.210><c> code</c><00:38:04.340><c> this</c><00:38:05.340><c> code</c><00:38:05.400><c> is</c><00:38:05.730><c> going</c><00:38:05.760><c> to</c><00:38:05.970><c> run</c>

00:38:06.080 --> 00:38:06.090 align:start position:0%
this code this code is going to run
 

00:38:06.090 --> 00:38:09.860 align:start position:0%
this code this code is going to run
perfectly<00:38:06.600><c> well</c><00:38:07.130><c> you</c><00:38:08.130><c> see</c><00:38:08.340><c> so</c><00:38:09.210><c> if</c><00:38:09.300><c> I</c><00:38:09.390><c> create</c><00:38:09.450><c> a</c>

00:38:09.860 --> 00:38:09.870 align:start position:0%
perfectly well you see so if I create a
 

00:38:09.870 --> 00:38:13.580 align:start position:0%
perfectly well you see so if I create a
predicate<00:38:11.030><c> with</c><00:38:12.030><c> an</c><00:38:12.180><c> other</c><00:38:12.480><c> that</c><00:38:12.960><c> is</c><00:38:13.080><c> new</c><00:38:13.290><c> I</c>

00:38:13.580 --> 00:38:13.590 align:start position:0%
predicate with an other that is new I
 

00:38:13.590 --> 00:38:16.130 align:start position:0%
predicate with an other that is new I
have<00:38:14.460><c> a</c><00:38:14.490><c> corrupted</c><00:38:15.240><c> lambda</c><00:38:15.540><c> expression</c><00:38:16.020><c> that</c>

00:38:16.130 --> 00:38:16.140 align:start position:0%
have a corrupted lambda expression that
 

00:38:16.140 --> 00:38:18.080 align:start position:0%
have a corrupted lambda expression that
is<00:38:16.260><c> going</c><00:38:16.530><c> to</c><00:38:16.770><c> that</c><00:38:16.800><c> is</c><00:38:17.070><c> bound</c><00:38:17.340><c> to</c><00:38:17.490><c> throw</c><00:38:17.850><c> a</c>

00:38:18.080 --> 00:38:18.090 align:start position:0%
is going to that is bound to throw a
 

00:38:18.090 --> 00:38:20.270 align:start position:0%
is going to that is bound to throw a
null<00:38:18.510><c> pointer</c><00:38:18.810><c> exception</c><00:38:19.200><c> somewhere</c><00:38:19.530><c> but</c>

00:38:20.270 --> 00:38:20.280 align:start position:0%
null pointer exception somewhere but
 

00:38:20.280 --> 00:38:22.190 align:start position:0%
null pointer exception somewhere but
this<00:38:20.460><c> new</c><00:38:20.640><c> pointer</c><00:38:20.970><c> exception</c><00:38:21.390><c> will</c><00:38:21.660><c> not</c><00:38:21.990><c> be</c>

00:38:22.190 --> 00:38:22.200 align:start position:0%
this new pointer exception will not be
 

00:38:22.200 --> 00:38:25.370 align:start position:0%
this new pointer exception will not be
thrown<00:38:22.470><c> at</c><00:38:23.130><c> the</c><00:38:23.370><c> creation</c><00:38:23.940><c> of</c><00:38:23.970><c> the</c><00:38:24.390><c> lambda</c><00:38:24.690><c> but</c>

00:38:25.370 --> 00:38:25.380 align:start position:0%
thrown at the creation of the lambda but
 

00:38:25.380 --> 00:38:27.560 align:start position:0%
thrown at the creation of the lambda but
when<00:38:25.710><c> I</c><00:38:25.740><c> will</c><00:38:26.070><c> be</c><00:38:26.250><c> using</c><00:38:26.640><c> this</c><00:38:26.790><c> come</c><00:38:27.030><c> down</c><00:38:27.060><c> in</c>

00:38:27.560 --> 00:38:27.570 align:start position:0%
when I will be using this come down in
 

00:38:27.570 --> 00:38:30.310 align:start position:0%
when I will be using this come down in
my<00:38:27.780><c> application</c><00:38:28.190><c> so</c><00:38:29.190><c> if</c><00:38:29.310><c> I</c><00:38:29.460><c> pass</c><00:38:29.700><c> this</c><00:38:29.910><c> lambda</c>

00:38:30.310 --> 00:38:30.320 align:start position:0%
my application so if I pass this lambda
 

00:38:30.320 --> 00:38:33.020 align:start position:0%
my application so if I pass this lambda
to<00:38:31.320><c> some</c><00:38:31.560><c> kind</c><00:38:31.770><c> of</c><00:38:31.860><c> other</c><00:38:32.070><c> module</c><00:38:32.520><c> in</c><00:38:32.850><c> my</c>

00:38:33.020 --> 00:38:33.030 align:start position:0%
to some kind of other module in my
 

00:38:33.030 --> 00:38:35.780 align:start position:0%
to some kind of other module in my
application<00:38:33.630><c> and</c><00:38:33.960><c> this</c><00:38:34.710><c> standard</c><00:38:35.010><c> is</c><00:38:35.130><c> used</c><00:38:35.370><c> in</c>

00:38:35.780 --> 00:38:35.790 align:start position:0%
application and this standard is used in
 

00:38:35.790 --> 00:38:38.000 align:start position:0%
application and this standard is used in
ten<00:38:36.030><c> days</c><00:38:36.270><c> from</c><00:38:36.450><c> now</c><00:38:36.690><c> this</c><00:38:37.410><c> null</c><00:38:37.680><c> pointer</c>

00:38:38.000 --> 00:38:38.010 align:start position:0%
ten days from now this null pointer
 

00:38:38.010 --> 00:38:40.070 align:start position:0%
ten days from now this null pointer
exception<00:38:38.400><c> is</c><00:38:38.550><c> going</c><00:38:38.760><c> to</c><00:38:38.940><c> be</c><00:38:39.030><c> thrown</c><00:38:39.270><c> much</c>

00:38:40.070 --> 00:38:40.080 align:start position:0%
exception is going to be thrown much
 

00:38:40.080 --> 00:38:42.380 align:start position:0%
exception is going to be thrown much
later<00:38:40.380><c> than</c><00:38:40.710><c> the</c><00:38:41.010><c> moment</c><00:38:41.610><c> where</c><00:38:42.030><c> this</c><00:38:42.180><c> lambda</c>

00:38:42.380 --> 00:38:42.390 align:start position:0%
later than the moment where this lambda
 

00:38:42.390 --> 00:38:45.800 align:start position:0%
later than the moment where this lambda
is<00:38:42.960><c> created</c><00:38:43.500><c> and</c><00:38:43.800><c> this</c><00:38:44.640><c> will</c><00:38:44.850><c> make</c><00:38:45.060><c> an</c><00:38:45.270><c> kind</c><00:38:45.690><c> of</c>

00:38:45.800 --> 00:38:45.810 align:start position:0%
is created and this will make an kind of
 

00:38:45.810 --> 00:38:47.150 align:start position:0%
is created and this will make an kind of
impossible<00:38:46.380><c> to</c><00:38:46.680><c> fix</c>

00:38:47.150 --> 00:38:47.160 align:start position:0%
impossible to fix
 

00:38:47.160 --> 00:38:51.560 align:start position:0%
impossible to fix
but<00:38:47.460><c> because</c><00:38:48.410><c> the</c><00:38:49.670><c> the</c><00:38:50.670><c> stacktrace</c><00:38:51.060><c> I</c><00:38:51.390><c> will</c>

00:38:51.560 --> 00:38:51.570 align:start position:0%
but because the the stacktrace I will
 

00:38:51.570 --> 00:38:54.380 align:start position:0%
but because the the stacktrace I will
have<00:38:51.780><c> will</c><00:38:52.230><c> give</c><00:38:52.740><c> me</c><00:38:52.950><c> the</c><00:38:53.640><c> place</c><00:38:53.940><c> where</c><00:38:54.270><c> the</c>

00:38:54.380 --> 00:38:54.390 align:start position:0%
have will give me the place where the
 

00:38:54.390 --> 00:38:56.930 align:start position:0%
have will give me the place where the
lambda<00:38:54.690><c> is</c><00:38:54.720><c> used</c><00:38:55.020><c> when</c><00:38:55.980><c> the</c><00:38:56.160><c> bug</c><00:38:56.370><c> is</c><00:38:56.520><c> in</c><00:38:56.670><c> fact</c>

00:38:56.930 --> 00:38:56.940 align:start position:0%
lambda is used when the bug is in fact
 

00:38:56.940 --> 00:38:59.410 align:start position:0%
lambda is used when the bug is in fact
at<00:38:57.180><c> the</c><00:38:57.360><c> place</c><00:38:57.600><c> where</c><00:38:58.020><c> the</c><00:38:58.110><c> lambda</c><00:38:58.380><c> is</c><00:38:58.620><c> created</c>

00:38:59.410 --> 00:38:59.420 align:start position:0%
at the place where the lambda is created
 

00:38:59.420 --> 00:39:01.700 align:start position:0%
at the place where the lambda is created
so<00:39:00.420><c> if</c><00:39:00.510><c> I</c><00:39:00.600><c> want</c><00:39:00.780><c> to</c><00:39:00.870><c> prevent</c><00:39:01.110><c> this</c><00:39:01.350><c> kind</c><00:39:01.590><c> of</c>

00:39:01.700 --> 00:39:01.710 align:start position:0%
so if I want to prevent this kind of
 

00:39:01.710 --> 00:39:04.580 align:start position:0%
so if I want to prevent this kind of
stuff<00:39:01.980><c> I</c><00:39:02.310><c> need</c><00:39:02.970><c> to</c><00:39:03.000><c> throw</c><00:39:03.450><c> the</c><00:39:04.110><c> null</c><00:39:04.260><c> pointer</c>

00:39:04.580 --> 00:39:04.590 align:start position:0%
stuff I need to throw the null pointer
 

00:39:04.590 --> 00:39:10.220 align:start position:0%
stuff I need to throw the null pointer
exception<00:39:05.010><c> at</c><00:39:06.560><c> the</c><00:39:07.560><c> lambda</c><00:39:08.180><c> creation</c><00:39:09.180><c> that</c><00:39:10.050><c> is</c>

00:39:10.220 --> 00:39:10.230 align:start position:0%
exception at the lambda creation that is
 

00:39:10.230 --> 00:39:15.730 align:start position:0%
exception at the lambda creation that is
here<00:39:11.100><c> now</c><00:39:11.340><c> if</c><00:39:12.300><c> I</c><00:39:12.390><c> run</c><00:39:12.540><c> this</c><00:39:12.600><c> code</c><00:39:12.780><c> again</c>

00:39:15.730 --> 00:39:15.740 align:start position:0%
 
 

00:39:15.740 --> 00:39:17.680 align:start position:0%
 
of<00:39:16.070><c> course</c><00:39:16.339><c> the</c><00:39:16.609><c> null</c><00:39:16.760><c> pointer</c><00:39:17.089><c> exception</c><00:39:17.540><c> is</c>

00:39:17.680 --> 00:39:17.690 align:start position:0%
of course the null pointer exception is
 

00:39:17.690 --> 00:39:20.200 align:start position:0%
of course the null pointer exception is
thrown<00:39:17.869><c> when</c><00:39:18.710><c> I</c><00:39:18.740><c> try</c><00:39:19.130><c> to</c><00:39:19.190><c> build</c><00:39:19.490><c> a</c><00:39:19.640><c> lambda</c><00:39:19.820><c> and</c>

00:39:20.200 --> 00:39:20.210 align:start position:0%
thrown when I try to build a lambda and
 

00:39:20.210 --> 00:39:22.690 align:start position:0%
thrown when I try to build a lambda and
this<00:39:20.930><c> is</c><00:39:21.109><c> a</c><00:39:21.140><c> pattern</c><00:39:21.349><c> we</c><00:39:21.770><c> really</c><00:39:22.190><c> need</c><00:39:22.369><c> to</c><00:39:22.490><c> use</c>

00:39:22.690 --> 00:39:22.700 align:start position:0%
this is a pattern we really need to use
 

00:39:22.700 --> 00:39:24.099 align:start position:0%
this is a pattern we really need to use
because<00:39:23.150><c> we</c><00:39:23.270><c> do</c><00:39:23.390><c> not</c><00:39:23.510><c> want</c><00:39:23.780><c> to</c><00:39:23.930><c> have</c>

00:39:24.099 --> 00:39:24.109 align:start position:0%
because we do not want to have
 

00:39:24.109 --> 00:39:26.050 align:start position:0%
because we do not want to have
impossible<00:39:24.680><c> to</c><00:39:24.830><c> fix</c><00:39:25.040><c> bugs</c><00:39:25.280><c> in</c><00:39:25.849><c> our</c>

00:39:26.050 --> 00:39:26.060 align:start position:0%
impossible to fix bugs in our
 

00:39:26.060 --> 00:39:29.050 align:start position:0%
impossible to fix bugs in our
applications<00:39:26.690><c> this</c><00:39:27.410><c> is</c><00:39:27.589><c> a</c><00:39:27.619><c> an</c><00:39:28.369><c> application</c><00:39:28.490><c> of</c>

00:39:29.050 --> 00:39:29.060 align:start position:0%
applications this is a an application of
 

00:39:29.060 --> 00:39:31.690 align:start position:0%
applications this is a an application of
a<00:39:29.180><c> very</c><00:39:29.480><c> old</c><00:39:29.720><c> principle</c><00:39:30.560><c> in</c><00:39:30.890><c> exception</c><00:39:31.550><c> and</c>

00:39:31.690 --> 00:39:31.700 align:start position:0%
a very old principle in exception and
 

00:39:31.700 --> 00:39:34.510 align:start position:0%
a very old principle in exception and
Lane<00:39:31.820><c> we</c><00:39:32.420><c> chill</c><00:39:32.660><c> which</c><00:39:33.200><c> is</c><00:39:33.380><c> fail</c><00:39:33.890><c> fast</c><00:39:34.220><c> fail</c>

00:39:34.510 --> 00:39:34.520 align:start position:0%
Lane we chill which is fail fast fail
 

00:39:34.520 --> 00:39:37.000 align:start position:0%
Lane we chill which is fail fast fail
first<00:39:35.000><c> if</c><00:39:35.420><c> I</c><00:39:35.599><c> know</c><00:39:35.660><c> that</c><00:39:35.960><c> this</c><00:39:36.470><c> one</c><00:39:36.680><c> is</c><00:39:36.710><c> going</c>

00:39:37.000 --> 00:39:37.010 align:start position:0%
first if I know that this one is going
 

00:39:37.010 --> 00:39:38.859 align:start position:0%
first if I know that this one is going
to<00:39:37.099><c> be</c><00:39:37.250><c> cluttered</c><00:39:37.640><c> I</c><00:39:37.849><c> throw</c><00:39:38.420><c> a</c><00:39:38.450><c> minor</c><00:39:38.630><c> point</c>

00:39:38.859 --> 00:39:38.869 align:start position:0%
to be cluttered I throw a minor point
 

00:39:38.869 --> 00:39:43.240 align:start position:0%
to be cluttered I throw a minor point
exception<00:39:39.410><c> right</c><00:39:40.099><c> now</c><00:39:40.869><c> by</c><00:39:41.869><c> the</c><00:39:41.930><c> way</c><00:39:42.170><c> this</c><00:39:43.070><c> is</c>

00:39:43.240 --> 00:39:43.250 align:start position:0%
exception right now by the way this is
 

00:39:43.250 --> 00:39:46.920 align:start position:0%
exception right now by the way this is
what<00:39:43.460><c> I</c><00:39:43.760><c> should</c><00:39:43.940><c> have</c><00:39:44.150><c> been</c><00:39:44.450><c> doing</c><00:39:44.570><c> here</c><00:39:45.349><c> also</c>

00:39:46.920 --> 00:39:46.930 align:start position:0%
what I should have been doing here also
 

00:39:46.930 --> 00:39:54.670 align:start position:0%
what I should have been doing here also
objects

00:39:54.670 --> 00:39:54.680 align:start position:0%
 
 

00:39:54.680 --> 00:40:00.460 align:start position:0%
 
yeah<00:39:57.850><c> yeah</c>

00:40:00.460 --> 00:40:00.470 align:start position:0%
yeah yeah
 

00:40:00.470 --> 00:40:06.160 align:start position:0%
yeah yeah
yeah<00:40:03.819><c> you</c><00:40:04.819><c> mean</c><00:40:05.000><c> if</c><00:40:05.119><c> I</c><00:40:05.240><c> call</c><00:40:05.569><c> and</c><00:40:05.750><c> then</c><00:40:05.930><c> and</c>

00:40:06.160 --> 00:40:06.170 align:start position:0%
yeah you mean if I call and then and
 

00:40:06.170 --> 00:40:07.780 align:start position:0%
yeah you mean if I call and then and
then<00:40:06.319><c> and</c><00:40:06.470><c> then</c><00:40:06.650><c> and</c><00:40:06.800><c> then</c><00:40:06.950><c> it</c><00:40:07.460><c> will</c><00:40:07.670><c> continue</c>

00:40:07.780 --> 00:40:07.790 align:start position:0%
then and then and then it will continue
 

00:40:07.790 --> 00:40:17.180 align:start position:0%
then and then and then it will continue
to<00:40:08.150><c> work</c><00:40:08.270><c> no</c><00:40:09.230><c> problem</c><00:40:12.430><c> and</c><00:40:13.430><c> then</c>

00:40:17.180 --> 00:40:17.190 align:start position:0%
 
 

00:40:17.190 --> 00:40:23.539 align:start position:0%
 
yeah<00:40:18.289><c> lutely</c><00:40:21.500><c> you</c><00:40:22.500><c> can't</c><00:40:22.890><c> you</c><00:40:22.980><c> can</c><00:40:23.160><c> change</c>

00:40:23.539 --> 00:40:23.549 align:start position:0%
yeah lutely you can't you can change
 

00:40:23.549 --> 00:40:26.120 align:start position:0%
yeah lutely you can't you can change
consumers<00:40:24.420><c> you</c><00:40:25.349><c> can</c><00:40:25.530><c> chain</c><00:40:25.740><c> as</c><00:40:25.920><c> many</c>

00:40:26.120 --> 00:40:26.130 align:start position:0%
consumers you can chain as many
 

00:40:26.130 --> 00:40:27.740 align:start position:0%
consumers you can chain as many
consumers<00:40:26.640><c> as</c><00:40:26.760><c> you</c><00:40:26.849><c> need</c><00:40:27.030><c> and</c><00:40:27.450><c> you</c><00:40:27.720><c> can</c>

00:40:27.740 --> 00:40:27.750 align:start position:0%
consumers as you need and you can
 

00:40:27.750 --> 00:40:29.809 align:start position:0%
consumers as you need and you can
compose<00:40:28.470><c> as</c><00:40:28.710><c> many</c><00:40:28.920><c> predicates</c><00:40:29.400><c> as</c><00:40:29.549><c> you</c><00:40:29.670><c> need</c>

00:40:29.809 --> 00:40:29.819 align:start position:0%
compose as many predicates as you need
 

00:40:29.819 --> 00:40:32.240 align:start position:0%
compose as many predicates as you need
with<00:40:30.420><c> and</c><00:40:30.630><c> and</c><00:40:30.960><c> create</c><00:40:31.260><c> and</c><00:40:31.440><c> all</c><00:40:31.619><c> methods</c><00:40:32.010><c> or</c>

00:40:32.240 --> 00:40:32.250 align:start position:0%
with and and create and all methods or
 

00:40:32.250 --> 00:40:41.089 align:start position:0%
with and and create and all methods or
this<00:40:32.609><c> kind</c><00:40:32.760><c> of</c><00:40:32.849><c> thing</c><00:40:32.940><c> yeah</c><00:40:39.470><c> well</c><00:40:40.470><c> you</c><00:40:40.559><c> mean</c><00:40:40.710><c> in</c>

00:40:41.089 --> 00:40:41.099 align:start position:0%
this kind of thing yeah well you mean in
 

00:40:41.099 --> 00:40:47.450 align:start position:0%
this kind of thing yeah well you mean in
Nicole<00:40:41.609><c> yeah</c><00:40:45.470><c> yes</c><00:40:46.470><c> but</c><00:40:46.680><c> this</c><00:40:46.829><c> is</c><00:40:47.010><c> this</c><00:40:47.160><c> is</c><00:40:47.309><c> what</c>

00:40:47.450 --> 00:40:47.460 align:start position:0%
Nicole yeah yes but this is this is what
 

00:40:47.460 --> 00:40:49.039 align:start position:0%
Nicole yeah yes but this is this is what
I've<00:40:47.609><c> written</c><00:40:47.760><c> if</c><00:40:48.119><c> this</c><00:40:48.390><c> is</c><00:40:48.539><c> what</c><00:40:48.690><c> I</c><00:40:48.720><c> need</c><00:40:48.930><c> it's</c>

00:40:49.039 --> 00:40:49.049 align:start position:0%
I've written if this is what I need it's
 

00:40:49.049 --> 00:40:56.120 align:start position:0%
I've written if this is what I need it's
okay<00:40:49.460><c> you</c><00:40:50.460><c> see</c><00:40:51.170><c> this</c><00:40:52.170><c> is</c><00:40:52.349><c> a</c><00:40:52.380><c> consumer</c><00:40:55.130><c> well</c>

00:40:56.120 --> 00:40:56.130 align:start position:0%
okay you see this is a consumer well
 

00:40:56.130 --> 00:40:57.710 align:start position:0%
okay you see this is a consumer well
there's<00:40:56.670><c> nothing</c><00:40:56.970><c> you</c><00:40:57.000><c> can</c><00:40:57.240><c> do</c><00:40:57.329><c> to</c><00:40:57.450><c> prevent</c>

00:40:57.710 --> 00:40:57.720 align:start position:0%
there's nothing you can do to prevent
 

00:40:57.720 --> 00:40:59.440 align:start position:0%
there's nothing you can do to prevent
that<00:40:57.809><c> from</c><00:40:57.930><c> within</c><00:40:58.470><c> the</c><00:40:58.740><c> intent</c><00:40:59.069><c> method</c>

00:40:59.440 --> 00:40:59.450 align:start position:0%
that from within the intent method
 

00:40:59.450 --> 00:41:02.510 align:start position:0%
that from within the intent method
because<00:41:00.450><c> you</c><00:41:00.539><c> don't</c><00:41:00.690><c> know</c><00:41:00.839><c> okay</c><00:41:01.829><c> this</c><00:41:02.369><c> is</c><00:41:02.490><c> a</c>

00:41:02.510 --> 00:41:02.520 align:start position:0%
because you don't know okay this is a
 

00:41:02.520 --> 00:41:04.900 align:start position:0%
because you don't know okay this is a
consumer<00:41:02.940><c> I</c><00:41:03.210><c> could</c><00:41:03.930><c> put</c><00:41:04.109><c> that</c><00:41:04.140><c> in</c><00:41:04.380><c> a</c><00:41:04.470><c> variable</c>

00:41:04.900 --> 00:41:04.910 align:start position:0%
consumer I could put that in a variable
 

00:41:04.910 --> 00:41:09.079 align:start position:0%
consumer I could put that in a variable
and<00:41:06.650><c> this</c><00:41:07.650><c> is</c><00:41:07.710><c> just</c><00:41:08.069><c> a</c><00:41:08.160><c> regular</c><00:41:08.309><c> consumers</c><00:41:08.940><c> I'm</c>

00:41:09.079 --> 00:41:09.089 align:start position:0%
and this is just a regular consumers I'm
 

00:41:09.089 --> 00:41:10.819 align:start position:0%
and this is just a regular consumers I'm
just<00:41:09.480><c> calling</c><00:41:09.780><c> and</c><00:41:09.960><c> then</c><00:41:10.109><c> method</c><00:41:10.470><c> on</c><00:41:10.619><c> the</c>

00:41:10.819 --> 00:41:10.829 align:start position:0%
just calling and then method on the
 

00:41:10.829 --> 00:41:13.069 align:start position:0%
just calling and then method on the
regular<00:41:11.160><c> consumer</c><00:41:11.579><c> so</c><00:41:12.420><c> there</c><00:41:12.599><c> is</c><00:41:12.720><c> no</c><00:41:12.900><c> way</c>

00:41:13.069 --> 00:41:13.079 align:start position:0%
regular consumer so there is no way
 

00:41:13.079 --> 00:41:16.069 align:start position:0%
regular consumer so there is no way
within<00:41:13.740><c> the</c><00:41:13.890><c> Endon</c><00:41:14.309><c> method</c><00:41:14.609><c> for</c><00:41:15.599><c> me</c><00:41:15.720><c> to</c><00:41:15.900><c> know</c>

00:41:16.069 --> 00:41:16.079 align:start position:0%
within the Endon method for me to know
 

00:41:16.079 --> 00:41:19.099 align:start position:0%
within the Endon method for me to know
that<00:41:16.319><c> in</c><00:41:16.470><c> fact</c><00:41:16.650><c> the</c><00:41:16.829><c> consumer</c><00:41:17.309><c> I</c><00:41:17.520><c> I</c><00:41:18.390><c> am</c><00:41:18.780><c> in</c><00:41:18.930><c> is</c>

00:41:19.099 --> 00:41:19.109 align:start position:0%
that in fact the consumer I I am in is
 

00:41:19.109 --> 00:41:29.650 align:start position:0%
that in fact the consumer I I am in is
itself<00:41:19.740><c> a</c><00:41:19.920><c> composition</c><00:41:20.490><c> of</c><00:41:20.640><c> other</c><00:41:20.819><c> consumers</c>

00:41:29.650 --> 00:41:29.660 align:start position:0%
 
 

00:41:29.660 --> 00:41:32.599 align:start position:0%
 
we<00:41:30.660><c> can</c><00:41:30.839><c> also</c><00:41:30.990><c> predicate</c><00:41:31.950><c> for</c><00:41:32.130><c> instance</c><00:41:32.460><c> we</c>

00:41:32.599 --> 00:41:32.609 align:start position:0%
we can also predicate for instance we
 

00:41:32.609 --> 00:41:34.519 align:start position:0%
we can also predicate for instance we
can<00:41:32.760><c> also</c><00:41:32.910><c> create</c><00:41:33.299><c> other</c><00:41:33.720><c> default</c><00:41:34.170><c> methods</c>

00:41:34.519 --> 00:41:34.529 align:start position:0%
can also create other default methods
 

00:41:34.529 --> 00:41:41.180 align:start position:0%
can also create other default methods
for<00:41:34.740><c> instance</c><00:41:36.200><c> the</c><00:41:37.200><c> p1</c><00:41:38.779><c> the</c><00:41:39.779><c> shorter</c><00:41:40.170><c> than</c><00:41:40.319><c> 10</c>

00:41:41.180 --> 00:41:41.190 align:start position:0%
for instance the p1 the shorter than 10
 

00:41:41.190 --> 00:41:44.450 align:start position:0%
for instance the p1 the shorter than 10
I<00:41:42.079><c> could</c><00:41:43.079><c> say</c><00:41:43.260><c> alright</c><00:41:43.500><c> I</c><00:41:43.650><c> want</c><00:41:44.010><c> I</c><00:41:44.160><c> want</c><00:41:44.400><c> to</c>

00:41:44.450 --> 00:41:44.460 align:start position:0%
I could say alright I want I want to
 

00:41:44.460 --> 00:41:47.480 align:start position:0%
I could say alright I want I want to
implement<00:41:45.140><c> the</c><00:41:46.140><c> negate</c><00:41:46.500><c> operator</c><00:41:47.010><c> on</c><00:41:47.339><c> the</c>

00:41:47.480 --> 00:41:47.490 align:start position:0%
implement the negate operator on the
 

00:41:47.490 --> 00:41:49.880 align:start position:0%
implement the negate operator on the
consumer<00:41:47.940><c> the</c><00:41:48.630><c> this</c><00:41:48.930><c> negate</c><00:41:49.289><c> operator</c><00:41:49.799><c> is</c>

00:41:49.880 --> 00:41:49.890 align:start position:0%
consumer the this negate operator is
 

00:41:49.890 --> 00:41:51.710 align:start position:0%
consumer the this negate operator is
also<00:41:50.220><c> a</c><00:41:50.250><c> default</c><00:41:50.640><c> method</c><00:41:50.789><c> but</c><00:41:51.180><c> this</c><00:41:51.329><c> time</c><00:41:51.569><c> it</c>

00:41:51.710 --> 00:41:51.720 align:start position:0%
also a default method but this time it
 

00:41:51.720 --> 00:41:54.859 align:start position:0%
also a default method but this time it
does<00:41:51.900><c> not</c><00:41:52.020><c> take</c><00:41:52.260><c> any</c><00:41:52.289><c> parameter</c><00:41:53.359><c> okay</c><00:41:54.359><c> so</c><00:41:54.750><c> let</c>

00:41:54.859 --> 00:41:54.869 align:start position:0%
does not take any parameter okay so let
 

00:41:54.869 --> 00:41:57.890 align:start position:0%
does not take any parameter okay so let
us<00:41:54.900><c> write</c><00:41:55.230><c> it</c><00:41:55.579><c> default</c><00:41:56.579><c> it</c><00:41:57.180><c> returns</c><00:41:57.630><c> a</c><00:41:57.750><c> my</c>

00:41:57.890 --> 00:41:57.900 align:start position:0%
us write it default it returns a my
 

00:41:57.900 --> 00:42:05.809 align:start position:0%
us write it default it returns a my
predicate<00:42:00.980><c> of</c><00:42:01.980><c> T</c><00:42:02.480><c> call</c><00:42:03.480><c> negate</c><00:42:03.839><c> and</c><00:42:04.670><c> does</c><00:42:05.670><c> not</c>

00:42:05.809 --> 00:42:05.819 align:start position:0%
predicate of T call negate and does not
 

00:42:05.819 --> 00:42:14.329 align:start position:0%
predicate of T call negate and does not
take<00:42:06.000><c> any</c><00:42:06.240><c> parameter</c><00:42:11.839><c> okay</c><00:42:12.839><c> so</c><00:42:13.559><c> what</c><00:42:14.039><c> should</c><00:42:14.220><c> I</c>

00:42:14.329 --> 00:42:14.339 align:start position:0%
take any parameter okay so what should I
 

00:42:14.339 --> 00:42:17.079 align:start position:0%
take any parameter okay so what should I
return<00:42:15.150><c> now</c><00:42:15.210><c> once</c><00:42:15.779><c> again</c><00:42:15.960><c> this</c><00:42:16.289><c> is</c><00:42:16.529><c> a</c>

00:42:17.079 --> 00:42:17.089 align:start position:0%
return now once again this is a
 

00:42:17.089 --> 00:42:21.049 align:start position:0%
return now once again this is a
predicate<00:42:18.089><c> so</c><00:42:18.569><c> I</c><00:42:18.630><c> copy/paste</c><00:42:19.170><c> the</c><00:42:19.289><c> block</c><00:42:20.059><c> of</c>

00:42:21.049 --> 00:42:21.059 align:start position:0%
predicate so I copy/paste the block of
 

00:42:21.059 --> 00:42:24.500 align:start position:0%
predicate so I copy/paste the block of
parameters<00:42:21.690><c> here</c><00:42:22.049><c> little</c><00:42:22.950><c> arrow</c><00:42:23.190><c> and</c><00:42:23.579><c> this</c>

00:42:24.500 --> 00:42:24.510 align:start position:0%
parameters here little arrow and this
 

00:42:24.510 --> 00:42:27.900 align:start position:0%
parameters here little arrow and this
should<00:42:24.869><c> return</c>

00:42:27.900 --> 00:42:27.910 align:start position:0%
 
 

00:42:27.910 --> 00:42:33.480 align:start position:0%
 
the<00:42:28.660><c> negation</c><00:42:29.260><c> of</c><00:42:29.290><c> the</c><00:42:30.250><c> testing</c><00:42:30.670><c> of</c><00:42:31.030><c> T</c><00:42:32.340><c> which</c><00:42:33.340><c> I</c>

00:42:33.480 --> 00:42:33.490 align:start position:0%
the negation of the testing of T which I
 

00:42:33.490 --> 00:42:38.520 align:start position:0%
the negation of the testing of T which I
can<00:42:33.670><c> write</c><00:42:34.080><c> just</c><00:42:35.080><c> like</c><00:42:36.030><c> it</c><00:42:37.170><c> so</c><00:42:38.170><c> you</c><00:42:38.230><c> see</c><00:42:38.380><c> that</c>

00:42:38.520 --> 00:42:38.530 align:start position:0%
can write just like it so you see that
 

00:42:38.530 --> 00:42:41.550 align:start position:0%
can write just like it so you see that
default<00:42:38.980><c> method</c><00:42:39.160><c> allowed</c><00:42:40.030><c> us</c><00:42:40.240><c> to</c><00:42:40.560><c> implement</c>

00:42:41.550 --> 00:42:41.560 align:start position:0%
default method allowed us to implement
 

00:42:41.560 --> 00:42:43.350 align:start position:0%
default method allowed us to implement
composition<00:42:42.310><c> and</c><00:42:42.520><c> manipulations</c><00:42:43.270><c> of</c>

00:42:43.350 --> 00:42:43.360 align:start position:0%
composition and manipulations of
 

00:42:43.360 --> 00:42:56.100 align:start position:0%
composition and manipulations of
functions<00:42:43.840><c> as</c><00:42:45.930><c> expressions</c><00:42:50.100><c> okay</c><00:42:54.570><c> so</c><00:42:55.570><c> we've</c>

00:42:56.100 --> 00:42:56.110 align:start position:0%
functions as expressions okay so we've
 

00:42:56.110 --> 00:42:58.050 align:start position:0%
functions as expressions okay so we've
got<00:42:56.140><c> functional</c><00:42:56.980><c> interfaces</c><00:42:57.400><c> to</c><00:42:57.730><c> write</c><00:42:57.910><c> on</c>

00:42:58.050 --> 00:42:58.060 align:start position:0%
got functional interfaces to write on
 

00:42:58.060 --> 00:43:00.630 align:start position:0%
got functional interfaces to write on
that<00:42:58.090><c> expressions</c><00:42:58.750><c> we</c><00:42:59.170><c> have</c><00:42:59.220><c> default</c><00:43:00.220><c> methods</c>

00:43:00.630 --> 00:43:00.640 align:start position:0%
that expressions we have default methods
 

00:43:00.640 --> 00:43:04.530 align:start position:0%
that expressions we have default methods
to<00:43:01.450><c> compose</c><00:43:02.050><c> them</c><00:43:02.380><c> we</c><00:43:03.070><c> also</c><00:43:03.250><c> have</c><00:43:03.640><c> a</c><00:43:03.670><c> static</c>

00:43:04.530 --> 00:43:04.540 align:start position:0%
to compose them we also have a static
 

00:43:04.540 --> 00:43:07.080 align:start position:0%
to compose them we also have a static
method<00:43:04.720><c> that</c><00:43:05.050><c> can</c><00:43:05.200><c> be</c><00:43:05.260><c> used</c><00:43:05.590><c> as</c><00:43:06.040><c> factories</c><00:43:06.610><c> and</c>

00:43:07.080 --> 00:43:07.090 align:start position:0%
method that can be used as factories and
 

00:43:07.090 --> 00:43:08.670 align:start position:0%
method that can be used as factories and
we're<00:43:07.270><c> going</c><00:43:07.450><c> to</c><00:43:07.600><c> see</c><00:43:07.750><c> that</c><00:43:07.930><c> on</c><00:43:08.200><c> further</c>

00:43:08.670 --> 00:43:08.680 align:start position:0%
we're going to see that on further
 

00:43:08.680 --> 00:43:11.580 align:start position:0%
we're going to see that on further
examples<00:43:09.210><c> what</c><00:43:10.210><c> what</c><00:43:10.480><c> the</c><00:43:10.660><c> idea</c><00:43:10.960><c> is</c><00:43:11.140><c> to</c><00:43:11.350><c> give</c>

00:43:11.580 --> 00:43:11.590 align:start position:0%
examples what what the idea is to give
 

00:43:11.590 --> 00:43:14.600 align:start position:0%
examples what what the idea is to give
to<00:43:11.830><c> our</c><00:43:12.100><c> code</c><00:43:12.520><c> the</c><00:43:12.730><c> better</c><00:43:13.330><c> readability</c>

00:43:14.600 --> 00:43:14.610 align:start position:0%
to our code the better readability
 

00:43:14.610 --> 00:43:17.700 align:start position:0%
to our code the better readability
essentially<00:43:15.610><c> because</c><00:43:16.090><c> we</c><00:43:16.270><c> are</c><00:43:16.420><c> moving</c><00:43:16.710><c> some</c>

00:43:17.700 --> 00:43:17.710 align:start position:0%
essentially because we are moving some
 

00:43:17.710 --> 00:43:19.650 align:start position:0%
essentially because we are moving some
part<00:43:17.920><c> of</c><00:43:18.040><c> the</c><00:43:18.160><c> technical</c><00:43:18.670><c> code</c><00:43:18.910><c> especially</c>

00:43:19.650 --> 00:43:19.660 align:start position:0%
part of the technical code especially
 

00:43:19.660 --> 00:43:22.680 align:start position:0%
part of the technical code especially
the<00:43:20.290><c> the</c><00:43:20.320><c> null</c><00:43:20.620><c> pointer</c><00:43:20.950><c> handling</c><00:43:21.310><c> to</c><00:43:22.210><c> the</c><00:43:22.360><c> API</c>

00:43:22.680 --> 00:43:22.690 align:start position:0%
the the null pointer handling to the API
 

00:43:22.690 --> 00:43:24.930 align:start position:0%
the the null pointer handling to the API
instead<00:43:23.260><c> of</c><00:43:23.470><c> having</c><00:43:23.650><c> them</c><00:43:23.980><c> having</c><00:43:24.550><c> that</c><00:43:24.580><c> code</c>

00:43:24.930 --> 00:43:24.940 align:start position:0%
instead of having them having that code
 

00:43:24.940 --> 00:43:28.350 align:start position:0%
instead of having them having that code
inside<00:43:25.840><c> our</c><00:43:26.590><c> application</c><00:43:26.770><c> code</c><00:43:27.280><c> this</c><00:43:27.940><c> is</c><00:43:28.150><c> this</c>

00:43:28.350 --> 00:43:28.360 align:start position:0%
inside our application code this is this
 

00:43:28.360 --> 00:43:31.140 align:start position:0%
inside our application code this is this
is<00:43:28.780><c> what</c><00:43:29.110><c> leads</c><00:43:29.440><c> to</c><00:43:29.560><c> better</c><00:43:29.800><c> readability</c><00:43:30.670><c> and</c>

00:43:31.140 --> 00:43:31.150 align:start position:0%
is what leads to better readability and
 

00:43:31.150 --> 00:43:33.960 align:start position:0%
is what leads to better readability and
also<00:43:31.930><c> better</c><00:43:32.170><c> robustness</c><00:43:32.670><c> because</c><00:43:33.670><c> we</c><00:43:33.790><c> can</c>

00:43:33.960 --> 00:43:33.970 align:start position:0%
also better robustness because we can
 

00:43:33.970 --> 00:43:35.750 align:start position:0%
also better robustness because we can
check<00:43:34.180><c> for</c><00:43:34.420><c> all</c><00:43:34.570><c> the</c><00:43:34.750><c> exceptions</c><00:43:35.020><c> inside</c>

00:43:35.750 --> 00:43:35.760 align:start position:0%
check for all the exceptions inside
 

00:43:35.760 --> 00:43:38.910 align:start position:0%
check for all the exceptions inside
inside<00:43:36.760><c> our</c><00:43:36.910><c> code</c><00:43:37.120><c> and</c><00:43:37.900><c> it</c><00:43:38.050><c> also</c><00:43:38.290><c> gives</c><00:43:38.620><c> better</c>

00:43:38.910 --> 00:43:38.920 align:start position:0%
inside our code and it also gives better
 

00:43:38.920 --> 00:43:40.830 align:start position:0%
inside our code and it also gives better
performances<00:43:39.670><c> I</c><00:43:39.910><c> will</c><00:43:40.090><c> not</c><00:43:40.210><c> be</c><00:43:40.360><c> covering</c><00:43:40.540><c> that</c>

00:43:40.830 --> 00:43:40.840 align:start position:0%
performances I will not be covering that
 

00:43:40.840 --> 00:43:42.330 align:start position:0%
performances I will not be covering that
point<00:43:41.140><c> but</c><00:43:41.380><c> if</c><00:43:41.530><c> you're</c><00:43:41.680><c> interested</c><00:43:42.070><c> in</c><00:43:42.190><c> that</c>

00:43:42.330 --> 00:43:42.340 align:start position:0%
point but if you're interested in that
 

00:43:42.340 --> 00:43:44.310 align:start position:0%
point but if you're interested in that
there<00:43:42.550><c> is</c><00:43:42.580><c> a</c><00:43:42.700><c> very</c><00:43:43.000><c> interesting</c><00:43:43.210><c> talk</c><00:43:43.630><c> by</c>

00:43:44.310 --> 00:43:44.320 align:start position:0%
there is a very interesting talk by
 

00:43:44.320 --> 00:43:46.200 align:start position:0%
there is a very interesting talk by
Brian<00:43:44.590><c> gates</c><00:43:44.890><c> called</c><00:43:45.220><c> lambda</c><00:43:45.460><c> peek</c><00:43:45.940><c> under</c><00:43:46.180><c> the</c>

00:43:46.200 --> 00:43:46.210 align:start position:0%
Brian gates called lambda peek under the
 

00:43:46.210 --> 00:43:52.410 align:start position:0%
Brian gates called lambda peek under the
hood<00:43:46.710><c> available</c><00:43:47.710><c> on</c><00:43:48.490><c> YouTube</c><00:43:50.850><c> we</c><00:43:51.850><c> have</c><00:43:51.880><c> I</c>

00:43:52.410 --> 00:43:52.420 align:start position:0%
hood available on YouTube we have I
 

00:43:52.420 --> 00:43:54.300 align:start position:0%
hood available on YouTube we have I
mentioned<00:43:52.960><c> the</c><00:43:53.140><c> several</c><00:43:53.470><c> time</c><00:43:53.680><c> the</c><00:43:53.890><c> my</c>

00:43:54.300 --> 00:43:54.310 align:start position:0%
mentioned the several time the my
 

00:43:54.310 --> 00:43:56.610 align:start position:0%
mentioned the several time the my
consumer<00:43:55.030><c> and</c><00:43:55.270><c> my</c><00:43:55.480><c> predicate</c><00:43:56.080><c> which</c><00:43:56.290><c> are</c><00:43:56.500><c> in</c>

00:43:56.610 --> 00:43:56.620 align:start position:0%
consumer and my predicate which are in
 

00:43:56.620 --> 00:44:00.210 align:start position:0%
consumer and my predicate which are in
fact<00:43:56.650><c> mimics</c><00:43:57.250><c> of</c><00:43:57.520><c> the</c><00:43:59.010><c> consumer</c><00:44:00.010><c> and</c>

00:44:00.210 --> 00:44:00.220 align:start position:0%
fact mimics of the consumer and
 

00:44:00.220 --> 00:44:01.830 align:start position:0%
fact mimics of the consumer and
predicate<00:44:00.760><c> functional</c><00:44:01.390><c> interfaces</c>

00:44:01.830 --> 00:44:01.840 align:start position:0%
predicate functional interfaces
 

00:44:01.840 --> 00:44:04.380 align:start position:0%
predicate functional interfaces
available<00:44:02.590><c> in</c><00:44:02.710><c> the</c><00:44:02.800><c> GDK</c><00:44:03.190><c> in</c><00:44:03.850><c> fact</c><00:44:04.180><c> i've</c><00:44:04.360><c> got</c>

00:44:04.380 --> 00:44:04.390 align:start position:0%
available in the GDK in fact i've got
 

00:44:04.390 --> 00:44:06.930 align:start position:0%
available in the GDK in fact i've got
four<00:44:05.080><c> big</c><00:44:05.620><c> categories</c><00:44:06.310><c> of</c><00:44:06.490><c> functional</c>

00:44:06.930 --> 00:44:06.940 align:start position:0%
four big categories of functional
 

00:44:06.940 --> 00:44:09.450 align:start position:0%
four big categories of functional
interfaces<00:44:07.360><c> in</c><00:44:08.020><c> this</c><00:44:08.380><c> Java</c><00:44:08.740><c> util</c><00:44:09.070><c> function</c>

00:44:09.450 --> 00:44:09.460 align:start position:0%
interfaces in this Java util function
 

00:44:09.460 --> 00:44:12.300 align:start position:0%
interfaces in this Java util function
package<00:44:09.820><c> the</c><00:44:10.570><c> consumer</c><00:44:11.080><c> the</c><00:44:11.410><c> supplier</c><00:44:11.830><c> the</c>

00:44:12.300 --> 00:44:12.310 align:start position:0%
package the consumer the supplier the
 

00:44:12.310 --> 00:44:14.280 align:start position:0%
package the consumer the supplier the
function<00:44:12.790><c> and</c><00:44:13.000><c> the</c><00:44:13.240><c> predicate</c><00:44:13.540><c> we</c><00:44:13.960><c> will</c><00:44:14.110><c> see</c>

00:44:14.280 --> 00:44:14.290 align:start position:0%
function and the predicate we will see
 

00:44:14.290 --> 00:44:16.610 align:start position:0%
function and the predicate we will see
examples<00:44:14.500><c> of</c><00:44:14.830><c> suppliers</c><00:44:15.370><c> and</c><00:44:15.550><c> functions</c><00:44:15.970><c> for</c>

00:44:16.610 --> 00:44:16.620 align:start position:0%
examples of suppliers and functions for
 

00:44:16.620 --> 00:44:21.030 align:start position:0%
examples of suppliers and functions for
the<00:44:17.620><c> examples</c><00:44:18.180><c> those</c><00:44:19.180><c> are</c><00:44:19.390><c> the</c><00:44:19.570><c> most</c><00:44:20.110><c> basic</c>

00:44:21.030 --> 00:44:21.040 align:start position:0%
the examples those are the most basic
 

00:44:21.040 --> 00:44:24.840 align:start position:0%
the examples those are the most basic
implementations<00:44:21.880><c> of</c><00:44:22.090><c> those</c><00:44:23.850><c> functional</c>

00:44:24.840 --> 00:44:24.850 align:start position:0%
implementations of those functional
 

00:44:24.850 --> 00:44:27.600 align:start position:0%
implementations of those functional
interface<00:44:25.300><c> interfaces</c><00:44:26.260><c> of</c><00:44:26.410><c> consumer</c><00:44:26.890><c> take</c>

00:44:27.600 --> 00:44:27.610 align:start position:0%
interface interfaces of consumer take
 

00:44:27.610 --> 00:44:30.090 align:start position:0%
interface interfaces of consumer take
something<00:44:28.060><c> does</c><00:44:28.540><c> not</c><00:44:28.690><c> return</c><00:44:29.020><c> anything</c><00:44:29.260><c> the</c>

00:44:30.090 --> 00:44:30.100 align:start position:0%
something does not return anything the
 

00:44:30.100 --> 00:44:32.070 align:start position:0%
something does not return anything the
supplier<00:44:30.460><c> does</c><00:44:31.030><c> not</c><00:44:31.210><c> take</c><00:44:31.420><c> anything</c><00:44:31.690><c> and</c>

00:44:32.070 --> 00:44:32.080 align:start position:0%
supplier does not take anything and
 

00:44:32.080 --> 00:44:35.460 align:start position:0%
supplier does not take anything and
reach<00:44:32.770><c> on</c><00:44:32.980><c> something</c><00:44:33.400><c> the</c><00:44:34.270><c> function</c><00:44:34.720><c> takes</c><00:44:35.260><c> an</c>

00:44:35.460 --> 00:44:35.470 align:start position:0%
reach on something the function takes an
 

00:44:35.470 --> 00:44:37.290 align:start position:0%
reach on something the function takes an
object<00:44:35.590><c> of</c><00:44:35.890><c> a</c><00:44:35.950><c> given</c><00:44:36.190><c> type</c><00:44:36.370><c> and</c><00:44:36.760><c> returns</c><00:44:37.180><c> an</c>

00:44:37.290 --> 00:44:37.300 align:start position:0%
object of a given type and returns an
 

00:44:37.300 --> 00:44:38.599 align:start position:0%
object of a given type and returns an
object

00:44:38.599 --> 00:44:38.609 align:start position:0%
object
 

00:44:38.609 --> 00:44:40.940 align:start position:0%
object
and<00:44:39.150><c> the</c><00:44:39.240><c> predicate</c><00:44:39.720><c> is</c><00:44:39.990><c> a</c><00:44:40.109><c> special</c><00:44:40.650><c> kind</c><00:44:40.800><c> of</c>

00:44:40.940 --> 00:44:40.950 align:start position:0%
and the predicate is a special kind of
 

00:44:40.950 --> 00:44:43.250 align:start position:0%
and the predicate is a special kind of
function<00:44:41.369><c> that</c><00:44:41.550><c> returns</c><00:44:42.119><c> a</c><00:44:42.540><c> boolean</c>

00:44:43.250 --> 00:44:43.260 align:start position:0%
function that returns a boolean
 

00:44:43.260 --> 00:44:48.910 align:start position:0%
function that returns a boolean
I<00:44:44.030><c> can</c><00:44:45.030><c> also</c><00:44:45.180><c> well</c><00:44:46.020><c> those</c><00:44:46.559><c> are</c><00:44:46.770><c> more</c><00:44:47.520><c> elaborate</c>

00:44:48.910 --> 00:44:48.920 align:start position:0%
I can also well those are more elaborate
 

00:44:48.920 --> 00:44:52.819 align:start position:0%
I can also well those are more elaborate
example<00:44:49.920><c> that</c><00:44:50.190><c> and</c><00:44:50.660><c> I've</c><00:44:51.660><c> also</c><00:44:51.990><c> have</c><00:44:52.319><c> a</c><00:44:52.349><c> fifth</c>

00:44:52.819 --> 00:44:52.829 align:start position:0%
example that and I've also have a fifth
 

00:44:52.829 --> 00:44:54.829 align:start position:0%
example that and I've also have a fifth
lambda<00:44:53.790><c> expression</c><00:44:54.240><c> where</c><00:44:54.420><c> functional</c>

00:44:54.829 --> 00:44:54.839 align:start position:0%
lambda expression where functional
 

00:44:54.839 --> 00:44:57.290 align:start position:0%
lambda expression where functional
interface<00:44:55.290><c> that</c><00:44:55.589><c> fits</c><00:44:56.010><c> nicely</c><00:44:56.280><c> I</c><00:44:56.700><c> think</c><00:44:56.940><c> in</c>

00:44:57.290 --> 00:44:57.300 align:start position:0%
interface that fits nicely I think in
 

00:44:57.300 --> 00:44:59.780 align:start position:0%
interface that fits nicely I think in
this<00:44:57.690><c> in</c><00:44:57.990><c> this</c><00:44:58.140><c> set</c><00:44:58.380><c> which</c><00:44:59.040><c> is</c><00:44:59.220><c> the</c><00:44:59.339><c> runnable</c>

00:44:59.780 --> 00:44:59.790 align:start position:0%
this in this set which is the runnable
 

00:44:59.790 --> 00:45:02.299 align:start position:0%
this in this set which is the runnable
interface<00:45:00.480><c> a</c><00:45:00.780><c> runnable</c><00:45:01.589><c> interface</c><00:45:01.980><c> is</c><00:45:02.130><c> not</c>

00:45:02.299 --> 00:45:02.309 align:start position:0%
interface a runnable interface is not
 

00:45:02.309 --> 00:45:04.250 align:start position:0%
interface a runnable interface is not
new<00:45:02.609><c> it</c><00:45:02.760><c> has</c><00:45:02.880><c> been</c><00:45:03.059><c> here</c><00:45:03.390><c> from</c><00:45:03.630><c> very</c><00:45:03.990><c> early</c>

00:45:04.250 --> 00:45:04.260 align:start position:0%
new it has been here from very early
 

00:45:04.260 --> 00:45:07.040 align:start position:0%
new it has been here from very early
days<00:45:04.859><c> of</c><00:45:05.069><c> the</c><00:45:05.550><c> GDK</c><00:45:05.940><c> and</c><00:45:06.390><c> it's</c><00:45:06.720><c> something</c><00:45:06.900><c> that</c>

00:45:07.040 --> 00:45:07.050 align:start position:0%
days of the GDK and it's something that
 

00:45:07.050 --> 00:45:09.170 align:start position:0%
days of the GDK and it's something that
doesn't<00:45:07.530><c> take</c><00:45:07.680><c> anything</c><00:45:07.920><c> and</c><00:45:08.339><c> does</c><00:45:09.030><c> not</c>

00:45:09.170 --> 00:45:09.180 align:start position:0%
doesn't take anything and does not
 

00:45:09.180 --> 00:45:11.750 align:start position:0%
doesn't take anything and does not
return<00:45:09.390><c> anything</c><00:45:09.900><c> things</c><00:45:10.829><c> think</c><00:45:11.339><c> about</c><00:45:11.609><c> the</c>

00:45:11.750 --> 00:45:11.760 align:start position:0%
return anything things think about the
 

00:45:11.760 --> 00:45:13.819 align:start position:0%
return anything things think about the
logger<00:45:11.970><c> for</c><00:45:12.270><c> instance</c><00:45:12.630><c> basically</c><00:45:13.559><c> a</c><00:45:13.589><c> logger</c>

00:45:13.819 --> 00:45:13.829 align:start position:0%
logger for instance basically a logger
 

00:45:13.829 --> 00:45:21.440 align:start position:0%
logger for instance basically a logger
it<00:45:14.160><c> can</c><00:45:15.059><c> be</c><00:45:15.240><c> modeled</c><00:45:15.990><c> as</c><00:45:16.380><c> a</c><00:45:16.470><c> rainbow</c><00:45:19.910><c> let</c><00:45:20.910><c> us</c><00:45:21.030><c> go</c>

00:45:21.440 --> 00:45:21.450 align:start position:0%
it can be modeled as a rainbow let us go
 

00:45:21.450 --> 00:45:24.380 align:start position:0%
it can be modeled as a rainbow let us go
back<00:45:21.599><c> to</c><00:45:21.660><c> our</c><00:45:21.809><c> comparator</c><00:45:22.619><c> example</c><00:45:23.329><c> we</c><00:45:24.329><c> are</c>

00:45:24.380 --> 00:45:24.390 align:start position:0%
back to our comparator example we are
 

00:45:24.390 --> 00:45:27.559 align:start position:0%
back to our comparator example we are
going<00:45:24.510><c> to</c><00:45:24.720><c> write</c><00:45:24.960><c> a</c><00:45:25.349><c> comparator</c><00:45:26.010><c> of</c><00:45:26.569><c> people</c>

00:45:27.559 --> 00:45:27.569 align:start position:0%
going to write a comparator of people
 

00:45:27.569 --> 00:45:30.380 align:start position:0%
going to write a comparator of people
and<00:45:28.099><c> for</c><00:45:29.099><c> that</c><00:45:29.190><c> we</c><00:45:29.400><c> are</c><00:45:29.430><c> going</c><00:45:29.640><c> to</c><00:45:29.760><c> use</c><00:45:30.089><c> a</c>

00:45:30.380 --> 00:45:30.390 align:start position:0%
and for that we are going to use a
 

00:45:30.390 --> 00:45:33.170 align:start position:0%
and for that we are going to use a
lambda<00:45:30.630><c> expression</c><00:45:31.200><c> and</c><00:45:31.410><c> then</c><00:45:32.180><c> sorry</c>

00:45:33.170 --> 00:45:33.180 align:start position:0%
lambda expression and then sorry
 

00:45:33.180 --> 00:45:35.569 align:start position:0%
lambda expression and then sorry
anonymous<00:45:33.930><c> class</c><00:45:34.200><c> and</c><00:45:34.500><c> then</c><00:45:34.950><c> along</c><00:45:35.460><c> the</c>

00:45:35.569 --> 00:45:35.579 align:start position:0%
anonymous class and then along the
 

00:45:35.579 --> 00:45:42.170 align:start position:0%
anonymous class and then along the
expression<00:45:35.990><c> it's</c><00:45:36.990><c> demo</c><00:45:37.440><c> time</c><00:45:37.530><c> again</c><00:45:41.059><c> okay</c><00:45:42.059><c> we</c>

00:45:42.170 --> 00:45:42.180 align:start position:0%
expression it's demo time again okay we
 

00:45:42.180 --> 00:45:47.859 align:start position:0%
expression it's demo time again okay we
need<00:45:42.359><c> to</c><00:45:42.510><c> close</c><00:45:42.839><c> all</c><00:45:43.380><c> this</c><00:45:43.559><c> stuff</c><00:45:46.430><c> alright</c>

00:45:47.859 --> 00:45:47.869 align:start position:0%
need to close all this stuff alright
 

00:45:47.869 --> 00:45:50.809 align:start position:0%
need to close all this stuff alright
play<00:45:48.869><c> with</c><00:45:49.140><c> comparators</c><00:45:49.770><c> so</c><00:45:50.010><c> I've</c><00:45:50.250><c> got</c><00:45:50.460><c> a</c><00:45:50.490><c> my</c>

00:45:50.809 --> 00:45:50.819 align:start position:0%
play with comparators so I've got a my
 

00:45:50.819 --> 00:45:53.120 align:start position:0%
play with comparators so I've got a my
comparator<00:45:51.450><c> interface</c><00:45:51.900><c> which</c><00:45:52.290><c> is</c><00:45:52.319><c> a</c><00:45:52.530><c> mimic</c><00:45:52.920><c> of</c>

00:45:53.120 --> 00:45:53.130 align:start position:0%
comparator interface which is a mimic of
 

00:45:53.130 --> 00:45:56.420 align:start position:0%
comparator interface which is a mimic of
the<00:45:53.400><c> real</c><00:45:53.609><c> compare</c><00:45:54.210><c> to</c><00:45:54.329><c> interface</c><00:45:55.220><c> all</c><00:45:56.220><c> right</c>

00:45:56.420 --> 00:45:56.430 align:start position:0%
the real compare to interface all right
 

00:45:56.430 --> 00:45:58.370 align:start position:0%
the real compare to interface all right
I'm<00:45:56.970><c> going</c><00:45:57.180><c> to</c><00:45:57.210><c> play</c><00:45:57.420><c> with</c><00:45:57.660><c> it</c><00:45:57.839><c> and</c><00:45:58.079><c> I</c><00:45:58.170><c> also</c>

00:45:58.370 --> 00:45:58.380 align:start position:0%
I'm going to play with it and I also
 

00:45:58.380 --> 00:46:02.569 align:start position:0%
I'm going to play with it and I also
have<00:45:58.740><c> a</c><00:45:58.770><c> person</c><00:45:59.640><c> class</c><00:45:59.880><c> which</c><00:46:00.750><c> is</c><00:46:00.960><c> a</c><00:46:00.990><c> basic</c><00:46:01.579><c> bin</c>

00:46:02.569 --> 00:46:02.579 align:start position:0%
have a person class which is a basic bin
 

00:46:02.579 --> 00:46:04.640 align:start position:0%
have a person class which is a basic bin
with<00:46:03.270><c> three</c><00:46:03.480><c> properties</c><00:46:03.780><c> first</c><00:46:04.290><c> name</c><00:46:04.470><c> last</c>

00:46:04.640 --> 00:46:04.650 align:start position:0%
with three properties first name last
 

00:46:04.650 --> 00:46:07.089 align:start position:0%
with three properties first name last
name<00:46:04.890><c> and</c><00:46:05.250><c> age</c><00:46:05.520><c> I'm</c><00:46:06.059><c> going</c><00:46:06.270><c> to</c><00:46:06.420><c> play</c><00:46:06.839><c> with</c><00:46:06.960><c> that</c>

00:46:07.089 --> 00:46:07.099 align:start position:0%
name and age I'm going to play with that
 

00:46:07.099 --> 00:46:14.049 align:start position:0%
name and age I'm going to play with that
so<00:46:08.099><c> let</c><00:46:08.460><c> us</c><00:46:08.490><c> create</c><00:46:09.059><c> my</c><00:46:09.900><c> comparator</c><00:46:10.349><c> a</c><00:46:12.349><c> person</c>

00:46:14.049 --> 00:46:14.059 align:start position:0%
so let us create my comparator a person
 

00:46:14.059 --> 00:46:18.530 align:start position:0%
so let us create my comparator a person
I'm<00:46:15.059><c> going</c><00:46:15.359><c> to</c><00:46:15.480><c> call</c><00:46:15.660><c> it</c><00:46:15.750><c> CMP</c><00:46:16.260><c> one</c><00:46:16.880><c> new</c><00:46:17.880><c> my</c>

00:46:18.530 --> 00:46:18.540 align:start position:0%
I'm going to call it CMP one new my
 

00:46:18.540 --> 00:46:27.350 align:start position:0%
I'm going to call it CMP one new my
competitor<00:46:21.410><c> yes</c><00:46:22.410><c> if</c><00:46:22.619><c> I</c><00:46:22.740><c> do</c><00:46:22.799><c> not</c><00:46:23.010><c> support</c><00:46:23.490><c> this</c>

00:46:27.350 --> 00:46:27.360 align:start position:0%
 
 

00:46:27.360 --> 00:46:32.430 align:start position:0%
 
person<00:46:28.360><c> we</c><00:46:29.290><c> are</c><00:46:29.320><c> going</c><00:46:29.590><c> to</c><00:46:29.770><c> implement</c><00:46:30.490><c> it</c><00:46:31.440><c> real</c>

00:46:32.430 --> 00:46:32.440 align:start position:0%
person we are going to implement it real
 

00:46:32.440 --> 00:46:39.330 align:start position:0%
person we are going to implement it real
quick<00:46:32.710><c> right</c><00:46:33.930><c> person</c><00:46:34.930><c> p1</c><00:46:36.120><c> and</c><00:46:37.120><c> person</c><00:46:37.540><c> P</c><00:46:37.720><c> 2</c><00:46:38.340><c> and</c>

00:46:39.330 --> 00:46:39.340 align:start position:0%
quick right person p1 and person P 2 and
 

00:46:39.340 --> 00:46:42.230 align:start position:0%
quick right person p1 and person P 2 and
what<00:46:40.000><c> I</c><00:46:40.030><c> want</c><00:46:40.270><c> to</c><00:46:40.390><c> do</c><00:46:40.540><c> is</c><00:46:40.690><c> the</c><00:46:40.840><c> following</c><00:46:40.990><c> I</c>

00:46:42.230 --> 00:46:42.240 align:start position:0%
what I want to do is the following I
 

00:46:42.240 --> 00:46:46.860 align:start position:0%
what I want to do is the following I
want<00:46:43.240><c> to</c><00:46:43.360><c> first</c><00:46:43.600><c> I</c><00:46:43.960><c> want</c><00:46:44.320><c> to</c><00:46:45.090><c> p1</c><00:46:46.090><c> take</c><00:46:46.570><c> the</c><00:46:46.720><c> last</c>

00:46:46.860 --> 00:46:46.870 align:start position:0%
want to first I want to p1 take the last
 

00:46:46.870 --> 00:46:51.260 align:start position:0%
want to first I want to p1 take the last
name

00:46:51.260 --> 00:46:51.270 align:start position:0%
 
 

00:46:51.270 --> 00:46:59.790 align:start position:0%
 
this<00:46:52.270><c> is</c><00:46:52.480><c> last</c><00:46:52.720><c> name</c><00:46:54.420><c> here</c><00:46:56.670><c> and</c><00:46:58.440><c> p2</c><00:46:59.440><c> that</c><00:46:59.470><c> get</c>

00:46:59.790 --> 00:46:59.800 align:start position:0%
this is last name here and p2 that get
 

00:46:59.800 --> 00:47:01.440 align:start position:0%
this is last name here and p2 that get
us<00:47:00.010><c> name</c><00:47:00.250><c> this</c><00:47:00.370><c> is</c><00:47:00.550><c> last</c><00:47:00.760><c> name</c><00:47:00.970><c> too</c>

00:47:01.440 --> 00:47:01.450 align:start position:0%
us name this is last name too
 

00:47:01.450 --> 00:47:03.480 align:start position:0%
us name this is last name too
and<00:47:01.720><c> then</c><00:47:02.020><c> I</c><00:47:02.140><c> would</c><00:47:02.350><c> just</c><00:47:02.620><c> want</c><00:47:02.920><c> to</c><00:47:03.070><c> return</c><00:47:03.340><c> the</c>

00:47:03.480 --> 00:47:03.490 align:start position:0%
and then I would just want to return the
 

00:47:03.490 --> 00:47:07.430 align:start position:0%
and then I would just want to return the
comparison<00:47:04.120><c> of</c><00:47:04.300><c> last</c><00:47:05.290><c> name</c><00:47:05.500><c> one</c><00:47:05.680><c> with</c><00:47:06.220><c> a</c>

00:47:07.430 --> 00:47:07.440 align:start position:0%
comparison of last name one with a
 

00:47:07.440 --> 00:47:13.860 align:start position:0%
comparison of last name one with a
lasting<00:47:08.440><c> two</c><00:47:10.200><c> this</c><00:47:11.200><c> is</c><00:47:11.260><c> my</c><00:47:11.500><c> comparison</c><00:47:12.540><c> now</c><00:47:13.540><c> if</c>

00:47:13.860 --> 00:47:13.870 align:start position:0%
lasting two this is my comparison now if
 

00:47:13.870 --> 00:47:17.580 align:start position:0%
lasting two this is my comparison now if
I<00:47:14.050><c> take</c><00:47:14.290><c> a</c><00:47:14.320><c> closer</c><00:47:14.770><c> look</c><00:47:14.920><c> at</c><00:47:15.460><c> this</c><00:47:15.790><c> code</c><00:47:16.560><c> what</c><00:47:17.560><c> I</c>

00:47:17.580 --> 00:47:17.590 align:start position:0%
I take a closer look at this code what I
 

00:47:17.590 --> 00:47:21.890 align:start position:0%
I take a closer look at this code what I
can<00:47:17.860><c> do</c><00:47:18.010><c> here</c><00:47:18.370><c> is</c><00:47:19.060><c> extract</c><00:47:19.930><c> that</c><00:47:20.190><c> to</c><00:47:21.190><c> a</c><00:47:21.220><c> method</c>

00:47:21.890 --> 00:47:21.900 align:start position:0%
can do here is extract that to a method
 

00:47:21.900 --> 00:47:29.160 align:start position:0%
can do here is extract that to a method
right<00:47:23.610><c> and</c><00:47:24.610><c> if</c><00:47:24.730><c> I</c><00:47:24.850><c> do</c><00:47:24.910><c> that</c><00:47:25.060><c> I</c><00:47:27.420><c> can</c><00:47:28.420><c> see</c><00:47:28.750><c> they</c><00:47:28.900><c> in</c>

00:47:29.160 --> 00:47:29.170 align:start position:0%
right and if I do that I can see they in
 

00:47:29.170 --> 00:47:34.200 align:start position:0%
right and if I do that I can see they in
fact<00:47:29.700><c> my</c><00:47:30.700><c> comparator</c><00:47:31.360><c> here</c><00:47:32.040><c> only</c><00:47:33.040><c> depends</c><00:47:33.550><c> on</c>

00:47:34.200 --> 00:47:34.210 align:start position:0%
fact my comparator here only depends on
 

00:47:34.210 --> 00:47:36.930 align:start position:0%
fact my comparator here only depends on
this<00:47:34.510><c> method</c><00:47:34.860><c> that</c><00:47:35.860><c> is</c><00:47:35.980><c> if</c><00:47:36.160><c> I</c><00:47:36.280><c> want</c><00:47:36.430><c> to</c><00:47:36.610><c> compare</c>

00:47:36.930 --> 00:47:36.940 align:start position:0%
this method that is if I want to compare
 

00:47:36.940 --> 00:47:39.090 align:start position:0%
this method that is if I want to compare
people<00:47:37.330><c> using</c><00:47:37.690><c> their</c><00:47:37.840><c> first</c><00:47:38.050><c> name</c><00:47:38.290><c> what</c><00:47:39.070><c> I</c>

00:47:39.090 --> 00:47:39.100 align:start position:0%
people using their first name what I
 

00:47:39.100 --> 00:47:42.180 align:start position:0%
people using their first name what I
need<00:47:39.340><c> to</c><00:47:39.490><c> do</c><00:47:39.610><c> is</c><00:47:39.760><c> change</c><00:47:40.000><c> its</c><00:47:40.240><c> code</c><00:47:40.480><c> and</c><00:47:41.190><c> the</c>

00:47:42.180 --> 00:47:42.190 align:start position:0%
need to do is change its code and the
 

00:47:42.190 --> 00:47:45.180 align:start position:0%
need to do is change its code and the
rest<00:47:42.340><c> of</c><00:47:42.490><c> the</c><00:47:42.580><c> code</c><00:47:42.760><c> is</c><00:47:42.820><c> the</c><00:47:42.940><c> same</c><00:47:44.160><c> so</c><00:47:45.160><c> the</c>

00:47:45.180 --> 00:47:45.190 align:start position:0%
rest of the code is the same so the
 

00:47:45.190 --> 00:47:48.180 align:start position:0%
rest of the code is the same so the
comparator<00:47:46.030><c> have</c><00:47:46.150><c> written</c><00:47:46.480><c> in</c><00:47:46.960><c> fact</c><00:47:47.320><c> depends</c>

00:47:48.180 --> 00:47:48.190 align:start position:0%
comparator have written in fact depends
 

00:47:48.190 --> 00:47:52.320 align:start position:0%
comparator have written in fact depends
on<00:47:48.430><c> the</c><00:47:48.850><c> method</c><00:47:49.500><c> well</c><00:47:50.500><c> this</c><00:47:50.620><c> is</c><00:47:50.800><c> nice</c><00:47:51.330><c> because</c>

00:47:52.320 --> 00:47:52.330 align:start position:0%
on the method well this is nice because
 

00:47:52.330 --> 00:47:54.540 align:start position:0%
on the method well this is nice because
I<00:47:52.570><c> know</c><00:47:52.630><c> that</c><00:47:52.870><c> with</c><00:47:53.050><c> long</c><00:47:53.380><c> down</c><00:47:53.590><c> with</c><00:47:54.130><c> London's</c>

00:47:54.540 --> 00:47:54.550 align:start position:0%
I know that with long down with London's
 

00:47:54.550 --> 00:47:59.790 align:start position:0%
I know that with long down with London's
I<00:47:54.790><c> can</c><00:47:55.540><c> pass</c><00:47:55.900><c> methods</c><00:47:56.860><c> as</c><00:47:57.610><c> parameters</c><00:47:58.650><c> so</c><00:47:59.650><c> what</c>

00:47:59.790 --> 00:47:59.800 align:start position:0%
I can pass methods as parameters so what
 

00:47:59.800 --> 00:48:02.460 align:start position:0%
I can pass methods as parameters so what
I<00:47:59.830><c> need</c><00:47:59.950><c> to</c><00:48:00.190><c> do</c><00:48:00.340><c> is</c><00:48:00.550><c> to</c><00:48:00.820><c> transform</c><00:48:01.540><c> this</c><00:48:02.020><c> method</c>

00:48:02.460 --> 00:48:02.470 align:start position:0%
I need to do is to transform this method
 

00:48:02.470 --> 00:48:05.670 align:start position:0%
I need to do is to transform this method
in<00:48:03.160><c> a</c><00:48:03.310><c> lambda</c><00:48:03.610><c> and</c><00:48:03.820><c> then</c><00:48:04.780><c> I</c><00:48:04.810><c> will</c><00:48:05.050><c> be</c><00:48:05.170><c> able</c><00:48:05.290><c> to</c>

00:48:05.670 --> 00:48:05.680 align:start position:0%
in a lambda and then I will be able to
 

00:48:05.680 --> 00:48:09.030 align:start position:0%
in a lambda and then I will be able to
create<00:48:06.040><c> a</c><00:48:06.070><c> comparator</c><00:48:06.730><c> just</c><00:48:07.630><c> by</c><00:48:07.750><c> passing</c><00:48:08.320><c> risk</c>

00:48:09.030 --> 00:48:09.040 align:start position:0%
create a comparator just by passing risk
 

00:48:09.040 --> 00:48:11.550 align:start position:0%
create a comparator just by passing risk
lambda<00:48:09.490><c> as</c><00:48:09.940><c> a</c><00:48:10.000><c> parameter</c><00:48:10.330><c> to</c><00:48:10.660><c> some</c><00:48:11.080><c> kind</c><00:48:11.350><c> of</c>

00:48:11.550 --> 00:48:11.560 align:start position:0%
lambda as a parameter to some kind of
 

00:48:11.560 --> 00:48:15.270 align:start position:0%
lambda as a parameter to some kind of
factory<00:48:12.130><c> method</c><00:48:12.520><c> for</c><00:48:12.760><c> instance</c><00:48:13.470><c> okay</c><00:48:14.470><c> what</c>

00:48:15.270 --> 00:48:15.280 align:start position:0%
factory method for instance okay what
 

00:48:15.280 --> 00:48:18.170 align:start position:0%
factory method for instance okay what
does<00:48:15.430><c> this</c><00:48:15.610><c> method</c><00:48:15.880><c> do</c><00:48:16.500><c> it</c><00:48:17.500><c> takes</c><00:48:17.710><c> a</c><00:48:17.830><c> person</c>

00:48:18.170 --> 00:48:18.180 align:start position:0%
does this method do it takes a person
 

00:48:18.180 --> 00:48:21.960 align:start position:0%
does this method do it takes a person
and<00:48:19.180><c> return</c><00:48:19.510><c> a</c><00:48:19.540><c> string</c><00:48:19.690><c> of</c><00:48:20.050><c> characters</c><00:48:20.970><c> takes</c>

00:48:21.960 --> 00:48:21.970 align:start position:0%
and return a string of characters takes
 

00:48:21.970 --> 00:48:24.180 align:start position:0%
and return a string of characters takes
an<00:48:22.120><c> object</c><00:48:22.560><c> returns</c><00:48:23.560><c> an</c><00:48:23.710><c> object</c><00:48:23.800><c> from</c><00:48:24.130><c> another</c>

00:48:24.180 --> 00:48:24.190 align:start position:0%
an object returns an object from another
 

00:48:24.190 --> 00:48:26.780 align:start position:0%
an object returns an object from another
type<00:48:24.700><c> the</c><00:48:25.540><c> model</c><00:48:25.870><c> for</c><00:48:26.080><c> therefore</c><00:48:26.500><c> that</c>

00:48:26.780 --> 00:48:26.790 align:start position:0%
type the model for therefore that
 

00:48:26.790 --> 00:48:28.920 align:start position:0%
type the model for therefore that
functional<00:48:27.790><c> interface</c><00:48:28.210><c> which</c><00:48:28.510><c> is</c><00:48:28.540><c> the</c><00:48:28.690><c> model</c>

00:48:28.920 --> 00:48:28.930 align:start position:0%
functional interface which is the model
 

00:48:28.930 --> 00:48:31.590 align:start position:0%
functional interface which is the model
for<00:48:29.200><c> that</c><00:48:29.230><c> is</c><00:48:29.710><c> the</c><00:48:29.950><c> function</c><00:48:30.370><c> that</c><00:48:30.730><c> takes</c><00:48:31.390><c> an</c>

00:48:31.590 --> 00:48:31.600 align:start position:0%
for that is the function that takes an
 

00:48:31.600 --> 00:48:33.390 align:start position:0%
for that is the function that takes an
object<00:48:31.690><c> precisely</c><00:48:32.200><c> in</c><00:48:32.380><c> return</c><00:48:32.710><c> another</c>

00:48:33.390 --> 00:48:33.400 align:start position:0%
object precisely in return another
 

00:48:33.400 --> 00:48:36.000 align:start position:0%
object precisely in return another
object<00:48:33.580><c> of</c><00:48:33.970><c> another</c><00:48:34.300><c> type</c><00:48:34.510><c> so</c><00:48:35.440><c> let</c><00:48:35.650><c> us</c><00:48:35.680><c> write</c>

00:48:36.000 --> 00:48:36.010 align:start position:0%
object of another type so let us write
 

00:48:36.010 --> 00:48:39.620 align:start position:0%
object of another type so let us write
this<00:48:36.490><c> function</c>

00:48:39.620 --> 00:48:39.630 align:start position:0%
 
 

00:48:39.630 --> 00:48:44.969 align:start position:0%
 
it<00:48:40.630><c> takes</c><00:48:40.839><c> a</c><00:48:40.960><c> person</c><00:48:41.369><c> returns</c><00:48:42.369><c> a</c><00:48:42.489><c> string</c><00:48:43.979><c> I'm</c>

00:48:44.969 --> 00:48:44.979 align:start position:0%
it takes a person returns a string I'm
 

00:48:44.979 --> 00:48:50.099 align:start position:0%
it takes a person returns a string I'm
going<00:48:45.220><c> to</c><00:48:45.339><c> call</c><00:48:45.549><c> it</c><00:48:45.670><c> no</c><00:48:46.539><c> last</c><00:48:47.079><c> name</c><00:48:48.839><c> okay</c><00:48:49.839><c> it</c>

00:48:50.099 --> 00:48:50.109 align:start position:0%
going to call it no last name okay it
 

00:48:50.109 --> 00:48:52.920 align:start position:0%
going to call it no last name okay it
takes<00:48:50.289><c> a</c><00:48:50.410><c> person</c><00:48:50.589><c> P</c><00:48:50.950><c> if</c><00:48:51.759><c> I</c><00:48:51.940><c> found</c><00:48:52.210><c> if</c><00:48:52.599><c> I</c><00:48:52.779><c> have</c>

00:48:52.920 --> 00:48:52.930 align:start position:0%
takes a person P if I found if I have
 

00:48:52.930 --> 00:48:54.690 align:start position:0%
takes a person P if I found if I have
trouble<00:48:53.079><c> implementing</c><00:48:53.829><c> that</c><00:48:53.979><c> I</c><00:48:54.249><c> can</c><00:48:54.489><c> just</c>

00:48:54.690 --> 00:48:54.700 align:start position:0%
trouble implementing that I can just
 

00:48:54.700 --> 00:48:58.380 align:start position:0%
trouble implementing that I can just
navigate<00:48:54.849><c> to</c><00:48:55.150><c> this</c><00:48:55.390><c> and</c><00:48:55.690><c> copy</c><00:48:56.380><c> paste</c><00:48:57.390><c> whatever</c>

00:48:58.380 --> 00:48:58.390 align:start position:0%
navigate to this and copy paste whatever
 

00:48:58.390 --> 00:49:02.309 align:start position:0%
navigate to this and copy paste whatever
I<00:48:58.599><c> need</c><00:48:58.839><c> from</c><00:48:59.349><c> this</c><00:48:59.529><c> applied</c><00:49:00.099><c> method</c><00:49:00.519><c> here</c><00:49:01.319><c> I'm</c>

00:49:02.309 --> 00:49:02.319 align:start position:0%
I need from this applied method here I'm
 

00:49:02.319 --> 00:49:08.749 align:start position:0%
I need from this applied method here I'm
going<00:49:02.710><c> to</c><00:49:02.829><c> do</c><00:49:02.950><c> it</c><00:49:03.009><c> directly</c><00:49:03.400><c> takes</c><00:49:04.269><c> a</c><00:49:04.420><c> person</c><00:49:04.779><c> P</c>

00:49:08.749 --> 00:49:08.759 align:start position:0%
 
 

00:49:08.759 --> 00:49:14.249 align:start position:0%
 
and<00:49:10.769><c> called</c><00:49:11.769><c> get</c><00:49:11.979><c> last</c><00:49:12.249><c> name</c><00:49:12.430><c> right</c><00:49:13.019><c> now</c><00:49:14.019><c> that</c>

00:49:14.249 --> 00:49:14.259 align:start position:0%
and called get last name right now that
 

00:49:14.259 --> 00:49:17.579 align:start position:0%
and called get last name right now that
I<00:49:14.289><c> have</c><00:49:14.619><c> this</c><00:49:14.769><c> functional</c><00:49:15.839><c> to</c><00:49:16.839><c> transform</c><00:49:17.440><c> this</c>

00:49:17.579 --> 00:49:17.589 align:start position:0%
I have this functional to transform this
 

00:49:17.589 --> 00:49:20.249 align:start position:0%
I have this functional to transform this
p1<00:49:17.890><c> into</c><00:49:18.460><c> last</c><00:49:18.819><c> name</c><00:49:19.029><c> one</c><00:49:19.239><c> what</c><00:49:19.720><c> I</c><00:49:19.809><c> need</c><00:49:19.989><c> to</c><00:49:20.109><c> do</c>

00:49:20.249 --> 00:49:20.259 align:start position:0%
p1 into last name one what I need to do
 

00:49:20.259 --> 00:49:30.029 align:start position:0%
p1 into last name one what I need to do
is<00:49:22.559><c> call</c><00:49:23.559><c> last</c><00:49:23.799><c> name</c><00:49:24.039><c> and</c><00:49:24.930><c> apply</c><00:49:25.930><c> it</c><00:49:25.989><c> to</c><00:49:26.739><c> p1</c><00:49:29.039><c> and</c>

00:49:30.029 --> 00:49:30.039 align:start position:0%
is call last name and apply it to p1 and
 

00:49:30.039 --> 00:49:32.029 align:start position:0%
is call last name and apply it to p1 and
do<00:49:30.279><c> the</c><00:49:30.400><c> same</c><00:49:30.640><c> here</c>

00:49:32.029 --> 00:49:32.039 align:start position:0%
do the same here
 

00:49:32.039 --> 00:49:40.109 align:start position:0%
do the same here
last<00:49:33.039><c> name</c><00:49:33.339><c> sorry</c><00:49:34.029><c> last</c><00:49:34.450><c> name</c><00:49:36.059><c> apply</c><00:49:38.940><c> for</c><00:49:39.940><c> some</c>

00:49:40.109 --> 00:49:40.119 align:start position:0%
last name sorry last name apply for some
 

00:49:40.119 --> 00:49:40.950 align:start position:0%
last name sorry last name apply for some
p2<00:49:40.420><c> here</c>

00:49:40.950 --> 00:49:40.960 align:start position:0%
p2 here
 

00:49:40.960 --> 00:49:45.719 align:start position:0%
p2 here
I<00:49:40.989><c> do</c><00:49:41.289><c> not</c><00:49:41.529><c> need</c><00:49:41.769><c> this</c><00:49:42.839><c> method</c><00:49:43.839><c> anymore</c><00:49:44.729><c> and</c>

00:49:45.719 --> 00:49:45.729 align:start position:0%
I do not need this method anymore and
 

00:49:45.729 --> 00:49:49.650 align:start position:0%
I do not need this method anymore and
now<00:49:45.940><c> my</c><00:49:46.599><c> code</c><00:49:46.869><c> only</c><00:49:47.349><c> depends</c><00:49:47.950><c> on</c><00:49:48.849><c> a</c><00:49:48.910><c> kind</c><00:49:49.539><c> of</c>

00:49:49.650 --> 00:49:49.660 align:start position:0%
now my code only depends on a kind of
 

00:49:49.660 --> 00:49:52.229 align:start position:0%
now my code only depends on a kind of
object<00:49:50.009><c> it's</c><00:49:51.009><c> not</c><00:49:51.099><c> really</c><00:49:51.460><c> an</c><00:49:51.519><c> object</c><00:49:51.609><c> but</c><00:49:51.969><c> let</c>

00:49:52.229 --> 00:49:52.239 align:start position:0%
object it's not really an object but let
 

00:49:52.239 --> 00:49:54.589 align:start position:0%
object it's not really an object but let
us<00:49:52.329><c> call</c><00:49:52.539><c> it</c><00:49:52.630><c> like</c><00:49:52.779><c> that</c><00:49:52.960><c> which</c><00:49:53.650><c> is</c><00:49:53.859><c> this</c><00:49:53.979><c> one</c>

00:49:54.589 --> 00:49:54.599 align:start position:0%
us call it like that which is this one
 

00:49:54.599 --> 00:49:59.339 align:start position:0%
us call it like that which is this one
and<00:49:55.599><c> I</c><00:49:55.719><c> see</c><00:49:55.989><c> that</c><00:49:56.170><c> in</c><00:49:56.499><c> fact</c><00:49:56.799><c> all</c><00:49:57.069><c> this</c><00:49:57.219><c> code</c><00:49:58.349><c> if</c>

00:49:59.339 --> 00:49:59.349 align:start position:0%
and I see that in fact all this code if
 

00:49:59.349 --> 00:50:03.269 align:start position:0%
and I see that in fact all this code if
I<00:49:59.529><c> put</c><00:49:59.769><c> it</c><00:49:59.890><c> in</c><00:50:00.039><c> a</c><00:50:00.130><c> method</c><00:50:01.650><c> yes</c><00:50:02.650><c> I</c><00:50:02.799><c> can</c><00:50:02.979><c> convert</c>

00:50:03.269 --> 00:50:03.279 align:start position:0%
I put it in a method yes I can convert
 

00:50:03.279 --> 00:50:05.579 align:start position:0%
I put it in a method yes I can convert
it<00:50:03.460><c> if</c><00:50:03.519><c> I</c><00:50:03.609><c> put</c><00:50:03.849><c> in</c><00:50:03.969><c> a</c><00:50:03.999><c> method</c><00:50:04.359><c> only</c><00:50:04.839><c> depends</c><00:50:05.559><c> on</c>

00:50:05.579 --> 00:50:05.589 align:start position:0%
it if I put in a method only depends on
 

00:50:05.589 --> 00:50:07.589 align:start position:0%
it if I put in a method only depends on
this<00:50:06.099><c> last</c><00:50:06.400><c> name</c><00:50:06.609><c> here</c><00:50:06.940><c> by</c><00:50:07.089><c> the</c><00:50:07.150><c> way</c><00:50:07.329><c> I'm</c><00:50:07.420><c> going</c>

00:50:07.589 --> 00:50:07.599 align:start position:0%
this last name here by the way I'm going
 

00:50:07.599 --> 00:50:11.400 align:start position:0%
this last name here by the way I'm going
to<00:50:07.690><c> to</c><00:50:08.619><c> make</c><00:50:08.890><c> it</c><00:50:09.190><c> run</c><00:50:09.849><c> the</c><00:50:09.999><c> expression</c><00:50:10.479><c> all</c><00:50:11.140><c> the</c>

00:50:11.400 --> 00:50:11.410 align:start position:0%
to to make it run the expression all the
 

00:50:11.410 --> 00:50:18.859 align:start position:0%
to to make it run the expression all the
IDS<00:50:11.710><c> can</c><00:50:12.009><c> do</c><00:50:12.130><c> that</c><00:50:16.440><c> extract</c><00:50:17.440><c> this</c><00:50:17.769><c> and</c><00:50:18.009><c> this</c><00:50:18.219><c> is</c>

00:50:18.859 --> 00:50:18.869 align:start position:0%
IDS can do that extract this and this is
 

00:50:18.869 --> 00:50:21.809 align:start position:0%
IDS can do that extract this and this is
this<00:50:19.869><c> is</c><00:50:19.930><c> let</c><00:50:20.710><c> us</c><00:50:20.859><c> make</c><00:50:21.219><c> it</c><00:50:21.430><c> too</c><00:50:21.549><c> long</c><00:50:21.670><c> the</c>

00:50:21.809 --> 00:50:21.819 align:start position:0%
this is let us make it too long the
 

00:50:21.819 --> 00:50:27.479 align:start position:0%
this is let us make it too long the
expression<00:50:24.660><c> okay</c><00:50:25.660><c> it</c><00:50:26.349><c> as</c><00:50:26.559><c> I</c><00:50:26.829><c> have</c><00:50:27.069><c> extracted</c>

00:50:27.479 --> 00:50:27.489 align:start position:0%
expression okay it as I have extracted
 

00:50:27.489 --> 00:50:29.999 align:start position:0%
expression okay it as I have extracted
this<00:50:27.819><c> code</c><00:50:28.119><c> into</c><00:50:28.690><c> a</c><00:50:28.719><c> static</c><00:50:29.410><c> method</c><00:50:29.589><c> which</c><00:50:29.859><c> is</c>

00:50:29.999 --> 00:50:30.009 align:start position:0%
this code into a static method which is
 

00:50:30.009 --> 00:50:32.039 align:start position:0%
this code into a static method which is
a<00:50:30.039><c> factory</c><00:50:30.489><c> method</c><00:50:30.789><c> that</c><00:50:31.509><c> takes</c><00:50:31.690><c> a</c><00:50:31.869><c> function</c>

00:50:32.039 --> 00:50:32.049 align:start position:0%
a factory method that takes a function
 

00:50:32.049 --> 00:50:36.200 align:start position:0%
a factory method that takes a function
and<00:50:32.559><c> that</c><00:50:32.589><c> returns</c><00:50:33.339><c> the</c><00:50:33.400><c> comparator</c><00:50:34.410><c> written</c>

00:50:36.200 --> 00:50:36.210 align:start position:0%
and that returns the comparator written
 

00:50:36.210 --> 00:50:41.099 align:start position:0%
and that returns the comparator written
as<00:50:37.210><c> a</c><00:50:38.019><c> lambda</c><00:50:38.319><c> expression</c><00:50:39.479><c> so</c><00:50:40.479><c> this</c><00:50:40.660><c> method</c>

00:50:41.099 --> 00:50:41.109 align:start position:0%
as a lambda expression so this method
 

00:50:41.109 --> 00:50:44.009 align:start position:0%
as a lambda expression so this method
called<00:50:41.710><c> extract</c><00:50:42.069><c> Erdem</c><00:50:42.690><c> since</c><00:50:43.690><c> it</c><00:50:43.869><c> is</c><00:50:43.989><c> a</c>

00:50:44.009 --> 00:50:44.019 align:start position:0%
called extract Erdem since it is a
 

00:50:44.019 --> 00:50:48.450 align:start position:0%
called extract Erdem since it is a
factory<00:50:44.440><c> method</c><00:50:44.999><c> and</c><00:50:46.589><c> since</c><00:50:47.589><c> I</c><00:50:47.859><c> am</c><00:50:47.979><c> allowed</c><00:50:48.430><c> to</c>

00:50:48.450 --> 00:50:48.460 align:start position:0%
factory method and since I am allowed to
 

00:50:48.460 --> 00:50:51.910 align:start position:0%
factory method and since I am allowed to
put<00:50:49.349><c> static</c><00:50:50.349><c> factor</c>

00:50:51.910 --> 00:50:51.920 align:start position:0%
put static factor
 

00:50:51.920 --> 00:50:55.590 align:start position:0%
put static factor
on<00:50:52.190><c> interfaces</c><00:50:52.850><c> I</c><00:50:53.120><c> can</c><00:50:53.690><c> put</c><00:50:53.900><c> it</c><00:50:54.020><c> here</c>

00:50:55.590 --> 00:50:55.600 align:start position:0%
on interfaces I can put it here
 

00:50:55.600 --> 00:50:58.840 align:start position:0%
on interfaces I can put it here
extractor<00:50:56.680><c> this</c><00:50:57.680><c> method</c><00:50:58.100><c> returns</c><00:50:58.310><c> a</c><00:50:58.670><c> my</c>

00:50:58.840 --> 00:50:58.850 align:start position:0%
extractor this method returns a my
 

00:50:58.850 --> 00:51:03.190 align:start position:0%
extractor this method returns a my
comparator<00:50:59.300><c> of</c><00:50:59.900><c> T</c><00:51:01.270><c> since</c><00:51:02.270><c> it</c><00:51:02.420><c> is</c><00:51:02.540><c> static</c><00:51:02.930><c> I</c>

00:51:03.190 --> 00:51:03.200 align:start position:0%
comparator of T since it is static I
 

00:51:03.200 --> 00:51:05.620 align:start position:0%
comparator of T since it is static I
need<00:51:03.350><c> to</c><00:51:03.470><c> declare</c><00:51:03.800><c> the</c><00:51:03.920><c> type</c><00:51:04.100><c> here</c><00:51:04.640><c> and</c><00:51:05.390><c> I</c><00:51:05.540><c> am</c>

00:51:05.620 --> 00:51:05.630 align:start position:0%
need to declare the type here and I am
 

00:51:05.630 --> 00:51:12.000 align:start position:0%
need to declare the type here and I am
going<00:51:05.900><c> to</c><00:51:06.050><c> call</c><00:51:06.200><c> it</c><00:51:06.260><c> for</c><00:51:06.650><c> instance</c><00:51:06.880><c> comparing</c>

00:51:12.000 --> 00:51:12.010 align:start position:0%
 
 

00:51:12.010 --> 00:51:19.300 align:start position:0%
 
what's<00:51:13.010><c> wrong</c><00:51:13.220><c> with</c><00:51:13.340><c> it</c><00:51:16.150><c> yeah</c>

00:51:19.300 --> 00:51:19.310 align:start position:0%
 
 

00:51:19.310 --> 00:51:25.339 align:start position:0%
 
this<00:51:20.310><c> should</c><00:51:20.520><c> be</c><00:51:20.640><c> it</c>

00:51:25.339 --> 00:51:25.349 align:start position:0%
 
 

00:51:25.349 --> 00:51:31.950 align:start position:0%
 
so<00:51:26.349><c> now</c><00:51:26.589><c> I</c><00:51:28.260><c> can</c><00:51:29.260><c> my</c><00:51:29.410><c> comparator</c><00:51:30.010><c> is</c><00:51:30.690><c> created</c><00:51:31.690><c> by</c>

00:51:31.950 --> 00:51:31.960 align:start position:0%
so now I can my comparator is created by
 

00:51:31.960 --> 00:51:34.349 align:start position:0%
so now I can my comparator is created by
calling<00:51:32.380><c> this</c><00:51:32.730><c> factory</c><00:51:33.730><c> method</c><00:51:34.089><c> my</c>

00:51:34.349 --> 00:51:34.359 align:start position:0%
calling this factory method my
 

00:51:34.359 --> 00:51:42.809 align:start position:0%
calling this factory method my
comparator<00:51:37.170><c> comparing</c><00:51:39.240><c> last</c><00:51:40.240><c> name</c><00:51:40.480><c> I</c><00:51:41.640><c> do</c><00:51:42.640><c> not</c>

00:51:42.809 --> 00:51:42.819 align:start position:0%
comparator comparing last name I do not
 

00:51:42.819 --> 00:51:44.430 align:start position:0%
comparator comparing last name I do not
need<00:51:43.030><c> this</c><00:51:43.240><c> static</c><00:51:43.599><c> method</c><00:51:43.930><c> here</c><00:51:44.170><c> because</c>

00:51:44.430 --> 00:51:44.440 align:start position:0%
need this static method here because
 

00:51:44.440 --> 00:51:46.770 align:start position:0%
need this static method here because
I've<00:51:44.589><c> moved</c><00:51:45.099><c> it</c><00:51:45.339><c> to</c><00:51:46.150><c> the</c><00:51:46.270><c> my</c><00:51:46.390><c> compiler</c>

00:51:46.770 --> 00:51:46.780 align:start position:0%
I've moved it to the my compiler
 

00:51:46.780 --> 00:51:49.650 align:start position:0%
I've moved it to the my compiler
interface<00:51:47.290><c> and</c><00:51:47.829><c> this</c><00:51:48.520><c> last</c><00:51:48.819><c> name</c><00:51:49.059><c> is</c><00:51:49.329><c> just</c>

00:51:49.650 --> 00:51:49.660 align:start position:0%
interface and this last name is just
 

00:51:49.660 --> 00:51:51.270 align:start position:0%
interface and this last name is just
this<00:51:49.930><c> lambda</c><00:51:50.140><c> expression</c><00:51:50.260><c> so</c><00:51:50.829><c> I'm</c><00:51:50.920><c> going</c><00:51:51.130><c> to</c>

00:51:51.270 --> 00:51:51.280 align:start position:0%
this lambda expression so I'm going to
 

00:51:51.280 --> 00:51:54.960 align:start position:0%
this lambda expression so I'm going to
ignite<00:51:51.550><c> this</c><00:51:51.760><c> and</c><00:51:52.630><c> remove</c><00:51:53.020><c> this</c><00:51:53.170><c> and</c><00:51:53.940><c> by</c><00:51:54.940><c> the</c>

00:51:54.960 --> 00:51:54.970 align:start position:0%
ignite this and remove this and by the
 

00:51:54.970 --> 00:51:57.240 align:start position:0%
ignite this and remove this and by the
way<00:51:55.119><c> this</c><00:51:55.540><c> time</c><00:51:55.780><c> the</c><00:51:55.960><c> expression</c><00:51:56.440><c> can</c><00:51:57.220><c> be</c>

00:51:57.240 --> 00:51:57.250 align:start position:0%
way this time the expression can be
 

00:51:57.250 --> 00:52:00.390 align:start position:0%
way this time the expression can be
returned<00:51:57.760><c> as</c><00:51:58.420><c> an</c><00:51:58.690><c> as</c><00:51:58.900><c> a</c><00:51:58.930><c> method</c><00:51:59.319><c> reference</c><00:51:59.710><c> my</c>

00:52:00.390 --> 00:52:00.400 align:start position:0%
returned as an as a method reference my
 

00:52:00.400 --> 00:52:02.819 align:start position:0%
returned as an as a method reference my
IDE<00:52:00.760><c> can</c><00:52:01.030><c> have</c><00:52:01.210><c> been</c><00:52:01.450><c> doing</c><00:52:01.720><c> that</c><00:52:01.869><c> person</c>

00:52:02.819 --> 00:52:02.829 align:start position:0%
IDE can have been doing that person
 

00:52:02.829 --> 00:52:04.530 align:start position:0%
IDE can have been doing that person
current<00:52:03.190><c> count</c><00:52:03.400><c> get</c><00:52:03.790><c> last</c><00:52:04.000><c> name</c><00:52:04.180><c> it's</c><00:52:04.450><c> just</c>

00:52:04.530 --> 00:52:04.540 align:start position:0%
current count get last name it's just
 

00:52:04.540 --> 00:52:06.540 align:start position:0%
current count get last name it's just
another<00:52:05.020><c> syntax</c><00:52:05.559><c> for</c><00:52:05.740><c> method</c><00:52:05.770><c> reference</c><00:52:06.339><c> is</c>

00:52:06.540 --> 00:52:06.550 align:start position:0%
another syntax for method reference is
 

00:52:06.550 --> 00:52:08.790 align:start position:0%
another syntax for method reference is
just<00:52:06.790><c> another</c><00:52:07.030><c> syntax</c><00:52:07.450><c> to</c><00:52:08.050><c> write</c><00:52:08.079><c> our</c><00:52:08.619><c> lambda</c>

00:52:08.790 --> 00:52:08.800 align:start position:0%
just another syntax to write our lambda
 

00:52:08.800 --> 00:52:11.010 align:start position:0%
just another syntax to write our lambda
expressions<00:52:09.339><c> and</c><00:52:09.609><c> this</c><00:52:10.450><c> is</c><00:52:10.599><c> the</c><00:52:10.750><c> final</c>

00:52:11.010 --> 00:52:11.020 align:start position:0%
expressions and this is the final
 

00:52:11.020 --> 00:52:13.859 align:start position:0%
expressions and this is the final
pattern<00:52:11.440><c> to</c><00:52:11.800><c> create</c><00:52:11.980><c> comparators</c><00:52:12.869><c> using</c>

00:52:13.859 --> 00:52:13.869 align:start position:0%
pattern to create comparators using
 

00:52:13.869 --> 00:52:15.750 align:start position:0%
pattern to create comparators using
those<00:52:14.050><c> factory</c><00:52:14.500><c> methods</c><00:52:14.859><c> and</c><00:52:15.430><c> lambda</c>

00:52:15.750 --> 00:52:15.760 align:start position:0%
those factory methods and lambda
 

00:52:15.760 --> 00:52:18.359 align:start position:0%
those factory methods and lambda
expressions<00:52:16.270><c> if</c><00:52:17.050><c> I</c><00:52:17.170><c> check</c><00:52:17.410><c> the</c><00:52:17.530><c> code</c><00:52:17.740><c> in</c><00:52:18.130><c> fact</c>

00:52:18.359 --> 00:52:18.369 align:start position:0%
expressions if I check the code in fact
 

00:52:18.369 --> 00:52:20.549 align:start position:0%
expressions if I check the code in fact
all<00:52:18.880><c> the</c><00:52:19.329><c> creation</c><00:52:19.839><c> of</c><00:52:19.960><c> the</c><00:52:20.050><c> compiled</c><00:52:20.410><c> to</c>

00:52:20.549 --> 00:52:20.559 align:start position:0%
all the creation of the compiled to
 

00:52:20.559 --> 00:52:23.609 align:start position:0%
all the creation of the compiled to
itself<00:52:20.859><c> using</c><00:52:21.220><c> lambda</c><00:52:21.609><c> is</c><00:52:22.089><c> now</c><00:52:22.420><c> in</c><00:52:22.930><c> my</c><00:52:23.200><c> API</c>

00:52:23.609 --> 00:52:23.619 align:start position:0%
itself using lambda is now in my API
 

00:52:23.619 --> 00:52:26.490 align:start position:0%
itself using lambda is now in my API
instead<00:52:24.609><c> of</c><00:52:24.730><c> being</c><00:52:24.970><c> in</c><00:52:25.210><c> my</c><00:52:25.540><c> application</c><00:52:25.960><c> code</c>

00:52:26.490 --> 00:52:26.500 align:start position:0%
instead of being in my application code
 

00:52:26.500 --> 00:52:29.730 align:start position:0%
instead of being in my application code
if<00:52:27.280><c> I</c><00:52:27.460><c> want</c><00:52:27.670><c> to</c><00:52:27.819><c> make</c><00:52:28.000><c> this</c><00:52:28.180><c> code</c><00:52:28.480><c> robust</c><00:52:29.020><c> by</c>

00:52:29.730 --> 00:52:29.740 align:start position:0%
if I want to make this code robust by
 

00:52:29.740 --> 00:52:33.630 align:start position:0%
if I want to make this code robust by
checking<00:52:30.220><c> if</c><00:52:30.369><c> last</c><00:52:30.670><c> name</c><00:52:30.910><c> is</c><00:52:31.030><c> nil</c><00:52:32.369><c> the</c><00:52:33.369><c> first</c>

00:52:33.630 --> 00:52:33.640 align:start position:0%
checking if last name is nil the first
 

00:52:33.640 --> 00:52:36.089 align:start position:0%
checking if last name is nil the first
thing<00:52:33.790><c> I</c><00:52:33.910><c> should</c><00:52:33.940><c> be</c><00:52:34.299><c> doing</c><00:52:34.450><c> of</c><00:52:35.290><c> course</c><00:52:35.380><c> is</c>

00:52:36.089 --> 00:52:36.099 align:start position:0%
thing I should be doing of course is
 

00:52:36.099 --> 00:52:39.630 align:start position:0%
thing I should be doing of course is
throw<00:52:37.380><c> another</c><00:52:38.380><c> experimental</c><00:52:39.130><c> pointer</c>

00:52:39.630 --> 00:52:39.640 align:start position:0%
throw another experimental pointer
 

00:52:39.640 --> 00:52:47.220 align:start position:0%
throw another experimental pointer
exception<00:52:40.059><c> if</c><00:52:42.510><c> here</c><00:52:45.420><c> by</c><00:52:46.420><c> by</c><00:52:46.809><c> the</c><00:52:46.869><c> way</c><00:52:46.960><c> I'm</c>

00:52:47.220 --> 00:52:47.230 align:start position:0%
exception if here by by the way I'm
 

00:52:47.230 --> 00:52:57.329 align:start position:0%
exception if here by by the way I'm
going<00:52:47.440><c> to</c><00:52:47.650><c> call</c><00:52:47.890><c> that</c><00:52:50.579><c> extractor</c><00:52:55.980><c> all</c><00:52:56.980><c> right</c>

00:52:57.329 --> 00:52:57.339 align:start position:0%
going to call that extractor all right
 

00:52:57.339 --> 00:52:59.400 align:start position:0%
going to call that extractor all right
and<00:52:57.730><c> if</c><00:52:57.849><c> I</c><00:52:57.970><c> want</c><00:52:58.180><c> to</c><00:52:58.299><c> check</c><00:52:58.540><c> that</c><00:52:58.780><c> last</c><00:52:59.140><c> name</c>

00:52:59.400 --> 00:52:59.410 align:start position:0%
and if I want to check that last name
 

00:52:59.410 --> 00:53:03.690 align:start position:0%
and if I want to check that last name
they<00:52:59.680><c> say</c><00:52:59.859><c> this</c><00:53:00.040><c> is</c><00:53:00.270><c> s1</c><00:53:01.270><c> and</c><00:53:01.900><c> this</c><00:53:02.380><c> is</c><00:53:02.559><c> s2</c><00:53:02.700><c> not</c>

00:53:03.690 --> 00:53:03.700 align:start position:0%
they say this is s1 and this is s2 not
 

00:53:03.700 --> 00:53:09.390 align:start position:0%
they say this is s1 and this is s2 not
necessary<00:53:04.210><c> the</c><00:53:04.420><c> last</c><00:53:04.630><c> name</c><00:53:08.010><c> if</c><00:53:09.010><c> I</c><00:53:09.130><c> want</c><00:53:09.309><c> to</c>

00:53:09.390 --> 00:53:09.400 align:start position:0%
necessary the last name if I want to
 

00:53:09.400 --> 00:53:11.910 align:start position:0%
necessary the last name if I want to
check<00:53:09.609><c> if</c><00:53:09.730><c> s1</c><00:53:09.940><c> or</c><00:53:10.150><c> s2</c><00:53:10.359><c> is</c><00:53:10.720><c> near</c><00:53:10.930><c> I</c><00:53:11.140><c> can</c><00:53:11.619><c> do</c><00:53:11.770><c> it</c>

00:53:11.910 --> 00:53:11.920 align:start position:0%
check if s1 or s2 is near I can do it
 

00:53:11.920 --> 00:53:16.500 align:start position:0%
check if s1 or s2 is near I can do it
inside<00:53:12.460><c> my</c><00:53:12.700><c> API</c><00:53:13.059><c> without</c><00:53:13.869><c> having</c><00:53:14.680><c> to</c><00:53:15.510><c> lower</c>

00:53:16.500 --> 00:53:16.510 align:start position:0%
inside my API without having to lower
 

00:53:16.510 --> 00:53:19.640 align:start position:0%
inside my API without having to lower
the<00:53:16.900><c> readability</c><00:53:17.260><c> of</c><00:53:17.680><c> my</c><00:53:18.069><c> application</c><00:53:18.609><c> code</c>

00:53:19.640 --> 00:53:19.650 align:start position:0%
the readability of my application code
 

00:53:19.650 --> 00:53:22.109 align:start position:0%
the readability of my application code
but<00:53:20.650><c> what</c><00:53:20.799><c> what</c><00:53:21.190><c> I</c><00:53:21.220><c> would</c><00:53:21.400><c> like</c><00:53:21.490><c> to</c><00:53:21.640><c> do</c><00:53:21.760><c> now</c><00:53:21.940><c> is</c>

00:53:22.109 --> 00:53:22.119 align:start position:0%
but what what I would like to do now is
 

00:53:22.119 --> 00:53:23.910 align:start position:0%
but what what I would like to do now is
go<00:53:22.299><c> one</c><00:53:22.450><c> step</c><00:53:22.690><c> further</c><00:53:22.869><c> and</c><00:53:23.049><c> say</c><00:53:23.410><c> alright</c><00:53:23.710><c> if</c>

00:53:23.910 --> 00:53:23.920 align:start position:0%
go one step further and say alright if
 

00:53:23.920 --> 00:53:26.549 align:start position:0%
go one step further and say alright if
the<00:53:24.099><c> last</c><00:53:24.280><c> name</c><00:53:24.930><c> the</c><00:53:25.930><c> last</c><00:53:26.079><c> name</c><00:53:26.200><c> of</c><00:53:26.380><c> my</c><00:53:26.500><c> two</c>

00:53:26.549 --> 00:53:26.559 align:start position:0%
the last name the last name of my two
 

00:53:26.559 --> 00:53:28.950 align:start position:0%
the last name the last name of my two
people<00:53:26.920><c> are</c><00:53:27.040><c> the</c><00:53:27.069><c> same</c><00:53:27.420><c> then</c><00:53:28.420><c> I</c><00:53:28.569><c> want</c><00:53:28.839><c> to</c>

00:53:28.950 --> 00:53:28.960 align:start position:0%
people are the same then I want to
 

00:53:28.960 --> 00:53:33.450 align:start position:0%
people are the same then I want to
compare<00:53:29.880><c> using</c><00:53:31.770><c> the</c><00:53:32.770><c> first</c><00:53:33.040><c> name</c><00:53:33.280><c> for</c>

00:53:33.450 --> 00:53:33.460 align:start position:0%
compare using the first name for
 

00:53:33.460 --> 00:53:36.640 align:start position:0%
compare using the first name for
instance<00:53:33.990><c> then</c>

00:53:36.640 --> 00:53:36.650 align:start position:0%
instance then
 

00:53:36.650 --> 00:53:41.440 align:start position:0%
instance then
person<00:53:39.349><c> yet</c>

00:53:41.440 --> 00:53:41.450 align:start position:0%
person yet
 

00:53:41.450 --> 00:53:45.890 align:start position:0%
person yet
first<00:53:42.450><c> name</c><00:53:43.759><c> what</c><00:53:44.759><c> is</c><00:53:44.880><c> the</c><00:53:45.059><c> status</c><00:53:45.569><c> of</c><00:53:45.720><c> this</c>

00:53:45.890 --> 00:53:45.900 align:start position:0%
first name what is the status of this
 

00:53:45.900 --> 00:53:48.759 align:start position:0%
first name what is the status of this
new<00:53:46.200><c> method</c><00:53:46.559><c> then</c><00:53:46.799><c> compare</c><00:53:47.249><c> well</c><00:53:48.119><c> obviously</c>

00:53:48.759 --> 00:53:48.769 align:start position:0%
new method then compare well obviously
 

00:53:48.769 --> 00:53:53.589 align:start position:0%
new method then compare well obviously
it<00:53:49.769><c> is</c><00:53:49.950><c> called</c><00:53:50.279><c> on</c><00:53:50.880><c> the</c><00:53:51.029><c> comparator</c><00:53:51.569><c> this</c><00:53:52.499><c> is</c>

00:53:53.589 --> 00:53:53.599 align:start position:0%
it is called on the comparator this is
 

00:53:53.599 --> 00:53:57.230 align:start position:0%
it is called on the comparator this is
okay<00:53:54.599><c> so</c><00:53:55.170><c> it</c><00:53:55.529><c> is</c><00:53:55.559><c> an</c><00:53:55.829><c> instance</c><00:53:56.249><c> method</c><00:53:56.339><c> of</c><00:53:56.940><c> the</c>

00:53:57.230 --> 00:53:57.240 align:start position:0%
okay so it is an instance method of the
 

00:53:57.240 --> 00:54:00.410 align:start position:0%
okay so it is an instance method of the
my<00:53:57.390><c> comparator</c><00:53:58.019><c> interface</c><00:53:58.710><c> I</c><00:53:59.119><c> fall</c><00:54:00.119><c> back</c><00:54:00.269><c> on</c>

00:54:00.410 --> 00:54:00.420 align:start position:0%
my comparator interface I fall back on
 

00:54:00.420 --> 00:54:02.029 align:start position:0%
my comparator interface I fall back on
the<00:54:00.509><c> same</c><00:54:00.720><c> kind</c><00:54:00.900><c> of</c><00:54:01.019><c> question</c><00:54:01.440><c> as</c><00:54:01.589><c> previously</c>

00:54:02.029 --> 00:54:02.039 align:start position:0%
the same kind of question as previously
 

00:54:02.039 --> 00:54:05.089 align:start position:0%
the same kind of question as previously
there<00:54:02.789><c> is</c><00:54:02.940><c> the</c><00:54:03.359><c> that</c><00:54:04.289><c> we</c><00:54:04.470><c> saw</c><00:54:04.650><c> with</c><00:54:04.829><c> my</c>

00:54:05.089 --> 00:54:05.099 align:start position:0%
there is the that we saw with my
 

00:54:05.099 --> 00:54:08.059 align:start position:0%
there is the that we saw with my
consumer<00:54:05.640><c> of</c><00:54:05.819><c> all</c><00:54:06.269><c> my</c><00:54:06.420><c> predicate</c><00:54:06.960><c> so</c><00:54:07.890><c> what</c><00:54:08.039><c> I</c>

00:54:08.059 --> 00:54:08.069 align:start position:0%
consumer of all my predicate so what I
 

00:54:08.069 --> 00:54:09.890 align:start position:0%
consumer of all my predicate so what I
can<00:54:08.339><c> do</c><00:54:08.490><c> is</c><00:54:08.640><c> create</c><00:54:08.940><c> this</c><00:54:09.269><c> then</c><00:54:09.509><c> compare</c>

00:54:09.890 --> 00:54:09.900 align:start position:0%
can do is create this then compare
 

00:54:09.900 --> 00:54:13.309 align:start position:0%
can do is create this then compare
method<00:54:10.230><c> as</c><00:54:10.499><c> a</c><00:54:10.940><c> default</c><00:54:11.940><c> method</c><00:54:12.210><c> of</c><00:54:12.660><c> the</c><00:54:13.170><c> my</c>

00:54:13.309 --> 00:54:13.319 align:start position:0%
method as a default method of the my
 

00:54:13.319 --> 00:54:16.730 align:start position:0%
method as a default method of the my
comparator<00:54:13.829><c> interface</c><00:54:14.990><c> it</c><00:54:15.990><c> is</c><00:54:16.049><c> going</c><00:54:16.380><c> to</c><00:54:16.529><c> take</c>

00:54:16.730 --> 00:54:16.740 align:start position:0%
comparator interface it is going to take
 

00:54:16.740 --> 00:54:19.190 align:start position:0%
comparator interface it is going to take
the<00:54:17.130><c> same</c><00:54:17.400><c> kind</c><00:54:17.700><c> of</c><00:54:17.789><c> parameter</c><00:54:18.359><c> as</c><00:54:18.539><c> the</c>

00:54:19.190 --> 00:54:19.200 align:start position:0%
the same kind of parameter as the
 

00:54:19.200 --> 00:54:21.769 align:start position:0%
the same kind of parameter as the
factory<00:54:19.589><c> method</c><00:54:19.740><c> comparing</c><00:54:20.640><c> and</c><00:54:21.089><c> returns</c>

00:54:21.769 --> 00:54:21.779 align:start position:0%
factory method comparing and returns
 

00:54:21.779 --> 00:54:25.009 align:start position:0%
factory method comparing and returns
also<00:54:22.170><c> my</c><00:54:22.890><c> comparator</c><00:54:23.490><c> of</c><00:54:23.730><c> T</c><00:54:23.999><c> so</c><00:54:24.630><c> let</c><00:54:24.779><c> us</c><00:54:24.869><c> do</c>

00:54:25.009 --> 00:54:25.019 align:start position:0%
also my comparator of T so let us do
 

00:54:25.019 --> 00:54:32.930 align:start position:0%
also my comparator of T so let us do
that<00:54:28.249><c> default</c><00:54:29.249><c> as</c><00:54:29.779><c> I</c><00:54:30.779><c> said</c><00:54:31.019><c> it</c><00:54:31.170><c> returns</c><00:54:31.940><c> my</c>

00:54:32.930 --> 00:54:32.940 align:start position:0%
that default as I said it returns my
 

00:54:32.940 --> 00:54:35.870 align:start position:0%
that default as I said it returns my
comparator<00:54:33.480><c> of</c><00:54:33.569><c> T</c><00:54:33.829><c> it</c><00:54:34.829><c> is</c><00:54:35.009><c> called</c><00:54:35.309><c> then</c>

00:54:35.870 --> 00:54:35.880 align:start position:0%
comparator of T it is called then
 

00:54:35.880 --> 00:54:43.700 align:start position:0%
comparator of T it is called then
compare<00:54:36.740><c> and</c><00:54:37.940><c> takes</c><00:54:38.940><c> a</c><00:54:40.579><c> function</c><00:54:41.579><c> that</c><00:54:42.710><c> takes</c>

00:54:43.700 --> 00:54:43.710 align:start position:0%
compare and takes a function that takes
 

00:54:43.710 --> 00:54:48.680 align:start position:0%
compare and takes a function that takes
two<00:54:44.009><c> T</c><00:54:44.279><c> returns</c><00:54:45.269><c> the</c><00:54:45.930><c> string</c><00:54:45.989><c> Y</c><00:54:47.450><c> now</c><00:54:48.450><c> what</c><00:54:48.660><c> I</c>

00:54:48.680 --> 00:54:48.690 align:start position:0%
two T returns the string Y now what I
 

00:54:48.690 --> 00:54:51.769 align:start position:0%
two T returns the string Y now what I
need<00:54:48.809><c> to</c><00:54:49.049><c> return</c><00:54:49.349><c> them</c><00:54:49.589><c> is</c><00:54:50.130><c> a</c><00:54:50.190><c> comparator</c><00:54:50.849><c> the</c>

00:54:51.769 --> 00:54:51.779 align:start position:0%
need to return them is a comparator the
 

00:54:51.779 --> 00:54:53.960 align:start position:0%
need to return them is a comparator the
comparator<00:54:52.349><c> is</c><00:54:52.470><c> a</c><00:54:52.499><c> functional</c><00:54:53.069><c> interface</c><00:54:53.579><c> and</c>

00:54:53.960 --> 00:54:53.970 align:start position:0%
comparator is a functional interface and
 

00:54:53.970 --> 00:54:57.019 align:start position:0%
comparator is a functional interface and
implementation<00:54:54.420><c> of</c><00:54:55.259><c> this</c><00:54:55.470><c> method</c><00:54:55.849><c> so</c><00:54:56.849><c> once</c>

00:54:57.019 --> 00:54:57.029 align:start position:0%
implementation of this method so once
 

00:54:57.029 --> 00:54:58.329 align:start position:0%
implementation of this method so once
again<00:54:57.210><c> I'm</c><00:54:57.480><c> doing</c><00:54:57.599><c> the</c><00:54:57.779><c> same</c><00:54:57.960><c> thing</c>

00:54:58.329 --> 00:54:58.339 align:start position:0%
again I'm doing the same thing
 

00:54:58.339 --> 00:55:02.120 align:start position:0%
again I'm doing the same thing
copy-paste<00:54:59.339><c> this</c><00:54:59.489><c> block</c><00:54:59.730><c> of</c><00:54:59.880><c> parameter</c><00:55:01.130><c> then</c>

00:55:02.120 --> 00:55:02.130 align:start position:0%
copy-paste this block of parameter then
 

00:55:02.130 --> 00:55:06.769 align:start position:0%
copy-paste this block of parameter then
return<00:55:03.109><c> an</c><00:55:04.109><c> integer</c><00:55:04.410><c> for</c><00:55:05.160><c> instance</c><00:55:05.489><c> one</c><00:55:05.779><c> at</c>

00:55:06.769 --> 00:55:06.779 align:start position:0%
return an integer for instance one at
 

00:55:06.779 --> 00:55:11.569 align:start position:0%
return an integer for instance one at
least<00:55:06.989><c> it</c><00:55:07.170><c> should</c><00:55:07.319><c> work</c><00:55:07.549><c> and</c><00:55:08.749><c> it</c><00:55:09.749><c> doesn't</c><00:55:10.579><c> now</c>

00:55:11.569 --> 00:55:11.579 align:start position:0%
least it should work and it doesn't now
 

00:55:11.579 --> 00:55:13.069 align:start position:0%
least it should work and it doesn't now
I<00:55:11.609><c> need</c><00:55:11.789><c> to</c><00:55:11.940><c> be</c><00:55:12.089><c> a</c><00:55:12.119><c> little</c><00:55:12.450><c> smarter</c><00:55:12.900><c> than</c><00:55:13.019><c> that</c>

00:55:13.069 --> 00:55:13.079 align:start position:0%
I need to be a little smarter than that
 

00:55:13.079 --> 00:55:15.979 align:start position:0%
I need to be a little smarter than that
of<00:55:13.410><c> course</c><00:55:13.650><c> what</c><00:55:14.489><c> should</c><00:55:14.519><c> I</c><00:55:14.759><c> be</c><00:55:14.910><c> doing</c><00:55:14.940><c> first</c><00:55:15.749><c> I</c>

00:55:15.979 --> 00:55:15.989 align:start position:0%
of course what should I be doing first I
 

00:55:15.989 --> 00:55:17.720 align:start position:0%
of course what should I be doing first I
need<00:55:16.140><c> to</c><00:55:16.170><c> compare</c><00:55:16.710><c> the</c><00:55:16.920><c> people</c><00:55:17.249><c> using</c><00:55:17.489><c> the</c>

00:55:17.720 --> 00:55:17.730 align:start position:0%
need to compare the people using the
 

00:55:17.730 --> 00:55:21.829 align:start position:0%
need to compare the people using the
comparator<00:55:18.299><c> I</c><00:55:18.450><c> mean</c><00:55:18.869><c> so</c><00:55:19.970><c> get</c><00:55:20.970><c> the</c><00:55:21.119><c> result</c><00:55:21.509><c> of</c>

00:55:21.829 --> 00:55:21.839 align:start position:0%
comparator I mean so get the result of
 

00:55:21.839 --> 00:55:25.210 align:start position:0%
comparator I mean so get the result of
this<00:55:22.730><c> compared</c><00:55:23.730><c> T</c><00:55:23.970><c> 1</c><00:55:24.119><c> and</c><00:55:24.480><c> T</c><00:55:24.539><c> 2</c>

00:55:25.210 --> 00:55:25.220 align:start position:0%
this compared T 1 and T 2
 

00:55:25.220 --> 00:55:31.460 align:start position:0%
this compared T 1 and T 2
now<00:55:26.220><c> if</c><00:55:26.579><c> CMP</c><00:55:28.730><c> is</c><00:55:29.730><c> equal</c><00:55:30.119><c> to</c><00:55:30.299><c> zero</c><00:55:30.630><c> then</c><00:55:31.170><c> I</c><00:55:31.319><c> need</c>

00:55:31.460 --> 00:55:31.470 align:start position:0%
now if CMP is equal to zero then I need
 

00:55:31.470 --> 00:55:33.529 align:start position:0%
now if CMP is equal to zero then I need
to<00:55:31.499><c> fall</c><00:55:31.829><c> back</c><00:55:31.859><c> on</c><00:55:32.339><c> the</c><00:55:32.880><c> comparator</c>

00:55:33.529 --> 00:55:33.539 align:start position:0%
to fall back on the comparator
 

00:55:33.539 --> 00:55:36.799 align:start position:0%
to fall back on the comparator
constructed<00:55:34.380><c> using</c><00:55:34.920><c> the</c><00:55:35.130><c> past</c><00:55:35.519><c> is</c><00:55:36.329><c> a</c><00:55:36.359><c> key</c>

00:55:36.799 --> 00:55:36.809 align:start position:0%
constructed using the past is a key
 

00:55:36.809 --> 00:55:40.450 align:start position:0%
constructed using the past is a key
extractor<00:55:37.319><c> and</c><00:55:37.499><c> if</c><00:55:38.400><c> it's</c><00:55:38.579><c> not</c><00:55:38.819><c> the</c><00:55:38.940><c> case</c><00:55:39.210><c> I</c>

00:55:40.450 --> 00:55:40.460 align:start position:0%
extractor and if it's not the case I
 

00:55:40.460 --> 00:55:43.239 align:start position:0%
extractor and if it's not the case I
just<00:55:41.460><c> return</c><00:55:41.819><c> the</c><00:55:41.970><c> value</c><00:55:42.269><c> of</c><00:55:42.630><c> CM</c>

00:55:43.239 --> 00:55:43.249 align:start position:0%
just return the value of CM
 

00:55:43.249 --> 00:55:47.239 align:start position:0%
just return the value of CM
this<00:55:44.249><c> code</c><00:55:44.519><c> is</c><00:55:44.999><c> gone</c><00:55:45.440><c> here</c><00:55:46.440><c> I</c><00:55:46.470><c> need</c><00:55:46.650><c> to</c><00:55:46.799><c> create</c>

00:55:47.239 --> 00:55:47.249 align:start position:0%
this code is gone here I need to create
 

00:55:47.249 --> 00:55:50.059 align:start position:0%
this code is gone here I need to create
another<00:55:47.400><c> comparator</c><00:55:48.180><c> using</c><00:55:48.569><c> the</c><00:55:49.289><c> past</c><00:55:49.589><c> key</c>

00:55:50.059 --> 00:55:50.069 align:start position:0%
another comparator using the past key
 

00:55:50.069 --> 00:55:52.630 align:start position:0%
another comparator using the past key
extractor<00:55:50.549><c> there</c><00:55:50.759><c> but</c><00:55:51.359><c> I've</c><00:55:51.450><c> got</c><00:55:51.690><c> this</c>

00:55:52.630 --> 00:55:52.640 align:start position:0%
extractor there but I've got this
 

00:55:52.640 --> 00:55:58.849 align:start position:0%
extractor there but I've got this
factory<00:55:53.640><c> method</c><00:55:53.940><c> for</c><00:55:54.119><c> that</c><00:55:56.450><c> extractor</c><00:55:57.859><c> this</c>

00:55:58.849 --> 00:55:58.859 align:start position:0%
factory method for that extractor this
 

00:55:58.859 --> 00:56:04.729 align:start position:0%
factory method for that extractor this
is<00:55:59.130><c> my</c><00:55:59.940><c> comparator</c><00:56:00.660><c> of</c><00:56:01.259><c> T</c><00:56:01.529><c> I</c><00:56:03.410><c> can</c><00:56:04.410><c> call</c><00:56:04.619><c> it</c>

00:56:04.729 --> 00:56:04.739 align:start position:0%
is my comparator of T I can call it
 

00:56:04.739 --> 00:56:07.940 align:start position:0%
is my comparator of T I can call it
other<00:56:04.980><c> and</c><00:56:05.539><c> just</c><00:56:06.539><c> return</c><00:56:06.869><c> the</c><00:56:06.960><c> result</c><00:56:07.289><c> of</c><00:56:07.769><c> the</c>

00:56:07.940 --> 00:56:07.950 align:start position:0%
other and just return the result of the
 

00:56:07.950 --> 00:56:13.489 align:start position:0%
other and just return the result of the
comparison<00:56:08.630><c> using</c><00:56:09.630><c> other</c><00:56:11.420><c> okay</c><00:56:12.420><c> so</c><00:56:13.109><c> this</c><00:56:13.289><c> is</c>

00:56:13.489 --> 00:56:13.499 align:start position:0%
comparison using other okay so this is
 

00:56:13.499 --> 00:56:14.809 align:start position:0%
comparison using other okay so this is
an<00:56:13.619><c> implementation</c><00:56:13.890><c> a</c><00:56:14.400><c> possible</c>

00:56:14.809 --> 00:56:14.819 align:start position:0%
an implementation a possible
 

00:56:14.819 --> 00:56:17.359 align:start position:0%
an implementation a possible
implementation<00:56:15.539><c> of</c><00:56:15.779><c> the</c><00:56:16.259><c> combination</c><00:56:16.980><c> of</c><00:56:17.099><c> two</c>

00:56:17.359 --> 00:56:17.369 align:start position:0%
implementation of the combination of two
 

00:56:17.369 --> 00:56:19.970 align:start position:0%
implementation of the combination of two
comparators<00:56:17.819><c> created</c><00:56:18.569><c> in</c><00:56:18.720><c> two</c><00:56:18.900><c> different</c><00:56:19.049><c> key</c>

00:56:19.970 --> 00:56:19.980 align:start position:0%
comparators created in two different key
 

00:56:19.980 --> 00:56:23.299 align:start position:0%
comparators created in two different key
extractors<00:56:20.509><c> by</c><00:56:21.509><c> the</c><00:56:21.569><c> way</c><00:56:21.869><c> by</c><00:56:22.739><c> the</c><00:56:22.799><c> way</c><00:56:22.890><c> I</c><00:56:23.039><c> also</c>

00:56:23.299 --> 00:56:23.309 align:start position:0%
extractors by the way by the way I also
 

00:56:23.309 --> 00:56:27.739 align:start position:0%
extractors by the way by the way I also
need<00:56:23.700><c> to</c><00:56:24.230><c> protect</c><00:56:25.230><c> myself</c><00:56:26.690><c> against</c><00:56:27.690><c> the</c>

00:56:27.739 --> 00:56:27.749 align:start position:0%
need to protect myself against the
 

00:56:27.749 --> 00:56:31.039 align:start position:0%
need to protect myself against the
psychopathic<00:56:29.089><c> try</c><00:56:30.089><c> to</c><00:56:30.150><c> call</c><00:56:30.420><c> me</c><00:56:30.569><c> with</c><00:56:30.749><c> an</c><00:56:30.779><c> arc</c>

00:56:31.039 --> 00:56:31.049 align:start position:0%
psychopathic try to call me with an arc
 

00:56:31.049 --> 00:56:33.489 align:start position:0%
psychopathic try to call me with an arc
extractor

00:56:33.489 --> 00:56:33.499 align:start position:0%
extractor
 

00:56:33.499 --> 00:56:36.620 align:start position:0%
extractor
this<00:56:34.499><c> one</c><00:56:34.739><c> should</c><00:56:34.980><c> even</c><00:56:35.279><c> be</c><00:56:35.730><c> could</c><00:56:36.210><c> even</c><00:56:36.390><c> be</c>

00:56:36.620 --> 00:56:36.630 align:start position:0%
this one should even be could even be
 

00:56:36.630 --> 00:56:38.690 align:start position:0%
this one should even be could even be
written<00:56:37.170><c> with</c><00:56:37.349><c> the</c><00:56:37.470><c> ternary</c><00:56:37.950><c> operator</c>

00:56:38.690 --> 00:56:38.700 align:start position:0%
written with the ternary operator
 

00:56:38.700 --> 00:56:41.779 align:start position:0%
written with the ternary operator
kind<00:56:39.450><c> of</c><00:56:39.539><c> like</c><00:56:39.749><c> the</c><00:56:39.900><c> ternary</c><00:56:40.289><c> operator</c><00:56:40.829><c> it</c>

00:56:41.779 --> 00:56:41.789 align:start position:0%
kind of like the ternary operator it
 

00:56:41.789 --> 00:56:50.079 align:start position:0%
kind of like the ternary operator it
reminds<00:56:42.420><c> me</c><00:56:42.569><c> my</c><00:56:42.749><c> old</c><00:56:43.170><c> days</c><00:56:43.349><c> of</c><00:56:43.380><c> C</c><00:56:43.829><c> programming</c>

00:56:50.079 --> 00:56:50.089 align:start position:0%
 
 

00:56:50.089 --> 00:56:52.729 align:start position:0%
 
so<00:56:51.089><c> it</c><00:56:51.180><c> simply</c><00:56:51.630><c> is</c><00:56:51.690><c> equal</c><00:56:51.960><c> to</c><00:56:52.140><c> zero</c><00:56:52.470><c> what</c><00:56:52.680><c> I</c>

00:56:52.729 --> 00:56:52.739 align:start position:0%
so it simply is equal to zero what I
 

00:56:52.739 --> 00:56:54.710 align:start position:0%
so it simply is equal to zero what I
returned<00:56:53.220><c> in</c><00:56:53.400><c> the</c><00:56:53.489><c> company</c><00:56:53.880><c> exactor</c><00:56:54.390><c> which</c><00:56:54.539><c> is</c>

00:56:54.710 --> 00:56:54.720 align:start position:0%
returned in the company exactor which is
 

00:56:54.720 --> 00:56:57.829 align:start position:0%
returned in the company exactor which is
the<00:56:54.869><c> comparator</c><00:56:55.880><c> compared</c><00:56:56.880><c> t</c><00:56:57.059><c> 1</c><00:56:57.180><c> and</c><00:56:57.210><c> t</c><00:56:57.450><c> 2</c><00:56:57.480><c> and</c>

00:56:57.829 --> 00:56:57.839 align:start position:0%
the comparator compared t 1 and t 2 and
 

00:56:57.839 --> 00:57:01.370 align:start position:0%
the comparator compared t 1 and t 2 and
if<00:56:58.109><c> it's</c><00:56:58.289><c> not</c><00:56:58.440><c> the</c><00:56:58.559><c> case</c><00:56:58.940><c> just</c><00:56:59.940><c> CMP</c><00:57:00.749><c> on</c><00:57:01.200><c> this</c>

00:57:01.370 --> 00:57:01.380 align:start position:0%
if it's not the case just CMP on this
 

00:57:01.380 --> 00:57:03.759 align:start position:0%
if it's not the case just CMP on this
code

00:57:03.759 --> 00:57:03.769 align:start position:0%
 
 

00:57:03.769 --> 00:57:14.339 align:start position:0%
 
almost

00:57:14.339 --> 00:57:14.349 align:start position:0%
 
 

00:57:14.349 --> 00:57:24.930 align:start position:0%
 
what's<00:57:14.979><c> wrong</c><00:57:15.130><c> with</c><00:57:15.249><c> you</c><00:57:21.420><c> okay</c><00:57:23.579><c> right</c><00:57:24.579><c> this</c><00:57:24.789><c> is</c>

00:57:24.930 --> 00:57:24.940 align:start position:0%
what's wrong with you okay right this is
 

00:57:24.940 --> 00:57:27.989 align:start position:0%
what's wrong with you okay right this is
nice<00:57:25.469><c> so</c><00:57:26.469><c> you</c><00:57:26.529><c> see</c><00:57:26.769><c> that</c><00:57:26.920><c> we</c><00:57:27.339><c> almost</c><00:57:27.489><c> done</c><00:57:27.849><c> with</c>

00:57:27.989 --> 00:57:27.999 align:start position:0%
nice so you see that we almost done with
 

00:57:27.999 --> 00:57:29.759 align:start position:0%
nice so you see that we almost done with
our<00:57:28.059><c> program</c><00:57:28.539><c> do</c><00:57:28.719><c> you</c><00:57:28.869><c> remember</c><00:57:29.019><c> this</c><00:57:29.319><c> large</c>

00:57:29.759 --> 00:57:29.769 align:start position:0%
our program do you remember this large
 

00:57:29.769 --> 00:57:32.670 align:start position:0%
our program do you remember this large
piece<00:57:30.039><c> of</c><00:57:30.099><c> unreadable</c><00:57:30.670><c> crappy</c><00:57:31.449><c> Java</c><00:57:31.900><c> 7</c><00:57:32.199><c> blah</c>

00:57:32.670 --> 00:57:32.680 align:start position:0%
piece of unreadable crappy Java 7 blah
 

00:57:32.680 --> 00:57:33.900 align:start position:0%
piece of unreadable crappy Java 7 blah
blah<00:57:32.799><c> blah</c><00:57:32.979><c> code</c><00:57:33.219><c> showed</c><00:57:33.670><c> you</c><00:57:33.789><c> at</c><00:57:33.880><c> the</c>

00:57:33.900 --> 00:57:33.910 align:start position:0%
blah blah code showed you at the
 

00:57:33.910 --> 00:57:36.420 align:start position:0%
blah blah code showed you at the
beginning<00:57:34.089><c> we</c><00:57:34.930><c> almost</c><00:57:35.079><c> we</c><00:57:35.559><c> almost</c><00:57:35.589><c> there</c><00:57:35.979><c> we</c>

00:57:36.420 --> 00:57:36.430 align:start position:0%
beginning we almost we almost there we
 

00:57:36.430 --> 00:57:37.109 align:start position:0%
beginning we almost we almost there we
almost<00:57:36.549><c> there</c>

00:57:37.109 --> 00:57:37.119 align:start position:0%
almost there
 

00:57:37.119 --> 00:57:38.939 align:start position:0%
almost there
we're<00:57:37.690><c> not</c><00:57:37.779><c> quite</c><00:57:38.199><c> there</c><00:57:38.259><c> because</c><00:57:38.709><c> what</c><00:57:38.920><c> I</c>

00:57:38.939 --> 00:57:38.949 align:start position:0%
we're not quite there because what I
 

00:57:38.949 --> 00:57:42.529 align:start position:0%
we're not quite there because what I
would<00:57:39.309><c> like</c><00:57:39.609><c> to</c><00:57:39.910><c> do</c><00:57:40.089><c> is</c><00:57:40.839><c> compare</c><00:57:41.589><c> it</c><00:57:41.769><c> also</c>

00:57:42.529 --> 00:57:42.539 align:start position:0%
would like to do is compare it also
 

00:57:42.539 --> 00:57:48.630 align:start position:0%
would like to do is compare it also
using<00:57:43.829><c> person</c><00:57:44.829><c> yet</c><00:57:45.640><c> age</c><00:57:46.949><c> and</c><00:57:47.949><c> this</c><00:57:48.279><c> one</c><00:57:48.459><c> does</c>

00:57:48.630 --> 00:57:48.640 align:start position:0%
using person yet age and this one does
 

00:57:48.640 --> 00:57:52.019 align:start position:0%
using person yet age and this one does
not<00:57:48.759><c> compile</c><00:57:49.410><c> why</c><00:57:50.410><c> because</c><00:57:50.890><c> age</c><00:57:51.130><c> is</c><00:57:51.789><c> an</c>

00:57:52.019 --> 00:57:52.029 align:start position:0%
not compile why because age is an
 

00:57:52.029 --> 00:57:55.019 align:start position:0%
not compile why because age is an
integer<00:57:52.119><c> and</c><00:57:52.839><c> I</c><00:57:53.170><c> wrote</c><00:57:53.410><c> my</c><00:57:53.619><c> code</c><00:57:53.920><c> to</c><00:57:54.819><c> take</c>

00:57:55.019 --> 00:57:55.029 align:start position:0%
integer and I wrote my code to take
 

00:57:55.029 --> 00:57:57.120 align:start position:0%
integer and I wrote my code to take
function<00:57:55.599><c> that</c><00:57:55.779><c> takes</c><00:57:56.019><c> a</c><00:57:56.199><c> string</c><00:57:56.619><c> that</c>

00:57:57.120 --> 00:57:57.130 align:start position:0%
function that takes a string that
 

00:57:57.130 --> 00:57:59.969 align:start position:0%
function that takes a string that
written<00:57:57.519><c> the</c><00:57:57.640><c> string</c><00:57:57.940><c> as</c><00:57:58.150><c> a</c><00:57:58.479><c> parameter</c><00:57:59.049><c> so</c><00:57:59.949><c> I</c>

00:57:59.969 --> 00:57:59.979 align:start position:0%
written the string as a parameter so I
 

00:57:59.979 --> 00:58:03.809 align:start position:0%
written the string as a parameter so I
need<00:58:00.279><c> to</c><00:58:00.579><c> deep</c><00:58:00.969><c> dive</c><00:58:01.299><c> into</c><00:58:01.599><c> more</c><00:58:02.489><c> generic</c><00:58:03.489><c> hell</c>

00:58:03.809 --> 00:58:03.819 align:start position:0%
need to deep dive into more generic hell
 

00:58:03.819 --> 00:58:06.289 align:start position:0%
need to deep dive into more generic hell
which<00:58:04.359><c> is</c><00:58:04.599><c> something</c><00:58:05.079><c> that</c><00:58:05.380><c> everybody</c><00:58:05.650><c> loves</c>

00:58:06.289 --> 00:58:06.299 align:start position:0%
which is something that everybody loves
 

00:58:06.299 --> 00:58:09.719 align:start position:0%
which is something that everybody loves
of<00:58:07.299><c> course</c><00:58:07.690><c> so</c><00:58:08.559><c> I'm</c><00:58:08.769><c> going</c><00:58:08.979><c> to</c><00:58:09.039><c> use</c><00:58:09.279><c> a</c><00:58:09.309><c> treat</c>

00:58:09.719 --> 00:58:09.729 align:start position:0%
of course so I'm going to use a treat
 

00:58:09.729 --> 00:58:11.209 align:start position:0%
of course so I'm going to use a treat
for<00:58:09.910><c> that</c><00:58:09.969><c> right</c>

00:58:11.209 --> 00:58:11.219 align:start position:0%
for that right
 

00:58:11.219 --> 00:58:26.609 align:start position:0%
for that right
see<00:58:12.219><c> how</c><00:58:12.369><c> can</c><00:58:12.430><c> I</c><00:58:12.640><c> do</c><00:58:12.699><c> it</c><00:58:24.809><c> string</c><00:58:25.809><c> here</c><00:58:26.259><c> and</c><00:58:26.289><c> I'm</c>

00:58:26.609 --> 00:58:26.619 align:start position:0%
see how can I do it string here and I'm
 

00:58:26.619 --> 00:58:35.070 align:start position:0%
see how can I do it string here and I'm
going<00:58:26.829><c> to</c><00:58:26.890><c> go</c>

00:58:35.070 --> 00:58:35.080 align:start position:0%
 
 

00:58:35.080 --> 00:58:37.890 align:start position:0%
 
never<00:58:36.080><c> tell</c><00:58:36.290><c> anyone</c><00:58:36.500><c> you</c><00:58:36.710><c> saw</c><00:58:36.890><c> me</c><00:58:36.920><c> doing</c><00:58:37.160><c> that</c>

00:58:37.890 --> 00:58:37.900 align:start position:0%
never tell anyone you saw me doing that
 

00:58:37.900 --> 00:58:41.940 align:start position:0%
never tell anyone you saw me doing that
all<00:58:38.900><c> right</c><00:58:39.020><c> I'm</c><00:58:39.290><c> gonna</c><00:58:39.470><c> do</c><00:58:39.710><c> the</c><00:58:39.860><c> same</c><00:58:40.190><c> here</c>

00:58:41.940 --> 00:58:41.950 align:start position:0%
all right I'm gonna do the same here
 

00:58:41.950 --> 00:58:45.130 align:start position:0%
all right I'm gonna do the same here
encourage<00:58:42.950><c> you</c><00:58:43.210><c> so</c><00:58:44.210><c> know</c><00:58:44.300><c> what</c><00:58:44.480><c> I'm</c><00:58:44.720><c> basically</c>

00:58:45.130 --> 00:58:45.140 align:start position:0%
encourage you so know what I'm basically
 

00:58:45.140 --> 00:58:48.220 align:start position:0%
encourage you so know what I'm basically
trying<00:58:45.500><c> to</c><00:58:45.590><c> do</c><00:58:45.860><c> is</c><00:58:46.130><c> okay</c><00:58:46.940><c> this</c><00:58:47.869><c> is</c><00:58:48.050><c> not</c><00:58:48.200><c> a</c>

00:58:48.220 --> 00:58:48.230 align:start position:0%
trying to do is okay this is not a
 

00:58:48.230 --> 00:58:51.160 align:start position:0%
trying to do is okay this is not a
string<00:58:48.650><c> this</c><00:58:48.860><c> is</c><00:58:48.920><c> any</c><00:58:49.640><c> any</c><00:58:50.000><c> kind</c><00:58:50.330><c> of</c><00:58:50.480><c> object</c><00:58:50.810><c> of</c>

00:58:51.160 --> 00:58:51.170 align:start position:0%
string this is any any kind of object of
 

00:58:51.170 --> 00:58:55.200 align:start position:0%
string this is any any kind of object of
type<00:58:51.350><c> you</c><00:58:51.760><c> so</c><00:58:52.760><c> it</c><00:58:53.240><c> will</c><00:58:53.720><c> work</c><00:58:53.990><c> now</c><00:58:54.020><c> because</c>

00:58:55.200 --> 00:58:55.210 align:start position:0%
type you so it will work now because
 

00:58:55.210 --> 00:58:58.030 align:start position:0%
type you so it will work now because
because<00:58:56.210><c> this</c><00:58:56.540><c> this</c><00:58:56.869><c> code</c><00:58:57.200><c> does</c><00:58:57.410><c> compile</c><00:58:57.830><c> but</c>

00:58:58.030 --> 00:58:58.040 align:start position:0%
because this this code does compile but
 

00:58:58.040 --> 00:58:59.950 align:start position:0%
because this this code does compile but
the<00:58:58.280><c> static</c><00:58:58.790><c> that</c><00:58:58.970><c> the</c><00:58:59.119><c> factory</c><00:58:59.510><c> method</c><00:58:59.630><c> does</c>

00:58:59.950 --> 00:58:59.960 align:start position:0%
the static that the factory method does
 

00:58:59.960 --> 00:59:02.020 align:start position:0%
the static that the factory method does
not<00:59:00.110><c> compile</c><00:59:00.470><c> because</c><00:59:00.590><c> on</c><00:59:00.860><c> this</c><00:59:01.040><c> you</c><00:59:01.369><c> object</c><00:59:01.760><c> I</c>

00:59:02.020 --> 00:59:02.030 align:start position:0%
not compile because on this you object I
 

00:59:02.030 --> 00:59:04.600 align:start position:0%
not compile because on this you object I
need<00:59:02.540><c> is</c><00:59:02.690><c> compared</c><00:59:03.170><c> to</c><00:59:03.230><c> method</c><00:59:03.680><c> on</c><00:59:04.160><c> it</c><00:59:04.220><c> and</c>

00:59:04.600 --> 00:59:04.610 align:start position:0%
need is compared to method on it and
 

00:59:04.610 --> 00:59:06.040 align:start position:0%
need is compared to method on it and
this<00:59:04.730><c> compare</c><00:59:05.090><c> to</c><00:59:05.119><c> method</c><00:59:05.390><c> in</c><00:59:05.660><c> fact</c><00:59:05.900><c> is</c>

00:59:06.040 --> 00:59:06.050 align:start position:0%
this compare to method in fact is
 

00:59:06.050 --> 00:59:09.340 align:start position:0%
this compare to method in fact is
defined<00:59:06.590><c> on</c><00:59:06.950><c> the</c><00:59:07.460><c> comparable</c><00:59:08.030><c> interface</c><00:59:08.350><c> so</c>

00:59:09.340 --> 00:59:09.350 align:start position:0%
defined on the comparable interface so
 

00:59:09.350 --> 00:59:15.010 align:start position:0%
defined on the comparable interface so
you<00:59:09.670><c> has</c><00:59:10.670><c> to</c><00:59:10.910><c> extend</c><00:59:13.119><c> comparable</c><00:59:14.119><c> and</c><00:59:14.720><c> if</c><00:59:14.869><c> you</c>

00:59:15.010 --> 00:59:15.020 align:start position:0%
you has to extend comparable and if you
 

00:59:15.020 --> 00:59:20.320 align:start position:0%
you has to extend comparable and if you
want<00:59:15.200><c> to</c><00:59:15.440><c> make</c><00:59:15.710><c> it</c><00:59:15.950><c> correctly</c><00:59:17.080><c> its</c><00:59:18.940><c> comparable</c>

00:59:20.320 --> 00:59:20.330 align:start position:0%
want to make it correctly its comparable
 

00:59:20.330 --> 00:59:25.480 align:start position:0%
want to make it correctly its comparable
super<00:59:20.720><c> you</c><00:59:21.250><c> some</c><00:59:22.250><c> kind</c><00:59:22.490><c> of</c><00:59:22.580><c> reason</c><00:59:24.250><c> welcome</c><00:59:25.250><c> to</c>

00:59:25.480 --> 00:59:25.490 align:start position:0%
super you some kind of reason welcome to
 

00:59:25.490 --> 00:59:30.820 align:start position:0%
super you some kind of reason welcome to
the<00:59:25.610><c> generics</c><00:59:27.730><c> paradise</c><00:59:28.990><c> okay</c><00:59:29.990><c> so</c><00:59:30.290><c> if</c><00:59:30.410><c> I</c><00:59:30.560><c> if</c><00:59:30.710><c> I</c>

00:59:30.820 --> 00:59:30.830 align:start position:0%
the generics paradise okay so if I if I
 

00:59:30.830 --> 00:59:32.790 align:start position:0%
the generics paradise okay so if I if I
do<00:59:30.890><c> it</c><00:59:31.040><c> like</c><00:59:31.190><c> that</c><00:59:31.340><c> now</c><00:59:31.550><c> it</c><00:59:31.940><c> would</c><00:59:32.090><c> work</c><00:59:32.270><c> and</c>

00:59:32.790 --> 00:59:32.800 align:start position:0%
do it like that now it would work and
 

00:59:32.800 --> 00:59:36.280 align:start position:0%
do it like that now it would work and
code<00:59:33.800><c> will</c><00:59:34.490><c> compile</c><00:59:34.820><c> because</c><00:59:34.940><c> integer</c><00:59:35.570><c> is</c><00:59:36.230><c> a</c>

00:59:36.280 --> 00:59:36.290 align:start position:0%
code will compile because integer is a
 

00:59:36.290 --> 00:59:40.480 align:start position:0%
code will compile because integer is a
comparable<00:59:36.830><c> object</c><00:59:37.480><c> and</c><00:59:38.480><c> string</c><00:59:38.990><c> is</c><00:59:39.230><c> and</c><00:59:40.010><c> now</c>

00:59:40.480 --> 00:59:40.490 align:start position:0%
comparable object and string is and now
 

00:59:40.490 --> 00:59:45.040 align:start position:0%
comparable object and string is and now
my<00:59:40.640><c> comparator</c><00:59:41.180><c> can</c><00:59:41.390><c> be</c><00:59:42.070><c> I</c><00:59:43.480><c> could</c><00:59:44.480><c> go</c><00:59:44.630><c> even</c>

00:59:45.040 --> 00:59:45.050 align:start position:0%
my comparator can be I could go even
 

00:59:45.050 --> 00:59:52.570 align:start position:0%
my comparator can be I could go even
even<00:59:45.470><c> one</c><00:59:45.619><c> step</c><00:59:45.830><c> further</c><00:59:49.090><c> like</c><00:59:50.090><c> this</c><00:59:51.580><c> by</c>

00:59:52.570 --> 00:59:52.580 align:start position:0%
even one step further like this by
 

00:59:52.580 --> 00:59:54.130 align:start position:0%
even one step further like this by
telling<00:59:52.790><c> okay</c><00:59:53.210><c> now</c><00:59:53.390><c> that</c><00:59:53.630><c> I</c><00:59:53.810><c> have</c><00:59:53.990><c> this</c>

00:59:54.130 --> 00:59:54.140 align:start position:0%
telling okay now that I have this
 

00:59:54.140 --> 00:59:56.680 align:start position:0%
telling okay now that I have this
comparator<00:59:54.680><c> in</c><00:59:54.770><c> fact</c><00:59:55.010><c> I</c><00:59:55.100><c> want</c><00:59:55.280><c> to</c><00:59:55.460><c> sort</c><00:59:55.730><c> my</c><00:59:56.030><c> my</c>

00:59:56.680 --> 00:59:56.690 align:start position:0%
comparator in fact I want to sort my my
 

00:59:56.690 --> 00:59:59.109 align:start position:0%
comparator in fact I want to sort my my
students<00:59:57.200><c> in</c><00:59:57.770><c> the</c><00:59:57.980><c> other</c><00:59:58.100><c> way</c><00:59:58.340><c> around</c><00:59:58.670><c> just</c><00:59:58.850><c> by</c>

00:59:59.109 --> 00:59:59.119 align:start position:0%
students in the other way around just by
 

00:59:59.119 --> 01:00:00.940 align:start position:0%
students in the other way around just by
calling<00:59:59.330><c> the</c><00:59:59.570><c> reversed</c><00:59:59.930><c> on</c><01:00:00.320><c> this</c><01:00:00.650><c> on</c><01:00:00.830><c> this</c>

01:00:00.940 --> 01:00:00.950 align:start position:0%
calling the reversed on this on this
 

01:00:00.950 --> 01:00:03.670 align:start position:0%
calling the reversed on this on this
comparator<01:00:01.550><c> so</c><01:00:02.359><c> reverse</c><01:00:02.720><c> once</c><01:00:03.020><c> again</c><01:00:03.320><c> I</c><01:00:03.350><c> think</c>

01:00:03.670 --> 01:00:03.680 align:start position:0%
comparator so reverse once again I think
 

01:00:03.680 --> 01:00:05.380 align:start position:0%
comparator so reverse once again I think
you've<01:00:03.830><c> got</c><01:00:04.250><c> the</c><01:00:04.369><c> trick</c><01:00:04.609><c> now</c><01:00:04.790><c> it's</c><01:00:04.970><c> also</c><01:00:05.180><c> a</c>

01:00:05.380 --> 01:00:05.390 align:start position:0%
you've got the trick now it's also a
 

01:00:05.390 --> 01:00:07.599 align:start position:0%
you've got the trick now it's also a
default<01:00:05.810><c> method</c><01:00:06.020><c> of</c><01:00:06.350><c> my</c><01:00:06.710><c> compiler</c><01:00:07.100><c> interface</c>

01:00:07.599 --> 01:00:07.609 align:start position:0%
default method of my compiler interface
 

01:00:07.609 --> 01:00:12.340 align:start position:0%
default method of my compiler interface
so<01:00:08.480><c> let</c><01:00:08.660><c> us</c><01:00:08.690><c> write</c><01:00:09.320><c> it</c><01:00:10.630><c> and</c><01:00:11.630><c> you</c><01:00:11.690><c> see</c><01:00:11.990><c> that</c><01:00:12.140><c> it's</c>

01:00:12.340 --> 01:00:12.350 align:start position:0%
so let us write it and you see that it's
 

01:00:12.350 --> 01:00:14.920 align:start position:0%
so let us write it and you see that it's
going<01:00:12.530><c> to</c><01:00:12.619><c> be</c><01:00:12.830><c> very</c><01:00:12.980><c> easy</c><01:00:13.220><c> in</c><01:00:13.400><c> fact</c><01:00:13.930><c> default</c>

01:00:14.920 --> 01:00:14.930 align:start position:0%
going to be very easy in fact default
 

01:00:14.930 --> 01:00:19.030 align:start position:0%
going to be very easy in fact default
takes<01:00:15.440><c> my</c><01:00:15.770><c> compiler</c><01:00:16.190><c> of</c><01:00:16.369><c> T</c><01:00:17.410><c> returns</c><01:00:18.410><c> ROI</c><01:00:18.619><c> or</c><01:00:18.859><c> my</c>

01:00:19.030 --> 01:00:19.040 align:start position:0%
takes my compiler of T returns ROI or my
 

01:00:19.040 --> 01:00:21.220 align:start position:0%
takes my compiler of T returns ROI or my
compart<01:00:19.430><c> of</c><01:00:19.609><c> T</c><01:00:19.850><c> this</c><01:00:20.030><c> is</c><01:00:20.090><c> the</c><01:00:20.270><c> reversed</c><01:00:20.720><c> method</c>

01:00:21.220 --> 01:00:21.230 align:start position:0%
compart of T this is the reversed method
 

01:00:21.230 --> 01:00:24.880 align:start position:0%
compart of T this is the reversed method
does<01:00:21.890><c> not</c><01:00:21.920><c> take</c><01:00:22.310><c> any</c><01:00:22.550><c> parameter</c><01:00:23.859><c> what</c><01:00:24.859><c> is</c>

01:00:24.880 --> 01:00:24.890 align:start position:0%
does not take any parameter what is
 

01:00:24.890 --> 01:00:29.970 align:start position:0%
does not take any parameter what is
return<01:00:25.369><c> is</c><01:00:26.060><c> a</c><01:00:26.600><c> comparator</c><01:00:27.320><c> so</c><01:00:27.680><c> once</c><01:00:27.890><c> again</c>

01:00:29.970 --> 01:00:29.980 align:start position:0%
return is a comparator so once again
 

01:00:29.980 --> 01:00:33.910 align:start position:0%
return is a comparator so once again
implemented<01:00:30.980><c> using</c><01:00:31.130><c> a</c><01:00:31.340><c> lambda</c><01:00:31.520><c> and</c><01:00:32.920><c> it</c>

01:00:33.910 --> 01:00:33.920 align:start position:0%
implemented using a lambda and it
 

01:00:33.920 --> 01:00:37.300 align:start position:0%
implemented using a lambda and it
returns<01:00:34.310><c> the</c><01:00:34.690><c> the</c><01:00:35.690><c> opposite</c><01:00:36.140><c> of</c><01:00:36.380><c> the</c><01:00:36.980><c> result</c>

01:00:37.300 --> 01:00:37.310 align:start position:0%
returns the the opposite of the result
 

01:00:37.310 --> 01:00:40.750 align:start position:0%
returns the the opposite of the result
of<01:00:37.460><c> the</c><01:00:37.550><c> comparison</c><01:00:37.850><c> of</c><01:00:38.270><c> t1</c><01:00:39.200><c> and</c><01:00:39.230><c> t2</c><01:00:39.760><c> this</c>

01:00:40.750 --> 01:00:40.760 align:start position:0%
of the comparison of t1 and t2 this
 

01:00:40.760 --> 01:00:42.450 align:start position:0%
of the comparison of t1 and t2 this
compare

01:00:42.450 --> 01:00:42.460 align:start position:0%
compare
 

01:00:42.460 --> 01:00:45.450 align:start position:0%
compare
you<01:00:42.520><c> want</c><01:00:42.700><c> to</c><01:00:43.060><c> I</c><01:00:43.300><c> can</c><01:00:43.930><c> I</c><01:00:44.080><c> have</c><01:00:44.380><c> two</c><01:00:44.560><c> tricks</c><01:00:44.830><c> to</c>

01:00:45.450 --> 01:00:45.460 align:start position:0%
you want to I can I have two tricks to
 

01:00:45.460 --> 01:00:50.250 align:start position:0%
you want to I can I have two tricks to
achieve<01:00:45.730><c> that</c><01:00:45.910><c> either</c><01:00:46.750><c> I</c><01:00:46.900><c> put</c><01:00:47.290><c> a</c><01:00:49.230><c> minus</c><01:00:50.230><c> here</c>

01:00:50.250 --> 01:00:50.260 align:start position:0%
achieve that either I put a minus here
 

01:00:50.260 --> 01:00:54.270 align:start position:0%
achieve that either I put a minus here
and<01:00:50.770><c> it</c><01:00:51.550><c> will</c><01:00:51.730><c> reverse</c><01:00:52.089><c> the</c><01:00:52.510><c> comparison</c><01:00:53.080><c> or</c><01:00:53.619><c> if</c>

01:00:54.270 --> 01:00:54.280 align:start position:0%
and it will reverse the comparison or if
 

01:00:54.280 --> 01:00:56.280 align:start position:0%
and it will reverse the comparison or if
I<01:00:54.430><c> do</c><01:00:54.490><c> not</c><01:00:54.700><c> want</c><01:00:54.910><c> to</c><01:00:55.030><c> put</c><01:00:55.210><c> the</c><01:00:55.300><c> minus</c><01:00:55.660><c> here</c><01:00:56.050><c> I</c>

01:00:56.280 --> 01:00:56.290 align:start position:0%
I do not want to put the minus here I
 

01:00:56.290 --> 01:01:00.690 align:start position:0%
I do not want to put the minus here I
can<01:00:57.040><c> just</c><01:00:57.310><c> compare</c><01:00:57.670><c> t2</c><01:00:58.119><c> and</c><01:00:59.080><c> t1</c><01:00:59.460><c> to</c><01:01:00.460><c> achieve</c>

01:01:00.690 --> 01:01:00.700 align:start position:0%
can just compare t2 and t1 to achieve
 

01:01:00.700 --> 01:01:03.300 align:start position:0%
can just compare t2 and t1 to achieve
the<01:01:00.820><c> same</c><01:01:01.000><c> result</c><01:01:01.560><c> sure</c><01:01:02.560><c> yep</c><01:01:02.770><c> -</c><01:01:02.890><c> you</c><01:01:03.010><c> don't</c><01:01:03.160><c> do</c>

01:01:03.300 --> 01:01:03.310 align:start position:0%
the same result sure yep - you don't do
 

01:01:03.310 --> 01:01:04.920 align:start position:0%
the same result sure yep - you don't do
both<01:01:03.460><c> because</c><01:01:03.970><c> if</c><01:01:04.089><c> you</c><01:01:04.180><c> do</c><01:01:04.330><c> both</c><01:01:04.450><c> it</c><01:01:04.660><c> will</c><01:01:04.780><c> not</c>

01:01:04.920 --> 01:01:04.930 align:start position:0%
both because if you do both it will not
 

01:01:04.930 --> 01:01:09.210 align:start position:0%
both because if you do both it will not
work<01:01:05.109><c> of</c><01:01:05.290><c> course</c><01:01:07.290><c> obviously</c><01:01:08.290><c> but</c><01:01:08.950><c> you</c><01:01:09.040><c> can</c>

01:01:09.210 --> 01:01:09.220 align:start position:0%
work of course obviously but you can
 

01:01:09.220 --> 01:01:11.700 align:start position:0%
work of course obviously but you can
choose<01:01:09.430><c> that</c><01:01:09.609><c> I'm</c><01:01:10.510><c> pretty</c><01:01:10.900><c> sure</c><01:01:11.140><c> that</c><01:01:11.320><c> some</c><01:01:11.560><c> of</c>

01:01:11.700 --> 01:01:11.710 align:start position:0%
choose that I'm pretty sure that some of
 

01:01:11.710 --> 01:01:13.380 align:start position:0%
choose that I'm pretty sure that some of
you<01:01:11.800><c> are</c><01:01:11.830><c> thinking</c><01:01:11.980><c> is</c><01:01:12.520><c> I</c><01:01:12.790><c> think</c><01:01:12.849><c> that</c><01:01:13.089><c> if</c><01:01:13.240><c> I</c>

01:01:13.380 --> 01:01:13.390 align:start position:0%
you are thinking is I think that if I
 

01:01:13.390 --> 01:01:16.290 align:start position:0%
you are thinking is I think that if I
put<01:01:13.660><c> the</c><01:01:13.780><c> -</c><01:01:14.109><c> it</c><01:01:14.260><c> will</c><01:01:14.410><c> be</c><01:01:14.820><c> faster</c><01:01:15.820><c> than</c><01:01:15.970><c> if</c><01:01:16.119><c> I</c>

01:01:16.290 --> 01:01:16.300 align:start position:0%
put the - it will be faster than if I
 

01:01:16.300 --> 01:01:23.329 align:start position:0%
put the - it will be faster than if I
okay<01:01:17.260><c> I</c><01:01:17.500><c> don't</c><01:01:17.890><c> know</c><01:01:18.869><c> it's</c><01:01:19.869><c> really</c><01:01:20.050><c> up</c><01:01:20.140><c> to</c><01:01:20.200><c> you</c>

01:01:23.329 --> 01:01:23.339 align:start position:0%
 
 

01:01:23.339 --> 01:01:25.770 align:start position:0%
 
yeah

01:01:25.770 --> 01:01:25.780 align:start position:0%
yeah
 

01:01:25.780 --> 01:01:28.650 align:start position:0%
yeah
I<01:01:26.040><c> could</c><01:01:27.040><c> also</c><01:01:27.190><c> treat</c><01:01:27.609><c> other</c><01:01:27.849><c> factory</c><01:01:28.359><c> method</c>

01:01:28.650 --> 01:01:28.660 align:start position:0%
I could also treat other factory method
 

01:01:28.660 --> 01:01:31.560 align:start position:0%
I could also treat other factory method
on<01:01:28.780><c> this</c><01:01:28.960><c> comparator</c><01:01:29.500><c> stuff</c><01:01:29.859><c> for</c><01:01:30.040><c> instance</c><01:01:30.570><c> my</c>

01:01:31.560 --> 01:01:31.570 align:start position:0%
on this comparator stuff for instance my
 

01:01:31.570 --> 01:01:34.530 align:start position:0%
on this comparator stuff for instance my
comparator<01:01:32.280><c> string</c>

01:01:34.530 --> 01:01:34.540 align:start position:0%
comparator string
 

01:01:34.540 --> 01:01:41.820 align:start position:0%
comparator string
CMP<01:01:35.260><c> -</c><01:01:35.440><c> and</c><01:01:35.800><c> I</c><01:01:35.950><c> want</c><01:01:36.190><c> to</c><01:01:36.369><c> create</c><01:01:37.440><c> my</c><01:01:38.440><c> competitor</c>

01:01:41.820 --> 01:01:41.830 align:start position:0%
 
 

01:01:41.830 --> 01:01:43.220 align:start position:0%
 
[Music]

01:01:43.220 --> 01:01:43.230 align:start position:0%
[Music]
 

01:01:43.230 --> 01:01:50.150 align:start position:0%
[Music]
because

01:01:50.150 --> 01:01:50.160 align:start position:0%
 
 

01:01:50.160 --> 01:01:57.109 align:start position:0%
 
zero<01:01:51.859><c> compared</c><01:01:52.859><c> with</c><01:01:53.009><c> your</c><01:01:53.160><c> fancies</c><01:01:53.759><c> to</c><01:01:56.119><c> zero</c>

01:01:57.109 --> 01:01:57.119 align:start position:0%
zero compared with your fancies to zero
 

01:01:57.119 --> 01:01:59.089 align:start position:0%
zero compared with your fancies to zero
they<01:01:57.599><c> say</c><01:01:57.750><c> this</c><01:01:57.900><c> is</c><01:01:58.109><c> a</c><01:01:58.140><c> this</c><01:01:58.410><c> is</c><01:01:58.650><c> a</c><01:01:58.680><c> static</c>

01:01:59.089 --> 01:01:59.099 align:start position:0%
they say this is a this is a static
 

01:01:59.099 --> 01:02:11.390 align:start position:0%
they say this is a this is a static
method<01:01:59.539><c> can</c><01:02:00.539><c> I</c><01:02:00.569><c> create</c><01:02:00.839><c> it</c><01:02:01.049><c> yes</c><01:02:01.259><c> I</c><01:02:01.410><c> can</c><01:02:10.400><c> model</c>

01:02:11.390 --> 01:02:11.400 align:start position:0%
method can I create it yes I can model
 

01:02:11.400 --> 01:02:16.599 align:start position:0%
method can I create it yes I can model
and<01:02:12.150><c> I'm</c><01:02:12.480><c> going</c><01:02:12.720><c> to</c><01:02:13.609><c> return</c><01:02:14.609><c> the</c><01:02:14.910><c> comparator</c>

01:02:16.599 --> 01:02:16.609 align:start position:0%
and I'm going to return the comparator
 

01:02:16.609 --> 01:02:22.220 align:start position:0%
and I'm going to return the comparator
string<01:02:17.609><c> this</c><01:02:18.180><c> one</c><01:02:19.279><c> is</c><01:02:20.279><c> to</c><01:02:20.519><c> and</c><01:02:21.109><c> return</c><01:02:22.109><c> the</c>

01:02:22.220 --> 01:02:22.230 align:start position:0%
string this one is to and return the
 

01:02:22.230 --> 01:02:25.450 align:start position:0%
string this one is to and return the
comparison<01:02:22.829><c> of</c><01:02:23.039><c> s1</c><01:02:23.460><c> with</c><01:02:23.849><c> model</c><01:02:24.180><c> for</c><01:02:24.359><c> instance</c>

01:02:25.450 --> 01:02:25.460 align:start position:0%
comparison of s1 with model for instance
 

01:02:25.460 --> 01:02:31.759 align:start position:0%
comparison of s1 with model for instance
return<01:02:27.230><c> sorry</c><01:02:29.630><c> no</c><01:02:30.630><c> so</c><01:02:30.809><c> it</c><01:02:30.930><c> doesn't</c><01:02:31.200><c> make</c><01:02:31.289><c> sense</c>

01:02:31.759 --> 01:02:31.769 align:start position:0%
return sorry no so it doesn't make sense
 

01:02:31.769 --> 01:02:40.130 align:start position:0%
return sorry no so it doesn't make sense
I'm<01:02:32.190><c> messing</c><01:02:32.609><c> up</c><01:02:32.700><c> with</c><01:02:32.880><c> a</c><01:02:38.720><c> let</c><01:02:39.720><c> us</c><01:02:39.839><c> suppose</c>

01:02:40.130 --> 01:02:40.140 align:start position:0%
I'm messing up with a let us suppose
 

01:02:40.140 --> 01:02:41.900 align:start position:0%
I'm messing up with a let us suppose
yeah<01:02:40.470><c> this</c><01:02:40.859><c> is</c><01:02:41.009><c> a</c><01:02:41.039><c> string</c><01:02:41.369><c> so</c><01:02:41.549><c> let</c><01:02:41.700><c> let</c><01:02:41.880><c> us</c>

01:02:41.900 --> 01:02:41.910 align:start position:0%
yeah this is a string so let let us
 

01:02:41.910 --> 01:02:44.059 align:start position:0%
yeah this is a string so let let us
suppose<01:02:42.329><c> that</c><01:02:42.390><c> we</c><01:02:43.289><c> just</c><01:02:43.529><c> want</c><01:02:43.740><c> to</c><01:02:43.859><c> compare</c>

01:02:44.059 --> 01:02:44.069 align:start position:0%
suppose that we just want to compare
 

01:02:44.069 --> 01:02:50.690 align:start position:0%
suppose that we just want to compare
those<01:02:44.400><c> strings</c><01:02:44.730><c> using</c><01:02:45.269><c> the</c><01:02:45.569><c> natural</c><01:02:45.750><c> order</c><01:02:49.700><c> to</c>

01:02:50.690 --> 01:02:50.700 align:start position:0%
those strings using the natural order to
 

01:02:50.700 --> 01:02:51.789 align:start position:0%
those strings using the natural order to
change<01:02:50.940><c> sorry</c>

01:02:51.789 --> 01:02:51.799 align:start position:0%
change sorry
 

01:02:51.799 --> 01:02:54.319 align:start position:0%
change sorry
so<01:02:52.799><c> for</c><01:02:53.039><c> the</c><01:02:53.099><c> confusion</c><01:02:53.430><c> I'm</c><01:02:53.759><c> going</c><01:02:54.000><c> to</c><01:02:54.089><c> change</c>

01:02:54.319 --> 01:02:54.329 align:start position:0%
so for the confusion I'm going to change
 

01:02:54.329 --> 01:02:56.779 align:start position:0%
so for the confusion I'm going to change
the<01:02:54.420><c> example</c><01:02:55.009><c> okay</c><01:02:56.009><c> because</c><01:02:56.279><c> the</c><01:02:56.519><c> string</c><01:02:56.759><c> is</c>

01:02:56.779 --> 01:02:56.789 align:start position:0%
the example okay because the string is
 

01:02:56.789 --> 01:02:58.880 align:start position:0%
the example okay because the string is
already<01:02:57.240><c> a</c><01:02:57.299><c> common</c><01:02:57.660><c> of</c><01:02:57.720><c> a</c><01:02:57.750><c> comparable</c><01:02:58.200><c> object</c>

01:02:58.880 --> 01:02:58.890 align:start position:0%
already a common of a comparable object
 

01:02:58.890 --> 01:03:01.400 align:start position:0%
already a common of a comparable object
so<01:02:59.490><c> I</c><01:02:59.519><c> can</c><01:02:59.759><c> just</c><01:03:00.240><c> use</c><01:03:00.420><c> the</c><01:03:00.569><c> natural</c><01:03:00.900><c> order</c><01:03:01.049><c> back</c>

01:03:01.400 --> 01:03:01.410 align:start position:0%
so I can just use the natural order back
 

01:03:01.410 --> 01:03:04.190 align:start position:0%
so I can just use the natural order back
and<01:03:01.910><c> this</c><01:03:02.910><c> is</c><01:03:03.180><c> going</c><01:03:03.450><c> to</c><01:03:03.599><c> be</c><01:03:03.720><c> something</c><01:03:03.960><c> like</c>

01:03:04.190 --> 01:03:04.200 align:start position:0%
and this is going to be something like
 

01:03:04.200 --> 01:03:10.279 align:start position:0%
and this is going to be something like
that<01:03:04.259><c> it's</c><01:03:05.039><c> one</c><01:03:05.160><c> that</c><01:03:05.549><c> compared</c><01:03:06.240><c> to</c><01:03:08.390><c> and</c><01:03:09.390><c> by</c>

01:03:10.279 --> 01:03:10.289 align:start position:0%
that it's one that compared to and by
 

01:03:10.289 --> 01:03:11.900 align:start position:0%
that it's one that compared to and by
the<01:03:10.349><c> way</c><01:03:10.589><c> I</c><01:03:10.619><c> can</c><01:03:10.859><c> do</c><01:03:10.980><c> it</c><01:03:11.069><c> for</c><01:03:11.250><c> any</c><01:03:11.430><c> kind</c><01:03:11.789><c> of</c>

01:03:11.900 --> 01:03:11.910 align:start position:0%
the way I can do it for any kind of
 

01:03:11.910 --> 01:03:19.660 align:start position:0%
the way I can do it for any kind of
object<01:03:12.029><c> that</c><01:03:12.539><c> is</c><01:03:12.839><c> comparable</c><01:03:17.329><c> you</c><01:03:18.470><c> extends</c>

01:03:19.660 --> 01:03:19.670 align:start position:0%
object that is comparable you extends
 

01:03:19.670 --> 01:03:23.109 align:start position:0%
object that is comparable you extends
comparable

01:03:23.109 --> 01:03:23.119 align:start position:0%
 
 

01:03:23.119 --> 01:03:28.950 align:start position:0%
 
I'm<01:03:23.599><c> sorry</c><01:03:25.029><c> yeah</c>

01:03:28.950 --> 01:03:28.960 align:start position:0%
 
 

01:03:28.960 --> 01:03:34.800 align:start position:0%
 
we're<01:03:29.960><c> done</c>

01:03:34.800 --> 01:03:34.810 align:start position:0%
 
 

01:03:34.810 --> 01:03:40.510 align:start position:0%
 
well<01:03:37.780><c> you</c><01:03:38.780><c> asked</c><01:03:39.110><c> to</c><01:03:39.260><c> exam</c><01:03:39.560><c> sorry</c><01:03:39.830><c> you</c><01:03:40.280><c> asked</c>

01:03:40.510 --> 01:03:40.520 align:start position:0%
well you asked to exam sorry you asked
 

01:03:40.520 --> 01:03:47.860 align:start position:0%
well you asked to exam sorry you asked
to<01:03:40.670><c> extends</c><01:03:41.030><c> comparable</c><01:03:46.630><c> because</c><01:03:47.630><c> what</c><01:03:47.750><c> I'm</c>

01:03:47.860 --> 01:03:47.870 align:start position:0%
to extends comparable because what I'm
 

01:03:47.870 --> 01:03:49.990 align:start position:0%
to extends comparable because what I'm
doing<01:03:47.900><c> is</c><01:03:48.290><c> using</c><01:03:48.560><c> this</c><01:03:48.890><c> compare</c><01:03:49.700><c> to</c><01:03:49.850><c> method</c>

01:03:49.990 --> 01:03:50.000 align:start position:0%
doing is using this compare to method
 

01:03:50.000 --> 01:03:52.090 align:start position:0%
doing is using this compare to method
which<01:03:50.750><c> is</c><01:03:50.930><c> precisely</c><01:03:51.260><c> defined</c><01:03:51.800><c> on</c><01:03:52.010><c> the</c>

01:03:52.090 --> 01:03:52.100 align:start position:0%
which is precisely defined on the
 

01:03:52.100 --> 01:03:54.760 align:start position:0%
which is precisely defined on the
comparable<01:03:52.610><c> interface</c><01:03:53.260><c> strain</c><01:03:54.260><c> implements</c>

01:03:54.760 --> 01:03:54.770 align:start position:0%
comparable interface strain implements
 

01:03:54.770 --> 01:03:57.100 align:start position:0%
comparable interface strain implements
comparable<01:03:54.940><c> it</c><01:03:55.940><c> was</c><01:03:56.150><c> the</c><01:03:56.300><c> same</c><01:03:56.510><c> problem</c><01:03:56.960><c> as</c>

01:03:57.100 --> 01:03:57.110 align:start position:0%
comparable it was the same problem as
 

01:03:57.110 --> 01:04:00.760 align:start position:0%
comparable it was the same problem as
the<01:03:57.500><c> as</c><01:03:57.680><c> the</c><01:03:57.710><c> previous</c><01:03:58.190><c> one</c><01:03:58.370><c> here</c><01:03:59.500><c> when</c><01:04:00.500><c> I</c><01:04:00.530><c> went</c>

01:04:00.760 --> 01:04:00.770 align:start position:0%
the as the previous one here when I went
 

01:04:00.770 --> 01:04:03.460 align:start position:0%
the as the previous one here when I went
from<01:04:00.920><c> the</c><01:04:01.100><c> string</c><01:04:01.460><c> to</c><01:04:01.760><c> the</c><01:04:01.910><c> to</c><01:04:02.090><c> you</c><01:04:02.300><c> if</c><01:04:03.230><c> I</c><01:04:03.410><c> do</c>

01:04:03.460 --> 01:04:03.470 align:start position:0%
from the string to the to you if I do
 

01:04:03.470 --> 01:04:05.200 align:start position:0%
from the string to the to you if I do
not<01:04:03.650><c> say</c><01:04:03.830><c> that</c><01:04:03.860><c> you</c><01:04:04.040><c> extends</c><01:04:04.550><c> comparable</c><01:04:04.820><c> that</c>

01:04:05.200 --> 01:04:05.210 align:start position:0%
not say that you extends comparable that
 

01:04:05.210 --> 01:04:07.510 align:start position:0%
not say that you extends comparable that
you<01:04:05.600><c> fault</c><01:04:05.960><c> back</c><01:04:06.140><c> to</c><01:04:06.260><c> object</c><01:04:06.410><c> and</c><01:04:07.100><c> I</c><01:04:07.280><c> do</c><01:04:07.340><c> not</c>

01:04:07.510 --> 01:04:07.520 align:start position:0%
you fault back to object and I do not
 

01:04:07.520 --> 01:04:09.040 align:start position:0%
you fault back to object and I do not
have<01:04:07.580><c> this</c><01:04:07.820><c> compared</c><01:04:08.210><c> to</c><01:04:08.240><c> never</c><01:04:08.510><c> one</c><01:04:08.750><c> object</c>

01:04:09.040 --> 01:04:09.050 align:start position:0%
have this compared to never one object
 

01:04:09.050 --> 01:04:11.500 align:start position:0%
have this compared to never one object
this<01:04:09.710><c> is</c><01:04:09.890><c> why</c><01:04:10.040><c> I</c><01:04:10.070><c> can't</c><01:04:10.550><c> use</c><01:04:10.730><c> the</c><01:04:10.970><c> comparative</c>

01:04:11.500 --> 01:04:11.510 align:start position:0%
this is why I can't use the comparative
 

01:04:11.510 --> 01:04:15.310 align:start position:0%
this is why I can't use the comparative
method<01:04:11.920><c> here</c><01:04:12.920><c> I'm</c><01:04:13.850><c> saying</c><01:04:14.210><c> that</c><01:04:14.420><c> you</c><01:04:14.720><c> extends</c>

01:04:15.310 --> 01:04:15.320 align:start position:0%
method here I'm saying that you extends
 

01:04:15.320 --> 01:04:18.160 align:start position:0%
method here I'm saying that you extends
comparable<01:04:15.620><c> and</c><01:04:16.270><c> this</c><01:04:17.270><c> comparable</c><01:04:17.840><c> method</c>

01:04:18.160 --> 01:04:18.170 align:start position:0%
comparable and this comparable method
 

01:04:18.170 --> 01:04:19.780 align:start position:0%
comparable and this comparable method
which<01:04:18.380><c> is</c><01:04:18.560><c> by</c><01:04:18.710><c> the</c><01:04:18.770><c> way</c><01:04:18.950><c> functional</c><01:04:19.400><c> interface</c>

01:04:19.780 --> 01:04:19.790 align:start position:0%
which is by the way functional interface
 

01:04:19.790 --> 01:04:28.030 align:start position:0%
which is by the way functional interface
has<01:04:20.240><c> the</c><01:04:20.480><c> compareto</c><01:04:20.810><c> method</c><01:04:26.530><c> so</c><01:04:27.530><c> it's</c><01:04:27.740><c> another</c>

01:04:28.030 --> 01:04:28.040 align:start position:0%
has the compareto method so it's another
 

01:04:28.040 --> 01:04:30.130 align:start position:0%
has the compareto method so it's another
way<01:04:28.520><c> of</c><01:04:28.550><c> creating</c><01:04:29.180><c> factory</c><01:04:29.600><c> methods</c><01:04:29.930><c> on</c><01:04:30.050><c> the</c>

01:04:30.130 --> 01:04:30.140 align:start position:0%
way of creating factory methods on the
 

01:04:30.140 --> 01:04:32.920 align:start position:0%
way of creating factory methods on the
comparator<01:04:30.560><c> interface</c><01:04:30.920><c> yeah</c><01:04:31.610><c> we</c><01:04:32.390><c> can</c><01:04:32.570><c> we</c><01:04:32.750><c> can</c>

01:04:32.920 --> 01:04:32.930 align:start position:0%
comparator interface yeah we can we can
 

01:04:32.930 --> 01:04:36.340 align:start position:0%
comparator interface yeah we can we can
-<01:04:33.080><c> we</c><01:04:33.740><c> can</c><01:04:34.250><c> take</c><01:04:34.400><c> a</c><01:04:34.460><c> very</c><01:04:34.730><c> quick</c><01:04:34.910><c> look</c><01:04:35.030><c> on</c><01:04:35.450><c> the</c>

01:04:36.340 --> 01:04:36.350 align:start position:0%
- we can take a very quick look on the
 

01:04:36.350 --> 01:04:38.820 align:start position:0%
- we can take a very quick look on the
comparator<01:04:36.830><c> interface</c><01:04:37.250><c> from</c><01:04:37.670><c> the</c><01:04:37.820><c> GDK</c><01:04:38.210><c> eight</c>

01:04:38.820 --> 01:04:38.830 align:start position:0%
comparator interface from the GDK eight
 

01:04:38.830 --> 01:04:43.420 align:start position:0%
comparator interface from the GDK eight
it<01:04:39.830><c> has</c><01:04:40.690><c> the</c><01:04:41.690><c> compareto</c><01:04:42.050><c> method</c><01:04:42.170><c> as</c><01:04:42.650><c> usual</c><01:04:43.040><c> and</c>

01:04:43.420 --> 01:04:43.430 align:start position:0%
it has the compareto method as usual and
 

01:04:43.430 --> 01:04:47.890 align:start position:0%
it has the compareto method as usual and
after<01:04:43.850><c> that</c><01:04:45.640><c> five</c><01:04:46.640><c> hundred</c><01:04:46.670><c> lines</c><01:04:47.240><c> more</c><01:04:47.720><c> than</c>

01:04:47.890 --> 01:04:47.900 align:start position:0%
after that five hundred lines more than
 

01:04:47.900 --> 01:04:49.780 align:start position:0%
after that five hundred lines more than
five<01:04:48.050><c> hundred</c><01:04:48.080><c> lines</c><01:04:48.560><c> of</c><01:04:48.770><c> default</c><01:04:49.220><c> and</c><01:04:49.370><c> static</c>

01:04:49.780 --> 01:04:49.790 align:start position:0%
five hundred lines of default and static
 

01:04:49.790 --> 01:04:52.090 align:start position:0%
five hundred lines of default and static
method<01:04:50.120><c> to</c><01:04:50.270><c> create</c><01:04:50.450><c> comparators</c><01:04:51.170><c> using</c><01:04:51.830><c> five</c>

01:04:52.090 --> 01:04:52.100 align:start position:0%
method to create comparators using five
 

01:04:52.100 --> 01:04:54.370 align:start position:0%
method to create comparators using five
methods<01:04:52.430><c> and</c><01:04:53.060><c> combine</c><01:04:53.540><c> a</c><01:04:53.660><c> combination</c><01:04:54.290><c> of</c>

01:04:54.370 --> 01:04:54.380 align:start position:0%
methods and combine a combination of
 

01:04:54.380 --> 01:05:01.690 align:start position:0%
methods and combine a combination of
them

01:05:01.690 --> 01:05:01.700 align:start position:0%
 
 

01:05:01.700 --> 01:05:07.599 align:start position:0%
 
and<01:05:03.460><c> okay</c><01:05:04.460><c> so</c><01:05:04.520><c> we</c><01:05:04.849><c> saw</c><01:05:05.290><c> how</c><01:05:06.290><c> to</c><01:05:06.319><c> use</c><01:05:06.829><c> default</c>

01:05:07.599 --> 01:05:07.609 align:start position:0%
and okay so we saw how to use default
 

01:05:07.609 --> 01:05:10.000 align:start position:0%
and okay so we saw how to use default
method<01:05:07.790><c> to</c><01:05:08.569><c> combine</c><01:05:09.230><c> and</c><01:05:09.530><c> to</c><01:05:09.619><c> compose</c>

01:05:10.000 --> 01:05:10.010 align:start position:0%
method to combine and to compose
 

01:05:10.010 --> 01:05:12.579 align:start position:0%
method to combine and to compose
predicates<01:05:10.520><c> and</c><01:05:10.670><c> comparator</c><01:05:11.210><c> so</c><01:05:11.540><c> how</c><01:05:12.109><c> to</c><01:05:12.140><c> use</c>

01:05:12.579 --> 01:05:12.589 align:start position:0%
predicates and comparator so how to use
 

01:05:12.589 --> 01:05:15.280 align:start position:0%
predicates and comparator so how to use
factory<01:05:13.069><c> method</c><01:05:13.460><c> to</c><01:05:14.000><c> create</c><01:05:14.210><c> instances</c><01:05:15.079><c> of</c>

01:05:15.280 --> 01:05:15.290 align:start position:0%
factory method to create instances of
 

01:05:15.290 --> 01:05:17.620 align:start position:0%
factory method to create instances of
lambda<01:05:15.559><c> expressions</c><01:05:16.099><c> without</c><01:05:16.910><c> having</c><01:05:17.480><c> any</c>

01:05:17.620 --> 01:05:17.630 align:start position:0%
lambda expressions without having any
 

01:05:17.630 --> 01:05:22.539 align:start position:0%
lambda expressions without having any
kind<01:05:17.900><c> of</c><01:05:19.000><c> complex</c><01:05:20.000><c> stuff</c><01:05:20.329><c> leaking</c><01:05:20.990><c> in</c><01:05:21.710><c> a</c><01:05:21.829><c> coder</c>

01:05:22.539 --> 01:05:22.549 align:start position:0%
kind of complex stuff leaking in a coder
 

01:05:22.549 --> 01:05:25.539 align:start position:0%
kind of complex stuff leaking in a coder
let<01:05:23.540><c> us</c><01:05:23.660><c> go</c><01:05:23.839><c> one</c><01:05:24.290><c> step</c><01:05:24.500><c> further</c><01:05:24.680><c> by</c><01:05:25.309><c> the</c><01:05:25.369><c> way</c>

01:05:25.539 --> 01:05:25.549 align:start position:0%
let us go one step further by the way
 

01:05:25.549 --> 01:05:28.240 align:start position:0%
let us go one step further by the way
I've<01:05:25.790><c> been</c><01:05:25.819><c> using</c><01:05:26.470><c> method</c><01:05:27.470><c> references</c><01:05:27.680><c> in</c><01:05:28.130><c> my</c>

01:05:28.240 --> 01:05:28.250 align:start position:0%
I've been using method references in my
 

01:05:28.250 --> 01:05:30.609 align:start position:0%
I've been using method references in my
code<01:05:28.490><c> I</c><01:05:28.730><c> could</c><01:05:29.480><c> show</c><01:05:29.660><c> you</c><01:05:29.690><c> other</c><01:05:29.990><c> examples</c><01:05:30.079><c> of</c>

01:05:30.609 --> 01:05:30.619 align:start position:0%
code I could show you other examples of
 

01:05:30.619 --> 01:05:35.170 align:start position:0%
code I could show you other examples of
that<01:05:32.470><c> because</c><01:05:33.470><c> we</c><01:05:33.710><c> wrote</c><01:05:33.980><c> lambdas</c><01:05:34.579><c> that</c><01:05:34.940><c> were</c>

01:05:35.170 --> 01:05:35.180 align:start position:0%
that because we wrote lambdas that were
 

01:05:35.180 --> 01:05:39.099 align:start position:0%
that because we wrote lambdas that were
in<01:05:35.359><c> fact</c><01:05:35.920><c> method</c><01:05:36.920><c> references</c><01:05:37.869><c> this</c><01:05:38.869><c> is</c><01:05:39.079><c> a</c>

01:05:39.099 --> 01:05:39.109 align:start position:0%
in fact method references this is a
 

01:05:39.109 --> 01:05:42.190 align:start position:0%
in fact method references this is a
method<01:05:39.319><c> reference</c><01:05:39.799><c> I</c><01:05:40.780><c> have</c><01:05:41.780><c> this</c><01:05:41.930><c> magic</c>

01:05:42.190 --> 01:05:42.200 align:start position:0%
method reference I have this magic
 

01:05:42.200 --> 01:05:45.039 align:start position:0%
method reference I have this magic
shortcut<01:05:42.920><c> in</c><01:05:43.069><c> Eclipse</c><01:05:43.400><c> control</c><01:05:43.819><c> 1</c><01:05:44.000><c> and</c><01:05:44.660><c> if</c><01:05:44.930><c> a</c>

01:05:45.039 --> 01:05:45.049 align:start position:0%
shortcut in Eclipse control 1 and if a
 

01:05:45.049 --> 01:05:46.720 align:start position:0%
shortcut in Eclipse control 1 and if a
lambda<01:05:45.200><c> is</c><01:05:45.349><c> a</c><01:05:45.440><c> method</c><01:05:45.770><c> reference</c><01:05:46.160><c> you</c><01:05:46.400><c> select</c>

01:05:46.720 --> 01:05:46.730 align:start position:0%
lambda is a method reference you select
 

01:05:46.730 --> 01:05:50.589 align:start position:0%
lambda is a method reference you select
it<01:05:46.910><c> control</c><01:05:47.450><c> 1</c><01:05:47.630><c> and</c><01:05:47.869><c> it</c><01:05:47.960><c> will</c><01:05:49.359><c> give</c><01:05:50.359><c> you</c><01:05:50.480><c> the</c>

01:05:50.589 --> 01:05:50.599 align:start position:0%
it control 1 and it will give you the
 

01:05:50.599 --> 01:05:54.130 align:start position:0%
it control 1 and it will give you the
possibility<01:05:50.750><c> to</c><01:05:51.170><c> directly</c><01:05:51.740><c> make</c><01:05:52.280><c> it</c><01:05:52.990><c> make</c><01:05:53.990><c> it</c>

01:05:54.130 --> 01:05:54.140 align:start position:0%
possibility to directly make it make it
 

01:05:54.140 --> 01:05:55.809 align:start position:0%
possibility to directly make it make it
a<01:05:54.260><c> method</c><01:05:54.530><c> reference</c><01:05:54.890><c> this</c><01:05:55.250><c> is</c><01:05:55.460><c> also</c><01:05:55.640><c> a</c>

01:05:55.809 --> 01:05:55.819 align:start position:0%
a method reference this is also a
 

01:05:55.819 --> 01:06:01.089 align:start position:0%
a method reference this is also a
measure<01:05:55.970><c> reference</c><01:05:58.720><c> and</c><01:05:59.720><c> guess</c><01:05:59.900><c> what</c><01:06:00.109><c> this</c>

01:06:01.089 --> 01:06:01.099 align:start position:0%
measure reference and guess what this
 

01:06:01.099 --> 01:06:06.200 align:start position:0%
measure reference and guess what this
one<01:06:01.309><c> is</c><01:06:01.460><c> too</c>

01:06:06.200 --> 01:06:06.210 align:start position:0%
 
 

01:06:06.210 --> 01:06:11.680 align:start position:0%
 
oh<01:06:06.920><c> well</c><01:06:07.920><c> this</c><01:06:08.039><c> one</c><01:06:08.279><c> is</c><01:06:08.400><c> to</c><01:06:08.609><c> my</c><01:06:09.000><c> reference</c>

01:06:11.680 --> 01:06:11.690 align:start position:0%
 
 

01:06:11.690 --> 01:06:16.000 align:start position:0%
 
which<01:06:12.690><c> is</c><01:06:12.720><c> here</c><01:06:13.049><c> right</c><01:06:13.200><c> the</c><01:06:13.770><c> next</c><01:06:13.980><c> one</c><01:06:14.099><c> is</c><01:06:14.190><c> not</c>

01:06:16.000 --> 01:06:16.010 align:start position:0%
which is here right the next one is not
 

01:06:16.010 --> 01:06:19.099 align:start position:0%
which is here right the next one is not
okay<01:06:17.010><c> so</c><01:06:17.250><c> there</c><01:06:18.180><c> are</c><01:06:18.240><c> four</c><01:06:18.450><c> types</c><01:06:18.630><c> of</c><01:06:18.779><c> method</c>

01:06:19.099 --> 01:06:19.109 align:start position:0%
okay so there are four types of method
 

01:06:19.109 --> 01:06:21.109 align:start position:0%
okay so there are four types of method
reference<01:06:19.440><c> I've</c><01:06:19.589><c> put</c><01:06:19.829><c> them</c><01:06:19.980><c> in</c><01:06:20.160><c> this</c><01:06:20.339><c> in</c><01:06:20.910><c> this</c>

01:06:21.109 --> 01:06:21.119 align:start position:0%
reference I've put them in this in this
 

01:06:21.119 --> 01:06:22.180 align:start position:0%
reference I've put them in this in this
table

01:06:22.180 --> 01:06:22.190 align:start position:0%
table
 

01:06:22.190 --> 01:06:24.920 align:start position:0%
table
static<01:06:23.190><c> bound</c><01:06:23.430><c> instance</c><01:06:23.880><c> unbound</c><01:06:24.510><c> instance</c>

01:06:24.920 --> 01:06:24.930 align:start position:0%
static bound instance unbound instance
 

01:06:24.930 --> 01:06:26.750 align:start position:0%
static bound instance unbound instance
and<01:06:25.140><c> constructor</c><01:06:25.619><c> will</c><01:06:26.069><c> see</c><01:06:26.190><c> constructor</c><01:06:26.670><c> in</c>

01:06:26.750 --> 01:06:26.760 align:start position:0%
and constructor will see constructor in
 

01:06:26.760 --> 01:06:30.049 align:start position:0%
and constructor will see constructor in
a<01:06:26.849><c> minute</c><01:06:27.089><c> and</c><01:06:27.630><c> I</c><01:06:28.619><c> also</c><01:06:28.890><c> gave</c><01:06:29.190><c> you</c><01:06:29.250><c> examples</c><01:06:29.670><c> of</c>

01:06:30.049 --> 01:06:30.059 align:start position:0%
a minute and I also gave you examples of
 

01:06:30.059 --> 01:06:32.839 align:start position:0%
a minute and I also gave you examples of
how<01:06:30.779><c> to</c><01:06:31.289><c> pass</c><01:06:31.619><c> from</c><01:06:31.890><c> a</c><01:06:32.010><c> lambda</c><01:06:32.190><c> to</c><01:06:32.369><c> a</c><01:06:32.549><c> method</c>

01:06:32.839 --> 01:06:32.849 align:start position:0%
how to pass from a lambda to a method
 

01:06:32.849 --> 01:06:38.599 align:start position:0%
how to pass from a lambda to a method
reference<01:06:33.210><c> in</c><01:06:33.450><c> order</c><01:06:33.839><c> for</c><01:06:34.160><c> cases</c><01:06:37.220><c> beside</c><01:06:38.220><c> the</c>

01:06:38.599 --> 01:06:38.609 align:start position:0%
reference in order for cases beside the
 

01:06:38.609 --> 01:06:43.180 align:start position:0%
reference in order for cases beside the
slides<01:06:38.849><c> will</c><01:06:39.029><c> be</c><01:06:39.059><c> variable</c><01:06:39.480><c> slideshare</c><01:06:42.049><c> I</c>

01:06:43.180 --> 01:06:43.190 align:start position:0%
slides will be variable slideshare I
 

01:06:43.190 --> 01:06:45.289 align:start position:0%
slides will be variable slideshare I
guess<01:06:44.190><c> you</c><01:06:44.309><c> all</c><01:06:44.400><c> know</c><01:06:44.430><c> this</c><01:06:44.670><c> book</c><01:06:44.910><c> this</c><01:06:45.119><c> is</c>

01:06:45.289 --> 01:06:45.299 align:start position:0%
guess you all know this book this is
 

01:06:45.299 --> 01:06:47.329 align:start position:0%
guess you all know this book this is
called<01:06:45.510><c> the</c><01:06:45.569><c> Gang</c><01:06:45.779><c> of</c><01:06:45.900><c> Four</c><01:06:45.960><c> it</c><01:06:46.829><c> has</c><01:06:47.010><c> a</c><01:06:47.039><c> bunch</c>

01:06:47.329 --> 01:06:47.339 align:start position:0%
called the Gang of Four it has a bunch
 

01:06:47.339 --> 01:06:51.200 align:start position:0%
called the Gang of Four it has a bunch
of<01:06:47.779><c> wonderful</c><01:06:48.779><c> patterns</c><01:06:49.230><c> in</c><01:06:49.380><c> it</c><01:06:50.089><c> we're</c><01:06:51.089><c> not</c>

01:06:51.200 --> 01:06:51.210 align:start position:0%
of wonderful patterns in it we're not
 

01:06:51.210 --> 01:06:52.789 align:start position:0%
of wonderful patterns in it we're not
going<01:06:51.390><c> to</c><01:06:51.450><c> talk</c><01:06:51.690><c> about</c><01:06:51.869><c> all</c><01:06:52.319><c> those</c><01:06:52.589><c> patterns</c>

01:06:52.789 --> 01:06:52.799 align:start position:0%
going to talk about all those patterns
 

01:06:52.799 --> 01:06:54.529 align:start position:0%
going to talk about all those patterns
but<01:06:53.160><c> what</c><01:06:53.369><c> I</c><01:06:53.400><c> would</c><01:06:53.640><c> like</c><01:06:53.789><c> to</c><01:06:54.000><c> show</c><01:06:54.210><c> you</c><01:06:54.270><c> is</c>

01:06:54.529 --> 01:06:54.539 align:start position:0%
but what I would like to show you is
 

01:06:54.539 --> 01:06:56.599 align:start position:0%
but what I would like to show you is
just<01:06:54.690><c> a</c><01:06:54.869><c> hint</c><01:06:55.079><c> on</c><01:06:55.260><c> how</c><01:06:55.319><c> to</c><01:06:55.559><c> implement</c><01:06:55.950><c> some</c><01:06:56.460><c> of</c>

01:06:56.599 --> 01:06:56.609 align:start position:0%
just a hint on how to implement some of
 

01:06:56.609 --> 01:06:59.599 align:start position:0%
just a hint on how to implement some of
those<01:06:56.730><c> patterns</c><01:06:57.020><c> using</c><01:06:58.130><c> lambda</c><01:06:59.130><c> expressions</c>

01:06:59.599 --> 01:06:59.609 align:start position:0%
those patterns using lambda expressions
 

01:06:59.609 --> 01:07:02.359 align:start position:0%
those patterns using lambda expressions
default<01:07:00.599><c> methods</c><01:07:00.960><c> and</c><01:07:01.200><c> factory</c><01:07:01.559><c> methods</c><01:07:01.890><c> in</c>

01:07:02.359 --> 01:07:02.369 align:start position:0%
default methods and factory methods in
 

01:07:02.369 --> 01:07:05.059 align:start position:0%
default methods and factory methods in
very<01:07:02.640><c> efficient</c><01:07:03.059><c> way</c><01:07:03.349><c> that</c><01:07:04.349><c> is</c><01:07:04.470><c> begin</c><01:07:04.829><c> with</c>

01:07:05.059 --> 01:07:05.069 align:start position:0%
very efficient way that is begin with
 

01:07:05.069 --> 01:07:12.289 align:start position:0%
very efficient way that is begin with
the<01:07:05.309><c> factory</c><01:07:05.819><c> pattern</c><01:07:07.039><c> I</c><01:07:08.150><c> love</c><01:07:09.150><c> this</c><01:07:09.270><c> one</c><01:07:11.299><c> the</c>

01:07:12.289 --> 01:07:12.299 align:start position:0%
the factory pattern I love this one the
 

01:07:12.299 --> 01:07:14.700 align:start position:0%
the factory pattern I love this one the
factory

01:07:14.700 --> 01:07:14.710 align:start position:0%
factory
 

01:07:14.710 --> 01:07:20.280 align:start position:0%
factory
close<01:07:15.520><c> this</c><01:07:17.430><c> so</c><01:07:18.430><c> I've</c><01:07:18.850><c> created</c><01:07:19.480><c> a</c><01:07:19.750><c> class</c><01:07:19.990><c> that</c>

01:07:20.280 --> 01:07:20.290 align:start position:0%
close this so I've created a class that
 

01:07:20.290 --> 01:07:22.500 align:start position:0%
close this so I've created a class that
is<01:07:20.350><c> a</c><01:07:20.470><c> factory</c><01:07:20.830><c> it</c><01:07:21.040><c> doesn't</c><01:07:21.370><c> do</c><01:07:21.490><c> much</c><01:07:21.670><c> for</c><01:07:22.390><c> the</c>

01:07:22.500 --> 01:07:22.510 align:start position:0%
is a factory it doesn't do much for the
 

01:07:22.510 --> 01:07:32.730 align:start position:0%
is a factory it doesn't do much for the
moment<01:07:22.810><c> is</c><01:07:23.740><c> it</c><01:07:23.920><c> the</c><01:07:24.040><c> one</c><01:07:24.190><c> I</c><01:07:24.220><c> want</c><01:07:24.430><c> to</c><01:07:24.520><c> use</c><01:07:31.740><c> I'm</c>

01:07:32.730 --> 01:07:32.740 align:start position:0%
moment is it the one I want to use I'm
 

01:07:32.740 --> 01:07:36.090 align:start position:0%
moment is it the one I want to use I'm
going<01:07:33.010><c> to</c><01:07:33.160><c> use</c><01:07:33.400><c> this</c><01:07:33.880><c> this</c><01:07:34.270><c> little</c><01:07:35.020><c> class</c><01:07:35.230><c> so</c>

01:07:36.090 --> 01:07:36.100 align:start position:0%
going to use this this little class so
 

01:07:36.100 --> 01:07:39.780 align:start position:0%
going to use this this little class so
what<01:07:36.610><c> is</c><01:07:36.730><c> the</c><01:07:36.850><c> factory</c><01:07:38.040><c> well</c><01:07:39.040><c> I</c><01:07:39.070><c> do</c><01:07:39.310><c> I</c><01:07:39.520><c> want</c><01:07:39.730><c> to</c>

01:07:39.780 --> 01:07:39.790 align:start position:0%
what is the factory well I do I want to
 

01:07:39.790 --> 01:07:41.490 align:start position:0%
what is the factory well I do I want to
create<01:07:40.420><c> a</c><01:07:40.480><c> factory</c>

01:07:41.490 --> 01:07:41.500 align:start position:0%
create a factory
 

01:07:41.500 --> 01:07:44.760 align:start position:0%
create a factory
I<01:07:41.610><c> have</c><01:07:42.610><c> several</c><01:07:43.090><c> several</c><01:07:43.810><c> other</c><01:07:43.960><c> objects</c><01:07:44.650><c> in</c>

01:07:44.760 --> 01:07:44.770 align:start position:0%
I have several several other objects in
 

01:07:44.770 --> 01:07:47.250 align:start position:0%
I have several several other objects in
my<01:07:44.920><c> in</c><01:07:45.100><c> my</c><01:07:45.130><c> model</c><01:07:45.610><c> package</c><01:07:45.940><c> here</c><01:07:46.270><c> a</c><01:07:46.450><c> shape</c><01:07:47.110><c> a</c>

01:07:47.250 --> 01:07:47.260 align:start position:0%
my in my model package here a shape a
 

01:07:47.260 --> 01:07:49.530 align:start position:0%
my in my model package here a shape a
shape<01:07:47.290><c> object</c><01:07:47.890><c> which</c><01:07:48.190><c> is</c><01:07:48.370><c> just</c><01:07:48.700><c> an</c><01:07:49.000><c> abstract</c>

01:07:49.530 --> 01:07:49.540 align:start position:0%
shape object which is just an abstract
 

01:07:49.540 --> 01:07:52.520 align:start position:0%
shape object which is just an abstract
shape<01:07:49.780><c> there's</c><01:07:50.050><c> nothing</c><01:07:50.380><c> in</c><01:07:50.500><c> it</c><01:07:50.730><c> the</c><01:07:51.730><c> circle</c>

01:07:52.520 --> 01:07:52.530 align:start position:0%
shape there's nothing in it the circle
 

01:07:52.530 --> 01:07:55.740 align:start position:0%
shape there's nothing in it the circle
class<01:07:53.530><c> that</c><01:07:54.100><c> extends</c><01:07:54.580><c> shape</c><01:07:54.850><c> with</c><01:07:55.720><c> two</c>

01:07:55.740 --> 01:07:55.750 align:start position:0%
class that extends shape with two
 

01:07:55.750 --> 01:07:58.080 align:start position:0%
class that extends shape with two
constructor<01:07:56.440><c> that</c><01:07:56.680><c> takes</c><01:07:56.920><c> one</c><01:07:57.400><c> that</c><01:07:57.790><c> is</c><01:07:57.910><c> empty</c>

01:07:58.080 --> 01:07:58.090 align:start position:0%
constructor that takes one that is empty
 

01:07:58.090 --> 01:08:00.810 align:start position:0%
constructor that takes one that is empty
and<01:07:58.420><c> another</c><01:07:58.840><c> one</c><01:07:59.050><c> that</c><01:07:59.230><c> takes</c><01:07:59.410><c> a</c><01:07:59.530><c> color</c><01:07:59.820><c> and</c>

01:08:00.810 --> 01:08:00.820 align:start position:0%
and another one that takes a color and
 

01:08:00.820 --> 01:08:06.420 align:start position:0%
and another one that takes a color and
also<01:08:01.690><c> a</c><01:08:01.720><c> square</c><01:08:02.080><c> and</c><01:08:02.590><c> a</c><01:08:02.650><c> triangle</c><01:08:02.950><c> class</c><01:08:05.430><c> to</c>

01:08:06.420 --> 01:08:06.430 align:start position:0%
also a square and a triangle class to
 

01:08:06.430 --> 01:08:11.070 align:start position:0%
also a square and a triangle class to
use<01:08:08.340><c> how</c><01:08:09.340><c> should</c><01:08:10.090><c> I</c><01:08:10.180><c> be</c><01:08:10.330><c> using</c><01:08:10.450><c> a</c><01:08:10.720><c> factory</c>

01:08:11.070 --> 01:08:11.080 align:start position:0%
use how should I be using a factory
 

01:08:11.080 --> 01:08:15.180 align:start position:0%
use how should I be using a factory
object<01:08:12.240><c> this</c><01:08:13.240><c> is</c><01:08:13.300><c> my</c><01:08:13.540><c> factory</c><01:08:13.960><c> if</c><01:08:14.740><c> I</c><01:08:14.920><c> want</c><01:08:15.100><c> to</c>

01:08:15.180 --> 01:08:15.190 align:start position:0%
object this is my factory if I want to
 

01:08:15.190 --> 01:08:18.110 align:start position:0%
object this is my factory if I want to
create<01:08:15.460><c> a</c><01:08:15.520><c> factory</c><01:08:15.940><c> of</c><01:08:16.030><c> circle</c><01:08:16.800><c> so</c><01:08:17.800><c> called</c>

01:08:18.110 --> 01:08:18.120 align:start position:0%
create a factory of circle so called
 

01:08:18.120 --> 01:08:22.170 align:start position:0%
create a factory of circle so called
factory<01:08:19.950><c> basically</c><01:08:20.950><c> what</c><01:08:21.070><c> I</c><01:08:21.100><c> expect</c><01:08:21.940><c> from</c>

01:08:22.170 --> 01:08:22.180 align:start position:0%
factory basically what I expect from
 

01:08:22.180 --> 01:08:29.100 align:start position:0%
factory basically what I expect from
this<01:08:22.540><c> factory</c><01:08:22.990><c> of</c><01:08:23.080><c> circle</c><01:08:26.100><c> I</c><01:08:27.840><c> don't</c><01:08:28.840><c> know</c><01:08:28.930><c> how</c>

01:08:29.100 --> 01:08:29.110 align:start position:0%
this factory of circle I don't know how
 

01:08:29.110 --> 01:08:32.160 align:start position:0%
this factory of circle I don't know how
to<01:08:29.170><c> create</c><01:08:29.860><c> it</c><01:08:30.100><c> but</c><01:08:30.280><c> what</c><01:08:30.520><c> I</c><01:08:30.550><c> expect</c><01:08:31.120><c> this</c><01:08:31.300><c> from</c>

01:08:32.160 --> 01:08:32.170 align:start position:0%
to create it but what I expect this from
 

01:08:32.170 --> 01:08:34.650 align:start position:0%
to create it but what I expect this from
this<01:08:32.380><c> factory</c><01:08:32.770><c> to</c><01:08:32.980><c> be</c><01:08:33.130><c> able</c><01:08:33.250><c> to</c><01:08:33.640><c> call</c><01:08:34.450><c> a</c><01:08:34.480><c> method</c>

01:08:34.650 --> 01:08:34.660 align:start position:0%
this factory to be able to call a method
 

01:08:34.660 --> 01:08:37.830 align:start position:0%
this factory to be able to call a method
suppose<01:08:35.590><c> a</c><01:08:35.620><c> get</c><01:08:35.860><c> method</c><01:08:36.330><c> that</c><01:08:37.330><c> is</c><01:08:37.450><c> going</c><01:08:37.480><c> to</c>

01:08:37.830 --> 01:08:37.840 align:start position:0%
suppose a get method that is going to
 

01:08:37.840 --> 01:08:43.020 align:start position:0%
suppose a get method that is going to
return<01:08:39.240><c> so</c><01:08:40.980><c> they</c><01:08:41.980><c> say</c><01:08:42.190><c> this</c><01:08:42.370><c> is</c><01:08:42.550><c> the</c><01:08:42.670><c> basic</c>

01:08:43.020 --> 01:08:43.030 align:start position:0%
return so they say this is the basic
 

01:08:43.030 --> 01:08:46.500 align:start position:0%
return so they say this is the basic
pattern<01:08:43.180><c> of</c><01:08:43.780><c> how</c><01:08:44.410><c> to</c><01:08:44.470><c> use</c><01:08:44.710><c> a</c><01:08:44.740><c> factory</c><01:08:45.190><c> now</c><01:08:45.940><c> if</c><01:08:46.270><c> I</c>

01:08:46.500 --> 01:08:46.510 align:start position:0%
pattern of how to use a factory now if I
 

01:08:46.510 --> 01:08:50.580 align:start position:0%
pattern of how to use a factory now if I
take<01:08:46.930><c> a</c><01:08:46.990><c> look</c><01:08:47.230><c> at</c><01:08:47.350><c> this</c><01:08:47.500><c> code</c><01:08:49.140><c> if</c><01:08:50.140><c> I</c><01:08:50.320><c> take</c><01:08:50.560><c> a</c>

01:08:50.580 --> 01:08:50.590 align:start position:0%
take a look at this code if I take a
 

01:08:50.590 --> 01:08:51.990 align:start position:0%
take a look at this code if I take a
look<01:08:50.740><c> at</c><01:08:50.890><c> this</c><01:08:51.040><c> code</c><01:08:51.280><c> from</c><01:08:51.490><c> the</c><01:08:51.670><c> from</c><01:08:51.910><c> the</c>

01:08:51.990 --> 01:08:52.000 align:start position:0%
look at this code from the from the
 

01:08:52.000 --> 01:08:57.680 align:start position:0%
look at this code from the from the
lambda<01:08:52.320><c> perspective</c><01:08:54.480><c> this</c><01:08:55.480><c> get</c><01:08:55.900><c> method</c><01:08:56.340><c> here</c>

01:08:57.680 --> 01:08:57.690 align:start position:0%
lambda perspective this get method here
 

01:08:57.690 --> 01:09:00.630 align:start position:0%
lambda perspective this get method here
doesn't<01:08:58.690><c> take</c><01:08:58.840><c> any</c><01:08:59.050><c> parameter</c><01:08:59.530><c> and</c><01:08:59.980><c> does</c>

01:09:00.630 --> 01:09:00.640 align:start position:0%
doesn't take any parameter and does
 

01:09:00.640 --> 01:09:03.150 align:start position:0%
doesn't take any parameter and does
return<01:09:00.940><c> an</c><01:09:01.060><c> object</c><01:09:01.410><c> so</c><01:09:02.410><c> if</c><01:09:02.560><c> you</c><01:09:02.650><c> remember</c><01:09:03.040><c> the</c>

01:09:03.150 --> 01:09:03.160 align:start position:0%
return an object so if you remember the
 

01:09:03.160 --> 01:09:05.040 align:start position:0%
return an object so if you remember the
four<01:09:03.490><c> categories</c><01:09:04.090><c> of</c><01:09:04.120><c> lambda</c><01:09:04.540><c> expression</c><01:09:04.960><c> I</c>

01:09:05.040 --> 01:09:05.050 align:start position:0%
four categories of lambda expression I
 

01:09:05.050 --> 01:09:08.310 align:start position:0%
four categories of lambda expression I
have<01:09:05.290><c> this</c><01:09:06.070><c> is</c><01:09:06.310><c> a</c><01:09:06.580><c> supplier</c><01:09:07.240><c> it</c><01:09:07.870><c> doesn't</c><01:09:08.200><c> take</c>

01:09:08.310 --> 01:09:08.320 align:start position:0%
have this is a supplier it doesn't take
 

01:09:08.320 --> 01:09:11.280 align:start position:0%
have this is a supplier it doesn't take
anything<01:09:08.670><c> creates</c><01:09:09.670><c> an</c><01:09:09.790><c> object</c><01:09:09.990><c> so</c><01:09:10.990><c> it</c><01:09:11.080><c> means</c>

01:09:11.280 --> 01:09:11.290 align:start position:0%
anything creates an object so it means
 

01:09:11.290 --> 01:09:15.000 align:start position:0%
anything creates an object so it means
that<01:09:11.410><c> my</c><01:09:11.680><c> factory</c><01:09:12.220><c> here</c><01:09:12.960><c> is</c><01:09:13.960><c> in</c><01:09:14.170><c> fact</c><01:09:14.410><c> not</c>

01:09:15.000 --> 01:09:15.010 align:start position:0%
that my factory here is in fact not
 

01:09:15.010 --> 01:09:17.340 align:start position:0%
that my factory here is in fact not
necessary<01:09:15.580><c> a</c><01:09:15.640><c> class</c><01:09:15.910><c> could</c><01:09:16.720><c> be</c><01:09:16.870><c> an</c><01:09:16.930><c> interface</c>

01:09:17.340 --> 01:09:17.350 align:start position:0%
necessary a class could be an interface
 

01:09:17.350 --> 01:09:21.630 align:start position:0%
necessary a class could be an interface
that<01:09:18.210><c> extends</c>

01:09:21.630 --> 01:09:21.640 align:start position:0%
 
 

01:09:21.640 --> 01:09:28.890 align:start position:0%
 
supplier<01:09:22.240><c> of</c><01:09:24.990><c> tea</c><01:09:27.120><c> and</c><01:09:28.120><c> supply</c><01:09:28.510><c> of</c><01:09:28.660><c> cheese</c>

01:09:28.890 --> 01:09:28.900 align:start position:0%
supplier of tea and supply of cheese
 

01:09:28.900 --> 01:09:31.020 align:start position:0%
supplier of tea and supply of cheese
very<01:09:29.110><c> nice</c><01:09:29.230><c> because</c><01:09:29.440><c> it</c><01:09:29.770><c> has</c><01:09:29.950><c> a</c><01:09:30.280><c> get</c><01:09:30.850><c> method</c>

01:09:31.020 --> 01:09:31.030 align:start position:0%
very nice because it has a get method
 

01:09:31.030 --> 01:09:33.330 align:start position:0%
very nice because it has a get method
that<01:09:31.930><c> does</c><01:09:32.110><c> not</c><01:09:32.260><c> take</c><01:09:32.500><c> anything</c><01:09:32.740><c> that</c><01:09:32.890><c> and</c>

01:09:33.330 --> 01:09:33.340 align:start position:0%
that does not take anything that and
 

01:09:33.340 --> 01:09:37.550 align:start position:0%
that does not take anything that and
that<01:09:33.520><c> creates</c><01:09:34.290><c> something</c><01:09:35.550><c> so</c><01:09:36.550><c> if</c><01:09:36.910><c> I</c><01:09:37.090><c> want</c><01:09:37.300><c> to</c>

01:09:37.550 --> 01:09:37.560 align:start position:0%
that creates something so if I want to
 

01:09:37.560 --> 01:09:40.430 align:start position:0%
that creates something so if I want to
create<01:09:38.560><c> an</c><01:09:38.860><c> implementation</c><01:09:39.610><c> of</c><01:09:39.730><c> that</c><01:09:39.790><c> Factory</c>

01:09:40.430 --> 01:09:40.440 align:start position:0%
create an implementation of that Factory
 

01:09:40.440 --> 01:09:46.440 align:start position:0%
create an implementation of that Factory
so<01:09:41.440><c> we</c><01:09:41.590><c> the</c><01:09:41.740><c> same</c><01:09:41.950><c> I</c><01:09:43.260><c> just</c><01:09:44.260><c> take</c><01:09:44.500><c> a</c><01:09:45.330><c> block</c><01:09:46.330><c> of</c>

01:09:46.440 --> 01:09:46.450 align:start position:0%
so we the same I just take a block of
 

01:09:46.450 --> 01:09:50.550 align:start position:0%
so we the same I just take a block of
parameters<01:09:46.990><c> and</c><01:09:48.360><c> what</c><01:09:49.360><c> should</c><01:09:49.570><c> I</c><01:09:49.660><c> return</c><01:09:49.990><c> well</c>

01:09:50.550 --> 01:09:50.560 align:start position:0%
parameters and what should I return well
 

01:09:50.560 --> 01:09:52.520 align:start position:0%
parameters and what should I return well
a<01:09:50.800><c> new</c><01:09:50.950><c> circle</c>

01:09:52.520 --> 01:09:52.530 align:start position:0%
a new circle
 

01:09:52.530 --> 01:09:56.190 align:start position:0%
a new circle
so<01:09:53.530><c> basically</c><01:09:53.890><c> this</c><01:09:54.130><c> is</c><01:09:54.370><c> a</c><01:09:54.540><c> factory</c><01:09:55.540><c> from</c><01:09:56.080><c> the</c>

01:09:56.190 --> 01:09:56.200 align:start position:0%
so basically this is a factory from the
 

01:09:56.200 --> 01:09:59.190 align:start position:0%
so basically this is a factory from the
Gulf<01:09:56.670><c> implemented</c><01:09:57.670><c> using</c><01:09:57.850><c> lambdas</c><01:09:58.390><c> in</c><01:09:58.900><c> July</c>

01:09:59.190 --> 01:09:59.200 align:start position:0%
Gulf implemented using lambdas in July
 

01:09:59.200 --> 01:10:01.940 align:start position:0%
Gulf implemented using lambdas in July
and<01:09:59.740><c> by</c><01:10:00.070><c> the</c><01:10:00.280><c> way</c><01:10:00.520><c> this</c><01:10:00.700><c> is</c><01:10:00.880><c> also</c><01:10:01.060><c> a</c>

01:10:01.940 --> 01:10:01.950 align:start position:0%
and by the way this is also a
 

01:10:01.950 --> 01:10:04.950 align:start position:0%
and by the way this is also a
constructor<01:10:02.950><c> method</c><01:10:03.130><c> reference</c><01:10:04.060><c> that</c><01:10:04.570><c> I</c><01:10:04.630><c> came</c>

01:10:04.950 --> 01:10:04.960 align:start position:0%
constructor method reference that I came
 

01:10:04.960 --> 01:10:09.060 align:start position:0%
constructor method reference that I came
that<01:10:05.620><c> I</c><01:10:05.770><c> can</c><01:10:06.100><c> write</c><01:10:06.370><c> in</c><01:10:07.000><c> this</c><01:10:07.150><c> way</c><01:10:07.920><c> what</c><01:10:08.920><c> could</c>

01:10:09.060 --> 01:10:09.070 align:start position:0%
that I can write in this way what could
 

01:10:09.070 --> 01:10:12.210 align:start position:0%
that I can write in this way what could
I<01:10:09.160><c> do</c><01:10:09.220><c> with</c><01:10:09.490><c> this</c><01:10:09.640><c> factory</c><01:10:10.410><c> well</c><01:10:11.410><c> I</c><01:10:11.440><c> could</c><01:10:11.890><c> for</c>

01:10:12.210 --> 01:10:12.220 align:start position:0%
I do with this factory well I could for
 

01:10:12.220 --> 01:10:16.280 align:start position:0%
I do with this factory well I could for
instance<01:10:12.280><c> say</c><01:10:12.760><c> ok</c><01:10:13.740><c> so</c><01:10:14.740><c> a</c><01:10:14.770><c> factory</c>

01:10:16.280 --> 01:10:16.290 align:start position:0%
instance say ok so a factory
 

01:10:16.290 --> 01:10:28.890 align:start position:0%
instance say ok so a factory
give<01:10:17.290><c> me</c><01:10:20.730><c> five</c><01:10:21.730><c> circles</c><01:10:23.280><c> in</c><01:10:24.280><c> list</c>

01:10:28.890 --> 01:10:28.900 align:start position:0%
 
 

01:10:28.900 --> 01:10:38.460 align:start position:0%
 
five<01:10:30.030><c> circles</c>

01:10:38.460 --> 01:10:38.470 align:start position:0%
 
 

01:10:38.470 --> 01:10:41.680 align:start position:0%
 
what<01:10:39.470><c> is</c><01:10:39.590><c> this</c><01:10:39.800><c> get</c><01:10:40.580><c> method</c><01:10:40.970><c> it's</c><01:10:41.390><c> not</c><01:10:41.540><c> the</c>

01:10:41.680 --> 01:10:41.690 align:start position:0%
what is this get method it's not the
 

01:10:41.690 --> 01:10:43.120 align:start position:0%
what is this get method it's not the
same<01:10:41.900><c> as</c><01:10:42.050><c> the</c><01:10:42.170><c> get</c><01:10:42.320><c> method</c><01:10:42.470><c> that</c><01:10:42.830><c> does</c><01:10:43.010><c> not</c>

01:10:43.120 --> 01:10:43.130 align:start position:0%
same as the get method that does not
 

01:10:43.130 --> 01:10:45.820 align:start position:0%
same as the get method that does not
take<01:10:43.340><c> any</c><01:10:43.370><c> argument</c><01:10:43.910><c> it's</c><01:10:44.570><c> a</c><01:10:44.690><c> method</c><01:10:44.900><c> defined</c>

01:10:45.820 --> 01:10:45.830 align:start position:0%
take any argument it's a method defined
 

01:10:45.830 --> 01:10:49.300 align:start position:0%
take any argument it's a method defined
on<01:10:45.980><c> the</c><01:10:46.130><c> instance</c><01:10:47.090><c> of</c><01:10:47.420><c> the</c><01:10:47.810><c> factory</c><01:10:48.170><c> so</c><01:10:49.130><c> once</c>

01:10:49.300 --> 01:10:49.310 align:start position:0%
on the instance of the factory so once
 

01:10:49.310 --> 01:10:53.500 align:start position:0%
on the instance of the factory so once
again<01:10:49.490><c> this</c><01:10:49.940><c> is</c><01:10:50.000><c> a</c><01:10:50.180><c> default</c><01:10:50.480><c> method</c><01:10:51.850><c> okay</c><01:10:52.850><c> so</c><01:10:53.480><c> I</c>

01:10:53.500 --> 01:10:53.510 align:start position:0%
again this is a default method okay so I
 

01:10:53.510 --> 01:10:56.530 align:start position:0%
again this is a default method okay so I
can<01:10:53.780><c> create</c><01:10:54.050><c> here</c><01:10:54.530><c> a</c><01:10:54.710><c> default</c><01:10:55.520><c> method</c><01:10:55.700><c> you</c>

01:10:56.530 --> 01:10:56.540 align:start position:0%
can create here a default method you
 

01:10:56.540 --> 01:11:00.580 align:start position:0%
can create here a default method you
treat<01:10:56.810><c> on</c><01:10:56.960><c> the</c><01:10:57.110><c> list</c><01:10:57.290><c> of</c><01:10:58.160><c> T</c><01:10:58.840><c> it</c><01:10:59.840><c> takes</c><01:11:00.350><c> an</c>

01:11:00.580 --> 01:11:00.590 align:start position:0%
treat on the list of T it takes an
 

01:11:00.590 --> 01:11:06.700 align:start position:0%
treat on the list of T it takes an
integer<01:11:04.240><c> let</c><01:11:05.240><c> us</c><01:11:05.360><c> make</c><01:11:05.600><c> it</c><01:11:05.630><c> written</c><01:11:06.110><c> your</c><01:11:06.320><c> list</c>

01:11:06.700 --> 01:11:06.710 align:start position:0%
integer let us make it written your list
 

01:11:06.710 --> 01:11:11.680 align:start position:0%
integer let us make it written your list
just<01:11:07.220><c> to</c><01:11:07.310><c> have</c><01:11:07.430><c> it</c><01:11:07.460><c> compile</c><01:11:10.240><c> this</c><01:11:11.240><c> is</c><01:11:11.390><c> a</c><01:11:11.420><c> list</c>

01:11:11.680 --> 01:11:11.690 align:start position:0%
just to have it compile this is a list
 

01:11:11.690 --> 01:11:14.050 align:start position:0%
just to have it compile this is a list
and<01:11:11.930><c> this</c><01:11:12.080><c> is</c><01:11:12.260><c> in</c><01:11:12.380><c> your</c><01:11:12.530><c> list</c><01:11:12.800><c> and</c><01:11:13.400><c> that's</c><01:11:13.700><c> it</c>

01:11:14.050 --> 01:11:14.060 align:start position:0%
and this is in your list and that's it
 

01:11:14.060 --> 01:11:18.580 align:start position:0%
and this is in your list and that's it
at<01:11:14.810><c> least</c><01:11:15.110><c> it</c><01:11:15.230><c> compile</c><01:11:16.690><c> now</c><01:11:17.690><c> what</c><01:11:17.900><c> should</c><01:11:18.140><c> I</c><01:11:18.230><c> be</c>

01:11:18.580 --> 01:11:18.590 align:start position:0%
at least it compile now what should I be
 

01:11:18.590 --> 01:11:21.940 align:start position:0%
at least it compile now what should I be
doing<01:11:18.620><c> in</c><01:11:19.160><c> this</c><01:11:19.340><c> create</c><01:11:20.330><c> five</c><01:11:21.200><c> circles</c><01:11:21.650><c> and</c>

01:11:21.940 --> 01:11:21.950 align:start position:0%
doing in this create five circles and
 

01:11:21.950 --> 01:11:24.880 align:start position:0%
doing in this create five circles and
put<01:11:22.580><c> them</c><01:11:22.730><c> in</c><01:11:22.850><c> a</c><01:11:22.880><c> list</c><01:11:23.120><c> I</c><01:11:23.510><c> could</c><01:11:24.350><c> create</c><01:11:24.830><c> a</c>

01:11:24.880 --> 01:11:24.890 align:start position:0%
put them in a list I could create a
 

01:11:24.890 --> 01:11:29.230 align:start position:0%
put them in a list I could create a
follow-up<01:11:25.720><c> but</c><01:11:26.720><c> I</c><01:11:26.960><c> am</c><01:11:27.260><c> using</c><01:11:27.470><c> Java</c><01:11:27.890><c> 8</c><01:11:28.130><c> so</c><01:11:28.850><c> I've</c>

01:11:29.230 --> 01:11:29.240 align:start position:0%
follow-up but I am using Java 8 so I've
 

01:11:29.240 --> 01:11:33.910 align:start position:0%
follow-up but I am using Java 8 so I've
got<01:11:29.480><c> this</c><01:11:29.690><c> nice</c><01:11:30.130><c> in</c><01:11:31.130><c> stream</c><01:11:31.850><c> object</c><01:11:32.620><c> then</c><01:11:33.620><c> can</c>

01:11:33.910 --> 01:11:33.920 align:start position:0%
got this nice in stream object then can
 

01:11:33.920 --> 01:11:38.940 align:start position:0%
got this nice in stream object then can
create<01:11:34.370><c> a</c><01:11:34.730><c> stream</c><01:11:35.480><c> of</c><01:11:36.760><c> n</c><01:11:37.760><c> integers</c><01:11:38.090><c> for</c><01:11:38.480><c> me</c><01:11:38.600><c> I</c>

01:11:38.940 --> 01:11:38.950 align:start position:0%
create a stream of n integers for me I
 

01:11:38.950 --> 01:11:44.020 align:start position:0%
create a stream of n integers for me I
can<01:11:39.950><c> map</c><01:11:40.160><c> the</c><01:11:40.370><c> stream</c><01:11:40.810><c> to</c><01:11:41.810><c> object</c><01:11:42.820><c> take</c><01:11:43.820><c> the</c>

01:11:44.020 --> 01:11:44.030 align:start position:0%
can map the stream to object take the
 

01:11:44.030 --> 01:11:47.640 align:start position:0%
can map the stream to object take the
index<01:11:44.270><c> return</c><01:11:45.260><c> and</c><01:11:45.980><c> you</c><01:11:46.100><c> saw</c><01:11:46.310><c> new</c><01:11:46.640><c> sorry</c>

01:11:47.640 --> 01:11:47.650 align:start position:0%
index return and you saw new sorry
 

01:11:47.650 --> 01:11:49.960 align:start position:0%
index return and you saw new sorry
return<01:11:48.650><c> a</c><01:11:48.680><c> new</c><01:11:48.920><c> instance</c><01:11:48.950><c> of</c><01:11:49.640><c> what</c><01:11:49.820><c> this</c>

01:11:49.960 --> 01:11:49.970 align:start position:0%
return a new instance of what this
 

01:11:49.970 --> 01:11:52.990 align:start position:0%
return a new instance of what this
Factory<01:11:50.420><c> can</c><01:11:51.350><c> create</c><01:11:51.740><c> that</c><01:11:52.190><c> is</c><01:11:52.340><c> called</c><01:11:52.760><c> a</c>

01:11:52.990 --> 01:11:53.000 align:start position:0%
Factory can create that is called a
 

01:11:53.000 --> 01:11:57.100 align:start position:0%
Factory can create that is called a
stopgap<01:11:53.870><c> method</c><01:11:54.380><c> could</c><01:11:55.040><c> put</c><01:11:55.250><c> this</c><01:11:55.400><c> here</c><01:11:56.110><c> right</c>

01:11:57.100 --> 01:11:57.110 align:start position:0%
stopgap method could put this here right
 

01:11:57.110 --> 01:12:05.640 align:start position:0%
stopgap method could put this here right
and<01:11:57.580><c> put</c><01:11:58.580><c> the</c><01:11:58.700><c> result</c><01:12:01.600><c> list</c>

01:12:05.640 --> 01:12:05.650 align:start position:0%
 
 

01:12:05.650 --> 01:12:10.500 align:start position:0%
 
and<01:12:06.070><c> just</c><01:12:06.400><c> return</c><01:12:06.550><c> that</c><01:12:08.430><c> for</c><01:12:09.430><c> loops</c><01:12:09.670><c> are</c><01:12:10.120><c> so</c>

01:12:10.500 --> 01:12:10.510 align:start position:0%
and just return that for loops are so
 

01:12:10.510 --> 01:12:11.310 align:start position:0%
and just return that for loops are so
Java<01:12:10.810><c> 8</c>

01:12:11.310 --> 01:12:11.320 align:start position:0%
Java 8
 

01:12:11.320 --> 01:12:14.940 align:start position:0%
Java 8
Java<01:12:11.920><c> 7</c><01:12:12.100><c> sorry</c><01:12:12.990><c> okay</c><01:12:13.990><c> so</c><01:12:14.050><c> this</c><01:12:14.350><c> is</c><01:12:14.530><c> just</c><01:12:14.770><c> one</c>

01:12:14.940 --> 01:12:14.950 align:start position:0%
Java 7 sorry okay so this is just one
 

01:12:14.950 --> 01:12:17.070 align:start position:0%
Java 7 sorry okay so this is just one
line<01:12:15.130><c> to</c><01:12:15.340><c> to</c><01:12:15.670><c> to</c><01:12:15.850><c> to</c><01:12:15.880><c> create</c><01:12:16.420><c> this</c><01:12:16.570><c> thing</c><01:12:16.780><c> and</c>

01:12:17.070 --> 01:12:17.080 align:start position:0%
line to to to to create this thing and
 

01:12:17.080 --> 01:12:26.070 align:start position:0%
line to to to to create this thing and
if<01:12:17.230><c> I</c><01:12:17.380><c> run</c><01:12:17.560><c> this</c><01:12:17.710><c> code</c><01:12:19.260><c> with</c><01:12:20.260><c> factories</c>

01:12:26.070 --> 01:12:26.080 align:start position:0%
 
 

01:12:26.080 --> 01:12:36.080 align:start position:0%
 
five<01:12:26.800><c> circles</c><01:12:29.160><c> for</c><01:12:30.160><c> each</c><01:12:31.590><c> system</c><01:12:33.750><c> that</c><01:12:34.750><c> out</c>

01:12:36.080 --> 01:12:36.090 align:start position:0%
five circles for each system that out
 

01:12:36.090 --> 01:12:42.600 align:start position:0%
five circles for each system that out
printer<01:12:37.090><c> n</c><01:12:38.820><c> code</c><01:12:39.820><c> and</c><01:12:40.710><c> get</c><01:12:41.710><c> all</c><01:12:41.980><c> my</c><01:12:42.280><c> five</c>

01:12:42.600 --> 01:12:42.610 align:start position:0%
printer n code and get all my five
 

01:12:42.610 --> 01:12:45.210 align:start position:0%
printer n code and get all my five
circles<01:12:43.080><c> created</c><01:12:44.080><c> using</c><01:12:44.290><c> this</c><01:12:44.620><c> default</c>

01:12:45.210 --> 01:12:45.220 align:start position:0%
circles created using this default
 

01:12:45.220 --> 01:12:48.810 align:start position:0%
circles created using this default
method<01:12:46.170><c> now</c><01:12:47.170><c> I</c><01:12:47.470><c> have</c><01:12:47.740><c> another</c><01:12:48.010><c> constructor</c><01:12:48.670><c> is</c>

01:12:48.810 --> 01:12:48.820 align:start position:0%
method now I have another constructor is
 

01:12:48.820 --> 01:12:50.640 align:start position:0%
method now I have another constructor is
my<01:12:48.970><c> in</c><01:12:49.120><c> my</c><01:12:49.150><c> circle</c><01:12:49.600><c> which</c><01:12:49.810><c> is</c><01:12:49.840><c> a</c><01:12:50.050><c> circle</c><01:12:50.530><c> that</c>

01:12:50.640 --> 01:12:50.650 align:start position:0%
my in my circle which is a circle that
 

01:12:50.650 --> 01:12:53.580 align:start position:0%
my in my circle which is a circle that
takes<01:12:50.950><c> a</c><01:12:51.160><c> color</c><01:12:51.520><c> as</c><01:12:51.820><c> a</c><01:12:51.880><c> parameter</c><01:12:52.450><c> so</c><01:12:53.200><c> suppose</c>

01:12:53.580 --> 01:12:53.590 align:start position:0%
takes a color as a parameter so suppose
 

01:12:53.590 --> 01:12:56.220 align:start position:0%
takes a color as a parameter so suppose
I<01:12:53.890><c> want</c><01:12:54.340><c> to</c><01:12:54.550><c> what</c><01:12:55.450><c> I</c><01:12:55.480><c> would</c><01:12:55.600><c> like</c><01:12:55.780><c> to</c><01:12:55.900><c> do</c><01:12:56.050><c> now</c><01:12:56.200><c> is</c>

01:12:56.220 --> 01:12:56.230 align:start position:0%
I want to what I would like to do now is
 

01:12:56.230 --> 01:13:00.590 align:start position:0%
I want to what I would like to do now is
to<01:12:56.620><c> create</c><01:12:56.740><c> for</c><01:12:57.010><c> instance</c><01:12:57.310><c> red</c><01:12:58.300><c> red</c><01:12:58.960><c> circles</c>

01:13:00.590 --> 01:13:00.600 align:start position:0%
to create for instance red red circles
 

01:13:00.600 --> 01:13:06.660 align:start position:0%
to create for instance red red circles
red<01:13:01.680><c> circles</c><01:13:04.260><c> factory</c><01:13:05.550><c> doesn't</c><01:13:06.550><c> take</c>

01:13:06.660 --> 01:13:06.670 align:start position:0%
red circles factory doesn't take
 

01:13:06.670 --> 01:13:24.800 align:start position:0%
red circles factory doesn't take
anything<01:13:06.940><c> and</c><01:13:07.660><c> you</c><01:13:07.990><c> so</c><01:13:08.590><c> call</c><01:13:19.920><c> this</c><01:13:20.920><c> is</c><01:13:21.160><c> the</c>

01:13:24.800 --> 01:13:24.810 align:start position:0%
 
 

01:13:24.810 --> 01:13:29.310 align:start position:0%
 
create<01:13:27.210><c> way</c><01:13:28.210><c> to</c><01:13:28.270><c> code</c><01:13:28.600><c> just</c><01:13:28.720><c> copy</c><01:13:29.020><c> paste</c><01:13:29.200><c> this</c>

01:13:29.310 --> 01:13:29.320 align:start position:0%
create way to code just copy paste this
 

01:13:29.320 --> 01:13:35.850 align:start position:0%
create way to code just copy paste this
code<01:13:29.560><c> five</c><01:13:30.430><c> this</c><01:13:30.700><c> is</c><01:13:30.880><c> five</c><01:13:31.120><c> red</c><01:13:31.450><c> circle</c><01:13:34.860><c> run</c>

01:13:35.850 --> 01:13:35.860 align:start position:0%
code five this is five red circle run
 

01:13:35.860 --> 01:13:44.040 align:start position:0%
code five this is five red circle run
this<01:13:36.010><c> code</c><01:13:36.250><c> and</c><01:13:36.850><c> then</c><01:13:42.000><c> if</c><01:13:43.000><c> I</c><01:13:43.180><c> run</c><01:13:43.390><c> this</c><01:13:43.510><c> code</c><01:13:43.570><c> I</c>

01:13:44.040 --> 01:13:44.050 align:start position:0%
this code and then if I run this code I
 

01:13:44.050 --> 01:13:47.100 align:start position:0%
this code and then if I run this code I
have<01:13:44.410><c> first</c><01:13:44.830><c> five</c><01:13:45.130><c> normal</c><01:13:46.120><c> circles</c><01:13:46.540><c> and</c><01:13:46.810><c> then</c>

01:13:47.100 --> 01:13:47.110 align:start position:0%
have first five normal circles and then
 

01:13:47.110 --> 01:13:49.980 align:start position:0%
have first five normal circles and then
five<01:13:47.470><c> red</c><01:13:47.860><c> circles</c><01:13:48.280><c> so</c><01:13:49.030><c> from</c><01:13:49.330><c> from</c><01:13:49.630><c> a</c><01:13:49.720><c> factory</c>

01:13:49.980 --> 01:13:49.990 align:start position:0%
five red circles so from from a factory
 

01:13:49.990 --> 01:13:52.710 align:start position:0%
five red circles so from from a factory
I<01:13:50.230><c> can</c><01:13:50.470><c> add</c><01:13:50.710><c> as</c><01:13:50.920><c> many</c><01:13:51.070><c> default</c><01:13:51.490><c> method</c><01:13:51.640><c> as</c><01:13:52.390><c> I</c><01:13:52.510><c> as</c>

01:13:52.710 --> 01:13:52.720 align:start position:0%
I can add as many default method as I as
 

01:13:52.720 --> 01:13:54.960 align:start position:0%
I can add as many default method as I as
I<01:13:52.840><c> need</c><01:13:53.050><c> to</c><01:13:53.260><c> create</c><01:13:54.040><c> more</c><01:13:54.430><c> stuff</c><01:13:54.700><c> to</c><01:13:54.850><c> add</c>

01:13:54.960 --> 01:13:54.970 align:start position:0%
I need to create more stuff to add
 

01:13:54.970 --> 01:13:56.520 align:start position:0%
I need to create more stuff to add
functionalities<01:13:55.690><c> to</c><01:13:55.810><c> my</c><01:13:55.960><c> to</c><01:13:56.200><c> my</c><01:13:56.230><c> factory</c>

01:13:56.520 --> 01:13:56.530 align:start position:0%
functionalities to my to my factory
 

01:13:56.530 --> 01:13:59.430 align:start position:0%
functionalities to my to my factory
which<01:13:57.190><c> is</c><01:13:57.220><c> nice</c><01:13:57.520><c> what</c><01:13:58.390><c> is</c><01:13:58.510><c> not</c><01:13:58.690><c> that</c><01:13:58.870><c> nice</c><01:13:59.080><c> is</c>

01:13:59.430 --> 01:13:59.440 align:start position:0%
which is nice what is not that nice is
 

01:13:59.440 --> 01:14:01.320 align:start position:0%
which is nice what is not that nice is
the<01:13:59.620><c> way</c><01:13:59.860><c> this</c><01:14:00.070><c> code</c><01:14:00.370><c> is</c><01:14:00.520><c> written</c><01:14:00.910><c> here</c>

01:14:01.320 --> 01:14:01.330 align:start position:0%
the way this code is written here
 

01:14:01.330 --> 01:14:04.170 align:start position:0%
the way this code is written here
because<01:14:02.230><c> in</c><01:14:02.350><c> fact</c><01:14:02.530><c> what</c><01:14:02.920><c> I</c><01:14:02.980><c> what</c><01:14:03.340><c> I'm</c><01:14:03.640><c> doing</c>

01:14:04.170 --> 01:14:04.180 align:start position:0%
because in fact what I what I'm doing
 

01:14:04.180 --> 01:14:06.780 align:start position:0%
because in fact what I what I'm doing
here<01:14:04.540><c> is</c><01:14:04.600><c> it's</c><01:14:05.290><c> putting</c><01:14:05.710><c> inside</c><01:14:06.250><c> the</c><01:14:06.430><c> supplier</c>

01:14:06.780 --> 01:14:06.790 align:start position:0%
here is it's putting inside the supplier
 

01:14:06.790 --> 01:14:09.750 align:start position:0%
here is it's putting inside the supplier
parameter<01:14:07.590><c> that</c><01:14:08.590><c> I</c><01:14:08.650><c> would</c><01:14:08.920><c> like</c><01:14:09.070><c> to</c><01:14:09.220><c> pass</c><01:14:09.460><c> as</c><01:14:09.730><c> a</c>

01:14:09.750 --> 01:14:09.760 align:start position:0%
parameter that I would like to pass as a
 

01:14:09.760 --> 01:14:11.550 align:start position:0%
parameter that I would like to pass as a
parameter<01:14:09.940><c> to</c><01:14:10.390><c> another</c><01:14:10.660><c> method</c><01:14:10.900><c> in</c><01:14:11.200><c> fact</c><01:14:11.260><c> I</c>

01:14:11.550 --> 01:14:11.560 align:start position:0%
parameter to another method in fact I
 

01:14:11.560 --> 01:14:13.770 align:start position:0%
parameter to another method in fact I
would<01:14:11.740><c> not</c><01:14:12.120><c> not</c><01:14:13.120><c> I'm</c><01:14:13.240><c> not</c><01:14:13.390><c> too</c><01:14:13.510><c> happy</c><01:14:13.600><c> with</c>

01:14:13.770 --> 01:14:13.780 align:start position:0%
would not not I'm not too happy with
 

01:14:13.780 --> 01:14:17.220 align:start position:0%
would not not I'm not too happy with
this<01:14:14.050><c> code</c><01:14:14.350><c> I</c><01:14:15.150><c> better</c><01:14:16.150><c> write</c><01:14:16.390><c> it</c><01:14:16.450><c> like</c><01:14:16.780><c> that</c>

01:14:17.220 --> 01:14:17.230 align:start position:0%
this code I better write it like that
 

01:14:17.230 --> 01:14:22.170 align:start position:0%
this code I better write it like that
I<01:14:17.260><c> prefer</c><01:14:17.860><c> write</c><01:14:18.010><c> it</c><01:14:18.190><c> like</c><01:14:18.310><c> that</c><01:14:20.760><c> Factory</c><01:14:21.760><c> and</c>

01:14:22.170 --> 01:14:22.180 align:start position:0%
I prefer write it like that Factory and
 

01:14:22.180 --> 01:14:26.100 align:start position:0%
I prefer write it like that Factory and
say<01:14:22.540><c> okay</c><01:14:23.350><c> I</c><01:14:24.210><c> passed</c><01:14:25.210><c> the</c><01:14:25.330><c> constructor</c><01:14:25.960><c> as</c><01:14:26.080><c> a</c>

01:14:26.100 --> 01:14:26.110 align:start position:0%
say okay I passed the constructor as a
 

01:14:26.110 --> 01:14:31.340 align:start position:0%
say okay I passed the constructor as a
parameter<01:14:26.820><c> new</c><01:14:27.820><c> so-called</c><01:14:29.370><c> of</c><01:14:30.370><c> color</c><01:14:30.700><c> and</c>

01:14:31.340 --> 01:14:31.350 align:start position:0%
parameter new so-called of color and
 

01:14:31.350 --> 01:14:36.380 align:start position:0%
parameter new so-called of color and
then<01:14:32.350><c> pass</c><01:14:32.890><c> the</c><01:14:33.280><c> color</c><01:14:33.840><c> also</c><01:14:34.840><c> as</c><01:14:35.350><c> a</c><01:14:35.410><c> parameter</c>

01:14:36.380 --> 01:14:36.390 align:start position:0%
then pass the color also as a parameter
 

01:14:36.390 --> 01:14:39.320 align:start position:0%
then pass the color also as a parameter
okay<01:14:37.390><c> this</c><01:14:37.750><c> is</c><01:14:37.900><c> what</c><01:14:38.110><c> I</c><01:14:38.140><c> would</c><01:14:38.260><c> like</c><01:14:38.410><c> to</c><01:14:38.560><c> do</c>

01:14:39.320 --> 01:14:39.330 align:start position:0%
okay this is what I would like to do
 

01:14:39.330 --> 01:14:42.900 align:start position:0%
okay this is what I would like to do
Factory<01:14:40.330><c> and</c><01:14:41.010><c> pass</c><01:14:42.010><c> it</c><01:14:42.220><c> for</c><01:14:42.430><c> instance</c><01:14:42.730><c> or</c>

01:14:42.900 --> 01:14:42.910 align:start position:0%
Factory and pass it for instance or
 

01:14:42.910 --> 01:14:44.970 align:start position:0%
Factory and pass it for instance or
factory<01:14:43.690><c> method</c><01:14:44.050><c> to</c><01:14:44.200><c> the</c><01:14:44.350><c> to</c><01:14:44.500><c> the</c><01:14:44.650><c> factory</c>

01:14:44.970 --> 01:14:44.980 align:start position:0%
factory method to the to the factory
 

01:14:44.980 --> 01:14:48.800 align:start position:0%
factory method to the to the factory
class<01:14:45.250><c> itself</c><01:14:45.690><c> so</c><01:14:46.690><c> this</c><01:14:47.080><c> create</c><01:14:47.740><c> method</c><01:14:48.130><c> here</c>

01:14:48.800 --> 01:14:48.810 align:start position:0%
class itself so this create method here
 

01:14:48.810 --> 01:14:51.240 align:start position:0%
class itself so this create method here
with<01:14:49.810><c> a</c><01:14:49.840><c> static</c><01:14:50.260><c> method</c><01:14:50.440><c> of</c><01:14:50.710><c> the</c><01:14:50.830><c> factory</c>

01:14:51.240 --> 01:14:51.250 align:start position:0%
with a static method of the factory
 

01:14:51.250 --> 01:14:55.530 align:start position:0%
with a static method of the factory
class<01:14:52.590><c> we've</c><01:14:53.590><c> been</c><01:14:53.800><c> doing</c><01:14:54.250><c> that</c><01:14:54.400><c> to</c><01:14:55.300><c> return</c>

01:14:55.530 --> 01:14:55.540 align:start position:0%
class we've been doing that to return
 

01:14:55.540 --> 01:15:07.020 align:start position:0%
class we've been doing that to return
the<01:14:55.660><c> factory</c><01:15:02.850><c> the</c><01:15:03.850><c> factory</c><01:15:04.060><c> it</c><01:15:04.990><c> takes</c><01:15:05.880><c> what</c><01:15:06.880><c> is</c>

01:15:07.020 --> 01:15:07.030 align:start position:0%
the factory the factory it takes what is
 

01:15:07.030 --> 01:15:09.600 align:start position:0%
the factory the factory it takes what is
this<01:15:07.240><c> it</c><01:15:07.870><c> takes</c><01:15:08.050><c> a</c><01:15:08.230><c> car</c><01:15:08.440><c> as</c><01:15:08.560><c> a</c><01:15:08.590><c> parameter</c><01:15:08.890><c> and</c>

01:15:09.600 --> 01:15:09.610 align:start position:0%
this it takes a car as a parameter and
 

01:15:09.610 --> 01:15:11.670 align:start position:0%
this it takes a car as a parameter and
return<01:15:10.000><c> this</c><01:15:10.180><c> code</c><01:15:10.480><c> zero</c><01:15:10.990><c> so</c><01:15:11.320><c> this</c><01:15:11.470><c> is</c><01:15:11.650><c> a</c>

01:15:11.670 --> 01:15:11.680 align:start position:0%
return this code zero so this is a
 

01:15:11.680 --> 01:15:13.830 align:start position:0%
return this code zero so this is a
function<01:15:12.160><c> takes</c><01:15:12.790><c> an</c><01:15:12.940><c> object</c><01:15:13.030><c> return</c><01:15:13.750><c> an</c>

01:15:13.830 --> 01:15:13.840 align:start position:0%
function takes an object return an
 

01:15:13.840 --> 01:15:21.600 align:start position:0%
function takes an object return an
object<01:15:13.960><c> of</c><01:15:14.590><c> a</c><01:15:14.830><c> node</c><01:15:14.980><c> type</c><01:15:19.230><c> create</c><01:15:20.460><c> takes</c><01:15:21.460><c> a</c>

01:15:21.600 --> 01:15:21.610 align:start position:0%
object of a node type create takes a
 

01:15:21.610 --> 01:15:25.290 align:start position:0%
object of a node type create takes a
function<01:15:23.340><c> we</c><01:15:24.340><c> are</c><01:15:24.430><c> going</c><01:15:24.610><c> to</c><01:15:24.730><c> make</c><01:15:24.880><c> it</c><01:15:25.060><c> with</c>

01:15:25.290 --> 01:15:25.300 align:start position:0%
function we are going to make it with
 

01:15:25.300 --> 01:15:28.050 align:start position:0%
function we are going to make it with
this<01:15:26.260><c> is</c><01:15:26.410><c> a</c><01:15:26.440><c> factory</c><01:15:26.830><c> circle</c><01:15:27.400><c> right</c><01:15:27.550><c> so</c><01:15:27.880><c> I'm</c>

01:15:28.050 --> 01:15:28.060 align:start position:0%
this is a factory circle right so I'm
 

01:15:28.060 --> 01:15:29.730 align:start position:0%
this is a factory circle right so I'm
going<01:15:28.210><c> to</c><01:15:28.300><c> write</c><01:15:28.690><c> it</c><01:15:28.840><c> like</c><01:15:28.990><c> that</c><01:15:29.050><c> it</c><01:15:29.470><c> should</c><01:15:29.590><c> be</c>

01:15:29.730 --> 01:15:29.740 align:start position:0%
going to write it like that it should be
 

01:15:29.740 --> 01:15:30.210 align:start position:0%
going to write it like that it should be
easier

01:15:30.210 --> 01:15:30.220 align:start position:0%
easier
 

01:15:30.220 --> 01:15:34.890 align:start position:0%
easier
it<01:15:31.060><c> takes</c><01:15:31.300><c> a</c><01:15:31.420><c> color</c><01:15:31.660><c> as</c><01:15:32.380><c> a</c><01:15:32.440><c> parameter</c><01:15:33.540><c> and</c><01:15:34.540><c> the</c>

01:15:34.890 --> 01:15:34.900 align:start position:0%
it takes a color as a parameter and the
 

01:15:34.900 --> 01:15:39.540 align:start position:0%
it takes a color as a parameter and the
circle<01:15:36.330><c> my</c><01:15:37.330><c> circle</c><01:15:37.780><c> and</c><01:15:37.960><c> this</c><01:15:38.710><c> is</c><01:15:38.890><c> in</c><01:15:39.010><c> fact</c><01:15:39.190><c> my</c>

01:15:39.540 --> 01:15:39.550 align:start position:0%
circle my circle and this is in fact my
 

01:15:39.550 --> 01:15:43.350 align:start position:0%
circle my circle and this is in fact my
constructor<01:15:40.080><c> and</c><01:15:41.080><c> take</c><01:15:42.040><c> a</c><01:15:42.520><c> color</c><01:15:43.000><c> as</c><01:15:43.300><c> a</c>

01:15:43.350 --> 01:15:43.360 align:start position:0%
constructor and take a color as a
 

01:15:43.360 --> 01:15:47.460 align:start position:0%
constructor and take a color as a
parameter<01:15:43.630><c> and</c><01:15:45.000><c> it</c><01:15:46.000><c> should</c><01:15:46.240><c> be</c><01:15:46.420><c> I'm</c><01:15:47.050><c> going</c><01:15:47.350><c> to</c>

01:15:47.460 --> 01:15:47.470 align:start position:0%
parameter and it should be I'm going to
 

01:15:47.470 --> 01:15:50.280 align:start position:0%
parameter and it should be I'm going to
return<01:15:47.710><c> there</c><01:15:47.950><c> here</c><01:15:48.220><c> and</c><01:15:48.900><c> it</c><01:15:49.900><c> should</c><01:15:50.110><c> it</c>

01:15:50.280 --> 01:15:50.290 align:start position:0%
return there here and it should it
 

01:15:50.290 --> 01:15:55.500 align:start position:0%
return there here and it should it
should<01:15:50.320><c> return</c><01:15:53.160><c> and</c><01:15:54.160><c> this</c><01:15:54.820><c> should</c><01:15:55.060><c> return</c><01:15:55.330><c> the</c>

01:15:55.500 --> 01:15:55.510 align:start position:0%
should return and this should return the
 

01:15:55.510 --> 01:15:57.930 align:start position:0%
should return and this should return the
factory<01:15:55.980><c> that</c><01:15:56.980><c> is</c><01:15:57.130><c> something</c><01:15:57.550><c> that</c><01:15:57.760><c> doesn't</c>

01:15:57.930 --> 01:15:57.940 align:start position:0%
factory that is something that doesn't
 

01:15:57.940 --> 01:16:01.920 align:start position:0%
factory that is something that doesn't
take<01:15:58.240><c> any</c><01:15:59.340><c> argument</c><01:16:00.340><c> and</c><01:16:00.550><c> returns</c><01:16:01.270><c> a</c><01:16:01.480><c> factory</c>

01:16:01.920 --> 01:16:01.930 align:start position:0%
take any argument and returns a factory
 

01:16:01.930 --> 01:16:06.870 align:start position:0%
take any argument and returns a factory
of<01:16:02.460><c> circle</c><01:16:03.460><c> so</c><01:16:04.300><c> for</c><01:16:04.450><c> that</c><01:16:04.540><c> I</c><01:16:04.900><c> need</c><01:16:05.170><c> to</c><01:16:05.610><c> in</c><01:16:06.610><c> fact</c>

01:16:06.870 --> 01:16:06.880 align:start position:0%
of circle so for that I need to in fact
 

01:16:06.880 --> 01:16:10.110 align:start position:0%
of circle so for that I need to in fact
take<01:16:07.090><c> my</c><01:16:07.270><c> constructor</c><01:16:07.840><c> and</c><01:16:08.050><c> apply</c><01:16:08.980><c> the</c><01:16:09.850><c> color</c>

01:16:10.110 --> 01:16:10.120 align:start position:0%
take my constructor and apply the color
 

01:16:10.120 --> 01:16:14.850 align:start position:0%
take my constructor and apply the color
to<01:16:10.480><c> that</c><01:16:11.380><c> function</c><01:16:13.140><c> here</c><01:16:14.140><c> what</c><01:16:14.380><c> I</c><01:16:14.410><c> did</c><01:16:14.680><c> is</c><01:16:14.830><c> a</c>

01:16:14.850 --> 01:16:14.860 align:start position:0%
to that function here what I did is a
 

01:16:14.860 --> 01:16:17.130 align:start position:0%
to that function here what I did is a
very<01:16:15.130><c> important</c><01:16:15.880><c> portent</c><01:16:16.210><c> operation</c><01:16:16.810><c> I</c><01:16:16.960><c> took</c>

01:16:17.130 --> 01:16:17.140 align:start position:0%
very important portent operation I took
 

01:16:17.140 --> 01:16:20.940 align:start position:0%
very important portent operation I took
a<01:16:17.410><c> function</c><01:16:17.950><c> and</c><01:16:18.250><c> made</c><01:16:18.730><c> it</c><01:16:18.910><c> the</c><01:16:19.600><c> supplier</c><01:16:19.990><c> by</c>

01:16:20.940 --> 01:16:20.950 align:start position:0%
a function and made it the supplier by
 

01:16:20.950 --> 01:16:23.400 align:start position:0%
a function and made it the supplier by
fixing<01:16:21.490><c> the</c><01:16:21.910><c> parameter</c><01:16:22.420><c> of</c><01:16:22.780><c> that</c><01:16:22.960><c> function</c>

01:16:23.400 --> 01:16:23.410 align:start position:0%
fixing the parameter of that function
 

01:16:23.410 --> 01:16:26.450 align:start position:0%
fixing the parameter of that function
right<01:16:24.070><c> and</c><01:16:24.310><c> this</c><01:16:25.090><c> is</c><01:16:25.270><c> the</c><01:16:25.390><c> second</c><01:16:25.720><c> fundamental</c>

01:16:26.450 --> 01:16:26.460 align:start position:0%
right and this is the second fundamental
 

01:16:26.460 --> 01:16:28.530 align:start position:0%
right and this is the second fundamental
operation<01:16:27.460><c> in</c><01:16:27.580><c> functional</c><01:16:28.030><c> programming</c><01:16:28.060><c> the</c>

01:16:28.530 --> 01:16:28.540 align:start position:0%
operation in functional programming the
 

01:16:28.540 --> 01:16:30.690 align:start position:0%
operation in functional programming the
first<01:16:28.780><c> one</c><01:16:28.930><c> is</c><01:16:29.080><c> composition</c><01:16:29.710><c> and</c><01:16:29.890><c> the</c><01:16:30.370><c> second</c>

01:16:30.690 --> 01:16:30.700 align:start position:0%
first one is composition and the second
 

01:16:30.700 --> 01:16:32.850 align:start position:0%
first one is composition and the second
one<01:16:30.880><c> is</c><01:16:31.360><c> partial</c><01:16:31.870><c> application</c><01:16:31.990><c> what</c><01:16:32.710><c> I've</c>

01:16:32.850 --> 01:16:32.860 align:start position:0%
one is partial application what I've
 

01:16:32.860 --> 01:16:34.530 align:start position:0%
one is partial application what I've
done<01:16:33.010><c> here</c><01:16:33.340><c> is</c><01:16:33.400><c> a</c><01:16:33.520><c> partial</c><01:16:33.820><c> application</c><01:16:34.060><c> on</c>

01:16:34.530 --> 01:16:34.540 align:start position:0%
done here is a partial application on
 

01:16:34.540 --> 01:16:36.600 align:start position:0%
done here is a partial application on
function<01:16:34.990><c> to</c><01:16:35.770><c> lower</c><01:16:35.980><c> the</c><01:16:36.280><c> number</c><01:16:36.400><c> of</c>

01:16:36.600 --> 01:16:36.610 align:start position:0%
function to lower the number of
 

01:16:36.610 --> 01:16:39.240 align:start position:0%
function to lower the number of
parameters<01:16:37.240><c> that</c><01:16:37.480><c> function</c><01:16:38.020><c> take</c><01:16:38.250><c> dates</c>

01:16:39.240 --> 01:16:39.250 align:start position:0%
parameters that function take dates
 

01:16:39.250 --> 01:16:42.450 align:start position:0%
parameters that function take dates
since<01:16:39.850><c> this</c><01:16:40.180><c> function</c><01:16:40.390><c> take</c><01:16:41.320><c> takes</c><01:16:41.890><c> only</c><01:16:42.220><c> one</c>

01:16:42.450 --> 01:16:42.460 align:start position:0%
since this function take takes only one
 

01:16:42.460 --> 01:16:46.500 align:start position:0%
since this function take takes only one
parameter<01:16:42.640><c> blowing</c><01:16:43.600><c> it</c><01:16:44.970><c> give</c><01:16:45.970><c> me</c><01:16:46.120><c> a</c><01:16:46.150><c> supplier</c>

01:16:46.500 --> 01:16:46.510 align:start position:0%
parameter blowing it give me a supplier
 

01:16:46.510 --> 01:16:47.370 align:start position:0%
parameter blowing it give me a supplier
and<01:16:46.750><c> this</c>

01:16:47.370 --> 01:16:47.380 align:start position:0%
and this
 

01:16:47.380 --> 01:16:51.090 align:start position:0%
and this
exactly<01:16:47.679><c> what</c><01:16:47.800><c> I</c><01:16:47.830><c> did</c><01:16:48.719><c> so</c><01:16:49.719><c> now</c><01:16:49.840><c> my</c><01:16:49.929><c> factory</c><01:16:50.350><c> can</c>

01:16:51.090 --> 01:16:51.100 align:start position:0%
exactly what I did so now my factory can
 

01:16:51.100 --> 01:16:52.979 align:start position:0%
exactly what I did so now my factory can
be<01:16:51.219><c> returned</c><01:16:51.489><c> I</c><01:16:51.520><c> that</c><01:16:51.760><c> it's</c><01:16:52.270><c> still</c><01:16:52.449><c> working</c><01:16:52.840><c> by</c>

01:16:52.979 --> 01:16:52.989 align:start position:0%
be returned I that it's still working by
 

01:16:52.989 --> 01:16:56.430 align:start position:0%
be returned I that it's still working by
the<01:16:53.050><c> way</c><01:16:53.139><c> okay</c><01:16:53.860><c> which</c><01:16:54.790><c> is</c><01:16:54.940><c> great</c><01:16:55.179><c> and</c><01:16:55.570><c> since</c>

01:16:56.430 --> 01:16:56.440 align:start position:0%
the way okay which is great and since
 

01:16:56.440 --> 01:17:00.750 align:start position:0%
the way okay which is great and since
this<01:16:57.070><c> is</c><01:16:57.370><c> also</c><01:16:58.120><c> a</c><01:16:58.690><c> method</c><01:16:59.230><c> reference</c><01:16:59.560><c> I</c><01:16:59.830><c> can</c>

01:17:00.750 --> 01:17:00.760 align:start position:0%
this is also a method reference I can
 

01:17:00.760 --> 01:17:03.560 align:start position:0%
this is also a method reference I can
write<01:17:00.969><c> it</c><01:17:01.120><c> like</c><01:17:01.239><c> that</c><01:17:01.380><c> and</c><01:17:02.380><c> it</c><01:17:02.560><c> gives</c><01:17:02.739><c> me</c><01:17:02.889><c> a</c>

01:17:03.560 --> 01:17:03.570 align:start position:0%
write it like that and it gives me a
 

01:17:03.570 --> 01:17:06.090 align:start position:0%
write it like that and it gives me a
very<01:17:04.570><c> clean</c><01:17:04.870><c> pattern</c><01:17:05.199><c> because</c><01:17:05.500><c> if</c><01:17:05.620><c> I</c><01:17:05.800><c> if</c><01:17:05.949><c> I</c>

01:17:06.090 --> 01:17:06.100 align:start position:0%
very clean pattern because if I if I
 

01:17:06.100 --> 01:17:08.430 align:start position:0%
very clean pattern because if I if I
compare<01:17:07.060><c> the</c><01:17:07.239><c> two</c><01:17:07.360><c> patterns</c><01:17:07.540><c> here</c><01:17:08.050><c> I've</c><01:17:08.230><c> got</c>

01:17:08.430 --> 01:17:08.440 align:start position:0%
compare the two patterns here I've got
 

01:17:08.440 --> 01:17:11.669 align:start position:0%
compare the two patterns here I've got
this<01:17:08.969><c> circled</c><01:17:09.969><c> column</c><01:17:10.360><c> column</c><01:17:10.540><c> new</c><01:17:10.870><c> on</c><01:17:11.199><c> both</c>

01:17:11.669 --> 01:17:11.679 align:start position:0%
this circled column column new on both
 

01:17:11.679 --> 01:17:13.350 align:start position:0%
this circled column column new on both
on<01:17:11.889><c> both</c><01:17:11.920><c> sides</c><01:17:12.400><c> even</c><01:17:12.730><c> if</c><01:17:12.880><c> it</c><01:17:13.030><c> does</c><01:17:13.210><c> not</c>

01:17:13.350 --> 01:17:13.360 align:start position:0%
on both sides even if it does not
 

01:17:13.360 --> 01:17:16.709 align:start position:0%
on both sides even if it does not
represent<01:17:13.650><c> the</c><01:17:14.650><c> same</c><01:17:14.860><c> thing</c><01:17:15.360><c> this</c><01:17:16.360><c> is</c><01:17:16.540><c> some</c>

01:17:16.709 --> 01:17:16.719 align:start position:0%
represent the same thing this is some
 

01:17:16.719 --> 01:17:21.090 align:start position:0%
represent the same thing this is some
kind<01:17:16.960><c> of</c><01:17:18.750><c> trap</c><01:17:19.750><c> with</c><01:17:20.080><c> method</c><01:17:20.409><c> references</c><01:17:20.949><c> is</c>

01:17:21.090 --> 01:17:21.100 align:start position:0%
kind of trap with method references is
 

01:17:21.100 --> 01:17:23.370 align:start position:0%
kind of trap with method references is
that<01:17:21.280><c> if</c><01:17:21.460><c> you</c><01:17:21.610><c> do</c><01:17:21.760><c> not</c><01:17:21.880><c> know</c><01:17:22.120><c> the</c><01:17:22.270><c> type</c><01:17:22.510><c> of</c><01:17:22.840><c> a</c>

01:17:23.370 --> 01:17:23.380 align:start position:0%
that if you do not know the type of a
 

01:17:23.380 --> 01:17:27.169 align:start position:0%
that if you do not know the type of a
method<01:17:23.650><c> reference</c><01:17:24.070><c> you</c><01:17:24.850><c> cannot</c><01:17:25.449><c> really</c><01:17:26.320><c> know</c>

01:17:27.169 --> 01:17:27.179 align:start position:0%
method reference you cannot really know
 

01:17:27.179 --> 01:17:29.669 align:start position:0%
method reference you cannot really know
what<01:17:28.179><c> is</c><01:17:28.360><c> this</c><01:17:28.510><c> method</c><01:17:28.750><c> reference</c><01:17:29.260><c> exactly</c>

01:17:29.669 --> 01:17:29.679 align:start position:0%
what is this method reference exactly
 

01:17:29.679 --> 01:17:32.399 align:start position:0%
what is this method reference exactly
you<01:17:30.250><c> see</c><01:17:30.429><c> here</c><01:17:31.090><c> I've</c><01:17:31.360><c> got</c><01:17:31.600><c> a</c><01:17:31.630><c> method</c><01:17:31.870><c> reference</c>

01:17:32.399 --> 01:17:32.409 align:start position:0%
you see here I've got a method reference
 

01:17:32.409 --> 01:17:35.580 align:start position:0%
you see here I've got a method reference
that<01:17:33.100><c> is</c><01:17:33.219><c> the</c><01:17:33.340><c> supplier</c><01:17:33.699><c> and</c><01:17:34.350><c> here</c><01:17:35.350><c> this</c><01:17:35.530><c> is</c>

01:17:35.580 --> 01:17:35.590 align:start position:0%
that is the supplier and here this is
 

01:17:35.590 --> 01:17:37.290 align:start position:0%
that is the supplier and here this is
the<01:17:35.889><c> same</c><01:17:36.250><c> method</c><01:17:36.489><c> reference</c><01:17:36.969><c> the</c><01:17:37.090><c> same</c>

01:17:37.290 --> 01:17:37.300 align:start position:0%
the same method reference the same
 

01:17:37.300 --> 01:17:39.419 align:start position:0%
the same method reference the same
string<01:17:37.929><c> of</c><01:17:38.080><c> characters</c><01:17:38.350><c> for</c><01:17:38.830><c> the</c><01:17:38.949><c> reference</c>

01:17:39.419 --> 01:17:39.429 align:start position:0%
string of characters for the reference
 

01:17:39.429 --> 01:17:41.430 align:start position:0%
string of characters for the reference
but<01:17:40.030><c> it's</c><01:17:40.210><c> a</c><01:17:40.300><c> function</c><01:17:40.690><c> it's</c><01:17:40.929><c> not</c><01:17:41.110><c> the</c><01:17:41.230><c> same</c>

01:17:41.430 --> 01:17:41.440 align:start position:0%
but it's a function it's not the same
 

01:17:41.440 --> 01:17:43.169 align:start position:0%
but it's a function it's not the same
type<01:17:41.620><c> and</c><01:17:41.949><c> it</c><01:17:42.100><c> does</c><01:17:42.250><c> not</c><01:17:42.400><c> do</c><01:17:42.610><c> the</c><01:17:42.760><c> same</c><01:17:42.969><c> thing</c>

01:17:43.169 --> 01:17:43.179 align:start position:0%
type and it does not do the same thing
 

01:17:43.179 --> 01:17:47.040 align:start position:0%
type and it does not do the same thing
right<01:17:44.020><c> if</c><01:17:44.560><c> I</c><01:17:44.770><c> control</c><01:17:45.130><c> click</c><01:17:45.400><c> on</c><01:17:46.239><c> this</c><01:17:46.690><c> new</c>

01:17:47.040 --> 01:17:47.050 align:start position:0%
right if I control click on this new
 

01:17:47.050 --> 01:17:49.830 align:start position:0%
right if I control click on this new
here<01:17:47.710><c> it</c><01:17:48.580><c> will</c><01:17:48.730><c> take</c><01:17:48.909><c> me</c><01:17:49.120><c> to</c><01:17:49.300><c> the</c><01:17:49.420><c> empty</c>

01:17:49.830 --> 01:17:49.840 align:start position:0%
here it will take me to the empty
 

01:17:49.840 --> 01:17:52.350 align:start position:0%
here it will take me to the empty
constructor<01:17:50.139><c> of</c><01:17:50.650><c> the</c><01:17:50.980><c> circle</c><01:17:51.370><c> doesn't</c><01:17:52.210><c> take</c>

01:17:52.350 --> 01:17:52.360 align:start position:0%
constructor of the circle doesn't take
 

01:17:52.360 --> 01:17:54.750 align:start position:0%
constructor of the circle doesn't take
any<01:17:52.510><c> parameter</c><01:17:52.860><c> written</c><01:17:53.860><c> something</c><01:17:54.250><c> this</c><01:17:54.550><c> is</c>

01:17:54.750 --> 01:17:54.760 align:start position:0%
any parameter written something this is
 

01:17:54.760 --> 01:17:59.540 align:start position:0%
any parameter written something this is
a<01:17:54.790><c> supplier</c><01:17:55.150><c> and</c><01:17:55.420><c> if</c><01:17:56.230><c> I</c><01:17:56.380><c> check</c><01:17:57.719><c> this</c><01:17:58.719><c> other</c>

01:17:59.540 --> 01:17:59.550 align:start position:0%
a supplier and if I check this other
 

01:17:59.550 --> 01:18:01.890 align:start position:0%
a supplier and if I check this other
method<01:18:00.550><c> reference</c><01:18:01.030><c> here</c><01:18:01.239><c> if</c><01:18:01.300><c> I</c><01:18:01.420><c> control</c><01:18:01.810><c> click</c>

01:18:01.890 --> 01:18:01.900 align:start position:0%
method reference here if I control click
 

01:18:01.900 --> 01:18:04.379 align:start position:0%
method reference here if I control click
on<01:18:02.110><c> this</c><01:18:02.320><c> new</c><01:18:02.679><c> object</c><01:18:02.980><c> here</c><01:18:03.400><c> a</c><01:18:03.429><c> new</c><01:18:03.760><c> code</c><01:18:04.060><c> here</c>

01:18:04.379 --> 01:18:04.389 align:start position:0%
on this new object here a new code here
 

01:18:04.389 --> 01:18:06.030 align:start position:0%
on this new object here a new code here
it<01:18:04.810><c> takes</c><01:18:05.050><c> me</c><01:18:05.260><c> to</c><01:18:05.409><c> the</c><01:18:05.530><c> constructor</c><01:18:06.010><c> that</c>

01:18:06.030 --> 01:18:06.040 align:start position:0%
it takes me to the constructor that
 

01:18:06.040 --> 01:18:08.129 align:start position:0%
it takes me to the constructor that
takes<01:18:06.190><c> a</c><01:18:06.550><c> parameter</c><01:18:06.780><c> because</c><01:18:07.780><c> the</c><01:18:07.900><c> type</c><01:18:08.110><c> of</c>

01:18:08.129 --> 01:18:08.139 align:start position:0%
takes a parameter because the type of
 

01:18:08.139 --> 01:18:10.160 align:start position:0%
takes a parameter because the type of
this<01:18:08.440><c> method</c><01:18:08.800><c> reference</c><01:18:09.159><c> is</c><01:18:09.460><c> not</c><01:18:09.699><c> the</c><01:18:09.790><c> same</c>

01:18:10.160 --> 01:18:10.170 align:start position:0%
this method reference is not the same
 

01:18:10.170 --> 01:18:13.050 align:start position:0%
this method reference is not the same
okay<01:18:11.170><c> how</c><01:18:11.889><c> do</c><01:18:11.949><c> I</c><01:18:12.219><c> know</c><01:18:12.489><c> that</c><01:18:12.670><c> it's</c><01:18:12.850><c> not</c><01:18:13.000><c> the</c>

01:18:13.050 --> 01:18:13.060 align:start position:0%
okay how do I know that it's not the
 

01:18:13.060 --> 01:18:15.720 align:start position:0%
okay how do I know that it's not the
same<01:18:13.360><c> because</c><01:18:14.080><c> this</c><01:18:14.260><c> create</c><01:18:14.800><c> method</c><01:18:15.429><c> here</c>

01:18:15.720 --> 01:18:15.730 align:start position:0%
same because this create method here
 

01:18:15.730 --> 01:18:19.020 align:start position:0%
same because this create method here
takes<01:18:16.389><c> a</c><01:18:16.510><c> function</c><01:18:16.690><c> and</c><01:18:17.350><c> not</c><01:18:17.500><c> to</c><01:18:17.650><c> survive</c><01:18:18.030><c> this</c>

01:18:19.020 --> 01:18:19.030 align:start position:0%
takes a function and not to survive this
 

01:18:19.030 --> 01:18:21.720 align:start position:0%
takes a function and not to survive this
is<01:18:19.239><c> whatever</c><01:18:19.420><c> the</c><01:18:19.840><c> trick</c><01:18:20.080><c> is</c><01:18:20.250><c> so</c><01:18:21.250><c> be</c><01:18:21.400><c> careful</c>

01:18:21.720 --> 01:18:21.730 align:start position:0%
is whatever the trick is so be careful
 

01:18:21.730 --> 01:18:28.110 align:start position:0%
is whatever the trick is so be careful
with<01:18:21.820><c> those</c><01:18:22.030><c> metal</c><01:18:22.210><c> references</c>

01:18:28.110 --> 01:18:28.120 align:start position:0%
 
 

01:18:28.120 --> 01:18:30.880 align:start position:0%
 
okay<01:18:29.420><c> I</c><01:18:29.450><c> think</c><01:18:30.020><c> we're</c><01:18:30.170><c> done</c><01:18:30.260><c> with</c><01:18:30.320><c> the</c><01:18:30.530><c> factory</c>

01:18:30.880 --> 01:18:30.890 align:start position:0%
okay I think we're done with the factory
 

01:18:30.890 --> 01:18:36.880 align:start position:0%
okay I think we're done with the factory
that's<01:18:31.400><c> on</c><01:18:35.020><c> ya</c><01:18:36.020><c> the</c><01:18:36.290><c> next</c><01:18:36.320><c> pattern</c><01:18:36.620><c> I</c><01:18:36.770><c> would</c>

01:18:36.880 --> 01:18:36.890 align:start position:0%
that's on ya the next pattern I would
 

01:18:36.890 --> 01:18:39.240 align:start position:0%
that's on ya the next pattern I would
like<01:18:37.040><c> to</c><01:18:37.160><c> show</c><01:18:37.340><c> you</c><01:18:37.370><c> is</c><01:18:37.790><c> the</c><01:18:38.000><c> registry</c><01:18:38.810><c> and</c>

01:18:39.240 --> 01:18:39.250 align:start position:0%
like to show you is the registry and
 

01:18:39.250 --> 01:18:43.780 align:start position:0%
like to show you is the registry and
under<01:18:40.250><c> builder</c><01:18:40.610><c> pattern</c><01:18:42.340><c> the</c><01:18:43.340><c> register</c>

01:18:43.780 --> 01:18:43.790 align:start position:0%
under builder pattern the register
 

01:18:43.790 --> 01:18:45.270 align:start position:0%
under builder pattern the register
button<01:18:43.940><c> is</c><01:18:44.180><c> a</c><01:18:44.210><c> very</c><01:18:44.450><c> nice</c><01:18:44.630><c> pattern</c>

01:18:45.270 --> 01:18:45.280 align:start position:0%
button is a very nice pattern
 

01:18:45.280 --> 01:18:58.180 align:start position:0%
button is a very nice pattern
yeah<01:18:46.280><c> demo</c><01:18:46.610><c> time</c><01:18:46.820><c> once</c><01:18:47.120><c> again</c><01:18:56.530><c> so</c><01:18:57.530><c> this</c><01:18:57.980><c> time</c>

01:18:58.180 --> 01:18:58.190 align:start position:0%
yeah demo time once again so this time
 

01:18:58.190 --> 01:19:00.340 align:start position:0%
yeah demo time once again so this time
what<01:18:58.310><c> I</c><01:18:58.370><c> want</c><01:18:58.610><c> to</c><01:18:58.730><c> do</c><01:18:58.880><c> is</c><01:18:59.240><c> to</c><01:18:59.600><c> create</c><01:18:59.780><c> a</c>

01:19:00.340 --> 01:19:00.350 align:start position:0%
what I want to do is to create a
 

01:19:00.350 --> 01:19:02.830 align:start position:0%
what I want to do is to create a
registry<01:19:01.340><c> fact</c><01:19:01.610><c> a</c><01:19:01.700><c> factory</c><01:19:02.060><c> that</c><01:19:02.300><c> will</c><01:19:02.480><c> create</c>

01:19:02.830 --> 01:19:02.840 align:start position:0%
registry fact a factory that will create
 

01:19:02.840 --> 01:19:06.820 align:start position:0%
registry fact a factory that will create
instances<01:19:03.710><c> of</c><01:19:03.860><c> objects</c><01:19:05.020><c> with</c><01:19:06.020><c> providing</c><01:19:06.620><c> some</c>

01:19:06.820 --> 01:19:06.830 align:start position:0%
instances of objects with providing some
 

01:19:06.830 --> 01:19:08.860 align:start position:0%
instances of objects with providing some
kind<01:19:07.040><c> of</c><01:19:07.100><c> key</c><01:19:07.460><c> to</c><01:19:07.790><c> say</c><01:19:07.970><c> alright</c><01:19:08.150><c> what</c><01:19:08.510><c> I</c><01:19:08.570><c> want</c>

01:19:08.860 --> 01:19:08.870 align:start position:0%
kind of key to say alright what I want
 

01:19:08.870 --> 01:19:11.050 align:start position:0%
kind of key to say alright what I want
is<01:19:08.990><c> a</c><01:19:09.020><c> circle</c><01:19:09.560><c> what</c><01:19:09.710><c> I</c><01:19:09.740><c> want</c><01:19:09.980><c> is</c><01:19:10.130><c> a</c><01:19:10.160><c> triangle</c>

01:19:11.050 --> 01:19:11.060 align:start position:0%
is a circle what I want is a triangle
 

01:19:11.060 --> 01:19:12.550 align:start position:0%
is a circle what I want is a triangle
what<01:19:11.270><c> I</c><01:19:11.300><c> want</c><01:19:11.510><c> is</c><01:19:11.630><c> a</c><01:19:11.660><c> square</c><01:19:12.020><c> something</c><01:19:12.410><c> like</c>

01:19:12.550 --> 01:19:12.560 align:start position:0%
what I want is a square something like
 

01:19:12.560 --> 01:19:15.930 align:start position:0%
what I want is a square something like
that<01:19:12.790><c> if</c><01:19:13.790><c> I</c><01:19:13.940><c> if</c><01:19:14.120><c> I</c><01:19:14.270><c> do</c><01:19:14.330><c> this</c><01:19:14.600><c> kind</c><01:19:14.810><c> of</c><01:19:14.930><c> thing</c><01:19:15.200><c> I</c>

01:19:15.930 --> 01:19:15.940 align:start position:0%
that if I if I do this kind of thing I
 

01:19:15.940 --> 01:19:19.270 align:start position:0%
that if I if I do this kind of thing I
probably<01:19:16.940><c> end</c><01:19:17.240><c> up</c><01:19:17.500><c> writing</c><01:19:18.500><c> this</c><01:19:18.920><c> kind</c><01:19:19.190><c> of</c>

01:19:19.270 --> 01:19:19.280 align:start position:0%
probably end up writing this kind of
 

01:19:19.280 --> 01:19:34.470 align:start position:0%
probably end up writing this kind of
code<01:19:22.840><c> switch</c><01:19:24.160><c> key</c><01:19:25.930><c> if</c><01:19:26.930><c> my</c><01:19:27.230><c> key</c><01:19:27.530><c> is</c><01:19:28.190><c> a</c><01:19:31.960><c> circle</c>

01:19:34.470 --> 01:19:34.480 align:start position:0%
code switch key if my key is a circle
 

01:19:34.480 --> 01:19:36.610 align:start position:0%
code switch key if my key is a circle
that<01:19:35.480><c> I</c><01:19:35.540><c> know</c><01:19:35.720><c> what</c><01:19:35.900><c> I</c><01:19:35.930><c> want</c><01:19:36.140><c> to</c><01:19:36.230><c> do</c><01:19:36.380><c> is</c><01:19:36.470><c> to</c>

01:19:36.610 --> 01:19:36.620 align:start position:0%
that I know what I want to do is to
 

01:19:36.620 --> 01:19:42.580 align:start position:0%
that I know what I want to do is to
return<01:19:38.800><c> I'm</c><01:19:39.800><c> returning</c><01:19:40.190><c> a</c><01:19:40.400><c> factory</c><01:19:40.850><c> right</c><01:19:41.590><c> new</c>

01:19:42.580 --> 01:19:42.590 align:start position:0%
return I'm returning a factory right new
 

01:19:42.590 --> 01:19:47.500 align:start position:0%
return I'm returning a factory right new
circle<01:19:43.930><c> if</c><01:19:45.160><c> what</c><01:19:46.160><c> I'm</c><01:19:46.280><c> getting</c><01:19:46.640><c> is</c><01:19:46.820><c> a</c><01:19:46.850><c> triangle</c>

01:19:47.500 --> 01:19:47.510 align:start position:0%
circle if what I'm getting is a triangle
 

01:19:47.510 --> 01:19:55.750 align:start position:0%
circle if what I'm getting is a triangle
I<01:19:50.410><c> want</c><01:19:51.410><c> to</c><01:19:51.560><c> return</c><01:19:51.890><c> a</c><01:19:52.160><c> factory</c><01:19:52.810><c> triangle</c><01:19:54.760><c> it's</c>

01:19:55.750 --> 01:19:55.760 align:start position:0%
I want to return a factory triangle it's
 

01:19:55.760 --> 01:20:05.350 align:start position:0%
I want to return a factory triangle it's
this<01:19:56.000><c> one</c><01:19:56.240><c> and</c><01:19:56.770><c> if</c><01:19:57.770><c> I</c><01:19:57.980><c> get</c><01:19:58.580><c> a</c><01:19:59.030><c> square</c><01:20:04.030><c> or</c><01:20:05.030><c> I</c><01:20:05.090><c> want</c>

01:20:05.350 --> 01:20:05.360 align:start position:0%
this one and if I get a square or I want
 

01:20:05.360 --> 01:20:09.290 align:start position:0%
this one and if I get a square or I want
to<01:20:05.420><c> return</c>

01:20:09.290 --> 01:20:09.300 align:start position:0%
 
 

01:20:09.300 --> 01:20:30.720 align:start position:0%
 
he's<01:20:10.300><c> a</c><01:20:10.330><c> square</c>

01:20:30.720 --> 01:20:30.730 align:start position:0%
 
 

01:20:30.730 --> 01:20:34.500 align:start position:0%
 
it<01:20:31.270><c> should</c><01:20:31.450><c> be</c><01:20:31.570><c> a</c><01:20:31.600><c> shape</c><01:20:32.700><c> if</c><01:20:33.700><c> I</c><01:20:33.850><c> want</c><01:20:34.060><c> the</c><01:20:34.210><c> under</c>

01:20:34.500 --> 01:20:34.510 align:start position:0%
it should be a shape if I want the under
 

01:20:34.510 --> 01:20:37.800 align:start position:0%
it should be a shape if I want the under
default<01:20:34.930><c> right</c><01:20:35.890><c> the</c><01:20:36.070><c> default</c><01:20:36.460><c> and</c><01:20:37.000><c> if</c><01:20:37.150><c> I</c><01:20:37.300><c> don't</c>

01:20:37.800 --> 01:20:37.810 align:start position:0%
default right the default and if I don't
 

01:20:37.810 --> 01:20:39.270 align:start position:0%
default right the default and if I don't
have<01:20:37.930><c> anything</c><01:20:38.290><c> what</c><01:20:38.440><c> I</c><01:20:38.500><c> want</c><01:20:38.740><c> to</c><01:20:38.830><c> do</c><01:20:38.950><c> is</c><01:20:39.100><c> to</c>

01:20:39.270 --> 01:20:39.280 align:start position:0%
have anything what I want to do is to
 

01:20:39.280 --> 01:20:51.540 align:start position:0%
have anything what I want to do is to
throw<01:20:39.490><c> a</c><01:20:39.820><c> new</c><01:20:40.450><c> illegal</c><01:20:41.580><c> argument</c><01:20:42.580><c> exception</c>

01:20:51.540 --> 01:20:51.550 align:start position:0%
 
 

01:20:51.550 --> 01:21:06.790 align:start position:0%
 
there's<01:20:52.180><c> nothing</c>

01:21:06.790 --> 01:21:06.800 align:start position:0%
 
 

01:21:06.800 --> 01:21:12.440 align:start position:0%
 
that's<01:21:07.430><c> one</c><01:21:07.610><c> beer</c><01:21:07.790><c> factory</c><01:21:08.000><c> of</c><01:21:08.300><c> shape</c>

01:21:12.440 --> 01:21:12.450 align:start position:0%
 
 

01:21:12.450 --> 01:21:17.170 align:start position:0%
 
Meishan<01:21:13.320><c> this</c><01:21:14.160><c> one</c>

01:21:17.170 --> 01:21:17.180 align:start position:0%
 
 

01:21:17.180 --> 01:21:18.759 align:start position:0%
 
okay

01:21:18.759 --> 01:21:18.769 align:start position:0%
okay
 

01:21:18.769 --> 01:21:29.500 align:start position:0%
okay
so<01:21:19.670><c> this</c><01:21:20.119><c> is</c><01:21:20.300><c> something</c><01:21:26.289><c> okay</c><01:21:27.289><c> and</c><01:21:28.269><c> I'm</c><01:21:29.269><c> going</c>

01:21:29.500 --> 01:21:29.510 align:start position:0%
so this is something okay and I'm going
 

01:21:29.510 --> 01:21:40.229 align:start position:0%
so this is something okay and I'm going
to<01:21:34.150><c> yeah</c><01:21:35.349><c> so</c><01:21:37.360><c> here</c><01:21:38.360><c> I've</c><01:21:38.599><c> got</c><01:21:38.630><c> so</c><01:21:39.380><c> this</c><01:21:39.619><c> is</c><01:21:39.829><c> this</c>

01:21:40.229 --> 01:21:40.239 align:start position:0%
to yeah so here I've got so this is this
 

01:21:40.239 --> 01:21:43.209 align:start position:0%
to yeah so here I've got so this is this
one<01:21:41.239><c> so</c><01:21:41.869><c> here</c><01:21:42.170><c> I</c><01:21:42.199><c> want</c><01:21:42.380><c> to</c><01:21:42.499><c> create</c><01:21:42.769><c> my</c><01:21:42.949><c> shape</c>

01:21:43.209 --> 01:21:43.219 align:start position:0%
one so here I want to create my shape
 

01:21:43.219 --> 01:21:50.290 align:start position:0%
one so here I want to create my shape
factory<01:21:46.570><c> ship</c><01:21:47.570><c> back</c><01:21:47.780><c> to</c><01:21:47.809><c> your</c><01:21:48.110><c> shape</c><01:21:49.300><c> shape</c>

01:21:50.290 --> 01:21:50.300 align:start position:0%
factory ship back to your shape shape
 

01:21:50.300 --> 01:21:54.040 align:start position:0%
factory ship back to your shape shape
factor<01:21:50.719><c> in</c><01:21:50.900><c> equals</c><01:21:51.380><c> new</c><01:21:51.590><c> shape</c><01:21:52.340><c> factory</c><01:21:53.050><c> right</c>

01:21:54.040 --> 01:21:54.050 align:start position:0%
factor in equals new shape factory right
 

01:21:54.050 --> 01:21:59.250 align:start position:0%
factor in equals new shape factory right
and<01:21:54.889><c> if</c><01:21:55.010><c> I</c><01:21:55.159><c> call</c><01:21:55.400><c> shape</c><01:21:55.789><c> factory</c><01:21:56.949><c> so</c><01:21:58.030><c> create</c>

01:21:59.250 --> 01:21:59.260 align:start position:0%
and if I call shape factory so create
 

01:21:59.260 --> 01:22:11.919 align:start position:0%
and if I call shape factory so create
circle<01:22:02.860><c> each</c><01:22:03.860><c> returns</c><01:22:04.340><c> up</c><01:22:10.239><c> yes</c><01:22:11.239><c> I</c><01:22:11.449><c> got</c><01:22:11.630><c> to</c><01:22:11.749><c> draw</c>

01:22:11.919 --> 01:22:11.929 align:start position:0%
circle each returns up yes I got to draw
 

01:22:11.929 --> 01:22:14.319 align:start position:0%
circle each returns up yes I got to draw
over<01:22:11.960><c> the</c><01:22:12.230><c> shape</c><01:22:12.590><c> here</c><01:22:12.980><c> it's</c><01:22:13.909><c> not</c><01:22:14.059><c> a</c><01:22:14.090><c> right</c>

01:22:14.319 --> 01:22:14.329 align:start position:0%
over the shape here it's not a right
 

01:22:14.329 --> 01:22:20.529 align:start position:0%
over the shape here it's not a right
shape<01:22:15.369><c> the</c><01:22:16.369><c> shape</c><01:22:16.550><c> are</c><01:22:16.760><c> created</c><01:22:19.179><c> okay</c><01:22:20.179><c> so</c><01:22:20.239><c> this</c>

01:22:20.529 --> 01:22:20.539 align:start position:0%
shape the shape are created okay so this
 

01:22:20.539 --> 01:22:30.270 align:start position:0%
shape the shape are created okay so this
is<01:22:20.719><c> my</c><01:22:20.900><c> my</c><01:22:21.139><c> my</c><01:22:22.210><c> circle</c><01:22:23.210><c> factory</c><01:22:26.409><c> factory</c>

01:22:30.270 --> 01:22:30.280 align:start position:0%
 
 

01:22:30.280 --> 01:22:33.160 align:start position:0%
 
and<01:22:31.280><c> I</c><01:22:31.489><c> want</c><01:22:31.670><c> to</c><01:22:31.730><c> cast</c><01:22:32.090><c> that</c><01:22:32.239><c> into</c><01:22:32.780><c> a</c><01:22:32.810><c> factory</c>

01:22:33.160 --> 01:22:33.170 align:start position:0%
and I want to cast that into a factory
 

01:22:33.170 --> 01:22:37.330 align:start position:0%
and I want to cast that into a factory
of<01:22:33.320><c> circle</c><01:22:35.140><c> since</c><01:22:36.140><c> what</c><01:22:36.350><c> I</c><01:22:36.380><c> get</c><01:22:36.680><c> is</c><01:22:36.860><c> in</c><01:22:37.010><c> fact</c><01:22:37.250><c> a</c>

01:22:37.330 --> 01:22:37.340 align:start position:0%
of circle since what I get is in fact a
 

01:22:37.340 --> 01:22:46.069 align:start position:0%
of circle since what I get is in fact a
factory<01:22:37.700><c> machine</c>

01:22:46.069 --> 01:22:46.079 align:start position:0%
 
 

01:22:46.079 --> 01:22:47.650 align:start position:0%
 
right

01:22:47.650 --> 01:22:47.660 align:start position:0%
right
 

01:22:47.660 --> 01:22:54.179 align:start position:0%
right
happy<01:22:48.530><c> we</c><01:22:48.620><c> did</c>

01:22:54.179 --> 01:22:54.189 align:start position:0%
 
 

01:22:54.189 --> 01:23:00.259 align:start position:0%
 
okay<01:22:55.150><c> like</c><01:22:55.300><c> that</c><01:22:56.340><c> yes</c><01:22:57.809><c> I've</c><01:22:58.809><c> got</c><01:22:59.019><c> this</c><01:22:59.260><c> funny</c>

01:23:00.259 --> 01:23:00.269 align:start position:0%
okay like that yes I've got this funny
 

01:23:00.269 --> 01:23:03.750 align:start position:0%
okay like that yes I've got this funny
warning<01:23:01.289><c> so</c><01:23:02.289><c> let</c><01:23:02.469><c> us</c><01:23:02.499><c> get</c><01:23:02.769><c> rid</c><01:23:02.979><c> of</c><01:23:03.039><c> this</c><01:23:03.249><c> with</c>

01:23:03.750 --> 01:23:03.760 align:start position:0%
warning so let us get rid of this with
 

01:23:03.760 --> 01:23:06.870 align:start position:0%
warning so let us get rid of this with
this<01:23:03.880><c> kind</c><01:23:04.119><c> of</c><01:23:04.179><c> magic</c><01:23:04.659><c> hack</c><01:23:05.669><c> provided</c><01:23:06.669><c> by</c><01:23:06.820><c> the</c>

01:23:06.870 --> 01:23:06.880 align:start position:0%
this kind of magic hack provided by the
 

01:23:06.880 --> 01:23:10.109 align:start position:0%
this kind of magic hack provided by the
GDK<01:23:07.329><c> suppress</c><01:23:08.110><c> warning</c><01:23:08.439><c> unchecked</c><01:23:08.979><c> yes</c><01:23:09.550><c> I</c>

01:23:10.109 --> 01:23:10.119 align:start position:0%
GDK suppress warning unchecked yes I
 

01:23:10.119 --> 01:23:14.489 align:start position:0%
GDK suppress warning unchecked yes I
know<01:23:10.360><c> what</c><01:23:10.570><c> I'm</c><01:23:10.659><c> doing</c><01:23:11.849><c> okay</c><01:23:12.849><c> so</c><01:23:13.749><c> this</c><01:23:13.929><c> is</c><01:23:14.110><c> this</c>

01:23:14.489 --> 01:23:14.499 align:start position:0%
know what I'm doing okay so this is this
 

01:23:14.499 --> 01:23:16.830 align:start position:0%
know what I'm doing okay so this is this
is<01:23:14.559><c> basically</c><01:23:14.829><c> the</c><01:23:15.280><c> registry</c><01:23:15.729><c> pattern</c><01:23:16.059><c> as</c><01:23:16.630><c> we</c>

01:23:16.830 --> 01:23:16.840 align:start position:0%
is basically the registry pattern as we
 

01:23:16.840 --> 01:23:20.069 align:start position:0%
is basically the registry pattern as we
all<01:23:17.019><c> saw</c><01:23:17.260><c> it</c><01:23:17.289><c> in</c><01:23:18.010><c> our</c><01:23:18.239><c> application</c><01:23:19.239><c> might</c><01:23:19.929><c> be</c>

01:23:20.069 --> 01:23:20.079 align:start position:0%
all saw it in our application might be
 

01:23:20.079 --> 01:23:22.259 align:start position:0%
all saw it in our application might be
not<01:23:20.289><c> in</c><01:23:20.530><c> this</c><01:23:20.829><c> exact</c><01:23:21.459><c> form</c><01:23:21.729><c> but</c><01:23:21.939><c> basically</c>

01:23:22.259 --> 01:23:22.269 align:start position:0%
not in this exact form but basically
 

01:23:22.269 --> 01:23:24.989 align:start position:0%
not in this exact form but basically
this<01:23:22.510><c> is</c><01:23:22.719><c> this</c><01:23:22.840><c> is</c><01:23:23.019><c> what</c><01:23:23.199><c> what</c><01:23:23.949><c> we</c><01:23:24.130><c> what</c><01:23:24.639><c> we</c><01:23:24.669><c> can</c>

01:23:24.989 --> 01:23:24.999 align:start position:0%
this is this is what what we what we can
 

01:23:24.999 --> 01:23:27.209 align:start position:0%
this is this is what what we what we can
do<01:23:25.119><c> you</c><01:23:25.329><c> see</c><01:23:25.630><c> that</c><01:23:25.780><c> this</c><01:23:26.289><c> registry</c><01:23:26.919><c> pattern</c>

01:23:27.209 --> 01:23:27.219 align:start position:0%
do you see that this registry pattern
 

01:23:27.219 --> 01:23:29.279 align:start position:0%
do you see that this registry pattern
well<01:23:27.400><c> can</c><01:23:27.610><c> can</c><01:23:27.849><c> be</c><01:23:28.269><c> created</c><01:23:28.749><c> on</c><01:23:28.840><c> a</c><01:23:28.900><c> way</c><01:23:29.110><c> we</c>

01:23:29.279 --> 01:23:29.289 align:start position:0%
well can can be created on a way we
 

01:23:29.289 --> 01:23:30.419 align:start position:0%
well can can be created on a way we
creat<01:23:29.499><c> the</c><01:23:29.590><c> factory</c><01:23:29.949><c> in</c><01:23:30.070><c> the</c><01:23:30.099><c> previous</c>

01:23:30.419 --> 01:23:30.429 align:start position:0%
creat the factory in the previous
 

01:23:30.429 --> 01:23:34.409 align:start position:0%
creat the factory in the previous
example<01:23:31.380><c> which</c><01:23:32.380><c> is</c><01:23:32.699><c> which</c><01:23:33.699><c> is</c><01:23:33.729><c> basically</c><01:23:34.209><c> this</c>

01:23:34.409 --> 01:23:34.419 align:start position:0%
example which is which is basically this
 

01:23:34.419 --> 01:23:37.799 align:start position:0%
example which is which is basically this
one<01:23:34.630><c> by</c><01:23:35.320><c> the</c><01:23:35.380><c> way</c><01:23:35.969><c> if</c><01:23:36.969><c> I</c><01:23:37.179><c> want</c><01:23:37.419><c> to</c><01:23:37.539><c> create</c><01:23:37.749><c> a</c>

01:23:37.799 --> 01:23:37.809 align:start position:0%
one by the way if I want to create a
 

01:23:37.809 --> 01:23:40.409 align:start position:0%
one by the way if I want to create a
single<01:23:38.169><c> home</c><01:23:38.639><c> for</c><01:23:39.639><c> instance</c><01:23:39.729><c> I</c><01:23:40.030><c> want</c><01:23:40.239><c> to</c>

01:23:40.409 --> 01:23:40.419 align:start position:0%
single home for instance I want to
 

01:23:40.419 --> 01:23:42.600 align:start position:0%
single home for instance I want to
return<01:23:41.409><c> all</c><01:23:41.679><c> the</c><01:23:41.829><c> way</c><01:23:41.919><c> the</c><01:23:42.099><c> same</c><01:23:42.369><c> triangle</c>

01:23:42.600 --> 01:23:42.610 align:start position:0%
return all the way the same triangle
 

01:23:42.610 --> 01:23:44.909 align:start position:0%
return all the way the same triangle
here<01:23:43.150><c> if</c><01:23:43.269><c> I'm</c><01:23:43.479><c> with</c><01:23:43.929><c> this</c><01:23:44.079><c> with</c><01:23:44.380><c> this</c><01:23:44.499><c> factory</c>

01:23:44.909 --> 01:23:44.919 align:start position:0%
here if I'm with this with this factory
 

01:23:44.919 --> 01:23:47.310 align:start position:0%
here if I'm with this with this factory
I<01:23:45.099><c> am</c><01:23:45.610><c> returning</c><01:23:45.939><c> a</c><01:23:46.119><c> new</c><01:23:46.360><c> triangle</c><01:23:46.659><c> every</c><01:23:47.169><c> time</c>

01:23:47.310 --> 01:23:47.320 align:start position:0%
I am returning a new triangle every time
 

01:23:47.320 --> 01:23:48.449 align:start position:0%
I am returning a new triangle every time
I'm<01:23:47.469><c> calling</c><01:23:47.679><c> this</c><01:23:47.949><c> Factory</c>

01:23:48.449 --> 01:23:48.459 align:start position:0%
I'm calling this Factory
 

01:23:48.459 --> 01:23:51.149 align:start position:0%
I'm calling this Factory
but<01:23:48.820><c> if</c><01:23:48.969><c> I</c><01:23:49.119><c> want</c><01:23:49.300><c> to</c><01:23:49.419><c> make</c><01:23:49.570><c> it</c><01:23:49.719><c> a</c><01:23:49.809><c> single</c><01:23:50.019><c> tone</c><01:23:50.320><c> I</c>

01:23:51.149 --> 01:23:51.159 align:start position:0%
but if I want to make it a single tone I
 

01:23:51.159 --> 01:23:55.720 align:start position:0%
but if I want to make it a single tone I
could

01:23:55.720 --> 01:23:55.730 align:start position:0%
 
 

01:23:55.730 --> 01:24:01.390 align:start position:0%
 
just<01:23:56.450><c> create</c><01:23:56.870><c> a</c><01:23:56.930><c> triangle</c><01:23:57.560><c> as</c><01:23:57.980><c> a</c><01:23:58.880><c> private</c><01:24:00.400><c> this</c>

01:24:01.390 --> 01:24:01.400 align:start position:0%
just create a triangle as a private this
 

01:24:01.400 --> 01:24:04.479 align:start position:0%
just create a triangle as a private this
oh<01:24:01.730><c> this</c><01:24:01.970><c> is</c><01:24:02.150><c> not</c><01:24:02.390><c> static</c><01:24:02.660><c> so</c><01:24:03.080><c> I</c><01:24:03.350><c> can</c><01:24:04.250><c> do</c><01:24:04.400><c> it</c>

01:24:04.479 --> 01:24:04.489 align:start position:0%
oh this is not static so I can do it
 

01:24:04.489 --> 01:24:10.680 align:start position:0%
oh this is not static so I can do it
like<01:24:04.640><c> that</c><01:24:05.110><c> triangle</c><01:24:06.110><c> equals</c><01:24:06.790><c> new</c><01:24:07.790><c> triangle</c>

01:24:10.680 --> 01:24:10.690 align:start position:0%
 
 

01:24:10.690 --> 01:24:17.080 align:start position:0%
 
and<01:24:11.800><c> with</c><01:24:12.800><c> the</c><01:24:12.980><c> strake</c><01:24:14.620><c> return</c><01:24:15.910><c> always</c><01:24:16.910><c> the</c>

01:24:17.080 --> 01:24:17.090 align:start position:0%
and with the strake return always the
 

01:24:17.090 --> 01:24:19.750 align:start position:0%
and with the strake return always the
same<01:24:17.360><c> triangle</c><01:24:17.660><c> with</c><01:24:18.350><c> my</c><01:24:18.560><c> supplier</c><01:24:18.950><c> this</c>

01:24:19.750 --> 01:24:19.760 align:start position:0%
same triangle with my supplier this
 

01:24:19.760 --> 01:24:21.070 align:start position:0%
same triangle with my supplier this
would<01:24:19.970><c> be</c><01:24:20.090><c> an</c><01:24:20.150><c> implementation</c><01:24:20.390><c> of</c><01:24:20.930><c> the</c>

01:24:21.070 --> 01:24:21.080 align:start position:0%
would be an implementation of the
 

01:24:21.080 --> 01:24:23.320 align:start position:0%
would be an implementation of the
singleton<01:24:21.530><c> pattern</c><01:24:21.680><c> as</c><01:24:22.610><c> a</c><01:24:22.670><c> singleton</c><01:24:23.180><c> pattern</c>

01:24:23.320 --> 01:24:23.330 align:start position:0%
singleton pattern as a singleton pattern
 

01:24:23.330 --> 01:24:24.970 align:start position:0%
singleton pattern as a singleton pattern
might<01:24:23.660><c> not</c><01:24:23.840><c> be</c><01:24:24.050><c> the</c><01:24:24.200><c> best</c><01:24:24.350><c> pattern</c><01:24:24.590><c> of</c><01:24:24.890><c> the</c>

01:24:24.970 --> 01:24:24.980 align:start position:0%
might not be the best pattern of the
 

01:24:24.980 --> 01:24:27.130 align:start position:0%
might not be the best pattern of the
world<01:24:25.130><c> but</c><01:24:25.850><c> you</c><01:24:26.150><c> can</c><01:24:26.300><c> still</c><01:24:26.570><c> implement</c><01:24:26.810><c> it</c>

01:24:27.130 --> 01:24:27.140 align:start position:0%
world but you can still implement it
 

01:24:27.140 --> 01:24:29.170 align:start position:0%
world but you can still implement it
using<01:24:27.290><c> using</c><01:24:27.980><c> this</c><01:24:28.100><c> kind</c><01:24:28.340><c> of</c><01:24:28.489><c> a</c><01:24:28.880><c> blonde</c>

01:24:29.170 --> 01:24:29.180 align:start position:0%
using using this kind of a blonde
 

01:24:29.180 --> 01:24:32.290 align:start position:0%
using using this kind of a blonde
expression<01:24:29.830><c> what</c><01:24:30.830><c> is</c><01:24:30.980><c> not</c><01:24:31.430><c> that</c><01:24:31.610><c> great</c><01:24:31.910><c> with</c>

01:24:32.290 --> 01:24:32.300 align:start position:0%
expression what is not that great with
 

01:24:32.300 --> 01:24:35.380 align:start position:0%
expression what is not that great with
this<01:24:32.600><c> way</c><01:24:32.870><c> of</c><01:24:32.989><c> writing</c><01:24:33.230><c> things</c><01:24:33.560><c> is</c><01:24:34.489><c> that</c><01:24:34.730><c> what</c>

01:24:35.380 --> 01:24:35.390 align:start position:0%
this way of writing things is that what
 

01:24:35.390 --> 01:24:37.479 align:start position:0%
this way of writing things is that what
is<01:24:35.510><c> not</c><01:24:35.660><c> as</c><01:24:35.870><c> great</c><01:24:36.080><c> that</c><01:24:36.680><c> grid</c><01:24:36.890><c> is</c><01:24:37.040><c> that</c><01:24:37.220><c> if</c><01:24:37.370><c> I</c>

01:24:37.479 --> 01:24:37.489 align:start position:0%
is not as great that grid is that if I
 

01:24:37.489 --> 01:24:43.960 align:start position:0%
is not as great that grid is that if I
want<01:24:37.730><c> to</c><01:24:37.880><c> add</c><01:24:38.060><c> them</c><01:24:38.530><c> stuff</c><01:24:39.530><c> to</c><01:24:40.489><c> my</c><01:24:41.200><c> to</c><01:24:42.200><c> my</c><01:24:42.940><c> to</c><01:24:43.940><c> my</c>

01:24:43.960 --> 01:24:43.970 align:start position:0%
want to add them stuff to my to my to my
 

01:24:43.970 --> 01:24:46.890 align:start position:0%
want to add them stuff to my to my to my
registry<01:24:44.630><c> I</c><01:24:44.960><c> need</c><01:24:45.500><c> to</c><01:24:45.620><c> modify</c><01:24:45.890><c> this</c><01:24:46.070><c> code</c>

01:24:46.890 --> 01:24:46.900 align:start position:0%
registry I need to modify this code
 

01:24:46.900 --> 01:24:49.630 align:start position:0%
registry I need to modify this code
recompile<01:24:47.900><c> it</c><01:24:48.020><c> recompile</c><01:24:48.800><c> all</c><01:24:49.040><c> my</c><01:24:49.250><c> life</c><01:24:49.400><c> my</c>

01:24:49.630 --> 01:24:49.640 align:start position:0%
recompile it recompile all my life my
 

01:24:49.640 --> 01:24:51.700 align:start position:0%
recompile it recompile all my life my
application<01:24:50.180><c> and</c><01:24:50.420><c> everywhere</c><01:24:50.930><c> I</c><01:24:50.960><c> I</c><01:24:51.110><c> need</c><01:24:51.530><c> to</c>

01:24:51.700 --> 01:24:51.710 align:start position:0%
application and everywhere I I need to
 

01:24:51.710 --> 01:24:55.510 align:start position:0%
application and everywhere I I need to
do<01:24:52.120><c> I'm</c><01:24:53.120><c> using</c><01:24:53.390><c> this</c><01:24:53.630><c> registry</c><01:24:54.200><c> we</c><01:24:54.920><c> rewrite</c><01:24:55.310><c> my</c>

01:24:55.510 --> 01:24:55.520 align:start position:0%
do I'm using this registry we rewrite my
 

01:24:55.520 --> 01:24:59.160 align:start position:0%
do I'm using this registry we rewrite my
code<01:24:55.760><c> everywhere</c><01:24:56.750><c> so</c><01:24:57.230><c> did</c><01:24:57.620><c> this</c><01:24:57.770><c> is</c><01:24:57.950><c> not</c><01:24:57.980><c> very</c>

01:24:59.160 --> 01:24:59.170 align:start position:0%
code everywhere so did this is not very
 

01:24:59.170 --> 01:25:01.840 align:start position:0%
code everywhere so did this is not very
how<01:25:00.170><c> could</c><01:25:00.350><c> I</c><01:25:00.410><c> say</c><01:25:00.590><c> that</c><01:25:00.620><c> very</c><01:25:01.010><c> very</c><01:25:01.640><c> dynamic</c>

01:25:01.840 --> 01:25:01.850 align:start position:0%
how could I say that very very dynamic
 

01:25:01.850 --> 01:25:06.760 align:start position:0%
how could I say that very very dynamic
way<01:25:02.330><c> of</c><01:25:02.739><c> funding</c><01:25:03.739><c> registries</c><01:25:05.230><c> what</c><01:25:06.230><c> I</c><01:25:06.260><c> what</c>

01:25:06.760 --> 01:25:06.770 align:start position:0%
way of funding registries what I what
 

01:25:06.770 --> 01:25:09.430 align:start position:0%
way of funding registries what I what
most<01:25:07.280><c> of</c><01:25:07.430><c> the</c><01:25:07.520><c> time</c><01:25:07.700><c> people</c><01:25:08.390><c> do</c><01:25:08.690><c> to</c><01:25:08.840><c> fix</c><01:25:09.320><c> that</c>

01:25:09.430 --> 01:25:09.440 align:start position:0%
most of the time people do to fix that
 

01:25:09.440 --> 01:25:13.300 align:start position:0%
most of the time people do to fix that
is<01:25:09.830><c> to</c><01:25:09.920><c> use</c><01:25:10.220><c> a</c><01:25:10.250><c> bingo</c><01:25:10.640><c> pattern</c><01:25:11.770><c> okay</c><01:25:12.770><c> I've</c><01:25:13.100><c> got</c>

01:25:13.300 --> 01:25:13.310 align:start position:0%
is to use a bingo pattern okay I've got
 

01:25:13.310 --> 01:25:16.990 align:start position:0%
is to use a bingo pattern okay I've got
to<01:25:13.430><c> builder</c><01:25:13.880><c> here</c><01:25:14.620><c> which</c><01:25:15.620><c> is</c><01:25:15.770><c> the</c><01:25:15.830><c> class</c><01:25:16.040><c> this</c>

01:25:16.990 --> 01:25:17.000 align:start position:0%
to builder here which is the class this
 

01:25:17.000 --> 01:25:19.570 align:start position:0%
to builder here which is the class this
builder<01:25:17.390><c> pattern</c><01:25:17.540><c> works</c><01:25:18.170><c> in</c><01:25:18.560><c> two</c><01:25:18.710><c> steps</c><01:25:18.950><c> first</c>

01:25:19.570 --> 01:25:19.580 align:start position:0%
builder pattern works in two steps first
 

01:25:19.580 --> 01:25:23.590 align:start position:0%
builder pattern works in two steps first
step<01:25:19.700><c> I</c><01:25:20.210><c> add</c><01:25:21.400><c> elements</c><01:25:22.400><c> to</c><01:25:22.430><c> my</c><01:25:22.880><c> registry</c><01:25:23.390><c> and</c>

01:25:23.590 --> 01:25:23.600 align:start position:0%
step I add elements to my registry and
 

01:25:23.600 --> 01:25:26.770 align:start position:0%
step I add elements to my registry and
then<01:25:24.200><c> second</c><01:25:24.560><c> step</c><01:25:24.590><c> I</c><01:25:25.070><c> use</c><01:25:25.220><c> my</c><01:25:25.700><c> registry</c><01:25:26.300><c> as</c><01:25:26.540><c> it</c>

01:25:26.770 --> 01:25:26.780 align:start position:0%
then second step I use my registry as it
 

01:25:26.780 --> 01:25:30.700 align:start position:0%
then second step I use my registry as it
is<01:25:26.960><c> by</c><01:25:27.860><c> calling</c><01:25:28.640><c> the</c><01:25:29.000><c> big</c><01:25:29.630><c> method</c><01:25:29.989><c> and</c><01:25:30.380><c> using</c>

01:25:30.700 --> 01:25:30.710 align:start position:0%
is by calling the big method and using
 

01:25:30.710 --> 01:25:40.910 align:start position:0%
is by calling the big method and using
this<01:25:30.830><c> Jai</c><01:25:31.070><c> factory</c><01:25:33.070><c> we</c><01:25:34.070><c> can</c><01:25:34.100><c> just</c><01:25:35.590><c> yeah</c>

01:25:40.910 --> 01:25:40.920 align:start position:0%
 
 

01:25:40.920 --> 01:25:43.820 align:start position:0%
 
I'm<01:25:41.920><c> going</c><01:25:42.219><c> to</c><01:25:42.340><c> put</c><01:25:42.550><c> this</c><01:25:42.820><c> one</c><01:25:42.880><c> here</c>

01:25:43.820 --> 01:25:43.830 align:start position:0%
I'm going to put this one here
 

01:25:43.830 --> 01:25:47.700 align:start position:0%
I'm going to put this one here
so<01:25:44.830><c> I</c><01:25:44.860><c> can</c><01:25:45.219><c> how</c><01:25:45.670><c> can</c><01:25:45.730><c> I</c><01:25:46.030><c> use</c><01:25:46.330><c> this</c><01:25:47.320><c> builder</c>

01:25:47.700 --> 01:25:47.710 align:start position:0%
so I can how can I use this builder
 

01:25:47.710 --> 01:25:52.709 align:start position:0%
so I can how can I use this builder
pattern<01:25:49.739><c> but</c><01:25:50.739><c> so</c><01:25:50.890><c> many</c><01:25:50.980><c> builders</c><01:25:51.429><c> where</c><01:25:52.120><c> where</c>

01:25:52.709 --> 01:25:52.719 align:start position:0%
pattern but so many builders where where
 

01:25:52.719 --> 01:25:55.410 align:start position:0%
pattern but so many builders where where
is<01:25:52.840><c> minor</c><01:25:53.969><c> thanks</c><01:25:54.969><c> here</c>

01:25:55.410 --> 01:25:55.420 align:start position:0%
is minor thanks here
 

01:25:55.420 --> 01:25:58.520 align:start position:0%
is minor thanks here
right<01:25:55.690><c> a</c><01:25:55.989><c> builder</c><01:25:56.800><c> so</c><01:25:56.830><c> it's</c><01:25:57.160><c> a</c><01:25:57.250><c> bit</c><01:25:57.429><c> of</c><01:25:57.640><c> what</c>

01:25:58.520 --> 01:25:58.530 align:start position:0%
right a builder so it's a bit of what
 

01:25:58.530 --> 01:26:06.950 align:start position:0%
right a builder so it's a bit of what
it's<01:25:59.530><c> a</c><01:25:59.650><c> bit</c><01:25:59.800><c> of</c><01:25:59.949><c> shape</c><01:26:04.650><c> new</c><01:26:05.650><c> bidder</c>

01:26:06.950 --> 01:26:06.960 align:start position:0%
it's a bit of shape new bidder
 

01:26:06.960 --> 01:26:09.780 align:start position:0%
it's a bit of shape new bidder
okay<01:26:07.960><c> so</c><01:26:08.500><c> in</c><01:26:08.620><c> a</c><01:26:08.710><c> first</c><01:26:08.980><c> step</c><01:26:09.160><c> I'm</c><01:26:09.370><c> going</c><01:26:09.580><c> to</c><01:26:09.670><c> add</c>

01:26:09.780 --> 01:26:09.790 align:start position:0%
okay so in a first step I'm going to add
 

01:26:09.790 --> 01:26:16.500 align:start position:0%
okay so in a first step I'm going to add
a<01:26:10.530><c> so</c><01:26:11.530><c> called</c><01:26:14.370><c> I'm</c><01:26:15.370><c> the</c><01:26:15.580><c> factory</c><01:26:15.910><c> of</c><01:26:16.090><c> circle</c>

01:26:16.500 --> 01:26:16.510 align:start position:0%
a so called I'm the factory of circle
 

01:26:16.510 --> 01:26:23.729 align:start position:0%
a so called I'm the factory of circle
which<01:26:17.290><c> is</c><01:26:17.320><c> so</c><01:26:17.770><c> called</c><01:26:19.020><c> you</c><01:26:20.940><c> and</c><01:26:22.290><c> the</c><01:26:23.290><c> same</c><01:26:23.500><c> for</c>

01:26:23.729 --> 01:26:23.739 align:start position:0%
which is so called you and the same for
 

01:26:23.739 --> 01:26:31.710 align:start position:0%
which is so called you and the same for
triangle

01:26:31.710 --> 01:26:31.720 align:start position:0%
 
 

01:26:31.720 --> 01:26:38.480 align:start position:0%
 
Thank<01:26:32.680><c> You</c><01:26:32.740><c> clips</c><01:26:34.230><c> do</c><01:26:35.230><c> zero</c><01:26:35.740><c> later</c><01:26:36.190><c> later</c>

01:26:38.480 --> 01:26:38.490 align:start position:0%
Thank You clips do zero later later
 

01:26:38.490 --> 01:26:41.790 align:start position:0%
Thank You clips do zero later later
don't<01:26:39.490><c> there's</c><01:26:39.760><c> another</c><01:26:39.970><c> triangle</c><01:26:40.300><c> and</c><01:26:40.840><c> the</c>

01:26:41.790 --> 01:26:41.800 align:start position:0%
don't there's another triangle and the
 

01:26:41.800 --> 01:26:52.209 align:start position:0%
don't there's another triangle and the
same<01:26:42.900><c> four</c><01:26:43.900><c> square</c>

01:26:52.209 --> 01:26:52.219 align:start position:0%
 
 

01:26:52.219 --> 01:26:55.989 align:start position:0%
 
just<01:26:52.999><c> like</c><01:26:53.150><c> that</c><01:26:53.479><c> and</c><01:26:53.570><c> now</c><01:26:53.809><c> that</c><01:26:54.579><c> my</c><01:26:55.579><c> builder</c>

01:26:55.989 --> 01:26:55.999 align:start position:0%
just like that and now that my builder
 

01:26:55.999 --> 01:26:59.350 align:start position:0%
just like that and now that my builder
is<01:26:56.300><c> done</c><01:26:56.570><c> I</c><01:26:56.809><c> just</c><01:26:56.869><c> called</c><01:26:57.440><c> the</c><01:26:57.559><c> big</c><01:26:58.030><c> stuff</c><01:26:59.030><c> the</c>

01:26:59.350 --> 01:26:59.360 align:start position:0%
is done I just called the big stuff the
 

01:26:59.360 --> 01:27:05.109 align:start position:0%
is done I just called the big stuff the
build<01:26:59.900><c> method</c><01:27:00.229><c> on</c><01:27:00.320><c> it</c><01:27:02.199><c> to</c><01:27:03.199><c> create</c><01:27:03.849><c> my</c><01:27:04.849><c> shell</c>

01:27:05.109 --> 01:27:05.119 align:start position:0%
build method on it to create my shell
 

01:27:05.119 --> 01:27:07.299 align:start position:0%
build method on it to create my shell
Factory<01:27:05.479><c> and</c><01:27:06.050><c> from</c><01:27:06.499><c> that</c><01:27:06.619><c> chip</c><01:27:06.860><c> factory</c><01:27:07.190><c> I</c>

01:27:07.299 --> 01:27:07.309 align:start position:0%
Factory and from that chip factory I
 

01:27:07.309 --> 01:27:09.160 align:start position:0%
Factory and from that chip factory I
will<01:27:07.489><c> be</c><01:27:07.610><c> able</c><01:27:07.789><c> to</c><01:27:07.999><c> create</c><01:27:08.210><c> my</c><01:27:08.389><c> factories</c><01:27:08.900><c> and</c>

01:27:09.160 --> 01:27:09.170 align:start position:0%
will be able to create my factories and
 

01:27:09.170 --> 01:27:12.069 align:start position:0%
will be able to create my factories and
use<01:27:09.380><c> my</c><01:27:09.559><c> factories</c><01:27:10.070><c> as</c><01:27:10.400><c> I</c><01:27:10.550><c> mean</c><01:27:10.729><c> this</c><01:27:11.719><c> is</c><01:27:11.929><c> by</c>

01:27:12.069 --> 01:27:12.079 align:start position:0%
use my factories as I mean this is by
 

01:27:12.079 --> 01:27:14.229 align:start position:0%
use my factories as I mean this is by
the<01:27:12.110><c> way</c><01:27:12.260><c> a</c><01:27:12.650><c> pattern</c><01:27:13.070><c> that</c><01:27:13.099><c> has</c><01:27:13.369><c> been</c><01:27:13.550><c> used</c><01:27:13.820><c> in</c>

01:27:14.229 --> 01:27:14.239 align:start position:0%
the way a pattern that has been used in
 

01:27:14.239 --> 01:27:17.410 align:start position:0%
the way a pattern that has been used in
industry<01:27:15.229><c> maybe</c><01:27:15.440><c> I</c><01:27:15.650><c> itself</c><01:27:16.099><c> if</c><01:27:16.849><c> I</c><01:27:17.030><c> check</c><01:27:17.269><c> the</c>

01:27:17.410 --> 01:27:17.420 align:start position:0%
industry maybe I itself if I check the
 

01:27:17.420 --> 01:27:20.609 align:start position:0%
industry maybe I itself if I check the
stream<01:27:17.749><c> interface</c><01:27:18.019><c> I've</c><01:27:18.590><c> got</c><01:27:19.460><c> a</c><01:27:19.489><c> builder</c><01:27:20.059><c> a</c>

01:27:20.609 --> 01:27:20.619 align:start position:0%
stream interface I've got a builder a
 

01:27:20.619 --> 01:27:24.239 align:start position:0%
stream interface I've got a builder a
member<01:27:21.619><c> interface</c><01:27:22.150><c> that</c><01:27:23.150><c> extends</c><01:27:23.630><c> consumer</c>

01:27:24.239 --> 01:27:24.249 align:start position:0%
member interface that extends consumer
 

01:27:24.249 --> 01:27:28.270 align:start position:0%
member interface that extends consumer
in<01:27:25.249><c> which</c><01:27:25.519><c> I</c><01:27:25.670><c> can</c><01:27:25.909><c> add</c><01:27:26.150><c> elements</c><01:27:27.079><c> to</c><01:27:27.530><c> it</c><01:27:27.739><c> I</c><01:27:27.979><c> add</c>

01:27:28.270 --> 01:27:28.280 align:start position:0%
in which I can add elements to it I add
 

01:27:28.280 --> 01:27:30.939 align:start position:0%
in which I can add elements to it I add
elements<01:27:28.909><c> to</c><01:27:28.940><c> that</c><01:27:29.179><c> builder</c><01:27:29.570><c> once</c><01:27:30.530><c> this</c><01:27:30.769><c> is</c>

01:27:30.939 --> 01:27:30.949 align:start position:0%
elements to that builder once this is
 

01:27:30.949 --> 01:27:33.520 align:start position:0%
elements to that builder once this is
done<01:27:31.130><c> I</c><01:27:31.519><c> just</c><01:27:31.639><c> got</c><01:27:32.059><c> the</c><01:27:32.210><c> Builder</c><01:27:32.690><c> method</c><01:27:33.409><c> on</c>

01:27:33.520 --> 01:27:33.530 align:start position:0%
done I just got the Builder method on
 

01:27:33.530 --> 01:27:35.489 align:start position:0%
done I just got the Builder method on
that<01:27:33.559><c> builder</c><01:27:34.010><c> to</c><01:27:34.219><c> get</c><01:27:34.400><c> to</c><01:27:34.729><c> create</c><01:27:34.999><c> the</c><01:27:35.119><c> stream</c>

01:27:35.489 --> 01:27:35.499 align:start position:0%
that builder to get to create the stream
 

01:27:35.499 --> 01:27:37.959 align:start position:0%
that builder to get to create the stream
with<01:27:36.499><c> all</c><01:27:36.710><c> the</c><01:27:36.829><c> elements</c><01:27:37.249><c> I</c><01:27:37.340><c> have</c><01:27:37.369><c> added</c><01:27:37.820><c> to</c>

01:27:37.959 --> 01:27:37.969 align:start position:0%
with all the elements I have added to
 

01:27:37.969 --> 01:27:41.169 align:start position:0%
with all the elements I have added to
the<01:27:38.090><c> bidder</c><01:27:38.289><c> the</c><01:27:39.289><c> problem</c><01:27:39.679><c> is</c><01:27:39.800><c> that</c><01:27:39.999><c> once</c><01:27:40.999><c> I</c>

01:27:41.169 --> 01:27:41.179 align:start position:0%
the bidder the problem is that once I
 

01:27:41.179 --> 01:27:43.839 align:start position:0%
the bidder the problem is that once I
have<01:27:41.329><c> called</c><01:27:41.780><c> the</c><01:27:41.900><c> build</c><01:27:42.170><c> method</c><01:27:42.380><c> I</c><01:27:42.949><c> cannot</c>

01:27:43.839 --> 01:27:43.849 align:start position:0%
have called the build method I cannot
 

01:27:43.849 --> 01:27:46.540 align:start position:0%
have called the build method I cannot
call<01:27:44.210><c> them</c><01:27:44.449><c> the</c><01:27:44.690><c> add</c><01:27:44.900><c> method</c><01:27:45.229><c> anymore</c><01:27:46.039><c> so</c><01:27:46.309><c> this</c>

01:27:46.540 --> 01:27:46.550 align:start position:0%
call them the add method anymore so this
 

01:27:46.550 --> 01:27:51.009 align:start position:0%
call them the add method anymore so this
object<01:27:46.789><c> has</c><01:27:47.150><c> to</c><01:27:47.769><c> remember</c><01:27:48.769><c> state</c><01:27:49.360><c> ok</c><01:27:50.360><c> I</c><01:27:50.510><c> am</c><01:27:50.630><c> in</c>

01:27:51.009 --> 01:27:51.019 align:start position:0%
object has to remember state ok I am in
 

01:27:51.019 --> 01:27:53.350 align:start position:0%
object has to remember state ok I am in
the<01:27:51.139><c> build</c><01:27:51.409><c> mode</c><01:27:51.650><c> I</c><01:27:52.130><c> think</c><01:27:52.369><c> it</c><01:27:52.699><c> amounts</c><01:27:53.030><c> to</c><01:27:53.090><c> my</c>

01:27:53.350 --> 01:27:53.360 align:start position:0%
the build mode I think it amounts to my
 

01:27:53.360 --> 01:27:55.750 align:start position:0%
the build mode I think it amounts to my
builder<01:27:53.690><c> and</c><01:27:53.900><c> then</c><01:27:54.679><c> I</c><01:27:54.920><c> have</c><01:27:55.099><c> created</c><01:27:55.400><c> the</c>

01:27:55.750 --> 01:27:55.760 align:start position:0%
builder and then I have created the
 

01:27:55.760 --> 01:27:57.910 align:start position:0%
builder and then I have created the
object<01:27:55.880><c> I</c><01:27:56.210><c> was</c><01:27:56.389><c> building</c><01:27:56.809><c> so</c><01:27:57.139><c> I'm</c><01:27:57.349><c> out</c><01:27:57.619><c> of</c><01:27:57.650><c> the</c>

01:27:57.910 --> 01:27:57.920 align:start position:0%
object I was building so I'm out of the
 

01:27:57.920 --> 01:27:59.919 align:start position:0%
object I was building so I'm out of the
build<01:27:58.130><c> mode</c><01:27:58.280><c> and</c><01:27:58.340><c> it's</c><01:27:58.610><c> somebody</c><01:27:59.090><c> caused</c><01:27:59.749><c> the</c>

01:27:59.919 --> 01:27:59.929 align:start position:0%
build mode and it's somebody caused the
 

01:27:59.929 --> 01:28:03.580 align:start position:0%
build mode and it's somebody caused the
add<01:28:00.340><c> object</c><01:28:01.340><c> again</c><01:28:01.849><c> I</c><01:28:02.210><c> should</c><01:28:02.809><c> raise</c><01:28:03.440><c> an</c>

01:28:03.580 --> 01:28:03.590 align:start position:0%
add object again I should raise an
 

01:28:03.590 --> 01:28:04.930 align:start position:0%
add object again I should raise an
exception<01:28:03.679><c> or</c><01:28:04.130><c> something</c><01:28:04.400><c> like</c><01:28:04.489><c> that</c><01:28:04.550><c> for</c><01:28:04.699><c> an</c>

01:28:04.930 --> 01:28:04.940 align:start position:0%
exception or something like that for an
 

01:28:04.940 --> 01:28:07.569 align:start position:0%
exception or something like that for an
exception<01:28:05.360><c> to</c><01:28:06.170><c> tell</c><01:28:06.349><c> the</c><01:28:06.409><c> people</c><01:28:06.530><c> a</c><01:28:06.860><c> this</c><01:28:07.190><c> this</c>

01:28:07.569 --> 01:28:07.579 align:start position:0%
exception to tell the people a this this
 

01:28:07.579 --> 01:28:09.580 align:start position:0%
exception to tell the people a this this
builder<01:28:07.940><c> is</c><01:28:07.969><c> done</c><01:28:08.210><c> you</c><01:28:08.389><c> cannot</c><01:28:08.630><c> add</c><01:28:09.139><c> any</c><01:28:09.469><c> more</c>

01:28:09.580 --> 01:28:09.590 align:start position:0%
builder is done you cannot add any more
 

01:28:09.590 --> 01:28:12.250 align:start position:0%
builder is done you cannot add any more
elements<01:28:09.949><c> to</c><01:28:09.979><c> it</c><01:28:10.159><c> so</c><01:28:11.030><c> if</c><01:28:11.389><c> I</c><01:28:11.570><c> if</c><01:28:11.719><c> I</c><01:28:11.869><c> come</c><01:28:12.079><c> back</c><01:28:12.199><c> to</c>

01:28:12.250 --> 01:28:12.260 align:start position:0%
elements to it so if I if I come back to
 

01:28:12.260 --> 01:28:14.229 align:start position:0%
elements to it so if I if I come back to
my<01:28:12.440><c> pattern</c><01:28:12.619><c> I've</c><01:28:12.889><c> got</c><01:28:13.489><c> in</c><01:28:13.639><c> fact</c><01:28:13.789><c> the</c><01:28:13.969><c> exact</c>

01:28:14.229 --> 01:28:14.239 align:start position:0%
my pattern I've got in fact the exact
 

01:28:14.239 --> 01:28:16.410 align:start position:0%
my pattern I've got in fact the exact
same<01:28:14.420><c> problem</c><01:28:14.809><c> in</c><01:28:15.229><c> this</c><01:28:15.559><c> pattern</c><01:28:15.769><c> is</c><01:28:16.070><c> that</c>

01:28:16.410 --> 01:28:16.420 align:start position:0%
same problem in this pattern is that
 

01:28:16.420 --> 01:28:19.600 align:start position:0%
same problem in this pattern is that
once<01:28:17.420><c> I</c><01:28:17.630><c> have</c><01:28:17.809><c> called</c><01:28:18.380><c> this</c><01:28:18.530><c> bill</c><01:28:18.860><c> method</c><01:28:19.280><c> here</c>

01:28:19.600 --> 01:28:19.610 align:start position:0%
once I have called this bill method here
 

01:28:19.610 --> 01:28:22.450 align:start position:0%
once I have called this bill method here
I<01:28:19.789><c> need</c><01:28:20.389><c> to</c><01:28:20.539><c> create</c><01:28:20.900><c> some</c><01:28:21.289><c> kind</c><01:28:21.320><c> of</c><01:28:21.619><c> internal</c>

01:28:22.450 --> 01:28:22.460 align:start position:0%
I need to create some kind of internal
 

01:28:22.460 --> 01:28:24.219 align:start position:0%
I need to create some kind of internal
mechanism<01:28:23.030><c> to</c><01:28:23.150><c> make</c><01:28:23.329><c> sure</c><01:28:23.510><c> that</c><01:28:23.719><c> nobody</c><01:28:23.960><c> is</c>

01:28:24.219 --> 01:28:24.229 align:start position:0%
mechanism to make sure that nobody is
 

01:28:24.229 --> 01:28:26.620 align:start position:0%
mechanism to make sure that nobody is
going<01:28:24.289><c> to</c><01:28:24.499><c> add</c><01:28:24.829><c> any</c><01:28:25.309><c> more</c><01:28:25.429><c> object</c><01:28:25.969><c> to</c><01:28:26.510><c> this</c>

01:28:26.620 --> 01:28:26.630 align:start position:0%
going to add any more object to this
 

01:28:26.630 --> 01:28:29.640 align:start position:0%
going to add any more object to this
builder<01:28:26.989><c> and</c><01:28:27.920><c> this</c><01:28:28.340><c> may</c><01:28:28.610><c> be</c><01:28:28.670><c> quite</c><01:28:29.179><c> complex</c>

01:28:29.640 --> 01:28:29.650 align:start position:0%
builder and this may be quite complex
 

01:28:29.650 --> 01:28:31.750 align:start position:0%
builder and this may be quite complex
first<01:28:30.650><c> you</c><01:28:30.829><c> need</c><01:28:30.979><c> to</c><01:28:31.130><c> to</c><01:28:31.280><c> write</c><01:28:31.460><c> this</c><01:28:31.579><c> code</c>

01:28:31.750 --> 01:28:31.760 align:start position:0%
first you need to to write this code
 

01:28:31.760 --> 01:28:33.100 align:start position:0%
first you need to to write this code
which<01:28:32.030><c> is</c><01:28:32.179><c> not</c><01:28:32.389><c> that</c><01:28:32.630><c> simple</c>

01:28:33.100 --> 01:28:33.110 align:start position:0%
which is not that simple
 

01:28:33.110 --> 01:28:36.310 align:start position:0%
which is not that simple
and<01:28:33.260><c> second</c><01:28:33.739><c> you</c><01:28:34.729><c> need</c><01:28:34.880><c> to</c><01:28:35.030><c> think</c><01:28:35.329><c> that</c><01:28:35.539><c> other</c>

01:28:36.310 --> 01:28:36.320 align:start position:0%
and second you need to think that other
 

01:28:36.320 --> 01:28:39.279 align:start position:0%
and second you need to think that other
people<01:28:36.469><c> can</c><01:28:36.800><c> can</c><01:28:37.460><c> access</c><01:28:38.269><c> using</c><01:28:38.900><c> reflection</c>

01:28:39.279 --> 01:28:39.289 align:start position:0%
people can can access using reflection
 

01:28:39.289 --> 01:28:42.969 align:start position:0%
people can can access using reflection
to<01:28:40.130><c> your</c><01:28:40.340><c> internal</c><01:28:40.880><c> registry</c><01:28:41.559><c> other</c><01:28:42.559><c> threads</c>

01:28:42.969 --> 01:28:42.979 align:start position:0%
to your internal registry other threads
 

01:28:42.979 --> 01:28:45.310 align:start position:0%
to your internal registry other threads
could<01:28:43.249><c> be</c><01:28:43.369><c> doing</c><01:28:43.610><c> the</c><01:28:43.729><c> same</c><01:28:43.760><c> also</c><01:28:44.269><c> so</c><01:28:45.050><c> you</c><01:28:45.110><c> need</c>

01:28:45.310 --> 01:28:45.320 align:start position:0%
could be doing the same also so you need
 

01:28:45.320 --> 01:28:47.500 align:start position:0%
could be doing the same also so you need
to<01:28:45.469><c> handle</c><01:28:46.099><c> all</c><01:28:46.340><c> these</c><01:28:46.489><c> kind</c><01:28:46.760><c> of</c><01:28:46.820><c> cases</c><01:28:47.059><c> if</c><01:28:47.420><c> you</c>

01:28:47.500 --> 01:28:47.510 align:start position:0%
to handle all these kind of cases if you
 

01:28:47.510 --> 01:28:49.359 align:start position:0%
to handle all these kind of cases if you
do<01:28:47.630><c> not</c><01:28:47.749><c> want</c><01:28:48.139><c> to</c><01:28:48.289><c> have</c><01:28:48.409><c> any</c><01:28:48.590><c> bugs</c><01:28:48.800><c> in</c><01:28:49.309><c> your</c>

01:28:49.359 --> 01:28:49.369 align:start position:0%
do not want to have any bugs in your
 

01:28:49.369 --> 01:28:51.040 align:start position:0%
do not want to have any bugs in your
application<01:28:49.969><c> they</c><01:28:50.210><c> say</c><01:28:50.360><c> this</c><01:28:50.539><c> is</c><01:28:50.749><c> not</c><01:28:50.780><c> that</c>

01:28:51.040 --> 01:28:51.050 align:start position:0%
application they say this is not that
 

01:28:51.050 --> 01:28:57.350 align:start position:0%
application they say this is not that
great<01:28:52.690><c> now</c><01:28:53.800><c> how</c><01:28:54.800><c> can</c><01:28:54.860><c> we</c>

01:28:57.350 --> 01:28:57.360 align:start position:0%
 
 

01:28:57.360 --> 01:29:01.010 align:start position:0%
 
make<01:28:58.360><c> this</c><01:28:58.540><c> make</c><01:28:58.960><c> this</c><01:28:59.080><c> pattern</c><01:28:59.350><c> better</c>

01:29:01.010 --> 01:29:01.020 align:start position:0%
make this make this pattern better
 

01:29:01.020 --> 01:29:04.740 align:start position:0%
make this make this pattern better
precisely<01:29:02.020><c> using</c><01:29:02.290><c> numbers</c><01:29:02.970><c> first</c><01:29:03.970><c> what</c><01:29:04.630><c> we</c>

01:29:04.740 --> 01:29:04.750 align:start position:0%
precisely using numbers first what we
 

01:29:04.750 --> 01:29:09.470 align:start position:0%
precisely using numbers first what we
can<01:29:04.930><c> see</c><01:29:05.200><c> is</c><01:29:05.470><c> that</c><01:29:05.830><c> this</c><01:29:06.610><c> shape</c><01:29:06.880><c> factory</c><01:29:07.270><c> here</c>

01:29:09.470 --> 01:29:09.480 align:start position:0%
can see is that this shape factory here
 

01:29:09.480 --> 01:29:14.640 align:start position:0%
can see is that this shape factory here
as<01:29:10.480><c> only</c><01:29:11.440><c> in</c><01:29:11.650><c> fact</c><01:29:12.450><c> one</c><01:29:13.450><c> method</c><01:29:13.840><c> to</c><01:29:14.440><c> implement</c>

01:29:14.640 --> 01:29:14.650 align:start position:0%
as only in fact one method to implement
 

01:29:14.650 --> 01:29:17.580 align:start position:0%
as only in fact one method to implement
here<01:29:15.130><c> and</c><01:29:15.820><c> when</c><01:29:16.360><c> you</c><01:29:16.510><c> have</c><01:29:16.660><c> a</c><01:29:16.690><c> class</c><01:29:17.050><c> that</c><01:29:17.350><c> has</c>

01:29:17.580 --> 01:29:17.590 align:start position:0%
here and when you have a class that has
 

01:29:17.590 --> 01:29:20.190 align:start position:0%
here and when you have a class that has
only<01:29:17.740><c> one</c><01:29:18.010><c> method</c><01:29:18.340><c> to</c><01:29:18.490><c> implement</c><01:29:18.990><c> you</c><01:29:19.990><c> should</c>

01:29:20.190 --> 01:29:20.200 align:start position:0%
only one method to implement you should
 

01:29:20.200 --> 01:29:21.690 align:start position:0%
only one method to implement you should
have<01:29:20.350><c> something</c><01:29:20.740><c> in</c><01:29:20.980><c> your</c><01:29:21.100><c> mind</c><01:29:21.250><c> telling</c><01:29:21.580><c> you</c>

01:29:21.690 --> 01:29:21.700 align:start position:0%
have something in your mind telling you
 

01:29:21.700 --> 01:29:23.460 align:start position:0%
have something in your mind telling you
oh<01:29:21.730><c> maybe</c><01:29:22.150><c> I</c><01:29:22.270><c> could</c><01:29:22.570><c> make</c><01:29:22.690><c> it</c><01:29:22.870><c> an</c><01:29:22.990><c> interface</c>

01:29:23.460 --> 01:29:23.470 align:start position:0%
oh maybe I could make it an interface
 

01:29:23.470 --> 01:29:25.560 align:start position:0%
oh maybe I could make it an interface
and<01:29:23.740><c> implement</c><01:29:24.730><c> that</c><01:29:24.820><c> using</c><01:29:25.180><c> the</c><01:29:25.270><c> lambda</c>

01:29:25.560 --> 01:29:25.570 align:start position:0%
and implement that using the lambda
 

01:29:25.570 --> 01:29:27.650 align:start position:0%
and implement that using the lambda
because<01:29:26.560><c> most</c><01:29:26.770><c> of</c><01:29:26.950><c> the</c><01:29:27.040><c> time</c><01:29:27.220><c> it's</c><01:29:27.370><c> possible</c>

01:29:27.650 --> 01:29:27.660 align:start position:0%
because most of the time it's possible
 

01:29:27.660 --> 01:29:32.090 align:start position:0%
because most of the time it's possible
I'm<01:29:28.660><c> going</c><01:29:28.960><c> to</c><01:29:29.140><c> call</c><01:29:29.650><c> this</c><01:29:29.800><c> shape</c><01:29:30.010><c> Factory</c>

01:29:32.090 --> 01:29:32.100 align:start position:0%
I'm going to call this shape Factory
 

01:29:32.100 --> 01:29:39.540 align:start position:0%
I'm going to call this shape Factory
need<01:29:33.100><c> to</c><01:29:33.250><c> rename</c><01:29:33.520><c> it</c><01:29:34.020><c> legacy</c><01:29:38.070><c> legacy</c><01:29:39.070><c> shape</c>

01:29:39.540 --> 01:29:39.550 align:start position:0%
need to rename it legacy legacy shape
 

01:29:39.550 --> 01:29:43.520 align:start position:0%
need to rename it legacy legacy shape
Factory<01:29:40.680><c> and</c><01:29:41.680><c> I'm</c><01:29:41.830><c> going</c><01:29:42.010><c> to</c><01:29:42.130><c> create</c><01:29:42.370><c> another</c>

01:29:43.520 --> 01:29:43.530 align:start position:0%
Factory and I'm going to create another
 

01:29:43.530 --> 01:29:56.149 align:start position:0%
Factory and I'm going to create another
shape<01:29:44.530><c> factory</c><01:29:48.570><c> as</c><01:29:49.570><c> an</c><01:29:49.840><c> interface</c>

01:29:56.149 --> 01:29:56.159 align:start position:0%
 
 

01:29:56.159 --> 01:29:58.070 align:start position:0%
 
and<01:29:56.760><c> I'm</c><01:29:56.909><c> just</c><01:29:57.090><c> keeping</c><01:29:57.420><c> the</c><01:29:57.540><c> same</c><01:29:57.750><c> method</c>

01:29:58.070 --> 01:29:58.080 align:start position:0%
and I'm just keeping the same method
 

01:29:58.080 --> 01:30:00.950 align:start position:0%
and I'm just keeping the same method
here<01:29:59.719><c> thank</c><01:30:00.719><c> you</c>

01:30:00.950 --> 01:30:00.960 align:start position:0%
here thank you
 

01:30:00.960 --> 01:30:09.450 align:start position:0%
here thank you
are<01:30:01.350><c> you</c><01:30:03.830><c> like</c><01:30:04.830><c> that</c>

01:30:09.450 --> 01:30:09.460 align:start position:0%
 
 

01:30:09.460 --> 01:30:11.550 align:start position:0%
 
you<01:30:10.030><c> can</c><01:30:10.180><c> see</c><01:30:10.330><c> that</c><01:30:10.480><c> this</c><01:30:10.990><c> code</c><01:30:11.170><c> is</c><01:30:11.320><c> still</c>

01:30:11.550 --> 01:30:11.560 align:start position:0%
you can see that this code is still
 

01:30:11.560 --> 01:30:14.580 align:start position:0%
you can see that this code is still
still<01:30:12.220><c> compiling</c><01:30:12.520><c> by</c><01:30:12.820><c> the</c><01:30:12.880><c> way</c><01:30:13.380><c> yes</c><01:30:14.380><c> because</c>

01:30:14.580 --> 01:30:14.590 align:start position:0%
still compiling by the way yes because
 

01:30:14.590 --> 01:30:31.209 align:start position:0%
still compiling by the way yes because
it's<01:30:14.920><c> now</c><01:30:15.160><c> built</c><01:30:15.700><c> on</c><01:30:15.850><c> sheer</c><01:30:16.060><c> factory</c>

01:30:31.209 --> 01:30:31.219 align:start position:0%
 
 

01:30:31.219 --> 01:30:38.859 align:start position:0%
 
it<01:30:32.219><c> keeps</c><01:30:32.519><c> please</c>

01:30:38.859 --> 01:30:38.869 align:start position:0%
 
 

01:30:38.869 --> 01:30:43.470 align:start position:0%
 
what<01:30:39.409><c> is</c><01:30:39.500><c> he</c><01:30:39.590><c> doing</c><01:30:40.719><c> doesn't</c><01:30:41.719><c> want</c><01:30:41.900><c> to</c><01:30:41.989><c> import</c>

01:30:43.470 --> 01:30:43.480 align:start position:0%
what is he doing doesn't want to import
 

01:30:43.480 --> 01:30:51.059 align:start position:0%
what is he doing doesn't want to import
refactoring

01:30:51.059 --> 01:30:51.069 align:start position:0%
 
 

01:30:51.069 --> 01:31:08.930 align:start position:0%
 
trusting<01:30:52.829><c> okay</c><01:30:53.829><c> this</c><01:30:53.979><c> is</c><01:30:54.099><c> do</c><01:30:54.219><c> it</c><01:30:54.339><c> by</c><01:30:54.489><c> him</c>

01:31:08.930 --> 01:31:08.940 align:start position:0%
 
 

01:31:08.940 --> 01:31:20.360 align:start position:0%
 
oh<01:31:08.970><c> yes</c><01:31:09.660><c> is</c><01:31:09.870><c> some</c><01:31:10.020><c> public</c><01:31:10.170><c> sorry</c><01:31:17.000><c> okay</c><01:31:19.370><c> and</c>

01:31:20.360 --> 01:31:20.370 align:start position:0%
oh yes is some public sorry okay and
 

01:31:20.370 --> 01:31:22.220 align:start position:0%
oh yes is some public sorry okay and
this<01:31:20.550><c> bit</c><01:31:20.790><c> that</c><01:31:20.820><c> bill</c><01:31:21.300><c> is</c><01:31:21.540><c> going</c><01:31:21.810><c> to</c><01:31:21.900><c> return</c>

01:31:22.220 --> 01:31:22.230 align:start position:0%
this bit that bill is going to return
 

01:31:22.230 --> 01:31:26.810 align:start position:0%
this bit that bill is going to return
the<01:31:22.410><c> ship</c><01:31:22.560><c> factory</c><01:31:23.060><c> yes</c><01:31:24.830><c> okay</c><01:31:25.830><c> so</c><01:31:25.860><c> my</c><01:31:26.280><c> shape</c>

01:31:26.810 --> 01:31:26.820 align:start position:0%
the ship factory yes okay so my shape
 

01:31:26.820 --> 01:31:30.530 align:start position:0%
the ship factory yes okay so my shape
factor<01:31:27.150><c> is</c><01:31:27.360><c> now</c><01:31:27.570><c> is</c><01:31:27.810><c> now</c><01:31:28.050><c> and</c><01:31:28.470><c> now</c><01:31:29.180><c> I</c><01:31:30.180><c> need</c><01:31:30.420><c> to</c>

01:31:30.530 --> 01:31:30.540 align:start position:0%
factor is now is now and now I need to
 

01:31:30.540 --> 01:31:33.020 align:start position:0%
factor is now is now and now I need to
face<01:31:30.720><c> and</c><01:31:30.930><c> I'm</c><01:31:31.160><c> going</c><01:31:32.160><c> to</c><01:31:32.370><c> implement</c><01:31:32.580><c> it</c><01:31:32.880><c> using</c>

01:31:33.020 --> 01:31:33.030 align:start position:0%
face and I'm going to implement it using
 

01:31:33.030 --> 01:31:36.440 align:start position:0%
face and I'm going to implement it using
a<01:31:33.240><c> lumber</c><01:31:33.650><c> now</c><01:31:34.650><c> what</c><01:31:34.950><c> is</c><01:31:35.070><c> this</c><01:31:35.280><c> admitted</c><01:31:36.240><c> going</c>

01:31:36.440 --> 01:31:36.450 align:start position:0%
a lumber now what is this admitted going
 

01:31:36.450 --> 01:31:40.280 align:start position:0%
a lumber now what is this admitted going
to<01:31:36.570><c> do</c><01:31:36.720><c> well</c><01:31:37.200><c> it</c><01:31:37.440><c> will</c><01:31:37.620><c> have</c><01:31:37.800><c> to</c><01:31:38.370><c> put</c><01:31:38.910><c> this</c><01:31:39.290><c> in</c>

01:31:40.280 --> 01:31:40.290 align:start position:0%
to do well it will have to put this in
 

01:31:40.290 --> 01:31:42.170 align:start position:0%
to do well it will have to put this in
some<01:31:40.560><c> kind</c><01:31:40.800><c> of</c><01:31:40.860><c> registry</c><01:31:41.400><c> so</c><01:31:41.670><c> let</c><01:31:41.850><c> us</c><01:31:41.880><c> create</c>

01:31:42.170 --> 01:31:42.180 align:start position:0%
some kind of registry so let us create
 

01:31:42.180 --> 01:31:45.740 align:start position:0%
some kind of registry so let us create
that<01:31:42.420><c> map</c><01:31:43.520><c> this</c><01:31:44.520><c> is</c><01:31:44.700><c> the</c><01:31:44.850><c> natural</c><01:31:45.270><c> way</c><01:31:45.510><c> of</c>

01:31:45.740 --> 01:31:45.750 align:start position:0%
that map this is the natural way of
 

01:31:45.750 --> 01:31:52.390 align:start position:0%
that map this is the natural way of
doing<01:31:46.470><c> it's</c><01:31:46.650><c> a</c><01:31:46.860><c> map</c><01:31:47.010><c> of</c><01:31:47.040><c> stranger</c><01:31:47.670><c> and</c><01:31:48.150><c> factory</c>

01:31:52.390 --> 01:31:52.400 align:start position:0%
 
 

01:31:52.400 --> 01:31:59.990 align:start position:0%
 
of<01:31:53.400><c> T</c><01:31:55.340><c> registry</c><01:31:56.340><c> when</c><01:31:56.790><c> you</c><01:31:56.910><c> wash</c><01:31:57.060><c> map</c><01:31:58.670><c> ok</c><01:31:59.670><c> and</c>

01:31:59.990 --> 01:32:00.000 align:start position:0%
of T registry when you wash map ok and
 

01:32:00.000 --> 01:32:02.540 align:start position:0%
of T registry when you wash map ok and
what<01:32:00.210><c> I'm</c><01:32:00.300><c> going</c><01:32:00.510><c> to</c><01:32:00.600><c> do</c><01:32:00.780><c> is</c><01:32:01.020><c> just</c><01:32:01.350><c> add</c><01:32:01.620><c> this</c>

01:32:02.540 --> 01:32:02.550 align:start position:0%
what I'm going to do is just add this
 

01:32:02.550 --> 01:32:14.600 align:start position:0%
what I'm going to do is just add this
registry<01:32:03.410><c> put</c><01:32:05.810><c> yes</c><01:32:06.810><c> key</c><01:32:12.320><c> and</c><01:32:13.320><c> now</c><01:32:13.620><c> when</c><01:32:14.490><c> I'm</c>

01:32:14.600 --> 01:32:14.610 align:start position:0%
registry put yes key and now when I'm
 

01:32:14.610 --> 01:32:16.400 align:start position:0%
registry put yes key and now when I'm
building<01:32:14.940><c> this</c><01:32:15.240><c> stuff</c><01:32:15.480><c> what</c><01:32:15.990><c> I</c><01:32:16.020><c> need</c><01:32:16.290><c> to</c>

01:32:16.400 --> 01:32:16.410 align:start position:0%
building this stuff what I need to
 

01:32:16.410 --> 01:32:17.870 align:start position:0%
building this stuff what I need to
return<01:32:16.710><c> is</c><01:32:16.920><c> a</c><01:32:16.980><c> shape</c><01:32:17.370><c> factory</c>

01:32:17.870 --> 01:32:17.880 align:start position:0%
return is a shape factory
 

01:32:17.880 --> 01:32:21.050 align:start position:0%
return is a shape factory
what<01:32:18.870><c> is</c><01:32:18.990><c> this</c><01:32:19.140><c> shape</c><01:32:19.380><c> factory</c><01:32:19.880><c> it's</c><01:32:20.880><c> an</c>

01:32:21.050 --> 01:32:21.060 align:start position:0%
what is this shape factory it's an
 

01:32:21.060 --> 01:32:23.840 align:start position:0%
what is this shape factory it's an
interface<01:32:21.450><c> that</c><01:32:22.140><c> is</c><01:32:22.290><c> functional</c><01:32:22.800><c> so</c><01:32:23.580><c> it</c><01:32:23.670><c> can</c>

01:32:23.840 --> 01:32:23.850 align:start position:0%
interface that is functional so it can
 

01:32:23.850 --> 01:32:26.750 align:start position:0%
interface that is functional so it can
be<01:32:24.000><c> implemented</c><01:32:24.330><c> using</c><01:32:24.900><c> lambda</c><01:32:25.470><c> how</c><01:32:26.400><c> can</c><01:32:26.670><c> i</c>

01:32:26.750 --> 01:32:26.760 align:start position:0%
be implemented using lambda how can i
 

01:32:26.760 --> 01:32:29.380 align:start position:0%
be implemented using lambda how can i
implement<01:32:27.030><c> it</c><01:32:27.410><c> implemented</c><01:32:28.410><c> using</c><01:32:28.800><c> a</c><01:32:29.040><c> lambda</c>

01:32:29.380 --> 01:32:29.390 align:start position:0%
implement it implemented using a lambda
 

01:32:29.390 --> 01:32:43.939 align:start position:0%
implement it implemented using a lambda
just<01:32:30.390><c> copy</c><01:32:30.630><c> paste</c><01:32:31.700><c> the</c><01:32:32.700><c> block</c><01:32:32.910><c> of</c><01:32:33.060><c> parameter</c>

01:32:43.939 --> 01:32:43.949 align:start position:0%
 
 

01:32:43.949 --> 01:32:48.050 align:start position:0%
 
and<01:32:44.040><c> from</c><01:32:44.460><c> that</c><01:32:44.489><c> key</c><01:32:44.850><c> I</c><01:32:44.880><c> need</c><01:32:45.120><c> to</c><01:32:45.300><c> get</c><01:32:47.060><c> the</c>

01:32:48.050 --> 01:32:48.060 align:start position:0%
and from that key I need to get the
 

01:32:48.060 --> 01:32:51.970 align:start position:0%
and from that key I need to get the
factory<01:32:48.449><c> that</c><01:32:48.870><c> is</c><01:32:49.020><c> here</c><01:32:49.260><c> because</c><01:32:49.520><c> this</c><01:32:50.570><c> sorry</c>

01:32:51.970 --> 01:32:51.980 align:start position:0%
factory that is here because this sorry
 

01:32:51.980 --> 01:32:54.500 align:start position:0%
factory that is here because this sorry
this<01:32:52.980><c> implementation</c><01:32:53.550><c> returns</c><01:32:54.060><c> a</c><01:32:54.150><c> factory</c>

01:32:54.500 --> 01:32:54.510 align:start position:0%
this implementation returns a factory
 

01:32:54.510 --> 01:32:57.860 align:start position:0%
this implementation returns a factory
and<01:32:55.020><c> the</c><01:32:55.860><c> factories</c><01:32:56.310><c> in</c><01:32:56.460><c> the</c><01:32:56.550><c> map</c><01:32:56.699><c> so</c><01:32:57.030><c> do</c><01:32:57.719><c> this</c>

01:32:57.860 --> 01:32:57.870 align:start position:0%
and the factories in the map so do this
 

01:32:57.870 --> 01:33:27.020 align:start position:0%
and the factories in the map so do this
kind<01:32:58.140><c> of</c><01:32:58.230><c> thing</c><01:32:58.440><c> registry</c><01:32:59.429><c> but</c><01:33:00.150><c> get</c>

01:33:27.020 --> 01:33:27.030 align:start position:0%
 
 

01:33:27.030 --> 01:33:32.229 align:start position:0%
 
troubles<01:33:27.929><c> with</c><01:33:28.050><c> the</c><01:33:28.349><c> generic</c><01:33:29.280><c> stuff</c><01:33:29.639><c> man</c>

01:33:32.229 --> 01:33:32.239 align:start position:0%
troubles with the generic stuff man
 

01:33:32.239 --> 01:33:37.459 align:start position:0%
troubles with the generic stuff man
excuse<01:33:33.239><c> me</c>

01:33:37.459 --> 01:33:37.469 align:start position:0%
 
 

01:33:37.469 --> 01:33:55.530 align:start position:0%
 
make<01:33:38.469><c> it</c><01:33:38.619><c> what</c><01:33:42.179><c> it's</c><01:33:43.179><c> me</c><01:33:43.330><c> to</c><01:33:43.449><c> try</c><01:33:43.659><c> to</c><01:33:43.719><c> the</c><01:33:43.960><c> final</c>

01:33:55.530 --> 01:33:55.540 align:start position:0%
 
 

01:33:55.540 --> 01:34:00.100 align:start position:0%
 
okay<01:33:56.830><c> so</c><01:33:57.830><c> in</c><01:33:57.980><c> fact</c><01:33:58.159><c> this</c><01:33:58.489><c> bill</c><01:33:58.550><c> method</c><01:33:59.300><c> is</c><01:33:59.750><c> just</c>

01:34:00.100 --> 01:34:00.110 align:start position:0%
okay so in fact this bill method is just
 

01:34:00.110 --> 01:34:05.169 align:start position:0%
okay so in fact this bill method is just
I'm<01:34:00.500><c> going</c><01:34:00.679><c> to</c><01:34:03.280><c> to</c><01:34:04.280><c> make</c><01:34:04.429><c> it</c><01:34:04.580><c> like</c><01:34:04.760><c> that</c><01:34:04.909><c> you</c>

01:34:05.169 --> 01:34:05.179 align:start position:0%
I'm going to to make it like that you
 

01:34:05.179 --> 01:34:07.620 align:start position:0%
I'm going to to make it like that you
see<01:34:05.360><c> I'm</c><01:34:05.810><c> going</c><01:34:06.020><c> to</c><01:34:06.139><c> copy</c><01:34:06.349><c> paste</c><01:34:06.440><c> this</c><01:34:06.710><c> code</c>

01:34:07.620 --> 01:34:07.630 align:start position:0%
see I'm going to copy paste this code
 

01:34:07.630 --> 01:34:13.660 align:start position:0%
see I'm going to copy paste this code
repeat<01:34:08.630><c> here</c><01:34:09.230><c> because</c><01:34:10.070><c> in</c><01:34:10.190><c> fact</c><01:34:10.340><c> this</c><01:34:10.580><c> code</c><01:34:12.670><c> is</c>

01:34:13.660 --> 01:34:13.670 align:start position:0%
repeat here because in fact this code is
 

01:34:13.670 --> 01:34:17.439 align:start position:0%
repeat here because in fact this code is
a<01:34:13.730><c> method</c><01:34:14.119><c> reference</c><01:34:15.880><c> it's</c><01:34:16.880><c> just</c><01:34:17.090><c> a</c><01:34:17.270><c> get</c>

01:34:17.439 --> 01:34:17.449 align:start position:0%
a method reference it's just a get
 

01:34:17.449 --> 01:34:20.470 align:start position:0%
a method reference it's just a get
method<01:34:17.630><c> of</c><01:34:17.960><c> my</c><01:34:18.080><c> register</c><01:34:18.969><c> and</c><01:34:19.969><c> this</c><01:34:20.150><c> this</c><01:34:20.420><c> is</c>

01:34:20.470 --> 01:34:20.480 align:start position:0%
method of my register and this this is
 

01:34:20.480 --> 01:34:22.120 align:start position:0%
method of my register and this this is
what<01:34:20.599><c> it</c><01:34:20.869><c> is</c><01:34:20.989><c> in</c><01:34:21.139><c> fact</c><01:34:21.290><c> to</c><01:34:21.500><c> Bill</c><01:34:21.679><c> do</c><01:34:21.800><c> it</c><01:34:21.889><c> Chester</c>

01:34:22.120 --> 01:34:22.130 align:start position:0%
what it is in fact to Bill do it Chester
 

01:34:22.130 --> 01:34:24.399 align:start position:0%
what it is in fact to Bill do it Chester
it's<01:34:22.520><c> just</c><01:34:22.760><c> a</c><01:34:22.880><c> registry</c><01:34:23.360><c> and</c><01:34:23.659><c> when</c><01:34:23.989><c> I</c><01:34:24.020><c> create</c>

01:34:24.399 --> 01:34:24.409 align:start position:0%
it's just a registry and when I create
 

01:34:24.409 --> 01:34:27.089 align:start position:0%
it's just a registry and when I create
the<01:34:24.530><c> stuff</c><01:34:24.739><c> I'm</c><01:34:24.920><c> just</c><01:34:25.159><c> giving</c><01:34:25.790><c> it</c><01:34:25.849><c> to</c><01:34:26.570><c> this</c><01:34:26.719><c> map</c>

01:34:27.089 --> 01:34:27.099 align:start position:0%
the stuff I'm just giving it to this map
 

01:34:27.099 --> 01:34:30.100 align:start position:0%
the stuff I'm just giving it to this map
but<01:34:28.099><c> I'm</c><01:34:28.190><c> still</c><01:34:28.489><c> not</c><01:34:28.790><c> quite</c><01:34:29.449><c> happy</c><01:34:29.840><c> with</c><01:34:29.960><c> the</c>

01:34:30.100 --> 01:34:30.110 align:start position:0%
but I'm still not quite happy with the
 

01:34:30.110 --> 01:34:32.950 align:start position:0%
but I'm still not quite happy with the
code<01:34:30.290><c> because</c><01:34:30.650><c> here</c><01:34:31.280><c> I</c><01:34:31.520><c> have</c><01:34:32.330><c> some</c><01:34:32.690><c> code</c><01:34:32.929><c> that</c>

01:34:32.950 --> 01:34:32.960 align:start position:0%
code because here I have some code that
 

01:34:32.960 --> 01:34:36.060 align:start position:0%
code because here I have some code that
is<01:34:33.199><c> going</c><01:34:33.380><c> to</c><01:34:33.679><c> call</c><01:34:34.219><c> add</c><01:34:34.489><c> multiple</c><01:34:35.300><c> times</c><01:34:35.540><c> and</c>

01:34:36.060 --> 01:34:36.070 align:start position:0%
is going to call add multiple times and
 

01:34:36.070 --> 01:34:40.209 align:start position:0%
is going to call add multiple times and
to<01:34:37.719><c> cook</c><01:34:38.719><c> that</c><01:34:38.929><c> can</c><01:34:39.110><c> be</c><01:34:39.230><c> interrupted</c><01:34:39.800><c> that</c><01:34:39.830><c> can</c>

01:34:40.209 --> 01:34:40.219 align:start position:0%
to cook that can be interrupted that can
 

01:34:40.219 --> 01:34:43.300 align:start position:0%
to cook that can be interrupted that can
be<01:34:40.369><c> made</c><01:34:41.000><c> multi-threaded</c><01:34:41.750><c> that</c><01:34:42.020><c> can</c><01:34:42.310><c> subject</c>

01:34:43.300 --> 01:34:43.310 align:start position:0%
be made multi-threaded that can subject
 

01:34:43.310 --> 01:34:44.740 align:start position:0%
be made multi-threaded that can subject
to<01:34:43.429><c> reflection</c><01:34:43.940><c> it's</c><01:34:44.150><c> not</c><01:34:44.330><c> it's</c><01:34:44.510><c> not</c><01:34:44.690><c> that</c>

01:34:44.740 --> 01:34:44.750 align:start position:0%
to reflection it's not it's not that
 

01:34:44.750 --> 01:34:47.859 align:start position:0%
to reflection it's not it's not that
great<01:34:45.139><c> but</c><01:34:46.099><c> if</c><01:34:46.219><c> I</c><01:34:46.400><c> check</c><01:34:47.060><c> what</c><01:34:47.300><c> does</c><01:34:47.480><c> this</c><01:34:47.630><c> code</c>

01:34:47.859 --> 01:34:47.869 align:start position:0%
great but if I check what does this code
 

01:34:47.869 --> 01:34:49.660 align:start position:0%
great but if I check what does this code
do<01:34:48.080><c> in</c><01:34:48.199><c> fact</c><01:34:48.409><c> and</c><01:34:48.739><c> I'm</c><01:34:48.800><c> going</c><01:34:49.010><c> to</c><01:34:49.159><c> use</c><01:34:49.310><c> the</c><01:34:49.460><c> same</c>

01:34:49.660 --> 01:34:49.670 align:start position:0%
do in fact and I'm going to use the same
 

01:34:49.670 --> 01:34:52.120 align:start position:0%
do in fact and I'm going to use the same
trick<01:34:49.940><c> I</c><01:34:50.150><c> use</c><01:34:50.420><c> to</c><01:34:50.449><c> show</c><01:34:50.840><c> you</c><01:34:51.070><c> how</c><01:34:52.070><c> the</c>

01:34:52.120 --> 01:34:52.130 align:start position:0%
trick I use to show you how the
 

01:34:52.130 --> 01:34:56.020 align:start position:0%
trick I use to show you how the
comparator<01:34:52.820><c> was</c><01:34:53.000><c> made</c><01:34:54.159><c> if</c><01:34:55.159><c> I</c><01:34:55.369><c> extract</c><01:34:55.849><c> this</c>

01:34:56.020 --> 01:34:56.030 align:start position:0%
comparator was made if I extract this
 

01:34:56.030 --> 01:34:59.470 align:start position:0%
comparator was made if I extract this
code<01:34:56.300><c> to</c><01:34:56.510><c> this</c><01:34:56.659><c> to</c><01:34:57.440><c> a</c><01:34:57.469><c> method</c><01:34:57.800><c> or</c><01:34:58.060><c> what</c><01:34:59.060><c> I</c><01:34:59.090><c> see</c>

01:34:59.470 --> 01:34:59.480 align:start position:0%
code to this to a method or what I see
 

01:34:59.480 --> 01:35:02.229 align:start position:0%
code to this to a method or what I see
is<01:34:59.540><c> that</c><01:34:59.659><c> in</c><01:34:59.989><c> fact</c><01:35:00.369><c> it's</c><01:35:01.369><c> a</c><01:35:01.520><c> piece</c><01:35:01.849><c> of</c><01:35:02.000><c> code</c>

01:35:02.229 --> 01:35:02.239 align:start position:0%
is that in fact it's a piece of code
 

01:35:02.239 --> 01:35:04.540 align:start position:0%
is that in fact it's a piece of code
that<01:35:02.270><c> takes</c><01:35:02.690><c> a</c><01:35:02.840><c> builder</c><01:35:03.290><c> as</c><01:35:03.560><c> a</c><01:35:03.619><c> parameter</c><01:35:04.250><c> and</c>

01:35:04.540 --> 01:35:04.550 align:start position:0%
that takes a builder as a parameter and
 

01:35:04.550 --> 01:35:08.950 align:start position:0%
that takes a builder as a parameter and
does<01:35:05.480><c> not</c><01:35:05.659><c> return</c><01:35:05.960><c> anything</c><01:35:07.060><c> so</c><01:35:08.060><c> in</c><01:35:08.570><c> a</c><01:35:08.719><c> sense</c>

01:35:08.950 --> 01:35:08.960 align:start position:0%
does not return anything so in a sense
 

01:35:08.960 --> 01:35:11.709 align:start position:0%
does not return anything so in a sense
what<01:35:09.320><c> is</c><01:35:09.530><c> this</c><01:35:09.949><c> piece</c><01:35:10.250><c> of</c><01:35:10.280><c> code</c><01:35:10.719><c> take</c>

01:35:11.709 --> 01:35:11.719 align:start position:0%
what is this piece of code take
 

01:35:11.719 --> 01:35:13.890 align:start position:0%
what is this piece of code take
something<01:35:12.170><c> does</c><01:35:12.830><c> not</c><01:35:13.010><c> return</c><01:35:13.369><c> anything</c>

01:35:13.890 --> 01:35:13.900 align:start position:0%
something does not return anything
 

01:35:13.900 --> 01:35:16.270 align:start position:0%
something does not return anything
it's<01:35:14.900><c> itself</c><01:35:15.230><c> a</c><01:35:15.349><c> lambda</c><01:35:15.500><c> expression</c><01:35:15.679><c> that</c><01:35:16.159><c> is</c>

01:35:16.270 --> 01:35:16.280 align:start position:0%
it's itself a lambda expression that is
 

01:35:16.280 --> 01:35:19.089 align:start position:0%
it's itself a lambda expression that is
a<01:35:16.310><c> consumer</c><01:35:16.790><c> right</c><01:35:17.570><c> so</c><01:35:18.320><c> in</c><01:35:18.409><c> fact</c><01:35:18.619><c> all</c><01:35:18.830><c> this</c>

01:35:19.089 --> 01:35:19.099 align:start position:0%
a consumer right so in fact all this
 

01:35:19.099 --> 01:35:23.470 align:start position:0%
a consumer right so in fact all this
code<01:35:19.630><c> can</c><01:35:20.630><c> be</c><01:35:20.659><c> returned</c><01:35:21.199><c> as</c><01:35:21.409><c> a</c><01:35:21.739><c> consumer</c><01:35:22.480><c> let's</c>

01:35:23.470 --> 01:35:23.480 align:start position:0%
code can be returned as a consumer let's
 

01:35:23.480 --> 01:35:27.729 align:start position:0%
code can be returned as a consumer let's
do<01:35:23.719><c> that</c><01:35:24.880><c> it's</c><01:35:25.880><c> a</c><01:35:25.969><c> consumer</c><01:35:26.270><c> of</c><01:35:26.449><c> what</c><01:35:26.739><c> the</c>

01:35:27.729 --> 01:35:27.739 align:start position:0%
do that it's a consumer of what the
 

01:35:27.739 --> 01:35:34.270 align:start position:0%
do that it's a consumer of what the
consumer<01:35:28.099><c> vinda</c><01:35:28.960><c> okay</c><01:35:32.020><c> consumer</c><01:35:33.020><c> of</c><01:35:33.800><c> builder</c>

01:35:34.270 --> 01:35:34.280 align:start position:0%
consumer vinda okay consumer of builder
 

01:35:34.280 --> 01:35:38.200 align:start position:0%
consumer vinda okay consumer of builder
of<01:35:35.139><c> shape</c><01:35:36.139><c> let's</c><01:35:37.040><c> call</c><01:35:37.219><c> it</c><01:35:37.310><c> consumer</c><01:35:37.790><c> for</c><01:35:38.150><c> the</c>

01:35:38.200 --> 01:35:38.210 align:start position:0%
of shape let's call it consumer for the
 

01:35:38.210 --> 01:35:43.300 align:start position:0%
of shape let's call it consumer for the
moment<01:35:38.510><c> it</c><01:35:39.320><c> takes</c><01:35:39.650><c> a</c><01:35:40.690><c> builder</c><01:35:41.690><c> as</c><01:35:42.619><c> a</c><01:35:42.949><c> parameter</c>

01:35:43.300 --> 01:35:43.310 align:start position:0%
moment it takes a builder as a parameter
 

01:35:43.310 --> 01:35:45.640 align:start position:0%
moment it takes a builder as a parameter
I'm<01:35:44.000><c> just</c><01:35:44.210><c> going</c><01:35:44.420><c> to</c><01:35:44.480><c> write</c><01:35:44.750><c> it</c><01:35:44.960><c> below</c><01:35:45.349><c> like</c>

01:35:45.640 --> 01:35:45.650 align:start position:0%
I'm just going to write it below like
 

01:35:45.650 --> 01:35:52.570 align:start position:0%
I'm just going to write it below like
that<01:35:45.849><c> and</c><01:35:47.770><c> does</c><01:35:48.770><c> this</c><01:35:49.030><c> here</c><01:35:50.030><c> I</c><01:35:50.800><c> can</c><01:35:51.800><c> get</c><01:35:51.980><c> rid</c><01:35:52.190><c> of</c>

01:35:52.570 --> 01:35:52.580 align:start position:0%
that and does this here I can get rid of
 

01:35:52.580 --> 01:35:55.620 align:start position:0%
that and does this here I can get rid of
this<01:35:52.940><c> method</c><01:35:53.330><c> I</c><01:35:53.409><c> do</c><01:35:54.409><c> not</c><01:35:54.530><c> need</c><01:35:54.770><c> it</c><01:35:54.830><c> anymore</c>

01:35:55.620 --> 01:35:55.630 align:start position:0%
this method I do not need it anymore
 

01:35:55.630 --> 01:36:01.780 align:start position:0%
this method I do not need it anymore
and<01:35:56.630><c> now</c><01:35:58.900><c> the</c><01:35:59.900><c> nice</c><01:36:00.170><c> stuff</c><01:36:00.469><c> is</c><01:36:00.710><c> I</c><01:36:01.040><c> do</c><01:36:01.190><c> not</c><01:36:01.520><c> need</c>

01:36:01.780 --> 01:36:01.790 align:start position:0%
and now the nice stuff is I do not need
 

01:36:01.790 --> 01:36:05.410 align:start position:0%
and now the nice stuff is I do not need
that<01:36:01.820><c> bit</c><01:36:02.179><c> anymore</c><01:36:02.659><c> I</c><01:36:03.280><c> do</c><01:36:04.280><c> not</c><01:36:04.460><c> need</c><01:36:04.849><c> a</c><01:36:04.909><c> builder</c>

01:36:05.410 --> 01:36:05.420 align:start position:0%
that bit anymore I do not need a builder
 

01:36:05.420 --> 01:36:05.920 align:start position:0%
that bit anymore I do not need a builder
in

01:36:05.920 --> 01:36:05.930 align:start position:0%
in
 

01:36:05.930 --> 01:36:08.350 align:start position:0%
in
my<01:36:05.990><c> application</c><01:36:06.590><c> code</c><01:36:06.800><c> to</c><01:36:07.730><c> initialize</c><01:36:08.030><c> a</c>

01:36:08.350 --> 01:36:08.360 align:start position:0%
my application code to initialize a
 

01:36:08.360 --> 01:36:10.870 align:start position:0%
my application code to initialize a
builder<01:36:08.780><c> and</c><01:36:09.680><c> you</c><01:36:09.710><c> have</c><01:36:09.890><c> created</c><01:36:10.250><c> the</c><01:36:10.550><c> model</c>

01:36:10.870 --> 01:36:10.880 align:start position:0%
builder and you have created the model
 

01:36:10.880 --> 01:36:13.000 align:start position:0%
builder and you have created the model
of<01:36:11.180><c> initialization</c><01:36:11.660><c> and</c><01:36:12.230><c> this</c><01:36:12.470><c> is</c><01:36:12.620><c> a</c><01:36:12.650><c> very</c>

01:36:13.000 --> 01:36:13.010 align:start position:0%
of initialization and this is a very
 

01:36:13.010 --> 01:36:16.180 align:start position:0%
of initialization and this is a very
very<01:36:13.370><c> general</c><01:36:14.330><c> pattern</c><01:36:14.690><c> in</c><01:36:15.470><c> fact</c><01:36:15.770><c> the</c><01:36:15.950><c> process</c>

01:36:16.180 --> 01:36:16.190 align:start position:0%
very general pattern in fact the process
 

01:36:16.190 --> 01:36:18.340 align:start position:0%
very general pattern in fact the process
of<01:36:16.550><c> finishing</c><01:36:16.760><c> an</c><01:36:17.360><c> object</c><01:36:17.720><c> using</c><01:36:17.870><c> a</c><01:36:18.080><c> builder</c>

01:36:18.340 --> 01:36:18.350 align:start position:0%
of finishing an object using a builder
 

01:36:18.350 --> 01:36:21.820 align:start position:0%
of finishing an object using a builder
is<01:36:19.010><c> basically</c><01:36:19.520><c> a</c><01:36:19.670><c> consumer</c><01:36:20.410><c> so</c><01:36:21.410><c> you</c><01:36:21.470><c> can</c><01:36:21.620><c> write</c>

01:36:21.820 --> 01:36:21.830 align:start position:0%
is basically a consumer so you can write
 

01:36:21.830 --> 01:36:25.630 align:start position:0%
is basically a consumer so you can write
this<01:36:22.100><c> consumer</c><01:36:22.780><c> pass</c><01:36:23.780><c> this</c><01:36:24.050><c> consumer</c><01:36:24.650><c> this</c>

01:36:25.630 --> 01:36:25.640 align:start position:0%
this consumer pass this consumer this
 

01:36:25.640 --> 01:36:30.070 align:start position:0%
this consumer pass this consumer this
extracted<01:36:26.360><c> stuff</c><01:36:27.520><c> passed</c><01:36:28.520><c> this</c><01:36:28.730><c> consumer</c><01:36:29.390><c> to</c>

01:36:30.070 --> 01:36:30.080 align:start position:0%
extracted stuff passed this consumer to
 

01:36:30.080 --> 01:36:32.290 align:start position:0%
extracted stuff passed this consumer to
a<01:36:30.110><c> factoring</c><01:36:30.650><c> method</c><01:36:30.980><c> of</c><01:36:31.340><c> our</c><01:36:31.940><c> builder</c>

01:36:32.290 --> 01:36:32.300 align:start position:0%
a factoring method of our builder
 

01:36:32.300 --> 01:36:38.230 align:start position:0%
a factoring method of our builder
interface<01:36:33.550><c> builder</c><01:36:35.080><c> create</c><01:36:37.000><c> pass</c><01:36:38.000><c> this</c>

01:36:38.230 --> 01:36:38.240 align:start position:0%
interface builder create pass this
 

01:36:38.240 --> 01:36:41.950 align:start position:0%
interface builder create pass this
consumer<01:36:38.840><c> as</c><01:36:39.620><c> a</c><01:36:39.680><c> parameter</c><01:36:40.340><c> and</c><01:36:41.180><c> now</c><01:36:41.570><c> what</c><01:36:41.930><c> I</c>

01:36:41.950 --> 01:36:41.960 align:start position:0%
consumer as a parameter and now what I
 

01:36:41.960 --> 01:36:49.720 align:start position:0%
consumer as a parameter and now what I
expect<01:36:42.530><c> to</c><01:36:42.680><c> have</c><01:36:42.860><c> as</c><01:36:43.460><c> a</c><01:36:44.120><c> returned</c><01:36:44.600><c> object</c><01:36:48.670><c> is</c><01:36:49.670><c> a</c>

01:36:49.720 --> 01:36:49.730 align:start position:0%
expect to have as a returned object is a
 

01:36:49.730 --> 01:36:53.140 align:start position:0%
expect to have as a returned object is a
bigger<01:36:50.060><c> object</c><01:36:50.270><c> that</c><01:36:51.140><c> is</c><01:36:51.320><c> both</c><01:36:51.700><c> created</c><01:36:52.700><c> and</c>

01:36:53.140 --> 01:36:53.150 align:start position:0%
bigger object that is both created and
 

01:36:53.150 --> 01:36:56.560 align:start position:0%
bigger object that is both created and
initialized<01:36:54.160><c> with</c><01:36:55.160><c> the</c><01:36:55.340><c> consumer</c><01:36:55.880><c> I</c><01:36:56.060><c> have</c>

01:36:56.560 --> 01:36:56.570 align:start position:0%
initialized with the consumer I have
 

01:36:56.570 --> 01:37:00.070 align:start position:0%
initialized with the consumer I have
provided<01:36:57.520><c> ok</c><01:36:58.520><c> so</c><01:36:59.210><c> what</c><01:36:59.390><c> is</c><01:36:59.480><c> this</c><01:36:59.660><c> method</c>

01:37:00.070 --> 01:37:00.080 align:start position:0%
provided ok so what is this method
 

01:37:00.080 --> 01:37:02.920 align:start position:0%
provided ok so what is this method
obviously<01:37:00.950><c> it's</c><01:37:01.490><c> a</c><01:37:01.580><c> static</c><01:37:02.030><c> method</c><01:37:02.240><c> on</c><01:37:02.750><c> my</c>

01:37:02.920 --> 01:37:02.930 align:start position:0%
obviously it's a static method on my
 

01:37:02.930 --> 01:37:08.890 align:start position:0%
obviously it's a static method on my
builder<01:37:03.260><c> interface</c><01:37:05.290><c> public</c><01:37:06.290><c> static</c><01:37:07.660><c> or</c><01:37:08.660><c> did</c><01:37:08.810><c> I</c>

01:37:08.890 --> 01:37:08.900 align:start position:0%
builder interface public static or did I
 

01:37:08.900 --> 01:37:11.530 align:start position:0%
builder interface public static or did I
call<01:37:08.930><c> it</c><01:37:09.280><c> create</c><01:37:10.280><c> texture</c><01:37:10.880><c> consumer</c><01:37:11.360><c> as</c><01:37:11.420><c> a</c>

01:37:11.530 --> 01:37:11.540 align:start position:0%
call it create texture consumer as a
 

01:37:11.540 --> 01:37:17.200 align:start position:0%
call it create texture consumer as a
parameter<01:37:11.800><c> returns</c><01:37:12.800><c> a</c><01:37:12.890><c> builder</c><01:37:13.690><c> okay</c><01:37:14.690><c> with</c><01:37:16.210><c> of</c>

01:37:17.200 --> 01:37:17.210 align:start position:0%
parameter returns a builder okay with of
 

01:37:17.210 --> 01:37:24.070 align:start position:0%
parameter returns a builder okay with of
T<01:37:17.480><c> I</c><01:37:19.120><c> need</c><01:37:20.120><c> to</c><01:37:20.240><c> tell</c><01:37:20.480><c> the</c><01:37:21.050><c> acidity</c><01:37:22.390><c> create</c><01:37:23.390><c> and</c>

01:37:24.070 --> 01:37:24.080 align:start position:0%
T I need to tell the acidity create and
 

01:37:24.080 --> 01:37:29.680 align:start position:0%
T I need to tell the acidity create and
take<01:37:24.290><c> the</c><01:37:24.470><c> consumer</c><01:37:25.010><c> of</c><01:37:25.730><c> builder</c><01:37:26.270><c> of</c><01:37:28.450><c> T</c><01:37:29.450><c> as</c><01:37:29.630><c> a</c>

01:37:29.680 --> 01:37:29.690 align:start position:0%
take the consumer of builder of T as a
 

01:37:29.690 --> 01:37:39.139 align:start position:0%
take the consumer of builder of T as a
parameter<01:37:30.650><c> and</c><01:37:31.160><c> this</c><01:37:31.400><c> is</c><01:37:31.610><c> my</c><01:37:32.150><c> initializer</c>

01:37:39.139 --> 01:37:39.149 align:start position:0%
 
 

01:37:39.149 --> 01:37:44.009 align:start position:0%
 
let<01:37:40.149><c> us</c><01:37:40.300><c> return</c><01:37:40.659><c> you</c><01:37:40.869><c> to</c><01:37:42.539><c> see</c><01:37:43.539><c> if</c><01:37:43.659><c> we</c><01:37:43.809><c> got</c><01:37:43.959><c> it</c>

01:37:44.009 --> 01:37:44.019 align:start position:0%
let us return you to see if we got it
 

01:37:44.019 --> 01:37:49.560 align:start position:0%
let us return you to see if we got it
right<01:37:44.169><c> I</c><01:37:44.820><c> think</c><01:37:45.820><c> so</c><01:37:46.269><c> all</c><01:37:47.169><c> right</c><01:37:48.059><c> so</c><01:37:49.059><c> now</c><01:37:49.269><c> in</c>

01:37:49.560 --> 01:37:49.570 align:start position:0%
right I think so all right so now in
 

01:37:49.570 --> 01:37:52.109 align:start position:0%
right I think so all right so now in
this<01:37:49.839><c> static</c><01:37:50.199><c> method</c><01:37:50.530><c> what</c><01:37:51.129><c> I</c><01:37:51.309><c> had</c><01:37:51.489><c> to</c><01:37:51.669><c> have</c><01:37:51.820><c> is</c>

01:37:52.109 --> 01:37:52.119 align:start position:0%
this static method what I had to have is
 

01:37:52.119 --> 01:38:02.779 align:start position:0%
this static method what I had to have is
create<01:37:52.689><c> this</c><01:37:52.899><c> builder</c><01:37:58.679><c> new</c><01:37:59.679><c> bidder</c>

01:38:02.779 --> 01:38:02.789 align:start position:0%
 
 

01:38:02.789 --> 01:38:06.029 align:start position:0%
 
okay<01:38:03.789><c> and</c><01:38:03.999><c> pass</c><01:38:04.749><c> this</c><01:38:04.959><c> bitter</c><01:38:05.229><c> as</c><01:38:05.649><c> a</c><01:38:05.709><c> parameter</c>

01:38:06.029 --> 01:38:06.039 align:start position:0%
okay and pass this bitter as a parameter
 

01:38:06.039 --> 01:38:12.629 align:start position:0%
okay and pass this bitter as a parameter
to<01:38:06.399><c> the</c><01:38:07.089><c> initializer</c><01:38:07.829><c> we</c><01:38:08.829><c> just</c><01:38:09.689><c> passed</c><01:38:11.639><c> like</c>

01:38:12.629 --> 01:38:12.639 align:start position:0%
to the initializer we just passed like
 

01:38:12.639 --> 01:38:20.399 align:start position:0%
to the initializer we just passed like
that<01:38:12.849><c> and</c><01:38:13.239><c> return</c><01:38:14.760><c> this</c><01:38:15.760><c> builder</c><01:38:18.539><c> okay</c><01:38:19.539><c> so</c><01:38:20.349><c> you</c>

01:38:20.399 --> 01:38:20.409 align:start position:0%
that and return this builder okay so you
 

01:38:20.409 --> 01:38:23.129 align:start position:0%
that and return this builder okay so you
see<01:38:20.800><c> that</c><01:38:20.949><c> now</c><01:38:21.159><c> I</c><01:38:21.669><c> mean</c><01:38:21.969><c> I'm</c><01:38:22.749><c> in</c><01:38:22.869><c> a</c><01:38:22.899><c> better</c>

01:38:23.129 --> 01:38:23.139 align:start position:0%
see that now I mean I'm in a better
 

01:38:23.139 --> 01:38:26.579 align:start position:0%
see that now I mean I'm in a better
shape<01:38:23.439><c> than</c><01:38:24.129><c> previously</c><01:38:24.550><c> because</c><01:38:24.909><c> I</c><01:38:25.629><c> cannot</c>

01:38:26.579 --> 01:38:26.589 align:start position:0%
shape than previously because I cannot
 

01:38:26.589 --> 01:38:28.290 align:start position:0%
shape than previously because I cannot
interrupt<01:38:26.979><c> the</c><01:38:27.459><c> process</c><01:38:27.669><c> between</c><01:38:28.089><c> the</c>

01:38:28.290 --> 01:38:28.300 align:start position:0%
interrupt the process between the
 

01:38:28.300 --> 01:38:30.389 align:start position:0%
interrupt the process between the
construction<01:38:28.629><c> of</c><01:38:29.050><c> the</c><01:38:29.139><c> object</c><01:38:29.439><c> and</c><01:38:29.619><c> its</c>

01:38:30.389 --> 01:38:30.399 align:start position:0%
construction of the object and its
 

01:38:30.399 --> 01:38:32.939 align:start position:0%
construction of the object and its
initialization<01:38:31.149><c> so</c><01:38:32.050><c> it's</c><01:38:32.199><c> not</c><01:38:32.289><c> possible</c><01:38:32.530><c> to</c>

01:38:32.939 --> 01:38:32.949 align:start position:0%
initialization so it's not possible to
 

01:38:32.949 --> 01:38:36.959 align:start position:0%
initialization so it's not possible to
interact<01:38:33.550><c> it</c><01:38:33.760><c> anymore</c><01:38:34.199><c> but</c><01:38:35.199><c> I</c><01:38:35.260><c> can</c><01:38:35.829><c> go</c><01:38:36.699><c> even</c>

01:38:36.959 --> 01:38:36.969 align:start position:0%
interact it anymore but I can go even
 

01:38:36.969 --> 01:38:39.419 align:start position:0%
interact it anymore but I can go even
even<01:38:37.329><c> further</c><01:38:37.539><c> because</c><01:38:37.780><c> now</c><01:38:38.679><c> I'm</c><01:38:39.010><c> just</c>

01:38:39.419 --> 01:38:39.429 align:start position:0%
even further because now I'm just
 

01:38:39.429 --> 01:38:41.310 align:start position:0%
even further because now I'm just
calling<01:38:39.820><c> this</c><01:38:39.969><c> create</c><01:38:40.539><c> factor</c><01:38:40.899><c> in</c><01:38:40.989><c> the</c><01:38:41.079><c> other</c>

01:38:41.310 --> 01:38:41.320 align:start position:0%
calling this create factor in the other
 

01:38:41.320 --> 01:38:44.520 align:start position:0%
calling this create factor in the other
so<01:38:42.129><c> this</c><01:38:42.339><c> build</c><01:38:42.760><c> method</c><01:38:42.999><c> here</c><01:38:43.539><c> is</c><01:38:44.079><c> not</c><01:38:44.229><c> used</c>

01:38:44.520 --> 01:38:44.530 align:start position:0%
so this build method here is not used
 

01:38:44.530 --> 01:38:52.189 align:start position:0%
so this build method here is not used
anymore<01:38:44.769><c> I</c><01:38:48.269><c> can</c><01:38:49.269><c> just</c><01:38:49.539><c> get</c><01:38:49.689><c> rid</c><01:38:49.869><c> of</c><01:38:50.019><c> it</c><01:38:50.109><c> okay</c>

01:38:52.189 --> 01:38:52.199 align:start position:0%
anymore I can just get rid of it okay
 

01:38:52.199 --> 01:38:55.799 align:start position:0%
anymore I can just get rid of it okay
and<01:38:53.199><c> what</c><01:38:54.129><c> I</c><01:38:54.159><c> see</c><01:38:54.579><c> here</c><01:38:54.909><c> is</c><01:38:55.089><c> that</c><01:38:55.119><c> I</c><01:38:55.449><c> have</c><01:38:55.599><c> only</c>

01:38:55.799 --> 01:38:55.809 align:start position:0%
and what I see here is that I have only
 

01:38:55.809 --> 01:39:00.089 align:start position:0%
and what I see here is that I have only
one<01:38:56.139><c> method</c><01:38:56.559><c> in</c><01:38:57.550><c> my</c><01:38:57.699><c> video</c><01:38:58.089><c> object</c><01:38:58.800><c> well</c><01:38:59.800><c> if</c><01:38:59.949><c> I</c>

01:39:00.089 --> 01:39:00.099 align:start position:0%
one method in my video object well if I
 

01:39:00.099 --> 01:39:01.979 align:start position:0%
one method in my video object well if I
have<01:39:00.339><c> only</c><01:39:00.550><c> one</c><01:39:00.879><c> method</c><01:39:01.269><c> that</c><01:39:01.300><c> probably</c><01:39:01.839><c> means</c>

01:39:01.979 --> 01:39:01.989 align:start position:0%
have only one method that probably means
 

01:39:01.989 --> 01:39:05.250 align:start position:0%
have only one method that probably means
that<01:39:02.139><c> one</c><01:39:02.919><c> I</c><01:39:03.159><c> mean</c><01:39:03.399><c> one</c><01:39:03.609><c> instance</c><01:39:04.179><c> method</c><01:39:04.539><c> if</c><01:39:05.079><c> I</c>

01:39:05.250 --> 01:39:05.260 align:start position:0%
that one I mean one instance method if I
 

01:39:05.260 --> 01:39:07.079 align:start position:0%
that one I mean one instance method if I
have<01:39:05.409><c> only</c><01:39:05.619><c> one</c><01:39:05.889><c> method</c><01:39:06.249><c> in</c><01:39:06.369><c> my</c><01:39:06.399><c> video</c><01:39:06.699><c> object</c>

01:39:07.079 --> 01:39:07.089 align:start position:0%
have only one method in my video object
 

01:39:07.089 --> 01:39:09.329 align:start position:0%
have only one method in my video object
probably<01:39:07.300><c> means</c><01:39:07.659><c> that</c><01:39:07.749><c> I</c><01:39:08.109><c> can</c><01:39:08.829><c> make</c><01:39:09.010><c> it</c><01:39:09.039><c> an</c>

01:39:09.329 --> 01:39:09.339 align:start position:0%
probably means that I can make it an
 

01:39:09.339 --> 01:39:12.290 align:start position:0%
probably means that I can make it an
interface<01:39:09.789><c> and</c><01:39:10.300><c> make</c><01:39:10.539><c> this</c><01:39:10.689><c> method</c><01:39:10.929><c> abstract</c>

01:39:12.290 --> 01:39:12.300 align:start position:0%
interface and make this method abstract
 

01:39:12.300 --> 01:39:18.649 align:start position:0%
interface and make this method abstract
that<01:39:14.669><c> I'm</c><01:39:15.669><c> going</c><01:39:15.939><c> to</c><01:39:16.179><c> comment</c><01:39:16.929><c> out</c><01:39:17.169><c> this</c><01:39:17.379><c> code</c>

01:39:18.649 --> 01:39:18.659 align:start position:0%
that I'm going to comment out this code
 

01:39:18.659 --> 01:39:22.379 align:start position:0%
that I'm going to comment out this code
make<01:39:19.659><c> this</c><01:39:19.809><c> method</c><01:39:20.050><c> abstract</c><01:39:20.939><c> and</c><01:39:21.939><c> make</c><01:39:22.209><c> my</c>

01:39:22.379 --> 01:39:22.389 align:start position:0%
make this method abstract and make my
 

01:39:22.389 --> 01:39:27.899 align:start position:0%
make this method abstract and make my
glitter<01:39:23.219><c> an</c><01:39:24.219><c> interface</c><01:39:25.260><c> now</c><01:39:26.260><c> of</c><01:39:26.379><c> course</c><01:39:26.909><c> this</c>

01:39:27.899 --> 01:39:27.909 align:start position:0%
glitter an interface now of course this
 

01:39:27.909 --> 01:39:31.409 align:start position:0%
glitter an interface now of course this
registry<01:39:28.599><c> here</c><01:39:29.760><c> cannot</c><01:39:30.760><c> be</c><01:39:30.909><c> an</c><01:39:30.999><c> instance</c>

01:39:31.409 --> 01:39:31.419 align:start position:0%
registry here cannot be an instance
 

01:39:31.419 --> 01:39:35.659 align:start position:0%
registry here cannot be an instance
failure<01:39:31.839><c> of</c><01:39:32.109><c> an</c><01:39:32.260><c> interface</c><01:39:32.649><c> I</c><01:39:33.570><c> cannot</c><01:39:34.570><c> create</c>

01:39:35.659 --> 01:39:35.669 align:start position:0%
failure of an interface I cannot create
 

01:39:35.669 --> 01:39:38.849 align:start position:0%
failure of an interface I cannot create
this<01:39:36.669><c> builder</c><01:39:37.089><c> like</c><01:39:37.239><c> that</c><01:39:37.589><c> anymore</c><01:39:38.589><c> because</c>

01:39:38.849 --> 01:39:38.859 align:start position:0%
this builder like that anymore because
 

01:39:38.859 --> 01:39:41.929 align:start position:0%
this builder like that anymore because
it's<01:39:39.219><c> another</c><01:39:39.459><c> object</c><01:39:39.909><c> but</c><01:39:40.749><c> this</c><01:39:40.869><c> is</c><01:39:41.050><c> a</c><01:39:41.079><c> lambda</c>

01:39:41.929 --> 01:39:41.939 align:start position:0%
it's another object but this is a lambda
 

01:39:41.939 --> 01:39:47.189 align:start position:0%
it's another object but this is a lambda
so<01:39:42.939><c> I</c><01:39:42.969><c> can</c><01:39:43.239><c> implement</c><01:39:43.780><c> it</c><01:39:44.159><c> just</c><01:39:45.159><c> using</c><01:39:46.199><c> an</c>

01:39:47.189 --> 01:39:47.199 align:start position:0%
so I can implement it just using an
 

01:39:47.199 --> 01:39:48.660 align:start position:0%
so I can implement it just using an
implementation

01:39:48.660 --> 01:39:48.670 align:start position:0%
implementation
 

01:39:48.670 --> 01:39:53.130 align:start position:0%
implementation
of<01:39:48.760><c> this</c><01:39:49.320><c> abstract</c><01:39:50.320><c> method</c><01:39:50.650><c> here</c><01:39:51.900><c> so</c><01:39:52.900><c> let</c><01:39:53.050><c> us</c>

01:39:53.130 --> 01:39:53.140 align:start position:0%
of this abstract method here so let us
 

01:39:53.140 --> 01:39:55.860 align:start position:0%
of this abstract method here so let us
do<01:39:53.290><c> that</c><01:39:53.350><c> I</c><01:39:53.800><c> just</c><01:39:54.670><c> copy</c><01:39:54.850><c> paste</c><01:39:54.910><c> always</c><01:39:55.750><c> the</c>

01:39:55.860 --> 01:39:55.870 align:start position:0%
do that I just copy paste always the
 

01:39:55.870 --> 01:39:58.229 align:start position:0%
do that I just copy paste always the
same<01:39:56.080><c> principle</c><01:39:56.620><c> I</c><01:39:56.830><c> just</c><01:39:57.370><c> copy</c><01:39:57.580><c> paste</c><01:39:57.670><c> block</c>

01:39:58.229 --> 01:39:58.239 align:start position:0%
same principle I just copy paste block
 

01:39:58.239 --> 01:40:00.180 align:start position:0%
same principle I just copy paste block
of<01:39:58.360><c> parameter</c><01:39:58.840><c> and</c><01:39:59.080><c> what</c><01:39:59.650><c> should</c><01:39:59.860><c> I</c><01:39:59.949><c> be</c><01:40:00.160><c> doing</c>

01:40:00.180 --> 01:40:00.190 align:start position:0%
of parameter and what should I be doing
 

01:40:00.190 --> 01:40:06.860 align:start position:0%
of parameter and what should I be doing
with<01:40:00.460><c> that</c><01:40:00.929><c> doing</c><01:40:01.929><c> registry</c><01:40:02.610><c> dot</c><01:40:03.610><c> put</c><01:40:04.800><c> key</c><01:40:05.800><c> and</c>

01:40:06.860 --> 01:40:06.870 align:start position:0%
with that doing registry dot put key and
 

01:40:06.870 --> 01:40:12.959 align:start position:0%
with that doing registry dot put key and
factory<01:40:10.320><c> this</c><01:40:11.320><c> registry</c><01:40:12.010><c> cannot</c><01:40:12.280><c> be</c><01:40:12.429><c> created</c>

01:40:12.959 --> 01:40:12.969 align:start position:0%
factory this registry cannot be created
 

01:40:12.969 --> 01:40:16.950 align:start position:0%
factory this registry cannot be created
as<01:40:13.330><c> a</c><01:40:14.140><c> field</c><01:40:14.560><c> but</c><01:40:14.739><c> it</c><01:40:14.890><c> can</c><01:40:15.100><c> be</c><01:40:15.280><c> created</c><01:40:15.750><c> as</c><01:40:16.750><c> the</c>

01:40:16.950 --> 01:40:16.960 align:start position:0%
as a field but it can be created as the
 

01:40:16.960 --> 01:40:21.990 align:start position:0%
as a field but it can be created as the
local<01:40:17.230><c> variable</c><01:40:18.239><c> alright</c><01:40:19.679><c> so</c><01:40:20.679><c> first</c><01:40:20.949><c> I</c><01:40:21.370><c> create</c>

01:40:21.990 --> 01:40:22.000 align:start position:0%
local variable alright so first I create
 

01:40:22.000 --> 01:40:25.790 align:start position:0%
local variable alright so first I create
my<01:40:22.150><c> registry</c><01:40:22.739><c> then</c><01:40:23.739><c> I</c><01:40:24.219><c> create</c><01:40:25.090><c> my</c><01:40:25.330><c> builder</c>

01:40:25.790 --> 01:40:25.800 align:start position:0%
my registry then I create my builder
 

01:40:25.800 --> 01:40:29.250 align:start position:0%
my registry then I create my builder
third<01:40:26.800><c> step</c><01:40:27.130><c> I</c><01:40:27.370><c> initialize</c><01:40:28.060><c> my</c><01:40:28.300><c> builder</c><01:40:28.690><c> using</c>

01:40:29.250 --> 01:40:29.260 align:start position:0%
third step I initialize my builder using
 

01:40:29.260 --> 01:40:34.140 align:start position:0%
third step I initialize my builder using
a<01:40:29.350><c> consumer</c><01:40:29.800><c> and</c><01:40:30.010><c> then</c><01:40:30.670><c> I</c><01:40:30.940><c> return</c><01:40:31.510><c> it</c><01:40:31.630><c> and</c><01:40:33.150><c> this</c>

01:40:34.140 --> 01:40:34.150 align:start position:0%
a consumer and then I return it and this
 

01:40:34.150 --> 01:40:39.630 align:start position:0%
a consumer and then I return it and this
piece<01:40:34.480><c> of</c><01:40:34.510><c> code</c><01:40:34.870><c> here</c><01:40:35.400><c> is</c><01:40:36.510><c> in</c><01:40:37.510><c> fact</c><01:40:37.780><c> a</c><01:40:38.640><c> method</c>

01:40:39.630 --> 01:40:39.640 align:start position:0%
piece of code here is in fact a method
 

01:40:39.640 --> 01:40:43.169 align:start position:0%
piece of code here is in fact a method
reference<01:40:40.800><c> I'm</c><01:40:41.800><c> going</c><01:40:42.040><c> to</c><01:40:42.160><c> keep</c><01:40:42.340><c> that</c><01:40:42.670><c> so</c><01:40:42.880><c> if</c><01:40:43.030><c> I</c>

01:40:43.169 --> 01:40:43.179 align:start position:0%
reference I'm going to keep that so if I
 

01:40:43.179 --> 01:40:45.870 align:start position:0%
reference I'm going to keep that so if I
really<01:40:43.630><c> want</c><01:40:43.810><c> to</c><01:40:43.960><c> make</c><01:40:44.110><c> my</c><01:40:44.290><c> code</c><01:40:44.880><c> completely</c>

01:40:45.870 --> 01:40:45.880 align:start position:0%
really want to make my code completely
 

01:40:45.880 --> 01:40:53.630 align:start position:0%
really want to make my code completely
unreadable<01:40:46.330><c> I</c><01:40:49.290><c> can</c><01:40:50.290><c> just</c><01:40:50.500><c> write</c><01:40:50.679><c> it</c><01:40:50.710><c> like</c><01:40:50.949><c> that</c>

01:40:53.630 --> 01:40:53.640 align:start position:0%
 
 

01:40:53.640 --> 01:41:03.419 align:start position:0%
 
okay

01:41:03.419 --> 01:41:03.429 align:start position:0%
 
 

01:41:03.429 --> 01:41:14.040 align:start position:0%
 
okay<01:41:09.300><c> okay</c><01:41:10.440><c> so</c><01:41:11.440><c> you</c><01:41:11.500><c> see</c><01:41:11.710><c> that</c><01:41:12.750><c> using</c><01:41:13.750><c> this</c>

01:41:14.040 --> 01:41:14.050 align:start position:0%
okay okay so you see that using this
 

01:41:14.050 --> 01:41:16.560 align:start position:0%
okay okay so you see that using this
kind<01:41:15.040><c> of</c><01:41:15.190><c> code</c><01:41:15.429><c> I</c><01:41:15.460><c> can</c><01:41:15.550><c> go</c><01:41:15.940><c> really</c><01:41:16.150><c> very</c>

01:41:16.560 --> 01:41:16.570 align:start position:0%
kind of code I can go really very
 

01:41:16.570 --> 01:41:19.290 align:start position:0%
kind of code I can go really very
further<01:41:17.050><c> with</c><01:41:17.320><c> only</c><01:41:17.830><c> very</c><01:41:18.310><c> simple</c><01:41:18.550><c> principles</c>

01:41:19.290 --> 01:41:19.300 align:start position:0%
further with only very simple principles
 

01:41:19.300 --> 01:41:23.010 align:start position:0%
further with only very simple principles
that<01:41:20.290><c> is</c><01:41:20.469><c> try</c><01:41:21.340><c> to</c><01:41:21.370><c> get</c><01:41:21.790><c> to</c><01:41:22.150><c> to</c><01:41:22.330><c> to</c><01:41:22.570><c> understand</c>

01:41:23.010 --> 01:41:23.020 align:start position:0%
that is try to get to to to understand
 

01:41:23.020 --> 01:41:25.950 align:start position:0%
that is try to get to to to understand
where<01:41:23.469><c> the</c><01:41:23.679><c> lambdas</c><01:41:24.040><c> are</c><01:41:24.600><c> when</c><01:41:25.600><c> I</c><01:41:25.630><c> have</c><01:41:25.929><c> a</c>

01:41:25.950 --> 01:41:25.960 align:start position:0%
where the lambdas are when I have a
 

01:41:25.960 --> 01:41:28.439 align:start position:0%
where the lambdas are when I have a
class<01:41:26.290><c> with</c><01:41:26.500><c> only</c><01:41:26.679><c> one</c><01:41:26.949><c> method</c><01:41:27.130><c> have</c><01:41:28.120><c> in</c><01:41:28.270><c> mind</c>

01:41:28.439 --> 01:41:28.449 align:start position:0%
class with only one method have in mind
 

01:41:28.449 --> 01:41:30.030 align:start position:0%
class with only one method have in mind
that<01:41:28.600><c> I</c><01:41:28.690><c> can</c><01:41:28.900><c> implement</c><01:41:29.170><c> that</c><01:41:29.409><c> class</c><01:41:29.679><c> well</c><01:41:30.010><c> I</c>

01:41:30.030 --> 01:41:30.040 align:start position:0%
that I can implement that class well I
 

01:41:30.040 --> 01:41:31.590 align:start position:0%
that I can implement that class well I
can<01:41:30.280><c> make</c><01:41:30.429><c> an</c><01:41:30.610><c> interface</c><01:41:31.030><c> with</c><01:41:31.239><c> that</c><01:41:31.390><c> class</c>

01:41:31.590 --> 01:41:31.600 align:start position:0%
can make an interface with that class
 

01:41:31.600 --> 01:41:33.899 align:start position:0%
can make an interface with that class
and<01:41:31.840><c> implement</c><01:41:31.929><c> it</c><01:41:32.350><c> with</c><01:41:32.530><c> a</c><01:41:32.560><c> lambda</c><01:41:32.890><c> and</c><01:41:33.730><c> you</c>

01:41:33.899 --> 01:41:33.909 align:start position:0%
and implement it with a lambda and you
 

01:41:33.909 --> 01:41:36.959 align:start position:0%
and implement it with a lambda and you
see<01:41:34.090><c> that</c><01:41:34.270><c> here</c><01:41:34.690><c> I'm</c><01:41:34.929><c> a</c><01:41:34.960><c> very</c><01:41:35.429><c> better</c><01:41:36.429><c> shape</c>

01:41:36.959 --> 01:41:36.969 align:start position:0%
see that here I'm a very better shape
 

01:41:36.969 --> 01:41:39.090 align:start position:0%
see that here I'm a very better shape
much<01:41:37.210><c> better</c><01:41:37.510><c> shape</c><01:41:37.870><c> than</c><01:41:38.199><c> than</c><01:41:38.500><c> I</c><01:41:38.620><c> used</c><01:41:38.830><c> to</c><01:41:38.920><c> be</c>

01:41:39.090 --> 01:41:39.100 align:start position:0%
much better shape than than I used to be
 

01:41:39.100 --> 01:41:47.250 align:start position:0%
much better shape than than I used to be
in<01:41:39.699><c> the</c><01:41:39.760><c> previous</c><01:41:40.120><c> example</c><01:41:45.929><c> okay</c><01:41:46.960><c> in</c><01:41:47.140><c> the</c>

01:41:47.250 --> 01:41:47.260 align:start position:0%
in the previous example okay in the
 

01:41:47.260 --> 01:41:50.850 align:start position:0%
in the previous example okay in the
first<01:41:47.800><c> step</c><01:41:48.310><c> I</c><01:41:48.520><c> had</c><01:41:49.110><c> the</c><01:41:50.110><c> creation</c><01:41:50.650><c> of</c><01:41:50.739><c> an</c>

01:41:50.850 --> 01:41:50.860 align:start position:0%
first step I had the creation of an
 

01:41:50.860 --> 01:41:53.820 align:start position:0%
first step I had the creation of an
object<01:41:51.219><c> in</c><01:41:51.699><c> a</c><01:41:51.850><c> class</c><01:41:52.060><c> the</c><01:41:53.050><c> registry</c><01:41:53.620><c> was</c><01:41:53.800><c> a</c>

01:41:53.820 --> 01:41:53.830 align:start position:0%
object in a class the registry was a
 

01:41:53.830 --> 01:42:01.229 align:start position:0%
object in a class the registry was a
field<01:41:54.219><c> of</c><01:41:54.340><c> that</c><01:41:54.489><c> class</c><01:41:54.730><c> remember</c><01:41:58.830><c> here</c><01:42:00.239><c> this</c>

01:42:01.229 --> 01:42:01.239 align:start position:0%
field of that class remember here this
 

01:42:01.239 --> 01:42:03.600 align:start position:0%
field of that class remember here this
was<01:42:01.480><c> a</c><01:42:01.510><c> field</c><01:42:01.780><c> of</c><01:42:01.900><c> that</c><01:42:02.020><c> class</c><01:42:02.370><c> anybody</c><01:42:03.370><c> could</c>

01:42:03.600 --> 01:42:03.610 align:start position:0%
was a field of that class anybody could
 

01:42:03.610 --> 01:42:06.120 align:start position:0%
was a field of that class anybody could
have<01:42:03.699><c> access</c><01:42:04.150><c> using</c><01:42:05.080><c> reflection</c><01:42:05.530><c> to</c><01:42:05.860><c> the</c><01:42:05.890><c> feet</c>

01:42:06.120 --> 01:42:06.130 align:start position:0%
have access using reflection to the feet
 

01:42:06.130 --> 01:42:08.520 align:start position:0%
have access using reflection to the feet
of<01:42:06.250><c> that</c><01:42:06.340><c> class</c><01:42:06.630><c> meaning</c><01:42:07.630><c> that</c><01:42:07.780><c> could</c><01:42:08.260><c> that</c><01:42:08.380><c> I</c>

01:42:08.520 --> 01:42:08.530 align:start position:0%
of that class meaning that could that I
 

01:42:08.530 --> 01:42:12.050 align:start position:0%
of that class meaning that could that I
could<01:42:08.560><c> correct</c><01:42:09.489><c> my</c><01:42:09.670><c> code</c><01:42:09.969><c> with</c><01:42:10.600><c> reflection</c><01:42:11.199><c> or</c>

01:42:12.050 --> 01:42:12.060 align:start position:0%
could correct my code with reflection or
 

01:42:12.060 --> 01:42:14.490 align:start position:0%
could correct my code with reflection or
concurrency<01:42:13.060><c> or</c><01:42:13.179><c> thing</c><01:42:13.330><c> like</c><01:42:13.360><c> that</c><01:42:13.510><c> now</c><01:42:14.290><c> my</c>

01:42:14.490 --> 01:42:14.500 align:start position:0%
concurrency or thing like that now my
 

01:42:14.500 --> 01:42:17.100 align:start position:0%
concurrency or thing like that now my
registry<01:42:15.100><c> is</c><01:42:15.610><c> completely</c><01:42:16.270><c> hidden</c><01:42:16.480><c> it's</c><01:42:17.020><c> a</c>

01:42:17.100 --> 01:42:17.110 align:start position:0%
registry is completely hidden it's a
 

01:42:17.110 --> 01:42:19.770 align:start position:0%
registry is completely hidden it's a
local<01:42:17.469><c> variable</c><01:42:17.770><c> in</c><01:42:18.070><c> a</c><01:42:18.159><c> static</c><01:42:18.489><c> interface</c><01:42:18.909><c> so</c>

01:42:19.770 --> 01:42:19.780 align:start position:0%
local variable in a static interface so
 

01:42:19.780 --> 01:42:21.720 align:start position:0%
local variable in a static interface so
nobody<01:42:20.140><c> can</c><01:42:20.350><c> see</c><01:42:20.560><c> it</c><01:42:20.679><c> even</c><01:42:21.070><c> using</c><01:42:21.400><c> reflection</c>

01:42:21.720 --> 01:42:21.730 align:start position:0%
nobody can see it even using reflection
 

01:42:21.730 --> 01:42:24.330 align:start position:0%
nobody can see it even using reflection
I<01:42:22.060><c> do</c><01:42:22.719><c> not</c><01:42:22.929><c> have</c><01:42:23.110><c> to</c><01:42:23.290><c> use</c><01:42:23.440><c> a</c><01:42:23.469><c> concurrent</c><01:42:24.010><c> -</c><01:42:24.130><c> map</c>

01:42:24.330 --> 01:42:24.340 align:start position:0%
I do not have to use a concurrent - map
 

01:42:24.340 --> 01:42:26.280 align:start position:0%
I do not have to use a concurrent - map
here<01:42:24.640><c> because</c><01:42:25.000><c> this</c><01:42:25.630><c> code</c><01:42:25.929><c> will</c><01:42:26.140><c> be</c><01:42:26.170><c> executed</c>

01:42:26.280 --> 01:42:26.290 align:start position:0%
here because this code will be executed
 

01:42:26.290 --> 01:42:28.830 align:start position:0%
here because this code will be executed
just<01:42:26.739><c> by</c><01:42:27.040><c> one</c><01:42:27.280><c> single</c><01:42:27.580><c> thread</c><01:42:27.940><c> you</c><01:42:28.510><c> can</c><01:42:28.540><c> have</c><01:42:28.810><c> a</c>

01:42:28.830 --> 01:42:28.840 align:start position:0%
just by one single thread you can have a
 

01:42:28.840 --> 01:42:31.950 align:start position:0%
just by one single thread you can have a
local<01:42:29.620><c> variable</c><01:42:29.770><c> shared</c><01:42:30.400><c> I'm</c><01:42:30.820><c> afraid</c><01:42:31.210><c> this</c><01:42:31.810><c> is</c>

01:42:31.950 --> 01:42:31.960 align:start position:0%
local variable shared I'm afraid this is
 

01:42:31.960 --> 01:42:34.590 align:start position:0%
local variable shared I'm afraid this is
not<01:42:31.989><c> possible</c><01:42:32.290><c> so</c><01:42:33.130><c> this</c><01:42:33.280><c> code</c><01:42:33.520><c> is</c><01:42:33.550><c> both</c><01:42:34.090><c> much</c>

01:42:34.590 --> 01:42:34.600 align:start position:0%
not possible so this code is both much
 

01:42:34.600 --> 01:42:37.770 align:start position:0%
not possible so this code is both much
more<01:42:34.900><c> robust</c><01:42:35.800><c> much</c><01:42:36.280><c> less</c><01:42:36.520><c> error-prone</c><01:42:37.390><c> than</c>

01:42:37.770 --> 01:42:37.780 align:start position:0%
more robust much less error-prone than
 

01:42:37.780 --> 01:42:39.990 align:start position:0%
more robust much less error-prone than
the<01:42:37.870><c> previous</c><01:42:38.170><c> one</c><01:42:38.489><c> it</c><01:42:39.489><c> might</c><01:42:39.730><c> not</c><01:42:39.850><c> be</c><01:42:39.969><c> that</c>

01:42:39.990 --> 01:42:40.000 align:start position:0%
the previous one it might not be that
 

01:42:40.000 --> 01:42:44.310 align:start position:0%
the previous one it might not be that
simple<01:42:40.770><c> -</c><01:42:41.770><c> right</c><01:42:41.980><c> I</c><01:42:42.280><c> agree</c><01:42:43.060><c> but</c><01:42:43.900><c> it's</c><01:42:44.110><c> still</c>

01:42:44.310 --> 01:42:44.320 align:start position:0%
simple - right I agree but it's still
 

01:42:44.320 --> 01:42:45.589 align:start position:0%
simple - right I agree but it's still
very

01:42:45.589 --> 01:42:45.599 align:start position:0%
very
 

01:42:45.599 --> 01:43:00.890 align:start position:0%
very
right<01:42:50.119><c> and</c><01:42:51.119><c> I</c><01:42:51.210><c> think</c><01:42:51.449><c> I'm</c><01:42:51.570><c> done</c><01:42:51.780><c> with</c><01:42:51.929><c> it</c>

01:43:00.890 --> 01:43:00.900 align:start position:0%
 
 

01:43:00.900 --> 01:43:05.230 align:start position:0%
 
yeah

01:43:05.230 --> 01:43:05.240 align:start position:0%
 
 

01:43:05.240 --> 01:43:11.430 align:start position:0%
 
all<01:43:05.750><c> right</c>

01:43:11.430 --> 01:43:11.440 align:start position:0%
 
 

01:43:11.440 --> 01:43:15.060 align:start position:0%
 
so<01:43:12.440><c> this</c><01:43:12.620><c> is</c><01:43:12.800><c> my</c><01:43:13.000><c> confusions</c><01:43:14.000><c> my</c><01:43:14.780><c> confusion</c>

01:43:15.060 --> 01:43:15.070 align:start position:0%
so this is my confusions my confusion
 

01:43:15.070 --> 01:43:17.920 align:start position:0%
so this is my confusions my confusion
you<01:43:16.070><c> see</c><01:43:16.250><c> that</c><01:43:16.430><c> lambdas</c><01:43:17.120><c> expression</c><01:43:17.630><c> alumni</c>

01:43:17.920 --> 01:43:17.930 align:start position:0%
you see that lambdas expression alumni
 

01:43:17.930 --> 01:43:20.020 align:start position:0%
you see that lambdas expression alumni
expressions<01:43:18.440><c> have</c><01:43:19.130><c> been</c><01:43:19.190><c> presented</c><01:43:19.850><c> as</c><01:43:20.000><c> a</c>

01:43:20.020 --> 01:43:20.030 align:start position:0%
expressions have been presented as a
 

01:43:20.030 --> 01:43:23.080 align:start position:0%
expressions have been presented as a
nicer<01:43:21.020><c> way</c><01:43:21.440><c> to</c><01:43:21.500><c> write</c><01:43:21.980><c> instances</c><01:43:22.970><c> of</c>

01:43:23.080 --> 01:43:23.090 align:start position:0%
nicer way to write instances of
 

01:43:23.090 --> 01:43:25.360 align:start position:0%
nicer way to write instances of
anonymous<01:43:23.510><c> classes</c><01:43:23.780><c> and</c><01:43:24.200><c> default</c><01:43:25.040><c> methods</c>

01:43:25.360 --> 01:43:25.370 align:start position:0%
anonymous classes and default methods
 

01:43:25.370 --> 01:43:29.350 align:start position:0%
anonymous classes and default methods
have<01:43:25.940><c> been</c><01:43:26.180><c> presented</c><01:43:26.720><c> also</c><01:43:26.900><c> as</c><01:43:27.880><c> as</c><01:43:28.880><c> a</c><01:43:28.940><c> way</c><01:43:29.300><c> to</c>

01:43:29.350 --> 01:43:29.360 align:start position:0%
have been presented also as as a way to
 

01:43:29.360 --> 01:43:32.230 align:start position:0%
have been presented also as as a way to
modify<01:43:30.320><c> existing</c><01:43:30.680><c> interfaces</c><01:43:31.640><c> without</c>

01:43:32.230 --> 01:43:32.240 align:start position:0%
modify existing interfaces without
 

01:43:32.240 --> 01:43:36.820 align:start position:0%
modify existing interfaces without
changing<01:43:32.960><c> classes</c><01:43:33.910><c> this</c><01:43:34.910><c> was</c><01:43:35.290><c> useful</c><01:43:36.290><c> to</c><01:43:36.560><c> know</c>

01:43:36.820 --> 01:43:36.830 align:start position:0%
changing classes this was useful to know
 

01:43:36.830 --> 01:43:38.830 align:start position:0%
changing classes this was useful to know
when<01:43:37.040><c> Java</c><01:43:37.280><c> it</c><01:43:37.490><c> was</c><01:43:37.700><c> new</c><01:43:37.910><c> this</c><01:43:38.390><c> is</c><01:43:38.570><c> not</c><01:43:38.750><c> the</c>

01:43:38.830 --> 01:43:38.840 align:start position:0%
when Java it was new this is not the
 

01:43:38.840 --> 01:43:40.540 align:start position:0%
when Java it was new this is not the
case<01:43:39.050><c> anymore</c><01:43:39.080><c> time</c><01:43:39.650><c> a</c><01:43:39.710><c> nine</c><01:43:39.890><c> is</c><01:43:40.040><c> there</c><01:43:40.220><c> by</c><01:43:40.490><c> the</c>

01:43:40.540 --> 01:43:40.550 align:start position:0%
case anymore time a nine is there by the
 

01:43:40.550 --> 01:43:43.240 align:start position:0%
case anymore time a nine is there by the
way<01:43:40.700><c> and</c><01:43:41.090><c> in</c><01:43:41.570><c> several</c><01:43:41.930><c> years</c><01:43:42.260><c> from</c><01:43:42.410><c> now</c><01:43:42.650><c> nobody</c>

01:43:43.240 --> 01:43:43.250 align:start position:0%
way and in several years from now nobody
 

01:43:43.250 --> 01:43:46.000 align:start position:0%
way and in several years from now nobody
will<01:43:43.610><c> remember</c><01:43:43.880><c> what</c><01:43:44.630><c> it</c><01:43:44.750><c> was</c><01:43:44.930><c> before</c><01:43:45.140><c> it</c>

01:43:46.000 --> 01:43:46.010 align:start position:0%
will remember what it was before it
 

01:43:46.010 --> 01:43:49.150 align:start position:0%
will remember what it was before it
what<01:43:46.760><c> will</c><01:43:47.000><c> stay</c><01:43:47.360><c> I</c><01:43:47.390><c> think</c><01:43:47.780><c> is</c><01:43:47.930><c> that</c><01:43:47.960><c> we</c><01:43:48.500><c> have</c><01:43:48.680><c> a</c>

01:43:49.150 --> 01:43:49.160 align:start position:0%
what will stay I think is that we have a
 

01:43:49.160 --> 01:43:51.550 align:start position:0%
what will stay I think is that we have a
new<01:43:49.610><c> model</c><01:43:49.820><c> of</c><01:43:50.180><c> function</c><01:43:50.840><c> in</c><01:43:50.990><c> Java</c><01:43:51.170><c> which</c><01:43:51.410><c> is</c>

01:43:51.550 --> 01:43:51.560 align:start position:0%
new model of function in Java which is
 

01:43:51.560 --> 01:43:54.250 align:start position:0%
new model of function in Java which is
called<01:43:51.770><c> a</c><01:43:51.830><c> functional</c><01:43:52.250><c> interface</c><01:43:52.700><c> with</c><01:43:53.690><c> two</c>

01:43:54.250 --> 01:43:54.260 align:start position:0%
called a functional interface with two
 

01:43:54.260 --> 01:43:56.380 align:start position:0%
called a functional interface with two
possibilities<01:43:54.790><c> composition</c><01:43:55.790><c> given</c><01:43:56.210><c> by</c>

01:43:56.380 --> 01:43:56.390 align:start position:0%
possibilities composition given by
 

01:43:56.390 --> 01:43:59.500 align:start position:0%
possibilities composition given by
default<01:43:57.260><c> method</c><01:43:57.880><c> partial</c><01:43:58.880><c> applications</c>

01:43:59.500 --> 01:43:59.510 align:start position:0%
default method partial applications
 

01:43:59.510 --> 01:44:01.600 align:start position:0%
default method partial applications
which<01:44:00.140><c> is</c><01:44:00.170><c> the</c><01:44:00.440><c> second</c><01:44:00.830><c> fundamental</c>

01:44:01.600 --> 01:44:01.610 align:start position:0%
which is the second fundamental
 

01:44:01.610 --> 01:44:03.130 align:start position:0%
which is the second fundamental
operation<01:44:02.120><c> in</c><01:44:02.210><c> functional</c><01:44:02.630><c> programming</c><01:44:02.990><c> and</c>

01:44:03.130 --> 01:44:03.140 align:start position:0%
operation in functional programming and
 

01:44:03.140 --> 01:44:08.160 align:start position:0%
operation in functional programming and
also<01:44:03.860><c> factory</c><01:44:04.400><c> methods</c><01:44:04.820><c> to</c><01:44:05.150><c> create</c><01:44:05.660><c> easily</c>

01:44:08.160 --> 01:44:08.170 align:start position:0%
also factory methods to create easily
 

01:44:08.170 --> 01:44:10.540 align:start position:0%
also factory methods to create easily
lambda<01:44:09.170><c> expression</c><01:44:09.620><c> using</c><01:44:09.980><c> using</c><01:44:10.310><c> parameters</c>

01:44:10.540 --> 01:44:10.550 align:start position:0%
lambda expression using using parameters
 

01:44:10.550 --> 01:44:14.050 align:start position:0%
lambda expression using using parameters
so<01:44:11.480><c> this</c><01:44:11.720><c> is</c><01:44:11.900><c> really</c><01:44:12.170><c> a</c><01:44:12.350><c> new</c><01:44:12.740><c> way</c><01:44:12.770><c> of</c><01:44:13.250><c> creating</c>

01:44:14.050 --> 01:44:14.060 align:start position:0%
so this is really a new way of creating
 

01:44:14.060 --> 01:44:15.760 align:start position:0%
so this is really a new way of creating
applications<01:44:14.690><c> and</c><01:44:14.900><c> implementing</c><01:44:15.380><c> patterns</c>

01:44:15.760 --> 01:44:15.770 align:start position:0%
applications and implementing patterns
 

01:44:15.770 --> 01:44:19.510 align:start position:0%
applications and implementing patterns
and<01:44:16.580><c> I</c><01:44:16.760><c> think</c><01:44:17.000><c> it's</c><01:44:17.180><c> a</c><01:44:17.690><c> very</c><01:44:18.260><c> nice</c><01:44:18.560><c> addition</c><01:44:19.040><c> to</c>

01:44:19.510 --> 01:44:19.520 align:start position:0%
and I think it's a very nice addition to
 

01:44:19.520 --> 01:44:24.610 align:start position:0%
and I think it's a very nice addition to
our<01:44:20.230><c> applications</c><01:44:21.230><c> and</c><01:44:21.410><c> an</c><01:44:22.370><c> API</c><01:44:23.260><c> this</c><01:44:24.260><c> is</c><01:44:24.440><c> what</c>

01:44:24.610 --> 01:44:24.620 align:start position:0%
our applications and an API this is what
 

01:44:24.620 --> 01:44:27.100 align:start position:0%
our applications and an API this is what
I<01:44:24.650><c> wanted</c><01:44:25.010><c> to</c><01:44:25.190><c> tell</c><01:44:25.970><c> you</c><01:44:26.120><c> today</c><01:44:26.270><c> thank</c><01:44:26.840><c> you</c><01:44:26.930><c> for</c>

01:44:27.100 --> 01:44:27.110 align:start position:0%
I wanted to tell you today thank you for
 

01:44:27.110 --> 01:44:35.810 align:start position:0%
I wanted to tell you today thank you for
your<01:44:27.230><c> attention</c>

01:44:35.810 --> 01:44:35.820 align:start position:0%
 
 

01:44:35.820 --> 01:44:37.770 align:start position:0%
 
and<01:44:36.820><c> I</c><01:44:37.030><c> think</c><01:44:37.270><c> we</c><01:44:37.360><c> have</c><01:44:37.450><c> some</c><01:44:37.600><c> time</c><01:44:37.630><c> for</c>

01:44:37.770 --> 01:44:37.780 align:start position:0%
and I think we have some time for
 

01:44:37.780 --> 01:44:53.310 align:start position:0%
and I think we have some time for
questions<01:44:38.460><c> do</c><01:44:39.460><c> we</c><01:44:39.580><c> yeah</c><01:44:41.430><c> yeah</c><01:44:45.570><c> yeah</c><01:44:52.110><c> if</c><01:44:53.110><c> you</c>

01:44:53.310 --> 01:44:53.320 align:start position:0%
questions do we yeah yeah yeah if you
 

01:44:53.320 --> 01:44:54.990 align:start position:0%
questions do we yeah yeah yeah if you
should<01:44:53.590><c> just</c><01:44:53.770><c> google</c><01:44:53.920><c> my</c><01:44:54.220><c> account</c><01:44:54.520><c> on</c>

01:44:54.990 --> 01:44:55.000 align:start position:0%
should just google my account on
 

01:44:55.000 --> 01:45:06.540 align:start position:0%
should just google my account on
SlideShare<01:44:55.630><c> you'll</c><01:44:56.320><c> find</c><01:44:56.560><c> it</c>

01:45:06.540 --> 01:45:06.550 align:start position:0%
 
 

01:45:06.550 --> 01:45:08.850 align:start position:0%
 
yes<01:45:07.150><c> I</c><01:45:07.329><c> can</c><01:45:07.510><c> push</c><01:45:07.719><c> my</c><01:45:07.840><c> code</c><01:45:08.050><c> record</c><01:45:08.409><c> in</c><01:45:08.530><c> Mario</c>

01:45:08.850 --> 01:45:08.860 align:start position:0%
yes I can push my code record in Mario
 

01:45:08.860 --> 01:45:12.180 align:start position:0%
yes I can push my code record in Mario
github<01:45:09.190><c> accounts</c><01:45:09.579><c> okay</c><01:45:10.440><c> do</c><01:45:11.440><c> some</c><01:45:11.619><c> maybe</c><01:45:11.800><c> do</c>

01:45:12.180 --> 01:45:12.190 align:start position:0%
github accounts okay do some maybe do
 

01:45:12.190 --> 01:45:18.089 align:start position:0%
github accounts okay do some maybe do
some<01:45:12.400><c> cleaning</c><01:45:12.989><c> referred</c><01:45:16.920><c> any</c><01:45:17.920><c> other</c>

01:45:18.089 --> 01:45:18.099 align:start position:0%
some cleaning referred any other
 

01:45:18.099 --> 01:45:28.649 align:start position:0%
some cleaning referred any other
questions<01:45:18.429><c> yes</c><01:45:18.579><c> please</c><01:45:22.349><c> sorry</c><01:45:27.389><c> you</c><01:45:28.389><c> have</c><01:45:28.510><c> to</c>

01:45:28.649 --> 01:45:28.659 align:start position:0%
questions yes please sorry you have to
 

01:45:28.659 --> 01:45:33.509 align:start position:0%
questions yes please sorry you have to
specify<01:45:28.869><c> the</c><01:45:29.139><c> type</c><01:45:29.440><c> yes</c><01:45:31.889><c> now</c><01:45:32.889><c> it's</c><01:45:33.099><c> optional</c>

01:45:33.509 --> 01:45:33.519 align:start position:0%
specify the type yes now it's optional
 

01:45:33.519 --> 01:45:34.890 align:start position:0%
specify the type yes now it's optional
when<01:45:33.730><c> you</c><01:45:33.820><c> write</c><01:45:33.999><c> your</c><01:45:34.179><c> lambda</c><01:45:34.389><c> extra</c><01:45:34.719><c> it's</c>

01:45:34.890 --> 01:45:34.900 align:start position:0%
when you write your lambda extra it's
 

01:45:34.900 --> 01:45:36.930 align:start position:0%
when you write your lambda extra it's
really<01:45:35.139><c> a</c><01:45:35.170><c> matter</c><01:45:35.320><c> of</c><01:45:35.499><c> readability</c><01:45:35.800><c> if</c><01:45:36.760><c> you</c>

01:45:36.930 --> 01:45:36.940 align:start position:0%
really a matter of readability if you
 

01:45:36.940 --> 01:45:38.399 align:start position:0%
really a matter of readability if you
think<01:45:37.150><c> that</c><01:45:37.269><c> Jo</c><01:45:37.420><c> code</c><01:45:37.599><c> is</c><01:45:37.719><c> more</c><01:45:37.900><c> readable</c><01:45:38.170><c> by</c>

01:45:38.399 --> 01:45:38.409 align:start position:0%
think that Jo code is more readable by
 

01:45:38.409 --> 01:45:40.200 align:start position:0%
think that Jo code is more readable by
specifying<01:45:39.010><c> the</c><01:45:39.130><c> code</c><01:45:39.369><c> if</c><01:45:39.519><c> it</c><01:45:39.639><c> helps</c><01:45:39.880><c> you</c><01:45:39.969><c> just</c>

01:45:40.200 --> 01:45:40.210 align:start position:0%
specifying the code if it helps you just
 

01:45:40.210 --> 01:45:42.390 align:start position:0%
specifying the code if it helps you just
do<01:45:40.360><c> it</c><01:45:40.480><c> there's</c><01:45:40.900><c> no</c><01:45:40.960><c> difference</c><01:45:41.409><c> in</c><01:45:41.679><c> the</c><01:45:42.099><c> way</c>

01:45:42.390 --> 01:45:42.400 align:start position:0%
do it there's no difference in the way
 

01:45:42.400 --> 01:45:45.239 align:start position:0%
do it there's no difference in the way
the<01:45:42.699><c> code</c><01:45:42.940><c> is</c><01:45:43.059><c> compiled</c><01:45:43.480><c> and</c><01:45:43.719><c> the</c><01:45:44.469><c> performance</c>

01:45:45.239 --> 01:45:45.249 align:start position:0%
the code is compiled and the performance
 

01:45:45.249 --> 01:45:46.890 align:start position:0%
the code is compiled and the performance
of<01:45:45.340><c> the</c><01:45:45.400><c> code</c><01:45:45.670><c> executed</c><01:45:46.179><c> so</c><01:45:46.420><c> it's</c><01:45:46.630><c> just</c><01:45:46.749><c> a</c>

01:45:46.890 --> 01:45:46.900 align:start position:0%
of the code executed so it's just a
 

01:45:46.900 --> 01:45:49.259 align:start position:0%
of the code executed so it's just a
matter<01:45:46.929><c> it's</c><01:45:47.499><c> the</c><01:45:47.679><c> same</c><01:45:47.889><c> for</c><01:45:48.249><c> lambdas</c><01:45:48.820><c> versus</c>

01:45:49.259 --> 01:45:49.269 align:start position:0%
matter it's the same for lambdas versus
 

01:45:49.269 --> 01:45:51.029 align:start position:0%
matter it's the same for lambdas versus
method<01:45:49.599><c> references</c><01:45:49.809><c> if</c><01:45:50.710><c> you're</c><01:45:50.889><c> more</c>

01:45:51.029 --> 01:45:51.039 align:start position:0%
method references if you're more
 

01:45:51.039 --> 01:45:53.549 align:start position:0%
method references if you're more
comfortable<01:45:51.070><c> with</c><01:45:51.610><c> lambda</c><01:45:52.019><c> just</c><01:45:53.019><c> just</c><01:45:53.380><c> keep</c>

01:45:53.549 --> 01:45:53.559 align:start position:0%
comfortable with lambda just just keep
 

01:45:53.559 --> 01:45:55.830 align:start position:0%
comfortable with lambda just just keep
you<01:45:53.679><c> along</c><01:45:53.829><c> the</c><01:45:53.980><c> new</c><01:45:54.130><c> code</c><01:45:54.369><c> and</c><01:45:54.699><c> as</c><01:45:55.570><c> time</c><01:45:55.809><c> goes</c>

01:45:55.830 --> 01:45:55.840 align:start position:0%
you along the new code and as time goes
 

01:45:55.840 --> 01:45:59.459 align:start position:0%
you along the new code and as time goes
by<01:45:56.019><c> you'll</c><01:45:56.320><c> probably</c><01:45:56.499><c> become</c><01:45:57.630><c> used</c><01:45:58.630><c> to</c><01:45:58.749><c> to</c>

01:45:59.459 --> 01:45:59.469 align:start position:0%
by you'll probably become used to to
 

01:45:59.469 --> 01:46:00.839 align:start position:0%
by you'll probably become used to to
method<01:45:59.769><c> references</c><01:45:59.949><c> I'd</c><01:46:00.280><c> like</c><01:46:00.429><c> to</c><01:46:00.579><c> write</c><01:46:00.730><c> you</c>

01:46:00.839 --> 01:46:00.849 align:start position:0%
method references I'd like to write you
 

01:46:00.849 --> 01:46:03.899 align:start position:0%
method references I'd like to write you
a<01:46:00.880><c> video</c><01:46:01.300><c> using</c><01:46:01.749><c> them</c><01:46:01.900><c> but</c><01:46:02.309><c> the</c><01:46:03.309><c> compiled</c><01:46:03.730><c> code</c>

01:46:03.899 --> 01:46:03.909 align:start position:0%
a video using them but the compiled code
 

01:46:03.909 --> 01:46:05.549 align:start position:0%
a video using them but the compiled code
is<01:46:04.090><c> the</c><01:46:04.210><c> same</c><01:46:04.420><c> so</c><01:46:04.719><c> there's</c><01:46:04.929><c> no</c><01:46:05.050><c> difference</c><01:46:05.199><c> in</c>

01:46:05.549 --> 01:46:05.559 align:start position:0%
is the same so there's no difference in
 

01:46:05.559 --> 01:46:07.259 align:start position:0%
is the same so there's no difference in
performance<01:46:05.800><c> between</c><01:46:06.190><c> metal</c><01:46:06.789><c> reference</c><01:46:07.119><c> in</c>

01:46:07.259 --> 01:46:07.269 align:start position:0%
performance between metal reference in
 

01:46:07.269 --> 01:46:13.709 align:start position:0%
performance between metal reference in
London<01:46:09.150><c> questions</c><01:46:10.150><c> yeah</c><01:46:12.510><c> there</c><01:46:13.510><c> is</c><01:46:13.599><c> an</c>

01:46:13.709 --> 01:46:13.719 align:start position:0%
London questions yeah there is an
 

01:46:13.719 --> 01:46:15.989 align:start position:0%
London questions yeah there is an
excellent<01:46:13.989><c> book</c><01:46:14.230><c> by</c><01:46:14.440><c> written</c><01:46:15.099><c> by</c><01:46:15.280><c> Maurice</c>

01:46:15.989 --> 01:46:15.999 align:start position:0%
excellent book by written by Maurice
 

01:46:15.999 --> 01:46:18.209 align:start position:0%
excellent book by written by Maurice
naphthalene<01:46:16.420><c> the</c><01:46:17.079><c> bad</c><01:46:17.260><c> lambdas</c><01:46:17.739><c> on</c><01:46:17.889><c> stream</c>

01:46:18.209 --> 01:46:18.219 align:start position:0%
naphthalene the bad lambdas on stream
 

01:46:18.219 --> 01:46:21.290 align:start position:0%
naphthalene the bad lambdas on stream
there<01:46:18.940><c> I</c><01:46:19.210><c> do</c><01:46:19.329><c> not</c><01:46:19.449><c> know</c><01:46:20.139><c> of</c><01:46:20.380><c> any</c><01:46:20.739><c> book</c>

01:46:21.290 --> 01:46:21.300 align:start position:0%
there I do not know of any book
 

01:46:21.300 --> 01:46:24.239 align:start position:0%
there I do not know of any book
especially<01:46:22.300><c> on</c><01:46:22.809><c> lambdas</c><01:46:23.199><c> only</c><01:46:23.800><c> on</c><01:46:23.889><c> lambdas</c>

01:46:24.239 --> 01:46:24.249 align:start position:0%
especially on lambdas only on lambdas
 

01:46:24.249 --> 01:46:26.729 align:start position:0%
especially on lambdas only on lambdas
they<01:46:24.550><c> usually</c><01:46:24.730><c> cover</c><01:46:25.150><c> lambdas</c><01:46:25.809><c> the</c><01:46:26.559><c> new</c>

01:46:26.729 --> 01:46:26.739 align:start position:0%
they usually cover lambdas the new
 

01:46:26.739 --> 01:46:28.739 align:start position:0%
they usually cover lambdas the new
methods<01:46:27.670><c> on</c><01:46:27.789><c> the</c><01:46:27.880><c> collection</c><01:46:28.329><c> framework</c>

01:46:28.739 --> 01:46:28.749 align:start position:0%
methods on the collection framework
 

01:46:28.749 --> 01:46:31.529 align:start position:0%
methods on the collection framework
streams<01:46:29.590><c> and</c><01:46:29.889><c> characters</c><01:46:30.340><c> and</c><01:46:30.550><c> I</c><01:46:31.150><c> think</c><01:46:31.389><c> the</c>

01:46:31.529 --> 01:46:31.539 align:start position:0%
streams and characters and I think the
 

01:46:31.539 --> 01:46:34.109 align:start position:0%
streams and characters and I think the
the<01:46:32.139><c> one</c><01:46:32.289><c> written</c><01:46:32.710><c> by</c><01:46:32.769><c> Morrison</c><01:46:33.280><c> after</c><01:46:33.519><c> is</c>

01:46:34.109 --> 01:46:34.119 align:start position:0%
the one written by Morrison after is
 

01:46:34.119 --> 01:46:36.239 align:start position:0%
the one written by Morrison after is
excellent<01:46:34.570><c> it's</c><01:46:34.809><c> available</c><01:46:35.050><c> in</c><01:46:35.499><c> the</c><01:46:35.889><c> library</c>

01:46:36.239 --> 01:46:36.249 align:start position:0%
excellent it's available in the library
 

01:46:36.249 --> 01:46:58.170 align:start position:0%
excellent it's available in the library
and<01:46:36.429><c> there's</c><01:46:36.999><c> also</c><01:46:37.179><c> Java</c><01:46:37.539><c> in</c><01:46:37.719><c> action</c><01:46:48.210><c> yeah</c>

01:46:58.170 --> 01:46:58.180 align:start position:0%
 
 

01:46:58.180 --> 01:47:02.920 align:start position:0%
 
you<01:46:59.180><c> cannot</c><01:46:59.420><c> switch</c><01:46:59.600><c> on</c><01:46:59.870><c> a</c><01:46:59.900><c> class</c><01:47:00.170><c> name</c><01:47:01.930><c> the</c>

01:47:02.920 --> 01:47:02.930 align:start position:0%
you cannot switch on a class name the
 

01:47:02.930 --> 01:47:05.740 align:start position:0%
you cannot switch on a class name the
switch<01:47:03.199><c> the</c><01:47:03.680><c> switch</c><01:47:03.800><c> only</c><01:47:04.130><c> takes</c><01:47:04.750><c> primitive</c>

01:47:05.740 --> 01:47:05.750 align:start position:0%
switch the switch only takes primitive
 

01:47:05.750 --> 01:47:08.680 align:start position:0%
switch the switch only takes primitive
time<01:47:05.930><c> integers</c><01:47:07.180><c> enumerations</c><01:47:08.180><c> and</c><01:47:08.390><c> strings</c>

01:47:08.680 --> 01:47:08.690 align:start position:0%
time integers enumerations and strings
 

01:47:08.690 --> 01:47:11.350 align:start position:0%
time integers enumerations and strings
you<01:47:09.320><c> cannot</c><01:47:09.560><c> provide</c><01:47:09.890><c> a</c><01:47:09.949><c> class</c><01:47:10.250><c> in</c><01:47:10.610><c> a</c><01:47:11.120><c> switch</c>

01:47:11.350 --> 01:47:11.360 align:start position:0%
you cannot provide a class in a switch
 

01:47:11.360 --> 01:47:13.000 align:start position:0%
you cannot provide a class in a switch
statement<01:47:11.510><c> so</c><01:47:12.020><c> you</c><01:47:12.080><c> have</c><01:47:12.260><c> to</c><01:47:12.410><c> provide</c><01:47:12.680><c> a</c><01:47:12.739><c> key</c>

01:47:13.000 --> 01:47:13.010 align:start position:0%
statement so you have to provide a key
 

01:47:13.010 --> 01:47:15.910 align:start position:0%
statement so you have to provide a key
which<01:47:13.730><c> may</c><01:47:13.910><c> be</c><01:47:13.969><c> the</c><01:47:14.150><c> class</c><01:47:14.360><c> name</c><01:47:14.600><c> or</c><01:47:14.810><c> any</c><01:47:15.050><c> kind</c>

01:47:15.910 --> 01:47:15.920 align:start position:0%
which may be the class name or any kind
 

01:47:15.920 --> 01:47:18.610 align:start position:0%
which may be the class name or any kind
of<01:47:16.010><c> label</c><01:47:16.460><c> that</c><01:47:17.090><c> would</c><01:47:17.989><c> represent</c><01:47:18.290><c> the</c><01:47:18.469><c> class</c>

01:47:18.610 --> 01:47:18.620 align:start position:0%
of label that would represent the class
 

01:47:18.620 --> 01:47:20.650 align:start position:0%
of label that would represent the class
there<01:47:19.310><c> are</c><01:47:19.400><c> other</c><01:47:19.610><c> ways</c><01:47:19.730><c> to</c><01:47:19.790><c> implement</c><01:47:20.360><c> this</c>

01:47:20.650 --> 01:47:20.660 align:start position:0%
there are other ways to implement this
 

01:47:20.660 --> 01:47:22.120 align:start position:0%
there are other ways to implement this
pattern<01:47:20.960><c> you</c><01:47:21.050><c> can</c><01:47:21.170><c> also</c><01:47:21.350><c> implement</c><01:47:21.620><c> it</c><01:47:21.920><c> using</c>

01:47:22.120 --> 01:47:22.130 align:start position:0%
pattern you can also implement it using
 

01:47:22.130 --> 01:47:24.150 align:start position:0%
pattern you can also implement it using
your<01:47:22.310><c> using</c><01:47:22.760><c> a</c><01:47:22.940><c> numeration</c><01:47:23.330><c> for</c><01:47:23.690><c> instance</c>

01:47:24.150 --> 01:47:24.160 align:start position:0%
your using a numeration for instance
 

01:47:24.160 --> 01:47:27.010 align:start position:0%
your using a numeration for instance
first<01:47:25.160><c> get</c><01:47:25.430><c> get</c><01:47:25.820><c> the</c><01:47:26.000><c> animator</c><01:47:26.449><c> set</c><01:47:26.600><c> values</c>

01:47:27.010 --> 01:47:27.020 align:start position:0%
first get get the animator set values
 

01:47:27.020 --> 01:47:29.470 align:start position:0%
first get get the animator set values
value<01:47:27.650><c> that</c><01:47:27.830><c> you</c><01:47:28.010><c> that</c><01:47:28.550><c> you</c><01:47:28.670><c> need</c><01:47:28.850><c> and</c><01:47:29.360><c> then</c>

01:47:29.470 --> 01:47:29.480 align:start position:0%
value that you that you need and then
 

01:47:29.480 --> 01:47:31.600 align:start position:0%
value that you that you need and then
call<01:47:29.780><c> an</c><01:47:30.620><c> instance</c><01:47:31.010><c> method</c><01:47:31.070><c> and</c><01:47:31.520><c> that</c>

01:47:31.600 --> 01:47:31.610 align:start position:0%
call an instance method and that
 

01:47:31.610 --> 01:47:33.550 align:start position:0%
call an instance method and that
enumerated<01:47:32.239><c> value</c><01:47:32.300><c> that</c><01:47:32.660><c> will</c><01:47:32.840><c> give</c><01:47:33.050><c> you</c><01:47:33.199><c> the</c>

01:47:33.550 --> 01:47:33.560 align:start position:0%
enumerated value that will give you the
 

01:47:33.560 --> 01:47:35.500 align:start position:0%
enumerated value that will give you the
right<01:47:33.680><c> Factory</c><01:47:34.100><c> no</c><01:47:34.730><c> it's</c><01:47:34.910><c> not</c><01:47:35.000><c> the</c><01:47:35.180><c> only</c><01:47:35.390><c> way</c>

01:47:35.500 --> 01:47:35.510 align:start position:0%
right Factory no it's not the only way
 

01:47:35.510 --> 01:47:37.390 align:start position:0%
right Factory no it's not the only way
to<01:47:35.540><c> do</c><01:47:35.750><c> it</c><01:47:35.780><c> but</c><01:47:36.320><c> this</c><01:47:36.500><c> one</c><01:47:36.710><c> the</c><01:47:36.920><c> one</c><01:47:37.219><c> I</c><01:47:37.250><c> should</c>

01:47:37.390 --> 01:47:37.400 align:start position:0%
to do it but this one the one I should
 

01:47:37.400 --> 01:47:40.180 align:start position:0%
to do it but this one the one I should
have<01:47:37.610><c> I</c><01:47:37.940><c> think</c><01:47:38.330><c> is</c><01:47:38.690><c> the</c><01:47:38.870><c> the</c><01:47:39.320><c> most</c><01:47:39.710><c> classical</c>

01:47:40.180 --> 01:47:40.190 align:start position:0%
have I think is the the most classical
 

01:47:40.190 --> 01:47:50.920 align:start position:0%
have I think is the the most classical
way<01:47:40.370><c> of</c><01:47:40.489><c> implementing</c><01:47:41.000><c> it</c><01:47:44.230><c> yeah</c>

01:47:50.920 --> 01:47:50.930 align:start position:0%
 
 

01:47:50.930 --> 01:47:59.660 align:start position:0%
 
yep

01:47:59.660 --> 01:47:59.670 align:start position:0%
 
 

01:47:59.670 --> 01:48:01.890 align:start position:0%
 
I'm<01:48:00.670><c> not</c><01:48:00.880><c> sure</c><01:48:01.030><c> quite</c><01:48:01.210><c> get</c><01:48:01.420><c> your</c><01:48:01.570><c> question</c>

01:48:01.890 --> 01:48:01.900 align:start position:0%
I'm not sure quite get your question
 

01:48:01.900 --> 01:48:09.310 align:start position:0%
I'm not sure quite get your question
sorry<01:48:05.550><c> yeah</c>

01:48:09.310 --> 01:48:09.320 align:start position:0%
 
 

01:48:09.320 --> 01:48:16.169 align:start position:0%
 
yeah

01:48:16.169 --> 01:48:16.179 align:start position:0%
 
 

01:48:16.179 --> 01:48:19.350 align:start position:0%
 
yeah<01:48:17.159><c> usually</c><01:48:18.159><c> when</c><01:48:18.730><c> you're</c><01:48:18.880><c> using</c><01:48:19.060><c> a</c>

01:48:19.350 --> 01:48:19.360 align:start position:0%
yeah usually when you're using a
 

01:48:19.360 --> 01:48:21.120 align:start position:0%
yeah usually when you're using a
dependency<01:48:20.050><c> injection</c><01:48:20.440><c> framework</c><01:48:20.469><c> you</c><01:48:20.980><c> can</c>

01:48:21.120 --> 01:48:21.130 align:start position:0%
dependency injection framework you can
 

01:48:21.130 --> 01:48:23.430 align:start position:0%
dependency injection framework you can
also<01:48:21.280><c> provide</c><01:48:21.760><c> factory</c><01:48:22.179><c> methods</c><01:48:22.630><c> to</c><01:48:23.260><c> create</c>

01:48:23.430 --> 01:48:23.440 align:start position:0%
also provide factory methods to create
 

01:48:23.440 --> 01:48:25.830 align:start position:0%
also provide factory methods to create
your<01:48:23.800><c> objects</c><01:48:24.219><c> whether</c><01:48:24.760><c> it's</c><01:48:25.000><c> in</c><01:48:25.179><c> spring</c><01:48:25.600><c> or</c>

01:48:25.830 --> 01:48:25.840 align:start position:0%
your objects whether it's in spring or
 

01:48:25.840 --> 01:48:27.120 align:start position:0%
your objects whether it's in spring or
in<01:48:25.960><c> CDI</c><01:48:26.260><c> for</c><01:48:26.620><c> instance</c>

01:48:27.120 --> 01:48:27.130 align:start position:0%
in CDI for instance
 

01:48:27.130 --> 01:48:30.240 align:start position:0%
in CDI for instance
so<01:48:27.670><c> just</c><01:48:28.090><c> by</c><01:48:28.260><c> annotating</c><01:48:29.260><c> the</c><01:48:29.290><c> right</c><01:48:29.800><c> pieces</c>

01:48:30.240 --> 01:48:30.250 align:start position:0%
so just by annotating the right pieces
 

01:48:30.250 --> 01:48:33.990 align:start position:0%
so just by annotating the right pieces
of<01:48:30.370><c> code</c><01:48:30.610><c> around</c><01:48:31.710><c> so</c><01:48:32.710><c> if</c><01:48:32.800><c> you</c><01:48:32.949><c> so</c><01:48:33.370><c> you</c><01:48:33.429><c> can</c><01:48:33.790><c> see</c>

01:48:33.990 --> 01:48:34.000 align:start position:0%
of code around so if you so you can see
 

01:48:34.000 --> 01:48:36.410 align:start position:0%
of code around so if you so you can see
do<01:48:34.210><c> that</c><01:48:34.239><c> and</c><01:48:34.659><c> the</c><01:48:35.260><c> yes</c><01:48:35.469><c> leverage</c><01:48:35.860><c> leverage</c>

01:48:36.410 --> 01:48:36.420 align:start position:0%
do that and the yes leverage leverage
 

01:48:36.420 --> 01:48:40.410 align:start position:0%
do that and the yes leverage leverage
lambda<01:48:37.420><c> but</c><01:48:38.429><c> the</c><01:48:39.429><c> dependency</c><01:48:40.090><c> injection</c>

01:48:40.410 --> 01:48:40.420 align:start position:0%
lambda but the dependency injection
 

01:48:40.420 --> 01:48:43.110 align:start position:0%
lambda but the dependency injection
framework<01:48:40.449><c> will</c><01:48:41.260><c> will</c><01:48:41.620><c> create</c><01:48:42.219><c> proxies</c><01:48:42.850><c> on</c>

01:48:43.110 --> 01:48:43.120 align:start position:0%
framework will will create proxies on
 

01:48:43.120 --> 01:48:45.630 align:start position:0%
framework will will create proxies on
objects<01:48:43.600><c> so</c><01:48:44.230><c> if</c><01:48:44.380><c> you're</c><01:48:44.620><c> using</c><01:48:44.890><c> lambdas</c><01:48:45.460><c> in</c>

01:48:45.630 --> 01:48:45.640 align:start position:0%
objects so if you're using lambdas in
 

01:48:45.640 --> 01:48:48.479 align:start position:0%
objects so if you're using lambdas in
them<01:48:46.080><c> Yolanda's</c><01:48:47.080><c> will</c><01:48:47.290><c> be</c><01:48:47.440><c> kind</c><01:48:47.739><c> of</c><01:48:47.890><c> cluttered</c>

01:48:48.479 --> 01:48:48.489 align:start position:0%
them Yolanda's will be kind of cluttered
 

01:48:48.489 --> 01:48:50.220 align:start position:0%
them Yolanda's will be kind of cluttered
with<01:48:48.730><c> all</c><01:48:48.790><c> those</c><01:48:49.090><c> proxies</c><01:48:49.630><c> and</c><01:48:49.750><c> you</c><01:48:49.870><c> will</c><01:48:50.020><c> lose</c>

01:48:50.220 --> 01:48:50.230 align:start position:0%
with all those proxies and you will lose
 

01:48:50.230 --> 01:48:53.580 align:start position:0%
with all those proxies and you will lose
most<01:48:51.040><c> of</c><01:48:51.219><c> the</c><01:48:51.370><c> most</c><01:48:52.239><c> of</c><01:48:52.390><c> the</c><01:48:52.570><c> good</c><01:48:52.780><c> things</c><01:48:53.050><c> you</c>

01:48:53.580 --> 01:48:53.590 align:start position:0%
most of the most of the good things you
 

01:48:53.590 --> 01:48:56.120 align:start position:0%
most of the most of the good things you
will<01:48:54.130><c> have</c><01:48:54.159><c> when</c><01:48:54.730><c> using</c><01:48:54.909><c> just</c><01:48:55.330><c> plain</c><01:48:55.510><c> lambda</c>

01:48:56.120 --> 01:48:56.130 align:start position:0%
will have when using just plain lambda
 

01:48:56.130 --> 01:48:59.640 align:start position:0%
will have when using just plain lambda
basically<01:48:57.480><c> lambdas</c><01:48:58.480><c> is</c><01:48:58.659><c> not</c><01:48:58.870><c> implemented</c><01:48:59.350><c> as</c>

01:48:59.640 --> 01:48:59.650 align:start position:0%
basically lambdas is not implemented as
 

01:48:59.650 --> 01:49:02.070 align:start position:0%
basically lambdas is not implemented as
an<01:48:59.770><c> object</c><01:48:59.920><c> inside</c><01:49:00.550><c> the</c><01:49:00.699><c> JVM</c><01:49:01.090><c> which</c><01:49:01.300><c> if</c><01:49:01.870><c> she</c>

01:49:02.070 --> 01:49:02.080 align:start position:0%
an object inside the JVM which if she
 

01:49:02.080 --> 01:49:03.930 align:start position:0%
an object inside the JVM which if she
were<01:49:02.140><c> calling</c><01:49:02.560><c> the</c><01:49:02.739><c> two</c><01:49:02.920><c> strings</c><01:49:03.250><c> or</c><01:49:03.520><c> equals</c>

01:49:03.930 --> 01:49:03.940 align:start position:0%
were calling the two strings or equals
 

01:49:03.940 --> 01:49:06.810 align:start position:0%
were calling the two strings or equals
of<01:49:04.360><c> the</c><01:49:05.170><c> object</c><01:49:05.500><c> methods</c><01:49:05.830><c> on</c><01:49:06.010><c> a</c><01:49:06.040><c> lambda</c><01:49:06.489><c> which</c>

01:49:06.810 --> 01:49:06.820 align:start position:0%
of the object methods on a lambda which
 

01:49:06.820 --> 01:49:08.550 align:start position:0%
of the object methods on a lambda which
which<01:49:07.060><c> is</c><01:49:07.239><c> still</c><01:49:07.449><c> possible</c><01:49:07.900><c> because</c><01:49:08.230><c> it</c><01:49:08.380><c> will</c>

01:49:08.550 --> 01:49:08.560 align:start position:0%
which is still possible because it will
 

01:49:08.560 --> 01:49:11.399 align:start position:0%
which is still possible because it will
compile<01:49:08.980><c> then</c><01:49:09.730><c> you</c><01:49:09.940><c> are</c><01:49:10.030><c> you</c><01:49:10.179><c> are</c><01:49:10.900><c> losing</c><01:49:11.110><c> all</c>

01:49:11.399 --> 01:49:11.409 align:start position:0%
compile then you are you are losing all
 

01:49:11.409 --> 01:49:14.520 align:start position:0%
compile then you are you are losing all
the<01:49:11.650><c> the</c><01:49:12.010><c> optimization</c><01:49:12.670><c> the</c><01:49:13.179><c> JVM</c><01:49:13.630><c> will</c><01:49:14.350><c> be</c>

01:49:14.520 --> 01:49:14.530 align:start position:0%
the the optimization the JVM will be
 

01:49:14.530 --> 01:49:19.500 align:start position:0%
the the optimization the JVM will be
able<01:49:14.679><c> to</c><01:49:15.010><c> set</c><01:49:15.400><c> up</c><01:49:15.520><c> for</c><01:49:15.550><c> you</c><01:49:15.870><c> in</c><01:49:16.870><c> a</c><01:49:18.270><c> way</c><01:49:19.270><c> when</c>

01:49:19.500 --> 01:49:19.510 align:start position:0%
able to set up for you in a way when
 

01:49:19.510 --> 01:49:21.060 align:start position:0%
able to set up for you in a way when
you're<01:49:19.659><c> just</c><01:49:19.870><c> using</c><01:49:20.199><c> plain</c><01:49:20.350><c> lambda</c><01:49:20.770><c> so</c><01:49:20.949><c> if</c>

01:49:21.060 --> 01:49:21.070 align:start position:0%
you're just using plain lambda so if
 

01:49:21.070 --> 01:49:23.850 align:start position:0%
you're just using plain lambda so if
you're<01:49:21.250><c> using</c><01:49:21.489><c> plain</c><01:49:22.239><c> lambdas</c><01:49:22.659><c> just</c><01:49:23.140><c> just</c><01:49:23.380><c> use</c>

01:49:23.850 --> 01:49:23.860 align:start position:0%
you're using plain lambdas just just use
 

01:49:23.860 --> 01:49:28.200 align:start position:0%
you're using plain lambdas just just use
them<01:49:24.179><c> as</c><01:49:25.179><c> is</c><01:49:25.449><c> do</c><01:49:25.780><c> not</c><01:49:26.400><c> do</c><01:49:27.400><c> any</c><01:49:27.580><c> funny</c><01:49:27.940><c> stuff</c>

01:49:28.200 --> 01:49:28.210 align:start position:0%
them as is do not do any funny stuff
 

01:49:28.210 --> 01:49:34.740 align:start position:0%
them as is do not do any funny stuff
with<01:49:28.390><c> them</c><01:49:29.159><c> yeah</c>

01:49:34.740 --> 01:49:34.750 align:start position:0%
 
 

01:49:34.750 --> 01:49:40.030 align:start position:0%
 
I'd<01:49:35.750><c> never</c><01:49:36.110><c> I</c><01:49:36.320><c> did</c><01:49:36.740><c> not</c><01:49:37.060><c> heard</c><01:49:38.060><c> of</c><01:49:38.090><c> any</c><01:49:38.360><c> I</c><01:49:39.040><c> don't</c>

01:49:40.030 --> 01:49:40.040 align:start position:0%
I'd never I did not heard of any I don't
 

01:49:40.040 --> 01:49:43.030 align:start position:0%
I'd never I did not heard of any I don't
I<01:49:40.220><c> don't</c><01:49:40.280><c> think</c><01:49:40.520><c> it</c><01:49:40.820><c> has</c><01:49:41.060><c> I</c><01:49:41.800><c> can't</c><01:49:42.800><c> be</c><01:49:42.920><c> exactly</c>

01:49:43.030 --> 01:49:43.040 align:start position:0%
I don't think it has I can't be exactly
 

01:49:43.040 --> 01:49:46.150 align:start position:0%
I don't think it has I can't be exactly
sure<01:49:43.550><c> that</c><01:49:44.410><c> there</c><01:49:45.410><c> is</c><01:49:45.590><c> room</c><01:49:45.830><c> for</c><01:49:45.860><c> improvement</c>

01:49:46.150 --> 01:49:46.160 align:start position:0%
sure that there is room for improvement
 

01:49:46.160 --> 01:49:48.100 align:start position:0%
sure that there is room for improvement
the<01:49:46.730><c> wait</c><01:49:46.910><c> lambdas</c><01:49:47.240><c> have</c><01:49:47.390><c> been</c><01:49:47.540><c> implemented</c>

01:49:48.100 --> 01:49:48.110 align:start position:0%
the wait lambdas have been implemented
 

01:49:48.110 --> 01:49:49.930 align:start position:0%
the wait lambdas have been implemented
in<01:49:48.200><c> the</c><01:49:48.320><c> JDM</c><01:49:48.770><c> there</c><01:49:49.340><c> is</c><01:49:49.430><c> room</c><01:49:49.610><c> for</c><01:49:49.640><c> improvement</c>

01:49:49.930 --> 01:49:49.940 align:start position:0%
in the JDM there is room for improvement
 

01:49:49.940 --> 01:49:52.360 align:start position:0%
in the JDM there is room for improvement
in<01:49:50.510><c> the</c><01:49:50.600><c> future</c><01:49:50.780><c> I</c><01:49:51.170><c> am</c><01:49:51.350><c> Not</c><01:49:51.740><c> sure</c><01:49:51.770><c> there</c><01:49:52.190><c> are</c>

01:49:52.360 --> 01:49:52.370 align:start position:0%
in the future I am Not sure there are
 

01:49:52.370 --> 01:49:54.520 align:start position:0%
in the future I am Not sure there are
they<01:49:52.910><c> were</c><01:49:53.060><c> major</c><01:49:53.330><c> modification</c><01:49:54.170><c> on</c><01:49:54.350><c> that</c>

01:49:54.520 --> 01:49:54.530 align:start position:0%
they were major modification on that
 

01:49:54.530 --> 01:50:02.950 align:start position:0%
they were major modification on that
field<01:49:57.820><c> any</c><01:49:58.820><c> other</c><01:49:59.000><c> questions</c><01:50:01.480><c> okay</c><01:50:02.480><c> thank</c><01:50:02.870><c> you</c>

01:50:02.950 --> 01:50:02.960 align:start position:0%
field any other questions okay thank you
 

01:50:02.960 --> 01:50:03.820 align:start position:0%
field any other questions okay thank you
for<01:50:03.170><c> your</c><01:50:03.290><c> attention</c>

01:50:03.820 --> 01:50:03.830 align:start position:0%
for your attention
 

01:50:03.830 --> 01:50:06.080 align:start position:0%
for your attention
have<01:50:04.010><c> a</c><01:50:04.040><c> great</c><01:50:04.220><c> day</c>

01:50:06.080 --> 01:50:06.090 align:start position:0%
have a great day
 

01:50:06.090 --> 01:50:09.989 align:start position:0%
have a great day
[Applause]

