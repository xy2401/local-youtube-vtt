WEBVTT
Kind: captions
Language: en

00:00:03.159 --> 00:00:05.570 align:start position:0%
 
right<00:00:03.939><c> good</c><00:00:04.720><c> afternoon</c><00:00:04.990><c> and</c><00:00:05.439><c> welcome</c>

00:00:05.570 --> 00:00:05.580 align:start position:0%
right good afternoon and welcome
 

00:00:05.580 --> 00:00:09.150 align:start position:0%
right good afternoon and welcome
everybody<00:00:06.580><c> welcome</c><00:00:06.790><c> to</c><00:00:07.719><c> the</c><00:00:08.050><c> very</c><00:00:08.860><c> badly</c>

00:00:09.150 --> 00:00:09.160 align:start position:0%
everybody welcome to the very badly
 

00:00:09.160 --> 00:00:11.400 align:start position:0%
everybody welcome to the very badly
misquoted<00:00:09.880><c> from</c><00:00:10.660><c> Star</c><00:00:10.929><c> Trek</c>

00:00:11.400 --> 00:00:11.410 align:start position:0%
misquoted from Star Trek
 

00:00:11.410 --> 00:00:13.710 align:start position:0%
misquoted from Star Trek
it's<00:00:11.800><c> Java</c><00:00:12.190><c> Jim</c><00:00:12.519><c> but</c><00:00:12.940><c> not</c><00:00:12.970><c> as</c><00:00:13.210><c> we</c><00:00:13.330><c> know</c><00:00:13.480><c> it</c>

00:00:13.710 --> 00:00:13.720 align:start position:0%
it's Java Jim but not as we know it
 

00:00:13.720 --> 00:00:16.080 align:start position:0%
it's Java Jim but not as we know it
because<00:00:14.349><c> the</c><00:00:15.130><c> original</c><00:00:15.430><c> quote</c><00:00:15.610><c> that</c><00:00:15.790><c> people</c>

00:00:16.080 --> 00:00:16.090 align:start position:0%
because the original quote that people
 

00:00:16.090 --> 00:00:17.790 align:start position:0%
because the original quote that people
like<00:00:16.240><c> to</c><00:00:16.330><c> say</c><00:00:16.480><c> is</c><00:00:16.539><c> it's</c><00:00:16.720><c> life</c><00:00:16.960><c> Jim</c><00:00:16.990><c> but</c><00:00:17.619><c> not</c><00:00:17.650><c> as</c>

00:00:17.790 --> 00:00:17.800 align:start position:0%
like to say is it's life Jim but not as
 

00:00:17.800 --> 00:00:19.080 align:start position:0%
like to say is it's life Jim but not as
we<00:00:17.920><c> know</c><00:00:18.160><c> it</c><00:00:18.279><c> and</c><00:00:18.609><c> that's</c><00:00:18.730><c> actually</c><00:00:18.939><c> a</c>

00:00:19.080 --> 00:00:19.090 align:start position:0%
we know it and that's actually a
 

00:00:19.090 --> 00:00:21.779 align:start position:0%
we know it and that's actually a
misquote<00:00:19.390><c> anyway</c><00:00:19.839><c> but</c><00:00:20.499><c> anyway</c><00:00:20.759><c> the</c><00:00:21.759><c> idea</c>

00:00:21.779 --> 00:00:21.789 align:start position:0%
misquote anyway but anyway the idea
 

00:00:21.789 --> 00:00:23.849 align:start position:0%
misquote anyway but anyway the idea
behind<00:00:22.150><c> this</c><00:00:22.359><c> presentation</c><00:00:22.810><c> is</c><00:00:23.169><c> to</c><00:00:23.589><c> talk</c>

00:00:23.849 --> 00:00:23.859 align:start position:0%
behind this presentation is to talk
 

00:00:23.859 --> 00:00:27.720 align:start position:0%
behind this presentation is to talk
about<00:00:24.039><c> lambda</c><00:00:24.789><c> expressions</c><00:00:25.419><c> and</c><00:00:26.310><c> so</c><00:00:27.310><c> what</c>

00:00:27.720 --> 00:00:27.730 align:start position:0%
about lambda expressions and so what
 

00:00:27.730 --> 00:00:30.569 align:start position:0%
about lambda expressions and so what
I've<00:00:27.819><c> done</c><00:00:27.970><c> in</c><00:00:28.269><c> terms</c><00:00:28.869><c> of</c><00:00:29.140><c> the</c><00:00:29.289><c> agenda</c><00:00:29.579><c> is</c>

00:00:30.569 --> 00:00:30.579 align:start position:0%
I've done in terms of the agenda is
 

00:00:30.579 --> 00:00:32.060 align:start position:0%
I've done in terms of the agenda is
divided<00:00:30.909><c> up</c><00:00:30.939><c> into</c><00:00:31.179><c> three</c><00:00:31.329><c> parts</c>

00:00:32.060 --> 00:00:32.070 align:start position:0%
divided up into three parts
 

00:00:32.070 --> 00:00:34.530 align:start position:0%
divided up into three parts
first<00:00:33.070><c> part</c><00:00:33.309><c> we're</c><00:00:33.520><c> going</c><00:00:33.640><c> to</c><00:00:33.730><c> talk</c><00:00:33.790><c> about</c><00:00:33.970><c> the</c>

00:00:34.530 --> 00:00:34.540 align:start position:0%
first part we're going to talk about the
 

00:00:34.540 --> 00:00:37.830 align:start position:0%
first part we're going to talk about the
details<00:00:34.720><c> of</c><00:00:35.460><c> lambda</c><00:00:36.460><c> expressions</c><00:00:36.940><c> so</c><00:00:37.600><c> who</c>

00:00:37.830 --> 00:00:37.840 align:start position:0%
details of lambda expressions so who
 

00:00:37.840 --> 00:00:42.090 align:start position:0%
details of lambda expressions so who
here<00:00:38.050><c> is</c><00:00:38.170><c> using</c><00:00:38.350><c> JDK</c><00:00:38.830><c> 8</c><00:00:39.390><c> ok</c><00:00:40.390><c> good</c><00:00:40.870><c> so</c><00:00:41.110><c> we'll</c>

00:00:42.090 --> 00:00:42.100 align:start position:0%
here is using JDK 8 ok good so we'll
 

00:00:42.100 --> 00:00:43.410 align:start position:0%
here is using JDK 8 ok good so we'll
talk<00:00:42.190><c> a</c><00:00:42.250><c> bit</c><00:00:42.340><c> about</c><00:00:42.550><c> the</c><00:00:42.670><c> details</c><00:00:42.790><c> of</c><00:00:43.120><c> lambda</c>

00:00:43.410 --> 00:00:43.420 align:start position:0%
talk a bit about the details of lambda
 

00:00:43.420 --> 00:00:44.850 align:start position:0%
talk a bit about the details of lambda
expressions<00:00:43.930><c> from</c><00:00:44.320><c> the</c><00:00:44.410><c> point</c><00:00:44.590><c> of</c><00:00:44.650><c> view</c><00:00:44.710><c> of</c>

00:00:44.850 --> 00:00:44.860 align:start position:0%
expressions from the point of view of
 

00:00:44.860 --> 00:00:46.710 align:start position:0%
expressions from the point of view of
what<00:00:45.550><c> they</c><00:00:45.670><c> are</c><00:00:45.790><c> and</c><00:00:45.970><c> how</c><00:00:46.090><c> you</c><00:00:46.150><c> use</c><00:00:46.360><c> in</c><00:00:46.480><c> and</c><00:00:46.600><c> so</c>

00:00:46.710 --> 00:00:46.720 align:start position:0%
what they are and how you use in and so
 

00:00:46.720 --> 00:00:50.370 align:start position:0%
what they are and how you use in and so
on<00:00:46.840><c> then</c><00:00:47.770><c> we'll</c><00:00:48.310><c> talk</c><00:00:48.580><c> some</c><00:00:49.000><c> about</c><00:00:49.690><c> the</c>

00:00:50.370 --> 00:00:50.380 align:start position:0%
on then we'll talk some about the
 

00:00:50.380 --> 00:00:52.380 align:start position:0%
on then we'll talk some about the
performance<00:00:51.100><c> of</c><00:00:51.400><c> lambda</c><00:00:51.820><c> expressions</c>

00:00:52.380 --> 00:00:52.390 align:start position:0%
performance of lambda expressions
 

00:00:52.390 --> 00:00:54.390 align:start position:0%
performance of lambda expressions
because<00:00:53.200><c> the</c><00:00:53.320><c> way</c><00:00:53.440><c> that</c><00:00:53.650><c> they're</c><00:00:53.770><c> implemented</c>

00:00:54.390 --> 00:00:54.400 align:start position:0%
because the way that they're implemented
 

00:00:54.400 --> 00:00:58.170 align:start position:0%
because the way that they're implemented
is<00:00:55.260><c> not</c><00:00:56.260><c> quite</c><00:00:57.040><c> how</c><00:00:57.190><c> you</c><00:00:57.250><c> might</c><00:00:57.400><c> expect</c><00:00:57.730><c> it</c><00:00:57.970><c> and</c>

00:00:58.170 --> 00:00:58.180 align:start position:0%
is not quite how you might expect it and
 

00:00:58.180 --> 00:01:00.360 align:start position:0%
is not quite how you might expect it and
so<00:00:58.960><c> there</c><00:00:59.200><c> are</c><00:00:59.290><c> some</c><00:00:59.410><c> interesting</c><00:01:00.100><c> details</c>

00:01:00.360 --> 00:01:00.370 align:start position:0%
so there are some interesting details
 

00:01:00.370 --> 00:01:02.850 align:start position:0%
so there are some interesting details
that<00:01:00.820><c> we</c><00:01:00.910><c> can</c><00:01:01.030><c> discuss</c><00:01:01.420><c> when</c><00:01:02.079><c> it</c><00:01:02.200><c> comes</c><00:01:02.410><c> to</c><00:01:02.680><c> how</c>

00:01:02.850 --> 00:01:02.860 align:start position:0%
that we can discuss when it comes to how
 

00:01:02.860 --> 00:01:05.609 align:start position:0%
that we can discuss when it comes to how
lambdas<00:01:03.340><c> perform</c><00:01:03.930><c> compared</c><00:01:04.930><c> to</c><00:01:05.290><c> the</c>

00:01:05.609 --> 00:01:05.619 align:start position:0%
lambdas perform compared to the
 

00:01:05.619 --> 00:01:08.580 align:start position:0%
lambdas perform compared to the
equivalent<00:01:06.009><c> anonymous</c><00:01:06.430><c> inner</c><00:01:06.700><c> classes</c><00:01:07.590><c> and</c>

00:01:08.580 --> 00:01:08.590 align:start position:0%
equivalent anonymous inner classes and
 

00:01:08.590 --> 00:01:10.349 align:start position:0%
equivalent anonymous inner classes and
then<00:01:09.009><c> the</c><00:01:09.280><c> last</c><00:01:09.520><c> part</c><00:01:09.969><c> of</c><00:01:10.119><c> the</c><00:01:10.210><c> presentation</c>

00:01:10.349 --> 00:01:10.359 align:start position:0%
then the last part of the presentation
 

00:01:10.359 --> 00:01:14.789 align:start position:0%
then the last part of the presentation
is<00:01:11.170><c> how</c><00:01:12.159><c> far</c><00:01:12.549><c> can</c><00:01:12.909><c> we</c><00:01:13.329><c> take</c><00:01:13.359><c> lambdas</c><00:01:14.140><c> this</c><00:01:14.649><c> is</c>

00:01:14.789 --> 00:01:14.799 align:start position:0%
is how far can we take lambdas this is
 

00:01:14.799 --> 00:01:17.039 align:start position:0%
is how far can we take lambdas this is
where<00:01:14.979><c> we</c><00:01:15.159><c> get</c><00:01:15.310><c> into</c><00:01:15.520><c> the</c><00:01:15.880><c> it's</c><00:01:16.149><c> Java</c><00:01:16.569><c> Jim</c><00:01:16.840><c> but</c>

00:01:17.039 --> 00:01:17.049 align:start position:0%
where we get into the it's Java Jim but
 

00:01:17.049 --> 00:01:19.440 align:start position:0%
where we get into the it's Java Jim but
not<00:01:17.079><c> as</c><00:01:17.229><c> we</c><00:01:17.380><c> know</c><00:01:17.530><c> it</c><00:01:17.679><c> and</c><00:01:18.189><c> the</c><00:01:19.030><c> way</c><00:01:19.149><c> that</c><00:01:19.329><c> I've</c>

00:01:19.440 --> 00:01:19.450 align:start position:0%
not as we know it and the way that I've
 

00:01:19.450 --> 00:01:21.149 align:start position:0%
not as we know it and the way that I've
kind<00:01:19.960><c> of</c><00:01:20.049><c> divided</c><00:01:20.439><c> this</c><00:01:20.560><c> up</c><00:01:20.710><c> is</c><00:01:20.920><c> that</c><00:01:21.100><c> the</c>

00:01:21.149 --> 00:01:21.159 align:start position:0%
kind of divided this up is that the
 

00:01:21.159 --> 00:01:22.679 align:start position:0%
kind of divided this up is that the
first<00:01:21.340><c> two</c><00:01:21.460><c> parts</c><00:01:21.639><c> are</c><00:01:22.030><c> what</c><00:01:22.149><c> I</c><00:01:22.179><c> describe</c><00:01:22.569><c> is</c>

00:01:22.679 --> 00:01:22.689 align:start position:0%
first two parts are what I describe is
 

00:01:22.689 --> 00:01:26.069 align:start position:0%
first two parts are what I describe is
interesting<00:01:23.170><c> and</c><00:01:23.409><c> useful</c><00:01:24.210><c> the</c><00:01:25.210><c> last</c><00:01:25.450><c> part</c><00:01:25.780><c> is</c>

00:01:26.069 --> 00:01:26.079 align:start position:0%
interesting and useful the last part is
 

00:01:26.079 --> 00:01:29.010 align:start position:0%
interesting and useful the last part is
interesting<00:01:26.740><c> but</c><00:01:27.310><c> not</c><00:01:27.520><c> so</c><00:01:27.969><c> useful</c><00:01:28.179><c> because</c>

00:01:29.010 --> 00:01:29.020 align:start position:0%
interesting but not so useful because
 

00:01:29.020 --> 00:01:32.370 align:start position:0%
interesting but not so useful because
nobody<00:01:29.889><c> is</c><00:01:30.249><c> going</c><00:01:30.729><c> to</c><00:01:30.909><c> program</c><00:01:31.359><c> in</c><00:01:31.600><c> Java</c><00:01:31.630><c> the</c>

00:01:32.370 --> 00:01:32.380 align:start position:0%
nobody is going to program in Java the
 

00:01:32.380 --> 00:01:33.840 align:start position:0%
nobody is going to program in Java the
way<00:01:32.499><c> that</c><00:01:32.679><c> I'm</c><00:01:32.799><c> going</c><00:01:33.039><c> to</c><00:01:33.189><c> show</c><00:01:33.340><c> you</c><00:01:33.369><c> at</c><00:01:33.700><c> the</c>

00:01:33.840 --> 00:01:33.850 align:start position:0%
way that I'm going to show you at the
 

00:01:33.850 --> 00:01:35.639 align:start position:0%
way that I'm going to show you at the
end<00:01:33.969><c> of</c><00:01:34.060><c> this</c><00:01:34.149><c> presentation</c><00:01:34.630><c> if</c><00:01:35.229><c> you</c><00:01:35.469><c> do</c>

00:01:35.639 --> 00:01:35.649 align:start position:0%
end of this presentation if you do
 

00:01:35.649 --> 00:01:40.529 align:start position:0%
end of this presentation if you do
you're<00:01:36.249><c> doing</c><00:01:36.549><c> it</c><00:01:36.670><c> wrong</c><00:01:38.189><c> right</c><00:01:39.189><c> so</c><00:01:39.969><c> let's</c>

00:01:40.529 --> 00:01:40.539 align:start position:0%
you're doing it wrong right so let's
 

00:01:40.539 --> 00:01:43.889 align:start position:0%
you're doing it wrong right so let's
start<00:01:40.840><c> then</c><00:01:41.319><c> with</c><00:01:41.829><c> lambda</c><00:01:42.609><c> expressions</c><00:01:43.060><c> now</c>

00:01:43.889 --> 00:01:43.899 align:start position:0%
start then with lambda expressions now
 

00:01:43.899 --> 00:01:46.769 align:start position:0%
start then with lambda expressions now
since<00:01:44.170><c> you're</c><00:01:44.259><c> using</c><00:01:44.469><c> JDK</c><00:01:45.310><c> I</c><00:01:45.340><c> eat</c><00:01:45.609><c> you</c><00:01:46.420><c> will</c><00:01:46.630><c> be</c>

00:01:46.769 --> 00:01:46.779 align:start position:0%
since you're using JDK I eat you will be
 

00:01:46.779 --> 00:01:48.779 align:start position:0%
since you're using JDK I eat you will be
aware<00:01:47.049><c> of</c><00:01:47.109><c> some</c><00:01:47.950><c> of</c><00:01:48.039><c> this</c><00:01:48.100><c> stuff</c><00:01:48.159><c> but</c><00:01:48.490><c> it's</c>

00:01:48.779 --> 00:01:48.789 align:start position:0%
aware of some of this stuff but it's
 

00:01:48.789 --> 00:01:50.370 align:start position:0%
aware of some of this stuff but it's
worth<00:01:48.969><c> talking</c><00:01:49.450><c> about</c><00:01:49.659><c> this</c><00:01:49.929><c> a</c><00:01:49.990><c> little</c><00:01:50.139><c> bit</c><00:01:50.319><c> of</c>

00:01:50.370 --> 00:01:50.380 align:start position:0%
worth talking about this a little bit of
 

00:01:50.380 --> 00:01:54.480 align:start position:0%
worth talking about this a little bit of
detail<00:01:50.939><c> so</c><00:01:51.939><c> what</c><00:01:52.060><c> we</c><00:01:52.149><c> had</c><00:01:52.299><c> before</c><00:01:52.529><c> jdk</c><00:01:53.529><c> 8</c><00:01:53.679><c> was</c>

00:01:54.480 --> 00:01:54.490 align:start position:0%
detail so what we had before jdk 8 was
 

00:01:54.490 --> 00:01:57.779 align:start position:0%
detail so what we had before jdk 8 was
the<00:01:54.819><c> idea</c><00:01:55.270><c> of</c><00:01:55.329><c> anonymous</c><00:01:55.990><c> inner</c><00:01:56.499><c> classes</c><00:01:56.789><c> and</c>

00:01:57.779 --> 00:01:57.789 align:start position:0%
the idea of anonymous inner classes and
 

00:01:57.789 --> 00:01:59.129 align:start position:0%
the idea of anonymous inner classes and
what<00:01:58.029><c> we</c><00:01:58.119><c> could</c><00:01:58.240><c> do</c><00:01:58.329><c> there</c><00:01:58.539><c> is</c><00:01:58.569><c> we</c><00:01:58.929><c> could</c>

00:01:59.129 --> 00:01:59.139 align:start position:0%
what we could do there is we could
 

00:01:59.139 --> 00:02:02.010 align:start position:0%
what we could do there is we could
create<00:01:59.349><c> a</c><00:01:59.409><c> reference</c><00:01:59.859><c> to</c><00:02:00.459><c> an</c><00:02:00.909><c> instance</c><00:02:01.749><c> of</c><00:02:01.929><c> a</c>

00:02:02.010 --> 00:02:02.020 align:start position:0%
create a reference to an instance of a
 

00:02:02.020 --> 00:02:04.349 align:start position:0%
create a reference to an instance of a
class<00:02:02.049><c> that</c><00:02:02.649><c> implemented</c><00:02:03.369><c> a</c><00:02:03.579><c> particular</c>

00:02:04.349 --> 00:02:04.359 align:start position:0%
class that implemented a particular
 

00:02:04.359 --> 00:02:06.149 align:start position:0%
class that implemented a particular
interface<00:02:04.719><c> and</c><00:02:05.439><c> in</c><00:02:05.590><c> the</c><00:02:05.679><c> case</c><00:02:05.829><c> of</c><00:02:05.979><c> this</c><00:02:06.099><c> one</c>

00:02:06.149 --> 00:02:06.159 align:start position:0%
interface and in the case of this one
 

00:02:06.159 --> 00:02:08.219 align:start position:0%
interface and in the case of this one
it's<00:02:06.520><c> a</c><00:02:06.670><c> anonymous</c><00:02:07.599><c> in</c><00:02:07.689><c> a</c><00:02:07.749><c> class</c><00:02:07.929><c> that</c><00:02:08.080><c> has</c><00:02:08.140><c> a</c>

00:02:08.219 --> 00:02:08.229 align:start position:0%
it's a anonymous in a class that has a
 

00:02:08.229 --> 00:02:10.889 align:start position:0%
it's a anonymous in a class that has a
single<00:02:08.500><c> in</c><00:02:08.890><c> a</c><00:02:09.399><c> single</c><00:02:09.759><c> method</c><00:02:10.000><c> that</c><00:02:10.630><c> needs</c><00:02:10.810><c> to</c>

00:02:10.889 --> 00:02:10.899 align:start position:0%
single in a single method that needs to
 

00:02:10.899 --> 00:02:12.930 align:start position:0%
single in a single method that needs to
be<00:02:10.929><c> implemented</c><00:02:11.260><c> so</c><00:02:12.160><c> rather</c><00:02:12.460><c> than</c><00:02:12.700><c> actually</c>

00:02:12.930 --> 00:02:12.940 align:start position:0%
be implemented so rather than actually
 

00:02:12.940 --> 00:02:14.730 align:start position:0%
be implemented so rather than actually
having<00:02:13.300><c> to</c><00:02:13.510><c> either</c><00:02:13.780><c> create</c><00:02:14.140><c> a</c><00:02:14.290><c> new</c><00:02:14.470><c> class</c>

00:02:14.730 --> 00:02:14.740 align:start position:0%
having to either create a new class
 

00:02:14.740 --> 00:02:16.010 align:start position:0%
having to either create a new class
which<00:02:15.010><c> implemented</c><00:02:15.610><c> that</c><00:02:15.700><c> in</c>

00:02:16.010 --> 00:02:16.020 align:start position:0%
which implemented that in
 

00:02:16.020 --> 00:02:18.680 align:start position:0%
which implemented that in
face<00:02:16.170><c> and</c><00:02:16.560><c> then</c><00:02:16.710><c> instantiate</c><00:02:17.010><c> it</c><00:02:17.490><c> what</c><00:02:18.480><c> we</c><00:02:18.570><c> can</c>

00:02:18.680 --> 00:02:18.690 align:start position:0%
face and then instantiate it what we can
 

00:02:18.690 --> 00:02:20.600 align:start position:0%
face and then instantiate it what we can
do<00:02:18.810><c> is</c><00:02:18.900><c> we</c><00:02:18.990><c> can</c><00:02:19.110><c> simply</c><00:02:19.380><c> say</c><00:02:19.590><c> create</c><00:02:20.340><c> my</c><00:02:20.430><c> new</c>

00:02:20.600 --> 00:02:20.610 align:start position:0%
do is we can simply say create my new
 

00:02:20.610 --> 00:02:23.450 align:start position:0%
do is we can simply say create my new
runnable<00:02:21.180><c> which</c><00:02:21.690><c> is</c><00:02:21.840><c> the</c><00:02:21.930><c> interface</c><00:02:22.230><c> and</c><00:02:22.650><c> I</c>

00:02:23.450 --> 00:02:23.460 align:start position:0%
runnable which is the interface and I
 

00:02:23.460 --> 00:02:26.390 align:start position:0%
runnable which is the interface and I
want<00:02:23.820><c> the</c><00:02:24.030><c> method</c><00:02:24.270><c> of</c><00:02:24.660><c> that</c><00:02:25.290><c> interface</c><00:02:25.950><c> to</c><00:02:26.310><c> be</c>

00:02:26.390 --> 00:02:26.400 align:start position:0%
want the method of that interface to be
 

00:02:26.400 --> 00:02:28.760 align:start position:0%
want the method of that interface to be
implemented<00:02:27.030><c> this</c><00:02:27.420><c> way</c><00:02:27.630><c> by</c><00:02:27.960><c> having</c><00:02:28.170><c> run</c><00:02:28.500><c> and</c>

00:02:28.760 --> 00:02:28.770 align:start position:0%
implemented this way by having run and
 

00:02:28.770 --> 00:02:30.710 align:start position:0%
implemented this way by having run and
then<00:02:29.340><c> we're</c><00:02:29.460><c> going</c><00:02:29.550><c> to</c><00:02:29.610><c> do</c><00:02:29.730><c> some</c><00:02:29.910><c> stuff</c><00:02:30.150><c> and</c>

00:02:30.710 --> 00:02:30.720 align:start position:0%
then we're going to do some stuff and
 

00:02:30.720 --> 00:02:32.810 align:start position:0%
then we're going to do some stuff and
then<00:02:30.960><c> we'll</c><00:02:31.170><c> start</c><00:02:31.560><c> the</c><00:02:31.770><c> the</c><00:02:32.130><c> thread</c><00:02:32.370><c> in</c><00:02:32.760><c> the</c>

00:02:32.810 --> 00:02:32.820 align:start position:0%
then we'll start the the thread in the
 

00:02:32.820 --> 00:02:35.450 align:start position:0%
then we'll start the the thread in the
usual<00:02:33.180><c> way</c><00:02:33.440><c> problem</c><00:02:34.440><c> with</c><00:02:34.590><c> this</c><00:02:34.740><c> is</c><00:02:34.950><c> it's</c>

00:02:35.450 --> 00:02:35.460 align:start position:0%
usual way problem with this is it's
 

00:02:35.460 --> 00:02:37.220 align:start position:0%
usual way problem with this is it's
rather<00:02:35.670><c> verbose</c><00:02:36.150><c> because</c><00:02:36.840><c> we</c><00:02:36.990><c> have</c><00:02:37.140><c> to</c>

00:02:37.220 --> 00:02:37.230 align:start position:0%
rather verbose because we have to
 

00:02:37.230 --> 00:02:39.440 align:start position:0%
rather verbose because we have to
express<00:02:37.590><c> it</c><00:02:37.680><c> explicitly</c><00:02:38.520><c> state</c><00:02:38.760><c> that</c><00:02:39.000><c> the</c>

00:02:39.440 --> 00:02:39.450 align:start position:0%
express it explicitly state that the
 

00:02:39.450 --> 00:02:41.000 align:start position:0%
express it explicitly state that the
interface<00:02:39.930><c> we</c><00:02:40.110><c> want</c><00:02:40.320><c> to</c><00:02:40.470><c> implement</c><00:02:40.680><c> is</c>

00:02:41.000 --> 00:02:41.010 align:start position:0%
interface we want to implement is
 

00:02:41.010 --> 00:02:43.490 align:start position:0%
interface we want to implement is
runnable<00:02:41.430><c> we</c><00:02:42.240><c> have</c><00:02:42.510><c> to</c><00:02:42.750><c> have</c><00:02:42.870><c> brackets</c><00:02:43.140><c> in</c>

00:02:43.490 --> 00:02:43.500 align:start position:0%
runnable we have to have brackets in
 

00:02:43.500 --> 00:02:45.410 align:start position:0%
runnable we have to have brackets in
there<00:02:43.740><c> we</c><00:02:43.890><c> have</c><00:02:44.100><c> to</c><00:02:44.220><c> explicitly</c><00:02:44.640><c> put</c><00:02:45.120><c> that</c><00:02:45.330><c> the</c>

00:02:45.410 --> 00:02:45.420 align:start position:0%
there we have to explicitly put that the
 

00:02:45.420 --> 00:02:48.020 align:start position:0%
there we have to explicitly put that the
method<00:02:45.840><c> is</c><00:02:46.050><c> called</c><00:02:46.380><c> run</c><00:02:46.740><c> it's</c><00:02:47.370><c> a</c><00:02:47.520><c> type</c><00:02:47.790><c> void</c>

00:02:48.020 --> 00:02:48.030 align:start position:0%
method is called run it's a type void
 

00:02:48.030 --> 00:02:50.270 align:start position:0%
method is called run it's a type void
return<00:02:48.660><c> and</c><00:02:49.080><c> then</c><00:02:49.560><c> we</c><00:02:49.650><c> have</c><00:02:49.770><c> some</c><00:02:49.920><c> stuff</c><00:02:50.160><c> that</c>

00:02:50.270 --> 00:02:50.280 align:start position:0%
return and then we have some stuff that
 

00:02:50.280 --> 00:02:51.710 align:start position:0%
return and then we have some stuff that
we<00:02:50.370><c> want</c><00:02:50.520><c> to</c><00:02:50.640><c> do</c><00:02:50.760><c> so</c><00:02:50.940><c> it's</c><00:02:51.030><c> a</c><00:02:51.060><c> lot</c><00:02:51.240><c> of</c><00:02:51.270><c> stuff</c><00:02:51.540><c> in</c>

00:02:51.710 --> 00:02:51.720 align:start position:0%
we want to do so it's a lot of stuff in
 

00:02:51.720 --> 00:02:55.250 align:start position:0%
we want to do so it's a lot of stuff in
there<00:02:51.900><c> which</c><00:02:52.860><c> we</c><00:02:53.490><c> don't</c><00:02:53.580><c> really</c><00:02:53.760><c> need</c><00:02:54.260><c> and</c>

00:02:55.250 --> 00:02:55.260 align:start position:0%
there which we don't really need and
 

00:02:55.260 --> 00:02:56.480 align:start position:0%
there which we don't really need and
that's<00:02:55.440><c> what</c><00:02:55.590><c> lambda</c><00:02:55.920><c> expressions</c><00:02:56.340><c> are</c><00:02:56.400><c> all</c>

00:02:56.480 --> 00:02:56.490 align:start position:0%
that's what lambda expressions are all
 

00:02:56.490 --> 00:02:58.070 align:start position:0%
that's what lambda expressions are all
about<00:02:56.640><c> it's</c><00:02:56.850><c> it's</c><00:02:57.090><c> a</c><00:02:57.150><c> new</c><00:02:57.420><c> style</c><00:02:57.720><c> of</c><00:02:57.840><c> doing</c>

00:02:58.070 --> 00:02:58.080 align:start position:0%
about it's it's a new style of doing
 

00:02:58.080 --> 00:03:00.200 align:start position:0%
about it's it's a new style of doing
that<00:02:58.740><c> kind</c><00:02:58.980><c> of</c><00:02:59.070><c> thing</c><00:02:59.250><c> but</c><00:02:59.550><c> in</c><00:02:59.700><c> a</c><00:02:59.760><c> much</c><00:02:59.880><c> simpler</c>

00:03:00.200 --> 00:03:00.210 align:start position:0%
that kind of thing but in a much simpler
 

00:03:00.210 --> 00:03:03.140 align:start position:0%
that kind of thing but in a much simpler
form<00:03:00.420><c> so</c><00:03:01.230><c> now</c><00:03:02.220><c> we</c><00:03:02.280><c> know</c><00:03:02.520><c> that</c><00:03:02.550><c> we</c><00:03:02.850><c> can</c><00:03:03.000><c> use</c><00:03:03.120><c> a</c>

00:03:03.140 --> 00:03:03.150 align:start position:0%
form so now we know that we can use a
 

00:03:03.150 --> 00:03:04.970 align:start position:0%
form so now we know that we can use a
lambda<00:03:03.420><c> expression</c><00:03:03.600><c> to</c><00:03:03.990><c> do</c><00:03:04.110><c> that</c><00:03:04.290><c> so</c><00:03:04.740><c> we</c><00:03:04.860><c> have</c>

00:03:04.970 --> 00:03:04.980 align:start position:0%
lambda expression to do that so we have
 

00:03:04.980 --> 00:03:06.950 align:start position:0%
lambda expression to do that so we have
a<00:03:05.010><c> single</c><00:03:05.340><c> line</c><00:03:05.520><c> now</c><00:03:05.760><c> where</c><00:03:06.390><c> rather</c><00:03:06.840><c> than</c>

00:03:06.950 --> 00:03:06.960 align:start position:0%
a single line now where rather than
 

00:03:06.960 --> 00:03:09.200 align:start position:0%
a single line now where rather than
having<00:03:07.200><c> all</c><00:03:07.380><c> that</c><00:03:07.470><c> extra</c><00:03:07.530><c> stuff</c><00:03:08.040><c> the</c><00:03:08.610><c> compiler</c>

00:03:09.200 --> 00:03:09.210 align:start position:0%
having all that extra stuff the compiler
 

00:03:09.210 --> 00:03:12.590 align:start position:0%
having all that extra stuff the compiler
infers<00:03:10.170><c> from</c><00:03:10.620><c> where</c><00:03:10.980><c> we</c><00:03:11.160><c> use</c><00:03:11.550><c> that</c><00:03:12.420><c> particular</c>

00:03:12.590 --> 00:03:12.600 align:start position:0%
infers from where we use that particular
 

00:03:12.600 --> 00:03:15.860 align:start position:0%
infers from where we use that particular
lambda<00:03:13.110><c> expression</c><00:03:13.620><c> what</c><00:03:14.160><c> the</c><00:03:14.370><c> type</c><00:03:14.640><c> is</c><00:03:15.000><c> so</c>

00:03:15.860 --> 00:03:15.870 align:start position:0%
lambda expression what the type is so
 

00:03:15.870 --> 00:03:17.870 align:start position:0%
lambda expression what the type is so
the<00:03:16.020><c> compiler</c><00:03:16.260><c> knows</c><00:03:16.590><c> that</c><00:03:16.950><c> thread</c><00:03:17.280><c> takes</c><00:03:17.730><c> a</c>

00:03:17.870 --> 00:03:17.880 align:start position:0%
the compiler knows that thread takes a
 

00:03:17.880 --> 00:03:20.630 align:start position:0%
the compiler knows that thread takes a
runnable<00:03:18.330><c> as</c><00:03:18.540><c> a</c><00:03:18.600><c> parameter</c><00:03:18.890><c> so</c><00:03:19.890><c> it</c><00:03:20.190><c> knows</c><00:03:20.400><c> that</c>

00:03:20.630 --> 00:03:20.640 align:start position:0%
runnable as a parameter so it knows that
 

00:03:20.640 --> 00:03:21.920 align:start position:0%
runnable as a parameter so it knows that
the<00:03:20.730><c> type</c><00:03:20.940><c> it's</c><00:03:21.120><c> going</c><00:03:21.180><c> to</c><00:03:21.360><c> have</c><00:03:21.450><c> to</c><00:03:21.540><c> create</c><00:03:21.720><c> is</c>

00:03:21.920 --> 00:03:21.930 align:start position:0%
the type it's going to have to create is
 

00:03:21.930 --> 00:03:24.710 align:start position:0%
the type it's going to have to create is
a<00:03:21.959><c> runnable</c><00:03:22.350><c> and</c><00:03:22.830><c> then</c><00:03:23.490><c> we</c><00:03:23.820><c> tell</c><00:03:24.060><c> it</c><00:03:24.180><c> what</c><00:03:24.450><c> the</c>

00:03:24.710 --> 00:03:24.720 align:start position:0%
a runnable and then we tell it what the
 

00:03:24.720 --> 00:03:26.570 align:start position:0%
a runnable and then we tell it what the
implementation<00:03:24.959><c> of</c><00:03:25.470><c> that</c><00:03:25.500><c> method</c><00:03:25.620><c> is</c><00:03:26.070><c> but</c>

00:03:26.570 --> 00:03:26.580 align:start position:0%
implementation of that method is but
 

00:03:26.580 --> 00:03:29.210 align:start position:0%
implementation of that method is but
without<00:03:26.820><c> explicitly</c><00:03:27.810><c> saying</c><00:03:28.130><c> what</c><00:03:29.130><c> it</c>

00:03:29.210 --> 00:03:29.220 align:start position:0%
without explicitly saying what it
 

00:03:29.220 --> 00:03:31.190 align:start position:0%
without explicitly saying what it
returns<00:03:29.370><c> what</c><00:03:30.150><c> the</c><00:03:30.240><c> parameters</c><00:03:30.690><c> are</c><00:03:30.840><c> and</c><00:03:31.080><c> so</c>

00:03:31.190 --> 00:03:31.200 align:start position:0%
returns what the parameters are and so
 

00:03:31.200 --> 00:03:31.520 align:start position:0%
returns what the parameters are and so
on

00:03:31.520 --> 00:03:31.530 align:start position:0%
on
 

00:03:31.530 --> 00:03:34.070 align:start position:0%
on
so<00:03:31.770><c> much</c><00:03:32.459><c> much</c><00:03:32.670><c> cleaner</c><00:03:32.910><c> much</c><00:03:33.420><c> much</c><00:03:33.600><c> easier</c><00:03:33.780><c> to</c>

00:03:34.070 --> 00:03:34.080 align:start position:0%
so much much cleaner much much easier to
 

00:03:34.080 --> 00:03:38.240 align:start position:0%
so much much cleaner much much easier to
use<00:03:35.480><c> if</c><00:03:36.480><c> we</c><00:03:37.170><c> dig</c><00:03:37.470><c> into</c><00:03:37.590><c> a</c><00:03:37.680><c> bit</c><00:03:37.800><c> more</c><00:03:37.830><c> detail</c>

00:03:38.240 --> 00:03:38.250 align:start position:0%
use if we dig into a bit more detail
 

00:03:38.250 --> 00:03:40.490 align:start position:0%
use if we dig into a bit more detail
about<00:03:38.280><c> what</c><00:03:38.459><c> that</c><00:03:38.700><c> really</c><00:03:38.880><c> means</c><00:03:39.290><c> what</c><00:03:40.290><c> we're</c>

00:03:40.490 --> 00:03:40.500 align:start position:0%
about what that really means what we're
 

00:03:40.500 --> 00:03:43.690 align:start position:0%
about what that really means what we're
doing<00:03:40.830><c> here</c><00:03:41.070><c> is</c><00:03:41.400><c> having</c><00:03:41.730><c> a</c><00:03:41.790><c> simplified</c><00:03:42.570><c> way</c><00:03:43.050><c> of</c>

00:03:43.690 --> 00:03:43.700 align:start position:0%
doing here is having a simplified way of
 

00:03:43.700 --> 00:03:47.630 align:start position:0%
doing here is having a simplified way of
representing<00:03:44.700><c> behavior</c><00:03:45.540><c> in</c><00:03:45.990><c> Java</c><00:03:46.640><c> rather</c>

00:03:47.630 --> 00:03:47.640 align:start position:0%
representing behavior in Java rather
 

00:03:47.640 --> 00:03:50.199 align:start position:0%
representing behavior in Java rather
than<00:03:47.820><c> it</c><00:03:47.880><c> being</c><00:03:48.090><c> state</c><00:03:48.540><c> we</c><00:03:49.290><c> can</c><00:03:49.500><c> assign</c>

00:03:50.199 --> 00:03:50.209 align:start position:0%
than it being state we can assign
 

00:03:50.209 --> 00:03:53.810 align:start position:0%
than it being state we can assign
behavior<00:03:51.209><c> to</c><00:03:51.660><c> a</c><00:03:51.690><c> variable</c><00:03:52.110><c> and</c><00:03:52.320><c> we</c><00:03:53.010><c> can</c><00:03:53.220><c> pass</c>

00:03:53.810 --> 00:03:53.820 align:start position:0%
behavior to a variable and we can pass
 

00:03:53.820 --> 00:03:57.050 align:start position:0%
behavior to a variable and we can pass
behavior<00:03:54.630><c> as</c><00:03:54.840><c> a</c><00:03:55.800><c> parameter</c><00:03:56.550><c> to</c><00:03:56.580><c> another</c>

00:03:57.050 --> 00:03:57.060 align:start position:0%
behavior as a parameter to another
 

00:03:57.060 --> 00:03:59.840 align:start position:0%
behavior as a parameter to another
method<00:03:57.440><c> so</c><00:03:58.440><c> this</c><00:03:58.530><c> has</c><00:03:58.709><c> a</c><00:03:58.740><c> lot</c><00:03:58.950><c> of</c><00:03:59.100><c> benefits</c><00:03:59.670><c> in</c>

00:03:59.840 --> 00:03:59.850 align:start position:0%
method so this has a lot of benefits in
 

00:03:59.850 --> 00:04:03.590 align:start position:0%
method so this has a lot of benefits in
terms<00:04:00.090><c> of</c><00:04:00.180><c> what</c><00:04:00.270><c> we</c><00:04:00.390><c> want</c><00:04:00.480><c> to</c><00:04:00.660><c> do</c><00:04:00.840><c> and</c><00:04:02.270><c> in</c><00:04:03.270><c> terms</c>

00:04:03.590 --> 00:04:03.600 align:start position:0%
terms of what we want to do and in terms
 

00:04:03.600 --> 00:04:05.300 align:start position:0%
terms of what we want to do and in terms
of<00:04:03.720><c> where</c><00:04:03.959><c> we</c><00:04:04.140><c> can</c><00:04:04.260><c> use</c><00:04:04.410><c> a</c><00:04:04.440><c> lambda</c><00:04:04.680><c> expression</c>

00:04:05.300 --> 00:04:05.310 align:start position:0%
of where we can use a lambda expression
 

00:04:05.310 --> 00:04:07.490 align:start position:0%
of where we can use a lambda expression
we<00:04:05.970><c> can</c><00:04:06.000><c> use</c><00:04:06.120><c> a</c><00:04:06.240><c> lambda</c><00:04:06.480><c> expression</c><00:04:06.630><c> anywhere</c>

00:04:07.490 --> 00:04:07.500 align:start position:0%
we can use a lambda expression anywhere
 

00:04:07.500 --> 00:04:09.800 align:start position:0%
we can use a lambda expression anywhere
where<00:04:07.740><c> the</c><00:04:07.860><c> type</c><00:04:08.220><c> that's</c><00:04:09.180><c> it's</c><00:04:09.510><c> going</c><00:04:09.720><c> to</c>

00:04:09.800 --> 00:04:09.810 align:start position:0%
where the type that's it's going to
 

00:04:09.810 --> 00:04:12.340 align:start position:0%
where the type that's it's going to
represent<00:04:09.959><c> is</c><00:04:10.709><c> a</c><00:04:10.830><c> functional</c><00:04:11.520><c> interface</c>

00:04:12.340 --> 00:04:12.350 align:start position:0%
represent is a functional interface
 

00:04:12.350 --> 00:04:15.500 align:start position:0%
represent is a functional interface
functional<00:04:13.350><c> interface</c><00:04:13.680><c> is</c><00:04:14.209><c> one</c><00:04:15.209><c> which</c><00:04:15.480><c> has</c>

00:04:15.500 --> 00:04:15.510 align:start position:0%
functional interface is one which has
 

00:04:15.510 --> 00:04:19.220 align:start position:0%
functional interface is one which has
only<00:04:16.049><c> one</c><00:04:16.340><c> abstract</c><00:04:17.340><c> method</c><00:04:17.760><c> now</c><00:04:18.510><c> prior</c><00:04:19.200><c> to</c>

00:04:19.220 --> 00:04:19.230 align:start position:0%
only one abstract method now prior to
 

00:04:19.230 --> 00:04:21.380 align:start position:0%
only one abstract method now prior to
JDK<00:04:19.770><c> eight</c><00:04:20.010><c> it</c><00:04:20.190><c> was</c><00:04:20.340><c> pretty</c><00:04:20.640><c> easy</c><00:04:20.820><c> to</c><00:04:21.000><c> spot</c><00:04:21.180><c> the</c>

00:04:21.380 --> 00:04:21.390 align:start position:0%
JDK eight it was pretty easy to spot the
 

00:04:21.390 --> 00:04:23.360 align:start position:0%
JDK eight it was pretty easy to spot the
functional<00:04:21.810><c> interface</c><00:04:22.109><c> because</c><00:04:22.650><c> it</c><00:04:22.950><c> only</c><00:04:23.130><c> had</c>

00:04:23.360 --> 00:04:23.370 align:start position:0%
functional interface because it only had
 

00:04:23.370 --> 00:04:27.830 align:start position:0%
functional interface because it only had
one<00:04:23.400><c> method</c><00:04:24.000><c> defined</c><00:04:24.360><c> in</c><00:04:24.510><c> it</c><00:04:24.660><c> in</c><00:04:25.620><c> JDK</c><00:04:26.610><c> eight</c>

00:04:27.830 --> 00:04:27.840 align:start position:0%
one method defined in it in JDK eight
 

00:04:27.840 --> 00:04:29.629 align:start position:0%
one method defined in it in JDK eight
in<00:04:28.560><c> addition</c><00:04:28.919><c> to</c><00:04:29.010><c> introducing</c><00:04:29.400><c> Lander</c>

00:04:29.629 --> 00:04:29.639 align:start position:0%
in addition to introducing Lander
 

00:04:29.639 --> 00:04:31.850 align:start position:0%
in addition to introducing Lander
expressions<00:04:30.180><c> there</c><00:04:30.900><c> is</c><00:04:30.930><c> the</c><00:04:31.139><c> idea</c><00:04:31.380><c> of</c><00:04:31.440><c> static</c>

00:04:31.850 --> 00:04:31.860 align:start position:0%
expressions there is the idea of static
 

00:04:31.860 --> 00:04:34.330 align:start position:0%
expressions there is the idea of static
methods<00:04:32.250><c> and</c><00:04:32.610><c> default</c><00:04:33.090><c> methods</c><00:04:33.510><c> in</c>

00:04:34.330 --> 00:04:34.340 align:start position:0%
methods and default methods in
 

00:04:34.340 --> 00:04:37.460 align:start position:0%
methods and default methods in
interfaces<00:04:35.340><c> what</c><00:04:36.150><c> that</c><00:04:36.300><c> means</c><00:04:36.540><c> is</c><00:04:36.870><c> that</c><00:04:37.260><c> you</c>

00:04:37.460 --> 00:04:37.470 align:start position:0%
interfaces what that means is that you
 

00:04:37.470 --> 00:04:39.590 align:start position:0%
interfaces what that means is that you
now<00:04:37.620><c> have</c><00:04:37.650><c> behavior</c><00:04:38.460><c> included</c><00:04:39.360><c> in</c><00:04:39.480><c> an</c>

00:04:39.590 --> 00:04:39.600 align:start position:0%
now have behavior included in an
 

00:04:39.600 --> 00:04:41.990 align:start position:0%
now have behavior included in an
interface<00:04:39.990><c> and</c><00:04:40.200><c> the</c><00:04:40.889><c> kind</c><00:04:41.280><c> of</c><00:04:41.340><c> net</c><00:04:41.520><c> effect</c><00:04:41.880><c> of</c>

00:04:41.990 --> 00:04:42.000 align:start position:0%
interface and the kind of net effect of
 

00:04:42.000 --> 00:04:44.510 align:start position:0%
interface and the kind of net effect of
that<00:04:42.060><c> is</c><00:04:42.389><c> that</c><00:04:43.139><c> you</c><00:04:43.290><c> have</c><00:04:43.520><c> multiple</c>

00:04:44.510 --> 00:04:44.520 align:start position:0%
that is that you have multiple
 

00:04:44.520 --> 00:04:46.520 align:start position:0%
that is that you have multiple
inheritance<00:04:44.760><c> of</c><00:04:45.150><c> behavior</c><00:04:45.630><c> as</c><00:04:46.169><c> well</c><00:04:46.410><c> as</c>

00:04:46.520 --> 00:04:46.530 align:start position:0%
inheritance of behavior as well as
 

00:04:46.530 --> 00:04:48.770 align:start position:0%
inheritance of behavior as well as
multiple<00:04:46.860><c> inheritance</c><00:04:47.220><c> of</c><00:04:47.790><c> types</c><00:04:48.150><c> because</c>

00:04:48.770 --> 00:04:48.780 align:start position:0%
multiple inheritance of types because
 

00:04:48.780 --> 00:04:50.150 align:start position:0%
multiple inheritance of types because
interfaces<00:04:49.470><c> allow</c><00:04:49.650><c> you</c><00:04:49.710><c> to</c><00:04:49.860><c> have</c><00:04:49.980><c> multiple</c>

00:04:50.150 --> 00:04:50.160 align:start position:0%
interfaces allow you to have multiple
 

00:04:50.160 --> 00:04:53.570 align:start position:0%
interfaces allow you to have multiple
types<00:04:51.120><c> associated</c><00:04:51.480><c> with</c><00:04:51.840><c> a</c><00:04:51.900><c> variable</c><00:04:52.490><c> what</c><00:04:53.490><c> we</c>

00:04:53.570 --> 00:04:53.580 align:start position:0%
types associated with a variable what we
 

00:04:53.580 --> 00:04:55.159 align:start position:0%
types associated with a variable what we
don't<00:04:53.760><c> have</c><00:04:53.970><c> in</c><00:04:54.060><c> Java</c><00:04:54.300><c> is</c><00:04:54.750><c> multiple</c>

00:04:55.159 --> 00:04:55.169 align:start position:0%
don't have in Java is multiple
 

00:04:55.169 --> 00:04:56.510 align:start position:0%
don't have in Java is multiple
inheritance<00:04:55.590><c> of</c><00:04:55.710><c> state</c><00:04:55.950><c> so</c><00:04:56.280><c> that's</c><00:04:56.400><c> the</c>

00:04:56.510 --> 00:04:56.520 align:start position:0%
inheritance of state so that's the
 

00:04:56.520 --> 00:04:58.370 align:start position:0%
inheritance of state so that's the
important<00:04:56.910><c> thing</c><00:04:56.970><c> it's</c><00:04:57.300><c> not</c><00:04:57.419><c> like</c><00:04:57.600><c> C++</c><00:04:58.200><c> where</c>

00:04:58.370 --> 00:04:58.380 align:start position:0%
important thing it's not like C++ where
 

00:04:58.380 --> 00:05:00.560 align:start position:0%
important thing it's not like C++ where
you<00:04:58.470><c> have</c><00:04:58.620><c> true</c><00:04:58.919><c> model</c><00:04:59.130><c> inheritance</c><00:04:59.760><c> Java</c>

00:05:00.560 --> 00:05:00.570 align:start position:0%
you have true model inheritance Java
 

00:05:00.570 --> 00:05:02.180 align:start position:0%
you have true model inheritance Java
you've<00:05:01.020><c> got</c><00:05:01.110><c> multiple</c><00:05:01.260><c> inheritance</c><00:05:01.860><c> of</c><00:05:01.950><c> types</c>

00:05:02.180 --> 00:05:02.190 align:start position:0%
you've got multiple inheritance of types
 

00:05:02.190 --> 00:05:04.580 align:start position:0%
you've got multiple inheritance of types
multiple<00:05:03.000><c> inheritance</c><00:05:03.419><c> of</c><00:05:03.479><c> behavior</c><00:05:03.990><c> but</c><00:05:04.260><c> not</c>

00:05:04.580 --> 00:05:04.590 align:start position:0%
multiple inheritance of behavior but not
 

00:05:04.590 --> 00:05:09.140 align:start position:0%
multiple inheritance of behavior but not
multiple<00:05:05.220><c> inheritance</c><00:05:05.669><c> of</c><00:05:05.820><c> state</c><00:05:06.830><c> so</c><00:05:07.830><c> in</c><00:05:08.460><c> jdk</c>

00:05:09.140 --> 00:05:09.150 align:start position:0%
multiple inheritance of state so in jdk
 

00:05:09.150 --> 00:05:11.810 align:start position:0%
multiple inheritance of state so in jdk
8<00:05:09.360><c> if</c><00:05:09.990><c> you</c><00:05:10.260><c> have</c><00:05:10.440><c> a</c><00:05:10.470><c> single</c><00:05:10.860><c> abstract</c><00:05:11.430><c> method</c>

00:05:11.810 --> 00:05:11.820 align:start position:0%
8 if you have a single abstract method
 

00:05:11.820 --> 00:05:13.940 align:start position:0%
8 if you have a single abstract method
then<00:05:12.330><c> you</c><00:05:12.450><c> can</c><00:05:12.600><c> use</c><00:05:12.810><c> a</c><00:05:12.990><c> lambda</c><00:05:13.229><c> expression</c><00:05:13.440><c> to</c>

00:05:13.940 --> 00:05:13.950 align:start position:0%
then you can use a lambda expression to
 

00:05:13.950 --> 00:05:16.580 align:start position:0%
then you can use a lambda expression to
represent<00:05:14.430><c> that</c><00:05:14.780><c> and</c><00:05:15.780><c> the</c><00:05:15.900><c> key</c><00:05:16.169><c> thing</c><00:05:16.380><c> about</c>

00:05:16.580 --> 00:05:16.590 align:start position:0%
represent that and the key thing about
 

00:05:16.590 --> 00:05:19.760 align:start position:0%
represent that and the key thing about
that<00:05:17.040><c> is</c><00:05:17.250><c> that</c><00:05:17.700><c> the</c><00:05:18.389><c> body</c><00:05:19.290><c> of</c><00:05:19.440><c> the</c><00:05:19.530><c> lambda</c>

00:05:19.760 --> 00:05:19.770 align:start position:0%
that is that the body of the lambda
 

00:05:19.770 --> 00:05:22.159 align:start position:0%
that is that the body of the lambda
expression<00:05:20.250><c> is</c><00:05:20.669><c> the</c><00:05:21.090><c> implementation</c><00:05:21.750><c> of</c><00:05:22.080><c> that</c>

00:05:22.159 --> 00:05:22.169 align:start position:0%
expression is the implementation of that
 

00:05:22.169 --> 00:05:26.120 align:start position:0%
expression is the implementation of that
single<00:05:22.740><c> abstract</c><00:05:23.310><c> method</c><00:05:24.860><c> the</c><00:05:25.860><c> other</c><00:05:25.979><c> thing</c>

00:05:26.120 --> 00:05:26.130 align:start position:0%
single abstract method the other thing
 

00:05:26.130 --> 00:05:27.740 align:start position:0%
single abstract method the other thing
about<00:05:26.190><c> this</c><00:05:26.460><c> was</c><00:05:26.639><c> that</c><00:05:26.669><c> in</c><00:05:27.300><c> terms</c><00:05:27.570><c> of</c><00:05:27.690><c> the</c>

00:05:27.740 --> 00:05:27.750 align:start position:0%
about this was that in terms of the
 

00:05:27.750 --> 00:05:29.780 align:start position:0%
about this was that in terms of the
design<00:05:28.080><c> this</c><00:05:28.740><c> is</c><00:05:28.889><c> actually</c><00:05:29.190><c> a</c><00:05:29.250><c> much</c><00:05:29.370><c> simpler</c>

00:05:29.780 --> 00:05:29.790 align:start position:0%
design this is actually a much simpler
 

00:05:29.790 --> 00:05:32.750 align:start position:0%
design this is actually a much simpler
way<00:05:29.940><c> of</c><00:05:30.260><c> allowing</c><00:05:31.260><c> people</c><00:05:31.500><c> to</c><00:05:31.710><c> have</c><00:05:31.860><c> behavior</c>

00:05:32.750 --> 00:05:32.760 align:start position:0%
way of allowing people to have behavior
 

00:05:32.760 --> 00:05:34.700 align:start position:0%
way of allowing people to have behavior
assigned<00:05:33.510><c> to</c><00:05:33.660><c> variables</c><00:05:34.080><c> and</c><00:05:34.289><c> passed</c><00:05:34.500><c> as</c>

00:05:34.700 --> 00:05:34.710 align:start position:0%
assigned to variables and passed as
 

00:05:34.710 --> 00:05:36.980 align:start position:0%
assigned to variables and passed as
parameter<00:05:34.940><c> rather</c><00:05:35.940><c> than</c><00:05:36.300><c> having</c><00:05:36.750><c> to</c>

00:05:36.980 --> 00:05:36.990 align:start position:0%
parameter rather than having to
 

00:05:36.990 --> 00:05:39.020 align:start position:0%
parameter rather than having to
introduce<00:05:37.350><c> a</c><00:05:37.500><c> new</c><00:05:37.770><c> functional</c><00:05:38.460><c> type</c><00:05:38.760><c> to</c><00:05:39.000><c> the</c>

00:05:39.020 --> 00:05:39.030 align:start position:0%
introduce a new functional type to the
 

00:05:39.030 --> 00:05:40.670 align:start position:0%
introduce a new functional type to the
language<00:05:39.390><c> because</c><00:05:39.720><c> that</c><00:05:39.900><c> that's</c><00:05:40.350><c> another</c>

00:05:40.670 --> 00:05:40.680 align:start position:0%
language because that that's another
 

00:05:40.680 --> 00:05:41.990 align:start position:0%
language because that that's another
alternative<00:05:40.770><c> way</c><00:05:41.400><c> of</c><00:05:41.460><c> doing</c><00:05:41.760><c> it</c><00:05:41.850><c> other</c>

00:05:41.990 --> 00:05:42.000 align:start position:0%
alternative way of doing it other
 

00:05:42.000 --> 00:05:44.210 align:start position:0%
alternative way of doing it other
languages<00:05:42.479><c> do</c><00:05:42.720><c> have</c><00:05:42.990><c> a</c><00:05:43.020><c> true</c><00:05:43.500><c> functional</c><00:05:43.979><c> type</c>

00:05:44.210 --> 00:05:44.220 align:start position:0%
languages do have a true functional type
 

00:05:44.220 --> 00:05:46.940 align:start position:0%
languages do have a true functional type
but<00:05:44.550><c> in</c><00:05:44.669><c> Java</c><00:05:44.940><c> because</c><00:05:45.720><c> it</c><00:05:45.960><c> was</c><00:05:46.080><c> a</c><00:05:46.110><c> existing</c>

00:05:46.940 --> 00:05:46.950 align:start position:0%
but in Java because it was a existing
 

00:05:46.950 --> 00:05:48.320 align:start position:0%
but in Java because it was a existing
language<00:05:47.250><c> they</c><00:05:47.400><c> didn't</c><00:05:47.669><c> want</c><00:05:47.820><c> to</c><00:05:47.970><c> add</c><00:05:48.090><c> a</c><00:05:48.120><c> new</c>

00:05:48.320 --> 00:05:48.330 align:start position:0%
language they didn't want to add a new
 

00:05:48.330 --> 00:05:50.330 align:start position:0%
language they didn't want to add a new
functional<00:05:48.750><c> type</c><00:05:48.990><c> so</c><00:05:49.710><c> they've</c><00:05:50.070><c> done</c><00:05:50.220><c> it</c>

00:05:50.330 --> 00:05:50.340 align:start position:0%
functional type so they've done it
 

00:05:50.340 --> 00:05:55.070 align:start position:0%
functional type so they've done it
through<00:05:50.600><c> the</c><00:05:51.600><c> idea</c><00:05:51.810><c> of</c><00:05:51.900><c> lambdas</c><00:05:53.840><c> so</c><00:05:54.840><c> in</c><00:05:54.930><c> terms</c>

00:05:55.070 --> 00:05:55.080 align:start position:0%
through the idea of lambdas so in terms
 

00:05:55.080 --> 00:05:58.460 align:start position:0%
through the idea of lambdas so in terms
of<00:05:55.169><c> the</c><00:05:55.260><c> syntax</c><00:05:55.530><c> of</c><00:05:55.979><c> a</c><00:05:56.970><c> lambda</c><00:05:57.389><c> expression</c><00:05:57.570><c> it</c>

00:05:58.460 --> 00:05:58.470 align:start position:0%
of the syntax of a lambda expression it
 

00:05:58.470 --> 00:06:01.520 align:start position:0%
of the syntax of a lambda expression it
is<00:05:58.530><c> like</c><00:05:59.070><c> a</c><00:05:59.100><c> method</c><00:05:59.610><c> but</c><00:06:00.180><c> very</c><00:06:00.419><c> importantly</c><00:06:00.960><c> it</c>

00:06:01.520 --> 00:06:01.530 align:start position:0%
is like a method but very importantly it
 

00:06:01.530 --> 00:06:04.190 align:start position:0%
is like a method but very importantly it
is<00:06:01.680><c> not</c><00:06:02.010><c> a</c><00:06:02.310><c> method</c><00:06:02.910><c> so</c><00:06:03.240><c> it's</c><00:06:03.389><c> not</c><00:06:03.660><c> associated</c>

00:06:04.190 --> 00:06:04.200 align:start position:0%
is not a method so it's not associated
 

00:06:04.200 --> 00:06:06.980 align:start position:0%
is not a method so it's not associated
with<00:06:04.830><c> a</c><00:06:04.860><c> class</c><00:06:05.100><c> that</c><00:06:05.610><c> is</c><00:06:06.120><c> a</c><00:06:06.150><c> very</c><00:06:06.330><c> significant</c>

00:06:06.980 --> 00:06:06.990 align:start position:0%
with a class that is a very significant
 

00:06:06.990 --> 00:06:09.140 align:start position:0%
with a class that is a very significant
point<00:06:07.289><c> and</c><00:06:07.650><c> we'll</c><00:06:08.460><c> kind</c><00:06:08.669><c> of</c><00:06:08.700><c> come</c><00:06:08.880><c> back</c><00:06:09.030><c> to</c>

00:06:09.140 --> 00:06:09.150 align:start position:0%
point and we'll kind of come back to
 

00:06:09.150 --> 00:06:10.790 align:start position:0%
point and we'll kind of come back to
that<00:06:09.270><c> in</c><00:06:09.360><c> a</c><00:06:09.419><c> moment</c><00:06:09.539><c> but</c><00:06:09.900><c> a</c><00:06:10.139><c> lambda</c><00:06:10.650><c> expression</c>

00:06:10.790 --> 00:06:10.800 align:start position:0%
that in a moment but a lambda expression
 

00:06:10.800 --> 00:06:14.450 align:start position:0%
that in a moment but a lambda expression
is<00:06:11.400><c> a</c><00:06:12.000><c> functional</c><00:06:12.780><c> interface</c><00:06:13.289><c> type</c><00:06:13.620><c> it</c><00:06:13.950><c> is</c><00:06:14.100><c> not</c>

00:06:14.450 --> 00:06:14.460 align:start position:0%
is a functional interface type it is not
 

00:06:14.460 --> 00:06:18.969 align:start position:0%
is a functional interface type it is not
associated<00:06:15.090><c> with</c><00:06:15.330><c> a</c><00:06:15.720><c> class</c><00:06:17.240><c> in</c><00:06:18.240><c> terms</c><00:06:18.510><c> of</c><00:06:18.630><c> the</c>

00:06:18.969 --> 00:06:18.979 align:start position:0%
associated with a class in terms of the
 

00:06:18.979 --> 00:06:21.770 align:start position:0%
associated with a class in terms of the
the<00:06:19.979><c> syntax</c><00:06:20.400><c> what</c><00:06:20.910><c> we</c><00:06:21.000><c> have</c><00:06:21.150><c> is</c><00:06:21.240><c> the</c><00:06:21.389><c> left-hand</c>

00:06:21.770 --> 00:06:21.780 align:start position:0%
the syntax what we have is the left-hand
 

00:06:21.780 --> 00:06:23.750 align:start position:0%
the syntax what we have is the left-hand
side<00:06:21.990><c> of</c><00:06:22.169><c> the</c><00:06:22.380><c> lambda</c><00:06:22.919><c> operator</c><00:06:23.280><c> are</c><00:06:23.580><c> the</c>

00:06:23.750 --> 00:06:23.760 align:start position:0%
side of the lambda operator are the
 

00:06:23.760 --> 00:06:26.270 align:start position:0%
side of the lambda operator are the
parameters<00:06:24.360><c> that</c><00:06:24.840><c> we're</c><00:06:24.990><c> passing</c><00:06:25.440><c> to</c><00:06:25.740><c> our</c>

00:06:26.270 --> 00:06:26.280 align:start position:0%
parameters that we're passing to our
 

00:06:26.280 --> 00:06:28.820 align:start position:0%
parameters that we're passing to our
method<00:06:26.669><c> like</c><00:06:26.850><c> object</c><00:06:27.300><c> and</c><00:06:27.510><c> the</c><00:06:28.410><c> right</c><00:06:28.620><c> hand</c>

00:06:28.820 --> 00:06:28.830 align:start position:0%
method like object and the right hand
 

00:06:28.830 --> 00:06:30.920 align:start position:0%
method like object and the right hand
side<00:06:28.919><c> is</c><00:06:29.340><c> the</c><00:06:29.580><c> body</c><00:06:29.789><c> of</c><00:06:30.060><c> our</c><00:06:30.450><c> method</c><00:06:30.750><c> like</c>

00:06:30.920 --> 00:06:30.930 align:start position:0%
side is the body of our method like
 

00:06:30.930 --> 00:06:32.659 align:start position:0%
side is the body of our method like
object<00:06:31.350><c> but</c><00:06:31.650><c> not</c><00:06:31.830><c> associated</c><00:06:32.190><c> with</c><00:06:32.430><c> the</c><00:06:32.490><c> class</c>

00:06:32.659 --> 00:06:32.669 align:start position:0%
object but not associated with the class
 

00:06:32.669 --> 00:06:35.899 align:start position:0%
object but not associated with the class
so<00:06:33.590><c> in</c><00:06:34.590><c> terms</c><00:06:34.889><c> of</c><00:06:34.950><c> its</c><00:06:35.100><c> structure</c><00:06:35.340><c> it</c><00:06:35.610><c> is</c><00:06:35.700><c> very</c>

00:06:35.899 --> 00:06:35.909 align:start position:0%
so in terms of its structure it is very
 

00:06:35.909 --> 00:06:38.149 align:start position:0%
so in terms of its structure it is very
similar<00:06:36.510><c> to</c><00:06:36.630><c> a</c><00:06:36.750><c> method</c><00:06:37.110><c> so</c><00:06:37.409><c> it</c><00:06:37.530><c> has</c><00:06:37.710><c> a</c><00:06:37.950><c> set</c><00:06:38.130><c> of</c>

00:06:38.149 --> 00:06:38.159 align:start position:0%
similar to a method so it has a set of
 

00:06:38.159 --> 00:06:40.600 align:start position:0%
similar to a method so it has a set of
typed<00:06:38.460><c> parameters</c><00:06:38.970><c> it</c><00:06:39.240><c> has</c><00:06:39.419><c> body</c>

00:06:40.600 --> 00:06:40.610 align:start position:0%
typed parameters it has body
 

00:06:40.610 --> 00:06:42.309 align:start position:0%
typed parameters it has body
return<00:06:40.879><c> type</c><00:06:41.180><c> and</c><00:06:41.509><c> it</c><00:06:41.870><c> can</c><00:06:41.990><c> throw</c><00:06:42.139><c> exceptions</c>

00:06:42.309 --> 00:06:42.319 align:start position:0%
return type and it can throw exceptions
 

00:06:42.319 --> 00:06:43.990 align:start position:0%
return type and it can throw exceptions
so<00:06:42.919><c> all</c><00:06:43.039><c> of</c><00:06:43.129><c> those</c><00:06:43.219><c> things</c><00:06:43.280><c> are</c><00:06:43.580><c> exactly</c><00:06:43.639><c> the</c>

00:06:43.990 --> 00:06:44.000 align:start position:0%
so all of those things are exactly the
 

00:06:44.000 --> 00:06:45.999 align:start position:0%
so all of those things are exactly the
same<00:06:44.150><c> as</c><00:06:44.270><c> method</c><00:06:44.629><c> but</c><00:06:45.259><c> because</c><00:06:45.740><c> it's</c><00:06:45.860><c> not</c>

00:06:45.999 --> 00:06:46.009 align:start position:0%
same as method but because it's not
 

00:06:46.009 --> 00:06:47.740 align:start position:0%
same as method but because it's not
associated<00:06:46.219><c> with</c><00:06:46.520><c> class</c><00:06:46.759><c> we</c><00:06:47.120><c> don't</c><00:06:47.360><c> call</c><00:06:47.569><c> it</c><00:06:47.599><c> a</c>

00:06:47.740 --> 00:06:47.750 align:start position:0%
associated with class we don't call it a
 

00:06:47.750 --> 00:06:51.309 align:start position:0%
associated with class we don't call it a
method<00:06:48.819><c> the</c><00:06:49.819><c> other</c><00:06:50.120><c> thing</c><00:06:50.389><c> about</c><00:06:50.719><c> this</c><00:06:50.960><c> is</c>

00:06:51.309 --> 00:06:51.319 align:start position:0%
method the other thing about this is
 

00:06:51.319 --> 00:06:55.330 align:start position:0%
method the other thing about this is
that<00:06:51.590><c> it</c><00:06:51.979><c> is</c><00:06:52.009><c> closure</c><00:06:52.909><c> over</c><00:06:53.810><c> values</c><00:06:54.770><c> not</c>

00:06:55.330 --> 00:06:55.340 align:start position:0%
that it is closure over values not
 

00:06:55.340 --> 00:06:58.540 align:start position:0%
that it is closure over values not
closure<00:06:55.819><c> over</c><00:06:56.090><c> types</c><00:06:56.830><c> what</c><00:06:57.830><c> that</c><00:06:57.979><c> means</c><00:06:58.250><c> is</c>

00:06:58.540 --> 00:06:58.550 align:start position:0%
closure over types what that means is
 

00:06:58.550 --> 00:07:00.640 align:start position:0%
closure over types what that means is
that<00:06:58.610><c> if</c><00:06:59.030><c> you</c><00:06:59.180><c> look</c><00:06:59.479><c> at</c><00:06:59.719><c> how</c><00:07:00.169><c> you</c><00:07:00.199><c> can</c><00:07:00.379><c> use</c><00:07:00.500><c> a</c>

00:07:00.640 --> 00:07:00.650 align:start position:0%
that if you look at how you can use a
 

00:07:00.650 --> 00:07:02.679 align:start position:0%
that if you look at how you can use a
lambda<00:07:00.860><c> expression</c><00:07:01.009><c> you</c><00:07:01.699><c> can</c><00:07:02.030><c> reference</c>

00:07:02.679 --> 00:07:02.689 align:start position:0%
lambda expression you can reference
 

00:07:02.689 --> 00:07:05.860 align:start position:0%
lambda expression you can reference
variables<00:07:03.469><c> from</c><00:07:04.189><c> the</c><00:07:04.310><c> surrounding</c><00:07:05.180><c> scope</c><00:07:05.419><c> so</c>

00:07:05.860 --> 00:07:05.870 align:start position:0%
variables from the surrounding scope so
 

00:07:05.870 --> 00:07:07.480 align:start position:0%
variables from the surrounding scope so
you<00:07:05.990><c> can</c><00:07:06.110><c> reference</c><00:07:06.259><c> variables</c><00:07:06.979><c> from</c><00:07:07.039><c> outside</c>

00:07:07.480 --> 00:07:07.490 align:start position:0%
you can reference variables from outside
 

00:07:07.490 --> 00:07:09.249 align:start position:0%
you can reference variables from outside
of<00:07:07.580><c> the</c><00:07:07.639><c> lambda</c><00:07:07.879><c> expression</c><00:07:08.300><c> and</c><00:07:08.449><c> use</c><00:07:09.050><c> those</c>

00:07:09.249 --> 00:07:09.259 align:start position:0%
of the lambda expression and use those
 

00:07:09.259 --> 00:07:11.920 align:start position:0%
of the lambda expression and use those
in<00:07:09.500><c> your</c><00:07:09.590><c> lambda</c><00:07:09.889><c> expression</c><00:07:10.460><c> but</c><00:07:11.300><c> there</c><00:07:11.810><c> is</c><00:07:11.900><c> a</c>

00:07:11.920 --> 00:07:11.930 align:start position:0%
in your lambda expression but there is a
 

00:07:11.930 --> 00:07:14.379 align:start position:0%
in your lambda expression but there is a
restriction<00:07:12.319><c> on</c><00:07:12.439><c> that</c><00:07:12.699><c> if</c><00:07:13.699><c> you</c><00:07:13.909><c> go</c><00:07:14.060><c> back</c><00:07:14.240><c> to</c>

00:07:14.379 --> 00:07:14.389 align:start position:0%
restriction on that if you go back to
 

00:07:14.389 --> 00:07:16.390 align:start position:0%
restriction on that if you go back to
anonymous<00:07:14.719><c> inner</c><00:07:14.870><c> classes</c><00:07:15.110><c> the</c><00:07:15.919><c> way</c><00:07:16.099><c> that</c><00:07:16.279><c> you</c>

00:07:16.390 --> 00:07:16.400 align:start position:0%
anonymous inner classes the way that you
 

00:07:16.400 --> 00:07:17.920 align:start position:0%
anonymous inner classes the way that you
could<00:07:16.580><c> access</c><00:07:17.210><c> variables</c><00:07:17.599><c> in</c><00:07:17.870><c> the</c>

00:07:17.920 --> 00:07:17.930 align:start position:0%
could access variables in the
 

00:07:17.930 --> 00:07:19.899 align:start position:0%
could access variables in the
surrounding<00:07:18.319><c> scope</c><00:07:18.560><c> was</c><00:07:18.800><c> only</c><00:07:19.370><c> if</c><00:07:19.550><c> they</c><00:07:19.849><c> were</c>

00:07:19.899 --> 00:07:19.909 align:start position:0%
surrounding scope was only if they were
 

00:07:19.909 --> 00:07:22.089 align:start position:0%
surrounding scope was only if they were
marked<00:07:20.419><c> explicitly</c><00:07:21.169><c> as</c><00:07:21.259><c> final</c><00:07:21.680><c> so</c><00:07:21.979><c> their</c>

00:07:22.089 --> 00:07:22.099 align:start position:0%
marked explicitly as final so their
 

00:07:22.099 --> 00:07:23.499 align:start position:0%
marked explicitly as final so their
value<00:07:22.340><c> could</c><00:07:22.430><c> be</c><00:07:22.490><c> set</c><00:07:22.699><c> once</c><00:07:22.909><c> and</c><00:07:23.210><c> you</c><00:07:23.270><c> couldn't</c>

00:07:23.499 --> 00:07:23.509 align:start position:0%
value could be set once and you couldn't
 

00:07:23.509 --> 00:07:25.179 align:start position:0%
value could be set once and you couldn't
change<00:07:23.539><c> it</c><00:07:23.960><c> that</c><00:07:24.590><c> way</c><00:07:24.710><c> you</c><00:07:24.770><c> couldn't</c><00:07:25.129><c> change</c>

00:07:25.179 --> 00:07:25.189 align:start position:0%
change it that way you couldn't change
 

00:07:25.189 --> 00:07:27.189 align:start position:0%
change it that way you couldn't change
the<00:07:25.639><c> the</c><00:07:25.849><c> value</c><00:07:26.090><c> inside</c><00:07:26.539><c> the</c><00:07:26.569><c> anonymous</c><00:07:27.050><c> in</c><00:07:27.139><c> a</c>

00:07:27.189 --> 00:07:27.199 align:start position:0%
the the value inside the anonymous in a
 

00:07:27.199 --> 00:07:30.640 align:start position:0%
the the value inside the anonymous in a
class<00:07:27.939><c> with</c><00:07:28.939><c> lambda</c><00:07:29.479><c> expressions</c><00:07:30.110><c> the</c><00:07:30.349><c> same</c>

00:07:30.640 --> 00:07:30.650 align:start position:0%
class with lambda expressions the same
 

00:07:30.650 --> 00:07:32.559 align:start position:0%
class with lambda expressions the same
thing<00:07:30.979><c> applies</c><00:07:31.310><c> but</c><00:07:31.969><c> the</c><00:07:32.060><c> rules</c><00:07:32.270><c> have</c><00:07:32.389><c> been</c>

00:07:32.559 --> 00:07:32.569 align:start position:0%
thing applies but the rules have been
 

00:07:32.569 --> 00:07:35.679 align:start position:0%
thing applies but the rules have been
relaxed<00:07:33.500><c> a</c><00:07:33.590><c> little</c><00:07:33.650><c> bit</c><00:07:33.919><c> so</c><00:07:34.400><c> now</c><00:07:34.430><c> the</c><00:07:35.240><c> variable</c>

00:07:35.679 --> 00:07:35.689 align:start position:0%
relaxed a little bit so now the variable
 

00:07:35.689 --> 00:07:38.110 align:start position:0%
relaxed a little bit so now the variable
has<00:07:35.900><c> to</c><00:07:36.050><c> be</c><00:07:36.169><c> effectively</c><00:07:36.889><c> final</c><00:07:37.370><c> which</c><00:07:37.819><c> means</c>

00:07:38.110 --> 00:07:38.120 align:start position:0%
has to be effectively final which means
 

00:07:38.120 --> 00:07:40.809 align:start position:0%
has to be effectively final which means
that<00:07:38.599><c> it</c><00:07:39.080><c> can</c><00:07:39.289><c> be</c><00:07:39.409><c> marked</c><00:07:39.650><c> final</c><00:07:40.039><c> or</c><00:07:40.370><c> if</c><00:07:40.699><c> it's</c>

00:07:40.809 --> 00:07:40.819 align:start position:0%
that it can be marked final or if it's
 

00:07:40.819 --> 00:07:42.820 align:start position:0%
that it can be marked final or if it's
not<00:07:40.969><c> marked</c><00:07:41.180><c> final</c><00:07:41.539><c> it</c><00:07:41.659><c> must</c><00:07:41.900><c> behave</c><00:07:42.199><c> as</c><00:07:42.469><c> if</c><00:07:42.680><c> it</c>

00:07:42.820 --> 00:07:42.830 align:start position:0%
not marked final it must behave as if it
 

00:07:42.830 --> 00:07:45.550 align:start position:0%
not marked final it must behave as if it
was<00:07:43.039><c> so</c><00:07:44.029><c> its</c><00:07:44.569><c> value</c><00:07:44.839><c> can</c><00:07:44.960><c> only</c><00:07:45.050><c> be</c><00:07:45.169><c> set</c><00:07:45.409><c> once</c>

00:07:45.550 --> 00:07:45.560 align:start position:0%
was so its value can only be set once
 

00:07:45.560 --> 00:07:50.079 align:start position:0%
was so its value can only be set once
and<00:07:45.860><c> it</c><00:07:45.919><c> cannot</c><00:07:46.099><c> be</c><00:07:46.250><c> changed</c><00:07:48.520><c> right</c><00:07:49.520><c> so</c><00:07:49.879><c> let's</c>

00:07:50.079 --> 00:07:50.089 align:start position:0%
and it cannot be changed right so let's
 

00:07:50.089 --> 00:07:51.430 align:start position:0%
and it cannot be changed right so let's
talk<00:07:50.240><c> a</c><00:07:50.300><c> little</c><00:07:50.330><c> bit</c><00:07:50.479><c> about</c><00:07:50.569><c> capturing</c>

00:07:51.430 --> 00:07:51.440 align:start position:0%
talk a little bit about capturing
 

00:07:51.440 --> 00:07:54.129 align:start position:0%
talk a little bit about capturing
lambdas<00:07:51.860><c> so</c><00:07:52.759><c> a</c><00:07:52.789><c> capturing</c><00:07:53.300><c> lambda</c><00:07:53.659><c> is</c><00:07:53.839><c> one</c>

00:07:54.129 --> 00:07:54.139 align:start position:0%
lambdas so a capturing lambda is one
 

00:07:54.139 --> 00:07:57.159 align:start position:0%
lambdas so a capturing lambda is one
which<00:07:54.800><c> uses</c><00:07:55.699><c> a</c><00:07:56.150><c> variable</c><00:07:56.779><c> from</c><00:07:57.050><c> the</c>

00:07:57.159 --> 00:07:57.169 align:start position:0%
which uses a variable from the
 

00:07:57.169 --> 00:07:59.170 align:start position:0%
which uses a variable from the
surrounding<00:07:57.529><c> scope</c><00:07:57.740><c> and</c><00:07:58.099><c> when</c><00:07:58.759><c> I</c><00:07:58.789><c> started</c>

00:07:59.170 --> 00:07:59.180 align:start position:0%
surrounding scope and when I started
 

00:07:59.180 --> 00:08:01.480 align:start position:0%
surrounding scope and when I started
using<00:07:59.330><c> lambdas</c><00:07:59.870><c> I</c><00:08:00.110><c> wrote</c><00:08:00.889><c> a</c><00:08:00.919><c> piece</c><00:08:01.190><c> of</c><00:08:01.339><c> code</c>

00:08:01.480 --> 00:08:01.490 align:start position:0%
using lambdas I wrote a piece of code
 

00:08:01.490 --> 00:08:04.119 align:start position:0%
using lambdas I wrote a piece of code
which<00:08:01.669><c> is</c><00:08:01.789><c> very</c><00:08:02.060><c> similar</c><00:08:02.360><c> to</c><00:08:02.479><c> this</c><00:08:02.860><c> so</c><00:08:03.860><c> I</c><00:08:03.889><c> had</c><00:08:04.099><c> a</c>

00:08:04.119 --> 00:08:04.129 align:start position:0%
which is very similar to this so I had a
 

00:08:04.129 --> 00:08:06.249 align:start position:0%
which is very similar to this so I had a
class<00:08:04.879><c> which</c><00:08:05.089><c> I</c><00:08:05.180><c> called</c><00:08:05.360><c> data</c><00:08:05.539><c> processor</c><00:08:06.139><c> it</c>

00:08:06.249 --> 00:08:06.259 align:start position:0%
class which I called data processor it
 

00:08:06.259 --> 00:08:09.579 align:start position:0%
class which I called data processor it
had<00:08:06.409><c> a</c><00:08:06.440><c> current</c><00:08:06.979><c> value</c><00:08:07.279><c> int</c><00:08:08.240><c> and</c><00:08:08.539><c> then</c><00:08:09.289><c> I</c>

00:08:09.579 --> 00:08:09.589 align:start position:0%
had a current value int and then I
 

00:08:09.589 --> 00:08:11.679 align:start position:0%
had a current value int and then I
wanted<00:08:09.800><c> to</c><00:08:09.889><c> process</c><00:08:10.250><c> something</c><00:08:10.460><c> so</c><00:08:11.029><c> I</c><00:08:11.089><c> used</c><00:08:11.419><c> a</c>

00:08:11.679 --> 00:08:11.689 align:start position:0%
wanted to process something so I used a
 

00:08:11.689 --> 00:08:13.600 align:start position:0%
wanted to process something so I used a
lambda<00:08:11.870><c> expression</c><00:08:12.020><c> and</c><00:08:12.650><c> I</c><00:08:13.189><c> did</c><00:08:13.339><c> current</c>

00:08:13.600 --> 00:08:13.610 align:start position:0%
lambda expression and I did current
 

00:08:13.610 --> 00:08:16.149 align:start position:0%
lambda expression and I did current
value<00:08:13.849><c> plus</c><00:08:14.060><c> plus</c><00:08:14.270><c> I</c><00:08:14.689><c> compiled</c><00:08:15.469><c> it</c><00:08:15.650><c> I</c><00:08:15.740><c> ran</c><00:08:16.009><c> it</c>

00:08:16.149 --> 00:08:16.159 align:start position:0%
value plus plus I compiled it I ran it
 

00:08:16.159 --> 00:08:17.649 align:start position:0%
value plus plus I compiled it I ran it
it<00:08:16.310><c> did</c><00:08:16.430><c> exactly</c><00:08:16.759><c> what</c><00:08:16.819><c> I</c><00:08:16.939><c> wanted</c><00:08:17.120><c> it</c><00:08:17.419><c> to</c><00:08:17.449><c> do</c><00:08:17.629><c> I</c>

00:08:17.649 --> 00:08:17.659 align:start position:0%
it did exactly what I wanted it to do I
 

00:08:17.659 --> 00:08:20.829 align:start position:0%
it did exactly what I wanted it to do I
thought<00:08:17.930><c> yes</c><00:08:18.199><c> great</c><00:08:18.500><c> my</c><00:08:18.800><c> code</c><00:08:19.009><c> is</c><00:08:19.129><c> good</c><00:08:19.810><c> then</c><00:08:20.810><c> I</c>

00:08:20.829 --> 00:08:20.839 align:start position:0%
thought yes great my code is good then I
 

00:08:20.839 --> 00:08:22.059 align:start position:0%
thought yes great my code is good then I
thought<00:08:21.110><c> about</c><00:08:21.289><c> it</c><00:08:21.409><c> a</c><00:08:21.439><c> little</c><00:08:21.500><c> bit</c><00:08:21.650><c> more</c><00:08:21.830><c> I</c>

00:08:22.059 --> 00:08:22.069 align:start position:0%
thought about it a little bit more I
 

00:08:22.069 --> 00:08:25.029 align:start position:0%
thought about it a little bit more I
thought<00:08:22.339><c> to</c><00:08:22.430><c> myself</c><00:08:22.550><c> hang</c><00:08:23.180><c> on</c><00:08:23.389><c> that</c><00:08:24.259><c> shouldn't</c>

00:08:25.029 --> 00:08:25.039 align:start position:0%
thought to myself hang on that shouldn't
 

00:08:25.039 --> 00:08:29.379 align:start position:0%
thought to myself hang on that shouldn't
work<00:08:25.719><c> because</c><00:08:26.719><c> current</c><00:08:27.439><c> value</c><00:08:27.830><c> is</c><00:08:28.389><c> not</c>

00:08:29.379 --> 00:08:29.389 align:start position:0%
work because current value is not
 

00:08:29.389 --> 00:08:31.689 align:start position:0%
work because current value is not
effectively<00:08:30.199><c> final</c><00:08:30.620><c> now</c><00:08:31.039><c> I've</c><00:08:31.129><c> just</c><00:08:31.310><c> told</c><00:08:31.490><c> you</c>

00:08:31.689 --> 00:08:31.699 align:start position:0%
effectively final now I've just told you
 

00:08:31.699 --> 00:08:33.850 align:start position:0%
effectively final now I've just told you
that<00:08:31.729><c> we</c><00:08:32.089><c> have</c><00:08:32.479><c> closures</c><00:08:32.930><c> over</c><00:08:32.959><c> values</c><00:08:33.740><c> not</c>

00:08:33.850 --> 00:08:33.860 align:start position:0%
that we have closures over values not
 

00:08:33.860 --> 00:08:36.100 align:start position:0%
that we have closures over values not
closures<00:08:34.099><c> over</c><00:08:34.339><c> types</c><00:08:34.669><c> so</c><00:08:35.449><c> how</c><00:08:35.690><c> can</c><00:08:35.750><c> that</c><00:08:35.959><c> work</c>

00:08:36.100 --> 00:08:36.110 align:start position:0%
closures over types so how can that work
 

00:08:36.110 --> 00:08:38.259 align:start position:0%
closures over types so how can that work
how<00:08:36.829><c> can</c><00:08:36.860><c> the</c><00:08:37.130><c> compiler</c><00:08:37.490><c> do</c><00:08:37.969><c> what</c><00:08:38.120><c> I</c><00:08:38.149><c> don't</c>

00:08:38.259 --> 00:08:38.269 align:start position:0%
how can the compiler do what I don't
 

00:08:38.269 --> 00:08:41.319 align:start position:0%
how can the compiler do what I don't
expect<00:08:38.690><c> it</c><00:08:38.870><c> to</c><00:08:38.899><c> do</c><00:08:39.050><c> and</c><00:08:39.890><c> it</c><00:08:40.010><c> turns</c><00:08:40.279><c> out</c><00:08:40.579><c> I</c><00:08:40.940><c> did</c><00:08:41.269><c> a</c>

00:08:41.319 --> 00:08:41.329 align:start position:0%
expect it to do and it turns out I did a
 

00:08:41.329 --> 00:08:42.519 align:start position:0%
expect it to do and it turns out I did a
bit<00:08:41.449><c> of</c><00:08:41.479><c> digging</c><00:08:41.539><c> on</c><00:08:41.959><c> this</c><00:08:42.110><c> it</c><00:08:42.320><c> took</c><00:08:42.409><c> me</c><00:08:42.500><c> a</c>

00:08:42.519 --> 00:08:42.529 align:start position:0%
bit of digging on this it took me a
 

00:08:42.529 --> 00:08:43.959 align:start position:0%
bit of digging on this it took me a
while<00:08:42.649><c> to</c><00:08:42.709><c> find</c><00:08:42.949><c> out</c><00:08:43.099><c> what</c><00:08:43.279><c> was</c><00:08:43.519><c> happening</c>

00:08:43.959 --> 00:08:43.969 align:start position:0%
while to find out what was happening
 

00:08:43.969 --> 00:08:46.030 align:start position:0%
while to find out what was happening
turns<00:08:44.570><c> out</c><00:08:44.690><c> that</c><00:08:44.810><c> the</c><00:08:44.899><c> compiler</c><00:08:45.350><c> does</c>

00:08:46.030 --> 00:08:46.040 align:start position:0%
turns out that the compiler does
 

00:08:46.040 --> 00:08:48.130 align:start position:0%
turns out that the compiler does
something<00:08:46.399><c> on</c><00:08:46.519><c> your</c><00:08:46.670><c> behalf</c><00:08:47.029><c> I'm</c><00:08:47.930><c> not</c>

00:08:48.130 --> 00:08:48.140 align:start position:0%
something on your behalf I'm not
 

00:08:48.140 --> 00:08:49.510 align:start position:0%
something on your behalf I'm not
actually<00:08:48.440><c> convinced</c><00:08:48.949><c> that</c><00:08:49.010><c> this</c><00:08:49.160><c> is</c><00:08:49.279><c> a</c><00:08:49.310><c> good</c>

00:08:49.510 --> 00:08:49.520 align:start position:0%
actually convinced that this is a good
 

00:08:49.520 --> 00:08:52.090 align:start position:0%
actually convinced that this is a good
idea<00:08:49.930><c> because</c><00:08:50.930><c> what</c><00:08:51.290><c> happens</c><00:08:51.709><c> is</c><00:08:51.920><c> it</c><00:08:52.069><c> actually</c>

00:08:52.090 --> 00:08:52.100 align:start position:0%
idea because what happens is it actually
 

00:08:52.100 --> 00:08:53.460 align:start position:0%
idea because what happens is it actually
inserts

00:08:53.460 --> 00:08:53.470 align:start position:0%
inserts
 

00:08:53.470 --> 00:08:56.340 align:start position:0%
inserts
reference<00:08:53.950><c> to</c><00:08:54.190><c> this</c><00:08:54.580><c> in</c><00:08:55.110><c> front</c><00:08:56.110><c> of</c><00:08:56.200><c> your</c>

00:08:56.340 --> 00:08:56.350 align:start position:0%
reference to this in front of your
 

00:08:56.350 --> 00:08:59.670 align:start position:0%
reference to this in front of your
variable<00:08:56.940><c> now</c><00:08:57.940><c> remember</c><00:08:58.720><c> that</c><00:08:58.750><c> a</c><00:08:58.900><c> Lander</c>

00:08:59.670 --> 00:08:59.680 align:start position:0%
variable now remember that a Lander
 

00:08:59.680 --> 00:09:00.960 align:start position:0%
variable now remember that a Lander
expression<00:09:00.010><c> is</c><00:09:00.100><c> not</c><00:09:00.280><c> associated</c><00:09:00.700><c> with</c><00:09:00.880><c> the</c>

00:09:00.960 --> 00:09:00.970 align:start position:0%
expression is not associated with the
 

00:09:00.970 --> 00:09:02.520 align:start position:0%
expression is not associated with the
class<00:09:01.180><c> that's</c><00:09:01.480><c> not</c><00:09:01.630><c> like</c><00:09:01.780><c> an</c><00:09:01.900><c> anonymous</c><00:09:02.350><c> in</c><00:09:02.440><c> a</c>

00:09:02.520 --> 00:09:02.530 align:start position:0%
class that's not like an anonymous in a
 

00:09:02.530 --> 00:09:04.740 align:start position:0%
class that's not like an anonymous in a
class<00:09:02.770><c> where</c><00:09:03.430><c> there</c><00:09:03.700><c> is</c><00:09:03.820><c> an</c><00:09:03.970><c> instance</c><00:09:04.510><c> of</c><00:09:04.720><c> that</c>

00:09:04.740 --> 00:09:04.750 align:start position:0%
class where there is an instance of that
 

00:09:04.750 --> 00:09:07.080 align:start position:0%
class where there is an instance of that
anonymous<00:09:05.440><c> in</c><00:09:05.530><c> a</c><00:09:05.620><c> class</c><00:09:05.830><c> and</c><00:09:06.370><c> if</c><00:09:06.490><c> you</c><00:09:06.640><c> use</c><00:09:06.850><c> this</c>

00:09:07.080 --> 00:09:07.090 align:start position:0%
anonymous in a class and if you use this
 

00:09:07.090 --> 00:09:08.760 align:start position:0%
anonymous in a class and if you use this
it<00:09:07.450><c> would</c><00:09:07.570><c> refer</c><00:09:07.840><c> to</c><00:09:07.870><c> the</c><00:09:08.200><c> instance</c><00:09:08.590><c> of</c><00:09:08.710><c> that</c>

00:09:08.760 --> 00:09:08.770 align:start position:0%
it would refer to the instance of that
 

00:09:08.770 --> 00:09:12.390 align:start position:0%
it would refer to the instance of that
class<00:09:09.960><c> under</c><00:09:10.960><c> expression</c><00:09:11.470><c> if</c><00:09:11.620><c> you</c><00:09:11.680><c> use</c><00:09:12.040><c> this</c>

00:09:12.390 --> 00:09:12.400 align:start position:0%
class under expression if you use this
 

00:09:12.400 --> 00:09:14.490 align:start position:0%
class under expression if you use this
it<00:09:12.970><c> refers</c><00:09:13.390><c> to</c><00:09:13.420><c> the</c><00:09:13.780><c> class</c><00:09:14.050><c> of</c><00:09:14.350><c> the</c>

00:09:14.490 --> 00:09:14.500 align:start position:0%
it refers to the class of the
 

00:09:14.500 --> 00:09:16.560 align:start position:0%
it refers to the class of the
surrounding<00:09:15.010><c> scope</c><00:09:15.370><c> in</c><00:09:15.850><c> this</c><00:09:16.000><c> case</c><00:09:16.240><c> it</c><00:09:16.480><c> would</c>

00:09:16.560 --> 00:09:16.570 align:start position:0%
surrounding scope in this case it would
 

00:09:16.570 --> 00:09:19.290 align:start position:0%
surrounding scope in this case it would
be<00:09:16.630><c> the</c><00:09:16.990><c> data</c><00:09:17.200><c> processor</c><00:09:17.790><c> so</c><00:09:18.790><c> if</c><00:09:18.850><c> we</c><00:09:18.970><c> insert</c>

00:09:19.290 --> 00:09:19.300 align:start position:0%
be the data processor so if we insert
 

00:09:19.300 --> 00:09:23.040 align:start position:0%
be the data processor so if we insert
this<00:09:19.570><c> in</c><00:09:19.960><c> front</c><00:09:20.680><c> of</c><00:09:20.770><c> current</c><00:09:21.190><c> value</c><00:09:21.850><c> this</c><00:09:22.750><c> is</c>

00:09:23.040 --> 00:09:23.050 align:start position:0%
this in front of current value this is
 

00:09:23.050 --> 00:09:25.170 align:start position:0%
this in front of current value this is
an<00:09:23.410><c> effectively</c><00:09:23.830><c> final</c><00:09:24.190><c> variable</c><00:09:24.460><c> so</c><00:09:24.910><c> we</c><00:09:25.030><c> can</c>

00:09:25.170 --> 00:09:25.180 align:start position:0%
an effectively final variable so we can
 

00:09:25.180 --> 00:09:27.000 align:start position:0%
an effectively final variable so we can
then<00:09:25.330><c> use</c><00:09:25.600><c> the</c><00:09:25.660><c> effectively</c><00:09:26.500><c> final</c><00:09:26.740><c> variable</c>

00:09:27.000 --> 00:09:27.010 align:start position:0%
then use the effectively final variable
 

00:09:27.010 --> 00:09:29.190 align:start position:0%
then use the effectively final variable
we<00:09:27.190><c> can</c><00:09:27.310><c> indirectly</c><00:09:28.030><c> access</c><00:09:28.690><c> through</c><00:09:29.020><c> that</c>

00:09:29.190 --> 00:09:29.200 align:start position:0%
we can indirectly access through that
 

00:09:29.200 --> 00:09:31.230 align:start position:0%
we can indirectly access through that
into<00:09:30.040><c> current</c><00:09:30.340><c> value</c><00:09:30.610><c> and</c><00:09:30.820><c> we</c><00:09:30.880><c> can</c><00:09:30.910><c> increment</c>

00:09:31.230 --> 00:09:31.240 align:start position:0%
into current value and we can increment
 

00:09:31.240 --> 00:09:34.320 align:start position:0%
into current value and we can increment
it<00:09:31.600><c> so</c><00:09:32.500><c> yes</c><00:09:33.040><c> it's</c><00:09:33.460><c> old</c><00:09:33.670><c> was</c><00:09:33.880><c> the</c><00:09:33.970><c> problem</c><00:09:34.300><c> for</c>

00:09:34.320 --> 00:09:34.330 align:start position:0%
it so yes it's old was the problem for
 

00:09:34.330 --> 00:09:34.800 align:start position:0%
it so yes it's old was the problem for
us

00:09:34.800 --> 00:09:34.810 align:start position:0%
us
 

00:09:34.810 --> 00:09:36.960 align:start position:0%
us
but<00:09:35.320><c> I</c><00:09:35.560><c> don't</c><00:09:35.920><c> think</c><00:09:36.220><c> we</c><00:09:36.400><c> want</c><00:09:36.550><c> the</c><00:09:36.700><c> problem</c>

00:09:36.960 --> 00:09:36.970 align:start position:0%
but I don't think we want the problem
 

00:09:36.970 --> 00:09:39.540 align:start position:0%
but I don't think we want the problem
solved<00:09:37.390><c> because</c><00:09:37.600><c> the</c><00:09:37.840><c> whole</c><00:09:37.990><c> idea</c><00:09:38.350><c> of</c><00:09:38.550><c> lambda</c>

00:09:39.540 --> 00:09:39.550 align:start position:0%
solved because the whole idea of lambda
 

00:09:39.550 --> 00:09:40.890 align:start position:0%
solved because the whole idea of lambda
expressions<00:09:40.060><c> is</c><00:09:40.330><c> we're</c><00:09:40.660><c> dealing</c><00:09:40.780><c> with</c>

00:09:40.890 --> 00:09:40.900 align:start position:0%
expressions is we're dealing with
 

00:09:40.900 --> 00:09:42.240 align:start position:0%
expressions is we're dealing with
functional<00:09:41.470><c> programming</c><00:09:41.860><c> where</c><00:09:42.160><c> you</c>

00:09:42.240 --> 00:09:42.250 align:start position:0%
functional programming where you
 

00:09:42.250 --> 00:09:44.400 align:start position:0%
functional programming where you
shouldn't<00:09:42.520><c> be</c><00:09:42.640><c> modifying</c><00:09:43.120><c> state</c><00:09:43.420><c> this</c><00:09:44.200><c> allows</c>

00:09:44.400 --> 00:09:44.410 align:start position:0%
shouldn't be modifying state this allows
 

00:09:44.410 --> 00:09:45.840 align:start position:0%
shouldn't be modifying state this allows
you<00:09:44.560><c> getting</c><00:09:44.800><c> away</c><00:09:44.860><c> with</c><00:09:44.950><c> modifying</c><00:09:45.520><c> state</c>

00:09:45.840 --> 00:09:45.850 align:start position:0%
you getting away with modifying state
 

00:09:45.850 --> 00:09:48.030 align:start position:0%
you getting away with modifying state
when<00:09:46.600><c> you</c><00:09:46.630><c> shouldn't</c><00:09:46.990><c> really</c><00:09:47.170><c> be</c><00:09:47.260><c> doing</c><00:09:47.410><c> it</c><00:09:47.650><c> so</c>

00:09:48.030 --> 00:09:48.040 align:start position:0%
when you shouldn't really be doing it so
 

00:09:48.040 --> 00:09:49.920 align:start position:0%
when you shouldn't really be doing it so
like<00:09:48.820><c> I</c><00:09:48.940><c> say</c><00:09:49.090><c> I</c><00:09:49.120><c> think</c><00:09:49.240><c> this</c><00:09:49.420><c> is</c><00:09:49.480><c> a</c><00:09:49.600><c> bit</c><00:09:49.750><c> of</c><00:09:49.840><c> a</c>

00:09:49.920 --> 00:09:49.930 align:start position:0%
like I say I think this is a bit of a
 

00:09:49.930 --> 00:09:52.620 align:start position:0%
like I say I think this is a bit of a
mmm<00:09:50.410><c> bit</c><00:09:51.100><c> of</c><00:09:51.190><c> a</c><00:09:51.250><c> if</c><00:09:51.490><c> he</c><00:09:51.640><c> called</c><00:09:52.150><c> because</c><00:09:52.270><c> also</c>

00:09:52.620 --> 00:09:52.630 align:start position:0%
mmm bit of a if he called because also
 

00:09:52.630 --> 00:09:54.360 align:start position:0%
mmm bit of a if he called because also
introduces<00:09:53.290><c> code</c><00:09:53.530><c> which</c><00:09:53.680><c> you're</c><00:09:53.830><c> not</c><00:09:53.980><c> seeing</c>

00:09:54.360 --> 00:09:54.370 align:start position:0%
introduces code which you're not seeing
 

00:09:54.370 --> 00:09:56.700 align:start position:0%
introduces code which you're not seeing
in<00:09:54.730><c> the</c><00:09:55.690><c> actual</c><00:09:55.960><c> code</c><00:09:56.110><c> that</c><00:09:56.140><c> you</c><00:09:56.350><c> write</c><00:09:56.530><c> so</c>

00:09:56.700 --> 00:09:56.710 align:start position:0%
in the actual code that you write so
 

00:09:56.710 --> 00:09:58.260 align:start position:0%
in the actual code that you write so
you're<00:09:56.830><c> not</c><00:09:56.920><c> aware</c><00:09:57.070><c> of</c><00:09:57.280><c> that</c><00:09:57.400><c> reference</c><00:09:58.090><c> being</c>

00:09:58.260 --> 00:09:58.270 align:start position:0%
you're not aware of that reference being
 

00:09:58.270 --> 00:10:03.720 align:start position:0%
you're not aware of that reference being
inserted<00:10:00.420><c> method</c><00:10:01.420><c> references</c><00:10:01.870><c> so</c><00:10:02.830><c> this</c><00:10:03.610><c> is</c>

00:10:03.720 --> 00:10:03.730 align:start position:0%
inserted method references so this is
 

00:10:03.730 --> 00:10:05.190 align:start position:0%
inserted method references so this is
the<00:10:03.820><c> idea</c><00:10:04.090><c> that</c><00:10:04.270><c> where</c><00:10:04.540><c> you</c><00:10:04.630><c> have</c><00:10:04.870><c> a</c><00:10:04.900><c> lambda</c>

00:10:05.190 --> 00:10:05.200 align:start position:0%
the idea that where you have a lambda
 

00:10:05.200 --> 00:10:08.250 align:start position:0%
the idea that where you have a lambda
expression<00:10:05.440><c> which</c><00:10:06.370><c> is</c><00:10:06.580><c> simply</c><00:10:06.930><c> using</c><00:10:07.930><c> a</c>

00:10:08.250 --> 00:10:08.260 align:start position:0%
expression which is simply using a
 

00:10:08.260 --> 00:10:09.990 align:start position:0%
expression which is simply using a
method<00:10:08.680><c> on</c><00:10:08.860><c> the</c><00:10:09.250><c> parameter</c><00:10:09.700><c> that</c><00:10:09.820><c> you're</c>

00:10:09.990 --> 00:10:10.000 align:start position:0%
method on the parameter that you're
 

00:10:10.000 --> 00:10:13.350 align:start position:0%
method on the parameter that you're
passing<00:10:10.390><c> to</c><00:10:10.540><c> it</c><00:10:10.660><c> or</c><00:10:11.040><c> some</c><00:10:12.040><c> other</c><00:10:12.280><c> forms</c><00:10:13.270><c> of</c>

00:10:13.350 --> 00:10:13.360 align:start position:0%
passing to it or some other forms of
 

00:10:13.360 --> 00:10:15.450 align:start position:0%
passing to it or some other forms of
that<00:10:13.510><c> which</c><00:10:13.630><c> we'll</c><00:10:13.750><c> come</c><00:10:13.870><c> to</c><00:10:13.930><c> in</c><00:10:14.050><c> a</c><00:10:14.140><c> moment</c><00:10:14.460><c> you</c>

00:10:15.450 --> 00:10:15.460 align:start position:0%
that which we'll come to in a moment you
 

00:10:15.460 --> 00:10:17.850 align:start position:0%
that which we'll come to in a moment you
can<00:10:15.490><c> simplify</c><00:10:15.970><c> that</c><00:10:16.300><c> by</c><00:10:16.660><c> eliminating</c><00:10:17.530><c> some</c><00:10:17.680><c> of</c>

00:10:17.850 --> 00:10:17.860 align:start position:0%
can simplify that by eliminating some of
 

00:10:17.860 --> 00:10:21.540 align:start position:0%
can simplify that by eliminating some of
the<00:10:18.070><c> extra</c><00:10:19.140><c> code</c><00:10:20.140><c> so</c><00:10:20.650><c> in</c><00:10:20.950><c> this</c><00:10:21.070><c> case</c><00:10:21.280><c> I've</c><00:10:21.520><c> got</c>

00:10:21.540 --> 00:10:21.550 align:start position:0%
the extra code so in this case I've got
 

00:10:21.550 --> 00:10:24.390 align:start position:0%
the extra code so in this case I've got
a<00:10:21.730><c> file</c><00:10:22.000><c> filter</c><00:10:22.240><c> X</c><00:10:22.540><c> and</c><00:10:22.900><c> I</c><00:10:23.530><c> want</c><00:10:23.710><c> to</c><00:10:23.950><c> represent</c>

00:10:24.390 --> 00:10:24.400 align:start position:0%
a file filter X and I want to represent
 

00:10:24.400 --> 00:10:25.830 align:start position:0%
a file filter X and I want to represent
that<00:10:24.550><c> using</c><00:10:24.940><c> a</c><00:10:25.000><c> lambda</c><00:10:25.180><c> expression</c><00:10:25.690><c> where</c><00:10:25.810><c> I</c>

00:10:25.830 --> 00:10:25.840 align:start position:0%
that using a lambda expression where I
 

00:10:25.840 --> 00:10:27.930 align:start position:0%
that using a lambda expression where I
take<00:10:26.050><c> file</c><00:10:26.290><c> F</c><00:10:26.470><c> and</c><00:10:26.740><c> I'm</c><00:10:27.400><c> going</c><00:10:27.580><c> to</c><00:10:27.610><c> call</c><00:10:27.790><c> the</c>

00:10:27.930 --> 00:10:27.940 align:start position:0%
take file F and I'm going to call the
 

00:10:27.940 --> 00:10:31.290 align:start position:0%
take file F and I'm going to call the
can<00:10:28.210><c> read</c><00:10:28.480><c> meth</c><00:10:28.750><c> on</c><00:10:28.960><c> can</c><00:10:29.680><c> read</c><00:10:29.860><c> method</c><00:10:30.370><c> on</c><00:10:30.520><c> F</c><00:10:31.000><c> I</c>

00:10:31.290 --> 00:10:31.300 align:start position:0%
can read meth on can read method on F I
 

00:10:31.300 --> 00:10:33.930 align:start position:0%
can read meth on can read method on F I
can<00:10:31.990><c> simplify</c><00:10:32.350><c> that</c><00:10:32.650><c> by</c><00:10:32.860><c> simply</c><00:10:33.250><c> saying</c><00:10:33.520><c> file</c>

00:10:33.930 --> 00:10:33.940 align:start position:0%
can simplify that by simply saying file
 

00:10:33.940 --> 00:10:36.630 align:start position:0%
can simplify that by simply saying file
which<00:10:34.270><c> is</c><00:10:34.390><c> the</c><00:10:34.510><c> tonic</c><00:10:34.780><c> colon</c><00:10:35.620><c> colon</c><00:10:35.950><c> and</c><00:10:36.160><c> then</c>

00:10:36.630 --> 00:10:36.640 align:start position:0%
which is the tonic colon colon and then
 

00:10:36.640 --> 00:10:39.290 align:start position:0%
which is the tonic colon colon and then
can<00:10:37.000><c> read</c><00:10:37.210><c> and</c><00:10:37.480><c> that's</c><00:10:37.780><c> equivalent</c><00:10:38.230><c> to</c><00:10:38.770><c> the</c>

00:10:39.290 --> 00:10:39.300 align:start position:0%
can read and that's equivalent to the
 

00:10:39.300 --> 00:10:43.710 align:start position:0%
can read and that's equivalent to the
lambda<00:10:40.300><c> expression</c><00:10:40.750><c> above</c><00:10:42.210><c> in</c><00:10:43.210><c> terms</c><00:10:43.270><c> of</c><00:10:43.570><c> the</c>

00:10:43.710 --> 00:10:43.720 align:start position:0%
lambda expression above in terms of the
 

00:10:43.720 --> 00:10:45.000 align:start position:0%
lambda expression above in terms of the
the<00:10:44.020><c> way</c><00:10:44.110><c> that</c><00:10:44.140><c> you</c><00:10:44.380><c> can</c><00:10:44.530><c> use</c><00:10:44.650><c> method</c>

00:10:45.000 --> 00:10:45.010 align:start position:0%
the way that you can use method
 

00:10:45.010 --> 00:10:46.400 align:start position:0%
the way that you can use method
references<00:10:45.160><c> they're</c><00:10:45.610><c> actually</c><00:10:45.850><c> three</c>

00:10:46.400 --> 00:10:46.410 align:start position:0%
references they're actually three
 

00:10:46.410 --> 00:10:48.990 align:start position:0%
references they're actually three
distinct<00:10:47.410><c> ways</c><00:10:47.620><c> that</c><00:10:47.980><c> you</c><00:10:48.070><c> can</c><00:10:48.250><c> use</c><00:10:48.430><c> them</c><00:10:48.640><c> in</c>

00:10:48.990 --> 00:10:49.000 align:start position:0%
distinct ways that you can use them in
 

00:10:49.000 --> 00:10:51.720 align:start position:0%
distinct ways that you can use them in
terms<00:10:49.390><c> of</c><00:10:49.510><c> forming</c><00:10:49.870><c> them</c><00:10:50.040><c> and</c><00:10:51.040><c> so</c><00:10:51.220><c> the</c><00:10:51.340><c> idea</c><00:10:51.670><c> of</c>

00:10:51.720 --> 00:10:51.730 align:start position:0%
terms of forming them and so the idea of
 

00:10:51.730 --> 00:10:53.160 align:start position:0%
terms of forming them and so the idea of
the<00:10:51.910><c> this</c><00:10:52.180><c> is</c><00:10:52.240><c> that</c><00:10:52.510><c> you</c><00:10:52.570><c> have</c><00:10:52.720><c> a</c><00:10:52.750><c> target</c>

00:10:53.160 --> 00:10:53.170 align:start position:0%
the this is that you have a target
 

00:10:53.170 --> 00:10:54.930 align:start position:0%
the this is that you have a target
reference<00:10:53.320><c> double</c><00:10:54.190><c> colon</c><00:10:54.490><c> and</c><00:10:54.670><c> then</c><00:10:54.820><c> the</c>

00:10:54.930 --> 00:10:54.940 align:start position:0%
reference double colon and then the
 

00:10:54.940 --> 00:10:56.820 align:start position:0%
reference double colon and then the
method<00:10:55.150><c> name</c><00:10:55.450><c> so</c><00:10:55.930><c> the</c><00:10:56.170><c> method</c><00:10:56.410><c> names</c><00:10:56.590><c> going</c><00:10:56.770><c> to</c>

00:10:56.820 --> 00:10:56.830 align:start position:0%
method name so the method names going to
 

00:10:56.830 --> 00:10:59.610 align:start position:0%
method name so the method names going to
be<00:10:56.890><c> caught</c><00:10:57.070><c> on</c><00:10:57.280><c> the</c><00:10:57.490><c> target</c><00:10:57.880><c> reference</c><00:10:58.410><c> as</c><00:10:59.410><c> I</c>

00:10:59.610 --> 00:10:59.620 align:start position:0%
be caught on the target reference as I
 

00:10:59.620 --> 00:11:01.260 align:start position:0%
be caught on the target reference as I
said<00:10:59.800><c> there</c><00:10:59.920><c> are</c><00:11:00.010><c> three</c><00:11:00.190><c> kinds</c><00:11:00.370><c> of</c><00:11:00.580><c> these</c><00:11:00.700><c> one</c>

00:11:01.260 --> 00:11:01.270 align:start position:0%
said there are three kinds of these one
 

00:11:01.270 --> 00:11:04.020 align:start position:0%
said there are three kinds of these one
relates<00:11:01.900><c> to</c><00:11:01.990><c> static</c><00:11:02.350><c> methods</c><00:11:02.710><c> one</c><00:11:03.400><c> is</c><00:11:03.730><c> where</c>

00:11:04.020 --> 00:11:04.030 align:start position:0%
relates to static methods one is where
 

00:11:04.030 --> 00:11:05.730 align:start position:0%
relates to static methods one is where
you're<00:11:04.180><c> calling</c><00:11:04.390><c> an</c><00:11:04.690><c> instance</c><00:11:05.170><c> method</c>

00:11:05.730 --> 00:11:05.740 align:start position:0%
you're calling an instance method
 

00:11:05.740 --> 00:11:08.250 align:start position:0%
you're calling an instance method
on<00:11:05.890><c> an</c><00:11:06.160><c> arbitrary</c><00:11:06.700><c> type</c><00:11:06.910><c> and</c><00:11:07.300><c> one</c><00:11:07.990><c> where</c>

00:11:08.250 --> 00:11:08.260 align:start position:0%
on an arbitrary type and one where
 

00:11:08.260 --> 00:11:09.780 align:start position:0%
on an arbitrary type and one where
you're<00:11:08.380><c> calling</c><00:11:08.530><c> an</c><00:11:08.710><c> instance</c><00:11:09.130><c> method</c><00:11:09.490><c> on</c><00:11:09.640><c> an</c>

00:11:09.780 --> 00:11:09.790 align:start position:0%
you're calling an instance method on an
 

00:11:09.790 --> 00:11:14.010 align:start position:0%
you're calling an instance method on an
existing<00:11:10.300><c> object</c><00:11:11.370><c> and</c><00:11:12.370><c> if</c><00:11:13.030><c> we</c><00:11:13.180><c> look</c><00:11:13.360><c> at</c><00:11:13.540><c> the</c>

00:11:14.010 --> 00:11:14.020 align:start position:0%
existing object and if we look at the
 

00:11:14.020 --> 00:11:17.430 align:start position:0%
existing object and if we look at the
rules<00:11:14.680><c> for</c><00:11:14.980><c> construction</c><00:11:15.430><c> of</c><00:11:15.670><c> those</c><00:11:16.290><c> most</c><00:11:17.290><c> of</c>

00:11:17.430 --> 00:11:17.440 align:start position:0%
rules for construction of those most of
 

00:11:17.440 --> 00:11:18.900 align:start position:0%
rules for construction of those most of
it's<00:11:17.560><c> fairly</c><00:11:17.710><c> straightforward</c><00:11:18.070><c> so</c><00:11:18.490><c> in</c><00:11:18.790><c> the</c>

00:11:18.900 --> 00:11:18.910 align:start position:0%
it's fairly straightforward so in the
 

00:11:18.910 --> 00:11:20.340 align:start position:0%
it's fairly straightforward so in the
first<00:11:19.390><c> case</c><00:11:19.540><c> if</c><00:11:19.750><c> we're</c><00:11:19.870><c> dealing</c><00:11:20.110><c> with</c><00:11:20.230><c> a</c>

00:11:20.340 --> 00:11:20.350 align:start position:0%
first case if we're dealing with a
 

00:11:20.350 --> 00:11:22.020 align:start position:0%
first case if we're dealing with a
static<00:11:20.680><c> method</c><00:11:20.860><c> what</c><00:11:21.580><c> you're</c><00:11:21.700><c> gonna</c><00:11:21.790><c> have</c><00:11:21.970><c> is</c>

00:11:22.020 --> 00:11:22.030 align:start position:0%
static method what you're gonna have is
 

00:11:22.030 --> 00:11:23.430 align:start position:0%
static method what you're gonna have is
a<00:11:22.360><c> lambda</c><00:11:22.690><c> expression</c><00:11:23.140><c> where</c><00:11:23.230><c> you've</c><00:11:23.350><c> got</c>

00:11:23.430 --> 00:11:23.440 align:start position:0%
a lambda expression where you've got
 

00:11:23.440 --> 00:11:24.990 align:start position:0%
a lambda expression where you've got
some<00:11:23.590><c> arguments</c><00:11:24.070><c> and</c><00:11:24.190><c> then</c><00:11:24.700><c> you've</c><00:11:24.850><c> got</c><00:11:24.970><c> a</c>

00:11:24.990 --> 00:11:25.000 align:start position:0%
some arguments and then you've got a
 

00:11:25.000 --> 00:11:26.670 align:start position:0%
some arguments and then you've got a
class<00:11:25.270><c> name</c><00:11:25.570><c> and</c><00:11:25.810><c> then</c><00:11:25.990><c> you</c><00:11:26.050><c> call</c><00:11:26.200><c> the</c><00:11:26.350><c> static</c>

00:11:26.670 --> 00:11:26.680 align:start position:0%
class name and then you call the static
 

00:11:26.680 --> 00:11:28.920 align:start position:0%
class name and then you call the static
method<00:11:26.830><c> on</c><00:11:27.070><c> that</c><00:11:27.100><c> with</c><00:11:27.580><c> those</c><00:11:27.730><c> arguments</c><00:11:28.330><c> so</c>

00:11:28.920 --> 00:11:28.930 align:start position:0%
method on that with those arguments so
 

00:11:28.930 --> 00:11:30.480 align:start position:0%
method on that with those arguments so
to<00:11:28.990><c> convert</c><00:11:29.350><c> it</c><00:11:29.500><c> into</c><00:11:29.650><c> our</c><00:11:29.830><c> method</c><00:11:30.100><c> reference</c>

00:11:30.480 --> 00:11:30.490 align:start position:0%
to convert it into our method reference
 

00:11:30.490 --> 00:11:32.520 align:start position:0%
to convert it into our method reference
you<00:11:30.610><c> simply</c><00:11:30.940><c> use</c><00:11:31.120><c> the</c><00:11:31.270><c> class</c><00:11:31.510><c> name</c><00:11:31.780><c> double</c>

00:11:32.520 --> 00:11:32.530 align:start position:0%
you simply use the class name double
 

00:11:32.530 --> 00:11:35.880 align:start position:0%
you simply use the class name double
colon<00:11:32.830><c> static</c><00:11:33.490><c> method</c><00:11:33.760><c> name</c><00:11:33.910><c> great</c><00:11:34.860><c> going</c><00:11:35.860><c> to</c>

00:11:35.880 --> 00:11:35.890 align:start position:0%
colon static method name great going to
 

00:11:35.890 --> 00:11:40.020 align:start position:0%
colon static method name great going to
the<00:11:36.010><c> bottom</c><00:11:36.400><c> where</c><00:11:36.850><c> we</c><00:11:36.880><c> using</c><00:11:37.890><c> an</c><00:11:39.030><c> existing</c>

00:11:40.020 --> 00:11:40.030 align:start position:0%
the bottom where we using an existing
 

00:11:40.030 --> 00:11:42.630 align:start position:0%
the bottom where we using an existing
object<00:11:40.240><c> reference</c><00:11:41.020><c> what</c><00:11:41.740><c> we</c><00:11:41.830><c> can</c><00:11:41.980><c> do</c><00:11:42.130><c> is</c><00:11:42.220><c> same</c>

00:11:42.630 --> 00:11:42.640 align:start position:0%
object reference what we can do is same
 

00:11:42.640 --> 00:11:43.740 align:start position:0%
object reference what we can do is same
thing<00:11:42.850><c> we</c><00:11:43.000><c> can</c><00:11:43.030><c> say</c><00:11:43.270><c> okay</c><00:11:43.510><c> we've</c><00:11:43.630><c> got</c><00:11:43.720><c> some</c>

00:11:43.740 --> 00:11:43.750 align:start position:0%
thing we can say okay we've got some
 

00:11:43.750 --> 00:11:45.720 align:start position:0%
thing we can say okay we've got some
arguments<00:11:44.350><c> we've</c><00:11:44.470><c> got</c><00:11:44.590><c> an</c><00:11:44.770><c> expression</c><00:11:45.280><c> which</c>

00:11:45.720 --> 00:11:45.730 align:start position:0%
arguments we've got an expression which
 

00:11:45.730 --> 00:11:47.820 align:start position:0%
arguments we've got an expression which
represents<00:11:46.330><c> an</c><00:11:46.450><c> existing</c><00:11:46.840><c> object</c><00:11:46.960><c> we're</c>

00:11:47.820 --> 00:11:47.830 align:start position:0%
represents an existing object we're
 

00:11:47.830 --> 00:11:49.530 align:start position:0%
represents an existing object we're
calling<00:11:48.130><c> the</c><00:11:48.220><c> instance</c><00:11:48.490><c> method</c><00:11:48.820><c> on</c><00:11:48.940><c> that</c><00:11:48.970><c> with</c>

00:11:49.530 --> 00:11:49.540 align:start position:0%
calling the instance method on that with
 

00:11:49.540 --> 00:11:51.780 align:start position:0%
calling the instance method on that with
the<00:11:49.660><c> arguments</c><00:11:50.230><c> so</c><00:11:50.770><c> the</c><00:11:50.950><c> way</c><00:11:51.250><c> we</c><00:11:51.370><c> construct</c>

00:11:51.780 --> 00:11:51.790 align:start position:0%
the arguments so the way we construct
 

00:11:51.790 --> 00:11:53.700 align:start position:0%
the arguments so the way we construct
the<00:11:52.000><c> method</c><00:11:52.420><c> reference</c><00:11:52.750><c> is</c><00:11:52.900><c> basically</c><00:11:53.530><c> the</c>

00:11:53.700 --> 00:11:53.710 align:start position:0%
the method reference is basically the
 

00:11:53.710 --> 00:11:55.590 align:start position:0%
the method reference is basically the
same<00:11:53.860><c> except</c><00:11:54.490><c> rather</c><00:11:54.640><c> than</c><00:11:54.790><c> using</c><00:11:55.030><c> the</c><00:11:55.300><c> type</c>

00:11:55.590 --> 00:11:55.600 align:start position:0%
same except rather than using the type
 

00:11:55.600 --> 00:11:59.160 align:start position:0%
same except rather than using the type
we<00:11:56.230><c> use</c><00:11:56.410><c> the</c><00:11:56.640><c> object</c><00:11:57.640><c> reference</c><00:11:58.020><c> one</c><00:11:59.020><c> in</c><00:11:59.110><c> the</c>

00:11:59.160 --> 00:11:59.170 align:start position:0%
we use the object reference one in the
 

00:11:59.170 --> 00:12:00.690 align:start position:0%
we use the object reference one in the
middle<00:11:59.380><c> is</c><00:11:59.470><c> slightly</c><00:11:59.800><c> more</c><00:12:00.040><c> complicated</c>

00:12:00.690 --> 00:12:00.700 align:start position:0%
middle is slightly more complicated
 

00:12:00.700 --> 00:12:03.360 align:start position:0%
middle is slightly more complicated
because<00:12:00.880><c> in</c><00:12:01.240><c> this</c><00:12:01.360><c> case</c><00:12:01.630><c> we</c><00:12:01.960><c> have</c><00:12:02.260><c> a</c><00:12:02.680><c> set</c><00:12:03.280><c> of</c>

00:12:03.360 --> 00:12:03.370 align:start position:0%
because in this case we have a set of
 

00:12:03.370 --> 00:12:05.130 align:start position:0%
because in this case we have a set of
arguments<00:12:03.610><c> where</c><00:12:03.940><c> the</c><00:12:04.030><c> first</c><00:12:04.360><c> argument</c><00:12:04.630><c> is</c>

00:12:05.130 --> 00:12:05.140 align:start position:0%
arguments where the first argument is
 

00:12:05.140 --> 00:12:07.230 align:start position:0%
arguments where the first argument is
the<00:12:05.710><c> type</c><00:12:06.010><c> that</c><00:12:06.310><c> we're</c><00:12:06.460><c> going</c><00:12:06.610><c> to</c><00:12:06.820><c> call</c><00:12:07.060><c> the</c>

00:12:07.230 --> 00:12:07.240 align:start position:0%
the type that we're going to call the
 

00:12:07.240 --> 00:12:09.360 align:start position:0%
the type that we're going to call the
method<00:12:07.420><c> on</c><00:12:07.720><c> and</c><00:12:08.170><c> then</c><00:12:08.740><c> we</c><00:12:08.860><c> have</c><00:12:09.070><c> and</c>

00:12:09.360 --> 00:12:09.370 align:start position:0%
method on and then we have and
 

00:12:09.370 --> 00:12:11.280 align:start position:0%
method on and then we have and
potentially<00:12:10.060><c> more</c><00:12:10.240><c> arguments</c><00:12:10.780><c> after</c><00:12:11.140><c> that</c>

00:12:11.280 --> 00:12:11.290 align:start position:0%
potentially more arguments after that
 

00:12:11.290 --> 00:12:13.470 align:start position:0%
potentially more arguments after that
and<00:12:11.650><c> it's</c><00:12:11.980><c> those</c><00:12:12.160><c> rest</c><00:12:12.700><c> of</c><00:12:12.850><c> arguments</c><00:12:13.300><c> which</c>

00:12:13.470 --> 00:12:13.480 align:start position:0%
and it's those rest of arguments which
 

00:12:13.480 --> 00:12:15.510 align:start position:0%
and it's those rest of arguments which
we<00:12:13.660><c> pass</c><00:12:13.930><c> as</c><00:12:14.290><c> arguments</c><00:12:14.770><c> to</c><00:12:14.920><c> the</c><00:12:15.040><c> instance</c>

00:12:15.510 --> 00:12:15.520 align:start position:0%
we pass as arguments to the instance
 

00:12:15.520 --> 00:12:18.630 align:start position:0%
we pass as arguments to the instance
method<00:12:15.880><c> on</c><00:12:16.030><c> the</c><00:12:16.480><c> first</c><00:12:16.750><c> argument</c><00:12:17.350><c> type</c><00:12:17.590><c> ok</c><00:12:18.520><c> now</c>

00:12:18.630 --> 00:12:18.640 align:start position:0%
method on the first argument type ok now
 

00:12:18.640 --> 00:12:20.070 align:start position:0%
method on the first argument type ok now
that<00:12:18.790><c> all</c><00:12:18.910><c> looks</c><00:12:19.120><c> very</c><00:12:19.300><c> complicated</c><00:12:19.540><c> so</c><00:12:20.050><c> I</c>

00:12:20.070 --> 00:12:20.080 align:start position:0%
that all looks very complicated so I
 

00:12:20.080 --> 00:12:21.420 align:start position:0%
that all looks very complicated so I
show<00:12:20.260><c> you</c><00:12:20.290><c> some</c><00:12:20.470><c> examples</c><00:12:20.920><c> and</c><00:12:20.950><c> it</c><00:12:21.130><c> makes</c><00:12:21.310><c> it</c>

00:12:21.420 --> 00:12:21.430 align:start position:0%
show you some examples and it makes it
 

00:12:21.430 --> 00:12:24.960 align:start position:0%
show you some examples and it makes it
much<00:12:21.550><c> clearer</c><00:12:21.940><c> at</c><00:12:22.180><c> least</c><00:12:22.360><c> I</c><00:12:22.420><c> hope</c><00:12:22.540><c> it</c><00:12:22.720><c> does</c><00:12:23.970><c> so</c>

00:12:24.960 --> 00:12:24.970 align:start position:0%
much clearer at least I hope it does so
 

00:12:24.970 --> 00:12:27.390 align:start position:0%
much clearer at least I hope it does so
the<00:12:25.060><c> first</c><00:12:25.300><c> calling</c><00:12:25.990><c> a</c><00:12:26.080><c> static</c><00:12:26.410><c> method</c><00:12:26.590><c> we've</c>

00:12:27.390 --> 00:12:27.400 align:start position:0%
the first calling a static method we've
 

00:12:27.400 --> 00:12:29.580 align:start position:0%
the first calling a static method we've
got<00:12:27.520><c> string</c><00:12:27.820><c> s</c><00:12:27.970><c> as</c><00:12:28.120><c> our</c><00:12:28.270><c> parameter</c><00:12:28.960><c> and</c><00:12:29.380><c> we</c>

00:12:29.580 --> 00:12:29.590 align:start position:0%
got string s as our parameter and we
 

00:12:29.590 --> 00:12:32.060 align:start position:0%
got string s as our parameter and we
calling<00:12:29.890><c> integer</c><00:12:30.310><c> dot</c><00:12:30.430><c> parseint</c><00:12:30.490><c> on</c><00:12:31.240><c> s</c><00:12:31.540><c> so</c>

00:12:32.060 --> 00:12:32.070 align:start position:0%
calling integer dot parseint on s so
 

00:12:32.070 --> 00:12:34.350 align:start position:0%
calling integer dot parseint on s so
very<00:12:33.070><c> simple</c><00:12:33.400><c> we</c><00:12:33.550><c> can</c><00:12:33.700><c> convert</c><00:12:33.970><c> that</c><00:12:34.030><c> into</c><00:12:34.150><c> a</c>

00:12:34.350 --> 00:12:34.360 align:start position:0%
very simple we can convert that into a
 

00:12:34.360 --> 00:12:35.790 align:start position:0%
very simple we can convert that into a
method<00:12:34.570><c> reference</c><00:12:34.990><c> by</c><00:12:35.140><c> saying</c><00:12:35.380><c> integer</c>

00:12:35.790 --> 00:12:35.800 align:start position:0%
method reference by saying integer
 

00:12:35.800 --> 00:12:38.820 align:start position:0%
method reference by saying integer
double<00:12:36.190><c> colon</c><00:12:36.490><c> parse</c><00:12:36.850><c> int</c><00:12:37.290><c> the</c><00:12:38.290><c> second</c><00:12:38.620><c> one</c><00:12:38.710><c> is</c>

00:12:38.820 --> 00:12:38.830 align:start position:0%
double colon parse int the second one is
 

00:12:38.830 --> 00:12:39.840 align:start position:0%
double colon parse int the second one is
where<00:12:38.980><c> things</c><00:12:39.310><c> a</c><00:12:39.460><c> little</c><00:12:39.520><c> bit</c><00:12:39.670><c> more</c>

00:12:39.840 --> 00:12:39.850 align:start position:0%
where things a little bit more
 

00:12:39.850 --> 00:12:41.910 align:start position:0%
where things a little bit more
complicated<00:12:40.060><c> so</c><00:12:40.600><c> we've</c><00:12:40.780><c> got</c><00:12:40.960><c> string</c><00:12:41.350><c> s</c><00:12:41.590><c> and</c>

00:12:41.910 --> 00:12:41.920 align:start position:0%
complicated so we've got string s and
 

00:12:41.920 --> 00:12:44.240 align:start position:0%
complicated so we've got string s and
we've<00:12:42.310><c> got</c><00:12:42.430><c> into</c><00:12:42.760><c> buyers</c><00:12:42.910><c> parameters</c><00:12:43.630><c> and</c>

00:12:44.240 --> 00:12:44.250 align:start position:0%
we've got into buyers parameters and
 

00:12:44.250 --> 00:12:46.410 align:start position:0%
we've got into buyers parameters and
what<00:12:45.250><c> we</c><00:12:45.340><c> want</c><00:12:45.490><c> to</c><00:12:45.640><c> actually</c><00:12:45.760><c> do</c><00:12:45.970><c> an</c><00:12:46.090><c> embodied</c>

00:12:46.410 --> 00:12:46.420 align:start position:0%
what we want to actually do an embodied
 

00:12:46.420 --> 00:12:48.300 align:start position:0%
what we want to actually do an embodied
of<00:12:46.480><c> the</c><00:12:46.570><c> lambda</c><00:12:46.840><c> expression</c><00:12:47.260><c> is</c><00:12:47.380><c> say</c><00:12:47.560><c> s</c><00:12:47.800><c> dot</c>

00:12:48.300 --> 00:12:48.310 align:start position:0%
of the lambda expression is say s dot
 

00:12:48.310 --> 00:12:51.390 align:start position:0%
of the lambda expression is say s dot
substring<00:12:49.210><c> of</c><00:12:49.450><c> I</c><00:12:49.840><c> and</c><00:12:50.770><c> we</c><00:12:50.890><c> can</c><00:12:51.040><c> convert</c><00:12:51.370><c> that</c>

00:12:51.390 --> 00:12:51.400 align:start position:0%
substring of I and we can convert that
 

00:12:51.400 --> 00:12:54.480 align:start position:0%
substring of I and we can convert that
into<00:12:51.550><c> a</c><00:12:51.850><c> method</c><00:12:52.630><c> reference</c><00:12:53.110><c> by</c><00:12:53.380><c> using</c><00:12:53.800><c> string</c>

00:12:54.480 --> 00:12:54.490 align:start position:0%
into a method reference by using string
 

00:12:54.490 --> 00:12:55.920 align:start position:0%
into a method reference by using string
because<00:12:55.000><c> that's</c><00:12:55.150><c> the</c><00:12:55.270><c> type</c><00:12:55.450><c> of</c><00:12:55.480><c> the</c><00:12:55.690><c> first</c>

00:12:55.920 --> 00:12:55.930 align:start position:0%
because that's the type of the first
 

00:12:55.930 --> 00:12:58.890 align:start position:0%
because that's the type of the first
argument<00:12:56.200><c> S</c><00:12:56.920><c> and</c><00:12:57.280><c> call</c><00:12:58.120><c> substring</c><00:12:58.510><c> on</c><00:12:58.660><c> that</c>

00:12:58.890 --> 00:12:58.900 align:start position:0%
argument S and call substring on that
 

00:12:58.900 --> 00:13:01.410 align:start position:0%
argument S and call substring on that
which<00:12:59.470><c> will</c><00:12:59.650><c> pass</c><00:12:59.860><c> I</c><00:13:00.100><c> as</c><00:13:00.520><c> the</c><00:13:00.700><c> parameter</c><00:13:01.180><c> to</c>

00:13:01.410 --> 00:13:01.420 align:start position:0%
which will pass I as the parameter to
 

00:13:01.420 --> 00:13:04.170 align:start position:0%
which will pass I as the parameter to
the<00:13:01.810><c> call</c><00:13:02.020><c> and</c><00:13:02.290><c> then</c><00:13:02.980><c> in</c><00:13:03.400><c> terms</c><00:13:03.760><c> of</c><00:13:03.940><c> the</c><00:13:04.000><c> last</c>

00:13:04.170 --> 00:13:04.180 align:start position:0%
the call and then in terms of the last
 

00:13:04.180 --> 00:13:06.270 align:start position:0%
the call and then in terms of the last
one<00:13:04.450><c> if</c><00:13:04.630><c> we've</c><00:13:04.780><c> got</c><00:13:04.900><c> an</c><00:13:04.990><c> existing</c><00:13:05.200><c> object</c><00:13:05.500><c> if</c>

00:13:06.270 --> 00:13:06.280 align:start position:0%
one if we've got an existing object if
 

00:13:06.280 --> 00:13:08.580 align:start position:0%
one if we've got an existing object if
we<00:13:06.880><c> want</c><00:13:07.090><c> in</c><00:13:07.420><c> this</c><00:13:07.570><c> case</c><00:13:07.750><c> we've</c><00:13:07.900><c> got</c><00:13:07.930><c> an</c><00:13:08.080><c> axis</c><00:13:08.380><c> a</c>

00:13:08.580 --> 00:13:08.590 align:start position:0%
we want in this case we've got an axis a
 

00:13:08.590 --> 00:13:10.350 align:start position:0%
we want in this case we've got an axis a
and<00:13:08.950><c> then</c><00:13:09.280><c> we're</c><00:13:09.370><c> going</c><00:13:09.490><c> to</c><00:13:09.550><c> call</c><00:13:09.730><c> get</c><00:13:10.150><c> length</c>

00:13:10.350 --> 00:13:10.360 align:start position:0%
and then we're going to call get length
 

00:13:10.360 --> 00:13:12.480 align:start position:0%
and then we're going to call get length
which<00:13:10.690><c> is</c><00:13:10.720><c> in</c><00:13:11.110><c> the</c><00:13:11.440><c> class</c><00:13:12.040><c> which</c><00:13:12.310><c> we're</c>

00:13:12.480 --> 00:13:12.490 align:start position:0%
which is in the class which we're
 

00:13:12.490 --> 00:13:15.540 align:start position:0%
which is in the class which we're
actually<00:13:12.580><c> running</c><00:13:12.910><c> in</c><00:13:13.200><c> we</c><00:13:14.200><c> can</c><00:13:14.380><c> use</c><00:13:14.800><c> this</c><00:13:15.190><c> as</c><00:13:15.490><c> a</c>

00:13:15.540 --> 00:13:15.550 align:start position:0%
actually running in we can use this as a
 

00:13:15.550 --> 00:13:17.520 align:start position:0%
actually running in we can use this as a
reference<00:13:15.880><c> because</c><00:13:16.390><c> again</c><00:13:16.600><c> the</c><00:13:17.140><c> lambda</c>

00:13:17.520 --> 00:13:17.530 align:start position:0%
reference because again the lambda
 

00:13:17.530 --> 00:13:18.750 align:start position:0%
reference because again the lambda
expression<00:13:17.860><c> is</c><00:13:17.950><c> not</c><00:13:18.130><c> associated</c><00:13:18.520><c> with</c><00:13:18.670><c> the</c>

00:13:18.750 --> 00:13:18.760 align:start position:0%
expression is not associated with the
 

00:13:18.760 --> 00:13:21.000 align:start position:0%
expression is not associated with the
class<00:13:18.970><c> of</c><00:13:19.240><c> this</c><00:13:19.390><c> represents</c><00:13:20.230><c> the</c><00:13:20.410><c> surrounding</c>

00:13:21.000 --> 00:13:21.010 align:start position:0%
class of this represents the surrounding
 

00:13:21.010 --> 00:13:22.980 align:start position:0%
class of this represents the surrounding
scope<00:13:21.250><c> and</c><00:13:21.580><c> we</c><00:13:22.030><c> can</c><00:13:22.210><c> call</c><00:13:22.330><c> get</c><00:13:22.540><c> length</c><00:13:22.780><c> on</c><00:13:22.960><c> that</c>

00:13:22.980 --> 00:13:22.990 align:start position:0%
scope and we can call get length on that
 

00:13:22.990 --> 00:13:24.300 align:start position:0%
scope and we can call get length on that
so<00:13:23.350><c> these</c><00:13:23.470><c> are</c><00:13:23.620><c> the</c><00:13:23.710><c> three</c><00:13:23.860><c> different</c><00:13:24.130><c> ways</c>

00:13:24.300 --> 00:13:24.310 align:start position:0%
so these are the three different ways
 

00:13:24.310 --> 00:13:29.730 align:start position:0%
so these are the three different ways
that<00:13:24.550><c> we</c><00:13:24.640><c> can</c><00:13:24.760><c> use</c><00:13:24.970><c> method</c><00:13:25.510><c> references</c><00:13:28.740><c> right</c>

00:13:29.730 --> 00:13:29.740 align:start position:0%
that we can use method references right
 

00:13:29.740 --> 00:13:31.740 align:start position:0%
that we can use method references right
so<00:13:30.280><c> now</c><00:13:30.400><c> let's</c><00:13:30.640><c> talk</c><00:13:30.850><c> about</c><00:13:30.910><c> lambda</c>

00:13:31.740 --> 00:13:31.750 align:start position:0%
so now let's talk about lambda
 

00:13:31.750 --> 00:13:34.470 align:start position:0%
so now let's talk about lambda
expression<00:13:32.290><c> performance</c><00:13:33.270><c> because</c><00:13:34.270><c> there</c><00:13:34.390><c> are</c>

00:13:34.470 --> 00:13:34.480 align:start position:0%
expression performance because there are
 

00:13:34.480 --> 00:13:35.880 align:start position:0%
expression performance because there are
some<00:13:34.600><c> interesting</c><00:13:34.840><c> things</c><00:13:35.200><c> to</c><00:13:35.500><c> understand</c>

00:13:35.880 --> 00:13:35.890 align:start position:0%
some interesting things to understand
 

00:13:35.890 --> 00:13:38.970 align:start position:0%
some interesting things to understand
about<00:13:35.980><c> that</c><00:13:37.230><c> okay</c><00:13:38.230><c> so</c><00:13:38.290><c> the</c><00:13:38.440><c> first</c><00:13:38.560><c> thing</c><00:13:38.740><c> is</c>

00:13:38.970 --> 00:13:38.980 align:start position:0%
about that okay so the first thing is
 

00:13:38.980 --> 00:13:40.860 align:start position:0%
about that okay so the first thing is
that<00:13:39.100><c> as</c><00:13:39.580><c> we've</c><00:13:39.820><c> already</c><00:13:39.970><c> kind</c><00:13:40.330><c> of</c><00:13:40.360><c> discussed</c>

00:13:40.860 --> 00:13:40.870 align:start position:0%
that as we've already kind of discussed
 

00:13:40.870 --> 00:13:44.190 align:start position:0%
that as we've already kind of discussed
there<00:13:41.710><c> is</c><00:13:41.740><c> functional</c><00:13:42.580><c> equivalence</c><00:13:43.270><c> in</c><00:13:43.690><c> terms</c>

00:13:44.190 --> 00:13:44.200 align:start position:0%
there is functional equivalence in terms
 

00:13:44.200 --> 00:13:47.610 align:start position:0%
there is functional equivalence in terms
of<00:13:44.530><c> the</c><00:13:45.340><c> three</c><00:13:45.760><c> different</c><00:13:45.940><c> types</c><00:13:46.150><c> of</c><00:13:46.690><c> way</c><00:13:47.350><c> that</c>

00:13:47.610 --> 00:13:47.620 align:start position:0%
of the three different types of way that
 

00:13:47.620 --> 00:13:50.970 align:start position:0%
of the three different types of way that
we<00:13:47.710><c> can</c><00:13:47.890><c> represent</c><00:13:48.490><c> a</c><00:13:48.820><c> function</c><00:13:49.330><c> in</c><00:13:49.540><c> Java</c><00:13:49.980><c> so</c>

00:13:50.970 --> 00:13:50.980 align:start position:0%
we can represent a function in Java so
 

00:13:50.980 --> 00:13:52.890 align:start position:0%
we can represent a function in Java so
we<00:13:51.100><c> could</c><00:13:51.280><c> have</c><00:13:51.490><c> a</c><00:13:51.790><c> lambda</c><00:13:52.300><c> expression</c><00:13:52.780><c> like</c>

00:13:52.890 --> 00:13:52.900 align:start position:0%
we could have a lambda expression like
 

00:13:52.900 --> 00:13:54.630 align:start position:0%
we could have a lambda expression like
this<00:13:53.080><c> so</c><00:13:53.410><c> I</c><00:13:53.440><c> want</c><00:13:53.650><c> to</c><00:13:53.710><c> say</c><00:13:53.800><c> for</c><00:13:54.070><c> each</c><00:13:54.100><c> and</c><00:13:54.550><c> then</c>

00:13:54.630 --> 00:13:54.640 align:start position:0%
this so I want to say for each and then
 

00:13:54.640 --> 00:13:57.420 align:start position:0%
this so I want to say for each and then
I'm<00:13:54.910><c> just</c><00:13:54.940><c> passing</c><00:13:55.480><c> W</c><00:13:56.080><c> as</c><00:13:56.230><c> the</c><00:13:56.260><c> the</c><00:13:56.950><c> word</c><00:13:57.160><c> for</c>

00:13:57.420 --> 00:13:57.430 align:start position:0%
I'm just passing W as the the word for
 

00:13:57.430 --> 00:13:59.700 align:start position:0%
I'm just passing W as the the word for
example<00:13:57.850><c> and</c><00:13:58.030><c> then</c><00:13:58.420><c> printing</c><00:13:58.750><c> it</c><00:13:58.840><c> out</c><00:13:58.960><c> okay</c><00:13:59.650><c> so</c>

00:13:59.700 --> 00:13:59.710 align:start position:0%
example and then printing it out okay so
 

00:13:59.710 --> 00:14:02.760 align:start position:0%
example and then printing it out okay so
that's<00:14:00.010><c> a</c><00:14:00.130><c> lambda</c><00:14:00.400><c> expression</c><00:14:00.880><c> being</c><00:14:01.030><c> used</c><00:14:01.770><c> we</c>

00:14:02.760 --> 00:14:02.770 align:start position:0%
that's a lambda expression being used we
 

00:14:02.770 --> 00:14:04.830 align:start position:0%
that's a lambda expression being used we
also<00:14:02.980><c> do</c><00:14:03.310><c> that</c><00:14:03.460><c> using</c><00:14:04.120><c> a</c><00:14:04.270><c> method</c><00:14:04.540><c> reference</c>

00:14:04.830 --> 00:14:04.840 align:start position:0%
also do that using a method reference
 

00:14:04.840 --> 00:14:06.660 align:start position:0%
also do that using a method reference
which<00:14:05.020><c> you've</c><00:14:05.140><c> already</c><00:14:05.260><c> seen</c><00:14:05.620><c> so</c><00:14:06.160><c> we</c><00:14:06.370><c> simply</c>

00:14:06.660 --> 00:14:06.670 align:start position:0%
which you've already seen so we simply
 

00:14:06.670 --> 00:14:08.490 align:start position:0%
which you've already seen so we simply
say<00:14:06.820><c> system</c><00:14:07.150><c> dot</c><00:14:07.210><c> out</c><00:14:07.330><c> double</c><00:14:07.840><c> colon</c><00:14:08.170><c> print</c>

00:14:08.490 --> 00:14:08.500 align:start position:0%
say system dot out double colon print
 

00:14:08.500 --> 00:14:09.600 align:start position:0%
say system dot out double colon print
line<00:14:08.710><c> great</c>

00:14:09.600 --> 00:14:09.610 align:start position:0%
line great
 

00:14:09.610 --> 00:14:11.430 align:start position:0%
line great
functionally<00:14:10.570><c> equivalent</c><00:14:10.600><c> to</c><00:14:11.110><c> the</c><00:14:11.230><c> one</c><00:14:11.350><c> above</c>

00:14:11.430 --> 00:14:11.440 align:start position:0%
functionally equivalent to the one above
 

00:14:11.440 --> 00:14:13.920 align:start position:0%
functionally equivalent to the one above
and<00:14:11.950><c> we</c><00:14:12.550><c> could</c><00:14:12.700><c> also</c><00:14:12.820><c> do</c><00:14:13.600><c> it</c><00:14:13.720><c> with</c><00:14:13.810><c> an</c>

00:14:13.920 --> 00:14:13.930 align:start position:0%
and we could also do it with an
 

00:14:13.930 --> 00:14:16.380 align:start position:0%
and we could also do it with an
anonymous<00:14:14.290><c> in</c><00:14:14.380><c> a</c><00:14:14.440><c> class</c><00:14:14.650><c> bit</c><00:14:15.580><c> more</c><00:14:15.940><c> verbose</c>

00:14:16.380 --> 00:14:16.390 align:start position:0%
anonymous in a class bit more verbose
 

00:14:16.390 --> 00:14:18.630 align:start position:0%
anonymous in a class bit more verbose
but<00:14:17.020><c> exactly</c><00:14:17.290><c> the</c><00:14:17.560><c> same</c><00:14:17.710><c> thing</c><00:14:18.010><c> so</c><00:14:18.340><c> now</c><00:14:18.490><c> when</c>

00:14:18.630 --> 00:14:18.640 align:start position:0%
but exactly the same thing so now when
 

00:14:18.640 --> 00:14:20.010 align:start position:0%
but exactly the same thing so now when
we're<00:14:18.940><c> saying</c><00:14:19.270><c> we</c><00:14:19.450><c> have</c><00:14:19.600><c> to</c><00:14:19.690><c> create</c><00:14:19.900><c> a</c><00:14:19.990><c> new</c>

00:14:20.010 --> 00:14:20.020 align:start position:0%
we're saying we have to create a new
 

00:14:20.020 --> 00:14:21.720 align:start position:0%
we're saying we have to create a new
instance<00:14:20.530><c> of</c><00:14:20.620><c> a</c><00:14:20.710><c> consumer</c><00:14:21.130><c> of</c><00:14:21.220><c> type</c><00:14:21.430><c> string</c>

00:14:21.720 --> 00:14:21.730 align:start position:0%
instance of a consumer of type string
 

00:14:21.730 --> 00:14:23.700 align:start position:0%
instance of a consumer of type string
and<00:14:22.000><c> we're</c><00:14:22.630><c> going</c><00:14:22.750><c> to</c><00:14:22.780><c> override</c><00:14:23.110><c> the</c><00:14:23.380><c> accept</c>

00:14:23.700 --> 00:14:23.710 align:start position:0%
and we're going to override the accept
 

00:14:23.710 --> 00:14:25.620 align:start position:0%
and we're going to override the accept
method<00:14:23.770><c> and</c><00:14:24.430><c> we're</c><00:14:24.820><c> going</c><00:14:24.940><c> to</c><00:14:24.970><c> print</c><00:14:25.150><c> out</c><00:14:25.300><c> the</c>

00:14:25.620 --> 00:14:25.630 align:start position:0%
method and we're going to print out the
 

00:14:25.630 --> 00:14:27.540 align:start position:0%
method and we're going to print out the
word<00:14:25.750><c> right</c><00:14:26.320><c> the</c><00:14:27.100><c> important</c><00:14:27.400><c> thing</c><00:14:27.520><c> about</c>

00:14:27.540 --> 00:14:27.550 align:start position:0%
word right the important thing about
 

00:14:27.550 --> 00:14:29.280 align:start position:0%
word right the important thing about
these<00:14:27.760><c> is</c><00:14:27.970><c> that</c><00:14:28.180><c> none</c><00:14:28.600><c> of</c><00:14:28.630><c> these</c><00:14:28.750><c> do</c><00:14:28.960><c> anything</c>

00:14:29.280 --> 00:14:29.290 align:start position:0%
these is that none of these do anything
 

00:14:29.290 --> 00:14:31.350 align:start position:0%
these is that none of these do anything
different<00:14:29.710><c> they</c><00:14:30.040><c> all</c><00:14:30.070><c> do</c><00:14:30.460><c> exactly</c><00:14:30.580><c> the</c><00:14:31.180><c> same</c>

00:14:31.350 --> 00:14:31.360 align:start position:0%
different they all do exactly the same
 

00:14:31.360 --> 00:14:36.290 align:start position:0%
different they all do exactly the same
thing<00:14:31.840><c> but</c><00:14:32.350><c> how</c><00:14:32.530><c> they</c><00:14:32.680><c> compile</c><00:14:33.130><c> is</c><00:14:33.610><c> different</c>

00:14:36.290 --> 00:14:36.300 align:start position:0%
thing but how they compile is different
 

00:14:36.300 --> 00:14:38.460 align:start position:0%
thing but how they compile is different
so<00:14:37.300><c> we</c><00:14:37.330><c> look</c><00:14:37.510><c> at</c><00:14:37.570><c> anonymous</c><00:14:37.960><c> in</c><00:14:38.050><c> the</c><00:14:38.110><c> classes</c>

00:14:38.460 --> 00:14:38.470 align:start position:0%
so we look at anonymous in the classes
 

00:14:38.470 --> 00:14:40.920 align:start position:0%
so we look at anonymous in the classes
the<00:14:39.070><c> key</c><00:14:39.250><c> thing</c><00:14:39.430><c> here</c><00:14:39.460><c> as</c><00:14:39.880><c> the</c><00:14:40.570><c> name</c><00:14:40.720><c> suggests</c>

00:14:40.920 --> 00:14:40.930 align:start position:0%
the key thing here as the name suggests
 

00:14:40.930 --> 00:14:43.620 align:start position:0%
the key thing here as the name suggests
is<00:14:41.440><c> with</c><00:14:42.310><c> that</c><00:14:42.580><c> we're</c><00:14:42.730><c> dealing</c><00:14:42.850><c> with</c><00:14:43.030><c> a</c><00:14:43.150><c> class</c>

00:14:43.620 --> 00:14:43.630 align:start position:0%
is with that we're dealing with a class
 

00:14:43.630 --> 00:14:46.410 align:start position:0%
is with that we're dealing with a class
so<00:14:44.440><c> when</c><00:14:44.680><c> that</c><00:14:44.950><c> code</c><00:14:45.190><c> gets</c><00:14:45.370><c> compiled</c><00:14:45.790><c> the</c>

00:14:46.410 --> 00:14:46.420 align:start position:0%
so when that code gets compiled the
 

00:14:46.420 --> 00:14:48.720 align:start position:0%
so when that code gets compiled the
compiler<00:14:46.900><c> looks</c><00:14:47.590><c> at</c><00:14:47.740><c> what</c><00:14:47.860><c> you've</c><00:14:47.980><c> done</c><00:14:48.160><c> and</c>

00:14:48.720 --> 00:14:48.730 align:start position:0%
compiler looks at what you've done and
 

00:14:48.730 --> 00:14:50.970 align:start position:0%
compiler looks at what you've done and
it<00:14:48.850><c> says</c><00:14:49.060><c> ah</c><00:14:49.210><c> you</c><00:14:50.020><c> are</c><00:14:50.170><c> trying</c><00:14:50.620><c> to</c><00:14:50.770><c> represent</c>

00:14:50.970 --> 00:14:50.980 align:start position:0%
it says ah you are trying to represent
 

00:14:50.980 --> 00:14:53.970 align:start position:0%
it says ah you are trying to represent
an<00:14:51.520><c> interface</c><00:14:51.940><c> but</c><00:14:52.930><c> you</c><00:14:53.530><c> can't</c><00:14:53.800><c> do</c><00:14:53.950><c> that</c>

00:14:53.970 --> 00:14:53.980 align:start position:0%
an interface but you can't do that
 

00:14:53.980 --> 00:14:56.250 align:start position:0%
an interface but you can't do that
because<00:14:54.370><c> you</c><00:14:54.670><c> need</c><00:14:54.850><c> a</c><00:14:54.880><c> concrete</c><00:14:55.330><c> class</c><00:14:55.630><c> in</c>

00:14:56.250 --> 00:14:56.260 align:start position:0%
because you need a concrete class in
 

00:14:56.260 --> 00:14:58.350 align:start position:0%
because you need a concrete class in
order<00:14:56.590><c> to</c><00:14:56.800><c> generate</c><00:14:56.980><c> an</c><00:14:57.280><c> object</c><00:14:57.310><c> of</c><00:14:57.850><c> that</c><00:14:58.090><c> type</c>

00:14:58.350 --> 00:14:58.360 align:start position:0%
order to generate an object of that type
 

00:14:58.360 --> 00:15:01.260 align:start position:0%
order to generate an object of that type
so<00:14:59.260><c> the</c><00:14:59.380><c> compiler</c><00:14:59.770><c> will</c><00:15:00.340><c> generate</c><00:15:00.370><c> a</c><00:15:01.030><c> class</c>

00:15:01.260 --> 00:15:01.270 align:start position:0%
so the compiler will generate a class
 

00:15:01.270 --> 00:15:03.870 align:start position:0%
so the compiler will generate a class
for<00:15:01.570><c> you</c><00:15:01.600><c> and</c><00:15:01.900><c> anonymous</c><00:15:02.530><c> class</c><00:15:02.770><c> and</c><00:15:03.130><c> if</c>

00:15:03.870 --> 00:15:03.880 align:start position:0%
for you and anonymous class and if
 

00:15:03.880 --> 00:15:06.000 align:start position:0%
for you and anonymous class and if
you've<00:15:04.030><c> got</c><00:15:04.180><c> a</c><00:15:04.210><c> class</c><00:15:04.450><c> like</c><00:15:04.720><c> foo</c><00:15:05.080><c> then</c><00:15:05.680><c> you're</c>

00:15:06.000 --> 00:15:06.010 align:start position:0%
you've got a class like foo then you're
 

00:15:06.010 --> 00:15:07.290 align:start position:0%
you've got a class like foo then you're
going<00:15:06.130><c> to</c><00:15:06.190><c> see</c><00:15:06.340><c> a</c><00:15:06.370><c> class</c><00:15:06.700><c> which</c><00:15:07.000><c> is</c><00:15:07.120><c> named</c>

00:15:07.290 --> 00:15:07.300 align:start position:0%
going to see a class which is named
 

00:15:07.300 --> 00:15:09.060 align:start position:0%
going to see a class which is named
something<00:15:07.630><c> like</c><00:15:07.780><c> food</c><00:15:08.020><c> dollar</c><00:15:08.260><c> 1</c><00:15:08.560><c> to</c>

00:15:09.060 --> 00:15:09.070 align:start position:0%
something like food dollar 1 to
 

00:15:09.070 --> 00:15:10.680 align:start position:0%
something like food dollar 1 to
represent<00:15:09.250><c> the</c><00:15:09.580><c> anonymous</c><00:15:10.000><c> in</c><00:15:10.180><c> a</c><00:15:10.480><c> class</c>

00:15:10.680 --> 00:15:10.690 align:start position:0%
represent the anonymous in a class
 

00:15:10.690 --> 00:15:13.860 align:start position:0%
represent the anonymous in a class
that's<00:15:10.960><c> being</c><00:15:11.020><c> used</c><00:15:11.380><c> by</c><00:15:11.650><c> food</c><00:15:12.780><c> problem</c><00:15:13.780><c> with</c>

00:15:13.860 --> 00:15:13.870 align:start position:0%
that's being used by food problem with
 

00:15:13.870 --> 00:15:15.120 align:start position:0%
that's being used by food problem with
this<00:15:13.960><c> is</c><00:15:14.110><c> you</c><00:15:14.260><c> end</c><00:15:14.530><c> up</c><00:15:14.590><c> with</c><00:15:14.740><c> what's</c><00:15:14.980><c> called</c>

00:15:15.120 --> 00:15:15.130 align:start position:0%
this is you end up with what's called
 

00:15:15.130 --> 00:15:16.800 align:start position:0%
this is you end up with what's called
type<00:15:15.400><c> of</c><00:15:15.550><c> pollution</c><00:15:15.760><c> so</c><00:15:16.390><c> you're</c><00:15:16.510><c> generating</c>

00:15:16.800 --> 00:15:16.810 align:start position:0%
type of pollution so you're generating
 

00:15:16.810 --> 00:15:18.900 align:start position:0%
type of pollution so you're generating
lots<00:15:17.140><c> more</c><00:15:17.230><c> types</c><00:15:17.590><c> in</c><00:15:17.950><c> your</c><00:15:18.010><c> application</c><00:15:18.730><c> than</c>

00:15:18.900 --> 00:15:18.910 align:start position:0%
lots more types in your application than
 

00:15:18.910 --> 00:15:20.760 align:start position:0%
lots more types in your application than
you<00:15:19.060><c> really</c><00:15:19.360><c> need</c><00:15:19.600><c> what</c><00:15:20.260><c> you</c><00:15:20.350><c> really</c><00:15:20.500><c> want</c><00:15:20.710><c> is</c>

00:15:20.760 --> 00:15:20.770 align:start position:0%
you really need what you really want is
 

00:15:20.770 --> 00:15:23.670 align:start position:0%
you really need what you really want is
a<00:15:20.830><c> function</c><00:15:21.600><c> the</c><00:15:22.600><c> other</c><00:15:22.720><c> drawback</c><00:15:23.140><c> to</c><00:15:23.290><c> this</c><00:15:23.440><c> is</c>

00:15:23.670 --> 00:15:23.680 align:start position:0%
a function the other drawback to this is
 

00:15:23.680 --> 00:15:25.810 align:start position:0%
a function the other drawback to this is
that<00:15:24.190><c> because</c><00:15:24.430><c> it</c><00:15:24.550><c> is</c><00:15:24.640><c> a</c><00:15:24.760><c> class</c>

00:15:25.810 --> 00:15:25.820 align:start position:0%
that because it is a class
 

00:15:25.820 --> 00:15:27.880 align:start position:0%
that because it is a class
at<00:15:25.910><c> runtime</c><00:15:26.210><c> you</c><00:15:26.720><c> have</c><00:15:27.170><c> to</c><00:15:27.320><c> load</c><00:15:27.470><c> that</c><00:15:27.620><c> class</c>

00:15:27.880 --> 00:15:27.890 align:start position:0%
at runtime you have to load that class
 

00:15:27.890 --> 00:15:29.470 align:start position:0%
at runtime you have to load that class
so<00:15:28.340><c> there's</c><00:15:28.520><c> an</c><00:15:28.610><c> overhead</c><00:15:28.940><c> in</c><00:15:29.150><c> terms</c><00:15:29.180><c> of</c>

00:15:29.470 --> 00:15:29.480 align:start position:0%
so there's an overhead in terms of
 

00:15:29.480 --> 00:15:31.120 align:start position:0%
so there's an overhead in terms of
loading<00:15:29.630><c> the</c><00:15:29.840><c> class</c><00:15:30.050><c> there's</c><00:15:30.530><c> an</c><00:15:30.620><c> overhead</c><00:15:30.950><c> in</c>

00:15:31.120 --> 00:15:31.130 align:start position:0%
loading the class there's an overhead in
 

00:15:31.130 --> 00:15:32.620 align:start position:0%
loading the class there's an overhead in
terms<00:15:31.160><c> of</c><00:15:31.460><c> initializing</c><00:15:31.790><c> that</c><00:15:32.090><c> class</c><00:15:32.330><c> and</c>

00:15:32.620 --> 00:15:32.630 align:start position:0%
terms of initializing that class and
 

00:15:32.630 --> 00:15:35.080 align:start position:0%
terms of initializing that class and
then<00:15:33.260><c> from</c><00:15:33.650><c> the</c><00:15:33.770><c> point</c><00:15:33.980><c> of</c><00:15:34.070><c> view</c><00:15:34.130><c> of</c><00:15:34.460><c> using</c><00:15:34.910><c> it</c>

00:15:35.080 --> 00:15:35.090 align:start position:0%
then from the point of view of using it
 

00:15:35.090 --> 00:15:37.930 align:start position:0%
then from the point of view of using it
it<00:15:35.870><c> has</c><00:15:36.050><c> to</c><00:15:36.080><c> be</c><00:15:36.200><c> instantiated</c><00:15:36.620><c> that</c><00:15:37.610><c> could</c>

00:15:37.930 --> 00:15:37.940 align:start position:0%
it has to be instantiated that could
 

00:15:37.940 --> 00:15:40.000 align:start position:0%
it has to be instantiated that could
place<00:15:38.210><c> an</c><00:15:38.420><c> additional</c><00:15:38.540><c> load</c><00:15:38.990><c> on</c><00:15:39.230><c> your</c><00:15:39.560><c> heap</c>

00:15:40.000 --> 00:15:40.010 align:start position:0%
place an additional load on your heap
 

00:15:40.010 --> 00:15:41.980 align:start position:0%
place an additional load on your heap
space<00:15:40.280><c> it</c><00:15:40.880><c> could</c><00:15:41.060><c> place</c><00:15:41.300><c> an</c><00:15:41.450><c> additional</c><00:15:41.540><c> load</c>

00:15:41.980 --> 00:15:41.990 align:start position:0%
space it could place an additional load
 

00:15:41.990 --> 00:15:43.960 align:start position:0%
space it could place an additional load
on<00:15:42.020><c> your</c><00:15:42.440><c> garbage</c><00:15:43.130><c> collector</c><00:15:43.580><c> because</c><00:15:43.850><c> you're</c>

00:15:43.960 --> 00:15:43.970 align:start position:0%
on your garbage collector because you're
 

00:15:43.970 --> 00:15:47.680 align:start position:0%
on your garbage collector because you're
generating<00:15:44.300><c> objects</c><00:15:45.260><c> and</c><00:15:45.440><c> that</c><00:15:46.040><c> might</c><00:15:46.690><c> result</c>

00:15:47.680 --> 00:15:47.690 align:start position:0%
generating objects and that might result
 

00:15:47.690 --> 00:15:49.150 align:start position:0%
generating objects and that might result
in<00:15:47.870><c> more</c><00:15:48.050><c> garbage</c><00:15:48.290><c> collection</c><00:15:48.740><c> you</c><00:15:48.860><c> actually</c>

00:15:49.150 --> 00:15:49.160 align:start position:0%
in more garbage collection you actually
 

00:15:49.160 --> 00:15:50.620 align:start position:0%
in more garbage collection you actually
want<00:15:49.370><c> so</c><00:15:49.610><c> there</c><00:15:50.210><c> are</c><00:15:50.270><c> a</c><00:15:50.300><c> number</c><00:15:50.330><c> of</c><00:15:50.510><c> things</c>

00:15:50.620 --> 00:15:50.630 align:start position:0%
want so there are a number of things
 

00:15:50.630 --> 00:15:52.750 align:start position:0%
want so there are a number of things
where<00:15:50.930><c> anonymous</c><00:15:51.380><c> inner</c><00:15:51.560><c> classes</c><00:15:51.770><c> are</c><00:15:52.250><c> not</c>

00:15:52.750 --> 00:15:52.760 align:start position:0%
where anonymous inner classes are not
 

00:15:52.760 --> 00:15:56.500 align:start position:0%
where anonymous inner classes are not
necessarily<00:15:53.270><c> the</c><00:15:53.540><c> best</c><00:15:53.630><c> way</c><00:15:53.780><c> of</c><00:15:53.870><c> doing</c><00:15:54.050><c> it</c><00:15:55.510><c> if</c>

00:15:56.500 --> 00:15:56.510 align:start position:0%
necessarily the best way of doing it if
 

00:15:56.510 --> 00:15:57.490 align:start position:0%
necessarily the best way of doing it if
you<00:15:56.630><c> look</c><00:15:56.690><c> at</c><00:15:56.810><c> the</c><00:15:56.870><c> lambda</c><00:15:57.050><c> expressions</c>

00:15:57.490 --> 00:15:57.500 align:start position:0%
you look at the lambda expressions
 

00:15:57.500 --> 00:15:59.400 align:start position:0%
you look at the lambda expressions
because<00:15:58.190><c> of</c><00:15:58.340><c> this</c><00:15:58.460><c> functional</c><00:15:58.850><c> equivalence</c>

00:15:59.400 --> 00:15:59.410 align:start position:0%
because of this functional equivalence
 

00:15:59.410 --> 00:16:02.440 align:start position:0%
because of this functional equivalence
you<00:16:00.410><c> could</c><00:16:00.710><c> simply</c><00:16:01.610><c> implement</c><00:16:02.090><c> a</c><00:16:02.210><c> lambda</c>

00:16:02.440 --> 00:16:02.450 align:start position:0%
you could simply implement a lambda
 

00:16:02.450 --> 00:16:04.720 align:start position:0%
you could simply implement a lambda
expression<00:16:03.050><c> as</c><00:16:03.200><c> the</c><00:16:03.860><c> equivalent</c><00:16:04.100><c> anonymous</c>

00:16:04.720 --> 00:16:04.730 align:start position:0%
expression as the equivalent anonymous
 

00:16:04.730 --> 00:16:06.820 align:start position:0%
expression as the equivalent anonymous
inner<00:16:04.880><c> class</c><00:16:05.090><c> so</c><00:16:05.480><c> the</c><00:16:05.570><c> compiler</c><00:16:05.840><c> could</c><00:16:06.620><c> take</c>

00:16:06.820 --> 00:16:06.830 align:start position:0%
inner class so the compiler could take
 

00:16:06.830 --> 00:16:08.740 align:start position:0%
inner class so the compiler could take
that<00:16:06.980><c> lambda</c><00:16:07.190><c> expression</c><00:16:07.730><c> convert</c><00:16:08.300><c> it</c><00:16:08.480><c> into</c>

00:16:08.740 --> 00:16:08.750 align:start position:0%
that lambda expression convert it into
 

00:16:08.750 --> 00:16:10.480 align:start position:0%
that lambda expression convert it into
an<00:16:08.990><c> anonymous</c><00:16:09.350><c> in</c><00:16:09.470><c> a</c><00:16:09.530><c> class</c><00:16:09.740><c> piece</c><00:16:10.160><c> of</c><00:16:10.280><c> code</c>

00:16:10.480 --> 00:16:10.490 align:start position:0%
an anonymous in a class piece of code
 

00:16:10.490 --> 00:16:12.580 align:start position:0%
an anonymous in a class piece of code
and<00:16:10.880><c> then</c><00:16:11.150><c> compile</c><00:16:11.570><c> that</c><00:16:11.600><c> in</c><00:16:12.020><c> exactly</c><00:16:12.440><c> the</c>

00:16:12.580 --> 00:16:12.590 align:start position:0%
and then compile that in exactly the
 

00:16:12.590 --> 00:16:14.830 align:start position:0%
and then compile that in exactly the
same<00:16:12.770><c> way</c><00:16:12.950><c> that</c><00:16:13.130><c> you</c><00:16:13.220><c> do</c><00:16:13.340><c> in</c><00:16:13.550><c> jdk</c><00:16:14.240><c> 7</c><00:16:14.600><c> and</c>

00:16:14.830 --> 00:16:14.840 align:start position:0%
same way that you do in jdk 7 and
 

00:16:14.840 --> 00:16:17.230 align:start position:0%
same way that you do in jdk 7 and
earlier<00:16:15.110><c> and</c><00:16:16.100><c> in</c><00:16:16.220><c> fact</c><00:16:16.430><c> if</c><00:16:16.700><c> you</c><00:16:16.820><c> look</c><00:16:16.970><c> at</c><00:16:17.060><c> the</c>

00:16:17.230 --> 00:16:17.240 align:start position:0%
earlier and in fact if you look at the
 

00:16:17.240 --> 00:16:19.270 align:start position:0%
earlier and in fact if you look at the
the<00:16:17.600><c> way</c><00:16:17.720><c> that</c><00:16:17.750><c> lambdas</c><00:16:18.500><c> were</c><00:16:18.620><c> developed</c><00:16:19.010><c> the</c>

00:16:19.270 --> 00:16:19.280 align:start position:0%
the way that lambdas were developed the
 

00:16:19.280 --> 00:16:21.490 align:start position:0%
the way that lambdas were developed the
first<00:16:19.580><c> implementation</c><00:16:19.850><c> did</c><00:16:20.690><c> exactly</c><00:16:21.080><c> that</c>

00:16:21.490 --> 00:16:21.500 align:start position:0%
first implementation did exactly that
 

00:16:21.500 --> 00:16:23.770 align:start position:0%
first implementation did exactly that
so<00:16:21.830><c> you've</c><00:16:21.980><c> seen</c><00:16:22.160><c> tactic</c><00:16:22.550><c> sugar</c><00:16:22.850><c> lambda</c>

00:16:23.770 --> 00:16:23.780 align:start position:0%
so you've seen tactic sugar lambda
 

00:16:23.780 --> 00:16:25.510 align:start position:0%
so you've seen tactic sugar lambda
expression<00:16:24.200><c> convert</c><00:16:24.710><c> it</c><00:16:24.830><c> to</c><00:16:24.860><c> anonymous</c><00:16:25.340><c> in</c><00:16:25.460><c> a</c>

00:16:25.510 --> 00:16:25.520 align:start position:0%
expression convert it to anonymous in a
 

00:16:25.520 --> 00:16:27.480 align:start position:0%
expression convert it to anonymous in a
class<00:16:25.700><c> compile</c><00:16:26.210><c> it</c><00:16:26.360><c> off</c><00:16:26.480><c> you</c><00:16:26.720><c> go</c>

00:16:27.480 --> 00:16:27.490 align:start position:0%
class compile it off you go
 

00:16:27.490 --> 00:16:29.650 align:start position:0%
class compile it off you go
probably<00:16:28.490><c> doing</c><00:16:28.730><c> that</c><00:16:28.760><c> way</c><00:16:29.150><c> is</c><00:16:29.420><c> you</c><00:16:29.570><c> are</c>

00:16:29.650 --> 00:16:29.660 align:start position:0%
probably doing that way is you are
 

00:16:29.660 --> 00:16:31.990 align:start position:0%
probably doing that way is you are
forcing<00:16:30.230><c> an</c><00:16:30.440><c> inner</c><00:16:30.650><c> class</c><00:16:30.800><c> on</c><00:16:31.280><c> your</c><00:16:31.370><c> code</c>

00:16:31.990 --> 00:16:32.000 align:start position:0%
forcing an inner class on your code
 

00:16:32.000 --> 00:16:33.670 align:start position:0%
forcing an inner class on your code
where<00:16:32.300><c> you</c><00:16:32.390><c> don't</c><00:16:32.570><c> actually</c><00:16:32.720><c> want</c><00:16:33.050><c> it</c><00:16:33.260><c> what</c>

00:16:33.670 --> 00:16:33.680 align:start position:0%
where you don't actually want it what
 

00:16:33.680 --> 00:16:36.730 align:start position:0%
where you don't actually want it what
you<00:16:33.800><c> really</c><00:16:33.980><c> want</c><00:16:34.220><c> is</c><00:16:34.460><c> a</c><00:16:34.790><c> function</c><00:16:35.390><c> and</c><00:16:35.740><c> the</c>

00:16:36.730 --> 00:16:36.740 align:start position:0%
you really want is a function and the
 

00:16:36.740 --> 00:16:38.380 align:start position:0%
you really want is a function and the
decision<00:16:37.130><c> was</c><00:16:37.220><c> obviously</c><00:16:37.520><c> made</c><00:16:37.700><c> not</c><00:16:38.030><c> to</c><00:16:38.270><c> him</c>

00:16:38.380 --> 00:16:38.390 align:start position:0%
decision was obviously made not to him
 

00:16:38.390 --> 00:16:41.350 align:start position:0%
decision was obviously made not to him
not<00:16:39.320><c> to</c><00:16:39.440><c> have</c><00:16:39.950><c> a</c><00:16:39.980><c> function</c><00:16:40.670><c> type</c><00:16:40.880><c> in</c><00:16:41.120><c> the</c>

00:16:41.350 --> 00:16:41.360 align:start position:0%
not to have a function type in the
 

00:16:41.360 --> 00:16:43.480 align:start position:0%
not to have a function type in the
language<00:16:41.780><c> but</c><00:16:42.530><c> it</c><00:16:42.770><c> would</c><00:16:42.890><c> be</c><00:16:43.010><c> nice</c><00:16:43.190><c> if</c><00:16:43.220><c> we</c>

00:16:43.480 --> 00:16:43.490 align:start position:0%
language but it would be nice if we
 

00:16:43.490 --> 00:16:46.020 align:start position:0%
language but it would be nice if we
didn't<00:16:43.730><c> have</c><00:16:43.910><c> all</c><00:16:43.940><c> the</c><00:16:44.330><c> extra</c><00:16:45.140><c> work</c><00:16:45.440><c> involved</c>

00:16:46.020 --> 00:16:46.030 align:start position:0%
didn't have all the extra work involved
 

00:16:46.030 --> 00:16:48.310 align:start position:0%
didn't have all the extra work involved
trying<00:16:47.030><c> to</c><00:16:47.150><c> make</c><00:16:47.330><c> a</c><00:16:47.360><c> function</c><00:16:47.720><c> type</c><00:16:47.900><c> but</c><00:16:48.200><c> then</c>

00:16:48.310 --> 00:16:48.320 align:start position:0%
trying to make a function type but then
 

00:16:48.320 --> 00:16:52.570 align:start position:0%
trying to make a function type but then
ending<00:16:48.620><c> up</c><00:16:48.710><c> with</c><00:16:48.920><c> lots</c><00:16:49.220><c> of</c><00:16:49.280><c> extra</c><00:16:49.460><c> classes</c><00:16:51.580><c> so</c>

00:16:52.570 --> 00:16:52.580 align:start position:0%
ending up with lots of extra classes so
 

00:16:52.580 --> 00:16:53.590 align:start position:0%
ending up with lots of extra classes so
there<00:16:52.730><c> has</c><00:16:52.820><c> to</c><00:16:52.850><c> be</c><00:16:52.940><c> a</c><00:16:53.000><c> better</c><00:16:53.150><c> way</c><00:16:53.300><c> of</c><00:16:53.330><c> doing</c>

00:16:53.590 --> 00:16:53.600 align:start position:0%
there has to be a better way of doing
 

00:16:53.600 --> 00:16:55.930 align:start position:0%
there has to be a better way of doing
this<00:16:53.810><c> and</c><00:16:54.110><c> there</c><00:16:54.380><c> is</c><00:16:54.410><c> and</c><00:16:55.250><c> the</c><00:16:55.370><c> way</c><00:16:55.490><c> that</c><00:16:55.700><c> it's</c>

00:16:55.930 --> 00:16:55.940 align:start position:0%
this and there is and the way that it's
 

00:16:55.940 --> 00:16:59.530 align:start position:0%
this and there is and the way that it's
done<00:16:56.150><c> in</c><00:16:56.450><c> jdk</c><00:16:57.170><c> 8</c><00:16:57.410><c> is</c><00:16:57.730><c> through</c><00:16:58.730><c> the</c><00:16:58.880><c> use</c><00:16:58.910><c> of</c><00:16:59.060><c> the</c>

00:16:59.530 --> 00:16:59.540 align:start position:0%
done in jdk 8 is through the use of the
 

00:16:59.540 --> 00:17:01.870 align:start position:0%
done in jdk 8 is through the use of the
invokedynamic<00:16:59.920><c> bytecode</c><00:17:00.950><c> and</c><00:17:01.280><c> method</c>

00:17:01.870 --> 00:17:01.880 align:start position:0%
invokedynamic bytecode and method
 

00:17:01.880 --> 00:17:04.689 align:start position:0%
invokedynamic bytecode and method
handles<00:17:02.740><c> the</c><00:17:03.740><c> reason</c><00:17:03.950><c> behind</c><00:17:04.070><c> this</c><00:17:04.339><c> is</c><00:17:04.640><c> that</c>

00:17:04.689 --> 00:17:04.699 align:start position:0%
handles the reason behind this is that
 

00:17:04.699 --> 00:17:06.640 align:start position:0%
handles the reason behind this is that
if<00:17:05.660><c> you</c><00:17:05.750><c> look</c><00:17:05.870><c> at</c><00:17:05.930><c> the</c><00:17:06.020><c> history</c><00:17:06.350><c> of</c>

00:17:06.640 --> 00:17:06.650 align:start position:0%
if you look at the history of
 

00:17:06.650 --> 00:17:08.410 align:start position:0%
if you look at the history of
invokedynamic<00:17:07.310><c> this</c><00:17:07.790><c> is</c><00:17:07.880><c> the</c><00:17:07.970><c> first</c><00:17:08.209><c> byte</c>

00:17:08.410 --> 00:17:08.420 align:start position:0%
invokedynamic this is the first byte
 

00:17:08.420 --> 00:17:11.679 align:start position:0%
invokedynamic this is the first byte
code<00:17:08.689><c> that</c><00:17:08.959><c> was</c><00:17:09.020><c> introduced</c><00:17:09.530><c> in</c><00:17:09.890><c> Java</c><00:17:10.880><c> since</c>

00:17:11.679 --> 00:17:11.689 align:start position:0%
code that was introduced in Java since
 

00:17:11.689 --> 00:17:15.579 align:start position:0%
code that was introduced in Java since
it<00:17:11.839><c> started</c><00:17:12.640><c> and</c><00:17:13.640><c> what</c><00:17:13.820><c> it</c><00:17:13.939><c> was</c><00:17:14.060><c> goal</c><00:17:14.420><c> was</c><00:17:14.720><c> was</c>

00:17:15.579 --> 00:17:15.589 align:start position:0%
it started and what it was goal was was
 

00:17:15.589 --> 00:17:17.800 align:start position:0%
it started and what it was goal was was
to<00:17:15.890><c> help</c><00:17:16.400><c> languages</c><00:17:17.329><c> that</c><00:17:17.480><c> were</c><00:17:17.600><c> being</c>

00:17:17.800 --> 00:17:17.810 align:start position:0%
to help languages that were being
 

00:17:17.810 --> 00:17:19.870 align:start position:0%
to help languages that were being
developed<00:17:18.020><c> and</c><00:17:18.439><c> compiled</c><00:17:19.130><c> into</c><00:17:19.310><c> byte</c><00:17:19.550><c> codes</c>

00:17:19.870 --> 00:17:19.880 align:start position:0%
developed and compiled into byte codes
 

00:17:19.880 --> 00:17:23.319 align:start position:0%
developed and compiled into byte codes
that<00:17:20.420><c> weren't</c><00:17:20.810><c> statically</c><00:17:21.350><c> typed</c><00:17:21.670><c> so</c><00:17:22.670><c> if</c><00:17:23.209><c> you</c>

00:17:23.319 --> 00:17:23.329 align:start position:0%
that weren't statically typed so if you
 

00:17:23.329 --> 00:17:25.360 align:start position:0%
that weren't statically typed so if you
look<00:17:23.449><c> at</c><00:17:23.510><c> languages</c><00:17:23.930><c> like</c><00:17:24.079><c> JRuby</c><00:17:24.860><c> for</c><00:17:24.980><c> example</c>

00:17:25.360 --> 00:17:25.370 align:start position:0%
look at languages like JRuby for example
 

00:17:25.370 --> 00:17:27.939 align:start position:0%
look at languages like JRuby for example
not<00:17:25.579><c> statically</c><00:17:26.089><c> typed</c><00:17:26.329><c> so</c><00:17:27.199><c> you</c><00:17:27.620><c> can</c><00:17:27.770><c> change</c>

00:17:27.939 --> 00:17:27.949 align:start position:0%
not statically typed so you can change
 

00:17:27.949 --> 00:17:30.250 align:start position:0%
not statically typed so you can change
the<00:17:28.370><c> the</c><00:17:28.700><c> types</c><00:17:28.970><c> of</c><00:17:29.150><c> parameters</c><00:17:29.360><c> and</c><00:17:29.690><c> return</c>

00:17:30.250 --> 00:17:30.260 align:start position:0%
the the types of parameters and return
 

00:17:30.260 --> 00:17:33.940 align:start position:0%
the the types of parameters and return
types<00:17:30.560><c> of</c><00:17:30.710><c> methods</c><00:17:31.070><c> at</c><00:17:31.190><c> runtime</c><00:17:31.430><c> and</c><00:17:32.710><c> in</c><00:17:33.710><c> order</c>

00:17:33.940 --> 00:17:33.950 align:start position:0%
types of methods at runtime and in order
 

00:17:33.950 --> 00:17:35.730 align:start position:0%
types of methods at runtime and in order
to<00:17:34.040><c> do</c><00:17:34.160><c> that</c><00:17:34.370><c> with</c><00:17:34.820><c> a</c><00:17:34.850><c> statically</c><00:17:35.570><c> typed</c>

00:17:35.730 --> 00:17:35.740 align:start position:0%
to do that with a statically typed
 

00:17:35.740 --> 00:17:38.660 align:start position:0%
to do that with a statically typed
virtual<00:17:36.740><c> machine</c><00:17:37.040><c> instruction</c><00:17:37.790><c> set</c><00:17:38.030><c> you</c>

00:17:38.660 --> 00:17:38.670 align:start position:0%
virtual machine instruction set you
 

00:17:38.670 --> 00:17:39.980 align:start position:0%
virtual machine instruction set you
to<00:17:38.820><c> do</c><00:17:38.910><c> a</c><00:17:38.940><c> lot</c><00:17:39.090><c> of</c><00:17:39.180><c> extra</c><00:17:39.450><c> work</c><00:17:39.570><c> because</c><00:17:39.930><c> you</c>

00:17:39.980 --> 00:17:39.990 align:start position:0%
to do a lot of extra work because you
 

00:17:39.990 --> 00:17:41.420 align:start position:0%
to do a lot of extra work because you
have<00:17:40.080><c> to</c><00:17:40.170><c> test</c><00:17:40.410><c> everything</c><00:17:40.650><c> before</c><00:17:40.830><c> you</c><00:17:41.220><c> call</c>

00:17:41.420 --> 00:17:41.430 align:start position:0%
have to test everything before you call
 

00:17:41.430 --> 00:17:42.620 align:start position:0%
have to test everything before you call
the<00:17:41.610><c> method</c><00:17:41.760><c> you</c><00:17:42.030><c> have</c><00:17:42.060><c> to</c><00:17:42.150><c> determine</c><00:17:42.420><c> which</c>

00:17:42.620 --> 00:17:42.630 align:start position:0%
the method you have to determine which
 

00:17:42.630 --> 00:17:44.740 align:start position:0%
the method you have to determine which
method<00:17:42.870><c> you're</c><00:17:43.800><c> actually</c><00:17:44.040><c> gonna</c><00:17:44.130><c> be</c><00:17:44.280><c> calling</c>

00:17:44.740 --> 00:17:44.750 align:start position:0%
method you're actually gonna be calling
 

00:17:44.750 --> 00:17:47.270 align:start position:0%
method you're actually gonna be calling
so<00:17:45.750><c> invoke</c><00:17:45.960><c> dynamic</c><00:17:46.110><c> was</c><00:17:46.410><c> introduced</c><00:17:46.770><c> in</c><00:17:47.070><c> jar</c>

00:17:47.270 --> 00:17:47.280 align:start position:0%
so invoke dynamic was introduced in jar
 

00:17:47.280 --> 00:17:49.730 align:start position:0%
so invoke dynamic was introduced in jar
se7<00:17:47.850><c> to</c><00:17:47.970><c> make</c><00:17:48.180><c> life</c><00:17:48.420><c> easier</c><00:17:48.870><c> for</c><00:17:48.930><c> compiler</c>

00:17:49.730 --> 00:17:49.740 align:start position:0%
se7 to make life easier for compiler
 

00:17:49.740 --> 00:17:52.370 align:start position:0%
se7 to make life easier for compiler
writers<00:17:50.160><c> who</c><00:17:50.580><c> were</c><00:17:50.760><c> generating</c><00:17:51.450><c> code</c><00:17:51.660><c> for</c><00:17:52.080><c> the</c>

00:17:52.370 --> 00:17:52.380 align:start position:0%
writers who were generating code for the
 

00:17:52.380 --> 00:17:56.000 align:start position:0%
writers who were generating code for the
JVM<00:17:52.970><c> in</c><00:17:53.970><c> JDK</c><00:17:54.360><c> 8</c><00:17:54.600><c> he</c><00:17:55.410><c> was</c><00:17:55.440><c> actually</c><00:17:55.650><c> used</c><00:17:55.920><c> by</c>

00:17:56.000 --> 00:17:56.010 align:start position:0%
JVM in JDK 8 he was actually used by
 

00:17:56.010 --> 00:17:58.610 align:start position:0%
JVM in JDK 8 he was actually used by
Java<00:17:56.310><c> because</c><00:17:56.550><c> the</c><00:17:57.090><c> JDK</c><00:17:57.480><c> 7</c><00:17:57.780><c> Java</c><00:17:58.260><c> didn't</c><00:17:58.500><c> use</c>

00:17:58.610 --> 00:17:58.620 align:start position:0%
Java because the JDK 7 Java didn't use
 

00:17:58.620 --> 00:18:02.540 align:start position:0%
Java because the JDK 7 Java didn't use
it<00:17:58.850><c> so</c><00:17:59.850><c> in</c><00:17:59.970><c> JDK</c><00:18:00.330><c> 8</c><00:18:00.480><c> lambda</c><00:18:01.320><c> expressions</c><00:18:01.800><c> used</c>

00:18:02.540 --> 00:18:02.550 align:start position:0%
it so in JDK 8 lambda expressions used
 

00:18:02.550 --> 00:18:05.540 align:start position:0%
it so in JDK 8 lambda expressions used
the<00:18:02.760><c> invokedynamic</c><00:18:03.000><c> bytecode</c><00:18:03.780><c> and</c><00:18:04.310><c> the</c><00:18:05.310><c> idea</c>

00:18:05.540 --> 00:18:05.550 align:start position:0%
the invokedynamic bytecode and the idea
 

00:18:05.550 --> 00:18:09.500 align:start position:0%
the invokedynamic bytecode and the idea
behind<00:18:05.700><c> this</c><00:18:06.120><c> is</c><00:18:06.600><c> to</c><00:18:06.870><c> say</c><00:18:07.320><c> ok</c><00:18:07.760><c> we</c><00:18:08.760><c> want</c><00:18:08.880><c> to</c><00:18:09.240><c> do</c>

00:18:09.500 --> 00:18:09.510 align:start position:0%
behind this is to say ok we want to do
 

00:18:09.510 --> 00:18:11.030 align:start position:0%
behind this is to say ok we want to do
something<00:18:09.780><c> in</c><00:18:10.110><c> terms</c><00:18:10.380><c> of</c><00:18:10.560><c> using</c><00:18:10.860><c> lambda</c>

00:18:11.030 --> 00:18:11.040 align:start position:0%
something in terms of using lambda
 

00:18:11.040 --> 00:18:13.640 align:start position:0%
something in terms of using lambda
expression<00:18:11.610><c> but</c><00:18:11.970><c> rather</c><00:18:12.180><c> than</c><00:18:12.420><c> fixing</c><00:18:13.080><c> how</c><00:18:13.590><c> we</c>

00:18:13.640 --> 00:18:13.650 align:start position:0%
expression but rather than fixing how we
 

00:18:13.650 --> 00:18:16.870 align:start position:0%
expression but rather than fixing how we
do<00:18:14.010><c> that</c><00:18:14.570><c> into</c><00:18:15.570><c> the</c><00:18:15.810><c> compiled</c><00:18:16.350><c> byte</c><00:18:16.530><c> codes</c>

00:18:16.870 --> 00:18:16.880 align:start position:0%
do that into the compiled byte codes
 

00:18:16.880 --> 00:18:19.490 align:start position:0%
do that into the compiled byte codes
will<00:18:17.880><c> use</c><00:18:18.060><c> the</c><00:18:18.180><c> invokedynamic</c><00:18:18.420><c> bytecode</c><00:18:19.230><c> and</c>

00:18:19.490 --> 00:18:19.500 align:start position:0%
will use the invokedynamic bytecode and
 

00:18:19.500 --> 00:18:21.680 align:start position:0%
will use the invokedynamic bytecode and
we'll<00:18:19.620><c> say</c><00:18:19.800><c> leave</c><00:18:20.550><c> the</c><00:18:20.760><c> decision</c><00:18:21.150><c> about</c><00:18:21.300><c> how</c>

00:18:21.680 --> 00:18:21.690 align:start position:0%
we'll say leave the decision about how
 

00:18:21.690 --> 00:18:24.320 align:start position:0%
we'll say leave the decision about how
this<00:18:21.840><c> is</c><00:18:21.990><c> implemented</c><00:18:22.560><c> to</c><00:18:22.710><c> runtime</c><00:18:23.580><c> so</c><00:18:24.120><c> then</c>

00:18:24.320 --> 00:18:24.330 align:start position:0%
this is implemented to runtime so then
 

00:18:24.330 --> 00:18:26.930 align:start position:0%
this is implemented to runtime so then
the<00:18:24.420><c> JVM</c><00:18:24.900><c> can</c><00:18:25.680><c> decide</c><00:18:26.010><c> how</c><00:18:26.310><c> it</c><00:18:26.460><c> wants</c><00:18:26.670><c> to</c><00:18:26.790><c> do</c>

00:18:26.930 --> 00:18:26.940 align:start position:0%
the JVM can decide how it wants to do
 

00:18:26.940 --> 00:18:29.510 align:start position:0%
the JVM can decide how it wants to do
the<00:18:27.600><c> implementation</c><00:18:27.810><c> of</c><00:18:28.410><c> that</c><00:18:28.520><c> lambda</c>

00:18:29.510 --> 00:18:29.520 align:start position:0%
the implementation of that lambda
 

00:18:29.520 --> 00:18:31.430 align:start position:0%
the implementation of that lambda
expression<00:18:30.000><c> when</c><00:18:30.870><c> it's</c><00:18:30.990><c> actually</c><00:18:31.140><c> running</c>

00:18:31.430 --> 00:18:31.440 align:start position:0%
expression when it's actually running
 

00:18:31.440 --> 00:18:35.000 align:start position:0%
expression when it's actually running
and<00:18:31.770><c> that</c><00:18:32.040><c> way</c><00:18:32.220><c> if</c><00:18:33.170><c> new</c><00:18:34.170><c> methods</c><00:18:34.560><c> are</c><00:18:34.650><c> found</c><00:18:34.860><c> of</c>

00:18:35.000 --> 00:18:35.010 align:start position:0%
and that way if new methods are found of
 

00:18:35.010 --> 00:18:36.950 align:start position:0%
and that way if new methods are found of
how<00:18:35.160><c> to</c><00:18:35.220><c> do</c><00:18:35.460><c> that</c><00:18:35.640><c> better</c><00:18:36.240><c> performing</c><00:18:36.780><c> ones</c>

00:18:36.950 --> 00:18:36.960 align:start position:0%
how to do that better performing ones
 

00:18:36.960 --> 00:18:38.690 align:start position:0%
how to do that better performing ones
it's<00:18:37.410><c> very</c><00:18:37.620><c> easy</c><00:18:37.830><c> to</c><00:18:38.040><c> change</c><00:18:38.250><c> that</c><00:18:38.550><c> we</c>

00:18:38.690 --> 00:18:38.700 align:start position:0%
it's very easy to change that we
 

00:18:38.700 --> 00:18:40.130 align:start position:0%
it's very easy to change that we
couldn't<00:18:38.910><c> change</c><00:18:39.120><c> it</c><00:18:39.270><c> in</c><00:18:39.330><c> the</c><00:18:39.390><c> JVM</c><00:18:39.810><c> at</c><00:18:39.930><c> runtime</c>

00:18:40.130 --> 00:18:40.140 align:start position:0%
couldn't change it in the JVM at runtime
 

00:18:40.140 --> 00:18:41.870 align:start position:0%
couldn't change it in the JVM at runtime
rather<00:18:40.950><c> than</c><00:18:41.070><c> having</c><00:18:41.220><c> to</c><00:18:41.310><c> recompile</c><00:18:41.580><c> your</c>

00:18:41.870 --> 00:18:41.880 align:start position:0%
rather than having to recompile your
 

00:18:41.880 --> 00:18:43.340 align:start position:0%
rather than having to recompile your
code<00:18:42.090><c> and</c><00:18:42.300><c> generate</c><00:18:42.690><c> the</c><00:18:42.780><c> new</c><00:18:42.900><c> set</c><00:18:43.110><c> of</c><00:18:43.140><c> byte</c>

00:18:43.340 --> 00:18:43.350 align:start position:0%
code and generate the new set of byte
 

00:18:43.350 --> 00:18:50.300 align:start position:0%
code and generate the new set of byte
codes<00:18:46.160><c> so</c><00:18:47.720><c> as</c><00:18:48.720><c> I</c><00:18:48.840><c> tell</c><00:18:48.990><c> you</c><00:18:49.020><c> no</c><00:18:49.470><c> fixed</c><00:18:49.770><c> binary</c>

00:18:50.300 --> 00:18:50.310 align:start position:0%
codes so as I tell you no fixed binary
 

00:18:50.310 --> 00:18:52.190 align:start position:0%
codes so as I tell you no fixed binary
format<00:18:50.640><c> JVM</c><00:18:51.360><c> can</c><00:18:51.510><c> provide</c><00:18:51.720><c> a</c><00:18:51.780><c> different</c><00:18:51.930><c> way</c>

00:18:52.190 --> 00:18:52.200 align:start position:0%
format JVM can provide a different way
 

00:18:52.200 --> 00:18:54.760 align:start position:0%
format JVM can provide a different way
of<00:18:52.230><c> doing</c><00:18:52.440><c> that</c><00:18:52.680><c> now</c><00:18:52.980><c> if</c><00:18:53.730><c> we</c><00:18:53.850><c> look</c><00:18:53.970><c> at</c><00:18:54.060><c> how</c>

00:18:54.760 --> 00:18:54.770 align:start position:0%
of doing that now if we look at how
 

00:18:54.770 --> 00:18:56.660 align:start position:0%
of doing that now if we look at how
things<00:18:55.770><c> work</c><00:18:55.980><c> in</c><00:18:56.220><c> terms</c><00:18:56.370><c> of</c><00:18:56.520><c> lambda</c>

00:18:56.660 --> 00:18:56.670 align:start position:0%
things work in terms of lambda
 

00:18:56.670 --> 00:18:59.630 align:start position:0%
things work in terms of lambda
compilation<00:18:57.300><c> first</c><00:18:58.140><c> thing</c><00:18:58.290><c> is</c><00:18:58.440><c> that</c><00:18:58.680><c> the</c><00:18:59.250><c> body</c>

00:18:59.630 --> 00:18:59.640 align:start position:0%
compilation first thing is that the body
 

00:18:59.640 --> 00:19:02.570 align:start position:0%
compilation first thing is that the body
of<00:19:00.030><c> the</c><00:19:00.810><c> lambda</c><00:19:01.200><c> expression</c><00:19:01.770><c> has</c><00:19:02.370><c> to</c><00:19:02.490><c> be</c>

00:19:02.570 --> 00:19:02.580 align:start position:0%
of the lambda expression has to be
 

00:19:02.580 --> 00:19:05.120 align:start position:0%
of the lambda expression has to be
converted<00:19:03.060><c> into</c><00:19:03.270><c> a</c><00:19:03.390><c> method</c><00:19:03.810><c> now</c><00:19:04.200><c> I</c><00:19:04.440><c> know</c><00:19:04.830><c> of</c>

00:19:05.120 --> 00:19:05.130 align:start position:0%
converted into a method now I know of
 

00:19:05.130 --> 00:19:06.350 align:start position:0%
converted into a method now I know of
I've<00:19:05.400><c> already</c><00:19:05.730><c> said</c><00:19:05.880><c> you</c><00:19:06.000><c> know</c><00:19:06.120><c> it's</c><00:19:06.270><c> a</c>

00:19:06.350 --> 00:19:06.360 align:start position:0%
I've already said you know it's a
 

00:19:06.360 --> 00:19:07.760 align:start position:0%
I've already said you know it's a
function<00:19:06.540><c> it's</c><00:19:06.810><c> not</c><00:19:07.020><c> a</c><00:19:07.050><c> method</c><00:19:07.290><c> it's</c><00:19:07.590><c> not</c>

00:19:07.760 --> 00:19:07.770 align:start position:0%
function it's not a method it's not
 

00:19:07.770 --> 00:19:09.980 align:start position:0%
function it's not a method it's not
associated<00:19:08.040><c> with</c><00:19:08.340><c> the</c><00:19:08.460><c> class</c><00:19:08.640><c> but</c><00:19:09.420><c> in</c><00:19:09.720><c> order</c>

00:19:09.980 --> 00:19:09.990 align:start position:0%
associated with the class but in order
 

00:19:09.990 --> 00:19:12.680 align:start position:0%
associated with the class but in order
for<00:19:10.020><c> it</c><00:19:10.200><c> to</c><00:19:10.290><c> work</c><00:19:10.410><c> in</c><00:19:11.130><c> terms</c><00:19:11.670><c> of</c><00:19:11.880><c> being</c><00:19:12.090><c> used</c><00:19:12.360><c> by</c>

00:19:12.680 --> 00:19:12.690 align:start position:0%
for it to work in terms of being used by
 

00:19:12.690 --> 00:19:15.380 align:start position:0%
for it to work in terms of being used by
the<00:19:12.750><c> the</c><00:19:13.320><c> JVM</c><00:19:13.740><c> it</c><00:19:14.190><c> is</c><00:19:14.460><c> converted</c><00:19:15.000><c> into</c><00:19:15.240><c> a</c>

00:19:15.380 --> 00:19:15.390 align:start position:0%
the the JVM it is converted into a
 

00:19:15.390 --> 00:19:18.170 align:start position:0%
the the JVM it is converted into a
method<00:19:15.660><c> in</c><00:19:16.140><c> terms</c><00:19:16.470><c> of</c><00:19:16.620><c> its</c><00:19:16.740><c> compilation</c><00:19:17.370><c> now</c>

00:19:18.170 --> 00:19:18.180 align:start position:0%
method in terms of its compilation now
 

00:19:18.180 --> 00:19:20.590 align:start position:0%
method in terms of its compilation now
that's<00:19:18.390><c> what's</c><00:19:18.570><c> done</c><00:19:18.780><c> in</c><00:19:18.900><c> one</c><00:19:19.230><c> of</c><00:19:19.380><c> three</c><00:19:19.710><c> ways</c>

00:19:20.590 --> 00:19:20.600 align:start position:0%
that's what's done in one of three ways
 

00:19:20.600 --> 00:19:22.940 align:start position:0%
that's what's done in one of three ways
so<00:19:21.600><c> the</c><00:19:21.690><c> first</c><00:19:21.930><c> is</c><00:19:22.200><c> if</c><00:19:22.350><c> you</c><00:19:22.440><c> have</c><00:19:22.590><c> a</c><00:19:22.620><c> non</c>

00:19:22.940 --> 00:19:22.950 align:start position:0%
so the first is if you have a non
 

00:19:22.950 --> 00:19:25.850 align:start position:0%
so the first is if you have a non
capturing<00:19:23.670><c> commander</c><00:19:24.330><c> non</c><00:19:25.020><c> capturing</c><00:19:25.500><c> lambda</c>

00:19:25.850 --> 00:19:25.860 align:start position:0%
capturing commander non capturing lambda
 

00:19:25.860 --> 00:19:28.100 align:start position:0%
capturing commander non capturing lambda
is<00:19:26.100><c> one</c><00:19:26.490><c> where</c><00:19:26.700><c> you</c><00:19:26.820><c> don't</c><00:19:27.060><c> reference</c><00:19:27.600><c> any</c><00:19:27.930><c> of</c>

00:19:28.100 --> 00:19:28.110 align:start position:0%
is one where you don't reference any of
 

00:19:28.110 --> 00:19:29.900 align:start position:0%
is one where you don't reference any of
the<00:19:28.230><c> variables</c><00:19:28.740><c> from</c><00:19:29.010><c> the</c><00:19:29.250><c> surrounding</c><00:19:29.640><c> scope</c>

00:19:29.900 --> 00:19:29.910 align:start position:0%
the variables from the surrounding scope
 

00:19:29.910 --> 00:19:31.790 align:start position:0%
the variables from the surrounding scope
so<00:19:30.510><c> you</c><00:19:30.990><c> know</c><00:19:31.110><c> if</c><00:19:31.290><c> you're</c><00:19:31.440><c> doing</c><00:19:31.590><c> something</c>

00:19:31.790 --> 00:19:31.800 align:start position:0%
so you know if you're doing something
 

00:19:31.800 --> 00:19:34.070 align:start position:0%
so you know if you're doing something
like<00:19:31.920><c> print</c><00:19:32.250><c> line</c><00:19:32.400><c> and</c><00:19:32.670><c> well</c><00:19:33.510><c> that's</c><00:19:33.960><c> probably</c>

00:19:34.070 --> 00:19:34.080 align:start position:0%
like print line and well that's probably
 

00:19:34.080 --> 00:19:36.080 align:start position:0%
like print line and well that's probably
not<00:19:34.260><c> a</c><00:19:34.320><c> good</c><00:19:34.350><c> example</c><00:19:34.500><c> but</c><00:19:34.830><c> if</c><00:19:35.760><c> you</c><00:19:36.000><c> do</c>

00:19:36.080 --> 00:19:36.090 align:start position:0%
not a good example but if you do
 

00:19:36.090 --> 00:19:38.870 align:start position:0%
not a good example but if you do
something<00:19:36.300><c> doesn't</c><00:19:36.600><c> reference</c><00:19:37.790><c> variables</c><00:19:38.790><c> in</c>

00:19:38.870 --> 00:19:38.880 align:start position:0%
something doesn't reference variables in
 

00:19:38.880 --> 00:19:40.100 align:start position:0%
something doesn't reference variables in
the<00:19:38.940><c> surrounding</c><00:19:39.300><c> scope</c><00:19:39.510><c> it's</c><00:19:39.780><c> a</c><00:19:39.900><c> non</c>

00:19:40.100 --> 00:19:40.110 align:start position:0%
the surrounding scope it's a non
 

00:19:40.110 --> 00:19:43.490 align:start position:0%
the surrounding scope it's a non
capturing<00:19:40.850><c> to</c><00:19:41.850><c> do</c><00:19:42.240><c> that</c><00:19:42.420><c> it's</c><00:19:43.080><c> very</c><00:19:43.260><c> simple</c>

00:19:43.490 --> 00:19:43.500 align:start position:0%
capturing to do that it's very simple
 

00:19:43.500 --> 00:19:45.140 align:start position:0%
capturing to do that it's very simple
for<00:19:44.010><c> the</c><00:19:44.100><c> compiler</c><00:19:44.430><c> because</c><00:19:44.820><c> all</c><00:19:44.880><c> it</c><00:19:45.030><c> has</c><00:19:45.120><c> to</c>

00:19:45.140 --> 00:19:45.150 align:start position:0%
for the compiler because all it has to
 

00:19:45.150 --> 00:19:47.000 align:start position:0%
for the compiler because all it has to
do<00:19:45.330><c> is</c><00:19:45.450><c> generate</c><00:19:45.630><c> a</c><00:19:45.780><c> new</c><00:19:46.020><c> static</c><00:19:46.500><c> method</c><00:19:46.830><c> in</c>

00:19:47.000 --> 00:19:47.010 align:start position:0%
do is generate a new static method in
 

00:19:47.010 --> 00:19:48.650 align:start position:0%
do is generate a new static method in
the<00:19:47.130><c> class</c><00:19:47.310><c> where</c><00:19:47.730><c> the</c><00:19:47.850><c> lambda</c><00:19:48.150><c> expression</c><00:19:48.540><c> is</c>

00:19:48.650 --> 00:19:48.660 align:start position:0%
the class where the lambda expression is
 

00:19:48.660 --> 00:19:52.100 align:start position:0%
the class where the lambda expression is
being<00:19:48.780><c> used</c><00:19:49.580><c> where</c><00:19:50.580><c> it</c><00:19:50.880><c> passes</c><00:19:51.150><c> the</c>

00:19:52.100 --> 00:19:52.110 align:start position:0%
being used where it passes the
 

00:19:52.110 --> 00:19:54.110 align:start position:0%
being used where it passes the
documents<00:19:52.440><c> of</c><00:19:52.590><c> the</c><00:19:52.890><c> lambda</c><00:19:53.160><c> expression</c><00:19:53.670><c> as</c>

00:19:54.110 --> 00:19:54.120 align:start position:0%
documents of the lambda expression as
 

00:19:54.120 --> 00:19:56.030 align:start position:0%
documents of the lambda expression as
arguments<00:19:54.690><c> to</c><00:19:54.900><c> the</c><00:19:55.230><c> static</c><00:19:55.559><c> method</c><00:19:55.710><c> it</c>

00:19:56.030 --> 00:19:56.040 align:start position:0%
arguments to the static method it
 

00:19:56.040 --> 00:19:58.160 align:start position:0%
arguments to the static method it
generates<00:19:56.370><c> and</c><00:19:56.580><c> the</c><00:19:57.179><c> same</c><00:19:57.360><c> return</c><00:19:57.630><c> type</c>

00:19:58.160 --> 00:19:58.170 align:start position:0%
generates and the same return type
 

00:19:58.170 --> 00:20:00.110 align:start position:0%
generates and the same return type
so<00:19:58.440><c> all</c><00:19:58.980><c> it</c><00:19:59.160><c> has</c><00:19:59.250><c> to</c><00:19:59.370><c> do</c><00:19:59.460><c> is</c><00:19:59.549><c> insert</c><00:19:59.790><c> the</c><00:19:59.940><c> body</c>

00:20:00.110 --> 00:20:00.120 align:start position:0%
so all it has to do is insert the body
 

00:20:00.120 --> 00:20:01.580 align:start position:0%
so all it has to do is insert the body
of<00:20:00.270><c> the</c><00:20:00.360><c> lambda</c><00:20:00.600><c> expression</c><00:20:00.990><c> into</c><00:20:01.290><c> that</c><00:20:01.410><c> new</c>

00:20:01.580 --> 00:20:01.590 align:start position:0%
of the lambda expression into that new
 

00:20:01.590 --> 00:20:05.650 align:start position:0%
of the lambda expression into that new
method<00:20:01.770><c> very</c><00:20:02.490><c> simple</c><00:20:02.790><c> conversion</c><00:20:04.040><c> for</c><00:20:05.040><c> a</c>

00:20:05.650 --> 00:20:05.660 align:start position:0%
method very simple conversion for a
 

00:20:05.660 --> 00:20:09.530 align:start position:0%
method very simple conversion for a
capturing<00:20:06.660><c> lambda</c><00:20:07.940><c> if</c><00:20:08.940><c> it</c><00:20:09.120><c> captures</c>

00:20:09.530 --> 00:20:09.540 align:start position:0%
capturing lambda if it captures
 

00:20:09.540 --> 00:20:12.049 align:start position:0%
capturing lambda if it captures
variables<00:20:10.530><c> like</c><00:20:11.130><c> static</c><00:20:11.490><c> variables</c><00:20:11.910><c> and</c>

00:20:12.049 --> 00:20:12.059 align:start position:0%
variables like static variables and
 

00:20:12.059 --> 00:20:14.240 align:start position:0%
variables like static variables and
things<00:20:12.179><c> like</c><00:20:12.299><c> that</c><00:20:12.540><c> then</c><00:20:13.290><c> again</c><00:20:13.890><c> it's</c><00:20:14.070><c> fairly</c>

00:20:14.240 --> 00:20:14.250 align:start position:0%
things like that then again it's fairly
 

00:20:14.250 --> 00:20:16.430 align:start position:0%
things like that then again it's fairly
straightforward<00:20:14.880><c> to</c><00:20:15.059><c> use</c><00:20:15.360><c> because</c><00:20:16.110><c> it</c><00:20:16.320><c> will</c>

00:20:16.430 --> 00:20:16.440 align:start position:0%
straightforward to use because it will
 

00:20:16.440 --> 00:20:18.200 align:start position:0%
straightforward to use because it will
the<00:20:16.890><c> compiler</c><00:20:17.280><c> will</c><00:20:17.460><c> generate</c><00:20:17.490><c> a</c><00:20:17.850><c> static</c>

00:20:18.200 --> 00:20:18.210 align:start position:0%
the compiler will generate a static
 

00:20:18.210 --> 00:20:19.820 align:start position:0%
the compiler will generate a static
method<00:20:18.360><c> the</c><00:20:18.840><c> same</c><00:20:19.049><c> way</c><00:20:19.200><c> as</c><00:20:19.260><c> we</c><00:20:19.410><c> do</c><00:20:19.500><c> for</c><00:20:19.620><c> a</c><00:20:19.679><c> non</c>

00:20:19.820 --> 00:20:19.830 align:start position:0%
method the same way as we do for a non
 

00:20:19.830 --> 00:20:21.770 align:start position:0%
method the same way as we do for a non
capturing<00:20:20.250><c> one</c><00:20:20.429><c> but</c><00:20:21.120><c> this</c><00:20:21.270><c> time</c><00:20:21.330><c> rather</c><00:20:21.690><c> than</c>

00:20:21.770 --> 00:20:21.780 align:start position:0%
capturing one but this time rather than
 

00:20:21.780 --> 00:20:24.110 align:start position:0%
capturing one but this time rather than
just<00:20:22.080><c> passing</c><00:20:22.530><c> the</c><00:20:22.650><c> parameters</c><00:20:23.190><c> that</c><00:20:23.640><c> are</c><00:20:23.700><c> the</c>

00:20:24.110 --> 00:20:24.120 align:start position:0%
just passing the parameters that are the
 

00:20:24.120 --> 00:20:26.060 align:start position:0%
just passing the parameters that are the
parameters<00:20:24.540><c> of</c><00:20:24.570><c> the</c><00:20:24.720><c> lambda</c><00:20:24.990><c> expression</c><00:20:25.530><c> it</c>

00:20:26.060 --> 00:20:26.070 align:start position:0%
parameters of the lambda expression it
 

00:20:26.070 --> 00:20:28.720 align:start position:0%
parameters of the lambda expression it
will<00:20:26.220><c> prepend</c><00:20:26.850><c> to</c><00:20:27.330><c> those</c><00:20:27.540><c> parameters</c><00:20:27.900><c> any</c>

00:20:28.720 --> 00:20:28.730 align:start position:0%
will prepend to those parameters any
 

00:20:28.730 --> 00:20:30.530 align:start position:0%
will prepend to those parameters any
variables<00:20:29.730><c> that</c><00:20:29.850><c> you</c><00:20:30.030><c> reference</c><00:20:30.360><c> from</c><00:20:30.480><c> the</c>

00:20:30.530 --> 00:20:30.540 align:start position:0%
variables that you reference from the
 

00:20:30.540 --> 00:20:32.690 align:start position:0%
variables that you reference from the
surrounding<00:20:30.990><c> scope</c><00:20:31.200><c> that's</c><00:20:31.530><c> static</c><00:20:31.799><c> so</c><00:20:32.580><c> that</c>

00:20:32.690 --> 00:20:32.700 align:start position:0%
surrounding scope that's static so that
 

00:20:32.700 --> 00:20:35.299 align:start position:0%
surrounding scope that's static so that
way<00:20:32.880><c> when</c><00:20:33.750><c> the</c><00:20:33.960><c> body</c><00:20:34.140><c> of</c><00:20:34.290><c> the</c><00:20:34.410><c> expression</c><00:20:34.890><c> runs</c>

00:20:35.299 --> 00:20:35.309 align:start position:0%
way when the body of the expression runs
 

00:20:35.309 --> 00:20:38.570 align:start position:0%
way when the body of the expression runs
it<00:20:36.090><c> has</c><00:20:36.150><c> the</c><00:20:36.630><c> variables</c><00:20:37.110><c> as</c><00:20:37.440><c> instant</c><00:20:38.400><c> those</c>

00:20:38.570 --> 00:20:38.580 align:start position:0%
it has the variables as instant those
 

00:20:38.580 --> 00:20:40.130 align:start position:0%
it has the variables as instant those
parameters<00:20:39.390><c> they're</c><00:20:39.510><c> being</c><00:20:39.630><c> passed</c><00:20:39.870><c> to</c><00:20:39.990><c> the</c>

00:20:40.130 --> 00:20:40.140 align:start position:0%
parameters they're being passed to the
 

00:20:40.140 --> 00:20:43.000 align:start position:0%
parameters they're being passed to the
method<00:20:40.260><c> so</c><00:20:40.590><c> it</c><00:20:40.919><c> is</c><00:20:41.130><c> able</c><00:20:41.309><c> to</c><00:20:41.429><c> work</c><00:20:41.640><c> in</c><00:20:41.790><c> that</c><00:20:41.910><c> way</c>

00:20:43.000 --> 00:20:43.010 align:start position:0%
method so it is able to work in that way
 

00:20:43.010 --> 00:20:46.520 align:start position:0%
method so it is able to work in that way
the<00:20:44.010><c> third</c><00:20:44.340><c> form</c><00:20:44.730><c> is</c><00:20:45.030><c> where</c><00:20:45.720><c> you</c><00:20:45.840><c> have</c><00:20:46.169><c> an</c>

00:20:46.520 --> 00:20:46.530 align:start position:0%
the third form is where you have an
 

00:20:46.530 --> 00:20:48.950 align:start position:0%
the third form is where you have an
instance<00:20:47.220><c> capturing</c><00:20:47.790><c> lambda</c><00:20:48.120><c> so</c><00:20:48.419><c> the</c><00:20:48.540><c> lambda</c>

00:20:48.950 --> 00:20:48.960 align:start position:0%
instance capturing lambda so the lambda
 

00:20:48.960 --> 00:20:50.930 align:start position:0%
instance capturing lambda so the lambda
is<00:20:49.169><c> actually</c><00:20:49.799><c> referring</c><00:20:50.070><c> to</c><00:20:50.190><c> an</c><00:20:50.370><c> object</c>

00:20:50.930 --> 00:20:50.940 align:start position:0%
is actually referring to an object
 

00:20:50.940 --> 00:20:53.030 align:start position:0%
is actually referring to an object
rather<00:20:51.299><c> than</c><00:20:51.450><c> static</c><00:20:51.690><c> very</c><00:20:52.049><c> static</c><00:20:52.500><c> methods</c>

00:20:53.030 --> 00:20:53.040 align:start position:0%
rather than static very static methods
 

00:20:53.040 --> 00:20:54.830 align:start position:0%
rather than static very static methods
so<00:20:54.030><c> in</c><00:20:54.120><c> this</c><00:20:54.270><c> case</c>

00:20:54.830 --> 00:20:54.840 align:start position:0%
so in this case
 

00:20:54.840 --> 00:20:57.530 align:start position:0%
so in this case
Rawdon<00:20:55.260><c> creating</c><00:20:55.890><c> a</c><00:20:55.980><c> static</c><00:20:56.520><c> method</c><00:20:56.700><c> in</c><00:20:57.179><c> the</c>

00:20:57.530 --> 00:20:57.540 align:start position:0%
Rawdon creating a static method in the
 

00:20:57.540 --> 00:20:59.060 align:start position:0%
Rawdon creating a static method in the
class<00:20:57.780><c> in</c><00:20:57.990><c> which</c><00:20:58.080><c> the</c><00:20:58.260><c> lambda</c><00:20:58.440><c> expression</c><00:20:58.950><c> is</c>

00:20:59.060 --> 00:20:59.070 align:start position:0%
class in which the lambda expression is
 

00:20:59.070 --> 00:21:02.210 align:start position:0%
class in which the lambda expression is
used<00:20:59.370><c> it</c><00:21:00.030><c> creates</c><00:21:00.390><c> a</c><00:21:00.510><c> truly</c><00:21:01.380><c> synthetic</c><00:21:01.890><c> method</c>

00:21:02.210 --> 00:21:02.220 align:start position:0%
used it creates a truly synthetic method
 

00:21:02.220 --> 00:21:04.460 align:start position:0%
used it creates a truly synthetic method
which<00:21:02.400><c> is</c><00:21:02.640><c> one</c><00:21:02.970><c> associated</c><00:21:03.750><c> with</c><00:21:04.049><c> that</c>

00:21:04.460 --> 00:21:04.470 align:start position:0%
which is one associated with that
 

00:21:04.470 --> 00:21:07.190 align:start position:0%
which is one associated with that
particular<00:21:04.650><c> class</c><00:21:05.130><c> and</c><00:21:05.549><c> then</c><00:21:06.150><c> when</c><00:21:06.510><c> objects</c>

00:21:07.190 --> 00:21:07.200 align:start position:0%
particular class and then when objects
 

00:21:07.200 --> 00:21:09.590 align:start position:0%
particular class and then when objects
are<00:21:07.290><c> created</c><00:21:07.380><c> there's</c><00:21:07.799><c> a</c><00:21:07.830><c> method</c><00:21:08.330><c> that's</c><00:21:09.330><c> of</c>

00:21:09.590 --> 00:21:09.600 align:start position:0%
are created there's a method that's of
 

00:21:09.600 --> 00:21:13.310 align:start position:0%
are created there's a method that's of
that<00:21:09.840><c> so</c><00:21:10.620><c> in</c><00:21:10.710><c> this</c><00:21:10.799><c> case</c><00:21:11.210><c> because</c><00:21:12.210><c> it's</c><00:21:12.480><c> a</c><00:21:12.600><c> an</c>

00:21:13.310 --> 00:21:13.320 align:start position:0%
that so in this case because it's a an
 

00:21:13.320 --> 00:21:15.440 align:start position:0%
that so in this case because it's a an
instance<00:21:13.679><c> method</c><00:21:14.040><c> in</c><00:21:14.429><c> the</c><00:21:14.669><c> class</c><00:21:14.880><c> which</c><00:21:15.150><c> uses</c>

00:21:15.440 --> 00:21:15.450 align:start position:0%
instance method in the class which uses
 

00:21:15.450 --> 00:21:18.080 align:start position:0%
instance method in the class which uses
a<00:21:15.480><c> lambda</c><00:21:15.750><c> expression</c><00:21:16.500><c> it's</c><00:21:17.280><c> able</c><00:21:17.549><c> to</c><00:21:17.730><c> refer</c>

00:21:18.080 --> 00:21:18.090 align:start position:0%
a lambda expression it's able to refer
 

00:21:18.090 --> 00:21:20.840 align:start position:0%
a lambda expression it's able to refer
to<00:21:18.120><c> the</c><00:21:18.840><c> surrounding</c><00:21:19.770><c> object</c><00:21:20.130><c> so</c><00:21:20.370><c> it's</c><00:21:20.730><c> able</c>

00:21:20.840 --> 00:21:20.850 align:start position:0%
to the surrounding object so it's able
 

00:21:20.850 --> 00:21:23.419 align:start position:0%
to the surrounding object so it's able
to<00:21:21.000><c> access</c><00:21:21.419><c> the</c><00:21:21.630><c> the</c><00:21:21.960><c> variables</c><00:21:22.320><c> that</c><00:21:22.380><c> way</c><00:21:22.620><c> so</c>

00:21:23.419 --> 00:21:23.429 align:start position:0%
to access the the variables that way so
 

00:21:23.429 --> 00:21:24.980 align:start position:0%
to access the the variables that way so
this<00:21:23.549><c> is</c><00:21:23.640><c> how</c><00:21:23.700><c> we</c><00:21:23.820><c> generate</c><00:21:23.850><c> the</c><00:21:24.210><c> method</c><00:21:24.510><c> one</c>

00:21:24.980 --> 00:21:24.990 align:start position:0%
this is how we generate the method one
 

00:21:24.990 --> 00:21:27.110 align:start position:0%
this is how we generate the method one
of<00:21:25.080><c> three</c><00:21:25.200><c> ways</c><00:21:25.380><c> we</c><00:21:25.860><c> now</c><00:21:25.980><c> have</c><00:21:26.220><c> a</c><00:21:26.250><c> method</c><00:21:26.700><c> in</c>

00:21:27.110 --> 00:21:27.120 align:start position:0%
of three ways we now have a method in
 

00:21:27.120 --> 00:21:28.789 align:start position:0%
of three ways we now have a method in
the<00:21:27.450><c> class</c><00:21:27.570><c> which</c><00:21:28.020><c> is</c><00:21:28.140><c> using</c><00:21:28.470><c> the</c><00:21:28.530><c> lambda</c>

00:21:28.789 --> 00:21:28.799 align:start position:0%
the class which is using the lambda
 

00:21:28.799 --> 00:21:32.180 align:start position:0%
the class which is using the lambda
expression<00:21:30.320><c> where</c><00:21:31.320><c> you</c><00:21:31.559><c> use</c><00:21:31.740><c> the</c><00:21:31.919><c> lambda</c>

00:21:32.180 --> 00:21:32.190 align:start position:0%
expression where you use the lambda
 

00:21:32.190 --> 00:21:36.200 align:start position:0%
expression where you use the lambda
expression<00:21:32.700><c> a</c><00:21:33.710><c> call</c><00:21:34.710><c> to</c><00:21:35.010><c> invoke</c><00:21:35.490><c> dynamic</c><00:21:35.730><c> is</c>

00:21:36.200 --> 00:21:36.210 align:start position:0%
expression a call to invoke dynamic is
 

00:21:36.210 --> 00:21:38.630 align:start position:0%
expression a call to invoke dynamic is
generated<00:21:36.780><c> and</c><00:21:37.080><c> what</c><00:21:37.830><c> this</c><00:21:37.980><c> is</c><00:21:38.160><c> called</c><00:21:38.370><c> is</c><00:21:38.580><c> the</c>

00:21:38.630 --> 00:21:38.640 align:start position:0%
generated and what this is called is the
 

00:21:38.640 --> 00:21:41.390 align:start position:0%
generated and what this is called is the
lambda<00:21:39.030><c> factory</c><00:21:39.660><c> so</c><00:21:40.530><c> the</c><00:21:40.620><c> idea</c><00:21:40.919><c> is</c><00:21:41.070><c> that</c><00:21:41.100><c> you</c>

00:21:41.390 --> 00:21:41.400 align:start position:0%
lambda factory so the idea is that you
 

00:21:41.400 --> 00:21:44.180 align:start position:0%
lambda factory so the idea is that you
you<00:21:42.000><c> make</c><00:21:42.179><c> a</c><00:21:42.210><c> call</c><00:21:42.450><c> to</c><00:21:42.690><c> the</c><00:21:43.070><c> invoke</c><00:21:44.070><c> dynamic</c>

00:21:44.180 --> 00:21:44.190 align:start position:0%
you make a call to the invoke dynamic
 

00:21:44.190 --> 00:21:47.600 align:start position:0%
you make a call to the invoke dynamic
and<00:21:44.640><c> that</c><00:21:44.669><c> will</c><00:21:45.270><c> return</c><00:21:45.809><c> a</c><00:21:46.169><c> reference</c><00:21:46.830><c> to</c><00:21:47.520><c> an</c>

00:21:47.600 --> 00:21:47.610 align:start position:0%
and that will return a reference to an
 

00:21:47.610 --> 00:21:51.740 align:start position:0%
and that will return a reference to an
instance<00:21:48.150><c> of</c><00:21:48.330><c> an</c><00:21:49.200><c> object</c><00:21:49.350><c> whose</c><00:21:50.130><c> type</c><00:21:50.520><c> is</c><00:21:50.850><c> the</c>

00:21:51.740 --> 00:21:51.750 align:start position:0%
instance of an object whose type is the
 

00:21:51.750 --> 00:21:53.030 align:start position:0%
instance of an object whose type is the
functional<00:21:52.080><c> interface</c><00:21:52.440><c> that</c><00:21:52.710><c> the</c><00:21:52.799><c> lambda</c>

00:21:53.030 --> 00:21:53.040 align:start position:0%
functional interface that the lambda
 

00:21:53.040 --> 00:21:55.789 align:start position:0%
functional interface that the lambda
expression<00:21:53.490><c> represents</c><00:21:54.110><c> so</c><00:21:55.110><c> that</c><00:21:55.290><c> that</c><00:21:55.620><c> kind</c>

00:21:55.789 --> 00:21:55.799 align:start position:0%
expression represents so that that kind
 

00:21:55.799 --> 00:21:57.080 align:start position:0%
expression represents so that that kind
of<00:21:55.830><c> makes</c><00:21:56.010><c> sense</c><00:21:56.100><c> so</c><00:21:56.520><c> we</c><00:21:56.610><c> need</c><00:21:56.760><c> some</c><00:21:56.940><c> way</c><00:21:57.059><c> of</c>

00:21:57.080 --> 00:21:57.090 align:start position:0%
of makes sense so we need some way of
 

00:21:57.090 --> 00:21:59.180 align:start position:0%
of makes sense so we need some way of
getting<00:21:57.480><c> a</c><00:21:57.540><c> reference</c><00:21:57.690><c> to</c><00:21:58.049><c> the</c><00:21:58.230><c> the</c><00:21:58.590><c> object</c><00:21:58.770><c> so</c>

00:21:59.180 --> 00:21:59.190 align:start position:0%
getting a reference to the the object so
 

00:21:59.190 --> 00:22:02.020 align:start position:0%
getting a reference to the the object so
that<00:21:59.220><c> we</c><00:21:59.370><c> can</c><00:21:59.490><c> then</c><00:21:59.610><c> call</c><00:22:00.000><c> the</c><00:22:00.540><c> method</c><00:22:00.690><c> on</c><00:22:01.050><c> it</c>

00:22:02.020 --> 00:22:02.030 align:start position:0%
that we can then call the method on it
 

00:22:02.030 --> 00:22:05.150 align:start position:0%
that we can then call the method on it
and<00:22:03.030><c> in</c><00:22:03.540><c> fact</c><00:22:03.750><c> do</c><00:22:04.020><c> that</c><00:22:04.050><c> we</c><00:22:04.410><c> also</c><00:22:04.560><c> have</c><00:22:04.890><c> a</c><00:22:04.920><c> thing</c>

00:22:05.150 --> 00:22:05.160 align:start position:0%
and in fact do that we also have a thing
 

00:22:05.160 --> 00:22:06.830 align:start position:0%
and in fact do that we also have a thing
called<00:22:05.310><c> the</c><00:22:05.400><c> bootstrap</c><00:22:05.910><c> method</c><00:22:06.300><c> which</c><00:22:06.510><c> is</c><00:22:06.690><c> the</c>

00:22:06.830 --> 00:22:06.840 align:start position:0%
called the bootstrap method which is the
 

00:22:06.840 --> 00:22:10.280 align:start position:0%
called the bootstrap method which is the
lambda<00:22:07.140><c> meta</c><00:22:08.070><c> Factory</c><00:22:08.610><c> and</c><00:22:09.030><c> that</c><00:22:09.660><c> uses</c><00:22:10.080><c> the</c>

00:22:10.280 --> 00:22:10.290 align:start position:0%
lambda meta Factory and that uses the
 

00:22:10.290 --> 00:22:12.170 align:start position:0%
lambda meta Factory and that uses the
Java<00:22:10.590><c> claimed</c><00:22:11.010><c> or</c><00:22:11.130><c> invoke</c><00:22:11.430><c> lambda</c><00:22:12.030><c> meta</c>

00:22:12.170 --> 00:22:12.180 align:start position:0%
Java claimed or invoke lambda meta
 

00:22:12.180 --> 00:22:14.510 align:start position:0%
Java claimed or invoke lambda meta
Factory<00:22:12.570><c> class</c><00:22:13.070><c> the</c><00:22:14.070><c> important</c><00:22:14.340><c> thing</c><00:22:14.460><c> about</c>

00:22:14.510 --> 00:22:14.520 align:start position:0%
Factory class the important thing about
 

00:22:14.520 --> 00:22:17.360 align:start position:0%
Factory class the important thing about
this<00:22:14.820><c> is</c><00:22:15.180><c> in</c><00:22:15.960><c> terms</c><00:22:16.200><c> of</c><00:22:16.440><c> the</c><00:22:16.680><c> the</c><00:22:16.980><c> way</c><00:22:17.100><c> that</c><00:22:17.130><c> the</c>

00:22:17.360 --> 00:22:17.370 align:start position:0%
this is in terms of the the way that the
 

00:22:17.370 --> 00:22:20.030 align:start position:0%
this is in terms of the the way that the
lambda<00:22:17.550><c> expressions</c><00:22:18.210><c> work</c><00:22:18.840><c> is</c><00:22:19.200><c> the</c><00:22:19.860><c> cool</c>

00:22:20.030 --> 00:22:20.040 align:start position:0%
lambda expressions work is the cool
 

00:22:20.040 --> 00:22:21.440 align:start position:0%
lambda expressions work is the cool
science<00:22:20.280><c> of</c><00:22:20.490><c> the</c><00:22:20.580><c> lambda</c><00:22:20.820><c> expressions</c><00:22:21.270><c> where</c>

00:22:21.440 --> 00:22:21.450 align:start position:0%
science of the lambda expressions where
 

00:22:21.450 --> 00:22:23.750 align:start position:0%
science of the lambda expressions where
we<00:22:21.510><c> use</c><00:22:21.690><c> the</c><00:22:21.810><c> meta</c><00:22:21.990><c> Factory</c><00:22:22.500><c> or</c><00:22:22.740><c> if</c><00:22:23.610><c> they</c>

00:22:23.750 --> 00:22:23.760 align:start position:0%
we use the meta Factory or if they
 

00:22:23.760 --> 00:22:27.770 align:start position:0%
we use the meta Factory or if they
evaluated<00:22:24.540><c> in</c><00:22:24.810><c> a</c><00:22:24.900><c> lazy</c><00:22:25.230><c> way</c><00:22:26.360><c> that</c><00:22:27.360><c> means</c><00:22:27.540><c> that</c>

00:22:27.770 --> 00:22:27.780 align:start position:0%
evaluated in a lazy way that means that
 

00:22:27.780 --> 00:22:29.750 align:start position:0%
evaluated in a lazy way that means that
if<00:22:27.930><c> you</c><00:22:28.140><c> don't</c><00:22:28.320><c> use</c><00:22:28.710><c> that</c><00:22:28.740><c> lambda</c><00:22:29.220><c> expression</c>

00:22:29.750 --> 00:22:29.760 align:start position:0%
if you don't use that lambda expression
 

00:22:29.760 --> 00:22:32.000 align:start position:0%
if you don't use that lambda expression
you<00:22:30.480><c> don't</c><00:22:30.660><c> have</c><00:22:30.840><c> any</c><00:22:30.960><c> overhead</c><00:22:31.290><c> associated</c>

00:22:32.000 --> 00:22:32.010 align:start position:0%
you don't have any overhead associated
 

00:22:32.010 --> 00:22:33.350 align:start position:0%
you don't have any overhead associated
with<00:22:32.130><c> it</c><00:22:32.250><c> so</c><00:22:32.400><c> this</c><00:22:32.520><c> is</c><00:22:32.580><c> quite</c><00:22:32.760><c> an</c><00:22:32.940><c> important</c>

00:22:33.350 --> 00:22:33.360 align:start position:0%
with it so this is quite an important
 

00:22:33.360 --> 00:22:35.450 align:start position:0%
with it so this is quite an important
thing<00:22:33.510><c> from</c><00:22:34.110><c> the</c><00:22:34.200><c> point</c><00:22:34.410><c> of</c><00:22:34.470><c> view</c><00:22:34.620><c> that</c><00:22:34.680><c> unlike</c>

00:22:35.450 --> 00:22:35.460 align:start position:0%
thing from the point of view that unlike
 

00:22:35.460 --> 00:22:37.340 align:start position:0%
thing from the point of view that unlike
an<00:22:35.610><c> enormous</c><00:22:36.000><c> in</c><00:22:36.120><c> a</c><00:22:36.180><c> class</c><00:22:36.390><c> where</c><00:22:36.660><c> classes</c><00:22:37.170><c> get</c>

00:22:37.340 --> 00:22:37.350 align:start position:0%
an enormous in a class where classes get
 

00:22:37.350 --> 00:22:39.770 align:start position:0%
an enormous in a class where classes get
created<00:22:37.890><c> and</c><00:22:38.190><c> classes</c><00:22:39.120><c> will</c><00:22:39.270><c> be</c><00:22:39.330><c> loaded</c><00:22:39.660><c> and</c>

00:22:39.770 --> 00:22:39.780 align:start position:0%
created and classes will be loaded and
 

00:22:39.780 --> 00:22:41.660 align:start position:0%
created and classes will be loaded and
things<00:22:39.930><c> like</c><00:22:40.050><c> that</c><00:22:40.280><c> from</c><00:22:41.280><c> the</c><00:22:41.340><c> point</c><00:22:41.490><c> of</c><00:22:41.610><c> view</c>

00:22:41.660 --> 00:22:41.670 align:start position:0%
things like that from the point of view
 

00:22:41.670 --> 00:22:43.370 align:start position:0%
things like that from the point of view
if<00:22:41.910><c> you</c><00:22:42.030><c> don't</c><00:22:42.300><c> use</c><00:22:42.510><c> a</c><00:22:42.540><c> lambda</c><00:22:42.780><c> expression</c>

00:22:43.370 --> 00:22:43.380 align:start position:0%
if you don't use a lambda expression
 

00:22:43.380 --> 00:22:45.800 align:start position:0%
if you don't use a lambda expression
then<00:22:43.980><c> you</c><00:22:44.700><c> don't</c><00:22:44.910><c> have</c><00:22:45.090><c> the</c><00:22:45.210><c> overhead</c><00:22:45.600><c> of</c>

00:22:45.800 --> 00:22:45.810 align:start position:0%
then you don't have the overhead of
 

00:22:45.810 --> 00:22:47.780 align:start position:0%
then you don't have the overhead of
actually<00:22:46.710><c> calling</c><00:22:47.100><c> the</c><00:22:47.220><c> lambda</c><00:22:47.640><c> Mehta</c>

00:22:47.780 --> 00:22:47.790 align:start position:0%
actually calling the lambda Mehta
 

00:22:47.790 --> 00:22:50.540 align:start position:0%
actually calling the lambda Mehta
factory<00:22:48.240><c> so</c><00:22:48.450><c> it's</c><00:22:48.960><c> it's</c><00:22:49.410><c> ignored</c><00:22:49.740><c> which</c><00:22:50.310><c> means</c>

00:22:50.540 --> 00:22:50.550 align:start position:0%
factory so it's it's ignored which means
 

00:22:50.550 --> 00:22:52.970 align:start position:0%
factory so it's it's ignored which means
you<00:22:50.670><c> get</c><00:22:50.820><c> better</c><00:22:51.720><c> performance</c><00:22:52.140><c> by</c><00:22:52.950><c> using</c>

00:22:52.970 --> 00:22:52.980 align:start position:0%
you get better performance by using
 

00:22:52.980 --> 00:22:58.670 align:start position:0%
you get better performance by using
lambda<00:22:53.550><c> expressions</c><00:22:53.970><c> in</c><00:22:54.120><c> that</c><00:22:54.240><c> sense</c><00:22:57.680><c> the</c>

00:22:58.670 --> 00:22:58.680 align:start position:0%
lambda expressions in that sense the
 

00:22:58.680 --> 00:23:00.100 align:start position:0%
lambda expressions in that sense the
next<00:22:58.800><c> thing</c><00:22:59.010><c> is</c><00:22:59.100><c> if</c><00:22:59.250><c> we</c><00:22:59.520><c> look</c><00:22:59.700><c> at</c><00:22:59.790><c> the</c>

00:23:00.100 --> 00:23:00.110 align:start position:0%
next thing is if we look at the
 

00:23:00.110 --> 00:23:02.240 align:start position:0%
next thing is if we look at the
differences<00:23:01.110><c> in</c><00:23:01.440><c> terms</c><00:23:01.800><c> of</c><00:23:01.920><c> implementation</c>

00:23:02.240 --> 00:23:02.250 align:start position:0%
differences in terms of implementation
 

00:23:02.250 --> 00:23:05.000 align:start position:0%
differences in terms of implementation
between<00:23:03.230><c> lambdas</c><00:23:04.230><c> and</c><00:23:04.440><c> anonymous</c><00:23:04.890><c> inner</c>

00:23:05.000 --> 00:23:05.010 align:start position:0%
between lambdas and anonymous inner
 

00:23:05.010 --> 00:23:08.180 align:start position:0%
between lambdas and anonymous inner
classes<00:23:05.310><c> and</c><00:23:05.940><c> you</c><00:23:06.300><c> can</c><00:23:06.420><c> break</c><00:23:06.690><c> out</c><00:23:06.870><c> what</c><00:23:07.560><c> both</c>

00:23:08.180 --> 00:23:08.190 align:start position:0%
classes and you can break out what both
 

00:23:08.190 --> 00:23:10.100 align:start position:0%
classes and you can break out what both
of<00:23:08.220><c> these</c><00:23:08.460><c> things</c><00:23:08.700><c> do</c><00:23:08.910><c> into</c><00:23:09.180><c> three</c><00:23:09.510><c> distinct</c>

00:23:10.100 --> 00:23:10.110 align:start position:0%
of these things do into three distinct
 

00:23:10.110 --> 00:23:13.880 align:start position:0%
of these things do into three distinct
sections<00:23:11.330><c> in</c><00:23:12.330><c> the</c><00:23:12.420><c> case</c><00:23:12.570><c> of</c><00:23:12.770><c> lambdas</c><00:23:13.770><c> the</c>

00:23:13.880 --> 00:23:13.890 align:start position:0%
sections in the case of lambdas the
 

00:23:13.890 --> 00:23:17.090 align:start position:0%
sections in the case of lambdas the
first<00:23:14.160><c> thing</c><00:23:14.430><c> is</c><00:23:14.640><c> how</c><00:23:15.120><c> you</c><00:23:15.180><c> link</c><00:23:15.810><c> to</c><00:23:16.590><c> the</c>

00:23:17.090 --> 00:23:17.100 align:start position:0%
first thing is how you link to the
 

00:23:17.100 --> 00:23:20.090 align:start position:0%
first thing is how you link to the
reference<00:23:17.550><c> to</c><00:23:17.790><c> the</c><00:23:18.470><c> the</c><00:23:19.470><c> class</c><00:23:19.710><c> which</c><00:23:19.950><c> is</c>

00:23:20.090 --> 00:23:20.100 align:start position:0%
reference to the the class which is
 

00:23:20.100 --> 00:23:21.590 align:start position:0%
reference to the the class which is
going<00:23:20.130><c> to</c><00:23:20.400><c> give</c><00:23:20.550><c> you</c><00:23:20.670><c> the</c><00:23:20.820><c> method</c><00:23:21.300><c> which</c><00:23:21.480><c> is</c>

00:23:21.590 --> 00:23:21.600 align:start position:0%
going to give you the method which is
 

00:23:21.600 --> 00:23:22.610 align:start position:0%
going to give you the method which is
going<00:23:21.720><c> to</c><00:23:21.810><c> be</c><00:23:21.870><c> called</c><00:23:22.080><c> as</c><00:23:22.230><c> the</c><00:23:22.380><c> lambda</c>

00:23:22.610 --> 00:23:22.620 align:start position:0%
going to be called as the lambda
 

00:23:22.620 --> 00:23:25.070 align:start position:0%
going to be called as the lambda
expression<00:23:23.100><c> body</c><00:23:23.450><c> for</c><00:23:24.450><c> an</c><00:23:24.540><c> anonymous</c><00:23:24.930><c> in</c><00:23:25.020><c> a</c>

00:23:25.070 --> 00:23:25.080 align:start position:0%
expression body for an anonymous in a
 

00:23:25.080 --> 00:23:27.290 align:start position:0%
expression body for an anonymous in a
class<00:23:25.290><c> the</c><00:23:25.530><c> equivalent</c><00:23:25.950><c> of</c><00:23:26.040><c> that</c><00:23:26.160><c> is</c><00:23:26.700><c> loading</c>

00:23:27.290 --> 00:23:27.300 align:start position:0%
class the equivalent of that is loading
 

00:23:27.300 --> 00:23:30.290 align:start position:0%
class the equivalent of that is loading
the<00:23:27.660><c> class</c><00:23:27.990><c> that</c><00:23:28.590><c> you</c><00:23:28.710><c> need</c><00:23:28.950><c> to</c><00:23:29.370><c> call</c><00:23:30.180><c> the</c>

00:23:30.290 --> 00:23:30.300 align:start position:0%
the class that you need to call the
 

00:23:30.300 --> 00:23:32.690 align:start position:0%
the class that you need to call the
method<00:23:30.600><c> in</c><00:23:30.960><c> order</c><00:23:31.260><c> to</c><00:23:31.440><c> execute</c><00:23:32.250><c> the</c><00:23:32.340><c> anonymous</c>

00:23:32.690 --> 00:23:32.700 align:start position:0%
method in order to execute the anonymous
 

00:23:32.700 --> 00:23:35.540 align:start position:0%
method in order to execute the anonymous
in<00:23:32.820><c> a</c><00:23:32.910><c> class</c><00:23:33.420><c> method</c><00:23:34.070><c> now</c><00:23:35.070><c> from</c><00:23:35.250><c> the</c><00:23:35.310><c> point</c><00:23:35.430><c> of</c>

00:23:35.540 --> 00:23:35.550 align:start position:0%
in a class method now from the point of
 

00:23:35.550 --> 00:23:38.630 align:start position:0%
in a class method now from the point of
view<00:23:35.640><c> of</c><00:23:36.170><c> comparing</c><00:23:37.170><c> these</c><00:23:37.290><c> two</c><00:23:37.590><c> Oracle</c><00:23:38.430><c> did</c>

00:23:38.630 --> 00:23:38.640 align:start position:0%
view of comparing these two Oracle did
 

00:23:38.640 --> 00:23:40.880 align:start position:0%
view of comparing these two Oracle did
quite<00:23:38.970><c> a</c><00:23:39.000><c> lot</c><00:23:39.150><c> of</c><00:23:39.180><c> performance</c><00:23:40.080><c> analysis</c><00:23:40.620><c> and</c>

00:23:40.880 --> 00:23:40.890 align:start position:0%
quite a lot of performance analysis and
 

00:23:40.890 --> 00:23:42.860 align:start position:0%
quite a lot of performance analysis and
there's<00:23:41.010><c> a</c><00:23:41.070><c> there's</c><00:23:42.000><c> a</c><00:23:42.090><c> video</c><00:23:42.300><c> online</c><00:23:42.540><c> that</c>

00:23:42.860 --> 00:23:42.870 align:start position:0%
there's a there's a video online that
 

00:23:42.870 --> 00:23:44.810 align:start position:0%
there's a there's a video online that
you<00:23:42.930><c> can</c><00:23:43.080><c> find</c><00:23:43.350><c> which</c><00:23:43.740><c> talks</c><00:23:44.490><c> about</c><00:23:44.580><c> this</c>

00:23:44.810 --> 00:23:44.820 align:start position:0%
you can find which talks about this
 

00:23:44.820 --> 00:23:47.540 align:start position:0%
you can find which talks about this
thing<00:23:45.000><c> in</c><00:23:45.240><c> quite</c><00:23:45.450><c> some</c><00:23:45.660><c> length</c><00:23:46.280><c> so</c><00:23:47.280><c> the</c><00:23:47.400><c> team</c>

00:23:47.540 --> 00:23:47.550 align:start position:0%
thing in quite some length so the team
 

00:23:47.550 --> 00:23:49.940 align:start position:0%
thing in quite some length so the team
in<00:23:47.670><c> Russia</c><00:23:47.880><c> did</c><00:23:48.420><c> a</c><00:23:48.450><c> lot</c><00:23:48.690><c> of</c><00:23:48.720><c> work</c><00:23:49.110><c> on</c><00:23:49.260><c> this</c><00:23:49.440><c> and</c>

00:23:49.940 --> 00:23:49.950 align:start position:0%
in Russia did a lot of work on this and
 

00:23:49.950 --> 00:23:51.410 align:start position:0%
in Russia did a lot of work on this and
what<00:23:50.250><c> they</c><00:23:50.370><c> found</c><00:23:50.520><c> was</c><00:23:50.670><c> that</c><00:23:50.790><c> if</c><00:23:51.030><c> you</c><00:23:51.150><c> look</c><00:23:51.300><c> at</c>

00:23:51.410 --> 00:23:51.420 align:start position:0%
what they found was that if you look at
 

00:23:51.420 --> 00:23:53.810 align:start position:0%
what they found was that if you look at
the<00:23:51.570><c> kind</c><00:23:51.870><c> of</c><00:23:51.930><c> comparison</c><00:23:52.530><c> of</c><00:23:52.650><c> these</c><00:23:52.770><c> two</c><00:23:52.830><c> from</c>

00:23:53.810 --> 00:23:53.820 align:start position:0%
the kind of comparison of these two from
 

00:23:53.820 --> 00:23:56.750 align:start position:0%
the kind of comparison of these two from
a<00:23:53.910><c> lambda</c><00:23:54.150><c> point</c><00:23:54.510><c> of</c><00:23:54.750><c> view</c><00:23:55.220><c> once</c><00:23:56.220><c> you</c><00:23:56.400><c> get</c>

00:23:56.750 --> 00:23:56.760 align:start position:0%
a lambda point of view once you get
 

00:23:56.760 --> 00:23:58.580 align:start position:0%
a lambda point of view once you get
through<00:23:57.090><c> to</c><00:23:57.180><c> what's</c><00:23:57.690><c> called</c><00:23:57.870><c> the</c><00:23:57.930><c> hot</c><00:23:58.080><c> path</c><00:23:58.290><c> so</c>

00:23:58.580 --> 00:23:58.590 align:start position:0%
through to what's called the hot path so
 

00:23:58.590 --> 00:23:59.780 align:start position:0%
through to what's called the hot path so
once<00:23:58.800><c> everything</c><00:23:59.100><c> is</c><00:23:59.280><c> kind</c><00:23:59.430><c> of</c><00:23:59.490><c> settled</c><00:23:59.760><c> down</c>

00:23:59.780 --> 00:23:59.790 align:start position:0%
once everything is kind of settled down
 

00:23:59.790 --> 00:24:02.200 align:start position:0%
once everything is kind of settled down
and<00:24:00.000><c> you</c><00:24:00.090><c> use</c><00:24:00.300><c> these</c><00:24:00.480><c> things</c><00:24:00.540><c> a</c><00:24:01.020><c> few</c><00:24:01.440><c> times</c>

00:24:02.200 --> 00:24:02.210 align:start position:0%
and you use these things a few times
 

00:24:02.210 --> 00:24:05.090 align:start position:0%
and you use these things a few times
linkage<00:24:03.210><c> in</c><00:24:03.420><c> class</c><00:24:03.660><c> loading</c><00:24:04.170><c> is</c><00:24:04.410><c> about</c><00:24:04.950><c> the</c>

00:24:05.090 --> 00:24:05.100 align:start position:0%
linkage in class loading is about the
 

00:24:05.100 --> 00:24:07.720 align:start position:0%
linkage in class loading is about the
same<00:24:05.280><c> so</c><00:24:05.820><c> so</c><00:24:06.300><c> the</c><00:24:06.420><c> the</c><00:24:06.660><c> effect</c><00:24:06.960><c> of</c><00:24:07.200><c> using</c>

00:24:07.720 --> 00:24:07.730 align:start position:0%
same so so the the effect of using
 

00:24:07.730 --> 00:24:10.220 align:start position:0%
same so so the the effect of using
lambda<00:24:08.730><c> expressions</c><00:24:09.270><c> performance</c><00:24:09.840><c> wise</c><00:24:09.990><c> is</c>

00:24:10.220 --> 00:24:10.230 align:start position:0%
lambda expressions performance wise is
 

00:24:10.230 --> 00:24:11.660 align:start position:0%
lambda expressions performance wise is
about<00:24:10.470><c> the</c><00:24:10.620><c> same</c><00:24:10.770><c> as</c><00:24:10.920><c> anonymous</c><00:24:11.160><c> inner</c>

00:24:11.660 --> 00:24:11.670 align:start position:0%
about the same as anonymous inner
 

00:24:11.670 --> 00:24:13.730 align:start position:0%
about the same as anonymous inner
classes<00:24:11.970><c> so</c><00:24:12.930><c> you</c><00:24:12.960><c> don't</c><00:24:13.140><c> get</c><00:24:13.380><c> any</c><00:24:13.530><c> advantage</c>

00:24:13.730 --> 00:24:13.740 align:start position:0%
classes so you don't get any advantage
 

00:24:13.740 --> 00:24:15.139 align:start position:0%
classes so you don't get any advantage
for<00:24:14.130><c> using</c><00:24:14.400><c> either</c>

00:24:15.139 --> 00:24:15.149 align:start position:0%
for using either
 

00:24:15.149 --> 00:24:17.570 align:start position:0%
for using either
but<00:24:15.330><c> from</c><00:24:16.049><c> the</c><00:24:16.289><c> cold</c><00:24:16.739><c> path</c><00:24:17.009><c> which</c><00:24:17.309><c> is</c><00:24:17.429><c> where</c>

00:24:17.570 --> 00:24:17.580 align:start position:0%
but from the cold path which is where
 

00:24:17.580 --> 00:24:19.579 align:start position:0%
but from the cold path which is where
you<00:24:17.669><c> start</c><00:24:18.059><c> up</c><00:24:18.299><c> so</c><00:24:18.929><c> if</c><00:24:19.019><c> you're</c><00:24:19.169><c> only</c><00:24:19.289><c> using</c><00:24:19.409><c> a</c>

00:24:19.579 --> 00:24:19.589 align:start position:0%
you start up so if you're only using a
 

00:24:19.589 --> 00:24:21.349 align:start position:0%
you start up so if you're only using a
lambda<00:24:19.739><c> expression</c><00:24:20.159><c> a</c><00:24:20.190><c> few</c><00:24:20.369><c> times</c><00:24:20.609><c> obviously</c>

00:24:21.349 --> 00:24:21.359 align:start position:0%
lambda expression a few times obviously
 

00:24:21.359 --> 00:24:22.489 align:start position:0%
lambda expression a few times obviously
that's<00:24:21.749><c> going</c><00:24:21.899><c> through</c><00:24:21.960><c> the</c><00:24:22.139><c> cold</c><00:24:22.320><c> path</c>

00:24:22.489 --> 00:24:22.499 align:start position:0%
that's going through the cold path
 

00:24:22.499 --> 00:24:25.129 align:start position:0%
that's going through the cold path
rather<00:24:22.679><c> than</c><00:24:22.799><c> the</c><00:24:22.859><c> hot</c><00:24:22.979><c> path</c><00:24:23.190><c> then</c><00:24:24.179><c> lambdas</c>

00:24:25.129 --> 00:24:25.139 align:start position:0%
rather than the hot path then lambdas
 

00:24:25.139 --> 00:24:27.079 align:start position:0%
rather than the hot path then lambdas
win<00:24:25.320><c> so</c><00:24:25.889><c> lambdas</c><00:24:26.399><c> actually</c><00:24:26.639><c> have</c><00:24:26.759><c> much</c><00:24:26.909><c> better</c>

00:24:27.079 --> 00:24:27.089 align:start position:0%
win so lambdas actually have much better
 

00:24:27.089 --> 00:24:29.060 align:start position:0%
win so lambdas actually have much better
performance<00:24:27.419><c> in</c><00:24:28.139><c> terms</c><00:24:28.440><c> of</c><00:24:28.649><c> the</c><00:24:28.710><c> first</c>

00:24:29.060 --> 00:24:29.070 align:start position:0%
performance in terms of the first
 

00:24:29.070 --> 00:24:30.859 align:start position:0%
performance in terms of the first
startup<00:24:29.669><c> bit</c><00:24:29.879><c> because</c><00:24:30.029><c> class</c><00:24:30.359><c> loading</c><00:24:30.690><c> is</c><00:24:30.779><c> a</c>

00:24:30.859 --> 00:24:30.869 align:start position:0%
startup bit because class loading is a
 

00:24:30.869 --> 00:24:33.259 align:start position:0%
startup bit because class loading is a
lot<00:24:31.169><c> heavier</c><00:24:31.529><c> wake</c><00:24:31.739><c> operation</c><00:24:32.429><c> than</c><00:24:33.029><c> the</c>

00:24:33.259 --> 00:24:33.269 align:start position:0%
lot heavier wake operation than the
 

00:24:33.269 --> 00:24:34.729 align:start position:0%
lot heavier wake operation than the
linkage<00:24:33.629><c> that</c><00:24:33.839><c> you</c><00:24:33.960><c> need</c><00:24:34.109><c> for</c><00:24:34.229><c> the</c><00:24:34.320><c> call</c><00:24:34.499><c> site</c>

00:24:34.729 --> 00:24:34.739 align:start position:0%
linkage that you need for the call site
 

00:24:34.739 --> 00:24:37.729 align:start position:0%
linkage that you need for the call site
of<00:24:34.919><c> the</c><00:24:35.159><c> lambda</c><00:24:35.399><c> expression</c><00:24:35.879><c> so</c><00:24:36.749><c> the</c><00:24:37.409><c> net</c>

00:24:37.729 --> 00:24:37.739 align:start position:0%
of the lambda expression so the net
 

00:24:37.739 --> 00:24:39.229 align:start position:0%
of the lambda expression so the net
effect<00:24:37.769><c> of</c><00:24:38.159><c> that</c><00:24:38.249><c> is</c><00:24:38.460><c> that</c><00:24:38.609><c> lambdas</c><00:24:38.969><c> win</c>

00:24:39.229 --> 00:24:39.239 align:start position:0%
effect of that is that lambdas win
 

00:24:39.239 --> 00:24:41.989 align:start position:0%
effect of that is that lambdas win
because<00:24:40.019><c> in</c><00:24:40.349><c> the</c><00:24:40.739><c> first</c><00:24:41.099><c> startup</c><00:24:41.549><c> bit</c><00:24:41.789><c> they're</c>

00:24:41.989 --> 00:24:41.999 align:start position:0%
because in the first startup bit they're
 

00:24:41.999 --> 00:24:44.479 align:start position:0%
because in the first startup bit they're
better<00:24:42.269><c> and</c><00:24:42.839><c> then</c><00:24:43.109><c> once</c><00:24:43.409><c> you</c><00:24:43.529><c> get</c><00:24:43.679><c> to</c><00:24:43.739><c> the</c><00:24:44.009><c> sort</c>

00:24:44.479 --> 00:24:44.489 align:start position:0%
better and then once you get to the sort
 

00:24:44.489 --> 00:24:45.979 align:start position:0%
better and then once you get to the sort
of<00:24:44.519><c> stable</c><00:24:44.940><c> state</c><00:24:45.149><c> they're</c><00:24:45.509><c> about</c><00:24:45.690><c> the</c><00:24:45.839><c> same</c>

00:24:45.979 --> 00:24:45.989 align:start position:0%
of stable state they're about the same
 

00:24:45.989 --> 00:24:50.299 align:start position:0%
of stable state they're about the same
as<00:24:46.200><c> anonymous</c><00:24:46.739><c> inner</c><00:24:46.889><c> classes</c><00:24:49.099><c> second</c><00:24:50.099><c> part</c>

00:24:50.299 --> 00:24:50.309 align:start position:0%
as anonymous inner classes second part
 

00:24:50.309 --> 00:24:54.229 align:start position:0%
as anonymous inner classes second part
is<00:24:50.719><c> capture</c><00:24:51.719><c> and</c><00:24:52.129><c> instantiation</c><00:24:53.129><c> so</c><00:24:53.759><c> capture</c>

00:24:54.229 --> 00:24:54.239 align:start position:0%
is capture and instantiation so capture
 

00:24:54.239 --> 00:24:56.180 align:start position:0%
is capture and instantiation so capture
for<00:24:54.450><c> lambdas</c><00:24:54.960><c> how</c><00:24:55.349><c> we</c><00:24:55.409><c> deal</c><00:24:55.649><c> with</c><00:24:55.679><c> captured</c>

00:24:56.180 --> 00:24:56.190 align:start position:0%
for lambdas how we deal with captured
 

00:24:56.190 --> 00:24:58.009 align:start position:0%
for lambdas how we deal with captured
variables<00:24:56.669><c> instantiation</c><00:24:57.479><c> for</c><00:24:57.869><c> the</c>

00:24:58.009 --> 00:24:58.019 align:start position:0%
variables instantiation for the
 

00:24:58.019 --> 00:25:00.889 align:start position:0%
variables instantiation for the
anonymous<00:24:58.379><c> in</c><00:24:58.469><c> a</c><00:24:58.559><c> class</c><00:24:58.769><c> and</c><00:24:59.659><c> what</c><00:25:00.659><c> they</c><00:25:00.779><c> found</c>

00:25:00.889 --> 00:25:00.899 align:start position:0%
anonymous in a class and what they found
 

00:25:00.899 --> 00:25:03.709 align:start position:0%
anonymous in a class and what they found
there<00:25:01.139><c> was</c><00:25:01.379><c> if</c><00:25:01.679><c> you</c><00:25:02.009><c> look</c><00:25:02.789><c> at</c><00:25:02.909><c> the</c><00:25:02.999><c> two</c><00:25:03.179><c> they</c>

00:25:03.709 --> 00:25:03.719 align:start position:0%
there was if you look at the two they
 

00:25:03.719 --> 00:25:06.619 align:start position:0%
there was if you look at the two they
perform<00:25:04.109><c> about</c><00:25:04.320><c> the</c><00:25:04.739><c> same</c><00:25:04.950><c> if</c><00:25:05.580><c> you're</c><00:25:06.210><c> using</c><00:25:06.450><c> a</c>

00:25:06.619 --> 00:25:06.629 align:start position:0%
perform about the same if you're using a
 

00:25:06.629 --> 00:25:09.409 align:start position:0%
perform about the same if you're using a
single<00:25:06.960><c> threaded</c><00:25:07.200><c> environment</c><00:25:08.039><c> so</c><00:25:08.879><c> both</c><00:25:09.269><c> will</c>

00:25:09.409 --> 00:25:09.419 align:start position:0%
single threaded environment so both will
 

00:25:09.419 --> 00:25:11.930 align:start position:0%
single threaded environment so both will
be<00:25:09.599><c> about</c><00:25:09.809><c> roughly</c><00:25:10.200><c> equal</c><00:25:10.589><c> if</c><00:25:11.460><c> you</c><00:25:11.519><c> start</c>

00:25:11.930 --> 00:25:11.940 align:start position:0%
be about roughly equal if you start
 

00:25:11.940 --> 00:25:13.310 align:start position:0%
be about roughly equal if you start
using<00:25:12.089><c> multiple</c><00:25:12.690><c> threads</c><00:25:12.929><c> and</c><00:25:13.109><c> you've</c><00:25:13.229><c> got</c>

00:25:13.310 --> 00:25:13.320 align:start position:0%
using multiple threads and you've got
 

00:25:13.320 --> 00:25:15.109 align:start position:0%
using multiple threads and you've got
more<00:25:13.440><c> cause</c><00:25:13.859><c> in</c><00:25:14.369><c> terms</c><00:25:14.639><c> of</c><00:25:14.729><c> what</c><00:25:14.849><c> you're</c><00:25:14.969><c> doing</c>

00:25:15.109 --> 00:25:15.119 align:start position:0%
more cause in terms of what you're doing
 

00:25:15.119 --> 00:25:17.269 align:start position:0%
more cause in terms of what you're doing
with<00:25:15.269><c> though</c><00:25:15.539><c> that</c><00:25:15.869><c> particular</c><00:25:15.960><c> part</c><00:25:16.499><c> then</c>

00:25:17.269 --> 00:25:17.279 align:start position:0%
with though that particular part then
 

00:25:17.279 --> 00:25:20.209 align:start position:0%
with though that particular part then
lambdas<00:25:18.119><c> will</c><00:25:18.359><c> win</c><00:25:18.570><c> so</c><00:25:19.109><c> lambdas</c><00:25:19.529><c> perform</c><00:25:20.190><c> a</c>

00:25:20.209 --> 00:25:20.219 align:start position:0%
lambdas will win so lambdas perform a
 

00:25:20.219 --> 00:25:22.129 align:start position:0%
lambdas will win so lambdas perform a
lot<00:25:20.399><c> better</c><00:25:20.669><c> as</c><00:25:21.029><c> the</c><00:25:21.570><c> number</c><00:25:21.809><c> of</c><00:25:21.899><c> threads</c>

00:25:22.129 --> 00:25:22.139 align:start position:0%
lot better as the number of threads
 

00:25:22.139 --> 00:25:25.009 align:start position:0%
lot better as the number of threads
number<00:25:22.559><c> of</c><00:25:22.619><c> cores</c><00:25:22.859><c> increases</c><00:25:24.019><c> anonymous</c>

00:25:25.009 --> 00:25:25.019 align:start position:0%
number of cores increases anonymous
 

00:25:25.019 --> 00:25:27.229 align:start position:0%
number of cores increases anonymous
inner<00:25:25.169><c> classes</c><00:25:25.379><c> don't</c><00:25:26.099><c> get</c><00:25:26.399><c> the</c><00:25:26.519><c> same</c><00:25:26.669><c> benefit</c>

00:25:27.229 --> 00:25:27.239 align:start position:0%
inner classes don't get the same benefit
 

00:25:27.239 --> 00:25:29.209 align:start position:0%
inner classes don't get the same benefit
in<00:25:27.450><c> terms</c><00:25:27.779><c> of</c><00:25:27.960><c> the</c><00:25:28.109><c> Stan</c><00:25:28.440><c> she</c><00:25:28.589><c> ation</c><00:25:28.830><c> addresses</c>

00:25:29.209 --> 00:25:29.219 align:start position:0%
in terms of the Stan she ation addresses
 

00:25:29.219 --> 00:25:32.419 align:start position:0%
in terms of the Stan she ation addresses
of<00:25:29.309><c> their</c><00:25:29.429><c> the</c><00:25:29.549><c> capturing</c><00:25:31.039><c> the</c><00:25:32.039><c> other</c><00:25:32.190><c> thing</c>

00:25:32.419 --> 00:25:32.429 align:start position:0%
of their the capturing the other thing
 

00:25:32.429 --> 00:25:35.719 align:start position:0%
of their the capturing the other thing
that<00:25:32.839><c> we</c><00:25:33.839><c> was</c><00:25:34.799><c> found</c><00:25:35.009><c> about</c><00:25:35.249><c> the</c><00:25:35.489><c> way</c><00:25:35.580><c> that</c>

00:25:35.719 --> 00:25:35.729 align:start position:0%
that we was found about the way that
 

00:25:35.729 --> 00:25:37.700 align:start position:0%
that we was found about the way that
lambdas<00:25:36.149><c> work</c><00:25:36.450><c> in</c><00:25:36.659><c> comparison</c><00:25:37.259><c> to</c><00:25:37.349><c> anonymous</c>

00:25:37.700 --> 00:25:37.710 align:start position:0%
lambdas work in comparison to anonymous
 

00:25:37.710 --> 00:25:39.680 align:start position:0%
lambdas work in comparison to anonymous
inner<00:25:37.889><c> classes</c><00:25:38.099><c> is</c><00:25:38.519><c> that</c><00:25:39.179><c> if</c><00:25:39.299><c> you</c><00:25:39.419><c> have</c><00:25:39.659><c> a</c>

00:25:39.680 --> 00:25:39.690 align:start position:0%
inner classes is that if you have a
 

00:25:39.690 --> 00:25:44.299 align:start position:0%
inner classes is that if you have a
non-static<00:25:40.489><c> anonymous</c><00:25:41.489><c> in</c><00:25:41.580><c> a</c><00:25:41.639><c> class</c><00:25:41.899><c> then</c><00:25:43.309><c> you</c>

00:25:44.299 --> 00:25:44.309 align:start position:0%
non-static anonymous in a class then you
 

00:25:44.309 --> 00:25:46.279 align:start position:0%
non-static anonymous in a class then you
actually<00:25:44.460><c> need</c><00:25:44.759><c> 50</c><00:25:45.149><c> percent</c><00:25:45.389><c> more</c><00:25:45.599><c> space</c><00:25:45.989><c> to</c>

00:25:46.279 --> 00:25:46.289 align:start position:0%
actually need 50 percent more space to
 

00:25:46.289 --> 00:25:48.379 align:start position:0%
actually need 50 percent more space to
represent<00:25:46.440><c> a</c><00:25:46.950><c> reference</c><00:25:47.639><c> to</c><00:25:47.879><c> a</c><00:25:47.909><c> captured</c>

00:25:48.379 --> 00:25:48.389 align:start position:0%
represent a reference to a captured
 

00:25:48.389 --> 00:25:49.909 align:start position:0%
represent a reference to a captured
variable<00:25:48.839><c> than</c><00:25:49.109><c> you</c><00:25:49.200><c> do</c><00:25:49.349><c> in</c><00:25:49.619><c> a</c><00:25:49.739><c> lambda</c>

00:25:49.909 --> 00:25:49.919 align:start position:0%
variable than you do in a lambda
 

00:25:49.919 --> 00:25:51.619 align:start position:0%
variable than you do in a lambda
expression<00:25:50.129><c> so</c><00:25:50.940><c> again</c><00:25:51.179><c> this</c><00:25:51.239><c> is</c><00:25:51.330><c> a</c><00:25:51.389><c> small</c>

00:25:51.619 --> 00:25:51.629 align:start position:0%
expression so again this is a small
 

00:25:51.629 --> 00:25:53.209 align:start position:0%
expression so again this is a small
thing<00:25:51.869><c> but</c><00:25:51.899><c> it</c><00:25:52.080><c> means</c><00:25:52.259><c> that</c><00:25:52.409><c> lambdas</c><00:25:52.859><c> again</c>

00:25:53.209 --> 00:25:53.219 align:start position:0%
thing but it means that lambdas again
 

00:25:53.219 --> 00:25:55.459 align:start position:0%
thing but it means that lambdas again
come<00:25:53.639><c> out</c><00:25:53.789><c> on</c><00:25:53.909><c> a</c><00:25:54.089><c> head</c><00:25:54.629><c> in</c><00:25:54.960><c> terms</c><00:25:55.320><c> of</c>

00:25:55.459 --> 00:25:55.469 align:start position:0%
come out on a head in terms of
 

00:25:55.469 --> 00:25:57.889 align:start position:0%
come out on a head in terms of
performance<00:25:56.059><c> and</c><00:25:57.059><c> then</c><00:25:57.269><c> the</c><00:25:57.389><c> last</c><00:25:57.509><c> bit</c><00:25:57.719><c> is</c>

00:25:57.889 --> 00:25:57.899 align:start position:0%
performance and then the last bit is
 

00:25:57.899 --> 00:26:00.409 align:start position:0%
performance and then the last bit is
where<00:25:58.229><c> both</c><00:25:58.679><c> of</c><00:25:58.889><c> the</c><00:25:59.070><c> different</c><00:25:59.759><c> ways</c><00:26:00.299><c> of</c>

00:26:00.409 --> 00:26:00.419 align:start position:0%
where both of the different ways of
 

00:26:00.419 --> 00:26:02.570 align:start position:0%
where both of the different ways of
doing<00:26:00.539><c> things</c><00:26:00.779><c> invoke</c><00:26:01.289><c> the</c><00:26:01.619><c> method</c><00:26:01.769><c> since</c>

00:26:02.570 --> 00:26:02.580 align:start position:0%
doing things invoke the method since
 

00:26:02.580 --> 00:26:03.499 align:start position:0%
doing things invoke the method since
they're<00:26:02.729><c> doing</c><00:26:02.909><c> the</c><00:26:02.969><c> same</c><00:26:02.999><c> thing</c><00:26:03.179><c> they're</c>

00:26:03.499 --> 00:26:03.509 align:start position:0%
they're doing the same thing they're
 

00:26:03.509 --> 00:26:05.149 align:start position:0%
they're doing the same thing they're
invoking<00:26:03.719><c> a</c><00:26:03.929><c> method</c><00:26:03.960><c> there's</c><00:26:04.710><c> no</c><00:26:04.830><c> difference</c>

00:26:05.149 --> 00:26:05.159 align:start position:0%
invoking a method there's no difference
 

00:26:05.159 --> 00:26:07.399 align:start position:0%
invoking a method there's no difference
between<00:26:05.279><c> those</c><00:26:05.580><c> two</c><00:26:05.639><c> so</c><00:26:06.450><c> overall</c><00:26:06.749><c> what</c><00:26:07.229><c> was</c>

00:26:07.399 --> 00:26:07.409 align:start position:0%
between those two so overall what was
 

00:26:07.409 --> 00:26:09.349 align:start position:0%
between those two so overall what was
found<00:26:07.649><c> was</c><00:26:08.009><c> that</c><00:26:08.039><c> lambda</c><00:26:08.700><c> expressions</c><00:26:09.179><c> come</c>

00:26:09.349 --> 00:26:09.359 align:start position:0%
found was that lambda expressions come
 

00:26:09.359 --> 00:26:12.529 align:start position:0%
found was that lambda expressions come
out<00:26:09.539><c> on</c><00:26:09.690><c> top</c><00:26:10.200><c> in</c><00:26:10.529><c> terms</c><00:26:10.919><c> of</c><00:26:11.070><c> performance</c><00:26:11.539><c> which</c>

00:26:12.529 --> 00:26:12.539 align:start position:0%
out on top in terms of performance which
 

00:26:12.539 --> 00:26:16.369 align:start position:0%
out on top in terms of performance which
is<00:26:12.570><c> what</c><00:26:13.019><c> you</c><00:26:13.109><c> would</c><00:26:13.200><c> hope</c><00:26:14.509><c> now</c><00:26:15.509><c> in</c><00:26:16.019><c> terms</c><00:26:16.289><c> of</c>

00:26:16.369 --> 00:26:16.379 align:start position:0%
is what you would hope now in terms of
 

00:26:16.379 --> 00:26:18.229 align:start position:0%
is what you would hope now in terms of
like<00:26:16.589><c> rules</c><00:26:16.859><c> of</c><00:26:17.039><c> thumb</c><00:26:17.249><c> non</c><00:26:17.759><c> capturing</c>

00:26:18.229 --> 00:26:18.239 align:start position:0%
like rules of thumb non capturing
 

00:26:18.239 --> 00:26:20.659 align:start position:0%
like rules of thumb non capturing
lambdas<00:26:18.599><c> automatically</c><00:26:19.320><c> optimized</c><00:26:19.710><c> just</c><00:26:20.339><c> the</c>

00:26:20.659 --> 00:26:20.669 align:start position:0%
lambdas automatically optimized just the
 

00:26:20.669 --> 00:26:22.249 align:start position:0%
lambdas automatically optimized just the
way<00:26:20.759><c> they</c><00:26:20.909><c> work</c><00:26:21.119><c> is</c><00:26:21.359><c> that</c><00:26:21.869><c> they're</c><00:26:22.049><c> they're</c>

00:26:22.249 --> 00:26:22.259 align:start position:0%
way they work is that they're they're
 

00:26:22.259 --> 00:26:25.339 align:start position:0%
way they work is that they're they're
better<00:26:22.559><c> in</c><00:26:23.009><c> terms</c><00:26:23.249><c> of</c><00:26:23.399><c> optimization</c><00:26:24.349><c> second</c>

00:26:25.339 --> 00:26:25.349 align:start position:0%
better in terms of optimization second
 

00:26:25.349 --> 00:26:26.930 align:start position:0%
better in terms of optimization second
thing<00:26:25.469><c> is</c><00:26:25.559><c> that</c><00:26:25.710><c> method</c><00:26:26.099><c> references</c><00:26:26.309><c> are</c>

00:26:26.930 --> 00:26:26.940 align:start position:0%
thing is that method references are
 

00:26:26.940 --> 00:26:28.260 align:start position:0%
thing is that method references are
slightly<00:26:27.329><c> more</c><00:26:27.659><c> up</c>

00:26:28.260 --> 00:26:28.270 align:start position:0%
slightly more up
 

00:26:28.270 --> 00:26:31.410 align:start position:0%
slightly more up
the<00:26:28.870><c> reason</c><00:26:29.140><c> for</c><00:26:29.170><c> that</c><00:26:29.320><c> is</c><00:26:29.950><c> that</c><00:26:30.670><c> as</c><00:26:31.270><c> I</c>

00:26:31.410 --> 00:26:31.420 align:start position:0%
the reason for that is that as I
 

00:26:31.420 --> 00:26:32.640 align:start position:0%
the reason for that is that as I
described<00:26:31.780><c> to</c><00:26:31.809><c> you</c><00:26:31.929><c> earlier</c><00:26:32.260><c> one</c><00:26:32.440><c> of</c><00:26:32.470><c> the</c>

00:26:32.640 --> 00:26:32.650 align:start position:0%
described to you earlier one of the
 

00:26:32.650 --> 00:26:34.230 align:start position:0%
described to you earlier one of the
first<00:26:33.160><c> thing</c><00:26:33.340><c> that</c><00:26:33.370><c> has</c><00:26:33.610><c> to</c><00:26:33.640><c> happen</c><00:26:33.790><c> where</c>

00:26:34.230 --> 00:26:34.240 align:start position:0%
first thing that has to happen where
 

00:26:34.240 --> 00:26:36.540 align:start position:0%
first thing that has to happen where
lambda<00:26:34.690><c> is</c><00:26:34.840><c> compiled</c><00:26:35.320><c> is</c><00:26:35.620><c> you</c><00:26:36.250><c> have</c><00:26:36.429><c> to</c>

00:26:36.540 --> 00:26:36.550 align:start position:0%
lambda is compiled is you have to
 

00:26:36.550 --> 00:26:38.340 align:start position:0%
lambda is compiled is you have to
generate<00:26:36.850><c> a</c><00:26:36.880><c> new</c><00:26:37.059><c> method</c><00:26:37.480><c> which</c><00:26:37.720><c> has</c><00:26:37.780><c> the</c><00:26:38.110><c> body</c>

00:26:38.340 --> 00:26:38.350 align:start position:0%
generate a new method which has the body
 

00:26:38.350 --> 00:26:41.400 align:start position:0%
generate a new method which has the body
of<00:26:38.650><c> the</c><00:26:39.040><c> lambda</c><00:26:39.340><c> expression</c><00:26:39.820><c> in</c><00:26:39.970><c> it</c><00:26:40.179><c> if</c><00:26:41.170><c> you're</c>

00:26:41.400 --> 00:26:41.410 align:start position:0%
of the lambda expression in it if you're
 

00:26:41.410 --> 00:26:43.290 align:start position:0%
of the lambda expression in it if you're
using<00:26:41.559><c> a</c><00:26:41.679><c> method</c><00:26:41.950><c> reference</c><00:26:42.309><c> you</c><00:26:43.000><c> don't</c><00:26:43.150><c> need</c>

00:26:43.290 --> 00:26:43.300 align:start position:0%
using a method reference you don't need
 

00:26:43.300 --> 00:26:44.460 align:start position:0%
using a method reference you don't need
to<00:26:43.360><c> do</c><00:26:43.450><c> that</c><00:26:43.630><c> because</c><00:26:43.870><c> you</c><00:26:44.050><c> already</c><00:26:44.080><c> have</c><00:26:44.440><c> a</c>

00:26:44.460 --> 00:26:44.470 align:start position:0%
to do that because you already have a
 

00:26:44.470 --> 00:26:45.960 align:start position:0%
to do that because you already have a
method<00:26:44.800><c> reference</c><00:26:45.160><c> so</c><00:26:45.520><c> you</c><00:26:45.550><c> don't</c><00:26:45.760><c> need</c><00:26:45.910><c> to</c>

00:26:45.960 --> 00:26:45.970 align:start position:0%
method reference so you don't need to
 

00:26:45.970 --> 00:26:47.760 align:start position:0%
method reference so you don't need to
create<00:26:46.120><c> a</c><00:26:46.210><c> new</c><00:26:46.270><c> one</c><00:26:46.600><c> to</c><00:26:47.110><c> put</c><00:26:47.350><c> a</c><00:26:47.500><c> call</c><00:26:47.740><c> to</c>

00:26:47.760 --> 00:26:47.770 align:start position:0%
create a new one to put a call to
 

00:26:47.770 --> 00:26:50.070 align:start position:0%
create a new one to put a call to
another<00:26:47.980><c> method</c><00:26:48.400><c> in</c><00:26:48.490><c> it</c><00:26:48.610><c> so</c><00:26:49.059><c> the</c><00:26:49.660><c> compiler</c>

00:26:50.070 --> 00:26:50.080 align:start position:0%
another method in it so the compiler
 

00:26:50.080 --> 00:26:52.380 align:start position:0%
another method in it so the compiler
will<00:26:50.320><c> simply</c><00:26:50.679><c> ignore</c><00:26:50.970><c> having</c><00:26:51.970><c> to</c><00:26:52.090><c> create</c><00:26:52.330><c> a</c>

00:26:52.380 --> 00:26:52.390 align:start position:0%
will simply ignore having to create a
 

00:26:52.390 --> 00:26:54.090 align:start position:0%
will simply ignore having to create a
new<00:26:52.510><c> method</c><00:26:52.900><c> and</c><00:26:53.080><c> we'll</c><00:26:53.320><c> just</c><00:26:53.530><c> use</c><00:26:53.710><c> the</c><00:26:53.830><c> method</c>

00:26:54.090 --> 00:26:54.100 align:start position:0%
new method and we'll just use the method
 

00:26:54.100 --> 00:26:56.430 align:start position:0%
new method and we'll just use the method
reference<00:26:54.460><c> directly</c><00:26:54.910><c> so</c><00:26:55.809><c> that</c><00:26:55.990><c> way</c><00:26:56.140><c> if</c><00:26:56.350><c> you</c>

00:26:56.430 --> 00:26:56.440 align:start position:0%
reference directly so that way if you
 

00:26:56.440 --> 00:26:57.720 align:start position:0%
reference directly so that way if you
use<00:26:56.590><c> a</c><00:26:56.620><c> method</c><00:26:56.830><c> reference</c><00:26:57.309><c> it's</c><00:26:57.429><c> actually</c>

00:26:57.720 --> 00:26:57.730 align:start position:0%
use a method reference it's actually
 

00:26:57.730 --> 00:27:00.690 align:start position:0%
use a method reference it's actually
more<00:26:58.120><c> efficient</c><00:26:58.510><c> than</c><00:26:58.990><c> using</c><00:26:59.020><c> the</c><00:26:59.410><c> same</c><00:26:59.710><c> code</c>

00:27:00.690 --> 00:27:00.700 align:start position:0%
more efficient than using the same code
 

00:27:00.700 --> 00:27:04.070 align:start position:0%
more efficient than using the same code
as<00:27:01.120><c> a</c><00:27:01.809><c> lambda</c><00:27:02.110><c> explicit</c><00:27:02.740><c> lambda</c><00:27:02.980><c> expression</c>

00:27:04.070 --> 00:27:04.080 align:start position:0%
as a lambda explicit lambda expression
 

00:27:04.080 --> 00:27:06.570 align:start position:0%
as a lambda explicit lambda expression
the<00:27:05.080><c> other</c><00:27:05.200><c> thing</c><00:27:05.380><c> that</c><00:27:05.410><c> they</c><00:27:05.590><c> found</c><00:27:05.620><c> in</c><00:27:06.280><c> terms</c>

00:27:06.570 --> 00:27:06.580 align:start position:0%
the other thing that they found in terms
 

00:27:06.580 --> 00:27:09.060 align:start position:0%
the other thing that they found in terms
of<00:27:06.730><c> doing</c><00:27:06.820><c> their</c><00:27:07.000><c> analysis</c><00:27:07.480><c> was</c><00:27:07.510><c> that</c><00:27:08.070><c> tiered</c>

00:27:09.060 --> 00:27:09.070 align:start position:0%
of doing their analysis was that tiered
 

00:27:09.070 --> 00:27:11.400 align:start position:0%
of doing their analysis was that tiered
compilation<00:27:09.700><c> gave</c><00:27:10.030><c> better</c><00:27:10.330><c> results</c><00:27:10.900><c> with</c>

00:27:11.400 --> 00:27:11.410 align:start position:0%
compilation gave better results with
 

00:27:11.410 --> 00:27:13.710 align:start position:0%
compilation gave better results with
lambda<00:27:11.890><c> expressions</c><00:27:12.520><c> now</c><00:27:13.179><c> the</c><00:27:13.240><c> point</c><00:27:13.570><c> is</c><00:27:13.630><c> that</c>

00:27:13.710 --> 00:27:13.720 align:start position:0%
lambda expressions now the point is that
 

00:27:13.720 --> 00:27:15.380 align:start position:0%
lambda expressions now the point is that
tier<00:27:13.990><c> compilation</c><00:27:14.530><c> is</c><00:27:14.620><c> turned</c><00:27:14.860><c> on</c><00:27:15.010><c> by</c><00:27:15.190><c> default</c>

00:27:15.380 --> 00:27:15.390 align:start position:0%
tier compilation is turned on by default
 

00:27:15.390 --> 00:27:18.900 align:start position:0%
tier compilation is turned on by default
so<00:27:16.390><c> the</c><00:27:16.870><c> advice</c><00:27:17.080><c> really</c><00:27:17.290><c> is</c><00:27:17.440><c> don't</c><00:27:17.920><c> use</c><00:27:18.220><c> -</c>

00:27:18.900 --> 00:27:18.910 align:start position:0%
so the advice really is don't use -
 

00:27:18.910 --> 00:27:20.910 align:start position:0%
so the advice really is don't use -
tiered<00:27:19.840><c> compilation</c><00:27:20.290><c> don't</c><00:27:20.470><c> turn</c><00:27:20.679><c> tier</c>

00:27:20.910 --> 00:27:20.920 align:start position:0%
tiered compilation don't turn tier
 

00:27:20.920 --> 00:27:22.830 align:start position:0%
tiered compilation don't turn tier
compilation<00:27:21.520><c> off</c><00:27:21.700><c> if</c><00:27:21.970><c> you</c><00:27:22.510><c> want</c><00:27:22.660><c> better</c>

00:27:22.830 --> 00:27:22.840 align:start position:0%
compilation off if you want better
 

00:27:22.840 --> 00:27:25.370 align:start position:0%
compilation off if you want better
performance<00:27:23.050><c> from</c><00:27:23.500><c> your</c><00:27:23.679><c> lambda</c><00:27:24.010><c> expressions</c>

00:27:25.370 --> 00:27:25.380 align:start position:0%
performance from your lambda expressions
 

00:27:25.380 --> 00:27:28.710 align:start position:0%
performance from your lambda expressions
right<00:27:26.380><c> so</c><00:27:26.590><c> that's</c><00:27:26.679><c> performance</c><00:27:27.640><c> okay</c><00:27:28.390><c> so</c><00:27:28.450><c> now</c>

00:27:28.710 --> 00:27:28.720 align:start position:0%
right so that's performance okay so now
 

00:27:28.720 --> 00:27:30.810 align:start position:0%
right so that's performance okay so now
we've<00:27:28.870><c> had</c><00:27:29.020><c> the</c><00:27:29.280><c> interesting</c><00:27:30.280><c> and</c><00:27:30.490><c> useful</c>

00:27:30.810 --> 00:27:30.820 align:start position:0%
we've had the interesting and useful
 

00:27:30.820 --> 00:27:32.580 align:start position:0%
we've had the interesting and useful
section<00:27:31.360><c> now</c><00:27:31.960><c> we're</c><00:27:32.080><c> going</c><00:27:32.170><c> to</c><00:27:32.230><c> move</c><00:27:32.350><c> on</c><00:27:32.470><c> to</c>

00:27:32.580 --> 00:27:32.590 align:start position:0%
section now we're going to move on to
 

00:27:32.590 --> 00:27:35.750 align:start position:0%
section now we're going to move on to
the<00:27:32.710><c> interesting</c><00:27:33.250><c> but</c><00:27:33.640><c> also</c><00:27:34.300><c> useful</c><00:27:34.600><c> section</c>

00:27:35.750 --> 00:27:35.760 align:start position:0%
the interesting but also useful section
 

00:27:35.760 --> 00:27:38.640 align:start position:0%
the interesting but also useful section
right<00:27:36.760><c> so</c><00:27:36.940><c> the</c><00:27:37.030><c> idea</c><00:27:37.210><c> here</c><00:27:37.270><c> is</c><00:27:37.420><c> how</c><00:27:37.809><c> far</c><00:27:38.200><c> can</c><00:27:38.260><c> we</c>

00:27:38.640 --> 00:27:38.650 align:start position:0%
right so the idea here is how far can we
 

00:27:38.650 --> 00:27:41.010 align:start position:0%
right so the idea here is how far can we
take<00:27:38.679><c> lambdas</c><00:27:39.420><c> now</c><00:27:40.420><c> I</c><00:27:40.450><c> have</c><00:27:40.660><c> to</c><00:27:40.750><c> give</c><00:27:40.870><c> credit</c>

00:27:41.010 --> 00:27:41.020 align:start position:0%
take lambdas now I have to give credit
 

00:27:41.020 --> 00:27:43.860 align:start position:0%
take lambdas now I have to give credit
to<00:27:41.650><c> somebody</c><00:27:42.610><c> else</c><00:27:42.880><c> for</c><00:27:43.030><c> giving</c><00:27:43.780><c> me</c>

00:27:43.860 --> 00:27:43.870 align:start position:0%
to somebody else for giving me
 

00:27:43.870 --> 00:27:46.590 align:start position:0%
to somebody else for giving me
inspiration<00:27:44.200><c> on</c><00:27:44.590><c> this</c><00:27:44.800><c> because</c><00:27:45.670><c> it</c><00:27:46.150><c> was</c><00:27:46.330><c> last</c>

00:27:46.590 --> 00:27:46.600 align:start position:0%
inspiration on this because it was last
 

00:27:46.600 --> 00:27:49.740 align:start position:0%
inspiration on this because it was last
year<00:27:46.990><c> at</c><00:27:47.170><c> conference</c><00:27:48.100><c> in</c><00:27:48.220><c> Switzerland</c><00:27:48.750><c> there</c>

00:27:49.740 --> 00:27:49.750 align:start position:0%
year at conference in Switzerland there
 

00:27:49.750 --> 00:27:51.450 align:start position:0%
year at conference in Switzerland there
was<00:27:49.900><c> somebody</c><00:27:50.290><c> called</c><00:27:50.500><c> Jarek</c><00:27:50.830><c> or</c><00:27:51.040><c> an</c><00:27:51.160><c> attached</c>

00:27:51.450 --> 00:27:51.460 align:start position:0%
was somebody called Jarek or an attached
 

00:27:51.460 --> 00:27:54.000 align:start position:0%
was somebody called Jarek or an attached
key<00:27:51.760><c> who</c><00:27:52.360><c> did</c><00:27:52.900><c> a</c><00:27:52.929><c> presentation</c><00:27:53.710><c> on</c><00:27:53.770><c> lambda</c>

00:27:54.000 --> 00:27:54.010 align:start position:0%
key who did a presentation on lambda
 

00:27:54.010 --> 00:27:55.830 align:start position:0%
key who did a presentation on lambda
expressions<00:27:54.610><c> I</c><00:27:54.790><c> sat</c><00:27:55.300><c> there</c><00:27:55.450><c> and</c><00:27:55.480><c> I</c><00:27:55.570><c> watched</c><00:27:55.750><c> it</c>

00:27:55.830 --> 00:27:55.840 align:start position:0%
expressions I sat there and I watched it
 

00:27:55.840 --> 00:27:57.930 align:start position:0%
expressions I sat there and I watched it
he<00:27:55.960><c> did</c><00:27:56.110><c> it</c><00:27:56.200><c> in</c><00:27:56.290><c> an</c><00:27:56.410><c> IDE</c><00:27:56.740><c> which</c><00:27:57.130><c> was</c><00:27:57.340><c> was</c><00:27:57.610><c> just</c>

00:27:57.930 --> 00:27:57.940 align:start position:0%
he did it in an IDE which was was just
 

00:27:57.940 --> 00:27:58.860 align:start position:0%
he did it in an IDE which was was just
blew<00:27:58.300><c> me</c><00:27:58.450><c> away</c>

00:27:58.860 --> 00:27:58.870 align:start position:0%
blew me away
 

00:27:58.870 --> 00:28:02.190 align:start position:0%
blew me away
so<00:27:59.230><c> he</c><00:27:59.290><c> did</c><00:27:59.440><c> it</c><00:27:59.470><c> into</c><00:27:59.679><c> IDE</c><00:27:59.950><c> and</c><00:28:00.540><c> he</c><00:28:01.540><c> kind</c><00:28:01.990><c> of</c><00:28:02.020><c> did</c>

00:28:02.190 --> 00:28:02.200 align:start position:0%
so he did it into IDE and he kind of did
 

00:28:02.200 --> 00:28:03.870 align:start position:0%
so he did it into IDE and he kind of did
all<00:28:02.230><c> this</c><00:28:02.380><c> this</c><00:28:02.770><c> Java</c><00:28:03.070><c> on</c><00:28:03.429><c> the</c><00:28:03.610><c> screen</c><00:28:03.820><c> I</c>

00:28:03.870 --> 00:28:03.880 align:start position:0%
all this this Java on the screen I
 

00:28:03.880 --> 00:28:05.700 align:start position:0%
all this this Java on the screen I
looked<00:28:04.150><c> it</c><00:28:04.240><c> I</c><00:28:04.300><c> thought</c><00:28:04.450><c> I</c><00:28:04.480><c> have</c><00:28:04.690><c> no</c><00:28:05.200><c> idea</c><00:28:05.559><c> what</c>

00:28:05.700 --> 00:28:05.710 align:start position:0%
looked it I thought I have no idea what
 

00:28:05.710 --> 00:28:08.280 align:start position:0%
looked it I thought I have no idea what
he's<00:28:05.830><c> doing</c><00:28:06.100><c> and</c><00:28:06.309><c> I</c><00:28:07.300><c> had</c><00:28:07.480><c> to</c><00:28:07.630><c> think</c><00:28:07.929><c> about</c><00:28:08.140><c> it</c><00:28:08.260><c> a</c>

00:28:08.280 --> 00:28:08.290 align:start position:0%
he's doing and I had to think about it a
 

00:28:08.290 --> 00:28:10.410 align:start position:0%
he's doing and I had to think about it a
lot<00:28:08.410><c> and</c><00:28:08.530><c> I</c><00:28:08.590><c> had</c><00:28:08.679><c> to</c><00:28:08.770><c> go</c><00:28:08.860><c> and</c><00:28:09.100><c> sort</c><00:28:09.550><c> of</c><00:28:09.610><c> I</c><00:28:10.030><c> talked</c>

00:28:10.410 --> 00:28:10.420 align:start position:0%
lot and I had to go and sort of I talked
 

00:28:10.420 --> 00:28:12.390 align:start position:0%
lot and I had to go and sort of I talked
to<00:28:10.540><c> him</c><00:28:10.660><c> afterwards</c><00:28:10.960><c> and</c><00:28:11.559><c> I</c><00:28:11.620><c> we</c><00:28:12.130><c> kind</c><00:28:12.340><c> of</c>

00:28:12.390 --> 00:28:12.400 align:start position:0%
to him afterwards and I we kind of
 

00:28:12.400 --> 00:28:14.700 align:start position:0%
to him afterwards and I we kind of
chatted<00:28:12.670><c> about</c><00:28:12.760><c> it</c><00:28:12.880><c> and</c><00:28:13.120><c> I</c><00:28:13.210><c> and</c><00:28:13.570><c> so</c><00:28:14.260><c> this</c><00:28:14.559><c> is</c>

00:28:14.700 --> 00:28:14.710 align:start position:0%
chatted about it and I and so this is
 

00:28:14.710 --> 00:28:17.850 align:start position:0%
chatted about it and I and so this is
this<00:28:14.950><c> is</c><00:28:15.010><c> where</c><00:28:15.250><c> we</c><00:28:15.309><c> come</c><00:28:15.460><c> from</c><00:28:16.590><c> right</c><00:28:17.590><c> so</c><00:28:17.800><c> the</c>

00:28:17.850 --> 00:28:17.860 align:start position:0%
this is where we come from right so the
 

00:28:17.860 --> 00:28:20.580 align:start position:0%
this is where we come from right so the
first<00:28:17.980><c> thing</c><00:28:18.190><c> is</c><00:28:18.809><c> we</c><00:28:19.809><c> call</c><00:28:20.020><c> all</c><00:28:20.170><c> these</c><00:28:20.350><c> things</c>

00:28:20.580 --> 00:28:20.590 align:start position:0%
first thing is we call all these things
 

00:28:20.590 --> 00:28:22.169 align:start position:0%
first thing is we call all these things
lambda<00:28:20.950><c> expressions</c><00:28:21.400><c> why</c><00:28:21.670><c> do</c><00:28:21.730><c> we</c><00:28:21.910><c> call</c><00:28:22.059><c> them</c>

00:28:22.169 --> 00:28:22.179 align:start position:0%
lambda expressions why do we call them
 

00:28:22.179 --> 00:28:23.880 align:start position:0%
lambda expressions why do we call them
lambda<00:28:22.480><c> expressions</c><00:28:22.990><c> and</c><00:28:23.350><c> the</c><00:28:23.470><c> reason</c><00:28:23.740><c> is</c>

00:28:23.880 --> 00:28:23.890 align:start position:0%
lambda expressions and the reason is
 

00:28:23.890 --> 00:28:26.850 align:start position:0%
lambda expressions and the reason is
because<00:28:24.160><c> of</c><00:28:24.820><c> Alonzo</c><00:28:25.570><c> Church</c><00:28:25.900><c> so</c><00:28:26.470><c> Alonzo</c>

00:28:26.850 --> 00:28:26.860 align:start position:0%
because of Alonzo Church so Alonzo
 

00:28:26.860 --> 00:28:29.340 align:start position:0%
because of Alonzo Church so Alonzo
Church<00:28:27.130><c> came</c><00:28:27.550><c> up</c><00:28:27.730><c> with</c><00:28:28.000><c> the</c><00:28:28.120><c> idea</c><00:28:28.450><c> of</c><00:28:28.510><c> lambda</c>

00:28:29.340 --> 00:28:29.350 align:start position:0%
Church came up with the idea of lambda
 

00:28:29.350 --> 00:28:30.000 align:start position:0%
Church came up with the idea of lambda
calculus

00:28:30.000 --> 00:28:30.010 align:start position:0%
calculus
 

00:28:30.010 --> 00:28:32.730 align:start position:0%
calculus
back<00:28:30.490><c> in</c><00:28:30.700><c> the</c><00:28:30.910><c> middle</c><00:28:31.090><c> of</c><00:28:31.150><c> the</c><00:28:31.210><c> 1930s</c><00:28:31.900><c> so</c>

00:28:32.730 --> 00:28:32.740 align:start position:0%
back in the middle of the 1930s so
 

00:28:32.740 --> 00:28:34.230 align:start position:0%
back in the middle of the 1930s so
clearly<00:28:33.190><c> you</c><00:28:33.400><c> kind</c><00:28:33.640><c> of</c><00:28:33.700><c> think</c><00:28:33.880><c> to</c><00:28:33.910><c> yourself</c>

00:28:34.230 --> 00:28:34.240 align:start position:0%
clearly you kind of think to yourself
 

00:28:34.240 --> 00:28:35.970 align:start position:0%
clearly you kind of think to yourself
well<00:28:34.390><c> what</c><00:28:34.630><c> does</c><00:28:34.840><c> that</c><00:28:34.870><c> have</c><00:28:35.020><c> to</c><00:28:35.290><c> do</c><00:28:35.500><c> with</c><00:28:35.530><c> Java</c>

00:28:35.970 --> 00:28:35.980 align:start position:0%
well what does that have to do with Java
 

00:28:35.980 --> 00:28:37.770 align:start position:0%
well what does that have to do with Java
which<00:28:36.550><c> didn't</c><00:28:36.970><c> actually</c><00:28:37.150><c> come</c><00:28:37.450><c> out</c><00:28:37.600><c> until</c>

00:28:37.770 --> 00:28:37.780 align:start position:0%
which didn't actually come out until
 

00:28:37.780 --> 00:28:41.700 align:start position:0%
which didn't actually come out until
1995<00:28:38.740><c> so</c><00:28:39.160><c> you</c><00:28:39.220><c> know</c><00:28:39.520><c> 60</c><00:28:39.970><c> years</c><00:28:40.210><c> later</c><00:28:40.710><c> Java</c>

00:28:41.700 --> 00:28:41.710 align:start position:0%
1995 so you know 60 years later Java
 

00:28:41.710 --> 00:28:42.370 align:start position:0%
1995 so you know 60 years later Java
comes<00:28:41.980><c> out</c>

00:28:42.370 --> 00:28:42.380 align:start position:0%
comes out
 

00:28:42.380 --> 00:28:44.260 align:start position:0%
comes out
then<00:28:42.560><c> it's</c><00:28:42.800><c> another</c><00:28:42.980><c> what</c><00:28:43.340><c> is</c><00:28:43.370><c> it</c><00:28:43.580><c> like</c><00:28:43.760><c> almost</c>

00:28:44.260 --> 00:28:44.270 align:start position:0%
then it's another what is it like almost
 

00:28:44.270 --> 00:28:45.820 align:start position:0%
then it's another what is it like almost
20<00:28:44.660><c> years</c><00:28:44.840><c> before</c><00:28:45.050><c> we</c><00:28:45.320><c> get</c><00:28:45.440><c> lambda</c>

00:28:45.820 --> 00:28:45.830 align:start position:0%
20 years before we get lambda
 

00:28:45.830 --> 00:28:49.330 align:start position:0%
20 years before we get lambda
expressions<00:28:46.540><c> now</c><00:28:47.540><c> the</c><00:28:48.020><c> thing</c><00:28:48.170><c> is</c><00:28:48.290><c> that</c><00:28:48.530><c> alonso</c>

00:28:49.330 --> 00:28:49.340 align:start position:0%
expressions now the thing is that alonso
 

00:28:49.340 --> 00:28:50.650 align:start position:0%
expressions now the thing is that alonso
chose<00:28:49.550><c> the</c><00:28:49.700><c> lambda</c><00:28:50.000><c> calculus</c><00:28:50.390><c> was</c><00:28:50.630><c> a</c>

00:28:50.650 --> 00:28:50.660 align:start position:0%
chose the lambda calculus was a
 

00:28:50.660 --> 00:28:53.020 align:start position:0%
chose the lambda calculus was a
mathematical<00:28:51.470><c> way</c><00:28:51.530><c> of</c><00:28:51.820><c> representing</c><00:28:52.820><c> any</c>

00:28:53.020 --> 00:28:53.030 align:start position:0%
mathematical way of representing any
 

00:28:53.030 --> 00:28:56.440 align:start position:0%
mathematical way of representing any
sort<00:28:53.390><c> of</c><00:28:54.250><c> way</c><00:28:55.250><c> of</c><00:28:55.400><c> processing</c><00:28:55.670><c> things</c><00:28:56.180><c> with</c>

00:28:56.440 --> 00:28:56.450 align:start position:0%
sort of way of processing things with
 

00:28:56.450 --> 00:29:00.310 align:start position:0%
sort of way of processing things with
functions<00:28:57.020><c> and</c><00:28:58.150><c> so</c><00:28:59.150><c> the</c><00:28:59.960><c> interesting</c><00:29:00.140><c> thing</c>

00:29:00.310 --> 00:29:00.320 align:start position:0%
functions and so the interesting thing
 

00:29:00.320 --> 00:29:02.980 align:start position:0%
functions and so the interesting thing
about<00:29:00.440><c> Alonzo</c><00:29:01.010><c> Church</c><00:29:01.400><c> was</c><00:29:01.790><c> he</c><00:29:02.270><c> was</c><00:29:02.420><c> also</c><00:29:02.570><c> this</c>

00:29:02.980 --> 00:29:02.990 align:start position:0%
about Alonzo Church was he was also this
 

00:29:02.990 --> 00:29:05.740 align:start position:0%
about Alonzo Church was he was also this
supervisor<00:29:03.590><c> for</c><00:29:04.520><c> Alan</c><00:29:04.790><c> Turing</c><00:29:05.270><c> when</c><00:29:05.510><c> Alan</c>

00:29:05.740 --> 00:29:05.750 align:start position:0%
supervisor for Alan Turing when Alan
 

00:29:05.750 --> 00:29:07.720 align:start position:0%
supervisor for Alan Turing when Alan
Turing<00:29:05.990><c> did</c><00:29:06.140><c> his</c><00:29:06.230><c> PhD</c><00:29:06.530><c> in</c><00:29:06.710><c> Cambridge</c><00:29:07.190><c> so</c><00:29:07.580><c> this</c>

00:29:07.720 --> 00:29:07.730 align:start position:0%
Turing did his PhD in Cambridge so this
 

00:29:07.730 --> 00:29:09.310 align:start position:0%
Turing did his PhD in Cambridge so this
is<00:29:07.790><c> the</c><00:29:07.940><c> kind</c><00:29:08.030><c> of</c><00:29:08.150><c> interesting</c><00:29:08.630><c> connection</c>

00:29:09.310 --> 00:29:09.320 align:start position:0%
is the kind of interesting connection
 

00:29:09.320 --> 00:29:11.320 align:start position:0%
is the kind of interesting connection
between<00:29:09.550><c> lambda</c><00:29:10.550><c> expressions</c><00:29:11.060><c> which</c><00:29:11.210><c> is</c>

00:29:11.320 --> 00:29:11.330 align:start position:0%
between lambda expressions which is
 

00:29:11.330 --> 00:29:13.510 align:start position:0%
between lambda expressions which is
functional<00:29:11.780><c> programming</c><00:29:12.200><c> now</c><00:29:12.680><c> ensuring</c><00:29:13.190><c> who</c>

00:29:13.510 --> 00:29:13.520 align:start position:0%
functional programming now ensuring who
 

00:29:13.520 --> 00:29:16.330 align:start position:0%
functional programming now ensuring who
obviously<00:29:14.330><c> did</c><00:29:14.990><c> a</c><00:29:15.020><c> lot</c><00:29:15.200><c> of</c><00:29:15.320><c> work</c><00:29:15.530><c> on</c><00:29:15.740><c> the</c>

00:29:16.330 --> 00:29:16.340 align:start position:0%
obviously did a lot of work on the
 

00:29:16.340 --> 00:29:20.710 align:start position:0%
obviously did a lot of work on the
design<00:29:16.610><c> of</c><00:29:16.640><c> the</c><00:29:16.820><c> modern</c><00:29:17.120><c> computer</c><00:29:19.150><c> so</c><00:29:20.150><c> this</c><00:29:20.600><c> is</c>

00:29:20.710 --> 00:29:20.720 align:start position:0%
design of the modern computer so this is
 

00:29:20.720 --> 00:29:22.120 align:start position:0%
design of the modern computer so this is
where<00:29:20.810><c> we</c><00:29:20.900><c> get</c><00:29:20.960><c> into</c><00:29:21.110><c> what</c><00:29:21.290><c> I</c><00:29:21.320><c> call</c><00:29:21.500><c> exploding</c>

00:29:22.120 --> 00:29:22.130 align:start position:0%
where we get into what I call exploding
 

00:29:22.130 --> 00:29:26.320 align:start position:0%
where we get into what I call exploding
head<00:29:22.370><c> lambdas</c><00:29:22.940><c> as</c><00:29:23.810><c> Java</c><00:29:24.800><c> programmers</c><00:29:25.490><c> we</c><00:29:26.090><c> are</c>

00:29:26.320 --> 00:29:26.330 align:start position:0%
head lambdas as Java programmers we are
 

00:29:26.330 --> 00:29:28.720 align:start position:0%
head lambdas as Java programmers we are
very<00:29:26.720><c> much</c><00:29:26.930><c> accustomed</c><00:29:27.650><c> to</c><00:29:28.010><c> imperative</c>

00:29:28.720 --> 00:29:28.730 align:start position:0%
very much accustomed to imperative
 

00:29:28.730 --> 00:29:30.370 align:start position:0%
very much accustomed to imperative
programming<00:29:29.210><c> so</c><00:29:29.840><c> we</c><00:29:29.960><c> like</c><00:29:30.110><c> to</c><00:29:30.230><c> deal</c><00:29:30.350><c> with</c>

00:29:30.370 --> 00:29:30.380 align:start position:0%
programming so we like to deal with
 

00:29:30.380 --> 00:29:32.680 align:start position:0%
programming so we like to deal with
loops<00:29:30.710><c> and</c><00:29:31.130><c> we</c><00:29:31.760><c> very</c><00:29:31.940><c> much</c><00:29:32.030><c> like</c><00:29:32.240><c> to</c><00:29:32.390><c> deal</c><00:29:32.510><c> with</c>

00:29:32.680 --> 00:29:32.690 align:start position:0%
loops and we very much like to deal with
 

00:29:32.690 --> 00:29:34.630 align:start position:0%
loops and we very much like to deal with
state<00:29:32.930><c> so</c><00:29:33.440><c> we</c><00:29:33.590><c> have</c><00:29:34.040><c> variables</c><00:29:34.340><c> in</c><00:29:34.490><c> our</c>

00:29:34.630 --> 00:29:34.640 align:start position:0%
state so we have variables in our
 

00:29:34.640 --> 00:29:36.490 align:start position:0%
state so we have variables in our
program<00:29:35.030><c> we</c><00:29:35.330><c> have</c><00:29:35.480><c> for</c><00:29:35.510><c> loops</c><00:29:35.930><c> we</c><00:29:36.110><c> have</c><00:29:36.140><c> while</c>

00:29:36.490 --> 00:29:36.500 align:start position:0%
program we have for loops we have while
 

00:29:36.500 --> 00:29:39.370 align:start position:0%
program we have for loops we have while
loops<00:29:36.710><c> and</c><00:29:36.950><c> so</c><00:29:37.100><c> on</c><00:29:37.540><c> but</c><00:29:38.540><c> the</c><00:29:38.690><c> problem</c><00:29:38.990><c> is</c><00:29:39.080><c> that</c>

00:29:39.370 --> 00:29:39.380 align:start position:0%
loops and so on but the problem is that
 

00:29:39.380 --> 00:29:42.550 align:start position:0%
loops and so on but the problem is that
functional<00:29:40.220><c> programming</c><00:29:40.670><c> is</c><00:29:40.970><c> not</c><00:29:41.560><c> imperative</c>

00:29:42.550 --> 00:29:42.560 align:start position:0%
functional programming is not imperative
 

00:29:42.560 --> 00:29:44.470 align:start position:0%
functional programming is not imperative
so<00:29:43.220><c> I</c><00:29:43.250><c> like</c><00:29:43.580><c> to</c><00:29:43.610><c> ask</c><00:29:43.790><c> this</c><00:29:43.940><c> question</c><00:29:44.000><c> and</c><00:29:44.360><c> so</c>

00:29:44.470 --> 00:29:44.480 align:start position:0%
so I like to ask this question and so
 

00:29:44.480 --> 00:29:46.510 align:start position:0%
so I like to ask this question and so
everybody<00:29:45.260><c> here's</c><00:29:45.440><c> a</c><00:29:45.500><c> job</c><00:29:45.770><c> program</c><00:29:46.010><c> I'm</c><00:29:46.340><c> sure</c>

00:29:46.510 --> 00:29:46.520 align:start position:0%
everybody here's a job program I'm sure
 

00:29:46.520 --> 00:29:48.700 align:start position:0%
everybody here's a job program I'm sure
so<00:29:46.850><c> who</c><00:29:47.150><c> would</c><00:29:47.390><c> also</c><00:29:47.630><c> consider</c><00:29:48.020><c> themselves</c><00:29:48.350><c> a</c>

00:29:48.700 --> 00:29:48.710 align:start position:0%
so who would also consider themselves a
 

00:29:48.710 --> 00:29:51.700 align:start position:0%
so who would also consider themselves a
functional<00:29:49.460><c> programmer</c><00:29:50.350><c> yes</c><00:29:51.350><c> you</c><00:29:51.590><c> see</c>

00:29:51.700 --> 00:29:51.710 align:start position:0%
functional programmer yes you see
 

00:29:51.710 --> 00:29:53.530 align:start position:0%
functional programmer yes you see
there's<00:29:51.890><c> a</c><00:29:51.980><c> few</c><00:29:52.160><c> people</c><00:29:52.400><c> but</c><00:29:52.730><c> not</c><00:29:53.060><c> everybody</c>

00:29:53.530 --> 00:29:53.540 align:start position:0%
there's a few people but not everybody
 

00:29:53.540 --> 00:29:56.500 align:start position:0%
there's a few people but not everybody
and<00:29:54.170><c> that's</c><00:29:54.410><c> really</c><00:29:54.710><c> quite</c><00:29:55.520><c> telling</c><00:29:55.880><c> I</c><00:29:56.030><c> all</c>

00:29:56.500 --> 00:29:56.510 align:start position:0%
and that's really quite telling I all
 

00:29:56.510 --> 00:29:58.060 align:start position:0%
and that's really quite telling I all
the<00:29:56.720><c> audiences</c><00:29:57.140><c> I'm</c><00:29:57.230><c> I</c><00:29:57.260><c> talk</c><00:29:57.470><c> to</c><00:29:57.680><c> this</c><00:29:57.860><c> is</c><00:29:57.920><c> very</c>

00:29:58.060 --> 00:29:58.070 align:start position:0%
the audiences I'm I talk to this is very
 

00:29:58.070 --> 00:29:59.920 align:start position:0%
the audiences I'm I talk to this is very
common<00:29:58.580><c> there</c><00:29:59.210><c> are</c><00:29:59.270><c> a</c><00:29:59.300><c> few</c><00:29:59.450><c> people</c><00:29:59.630><c> who</c><00:29:59.750><c> have</c>

00:29:59.920 --> 00:29:59.930 align:start position:0%
common there are a few people who have
 

00:29:59.930 --> 00:30:01.090 align:start position:0%
common there are a few people who have
done<00:30:00.020><c> functional</c><00:30:00.500><c> programming</c><00:30:00.830><c> in</c><00:30:00.980><c> other</c>

00:30:01.090 --> 00:30:01.100 align:start position:0%
done functional programming in other
 

00:30:01.100 --> 00:30:03.070 align:start position:0%
done functional programming in other
languages<00:30:01.580><c> but</c><00:30:02.030><c> a</c><00:30:02.060><c> lot</c><00:30:02.270><c> of</c><00:30:02.300><c> Java</c><00:30:02.540><c> programmers</c>

00:30:03.070 --> 00:30:03.080 align:start position:0%
languages but a lot of Java programmers
 

00:30:03.080 --> 00:30:05.110 align:start position:0%
languages but a lot of Java programmers
are<00:30:03.200><c> not</c><00:30:03.440><c> functional</c><00:30:04.040><c> programmers</c><00:30:04.580><c> and</c><00:30:04.850><c> it</c>

00:30:05.110 --> 00:30:05.120 align:start position:0%
are not functional programmers and it
 

00:30:05.120 --> 00:30:06.610 align:start position:0%
are not functional programmers and it
does<00:30:05.390><c> take</c><00:30:05.690><c> a</c><00:30:05.720><c> different</c><00:30:06.230><c> way</c><00:30:06.410><c> of</c><00:30:06.470><c> thinking</c>

00:30:06.610 --> 00:30:06.620 align:start position:0%
does take a different way of thinking
 

00:30:06.620 --> 00:30:08.830 align:start position:0%
does take a different way of thinking
about<00:30:07.010><c> things</c><00:30:07.340><c> to</c><00:30:07.730><c> actually</c><00:30:08.180><c> do</c><00:30:08.300><c> functional</c>

00:30:08.830 --> 00:30:08.840 align:start position:0%
about things to actually do functional
 

00:30:08.840 --> 00:30:10.570 align:start position:0%
about things to actually do functional
programming<00:30:09.230><c> properly</c><00:30:09.710><c> I</c><00:30:09.860><c> would</c><00:30:10.190><c> believe</c><00:30:10.490><c> you</c>

00:30:10.570 --> 00:30:10.580 align:start position:0%
programming properly I would believe you
 

00:30:10.580 --> 00:30:13.450 align:start position:0%
programming properly I would believe you
I<00:30:10.610><c> learned</c><00:30:10.850><c> that</c><00:30:11.090><c> the</c><00:30:11.330><c> hard</c><00:30:11.450><c> way</c><00:30:12.010><c> if</c><00:30:13.010><c> you</c><00:30:13.250><c> came</c>

00:30:13.450 --> 00:30:13.460 align:start position:0%
I learned that the hard way if you came
 

00:30:13.460 --> 00:30:16.090 align:start position:0%
I learned that the hard way if you came
to<00:30:13.580><c> my</c><00:30:13.960><c> streams</c><00:30:14.960><c> and</c><00:30:15.140><c> lambdas</c><00:30:15.500><c> talk</c><00:30:15.800><c> this</c>

00:30:16.090 --> 00:30:16.100 align:start position:0%
to my streams and lambdas talk this
 

00:30:16.100 --> 00:30:18.040 align:start position:0%
to my streams and lambdas talk this
morning<00:30:16.250><c> with</c><00:30:16.550><c> Stuart</c><00:30:17.000><c> Marx</c><00:30:17.330><c> you'll</c><00:30:17.510><c> see</c><00:30:17.900><c> how</c>

00:30:18.040 --> 00:30:18.050 align:start position:0%
morning with Stuart Marx you'll see how
 

00:30:18.050 --> 00:30:19.780 align:start position:0%
morning with Stuart Marx you'll see how
badly<00:30:18.320><c> I</c><00:30:18.500><c> can</c><00:30:18.710><c> write</c><00:30:18.860><c> code</c><00:30:19.070><c> using</c><00:30:19.460><c> functional</c>

00:30:19.780 --> 00:30:19.790 align:start position:0%
badly I can write code using functional
 

00:30:19.790 --> 00:30:22.960 align:start position:0%
badly I can write code using functional
programming<00:30:20.590><c> anyway</c><00:30:21.590><c> so</c><00:30:22.370><c> the</c><00:30:22.460><c> interesting</c>

00:30:22.960 --> 00:30:22.970 align:start position:0%
programming anyway so the interesting
 

00:30:22.970 --> 00:30:24.580 align:start position:0%
programming anyway so the interesting
thing<00:30:23.120><c> about</c><00:30:23.150><c> lambda</c><00:30:23.930><c> expressions</c><00:30:24.410><c> and</c>

00:30:24.580 --> 00:30:24.590 align:start position:0%
thing about lambda expressions and
 

00:30:24.590 --> 00:30:27.070 align:start position:0%
thing about lambda expressions and
lambda<00:30:24.890><c> calculus</c><00:30:25.400><c> is</c><00:30:25.610><c> that</c><00:30:26.150><c> lambda</c><00:30:26.540><c> calculus</c>

00:30:27.070 --> 00:30:27.080 align:start position:0%
lambda calculus is that lambda calculus
 

00:30:27.080 --> 00:30:29.200 align:start position:0%
lambda calculus is that lambda calculus
and<00:30:27.350><c> chewing</c><00:30:27.680><c> machines</c><00:30:28.010><c> are</c><00:30:28.340><c> completely</c>

00:30:29.200 --> 00:30:29.210 align:start position:0%
and chewing machines are completely
 

00:30:29.210 --> 00:30:31.690 align:start position:0%
and chewing machines are completely
equivalent<00:30:29.500><c> now</c><00:30:30.500><c> Turing</c><00:30:30.980><c> machines</c><00:30:31.310><c> if</c><00:30:31.610><c> you</c>

00:30:31.690 --> 00:30:31.700 align:start position:0%
equivalent now Turing machines if you
 

00:30:31.700 --> 00:30:34.780 align:start position:0%
equivalent now Turing machines if you
have<00:30:31.850><c> a</c><00:30:31.880><c> Turing</c><00:30:32.390><c> complete</c><00:30:32.870><c> language</c><00:30:33.280><c> Java</c><00:30:34.280><c> C</c>

00:30:34.780 --> 00:30:34.790 align:start position:0%
have a Turing complete language Java C
 

00:30:34.790 --> 00:30:38.320 align:start position:0%
have a Turing complete language Java C
C++<00:30:35.410><c> even</c><00:30:36.410><c> javascript</c><00:30:36.980><c> is</c><00:30:37.160><c> Turing</c><00:30:38.000><c> complete</c>

00:30:38.320 --> 00:30:38.330 align:start position:0%
C++ even javascript is Turing complete
 

00:30:38.330 --> 00:30:41.410 align:start position:0%
C++ even javascript is Turing complete
then<00:30:39.110><c> any</c><00:30:39.380><c> problem</c><00:30:40.280><c> that</c><00:30:40.310><c> can</c><00:30:40.700><c> be</c><00:30:40.730><c> solved</c><00:30:41.180><c> by</c><00:30:41.240><c> a</c>

00:30:41.410 --> 00:30:41.420 align:start position:0%
then any problem that can be solved by a
 

00:30:41.420 --> 00:30:44.610 align:start position:0%
then any problem that can be solved by a
computer<00:30:41.780><c> can</c><00:30:42.620><c> be</c><00:30:42.770><c> solved</c><00:30:43.100><c> in</c><00:30:43.250><c> that</c><00:30:43.430><c> language</c>

00:30:44.610 --> 00:30:44.620 align:start position:0%
computer can be solved in that language
 

00:30:44.620 --> 00:30:48.130 align:start position:0%
computer can be solved in that language
lambda<00:30:45.620><c> calculus</c><00:30:46.070><c> is</c><00:30:46.310><c> equivalent</c><00:30:47.180><c> in</c><00:30:47.480><c> terms</c>

00:30:48.130 --> 00:30:48.140 align:start position:0%
lambda calculus is equivalent in terms
 

00:30:48.140 --> 00:30:51.730 align:start position:0%
lambda calculus is equivalent in terms
of<00:30:48.350><c> the</c><00:30:48.910><c> way</c><00:30:49.910><c> that</c><00:30:50.060><c> they</c><00:30:50.150><c> work</c><00:30:50.300><c> to</c><00:30:51.080><c> the</c><00:30:51.470><c> Turing</c>

00:30:51.730 --> 00:30:51.740 align:start position:0%
of the way that they work to the Turing
 

00:30:51.740 --> 00:30:53.320 align:start position:0%
of the way that they work to the Turing
machine<00:30:51.770><c> so</c><00:30:52.310><c> that</c><00:30:52.460><c> means</c><00:30:52.610><c> that</c><00:30:52.790><c> any</c><00:30:52.910><c> problem</c>

00:30:53.320 --> 00:30:53.330 align:start position:0%
machine so that means that any problem
 

00:30:53.330 --> 00:30:54.720 align:start position:0%
machine so that means that any problem
that<00:30:53.450><c> you</c><00:30:53.540><c> can</c><00:30:53.660><c> solve</c><00:30:53.840><c> with</c><00:30:54.020><c> computation</c>

00:30:54.720 --> 00:30:54.730 align:start position:0%
that you can solve with computation
 

00:30:54.730 --> 00:30:59.580 align:start position:0%
that you can solve with computation
can<00:30:55.510><c> be</c><00:30:55.630><c> solved</c><00:30:55.990><c> using</c><00:30:56.170><c> lambda</c><00:30:56.800><c> calculus</c><00:30:58.590><c> but</c>

00:30:59.580 --> 00:30:59.590 align:start position:0%
can be solved using lambda calculus but
 

00:30:59.590 --> 00:31:01.530 align:start position:0%
can be solved using lambda calculus but
it<00:30:59.710><c> will</c><00:30:59.950><c> give</c><00:31:00.190><c> you</c><00:31:00.280><c> a</c><00:31:00.310><c> headache</c><00:31:00.490><c> believe</c><00:31:01.360><c> me</c>

00:31:01.530 --> 00:31:01.540 align:start position:0%
it will give you a headache believe me
 

00:31:01.540 --> 00:31:04.170 align:start position:0%
it will give you a headache believe me
at<00:31:02.020><c> least</c><00:31:02.200><c> it</c><00:31:02.320><c> did</c><00:31:02.470><c> me</c><00:31:02.620><c> and</c><00:31:02.740><c> I'll</c><00:31:03.120><c> explain</c><00:31:04.120><c> a</c>

00:31:04.170 --> 00:31:04.180 align:start position:0%
at least it did me and I'll explain a
 

00:31:04.180 --> 00:31:07.230 align:start position:0%
at least it did me and I'll explain a
bit<00:31:04.300><c> more</c><00:31:04.360><c> of</c><00:31:04.540><c> that</c><00:31:04.570><c> as</c><00:31:04.780><c> we</c><00:31:04.930><c> go</c><00:31:05.050><c> through</c><00:31:06.150><c> so</c><00:31:07.150><c> the</c>

00:31:07.230 --> 00:31:07.240 align:start position:0%
bit more of that as we go through so the
 

00:31:07.240 --> 00:31:11.220 align:start position:0%
bit more of that as we go through so the
idea<00:31:07.510><c> now</c><00:31:07.780><c> is</c><00:31:07.810><c> what</c><00:31:08.440><c> can</c><00:31:08.470><c> we</c><00:31:08.710><c> do</c><00:31:09.100><c> in</c><00:31:09.520><c> Java</c><00:31:09.970><c> if</c><00:31:10.600><c> we</c>

00:31:11.220 --> 00:31:11.230 align:start position:0%
idea now is what can we do in Java if we
 

00:31:11.230 --> 00:31:14.580 align:start position:0%
idea now is what can we do in Java if we
only<00:31:11.790><c> use</c><00:31:12.790><c> lambda</c><00:31:13.360><c> expressions</c><00:31:13.990><c> so</c><00:31:14.380><c> we're</c><00:31:14.470><c> not</c>

00:31:14.580 --> 00:31:14.590 align:start position:0%
only use lambda expressions so we're not
 

00:31:14.590 --> 00:31:17.190 align:start position:0%
only use lambda expressions so we're not
going<00:31:14.710><c> to</c><00:31:14.740><c> use</c><00:31:15.040><c> any</c><00:31:15.700><c> primitive</c><00:31:16.210><c> types</c><00:31:16.450><c> we're</c>

00:31:17.190 --> 00:31:17.200 align:start position:0%
going to use any primitive types we're
 

00:31:17.200 --> 00:31:18.660 align:start position:0%
going to use any primitive types we're
not<00:31:17.320><c> going</c><00:31:17.470><c> to</c><00:31:17.500><c> use</c><00:31:17.560><c> any</c><00:31:17.830><c> operators</c><00:31:18.400><c> we're</c><00:31:18.580><c> not</c>

00:31:18.660 --> 00:31:18.670 align:start position:0%
not going to use any operators we're not
 

00:31:18.670 --> 00:31:20.280 align:start position:0%
not going to use any operators we're not
going<00:31:18.790><c> to</c><00:31:18.850><c> use</c><00:31:18.940><c> any</c><00:31:19.090><c> now</c><00:31:19.840><c> we're</c><00:31:19.960><c> not</c><00:31:20.020><c> gonna</c><00:31:20.140><c> use</c>

00:31:20.280 --> 00:31:20.290 align:start position:0%
going to use any now we're not gonna use
 

00:31:20.290 --> 00:31:22.170 align:start position:0%
going to use any now we're not gonna use
any<00:31:20.380><c> objects</c><00:31:20.950><c> either</c><00:31:21.100><c> so</c><00:31:21.520><c> literally</c><00:31:21.940><c> only</c>

00:31:22.170 --> 00:31:22.180 align:start position:0%
any objects either so literally only
 

00:31:22.180 --> 00:31:23.690 align:start position:0%
any objects either so literally only
going<00:31:22.450><c> to</c><00:31:22.510><c> use</c><00:31:22.570><c> lambda</c><00:31:22.810><c> expressions</c><00:31:23.380><c> and</c>

00:31:23.690 --> 00:31:23.700 align:start position:0%
going to use lambda expressions and
 

00:31:23.700 --> 00:31:26.460 align:start position:0%
going to use lambda expressions and
we'll<00:31:24.700><c> have</c><00:31:24.850><c> one</c><00:31:25.120><c> functional</c><00:31:25.660><c> interface</c><00:31:25.960><c> we</c>

00:31:26.460 --> 00:31:26.470 align:start position:0%
we'll have one functional interface we
 

00:31:26.470 --> 00:31:27.780 align:start position:0%
we'll have one functional interface we
have<00:31:26.590><c> to</c><00:31:26.650><c> have</c><00:31:26.740><c> a</c><00:31:26.800><c> functional</c><00:31:27.160><c> interface</c><00:31:27.460><c> in</c>

00:31:27.780 --> 00:31:27.790 align:start position:0%
have to have a functional interface in
 

00:31:27.790 --> 00:31:30.480 align:start position:0%
have to have a functional interface in
order<00:31:28.300><c> to</c><00:31:28.500><c> create</c><00:31:29.500><c> a</c><00:31:29.560><c> lambda</c><00:31:29.740><c> expression</c><00:31:29.890><c> so</c>

00:31:30.480 --> 00:31:30.490 align:start position:0%
order to create a lambda expression so
 

00:31:30.490 --> 00:31:33.510 align:start position:0%
order to create a lambda expression so
what<00:31:31.390><c> can</c><00:31:31.480><c> we</c><00:31:31.540><c> do</c><00:31:31.690><c> with</c><00:31:31.840><c> this</c><00:31:32.310><c> right</c><00:31:33.310><c> so</c><00:31:33.430><c> the</c>

00:31:33.510 --> 00:31:33.520 align:start position:0%
what can we do with this right so the
 

00:31:33.520 --> 00:31:35.400 align:start position:0%
what can we do with this right so the
first<00:31:33.640><c> thing</c><00:31:33.850><c> is</c><00:31:33.970><c> our</c><00:31:34.750><c> functional</c><00:31:35.140><c> interface</c>

00:31:35.400 --> 00:31:35.410 align:start position:0%
first thing is our functional interface
 

00:31:35.410 --> 00:31:37.470 align:start position:0%
first thing is our functional interface
so<00:31:35.980><c> we'll</c><00:31:36.130><c> call</c><00:31:36.340><c> it</c><00:31:36.520><c> very</c><00:31:36.880><c> originally</c><00:31:37.360><c> a</c>

00:31:37.470 --> 00:31:37.480 align:start position:0%
so we'll call it very originally a
 

00:31:37.480 --> 00:31:40.440 align:start position:0%
so we'll call it very originally a
lambda<00:31:37.810><c> okay</c><00:31:38.800><c> and</c><00:31:39.250><c> lambda</c><00:31:39.910><c> is</c><00:31:40.030><c> going</c><00:31:40.120><c> to</c><00:31:40.240><c> have</c>

00:31:40.440 --> 00:31:40.450 align:start position:0%
lambda okay and lambda is going to have
 

00:31:40.450 --> 00:31:43.320 align:start position:0%
lambda okay and lambda is going to have
one<00:31:40.690><c> method</c><00:31:40.900><c> one</c><00:31:41.910><c> abstract</c><00:31:42.910><c> method</c><00:31:43.150><c> called</c>

00:31:43.320 --> 00:31:43.330 align:start position:0%
one method one abstract method called
 

00:31:43.330 --> 00:31:46.080 align:start position:0%
one method one abstract method called
apply<00:31:43.660><c> apply</c><00:31:44.650><c> takes</c><00:31:45.040><c> as</c><00:31:45.250><c> a</c><00:31:45.310><c> parameter</c><00:31:45.640><c> a</c>

00:31:46.080 --> 00:31:46.090 align:start position:0%
apply apply takes as a parameter a
 

00:31:46.090 --> 00:31:48.420 align:start position:0%
apply apply takes as a parameter a
lambda<00:31:46.480><c> expression</c><00:31:46.630><c> and</c><00:31:47.230><c> returns</c><00:31:47.950><c> a</c><00:31:48.190><c> lambda</c>

00:31:48.420 --> 00:31:48.430 align:start position:0%
lambda expression and returns a lambda
 

00:31:48.430 --> 00:31:50.220 align:start position:0%
lambda expression and returns a lambda
expression<00:31:48.580><c> so</c><00:31:49.330><c> that</c><00:31:49.480><c> way</c><00:31:49.570><c> we</c><00:31:49.690><c> can</c><00:31:49.810><c> chain</c><00:31:50.080><c> them</c>

00:31:50.220 --> 00:31:50.230 align:start position:0%
expression so that way we can chain them
 

00:31:50.230 --> 00:31:53.460 align:start position:0%
expression so that way we can chain them
together<00:31:50.380><c> very</c><00:31:50.770><c> easily</c><00:31:50.880><c> good</c><00:31:52.080><c> so</c><00:31:53.080><c> now</c><00:31:53.200><c> we</c><00:31:53.260><c> have</c>

00:31:53.460 --> 00:31:53.470 align:start position:0%
together very easily good so now we have
 

00:31:53.470 --> 00:31:55.740 align:start position:0%
together very easily good so now we have
to<00:31:53.590><c> start</c><00:31:53.830><c> off</c><00:31:54.010><c> and</c><00:31:54.310><c> think</c><00:31:55.060><c> about</c><00:31:55.270><c> how</c><00:31:55.510><c> can</c><00:31:55.720><c> we</c>

00:31:55.740 --> 00:31:55.750 align:start position:0%
to start off and think about how can we
 

00:31:55.750 --> 00:31:57.630 align:start position:0%
to start off and think about how can we
do<00:31:55.990><c> things</c><00:31:56.170><c> in</c><00:31:56.530><c> Java</c><00:31:56.770><c> if</c><00:31:56.920><c> we're</c><00:31:57.070><c> not</c><00:31:57.310><c> only</c><00:31:57.550><c> as</c>

00:31:57.630 --> 00:31:57.640 align:start position:0%
do things in Java if we're not only as
 

00:31:57.640 --> 00:31:58.950 align:start position:0%
do things in Java if we're not only as
primitive<00:31:58.030><c> types</c><00:31:58.240><c> we're</c><00:31:58.660><c> not</c><00:31:58.750><c> going</c><00:31:58.870><c> to</c><00:31:58.900><c> use</c>

00:31:58.950 --> 00:31:58.960 align:start position:0%
primitive types we're not going to use
 

00:31:58.960 --> 00:32:02.220 align:start position:0%
primitive types we're not going to use
operators<00:31:59.760><c> well</c><00:32:00.760><c> the</c><00:32:00.820><c> first</c><00:32:01.060><c> thing</c><00:32:01.300><c> is</c><00:32:01.570><c> we</c>

00:32:02.220 --> 00:32:02.230 align:start position:0%
operators well the first thing is we
 

00:32:02.230 --> 00:32:04.320 align:start position:0%
operators well the first thing is we
need<00:32:02.500><c> a</c><00:32:02.830><c> lambda</c><00:32:03.130><c> expression</c><00:32:03.610><c> to</c><00:32:03.790><c> represent</c><00:32:03.820><c> my</c>

00:32:04.320 --> 00:32:04.330 align:start position:0%
need a lambda expression to represent my
 

00:32:04.330 --> 00:32:06.870 align:start position:0%
need a lambda expression to represent my
density<00:32:04.570><c> so</c><00:32:05.560><c> identity</c><00:32:05.950><c> is</c><00:32:06.100><c> where</c><00:32:06.340><c> you</c><00:32:06.640><c> pass</c>

00:32:06.870 --> 00:32:06.880 align:start position:0%
density so identity is where you pass
 

00:32:06.880 --> 00:32:08.010 align:start position:0%
density so identity is where you pass
something<00:32:07.150><c> and</c><00:32:07.420><c> you</c><00:32:07.510><c> get</c><00:32:07.690><c> the</c><00:32:07.810><c> same</c><00:32:07.990><c> thing</c>

00:32:08.010 --> 00:32:08.020 align:start position:0%
something and you get the same thing
 

00:32:08.020 --> 00:32:11.310 align:start position:0%
something and you get the same thing
back<00:32:08.730><c> great</c><00:32:09.730><c> so</c><00:32:10.060><c> we</c><00:32:10.150><c> can</c><00:32:10.270><c> represent</c><00:32:10.480><c> and</c><00:32:11.260><c> we</c>

00:32:11.310 --> 00:32:11.320 align:start position:0%
back great so we can represent and we
 

00:32:11.320 --> 00:32:12.540 align:start position:0%
back great so we can represent and we
can<00:32:11.440><c> create</c><00:32:11.590><c> a</c><00:32:11.680><c> lambda</c><00:32:11.920><c> expression</c><00:32:12.070><c> called</c>

00:32:12.540 --> 00:32:12.550 align:start position:0%
can create a lambda expression called
 

00:32:12.550 --> 00:32:14.490 align:start position:0%
can create a lambda expression called
identity<00:32:12.700><c> and</c><00:32:13.270><c> that</c><00:32:13.570><c> returns</c><00:32:14.050><c> a</c><00:32:14.230><c> lambda</c>

00:32:14.490 --> 00:32:14.500 align:start position:0%
identity and that returns a lambda
 

00:32:14.500 --> 00:32:16.470 align:start position:0%
identity and that returns a lambda
expression<00:32:14.760><c> where</c><00:32:15.760><c> you</c><00:32:15.940><c> pass</c><00:32:16.120><c> it</c><00:32:16.270><c> a</c><00:32:16.330><c> parameter</c>

00:32:16.470 --> 00:32:16.480 align:start position:0%
expression where you pass it a parameter
 

00:32:16.480 --> 00:32:18.540 align:start position:0%
expression where you pass it a parameter
and<00:32:16.900><c> it</c><00:32:16.960><c> returns</c><00:32:17.260><c> the</c><00:32:17.470><c> same</c><00:32:17.620><c> parameter</c><00:32:18.130><c> so</c><00:32:18.490><c> it</c>

00:32:18.540 --> 00:32:18.550 align:start position:0%
and it returns the same parameter so it
 

00:32:18.550 --> 00:32:20.880 align:start position:0%
and it returns the same parameter so it
just<00:32:18.700><c> gives</c><00:32:18.880><c> you</c><00:32:18.970><c> back</c><00:32:19.150><c> what</c><00:32:19.390><c> you</c><00:32:19.570><c> give</c><00:32:19.720><c> it</c><00:32:19.890><c> so</c>

00:32:20.880 --> 00:32:20.890 align:start position:0%
just gives you back what you give it so
 

00:32:20.890 --> 00:32:24.090 align:start position:0%
just gives you back what you give it so
far<00:32:21.100><c> so</c><00:32:21.700><c> simple</c><00:32:22.060><c> and</c><00:32:22.410><c> in</c><00:32:23.410><c> red</c><00:32:23.680><c> I've</c><00:32:23.950><c> actually</c>

00:32:24.090 --> 00:32:24.100 align:start position:0%
far so simple and in red I've actually
 

00:32:24.100 --> 00:32:25.800 align:start position:0%
far so simple and in red I've actually
used<00:32:24.250><c> the</c><00:32:24.580><c> the</c><00:32:24.760><c> lambda</c><00:32:25.090><c> notation</c><00:32:25.180><c> because</c>

00:32:25.800 --> 00:32:25.810 align:start position:0%
used the the lambda notation because
 

00:32:25.810 --> 00:32:27.720 align:start position:0%
used the the lambda notation because
sometimes<00:32:26.470><c> he</c><00:32:26.740><c> actually</c><00:32:27.100><c> gets</c><00:32:27.190><c> a</c><00:32:27.340><c> lot</c><00:32:27.520><c> easier</c>

00:32:27.720 --> 00:32:27.730 align:start position:0%
sometimes he actually gets a lot easier
 

00:32:27.730 --> 00:32:29.190 align:start position:0%
sometimes he actually gets a lot easier
to<00:32:28.030><c> understand</c><00:32:28.360><c> in</c><00:32:28.420><c> the</c><00:32:28.480><c> land</c><00:32:28.630><c> of</c><00:32:28.720><c> notation</c>

00:32:29.190 --> 00:32:29.200 align:start position:0%
to understand in the land of notation
 

00:32:29.200 --> 00:32:32.190 align:start position:0%
to understand in the land of notation
than<00:32:29.320><c> it</c><00:32:29.440><c> does</c><00:32:29.590><c> the</c><00:32:29.830><c> the</c><00:32:30.250><c> Java</c><00:32:30.460><c> code</c><00:32:31.080><c> right</c><00:32:32.080><c> so</c>

00:32:32.190 --> 00:32:32.200 align:start position:0%
than it does the the Java code right so
 

00:32:32.200 --> 00:32:34.860 align:start position:0%
than it does the the Java code right so
we<00:32:32.290><c> have</c><00:32:32.410><c> a</c><00:32:32.440><c> lambda</c><00:32:32.680><c> identity</c><00:32:33.660><c> for</c><00:32:34.660><c> the</c><00:32:34.720><c> first</c>

00:32:34.860 --> 00:32:34.870 align:start position:0%
we have a lambda identity for the first
 

00:32:34.870 --> 00:32:35.970 align:start position:0%
we have a lambda identity for the first
couple<00:32:35.110><c> slides</c><00:32:35.230><c> I'm</c><00:32:35.380><c> also</c><00:32:35.530><c> going</c><00:32:35.710><c> to</c><00:32:35.770><c> show</c><00:32:35.890><c> you</c>

00:32:35.970 --> 00:32:35.980 align:start position:0%
couple slides I'm also going to show you
 

00:32:35.980 --> 00:32:37.230 align:start position:0%
couple slides I'm also going to show you
the<00:32:36.100><c> equivalent</c><00:32:36.310><c> anonymous</c><00:32:36.880><c> in</c><00:32:37.000><c> a</c><00:32:37.060><c> class</c>

00:32:37.230 --> 00:32:37.240 align:start position:0%
the equivalent anonymous in a class
 

00:32:37.240 --> 00:32:38.550 align:start position:0%
the equivalent anonymous in a class
because<00:32:37.420><c> sometimes</c><00:32:37.870><c> that</c><00:32:37.990><c> makes</c><00:32:38.110><c> it</c><00:32:38.260><c> a</c><00:32:38.290><c> little</c>

00:32:38.550 --> 00:32:38.560 align:start position:0%
because sometimes that makes it a little
 

00:32:38.560 --> 00:32:40.590 align:start position:0%
because sometimes that makes it a little
bit<00:32:38.770><c> easier</c><00:32:39.100><c> to</c><00:32:39.220><c> understand</c><00:32:39.670><c> so</c><00:32:40.270><c> in</c><00:32:40.330><c> this</c><00:32:40.420><c> case</c>

00:32:40.590 --> 00:32:40.600 align:start position:0%
bit easier to understand so in this case
 

00:32:40.600 --> 00:32:41.670 align:start position:0%
bit easier to understand so in this case
we're<00:32:40.750><c> creating</c><00:32:41.050><c> a</c><00:32:41.080><c> lambda</c><00:32:41.320><c> called</c><00:32:41.560><c> identity</c>

00:32:41.670 --> 00:32:41.680 align:start position:0%
we're creating a lambda called identity
 

00:32:41.680 --> 00:32:44.670 align:start position:0%
we're creating a lambda called identity
which<00:32:42.310><c> is</c><00:32:42.340><c> a</c><00:32:42.490><c> new</c><00:32:42.700><c> lambda</c><00:32:43.090><c> which</c><00:32:43.360><c> then</c><00:32:44.020><c> has</c><00:32:44.290><c> an</c>

00:32:44.670 --> 00:32:44.680 align:start position:0%
which is a new lambda which then has an
 

00:32:44.680 --> 00:32:46.230 align:start position:0%
which is a new lambda which then has an
implementation<00:32:45.310><c> of</c><00:32:45.370><c> the</c><00:32:45.520><c> apply</c><00:32:45.730><c> method</c><00:32:46.060><c> which</c>

00:32:46.230 --> 00:32:46.240 align:start position:0%
implementation of the apply method which
 

00:32:46.240 --> 00:32:48.720 align:start position:0%
implementation of the apply method which
takes<00:32:46.480><c> a</c><00:32:46.540><c> lambda</c><00:32:46.720><c> X</c><00:32:46.810><c> and</c><00:32:47.200><c> returns</c><00:32:47.530><c> X</c><00:32:47.800><c> okay</c><00:32:48.370><c> all</c>

00:32:48.720 --> 00:32:48.730 align:start position:0%
takes a lambda X and returns X okay all
 

00:32:48.730 --> 00:32:52.050 align:start position:0%
takes a lambda X and returns X okay all
good<00:32:49.560><c> so</c><00:32:50.560><c> next</c><00:32:50.710><c> we</c><00:32:50.980><c> need</c><00:32:51.100><c> some</c><00:32:51.340><c> primitive</c>

00:32:52.050 --> 00:32:52.060 align:start position:0%
good so next we need some primitive
 

00:32:52.060 --> 00:32:53.700 align:start position:0%
good so next we need some primitive
types<00:32:52.300><c> so</c><00:32:52.720><c> we're</c><00:32:52.810><c> gonna</c><00:32:52.900><c> create</c><00:32:53.050><c> boolean</c>

00:32:53.700 --> 00:32:53.710 align:start position:0%
types so we're gonna create boolean
 

00:32:53.710 --> 00:32:56.310 align:start position:0%
types so we're gonna create boolean
representations<00:32:54.640><c> true</c><00:32:54.970><c> and</c><00:32:55.210><c> false</c><00:32:55.450><c> so</c><00:32:56.200><c> we'll</c>

00:32:56.310 --> 00:32:56.320 align:start position:0%
representations true and false so we'll
 

00:32:56.320 --> 00:32:58.710 align:start position:0%
representations true and false so we'll
start<00:32:56.530><c> with</c><00:32:56.620><c> false</c><00:32:57.040><c> and</c><00:32:57.460><c> in</c><00:32:58.060><c> this</c><00:32:58.120><c> case</c><00:32:58.360><c> false</c>

00:32:58.710 --> 00:32:58.720 align:start position:0%
start with false and in this case false
 

00:32:58.720 --> 00:33:00.870 align:start position:0%
start with false and in this case false
is<00:32:59.170><c> a</c><00:32:59.320><c> lambda</c><00:32:59.650><c> expression</c><00:32:59.800><c> which</c><00:33:00.580><c> always</c>

00:33:00.870 --> 00:33:00.880 align:start position:0%
is a lambda expression which always
 

00:33:00.880 --> 00:33:03.060 align:start position:0%
is a lambda expression which always
returns<00:33:01.390><c> the</c><00:33:01.720><c> lambda</c><00:33:02.140><c> expression</c><00:33:02.680><c> which</c><00:33:02.890><c> we</c>

00:33:03.060 --> 00:33:03.070 align:start position:0%
returns the lambda expression which we
 

00:33:03.070 --> 00:33:04.930 align:start position:0%
returns the lambda expression which we
have<00:33:03.280><c> for</c><00:33:03.700><c> identity</c>

00:33:04.930 --> 00:33:04.940 align:start position:0%
have for identity
 

00:33:04.940 --> 00:33:07.029 align:start position:0%
have for identity
okay<00:33:05.629><c> so</c><00:33:06.289><c> we're</c><00:33:06.440><c> getting</c><00:33:06.590><c> a</c><00:33:06.649><c> little</c><00:33:06.739><c> bit</c><00:33:06.950><c> more</c>

00:33:07.029 --> 00:33:07.039 align:start position:0%
okay so we're getting a little bit more
 

00:33:07.039 --> 00:33:08.109 align:start position:0%
okay so we're getting a little bit more
complicated<00:33:07.249><c> so</c><00:33:07.639><c> we</c><00:33:07.729><c> have</c><00:33:07.879><c> a</c><00:33:07.909><c> lambda</c>

00:33:08.109 --> 00:33:08.119 align:start position:0%
complicated so we have a lambda
 

00:33:08.119 --> 00:33:09.969 align:start position:0%
complicated so we have a lambda
expression<00:33:08.599><c> F</c><00:33:08.840><c> which</c><00:33:09.320><c> returns</c><00:33:09.679><c> another</c>

00:33:09.969 --> 00:33:09.979 align:start position:0%
expression F which returns another
 

00:33:09.979 --> 00:33:11.830 align:start position:0%
expression F which returns another
lambda<00:33:10.309><c> expression</c><00:33:10.789><c> which</c><00:33:11.029><c> is</c><00:33:11.179><c> the</c><00:33:11.330><c> identity</c>

00:33:11.830 --> 00:33:11.840 align:start position:0%
lambda expression which is the identity
 

00:33:11.840 --> 00:33:15.639 align:start position:0%
lambda expression which is the identity
lambda<00:33:12.529><c> expression</c><00:33:13.009><c> and</c><00:33:13.960><c> again</c><00:33:14.960><c> if</c><00:33:15.349><c> we</c><00:33:15.499><c> just</c>

00:33:15.639 --> 00:33:15.649 align:start position:0%
lambda expression and again if we just
 

00:33:15.649 --> 00:33:16.869 align:start position:0%
lambda expression and again if we just
look<00:33:15.799><c> at</c><00:33:15.859><c> the</c><00:33:15.979><c> equivalent</c><00:33:16.399><c> anonymous</c><00:33:16.729><c> inner</c>

00:33:16.869 --> 00:33:16.879 align:start position:0%
look at the equivalent anonymous inner
 

00:33:16.879 --> 00:33:18.580 align:start position:0%
look at the equivalent anonymous inner
class<00:33:17.090><c> we've</c><00:33:17.299><c> just</c><00:33:17.450><c> got</c><00:33:17.599><c> two</c><00:33:17.929><c> layers</c><00:33:18.409><c> of</c>

00:33:18.580 --> 00:33:18.590 align:start position:0%
class we've just got two layers of
 

00:33:18.590 --> 00:33:20.979 align:start position:0%
class we've just got two layers of
lambda<00:33:19.429><c> expression</c><00:33:19.879><c> there</c><00:33:20.059><c> so</c><00:33:20.269><c> nothing</c>

00:33:20.979 --> 00:33:20.989 align:start position:0%
lambda expression there so nothing
 

00:33:20.989 --> 00:33:23.409 align:start position:0%
lambda expression there so nothing
terribly<00:33:21.830><c> exciting</c><00:33:22.580><c> but</c><00:33:22.759><c> I'm</c><00:33:23.059><c> not</c><00:33:23.239><c> going</c><00:33:23.359><c> to</c>

00:33:23.409 --> 00:33:23.419 align:start position:0%
terribly exciting but I'm not going to
 

00:33:23.419 --> 00:33:24.430 align:start position:0%
terribly exciting but I'm not going to
show<00:33:23.570><c> you</c><00:33:23.659><c> any</c><00:33:23.749><c> more</c><00:33:23.960><c> anonymous</c><00:33:24.320><c> inner</c>

00:33:24.430 --> 00:33:24.440 align:start position:0%
show you any more anonymous inner
 

00:33:24.440 --> 00:33:26.409 align:start position:0%
show you any more anonymous inner
classes<00:33:24.679><c> because</c><00:33:24.979><c> it</c><00:33:25.099><c> does</c><00:33:25.279><c> get</c><00:33:25.519><c> way</c><00:33:25.999><c> way</c><00:33:26.359><c> too</c>

00:33:26.409 --> 00:33:26.419 align:start position:0%
classes because it does get way way too
 

00:33:26.419 --> 00:33:30.549 align:start position:0%
classes because it does get way way too
much<00:33:26.720><c> code</c><00:33:27.849><c> the</c><00:33:28.849><c> opposite</c><00:33:29.269><c> boolean</c><00:33:29.809><c> false</c><00:33:30.200><c> is</c>

00:33:30.549 --> 00:33:30.559 align:start position:0%
much code the opposite boolean false is
 

00:33:30.559 --> 00:33:33.099 align:start position:0%
much code the opposite boolean false is
clearly<00:33:31.099><c> boolean</c><00:33:31.580><c> true</c><00:33:31.879><c> so</c><00:33:32.539><c> in</c><00:33:32.659><c> this</c><00:33:32.809><c> case</c>

00:33:33.099 --> 00:33:33.109 align:start position:0%
clearly boolean true so in this case
 

00:33:33.109 --> 00:33:34.869 align:start position:0%
clearly boolean true so in this case
we'll<00:33:33.409><c> have</c><00:33:33.649><c> a</c><00:33:33.889><c> lambda</c><00:33:34.099><c> expression</c><00:33:34.279><c> which</c>

00:33:34.869 --> 00:33:34.879 align:start position:0%
we'll have a lambda expression which
 

00:33:34.879 --> 00:33:37.269 align:start position:0%
we'll have a lambda expression which
returns<00:33:35.210><c> a</c><00:33:35.299><c> lambda</c><00:33:35.599><c> which</c><00:33:35.749><c> is</c><00:33:35.779><c> never</c><00:33:36.289><c> going</c><00:33:37.159><c> to</c>

00:33:37.269 --> 00:33:37.279 align:start position:0%
returns a lambda which is never going to
 

00:33:37.279 --> 00:33:40.989 align:start position:0%
returns a lambda which is never going to
be<00:33:37.489><c> identity</c><00:33:38.470><c> so</c><00:33:39.470><c> in</c><00:33:39.889><c> this</c><00:33:40.249><c> case</c><00:33:40.489><c> we</c><00:33:40.700><c> can</c><00:33:40.820><c> say</c>

00:33:40.989 --> 00:33:40.999 align:start position:0%
be identity so in this case we can say
 

00:33:40.999 --> 00:33:43.719 align:start position:0%
be identity so in this case we can say
okay<00:33:41.269><c> so</c><00:33:41.330><c> it's</c><00:33:41.570><c> the</c><00:33:41.659><c> opposite</c><00:33:42.139><c> of</c><00:33:42.320><c> true</c><00:33:42.950><c> the</c>

00:33:43.719 --> 00:33:43.729 align:start position:0%
okay so it's the opposite of true the
 

00:33:43.729 --> 00:33:45.820 align:start position:0%
okay so it's the opposite of true the
opposite<00:33:43.999><c> force</c><00:33:44.269><c> is</c><00:33:44.479><c> true</c><00:33:44.779><c> great</c><00:33:45.259><c> so</c><00:33:45.679><c> we</c><00:33:45.799><c> have</c>

00:33:45.820 --> 00:33:45.830 align:start position:0%
opposite force is true great so we have
 

00:33:45.830 --> 00:33:48.219 align:start position:0%
opposite force is true great so we have
an<00:33:46.159><c> lambda</c><00:33:46.460><c> expression</c><00:33:46.820><c> which</c><00:33:46.940><c> does</c><00:33:47.149><c> that</c><00:33:47.359><c> so</c>

00:33:48.219 --> 00:33:48.229 align:start position:0%
an lambda expression which does that so
 

00:33:48.229 --> 00:33:51.129 align:start position:0%
an lambda expression which does that so
now<00:33:48.320><c> we've</c><00:33:48.470><c> got</c><00:33:48.590><c> billions</c><00:33:48.830><c> right</c><00:33:49.899><c> next</c><00:33:50.899><c> we</c>

00:33:51.129 --> 00:33:51.139 align:start position:0%
now we've got billions right next we
 

00:33:51.139 --> 00:33:52.899 align:start position:0%
now we've got billions right next we
need<00:33:51.259><c> numbers</c><00:33:51.649><c> so</c><00:33:52.340><c> there</c><00:33:52.519><c> are</c><00:33:52.639><c> things</c><00:33:52.759><c> called</c>

00:33:52.899 --> 00:33:52.909 align:start position:0%
need numbers so there are things called
 

00:33:52.909 --> 00:33:56.739 align:start position:0%
need numbers so there are things called
church<00:33:53.330><c> numerals</c><00:33:53.929><c> church</c><00:33:54.919><c> numeral</c><00:33:55.369><c> we</c><00:33:56.299><c> can</c><00:33:56.450><c> we</c>

00:33:56.739 --> 00:33:56.749 align:start position:0%
church numerals church numeral we can we
 

00:33:56.749 --> 00:33:58.149 align:start position:0%
church numerals church numeral we can we
can<00:33:56.899><c> sort</c><00:33:57.169><c> of</c><00:33:57.200><c> take</c><00:33:57.379><c> some</c><00:33:57.619><c> mathematical</c>

00:33:58.149 --> 00:33:58.159 align:start position:0%
can sort of take some mathematical
 

00:33:58.159 --> 00:34:00.399 align:start position:0%
can sort of take some mathematical
inspiration<00:33:58.789><c> here</c><00:33:58.999><c> and</c><00:33:59.659><c> we</c><00:33:59.779><c> can</c><00:33:59.929><c> say</c><00:34:00.080><c> that</c><00:34:00.109><c> the</c>

00:34:00.399 --> 00:34:00.409 align:start position:0%
inspiration here and we can say that the
 

00:34:00.409 --> 00:34:03.460 align:start position:0%
inspiration here and we can say that the
identity<00:34:01.039><c> for</c><00:34:01.220><c> addition</c><00:34:01.249><c> is</c><00:34:02.149><c> 0</c><00:34:02.599><c> if</c><00:34:03.139><c> you</c><00:34:03.289><c> add</c><00:34:03.440><c> a</c>

00:34:03.460 --> 00:34:03.470 align:start position:0%
identity for addition is 0 if you add a
 

00:34:03.470 --> 00:34:05.289 align:start position:0%
identity for addition is 0 if you add a
subtract<00:34:03.950><c> 0</c><00:34:04.159><c> from</c><00:34:04.369><c> any</c><00:34:04.519><c> number</c><00:34:04.820><c> you</c><00:34:04.849><c> get</c><00:34:05.149><c> the</c>

00:34:05.289 --> 00:34:05.299 align:start position:0%
subtract 0 from any number you get the
 

00:34:05.299 --> 00:34:08.529 align:start position:0%
subtract 0 from any number you get the
same<00:34:05.479><c> number</c><00:34:05.509><c> back</c><00:34:05.960><c> so</c><00:34:06.649><c> it's</c><00:34:07.039><c> the</c><00:34:07.190><c> same</c><00:34:07.369><c> as</c><00:34:07.820><c> an</c>

00:34:08.529 --> 00:34:08.539 align:start position:0%
same number back so it's the same as an
 

00:34:08.539 --> 00:34:11.109 align:start position:0%
same number back so it's the same as an
identity<00:34:09.129><c> we</c><00:34:10.129><c> already</c><00:34:10.399><c> know</c><00:34:10.549><c> what</c><00:34:10.760><c> the</c><00:34:10.879><c> lambda</c>

00:34:11.109 --> 00:34:11.119 align:start position:0%
identity we already know what the lambda
 

00:34:11.119 --> 00:34:13.299 align:start position:0%
identity we already know what the lambda
expression<00:34:11.510><c> for</c><00:34:11.690><c> identity</c><00:34:12.260><c> is</c><00:34:12.440><c> so</c><00:34:13.010><c> what</c><00:34:13.190><c> we'll</c>

00:34:13.299 --> 00:34:13.309 align:start position:0%
expression for identity is so what we'll
 

00:34:13.309 --> 00:34:15.190 align:start position:0%
expression for identity is so what we'll
do<00:34:13.429><c> in</c><00:34:13.549><c> this</c><00:34:13.639><c> case</c><00:34:13.849><c> is</c><00:34:13.909><c> will</c><00:34:14.210><c> use</c><00:34:14.539><c> the</c><00:34:14.839><c> lambda</c>

00:34:15.190 --> 00:34:15.200 align:start position:0%
do in this case is will use the lambda
 

00:34:15.200 --> 00:34:17.799 align:start position:0%
do in this case is will use the lambda
expression<00:34:15.619><c> for</c><00:34:15.770><c> identity</c><00:34:16.339><c> to</c><00:34:16.879><c> represent</c><00:34:17.450><c> the</c>

00:34:17.799 --> 00:34:17.809 align:start position:0%
expression for identity to represent the
 

00:34:17.809 --> 00:34:20.619 align:start position:0%
expression for identity to represent the
number<00:34:18.139><c> 0</c><00:34:18.379><c> that</c><00:34:18.919><c> makes</c><00:34:19.099><c> sense</c><00:34:19.339><c> it's</c><00:34:19.879><c> also</c><00:34:20.089><c> kind</c>

00:34:20.619 --> 00:34:20.629 align:start position:0%
number 0 that makes sense it's also kind
 

00:34:20.629 --> 00:34:22.470 align:start position:0%
number 0 that makes sense it's also kind
of<00:34:20.690><c> logical</c><00:34:21.200><c> from</c><00:34:21.409><c> the</c><00:34:21.559><c> point</c><00:34:21.740><c> of</c><00:34:21.829><c> view</c><00:34:21.889><c> of</c>

00:34:22.470 --> 00:34:22.480 align:start position:0%
of logical from the point of view of
 

00:34:22.480 --> 00:34:25.480 align:start position:0%
of logical from the point of view of
using<00:34:23.480><c> our</c><00:34:23.569><c> boolean</c><00:34:23.899><c> true</c><00:34:24.139><c> and</c><00:34:24.260><c> false</c><00:34:24.440><c> if</c><00:34:24.919><c> you</c>

00:34:25.480 --> 00:34:25.490 align:start position:0%
using our boolean true and false if you
 

00:34:25.490 --> 00:34:27.430 align:start position:0%
using our boolean true and false if you
think<00:34:25.669><c> about</c><00:34:25.730><c> C</c><00:34:26.119><c> programming</c><00:34:26.539><c> C</c><00:34:26.990><c> language</c><00:34:27.319><c> if</c>

00:34:27.430 --> 00:34:27.440 align:start position:0%
think about C programming C language if
 

00:34:27.440 --> 00:34:29.919 align:start position:0%
think about C programming C language if
you<00:34:27.500><c> if</c><00:34:27.710><c> you</c><00:34:27.799><c> don't</c><00:34:27.919><c> see</c><00:34:28.220><c> in</c><00:34:29.059><c> C</c><00:34:29.450><c> there</c><00:34:29.629><c> isn't</c><00:34:29.839><c> a</c>

00:34:29.919 --> 00:34:29.929 align:start position:0%
you if you don't see in C there isn't a
 

00:34:29.929 --> 00:34:32.559 align:start position:0%
you if you don't see in C there isn't a
boolean<00:34:30.139><c> type</c><00:34:30.319><c> so</c><00:34:31.069><c> if</c><00:34:31.159><c> you</c><00:34:31.309><c> evaluate</c><00:34:31.700><c> an</c><00:34:32.329><c> if</c>

00:34:32.559 --> 00:34:32.569 align:start position:0%
boolean type so if you evaluate an if
 

00:34:32.569 --> 00:34:36.970 align:start position:0%
boolean type so if you evaluate an if
statement<00:34:33.069><c> then</c><00:34:34.069><c> the</c><00:34:34.579><c> the</c><00:34:34.970><c> false</c><00:34:35.270><c> value</c><00:34:36.139><c> is</c><00:34:36.349><c> 0</c>

00:34:36.970 --> 00:34:36.980 align:start position:0%
statement then the the false value is 0
 

00:34:36.980 --> 00:34:39.879 align:start position:0%
statement then the the false value is 0
true<00:34:37.490><c> is</c><00:34:37.700><c> anything</c><00:34:38.179><c> other</c><00:34:38.510><c> than</c><00:34:38.629><c> 0</c><00:34:38.990><c> so</c><00:34:39.529><c> in</c><00:34:39.770><c> this</c>

00:34:39.879 --> 00:34:39.889 align:start position:0%
true is anything other than 0 so in this
 

00:34:39.889 --> 00:34:41.649 align:start position:0%
true is anything other than 0 so in this
case<00:34:40.129><c> true</c><00:34:40.669><c> is</c><00:34:40.789><c> the</c><00:34:40.879><c> same</c><00:34:41.059><c> as</c><00:34:41.149><c> the</c><00:34:41.270><c> identity</c>

00:34:41.649 --> 00:34:41.659 align:start position:0%
case true is the same as the identity
 

00:34:41.659 --> 00:34:45.490 align:start position:0%
case true is the same as the identity
expression<00:34:42.339><c> so</c><00:34:43.339><c> it's</c><00:34:43.520><c> also</c><00:34:43.700><c> the</c><00:34:43.940><c> yes</c><00:34:44.419><c> so</c><00:34:44.839><c> we</c>

00:34:45.490 --> 00:34:45.500 align:start position:0%
expression so it's also the yes so we
 

00:34:45.500 --> 00:34:47.619 align:start position:0%
expression so it's also the yes so we
end<00:34:45.619><c> up</c><00:34:45.710><c> with</c><00:34:45.859><c> 0</c><00:34:46.069><c> and</c><00:34:46.549><c> so</c><00:34:46.700><c> it</c><00:34:47.149><c> kind</c><00:34:47.299><c> of</c><00:34:47.329><c> ties</c>

00:34:47.619 --> 00:34:47.629 align:start position:0%
end up with 0 and so it kind of ties
 

00:34:47.629 --> 00:34:50.049 align:start position:0%
end up with 0 and so it kind of ties
together<00:34:47.929><c> great</c><00:34:48.409><c> the</c><00:34:49.279><c> other</c><00:34:49.309><c> thing</c><00:34:49.639><c> is</c><00:34:49.789><c> that</c>

00:34:50.049 --> 00:34:50.059 align:start position:0%
together great the other thing is that
 

00:34:50.059 --> 00:34:51.669 align:start position:0%
together great the other thing is that
you<00:34:50.210><c> can</c><00:34:50.389><c> think</c><00:34:50.629><c> of</c><00:34:50.750><c> it</c><00:34:50.839><c> in</c><00:34:51.079><c> this</c><00:34:51.230><c> way</c><00:34:51.409><c> that</c><00:34:51.619><c> the</c>

00:34:51.669 --> 00:34:51.679 align:start position:0%
you can think of it in this way that the
 

00:34:51.679 --> 00:34:54.279 align:start position:0%
you can think of it in this way that the
function<00:34:52.309><c> f</c><00:34:52.429><c> is</c><00:34:52.909><c> being</c><00:34:53.480><c> applied</c><00:34:53.779><c> to</c><00:34:53.839><c> the</c>

00:34:54.279 --> 00:34:54.289 align:start position:0%
function f is being applied to the
 

00:34:54.289 --> 00:34:57.129 align:start position:0%
function f is being applied to the
lambda<00:34:54.559><c> expression</c><00:34:55.010><c> 0</c><00:34:55.460><c> times</c><00:34:55.879><c> now</c><00:34:56.839><c> you</c><00:34:57.020><c> might</c>

00:34:57.129 --> 00:34:57.139 align:start position:0%
lambda expression 0 times now you might
 

00:34:57.139 --> 00:34:58.839 align:start position:0%
lambda expression 0 times now you might
look<00:34:57.170><c> at</c><00:34:57.349><c> mango</c><00:34:57.589><c> okay</c><00:34:58.039><c> what</c><00:34:58.250><c> does</c><00:34:58.309><c> that</c><00:34:58.369><c> mean</c>

00:34:58.839 --> 00:34:58.849 align:start position:0%
look at mango okay what does that mean
 

00:34:58.849 --> 00:35:01.299 align:start position:0%
look at mango okay what does that mean
if<00:34:59.119><c> I</c><00:34:59.240><c> point</c><00:34:59.480><c> isn't</c><00:34:59.630><c> 0</c><00:35:00.049><c> times</c><00:35:00.380><c> but</c><00:35:00.980><c> it</c><00:35:01.099><c> becomes</c>

00:35:01.299 --> 00:35:01.309 align:start position:0%
if I point isn't 0 times but it becomes
 

00:35:01.309 --> 00:35:04.120 align:start position:0%
if I point isn't 0 times but it becomes
clearer<00:35:01.609><c> if</c><00:35:01.760><c> we</c><00:35:01.880><c> look</c><00:35:02.029><c> at</c><00:35:02.150><c> 1</c><00:35:02.859><c> okay</c><00:35:03.859><c> so</c><00:35:03.890><c> the</c>

00:35:04.120 --> 00:35:04.130 align:start position:0%
clearer if we look at 1 okay so the
 

00:35:04.130 --> 00:35:06.279 align:start position:0%
clearer if we look at 1 okay so the
lambda<00:35:04.400><c> expression</c><00:35:04.760><c> for</c><00:35:04.910><c> 1</c><00:35:05.180><c> is</c><00:35:05.539><c> a</c><00:35:05.960><c> lambda</c>

00:35:06.279 --> 00:35:06.289 align:start position:0%
lambda expression for 1 is a lambda
 

00:35:06.289 --> 00:35:08.230 align:start position:0%
lambda expression for 1 is a lambda
expression<00:35:06.440><c> where</c><00:35:06.890><c> we</c><00:35:06.980><c> take</c><00:35:07.190><c> X</c><00:35:07.430><c> and</c><00:35:07.730><c> then</c><00:35:08.150><c> we</c>

00:35:08.230 --> 00:35:08.240 align:start position:0%
expression where we take X and then we
 

00:35:08.240 --> 00:35:12.220 align:start position:0%
expression where we take X and then we
apply<00:35:08.660><c> X</c><00:35:09.589><c> to</c><00:35:10.579><c> the</c><00:35:11.059><c> function</c><00:35:11.390><c> f</c><00:35:11.599><c> that</c><00:35:12.109><c> we're</c>

00:35:12.220 --> 00:35:12.230 align:start position:0%
apply X to the function f that we're
 

00:35:12.230 --> 00:35:14.380 align:start position:0%
apply X to the function f that we're
passing<00:35:12.589><c> like</c><00:35:13.369><c> I</c><00:35:13.460><c> say</c><00:35:13.609><c> this</c><00:35:13.730><c> already</c><00:35:14.059><c> starts</c>

00:35:14.380 --> 00:35:14.390 align:start position:0%
passing like I say this already starts
 

00:35:14.390 --> 00:35:16.029 align:start position:0%
passing like I say this already starts
to<00:35:14.510><c> get</c><00:35:14.630><c> a</c><00:35:14.660><c> little</c><00:35:14.839><c> as</c><00:35:15.049><c> a</c><00:35:15.109><c> Java</c><00:35:15.529><c> program</c><00:35:15.829><c> it</c><00:35:15.950><c> was</c>

00:35:16.029 --> 00:35:16.039 align:start position:0%
to get a little as a Java program it was
 

00:35:16.039 --> 00:35:17.740 align:start position:0%
to get a little as a Java program it was
already<00:35:16.579><c> starting</c><00:35:16.940><c> to</c><00:35:16.970><c> get</c><00:35:17.119><c> a</c><00:35:17.180><c> little</c><00:35:17.569><c> bit</c>

00:35:17.740 --> 00:35:17.750 align:start position:0%
already starting to get a little bit
 

00:35:17.750 --> 00:35:20.590 align:start position:0%
already starting to get a little bit
complicated<00:35:18.440><c> here</c><00:35:19.030><c> so</c><00:35:20.030><c> that's</c><00:35:20.240><c> what</c><00:35:20.390><c> we</c><00:35:20.480><c> did</c>

00:35:20.590 --> 00:35:20.600 align:start position:0%
complicated here so that's what we did
 

00:35:20.600 --> 00:35:23.290 align:start position:0%
complicated here so that's what we did
we<00:35:20.690><c> have</c><00:35:20.780><c> apply</c><00:35:21.470><c> the</c><00:35:21.530><c> function</c><00:35:21.830><c> f</c><00:35:22.190><c> to</c><00:35:22.730><c> X</c><00:35:22.940><c> and</c>

00:35:23.290 --> 00:35:23.300 align:start position:0%
we have apply the function f to X and
 

00:35:23.300 --> 00:35:25.420 align:start position:0%
we have apply the function f to X and
make<00:35:24.230><c> that</c><00:35:24.350><c> part</c><00:35:24.530><c> of</c><00:35:24.620><c> our</c><00:35:24.740><c> lambda</c><00:35:24.980><c> expression</c>

00:35:25.420 --> 00:35:25.430 align:start position:0%
make that part of our lambda expression
 

00:35:25.430 --> 00:35:28.510 align:start position:0%
make that part of our lambda expression
and<00:35:26.420><c> the</c><00:35:26.750><c> key</c><00:35:26.870><c> thing</c><00:35:27.080><c> here</c><00:35:27.110><c> is</c><00:35:27.410><c> if</c><00:35:28.220><c> you</c><00:35:28.310><c> look</c><00:35:28.430><c> at</c>

00:35:28.510 --> 00:35:28.520 align:start position:0%
and the key thing here is if you look at
 

00:35:28.520 --> 00:35:30.130 align:start position:0%
and the key thing here is if you look at
lambda<00:35:28.670><c> calculus</c><00:35:29.150><c> lambda</c><00:35:29.450><c> calculus</c><00:35:29.780><c> doesn't</c>

00:35:30.130 --> 00:35:30.140 align:start position:0%
lambda calculus lambda calculus doesn't
 

00:35:30.140 --> 00:35:32.230 align:start position:0%
lambda calculus lambda calculus doesn't
use<00:35:30.410><c> loops</c><00:35:30.800><c> so</c><00:35:31.460><c> we</c><00:35:31.550><c> would</c><00:35:31.700><c> never</c><00:35:31.820><c> use</c><00:35:31.970><c> a</c><00:35:32.000><c> for</c>

00:35:32.230 --> 00:35:32.240 align:start position:0%
use loops so we would never use a for
 

00:35:32.240 --> 00:35:34.600 align:start position:0%
use loops so we would never use a for
loop<00:35:32.270><c> in</c><00:35:32.570><c> lambda</c><00:35:32.780><c> calculus</c><00:35:33.290><c> lambda</c><00:35:34.220><c> calculus</c>

00:35:34.600 --> 00:35:34.610 align:start position:0%
loop in lambda calculus lambda calculus
 

00:35:34.610 --> 00:35:36.990 align:start position:0%
loop in lambda calculus lambda calculus
does<00:35:34.820><c> things</c><00:35:35.090><c> repeatedly</c><00:35:35.480><c> by</c><00:35:36.350><c> in</c><00:35:36.710><c> effect</c>

00:35:36.990 --> 00:35:37.000 align:start position:0%
does things repeatedly by in effect
 

00:35:37.000 --> 00:35:40.930 align:start position:0%
does things repeatedly by in effect
recursively<00:35:38.000><c> calling</c><00:35:38.360><c> the</c><00:35:38.660><c> same</c><00:35:38.870><c> function</c><00:35:39.940><c> so</c>

00:35:40.930 --> 00:35:40.940 align:start position:0%
recursively calling the same function so
 

00:35:40.940 --> 00:35:42.610 align:start position:0%
recursively calling the same function so
if<00:35:41.090><c> we</c><00:35:41.210><c> look</c><00:35:41.390><c> at</c><00:35:41.510><c> the</c><00:35:41.600><c> lambda</c><00:35:41.990><c> expression</c><00:35:42.470><c> for</c>

00:35:42.610 --> 00:35:42.620 align:start position:0%
if we look at the lambda expression for
 

00:35:42.620 --> 00:35:45.250 align:start position:0%
if we look at the lambda expression for
2<00:35:42.980><c> what</c><00:35:43.910><c> we</c><00:35:44.000><c> do</c><00:35:44.150><c> is</c><00:35:44.300><c> we</c><00:35:44.420><c> apply</c><00:35:44.510><c> the</c><00:35:44.840><c> function</c>

00:35:45.250 --> 00:35:45.260 align:start position:0%
2 what we do is we apply the function
 

00:35:45.260 --> 00:35:48.820 align:start position:0%
2 what we do is we apply the function
recursively<00:35:46.190><c> twice</c><00:35:46.790><c> so</c><00:35:47.600><c> now</c><00:35:47.810><c> we</c><00:35:47.870><c> have</c><00:35:48.110><c> X</c><00:35:48.530><c> goes</c>

00:35:48.820 --> 00:35:48.830 align:start position:0%
recursively twice so now we have X goes
 

00:35:48.830 --> 00:35:52.720 align:start position:0%
recursively twice so now we have X goes
to<00:35:48.860><c> F</c><00:35:49.160><c> dot</c><00:35:49.400><c> apply</c><00:35:49.640><c> of</c><00:35:50.000><c> F</c><00:35:50.300><c> dot</c><00:35:50.450><c> apply</c><00:35:50.660><c> of</c><00:35:50.840><c> X</c><00:35:51.730><c> great</c>

00:35:52.720 --> 00:35:52.730 align:start position:0%
to F dot apply of F dot apply of X great
 

00:35:52.730 --> 00:35:54.250 align:start position:0%
to F dot apply of F dot apply of X great
set<00:35:53.060><c> and</c><00:35:53.180><c> you</c><00:35:53.240><c> can</c><00:35:53.390><c> continue</c><00:35:53.720><c> with</c><00:35:53.930><c> that</c><00:35:54.050><c> as</c>

00:35:54.250 --> 00:35:54.260 align:start position:0%
set and you can continue with that as
 

00:35:54.260 --> 00:35:55.870 align:start position:0%
set and you can continue with that as
many<00:35:54.500><c> times</c><00:35:54.740><c> as</c><00:35:54.950><c> you</c><00:35:55.040><c> like</c><00:35:55.070><c> to</c><00:35:55.430><c> represent</c>

00:35:55.870 --> 00:35:55.880 align:start position:0%
many times as you like to represent
 

00:35:55.880 --> 00:35:58.150 align:start position:0%
many times as you like to represent
numbers<00:35:56.000><c> greater</c><00:35:56.810><c> than</c><00:35:56.990><c> 2</c><00:35:57.140><c> I'm</c><00:35:57.770><c> not</c><00:35:57.800><c> going</c><00:35:58.100><c> to</c>

00:35:58.150 --> 00:35:58.160 align:start position:0%
numbers greater than 2 I'm not going to
 

00:35:58.160 --> 00:36:01.210 align:start position:0%
numbers greater than 2 I'm not going to
do<00:35:58.250><c> that</c><00:35:58.400><c> because</c><00:35:58.790><c> I</c><00:35:59.030><c> think</c><00:35:59.420><c> twos</c><00:35:59.720><c> enough</c><00:36:00.220><c> you</c>

00:36:01.210 --> 00:36:01.220 align:start position:0%
do that because I think twos enough you
 

00:36:01.220 --> 00:36:04.390 align:start position:0%
do that because I think twos enough you
get<00:36:01.400><c> the</c><00:36:01.520><c> idea</c><00:36:01.820><c> right</c><00:36:02.890><c> now</c><00:36:03.890><c> we</c><00:36:03.950><c> need</c><00:36:04.220><c> to</c><00:36:04.310><c> look</c>

00:36:04.390 --> 00:36:04.400 align:start position:0%
get the idea right now we need to look
 

00:36:04.400 --> 00:36:07.780 align:start position:0%
get the idea right now we need to look
at<00:36:04.580><c> how</c><00:36:04.700><c> we</c><00:36:04.760><c> can</c><00:36:04.910><c> do</c><00:36:05.060><c> some</c><00:36:05.240><c> mathematics</c><00:36:05.770><c> so</c><00:36:06.790><c> how</c>

00:36:07.780 --> 00:36:07.790 align:start position:0%
at how we can do some mathematics so how
 

00:36:07.790 --> 00:36:09.760 align:start position:0%
at how we can do some mathematics so how
about<00:36:07.850><c> if</c><00:36:08.090><c> we</c><00:36:08.120><c> want</c><00:36:08.390><c> to</c><00:36:08.480><c> increase</c><00:36:09.380><c> the</c><00:36:09.500><c> number</c>

00:36:09.760 --> 00:36:09.770 align:start position:0%
about if we want to increase the number
 

00:36:09.770 --> 00:36:12.400 align:start position:0%
about if we want to increase the number
that<00:36:10.070><c> we</c><00:36:10.160><c> have</c><00:36:10.370><c> by</c><00:36:11.000><c> one</c><00:36:11.300><c> well</c><00:36:12.170><c> that's</c><00:36:12.230><c> actually</c>

00:36:12.400 --> 00:36:12.410 align:start position:0%
that we have by one well that's actually
 

00:36:12.410 --> 00:36:13.960 align:start position:0%
that we have by one well that's actually
not<00:36:12.620><c> too</c><00:36:12.800><c> difficult</c><00:36:12.980><c> because</c><00:36:13.370><c> if</c><00:36:13.730><c> you</c><00:36:13.820><c> think</c>

00:36:13.960 --> 00:36:13.970 align:start position:0%
not too difficult because if you think
 

00:36:13.970 --> 00:36:15.610 align:start position:0%
not too difficult because if you think
about<00:36:14.180><c> it</c><00:36:14.360><c> what</c><00:36:14.540><c> we</c><00:36:14.660><c> need</c><00:36:14.810><c> to</c><00:36:14.900><c> do</c><00:36:15.050><c> is</c><00:36:15.290><c> we</c><00:36:15.440><c> simply</c>

00:36:15.610 --> 00:36:15.620 align:start position:0%
about it what we need to do is we simply
 

00:36:15.620 --> 00:36:18.120 align:start position:0%
about it what we need to do is we simply
need<00:36:15.920><c> to</c><00:36:15.950><c> apply</c><00:36:16.250><c> the</c><00:36:16.310><c> function</c><00:36:16.580><c> to</c><00:36:16.880><c> that</c><00:36:17.210><c> again</c>

00:36:18.120 --> 00:36:18.130 align:start position:0%
need to apply the function to that again
 

00:36:18.130 --> 00:36:21.480 align:start position:0%
need to apply the function to that again
so<00:36:19.130><c> the</c><00:36:19.280><c> the</c><00:36:19.550><c> lambda</c><00:36:19.820><c> notation</c><00:36:20.200><c> shows</c><00:36:21.200><c> that</c><00:36:21.320><c> is</c>

00:36:21.480 --> 00:36:21.490 align:start position:0%
so the the lambda notation shows that is
 

00:36:21.490 --> 00:36:24.310 align:start position:0%
so the the lambda notation shows that is
that<00:36:22.490><c> way</c><00:36:22.610><c> and</c><00:36:22.820><c> in</c><00:36:23.390><c> terms</c><00:36:23.720><c> of</c><00:36:23.870><c> a</c><00:36:23.930><c> successor</c>

00:36:24.310 --> 00:36:24.320 align:start position:0%
that way and in terms of a successor
 

00:36:24.320 --> 00:36:27.610 align:start position:0%
that way and in terms of a successor
lambda<00:36:24.860><c> expression</c><00:36:25.400><c> we</c><00:36:26.030><c> end</c><00:36:26.420><c> up</c><00:36:26.630><c> with</c><00:36:26.870><c> n</c><00:36:27.140><c> which</c>

00:36:27.610 --> 00:36:27.620 align:start position:0%
lambda expression we end up with n which
 

00:36:27.620 --> 00:36:29.500 align:start position:0%
lambda expression we end up with n which
is<00:36:27.740><c> our</c><00:36:27.890><c> number</c><00:36:28.190><c> and</c><00:36:28.340><c> then</c><00:36:28.970><c> we</c><00:36:29.060><c> want</c><00:36:29.240><c> to</c><00:36:29.300><c> apply</c>

00:36:29.500 --> 00:36:29.510 align:start position:0%
is our number and then we want to apply
 

00:36:29.510 --> 00:36:31.810 align:start position:0%
is our number and then we want to apply
the<00:36:29.630><c> function</c><00:36:30.020><c> f</c><00:36:30.200><c> to</c><00:36:30.350><c> that</c><00:36:30.470><c> one</c><00:36:30.620><c> more</c><00:36:30.800><c> time</c><00:36:30.860><c> so</c>

00:36:31.810 --> 00:36:31.820 align:start position:0%
the function f to that one more time so
 

00:36:31.820 --> 00:36:34.690 align:start position:0%
the function f to that one more time so
we<00:36:31.850><c> get</c><00:36:32.000><c> F</c><00:36:32.150><c> dot</c><00:36:32.330><c> apply</c><00:36:32.600><c> of</c><00:36:32.900><c> n</c><00:36:33.290><c> dot</c><00:36:33.980><c> apply</c><00:36:34.250><c> of</c><00:36:34.490><c> F</c>

00:36:34.690 --> 00:36:34.700 align:start position:0%
we get F dot apply of n dot apply of F
 

00:36:34.700 --> 00:36:38.190 align:start position:0%
we get F dot apply of n dot apply of F
dot<00:36:34.940><c> apply</c><00:36:35.180><c> of</c><00:36:35.330><c> X</c><00:36:35.620><c> okay</c><00:36:36.620><c> so</c><00:36:36.830><c> the</c><00:36:37.400><c> successor</c><00:36:37.790><c> is</c>

00:36:38.190 --> 00:36:38.200 align:start position:0%
dot apply of X okay so the successor is
 

00:36:38.200 --> 00:36:40.330 align:start position:0%
dot apply of X okay so the successor is
fairly<00:36:39.200><c> straightforward</c><00:36:39.500><c> if</c><00:36:39.830><c> we</c><00:36:39.890><c> simply</c><00:36:40.160><c> want</c>

00:36:40.330 --> 00:36:40.340 align:start position:0%
fairly straightforward if we simply want
 

00:36:40.340 --> 00:36:42.630 align:start position:0%
fairly straightforward if we simply want
to<00:36:40.370><c> apply</c><00:36:40.760><c> that</c><00:36:40.790><c> function</c><00:36:41.210><c> one</c><00:36:41.630><c> more</c><00:36:41.840><c> time</c>

00:36:42.630 --> 00:36:42.640 align:start position:0%
to apply that function one more time
 

00:36:42.640 --> 00:36:46.240 align:start position:0%
to apply that function one more time
the<00:36:43.690><c> predecessor</c><00:36:44.690><c> a</c><00:36:44.960><c> little</c><00:36:45.680><c> bit</c><00:36:45.860><c> more</c><00:36:46.040><c> tricky</c>

00:36:46.240 --> 00:36:46.250 align:start position:0%
the predecessor a little bit more tricky
 

00:36:46.250 --> 00:36:48.040 align:start position:0%
the predecessor a little bit more tricky
because<00:36:46.760><c> what</c><00:36:47.420><c> we're</c><00:36:47.570><c> doing</c><00:36:47.780><c> is</c><00:36:47.900><c> we're</c>

00:36:48.040 --> 00:36:48.050 align:start position:0%
because what we're doing is we're
 

00:36:48.050 --> 00:36:50.320 align:start position:0%
because what we're doing is we're
actually<00:36:48.140><c> removing</c><00:36:49.070><c> one</c><00:36:49.640><c> call</c><00:36:49.970><c> to</c><00:36:50.240><c> the</c>

00:36:50.320 --> 00:36:50.330 align:start position:0%
actually removing one call to the
 

00:36:50.330 --> 00:36:52.420 align:start position:0%
actually removing one call to the
function<00:36:50.480><c> so</c><00:36:51.380><c> that</c><00:36:51.620><c> that</c><00:36:51.980><c> makes</c><00:36:52.160><c> life</c><00:36:52.370><c> a</c>

00:36:52.420 --> 00:36:52.430 align:start position:0%
function so that that makes life a
 

00:36:52.430 --> 00:36:54.370 align:start position:0%
function so that that makes life a
little<00:36:52.520><c> bit</c><00:36:52.640><c> harder</c><00:36:53.030><c> and</c><00:36:53.210><c> I'm</c><00:36:53.690><c> not</c><00:36:53.990><c> going</c><00:36:54.260><c> to</c>

00:36:54.370 --> 00:36:54.380 align:start position:0%
little bit harder and I'm not going to
 

00:36:54.380 --> 00:36:56.710 align:start position:0%
little bit harder and I'm not going to
explain<00:36:54.710><c> this</c><00:36:55.090><c> I'm</c><00:36:56.090><c> just</c><00:36:56.300><c> going</c><00:36:56.420><c> to</c><00:36:56.480><c> show</c><00:36:56.630><c> you</c>

00:36:56.710 --> 00:36:56.720 align:start position:0%
explain this I'm just going to show you
 

00:36:56.720 --> 00:36:58.120 align:start position:0%
explain this I'm just going to show you
what<00:36:56.810><c> it</c><00:36:56.900><c> is</c>

00:36:58.120 --> 00:36:58.130 align:start position:0%
what it is
 

00:36:58.130 --> 00:37:00.219 align:start position:0%
what it is
so<00:36:58.729><c> that's</c><00:36:58.880><c> the</c><00:36:59.059><c> lambda</c><00:36:59.509><c> note</c><00:36:59.660><c> that's</c><00:37:00.079><c> the</c>

00:37:00.219 --> 00:37:00.229 align:start position:0%
so that's the lambda note that's the
 

00:37:00.229 --> 00:37:01.870 align:start position:0%
so that's the lambda note that's the
lambda<00:37:00.499><c> notation</c><00:37:00.589><c> forever</c><00:37:01.309><c> because</c><00:37:01.670><c> then</c><00:37:01.759><c> we</c>

00:37:01.870 --> 00:37:01.880 align:start position:0%
lambda notation forever because then we
 

00:37:01.880 --> 00:37:03.339 align:start position:0%
lambda notation forever because then we
start<00:37:02.119><c> getting</c><00:37:02.239><c> all</c><00:37:02.479><c> sorts</c><00:37:02.660><c> of</c><00:37:02.779><c> extra</c><00:37:03.079><c> letters</c>

00:37:03.339 --> 00:37:03.349 align:start position:0%
start getting all sorts of extra letters
 

00:37:03.349 --> 00:37:06.039 align:start position:0%
start getting all sorts of extra letters
involved<00:37:03.799><c> so</c><00:37:03.890><c> there's</c><00:37:03.979><c> G</c><00:37:04.220><c> H</c><00:37:04.460><c> and</c><00:37:04.789><c> U</c><00:37:05.329><c> and</c><00:37:05.509><c> X</c><00:37:05.720><c> and</c>

00:37:06.039 --> 00:37:06.049 align:start position:0%
involved so there's G H and U and X and
 

00:37:06.049 --> 00:37:10.150 align:start position:0%
involved so there's G H and U and X and
the<00:37:06.710><c> equivalent</c><00:37:07.039><c> Java</c><00:37:07.910><c> code</c><00:37:08.119><c> becomes</c><00:37:09.109><c> this</c><00:37:09.410><c> so</c>

00:37:10.150 --> 00:37:10.160 align:start position:0%
the equivalent Java code becomes this so
 

00:37:10.160 --> 00:37:12.190 align:start position:0%
the equivalent Java code becomes this so
it<00:37:10.430><c> becomes</c><00:37:10.789><c> quite</c><00:37:11.119><c> sort</c><00:37:11.390><c> of</c><00:37:11.420><c> nasty</c><00:37:11.869><c> in</c><00:37:11.989><c> terms</c>

00:37:12.190 --> 00:37:12.200 align:start position:0%
it becomes quite sort of nasty in terms
 

00:37:12.200 --> 00:37:15.190 align:start position:0%
it becomes quite sort of nasty in terms
of<00:37:12.349><c> our</c><00:37:12.470><c> gates</c><00:37:12.619><c> n</c><00:37:12.829><c> F</c><00:37:13.130><c> X</c><00:37:13.519><c> and</c><00:37:13.880><c> apply</c><00:37:14.479><c> GJ</c><00:37:14.809><c> over</c>

00:37:15.190 --> 00:37:15.200 align:start position:0%
of our gates n F X and apply GJ over
 

00:37:15.200 --> 00:37:17.559 align:start position:0%
of our gates n F X and apply GJ over
that<00:37:15.380><c> we're</c><00:37:16.309><c> not</c><00:37:16.400><c> going</c><00:37:16.549><c> to</c><00:37:16.609><c> use</c><00:37:16.789><c> that</c><00:37:16.819><c> so</c><00:37:17.539><c> I</c>

00:37:17.559 --> 00:37:17.569 align:start position:0%
that we're not going to use that so I
 

00:37:17.569 --> 00:37:19.059 align:start position:0%
that we're not going to use that so I
figured<00:37:18.079><c> that</c><00:37:18.259><c> that</c><00:37:18.440><c> that's</c><00:37:18.680><c> some</c><00:37:18.890><c> rather</c>

00:37:19.059 --> 00:37:19.069 align:start position:0%
figured that that that's some rather
 

00:37:19.069 --> 00:37:21.190 align:start position:0%
figured that that that's some rather
complicated<00:37:19.579><c> if</c><00:37:19.729><c> you</c><00:37:20.089><c> really</c><00:37:20.749><c> follow</c><00:37:20.989><c> it</c>

00:37:21.190 --> 00:37:21.200 align:start position:0%
complicated if you really follow it
 

00:37:21.200 --> 00:37:22.719 align:start position:0%
complicated if you really follow it
through<00:37:21.319><c> it</c><00:37:21.559><c> does</c><00:37:21.739><c> actually</c><00:37:21.920><c> work</c><00:37:22.220><c> and</c>

00:37:22.719 --> 00:37:22.729 align:start position:0%
through it does actually work and
 

00:37:22.729 --> 00:37:26.890 align:start position:0%
through it does actually work and
guarantee<00:37:23.210><c> that</c><00:37:24.249><c> so</c><00:37:25.249><c> then</c><00:37:25.579><c> let's</c><00:37:26.180><c> look</c><00:37:26.390><c> at</c><00:37:26.539><c> how</c>

00:37:26.890 --> 00:37:26.900 align:start position:0%
guarantee that so then let's look at how
 

00:37:26.900 --> 00:37:29.410 align:start position:0%
guarantee that so then let's look at how
we<00:37:26.960><c> can</c><00:37:27.200><c> add</c><00:37:27.529><c> two</c><00:37:28.160><c> numbers</c><00:37:28.309><c> together</c><00:37:28.579><c> almost</c>

00:37:29.410 --> 00:37:29.420 align:start position:0%
we can add two numbers together almost
 

00:37:29.420 --> 00:37:31.779 align:start position:0%
we can add two numbers together almost
into<00:37:30.049><c> the</c><00:37:30.170><c> the</c><00:37:30.410><c> kind</c><00:37:30.769><c> of</c><00:37:30.799><c> bit</c><00:37:30.950><c> where</c><00:37:31.670><c> we're</c>

00:37:31.779 --> 00:37:31.789 align:start position:0%
into the the kind of bit where we're
 

00:37:31.789 --> 00:37:33.339 align:start position:0%
into the the kind of bit where we're
going<00:37:31.910><c> to</c><00:37:31.970><c> do</c><00:37:32.029><c> something</c><00:37:32.210><c> interesting</c><00:37:32.660><c> so</c>

00:37:33.339 --> 00:37:33.349 align:start position:0%
going to do something interesting so
 

00:37:33.349 --> 00:37:36.460 align:start position:0%
going to do something interesting so
addition<00:37:34.309><c> is</c><00:37:34.460><c> simply</c><00:37:34.819><c> repeated</c><00:37:35.470><c> incrementing</c>

00:37:36.460 --> 00:37:36.470 align:start position:0%
addition is simply repeated incrementing
 

00:37:36.470 --> 00:37:39.789 align:start position:0%
addition is simply repeated incrementing
so<00:37:37.039><c> if</c><00:37:37.190><c> I</c><00:37:37.309><c> want</c><00:37:37.519><c> to</c><00:37:37.640><c> add</c><00:37:37.759><c> n</c><00:37:38.150><c> to</c><00:37:38.509><c> M</c><00:37:38.720><c> it's</c><00:37:39.410><c> the</c><00:37:39.589><c> same</c>

00:37:39.789 --> 00:37:39.799 align:start position:0%
so if I want to add n to M it's the same
 

00:37:39.799 --> 00:37:43.690 align:start position:0%
so if I want to add n to M it's the same
as<00:37:39.979><c> saying</c><00:37:40.009><c> add</c><00:37:40.339><c> 1</c><00:37:41.210><c> to</c><00:37:41.569><c> M</c><00:37:41.749><c> n</c><00:37:42.140><c> times</c><00:37:42.890><c> so</c><00:37:43.640><c> you</c>

00:37:43.690 --> 00:37:43.700 align:start position:0%
as saying add 1 to M n times so you
 

00:37:43.700 --> 00:37:46.210 align:start position:0%
as saying add 1 to M n times so you
already<00:37:43.819><c> know</c><00:37:44.029><c> how</c><00:37:44.180><c> to</c><00:37:44.210><c> add</c><00:37:44.329><c> 1</c><00:37:44.690><c> to</c><00:37:44.720><c> a</c><00:37:45.220><c> function</c>

00:37:46.210 --> 00:37:46.220 align:start position:0%
already know how to add 1 to a function
 

00:37:46.220 --> 00:37:47.950 align:start position:0%
already know how to add 1 to a function
so<00:37:46.999><c> all</c><00:37:47.150><c> we're</c><00:37:47.269><c> going</c><00:37:47.359><c> to</c><00:37:47.420><c> do</c><00:37:47.509><c> in</c><00:37:47.630><c> this</c><00:37:47.720><c> case</c><00:37:47.900><c> is</c>

00:37:47.950 --> 00:37:47.960 align:start position:0%
so all we're going to do in this case is
 

00:37:47.960 --> 00:37:51.609 align:start position:0%
so all we're going to do in this case is
add<00:37:48.289><c> 1</c><00:37:48.979><c> to</c><00:37:49.249><c> the</c><00:37:49.339><c> function</c><00:37:49.759><c> n</c><00:37:49.940><c> times</c><00:37:50.749><c> so</c><00:37:51.410><c> you</c><00:37:51.470><c> end</c>

00:37:51.609 --> 00:37:51.619 align:start position:0%
add 1 to the function n times so you end
 

00:37:51.619 --> 00:37:54.069 align:start position:0%
add 1 to the function n times so you end
up<00:37:51.710><c> this</c><00:37:51.859><c> slightly</c><00:37:52.609><c> more</c><00:37:52.819><c> complex</c><00:37:53.119><c> way</c><00:37:54.049><c> of</c>

00:37:54.069 --> 00:37:54.079 align:start position:0%
up this slightly more complex way of
 

00:37:54.079 --> 00:37:56.229 align:start position:0%
up this slightly more complex way of
doing<00:37:54.319><c> things</c><00:37:54.499><c> that</c><00:37:54.589><c> we've</c><00:37:54.680><c> got</c><00:37:54.769><c> m</c><00:37:54.920><c> n</c><00:37:55.130><c> FX</c><00:37:55.940><c> and</c>

00:37:56.229 --> 00:37:56.239 align:start position:0%
doing things that we've got m n FX and
 

00:37:56.239 --> 00:37:59.829 align:start position:0%
doing things that we've got m n FX and
all<00:37:56.779><c> the</c><00:37:56.930><c> applies</c><00:37:57.489><c> right</c><00:37:58.539><c> subtract</c><00:37:59.539><c> which</c>

00:37:59.829 --> 00:37:59.839 align:start position:0%
all the applies right subtract which
 

00:37:59.839 --> 00:38:01.359 align:start position:0%
all the applies right subtract which
again<00:38:00.109><c> we</c><00:38:00.259><c> won't</c><00:38:00.380><c> bother</c><00:38:00.619><c> with</c><00:38:00.829><c> going</c><00:38:01.130><c> into</c>

00:38:01.359 --> 00:38:01.369 align:start position:0%
again we won't bother with going into
 

00:38:01.369 --> 00:38:03.039 align:start position:0%
again we won't bother with going into
too<00:38:01.489><c> much</c><00:38:01.609><c> detail</c><00:38:02.029><c> we'll</c><00:38:02.599><c> use</c><00:38:02.630><c> the</c>

00:38:03.039 --> 00:38:03.049 align:start position:0%
too much detail we'll use the
 

00:38:03.049 --> 00:38:04.690 align:start position:0%
too much detail we'll use the
predecessor<00:38:03.499><c> function</c><00:38:03.710><c> to</c><00:38:04.099><c> to</c><00:38:04.430><c> shrink</c><00:38:04.640><c> down</c>

00:38:04.690 --> 00:38:04.700 align:start position:0%
predecessor function to to shrink down
 

00:38:04.700 --> 00:38:06.609 align:start position:0%
predecessor function to to shrink down
some<00:38:05.029><c> of</c><00:38:05.059><c> the</c><00:38:05.180><c> code</c><00:38:05.359><c> but</c><00:38:06.049><c> we</c><00:38:06.140><c> can</c><00:38:06.289><c> do</c><00:38:06.380><c> the</c><00:38:06.499><c> same</c>

00:38:06.609 --> 00:38:06.619 align:start position:0%
some of the code but we can do the same
 

00:38:06.619 --> 00:38:08.499 align:start position:0%
some of the code but we can do the same
thing<00:38:06.920><c> of</c><00:38:07.039><c> repeatedly</c><00:38:07.910><c> applying</c><00:38:08.210><c> the</c>

00:38:08.499 --> 00:38:08.509 align:start position:0%
thing of repeatedly applying the
 

00:38:08.509 --> 00:38:14.469 align:start position:0%
thing of repeatedly applying the
decrement<00:38:09.019><c> operation</c><00:38:09.589><c> to</c><00:38:11.109><c> decorate</c><00:38:12.109><c> ok</c><00:38:13.479><c> so</c>

00:38:14.469 --> 00:38:14.479 align:start position:0%
decrement operation to decorate ok so
 

00:38:14.479 --> 00:38:16.359 align:start position:0%
decrement operation to decorate ok so
then<00:38:14.599><c> I</c><00:38:14.630><c> thought</c><00:38:14.839><c> right</c><00:38:15.079><c> we</c><00:38:16.009><c> want</c><00:38:16.190><c> to</c><00:38:16.279><c> do</c>

00:38:16.359 --> 00:38:16.369 align:start position:0%
then I thought right we want to do
 

00:38:16.369 --> 00:38:18.729 align:start position:0%
then I thought right we want to do
something<00:38:16.670><c> simple</c><00:38:16.849><c> with</c><00:38:17.450><c> lambdas</c><00:38:17.839><c> let's</c><00:38:18.410><c> add</c>

00:38:18.729 --> 00:38:18.739 align:start position:0%
something simple with lambdas let's add
 

00:38:18.739 --> 00:38:25.329 align:start position:0%
something simple with lambdas let's add
2<00:38:19.519><c> plus</c><00:38:19.849><c> 2</c><00:38:20.420><c> only</c><00:38:21.289><c> using</c><00:38:21.710><c> lambdas</c><00:38:22.869><c> right</c><00:38:23.869><c> so</c><00:38:24.589><c> we</c>

00:38:25.329 --> 00:38:25.339 align:start position:0%
2 plus 2 only using lambdas right so we
 

00:38:25.339 --> 00:38:28.359 align:start position:0%
2 plus 2 only using lambdas right so we
know<00:38:25.460><c> the</c><00:38:25.549><c> lambda</c><00:38:25.819><c> for</c><00:38:25.940><c> 2</c><00:38:26.089><c> is</c><00:38:27.309><c> apply</c><00:38:28.309><c> the</c>

00:38:28.359 --> 00:38:28.369 align:start position:0%
know the lambda for 2 is apply the
 

00:38:28.369 --> 00:38:30.430 align:start position:0%
know the lambda for 2 is apply the
function<00:38:28.579><c> twice</c><00:38:29.029><c> recursively</c><00:38:29.839><c> and</c><00:38:30.170><c> so</c><00:38:30.289><c> that</c>

00:38:30.430 --> 00:38:30.440 align:start position:0%
function twice recursively and so that
 

00:38:30.440 --> 00:38:31.359 align:start position:0%
function twice recursively and so that
that's<00:38:30.650><c> that</c><00:38:30.739><c> straightforward</c>

00:38:31.359 --> 00:38:31.369 align:start position:0%
that's that straightforward
 

00:38:31.369 --> 00:38:34.690 align:start position:0%
that's that straightforward
F<00:38:31.519><c> X</c><00:38:32.059><c> F</c><00:38:32.329><c> dot</c><00:38:32.779><c> apply</c><00:38:32.989><c> of</c><00:38:33.109><c> F</c><00:38:33.229><c> dot</c><00:38:33.349><c> apply</c><00:38:33.559><c> base</c><00:38:33.739><c> and</c>

00:38:34.690 --> 00:38:34.700 align:start position:0%
F X F dot apply of F dot apply base and
 

00:38:34.700 --> 00:38:36.819 align:start position:0%
F X F dot apply of F dot apply base and
we<00:38:34.969><c> know</c><00:38:35.119><c> that</c><00:38:35.299><c> the</c><00:38:35.539><c> lambda</c><00:38:36.259><c> expression</c><00:38:36.650><c> for</c>

00:38:36.819 --> 00:38:36.829 align:start position:0%
we know that the lambda expression for
 

00:38:36.829 --> 00:38:42.789 align:start position:0%
we know that the lambda expression for
plus<00:38:37.130><c> is</c><00:38:37.900><c> MN</c><00:38:38.900><c> F</c><00:38:39.289><c> X</c><00:38:39.920><c> but</c><00:38:40.309><c> a</c><00:38:40.339><c> lot</c><00:38:40.579><c> of</c><00:38:40.729><c> up</c><00:38:40.880><c> right</c><00:38:41.799><c> we</c>

00:38:42.789 --> 00:38:42.799 align:start position:0%
plus is MN F X but a lot of up right we
 

00:38:42.799 --> 00:38:44.039 align:start position:0%
plus is MN F X but a lot of up right we
need<00:38:42.920><c> to</c><00:38:42.979><c> combine</c><00:38:43.099><c> these</c><00:38:43.339><c> two</c><00:38:43.400><c> and</c>

00:38:44.039 --> 00:38:44.049 align:start position:0%
need to combine these two and
 

00:38:44.049 --> 00:38:46.900 align:start position:0%
need to combine these two and
interestingly<00:38:45.049><c> we</c><00:38:45.799><c> can</c><00:38:45.920><c> do</c><00:38:46.069><c> that</c><00:38:46.249><c> by</c><00:38:46.549><c> saying</c><00:38:46.789><c> a</c>

00:38:46.900 --> 00:38:46.910 align:start position:0%
interestingly we can do that by saying a
 

00:38:46.910 --> 00:38:48.339 align:start position:0%
interestingly we can do that by saying a
simple<00:38:47.210><c> thing</c><00:38:47.329><c> and</c><00:38:47.630><c> this</c><00:38:47.749><c> is</c><00:38:47.809><c> Java</c><00:38:48.079><c> code</c>

00:38:48.339 --> 00:38:48.349 align:start position:0%
simple thing and this is Java code
 

00:38:48.349 --> 00:38:51.339 align:start position:0%
simple thing and this is Java code
lambda<00:38:49.130><c> 4</c><00:38:49.309><c> equals</c><00:38:49.819><c> Plus</c><00:38:50.150><c> which</c><00:38:50.960><c> is</c><00:38:50.989><c> our</c><00:38:51.170><c> lambda</c>

00:38:51.339 --> 00:38:51.349 align:start position:0%
lambda 4 equals Plus which is our lambda
 

00:38:51.349 --> 00:38:53.410 align:start position:0%
lambda 4 equals Plus which is our lambda
expression<00:38:51.829><c> and</c><00:38:52.009><c> then</c><00:38:52.190><c> we</c><00:38:52.249><c> apply</c><00:38:52.579><c> to</c><00:38:52.609><c> that</c><00:38:52.940><c> 2</c>

00:38:53.410 --> 00:38:53.420 align:start position:0%
expression and then we apply to that 2
 

00:38:53.420 --> 00:38:55.420 align:start position:0%
expression and then we apply to that 2
and<00:38:53.719><c> we</c><00:38:54.229><c> apply</c><00:38:54.440><c> to</c><00:38:54.469><c> that</c><00:38:54.680><c> too</c><00:38:55.009><c> so</c><00:38:55.279><c> we're</c>

00:38:55.420 --> 00:38:55.430 align:start position:0%
and we apply to that too so we're
 

00:38:55.430 --> 00:38:57.579 align:start position:0%
and we apply to that too so we're
calling<00:38:55.519><c> it</c><00:38:55.759><c> recursively</c><00:38:56.180><c> twice</c><00:38:56.779><c> with</c><00:38:57.380><c> two</c>

00:38:57.579 --> 00:38:57.589 align:start position:0%
calling it recursively twice with two
 

00:38:57.589 --> 00:39:00.370 align:start position:0%
calling it recursively twice with two
values<00:38:57.920><c> too</c><00:38:58.160><c> and</c><00:38:58.640><c> if</c><00:38:59.299><c> you</c><00:38:59.450><c> kind</c><00:38:59.779><c> of</c><00:38:59.839><c> write</c><00:39:00.200><c> that</c>

00:39:00.370 --> 00:39:00.380 align:start position:0%
values too and if you kind of write that
 

00:39:00.380 --> 00:39:03.519 align:start position:0%
values too and if you kind of write that
out<00:39:00.589><c> just</c><00:39:00.979><c> as</c><00:39:01.579><c> the</c><00:39:01.759><c> the</c><00:39:02.200><c> mathematics</c><00:39:03.200><c> you</c><00:39:03.319><c> end</c>

00:39:03.519 --> 00:39:03.529 align:start position:0%
out just as the the mathematics you end
 

00:39:03.529 --> 00:39:06.160 align:start position:0%
out just as the the mathematics you end
up<00:39:03.650><c> with</c><00:39:03.769><c> 4</c><00:39:04.009><c> equals</c><00:39:04.400><c> plus</c><00:39:04.670><c> 2</c><00:39:05.029><c> 2</c><00:39:05.420><c> and</c><00:39:05.869><c> this</c><00:39:06.019><c> is</c>

00:39:06.160 --> 00:39:06.170 align:start position:0%
up with 4 equals plus 2 2 and this is
 

00:39:06.170 --> 00:39:08.469 align:start position:0%
up with 4 equals plus 2 2 and this is
what's<00:39:06.319><c> called</c><00:39:06.410><c> polish</c><00:39:07.009><c> notation</c><00:39:07.219><c> I</c><00:39:07.819><c> don't</c>

00:39:08.469 --> 00:39:08.479 align:start position:0%
what's called polish notation I don't
 

00:39:08.479 --> 00:39:09.780 align:start position:0%
what's called polish notation I don't
know<00:39:08.539><c> about</c><00:39:08.630><c> you</c><00:39:09.019><c> know</c>

00:39:09.780 --> 00:39:09.790 align:start position:0%
know about you know
 

00:39:09.790 --> 00:39:11.010 align:start position:0%
know about you know
for<00:39:10.240><c> those</c><00:39:10.360><c> of</c><00:39:10.480><c> you</c><00:39:10.570><c> old</c><00:39:10.690><c> enough</c><00:39:10.780><c> to</c><00:39:10.930><c> remember</c>

00:39:11.010 --> 00:39:11.020 align:start position:0%
for those of you old enough to remember
 

00:39:11.020 --> 00:39:13.440 align:start position:0%
for those of you old enough to remember
like<00:39:11.620><c> very</c><00:39:11.830><c> early</c><00:39:11.860><c> calculate</c><00:39:12.550><c> P</c><00:39:12.820><c> calculators</c>

00:39:13.440 --> 00:39:13.450 align:start position:0%
like very early calculate P calculators
 

00:39:13.450 --> 00:39:17.460 align:start position:0%
like very early calculate P calculators
I<00:39:13.540><c> think</c><00:39:13.720><c> used</c><00:39:13.840><c> a</c><00:39:13.930><c> reverse</c><00:39:14.290><c> polish</c><00:39:16.170><c> so</c><00:39:17.170><c> this</c><00:39:17.350><c> is</c>

00:39:17.460 --> 00:39:17.470 align:start position:0%
I think used a reverse polish so this is
 

00:39:17.470 --> 00:39:18.870 align:start position:0%
I think used a reverse polish so this is
forward<00:39:17.800><c> polish</c><00:39:18.160><c> rather</c><00:39:18.430><c> than</c><00:39:18.640><c> reverse</c>

00:39:18.870 --> 00:39:18.880 align:start position:0%
forward polish rather than reverse
 

00:39:18.880 --> 00:39:20.580 align:start position:0%
forward polish rather than reverse
polish<00:39:19.150><c> notation</c><00:39:19.270><c> but</c><00:39:20.170><c> you</c><00:39:20.320><c> get</c><00:39:20.470><c> the</c><00:39:20.560><c> idea</c>

00:39:20.580 --> 00:39:20.590 align:start position:0%
polish notation but you get the idea
 

00:39:20.590 --> 00:39:23.340 align:start position:0%
polish notation but you get the idea
that<00:39:21.010><c> in</c><00:39:21.160><c> order</c><00:39:21.250><c> to</c><00:39:21.550><c> add</c><00:39:21.810><c> things</c><00:39:22.810><c> we</c><00:39:22.990><c> can</c><00:39:23.170><c> we</c>

00:39:23.340 --> 00:39:23.350 align:start position:0%
that in order to add things we can we
 

00:39:23.350 --> 00:39:24.870 align:start position:0%
that in order to add things we can we
can<00:39:23.560><c> actually</c><00:39:23.710><c> do</c><00:39:23.920><c> it</c><00:39:24.040><c> only</c><00:39:24.370><c> using</c><00:39:24.640><c> lambda</c>

00:39:24.870 --> 00:39:24.880 align:start position:0%
can actually do it only using lambda
 

00:39:24.880 --> 00:39:26.700 align:start position:0%
can actually do it only using lambda
expressions<00:39:25.300><c> so</c><00:39:25.780><c> we</c><00:39:25.870><c> can</c><00:39:25.990><c> say</c><00:39:26.110><c> lambda</c><00:39:26.290><c> for</c><00:39:26.560><c> it</c>

00:39:26.700 --> 00:39:26.710 align:start position:0%
expressions so we can say lambda for it
 

00:39:26.710 --> 00:39:30.450 align:start position:0%
expressions so we can say lambda for it
was<00:39:26.890><c> plus</c><00:39:27.130><c> dot</c><00:39:27.640><c> apply</c><00:39:27.880><c> to</c><00:39:27.940><c> apply</c><00:39:28.570><c> to</c><00:39:28.890><c> write</c><00:39:29.890><c> how</c>

00:39:30.450 --> 00:39:30.460 align:start position:0%
was plus dot apply to apply to write how
 

00:39:30.460 --> 00:39:33.390 align:start position:0%
was plus dot apply to apply to write how
do<00:39:30.520><c> we</c><00:39:30.610><c> know</c><00:39:30.730><c> that</c><00:39:30.880><c> that</c><00:39:30.970><c> works</c><00:39:31.120><c> okay</c><00:39:32.050><c> so</c><00:39:32.400><c> this</c>

00:39:33.390 --> 00:39:33.400 align:start position:0%
do we know that that works okay so this
 

00:39:33.400 --> 00:39:34.620 align:start position:0%
do we know that that works okay so this
is<00:39:33.520><c> where</c><00:39:33.610><c> like</c><00:39:33.880><c> it's</c><00:39:34.060><c> interesting</c><00:39:34.300><c> because</c>

00:39:34.620 --> 00:39:34.630 align:start position:0%
is where like it's interesting because
 

00:39:34.630 --> 00:39:35.790 align:start position:0%
is where like it's interesting because
what<00:39:34.840><c> we'll</c><00:39:34.960><c> do</c><00:39:35.080><c> is</c><00:39:35.170><c> we'll</c><00:39:35.290><c> follow</c><00:39:35.560><c> through</c>

00:39:35.790 --> 00:39:35.800 align:start position:0%
what we'll do is we'll follow through
 

00:39:35.800 --> 00:39:37.590 align:start position:0%
what we'll do is we'll follow through
the<00:39:35.980><c> stages</c><00:39:36.400><c> of</c><00:39:36.670><c> how</c><00:39:36.850><c> to</c><00:39:36.910><c> actually</c><00:39:37.150><c> show</c><00:39:37.420><c> this</c>

00:39:37.590 --> 00:39:37.600 align:start position:0%
the stages of how to actually show this
 

00:39:37.600 --> 00:39:40.020 align:start position:0%
the stages of how to actually show this
and<00:39:37.780><c> I</c><00:39:38.770><c> have</c><00:39:39.190><c> to</c><00:39:39.250><c> say</c><00:39:39.430><c> that</c><00:39:39.610><c> one</c><00:39:39.760><c> of</c><00:39:39.820><c> the</c><00:39:39.910><c> things</c>

00:39:40.020 --> 00:39:40.030 align:start position:0%
and I have to say that one of the things
 

00:39:40.030 --> 00:39:41.790 align:start position:0%
and I have to say that one of the things
that<00:39:40.180><c> when</c><00:39:40.360><c> I</c><00:39:40.390><c> was</c><00:39:40.480><c> doing</c><00:39:40.630><c> this</c><00:39:40.810><c> I</c><00:39:41.080><c> was</c><00:39:41.440><c> sitting</c>

00:39:41.790 --> 00:39:41.800 align:start position:0%
that when I was doing this I was sitting
 

00:39:41.800 --> 00:39:44.010 align:start position:0%
that when I was doing this I was sitting
at<00:39:41.890><c> the</c><00:39:41.950><c> table</c><00:39:42.310><c> and</c><00:39:42.460><c> my</c><00:39:42.850><c> son</c><00:39:43.090><c> who</c><00:39:43.300><c> was</c><00:39:43.330><c> 10</c><00:39:43.930><c> at</c>

00:39:44.010 --> 00:39:44.020 align:start position:0%
at the table and my son who was 10 at
 

00:39:44.020 --> 00:39:46.560 align:start position:0%
at the table and my son who was 10 at
the<00:39:44.110><c> time</c><00:39:44.140><c> he</c><00:39:44.770><c> came</c><00:39:44.950><c> down</c><00:39:45.100><c> me</c><00:39:45.450><c> scribbling</c><00:39:46.450><c> out</c>

00:39:46.560 --> 00:39:46.570 align:start position:0%
the time he came down me scribbling out
 

00:39:46.570 --> 00:39:48.450 align:start position:0%
the time he came down me scribbling out
stuff<00:39:46.840><c> and</c><00:39:46.930><c> I</c><00:39:47.020><c> try</c><00:39:47.710><c> and</c><00:39:47.800><c> work</c><00:39:47.950><c> things</c><00:39:48.130><c> out</c><00:39:48.310><c> and</c>

00:39:48.450 --> 00:39:48.460 align:start position:0%
stuff and I try and work things out and
 

00:39:48.460 --> 00:39:49.860 align:start position:0%
stuff and I try and work things out and
he<00:39:48.520><c> said</c><00:39:48.700><c> to</c><00:39:48.760><c> me</c><00:39:48.850><c> what</c><00:39:49.150><c> are</c><00:39:49.210><c> you</c><00:39:49.300><c> doing</c><00:39:49.480><c> daddy</c><00:39:49.630><c> I</c>

00:39:49.860 --> 00:39:49.870 align:start position:0%
he said to me what are you doing daddy I
 

00:39:49.870 --> 00:39:51.660 align:start position:0%
he said to me what are you doing daddy I
said<00:39:50.200><c> I'm</c><00:39:50.530><c> trying</c><00:39:50.680><c> to</c><00:39:50.860><c> work</c><00:39:50.920><c> out</c><00:39:51.160><c> what</c><00:39:51.370><c> two</c>

00:39:51.660 --> 00:39:51.670 align:start position:0%
said I'm trying to work out what two
 

00:39:51.670 --> 00:39:55.650 align:start position:0%
said I'm trying to work out what two
plus<00:39:51.850><c> two</c><00:39:52.240><c> he</c><00:39:52.960><c> looks</c><00:39:53.200><c> at</c><00:39:54.330><c> you</c><00:39:55.330><c> looks</c><00:39:55.420><c> at</c><00:39:55.570><c> me</c>

00:39:55.650 --> 00:39:55.660 align:start position:0%
plus two he looks at you looks at me
 

00:39:55.660 --> 00:39:56.880 align:start position:0%
plus two he looks at you looks at me
like<00:39:55.810><c> I</c><00:39:55.930><c> was</c><00:39:55.960><c> stupid</c><00:39:56.260><c> he</c><00:39:56.530><c> said</c><00:39:56.650><c> well</c><00:39:56.770><c> that's</c>

00:39:56.880 --> 00:39:56.890 align:start position:0%
like I was stupid he said well that's
 

00:39:56.890 --> 00:39:59.630 align:start position:0%
like I was stupid he said well that's
easy<00:39:57.070><c> daddy</c><00:39:57.310><c> it's</c><00:39:57.460><c> four</c>

00:39:59.630 --> 00:39:59.640 align:start position:0%
easy daddy it's four
 

00:39:59.640 --> 00:40:02.400 align:start position:0%
easy daddy it's four
so<00:40:00.640><c> I</c><00:40:00.670><c> said</c><00:40:00.850><c> I'm</c><00:40:01.420><c> trying</c><00:40:01.720><c> to</c><00:40:01.870><c> use</c><00:40:01.990><c> lambda</c>

00:40:02.400 --> 00:40:02.410 align:start position:0%
so I said I'm trying to use lambda
 

00:40:02.410 --> 00:40:04.140 align:start position:0%
so I said I'm trying to use lambda
calculus<00:40:02.800><c> for</c><00:40:03.010><c> this</c><00:40:03.130><c> so</c><00:40:03.580><c> I</c><00:40:03.610><c> showed</c><00:40:03.850><c> him</c><00:40:03.940><c> that</c>

00:40:04.140 --> 00:40:04.150 align:start position:0%
calculus for this so I showed him that
 

00:40:04.150 --> 00:40:06.270 align:start position:0%
calculus for this so I showed him that
the<00:40:04.300><c> writing</c><00:40:04.960><c> that</c><00:40:05.110><c> I</c><00:40:05.170><c> was</c><00:40:05.290><c> looking</c><00:40:05.920><c> goes</c><00:40:06.070><c> no</c>

00:40:06.270 --> 00:40:06.280 align:start position:0%
the writing that I was looking goes no
 

00:40:06.280 --> 00:40:11.520 align:start position:0%
the writing that I was looking goes no
no<00:40:06.370><c> it's</c><00:40:06.550><c> four</c><00:40:08.850><c> so</c><00:40:09.850><c> anyway</c><00:40:10.060><c> so</c><00:40:10.930><c> so</c><00:40:11.260><c> what</c><00:40:11.410><c> we'll</c>

00:40:11.520 --> 00:40:11.530 align:start position:0%
no it's four so anyway so so what we'll
 

00:40:11.530 --> 00:40:14.430 align:start position:0%
no it's four so anyway so so what we'll
do<00:40:11.620><c> is</c><00:40:11.650><c> we'll</c><00:40:11.800><c> take</c><00:40:12.190><c> our</c><00:40:12.430><c> Edition</c><00:40:13.440><c> lambda</c>

00:40:14.430 --> 00:40:14.440 align:start position:0%
do is we'll take our Edition lambda
 

00:40:14.440 --> 00:40:16.560 align:start position:0%
do is we'll take our Edition lambda
expression<00:40:14.890><c> so</c><00:40:15.040><c> we</c><00:40:15.130><c> have</c><00:40:15.280><c> M</c><00:40:15.520><c> and</c><00:40:15.850><c> we</c><00:40:16.210><c> have</c><00:40:16.360><c> n</c>

00:40:16.560 --> 00:40:16.570 align:start position:0%
expression so we have M and we have n
 

00:40:16.570 --> 00:40:18.300 align:start position:0%
expression so we have M and we have n
that<00:40:16.810><c> we're</c><00:40:16.930><c> going</c><00:40:17.020><c> to</c><00:40:17.140><c> add</c><00:40:17.260><c> together</c><00:40:17.440><c> so</c><00:40:18.220><c> in</c>

00:40:18.300 --> 00:40:18.310 align:start position:0%
that we're going to add together so in
 

00:40:18.310 --> 00:40:20.040 align:start position:0%
that we're going to add together so in
the<00:40:18.370><c> case</c><00:40:18.520><c> of</c><00:40:18.550><c> M</c><00:40:18.820><c> we're</c><00:40:19.300><c> going</c><00:40:19.420><c> to</c><00:40:19.480><c> replace</c><00:40:19.690><c> M</c>

00:40:20.040 --> 00:40:20.050 align:start position:0%
the case of M we're going to replace M
 

00:40:20.050 --> 00:40:23.400 align:start position:0%
the case of M we're going to replace M
with<00:40:20.110><c> the</c><00:40:20.800><c> lambda</c><00:40:20.980><c> expression</c><00:40:21.520><c> for</c><00:40:21.700><c> two</c><00:40:22.290><c> so</c><00:40:23.290><c> we</c>

00:40:23.400 --> 00:40:23.410 align:start position:0%
with the lambda expression for two so we
 

00:40:23.410 --> 00:40:25.530 align:start position:0%
with the lambda expression for two so we
get<00:40:23.530><c> a</c><00:40:23.560><c> slightly</c><00:40:23.950><c> longer</c><00:40:24.400><c> lambda</c><00:40:25.120><c> expression</c>

00:40:25.530 --> 00:40:25.540 align:start position:0%
get a slightly longer lambda expression
 

00:40:25.540 --> 00:40:27.150 align:start position:0%
get a slightly longer lambda expression
I've<00:40:25.630><c> highlighted</c><00:40:25.870><c> in</c><00:40:26.230><c> red</c><00:40:26.260><c> where</c><00:40:26.740><c> we</c><00:40:26.890><c> replace</c>

00:40:27.150 --> 00:40:27.160 align:start position:0%
I've highlighted in red where we replace
 

00:40:27.160 --> 00:40:31.350 align:start position:0%
I've highlighted in red where we replace
M<00:40:27.700><c> with</c><00:40:27.810><c> the</c><00:40:28.810><c> lambda</c><00:40:29.440><c> expression</c><00:40:29.920><c> for</c><00:40:30.100><c> two</c><00:40:30.360><c> so</c>

00:40:31.350 --> 00:40:31.360 align:start position:0%
M with the lambda expression for two so
 

00:40:31.360 --> 00:40:33.420 align:start position:0%
M with the lambda expression for two so
we<00:40:31.690><c> also</c><00:40:31.810><c> take</c><00:40:32.110><c> em</c><00:40:32.380><c> away</c><00:40:32.920><c> from</c><00:40:32.980><c> the</c><00:40:33.220><c> front</c>

00:40:33.420 --> 00:40:33.430 align:start position:0%
we also take em away from the front
 

00:40:33.430 --> 00:40:34.890 align:start position:0%
we also take em away from the front
because<00:40:33.730><c> now</c><00:40:33.880><c> we're</c><00:40:34.030><c> in</c><00:40:34.270><c> effect</c><00:40:34.540><c> applying</c>

00:40:34.890 --> 00:40:34.900 align:start position:0%
because now we're in effect applying
 

00:40:34.900 --> 00:40:38.580 align:start position:0%
because now we're in effect applying
that<00:40:35.140><c> to</c><00:40:35.800><c> the</c><00:40:35.980><c> the</c><00:40:36.010><c> function</c><00:40:36.900><c> and</c><00:40:37.900><c> then</c><00:40:38.110><c> what</c>

00:40:38.580 --> 00:40:38.590 align:start position:0%
that to the the function and then what
 

00:40:38.590 --> 00:40:40.560 align:start position:0%
that to the the function and then what
we<00:40:38.680><c> need</c><00:40:38.800><c> to</c><00:40:38.860><c> do</c><00:40:38.980><c> is</c><00:40:39.070><c> the</c><00:40:39.190><c> same</c><00:40:39.430><c> thing</c><00:40:39.490><c> for</c><00:40:39.820><c> n</c><00:40:40.270><c> so</c>

00:40:40.560 --> 00:40:40.570 align:start position:0%
we need to do is the same thing for n so
 

00:40:40.570 --> 00:40:42.930 align:start position:0%
we need to do is the same thing for n so
n<00:40:41.050><c> is</c><00:40:41.080><c> 2</c><00:40:41.440><c> as</c><00:40:41.560><c> well</c><00:40:41.710><c> so</c><00:40:41.980><c> we'll</c><00:40:42.100><c> replace</c><00:40:42.250><c> the</c><00:40:42.640><c> N</c>

00:40:42.930 --> 00:40:42.940 align:start position:0%
n is 2 as well so we'll replace the N
 

00:40:42.940 --> 00:40:44.910 align:start position:0%
n is 2 as well so we'll replace the N
that<00:40:43.570><c> we</c><00:40:43.660><c> have</c><00:40:43.810><c> there</c><00:40:44.080><c> with</c><00:40:44.650><c> the</c><00:40:44.740><c> lambda</c>

00:40:44.910 --> 00:40:44.920 align:start position:0%
that we have there with the lambda
 

00:40:44.920 --> 00:40:47.100 align:start position:0%
that we have there with the lambda
expression<00:40:45.460><c> for</c><00:40:45.610><c> 2</c><00:40:45.760><c> and</c><00:40:46.180><c> we</c><00:40:46.600><c> end</c><00:40:46.720><c> up</c><00:40:46.870><c> with</c>

00:40:47.100 --> 00:40:47.110 align:start position:0%
expression for 2 and we end up with
 

00:40:47.110 --> 00:40:50.070 align:start position:0%
expression for 2 and we end up with
quite<00:40:47.710><c> a</c><00:40:47.830><c> long</c><00:40:48.190><c> lambda</c><00:40:48.760><c> expression</c><00:40:49.300><c> but</c><00:40:49.990><c> it</c>

00:40:50.070 --> 00:40:50.080 align:start position:0%
quite a long lambda expression but it
 

00:40:50.080 --> 00:40:52.980 align:start position:0%
quite a long lambda expression but it
doesn't<00:40:50.350><c> quite</c><00:40:50.560><c> look</c><00:40:50.740><c> like</c><00:40:51.040><c> for</c><00:40:51.460><c> yet</c><00:40:51.700><c> so</c><00:40:52.510><c> we</c>

00:40:52.980 --> 00:40:52.990 align:start position:0%
doesn't quite look like for yet so we
 

00:40:52.990 --> 00:40:55.950 align:start position:0%
doesn't quite look like for yet so we
have<00:40:53.140><c> to</c><00:40:53.260><c> do</c><00:40:53.380><c> some</c><00:40:53.560><c> reduction</c><00:40:54.520><c> on</c><00:40:54.610><c> this</c><00:40:54.900><c> so</c><00:40:55.900><c> if</c>

00:40:55.950 --> 00:40:55.960 align:start position:0%
have to do some reduction on this so if
 

00:40:55.960 --> 00:40:58.920 align:start position:0%
have to do some reduction on this so if
we<00:40:56.190><c> switched</c><00:40:57.190><c> that</c><00:40:57.640><c> what</c><00:40:58.060><c> we</c><00:40:58.180><c> now</c><00:40:58.330><c> need</c><00:40:58.720><c> to</c><00:40:58.750><c> say</c>

00:40:58.920 --> 00:40:58.930 align:start position:0%
we switched that what we now need to say
 

00:40:58.930 --> 00:41:00.930 align:start position:0%
we switched that what we now need to say
is<00:40:59.080><c> okay</c><00:40:59.350><c> so</c><00:40:59.410><c> we've</c><00:40:59.590><c> got</c><00:40:59.620><c> FX</c><00:41:00.520><c> and</c><00:41:00.730><c> then</c><00:41:00.820><c> we've</c>

00:41:00.930 --> 00:41:00.940 align:start position:0%
is okay so we've got FX and then we've
 

00:41:00.940 --> 00:41:03.570 align:start position:0%
is okay so we've got FX and then we've
got<00:41:01.120><c> this</c><00:41:01.500><c> we've</c><00:41:02.500><c> got</c><00:41:02.590><c> this</c><00:41:02.680><c> bit</c><00:41:02.890><c> here</c><00:41:03.130><c> in</c><00:41:03.280><c> blue</c>

00:41:03.570 --> 00:41:03.580 align:start position:0%
got this we've got this bit here in blue
 

00:41:03.580 --> 00:41:06.210 align:start position:0%
got this we've got this bit here in blue
where<00:41:04.330><c> we're</c><00:41:04.510><c> saying</c><00:41:04.720><c> f</c><00:41:05.110><c> is</c><00:41:05.530><c> the</c><00:41:06.040><c> lambda</c>

00:41:06.210 --> 00:41:06.220 align:start position:0%
where we're saying f is the lambda
 

00:41:06.220 --> 00:41:08.520 align:start position:0%
where we're saying f is the lambda
expression<00:41:06.760><c> which</c><00:41:07.060><c> is</c><00:41:07.270><c> returning</c><00:41:07.840><c> X</c><00:41:08.020><c> goes</c><00:41:08.320><c> to</c>

00:41:08.520 --> 00:41:08.530 align:start position:0%
expression which is returning X goes to
 

00:41:08.530 --> 00:41:10.500 align:start position:0%
expression which is returning X goes to
F<00:41:08.620><c> dot</c><00:41:08.770><c> apply</c><00:41:09.010><c> of</c><00:41:09.130><c> F</c><00:41:09.250><c> dot</c><00:41:09.370><c> apply</c><00:41:09.610><c> X</c><00:41:09.940><c> dot</c><00:41:10.240><c> apply</c>

00:41:10.500 --> 00:41:10.510 align:start position:0%
F dot apply of F dot apply X dot apply
 

00:41:10.510 --> 00:41:13.620 align:start position:0%
F dot apply of F dot apply X dot apply
of<00:41:10.750><c> F</c><00:41:10.990><c> the</c><00:41:11.830><c> nice</c><00:41:11.980><c> thing</c><00:41:12.160><c> about</c><00:41:12.220><c> that</c><00:41:12.400><c> is</c><00:41:13.060><c> that</c><00:41:13.150><c> F</c>

00:41:13.620 --> 00:41:13.630 align:start position:0%
of F the nice thing about that is that F
 

00:41:13.630 --> 00:41:17.040 align:start position:0%
of F the nice thing about that is that F
is<00:41:14.550><c> we're</c><00:41:15.550><c> applying</c><00:41:15.730><c> F</c><00:41:16.060><c> to</c><00:41:16.270><c> that</c><00:41:16.450><c> but</c><00:41:16.630><c> F</c><00:41:16.750><c> is</c><00:41:16.870><c> the</c>

00:41:17.040 --> 00:41:17.050 align:start position:0%
is we're applying F to that but F is the
 

00:41:17.050 --> 00:41:19.380 align:start position:0%
is we're applying F to that but F is the
variable<00:41:17.680><c> if</c><00:41:17.770><c> you</c><00:41:17.860><c> like</c><00:41:18.010><c> so</c><00:41:18.730><c> it's</c><00:41:19.030><c> quite</c><00:41:19.330><c> a</c>

00:41:19.380 --> 00:41:19.390 align:start position:0%
variable if you like so it's quite a
 

00:41:19.390 --> 00:41:21.660 align:start position:0%
variable if you like so it's quite a
simple<00:41:19.600><c> reduction</c><00:41:19.870><c> we</c><00:41:20.350><c> just</c><00:41:20.530><c> in</c><00:41:21.100><c> essence</c>

00:41:21.660 --> 00:41:21.670 align:start position:0%
simple reduction we just in essence
 

00:41:21.670 --> 00:41:25.500 align:start position:0%
simple reduction we just in essence
off<00:41:21.819><c> the</c><00:41:21.970><c> apply</c><00:41:22.240><c> and</c><00:41:22.630><c> remove</c><00:41:23.530><c> F</c><00:41:23.950><c> so</c><00:41:24.400><c> now</c><00:41:24.549><c> yet</c><00:41:24.880><c> X</c>

00:41:25.500 --> 00:41:25.510 align:start position:0%
off the apply and remove F so now yet X
 

00:41:25.510 --> 00:41:27.950 align:start position:0%
off the apply and remove F so now yet X
goes<00:41:25.990><c> to</c><00:41:26.020><c> F</c><00:41:26.410><c> dot</c><00:41:26.589><c> apply</c><00:41:26.770><c> of</c><00:41:26.980><c> F</c><00:41:27.130><c> dot</c><00:41:27.280><c> apply</c><00:41:27.520><c> of</c><00:41:27.579><c> X</c>

00:41:27.950 --> 00:41:27.960 align:start position:0%
goes to F dot apply of F dot apply of X
 

00:41:27.960 --> 00:41:32.099 align:start position:0%
goes to F dot apply of F dot apply of X
and<00:41:28.960><c> if</c><00:41:29.200><c> we</c><00:41:29.290><c> do</c><00:41:29.410><c> the</c><00:41:29.530><c> same</c><00:41:29.710><c> thing</c><00:41:30.390><c> here</c><00:41:31.390><c> we've</c>

00:41:32.099 --> 00:41:32.109 align:start position:0%
and if we do the same thing here we've
 

00:41:32.109 --> 00:41:34.049 align:start position:0%
and if we do the same thing here we've
got<00:41:32.260><c> a</c><00:41:32.290><c> lambda</c><00:41:32.829><c> expression</c><00:41:33.040><c> here</c><00:41:33.549><c> we've</c><00:41:33.700><c> got</c><00:41:33.880><c> F</c>

00:41:34.049 --> 00:41:34.059 align:start position:0%
got a lambda expression here we've got F
 

00:41:34.059 --> 00:41:36.539 align:start position:0%
got a lambda expression here we've got F
and<00:41:34.359><c> we</c><00:41:34.839><c> want</c><00:41:34.990><c> to</c><00:41:35.079><c> apply</c><00:41:35.290><c> F</c><00:41:35.589><c> to</c><00:41:36.040><c> that</c><00:41:36.250><c> lambda</c>

00:41:36.539 --> 00:41:36.549 align:start position:0%
and we want to apply F to that lambda
 

00:41:36.549 --> 00:41:38.700 align:start position:0%
and we want to apply F to that lambda
expression<00:41:37.089><c> then</c><00:41:37.780><c> we</c><00:41:37.809><c> can</c><00:41:38.109><c> do</c><00:41:38.200><c> the</c><00:41:38.290><c> same</c><00:41:38.410><c> thing</c>

00:41:38.700 --> 00:41:38.710 align:start position:0%
expression then we can do the same thing
 

00:41:38.710 --> 00:41:41.940 align:start position:0%
expression then we can do the same thing
which<00:41:39.630><c> reduces</c><00:41:40.630><c> down</c><00:41:40.839><c> so</c><00:41:41.020><c> we</c><00:41:41.109><c> get</c><00:41:41.230><c> X</c><00:41:41.380><c> goes</c><00:41:41.680><c> to</c><00:41:41.710><c> F</c>

00:41:41.940 --> 00:41:41.950 align:start position:0%
which reduces down so we get X goes to F
 

00:41:41.950 --> 00:41:45.750 align:start position:0%
which reduces down so we get X goes to F
dot<00:41:42.099><c> apply</c><00:41:42.309><c> of</c><00:41:42.369><c> F</c><00:41:42.490><c> dot</c><00:41:42.670><c> of</c><00:41:42.760><c> 5x</c><00:41:44.069><c> then</c><00:41:45.069><c> what</c><00:41:45.670><c> we</c>

00:41:45.750 --> 00:41:45.760 align:start position:0%
dot apply of F dot of 5x then what we
 

00:41:45.760 --> 00:41:47.849 align:start position:0%
dot apply of F dot of 5x then what we
need<00:41:45.849><c> to</c><00:41:45.910><c> do</c><00:41:46.119><c> is</c><00:41:46.299><c> we</c><00:41:46.420><c> take</c><00:41:46.660><c> that</c><00:41:46.960><c> which</c><00:41:47.740><c> has</c>

00:41:47.849 --> 00:41:47.859 align:start position:0%
need to do is we take that which has
 

00:41:47.859 --> 00:41:49.589 align:start position:0%
need to do is we take that which has
been<00:41:48.010><c> condensed</c><00:41:48.339><c> down</c><00:41:48.430><c> but</c><00:41:49.030><c> we</c><00:41:49.119><c> still</c><00:41:49.150><c> got</c><00:41:49.420><c> F</c>

00:41:49.589 --> 00:41:49.599 align:start position:0%
been condensed down but we still got F
 

00:41:49.599 --> 00:41:51.720 align:start position:0%
been condensed down but we still got F
goes<00:41:49.839><c> to</c><00:41:50.020><c> X</c><00:41:50.170><c> goes</c><00:41:50.500><c> to</c><00:41:50.530><c> X</c><00:41:50.740><c> goes</c><00:41:51.099><c> to</c><00:41:51.130><c> our</c><00:41:51.369><c> f</c><00:41:51.609><c> of</c>

00:41:51.720 --> 00:41:51.730 align:start position:0%
goes to X goes to X goes to our f of
 

00:41:51.730 --> 00:41:54.030 align:start position:0%
goes to X goes to X goes to our f of
apply<00:41:52.059><c> and</c><00:41:52.480><c> so</c><00:41:52.750><c> on</c><00:41:52.900><c> but</c><00:41:53.410><c> we</c><00:41:53.559><c> need</c><00:41:53.680><c> to</c><00:41:53.740><c> apply</c>

00:41:54.030 --> 00:41:54.040 align:start position:0%
apply and so on but we need to apply
 

00:41:54.040 --> 00:41:56.880 align:start position:0%
apply and so on but we need to apply
this<00:41:54.819><c> whole</c><00:41:55.059><c> blue</c><00:41:55.569><c> and</c><00:41:56.140><c> it's</c><00:41:56.530><c> actually</c><00:41:56.829><c> in</c>

00:41:56.880 --> 00:41:56.890 align:start position:0%
this whole blue and it's actually in
 

00:41:56.890 --> 00:41:59.280 align:start position:0%
this whole blue and it's actually in
within<00:41:57.640><c> the</c><00:41:57.790><c> apply</c><00:41:58.000><c> we're</c><00:41:58.569><c> going</c><00:41:58.720><c> to</c><00:41:58.809><c> apply</c><00:41:58.930><c> X</c>

00:41:59.280 --> 00:41:59.290 align:start position:0%
within the apply we're going to apply X
 

00:41:59.290 --> 00:42:02.849 align:start position:0%
within the apply we're going to apply X
again<00:42:00.220><c> X</c><00:42:00.490><c> is</c><00:42:00.700><c> an</c><00:42:01.299><c> easy</c><00:42:01.420><c> one</c><00:42:01.660><c> to</c><00:42:01.720><c> to</c><00:42:02.470><c> eliminate</c>

00:42:02.849 --> 00:42:02.859 align:start position:0%
again X is an easy one to to eliminate
 

00:42:02.859 --> 00:42:05.280 align:start position:0%
again X is an easy one to to eliminate
because<00:42:03.400><c> it's</c><00:42:03.579><c> the</c><00:42:03.670><c> same</c><00:42:03.849><c> variable</c><00:42:04.359><c> so</c><00:42:05.049><c> we</c><00:42:05.170><c> end</c>

00:42:05.280 --> 00:42:05.290 align:start position:0%
because it's the same variable so we end
 

00:42:05.290 --> 00:42:06.900 align:start position:0%
because it's the same variable so we end
up<00:42:05.380><c> with</c><00:42:05.500><c> F</c><00:42:05.619><c> dot</c><00:42:05.829><c> apply</c><00:42:06.099><c> of</c><00:42:06.220><c> F</c><00:42:06.339><c> dot</c><00:42:06.460><c> apply</c><00:42:06.670><c> of</c><00:42:06.730><c> X</c>

00:42:06.900 --> 00:42:06.910 align:start position:0%
up with F dot apply of F dot apply of X
 

00:42:06.910 --> 00:42:08.490 align:start position:0%
up with F dot apply of F dot apply of X
but<00:42:07.569><c> now</c><00:42:07.780><c> things</c><00:42:08.049><c> are</c><00:42:08.170><c> a</c><00:42:08.200><c> little</c><00:42:08.290><c> bit</c><00:42:08.440><c> more</c>

00:42:08.490 --> 00:42:08.500 align:start position:0%
but now things are a little bit more
 

00:42:08.500 --> 00:42:10.220 align:start position:0%
but now things are a little bit more
complicated<00:42:09.069><c> because</c><00:42:09.160><c> we</c><00:42:09.339><c> have</c><00:42:09.670><c> to</c><00:42:09.760><c> apply</c>

00:42:10.220 --> 00:42:10.230 align:start position:0%
complicated because we have to apply
 

00:42:10.230 --> 00:42:12.900 align:start position:0%
complicated because we have to apply
where<00:42:11.230><c> we</c><00:42:11.380><c> have</c><00:42:11.530><c> X</c><00:42:11.829><c> the</c><00:42:12.099><c> whole</c><00:42:12.339><c> of</c><00:42:12.579><c> this</c><00:42:12.730><c> lambda</c>

00:42:12.900 --> 00:42:12.910 align:start position:0%
where we have X the whole of this lambda
 

00:42:12.910 --> 00:42:14.940 align:start position:0%
where we have X the whole of this lambda
expression<00:42:13.450><c> F</c><00:42:13.630><c> dot</c><00:42:13.809><c> apply</c><00:42:14.049><c> of</c><00:42:14.170><c> F</c><00:42:14.290><c> dot</c><00:42:14.440><c> apply</c><00:42:14.680><c> X</c>

00:42:14.940 --> 00:42:14.950 align:start position:0%
expression F dot apply of F dot apply X
 

00:42:14.950 --> 00:42:21.030 align:start position:0%
expression F dot apply of F dot apply X
and<00:42:16.290><c> that</c><00:42:17.460><c> reduces</c><00:42:18.460><c> down</c><00:42:18.520><c> to</c><00:42:19.380><c> yes</c><00:42:20.380><c> so</c><00:42:20.770><c> we</c><00:42:20.890><c> get</c>

00:42:21.030 --> 00:42:21.040 align:start position:0%
and that reduces down to yes so we get
 

00:42:21.040 --> 00:42:25.200 align:start position:0%
and that reduces down to yes so we get
that<00:42:21.220><c> we</c><00:42:22.119><c> reduce</c><00:42:22.480><c> that</c><00:42:22.559><c> X</c><00:42:23.559><c> changes</c><00:42:24.430><c> yes</c><00:42:24.640><c> so</c>

00:42:25.200 --> 00:42:25.210 align:start position:0%
that we reduce that X changes yes so
 

00:42:25.210 --> 00:42:27.180 align:start position:0%
that we reduce that X changes yes so
then<00:42:25.359><c> we</c><00:42:25.450><c> reduce</c><00:42:25.569><c> that</c><00:42:25.900><c> and</c><00:42:26.260><c> we</c><00:42:26.650><c> end</c><00:42:26.799><c> up</c><00:42:26.859><c> with</c><00:42:27.010><c> F</c>

00:42:27.180 --> 00:42:27.190 align:start position:0%
then we reduce that and we end up with F
 

00:42:27.190 --> 00:42:29.579 align:start position:0%
then we reduce that and we end up with F
goes<00:42:27.430><c> to</c><00:42:27.520><c> X</c><00:42:27.700><c> goes</c><00:42:28.180><c> to</c><00:42:28.210><c> F</c><00:42:28.480><c> that</c><00:42:28.720><c> apply</c><00:42:28.960><c> of</c><00:42:29.260><c> F</c><00:42:29.410><c> that</c>

00:42:29.579 --> 00:42:29.589 align:start position:0%
goes to X goes to F that apply of F that
 

00:42:29.589 --> 00:42:31.559 align:start position:0%
goes to X goes to F that apply of F that
apply<00:42:29.799><c> of</c><00:42:30.040><c> F</c><00:42:30.160><c> that</c><00:42:30.339><c> apply</c><00:42:30.609><c> of</c><00:42:30.790><c> F</c><00:42:30.970><c> that</c><00:42:31.150><c> apply</c><00:42:31.329><c> of</c>

00:42:31.559 --> 00:42:31.569 align:start position:0%
apply of F that apply of F that apply of
 

00:42:31.569 --> 00:42:35.549 align:start position:0%
apply of F that apply of F that apply of
X<00:42:32.040><c> which</c><00:42:33.040><c> is</c><00:42:33.190><c> four</c><00:42:33.400><c> we</c><00:42:34.299><c> have</c><00:42:34.480><c> proved</c><00:42:34.809><c> that</c><00:42:35.170><c> two</c>

00:42:35.549 --> 00:42:35.559 align:start position:0%
X which is four we have proved that two
 

00:42:35.559 --> 00:42:38.579 align:start position:0%
X which is four we have proved that two
plus<00:42:35.770><c> two</c><00:42:35.829><c> is</c><00:42:36.190><c> four</c><00:42:36.579><c> and</c><00:42:36.880><c> we've</c><00:42:37.720><c> shown</c><00:42:38.230><c> that</c><00:42:38.290><c> we</c>

00:42:38.579 --> 00:42:38.589 align:start position:0%
plus two is four and we've shown that we
 

00:42:38.589 --> 00:42:46.760 align:start position:0%
plus two is four and we've shown that we
can<00:42:38.619><c> do</c><00:42:38.980><c> it</c><00:42:39.160><c> only</c><00:42:39.970><c> new</c><00:42:40.150><c> zealander</c><00:42:40.450><c> expressions</c>

00:42:46.760 --> 00:42:46.770 align:start position:0%
 
 

00:42:46.770 --> 00:42:49.230 align:start position:0%
 
like<00:42:47.770><c> I</c><00:42:47.859><c> say</c><00:42:48.010><c> did</c><00:42:48.490><c> take</c><00:42:48.700><c> me</c><00:42:48.789><c> quite</c><00:42:48.910><c> a</c><00:42:49.000><c> while</c><00:42:49.089><c> to</c>

00:42:49.230 --> 00:42:49.240 align:start position:0%
like I say did take me quite a while to
 

00:42:49.240 --> 00:42:52.470 align:start position:0%
like I say did take me quite a while to
get<00:42:49.510><c> that</c><00:42:49.660><c> straight</c><00:42:49.960><c> in</c><00:42:50.109><c> my</c><00:42:50.200><c> head</c><00:42:51.150><c> so</c><00:42:52.150><c> just</c><00:42:52.210><c> to</c>

00:42:52.470 --> 00:42:52.480 align:start position:0%
get that straight in my head so just to
 

00:42:52.480 --> 00:42:57.480 align:start position:0%
get that straight in my head so just to
summarize<00:42:52.869><c> then</c><00:42:55.170><c> lambda</c><00:42:56.170><c> expressions</c><00:42:56.619><c> very</c>

00:42:57.480 --> 00:42:57.490 align:start position:0%
summarize then lambda expressions very
 

00:42:57.490 --> 00:43:00.900 align:start position:0%
summarize then lambda expressions very
useful<00:42:57.849><c> very</c><00:42:57.880><c> powerful</c><00:42:58.599><c> a</c><00:42:59.589><c> nice</c><00:43:00.099><c> succinct</c><00:43:00.460><c> way</c>

00:43:00.900 --> 00:43:00.910 align:start position:0%
useful very powerful a nice succinct way
 

00:43:00.910 --> 00:43:03.089 align:start position:0%
useful very powerful a nice succinct way
to<00:43:00.970><c> represent</c><00:43:01.299><c> behavior</c><00:43:02.020><c> so</c><00:43:02.530><c> you</c><00:43:02.619><c> can</c><00:43:02.740><c> pass</c><00:43:02.920><c> it</c>

00:43:03.089 --> 00:43:03.099 align:start position:0%
to represent behavior so you can pass it
 

00:43:03.099 --> 00:43:04.920 align:start position:0%
to represent behavior so you can pass it
as<00:43:03.190><c> a</c><00:43:03.220><c> variable</c><00:43:03.609><c> you</c><00:43:04.450><c> can</c><00:43:04.569><c> assign</c><00:43:04.750><c> to</c><00:43:04.809><c> a</c>

00:43:04.920 --> 00:43:04.930 align:start position:0%
as a variable you can assign to a
 

00:43:04.930 --> 00:43:06.620 align:start position:0%
as a variable you can assign to a
variable<00:43:04.990><c> capacitor</c><00:43:05.710><c> as</c><00:43:05.770><c> a</c><00:43:05.799><c> parameter</c>

00:43:06.620 --> 00:43:06.630 align:start position:0%
variable capacitor as a parameter
 

00:43:06.630 --> 00:43:08.970 align:start position:0%
variable capacitor as a parameter
better<00:43:07.630><c> performance</c><00:43:08.170><c> than</c><00:43:08.260><c> anonymous</c><00:43:08.770><c> inner</c>

00:43:08.970 --> 00:43:08.980 align:start position:0%
better performance than anonymous inner
 

00:43:08.980 --> 00:43:11.250 align:start position:0%
better performance than anonymous inner
classes<00:43:09.190><c> so</c><00:43:09.970><c> if</c><00:43:10.359><c> you're</c><00:43:10.539><c> thinking</c><00:43:10.720><c> you</c><00:43:11.170><c> know</c>

00:43:11.250 --> 00:43:11.260 align:start position:0%
classes so if you're thinking you know
 

00:43:11.260 --> 00:43:13.049 align:start position:0%
classes so if you're thinking you know
in<00:43:11.470><c> terms</c><00:43:11.680><c> of</c><00:43:11.859><c> like</c><00:43:12.069><c> performance</c><00:43:12.339><c> programming</c>

00:43:13.049 --> 00:43:13.059 align:start position:0%
in terms of like performance programming
 

00:43:13.059 --> 00:43:14.910 align:start position:0%
in terms of like performance programming
then<00:43:13.390><c> lambda</c><00:43:13.869><c> expressions</c><00:43:14.349><c> are</c><00:43:14.500><c> better</c><00:43:14.770><c> way</c>

00:43:14.910 --> 00:43:14.920 align:start position:0%
then lambda expressions are better way
 

00:43:14.920 --> 00:43:16.289 align:start position:0%
then lambda expressions are better way
of<00:43:14.950><c> doing</c><00:43:15.130><c> things</c><00:43:15.460><c> than</c><00:43:15.819><c> nonnamous</c><00:43:16.119><c> inner</c>

00:43:16.289 --> 00:43:16.299 align:start position:0%
of doing things than nonnamous inner
 

00:43:16.299 --> 00:43:18.329 align:start position:0%
of doing things than nonnamous inner
classes<00:43:16.690><c> method</c><00:43:17.470><c> references</c><00:43:18.010><c> are</c><00:43:18.130><c> even</c>

00:43:18.329 --> 00:43:18.339 align:start position:0%
classes method references are even
 

00:43:18.339 --> 00:43:21.510 align:start position:0%
classes method references are even
slightly<00:43:18.730><c> better</c><00:43:19.059><c> than</c><00:43:19.630><c> a</c><00:43:20.160><c> then</c><00:43:21.160><c> lambda</c>

00:43:21.510 --> 00:43:21.520 align:start position:0%
slightly better than a then lambda
 

00:43:21.520 --> 00:43:23.099 align:start position:0%
slightly better than a then lambda
expression<00:43:21.910><c> explicit</c><00:43:22.359><c> lambda</c><00:43:22.630><c> expressions</c>

00:43:23.099 --> 00:43:23.109 align:start position:0%
expression explicit lambda expressions
 

00:43:23.109 --> 00:43:25.680 align:start position:0%
expression explicit lambda expressions
and<00:43:23.289><c> as</c><00:43:24.160><c> I</c><00:43:24.309><c> say</c><00:43:24.460><c> here</c><00:43:24.670><c> you</c><00:43:24.819><c> can</c><00:43:25.030><c> use</c><00:43:25.210><c> them</c><00:43:25.359><c> weird</c>

00:43:25.680 --> 00:43:25.690 align:start position:0%
and as I say here you can use them weird
 

00:43:25.690 --> 00:43:27.510 align:start position:0%
and as I say here you can use them weird
in<00:43:25.839><c> wonderful</c><00:43:26.109><c> ways</c><00:43:26.230><c> but</c><00:43:27.010><c> I</c><00:43:27.039><c> certainly</c>

00:43:27.510 --> 00:43:27.520 align:start position:0%
in wonderful ways but I certainly
 

00:43:27.520 --> 00:43:28.799 align:start position:0%
in wonderful ways but I certainly
wouldn't<00:43:27.760><c> recommend</c><00:43:28.059><c> trying</c><00:43:28.240><c> to</c><00:43:28.510><c> write</c><00:43:28.660><c> all</c>

00:43:28.799 --> 00:43:28.809 align:start position:0%
wouldn't recommend trying to write all
 

00:43:28.809 --> 00:43:30.839 align:start position:0%
wouldn't recommend trying to write all
your<00:43:28.839><c> code</c><00:43:29.200><c> only</c><00:43:29.530><c> using</c><00:43:30.069><c> lambda</c><00:43:30.250><c> expressions</c>

00:43:30.839 --> 00:43:30.849 align:start position:0%
your code only using lambda expressions
 

00:43:30.849 --> 00:43:32.970 align:start position:0%
your code only using lambda expressions
if<00:43:31.240><c> you</c><00:43:31.359><c> want</c><00:43:31.539><c> to</c><00:43:31.599><c> do</c><00:43:31.690><c> two</c><00:43:31.869><c> plus</c><00:43:32.020><c> two</c><00:43:32.260><c> in</c><00:43:32.380><c> Java</c>

00:43:32.970 --> 00:43:32.980 align:start position:0%
if you want to do two plus two in Java
 

00:43:32.980 --> 00:43:35.789 align:start position:0%
if you want to do two plus two in Java
use<00:43:33.789><c> the</c><00:43:34.000><c> primitive</c><00:43:34.150><c> int</c><00:43:34.480><c> type</c><00:43:34.660><c> use</c><00:43:35.260><c> the</c><00:43:35.470><c> plus</c>

00:43:35.789 --> 00:43:35.799 align:start position:0%
use the primitive int type use the plus
 

00:43:35.799 --> 00:43:39.660 align:start position:0%
use the primitive int type use the plus
operator<00:43:36.220><c> much</c><00:43:36.970><c> much</c><00:43:37.150><c> easier</c><00:43:38.670><c> more</c>

00:43:39.660 --> 00:43:39.670 align:start position:0%
operator much much easier more
 

00:43:39.670 --> 00:43:43.289 align:start position:0%
operator much much easier more
information<00:43:40.920><c> like</c><00:43:41.920><c> I</c><00:43:41.950><c> said</c><00:43:42.190><c> my</c><00:43:42.849><c> inspiration</c>

00:43:43.289 --> 00:43:43.299 align:start position:0%
information like I said my inspiration
 

00:43:43.299 --> 00:43:44.160 align:start position:0%
information like I said my inspiration
came<00:43:43.450><c> from</c><00:43:43.510><c> the</c><00:43:43.690><c> Eric's</c><00:43:44.020><c> presentation</c>

00:43:44.160 --> 00:43:44.170 align:start position:0%
came from the Eric's presentation
 

00:43:44.170 --> 00:43:46.200 align:start position:0%
came from the Eric's presentation
there's<00:43:44.829><c> a</c><00:43:44.890><c> video</c><00:43:45.130><c> of</c><00:43:45.280><c> him</c><00:43:45.430><c> doing</c><00:43:45.700><c> this</c><00:43:45.849><c> at</c>

00:43:46.200 --> 00:43:46.210 align:start position:0%
there's a video of him doing this at
 

00:43:46.210 --> 00:43:49.200 align:start position:0%
there's a video of him doing this at
devoxx<00:43:46.990><c> in</c><00:43:47.319><c> a</c><00:43:47.559><c> box</c><00:43:47.799><c> in</c><00:43:48.039><c> Zurich</c><00:43:48.309><c> and</c><00:43:48.730><c> there's</c>

00:43:49.200 --> 00:43:49.210 align:start position:0%
devoxx in a box in Zurich and there's
 

00:43:49.210 --> 00:43:52.829 align:start position:0%
devoxx in a box in Zurich and there's
also<00:43:50.160><c> what</c><00:43:51.160><c> Jarek</c><00:43:51.609><c> based</c><00:43:51.849><c> his</c><00:43:52.029><c> work</c><00:43:52.180><c> on</c><00:43:52.359><c> which</c>

00:43:52.829 --> 00:43:52.839 align:start position:0%
also what Jarek based his work on which
 

00:43:52.839 --> 00:43:55.289 align:start position:0%
also what Jarek based his work on which
was<00:43:53.079><c> Dickson</c><00:43:53.470><c> Yang's</c><00:43:53.740><c> blog</c><00:43:54.490><c> who</c><00:43:54.789><c> works</c><00:43:55.089><c> for</c>

00:43:55.289 --> 00:43:55.299 align:start position:0%
was Dickson Yang's blog who works for
 

00:43:55.299 --> 00:43:58.019 align:start position:0%
was Dickson Yang's blog who works for
Microsoft<00:43:55.510><c> and</c><00:43:56.170><c> he</c><00:43:56.680><c> did</c><00:43:56.859><c> this</c><00:43:56.980><c> in</c><00:43:57.130><c> C</c><00:43:57.309><c> shock</c><00:43:57.579><c> so</c>

00:43:58.019 --> 00:43:58.029 align:start position:0%
Microsoft and he did this in C shock so
 

00:43:58.029 --> 00:44:01.019 align:start position:0%
Microsoft and he did this in C shock so
it's<00:43:58.329><c> a</c><00:43:58.390><c> similar</c><00:43:58.630><c> kind</c><00:43:58.720><c> of</c><00:43:58.839><c> thing</c><00:43:58.900><c> but</c><00:44:00.029><c> he's</c>

00:44:01.019 --> 00:44:01.029 align:start position:0%
it's a similar kind of thing but he's
 

00:44:01.029 --> 00:44:02.490 align:start position:0%
it's a similar kind of thing but he's
got<00:44:01.180><c> a</c><00:44:01.210><c> lot</c><00:44:01.329><c> more</c><00:44:01.390><c> detail</c><00:44:01.839><c> about</c><00:44:02.049><c> how</c><00:44:02.200><c> this</c><00:44:02.349><c> all</c>

00:44:02.490 --> 00:44:02.500 align:start position:0%
got a lot more detail about how this all
 

00:44:02.500 --> 00:44:05.730 align:start position:0%
got a lot more detail about how this all
kind<00:44:02.619><c> of</c><00:44:02.710><c> works</c><00:44:02.890><c> out</c><00:44:03.630><c> so</c><00:44:04.630><c> with</c><00:44:04.809><c> that</c><00:44:04.960><c> thank</c><00:44:05.710><c> you</c>

00:44:05.730 --> 00:44:05.740 align:start position:0%
kind of works out so with that thank you
 

00:44:05.740 --> 00:44:07.250 align:start position:0%
kind of works out so with that thank you
very<00:44:05.799><c> much</c>

00:44:07.250 --> 00:44:07.260 align:start position:0%
very much
 

00:44:07.260 --> 00:44:11.969 align:start position:0%
very much
[Applause]

