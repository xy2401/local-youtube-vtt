WEBVTT
Kind: captions
Language: zh-Hans

00:00:00.200 --> 00:00:06.150
 [音乐] 

00:00:03.319 --> 00:00:07.410
好吧，让我们开始早安

00:00:06.150 --> 00:00:08.760
欢迎参加反应式会议

00:00:07.410 --> 00:00:10.820
 Java语言编程，我叫Venkat 

00:00:08.760 --> 00:00:12.990
 Subramanyam我们将要讨论

00:00:10.820 --> 00:00:14.700
反应式编程，然后

00:00:12.990 --> 00:00:17.640
我们将讨论一些例子

00:00:14.700 --> 00:00:19.350
有效，所以让我们开始吧，我想

00:00:17.640 --> 00:00:21.600
首先谈一下反应式编程

00:00:19.350 --> 00:00:24.000
本身，所以我的第一个问题

00:00:21.600 --> 00:00:27.029
首先要问的是为什么

00:00:24.000 --> 00:00:28.619
另一个编程模型为什么我们不能

00:00:27.029 --> 00:00:31.140
对我们已经做的事情感到满意

00:00:28.619 --> 00:00:33.120
我意识到的一件事是我们工作

00:00:31.140 --> 00:00:34.890
在大约每十年的领域

00:00:33.120 --> 00:00:37.260
将为我们已经存在的名称重新命名

00:00:34.890 --> 00:00:39.840
并为此感到非常兴奋

00:00:37.260 --> 00:00:41.250
所以这次围绕着得到的东西

00:00:39.840 --> 00:00:42.780
我们很兴奋是像反应性的东西

00:00:41.250 --> 00:00:44.820
对微服务和事物进行编程

00:00:42.780 --> 00:00:46.829
像那样好，原来是反应性的

00:00:44.820 --> 00:00:49.230
编程真的不是新东西

00:00:46.829 --> 00:00:50.820
在很长一段时间内，如果

00:00:49.230 --> 00:00:52.710
你真的认为这有点

00:00:50.820 --> 00:00:54.570
就像极端编程所做的那样

00:00:52.710 --> 00:00:56.219
很好的极端编程没有

00:00:54.570 --> 00:00:58.109
任何新事物和真正的新事物

00:00:56.219 --> 00:00:59.640
关于极限编程

00:00:58.109 --> 00:01:01.980
真的，它汇集了一定

00:00:59.640 --> 00:01:04.019
我们应该重点关注的实践

00:01:01.980 --> 00:01:05.430
以类似方式反应的事物

00:01:04.019 --> 00:01:07.080
一起编程大人物已经

00:01:05.430 --> 00:01:09.060
大约一会儿，但是我们必须

00:01:07.080 --> 00:01:11.159
编程确实确实带来了

00:01:09.060 --> 00:01:13.740
强调为什么我们应该集中精力

00:01:11.159 --> 00:01:15.540
关于它谈论的四个具体问题

00:01:13.740 --> 00:01:17.490
关于，所以真的很新

00:01:15.540 --> 00:01:19.500
强调的编程模型

00:01:17.490 --> 00:01:21.659
可扩展性和响应能力

00:01:19.500 --> 00:01:23.310
积极性，但问题是为什么

00:01:21.659 --> 00:01:26.250
我们真的应该关心它吗，为什么

00:01:23.310 --> 00:01:27.659
现在好了，我几乎怀旧了

00:01:26.250 --> 00:01:29.549
这，但我记得我的日子

00:01:27.659 --> 00:01:31.259
会在早上醒来，而

00:01:29.549 --> 00:01:32.820
咖啡荚正在煮咖啡，我的调制解调器

00:01:31.259 --> 00:01:35.670
将连接并重新连接，我可以

00:01:32.820 --> 00:01:37.680
听到在我的嗡嗡声

00:01:35.670 --> 00:01:39.090
几年，然后我当然会打电话给我

00:01:37.680 --> 00:01:41.009
朋友问他们波特率是多少

00:01:39.090 --> 00:01:43.220
那些日子今天过得很好

00:01:41.009 --> 00:01:45.659
我们已经处理了很久了

00:01:43.220 --> 00:01:48.180
持续连接的设备

00:01:45.659 --> 00:01:50.490
互联网总是连接每一个

00:01:48.180 --> 00:01:53.490
我们每个人都携带着多种不同

00:01:50.490 --> 00:01:55.740
每天与我们一起使用设备

00:01:53.490 --> 00:01:58.259
结果我们有一些应用

00:01:55.740 --> 00:02:00.810
一直在处理数据传递

00:01:58.259 --> 00:02:02.340
第二个重要数据

00:02:00.810 --> 00:02:04.189
发生的事情是如果你真的

00:02:02.340 --> 00:02:06.810
回首大约10或15年前

00:02:04.189 --> 00:02:08.849
公司向

00:02:06.810 --> 00:02:10.890
他们的雇员，使他们的雇员

00:02:08.849 --> 00:02:13.030
可供公众使用

00:02:10.890 --> 00:02:14.860
这些员工正在使用该系统

00:02:13.030 --> 00:02:16.450
被称为俘虏用户，不是

00:02:14.860 --> 00:02:18.790
不管他们对

00:02:16.450 --> 00:02:21.730
另一方面，我们正在申请

00:02:18.790 --> 00:02:23.319
现在可以供现实世界的用户使用

00:02:21.730 --> 00:02:26.440
无论您的身材多大

00:02:23.319 --> 00:02:29.020
我敢打赌，您有更多客户

00:02:26.440 --> 00:02:31.810
和用户数比员工数多

00:02:29.020 --> 00:02:34.480
结果，我们对

00:02:31.810 --> 00:02:36.489
现在我们做了几年的申请

00:02:34.480 --> 00:02:38.950
以前当然我们也是

00:02:36.489 --> 00:02:41.200
谈论各种不同的设备

00:02:38.950 --> 00:02:44.620
不断沟通好忘了

00:02:41.200 --> 00:02:46.510
关于你的智能手机和手表

00:02:44.620 --> 00:02:48.250
我们在谈论耳环和鼻子

00:02:46.510 --> 00:02:50.680
环和舌头环所有互联网

00:02:48.250 --> 00:02:54.280
很快启用，这实际上意味着什么

00:02:50.680 --> 00:02:56.440
我们正在寻找的设备是

00:02:54.280 --> 00:02:58.450
不断地与我们联系

00:02:56.440 --> 00:03:00.910
监控我们的健康状况

00:02:58.450 --> 00:03:02.620
您的医生可以收到有关您的

00:03:00.910 --> 00:03:04.510
健康状况，甚至在您意识到之前

00:03:02.620 --> 00:03:07.150
他们可以知道下来帮助您

00:03:04.510 --> 00:03:09.000
那些日子不是很遥远，所以我们

00:03:07.150 --> 00:03:11.380
谈论的是

00:03:09.000 --> 00:03:13.750
不断交换数据，我们也

00:03:11.380 --> 00:03:15.970
谈论高频率

00:03:13.750 --> 00:03:18.070
我们所谓的大数据就是

00:03:15.970 --> 00:03:20.200
我们今天在很多地方

00:03:18.070 --> 00:03:22.060
不同的应用程序，所以它是一个

00:03:20.200 --> 00:03:24.519
真正构造和扩展的方式

00:03:22.060 --> 00:03:26.799
应用这个特殊的想法

00:03:24.519 --> 00:03:28.870
来自Microsoft Research的Eric Meyer 

00:03:26.799 --> 00:03:30.190
创造了反应性的想法

00:03:28.870 --> 00:03:32.350
编程，它已经为

00:03:30.190 --> 00:03:34.420
它获得了很多年

00:03:32.350 --> 00:03:36.340
在Java领域和

00:03:34.420 --> 00:03:38.440
 JavaScript已经存在于

00:03:36.340 --> 00:03:40.780
暗网区域相当长的时间，但

00:03:38.440 --> 00:03:42.910
但主要思想是“反应”一词

00:03:40.780 --> 00:03:45.549
在这种情况下，仅指

00:03:42.910 --> 00:03:48.519
系统响应的能力

00:03:45.549 --> 00:03:50.170
发生的刺激和活动

00:03:48.519 --> 00:03:51.970
当涉及这些应用程序时，我

00:03:50.170 --> 00:03:54.100
希望您退后一步，重新思考

00:03:51.970 --> 00:03:56.829
如果回头看，这只是一点

00:03:54.100 --> 00:03:59.109
在过去的20年中，您过得如何

00:03:56.829 --> 00:04:01.510
在那段时间里做了很多

00:03:59.109 --> 00:04:05.200
好吧，我们可以总结一下

00:04:01.510 --> 00:04:06.790
变成了一个首字母缩略词

00:04:05.200 --> 00:04:09.489
我们一直在构建的应用程序中

00:04:06.790 --> 00:04:11.380
是我们创建数据的原始应用程序

00:04:09.489 --> 00:04:13.750
我们已经读取了数据，我们更新了数据， 

00:04:11.380 --> 00:04:15.250
有时我们删除数据，但有时

00:04:13.750 --> 00:04:18.039
点你早上醒来，问

00:04:15.250 --> 00:04:20.560
问题是一切都是粗俗的

00:04:18.039 --> 00:04:22.030
应用程序是否有可能

00:04:20.560 --> 00:04:23.560
你刚刚落伍了

00:04:22.030 --> 00:04:25.630
也许我们只是在考虑

00:04:23.560 --> 00:04:26.889
其他一切可能都不是

00:04:25.630 --> 00:04:29.379
一切都陷入

00:04:26.889 --> 00:04:31.419
这个类别很好，事实证明是

00:04:29.379 --> 00:04:34.229
实际上，有很多

00:04:31.419 --> 00:04:36.999
不太读取数据的应用程序

00:04:34.229 --> 00:04:39.069
像这样处理并设置数据

00:04:36.999 --> 00:04:40.900
我们思考的方式有一个富裕的人

00:04:39.069 --> 00:04:43.389
对感兴趣的应用程序

00:04:40.900 --> 00:04:46.180
处理可能正在流动的数据

00:04:43.389 --> 00:04:47.949
随着时间的流逝，我们希望

00:04:46.180 --> 00:04:50.229
能够回应这些活动

00:04:47.949 --> 00:04:52.840
这些是中介，想象你是

00:04:50.229 --> 00:04:54.939
有兴趣处理库存数据

00:04:52.840 --> 00:04:56.349
库存数据贯穿整个

00:04:54.939 --> 00:04:59.199
股市变化的一天

00:04:56.349 --> 00:05:01.509
您不是从

00:04:59.199 --> 00:05:03.520
数据库本身，您所要做的就是您

00:05:01.509 --> 00:05:05.349
正在响应库存数据，嘿，我

00:05:03.520 --> 00:05:07.509
想以此购买股票价格

00:05:05.349 --> 00:05:09.639
特定的时间，但我想等待

00:05:07.509 --> 00:05:11.710
直到这个价格真的到了

00:05:09.639 --> 00:05:13.539
特定点以及何时需要

00:05:11.710 --> 00:05:14.919
真正采取行动，我不在乎

00:05:13.539 --> 00:05:16.840
我不在乎之前的任何事情

00:05:14.919 --> 00:05:19.060
达到这个价格后的任何东西

00:05:16.840 --> 00:05:21.129
这可能是一个例子，也可能是

00:05:19.060 --> 00:05:22.779
您正在监视的设备以及何时

00:05:21.129 --> 00:05:24.789
设备达到您想要的阈值

00:05:22.779 --> 00:05:27.729
对此作出回应可能是事实

00:05:24.789 --> 00:05:29.589
你在听天气

00:05:27.729 --> 00:05:31.990
信息以及天气变化的时间

00:05:29.589 --> 00:05:33.759
您想要回应的特定模式

00:05:31.990 --> 00:05:35.830
所以很多这些东西不属于

00:05:33.759 --> 00:05:37.750
到我们一直使用的正确模型

00:05:35.830 --> 00:05:39.699
在谈论，所以我们需要真正

00:05:37.750 --> 00:05:41.259
重新思考好这将我们带到

00:05:39.699 --> 00:05:43.689
四个不同的关注点是

00:05:41.259 --> 00:05:45.009
极其重要，其中之一是

00:05:43.689 --> 00:05:47.229
我们应该认真考虑一下

00:05:45.009 --> 00:05:49.360
开发此类应用程序

00:05:47.229 --> 00:05:51.939
应用程序，其中之一就是思考

00:05:49.360 --> 00:05:53.409
关于消息驱动的应用程序，所以我们

00:05:51.939 --> 00:05:55.779
想考虑建设

00:05:53.409 --> 00:05:58.319
我要去的应用程序

00:05:55.779 --> 00:06:01.419
并说使用分布式

00:05:58.319 --> 00:06:03.969
集中式数据库上的事务是

00:06:01.419 --> 00:06:05.770
所以20世纪我们应该重新考虑

00:06:03.969 --> 00:06:07.899
我们如何禁止模型应用程序

00:06:05.770 --> 00:06:09.550
系统的这些不同部分

00:06:07.899 --> 00:06:11.860
应该与每个人交换消息

00:06:09.550 --> 00:06:14.110
其他而不是尝试使用

00:06:11.860 --> 00:06:14.649
集中式数据库甚至分布式

00:06:14.110 --> 00:06:17.169
资料库

00:06:14.649 --> 00:06:19.539
应用程序必须真正思考

00:06:17.169 --> 00:06:21.759
关于弹性我有一个客户问

00:06:19.539 --> 00:06:23.800
他们您有多少个用户

00:06:21.759 --> 00:06:26.229
典型的一天，他们说我们到了

00:06:23.800 --> 00:06:28.449
在典型的一天有200位用户

00:06:26.229 --> 00:06:29.979
笑着说真的有200位用户

00:06:28.449 --> 00:06:32.169
伙计们是数十亿美元的公司

00:06:29.979 --> 00:06:33.699
您有200位用户，他们说的很好

00:06:32.169 --> 00:06:35.620
在典型的一天问我们多少

00:06:33.699 --> 00:06:38.259
我们拥有的人，我们必须结束200 

00:06:35.620 --> 00:06:40.419
人们在其中使用了两天半

00:06:38.259 --> 00:06:41.260
一个月约有五千万人使用

00:06:40.419 --> 00:06:43.300
其

00:06:41.260 --> 00:06:45.520
所以你如何扩展像

00:06:43.300 --> 00:06:47.770
几乎没有人使用您的

00:06:45.520 --> 00:06:49.750
系统大多数时候会做一点

00:06:47.770 --> 00:06:51.310
在这里和那里然后再管理东西

00:06:49.750 --> 00:06:51.730
大约两到两天半

00:06:51.310 --> 00:06:53.710
月

00:06:51.730 --> 00:06:55.450
 5000万用户使用您的系统

00:06:53.710 --> 00:06:57.460
我要说的是

00:06:55.450 --> 00:06:59.710
维护当地基础设施和

00:06:57.460 --> 00:07:01.690
工作人员维护它真的

00:06:59.710 --> 00:07:03.340
在这个时代和时代我们很荒谬

00:07:01.690 --> 00:07:04.960
真的应该重新思考我们的建造方式

00:07:03.340 --> 00:07:07.690
系统，这就是云计算

00:07:04.960 --> 00:07:10.510
真的向我们展示了我们可以

00:07:07.690 --> 00:07:12.850
弹性我们可以是基于时间的弹性

00:07:10.510 --> 00:07:13.840
需求变化时基于负载的弹性

00:07:12.850 --> 00:07:15.820
你将获得更多收入

00:07:13.840 --> 00:07:18.190
因为你可以带来需求

00:07:15.820 --> 00:07:19.690
更多系统可以满足您的需求

00:07:18.190 --> 00:07:21.820
然后当需求减少时，您可以

00:07:19.690 --> 00:07:23.470
这些系统运转良好吗

00:07:21.820 --> 00:07:25.060
云计算和弹性服务

00:07:23.470 --> 00:07:26.920
向我们展示了这一点，我们绝对可以

00:07:25.060 --> 00:07:28.510
利用那是另一回事

00:07:26.920 --> 00:07:30.790
反应式编程

00:07:28.510 --> 00:07:34.090
强调它强调的第三件事

00:07:30.790 --> 00:07:36.400
弹性弹性是如此之大

00:07:34.090 --> 00:07:38.110
重要的是看看自己的智能手机

00:07:36.400 --> 00:07:40.000
一分钟对我来说

00:07:38.110 --> 00:07:42.280
您的智能应用程序

00:07:40.000 --> 00:07:45.100
我敢打赌你有几百个电话

00:07:42.280 --> 00:07:47.380
上面的应用程序您使用了多少

00:07:45.100 --> 00:07:49.360
在任何一天，您可能会使用

00:07:47.380 --> 00:07:52.240
十几个应用程序又如何

00:07:49.360 --> 00:07:54.280
应用程序很好，它们纯属垃圾

00:07:52.240 --> 00:07:55.810
其实你对他们很生气

00:07:54.280 --> 00:07:57.370
把他们留在那里死不死

00:07:55.810 --> 00:07:58.960
值得您去触摸它们，甚至

00:07:57.370 --> 00:08:01.150
删除它就是我们的感受

00:07:58.960 --> 00:08:02.980
表现不佳的应用程序

00:08:01.150 --> 00:08:04.930
有弹性，所以我们应该真正

00:08:02.980 --> 00:08:06.880
重新思考我们如何构建应用程序

00:08:04.930 --> 00:08:08.530
弹性非常重要

00:08:06.880 --> 00:08:11.350
因为如果应用不是很

00:08:08.530 --> 00:08:13.090
在他们的失败中风度翩翩，我们不是

00:08:11.350 --> 00:08:14.860
和他们打交道会很高兴

00:08:13.090 --> 00:08:16.810
随着时间的流逝，这让我想起了

00:08:14.860 --> 00:08:18.910
我参加会议的经验不太好

00:08:16.810 --> 00:08:20.980
很久以前，当一位绅士来找我

00:08:18.910 --> 00:08:22.630
他说他几十年来是我的学生

00:08:20.980 --> 00:08:24.640
以前我已经教了差不多

00:08:22.630 --> 00:08:26.860
团结已近三十年

00:08:24.640 --> 00:08:28.660
休斯敦，其中之一他说我

00:08:26.860 --> 00:08:31.390
上了分布式计算课

00:08:28.660 --> 00:08:33.190
我回想起1998年的时候

00:08:31.390 --> 00:08:34.630
我教那个课程的时候

00:08:33.190 --> 00:08:36.700
说我想告诉你一个故事我说我

00:08:34.630 --> 00:08:37.780
爱情故事告诉我一个他说的故事

00:08:36.700 --> 00:08:39.490
我在你上课的时候

00:08:37.780 --> 00:08:42.520
分布式对象计算，我们有了

00:08:39.490 --> 00:08:44.320
最后一个学期的演示，我在做

00:08:42.520 --> 00:08:46.480
演示，就在中间

00:08:44.320 --> 00:08:48.580
演示，你安静地走到我的身边

00:08:46.480 --> 00:08:50.980
电脑断开了互联网电缆

00:08:48.580 --> 00:08:52.660
然后说继续和项目

00:08:50.980 --> 00:08:54.340
不及格，我说的课程不及格

00:08:52.660 --> 00:08:54.830
听到您失败我真的很抱歉

00:08:54.340 --> 00:08:55.970
我的核心

00:08:54.830 --> 00:08:57.650
这就是为什么你想分享这样一个

00:08:55.970 --> 00:08:59.210
我跟他讲的故事很好，因为

00:08:57.650 --> 00:09:01.520
他去之后有个好消息

00:08:59.210 --> 00:09:03.710
继续说，因为那是我的最后一天

00:09:01.520 --> 00:09:05.690
曾经犯过这个错误，然后你继续

00:09:03.710 --> 00:09:07.520
说我编程的时候你现在看到

00:09:05.690 --> 00:09:08.810
我不只是编写幸福的道路

00:09:07.520 --> 00:09:10.910
从可能发生的事情开始

00:09:08.810 --> 00:09:13.040
错误的，我在其中建立了韧性

00:09:10.910 --> 00:09:14.840
申请，然后他说好这些

00:09:13.040 --> 00:09:17.930
我编码的日子里我不这么认为

00:09:14.840 --> 00:09:19.970
他在我办公室里轻轻地说

00:09:17.930 --> 00:09:22.160
我在小隔间里有一张照片

00:09:19.970 --> 00:09:23.510
在我面前铺上毯子，然后我

00:09:22.160 --> 00:09:25.100
我每天看这张照片

00:09:23.510 --> 00:09:26.570
代码，我不会犯这个错误

00:09:25.100 --> 00:09:29.030
不要以为我们要

00:09:26.570 --> 00:09:30.740
在我们的书桌上或办公室里的Even venket 

00:09:29.030 --> 00:09:32.510
但关键是我们有一个程序

00:09:30.740 --> 00:09:34.820
弹性非常重要，因为

00:09:32.510 --> 00:09:37.100
那好吧，当然我们也要

00:09:34.820 --> 00:09:39.260
好好考虑一下响应能力

00:09:37.100 --> 00:09:42.860
考虑正在运行的应用程序

00:09:39.260 --> 00:09:44.540
但是我们生活在一个

00:09:42.860 --> 00:09:45.740
即时满足，我们不会

00:09:44.540 --> 00:09:48.770
只是坐在那里等

00:09:45.740 --> 00:09:50.300
响应我们想要结果的应用程序

00:09:48.770 --> 00:09:53.570
现在，当我们想要快速

00:09:50.300 --> 00:09:56.360
一个很好的例子就是

00:09:53.570 --> 00:09:58.460
想想你知道无限滚动

00:09:56.360 --> 00:10:00.380
很好的例子，您滚动浏览

00:09:58.460 --> 00:10:02.240
申请通常是一个早晨

00:10:00.380 --> 00:10:03.500
慢，它反应很快， 

00:10:02.240 --> 00:10:05.810
你就像哇，真漂亮

00:10:03.500 --> 00:10:08.450
瞬间，然后你意识到

00:10:05.810 --> 00:10:09.920
此特定页面的结尾

00:10:08.450 --> 00:10:11.570
向上滚动，没有任何内容， 

00:10:09.920 --> 00:10:13.640
在您意识到之前，如果有

00:10:11.570 --> 00:10:16.250
没有什么可以填满下一部分

00:10:13.640 --> 00:10:18.350
数据，这是如何

00:10:16.250 --> 00:10:20.420
应用程序可能会花费一些时间

00:10:18.350 --> 00:10:22.700
当您处理部分

00:10:20.420 --> 00:10:24.680
响应，因此它可以非常响应

00:10:22.700 --> 00:10:26.870
响应能力非常重要

00:10:24.680 --> 00:10:29.540
想象你走进一家商店， 

00:10:26.870 --> 00:10:31.250
商店很忙，您会看到

00:10:29.540 --> 00:10:32.870
忙于一些客户的业务员

00:10:31.250 --> 00:10:34.400
你通常会做什么

00:10:32.870 --> 00:10:35.600
看看周围几分钟

00:10:34.400 --> 00:10:37.820
天花板看着地板，你

00:10:35.600 --> 00:10:40.160
走开，因为没有回应

00:10:37.820 --> 00:10:42.080
但另一方面，你使你

00:10:40.160 --> 00:10:44.180
店员走进商店

00:10:42.080 --> 00:10:45.800
与你联系说我会和你在一起

00:10:44.180 --> 00:10:47.000
不久后回去帮助

00:10:45.800 --> 00:10:50.000
已经在那里的客户

00:10:47.000 --> 00:10:51.980
你可能在等一个好15 20 

00:10:50.000 --> 00:10:53.570
分钟，为什么要这么做，因为你

00:10:51.980 --> 00:10:55.940
觉得你很重要，即使你

00:10:53.570 --> 00:10:57.830
知道你不是重点是

00:10:55.940 --> 00:11:00.080
这就是这个背后的全部想法是

00:10:57.830 --> 00:11:03.050
当有响应时，我们有一个

00:11:00.080 --> 00:11:04.910
比用户忠诚度和绝对

00:11:03.050 --> 00:11:07.180
不是响应的应用程序

00:11:04.910 --> 00:11:08.620
是那些失去用户的人

00:11:07.180 --> 00:11:11.170
很快，所以这是四个

00:11:08.620 --> 00:11:12.820
基本要素

00:11:11.170 --> 00:11:14.680
建立我们将要使用的应用程序

00:11:12.820 --> 00:11:16.570
信息驱动沟通我们

00:11:14.680 --> 00:11:18.430
我们将使用弹性服务

00:11:16.570 --> 00:11:20.650
进行韧性编程并成为

00:11:18.430 --> 00:11:22.960
优雅地对待失败，当然

00:11:20.650 --> 00:11:24.880
提供响应式应用程序作为

00:11:22.960 --> 00:11:27.820
那么反应式编程是什么

00:11:24.880 --> 00:11:29.950
好吧，这是一个编程模型

00:11:27.820 --> 00:11:31.630
使用这些构建应用程序

00:11:29.950 --> 00:11:33.820
使应用程序真正变的东西

00:11:31.630 --> 00:11:35.410
应变能力强但我们该如何去

00:11:33.820 --> 00:11:37.390
关于这样做，我们不能只是

00:11:35.410 --> 00:11:39.520
使用多线程构建应用程序

00:11:37.390 --> 00:11:41.290
很好，我们可以使用多个线程

00:11:39.520 --> 00:11:43.570
但是想象一下当您创建时会发生什么

00:11:41.290 --> 00:11:45.400
线程是最简单的部分，然后我们得到了

00:11:43.570 --> 00:11:47.320
担心比赛条件如何

00:11:45.400 --> 00:11:49.900
线程进行通信，依此类推

00:11:47.320 --> 00:11:51.700
总的来说非常非常痛苦

00:11:49.900 --> 00:11:53.350
如果您真的考虑过

00:11:51.700 --> 00:11:55.000
您创建线程没有真正

00:11:53.350 --> 00:11:57.490
线程之间进行通讯的好方法

00:11:55.000 --> 00:11:59.560
好吧，我们可以用期货来做到这一点

00:11:57.490 --> 00:12:03.010
好吧，如果您考虑期货

00:11:59.560 --> 00:12:05.830
我们的期货做什么期货

00:12:03.010 --> 00:12:07.540
基本上要回到那里

00:12:05.830 --> 00:12:10.180
您在应用程序计算时

00:12:07.540 --> 00:12:12.640
结束，但您可以继续通话

00:12:10.180 --> 00:12:14.380
未来以及未来的一刻

00:12:12.640 --> 00:12:16.390
你的手你通常做什么

00:12:14.380 --> 00:12:18.460
转身打电话给get等待

00:12:16.390 --> 00:12:20.620
给你的回应

00:12:18.460 --> 00:12:22.060
那根本没有未来，那是浪费

00:12:20.620 --> 00:12:23.950
等待中的资源

00:12:22.060 --> 00:12:26.170
服务，而且真的很难

00:12:23.950 --> 00:12:28.960
使用它哦，等等，我们不能

00:12:26.170 --> 00:12:31.330
所有人都应该开心，如果您使用回调， 

00:12:28.960 --> 00:12:33.610
认为回调是一个好主意

00:12:31.330 --> 00:12:36.160
给你的建议就是安静地走

00:12:33.610 --> 00:12:38.860
在JavaScript程序员旁边

00:12:36.160 --> 00:12:41.200
说出“回拨”一词并观看他们

00:12:38.860 --> 00:12:42.730
开始失控地哭泣，因为我们

00:12:41.200 --> 00:12:44.380
学会了不起作用的电话

00:12:42.730 --> 00:12:46.120
实际上真的很好

00:12:44.380 --> 00:12:47.890
 JavaScript世界已经开始使用

00:12:46.120 --> 00:12:49.990
承诺等

00:12:47.890 --> 00:12:51.730
反应性的解决方案，所以

00:12:49.990 --> 00:12:53.650
我们到底要做什么？ 

00:12:51.730 --> 00:12:55.120
解决我们要做什么

00:12:53.650 --> 00:12:57.190
真的很好，我想做的第一件事

00:12:55.120 --> 00:12:59.290
强调也许是时候思考了

00:12:57.190 --> 00:13:01.780
毫无疑问，我不是在建议我们

00:12:59.290 --> 00:13:03.760
不会再在卡中编程，但不会

00:13:01.780 --> 00:13:05.860
我们所做的一切可能都必须

00:13:03.760 --> 00:13:07.960
纠正我要问的第二件事是

00:13:05.860 --> 00:13:10.300
如果我们开始考虑数据该怎么办

00:13:07.960 --> 00:13:13.120
流计算，如果我们开始思考

00:13:10.300 --> 00:13:16.150
关于我们拥有

00:13:13.120 --> 00:13:19.000
发出数据的数据源

00:13:16.150 --> 00:13:20.030
我们是会收到的中介

00:13:19.000 --> 00:13:22.220
数据和

00:13:20.030 --> 00:13:25.430
您会看到我们将执行的数据

00:13:22.220 --> 00:13:27.260
计算，然后发出数据

00:13:25.430 --> 00:13:29.300
前进到下一个

00:13:27.260 --> 00:13:30.440
系列，我们可以有一系列

00:13:29.300 --> 00:13:32.990
可以回应这些的事物

00:13:30.440 --> 00:13:36.440
应用程序也许是数据流计算

00:13:32.990 --> 00:13:37.850
再次复苏，这又是

00:13:36.440 --> 00:13:39.830
一个已经存在了很长时间的概念

00:13:37.850 --> 00:13:42.080
时间长了，但是收到特别

00:13:39.830 --> 00:13:43.910
现在注意，但要了解

00:13:42.080 --> 00:13:47.270
这让我们略有不同

00:13:43.910 --> 00:13:49.070
例子，并玩弄它，所以我

00:13:47.270 --> 00:13:51.200
要做的是解决一个小问题

00:13:49.070 --> 00:13:53.770
我将研究一种解决方法

00:13:51.200 --> 00:13:56.360
问题，然后看看我们该怎么做

00:13:53.770 --> 00:13:59.180
你知道对这个问题的重新思考

00:13:56.360 --> 00:14:01.280
为此，我需要一个志愿者， 

00:13:59.180 --> 00:14:03.020
智能手机，谁有兴趣

00:14:01.280 --> 00:14:04.420
帮助谁想帮助我不要

00:14:03.020 --> 00:14:07.220
害羞

00:14:04.420 --> 00:14:10.130
谁想要好先生，你叫什么名字

00:14:07.220 --> 00:14:11.480
狮子座，你可以在那里，但你我

00:14:10.130 --> 00:14:12.530
希望您给我有关的信息

00:14:11.480 --> 00:14:14.690
我不需要你的三件事

00:14:12.530 --> 00:14:17.060
我只需要你的智能手机

00:14:14.690 --> 00:14:19.340
智能手机，所以这是问题

00:14:17.060 --> 00:14:22.160
你可以告诉我的起拍价吗

00:14:19.340 --> 00:14:25.280
这三件事Google Amazon Intel 

00:14:22.160 --> 00:14:28.520
和微软，我想以股票价格

00:14:25.280 --> 00:14:32.420
这四件事好吧，利奥，我们

00:14:28.520 --> 00:14:37.040
等你，你有答案吗

00:14:32.420 --> 00:14:38.540
对我们来说，狮子座，呃，他几乎说他不是

00:14:37.040 --> 00:14:43.310
有人认为他不够快

00:14:38.540 --> 00:14:46.930
对我们来说，您所拥有的只是一个价格，所以

00:14:43.310 --> 00:14:46.930
到目前为止，这令人失望

00:14:47.860 --> 00:14:53.420
不，他太慢了哦，这里的家伙看看

00:14:52.250 --> 00:14:56.420
也有人帮忙

00:14:53.420 --> 00:14:57.290
好，谢谢你，狮子座，谢谢你，狮子座

00:14:56.420 --> 00:14:59.090
很棒

00:14:57.290 --> 00:15:01.850
所以你可能展示了

00:14:59.090 --> 00:15:03.290
世界范围的体重起作用，所以他做了什么

00:15:01.850 --> 00:15:05.540
演示有几件事

00:15:03.290 --> 00:15:07.430
利亚没注意到，但你看到了我， 

00:15:05.540 --> 00:15:09.350
狮子座在一起有几件事

00:15:07.430 --> 00:15:11.300
发生在这里，谢谢您的帮助

00:15:09.350 --> 00:15:12.530
狮子座做的第一件事是我们发送了一封

00:15:11.300 --> 00:15:14.750
向他要求你做了什么

00:15:12.530 --> 00:15:17.840
立即开始工作，他是

00:15:14.750 --> 00:15:19.310
我说过几下

00:15:17.840 --> 00:15:20.210
这个我不在乎，我不要你

00:15:19.310 --> 00:15:22.670
不再为此工作

00:15:20.210 --> 00:15:24.650
他根本没有注意到这一点，就像

00:15:22.670 --> 00:15:26.510
网络服务一种网络服务

00:15:24.650 --> 00:15:28.280
垂头丧气地做事， 

00:15:26.510 --> 00:15:30.170
休息服务时会发生什么

00:15:28.280 --> 00:15:31.640
最终多奈克说，结果

00:15:30.170 --> 00:15:33.540
就像用户去了这些

00:15:31.640 --> 00:15:36.480
很久以前就消失了

00:15:33.540 --> 00:15:37.920
第二件事是你去一个网站

00:15:36.480 --> 00:15:39.390
要求也打架

00:15:37.920 --> 00:15:40.860
渴望回应你你做什么

00:15:39.390 --> 00:15:43.080
想提供帮助，所以您会怎么做

00:15:40.860 --> 00:15:44.790
现在发送两个线程的按钮

00:15:43.080 --> 00:15:45.540
这正是我对狮子座所做的

00:15:44.790 --> 00:15:47.850
以及

00:15:45.540 --> 00:15:49.740
我不断kept他，现在

00:15:47.850 --> 00:15:51.870
除了看答案他

00:15:49.740 --> 00:15:53.520
也不得不继续回应我

00:15:51.870 --> 00:15:54.540
根本不会帮助我们，但

00:15:53.520 --> 00:15:56.550
这就是我们做事的方式

00:15:54.540 --> 00:15:59.610
很长一段时间，所以你很好

00:15:56.550 --> 00:16:01.320
证明实际上他有点分支

00:15:59.610 --> 00:16:03.240
一路上走到别的地方

00:16:01.320 --> 00:16:05.040
这很聪明，但这实际上

00:16:03.240 --> 00:16:07.200
发生在几个会议之一

00:16:05.040 --> 00:16:09.150
几个月前，我在做同样的演讲， 

00:16:07.200 --> 00:16:11.220
像利亚这样的人想要在这里但对

00:16:09.150 --> 00:16:13.350
蝙蝠，他立刻击中了东西

00:16:11.220 --> 00:16:15.390
你到底做了什么，所以当我

00:16:13.350 --> 00:16:17.550
给了他四停，他说

00:16:15.390 --> 00:16:19.950
先生说我不去看

00:16:17.550 --> 00:16:23.610
他立即招募这些价格

00:16:19.950 --> 00:16:24.870
他周围有四个人，他说你找到了

00:16:23.610 --> 00:16:26.190
您找到的Microsoft价格

00:16:24.870 --> 00:16:28.410
东方价格找到压力

00:16:26.190 --> 00:16:31.350
谷歌，这样做他证明了

00:16:28.410 --> 00:16:33.810
系统不仅会浪费您，还会浪费

00:16:31.350 --> 00:16:36.390
一簇机器以及

00:16:33.810 --> 00:16:38.460
关键是它不是真的

00:16:36.390 --> 00:16:40.410
必须是这样，我们必须真正

00:16:38.460 --> 00:16:43.020
重新思考我们做事的方式

00:16:40.410 --> 00:16:45.840
我们该如何重新考虑这一点，我

00:16:43.020 --> 00:16:49.260
要说没有达到效率

00:16:45.840 --> 00:16:51.180
通过更快地完成任务，但避免

00:16:49.260 --> 00:16:52.050
那些不应该在其中完成的任务

00:16:51.180 --> 00:16:55.020
第一名

00:16:52.050 --> 00:16:57.600
所以目标真的是不要跑得更快

00:16:55.020 --> 00:16:59.940
越来越快，但需要重新思考

00:16:57.600 --> 00:17:01.920
关于我们实际上是如何工作的

00:16:59.940 --> 00:17:04.199
任务也许有些任务，我们

00:17:01.920 --> 00:17:06.209
用户真的应该在乎吗

00:17:04.199 --> 00:17:08.760
关于这个我可以推迟运行

00:17:06.209 --> 00:17:10.740
也许直到以后，我可能

00:17:08.760 --> 00:17:12.540
我要示范一下

00:17:10.740 --> 00:17:14.400
你一些例子，但在此之前我要

00:17:12.540 --> 00:17:15.510
像我以前那样连接

00:17:14.400 --> 00:17:17.850
了解反应式编程

00:17:15.510 --> 00:17:20.220
我面前有空虚，我

00:17:17.850 --> 00:17:22.560
不知道头骨在哪里

00:17:20.220 --> 00:17:26.430
放在一起，这是我的认识之一

00:17:22.560 --> 00:17:28.560
这是来自

00:17:26.430 --> 00:17:30.690
函数式编程，因为对我而言

00:17:28.560 --> 00:17:32.550
函数式编程真的不是

00:17:30.690 --> 00:17:34.290
关于不变性功能

00:17:32.550 --> 00:17:36.360
编程与高阶无关

00:17:34.290 --> 00:17:38.400
这些东西是

00:17:36.360 --> 00:17:40.800
成分成分是其中的一部分

00:17:38.400 --> 00:17:42.540
为我编程真正的本质

00:17:40.800 --> 00:17:45.390
函数式编程的确是

00:17:42.540 --> 00:17:46.950
功能组成和位置

00:17:45.390 --> 00:17:48.960
如此评价

00:17:46.950 --> 00:17:51.210
如果我们可以实现功能组合

00:17:48.960 --> 00:17:52.920
懒惰的评估好，那么我们可以

00:17:51.210 --> 00:17:54.510
更有效地利用

00:17:52.920 --> 00:17:56.100
社交功能编程

00:17:54.510 --> 00:17:59.130
编程方式带我们一路走

00:17:56.100 --> 00:18:01.140
到苦难在这里，你走了，我们得到了

00:17:59.130 --> 00:18:03.030
懒惰给你，我们有功能

00:18:01.140 --> 00:18:05.340
合成和反应式编程

00:18:03.030 --> 00:18:07.170
带您从那里出发并说好

00:18:05.340 --> 00:18:09.360
现在您可以使用功能

00:18:07.170 --> 00:18:12.060
组成，你可能会懒惰

00:18:09.360 --> 00:18:13.860
评估让我们利用这些想法来

00:18:12.060 --> 00:18:16.200
前进就是这些想法

00:18:13.860 --> 00:18:18.960
从那里来，这带我们去的是

00:18:16.200 --> 00:18:21.660
我们是可以观察到的，所以可以观察到的是

00:18:18.960 --> 00:18:23.760
好吧，这是可观察的模式，但是

00:18:21.660 --> 00:18:25.490
首先有一定的区别

00:18:23.760 --> 00:18:28.740
您将要提取数据吗

00:18:25.490 --> 00:18:30.780
在迭代器中，而可观察的

00:18:28.740 --> 00:18:32.270
数据被推向您

00:18:30.780 --> 00:18:35.250
可以是同步的或异步的

00:18:32.270 --> 00:18:36.990
很多时候推动同步

00:18:35.250 --> 00:18:39.660
在游戏中太早了

00:18:36.990 --> 00:18:41.850
使应用程序极其复杂

00:18:39.660 --> 00:18:44.610
并努力与美丽的人一起工作

00:18:41.850 --> 00:18:47.310
这个区域可以推迟吗？ 

00:18:44.610 --> 00:18:49.230
将那些推迟到以后

00:18:47.310 --> 00:18:51.030
观察者确实有几个

00:18:49.230 --> 00:18:53.190
做出不同有趣的事情

00:18:51.030 --> 00:18:56.250
这首先发生在我们身上

00:18:53.190 --> 00:18:59.430
可观察的是

00:18:56.250 --> 00:19:01.380
数据集通道和熊通道是

00:18:59.430 --> 00:19:03.990
通过这些数据可以保持实力

00:19:01.380 --> 00:19:05.760
向您发射或传播，但

00:19:03.990 --> 00:19:07.710
出现问题时我们该怎么办

00:19:05.760 --> 00:19:09.750
好吧，你想做的事情出了问题

00:19:07.710 --> 00:19:11.910
处理错误，但最糟糕的事情

00:19:09.750 --> 00:19:13.650
关于错误，我们称它们为异常

00:19:11.910 --> 00:19:15.210
也许您应该称他们为正常

00:19:13.650 --> 00:19:17.610
因为它们可以随时发生

00:19:15.210 --> 00:19:20.700
所以不要在抛出异常

00:19:17.610 --> 00:19:24.150
你观察者有一个单独的渠道

00:19:20.700 --> 00:19:26.820
对于错误本身生病的等待

00:19:24.150 --> 00:19:29.130
有一个数据通道，有一个

00:19:26.820 --> 00:19:30.990
错误通道数据通道具有

00:19:29.130 --> 00:19:33.240
错误通道中的数据有错误

00:19:30.990 --> 00:19:35.190
当然任何时候都有错误

00:19:33.240 --> 00:19:36.930
到错误通道不会有

00:19:35.190 --> 00:19:38.820
他们的渠道有更多数据

00:19:36.930 --> 00:19:41.010
这是让你知道的方式

00:19:38.820 --> 00:19:42.660
这是有错误的，当然

00:19:41.010 --> 00:19:44.340
您对错误的回应不是

00:19:42.660 --> 00:19:46.290
将会向您推送更多数据

00:19:44.340 --> 00:19:48.000
有点像断路器模型

00:19:46.290 --> 00:19:50.490
我当然提到过

00:19:48.000 --> 00:19:52.800
同步或异步让我们来

00:19:50.490 --> 00:19:55.440
看看这些东西如何演变

00:19:52.800 --> 00:19:58.800
这里有个简单的小例子

00:19:55.440 --> 00:20:00.429
想在这里做的是我有符号作为

00:19:58.800 --> 00:20:03.759
在这里收藏所以我

00:20:00.429 --> 00:20:06.700
说股票服务器，我去说得到

00:20:03.759 --> 00:20:08.830
在这里喂食，我将传递符号

00:20:06.700 --> 00:20:10.480
给我们的get feed方法

00:20:08.830 --> 00:20:13.210
好吧，获取提要当然

00:20:10.480 --> 00:20:15.820
向我们提供即将发生的数据

00:20:13.210 --> 00:20:17.529
但是我们必须以某种方式很好地实施它

00:20:15.820 --> 00:20:20.049
原来有几个

00:20:17.529 --> 00:20:22.179
可用的实现

00:20:20.049 --> 00:20:24.789
 Java上的反应式编程没有

00:20:22.179 --> 00:20:26.499
一种解决方案，您可以使用其中任何一种

00:20:24.789 --> 00:20:29.019
我将要介绍的不同解决方案

00:20:26.499 --> 00:20:31.179
使用其中之一是rx Java 

00:20:29.019 --> 00:20:32.679
是由Netflix实施的

00:20:31.179 --> 00:20:33.820
他们有一些尖叫的问题要解决

00:20:32.679 --> 00:20:36.129
因此，他们决定开源

00:20:33.820 --> 00:20:38.350
他们的解决方案，但想法很漂亮

00:20:36.129 --> 00:20:40.240
几乎一样的APS略有

00:20:38.350 --> 00:20:41.919
在这里和那里不同，但你可以

00:20:40.240 --> 00:20:44.100
走开，在其他一些地方使用

00:20:41.919 --> 00:20:46.990
图书馆，如果你想但是想法

00:20:44.100 --> 00:20:48.940
可观察的东西在

00:20:46.990 --> 00:20:51.850
这个，我要说的是

00:20:48.940 --> 00:20:54.309
股票信息是我真正想要使用的

00:20:51.850 --> 00:20:57.009
在这里，我从一个可观察的

00:20:54.309 --> 00:20:59.230
如您所见，可以观察到

00:20:57.009 --> 00:21:01.809
从I / O点反应式X开始

00:20:59.230 --> 00:21:03.879
可观察的，那么我该如何去创造

00:21:01.809 --> 00:21:05.590
可以观察到的我将如何使用

00:21:03.879 --> 00:21:07.840
只需几分钟即可回到该部分

00:21:05.590 --> 00:21:10.240
所以我们将移到这边

00:21:07.840 --> 00:21:12.129
好吧，现在我有一个可观察的

00:21:10.240 --> 00:21:14.409
我要说的就是饲料

00:21:12.129 --> 00:21:17.740
然后我当然会说

00:21:14.409 --> 00:21:19.809
可以观察到，我也可以观察到

00:21:17.740 --> 00:21:21.279
在我的手边，但我想继续做

00:21:19.809 --> 00:21:23.200
可观察的东西没有

00:21:21.279 --> 00:21:25.629
做到了这一点，我们将回到

00:21:23.200 --> 00:21:29.169
等一下我回到这里

00:21:25.629 --> 00:21:32.049
会说可观察到的黑暗创造和

00:21:29.169 --> 00:21:33.879
这使用了我们不想要的想法

00:21:32.049 --> 00:21:35.740
构造函数，但我们将使用工厂

00:21:33.879 --> 00:21:37.269
创建对象的方法

00:21:35.740 --> 00:21:39.610
眼见为实创造

00:21:37.269 --> 00:21:42.580
该对象，所以在这种情况下，我要

00:21:39.610 --> 00:21:44.559
得到一个订户给我， 

00:21:42.580 --> 00:21:47.860
我要继续往前走

00:21:44.559 --> 00:21:51.369
订阅者原样保留一些数据

00:21:47.860 --> 00:21:53.710
发生了，所以我们需要一个发射方法

00:21:51.369 --> 00:21:55.809
能够现在使用它，所以

00:21:53.710 --> 00:21:58.899
可观察的被创造可观察的

00:21:55.809 --> 00:22:01.090
给你一个参考，可观察的是

00:21:58.899 --> 00:22:03.249
只是我们的数据流哦，等等

00:22:01.090 --> 00:22:04.570
分钟，让我们快速谈谈什么是

00:22:03.249 --> 00:22:08.259
可观察与

00:22:04.570 --> 00:22:10.509
我们知道的Java 8流

00:22:08.259 --> 00:22:12.519
有几个非常关键的明确

00:22:10.509 --> 00:22:14.320
他们俩之间的差异很好

00:22:12.519 --> 00:22:16.870
 Java 8和

00:22:14.320 --> 00:22:18.669
可以观察到我们的数据发射器

00:22:16.870 --> 00:22:22.179
两者都会向您发射数据

00:22:18.669 --> 00:22:25.000
但是Java帮助中的流API却没有

00:22:22.179 --> 00:22:26.950
处理上帝所有的例外

00:22:25.000 --> 00:22:28.840
另一方面，可观察对象有一个

00:22:26.950 --> 00:22:30.850
明确区分数据通道和错误

00:22:28.840 --> 00:22:33.250
渠道，让他们有更好的

00:22:30.850 --> 00:22:35.200
处理异常或错误

00:22:33.250 --> 00:22:37.750
你和第二件事当然是

00:22:35.200 --> 00:22:39.669
他们俩当然很懒

00:22:37.750 --> 00:22:41.559
他们可以随时发送数据

00:22:39.669 --> 00:22:43.960
他们会向您推送数据

00:22:41.559 --> 00:22:45.820
但是他们处理数据的方式之一是

00:22:43.960 --> 00:22:47.860
这些差异，如果你会如何

00:22:45.820 --> 00:22:49.750
他们会处理这样的事情

00:22:47.860 --> 00:22:51.070
情况下，我要创建一个发射方法

00:22:49.750 --> 00:22:53.019
然后我要使用的emmett方法

00:22:51.070 --> 00:22:55.720
继续说这将是

00:22:53.019 --> 00:22:57.909
接收订户，这将

00:22:55.720 --> 00:23:00.460
发出数据，所以我要说开始

00:22:57.909 --> 00:23:02.559
散布在这里，所以我们实际上可以

00:23:00.460 --> 00:23:04.570
也可以看到特定的方法调用

00:23:02.559 --> 00:23:06.190
但是马上就开始吧， 

00:23:04.570 --> 00:23:08.139
运行这个，看看它会做什么

00:23:06.190 --> 00:23:10.389
你会看到它说上帝

00:23:08.139 --> 00:23:13.419
可以观察到，但是它什么也没做

00:23:10.389 --> 00:23:16.960
只是为了强调事实， 

00:23:13.419 --> 00:23:20.529
绝对是懒惰，所以它不会

00:23:16.960 --> 00:23:22.960
做任何工作，直到您真正需要

00:23:20.529 --> 00:23:25.029
连接到它，说我真的

00:23:22.960 --> 00:23:27.340
准备处理您的数据

00:23:25.029 --> 00:23:30.309
真正开始发出任何数据的是

00:23:27.340 --> 00:23:32.110
现在我们在这里懒惰好了

00:23:30.309 --> 00:23:34.210
为什么我们不继续做某事

00:23:32.110 --> 00:23:37.899
与数据，所以我要去

00:23:34.210 --> 00:23:40.360
喂并说订阅，现在我可以说

00:23:37.899 --> 00:23:42.580
倾盆大雨，所以在这种情况下，我会简单地

00:23:40.360 --> 00:23:45.129
说系统点出打印行，我会

00:23:42.580 --> 00:23:47.139
在这种情况下只需打印数据即可

00:23:45.129 --> 00:23:49.210
我们可以看到正在传输的数据

00:23:47.139 --> 00:23:51.700
当然在这种情况下

00:23:49.210 --> 00:23:53.230
我仍然没有发出任何数据，所以当

00:23:51.700 --> 00:23:55.690
我继续运行此代码，尽管你

00:23:53.230 --> 00:23:57.580
可以看到它说上帝可以观察到它说

00:23:55.690 --> 00:23:59.470
开始发射数据，但开始

00:23:57.580 --> 00:24:01.750
发出数据确实发生了，因为我们

00:23:59.470 --> 00:24:03.759
真正订阅数据

00:24:01.750 --> 00:24:06.039
现在我要在这里做的是

00:24:03.759 --> 00:24:08.710
回到这个发射器，我要

00:24:06.039 --> 00:24:12.190
说到这一点，为什么我们不说

00:24:08.710 --> 00:24:14.889
在这种情况下是一会儿，然后我

00:24:12.190 --> 00:24:17.350
说得好，我们得到了订户

00:24:14.889 --> 00:24:19.750
在我们手上，但我也喜欢

00:24:17.350 --> 00:24:21.519
也给我符号，因为

00:24:19.750 --> 00:24:23.470
毕竟有非常有用

00:24:21.519 --> 00:24:26.019
所以在这种情况下，我将通过

00:24:23.470 --> 00:24:28.179
像第二个这样的符号

00:24:26.019 --> 00:24:30.580
参数，所以我现在可以说

00:24:28.179 --> 00:24:33.309
现在在这里，他们有了符号

00:24:30.580 --> 00:24:35.590
在我手上，我会说符号doc，然后

00:24:33.309 --> 00:24:37.749
我会继续说我将使用流

00:24:35.590 --> 00:24:39.970
 Java 8流，这纯粹是

00:24:37.749 --> 00:24:41.950
那么此时的实现细节

00:24:39.970 --> 00:24:44.860
我要说数学，我要说股票

00:24:41.950 --> 00:24:46.960
信息，我会很好地调用fetch方法

00:24:44.860 --> 00:24:49.269
股票信息的获取方法正在发展

00:24:46.960 --> 00:24:51.220
出去获取股票价格解析

00:24:49.269 --> 00:24:53.590
数据并将其作为库存返还

00:24:51.220 --> 00:24:55.779
信息，然后一旦我有了数据，我就

00:24:53.590 --> 00:24:58.629
在这种情况下，每个人都会说

00:24:55.779 --> 00:25:02.080
如果您给我股票信息，我将

00:24:58.629 --> 00:25:05.379
在下一步说订户点并发送

00:25:02.080 --> 00:25:08.529
股票信息到特定的哎呀错误

00:25:05.379 --> 00:25:10.840
一个，在那种情况下，我会说股票信息

00:25:08.529 --> 00:25:13.059
然后我要说股票

00:25:10.840 --> 00:25:15.549
信息，我将继续发送

00:25:13.059 --> 00:25:17.710
此对象的库存信息

00:25:15.549 --> 00:25:19.899
在这种情况下很好的一点

00:25:17.710 --> 00:25:22.480
当然，地图将返回一个

00:25:19.899 --> 00:25:26.139
库存信息，我们可以接收库存

00:25:22.480 --> 00:25:28.360
信息并将其传递给订户

00:25:26.139 --> 00:25:31.480
这一点或者我们可以简单地使用

00:25:28.360 --> 00:25:33.879
 Java八种语法，说得好，我们

00:25:31.480 --> 00:25:36.399
可以在此简单地使用双冒号

00:25:33.879 --> 00:25:38.230
但重点在于

00:25:36.399 --> 00:25:40.389
的语法，你可以认为这是一个

00:25:38.230 --> 00:25:42.100
您所在的数据通道口

00:25:40.389 --> 00:25:44.409
开始通过数据发射数据

00:25:42.100 --> 00:25:46.090
可观察的通道，当然

00:25:44.409 --> 00:25:48.549
现在您正在从

00:25:46.090 --> 00:25:51.190
在这里数据应该到达此

00:25:48.549 --> 00:25:53.769
 Java本身执行其他操作

00:25:51.190 --> 00:25:55.480
在一个特定的JVM中，但是如果您

00:25:53.769 --> 00:25:57.669
真的很想去看一下红豆的

00:25:55.480 --> 00:25:59.980
还有其他解决方案之一

00:25:57.669 --> 00:26:03.159
顶点就是这个例子

00:25:59.980 --> 00:26:04.419
实际使用rx Java API但包装和

00:26:03.159 --> 00:26:06.669
使您能够穿越

00:26:04.419 --> 00:26:08.710
机器，所以您可以使用其中之一

00:26:06.669 --> 00:26:10.869
这些不同的解决方案

00:26:08.710 --> 00:26:13.389
如您所见，这正在

00:26:10.869 --> 00:26:15.519
数据，Google几乎与

00:26:13.389 --> 00:26:17.110
狮子座把我们指给我们，谢谢狮子座

00:26:15.519 --> 00:26:19.179
但您可以看到数据是

00:26:17.110 --> 00:26:21.340
到了这一点，但这仅仅是

00:26:19.179 --> 00:26:23.590
为我们传输数据，我们正在

00:26:21.340 --> 00:26:25.360
接收数据，所以什么是

00:26:23.590 --> 00:26:26.679
这会导致我们走向何方

00:26:25.360 --> 00:26:29.080
我们是同步解决方案

00:26:26.679 --> 00:26:31.389
传输数据，但我们真正在哪里

00:26:29.080 --> 00:26:33.909
想从这里走是一种能力

00:26:31.389 --> 00:26:35.860
与系统互动并

00:26:33.909 --> 00:26:39.279
跨这些不同的沟通

00:26:35.860 --> 00:26:41.389
端点，所以在这里想象你有一个

00:26:39.279 --> 00:26:43.369
可观察到的发送数据到你的单词

00:26:41.389 --> 00:26:46.429
但是有时候我们应该

00:26:43.369 --> 00:26:48.739
非常注意可观察的资源

00:26:46.429 --> 00:26:51.079
来源正在使用资源与之交谈

00:26:48.739 --> 00:26:53.690
您和您正在使用资源来

00:26:51.079 --> 00:26:55.729
以及接收数据，如果

00:26:53.690 --> 00:26:57.709
没有更多数据向您发送

00:26:55.729 --> 00:27:00.019
有人告诉我那里很高兴

00:26:57.709 --> 00:27:01.279
没有更多的数据向您迈进

00:27:00.019 --> 00:27:03.169
这是我说的两个

00:27:01.279 --> 00:27:05.149
渠道很好，我对你撒谎

00:27:03.169 --> 00:27:06.709
有三个频道有一个数据

00:27:05.149 --> 00:27:08.659
数据通道

00:27:06.709 --> 00:27:10.039
通过错误通道

00:27:08.659 --> 00:27:12.169
通过它可能会发生错误

00:27:10.039 --> 00:27:13.759
并且有一个完整的渠道

00:27:12.169 --> 00:27:15.679
哪个信号完成

00:27:13.759 --> 00:27:18.499
通过观察者的方式

00:27:15.679 --> 00:27:20.089
通常工作可能是零

00:27:18.499 --> 00:27:21.919
或来自数据的更多数据

00:27:20.089 --> 00:27:23.929
频道，所以想像那里有数据

00:27:21.919 --> 00:27:25.429
通过数据通道到达

00:27:23.929 --> 00:27:28.249
任何时候它会告诉你

00:27:25.429 --> 00:27:30.529
没有更多的数据，它将发送一个

00:27:28.249 --> 00:27:32.059
完成信号及其发送的分钟

00:27:30.529 --> 00:27:34.070
完整的信号数据通道

00:27:32.059 --> 00:27:35.809
关闭，将没有更多数据

00:27:34.070 --> 00:27:38.119
顺利通过数据通道

00:27:35.809 --> 00:27:40.700
只是为了说明这一点，让我走

00:27:38.119 --> 00:27:43.489
回到这里这段代码，并在此说

00:27:40.700 --> 00:27:46.039
假设计数少于我们

00:27:43.489 --> 00:27:48.979
说三个，然后我就开始

00:27:46.039 --> 00:27:50.929
计数等于零，在这种情况下

00:27:48.979 --> 00:27:53.509
让我们继续增加这个数量

00:27:50.929 --> 00:27:54.739
为了我们的目的，然后到最后

00:27:53.509 --> 00:27:57.979
我要说继续说

00:27:54.739 --> 00:28:01.309
下一个订阅者，然后发送新

00:27:57.979 --> 00:28:04.519
股票信息让我们继续说信息

00:28:01.309 --> 00:28:06.950
的虚拟，然后零点零作为

00:28:04.519 --> 00:28:08.749
价格只是你知道的说明

00:28:06.950 --> 00:28:10.729
指出这些渠道的方式

00:28:08.749 --> 00:28:12.619
实际工作，所以当我运行此代码

00:28:10.729 --> 00:28:14.359
您可以看到正在发送数据

00:28:12.619 --> 00:28:15.919
至此，数据将是

00:28:14.359 --> 00:28:17.239
从服务看起来像拉

00:28:15.919 --> 00:28:20.179
也许当连接有点慢

00:28:17.239 --> 00:28:21.649
在这里，所以它没有回应哦，你去

00:28:20.179 --> 00:28:23.599
所以它开始运动好极了

00:28:21.649 --> 00:28:25.219
好慢，现在我们可以看到

00:28:23.599 --> 00:28:27.229
最终是一个虚拟零点零

00:28:25.219 --> 00:28:29.929
但另一方面，我要去

00:28:27.229 --> 00:28:31.669
回到这里，在这末尾

00:28:29.929 --> 00:28:34.070
我要继续说订户

00:28:31.669 --> 00:28:36.709
点完成后，我将发送一个

00:28:34.070 --> 00:28:38.809
接收时信号完整

00:28:36.709 --> 00:28:41.209
结束，我要继续添加一个

00:28:38.809 --> 00:28:43.249
现在我还要说系统

00:28:41.209 --> 00:28:44.989
点出打印线会担心吗

00:28:43.249 --> 00:28:47.450
几分钟后这是什么，但我

00:28:44.989 --> 00:28:49.609
会说我什么也没收到

00:28:47.450 --> 00:28:53.329
我将简单地完成输出

00:28:49.609 --> 00:28:55.010
这是最后一口井，如果

00:28:53.329 --> 00:28:57.560
你看这些东西

00:28:55.010 --> 00:28:59.300
三行真的是三行

00:28:57.560 --> 00:29:01.340
我们正在谈论的不同的事情

00:28:59.300 --> 00:29:03.260
关于第一行是您的数据

00:29:01.340 --> 00:29:05.210
引导第二行是您的错误

00:29:03.260 --> 00:29:07.400
频道和第三行是您的

00:29:05.210 --> 00:29:09.020
完整的频道，所以有一种方法

00:29:07.400 --> 00:29:11.060
您将接收以下三个数据之一

00:29:09.020 --> 00:29:13.190
为您提供渠道，因此您可以

00:29:11.060 --> 00:29:15.020
接收数据到数据通道编辑

00:29:13.190 --> 00:29:16.550
通过错误通道

00:29:15.020 --> 00:29:19.070
完整信号到完整通道

00:29:16.550 --> 00:29:21.560
但在某种意义上，尽管注意我

00:29:19.070 --> 00:29:23.990
在最后把一个假人放出来

00:29:21.560 --> 00:29:25.460
完成，但请记住，一旦他们

00:29:23.990 --> 00:29:27.920
完整的信号来自数据通道

00:29:25.460 --> 00:29:30.290
关闭，这就是为什么在此输出中

00:29:27.920 --> 00:29:32.210
你注意到它说完成了，但是从来没有

00:29:30.290 --> 00:29:34.160
收到虚拟输出

00:29:32.210 --> 00:29:36.980
那是因为分钟完成了

00:29:34.160 --> 00:29:39.050
发送了数据通道关闭的信号

00:29:36.980 --> 00:29:41.270
上升，这变得纯粹，没有上升

00:29:39.050 --> 00:29:43.340
它永远不会离开可观察的

00:29:41.270 --> 00:29:45.710
去客户那里，当然

00:29:43.340 --> 00:29:48.200
观察者或客户或订户

00:29:45.710 --> 00:29:50.480
可以在那里进行清理操作

00:29:48.200 --> 00:29:52.820
这使您知道如何发送

00:29:50.480 --> 00:29:56.630
从订户到

00:29:52.820 --> 00:29:58.550
观察者可以观察到并说

00:29:56.630 --> 00:30:01.430
我做完了，但是反过来呢

00:29:58.550 --> 00:30:05.180
周围有时候你想

00:30:01.430 --> 00:30:07.580
也取消订阅，例如，如果我

00:30:05.180 --> 00:30:10.520
继续说给我所有的股票

00:30:07.580 --> 00:30:12.440
符号和价格及观察

00:30:10.520 --> 00:30:14.990
将开始向我传输数据

00:30:12.440 --> 00:30:17.570
但在某个时候我意识到

00:30:14.990 --> 00:30:20.030
股票是我想要的最优惠的价格

00:30:17.570 --> 00:30:22.100
进行交易，我不再想要

00:30:20.030 --> 00:30:24.590
我很好地从服务器获取数据

00:30:22.100 --> 00:30:26.750
可以发送退订并说谢谢

00:30:24.590 --> 00:30:28.940
但不用了，谢谢，不要再寄给我

00:30:26.750 --> 00:30:31.070
数据，因此为

00:30:28.940 --> 00:30:33.080
您取消订阅源，并且

00:30:31.070 --> 00:30:36.140
说不要打扰发送给我

00:30:33.080 --> 00:30:38.630
再这样，在这种情况下，您可以做什么

00:30:36.140 --> 00:30:40.670
您可以取消订阅吗

00:30:38.630 --> 00:30:42.950
好吧，我们可以做更多的事情

00:30:40.670 --> 00:30:45.290
为此工作，我们可以在

00:30:42.950 --> 00:30:49.430
这种情况下，我们可以继续构建

00:30:45.290 --> 00:30:52.010
新的，我们可以说观察我们会

00:30:49.430 --> 00:30:54.530
称其为我可观察的，所以我可以

00:30:52.010 --> 00:30:57.260
在这里创建我自己的可观察的

00:30:54.530 --> 00:31:00.950
观察者而不是我可以创建自己的观察者

00:30:57.260 --> 00:31:04.160
观察者，当然我有我的

00:31:00.950 --> 00:31:06.530
观察者，这个观察者当然可以

00:31:04.160 --> 00:31:08.850
实现某些方法

00:31:06.530 --> 00:31:11.309
开始观察所需

00:31:08.850 --> 00:31:13.200
所以我们可以实现一堆方法

00:31:11.309 --> 00:31:15.690
在这个观察者身上

00:31:13.200 --> 00:31:17.880
这个观察者当然会

00:31:15.690 --> 00:31:19.620
支持这个的界面

00:31:17.880 --> 00:31:21.899
订户期望哪个

00:31:19.620 --> 00:31:24.990
观察者，所以我们可以继续创造

00:31:21.899 --> 00:31:27.630
这里有一小堂课，所以我们可以说

00:31:24.990 --> 00:31:30.539
新的可观察井观察者示例

00:31:27.630 --> 00:31:32.070
相反，然后我们可以说我想

00:31:30.539 --> 00:31:34.590
实现这个家伙的方法

00:31:32.070 --> 00:31:37.409
期待如此，让我们重做这个权利

00:31:34.590 --> 00:31:40.740
在这里，所以我们可以说订阅艺术订阅

00:31:37.409 --> 00:31:42.690
您将其称为观察者， 

00:31:40.740 --> 00:31:45.059
那么这将是股票信息

00:31:42.690 --> 00:31:46.980
我们想去的观察者

00:31:45.059 --> 00:31:48.509
提前在这种情况下很好地实施

00:31:46.980 --> 00:31:50.370
当然我们要实现这些

00:31:48.509 --> 00:31:52.379
这些方法是什么

00:31:50.370 --> 00:31:54.299
我将为此实现

00:31:52.379 --> 00:31:56.879
目的很好，我要实施

00:31:54.299 --> 00:31:59.399
接下来我们看到的是

00:31:56.879 --> 00:32:02.669
较早，所以这将很简单

00:31:59.399 --> 00:32:04.590
我要回复的库存信息

00:32:02.669 --> 00:32:05.789
所以这将成为我的一部分

00:32:04.590 --> 00:32:08.370
我在这里犯了一个错误

00:32:05.789 --> 00:32:10.320
信息，所以这是一个股票信息

00:32:08.370 --> 00:32:12.840
那是观察者要回到的

00:32:10.320 --> 00:32:15.899
我们，所以我们可以简单地说我要

00:32:12.840 --> 00:32:18.240
接收库存信息，这种情况下

00:32:15.899 --> 00:32:20.370
当然我要说打印出来

00:32:18.240 --> 00:32:22.919
库存信息，所以我只打印库存

00:32:20.370 --> 00:32:25.049
给我的信息我也可以打印

00:32:22.919 --> 00:32:27.269
完整的信号就在这里，忽略

00:32:25.049 --> 00:32:30.090
暂时的错误，当然我可以

00:32:27.269 --> 00:32:32.789
说现在完成，但我也可以做一个

00:32:30.090 --> 00:32:35.690
比方说更多

00:32:32.789 --> 00:32:39.629
接下来我可以说股票信息点

00:32:35.690 --> 00:32:43.139
值比不说哦

00:32:39.629 --> 00:32:47.009
说40美元，我们可以立即说

00:32:43.139 --> 00:32:49.710
输出您知道取消订阅的信息，因此我们

00:32:47.009 --> 00:32:51.870
可以说退订，我们可以

00:32:49.710 --> 00:32:53.879
然后发送要求退订的请求

00:32:51.870 --> 00:32:56.399
我们如何才能做到这一点，我们

00:32:53.879 --> 00:32:59.610
可以说在这种情况下，我们正在收到

00:32:56.399 --> 00:33:02.190
一次性的，所以我会继续

00:32:59.610 --> 00:33:04.649
存放在这里作为一次性和

00:33:02.190 --> 00:33:06.990
我们将其存储到变量中

00:33:04.649 --> 00:33:09.090
一次性等于给定的一次性

00:33:06.990 --> 00:33:12.179
然后我们可以很好地回到这里

00:33:09.090 --> 00:33:14.129
说一次性飞镖，然后我们

00:33:12.179 --> 00:33:16.590
可以处理掉，说不要打扰

00:33:14.129 --> 00:33:18.149
向我发送更多数据，以便我们可以看到

00:33:16.590 --> 00:33:19.350
数据传输开始

00:33:18.149 --> 00:33:21.210
取决于互联网的运行状况

00:33:19.350 --> 00:33:22.500
很好地发送数据

00:33:21.210 --> 00:33:25.320
到达中间位

00:33:22.500 --> 00:33:26.970
少于40，我们可以取消订阅

00:33:25.320 --> 00:33:29.460
走了，我们不会再得到任何东西

00:33:26.970 --> 00:33:31.260
数据向前发展就是一个例子

00:33:29.460 --> 00:33:34.200
我们如何继续和退订

00:33:31.260 --> 00:33:37.020
从任何给定时间的通话中

00:33:34.200 --> 00:33:39.720
观察者可以说不要打扰

00:33:37.020 --> 00:33:41.970
任何更多的数据给我，他们

00:33:39.720 --> 00:33:44.460
可以非常注意资源

00:33:41.970 --> 00:33:45.900
服务器也将很好地使用

00:33:44.460 --> 00:33:47.880
让我们知道如何

00:33:45.900 --> 00:33:49.920
处理它，但是

00:33:47.880 --> 00:33:50.610
房间当然是您如何处理

00:33:49.920 --> 00:33:52.890
错误

00:33:50.610 --> 00:33:55.500
错误是极端的东西

00:33:52.890 --> 00:33:58.050
重要的是要妥善处理

00:33:55.500 --> 00:34:00.270
换句话说，当事情发生时会发生什么

00:33:58.050 --> 00:34:01.860
出问题时会做好事

00:34:00.270 --> 00:34:04.080
想象你在多线程上

00:34:01.860 --> 00:34:06.660
应用程序并在多线程中

00:34:04.080 --> 00:34:08.820
出现问题时的应用程序

00:34:06.660 --> 00:34:10.230
希望能够知道发生了什么

00:34:08.820 --> 00:34:12.600
错误，您希望能够处理

00:34:10.230 --> 00:34:14.669
当你有上千个线程的时候

00:34:12.600 --> 00:34:17.040
如果多个线程开始失败

00:34:14.669 --> 00:34:18.360
没有真正好的交流方式

00:34:17.040 --> 00:34:20.850
所有信息都是多线程的

00:34:18.360 --> 00:34:22.679
情况变得很难工作

00:34:20.850 --> 00:34:25.169
有了它，我们在这里要做的

00:34:22.679 --> 00:34:26.909
相反，异常处理是

00:34:25.169 --> 00:34:28.710
我们真正挣扎的东西

00:34:26.909 --> 00:34:30.960
始终无视历史

00:34:28.710 --> 00:34:34.020
计算良好，我们做了很长时间

00:34:30.960 --> 00:34:36.810
前段时间，我们说我们要返回一个

00:34:34.020 --> 00:34:39.240
如果结果为正，则为

00:34:36.810 --> 00:34:41.310
好的数据，如果结果为负，则为

00:34:39.240 --> 00:34:43.139
一个错误，然后我们意识到天哪

00:34:41.310 --> 00:34:45.149
没有意义，因为数据

00:34:43.139 --> 00:34:47.040
可能为负-然后我们尝试

00:34:45.149 --> 00:34:50.550
这是其他的日子

00:34:47.040 --> 00:34:53.550
 80年代，如果

00:34:50.550 --> 00:34:55.860
它为零，如果不为零，则很好

00:34:53.550 --> 00:34:58.140
这是一个错误，很棒

00:34:55.860 --> 00:35:00.630
但是请稍等一下数据哦

00:34:58.140 --> 00:35:02.550
将发送一个额外的参数给

00:35:00.630 --> 00:35:04.650
函数该函数将填充

00:35:02.550 --> 00:35:07.200
参数与数据并返回

00:35:04.650 --> 00:35:08.880
你让我们变得很笨拙

00:35:07.200 --> 00:35:10.950
使用和您必须要犯的错误之一

00:35:08.880 --> 00:35:12.960
处理的是功能忘记了

00:35:10.950 --> 00:35:15.240
首先填充数据

00:35:12.960 --> 00:35:17.370
休斯敦忘记发送适当的持有人

00:35:15.240 --> 00:35:19.770
因为那还不错，进展并不顺利

00:35:17.370 --> 00:35:22.050
然后我们做了什么，我们说我们要去

00:35:19.770 --> 00:35:24.120
做异常处理

00:35:22.050 --> 00:35:26.550
处理很棒是不是因为

00:35:24.120 --> 00:35:28.740
函数可能会引发异常，而您

00:35:26.550 --> 00:35:31.470
可以简单地忽略它

00:35:28.740 --> 00:35:33.450
可以让我沮丧的缓存块

00:35:31.470 --> 00:35:34.820
告诉你一个星期不走，当我

00:35:33.450 --> 00:35:37.460
向程序员恳求

00:35:34.820 --> 00:35:39.260
请没有空帽子阻止没有

00:35:37.460 --> 00:35:41.330
一切都很好，还有另一个

00:35:39.260 --> 00:35:43.940
当事情出了问题的时候

00:35:41.330 --> 00:35:46.550
碰巧会向您抛出异常

00:35:43.940 --> 00:35:48.170
你感觉如何文明

00:35:46.550 --> 00:35:50.270
当人们向你扔东西

00:35:48.170 --> 00:35:52.910
好了，后期编程非常

00:35:50.270 --> 00:35:55.970
民间的，对你没有任何影响

00:35:52.910 --> 00:35:57.830
它会给您错误并在这里说您

00:35:55.970 --> 00:35:59.600
去握手吧，说我们会

00:35:57.830 --> 00:36:01.700
对此保持谦虚是其中之一

00:35:59.600 --> 00:36:03.260
真的很不错的事情

00:36:01.700 --> 00:36:05.480
例外，但它给你

00:36:03.260 --> 00:36:07.700
通过错误通道的异常

00:36:05.480 --> 00:36:09.770
非常高兴让我们看看它是如何工作的

00:36:07.700 --> 00:36:11.990
实际上在这个例子中，所以我要

00:36:09.770 --> 00:36:14.300
继续说系统熄灭， 

00:36:11.990 --> 00:36:15.650
假设我们打印一个，我们知道

00:36:14.300 --> 00:36:17.570
这将是数据通道

00:36:15.650 --> 00:36:20.330
来，但我要说

00:36:17.570 --> 00:36:23.450
给定一个错误，我将继续输出

00:36:20.330 --> 00:36:27.290
错误在这里大写，然后我

00:36:23.450 --> 00:36:29.360
会在这里说加号，然后我会

00:36:27.290 --> 00:36:31.400
只是打印错误，然后最后

00:36:29.360 --> 00:36:33.740
这就是我们要说的输出数据

00:36:31.400 --> 00:36:36.620
只是说我们将要收到

00:36:33.740 --> 00:36:38.270
输出作为完整的信号

00:36:36.620 --> 00:36:39.560
当我在这种情况下运行此代码时

00:36:38.270 --> 00:36:41.630
当然你可以看到事情正在发展

00:36:39.560 --> 00:36:43.520
好吧，您正在获取数据， 

00:36:41.630 --> 00:36:46.520
最终你完成了，但另一方面

00:36:43.520 --> 00:36:49.010
假设我们在这种情况下

00:36:46.520 --> 00:36:51.290
继续增加这个，可以说

00:36:49.010 --> 00:36:54.830
 300分钟，但我要去

00:36:51.290 --> 00:36:57.770
我的股票信息以及在股票信息中的

00:36:54.830 --> 00:37:00.710
我要炸毁的随机时间

00:36:57.770 --> 00:37:03.320
老家伙遇到了麻烦，但请注意

00:37:00.710 --> 00:37:05.270
这将引发异常，但是

00:37:03.320 --> 00:37:08.150
这个家伙没有处理异常

00:37:05.270 --> 00:37:10.490
但是反应系统说是哦

00:37:08.150 --> 00:37:13.220
等一下你传送

00:37:10.490 --> 00:37:15.320
发射数据，而当你

00:37:13.220 --> 00:37:17.330
数据发射的来源

00:37:15.320 --> 00:37:20.090
出了错，事情发生了，我们不是

00:37:17.330 --> 00:37:22.490
只是简单地你知道扔

00:37:20.090 --> 00:37:26.060
我们将捕获该异常

00:37:22.490 --> 00:37:29.180
并作为错误发送给其他人

00:37:26.060 --> 00:37:31.730
错误是一等公民

00:37:29.180 --> 00:37:33.980
好吧，您不是在处理错误

00:37:31.730 --> 00:37:35.570
您正在治疗的次要事物

00:37:33.980 --> 00:37:37.790
他们应该得到应有的尊重

00:37:35.570 --> 00:37:39.470
数据应得的，这是其中之一

00:37:37.790 --> 00:37:41.750
不错的事情，所以当我跑步

00:37:39.470 --> 00:37:44.120
这次虽然注意这个程序

00:37:41.750 --> 00:37:46.250
开始发射数据，但请注意何时

00:37:44.120 --> 00:37:48.620
炸毁时确实出错了

00:37:46.250 --> 00:37:51.290
那个例外是

00:37:48.620 --> 00:37:53.690
抓住并注意到这个词

00:37:51.290 --> 00:37:56.750
错误出现的消息的前面

00:37:53.690 --> 00:37:58.940
从那里开始，而我例外

00:37:56.750 --> 00:38:01.340
真的把胸部碰到麻烦了

00:37:58.940 --> 00:38:02.690
这说明了该异常是如何结束的

00:38:01.340 --> 00:38:05.300
有被抓住

00:38:02.690 --> 00:38:07.340
但有礼貌地通过

00:38:05.300 --> 00:38:09.590
错误通道，您可以

00:38:07.340 --> 00:38:11.720
实际上，当

00:38:09.590 --> 00:38:13.340
错误确实从数据通道中出来

00:38:11.720 --> 00:38:15.110
关闭将没有更多数据

00:38:13.340 --> 00:38:16.910
进入数据通道，您可以

00:38:15.110 --> 00:38:19.250
正确处理和处理错误

00:38:16.910 --> 00:38:20.810
在你身边，这表明我们如何

00:38:19.250 --> 00:38:23.570
也可以处理错误

00:38:20.810 --> 00:38:25.970
很好，我想谈谈

00:38:23.570 --> 00:38:27.980
剩下的时间只是几件事

00:38:25.970 --> 00:38:30.380
我们有需要真正思考

00:38:27.980 --> 00:38:32.330
和我展示的其他注意事项一样

00:38:30.380 --> 00:38:35.270
你是一个相当简单的例子

00:38:32.330 --> 00:38:37.400
可观察到的观察者

00:38:35.270 --> 00:38:39.710
可观察的图像数据和观察者

00:38:37.400 --> 00:38:41.900
是正在使用数据

00:38:39.710 --> 00:38:43.400
传输，但通常有一个

00:38:41.900 --> 00:38:45.980
我们会做很多不同的事情

00:38:43.400 --> 00:38:47.870
通常想做，让我们继续前进， 

00:38:45.980 --> 00:38:50.180
暂时删除此错误，然后我们将

00:38:47.870 --> 00:38:52.340
在这种情况下，请继续

00:38:50.180 --> 00:38:53.900
当然，如果我运行要运行的程序

00:38:52.340 --> 00:38:56.480
开始传输数据

00:38:53.900 --> 00:38:58.220
正如你在这里看到的那样

00:38:56.480 --> 00:39:00.920
是您实际上可以做的事情

00:38:58.220 --> 00:39:04.490
例如有效地进行

00:39:00.920 --> 00:39:07.490
注意价格从$ 800不等

00:39:04.490 --> 00:39:10.130
一方面，你一直知道

00:39:07.490 --> 00:39:12.770
到$ 35等，但假设我是

00:39:10.130 --> 00:39:15.110
实际上只对某些感兴趣

00:39:12.770 --> 00:39:18.590
我有兴趣观察的价值观

00:39:15.110 --> 00:39:21.530
那我可以做的就是

00:39:18.590 --> 00:39:24.200
很好地使用这种方法来建立

00:39:21.530 --> 00:39:25.790
这些东西很好，例如

00:39:24.200 --> 00:39:27.440
如果您返回此代码，我将

00:39:25.790 --> 00:39:29.390
删除这些消息仅一分钟

00:39:27.440 --> 00:39:31.490
这样我们就可以看到数据

00:39:29.390 --> 00:39:33.500
通过这种情况，您可以看到

00:39:31.490 --> 00:39:35.150
一旦我打开它，我们将拥有

00:39:33.500 --> 00:39:37.100
数据通过并显示

00:39:35.150 --> 00:39:40.190
所有这些数据，我暂时将其停止

00:39:37.100 --> 00:39:42.080
但我能做的就是说好我

00:39:40.190 --> 00:39:44.420
不想看到您知道的所有数据

00:39:42.080 --> 00:39:46.580
想象一下你是

00:39:44.420 --> 00:39:48.500
处理你所在的情况

00:39:46.580 --> 00:39:50.960
看着设备

00:39:48.500 --> 00:39:52.700
传输数据而您不是

00:39:50.960 --> 00:39:53.510
对所有数据都感兴趣，让我们

00:39:52.700 --> 00:39:56.570
说一分钟

00:39:53.510 --> 00:39:59.840
我是一个可观察的人，我在散发

00:39:56.570 --> 00:40:02.060
不断的数据，在这里说狮子座

00:39:59.840 --> 00:40:04.190
是他感兴趣的观察者

00:40:02.060 --> 00:40:05.810
收到我发送的一些数据，但是

00:40:04.190 --> 00:40:07.940
过了一会儿他说你知道

00:40:05.810 --> 00:40:10.070
讨厌这很棒，但我不想

00:40:07.940 --> 00:40:12.320
你散发的一切，我只

00:40:10.070 --> 00:40:14.300
想要发送某些东西

00:40:12.320 --> 00:40:17.330
不幸的是没有其他事情

00:40:14.300 --> 00:40:19.640
我不想处理狮子座的要求

00:40:17.330 --> 00:40:21.080
好吧，不是我不在乎他，而是

00:40:19.640 --> 00:40:22.850
我们将使用一个技术术语

00:40:21.080 --> 00:40:24.770
这被称为凝聚力和单身

00:40:22.850 --> 00:40:26.690
我很好的责任原则

00:40:24.770 --> 00:40:28.280
要去做我要去做的事

00:40:26.690 --> 00:40:30.830
想开始自定义我的工作

00:40:28.280 --> 00:40:32.060
只是我的一位观察者，但是因为

00:40:30.830 --> 00:40:33.980
可能有人真的在乎

00:40:32.060 --> 00:40:35.600
我发送的所有邮件，我们该怎么办

00:40:33.980 --> 00:40:38.270
会有什么中介

00:40:35.600 --> 00:40:40.640
现在，这个中介说多莉

00:40:38.270 --> 00:40:43.730
关于这个，我要坐在狮子座之间

00:40:40.640 --> 00:40:45.980
还有这个可观察的venket 

00:40:43.730 --> 00:40:48.110
说我要开始过滤掉

00:40:45.980 --> 00:40:50.450
狮子座不关心的事情

00:40:48.110 --> 00:40:53.420
有一个非常强大的模型

00:40:50.450 --> 00:40:55.970
看到通知，我们在那里有提要，但是

00:40:53.420 --> 00:40:58.160
饲料实际上是正确的

00:40:55.970 --> 00:41:01.100
由get feed方法返回，但

00:40:58.160 --> 00:41:04.430
在这里我要说点过滤器

00:41:01.100 --> 00:41:07.220
我会在这里说股票信息

00:41:04.430 --> 00:41:10.070
那我就说这种情况下的股票信息

00:41:07.220 --> 00:41:14.360
我将从Ed获得的点值

00:41:10.070 --> 00:41:17.600
假设大于40，所以我们可以

00:41:14.360 --> 00:41:19.820
当观察到的时候马上说好

00:41:17.600 --> 00:41:20.390
将会开始向发射数据

00:41:19.820 --> 00:41:22.850
我

00:41:20.390 --> 00:41:26.060
我可以观察到的数据是

00:41:22.850 --> 00:41:28.490
发射，我可以开始过滤

00:41:26.060 --> 00:41:29.960
在这里发出的数据让我们

00:41:28.490 --> 00:41:32.480
看看为什么没有那么高兴

00:41:29.960 --> 00:41:35.750
所以我可以开始过滤，我可以说

00:41:32.480 --> 00:41:39.920
股票信息，然后我可以说股票信息

00:41:35.750 --> 00:41:42.440
点值大于$ 50 

00:41:39.920 --> 00:41:45.560
然后你可以说我要开始了

00:41:42.440 --> 00:41:47.900
发出数据，但仅当数据为

00:41:45.560 --> 00:41:49.910
我将仅发送数据

00:41:47.900 --> 00:41:52.970
比增加价值更大，现在不是

00:41:49.910 --> 00:41:55.850
美丽是你可以拿这个种子，但是

00:41:52.970 --> 00:41:59.090
您可以放置​​多个中介

00:41:55.850 --> 00:42:01.430
可以观察到上游的情况，但是

00:41:59.090 --> 00:42:04.250
他们自己成为观察者

00:42:01.430 --> 00:42:06.380
下游是什么，所以一方面

00:42:04.250 --> 00:42:08.600
另一方面，他们可以观察

00:42:06.380 --> 00:42:10.580
在下游也可以观察到

00:42:08.600 --> 00:42:14.020
他们可以开始过滤内容为

00:42:10.580 --> 00:42:15.650
您现在看不到任何价格都低于

00:42:14.020 --> 00:42:18.230
 $ 550 

00:42:15.650 --> 00:42:21.020
指出你也可以做其他事情

00:42:18.230 --> 00:42:22.490
以及您可能会说好的银行加回去

00:42:21.020 --> 00:42:25.250
如果你能给我们的话会很好

00:42:22.490 --> 00:42:28.670
价格上有一点折扣，所以我们可以

00:42:25.250 --> 00:42:30.860
现在说股票信息我们可以说股票信息

00:42:28.670 --> 00:42:33.590
我们可以提供股票信息塔

00:42:30.860 --> 00:42:35.870
股票报价，但我们可以接受给定的价格

00:42:33.590 --> 00:42:38.660
给我们的价值，然后我们可以

00:42:35.870 --> 00:42:41.600
说0.9，你开始得到10％ 

00:42:38.660 --> 00:42:44.120
价格折扣，因此您可以看到

00:42:41.600 --> 00:42:45.920
价格不再或低于$ 800 

00:42:44.120 --> 00:42:48.560
这样我们就可以拥有

00:42:45.920 --> 00:42:50.780
中介机构运作得很好，但是

00:42:48.560 --> 00:42:53.890
我们不仅可以做到这一点，还可以

00:42:50.780 --> 00:42:57.950
我们可以很好地说的情况

00:42:53.890 --> 00:43:01.040
我想接收数据但我不想要

00:42:57.950 --> 00:43:02.660
想要被很多数据困扰

00:43:01.040 --> 00:43:06.470
你可以说些什么

00:43:02.660 --> 00:43:09.830
你们可能会说一个黑暗的选择，我

00:43:06.470 --> 00:43:12.320
要说五个，这就是说

00:43:09.830 --> 00:43:14.690
只喜欢拿五块数据

00:43:12.320 --> 00:43:17.030
别再烦我了

00:43:14.690 --> 00:43:19.550
一旦它不旋转过滤器并采取

00:43:17.030 --> 00:43:22.490
好过滤器有点像

00:43:19.550 --> 00:43:24.230
一巴掌它会阻止数据并说可以

00:43:22.490 --> 00:43:27.260
通过或会让一些数据通过

00:43:24.230 --> 00:43:30.740
通过这样，每个数据可能会阻塞或

00:43:27.260 --> 00:43:33.200
释放想起蛋糕就像阀门

00:43:30.740 --> 00:43:35.270
它是开放的，从数据保存开始

00:43:33.200 --> 00:43:37.820
去，但当条件达到

00:43:35.270 --> 00:43:39.680
荒野封闭，不再有数据

00:43:37.820 --> 00:43:42.350
经历了一点

00:43:39.680 --> 00:43:45.470
远不止于此

00:43:42.350 --> 00:43:47.750
这将开始在

00:43:45.470 --> 00:43:49.490
换句话说，它会说话，所以无论

00:43:47.750 --> 00:43:52.580
数据是瑞安银行正在传输

00:43:49.490 --> 00:43:54.820
经过它，但是当条件满足时

00:43:52.580 --> 00:43:58.270
它将发送退订

00:43:54.820 --> 00:44:00.920
上游，它将发送完整的

00:43:58.270 --> 00:44:03.860
下游，所以在这种情况下，当我

00:44:00.920 --> 00:44:06.410
一旦达到值五，运行此命令

00:44:03.860 --> 00:44:08.960
蛋糕要拿了

00:44:06.410 --> 00:44:11.450
传送一个

00:44:08.960 --> 00:44:13.850
完整的信号通知已完成

00:44:11.450 --> 00:44:15.830
实际上是从发送

00:44:13.850 --> 00:44:18.020
完整的信号，那已经是

00:44:15.830 --> 00:44:20.900
烤好了当然

00:44:18.020 --> 00:44:24.170
只会给我们一种能力

00:44:20.900 --> 00:44:26.480
在五个数据上，但可能很漂亮

00:44:24.170 --> 00:44:29.119
逻辑也可以

00:44:26.480 --> 00:44:31.130
一会儿，你可以说

00:44:29.119 --> 00:44:33.529
当此条件为真时，请保持

00:44:31.130 --> 00:44:36.200
在没有这种情况时发送数据

00:44:33.529 --> 00:44:38.450
真的不再了，所以在这种情况下，您

00:44:36.200 --> 00:44:41.539
可以说继续向我发送数据，直到

00:44:38.450 --> 00:44:43.700
一定的股票价格这个值，但是

00:44:41.539 --> 00:44:45.559
达到阈值退出的分钟

00:44:43.700 --> 00:44:47.779
向我发送我不想听到的数据

00:44:45.559 --> 00:44:50.119
这样你可以很合逻辑了

00:44:47.779 --> 00:44:52.999
关于它，你也可以做

00:44:50.119 --> 00:44:55.970
不仅花了一点时间，你也可以做

00:44:52.999 --> 00:44:58.099
跳过，然后跳过，然后

00:44:55.970 --> 00:45:01.369
你可能会相反

00:44:58.099 --> 00:45:03.319
正在这样做，但是当然

00:45:01.369 --> 00:45:07.009
效果很好，但是当您有多个

00:45:03.319 --> 00:45:08.390
观察者事情实际上如何运作

00:45:07.009 --> 00:45:10.220
这是水之间的区别

00:45:08.390 --> 00:45:13.039
称为热观测和冷

00:45:10.220 --> 00:45:15.559
可观察到的东西可悲的是

00:45:13.039 --> 00:45:18.829
默认是冷可观察到的

00:45:15.559 --> 00:45:21.920
同时维护多个会话

00:45:18.829 --> 00:45:24.920
所以换句话说，狮子座订阅了

00:45:21.920 --> 00:45:27.230
我的观察到我将成为

00:45:24.920 --> 00:45:29.509
同时传送给狮子座

00:45:27.230 --> 00:45:31.819
当莎拉订阅时， 

00:45:29.509 --> 00:45:35.269
完全独立的会话，因此在其他会话中

00:45:31.819 --> 00:45:37.730
像我这样的消息，我将继续

00:45:35.269 --> 00:45:39.799
和我老婆一个朋友的信息交流会

00:45:37.730 --> 00:45:42.230
的我可能会加入，我将有两个

00:45:39.799 --> 00:45:43.880
我会说一些独特的会议

00:45:42.230 --> 00:45:46.190
我的妻子和我会说不同的话

00:45:43.880 --> 00:45:48.680
我的朋友，他们俩都在做

00:45:46.190 --> 00:45:51.980
我是两个不同的消息传递会话

00:45:48.680 --> 00:45:53.960
另一方面，它是冷的

00:45:51.980 --> 00:45:56.869
可能我老婆正在聊天

00:45:53.960 --> 00:45:58.460
我，当我儿子之一来时，我

00:45:56.869 --> 00:46:00.829
可能决定共同的话题

00:45:58.460 --> 00:46:03.079
兴趣，我可以将它们放在一起

00:46:00.829 --> 00:46:05.749
现在的消息，我成为所谓的热门

00:46:03.079 --> 00:46:08.420
可以观察到，因为我的孩子和

00:46:05.749 --> 00:46:10.640
我老婆可以参加

00:46:08.420 --> 00:46:13.339
与我交谈我保持一个

00:46:10.640 --> 00:46:15.140
会话没有多个会话，因此我们可以

00:46:13.339 --> 00:46:18.019
之间有这些区别

00:46:15.140 --> 00:46:19.849
如果所有的观察者都是

00:46:18.019 --> 00:46:21.739
从中查看同一件事

00:46:19.849 --> 00:46:23.720
可观察到的还是他们有

00:46:21.739 --> 00:46:26.839
独特的会议，我们可以管理

00:46:23.720 --> 00:46:29.420
视情况而定也非常有效

00:46:26.839 --> 00:46:31.999
但不仅我们说好，这是

00:46:29.420 --> 00:46:34.730
一切都很好，但是如果观察者是

00:46:31.999 --> 00:46:37.640
在某个阶段传输数据，以及

00:46:34.730 --> 00:46:40.009
订户观察者无法

00:46:37.640 --> 00:46:42.299
跟上它，我们要做什么

00:46:40.009 --> 00:46:45.509
做得好，这是哪里

00:46:42.299 --> 00:46:48.269
叫做背压，所以背

00:46:45.509 --> 00:46:50.999
压力是您可以配置方式的地方

00:46:48.269 --> 00:46:54.059
当

00:46:50.999 --> 00:46:55.439
传播率突然改变，所以

00:46:54.059 --> 00:46:58.529
有两种不同的选择

00:46:55.439 --> 00:47:01.679
一一背压就是背压

00:46:58.529 --> 00:47:04.079
一滴意味着我不在乎我会

00:47:01.679 --> 00:47:06.299
如果今天过得太快，我会按照自己的节奏进行处理

00:47:04.079 --> 00:47:08.009
快摆脱掉数据，当我

00:47:06.299 --> 00:47:10.349
准备好，我将获得下一个数据

00:47:08.009 --> 00:47:12.630
在某些情况下这是正确的

00:47:10.349 --> 00:47:15.119
还有其他时间要做的事情

00:47:12.630 --> 00:47:17.429
您想要缓冲数据，所以

00:47:15.119 --> 00:47:19.979
一个背压缓冲器，它将

00:47:17.429 --> 00:47:22.109
将数据放入缓冲区，您可以

00:47:19.979 --> 00:47:24.150
正在提取数据并进行处理

00:47:22.109 --> 00:47:26.369
在数据保持不变的情况下按您的步调

00:47:24.150 --> 00:47:27.929
流进并再次缓冲

00:47:26.369 --> 00:47:30.329
当然只有在那才有意义

00:47:27.929 --> 00:47:31.890
是高峰期和非高峰期

00:47:30.329 --> 00:47:33.900
您可以在那里恢复并开始

00:47:31.890 --> 00:47:35.279
处理数据，所以这些试图

00:47:33.900 --> 00:47:37.829
产生你也可以做所谓的

00:47:35.279 --> 00:47:39.599
在哪里可以开始嘎嘎作响

00:47:37.829 --> 00:47:41.880
并说我不想得到

00:47:39.599 --> 00:47:44.369
这个数据我想以埃迪的速度

00:47:41.880 --> 00:47:46.380
我在那里获取数据的速度

00:47:44.369 --> 00:47:48.749
可能由此产生很多噪音， 

00:47:46.380 --> 00:47:51.029
然后当他们的数据稳定下来时

00:47:48.749 --> 00:47:53.759
接受节流的一个例子

00:47:51.029 --> 00:47:55.439
就是你说的观察

00:47:53.759 --> 00:47:57.839
有人在键盘上打字

00:47:55.439 --> 00:48:00.420
我太太说我很好

00:47:57.839 --> 00:48:02.069
很好地键入空格

00:48:00.420 --> 00:48:03.359
令人讨厌的权利，因为我们输入了

00:48:02.069 --> 00:48:05.400
删除类型和删除中的删除类型

00:48:03.359 --> 00:48:08.039
你可以说为什么我不让

00:48:05.400 --> 00:48:09.869
用户类型并稳定他们的真实身份

00:48:08.039 --> 00:48:11.969
然后输入我要输入的内容

00:48:09.869 --> 00:48:13.979
然后就可以处理

00:48:11.969 --> 00:48:15.509
在诸如节流的地方使用

00:48:13.979 --> 00:48:17.219
你给他们机会去吵闹

00:48:15.509 --> 00:48:19.170
安定下来，然后您就可以处理

00:48:17.219 --> 00:48:21.179
所有这些方法的数据

00:48:19.170 --> 00:48:23.489
真的很方便，所以总结一下

00:48:21.179 --> 00:48:25.949
我们谈到了反应性背后的想法

00:48:23.489 --> 00:48:29.130
编程才能真正

00:48:25.949 --> 00:48:31.979
用弹性消息创建系统

00:48:29.130 --> 00:48:33.689
驱动非常敏感，也非常

00:48:31.979 --> 00:48:35.309
有弹性，有很多

00:48:33.689 --> 00:48:36.660
希望有不同的解决方案

00:48:35.309 --> 00:48:38.759
您对我们活跃的想法

00:48:36.660 --> 00:48:39.869
编程就是一切

00:48:38.759 --> 00:48:41.910
有兴趣不去录音

00:48:39.869 --> 00:48:44.219
我在这里展示给你看的例子

00:48:41.910 --> 00:48:46.070
位于我的下载页面上的URL 

00:48:44.219 --> 00:48:52.389
我希望你觉得有用

00:48:46.070 --> 00:48:52.389
 [音乐] 

