{"id": "jvH17AI7ncU", "uploader": "Oracle Developers", "uploader_id": "UCdDhYMT2USoLdh4SZIsu_1g", "uploader_url": "http://www.youtube.com/channel/UCdDhYMT2USoLdh4SZIsu_1g", "channel_id": "UCdDhYMT2USoLdh4SZIsu_1g", "channel_url": "http://www.youtube.com/channel/UCdDhYMT2USoLdh4SZIsu_1g", "upload_date": "20171215", "license": null, "creator": null, "title": "Laziness is the Ultimate Sophistication, both in Life and in Programming", "alt_title": null, "thumbnail": "https://i.ytimg.com/vi/jvH17AI7ncU/hqdefault.jpg", "description": "https://developer.oracle.com/code/online | Venkat Subramaniam: Most mainstream programming languages have adapted the functional style. We often hear why immutability is so important and how wonderful higher order functions are. These are but tools to reach a higher goal. In this presentation we will start by discussing the functional capabilities found in almost any language today, and quickly dive into the real essence of functional programming and learn how languages like Java have focused on what really matters.", "categories": ["Science & Technology"], "tags": ["oracle", "oracle cloud", "oracle developers", "cloud", "cloud computing", "platform", "infrastructure", "java"], "subtitles": {}, "automatic_captions": {}, "duration": 3600, "age_limit": 0, "annotations": null, "chapters": null, "webpage_url": "https://www.youtube.com/watch?v=jvH17AI7ncU", "view_count": 3891, "like_count": 84, "dislike_count": 1, "average_rating": 4.9529409, "is_live": null, "start_time": null, "end_time": null, "series": null, "season_number": null, "episode_number": null, "track": null, "artist": null, "album": null, "release_date": null, "release_year": null, "extractor": "youtube", "webpage_url_basename": "jvH17AI7ncU", "extractor_key": "Youtube", "n_entries": 31, "playlist": "Java SE", "playlist_id": "PLX8CzqL3ArzWgR5JtKFV3RklcGhNHvXvD", "playlist_title": "Java SE", "playlist_uploader": "Java", "playlist_uploader_id": "java", "playlist_index": 1, "thumbnails": [{"url": "https://i.ytimg.com/vi/jvH17AI7ncU/hqdefault.jpg", "id": "0"}], "display_id": "jvH17AI7ncU", "requested_subtitles": null, "format": "135 - 768x480 (480p)+140 - audio only (tiny)", "format_id": "135+140", "width": 768, "height": 480, "resolution": null, "fps": 12, "vcodec": "avc1.4d4016", "vbr": null, "stretched_ratio": null, "acodec": "mp4a.40.2", "abr": 128, "ext": "mp4", "fulltitle": "Laziness is the Ultimate Sophistication, both in Life and in Programming", "_filename": "Laziness is the Ultimate Sophistication, both in Life and in Programming-jvH17AI7ncU.mp4"}
{"id": "3CSfYGsmGEk", "uploader": "Java", "uploader_id": "java", "uploader_url": "http://www.youtube.com/user/java", "channel_id": "UCmRtPmgnQ04CMUpSUqPfhxQ", "channel_url": "http://www.youtube.com/channel/UCmRtPmgnQ04CMUpSUqPfhxQ", "upload_date": "20171004", "license": null, "creator": null, "title": "Streams in JDK 8: The Good, the Bad, and the Ugly", "alt_title": null, "thumbnail": "https://i.ytimg.com/vi/3CSfYGsmGEk/maxresdefault.jpg", "description": "Simon Ritter, Deputy CTO, Azul Systems\n\nStuart Marks, Oracle\n\nThe Streams API, combined with lambda expressions, both introduced in JDK 8, provide a way for developers to use a functional style of programming for the first time in Java. As with all powerful features such as these, it is easy to abuse them and produce code that is difficult to read and hard to maintain. This session presents examples of streams to discuss whether the code is good, bad, or ugly and discusses ways the code could be changed. At the end of the session, you will have learned some new ways to use streams and lambdas\u2014and some ways not to!", "categories": ["Science & Technology"], "tags": ["java"], "subtitles": {}, "automatic_captions": {}, "duration": 2782, "age_limit": 0, "annotations": null, "chapters": null, "webpage_url": "https://www.youtube.com/watch?v=3CSfYGsmGEk", "view_count": 5685, "like_count": 69, "dislike_count": 4, "average_rating": 4.7808218, "is_live": null, "start_time": null, "end_time": null, "series": null, "season_number": null, "episode_number": null, "track": null, "artist": null, "album": null, "release_date": null, "release_year": null, "extractor": "youtube", "webpage_url_basename": "3CSfYGsmGEk", "extractor_key": "Youtube", "n_entries": 31, "playlist": "Java SE", "playlist_id": "PLX8CzqL3ArzWgR5JtKFV3RklcGhNHvXvD", "playlist_title": "Java SE", "playlist_uploader": "Java", "playlist_uploader_id": "java", "playlist_index": 2, "thumbnails": [{"url": "https://i.ytimg.com/vi/3CSfYGsmGEk/maxresdefault.jpg", "id": "0"}], "display_id": "3CSfYGsmGEk", "requested_subtitles": null, "format": "248 - 1920x1080 (DASH video)+140 - audio only (DASH audio)", "format_id": "248+140", "width": 1920, "height": 1080, "resolution": null, "fps": 30, "vcodec": "vp9", "vbr": null, "stretched_ratio": null, "acodec": "mp4a.40.2", "abr": 128, "ext": "webm", "fulltitle": "Streams in JDK 8: The Good, the Bad, and the Ugly", "_filename": "Streams in JDK 8 - The Good, the Bad, and the Ugly-3CSfYGsmGEk.webm"}
{"id": "PdEViU_S0ME", "uploader": "Java", "uploader_id": "java", "uploader_url": "http://www.youtube.com/user/java", "channel_id": "UCmRtPmgnQ04CMUpSUqPfhxQ", "channel_url": "http://www.youtube.com/channel/UCmRtPmgnQ04CMUpSUqPfhxQ", "upload_date": "20171004", "license": null, "creator": null, "title": "Make Your CPU Cores Sweat with Parallel Streams", "alt_title": null, "thumbnail": "https://i.ytimg.com/vi/PdEViU_S0ME/maxresdefault.jpg", "description": "Lukasz Pater, Developer, Programmer, CERN\n\nPrior to Java 8, you always had to use threads to leverage multicore architectures, which did the job but could often be somewhat difficult. The Java 8 Streams API changed this, by providing a new and simpler way of thinking about parallelism: parallel streams. Even though parallel streams can help you achieve parallelism almost for free, you still have to follow some basic but important rules that you will learn in this session, together with some best practices. Discover what happens under the hood when you invoke that magic parallelStream method, understand how to avoid the main traps and performance hiccups, learn what a Spliterator is, and much more!", "categories": ["Science & Technology"], "tags": ["java"], "subtitles": {}, "automatic_captions": {}, "duration": 2753, "age_limit": 0, "annotations": null, "chapters": null, "webpage_url": "https://www.youtube.com/watch?v=PdEViU_S0ME", "view_count": 1642, "like_count": 28, "dislike_count": 1, "average_rating": 4.8620691, "is_live": null, "start_time": null, "end_time": null, "series": null, "season_number": null, "episode_number": null, "track": null, "artist": null, "album": null, "release_date": null, "release_year": null, "extractor": "youtube", "webpage_url_basename": "PdEViU_S0ME", "extractor_key": "Youtube", "n_entries": 31, "playlist": "Java SE", "playlist_id": "PLX8CzqL3ArzWgR5JtKFV3RklcGhNHvXvD", "playlist_title": "Java SE", "playlist_uploader": "Java", "playlist_uploader_id": "java", "playlist_index": 3, "thumbnails": [{"url": "https://i.ytimg.com/vi/PdEViU_S0ME/maxresdefault.jpg", "id": "0"}], "display_id": "PdEViU_S0ME", "requested_subtitles": null, "format": "248 - 1920x1080 (1080p)+140 - audio only (tiny)", "format_id": "248+140", "width": 1920, "height": 1080, "resolution": null, "fps": 30, "vcodec": "vp9", "vbr": null, "stretched_ratio": null, "acodec": "mp4a.40.2", "abr": 128, "ext": "webm", "fulltitle": "Make Your CPU Cores Sweat with Parallel Streams", "_filename": "Make Your CPU Cores Sweat with Parallel Streams-PdEViU_S0ME.webm"}
{"id": "PIC3naLrdys", "uploader": "Java", "uploader_id": "java", "uploader_url": "http://www.youtube.com/user/java", "channel_id": "UCmRtPmgnQ04CMUpSUqPfhxQ", "channel_url": "http://www.youtube.com/channel/UCmRtPmgnQ04CMUpSUqPfhxQ", "upload_date": "20171004", "license": null, "creator": null, "title": "Java at Speed: Getting the Most Out of Modern Hardware", "alt_title": null, "thumbnail": "https://i.ytimg.com/vi/PIC3naLrdys/maxresdefault.jpg", "description": "Gil Tene, CTO, Azul\n\nGetting the most out of your Java applications can be an interesting challenge. Understanding some of the optimizations the latest crop of JVMs are able to apply when running on the latest servers may help with that. This session discusses some of those features and optimizations. Besides covering some JIT compiler capabilities, it takes a look at the evolution of Intel-based server platforms, quickly traversing features introduced over the past few years. It also demonstrates some examples of JVM JITs using these capabilities, where available, as they adapt the code they generate to the specific processors they run on. If you like to geek out to the sound of mechanical sympathy discussions, this is the session for you.", "categories": ["Science & Technology"], "tags": ["JavaOne 2017", "java"], "subtitles": {}, "automatic_captions": {}, "duration": 3057, "age_limit": 0, "annotations": null, "chapters": null, "webpage_url": "https://www.youtube.com/watch?v=PIC3naLrdys", "view_count": 2992, "like_count": 55, "dislike_count": 0, "average_rating": 5.0, "is_live": null, "start_time": null, "end_time": null, "series": null, "season_number": null, "episode_number": null, "track": null, "artist": null, "album": null, "release_date": null, "release_year": null, "extractor": "youtube", "webpage_url_basename": "PIC3naLrdys", "extractor_key": "Youtube", "n_entries": 31, "playlist": "Java SE", "playlist_id": "PLX8CzqL3ArzWgR5JtKFV3RklcGhNHvXvD", "playlist_title": "Java SE", "playlist_uploader": "Java", "playlist_uploader_id": "java", "playlist_index": 4, "thumbnails": [{"url": "https://i.ytimg.com/vi/PIC3naLrdys/maxresdefault.jpg", "id": "0"}], "display_id": "PIC3naLrdys", "requested_subtitles": null, "format": "248 - 1920x1080 (DASH video)+140 - audio only (DASH audio)", "format_id": "248+140", "width": 1920, "height": 1080, "resolution": null, "fps": 30, "vcodec": "vp9", "vbr": null, "stretched_ratio": null, "acodec": "mp4a.40.2", "abr": 128, "ext": "webm", "fulltitle": "Java at Speed: Getting the Most Out of Modern Hardware", "_filename": "Java at Speed - Getting the Most Out of Modern Hardware-PIC3naLrdys.webm"}
{"id": "7HBEXs48qmo", "uploader": "Java", "uploader_id": "java", "uploader_url": "http://www.youtube.com/user/java", "channel_id": "UCmRtPmgnQ04CMUpSUqPfhxQ", "channel_url": "http://www.youtube.com/channel/UCmRtPmgnQ04CMUpSUqPfhxQ", "upload_date": "20171004", "license": null, "creator": null, "title": "Scale Up with Lock Free Algorithms", "alt_title": null, "thumbnail": "https://i.ytimg.com/vi/7HBEXs48qmo/maxresdefault.jpg", "description": "Roman Elizarov, Manager, JetBrains\n\nModern back-end systems routinely pack dozens of CPU cores with dozens of gigabytes of memory. The JVM platform provides a unique opportunity to built vertically scalable systems that fully utilize this power by working with large datasets from multiple threads. This session shows how a well-defined Java memory model (JMM), combined with state-of-the-art garbage collection (GC) memory management makes it a prime choice for implementing scalable lock-free data structures and algorithms. You\u2019ll see how you can design and implement your own lock-free algorithms in Java without having to complete a PhD.", "categories": ["Science & Technology"], "tags": ["JavaOne 2017", "java"], "subtitles": {}, "automatic_captions": {}, "duration": 2704, "age_limit": 0, "annotations": null, "chapters": null, "webpage_url": "https://www.youtube.com/watch?v=7HBEXs48qmo", "view_count": 2301, "like_count": 44, "dislike_count": 2, "average_rating": 4.826087, "is_live": null, "start_time": null, "end_time": null, "series": null, "season_number": null, "episode_number": null, "track": null, "artist": null, "album": null, "release_date": null, "release_year": null, "extractor": "youtube", "webpage_url_basename": "7HBEXs48qmo", "extractor_key": "Youtube", "n_entries": 31, "playlist": "Java SE", "playlist_id": "PLX8CzqL3ArzWgR5JtKFV3RklcGhNHvXvD", "playlist_title": "Java SE", "playlist_uploader": "Java", "playlist_uploader_id": "java", "playlist_index": 5, "thumbnails": [{"url": "https://i.ytimg.com/vi/7HBEXs48qmo/maxresdefault.jpg", "id": "0"}], "display_id": "7HBEXs48qmo", "requested_subtitles": null, "format": "248 - 1920x1080 (DASH video)+140 - audio only (DASH audio)", "format_id": "248+140", "width": 1920, "height": 1080, "resolution": null, "fps": 30, "vcodec": "vp9", "vbr": null, "stretched_ratio": null, "acodec": "mp4a.40.2", "abr": 128, "ext": "webm", "fulltitle": "Scale Up with Lock Free Algorithms", "_filename": "Scale Up with Lock Free Algorithms-7HBEXs48qmo.webm"}
{"id": "ia_TP5T57AM", "uploader": "Java", "uploader_id": "java", "uploader_url": "http://www.youtube.com/user/java", "channel_id": "UCmRtPmgnQ04CMUpSUqPfhxQ", "channel_url": "http://www.youtube.com/channel/UCmRtPmgnQ04CMUpSUqPfhxQ", "upload_date": "20171004", "license": null, "creator": null, "title": "The Power and Perils of Parallel Streams", "alt_title": null, "thumbnail": "https://i.ytimg.com/vi/ia_TP5T57AM/maxresdefault.jpg", "description": "Venkat Subramaniam, President, Agile Developer, Inc.\n\n\u201cIf streams can be parallel, why not make them parallel all the time?\u201d is a common question from developers being introduced to Java 8 streams. This session tackles three separate topics:\n1. When to consider parallelization and when not to\n2. How to parallelize, how to decide on the number of threads, and how to control the threads pool\n3. Some common mistakes people make when using parallel streams\n\nThe goal of the session is to explain when and how to make good use of parallel streams.", "categories": ["Science & Technology"], "tags": ["JavaOne 2017", "java"], "subtitles": {}, "automatic_captions": {}, "duration": 2719, "age_limit": 0, "annotations": null, "chapters": null, "webpage_url": "https://www.youtube.com/watch?v=ia_TP5T57AM", "view_count": 3370, "like_count": 104, "dislike_count": 0, "average_rating": 5.0, "is_live": null, "start_time": null, "end_time": null, "series": null, "season_number": null, "episode_number": null, "track": null, "artist": null, "album": null, "release_date": null, "release_year": null, "extractor": "youtube", "webpage_url_basename": "ia_TP5T57AM", "extractor_key": "Youtube", "n_entries": 31, "playlist": "Java SE", "playlist_id": "PLX8CzqL3ArzWgR5JtKFV3RklcGhNHvXvD", "playlist_title": "Java SE", "playlist_uploader": "Java", "playlist_uploader_id": "java", "playlist_index": 6, "thumbnails": [{"url": "https://i.ytimg.com/vi/ia_TP5T57AM/maxresdefault.jpg", "id": "0"}], "display_id": "ia_TP5T57AM", "requested_subtitles": null, "format": "137 - 1920x1080 (1080p)+140 - audio only (tiny)", "format_id": "137+140", "width": 1920, "height": 1080, "resolution": null, "fps": 30, "vcodec": "avc1.640028", "vbr": null, "stretched_ratio": null, "acodec": "mp4a.40.2", "abr": 128, "ext": "mp4", "fulltitle": "The Power and Perils of Parallel Streams", "_filename": "The Power and Perils of Parallel Streams-ia_TP5T57AM.mp4"}
{"id": "GhCg_ku0Txc", "uploader": "Java", "uploader_id": "java", "uploader_url": "http://www.youtube.com/user/java", "channel_id": "UCmRtPmgnQ04CMUpSUqPfhxQ", "channel_url": "http://www.youtube.com/channel/UCmRtPmgnQ04CMUpSUqPfhxQ", "upload_date": "20171004", "license": null, "creator": null, "title": "The Anatomy of Java Vulnerabilities", "alt_title": null, "thumbnail": "https://i.ytimg.com/vi/GhCg_ku0Txc/maxresdefault.jpg", "description": "Steve Poole, Developer Advocate, IBM\n\nThe continuing rise of cybercrime in quantity and sophistication means we all need to understand more about security. This session covers one aspect of improving security: being more informed about Java vulnerabilities. The presentation explains what\u2019s being done to address vulnerability issues and what you have to do to reduce your exposure. You\u2019ll learn about Java vulnerabilities in general: how they are reported, managed, and fixed as well as learning about the specifics of attack vectors and just what a \u201cvulnerability\u201d actually is. Given the continuing increase in cybercrime, it\u2019s time you knew how to defend your code. With examples and code, this session will help you become more effective in tacking security issues in Java.", "categories": ["Science & Technology"], "tags": ["java", "JavaOne 2017"], "subtitles": {}, "automatic_captions": {}, "duration": 2744, "age_limit": 0, "annotations": null, "chapters": null, "webpage_url": "https://www.youtube.com/watch?v=GhCg_ku0Txc", "view_count": 874, "like_count": 10, "dislike_count": 3, "average_rating": 4.0769229, "is_live": null, "start_time": null, "end_time": null, "series": null, "season_number": null, "episode_number": null, "track": null, "artist": null, "album": null, "release_date": null, "release_year": null, "extractor": "youtube", "webpage_url_basename": "GhCg_ku0Txc", "extractor_key": "Youtube", "n_entries": 31, "playlist": "Java SE", "playlist_id": "PLX8CzqL3ArzWgR5JtKFV3RklcGhNHvXvD", "playlist_title": "Java SE", "playlist_uploader": "Java", "playlist_uploader_id": "java", "playlist_index": 7, "thumbnails": [{"url": "https://i.ytimg.com/vi/GhCg_ku0Txc/maxresdefault.jpg", "id": "0"}], "display_id": "GhCg_ku0Txc", "requested_subtitles": null, "format": "248 - 1920x1080 (DASH video)+140 - audio only (DASH audio)", "format_id": "248+140", "width": 1920, "height": 1080, "resolution": null, "fps": 30, "vcodec": "vp9", "vbr": null, "stretched_ratio": null, "acodec": "mp4a.40.2", "abr": 128, "ext": "webm", "fulltitle": "The Anatomy of Java Vulnerabilities", "_filename": "The Anatomy of Java Vulnerabilities-GhCg_ku0Txc.webm"}
{"id": "KhdGMcVhrQU", "uploader": "Java", "uploader_id": "java", "uploader_url": "http://www.youtube.com/user/java", "channel_id": "UCmRtPmgnQ04CMUpSUqPfhxQ", "channel_url": "http://www.youtube.com/channel/UCmRtPmgnQ04CMUpSUqPfhxQ", "upload_date": "20171004", "license": null, "creator": null, "title": "Designing Functional Programs", "alt_title": null, "thumbnail": "https://i.ytimg.com/vi/KhdGMcVhrQU/maxresdefault.jpg", "description": "Venkat Subramaniam, President, Agile Developer, Inc.\n\nFunctional programming promotes immutability and the use of higher-order functions. For those of us who have designed and architected applications with the imperative style of programming and the object-oriented paradigm, this largely seems like a strange idea. We often ask how it is practical to apply these ideas realistically to build practical applications. It turns out it\u2019s highly practical but we have to change how we design and model our systems. Come to this presentation to think about functional style and how to start viewing design to make better use of this way of programming.", "categories": ["Science & Technology"], "tags": ["java", "JavaOne 2017"], "subtitles": {}, "automatic_captions": {}, "duration": 2776, "age_limit": 0, "annotations": null, "chapters": null, "webpage_url": "https://www.youtube.com/watch?v=KhdGMcVhrQU", "view_count": 3995, "like_count": 79, "dislike_count": 4, "average_rating": 4.807229, "is_live": null, "start_time": null, "end_time": null, "series": null, "season_number": null, "episode_number": null, "track": null, "artist": null, "album": null, "release_date": null, "release_year": null, "extractor": "youtube", "webpage_url_basename": "KhdGMcVhrQU", "extractor_key": "Youtube", "n_entries": 31, "playlist": "Java SE", "playlist_id": "PLX8CzqL3ArzWgR5JtKFV3RklcGhNHvXvD", "playlist_title": "Java SE", "playlist_uploader": "Java", "playlist_uploader_id": "java", "playlist_index": 8, "thumbnails": [{"url": "https://i.ytimg.com/vi/KhdGMcVhrQU/maxresdefault.jpg", "id": "0"}], "display_id": "KhdGMcVhrQU", "requested_subtitles": null, "format": "137 - 1920x1080 (1080p)+140 - audio only (tiny)", "format_id": "137+140", "width": 1920, "height": 1080, "resolution": null, "fps": 30, "vcodec": "avc1.640028", "vbr": null, "stretched_ratio": null, "acodec": "mp4a.40.2", "abr": 128, "ext": "mp4", "fulltitle": "Designing Functional Programs", "_filename": "Designing Functional Programs-KhdGMcVhrQU.mp4"}
{"id": "9FiNsALl64k", "uploader": "Java", "uploader_id": "java", "uploader_url": "http://www.youtube.com/user/java", "channel_id": "UCmRtPmgnQ04CMUpSUqPfhxQ", "channel_url": "http://www.youtube.com/channel/UCmRtPmgnQ04CMUpSUqPfhxQ", "upload_date": "20171004", "license": null, "creator": null, "title": "G1GC Concepts and Performance Tuning", "alt_title": null, "thumbnail": "https://i.ytimg.com/vi/9FiNsALl64k/maxresdefault.jpg", "description": "Erik Helin, Senior Member of Technical Staff, Oracle\n\nThis session illustrates how to tune G1 performance production workloads and how G1 ergonomics work so the audience understands the reasoning behind the tuning suggestions. The presentation uses GC logs and JFR recordings to show how to improve application performance with G1 GC.", "categories": ["Science & Technology"], "tags": ["java", "JavaOne 2017"], "subtitles": {}, "automatic_captions": {}, "duration": 2319, "age_limit": 0, "annotations": null, "chapters": null, "webpage_url": "https://www.youtube.com/watch?v=9FiNsALl64k", "view_count": 3533, "like_count": 54, "dislike_count": 1, "average_rating": 4.9272728, "is_live": null, "start_time": null, "end_time": null, "series": null, "season_number": null, "episode_number": null, "track": null, "artist": null, "album": null, "release_date": null, "release_year": null, "extractor": "youtube", "webpage_url_basename": "9FiNsALl64k", "extractor_key": "Youtube", "n_entries": 31, "playlist": "Java SE", "playlist_id": "PLX8CzqL3ArzWgR5JtKFV3RklcGhNHvXvD", "playlist_title": "Java SE", "playlist_uploader": "Java", "playlist_uploader_id": "java", "playlist_index": 9, "thumbnails": [{"url": "https://i.ytimg.com/vi/9FiNsALl64k/maxresdefault.jpg", "id": "0"}], "display_id": "9FiNsALl64k", "requested_subtitles": null, "format": "137 - 1920x1080 (1080p)+140 - audio only (tiny)", "format_id": "137+140", "width": 1920, "height": 1080, "resolution": null, "fps": 30, "vcodec": "avc1.640028", "vbr": null, "stretched_ratio": null, "acodec": "mp4a.40.2", "abr": 128, "ext": "mp4", "fulltitle": "G1GC Concepts and Performance Tuning", "_filename": "G1GC Concepts and Performance Tuning-9FiNsALl64k.mp4"}
{"id": "KbZ-psFJ-fQ", "uploader": "Java", "uploader_id": "java", "uploader_url": "http://www.youtube.com/user/java", "channel_id": "UCmRtPmgnQ04CMUpSUqPfhxQ", "channel_url": "http://www.youtube.com/channel/UCmRtPmgnQ04CMUpSUqPfhxQ", "upload_date": "20171004", "license": null, "creator": null, "title": "Flow and the Future of Reactive Systems on the JVM", "alt_title": null, "thumbnail": "https://i.ytimg.com/vi/KbZ-psFJ-fQ/maxresdefault.jpg", "description": "Konrad Malawski, Dev, Lightbend\n\nIn JDK9 the (java util concurrent) Flow interface family was introduced. In fact, it rose from the Reactive Streams initiative, which was adopted and developed by leading technology creators such as Lightbend, Netflix, Oracle, and Pivotal. This session explores the difference between reactive applications and reactive systems and shows how Flow ties into this. Specifically, you will see how building applications with this new paradigm leads to more-scalable, more-performant apps and then get more examples taking the concept to the level of systems\u2014multiple applications interacting with each other in a reactive way\u2014all tied together with Flow and various Reactive Streams implementations, including Akka and RxJava.", "categories": ["Science & Technology"], "tags": ["JavaOne 2017", "java"], "subtitles": {}, "automatic_captions": {}, "duration": 2093, "age_limit": 0, "annotations": null, "chapters": null, "webpage_url": "https://www.youtube.com/watch?v=KbZ-psFJ-fQ", "view_count": 3025, "like_count": 40, "dislike_count": 16, "average_rating": 3.8571429, "is_live": null, "start_time": null, "end_time": null, "series": null, "season_number": null, "episode_number": null, "track": null, "artist": null, "album": null, "release_date": null, "release_year": null, "extractor": "youtube", "webpage_url_basename": "KbZ-psFJ-fQ", "extractor_key": "Youtube", "n_entries": 31, "playlist": "Java SE", "playlist_id": "PLX8CzqL3ArzWgR5JtKFV3RklcGhNHvXvD", "playlist_title": "Java SE", "playlist_uploader": "Java", "playlist_uploader_id": "java", "playlist_index": 10, "thumbnails": [{"url": "https://i.ytimg.com/vi/KbZ-psFJ-fQ/maxresdefault.jpg", "id": "0"}], "display_id": "KbZ-psFJ-fQ", "requested_subtitles": null, "format": "248 - 1920x1080 (DASH video)+140 - audio only (DASH audio)", "format_id": "248+140", "width": 1920, "height": 1080, "resolution": null, "fps": 30, "vcodec": "vp9", "vbr": null, "stretched_ratio": null, "acodec": "mp4a.40.2", "abr": 128, "ext": "webm", "fulltitle": "Flow and the Future of Reactive Systems on the JVM", "_filename": "Flow and the Future of Reactive Systems on the JVM-KbZ-psFJ-fQ.webm"}
{"id": "QwZF8xQHlxE", "uploader": "Java", "uploader_id": "java", "uploader_url": "http://www.youtube.com/user/java", "channel_id": "UCmRtPmgnQ04CMUpSUqPfhxQ", "channel_url": "http://www.youtube.com/channel/UCmRtPmgnQ04CMUpSUqPfhxQ", "upload_date": "20171004", "license": null, "creator": null, "title": "Collections.compare:JDK, Eclipse, Guava, Apache", "alt_title": null, "thumbnail": "https://i.ytimg.com/vi/QwZF8xQHlxE/maxresdefault.jpg", "description": "Leonardo Lima, CTO, V2COM\n\nNikhil Nanivadekar, Vice President, Goldman Sachs & Co.\n\nDonald Raab, Managing Director, BNY Mellon\n\nCollections are a staple in any programming language: the need to collect, sort, or iterate over values is needed by nearly all developers. The Java language introduced the Collections framework long ago. It has plenty to offer, but many find it lacking: the number of collection libraries as active open source projects demonstrates the need for something else. This session does a holistic comparison of the most-common collections (pun intended!) frameworks, what they have to offer, and what you should consider for your next project. It also shows common programmer use cases; how each library handles them; and the impact on memory, processing power, and ease of use/coding. Come and let us help you choose the right bag for your tricks!", "categories": ["Science & Technology"], "tags": ["JavaOne 2017", "java"], "subtitles": {}, "automatic_captions": {}, "duration": 2746, "age_limit": 0, "annotations": null, "chapters": null, "webpage_url": "https://www.youtube.com/watch?v=QwZF8xQHlxE", "view_count": 3015, "like_count": 34, "dislike_count": 1, "average_rating": 4.8857141, "is_live": null, "start_time": null, "end_time": null, "series": null, "season_number": null, "episode_number": null, "track": null, "artist": null, "album": null, "release_date": null, "release_year": null, "extractor": "youtube", "webpage_url_basename": "QwZF8xQHlxE", "extractor_key": "Youtube", "n_entries": 31, "playlist": "Java SE", "playlist_id": "PLX8CzqL3ArzWgR5JtKFV3RklcGhNHvXvD", "playlist_title": "Java SE", "playlist_uploader": "Java", "playlist_uploader_id": "java", "playlist_index": 11, "thumbnails": [{"url": "https://i.ytimg.com/vi/QwZF8xQHlxE/maxresdefault.jpg", "id": "0"}], "display_id": "QwZF8xQHlxE", "requested_subtitles": null, "format": "248 - 1920x1080 (DASH video)+140 - audio only (DASH audio)", "format_id": "248+140", "width": 1920, "height": 1080, "resolution": null, "fps": 30, "vcodec": "vp9", "vbr": null, "stretched_ratio": null, "acodec": "mp4a.40.2", "abr": 128, "ext": "webm", "fulltitle": "Collections.compare:JDK, Eclipse, Guava, Apache", "_filename": "Collections.compare -JDK, Eclipse, Guava, Apache-QwZF8xQHlxE.webm"}
{"id": "mhravU1HL4k", "uploader": "Java", "uploader_id": "java", "uploader_url": "http://www.youtube.com/user/java", "channel_id": "UCmRtPmgnQ04CMUpSUqPfhxQ", "channel_url": "http://www.youtube.com/channel/UCmRtPmgnQ04CMUpSUqPfhxQ", "upload_date": "20171004", "license": null, "creator": null, "title": "Full Speed Ahead! Ahead of Time Compilation for Java SE", "alt_title": null, "thumbnail": "https://i.ytimg.com/vi/mhravU1HL4k/maxresdefault.jpg", "description": "David Buck, Principal Member of Technical Staff, Oracle\n\nOne of the lesser-known features coming with JDK 9 is experimental support for ahead-of-time (AOT) compilation. Compiling Java bytecode into ready-to-execute machine code before runtime means that many applications may benefit from quicker startup and, in the case of multiple JVM instances, even lower memory consumption. In this demo-heavy session, you will see what advantages AOT has to offer and, perhaps even more importantly, what its limitations are. You will also get the opportunity to see Java\u2019s new AOT compilation in action and leave with the knowledge needed to experiment on your own later. Although Java\u2019s AOT is not yet ready for production use, this is a great chance to get a sneak peek at one of HotSpot\u2019s most exciting new technologies.", "categories": ["Science & Technology"], "tags": ["JavaOne 2017", "java"], "subtitles": {}, "automatic_captions": {}, "duration": 3021, "age_limit": 0, "annotations": null, "chapters": null, "webpage_url": "https://www.youtube.com/watch?v=mhravU1HL4k", "view_count": 3041, "like_count": 53, "dislike_count": 0, "average_rating": 5.0, "is_live": null, "start_time": null, "end_time": null, "series": null, "season_number": null, "episode_number": null, "track": null, "artist": null, "album": null, "release_date": null, "release_year": null, "extractor": "youtube", "webpage_url_basename": "mhravU1HL4k", "extractor_key": "Youtube", "n_entries": 31, "playlist": "Java SE", "playlist_id": "PLX8CzqL3ArzWgR5JtKFV3RklcGhNHvXvD", "playlist_title": "Java SE", "playlist_uploader": "Java", "playlist_uploader_id": "java", "playlist_index": 12, "thumbnails": [{"url": "https://i.ytimg.com/vi/mhravU1HL4k/maxresdefault.jpg", "id": "0"}], "display_id": "mhravU1HL4k", "requested_subtitles": null, "format": "248 - 1920x1080 (DASH video)+140 - audio only (DASH audio)", "format_id": "248+140", "width": 1920, "height": 1080, "resolution": null, "fps": 30, "vcodec": "vp9", "vbr": null, "stretched_ratio": null, "acodec": "mp4a.40.2", "abr": 128, "ext": "webm", "fulltitle": "Full Speed Ahead! Ahead of Time Compilation for Java SE", "_filename": "Full Speed Ahead! Ahead of Time Compilation for Java SE-mhravU1HL4k.webm"}
{"id": "84W9iY3CwdQ", "uploader": "Java", "uploader_id": "java", "uploader_url": "http://www.youtube.com/user/java", "channel_id": "UCmRtPmgnQ04CMUpSUqPfhxQ", "channel_url": "http://www.youtube.com/channel/UCmRtPmgnQ04CMUpSUqPfhxQ", "upload_date": "20171004", "license": null, "creator": null, "title": "Three Microservice Patterns to Tear Down Your Monoliths", "alt_title": null, "thumbnail": "https://i.ytimg.com/vi/84W9iY3CwdQ/maxresdefault.jpg", "description": "Per-Ake Minborg, CIO / CTO, Speedment\n\nEmil Forslund, Software Developer, Speedment, Inc.\n\nDo you think switching to a microservice-oriented architecture is easier said than done? You are not alone. Many organizations today struggle with tightly coupled software and unmaintainable monoliths, but migrating a decade-old codebase is both expensive and tiresome. This session shows you how you can start developing microservices for an existing infrastructure today, using a combination of top-notch technologies, including Speedment and others. You\u2019ll see the magic triangle of event sourcing, command-query responsibility segregation (CQRS), and materialized views and learn why these concepts will change the way you look at scalable software development forever, whether you\u2019re working with servers or with apps.", "categories": ["Science & Technology"], "tags": ["java", "JavaOne 2017"], "subtitles": {}, "automatic_captions": {}, "duration": 2799, "age_limit": 0, "annotations": null, "chapters": null, "webpage_url": "https://www.youtube.com/watch?v=84W9iY3CwdQ", "view_count": 14358, "like_count": 156, "dislike_count": 8, "average_rating": 4.8048782, "is_live": null, "start_time": null, "end_time": null, "series": null, "season_number": null, "episode_number": null, "track": null, "artist": null, "album": null, "release_date": null, "release_year": null, "extractor": "youtube", "webpage_url_basename": "84W9iY3CwdQ", "extractor_key": "Youtube", "n_entries": 31, "playlist": "Java SE", "playlist_id": "PLX8CzqL3ArzWgR5JtKFV3RklcGhNHvXvD", "playlist_title": "Java SE", "playlist_uploader": "Java", "playlist_uploader_id": "java", "playlist_index": 13, "thumbnails": [{"url": "https://i.ytimg.com/vi/84W9iY3CwdQ/maxresdefault.jpg", "id": "0"}], "display_id": "84W9iY3CwdQ", "requested_subtitles": null, "format": "137 - 1920x1080 (1080p)+140 - audio only (tiny)", "format_id": "137+140", "width": 1920, "height": 1080, "resolution": null, "fps": 30, "vcodec": "avc1.640028", "vbr": null, "stretched_ratio": null, "acodec": "mp4a.40.2", "abr": 128, "ext": "mp4", "fulltitle": "Three Microservice Patterns to Tear Down Your Monoliths", "_filename": "Three Microservice Patterns to Tear Down Your Monoliths-84W9iY3CwdQ.mp4"}
{"id": "xgHGpsubL5M", "uploader": "Java", "uploader_id": "java", "uploader_url": "http://www.youtube.com/user/java", "channel_id": "UCmRtPmgnQ04CMUpSUqPfhxQ", "channel_url": "http://www.youtube.com/channel/UCmRtPmgnQ04CMUpSUqPfhxQ", "upload_date": "20171004", "license": null, "creator": null, "title": "Streams in the Wild", "alt_title": null, "thumbnail": "https://i.ytimg.com/vi/xgHGpsubL5M/maxresdefault.jpg", "description": "Jos\u00e9 Paumard, Consultant, JPEFI\n\nThe Stream API is the best tool of the JDK for processing data in a clean and efficient way. Still, there are some classic data processing patterns that cannot be implemented with the available methods, such as grouping or accumulating elements. The Stream API was built on the Spliterator API, which can be used to connect streams on nonstandard sources of data and to create streams on other streams. Implementing this interface is not straightforward. This session shows you everything you should know to create your own spliterators, in live coding examples and slides. From the splitting of strings to the computation of statistics on shifting windows, the presentation covers all the aspects of this API.", "categories": ["Science & Technology"], "tags": ["JavaOne 2017", "java"], "subtitles": {}, "automatic_captions": {}, "duration": 2496, "age_limit": 0, "annotations": null, "chapters": null, "webpage_url": "https://www.youtube.com/watch?v=xgHGpsubL5M", "view_count": 2660, "like_count": 45, "dislike_count": 0, "average_rating": 5.0, "is_live": null, "start_time": null, "end_time": null, "series": null, "season_number": null, "episode_number": null, "track": null, "artist": null, "album": null, "release_date": null, "release_year": null, "extractor": "youtube", "webpage_url_basename": "xgHGpsubL5M", "extractor_key": "Youtube", "n_entries": 31, "playlist": "Java SE", "playlist_id": "PLX8CzqL3ArzWgR5JtKFV3RklcGhNHvXvD", "playlist_title": "Java SE", "playlist_uploader": "Java", "playlist_uploader_id": "java", "playlist_index": 14, "thumbnails": [{"url": "https://i.ytimg.com/vi/xgHGpsubL5M/maxresdefault.jpg", "id": "0"}], "display_id": "xgHGpsubL5M", "requested_subtitles": null, "format": "137 - 1920x1080 (1080p)+140 - audio only (tiny)", "format_id": "137+140", "width": 1920, "height": 1080, "resolution": null, "fps": 30, "vcodec": "avc1.640028", "vbr": null, "stretched_ratio": null, "acodec": "mp4a.40.2", "abr": 128, "ext": "mp4", "fulltitle": "Streams in the Wild", "_filename": "Streams in the Wild-xgHGpsubL5M.mp4"}
{"id": "iixQAYnBnJw", "uploader": "Java", "uploader_id": "java", "uploader_url": "http://www.youtube.com/user/java", "channel_id": "UCmRtPmgnQ04CMUpSUqPfhxQ", "channel_url": "http://www.youtube.com/channel/UCmRtPmgnQ04CMUpSUqPfhxQ", "upload_date": "20171004", "license": null, "creator": null, "title": "Troubleshooting Memory Problems in Java Applications", "alt_title": null, "thumbnail": "https://i.ytimg.com/vi/iixQAYnBnJw/maxresdefault.jpg", "description": "Poonam Parhar, Consulting Member of Technical Staff, Oracle\n\nTroubleshooting memory problems can be tricky, but the right approach and proper set of tools can simplify the process substantially. Several kinds of OutOfMemoryError messages can be reported by the Java HotSpot VM, and it is important to understand these error messages clearly and have a wide range of diagnostic and troubleshooting tools in our toolkit to diagnose and root out these problems. This session discusses the right approach and a broad range of diagnostic tools that can be very useful in troubleshooting Java memory issues.", "categories": ["Science & Technology"], "tags": ["JavaOne 2017", "java"], "subtitles": {}, "automatic_captions": {}, "duration": 2557, "age_limit": 0, "annotations": null, "chapters": null, "webpage_url": "https://www.youtube.com/watch?v=iixQAYnBnJw", "view_count": 10835, "like_count": 162, "dislike_count": 4, "average_rating": 4.9036145, "is_live": null, "start_time": null, "end_time": null, "series": null, "season_number": null, "episode_number": null, "track": null, "artist": null, "album": null, "release_date": null, "release_year": null, "extractor": "youtube", "webpage_url_basename": "iixQAYnBnJw", "extractor_key": "Youtube", "n_entries": 31, "playlist": "Java SE", "playlist_id": "PLX8CzqL3ArzWgR5JtKFV3RklcGhNHvXvD", "playlist_title": "Java SE", "playlist_uploader": "Java", "playlist_uploader_id": "java", "playlist_index": 15, "thumbnails": [{"url": "https://i.ytimg.com/vi/iixQAYnBnJw/maxresdefault.jpg", "id": "0"}], "display_id": "iixQAYnBnJw", "requested_subtitles": null, "format": "137 - 1920x1080 (1080p)+140 - audio only (tiny)", "format_id": "137+140", "width": 1920, "height": 1080, "resolution": null, "fps": 30, "vcodec": "avc1.640028", "vbr": null, "stretched_ratio": null, "acodec": "mp4a.40.2", "abr": 128, "ext": "mp4", "fulltitle": "Troubleshooting Memory Problems in Java Applications", "_filename": "Troubleshooting Memory Problems in Java Applications-iixQAYnBnJw.mp4"}
{"id": "V0tdZYY9y_E", "uploader": "Java", "uploader_id": "java", "uploader_url": "http://www.youtube.com/user/java", "channel_id": "UCmRtPmgnQ04CMUpSUqPfhxQ", "channel_url": "http://www.youtube.com/channel/UCmRtPmgnQ04CMUpSUqPfhxQ", "upload_date": "20171004", "license": null, "creator": null, "title": "Visualizing Aircraft Data: Oracle IoT Cloud Service, Raspberry Pi, and Radio Surveillance", "alt_title": null, "thumbnail": "https://i.ytimg.com/vi/V0tdZYY9y_E/maxresdefault.jpg", "description": "Jerry Ward, Managing Partner, Viscosity North America\n\nRich Niemiec, Chief Innovation Officer, Viscosity North America\n\nNeed to track a single aircraft or an entire fleet without spending a ton of money? In this session, the speakers explore real-life use cases for the Internet of Things and embedded systems with the Raspberry Pi. They build an inexpensive Raspberry Pi setup, including a dual-band Automatic Dependent Surveillance\u2013Broadcast (ADS-B) radio receiver, GPS receiver, network interface, and Java interface to Oracle Internet of Things Cloud Service. They integrate this data with an Oracle JavaScript Extension Toolkit (Oracle JET) framework viewing traffic in real time. The FAA\u2019s ADS-B is a precise satellite-based surveillance system that broadcasts real-time weather, uses GPS technology to determine any aircraft\u2019s location and airspeed, and relays that data to those who are listening.", "categories": ["Science & Technology"], "tags": ["java", "JavaOne 2017"], "subtitles": {}, "automatic_captions": {}, "duration": 2794, "age_limit": 0, "annotations": null, "chapters": null, "webpage_url": "https://www.youtube.com/watch?v=V0tdZYY9y_E", "view_count": 3814, "like_count": 33, "dislike_count": 1, "average_rating": 4.8823528, "is_live": null, "start_time": null, "end_time": null, "series": null, "season_number": null, "episode_number": null, "track": null, "artist": null, "album": null, "release_date": null, "release_year": null, "extractor": "youtube", "webpage_url_basename": "V0tdZYY9y_E", "extractor_key": "Youtube", "n_entries": 31, "playlist": "Java SE", "playlist_id": "PLX8CzqL3ArzWgR5JtKFV3RklcGhNHvXvD", "playlist_title": "Java SE", "playlist_uploader": "Java", "playlist_uploader_id": "java", "playlist_index": 16, "thumbnails": [{"url": "https://i.ytimg.com/vi/V0tdZYY9y_E/maxresdefault.jpg", "id": "0"}], "display_id": "V0tdZYY9y_E", "requested_subtitles": null, "format": "137 - 1920x1080 (1080p)+140 - audio only (tiny)", "format_id": "137+140", "width": 1920, "height": 1080, "resolution": null, "fps": 30, "vcodec": "avc1.640028", "vbr": null, "stretched_ratio": null, "acodec": "mp4a.40.2", "abr": 128, "ext": "mp4", "fulltitle": "Visualizing Aircraft Data: Oracle IoT Cloud Service, Raspberry Pi, and Radio Surveillance", "_filename": "Visualizing Aircraft Data - Oracle IoT Cloud Service, Raspberry Pi, and Radio Surveillance-V0tdZYY9y_E.mp4"}
{"id": "bG3VvAUlfL8", "uploader": "Java", "uploader_id": "java", "uploader_url": "http://www.youtube.com/user/java", "channel_id": "UCmRtPmgnQ04CMUpSUqPfhxQ", "channel_url": "http://www.youtube.com/channel/UCmRtPmgnQ04CMUpSUqPfhxQ", "upload_date": "20171004", "license": null, "creator": null, "title": "Lambda Chops: Recipes for Simpler, More Expressive Code", "alt_title": null, "thumbnail": "https://i.ytimg.com/vi/bG3VvAUlfL8/maxresdefault.jpg", "description": "Ian Robertson, Application Architect, Myriad Genetics, Inc.\n\nAlthough the new Streams API has been a great showcase for lambda methods, there are many other ways this new language feature can be used to make friendlier APIs and more-expressive code. Lambdas can be used for several tasks that historically required significant boilerplate, type-unsafe constructs, or both. From new ways to express metadata to enforcing proper resource handling, this session takes a look at a myriad of ways, big and small, that you can use lambdas to improve APIs and streamline your code. It also addresses some of the limitations of lambdas and some techniques for overcoming them. Come to get inspired about ways you can use lambdas to write beautiful and effective code.", "categories": ["Science & Technology"], "tags": ["java", "JavaOne 2017"], "subtitles": {}, "automatic_captions": {}, "duration": 2525, "age_limit": 0, "annotations": null, "chapters": null, "webpage_url": "https://www.youtube.com/watch?v=bG3VvAUlfL8", "view_count": 4537, "like_count": 77, "dislike_count": 4, "average_rating": 4.8024693, "is_live": null, "start_time": null, "end_time": null, "series": null, "season_number": null, "episode_number": null, "track": null, "artist": null, "album": null, "release_date": null, "release_year": null, "extractor": "youtube", "webpage_url_basename": "bG3VvAUlfL8", "extractor_key": "Youtube", "n_entries": 31, "playlist": "Java SE", "playlist_id": "PLX8CzqL3ArzWgR5JtKFV3RklcGhNHvXvD", "playlist_title": "Java SE", "playlist_uploader": "Java", "playlist_uploader_id": "java", "playlist_index": 17, "thumbnails": [{"url": "https://i.ytimg.com/vi/bG3VvAUlfL8/maxresdefault.jpg", "id": "0"}], "display_id": "bG3VvAUlfL8", "requested_subtitles": null, "format": "248 - 1920x1080 (1080p)+140 - audio only (tiny)", "format_id": "248+140", "width": 1920, "height": 1080, "resolution": null, "fps": 30, "vcodec": "vp9", "vbr": null, "stretched_ratio": null, "acodec": "mp4a.40.2", "abr": 128, "ext": "webm", "fulltitle": "Lambda Chops: Recipes for Simpler, More Expressive Code", "_filename": "Lambda Chops - Recipes for Simpler, More Expressive Code-bG3VvAUlfL8.webm"}
{"id": "PbIBYxVyWNs", "uploader": "Java", "uploader_id": "java", "uploader_url": "http://www.youtube.com/user/java", "channel_id": "UCmRtPmgnQ04CMUpSUqPfhxQ", "channel_url": "http://www.youtube.com/channel/UCmRtPmgnQ04CMUpSUqPfhxQ", "upload_date": "20171004", "license": null, "creator": null, "title": "It\u2019s Java, but Not As We Know It", "alt_title": null, "thumbnail": "https://i.ytimg.com/vi/PbIBYxVyWNs/maxresdefault.jpg", "description": "Simon Ritter, Deputy CTO, Azul Systems\n\nThis presentation starts with a review of lambda expressions in JDK 8 and then digs into the performance implications of using them, looking at the use of invokedynamic rather than simple syntactic sugar for anonymous inner classes. The origins of lambda expressions go back 80 years, well before Java (and even modern computing) started. They are based on the work of Alonso Church, who created lambda calculus as a mathematical model of computation. The session concludes by exploring how, using only one new functional interface, we can (in theory) solve any problem by using only lambda expressions. This really is Java, but most of it won\u2019t look like any code you\u2019ve ever seen. Be prepared for some mind-bending use of lambda expressions!", "categories": ["Science & Technology"], "tags": ["JavaOne 2017", "java"], "subtitles": {}, "automatic_captions": {}, "duration": 2650, "age_limit": 0, "annotations": null, "chapters": null, "webpage_url": "https://www.youtube.com/watch?v=PbIBYxVyWNs", "view_count": 5826, "like_count": 103, "dislike_count": 4, "average_rating": 4.8504672, "is_live": null, "start_time": null, "end_time": null, "series": null, "season_number": null, "episode_number": null, "track": null, "artist": null, "album": null, "release_date": null, "release_year": null, "extractor": "youtube", "webpage_url_basename": "PbIBYxVyWNs", "extractor_key": "Youtube", "n_entries": 31, "playlist": "Java SE", "playlist_id": "PLX8CzqL3ArzWgR5JtKFV3RklcGhNHvXvD", "playlist_title": "Java SE", "playlist_uploader": "Java", "playlist_uploader_id": "java", "playlist_index": 18, "thumbnails": [{"url": "https://i.ytimg.com/vi/PbIBYxVyWNs/maxresdefault.jpg", "id": "0"}], "display_id": "PbIBYxVyWNs", "requested_subtitles": null, "format": "248 - 1920x1080 (1080p)+140 - audio only (tiny)", "format_id": "248+140", "width": 1920, "height": 1080, "resolution": null, "fps": 30, "vcodec": "vp9", "vbr": null, "stretched_ratio": null, "acodec": "mp4a.40.2", "abr": 128, "ext": "webm", "fulltitle": "It\u2019s Java, but Not As We Know It", "_filename": "It\u2019s Java, but Not As We Know It-PbIBYxVyWNs.webm"}
{"id": "64UO1YjVcZ0", "uploader": "Java", "uploader_id": "java", "uploader_url": "http://www.youtube.com/user/java", "channel_id": "UCmRtPmgnQ04CMUpSUqPfhxQ", "channel_url": "http://www.youtube.com/channel/UCmRtPmgnQ04CMUpSUqPfhxQ", "upload_date": "20171002", "license": null, "creator": null, "title": "Free Your Lambdas", "alt_title": null, "thumbnail": "https://i.ytimg.com/vi/64UO1YjVcZ0/maxresdefault.jpg", "description": "Jos\u00e9 Paumard, Consultant, JPEFI\n\nLambdas can be used in many places and in many ways. This tutorial session shows how lambdas and functional interfaces can be used to create new APIs and implement well-known patterns. It starts at the very beginning: how to write a lambda from an instance of an anonymous class. Then it shows some of the new methods added to the Collection API that leverage lambdas and default methods in interfaces, allowing for the addition of new methods while improving performance. The presentation also covers how functional interfaces have been used to create new APIs, mainly on real examples from the JDK. Finally, it shows how well-known patterns can be implemented with lambdas, leading to cleaner and more robust code.", "categories": ["Science & Technology"], "tags": ["java"], "subtitles": {}, "automatic_captions": {}, "duration": 6608, "age_limit": 0, "annotations": null, "chapters": null, "webpage_url": "https://www.youtube.com/watch?v=64UO1YjVcZ0", "view_count": 2262, "like_count": 25, "dislike_count": 2, "average_rating": 4.7037039, "is_live": null, "start_time": null, "end_time": null, "series": null, "season_number": null, "episode_number": null, "track": null, "artist": null, "album": null, "release_date": null, "release_year": null, "extractor": "youtube", "webpage_url_basename": "64UO1YjVcZ0", "extractor_key": "Youtube", "n_entries": 31, "playlist": "Java SE", "playlist_id": "PLX8CzqL3ArzWgR5JtKFV3RklcGhNHvXvD", "playlist_title": "Java SE", "playlist_uploader": "Java", "playlist_uploader_id": "java", "playlist_index": 19, "thumbnails": [{"url": "https://i.ytimg.com/vi/64UO1YjVcZ0/maxresdefault.jpg", "id": "0"}], "display_id": "64UO1YjVcZ0", "requested_subtitles": null, "format": "248 - 1920x1080 (DASH video)+140 - audio only (DASH audio)", "format_id": "248+140", "width": 1920, "height": 1080, "resolution": null, "fps": 30, "vcodec": "vp9", "vbr": null, "stretched_ratio": null, "acodec": "mp4a.40.2", "abr": 128, "ext": "webm", "fulltitle": "Free Your Lambdas", "_filename": "Free Your Lambdas-64UO1YjVcZ0.webm"}
{"id": "GOMovkQCYD4", "uploader": "Java", "uploader_id": "java", "uploader_url": "http://www.youtube.com/user/java", "channel_id": "UCmRtPmgnQ04CMUpSUqPfhxQ", "channel_url": "http://www.youtube.com/channel/UCmRtPmgnQ04CMUpSUqPfhxQ", "upload_date": "20171002", "license": null, "creator": null, "title": "Journey\u2019s End: Collection and Reduction in the Streams API", "alt_title": null, "thumbnail": "https://i.ytimg.com/vi/GOMovkQCYD4/maxresdefault.jpg", "description": "Maurice Naftalin, Principal Developer, Morningside Light Ltd\n\nFor streams to do useful work, they must end in a terminal operation. Most often that will be a collector, a new kind of operation invented for the Streams API. To use streams effectively, you need to understand how collectors work, what predefined collectors are available, and the factors that affect collector performance. This deep dive into the Collectors API explores the many predefined collectors and how to combine them for added power. You\u2019ll do practical work, learning how to choose the right composition of collectors to solve practical programming problems. And you\u2019ll see the difference between collection and reduction, how to recognize when you need to write your own collector, and the principles and rules for doing that.", "categories": ["Science & Technology"], "tags": ["java"], "subtitles": {}, "automatic_captions": {}, "duration": 7011, "age_limit": 0, "annotations": null, "chapters": null, "webpage_url": "https://www.youtube.com/watch?v=GOMovkQCYD4", "view_count": 1737, "like_count": 38, "dislike_count": 1, "average_rating": 4.8974357, "is_live": null, "start_time": null, "end_time": null, "series": null, "season_number": null, "episode_number": null, "track": null, "artist": null, "album": null, "release_date": null, "release_year": null, "extractor": "youtube", "webpage_url_basename": "GOMovkQCYD4", "extractor_key": "Youtube", "n_entries": 31, "playlist": "Java SE", "playlist_id": "PLX8CzqL3ArzWgR5JtKFV3RklcGhNHvXvD", "playlist_title": "Java SE", "playlist_uploader": "Java", "playlist_uploader_id": "java", "playlist_index": 20, "thumbnails": [{"url": "https://i.ytimg.com/vi/GOMovkQCYD4/maxresdefault.jpg", "id": "0"}], "display_id": "GOMovkQCYD4", "requested_subtitles": null, "format": "248 - 1920x1080 (DASH video)+140 - audio only (DASH audio)", "format_id": "248+140", "width": 1920, "height": 1080, "resolution": null, "fps": 30, "vcodec": "vp9", "vbr": null, "stretched_ratio": null, "acodec": "mp4a.40.2", "abr": 128, "ext": "webm", "fulltitle": "Journey\u2019s End: Collection and Reduction in the Streams API", "_filename": "Journey\u2019s End - Collection and Reduction in the Streams API-GOMovkQCYD4.webm"}
{"id": "G-vlQaPMAxg", "uploader": "Java", "uploader_id": "java", "uploader_url": "http://www.youtube.com/user/java", "channel_id": "UCmRtPmgnQ04CMUpSUqPfhxQ", "channel_url": "http://www.youtube.com/channel/UCmRtPmgnQ04CMUpSUqPfhxQ", "upload_date": "20171002", "license": null, "creator": null, "title": "Twitter\u2019s Quest for a Wholly Graal Runtime", "alt_title": null, "thumbnail": "https://i.ytimg.com/vi/G-vlQaPMAxg/maxresdefault.jpg", "description": "Christian Thalinger, Staff Software Engineer, Twitter, Inc.\n\nTwitter is a massively distributed system with thousands of machines running thousands of JVMs. In any similar big system, a small change in performance and CPU utilization is multiplied thousandfold and results in big savings: electricity costs, cooling costs, and possibly reduction of server farm size. One way to improve Java performance and reduce CPU utilization is to simply generate better machine code. Simply is obviously not trivial but doable. Twitter is going down that road and experimenting with Graal to generate better code and reduce cost. Learn more in this session.", "categories": ["Science & Technology"], "tags": ["java"], "subtitles": {}, "automatic_captions": {}, "duration": 2468, "age_limit": 0, "annotations": null, "chapters": null, "webpage_url": "https://www.youtube.com/watch?v=G-vlQaPMAxg", "view_count": 3341, "like_count": 51, "dislike_count": 4, "average_rating": 4.7090907, "is_live": null, "start_time": null, "end_time": null, "series": null, "season_number": null, "episode_number": null, "track": null, "artist": null, "album": null, "release_date": null, "release_year": null, "extractor": "youtube", "webpage_url_basename": "G-vlQaPMAxg", "extractor_key": "Youtube", "n_entries": 31, "playlist": "Java SE", "playlist_id": "PLX8CzqL3ArzWgR5JtKFV3RklcGhNHvXvD", "playlist_title": "Java SE", "playlist_uploader": "Java", "playlist_uploader_id": "java", "playlist_index": 21, "thumbnails": [{"url": "https://i.ytimg.com/vi/G-vlQaPMAxg/maxresdefault.jpg", "id": "0"}], "display_id": "G-vlQaPMAxg", "requested_subtitles": null, "format": "137 - 1920x1080 (1080p)+140 - audio only (tiny)", "format_id": "137+140", "width": 1920, "height": 1080, "resolution": null, "fps": 30, "vcodec": "avc1.640028", "vbr": null, "stretched_ratio": null, "acodec": "mp4a.40.2", "abr": 128, "ext": "mp4", "fulltitle": "Twitter\u2019s Quest for a Wholly Graal Runtime", "_filename": "Twitter\u2019s Quest for a Wholly Graal Runtime-G-vlQaPMAxg.mp4"}
{"id": "Nn0aYf2kn1w", "uploader": "Java", "uploader_id": "java", "uploader_url": "http://www.youtube.com/user/java", "channel_id": "UCmRtPmgnQ04CMUpSUqPfhxQ", "channel_url": "http://www.youtube.com/channel/UCmRtPmgnQ04CMUpSUqPfhxQ", "upload_date": "20171002", "license": null, "creator": null, "title": "Refactoring to Functional Style", "alt_title": null, "thumbnail": "https://i.ytimg.com/vi/Nn0aYf2kn1w/maxresdefault.jpg", "description": "Venkat Subramaniam, President, Agile Developer, Inc.\n\nIn Java we've programmed with the imperative style for a few decades now. With Java 8, we can also code in functional style, which has several benefits: concise code that\u2019s more expressive, easier to understand, and easier to change. But the transition from imperative to functional style is a hard journey. It\u2019s not as much an issue of getting comfortable with the syntax\u2014it\u2019s the challenge of thinking functionally. What better way to learn that transition than taking imperative code and refactoring it to a more functional style. This presentation starts with multiple code examples written in imperative style and shows how to approach refactoring them to functional style.", "categories": ["Science & Technology"], "tags": ["java", "JavaOne 2017"], "subtitles": {}, "automatic_captions": {}, "duration": 2572, "age_limit": 0, "annotations": null, "chapters": null, "webpage_url": "https://www.youtube.com/watch?v=Nn0aYf2kn1w", "view_count": 2667, "like_count": 52, "dislike_count": 6, "average_rating": 4.5862069, "is_live": null, "start_time": null, "end_time": null, "series": null, "season_number": null, "episode_number": null, "track": null, "artist": null, "album": null, "release_date": null, "release_year": null, "extractor": "youtube", "webpage_url_basename": "Nn0aYf2kn1w", "extractor_key": "Youtube", "n_entries": 31, "playlist": "Java SE", "playlist_id": "PLX8CzqL3ArzWgR5JtKFV3RklcGhNHvXvD", "playlist_title": "Java SE", "playlist_uploader": "Java", "playlist_uploader_id": "java", "playlist_index": 22, "thumbnails": [{"url": "https://i.ytimg.com/vi/Nn0aYf2kn1w/maxresdefault.jpg", "id": "0"}], "display_id": "Nn0aYf2kn1w", "requested_subtitles": null, "format": "137 - 1920x1080 (DASH video)+140 - audio only (DASH audio)", "format_id": "137+140", "width": 1920, "height": 1080, "resolution": null, "fps": 30, "vcodec": "avc1.640028", "vbr": null, "stretched_ratio": null, "acodec": "mp4a.40.2", "abr": 128, "ext": "mp4", "fulltitle": "Refactoring to Functional Style", "_filename": "Refactoring to Functional Style-Nn0aYf2kn1w.mp4"}
{"id": "Uj1_4shgXpk", "uploader": "Java", "uploader_id": "java", "uploader_url": "http://www.youtube.com/user/java", "channel_id": "UCmRtPmgnQ04CMUpSUqPfhxQ", "channel_url": "http://www.youtube.com/channel/UCmRtPmgnQ04CMUpSUqPfhxQ", "upload_date": "20171002", "license": null, "creator": null, "title": "Understanding Java Garbage Collection", "alt_title": null, "thumbnail": "https://i.ytimg.com/vi/Uj1_4shgXpk/maxresdefault.jpg", "description": "Gil Tene, CTO, Azul\n\nGarbage collection is an integral part of application behavior on Java platforms, yet it is often misunderstood. Developers have choices in selecting and tuning collector mechanisms as well as in application architecture. This session reviews and classifies various garbage collection techniques available in JVMs today. After a quick overview of common garbage collection techniques such as generational, parallel, stop-the-world, incremental, and concurrent algorithms, it defines terms and metrics common to all collectors. The presentation also classifies each major JVM collector\u2019s mechanisms and discusses the trade-offs involved in balancing requirements for responsiveness, throughput, space, and available memory.", "categories": ["Science & Technology"], "tags": ["java", "JavaOne 2017"], "subtitles": {}, "automatic_captions": {}, "duration": 3114, "age_limit": 0, "annotations": null, "chapters": null, "webpage_url": "https://www.youtube.com/watch?v=Uj1_4shgXpk", "view_count": 10834, "like_count": 136, "dislike_count": 7, "average_rating": 4.8041959, "is_live": null, "start_time": null, "end_time": null, "series": null, "season_number": null, "episode_number": null, "track": null, "artist": null, "album": null, "release_date": null, "release_year": null, "extractor": "youtube", "webpage_url_basename": "Uj1_4shgXpk", "extractor_key": "Youtube", "n_entries": 31, "playlist": "Java SE", "playlist_id": "PLX8CzqL3ArzWgR5JtKFV3RklcGhNHvXvD", "playlist_title": "Java SE", "playlist_uploader": "Java", "playlist_uploader_id": "java", "playlist_index": 23, "thumbnails": [{"url": "https://i.ytimg.com/vi/Uj1_4shgXpk/maxresdefault.jpg", "id": "0"}], "display_id": "Uj1_4shgXpk", "requested_subtitles": null, "format": "137 - 1920x1080 (DASH video)+140 - audio only (DASH audio)", "format_id": "137+140", "width": 1920, "height": 1080, "resolution": null, "fps": 30, "vcodec": "avc1.640028", "vbr": null, "stretched_ratio": null, "acodec": "mp4a.40.2", "abr": 128, "ext": "mp4", "fulltitle": "Understanding Java Garbage Collection", "_filename": "Understanding Java Garbage Collection-Uj1_4shgXpk.mp4"}
{"id": "AAiB3fDwyRM", "uploader": "Java", "uploader_id": "java", "uploader_url": "http://www.youtube.com/user/java", "channel_id": "UCmRtPmgnQ04CMUpSUqPfhxQ", "channel_url": "http://www.youtube.com/channel/UCmRtPmgnQ04CMUpSUqPfhxQ", "upload_date": "20171002", "license": null, "creator": null, "title": "Shenandoah 2 0: Now That We\u2019ve Gotten the GC Pause Times Under Control, What\u2019s Next?", "alt_title": null, "thumbnail": "https://i.ytimg.com/vi/AAiB3fDwyRM/maxresdefault.jpg", "description": "Christine Flood, Software Engineer, Red Hat, Inc.\n\nShenandoah is in OpenJDK 8 and 9 in Fedora and RHEL, and Red Hat hopes to have it accepted upstream in JDK 10. With the pause-time goals met, there is still more to do. Generational GC improves performance for programs with many short-lived objects, by collecting only the young part of the heap, but that technique pessimizes performance for least recently used (LRU) applications such as web caches. This session explores an alternative that makes it possible to perform partial collections of any regions. You can use generational heuristics to collect young regions, LRU heuristics for old regions, or adaptive heuristics that choose regions based on previous application behavior. Come to this session for a deep dive into the implementation of Shenandoah 2.0.", "categories": ["Science & Technology"], "tags": ["JavaOne 2017", "java"], "subtitles": {}, "automatic_captions": {}, "duration": 1719, "age_limit": 0, "annotations": null, "chapters": null, "webpage_url": "https://www.youtube.com/watch?v=AAiB3fDwyRM", "view_count": 2590, "like_count": 43, "dislike_count": 3, "average_rating": 4.7391305, "is_live": null, "start_time": null, "end_time": null, "series": null, "season_number": null, "episode_number": null, "track": null, "artist": null, "album": null, "release_date": null, "release_year": null, "extractor": "youtube", "webpage_url_basename": "AAiB3fDwyRM", "extractor_key": "Youtube", "n_entries": 31, "playlist": "Java SE", "playlist_id": "PLX8CzqL3ArzWgR5JtKFV3RklcGhNHvXvD", "playlist_title": "Java SE", "playlist_uploader": "Java", "playlist_uploader_id": "java", "playlist_index": 24, "thumbnails": [{"url": "https://i.ytimg.com/vi/AAiB3fDwyRM/maxresdefault.jpg", "id": "0"}], "display_id": "AAiB3fDwyRM", "requested_subtitles": null, "format": "137 - 1920x1080 (1080p)+140 - audio only (tiny)", "format_id": "137+140", "width": 1920, "height": 1080, "resolution": null, "fps": 30, "vcodec": "avc1.640028", "vbr": null, "stretched_ratio": null, "acodec": "mp4a.40.2", "abr": 128, "ext": "mp4", "fulltitle": "Shenandoah 2 0: Now That We\u2019ve Gotten the GC Pause Times Under Control, What\u2019s Next?", "_filename": "Shenandoah 2 0 - Now That We\u2019ve Gotten the GC Pause Times Under Control, What\u2019s Next-AAiB3fDwyRM.mp4"}
{"id": "x5akmCWgGY0", "uploader": "Java", "uploader_id": "java", "uploader_url": "http://www.youtube.com/user/java", "channel_id": "UCmRtPmgnQ04CMUpSUqPfhxQ", "channel_url": "http://www.youtube.com/channel/UCmRtPmgnQ04CMUpSUqPfhxQ", "upload_date": "20171002", "license": null, "creator": null, "title": "Parallel Streams, CompletableFuture, and All That: Concurrency in Java 8", "alt_title": null, "thumbnail": "https://i.ytimg.com/vi/x5akmCWgGY0/maxresdefault.jpg", "description": "Kenneth Kousen, President, Kousen IT, Inc.\n\nThe Java 8 (and 9) standard library includes multiple techniques for taking advantage of parallelism and concurrency, including parallel streams and the CompletableFuture class. Combined with the ExecutorService and other classes from java.util.concurrent, they give developers a wide range of choices for optimizing program speed. This session reviews the options and trade-offs involved.", "categories": ["Science & Technology"], "tags": ["JavaOne 2017", "java"], "subtitles": {}, "automatic_captions": {}, "duration": 2885, "age_limit": 0, "annotations": null, "chapters": null, "webpage_url": "https://www.youtube.com/watch?v=x5akmCWgGY0", "view_count": 19820, "like_count": 332, "dislike_count": 3, "average_rating": 4.964179, "is_live": null, "start_time": null, "end_time": null, "series": null, "season_number": null, "episode_number": null, "track": null, "artist": null, "album": null, "release_date": null, "release_year": null, "extractor": "youtube", "webpage_url_basename": "x5akmCWgGY0", "extractor_key": "Youtube", "n_entries": 31, "playlist": "Java SE", "playlist_id": "PLX8CzqL3ArzWgR5JtKFV3RklcGhNHvXvD", "playlist_title": "Java SE", "playlist_uploader": "Java", "playlist_uploader_id": "java", "playlist_index": 25, "thumbnails": [{"url": "https://i.ytimg.com/vi/x5akmCWgGY0/maxresdefault.jpg", "id": "0"}], "display_id": "x5akmCWgGY0", "requested_subtitles": null, "format": "137 - 1920x1080 (1080p)+140 - audio only (tiny)", "format_id": "137+140", "width": 1920, "height": 1080, "resolution": null, "fps": 30, "vcodec": "avc1.640028", "vbr": null, "stretched_ratio": null, "acodec": "mp4a.40.2", "abr": 128, "ext": "mp4", "fulltitle": "Parallel Streams, CompletableFuture, and All That: Concurrency in Java 8", "_filename": "Parallel Streams, CompletableFuture, and All That - Concurrency in Java 8-x5akmCWgGY0.mp4"}
{"id": "gtcTftvj0d0", "uploader": "Java", "uploader_id": "java", "uploader_url": "http://www.youtube.com/user/java", "channel_id": "UCmRtPmgnQ04CMUpSUqPfhxQ", "channel_url": "http://www.youtube.com/channel/UCmRtPmgnQ04CMUpSUqPfhxQ", "upload_date": "20171002", "license": null, "creator": null, "title": "Modular Development with JDK 9", "alt_title": null, "thumbnail": "https://i.ytimg.com/vi/gtcTftvj0d0/maxresdefault.jpg", "description": "Alex Buckley, Editor, JLS/JVMS, Oracle\n\nA modular development style benefits every Java developer, whether the application is one JAR or one hundred JARs. This session introduces the Java 9 module system that's been used to structure the JDK as dozens of reusable modules that strongly protect their internals. Then it explains how you can create modules to enforce the structure inherent in your application. It will prepare you for some of the pitfalls of modular development, notably the technical debt present in popular libraries that rely on JDK internals. Finally, the session looks at how tools are preparing for modules.\n\nChapters to help you navigate the video content:\n\nPart 1: Programming in the Large (2:12)\nJava Base Module (5:40)\nEncapsulation in JDK 9 (6:30)\nRunning a Modular application (13:56)\nMaven and JDK 9 (16:05)\nPart 2: Migrating to Modules (24:56)\nAutomatic Modules (32:19)\nKey points to remember about the Migration to Modules (34:08)\nPart 3: Modular JDK (34:30)\nCompatibility with the Modular JDK (37:15)\nModular JDK Summary (39:37)\n\nhttps://blogs.oracle.com/java/modular-development", "categories": ["Science & Technology"], "tags": ["What's new in Java 9", "modules", "Java 9", "JavaOne 2017", "module system", "java", "JDK 9", "migrating to modules"], "subtitles": {}, "automatic_captions": {}, "duration": 2911, "age_limit": 0, "annotations": null, "chapters": [{"start_time": 132.0, "end_time": 340.0, "title": "Part 1: Programming in the Large ()"}, {"start_time": 340.0, "end_time": 390.0, "title": "Java Base Module ()"}, {"start_time": 390.0, "end_time": 836.0, "title": "Encapsulation in JDK 9 ()"}, {"start_time": 836.0, "end_time": 965.0, "title": "Running a Modular application ()"}, {"start_time": 965.0, "end_time": 1496.0, "title": "Maven and JDK 9 ()"}, {"start_time": 1496.0, "end_time": 1939.0, "title": "Part 2: Migrating to Modules ()"}, {"start_time": 1939.0, "end_time": 2048.0, "title": "Automatic Modules ()"}, {"start_time": 2048.0, "end_time": 2070.0, "title": "Key points to remember about the Migration to Modules ()"}, {"start_time": 2070.0, "end_time": 2235.0, "title": "Part 3: Modular JDK ()"}, {"start_time": 2235.0, "end_time": 2377.0, "title": "Compatibility with the Modular JDK ()"}, {"start_time": 2377.0, "end_time": 2911, "title": "Modular JDK Summary ()"}], "webpage_url": "https://www.youtube.com/watch?v=gtcTftvj0d0", "view_count": 12039, "like_count": 153, "dislike_count": 0, "average_rating": 5.0, "is_live": null, "start_time": null, "end_time": null, "series": null, "season_number": null, "episode_number": null, "track": null, "artist": null, "album": null, "release_date": null, "release_year": null, "extractor": "youtube", "webpage_url_basename": "gtcTftvj0d0", "extractor_key": "Youtube", "n_entries": 31, "playlist": "Java SE", "playlist_id": "PLX8CzqL3ArzWgR5JtKFV3RklcGhNHvXvD", "playlist_title": "Java SE", "playlist_uploader": "Java", "playlist_uploader_id": "java", "playlist_index": 26, "thumbnails": [{"url": "https://i.ytimg.com/vi/gtcTftvj0d0/maxresdefault.jpg", "id": "0"}], "display_id": "gtcTftvj0d0", "requested_subtitles": null, "format": "137 - 1920x1080 (1080p)+140 - audio only (tiny)", "format_id": "137+140", "width": 1920, "height": 1080, "resolution": null, "fps": 30, "vcodec": "avc1.640028", "vbr": null, "stretched_ratio": null, "acodec": "mp4a.40.2", "abr": 128, "ext": "mp4", "fulltitle": "Modular Development with JDK 9", "_filename": "Modular Development with JDK 9-gtcTftvj0d0.mp4"}
{"id": "-mIrA5cVfZ4", "uploader": "Java", "uploader_id": "java", "uploader_url": "http://www.youtube.com/user/java", "channel_id": "UCmRtPmgnQ04CMUpSUqPfhxQ", "channel_url": "http://www.youtube.com/channel/UCmRtPmgnQ04CMUpSUqPfhxQ", "upload_date": "20171003", "license": null, "creator": null, "title": "JUnit 5: New Opportunities for Testing on the JVM", "alt_title": null, "thumbnail": "https://i.ytimg.com/vi/-mIrA5cVfZ4/maxresdefault.jpg", "description": "Sam Brannen, Software Consultant, Swiftmind\n\nThis session starts off with an overview of the inspiration for and architecture of JUnit 5, from launchers to test engines, and then takes the audience on a live coding tour, covering support for tagging, custom display names, dependency injection, repeated tests, parameterized tests, conditional test execution, lambda expressions for assertions, assumptions, dynamic tests, and implementing tests via interface default methods (a.k.a., testing traits). The presentation goes over the extension model in JUnit Jupiter, discussing how to author and register extensions for conditional tests, parameter resolution (a.k.a., dependency injection), lifecycle callbacks, and more. Last, it quickly showcases the new JUnit Jupiter support in Spring Framework 5.0.", "categories": ["Science & Technology"], "tags": ["java", "JavaOne 2017"], "subtitles": {}, "automatic_captions": {}, "duration": 2869, "age_limit": 0, "annotations": null, "chapters": null, "webpage_url": "https://www.youtube.com/watch?v=-mIrA5cVfZ4", "view_count": 6004, "like_count": 63, "dislike_count": 1, "average_rating": 4.9375, "is_live": null, "start_time": null, "end_time": null, "series": null, "season_number": null, "episode_number": null, "track": null, "artist": null, "album": null, "release_date": null, "release_year": null, "extractor": "youtube", "webpage_url_basename": "-mIrA5cVfZ4", "extractor_key": "Youtube", "n_entries": 31, "playlist": "Java SE", "playlist_id": "PLX8CzqL3ArzWgR5JtKFV3RklcGhNHvXvD", "playlist_title": "Java SE", "playlist_uploader": "Java", "playlist_uploader_id": "java", "playlist_index": 27, "thumbnails": [{"url": "https://i.ytimg.com/vi/-mIrA5cVfZ4/maxresdefault.jpg", "id": "0"}], "display_id": "-mIrA5cVfZ4", "requested_subtitles": null, "format": "137 - 1920x1080 (1080p)+140 - audio only (tiny)", "format_id": "137+140", "width": 1920, "height": 1080, "resolution": null, "fps": 30, "vcodec": "avc1.640028", "vbr": null, "stretched_ratio": null, "acodec": "mp4a.40.2", "abr": 128, "ext": "mp4", "fulltitle": "JUnit 5: New Opportunities for Testing on the JVM", "_filename": "JUnit 5 - New Opportunities for Testing on the JVM--mIrA5cVfZ4.mp4"}
{"id": "xC8fEeo7izI", "uploader": "Java", "uploader_id": "java", "uploader_url": "http://www.youtube.com/user/java", "channel_id": "UCmRtPmgnQ04CMUpSUqPfhxQ", "channel_url": "http://www.youtube.com/channel/UCmRtPmgnQ04CMUpSUqPfhxQ", "upload_date": "20171004", "license": null, "creator": null, "title": "Analyzing HotSpot Crashes", "alt_title": null, "thumbnail": "https://i.ytimg.com/vi/xC8fEeo7izI/maxresdefault.jpg", "description": "Volker Simonis, Development Expert, SAP\n\nHave you ever found hs_err_pid or replay_pid files in your Java application directory? Has your Java application ever crashed and you didn\u2019t know why? This session unveils the contents stored by the HotSpot crash handler in the corresponding error files and how this information can be used to analyze and reproduce the crash. It also introduces tools such as the jcmd and the HotSpot Serviceability Agent, which helps introspect native core files and extract the relevant Java information that is otherwise not easily accessible by native debuggers. After this session, you\u2019ll be able to easily detect, classify, and handle problems you encounter with your Java HotSpot VM.", "categories": ["Science & Technology"], "tags": ["JavaOne 2017", "java"], "subtitles": {}, "automatic_captions": {}, "duration": 2743, "age_limit": 0, "annotations": null, "chapters": null, "webpage_url": "https://www.youtube.com/watch?v=xC8fEeo7izI", "view_count": 650, "like_count": 15, "dislike_count": 0, "average_rating": 5.0, "is_live": null, "start_time": null, "end_time": null, "series": null, "season_number": null, "episode_number": null, "track": null, "artist": null, "album": null, "release_date": null, "release_year": null, "extractor": "youtube", "webpage_url_basename": "xC8fEeo7izI", "extractor_key": "Youtube", "n_entries": 31, "playlist": "Java SE", "playlist_id": "PLX8CzqL3ArzWgR5JtKFV3RklcGhNHvXvD", "playlist_title": "Java SE", "playlist_uploader": "Java", "playlist_uploader_id": "java", "playlist_index": 28, "thumbnails": [{"url": "https://i.ytimg.com/vi/xC8fEeo7izI/maxresdefault.jpg", "id": "0"}], "display_id": "xC8fEeo7izI", "requested_subtitles": null, "format": "248 - 1920x1080 (DASH video)+140 - audio only (DASH audio)", "format_id": "248+140", "width": 1920, "height": 1080, "resolution": null, "fps": 30, "vcodec": "vp9", "vbr": null, "stretched_ratio": null, "acodec": "mp4a.40.2", "abr": 128, "ext": "webm", "fulltitle": "Analyzing HotSpot Crashes", "_filename": "Analyzing HotSpot Crashes-xC8fEeo7izI.webm"}
{"id": "oTnujfacyPQ", "uploader": "Devoxx", "uploader_id": "UCCBVCTuk6uJrN3iFV_3vurg", "uploader_url": "http://www.youtube.com/channel/UCCBVCTuk6uJrN3iFV_3vurg", "channel_id": "UCCBVCTuk6uJrN3iFV_3vurg", "channel_url": "http://www.youtube.com/channel/UCCBVCTuk6uJrN3iFV_3vurg", "upload_date": "20170411", "license": null, "creator": null, "title": "Reactive Programming in Java by Venkat Subramaniam", "alt_title": null, "thumbnail": "https://i.ytimg.com/vi/oTnujfacyPQ/maxresdefault.jpg", "description": "Reactive Programming in gaining a lot of excitement. Many libraries, tools, and frameworks are beginning to make use of reactive libraries. Besides, applications dealing with big data or high frequency data can benefit from this programming paradigm. Come to this presentation to learn about what reactive programming is, what kind of problems it solves, how it solves them. We will take an example oriented approach to learning the programming model and the abstraction.\n\nDr. Venkat Subramaniam is an award-winning author, founder of Agile Developer, Inc., creator of agilelearner.com, and an instructional professor at the University of Houston. He has trained and mentored thousands of software developers in the US, Canada, Europe, and Asia, and is a regularly-invited speaker at several international conferences. Venkat helps his clients effectively apply and succeed with sustainable agile practices on their software projects.\n\nVenkat is a (co)author of multiple technical books, including the 2007 Jolt Productivity award winning book Practices of an Agile Developer. You can find a list of his books at agiledeveloper.com. You can reach him by email at venkats@agiledeveloper.com or on twitter at @venkat_s", "categories": ["Science & Technology"], "tags": [], "subtitles": {}, "automatic_captions": {}, "duration": 2932, "age_limit": 0, "annotations": null, "chapters": null, "webpage_url": "https://www.youtube.com/watch?v=oTnujfacyPQ", "view_count": 12581, "like_count": 202, "dislike_count": 7, "average_rating": 4.8660288, "is_live": null, "start_time": null, "end_time": null, "series": null, "season_number": null, "episode_number": null, "track": null, "artist": null, "album": null, "release_date": null, "release_year": null, "extractor": "youtube", "webpage_url_basename": "oTnujfacyPQ", "extractor_key": "Youtube", "n_entries": 31, "playlist": "Java SE", "playlist_id": "PLX8CzqL3ArzWgR5JtKFV3RklcGhNHvXvD", "playlist_title": "Java SE", "playlist_uploader": "Java", "playlist_uploader_id": "java", "playlist_index": 29, "thumbnails": [{"url": "https://i.ytimg.com/vi/oTnujfacyPQ/maxresdefault.jpg", "id": "0"}], "display_id": "oTnujfacyPQ", "requested_subtitles": null, "format": "247 - 1280x720 (720p)+251 - audio only (tiny)", "format_id": "247+251", "width": 1280, "height": 720, "resolution": null, "fps": 24, "vcodec": "vp9", "vbr": null, "stretched_ratio": null, "acodec": "opus", "abr": 160, "ext": "webm", "fulltitle": "Reactive Programming in Java by Venkat Subramaniam", "_filename": "Reactive Programming in Java by Venkat Subramaniam-oTnujfacyPQ.webm"}
{"id": "15X0qFtBqiQ", "uploader": "Devoxx", "uploader_id": "UCCBVCTuk6uJrN3iFV_3vurg", "uploader_url": "http://www.youtube.com/channel/UCCBVCTuk6uJrN3iFV_3vurg", "channel_id": "UCCBVCTuk6uJrN3iFV_3vurg", "channel_url": "http://www.youtube.com/channel/UCCBVCTuk6uJrN3iFV_3vurg", "upload_date": "20170411", "license": null, "creator": null, "title": "Functional Programming with Java 8 by Venkat Subramaniam", "alt_title": null, "thumbnail": "https://i.ytimg.com/vi/15X0qFtBqiQ/maxresdefault.jpg", "description": "Subscribe to Devoxx on YouTube @ https://bit.ly/devoxx-youtube\nLike Devoxx on Facebook @ https://www.facebook.com/devoxxcom\nFollow Devoxx on Twitter @ https://twitter.com/devoxx\n\nJava 8 is the most significant change to the language since it's introduction, surpassing changes seen in any of the previous versions. It is not merely syntactical change or addition of a few extra features, it's a paradigm shift. Come to this presentation to learn about the power and capabilities of functional programming using Java 8 and how to benefit from those when building Java applications.\n\nDr. Venkat Subramaniam is an award-winning author, founder of Agile Developer, Inc., creator of agilelearner.com, and an instructional professor at the University of Houston. He has trained and mentored thousands of software developers in the US, Canada, Europe, and Asia, and is a regularly-invited speaker at several international conferences. Venkat helps his clients effectively apply and succeed with sustainable agile practices on their software projects.\n\nVenkat is a (co)author of multiple technical books, including the 2007 Jolt Productivity award winning book Practices of an Agile Developer. You can find a list of his books at agiledeveloper.com. You can reach him by email at venkats@agiledeveloper.com or on twitter at @venkat_s", "categories": ["Science & Technology"], "tags": [], "subtitles": {}, "automatic_captions": {}, "duration": 3099, "age_limit": 0, "annotations": null, "chapters": null, "webpage_url": "https://www.youtube.com/watch?v=15X0qFtBqiQ", "view_count": 29778, "like_count": 450, "dislike_count": 8, "average_rating": 4.930131, "is_live": null, "start_time": null, "end_time": null, "series": null, "season_number": null, "episode_number": null, "track": null, "artist": null, "album": null, "release_date": null, "release_year": null, "extractor": "youtube", "webpage_url_basename": "15X0qFtBqiQ", "extractor_key": "Youtube", "n_entries": 31, "playlist": "Java SE", "playlist_id": "PLX8CzqL3ArzWgR5JtKFV3RklcGhNHvXvD", "playlist_title": "Java SE", "playlist_uploader": "Java", "playlist_uploader_id": "java", "playlist_index": 30, "thumbnails": [{"url": "https://i.ytimg.com/vi/15X0qFtBqiQ/maxresdefault.jpg", "id": "0"}], "display_id": "15X0qFtBqiQ", "requested_subtitles": null, "format": "247 - 1280x720 (720p)+251 - audio only (tiny)", "format_id": "247+251", "width": 1280, "height": 720, "resolution": null, "fps": 24, "vcodec": "vp9", "vbr": null, "stretched_ratio": null, "acodec": "opus", "abr": 160, "ext": "webm", "fulltitle": "Functional Programming with Java 8 by Venkat Subramaniam", "_filename": "Functional Programming with Java 8 by Venkat Subramaniam-15X0qFtBqiQ.webm"}
{"id": "bv8oPxWKg8Q", "uploader": "Java", "uploader_id": "java", "uploader_url": "http://www.youtube.com/user/java", "channel_id": "UCmRtPmgnQ04CMUpSUqPfhxQ", "channel_url": "http://www.youtube.com/channel/UCmRtPmgnQ04CMUpSUqPfhxQ", "upload_date": "20170606", "license": null, "creator": null, "title": "You got your Browser in my Virtual Machine! Impersonating Javascript environments in the Java VM", "alt_title": null, "thumbnail": "https://i.ytimg.com/vi/bv8oPxWKg8Q/maxresdefault.jpg", "description": "Ean Schuessler - @brainfoodies\n\nSharing validation logic and system state management between client and server is a very common need. Learn how sophisticated browser programming models can help you bridge the gap between your JavaScript and Java codebases.\n\nWhat are WebExtensions? (9:12)\nIsomorphic applications and Nashorn, meaning running your code in multiple environment (12:30)\nThe evolution of JavaScript (21:08)\nReact/Flux/Redux (24:03)\nWhat is  Filter Bubble Project?(29:48)\n\nLinks for Nashorn project: http://openjdk.java.net/projects/nashorn/", "categories": ["Science & Technology"], "tags": ["java", "JVM", "Java Virtual Machine", "Nashorn", "JavaScript", "JavaScript Framework", "JavaScript Engine", "Java Programming language", "Java community", "Robots", "Humanoid Robots", "Sophia", "Social Robot"], "subtitles": {}, "automatic_captions": {}, "duration": 2590, "age_limit": 0, "annotations": null, "chapters": [{"start_time": 552.0, "end_time": 750.0, "title": "What are WebExtensions? ()"}, {"start_time": 750.0, "end_time": 1268.0, "title": "Isomorphic applications and Nashorn, meaning running your code in multiple environment ()"}, {"start_time": 1268.0, "end_time": 1443.0, "title": "The evolution of JavaScript ()"}, {"start_time": 1443.0, "end_time": 1788.0, "title": "React/Flux/Redux ()"}, {"start_time": 1788.0, "end_time": 2590, "title": "What is Filter Bubble Project?()"}], "webpage_url": "https://www.youtube.com/watch?v=bv8oPxWKg8Q", "view_count": 3066, "like_count": 15, "dislike_count": 0, "average_rating": 5.0, "is_live": null, "start_time": null, "end_time": null, "series": null, "season_number": null, "episode_number": null, "track": null, "artist": null, "album": null, "release_date": null, "release_year": null, "extractor": "youtube", "webpage_url_basename": "bv8oPxWKg8Q", "extractor_key": "Youtube", "n_entries": 31, "playlist": "Java SE", "playlist_id": "PLX8CzqL3ArzWgR5JtKFV3RklcGhNHvXvD", "playlist_title": "Java SE", "playlist_uploader": "Java", "playlist_uploader_id": "java", "playlist_index": 31, "thumbnails": [{"url": "https://i.ytimg.com/vi/bv8oPxWKg8Q/maxresdefault.jpg", "id": "0"}], "display_id": "bv8oPxWKg8Q", "requested_subtitles": null, "format": "247 - 1280x720 (720p)+251 - audio only (tiny)", "format_id": "247+251", "width": 1280, "height": 720, "resolution": null, "fps": 30, "vcodec": "vp9", "vbr": null, "stretched_ratio": null, "acodec": "opus", "abr": 160, "ext": "webm", "fulltitle": "You got your Browser in my Virtual Machine! Impersonating Javascript environments in the Java VM", "_filename": "You got your Browser in my Virtual Machine! Impersonating Javascript environments in the Java VM-bv8oPxWKg8Q.webm"}
