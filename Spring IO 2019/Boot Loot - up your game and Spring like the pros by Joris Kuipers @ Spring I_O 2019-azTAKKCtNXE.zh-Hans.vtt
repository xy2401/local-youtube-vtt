WEBVTT
Kind: captions
Language: zh-Hans

00:00:00.900 --> 00:00:09.559
 [音乐] 

00:00:06.069 --> 00:00:10.940
非常感谢你，我要跳过

00:00:09.559 --> 00:00:13.280
介绍，因为那是一个很好的

00:00:10.940 --> 00:00:16.100
简介我们要去的是什么

00:00:13.280 --> 00:00:18.740
说说今天，我决定为此

00:00:16.100 --> 00:00:21.380
年添加spring io做战利品

00:00:18.740 --> 00:00:23.270
演示受到战利品盒的启发

00:00:21.380 --> 00:00:25.190
您可能熟悉国际间

00:00:23.270 --> 00:00:27.560
游戏或喜欢我，如果您有孩子

00:00:25.190 --> 00:00:29.900
以低战利品进入游戏的想法

00:00:27.560 --> 00:00:31.670
盒子，如果你买，你不知道确切

00:00:29.900 --> 00:00:33.620
里面会有什么，但是大部分

00:00:31.670 --> 00:00:35.150
应该很好，这正是我

00:00:33.620 --> 00:00:36.890
打算参加这次演讲，所以我

00:00:35.150 --> 00:00:39.110
将涉及与

00:00:36.890 --> 00:00:41.480
有效地使用 spring boot 和

00:00:39.110 --> 00:00:45.230
高效，我敢肯定会有

00:00:41.480 --> 00:00:46.310
在那里为你们所有人

00:00:45.230 --> 00:00:48.020
我要讲的是

00:00:46.310 --> 00:00:49.640
实际上基于生产经验

00:00:48.020 --> 00:00:51.560
这意味着我不只是要展示

00:00:49.640 --> 00:00:52.970
你我整理的东西我实际上要去

00:00:51.560 --> 00:00:55.130
给你看我做的事，然后

00:00:52.970 --> 00:00:57.260
成功投产，所以

00:00:55.130 --> 00:00:58.430
应该也为您工作

00:00:57.260 --> 00:01:01.820
我们要介绍的第一件事是

00:00:58.430 --> 00:01:03.079
默认错误页面或那个邪恶

00:01:01.820 --> 00:01:06.050
 spring boot 时出现错误

00:01:03.079 --> 00:01:07.640
为您提供的Web应用程序

00:01:06.050 --> 00:01:09.350
可能会或可能不会熟悉，但是

00:01:07.640 --> 00:01:11.210
想法是，如果您不指定

00:01:09.350 --> 00:01:13.640
任何你自己的东西都没有

00:01:11.210 --> 00:01:16.280
 Spring Web中发生的异常

00:01:13.640 --> 00:01:18.500
应用程序，如果它是浏览器

00:01:16.280 --> 00:01:20.299
客户端，您将获得默认

00:01:18.500 --> 00:01:22.400
错误页面称为白标错误

00:01:20.299 --> 00:01:24.409
该页面将仅显示一些详细信息

00:01:22.400 --> 00:01:26.330
默认情况下不显示错误

00:01:24.409 --> 00:01:28.490
堆栈跟踪，如果您要使用另一个

00:01:26.330 --> 00:01:31.549
客户端程序化客户端

00:01:28.490 --> 00:01:33.799
 Jason呈现的消息向您显示

00:01:31.549 --> 00:01:36.920
实际错误消息在其他

00:01:33.799 --> 00:01:38.690
信息，我们将很快

00:01:36.920 --> 00:01:40.640
看那个看看结果如何

00:01:38.690 --> 00:01:45.710
错误是当你要

00:01:40.640 --> 00:01:49.130
在您的对象中使用验证，以便

00:01:45.710 --> 00:01:51.950
我要在这里切换到IntelliJ 

00:01:49.130 --> 00:01:53.960
只是为了让您知道我所有的代码

00:01:51.950 --> 00:01:56.030
将在git repo中进行演示，我将

00:01:53.960 --> 00:01:57.619
最后给您URL，这样您就不会

00:01:56.030 --> 00:02:01.450
必须拍照或记录笔记，除非

00:01:57.619 --> 00:02:05.060
你真的很喜欢你在这里看到的是

00:02:01.450 --> 00:02:06.530
足够大，是的，我们有一个

00:02:05.060 --> 00:02:08.450
在这里购买请求，因为我们

00:02:06.530 --> 00:02:10.279
要买一个回路盒和光盘王牌

00:02:08.450 --> 00:02:13.250
我们需要提供两个领域

00:02:10.279 --> 00:02:14.900
提供实际的密钥或

00:02:13.250 --> 00:02:17.450
我们要购买的产品

00:02:14.900 --> 00:02:18.800
我们要说多少钱

00:02:17.450 --> 00:02:21.470
我们实际上愿意为此花费

00:02:18.800 --> 00:02:22.790
现在理想的是所有这些游戏

00:02:21.470 --> 00:02:25.400
供应商希望您花费尽可能多的钱

00:02:22.790 --> 00:02:26.900
尽可能赚钱，但至少在

00:02:25.400 --> 00:02:28.310
荷兰，他们得到一些

00:02:26.900 --> 00:02:29.930
关于这件事的法规到位

00:02:28.310 --> 00:02:31.400
因为我们正在和孩子们打交道， 

00:02:29.930 --> 00:02:33.200
实际上有些战利品是

00:02:31.400 --> 00:02:35.930
实际赌博，因为您可以出售

00:02:33.200 --> 00:02:38.420
结果，因此在这种情况下，我们仅限于

00:02:35.930 --> 00:02:43.040
我们可以实际花费的25欧元

00:02:38.420 --> 00:02:44.959
这堂课我们要做什么

00:02:43.040 --> 00:02:47.000
是我们会拥有一个超级简单的

00:02:44.959 --> 00:02:48.860
 Spring Boot应用程序在这里

00:02:47.000 --> 00:02:50.959
只包含一个休息

00:02:48.860 --> 00:02:53.959
接收进来的帖子的控制器

00:02:50.959 --> 00:02:56.660
请求一些JSON并将其封送

00:02:53.959 --> 00:02:58.790
放入这个战利品购买请求中， 

00:02:56.660 --> 00:03:02.090
然后简单地返回一个字符串，说

00:02:58.790 --> 00:03:04.190
嘿，这在这里很重要

00:03:02.090 --> 00:03:06.860
是您看到的广告有效注释

00:03:04.190 --> 00:03:10.370
在战利品盒购买请求上

00:03:06.860 --> 00:03:12.530
这意味着在实际致电之前

00:03:10.370 --> 00:03:14.000
您的控制器方法弹簧将首先

00:03:12.530 --> 00:03:18.019
执行实际的bean验证

00:03:14.000 --> 00:03:20.570
在该对象上检查到位并继续

00:03:18.019 --> 00:03:22.489
再次回到购买请求

00:03:20.570 --> 00:03:25.610
这些字段中的必填项或不为null 

00:03:22.489 --> 00:03:27.769
我们已经安排好了钱，我们

00:03:25.610 --> 00:03:29.570
有一个正则表达式模式说

00:03:27.769 --> 00:03:32.840
 en应该由八个组成

00:03:29.570 --> 00:03:35.299
数字，让我们开始

00:03:32.840 --> 00:03:37.220
应用程序，然后我会告诉你

00:03:35.299 --> 00:03:39.380
如果我们首先通过一个

00:03:37.220 --> 00:03:41.780
正确的要求只是为了证明

00:03:39.380 --> 00:03:43.940
实际工作，然后使一些

00:03:41.780 --> 00:03:46.579
那里有些错误，所以应用程序

00:03:43.940 --> 00:03:49.790
开始或实际上我有东西

00:03:46.579 --> 00:03:52.820
在8080上运行已经让我杀了那个

00:03:49.790 --> 00:03:55.430
首先，然后在那里再次启动

00:03:52.820 --> 00:03:57.049
我们去焊接，我开始

00:03:55.430 --> 00:03:59.810
去这里的命令行，因为我

00:03:57.049 --> 00:04:02.540
将使用类似于人类的HTTP 

00:03:59.810 --> 00:04:04.670
友好的卷曲在这里提出一些要求

00:04:02.540 --> 00:04:06.799
我要在本地发布一个帖子

00:04:04.670 --> 00:04:09.799
 8080，我需要提供两件事

00:04:06.799 --> 00:04:13.310
需要提供一个

00:04:09.799 --> 00:04:15.350
数字，我需要提供的是

00:04:13.310 --> 00:04:19.700
欧元，但我忘了

00:04:15.350 --> 00:04:24.530
命名欧元要花费的是

00:04:19.700 --> 00:04:26.060
花，让我们花10欧元，我们应该

00:04:24.530 --> 00:04:26.870
现在正在回复

00:04:26.060 --> 00:04:29.510
这个词

00:04:26.870 --> 00:04:29.930
要求是正确的

00:04:29.510 --> 00:04:32.600
我们追求

00:04:29.930 --> 00:04:34.070
现在学习工作，我想告诉你什么

00:04:32.600 --> 00:04:37.100
如果我引入一些错误会发生，所以

00:04:34.070 --> 00:04:38.690
假设我说的很好，实际上我只是一个

00:04:37.100 --> 00:04:42.800
可怜的开发商，我没有钱可花

00:04:38.690 --> 00:04:44.449
我会得到一个错误，显然

00:04:42.800 --> 00:04:46.520
想法是我们需要一个正数

00:04:44.449 --> 00:04:48.470
钱，但如果你看看我们

00:04:46.520 --> 00:04:51.290
在屏幕上看到的是，我们正在

00:04:48.470 --> 00:04:53.960
得到大量数据

00:04:51.290 --> 00:04:56.540
我们在这里收到一些争论

00:04:53.960 --> 00:04:58.970
有一个资产参数字段不是很

00:04:56.540 --> 00:05:00.950
显然那是什么

00:04:58.970 --> 00:05:02.690
外部参数有代码，我们

00:05:00.950 --> 00:05:04.580
有代码，但还有另一个

00:05:02.690 --> 00:05:06.889
称为代码的字段，实际上是

00:05:04.580 --> 00:05:08.660
不同属性的组合

00:05:06.889 --> 00:05:10.580
春天将尝试解决一个错误

00:05:08.660 --> 00:05:13.040
消息，如果它实际上会做一些

00:05:10.580 --> 00:05:15.560
结果这里不是，所以你

00:05:13.040 --> 00:05:17.930
得到整个这件大事

00:05:15.560 --> 00:05:20.120
客户现在需要理解的地方

00:05:17.930 --> 00:05:22.060
从这个说出来哦，显然

00:05:20.120 --> 00:05:25.310
传入的金额错误

00:05:22.060 --> 00:05:29.150
当你离开一个

00:05:25.310 --> 00:05:31.039
外出，所以在这种情况下，您再次看到

00:05:29.150 --> 00:05:34.039
我有一整堆领域

00:05:31.039 --> 00:05:36.410
和一些错误消息说必须

00:05:34.039 --> 00:05:38.000
不知道，然后我必须

00:05:36.410 --> 00:05:39.860
仔细观察，发现

00:05:38.000 --> 00:05:42.080
在这种情况下要花费的欧元

00:05:39.860 --> 00:05:43.990
不应该知道的，显然

00:05:42.080 --> 00:05:47.270
如果我得到类似的东西

00:05:43.990 --> 00:05:49.039
我现在在这里创建错误的产品

00:05:47.270 --> 00:05:51.139
实际上有两个错误，您可以看到

00:05:49.039 --> 00:05:52.669
有两个错误计数，但是

00:05:51.139 --> 00:05:54.530
它甚至不适合屏幕，所以我

00:05:52.669 --> 00:05:57.289
必须向上滚动才能看到

00:05:54.530 --> 00:05:58.580
显然我的产品留置权必须与

00:05:57.289 --> 00:06:02.150
某些正则表达式

00:05:58.580 --> 00:06:05.599
并非如此，这就是你从中得到的

00:06:02.150 --> 00:06:08.169
盒子，这里发生的是

00:06:05.599 --> 00:06:10.400
当您收到此验证错误时

00:06:08.169 --> 00:06:12.919
导致春天的事

00:06:10.400 --> 00:06:14.599
这称为字段错误，如果您

00:06:12.919 --> 00:06:17.270
会看实际的场错误

00:06:14.599 --> 00:06:18.530
类，您将看到它扩展了一个类

00:06:17.270 --> 00:06:20.660
称为默认消息源

00:06:18.530 --> 00:06:22.669
现在可以解决的意思是

00:06:20.660 --> 00:06:25.099
里面可能有东西

00:06:22.669 --> 00:06:28.520
通过使用消息源解析为

00:06:25.099 --> 00:06:30.169
实际的人类可读消息，但是

00:06:28.520 --> 00:06:32.240
发生的是那个

00:06:30.169 --> 00:06:34.820
结果实际发生这些

00:06:32.240 --> 00:06:36.770
对象，这些字段错误只是

00:06:34.820 --> 00:06:38.330
封送了很多

00:06:36.770 --> 00:06:40.260
您在那里看到的所有字段

00:06:38.330 --> 00:06:41.940
代码中的参数和错误

00:06:40.260 --> 00:06:43.500
那实际上是从

00:06:41.940 --> 00:06:46.230
可以解析的默认消息whores和

00:06:43.500 --> 00:06:47.610
那里有一些亚型，我没有

00:06:46.230 --> 00:06:51.570
了解你，但这让我的眼睛

00:06:47.610 --> 00:06:53.070
如果我看到这个，我们尝试在其中创建

00:06:51.570 --> 00:06:56.010
我目前正在进行的项目我们尝试

00:06:53.070 --> 00:06:58.920
创建实际的基于JSON的API- 

00:06:56.010 --> 00:07:01.080
远程客户端不仅适用于Web 

00:06:58.920 --> 00:07:03.960
浏览器从反应堆中解释这一点

00:07:01.080 --> 00:07:05.880
或有角度的应用程序，这是一个可怕的

00:07:03.960 --> 00:07:08.670
用户体验基本提供给

00:07:05.880 --> 00:07:11.490
您的客户，这就是我

00:07:08.670 --> 00:07:14.070
当我看到这个时想修复

00:07:11.490 --> 00:07:16.020
如果这些领域不是很好

00:07:14.070 --> 00:07:18.030
错误实际上是

00:07:16.020 --> 00:07:20.670
可以说我可以解决的问题

00:07:18.030 --> 00:07:22.650
一个消息源，如果它实际上是

00:07:20.670 --> 00:07:24.930
解决成一个不错的错误消息， 

00:07:22.650 --> 00:07:26.910
好消息是实际上

00:07:24.930 --> 00:07:29.310
容易做到，因为有了春天

00:07:26.910 --> 00:07:31.410
引导您可以覆盖默认值

00:07:29.310 --> 00:07:33.360
错误属性的实现

00:07:31.410 --> 00:07:35.280
这称为默认错误

00:07:33.360 --> 00:07:37.020
属性并提供您自己的

00:07:35.280 --> 00:07:39.270
只需注册一个

00:07:37.020 --> 00:07:41.970
豆，那正是我想要的

00:07:39.270 --> 00:07:46.230
首先给你看，所以在这里我的小宝贝

00:07:41.970 --> 00:07:47.850
包我有一个实现是

00:07:46.230 --> 00:07:50.550
称为已解决的错误属性

00:07:47.850 --> 00:07:52.800
这扩展了默认提供的靴子

00:07:50.550 --> 00:07:54.030
尚未使用的错误属性

00:07:52.800 --> 00:07:55.890
因为我没有那个成分

00:07:54.030 --> 00:07:58.440
注释在这里，但已被注释掉

00:07:55.890 --> 00:07:59.910
所以我现在要让它活跃起来

00:07:58.440 --> 00:08:02.250
这将自动确保

00:07:59.910 --> 00:08:04.020
 spring boot 只会拿起这个

00:08:02.250 --> 00:08:06.000
类，同时进行组件扫描

00:08:04.020 --> 00:08:07.290
把它变成豆子那是什么

00:08:06.000 --> 00:08:09.600
我们在这里做，我们正在注入

00:08:07.290 --> 00:08:11.130
网络中的消息源和Spring Boot 

00:08:09.600 --> 00:08:12.570
应用实际上提供了默认消息

00:08:11.130 --> 00:08:15.030
源，所以我可以依靠那一个

00:08:12.570 --> 00:08:16.590
然后我们覆盖这个称为

00:08:15.030 --> 00:08:19.010
通过首先调用获取错误属性

00:08:16.590 --> 00:08:21.570
覆盖的原始方法

00:08:19.010 --> 00:08:24.000
然后提取一个名为

00:08:21.570 --> 00:08:25.500
错误，将返回列表

00:08:24.000 --> 00:08:27.720
您可以在此处看到的对象错误

00:08:25.500 --> 00:08:29.190
然后我们要做的是说

00:08:27.720 --> 00:08:30.420
我们要去的地方有什么错误吗

00:08:29.190 --> 00:08:33.330
我们要做的就是循环

00:08:30.420 --> 00:08:34.860
他们，我们每个人都要

00:08:33.330 --> 00:08:37.320
实际解决消息

00:08:34.860 --> 00:08:39.030
源，这就是您在这里看到的内容

00:08:37.320 --> 00:08:41.250
消息源在此获取消息

00:08:39.030 --> 00:08:43.800
情况下，我只是要使用美国语言环境

00:08:41.250 --> 00:08:46.230
因为我喜欢英文错误消息

00:08:43.800 --> 00:08:49.320
我基于海军的应用程序，但我没有

00:08:46.230 --> 00:08:52.560
关心实际的语言

00:08:49.320 --> 00:08:53.760
客户可能会要求，现在我们

00:08:52.560 --> 00:08:55.769
多做一件事

00:08:53.760 --> 00:08:58.170
因为这些错误可能是正常的

00:08:55.769 --> 00:09:00.269
对象错误，例如，如果您有

00:08:58.170 --> 00:09:02.250
验证花费了整个时间

00:09:00.269 --> 00:09:03.600
对象，或者它们可能特定于

00:09:02.250 --> 00:09:05.519
字段，以及它们是否特定于

00:09:03.600 --> 00:09:07.800
字段，那么我不只是想展示

00:09:05.519 --> 00:09:09.899
消息说像必须

00:09:07.800 --> 00:09:11.339
不知道是对的，它不提供您

00:09:09.899 --> 00:09:13.500
与上下文有关，因此我们需要一些其他

00:09:11.339 --> 00:09:14.790
在这种情况下，我们可以

00:09:13.500 --> 00:09:16.529
沮丧，我们可以说我们要

00:09:14.790 --> 00:09:18.209
获取我们想要获取的字段的名称

00:09:16.529 --> 00:09:19.769
该错误消息，我们也想

00:09:18.209 --> 00:09:21.269
具有人们的实际价值

00:09:19.769 --> 00:09:23.240
提供它，所以我们可以说这是

00:09:21.269 --> 00:09:25.110
不符合我们期望的价值

00:09:23.240 --> 00:09:26.760
否则我们将只使用

00:09:25.110 --> 00:09:29.490
解决的消息，然后我们简单地

00:09:26.760 --> 00:09:31.260
使用我们的错误覆盖该地图

00:09:29.490 --> 00:09:33.300
结果错误消息，仅此而已

00:09:31.260 --> 00:09:36.300
到此为止

00:09:33.300 --> 00:09:42.240
现在我们可以做的是重新启动

00:09:36.300 --> 00:09:46.769
应用程序，让我们现在就来看一下

00:09:42.240 --> 00:09:49.139
回到这里的控制台，并进行

00:09:46.769 --> 00:09:51.269
新要求记得有两个

00:09:49.139 --> 00:09:52.769
这个请求中的错误，我有一个

00:09:51.269 --> 00:09:54.690
零的钱

00:09:52.769 --> 00:09:57.149
不应该，我有一个额外的号码

00:09:54.690 --> 00:10:01.680
在我的产品中以及我现在所看到的

00:09:57.149 --> 00:10:03.899
是放大一点就是我只是

00:10:01.680 --> 00:10:05.579
会有两个错误数组

00:10:03.899 --> 00:10:08.040
易读错误说明产品

00:10:05.579 --> 00:10:09.569
 en必须与这八位数字匹配，并且

00:10:08.040 --> 00:10:12.319
欧元暂停交易必须大于零

00:10:09.569 --> 00:10:15.089
但提供的实际值为零

00:10:12.319 --> 00:10:17.970
所以这实际上就是获得

00:10:15.089 --> 00:10:19.980
多说一些基本的默认值

00:10:17.970 --> 00:10:21.329
呈现这些错误消息以及什么

00:10:19.980 --> 00:10:22.740
我喜欢这种方法是

00:10:21.329 --> 00:10:26.130
避免您必须进行自定义

00:10:22.740 --> 00:10:27.449
错误处理无处不在，您可以

00:10:26.130 --> 00:10:29.850
实际上与大多数

00:10:27.449 --> 00:10:31.440
 spring boot 为您提供，但要

00:10:29.850 --> 00:10:34.260
离开一些你得到的小农场

00:10:31.440 --> 00:10:37.440
当简单地整理这些

00:10:34.260 --> 00:10:41.130
现场错误，所以这是第一个

00:10:37.440 --> 00:10:42.569
我想向您展示的演示

00:10:41.130 --> 00:10:44.970
我们要去看看另一个

00:10:42.569 --> 00:10:46.949
我实际上会很棘手

00:10:44.970 --> 00:10:50.510
午餐之前，真的很棒

00:10:46.949 --> 00:10:52.980
来自Brian和的演讲

00:10:50.510 --> 00:10:54.420
这带来了关于建立网络

00:10:52.980 --> 00:10:56.100
应用程序，它们实际上向我们展示了

00:10:54.420 --> 00:10:57.660
其中一些运动是我要去的

00:10:56.100 --> 00:10:59.069
给你多展示一点，即使你是

00:10:57.660 --> 00:11:02.100
不用担心，您会学到

00:10:59.069 --> 00:11:05.399
新的 spring boot 有一些功能

00:11:02.100 --> 00:11:07.379
允许您绑定配置

00:11:05.399 --> 00:11:08.519
属性基本上可以

00:11:07.379 --> 00:11:10.679
一些配置

00:11:08.519 --> 00:11:13.229
环境中的财产疮

00:11:10.679 --> 00:11:14.699
 javabean的实例，然后就可以

00:11:13.229 --> 00:11:16.559
只是将其注入您的代码中

00:11:14.699 --> 00:11:18.449
您可以阅读实际的

00:11:16.559 --> 00:11:21.929
通过调用一些配置

00:11:18.449 --> 00:11:23.729
收集方法，这很好用

00:11:21.929 --> 00:11:25.799
特别是如果您有很多相关

00:11:23.729 --> 00:11:28.709
配置，您可以将它们分组

00:11:25.799 --> 00:11:30.959
作为属于一个的一组属性

00:11:28.709 --> 00:11:32.999
单班，然后有一些共同点

00:11:30.959 --> 00:11:34.289
在属性中命名前缀

00:11:32.999 --> 00:11:37.589
确保一切始于

00:11:34.289 --> 00:11:39.449
绑定到那个类

00:11:37.589 --> 00:11:40.679
实际上是一堆单词

00:11:39.449 --> 00:11:42.659
解释一下，但实际上很多

00:11:40.679 --> 00:11:45.479
更容易向您展示，让我们来看一下

00:11:42.659 --> 00:11:48.119
一个例子，让我们结束

00:11:45.479 --> 00:11:52.889
首先，我们有另一个

00:11:48.119 --> 00:11:56.309
这里提供一个类的项目

00:11:52.889 --> 00:11:59.220
所谓的抢劫属性，您可以看到

00:11:56.309 --> 00:12:00.539
在这种情况下，我们说我们想要

00:11:59.220 --> 00:12:04.319
具有配置属性类

00:12:00.539 --> 00:12:06.089
以及我们用于的所有属性

00:12:04.319 --> 00:12:08.399
配置这个东西会前缀

00:12:06.089 --> 00:12:10.079
与抢劫，然后我们有两个

00:12:08.399 --> 00:12:12.179
我们有允许转让的属性

00:12:10.079 --> 00:12:14.009
布尔值告诉我，如果我购买

00:12:12.179 --> 00:12:15.419
我允许一些淫荡转移到

00:12:14.009 --> 00:12:17.100
游戏中其他一些玩家为了钱

00:12:15.419 --> 00:12:19.199
像这样的东西实际上

00:12:17.100 --> 00:12:21.169
现在在荷兰非法

00:12:19.199 --> 00:12:24.959
未成年人，因为它在赌博

00:12:21.169 --> 00:12:26.669
我们有一个枚举指定

00:12:24.959 --> 00:12:28.769
我们要为其购买战利品的游戏

00:12:26.669 --> 00:12:30.689
我实际上已经内联了，所以我们有

00:12:28.769 --> 00:12:33.059
守望先锋两周和国际足联在这里

00:12:30.689 --> 00:12:34.889
因为根据维基百科，这些是

00:12:33.059 --> 00:12:38.729
您可以购买战利品的游戏，因为我不是

00:12:34.889 --> 00:12:42.029
现在是这个游戏的个人玩家

00:12:38.729 --> 00:12:43.799
我们可以做的就是

00:12:42.029 --> 00:12:47.100
小弹簧启动应用程序类

00:12:43.799 --> 00:12:48.600
首先，您可能会注意到

00:12:47.100 --> 00:12:50.129
这是我们有一个启用

00:12:48.600 --> 00:12:52.199
配置属性注释

00:12:50.129 --> 00:12:53.939
实际上有两种方法可以启用

00:12:52.199 --> 00:12:56.789
支持配置属性

00:12:53.939 --> 00:12:58.470
带注释的类，您只需打开

00:12:56.789 --> 00:12:59.939
该类由

00:12:58.470 --> 00:13:02.220
用该组件对其进行注释

00:12:59.939 --> 00:13:05.279
示例使其符合组件条件

00:13:02.220 --> 00:13:06.479
扫描或您明确提及为

00:13:05.279 --> 00:13:08.639
说这是一个配置

00:13:06.479 --> 00:13:10.979
我想要的属性类

00:13:08.639 --> 00:13:13.619
使用并使用enable实例化

00:13:10.979 --> 00:13:15.749
之后的配置属性

00:13:13.619 --> 00:13:17.789
该属性对象的实例是

00:13:15.749 --> 00:13:19.470
只需在这里自动连线到班级

00:13:17.789 --> 00:13:20.910
进入代码，然后在

00:13:19.470 --> 00:13:23.220
注入我们将要打印

00:13:20.910 --> 00:13:27.030
游戏和转移已经

00:13:23.220 --> 00:13:29.850
配置好了，所以我还没有配置

00:13:27.030 --> 00:13:32.280
还有什么让我仔细检查一下

00:13:29.850 --> 00:13:34.770
不知道我还没有配置

00:13:32.280 --> 00:13:36.030
任何事情，所以首先我要

00:13:34.770 --> 00:13:37.830
我要做的只是开始

00:13:36.030 --> 00:13:40.770
应用在这里，我们应该是

00:13:37.830 --> 00:13:42.990
看到没有配置

00:13:40.770 --> 00:13:44.970
实际上提供了这两个

00:13:42.990 --> 00:13:46.590
属性应该只是空，所以我

00:13:44.970 --> 00:13:49.800
启动我的应用程序，实际上我们

00:13:46.590 --> 00:13:51.600
可以在这里看到我们确实有一个实例

00:13:49.800 --> 00:13:54.420
的德卢斯属性，但游戏和

00:13:51.600 --> 00:13:57.090
转移很多，或者两者都没有，所以

00:13:54.420 --> 00:13:59.400
我们期望我们现在能做什么

00:13:57.090 --> 00:14:01.050
 Springwood为我们提供的方式

00:13:59.400 --> 00:14:03.570
可以定义一些配置属性

00:14:01.050 --> 00:14:05.040
为此，一个明显的方法是通过

00:14:03.570 --> 00:14:06.960
这里的应用程序属性是

00:14:05.040 --> 00:14:09.810
目前是空的，所以我能做的是

00:14:06.960 --> 00:14:11.940
可以说出带有战利品的前缀，因为那是

00:14:09.810 --> 00:14:15.330
我们配置的前缀，然后

00:14:11.940 --> 00:14:19.470
说我们有什么我们有游戏所以

00:14:15.330 --> 00:14:26.790
假设我想购买FIFA， 

00:14:19.470 --> 00:14:29.370
另一个是允许转移，现在我们

00:14:26.790 --> 00:14:32.240
将其设置为true，然后我们

00:14:29.370 --> 00:14:38.310
看看这些话是否如预期

00:14:32.240 --> 00:14:40.500
所以重新启动应用程序，然后我们

00:14:38.310 --> 00:14:42.990
现在看到我们的字符串

00:14:40.500 --> 00:14:44.610
小写FIFA中实际指定的是

00:14:42.990 --> 00:14:46.470
实际匹配写入

00:14:44.610 --> 00:14:48.420
值以使绑定发生

00:14:46.470 --> 00:14:49.800
自动，实际上我们的布尔值具有

00:14:48.420 --> 00:14:52.230
也已经配置好了，现在我们已经

00:14:49.800 --> 00:14:54.090
设置为true，所以这基本上是

00:14:52.230 --> 00:14:57.480
上一个也显示了什么

00:14:54.090 --> 00:14:59.670
演示文稿，那么它显示了什么

00:14:57.480 --> 00:15:02.100
你是这是一个很好的分组方法

00:14:59.670 --> 00:15:04.980
一些相关的配置

00:15:02.100 --> 00:15:06.510
属性，很容易访问

00:15:04.980 --> 00:15:08.280
您不需要使用很多Ed值

00:15:06.510 --> 00:15:10.890
您可以注入注解

00:15:08.280 --> 00:15:12.960
 Java对象，所以很好，但不是

00:15:10.890 --> 00:15:15.690
与实际使用不同

00:15:12.960 --> 00:15:17.640
增加价值，我们也可以轻松地使用事物

00:15:15.690 --> 00:15:19.830
如带有该值的默认值

00:15:17.640 --> 00:15:21.810
以及配置属性

00:15:19.830 --> 00:15:24.210
所以你可能想知道我到底是什么

00:15:21.810 --> 00:15:25.620
这样做的好处实际上有两个

00:15:24.210 --> 00:15:28.050
我很快想要的重要功能

00:15:25.620 --> 00:15:30.000
首先向您展示您可以获得IDE 

00:15:28.050 --> 00:15:31.320
支持这个，你可能

00:15:30.000 --> 00:15:32.820
如果您已经熟悉了

00:15:31.320 --> 00:15:34.920
使用 spring boot ，因为您会得到代码

00:15:32.820 --> 00:15:36.269
协助您的Java EE 

00:15:34.920 --> 00:15:37.619
如果您正在编辑诸如

00:15:36.269 --> 00:15:38.819
应用程序属性，但您可以获得

00:15:37.619 --> 00:15:40.290
也是为了你自己的事情

00:15:38.819 --> 00:15:42.259
我很快想展示的另一件事

00:15:40.290 --> 00:15:44.519
您支持Bean验证

00:15:42.259 --> 00:15:46.739
类似于我们的bean验证

00:15:44.519 --> 00:15:50.429
春季有MVC，所以让我们快速

00:15:46.739 --> 00:15:54.779
看看首先我们要

00:15:50.429 --> 00:15:56.249
确保如果我在这里我想

00:15:54.779 --> 00:15:58.559
能够简单地说出类似

00:15:56.249 --> 00:16:00.029
这样可以控制空间，然后得到一些

00:15:58.559 --> 00:16:03.029
目前我没有得到建议

00:16:00.029 --> 00:16:05.819
除了我能告诉春天到

00:16:03.029 --> 00:16:08.100
编译时为我做一些处理

00:16:05.819 --> 00:16:11.189
并根据我的配置属性

00:16:08.100 --> 00:16:13.230
带注释的类生成一个文件，该文件

00:16:11.189 --> 00:16:16.649
所有主要的Java IDE都可以理解

00:16:13.230 --> 00:16:18.179
像IntelliJ和Eclipse一样

00:16:16.649 --> 00:16:19.649
您基本上唯一需要做的就是

00:16:18.179 --> 00:16:21.809
是为了为此提供支持

00:16:19.649 --> 00:16:24.299
配置处理器

00:16:21.809 --> 00:16:26.100
我还将IntelliJ配置为

00:16:24.299 --> 00:16:28.199
实际上支持注释

00:16:26.100 --> 00:16:30.179
处理工具，所以应该

00:16:28.199 --> 00:16:31.799
如果您不能启用，那么实际上足够

00:16:30.179 --> 00:16:34.139
明确地，你实际上应该做一个

00:16:31.799 --> 00:16:38.509
 maven现在在命令行中构建到

00:16:34.139 --> 00:16:43.199
有这个影响的结果是

00:16:38.509 --> 00:16:45.679
实际上看起来好像没有做

00:16:43.199 --> 00:16:47.939
所以我需要触发一个构建

00:16:45.679 --> 00:16:51.149
其结果将是

00:16:47.939 --> 00:16:54.989
将是为我生成的一个新文件

00:16:51.149 --> 00:16:58.529
告诉IDE到底有什么新内容

00:16:54.989 --> 00:17:00.209
有类型，让我们看看它是否有效

00:16:58.529 --> 00:17:02.429
因为我看不到，也许我会

00:17:00.209 --> 00:17:05.220
我们需要有一个命令行

00:17:02.429 --> 00:17:06.689
不，所以你现在在这里看到的是

00:17:05.220 --> 00:17:08.970
我控制空间我实际上得到了

00:17:06.689 --> 00:17:10.949
小我会转移这是一个布尔值

00:17:08.970 --> 00:17:13.260
游戏也请注意， 

00:17:10.949 --> 00:17:15.029
转移实际上是在这里使用破折号

00:17:13.260 --> 00:17:17.309
这叫做阴谋案，你知道我会

00:17:15.029 --> 00:17:19.110
回到那个，所以这很好，我

00:17:17.309 --> 00:17:20.699
可以做到这一点，因为IDE 

00:17:19.110 --> 00:17:22.139
理解是我得到代码的布尔值

00:17:20.699 --> 00:17:24.720
协助这些价值观

00:17:22.139 --> 00:17:26.399
游戏也是如此，所以我

00:17:24.720 --> 00:17:28.139
可以配置，我可以选择

00:17:26.399 --> 00:17:29.639
那个权利，我只需要按Enter 

00:17:28.139 --> 00:17:31.139
一直到我的应用程序正常工作

00:17:29.639 --> 00:17:33.960
这是每个人的理想工作流程

00:17:31.139 --> 00:17:35.580
另一方面，开发人员不会

00:17:33.960 --> 00:17:38.460
真的告诉我这些是什么

00:17:35.580 --> 00:17:39.929
价值观，而且理想情况下，作为开发人员我

00:17:38.460 --> 00:17:41.789
想知道什么

00:17:39.929 --> 00:17:44.480
这些事情实际上意味着什么，我

00:17:41.789 --> 00:17:46.440
可以在这里做的是我可以进入我的

00:17:44.480 --> 00:17:47.480
配置对象，我可以做一些

00:17:46.440 --> 00:17:48.799
 Java文档

00:17:47.480 --> 00:17:50.000
将直接在现场进行

00:17:48.799 --> 00:17:55.270
所以这实际上就是你应该的

00:17:50.000 --> 00:17:59.360
要在这里做，所以我可以说定义

00:17:55.270 --> 00:18:01.640
允许转移，有错别字

00:17:59.360 --> 00:18:07.240
在那里，但是没关系，然后另一个

00:18:01.640 --> 00:18:13.340
我能做的就是说我们在玩什么

00:18:07.240 --> 00:18:14.690
那样买战利品

00:18:13.340 --> 00:18:16.280
现在发生的是此信息将

00:18:14.690 --> 00:18:18.320
该注释考虑在内

00:18:16.280 --> 00:18:21.260
我们将处理器工具放在同一个meta中

00:18:18.320 --> 00:18:25.429
数据文件通过ID读取，如果我去了

00:18:21.260 --> 00:18:29.770
回到这里，我实际上可以看到

00:18:25.429 --> 00:18:29.770
如果我开始配置此示例

00:18:32.500 --> 00:18:36.799
我们去吧，那样做，我可以

00:18:35.150 --> 00:18:38.480
实际上在这里看到文档

00:18:36.799 --> 00:18:40.970
说我们要买什么游戏来抢劫

00:18:38.480 --> 00:18:42.380
是的，但这很完美，因为

00:18:40.970 --> 00:18:44.870
意味着我实际上可以开始

00:18:42.380 --> 00:18:47.419
发现可用的配置为

00:18:44.870 --> 00:18:50.299
我正在使用的应用程序上的开发人员

00:18:47.419 --> 00:18:52.490
与我的团队一起工作，看看有什么价值

00:18:50.299 --> 00:18:53.960
在那里也会显示默认值

00:18:52.490 --> 00:18:56.750
值，如果您已配置任何内容

00:18:53.960 --> 00:18:58.910
这样，您可以提供一些

00:18:56.750 --> 00:19:01.070
内置文档以及其他

00:18:58.910 --> 00:19:02.390
我们现在能做的就是实际去

00:19:01.070 --> 00:19:05.450
回到这个东西

00:19:02.390 --> 00:19:08.960
我们可以抱歉的属性

00:19:05.450 --> 00:19:11.510
请在未经验证的情况下立即对其进行注释

00:19:08.960 --> 00:19:13.100
我们做那个 spring boot 

00:19:11.510 --> 00:19:15.559
自动应用一些bean验证

00:19:13.100 --> 00:19:17.540
在我们之后这个东西的实例

00:19:15.559 --> 00:19:18.980
属性已经绑定，那

00:19:17.540 --> 00:19:20.390
意思是我们可以说的很好

00:19:18.980 --> 00:19:22.460
实际允许的转移

00:19:20.390 --> 00:19:23.990
需要配置，我不允许

00:19:22.460 --> 00:19:25.340
这个东西为空，我可能

00:19:23.990 --> 00:19:28.340
想要为游戏做同样的事情

00:19:25.340 --> 00:19:29.780
在这里，我要去做，我要去

00:19:28.340 --> 00:19:32.809
回到我的应用程序属性

00:19:29.780 --> 00:19:34.100
我将要指定

00:19:32.809 --> 00:19:37.850
允许转让，但我要走了

00:19:34.100 --> 00:19:40.000
所以现在应该退出游戏

00:19:37.850 --> 00:19:42.650
发生的是如果我重新启动我的应用程序

00:19:40.000 --> 00:19:44.120
 Spring Boot将实例化一个实例

00:19:42.650 --> 00:19:45.260
我的属性对象将做

00:19:44.120 --> 00:19:46.760
绑定它将执行

00:19:45.260 --> 00:19:48.620
验证并说嘿，你实际上是

00:19:46.760 --> 00:19:50.450
那里缺少一个领域，所以它将

00:19:48.620 --> 00:19:51.910
在启动时崩溃，而不仅仅是

00:19:50.450 --> 00:19:54.290
向您显示一些堆栈跟踪，然后

00:19:51.910 --> 00:19:55.820
强迫你理解它

00:19:54.290 --> 00:19:57.770
显示一个不错的错误报告，上面写着

00:19:55.820 --> 00:20:00.320
嘿，我实际上无法绑定到

00:19:57.770 --> 00:20:01.340
战利品属性的实例

00:20:00.320 --> 00:20:03.680
的

00:20:01.340 --> 00:20:05.330
你有琵琶游戏的财产

00:20:03.680 --> 00:20:08.240
应该配置，但是

00:20:05.330 --> 00:20:10.310
实际上不，不应该这样

00:20:08.240 --> 00:20:11.690
这也意味着它变得非常

00:20:10.310 --> 00:20:13.310
容易让人看到

00:20:11.690 --> 00:20:15.080
他们忘记了的应用程序启动

00:20:13.310 --> 00:20:16.850
配置一些必需的属性

00:20:15.080 --> 00:20:19.670
应该在预期的地方

00:20:16.850 --> 00:20:23.270
 etcetera等，这真的是

00:20:19.670 --> 00:20:26.330
方便的功能，尤其是

00:20:23.270 --> 00:20:28.370
不错，我认为无论是大型项目

00:20:26.330 --> 00:20:30.440
你有很多人在工作

00:20:28.370 --> 00:20:32.120
大量的代码库，并不是每个人都是

00:20:30.440 --> 00:20:34.130
亲密地熟悉

00:20:32.120 --> 00:20:35.510
每个功能，因此您现在可以发现

00:20:34.130 --> 00:20:37.250
实际的配置是

00:20:35.510 --> 00:20:38.630
适用于您的应用程序

00:20:37.250 --> 00:20:39.650
不仅仅是记录

00:20:38.630 --> 00:20:41.270
某个地方，然后希望

00:20:39.650 --> 00:20:43.070
文档实际上保持同步

00:20:41.270 --> 00:20:45.560
与实际的代码，因为这东西

00:20:43.070 --> 00:20:47.600
正在自我记录我当前正在使用的

00:20:45.560 --> 00:20:49.790
我们在一个项目中有很多

00:20:47.600 --> 00:20:52.040
建立一套微服务

00:20:49.790 --> 00:20:53.600
有一些共享的自动配置

00:20:52.040 --> 00:20:55.970
图书馆和所有其他

00:20:53.600 --> 00:20:59.060
配置中有一些配置

00:20:55.970 --> 00:21:00.890
还有在那里进行调整

00:20:59.060 --> 00:21:02.660
提供这类配置

00:21:00.890 --> 00:21:04.640
与其他属性实例

00:21:02.660 --> 00:21:06.680
再次配置它变得非常容易

00:21:04.640 --> 00:21:08.450
让人们发现它是什么

00:21:06.680 --> 00:21:10.070
正是他们可以配置的

00:21:08.450 --> 00:21:11.710
他们应该配置何时

00:21:10.070 --> 00:21:13.820
他们正在使用您的某些功能

00:21:11.710 --> 00:21:15.230
很快就会提到更聪明的事情， 

00:21:13.820 --> 00:21:16.520
那么我们继续说，如果您正在使用

00:21:15.230 --> 00:21:18.140
这些斯普林伍德居然

00:21:16.520 --> 00:21:20.360
功能还有一个专用的

00:21:18.140 --> 00:21:22.700
默认情况下，端点称为config 

00:21:20.360 --> 00:21:24.800
可以看到所有的

00:21:22.700 --> 00:21:26.690
中的实例化配置属性

00:21:24.800 --> 00:21:28.340
应用程序上下文及其实际

00:21:26.690 --> 00:21:29.720
包含您自己的值

00:21:28.340 --> 00:21:32.900
定制配置属性

00:21:29.720 --> 00:21:35.210
显然，如果您指定了这些

00:21:32.900 --> 00:21:36.560
在即将到来的 spring boot 中宣布

00:21:35.210 --> 00:21:38.420
如果您有ADD 

00:21:36.560 --> 00:21:40.100
配置属性类

00:21:38.420 --> 00:21:41.510
实际上是自动组件可以

00:21:40.100 --> 00:21:44.270
因此您实际上甚至不需要添加

00:21:41.510 --> 00:21:46.430
组件已经是其他注释

00:21:44.270 --> 00:21:47.960
我告诉你了，这使得

00:21:46.430 --> 00:21:52.190
开始使用它更容易

00:21:47.960 --> 00:21:55.070
现在功能就是我

00:21:52.190 --> 00:21:57.170
表明你实际上是内置的

00:21:55.070 --> 00:22:00.020
已经进入IDE，它建议了一个名称

00:21:57.170 --> 00:22:02.570
像战利品一样允许转移

00:22:00.020 --> 00:22:04.760
绑定到Java属性

00:22:02.570 --> 00:22:06.740
叫骆驼套允许转移

00:22:04.760 --> 00:22:08.120
我也可以做的是

00:22:06.740 --> 00:22:10.220
指定我喜欢像

00:22:08.120 --> 00:22:11.990
环境变量全部为大写

00:22:10.220 --> 00:22:14.450
下划线将与

00:22:11.990 --> 00:22:14.659
好吧，现在我注意到当有人

00:22:14.450 --> 00:22:16.190
原为

00:22:14.659 --> 00:22:18.470
询问人们仍然在使用弹簧

00:22:16.190 --> 00:22:21.109
一只手到五只靴子

00:22:18.470 --> 00:22:22.759
如果您需要此功能

00:22:21.109 --> 00:22:25.669
在 spring boot 中被称为宽松装订

00:22:22.759 --> 00:22:27.139
 1.5及以下你实际上是被迫

00:22:25.669 --> 00:22:29.960
使用配置属性类

00:22:27.139 --> 00:22:31.669
像这样对你们这些人

00:22:29.960 --> 00:22:33.440
认为情况仍然如此

00:22:31.669 --> 00:22:35.989
他们实际上彻底修改了这个

00:22:33.440 --> 00:22:37.489
春季Mbutu中的绑定机制

00:22:35.989 --> 00:22:40.580
只要您使用， spring boot 

00:22:37.489 --> 00:22:43.070
什么叫烤肉肠小写

00:22:40.580 --> 00:22:45.769
带破折号，您甚至可以使用简单的添加

00:22:43.070 --> 00:22:47.479
值注释，您将获得

00:22:45.769 --> 00:22:49.669
宽松的绑定支持，因此您不会

00:22:47.479 --> 00:22:51.979
您基本上不再需要使用

00:22:49.669 --> 00:22:54.649
这些对象的配置

00:22:51.979 --> 00:22:56.330
为此目的，所以你知道我

00:22:54.649 --> 00:22:59.149
不知道为什么叫它

00:22:56.330 --> 00:23:03.919
烤肉肠衣但是我们要

00:22:59.149 --> 00:23:05.179
继续衡量指标基数

00:23:03.919 --> 00:23:06.919
我提到的产品是

00:23:05.179 --> 00:23:09.499
实际上是我的第一个项目

00:23:06.919 --> 00:23:11.479
大量使用新的指标支持

00:23:09.499 --> 00:23:15.259
从 spring boot 和工作时

00:23:11.479 --> 00:23:16.460
这样我做了一些调整，等等

00:23:15.259 --> 00:23:17.919
还有一些其他的事情

00:23:16.460 --> 00:23:19.909
很快想在这里告诉你

00:23:17.919 --> 00:23:22.609
包括这件事

00:23:19.909 --> 00:23:24.799
维度，所以如果你还没有看到

00:23:22.609 --> 00:23:26.330
从春天Mbutu开始，他们

00:23:24.799 --> 00:23:29.149
与某些东西有内置的集成

00:23:26.330 --> 00:23:31.549
称为千分尺

00:23:29.149 --> 00:23:33.919
用于暴露的抽象层

00:23:31.549 --> 00:23:37.519
各种时间序列的指标

00:23:33.919 --> 00:23:39.349
指标数据库和很多

00:23:37.519 --> 00:23:40.759
开箱即用的仪器

00:23:39.349 --> 00:23:42.799
各种弹簧组件，使您得到

00:23:40.759 --> 00:23:46.970
有关您的MVC控制器的指标

00:23:42.799 --> 00:23:49.309
模板JVM本身Tomcat等

00:23:46.970 --> 00:23:51.109
这对于了解什么是超级有用的

00:23:49.309 --> 00:23:52.429
您的应用程序在那里发生

00:23:51.109 --> 00:23:55.039
是以前的一些演示

00:23:52.429 --> 00:23:58.549
这里介绍基本上是什么指标

00:23:55.039 --> 00:24:00.139
这是一些统计数据吗

00:23:58.549 --> 00:24:02.419
通常超过一分钟

00:24:00.139 --> 00:24:04.909
暴露了一个可能是

00:24:02.419 --> 00:24:07.190
相反，可能是持续时间

00:24:04.909 --> 00:24:09.499
可能只是一些

00:24:07.190 --> 00:24:10.970
像你所拥有的价格

00:24:09.499 --> 00:24:12.830
用于销售产品或类似的东西

00:24:10.970 --> 00:24:15.289
那将有一些相关的

00:24:12.830 --> 00:24:17.239
键值对与每一个

00:24:15.289 --> 00:24:19.220
那里的每一个数据

00:24:17.239 --> 00:24:21.529
值称为维度或

00:24:19.220 --> 00:24:22.729
标签，他们是同一回事

00:24:21.529 --> 00:24:25.220
休息时的例子

00:24:22.729 --> 00:24:27.109
带有Spring Boot应用程序的模板，您可以

00:24:25.220 --> 00:24:28.010
自动从中获取一些指标

00:24:27.109 --> 00:24:29.780
每当你做

00:24:28.010 --> 00:24:32.450
一个可以告诉您的请求

00:24:29.780 --> 00:24:34.340
该请求的持续时间了多长时间

00:24:32.450 --> 00:24:35.960
采取处理这一点，但除了

00:24:34.340 --> 00:24:38.300
您将看到什么URL 

00:24:35.960 --> 00:24:40.550
回顾我们使用的HTTP方法

00:24:38.300 --> 00:24:42.290
是Gator发布的状态是什么

00:24:40.550 --> 00:24:45.500
响应代码是否成功

00:24:42.290 --> 00:24:47.330
还是没有，还有其他一些东西

00:24:45.500 --> 00:24:49.460
这给你一个很简单的方法

00:24:47.330 --> 00:24:51.920
洞察您的运作方式

00:24:49.460 --> 00:24:54.920
现在应用这些背后的想法

00:24:51.920 --> 00:24:56.600
标签，例如HTTP状态或

00:24:54.920 --> 00:24:57.950
您使用的速度方法是

00:24:56.600 --> 00:25:01.250
您可以将它们用于诸如

00:24:57.950 --> 00:25:03.020
过滤您的监视工具，以便

00:25:01.250 --> 00:25:05.390
也许我只想说给我

00:25:03.020 --> 00:25:07.430
成功要求我提出

00:25:05.390 --> 00:25:09.770
结果200没问题

00:25:07.430 --> 00:25:11.450
 200范围，我不感兴趣

00:25:09.770 --> 00:25:12.770
 500，也许我真的很想看看

00:25:11.450 --> 00:25:14.930
我想分别看到它们

00:25:12.770 --> 00:25:17.720
所以我可以比较多少成功

00:25:14.930 --> 00:25:20.510
我要处理的请求数

00:25:17.720 --> 00:25:22.040
实际上是失败的，那就是

00:25:20.510 --> 00:25:24.620
非常有用的功能，但这仅仅是

00:25:22.040 --> 00:25:26.360
如果值的实际数量有用

00:25:24.620 --> 00:25:29.900
对于一个特定的标签或一个特定的

00:25:26.360 --> 00:25:32.000
尺寸在某种程度上受到限制

00:25:29.900 --> 00:25:34.130
如果它增长太多，它将无限制

00:25:32.000 --> 00:25:35.570
只是成为太多信息而已

00:25:34.130 --> 00:25:38.140
甚至不能实际工作

00:25:35.570 --> 00:25:40.070
因为春天正确地引导

00:25:38.140 --> 00:25:42.350
拒绝保留所有这些信息

00:25:40.070 --> 00:25:44.720
在内存中，然后将其传递给您

00:25:42.350 --> 00:25:46.580
指标工具都可以同时使用

00:25:44.720 --> 00:25:49.160
需要确保你有点

00:25:46.580 --> 00:25:52.580
限制任何一个值的数量

00:25:49.160 --> 00:25:54.320
标签实际上可以向您显示

00:25:52.580 --> 00:25:58.760
让我们看另一个例子

00:25:54.320 --> 00:26:03.680
我为您创建了一个简单的

00:25:58.760 --> 00:26:09.970
带有控制器的Web应用程序

00:26:03.680 --> 00:26:09.970
这是控制器的作用

00:26:11.830 --> 00:26:18.890
让我们看一秒钟是的，所以这

00:26:16.550 --> 00:26:21.020
控制器仅具有两个端点

00:26:18.890 --> 00:26:23.150
允许您执行搜索请求

00:26:21.020 --> 00:26:26.090
该搜索请求接受了一个请求

00:26:23.150 --> 00:26:28.430
参数将查询拉到此处，以便

00:26:26.090 --> 00:26:30.770
意味着当我们提出请求时，我们可以

00:26:28.430 --> 00:26:32.780
传递一些查询字符串，然后

00:26:30.770 --> 00:26:34.130
在常规应用中，这东西

00:26:32.780 --> 00:26:37.520
会进行实际的搜索

00:26:34.130 --> 00:26:39.260
而是三分之二

00:26:37.520 --> 00:26:41.090
有时我只是说好，我们尝试过

00:26:39.260 --> 00:26:43.370
我们运行了搜索结果，然后

00:26:41.090 --> 00:26:45.740
我要去的另外三个请求

00:26:43.370 --> 00:26:47.600
放弃自定义状态

00:26:45.740 --> 00:26:49.730
那里有些不同的值

00:26:47.600 --> 00:26:53.899
 nemetrix，我们还有另外一个

00:26:49.730 --> 00:26:56.480
现在可以发布大幅削减的消息

00:26:53.899 --> 00:26:57.649
有这个 spring boot 应用程序

00:26:56.480 --> 00:26:59.960
实现命令行运行程序

00:26:57.649 --> 00:27:03.830
界面，所以它使用的是

00:26:59.960 --> 00:27:06.649
我已配置为的其余模板

00:27:03.830 --> 00:27:08.149
向此MVC发出一堆请求

00:27:06.649 --> 00:27:09.259
应用程序后的控制器

00:27:08.149 --> 00:27:12.019
开始，所以我要做一个

00:27:09.259 --> 00:27:13.429
千个请求，或者实际上我要

00:27:12.019 --> 00:27:14.659
提出两千个要求，因为我

00:27:13.429 --> 00:27:18.470
将要发出一千个请求

00:27:14.659 --> 00:27:21.139
查询的每个控制器方法1 

00:27:18.470 --> 00:27:23.149
在这里，我将附加实际的

00:27:21.139 --> 00:27:26.269
我们正在执行的请求数

00:27:23.149 --> 00:27:27.769
所以它将是0直到+ 9 + 

00:27:26.269 --> 00:27:30.169
 9 

00:27:27.769 --> 00:27:34.460
让我们开始，然后看看

00:27:30.169 --> 00:27:37.549
当他们启动你时会发生什么

00:27:34.460 --> 00:27:44.929
应该知道这个应用程序

00:27:37.549 --> 00:27:47.960
我也在这里配置了一个

00:27:44.929 --> 00:27:49.399
 HTTP客户端实际上是 spring boot 

00:27:47.960 --> 00:27:51.769
自动捡起它，它将

00:27:49.399 --> 00:27:53.840
使用我的apache ICP客户而不是

00:27:51.769 --> 00:27:55.909
只是一个带有您ID的java.net， 

00:27:53.840 --> 00:27:57.409
请求，我已经配置了执行器

00:27:55.909 --> 00:27:59.899
支持，这实际上很重要

00:27:57.409 --> 00:28:02.299
在这里，因为这将激活支持

00:27:59.899 --> 00:28:03.860
有关指标，所以看着我的控制台

00:28:02.299 --> 00:28:06.169
可以看到我提出了很多要求

00:28:03.860 --> 00:28:10.789
结果不同，我现在可以做什么

00:28:06.169 --> 00:28:15.259
我真的可以在这里浏览器吗

00:28:10.789 --> 00:28:18.019
转到localhost 8080斜杠X服务员

00:28:15.259 --> 00:28:20.419
较少的指标，然后我将看到的是

00:28:18.019 --> 00:28:23.570
所有不同的概述

00:28:20.419 --> 00:28:26.659
由我公开的指标

00:28:23.570 --> 00:28:28.909
应用程序，所以其中很多

00:28:26.659 --> 00:28:34.639
他们在这里是一个指标，称为

00:28:28.909 --> 00:28:36.529
 HTTP服务器指标要求，很抱歉

00:28:34.639 --> 00:28:39.559
所以我们在这里看到的是，我们做了一个

00:28:36.529 --> 00:28:40.759
总共2002要求，因为它也是

00:28:39.559 --> 00:28:42.710
计算我的这些要求

00:28:40.759 --> 00:28:44.450
目前正在为我的事件执行器

00:28:42.710 --> 00:28:46.340
端点，我可以看到花了多长时间

00:28:44.450 --> 00:28:48.619
提出这些要求，我可以看到一些

00:28:46.340 --> 00:28:50.389
其他标签或尺寸，以便我们可以

00:28:48.619 --> 00:28:52.610
看到我们都发布了帖子并收到了请求

00:28:50.389 --> 00:28:54.960
并且我们要求将搜索大幅削减至

00:28:52.610 --> 00:28:57.840
我的浏览器a1的指标

00:28:54.960 --> 00:28:59.669
我可以并且稀释我们有不同的

00:28:57.840 --> 00:29:02.640
结果我们有一个客户错误， 

00:28:59.669 --> 00:29:04.200
成功，因为我们有四个二242 

00:29:02.640 --> 00:29:06.000
九分，所以这非常有用

00:29:04.200 --> 00:29:07.409
在这种情况下的信息是

00:29:06.000 --> 00:29:09.529
如果您愿意的话，实际上相当有限

00:29:07.409 --> 00:29:12.690
将此导出为实际指标

00:29:09.529 --> 00:29:15.840
数据库，您将可以获取

00:29:12.690 --> 00:29:18.990
除此之外，我还有

00:29:15.840 --> 00:29:20.909
客户在这里的要求，这告诉我

00:29:18.990 --> 00:29:22.559
我其余模板中的信息

00:29:20.909 --> 00:29:24.419
其余模板操作的计时器为

00:29:22.559 --> 00:29:26.039
它说现在如果我在看

00:29:24.419 --> 00:29:27.990
这里的值，那么你看到那里

00:29:26.039 --> 00:29:29.100
这里有很多不同的URL 

00:29:27.990 --> 00:29:31.200
因为我有不同的查询

00:29:29.100 --> 00:29:32.610
一切的参数都有一个

00:29:31.200 --> 00:29:33.960
为卢兹，然后有一堆

00:29:32.610 --> 00:29:36.659
其他查询，但这不是一个

00:29:33.960 --> 00:29:39.360
千，这接近一百

00:29:36.659 --> 00:29:42.330
然后它停止了，没有其他

00:29:39.360 --> 00:29:43.500
标签在这里，其原因是

00:29:42.330 --> 00:29:45.419
那简直太过分了

00:29:43.500 --> 00:29:51.059
信息，所以如果我要滚动

00:29:45.419 --> 00:29:52.440
回到这里再靠近某处

00:29:51.059 --> 00:29:55.110
在顶部，我们将看到一条错误消息

00:29:52.440 --> 00:29:57.659
在这里，这个警告实际上说

00:29:55.110 --> 00:30:00.779
嘿，您达到了最大数量

00:29:57.659 --> 00:30:03.240
 ACP客户请求的itex是

00:30:00.779 --> 00:30:06.779
使用您的I变量x'，这是一个

00:30:03.240 --> 00:30:09.840
好问题，我不是很有趣

00:30:06.779 --> 00:30:12.690
我今天在Martine和

00:30:09.840 --> 00:30:14.850
奥尔加关于春天的云，他们

00:30:12.690 --> 00:30:17.159
实际上使用UI模板构建器来

00:30:14.850 --> 00:30:18.390
使用查询参数构造网址，并

00:30:17.159 --> 00:30:21.149
然后将它们传递给其余模板

00:30:18.390 --> 00:30:22.590
您将完全得到此结果，因此

00:30:21.149 --> 00:30:25.080
你可能会遇到这个

00:30:22.590 --> 00:30:27.450
现在在这种情况下会出现错误

00:30:25.080 --> 00:30:29.640
对我来说很简单

00:30:27.450 --> 00:30:32.039
这是因为我能做的就是

00:30:29.640 --> 00:30:34.429
示范课，我可以说你

00:30:32.039 --> 00:30:39.270
知道我应该使用

00:30:34.429 --> 00:30:40.950
占位符在这里，现在说刚刚过去

00:30:39.270 --> 00:30:43.169
到目前为止所有的地方

00:30:40.950 --> 00:30:44.700
参数在这里，这将

00:30:43.169 --> 00:30:46.980
实际解决问题，如果您这样做

00:30:44.700 --> 00:30:48.690
在这种情况下，我实际上并不会

00:30:46.980 --> 00:30:51.059
演示一下，因为我想给你看一些

00:30:48.690 --> 00:30:52.950
还有其他东西，但这不是

00:30:51.059 --> 00:30:54.779
总是您可能会做出的选择权

00:30:52.950 --> 00:30:56.580
对简单传递的URL的请求

00:30:54.779 --> 00:30:58.049
从其他地方进来，你可能不会

00:30:56.580 --> 00:31:00.090
实际上可以选择说我

00:30:58.049 --> 00:31:05.070
只是要重写它并做一些

00:31:00.090 --> 00:31:06.600
一些URL查询参数，在这种情况下

00:31:05.070 --> 00:31:08.980
你在做什么，那正是我

00:31:06.600 --> 00:31:11.500
想在这里告诉你什么

00:31:08.980 --> 00:31:13.510
我的战利品包里有一些

00:31:11.500 --> 00:31:14.890
指标的配置， 

00:31:13.510 --> 00:31:17.169
现在禁用我要去的东西

00:31:14.890 --> 00:31:20.470
启用它，然后您在这里看到的是

00:31:17.169 --> 00:31:23.140
我们这里有一个米类型的光束

00:31:20.470 --> 00:31:24.970
过滤器，可以让您实际说出

00:31:23.140 --> 00:31:27.070
我要先看一下指标

00:31:24.970 --> 00:31:29.169
正在出版，我可以做一些

00:31:27.070 --> 00:31:30.730
对它们进行后期处理

00:31:29.169 --> 00:31:33.460
我在说的是如果有

00:31:30.730 --> 00:31:35.049
一个名为URI的标签，该标签可能来自

00:31:33.460 --> 00:31:36.820
其余模板可能来自

00:31:35.049 --> 00:31:39.070
其他的东西，但如果是URI，我就是

00:31:36.820 --> 00:31:41.290
要检查是否有问题

00:31:39.070 --> 00:31:42.549
标记表示某些查询开始

00:31:41.290 --> 00:31:45.460
参数，如果有我只是

00:31:42.549 --> 00:31:48.820
要取消它，否则我就是

00:31:45.460 --> 00:31:50.530
要离开它，因为还有另一个

00:31:48.820 --> 00:31:51.809
我很快在这里展示的东西

00:31:50.530 --> 00:31:54.580
你，因为我认为这是一个不错的功能

00:31:51.809 --> 00:31:56.980
还有一个监控请求标签

00:31:54.580 --> 00:31:58.590
和仪表过滤器在这里，我们有一些

00:31:56.980 --> 00:32:00.610
我们的应用实例

00:31:58.590 --> 00:32:03.700
未真正调用的操作

00:32:00.610 --> 00:32:05.380
通常是客户打来的，但我们正在打电话

00:32:03.700 --> 00:32:07.390
我们自己的操作需要大量监控

00:32:05.380 --> 00:32:09.490
工具只是不断检查我们的

00:32:07.390 --> 00:32:11.770
应用程序是否正常，是否健康

00:32:09.490 --> 00:32:13.750
有时那些测试那些监测

00:32:11.770 --> 00:32:15.220
测试实际上会耗尽实际

00:32:13.750 --> 00:32:17.530
交通，因此很难看到

00:32:15.220 --> 00:32:18.970
人们提出了许多真正的要求

00:32:17.530 --> 00:32:21.970
我在这里做的是我实际上

00:32:18.970 --> 00:32:24.070
从中寻找请求属性

00:32:21.970 --> 00:32:26.230
我叫X的传入HTTP请求

00:32:24.070 --> 00:32:28.690
监视，如果在那里，那是

00:32:26.230 --> 00:32:30.370
设置为true我要在我的标签上放一个标签

00:32:28.690 --> 00:32:32.200
指标说哦，这是一个监视

00:32:30.370 --> 00:32:34.179
请求，否则我要设置它

00:32:32.200 --> 00:32:36.190
虚假的，它将成为

00:32:34.179 --> 00:32:38.500
再次非常容易地对您进行过滤

00:32:36.190 --> 00:32:40.510
实际的监控工具，以了解

00:32:38.500 --> 00:32:42.669
您自己的监控导致的流量

00:32:40.510 --> 00:32:46.150
与实际客户相比

00:32:42.669 --> 00:32:48.990
由此产生的生产流量

00:32:46.150 --> 00:32:52.390
我们可以重新启动应用程序

00:32:48.990 --> 00:32:54.010
是的，停止内存运行以及我们应该做什么

00:32:52.390 --> 00:32:57.640
现在看到的是如果我运行相同的东西

00:32:54.010 --> 00:33:00.820
再来看看我们看到的指标

00:32:57.640 --> 00:33:02.470
只有一个网址或您的网址上

00:33:00.820 --> 00:33:04.120
关注其余所有模板调用

00:33:02.470 --> 00:33:05.890
那是因为我们要剥离

00:33:04.120 --> 00:33:07.990
这些查询参数

00:33:05.890 --> 00:33:10.150
应用程序已运行，我们将刷新

00:33:07.990 --> 00:33:12.100
现在确实，我们看到

00:33:10.150 --> 00:33:13.840
两个值是斜杠搜索和

00:33:12.100 --> 00:33:15.130
这里有一个斜线战利品，所以这是

00:33:13.840 --> 00:33:18.010
要记住的一点是

00:33:15.130 --> 00:33:19.570
休息模板的一个例子，但这

00:33:18.010 --> 00:33:21.280
一般而言，您应该

00:33:19.570 --> 00:33:22.630
考虑一下您何时使用指标

00:33:21.280 --> 00:33:24.580
您将添加自定义

00:33:22.630 --> 00:33:26.950
你不应该只喜欢

00:33:24.580 --> 00:33:28.600
无限数量的潜在价值

00:33:26.950 --> 00:33:30.880
因为那违背了

00:33:28.600 --> 00:33:33.220
具有这些尺寸指标

00:33:30.880 --> 00:33:36.090
这是保持这一点的好方法

00:33:33.220 --> 00:33:36.090
在一定范围内

00:33:37.140 --> 00:33:43.000
好的帐单和定制器是另一个

00:33:40.450 --> 00:33:46.270
实际上很常见的话题

00:33:43.000 --> 00:33:47.860
在典型情况下使用 spring boot 

00:33:46.270 --> 00:33:49.570
春天的应用程序，您将使用很多帮助器

00:33:47.860 --> 00:33:51.280
某些课程可能是春季课程

00:33:49.570 --> 00:33:52.660
本身就像一个休息模板，但也

00:33:51.280 --> 00:33:54.340
像杰克逊对象映射器和

00:33:52.660 --> 00:33:56.260
他们通常需要一些配置

00:33:54.340 --> 00:33:57.669
所以通常人们只会把

00:33:56.260 --> 00:33:59.140
直接在他们需要的班级上

00:33:57.669 --> 00:34:01.059
他们像田野，或者你有一个

00:33:59.140 --> 00:34:02.860
你为此创造的光束

00:34:01.059 --> 00:34:05.650
您在幻灯片上，我们只是返回

00:34:02.860 --> 00:34:07.960
一个新的休憩营地，我们的问题是

00:34:05.650 --> 00:34:09.730
经常出现Spring框架或事物

00:34:07.960 --> 00:34:11.230
像春天的云一样在顶部建造

00:34:09.730 --> 00:34:13.899
需要提供一些共同点

00:34:11.230 --> 00:34:15.550
配置这些东西，所以也许

00:34:13.899 --> 00:34:16.840
他们想注册一些拦截器

00:34:15.550 --> 00:34:19.330
与每个其余的模板

00:34:16.840 --> 00:34:21.730
为我刚刚显示的指标而创建

00:34:19.330 --> 00:34:23.560
您或使用侦探进行分布式跟踪

00:34:21.730 --> 00:34:24.369
或服务发现，以便我们可以做一些

00:34:23.560 --> 00:34:26.260
其他东西

00:34:24.369 --> 00:34:28.659
也支持测试

00:34:26.260 --> 00:34:30.220
例如关于设置模拟MVC 

00:34:28.659 --> 00:34:31.690
您如何真正确保所有

00:34:30.220 --> 00:34:33.040
在以下实例中创建的实例

00:34:31.690 --> 00:34:35.350
您的应用程序得到共享

00:34:33.040 --> 00:34:37.450
配置和通用模式

00:34:35.350 --> 00:34:39.639
这在靴子是要有建设者和

00:34:37.450 --> 00:34:41.440
这些建造者将由靴子创造

00:34:39.639 --> 00:34:43.330
其他一些配置将有一个

00:34:41.440 --> 00:34:45.460
单实例，但您可以自定义

00:34:43.330 --> 00:34:48.700
通过创建自己的bean这些东西

00:34:45.460 --> 00:34:51.280
我看到的一些定制器类型

00:34:48.700 --> 00:34:53.020
在有关迁移到

00:34:51.280 --> 00:34:54.190
今天带来的最新云内容

00:34:53.020 --> 00:34:56.109
他们实际上将只有一个

00:34:54.190 --> 00:34:57.940
通用的定制器接口

00:34:56.109 --> 00:35:00.130
只是为此而参数化，但是

00:34:57.940 --> 00:35:02.619
那里有很多具体的接口

00:35:00.130 --> 00:35:04.150
以及想法是，这些

00:35:02.619 --> 00:35:06.130
建筑商将自动找到所有

00:35:04.150 --> 00:35:08.109
这些定制器和这些定制器

00:35:06.130 --> 00:35:09.790
将自定义构建器或

00:35:08.109 --> 00:35:12.070
建筑商创造的结果

00:35:09.790 --> 00:35:14.230
休息模板，然后到处

00:35:12.070 --> 00:35:15.670
您需要休息的应用程序

00:35:14.230 --> 00:35:17.350
让我们需要一个对象映射器

00:35:15.670 --> 00:35:19.060
您将只使用相应的

00:35:17.350 --> 00:35:20.560
生成器，您将其注入代码并

00:35:19.060 --> 00:35:22.240
你说给我相应的

00:35:20.560 --> 00:35:29.830
实例也许​​在做一些之后

00:35:22.240 --> 00:35:31.660
额外的配置，所以另一个

00:35:29.830 --> 00:35:33.850
引导的原因为您提供了

00:35:31.660 --> 00:35:35.950
这些事情是因为它提供了一些

00:35:33.850 --> 00:35:36.520
规范默认配置或默认

00:35:35.950 --> 00:35:37.600
组态

00:35:36.520 --> 00:35:40.030
这与默认值不同

00:35:37.600 --> 00:35:41.710
由本机库提供，因此您

00:35:40.030 --> 00:35:44.530
可以有一些引导特定的意见

00:35:41.710 --> 00:35:47.530
例如杰克逊的默认值

00:35:44.530 --> 00:35:50.320
只会得到一个对象成员

00:35:47.530 --> 00:35:53.320
那不是简单地忽略未知

00:35:50.320 --> 00:35:55.900
休息的Amplatz您将得到

00:35:53.320 --> 00:35:57.460
基于以下内容配置的HTTP客户端

00:35:55.900 --> 00:35:58.000
课堂上的任何东西

00:35:57.460 --> 00:36:00.370
的东西

00:35:58.000 --> 00:36:03.160
其余的都做完了

00:36:00.370 --> 00:36:05.050
所有配置中的模板，所以我

00:36:03.160 --> 00:36:07.240
想给你看一些东西

00:36:05.050 --> 00:36:10.300
我想表明它的重要性

00:36:07.240 --> 00:36:15.690
使用建造者，所以我们还有另一个

00:36:10.300 --> 00:36:22.360
此处的应用程序自己关闭并停止

00:36:15.690 --> 00:36:24.100
我们去那里，所以我们有一个非常简单的

00:36:22.360 --> 00:36:26.740
如您所见，Spring Boot应用程序

00:36:24.100 --> 00:36:29.350
它只是启动，然后做什么

00:36:26.740 --> 00:36:31.030
它配置了这种自我调用

00:36:29.350 --> 00:36:34.390
控制器是 rest controller 

00:36:31.030 --> 00:36:36.670
具有第一和第二路径映射

00:36:34.390 --> 00:36:38.380
然后在第一个它将使用休息

00:36:36.670 --> 00:36:40.720
调用第二个模板

00:36:38.380 --> 00:36:42.310
仅此而已，目前我们拥有

00:36:40.720 --> 00:36:43.530
我们在此字段休息模板

00:36:42.310 --> 00:36:47.020
只是创建其余模板

00:36:43.530 --> 00:36:49.660
也是我们自己，我不会展示

00:36:47.020 --> 00:36:51.700
你，因为我想节省一些时间

00:36:49.660 --> 00:36:53.650
已配置对Sleuth的依赖

00:36:51.700 --> 00:36:59.020
所以这意味着我要去分发

00:36:53.650 --> 00:37:00.310
跟踪此应用程序中的支持，以及

00:36:59.020 --> 00:37:02.410
那我现在就开始

00:37:00.310 --> 00:37:04.300
应用程序，然后在启动时

00:37:02.410 --> 00:37:06.760
我要下斜线

00:37:04.300 --> 00:37:08.530
首先，它将使用配置的其余部分

00:37:06.760 --> 00:37:12.510
模板以调用秒和

00:37:08.530 --> 00:37:15.940
然后正确返回结果，所以8080 

00:37:12.510 --> 00:37:18.400
斜杠首先给我打招呼

00:37:15.940 --> 00:37:20.800
完全符合预期，现在我

00:37:18.400 --> 00:37:22.930
现在在这里记录一些日志

00:37:20.800 --> 00:37:24.550
实际上显示一些数字， 

00:37:22.930 --> 00:37:28.450
这是从侦探进行的分布式跟踪

00:37:24.550 --> 00:37:31.930
还有我想要的第一个数字

00:37:28.450 --> 00:37:33.940
指出这些是跟踪ID 

00:37:31.930 --> 00:37:36.280
想法是，当有请求进入时，我们

00:37:33.940 --> 00:37:39.130
可以创建一个唯一的号码，我们可以

00:37:36.280 --> 00:37:40.540
将其传播给下游调用

00:37:39.130 --> 00:37:42.340
我们可以得到相同的数字

00:37:40.540 --> 00:37:43.540
我们的日志记录，如果

00:37:42.340 --> 00:37:45.310
您正在基于微服务

00:37:43.540 --> 00:37:47.410
建筑，但您在这里看到我们

00:37:45.310 --> 00:37:49.660
实际上，当

00:37:47.410 --> 00:37:50.240
当我们回到

00:37:49.660 --> 00:37:51.860
控制者

00:37:50.240 --> 00:37:53.360
并呼吁第二次削减

00:37:51.860 --> 00:37:54.920
实际上获得了不同的跟踪ID，并且

00:37:53.360 --> 00:37:57.590
那是因为我们的休息模板有

00:37:54.920 --> 00:37:59.780
也没有适当配置

00:37:57.590 --> 00:38:01.970
回到我的浏览器试图

00:37:59.780 --> 00:38:03.680
实际获得的指标不是

00:38:01.970 --> 00:38:04.970
他们那里没有指标

00:38:03.680 --> 00:38:06.860
目前已配置为

00:38:04.970 --> 00:38:08.240
即使我确实提出了要求， 

00:38:06.860 --> 00:38:11.210
问题是我正在创建此休息

00:38:08.240 --> 00:38:14.140
我自己而不是通过模板

00:38:11.210 --> 00:38:16.850
一个建筑商，所以我要做的是

00:38:14.140 --> 00:38:18.860
要摆脱这种试图使

00:38:16.850 --> 00:38:20.420
确保注入实际的休息模板

00:38:18.860 --> 00:38:21.860
在这里，我已经收到一个错误

00:38:20.420 --> 00:38:23.660
因为我没有休息

00:38:21.860 --> 00:38:26.869
模板光束，所以我下一步要做

00:38:23.660 --> 00:38:33.230
说我需要休息一下

00:38:26.869 --> 00:38:38.360
模板注入其余模板

00:38:33.230 --> 00:38:39.980
建造者在这里，然后说回我

00:38:38.360 --> 00:38:42.290
案例建造者，我不需要

00:38:39.980 --> 00:38:46.070
任何其他配置，现在

00:38:42.290 --> 00:38:48.140
当我重新启动应用程序时

00:38:46.070 --> 00:38:49.910
碰巧我会得到一个休息模板

00:38:48.140 --> 00:38:51.680
通过构建器进行配置

00:38:49.910 --> 00:38:53.510
将是一些额外的建筑

00:38:51.680 --> 00:38:55.970
来自各种框架的配置

00:38:53.510 --> 00:38:57.050
我在上课时已将

00:38:55.970 --> 00:39:00.560
我的休息模板

00:38:57.050 --> 00:39:02.210
所以这意味着当我回到这里

00:39:00.560 --> 00:39:04.820
再次提出另一个要求

00:39:02.210 --> 00:39:07.760
从第二次开始打个招呼

00:39:04.820 --> 00:39:10.190
你可以看到我实际上得到了三个

00:39:07.760 --> 00:39:13.040
一年的痕迹相同，而不是

00:39:10.190 --> 00:39:15.500
只是一个不同的

00:39:13.040 --> 00:39:17.660
第二个电话，刷新我

00:39:15.500 --> 00:39:20.690
现在也可以重新获取我的指标

00:39:17.660 --> 00:39:23.390
对，这就是原因之一

00:39:20.690 --> 00:39:26.330
您应该现在使用这些构建器

00:39:23.390 --> 00:39:27.890
我不会演示，但事实证明

00:39:26.330 --> 00:39:29.750
实际上，如果我会创建一个

00:39:27.890 --> 00:39:31.070
梁，但我不会使用建筑商

00:39:29.750 --> 00:39:33.470
我本来可以定一个新的

00:39:31.070 --> 00:39:34.940
逮捕模板我实际上仍然会

00:39:33.470 --> 00:39:36.650
分发跟踪支持

00:39:34.940 --> 00:39:40.010
但我无法获得指标支持

00:39:36.650 --> 00:39:41.420
可能会有些奇怪，为什么

00:39:40.010 --> 00:39:44.119
那实际上是因为侦探

00:39:41.420 --> 00:39:45.859
他们使用的技巧略有不同

00:39:44.119 --> 00:39:47.150
一些光束后处理器

00:39:45.859 --> 00:39:48.650
只会采用任何其余的模板

00:39:47.150 --> 00:39:50.540
已在应用程序中配置

00:39:48.650 --> 00:39:53.060
然后他们说哦，是的，我要

00:39:50.540 --> 00:39:54.410
将我的自定义拦截器作为

00:39:53.060 --> 00:39:57.170
剩下的要用第一个

00:39:54.410 --> 00:39:59.150
模板，而不必这样做

00:39:57.170 --> 00:40:00.950
通过建设者，但事实并非如此

00:39:59.150 --> 00:40:02.690
对于 spring boot 的所有支撑

00:40:00.950 --> 00:40:03.190
例如，例如，我显示指标

00:40:02.690 --> 00:40:05.230
支持

00:40:03.190 --> 00:40:07.510
它实际上不是那样工作的

00:40:05.230 --> 00:40:09.880
您仍然不会获得任何指标

00:40:07.510 --> 00:40:12.640
因此，一般的建议只是

00:40:09.880 --> 00:40:14.260
总是使用一个建造者，你会很好并且

00:40:12.640 --> 00:40:16.660
您也可以自定义

00:40:14.260 --> 00:40:18.400
配置，例如这里

00:40:16.660 --> 00:40:20.710
了解一下我的情况

00:40:18.400 --> 00:40:23.050
已为Jackson配置了定制程序

00:40:20.710 --> 00:40:25.030
这是我们实际的样本

00:40:23.050 --> 00:40:27.579
我们在这里说您是否想要的应用程序

00:40:25.030 --> 00:40:30.640
序列化设置的一天时间，这是一个

00:40:27.579 --> 00:40:31.900
我们想要的标准Java 

00:40:30.640 --> 00:40:33.730
对此的一些不同表示

00:40:31.900 --> 00:40:35.260
这实际上将确保

00:40:33.730 --> 00:40:36.970
在我们的应用程序中的对象映射器

00:40:35.260 --> 00:40:41.800
通过春天创造将有

00:40:36.970 --> 00:40:43.359
配置指定实际上

00:40:41.800 --> 00:40:45.880
另一个例子，但我要跳过它

00:40:43.359 --> 00:40:48.579
现在，但是你会在我的

00:40:45.880 --> 00:40:51.099
回购，我也在向你展示

00:40:48.579 --> 00:40:53.680
可以注册一个自定义拦截器

00:40:51.099 --> 00:40:54.880
做请求和响应记录

00:40:53.680 --> 00:40:56.290
您对自己提出的每个请求

00:40:54.880 --> 00:40:58.270
休息模板，以便您感兴趣

00:40:56.290 --> 00:40:59.460
在那一定要看看

00:40:58.270 --> 00:41:01.270
我现在要跳过它

00:40:59.460 --> 00:41:04.180
因为我还想要其他东西

00:41:01.270 --> 00:41:06.190
说说我的另一件事

00:41:04.180 --> 00:41:07.869
在建筑弹簧应用中发现的是

00:41:06.190 --> 00:41:09.520
您需要一些自定义

00:41:07.869 --> 00:41:10.569
您想要的本地开发设置

00:41:09.520 --> 00:41:11.859
有一些不同的配置

00:41:10.569 --> 00:41:14.380
你想要一些春天的属性

00:41:11.859 --> 00:41:16.180
豆使用其他设置，因为您

00:41:14.380 --> 00:41:17.680
不想启用安全性或

00:41:16.180 --> 00:41:19.690
您需要配置一些不同的URL 

00:41:17.680 --> 00:41:21.250
否则你不会与某些东西融合

00:41:19.690 --> 00:41:23.349
例如服务器发现之类的

00:41:21.250 --> 00:41:24.880
事物或共享配置服务

00:41:23.349 --> 00:41:26.230
因此，您如何设置它并

00:41:24.880 --> 00:41:28.000
常见的解决方案是人们

00:41:26.230 --> 00:41:29.290
只会使用说的弹簧轮廓

00:41:28.000 --> 00:41:32.020
我要定义一个本地印刷弹簧

00:41:29.290 --> 00:41:34.089
个人资料，然后我会自动获得支持

00:41:32.020 --> 00:41:35.500
从靴子一些定制

00:41:34.089 --> 00:41:38.250
配置属性，例如

00:41:35.500 --> 00:41:40.960
应用程序-本地属性和

00:41:38.250 --> 00:41:42.970
接下来，我可以进行自定义

00:41:40.960 --> 00:41:44.829
配置Bean到位，这样我就可以

00:41:42.970 --> 00:41:47.589
具有Spring 配置

00:41:44.829 --> 00:41:49.150
量身定制适合我当地的发展

00:41:47.589 --> 00:41:52.150
环境，这就是你

00:41:49.150 --> 00:41:53.770
今天可能已经在使用

00:41:52.150 --> 00:41:55.599
如果要启用弹簧轮廓

00:41:53.770 --> 00:41:57.250
典型的方法是使用

00:41:55.599 --> 00:42:00.040
春天的文档配置文件，所以活跃

00:41:57.250 --> 00:42:01.720
现在我正在研究财产

00:42:00.040 --> 00:42:03.190
基于微服务的架构

00:42:01.720 --> 00:42:06.190
例如30项服务或类似的服务

00:42:03.190 --> 00:42:08.349
我真的不想指定

00:42:06.190 --> 00:42:10.180
每个运行配置中的该属性

00:42:08.349 --> 00:42:12.069
在我的IDE中，例如所有30个

00:42:10.180 --> 00:42:14.560
服务，那么您如何处理

00:42:12.069 --> 00:42:17.110
现在一种方式可能是说我

00:42:14.560 --> 00:42:19.180
会让我所有的开发人员

00:42:17.110 --> 00:42:21.310
配置一个环境变量

00:42:19.180 --> 00:42:22.570
被称为弹簧轮廓激活和

00:42:21.310 --> 00:42:24.280
实际上会自动绑定

00:42:22.570 --> 00:42:25.990
通过活动的弹簧轮廓

00:42:24.280 --> 00:42:28.270
由于宽松的绑定支持和

00:42:25.990 --> 00:42:30.070
那么您将拥有该本地资料

00:42:28.270 --> 00:42:31.630
每当您在本地运行时

00:42:30.070 --> 00:42:34.300
每当你跑到其他地方

00:42:31.630 --> 00:42:35.650
实际上是一个不错的解决方案

00:42:34.300 --> 00:42:38.700
如果你想在那里是一个问题

00:42:35.650 --> 00:42:41.830
然后配置一些其他配置文件

00:42:38.700 --> 00:42:43.150
您可能会覆盖

00:42:41.830 --> 00:42:44.230
弹簧轮廓激活

00:42:43.150 --> 00:42:46.480
通过环境配置

00:42:44.230 --> 00:42:49.450
因为这些东西不会增加

00:42:46.480 --> 00:42:52.030
只是覆盖了相同的属性

00:42:49.450 --> 00:42:53.650
为此，大多数人都拥有

00:42:52.030 --> 00:42:55.030
注意到不熟悉的是

00:42:53.650 --> 00:42:57.340
有一个弹簧轮廓

00:42:55.030 --> 00:42:59.170
包括财产而不是说

00:42:57.340 --> 00:43:01.120
 spring pro处于活动状态，您可以配置

00:42:59.170 --> 00:43:04.030
弹簧轮廓包括

00:43:01.120 --> 00:43:06.340
实际上添加到任何配置文件中

00:43:04.030 --> 00:43:08.740
您已通过配置文件激活

00:43:06.340 --> 00:43:12.850
积极的事情，所以我们在我们做什么

00:43:08.740 --> 00:43:17.430
项目，我可以告诉你的是，我

00:43:12.850 --> 00:43:19.990
这里有一些环境变量

00:43:17.430 --> 00:43:21.460
所谓的弹簧轮廓包括

00:43:19.990 --> 00:43:23.080
我将其设置为本地，这意味着

00:43:21.460 --> 00:43:25.270
每当我启动Spring Boot应用程序时

00:43:23.080 --> 00:43:26.980
我的本地机器，我将有一个本地

00:43:25.270 --> 00:43:28.360
个人资料有效

00:43:26.980 --> 00:43:30.160
否则可能好不好

00:43:28.360 --> 00:43:32.320
顺便担心这里的另一件事

00:43:30.160 --> 00:43:34.450
确保我总是得到漂亮的色彩

00:43:32.320 --> 00:43:35.740
控制台中的 spring boot 的输出

00:43:34.450 --> 00:43:37.900
因为即使我在继续

00:43:35.740 --> 00:43:39.670
 Windows，我认为我仍然值得拥有

00:43:37.900 --> 00:43:41.350
当我成为开发人员时有些色彩

00:43:39.670 --> 00:43:45.010
在命令行上运行，这是

00:43:41.350 --> 00:43:46.840
默认情况下未启用，那么您能做什么

00:43:45.010 --> 00:43:48.790
做好当地发展的配置

00:43:46.840 --> 00:43:49.960
它通常像独特的板子一样

00:43:48.790 --> 00:43:51.580
我们运行的每个服务权利

00:43:49.960 --> 00:43:53.530
码头工人，所以在生产中一切都是

00:43:51.580 --> 00:43:55.150
端口8080，并绑定到一些随机

00:43:53.530 --> 00:43:57.070
在运行时移植，但我们没有运行

00:43:55.150 --> 00:43:58.600
 docker本地运行的所有内容

00:43:57.070 --> 00:44:00.810
在本地运行，我们刚刚开始启动

00:43:58.600 --> 00:44:03.220
所以他们需要一个唯一的服务器端口号

00:44:00.810 --> 00:44:04.990
有禁用的功能

00:44:03.220 --> 00:44:06.400
实际上并不需要启用

00:44:04.990 --> 00:44:08.200
你只是想拥有的东西

00:44:06.400 --> 00:44:10.750
在本地运行，所以这只是一些

00:44:08.200 --> 00:44:12.880
一个特定例子的例子

00:44:10.750 --> 00:44:15.040
我想说的是这里甚至在记录日志

00:44:12.880 --> 00:44:16.960
如果您有专用的日志文件

00:44:15.040 --> 00:44:18.820
仍然可以通过以下方式进行一些自定义

00:44:16.960 --> 00:44:20.470
春天的引导属性，所以你可以说

00:44:18.820 --> 00:44:22.750
例如，好吧，我们已经证明了

00:44:20.470 --> 00:44:24.520
您将获得所有这些输出，其中

00:44:22.750 --> 00:44:26.350
有一个跟踪ID和一个跨度ID 

00:44:24.520 --> 00:44:28.690
他们说跨度是否会

00:44:26.350 --> 00:44:30.700
是否导出它只是没有用

00:44:28.690 --> 00:44:33.430
通常我只是在本地感兴趣

00:44:30.700 --> 00:44:34.780
特雷斯（tres）理想之选

00:44:33.430 --> 00:44:36.700
将覆盖日志记录

00:44:34.780 --> 00:44:38.980
这个习惯的老将级

00:44:36.700 --> 00:44:41.170
设置我可以确保只看到

00:44:38.980 --> 00:44:43.500
痕迹在本地而不是一半

00:44:41.170 --> 00:44:45.880
我的屏幕实际上已被其他人使用

00:44:43.500 --> 00:44:48.579
在那里配置或我可以自定义

00:44:45.880 --> 00:44:50.260
本地日志级别的自定义

00:44:48.579 --> 00:44:52.570
发展，这就是其中的一部分

00:44:50.260 --> 00:44:55.150
那里有用的，是的，我们

00:44:52.570 --> 00:44:56.290
还有五分钟，所以我接下来

00:44:55.150 --> 00:44:59.260
想表明你是我的东西

00:44:56.290 --> 00:45:01.540
迁移现有时遇到

00:44:59.260 --> 00:45:03.220
 spring boot 上的应用程序

00:45:01.540 --> 00:45:05.079
我自己也做了很多事情

00:45:03.220 --> 00:45:07.060
当您运行小程序春天时

00:45:05.079 --> 00:45:09.369
没有靴子的应用程序，您需要

00:45:07.060 --> 00:45:11.109
阅读一些配置资源

00:45:09.369 --> 00:45:13.990
例如密钥库之类的东西， 

00:45:11.109 --> 00:45:15.310
您所在位置的其他文件

00:45:13.990 --> 00:45:18.579
将配置一个外部类

00:45:15.310 --> 00:45:21.160
现货目录的好处

00:45:18.579 --> 00:45:22.930
这样做是因为人们会

00:45:21.160 --> 00:45:24.280
能够更新这些文件并进行更改

00:45:22.930 --> 00:45:25.930
他们而不创建新的部署

00:45:24.280 --> 00:45:27.609
因为它们只是在应用程序外部

00:45:25.930 --> 00:45:29.500
但您的应用仍然不需要知道

00:45:27.609 --> 00:45:31.810
这些文件所在的位置，因为

00:45:29.500 --> 00:45:34.270
您可以在外部配置类路径

00:45:31.810 --> 00:45:35.859
应用程序本身，所以我曾经

00:45:34.270 --> 00:45:37.900
实际上使用了很多机制

00:45:35.859 --> 00:45:39.430
但是后来 spring boot 随之而来

00:45:37.900 --> 00:45:40.839
预设包装机制的说法

00:45:39.430 --> 00:45:45.130
我们将把所有东西都放进去

00:45:40.839 --> 00:45:46.480
你是一个胖胖的罐子，那是

00:45:45.130 --> 00:45:47.800
你的班级爱好者，你要

00:45:46.480 --> 00:45:49.390
启动您的靴子并启动

00:45:47.800 --> 00:45:52.150
罐子里的类，那是

00:45:49.390 --> 00:45:54.220
它，如果您不想迁移

00:45:52.150 --> 00:45:55.690
应用程序，但您定制

00:45:54.220 --> 00:45:57.849
准备从中阅读很多东西

00:45:55.690 --> 00:45:59.470
外部类路径目录

00:45:57.849 --> 00:46:01.000
现在将成为一个问题

00:45:59.470 --> 00:46:02.980
是有一个内置的解决方案

00:46:01.000 --> 00:46:04.000
这不过是我的经验

00:46:02.980 --> 00:46:06.849
很多人对此一无所知

00:46:04.000 --> 00:46:08.319
因为Buddha应用程序是使用

00:46:06.849 --> 00:46:09.849
启动器，但您可以告诉它使用

00:46:08.319 --> 00:46:11.800
与默认启动器不同的启动器

00:46:09.849 --> 00:46:14.170
现在，您可以通过配置

00:46:11.800 --> 00:46:15.630
插件中的所谓布局，如果

00:46:14.170 --> 00:46:17.800
你让它看起来像这样

00:46:15.630 --> 00:46:20.290
实际上，如果您配置此

00:46:17.800 --> 00:46:21.730
实际布局，您的胖子罐子

00:46:20.290 --> 00:46:23.619
被创造的并不是全部

00:46:21.730 --> 00:46:27.040
差异，但会使用不同的

00:46:23.619 --> 00:46:28.810
主类作为发射器和哎呀

00:46:27.040 --> 00:46:30.640
抱歉，那太快了，那个

00:46:28.810 --> 00:46:33.160
启动器称为属性启动器

00:46:30.640 --> 00:46:35.290
如果您现在将zip布局与

00:46:33.160 --> 00:46:38.500
属性启动器，您可以做的是

00:46:35.290 --> 00:46:40.240
您可以配置一个或多个外部

00:46:38.500 --> 00:46:43.420
要添加到您的班级的目录

00:46:40.240 --> 00:46:44.500
但这就是这种方式的启动

00:46:43.420 --> 00:46:46.570
看起来好吗

00:46:44.500 --> 00:46:47.890
对于名为loader的文件的属性

00:46:46.570 --> 00:46:48.760
在氏族产卵的根部

00:46:47.890 --> 00:46:50.500
可以和你的一起打包

00:46:48.760 --> 00:46:52.720
应用程序，或者你可以解决这个问题

00:46:50.500 --> 00:46:53.950
通过清单甚至

00:46:52.720 --> 00:46:56.980
环境变量，如果您想

00:46:53.950 --> 00:46:59.290
使它更具动态性，然后您就可以

00:46:56.980 --> 00:47:02.140
在这两个位置中的任何一个进行配置

00:46:59.290 --> 00:47:04.930
一个称为加载程序点路径的属性

00:47:02.140 --> 00:47:06.700
或多个逗号分隔的目录

00:47:04.930 --> 00:47:08.110
这些将自动添加到

00:47:06.700 --> 00:47:10.720
你的课，但是当你的申请

00:47:08.110 --> 00:47:17.610
启动，所以我有一个小演示

00:47:10.720 --> 00:47:21.430
那也让我们看看这里

00:47:17.610 --> 00:47:23.950
所以在这种情况下，我有一个

00:47:21.430 --> 00:47:27.280
非常简单的应用程序，它可以完成启动

00:47:23.950 --> 00:47:29.800
它读取的文件名为推力或AES 

00:47:27.280 --> 00:47:31.540
从课程路径到

00:47:29.800 --> 00:47:34.420
类路径，然后打印出

00:47:31.540 --> 00:47:37.090
实际配置的别名

00:47:34.420 --> 00:47:42.280
该密钥库中的证书

00:47:37.090 --> 00:47:44.650
或信任，或者我有一个加载程序

00:47:42.280 --> 00:47:46.660
此处配置的属性文件

00:47:44.650 --> 00:47:48.850
读取一个名为access的目录

00:47:46.660 --> 00:47:52.060
外显子组扩展，我实际上有一个

00:47:48.850 --> 00:47:54.730
带有信任或jes的X目录，以及

00:47:52.060 --> 00:47:55.690
锁定点XML，现在我是

00:47:54.730 --> 00:47:59.140
我要做的是

00:47:55.690 --> 00:48:04.810
在命令行上放下

00:47:59.140 --> 00:48:06.070
此应用程序的构建以及

00:48:04.810 --> 00:48:08.200
我继续使用命令行的原因

00:48:06.070 --> 00:48:09.820
这实际上是我想要这个罐子

00:48:08.200 --> 00:48:12.700
我不想从阿迪那里跑这东西

00:48:09.820 --> 00:48:14.500
我想在这里模拟此设置

00:48:12.700 --> 00:48:18.190
实际上在生产中运行一个胖子罐

00:48:14.500 --> 00:48:22.420
但是在那个罐子旁边，你可以在这里看到

00:48:18.190 --> 00:48:25.210
我的X目录正确，那是

00:48:22.420 --> 00:48:27.370
我要在其中读取加载日志的地方

00:48:25.210 --> 00:48:30.760
点xml来自，我要读这篇

00:48:27.370 --> 00:48:33.160
我的命令行中的实际信任者文件

00:48:30.760 --> 00:48:33.670
跑步者，所以我现在可以说

00:48:33.160 --> 00:48:40.930
爪哇

00:48:33.670 --> 00:48:44.110
 -卡针对罐子的外部快照

00:48:40.930 --> 00:48:46.030
所以它会启动，你会注意到

00:48:44.110 --> 00:48:48.100
首先，我有两件事

00:48:46.030 --> 00:48:50.440
实际记录在这里，第二

00:48:48.100 --> 00:48:52.600
这里有说我已经

00:48:50.440 --> 00:48:54.460
加载了委托人，我发现了三个

00:48:52.600 --> 00:48:56.110
我在这东西上有不同的证书

00:48:54.460 --> 00:48:57.080
可以告诉你这可行，因为如果

00:48:56.110 --> 00:48:59.630
我会搬到

00:48:57.080 --> 00:49:01.460
目录现在，我会尝试开始

00:48:59.630 --> 00:49:03.680
从这里开始同样的事情是行不通的

00:49:01.460 --> 00:49:05.510
因为那个X目录实际上是

00:49:03.680 --> 00:49:07.070
相对于我的工作目录

00:49:05.510 --> 00:49:08.780
现在实际上是失败了

00:49:07.070 --> 00:49:11.180
最终发现是因为II没有

00:49:08.780 --> 00:49:13.310
我无法读取此文件或在

00:49:11.180 --> 00:49:15.830
启动，所以做的结果之一

00:49:13.310 --> 00:49:18.260
这是有人现在可以

00:49:15.830 --> 00:49:20.450
在外部更改法律配置

00:49:18.260 --> 00:49:22.430
您的应用程序，但回头看

00:49:20.450 --> 00:49:25.130
点XML只是从类路径中读取

00:49:22.430 --> 00:49:27.230
对于大多数应用程序来说很常见

00:49:25.130 --> 00:49:28.490
对，我在这里使用另一个功能

00:49:27.230 --> 00:49:29.930
我们实际上正在导入一些

00:49:28.490 --> 00:49:31.130
默认启动配置，我们将

00:49:29.930 --> 00:49:33.470
向后走，所以我不必设置

00:49:31.130 --> 00:49:36.980
我自己的一切，所以差不多

00:49:33.470 --> 00:49:41.210
结论是这样做的，因为时间到了

00:49:36.980 --> 00:49:43.310
我认为食物很棒，但是那不

00:49:41.210 --> 00:49:45.440
意味着你应该感到满意

00:49:43.310 --> 00:49:47.540
与它带来了开箱即用的权利

00:49:45.440 --> 00:49:49.460
这个框架很容易允许

00:49:47.540 --> 00:49:51.890
您配置的东西或实际

00:49:49.460 --> 00:49:54.710
使用引导使用的相同机制

00:49:51.890 --> 00:49:57.290
内部为您自己的应用程序，所以

00:49:54.710 --> 00:49:59.570
你应该研究那些定制

00:49:57.290 --> 00:50:01.730
和那里的配置选项

00:49:59.570 --> 00:50:03.320
真正有回报的阅读配置或

00:50:01.730 --> 00:50:04.760
实际上更好的是

00:50:03.320 --> 00:50:06.650
像我这样的人为你做

00:50:04.760 --> 00:50:09.020
潜入这个弄清楚一切， 

00:50:06.650 --> 00:50:11.090
然后在50分钟的演讲中进行解释

00:50:09.020 --> 00:50:13.430
在会议上，非常感谢

00:50:11.090 --> 00:50:14.960
如果你想看参加

00:50:13.430 --> 00:50:19.070
这个代码你自己玩

00:50:14.960 --> 00:50:21.470
哦，我起床了，我把它推到了

00:50:19.070 --> 00:50:24.710
我还上传了一个引导循环项目

00:50:21.470 --> 00:50:27.500
幻灯片已准备好与SlideShare和

00:50:24.710 --> 00:50:29.240
视频播放完后，我实际上

00:50:27.500 --> 00:50:33.350
将YouTube视频添加到该幻灯片

00:50:29.240 --> 00:50:35.360
这样您就可以按照我们的要求

00:50:33.350 --> 00:50:38.060
租用幻灯片，我们有电动汽车

00:50:35.360 --> 00:50:40.550
和船，这真是太酷了，谢谢

00:50:38.060 --> 00:50:42.560
每个人的参加时间都到了，但是如果

00:50:40.550 --> 00:50:44.480
你有任何问题我会的

00:50:42.560 --> 00:50:46.640
在这里，所以请来找我

00:50:44.480 --> 00:50:47.020
我们可以再谈一点谢谢

00:50:46.640 --> 00:50:49.290
许多

00:50:47.020 --> 00:50:55.420
 [掌声] 

00:50:49.290 --> 00:50:55.420
 [音乐] 

