WEBVTT
Kind: captions
Language: zh-Hans

00:00:00.900 --> 00:00:06.390
 [音乐] 

00:00:04.939 --> 00:00:08.550
好吧

00:00:06.390 --> 00:00:11.400
我叫比利·克兰德尔（Billy Crandall） 

00:00:08.550 --> 00:00:14.190
我在别墅Crandall和威廉doc 

00:00:11.400 --> 00:00:16.289
 IBM的Crandall，如果有的话

00:00:14.190 --> 00:00:18.300
他们没有机会问的问题

00:00:16.289 --> 00:00:20.820
在此演示期间或此处

00:00:18.300 --> 00:00:22.619
随时DMV或给我发送电子邮件我

00:00:20.820 --> 00:00:24.360
乐于回答任何问题

00:00:22.619 --> 00:00:26.940
您当然有这样的问题

00:00:24.360 --> 00:00:28.560
演示是协作合同

00:00:26.940 --> 00:00:30.810
驱动发展，那么多少人

00:00:28.560 --> 00:00:31.859
这实际上已经在签合同

00:00:30.810 --> 00:00:35.160
现在是城市发展

00:00:31.859 --> 00:00:36.420
当然要组织几个

00:00:35.160 --> 00:00:38.640
你知道那是为什么你在这里

00:00:36.420 --> 00:00:41.840
了解它，这样才有意义

00:00:38.640 --> 00:00:44.309
因此，让我们开始快速做一件事

00:00:41.840 --> 00:00:46.890
如果您愿意，IBM犁是一个好地方

00:00:44.309 --> 00:00:48.360
需要运行您的屏幕工作负载，我们

00:00:46.890 --> 00:00:51.059
有选择，你知道你是否穿

00:00:48.360 --> 00:00:54.989
 spring boot 课程Apache Tomcat，如果

00:00:51.059 --> 00:00:57.960
您仍然在WebSphere中运行，或者

00:00:54.989 --> 00:01:00.329
更多企业设置战争的方式

00:00:57.960 --> 00:01:02.610
也有开放的自由，所以你可以检查

00:01:00.329 --> 00:01:05.940
在这里也可以随时问我

00:01:02.610 --> 00:01:08.340
有关IBM Cloud的问题，但何时

00:01:05.940 --> 00:01:10.500
你真的听说合同

00:01:08.340 --> 00:01:12.720
驱动开发，所以让我们简单地

00:01:10.500 --> 00:01:14.909
很高的覆盖率

00:01:12.720 --> 00:01:17.189
合同城市发展是，我们将

00:01:14.909 --> 00:01:19.140
进入它，以后再说

00:01:17.189 --> 00:01:23.340
只是为了让你的头

00:01:19.140 --> 00:01:24.960
围绕这个空间，所以

00:01:23.340 --> 00:01:29.549
开发合同是为了定义

00:01:24.960 --> 00:01:32.250
 API的行为，以便客户端

00:01:29.549 --> 00:01:33.750
发送服务电话，该电话是

00:01:32.250 --> 00:01:35.100
显然就像一个请求， 

00:01:33.750 --> 00:01:36.689
代码会结束

00:01:35.100 --> 00:01:38.700
点，身体会很好

00:01:36.689 --> 00:01:40.259
也许如果您知道某个职位，或者

00:01:38.700 --> 00:01:42.030
这样的事情，如果不是

00:01:40.259 --> 00:01:43.920
就像得到了那么多东西一样

00:01:42.030 --> 00:01:46.470
标头，但基于这种

00:01:43.920 --> 00:01:49.409
要求，然后假设您

00:01:46.470 --> 00:01:51.509
知道应该以某种方式回应

00:01:49.409 --> 00:01:53.340
知道可能会有200条回复， 

00:01:51.509 --> 00:01:56.189
它会有一些标题

00:01:53.340 --> 00:01:58.259
合同中的信息

00:01:56.189 --> 00:02:00.390
驱动开发是当您实际上

00:01:58.259 --> 00:02:02.009
用某种合同写下来

00:02:00.390 --> 00:02:04.290
可以实际编程

00:02:02.009 --> 00:02:06.090
对你进行测试不只是一种

00:02:04.290 --> 00:02:08.220
喜欢在纸上写下来或说哦

00:02:06.090 --> 00:02:09.840
是的，这就是终点

00:02:08.220 --> 00:02:12.150
看起来像，然后就是这样

00:02:09.840 --> 00:02:13.200
看起来像在体内

00:02:12.150 --> 00:02:14.580
你只是需要照顾

00:02:13.200 --> 00:02:16.020
冰冷的话对你

00:02:14.580 --> 00:02:17.790
其实我可以有人可以测试

00:02:16.020 --> 00:02:19.410
反对这样的话，如果有

00:02:17.790 --> 00:02:21.780
有点像小分歧

00:02:19.410 --> 00:02:23.790
哦，我们确实喜欢-而不是

00:02:21.780 --> 00:02:26.910
下划线可能像名字一样

00:02:23.790 --> 00:02:28.530
在名字和名字之间

00:02:26.910 --> 00:02:30.210
实际上有人编程

00:02:28.530 --> 00:02:31.590
将实际测试验证

00:02:30.210 --> 00:02:35.070
确保它实际上与您所匹配

00:02:31.590 --> 00:02:38.520
同意，所以你为什么要关心

00:02:35.070 --> 00:02:39.990
很明显，因为只有很多人

00:02:38.520 --> 00:02:41.490
这里实际上有几个人在做

00:02:39.990 --> 00:02:43.860
发展承包商显然

00:02:41.490 --> 00:02:46.020
人们实际上是在推动任命

00:02:43.860 --> 00:02:49.380
现在无需生产即可生成代码

00:02:46.020 --> 00:02:50.820
设置，为什么你需要改变为什么

00:02:49.380 --> 00:02:52.590
你是否应该在意明显的改变

00:02:50.820 --> 00:02:55.740
我想你一定程度上有兴趣

00:02:52.590 --> 00:02:58.260
在改变中，但我总是有一种方式

00:02:55.740 --> 00:03:00.270
发现有关推动变化或某种

00:02:58.260 --> 00:03:02.220
尚未使组织发生变化

00:03:00.270 --> 00:03:03.630
有点解释当前是什么

00:03:02.220 --> 00:03:05.730
我们做事方式的问题

00:03:03.630 --> 00:03:07.680
现在如何批准您

00:03:05.730 --> 00:03:08.900
我有点想起这个场景

00:03:07.680 --> 00:03:11.459
来自费城的永远阳光明媚

00:03:08.900 --> 00:03:13.230
查理（Charlie）的角色之一

00:03:11.459 --> 00:03:15.450
通过酒吧拿一袋垃圾

00:03:13.230 --> 00:03:17.070
和另外几个角色Mac和

00:03:15.450 --> 00:03:18.660
丹尼斯阻止他们，问你他是什么

00:03:17.070 --> 00:03:20.970
要去做，他说他要去

00:03:18.660 --> 00:03:22.920
燃烧垃圾，他们就像没有你

00:03:20.970 --> 00:03:24.840
不应该那样做，他会很好

00:03:22.920 --> 00:03:26.310
要么在他成为星星的地方燃烧它，要么

00:03:24.840 --> 00:03:27.060
会留在原地

00:03:26.310 --> 00:03:29.600
永远存在

00:03:27.060 --> 00:03:33.180
而且因为他们真的不知道

00:03:29.600 --> 00:03:35.100
关于你的足够了解垃圾和星星

00:03:33.180 --> 00:03:37.410
还有火和诸如此类的东西

00:03:35.100 --> 00:03:39.540
真正解释他为什么错了等等

00:03:37.410 --> 00:03:41.750
有点像哦，你

00:03:39.540 --> 00:03:43.500
信心十足的演讲就像哦

00:03:41.750 --> 00:03:45.660
开发的承包商，我们应该

00:03:43.500 --> 00:03:48.180
真的开始这样做，你知道

00:03:45.660 --> 00:03:49.890
经理或您上方的某人可能像

00:03:48.180 --> 00:03:51.570
等待，为什么我们需要改变什么

00:03:49.890 --> 00:03:53.970
像我们目前的做法那样是错误的

00:03:51.570 --> 00:03:55.470
事情的第一部分

00:03:53.970 --> 00:03:58.620
演示将进行

00:03:55.470 --> 00:04:00.269
在某些情况下

00:03:58.620 --> 00:04:02.250
也许可以解释一些

00:04:00.269 --> 00:04:05.040
不做的问题和困难

00:04:02.250 --> 00:04:07.769
承包商的虚假发展

00:04:05.040 --> 00:04:11.670
第一个，我喜欢用礼物，所以

00:04:07.769 --> 00:04:15.690
我们要去看看，可以吗

00:04:11.670 --> 00:04:17.609
每个人都知道没关系，这是

00:04:15.690 --> 00:04:18.959
有点想尝试

00:04:17.609 --> 00:04:21.269
与已经存在的人交流

00:04:18.959 --> 00:04:23.880
可能没有最好的服务

00:04:21.269 --> 00:04:25.530
文档，所以我们有一个客户

00:04:23.880 --> 00:04:27.940
他们需要它连接客户的

00:04:25.530 --> 00:04:30.040
获得客户信息的服务

00:04:27.940 --> 00:04:32.770
 DG重新思考就好了

00:04:30.040 --> 00:04:34.690
文档他们有一个单词doc可以

00:04:32.770 --> 00:04:36.640
致电获取客户以获取信息

00:04:34.690 --> 00:04:39.010
好吧，如果他们应该做的很好

00:04:36.640 --> 00:04:40.810
但这实际上是一个后期终结点

00:04:39.010 --> 00:04:42.910
他说去得到顾客而不是得到

00:04:40.810 --> 00:04:44.500
任何东西回来哦，四五个你应该

00:04:42.910 --> 00:04:46.870
一直在发帖，所以他现在

00:04:44.500 --> 00:04:47.740
现在打电话给帖子

00:04:46.870 --> 00:04:49.240
一无所有

00:04:47.740 --> 00:04:50.890
 Diggs他将标头发送给

00:04:49.240 --> 00:04:51.640
授权好了，他正在发送

00:04:50.890 --> 00:04:54.310
一切

00:04:51.640 --> 00:04:57.430
奥斯汀跟踪标题向上500错误

00:04:54.310 --> 00:04:58.810
现在出了什么问题现在服务很好

00:04:57.430 --> 00:05:02.170
之所以倒下是因为它被倒下了

00:04:58.810 --> 00:05:04.660
维修哦，它恢复了200 HT 

00:05:02.170 --> 00:05:06.250
笔克，但有一个错误，但他没有

00:05:04.660 --> 00:05:08.140
知道这是否意味着您只知道一些

00:05:06.250 --> 00:05:10.420
错误代码一二三

00:05:08.140 --> 00:05:12.430
梅森关于它实际上发生了什么

00:05:10.420 --> 00:05:16.570
这是怎么回事，我们有一个

00:05:12.430 --> 00:05:18.310
 API定义不明确或未记录，我们

00:05:16.570 --> 00:05:20.350
行为和模式不一致

00:05:18.310 --> 00:05:22.180
我的意思是不必一定要使用

00:05:20.350 --> 00:05:24.850
休息一切，但事实并非如此

00:05:22.180 --> 00:05:27.010
在名称中使用动词代替

00:05:24.850 --> 00:05:28.630
实际上是HTTP 

00:05:27.010 --> 00:05:30.610
在那边做，但是在另一个地方

00:05:28.630 --> 00:05:33.190
也许正在适当放松

00:05:30.610 --> 00:05:35.620
协议，因此您可能

00:05:33.190 --> 00:05:37.930
行为模式不一致，然后

00:05:35.620 --> 00:05:40.120
还可以针对实时服务进行测试

00:05:37.930 --> 00:05:42.790
导致结果不一致

00:05:40.120 --> 00:05:44.860
曾经有一段时间我知道我在哪里工作

00:05:42.790 --> 00:05:48.430
针对某种新API开发

00:05:44.860 --> 00:05:50.080
然后就像我想我终于拥有了

00:05:48.430 --> 00:05:51.730
工作，我叫正确，我

00:05:50.080 --> 00:05:53.470
仍然有失败，所以我喜欢

00:05:51.730 --> 00:05:55.330
仔细看可能是

00:05:53.470 --> 00:05:58.060
我的API或您知道的内容有误

00:05:55.330 --> 00:06:01.450
设置不正确，可能在两个之后

00:05:58.060 --> 00:06:03.220
工作日和跟踪日

00:06:01.450 --> 00:06:06.160
人们对即将发生的事情感到沮丧

00:06:03.220 --> 00:06:08.140
像那个人一样的信息

00:06:06.160 --> 00:06:09.970
实际工作，我真的发现了

00:06:08.140 --> 00:06:11.530
那也许就是我所提供的服务

00:06:09.970 --> 00:06:13.960
实际上试图打电话是错误的配置

00:06:11.530 --> 00:06:15.820
还是什么，或者我很沮丧，所以我只是

00:06:13.960 --> 00:06:18.010
浪费了两天，因为

00:06:15.820 --> 00:06:19.270
服务下降，但我认为我们都有

00:06:18.010 --> 00:06:21.100
有点像这里的评判

00:06:19.270 --> 00:06:23.200
我们尝试过的一些笑声

00:06:21.100 --> 00:06:25.180
使用api的，这就是你有

00:06:23.200 --> 00:06:27.520
不知道它如何工作是因为你

00:06:25.180 --> 00:06:30.700
使用像PDF或Word文档

00:06:27.520 --> 00:06:32.470
实际使用它和该API 

00:06:30.700 --> 00:06:34.600
文档严重过时

00:06:32.470 --> 00:06:36.310
因为只有更新和书面的

00:06:34.600 --> 00:06:41.630
曾经是第一批员工

00:06:36.310 --> 00:06:43.760
更新，因为铝的另一个问题

00:06:41.630 --> 00:06:47.330
不做合约衍生品

00:06:43.760 --> 00:06:49.850
相关的是你有一个非常串行的路径

00:06:47.330 --> 00:06:52.640
如何进行生产，以便

00:06:49.850 --> 00:06:54.710
像新功能或新功能一样开始

00:06:52.640 --> 00:06:57.650
服务，否则您可能要添加新的

00:06:54.710 --> 00:06:59.540
服务的特色，所以您有点

00:06:57.650 --> 00:07:00.800
参加了所有的设计会议，现在您

00:06:59.540 --> 00:07:03.080
真的可以走了

00:07:00.800 --> 00:07:05.060
但现在您必须等待

00:07:03.080 --> 00:07:06.710
服务开发人员实际构建和

00:07:05.060 --> 00:07:08.990
编写该服务，使您成为客户

00:07:06.710 --> 00:07:10.820
开发人员实际上可以开始编写并

00:07:08.990 --> 00:07:13.450
反对它，所以有一些

00:07:10.820 --> 00:07:15.770
现在的问题还可以

00:07:13.450 --> 00:07:17.060
服务FL我们回到那里说了所有

00:07:15.770 --> 00:07:18.830
当我准备好时冻结

00:07:17.060 --> 00:07:21.470
像这样的好客户是纵坐标

00:07:18.830 --> 00:07:24.350
正确的II知道如何做出改变

00:07:21.470 --> 00:07:26.740
你知道一个PI最终没有做出

00:07:24.350 --> 00:07:29.780
模型变化或类似的东西

00:07:26.740 --> 00:07:32.150
现在冻结，一切都变得

00:07:29.780 --> 00:07:34.160
陷入生产问题，现在

00:07:32.150 --> 00:07:35.720
这意味着所有这些功能和东西

00:07:34.160 --> 00:07:37.730
您想成为客户

00:07:35.720 --> 00:07:40.280
好吧，直到该服务才能完成

00:07:37.730 --> 00:07:43.310
开发人员现在不再有机会

00:07:40.280 --> 00:07:45.470
继续做他们的工作是什么

00:07:43.310 --> 00:07:46.610
继续这里无法

00:07:45.470 --> 00:07:49.580
并行发展

00:07:46.610 --> 00:07:51.290
直到轻松地提供某种服务

00:07:49.580 --> 00:07:52.970
那种高级阶段真的不能

00:07:51.290 --> 00:07:54.770
开始就在我的意思是你可以

00:07:52.970 --> 00:07:56.600
可能会这样做，可能是

00:07:54.770 --> 00:07:58.040
你说就像嘿，这就是API 

00:07:56.600 --> 00:07:59.780
看起来像它会

00:07:58.040 --> 00:08:02.120
看起来像这些东西，但您可以运行

00:07:59.780 --> 00:08:04.610
这些问题可能是

00:08:02.120 --> 00:08:06.680
实际情况略有不同

00:08:04.610 --> 00:08:08.450
最终看起来就像

00:08:06.680 --> 00:08:11.030
希望实际上是正确的，我知道

00:08:08.450 --> 00:08:12.830
再次有些时候，一般

00:08:11.030 --> 00:08:14.930
我更多地是在后端

00:08:12.830 --> 00:08:16.700
我在哪里，哦，是的

00:08:14.930 --> 00:08:18.110
你知道这是一个人的对象，因为

00:08:16.700 --> 00:08:20.750
有名字姓氏中间名

00:08:18.110 --> 00:08:22.610
等等，以及我实际的命名方式

00:08:20.750 --> 00:08:24.670
这些领域可能略有不同

00:08:22.610 --> 00:08:27.830
从客户的期望中

00:08:24.670 --> 00:08:29.570
那么我们就以此结束您的时间表

00:08:27.830 --> 00:08:31.550
都会受到两种方式的影响

00:08:29.570 --> 00:08:33.620
服务和客户开发人员

00:08:31.550 --> 00:08:35.390
显然，我们看到那里的服务

00:08:33.620 --> 00:08:37.190
开发人员陷入某种困境

00:08:35.390 --> 00:08:38.840
减少问题，然后

00:08:37.190 --> 00:08:43.010
客户开发人员可以使用的方式

00:08:38.840 --> 00:08:44.330
继续努力，但随后

00:08:43.010 --> 00:08:46.310
客户开发人员也许他们最终可以

00:08:44.330 --> 00:08:47.750
开始研究它，但是他们得到了

00:08:46.310 --> 00:08:49.670
陷入生产问题或他们

00:08:47.750 --> 00:08:51.589
还有其他事情发生，所以你只是

00:08:49.670 --> 00:08:53.300
你有很多潜在的延迟

00:08:51.589 --> 00:08:55.310
而如果你有工作能力

00:08:53.300 --> 00:08:56.779
并行好，如果一次

00:08:55.310 --> 00:08:58.640
隔离另一只猴子继续

00:08:56.779 --> 00:09:01.970
进步，而另一个赶上

00:08:58.640 --> 00:09:03.710
或正在对其进行处理，然后

00:09:01.970 --> 00:09:05.810
最终还是客户开发人员

00:09:03.710 --> 00:09:07.100
也许必须加快速度，所以你不得不

00:09:05.810 --> 00:09:08.540
所有这些关于你如何设计的模因

00:09:07.100 --> 00:09:11.360
实际与之合作并实施

00:09:08.540 --> 00:09:13.040
 API，但大约需要两个星期

00:09:11.360 --> 00:09:14.570
两个月或谁知道多久

00:09:13.040 --> 00:09:16.370
 API已经为您准备好了

00:09:14.570 --> 00:09:18.350
针对它以及所有其他内容进行编程

00:09:16.370 --> 00:09:19.700
您何时拥有的信息

00:09:18.350 --> 00:09:21.950
您首先要进行那些设计

00:09:19.700 --> 00:09:24.020
会议，现在完全消失了

00:09:21.950 --> 00:09:26.360
只是因为你有一千个其他

00:09:24.020 --> 00:09:28.040
在过渡期间要做的事情

00:09:26.360 --> 00:09:30.050
让你知道一个星期左右

00:09:28.040 --> 00:09:31.580
记得好吧，这就是

00:09:30.050 --> 00:09:33.170
它实际上将与此API一起使用

00:09:31.580 --> 00:09:35.120
这就是它的名字

00:09:33.170 --> 00:09:38.960
端点，然后将其构建到我的

00:09:35.120 --> 00:09:41.450
系统，最后我们有了情况

00:09:38.960 --> 00:09:43.220
好的，您正在使用API 

00:09:41.450 --> 00:09:45.260
在那里，但它还在继续， 

00:09:43.220 --> 00:09:47.000
持续发展，有时

00:09:45.260 --> 00:09:49.100
也许事情有所改变

00:09:47.000 --> 00:09:50.870
所以突然间服务开发者

00:09:49.100 --> 00:09:52.880
就像我要更改此API一样

00:09:50.870 --> 00:09:55.070
客户对客户默认小狗

00:09:52.880 --> 00:09:57.140
逮捕，但没人告诉客户

00:09:55.070 --> 00:10:00.410
最后部署到生产

00:09:57.140 --> 00:10:03.530
晚上，现在你要留下来

00:10:00.410 --> 00:10:04.730
晚了哦，等等也讨厌这个习俗

00:10:03.530 --> 00:10:07.460
角色模型将被更改为

00:10:04.730 --> 00:10:10.220
好吧，嘿，乐在其中

00:10:07.460 --> 00:10:11.810
为什么他们总是

00:10:10.220 --> 00:10:14.660
我们是最后一个了解这些的人

00:10:11.810 --> 00:10:17.000
改变，所以这里再次发生了什么

00:10:14.660 --> 00:10:20.420
未捕获到突破性的API更改

00:10:17.000 --> 00:10:21.920
直到他们投入生产为止

00:10:20.420 --> 00:10:23.330
当然你不能写整合测试

00:10:21.920 --> 00:10:25.460
但是你碰到那些问题

00:10:23.330 --> 00:10:28.310
我在第一个礼物中谈论

00:10:25.460 --> 00:10:31.550
八个是第一个场景

00:10:28.310 --> 00:10:33.290
依靠实时服务，您可以

00:10:31.550 --> 00:10:36.650
他们可能会因为以下原因而陷入困境的问题

00:10:33.290 --> 00:10:38.510
他们给这个配置问题

00:10:36.650 --> 00:10:40.580
您配置错误或数据

00:10:38.510 --> 00:10:42.800
您用来进行测试的

00:10:40.580 --> 00:10:44.360
被改变或其他东西，所以你的测试

00:10:42.800 --> 00:10:45.950
你不是真的相信他们

00:10:44.360 --> 00:10:47.660
他们失败了，因为它可能会失败

00:10:45.950 --> 00:10:49.280
由于很多原因

00:10:47.660 --> 00:10:50.420
与你的实际无关

00:10:49.280 --> 00:10:51.529
在实际投入之前进行测试

00:10:50.420 --> 00:10:54.320
生产，并且效果很好

00:10:51.529 --> 00:10:55.820
因为您知道生产服务

00:10:54.320 --> 00:10:57.650
正确设置并具有所有

00:10:55.820 --> 00:10:59.660
您所期望的数据，所以您

00:10:57.650 --> 00:11:00.740
只是开始像这样

00:10:59.660 --> 00:11:02.660
集成测试失败

00:11:00.740 --> 00:11:03.950
谁在乎之后最终会在乎

00:11:02.660 --> 00:11:05.959
失败以及何时不实际发生

00:11:03.950 --> 00:11:08.560
意味着什么，你只是开始忽略它

00:11:05.959 --> 00:11:11.660
所以你不再相信它了

00:11:08.560 --> 00:11:13.160
 API的更改也受到严格控制

00:11:11.660 --> 00:11:15.050
由服务开发者提供的服务

00:11:13.160 --> 00:11:17.689
助手们将改变方式

00:11:15.050 --> 00:11:19.370
 API看起来最适合什么

00:11:17.689 --> 00:11:22.550
他们觉得像API，所以看起来像

00:11:19.370 --> 00:11:24.139
然后我们为衰落服务

00:11:22.550 --> 00:11:25.550
开发人员只需要某种

00:11:24.139 --> 00:11:28.670
接受他们并没有真正得到

00:11:25.550 --> 00:11:31.490
大量的发言权以及它的外观

00:11:28.670 --> 00:11:33.500
所以希望这看起来有些相关

00:11:31.490 --> 00:11:35.480
这大概是我认为的三个

00:11:33.500 --> 00:11:36.800
广阔的沙地覆盖了

00:11:35.480 --> 00:11:38.720
不做的很多问题

00:11:36.800 --> 00:11:41.209
合同或开发，所以让我们开始吧

00:11:38.720 --> 00:11:43.579
深入了解合同驱动

00:11:41.209 --> 00:11:45.980
开发实际上可以开始解决

00:11:43.579 --> 00:11:50.420
这些问题，为此，我们将

00:11:45.980 --> 00:11:52.040
看着 Spring 的云收缩，为什么

00:11:50.420 --> 00:11:53.180
秋千电话联系实际上很好

00:11:52.040 --> 00:11:54.759
在这里我真的不需要解释

00:11:53.180 --> 00:11:57.259
我们都是春季开发人员-大概是

00:11:54.759 --> 00:11:59.779
对使用spring完全感兴趣

00:11:57.259 --> 00:12:02.029
这是一个非常积极的发展项目

00:11:59.779 --> 00:12:03.949
实际上是几个主要的开发者

00:12:02.029 --> 00:12:05.839
该演示文稿中的内容

00:12:03.949 --> 00:12:09.439
所以我一点也不紧张

00:12:05.839 --> 00:12:11.389
关于它还可以与

00:12:09.439 --> 00:12:13.579
其他工具和标准开放式API 

00:12:11.389 --> 00:12:15.829
打包真的很招摇

00:12:13.579 --> 00:12:18.170
插件或库，如果

00:12:15.829 --> 00:12:19.639
您已经在使用这些工具了

00:12:18.170 --> 00:12:21.170
不像您必须喜欢全部扔掉

00:12:19.639 --> 00:12:22.519
在佩特拉（Petra）学习新的东西

00:12:21.170 --> 00:12:24.740
可以继续使用

00:12:22.519 --> 00:12:26.540
你现有的技术，也许

00:12:24.740 --> 00:12:28.850
迁移过去只是保持它如何

00:12:26.540 --> 00:12:30.459
互操作性是一样的

00:12:28.850 --> 00:12:33.410
非常好

00:12:30.459 --> 00:12:36.110
它还具有灵活的文档

00:12:33.410 --> 00:12:38.029
支持Spring Rest文档，因此您可以

00:12:36.110 --> 00:12:39.680
写出这些合同，并从中

00:12:38.029 --> 00:12:42.559
合同您实际上可以创建一些

00:12:39.680 --> 00:12:44.180
看起来非常漂亮的文档

00:12:42.559 --> 00:12:45.559
好吧，这不只是您必须看一下

00:12:44.180 --> 00:12:46.850
了解这些合同，您可以

00:12:45.559 --> 00:12:50.029
创造出非常人性化的东西

00:12:46.850 --> 00:12:51.800
可读，最后，这就是

00:12:50.029 --> 00:12:56.449
当然合作的一部分来了

00:12:51.800 --> 00:13:00.379
它具有多语言支持，您可以

00:12:56.449 --> 00:13:02.540
在此链接上阅读更多内容，以便

00:13:00.379 --> 00:13:05.779
最初在洒承包商时

00:13:02.540 --> 00:13:08.269
第一次部署的您被释放

00:13:05.779 --> 00:13:09.920
与groovy签订合同

00:13:08.269 --> 00:13:11.990
是一种非常简单的合同

00:13:09.920 --> 00:13:14.000
看起来像想像您在打电话

00:13:11.990 --> 00:13:15.139
某种类似的人服务和

00:13:14.000 --> 00:13:16.819
您要添加一个新的

00:13:15.139 --> 00:13:20.240
得到所有回应

00:13:16.819 --> 00:13:21.590
带有标头，以便在任何位置

00:13:20.240 --> 00:13:24.860
应该是这样

00:13:21.590 --> 00:13:26.540
这个的非常简单的例子

00:13:24.860 --> 00:13:28.550
有点回到

00:13:26.540 --> 00:13:30.950
这是一个请求，这是它的外观

00:13:28.550 --> 00:13:32.180
就像帖子一样，这里是这个URI和

00:13:30.950 --> 00:13:33.710
内容应该是什么样的

00:13:32.180 --> 00:13:37.430
然后这就是回应

00:13:33.710 --> 00:13:39.980
看起来像这样的要求

00:13:37.430 --> 00:13:42.020
您已将此合同写成添加新

00:13:39.980 --> 00:13:44.960
人，然后你实际上可以

00:13:42.020 --> 00:13:47.120
针对服务运行它以查看是否

00:13:44.960 --> 00:13:49.640
实际提供的服务

00:13:47.120 --> 00:13:52.430
如果效果很好，则以这种方式回应

00:13:49.640 --> 00:13:55.730
测试通行证当然不会

00:13:52.430 --> 00:13:57.230
没有有意义的API，所以

00:13:55.730 --> 00:13:58.700
我要签一份合同

00:13:57.230 --> 00:14:00.800
与它的行为，你将有一个

00:13:58.700 --> 00:14:02.600
一堆不同的合同

00:14:00.800 --> 00:14:04.010
解释如何使用您的服务

00:14:02.600 --> 00:14:06.010
当一切正常的时候会发生什么

00:14:04.010 --> 00:14:08.870
当事情如此糟糕等等时发生

00:14:06.010 --> 00:14:11.540
当所有这些测试通过B或C部分

00:14:08.870 --> 00:14:14.810
 ICD流程最终将被构建

00:14:11.540 --> 00:14:17.660
然后捆绑成一个存根

00:14:14.810 --> 00:14:19.670
工件，然后存根工件

00:14:17.660 --> 00:14:21.980
可以放入您的工件库中

00:14:19.670 --> 00:14:23.960
以便可以在您之间共享

00:14:21.980 --> 00:14:26.660
组织或任何人

00:14:23.960 --> 00:14:27.890
消费您的服务，以便您了解自己

00:14:26.660 --> 00:14:30.920
可以将其放入第三方位置

00:14:27.890 --> 00:14:34.520
或公共场所（如果有） 

00:14:30.920 --> 00:14:37.670
外部供应商或外部客户，以及

00:14:34.520 --> 00:14:39.440
然后最后是那些客户

00:14:37.670 --> 00:14:41.660
必须考验你的生活

00:14:39.440 --> 00:14:43.580
他们可以实际测试的服务

00:14:41.660 --> 00:14:45.290
这个存根工件总是

00:14:43.580 --> 00:14:48.650
将给出一致的结果，并且

00:14:45.290 --> 00:14:50.900
它也会更快，所以

00:14:48.650 --> 00:14:52.760
你会知道客户是否

00:14:50.900 --> 00:14:55.910
开发人员然后正确使用API 

00:14:52.760 --> 00:14:58.330
希望他们的测试能够通过并

00:14:55.910 --> 00:15:01.040
当然也可以

00:14:58.330 --> 00:15:04.460
提及所有这些合同，并

00:15:01.040 --> 00:15:06.770
然后用它来创建文档

00:15:04.460 --> 00:15:11.540
然后也可以与以下客户共享

00:15:06.770 --> 00:15:13.910
如何使用您的API这么少

00:15:11.540 --> 00:15:15.740
冒号有点脱落，但第一个

00:15:13.910 --> 00:15:17.780
分开写任何的联系方式

00:15:15.740 --> 00:15:19.700
要定义一个行为，然后

00:15:17.780 --> 00:15:21.110
第二，你要验证第三

00:15:19.700 --> 00:15:22.310
你会捆绑在一起，几个

00:15:21.110 --> 00:15:24.050
您去过的文物

00:15:22.310 --> 00:15:26.840
测试它，他们去生成

00:15:24.050 --> 00:15:28.610
文档，这是第二个

00:15:26.840 --> 00:15:31.130
第五步，这些应该是您的一部分

00:15:28.610 --> 00:15:32.420
自动化的过程，所以每次您

00:15:31.130 --> 00:15:34.220
做出改变并建立自己的

00:15:32.420 --> 00:15:35.010
这些测试正在运行的应用程序

00:15:34.220 --> 00:15:37.050
以便

00:15:35.010 --> 00:15:39.330
 API发生变化的方式

00:15:37.050 --> 00:15:41.070
这是要打破的一步

00:15:39.330 --> 00:15:42.750
早期可能的第一步是

00:15:41.070 --> 00:15:46.500
第二步实际验证那些

00:15:42.750 --> 00:15:50.670
 API匹配，这将防止任何

00:15:46.500 --> 00:15:52.740
对API的一些意外更改

00:15:50.670 --> 00:15:54.960
从生产开始

00:15:52.740 --> 00:15:57.210
总是要确保您的APR 

00:15:54.960 --> 00:15:59.760
您的文档始终是最新的

00:15:57.210 --> 00:16:03.270
无论API当前看起来如何

00:15:59.760 --> 00:16:05.670
就像没事，但是你会如何

00:16:03.270 --> 00:16:08.340
进入这种协作式协作

00:16:05.670 --> 00:16:09.870
流程，以便服务开发人员客户端

00:16:08.340 --> 00:16:13.140
人们实际上可以真正开始工作

00:16:09.870 --> 00:16:15.450
在一起，所以现在你喜欢

00:16:13.140 --> 00:16:17.040
如果是您，则在合同期间制作

00:16:15.450 --> 00:16:18.810
很了解前端

00:16:17.040 --> 00:16:21.540
他们将成为PI JavaScript的客户

00:16:18.810 --> 00:16:24.750
开发人员编写您的UI UX，就像

00:16:21.540 --> 00:16:26.310
 spa，这与Java差不多

00:16:24.750 --> 00:16:29.010
确实有点像制作人

00:16:26.310 --> 00:16:30.870
驱动合同，服务是

00:16:29.010 --> 00:16:32.310
告诉您API的外观， 

00:16:30.870 --> 00:16:33.900
对于客户来说，这仍然是真的

00:16:32.310 --> 00:16:36.930
很棒，因为他们实际上有一些

00:16:33.900 --> 00:16:38.520
他们实际上可以签订的合同很好

00:16:36.930 --> 00:16:41.250
反对的计划也总是在进行

00:16:38.520 --> 00:16:43.170
给出一致的结果，但是换一种方式

00:16:41.250 --> 00:16:44.250
你可以用一个

00:16:43.170 --> 00:16:46.800
更协作的方法是

00:16:44.250 --> 00:16:48.900
消费者驱动的环境

00:16:46.800 --> 00:16:50.490
客户可以解释嘿这是什么

00:16:48.900 --> 00:16:52.320
我需要服务，现在

00:16:50.490 --> 00:16:54.270
 ellebra的服务就像是

00:16:52.320 --> 00:16:55.830
我可以写这个然后他们可以测试

00:16:54.270 --> 00:16:57.420
违反此合同，然后

00:16:55.830 --> 00:17:01.230
最终将一些东西部署到

00:16:57.420 --> 00:17:03.240
生产，但为什么要合作

00:17:01.230 --> 00:17:05.370
重要性很好，它可以使您更好

00:17:03.240 --> 00:17:07.770
谁利用开发人员时间

00:17:05.370 --> 00:17:09.690
现在可能有时间写这些

00:17:07.770 --> 00:17:12.360
合同，他们可以成为写它的人

00:17:09.690 --> 00:17:13.320
而不是全都放在一边

00:17:12.360 --> 00:17:16.230
你知道这是否是一项服务

00:17:13.320 --> 00:17:18.510
开发人员或客户开发人员更多

00:17:16.230 --> 00:17:20.699
各方对API设计的意见

00:17:18.510 --> 00:17:22.829
因此，而不是只有一个

00:17:20.699 --> 00:17:25.260
对这个API先生长什么样的看法

00:17:22.829 --> 00:17:27.780
你可以同时得到这个消费者

00:17:25.260 --> 00:17:29.670
 API和生产者版本

00:17:27.780 --> 00:17:31.830
一起设计什么

00:17:29.670 --> 00:17:33.960
应该看起来像，希望这

00:17:31.830 --> 00:17:36.360
会留下更多导致更多买入的机会

00:17:33.960 --> 00:17:38.720
来自各方的API设计

00:17:36.360 --> 00:17:41.490
而不是仅仅由你决定

00:17:38.720 --> 00:17:45.750
作为消费者，您实际上可以拥有

00:17:41.490 --> 00:17:47.820
真实的话语以及它的外观，但是我们

00:17:45.750 --> 00:17:48.900
没有合作就无法拼写协作

00:17:47.820 --> 00:17:50.790
多声井

00:17:48.900 --> 00:17:52.440
好吧，也许因为你们都一样

00:17:50.790 --> 00:17:55.160
虽然不是真的

00:17:52.440 --> 00:17:57.420
任何事情，除非您实际上可以允许

00:17:55.160 --> 00:17:59.190
 JavaScript开发人员使用的工具

00:17:57.420 --> 00:18:00.510
熟悉撰写这些合同

00:17:59.190 --> 00:18:02.880
无需学习全新的知识

00:18:00.510 --> 00:18:03.930
堆栈，所以有些语言是什么

00:18:02.880 --> 00:18:06.660
独立工具

00:18:03.930 --> 00:18:08.160
好的Java开发人员JavaScript 

00:18:06.660 --> 00:18:10.200
开发人员和您认识的其他开发人员

00:18:08.160 --> 00:18:12.210
 Java开发人员显然将拥有

00:18:10.200 --> 00:18:13.740
安装在系统中的JDK 

00:18:12.210 --> 00:18:15.840
他们可以建立常规合同，因此

00:18:13.740 --> 00:18:18.900
但是JavaScript开发人员其他

00:18:15.840 --> 00:18:20.820
开发人员可能不是Maven很棒

00:18:18.900 --> 00:18:23.490
全部或其他构建工具

00:18:20.820 --> 00:18:25.140
 Java开发人员可能其他

00:18:23.490 --> 00:18:29.070
开发人员和JavaScript开发人员

00:18:25.140 --> 00:18:30.720
知道与Java友好的IDE相同，所以

00:18:29.070 --> 00:18:31.710
是的，你可以在这里看到你的问题，但是

00:18:30.720 --> 00:18:33.420
码头工人

00:18:31.710 --> 00:18:38.100
谁在这里安装了码头工人

00:18:33.420 --> 00:18:39.780
系统是的，几乎每个人，是的，你

00:18:38.100 --> 00:18:42.780
知道每个人都可能有码头工人或

00:18:39.780 --> 00:18:44.340
 aleles语言独立性和

00:18:42.780 --> 00:18:45.510
当然每个人的创造者，如果他们是一个

00:18:44.340 --> 00:18:47.400
开发人员，他们将要发送文本

00:18:45.510 --> 00:18:47.929
某种形式的编辑器，实际上就是全部

00:18:47.400 --> 00:18:53.270
你需要

00:18:47.929 --> 00:18:55.710
所以最近跟去年

00:18:53.270 --> 00:18:58.830
Spring 云接触开始，允许

00:18:55.710 --> 00:19:00.450
可以用gamal写合同的能力

00:18:58.830 --> 00:19:02.240
好吧，你有时知道一个事实， 

00:19:00.450 --> 00:19:04.890
你有空格可能有意思

00:19:02.240 --> 00:19:06.110
可能有点令人沮丧，但这是

00:19:04.890 --> 00:19:09.300
也完全是

00:19:06.110 --> 00:19:11.580
独立于任何特定语言

00:19:09.300 --> 00:19:13.580
平台JavaScript开发人员可以编写

00:19:11.580 --> 00:19:15.929
这个Java开发人员可以写这个

00:19:13.580 --> 00:19:18.059
 dotnet开发人员可以编写Yambol 

00:19:15.929 --> 00:19:20.490
可以了解你的意思吗

00:19:18.059 --> 00:19:22.230
不必学习整个

00:19:20.490 --> 00:19:25.140
新的堆栈开始写这个东西

00:19:22.230 --> 00:19:28.050
出来，这样我写的合同写

00:19:25.140 --> 00:19:29.520
 groovy中的早期或sodor li ER，这是

00:19:28.050 --> 00:19:30.990
等效联系人的外观

00:19:29.520 --> 00:19:32.790
就像在山药里一样，所以你也可以看到

00:19:30.990 --> 00:19:34.830
它不再得到X了

00:19:32.790 --> 00:19:37.020
在很多情况下合同复杂度降低

00:19:34.830 --> 00:19:39.179
方式，但不像你在服用

00:19:37.020 --> 00:19:41.940
有点像哦，会很多

00:19:39.179 --> 00:19:45.450
写起来更难，它很有用，或者

00:19:41.940 --> 00:19:48.540
少那么容易，然后我们有一些

00:19:45.450 --> 00:19:50.429
用于读取和读取的docker映像

00:19:48.540 --> 00:19:53.130
这些合同，所以他们封装

00:19:50.429 --> 00:19:55.440
所有的Java和spring以及其中的逻辑

00:19:53.130 --> 00:19:57.780
 docker容器，所以再次

00:19:55.440 --> 00:19:59.700
需要的是码头工人和有图像

00:19:57.780 --> 00:20:01.440
消费者站点和生产者站点

00:19:59.700 --> 00:20:02.550
侧面，它们可以通过配置

00:20:01.440 --> 00:20:05.370
传递

00:20:02.550 --> 00:20:06.990
我的意思是环境变量

00:20:05.370 --> 00:20:10.110
如果您是客户，怎么办

00:20:06.990 --> 00:20:12.210
你可以叫这个缠扰者

00:20:10.110 --> 00:20:13.590
这将带来这个斯塔布斯

00:20:12.210 --> 00:20:15.540
我们教过的神器

00:20:13.590 --> 00:20:18.000
您可以较早地进行测试，看看您的

00:20:15.540 --> 00:20:19.950
客户实际上会反对

00:20:18.000 --> 00:20:23.360
再一次，如果一个

00:20:19.950 --> 00:20:25.560
代替实际的现场服务

00:20:23.360 --> 00:20:27.930
或者你也可以有一个码头工人

00:20:25.560 --> 00:20:29.430
形象带来这些合同，然后

00:20:27.930 --> 00:20:31.770
测试以确保服务实际

00:20:29.430 --> 00:20:34.080
与此相反，这可以

00:20:31.770 --> 00:20:36.630
所有这些都是通过docker完成的，所以如果

00:20:34.080 --> 00:20:39.180
你可能是我知道开发人员写了一篇

00:20:36.630 --> 00:20:40.530
没有JavaScript服务，即使您可以

00:20:39.180 --> 00:20:43.430
为此工作，因此您可以对其进行工作

00:20:40.530 --> 00:20:46.890
对于客户或生产者这两个站点

00:20:43.430 --> 00:20:48.330
好的，但让我们实际来看一下

00:20:46.890 --> 00:20:50.760
实际行动中的行为听我说

00:20:48.330 --> 00:20:52.770
谈到它，所以这是实时编码

00:20:50.760 --> 00:20:55.140
所以这个人想成为牺牲者

00:20:52.770 --> 00:20:57.990
事情没有开始就没有双手

00:20:55.140 --> 00:21:02.340
好吧，我将全部使用随机垃圾箱

00:20:57.990 --> 00:21:06.060
对，所以我是一名Java开发人员

00:21:02.340 --> 00:21:07.650
通过这是一个Java后端

00:21:06.060 --> 00:21:09.540
我只是会有点用

00:21:07.650 --> 00:21:12.150
邮递员与之互动

00:21:09.540 --> 00:21:14.070
你也可以，但就我要如何

00:21:12.150 --> 00:21:18.620
正在使用Spring Cloud Contract 

00:21:14.070 --> 00:21:20.010
将完全通过

00:21:18.620 --> 00:21:23.790
语言无关

00:21:20.010 --> 00:21:27.000
工具docker和llamó所以无论如何我都有

00:21:23.790 --> 00:21:29.340
这个生产者服务正在服务

00:21:27.000 --> 00:21:32.790
生产，现在我只有一个

00:21:29.340 --> 00:21:34.530
单打n睡，所以我不必

00:21:32.790 --> 00:21:36.840
花很多时间打字

00:21:34.530 --> 00:21:38.580
其他东西目前已被注释掉

00:21:36.840 --> 00:21:41.970
因为真的你不是来找我的

00:21:38.580 --> 00:21:43.650
写出一个宁静的服务，所以得到

00:21:41.970 --> 00:21:46.500
映射，它只会返回一个

00:21:43.650 --> 00:21:48.540
一堆农产品，所以我有这个

00:21:46.500 --> 00:21:50.970
在llamo姨妈那里订婚

00:21:48.540 --> 00:21:54.180
仅用于描述检索

00:21:50.970 --> 00:21:57.030
所有的产品，所以它会得到

00:21:54.180 --> 00:21:58.350
调用API v1，它是如此之大

00:21:57.030 --> 00:22:02.010
足以让每个人看到甚至

00:21:58.350 --> 00:22:05.220
称重好好好好，所以

00:22:02.010 --> 00:22:07.320
将调用此API API v1并给出

00:22:05.220 --> 00:22:09.270
这应该得到金枪鱼的回应

00:22:07.320 --> 00:22:11.850
这将返回四

00:22:09.270 --> 00:22:14.730
不同的项目，那么它也应该

00:22:11.850 --> 00:22:18.390
具有应用程序JSON的标头类型

00:22:14.730 --> 00:22:18.870
好的，让我们实际来看一下

00:22:18.390 --> 00:22:29.430
行动

00:22:18.870 --> 00:22:31.320
哦，抱歉，然后我有一个

00:22:29.430 --> 00:22:33.810
几个脚本，然后是

00:22:31.320 --> 00:22:36.150
运行docker镜像，所以就像

00:22:33.810 --> 00:22:38.040
 docker镜像spring cloud spring 

00:22:36.150 --> 00:22:40.650
云合同，我使用最多

00:22:38.040 --> 00:22:44.180
最新版本，只是为了

00:22:40.650 --> 00:22:46.710
快过去，我是说打电话给

00:22:44.180 --> 00:22:49.350
该网址上的应用程序

00:22:46.710 --> 00:22:51.330
其实我要去的本地机器

00:22:49.350 --> 00:22:53.010
发表文物，然后我只是

00:22:51.330 --> 00:22:54.900
会像Navin坐标那样给出

00:22:53.010 --> 00:22:56.670
这些文物看起来像什么

00:22:54.900 --> 00:23:00.480
生产者服务，应该与之匹配

00:22:56.670 --> 00:23:03.320
 API服务名称，然后是什么组

00:23:00.480 --> 00:23:05.430
它会在里面，或者我可以发送给那些

00:23:03.320 --> 00:23:08.550
像我们的Sarat一样部署给您

00:23:05.430 --> 00:23:12.270
工件存储库，然后我告诉

00:23:08.550 --> 00:23:15.570
它从哪里读取合同

00:23:12.270 --> 00:23:18.060
然后还要运行

00:23:15.570 --> 00:23:20.700
测试，在这里我有我的合同， 

00:23:18.060 --> 00:23:22.260
现在我只有我所有的

00:23:20.700 --> 00:23:24.030
合同我显然还有其他

00:23:22.260 --> 00:23:26.640
合同在这里但是有

00:23:24.030 --> 00:23:28.950
目前与Yambol不同，所以他们

00:23:26.640 --> 00:23:33.600
将不会被捡起并再次检索

00:23:28.950 --> 00:23:40.650
全部生产，让我得到这个生产商

00:23:33.600 --> 00:23:42.420
我的一些服务从这里开始

00:23:40.650 --> 00:23:44.670
场景已签名并运行

00:23:42.420 --> 00:23:47.180
最近比较慢，大约需要15秒

00:23:44.670 --> 00:23:47.180
继续前进

00:23:47.450 --> 00:23:52.760
所以是普通的 spring boot 

00:23:49.980 --> 00:23:52.760
应用

00:24:01.200 --> 00:24:04.550
一刻

00:24:09.840 --> 00:24:13.940
现在就带那个精灵

00:24:39.060 --> 00:24:45.240
好吧，我们的应用程序启动了

00:24:41.520 --> 00:24:48.030
运行，所以我要利用现有的

00:24:45.240 --> 00:24:51.480
继续获得所有农产品服务，我要

00:24:48.030 --> 00:24:54.120
告诉它要运行一个脚本来

00:24:51.480 --> 00:24:56.190
验证它，现在它将旋转一个

00:24:54.120 --> 00:24:57.660
泊坞窗图片

00:24:56.190 --> 00:24:59.550
合同，然后将其称为

00:24:57.660 --> 00:25:02.130
服务以确保其API 

00:24:59.550 --> 00:25:04.140
实际上符合预期

00:25:02.130 --> 00:25:07.620
以预期的方式表现

00:25:04.140 --> 00:25:11.490
根据那个合同，为什么会这样

00:25:07.620 --> 00:25:14.760
如果我调用API v1产生，我将

00:25:11.490 --> 00:25:27.600
期待回复看起来像

00:25:14.760 --> 00:25:30.450
现在，现在

00:25:27.600 --> 00:25:31.980
这样运行，现在我可以再次致电

00:25:30.450 --> 00:25:35.970
这项服务，就像

00:25:31.980 --> 00:25:38.450
回应，我回来了，好吧，只是

00:25:35.970 --> 00:25:38.450
即将完成

00:25:46.360 --> 00:25:54.519
好的，是的，所有测试都通过了

00:25:49.510 --> 00:25:58.330
预期如此，所以我现在当然在建造

00:25:54.519 --> 00:26:00.220
反对这项现场服务，但我可以跑步

00:25:58.330 --> 00:26:01.720
遇到问题，您再次知道此服务

00:26:00.220 --> 00:26:02.460
可能会像它带来的那样下去

00:26:01.720 --> 00:26:04.600
我自己

00:26:02.460 --> 00:26:06.250
所以我们想要一些东西

00:26:04.600 --> 00:26:11.080
总是会给我们同样的结果

00:26:06.250 --> 00:26:13.390
返回，因此您可以将两者都设置为

00:26:11.080 --> 00:26:14.799
码头囚犯确认合同

00:26:13.390 --> 00:26:21.940
并验证匹配的曲面

00:26:14.799 --> 00:26:31.929
您也可以在图像中运行以实际

00:26:21.940 --> 00:26:33.669
然后读入那个文物

00:26:31.929 --> 00:26:37.899
他们正在建立的存根工件

00:26:33.669 --> 00:26:40.200
是在我们刚运行该docker时构建的

00:26:37.899 --> 00:26:40.200
建立

00:26:59.470 --> 00:27:06.010
所以这就是我们要告诉我们要做的

00:27:03.039 --> 00:27:08.590
我们要出去看看

00:27:06.010 --> 00:27:10.510
如果这再次出现工件库

00:27:08.590 --> 00:27:11.950
是工件存储库工件

00:27:10.510 --> 00:27:15.130
在本地计算机上运行的存储库

00:27:11.950 --> 00:27:17.440
会说找这个

00:27:15.130 --> 00:27:19.960
生产者服务存根工件，我们

00:27:17.440 --> 00:27:22.150
刚用此版本构建，然后

00:27:19.960 --> 00:27:26.020
我们要在九号八号港口运行

00:27:22.150 --> 00:27:28.590
七六作为实际位置

00:27:26.020 --> 00:27:30.880
为我们的Stubbs文物击中它， 

00:27:28.590 --> 00:27:35.799
在这里只是一种设置

00:27:30.880 --> 00:27:38.440
码头工人然后做所有的行为

00:27:35.799 --> 00:27:41.409
对，所以在英雄面前跑

00:27:38.440 --> 00:27:44.710
在端口8080上运行，但现在如果我

00:27:41.409 --> 00:27:46.539
实际上叫做我得到的Stubbs端口

00:27:44.710 --> 00:27:49.809
同样的结果我得到每个

00:27:46.539 --> 00:27:52.690
时间，那很棒，所以问题出在

00:27:49.809 --> 00:28:01.840
有时可能像这样的数据

00:27:52.690 --> 00:28:04.840
可以改变一切吗，如果我是

00:28:01.840 --> 00:28:07.960
重新启动此服务器，我正在运行

00:28:04.840 --> 00:28:11.220
服务，实际上在我们这样做之前

00:28:07.960 --> 00:28:11.220
因为很慢

00:28:15.110 --> 00:28:19.730
所以有重新启动此服务，我们

00:28:18.230 --> 00:28:21.739
再给它打电话，而不是仅仅给

00:28:19.730 --> 00:28:23.330
四个结果，我们将得到五个

00:28:21.739 --> 00:28:26.360
因为这是因为我们添加了一些

00:28:23.330 --> 00:28:28.009
工作的数据，你知道

00:28:26.360 --> 00:28:30.230
通常在这个例子中

00:28:28.009 --> 00:28:32.330
也许添加另一行数据

00:28:30.230 --> 00:28:33.950
不会有太大的问题，但我们可以

00:28:32.330 --> 00:28:35.570
我们都遇到了那些问题

00:28:33.950 --> 00:28:37.730
您可能需要一些自动化测试

00:28:35.570 --> 00:28:41.059
运行并喜欢现有的测试数据

00:28:37.730 --> 00:28:43.429
以某种方式更改了删除的值

00:28:41.059 --> 00:28:44.869
改变了，现在那些以前的自动化

00:28:43.429 --> 00:28:47.090
因为我们跑步或出现故障

00:28:44.869 --> 00:28:54.879
由于行为的改变或

00:28:47.090 --> 00:28:54.879
数据的变化，所以我们称之为

00:28:57.039 --> 00:29:06.049
所以我们再次称呼它，但是现在我们

00:29:03.739 --> 00:29:07.549
当然会得到五个结果

00:29:06.049 --> 00:29:09.710
他们可以改变而数据可以

00:29:07.549 --> 00:29:13.549
很难写

00:29:09.710 --> 00:29:15.619
自动测试，但是如果这是一个

00:29:13.549 --> 00:29:17.299
失败，这不是失败，因为

00:29:15.619 --> 00:29:19.820
实际发生变化以及行为如何

00:29:17.299 --> 00:29:23.739
我们只添加了一些数据，所以我们

00:29:19.820 --> 00:29:26.739
可以继续添加更多合同

00:29:23.739 --> 00:29:26.739
所以

00:29:29.720 --> 00:29:36.980
所以我们要添加另一个合同

00:29:31.950 --> 00:29:36.980
通过特定产品名称查找

00:29:37.280 --> 00:29:45.920
我们现在将停止存根服务

00:29:42.540 --> 00:29:45.920
再次验证，它应该可以工作

00:29:53.920 --> 00:29:59.470
但实际上现在我也

00:29:56.680 --> 00:30:03.990
取消评论，其他进来

00:29:59.470 --> 00:30:07.000
指出如果您为

00:30:03.990 --> 00:30:09.370
尚不存在的东西

00:30:07.000 --> 00:30:13.120
失败，因为这意味着API不会

00:30:09.370 --> 00:30:16.170
实际上就是这样做，所以一旦

00:30:13.120 --> 00:30:16.170
跑步将再次拉开序幕

00:30:24.299 --> 00:30:32.039
哦，那不好，所以一件事很好

00:30:29.399 --> 00:30:33.719
而且每一次失败都会发生

00:30:32.039 --> 00:30:36.690
只是编程的一种方式

00:30:33.719 --> 00:30:38.669
有一种非常好的方法

00:30:36.690 --> 00:30:41.929
实际去看看你的结果

00:30:38.669 --> 00:30:44.549
测试还好，所以它可以理解我的事实

00:30:41.929 --> 00:30:47.759
取消注释该广告产品和

00:30:44.549 --> 00:30:50.849
失败的原因是因为该API 

00:30:47.759 --> 00:30:53.309
我们没有发布终点

00:30:50.849 --> 00:30:56.219
在该API上，因此返回4或5 

00:30:53.309 --> 00:30:59.299
说嘿，您的API实际上并没有

00:30:56.219 --> 00:31:07.469
匹配您有空的联系人

00:30:59.299 --> 00:31:10.700
取消注释，再次执行

00:31:07.469 --> 00:31:10.700
这些都过去了

00:31:22.590 --> 00:31:29.430
基本上开始建立一个API他

00:31:26.160 --> 00:31:31.290
让我们保持一致的行为

00:31:29.430 --> 00:31:35.130
总是会符合您的期望

00:31:31.290 --> 00:31:36.480
如果您的合同是

00:31:35.130 --> 00:31:38.190
那里的API还没有

00:31:36.480 --> 00:31:41.760
实施它会注意到它的

00:31:38.190 --> 00:31:43.640
将导致测试失败，从而

00:31:41.760 --> 00:31:46.050
方式，如果你有它的任何一部分

00:31:43.640 --> 00:31:48.090
运行这些自动化的管道过程

00:31:46.050 --> 00:31:50.430
测试你不会像那样

00:31:48.090 --> 00:31:52.920
第三种情况进行某种测试

00:31:50.430 --> 00:32:00.200
那里还不匹配

00:31:52.920 --> 00:32:00.200
当然的行为

00:32:04.110 --> 00:32:11.330
哦，我没有重启我的启动服务

00:32:35.730 --> 00:32:40.730
好吧，让我们再运行一​​次

00:32:38.250 --> 00:32:40.730
应该管用

00:32:55.790 --> 00:33:03.080
运行的很好，我们将会

00:32:59.240 --> 00:33:05.420
向前看这个，所以

00:33:03.080 --> 00:33:07.790
您还想要一些灵活性

00:33:05.420 --> 00:33:09.260
也许在您的输入中

00:33:07.790 --> 00:33:12.950
我们将在这里看看

00:33:09.260 --> 00:33:14.990
片刻，因为有时是

00:33:12.950 --> 00:33:17.510
必不可少的特定数据

00:33:14.990 --> 00:33:19.730
就像它与一个

00:33:17.510 --> 00:33:22.190
你的某些狂喜模式

00:33:19.730 --> 00:33:25.040
寻找，我们有点明白为什么

00:33:22.190 --> 00:33:30.010
片刻可能会很有帮助

00:33:25.040 --> 00:33:36.830
好吧，所有这些测试都通过了，所以现在

00:33:30.010 --> 00:33:38.660
如果我当时要接受那些新的存根

00:33:36.830 --> 00:33:44.060
之后产生的工件

00:33:38.660 --> 00:33:49.630
所有这些测试都可以进行

00:33:44.060 --> 00:33:55.010
服务已经开通，所以如果我在这里打电话

00:33:49.630 --> 00:33:58.310
 8080具有此发布端点的一切

00:33:55.010 --> 00:34:02.600
通过，我现在回到这里200 

00:33:58.310 --> 00:34:06.410
我叫九八七六

00:34:02.600 --> 00:34:08.720
找回404未找到的原因

00:34:06.410 --> 00:34:12.110
为什么说内容类型不

00:34:08.720 --> 00:34:14.659
完全匹配八个应用程序JSON 

00:34:12.110 --> 00:34:20.679
 UofT上的图表与我的实际情况

00:34:14.659 --> 00:34:23.750
写在这份合同上，所以我在这里写

00:34:20.679 --> 00:34:26.540
它必须是应用程序，这是什么

00:34:23.750 --> 00:34:29.210
标头应该是因为我没有

00:34:26.540 --> 00:34:35.510
匹配失败，所以我们实际上可以添加

00:34:29.210 --> 00:34:37.010
对此有一些灵活性，所以我仍然

00:34:35.510 --> 00:34:39.200
要在合同中写明这是

00:34:37.010 --> 00:34:42.409
它应该是什么样子，但是我可以

00:34:39.200 --> 00:34:44.570
写匹配器在这里说好

00:34:42.409 --> 00:34:47.179
因为它以应用程序JSON开头

00:34:44.570 --> 00:34:50.179
这才是真正重要的

00:34:47.179 --> 00:34:52.040
同样，您知道它不会

00:34:50.179 --> 00:34:55.550
总是要成为我们犯罪的猕猴桃

00:34:52.040 --> 00:34:59.030
好吧，不是，不是，只要是

00:34:55.550 --> 00:34:59.780
那里的字母数字值可以

00:34:59.030 --> 00:35:02.120
很好

00:34:59.780 --> 00:35:03.920
与数量相似，不必

00:35:02.120 --> 00:35:07.820
总是75，因为那实际上不是

00:35:03.920 --> 00:35:09.410
事情如何运作，我们只需要它在

00:35:07.820 --> 00:35:11.450
至少一个或多个

00:35:09.410 --> 00:35:16.600
放在那里的数字

00:35:11.450 --> 00:35:20.150
是数字的，并且与

00:35:16.600 --> 00:35:21.950
响应主体并不总是

00:35:20.150 --> 00:35:24.830
必须是这个ID十

00:35:21.950 --> 00:35:28.790
返回此ID必须是数字

00:35:24.830 --> 00:35:33.260
万一我们增加了更多的价值

00:35:28.790 --> 00:35:43.000
在那里，如果我们要发表评论

00:35:33.260 --> 00:35:43.000
这个旧的，并在此发表评论

00:35:48.030 --> 00:35:54.760
所以这应该再次通过

00:35:51.520 --> 00:35:57.099
问题，而那是过去了

00:35:54.760 --> 00:36:00.220
到目前为止，我一直都在播种

00:35:57.099 --> 00:36:02.619
嘿，我给你一些很好的例子

00:36:00.220 --> 00:36:05.829
数据，然后您还给我200 

00:36:02.619 --> 00:36:07.990
回应但解释云合约

00:36:05.829 --> 00:36:10.540
并非狭narrow或仅围绕

00:36:07.990 --> 00:36:12.700
处理好事情时需要

00:36:10.540 --> 00:36:17.140
还定义了一些

00:36:12.700 --> 00:36:21.160
客户小姐使用您的API，因此这里

00:36:17.140 --> 00:36:24.040
字段名称为必填项，但我忘记了

00:36:21.160 --> 00:36:26.740
把它放在这个例子中然后

00:36:24.040 --> 00:36:29.410
发回200的回复我是如此

00:36:26.740 --> 00:36:31.809
悬念发回400 err回应

00:36:29.410 --> 00:36:33.910
然后在体内

00:36:31.809 --> 00:36:35.770
然后错误信息，而不是什么

00:36:33.910 --> 00:36:37.569
正常的身体看起来像添加一个

00:36:35.770 --> 00:36:39.430
新产品，这只是说

00:36:37.569 --> 00:36:41.680
当然缺少所需的值是

00:36:39.430 --> 00:36:44.020
极其简化，但可能是

00:36:41.680 --> 00:36:45.790
扩展到某种处理任何

00:36:44.020 --> 00:36:52.210
那可能对你有意义

00:36:45.790 --> 00:36:54.450
服务，所以我去这里评论

00:36:52.210 --> 00:36:54.450
一

00:36:56.770 --> 00:37:00.580
所以是的，我只是现在

00:36:58.900 --> 00:37:02.650
冷静下来而不是服务

00:37:00.580 --> 00:37:04.540
直接到回购，这只是

00:37:02.650 --> 00:37:06.280
检查这些字段以确保

00:37:04.540 --> 00:37:09.160
他们都是正确的，如果不是的话

00:37:06.280 --> 00:37:12.130
然后要扔这个客户

00:37:09.160 --> 00:37:14.470
没有被这个捕获的异常

00:37:12.130 --> 00:37:16.990
异常处理程序，在这种情况下是

00:37:14.470 --> 00:37:24.760
将与一起返回错误的请求

00:37:16.990 --> 00:37:27.460
错误消息，对于上一个

00:37:24.760 --> 00:37:30.250
例子，我们的测试仍然通过了

00:37:27.460 --> 00:37:35.310
更新合同后，然后

00:37:30.250 --> 00:37:35.310
让我们为此添加最后一个合同

00:37:39.180 --> 00:37:48.869
然后再运行一次哦，谢谢

00:37:46.690 --> 00:37:48.869
您

00:38:20.590 --> 00:38:25.090
我认为我们已经有了开始的应用程序，是赚

00:38:22.960 --> 00:38:26.770
在测试之前就足够了，所以我

00:38:25.090 --> 00:38:29.710
认为我们可能很好，所以谢谢

00:38:26.770 --> 00:38:34.360
为此

00:38:29.710 --> 00:38:36.820
所以一切都过去了，现在就像我说的

00:38:34.360 --> 00:38:39.790
我是一名Java开发人员

00:38:36.820 --> 00:38:41.980
我不得不看的时候有点生气

00:38:39.790 --> 00:38:44.620
在JavaScript，所以我知道我在使用

00:38:41.980 --> 00:38:46.780
邮递员，但如果

00:38:44.620 --> 00:38:49.270
这就像一个JavaScript应用程序

00:38:46.780 --> 00:38:53.380
你可能会用它来测试

00:38:49.270 --> 00:38:56.460
这个也一样，所以我们将运行模拟

00:38:53.380 --> 00:38:56.460
生产者服务

00:39:01.330 --> 00:39:07.570
这一切都在运行，我们再次

00:39:05.200 --> 00:39:12.930
再次碰到这个Stubbs 

00:39:07.570 --> 00:39:14.170
 API，如果我们发送她的回复哦，是的

00:39:12.930 --> 00:39:17.380
我们去

00:39:14.170 --> 00:39:19.000
当然，如果我们要

00:39:17.380 --> 00:39:24.100
这就是没有的地方

00:39:19.000 --> 00:39:33.610
名称它不会寄回200 

00:39:24.100 --> 00:39:36.070
回答不正确是的，不是

00:39:33.610 --> 00:39:39.730
确定哪里出了问题-从来没有做过

00:39:36.070 --> 00:39:46.920
让我看看会发生什么

00:39:39.730 --> 00:39:54.880
真正的API很好，它们一直都是

00:39:46.920 --> 00:39:57.220
工作正常，我没看到什么

00:39:54.880 --> 00:39:59.200
错了，我应该退回400 

00:39:57.220 --> 00:40:03.600
回应，我认为有一个问题

00:39:59.200 --> 00:40:05.740
一些匹配以及它如何进行

00:40:03.600 --> 00:40:08.500
我会解决这个问题

00:40:05.740 --> 00:40:10.750
无论如何在这里申请

00:40:08.500 --> 00:40:11.980
合同定义的服务让我们有点

00:40:10.750 --> 00:40:15.130
回到我所说的这些情况

00:40:11.980 --> 00:40:16.060
关于这次演讲的开始

00:40:15.130 --> 00:40:18.370
你不会碰到

00:40:16.060 --> 00:40:20.020
这些向我发出您的API 

00:40:18.370 --> 00:40:21.990
自动作为文档的一部分

00:40:20.020 --> 00:40:24.550
处理准确的文档

00:40:21.990 --> 00:40:28.350
鼓励这种讨论然后

00:40:24.550 --> 00:40:31.240
 API中的设计一致性，以及

00:40:28.350 --> 00:40:32.680
您的客户也可以开发和测试

00:40:31.240 --> 00:40:34.570
这些合同给

00:40:32.680 --> 00:40:37.900
一致的结果，因此您可以获得更多

00:40:34.570 --> 00:40:41.200
相信您对序列的自动化测试

00:40:37.900 --> 00:40:42.520
发展，现在您可以拥有客户和

00:40:41.200 --> 00:40:44.140
他们可以工作的服务开发人员

00:40:42.520 --> 00:40:45.850
合同签订后平行

00:40:44.140 --> 00:40:48.520
您不必等待我们的整个过程

00:40:45.850 --> 00:40:50.710
将在此过程中建立的服务

00:40:48.520 --> 00:40:52.570
再次鼓励有关API的讨论

00:40:50.710 --> 00:40:54.730
设计，因为您拥有全部

00:40:52.570 --> 00:41:00.670
刚刚关于

00:40:54.730 --> 00:41:02.830
通过更改API来构建它

00:41:00.670 --> 00:41:05.140
现在将要每次检查

00:41:02.830 --> 00:41:07.480
就构建过程而言，如果有人

00:41:05.140 --> 00:41:09.970
改变了API的外观

00:41:07.480 --> 00:41:12.850
就像我们在演示中看到的那样会失败

00:41:09.970 --> 00:41:14.230
如果我有合同而API没有

00:41:12.850 --> 00:41:15.279
实际匹配该合同是什么

00:41:14.230 --> 00:41:19.119
那样做

00:41:15.279 --> 00:41:21.249
泰莎的男人会失败，我有点

00:41:19.119 --> 00:41:23.349
说我们是其他原因，无论是客户

00:41:21.249 --> 00:41:26.459
或服务失败，所以也可以说

00:41:23.349 --> 00:41:28.869
合同等已更新

00:41:26.459 --> 00:41:30.549
则客户端尚未更新为

00:41:28.869 --> 00:41:33.130
使用它，客户端测试将失败

00:41:30.549 --> 00:41:35.650
当他试图对此进行测试时

00:41:33.130 --> 00:41:38.079
存根工件，所以这可以防止

00:41:35.650 --> 00:41:39.369
流氓从游戏制作中发生的变化

00:41:38.079 --> 00:41:40.869
他们有时可能会变成

00:41:39.369 --> 00:41:43.719
最终确定，因为通常很容易

00:41:40.869 --> 00:41:45.969
前滚而不是后滚

00:41:43.719 --> 00:41:47.919
也许没人真正想要的改变

00:41:45.969 --> 00:41:52.599
现在一切都会突然发生

00:41:47.919 --> 00:41:54.969
展望未来的生产

00:41:52.599 --> 00:41:57.819
最后一点，所以在本例中全部

00:41:54.969 --> 00:41:59.829
我缝在HTTP上休息，但你可以

00:41:57.819 --> 00:42:01.989
也将Spring Cloud Contract用于

00:41:59.829 --> 00:42:03.609
为做消息而写作

00:42:01.989 --> 00:42:05.589
不只是卡夫卡，还有任何一种

00:42:03.609 --> 00:42:08.499
消息传递它足够灵活

00:42:05.589 --> 00:42:09.999
也是我们听到合同等等

00:42:08.499 --> 00:42:11.559
我们认为您无法像那样改变它

00:42:09.999 --> 00:42:13.659
违约但当然

00:42:11.559 --> 00:42:16.769
总是可以将合同更改为

00:42:13.659 --> 00:42:19.089
 API会随着时间变化和更新

00:42:16.769 --> 00:42:20.679
合同测试不应该

00:42:19.089 --> 00:42:22.509
被认为是验收测试，并且

00:42:20.679 --> 00:42:24.699
都没有取代n种测试

00:42:22.509 --> 00:42:26.650
它们只是您的测试套件的一部分

00:42:24.699 --> 00:42:29.559
你将无法测试事物

00:42:26.650 --> 00:42:31.539
像弹性超时性能

00:42:29.559 --> 00:42:33.459
埃德的案件，等等，您不需要

00:42:31.539 --> 00:42:34.869
这些其他类型的测试，但您

00:42:33.459 --> 00:42:36.609
将能够使那些

00:42:34.869 --> 00:42:39.849
集成测试要容易得多，并且

00:42:36.609 --> 00:42:43.779
整个运行起来反而更快

00:42:39.849 --> 00:42:45.939
围绕一些问答和代码我

00:42:43.779 --> 00:42:48.339
显示这里不是很远但是

00:42:45.939 --> 00:42:49.719
当我推的时候它必须清洁

00:42:48.339 --> 00:42:52.539
它会在那一点

00:42:49.719 --> 00:42:54.219
 URL，还有一些很棒的文档

00:42:52.539 --> 00:42:56.229
当然，我只是在某种程度上

00:42:54.219 --> 00:42:57.789
把所有的信息写出来，然后

00:42:56.229 --> 00:43:01.029
实际上，这个演示文稿很多

00:42:57.789 --> 00:43:03.189
根据早期的这篇博客文章

00:43:01.029 --> 00:43:06.130
去年又一次你可以找到我

00:43:03.189 --> 00:43:09.009
在Twitter和电子邮件上的Billy Crandall 

00:43:06.130 --> 00:43:15.449
我在IBM Crandall的1:00，很高兴

00:43:09.009 --> 00:43:15.449
回答任何问题是

00:43:18.390 --> 00:43:24.370
如果这份合同可以单人住

00:43:21.760 --> 00:43:26.740
存储库或每个存储库中的

00:43:24.370 --> 00:43:29.890
服务或客户，情况如何

00:43:26.740 --> 00:43:31.210
在CI CD管道中组织，所以是的

00:43:29.890 --> 00:43:32.500
您可以像单独放置它们一样

00:43:31.210 --> 00:43:35.680
您可以在其中删除它们的存储库

00:43:32.500 --> 00:43:37.240
可以阅读或喜欢

00:43:35.680 --> 00:43:40.090
像存储在这样的服务上一样

00:43:37.240 --> 00:43:42.250
有不同的选项可供阅读

00:43:40.090 --> 00:43:44.650
但是，是的，您可以将其作为

00:43:42.250 --> 00:43:45.550
只要您喜欢CI v CI CD流程

00:43:44.650 --> 00:43:47.080
我正在计划

00:43:45.550 --> 00:43:49.180
继续添加到此

00:43:47.080 --> 00:43:51.340
演示，以此类推

00:43:49.180 --> 00:43:59.500
真正将其纳入CID 

00:43:51.340 --> 00:44:01.900
 CI CD管道是的，其他问题如何

00:43:59.500 --> 00:44:05.290
您在定义合同时会做什么？ 

00:44:01.900 --> 00:44:09.610
您如何定义测试设置

00:44:05.290 --> 00:44:14.230
例如，在本合同中， 

00:44:09.610 --> 00:44:17.980
服务器必须返回四个

00:44:14.230 --> 00:44:20.980
对象是的，你如何定义你

00:44:17.980 --> 00:44:24.780
知道需要做的动作，例如

00:44:20.980 --> 00:44:27.880
插入数据库或某些端点

00:44:24.780 --> 00:44:29.560
在测试服务器之前加热

00:44:27.880 --> 00:44:32.260
返回这四个对象

00:44:29.560 --> 00:44:34.360
是的，所以在这个例子中

00:44:32.260 --> 00:44:36.520
现在更贴近实况

00:44:34.360 --> 00:44:38.800
现实的例子，你将拥有所有

00:44:36.520 --> 00:44:40.420
基础行为被嘲笑了

00:44:38.800 --> 00:44:42.670
就像你确切知道会得到什么

00:44:40.420 --> 00:44:44.260
最初返回是因为您实际上

00:44:42.670 --> 00:44:48.760
最初写那些合同

00:44:44.260 --> 00:44:54.130
他们会过去，所以你会怎么做

00:44:48.760 --> 00:44:56.020
在现实世界中，你只是拥有

00:44:54.130 --> 00:44:57.850
潜在的嘲笑行为

00:44:56.020 --> 00:45:00.990
你实际上是在说那是

00:44:57.850 --> 00:45:00.990
这些测试是这样的

00:45:06.480 --> 00:45:09.480
是的

00:45:13.800 --> 00:45:20.970
所以再次谈论现实世界

00:45:18.600 --> 00:45:23.750
您保留同一合同的版本控制

00:45:20.970 --> 00:45:26.490
还是您替换相同的合同

00:45:23.750 --> 00:45:28.200
一次又一次，因为有时你

00:45:26.490 --> 00:45:31.440
想保持两个版本运行

00:45:28.200 --> 00:45:33.600
与API的同一端点平行

00:45:31.440 --> 00:45:35.280
在生产中，所以你会如何真正

00:45:33.600 --> 00:45:37.500
可能想要这样做就像

00:45:35.280 --> 00:45:40.920
在您的API网址中

00:45:37.500 --> 00:45:42.660
会喜欢v1或v2，依此类推

00:45:40.920 --> 00:45:44.640
这就是您实际处理方式

00:45:42.660 --> 00:45:47.550
这种版本控制，所以您会

00:45:44.640 --> 00:45:49.140
有两次不同的战斗，是的， 

00:45:47.550 --> 00:45:54.260
然后必须有一份单独的合同

00:45:49.140 --> 00:45:56.970
之所以写出来，是因为这份合同是

00:45:54.260 --> 00:45:59.670
仍然指向v1，所以也许您会

00:45:56.970 --> 00:46:02.160
然后将此合同更新为v1 

00:45:59.670 --> 00:46:04.350
否则您可能永远都是v1 

00:46:02.160 --> 00:46:06.210
当您出租时，您会

00:46:04.350 --> 00:46:07.980
仍然希望这份合同明显退出

00:46:06.210 --> 00:46:10.050
在那里，经过了很长时间的测试

00:46:07.980 --> 00:46:11.070
因为该API仍在公共场合

00:46:10.050 --> 00:46:14.030
因为你仍然很明显

00:46:11.070 --> 00:46:14.030
当时的支持

00:46:23.460 --> 00:46:27.630
再一次，你知道我会看看你是否有

00:46:25.109 --> 00:46:29.000
稍后给您一个简单的问题

00:46:27.630 --> 00:46:31.349
您的问题也有一些

00:46:29.000 --> 00:46:33.710
专家知识渊博， 

00:46:31.349 --> 00:46:34.870
这里的有轨电车合同也是如此

00:46:33.710 --> 00:46:36.550
谢谢

00:46:34.870 --> 00:46:42.900
 [掌声] 

00:46:36.550 --> 00:46:42.900
 [音乐] 

