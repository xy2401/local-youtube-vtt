WEBVTT
Kind: captions
Language: zh-Hans

00:00:00.900 --> 00:00:09.000
 [音乐] 

00:00:06.359 --> 00:00:10.470
是的，哦，不，我们可以阻止是的，谢谢

00:00:09.000 --> 00:00:12.990
首先感谢第一件事

00:00:10.470 --> 00:00:14.490
对，所以欢迎大家

00:00:12.990 --> 00:00:17.220
演示如何生活在帖子中

00:00:14.490 --> 00:00:19.199
spring-cloud-netflix世界谢谢

00:00:17.220 --> 00:00:21.329
来吧，我们爱您的热情，我们可以

00:00:19.199 --> 00:00:23.179
看到你知道你有很多

00:00:21.329 --> 00:00:26.099
能量是最重要的

00:00:23.179 --> 00:00:28.829
所以昨天是聚会

00:00:26.099 --> 00:00:31.529
哦，是的，我们参加了聚会

00:00:28.829 --> 00:00:33.420
嗯，我们有很多

00:00:31.529 --> 00:00:35.610
要谈论的事情，所以让我们浪费

00:00:33.420 --> 00:00:36.600
正确的时间，让我们浪费一些时间

00:00:35.610 --> 00:00:40.590
谈论自己

00:00:36.600 --> 00:00:43.710
所以也许好吧，我叫奥尔加·马图切克

00:00:40.590 --> 00:00:46.500
夏尔马你可以找到我的Twitter句柄

00:00:43.710 --> 00:00:49.830
如果比全名更容易

00:00:46.500 --> 00:00:52.110
我在这个印刷云团队工作

00:00:49.830 --> 00:00:55.730
大多数工作在洒水合同上，但我

00:00:52.110 --> 00:01:00.780
也进行更改并在网关上工作

00:00:55.730 --> 00:01:03.090
 Netflix没错，所以我叫

00:01:00.780 --> 00:01:05.400
 Mockingjay Chuck和我在

00:01:03.090 --> 00:01:07.860
灵动的团队领导着蜕

00:01:05.400 --> 00:01:10.740
合同项目我也很喜欢

00:01:07.860 --> 00:01:12.510
我的Twitter处理的CICE主题是

00:01:10.740 --> 00:01:17.820
我确定我可以在以下位置找到我的博客

00:01:12.510 --> 00:01:20.640
太多的编码平静，所以一点点

00:01:17.820 --> 00:01:24.780
历史，我想让我们回到过去

00:01:20.640 --> 00:01:28.050
假设大约五年左右

00:01:24.780 --> 00:01:30.600
回到过去，听起来就像

00:01:28.050 --> 00:01:32.940
回想过去，是的，我记得

00:01:30.600 --> 00:01:34.710
五年前的我们

00:01:32.940 --> 00:01:37.170
当然你们都不在这

00:01:34.710 --> 00:01:39.090
位置，但我们遇到了问题

00:01:37.170 --> 00:01:42.330
写巨石，我们就像我们

00:01:39.090 --> 00:01:46.770
他们非常糟糕，这很糟糕

00:01:42.330 --> 00:01:49.500
由于某种原因没有工作

00:01:46.770 --> 00:01:50.700
得出结论，我们不能

00:01:49.500 --> 00:01:53.310
写好巨石

00:01:50.700 --> 00:01:55.470
让我们来编写分布式系统

00:01:53.310 --> 00:01:57.420
去了很多会议，在那里

00:01:55.470 --> 00:01:59.430
告诉我们您现在需要做的是

00:01:57.420 --> 00:02:01.590
写分布式系统，它使

00:01:59.430 --> 00:02:04.010
完美的感觉吧，你不能写一个

00:02:01.590 --> 00:02:06.900
一次交易的单一申请

00:02:04.010 --> 00:02:09.479
分布好，所以我们去了

00:02:06.900 --> 00:02:11.819
会议，我们说那很棒

00:02:09.479 --> 00:02:13.500
听起来不错， 

00:02:11.819 --> 00:02:14.050
很多人在做演示

00:02:13.500 --> 00:02:17.200
上

00:02:14.050 --> 00:02:20.440
做正确的微服务，所以你

00:02:17.200 --> 00:02:21.730
听那些，我们认为还可以

00:02:20.440 --> 00:02:23.350
让我们回到我们的公司，因为

00:02:21.730 --> 00:02:25.150
我们已经有五年了

00:02:23.350 --> 00:02:27.550
一起在一个有趣的

00:02:25.150 --> 00:02:29.950
公司，我们开始想像

00:02:27.550 --> 00:02:32.740
好吧，我们有一个整体的应用程序

00:02:29.950 --> 00:02:35.410
还有什么问题

00:02:32.740 --> 00:02:38.080
微服务会为我们解决吗

00:02:35.410 --> 00:02:40.450
我们认为总体上我们会

00:02:38.080 --> 00:02:42.250
有一个问题，微服务

00:02:40.450 --> 00:02:44.320
可以解决的是

00:02:42.250 --> 00:02:47.350
扩展应用程序，但不扩展

00:02:44.320 --> 00:02:49.450
实例但是有很多人

00:02:47.350 --> 00:02:51.460
在单个代码库上工作

00:02:49.450 --> 00:02:53.710
不够臀部的问题哦

00:02:51.460 --> 00:02:55.180
是的，因为你必须做微

00:02:53.710 --> 00:02:59.920
服务，然后您就可以雇用人员了

00:02:55.180 --> 00:03:01.630
所以我们得出的结论是

00:02:59.920 --> 00:03:03.190
不能有更多的人，因为我们已经结束了

00:03:01.630 --> 00:03:06.250
单个代码库上有100个人

00:03:03.190 --> 00:03:09.370
那时，我们与企业进行了交谈

00:03:06.250 --> 00:03:11.560
你知道我们有问题，我们不能

00:03:09.370 --> 00:03:13.060
实际上，您知道交付多少

00:03:11.560 --> 00:03:14.890
您希望我们做的功能

00:03:13.060 --> 00:03:18.880
因为我们有太多人在工作

00:03:14.890 --> 00:03:21.670
在代码库上，那么绝对是什么

00:03:18.880 --> 00:03:24.400
解决这个问题的好主意

00:03:21.670 --> 00:03:27.520
该业务显然增加了更多

00:03:24.400 --> 00:03:30.130
人们对，所以我们有120个人

00:03:27.520 --> 00:03:31.989
一段时间，速度甚至

00:03:30.130 --> 00:03:34.570
慢一点，所以我们得出的结论是

00:03:31.989 --> 00:03:37.750
如果我们尝试将其拆分为微型

00:03:34.570 --> 00:03:40.450
以某种方式提供服务也许我们

00:03:37.750 --> 00:03:42.070
至少能够招募更多

00:03:40.450 --> 00:03:44.220
人，但也许我们能够

00:03:42.070 --> 00:03:46.420
提高速度或至少

00:03:44.220 --> 00:03:48.370
不属于

00:03:46.420 --> 00:03:51.430
二进制上下文的有界上下文

00:03:48.370 --> 00:03:54.010
如果假设那，巨石听起来很有趣

00:03:51.430 --> 00:03:56.590
我们曾经讨论过这个模型

00:03:54.010 --> 00:03:58.030
任何不应该存在的地方

00:03:56.590 --> 00:04:01.510
整体也许我们会将其写为

00:03:58.030 --> 00:04:05.380
独立的可部署单位，所以我们坐下来

00:04:01.510 --> 00:04:08.080
说好吧，让我们考虑一下， 

00:04:05.380 --> 00:04:10.720
也许是时候去看看

00:04:08.080 --> 00:04:11.950
在那里的工具，我们去了

00:04:10.720 --> 00:04:14.170
参加我们阅读的不同会议

00:04:11.950 --> 00:04:16.959
我们看书的文章，结果

00:04:14.170 --> 00:04:20.350
事实标准

00:04:16.959 --> 00:04:23.470
微服务是Netflix对

00:04:20.350 --> 00:04:25.930
比我们大一点的公司

00:04:23.470 --> 00:04:28.010
十万个请求

00:04:25.930 --> 00:04:30.230
每秒，所以我们

00:04:28.010 --> 00:04:33.770
好的结论，让我们检查一下

00:04:30.230 --> 00:04:34.700
我们做了哪些分析，我们

00:04:33.770 --> 00:04:37.670
得出的结论是

00:04:34.700 --> 00:04:41.440
实际上不是很容易配置它们

00:04:37.670 --> 00:04:43.970
就算我们有春季申请

00:04:41.440 --> 00:04:46.480
是的，因此可以与Netflix工具集成

00:04:43.970 --> 00:04:50.090
并不是那么容易，所以我们认为

00:04:46.480 --> 00:04:53.120
让我们尝试抽象它让我们隐藏所有

00:04:50.090 --> 00:04:55.340
细节很好地抽象了

00:04:53.120 --> 00:04:56.590
开发人员将不必

00:04:55.340 --> 00:04:59.510
其实你知道玩

00:04:56.590 --> 00:05:03.710
内部不同工具的配置

00:04:59.510 --> 00:05:05.930
他们的Netflix投资组合，所以我们看看

00:05:03.710 --> 00:05:09.470
在什么地方以及OSS市场以及

00:05:05.930 --> 00:05:12.860
我们发现了春季杯

00:05:09.470 --> 00:05:14.780
像Olga一样的快照

00:05:12.860 --> 00:05:17.060
我们总是做黄驱动

00:05:14.780 --> 00:05:20.210
发展，我们本来可以

00:05:17.060 --> 00:05:22.790
一个库的快照，但是我们是一个

00:05:20.210 --> 00:05:26.060
有点害怕，所以我们坐下来，我们

00:05:22.790 --> 00:05:28.550
这个伟大的绝妙主意

00:05:26.060 --> 00:05:31.400
我们所有人在某个时候都拥有

00:05:28.550 --> 00:05:32.870
让我们建立自己的东西

00:05:31.400 --> 00:05:35.960
好主意是在同一个月

00:05:32.870 --> 00:05:37.040
绝对，所以我们做到了

00:05:35.960 --> 00:05:40.190
弗农的东西，但实际上

00:05:37.040 --> 00:05:41.900
有道理，因为我们需要一个不同的

00:05:40.190 --> 00:05:45.470
释放节奏，我们想要那些

00:05:41.900 --> 00:05:49.040
特定于我们使用的抽象

00:05:45.470 --> 00:05:51.940
正确的案例，所以我们确实创建了这样的工具

00:05:49.040 --> 00:05:56.210
我们提取了里面的各种东西

00:05:51.940 --> 00:05:59.090
但是你知道时间过去了， Spring 

00:05:56.210 --> 00:06:02.270
为我们带来的惊喜杯

00:05:59.090 --> 00:06:04.310
权利并超越我们

00:06:02.270 --> 00:06:08.000
特点和质量

00:06:04.310 --> 00:06:10.340
殖民地，然后我们决定确定

00:06:08.000 --> 00:06:12.080
所以既然我们已经经验丰富

00:06:10.340 --> 00:06:14.750
开发人员我们知道最好

00:06:12.080 --> 00:06:16.960
解决任何问题的方法就是推这个

00:06:14.750 --> 00:06:19.460
对其他人的问题对

00:06:16.960 --> 00:06:22.070
委托代表团代表团是

00:06:19.460 --> 00:06:25.280
关键，所以我们说好，所以我们不再

00:06:22.070 --> 00:06:27.440
想要支持我们的工具，让我们推动

00:06:25.280 --> 00:06:30.830
他们到了 Spring ，这就是我们

00:06:27.440 --> 00:06:33.290
做了，很多东西在 Spring 

00:06:30.830 --> 00:06:34.790
云从此成为像他们一样

00:06:33.290 --> 00:06:37.040
至少在某些项目中或由

00:06:34.790 --> 00:06:39.500
我们，因为我们想委托这个

00:06:37.040 --> 00:06:41.710
别人的问题是

00:06:39.500 --> 00:06:46.460
由于我们做到这一点

00:06:41.710 --> 00:06:48.800
我们被Pivot聘请了哦，所以我们委派了

00:06:46.460 --> 00:06:52.310
为了给我们的团队带来好处，我们委托

00:06:48.800 --> 00:06:55.880
我们自己的问题给我们的细胞，所以我猜

00:06:52.310 --> 00:06:57.410
从那时起我们就回来了

00:06:55.880 --> 00:06:59.090
开始使用Spring Cloud，因为它

00:06:57.410 --> 00:07:01.850
让我们拥有非常非常非常好的

00:06:59.090 --> 00:07:04.190
对各种事物的抽象

00:07:01.850 --> 00:07:05.690
例如来自Netflix的

00:07:04.190 --> 00:07:08.470
这就是为什么我们有了 Spring 

00:07:05.690 --> 00:07:12.710
叫做Netflix Project 

00:07:08.470 --> 00:07:14.960
在我们的项目中，那些工具是什么

00:07:12.710 --> 00:07:18.020
所以我们有在Netflix上发言

00:07:14.960 --> 00:07:20.630
尤里卡，所以谁听说尤里卡好

00:07:18.020 --> 00:07:22.790
哦，有很多人，所以我不是

00:07:20.630 --> 00:07:24.770
会问你是否听说过服务

00:07:22.790 --> 00:07:25.850
发现，因为本质上尤里卡是

00:07:24.770 --> 00:07:27.140
服务的实现

00:07:25.850 --> 00:07:30.080
不认识的人的发现工具

00:07:27.140 --> 00:07:32.030
因为就像双手服务

00:07:30.080 --> 00:07:34.010
发现是一种机制， 

00:07:32.030 --> 00:07:36.790
您不再需要的云架构

00:07:34.010 --> 00:07:40.190
对IP和端口进行硬编码，但您要求

00:07:36.790 --> 00:07:42.110
像尤里卡这样的应用程序，您可以

00:07:40.190 --> 00:07:44.330
给我自由基可以有多个

00:07:42.110 --> 00:07:46.250
部署在

00:07:44.330 --> 00:07:48.940
云，那是尤里卡

00:07:46.250 --> 00:07:51.290
我们有听说过我们案子的阿尔修斯

00:07:48.940 --> 00:07:53.660
谁在使用我们的案例，这很有趣

00:07:51.290 --> 00:07:55.310
好吧，有很多人

00:07:53.660 --> 00:07:57.320
您正在使用它作为传递

00:07:55.310 --> 00:07:59.690
是的，所以也许我应该有

00:07:57.320 --> 00:08:02.720
问谁愿意使用它，所以他们

00:07:59.690 --> 00:08:04.600
说，所以我们的caius是用于

00:08:02.720 --> 00:08:07.730
本质上是动态配置

00:08:04.600 --> 00:08:09.560
我记得五年前的缎带

00:08:07.730 --> 00:08:10.970
当我第一次看到丝带时，我听到

00:08:09.560 --> 00:08:12.860
这是我的客户端负载均衡器

00:08:10.970 --> 00:08:15.380
以为它绝对不会

00:08:12.860 --> 00:08:17.210
感觉就像你为什么要使用它

00:08:15.380 --> 00:08:18.500
可以有很多平衡器，但是为什么会

00:08:17.210 --> 00:08:20.060
您有一个客户端负载均衡器

00:08:18.500 --> 00:08:22.160
实际上有什么意义

00:08:20.060 --> 00:08:25.400
因为如果你与各种交流

00:08:22.160 --> 00:08:28.460
您可以拥有不同的应用程序

00:08:25.400 --> 00:08:30.800
调整处理负载平衡的方式

00:08:28.460 --> 00:08:32.330
对于那个特定的应用程序，另一件事

00:08:30.800 --> 00:08:34.610
很有意思的是

00:08:32.330 --> 00:08:38.870
如果没有客户端，则会发生

00:08:34.610 --> 00:08:41.390
负载均衡器缓存我说的

00:08:38.870 --> 00:08:43.280
万一不同应用的地址

00:08:41.390 --> 00:08:45.860
服务发现系统的去向

00:08:43.280 --> 00:08:48.470
如果它掉下来，你可以问

00:08:45.860 --> 00:08:50.540
对于IP和端口，您有问题

00:08:48.470 --> 00:08:51.890
但是如果您缓存，可以拥有快照

00:08:50.540 --> 00:08:54.240
当然可以更新

00:08:51.890 --> 00:08:58.009
但至少你有对的事

00:08:54.240 --> 00:08:59.730
这就是谁正在使用动物园的功能区双

00:08:58.009 --> 00:09:02.279
真好

00:08:59.730 --> 00:09:05.519
所以对于那些不使用它的人来说，这是一个

00:09:02.279 --> 00:09:08.910
代理本质上是谁使用的hystrix 

00:09:05.519 --> 00:09:10.559
历史很好，很多人都这样

00:09:08.910 --> 00:09:11.939
 hystrix是电路的实现

00:09:10.559 --> 00:09:15.509
破坏者本质上我们不

00:09:11.939 --> 00:09:17.369
如果一个应用程序传播级联故障

00:09:15.509 --> 00:09:19.619
例如打电话给另一个

00:09:17.369 --> 00:09:22.379
其他应用有些故障

00:09:19.619 --> 00:09:24.689
指出何时一些统计数据可以让我们

00:09:22.379 --> 00:09:28.319
说定义它，我们假设另一个

00:09:24.689 --> 00:09:30.149
应用程序就像我们不应该调用它，因为

00:09:28.319 --> 00:09:32.249
无论如何都会失败，所以我们可以

00:09:30.149 --> 00:09:34.350
短路我们可以说的电话

00:09:32.249 --> 00:09:38.279
立即例外

00:09:34.350 --> 00:09:41.100
返回固定的响应权历史

00:09:38.279 --> 00:09:43.379
仪表板，所以这是一个可视化的UI 

00:09:41.100 --> 00:09:45.899
我们系统的状态

00:09:43.379 --> 00:09:48.749
圆形断路器涡轮机（如果您有） 

00:09:45.899 --> 00:09:50.670
很多具有断路器的应用

00:09:48.749 --> 00:09:52.980
您可以正确地汇总它们，这

00:09:50.670 --> 00:09:55.699
涡轮是一个集合，所以最后两个

00:09:52.980 --> 00:09:59.850
应用程序实际上纯粹是 Spring 的云

00:09:55.699 --> 00:10:02.249
允许您从中收集数据的应用

00:09:59.850 --> 00:10:04.350
歇斯底里和涡轮通过消息传递

00:10:02.249 --> 00:10:05.929
洒水流，所以这些是

00:10:04.350 --> 00:10:09.240
 Spring Cloud 具有的抽象

00:10:05.929 --> 00:10:11.399
创建，我们将继续使用它们

00:10:09.240 --> 00:10:15.809
我们以前的工作，现在我们

00:10:11.399 --> 00:10:18.299
在春季俱乐部发展他们，所以你

00:10:15.809 --> 00:10:21.420
知道时间飞行每个人都很高兴

00:10:18.299 --> 00:10:25.249
因为你知道Netflix他们来了

00:10:21.420 --> 00:10:27.869
写，他们开发了很棒的软件

00:10:25.249 --> 00:10:30.569
每个人都用它们会震动什么

00:10:27.869 --> 00:10:34.470
是的，您显然已经看到了

00:10:30.569 --> 00:10:37.589
很多用户都在使用它，然后在2016年

00:10:34.470 --> 00:10:39.740
来了，突然发现

00:10:37.589 --> 00:10:43.679
碳带进入维护模式

00:10:39.740 --> 00:10:46.889
这意味着对于Netflix，我们不会

00:10:43.679 --> 00:10:49.439
该项目的任何内容，除了

00:10:46.889 --> 00:10:50.399
事实上，如果我们作为Netflix需要

00:10:49.439 --> 00:10:52.529
我们要从项目中得到的东西

00:10:50.399 --> 00:10:54.179
做到这一点，但不会解决任何问题

00:10:52.529 --> 00:10:56.639
如果您是我们，我们不会涉及该项目

00:10:54.179 --> 00:10:58.649
不必去那是一种可悲的权利

00:10:56.639 --> 00:11:01.439
因为很多人都在用色带

00:10:58.649 --> 00:11:05.129
是2016年，所以很多时间

00:11:01.439 --> 00:11:06.870
已经有公司在建

00:11:05.129 --> 00:11:07.860
历史记录仪表盘上的内容

00:11:06.870 --> 00:11:12.329
也对

00:11:07.860 --> 00:11:14.579
一些东西突然变得更好

00:11:12.329 --> 00:11:16.050
要进行维护，您必须

00:11:14.579 --> 00:11:17.610
开始使用项目图集

00:11:16.050 --> 00:11:20.910
完全向后兼容

00:11:17.610 --> 00:11:23.279
像零Zul一样的hystrix数据

00:11:20.910 --> 00:11:26.430
使用Zoli创建了一些不同的路线

00:11:23.279 --> 00:11:28.380
定制，使牙齿进来

00:11:26.430 --> 00:11:30.060
完全向后不兼容，我们

00:11:28.380 --> 00:11:32.430
无法直接迁移，您必须编写

00:11:30.060 --> 00:11:35.399
从头开始一些东西我们的情况一我们

00:11:32.430 --> 00:11:39.029
家伙做同样的事情，然后炸弹

00:11:35.399 --> 00:11:39.990
 hystrix 2018不再维护

00:11:39.029 --> 00:11:44.070
对

00:11:39.990 --> 00:11:48.149
所以他们也决定完全委托

00:11:44.070 --> 00:11:51.120
是对的，因为很可能是

00:11:48.149 --> 00:11:52.640
只是一个假设

00:11:51.120 --> 00:11:54.870
与以下事实有关

00:11:52.640 --> 00:11:57.600
 netflix已决定完全使用

00:11:54.870 --> 00:11:59.160
 spring boot 和春季俱乐部和

00:11:57.600 --> 00:12:00.540
昨天喝酒会给

00:11:59.160 --> 00:12:03.750
关于分布式跟踪的演示

00:12:00.540 --> 00:12:06.209
所以我真的很开心，就像我在微笑一样

00:12:03.750 --> 00:12:08.459
因为我看到了我们所使用的工具

00:12:06.209 --> 00:12:10.350
显影剂大量使用

00:12:08.459 --> 00:12:14.339
 Netflix的意思是Netflix 

00:12:10.350 --> 00:12:18.959
向我们学习并决定委托

00:12:14.339 --> 00:12:19.290
他们的问题对我们来说是正确的，这使得

00:12:18.959 --> 00:12:23.220
感

00:12:19.290 --> 00:12:25.320
花了一些时间是的，所以我们也

00:12:23.220 --> 00:12:27.269
决定不比Netflix更差

00:12:25.320 --> 00:12:30.240
我们说我们要过去

00:12:27.269 --> 00:12:32.100
维护模式也是如此

00:12:30.240 --> 00:12:34.980
我们决定去的格林威治RC一

00:12:32.100 --> 00:12:37.130
维护模式，但有点

00:12:34.980 --> 00:12:40.649
不同于我们的维护方式

00:12:37.130 --> 00:12:42.720
因为我们说好，我们同意

00:12:40.649 --> 00:12:44.850
 Netflix没有新功能，我们不是

00:12:42.720 --> 00:12:47.000
添加任何新功能，但如果它们是

00:12:44.850 --> 00:12:50.459
阻止者或是否存在安全性

00:12:47.000 --> 00:12:55.140
问题，我们将解决这些问题，我们将

00:12:50.459 --> 00:12:57.390
我们也爱我们的社区吗？ 

00:12:55.140 --> 00:13:00.870
进行讨论，然后再讨论

00:12:57.390 --> 00:13:04.040
再十次迭代，然后如果有

00:13:00.870 --> 00:13:07.500
一个小的池请求将对其进行审核， 

00:13:04.040 --> 00:13:12.660
正确合并它，这是一点点

00:13:07.500 --> 00:13:14.730
不一样，所以如果您全部查看

00:13:12.660 --> 00:13:17.190
灰色项目正在进入

00:13:14.730 --> 00:13:18.690
维护模式正确，所以一切

00:13:17.190 --> 00:13:20.190
除了尤里卡要进去

00:13:18.690 --> 00:13:22.470
维护模式

00:13:20.190 --> 00:13:24.180
是的，它已经处于维护模式

00:13:22.470 --> 00:13:27.780
自格林威治rc1以来，我们已经

00:13:24.180 --> 00:13:31.890
格林威治发布了一项服务，因此

00:13:27.780 --> 00:13:33.510
是前一段时间，但尤里卡仍在

00:13:31.890 --> 00:13:37.650
所有这一切都不需要维护

00:13:33.510 --> 00:13:40.140
现在所有的模式

00:13:37.650 --> 00:13:42.690
要告诉你我要告诉你

00:13:40.140 --> 00:13:46.110
 Netflix上的旧堆栈缩小，因此您可以

00:13:42.690 --> 00:13:48.660
利用它，因此我们需要该演示，因此我们

00:13:46.110 --> 00:13:50.820
需要某种业务领域，所以

00:13:48.660 --> 00:13:53.460
我们正在开会，所以必须

00:13:50.820 --> 00:13:58.800
是啤酒还是金融领域

00:13:53.460 --> 00:14:03.000
所以我们走吧，我们要

00:13:58.800 --> 00:14:05.250
注册信用卡的用户

00:14:03.000 --> 00:14:07.260
我们要一些卡服务

00:14:05.250 --> 00:14:10.080
处理继续进行，因此我们必须创建

00:14:07.260 --> 00:14:12.390
用户，我们将呼叫代理或

00:14:10.080 --> 00:14:14.360
通过该代理，我们将呼叫用户

00:14:12.390 --> 00:14:17.580
服务以创建新用户

00:14:14.360 --> 00:14:21.420
而且还必须进行洪水验证

00:14:17.580 --> 00:14:22.920
甚至总是，即使是的，所以

00:14:21.420 --> 00:14:23.970
还要验证是否有

00:14:22.920 --> 00:14:27.540
有欺诈

00:14:23.970 --> 00:14:28.860
所以我们要使用的策略是

00:14:27.540 --> 00:14:31.170
将在卡应用程序中使用

00:14:28.860 --> 00:14:33.660
服务，我们将使用功能区作为

00:14:31.170 --> 00:14:35.340
代理，我们将使用这个决斗，我们

00:14:33.660 --> 00:14:37.740
历史记录仪表盘中没有hystrix 

00:14:35.340 --> 00:14:40.650
在那里我们将找到所有

00:14:37.740 --> 00:14:42.840
使用eureka的应用程序对吧

00:14:40.650 --> 00:14:46.580
那可能是起始堆栈

00:14:42.840 --> 00:14:49.320
绝对是你们中的一员

00:14:46.580 --> 00:14:51.660
您可能会对忽略它感兴趣

00:14:49.320 --> 00:14:54.240
服务我们所有人都有这个忽略

00:14:51.660 --> 00:14:56.910
服务权通常是一项服务

00:14:54.240 --> 00:14:58.920
在生产中我们没有代码

00:14:56.910 --> 00:15:01.590
源，但正在运行，没有人

00:14:58.920 --> 00:15:05.280
想杀死它，所以这是其中之一

00:15:01.590 --> 00:15:06.630
应用程序，而事实是我们想要

00:15:05.280 --> 00:15:11.850
告诉你祖尔之间的区别

00:15:06.630 --> 00:15:13.890
和门户，我们已经动物园了一切

00:15:11.850 --> 00:15:17.310
是白色列出的，所以如果我们想

00:15:13.890 --> 00:15:19.830
将我们必须明确列出的应用列入黑名单

00:15:17.310 --> 00:15:21.750
这样做是为了将被列入黑名单的应用忽略

00:15:19.830 --> 00:15:24.120
服务是的，所以这就是为什么我们叫它

00:15:21.750 --> 00:15:26.730
并忽略它是有道理的

00:15:24.120 --> 00:15:29.010
对，而且还会有

00:15:26.730 --> 00:15:32.620
涡轮机的应用，我们将展示

00:15:29.010 --> 00:15:35.110
你，让我们去看代码

00:15:32.620 --> 00:15:36.360
我们在一个合适的地方，让我们从

00:15:35.110 --> 00:15:40.150
刚开始的时候，所以我们有一个

00:15:36.360 --> 00:15:47.140
用户服务，让我们签出用户

00:15:40.150 --> 00:15:48.580
服务，所以您在这里有什么

00:15:47.140 --> 00:15:50.830
鼠标在另一个方向上，所以我们

00:15:48.580 --> 00:15:52.540
有用户服务应用程序

00:15:50.830 --> 00:15:54.460
在历史中启用hystrix 

00:15:52.540 --> 00:15:56.200
仪表板，因为我们可以这样请求

00:15:54.460 --> 00:15:58.630
进来，我们将工作委托给

00:15:56.200 --> 00:16:00.580
用户注册服务

00:15:58.630 --> 00:16:03.460
现在是这样，让我们​​检查用户

00:16:00.580 --> 00:16:05.080
再次登记服务，我们非常

00:16:03.460 --> 00:16:06.340
擅长委派，所以我们从

00:16:05.080 --> 00:16:08.830
用户注册服务

00:16:06.340 --> 00:16:11.530
验证服务安静，现在让我们

00:16:08.830 --> 00:16:15.070
检查一下，所以我们可以做的第一件事

00:16:11.530 --> 00:16:17.200
看到这里实际上是我应该开始的

00:16:15.070 --> 00:16:18.550
卡片服务抱歉，我们走吧

00:16:17.200 --> 00:16:20.190
对于汽车服务，这是最后一次

00:16:18.550 --> 00:16:22.960
应用程序从第一个开始

00:16:20.190 --> 00:16:27.580
所以我们有卡服务申请

00:16:22.960 --> 00:16:31.180
抱歉，让我们从用户开始

00:16:27.580 --> 00:16:34.030
服务客户，我们在这里注入

00:16:31.180 --> 00:16:36.760
风险模板，因此是最

00:16:34.030 --> 00:16:39.340
我们经常遇到的问题是我们是否

00:16:36.760 --> 00:16:42.220
使用 Spring Cloud ，我们有风险

00:16:39.340 --> 00:16:44.650
模板之一是普通的

00:16:42.220 --> 00:16:48.190
风险模板，另一个是

00:16:44.650 --> 00:16:50.410
应该在负载均衡器中使用

00:16:48.190 --> 00:16:52.690
正确的方法，所以我们需要找到一个

00:16:50.410 --> 00:16:54.460
服务注册表中的应用程序如何

00:16:52.690 --> 00:16:56.590
我们做到了，你甚至无法想象有多少

00:16:54.460 --> 00:16:57.820
有时我们听到过这个问题，所以如果

00:16:56.590 --> 00:16:59.680
你有这个问题，我们要

00:16:57.820 --> 00:17:01.270
立即回答，您必须使用

00:16:59.680 --> 00:17:04.780
预选赛，所以如果我们去

00:17:01.270 --> 00:17:08.200
配置我们的应用程序

00:17:04.780 --> 00:17:11.350
看到我们必须休息模板 bean 

00:17:08.200 --> 00:17:13.540
一个是负载均衡的，这意味着

00:17:11.350 --> 00:17:15.220
我们使用给定名称的主机

00:17:13.540 --> 00:17:18.040
名称将是中的服务ID 

00:17:15.220 --> 00:17:20.140
尤里卡，另一个是普通人

00:17:18.040 --> 00:17:24.570
 ris模板，您就有了限定词

00:17:20.140 --> 00:17:24.570
区分两者

00:17:26.110 --> 00:17:31.470
正确，在这里您可以看到功能区

00:17:28.780 --> 00:17:34.210
负载均衡器定义或

00:17:31.470 --> 00:17:36.370
定制，所以他们说怎么做

00:17:34.210 --> 00:17:42.190
工作，我一秒钟会告诉你

00:17:36.370 --> 00:17:44.350
让我们去用户服务客户端

00:17:42.190 --> 00:17:46.270
我们将其余模板注入

00:17:44.350 --> 00:17:48.520
资格赛模板是Orden 

00:17:46.270 --> 00:17:49.960
在这里，我们有一个很好的障碍

00:17:48.520 --> 00:17:54.220
转到来自的发现客户端

00:17:49.960 --> 00:17:58.210
 Spring 的云，所以我们在这里做的是

00:17:54.220 --> 00:18:00.760
正在搜索名为

00:17:58.210 --> 00:18:03.820
代理，我们正在检索实例

00:18:00.760 --> 00:18:08.260
这些的所有实例

00:18:03.820 --> 00:18:11.290
特殊的服务，所以如果我们去

00:18:08.260 --> 00:18:13.420
转到Eureka服务器，您将看到

00:18:11.290 --> 00:18:15.580
我们有很多应用程序在这里运行

00:18:13.420 --> 00:18:19.780
不需要鼠标，我有两个

00:18:15.580 --> 00:18:21.820
手指在这里，所以在这里我们有很多

00:18:19.780 --> 00:18:24.160
应用程序注册，以便为

00:18:21.820 --> 00:18:26.890
验证程序被忽略，代理正确

00:18:24.160 --> 00:18:29.020
如果您这样做，如果我们在代码中说得到

00:18:26.890 --> 00:18:32.560
我们将检索的代理实例

00:18:29.020 --> 00:18:34.660
那些实例，如果没有，我们就是

00:18:32.560 --> 00:18:36.490
会引发异常，那又怎样

00:18:34.660 --> 00:18:38.680
我们正在做的是我们正在调用代理

00:18:36.490 --> 00:18:40.930
用户服务注册路径

00:18:38.680 --> 00:18:43.180
这意味着我们在说亲爱的祖尔

00:18:40.930 --> 00:18:45.820
请找到用户服务并重定向

00:18:43.180 --> 00:18:49.030
用户服务注册电话

00:18:45.820 --> 00:18:52.930
并把它放进去，这样你就可以做到

00:18:49.030 --> 00:18:55.480
现在，如果我们去一个标准的休息模板

00:18:52.930 --> 00:18:57.760
您将使用的验证服务客户端

00:18:55.480 --> 00:19:00.130
看到我们正在做负载均衡

00:18:57.760 --> 00:19:02.710
负载均衡器模板，我们在这里

00:19:00.130 --> 00:19:04.570
呼叫的欺诈验证者主机名

00:19:02.710 --> 00:19:06.580
当然没有这样的主机名，但是

00:19:04.570 --> 00:19:08.410
因为我们在下方使用色带

00:19:06.580 --> 00:19:10.060
主机名将转换为

00:19:08.410 --> 00:19:12.520
服务ID，一切都会发生

00:19:10.060 --> 00:19:15.730
因为正如奥尔加（Olga）在

00:19:12.520 --> 00:19:17.890
配置我们有功能区客户端和

00:19:15.730 --> 00:19:20.320
这里我们说有一个自定义功能区

00:19:17.890 --> 00:19:21.700
配置，以便您注释课程

00:19:20.320 --> 00:19:24.430
与功能区客户端，您提供

00:19:21.700 --> 00:19:27.280
您可以在此处自定义功能区配置

00:19:24.430 --> 00:19:29.130
为此特定客户定义

00:19:27.280 --> 00:19:32.740
所以如果我们称欺诈检测

00:19:29.130 --> 00:19:34.060
负载均衡器规则的规则

00:19:32.740 --> 00:19:36.940
应该是循环法则，而你

00:19:34.060 --> 00:19:39.070
可以创建自己的规则等

00:19:36.940 --> 00:19:41.650
对，所以这就是你使用告诉功能区的方式

00:19:39.070 --> 00:19:43.720
如何以自定义方式表现

00:19:41.650 --> 00:19:44.500
是卡服务，现在我们去

00:19:43.720 --> 00:19:48.610
代理

00:19:44.500 --> 00:19:50.320
因此代理在其中具有单个注释

00:19:48.610 --> 00:19:52.300
启用代理的Zul条款

00:19:50.320 --> 00:19:55.030
你可以看到这里和整个

00:19:52.300 --> 00:19:59.140
资源中有配置

00:19:55.030 --> 00:20:00.220
所以我们有祖尔，就像我说的那样

00:19:59.140 --> 00:20:02.909
一切都是白名单

00:20:00.220 --> 00:20:05.710
所以我们说被忽略的服务是那些

00:20:02.909 --> 00:20:08.500
例如被忽略的服务

00:20:05.710 --> 00:20:11.440
服务ID被忽略的那个，但是如果

00:20:08.500 --> 00:20:13.990
你想允许像白名单

00:20:11.440 --> 00:20:15.909
白色只是您的必经之路

00:20:13.990 --> 00:20:18.490
完全忽略它，将白名单

00:20:15.909 --> 00:20:20.169
给定路径，例如允许的测试

00:20:18.490 --> 00:20:22.330
您在忽略中调用任何其他路径

00:20:20.169 --> 00:20:27.460
服务不会是你可以的

00:20:22.330 --> 00:20:29.950
配置大约六件事是的，所以

00:20:27.460 --> 00:20:33.429
那个动物园，最后但并非最不重要的

00:20:29.950 --> 00:20:36.640
让我们回到用户服务， 

00:20:33.429 --> 00:20:38.049
让我们再回到这里像我一样

00:20:36.640 --> 00:20:40.240
提到我们有一个控制器

00:20:38.049 --> 00:20:41.799
代表服务

00:20:40.240 --> 00:20:44.260
另一项服务，让我们专注于

00:20:41.799 --> 00:20:46.600
我们有一个休息模板， 

00:20:44.260 --> 00:20:47.860
发现客户端，在这里您可以看到

00:20:46.600 --> 00:20:50.590
历史图式

00:20:47.860 --> 00:20:52.720
正确，所以您有一个称为verify的方法

00:20:50.590 --> 00:20:56.260
新用户，我们将其与历史记录一起包装

00:20:52.720 --> 00:20:57.990
命令意味着结果

00:20:56.260 --> 00:21:01.840
该方法的执行将是

00:20:57.990 --> 00:21:03.840
衡量是否正确

00:21:01.840 --> 00:21:06.669
一段时间我们有X个

00:21:03.840 --> 00:21:09.669
异常hystrix将假定

00:21:06.669 --> 00:21:11.260
其他应用程式有毛病，不会在

00:21:09.669 --> 00:21:12.580
某个点称为另一个

00:21:11.260 --> 00:21:15.280
应用程序将引发异常

00:21:12.580 --> 00:21:17.200
在这种情况下，我们有一个后备方法

00:21:15.280 --> 00:21:20.700
这意味着如果有问题

00:21:17.200 --> 00:21:23.140
我们将有用户拒绝的方法

00:21:20.700 --> 00:21:26.860
执行它会假设所有

00:21:23.140 --> 00:21:30.370
用户是欺诈行为，因此

00:21:26.860 --> 00:21:33.360
差不多，让我们看看我们

00:21:30.370 --> 00:21:36.549
在这里，我们要发送一些请求

00:21:33.360 --> 00:21:38.950
所以我们正在做很多事情

00:21:36.549 --> 00:21:41.110
请求让我们去我们的

00:21:38.950 --> 00:21:43.090
应用程序并使用B 

00:21:41.110 --> 00:21:44.799
不错的基准测试工具，是的，我们

00:21:43.090 --> 00:21:48.429
发送各种应用程序

00:21:44.799 --> 00:21:50.559
请求的来源，在这里我们可以看到

00:21:48.429 --> 00:21:52.559
历史仪表板向我们展示了

00:21:50.559 --> 00:21:55.480
我们命令在系统中的状态

00:21:52.559 --> 00:21:58.000
希望你能看到有一个

00:21:55.480 --> 00:22:00.490
绿色的圆圈很大，因为

00:21:58.000 --> 00:22:03.309
我们应该有一个巨大的负担

00:22:00.490 --> 00:22:05.740
下山，因为我们停止做

00:22:03.309 --> 00:22:07.659
任何呼叫电路均已关闭

00:22:05.740 --> 00:22:09.789
意味着一切都很好

00:22:07.659 --> 00:22:11.620
任何地方都没有红色数字，这意味着

00:22:09.789 --> 00:22:13.600
没有例外

00:22:11.620 --> 00:22:13.990
在这里您可以看到验证用户

00:22:13.600 --> 00:22:17.410
哪一个

00:22:13.990 --> 00:22:20.200
意味着这是我们的命令

00:22:17.410 --> 00:22:22.630
包裹在你知道我们的执行

00:22:20.200 --> 00:22:24.550
方法，所以这差不多

00:22:22.630 --> 00:22:27.370
老堆栈奥尔加的条款，所以也许你

00:22:24.550 --> 00:22:34.960
会告诉我们如何迈克耶

00:22:27.370 --> 00:22:39.520
迁移到新事物，是的，我会

00:22:34.960 --> 00:22:43.450
移到右边好吧，那只是

00:22:39.520 --> 00:22:45.910
旧堆栈，现在让我们看看可以

00:22:43.450 --> 00:22:50.280
我们现在要做停止这项工作

00:22:45.910 --> 00:22:50.280
已经维护的库存

00:22:50.850 --> 00:22:58.840
所以第一件事是负载均衡器

00:22:54.730 --> 00:23:00.370
所以首先要让我杀了

00:22:58.840 --> 00:23:05.170
目前所有这些应用

00:23:00.370 --> 00:23:10.510
运行，即使使用旧堆栈

00:23:05.170 --> 00:23:12.640
实际上，即使我们只是

00:23:10.510 --> 00:23:14.890
你知道编码我们仍然知道的工具

00:23:12.640 --> 00:23:19.929
如何正确地使用它

00:23:14.890 --> 00:23:21.730
让我们运行新的堆栈，这样我们

00:23:19.929 --> 00:23:24.309
将具有相同的功能

00:23:21.730 --> 00:23:26.020
完全在同一台UPS中，但我们是

00:23:24.309 --> 00:23:31.020
不会做的是我们要尝试

00:23:26.020 --> 00:23:35.160
并避免维护模式项目

00:23:31.020 --> 00:23:35.160
所以我们去这里

00:23:41.720 --> 00:23:49.170
好，让我们从验证开始

00:23:44.540 --> 00:23:53.040
客户，所以我们有负载平衡风险

00:23:49.170 --> 00:23:55.650
模板，如果您愿意，请转到

00:23:53.040 --> 00:24:00.090
配置部分，我们将看到

00:23:55.650 --> 00:24:02.760
发生了一些变化，让我们看看

00:24:00.090 --> 00:24:05.280
您在这里看到的国家不多

00:24:02.760 --> 00:24:07.980
已经改变了，让我暂时关闭它，所以

00:24:05.280 --> 00:24:10.860
真正改变的唯一事物

00:24:07.980 --> 00:24:13.410
代码是这个注释，所以我们有

00:24:10.860 --> 00:24:15.570
书面客户，现在我们要负担

00:24:13.410 --> 00:24:18.720
平衡客户以及我们拥有的一切

00:24:15.570 --> 00:24:20.790
书面客户，我们现在可以通过更多

00:24:18.720 --> 00:24:23.550
负载均衡器也可配置

00:24:20.790 --> 00:24:27.300
您现在看到的客户我也

00:24:23.550 --> 00:24:29.340
切换到反应式Web通讯

00:24:27.300 --> 00:24:32.220
实施，所以我们正在使用网络

00:24:29.340 --> 00:24:34.560
客户而不是其余的模板，我

00:24:32.220 --> 00:24:36.330
故意这样做的原因是

00:24:34.560 --> 00:24:39.090
此时此刻

00:24:36.330 --> 00:24:42.360
注释仅适用于反应式

00:24:39.090 --> 00:24:44.550
反应堆，但不要担心，因为我们

00:24:42.360 --> 00:24:48.930
将释放霍克斯顿，它也将工作

00:24:44.550 --> 00:24:50.460
对于非反应堆，那就是

00:24:48.930 --> 00:24:53.250
你正在做的事情，然后我们有负担

00:24:50.460 --> 00:24:55.650
再次平衡，将与

00:24:53.250 --> 00:24:58.860
 Web客户端的构建与休息时一样

00:24:55.650 --> 00:25:01.710
模板，理想情况下是我们想要的

00:24:58.860 --> 00:25:04.230
拥有新的负载均衡器

00:25:01.710 --> 00:25:07.560
因此，它现在触发了什么

00:25:04.230 --> 00:25:10.410
发生直到现在是你将有功能区

00:25:07.560 --> 00:25:12.300
触发反应堆和

00:25:10.410 --> 00:25:14.100
无反应的开始，尤其是

00:25:12.300 --> 00:25:16.560
反应式启动是个问题

00:25:14.100 --> 00:25:18.000
因为它将阻止我们，但这

00:25:16.560 --> 00:25:21.990
是团队已经拥有的东西

00:25:18.000 --> 00:25:23.910
开始工作，所以我们有了新的负担

00:25:21.990 --> 00:25:26.820
平衡器Spring 控制平衡器和

00:25:23.910 --> 00:25:29.820
现在我们有了循环执行

00:25:26.820 --> 00:25:31.650
这是一个被动的实现，所以

00:25:29.820 --> 00:25:34.260
我们将再次为霍克斯顿做些什么

00:25:31.650 --> 00:25:36.060
是当您注释网络时

00:25:34.260 --> 00:25:38.640
客户端构建器，我们负载均衡

00:25:36.060 --> 00:25:41.160
反应性实施将是

00:25:38.640 --> 00:25:44.340
在下面使用，您将不必

00:25:41.160 --> 00:25:46.950
被阻止一样，我们也将使

00:25:44.340 --> 00:25:49.500
反应性实施，我们将停止

00:25:46.950 --> 00:25:52.530
用丝带，这是一个预告片

00:25:49.500 --> 00:25:54.810
在我们这边要做的一些工作

00:25:52.530 --> 00:25:57.510
第三部分是你不需要改变

00:25:54.810 --> 00:26:00.420
几乎所有你改变的东西

00:25:57.510 --> 00:26:02.340
这些对障碍物的注释

00:26:00.420 --> 00:26:04.860
使用负载均衡器哭泣而不是

00:26:02.340 --> 00:26:07.410
色带研磨仍可以使用负载

00:26:04.860 --> 00:26:09.540
平衡注释和所有工作

00:26:07.410 --> 00:26:13.110
将在我们的顶下完成

00:26:09.540 --> 00:26:15.750
接下来几个月的优先事项，我们

00:26:13.110 --> 00:26:18.750
将会在Hoxton发布，我们

00:26:15.750 --> 00:26:20.790
也将改变所有的功能区

00:26:18.750 --> 00:26:23.550
传递依赖切换到我们

00:26:20.790 --> 00:26:25.080
自己的负载均衡器

00:26:23.550 --> 00:26:27.600
想要做我们想实现的目标

00:26:25.080 --> 00:26:29.970
是相同的用户体验，可以这么说

00:26:27.600 --> 00:26:32.400
我们有这个发现客户，所以

00:26:29.970 --> 00:26:34.890
我们只是把罐子换成一个

00:26:32.400 --> 00:26:36.300
发现服务到另一个像

00:26:34.890 --> 00:26:37.740
尤里卡动物园管理员，你可以

00:26:36.300 --> 00:26:38.850
不必更改代码，我们

00:26:37.740 --> 00:26:40.170
想要在

00:26:38.850 --> 00:26:43.140
纯粹是负载均衡的术语

00:26:40.170 --> 00:26:45.060
是抽象的，所以这是第一个

00:26:43.140 --> 00:26:48.330
改变，这种改变将主要发生

00:26:45.060 --> 00:26:50.790
现在这是另一个变化

00:26:48.330 --> 00:26:53.520
这将需要您的一些工作

00:26:50.790 --> 00:26:55.680
部分，所以会有所不同，但我

00:26:53.520 --> 00:26:58.950
仍然认为这很棒，因为就像你

00:26:55.680 --> 00:27:01.860
将会看到这将是一个有趣的项目

00:26:58.950 --> 00:27:04.470
至少与我合作

00:27:01.860 --> 00:27:07.880
与他们一起工作很有趣，他们

00:27:04.470 --> 00:27:11.190
付钱给我们，好吧，让我们做吧

00:27:07.880 --> 00:27:14.640
因此您必须更改网关

00:27:11.190 --> 00:27:17.160
以及如何做到这一点非常容易

00:27:14.640 --> 00:27:19.680
我们当然会全力支持 Spring 

00:27:17.160 --> 00:27:21.930
制作应用程序的良好模型

00:27:19.680 --> 00:27:25.080
只需添加此启动器，那就是

00:27:21.930 --> 00:27:27.690
现在几乎是 Spring Cloud 网关

00:27:25.080 --> 00:27:30.000
是反应性的，所以我们绝对不会

00:27:27.690 --> 00:27:33.420
建议尝试将启动器放入

00:27:30.000 --> 00:27:35.880
你正在从你的祖尔消除依赖

00:27:33.420 --> 00:27:37.830
无反应的，只用它代替

00:27:35.880 --> 00:27:40.020
不，您应该提供其他服务， 

00:27:37.830 --> 00:27:42.330
即使这是反应性的

00:27:40.020 --> 00:27:45.570
您将可以通过任何方式拨打电话

00:27:42.330 --> 00:27:47.910
您可以使用的服务可以是Spring MVC和

00:27:45.570 --> 00:27:49.290
是网络客户端，这将是一个单独的

00:27:47.910 --> 00:27:51.840
您将在其中拨打电话的应用程序

00:27:49.290 --> 00:27:53.520
因为如果您尝试添加此反应式

00:27:51.840 --> 00:27:56.310
初学者在您没有的地方

00:27:53.520 --> 00:27:58.380
无功Spring 两个幅面启动器

00:27:56.310 --> 00:28:02.190
你提到的那一秒钟不会失败

00:27:58.380 --> 00:28:04.080
它是建在反应堆顶部的

00:28:02.190 --> 00:28:06.060
必须知道项目反应堆让您

00:28:04.080 --> 00:28:08.160
用哦，因为

00:28:06.060 --> 00:28:11.280
你只是要指挥电话

00:28:08.160 --> 00:28:12.930
到网关以及您的其他应用

00:28:11.280 --> 00:28:15.180
可以写成不同的不是

00:28:12.930 --> 00:28:18.090
重要，因此您可以设置启动器

00:28:15.180 --> 00:28:21.030
我们有一个神经元开始

00:28:18.090 --> 00:28:24.180
想告诉你这将很快显示

00:28:21.030 --> 00:28:26.670
他们在做什么，我们正在阅读执行器

00:28:24.180 --> 00:28:29.280
我们正在阅读千分尺注册表

00:28:26.670 --> 00:28:32.250
普罗米修斯这些是可选的

00:28:29.280 --> 00:28:35.940
没有他们就可以工作，这就是我们的门户

00:28:32.250 --> 00:28:39.780
这样您就可以看到这里没有太多魔术了

00:28:35.940 --> 00:28:47.580
现在让我们看看有趣的地方

00:28:39.780 --> 00:28:51.750
开始，所以在区域中，我们可以配置

00:28:47.580 --> 00:28:53.760
这里有些事情我们可以配置很多

00:28:51.750 --> 00:28:55.770
我将从雅马开始

00:28:53.760 --> 00:28:57.720
别担心，请不要只留下

00:28:55.770 --> 00:28:59.250
因为您看到这个Yama配置

00:28:57.720 --> 00:29:00.270
我将能够以不同的方式来做

00:28:59.250 --> 00:29:03.060
很确定他们已经与

00:29:00.270 --> 00:29:07.290
 kubernetes，以便他们熟悉

00:29:03.060 --> 00:29:09.300
 IANA开发好的，所以您可以

00:29:07.290 --> 00:29:11.160
在网关解锁区域中查看

00:29:09.300 --> 00:29:14.250
所以在区域中，我们拥有所有路线

00:29:11.160 --> 00:29:17.610
为我们隐式配置

00:29:14.250 --> 00:29:21.540
减少工作量的手

00:29:17.610 --> 00:29:24.720
另一方面是非常不安全的

00:29:21.540 --> 00:29:26.760
您目前的安全性视图不是

00:29:24.720 --> 00:29:29.730
最佳解决方案，因为您可以轻松地

00:29:26.760 --> 00:29:31.770
再次无法添加此被忽略的服务

00:29:29.730 --> 00:29:33.240
游行表明，你会

00:29:31.770 --> 00:29:35.850
指导你不想做的事

00:29:33.240 --> 00:29:37.800
重定向，所以这里也是显式的

00:29:35.850 --> 00:29:39.990
您有任何初级开发人员在工作

00:29:37.800 --> 00:29:42.840
和你在一起，他们不会只是坐在

00:29:39.990 --> 00:29:44.850
并思考并思考CAC的方式

00:29:42.840 --> 00:29:47.010
它像正在发生的那样被路由

00:29:44.850 --> 00:29:49.020
现在一切都将是明确的， 

00:29:47.010 --> 00:29:51.540
希望这样更好，所以

00:29:49.020 --> 00:29:53.670
为什么我们切换到此模式，以便您

00:29:51.540 --> 00:29:57.810
有路线，您会为每条路线

00:29:53.670 --> 00:29:59.730
必须在其中定义一个ID和URI 

00:29:57.810 --> 00:30:01.620
想要指挥它并断言是这样

00:29:59.730 --> 00:30:03.240
谓词将成为条件，只要

00:30:01.620 --> 00:30:05.580
请求与某组匹配

00:30:03.240 --> 00:30:08.040
条件，我们将通过它

00:30:05.580 --> 00:30:10.290
这些过滤器，所以在这里我们要指导

00:30:08.040 --> 00:30:14.730
以斜杠欺诈开头的一切

00:30:10.290 --> 00:30:17.700
如此分散-验证负载平衡

00:30:14.730 --> 00:30:18.670
浮动验证程序，因此我们可以

00:30:17.700 --> 00:30:21.850
直接

00:30:18.670 --> 00:30:24.160
 HTTP pass或HTTPS，但我们也可以

00:30:21.850 --> 00:30:27.190
从易北河开始，只添加

00:30:24.160 --> 00:30:29.020
这个易北河计划，我们要做的是

00:30:27.190 --> 00:30:32.010
我们将在下面使用负载均衡器

00:30:29.020 --> 00:30:34.960
连接到您的服务发现和

00:30:32.010 --> 00:30:37.930
解决这项服务，然后我们

00:30:34.960 --> 00:30:40.150
使用过滤器过滤器将使您能够

00:30:37.930 --> 00:30:42.910
修改您的请求和回复

00:30:40.150 --> 00:30:45.160
如您所见，您将能够

00:30:42.910 --> 00:30:47.860
做大量的事情

00:30:45.160 --> 00:30:49.570
您无法执行此操作，所以在这里我们

00:30:47.860 --> 00:30:52.240
只想删除前缀，因为

00:30:49.570 --> 00:30:54.160
一旦我们通过火重定向到喉咙

00:30:52.240 --> 00:30:57.430
应用我们没有我们所有的端点

00:30:54.160 --> 00:31:00.310
从欺诈验证者开始，所以我们只是

00:30:57.430 --> 00:31:02.980
也仅通过添加仅剥离一部分

00:31:00.310 --> 00:31:05.200
这个配置太多，我们添加了一个重试

00:31:02.980 --> 00:31:08.050
过滤器，因此我们将尝试尝试三遍

00:31:05.200 --> 00:31:10.510
如果有任何失败，这是我们的

00:31:08.050 --> 00:31:12.640
忽略了服务，所以我们在这里使用

00:31:10.510 --> 00:31:14.500
通配符，我们正在指导

00:31:12.640 --> 00:31:16.960
一切始于欺诈验证者

00:31:14.500 --> 00:31:19.750
到该服务，这里我们只是

00:31:16.960 --> 00:31:22.240
允许一个端点没有别的

00:31:19.750 --> 00:31:24.970
神奇地重定向，您将不会

00:31:22.240 --> 00:31:28.300
因此有安全桥

00:31:24.970 --> 00:31:30.760
那是保守的方式

00:31:28.300 --> 00:31:36.250
现在配置它，让我们开始吧

00:31:30.760 --> 00:31:37.690
更现代的解决方案，所以现在实际上

00:31:36.250 --> 00:31:40.390
有这些路线，您不需要使用

00:31:37.690 --> 00:31:42.700
您可以只使用Java代码的ml配置

00:31:40.390 --> 00:31:46.300
配置和你做的方式是你可以

00:31:42.700 --> 00:31:49.150
定义路径定位器类型的存在，并

00:31:46.300 --> 00:31:51.520
在这里，您将拥有自己的路线和

00:31:49.150 --> 00:31:55.660
有趣的是，我们有这个流利的API 

00:31:51.520 --> 00:31:58.270
这样您就可以轻松添加内容

00:31:55.660 --> 00:31:59.980
看到这里我们还有一个路径谓词

00:31:58.270 --> 00:32:02.590
但我们也增加了一种方法

00:31:59.980 --> 00:32:05.620
谓词，所以我们只会想要东西

00:32:02.590 --> 00:32:09.550
我将发布方法，我们可以添加

00:32:05.620 --> 00:32:13.120
他们更多，所以我们可以添加很多你可以

00:32:09.550 --> 00:32:16.330
通过URI检查您可以使用时区

00:32:13.120 --> 00:32:18.820
例如，您可以在

00:32:16.330 --> 00:32:21.040
在这个时间段发生了一些事情

00:32:18.820 --> 00:32:23.080
想要在这里和另一个地方直接

00:32:21.040 --> 00:32:24.640
我们想要重定向的时间段

00:32:23.080 --> 00:32:26.470
例如在其他地方

00:32:24.640 --> 00:32:28.600
改变我们的拓扑

00:32:26.470 --> 00:32:31.440
我们可以非常有用的架构

00:32:28.600 --> 00:32:33.629
使用主机谓词

00:32:31.440 --> 00:32:39.120
可以在三十年后使用

00:32:33.629 --> 00:32:41.070
有很多可供选择的选择， 

00:32:39.120 --> 00:32:44.549
有更多你的一部分

00:32:41.070 --> 00:32:46.620
可以做的是过滤器，所以再次

00:32:44.549 --> 00:32:48.690
拥有流畅的API，并且拥有IDE 

00:32:46.620 --> 00:32:51.690
告诉你你可以做什么，你可以

00:32:48.690 --> 00:32:54.480
做几乎任何事情，例如

00:32:51.690 --> 00:32:56.909
您可以设置状态可以添加请求

00:32:54.480 --> 00:32:59.460
标头可以添加参数

00:32:56.909 --> 00:33:01.649
添加响应头，您可以更改

00:32:59.460 --> 00:33:04.169
要求你的眼睛，你甚至可以修改

00:33:01.649 --> 00:33:06.929
请求主体和响应主体

00:33:04.169 --> 00:33:08.669
所以随着即将到来的请求

00:33:06.929 --> 00:33:10.470
您以及您的回应

00:33:08.669 --> 00:33:12.539
在路由他们时得到

00:33:10.470 --> 00:33:16.799
也可以做任何你想做的事

00:33:12.539 --> 00:33:19.289
修改它们，是的，一切都是

00:33:16.799 --> 00:33:21.299
以反应的方式发生

00:33:19.289 --> 00:33:22.980
其实我不需要任何东西

00:33:21.299 --> 00:33:26.009
关于反应堆的知识

00:33:22.980 --> 00:33:28.950
使用它，您只需调用方法并

00:33:26.009 --> 00:33:30.960
您将有理想告诉您什么

00:33:28.950 --> 00:33:33.570
你可以打电话，我已经检查过了

00:33:30.960 --> 00:33:37.320
现在我们有二十多个过滤器

00:33:33.570 --> 00:33:39.179
可用，如果您认为有

00:33:37.320 --> 00:33:41.159
你绝对需要的东西

00:33:39.179 --> 00:33:43.710
它不在那里，将很有用

00:33:41.159 --> 00:33:45.570
对于每个人，如果您在

00:33:43.710 --> 00:33:49.980
 github有很大的胸口会考虑

00:33:45.570 --> 00:33:53.429
是的，非常弹性的工作方式

00:33:49.980 --> 00:33:56.730
与现在的动物园相比有要求

00:33:53.429 --> 00:33:59.190
让我们更进一步

00:33:56.730 --> 00:34:01.889
应该改变的是hystrix 

00:33:59.190 --> 00:34:04.529
所以我不认识你，但对我来说

00:34:01.889 --> 00:34:06.750
 Netflix不告诉使用hystrix 

00:34:04.529 --> 00:34:08.159
还有，如果Netflix建议

00:34:06.750 --> 00:34:10.530
使用弹性poojaís 

00:34:08.159 --> 00:34:13.190
我想最好做他们自己的事

00:34:10.530 --> 00:34:18.149
并切换到访客或J这样

00:34:13.190 --> 00:34:20.040
让我们看看这个，当然

00:34:18.149 --> 00:34:22.470
我们可以告诉您删除

00:34:20.040 --> 00:34:24.780
历史依赖关系为J添加弹性

00:34:22.470 --> 00:34:26.909
我设置并使用它，但是我们会

00:34:24.780 --> 00:34:30.389
可能因为我们的工作而失业

00:34:26.909 --> 00:34:33.089
是为了提供集成，所以我们不会

00:34:30.389 --> 00:34:34.530
做任何我不喜欢的事吧，让我们

00:34:33.089 --> 00:34:37.679
提供整合，并且

00:34:34.530 --> 00:34:39.929
团队所做的事情，所以我们想要

00:34:37.679 --> 00:34:42.470
您就可以添加一个启动器

00:34:39.929 --> 00:34:47.309
让我们看看这个

00:34:42.470 --> 00:34:49.500
靠近许多窗户，如果我们看到这个

00:34:47.309 --> 00:34:51.289
是我们的入门者，您必须选择

00:34:49.500 --> 00:34:54.359
您想要快照的版本

00:34:51.289 --> 00:34:57.450
洒水起动器断路器和

00:34:54.359 --> 00:35:00.299
我为J选择弹性，我们

00:34:57.450 --> 00:35:02.160
有快照的原因是

00:35:00.299 --> 00:35:04.920
孵化器，所以这是一个孵化器

00:35:02.160 --> 00:35:06.990
项目，但随着我们减少Hawkstone 

00:35:04.920 --> 00:35:10.559
这将减少，所以这将是一个

00:35:06.990 --> 00:35:13.200
生产功能，让我向您展示

00:35:10.559 --> 00:35:15.900
它的工作方式，所以我们已经完成了所有

00:35:13.200 --> 00:35:18.690
对你有冲突，你能做的是

00:35:15.900 --> 00:35:20.609
只是向断路器注入光束

00:35:18.690 --> 00:35:23.339
工厂光束，然后就可以使用

00:35:20.609 --> 00:35:25.500
而不是历史命令，所以让我们

00:35:23.339 --> 00:35:28.440
看看我们使用它的方式

00:35:25.500 --> 00:35:30.900
它在这里和以前的历史

00:35:28.440 --> 00:35:33.119
命令它将包装整个方法

00:35:30.900 --> 00:35:34.950
如果您使用注释，则所有调用

00:35:33.119 --> 00:35:37.980
将在那个历史中完成

00:35:34.950 --> 00:35:40.019
命令，但我并不是很期待

00:35:37.980 --> 00:35:44.069
设置查询有很多麻烦

00:35:40.019 --> 00:35:47.130
参数在这里或建立你

00:35:44.069 --> 00:35:50.190
出现，所以我只想包装实际

00:35:47.130 --> 00:35:53.069
叫我正在做的东西在这里，所以我

00:35:50.190 --> 00:35:57.900
运行create，然后创建一个新电路

00:35:53.069 --> 00:36:00.210
使用ID，然后我们将

00:35:57.900 --> 00:36:02.609
在可以传递lambda的地方运行方法

00:36:00.210 --> 00:36:04.410
与我们想要的实际执行

00:36:02.609 --> 00:36:06.869
这样做是剩下的模板部分

00:36:04.410 --> 00:36:09.900
当然，您也可以使用网络客户端

00:36:06.869 --> 00:36:12.480
这将同时起作用，然后我们

00:36:09.900 --> 00:36:14.220
通过另一个做什么的lambda，我们

00:36:12.480 --> 00:36:17.789
有一个可扔的东西，所以实际上我们是

00:36:14.220 --> 00:36:19.380
如果我们通过传递是对此方法的调用

00:36:17.789 --> 00:36:21.150
得到一个例外，我们想要一个

00:36:19.380 --> 00:36:23.579
后退，所以这是旧的好秋天

00:36:21.150 --> 00:36:25.890
 back不在注释中

00:36:23.579 --> 00:36:29.519
只是直接以编程方式编写

00:36:25.890 --> 00:36:32.220
这是一种非常简单的使用方法

00:36:29.519 --> 00:36:35.130
它，实际上让我们运行一些

00:36:32.220 --> 00:36:37.400
打电话为什么不让它开始做

00:36:35.130 --> 00:36:37.400
某事

00:36:39.820 --> 00:36:47.710
是的，在此期间，让我们看看

00:36:45.070 --> 00:36:50.380
您记得的另一件事是我们有这个

00:36:47.710 --> 00:36:53.830
历史仪表板，看起来很漂亮

00:36:50.380 --> 00:36:56.170
不错，你至少可以说一遍

00:36:53.830 --> 00:36:58.840
当它看起来像一个不错的

00:36:56.170 --> 00:37:01.450
用户界面，但我不了解您的主要信息

00:36:58.840 --> 00:37:05.020
我遇到的问题是为什么我

00:37:01.450 --> 00:37:07.660
将我所有的指标都放在某个地方

00:37:05.020 --> 00:37:10.030
仪表板，然后只有

00:37:07.660 --> 00:37:14.010
使用其他工具的历史记录仪表板

00:37:10.030 --> 00:37:17.710
其他没有聚合的东西，为什么

00:37:14.010 --> 00:37:20.670
所以我们认为您可能会做并改变

00:37:17.710 --> 00:37:23.230
不仅是您的历史记录仪表板，还是

00:37:20.670 --> 00:37:25.600
如果你不是的话，作为一种模式介绍

00:37:23.230 --> 00:37:28.390
现在您应该收集指标

00:37:25.600 --> 00:37:31.570
绝对开始做的是使用

00:37:28.390 --> 00:37:34.840
公制工具，因此我们建议

00:37:31.570 --> 00:37:37.000
我们的存货是千分尺，那么您可以

00:37:34.840 --> 00:37:39.610
使用汇总工具和

00:37:37.000 --> 00:37:41.440
选择的仪表板工具如此

00:37:39.610 --> 00:37:44.130
演示文稿将显示普罗米修斯

00:37:41.440 --> 00:37:48.490
和Ravana，但这是可选的

00:37:44.130 --> 00:37:52.240
千分尺支持许多工具，所以让我们

00:37:48.490 --> 00:37:56.380
看到它，希望我们能打来电话

00:37:52.240 --> 00:37:59.590
这一点让我们看看发生了什么

00:37:56.380 --> 00:38:01.840
这是我们的仪表板和前部

00:37:59.590 --> 00:38:04.060
这是您可以看到网关

00:38:01.840 --> 00:38:08.470
仪表板，例如

00:38:04.060 --> 00:38:11.200
查看对给定服务的请求，好的，我们

00:38:08.470 --> 00:38:13.240
无法看到它，因为它是

00:38:11.200 --> 00:38:15.130
分辨率不显示给我们，但我在这里

00:38:13.240 --> 00:38:18.760
收集成功的请求给两个

00:38:15.130 --> 00:38:21.580
通过网关但在不同的服务

00:38:18.760 --> 00:38:25.600
网关我没有添加任何仪表或

00:38:21.580 --> 00:38:28.660
任何显式矩阵代码只能通过添加

00:38:25.600 --> 00:38:30.610
 Prometheus注册表，然后按

00:38:28.660 --> 00:38:32.530
添加执行器

00:38:30.610 --> 00:38:34.150
自动默认很多

00:38:32.530 --> 00:38:36.970
关于我们的课程和我们的指标

00:38:34.150 --> 00:38:38.740
为网关收集的路由，然后

00:38:36.970 --> 00:38:41.740
您可以使用此数据创建所有

00:38:38.740 --> 00:38:44.410
自己的仪表板，所以我不是- 

00:38:41.740 --> 00:38:46.750
您可以真正创建的登机大师

00:38:44.410 --> 00:38:48.640
不错的疯狂仪表板，数据是

00:38:46.750 --> 00:38:50.580
这就是我想告诉你的

00:38:48.640 --> 00:38:53.100
您真的不需要添加

00:38:50.580 --> 00:38:57.650
例如，到网关的米

00:38:53.100 --> 00:39:01.920
是我们历史上的另一个

00:38:57.650 --> 00:39:03.450
那是我们历史的死刑

00:39:01.920 --> 00:39:06.660
现在是我们的新断路器

00:39:03.450 --> 00:39:12.990
弹性差的J执行力，那么我们

00:39:06.660 --> 00:39:17.970
这里有我们也可以注入仪表

00:39:12.990 --> 00:39:20.490
对象，我们可以使用，所以我们可以

00:39:17.970 --> 00:39:22.440
注入我们的电表注册表，然后我们

00:39:20.490 --> 00:39:24.960
可以创建任何米奇度量

00:39:22.440 --> 00:39:26.520
我们需要的对象，然后我们可以使用它们

00:39:24.960 --> 00:39:28.290
就像我们通常使用它们一样

00:39:26.520 --> 00:39:29.850
他们已经为我们做好了准备

00:39:28.290 --> 00:39:31.490
为我们自动配置，因此我们不需要

00:39:29.850 --> 00:39:37.140
靠我们自己做

00:39:31.490 --> 00:39:39.780
如您所见，我们的断路器正在运行

00:39:37.140 --> 00:39:42.420
回到这个我们不仅可以使用它

00:39:39.780 --> 00:39:44.940
直接进行这项工作，我们可以

00:39:42.420 --> 00:39:46.890
也要对其进行自定义以便制作

00:39:44.940 --> 00:39:49.230
方便您，我们已经准备好了

00:39:46.890 --> 00:39:51.150
您可以定义定制程序的选项

00:39:49.230 --> 00:39:52.800
给定时间的生物

00:39:51.150 --> 00:39:54.930
输入，以便我们与之合作

00:39:52.800 --> 00:39:57.990
 J的弹性就是弹性

00:39:54.930 --> 00:39:59.730
打造断路器工厂，您

00:39:57.990 --> 00:40:01.470
可以配置任何您可以

00:39:59.730 --> 00:40:04.200
通常为您配置成千上万的

00:40:01.470 --> 00:40:07.320
 J所以例如在这里我们只是

00:40:04.200 --> 00:40:09.300
通过一些时间限制器配置更改

00:40:07.320 --> 00:40:11.940
然后我们使用默认值

00:40:09.300 --> 00:40:14.400
如果你去这堂课，那实际上是

00:40:11.940 --> 00:40:16.680
生成器，因此它使您非常轻松地

00:40:14.400 --> 00:40:21.380
调整您可以做的一切

00:40:16.680 --> 00:40:26.460
可能会调整J的弹性

00:40:21.380 --> 00:40:33.240
那是断路器，让我们回去

00:40:26.460 --> 00:40:34.980
到演示文稿还有一个

00:40:33.240 --> 00:40:37.950
你绝对应该的东西

00:40:34.980 --> 00:40:39.480
在前进的过程中改变，这是

00:40:37.950 --> 00:40:42.660
我们不会在其中显示的东西

00:40:39.480 --> 00:40:45.060
演示有两个原因，所以如果您

00:40:42.660 --> 00:40:47.850
仍在直接使用，我的意思不是

00:40:45.060 --> 00:40:49.560
这种方式的传递依赖

00:40:47.850 --> 00:40:52.140
您习惯使用它，而您不

00:40:49.560 --> 00:40:54.300
可能甚至知道，但是如果您正在使用

00:40:52.140 --> 00:40:56.700
直接发布云Netflix档案

00:40:54.300 --> 00:40:59.280
真的很难切换到

00:40:56.700 --> 00:41:01.020
喷头配置服务器，我们不会

00:40:59.280 --> 00:41:01.670
之所以显示这一点，是因为首先

00:41:01.020 --> 00:41:03.680
我们已经看到

00:41:01.670 --> 00:41:06.230
很少有人直接使用它， 

00:41:03.680 --> 00:41:08.599
第二，因为喷水灭火配置服务器

00:41:06.230 --> 00:41:10.190
已经和我们在一起了很多年

00:41:08.599 --> 00:41:12.049
关于它的很多介绍

00:41:10.190 --> 00:41:15.650
有很多狗，但是如果你是

00:41:12.049 --> 00:41:18.049
使用我们的Caius，是时候切换了

00:41:15.650 --> 00:41:21.799
在这里，我们已经看到了

00:41:18.049 --> 00:41:25.250
从旧的基于Netflix的东西到新的

00:41:21.799 --> 00:41:27.530
 Spring 的云推荐堆栈，所以我们

00:41:25.250 --> 00:41:30.530
已更改为负载均衡器客户端

00:41:27.530 --> 00:41:33.260
我们拥有的功能区客户端的抽象

00:41:30.530 --> 00:41:35.660
停止使用hystrix，而是使用

00:41:33.260 --> 00:41:38.359
通过Spring 云恢复4j 

00:41:35.660 --> 00:41:41.390
我们已经开始的断路器项目

00:41:38.359 --> 00:41:43.160
使用千分尺也是我们的历史

00:41:41.390 --> 00:41:47.210
我们的弹性项目命令

00:41:43.160 --> 00:41:50.869
处决，我们已经从动物园换了

00:41:47.210 --> 00:41:52.790
到网关，我们保留了尤里卡

00:41:50.869 --> 00:41:55.099
不在的服务发现

00:41:52.790 --> 00:41:56.720
目前没有任何维护

00:41:55.099 --> 00:42:01.130
如果满意的话可以从中切换

00:41:56.720 --> 00:42:05.839
使用它，所以你应该使

00:42:01.130 --> 00:42:08.930
随着我们用z1宣布这一点而改变

00:42:05.839 --> 00:42:11.240
那是今年一月，我们

00:42:08.930 --> 00:42:12.859
说我们将保留这些项目

00:42:11.240 --> 00:42:14.750
维护模式，我们将继续

00:42:12.859 --> 00:42:17.780
维持至少一年

00:42:14.750 --> 00:42:19.549
所以如果你举起一小段时间

00:42:17.780 --> 00:42:21.079
将会退役，不会

00:42:19.549 --> 00:42:23.000
超过一年

00:42:21.079 --> 00:42:26.030
你不应该改变那会

00:42:23.000 --> 00:42:31.790
浪费时间和其他任何情况

00:42:26.030 --> 00:42:33.410
现在是因为即使我们

00:42:31.790 --> 00:42:35.059
仍将维持在

00:42:33.410 --> 00:42:37.130
至少应该是一年

00:42:35.059 --> 00:42:38.900
首先考虑变化

00:42:37.130 --> 00:42:40.490
所有为什么我建议切换到

00:42:38.900 --> 00:42:42.770
网关，因为那已经

00:42:40.490 --> 00:42:45.440
生产已经切换到

00:42:42.770 --> 00:42:46.099
千分尺，然后当霍克斯顿

00:42:45.440 --> 00:42:49.210
已发布

00:42:46.099 --> 00:42:51.619
切换到断路器

00:42:49.210 --> 00:42:54.490
进行负载平衡器更改后， 

00:42:51.619 --> 00:42:57.020
基本上切换到抽象和

00:42:54.490 --> 00:42:58.880
就像我说的还有一些变化

00:42:57.020 --> 00:43:01.220
我们需要做的，所以你

00:42:58.880 --> 00:43:03.549
可以确保我们不会停止

00:43:01.220 --> 00:43:06.589
维护那些项目，直到我们

00:43:03.549 --> 00:43:09.589
替代品已经完全准备好了，但是

00:43:06.589 --> 00:43:11.569
随着霍克斯顿霍克斯顿释放火车得到

00:43:09.589 --> 00:43:12.420
由我们发布，您可能应该

00:43:11.569 --> 00:43:14.760
做出改变

00:43:12.420 --> 00:43:16.260
对于网关和千分尺，我会

00:43:14.760 --> 00:43:20.390
现在推荐它，当然

00:43:16.260 --> 00:43:23.880
定罪，因此是时间表

00:43:20.390 --> 00:43:26.400
我说过的可能的问题

00:43:23.880 --> 00:43:29.490
它还没有，所以过渡会

00:43:26.400 --> 00:43:32.130
必须是渐进的，但我们会确保

00:43:29.490 --> 00:43:34.290
在我们准备好一切之前

00:43:32.130 --> 00:43:39.890
完全停止维护Spring 云

00:43:34.290 --> 00:43:43.440
 Netflix股票，该项目有一个

00:43:39.890 --> 00:43:46.380
演示那里有你可以签入

00:43:43.440 --> 00:43:52.380
 github我们还将发布我们的幻灯片

00:43:46.380 --> 00:44:01.410
我们有一些时间来提问

00:43:52.380 --> 00:44:03.450
你有任何问题，所以这个问题

00:44:01.410 --> 00:44:06.060
如果我们仍然支持网关

00:44:03.450 --> 00:44:08.130
Spring Security 集成是和

00:44:06.060 --> 00:44:10.080
有一个样品，如果你看到我们的 Spring 

00:44:08.130 --> 00:44:18.990
全部设置的云样本

00:44:10.080 --> 00:44:21.900
 -我记得你说过

00:44:18.990 --> 00:44:23.550
网关中已经有20个过滤器了

00:44:21.900 --> 00:44:26.490
并可以添加一些自定义

00:44:23.550 --> 00:44:29.160
像恩佐这样的人，是的，你也可以

00:44:26.490 --> 00:44:31.850
实现客户本质上

00:44:29.160 --> 00:44:36.440
这是您拥有的界面权利- 

00:44:31.850 --> 00:44:36.440
我认为那里有一个问题

00:44:41.260 --> 00:44:47.500
如果我将应用程序部署在

00:44:43.790 --> 00:44:50.630
 kubernetes是否有意义

00:44:47.500 --> 00:44:58.880
客户端发现和负载平衡

00:44:50.630 --> 00:45:01.550
我已经提供的服务是的，是的

00:44:58.880 --> 00:45:04.840
因为我的意思是我要像

00:45:01.550 --> 00:45:04.840
顾问取决于

00:45:04.900 --> 00:45:11.420
是的，我当然是说kubernetes给

00:45:08.360 --> 00:45:13.010
您在其庞大的负载平衡上

00:45:11.420 --> 00:45:15.680
右边，因为例如

00:45:13.010 --> 00:45:17.570
隐藏相同数量的X个 bean 荚

00:45:15.680 --> 00:45:19.820
标签和仅通过单个引用

00:45:17.570 --> 00:45:25.360
服务，你会知道一点

00:45:19.820 --> 00:45:28.190
平衡它，但是您可以自定义

00:45:25.360 --> 00:45:30.650
客户端负载均衡策略

00:45:28.190 --> 00:45:31.910
这不是强制性的，但是你

00:45:30.650 --> 00:45:34.040
可以做对

00:45:31.910 --> 00:45:37.760
还请记住，例如，如果您

00:45:34.040 --> 00:45:39.830
使用Spring Cloud Kubernetes作为一个

00:45:37.760 --> 00:45:43.040
库您仍然利用相同的

00:45:39.830 --> 00:45:45.230
可以说的抽象

00:45:43.040 --> 00:45:48.620
这样的 Spring Cloud ，所以我们确实有负载

00:45:45.230 --> 00:45:53.720
平衡器，您可以使用功能区说

00:45:48.620 --> 00:45:55.640
从kubernetes获取实例

00:45:53.720 --> 00:45:57.740
对，所以就像实施

00:45:55.640 --> 00:45:59.180
您如何获取数据不像去

00:45:57.740 --> 00:46:01.010
尤里卡并从中获取实例

00:45:59.180 --> 00:46:02.750
尤里卡（Eureka），但可从kubernetes获取

00:46:01.010 --> 00:46:05.090
对，然后您可以应用自定义

00:46:02.750 --> 00:46:07.430
策略，但这取决于您自己

00:46:05.090 --> 00:46:09.970
如果您没有这样的需要

00:46:07.430 --> 00:46:09.970
不必这样做

00:46:13.270 --> 00:46:17.270
所以问题是我们是否要

00:46:15.349 --> 00:46:19.930
支持基于注释的模型

00:46:17.270 --> 00:46:23.480
断路器有问题， 

00:46:19.930 --> 00:46:26.119
取决于兴趣的规模

00:46:23.480 --> 00:46:27.770
具有此功能的社区

00:46:26.119 --> 00:46:30.770
将会做出决定，所以我想如果

00:46:27.770 --> 00:46:32.450
每个人都希望它可能已添加

00:46:30.770 --> 00:46:35.000
现在我们还没有得到足够的支持

00:46:32.450 --> 00:46:39.170
为此功能实施

00:46:35.000 --> 00:46:44.960
答案是，取决于是否可以

00:46:39.170 --> 00:46:47.060
还有更多问题，所以没有更多

00:46:44.960 --> 00:46:48.470
问题，所以如果你害羞，你可以来

00:46:47.060 --> 00:46:51.020
给我们，我们将回答这些问题

00:46:48.470 --> 00:46:51.210
如果不是的话，非常感谢

00:46:51.020 --> 00:46:59.460
 [掌声] 

00:46:51.210 --> 00:46:59.460
 [音乐] 

