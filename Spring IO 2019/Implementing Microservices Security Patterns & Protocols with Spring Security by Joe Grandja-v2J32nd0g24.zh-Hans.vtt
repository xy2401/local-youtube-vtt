WEBVTT
Kind: captions
Language: zh-Hans

00:00:00.900 --> 00:00:09.570
 [音乐] 

00:00:07.139 --> 00:00:12.060
大家好，谢谢您的参与

00:00:09.570 --> 00:00:13.980
是一个拥挤的房子，非常感谢

00:00:12.060 --> 00:00:16.230
来我的演讲，真的

00:00:13.980 --> 00:00:17.970
感谢主办方对不起

00:00:16.230 --> 00:00:22.500
请允许我30或连续来到这里

00:00:17.970 --> 00:00:24.180
爱巴萨快乐回到我的名字

00:00:22.500 --> 00:00:27.359
是乔尔·格兰德（Joel Grande），我要参加Spring Security 检查

00:00:24.180 --> 00:00:29.010
团队主要致力于新的OAuth 

00:00:27.359 --> 00:00:32.219
支持我们在 Spring 建造

00:00:29.010 --> 00:00:35.100
安全500美国公开赛ID连接Jose 

00:00:32.219 --> 00:00:37.499
框架支持等等

00:00:35.100 --> 00:00:39.420
大概是三个

00:00:37.499 --> 00:00:42.749
几年或两年半的时间

00:00:39.420 --> 00:00:45.139
我们已经对新的

00:00:42.749 --> 00:00:47.370
奥拉支持Spring Security 五和

00:00:45.139 --> 00:00:48.989
也许你们大多数人都知道

00:00:47.370 --> 00:00:51.569
现有的项目Spring Security 

00:00:48.989 --> 00:00:53.639
 OAuth，我们称它为传统哦

00:00:51.569 --> 00:00:55.170
处于维护模式

00:00:53.639 --> 00:00:57.569
大约七年

00:00:55.170 --> 00:01:00.989
最终退休，这就是我们要做的原因

00:00:57.569 --> 00:01:02.699
这重写了五个两个即将推出

00:01:00.989 --> 00:01:04.320
八月，那时我们将成为

00:01:02.699 --> 00:01:05.790
与客户端的功能均等

00:01:04.320 --> 00:01:08.340
资源服务将是巨大的

00:01:05.790 --> 00:01:09.840
我们的里程碑，我们希望

00:01:08.340 --> 00:01:11.490
每个人都将迁移到新

00:01:09.840 --> 00:01:14.130
我们将提供迁移的东西

00:01:11.490 --> 00:01:18.440
道路和一切，所以今天我要

00:01:14.130 --> 00:01:20.370
谈论这个，你知道

00:01:18.440 --> 00:01:23.040
 Spring安全性内的实现

00:01:20.370 --> 00:01:25.380
证券的五分之一和五分之一

00:01:23.040 --> 00:01:27.360
我们已经实施的标准

00:01:25.380 --> 00:01:29.100
会表明我的意思是我得到了

00:01:27.360 --> 00:01:32.640
我基本上是几张幻灯片

00:01:29.100 --> 00:01:35.220
有一个演示，而不是做一个简单的

00:01:32.640 --> 00:01:36.690
您知道要登录或设置的演示

00:01:35.220 --> 00:01:37.980
我得到很多资源服务器

00:01:36.690 --> 00:01:40.560
质疑您如何拼凑一切

00:01:37.980 --> 00:01:42.330
在一起，在那里你有很多

00:01:40.560 --> 00:01:43.950
比如说一个不同的组件

00:01:42.330 --> 00:01:46.560
您拥有的微服务架构

00:01:43.950 --> 00:01:49.650
多种服务，您如何沟通

00:01:46.560 --> 00:01:51.420
每个服务之间有什么令牌

00:01:49.650 --> 00:01:53.550
您获得了什么授权

00:01:51.420 --> 00:01:55.200
您可以致电此一项服务，并且

00:01:53.550 --> 00:01:58.350
如此等等，你怎么把这一切

00:01:55.200 --> 00:02:01.080
在一起，这就是我要做的

00:01:58.350 --> 00:02:02.700
通过更高级的样本

00:02:01.080 --> 00:02:04.620
有三个微观来源

00:02:02.700 --> 00:02:07.050
在下一张幻灯片上，但我要给

00:02:04.620 --> 00:02:08.640
真正高水平的标准

00:02:07.050 --> 00:02:11.150
到目前为止，我们已经在 Spring 实施了

00:02:08.640 --> 00:02:13.319
安全五至五一和五至

00:02:11.150 --> 00:02:14.280
让我举手

00:02:13.319 --> 00:02:15.870
了解

00:02:14.280 --> 00:02:20.850
谁是对OAuth非常熟悉的人

00:02:15.870 --> 00:02:22.709
好的，这是谁的 Spring 

00:02:20.850 --> 00:02:26.280
安全支持五一五二

00:02:22.709 --> 00:02:30.800
 oauth2登录谁的资源服务器

00:02:26.280 --> 00:02:34.340
使用旧版身份验证还可以

00:02:30.800 --> 00:02:36.450
他们将很容易使用新的东西，所以

00:02:34.340 --> 00:02:38.400
我就给我一个非常快的

00:02:36.450 --> 00:02:41.160
高层次的概述，我们将跳转

00:02:38.400 --> 00:02:42.180
进入演示，然后放入

00:02:41.160 --> 00:02:44.069
一起

00:02:42.180 --> 00:02:45.930
哦auth-我的意思是授权框架

00:02:44.069 --> 00:02:48.030
这就是授权的全部

00:02:45.930 --> 00:02:50.190
关于授权第三方

00:02:48.030 --> 00:02:52.230
应用程序和ooofff客户端以及OAuth 

00:02:50.190 --> 00:02:54.780
您想调用它的应用程序

00:02:52.230 --> 00:02:56.760
授权它访问您的受保护

00:02:54.780 --> 00:03:00.420
你知道你的典型资源

00:02:56.760 --> 00:03:02.430
用例使用Google登录名登录

00:03:00.420 --> 00:03:04.290
八位权利是您的典型用例

00:03:02.430 --> 00:03:08.040
你们一个人你们都知道

00:03:04.290 --> 00:03:09.180
对，女孩，你知道你去了

00:03:08.040 --> 00:03:12.150
点击它，你去一个网站你

00:03:09.180 --> 00:03:15.480
点击使用Google登录，您将获得

00:03:12.150 --> 00:03:17.489
重定向到您登录的Google，然后

00:03:15.480 --> 00:03:19.799
你会得到这个同意屏幕吗

00:03:17.489 --> 00:03:21.810
授权此应用程序访问

00:03:19.799 --> 00:03:23.640
专门保护您的资源

00:03:21.810 --> 00:03:26.220
您的用户信息或电子邮件地址，以及

00:03:23.640 --> 00:03:28.680
依此类推，您点击授权

00:03:26.220 --> 00:03:29.940
刚刚在

00:03:28.680 --> 00:03:31.739
客户得到这个背景

00:03:29.940 --> 00:03:34.110
授权码或授权

00:03:31.739 --> 00:03:35.670
通常授予以下授权码： 

00:03:34.110 --> 00:03:38.850
这是美元化代码授予

00:03:35.670 --> 00:03:40.920
并交换访问令牌a 

00:03:38.850 --> 00:03:43.109
具有以下条件的短期凭证

00:03:40.920 --> 00:03:45.060
可以访问您的用户个人资料

00:03:43.109 --> 00:03:46.980
正确的信息就这样

00:03:45.060 --> 00:03:48.540
授权转授权

00:03:46.980 --> 00:03:51.420
它只处理的框架

00:03:48.540 --> 00:03:53.459
授权开放ID Connect 

00:03:51.420 --> 00:03:57.359
内置身份验证的地方

00:03:53.459 --> 00:03:58.890
在OAuth 2之上，您知道杠杆

00:03:57.359 --> 00:04:01.650
授予类型授权码

00:03:58.890 --> 00:04:03.810
但它引入了ID令牌权限

00:04:01.650 --> 00:04:07.530
代替授权请求

00:04:03.810 --> 00:04:09.510
这是身份验证请求，但是

00:04:07.530 --> 00:04:11.609
它利用授权码，但是

00:04:09.510 --> 00:04:13.470
当它到达顶部的令牌端点时

00:04:11.609 --> 00:04:16.380
的访问令牌也将获得此ID 

00:04:13.470 --> 00:04:19.200
令牌权限，此ID令牌有一个

00:04:16.380 --> 00:04:21.539
那里描述的索赔

00:04:19.200 --> 00:04:23.909
首先在提供者处通过身份验证的用户

00:04:21.539 --> 00:04:25.050
名字姓氏主题颁发者等

00:04:23.909 --> 00:04:27.480
来，我们来看看

00:04:25.050 --> 00:04:30.520
当我们进行演示时

00:04:27.480 --> 00:04:32.950
打开ID连接发现打开ID 

00:04:30.520 --> 00:04:35.440
连接提供商可以实现此目的

00:04:32.950 --> 00:04:37.630
客户端或资源所在的端点

00:04:35.440 --> 00:04:40.180
服务器可以发现提供者元数据

00:04:37.630 --> 00:04:41.980
例如发现授权

00:04:40.180 --> 00:04:44.110
端点令牌端点用户信息

00:04:41.980 --> 00:04:45.820
端点等，所以我要去

00:04:44.110 --> 00:04:48.420
向我们展示一个例子

00:04:45.820 --> 00:04:51.070
通过演示GWT 

00:04:48.420 --> 00:04:54.580
您自己的访问令牌类型

00:04:51.070 --> 00:04:56.440
也有不透明的令牌GWT我的意思是

00:04:54.580 --> 00:04:58.570
自包含所有属性

00:04:56.440 --> 00:05:01.440
 jwk设置，因此非常方便

00:04:58.570 --> 00:05:04.180
资源服务器接收GWT 

00:05:01.440 --> 00:05:06.280
对其进行解码并进行授权

00:05:04.180 --> 00:05:08.230
另一方面，决策不透明令牌

00:05:06.280 --> 00:05:11.020
顺便说一句五点

00:05:08.230 --> 00:05:13.300
不透明的令牌支持它是

00:05:11.020 --> 00:05:15.190
不透明的是你不能演绎任何东西

00:05:13.300 --> 00:05:17.380
它是唯一的标识符

00:05:15.190 --> 00:05:20.260
并且资源服务器可以的唯一方法

00:05:17.380 --> 00:05:21.790
获取与该访问关联的属性

00:05:20.260 --> 00:05:23.710
令牌，它必须调用内省

00:05:21.790 --> 00:05:26.860
端点，所以这是一个额外的请求

00:05:23.710 --> 00:05:28.750
响应电话明显减少了

00:05:26.860 --> 00:05:30.060
在这方面的可扩展性，但在

00:05:28.750 --> 00:05:32.290
同时有利弊

00:05:30.060 --> 00:05:33.310
自包含令牌和不透明令牌

00:05:32.290 --> 00:05:37.600
我不会全力以赴

00:05:33.310 --> 00:05:40.750
现在，但是您去了JWT，然后是GWS I 

00:05:37.600 --> 00:05:44.110
表示无法为JW T签名ID令牌

00:05:40.750 --> 00:05:45.580
已签署，希望每一个GWT 

00:05:44.110 --> 00:05:47.440
你至少签了名

00:05:45.580 --> 00:05:50.740
绝对不想被使用

00:05:47.440 --> 00:05:54.640
肯定是不安全的JWT，所以这就是GWS 

00:05:50.740 --> 00:05:56.230
然后你得到jwe java web json web 

00:05:54.640 --> 00:05:59.140
加密是整体的一部分

00:05:56.230 --> 00:06:01.690
 Jose框架是JSON对象

00:05:59.140 --> 00:06:04.780
签名和加密，然后我们

00:06:01.690 --> 00:06:08.110
有gwk JSON Web密钥，所以这是一个

00:06:04.780 --> 00:06:10.150
这是公众的JSON表示形式

00:06:08.110 --> 00:06:12.700
关键或关键权利可能是

00:06:10.150 --> 00:06:15.160
对称密钥，例如共享密钥或

00:06:12.700 --> 00:06:17.260
对称密钥，例如RSA密钥

00:06:15.160 --> 00:06:20.200
最终由提供者用来签署

00:06:17.260 --> 00:06:23.340
 JWT和资源服务器或

00:06:20.200 --> 00:06:26.680
客户端打开ID连接

00:06:23.340 --> 00:06:29.080
事物的一面需要那个钥匙来验证

00:06:26.680 --> 00:06:32.020
签名正确，所以有一个

00:06:29.080 --> 00:06:35.080
从非常高的水平

00:06:32.020 --> 00:06:36.760
已实施的标准

00:06:35.080 --> 00:06:39.979
Spring Security 5，我将展示

00:06:36.760 --> 00:06:41.810
您如何在此方面利用它

00:06:39.979 --> 00:06:43.940
从高层次来看，我只是

00:06:41.810 --> 00:06:45.530
过去，这就是我们要做的， 

00:06:43.940 --> 00:06:49.039
有很多事情要做，我将尝试

00:06:45.530 --> 00:06:50.960
不用急于得到它，你知道

00:06:49.039 --> 00:06:52.789
有点像演示的旋风

00:06:50.960 --> 00:06:54.320
要尽我所能去喜欢真正的节奏

00:06:52.789 --> 00:06:56.930
但这要做好，因为这是

00:06:54.320 --> 00:06:58.820
我们的目标是这是我们的架构

00:06:56.930 --> 00:07:01.550
我们有三个微服务，我们有一个

00:06:58.820 --> 00:07:05.780
 UI应用程序和授权服务器

00:07:01.550 --> 00:07:07.639
 UI应用程序权限就像您了解API一样

00:07:05.780 --> 00:07:09.949
网关或后端最前端

00:07:07.639 --> 00:07:12.560
模式，如果您知道所有请求

00:07:09.949 --> 00:07:14.539
通过客户端的UI应用程序进行渠道

00:07:12.560 --> 00:07:17.030
浏览器或本机移动应用

00:07:14.539 --> 00:07:19.039
任何权利，但所有请求都去了

00:07:17.030 --> 00:07:19.850
通过那里提供了一个粗粒度

00:07:19.039 --> 00:07:22.610
 api 

00:07:19.850 --> 00:07:24.530
最终聚集或调用

00:07:22.610 --> 00:07:27.590
微服务更细粒度

00:07:24.530 --> 00:07:30.729
 api并将响应汇总回去

00:07:27.590 --> 00:07:33.020
向客户的权利，因此UI应用程序在这里

00:07:30.729 --> 00:07:36.470
基本的最后fapla keishon这是一个

00:07:33.020 --> 00:07:38.570
您知道的完美地点

00:07:36.470 --> 00:07:39.919
打开ID打开ID连接

00:07:38.570 --> 00:07:41.990
像这样的身份验证

00:07:39.919 --> 00:07:43.580
横切关注点可能会发生

00:07:41.990 --> 00:07:46.370
甚至可以在这里设置授权

00:07:43.580 --> 00:07:48.169
路由除api网关外的任何路由

00:07:46.370 --> 00:07:50.120
模式，这是最有名的模式

00:07:48.169 --> 00:07:52.310
肯定地练习，然后我们得到了这些

00:07:50.120 --> 00:07:54.380
三个微服务对，所以UI应用程序

00:07:52.310 --> 00:07:56.510
将微服务称为微服务

00:07:54.380 --> 00:07:58.699
服务是这样，我们也将建立一个

00:07:56.510 --> 00:08:01.669
第二步是OAuth客户端

00:07:58.699 --> 00:08:03.710
最终将要经历

00:08:01.669 --> 00:08:05.960
获得授权码的流程

00:08:03.710 --> 00:08:09.139
访问令牌，然后将其传递给micro 

00:08:05.960 --> 00:08:11.389
服务微服务是微服务

00:08:09.139 --> 00:08:13.760
 B我们要设置一个OAuth客户端行

00:08:11.389 --> 00:08:16.070
那里有客户凭证授予

00:08:13.760 --> 00:08:17.750
我告诉你你知道什么情况

00:08:16.070 --> 00:08:19.220
您是否使用客户端凭据授予

00:08:17.750 --> 00:08:20.960
与授权码相比

00:08:19.220 --> 00:08:22.789
到那我们要设置

00:08:20.960 --> 00:08:25.159
在那里，它将要打电话

00:08:22.789 --> 00:08:27.650
微服务C，这就是我们

00:08:25.159 --> 00:08:31.550
我们要做的就是正确地做

00:08:27.650 --> 00:08:34.630
现在，让我们来跳到演示

00:08:31.550 --> 00:08:40.700
在这里，我实际上将向您展示

00:08:34.630 --> 00:08:42.560
所以这是我得到的这个示例应用

00:08:40.700 --> 00:08:45.980
整个这里有一些不同的流程

00:08:42.560 --> 00:08:49.160
无论如何，我的目标都是我的目标

00:08:45.980 --> 00:08:51.980
是为了展示正确和最佳的流程

00:08:49.160 --> 00:08:53.750
就模式而言，您知道的实践

00:08:51.980 --> 00:08:55.250
你知道像

00:08:53.750 --> 00:08:57.410
在这里我有五种不同的流程

00:08:55.250 --> 00:08:59.959
有非常简单的流程，然后我得到了

00:08:57.410 --> 00:09:02.839
令牌中继模式令牌交换I 

00:08:59.959 --> 00:09:04.220
我不能证明我们所有的一切

00:09:02.839 --> 00:09:06.800
只是要专注于底部

00:09:04.220 --> 00:09:08.689
客户凭证流，但我希望

00:09:06.800 --> 00:09:10.339
这个程序的整体目标是

00:09:08.689 --> 00:09:14.089
更高级的东西

00:09:10.339 --> 00:09:16.279
您知道的高级架构

00:09:14.089 --> 00:09:18.170
据您所知实施的安全性

00:09:16.279 --> 00:09:19.970
 Spring Security Fives OAuth和开放ID 

00:09:18.170 --> 00:09:22.639
连接支持，以便人们可以去

00:09:19.970 --> 00:09:25.100
这个检查出来从中学习，只是

00:09:22.639 --> 00:09:26.689
正确学习最佳做法，我却没有

00:09:25.100 --> 00:09:28.970
有一个内置的领域模型

00:09:26.689 --> 00:09:30.850
因为领域模型将成为

00:09:28.970 --> 00:09:33.620
噪音对不对

00:09:30.850 --> 00:09:36.019
服务与什么之间的交互

00:09:33.620 --> 00:09:39.980
访问令牌在每个服务之间流动

00:09:36.019 --> 00:09:41.480
所以我的意思是像点击一样显示

00:09:39.980 --> 00:09:43.639
在此流程上，您可以看到有一个

00:09:41.480 --> 00:09:46.069
那里的流程顺序，然后我得到了一些

00:09:43.639 --> 00:09:47.420
每个元数据之间的元数据

00:09:46.069 --> 00:09:49.310
之间的相互作用

00:09:47.420 --> 00:09:51.139
组件UI应用程序调用服务说

00:09:49.310 --> 00:09:53.420
现在没有数据，但这是

00:09:51.139 --> 00:09:55.939
就像我们知道的那样会人口稠密

00:09:53.420 --> 00:09:57.769
确保申请权，但

00:09:55.939 --> 00:10:00.529
你有一个GTI，基本上

00:09:57.769 --> 00:10:03.800
 JSON标识符，所以我们将看到

00:10:00.529 --> 00:10:05.059
访问令牌正在通过授权

00:10:03.800 --> 00:10:07.639
所以也许你知道权威

00:10:05.059 --> 00:10:09.680
诸如范围之类的信息等等

00:10:07.639 --> 00:10:13.910
嗯，让我们开始吧，出发

00:10:09.680 --> 00:10:15.259
让我们做第一部分的

00:10:13.910 --> 00:10:18.949
演示是我们要设置开放ID 

00:10:15.259 --> 00:10:21.589
使用UI应用程序进行身份验证

00:10:18.949 --> 00:10:23.649
现在我们要做的第一件事

00:10:21.589 --> 00:10:27.350
只是这些都是 spring boot 应用程序

00:10:23.649 --> 00:10:30.559
所以我们要做的第一件事就是添加

00:10:27.350 --> 00:10:31.759
我要建立的依赖关系

00:10:30.559 --> 00:10:34.939
这个更大一点，所以每个人都可以

00:10:31.759 --> 00:10:37.459
看到所以两个所需的依赖

00:10:34.939 --> 00:10:39.620
 oauth2客户端显然是 Spring 

00:10:37.459 --> 00:10:41.420
开机启动程序安全启动程序和

00:10:39.620 --> 00:10:43.579
 oauth2客户端启动器是两个

00:10:41.420 --> 00:10:47.209
入门者做对了，所以我有了第一个

00:10:43.579 --> 00:10:49.550
然后第二件事我要走了

00:10:47.209 --> 00:10:51.350
实际删除

00:10:49.550 --> 00:10:53.629
我实际上已经禁用了您的安全性

00:10:51.350 --> 00:10:56.420
看到我进入了相同的应用程序

00:10:53.629 --> 00:10:58.250
 8，你知道我刚刚说对了

00:10:56.420 --> 00:11:00.019
我已经通过排除禁用所有内容

00:10:58.250 --> 00:11:03.380
开机自动配置，所以我

00:11:00.019 --> 00:11:05.950
现在要立即删除

00:11:03.380 --> 00:11:09.440
我们要去

00:11:05.950 --> 00:11:14.510
应用程序属性，我们

00:11:09.440 --> 00:11:17.120
将为客户端添加属性

00:11:14.510 --> 00:11:21.550
为我要去的客户评分

00:11:17.120 --> 00:11:24.020
这些都是这里的关键特性

00:11:21.550 --> 00:11:26.000
 Spring Spring Security OAuth2客户端

00:11:24.020 --> 00:11:28.040
那是基础属性路径

00:11:26.000 --> 00:11:29.690
下面我们有注册，但是

00:11:28.040 --> 00:11:31.640
在那个级别上，提供商

00:11:29.690 --> 00:11:34.250
注册是您可以的

00:11:31.640 --> 00:11:35.390
注册多个客户权利

00:11:34.250 --> 00:11:37.310
因为你可以使用这样的客户

00:11:35.390 --> 00:11:38.870
这里的客户端用于我的开放ID 

00:11:37.310 --> 00:11:39.920
我可以使用的连接位置

00:11:38.870 --> 00:11:41.779
另一个授权客户

00:11:39.920 --> 00:11:44.720
我将要演示的代码

00:11:41.779 --> 00:11:46.399
我们进步了，但我可以加我很多

00:11:44.720 --> 00:11:49.970
我想要的客户取决于这

00:11:46.399 --> 00:11:51.560
应用程序需要权利，然后提供商是

00:11:49.970 --> 00:11:53.120
提供者元数据显然我要

00:11:51.560 --> 00:11:54.800
知道授权端点令牌

00:11:53.120 --> 00:11:56.990
端点用户信息端点，因此

00:11:54.800 --> 00:11:58.520
所以我可以设置多个提供商

00:11:56.990 --> 00:12:01.580
从技术上讲，我可以在这里设置任何东西

00:11:58.520 --> 00:12:06.399
我可以设置Google octa UA 

00:12:01.580 --> 00:12:08.930
现在有多个客户，依此类推

00:12:06.399 --> 00:12:11.029
在注册下方，这是

00:12:08.930 --> 00:12:13.160
注册ID，这只是合乎逻辑的

00:12:11.029 --> 00:12:15.649
我可以给的名字

00:12:13.160 --> 00:12:17.510
任何名称，只要有

00:12:15.649 --> 00:12:19.700
在客户注册中是唯一的，或者

00:12:17.510 --> 00:12:21.770
 posit或e但关键在这里

00:12:19.700 --> 00:12:24.320
要指出的是范围开放ID 

00:12:21.770 --> 00:12:26.510
这是Open ID的必需范围

00:12:24.320 --> 00:12:28.910
连接才是触发

00:12:26.510 --> 00:12:31.310
身份验证请求，如果我删除了open 

00:12:28.910 --> 00:12:32.990
 ID（即使正在使用授权） 

00:12:31.310 --> 00:12:34.940
代码，它只是回到

00:12:32.990 --> 00:12:38.450
授权码授予标准oauth2 

00:12:34.940 --> 00:12:40.670
因此，开放ID是一个指标

00:12:38.450 --> 00:12:42.290
身份验证请求，这样您就可以

00:12:40.670 --> 00:12:45.860
必须确保您将其添加为开放

00:12:42.290 --> 00:12:49.610
标识连接，然后重定向URI 

00:12:45.860 --> 00:12:53.630
这是默认的默认重定向URI 

00:12:49.610 --> 00:12:56.089
登录时我授权

00:12:53.630 --> 00:12:58.579
客户访问我的用户信息，以及

00:12:56.089 --> 00:13:01.550
然后授权服务器重定向

00:12:58.579 --> 00:13:03.470
在这种情况下，授权授权为

00:13:01.550 --> 00:13:04.810
授权码回到

00:13:03.470 --> 00:13:07.459
重定向到这里我回到应用程序

00:13:04.810 --> 00:13:10.579
客户收到它交换

00:13:07.459 --> 00:13:12.770
访问令牌好，然后我们有

00:13:10.579 --> 00:13:15.110
提供者信息权

00:13:12.770 --> 00:13:15.650
授权令牌用户的影响如此

00:13:15.110 --> 00:13:17.570
向前

00:13:15.650 --> 00:13:19.010
就是这样，这就是我做的正确的

00:13:17.570 --> 00:13:21.170
我基本上添加

00:13:19.010 --> 00:13:22.610
像依赖项一样添加到我的属性中

00:13:21.170 --> 00:13:29.300
现在让我们看看我发生了什么

00:13:22.610 --> 00:13:33.980
要重新启动应用程序，然后

00:13:29.300 --> 00:13:35.600
我们要看看这里会发生什么

00:13:33.980 --> 00:13:39.230
这很好，所以我们被重定向了

00:13:35.600 --> 00:13:44.840
回到我们的授权服务器

00:13:39.230 --> 00:13:46.370
我实际上是在使用UAA 

00:13:44.840 --> 00:13:47.980
的授权服务器

00:13:46.370 --> 00:13:50.420
那些不认识你的人是

00:13:47.980 --> 00:13:52.040
 cloud Foundry的身份管理

00:13:50.420 --> 00:13:54.620
系统，所以我正在使用该

00:13:52.040 --> 00:13:56.600
在本地，所以我在这里收到此消息

00:13:54.620 --> 00:13:57.950
您知道如果收到的典型消息

00:13:56.600 --> 00:13:59.840
您正在使用Google登录，或者

00:13:57.950 --> 00:14:02.720
您授权Google或授权

00:13:59.840 --> 00:14:05.450
此应用程序或此客户端

00:14:02.720 --> 00:14:07.160
访问我的用户信息电子邮件地址

00:14:05.450 --> 00:14:10.910
个人资料等等，所以我要点击

00:14:07.160 --> 00:14:13.610
在授权上，你去了，所以现在我

00:14:10.910 --> 00:14:16.190
我在雅典娜那里看到更多信息

00:14:13.610 --> 00:14:17.750
没错，我叫我名字，但最重要的是

00:14:16.190 --> 00:14:19.430
就在那里，我有这个链接

00:14:17.750 --> 00:14:21.130
显示一些信息，就像我以前

00:14:19.430 --> 00:14:23.780
较早谈论

00:14:21.130 --> 00:14:27.560
对不起，就像我在说

00:14:23.780 --> 00:14:30.110
之前ID令牌返回到

00:14:27.560 --> 00:14:32.450
开放ID连接上的令牌端点

00:14:30.110 --> 00:14:34.430
流程，我们在ID令牌中有声明

00:14:32.450 --> 00:14:36.920
这是这里的一些要求

00:14:34.430 --> 00:14:38.180
还有更多的要求，但这些是

00:14:36.920 --> 00:14:40.700
他们中有些人声称我只是在展示

00:14:38.180 --> 00:14:42.710
现在在这里显然是两个关键

00:14:40.700 --> 00:14:44.660
既是发行人又是发行人，所以发行人

00:14:42.710 --> 00:14:46.790
该唯一标识或提供者，以及

00:14:44.660 --> 00:14:49.040
然后以我的唯一标识符为准

00:14:46.790 --> 00:14:51.830
在提供者处以及

00:14:49.040 --> 00:14:54.560
这两个基本上是全球唯一的

00:14:51.830 --> 00:14:56.300
提供者之外的用户的标识符，以及

00:14:54.560 --> 00:14:59.330
那我们就知道一些不同

00:14:56.300 --> 00:15:01.790
声称您知道我的名字名字

00:14:59.330 --> 00:15:04.040
姓氏电子邮件等已获授权

00:15:01.790 --> 00:15:06.500
参加听众聚会

00:15:04.040 --> 00:15:09.050
这个ID令牌显然是

00:15:06.500 --> 00:15:12.380
客户，然后我有一些信息

00:15:09.050 --> 00:15:13.580
在这里，您对客户知道

00:15:12.380 --> 00:15:16.040
已经注册了，我可以看看

00:15:13.580 --> 00:15:18.020
访问令牌，我得到了您知道的ID令牌

00:15:16.040 --> 00:15:22.610
这些信息就像我说的

00:15:18.020 --> 00:15:25.790
这个应用程式更像是最佳做法

00:15:22.610 --> 00:15:27.500
了解流之间发生了什么

00:15:25.790 --> 00:15:29.660
以及会议中发生的事情

00:15:27.500 --> 00:15:32.749
查看刚刚看到的信息

00:15:29.660 --> 00:15:34.429
内省

00:15:32.749 --> 00:15:36.619
在应用程序中，您知道

00:15:34.429 --> 00:15:39.139
据您所知，发生了什么事

00:15:36.619 --> 00:15:42.019
通过OAuth在此处启用了安全性，因此

00:15:39.139 --> 00:15:44.809
你去了，所以我得到了开放的ID 

00:15:42.019 --> 00:15:46.730
已连接的指示工具

00:15:44.809 --> 00:15:48.860
很容易，我有了依赖

00:15:46.730 --> 00:15:51.470
我拥有财产，做对了

00:15:48.860 --> 00:15:52.990
好吧，我还是觉得很容易

00:15:51.470 --> 00:15:57.110
希望你也这样做

00:15:52.990 --> 00:15:58.939
现在我正在看这个，而你

00:15:57.110 --> 00:16:00.259
知道这里有一些属性

00:15:58.939 --> 00:16:02.269
知道我喜欢做一点

00:16:00.259 --> 00:16:03.709
更小使其更容易

00:16:02.269 --> 00:16:06.439
对，那我该怎么办

00:16:03.709 --> 00:16:07.160
我可以利用开放ID连接

00:16:06.439 --> 00:16:09.679
发现

00:16:07.160 --> 00:16:12.709
好的，所以开放ID连接提供商

00:16:09.679 --> 00:16:14.899
可以实现这个端点，他们

00:16:12.709 --> 00:16:15.860
公开提供程序元数据，以便您可以

00:16:14.899 --> 00:16:18.319
看到这里我得到了授权

00:16:15.860 --> 00:16:21.589
端点令牌端点，我的意思是

00:16:18.319 --> 00:16:25.309
提供者在这里有很多东西

00:16:21.589 --> 00:16:28.160
不能公开，基本上在客户或

00:16:25.309 --> 00:16:30.920
资源服务器可以调用发现

00:16:28.160 --> 00:16:34.069
端点并最终使用此数据

00:16:30.920 --> 00:16:36.230
例如，客户可以查找

00:16:34.069 --> 00:16:38.029
自动发现端点

00:16:36.230 --> 00:16:40.819
用一些不同的配置自己

00:16:38.029 --> 00:16:43.639
这些信息，让我们尝试

00:16:40.819 --> 00:16:47.420
让我们尝试让我们尝试打开ID 

00:16:43.639 --> 00:16:52.009
将发现集成与

00:16:47.420 --> 00:16:55.309
Spring Security ，使我们的客户

00:16:52.009 --> 00:16:56.420
注册更简单，所以我

00:16:55.309 --> 00:16:58.220
我要做的就是摆脱一切

00:16:56.420 --> 00:17:01.610
这些东西就在我

00:16:58.220 --> 00:17:05.679
只需添加发行者URI，我

00:17:01.610 --> 00:17:07.669
默认已经知道这两个是

00:17:05.679 --> 00:17:09.770
默认授权码和

00:17:07.669 --> 00:17:11.510
重定向URI，这就是很多

00:17:09.770 --> 00:17:13.459
容易一点吧，我的意思是显然你必须

00:17:11.510 --> 00:17:16.120
在您获得的最低限度内向发行人提供

00:17:13.459 --> 00:17:18.620
提供客户凭证，我

00:17:16.120 --> 00:17:20.899
添加范围，所以这是最小的

00:17:18.620 --> 00:17:23.360
绝对最小的配置让我们

00:17:20.899 --> 00:17:26.079
确保这个东西有效，我要

00:17:23.360 --> 00:17:26.079
重新开始

00:17:29.669 --> 00:17:34.000
让我们再登录一下

00:17:32.020 --> 00:17:37.750
要关闭它只是为了确保我

00:17:34.000 --> 00:17:39.190
告诉您我们正在重新登录所有

00:17:37.750 --> 00:17:44.380
就在那边，所以我们还在工作

00:17:39.190 --> 00:17:46.090
好的，所以我已完美登录

00:17:44.380 --> 00:17:47.919
对，那是那么的最小

00:17:46.090 --> 00:17:49.179
配置依赖项打开ID 

00:17:47.919 --> 00:17:51.820
连接那里我们去

00:17:49.179 --> 00:17:55.000
让我们继续下一件事

00:17:51.820 --> 00:17:57.970
事情还好，所以我们建立了

00:17:55.000 --> 00:18:00.250
指示现在我们得到了这三个

00:17:57.970 --> 00:18:03.010
微服务不安全的微服务

00:18:00.250 --> 00:18:04.330
如您所见，它仍然正确，所以我们必须

00:18:03.010 --> 00:18:06.100
保护他们，所以我要做的第一件事

00:18:04.330 --> 00:18:07.990
我要做的是我们要去工作

00:18:06.100 --> 00:18:10.390
向后，我要保护资源

00:18:07.990 --> 00:18:13.120
服务器首先正确，然后我要

00:18:10.390 --> 00:18:14.620
达到这个目标，客户将尝试

00:18:13.120 --> 00:18:16.480
打电话显然没有通过

00:18:14.620 --> 00:18:18.610
访问工具可以有一个401 

00:18:16.480 --> 00:18:23.820
期望值，所以让我们进行配置

00:18:18.610 --> 00:18:27.039
资源服务器接下来，我们来配置

00:18:23.820 --> 00:18:29.110
现在就像任何 spring boot 

00:18:27.039 --> 00:18:31.419
应用程序要做的第一件事

00:18:29.110 --> 00:18:34.000
正确的依赖关系，让我们这样做

00:18:31.419 --> 00:18:36.940
首先，我们将与之合作

00:18:34.000 --> 00:18:40.870
微服务A和 spring boot 

00:18:36.940 --> 00:18:45.520
的启动器，使这一点

00:18:40.870 --> 00:18:47.110
更大，所以每个人都可以看到很多

00:18:45.520 --> 00:18:50.649
太资源服务器权利，显然

00:18:47.110 --> 00:18:52.600
您必须使用添加安全性

00:18:50.649 --> 00:18:55.080
入门者也不错，所以你去了

00:18:52.600 --> 00:18:58.929
他们有那个，现在下一个是

00:18:55.080 --> 00:19:03.789
属性再次正确我

00:18:58.929 --> 00:19:06.940
要删除我禁用自动

00:19:03.789 --> 00:19:08.409
配置，所以我要删除

00:19:06.940 --> 00:19:12.610
自动配置我的spring root 

00:19:08.409 --> 00:19:17.470
注释，以便生效，然后

00:19:12.610 --> 00:19:20.260
我们要进入我们要进入

00:19:17.470 --> 00:19:22.270
属性并配置资源

00:19:20.260 --> 00:19:25.750
服务器好，所以我们开始，这是

00:19:22.270 --> 00:19:29.220
我们这里是我们我实际上

00:19:25.750 --> 00:19:33.010
关闭其中一些窗口，以便我们可以

00:19:29.220 --> 00:19:34.779
使它更大一点，所以在这里我们

00:19:33.010 --> 00:19:37.870
去吧，Spring Security 应该有资源

00:19:34.779 --> 00:19:40.600
基本属性路径GWT的服务器

00:19:37.870 --> 00:19:41.320
您知道五两的访问令牌

00:19:40.600 --> 00:19:42.639
将会有

00:19:41.320 --> 00:19:44.860
佩克在那里，然后你可以

00:19:42.639 --> 00:19:47.350
您的属性设置在那里

00:19:44.860 --> 00:19:49.690
这是为了获得GWT支持，然后我可以

00:19:47.350 --> 00:19:51.519
设置jwk设置你让我来

00:19:49.690 --> 00:19:55.539
看看这是什么这是什么

00:19:51.519 --> 00:19:57.820
 gwk设置您的I（如果我转到浏览器） 

00:19:55.539 --> 00:20:00.639
在这里输入这里，我们走了

00:19:57.820 --> 00:20:03.399
所以这基本上就是我在说的

00:20:00.639 --> 00:20:06.159
关于它是一个jwk JSON网站

00:20:03.399 --> 00:20:08.919
 key这是密钥的JSON表示形式

00:20:06.159 --> 00:20:11.230
提供者用来签署令牌的

00:20:08.919 --> 00:20:13.899
就在这种情况下，如您所见

00:20:11.230 --> 00:20:15.850
输入kty这是一个RSA密钥，所以

00:20:13.899 --> 00:20:17.590
这是一个公钥，这最终是

00:20:15.850 --> 00:20:20.200
什么客户端或资源服务器

00:20:17.590 --> 00:20:21.610
用于获取公钥和

00:20:20.200 --> 00:20:23.860
最终使用它来验证

00:20:21.610 --> 00:20:25.720
正确的签名，所以在那里

00:20:23.860 --> 00:20:27.429
可能不止一个，因为它扎根了

00:20:25.720 --> 00:20:29.169
在键处，所以有一个键数组

00:20:27.429 --> 00:20:32.679
但是在这种情况下，我们只有一个钥匙

00:20:29.169 --> 00:20:36.600
但可能不止一个

00:20:32.679 --> 00:20:40.059
我们会回到这里现在我们也支持

00:20:36.600 --> 00:20:41.679
我们还支持开放学者发现

00:20:40.059 --> 00:20:47.620
在资源服务器端，所以

00:20:41.679 --> 00:20:49.360
指定gwk设置URI的过程

00:20:47.620 --> 00:20:51.100
只需指定问题URI即可

00:20:49.360 --> 00:20:53.529
它会发现gwk说你

00:20:51.100 --> 00:20:55.690
是您，我只是为了方便起见， 

00:20:53.529 --> 00:20:59.559
我只是喜欢那样，所以我们开始吧

00:20:55.690 --> 00:21:02.309
现在让我们开始吧，让我们

00:20:59.559 --> 00:21:02.309
确保它是安全的

00:21:04.170 --> 00:21:09.370
我要去的服务

00:21:06.490 --> 00:21:15.900
直接到服务，然后看看

00:21:09.370 --> 00:21:20.020
我想这是真的

00:21:15.900 --> 00:21:22.120
 9,000对，这就是我正确的

00:21:20.020 --> 00:21:24.340
这是我期望401可以的

00:21:22.120 --> 00:21:26.560
你可以在这里看到所以很漂亮

00:21:24.340 --> 00:21:30.280
像字面上的依赖一样快速正确

00:21:26.560 --> 00:21:33.610
财产，我有抵押

00:21:30.280 --> 00:21:35.350
与此V Fault配置中的一样

00:21:33.610 --> 00:21:39.550
是当访问令牌进入时

00:21:35.350 --> 00:21:42.460
 JWT进来它将解码GWT 

00:21:39.550 --> 00:21:45.070
将正确获取gwk并解决

00:21:42.460 --> 00:21:47.020
公钥，然后它将验证

00:21:45.070 --> 00:21:48.880
签名，然后接下来的事情

00:21:47.020 --> 00:21:51.160
会做的是会验证它不是

00:21:48.880 --> 00:21:52.600
过期，然后它还将验证

00:21:51.160 --> 00:21:55.720
发行人权利是默认值

00:21:52.600 --> 00:21:57.340
配置，然后是

00:21:55.720 --> 00:21:58.870
经过验证的权利

00:21:57.340 --> 00:22:01.720
授权角色（如果要申请） 

00:21:58.870 --> 00:22:03.910
细粒度的作者

00:22:01.720 --> 00:22:06.580
基于范围的授权

00:22:03.910 --> 00:22:10.390
我们要做的授权

00:22:06.580 --> 00:22:12.400
最后，如果我们做到这一点，我们肯定

00:22:10.390 --> 00:22:13.600
想这样做，但我只是让你

00:22:12.400 --> 00:22:19.660
现在知道这是默认值

00:22:13.600 --> 00:22:22.750
配置好了，所以让我们吧

00:22:19.660 --> 00:22:25.090
就是我要去做的

00:22:22.750 --> 00:22:28.090
我不会去重复

00:22:25.090 --> 00:22:30.400
此服务微服务B 

00:22:28.090 --> 00:22:34.450
因为最终是同一回事

00:22:30.400 --> 00:22:38.650
是的，我们将切入

00:22:34.450 --> 00:22:43.750
追逐，看看这个

00:22:38.650 --> 00:22:44.860
具体的提交，我们将看到

00:22:43.750 --> 00:22:47.320
当我们尝试访问时会发生什么

00:22:44.860 --> 00:22:51.750
立即通过应用访问它，因此

00:22:47.320 --> 00:22:56.440
在这一点上我有微服务

00:22:51.750 --> 00:22:58.600
和微服务的权利相同

00:22:56.440 --> 00:23:02.310
正确的步骤，让我们尝试访问

00:22:58.600 --> 00:23:02.310
查看应用程序，让我们看看会发生什么

00:23:04.610 --> 00:23:09.180
让我们把它缩小一点吧

00:23:07.740 --> 00:23:11.700
那就是我所期望的

00:23:09.180 --> 00:23:14.190
一个，因为显然我们还没有设定

00:23:11.700 --> 00:23:16.920
我们还没有建立客户

00:23:14.190 --> 00:23:18.840
实际传递访问令牌权限

00:23:16.920 --> 00:23:21.960
这就是我们接下来要做的

00:23:18.840 --> 00:23:24.540
所以现在在UI应用程序上

00:23:21.960 --> 00:23:26.460
建立一个通过

00:23:24.540 --> 00:23:28.740
授权码克流程

00:23:26.460 --> 00:23:31.980
获取具有以下内容的访问令牌： 

00:23:28.740 --> 00:23:34.620
能力或当局打电话

00:23:31.980 --> 00:23:37.250
微服务a和微服务B因此

00:23:34.620 --> 00:23:37.250
接下来我们做

00:23:39.050 --> 00:23:45.630
同样的程序是

00:23:43.220 --> 00:23:48.030
依赖我们的依赖是

00:23:45.630 --> 00:23:51.420
那里正确，因为我们已经添加了它

00:23:48.030 --> 00:23:53.430
接下来我们要做的是

00:23:51.420 --> 00:23:55.050
要将新的OAuth客户端配置为

00:23:53.430 --> 00:23:59.580
钱包客户已经有这个

00:23:55.050 --> 00:24:02.240
一个在这里，我们将配置一个

00:23:59.580 --> 00:24:02.240
验证码一

00:24:06.230 --> 00:24:11.310
然后你走了，所以我给了这些

00:24:08.880 --> 00:24:15.120
真正的通用名称微服务

00:24:11.310 --> 00:24:17.760
微服务B客户ABC授权a 

00:24:15.120 --> 00:24:19.860
权威是对的

00:24:17.760 --> 00:24:21.900
更容易追踪，而且通用

00:24:19.860 --> 00:24:24.780
确实是我命名的方式

00:24:21.900 --> 00:24:27.540
微服务a授权机构a 

00:24:24.780 --> 00:24:30.150
微服务B授权机构B 

00:24:27.540 --> 00:24:31.650
所以如果你知道的话

00:24:30.150 --> 00:24:34.290
如果您看一下，那就是

00:24:31.650 --> 00:24:37.710
命名就是这样，在这种情况下，客户端

00:24:34.290 --> 00:24:40.590
 ABC权利具有的能力是

00:24:37.710 --> 00:24:43.440
权威机构AC BC BC 

00:24:40.590 --> 00:24:45.810
因此它可以访问微服务

00:24:43.440 --> 00:24:47.910
微型服务B微型服务C对

00:24:45.810 --> 00:24:51.960
只是关于一些信息

00:24:47.910 --> 00:24:53.400
这里的命名约定就是这样

00:24:51.960 --> 00:24:55.710
其他一切都是很标准的

00:24:53.400 --> 00:24:58.080
先前的授权码

00:24:55.710 --> 00:25:01.650
授予是默认设置，因为我们

00:24:58.080 --> 00:25:04.530
由发行人发现，我们只是

00:25:01.650 --> 00:25:06.570
请求这三个范围，让我们

00:25:04.530 --> 00:25:09.330
做到这一点，这就是第一步

00:25:06.570 --> 00:25:11.700
现在我们有客户现在我们必须

00:25:09.330 --> 00:25:13.560
正确使用客户，所以接下来

00:25:11.700 --> 00:25:17.550
我们要做的是实际上

00:25:13.560 --> 00:25:21.570
配置Web客户端集成，以便

00:25:17.550 --> 00:25:25.350
我们有一个我们有一个漂亮我们有支持

00:25:21.570 --> 00:25:29.040
适用于网络客户，我会在什么时候告诉你

00:25:25.350 --> 00:25:30.150
在这里做到这一点，它将使

00:25:29.040 --> 00:25:34.890
这个更大一点，我将谈论

00:25:30.150 --> 00:25:37.170
这有点，这是标准

00:25:34.890 --> 00:25:38.790
任何Web客户端的配置

00:25:37.170 --> 00:25:41.850
您将在任何服务中使用这是

00:25:38.790 --> 00:25:43.500
非常像剪切复制粘贴

00:25:41.850 --> 00:25:45.810
我们有这个交换过滤器

00:25:43.500 --> 00:25:48.300
功能servlet誓言授权

00:25:45.810 --> 00:25:50.610
客户端交换过滤功能超强

00:25:48.300 --> 00:25:53.160
长名称正确，但很有意义

00:25:50.610 --> 00:25:56.670
这是一个交换过滤器功能

00:25:53.160 --> 00:25:58.800
正确，它需要OAuth 

00:25:56.670 --> 00:26:01.290
授权客户，这是

00:25:58.800 --> 00:26:03.810
命令式版本servlets版本

00:26:01.290 --> 00:26:05.880
对，我们也有反应式版本

00:26:03.810 --> 00:26:08.760
服务器名称与服务器名称相同的前缀

00:26:05.880 --> 00:26:12.180
现在这是什么意思

00:26:08.760 --> 00:26:15.060
过滤功能可以点击请求

00:26:12.180 --> 00:26:16.560
 Web客户的预处理权

00:26:15.060 --> 00:26:17.639
最终这就是我们要做的

00:26:16.560 --> 00:26:19.649
对了，我们有一个

00:26:17.639 --> 00:26:21.450
将访问令牌作为承载

00:26:19.649 --> 00:26:24.389
授权标头中的令牌

00:26:21.450 --> 00:26:27.179
在该请求之前是

00:26:24.389 --> 00:26:29.009
发送，我们必须添加该标题正确

00:26:27.179 --> 00:26:31.529
我们要插入一个

00:26:29.009 --> 00:26:34.619
交换过滤器功能和这个

00:26:31.529 --> 00:26:36.959
特定的交换过滤功能需求

00:26:34.619 --> 00:26:38.759
授权客户获得

00:26:36.959 --> 00:26:41.190
访问工具什么是授权客户

00:26:38.759 --> 00:26:51.749
让我们来看看什么是授权

00:26:41.190 --> 00:26:54.419
客户是真正的授权客户

00:26:51.749 --> 00:26:57.209
这是一个关联类，例如当

00:26:54.419 --> 00:27:01.499
客户获得资源授权

00:26:57.209 --> 00:27:03.299
所有者权利，我们有客户权利

00:27:01.499 --> 00:27:06.359
客户注册本名

00:27:03.299 --> 00:27:09.299
这是资源所有者标识符， 

00:27:06.359 --> 00:27:11.969
那么授权的结果是

00:27:09.299 --> 00:27:14.729
访问令牌和（可选）刷新

00:27:11.969 --> 00:27:16.859
令牌正确，所以当客户去时

00:27:14.729 --> 00:27:18.929
通过授权授予结束

00:27:16.859 --> 00:27:20.969
结果是获得授权的客户和

00:27:18.929 --> 00:27:23.099
授权客户存储在

00:27:20.969 --> 00:27:25.159
授权的客户存储库就这样

00:27:23.099 --> 00:27:28.169
那就是授权客户

00:27:25.159 --> 00:27:29.369
它需要一个交换过滤器功能

00:27:28.169 --> 00:27:31.889
授权的客户，因为那是

00:27:29.369 --> 00:27:34.079
它获得了访问令牌，所以我们传入

00:27:31.889 --> 00:27:35.789
客户端注册存储库

00:27:34.079 --> 00:27:37.019
授权的客户端存储库，以便知道

00:27:35.789 --> 00:27:39.690
怎么做

00:27:37.019 --> 00:27:42.239
对，就是这样，然后

00:27:39.690 --> 00:27:45.089
所以我们创建了一个实例

00:27:42.239 --> 00:27:47.609
然后我们将其应用于您所看到的这一点

00:27:45.089 --> 00:27:49.679
在这里，我们将其应用于生成器

00:27:47.609 --> 00:27:53.940
最终这是将其添加

00:27:49.679 --> 00:27:56.129
作为交换过滤器功能，它具有

00:27:53.940 --> 00:27:58.679
我有很多不同的能力

00:27:56.129 --> 00:28:00.989
意思是如果访问

00:27:58.679 --> 00:28:02.519
令牌已过期，它将刷新它

00:28:00.989 --> 00:28:04.469
对的它将刷新它

00:28:02.519 --> 00:28:06.719
授权码客户端（如果有） 

00:28:04.469 --> 00:28:09.479
刷新客户端凭证的令牌

00:28:06.719 --> 00:28:10.919
客户端（如果访问令牌已过期） 

00:28:09.479 --> 00:28:12.929
只会调用令牌端点

00:28:10.919 --> 00:28:14.759
最终更新访问令牌

00:28:12.929 --> 00:28:17.129
对，所以这些就是功能

00:28:14.759 --> 00:28:18.809
内置其中，这最终是

00:28:17.129 --> 00:28:20.759
其他盛大类型将在哪里

00:28:18.809 --> 00:28:22.889
为五个增加了两个

00:28:20.759 --> 00:28:24.539
资源Alando密码，我们将

00:28:22.889 --> 00:28:26.940
一定要尝试加入GWT 

00:28:24.539 --> 00:28:28.440
障碍补助金，所以这是网络

00:28:26.940 --> 00:28:31.480
客户端配置，现在我已经

00:28:28.440 --> 00:28:33.880
现在将我的客户端配置为我的Web客户端

00:28:31.480 --> 00:28:37.540
必须使用此网络客户端，所以让我们

00:28:33.880 --> 00:28:41.980
看看我要怎么办

00:28:37.540 --> 00:28:46.780
去我要去那个主要的

00:28:41.980 --> 00:28:49.270
单击时调用的控制器

00:28:46.780 --> 00:28:53.350
该链接正确，我要添加的意思是

00:28:49.270 --> 00:28:56.140
有几种不同的方式，我

00:28:53.350 --> 00:28:59.350
将显示此注释方式

00:28:56.140 --> 00:29:02.170
授权客户的方法

00:28:59.350 --> 00:29:03.940
注释此处理程序方法参数

00:29:02.170 --> 00:29:07.840
解析器注册了很多授权

00:29:03.940 --> 00:29:10.630
客户对，我指定了

00:29:07.840 --> 00:29:12.100
注册ID客户ABC，因为

00:29:10.630 --> 00:29:13.810
这就是我配置的

00:29:12.100 --> 00:29:15.820
特定的注册ID 

00:29:13.810 --> 00:29:17.770
我要解决的客户

00:29:15.820 --> 00:29:18.790
最终在受保护的资源中使用

00:29:17.770 --> 00:29:20.500
请求

00:29:18.790 --> 00:29:23.290
所以这个注释到底是什么

00:29:20.500 --> 00:29:25.840
是不是我的意思是它解决了授权问题

00:29:23.290 --> 00:29:28.420
简而言之，如果客户

00:29:25.840 --> 00:29:31.330
未经授权，则触发

00:29:28.420 --> 00:29:32.650
授权授予，因此在这种情况下

00:29:31.330 --> 00:29:34.810
授权码授予，因此

00:29:32.650 --> 00:29:38.200
触发正确的流动并最终

00:29:34.810 --> 00:29:40.120
它被重定向回此

00:29:38.200 --> 00:29:42.400
这个端点，因为这是

00:29:40.120 --> 00:29:43.870
重定向URI，然后就可以

00:29:42.400 --> 00:29:45.910
解决它，因为在那家工厂

00:29:43.870 --> 00:29:48.880
现在授权的客户资料库I 

00:29:45.910 --> 00:29:50.470
有我的授权客户，所以你

00:29:48.880 --> 00:29:51.910
知道我可以获取访问令牌或

00:29:50.470 --> 00:29:54.160
网络客户端可以获取访问权限

00:29:51.910 --> 00:29:56.860
令牌现在我要正确使用，所以

00:29:54.160 --> 00:29:58.870
接下来我要做的是你知道

00:29:56.860 --> 00:30:01.780
我只是把所有的东西都传到这里

00:29:58.870 --> 00:30:03.250
只需将其添加到这些方法中

00:30:01.780 --> 00:30:07.510
我们将直接去

00:30:03.250 --> 00:30:09.790
实际上，您知道它的设置正确

00:30:07.510 --> 00:30:13.060
这里的网络客户对，这是主要的

00:30:09.790 --> 00:30:16.120
行，因此Web客户端具有功能

00:30:13.060 --> 00:30:18.700
请求添加请求属性

00:30:16.120 --> 00:30:21.100
这是非常好的休息模板没有

00:30:18.700 --> 00:30:23.800
有那是太糟糕了

00:30:21.100 --> 00:30:25.150
但无论哪种方式，最终会怎样

00:30:23.800 --> 00:30:28.780
这是怎么回事

00:30:25.150 --> 00:30:31.660
发生在这里是为了授权

00:30:28.780 --> 00:30:33.190
客户端静态方法返回使用者

00:30:31.660 --> 00:30:35.650
最终增加了授权

00:30:33.190 --> 00:30:38.380
客户进入请求属性，所以当

00:30:35.650 --> 00:30:41.010
交换过滤器功能get被点击

00:30:38.380 --> 00:30:43.510
在过滤条件之前

00:30:41.010 --> 00:30:44.860
启动它知道在哪里可以找到

00:30:43.510 --> 00:30:46.150
授权客户，因此

00:30:44.860 --> 00:30:48.070
将获得访问令牌，并

00:30:46.150 --> 00:30:50.110
因此它正确添加了标题

00:30:48.070 --> 00:30:53.049
那基本上就是你下一步

00:30:50.110 --> 00:30:54.610
为Web客户端集成做的事情

00:30:53.049 --> 00:30:55.840
基本上我认为我认为这很漂亮

00:30:54.610 --> 00:30:58.840
您获得了Web客户端

00:30:55.840 --> 00:31:00.850
您配置客户端的配置

00:30:58.840 --> 00:31:03.670
 Web客户端配置

00:31:00.850 --> 00:31:05.230
标准，然后通过

00:31:03.670 --> 00:31:07.299
处理程序方法参数求解器，然后

00:31:05.230 --> 00:31:10.240
在网络客户端中使用它，因此基于

00:31:07.299 --> 00:31:21.570
这个我们要开始这个我们要

00:31:10.240 --> 00:31:21.570
现在重新启动UI应用程序，然后我们将

00:31:24.299 --> 00:31:29.559
那里我们走对了，所以处理程序方法

00:31:27.309 --> 00:31:31.690
我这样的注册授权客户

00:31:29.559 --> 00:31:32.650
提到触发授权

00:31:31.690 --> 00:31:34.840
因为它无法解决

00:31:32.650 --> 00:31:36.669
授权客户端重定向回

00:31:34.840 --> 00:31:39.190
如我所见，提供者

00:31:36.669 --> 00:31:41.049
配置我的客户端，我将其配置为

00:31:39.190 --> 00:31:42.790
请求这三个范围，因为我

00:31:41.049 --> 00:31:44.799
希望能够呼叫所有三个

00:31:42.790 --> 00:31:47.049
微服务，它们在那里

00:31:44.799 --> 00:31:48.960
这三个都可以访问

00:31:47.049 --> 00:31:51.760
我要点击授权

00:31:48.960 --> 00:31:55.360
然后我们就走了，所以现在我们有了

00:31:51.760 --> 00:31:56.850
您可以在此处看到的信息UI应用程序

00:31:55.360 --> 00:32:00.100
呼叫服务说我已突出显示

00:31:56.850 --> 00:32:01.690
特别是JSON网络令牌

00:32:00.100 --> 00:32:05.980
如您所见，标识符是相同的

00:32:01.690 --> 00:32:07.510
一件事，当局是一件事

00:32:05.980 --> 00:32:09.850
在这里注意，您会看到当局

00:32:07.510 --> 00:32:12.760
它们的范围强调了资源

00:32:09.850 --> 00:32:14.559
默认情况下，服务器将检查GWT 

00:32:12.760 --> 00:32:16.059
看看这个尝试找到一个范围

00:32:14.559 --> 00:32:17.890
计划，因为这是您知道的可选项目

00:32:16.059 --> 00:32:20.049
它不一定在那里，但如果有的话

00:32:17.890 --> 00:32:24.370
查找范围声明，无论其范围还是

00:32:20.049 --> 00:32:26.500
 SCP，然后它会做什么基本上

00:32:24.370 --> 00:32:27.669
追加范围，然后将其添加为

00:32:26.500 --> 00:32:29.740
授权给

00:32:27.669 --> 00:32:31.870
 GWT认证实例

00:32:29.740 --> 00:32:33.520
身份验证实例，以防万一

00:32:31.870 --> 00:32:36.280
想知道那个范围前缀在那里

00:32:33.520 --> 00:32:38.410
是然后主题就是我

00:32:36.280 --> 00:32:39.970
我拥有令牌权，我授权了

00:32:38.410 --> 00:32:43.030
客户代我行事的客户

00:32:39.970 --> 00:32:44.950
访问我的资源，但是

00:32:43.030 --> 00:32:47.850
听众是客户的权利，就像你一样

00:32:44.950 --> 00:32:50.110
可以看到我们现在在这里获得了一些信息

00:32:47.850 --> 00:32:52.240
但是我们没有任何信息

00:32:50.110 --> 00:32:53.650
服务B到服务前夕，这就是我们的服务

00:32:52.240 --> 00:32:56.440
下一步，我只是在做一段时间

00:32:53.650 --> 00:32:57.460
检查，我大约有15分钟，所以我

00:32:56.440 --> 00:32:59.260
将尝试

00:32:57.460 --> 00:33:03.310
加快这一步，所以接下来的事情

00:32:59.260 --> 00:33:08.230
去做我接下来要做的事

00:33:03.310 --> 00:33:14.890
我们没有安全的微服务C 

00:33:08.230 --> 00:33:18.460
所以我要检查一下

00:33:14.890 --> 00:33:21.130
现在，在这一点上，我们所有三个

00:33:18.460 --> 00:33:28.380
服务保证正确，我正要去

00:33:21.130 --> 00:33:33.400
重新开始，现在我们要设置

00:33:28.380 --> 00:33:36.220
我们将在微型计算机上设置客户

00:33:33.400 --> 00:33:38.380
服务叫微服务见

00:33:36.220 --> 00:33:39.880
对，但是这次我们要你知道

00:33:38.380 --> 00:33:41.560
使用客户端凭据授予以及为什么

00:33:39.880 --> 00:33:43.360
我在使用客户凭证授予吗

00:33:41.560 --> 00:33:46.060
为什么我不使用授权码

00:33:43.360 --> 00:33:49.870
为什么我不使用令牌

00:33:46.060 --> 00:33:52.510
交换方式我的意思是最后你

00:33:49.870 --> 00:33:54.550
知道授权码的授予

00:33:52.510 --> 00:33:56.020
流有一个有读有一个

00:33:54.550 --> 00:33:58.420
用户有一个资源所有者

00:33:56.020 --> 00:34:00.640
授权用户拥有的客户

00:33:58.420 --> 00:34:03.400
令牌中有用户上下文信息

00:34:00.640 --> 00:34:06.250
在那个令牌，所以你会用那个

00:34:03.400 --> 00:34:07.360
授予，我将使用一个示例

00:34:06.250 --> 00:34:09.460
您知道我有一个电子商务网站

00:34:07.360 --> 00:34:10.990
购物车对，我要买一些

00:34:09.460 --> 00:34:12.460
产品权

00:34:10.990 --> 00:34:14.409
显然有用户信息

00:34:12.460 --> 00:34:17.860
附在购物车上

00:34:14.409 --> 00:34:20.350
订单但产品像

00:34:17.860 --> 00:34:22.720
广告资源服务用户不拥有该资源

00:34:20.350 --> 00:34:25.540
您不需要用户上下文信息

00:34:22.720 --> 00:34:27.250
这是系统服务，因此客户端

00:34:25.540 --> 00:34:29.890
凭据是完美的候选人

00:34:27.250 --> 00:34:31.929
这样的电话，所以想像微

00:34:29.890 --> 00:34:34.090
服务是我们的遗憾

00:34:31.929 --> 00:34:35.980
想象微服务看到库存

00:34:34.090 --> 00:34:37.750
检查您将要使用的服务

00:34:35.980 --> 00:34:39.790
您不需要的客户凭证人

00:34:37.750 --> 00:34:43.360
用户上下文信息就是系统

00:34:39.790 --> 00:34:44.800
服务正确，所以让我们让我们设置

00:34:43.360 --> 00:34:49.919
现在设置我们的客户端

00:34:44.800 --> 00:34:49.919
起来，所以我们要去

00:34:50.230 --> 00:34:57.340
对不起，现在我们已经设置好了

00:34:54.220 --> 00:34:59.290
建立我们的依赖关系

00:34:57.340 --> 00:35:01.380
服务客户的资源，因此

00:34:59.290 --> 00:35:04.420
已经完成，现在下一步

00:35:01.380 --> 00:35:06.190
是的，我们实际上有一个残疾

00:35:04.420 --> 00:35:09.190
自动配置，所以我要

00:35:06.190 --> 00:35:12.220
去，是的，实际上我已经做了

00:35:09.190 --> 00:35:15.450
是的，在上一个和现在

00:35:12.220 --> 00:35:15.450
我们将要建立新的客户

00:35:22.910 --> 00:35:30.349
好的，所以这里有客户端C客户端

00:35:28.009 --> 00:35:32.390
我们只是要一个凭证

00:35:30.349 --> 00:35:33.799
权威大家都知道非常相似的

00:35:32.390 --> 00:35:36.440
唯一的区别是

00:35:33.799 --> 00:35:39.769
授权授予，他们将重定向

00:35:36.440 --> 00:35:41.839
对你我，但其他一切

00:35:39.769 --> 00:35:43.309
所以现在我已经建立了我的客户

00:35:41.839 --> 00:35:45.049
我现在以相同的程序使用它

00:35:43.309 --> 00:35:51.740
要去建立我的网络客户端

00:35:45.049 --> 00:35:56.720
配置让我们进入您的网站

00:35:51.740 --> 00:35:58.750
客户在这里再次删除此喜欢

00:35:56.720 --> 00:36:02.539
我说是一样的

00:35:58.750 --> 00:36:07.039
配置就在那里

00:36:02.539 --> 00:36:09.140
现在我们有了使用权

00:36:07.039 --> 00:36:13.490
使用授权客户，我们将

00:36:09.140 --> 00:36:16.220
去处理程序或没有

00:36:13.490 --> 00:36:23.569
控制器，让我们进入微服务

00:36:16.220 --> 00:36:24.799
服务，就在这里，我只是

00:36:23.569 --> 00:36:26.329
实际上要关闭这些窗口

00:36:24.799 --> 00:36:28.970
因为事情有点

00:36:26.329 --> 00:36:34.930
忙，然后我们要做同样的事情

00:36:28.970 --> 00:36:39.259
我们要解决的事情

00:36:34.930 --> 00:36:41.630
这是客户C好吧，因为

00:36:39.259 --> 00:36:44.000
我刚刚配置的客户端C，您将

00:36:41.630 --> 00:36:47.150
注意那里的GWT GWT身份验证

00:36:44.000 --> 00:36:49.009
如果您不熟悉，可以

00:36:47.150 --> 00:36:51.200
解决身份验证，您可以

00:36:49.009 --> 00:36:53.990
如果您可以直接访问JWT 

00:36:51.200 --> 00:36:55.940
如果您不知道的话就需要它

00:36:53.990 --> 00:36:59.680
在这里，我们有授权的客户

00:36:55.940 --> 00:37:02.960
解决它，然后我要使用它

00:36:59.680 --> 00:37:06.230
好吧，接缝，接缝，接缝程序

00:37:02.960 --> 00:37:08.049
真的在这里以及真的在你

00:37:06.230 --> 00:37:10.940
知道与客户相比

00:37:08.049 --> 00:37:12.769
麦克风UI应用程序并打开客户端

00:37:10.940 --> 00:37:14.450
我的游标是真的

00:37:12.769 --> 00:37:16.910
唯一的不同是客户

00:37:14.450 --> 00:37:18.890
产权授权书

00:37:16.910 --> 00:37:22.609
没有重定向其他所有相同的东西

00:37:18.890 --> 00:37:25.700
现在唯一的一致

00:37:22.609 --> 00:37:28.670
我想指出的是

00:37:25.700 --> 00:37:33.619
我回到应用程序属性

00:37:28.670 --> 00:37:35.569
在这里，所以我们有一个资源服务器

00:37:33.619 --> 00:37:36.720
作为客户，默认

00:37:35.569 --> 00:37:38.670
组态

00:37:36.720 --> 00:37:41.339
用于Spring Boot自动配置

00:37:38.670 --> 00:37:44.670
是用于所有客户端功能的

00:37:41.339 --> 00:37:47.069
将使我们能够登录开放ID连接

00:37:44.670 --> 00:37:48.750
对客户来说很多，所以我不

00:37:47.069 --> 00:37:50.490
想要那个权利，我不，我不想

00:37:48.750 --> 00:37:52.800
启用开放ID Connect，这样我就可以

00:37:50.490 --> 00:37:54.660
覆盖 spring boot 自动配置

00:37:52.800 --> 00:37:58.880
所以我必须指定自己的习惯

00:37:54.660 --> 00:37:58.880
配置，让我们开始吧

00:38:06.730 --> 00:38:11.290
好吧，我们将添加资源或配置

00:38:13.480 --> 00:38:21.920
扩展它，我们将做我们的枫叶网

00:38:17.570 --> 00:38:25.670
安全性，让我们开始吧

00:38:21.920 --> 00:38:31.450
我们的模板随处可见

00:38:25.670 --> 00:38:33.560
对的，所以我们启用了资源服务器

00:38:31.450 --> 00:38:36.590
他们会做一点

00:38:33.560 --> 00:38:38.570
更大，所以我们可以看到所以有一个

00:38:36.590 --> 00:38:40.880
有我们的自定义配置

00:38:38.570 --> 00:38:43.700
几乎就是 spring boot 

00:38:40.880 --> 00:38:46.370
除了-之外，oauth2也会做得很好

00:38:43.700 --> 00:38:47.990
登录，但这正是 Spring 

00:38:46.370 --> 00:38:49.940
 spring boot 会做，但我们想

00:38:47.990 --> 00:38:52.450
覆盖它删除所有要登录，因为

00:38:49.940 --> 00:38:57.100
我们不想那样做，所以我们去了

00:38:52.450 --> 00:39:03.050
让我们启动让我们重新启动

00:38:57.100 --> 00:39:05.180
微服务b和微服务请参阅I 

00:39:03.050 --> 00:39:09.110
已经开始，但我会再试一次

00:39:05.180 --> 00:39:11.030
只是为了确定，在这一点上我

00:39:09.110 --> 00:39:14.270
应该能够看到所有三个流程

00:39:11.030 --> 00:39:18.130
和之间的所有三个数据

00:39:14.270 --> 00:39:18.130
现在我们来看看三种互动

00:39:20.980 --> 00:39:29.329
如您所见，我们就在那里

00:39:23.900 --> 00:39:31.660
这里的GTI是不同的权利，因为

00:39:29.329 --> 00:39:33.950
我们使用客户凭证grand和

00:39:31.660 --> 00:39:36.170
您可以看到这里的当局

00:39:33.950 --> 00:39:37.819
范围权威看到和大

00:39:36.170 --> 00:39:39.380
这里的区别是主题权利

00:39:37.819 --> 00:39:42.200
谁是此访问令牌的所有者

00:39:39.380 --> 00:39:43.369
好吧，那是客户，这不是我的权利

00:39:42.200 --> 00:39:46.099
因为我使用客户端凭据

00:39:43.369 --> 00:39:48.559
授予这是系统级别的服务

00:39:46.099 --> 00:39:50.630
客户拥有的库存服务

00:39:48.559 --> 00:39:54.440
客户拨打电话的令牌

00:39:50.630 --> 00:39:56.480
对，所以我们走了，那就是

00:39:54.440 --> 00:39:59.869
差不多就是三个微

00:39:56.480 --> 00:40:01.490
服务安全，你不知道

00:39:59.869 --> 00:40:02.990
细粒度的授权，我们要

00:40:01.490 --> 00:40:06.559
接下来，因为我们实际上得到了

00:40:02.990 --> 00:40:08.599
很棒的时间，我们已经建立了

00:40:06.559 --> 00:40:11.270
开放的ID连接，所以现在我们已经完全

00:40:08.599 --> 00:40:13.220
立即保护我们的架构，让我们

00:40:11.270 --> 00:40:16.880
设置更好的谷物授权，因为

00:40:13.220 --> 00:40:19.609
最终您知道微服务

00:40:16.880 --> 00:40:22.640
应该只授权访问令牌

00:40:19.609 --> 00:40:25.549
具有范围的写入或范围

00:40:22.640 --> 00:40:27.680
权限A和微服务B范围

00:40:25.549 --> 00:40:30.650
权限B等，让我们开始吧

00:40:27.680 --> 00:40:33.279
设置那需要做什么，让我们

00:40:30.650 --> 00:40:42.529
让我们做一个就做

00:40:33.279 --> 00:40:45.520
对于微服务a，我们将去我的

00:40:42.529 --> 00:40:45.520
光标分析

00:40:46.750 --> 00:40:50.210
其实没有就不会提供服务

00:40:48.619 --> 00:40:54.740
因为我有一个自定义配置

00:40:50.210 --> 00:40:56.660
在那里，因为我们需要一个习惯

00:40:54.740 --> 00:40:58.190
配置显然是为了设置

00:40:56.660 --> 00:41:04.609
起来，所以我们要去资源服务器

00:40:58.190 --> 00:41:09.349
我将删除它，然后我们将

00:41:04.609 --> 00:41:11.109
这样很好，服务B，所以我们开始

00:41:09.349 --> 00:41:14.119
在这里我们有权利

00:41:11.109 --> 00:41:17.630
我们正在授权任何服务B 

00:41:14.119 --> 00:41:20.599
并且现在具有权限范围B 

00:41:17.630 --> 00:41:22.940
让我们把X放进去

00:41:20.599 --> 00:41:26.260
正确并重新启动，看看会发生什么

00:41:22.940 --> 00:41:29.059
因为维克的期望是

00:41:26.260 --> 00:41:30.710
禁止的权利，因为斧头令牌

00:41:29.059 --> 00:41:32.720
即将到来的权限

00:41:30.710 --> 00:41:32.990
机构B机构C没有

00:41:32.720 --> 00:41:35.750
扔

00:41:32.990 --> 00:41:38.180
 X正确，因此资源服务器应该

00:41:35.750 --> 00:41:43.610
不允许请求通过

00:41:38.180 --> 00:41:46.040
让我们确认一下

00:41:43.610 --> 00:41:47.690
我们去，所以我们有403禁止吧

00:41:46.040 --> 00:41:51.140
那是期望值，所以我们已经

00:41:47.690 --> 00:41:54.410
设置现在查找绿色授权

00:41:51.140 --> 00:42:03.080
我们要把它改回B对

00:41:54.410 --> 00:42:08.600
我们将重新启动，并确保

00:42:03.080 --> 00:42:12.970
事情还在进行，他们

00:42:08.600 --> 00:42:12.970
好的，我们去了

00:42:16.060 --> 00:42:23.240
现在我鼓励你我鼓励你

00:42:20.330 --> 00:42:25.340
看看这个样品，给我

00:42:23.240 --> 00:42:27.680
一些反馈，因为整个目标

00:42:25.340 --> 00:42:29.240
这个例子是因为我有很多

00:42:27.680 --> 00:42:30.860
我有很多问题，正确的做法

00:42:29.240 --> 00:42:34.130
你把所有东西拼凑起来

00:42:30.860 --> 00:42:36.890
一个基本的样本很容易

00:42:34.130 --> 00:42:39.170
样本设置开放式ID Connect或一个

00:42:36.890 --> 00:42:41.660
一个客户端的资源服务器大交易

00:42:39.170 --> 00:42:43.609
这不是现实世界，所以我想要

00:42:41.660 --> 00:42:46.190
更多高级样本，更多

00:42:43.609 --> 00:42:48.500
展示共同点的真实世界

00:42:46.190 --> 00:42:50.540
模式，你知道我有令牌

00:42:48.500 --> 00:42:53.600
交换模式你为什么要使用那个

00:42:50.540 --> 00:42:55.850
模式我的意思是看这里

00:42:53.600 --> 00:43:01.070
对，我在这里有这个令牌

00:42:55.850 --> 00:43:03.710
通过三个范围的权利机构

00:43:01.070 --> 00:43:07.220
管理局B管理局C对，为什么会

00:43:03.710 --> 00:43:11.270
我将访问令牌传递给资源

00:43:07.220 --> 00:43:13.570
没有授权的服务器

00:43:11.270 --> 00:43:16.670
特定范围，例如

00:43:13.570 --> 00:43:18.050
微电路只在乎

00:43:16.670 --> 00:43:21.380
不在乎的权威

00:43:18.050 --> 00:43:23.510
管理局B对，所以最终

00:43:21.380 --> 00:43:26.420
访问令牌的级别更高

00:43:23.510 --> 00:43:30.530
特权权利，这意味着如果获得

00:43:26.420 --> 00:43:33.140
泄漏然后我有更高的访问权限

00:43:30.530 --> 00:43:36.050
如果我现在可以访问所有三个服务

00:43:33.140 --> 00:43:39.410
只有一个访问令牌是你

00:43:36.050 --> 00:43:42.560
知道只有权限才能访问

00:43:39.410 --> 00:43:45.230
特定服务的最小特权

00:43:42.560 --> 00:43:46.789
例如一个访问令牌

00:43:45.230 --> 00:43:48.499
就像客户一样

00:43:46.789 --> 00:43:50.269
 densha的巴生凭证具有的权利

00:43:48.499 --> 00:43:52.640
一个权威就是一个好权威

00:43:50.269 --> 00:43:54.019
对，因为如果泄漏得很好

00:43:52.640 --> 00:43:56.299
您只能访问库存

00:43:54.019 --> 00:43:57.979
服务是对的，如果其他

00:43:56.299 --> 00:43:59.779
访问令牌被泄漏然后很明显

00:43:57.979 --> 00:44:02.929
我可以访问更多并造成更多损失

00:43:59.779 --> 00:44:05.359
对，这就是我喜欢的

00:44:02.929 --> 00:44:07.400
令牌交换模式，它是其中之一

00:44:05.359 --> 00:44:09.459
显然这里的人流我听不到

00:44:07.400 --> 00:44:13.609
今天就来讨论一下

00:44:09.459 --> 00:44:18.049
微服务是正确的，我们会收到

00:44:13.609 --> 00:44:21.109
具有三个三三的访问令牌

00:44:18.049 --> 00:44:23.390
与它相关的范围理想地是我

00:44:21.109 --> 00:44:28.189
甚至想保持安全

00:44:23.390 --> 00:44:31.039
更紧密地交换令牌和

00:44:28.189 --> 00:44:32.900
降级范围访问令牌或

00:44:31.039 --> 00:44:34.789
 JWT看起来几乎一样

00:44:32.900 --> 00:44:38.089
唯一的区别是范围已经

00:44:34.789 --> 00:44:41.140
降级到仅

00:44:38.089 --> 00:44:44.630
目标资源服务器

00:44:41.140 --> 00:44:46.279
授权，因此我将使用此令牌

00:44:44.630 --> 00:44:49.130
交换模式是

00:44:46.279 --> 00:44:50.419
 g-dub其中之一是GWT障碍

00:44:49.130 --> 00:44:53.779
我们正在计划和获得的赠款

00:44:50.419 --> 00:44:56.689
分为五个以传递访问令牌

00:44:53.779 --> 00:44:59.419
我收到的另一个访问令牌

00:44:56.689 --> 00:45:02.989
交换它为较小的范围权利和

00:44:59.419 --> 00:45:04.789
然后调用微服务密钥并查看和

00:45:02.989 --> 00:45:06.709
那是一个很好的权利，我

00:45:04.789 --> 00:45:08.929
喜欢那个，因为你一直在

00:45:06.709 --> 00:45:10.429
如果泄漏，则安全性严格

00:45:08.929 --> 00:45:13.099
再一次，你只能访问那个

00:45:10.429 --> 00:45:15.019
一种服务权，这就是为什么

00:45:13.099 --> 00:45:16.939
令牌中继模式，这就是另一个

00:45:15.019 --> 00:45:18.640
我必须在那里的流动

00:45:16.939 --> 00:45:21.469
特别注意那个

00:45:18.640 --> 00:45:24.140
是的，就像我知道这很方便

00:45:21.469 --> 00:45:26.659
建立一个你知道五个的客户

00:45:24.140 --> 00:45:28.909
范围十个范围，但我们需要这样做

00:45:26.659 --> 00:45:31.489
您有一个访问令牌，其中包含

00:45:28.909 --> 00:45:33.679
强大的功能，方便

00:45:31.489 --> 00:45:35.929
是的，然后您将其转发给所有人

00:45:33.679 --> 00:45:37.400
服务，因为您都知道

00:45:35.929 --> 00:45:39.799
我们将采用它而不是设置

00:45:37.400 --> 00:45:42.049
您所提供服务中的客户

00:45:39.799 --> 00:45:44.150
知道将它换成更多降级的东西

00:45:42.049 --> 00:45:45.919
技巧，但是你要非常小心

00:45:44.150 --> 00:45:47.029
使用令牌中继模式

00:45:45.919 --> 00:45:48.650
绝对是我不会的模式

00:45:47.029 --> 00:45:51.409
除非它在后面

00:45:48.650 --> 00:45:55.219
安全区域内的防火墙和

00:45:51.409 --> 00:45:57.140
你知道这样，但即使如此，你

00:45:55.219 --> 00:45:58.609
只是要小心，我只是想

00:45:57.140 --> 00:46:00.859
就像真的从

00:45:58.609 --> 00:46:04.390
高水平，但你感到自由

00:46:00.859 --> 00:46:08.150
 --检查另外两个流程和

00:46:04.390 --> 00:46:08.479
我做到了我不敢相信的时间

00:46:08.150 --> 00:46:12.200
它

00:46:08.479 --> 00:46:17.799
非常感谢你有一个链接

00:46:12.200 --> 00:46:17.799
那里的回购所以是的，谢谢

00:46:18.130 --> 00:46:23.660
 [音乐] 

