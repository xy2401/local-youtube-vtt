WEBVTT
Kind: captions
Language: zh-Hans

00:00:00.960 --> 00:00:10.559
 [音乐] 

00:00:06.170 --> 00:00:12.900
欢迎大家感谢您参加我的

00:00:10.559 --> 00:00:17.160
在早餐时谈论Java模块

00:00:12.900 --> 00:00:20.220
春季食物，但首先让我

00:00:17.160 --> 00:00:22.890
自我介绍，我叫贾布·科马斯

00:00:20.220 --> 00:00:25.770
我是Java开发人员，在一个小组工作

00:00:22.890 --> 00:00:28.620
 9:00在荷兰，那也是

00:00:25.770 --> 00:00:31.410
非常住在提尔堡市

00:00:28.620 --> 00:00:34.469
在荷兰南部，我去过

00:00:31.410 --> 00:00:38.159
自2002年以来从事专业工作

00:00:34.469 --> 00:00:41.429
自2006年以来，我还从事外部工作

00:00:38.159 --> 00:00:43.859
父亲和丈夫，我喜欢玩

00:00:41.429 --> 00:00:45.449
棋盘游戏不仅使它们漂亮

00:00:43.859 --> 00:00:48.780
叶或图片，但实际上在播放

00:00:45.449 --> 00:00:53.280
他们对我如此了解

00:00:48.780 --> 00:00:54.870
你在这里的模块，所以

00:00:53.280 --> 00:00:58.769
模块系统的当前状态

00:00:54.870 --> 00:01:01.799
他们是在9月推出的

00:00:58.769 --> 00:01:02.280
 2017年大约已经一年零了

00:01:01.799 --> 00:01:06.840
半

00:01:02.280 --> 00:01:10.740
所以我们首先在哪里决斗

00:01:06.840 --> 00:01:12.230
运动很好，我什至已经准备好了

00:01:10.740 --> 00:01:15.590
一开始

00:01:12.230 --> 00:01:19.050
我大多数人都支持模块

00:01:15.590 --> 00:01:21.330
甚至有传言说你可以

00:01:19.050 --> 00:01:22.620
与Gradle一起使用模块我不是

00:01:21.330 --> 00:01:24.570
伟大的小用户，我知道这不是

00:01:22.620 --> 00:01:25.370
官方支持，但显然是

00:01:24.570 --> 00:01:28.050
效果很好

00:01:25.370 --> 00:01:32.600
所以从这个角度来看我们很好

00:01:28.050 --> 00:01:35.280
可以使用它们，我们可以与他们合作，但是

00:01:32.600 --> 00:01:38.010
我们还使用了很多框架

00:01:35.280 --> 00:01:41.550
图书馆显然是通过

00:01:38.010 --> 00:01:44.760
其中的模块实际上很漂亮

00:01:41.550 --> 00:01:46.950
仍然很低，这也与

00:01:44.760 --> 00:01:49.020
他们反过来依赖的课程

00:01:46.950 --> 00:01:51.330
订单，他们正在等待每个

00:01:49.020 --> 00:01:54.780
其他还有其他问题

00:01:51.330 --> 00:01:58.080
那里还没有被很多人采用

00:01:54.780 --> 00:02:02.190
还有像你这样的更糟糕的开发者

00:01:58.080 --> 00:02:05.400
而我当中的领养人真的

00:02:02.190 --> 00:02:07.860
非常低，我做了一个带有模块的项目

00:02:05.400 --> 00:02:10.259
几个月前，我讲过

00:02:07.860 --> 00:02:12.750
从那以后对许多人

00:02:10.259 --> 00:02:14.989
外面没有一个汽车开发商

00:02:12.750 --> 00:02:20.159
他们的项目访问是的，我与

00:02:14.989 --> 00:02:23.189
所以还有一段路要走，但是

00:02:20.159 --> 00:02:25.950
那么阻碍我们前进，为什么我们都没有

00:02:23.189 --> 00:02:27.750
使用Windows，因为我们一直在乞求

00:02:25.950 --> 00:02:29.790
因为它或我们中有些人渴望

00:02:27.750 --> 00:02:37.489
自从它宣布为

00:02:29.790 --> 00:02:40.170
最初是Java 7，实际上有一个

00:02:37.489 --> 00:02:42.090
我最后参加的一些马克的谈话

00:02:40.170 --> 00:02:45.290
那年，他说是的，大多数人都很好

00:02:42.090 --> 00:02:49.919
感觉被认为是在吃蔬菜

00:02:45.290 --> 00:02:52.079
你知道它很健康，但是有

00:02:49.919 --> 00:02:54.840
关于他们的东西，但这些是

00:02:52.079 --> 00:02:57.840
我的孩子，你可以从脸上看出

00:02:54.840 --> 00:03:00.299
有些不对的东西

00:02:57.840 --> 00:03:07.049
不对，我同意他们的看法，因为

00:03:00.299 --> 00:03:11.310
我们爱我们的蔬菜，所以有更多的模块

00:03:07.049 --> 00:03:16.230
更多蔬菜好吧，你喜欢它

00:03:11.310 --> 00:03:19.709
我看到你的脸上有疑问，为什么要做

00:03:16.230 --> 00:03:21.870
您喜欢模块，为此，我想

00:03:19.709 --> 00:03:24.750
带您回到过去

00:03:21.870 --> 00:03:28.079
讲一个小故事，因为去年我

00:03:24.750 --> 00:03:33.299
从我的一个客户开始，他有一个很大的

00:03:28.079 --> 00:03:35.459
旧版应用程序已经存在

00:03:33.299 --> 00:03:37.919
发展约15年

00:03:35.459 --> 00:03:40.349
数百名从事此工作的开发人员

00:03:37.919 --> 00:03:44.250
许多遗产，甚至是

00:03:40.349 --> 00:03:46.949
遗产，有一点

00:03:44.250 --> 00:03:49.049
建筑图片类似于

00:03:46.949 --> 00:03:51.810
您现在在屏幕上看到的东西是

00:03:49.049 --> 00:03:54.419
当然不完全是，但是他们

00:03:51.810 --> 00:03:56.729
很好地隔离了他们的遗留系统

00:03:54.419 --> 00:03:58.560
他们建立的旧框架

00:03:56.729 --> 00:04:00.479
在内部，然后建立一个新的

00:03:58.560 --> 00:04:02.879
大小的架构将是

00:04:00.479 --> 00:04:04.739
分层不是我最喜欢的类型

00:04:02.879 --> 00:04:08.520
建筑，但有一些

00:04:04.739 --> 00:04:11.400
结构但是

00:04:08.520 --> 00:04:15.240
几个小时后，我意识到了这一点

00:04:11.400 --> 00:04:17.420
更精确，所以更多模块

00:04:15.240 --> 00:04:20.250
依赖关系，尤其是依赖关系

00:04:17.420 --> 00:04:23.340
指向各种方向

00:04:20.250 --> 00:04:25.410
从来没有打算在那里

00:04:23.340 --> 00:04:29.700
可以追溯到一切都在绒球中

00:04:25.410 --> 00:04:31.260
文件足够合理，您可以

00:04:29.700 --> 00:04:32.780
不要指望从

00:04:31.260 --> 00:04:37.440
已经有15年的历史了

00:04:32.780 --> 00:04:39.900
不断，但后来我继续

00:04:37.440 --> 00:04:42.780
几周后，我意识到了这一点

00:04:39.900 --> 00:04:46.280
甚至还不完整

00:04:42.780 --> 00:04:50.990
来源结构图

00:04:46.280 --> 00:04:54.990
运行时依赖性甚至更多

00:04:50.990 --> 00:04:57.530
实际上有通过反思的电话

00:04:54.990 --> 00:05:01.230
从最低级别的电阻层开始

00:04:57.530 --> 00:05:03.990
到表面层那么多

00:05:01.230 --> 00:05:06.000
循环依赖是一团糟， 

00:05:03.990 --> 00:05:09.210
这实际上是第一张肖像

00:05:06.000 --> 00:05:11.970
我曾经去过的项目

00:05:09.210 --> 00:05:14.310
一周后重构一小块

00:05:11.970 --> 00:05:17.700
因为那简直是不可能的

00:05:14.310 --> 00:05:19.950
真的是意大利面，所以当我们得到

00:05:17.700 --> 00:05:22.020
我们的团队有机会开始

00:05:19.950 --> 00:05:25.230
在一个新的应用程序上，我认为还可以

00:05:22.020 --> 00:05:27.570
显然这里有些困难

00:05:25.230 --> 00:05:29.130
保持我们的架构，让我们

00:05:27.570 --> 00:05:31.500
看看模块是否可以帮助我们

00:05:29.130 --> 00:05:33.810
所以我们开始的是

00:05:31.500 --> 00:05:34.830
概念验证应用程序和另一个

00:05:33.810 --> 00:05:37.590
团队已经建立

00:05:34.830 --> 00:05:40.740
 Springwood Java 8所以已经

00:05:37.590 --> 00:05:44.280
比我们拥有的要好，但我想

00:05:40.740 --> 00:05:48.630
防止进一步的问题，所以我会

00:05:44.280 --> 00:05:50.640
今天向您展示的是演示，更多

00:05:48.630 --> 00:05:54.330
或与我所做的不太相似

00:05:50.640 --> 00:05:57.230
客户，但在我们去那里之前

00:05:54.330 --> 00:06:00.900
我们将面对的挑战实际上是

00:05:57.230 --> 00:06:02.910
如果您现在面临两个主要挑战

00:06:00.900 --> 00:06:05.960
想要将您的应用程序迁移到两个

00:06:02.910 --> 00:06:08.910
模块首先是拆分包

00:06:05.960 --> 00:06:11.520
拆分包装是具有相同包装的包装

00:06:08.910 --> 00:06:14.190
被超过

00:06:11.520 --> 00:06:16.830
一个模块或您的模块文件

00:06:14.190 --> 00:06:18.720
模块系统现在不允许

00:06:16.830 --> 00:06:21.960
您可能会认为还不错

00:06:18.720 --> 00:06:22.590
我们没有这个问题

00:06:21.960 --> 00:06:24.660
想像

00:06:22.590 --> 00:06:28.620
更大的框架更大的库

00:06:24.660 --> 00:06:31.050
大部分散布在多个罐子中

00:06:28.620 --> 00:06:34.200
他们共享相同的路线

00:06:31.050 --> 00:06:36.060
晚上，有时在那条路

00:06:34.200 --> 00:06:38.370
打包有不同的类

00:06:36.060 --> 00:06:42.380
罐子，这是你第一次甩开

00:06:38.370 --> 00:06:42.380
包装已经存在，所以它真的在那里

00:06:42.680 --> 00:06:49.280
第二个问题或不是一个问题

00:06:46.320 --> 00:06:52.950
本身是自动模块

00:06:49.280 --> 00:06:55.320
自动模块是不是

00:06:52.950 --> 00:06:57.000
实际上模块只是普通的jar文件，但是

00:06:55.320 --> 00:07:00.050
它在您的模块弹出窗口上，所以

00:06:57.000 --> 00:07:03.690
由JVM解释为模块，并且

00:07:00.050 --> 00:07:06.000
它具有几个特性

00:07:03.690 --> 00:07:09.630
默认情况下实例一个自动模块

00:07:06.000 --> 00:07:13.290
出口并向所有检查员开放

00:07:09.630 --> 00:07:15.300
外部世界，它也读取所有

00:07:13.290 --> 00:07:17.280
模块，直到这里没有

00:07:15.300 --> 00:07:21.180
问题太大，只是

00:07:17.280 --> 00:07:24.510
您已经在JDK 8 all上拥有的行为

00:07:21.180 --> 00:07:28.320
这些罐子是这样的

00:07:24.510 --> 00:07:29.940
应该可以用，但是下一个

00:07:28.320 --> 00:07:32.850
一点是一个问题

00:07:29.940 --> 00:07:36.840
因为自动模块的名称

00:07:32.850 --> 00:07:38.460
是从文件名派生的，因此版本

00:07:36.840 --> 00:07:40.290
标识符被去除特殊

00:07:38.460 --> 00:07:44.340
字符被剥离，然后

00:07:40.290 --> 00:07:46.650
您剩下的模块名称是

00:07:44.340 --> 00:07:48.450
从实际的农场线衍生而来

00:07:46.650 --> 00:07:51.510
的神器，你可能会再次

00:07:48.450 --> 00:07:54.270
认为没什么大不了的

00:07:51.510 --> 00:07:56.070
好的，但是你不能超过一个

00:07:54.270 --> 00:08:01.560
与模块路径上的模块相同

00:07:56.070 --> 00:08:03.420
名称和Apache的名称

00:08:01.560 --> 00:08:07.440
 Maven基金会实际上做了一些

00:08:03.420 --> 00:08:10.980
研究，他发现3,500种可能

00:08:07.440 --> 00:08:14.570
在Maven频道11中发生碰撞

00:08:10.980 --> 00:08:17.520
在您自己的内部库之外

00:08:14.570 --> 00:08:20.820
其中一些不是那么有害

00:08:17.520 --> 00:08:22.440
工件ID父级不是

00:08:20.820 --> 00:08:26.130
你会依赖的东西

00:08:22.440 --> 00:08:28.860
图书馆，但实际上是亚军

00:08:26.130 --> 00:08:30.780
工件ID库是

00:08:28.860 --> 00:08:33.350
你会依赖的东西

00:08:30.780 --> 00:08:35.280
库，所以可能有问题

00:08:33.350 --> 00:08:37.620
幸运的是

00:08:35.280 --> 00:08:40.650
一词或防止这种情况的方法

00:08:37.620 --> 00:08:42.360
库维护者，他们可以添加一个

00:08:40.650 --> 00:08:44.640
自动模块名称输入

00:08:42.360 --> 00:08:48.510
清单文件，这是一种表达方式

00:08:44.640 --> 00:08:51.510
好吧，如果我能成为这个模块

00:08:48.510 --> 00:08:53.940
将是我的名字，这样你就可以

00:08:51.510 --> 00:08:56.400
定义一个唯一的模块名称，到现在

00:08:53.940 --> 00:08:59.100
大多数社区都定居下来

00:08:56.400 --> 00:09:00.950
像我们一样反向DNS命名

00:08:59.100 --> 00:09:04.170
与我们的包裹一样

00:09:00.950 --> 00:09:07.680
真正产生的Maven组ID 

00:09:04.170 --> 00:09:10.400
它们的唯一模块名称现在可以了

00:09:07.680 --> 00:09:14.490
从理论上讲，我们将要建立什么

00:09:10.400 --> 00:09:17.040
就像一个场景，我下棋，所以我

00:09:14.490 --> 00:09:19.020
我以为我的牛仔布可以和董事会有关

00:09:17.040 --> 00:09:23.430
我构建的游戏非常简单

00:09:19.020 --> 00:09:25.230
允许您发布和

00:09:23.430 --> 00:09:29.160
获取有关棋盘游戏的一些信息

00:09:25.230 --> 00:09:31.400
当然也很高兴知道

00:09:29.160 --> 00:09:34.440
一些著作值得一玩

00:09:31.400 --> 00:09:37.410
所以我的架构看起来会有些变化

00:09:34.440 --> 00:09:39.600
像这样，关于他们，有一个

00:09:37.410 --> 00:09:43.650
域模块没有依赖性

00:09:39.600 --> 00:09:46.140
任何纯Java然后最重要的是

00:09:43.650 --> 00:09:47.760
有形成

00:09:46.140 --> 00:09:52.200
系统的边界，所以有一个

00:09:47.760 --> 00:09:55.920
带有弹簧数据Mongo的阻力层

00:09:52.200 --> 00:09:59.150
还有一个休息api 

00:09:55.920 --> 00:10:02.490
 Spring Web，然后您看到一个模块

00:09:59.150 --> 00:10:04.560
适用于您的BoardGameGeek客户端

00:10:02.490 --> 00:10:06.870
不知道BoardGameGeek是最大的

00:10:04.560 --> 00:10:09.089
关于棋盘游戏世界的网站有

00:10:06.870 --> 00:10:11.460
有关您可以玩的任何棋盘游戏的信息

00:10:09.089 --> 00:10:15.650
想像和高兴的是他们

00:10:11.460 --> 00:10:18.930
公开我可以通过的XML API 

00:10:15.650 --> 00:10:22.440
他们的棋盘游戏，因为我

00:10:18.930 --> 00:10:24.210
用户很少，最好去

00:10:22.440 --> 00:10:27.240
把书写到别的地方

00:10:24.210 --> 00:10:29.790
它提供了很好的演示效果，因此对于DEP 

00:10:27.240 --> 00:10:31.200
模块取决于雅可比和我

00:10:29.790 --> 00:10:34.110
使用开放式框架有一个休息的客户

00:10:31.200 --> 00:10:35.670
然后我当然想要我的

00:10:34.110 --> 00:10:37.830
应用程序是安全的，所以有一个

00:10:35.670 --> 00:10:40.440
具有弹簧安全性的安全模块

00:10:37.830 --> 00:10:42.360
通过JSON Web令牌使用某些Web 

00:10:40.440 --> 00:10:44.690
图书馆并将其整合在一起

00:10:42.360 --> 00:10:46.120
那是应用程序模块

00:10:44.690 --> 00:10:51.399
实际取决于

00:10:46.120 --> 00:10:53.339
 spring boot 好吧，那是一个小谎言

00:10:51.399 --> 00:10:56.499
在那张幻灯片上，对此感到抱歉

00:10:53.339 --> 00:10:58.749
所以我做的实际项目是db2 

00:10:56.499 --> 00:11:02.610
我想这会不会更多

00:10:58.749 --> 00:11:06.879
如果我使用漫画和

00:11:02.610 --> 00:11:08.860
不幸的是我已经遇到了问题

00:11:06.879 --> 00:11:12.399
所以显然有一个分裂

00:11:08.860 --> 00:11:16.930
软件包问题和旧版MongoDB 

00:11:12.399 --> 00:11:18.910
客户，起初我以为我会

00:11:16.930 --> 00:11:22.600
解决附近有一个新的商人

00:11:18.910 --> 00:11:24.639
成为异步客户端，并且

00:11:22.600 --> 00:11:28.600
他们没有专门的拆包问题

00:11:24.639 --> 00:11:30.670
解决了，所以我会很好，但是

00:11:28.600 --> 00:11:33.879
事实证明，春季数据Mongo 

00:11:30.670 --> 00:11:36.519
实际上非常依赖

00:11:33.879 --> 00:11:39.639
旧版MongoDB客户程序

00:11:36.519 --> 00:11:41.949
在那里很抱歉，我回到了

00:11:39.639 --> 00:11:46.149
 Spring数据JPA，它正在运行

00:11:41.949 --> 00:11:49.749
与课程后数据库，那么我们如何

00:11:46.149 --> 00:11:51.999
去做你想要的第一件事

00:11:49.749 --> 00:11:54.279
想要迁移您的主机时要做的

00:11:51.999 --> 00:11:57.670
应用到模块是为了让您

00:11:54.279 --> 00:12:01.029
当然是最新的依赖项

00:11:57.670 --> 00:12:03.879
还有很多其他原因

00:12:01.029 --> 00:12:07.959
例如您的安全支持功能

00:12:03.879 --> 00:12:10.300
需要，但正如我所说，在这种情况下

00:12:07.959 --> 00:12:14.410
真正采用的图书馆不多

00:12:10.300 --> 00:12:19.689
还没有，但这是一个持续的过程

00:12:14.410 --> 00:12:21.999
而且更擅长领域

00:12:19.689 --> 00:12:24.790
升级到您最新的依赖项

00:12:21.999 --> 00:12:26.559
消除一些可能的问题

00:12:24.790 --> 00:12:29.860
你会遇到老

00:12:26.559 --> 00:12:31.959
版本，因此只需创建一个

00:12:29.860 --> 00:12:37.290
在您的问题中占用较小的空间

00:12:31.959 --> 00:12:40.389
面对或挑战，所以第2步

00:12:37.290 --> 00:12:42.459
同样的原因运行您的应用程序

00:12:40.389 --> 00:12:45.160
如果您不愿意，请使用JDK 11或更高版本

00:12:42.459 --> 00:12:47.259
已经这样做了，因为有一些

00:12:45.160 --> 00:12:49.209
像这样的棘手的东西

00:12:47.259 --> 00:12:52.629
应用程序取决于Jax P 

00:12:49.209 --> 00:12:54.279
已从Java 11中删除，所以我先

00:12:52.629 --> 00:12:56.050
必须用其他替代它

00:12:54.279 --> 00:13:04.260
目标在这里

00:12:56.050 --> 00:13:07.720
所以我选择了下一步的RI 

00:13:04.260 --> 00:13:10.570
使用jdk 11进一步进入go文件或

00:13:07.720 --> 00:13:13.720
再高一点，这只是为了使

00:13:10.570 --> 00:13:17.200
问题空间较小，所以实际上这些

00:13:13.720 --> 00:13:22.000
步骤只是准备，让我们来看看

00:13:17.200 --> 00:13:25.660
用于准备模块结构

00:13:22.000 --> 00:13:30.339
我的情况下，我们的申请

00:13:25.660 --> 00:13:34.390
继承的实际上是一个大单

00:13:30.339 --> 00:13:37.450
 Maven模块，所以结构很好

00:13:34.390 --> 00:13:40.420
没关系，但是从源代码上看

00:13:37.450 --> 00:13:44.410
还是温暖的模块，我做了什么

00:13:40.420 --> 00:13:46.149
首先是对

00:13:44.410 --> 00:13:48.610
模块化的应用程序，然后

00:13:46.149 --> 00:13:51.250
后来把它分开，我不会那样做

00:13:48.610 --> 00:13:54.610
再次因为它使我正确

00:13:51.250 --> 00:13:58.180
详细信息和所有要运行的问题

00:13:54.610 --> 00:14:01.149
您可能会看到，因为

00:13:58.180 --> 00:14:04.390
一切都将在一个代码中完成， 

00:14:01.149 --> 00:14:07.120
通过拆分您的模块结构

00:14:04.390 --> 00:14:10.810
在实际迁移到Java之前

00:14:07.120 --> 00:14:14.350
您可以逐个模块地学习模块

00:14:10.810 --> 00:14:16.540
一步一步，因此也使您的

00:14:14.350 --> 00:14:21.990
问题空间较小

00:14:16.540 --> 00:14:25.810
迭代，因此从逻辑上讲，第5步是

00:14:21.990 --> 00:14:29.440
添加模块描述符butterman，以便您

00:14:25.810 --> 00:14:31.240
从最底部的模块开始

00:14:29.440 --> 00:14:33.940
您的依赖关系图，因为它具有

00:14:31.240 --> 00:14:36.520
没有依赖性或少量

00:14:33.940 --> 00:14:41.350
依赖关系，所以在这里我们将

00:14:36.520 --> 00:14:44.520
实际看到一些代码，所以让我们切换

00:14:41.350 --> 00:14:44.520
转到我的IDE 

00:14:46.490 --> 00:14:55.620
如您所见，我在这里有一个应用程序

00:14:53.220 --> 00:14:57.840
我已经做好了所有步骤的准备工作

00:14:55.620 --> 00:15:01.500
之前描述过，有一个

00:14:57.840 --> 00:15:03.600
 Gamgee的应用程序模型模块

00:15:01.500 --> 00:15:06.960
客户端域模块持久性

00:15:03.600 --> 00:15:15.140
模块REST API安全性

00:15:06.960 --> 00:15:15.140
并展示它的作用，让我们开始吧

00:15:21.180 --> 00:15:31.550
好吧，所以我首先需要

00:15:25.950 --> 00:15:34.380
登录并获得JSON Web令牌

00:15:31.550 --> 00:15:36.240
邮递员将把它捡起来并套用

00:15:34.380 --> 00:15:38.930
到我要创建的下一个命令

00:15:36.240 --> 00:15:42.000
棋盘游戏，所以这是发布终点

00:15:38.930 --> 00:15:44.520
发送创建的棋盘游戏， 

00:15:42.000 --> 00:15:48.300
它返回结果给我一个ID 

00:15:44.520 --> 00:15:51.540
邮递员会再接一次，所以我可以

00:15:48.300 --> 00:15:53.100
检查我可以找回游戏吗，可以

00:15:51.540 --> 00:15:54.990
如您所见，这里还有

00:15:53.100 --> 00:15:56.940
 BoardGameGeek ID，所以

00:15:54.990 --> 00:15:59.700
他使用的棋盘游戏标识符

00:15:56.940 --> 00:16:01.800
所以我有一个单独的时间点

00:15:59.700 --> 00:16:06.380
工作和周的著作让我们

00:16:01.800 --> 00:16:08.850
看看是否行得通，所以很好

00:16:06.380 --> 00:16:09.620
如果您有这个游戏的七点夜晚

00:16:08.850 --> 00:16:13.890
不相信

00:16:09.620 --> 00:16:15.810
让我们看看这是棋盘游戏

00:16:13.890 --> 00:16:19.230
怪胎好吧，他们也说了七点

00:16:15.810 --> 00:16:23.340
八个所以它实际上工作很酷，但是

00:16:19.230 --> 00:16:27.090
现在我们当然在这里

00:16:23.340 --> 00:16:32.720
迁移，所以从最开始

00:16:27.090 --> 00:16:35.910
您看到的模块图的底部

00:16:32.720 --> 00:16:38.490
智能支持它说好吧曲柄

00:16:35.910 --> 00:16:42.050
我参加足球课程，然后去

00:16:38.490 --> 00:16:42.050
所以反向DNS名称

00:16:46.399 --> 00:16:52.470
这样我的模块名称是唯一的， 

00:16:49.620 --> 00:16:55.980
这是没有任何依赖性的模块

00:16:52.470 --> 00:16:58.680
所以我不必声明任何要求

00:16:55.980 --> 00:17:01.649
在这里，我可以说有两个

00:16:58.680 --> 00:17:04.049
根目录级别的软件包

00:17:01.649 --> 00:17:05.880
和命令包，这些是

00:17:04.049 --> 00:17:09.079
与我的其余申请相关

00:17:05.880 --> 00:17:09.079
所以我要导出这个

00:17:20.710 --> 00:17:27.040
好的，这就是我的第一个模块

00:17:23.800 --> 00:17:35.610
描述它已经完成了，所以现在让我们

00:17:27.040 --> 00:17:40.840
检查我们是否可以弹出它，以便

00:17:35.610 --> 00:17:43.380
现在直接使用Maven让我们看看

00:17:40.840 --> 00:17:43.380
没关系

00:17:45.220 --> 00:17:53.850
它正在运行，哦，我才刚开始

00:17:49.300 --> 00:17:57.130
已经有一个错误，如您所见

00:17:53.850 --> 00:17:59.500
抱怨一些叉子问题

00:17:57.130 --> 00:18:02.410
与我的单元测试有关

00:17:59.500 --> 00:18:04.990
所以这是使用J进行的单元测试

00:18:02.410 --> 00:18:09.420
木星单位显然不会回来

00:18:04.990 --> 00:18:12.220
和Surefire插件有关

00:18:09.420 --> 00:18:14.470
模块并为您提供翻译

00:18:12.220 --> 00:18:16.960
虽然我实际上是最新的

00:18:14.470 --> 00:18:19.180
 Surefire插件的最终版本I 

00:18:16.960 --> 00:18:21.880
现在将其升级到一个里程碑

00:18:19.180 --> 00:18:25.330
释放可以修复的错误的版本

00:18:21.880 --> 00:18:29.020
也将四个计数设置为零，但

00:18:25.330 --> 00:18:31.140
那只是解决方法，让我修复

00:18:29.020 --> 00:18:31.140
那

00:18:35.400 --> 00:18:43.020
好吧，我们去吧，这是一个重要的

00:18:39.480 --> 00:18:47.280
更改，请使用较新的版本

00:18:43.020 --> 00:18:53.210
让我们看看它现在做得如何

00:18:47.280 --> 00:18:53.210
编译并运行测试

00:18:57.410 --> 00:19:04.280
好吧，一直到

00:18:59.430 --> 00:19:04.280
太酷了

00:19:04.730 --> 00:19:12.230
还检查好吗，运行对不起

00:19:14.270 --> 00:19:24.680
还检查它是否仍然运行，那是

00:19:16.970 --> 00:19:27.470
我想做的是启动是的

00:19:24.680 --> 00:19:32.180
起来好吧，让我们简要地经历一下

00:19:27.470 --> 00:19:34.840
看看是否一切正常，是可行的

00:19:32.180 --> 00:19:38.540
可以正常工作

00:19:34.840 --> 00:19:40.550
这是第一步，但这是

00:19:38.540 --> 00:19:42.320
最简单的一种，所以我们现在开始

00:19:40.550 --> 00:19:44.600
下一个模块，还有更多

00:19:42.320 --> 00:19:46.280
复杂的一种证券因此没有

00:19:44.600 --> 00:19:50.810
内部依赖关系，但它具有

00:19:46.280 --> 00:19:52.880
外部依赖，所以我实际上

00:19:50.810 --> 00:19:55.390
准备这一点，因为

00:19:52.880 --> 00:20:00.980
否则它会变得乏味

00:19:55.390 --> 00:20:03.620
如您所见，它有很多

00:20:00.980 --> 00:20:06.170
对几个spring模块的依赖

00:20:03.620 --> 00:20:06.730
正如您要说的那样

00:20:06.170 --> 00:20:10.520
早上

00:20:06.730 --> 00:20:13.100
春天是模块，是的，它不在

00:20:10.520 --> 00:20:15.140
短期路线图，但他们做了什么

00:20:13.100 --> 00:20:16.910
定义了自动模块名称，并且

00:20:15.140 --> 00:20:19.760
他们所有的罐子，这真的很酷

00:20:16.910 --> 00:20:21.730
它可以帮助我成为开发人员

00:20:19.760 --> 00:20:24.710
模块，它不会强迫他们进入

00:20:21.730 --> 00:20:26.480
成为自己的共同模块

00:20:24.710 --> 00:20:30.140
那很好，所以我分开了

00:20:26.480 --> 00:20:32.510
这两个是因为它们实际上是

00:20:30.140 --> 00:20:33.860
从文件名派生并由

00:20:32.510 --> 00:20:35.930
将它们隔离在我的虚拟机中

00:20:33.860 --> 00:20:38.270
描述符，我知道这部分是

00:20:35.930 --> 00:20:40.730
如果这成为一个危险的部分

00:20:38.270 --> 00:20:44.750
模块可能会改变九，我可能

00:20:40.730 --> 00:20:47.870
被伤害，然后有两个包

00:20:44.750 --> 00:20:55.240
那里我都需要出口

00:20:47.870 --> 00:20:58.940
春天还可以，所以可以了哦

00:20:55.240 --> 00:21:00.320
对不起，让我们继续下一个吧

00:20:58.940 --> 00:21:04.010
这是第一个真正拥有的

00:21:00.320 --> 00:21:06.400
内部依赖的BoardGameGeek 

00:21:04.010 --> 00:21:06.400
客户

00:21:08.309 --> 00:21:14.440
好吧，我有点太快了

00:21:13.200 --> 00:21:17.440
好的

00:21:14.440 --> 00:21:21.670
所以在这里再定义一个唯一的名字

00:21:17.440 --> 00:21:25.299
这取决于我的域模块，所以

00:21:21.670 --> 00:21:30.610
也没什么好看的

00:21:25.299 --> 00:21:32.350
取决于经验，再次塔恩没有

00:21:30.610 --> 00:21:36.040
声明了自动模块名称，因此

00:21:32.350 --> 00:21:39.280
分离出来然后只出口

00:21:36.040 --> 00:21:42.490
一包，但里面还有更多

00:21:39.280 --> 00:21:45.070
有根级别的软件包

00:21:42.490 --> 00:21:46.200
一些实现和内部

00:21:45.070 --> 00:21:49.179
接口

00:21:46.200 --> 00:21:52.210
有用于的XML API包

00:21:49.179 --> 00:21:54.070
 Jacobi和实现，但我只

00:21:52.210 --> 00:21:55.809
出口工厂包装是因为

00:21:54.070 --> 00:21:57.549
那是唯一真正的

00:21:55.809 --> 00:21:59.740
要做我其余的应用程序很重要

00:21:57.549 --> 00:22:02.559
这是我唯一想暴露的东西

00:21:59.740 --> 00:22:07.510
春天将要使用的工厂

00:22:02.559 --> 00:22:11.679
为我创造一些豆子，但是

00:22:07.510 --> 00:22:13.870
它也打开包装，打开说

00:22:11.679 --> 00:22:17.290
好的，我想将其提供给

00:22:13.870 --> 00:22:19.270
深层反思两个命令和

00:22:17.290 --> 00:22:21.520
我这样做的原因是因为Jax 

00:22:19.270 --> 00:22:26.919
牛肉需要深

00:22:21.520 --> 00:22:33.760
反射在你的衣服上，好了

00:22:26.919 --> 00:22:37.990
工作，让我们看看它是否仍在运行

00:22:33.760 --> 00:22:40.419
很快就可以了，所以有很多

00:22:37.990 --> 00:22:43.299
思念我们稍后会看到

00:22:40.419 --> 00:22:46.660
这里有很多这些可以到达

00:22:43.299 --> 00:22:49.150
包来自两者的外部绑定

00:22:46.660 --> 00:22:53.080
雅各比在游泳池注入凉爽好吧，所以

00:22:49.150 --> 00:22:56.370
这是一个拆分包问题，因此在

00:22:53.080 --> 00:22:59.650
当前最新版本的支票是2.3 

00:22:56.370 --> 00:23:01.900
他们是拆分包问题，我

00:22:59.650 --> 00:23:05.110
真的很挣扎，我们如何获得

00:23:01.900 --> 00:23:10.390
幸运的是在这个附近

00:23:05.110 --> 00:23:13.480
中央还有一种是的

00:23:10.390 --> 00:23:16.570
这是2.4的内置版本，但是

00:23:13.480 --> 00:23:19.090
 Java EE存在一些问题

00:23:16.570 --> 00:23:20.500
目前正在前进，但这是

00:23:19.090 --> 00:23:25.600
已经在5月4日中央，所以您可以

00:23:20.500 --> 00:23:27.190
完美使用它，让我们修复一下

00:23:25.600 --> 00:23:29.020
这里有几个依赖项

00:23:27.190 --> 00:23:31.059
包括它抱怨的那个

00:23:29.020 --> 00:23:36.690
关于它找不到，我可以

00:23:31.059 --> 00:23:36.690
用一个替换所有这些

00:23:37.860 --> 00:23:44.080
所以你看到包括内置的数字

00:23:41.799 --> 00:23:46.299
说好吧，这不是最终决定

00:23:44.080 --> 00:23:49.179
版本，但在这种情况下对我有用

00:23:46.299 --> 00:23:51.340
我并不是说你应该这样做

00:23:49.179 --> 00:23:55.169
直接在任何生产中

00:23:51.340 --> 00:23:59.250
应用程序，但值得考虑

00:23:55.169 --> 00:23:59.250
这样就可以了

00:24:02.210 --> 00:24:07.759
好吧，现在正在启动，并且在那里

00:24:06.379 --> 00:24:13.759
好酷

00:24:07.759 --> 00:24:21.019
现在我们已经有了某种方式

00:24:13.759 --> 00:24:28.340
最后两个电阻和一个模块

00:24:21.019 --> 00:24:30.860
描述符那里又有一个独特的

00:24:28.340 --> 00:24:33.139
顶部的模块名称取决于我

00:24:30.860 --> 00:24:36.470
域模块取决于Java 

00:24:33.139 --> 00:24:38.029
 Spring Data API的持久性防御

00:24:36.470 --> 00:24:41.119
铅笔的朋友和春天

00:24:38.029 --> 00:24:44.419
交集，它仅导出

00:24:41.119 --> 00:24:46.190
包，它也会打开那个包

00:24:44.419 --> 00:24:48.080
你看我做了一点

00:24:46.190 --> 00:24:49.850
不同的是应该在

00:24:48.080 --> 00:24:52.580
其他模块，但这次我

00:24:49.850 --> 00:24:55.100
明确表示好，我将其深入

00:24:52.580 --> 00:24:57.740
仅反射弹簧芯，仅反射

00:24:55.100 --> 00:25:01.249
冬眠，因为这是我的两个

00:24:57.740 --> 00:25:04.159
知道必须做深刻的思考

00:25:01.249 --> 00:25:06.639
在我的课上，我允许他们但是

00:25:04.159 --> 00:25:14.419
不想别人能够做到这一点

00:25:06.639 --> 00:25:16.990
好，这样就剩下一个模块了

00:25:14.419 --> 00:25:16.990
休息API 

00:25:24.030 --> 00:25:31.530
这实际上是它最小的一个

00:25:26.880 --> 00:25:34.110
它暴露了一个包装，这需要

00:25:31.530 --> 00:25:36.540
再将您的内部模块作为一个

00:25:34.110 --> 00:25:39.900
只需要春季工作就可以了

00:25:36.540 --> 00:25:47.430
它可以导出任何一个包，所以

00:25:39.900 --> 00:25:50.550
真的很容易，所以现在除了我们

00:25:47.430 --> 00:25:54.390
迁移了我们所有的模块及其原因

00:25:50.550 --> 00:25:57.620
为什么尚未迁移您的模块

00:25:54.390 --> 00:25:59.610
因为我将其定义为单独的步骤

00:25:57.620 --> 00:26:01.710
因为直到现在

00:25:59.610 --> 00:26:05.580
我实际上一直在作弊

00:26:01.710 --> 00:26:08.220
因为我将它们编译为模块

00:26:05.580 --> 00:26:10.800
将它们定义为模块，但是我的主要

00:26:08.220 --> 00:26:12.780
应用程序模块还不是模块

00:26:10.800 --> 00:26:15.180
所以我不是主要的

00:26:12.780 --> 00:26:18.120
我只是在班级栏上跑步，所以我

00:26:15.180 --> 00:26:20.910
然后不要从中获得所有好处

00:26:18.120 --> 00:26:26.280
模块系统，但我还不懂

00:26:20.910 --> 00:26:30.560
运行它的障碍，所以最后一步是

00:26:26.280 --> 00:26:30.560
在您的专业中添加模块描述符

00:26:30.770 --> 00:26:35.550
值得单独购买的主要原因

00:26:33.720 --> 00:26:39.840
步骤，因为现在您会遇到

00:26:35.550 --> 00:26:44.360
运行时问题，所以这会有点

00:26:39.840 --> 00:26:44.360
记忆的一点吧，让我们看看

00:26:45.960 --> 00:26:50.340
好吧，我们去

00:26:50.910 --> 00:26:54.180
非常遗憾

00:26:57.430 --> 00:27:00.930
最后一个模块描述符

00:27:03.780 --> 00:27:13.350
好吧，这取决于你，对不起

00:27:08.760 --> 00:27:15.840
哦，是的，同样的问题总是一样的

00:27:13.350 --> 00:27:18.720
 PowerPoint对此表示遗憾

00:27:15.840 --> 00:27:22.830
这件事好吗

00:27:18.720 --> 00:27:25.050
你没有错过很多，所以需要所有

00:27:22.830 --> 00:27:28.890
我的应用程序中的其他模块

00:27:25.050 --> 00:27:31.230
然后是一些Spring依赖项，然后

00:27:28.890 --> 00:27:34.230
它出口到其包装的一个

00:27:31.230 --> 00:27:36.960
举行主要班级，另一个

00:27:34.230 --> 00:27:43.080
保持床罩弹簧结构

00:27:36.960 --> 00:27:46.530
上课好，所以现在我开始上课

00:27:43.080 --> 00:27:52.680
将主要运行让我们看看是否

00:27:46.530 --> 00:27:58.470
让我忘了工作，该死的

00:27:52.680 --> 00:28:02.010
所以现在它在抱怨

00:27:58.470 --> 00:28:03.870
它缺少的另外两件事

00:28:02.010 --> 00:28:06.150
 Java的应用程序模块

00:28:03.870 --> 00:28:08.790
这里也需要持久性，因为

00:28:06.150 --> 00:28:11.730
我使用配置子句注入

00:28:08.790 --> 00:28:14.310
实体经理，所以这实际上是

00:28:11.730 --> 00:28:16.710
我如何到达大部分模块

00:28:14.310 --> 00:28:19.770
描述符内容，您会收到此错误

00:28:16.710 --> 00:28:22.050
他们说alt enter和IntelliJ 

00:28:19.770 --> 00:28:23.640
可以帮你，她还可以

00:28:22.050 --> 00:28:25.350
您的Maven配置中的某些内容

00:28:23.640 --> 00:28:28.710
您也许可以使用它，所以

00:28:25.350 --> 00:28:31.530
将其添加到我的模块描述符中

00:28:28.710 --> 00:28:34.640
最主要的一点

00:28:31.530 --> 00:28:39.780
对我来说不一样，因为我的另一个

00:28:34.640 --> 00:28:43.020
模块使用域中的类

00:28:39.780 --> 00:28:45.060
公共API中的模块，所以我可以说

00:28:43.020 --> 00:28:47.420
好吧，您需要我的申请

00:28:45.060 --> 00:28:52.560
模块，但那真的不公平

00:28:47.420 --> 00:28:54.270
在这种情况下更好的是

00:28:52.560 --> 00:28:57.390
这个演示并不重要，在哪里

00:28:54.270 --> 00:29:00.030
我定义好了，这说需要

00:28:57.390 --> 00:29:03.720
域，但也可以说要求

00:29:00.030 --> 00:29:06.630
传递性的说法，好的，如果您依赖

00:29:03.720 --> 00:29:08.910
我，你也会隐含地依靠

00:29:06.630 --> 00:29:11.070
域模块，这很公平

00:29:08.910 --> 00:29:12.810
选择，因为该类的形式

00:29:11.070 --> 00:29:16.190
主模块是公共API的一部分

00:29:12.810 --> 00:29:16.190
这个模块的

00:29:17.780 --> 00:29:26.370
那应该解决了什么问题

00:29:21.330 --> 00:29:29.630
让我们看看我们现在要去哪里

00:29:26.370 --> 00:29:35.670
汽车之一甚至无法启动

00:29:29.630 --> 00:29:39.750
好的，所以模块又可以了，再次拆分包

00:29:35.670 --> 00:29:44.310
问题，这是一个更大的，所以

00:29:39.750 --> 00:29:46.560
我尝试通过选择解决此问题

00:29:44.310 --> 00:29:48.900
不同的图书馆，但后来我撞了

00:29:46.560 --> 00:29:51.810
进入其他问题，直到我意识到

00:29:48.900 --> 00:29:54.900
这实际上只涉及两个类

00:29:51.810 --> 00:29:57.030
所以我的班级流行音乐上有一个半开

00:29:54.900 --> 00:30:00.360
只有两个类的模块路径

00:29:57.030 --> 00:30:03.060
两者都实现了

00:30:00.360 --> 00:30:06.720
其他模块，并很好地使用Jackson 

00:30:03.060 --> 00:30:10.610
可以自己做，所以有点

00:30:06.720 --> 00:30:10.610
多做点工作，所以我准备了

00:30:16.860 --> 00:30:31.200
好吧，是的，改变了这里所做的

00:30:26.000 --> 00:30:33.960
在我的安全模块中添加了一个新的

00:30:31.200 --> 00:30:36.210
两类包装稍有变化

00:30:33.960 --> 00:30:39.419
在另一堂课中

00:30:36.210 --> 00:30:42.299
有趣但也在模块信息中

00:30:39.419 --> 00:30:47.039
您现在可以看到直接取决于

00:30:42.299 --> 00:30:52.679
杰克逊我本来会依靠的

00:30:47.039 --> 00:30:54.779
无论如何间接地，所以我明白了

00:30:52.679 --> 00:30:56.870
解决了，我知道我们要去哪里

00:30:54.779 --> 00:30:56.870
下一个

00:31:02.420 --> 00:31:09.410
哎哟，好吧，这是你的脸

00:31:07.250 --> 00:31:11.960
非法的exes异常好吧，所以它有

00:31:09.410 --> 00:31:14.980
最与反思有关

00:31:11.960 --> 00:31:16.480
可能我没有再开放

00:31:14.980 --> 00:31:20.620
确实如此

00:31:16.480 --> 00:31:23.870
好吧，这实际上并不容易

00:31:20.620 --> 00:31:24.340
或多或少复制粘贴此以修复

00:31:23.870 --> 00:31:28.220
问题

00:31:24.340 --> 00:31:31.870
所以我的应用程序模块让我们看看

00:31:28.220 --> 00:31:31.870
这不会打开那个

00:31:37.200 --> 00:31:43.950
可以删除它，现在我已经知道

00:31:41.880 --> 00:31:47.370
好吧，这可能会给我预感

00:31:43.950 --> 00:31:51.870
在这里忘记了另一个

00:31:47.370 --> 00:32:01.710
也会想反省

00:31:51.870 --> 00:32:06.710
好的，现在开始了

00:32:01.710 --> 00:32:09.120
再次入围非法exes例外

00:32:06.710 --> 00:32:13.590
好的，对不起

00:32:09.120 --> 00:32:19.950
这不是我的计划的一部分，但这是

00:32:13.590 --> 00:32:25.910
同样的问题，但在当前

00:32:19.950 --> 00:32:25.910
模块，请参阅

00:32:35.960 --> 00:32:40.930
我希望我不要忘记一个

00:32:42.490 --> 00:32:47.290
好吧，不同类型的错误

00:32:45.310 --> 00:32:51.340
永远都是好的，这意味着你不在

00:32:47.290 --> 00:32:54.130
你以前有过的她的类型，所以有一个

00:32:51.340 --> 00:32:57.580
好多了

00:32:54.130 --> 00:33:00.370
哦，班上没有发现例外

00:32:57.580 --> 00:33:01.980
有趣的是，显然我也依赖

00:33:00.370 --> 00:33:16.600
在爪哇稻草上

00:33:01.980 --> 00:33:20.040
好吧，让我们现在也添加它

00:33:16.600 --> 00:33:20.040
下一个

00:33:25.020 --> 00:33:31.530
再次，克劳森的粉丝们，再见，哥们

00:33:28.230 --> 00:33:35.390
这是一个叮咬操作库

00:33:31.530 --> 00:33:40.340
被很多框架使用

00:33:35.390 --> 00:33:47.510
可以哦，不是正确的一个抱歉

00:33:40.340 --> 00:33:47.510
不应该在这里，应该让我们看看

00:33:55.730 --> 00:34:01.880
我不在我的应用程序中，哦，是

00:33:58.679 --> 00:34:08.100
安全对不起好吧不是真的

00:34:01.880 --> 00:34:10.139
是的，对不起，哥们

00:34:08.100 --> 00:34:14.190
还有我想展示的很酷的东西

00:34:10.139 --> 00:34:17.340
这是IntelliJ可以帮助您

00:34:14.190 --> 00:34:20.970
很好地找出它在哪里

00:34:17.340 --> 00:34:23.580
因此，如果我现在单击

00:34:20.970 --> 00:34:25.440
生物学实际上是完全模块化的，所以我

00:34:23.580 --> 00:34:27.690
直接转到的模块描述

00:34:25.440 --> 00:34:32.750
再见哥们，哦，这真的很酷，我明白了

00:34:27.690 --> 00:34:32.750
关于图书馆的更多信息

00:34:34.220 --> 00:34:42.869
所以开始好一点再好一点

00:34:39.780 --> 00:34:46.440
现在那很奇怪，不是这样

00:34:42.869 --> 00:34:49.859
方法异常，还可以

00:34:46.440 --> 00:34:52.350
所以涉及到CG唇

00:34:49.859 --> 00:34:56.879
真的花了我很多时间

00:34:52.350 --> 00:34:59.580
解决并需要大量调试

00:34:56.879 --> 00:35:05.910
找出造成的真正根本原因

00:34:59.580 --> 00:35:09.840
问题，除了错误地春天是

00:35:05.910 --> 00:35:12.210
使用jdk内部的一些功能

00:35:09.840 --> 00:35:17.850
你不应该真正使用

00:35:12.210 --> 00:35:21.869
不再，但是如果你仍然有可能

00:35:17.850 --> 00:35:24.140
然后说基督JDK支持了，我

00:35:21.869 --> 00:35:26.880
真的很喜欢那个模块的名字

00:35:24.140 --> 00:35:30.720
因为你不使用我而尖叫

00:35:26.880 --> 00:35:33.840
不要使用我，但是它可以帮助您

00:35:30.720 --> 00:35:35.640
现在，尽管这个名字已经

00:35:33.840 --> 00:35:38.000
放弃一点保证

00:35:35.640 --> 00:35:40.870
未来可能会想要

00:35:38.000 --> 00:35:47.960
解决了一些问题，但现在还可以

00:35:40.870 --> 00:35:53.170
我们很好，让我们看看我们要去的地方

00:35:47.960 --> 00:35:57.110
现在好了，实际上开始很酷，所以让我们

00:35:53.170 --> 00:36:00.110
看看是否行得通

00:35:57.110 --> 00:36:03.410
首先尝试登录即可正常工作

00:36:00.110 --> 00:36:08.120
接下来，我想创建我的棋盘游戏

00:36:03.410 --> 00:36:13.000
再次因为我擦除了数据库

00:36:08.120 --> 00:36:18.080
奇怪的15和支持的媒体类型

00:36:13.000 --> 00:36:20.660
好吧，我当然看到了

00:36:18.080 --> 00:36:25.070
现在几乎停止表演了，但是这个

00:36:20.660 --> 00:36:27.890
我真的以为我把我甩了

00:36:25.070 --> 00:36:29.960
甚至八个小时的调查

00:36:27.890 --> 00:36:32.000
在找到答案之前，还有更多

00:36:29.960 --> 00:36:35.360
然后我意识到答案是正确的

00:36:32.000 --> 00:36:39.110
在我脸上的日志中，因为如果您

00:36:35.360 --> 00:36:42.020
看这里，它说还可以，警告还可以，感觉

00:36:39.110 --> 00:36:42.910
评估初始化bla bla bla 

00:36:42.020 --> 00:36:48.370
 bla bla 

00:36:42.910 --> 00:36:51.650
好的，一直下来

00:36:48.370 --> 00:36:55.310
我忘了另一个深思的问题

00:36:51.650 --> 00:36:58.370
打开和我的命令包

00:36:55.310 --> 00:37:03.680
实际正在使用的域模块

00:36:58.370 --> 00:37:05.180
在我的REST API中用作类型，所以Jackson 

00:37:03.680 --> 00:37:08.030
想对此做一些深刻的思考

00:37:05.180 --> 00:37:10.130
好吧，这是最大的不同

00:37:08.030 --> 00:37:12.740
在第五步之间

00:37:10.130 --> 00:37:16.510
只是一个接一个地做我的模块

00:37:12.740 --> 00:37:16.510
实际在模块路径上运行

00:37:19.359 --> 00:37:25.940
所以更多的复制/粘贴编码

00:37:23.140 --> 00:37:32.119
摆脱那个

00:37:25.940 --> 00:37:34.749
哦，对不起，我希望你的基地

00:37:32.119 --> 00:37:34.749
错了

00:37:37.280 --> 00:37:45.470
这当然是我的主要模块

00:37:41.780 --> 00:37:47.560
需要打开它嘿我们走了

00:37:45.470 --> 00:37:47.560
再次

00:37:53.400 --> 00:38:03.840
好的开始还是好的，我必须登录并

00:37:59.540 --> 00:38:04.530
现在让我们看看它是否有效

00:38:03.840 --> 00:38:07.890
凉

00:38:04.530 --> 00:38:08.310
所以我也可以检索

00:38:07.890 --> 00:38:12.300
它

00:38:08.310 --> 00:38:19.440
嘿，我可以讨价还价了吗

00:38:12.300 --> 00:38:22.110
嗯，还有一个问题好吗

00:38:19.440 --> 00:38:27.270
和杰克·B好吧，我记得我

00:38:22.110 --> 00:38:33.530
记得我忘记了我曾经做过的一件事

00:38:27.270 --> 00:38:33.530
在这里最初很抱歉棋盘游戏极客

00:38:40.600 --> 00:38:46.840
我改变了Maven的依赖关系，所以我

00:38:44.920 --> 00:38:49.300
现在取决于参考

00:38:46.840 --> 00:38:52.150
 Jax B的实现

00:38:49.300 --> 00:38:53.800
实际上2.4版本是实际的

00:38:52.150 --> 00:39:01.560
模块，所以我必须声明该模块

00:38:53.800 --> 00:39:01.560
名字，所以最后的手指交叉了

00:39:05.910 --> 00:39:14.660
因此登录非常适合我的棋盘游戏

00:39:10.320 --> 00:39:16.260
现在可以直接将作品进行酷

00:39:14.660 --> 00:39:21.120
如果知道了

00:39:16.260 --> 00:39:26.430
我们将其迁移到我们的应用程序中

00:39:21.120 --> 00:39:28.590
现在模块化的应用程序，但对于那些

00:39:26.430 --> 00:39:29.760
读过我摘要的你们当中

00:39:28.590 --> 00:39:33.090
有点惊讶呢

00:39:29.760 --> 00:39:34.950
我也有一个奖金回合

00:39:33.090 --> 00:39:36.480
对Kotlin感兴趣的地方

00:39:34.950 --> 00:39:38.910
同时，第一个问题是

00:39:36.480 --> 00:39:42.080
我想到苏格兰的支持

00:39:38.910 --> 00:39:45.360
模块，是的，从那以后

00:39:42.080 --> 00:39:50.120
 Kotlin版本1.3支持

00:39:45.360 --> 00:39:52.740
模块，真正酷的是

00:39:50.120 --> 00:39:55.740
他们使用相同的模块描述符

00:39:52.740 --> 00:39:56.430
所以首先看起来我们有点奇怪

00:39:55.740 --> 00:40:00.090
有一个模块

00:39:56.430 --> 00:40:02.550
信息Java在您的大洲项目中，但是

00:40:00.090 --> 00:40:05.040
在很多情况下，例如我的情况

00:40:02.550 --> 00:40:08.010
很好，因为您可以使用多种语言

00:40:05.040 --> 00:40:11.550
项目取决于相同的模块

00:40:08.010 --> 00:40:16.940
描述符，所以我们去了

00:40:11.550 --> 00:40:16.940
哦，对不起，我们关闭一下

00:40:18.990 --> 00:40:23.359
所以我们要进入主模块

00:40:24.320 --> 00:40:29.730
遵循我最基本的法律

00:40:26.940 --> 00:40:32.700
申请棋盘游戏课并询问

00:40:29.730 --> 00:40:36.869
 IntelliJ帮我一点忙

00:40:32.700 --> 00:40:38.099
好一点，再往下走哦，不，不，不

00:40:36.869 --> 00:40:44.960
我不是这个意思

00:40:38.099 --> 00:40:44.960
对不起，菜单错误，对不起，来吧

00:40:45.890 --> 00:40:54.390
转换Java文件以很酷的方式调用

00:40:50.730 --> 00:40:58.080
所以让我们在那里看看

00:40:54.390 --> 00:41:02.730
好吧，这边有点冗长

00:40:58.080 --> 00:41:06.210
我们可以摆脱这一切，所以

00:41:02.730 --> 00:41:09.900
很好清理然后摆脱

00:41:06.210 --> 00:41:12.750
进口还可以，所以我有自己的Kotlin 

00:41:09.900 --> 00:41:13.500
上课，好吧，他们不是

00:41:12.750 --> 00:41:15.750
已配置

00:41:13.500 --> 00:41:20.089
哦，请帮我

00:41:15.750 --> 00:41:24.500
 Maven是的，主模块还可以

00:41:20.089 --> 00:41:28.170
所以IntelliJ现在设置了一些东西

00:41:24.500 --> 00:41:33.990
包括一些Maven配置

00:41:28.170 --> 00:41:35.369
我知道这是部分错误，所以我会

00:41:33.990 --> 00:41:36.900
取代这是主要的

00:41:35.369 --> 00:41:41.690
您需要的配置

00:41:36.900 --> 00:41:41.690
混合语言设置

00:41:42.080 --> 00:41:48.599
所以我想展示的另一件事是

00:41:45.839 --> 00:41:51.720
它在这里需要苏格兰

00:41:48.599 --> 00:41:53.849
就像我说的我的主要模块

00:41:51.720 --> 00:41:58.170
不应该依赖任何东西

00:41:53.849 --> 00:41:59.400
可能会感觉到你，但是在哪里

00:41:58.170 --> 00:42:03.060
你可以考虑一下

00:41:59.400 --> 00:42:06.810
实际上与依赖Java相同

00:42:03.060 --> 00:42:09.180
基础，每个模块都隐含地依赖

00:42:06.810 --> 00:42:15.830
在巧克力基础上唯一的区别是

00:42:09.180 --> 00:42:15.830
很明显，好吧，让我们看看

00:42:16.760 --> 00:42:20.510
如果我信守诺言

00:42:26.470 --> 00:42:31.210
好吧，完成需要更长的时间

00:42:29.260 --> 00:42:34.660
现在尤其是因为这是第一个

00:42:31.210 --> 00:42:40.660
运行编译我的Kotlin，但是

00:42:34.660 --> 00:42:45.430
开始，在这里我不会打我的

00:42:40.660 --> 00:42:47.680
结肠课还没有，但是在这里我会并且

00:42:45.430 --> 00:42:55.150
证明整个应用程序仍然

00:42:47.680 --> 00:42:57.430
工作很好，很酷，所以我们知道了

00:42:55.150 --> 00:43:01.060
工作也很好，所以如果你想使用

00:42:57.430 --> 00:43:05.650
模块并一起调用不会

00:43:01.060 --> 00:43:08.470
工作到我的演讲快结束了，所以让我们

00:43:05.650 --> 00:43:10.030
如果你想包一点

00:43:08.470 --> 00:43:12.130
迁移，我不是说你

00:43:10.030 --> 00:43:14.579
射这只狗绝对不是

00:43:12.130 --> 00:43:18.730
拍摄是否迁移更多

00:43:14.579 --> 00:43:22.060
如果想做的话该怎么办

00:43:18.730 --> 00:43:25.300
 Irma所以从最低的开始

00:43:22.060 --> 00:43:26.980
模块在您的依赖图中

00:43:25.300 --> 00:43:28.480
那是最简单的开始

00:43:26.980 --> 00:43:33.460
最少的依赖关系使您

00:43:28.480 --> 00:43:34.329
走，那样你就可以走

00:43:33.460 --> 00:43:37.569
反复地

00:43:34.329 --> 00:43:40.420
在您的应用程序之外

00:43:37.569 --> 00:43:42.849
这是您每一步的全部

00:43:40.420 --> 00:43:45.390
特别是从你那一刻起

00:43:42.849 --> 00:43:48.880
实际从电机路径运行

00:43:45.390 --> 00:43:51.700
因为您会遇到运行时问题

00:43:48.880 --> 00:43:53.770
你没想到的，如果你没有

00:43:51.700 --> 00:43:56.200
在部署到之前测试所有路径

00:43:53.770 --> 00:44:01.540
然后生产当然是您的客户

00:43:56.200 --> 00:44:05.109
将会遇到这些问题，对于

00:44:01.540 --> 00:44:10.420
更豪华的他们有答案，所以

00:44:05.109 --> 00:44:13.300
这就是我保留415和

00:44:10.420 --> 00:44:16.359
支持中的媒体类型示例是为了显示

00:44:13.300 --> 00:44:18.250
你那个图书馆或香水

00:44:16.359 --> 00:44:21.040
取决于可能实际上把你扔

00:44:18.250 --> 00:44:24.730
错误的错误信息，而

00:44:21.040 --> 00:44:26.560
 JVM发出非常好的输出

00:44:24.730 --> 00:44:29.650
出现模块系统问题

00:44:26.560 --> 00:44:32.050
因此，请务必先检查您的日志

00:44:29.650 --> 00:44:35.210
迁移到模块，您得到

00:44:32.050 --> 00:44:38.599
意外错误很可能

00:44:35.210 --> 00:44:41.869
模块系统让我烦恼，然后

00:44:38.599 --> 00:44:45.140
是的，不好意思，但还是

00:44:41.869 --> 00:44:49.010
有一个先驱，所以如果你想去

00:44:45.140 --> 00:44:51.440
是的，你需要移动它，你需要

00:44:49.010 --> 00:44:53.690
加强一点工作

00:44:51.440 --> 00:44:58.900
解决您可能不会遇到的问题

00:44:53.690 --> 00:45:02.150
期望如此，这是一场比赛

00:44:58.900 --> 00:45:04.160
感谢您参加，如果你想看看

00:45:02.150 --> 00:45:08.060
我的演示代码就在上面

00:45:04.160 --> 00:45:10.430
起床，如果你想与我联系见我

00:45:08.060 --> 00:45:14.150
在Twitter上给我发送电子邮件，但更多

00:45:10.430 --> 00:45:17.510
最好来找我聊天

00:45:14.150 --> 00:45:19.760
一些问题，也请离开

00:45:17.510 --> 00:45:21.830
您的反馈积极反馈

00:45:19.760 --> 00:45:26.260
绝对不是负面的反馈，这样

00:45:21.830 --> 00:45:27.930
我可以改善下一次的运行谢谢

00:45:26.260 --> 00:45:34.700
 [掌声] 

00:45:27.930 --> 00:45:34.700
 [音乐] 

