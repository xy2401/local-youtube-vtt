WEBVTT
Kind: captions
Language: zh-Hans

00:00:00.900 --> 00:00:10.650
 [音乐] 

00:00:07.130 --> 00:00:14.070
是的，首先感谢大家

00:00:10.650 --> 00:00:15.960
来参加这个演讲，我知道我有

00:00:14.070 --> 00:00:17.460
我认为您的竞争很激烈

00:00:15.960 --> 00:00:24.539
吸入器是在礼堂时

00:00:17.460 --> 00:00:28.410
所以，我要谈一点

00:00:24.539 --> 00:00:31.260
关于今天的云平台或类似的东西

00:00:28.410 --> 00:00:33.749
可用于部署的平台

00:00:31.260 --> 00:00:35.569
您的春季心情微服务，所以这

00:00:33.749 --> 00:00:38.370
并不是真正的深入讨论

00:00:35.569 --> 00:00:41.010
 spring boot 或Spring 技术，这是

00:00:38.370 --> 00:00:44.489
有关以下内容的部署和运行时的更多信息

00:00:41.010 --> 00:00:46.769
这些成分我叫马蒂亚斯

00:00:44.489 --> 00:00:49.499
这是我的推特手柄

00:00:46.769 --> 00:00:49.889
非常积极地使用这个，所以我总是

00:00:49.499 --> 00:00:51.659
快乐

00:00:49.889 --> 00:00:55.760
如果我得到新的追随者并得到

00:00:51.659 --> 00:00:59.219
人们遵循的灵感

00:00:55.760 --> 00:01:04.489
那是我的两个不同版本

00:00:59.219 --> 00:01:08.130
左边的是Cloud Foundry 

00:01:04.489 --> 00:01:10.829
大使和聚会组织者版本

00:01:08.130 --> 00:01:13.259
所以我正在组织Cloud Foundry 

00:01:10.829 --> 00:01:16.859
聚集该地区的用户社区

00:01:13.259 --> 00:01:18.600
德国斯图加特的地图

00:01:16.859 --> 00:01:20.100
来自德国南部的任何人

00:01:18.600 --> 00:01:22.679
房间还好

00:01:20.100 --> 00:01:24.719
下周有个聚会，你

00:01:22.679 --> 00:01:28.350
所有被邀请参加的人

00:01:24.719 --> 00:01:30.749
有足够的自由来，如果我是

00:01:28.350 --> 00:01:33.270
不在Cloud Foundry上做事

00:01:30.749 --> 00:01:36.210
 kubernetes或其中的平台

00:01:33.270 --> 00:01:39.270
社区工作我有固定的日常工作

00:01:36.210 --> 00:01:44.310
作为一家名为Nova的公司的顾问

00:01:39.270 --> 00:01:46.560
我试图帮助客户获取技术的地方

00:01:44.310 --> 00:01:49.200
将他们的工作负载转移到云端

00:01:46.560 --> 00:01:53.219
例如新的实现或迁移

00:01:49.200 --> 00:01:57.240
并就他们的建议给他们

00:01:53.219 --> 00:02:02.819
策略，所以简要谈一下Nova 

00:01:57.240 --> 00:02:07.380
我们主要在德国以外运营的技术

00:02:02.819 --> 00:02:09.299
我们大约有250到300 

00:02:07.380 --> 00:02:10.830
雇用多年主要是围绕软件

00:02:09.299 --> 00:02:13.230
发展现代自我发展

00:02:10.830 --> 00:02:14.340
敏捷方法论以及一切

00:02:13.230 --> 00:02:16.620
包围

00:02:14.340 --> 00:02:21.270
当然包括云原生

00:02:16.620 --> 00:02:23.940
方面，所以我昨天编辑了这张幻灯片

00:02:21.270 --> 00:02:27.900
并尝试强调我们也有一个

00:02:23.940 --> 00:02:29.520
现在在西班牙格拉纳达开设分公司

00:02:27.900 --> 00:02:31.290
今天早上我做了主题演讲

00:02:29.520 --> 00:02:32.849
德国人多于西班牙人

00:02:31.290 --> 00:02:36.959
在会议上，我可以强调

00:02:32.849 --> 00:02:38.580
所有其他人以及一般回报

00:02:36.959 --> 00:02:41.730
总部，但西班牙分公司是

00:02:38.580 --> 00:02:43.019
增加，如果有的话

00:02:41.730 --> 00:02:44.700
想要更多有关什么的信息

00:02:43.019 --> 00:02:47.940
我们正在做的事情以及我们正在做的事情

00:02:44.700 --> 00:02:49.650
以后随时可以ping我，现在我

00:02:47.940 --> 00:02:56.250
真的不想进得太多

00:02:49.650 --> 00:03:00.690
有关我们所处位置的详细信息

00:02:56.250 --> 00:03:04.950
会给一些介绍

00:03:00.690 --> 00:03:07.590
讲故事并告诉你我的意思

00:03:04.950 --> 00:03:10.230
打算演出，所以我很确定

00:03:07.590 --> 00:03:12.360
你们当中有人看过云

00:03:10.230 --> 00:03:15.540
一个或多个抽象层图

00:03:12.360 --> 00:03:18.060
我想展示的其他形式

00:03:15.540 --> 00:03:19.940
这基本上是什么

00:03:18.060 --> 00:03:24.359
可以放置您的各个层次

00:03:19.940 --> 00:03:26.340
用软件来处理您的工作负载以及什么样的工作

00:03:24.359 --> 00:03:27.870
有什么区别呢

00:03:26.340 --> 00:03:29.910
从虚拟机开始

00:03:27.870 --> 00:03:32.310
他们今天来集装箱

00:03:29.910 --> 00:03:35.459
或“少用服务器”一词非常常用

00:03:32.310 --> 00:03:37.319
通常，基本上有

00:03:35.459 --> 00:03:39.930
倾向于工作越远

00:03:37.319 --> 00:03:41.549
缩小标签尺寸

00:03:39.930 --> 00:03:43.139
您的工作量和

00:03:41.549 --> 00:03:44.760
基础设施增加，您必须

00:03:43.139 --> 00:03:46.889
选择启动时间并更紧凑

00:03:44.760 --> 00:03:49.880
耦合和凝聚力越远

00:03:46.889 --> 00:03:52.410
堆栈中有更多抽象

00:03:49.880 --> 00:03:54.720
您的灵活性和分布

00:03:52.410 --> 00:03:57.329
您的服务，我现在不谈

00:03:54.720 --> 00:04:00.060
关于虚拟机和

00:03:57.329 --> 00:04:02.549
今天可以运作，所以我会坚持下去

00:04:00.060 --> 00:04:06.359
到容器和应用程序层

00:04:02.549 --> 00:04:08.940
为了证明这一点

00:04:06.359 --> 00:04:12.600
我可以部署和运行Springwood 

00:04:08.940 --> 00:04:15.780
我要使用的那些层上的工作负载

00:04:12.600 --> 00:04:19.440
 Cloud Foundry和

00:04:15.780 --> 00:04:22.590
谈到Kubernetes，我知道

00:04:19.440 --> 00:04:24.900
这不是一个平台会议， 

00:04:22.590 --> 00:04:28.020
房间一直在工作

00:04:24.900 --> 00:04:29.539
与云代工厂，这是几个

00:04:28.020 --> 00:04:34.229
谁在使用kubernetes 

00:04:29.539 --> 00:04:35.880
那是我开始的更多

00:04:34.229 --> 00:04:37.560
像一个半的谈论

00:04:35.880 --> 00:04:39.300
年前或类似的东西然后

00:04:37.560 --> 00:04:41.630
与cubrir完全相反

00:04:39.300 --> 00:04:44.400
就像一开始一样

00:04:41.630 --> 00:04:47.509
但是它的采用率非常高

00:04:44.400 --> 00:04:50.009
而且它的增长非常快，所以

00:04:47.509 --> 00:04:52.710
无论哪种方式，如果您不熟悉

00:04:50.009 --> 00:04:55.949
有一个我要覆盖所有

00:04:52.710 --> 00:04:59.310
以及确保我得到的基础知识

00:04:55.949 --> 00:05:01.020
你们所有人都在船上，所以先一点

00:04:59.310 --> 00:05:03.720
如果您比较这两个则免责声明

00:05:01.020 --> 00:05:04.949
您也可以比较的平台

00:05:03.720 --> 00:05:07.020
各个级别，所以我不会

00:05:04.949 --> 00:05:09.210
今天说的差不多

00:05:07.020 --> 00:05:10.919
一切都在容器水平以下

00:05:09.210 --> 00:05:13.860
这不像您需要多少个虚拟机

00:05:10.919 --> 00:05:15.780
安装集群以及什么

00:05:13.860 --> 00:05:19.050
我会喜欢

00:05:15.780 --> 00:05:20.699
平台主题，我也不会

00:05:19.050 --> 00:05:23.669
想要像特定于供应商一样进入

00:05:20.699 --> 00:05:28.590
像Google与

00:05:23.669 --> 00:05:29.880
 Amazon Kubernetes或PCF与SAPT对比

00:05:28.590 --> 00:05:31.919
铸造厂或我真正想要的任何东西

00:05:29.880 --> 00:05:34.800
坚持喜欢开源核心

00:05:31.919 --> 00:05:36.360
只是展示平台如何运作

00:05:34.800 --> 00:05:39.960
表现，当你基本上

00:05:36.360 --> 00:05:42.870
期待他们，是的，这就是我

00:05:39.960 --> 00:05:46.500
想在这里说的是

00:05:42.870 --> 00:05:49.349
像我太太一样或先生开发商与

00:05:46.500 --> 00:05:50.820
我可以做的某种应用

00:05:49.349 --> 00:05:52.080
今天没有通用的方式

00:05:50.820 --> 00:05:54.810
当然像斯普林伍德

00:05:52.080 --> 00:05:57.810
应用程序，然后所有的东西

00:05:54.810 --> 00:05:59.849
如果您想在一个

00:05:57.810 --> 00:06:02.969
云平台，所以第一步基本上

00:05:59.849 --> 00:06:04.889
部署它有多容易

00:06:02.969 --> 00:06:06.990
是我必须采取的步骤

00:06:04.889 --> 00:06:10.550
使应用程序在那里运行

00:06:06.990 --> 00:06:13.370
很简单，那就是一旦运行

00:06:10.550 --> 00:06:16.380
如果应用程序崩溃怎么办

00:06:13.370 --> 00:06:18.419
平台有多快或如何

00:06:16.380 --> 00:06:20.370
恢复那个，我需要做什么

00:06:18.419 --> 00:06:23.340
为了使平台做到这一点

00:06:20.370 --> 00:06:25.680
那么扩大规模是其中的大事之一

00:06:23.340 --> 00:06:30.210
在云技术中如此容易

00:06:25.680 --> 00:06:32.460
我扩展，平台如何运作

00:06:30.210 --> 00:06:33.870
当然帮我这个日志

00:06:32.460 --> 00:06:35.940
开发者非常重要

00:06:33.870 --> 00:06:37.860
角度，所以一旦那是我的事

00:06:35.940 --> 00:06:41.279
是错误的，我该如何了解

00:06:37.860 --> 00:06:42.270
我的应用程序可以做什么和服务

00:06:41.279 --> 00:06:45.540
绑定

00:06:42.270 --> 00:06:47.220
意思是通常我不会

00:06:45.540 --> 00:06:49.530
只是推送应用程序代码

00:06:47.220 --> 00:06:51.360
在这里有一个针对neo4j的会议

00:06:49.530 --> 00:06:53.220
还有其他一些服务，例如后端

00:06:51.360 --> 00:06:55.860
消息传递和数据库服务

00:06:53.220 --> 00:07:00.270
您可以依附的方式如此简单或

00:06:55.860 --> 00:07:02.850
复杂的是停机时间为零

00:07:00.270 --> 00:07:03.900
部署基本上意味着如果我有一个

00:07:02.850 --> 00:07:05.700
特定版本的应用程序

00:07:03.900 --> 00:07:09.540
正在运行，我想部署一个新的

00:07:05.700 --> 00:07:11.460
版本有可能

00:07:09.540 --> 00:07:12.810
过渡到最终用户

00:07:11.460 --> 00:07:14.520
不会注意到我已经部署

00:07:12.810 --> 00:07:16.260
基本上以某种方式

00:07:14.520 --> 00:07:17.700
像Amazon或Facebook一样

00:07:16.260 --> 00:07:19.650
时间，以便您刷新浏览器

00:07:17.700 --> 00:07:21.480
突然有些改变了

00:07:19.650 --> 00:07:23.760
您会获得一些新内容，但是没有

00:07:21.480 --> 00:07:26.190
明显的停机时间或

00:07:23.760 --> 00:07:28.050
应用的东西也是

00:07:26.190 --> 00:07:31.050
在春季有关的佛陀是

00:07:28.050 --> 00:07:33.810
喜欢外部配置，那我该怎么办

00:07:31.050 --> 00:07:36.180
访问我的Springwood属性如何

00:07:33.810 --> 00:07:39.590
我修改它们并在

00:07:36.180 --> 00:07:43.260
应用程序的运行时，所以我得到了

00:07:39.590 --> 00:07:45.150
大约45分钟即可完成我尝试的所有操作

00:07:43.260 --> 00:07:48.030
展示大多数事情，我无法

00:07:45.150 --> 00:07:51.510
保证我能展示所有这些，但是

00:07:48.030 --> 00:07:53.640
让我们来看看那些

00:07:51.510 --> 00:07:55.500
我还没举手

00:07:53.640 --> 00:07:59.310
只想简单介绍一下

00:07:55.500 --> 00:08:02.430
关于这两种技术，所以云

00:07:59.310 --> 00:08:05.790
铸造我是说如果考虑春天

00:08:02.430 --> 00:08:08.190
作为更容易启动的东西

00:08:05.790 --> 00:08:09.990
构建一个需要

00:08:08.190 --> 00:08:10.920
开发人员还有很多东西

00:08:09.990 --> 00:08:12.960
使事情变得容易

00:08:10.920 --> 00:08:14.700
基本上Cloud Foundry最初是

00:08:12.960 --> 00:08:16.410
被认为是对...的扩展

00:08:14.700 --> 00:08:20.040
使事情在云上也非常容易

00:08:16.410 --> 00:08:23.310
平台角度，然后仍然

00:08:20.040 --> 00:08:25.700
遵循12要素应用

00:08:23.310 --> 00:08:29.010
准则，这样您就可以看到

00:08:25.700 --> 00:08:31.260
在应用程序和服务之间划分

00:08:29.010 --> 00:08:33.240
然后Cloud Foundry将对待那些

00:08:31.260 --> 00:08:36.390
不同的应用程序和服务

00:08:33.240 --> 00:08:38.910
在应用程序方面，您的意思是这样

00:08:36.390 --> 00:08:41.400
部署您希望无状态的

00:08:38.910 --> 00:08:43.440
应用程序和所有状态已满

00:08:41.400 --> 00:08:45.810
这样的持久性和

00:08:43.440 --> 00:08:49.590
消息传递和其他遗留事物

00:08:45.810 --> 00:08:52.740
被视为服务，因此一旦您

00:08:49.590 --> 00:08:54.960
部署应用程序的著名命令

00:08:52.740 --> 00:08:56.190
称为CF Push，基本上

00:08:54.960 --> 00:08:58.920
发送贴花

00:08:56.190 --> 00:09:01.230
代码到平台，基本上之后

00:08:58.920 --> 00:09:03.540
我基本上应该画一条线

00:09:01.230 --> 00:09:05.130
所以这基本上是直到这

00:09:03.540 --> 00:09:07.080
开发人员真的看到了一切

00:09:05.130 --> 00:09:09.930
下面是平台的功能， 

00:09:07.080 --> 00:09:11.910
你不一定会那样看

00:09:09.930 --> 00:09:15.120
然后，Cloud Foundry将提出一个

00:09:11.910 --> 00:09:16.380
所谓的构建选择是十

00:09:15.120 --> 00:09:18.150
因为就像那样的运行时

00:09:16.380 --> 00:09:19.980
适用于Springwood或

00:09:18.150 --> 00:09:22.200
 Java，这基本上是一个JRE， 

00:09:19.980 --> 00:09:24.180
将这两个组件捆绑在一起， 

00:09:22.200 --> 00:09:26.160
所谓的液滴，并建立一个容器

00:09:24.180 --> 00:09:27.720
此容器中的图像

00:09:26.160 --> 00:09:31.080
图像将可以像轻松

00:09:27.720 --> 00:09:33.600
开始并扩展，依此类推

00:09:31.080 --> 00:09:35.520
最终用户不会接触到

00:09:33.600 --> 00:09:37.470
容器技术，因此使用

00:09:35.520 --> 00:09:40.320
里面的容器，但没有

00:09:37.470 --> 00:09:42.030
真的把它暴露在外面

00:09:40.320 --> 00:09:44.400
为了附加服务，有一个

00:09:42.030 --> 00:09:46.320
命令称为pine服务，然后您

00:09:44.400 --> 00:09:48.750
基本上可以交易您的服务，而您

00:09:46.320 --> 00:09:51.210
调用该命令和那个松树服务

00:09:48.750 --> 00:09:54.240
然后命令将注入属性

00:09:51.210 --> 00:09:57.720
例如JDBC或URL或

00:09:54.240 --> 00:10:00.750
凭据进入应用程序，因此

00:09:57.720 --> 00:10:03.930
开发人员不必

00:10:00.750 --> 00:10:05.730
最后手动配置

00:10:03.930 --> 00:10:10.380
最终用户将获得诸如URL之类的路由

00:10:05.730 --> 00:10:12.480
可以访问该应用程序，所以我的意思是

00:10:10.380 --> 00:10:16.200
这很简单

00:10:12.480 --> 00:10:17.580
任何好的问题，我是说你

00:10:16.200 --> 00:10:20.700
当然可以总是打断我， 

00:10:17.580 --> 00:10:22.230
如果不清楚，我就是

00:10:20.700 --> 00:10:25.320
很高兴回到几步并插入

00:10:22.230 --> 00:10:27.630
现在更多地看我的kubernetes 

00:10:25.320 --> 00:10:31.490
将该图分成两部分

00:10:27.630 --> 00:10:33.710
步骤，因为你们大多数人都知道

00:10:31.490 --> 00:10:36.960
您不能部署应用程序

00:10:33.710 --> 00:10:39.420
直接到普通的kubernetes这样

00:10:36.960 --> 00:10:41.490
凯尔西·高塔（Kelsey Hightower）喜欢先生。开发商

00:10:39.420 --> 00:10:43.500
 Google的Kubernetes倡导者说

00:10:41.490 --> 00:10:45.930
像您的kubernetes门票

00:10:43.500 --> 00:10:48.360
平台是一个容器，这意味着

00:10:45.930 --> 00:10:51.810
你必须先去集装箱

00:10:48.360 --> 00:10:54.930
可以在kubernetes上运行代码

00:10:51.810 --> 00:10:56.370
所以这可以通过简单的方式完成

00:10:54.930 --> 00:10:59.220
在带有docker文件的位置

00:10:56.370 --> 00:11:01.440
指定得好我有一个基本图像

00:10:59.220 --> 00:11:02.940
一个运行时半个应用程序，以及

00:11:01.440 --> 00:11:04.920
我把所有东西包起来

00:11:02.940 --> 00:11:07.500
容器映像，这就是码头工人

00:11:04.920 --> 00:11:09.420
文件将做替代

00:11:07.500 --> 00:11:10.140
选择这样做，如果他们喜欢

00:11:09.420 --> 00:11:11.910
专家层

00:11:10.140 --> 00:11:13.560
意味着您可以附加到您的

00:11:11.910 --> 00:11:16.050
在Springwood建立过程

00:11:13.560 --> 00:11:17.370
会像容器图像一样下降

00:11:16.050 --> 00:11:20.160
 Google有个东西叫

00:11:17.370 --> 00:11:22.170
基本上包含板条箱的芯片

00:11:20.160 --> 00:11:25.170
包含基于Java代码的图片

00:11:22.170 --> 00:11:28.440
无需像火车头一样奔跑

00:11:25.170 --> 00:11:30.600
塔科守护程序，我不会去那些

00:11:28.440 --> 00:11:32.030
我只是想让你知道

00:11:30.600 --> 00:11:35.130
这不是唯一的方法

00:11:32.030 --> 00:11:37.230
不管你需要什么

00:11:35.130 --> 00:11:39.360
拿出一张图片，你把

00:11:37.230 --> 00:11:42.680
映像到映像注册表中

00:11:39.360 --> 00:11:45.180
 kubernetes可以在以后使用

00:11:42.680 --> 00:11:48.060
这使我们进入kubernetes 

00:11:45.180 --> 00:11:50.160
而且这总是比较棘手

00:11:48.060 --> 00:11:53.610
可视化，因为它包含很多

00:11:50.160 --> 00:11:56.100
组件现在我尝试找到一个

00:11:53.610 --> 00:11:59.400
相当于CF push命令

00:11:56.100 --> 00:12:02.760
是Ken，就像多维数据集CTL运行一样

00:11:59.400 --> 00:12:04.500
但是不推荐使用此命令

00:12:02.760 --> 00:12:07.110
仍然有效，但已弃用

00:12:04.500 --> 00:12:09.180
 CLI的最新版本，所以我要

00:12:07.110 --> 00:12:11.430
无论如何，请尽快更新幻灯片中的内容

00:12:09.180 --> 00:12:14.130
我将以这种方式演示它，并且仍然

00:12:11.430 --> 00:12:17.550
对我来说使用它是有意义的

00:12:14.130 --> 00:12:19.290
这会做很多事情

00:12:17.550 --> 00:12:23.550
我要从下面开始的事情

00:12:19.290 --> 00:12:26.160
低级别，因此可部署的最小

00:12:23.550 --> 00:12:28.260
 Kubernetes中的单位或可处理单位

00:12:26.160 --> 00:12:31.020
是所谓的锅，这是从

00:12:28.260 --> 00:12:33.270
在动物世界中意味着

00:12:31.020 --> 00:12:35.220
锅就像一群鲸鱼， 

00:12:33.270 --> 00:12:38.670
你们可能都知道

00:12:35.220 --> 00:12:41.820
像博士徽标是那只鲸鱼，一壶

00:12:38.670 --> 00:12:45.780
从技术上来说基本上是指一两个男人

00:12:41.820 --> 00:12:47.250
一对多鲸现在这个定义

00:12:45.780 --> 00:12:48.600
基本上将访问该图像

00:12:47.250 --> 00:12:51.120
您将图片推送到的注册表

00:12:48.600 --> 00:12:52.950
在获取图像并开始之前

00:12:51.120 --> 00:12:56.540
这样的容器实例

00:12:52.950 --> 00:13:00.360
可能会启动多个

00:12:56.540 --> 00:13:02.280
在一个锅中的图像容器中，但是

00:13:00.360 --> 00:13:04.980
如我所说，并不总是很有意义

00:13:02.280 --> 00:13:07.140
它是最小的可扩展单位，如果

00:13:04.980 --> 00:13:09.690
你缩放锅，然后缩放所有

00:13:07.140 --> 00:13:10.920
实例在那里，这是东西

00:13:09.690 --> 00:13:12.720
开始时应该注意

00:13:10.920 --> 00:13:14.610
因为如果您开始喜欢建模和

00:13:12.720 --> 00:13:16.140
说好我有这样的网络

00:13:14.610 --> 00:13:18.690
像前端一样的应用程序

00:13:16.140 --> 00:13:19.800
在数据库的后端，我这个锅

00:13:18.690 --> 00:13:21.210
这类事情对我来说很有意义

00:13:19.800 --> 00:13:22.440
要证明那一切，这不是一个

00:13:21.210 --> 00:13:24.029
好主意，因为那时你基本上

00:13:22.440 --> 00:13:26.669
也安排数据库

00:13:24.029 --> 00:13:28.649
不好，所以最后我

00:13:26.669 --> 00:13:31.679
通常说你是否干净

00:13:28.649 --> 00:13:34.979
一对一的无状态应用程序

00:13:31.679 --> 00:13:38.220
容器到锅的映射使

00:13:34.979 --> 00:13:40.649
如果可能的话最有意义

00:13:38.220 --> 00:13:43.199
两个容器可能想要

00:13:40.649 --> 00:13:45.929
在基础文件上共享内容

00:13:43.199 --> 00:13:48.329
系统，是时候这样做了

00:13:45.929 --> 00:13:50.579
如果您将它们分组在锅kubernetes中

00:13:48.329 --> 00:13:52.679
还要确保所有容器

00:13:50.579 --> 00:13:54.629
最终将在相同的

00:13:52.679 --> 00:13:57.359
集群的物理节点，因此它们

00:13:54.629 --> 00:13:59.519
将始终像在同一地点，但如果

00:13:57.359 --> 00:14:00.839
你就像一个干净的松散耦合

00:13:59.519 --> 00:14:03.509
微服务设计，这不应该

00:14:00.839 --> 00:14:04.979
对你很重要，如果你有

00:14:03.509 --> 00:14:06.720
感觉你想分组更多

00:14:04.979 --> 00:14:09.359
一个锅中的容器，那么你应该

00:14:06.720 --> 00:14:12.239
现在可能会质疑您的设计

00:14:09.359 --> 00:14:14.449
下一个重要对象是所谓的

00:14:12.239 --> 00:14:16.439
副本集，顾名思义， 

00:14:14.449 --> 00:14:18.059
副本集负责

00:14:16.439 --> 00:14:20.399
复制基本上是按比例缩放

00:14:18.059 --> 00:14:22.349
这些锅，所以这基本上会在

00:14:20.399 --> 00:14:24.539
最后确保实例数量

00:14:22.349 --> 00:14:27.269
正在运行该配置

00:14:24.539 --> 00:14:29.489
持有，部署是最重要的

00:14:27.269 --> 00:14:32.459
可以假装的关卡对象

00:14:29.489 --> 00:14:34.559
控制多个副本集，这样

00:14:32.459 --> 00:14:35.759
如果您想

00:14:34.559 --> 00:14:38.939
推出您的新版本

00:14:35.759 --> 00:14:41.399
带有新容器的应用程序

00:14:38.939 --> 00:14:43.709
图像或使用新配置

00:14:41.399 --> 00:14:45.419
它会小心启动新的

00:14:43.709 --> 00:14:49.169
副本集开始一个新的花盆，并制作一个

00:14:45.419 --> 00:14:52.679
平稳过渡，以便最终暴露

00:14:49.169 --> 00:14:54.749
应用程序到您的最终视图

00:14:52.679 --> 00:14:56.459
有一些对象称为服务， 

00:14:54.749 --> 00:15:00.389
称为入口的特殊对象

00:14:56.459 --> 00:15:02.819
基本上提供了对

00:15:00.389 --> 00:15:05.639
如果您部署一个

00:15:02.819 --> 00:15:07.709
端口没有其他人可以访问它，然后

00:15:05.639 --> 00:15:09.629
将容器本身移植到

00:15:07.709 --> 00:15:11.970
他们可以看到对方但没有人的港口

00:15:09.629 --> 00:15:14.639
否则，有不同程度的

00:15:11.970 --> 00:15:16.229
服务，所以您可以说这个港口

00:15:14.639 --> 00:15:18.599
只能对中的其他部分可见

00:15:16.229 --> 00:15:20.699
集群这部分也可见

00:15:18.599 --> 00:15:22.829
像有权访问该节点的人

00:15:20.699 --> 00:15:26.220
或者可以像负载一样访问

00:15:22.829 --> 00:15:27.679
外部和所有人的平衡器

00:15:26.220 --> 00:15:31.379
可以连接具有该IP的sess 

00:15:27.679 --> 00:15:33.239
所以最终你可以达到目的

00:15:31.379 --> 00:15:36.569
点，用户最终可以访问

00:15:33.239 --> 00:15:37.860
因此，您已经可以从中看到

00:15:36.569 --> 00:15:40.829
那两个付出

00:15:37.860 --> 00:15:43.589
奶酪是我们将要拥有的一种趋势

00:15:40.829 --> 00:15:45.899
在整个谈话中，有很多

00:15:43.589 --> 00:15:49.230
更多的东西更多的工件

00:15:45.899 --> 00:15:53.310
您可以调整和转变的社区

00:15:49.230 --> 00:15:55.829
并配置它可能非常有用

00:15:53.310 --> 00:15:57.540
但是那个实习生也带来了

00:15:55.829 --> 00:16:00.269
有必要了解你是什么

00:15:57.540 --> 00:16:03.050
之所以这样做，是因为它不会真的

00:16:00.269 --> 00:16:06.120
指导您设置错误的地方

00:16:03.050 --> 00:16:07.769
好吧，所以在我进入演示之前，我的意思是

00:16:06.120 --> 00:16:09.959
这基本上是技术栈

00:16:07.769 --> 00:16:12.540
我试图表明我有春天

00:16:09.959 --> 00:16:16.470
好的应用程序，我将尝试使用

00:16:12.540 --> 00:16:18.209
相同的代码，然后在

00:16:16.470 --> 00:16:19.350
 Cloud Foundry端并行

00:16:18.209 --> 00:16:23.190
就像在码头上

00:16:19.350 --> 00:16:25.320
并在任何一侧来，所以我希望所有

00:16:23.190 --> 00:16:29.730
这是正确的，网络不是

00:16:25.320 --> 00:16:33.860
要让我失望，所以很快

00:16:29.730 --> 00:16:37.140
到底是我的申请

00:16:33.860 --> 00:16:39.209
简单地获取映射，基本上

00:16:37.140 --> 00:16:41.640
返回的实例ID 

00:16:39.209 --> 00:16:44.760
应用这基本上是个主意

00:16:41.640 --> 00:16:46.649
云中扩展实例的数量

00:16:44.760 --> 00:16:48.750
铸造或kubernetes，我用它来

00:16:46.649 --> 00:16:50.880
可视化您是否正在跑步

00:16:48.750 --> 00:16:53.339
多个实例和一个负载均衡器

00:16:50.880 --> 00:16:54.089
基本上可以在

00:16:53.339 --> 00:16:56.370
应用领域

00:16:54.089 --> 00:16:58.410
然后我添加了一个设置来喜欢

00:16:56.370 --> 00:17:02.910
个人资料，这就像住宿

00:16:58.410 --> 00:17:10.020
活动资​​料，所以我要更改

00:17:02.910 --> 00:17:12.959
这个说呼啦，这就是我的职责

00:17:10.020 --> 00:17:14.760
今天的生活编码，所以我写

00:17:12.959 --> 00:17:19.880
为了我自己

00:17:14.760 --> 00:17:22.589
然后我有一个端点

00:17:19.880 --> 00:17:24.870
象征着愚蠢的程序员行为

00:17:22.589 --> 00:17:27.360
它触发系统退出零

00:17:24.870 --> 00:17:30.210
导致de JVM关闭，因此

00:17:27.360 --> 00:17:33.360
是我的混乱的迷你迷你版

00:17:30.210 --> 00:17:34.980
工程，所以我想如果本杰明繁荣

00:17:33.360 --> 00:17:37.049
从今天起他就不会在这里

00:17:34.980 --> 00:17:39.419
同意这一点，但我应该足够

00:17:37.049 --> 00:17:43.500
喜欢象征我想在这里做什么

00:17:39.419 --> 00:17:47.610
现在我正在尝试并肩作战

00:17:43.500 --> 00:17:52.250
首先，我刚刚改变了

00:17:47.610 --> 00:17:54.990
代码，这意味着我必须重建

00:17:52.250 --> 00:17:56.310
这应该不会花很长时间，然后

00:17:54.990 --> 00:17:58.230
虽然事情应该真的很公平

00:17:56.310 --> 00:18:09.450
与我们大多数人熟悉的是

00:17:58.230 --> 00:18:11.340
就像春季会议一样，现在我

00:18:09.450 --> 00:18:13.170
从Cloud Foundry开始

00:18:11.340 --> 00:18:18.300
然后尝试将东西放在

00:18:13.170 --> 00:18:20.280
与社区平行，在云上

00:18:18.300 --> 00:18:23.550
可以使用CF推和

00:18:20.280 --> 00:18:24.960
然后指定char文件或

00:18:23.550 --> 00:18:27.870
您想要的应用程序工件

00:18:24.960 --> 00:18:30.900
你去推动，或者你喜欢把它

00:18:27.870 --> 00:18:33.570
在一个小的Yama文件中，您说还可以

00:18:30.900 --> 00:18:35.310
这是我的宪章

00:18:33.570 --> 00:18:37.230
刚建成，然后我要设置一些

00:18:35.310 --> 00:18:39.360
内存和实例数量并给

00:18:37.230 --> 00:18:41.130
它的名字，所以所有这些都是可选的

00:18:39.360 --> 00:18:44.940
他们Cloud Foundry也会产生

00:18:41.130 --> 00:18:47.550
他们由onaga节奏，但在这个

00:18:44.940 --> 00:18:49.200
情况下，我可以确定

00:18:47.550 --> 00:18:52.410
一切顺利，所以我要检查

00:18:49.200 --> 00:18:54.690
如果我在我所连接的地方，并且只有

00:18:52.410 --> 00:18:55.290
多个不同的环境

00:18:54.690 --> 00:19:01.740
看起来不错

00:18:55.290 --> 00:19:05.580
所以我说CF推送，它将显示为

00:19:01.740 --> 00:19:09.780
该文件并开始上传该代码

00:19:05.580 --> 00:19:12.420
到平台并基本确定

00:19:09.780 --> 00:19:15.510
代码在某个时候指出

00:19:12.420 --> 00:19:18.510
这是一个Java代码，它将下载

00:19:15.510 --> 00:19:21.450
构建包，然后开始创建

00:19:18.510 --> 00:19:25.560
通常需要的那个容器

00:19:21.450 --> 00:19:28.440
一两分钟，与此同时，我们

00:19:25.560 --> 00:19:31.650
可以尝试继续做类似的事情

00:19:28.440 --> 00:19:35.160
 kubernetes方面，正如我所说的， 

00:19:31.650 --> 00:19:38.400
我刚刚编译了该代码，所以我有

00:19:35.160 --> 00:19:40.700
 char文件，因此下一步

00:19:38.400 --> 00:19:45.270
我，但基本上是建立那个容器

00:19:40.700 --> 00:19:48.210
所以看那个码头工人文件是

00:19:45.270 --> 00:19:50.040
基本上我的意思是这可能是

00:19:48.210 --> 00:19:53.340
不同的只是最后的一个样本

00:19:50.040 --> 00:19:55.230
我正在使用像开放的JDK Alpine基地

00:19:53.340 --> 00:19:57.780
图片，然后在其中创建一些目录

00:19:55.230 --> 00:20:00.180
我在那里复制那个char文件， 

00:19:57.780 --> 00:20:01.770
我基本上告诉劝告缠扰者

00:20:00.180 --> 00:20:04.050
所以一旦开始，这就像

00:20:01.770 --> 00:20:05.870
 Java-char是运行该命令的命令

00:20:04.050 --> 00:20:08.850
容器

00:20:05.870 --> 00:20:10.350
这意味着我要建立这个我

00:20:08.850 --> 00:20:14.040
要给它起一个零版本的名字

00:20:10.350 --> 00:20:15.660
一个，然后要拉代码

00:20:14.040 --> 00:20:19.290
通过这些步骤，然后我有

00:20:15.660 --> 00:20:21.620
我的容器映像在本地，所以下一个

00:20:19.290 --> 00:20:24.540
然后将步骤推到

00:20:21.620 --> 00:20:26.130
容器注册表我有一些

00:20:24.540 --> 00:20:28.500
缓存中已准备好的命令

00:20:26.130 --> 00:20:29.970
这样可以节省一些时间，如果

00:20:28.500 --> 00:20:32.460
网络不是太慢，它会

00:20:29.970 --> 00:20:35.790
上载类似于Wi-Fi网络

00:20:32.460 --> 00:20:37.710
今天好像对我很友善20 

00:20:35.790 --> 00:20:41.070
梅格没那么多事

00:20:37.710 --> 00:20:43.440
应该在我的图像注册表中，所以我

00:20:41.070 --> 00:20:45.810
像公众一样使用docker hub 

00:20:43.440 --> 00:20:46.800
如果您在本地运行kubernetes 

00:20:45.810 --> 00:20:48.360
在你的环境中我不会

00:20:46.800 --> 00:20:50.490
建议提高您的形象

00:20:48.360 --> 00:20:52.940
到说话者中心，这基本上意味着

00:20:50.490 --> 00:20:57.200
您必须设置自己的图像注册表

00:20:52.940 --> 00:21:01.140
所以与此同时

00:20:57.200 --> 00:21:16.200
我称其为简单网络，如果我喜欢

00:21:01.140 --> 00:21:19.500
在这个简单的网页上卷曲，是的，你们所有人

00:21:16.200 --> 00:21:26.520
是的，所以欧洲会议如此

00:21:19.500 --> 00:21:28.680
嗯，所以这是我的身份证

00:21:26.520 --> 00:21:30.690
我激活的个人资料是Steph 

00:21:28.680 --> 00:21:34.010
因为那是我之前的个人资料

00:21:30.690 --> 00:21:38.340
说，它说呼啦巴塞罗那，所以如果我

00:21:34.010 --> 00:21:45.440
我现在可以将其放入一段时间

00:21:38.340 --> 00:21:50.790
循环然后对它进行ping操作

00:21:45.440 --> 00:21:53.940
不断，所以我有一个很大的

00:21:50.790 --> 00:22:01.950
屏幕分辨率我可能会改变

00:21:53.940 --> 00:22:04.200
有点抱歉，我按了

00:22:01.950 --> 00:22:06.210
密码错误，好吧，这基本上是

00:22:04.200 --> 00:22:09.810
做某事，我将尝试拆分

00:22:06.210 --> 00:22:15.820
屏幕并在此处放置监视命令

00:22:09.810 --> 00:22:19.809
所以我可以说现在观看CF应用程序简单的网络

00:22:15.820 --> 00:22:23.350
现在这应该告诉我一些事情

00:22:19.809 --> 00:22:24.879
该应用程序正在运行，所以我也

00:22:23.350 --> 00:22:26.499
会使它变小

00:22:24.879 --> 00:22:29.200
这在

00:22:26.499 --> 00:22:30.460
背景还可以，我不能说

00:22:29.200 --> 00:22:34.330
出现在前面，因为前面

00:22:30.460 --> 00:22:36.929
现在我已经被封锁了

00:22:34.330 --> 00:22:40.239
说这正在运行并正在做的事情

00:22:36.929 --> 00:22:41.739
无论如何应该看起来有点不同

00:22:40.239 --> 00:22:49.479
我现在想做的就是

00:22:41.739 --> 00:22:52.349
扮演混乱的猴子，说好吧

00:22:49.479 --> 00:22:56.080
是URL并调用该fail命令

00:22:52.349 --> 00:22:59.499
所以现在这意味着应用程序将

00:22:56.080 --> 00:23:01.690
崩溃，它说好了，它无法解决

00:22:59.499 --> 00:23:03.159
该请求我也可以在这里看到

00:23:01.690 --> 00:23:03.729
每秒钟大约刷新一次

00:23:03.159 --> 00:23:07.119
秒

00:23:03.729 --> 00:23:10.389
那就是这个应用程序现在被关闭了

00:23:07.119 --> 00:23:12.220
再次进入启动模式

00:23:10.389 --> 00:23:16.799
像现在这样几秒钟

00:23:12.220 --> 00:23:19.179
应用程序回来了，所以这是我的

00:23:16.799 --> 00:23:20.919
基本一对一

00:23:19.179 --> 00:23:23.950
我基本上会期望的平台

00:23:20.919 --> 00:23:29.229
我之前说过的我还能做些什么

00:23:23.950 --> 00:23:33.789
我也可以扩展应用程序调用它

00:23:29.229 --> 00:23:36.399
三个实例，然后它将

00:23:33.789 --> 00:23:39.639
升级到新的，所以有两个新的

00:23:36.399 --> 00:23:41.799
开始并尽快建立钉

00:23:39.639 --> 00:23:44.409
将检测到Java进程来了

00:23:41.799 --> 00:23:46.269
 up up成功了，它将把

00:23:44.409 --> 00:23:48.429
将它们放入负载均衡器中，您可以

00:23:46.269 --> 00:23:51.729
现在基本上由那些人看到

00:23:48.429 --> 00:23:55.509
平衡的备用ID 

00:23:51.729 --> 00:23:58.629
这些应用程序之间的负载

00:23:55.509 --> 00:24:00.700
这是两个简单命令所不具备的

00:23:58.629 --> 00:24:05.889
对我来说太难了，现在我也可以

00:24:00.700 --> 00:24:08.619
再次喜欢这个curl命令

00:24:05.889 --> 00:24:10.509
想提交申请，而您

00:24:08.619 --> 00:24:12.940
现在将看到这是一个开始

00:24:10.509 --> 00:24:15.399
因此Cloud Foundry已检测到

00:24:12.940 --> 00:24:17.409
它马上被隔离了

00:24:15.399 --> 00:24:19.029
来自负载平衡机制

00:24:17.409 --> 00:24:21.309
所以最终用户看到的是

00:24:19.029 --> 00:24:23.590
他们永远不会意识到

00:24:21.309 --> 00:24:27.099
有停电我可以做到的

00:24:23.590 --> 00:24:28.840
再来一次，因为这很有趣

00:24:27.099 --> 00:24:33.279
我可以再做一次

00:24:28.840 --> 00:24:35.340
也许再迟早

00:24:33.279 --> 00:24:37.899
好吧，它恢复得很快

00:24:35.340 --> 00:24:39.850
通常应该说应该是

00:24:37.899 --> 00:24:42.970
有可能让它感兴趣好吧我

00:24:39.850 --> 00:24:44.799
崩溃了几次，它

00:24:42.970 --> 00:24:46.450
可能会生我的气，但你仍然

00:24:44.799 --> 00:24:49.059
可以看到这个平台是什么样的

00:24:46.450 --> 00:24:51.610
提供作为恢复机制

00:24:49.059 --> 00:24:53.529
说这是一个失败的组成部分

00:24:51.610 --> 00:24:57.580
想尝试重现同一件事

00:24:53.529 --> 00:25:00.299
在组合器中，所以我也想

00:24:57.580 --> 00:25:05.470
分割我的屏幕并显示一些内容

00:25:00.299 --> 00:25:07.389
所以我要说看多维数据集CTL 

00:25:05.470 --> 00:25:10.809
现在我谈论的所有对象

00:25:07.389 --> 00:25:14.350
在部署副本之前设置pod和

00:25:10.809 --> 00:25:17.350
服务，所以如果我现在这样做， 

00:25:14.350 --> 00:25:19.360
只有一个类似的内置服务

00:25:17.350 --> 00:25:21.940
 kubernetes提供了自己，所以这是

00:25:19.360 --> 00:25:24.789
我身边没有任何东西

00:25:21.940 --> 00:25:29.590
现在已经推送了图像，所以我可以说

00:25:24.789 --> 00:25:31.809
立方体CTL运行，我说简单的网站

00:25:29.590 --> 00:25:35.529
一个副本以我参考开始

00:25:31.809 --> 00:25:38.559
我的形象，我经过一个环境

00:25:35.529 --> 00:25:42.039
基本指定活动变量

00:25:38.559 --> 00:25:44.559
春天的轮廓，所以如果我这样做，它将

00:25:42.039 --> 00:25:46.629
告诉我这里已弃用，但我不是

00:25:44.559 --> 00:25:50.019
现在要关心这个我要关心

00:25:46.629 --> 00:25:53.889
更多关于这里发生的事情，以便您

00:25:50.019 --> 00:25:56.440
可以看到发生了几件事

00:25:53.889 --> 00:25:58.450
我已经在下面创建了一个部署对象

00:25:56.440 --> 00:26:00.279
策展人副本集及其

00:25:58.450 --> 00:26:03.249
一锅开始，因为我基本上

00:26:00.279 --> 00:26:08.679
说请与一个

00:26:03.249 --> 00:26:11.830
实例，所以如果我想尝试相同的

00:26:08.679 --> 00:26:17.679
我的意思是，这个可以，不可以

00:26:11.830 --> 00:26:23.440
还没工作，是的，我忘了我需要的东西

00:26:17.679 --> 00:26:29.080
要做的当然是暴露这个

00:26:23.440 --> 00:26:31.029
组件即服务，因此我将

00:26:29.080 --> 00:26:33.399
说使用此部署简单的网站

00:26:31.029 --> 00:26:35.919
并将其公开为类型的服务

00:26:33.399 --> 00:26:38.200
负载均衡器这就像暴露

00:26:35.919 --> 00:26:40.809
通过外部IP并包含负载

00:26:38.200 --> 00:26:42.500
平衡器，当我这样做时， 

00:26:40.809 --> 00:26:45.020
镜子有点问题

00:26:42.500 --> 00:26:47.660
这里的分辨率，因此您可以将其

00:26:45.020 --> 00:26:50.180
小一点，所以这项服务现在

00:26:47.660 --> 00:26:53.660
刚创建，并且的外部IP 

00:26:50.180 --> 00:26:55.850
那是本地主机，所以如果我卷曲本地主机

00:26:53.660 --> 00:26:57.350
现在基本上应该回来了

00:26:55.850 --> 00:26:58.730
同一件事，所以这是相同的

00:26:57.350 --> 00:27:00.140
 Springwood应用程序现在正在运行

00:26:58.730 --> 00:27:03.740
在docker容器内

00:27:00.140 --> 00:27:06.500
 kubernetes并做同样的事情，所以我

00:27:03.740 --> 00:27:09.680
只会重复我之前所做的

00:27:06.500 --> 00:27:12.050
告诉你这基本上看起来如何

00:27:09.680 --> 00:27:15.560
 Mac的另一面问题

00:27:12.050 --> 00:27:18.110
目前没有键盘，这不是

00:27:15.560 --> 00:27:21.340
你好，我用过不同版本的

00:27:18.110 --> 00:27:25.370
您可以从我的应用程序中看到

00:27:21.340 --> 00:27:27.530
所以这现在正在工作，基本上

00:27:25.370 --> 00:27:29.810
这样做的方式非常相似

00:27:27.530 --> 00:27:32.780
每秒对其进行ping操作，并检查是否

00:27:29.810 --> 00:27:34.880
应用程序运行正常，所以如果我这样做

00:27:32.780 --> 00:27:41.150
同样的事情在这里说本地主机

00:27:34.880 --> 00:27:43.280
并失败，它将杀死

00:27:41.150 --> 00:27:45.320
应用程序，您可能会在

00:27:43.280 --> 00:27:48.320
这里的第二个权利

00:27:45.320 --> 00:27:50.000
从奔跑变成了第一个

00:27:48.320 --> 00:27:54.200
完成后再进入运行状态

00:27:50.000 --> 00:27:56.390
状态，现在又回来了

00:27:54.200 --> 00:27:57.610
事情几乎是同一时间，我是说我

00:27:56.390 --> 00:28:01.340
应该说我在跑步

00:27:57.610 --> 00:28:03.320
 Mac版docker上的本地kubernetes 

00:28:01.340 --> 00:28:04.820
实例和云铸造厂是公共的

00:28:03.320 --> 00:28:06.560
所以我不是真的比较苹果

00:28:04.820 --> 00:28:10.970
苹果在这里，但是差不多

00:28:06.560 --> 00:28:17.210
如果我愿意的话，现在的响应时间也差不多

00:28:10.970 --> 00:28:18.620
在社区扩大规模，我可以做到这一点

00:28:17.210 --> 00:28:21.200
可以说我有很多

00:28:18.620 --> 00:28:24.020
复制品和简单部署

00:28:21.200 --> 00:28:26.510
网络，现在我有两个附加端口

00:28:24.020 --> 00:28:30.230
所以它穿透了容器，现在

00:28:26.510 --> 00:28:33.710
您可以在此看到几件事

00:28:30.230 --> 00:28:35.570
即使我身体健康

00:28:33.710 --> 00:28:39.170
实例正在运行，我又扩展了两个

00:28:35.570 --> 00:28:43.910
我的最终用户将遇到中断的情况

00:28:39.170 --> 00:28:45.980
这是非常基本的

00:28:43.910 --> 00:28:48.980
对应用程序之间的理解

00:28:45.980 --> 00:28:52.250
和容器，就像kubernetes是

00:28:48.980 --> 00:28:55.130
基本上只知道如果

00:28:52.250 --> 00:28:56.480
容器是否正在运行

00:28:55.130 --> 00:28:58.340
启动容器，然后

00:28:56.480 --> 00:29:00.169
容器的过程在那里

00:28:58.340 --> 00:29:02.450
那么默认情况下，负载均衡器将

00:29:00.169 --> 00:29:04.460
将流量路由到该容器，但

00:29:02.450 --> 00:29:06.200
那时，Springwood应用程序

00:29:04.460 --> 00:29:08.030
容器中的容器尚未准备好

00:29:06.200 --> 00:29:13.040
这是你需要做的

00:29:08.030 --> 00:29:19.100
配置我已经准备好了

00:29:13.040 --> 00:29:22.460
只需要你反对我一些

00:29:19.100 --> 00:29:27.220
更好，所以我有备忘单

00:29:22.460 --> 00:29:29.419
因为我还不年轻，所以我会节省所有时间

00:29:27.220 --> 00:29:31.250
这个组件称为

00:29:29.419 --> 00:29:35.120
您可以在这里看到准备就绪探针

00:29:31.250 --> 00:29:38.080
您必须将其添加到kubernetes 

00:29:35.120 --> 00:29:42.470
配置8加油

00:29:38.080 --> 00:29:44.540
所以我要把这个拿出来然后

00:29:42.470 --> 00:29:46.669
编辑部署或基本上任何一个

00:29:44.540 --> 00:29:49.460
您可以在kubernetes中使用模块

00:29:46.669 --> 00:29:53.210
基本上键入多维数据集CTL编辑，然后

00:29:49.460 --> 00:29:56.150
部署简单的网络，基本上

00:29:53.210 --> 00:29:58.730
带您到llamo符号的

00:29:56.150 --> 00:30:00.919
整体配置，如果您是

00:29:58.730 --> 00:30:02.390
 llamo的粉丝然后kubernetes告诉我

00:30:00.919 --> 00:30:05.630
最适合您的地方，所以有很多

00:30:02.390 --> 00:30:07.549
这就是我们的规范

00:30:05.630 --> 00:30:09.440
之前已部署，因此您可以在此处看到

00:30:07.549 --> 00:30:11.809
就像活跃的Spring 轮廓

00:30:09.440 --> 00:30:14.419
与Def的价值，这是我的形象

00:30:11.809 --> 00:30:17.720
等等，现在我要

00:30:14.419 --> 00:30:19.190
编辑此准备情况探针

00:30:17.720 --> 00:30:20.780
我唯一应该改变的是

00:30:19.190 --> 00:30:23.450
终结点，因为它不叫你好

00:30:20.780 --> 00:30:25.580
这就是所谓的离开基地

00:30:23.450 --> 00:30:31.940
是这样，现在会发生什么

00:30:25.580 --> 00:30:34.549
需要快速，所以没有它创造了一个新的

00:30:31.940 --> 00:30:37.010
副本集，因为我更改了

00:30:34.549 --> 00:30:39.530
配置及其现在将要做什么

00:30:37.010 --> 00:30:42.320
它将开始新的新部分

00:30:39.530 --> 00:30:44.510
复制集，一旦运行良好， 

00:30:42.320 --> 00:30:47.240
会取下你可以看到的旧的

00:30:44.510 --> 00:30:48.890
现在它正在运行，但是还没有准备好，所以

00:30:47.240 --> 00:30:51.140
容器在那里，但是

00:30:48.890 --> 00:30:53.120
 Springwood的应用程序不是唯一的

00:30:51.140 --> 00:30:54.980
一旦成功， 

00:30:53.120 --> 00:30:56.809
 criminate能够发现问题

00:30:54.980 --> 00:31:00.290
终结点，那么它将开始服用

00:30:56.809 --> 00:31:02.030
下来其他的，所以这是东西

00:31:00.290 --> 00:31:04.460
 Cloud Foundry的构建钉将如何

00:31:02.030 --> 00:31:06.290
在kubernetes中为您提供开箱即用的功能

00:31:04.460 --> 00:31:10.000
您仍然必须手动配置

00:31:06.290 --> 00:31:10.000
我的意思是你可以实现同样的目标

00:31:10.090 --> 00:31:14.620
我要看看你的时间

00:31:11.800 --> 00:31:19.690
知道我猜是负的时间，所以

00:31:14.620 --> 00:31:25.120
我们已经做到了，现在另一件事

00:31:19.690 --> 00:31:28.000
我想快速展示的是

00:31:25.120 --> 00:31:32.050
在Cloud Foundry中进行记录

00:31:28.000 --> 00:31:33.760
就像CF日志，然后是

00:31:32.050 --> 00:31:35.860
该应用程序，它具有内置的

00:31:33.760 --> 00:31:38.470
日志聚合器，所以您是

00:31:35.860 --> 00:31:41.260
基本上要在这里看到的是

00:31:38.470 --> 00:31:43.090
所有应用程序的持续日志

00:31:41.260 --> 00:31:44.740
在这里你基本上可以阅读

00:31:43.090 --> 00:31:46.180
在某种程度上您看到了实例

00:31:44.740 --> 00:31:48.670
 ID和其他东西，因为它是

00:31:46.180 --> 00:31:50.830
不断ping但它会

00:31:48.670 --> 00:31:52.330
连续记录并汇总日志

00:31:50.830 --> 00:31:55.000
在某个特定情况下

00:31:52.330 --> 00:31:57.190
现在在社区方面的应用程序类型

00:31:55.000 --> 00:32:00.010
很多日志以类似的方式工作

00:31:57.190 --> 00:32:04.060
您具有多维数据集CTL锁，但在这种情况下

00:32:00.010 --> 00:32:08.790
您需要指定锅的ID，以便

00:32:04.060 --> 00:32:12.550
您必须确定底池ID和

00:32:08.790 --> 00:32:15.400
只有这样你才能做一个连续的

00:32:12.550 --> 00:32:18.040
登录，所以现在基本上这就像

00:32:15.400 --> 00:32:20.230
春天的结束

00:32:18.040 --> 00:32:22.240
靴子会处理，所以

00:32:20.230 --> 00:32:23.620
现在站着不做任何事都不做

00:32:22.240 --> 00:32:26.530
做其他事情之一

00:32:23.620 --> 00:32:28.030
不喜欢我的意思是首先

00:32:26.530 --> 00:32:31.840
我必须挑的那种麻烦

00:32:28.030 --> 00:32:34.240
拿出锅ID，另一件事是我

00:32:31.840 --> 00:32:37.330
基本上可以锁定它给我

00:32:34.240 --> 00:32:38.710
选择登录级别的标签，以便

00:32:37.330 --> 00:32:44.560
我不会深入标签

00:32:38.710 --> 00:32:46.660
但是这个有一个标签可以运行简单的网页

00:32:44.560 --> 00:32:49.600
所以如果我这样做，基本上

00:32:46.660 --> 00:32:51.070
收集所有三个的锁

00:32:49.600 --> 00:32:53.830
或基本上覆盖了所有已部署的

00:32:51.070 --> 00:32:56.080
实例，但由于某种原因我

00:32:53.830 --> 00:32:58.210
从来没有想过为什么我不能让

00:32:56.080 --> 00:33:00.430
这个连续运行，所以我可以

00:32:58.210 --> 00:33:03.280
标签或运行锁

00:33:00.430 --> 00:33:05.230
连续地意味着如果你想

00:33:03.280 --> 00:33:06.670
确实取得了与您相同的成就

00:33:05.230 --> 00:33:09.360
在Cloud Foundry中，您可能必须

00:33:06.670 --> 00:33:14.800
采取额外的工具来做到这一点

00:33:09.360 --> 00:33:18.120
所以我还想告诉你

00:33:14.800 --> 00:33:20.980
现在修补，我们发现了这个

00:33:18.120 --> 00:33:23.800
我们有一个这样的代码

00:33:20.980 --> 00:33:25.810
幸运的是，我们有两个

00:33:23.800 --> 00:33:28.180
提供弹性的Abell平台

00:33:25.810 --> 00:33:30.610
最后要解决这个问题

00:33:28.180 --> 00:33:32.170
不仅是我这样敲击

00:33:30.610 --> 00:33:34.270
在curl命令上，但是通常

00:33:32.170 --> 00:33:35.920
继续说那不应该是这样

00:33:34.270 --> 00:33:38.230
不应该那样，所以我要

00:33:35.920 --> 00:33:41.080
更新我的代码，所以这是第二部分

00:33:38.230 --> 00:33:42.730
我的生活编码，我要说明

00:33:41.080 --> 00:33:44.920
这就像新版本的

00:33:42.730 --> 00:33:51.430
现在申请，我要接受这个

00:33:44.920 --> 00:33:52.600
不好的喊出来就是这样，然后我

00:33:51.430 --> 00:33:56.710
在新窗口中怀孕

00:33:52.600 --> 00:33:59.560
我要建立一个新的新Chara文件

00:33:56.710 --> 00:34:07.750
所以这基本上是补丁

00:33:59.560 --> 00:34:09.070
代码现在是的，这看起来很好，我是说真的

00:34:07.750 --> 00:34:14.890
当然不接

00:34:09.070 --> 00:34:17.190
自动，但它们是命令

00:34:14.890 --> 00:34:19.660
现在在Cloud Foundry中处理

00:34:17.190 --> 00:34:22.000
在裸露的Cloud Foundry上，您将拥有

00:34:19.660 --> 00:34:23.679
应用手动Bluegreen部署

00:34:22.000 --> 00:34:26.260
所以你基本上推了一个新的代码， 

00:34:23.679 --> 00:34:28.660
一旦测试通过并运行良好

00:34:26.260 --> 00:34:30.370
像路线工具一样切换到新

00:34:28.660 --> 00:34:33.070
应用程序，你会很顺利

00:34:30.370 --> 00:34:34.660
过渡，然后有命令行

00:34:33.070 --> 00:34:37.150
我现在在这里使用的插件

00:34:34.660 --> 00:34:39.490
这称为蓝绿色部署

00:34:37.150 --> 00:34:42.100
为您自动执行此操作

00:34:39.490 --> 00:34:50.950
最后我将要展示的是

00:34:42.100 --> 00:34:54.400
这将在这里创建一个新的

00:34:50.950 --> 00:34:58.930
应用程序并将其称为新的简单网络

00:34:54.400 --> 00:35:06.240
然后基本上等到

00:34:58.930 --> 00:35:06.240
应用程序已准备就绪，以便

00:35:06.810 --> 00:35:13.180
开始使用它，现在一旦

00:35:09.190 --> 00:35:14.890
在那里，好吧，这个要求不是

00:35:13.180 --> 00:35:16.210
完全正确，因为这是

00:35:14.890 --> 00:35:18.070
仍在工作，该报告已经

00:35:16.210 --> 00:35:19.960
开始，所以有点太乐观了

00:35:18.070 --> 00:35:20.950
但我非常有信心

00:35:19.960 --> 00:35:26.280
最终做到

00:35:20.950 --> 00:35:26.280
所以一旦这个程序准备就绪

00:35:34.930 --> 00:35:41.080
总是像

00:35:36.880 --> 00:35:42.580
现场演示的几个小时猜对最多

00:35:41.080 --> 00:35:44.110
如果你在我之前就已经看到了

00:35:42.580 --> 00:35:47.170
应该把它缩小到

00:35:44.110 --> 00:35:49.840
一个，但仍然无法正常工作，所以现在

00:35:47.170 --> 00:35:52.960
新的在那里，现在它将

00:35:49.840 --> 00:35:56.830
进行切换并更改路线

00:35:52.960 --> 00:35:59.380
并在旧路线到新路线

00:35:56.830 --> 00:36:01.690
应用程序，它会在某一时刻

00:35:59.380 --> 00:36:04.420
刚带着第二版回来了

00:36:01.690 --> 00:36:05.500
如果我将旧实例删除

00:36:04.420 --> 00:36:06.940
只有一个实例就更多了

00:36:05.500 --> 00:36:08.860
令人印象深刻，因为那时你就像一个

00:36:06.940 --> 00:36:12.610
从一个HTTP调用切换到下一个

00:36:08.860 --> 00:36:14.560
最重要的是您的最终用户是

00:36:12.610 --> 00:36:17.440
永远不会注意到，所以这就是方法

00:36:14.560 --> 00:36:19.750
基本上如何修补应用程序

00:36:17.440 --> 00:36:22.060
代码仍然保留所有休息点

00:36:19.750 --> 00:36:24.130
要活着，如果我没有添加

00:36:22.060 --> 00:36:25.090
那第二版我不认为有人

00:36:24.130 --> 00:36:27.700
本来会本来真的

00:36:25.090 --> 00:36:31.390
看到了这一点，如果我想证明

00:36:27.700 --> 00:36:33.940
这样，如果我调用该失败的命令

00:36:31.390 --> 00:36:37.630
它说现在已修复，因此此代码已

00:36:33.940 --> 00:36:40.810
补丁，不是应用程序

00:36:37.630 --> 00:36:43.030
现在在kubernetes上不再脆弱

00:36:40.810 --> 00:36:44.920
您可能会猜到的网站Yui会成交

00:36:43.030 --> 00:36:47.170
与类似的事情，所以第一件事

00:36:44.920 --> 00:36:52.600
我们要做的是建立一个新的容器

00:36:47.170 --> 00:36:55.590
图片，下一个将是

00:36:52.600 --> 00:36:55.590
推那个形象

00:37:00.960 --> 00:37:08.039
再等十分钟

00:37:04.809 --> 00:37:08.039
那应该是可行的

00:37:16.300 --> 00:37:20.390
同时我要拍张照片

00:37:18.650 --> 00:37:21.770
我从未见过我从未有过这样的经历

00:37:20.390 --> 00:37:23.690
人们坐在那里的大人群

00:37:21.770 --> 00:37:25.670
在地板上，我真的需要发送

00:37:23.690 --> 00:37:27.079
反正这给我的经理

00:37:25.670 --> 00:37:28.339
快速动手，如果您发现

00:37:27.079 --> 00:37:30.829
酷好吧真棒

00:37:28.339 --> 00:37:34.280
非常感谢你，我要

00:37:30.829 --> 00:37:36.829
今天过一个快乐的夜晚，好吗

00:37:34.280 --> 00:37:40.640
这完成了，我们可以回到这个

00:37:36.829 --> 00:37:44.530
所以在这里我们必须做类似的

00:37:40.640 --> 00:37:50.780
和以前一样，说多维数据集CTL编辑

00:37:44.530 --> 00:37:53.690
部署简单的网络，所以我现在

00:37:50.780 --> 00:37:57.530
要做的基本上是更新名称

00:37:53.690 --> 00:38:00.109
该图像的位置，因此我将其更改为

00:37:57.530 --> 00:38:02.089
版本零一二零二，我会

00:38:00.109 --> 00:38:04.130
只是向你展示我是否可以

00:38:02.089 --> 00:38:06.650
愚蠢的类型或类似的东西

00:38:04.130 --> 00:38:09.020
不是行为的健壮性

00:38:06.650 --> 00:38:11.780
社区因此基本上提交图像

00:38:09.020 --> 00:38:15.200
它将无法找到和

00:38:11.780 --> 00:38:16.880
然后创建一个新的副本集，但是

00:38:15.200 --> 00:38:20.030
对手说不能拉

00:38:16.880 --> 00:38:22.190
该图像，因此它不会切换到

00:38:20.030 --> 00:38:24.710
残破的图像留下了旧的

00:38:22.190 --> 00:38:26.960
一直运行到解决为止

00:38:24.710 --> 00:38:29.390
是的，这是一种聪明

00:38:26.960 --> 00:38:31.010
那里并没有真正切换到

00:38:29.390 --> 00:38:38.630
它已经知道的东西将会是

00:38:31.010 --> 00:38:40.430
如果我现在这样做，最终会破裂

00:38:38.630 --> 00:38:42.530
现在我可以再设置一个副本

00:38:40.430 --> 00:38:45.589
现在我们有很多副本集

00:38:42.530 --> 00:38:47.869
可以不时删除它们

00:38:45.589 --> 00:38:50.000
知道他们不再重要了

00:38:47.869 --> 00:38:52.010
在这里你可以看到同样的东西

00:38:50.000 --> 00:38:53.660
现在它已经切换，因为我们有三个

00:38:52.010 --> 00:38:57.349
实例仍然是负载禁止它

00:38:53.660 --> 00:39:00.020
必须取下其他的，但是

00:38:57.349 --> 00:39:01.970
刷新在这里也适用，新的

00:39:00.020 --> 00:39:05.690
版本进来非常顺利

00:39:01.970 --> 00:39:08.270
过渡，所以这主要是因为

00:39:05.690 --> 00:39:11.119
从现场演示站点喜欢返回

00:39:08.270 --> 00:39:13.970
演讲，我希望大家

00:39:11.119 --> 00:39:16.099
这对你们中的某些人来说是新的

00:39:13.970 --> 00:39:18.710
其他人不是那么多

00:39:16.099 --> 00:39:20.299
平台空间，所以我见过人们

00:39:18.710 --> 00:39:21.980
从Cloud Foundry转到

00:39:20.299 --> 00:39:24.380
 kubernetes，反之亦然，所以

00:39:21.980 --> 00:39:25.970
你可以看到的东西当然是

00:39:24.380 --> 00:39:29.029
在社区中，您可以配置很多

00:39:25.970 --> 00:39:30.589
更多，但您还需要了解更多

00:39:29.029 --> 00:39:32.929
防止你做错事

00:39:30.589 --> 00:39:35.209
现在，如果您来自kubernetes，它看起来

00:39:32.929 --> 00:39:38.749
很好，这很简单，但是可以吗

00:39:35.209 --> 00:39:40.189
做我想做的一切，所以

00:39:38.749 --> 00:39:42.650
我列出了几件事

00:39:40.189 --> 00:39:45.169
非常喜欢生活

00:39:42.650 --> 00:39:47.659
在社区中编辑

00:39:45.169 --> 00:39:49.159
与内置警报器冲突，并且

00:39:47.659 --> 00:39:50.419
部署真的很有趣，所以

00:39:49.159 --> 00:39:53.809
那似乎很好

00:39:50.419 --> 00:39:56.239
经过仔细考虑并易于使用

00:39:53.809 --> 00:39:59.349
我的功能范围很大

00:39:56.239 --> 00:40:03.259
给定时间只刮擦表面

00:39:59.349 --> 00:40:04.640
那里有非常细致的图案

00:40:03.259 --> 00:40:06.589
您有不同的服务水平

00:40:04.640 --> 00:40:08.089
曝光这就是我实际上

00:40:06.589 --> 00:40:09.619
从集装箱调度中说

00:40:08.089 --> 00:40:11.779
相比而言，透视是一个优势

00:40:09.619 --> 00:40:13.819
如果我能说清楚的话，Cloud Foundry 

00:40:11.779 --> 00:40:15.650
仅对其他人可见，而对其他人不可见

00:40:13.819 --> 00:40:19.009
外面的工作也很好

00:40:15.650 --> 00:40:20.539
安全目的和核心

00:40:19.009 --> 00:40:22.609
社区非常强大且富有弹性

00:40:20.539 --> 00:40:25.969
我的意思是，这是从Google传来的

00:40:22.609 --> 00:40:29.029
他们的内部系统，当然很高

00:40:25.969 --> 00:40:31.999
人气，我的意思是，如果您看CN 

00:40:29.029 --> 00:40:34.189
 CF生态系统有成千上万

00:40:31.999 --> 00:40:36.319
产品很大，因为那里哦

00:40:34.189 --> 00:40:39.849
社区，几乎可用

00:40:36.319 --> 00:40:42.049
到处都是亚马逊，所以

00:40:39.849 --> 00:40:44.659
绝对是我们必须要做的事情

00:40:42.049 --> 00:40:46.909
现在考虑不利的一面，我们已经

00:40:44.659 --> 00:40:50.719
在我们的项目中看到很多

00:40:46.909 --> 00:40:53.089
特别是当我们从

00:40:50.719 --> 00:40:55.429
突然变成了Cloud Foundry 

00:40:53.089 --> 00:40:59.479
可见的开发人员将需要

00:40:55.429 --> 00:41:01.519
适当的其他技能水平

00:40:59.479 --> 00:41:03.289
处理容器我不是这样

00:41:01.519 --> 00:41:05.449
困难但要妥善处理

00:41:03.289 --> 00:41:07.579
 kubernetes，因为它很容易做到

00:41:05.449 --> 00:41:09.619
出现问题，这需要时间

00:41:07.579 --> 00:41:11.509
找出错误的地方， 

00:41:09.619 --> 00:41:14.509
真正最大的不同是

00:41:11.509 --> 00:41:16.390
该容器处理，我的意思是

00:41:14.509 --> 00:41:18.499
现在在我的演示中非常简单

00:41:16.390 --> 00:41:21.049
例如建立一个容器并推动

00:41:18.499 --> 00:41:22.729
容器实际上你必须做

00:41:21.049 --> 00:41:24.890
同样的事情，但你也必须保持

00:41:22.729 --> 00:41:28.219
他们，所以如果一个容器有一个

00:41:24.890 --> 00:41:29.659
您需要修补的漏洞

00:41:28.219 --> 00:41:31.849
 Cloud Foundry将在

00:41:29.659 --> 00:41:34.279
封面，但当他们交换

00:41:31.849 --> 00:41:36.589
基本映像，您还必须维护

00:41:34.279 --> 00:41:38.869
该注册表将成为一个新的

00:41:36.589 --> 00:41:40.369
单点故障，我们只有一个

00:41:38.869 --> 00:41:42.980
我们有容器的项目

00:41:40.369 --> 00:41:47.090
注册表与证书问题

00:41:42.980 --> 00:41:48.710
几个星期，所以你什么都不是

00:41:47.090 --> 00:41:51.369
然后会发生，因为你不能

00:41:48.710 --> 00:41:53.540
如果没有图像，请进行部署

00:41:51.369 --> 00:41:55.640
这是你应该知道的

00:41:53.540 --> 00:41:59.090
今天停用的记录基本上是

00:41:55.640 --> 00:42:01.970
只是象征着它有一个很好的核心

00:41:59.090 --> 00:42:03.470
但如果这样做，通常需要做更多的工作

00:42:01.970 --> 00:42:06.320
你做kubernetes 

00:42:03.470 --> 00:42:09.380
很快就喜欢掌舵包装

00:42:06.320 --> 00:42:11.810
普罗米修斯和很多东西要附加

00:42:09.380 --> 00:42:14.060
到您的系统，这意味着附加

00:42:11.810 --> 00:42:17.390
维护您的集群

00:42:14.060 --> 00:42:19.850
 Cloud Foundry站点上的基础架构

00:42:17.390 --> 00:42:23.920
简单的部分是真的

00:42:19.850 --> 00:42:26.480
简单也有那种被

00:42:23.920 --> 00:42:28.310
容器更少，所以我的意思是无服务器是一个

00:42:26.480 --> 00:42:31.580
如今我很受欢迎

00:42:28.310 --> 00:42:33.380
我是技术迷，但是

00:42:31.580 --> 00:42:35.240
不是这个词，因为如果

00:42:33.380 --> 00:42:37.100
意味着您不必担心自己的

00:42:35.240 --> 00:42:38.240
服务器和您的基础架构

00:42:37.100 --> 00:42:40.130
意味着在云电话中，您不必

00:42:38.240 --> 00:42:42.560
担心容器在那里

00:42:40.130 --> 00:42:44.420
他们会被使用，但会被您使用

00:42:42.560 --> 00:42:46.100
不必与他们互动

00:42:44.420 --> 00:42:48.650
您拥有的开发人员生产力条件

00:42:46.100 --> 00:42:51.920
真正快速的平台应用

00:42:48.650 --> 00:42:54.050
路径，它已经很成熟了

00:42:51.920 --> 00:43:00.350
大约更长的时间，然后是kubernetes 

00:42:54.050 --> 00:43:02.210
是的，它只是工作，所以它减少了

00:43:00.350 --> 00:43:03.890
配置产品的可能性对不起

00:43:02.210 --> 00:43:06.080
缺点的可能性

00:43:03.890 --> 00:43:08.480
蓝绿色部署和自动

00:43:06.080 --> 00:43:10.190
修补不是我意思是相同的

00:43:08.480 --> 00:43:12.340
功能，但似乎不是

00:43:10.190 --> 00:43:15.320
在kubernetes中内置

00:43:12.340 --> 00:43:18.170
问题是我有点无聊

00:43:15.320 --> 00:43:20.540
意思是去年我参观了两个Cube缺点

00:43:18.170 --> 00:43:23.869
我喜欢排队不利条件并前往云端

00:43:20.540 --> 00:43:25.490
铸造峰会

00:43:23.869 --> 00:43:27.500
不再没有新的东西了

00:43:25.490 --> 00:43:29.690
客户采用的故事，但事实并非如此

00:43:27.500 --> 00:43:32.350
就像在这里和那里的新功能一样

00:43:29.690 --> 00:43:35.030
你在生态系统中做新的事情

00:43:32.350 --> 00:43:36.680
它在那里，它已经被设置，而

00:43:35.030 --> 00:43:38.420
在立方体的骗子我不知道

00:43:36.680 --> 00:43:39.890
任何人，如果你去过那里下一个

00:43:38.420 --> 00:43:42.980
下周也要发生在这里

00:43:39.890 --> 00:43:46.790
巴塞罗那非常热情

00:43:42.980 --> 00:43:48.950
拥挤的人群

00:43:46.790 --> 00:43:50.270
每个人都在展示他们的Yama文件

00:43:48.950 --> 00:43:52.460
他们都做了什么，所以这是一个

00:43:50.270 --> 00:43:55.670
那里会发生很多事情

00:43:52.460 --> 00:43:56.960
对我来说，我总是和弦

00:43:55.670 --> 00:43:58.430
想从

00:43:56.960 --> 00:44:00.680
凯尔西·高塔（Kelsey Hightower），他就像

00:43:58.430 --> 00:44:03.020
 kubernetes的第一倡导者是

00:44:00.680 --> 00:44:06.140
就像是基础设施

00:44:03.020 --> 00:44:08.450
基于yama的框架，但来自

00:44:06.140 --> 00:44:10.309
开发人员的观点

00:44:08.450 --> 00:44:12.079
您可以在零件中找到的生产率

00:44:10.309 --> 00:44:14.660
快速平台和我，它只能

00:44:12.079 --> 00:44:18.319
像第二一样，这就是

00:44:14.660 --> 00:44:21.020
过去也是我的经历

00:44:18.319 --> 00:44:22.490
这永远是我最后一张幻灯片

00:44:21.020 --> 00:44:24.740
说我想有一个

00:44:22.490 --> 00:44:27.109
简单的平台

00:44:24.740 --> 00:44:27.980
 Cloud Foundry及其功能

00:44:27.109 --> 00:44:30.920
 kubernetes的范围

00:44:27.980 --> 00:44:33.170
现在这已经开始

00:44:30.920 --> 00:44:36.140
在Cloud Foundry社区中成长

00:44:33.170 --> 00:44:37.700
他们有各种各样的选择

00:44:36.140 --> 00:44:39.410
使用kubernetes，我的意思是第一个是

00:44:37.700 --> 00:44:42.440
 Cloud Foundry容器运行时

00:44:39.410 --> 00:44:44.150
这是一个成熟的kubernetes 

00:44:42.440 --> 00:44:46.910
社区，然后您将其并行运行

00:44:44.150 --> 00:44:48.770
像枢轴式集装箱服务

00:44:46.910 --> 00:44:51.440
就像是

00:44:48.770 --> 00:44:54.740
然后有夸克过去

00:44:51.440 --> 00:44:57.470
运行CF的CF容器化

00:44:54.740 --> 00:44:59.270
铸造厂提供的容器

00:44:57.470 --> 00:45:02.180
 kubernetes，这意味着您已经

00:44:59.270 --> 00:45:04.250
两个平台相互内在

00:45:02.180 --> 00:45:07.520
最有趣的是

00:45:04.250 --> 00:45:10.130
所谓的项目ireenie是因为

00:45:07.520 --> 00:45:12.109
您可能已经猜到Cloud Foundry为

00:45:10.130 --> 00:45:13.849
它已经存在于社区之前

00:45:12.109 --> 00:45:15.230
有一个内部容器调度程序

00:45:13.849 --> 00:45:17.690
否则所有这些功能

00:45:15.230 --> 00:45:21.260
 ireenie现在不可能

00:45:17.690 --> 00:45:23.089
这个想法是使它可插拔

00:45:21.260 --> 00:45:25.490
 Cloud Foundry的内部名称

00:45:23.089 --> 00:45:27.500
调度程序称为Diego， 

00:45:25.490 --> 00:45:30.200
集装箱电话叫花园

00:45:27.500 --> 00:45:32.799
在docker之前也在那里

00:45:30.200 --> 00:45:34.940
这个想法就像使

00:45:32.799 --> 00:45:37.609
可配置的，所以你可以说我会

00:45:34.940 --> 00:45:40.490
而不是使用kubernetes作为容器

00:45:37.609 --> 00:45:46.220
引擎并将Cloud Foundry用作

00:45:40.490 --> 00:45:47.869
顶级API，所以我不是

00:45:46.220 --> 00:45:50.450
希望任何人都知道和理解

00:45:47.869 --> 00:45:52.400
的架构图

00:45:50.450 --> 00:45:55.250
里面有云铸造厂，您会看到

00:45:52.400 --> 00:45:57.230
这里最大的部分是非法细胞

00:45:55.250 --> 00:45:59.809
运行所有这些小容器

00:45:57.230 --> 00:46:01.880
是在工作量和IA 

00:45:59.809 --> 00:46:04.250
这个想法就像使用

00:46:01.880 --> 00:46:06.440
 kubernetes就是这样，然后

00:46:04.250 --> 00:46:09.500
这个项目ireenie像一层一样

00:46:06.440 --> 00:46:10.819
所以从开发者的角度来看

00:46:09.500 --> 00:46:12.859
你有相同的API 

00:46:10.819 --> 00:46:14.359
但是你反对kubernetes 

00:46:12.859 --> 00:46:17.029
集群，这意味着您还可以

00:46:14.359 --> 00:46:19.189
以这种方式访问​​并与之交互

00:46:17.029 --> 00:46:21.769
通过kubernetes api或Cloud 

00:46:19.189 --> 00:46:24.410
 Foundry API，所以这是相当新的

00:46:21.769 --> 00:46:27.619
在CF Summoner上进行了现场降级

00:46:24.410 --> 00:46:30.559
几周前的明年，我打算

00:46:27.619 --> 00:46:33.349
演示在这里好

00:46:30.559 --> 00:46:36.109
所以我要再用两个时间

00:46:33.349 --> 00:46:38.599
分钟，如果您想复制

00:46:36.109 --> 00:46:39.829
我在这里有此代码存储库

00:46:38.599 --> 00:46:41.239
我所有的github帐户

00:46:39.829 --> 00:46:42.499
如果您想获得指导步骤

00:46:41.239 --> 00:46:45.529
你把手放在那并玩

00:46:42.499 --> 00:46:47.719
自己为南方人民

00:46:45.529 --> 00:46:49.549
德国是的，这再次是暗示

00:46:47.719 --> 00:46:51.259
我们肯定会参加Cloud Foundry聚会

00:46:49.549 --> 00:46:54.079
不要只谈论Cloud Foundry 

00:46:51.259 --> 00:46:55.549
时间，因为像CF推和

00:46:54.079 --> 00:46:57.019
绑定服务，所以它不是真的

00:46:55.549 --> 00:47:00.049
需要聚会来谈论这一切

00:46:57.019 --> 00:47:03.229
时间，然后这是我的

00:47:00.049 --> 00:47:05.419
 Twitter处理，如果您快速

00:47:03.229 --> 00:47:07.489
广告这是我的同事

00:47:05.419 --> 00:47:10.039
安德烈亚斯（Andreas）目前正在跑步

00:47:07.489 --> 00:47:12.709
他在另一个房间里的安全车间

00:47:10.039 --> 00:47:15.919
将会在春天的云上举行会议

00:47:12.709 --> 00:47:19.069
 kubernetes明天我想在6:00 

00:47:15.919 --> 00:47:21.380
礼堂，这是一个更多

00:47:19.069 --> 00:47:26.179
我今天开始的高级水平

00:47:21.380 --> 00:47:32.589
作为介绍，是的，随时

00:47:26.179 --> 00:47:35.170
停下来玩游戏我很好

00:47:32.589 --> 00:47:36.570
谢谢

00:47:35.170 --> 00:47:42.100
您

00:47:36.570 --> 00:47:42.100
 [音乐] 

