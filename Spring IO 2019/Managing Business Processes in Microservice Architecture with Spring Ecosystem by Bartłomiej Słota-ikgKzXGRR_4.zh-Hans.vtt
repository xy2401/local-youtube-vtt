WEBVTT
Kind: captions
Language: zh-Hans

00:00:00.900 --> 00:00:07.930
 [音乐] 

00:00:04.360 --> 00:00:10.900
好的，下午好

00:00:07.930 --> 00:00:15.070
所以我们决定待到最后

00:00:10.900 --> 00:00:19.489
这么漫长的一天之后，一定要累

00:00:15.070 --> 00:00:21.710
非常好的谈话，我真的很高兴

00:00:19.489 --> 00:00:24.679
你实际上是来这里的，因为

00:00:21.710 --> 00:00:29.199
它几乎是最后一个之一

00:00:24.679 --> 00:00:32.390
在这一天的谈话，是的，我们走吧

00:00:29.199 --> 00:00:34.910
你知道业务流程吗

00:00:32.390 --> 00:00:38.989
目前管理市场值得

00:00:34.910 --> 00:00:43.609
大约80亿美元，我可以说

00:00:38.989 --> 00:00:47.199
到2025年，您将更加值得

00:00:43.609 --> 00:00:49.579
大约18亿美元

00:00:47.199 --> 00:00:52.100
公司为什么要投资这样

00:00:49.579 --> 00:00:55.399
巨额资金流入

00:00:52.100 --> 00:00:59.300
 BPMS，答案非常简单

00:00:55.399 --> 00:01:02.269
其实是因为我的业务流程

00:00:59.300 --> 00:01:05.780
将定义我们公司的生产方式

00:01:02.269 --> 00:01:08.630
金钱如何竞争或简单

00:01:05.780 --> 00:01:12.860
他们如何生活在复杂的世界中

00:01:08.630 --> 00:01:15.380
法律法规，无论我们走到哪里

00:01:12.860 --> 00:01:18.860
来自我们公司的

00:01:15.380 --> 00:01:21.020
他们想赚钱并减少

00:01:18.860 --> 00:01:22.520
他们的成本，这就是为什么他们试图

00:01:21.020 --> 00:01:25.280
优化和自动化他们的业务

00:01:22.520 --> 00:01:27.020
流程，而他们通常只是通过

00:01:25.280 --> 00:01:29.210
购买和现成的解决方案

00:01:27.020 --> 00:01:32.119
已经产品，并且完全

00:01:29.210 --> 00:01:34.789
同时没有错

00:01:32.119 --> 00:01:37.729
时间虽然我们开发人员经常使用

00:01:34.789 --> 00:01:41.000
跟随敏捷软件开发

00:01:37.729 --> 00:01:43.609
我们知道如何利用

00:01:41.000 --> 00:01:45.590
主要驱动设计微服务

00:01:43.609 --> 00:01:48.460
实际交付更高的产品

00:01:45.590 --> 00:01:52.000
质量并更快地交付它们

00:01:48.460 --> 00:01:55.070
现在的问题是我们如何调和

00:01:52.000 --> 00:01:57.320
业务流程管理系统

00:01:55.070 --> 00:01:59.929
微服务和敏捷的想法

00:01:57.320 --> 00:02:00.590
在此期间进行软件开发

00:01:59.929 --> 00:02:02.359
介绍

00:02:00.590 --> 00:02:04.880
我们将一起努力寻找答案

00:02:02.359 --> 00:02:08.630
对于这个问题，我们还将看到

00:02:04.880 --> 00:02:13.460
春季生态系统的工具将帮助我们

00:02:08.630 --> 00:02:14.300
实现这个目标，这次演讲将是

00:02:13.460 --> 00:02:16.520
有点不同

00:02:14.300 --> 00:02:18.290
可能来自其他所有的人

00:02:16.520 --> 00:02:21.470
您在这次会议期间去过的地方

00:02:18.290 --> 00:02:24.110
因为我想保持这个

00:02:21.470 --> 00:02:27.320
高层次的抽象而不是挖掘

00:02:24.110 --> 00:02:32.600
太深的技术细节

00:02:27.320 --> 00:02:35.600
我想让您掌握的每种工具

00:02:32.600 --> 00:02:39.040
想法并了解我们的方法

00:02:35.600 --> 00:02:42.410
可以采取以找到答案和

00:02:39.040 --> 00:02:44.840
我叫伯特·托马斯·瓦达

00:02:42.410 --> 00:02:47.090
华沙波兰和我也来这里

00:02:44.840 --> 00:02:47.630
您作为一个花费了大约四倍的人

00:02:47.090 --> 00:02:50.060
年份

00:02:47.630 --> 00:02:52.130
自动化业务流程

00:02:50.060 --> 00:02:54.530
定制解决方案和货架解决方案

00:02:52.130 --> 00:02:55.460
我也去过那里

00:02:54.530 --> 00:02:59.510
通过好与坏

00:02:55.460 --> 00:03:01.340
这种系统的两面以及今天

00:02:59.510 --> 00:03:03.170
我是batagor IT矿山的顾问

00:03:01.340 --> 00:03:05.000
这是一家波兰公司， 

00:03:03.170 --> 00:03:07.790
得到我们客户的同意

00:03:05.000 --> 00:03:09.910
分享有关我的一些细节

00:03:07.790 --> 00:03:12.590
我今天在做专业

00:03:09.910 --> 00:03:14.690
仔细工作的底层文件

00:03:12.590 --> 00:03:16.730
是瑞典电力公司，其使命

00:03:14.690 --> 00:03:18.950
一代都不含化石， 

00:03:16.730 --> 00:03:21.440
 vattenfall也在移动服务中

00:03:18.950 --> 00:03:23.780
和基础设施，包括收费

00:03:21.440 --> 00:03:26.000
特斯拉或其他电力站

00:03:23.780 --> 00:03:28.550
车辆，当然还有网络服务

00:03:26.000 --> 00:03:30.080
用户以及最近几年

00:03:28.550 --> 00:03:32.330
之间的合作却很棒

00:03:30.080 --> 00:03:36.020
思维和Vattenfall IT服务

00:03:32.330 --> 00:03:37.880
卡托维兹债券导致5次

00:03:36.020 --> 00:03:41.120
增加可用数量

00:03:37.880 --> 00:03:43.520
充电站，今天我们在

00:03:41.120 --> 00:03:44.989
迁移的进度

00:03:43.520 --> 00:03:46.790
平台进入新的微服务

00:03:44.989 --> 00:03:49.100
在kubernetes上运行的环境

00:03:46.790 --> 00:03:51.680
 Microsoft Azure云中的群集和

00:03:49.100 --> 00:03:54.080
我们每天使用的工具

00:03:51.680 --> 00:03:56.000
在Apache Kafka中包含Java 11 spring 

00:03:54.080 --> 00:03:57.170
这是我之所以的另一个原因

00:03:56.000 --> 00:03:59.060
站在你面前说话

00:03:57.170 --> 00:04:00.680
关于微服务已经结束了

00:03:59.060 --> 00:04:02.060
自从我开始三年

00:04:00.680 --> 00:04:05.390
使用微服务

00:04:02.060 --> 00:04:08.959
专业并且在我们进入之前

00:04:05.390 --> 00:04:10.130
让我们认识布鲁斯是布鲁斯的主要话题

00:04:08.959 --> 00:04:12.440
软件工程师

00:04:10.130 --> 00:04:14.660
他有七年的经验

00:04:12.440 --> 00:04:16.010
他一直在致力于业务自动化

00:04:14.660 --> 00:04:18.650
已经处理了一段时间

00:04:16.010 --> 00:04:21.140
而且对微电子充满热情

00:04:18.650 --> 00:04:23.210
他参加会议的服务就像

00:04:21.140 --> 00:04:26.750
我们在这里做他非常喜欢的书

00:04:23.210 --> 00:04:29.990
主要驱动的设计，你知道什么

00:04:26.750 --> 00:04:31.910
他在项目中挣扎很多

00:04:29.990 --> 00:04:34.010
正在辞职的公司非常

00:04:31.910 --> 00:04:36.050
沮丧的是很难产生一个

00:04:34.010 --> 00:04:37.700
系统中的单一变化，甚至

00:04:36.050 --> 00:04:39.140
很难找到应该的行代码

00:04:37.700 --> 00:04:42.830
进行修改以提供此功能

00:04:39.140 --> 00:04:45.890
改变他们找不到共同点

00:04:42.830 --> 00:04:48.380
与商界人士有共同点，但

00:04:45.890 --> 00:04:50.480
布鲁斯并不像他的所有同事一样

00:04:48.380 --> 00:04:52.610
想留在公司，他

00:04:50.480 --> 00:04:55.910
认为微服务实际上可以

00:04:52.610 --> 00:04:59.060
帮助他和他的公司挽救

00:04:55.910 --> 00:05:02.990
项目，但他不知道如何申请

00:04:59.060 --> 00:05:05.210
将微服务引入BPMS的想法

00:05:02.990 --> 00:05:09.560
会尽力帮助布鲁斯

00:05:05.210 --> 00:05:11.390
问题，在我们这样做之前，我们知道了什么

00:05:09.560 --> 00:05:12.860
微服务是关于一个的

00:05:11.390 --> 00:05:15.410
 BPM都是关于

00:05:12.860 --> 00:05:17.840
您不会收到我的任何供应商的消息

00:05:15.410 --> 00:05:21.950
相关的东西只会做微

00:05:17.840 --> 00:05:24.740
服务好，如果你问布鲁斯

00:05:21.950 --> 00:05:26.390
微服务对他来说意味着他会告诉

00:05:24.740 --> 00:05:29.450
你跟我说过的话

00:05:26.390 --> 00:05:32.180
数百倍的微服务

00:05:29.450 --> 00:05:35.300
关于自治是什么自治

00:05:32.180 --> 00:05:38.030
自治是多维向量

00:05:35.300 --> 00:05:41.960
最多由六个维度组成

00:05:38.030 --> 00:05:44.030
重要的是我们扩展的可扩展性

00:05:41.960 --> 00:05:46.970
我们提供服务的原因有很多

00:05:44.030 --> 00:05:48.530
例如我们可能需要处理

00:05:46.970 --> 00:05:51.200
流量越来越大

00:05:48.530 --> 00:05:53.150
更高，因此我们可以扩展我们的服务

00:05:51.200 --> 00:05:55.400
通过添加新资源（例如

00:05:53.150 --> 00:05:57.290
 CPU或内存，否则我们可能会扩展规模

00:05:55.400 --> 00:05:59.450
服务水平支持新实例

00:05:57.290 --> 00:06:02.180
我们服务的另一个原因

00:05:59.450 --> 00:06:05.720
扩展是我们想要保持弹性

00:06:02.180 --> 00:06:07.760
如果失败，然后垂直

00:06:05.720 --> 00:06:11.030
可扩展性不会给我们太多

00:06:07.760 --> 00:06:12.760
通常只是添加新实例，但是

00:06:11.030 --> 00:06:16.250
我真的想告诉你的是

00:06:12.760 --> 00:06:19.490
可扩展性不仅与技术有关

00:06:16.250 --> 00:06:22.310
他一生中的东西应用程序可能

00:06:19.490 --> 00:06:25.640
到大小的那一刻

00:06:22.310 --> 00:06:28.970
技术深度可能达到的复杂性

00:06:25.640 --> 00:06:31.220
如此高的水平，以至于系统

00:06:28.970 --> 00:06:34.040
无法从组织机构扩展或

00:06:31.220 --> 00:06:35.960
成本角度，就是这样

00:06:34.040 --> 00:06:37.729
叔叔很好地描述了这个例子

00:06:35.960 --> 00:06:40.400
鲍勃在他的书《干净》中

00:06:37.729 --> 00:06:43.880
当他真正的建筑

00:06:40.400 --> 00:06:47.870
真正的公司，并告诉我们一些

00:06:43.880 --> 00:06:49.940
一些措施有关如何

00:06:47.870 --> 00:06:51.200
事情因发布而改变

00:06:49.940 --> 00:06:53.630
您可以在这里首先看到的是

00:06:51.200 --> 00:06:55.550
数字是工程师人数

00:06:53.630 --> 00:06:57.830
发展所需要的

00:06:55.550 --> 00:07:00.350
彻底维护产品

00:06:57.830 --> 00:07:04.340
在同一发布中不断发布

00:07:00.350 --> 00:07:06.560
时间代码行数

00:07:04.340 --> 00:07:08.960
业务线的代码行是

00:07:06.560 --> 00:07:12.470
在每次迭代中被编写为

00:07:08.960 --> 00:07:15.700
减少意味着单位

00:07:12.470 --> 00:07:18.920
单个业务代码行的成本

00:07:15.700 --> 00:07:20.780
越来越高

00:07:18.920 --> 00:07:23.150
我们编写的代码最少的人

00:07:20.780 --> 00:07:25.910
生产率越低，什么

00:07:23.150 --> 00:07:28.100
我们的首席执行官现在看到的是我们的IT 

00:07:25.910 --> 00:07:30.080
部门的成本不再像1 

00:07:28.100 --> 00:07:32.660
一百万美元，它花了大约两千万

00:07:30.080 --> 00:07:35.000
美元，所以您可以看到它有多重要

00:07:32.660 --> 00:07:38.120
照顾组织

00:07:35.000 --> 00:07:41.600
以及可扩展性

00:07:38.120 --> 00:07:42.680
自治我们系统的每个部分

00:07:41.600 --> 00:07:44.930
组件应该是可扩展的

00:07:42.680 --> 00:07:45.830
就像我们的组织一样独立

00:07:44.930 --> 00:07:51.830
确实

00:07:45.830 --> 00:07:55.820
所以这是布鲁斯，你在挣扎很多

00:07:51.830 --> 00:07:58.190
在产生任何单一变化的过程中

00:07:55.820 --> 00:08:01.220
无奈那里的生产力非常

00:07:58.190 --> 00:08:05.390
低，所以我们需要在这方面帮助我们

00:08:01.220 --> 00:08:08.330
面积以及

00:08:05.390 --> 00:08:10.210
自主向量是部署的方式

00:08:08.330 --> 00:08:11.330
每个微服务都在部署

00:08:10.210 --> 00:08:14.140
包含

00:08:11.330 --> 00:08:16.550
部署频率应为

00:08:14.140 --> 00:08:19.100
团队的个人决定

00:08:16.550 --> 00:08:22.160
实际上它的管理是负责任的

00:08:19.100 --> 00:08:26.770
对于这种特殊的服务，我们当然

00:08:22.160 --> 00:08:28.880
通常我们通常的目标是像

00:08:26.770 --> 00:08:30.920
贯穿始终的一致部署架构

00:08:28.880 --> 00:08:33.140
整个团队中的公司

00:08:30.920 --> 00:08:35.000
像ACL这样的大型组件

00:08:33.140 --> 00:08:37.040
例子或正在工作的公司

00:08:35.000 --> 00:08:39.470
根据严格的法律法规，但需要

00:08:37.040 --> 00:08:41.630
跟随其他一些独特的软件

00:08:39.470 --> 00:08:44.600
开发生命周期，但无论如何

00:08:41.630 --> 00:08:46.700
提供我们需要的部署自主权

00:08:44.600 --> 00:08:48.800
使我们的服务与

00:08:46.700 --> 00:08:51.290
可能如何提供这个

00:08:48.800 --> 00:08:52.930
高凝聚力的独立性

00:08:51.290 --> 00:08:55.900
提供高凝聚力

00:08:52.930 --> 00:08:58.870
概括地说，这意味着

00:08:55.900 --> 00:09:01.210
包含的逻辑微服务必须是

00:08:58.870 --> 00:09:03.310
专注于具体业务

00:09:01.210 --> 00:09:07.750
功能，不泄漏给其他人

00:09:03.310 --> 00:09:10.600
服务微服务不仅

00:09:07.750 --> 00:09:12.370
关于这些代码是数据库

00:09:10.600 --> 00:09:14.530
好，每个微服务都应该

00:09:12.370 --> 00:09:15.940
管理数据本身，您应该管理

00:09:14.530 --> 00:09:18.190
数据对自己负责

00:09:15.940 --> 00:09:19.930
保护访问数据库而不是

00:09:18.190 --> 00:09:24.570
允许您实际上停止服务

00:09:19.930 --> 00:09:28.350
访问架构或修改数据，以及

00:09:24.570 --> 00:09:31.150
将我们的业务分为几部分

00:09:28.350 --> 00:09:32.710
选择合适的技术

00:09:31.150 --> 00:09:34.450
对于问题的复杂性

00:09:32.710 --> 00:09:35.890
我们目前正在解决，我们可能会

00:09:34.450 --> 00:09:37.630
不同的技术

00:09:35.890 --> 00:09:38.950
我们可能使用的复杂业务逻辑

00:09:37.630 --> 00:09:42.520
直接针对不同的技术

00:09:38.950 --> 00:09:45.310
云的 spring data 样本示例

00:09:42.520 --> 00:09:47.020
申请，同时我们可能

00:09:45.310 --> 00:09:50.110
也尝试新技术

00:09:47.020 --> 00:09:53.230
和一些单一服务不影响

00:09:50.110 --> 00:09:57.250
整个系统，以便我们可以更多

00:09:53.230 --> 00:09:59.500
在市场上具有竞争力

00:09:57.250 --> 00:10:02.190
分布式系统故障世界

00:09:59.500 --> 00:10:04.990
并且不可避免地会发生

00:10:02.190 --> 00:10:07.780
那么为什么要使用一个计数模块

00:10:04.990 --> 00:10:10.950
示例故障阻止了

00:10:07.780 --> 00:10:14.530
阅读我的特斯拉充电会议

00:10:10.950 --> 00:10:17.290
对，自治也是自治

00:10:14.530 --> 00:10:19.630
失败的原因每个失败的微服务

00:10:17.290 --> 00:10:22.750
应该会影响

00:10:19.630 --> 00:10:25.540
最小程度，最后

00:10:22.750 --> 00:10:28.180
如果没有的话，什么也不会发生

00:10:25.540 --> 00:10:31.420
为人们服务的微服务只能

00:10:28.180 --> 00:10:33.670
在组织工作的地方工作

00:10:31.420 --> 00:10:36.550
文化已经准备好给团队

00:10:33.670 --> 00:10:38.110
自主照顾的可能性

00:10:36.550 --> 00:10:39.610
产品从头到尾

00:10:38.110 --> 00:10:42.700
从第一个分析开始

00:10:39.610 --> 00:10:44.650
在整个生命周期中，他们

00:10:42.700 --> 00:10:46.450
需要让每个团队的领导

00:10:44.650 --> 00:10:50.710
出现自己没有地方

00:10:46.450 --> 00:10:53.050
命令和控制多少次

00:10:50.710 --> 00:10:54.610
生气以及你的事情如何运作

00:10:53.050 --> 00:10:57.880
预测事物如何交流

00:10:54.610 --> 00:11:00.280
彼此之间，我们越来越

00:10:57.880 --> 00:11:03.030
经常感到沮丧，对吧

00:11:00.280 --> 00:11:05.860
不是那样发生的

00:11:03.030 --> 00:11:07.410
根据康威定律， 

00:11:05.860 --> 00:11:10.360
这里

00:11:07.410 --> 00:11:12.310
每个组织最终都会

00:11:10.360 --> 00:11:15.870
创建一个镜像的系统

00:11:12.310 --> 00:11:20.110
公司的沟通计划

00:11:15.870 --> 00:11:22.449
我们开发人员经常会忽略

00:11:20.110 --> 00:11:24.790
业务知道如何编写我们不知道的代码

00:11:22.449 --> 00:11:27.490
需要正确地与他们交谈，你呢

00:11:24.790 --> 00:11:29.319
知道这种无知会发生什么

00:11:27.490 --> 00:11:31.949
被放入提交的代码中， 

00:11:29.319 --> 00:11:34.060
力求得到我们应该怎么做

00:11:31.949 --> 00:11:37.089
相反，我们应该与这些人交谈

00:11:34.060 --> 00:11:39.250
尝试找到共同点尝试

00:11:37.089 --> 00:11:41.440
找出什么是真正的生意

00:11:39.250 --> 00:11:44.199
价值在哪里

00:11:41.440 --> 00:11:47.560
赚钱，我们在哪里赔钱等

00:11:44.199 --> 00:11:50.980
只有当我们在同一页面上时， 

00:11:47.560 --> 00:11:54.009
可以真正创建真实的有界上下文

00:11:50.980 --> 00:11:56.079
从而提供真正的凝聚力

00:11:54.009 --> 00:11:59.529
微服务自治微服务

00:11:56.079 --> 00:12:02.470
这就是为什么我们应该建议布鲁斯

00:11:59.529 --> 00:12:04.509
从事件风暴事件开始

00:12:02.470 --> 00:12:06.370
风暴是一种基于车间的方法

00:12:04.509 --> 00:12:09.160
探索业务领域业务

00:12:06.370 --> 00:12:14.620
继续前进，令人难以置信

00:12:09.160 --> 00:12:16.389
有效容易又有趣

00:12:14.620 --> 00:12:18.160
图片事件风暴会话是

00:12:16.389 --> 00:12:21.639
可能的变化之一

00:12:18.160 --> 00:12:23.850
研讨会聚集了来自不同地方的人们

00:12:21.639 --> 00:12:27.370
地区利益相关者商界人士

00:12:23.850 --> 00:12:30.279
分析架构师开发人员

00:12:27.370 --> 00:12:32.199
谁可以对

00:12:30.279 --> 00:12:35.230
我们目前正在研究的问题

00:12:32.199 --> 00:12:38.050
在这样的工作坊之后离开房间

00:12:35.230 --> 00:12:41.439
每个参与者的水平相同

00:12:38.050 --> 00:12:45.370
我们在这次研讨会上的知识

00:12:41.439 --> 00:12:47.889
可以了解真正的问题在哪里

00:12:45.370 --> 00:12:49.810
业务流程看起来如何

00:12:47.889 --> 00:12:51.910
是驱动

00:12:49.810 --> 00:12:54.579
我们在哪里赔钱的过程

00:12:51.910 --> 00:12:56.500
在我们赢得声誉的地方赚钱

00:12:54.579 --> 00:12:59.649
我们失去声誉的地方

00:12:56.500 --> 00:13:01.480
问题是重中之重

00:12:59.649 --> 00:13:04.240
为我们提供了进一步的工作基础，例如

00:13:01.480 --> 00:13:07.120
设计级战术会议

00:13:04.240 --> 00:13:09.100
可以真正满足我们

00:13:07.120 --> 00:13:14.139
聚合域中的实体

00:13:09.100 --> 00:13:16.269
驱动设计，建筑博客等为什么我们

00:13:14.139 --> 00:13:18.730
在谈论这个方面

00:13:16.269 --> 00:13:21.850
商业收益

00:13:18.730 --> 00:13:24.760
因为在每个公司里，人们倾向于

00:13:21.850 --> 00:13:27.430
先做好两件事

00:13:24.760 --> 00:13:30.400
这自然是好的，第二

00:13:27.430 --> 00:13:33.640
忽略团队之外发生的事情，或者

00:13:30.400 --> 00:13:35.710
该部门和像我们这样的无知

00:13:33.640 --> 00:13:40.840
已经提到这是非常危险的

00:13:35.710 --> 00:13:43.300
因为我们可能会失去大局，不要

00:13:40.840 --> 00:13:46.900
知道事物如何相互影响

00:13:43.300 --> 00:13:49.240
这就是筒仓的诞生和经营方式

00:13:46.900 --> 00:13:51.190
在每个组织中，属于您的属于您

00:13:49.240 --> 00:13:53.110
和你在后面是一样的

00:13:51.190 --> 00:13:57.160
它永远不会局限于一种

00:13:53.110 --> 00:14:00.730
仅一家仓库的业务

00:13:57.160 --> 00:14:02.220
总是关闭两个孤岛，总是意味着

00:14:00.730 --> 00:14:04.630
没有单一的真理

00:14:02.220 --> 00:14:07.120
在了解业务方面

00:14:04.630 --> 00:14:08.710
过程，它也是

00:14:07.120 --> 00:14:10.840
混乱，因为人们来自一个

00:14:08.710 --> 00:14:12.550
一个筒仓的部门可能会使用

00:14:10.840 --> 00:14:17.260
同一术语的不同定义

00:14:12.550 --> 00:14:19.990
比所有其他人总结一个

00:14:17.260 --> 00:14:22.360
业务问题很难解决

00:14:19.990 --> 00:14:24.040
在此进行讨论和难以想象

00:14:22.360 --> 00:14:26.620
事件风暴，使我们能够

00:14:24.040 --> 00:14:29.620
克服所有这些障碍和工作

00:14:26.620 --> 00:14:31.570
与

00:14:29.620 --> 00:14:34.300
不会基于的业务流程

00:14:31.570 --> 00:14:36.940
一些UML或BPMN图提供了出生

00:14:34.300 --> 00:14:40.770
通过分析师，这将是一个很好的生活

00:14:36.940 --> 00:14:42.790
知识的活生生之源

00:14:40.770 --> 00:14:44.380
业务流程实施

00:14:42.790 --> 00:14:45.580
可能会跨越他们打印的不同团队

00:14:44.380 --> 00:14:48.010
他们需要交流的微服务

00:14:45.580 --> 00:14:49.840
莫名其妙地彼此和布鲁斯

00:14:48.010 --> 00:14:53.530
需要从这里开始

00:14:49.840 --> 00:14:55.990
了解他为什么会陷入困境

00:14:53.530 --> 00:14:57.820
代码和内容，了解什么

00:14:55.990 --> 00:15:02.380
系统当前正在做什么以及它在做什么

00:14:57.820 --> 00:15:04.420
应该在做，他知道在哪里

00:15:02.380 --> 00:15:07.030
首先，他知道我的服务是什么

00:15:04.420 --> 00:15:09.760
关于一切，但他仍然不知道

00:15:07.030 --> 00:15:12.910
如何将微服务应用于BPMS 

00:15:09.760 --> 00:15:17.800
让我们问一下布鲁斯，什么是bpm 

00:15:12.910 --> 00:15:19.990
在最高级别上，大多数BPMS 

00:15:17.800 --> 00:15:23.230
系统由以下部分组成

00:15:19.990 --> 00:15:23.680
当然这只是一般的高级

00:15:23.230 --> 00:15:25.390
概观

00:15:23.680 --> 00:15:28.030
他们可能是其他一些组件

00:15:25.390 --> 00:15:31.360
好吧，但让我们保持简单

00:15:28.030 --> 00:15:32.290
 HP PMS的心脏有一个叫做

00:15:31.360 --> 00:15:34.570
工作流程和

00:15:32.290 --> 00:15:37.139
您可以将其视为黑匣子

00:15:34.570 --> 00:15:39.579
只负责第一次执行

00:15:37.139 --> 00:15:41.560
包括人工任务到服务任务

00:15:39.579 --> 00:15:44.320
执行访问控制管理

00:15:41.560 --> 00:15:46.060
处理元数据等，但部分

00:15:44.320 --> 00:15:49.440
企业真的在寻找那些

00:15:46.060 --> 00:15:52.149
看中他们为什么咬他们的眼睛

00:15:49.440 --> 00:15:54.670
他们需要有一个共同的观点

00:15:52.149 --> 00:15:57.970
真正减轻他们的工作压力将对他们有帮助

00:15:54.670 --> 00:16:01.269
在日常生活中以及未来

00:15:57.970 --> 00:16:03.519
我们的报告业务有价值的东西

00:16:01.269 --> 00:16:05.860
需要知道流程如何

00:16:03.519 --> 00:16:08.170
如果他们赚钱或

00:16:05.860 --> 00:16:09.910
如果他们赔钱

00:16:08.170 --> 00:16:12.130
那里也有磨牙

00:16:09.910 --> 00:16:13.690
在这里我们可以实际塑造过程

00:16:12.130 --> 00:16:16.389
带有一些标准符号，例如BPM 

00:16:13.690 --> 00:16:18.399
注释以及一些系统

00:16:16.389 --> 00:16:22.149
实际上是集成连接器

00:16:18.399 --> 00:16:24.579
使我们能够将bpms与

00:16:22.149 --> 00:16:27.329
内部系统的所有其他部分

00:16:24.579 --> 00:16:29.380
这是一个高级概述

00:16:27.329 --> 00:16:34.389
让我们来看看架构

00:16:29.380 --> 00:16:37.269
现在不用担心，我会放大这些

00:16:34.389 --> 00:16:39.069
当然又是一个非常

00:16:37.269 --> 00:16:42.639
简化的视图可能还有更多

00:16:39.069 --> 00:16:44.860
块，但让用户保持简单

00:16:42.639 --> 00:16:46.930
通过一些与系统交互

00:16:44.860 --> 00:16:49.300
看中你的眼睛，让我们说

00:16:46.930 --> 00:16:51.100
最终以一些你不能

00:16:49.300 --> 00:16:54.010
控制器与您一起做的是

00:16:51.100 --> 00:16:56.139
它将请求转发给谁

00:16:54.010 --> 00:16:57.940
然后通常在模型中

00:16:56.139 --> 00:17:00.279
历史记录以及所有报告用户和

00:16:57.940 --> 00:17:02.170
访问管理人员任务公司

00:17:00.279 --> 00:17:04.510
任务列表和所有与任务相关的东西

00:17:02.170 --> 00:17:08.199
最终进入工作流引擎，所有这些

00:17:04.510 --> 00:17:10.510
实际上通常使用的组件

00:17:08.199 --> 00:17:12.970
关系数据库保持状态

00:17:10.510 --> 00:17:16.299
处理数据，现在的问题是

00:17:12.970 --> 00:17:18.669
该架构是否与

00:17:16.299 --> 00:17:22.480
我们一直在谈论的自主权

00:17:18.669 --> 00:17:24.640
尝试找出我们是否具有可扩展性

00:17:22.480 --> 00:17:26.890
时间的流逝，我们没有他们的规模

00:17:24.640 --> 00:17:29.140
整个系统，或者我们根本不扩展

00:17:26.890 --> 00:17:31.179
我们拥有技术自主权

00:17:29.140 --> 00:17:32.650
因为我们被限制使用

00:17:31.179 --> 00:17:35.080
所有领域内的同一套技术

00:17:32.650 --> 00:17:37.540
我们有业务流程部署吗

00:17:35.080 --> 00:17:41.140
自治我们不部署

00:17:37.540 --> 00:17:43.190
整个系统，或者我们什么都不部署

00:17:41.140 --> 00:17:45.460
一个系统实际上

00:17:43.190 --> 00:17:47.960
允许我们部署流程

00:17:45.460 --> 00:17:49.970
独立地在下面

00:17:47.960 --> 00:17:52.130
相同的资源集，如果有的话

00:17:49.970 --> 00:17:53.540
出了错我们要么得到要么要么得到

00:17:52.130 --> 00:17:56.840
部署自主权或不计其数

00:17:53.540 --> 00:17:59.180
我们有数据自主权吗

00:17:56.840 --> 00:18:01.670
并非每个业务流程都使用

00:17:59.180 --> 00:18:04.670
相同的通用数据库通用架构

00:18:01.670 --> 00:18:06.590
相同的桌子，甚至很难

00:18:04.670 --> 00:18:09.950
提取与一个相关的数据

00:18:06.590 --> 00:18:11.630
特定业务流程和术语

00:18:09.950 --> 00:18:14.660
的人告诉我，团队通常

00:18:11.630 --> 00:18:16.520
在他们需要的通用代码库上工作

00:18:14.660 --> 00:18:19.430
安排部署不断合并

00:18:16.520 --> 00:18:22.700
他们的改变解决了冲突，所以这些

00:18:19.430 --> 00:18:24.830
各种系统通常不适用于

00:18:22.700 --> 00:18:27.800
微服务或吨的核心思想

00:18:24.830 --> 00:18:30.760
如果您对以下任何一项有所了解

00:18:27.800 --> 00:18:36.590
适用于此的货架解决方案

00:18:30.760 --> 00:18:39.590
让我知道布鲁斯是如何发展的

00:18:36.590 --> 00:18:42.710
可能会觉得布鲁斯很伤心， 

00:18:39.590 --> 00:18:45.250
他说不仅是因为

00:18:42.710 --> 00:18:48.710
 bpms中的体系结构不适用于

00:18:45.250 --> 00:18:50.750
他也是微服务的自主者

00:18:48.710 --> 00:18:52.910
说，因为他的工作很频繁

00:18:50.750 --> 00:18:55.670
手册以提供一些更改

00:18:52.910 --> 00:18:58.030
他经常需要我唯一的点击

00:18:55.670 --> 00:19:02.810
一些UI管理控制台

00:18:58.030 --> 00:19:04.730
创建一个视图窗体或他还

00:19:02.810 --> 00:19:07.880
有时需要做一些肮脏的骇客

00:19:04.730 --> 00:19:09.500
使事情起作用，他甚至不能

00:19:07.880 --> 00:19:13.090
将Java版本从7:00提升到

00:19:09.500 --> 00:19:17.570
 8:00他的技术请求受到限制，但

00:19:13.090 --> 00:19:19.970
我们照建议布鲁斯在这里

00:19:17.570 --> 00:19:22.310
与他的快速事件讨论会

00:19:19.970 --> 00:19:24.890
同事的过程之一

00:19:22.310 --> 00:19:27.140
实际上存在于他们的公司中

00:19:24.890 --> 00:19:28.400
这个过程称为地址变更

00:19:27.140 --> 00:19:30.620
让我们看看它是如何工作的

00:19:28.400 --> 00:19:32.900
每当客户致电呼叫中心并

00:19:30.620 --> 00:19:34.550
请求其他人更改通话

00:19:32.900 --> 00:19:36.140
中心员工尝试

00:19:34.550 --> 00:19:37.970
授权，因此客户需要

00:19:36.140 --> 00:19:39.530
提供一些客户密码，如果

00:19:37.970 --> 00:19:42.130
是正确的，其他变化得到

00:19:39.530 --> 00:19:44.990
授权其他人更改是

00:19:42.130 --> 00:19:46.400
然后注册IML反金钱

00:19:44.990 --> 00:19:49.190
洗钱程序正在开始

00:19:46.400 --> 00:19:51.140
并根据结果是否

00:19:49.190 --> 00:19:52.880
我会检查它是否为阳性

00:19:51.140 --> 00:19:56.050
我们确认其他更改，或者

00:19:52.880 --> 00:19:58.059
然后我们不记得其他人在改变， 

00:19:56.050 --> 00:20:00.400
因为布鲁斯的BPM非常流利， 

00:19:58.059 --> 00:20:01.900
他很快画了一个图

00:20:00.400 --> 00:20:04.630
对应于我们刚刚建模的

00:20:01.900 --> 00:20:07.660
粘滞便笺，但有所不同

00:20:04.630 --> 00:20:09.970
该图可能不可读

00:20:07.660 --> 00:20:12.610
每个人都可以读取便签

00:20:09.970 --> 00:20:14.380
对于地球上几乎每个人来说

00:20:12.610 --> 00:20:18.400
只是人类写的便签

00:20:14.380 --> 00:20:20.020
用钢笔布鲁斯也足够

00:20:18.400 --> 00:20:22.450
分析，假设会有

00:20:20.020 --> 00:20:24.100
三个微服务授权者

00:20:22.450 --> 00:20:25.929
对于大多数企业来说将是常见的

00:20:24.100 --> 00:20:28.420
流程并将负责

00:20:25.929 --> 00:20:30.790
授权正在致电的客户

00:20:28.420 --> 00:20:32.679
呼叫中心客户联系

00:20:30.790 --> 00:20:35.020
负责管理客户

00:20:32.679 --> 00:20:38.260
联系信息和电子邮件反

00:20:35.020 --> 00:20:39.820
这些与生物学相关的过程

00:20:38.260 --> 00:20:42.630
服务需要以某种方式进行沟通

00:20:39.820 --> 00:20:44.470
当然有很多

00:20:42.630 --> 00:20:47.470
甚至可能的沟通方式

00:20:44.470 --> 00:20:49.330
在公司内部混在一起，但我们想

00:20:47.470 --> 00:20:50.950
保持我们的服务自治

00:20:49.330 --> 00:20:53.020
尽可能问这对夫妻

00:20:50.950 --> 00:20:55.860
所以我们将保持同步

00:20:53.020 --> 00:20:58.420
版本化的同步选项

00:20:55.860 --> 00:21:00.970
通讯什么是同步选项

00:20:58.420 --> 00:21:04.179
我们有他们的第一个是

00:21:00.970 --> 00:21:05.800
舞蹈编排她如何运作良好

00:21:04.179 --> 00:21:09.070
地理学假设没有中心

00:21:05.800 --> 00:21:12.220
系统中要路由的点

00:21:09.070 --> 00:21:14.650
服务之间的消息并决定哪个

00:21:12.220 --> 00:21:17.770
消息应该去哪里服务

00:21:14.650 --> 00:21:20.380
发出事件消息，不在乎

00:21:17.770 --> 00:21:22.660
另一方面发生在消费者身上

00:21:20.380 --> 00:21:25.540
阅读这些消息并接受

00:21:22.660 --> 00:21:29.140
相互作用，这种模式称为

00:21:25.540 --> 00:21:31.480
事件链她在我们的情况下的摄影

00:21:29.140 --> 00:21:33.190
看起来这个客户感到惊讶

00:21:31.480 --> 00:21:34.990
其他人将请求的事件更改为

00:21:33.190 --> 00:21:37.570
甚至是消费它的老板授权人

00:21:34.990 --> 00:21:39.580
只会分析成功的

00:21:37.570 --> 00:21:41.410
授权者的路径还可以

00:21:39.580 --> 00:21:43.570
退回授权的其他交易所

00:21:41.410 --> 00:21:45.220
事件此事件由客户使用

00:21:43.570 --> 00:21:47.260
联系客户联系说其他

00:21:45.220 --> 00:21:49.150
交易所被注册不利变化

00:21:47.260 --> 00:21:51.910
寄存器由AM L使用AM L 

00:21:49.150 --> 00:21:54.040
成功返回AM L检查，这是

00:21:51.910 --> 00:21:56.530
再次由客户联系人消耗，并且

00:21:54.040 --> 00:21:57.900
确认地址更改后返回

00:21:56.530 --> 00:22:01.840
客户端

00:21:57.900 --> 00:22:03.820
总的来说hurray图是

00:22:01.840 --> 00:22:07.840
沟通，但有业务往来

00:22:03.820 --> 00:22:10.440
我们可以发现一些问题的过程

00:22:07.840 --> 00:22:14.380
这些是什么

00:22:10.440 --> 00:22:16.690
授权服务听别人

00:22:14.380 --> 00:22:20.770
更改请求livin这是业务

00:22:16.690 --> 00:22:23.170
处理相关事件，以便我们随时随地

00:22:20.770 --> 00:22:26.020
添加新的业务流程授权者

00:22:23.170 --> 00:22:29.260
需要进行修改并且清楚

00:22:26.020 --> 00:22:32.400
假设有人可以说为什么

00:22:29.260 --> 00:22:34.540
我们不使用一些通用的

00:22:32.400 --> 00:22:39.179
授权请求，那么我们不会

00:22:34.540 --> 00:22:42.970
需要修改任何内容，但是如果我们

00:22:39.179 --> 00:22:47.590
在一般情况下应该意味着

00:22:42.970 --> 00:22:49.720
对企业进行授权请求

00:22:47.590 --> 00:22:52.570
在我们的情况下对业务毫无意义

00:22:49.720 --> 00:22:56.860
非常可能你没有任何情况

00:22:52.570 --> 00:23:00.640
无论如何，它会执行授权请求

00:22:56.860 --> 00:23:02.620
消息，我们称它为消息

00:23:00.640 --> 00:23:05.350
致力于一项特定的服务

00:23:02.620 --> 00:23:08.140
没有任何其他服务是不应该的

00:23:05.350 --> 00:23:11.530
阅读这是直接的消息

00:23:08.140 --> 00:23:13.630
而且当务之急是因为

00:23:11.530 --> 00:23:15.190
我们想执行一个动作，所以它不是

00:23:13.630 --> 00:23:17.530
即使是评论，也将是

00:23:15.190 --> 00:23:19.750
错误使用事件消息模式

00:23:17.530 --> 00:23:21.910
但这只是一个假设

00:23:19.750 --> 00:23:23.920
讨论取决于实际用途

00:23:21.910 --> 00:23:26.620
无论如何，我们可能还会遇到另一个问题

00:23:23.920 --> 00:23:29.650
此处是客户联系需求

00:23:26.620 --> 00:23:31.360
要知道有一些ml过程

00:23:29.650 --> 00:23:33.429
去那里，因为它需要

00:23:31.360 --> 00:23:37.330
听毫升检查成功毫升检查

00:23:33.429 --> 00:23:39.250
失败的事件对，所以无论何时我们想要

00:23:37.330 --> 00:23:41.530
改变我们的步骤顺序

00:23:39.250 --> 00:23:44.470
流程，我们需要同时修改

00:23:41.530 --> 00:23:48.010
这些组件我们有

00:23:44.470 --> 00:23:50.260
替代数据，是的

00:23:48.010 --> 00:23:52.059
编排无非就是

00:23:50.260 --> 00:23:56.400
甚至是普通的转换模式

00:23:52.059 --> 00:23:59.230
这就是客户端的工作方式

00:23:56.400 --> 00:24:01.420
发送命令命令地址

00:23:59.230 --> 00:24:03.700
改变过程和另一个奇怪

00:24:01.420 --> 00:24:05.980
过程实际上是我们的新演员

00:24:03.700 --> 00:24:08.080
网络序列图及其他

00:24:05.980 --> 00:24:09.970
变更流程是协调者

00:24:08.080 --> 00:24:12.309
业务流程协调员的角色

00:24:09.970 --> 00:24:14.410
是决定应该做什么

00:24:12.309 --> 00:24:17.559
接下来应将评论发送到

00:24:14.410 --> 00:24:19.510
哪个服务和客户端发送

00:24:17.559 --> 00:24:22.510
应对变化的命令性命令

00:24:19.510 --> 00:24:23.320
依次通过

00:24:22.510 --> 00:24:25.240
消息破灭

00:24:23.320 --> 00:24:27.100
授权他人授权他人

00:24:25.240 --> 00:24:30.130
更改授权者发送的偶数

00:24:27.100 --> 00:24:32.740
返回，Orchestrator读取事件

00:24:30.130 --> 00:24:35.350
并决定应该做什么

00:24:32.740 --> 00:24:37.420
接下来要做的下一步是

00:24:35.350 --> 00:24:39.100
在客户中注册地址更改

00:24:37.420 --> 00:24:40.840
联系，所以他通过发送

00:24:39.100 --> 00:24:42.910
通过一些特定的消息总线

00:24:40.840 --> 00:24:44.620
引导寄存器地址更改

00:24:42.910 --> 00:24:46.870
命令给客户的联系方式是

00:24:44.620 --> 00:24:49.150
用另一个回应

00:24:46.870 --> 00:24:51.910
命令转到AM L AM L响应

00:24:49.150 --> 00:24:54.700
另一个命令与客户联系

00:24:51.910 --> 00:24:56.800
然后响应返回到

00:24:54.700 --> 00:24:59.140
客户，你知道布鲁斯吗

00:24:56.800 --> 00:25:01.300
问我可以加入过程吗

00:24:59.140 --> 00:25:03.820
协调器其他人更改流程

00:25:01.300 --> 00:25:06.130
客户联系，答案是肯定的

00:25:03.820 --> 00:25:08.650
我们可以根据六角形

00:25:06.130 --> 00:25:10.000
构建业务逻辑应

00:25:08.650 --> 00:25:12.480
与应用程序独立并且

00:25:10.000 --> 00:25:14.470
实际上是基础架构层

00:25:12.480 --> 00:25:18.510
在地址变更内实施

00:25:14.470 --> 00:25:21.880
过程，但并不总是那么简单

00:25:18.510 --> 00:25:23.740
然后我们可以实际映射专业人士

00:25:21.880 --> 00:25:27.370
具有商业服务的电路交易员

00:25:23.740 --> 00:25:31.650
想要一个我们如何知道是否可能

00:25:27.370 --> 00:25:35.440
将这些组件整合为一个

00:25:31.650 --> 00:25:38.350
实际上它应该对我们可用

00:25:35.440 --> 00:25:40.210
事件风暴会议之后，我们

00:25:38.350 --> 00:25:43.090
可以确定我们将获得的核心领域

00:25:40.210 --> 00:25:45.960
回到它很快又一个问题

00:25:43.090 --> 00:25:50.080
来自布鲁斯，如果有什么问题怎么办

00:25:45.960 --> 00:25:53.740
发生在这里，这有点像

00:25:50.080 --> 00:25:56.230
我们需要存储交易权

00:25:53.740 --> 00:26:00.160
其他人的状态变化过程

00:25:56.230 --> 00:26:02.290
编曲者，理论上很清楚

00:26:00.160 --> 00:26:04.680
我们不需要产生我们的状态

00:26:02.290 --> 00:26:11.140
可以使用路由清单模式并发送

00:26:04.680 --> 00:26:13.600
应该采取的其他步骤， 

00:26:11.140 --> 00:26:16.180
邮件标题，例如通过清楚

00:26:13.600 --> 00:26:18.610
实际上，我们会

00:26:16.180 --> 00:26:21.310
而不是使用流程管理器或传奇

00:26:18.610 --> 00:26:23.830
模式，这就是我们在这里拥有的

00:26:21.310 --> 00:26:26.830
注册一个传奇的地址更改

00:26:23.830 --> 00:26:29.590
开始我们的交易将打开

00:26:26.830 --> 00:26:32.350
交易并基于

00:26:29.590 --> 00:26:35.860
如果确认地址更改，则为AML 

00:26:32.350 --> 00:26:36.940
我们提交交易或反洗钱

00:26:35.860 --> 00:26:39.789
检查是否定的

00:26:36.940 --> 00:26:42.129
然后我们回想起另一场交流

00:26:39.789 --> 00:26:44.769
回滚交易，并考虑

00:26:42.129 --> 00:26:48.070
持久性和引擎

00:26:44.769 --> 00:26:49.570
我们可能有新的协调员

00:26:48.070 --> 00:26:52.090
我们可以使用关系吸收

00:26:49.570 --> 00:26:54.070
我们可以使用参与者模型的数据库

00:26:52.090 --> 00:26:56.379
使用芬兰的状态机，我们可以使用

00:26:54.070 --> 00:26:59.529
一些自定义解决方案，是的，我们可以

00:26:56.379 --> 00:27:01.269
也使用活动例如

00:26:59.529 --> 00:27:03.849
从建筑上看

00:27:01.269 --> 00:27:07.059
观点，我被释放不用担心

00:27:03.849 --> 00:27:09.639
绿色组件是微服务

00:27:07.059 --> 00:27:11.409
这是我们所有业务的共同点

00:27:09.639 --> 00:27:14.379
到所有业务流程的流程

00:27:11.409 --> 00:27:21.190
女王是业务流程

00:27:14.379 --> 00:27:23.409
相关想象一下这是绿色的人流

00:27:21.190 --> 00:27:25.840
与我们在

00:27:23.409 --> 00:27:27.340
 VP MS用户与我们互动

00:27:25.840 --> 00:27:29.320
通过一些系统发现你的眼睛和

00:27:27.340 --> 00:27:32.499
最终出现在您的UI控件中

00:27:29.320 --> 00:27:35.229
控制器所做的就是转发命令

00:27:32.499 --> 00:27:36.820
通过Tower Pro中的Apache Kafka 

00:27:35.229 --> 00:27:39.190
像其他人一样巡回交易

00:27:36.820 --> 00:27:41.139
处理并将请求转发给我们

00:27:39.190 --> 00:27:43.509
常见组件，例如历史记录任务

00:27:41.139 --> 00:27:46.059
将报告放在用户或用户访问权限上

00:27:43.509 --> 00:27:48.999
经理这里有趣的是

00:27:46.059 --> 00:27:52.869
这些组件创建了网格模型

00:27:48.999 --> 00:27:54.999
通过阅读事件为您提供控制器

00:27:52.869 --> 00:27:58.450
从地址更改过程

00:27:54.999 --> 00:28:02.619
购买协调器听起来不对

00:27:58.450 --> 00:28:05.529
像安全s一样安全s我们是

00:28:02.619 --> 00:28:08.679
在此处发送命令动画事件

00:28:05.529 --> 00:28:11.229
处理相关事件

00:28:08.679 --> 00:28:14.039
在这里消费以生产

00:28:11.229 --> 00:28:16.299
读取模式是安全的

00:28:14.039 --> 00:28:18.190
有趣的也是正确的组件

00:28:16.299 --> 00:28:20.619
用户是属于的访问管理器

00:28:18.190 --> 00:28:22.779
以前和现在的相同模型是

00:28:20.619 --> 00:28:26.139
与流程服务分开

00:28:22.779 --> 00:28:28.389
培训师为什么还可以，因为处理器

00:28:26.139 --> 00:28:29.979
施法者不在乎

00:28:28.389 --> 00:28:31.720
授权部分实际上是

00:28:29.979 --> 00:28:35.229
实现了他唯一需要做的

00:28:31.720 --> 00:28:38.489
知道什么是哪个用户

00:28:35.229 --> 00:28:41.499
实际上试图执行一些动作

00:28:38.489 --> 00:28:42.970
接下来发生的是其他人

00:28:41.499 --> 00:28:45.639
更改过程程序施法者

00:28:42.970 --> 00:28:47.139
向Business Micro发送更多评论

00:28:45.639 --> 00:28:50.349
诸如超授权服务

00:28:47.139 --> 00:28:50.860
客户联系毫升并读取事件

00:28:50.349 --> 00:28:54.820
他们

00:28:50.860 --> 00:28:56.950
神话和每个微服务管理自己的

00:28:54.820 --> 00:29:00.490
在您自己的数据库中拥有自己的数据

00:28:56.950 --> 00:29:02.950
他们自己的模式等，我提到

00:29:00.490 --> 00:29:04.840
卡夫卡和布鲁斯知道卡夫卡真主

00:29:02.950 --> 00:29:10.690
在表演之前就知道

00:29:04.840 --> 00:29:13.929
优势，但他想知道为什么它很好

00:29:10.690 --> 00:29:16.960
在我们的情况下使用Kafka如何提供帮助

00:29:13.929 --> 00:29:19.330
我们的案子很好，我们实际上可以找到

00:29:16.960 --> 00:29:21.730
至少有以下三个原因

00:29:19.330 --> 00:29:26.260
所有消费者群体我们的加工商

00:29:21.730 --> 00:29:29.140
协调员不能听事件

00:29:26.260 --> 00:29:32.470
与其他听众竞争

00:29:29.140 --> 00:29:35.320
可能在这里某处

00:29:32.470 --> 00:29:37.419
互动中断了她的任何摄影

00:29:35.320 --> 00:29:39.610
发生在这里它将行动

00:29:37.419 --> 00:29:41.320
在自己的消费群体中

00:29:39.610 --> 00:29:43.960
第一件事第二件事是可伸缩性

00:29:41.320 --> 00:29:47.320
如果有的话，以主题划分为后盾

00:29:43.960 --> 00:29:51.010
例如一个主题的10个分区

00:29:47.320 --> 00:29:53.620
最多有10个流程实例

00:29:51.010 --> 00:29:55.179
协调器，最后是卡夫卡流

00:29:53.620 --> 00:29:56.590
这是构建的绝佳工具

00:29:55.179 --> 00:29:59.190
流和视图，我们会回来的

00:29:56.590 --> 00:30:03.220
以及图形流

00:29:59.190 --> 00:30:05.080
布鲁斯还有另一个问题，我们怎么能

00:30:03.220 --> 00:30:06.940
交付新的业务流程

00:30:05.080 --> 00:30:08.740
总是需要修改这个共同点

00:30:06.940 --> 00:30:11.590
像李的历史任务和

00:30:08.740 --> 00:30:13.330
报告是否需要修改它们

00:30:11.590 --> 00:30:15.250
每次我们宁愿有一个

00:30:13.330 --> 00:30:18.610
分布式模型而不是微观模型

00:30:15.250 --> 00:30:21.669
服务，所以答案是使用

00:30:18.610 --> 00:30:24.400
常规重新配置我的意思是

00:30:21.669 --> 00:30:27.880
通过这一点，我们可以建立一套

00:30:24.400 --> 00:30:31.630
可以告诉我们的一般事件

00:30:27.880 --> 00:30:34.570
关于哪种可能的状态

00:30:31.630 --> 00:30:38.110
当前的过程具体是什么

00:30:34.570 --> 00:30:40.090
一种事件可能是流程实例

00:30:38.110 --> 00:30:42.549
创建的流程实例已取消

00:30:40.090 --> 00:30:49.240
创建的任务分配的是

00:30:42.549 --> 00:30:52.380
完成，因此，我们离开

00:30:49.240 --> 00:30:54.940
我们自己可以选择

00:30:52.380 --> 00:30:55.990
不同的Orchestrator可供选择

00:30:54.940 --> 00:30:58.090
不同的协调器

00:30:55.990 --> 00:31:00.280
引擎进行实验，我们可能

00:30:58.090 --> 00:31:02.610
如果我if else else if 

00:31:00.280 --> 00:31:04.539
这个过程非常简单，我们可以使用

00:31:02.610 --> 00:31:08.199
我们可能会使用主动

00:31:04.539 --> 00:31:10.149
或我们喜欢的任何其他引擎

00:31:08.199 --> 00:31:11.649
遵循这些约定和

00:31:10.149 --> 00:31:15.549
来自布鲁斯的问题，谁来控制

00:31:11.649 --> 00:31:17.949
这项约定，团队将因为

00:31:15.549 --> 00:31:21.999
团队负责流程的结束

00:31:17.949 --> 00:31:23.889
结束，团队永远不会幸福

00:31:21.999 --> 00:31:26.019
该过程在历史记录或历史记录中不可见

00:31:23.889 --> 00:31:27.690
或在任务列表中，所以我们要小心

00:31:26.019 --> 00:31:30.969
其中相信我

00:31:27.690 --> 00:31:33.999
好来自布鲁斯的另一个问题

00:31:30.969 --> 00:31:35.440
您会实施协调器吗？ 

00:31:33.999 --> 00:31:39.639
我建议使用弹簧关闭

00:31:35.440 --> 00:31:43.269
串流至少有两个讲座

00:31:39.639 --> 00:31:44.949
提到春天的云流

00:31:43.269 --> 00:31:48.369
早上，这样我就不会深入

00:31:44.949 --> 00:31:49.769
进入细节，但概括地说

00:31:48.369 --> 00:31:52.959
流是提供

00:31:49.769 --> 00:31:55.269
消息中间件的抽象

00:31:52.959 --> 00:31:58.239
例如Kafka，例如启用

00:31:55.269 --> 00:31:59.799
声明式的沟通定义

00:31:58.239 --> 00:32:01.539
引导您实际看到的内容

00:31:59.799 --> 00:32:03.609
幻灯片是我们精心策划的

00:32:01.539 --> 00:32:05.859
 Orchestrator所做的就是

00:32:03.609 --> 00:32:08.709
进行通信，侦听命令

00:32:05.859 --> 00:32:12.069
其他更改流程频道主题

00:32:08.709 --> 00:32:14.529
它使通用过程中的事件惊奇

00:32:12.069 --> 00:32:18.069
活动主题和业务服务也

00:32:14.529 --> 00:32:20.229
有一个主题，一个频道令人惊叹

00:32:18.069 --> 00:32:20.739
事件一个频道收听

00:32:20.229 --> 00:32:25.209
命令

00:32:20.739 --> 00:32:27.609
还有更多的洒水流

00:32:25.209 --> 00:32:30.999
出色的测试支持

00:32:27.609 --> 00:32:34.419
通讯自动测试及其

00:32:30.999 --> 00:32:37.019
分布式跟踪支持

00:32:34.419 --> 00:32:39.999
库弹簧叫侦探和

00:32:37.019 --> 00:32:42.129
 Spring Cloud的合约测试

00:32:39.999 --> 00:32:45.159
也会收缩

00:32:42.129 --> 00:32:48.479
是春季的宝贵工具

00:32:45.159 --> 00:32:52.829
这种解决方案中的生态系统

00:32:48.479 --> 00:32:55.719
布鲁斯仍然不满意，问

00:32:52.829 --> 00:32:58.509
我怎么知道这个特殊的

00:32:55.719 --> 00:33:00.429
一个特定企业发出的事件

00:32:58.509 --> 00:33:01.799
微服务实际上与我的

00:33:00.429 --> 00:33:03.849
业务流程而不是其他

00:33:01.799 --> 00:33:07.989
另一个约定

00:33:03.849 --> 00:33:12.129
这个惯例是什么过程

00:33:07.989 --> 00:33:14.319
 Orchestrator发送命令可以增强

00:33:12.129 --> 00:33:16.209
带有所有信息的消息

00:33:14.319 --> 00:33:18.870
是唯一识别

00:33:16.209 --> 00:33:21.149
流程实例，无论是否

00:33:18.870 --> 00:33:24.360
邮件标题或常规标题

00:33:21.149 --> 00:33:25.740
负载的一部分无关紧要

00:33:24.360 --> 00:33:28.499
需要添加到邮件中

00:33:25.740 --> 00:33:30.749
企业微服务所要做的是

00:33:28.499 --> 00:33:34.889
只是拿这个头发送

00:33:30.749 --> 00:33:37.220
连看起来都不像

00:33:34.889 --> 00:33:41.659
打印什么

00:33:37.220 --> 00:33:44.850
它出现在布鲁斯的下一个问题中

00:33:41.659 --> 00:33:47.009
我如何将任务分配给用户

00:33:44.850 --> 00:33:48.960
卡夫卡溪流来了

00:33:47.009 --> 00:33:51.509
卡夫卡流是一个轻量级的

00:33:48.960 --> 00:33:54.990
建立在

00:33:51.509 --> 00:33:57.659
卡夫卡消费者和卡夫卡生产者及其

00:33:54.990 --> 00:33:59.850
让我们计算流发布事件

00:33:57.659 --> 00:34:02.009
和其他主题进行汇总

00:33:59.850 --> 00:34:05.940
窗口过滤和许多其他

00:34:02.009 --> 00:34:07.049
东西，关于任务清单，你有什么

00:34:05.940 --> 00:34:09.720
可以看到这里是我们可以

00:34:07.049 --> 00:34:11.700
声明性地定义我们如何消费

00:34:09.720 --> 00:34:14.300
通用流程事件主题是我们如何

00:34:11.700 --> 00:34:16.770
分组发送到那里的消息

00:34:14.300 --> 00:34:20.609
我们如何过滤它们，最后我们如何

00:34:16.770 --> 00:34:23.879
建立读取模型，实际上

00:34:20.609 --> 00:34:26.970
这就是我们的方法这就是我们的方法

00:34:23.879 --> 00:34:29.819
每天我们都在阅读vattenfall中的痣

00:34:26.970 --> 00:34:31.859
以这种方式建立阅读痣

00:34:29.819 --> 00:34:34.950
卡夫卡流很多，这是非常

00:34:31.859 --> 00:34:38.159
坚信我会做这项工作

00:34:34.950 --> 00:34:40.919
就报告而言也是一样

00:34:38.159 --> 00:34:43.710
你可以利用卡夫卡流吗

00:34:40.919 --> 00:34:49.169
例如可以使用MongoDB或Cassandra 

00:34:43.710 --> 00:34:51.599
实际存储视图的读取

00:34:49.169 --> 00:34:53.700
您可以在此处针对移动设备进行优化的视图

00:34:51.599 --> 00:34:57.000
 Scala可以使用一部分，也可以使用一些

00:34:53.700 --> 00:35:00.150
机器学习，你可以用这个

00:34:57.000 --> 00:35:02.280
您将获得如此多的技术自主权

00:35:00.150 --> 00:35:06.060
您可以产生有关业务的报告

00:35:02.280 --> 00:35:09.329
从来没有梦想过没有供应商会

00:35:06.060 --> 00:35:14.490
曾经为您提供现成的

00:35:09.329 --> 00:35:18.180
 DBMS解决方案布鲁斯如何监控其

00:35:14.490 --> 00:35:21.810
服务，并根据文章

00:35:18.180 --> 00:35:24.150
马丁·福勒题为《微服务》 

00:35:21.810 --> 00:35:26.819
我们进入微观的先决条件

00:35:24.150 --> 00:35:28.799
我们实际上应该提供的服务

00:35:26.819 --> 00:35:30.900
基本监控基本可观察性

00:35:28.799 --> 00:35:32.280
所以假设布鲁斯已经有了

00:35:30.900 --> 00:35:35.370
是

00:35:32.280 --> 00:35:36.870
我们说的结构有

00:35:35.370 --> 00:35:39.900
无数的可能性，但如果我们是

00:35:36.870 --> 00:35:41.790
春季烤面包机周围非常基本

00:35:39.900 --> 00:35:44.040
庞大的图书馆撒满Luthor 

00:35:41.790 --> 00:35:46.880
分布式跟踪，并且

00:35:44.040 --> 00:35:51.990
昨天实际上是在谈论

00:35:46.880 --> 00:35:53.760
在短短的时间内，侦探确实在

00:35:51.990 --> 00:35:57.630
无论何时我们发送

00:35:53.760 --> 00:36:00.150
任何消息，都有EDA追踪

00:35:57.630 --> 00:36:03.510
他加了脊椎，所以我们可以很容易地

00:36:00.150 --> 00:36:05.940
跟踪我们所有请求的路线，以便

00:36:03.510 --> 00:36:08.460
我们知道哪个化合物

00:36:05.940 --> 00:36:13.350
我们系统中的业务失败

00:36:08.460 --> 00:36:14.460
流程管理以便使用此

00:36:13.350 --> 00:36:16.770
公司

00:36:14.460 --> 00:36:18.660
很抱歉使用这个库来制作它

00:36:16.770 --> 00:36:20.190
有用，我们需要有一个中心位置

00:36:18.660 --> 00:36:22.260
我们可以在那里实际搜索

00:36:20.190 --> 00:36:24.210
日志和可能性之一

00:36:22.260 --> 00:36:26.430
例子是弹性搜索

00:36:24.210 --> 00:36:28.740
卡巴尼亚股票的锁，否则我们实际上可以

00:36:26.430 --> 00:36:31.140
搜索锁和执行

00:36:28.740 --> 00:36:33.450
锁，我们可以监视之间的延迟

00:36:31.140 --> 00:36:37.290
我们与Zipkin的服务或依赖关系

00:36:33.450 --> 00:36:39.210
我们可以使用千分尺普罗米修斯，我们

00:36:37.290 --> 00:36:41.190
甚至可以进一步

00:36:39.210 --> 00:36:43.590
语义监控是关于

00:36:41.190 --> 00:36:45.960
对我们的生活产品进行测试

00:36:43.590 --> 00:36:49.670
环境并检查我们的业务

00:36:45.960 --> 00:36:51.900
我们的关键业务流程

00:36:49.670 --> 00:36:56.910
记得我们说过

00:36:51.900 --> 00:36:58.340
微服务必不可少的部分

00:36:56.910 --> 00:37:00.600
应该是该过程的所有者

00:36:58.340 --> 00:37:03.480
我们有点回答了这个问题

00:37:00.600 --> 00:37:05.640
理想情况下，如果

00:37:03.480 --> 00:37:08.280
整个过程由一个人管理

00:37:05.640 --> 00:37:09.630
团队，如果流程协调员可以

00:37:08.280 --> 00:37:12.000
与某些业务一对一管理

00:37:09.630 --> 00:37:13.500
微服务那么那个问题

00:37:12.000 --> 00:37:16.800
他们甚至可以合并为一个

00:37:13.500 --> 00:37:19.200
应用程序，问题消失了，但是

00:37:16.800 --> 00:37:22.860
当过程跨多主

00:37:19.200 --> 00:37:26.070
服务，那么我们应该仔细考虑

00:37:22.860 --> 00:37:28.200
真正的核心部分是什么

00:37:26.070 --> 00:37:30.530
过程，这就是猛冲的地方

00:37:28.200 --> 00:37:33.540
帮助我们，因为这样我们可以确定

00:37:30.530 --> 00:37:34.770
核心领域，就我们而言

00:37:33.540 --> 00:37:37.680
你可以在另一个例子中看到的例子

00:37:34.770 --> 00:37:41.640
客户联系的交换过程是

00:37:37.680 --> 00:37:43.980
 AML或授权者的核心域

00:37:41.640 --> 00:37:45.339
我们只是支持通用

00:37:43.980 --> 00:37:47.559
子域，但这是

00:37:45.339 --> 00:37:50.109
是的，显然是假想的讨论

00:37:47.559 --> 00:37:52.660
因为这取决于您的用例

00:37:50.109 --> 00:37:56.739
或您的真实业务，但我有一个

00:37:52.660 --> 00:37:59.769
给您的讯息总是尽量只

00:37:56.739 --> 00:38:01.479
一个负责业务的团队

00:37:59.769 --> 00:38:07.029
过程，因为这是唯一的方法

00:38:01.479 --> 00:38:09.160
提供真正的团队自治权吗

00:38:07.029 --> 00:38:11.140
布鲁斯问我你在哪里得到的

00:38:09.160 --> 00:38:13.690
企业提供的解决方案

00:38:11.140 --> 00:38:15.789
集成模式甚至消息

00:38:13.690 --> 00:38:17.650
流程管理流程经理

00:38:15.789 --> 00:38:19.299
交易客户和许多其他

00:38:17.650 --> 00:38:22.599
我什至不记得的模式

00:38:19.299 --> 00:38:26.069
他们的名字，但一切已经

00:38:22.599 --> 00:38:29.769
在几年前被确定和描述

00:38:26.069 --> 00:38:33.719
我们只是采用了这些模式并应用

00:38:29.769 --> 00:38:39.099
他们对我们的问题，让我们总结一下

00:38:33.719 --> 00:38:41.019
我们可能仍然有通用的用户界面

00:38:39.099 --> 00:38:44.049
企业真的在寻找，但这

00:38:41.019 --> 00:38:46.029
时间不再需要单击

00:38:44.049 --> 00:38:48.130
我们的后端开发人员

00:38:46.029 --> 00:38:50.079
由前沿人士开发，它可以

00:38:48.130 --> 00:38:52.390
不仅成为我们的业务流程

00:38:50.079 --> 00:38:54.969
但对于我们拥有的所有系统

00:38:52.390 --> 00:38:58.119
公司是我们的，如果不是的话

00:38:54.969 --> 00:39:00.549
属于我们的任何供应商报告

00:38:58.119 --> 00:39:03.430
我们可以得到的技术自主权

00:39:00.549 --> 00:39:07.059
提供任何供应商将提供的报告

00:39:03.430 --> 00:39:11.589
给我们，我们可以有任何流程建模者

00:39:07.059 --> 00:39:12.279
我们喜欢支持UML或VP阿门，但是

00:39:11.589 --> 00:39:15.640
没关系

00:39:12.279 --> 00:39:18.190
唯一能给我们带来价值的痣

00:39:15.640 --> 00:39:20.910
将是落在墙上的那个

00:39:18.190 --> 00:39:23.650
用便签，你知道为什么

00:39:20.910 --> 00:39:26.229
因为那时我们实际上在交流

00:39:23.650 --> 00:39:28.839
彼此，我们用这些说话

00:39:26.229 --> 00:39:32.380
我们为之奋斗的商务人士

00:39:28.839 --> 00:39:35.259
我们不仅仅依赖某些知识

00:39:32.380 --> 00:39:39.239
来自一些分析师的简单图表

00:39:35.259 --> 00:39:42.190
代理分析师或代理产品所有者

00:39:39.239 --> 00:39:45.670
我们是这种知识的一部分

00:39:42.190 --> 00:39:47.019
是我们真正的模型系统集成

00:39:45.670 --> 00:39:49.059
不需要那里有任何连接器

00:39:47.019 --> 00:39:50.859
您可以使用压力模板网络客户端

00:39:49.059 --> 00:39:53.289
来自ref lock的流洒什么

00:39:50.859 --> 00:39:55.239
它喜欢而不是只有一个黑色

00:39:53.289 --> 00:39:56.650
框形式的工作流引擎我们

00:39:55.239 --> 00:39:59.170
没有很多专业电路

00:39:56.650 --> 00:40:04.030
叛徒无数黑匣子

00:39:59.170 --> 00:40:06.070
每个业务流程一个盒子

00:40:04.030 --> 00:40:08.620
此解决方案适用于微服务

00:40:06.070 --> 00:40:10.780
自治归功于事实

00:40:08.620 --> 00:40:12.940
拥有一个中央工作流引擎

00:40:10.780 --> 00:40:16.300
有众多独立的专业人士

00:40:12.940 --> 00:40:18.660
交易员，我们可以独立部署我们的

00:40:16.300 --> 00:40:21.910
流程不影响其他所有流程

00:40:18.660 --> 00:40:23.620
这种方法也使我们可以分离数据

00:40:21.910 --> 00:40:25.900
因为每个业务流程都会

00:40:23.620 --> 00:40:29.410
管理数据本身可以有不同

00:40:25.900 --> 00:40:32.020
独立于模式的模式，并具有

00:40:29.410 --> 00:40:35.050
这样的独立服务执行

00:40:32.020 --> 00:40:39.220
业务流程之一的失败

00:40:35.050 --> 00:40:43.770
业务流程不一定

00:40:39.220 --> 00:40:46.330
需要引起全局系统故障

00:40:43.770 --> 00:40:48.220
所以我们有隧道的弹性

00:40:46.330 --> 00:40:50.350
关于可扩展性，我们可以扩展我们的规模

00:40:48.220 --> 00:40:51.700
独立服务专业电路

00:40:50.350 --> 00:40:54.010
拖车是我们可以扩展的微服务

00:40:51.700 --> 00:40:58.750
它独立于任何其他服务

00:40:54.010 --> 00:41:00.670
所以我们有独立的可扩展性自主权

00:40:58.750 --> 00:41:03.520
过程协调器还使我们

00:41:00.670 --> 00:41:04.870
选择一种选择的技术让我们使用

00:41:03.520 --> 00:41:06.460
适用于的技术

00:41:04.870 --> 00:41:08.800
业务问题的复杂性

00:41:06.460 --> 00:41:10.840
我们目前正在解决，所以我们做了

00:41:08.800 --> 00:41:13.540
也尝试这些技术

00:41:10.840 --> 00:41:16.420
我们可能会针对不同的情况使用不同的工具

00:41:13.540 --> 00:41:19.770
专业电路交易员，这就是为什么我们可以

00:41:16.420 --> 00:41:24.880
在市场上更具竞争力

00:41:19.770 --> 00:41:26.920
最后人们照顾的人

00:41:24.880 --> 00:41:29.470
处理和处理单独的代码

00:41:26.920 --> 00:41:31.570
基地将不再害怕

00:41:29.470 --> 00:41:35.530
产生任何破坏

00:41:31.570 --> 00:41:38.200
整个系统，即使一个过程

00:41:35.530 --> 00:41:41.380
取决于对方

00:41:38.200 --> 00:41:43.840
例如，我们可以

00:41:41.380 --> 00:41:46.420
例如，应用合同测试，因此我们

00:41:43.840 --> 00:41:48.610
在我们知道某事之前

00:41:46.420 --> 00:41:49.630
活下去，即使你还活着

00:41:48.610 --> 00:41:53.170
坏事发生了

00:41:49.630 --> 00:41:57.580
有很多模式可以阻止

00:41:53.170 --> 00:41:59.380
级联故障小过程小

00:41:57.580 --> 00:42:02.230
服务意味着低水平的进入

00:41:59.380 --> 00:42:04.330
新移民的低成本成本

00:42:02.230 --> 00:42:06.730
组织的可扩展性，这些是

00:42:04.330 --> 00:42:09.990
我们所能拥有的仅有的几项优势

00:42:06.730 --> 00:42:09.990
用这个解决方案实现

00:42:10.210 --> 00:42:16.390
布鲁斯现在很高兴，他知道

00:42:14.319 --> 00:42:19.539
内部业务代理的重要性

00:42:16.390 --> 00:42:21.819
他的公司，他知道真正的痛苦

00:42:19.539 --> 00:42:24.609
你知道公司的收获点

00:42:21.819 --> 00:42:27.779
当它失去价值时

00:42:24.609 --> 00:42:30.430
公司亏本赚钱

00:42:27.779 --> 00:42:32.130
驱动什么业务规则

00:42:30.430 --> 00:42:35.650
创造公司的业务

00:42:32.130 --> 00:42:37.119
有竞争力，他运用了真正的微观

00:42:35.650 --> 00:42:40.059
自主的服务

00:42:37.119 --> 00:42:42.480
可伸缩性数据的观点

00:42:40.059 --> 00:42:45.339
技术弹性部署和

00:42:42.480 --> 00:42:48.400
人，他使用最新技术

00:42:45.339 --> 00:42:50.619
适合于问题类别

00:42:48.400 --> 00:42:52.869
他的问题的复杂性

00:42:50.619 --> 00:42:55.690
当前解决和更改已完成

00:42:52.869 --> 00:42:58.359
以最快的速度进行宣传

00:42:55.690 --> 00:43:01.059
布鲁斯同事实际上留下了什么

00:42:58.359 --> 00:43:02.680
我不需要回去的公司

00:43:01.059 --> 00:43:06.490
在这个新的微服务引擎上工作

00:43:02.680 --> 00:43:10.150
在我说谢谢之前，我真的

00:43:06.490 --> 00:43:13.809
鼓励您看看新的DDD 

00:43:10.150 --> 00:43:16.210
通过名为图书馆的示例项目

00:43:13.809 --> 00:43:18.609
我们与Jakob P Lehmann共同创造

00:43:16.210 --> 00:43:20.500
从关键到全面

00:43:18.609 --> 00:43:22.510
示例展示或分步介绍

00:43:20.500 --> 00:43:24.940
提供软件解决方案的旅程

00:43:22.510 --> 00:43:26.799
使用大图事件猛烈使用

00:43:24.940 --> 00:43:28.809
示例映射设计级别战术

00:43:26.799 --> 00:43:30.279
甚至暴风雨，包括

00:43:28.809 --> 00:43:33.279
选择合适的骨料

00:43:30.279 --> 00:43:37.809
例子还有很多，所以请

00:43:33.279 --> 00:43:39.130
在github上找到我们，再次感谢

00:43:37.809 --> 00:43:40.260
非常感谢你，我希望下次见

00:43:39.130 --> 00:43:42.230
年感谢

00:43:40.260 --> 00:43:48.860
 [掌声] 

00:43:42.230 --> 00:43:48.860
 [音乐] 

