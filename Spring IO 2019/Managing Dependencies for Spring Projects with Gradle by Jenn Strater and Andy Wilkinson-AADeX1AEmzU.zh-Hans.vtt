WEBVTT
Kind: captions
Language: zh-Hans

00:00:00.900 --> 00:00:08.570
 [音乐] 

00:00:06.790 --> 00:00:10.429
所以欢迎大家

00:00:08.570 --> 00:00:12.710
管理spring的依赖关系

00:00:10.429 --> 00:00:14.330
 Gradle的专案，我是Jens Straighter 

00:00:12.710 --> 00:00:16.640
或者您在Twitter上可能认识我

00:00:14.330 --> 00:00:19.460
代码生成器我是开发者拥护者

00:00:16.640 --> 00:00:21.080
对于Gradle I，您可能知道的公司

00:00:19.460 --> 00:00:22.760
从我们的Gradle构建工具中

00:00:21.080 --> 00:00:27.439
今天要谈论和圣杯

00:00:22.760 --> 00:00:29.689
企业，今天我和我在一起

00:00:27.439 --> 00:00:32.599
我的名字叫安迪·威尔金森（Andy wilkinson） 

00:00:29.689 --> 00:00:34.940
我主要在 spring boot 上工作

00:00:32.599 --> 00:00:39.110
我也是春季休假的负责人

00:00:34.940 --> 00:00:41.450
 Doc的项目，我写了大部分春季内容

00:00:39.110 --> 00:00:43.010
启动Gradle插件和依赖项

00:00:41.450 --> 00:00:48.469
它使用的管理插件

00:00:43.010 --> 00:00:50.420
今天我们要谈的是

00:00:48.469 --> 00:00:53.000
这将起作用的方式是Andy's 

00:00:50.420 --> 00:00:54.800
会为春天做些事

00:00:53.000 --> 00:00:57.440
我要去的依赖管理插件

00:00:54.800 --> 00:00:59.480
谈谈新功能如何

00:00:57.440 --> 00:01:01.280
 Gradle整合了很多工作

00:00:59.480 --> 00:01:04.879
安迪完成了，然后我们要

00:01:01.280 --> 00:01:06.290
谈论如何从

00:01:04.879 --> 00:01:09.140
 Spring依赖管理插件

00:01:06.290 --> 00:01:11.869
一些本地Gradle的东西

00:01:09.140 --> 00:01:13.520
看一下我们在哪里使用

00:01:11.869 --> 00:01:18.020
 spring依赖管理插件

00:01:13.520 --> 00:01:24.020
现在好了，有人开始使用

00:01:18.020 --> 00:01:26.000
 Gradle 5本机BOM支持1 

00:01:24.020 --> 00:01:30.110
这绝对是正确的演讲

00:01:26.000 --> 00:01:32.540
对于这里的所有人，安迪得到

00:01:30.110 --> 00:01:34.310
开始好了，谢谢詹恩，所以

00:01:32.540 --> 00:01:37.310
也许有点奇怪

00:01:34.310 --> 00:01:42.380
谈论Gradle这个故事而已

00:01:37.310 --> 00:01:44.930
一切都从Maven开始，所以春天

00:01:42.380 --> 00:01:48.380
 boot是一个使用以下项目构建的项目

00:01:44.930 --> 00:01:51.220
 Maven，它依赖于一些相当主要的

00:01:48.380 --> 00:01:53.299
 Maven约定，这些是

00:01:51.220 --> 00:01:57.590
我们的约定和功能

00:01:53.299 --> 00:01:59.570
想带给Gradle用户

00:01:57.590 --> 00:02:01.040
决定使用的人

00:01:59.570 --> 00:02:02.360
摇摇欲坠而不是行家

00:02:01.040 --> 00:02:05.450
建立了我们希望能够带来的一切

00:02:02.360 --> 00:02:11.060
一些行家的优势更大

00:02:05.450 --> 00:02:14.210
世界，也许你们当中很多人都知道

00:02:11.060 --> 00:02:18.080
我是否应该问你们几个

00:02:14.210 --> 00:02:19.730
我们的 spring boot 用户差不多

00:02:18.080 --> 00:02:23.290
每个人，你们中有多少人

00:02:19.730 --> 00:02:27.980
已经在Gradle中使用Spring Boot 

00:02:23.290 --> 00:02:29.660
好吧，你们好，好吧，对于那些

00:02:27.980 --> 00:02:32.210
你们是 spring boot 用户的

00:02:29.660 --> 00:02:34.250
你们几乎所有人都知道

00:02:32.210 --> 00:02:36.860
有一个弹簧启动依赖

00:02:34.250 --> 00:02:40.670
弹簧启动内的模块有一个

00:02:36.860 --> 00:02:42.530
现在就可以使用Maven物料清单

00:02:40.670 --> 00:02:44.690
与Maven一起使用Spring Boot，您可能会

00:02:42.530 --> 00:02:46.940
更熟悉使用 spring boot 

00:02:44.690 --> 00:02:49.160
初学者父母作为您的项目父母

00:02:46.940 --> 00:02:50.990
它实际上是从春天继承的

00:02:49.160 --> 00:02:53.390
启动依赖项，即使您不是

00:02:50.990 --> 00:02:55.370
直接使用Spring Boot依赖项

00:02:53.390 --> 00:02:57.110
如果您使用的是Spring Boot Starter 

00:02:55.370 --> 00:02:59.420
在Maven世界中将父项作为您的项目

00:02:57.110 --> 00:03:03.380
父母，那么你实际上仍然在使用

00:02:59.420 --> 00:03:06.020
 Spring Boot依赖润唇膏和

00:03:03.380 --> 00:03:08.870
物料清单是做什么的

00:03:06.020 --> 00:03:10.910
为您管理依赖版本

00:03:08.870 --> 00:03:12.830
还管理Maven插件版本，但

00:03:10.910 --> 00:03:15.290
如果你是一个没有关系的人

00:03:12.830 --> 00:03:16.970
 Gradle用户，但该信息已存在

00:03:15.290 --> 00:03:20.270
在那里，如果您正在使用，确实会对您有所帮助

00:03:16.970 --> 00:03:23.780
 Maven和Spring Boot依赖关系

00:03:20.270 --> 00:03:25.820
香脂同时管理两个春季版本

00:03:23.780 --> 00:03:28.520
 spring计划spring boot本身， 

00:03:25.820 --> 00:03:31.340
但其余的大部分

00:03:28.520 --> 00:03:33.140
春季投资组合，因此可以管理

00:03:31.340 --> 00:03:35.570
弹簧数据弹簧的依赖性

00:03:33.140 --> 00:03:39.830
安全 Spring Framework 春季会议

00:03:35.570 --> 00:03:41.930
等等等，我们也管理第三方

00:03:39.830 --> 00:03:46.280
依赖项，例如休眠

00:03:41.930 --> 00:03:48.620
 flyweight各种JDBC驱动程序Cassandra 

00:03:46.280 --> 00:03:51.500
等等等等，他们都在那里管理

00:03:48.620 --> 00:03:53.180
这给您精选的

00:03:51.500 --> 00:03:54.740
版本，希望当您

00:03:53.180 --> 00:03:57.050
编写您的应用程序，您无需担心

00:03:54.740 --> 00:03:58.850
关于版本很多，在

00:03:57.050 --> 00:04:00.890
香脂，我们有一百五十多个

00:03:58.850 --> 00:04:02.300
属性，所以这些是

00:04:00.890 --> 00:04:05.060
你知道有一个单一的财产

00:04:02.300 --> 00:04:06.530
休眠版本，然后

00:04:05.060 --> 00:04:08.630
属性用于控制

00:04:06.530 --> 00:04:12.620
 800左右的版本

00:04:08.630 --> 00:04:15.410
依赖关系，看起来有点像

00:04:12.620 --> 00:04:18.560
所以这大大减少了

00:04:15.410 --> 00:04:20.030
版本，但您可以在顶部看到

00:04:18.560 --> 00:04:22.220
几个版本的例子

00:04:20.030 --> 00:04:24.440
属性，所以我认为这是一个

00:04:22.220 --> 00:04:26.030
从 spring boot 到1/4的摘要

00:04:24.440 --> 00:04:28.070
可以看到那只 spring boot 到四两一

00:04:26.030 --> 00:04:30.290
四给你Spring Framework五

00:04:28.070 --> 00:04:32.990
一六也给你时间

00:04:30.290 --> 00:04:35.060
三哦十，然后你可以看到下面

00:04:32.990 --> 00:04:38.570
依赖管理的一个例子

00:04:35.060 --> 00:04:40.550
所以在这里我们要管理一个特定的时间

00:04:38.570 --> 00:04:42.770
叶依赖，所以这是核心时间

00:04:40.550 --> 00:04:45.080
时间叶项目的叶模块和

00:04:42.770 --> 00:04:47.240
它的版本由

00:04:45.080 --> 00:04:48.980
财产，所以我们基本上是说

00:04:47.240 --> 00:04:51.050
如果你是

00:04:48.980 --> 00:04:52.490
使用时间叶的核心模块

00:04:51.050 --> 00:04:54.200
您应该使用的版本是三个哦

00:04:52.490 --> 00:04:55.610
十，那是 spring boot 

00:04:54.200 --> 00:04:57.890
这个版本的春季展台已经

00:04:55.610 --> 00:05:02.840
内建的版本

00:04:57.890 --> 00:05:04.910
还要针对我们进行所有测试

00:05:02.840 --> 00:05:06.770
为什么炸弹是一件好事，你知道为什么

00:05:04.910 --> 00:05:08.780
这是我们以为你的东西吗

00:05:06.770 --> 00:05:10.400
知道行家用户可以使用为什么

00:05:08.780 --> 00:05:12.890
我们希望Gradle用户能够使用

00:05:10.400 --> 00:05:15.500
它对我有什么帮助

00:05:12.890 --> 00:05:17.030
已经提到过，它消除了

00:05:15.500 --> 00:05:19.070
在声明时考虑版本

00:05:17.030 --> 00:05:21.080
你可以说我想依赖

00:05:19.070 --> 00:05:24.380
例如使用 spring boot 两个

00:05:21.080 --> 00:05:26.210
您将获得一组版本的

00:05:24.380 --> 00:05:31.160
对我们进行了所有测试，我们

00:05:26.210 --> 00:05:33.140
相信所有人一起工作也意味着

00:05:31.160 --> 00:05:34.610
您获得一致的版本

00:05:33.140 --> 00:05:37.550
您有时会使用的库模块

00:05:34.610 --> 00:05:39.590
看看你是否有很多不同

00:05:37.550 --> 00:05:41.810
依赖关系，它们具有传递性

00:05:39.590 --> 00:05:44.420
对同一第三方的依赖

00:05:41.810 --> 00:05:47.540
你可能最终会知道的项目

00:05:44.420 --> 00:05:49.190
版本一二三或在这里您

00:05:47.540 --> 00:05:50.750
知道其中的一点一二

00:05:49.190 --> 00:05:53.030
版本的另一点

00:05:50.750 --> 00:05:54.200
有时候，如果

00:05:53.030 --> 00:05:56.600
他们是两种不同的维护

00:05:54.200 --> 00:05:58.010
您可能即将离开的版本

00:05:56.600 --> 00:06:00.170
如果他们是不同的未成年人

00:05:58.010 --> 00:06:02.120
版本甚至更差的专业

00:06:00.170 --> 00:06:04.400
您很可能会遇到的版本

00:06:02.120 --> 00:06:06.320
你知道没有这样的方法错误摘要

00:06:04.400 --> 00:06:09.050
方法错误那种东西在哪里

00:06:06.320 --> 00:06:11.000
存在不兼容性，您已经

00:06:09.050 --> 00:06:12.800
在运行时得到了不同的混合版本

00:06:11.000 --> 00:06:14.930
我们从未被设计为可以工作

00:06:12.800 --> 00:06:17.750
一起使用炸弹将意味着

00:06:14.930 --> 00:06:19.700
您知道我们提供有关

00:06:17.750 --> 00:06:22.310
每个休眠模块的版本

00:06:19.700 --> 00:06:24.470
每个单一的时间叶模块，如果

00:06:22.310 --> 00:06:26.060
您在maven或

00:06:24.470 --> 00:06:28.130
在Gradle中，我们将确保所有

00:06:26.060 --> 00:06:29.900
休眠模块都在同一位置

00:06:28.130 --> 00:06:32.090
版本，因此应该消除这些

00:06:29.900 --> 00:06:36.140
某种不兼容问题

00:06:32.090 --> 00:06:38.330
您的构建为我们提供了详细的版本

00:06:36.140 --> 00:06:40.130
我说过经过测试并知道

00:06:38.330 --> 00:06:41.780
一起工作，以便这些版本

00:06:40.130 --> 00:06:44.840
进入炸弹其他版本

00:06:41.780 --> 00:06:46.790
 spring boot 单元集成测试有

00:06:44.840 --> 00:06:48.320
所有人都在反对，所以我们有一个合理的

00:06:46.790 --> 00:06:50.450
他们都工作的信心度

00:06:48.320 --> 00:06:51.650
在一起，希望可以节省您

00:06:50.450 --> 00:06:54.680
当你

00:06:51.650 --> 00:06:56.210
整合事物，但另一件事

00:06:54.680 --> 00:06:58.610
炸弹很好，真的是

00:06:56.210 --> 00:07:00.889
只是一种意见，如果您不同意， 

00:06:58.610 --> 00:07:03.650
这对您来说非常简单

00:07:00.889 --> 00:07:06.110
推翻那个意见，这可能是

00:07:03.650 --> 00:07:07.930
因为例如说有一个错误

00:07:06.110 --> 00:07:10.790
修复了休眠的发布，并且

00:07:07.930 --> 00:07:12.770
尚未发布错误修复程序

00:07:10.790 --> 00:07:14.960
 spring boot 拿起那个版本的

00:07:12.770 --> 00:07:17.030
冬眠，你只能说春天

00:07:14.960 --> 00:07:20.150
引导我想要的依赖管理

00:07:17.030 --> 00:07:22.780
使用休眠5 3 12而不是5 3 

00:07:20.150 --> 00:07:24.800
 11你以我为例

00:07:22.780 --> 00:07:26.660
使用属性，我们将采取

00:07:24.800 --> 00:07:28.310
仔细一点看

00:07:26.660 --> 00:07:29.690
稍后使用在中声明的属性

00:07:28.310 --> 00:07:31.370
炸弹，你可以提供一个

00:07:29.690 --> 00:07:33.530
该属性的不同版本，以及

00:07:31.370 --> 00:07:36.590
那么所有的模块将是

00:07:33.530 --> 00:07:43.900
版本，而不是来自

00:07:36.590 --> 00:07:47.180
炸弹，所以这一切都始于

00:07:43.900 --> 00:07:48.320
 2014年差不多5年前了

00:07:47.180 --> 00:07:49.760
我把这在一起

00:07:48.320 --> 00:07:52.490
我不敢相信的演讲

00:07:49.760 --> 00:07:54.710
那是五年前开始的

00:07:52.490 --> 00:07:56.360
与Gradle问题插件配合使用

00:07:54.710 --> 00:07:58.220
我不记得为什么我们这样做了

00:07:56.360 --> 00:08:00.560
当我回想起来

00:07:58.220 --> 00:08:02.450
完全愚蠢，我们使用

00:08:00.560 --> 00:08:04.100
属性文件，用于管理所有

00:08:02.450 --> 00:08:05.900
 Gradle而不是阅读的版本

00:08:04.100 --> 00:08:07.850
它来自炸弹，我们就像我们拿了

00:08:05.900 --> 00:08:09.169
从源代码炸弹运行它

00:08:07.850 --> 00:08:10.610
通过一些可怕的XLT 

00:08:09.169 --> 00:08:11.900
转变成一个

00:08:10.610 --> 00:08:13.280
属性文件，然后我们写了一个

00:08:11.900 --> 00:08:15.860
插件读取属性文件

00:08:13.280 --> 00:08:18.020
而不是仅仅阅读炸弹，我

00:08:15.860 --> 00:08:19.610
不知道为什么我们这样做，我不能

00:08:18.020 --> 00:08:20.690
记住那可能看起来像一个

00:08:19.610 --> 00:08:23.840
当时好主意

00:08:20.690 --> 00:08:25.880
所以大约五年前，我们认为

00:08:23.840 --> 00:08:27.950
实际上为什么我们不只是使用炸弹

00:08:25.880 --> 00:08:30.710
文件为什么我们不很好地使用Maven 

00:08:27.950 --> 00:08:32.349
已知的详细指定的有据可查的XML 

00:08:30.710 --> 00:08:36.710
格式化，看看我们能否完成

00:08:32.349 --> 00:08:38.839
在Gradle版本中消耗掉它，所以Phil 

00:08:36.710 --> 00:08:41.750
针对春季记录了此问题

00:08:38.839 --> 00:08:43.820
蛮横的项目，这引起了这个

00:08:41.750 --> 00:08:45.440
单独的Gradle插件

00:08:43.820 --> 00:08:47.570
我们将其作为单独的插件进行，因为

00:08:45.440 --> 00:08:50.510
我们认为这可能对

00:08:47.570 --> 00:08:52.430
春天以后的社区，但- 

00:08:50.510 --> 00:08:53.990
事实证明，这是事实

00:08:52.430 --> 00:08:55.610
人们提出问题

00:08:53.990 --> 00:08:56.899
针对Dependsimagine插件

00:08:55.610 --> 00:08:59.060
谁在构建Android项目

00:08:56.899 --> 00:09:01.010
知道甚至不存在的东西

00:08:59.060 --> 00:09:03.649
春天社区，所以虽然这是一个

00:09:01.010 --> 00:09:05.360
 spring Gradle插件（如果有） 

00:09:03.649 --> 00:09:07.339
正在建设的非春季项目

00:09:05.360 --> 00:09:08.360
您可以利用Gradle的优势

00:09:07.339 --> 00:09:10.640
依赖管理插件

00:09:08.360 --> 00:09:12.079
功能，它不依赖于

00:09:10.640 --> 00:09:14.120
春天的其余时间没有

00:09:12.079 --> 00:09:15.950
需要建立一个类似的项目

00:09:14.120 --> 00:09:19.250
与春天的生态系统息息相关

00:09:15.950 --> 00:09:21.230
可以将它用于您喜欢的任何内容

00:09:19.250 --> 00:09:23.240
一年级或五年级项目的摇篮

00:09:21.230 --> 00:09:26.769
希望您使用的项目

00:09:23.240 --> 00:09:29.990
仁会跟你谈谈

00:09:26.769 --> 00:09:33.500
因此，如果您想使用该插件

00:09:29.990 --> 00:09:35.120
进口炸弹，这是相当标准的一种

00:09:33.500 --> 00:09:37.310
您开始使用Gradle之类的东西

00:09:35.120 --> 00:09:38.540
您指定的插件块的ID 

00:09:37.310 --> 00:09:41.149
插件和您所使用的版本

00:09:38.540 --> 00:09:45.860
要使用然后再使用插件

00:09:41.149 --> 00:09:48.050
提供DSL来导入Maven炸弹

00:09:45.860 --> 00:09:50.510
还提供了我不会涉及的DSL 

00:09:48.050 --> 00:09:52.160
详细信息在这里，但您也可以声明

00:09:50.510 --> 00:09:53.870
个人的依赖管理

00:09:52.160 --> 00:09:57.170
依赖，所以如果你没有炸弹

00:09:53.870 --> 00:09:59.810
管理依赖性，但是你

00:09:57.170 --> 00:10:01.699
说说你有一些项目

00:09:59.810 --> 00:10:03.350
企业内部，但您

00:10:01.699 --> 00:10:04.760
想要提供依赖性管理

00:10:03.350 --> 00:10:06.470
确保它得到了

00:10:04.760 --> 00:10:07.010
我说过的一致版本

00:10:06.470 --> 00:10:08.779
关于

00:10:07.010 --> 00:10:10.160
您也可以声明个人

00:10:08.779 --> 00:10:13.180
依赖管理个人

00:10:10.160 --> 00:10:15.560
使用插件DSL和

00:10:13.180 --> 00:10:18.500
在这里，我们只是说我们要导入

00:10:15.560 --> 00:10:20.300
炸弹，这是旧的春天

00:10:18.500 --> 00:10:23.449
框架启动带来了D依赖性

00:10:20.300 --> 00:10:28.160
这是完全相同的Maven炸弹版本

00:10:23.449 --> 00:10:30.829
二一四，这将导致我们离开

00:10:28.160 --> 00:10:32.209
我们有一个Gradle项目， 

00:10:30.829 --> 00:10:36.279
依赖管理已经

00:10:32.209 --> 00:10:38.510
从那枚炸弹的进口中

00:10:36.279 --> 00:10:40.820
依赖管理插件

00:10:38.510 --> 00:10:43.519
为您提供类似于

00:10:40.820 --> 00:10:44.959
 Gradle如何完成其​​依赖项任务

00:10:43.519 --> 00:10:48.019
您可以运行，它将向您显示

00:10:44.959 --> 00:10:50.060
所有依赖项的列表

00:10:48.019 --> 00:10:51.380
已经在您的项目中配置了

00:10:50.060 --> 00:10:53.870
依赖项管理插件

00:10:51.380 --> 00:10:55.490
提供依赖项管理任务，因此

00:10:53.870 --> 00:10:58.220
如果运行，您将获得输出

00:10:55.490 --> 00:11:00.019
显示所有

00:10:58.220 --> 00:11:01.029
当前正在依赖

00:11:00.019 --> 00:11:03.079
管理这些不一定

00:11:01.029 --> 00:11:05.480
项目正在使用的依赖项

00:11:03.079 --> 00:11:08.300
这些只是你应该使用的

00:11:05.480 --> 00:11:09.200
然后管理的特定模块

00:11:08.300 --> 00:11:11.060
依赖管理器

00:11:09.200 --> 00:11:14.240
插件将控制它的版本

00:11:11.060 --> 00:11:17.240
为你，你可以在这里看到一个沉重的

00:11:14.240 --> 00:11:20.450
那种减少的输出是

00:11:17.240 --> 00:11:22.340
表明我们正在管理一些时间

00:11:20.450 --> 00:11:24.380
叶模块，所以我们有时间离开

00:11:22.340 --> 00:11:27.580
核心时间叶模块和及时

00:11:24.380 --> 00:11:30.110
版本5或11的spring 5模块

00:11:27.580 --> 00:11:31.520
然后我们还有一些额外的时间

00:11:30.110 --> 00:11:33.350
作为单独的项目管理

00:11:31.520 --> 00:11:38.990
有一个单独的发布周期，所以那些

00:11:33.350 --> 00:11:41.840
两个有一个单独的版本号

00:11:38.990 --> 00:11:43.990
你们这些人可能知道您的春天

00:11:41.840 --> 00:11:46.400
引导用户，或者您可能不知道

00:11:43.990 --> 00:11:48.590
 spring boot 已经在做我所做的

00:11:46.400 --> 00:11:51.650
只是为您显示，所以如果您使用

00:11:48.590 --> 00:11:54.230
 spring boot Gradle插件在这里

00:11:51.650 --> 00:11:55.760
使用理想的插件块带来

00:11:54.230 --> 00:11:58.160
从每滴答滴答声的引导到

00:11:55.760 --> 00:12:00.710
特定版本（如果您应用

00:11:58.160 --> 00:12:03.110
依赖管理插件

00:12:00.710 --> 00:12:05.420
还配置了您的Gradle构建以使用

00:12:03.110 --> 00:12:06.830
 spring boot 插件是一种

00:12:05.420 --> 00:12:08.990
建立在汽车的 spring boot 上

00:12:06.830 --> 00:12:12.530
通过应用配置主题

00:12:08.990 --> 00:12:15.020
依赖管理插件春季

00:12:12.530 --> 00:12:16.580
启动插件会将其作为信号

00:12:15.020 --> 00:12:19.040
想使用依赖管理

00:12:16.580 --> 00:12:22.130
插件来管理您的项目

00:12:19.040 --> 00:12:23.780
依赖关系，以便应用

00:12:22.130 --> 00:12:25.940
依赖管理插件春季

00:12:23.780 --> 00:12:28.280
引导插件将其转变为

00:12:25.940 --> 00:12:30.830
导入Spring Boot依赖项BOM 

00:12:28.280 --> 00:12:32.570
因此，这意味着您只需指定一个

00:12:30.830 --> 00:12:34.550
特定版本的 spring boot 和

00:12:32.570 --> 00:12:37.010
您将自动使用该

00:12:34.550 --> 00:12:38.990
等效版本，所以相同的版本

00:12:37.010 --> 00:12:44.720
 Spring Boot依赖项BOM到

00:12:38.990 --> 00:12:48.380
管理您的项目依赖性

00:12:44.720 --> 00:12:50.030
我提到过的重要的事情

00:12:48.380 --> 00:12:52.910
 BOM支持和好处之一

00:12:50.030 --> 00:12:54.920
炸弹只是一个

00:12:52.910 --> 00:12:56.540
意见，如果您可以覆盖它

00:12:54.920 --> 00:12:58.640
曾经有您知道是否需要

00:12:56.540 --> 00:13:01.220
出于任何原因升级或降级

00:12:58.640 --> 00:13:03.410
您可以做到这一点，并在其中的属性

00:13:01.220 --> 00:13:04.720
 BOM努力使之变得尽可能简单

00:13:03.410 --> 00:13:08.390
可能的，那是

00:13:04.720 --> 00:13:11.930
实际上在Gradle世界中得到了支持

00:13:08.390 --> 00:13:15.020
值得一提的是，maven中的AV 

00:13:11.930 --> 00:13:17.780
属性覆盖支持仅适用

00:13:15.020 --> 00:13:20.030
当您使用炸弹作为父母或

00:13:17.780 --> 00:13:22.240
作为您祖先之一的父母或

00:13:20.030 --> 00:13:24.910
祖父母或曾祖父母

00:13:22.240 --> 00:13:26.439
如果您导入炸弹，这是另一个

00:13:24.910 --> 00:13:27.999
 maven提供的方式，如果您是

00:13:26.439 --> 00:13:31.059
你们这里有很多人是Spring Cloud

00:13:27.999 --> 00:13:33.040
用户，所以您有了一些春天的云

00:13:31.059 --> 00:13:35.649
用户在这里您可能已经看到您

00:13:33.040 --> 00:13:37.869
在Maven项目中，您导入但您

00:13:35.649 --> 00:13:39.910
通常使用 spring boot 

00:13:37.869 --> 00:13:42.249
初学者父母作为您的父母，然后

00:13:39.910 --> 00:13:44.259
您导入弹簧云炸弹，它

00:13:42.249 --> 00:13:47.230
带来了所有的依赖

00:13:44.259 --> 00:13:48.759
一起管理 spring boot 炸弹

00:13:47.230 --> 00:13:50.980
您可以覆盖属性，因为它是

00:13:48.759 --> 00:13:52.929
你的父母，但春天的云你

00:13:50.980 --> 00:13:55.300
不能，因为它是进口的

00:13:52.929 --> 00:13:57.279
真可惜我这是行家的局限

00:13:55.300 --> 00:13:59.649
认为他们有一个问题

00:13:57.279 --> 00:14:01.089
可能想解决，但我最后一次

00:13:59.649 --> 00:14:04.089
我在Maidan与某人交谈

00:14:01.089 --> 00:14:05.829
他们说这是必需的社区

00:14:04.089 --> 00:14:08.290
改变到突破性的改变

00:14:05.829 --> 00:14:09.759
 Maven模型，因此需要Maven 

00:14:08.290 --> 00:14:12.999
也许法尔多

00:14:09.759 --> 00:14:14.110
也许你知道一个或行家五个

00:14:12.999 --> 00:14:18.579
我不知道，因为他们没有

00:14:14.110 --> 00:14:20.920
只有四个，所以你可以做这种

00:14:18.579 --> 00:14:23.860
与Gradle依赖项相同的替代

00:14:20.920 --> 00:14:25.540
管理插件，您可以使用它

00:14:23.860 --> 00:14:27.009
您可以执行已知的覆盖

00:14:25.540 --> 00:14:28.920
不论您如何使用炸弹

00:14:27.009 --> 00:14:31.720
没有父母的概念

00:14:28.920 --> 00:14:32.860
 Gradle中的依赖管理术语

00:14:31.720 --> 00:14:36.160
使用依赖项管理时

00:14:32.860 --> 00:14:38.049
您可以导入插件，然后导入

00:14:36.160 --> 00:14:39.999
炸弹，您可以覆盖一个版本，它

00:14:38.049 --> 00:14:42.369
看起来有点像这样，所以在这里我们有一个

00:14:39.999 --> 00:14:44.049
时间板簧五依赖和我

00:14:42.369 --> 00:14:45.519
没有指定版本，所以这是

00:14:44.049 --> 00:14:47.889
只是一种标准依赖

00:14:45.519 --> 00:14:49.809
通过不指定版本进行管理

00:14:47.889 --> 00:14:51.509
你是说让依赖

00:14:49.809 --> 00:14:54.999
管理插件决定版本

00:14:51.509 --> 00:14:58.209
所以你可以在这里看到组织

00:14:54.999 --> 00:15:00.730
及时春季五个模块这点

00:14:58.209 --> 00:15:02.529
箭头表示我们将要使用

00:15:00.730 --> 00:15:05.019
三哦十一发布和那个版本

00:15:02.529 --> 00:15:06.850
来自依赖管理

00:15:05.019 --> 00:15:08.889
您知道的插件也可以看到它的位置

00:15:06.850 --> 00:15:13.449
推翻了一些意见，所以时间流逝

00:15:08.889 --> 00:15:15.009
默认值取决于j1 7:25的slf 

00:15:13.449 --> 00:15:16.749
依赖管理插件认为她

00:15:15.009 --> 00:15:18.819
应该使用一七二十六

00:15:16.749 --> 00:15:20.889
它升级了依赖关系

00:15:18.819 --> 00:15:23.470
您可以在

00:15:20.889 --> 00:15:25.149
箭头，这就是传递的地方

00:15:23.470 --> 00:15:26.439
依赖确实有版本

00:15:25.149 --> 00:15:28.179
依赖项管理插件具有

00:15:26.439 --> 00:15:30.069
说不，我想你应该用这个

00:15:28.179 --> 00:15:33.579
较新的版本，因为那是一个

00:15:30.069 --> 00:15:35.919
在炸弹中，因此您可以覆盖

00:15:33.579 --> 00:15:36.160
版本，也许是最明显的方式

00:15:35.919 --> 00:15:38.319
至

00:15:36.160 --> 00:15:39.970
这样做只是将版本添加到

00:15:38.319 --> 00:15:42.759
依赖性，所以我在这里说过

00:15:39.970 --> 00:15:45.459
喜欢及时使用 spring 5 3 o 10和

00:15:42.759 --> 00:15:47.920
如果我们向下看，我们可以看到

00:15:45.459 --> 00:15:51.100
我确实有及时的 spring 5 3 

00:15:47.920 --> 00:15:53.560
 o 10但我也得到了及时的分数

00:15:51.100 --> 00:15:55.569
模块在3 o 11，因为依赖

00:15:53.560 --> 00:15:57.100
管理插件的意见是你

00:15:55.569 --> 00:15:59.560
应该使用3 o 11 

00:15:57.100 --> 00:16:01.329
所以您已经对

00:15:59.560 --> 00:16:02.529
及时的Spring 5模块和

00:16:01.329 --> 00:16:04.449
依赖管理插件是

00:16:02.529 --> 00:16:06.189
尊重，但你没有说

00:16:04.449 --> 00:16:08.649
有关核心时间叶模块的任何信息

00:16:06.189 --> 00:16:10.660
因此依赖管理插件

00:16:08.649 --> 00:16:13.240
有点沉闷，所以您现在有了

00:16:10.660 --> 00:16:16.870
在您的混合3 o 10和3或11 

00:16:13.240 --> 00:16:18.850
项目，您可以添加一个明确的

00:16:16.870 --> 00:16:21.160
时间叶上的依赖项声明

00:16:18.850 --> 00:16:23.529
模块并在那里发表意见，但

00:16:21.160 --> 00:16:25.839
一种更好的方法来使用

00:16:23.529 --> 00:16:27.910
依赖管理插件是为了

00:16:25.839 --> 00:16:29.800
改写版本，所以这是

00:16:27.910 --> 00:16:33.129
我在其中显示的版本

00:16:29.800 --> 00:16:35.500
原始炸弹，所以这是Gradle语法

00:16:33.129 --> 00:16:37.540
用于设置配置额外的属性，以便

00:16:35.500 --> 00:16:40.720
在这里我们设置时间叶版本

00:16:37.540 --> 00:16:42.880
版本3 o 10的额外属性，您

00:16:40.720 --> 00:16:45.279
现在可以看到我们拥有的就是

00:16:42.880 --> 00:16:47.290
我们有两个模块，所以版本

00:16:45.279 --> 00:16:49.630
较少的依赖声明，及时发布

00:16:47.290 --> 00:16:53.740
 spring 5已升级或已升级

00:16:49.630 --> 00:16:56.230
设置在3 o 10和时间片模块

00:16:53.740 --> 00:16:58.389
取决于它也是3 o 10 

00:16:56.230 --> 00:17:00.490
这样可以避免版本不匹配

00:16:58.389 --> 00:17:02.649
通过覆盖属性而不是

00:17:00.490 --> 00:17:07.600
通过在

00:17:02.649 --> 00:17:09.789
个人依赖声明

00:17:07.600 --> 00:17:11.199
我想谈的最后一件事

00:17:09.789 --> 00:17:11.699
设定场景的类型

00:17:11.199 --> 00:17:14.530
今天

00:17:11.699 --> 00:17:16.329
在Jen与您谈论有关

00:17:14.530 --> 00:17:19.059
更有趣的新东西

00:17:16.329 --> 00:17:21.130
 Gradle 5和即将到来的东西

00:17:19.059 --> 00:17:24.370
只是依赖的最后一个特征

00:17:21.130 --> 00:17:27.909
管理插件带来的是

00:17:24.370 --> 00:17:29.559
 Maven样式依赖项排除

00:17:27.909 --> 00:17:32.350
 Gradle，这可能是最好的

00:17:29.559 --> 00:17:35.559
有希望的公平地说明

00:17:32.350 --> 00:17:38.380
简单的例子，所以在这里我有一个

00:17:35.559 --> 00:17:42.789
 Maven的配置，所以我有一个

00:17:38.380 --> 00:17:44.559
排除模块和此示例

00:17:42.789 --> 00:17:46.750
排除模块有几个

00:17:44.559 --> 00:17:49.690
依赖有一个依赖

00:17:46.750 --> 00:17:52.060
取决于弹簧芯的1：3但

00:17:49.690 --> 00:17:53.380
不包括Commons锁定，因为我们

00:17:52.060 --> 00:17:57.030
想要使用ASL foj 

00:17:53.380 --> 00:18:01.390
相反，SLF O'Jays公共记录

00:17:57.030 --> 00:18:07.030
 SL f oj / j CL内容，而不是使用

00:18:01.390 --> 00:18:10.510
公共锁定API直接，所以如果

00:18:07.030 --> 00:18:12.730
然后我们依靠Maven中的那个项目

00:18:10.510 --> 00:18:15.010
在摇篮里，在春天也拉

00:18:12.730 --> 00:18:16.930
豆，所以我们要编写一个春季应用

00:18:15.010 --> 00:18:19.540
我们的排除示例模块取决于

00:18:16.930 --> 00:18:22.900
在春季核心上，但在我们的应用中

00:18:19.540 --> 00:18:25.300
需要使用四季豆，所以我们有

00:18:22.900 --> 00:18:27.130
左上方的Maven配置

00:18:25.300 --> 00:18:31.270
和等效的Gradle配置

00:18:27.130 --> 00:18:36.850
如果使用标准的Maven和

00:18:31.270 --> 00:18:38.290
标准Gradle我们看那些

00:18:36.850 --> 00:18:40.300
依赖关系看依赖关系

00:18:38.290 --> 00:18:42.640
我们最终得到的图在顶部

00:18:40.300 --> 00:18:44.200
我们已经有了Maven依赖项的输出

00:18:42.640 --> 00:18:45.880
树，在底部，我们有

00:18:44.200 --> 00:18:49.330
 Gradle依赖项任务的输出

00:18:45.880 --> 00:18:51.100
您将在Maven示例中看到我们没有

00:18:49.330 --> 00:18:54.640
有Commons日志，但是在Gradle中

00:18:51.100 --> 00:18:56.080
例如，我们认为您可以

00:18:54.640 --> 00:18:59.080
论证其中之一是

00:18:56.080 --> 00:19:00.610
是的，我们真的不在乎我们

00:18:59.080 --> 00:19:02.590
真正关心的是

00:19:00.610 --> 00:19:06.280
相同的答案不是您可能会选择的答案

00:19:02.590 --> 00:19:08.140
认为是对还是错和Gradle 

00:19:06.280 --> 00:19:11.140
比maven灵活得多

00:19:08.140 --> 00:19:13.180
虽然不容易，但有可能

00:19:11.140 --> 00:19:14.350
更改Gradle排除行为

00:19:13.180 --> 00:19:16.570
而我不认为会

00:19:14.350 --> 00:19:19.540
可能对行家做同样的事情，我们

00:19:16.570 --> 00:19:21.400
照顾 spring boot ，因为我们有

00:19:19.540 --> 00:19:22.930
我相信几乎所有人都已经知道

00:19:21.400 --> 00:19:24.460
我们有一堆入门模块， 

00:19:22.930 --> 00:19:26.800
在我们部署的那些入门模块中

00:19:24.460 --> 00:19:28.690
为您和某些人提供依赖

00:19:26.800 --> 00:19:32.350
其中有我们排除在外，因为我们

00:19:28.690 --> 00:19:33.910
有时会有第三方项目

00:19:32.350 --> 00:19:35.590
具有已声明的依赖项

00:19:33.910 --> 00:19:38.110
实际上是强制性的

00:19:35.590 --> 00:19:39.850
并以我们期望的方式发出臭味

00:19:38.110 --> 00:19:42.460
典型的Spring Boot用户使用

00:19:39.850 --> 00:19:44.910
依赖即传递依赖

00:19:42.460 --> 00:19:46.690
不需要，因此我们为您排除了它

00:19:44.910 --> 00:19:49.090
评论日志是规范的

00:19:46.690 --> 00:19:51.250
示例项目经常引入下议院

00:19:49.090 --> 00:19:52.450
记录，然后它会妨碍

00:19:51.250 --> 00:19:54.340
您正在尝试扎根下议院

00:19:52.450 --> 00:19:56.020
每天将东西记录到slf中

00:19:54.340 --> 00:19:57.640
然后登录回去，您需要保持

00:19:56.020 --> 00:20:00.610
下议院注销你的课堂路径和

00:19:57.640 --> 00:20:02.020
我们的初学者确实尝试这样做

00:20:00.610 --> 00:20:03.220
让Maven强制执行插件

00:20:02.020 --> 00:20:04.690
配置以确保它

00:20:03.220 --> 00:20:06.970
不偷偷摸摸，所以我们很漂亮

00:20:04.690 --> 00:20:08.350
对Maven用户充满信心，但您不是

00:20:06.970 --> 00:20:10.210
最终以Commons登录

00:20:08.350 --> 00:20:11.620
我们希望能够的类路径

00:20:10.210 --> 00:20:14.919
提供相同程度的信心

00:20:11.620 --> 00:20:17.260
对于Gradle用户，这就是为什么我们添加了

00:20:14.919 --> 00:20:18.820
对依赖项的排除支持

00:20:17.260 --> 00:20:22.240
管理插件，使事情变得正常

00:20:18.820 --> 00:20:24.130
同样的缺点是

00:20:22.240 --> 00:20:27.130
变化确实会减慢您的构建速度

00:20:24.130 --> 00:20:28.960
因为还有更多的工作要做

00:20:27.130 --> 00:20:30.460
去看看所有的pom文件

00:20:28.960 --> 00:20:33.340
找出应该排除的内容

00:20:30.460 --> 00:20:35.679
一定要模仿得很棒

00:20:33.340 --> 00:20:37.240
 Mavens排除算法来找出

00:20:35.679 --> 00:20:39.549
保留什么，摆脱什么，以及

00:20:37.240 --> 00:20:41.710
然后告诉Gradle写这些依赖

00:20:39.549 --> 00:20:43.419
实际上不应该在那里

00:20:41.710 --> 00:20:45.669
尽我们所能优化，但是

00:20:43.419 --> 00:20:48.130
只能做三分之一

00:20:45.669 --> 00:20:53.380
派对插件，而不是本地插件

00:20:48.130 --> 00:20:56.409
 Gradle本身可以真正设定

00:20:53.380 --> 00:20:59.860
我认为今天的情景

00:20:56.409 --> 00:21:02.080
以及为什么我们要到达现在的位置

00:20:59.860 --> 00:21:04.270
想把你交给简跟

00:21:02.080 --> 00:21:07.570
你关于所有的好东西

00:21:04.270 --> 00:21:09.760
在Gradle 5中，它即将到来

00:21:07.570 --> 00:21:11.380
希望您会思考并思考，而我

00:21:09.760 --> 00:21:12.850
说这是依赖的作者

00:21:11.380 --> 00:21:16.030
管理插件，以便您选择

00:21:12.850 --> 00:21:18.400
永远不要再使用它，我不想

00:21:16.030 --> 00:21:20.169
必须维护该代码，因此更多

00:21:18.400 --> 00:21:21.730
你们中使用Gradle 5依赖关系的人

00:21:20.169 --> 00:21:23.260
管理资料并反馈给

00:21:21.730 --> 00:21:24.870
圣杯团队缺少什么

00:21:23.260 --> 00:21:27.010
您想看到的更好， 

00:21:24.870 --> 00:21:29.049
因为某些东西

00:21:27.010 --> 00:21:31.539
所有Gradle用户都使用Gradle 

00:21:29.049 --> 00:21:33.280
而不仅仅是 spring boot 

00:21:31.539 --> 00:21:33.730
我认为以社区为中心的社区

00:21:33.280 --> 00:21:35.919
大家

00:21:33.730 --> 00:21:37.840
所以我会把你交给仁

00:21:35.919 --> 00:21:40.659
了解所有相关信息，谢谢

00:21:37.840 --> 00:21:42.549
是的，这些功能很多

00:21:40.659 --> 00:21:44.440
最终被纳入Gradle 5 

00:21:42.549 --> 00:21:46.539
甚至是一些较新的

00:21:44.440 --> 00:21:48.250
版本，这是一个非常伟大的

00:21:46.539 --> 00:21:50.500
今天我们可以在这里讲的故事

00:21:48.250 --> 00:21:51.909
因为春天依赖管理

00:21:50.500 --> 00:21:55.419
插件实际上是最多的插件之一

00:21:51.909 --> 00:21:58.600
常用的Gradle插件，例如full 

00:21:55.419 --> 00:22:01.510
时间，所以这些功能很重要

00:21:58.600 --> 00:22:04.539
对很多人来说，就像格雷

00:22:01.510 --> 00:22:07.510
进化了我们想把那些

00:22:04.539 --> 00:22:10.120
重要功能进入下一个

00:22:07.510 --> 00:22:14.890
即将推出的版本，所以我们做到了

00:22:10.120 --> 00:22:16.530
通过一些消耗炸弹

00:22:14.890 --> 00:22:18.450
更好地找到便利

00:22:16.530 --> 00:22:21.930
 -或对不起细粒度的依赖

00:22:18.450 --> 00:22:24.150
管理以及一些改进

00:22:21.930 --> 00:22:26.540
实际发布的

00:22:24.150 --> 00:22:29.550
炸弹并将其合并回

00:22:26.540 --> 00:22:31.320
其他Maven项目，因此

00:22:29.550 --> 00:22:33.750
长期的目标是能够混合

00:22:31.320 --> 00:22:35.460
并匹配，以便您可以进行一些项目

00:22:33.750 --> 00:22:38.640
使用Gradle使用Maven进行某些项目

00:22:35.460 --> 00:22:42.890
并用于Maven项目，然后

00:22:38.640 --> 00:22:45.120
也发回给他们等等

00:22:42.890 --> 00:22:47.820
让我们从如何开始

00:22:45.120 --> 00:22:51.210
本地炸弹支持在语法上看起来

00:22:47.820 --> 00:22:54.450
这有点不同，因为

00:22:51.210 --> 00:22:56.130
长期的目标是使这更多

00:22:54.450 --> 00:22:58.770
不仅与Maven兼容，而且与

00:22:56.130 --> 00:23:01.530
其他我要称为平台的东西

00:22:58.770 --> 00:23:05.700
以及这里的语法不仅仅是

00:23:01.530 --> 00:23:08.010
就像进口炸弹，是我要做的

00:23:05.700 --> 00:23:10.020
平台，因此该平台包括

00:23:08.010 --> 00:23:13.080
 Maven炸弹，但像新的东西

00:23:10.020 --> 00:23:15.870
 Gradle依赖管理元数据

00:23:13.080 --> 00:23:18.540
格式，将来可能适用于

00:23:15.870 --> 00:23:21.810
还有很多其他的事情，所以

00:23:18.540 --> 00:23:23.880
我想到的一个例子是

00:23:21.810 --> 00:23:27.990
我要讲的关于春天休息的话题

00:23:23.880 --> 00:23:30.690
股票，在该示例中为演示项目

00:23:27.990 --> 00:23:35.610
我经常重写groovy的版本

00:23:30.690 --> 00:23:36.990
我今天只有两个

00:23:35.610 --> 00:23:39.720
七个只是一点点的发布

00:23:36.990 --> 00:23:41.370
我正在尝试覆盖，但实际上

00:23:39.720 --> 00:23:47.220
前阵子引起了我的注意

00:23:41.370 --> 00:23:49.770
我们从-常规-54-抱歉

00:23:47.220 --> 00:23:51.810
 -4-2 5因为足球的版本

00:23:49.770 --> 00:23:54.540
测试框架不兼容，所以

00:23:51.810 --> 00:23:56.190
我们正在得到这些，我正在得到

00:23:54.540 --> 00:24:00.060
这些关于不存在的错误消息

00:23:56.190 --> 00:24:01.860
能够编译，所以最终

00:24:00.060 --> 00:24:03.720
如果我尝试将其用作

00:24:01.860 --> 00:24:06.570
强制平台这是最

00:24:03.720 --> 00:24:07.980
类似于

00:24:06.570 --> 00:24:10.500
 Pennsy管理插件有效，并且

00:24:07.980 --> 00:24:12.990
 Maven的作品总的来说是我结束了

00:24:10.500 --> 00:24:15.150
即使我指定要

00:24:12.990 --> 00:24:18.030
常规的二五七版本

00:24:15.150 --> 00:24:21.410
最终得到这个二五六版本

00:24:18.030 --> 00:24:24.690
因为那是强制执行的，所以谁是

00:24:21.410 --> 00:24:25.800
看到这样的Gradle构建扫描是

00:24:24.690 --> 00:24:28.200
每个人的新事物

00:24:25.800 --> 00:24:29.389
几个人好吧，这是不同的

00:24:28.200 --> 00:24:30.979
依赖

00:24:29.389 --> 00:24:34.190
比安迪展示的那个

00:24:30.979 --> 00:24:36.259
如果您这样做，这是免费的--扫描

00:24:34.190 --> 00:24:40.309
适用于任何Gradle构建的结尾

00:24:36.259 --> 00:24:41.719
 6r雇用和II最终会继续

00:24:40.309 --> 00:24:43.909
通过并尝试调试问题，例如

00:24:41.719 --> 00:24:46.879
点击任何蓝色链接即可

00:24:43.909 --> 00:24:49.579
它会弹出并说出类似的地方

00:24:46.879 --> 00:24:51.589
来自，所以你可以看到一些

00:24:49.579 --> 00:24:54.079
其中这些来自 spring boot 

00:24:51.589 --> 00:24:57.459
依赖或来自其他依赖

00:24:54.079 --> 00:24:59.839
我在项目中使用过的

00:24:57.459 --> 00:25:05.659
这里发生的非常相似的事情是

00:24:59.839 --> 00:25:08.029
我只是在一个特定的

00:25:05.659 --> 00:25:12.229
版本没有发生的是我

00:25:08.029 --> 00:25:15.019
没有任何其他版本- 

00:25:12.229 --> 00:25:16.549
所以你可以做的就是尝试

00:25:15.019 --> 00:25:18.769
强制使用一个特定版本的

00:25:16.549 --> 00:25:22.009
时髦，所以你可以用力做到这一点

00:25:18.769 --> 00:25:24.589
等于true，有点用力

00:25:22.009 --> 00:25:26.570
但是你也可以写一个依赖

00:25:24.589 --> 00:25:28.969
我将展示一些管理规则

00:25:26.570 --> 00:25:31.339
稍后或其他一些不同的地方

00:25:28.969 --> 00:25:32.509
尝试去克服它的东西等等

00:25:31.339 --> 00:25:34.639
现在发生了什么

00:25:32.509 --> 00:25:36.589
实际上，让我们尝试猜测

00:25:34.639 --> 00:25:40.849
认为这将与

00:25:36.589 --> 00:25:43.879
时髦-五个六，谁认为这是

00:25:40.849 --> 00:25:47.719
要去做二五七很多

00:25:43.879 --> 00:25:50.209
人们不投票，可以

00:25:47.719 --> 00:25:53.089
在这种情况下实际工作，因为我们

00:25:50.209 --> 00:25:55.159
然后强迫该版本返回

00:25:53.089 --> 00:25:57.409
二五七，但你想

00:25:55.159 --> 00:25:59.149
要非常小心，因为如果

00:25:57.409 --> 00:26:00.589
你开始强迫自己

00:25:59.149 --> 00:26:04.879
最终会遇到同样的冲突

00:26:00.589 --> 00:26:06.499
只是处于不同的水平，我所以我们

00:26:04.879 --> 00:26:08.539
我们可以开始一点点吗

00:26:06.499 --> 00:26:18.769
这里甚至更细粒度

00:26:08.539 --> 00:26:20.899
特定版本仅适用于常规

00:26:18.769 --> 00:26:22.339
所以所有其他依赖项

00:26:20.899 --> 00:26:24.049
与groovy有关，所以

00:26:22.339 --> 00:26:25.639
不做小组中的所有事情

00:26:24.049 --> 00:26:29.839
组版本，这就是我们

00:26:25.639 --> 00:26:31.309
曾经在那儿谈论过

00:26:29.839 --> 00:26:32.989
我们还有其他一些策略

00:26:31.309 --> 00:26:36.229
第一个是，我们可以

00:26:32.989 --> 00:26:38.419
将其委托给Gradle冲突

00:26:36.229 --> 00:26:40.399
分辨率，因此通过切换此

00:26:38.419 --> 00:26:42.139
从我之前拥有的是

00:26:40.399 --> 00:26:43.040
强制平台强制平台

00:26:42.139 --> 00:26:45.830
就是说我想

00:26:43.040 --> 00:26:48.020
所有这些都作为要求

00:26:45.830 --> 00:26:50.420
删除并转到平台，我们

00:26:48.020 --> 00:26:52.340
提出建议

00:26:50.420 --> 00:26:56.390
等级石油依赖管理及其

00:26:52.340 --> 00:27:00.770
然后可以决定使用哪个版本

00:26:56.390 --> 00:27:04.160
如果我这样做，它最终会以相同的方式结束

00:27:00.770 --> 00:27:06.920
结果，但是用更少的力量就可以了

00:27:04.160 --> 00:27:08.990
正在寻找的二五七版本

00:27:06.920 --> 00:27:12.100
 groovy我们在哪里遇到了同样的问题

00:27:08.990 --> 00:27:14.840
只有一个图书馆，但它正在使用

00:27:12.100 --> 00:27:17.650
改为使用Gradle，这样您就可以结束

00:27:14.840 --> 00:27:22.100
从长远来看，冲突更少

00:27:17.650 --> 00:27:24.140
好吧，那么下一种进步

00:27:22.100 --> 00:27:26.300
这实际上是覆盖所有

00:27:24.140 --> 00:27:30.230
该组中的事情，所以这就是

00:27:26.300 --> 00:27:32.630
我是一个依赖管理规则

00:27:30.230 --> 00:27:35.420
我们在这里得到更多代码

00:27:32.630 --> 00:27:40.100
不再那么容易了，它只是在做一个

00:27:35.420 --> 00:27:42.410
小一线一线力，但你

00:27:40.100 --> 00:27:44.720
完全掌控什么

00:27:42.410 --> 00:27:47.600
您想在这种情况下要做的

00:27:44.720 --> 00:27:51.470
为...配置解决方案策略

00:27:47.600 --> 00:27:53.000
您可以在groovy组中的所有内容

00:27:51.470 --> 00:27:55.940
当然甚至可以使它更加

00:27:53.000 --> 00:27:58.010
细化并进行图案匹配

00:27:55.940 --> 00:28:01.640
确切地执行您想要的依赖项

00:27:58.010 --> 00:28:03.680
在这里并转到此特定版本

00:28:01.640 --> 00:28:06.380
然后您甚至可以添加注释，因为

00:28:03.680 --> 00:28:08.300
当你不可避免地会发生什么

00:28:06.380 --> 00:28:10.130
试图升级甚至降级

00:28:08.300 --> 00:28:14.240
版本是您要记住的

00:28:10.130 --> 00:28:16.280
为什么也许有一个特定的问题

00:28:14.240 --> 00:28:18.860
发生在更高版本中，所以您

00:28:16.280 --> 00:28:22.730
想要锁定较低版本的

00:28:18.860 --> 00:28:25.400
依赖关系，所以我们都可以覆盖

00:28:22.730 --> 00:28:27.290
该版本并注释我们为什么

00:28:25.400 --> 00:28:29.210
这样做，这些当然会

00:28:27.290 --> 00:28:30.320
扩展更多的依赖

00:28:29.210 --> 00:28:33.800
你就是这样

00:28:30.320 --> 00:28:38.390
所以以这种方式当然可以工作

00:28:33.800 --> 00:28:40.130
一点，是的，那就是

00:28:38.390 --> 00:28:41.990
几种不同的方式

00:28:40.130 --> 00:28:44.270
如果文档中还有更多内容， 

00:28:41.990 --> 00:28:45.680
你没有机会看一看

00:28:44.270 --> 00:28:48.620
在新的依赖项管理部分

00:28:45.680 --> 00:28:51.830
在Gradle Docs中，您应该有一个

00:28:48.620 --> 00:28:54.830
所包含的不仅仅是少数几个

00:28:51.830 --> 00:28:55.270
这里的简单示例，即使

00:28:54.830 --> 00:28:57.970
发送

00:28:55.270 --> 00:28:59.680
缴税不如缴税容易

00:28:57.970 --> 00:29:02.440
安迪提到有一个很大的

00:28:59.680 --> 00:29:04.300
这里的性能差异

00:29:02.440 --> 00:29:10.570
春天我去过的股票例子

00:29:04.300 --> 00:29:13.060
是的，这就是结果

00:29:10.570 --> 00:29:14.470
该依赖性报告，所以你

00:29:13.060 --> 00:29:16.840
甚至都看不到，但让我们放大

00:29:14.470 --> 00:29:18.790
这里发生了什么事

00:29:16.840 --> 00:29:22.210
 90种不同的配置

00:29:18.790 --> 00:29:24.130
在这里旋转出来，这是一个简单的演示

00:29:22.210 --> 00:29:26.470
项目，但非常喜欢这个

00:29:24.130 --> 00:29:28.510
这不是它必须采取的方式

00:29:26.470 --> 00:29:29.920
之所以这样做是因为为了分析

00:29:28.510 --> 00:29:33.580
依赖方式

00:29:29.920 --> 00:29:36.310
像插件作者一样发生

00:29:33.580 --> 00:29:38.470
是唯一的方法，但是因为我们

00:29:36.310 --> 00:29:40.660
现在可以使用一些内部api 

00:29:38.470 --> 00:29:43.330
摇篮和的方式

00:29:40.660 --> 00:29:46.090
团队构建了我们可以得到的

00:29:43.330 --> 00:29:47.620
在这种情况下，体积要小得多

00:29:46.090 --> 00:29:53.530
一页，我不再需要放大

00:29:47.620 --> 00:29:55.150
下降到两个十二点，我甚至

00:29:53.530 --> 00:29:57.070
在那些你会发现一些

00:29:55.150 --> 00:29:59.710
事情在这里，所以我确实包括链接

00:29:57.070 --> 00:30:00.910
到这里的所有构建扫描

00:29:59.710 --> 00:30:03.880
幻灯片将在最后发布

00:30:00.910 --> 00:30:05.680
如果您想看一下，可以单击

00:30:03.880 --> 00:30:07.330
那些都是公共建筑

00:30:05.680 --> 00:30:10.260
您可以浏览的扫描

00:30:07.330 --> 00:30:14.110
并看到两者之间的差异

00:30:10.260 --> 00:30:19.450
依赖解决方案，但不仅仅是

00:30:14.110 --> 00:30:21.130
关于消耗炸弹，但

00:30:19.450 --> 00:30:25.960
也关于我们如何发布和互动

00:30:21.130 --> 00:30:28.720
来自Gradle的maven返回

00:30:25.960 --> 00:30:30.880
项目，您可能想知道为什么

00:30:28.720 --> 00:30:32.140
如果您当然在图书馆，请执行此操作

00:30:30.880 --> 00:30:34.960
像春天队里的人一样写

00:30:32.140 --> 00:30:37.450
您以这种方式发布内容，但是

00:30:34.960 --> 00:30:38.830
如果多模块系统也有用

00:30:37.450 --> 00:30:41.560
您正在与其他团队合作，而您

00:30:38.830 --> 00:30:44.790
想要发布您的依赖项

00:30:41.560 --> 00:30:48.910
你可以做到，所以非常相似

00:30:44.790 --> 00:30:51.070
 Maven发布的插件有一个

00:30:48.910 --> 00:30:53.200
可能是公开发布的插件

00:30:51.070 --> 00:30:55.810
本身不是新事物

00:30:53.200 --> 00:30:58.150
在Gradle版本5中也进行了更改

00:30:55.810 --> 00:30:59.710
您现在可以选择使用

00:30:58.150 --> 00:31:01.720
解决依赖与声明

00:30:59.710 --> 00:31:03.910
依赖关系是什么意思

00:31:01.720 --> 00:31:06.820
我们一直在谈论所有这些

00:31:03.910 --> 00:31:08.470
迈耶在某些情况下并非不重要

00:31:06.820 --> 00:31:09.010
依赖之间的差异

00:31:08.470 --> 00:31:11.050
管理

00:31:09.010 --> 00:31:14.440
对于Maven和Gradle，所以如果您想

00:31:11.050 --> 00:31:16.570
确保相同的依赖项

00:31:14.440 --> 00:31:17.740
解决的不一定

00:31:16.570 --> 00:31:20.650
那些因为你已经宣布的

00:31:17.740 --> 00:31:24.570
这个版本的所有冲突

00:31:20.650 --> 00:31:31.060
您必须纠正才能使用

00:31:24.570 --> 00:31:33.400
这种语法使用实际上是

00:31:31.060 --> 00:31:35.140
解决并确保您正在使用

00:31:33.400 --> 00:31:40.240
在Gradle项目和

00:31:35.140 --> 00:31:43.450
在Maven项目中然后

00:31:40.240 --> 00:31:46.780
甚至进入这个新插件

00:31:43.450 --> 00:31:48.910
这是发布Java平台的权利

00:31:46.780 --> 00:31:52.030
现在这是关于发布行尸炸弹

00:31:48.910 --> 00:31:57.430
来自Gradle本身，可能是

00:31:52.030 --> 00:31:59.170
对您和某些人有用的功能

00:31:57.430 --> 00:32:01.300
所以我们已经看到了什么炸弹

00:31:59.170 --> 00:32:04.090
看起来这真的只是

00:32:01.300 --> 00:32:08.590
为此的Gradle DSL语法和

00:32:04.090 --> 00:32:11.230
所以我不仅是行家炸弹， 

00:32:08.590 --> 00:32:17.230
最终走向新的元数据

00:32:11.230 --> 00:32:19.000
 Gradle定义的格式和一些

00:32:17.230 --> 00:32:23.620
到目前为止我们注意到的那种事情

00:32:19.000 --> 00:32:24.820
 Maven以及在何处和何处的限制

00:32:23.620 --> 00:32:28.510
我们要进行依赖管理

00:32:24.820 --> 00:32:31.360
是要在5：3进入这个新功能

00:32:28.510 --> 00:32:34.720
称为功能变体，所以功能

00:32:31.360 --> 00:32:36.400
变体再次是一个非常通用的术语

00:32:34.720 --> 00:32:38.080
描述行家正在做的事情

00:32:36.400 --> 00:32:42.400
但我们也想将其应用于

00:32:38.080 --> 00:32:44.890
其他构建系统或尚未构建的系统

00:32:42.400 --> 00:32:47.700
同样，如果您熟悉

00:32:44.890 --> 00:32:52.390
 Maven可选依赖的概念

00:32:47.700 --> 00:32:53.830
功能变体不仅可以做到这一点，而且

00:32:52.390 --> 00:32:57.970
所以我想在这里使用的例子

00:32:53.830 --> 00:32:59.230
有库时用于数据库

00:32:57.970 --> 00:33:01.630
您正在发布的支持

00:32:59.230 --> 00:33:04.540
多种类型的数据库连接

00:33:01.630 --> 00:33:09.070
就像我的续集Postgres和Mongo 

00:33:04.540 --> 00:33:11.250
作为作者时的示例

00:33:09.070 --> 00:33:13.450
发布那些您希望能够

00:33:11.250 --> 00:33:16.030
说你可以做任何一个

00:33:13.450 --> 00:33:18.190
但是然后你想限制或者也许

00:33:16.030 --> 00:33:20.470
不一定要限制，但您

00:33:18.190 --> 00:33:22.120
认识到如果存在冲突

00:33:20.470 --> 00:33:22.640
您尝试在其中使用多个

00:33:22.120 --> 00:33:26.360
相同

00:33:22.640 --> 00:33:30.770
你可以限制它，如果我是一个

00:33:26.360 --> 00:33:32.720
消费者，您是图书馆作者

00:33:30.770 --> 00:33:35.330
已经发布了这个，我尝试

00:33:32.720 --> 00:33:38.840
导入两个不同的版本，因此在此

00:33:35.330 --> 00:33:40.610
如果是我的续集，然后是Postgres 

00:33:38.840 --> 00:33:43.720
它会给出一个错误，所以这

00:33:40.610 --> 00:33:46.070
是Gradle的重要组成部分

00:33:43.720 --> 00:33:49.100
我们想失败的总体策略

00:33:46.070 --> 00:33:50.809
快，而不是花费很多

00:33:49.100 --> 00:33:52.760
时间尝试稍后调试

00:33:50.809 --> 00:33:54.440
行，如果我们可以知道和认识

00:33:52.760 --> 00:33:56.090
早先你知道那里

00:33:54.440 --> 00:34:00.400
两者之间存在冲突

00:33:56.090 --> 00:34:02.480
这两个你可以限制

00:34:00.400 --> 00:34:05.660
防止问题发生

00:34:02.480 --> 00:34:09.500
再往下走，这样

00:34:05.660 --> 00:34:12.500
希望带领我们进入Gradle 

00:34:09.500 --> 00:34:15.080
模块元数据格式，所以这是

00:34:12.500 --> 00:34:18.490
一个例子，它继续很多

00:34:15.080 --> 00:34:20.750
在该页面的更下方显然是如何

00:34:18.490 --> 00:34:24.320
我们可以接受一些

00:34:20.750 --> 00:34:26.179
我们从maven和一些

00:34:24.320 --> 00:34:28.310
我们从Gradle中学到的东西

00:34:26.179 --> 00:34:31.820
我们不仅定义的方式

00:34:28.310 --> 00:34:34.460
依赖但其他重要

00:34:31.820 --> 00:34:38.720
对发布有用的元数据

00:34:34.460 --> 00:34:40.970
我有点重新定义了

00:34:38.720 --> 00:34:42.770
一点，所以这是重要的之一

00:34:40.970 --> 00:34:44.300
 Gradle 6中即将推出的功能

00:34:42.770 --> 00:34:47.720
所以这就是为什么我给它起五个名字的原因

00:34:44.300 --> 00:34:50.780
超越，所以您可以立即尝试

00:34:47.720 --> 00:34:53.119
这是您需要的可选功能

00:34:50.780 --> 00:34:55.520
在您的Gradle版本中启用，但是您

00:34:53.119 --> 00:34:57.920
可以发布为两种格式，然后

00:34:55.520 --> 00:35:02.470
从Gradle 6开始，这将是

00:34:57.920 --> 00:35:05.000
默认情况下，因此无论何时发布

00:35:02.470 --> 00:35:07.940
任何Maven格式的内容

00:35:05.000 --> 00:35:09.740
得到我的模块的这个网格的副本

00:35:07.940 --> 00:35:16.400
元数据格式有点麻烦

00:35:09.740 --> 00:35:18.890
绕线者好吧，是的，这有点

00:35:16.400 --> 00:35:22.160
 Gradle前进的方向

00:35:18.890 --> 00:35:26.210
以及您可以做的一些事情

00:35:22.160 --> 00:35:29.050
从依赖管理转换

00:35:26.210 --> 00:35:31.580
本机支持插件

00:35:29.050 --> 00:35:33.960
当然还有很多其他的事情

00:35:31.580 --> 00:35:37.380
我们在文档中提到的

00:35:33.960 --> 00:35:40.440
可以运行一些构建扫描以查看

00:35:37.380 --> 00:35:44.359
你自己有什么不同，然后

00:35:40.440 --> 00:35:48.380
可能有几种凝乳

00:35:44.359 --> 00:35:50.550
在这两个之间迁移

00:35:48.380 --> 00:35:57.660
也许我们还有一些事情

00:35:50.550 --> 00:36:00.810
要修复的路线图，因此

00:35:57.660 --> 00:36:03.810
第一个是排除，所以

00:36:00.810 --> 00:36:06.450
排除仍然很难

00:36:03.810 --> 00:36:08.220
在Gradle中定义，所以这是其中之一

00:36:06.450 --> 00:36:10.589
路线图上的东西

00:36:08.220 --> 00:36:15.119
供依赖性管理团队使用

00:36:10.589 --> 00:36:21.630
尝试使它变得容易一些

00:36:15.119 --> 00:36:24.030
可以定义排除，但它可以

00:36:21.630 --> 00:36:30.660
最终变得有点困难

00:36:24.030 --> 00:36:33.750
结束另一种小家伙是

00:36:30.660 --> 00:36:36.510
您需要记住添加一个

00:36:33.750 --> 00:36:40.099
不同的范围，尤其是甚至

00:36:36.510 --> 00:36:42.650
像微型鱼一样大的项目

00:36:40.099 --> 00:36:44.910
取得正确的结果没有用

00:36:42.650 --> 00:36:46.619
包括依赖项，因此您需要

00:36:44.910 --> 00:36:47.640
记住注释处理器

00:36:46.619 --> 00:36:49.470
需要分开，所以这是

00:36:47.640 --> 00:36:53.010
插件执行的操作

00:36:49.470 --> 00:36:54.599
我，但那Gradle不能做到

00:36:53.010 --> 00:36:57.030
各种原因，所以实际上

00:36:54.599 --> 00:36:59.550
我们想要您做的有意的事情

00:36:57.030 --> 00:37:04.580
考虑一下你的依赖

00:36:59.550 --> 00:37:09.540
实际想在每个范围内使用

00:37:04.580 --> 00:37:11.160
好的，因为其中有些是新的，所以

00:37:09.540 --> 00:37:13.800
 Gradle 5于去年11月问世

00:37:11.160 --> 00:37:15.599
一年，所以还不是全新的

00:37:13.800 --> 00:37:17.339
其中一些概念不是

00:37:15.599 --> 00:37:20.849
很简单，我们一直在谈论

00:37:17.339 --> 00:37:23.550
就像一小部分

00:37:20.849 --> 00:37:26.849
摇篮作品一般甚至想法

00:37:23.550 --> 00:37:29.119
像IntelliJ一样

00:37:26.849 --> 00:37:31.530
赶上了我的一些功能

00:37:29.119 --> 00:37:35.369
通常在命令行上运行

00:37:31.530 --> 00:37:39.000
但是如果您使用Gradle支持

00:37:35.369 --> 00:37:41.400
在IntelliJ中被嵌入为

00:37:39.000 --> 00:37:45.150
甚至我的Eclipse版本

00:37:41.400 --> 00:37:47.020
您可能看不到相同的依赖项

00:37:45.150 --> 00:37:48.400
报告

00:37:47.020 --> 00:37:50.380
这是我们正在努力的事情

00:37:48.400 --> 00:37:55.030
我们已经解决了问题

00:37:50.380 --> 00:38:06.490
向所有IDE供应商尝试

00:37:55.030 --> 00:38:08.500
得到这个最新的谢谢

00:38:06.490 --> 00:38:11.050
所以最后一个可能是

00:38:08.500 --> 00:38:12.940
那个还没有完全被

00:38:11.050 --> 00:38:15.460
已经修复，我们仍然需要

00:38:12.940 --> 00:38:18.130
更多的工作更多关于

00:38:15.460 --> 00:38:21.400
覆盖这些版本属性，因此

00:38:18.130 --> 00:38:24.090
像安迪提到的光

00:38:21.400 --> 00:38:26.860
该插件的工作方式非常

00:38:24.090 --> 00:38:30.010
特别是它超越了两者

00:38:26.860 --> 00:38:32.740
在Gradle和Maven中，我们正在为

00:38:30.010 --> 00:38:33.970
升级版本，我向您展示了一些

00:38:32.740 --> 00:38:36.280
可能发生的不同方式

00:38:33.970 --> 00:38:40.290
但是如果你仍然有一些问题

00:38:36.280 --> 00:38:42.370
想要降级您的版本，并

00:38:40.290 --> 00:38:45.130
特别是因为Gradle将

00:38:42.370 --> 00:38:46.360
默认情况下想尝试解决此问题

00:38:45.130 --> 00:38:48.610
往上走

00:38:46.360 --> 00:38:50.530
你必须要有一种超越力

00:38:48.610 --> 00:38:52.810
这些实际上是按以下顺序列出的

00:38:50.530 --> 00:38:55.450
你应该怎么做，所以你应该

00:38:52.810 --> 00:38:57.430
尝试之前先尝试编写规则

00:38:55.450 --> 00:39:00.100
有点沉重地

00:38:57.430 --> 00:39:02.620
强迫一切，然后如果你

00:39:00.100 --> 00:39:05.370
绝对需要排除它并添加一个

00:39:02.620 --> 00:39:09.250
不同的依赖关系，但我们是

00:39:05.370 --> 00:39:14.500
希望尝试修复很多这些问题

00:39:09.250 --> 00:39:19.540
不同的问题，我想你知道

00:39:14.500 --> 00:39:24.640
关于版本版本的更多信息

00:39:19.540 --> 00:39:27.280
属性丢失是的，我认为

00:39:24.640 --> 00:39:29.740
主要是覆盖的东西，但作为仁

00:39:27.280 --> 00:39:31.450
说Gradle团队真的

00:39:29.740 --> 00:39:34.300
接受反馈的依赖

00:39:31.450 --> 00:39:38.050
管理团队塞德里克主要是谁

00:39:34.300 --> 00:39:42.370
我与之交谈过的很容易接受

00:39:38.050 --> 00:39:44.530
进行反馈，但在

00:39:42.370 --> 00:39:46.810
摇篮方式，所以他们不想

00:39:44.530 --> 00:39:49.990
复制Maven是有充分理由的

00:39:46.810 --> 00:39:51.400
知道你是否喜欢Gradle把它转回去

00:39:49.990 --> 00:39:54.490
进入行家，这将不是一个好习惯

00:39:51.400 --> 00:39:56.590
解决方案，如果您有的话

00:39:54.490 --> 00:39:58.840
尝试后自己反馈

00:39:56.590 --> 00:39:59.830
那么根据我的经验， 

00:39:58.840 --> 00:40:01.660
很值得

00:39:59.830 --> 00:40:03.880
与gradle团队聊天

00:40:01.660 --> 00:40:05.350
特别是那些

00:40:03.880 --> 00:40:06.130
在依赖中工作的Gradle团队

00:40:05.350 --> 00:40:08.260
管理片

00:40:06.130 --> 00:40:10.210
我说是的，他们真的很接受

00:40:08.260 --> 00:40:11.950
反馈，因此，如果您尝试任何

00:40:10.210 --> 00:40:13.660
仁讲过的东西然后你

00:40:11.950 --> 00:40:15.550
知道请与他们取得联系

00:40:13.660 --> 00:40:16.750
同样，如果有的话

00:40:15.550 --> 00:40:18.070
您认为依赖管理

00:40:16.750 --> 00:40:19.720
插件的功能可能与您不同

00:40:18.070 --> 00:40:22.630
知道请也让我知道

00:40:19.720 --> 00:40:25.690
你们中那些需要留下来的人

00:40:22.630 --> 00:40:27.730
无论出于何种原因或无法做到，Gradle 4 

00:40:25.690 --> 00:40:29.800
使用Gradle 5中的本地内容

00:40:27.730 --> 00:40:31.120
出于什么原因，但希望

00:40:29.800 --> 00:40:33.340
长期依赖管理

00:40:31.120 --> 00:40:37.510
插件可以消亡， 

00:40:33.340 --> 00:40:41.470
本地的东西将接管所以

00:40:37.510 --> 00:40:44.230
这是最好的方法，真的很重要

00:40:41.470 --> 00:40:47.800
提供反馈实际上是去

00:40:44.230 --> 00:40:50.980
我们的论坛是如此令人作呕的组织和

00:40:47.800 --> 00:40:52.570
问任何您有的问题

00:40:50.980 --> 00:40:54.280
依赖管理团队很高兴

00:40:52.570 --> 00:40:56.530
帮助我们也有依赖性

00:40:54.280 --> 00:40:58.210
大量的管理系列

00:40:56.530 --> 00:41:00.520
其他更多细节

00:40:58.210 --> 00:41:04.240
概念，尤其是

00:41:00.520 --> 00:41:05.680
对于Gradle本身来说是独一无二的，他们

00:41:04.240 --> 00:41:08.650
刚刚在

00:41:05.680 --> 00:41:10.090
 Gradle博客，我们至少会有我

00:41:08.650 --> 00:41:12.580
认为我们至少还要看两个

00:41:10.090 --> 00:41:14.920
进一步研究这个新事物

00:41:12.580 --> 00:41:17.740
中的元数据格式信息

00:41:14.920 --> 00:41:22.270
特别以及如何区别

00:41:17.740 --> 00:41:24.310
来自Maven炸弹

00:41:22.270 --> 00:41:27.760
结论在这里，我们希望大家

00:41:24.310 --> 00:41:30.370
可以切换，如果可以的话

00:41:27.760 --> 00:41:32.650
因为你会得到很多好处

00:41:30.370 --> 00:41:34.660
不仅表现，而且

00:41:32.650 --> 00:41:42.790
能够更严格地控​​制什么

00:41:34.660 --> 00:41:47.050
发生，是的，我认为这是大多数

00:41:42.790 --> 00:41:49.690
我拥有的是的，所以链接到

00:41:47.050 --> 00:41:51.460
 Gradle org Doc以及

00:41:49.690 --> 00:41:52.960
关于依赖的一个非常好的部分

00:41:51.460 --> 00:41:55.000
管理，尤其是管理

00:41:52.960 --> 00:41:56.950
我的传递依赖

00:41:55.000 --> 00:42:00.490
以及大多数幻灯片上的链接

00:41:56.950 --> 00:42:03.190
幻灯片将通过我的Twitter发出

00:42:00.490 --> 00:42:04.750
帐户，所以如果您在代码上检查

00:42:03.190 --> 00:42:07.510
发电机，它会在几个时间里熄灭

00:42:04.750 --> 00:42:12.190
分钟，我们完成幻灯片或

00:42:07.510 --> 00:42:13.300
完成演示文稿是我知道的吗

00:42:12.190 --> 00:42:17.500
很多

00:42:13.300 --> 00:42:19.360
这是一个非常艰难的话题

00:42:17.500 --> 00:42:21.130
一般建筑软件

00:42:19.360 --> 00:42:23.490
好的，谢谢大家

00:42:21.130 --> 00:42:29.940
 [掌声] 

00:42:23.490 --> 00:42:29.940
 [音乐] 

