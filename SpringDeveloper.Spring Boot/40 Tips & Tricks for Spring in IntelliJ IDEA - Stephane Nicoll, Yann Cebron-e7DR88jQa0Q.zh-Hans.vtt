WEBVTT
Kind: captions
Language: zh-Hans

00:00:10.220 --> 00:00:15.530
大家早上好，欢迎来到

00:00:13.610 --> 00:00:18.140
春天的最后一天

00:00:15.530 --> 00:00:20.840
弹簧一转，很高兴看到

00:00:18.140 --> 00:00:22.610
仍然有很多人醒着

00:00:20.840 --> 00:00:25.599
不完全与以前

00:00:22.610 --> 00:00:28.730
两天，感谢您的光临和

00:00:25.599 --> 00:00:29.810
欢迎使用40个春季提示和技巧

00:00:28.730 --> 00:00:32.000
和IntelliJ IDEA 

00:00:29.810 --> 00:00:34.250
标题是公然的谎言，因为我们

00:00:32.000 --> 00:00:35.770
显示超过40个，但我猜

00:00:34.250 --> 00:00:38.829
你会很好的

00:00:35.770 --> 00:00:42.320
更何况你只能杀了

00:00:38.829 --> 00:00:45.410
我叫长江金发女郎

00:00:42.320 --> 00:00:47.930
 IntelliJ IDEA团队和JetBrains I 

00:00:45.410 --> 00:00:50.480
在弹簧支架上工作，我非常

00:00:47.930 --> 00:00:53.110
荣幸地邀请Stefan D从

00:00:50.480 --> 00:00:55.190
我是最后一位防守者，对我至关重要

00:00:53.110 --> 00:00:57.770
在Spring Framework和Spring上工作

00:00:55.190 --> 00:01:00.170
启动，我在这里的原因是我

00:00:57.770 --> 00:01:03.170
每天实际使用日元

00:01:00.170 --> 00:01:05.269
基于工具支持，所以我们聊天

00:01:03.170 --> 00:01:07.189
时不时地，我们确保

00:01:05.269 --> 00:01:08.200
 IntelliJ IDEA中的工具支持

00:01:07.189 --> 00:01:11.360
春天很棒

00:01:08.200 --> 00:01:12.950
是的，这是什么意思

00:01:11.360 --> 00:01:14.990
让您更清楚地了解我们

00:01:12.950 --> 00:01:16.780
接下来的一个小时要做的是

00:01:14.990 --> 00:01:19.729
只是你要看的幻灯片

00:01:16.780 --> 00:01:21.590
我将要切换到IntelliJ 

00:01:19.729 --> 00:01:24.530
我们将进行一小时的现场编码

00:01:21.590 --> 00:01:27.200
会议上，我们都试图涵盖尽可能多的子

00:01:24.530 --> 00:01:30.670
春季支持的项目和方面

00:01:27.200 --> 00:01:34.249
一小时内在IntelliJ中

00:01:30.670 --> 00:01:36.200
如果您是今天，关键要点就是今天

00:01:34.249 --> 00:01:37.909
您将看到IntelliJ的新功能

00:01:36.200 --> 00:01:40.729
这实际上有什么可能

00:01:37.909 --> 00:01:43.100
春天的支持，如果你已经有一些

00:01:40.729 --> 00:01:45.889
希望你有经验

00:01:43.100 --> 00:01:47.689
今天有新的技巧和窍门

00:01:45.889 --> 00:01:50.149
我们在上一个版本中放的新内容

00:01:47.689 --> 00:01:54.170
 2016。 -发行了

00:01:50.149 --> 00:01:56.659
天前，所以我想我们已经准备好

00:01:54.170 --> 00:01:59.299
开始，但在那之前我有两个

00:01:56.659 --> 00:02:02.270
谁在使用IntelliJ IDEA 

00:01:59.299 --> 00:02:06.859
已经哇！ 

00:02:02.270 --> 00:02:09.440
 80％好的，所以我们有很多人

00:02:06.859 --> 00:02:14.810
至少是某种经验

00:02:09.440 --> 00:02:18.320
使用Eclipse SDS或NetBeans可以

00:02:14.810 --> 00:02:21.140
这里有一些我们将不涉及

00:02:18.320 --> 00:02:23.390
像今天的IDE基础知识一样，如果您

00:02:21.140 --> 00:02:24.170
不要抓东西请顺路

00:02:23.390 --> 00:02:26.720
以后和

00:02:24.170 --> 00:02:29.120
我为什么要做这样的事情和IntelliJ 

00:02:26.720 --> 00:02:32.440
我们只专注于春天

00:02:29.120 --> 00:02:36.110
今天就支持吧，让我们开始吧

00:02:32.440 --> 00:02:38.060
所以我们准备了一个示范

00:02:36.110 --> 00:02:40.010
该项目也可以在

00:02:38.060 --> 00:02:43.700
 github，我稍后再发布链接

00:02:40.010 --> 00:02:46.640
在Twitter上，如果您想在

00:02:43.700 --> 00:02:47.900
回家了解我们今天做了什么

00:02:46.640 --> 00:02:50.030
还包括脚本，所以您

00:02:47.900 --> 00:02:53.110
真正能够循序渐进

00:02:50.030 --> 00:02:53.110
我们今天做

00:02:58.650 --> 00:03:04.980
所以我刚刚打开了这个演示项目， 

00:03:03.090 --> 00:03:07.909
您在下部注意到的第一件事

00:03:04.980 --> 00:03:11.840
右上角是这个通知

00:03:07.909 --> 00:03:14.069
说些什么

00:03:11.840 --> 00:03:17.579
配置的弹簧配置文件

00:03:14.069 --> 00:03:20.430
在这个项目中找到了基本的想法

00:03:17.579 --> 00:03:23.190
在那个埃利亚里，如果你想要支持

00:03:20.430 --> 00:03:25.709
对于框架或库，您需要

00:03:23.190 --> 00:03:29.069
添加一个所谓的构面

00:03:25.709 --> 00:03:30.660
基本上是元信息

00:03:29.069 --> 00:03:32.970
框架已添加到

00:03:30.660 --> 00:03:35.489
相应的模块，在那里

00:03:32.970 --> 00:03:39.420
然后为此输入特定设置

00:03:35.489 --> 00:03:41.489
技术框架无论是什么

00:03:39.420 --> 00:03:45.299
对于IntelliJ IDEA来说非常重要

00:03:41.489 --> 00:03:48.750
真正知道你的弹簧设置

00:03:45.299 --> 00:03:51.569
看起来像，在某些情况下，您必须

00:03:48.750 --> 00:03:53.099
告诉它上下文是什么样的

00:03:51.569 --> 00:03:56.519
也许Stefan可以告诉我们更多

00:03:53.099 --> 00:03:58.799
对，所以真的发生了什么

00:03:56.519 --> 00:04:03.709
你有一堆配置文件

00:03:58.799 --> 00:04:03.709
对，所以您定义意味着您定义

00:04:03.950 --> 00:04:10.260
再次下降1000，好吧

00:04:08.250 --> 00:04:12.599
重要的是您需要确保

00:04:10.260 --> 00:04:14.700
这个弹簧面在配置它

00:04:12.599 --> 00:04:16.289
 IntelliJ IDE，因为可能不是这样

00:04:14.700 --> 00:04:19.320
现在很明显，他们已经改善了很多

00:04:16.289 --> 00:04:21.329
收到此通知，但您可能在

00:04:19.320 --> 00:04:23.460
你认为春天的情况

00:04:21.329 --> 00:04:26.220
支持已启用，实际上不是

00:04:23.460 --> 00:04:29.270
真正启用，因为只要你

00:04:26.220 --> 00:04:31.530
不要用上下文创建这个方面

00:04:29.270 --> 00:04:33.300
 IntelliJ IDEA无法通过您的

00:04:31.530 --> 00:04:35.490
配置，给你聪明

00:04:33.300 --> 00:04:38.760
自动补全是了解的一种方式

00:04:35.490 --> 00:04:41.460
那东西是当你当你

00:04:38.760 --> 00:04:44.550
当您在组件和类中时

00:04:41.460 --> 00:04:46.590
所以你打开任何你拥有的垃圾箱

00:04:44.550 --> 00:04:49.289
如果没有的话，上面有一个添加组件

00:04:46.590 --> 00:04:51.360
左侧有一个装订线图标

00:04:49.289 --> 00:04:53.520
 IntelliJ IDEA不知道这是一个

00:04:51.360 --> 00:04:55.320
弹簧梁，如果它不知道它是

00:04:53.520 --> 00:04:58.410
这是弹簧梁，它可以给你

00:04:55.320 --> 00:05:00.030
未来的完成，所以

00:04:58.410 --> 00:05:02.160
我认为最重要的部分

00:05:00.030 --> 00:05:04.199
演示文稿要确保

00:05:02.160 --> 00:05:05.669
弹簧面已为您配置

00:05:04.199 --> 00:05:06.610
模块正确，我们将展示

00:05:05.669 --> 00:05:10.930
你怎么做

00:05:06.610 --> 00:05:13.840
对，所以有几个链接

00:05:10.930 --> 00:05:15.909
这个通知是的，我要去

00:05:13.840 --> 00:05:18.819
切换到演示模式

00:05:15.909 --> 00:05:21.400
分钟只有一个联赛，这叫做

00:05:18.819 --> 00:05:24.490
创建默认上下文的作用是

00:05:21.400 --> 00:05:26.349
您可以组织春季背景， 

00:05:24.490 --> 00:05:28.659
或者你可以组织你的春天

00:05:26.349 --> 00:05:31.210
各种上下文中的配置文件

00:05:28.659 --> 00:05:33.250
所以他们真的是分开的，他们是

00:05:31.210 --> 00:05:36.819
对，您可以在其中像层次结构一样建模

00:05:33.250 --> 00:05:40.389
您的上下文使用父母关系

00:05:36.819 --> 00:05:42.699
顺便说一下，两个联系人之间

00:05:40.389 --> 00:05:45.639
 Spring NBC的默认设置

00:05:42.699 --> 00:05:48.159
有servlet上下文和一个应用程序

00:05:45.639 --> 00:05:51.340
上下文，它们具有依赖性

00:05:48.159 --> 00:05:54.849
在每个时代之间，这是什么

00:05:51.340 --> 00:05:58.479
创建默认的上下文修复程序为我们做

00:05:54.849 --> 00:06:00.250
将创建那个春天的方面，它

00:05:58.479 --> 00:06:03.039
也会把所有的电话

00:06:00.250 --> 00:06:06.879
配置文件合并为一个全局文件

00:06:03.039 --> 00:06:09.580
设置在大多数情况下是什么

00:06:06.879 --> 00:06:11.740
应用程序可以与您一起工作

00:06:09.580 --> 00:06:15.759
仍然对其进行调整或手动设置

00:06:11.740 --> 00:06:19.139
后来，尽管有一个非常重要的

00:06:15.759 --> 00:06:23.050
 Spring Boot和Spring MVC的事情

00:06:19.139 --> 00:06:25.240
你不需要，你不应该尝试

00:06:23.050 --> 00:06:27.279
在以下位置手动配置这些应用程序

00:06:25.240 --> 00:06:29.259
春天的方面，因为那些

00:06:27.279 --> 00:06:32.169
应用程序具有非常严格的规则

00:06:29.259 --> 00:06:34.930
如何设置它们，以便我们运行自动

00:06:32.169 --> 00:06:36.669
检测它们，我们创建

00:06:34.930 --> 00:06:38.740
自动为您准备必要的文件

00:06:36.669 --> 00:06:43.180
而且您无法编辑它们，而您

00:06:38.740 --> 00:06:44.830
不应该尝试手动进行操作，因此

00:06:43.180 --> 00:06:47.139
最重要的是如果您使用的是 spring boot 

00:06:44.830 --> 00:06:50.500
或春季MVC，他们会照顾您

00:06:47.139 --> 00:06:52.960
是的，所以我会在顶部收到通知

00:06:50.500 --> 00:06:55.569
已经找到订单了

00:06:52.960 --> 00:06:58.509
检测到Spring MVC的上下文，因为

00:06:55.569 --> 00:07:01.629
那是示范的一部分

00:06:58.509 --> 00:07:03.699
通知我现在可以执行

00:07:01.629 --> 00:07:06.310
设置任何其他配置

00:07:03.699 --> 00:07:08.349
文件，因为它不知道我是否需要

00:07:06.310 --> 00:07:10.060
或需要多少联系以及什么

00:07:08.349 --> 00:07:11.529
文件应该在什么环境下

00:07:10.060 --> 00:07:15.550
这是用户必须要做的

00:07:11.529 --> 00:07:17.440
稍后我将要关闭

00:07:15.550 --> 00:07:18.380
现在量化，我们现在

00:07:17.440 --> 00:07:22.130
去

00:07:18.380 --> 00:07:26.390
和编码模式，所以我们这里是

00:07:22.130 --> 00:07:29.060
一个非常简单的配置类，它

00:07:26.390 --> 00:07:30.680
有一些黄色突出显示，并且

00:07:29.060 --> 00:07:33.170
警告是应用程序上下文

00:07:30.680 --> 00:07:36.140
没有配置，因为正如我所说， 

00:07:33.170 --> 00:07:37.640
需要设置这五组

00:07:36.140 --> 00:07:40.070
已经有一个弹簧面

00:07:37.640 --> 00:07:44.990
由我刚刚调用的快速修复程序创建

00:07:40.070 --> 00:07:47.380
现在我可以按alt enter来调用

00:07:44.990 --> 00:07:49.760
 IntelliJ IDEA的快速修复菜单

00:07:47.380 --> 00:07:51.770
这真的是最重要的之一

00:07:49.760 --> 00:07:53.480
 IntelliJ中的所有快捷方式

00:07:51.770 --> 00:07:56.030
快捷方式显示在

00:07:53.480 --> 00:07:58.600
屏幕上它们可能在您的系统上有所不同

00:07:56.030 --> 00:08:02.330
或取决于它显示的按键图，但是

00:07:58.600 --> 00:08:04.520
这是您要做的关键事情之一

00:08:02.330 --> 00:08:07.340
想精通IDE学习

00:08:04.520 --> 00:08:09.070
快捷方式，因为否则

00:08:07.340 --> 00:08:14.540
浪费你的时间

00:08:09.070 --> 00:08:18.520
所以让我们调用这个我可以创建的前缀

00:08:14.540 --> 00:08:22.550
现在一个新的背景，这将打开

00:08:18.520 --> 00:08:27.770
配置对话框，我可以给它一个

00:08:22.550 --> 00:08:30.680
描述性名称，然后

00:08:27.770 --> 00:08:32.719
我曾经使用过的配置类

00:08:30.680 --> 00:08:35.030
调用已经预先选择的此修复程序

00:08:32.719 --> 00:08:39.349
只是去那个有罪的班

00:08:35.030 --> 00:08:41.539
单击确定，如果您刚刚在

00:08:39.349 --> 00:08:45.100
编辑器的左侧是

00:08:41.539 --> 00:08:48.050
我们展示的所谓的排水沟区域

00:08:45.100 --> 00:08:50.660
主要用于提供信息的图标

00:08:48.050 --> 00:08:52.790
或导航目的，我们只是

00:08:50.660 --> 00:08:55.640
收到了一堆，这意味着

00:08:52.790 --> 00:08:58.400
现在警告也消失了，所以

00:08:55.640 --> 00:09:01.040
 IntelliJ IDE现在可以理解

00:08:58.400 --> 00:09:03.950
此配置是您的一部分

00:09:01.040 --> 00:09:05.690
在您的项目中设置弹簧，因此在

00:09:03.950 --> 00:09:08.600
演示，我们将创建几个

00:09:05.690 --> 00:09:11.450
仅包含您的一个子集的上下文

00:09:08.600 --> 00:09:14.210
在项目中配置的原因

00:09:11.450 --> 00:09:17.300
我们为什么要做的就是分开

00:09:14.210 --> 00:09:18.590
他们作为一个单独的例子，以便他们

00:09:17.300 --> 00:09:20.570
不要拉你彼此

00:09:18.590 --> 00:09:22.400
但实际上是在您自己的项目中

00:09:20.570 --> 00:09:24.170
通常你拥有的只是一个方面

00:09:22.400 --> 00:09:26.990
一个上下文，并且您对其进行了正确配置

00:09:24.170 --> 00:09:28.640
所以开始就不要困惑

00:09:26.990 --> 00:09:29.590
创建一堆联系人，这不是

00:09:28.640 --> 00:09:33.430
你的东西

00:09:29.590 --> 00:09:37.120
您将在一个常规项目中全部完成

00:09:33.430 --> 00:09:39.370
正确，让我们看一下那些图标

00:09:37.120 --> 00:09:41.830
所以我要谈的第一个是

00:09:39.370 --> 00:09:42.970
今年，食物提示说

00:09:41.830 --> 00:09:45.280
关于弹簧模型

00:09:42.970 --> 00:09:48.040
依赖项，因此此配置类

00:09:45.280 --> 00:09:51.250
确实有几个额外的弹簧

00:09:48.040 --> 00:09:53.890
与配置相关的注释，我们有一个

00:09:51.250 --> 00:09:56.170
组件扫描，我们有一个导入

00:09:53.890 --> 00:09:57.970
其他配置类，我们

00:09:56.170 --> 00:10:00.900
还导入一些图片和每个来源

00:09:57.970 --> 00:10:03.220
只是要回到90年代

00:10:00.900 --> 00:10:06.100
有时候有点难以理解

00:10:03.220 --> 00:10:07.840
运行时的实际上下文是什么

00:10:06.100 --> 00:10:09.880
看起来像当您进口时

00:10:07.840 --> 00:10:12.400
进行组件扫描

00:10:09.880 --> 00:10:15.340
创建大量的配置

00:10:12.400 --> 00:10:19.660
依赖于该主类的类

00:10:15.340 --> 00:10:22.660
配置类，我们可以检查

00:10:19.660 --> 00:10:27.150
在IDE中只需单击即可

00:10:22.660 --> 00:10:32.440
在此显示模型依赖关系图

00:10:27.150 --> 00:10:38.530
我们可以看到有几个

00:10:32.440 --> 00:10:40.570
这里代表的节点数

00:10:38.530 --> 00:10:44.170
这个级别的文件在上下文中我们

00:10:40.570 --> 00:10:46.060
然后有配置类

00:10:44.170 --> 00:10:47.980
定义它也显示更多

00:10:46.060 --> 00:10:50.410
工具提示中的信息，例如

00:10:47.980 --> 00:10:53.350
进口数量和类似的东西

00:10:50.410 --> 00:10:58.990
然后我们可以看到所有这些进口

00:10:53.350 --> 00:11:01.180
我们刚刚讨论了导入可以

00:10:58.990 --> 00:11:02.890
还有其他进口，所以你实际上可以

00:11:01.180 --> 00:11:04.780
看到你的整个图

00:11:02.890 --> 00:11:07.330
配置，因为它将由

00:11:04.780 --> 00:11:10.090
春天在运行时，这是一个非常

00:11:07.330 --> 00:11:12.550
我想了解设置的不错功能

00:11:10.090 --> 00:11:14.140
项目中存在项目中的问题

00:11:12.550 --> 00:11:16.180
如果您是项目的新手，如果您

00:11:14.140 --> 00:11:18.370
需要了解什么结构

00:11:16.180 --> 00:11:23.110
弹簧配置实际上可以

00:11:18.370 --> 00:11:26.440
当然在运行时我们可以导航

00:11:23.110 --> 00:11:32.560
从这里到对应的节点

00:11:26.440 --> 00:11:35.350
这就是我要在此XML中执行的操作

00:11:32.560 --> 00:11:37.500
第二个文件

00:11:35.350 --> 00:11:37.500
水平

00:11:37.999 --> 00:11:44.929
这个图也很好检测

00:11:41.069 --> 00:11:47.429
为了演示的目的，我

00:11:44.929 --> 00:11:50.699
复制了此组件扫描

00:11:47.429 --> 00:11:53.459
将导致的定义以及所有

00:11:50.699 --> 00:11:55.709
 bean或配置类是

00:11:53.459 --> 00:11:58.169
扫描被复制的是

00:11:55.709 --> 00:12:01.279
经常发生的事情或

00:11:58.169 --> 00:12:04.289
是的，这取决于您的项目

00:12:01.279 --> 00:12:06.599
如果您通常使用弹簧

00:12:04.289 --> 00:12:09.029
与目录良好的应用程序

00:12:06.599 --> 00:12:10.949
我们建议您使用的结构

00:12:09.029 --> 00:12:13.109
出现这种情况的机会更少

00:12:10.949 --> 00:12:15.239
但是如果你有一个春天的项目

00:12:13.109 --> 00:12:17.279
基于框架的项目有很多

00:12:15.239 --> 00:12:20.839
仪器配置不是真的

00:12:17.279 --> 00:12:23.939
容易弄清楚会发生什么，一个

00:12:20.839 --> 00:12:25.349
因此通常四个周期

00:12:23.939 --> 00:12:28.559
上下文实际上对

00:12:25.349 --> 00:12:30.509
检测到它们并仍然能够加载

00:12:28.559 --> 00:12:32.639
您认为我的申请可以

00:12:30.509 --> 00:12:34.799
对的问题，因为我们已经建立了

00:12:32.639 --> 00:12:36.929
社区要求我们成为

00:12:34.799 --> 00:12:38.159
关于它更聪明，但另一方面

00:12:36.929 --> 00:12:40.739
你没有一个事实

00:12:38.159 --> 00:12:43.350
立即例外也意味着

00:12:40.739 --> 00:12:44.609
有时您的配置是

00:12:43.350 --> 00:12:47.519
实际上是无效的，而你不是真的

00:12:44.609 --> 00:12:50.549
知道这是无效的一件事

00:12:47.519 --> 00:12:53.369
在这种情况下的问题是

00:12:50.549 --> 00:12:56.159
您扫描的光束定义不

00:12:53.369 --> 00:12:58.319
有一个ID，所以如果您考虑XML 

00:12:56.159 --> 00:13:01.259
配置是某类

00:12:58.319 --> 00:13:03.329
对，您不指定ID，因为

00:13:01.259 --> 00:13:05.309
如果导入，则不需要

00:13:03.329 --> 00:13:07.589
两次上课，你会得到两个垃圾箱

00:13:05.309 --> 00:13:09.059
那个东西的定义，因为

00:13:07.589 --> 00:13:10.889
第一次要处理

00:13:09.059 --> 00:13:13.439
箱定义将被读取

00:13:10.889 --> 00:13:16.379
自动生成一个自动生成的ID 

00:13:13.439 --> 00:13:17.249
关联到第二次

00:13:16.379 --> 00:13:20.100
我们会处理

00:13:17.249 --> 00:13:23.069
好吧，我们将再次传递它并生成

00:13:20.100 --> 00:13:24.929
另一个为此自动生成的ID 

00:13:23.069 --> 00:13:26.309
所以你最终会在两个垃圾箱里

00:13:24.929 --> 00:13:29.129
联系人，您可能不想要

00:13:26.309 --> 00:13:30.929
没错，所以我见过很多人

00:13:29.129 --> 00:13:33.239
通过添加ID来实际解决此问题

00:13:30.929 --> 00:13:35.009
因为在这种情况下，因为您提供

00:13:33.239 --> 00:13:36.779
这个想法和这个想法一样

00:13:35.009 --> 00:13:38.759
定义将被覆盖，您将

00:13:36.779 --> 00:13:40.739
最终只有一个垃圾箱，但实际上你

00:13:38.759 --> 00:13:42.539
应该做的就是使用这些功能

00:13:40.739 --> 00:13:45.299
找出那些周期并削减那些

00:13:42.539 --> 00:13:48.370
周期，所以也许很难看到

00:13:45.299 --> 00:13:51.190
在屏幕上，但是有一个红色

00:13:48.370 --> 00:13:53.680
这里的箭头基本上重复了

00:13:51.190 --> 00:13:56.460
定义原始文字的蓝色箭头

00:13:53.680 --> 00:14:00.100
并且没有重复的组件可以并且

00:13:56.460 --> 00:14:01.720
我什至可以点击那些错误

00:14:00.100 --> 00:14:04.570
它会带我确切

00:14:01.720 --> 00:14:07.450
引用此注释的定义

00:14:04.570 --> 00:14:10.839
从这是一个非常好的功能

00:14:07.450 --> 00:14:14.800
发现问题并可视化

00:14:10.839 --> 00:14:17.800
如果您是Spring应用程序的设置

00:14:14.800 --> 00:14:19.570
使用Java confit，您已经注意到

00:14:17.800 --> 00:14:22.240
组件可以注释有一个

00:14:19.570 --> 00:14:24.490
旁边的吸气剂图标实际上是

00:14:22.240 --> 00:14:26.589
我最喜欢的人之一

00:14:24.490 --> 00:14:29.650
功能，如果您单击它，您将

00:14:26.589 --> 00:14:31.740
基本上得到的豆列表

00:14:29.650 --> 00:14:35.110
已导入已发现的

00:14:31.740 --> 00:14:36.970
通过那是直接的指令，所以你

00:14:35.110 --> 00:14:38.860
可能有几个组件可以

00:14:36.970 --> 00:14:41.290
不管什么原因可能都不这样做

00:14:38.860 --> 00:14:44.680
但要配合不同的打包日

00:14:41.290 --> 00:14:46.900
如果您单击每个单独的

00:14:44.680 --> 00:14:48.460
您会确切地看到可以

00:14:46.900 --> 00:14:49.330
一次注册非常

00:14:48.460 --> 00:14:52.890
有用的权利

00:14:49.330 --> 00:14:56.980
所以我们看到了B名称列表和

00:14:52.890 --> 00:14:59.290
这些豆子的类别或类型，我们

00:14:56.980 --> 00:15:03.310
当然可以点击它们进行导航

00:14:59.290 --> 00:15:06.040
到实际包含的豆子中

00:15:03.310 --> 00:15:09.400
由组件可以定义，但一个

00:15:06.040 --> 00:15:12.190
我最喜欢的技巧以节省时间

00:15:09.400 --> 00:15:14.770
这些弹出窗口中的任何一个或大多数

00:15:12.190 --> 00:15:16.870
完成列表，并使用IntelliJ 

00:15:14.770 --> 00:15:20.170
一种称为点击的功能

00:15:16.870 --> 00:15:22.990
当我这样做的时候定义

00:15:20.170 --> 00:15:25.630
实际上在这里打开毛孔并显示

00:15:22.990 --> 00:15:28.089
我是的内联编辑器表示形式

00:15:25.630 --> 00:15:30.430
该导航目标，所以我没有

00:15:28.089 --> 00:15:33.910
单击它以查看实际上是什么

00:15:30.430 --> 00:15:38.860
这个名字的后面，但我只能看到它

00:15:33.910 --> 00:15:40.390
在列表中，我可以打开另一个

00:15:38.860 --> 00:15:44.279
好吧，我不必离开我的

00:15:40.390 --> 00:15:44.279
目前的编辑只是为了检查东西

00:15:44.320 --> 00:15:48.220
所以在Spring Framework中有这个

00:15:46.060 --> 00:15:50.620
这个很流行的功能

00:15:48.220 --> 00:15:53.589
这些天是MIT注释

00:15:50.620 --> 00:15:54.490
我们已经在

00:15:53.589 --> 00:15:58.329
这些天的框架

00:15:54.490 --> 00:16:00.880
所以金属符号是关于组成

00:15:58.329 --> 00:16:03.459
给定用例的七个注释

00:16:00.880 --> 00:16:06.699
所以在Spring框架中，我们三个

00:16:03.459 --> 00:16:08.079
所有人都有这个获取映射注释

00:16:06.699 --> 00:16:10.660
大概知道您是否使用spring MVC 

00:16:08.079 --> 00:16:13.389
请求映射，你基本上给

00:16:10.660 --> 00:16:18.069
路径和一些属性，例如

00:16:13.389 --> 00:16:21.250
要绑定的HTTP方法，因此如果需要

00:16:18.069 --> 00:16:23.769
如果您需要一个请求映射

00:16:21.250 --> 00:16:25.899
用于发布的相同URI，但您会

00:16:23.769 --> 00:16:28.709
有两种方法，一种说我可以

00:16:25.899 --> 00:16:30.699
想要四个得到，我想要这个职位

00:16:28.709 --> 00:16:32.470
所以我们认为也许

00:16:30.699 --> 00:16:33.970
很高兴有一些奉献精神

00:16:32.470 --> 00:16:36.550
为此的注释，但仍然

00:16:33.970 --> 00:16:38.529
支持所有功能，因此我们在照片中

00:16:36.550 --> 00:16:41.019
 3我们有映射和后映射

00:16:38.529 --> 00:16:42.819
这基本上是一个元注释

00:16:41.019 --> 00:16:44.139
用专用请求映射

00:16:42.819 --> 00:16:46.389
方法，所以你不必

00:16:44.139 --> 00:16:47.649
指定您可以做到这一点

00:16:46.389 --> 00:16:49.990
例如，如果您有一个

00:16:47.649 --> 00:16:51.579
需要启用缓存和

00:16:49.990 --> 00:16:53.589
交易，您可以创建一个

00:16:51.579 --> 00:16:55.899
注释我的交易猫或

00:16:53.589 --> 00:16:59.199
不管名字是我的服务

00:16:55.899 --> 00:17:01.690
将应用这两个方面是什么

00:16:59.199 --> 00:17:03.579
重要的是当你做

00:17:01.690 --> 00:17:06.220
或当您使用此类功能时

00:17:03.579 --> 00:17:08.199
不要丢失身份证检查，所以再次

00:17:06.220 --> 00:17:09.640
现在要告诉你如果

00:17:08.199 --> 00:17:11.140
您创建自己的组件可以

00:17:09.640 --> 00:17:14.140
再次注释不是你

00:17:11.140 --> 00:17:16.419
会达到演示目的，但要保持

00:17:14.140 --> 00:17:18.339
请注意，这就是您的功能

00:17:16.419 --> 00:17:20.829
会期望如果您遇到其他注释

00:17:18.339 --> 00:17:23.140
正确的功能，让文字让我们

00:17:20.829 --> 00:17:25.630
快速查看我们的示范

00:17:23.140 --> 00:17:27.370
如您所见，我们有

00:17:25.630 --> 00:17:30.400
在此处添加组件扫描

00:17:27.370 --> 00:17:32.940
被识别为

00:17:30.400 --> 00:17:36.730
 Spring框架或注释和

00:17:32.940 --> 00:17:39.130
有专门的注释

00:17:36.730 --> 00:17:42.360
重新定义现有属性，以便您可以

00:17:39.130 --> 00:17:46.510
阅读eclair并给他们起一个新名字， 

00:17:42.360 --> 00:17:48.580
这允许注释也接收

00:17:46.510 --> 00:17:50.980
代码完成支持和IntelliJ这样

00:17:48.580 --> 00:17:53.860
我在这里有一个字符串数组

00:17:50.980 --> 00:17:55.240
应该重新定义原始基础

00:17:53.860 --> 00:17:57.160
包属性

00:17:55.240 --> 00:18:00.610
和IntelliJ IDEA将自动

00:17:57.160 --> 00:18:03.340
显示所有匹配的属性

00:18:00.610 --> 00:18:05.559
在原始组件中可用

00:18:03.340 --> 00:18:09.220
可以注释并建议这些名称

00:18:05.559 --> 00:18:12.370
对我来说，因为我也从什么定义

00:18:09.220 --> 00:18:15.700
我想让同盟存在的注释

00:18:12.370 --> 00:18:17.650
属性表格，然后回到

00:18:15.700 --> 00:18:20.080
主要配置，您可以看到所有

00:18:17.650 --> 00:18:23.140
导航图标和东西仍然

00:18:20.080 --> 00:18:26.140
可用，并且基本上适用于

00:18:23.140 --> 00:18:28.660
所有您自己的自定义元注释

00:18:26.140 --> 00:18:31.500
每当你做这样的事情

00:18:28.660 --> 00:18:34.059
不会失去对IDE的支持

00:18:31.500 --> 00:18:36.670
为原始的Spring框架构建

00:18:34.059 --> 00:18:38.230
注解，但足够聪明

00:18:36.670 --> 00:18:41.200
弄清楚你实际上是

00:18:38.230 --> 00:18:42.790
使用原始属性并提供

00:18:41.200 --> 00:18:46.720
对此的支持程度与

00:18:42.790 --> 00:18:49.720
好吧，如果您觉得还有

00:18:46.720 --> 00:18:52.360
左侧有许多吸气剂图标，您

00:18:49.720 --> 00:18:54.000
开始有点厌烦，因为

00:18:52.360 --> 00:18:55.900
也许其中一些并不是真的有用

00:18:54.000 --> 00:18:58.480
请记住，您实际上可以

00:18:55.900 --> 00:19:01.179
如果您不想看到，请禁用它们

00:18:58.480 --> 00:19:03.700
例如你的图表的东西，因为

00:19:01.179 --> 00:19:06.040
您不会经常使用它

00:19:03.700 --> 00:19:08.320
容易在选项中禁用它

00:19:06.040 --> 00:19:11.140
所以我们尝试把所有的水槽分开

00:19:08.320 --> 00:19:14.290
图标设置为单独的设置，以便您可以

00:19:11.140 --> 00:19:18.550
根据您的情况进行调整

00:19:14.290 --> 00:19:22.650
个人喜好首先

00:19:18.550 --> 00:19:25.390
从现在开始代码配置

00:19:22.650 --> 00:19:27.940
我们将回到这个班级

00:19:25.390 --> 00:19:31.780
等一下，但是首先我们要

00:19:27.940 --> 00:19:34.690
切换到有关UI的内容

00:19:31.780 --> 00:19:39.220
有一个专用的spring tool窗口

00:19:34.690 --> 00:19:43.720
在IntelliJ IDEA中我可以在这里做什么

00:19:39.220 --> 00:19:46.720
可以看到我项目中的bean列表

00:19:43.720 --> 00:19:48.610
这非常方便，因为您可以

00:19:46.720 --> 00:19:50.910
实际确保您的设置是

00:19:48.610 --> 00:19:53.890
只需检查

00:19:50.910 --> 00:19:57.460
产生的豆有望匹配

00:19:53.890 --> 00:19:59.050
您一次想要什么，您

00:19:57.460 --> 00:20:03.930
也可以用它显示更多信息

00:19:59.050 --> 00:20:06.210
关于它，所以当我单击此处

00:20:03.930 --> 00:20:09.360
意外点击，因此它已经打开

00:20:06.210 --> 00:20:14.340
光束的定义，但你也

00:20:09.360 --> 00:20:16.280
在这里有文档支持，我们可以

00:20:14.340 --> 00:20:17.970
看到其中一些豆子是

00:20:16.280 --> 00:20:20.430
用不同的背景突出显示

00:20:17.970 --> 00:20:22.470
颜色是因为它们是隐式的

00:20:20.430 --> 00:20:27.060
春天提供的豆子

00:20:22.470 --> 00:20:30.690
框架自动我们可以切换

00:20:27.060 --> 00:20:34.040
如果我们不想看到它们的话

00:20:30.690 --> 00:20:36.810
他们，你也可以看到一些

00:20:34.040 --> 00:20:40.380
基础架构豆（如关键组件） 

00:20:36.810 --> 00:20:46.860
游戏的东西另一件事是非常

00:20:40.380 --> 00:20:50.100
当我关闭此工具窗口时

00:20:46.860 --> 00:20:52.080
现在，我回到我的一个豆子里

00:20:50.100 --> 00:20:55.590
我的应用有时会有点困难

00:20:52.080 --> 00:20:58.440
了解它的实际位置

00:20:55.590 --> 00:21:02.340
定义，所以我需要启用一件事

00:20:58.440 --> 00:21:07.110
首先使其更有用的是展示

00:21:02.340 --> 00:21:08.700
以及上下文，您可以看到我们

00:21:07.110 --> 00:21:12.450
在上下文之间有两个层次

00:21:08.700 --> 00:21:14.430
配置文件，然后

00:21:12.450 --> 00:21:18.300
由此产生的豆还可以

00:21:14.430 --> 00:21:20.700
当您的光标再次关闭

00:21:18.300 --> 00:21:23.040
在某种定义上有一个通用的

00:21:20.700 --> 00:21:25.800
 IntelliJ中的功能来导航或

00:21:23.040 --> 00:21:30.180
在工具之一中选择该元素

00:21:25.800 --> 00:21:32.250
 Windows，这就是所谓的选择

00:21:30.180 --> 00:21:34.500
几个导航目标

00:21:32.250 --> 00:21:36.660
例如项目视图

00:21:34.500 --> 00:21:39.800
春季豆使用，所以当我选择

00:21:36.660 --> 00:21:43.250
一种实际上会扩展树

00:21:39.800 --> 00:21:48.060
自动匹配相应的

00:21:43.250 --> 00:21:50.370
配置和上下文是

00:21:48.060 --> 00:21:52.830
负责设置那个bean，所以

00:21:50.370 --> 00:21:55.470
这是检查在哪里做的好方法

00:21:52.830 --> 00:22:02.640
这个豆是从哪里来的

00:21:55.470 --> 00:22:05.940
好，好，关于spring tool

00:22:02.640 --> 00:22:09.840
 CSUN代码的窗口，是的，实际上

00:22:05.940 --> 00:22:13.830
现在输入一点，回到我们的主

00:22:09.840 --> 00:22:20.550
配置类我们第一件事

00:22:13.830 --> 00:22:23.040
我们要做的是有点不确定

00:22:20.550 --> 00:22:25.260
可能是屏幕顶部栏

00:22:23.040 --> 00:22:26.880
并未真正显示任何文字，但

00:22:25.260 --> 00:22:29.700
工具提示说了一些关于主动

00:22:26.880 --> 00:22:31.830
轮廓，所以我们的轮廓弹簧

00:22:29.700 --> 00:22:38.580
对，所以轮廓是弹簧的特征

00:22:31.830 --> 00:22:41.970
允许您调整上下文

00:22:38.580 --> 00:22:44.490
实例来覆盖一些bean或

00:22:41.970 --> 00:22:46.260
添加其他豆类，或者

00:22:44.490 --> 00:22:49.230
 spring boot 添加其他配置

00:22:46.260 --> 00:22:50.430
对，所以最基本的例子

00:22:49.230 --> 00:22:52.290
可以找到您是否正在使用Spring 

00:22:50.430 --> 00:22:52.950
您可能创建的框架指令

00:22:52.290 --> 00:22:54.960
数据源

00:22:52.950 --> 00:22:57.750
你自己，如果你不愿意的话

00:22:54.960 --> 00:23:00.120
你用的是春天的好东西

00:22:57.750 --> 00:23:02.640
您想进入的本地环境

00:23:00.120 --> 00:23:05.010
内存数据库以及部署时

00:23:02.640 --> 00:23:06.960
您想使用铁的生产中的应用程序

00:23:05.010 --> 00:23:09.420
或某人的数据库

00:23:06.960 --> 00:23:11.040
选择使用，所以实际上有两个垃圾箱

00:23:09.420 --> 00:23:12.780
定义或某些属性

00:23:11.040 --> 00:23:15.030
我已经改变了，正在改变， 

00:23:12.780 --> 00:23:17.370
你想能够做到这一点而没有

00:23:15.030 --> 00:23:19.110
改变罐子里的东西，让你

00:23:17.370 --> 00:23:21.720
希望拥有相同的应用程序，并且

00:23:19.110 --> 00:23:22.430
只需拨动开关并启用一个或

00:23:21.720 --> 00:23:25.140
其他

00:23:22.430 --> 00:23:27.510
 Spring Framework具有此配置文件

00:23:25.140 --> 00:23:30.420
您可以在配置上使用的注释

00:23:27.510 --> 00:23:32.250
可以启用该配置的类

00:23:30.420 --> 00:23:35.250
想要该个人资料时上课

00:23:32.250 --> 00:23:37.590
积极的权利，所以你可以说你可以

00:23:35.250 --> 00:23:39.330
将生产数据库放入某种形式

00:23:37.590 --> 00:23:42.060
生产数据库配置

00:23:39.330 --> 00:23:44.640
在顶部添加任何配置文件生产

00:23:42.060 --> 00:23:46.260
还有那些

00:23:44.640 --> 00:23:49.050
定义那里将被加载并将

00:23:46.260 --> 00:23:51.720
最终超越那些

00:23:49.050 --> 00:23:54.270
没有个人资料，有一种方法可以启用

00:23:51.720 --> 00:23:57.960
按属性进行配置，但就在这里

00:23:54.270 --> 00:23:59.670
我们拥有的是我们也许可以

00:23:57.960 --> 00:24:02.610
激活个人资料

00:23:59.670 --> 00:24:04.410
你想这样做，所以我们可以

00:24:02.610 --> 00:24:06.240
实际模拟切换

00:24:04.410 --> 00:24:09.700
斯蒂芬举例说明

00:24:06.240 --> 00:24:13.300
在死亡和生产环境之间

00:24:09.700 --> 00:24:16.059
通过告诉IDE应该使用哪个配置文件

00:24:13.300 --> 00:24:19.360
立即在我的IDE中处于活动状态，以便我

00:24:16.059 --> 00:24:22.930
可以像浏览弹簧上下文一样导航

00:24:19.360 --> 00:24:25.510
例如在设定的环境中

00:24:22.930 --> 00:24:27.760
所以这实际上是第二步

00:24:25.510 --> 00:24:29.559
第一步是配置

00:24:27.760 --> 00:24:31.090
当前文本（如果您使用的是Spring Boot） 

00:24:29.559 --> 00:24:35.320
 Spring MVC自动完成

00:24:31.090 --> 00:24:37.150
您，以便IntelliJ IDEA知道

00:24:35.320 --> 00:24:39.760
它知道什么的国家

00:24:37.150 --> 00:24:41.980
您已经定义了第二步是说

00:24:39.760 --> 00:24:45.730
现在在我的环境中

00:24:41.980 --> 00:24:47.770
与生产资料有关

00:24:45.730 --> 00:24:50.500
意思是每当您要求数据时

00:24:47.770 --> 00:24:52.660
源B将指向光束

00:24:50.500 --> 00:24:54.820
实际上定义了

00:24:52.660 --> 00:24:57.670
生产数据源，因为它将

00:24:54.820 --> 00:24:59.170
知道，因为你说我正在与

00:24:57.670 --> 00:25:01.110
与生产资料一样

00:24:59.170 --> 00:25:04.030
在运行时没有做任何特别的事情

00:25:01.110 --> 00:25:07.570
但是它给你像

00:25:04.030 --> 00:25:09.760
个人资料处于活动状态，因此我们可以在此处进行更改

00:25:07.570 --> 00:25:11.500
活动配置文件实际上在不同的位置

00:25:09.760 --> 00:25:15.790
项目级别在模块级别

00:25:11.500 --> 00:25:18.460
甚至在特定情况下

00:25:15.790 --> 00:25:21.120
这里有两个配置文件，主要和自定义

00:25:18.460 --> 00:25:24.429
现在要激活主配置文件

00:25:21.120 --> 00:25:27.970
我们可以看到活动名称

00:25:24.429 --> 00:25:31.150
配置文件现在显示在编辑器顶部

00:25:27.970 --> 00:25:33.640
栏，因此您始终知道什么配置文件

00:25:31.150 --> 00:25:36.100
我刚刚在IDE中激活了我是什么吗

00:25:33.640 --> 00:25:38.020
现在看到的是那些箭头

00:25:36.100 --> 00:25:40.960
我现在想看的东西

00:25:38.020 --> 00:25:42.730
但是黄色有红色的东西

00:25:40.960 --> 00:25:45.690
是的，对不起

00:25:42.730 --> 00:25:49.690
哈哈那是故意的

00:25:45.690 --> 00:25:50.890
有长光束请原谅

00:25:49.690 --> 00:25:54.670
输入只是用于演示

00:25:50.890 --> 00:25:58.300
目的，但显然有两个

00:25:54.670 --> 00:26:02.740
定义的将与

00:25:58.300 --> 00:26:04.570
长按并说挥杆不知道

00:26:02.740 --> 00:26:07.179
该怎么做才对，所以如果你

00:26:04.570 --> 00:26:09.010
启动此应用程序将失败，并IntelliJ 

00:26:07.179 --> 00:26:11.830
 IDEA现在已经知道了

00:26:09.010 --> 00:26:13.600
由于您的个人资料而失败

00:26:11.830 --> 00:26:14.300
启用可能是我们的下一个陷阱

00:26:13.600 --> 00:26:15.890
在最后

00:26:14.300 --> 00:26:18.830
对于已添加的那个bean类型

00:26:15.890 --> 00:26:20.630
或类似的东西，你知道你是

00:26:18.830 --> 00:26:22.190
基本上问联系人给我一个

00:26:20.630 --> 00:26:24.460
那种豆，但是有两个

00:26:22.190 --> 00:26:28.130
他们，你没有指定哪一个

00:26:24.460 --> 00:26:29.780
春天实际上应该注入，那是什么

00:26:28.130 --> 00:26:32.420
很高兴IntelliJ IDEA知道

00:26:29.780 --> 00:26:34.090
那东西，它将能够

00:26:32.420 --> 00:26:36.800
警告您并给您系统

00:26:34.090 --> 00:26:37.400
也许我们可以尝试快速修复并看看

00:26:36.800 --> 00:26:40.220
怎么了

00:26:37.400 --> 00:26:43.250
也许有一个快速修复万岁-哇

00:26:40.220 --> 00:26:45.110
所以这是同样的捷径

00:26:43.250 --> 00:26:47.510
快速修复添加的主要配置

00:26:45.110 --> 00:26:50.030
从各个方面来看，它始终是相同的

00:26:47.510 --> 00:26:52.190
快捷方式，以便每当您看到警告时

00:26:50.030 --> 00:26:54.440
每当你看到一个

00:26:52.190 --> 00:26:55.940
弹簧支撑或不总是使用

00:26:54.440 --> 00:26:57.980
快速修复，因为可能第一个

00:26:55.940 --> 00:27:01.580
选项会有所帮助

00:26:57.980 --> 00:27:03.920
您修复了它，因此它显示了快速修复

00:27:01.580 --> 00:27:06.680
我这里实际上是两个

00:27:03.920 --> 00:27:08.390
较高的第一个是添加

00:27:06.680 --> 00:27:10.280
我们将在

00:27:08.390 --> 00:27:12.260
第二和第二个也是

00:27:10.280 --> 00:27:15.700
有趣，因为我实际上没有

00:27:12.260 --> 00:27:18.410
再次显示豆的列表

00:27:15.700 --> 00:27:21.170
可能需要自动布线的猫需要候选人

00:27:18.410 --> 00:27:23.900
在那个地方，我可以再次使用我的

00:27:21.170 --> 00:27:26.180
最喜欢的快捷方式技巧定义为

00:27:23.900 --> 00:27:29.780
检查他们，看看我该选择哪一个

00:27:26.180 --> 00:27:32.780
当我现在调用

00:27:29.780 --> 00:27:36.320
修复添加合格的限定词

00:27:32.780 --> 00:27:39.320
当然，您再次获得注解

00:27:36.320 --> 00:27:41.960
完成这里，我可以选择一个

00:27:39.320 --> 00:27:43.970
我可以控制点击这里

00:27:41.960 --> 00:27:47.180
我什至在这里点击了

00:27:43.970 --> 00:27:49.310
编辑我可以去那里，我们可以看到

00:27:47.180 --> 00:27:52.910
是的，这是正确的，因为这

00:27:49.310 --> 00:27:56.390
主配置文件的配置已激活

00:27:52.910 --> 00:27:59.870
仅IntelliJ IDEA了解所有内容

00:27:56.390 --> 00:28:03.170
在您的IDE中正确执行此操作

00:27:59.870 --> 00:28:05.120
如果您使用配置文件或

00:28:03.170 --> 00:28:08.060
自动接线或任何这些功能

00:28:05.120 --> 00:28:10.880
您立即获得验证

00:28:08.060 --> 00:28:14.750
您在设置应用程序的同时

00:28:10.880 --> 00:28:17.230
编写代码，所以我认为仍然

00:28:14.750 --> 00:28:19.809
可能是个问题

00:28:17.230 --> 00:28:23.080
这个想法总是在抱怨

00:28:19.809 --> 00:28:24.280
唱歌哦，自动驾驶仪注释

00:28:23.080 --> 00:28:27.700
不喜欢

00:28:24.280 --> 00:28:31.390
不推荐燃油喷射，为什么

00:28:27.700 --> 00:28:32.169
所以你可能听说过

00:28:31.390 --> 00:28:34.390
之前

00:28:32.169 --> 00:28:36.760
春季团队建议您不要使用

00:28:34.390 --> 00:28:39.250
感觉到它不会弹出

00:28:36.760 --> 00:28:41.080
加强服务的单位能力，因此

00:28:39.250 --> 00:28:43.240
如果注入依赖项，则没有

00:28:41.080 --> 00:28:44.860
更改它们的原因，所以您可能

00:28:43.240 --> 00:28:48.040
想要使字段最终确定，而您

00:28:44.860 --> 00:28:50.710
第二个是做不到的

00:28:48.040 --> 00:28:53.500
技术，您不能使用

00:28:50.710 --> 00:28:55.600
构造函数，因为我们首先需要

00:28:53.500 --> 00:28:57.820
创建一个实例，一旦我们有了

00:28:55.600 --> 00:28:59.440
实例，我们可以在

00:28:57.820 --> 00:29:01.690
这就是我已经在

00:28:59.440 --> 00:29:04.330
如果您开始使用该字段，则这样做

00:29:01.690 --> 00:29:06.160
通常你应该没有的领域

00:29:04.330 --> 00:29:07.480
带来框架，那么你会得到一个新的

00:29:06.160 --> 00:29:10.030
打印机异常，因为该字段是

00:29:07.480 --> 00:29:11.830
尚未设定，最后如果您提升

00:29:10.030 --> 00:29:15.130
构造函数注入

00:29:11.830 --> 00:29:16.600
更轻松地测试代码

00:29:15.130 --> 00:29:21.940
这是你应该做的

00:29:16.600 --> 00:29:25.080
是的，只要是一个博客

00:29:21.940 --> 00:29:28.090
该帖子在我们中很受欢迎

00:29:25.080 --> 00:29:29.980
它是由Oliver guca撰写的

00:29:28.090 --> 00:29:33.370
春天的鳄鱼队，他表现不错

00:29:29.980 --> 00:29:36.100
尽量不要使用场注入

00:29:33.370 --> 00:29:37.450
所以如果您使用如果您升级IntelliJ 

00:29:36.100 --> 00:29:38.860
 IDE，您使用恐惧注入和

00:29:37.450 --> 00:29:42.400
您将默认获得该背景

00:29:38.860 --> 00:29:43.870
是的，图片会自动弹出

00:29:42.400 --> 00:29:48.580
在您的编辑器中

00:29:43.870 --> 00:29:52.660
感谢奥利弗（Oliver）使我们意识到

00:29:48.580 --> 00:29:55.450
这种自动接线的糟糕方法

00:29:52.660 --> 00:29:57.910
因此，有一个快速修复方法，对

00:29:55.450 --> 00:29:59.980
当然，这是一个快速修复

00:29:57.910 --> 00:30:03.280
点击全部进入显示意图动作

00:29:59.980 --> 00:30:04.830
我可以将此节点转换为

00:30:03.280 --> 00:30:09.100
推荐的使用方式

00:30:04.830 --> 00:30:12.190
构造函数注入就是这样

00:30:09.100 --> 00:30:19.360
手动输入一个完成的前缀

00:30:12.190 --> 00:30:21.250
好吧，所以问题是

00:30:19.360 --> 00:30:23.799
如果有的话仍然可以快速解决

00:30:21.250 --> 00:30:25.779
我已经很确定了

00:30:23.799 --> 00:30:29.409
是的，所以它创建了一个新的

00:30:25.779 --> 00:30:31.240
构造函数仅需24 

00:30:29.409 --> 00:30:32.460
其他标准不是

00:30:31.240 --> 00:30:35.559
年

00:30:32.460 --> 00:30:37.379
所以它也放了限定词注解

00:30:35.559 --> 00:30:40.090
在那里，所以我们很高兴向右走

00:30:37.379 --> 00:30:43.870
其实我想看看什么时候发生

00:30:40.090 --> 00:30:47.500
我更改了个人资料，因此可以调用

00:30:43.870 --> 00:30:50.860
该行动还可以通过采取行动来实现

00:30:47.500 --> 00:30:53.320
是您的一站式快捷查找操作

00:30:50.860 --> 00:30:55.059
刚开始输入动作名称和它

00:30:53.320 --> 00:30:57.370
将向您展示我们的匹配操作，并

00:30:55.059 --> 00:31:01.149
其中之一是改变活跃的春天

00:30:57.370 --> 00:31:04.149
配置文件，我们得到与我调用的菜单相同的菜单

00:31:01.149 --> 00:31:06.129
从顶部导航栏开始

00:31:04.149 --> 00:31:07.960
切换到自定义配置文件

00:31:06.129 --> 00:31:13.090
现在看看这里发生了什么

00:31:07.960 --> 00:31:16.809
哎呀，所以长豆一个ID不是

00:31:13.090 --> 00:31:19.720
在自定义配置文件中可用，因此我们

00:31:16.809 --> 00:31:21.789
需要解决这个问题，然后再按一次

00:31:19.720 --> 00:31:23.710
控制空间以调用完成和

00:31:21.789 --> 00:31:26.620
现在它向我展示了

00:31:23.710 --> 00:31:32.110
我可以在其他个人资料中找到

00:31:26.620 --> 00:31:34.049
刚刚选择正确，仅此而已

00:31:32.110 --> 00:31:36.279
必须说一下自动接线和

00:31:34.049 --> 00:31:41.500
个人资料，但我认为这真的很不错

00:31:36.279 --> 00:31:42.669
功能避免设置错误并成为

00:31:41.500 --> 00:31:48.360
确保您的应用程序实际上

00:31:42.669 --> 00:31:48.360
启动就可以了

00:31:48.669 --> 00:31:53.799
很高兴我们只有25分钟

00:31:52.239 --> 00:31:55.029
离开是因为我们能够跳过

00:31:53.799 --> 00:31:57.940
优秀的部分是

00:31:55.029 --> 00:32:00.989
 XML爱好者，所以我们将跳过

00:31:57.940 --> 00:32:04.269
该部分在会议的一部分

00:32:00.989 --> 00:32:08.350
除非您不同意，否则我们应该跳过

00:32:04.269 --> 00:32:10.869
 XML支持或建议，所以我们将

00:32:08.350 --> 00:32:16.119
跳过，有人会不高兴，我知道

00:32:10.869 --> 00:32:17.919
但是好吧，下一个主题春季缓存什么

00:32:16.119 --> 00:32:21.609
是春天的激情，所以你已经看到了

00:32:17.919 --> 00:32:24.429
正确的主题演讲，以便您注释您的

00:32:21.609 --> 00:32:27.059
带有缓存注释的方法和

00:32:24.429 --> 00:32:30.340
我们将为其添加缓存方面

00:32:27.059 --> 00:32:32.679
每当您调用方法对不起

00:32:30.340 --> 00:32:34.539
我们将检查是否有一个条目

00:32:32.679 --> 00:32:38.169
缓存，因此您需要指定一个名称或

00:32:34.539 --> 00:32:39.909
多个名称，如果没有名称

00:32:38.169 --> 00:32:42.850
将照常调用您的方法， 

00:32:39.909 --> 00:32:44.739
如果有的话，更新缓存的经济性

00:32:42.850 --> 00:32:47.739
甚至不会调用您的方法，我们会

00:32:44.739 --> 00:32:51.879
直接返回信息

00:32:47.739 --> 00:32:55.659
所以允云现在显示的是一样的

00:32:51.879 --> 00:32:56.980
充满注射的东西，你可以看到

00:32:55.659 --> 00:32:58.389
缓存注释在

00:32:56.980 --> 00:33:01.119
界面，并且有关于

00:32:58.389 --> 00:33:02.470
出现警告的原因

00:33:01.119 --> 00:33:04.600
关于那是因为这是一个

00:33:02.470 --> 00:33:06.220
正确的实施细节，因此您可以

00:33:04.600 --> 00:33:09.970
决定使用一种实现

00:33:06.220 --> 00:33:12.429
缓存，另一个可能不是

00:33:09.970 --> 00:33:14.529
不同意这个事实，所以无论何时

00:33:12.429 --> 00:33:16.659
有那些警告，您可以轻松地

00:33:14.529 --> 00:33:18.879
如果您不同意，请在IDE中将其禁用

00:33:16.659 --> 00:33:20.559
和他们在一起，但我认为这也很好

00:33:18.879 --> 00:33:22.179
春季团队和JetBrains 

00:33:20.559 --> 00:33:25.299
他们共同努力的团队

00:33:22.179 --> 00:33:27.279
其中一些最佳实践

00:33:25.299 --> 00:33:30.039
您有机会充分了解这一点

00:33:27.279 --> 00:33:32.309
好的，所以我正在关注

00:33:30.039 --> 00:33:34.570
推荐其他人使用的方法

00:33:32.309 --> 00:33:37.980
接口级别的注解

00:33:34.570 --> 00:33:41.679
到实际实施

00:33:37.980 --> 00:33:44.259
在实施中启用它

00:33:41.679 --> 00:33:45.400
它想要一个空警告

00:33:44.259 --> 00:33:48.220
就像是

00:33:45.400 --> 00:33:50.560
克里希纳首先在水域中，所以那是

00:33:48.220 --> 00:33:52.540
关于那个东西的故事真的很好

00:33:50.560 --> 00:33:54.850
三二和风应使用

00:33:52.540 --> 00:33:57.490
以您的方式缓存基础架构

00:33:54.850 --> 00:34:00.460
指定缓存确实受到限制

00:33:57.490 --> 00:34:02.140
因此您必须在

00:34:00.460 --> 00:34:04.840
缓存那是唯一的注释

00:34:02.140 --> 00:34:08.530
这样的方式-每个缓存名称

00:34:04.840 --> 00:34:10.480
缓存的名称，因为它是

00:34:08.530 --> 00:34:12.340
指定属性的唯一方法是

00:34:10.480 --> 00:34:14.800
强制性权利，所以如果您忘记

00:34:12.340 --> 00:34:17.110
指定它注释没有默认值

00:34:14.800 --> 00:34:19.600
值，因此您会得到计算错误，并且

00:34:17.110 --> 00:34:21.429
当您的代码无法编译时

00:34:19.600 --> 00:34:25.390
你容易理解的东西是

00:34:21.429 --> 00:34:27.850
同时，社区人士说错了

00:34:25.390 --> 00:34:29.590
好吧，我们想要更多功能， 

00:34:27.850 --> 00:34:31.419
希望能够出口到

00:34:29.590 --> 00:34:33.669
外部化我们可以做到的

00:34:31.419 --> 00:34:35.890
在类中指定缓存名称

00:34:33.669 --> 00:34:37.630
级别，而是缓存配置

00:34:35.890 --> 00:34:40.419
你是那个被评论出来的

00:34:37.630 --> 00:34:42.880
顶部，所以不必重复名称

00:34:40.419 --> 00:34:45.010
您将放置的每种方法的缓存

00:34:42.880 --> 00:34:46.690
它在班级上将被应用

00:34:45.010 --> 00:34:49.620
自动为我们所有的缓存

00:34:46.690 --> 00:34:51.790
使用来减少复制粘贴和

00:34:49.620 --> 00:34:55.350
改善能力确实如此

00:34:51.790 --> 00:34:57.850
现在确实是一个更好的问题

00:34:55.350 --> 00:34:59.950
属性不再是强制性权利

00:34:57.850 --> 00:35:01.570
因为如果您在课堂上指定

00:34:59.950 --> 00:35:02.500
级别，您无需在

00:35:01.570 --> 00:35:05.140
元级别了

00:35:02.500 --> 00:35:07.330
因此，如果没有编译器警告

00:35:05.140 --> 00:35:09.130
你在晴天的情况下

00:35:07.330 --> 00:35:11.650
您刚刚放入缓存的一种方法

00:35:09.130 --> 00:35:13.390
您没有收到任何警告，然后尝试

00:35:11.650 --> 00:35:15.010
启动您的应用程序和spring框架

00:35:13.390 --> 00:35:18.100
抱怨，因为找不到

00:35:15.010 --> 00:35:22.090
缓存，这是一个非常非常好的例子

00:35:18.100 --> 00:35:24.760
在很多这样的工作中

00:35:22.090 --> 00:35:26.980
与IDE团队的帮助实际上是

00:35:24.760 --> 00:35:28.180
你明白那些东西明白

00:35:26.980 --> 00:35:30.310
历史，你不必

00:35:28.180 --> 00:35:32.410
了解历史就是你的重点

00:35:30.310 --> 00:35:33.970
得到警告告诉你嘿

00:35:32.410 --> 00:35:38.560
没有缓存名称，您确定是

00:35:33.970 --> 00:35:41.050
你想要什么，如果那是什么

00:35:38.560 --> 00:35:44.860
如果不寻常，你就结束了

00:35:41.050 --> 00:35:47.740
上警告课完全消失

00:35:44.860 --> 00:35:50.910
所以关于

00:35:47.740 --> 00:35:52.619
我刚刚启用的调度程序符号

00:35:50.910 --> 00:35:55.619
这里有一个条件属性， 

00:35:52.619 --> 00:35:59.549
它看起来很有趣，因为它具有

00:35:55.619 --> 00:36:03.150
屏幕背景在这里，以便实际上

00:35:59.549 --> 00:36:06.539
在我的配色方案中提示我

00:36:03.150 --> 00:36:11.309
设置该字符串实际上是一个

00:36:06.539 --> 00:36:13.470
弹性L或散布的表情，因此

00:36:11.309 --> 00:36:16.200
缓存框架实际上将评估

00:36:13.470 --> 00:36:20.069
此条件在运行时确定

00:36:16.200 --> 00:36:23.490
无论是休闲还是不正确，不仅

00:36:20.069 --> 00:36:26.250
我们会在特殊的地方看到这个吗

00:36:23.490 --> 00:36:29.369
方式，但我们也有全力支持

00:36:26.250 --> 00:36:31.710
拼写表达式，因为IDE知道

00:36:29.369 --> 00:36:34.529
该条件属性必须是

00:36:31.710 --> 00:36:37.589
咒语表达，所以我们注入咒语

00:36:34.529 --> 00:36:39.619
在这个地方我们有语言支持

00:36:37.589 --> 00:36:44.089
自动完成语法高亮显示和

00:36:39.619 --> 00:36:47.640
我什至可以控制点击

00:36:44.089 --> 00:36:49.380
相应的资源参数

00:36:47.640 --> 00:36:52.019
最新版本中的新内容

00:36:49.380 --> 00:36:55.890
我们现在真的依赖于上下文

00:36:52.019 --> 00:36:58.950
解析方法的参数

00:36:55.890 --> 00:37:00.779
级别和任何隐式变量

00:36:58.950 --> 00:37:03.809
在该特定版本中可用

00:37:00.779 --> 00:37:10.200
上下文，例如缓存

00:37:03.809 --> 00:37:12.089
框架还添加了一些特殊的

00:37:10.200 --> 00:37:16.500
这里的变量像草图

00:37:12.089 --> 00:37:21.269
集合，还有很多相同的东西

00:37:16.500 --> 00:37:24.960
对于弹簧安全性也是如此，所以让

00:37:21.269 --> 00:37:27.720
我只是很快地表现出来

00:37:24.960 --> 00:37:30.509
在这里有spring安全注释

00:37:27.720 --> 00:37:33.930
预授权，然后再次绿色

00:37:30.509 --> 00:37:36.089
后台，我得到自动完成

00:37:33.930 --> 00:37:39.539
所有的弹簧安全方法

00:37:36.089 --> 00:37:42.210
可用，因为IDE知道

00:37:39.539 --> 00:37:44.880
它们会在您自动绑定

00:37:42.210 --> 00:37:48.150
使用spring安全性和这种表示法

00:37:44.880 --> 00:37:49.310
当然，我们可以再次控制点击

00:37:48.150 --> 00:37:52.880
这里

00:37:49.310 --> 00:38:00.130
我们可以显示该方法的文档

00:37:52.880 --> 00:38:00.130
对不起，错误的快捷方式

00:38:00.800 --> 00:38:06.920
是的，那是一个非常好的方法

00:38:04.010 --> 00:38:09.940
使用咒语和另一件事

00:38:06.920 --> 00:38:12.500
为法术添加的是我们没有专用的

00:38:09.940 --> 00:38:14.780
该语言的搜寻器设置，因此

00:38:12.500 --> 00:38:17.060
当您使用颜色和字体时

00:38:14.780 --> 00:38:20.570
方案，您实际上会看到春天

00:38:17.060 --> 00:38:23.780
在这里大喊条目，您可以自定义

00:38:20.570 --> 00:38:27.290
咒语的所有这些属性

00:38:23.780 --> 00:38:29.720
您喜欢的语言，所以特别

00:38:27.290 --> 00:38:31.340
支持真的是非常非常

00:38:29.720 --> 00:38:33.590
与一个功能不同

00:38:31.340 --> 00:38:35.330
例如对于缓存，您可以

00:38:33.590 --> 00:38:38.030
注入缓存名称方法名称

00:38:35.330 --> 00:38:39.860
您可以注入的目标实例

00:38:38.030 --> 00:38:41.210
参数以某种方式看

00:38:39.860 --> 00:38:42.950
在春季安全，他们有非常

00:38:41.210 --> 00:38:44.870
表达性咒语表达支持为

00:38:42.950 --> 00:38:46.850
好，上下文不同，但是

00:38:44.870 --> 00:38:48.770
因为ID知道他们，您会

00:38:46.850 --> 00:38:51.680
获得专用的订单完成

00:38:48.770 --> 00:38:53.390
您尝试使用的东西

00:38:51.680 --> 00:38:55.940
那是另一个有趣的故事

00:38:53.390 --> 00:38:58.700
故事，如果您返回缓存

00:38:55.940 --> 00:39:01.760
示例，您将显示Javadoc 

00:38:58.700 --> 00:39:04.040
条件属性，您将看到

00:39:01.760 --> 00:39:05.690
那里有很多内容，好的

00:39:04.040 --> 00:39:07.850
可以做到这一点，你可以做到的，你可以做到的

00:39:05.690 --> 00:39:09.860
这实际上是人们在抱怨我

00:39:07.850 --> 00:39:12.200
试图使用这种条件的东西，我

00:39:09.860 --> 00:39:13.970
不知道我能用它做什么

00:39:12.200 --> 00:39:16.280
请确保我有一个

00:39:13.970 --> 00:39:19.190
立即访问该信息

00:39:16.280 --> 00:39:20.810
事实证明IntelliJ IDEA有

00:39:19.190 --> 00:39:23.660
改进了对此的支持，所以改为

00:39:20.810 --> 00:39:25.790
阅读您所做的所有事情

00:39:23.660 --> 00:39:28.250
通常的roto完成命令，您

00:39:25.790 --> 00:39:30.050
看看你能用什么，所以根

00:39:28.250 --> 00:39:32.720
我们刚刚在Java文档中看到的对象是

00:39:30.050 --> 00:39:36.380
再次在这里可用，它知道类型

00:39:32.720 --> 00:39:39.440
所以我们可以在那里导航，是的，我

00:39:36.380 --> 00:39:42.830
觉得有这种感觉很好

00:39:39.440 --> 00:39:46.430
非常上下文相关

00:39:42.830 --> 00:39:50.210
对Springheel的支持，表明了一些

00:39:46.430 --> 00:39:52.610
关于春季MVC的统计信息现在可以了，所以春季

00:39:50.210 --> 00:39:55.130
传统上，MVC配置有

00:39:52.610 --> 00:39:59.270
他们还将XML切换到注释

00:39:55.130 --> 00:40:02.350
设置好后，我将快速进入

00:39:59.270 --> 00:40:05.720
对应的设置类是

00:40:02.350 --> 00:40:08.360
纯粹基于注释，我们支持

00:40:05.720 --> 00:40:08.750
现在终于，所以我们实际上扫描了

00:40:08.360 --> 00:40:10.790
码

00:40:08.750 --> 00:40:14.480
颂歌了解您的设置是什么

00:40:10.790 --> 00:40:17.810
关于，我们也可以在这里看到所有这些

00:40:14.480 --> 00:40:20.750
Spring Framework的方面，所以我们

00:40:17.810 --> 00:40:23.390
这里有一个自动检测到的弹簧MVC 

00:40:20.750 --> 00:40:26.180
上下文，所以我们只是扫描了整个

00:40:23.390 --> 00:40:28.730
项目中我们发现spring MVC config 

00:40:26.180 --> 00:40:32.120
基类，我们检查您拥有的代码

00:40:28.730 --> 00:40:37.460
写在那里，我们建立了所有这一切

00:40:32.120 --> 00:40:39.920
自动为您和美好的事物

00:40:37.460 --> 00:40:41.840
它是否也检测到所有的豆子

00:40:39.920 --> 00:40:44.600
与喜欢春季MVC的观众有关

00:40:41.840 --> 00:40:49.940
我们所有人和类似的东西，当你

00:40:44.600 --> 00:40:52.310
将您在此处的任何原因用于

00:40:49.940 --> 00:40:54.740
配置视频资源的示例

00:40:52.310 --> 00:40:56.120
您只需要JSP或免费市场支持

00:40:54.740 --> 00:40:57.860
当然，您不希望选择B，但是

00:40:56.120 --> 00:41:00.320
免费商标或其他适当的商标

00:40:57.860 --> 00:41:05.150
技术，它实际上会建立

00:41:00.320 --> 00:41:07.550
所有的东西都只为你，所以我们必须

00:41:05.150 --> 00:41:10.520
在此处查看技术进行演示

00:41:07.550 --> 00:41:15.620
目的，让我们快速进入

00:41:10.520 --> 00:41:18.050
顺便说一下我们的控制器

00:41:15.620 --> 00:41:20.750
工具窗口还具有专用的选项卡

00:41:18.050 --> 00:41:23.420
春天的MVC，所以当我们去这里时，我们可以看到

00:41:20.750 --> 00:41:26.240
控制器和请求映射

00:41:23.420 --> 00:41:28.910
这里再次出现吸气剂图标

00:41:26.240 --> 00:41:30.920
在左边意味着春天知道

00:41:28.910 --> 00:41:34.730
抱歉，IntelliJ IDE知道这一点

00:41:30.920 --> 00:41:36.410
东西，可以给你帮助，所以

00:41:34.730 --> 00:41:39.170
上限执行实际上是

00:41:36.410 --> 00:41:42.980
老派，因为我们使用的是JSP 

00:41:39.170 --> 00:41:45.650
在这里，您将获得完全自动完成

00:41:42.980 --> 00:41:50.090
这里可以引用该文件

00:41:45.650 --> 00:41:51.620
控制单击此处转到JSP页面转到

00:41:50.090 --> 00:41:54.170
回到控制器，我们添加了一个

00:41:51.620 --> 00:41:56.540
将此处归因于我们的模型

00:41:54.170 --> 00:42:00.500
转到时，JSP的名称和属性

00:41:56.540 --> 00:42:02.830
我们实际上可以控制的JSP页面

00:42:00.500 --> 00:42:05.870
单击并返回到控制器，以便

00:42:02.830 --> 00:42:08.270
 IntelliJ了解所有这些权利

00:42:05.870 --> 00:42:10.580
这样当您键入开始时

00:42:08.270 --> 00:42:12.150
建立您的模型，您将拥有完整的

00:42:10.580 --> 00:42:14.190
自动完成

00:42:12.150 --> 00:42:17.609
在您看来也是一样

00:42:14.190 --> 00:42:19.770
现在以自由市场的速度运作

00:42:17.609 --> 00:42:22.500
好吧，当我们去自由市场时

00:42:19.770 --> 00:42:26.220
查看我们也可以使用此吉他图标

00:42:22.500 --> 00:42:29.550
还是我最喜欢的快捷方式实际上是

00:42:26.220 --> 00:42:32.130
导航相关符号就是你的

00:42:29.550 --> 00:42:34.559
二月二号好吧好吧好吧

00:42:32.130 --> 00:42:38.040
您已经可以了，我正在重新运行

00:42:34.559 --> 00:42:40.109
每隔几分钟，但我们最新

00:42:38.040 --> 00:42:42.270
象征它期望什么

00:42:40.109 --> 00:42:44.700
当前上下文可能是一个文件吗

00:42:42.270 --> 00:42:48.359
可能是某些类的某些方法

00:42:44.700 --> 00:42:50.819
声明，它试图找出

00:42:48.359 --> 00:42:53.579
这又是什么

00:42:50.819 --> 00:42:55.890
文件与此相关，所以当我们

00:42:53.579 --> 00:42:58.530
在我们的请求映射方法中

00:42:55.890 --> 00:43:01.800
知道我们在那里，它将显示

00:42:58.530 --> 00:43:03.960
我列出了与之匹配的东西之一

00:43:01.800 --> 00:43:06.000
是实际用于的视图

00:43:03.960 --> 00:43:07.710
此请求映射和另一个

00:43:06.000 --> 00:43:10.800
实际上是弹簧配置

00:43:07.710 --> 00:43:13.349
包括这个控制器类

00:43:10.800 --> 00:43:17.960
这是再次查看谁的好方法

00:43:13.349 --> 00:43:17.960
正在使用此当前元素，并且

00:43:18.770 --> 00:43:24.119
在这里，我们有自由的市场观点，我们

00:43:21.780 --> 00:43:26.849
当然有免费的相同支持

00:43:24.119 --> 00:43:28.020
市场速度时间叶就在那里

00:43:26.849 --> 00:43:29.579
开箱即用

00:43:28.020 --> 00:43:33.900
你真的没有那个吗

00:43:29.579 --> 00:43:36.030
显示那个东西一个按钮

00:43:33.900 --> 00:43:38.579
实际显示该值是如何设置的

00:43:36.030 --> 00:43:42.329
是的，再次是我的最爱

00:43:38.579 --> 00:43:44.780
快捷方式快速定义，以便我可以

00:43:42.329 --> 00:43:48.660
实际看到的代码

00:43:44.780 --> 00:43:51.390
我模型中的对象，所以您基本上可以

00:43:48.660 --> 00:43:54.119
正确的ID，您将获得

00:43:51.390 --> 00:43:57.150
您的模型和控制器，您可以

00:43:54.119 --> 00:43:57.930
实际上以一种或另一种方式看

00:43:57.150 --> 00:44:00.119
有用

00:43:57.930 --> 00:44:01.950
这很直观，因为

00:44:00.119 --> 00:44:04.740
视图名称与特定名称匹配

00:44:01.950 --> 00:44:06.390
您不必在

00:44:04.740 --> 00:44:08.380
归档自己，只需单击名称

00:44:06.390 --> 00:44:10.950
的观点，你和

00:44:08.380 --> 00:44:13.479
好吧，说你知道，所以最后

00:44:10.950 --> 00:44:16.720
我想在今年春天展示的小东西

00:44:13.479 --> 00:44:19.839
 MVC支持也包含在其中

00:44:16.720 --> 00:44:22.960
转到符号，使您可以转到

00:44:19.839 --> 00:44:25.989
任何事情和项目

00:44:22.960 --> 00:44:27.069
实际上当我可能有很多事情

00:44:25.989 --> 00:44:29.769
输入正斜杠

00:44:27.069 --> 00:44:32.410
它还将包括我的请求方法

00:44:29.769 --> 00:44:34.989
在这里，您可以快速转到任何URI 

00:44:32.410 --> 00:44:37.630
在您的春季MVC中定义

00:44:34.989 --> 00:44:39.940
项目，如果您不记得名字- 

00:44:37.630 --> 00:44:42.160
控制器类映射例如

00:44:39.940 --> 00:44:45.609
这是找到

00:44:42.160 --> 00:44:50.410
相应的控制器再次创建

00:44:45.609 --> 00:44:54.489
定义权有一个问题

00:44:50.410 --> 00:44:56.819
是的，你能大声说吗

00:44:54.489 --> 00:44:56.819
请

00:44:59.220 --> 00:45:10.040
所以问题是您可以重命名

00:45:01.200 --> 00:45:12.510
变量，我会把它捡起来是不是我

00:45:10.040 --> 00:45:14.250
记住不，它被自由市场打破了

00:45:12.510 --> 00:45:17.130
在JSP中有效，我必须免费修复

00:45:14.250 --> 00:45:21.680
市场权利，所以理论上是可行的

00:45:17.130 --> 00:45:21.680
它将适用于下一个版本

00:45:22.010 --> 00:45:30.030
好吧，关于Spring MVC，我们只是

00:45:25.770 --> 00:45:32.630
触摸高级东西还有更多

00:45:30.030 --> 00:45:36.840
让我们去我们最喜欢的春季项目

00:45:32.630 --> 00:45:40.620
当然是 spring boot ，所以我猜大部分

00:45:36.840 --> 00:45:44.130
您知道 spring boot 有一个

00:45:40.620 --> 00:45:46.590
春天的专用项目向导

00:45:44.130 --> 00:45:48.510
初始化器，基本上模仿什么

00:45:46.590 --> 00:45:51.210
您可以在这些开始中带来我们自己的

00:45:48.510 --> 00:45:53.100
网站，它实际上是在使用状态

00:45:51.210 --> 00:45:54.690
顺便说一下窗口拨号

00:45:53.100 --> 00:45:57.140
推动一些变化以开始春天

00:45:54.690 --> 00:46:00.270
延迟或新的依赖项新设置

00:45:57.140 --> 00:46:02.640
该ID实际上与服务器联系以

00:46:00.270 --> 00:46:04.050
下载元数据就可以了

00:46:02.640 --> 00:46:07.200
用那个东西自动更新

00:46:04.050 --> 00:46:09.540
对，所以我们正在经历

00:46:07.200 --> 00:46:12.090
很快我就选择了默认值

00:46:09.540 --> 00:46:15.270
在这里我们可以选择 spring boot 

00:46:12.090 --> 00:46:17.660
版本我们有很多春季

00:46:15.270 --> 00:46:19.620
在这里可用的起动器

00:46:17.660 --> 00:46:21.480
因为他们很难找到我们

00:46:19.620 --> 00:46:23.670
实施了一些搜索和过滤，因此

00:46:21.480 --> 00:46:26.490
它不仅会搜索名称，还会搜索

00:46:23.670 --> 00:46:30.180
也在说明中，我喜欢他们

00:46:26.490 --> 00:46:33.390
为您，我们将选择

00:46:30.180 --> 00:46:36.240
网络依赖，但有一件事是

00:46:33.390 --> 00:46:39.120
当我回到旧版本时很有趣

00:46:36.240 --> 00:46:43.050
跳板中的一些被禁用

00:46:39.120 --> 00:46:46.980
原因是有些星星

00:46:43.050 --> 00:46:50.100
仅在一系列 spring boot 中可用

00:46:46.980 --> 00:46:51.780
版本以及您是否在此处使用工具提示

00:46:50.100 --> 00:46:56.520
您实际上可以看到

00:46:51.780 --> 00:46:58.830
要求还可以，所以我们使用

00:46:56.520 --> 00:47:00.300
更现代的版本，所以这真的

00:46:58.830 --> 00:47:02.310
您正在开始使用

00:47:00.300 --> 00:47:03.900
 Springwood的IntelliJ IDEA对吗

00:47:02.310 --> 00:47:06.360
创建新项目，您需要

00:47:03.900 --> 00:47:09.330
向导，然后您得到一个

00:47:06.360 --> 00:47:11.700
准备使用请记住我们所教的内容

00:47:09.330 --> 00:47:13.110
关于弹簧面（如果使用弹簧） 

00:47:11.700 --> 00:47:15.690
开机不用担心

00:47:13.110 --> 00:47:18.540
它会自动为您检测

00:47:15.690 --> 00:47:20.430
所以我要做的就是联系开始

00:47:18.540 --> 00:47:22.350
春天我们的网站创建一个项目

00:47:20.430 --> 00:47:24.270
您在服务器上返回的zip解压缩它

00:47:22.350 --> 00:47:26.780
为您设置IntelliJ项目并

00:47:24.270 --> 00:47:28.920
创建一个弹簧面Springwood 

00:47:26.780 --> 00:47:31.020
联系人自动配置

00:47:28.920 --> 00:47:32.760
已经触发，我们准备出发了

00:47:31.020 --> 00:47:33.810
还有一个运行配置

00:47:32.760 --> 00:47:35.490
在以下位置创建的应用

00:47:33.810 --> 00:47:38.280
立即，所以您真正能做的就是

00:47:35.490 --> 00:47:41.100
按运行，是的开始，所以我可以

00:47:38.280 --> 00:47:43.800
只需点击运行它将构建的应用程序

00:47:41.100 --> 00:47:48.980
和我的spring boot应用程序

00:47:43.800 --> 00:47:55.290
现在什么也不做，所以会开始

00:47:48.980 --> 00:47:57.480
当你了解春天的木材就很好了

00:47:55.290 --> 00:48:00.360
什么是自动配置的作家

00:47:57.480 --> 00:48:02.100
这是它背后的魔力的关键

00:48:00.360 --> 00:48:05.010
我不喜欢那个神奇的词

00:48:02.100 --> 00:48:06.450
你有主意，所以你可能

00:48:05.010 --> 00:48:09.030
现在知道 spring boot 是这样的

00:48:06.450 --> 00:48:11.790
自动配置的概念，因此无论何时

00:48:09.030 --> 00:48:14.160
你在课堂上放的东西

00:48:11.790 --> 00:48:15.780
就像我们看到的那样

00:48:14.160 --> 00:48:18.080
添加了将要使用的网络启动器

00:48:15.780 --> 00:48:20.580
将Spring MVC tomcat嵌入并

00:48:18.080 --> 00:48:22.260
杰克逊，基本上基本上

00:48:20.580 --> 00:48:24.780
建立网站所需的东西

00:48:22.260 --> 00:48:27.150
应用程序Spring Boot将检测到

00:48:24.780 --> 00:48:29.400
而且因为您没有配置

00:48:27.150 --> 00:48:31.890
默认情况下会做某事

00:48:29.400 --> 00:48:33.330
一堆其他配置和它

00:48:31.890 --> 00:48:35.520
如果您有办法可以

00:48:33.330 --> 00:48:37.380
实际上知道发生了什么，所以

00:48:35.520 --> 00:48:40.440
 JetBrains团队实际上正在研究

00:48:37.380 --> 00:48:42.750
那我们可以看到一些东西

00:48:40.440 --> 00:48:44.580
他们已经这样做了，这是我们的

00:48:42.750 --> 00:48:46.230
显示的春季定罪模型图

00:48:44.580 --> 00:48:48.510
没有什么特别的权利，我们只有我们的

00:48:46.230 --> 00:48:50.160
演示应用程序主类已注释

00:48:48.510 --> 00:48:53.340
与跳板应用程序类

00:48:50.160 --> 00:48:54.870
所以他们所有的汽车定罪者在哪里

00:48:53.340 --> 00:48:58.740
由 spring boot 本身提供

00:48:54.870 --> 00:49:02.580
所以这里有一个开关可以启用

00:48:58.740 --> 00:49:04.860
库节点以及修复显示时

00:49:02.580 --> 00:49:06.450
您可以看到所有自动配置

00:49:04.860 --> 00:49:08.210
实际上是

00:49:06.450 --> 00:49:12.599
通过使用自动触发

00:49:08.210 --> 00:49:14.970
跳板，你可以检查一下

00:49:12.599 --> 00:49:17.280
我真正想要的就是一个

00:49:14.970 --> 00:49:19.530
查看自动配置的好方法

00:49:17.280 --> 00:49:21.660
如果一切都设置好了

00:49:19.530 --> 00:49:23.369
正确地，我们可以再次导航到

00:49:21.660 --> 00:49:25.470
这些节点中的任何一个，并看到任何一种

00:49:23.369 --> 00:49:27.599
问题在这里，以为是在想

00:49:25.470 --> 00:49:30.060
这样你就看到了关系

00:49:27.599 --> 00:49:31.710
具有自动接线功能，因此我们定义了一个

00:49:30.060 --> 00:49:34.260
类型长，这是一个不好的例子

00:49:31.710 --> 00:49:36.720
但是好吧，然后我们有了这个装订线

00:49:34.260 --> 00:49:38.369
图标说可以，是的， 

00:49:36.720 --> 00:49:41.010
自动连线，如果您单击它

00:49:38.369 --> 00:49:42.540
可以直接跳到定义

00:49:41.010 --> 00:49:45.420
自动配置，假设您

00:49:42.540 --> 00:49:47.280
依靠您正在使用的JDBC模板

00:49:45.420 --> 00:49:49.530
出于什么原因或JMS模板什么都没有

00:49:47.280 --> 00:49:51.300
然后将其注入您的组件中

00:49:49.530 --> 00:49:54.510
但这是通过Spring Boot自动配置的

00:49:51.300 --> 00:49:56.849
所以它还不存在，因为它非常

00:49:54.510 --> 00:50:00.270
很难做到，但你可以想到

00:49:56.849 --> 00:50:01.680
也许我们希望将来发布

00:50:00.270 --> 00:50:04.109
有那种特色照片

00:50:01.680 --> 00:50:06.119
配置，所以您知道

00:50:04.109 --> 00:50:08.150
实例，如果您收到警告， 

00:50:06.119 --> 00:50:10.619
已经适用于很多事情

00:50:08.150 --> 00:50:11.670
基本上IntelliJ IDEA不知道

00:50:10.619 --> 00:50:13.770
关于那个东西

00:50:11.670 --> 00:50:16.109
也许是因为你的东西

00:50:13.770 --> 00:50:18.630
在您的课程通行证上进行配置

00:50:16.109 --> 00:50:19.980
不对，也许你忘了加我

00:50:18.630 --> 00:50:21.869
不知道正确的启动器或

00:50:19.980 --> 00:50:23.460
像这样的事情

00:50:21.869 --> 00:50:26.040
起动器有很多

00:50:23.460 --> 00:50:29.490
带有特定名称的注释

00:50:26.040 --> 00:50:32.670
模式都以enable和

00:50:29.490 --> 00:50:35.369
那是我可能真正想要的

00:50:32.670 --> 00:50:37.680
一些WebSocket支持，所以我认为

00:50:35.369 --> 00:50:40.800
有一个启用注释

00:50:37.680 --> 00:50:43.440
 Web套接字不在我们的类总线上

00:50:40.800 --> 00:50:45.900
现在，我们得到一个错误，但天线

00:50:43.440 --> 00:50:48.210
实际上足够聪明以找出

00:50:45.900 --> 00:50:51.030
通常的相应启动器

00:50:48.210 --> 00:50:53.670
使用了注释或类，所以我可以

00:50:51.030 --> 00:50:58.230
他又高大了，进入我的确定

00:50:53.670 --> 00:51:01.710
第一个高优先级快捷方式，它将

00:50:58.230 --> 00:51:05.369
实际选择WebSocket启动器

00:51:01.710 --> 00:51:07.109
我，当我们去pom mixin L时， 

00:51:05.369 --> 00:51:10.050
会看到它刚刚被添加

00:51:07.109 --> 00:51:12.270
对我们来说自动是一样的

00:51:10.050 --> 00:51:14.240
正确的事，社区反馈

00:51:12.270 --> 00:51:16.280
反馈回路

00:51:14.240 --> 00:51:18.170
如果您有注释

00:51:16.280 --> 00:51:21.200
认为您添加牙齿可能会有用

00:51:18.170 --> 00:51:23.799
伙计们，我要添加注释foo，应该

00:51:21.200 --> 00:51:27.200
添加启动栏，这是班

00:51:23.799 --> 00:51:28.640
他们很容易添加

00:51:27.200 --> 00:51:31.309
不要犹豫与

00:51:28.640 --> 00:51:33.670
他们正确，所以所有这些自动

00:51:31.309 --> 00:51:36.559
配置你怎么能实际

00:51:33.670 --> 00:51:37.339
正确配置它只是空白

00:51:36.559 --> 00:51:39.589
是的

00:51:37.339 --> 00:51:43.069
所以您可能已经在

00:51:39.589 --> 00:51:44.599
在某些时候的主题演讲

00:51:43.069 --> 00:51:44.960
再次在主题演讲中，我不记得了哦

00:51:44.599 --> 00:51:47.780
是的

00:51:44.960 --> 00:51:50.270
天气的位置，所以有

00:51:47.780 --> 00:51:52.160
将天气位置硬编码吗

00:51:50.270 --> 00:51:53.839
将其移动到给定的类和所有

00:51:52.160 --> 00:51:56.510
突然出现一些自动完成的魔法

00:51:53.839 --> 00:51:59.539
出现了，所以我们现在要做的是

00:51:56.510 --> 00:52:01.789
向您展示我们建立的智慧

00:51:59.539 --> 00:52:04.160
基础设施，所以我们在这里看到的

00:52:01.789 --> 00:52:07.839
在应用程序属性文件中工作

00:52:04.160 --> 00:52:10.369
以类似的方式，Yama文件都是

00:52:07.839 --> 00:52:12.170
公开的配置密钥

00:52:10.369 --> 00:52:16.420
这些启动器，我们在这里可用

00:52:12.170 --> 00:52:19.039
是的，也许我们想添加一些自己的

00:52:16.420 --> 00:52:21.880
配置，使其工作方式

00:52:19.039 --> 00:52:24.920
与Springwood一起创建POJO吗

00:52:21.880 --> 00:52:27.770
定义您的配置

00:52:24.920 --> 00:52:29.990
结构，然后使用配置

00:52:27.770 --> 00:52:32.660
属性和表示法以提供前缀

00:52:29.990 --> 00:52:35.089
为您的钥匙，所以你基本上有一个

00:52:32.660 --> 00:52:37.190
 POJO将从以下位置购买

00:52:35.089 --> 00:52:40.670
环境，在这种情况下，我是

00:52:37.190 --> 00:52:43.190
要说我想绑定那个对象

00:52:40.670 --> 00:52:45.619
弹簧一个前缀，所以每个键

00:52:43.190 --> 00:52:48.079
从春天开始一春天一点

00:52:45.619 --> 00:52:51.170
某些东西将绑定到该对象

00:52:48.079 --> 00:52:55.069
所以在这种情况下，我有一个弹簧

00:52:51.170 --> 00:52:57.079
点我的财产，如果您在

00:52:55.069 --> 00:53:00.079
配置它将调用设置器

00:52:57.079 --> 00:53:02.059
就在那里，但我们可以看到我们有一个红色

00:53:00.079 --> 00:53:04.520
东西告诉我们可能是

00:53:02.059 --> 00:53:06.559
错误的一些注释处理器是

00:53:04.520 --> 00:53:08.170
缺少，所以也许我们可以单击

00:53:06.559 --> 00:53:10.730
链接，看看会发生什么

00:53:08.170 --> 00:53:12.349
你可以读鸭会解释

00:53:10.730 --> 00:53:14.540
您会更详细地了解我要做什么

00:53:12.349 --> 00:53:17.570
基本上是这样说的

00:53:14.540 --> 00:53:19.250
内容协助以实现想法

00:53:17.570 --> 00:53:21.830
需要了解您的钥匙和

00:53:19.250 --> 00:53:24.650
它知道您的钥匙的方式是通过

00:53:21.830 --> 00:53:27.380
元数据文件，因此它是

00:53:24.650 --> 00:53:29.540
建立在运行时生成的外观

00:53:27.380 --> 00:53:32.750
在您的代码上，所以yan正在添加

00:53:29.540 --> 00:53:34.550
现在该项目所必需的

00:53:32.750 --> 00:53:36.020
确实是您不使用的单个依赖项

00:53:34.550 --> 00:53:37.550
在运行时仅用于

00:53:36.020 --> 00:53:40.030
计算时间，这就是为什么

00:53:37.550 --> 00:53:43.940
可选标志，如果您进行编译

00:53:40.030 --> 00:53:46.730
然后回到配置

00:53:43.940 --> 00:53:51.290
应该看到的东西

00:53:46.730 --> 00:53:53.140
尚不可用，哦，我们忘了

00:53:51.290 --> 00:53:55.370
对不起，我们忘记了一件事- 

00:53:53.140 --> 00:53:58.070
忘了说我们要启用

00:53:55.370 --> 00:54:01.490
那个地方没有耳聋，所以我们

00:53:58.070 --> 00:54:03.590
实际上需要回到我们的

00:54:01.490 --> 00:54:05.870
配置类和一件事，我们

00:54:03.590 --> 00:54:08.900
需要告诉 spring boot 是，我们

00:54:05.870 --> 00:54:13.400
确实想为此提供支持

00:54:08.900 --> 00:54:15.710
通过列出相应的

00:54:13.400 --> 00:54:20.870
我们想要的配置类

00:54:15.710 --> 00:54:23.150
在这里我很抱歉这个人错误的文件，所以

00:54:20.870 --> 00:54:24.950
我们将不做申请

00:54:23.150 --> 00:54:29.090
正确的是您正在自己做

00:54:24.950 --> 00:54:31.130
不好，所以现在它也显示了

00:54:29.090 --> 00:54:32.960
弹簧梁，因为再次是IDE 

00:54:31.130 --> 00:54:35.570
了解到现在， 

00:54:32.960 --> 00:54:39.620
隐性地，我们要

00:54:35.570 --> 00:54:42.400
重建一切，我现在想

00:54:39.620 --> 00:54:42.400
应该工作正常

00:54:46.970 --> 00:54:53.540
就是这样，现在我们可以配置我们的

00:54:51.140 --> 00:54:57.230
我们可以控制的属性，请点击此处

00:54:53.540 --> 00:54:58.880
到光束，你也有这个排水沟

00:54:57.230 --> 00:55:01.250
缺点，这是我最喜欢的一个

00:54:58.880 --> 00:55:04.880
所以我可以非法将X装到天沟

00:55:01.250 --> 00:55:07.430
二传手是的，它允许逆

00:55:04.880 --> 00:55:09.230
搜索，以便我实际上可以看到

00:55:07.430 --> 00:55:12.290
我的配置文件中的那个属性

00:55:09.230 --> 00:55:15.650
对，所以您可以立即发现

00:55:12.290 --> 00:55:17.870
属性实际上是在您的

00:55:15.650 --> 00:55:21.920
配置和哪些暴露，但

00:55:17.870 --> 00:55:23.930
尚未覆盖或配置为

00:55:21.920 --> 00:55:26.210
这也是一个很好的方法

00:55:23.930 --> 00:55:27.530
将其添加到Thein用法中，如果您

00:55:26.210 --> 00:55:29.630
重命名该属性

00:55:27.530 --> 00:55:33.070
自动在配置中重命名，以便

00:55:29.630 --> 00:55:35.540
您可以使用重构选项

00:55:33.070 --> 00:55:40.540
所以现在我们有一个字符串属性

00:55:35.540 --> 00:55:43.400
这有点激进的愚蠢，因为

00:55:40.540 --> 00:55:47.960
跳板和IntelliJ无法分辨

00:55:43.400 --> 00:55:49.610
关于可能的值是什么

00:55:47.960 --> 00:55:53.780
允许使用此属性或其他任何东西

00:55:49.610 --> 00:56:00.050
否则，我们在这里要做的是

00:55:53.780 --> 00:56:02.570
加火，所以这真的是一个高级

00:56:00.050 --> 00:56:05.480
这真的是一个高级设置，所以

00:56:02.570 --> 00:56:09.260
我们想告诉你的是，如果你想

00:56:05.480 --> 00:56:11.480
为...提供更好的帮助

00:56:09.260 --> 00:56:13.460
您的用户，您拥有一把钥匙

00:56:11.480 --> 00:56:16.120
一定的价值，你想直接

00:56:13.460 --> 00:56:18.800
他们以什么样的价值观可以使用

00:56:16.120 --> 00:56:20.750
你可能会这样做

00:56:18.800 --> 00:56:23.180
这种特殊情况是使用引擎

00:56:20.750 --> 00:56:25.340
并使用新的类型和ID 

00:56:23.180 --> 00:56:26.840
自动提取值并

00:56:25.340 --> 00:56:29.030
提供完整的值

00:56:26.840 --> 00:56:31.370
但由于某些原因，您不能

00:56:29.030 --> 00:56:33.200
而且它需要是一个字符串

00:56:31.370 --> 00:56:34.300
不管什么原因，你仍然想

00:56:33.200 --> 00:56:37.070
完成

00:56:34.300 --> 00:56:39.920
 Springwood定义了其他

00:56:37.070 --> 00:56:41.600
您可以编写以提供的元数据

00:56:39.920 --> 00:56:44.090
提供额外的基本

00:56:41.600 --> 00:56:46.610
该属性的其他提示，以及

00:56:44.090 --> 00:56:49.040
您还会看到自动

00:56:46.610 --> 00:56:50.660
在JSON文件中完成，因此，如果您

00:56:49.040 --> 00:56:51.990
不知道你要写什么

00:56:50.660 --> 00:56:56.880
只是问这个主意

00:56:51.990 --> 00:57:01.920
我剥皮了，所以我们实际上会提供

00:56:56.880 --> 00:57:10.580
我只是几个有效值

00:57:01.920 --> 00:57:10.580
给他们起非常愚蠢的名字

00:57:10.849 --> 00:57:22.500
那是虚无的个体对象

00:57:14.099 --> 00:57:25.970
作家，所以我需要在这里添加它

00:57:22.500 --> 00:57:25.970
缺少逗号

00:57:30.410 --> 00:57:34.789
当我们重新运行注释时

00:57:32.809 --> 00:57:39.700
处理器，它将接收那些提示

00:57:34.789 --> 00:57:42.049
为了我们，把它们暴露在这里哦

00:57:39.700 --> 00:57:47.480
我认为我的设计有错误

00:57:42.049 --> 00:57:51.740
没有看到我也没有等待

00:57:47.480 --> 00:57:54.799
很好，我们知道了，再试一次

00:57:51.740 --> 00:57:58.069
知道有时候有点挑剔

00:57:54.799 --> 00:58:03.010
接受更改，以便全面重建

00:57:58.069 --> 00:58:06.920
有时在这里有帮助，现在我们有了

00:58:03.010 --> 00:58:08.960
所以现在注释处理器过程

00:58:06.920 --> 00:58:10.910
所有这些额外的元数据

00:58:08.960 --> 00:58:13.010
提供给我们的财产，我们可以

00:58:10.910 --> 00:58:15.619
这个例子定义了一个有效值列表

00:58:13.010 --> 00:58:19.670
可以定义应该是的类名

00:58:15.619 --> 00:58:23.059
指定本地名称的东西矢量

00:58:19.670 --> 00:58:24.799
数量可观

00:58:23.059 --> 00:58:28.069
这里有一个非常丰富的模型，所以

00:58:24.799 --> 00:58:29.930
这会在您使用弹簧时看到

00:58:28.069 --> 00:58:32.720
引导，因此当您使用spring boot与

00:58:29.930 --> 00:58:35.029
 IntelliJ IDE，您会看到丰富的订单

00:58:32.720 --> 00:58:37.369
记住价值的完成是

00:58:35.029 --> 00:58:41.240
轻松将其添加到您自己的密钥中

00:58:37.369 --> 00:58:44.480
是的，但是如果我要更改该怎么办

00:58:41.240 --> 00:58:47.599
仅当我运行应用程序时的值

00:58:44.480 --> 00:58:50.930
在某种状态下，我们可以做到这一点

00:58:47.599 --> 00:58:53.059
实际上在运行配置中

00:58:50.930 --> 00:58:55.640
有专门的运行配置

00:58:53.059 --> 00:58:58.760
此处用于 spring boot 应用

00:58:55.640 --> 00:59:02.750
我们已经在这里看到此部分

00:58:58.760 --> 00:59:04.750
 spring boot 特定款式Josh 

00:59:02.750 --> 00:59:06.529
真的讨厌我隐藏横幅

00:59:04.750 --> 00:59:09.829
但是我很好

00:59:06.529 --> 00:59:12.680
我们在这里添加的一种可能性是- 

00:59:09.829 --> 00:59:15.020
好的参数不在

00:59:12.680 --> 00:59:16.960
配置文件也可以在运行中

00:59:15.020 --> 00:59:19.970
配置，所以我可以添加其他

00:59:16.960 --> 00:59:23.059
参数再次使用代码完成

00:59:19.970 --> 00:59:26.309
在这里所以也许我想重新定义我的

00:59:23.059 --> 00:59:29.069
春季一物产

00:59:26.309 --> 00:59:32.939
再次，我们完成了

00:59:29.069 --> 00:59:35.759
值再次在这里，它会做什么

00:59:32.939 --> 00:59:38.069
我将默认值指定为

00:59:35.759 --> 00:59:40.259
应用程序属性，但是当我运行它时

00:59:38.069 --> 00:59:42.869
从我实际上想在IDE中

00:59:40.259 --> 00:59:45.119
覆盖此参数，我可以

00:59:42.869 --> 00:59:47.609
在运行配置中执行此操作而无需

00:59:45.119 --> 00:59:50.430
触摸任何配置文件而无需

00:59:47.609 --> 00:59:54.239
用一些我会用的东西

00:59:50.430 --> 00:59:56.009
可能会使用更好的角度，我知道

00:59:54.239 --> 00:59:58.799
很好，可以访问

00:59:56.009 --> 01:00:02.880
快速更改内容以进行测试

00:59:58.799 --> 01:00:05.819
是的东西，是的，我们

01:00:02.880 --> 01:00:11.640
时间不多了，害怕，所以

01:00:05.819 --> 01:00:13.880
也许还剩下一两个问题

01:00:11.640 --> 01:00:13.880
请

01:00:22.140 --> 01:00:26.880
是的，问题是您是否有

01:00:24.989 --> 01:00:28.980
您可以分享很多自定义属性

01:00:26.880 --> 01:00:31.200
他们之间例如铁丝罐

01:00:28.980 --> 01:00:33.239
不同的微服务哦，是的

01:00:31.200 --> 01:00:35.549
范围确实是项目

01:00:33.239 --> 01:00:37.710
所以如果你有，你就拥有pojo 

01:00:35.549 --> 01:00:39.749
在某个项目中添加注释

01:00:37.710 --> 01:00:42.029
处理器，它将自动包括

01:00:39.749 --> 01:00:43.589
罐子中的元数据以及

01:00:42.029 --> 01:00:45.869
班级通行证上的托梁将起作用，并且

01:00:43.589 --> 01:00:47.549
您可以根据需要拥有任意数量，因此

01:00:45.869 --> 01:00:49.440
这个想法实际上会调和所有人

01:00:47.549 --> 01:00:52.319
这些文件，并为您提供统一

01:00:49.440 --> 01:00:53.549
已经存在的密钥的存储库

01:00:52.319 --> 01:00:55.739
如果您看，我们在斯普林伍德有什么

01:00:53.549 --> 01:00:57.299
在Springwood实际上某些模块

01:00:55.739 --> 01:00:58.859
附带元数据，我们没有一个

01:00:57.299 --> 01:01:07.099
巨型文件及其所有内容

01:00:58.859 --> 01:01:10.619
已经隔离了更多问题，或者您

01:01:07.099 --> 01:01:14.059
可以来，我们可以聊天谢谢

01:01:10.619 --> 01:01:14.059
你非常好，非常感谢你

