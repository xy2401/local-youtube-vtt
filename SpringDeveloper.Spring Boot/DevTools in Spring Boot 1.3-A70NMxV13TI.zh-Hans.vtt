WEBVTT
Kind: captions
Language: zh-Hans

00:00:11.220 --> 00:00:14.190
这是一个简短的视频，向您展示一些

00:00:12.900 --> 00:00:17.010
新的开发工具功能是

00:00:14.190 --> 00:00:18.990
在 spring boot 1.3中可用

00:00:17.010 --> 00:00:22.919
小型演示应用程序就在这里

00:00:18.990 --> 00:00:25.980
一种主要方法一套控制器

00:00:22.919 --> 00:00:31.349
在模型中的一些信息CSS 

00:00:25.980 --> 00:00:34.410
文件和一个呈现的HTML页面

00:00:31.349 --> 00:00:40.260
如果我开始使用时间叶

00:00:34.410 --> 00:00:46.350
应用程序，然后转到

00:00:40.260 --> 00:00:48.239
浏览器并刷新它，您将看到我们得到

00:00:46.350 --> 00:00:50.039
一个非常简单的页面（如果您曾经使用过） 

00:00:48.239 --> 00:00:52.110
你可能会认识到这种

00:00:50.039 --> 00:00:53.820
应用程序样式，这是

00:00:52.110 --> 00:00:56.940
我附带的演示应用程序

00:00:53.820 --> 00:00:59.399
刚复制到春天，所以

00:00:56.940 --> 00:01:00.360
 spring boot 1.2，如果你想

00:00:59.399 --> 00:01:02.280
实际对此进行更改

00:01:00.360 --> 00:01:03.989
运行中的应用程序

00:01:02.280 --> 00:01:05.600
有点失误，所以

00:01:03.989 --> 00:01:07.890
实例，如果我想更改CSS 

00:01:05.600 --> 00:01:14.220
也许我改变了字体大小，所以

00:01:07.890 --> 00:01:16.349
有点小然后工作，但如果我

00:01:14.220 --> 00:01:18.840
想要通过更改时间叶模板

00:01:16.349 --> 00:01:23.340
默认不起作用，所以如果我更改

00:01:18.840 --> 00:01:24.899
也许这只是让耳朵刷新

00:01:23.340 --> 00:01:27.450
浏览器，但此处的文本不

00:01:24.899 --> 00:01:29.490
更新这是因为时间叶是

00:01:27.450 --> 00:01:31.470
实际缓存此结果

00:01:29.490 --> 00:01:33.599
模板解析，因此不必

00:01:31.470 --> 00:01:35.069
每次都做，有一个属性

00:01:33.599 --> 00:01:36.479
您可以设置更改它，但这是

00:01:35.069 --> 00:01:39.179
不得不记住要做的事有点尴尬

00:01:36.479 --> 00:01:41.130
当涉及到实际变化时

00:01:39.179 --> 00:01:42.300
您的Java代码通常不可用

00:01:41.130 --> 00:01:43.800
除非运气好的话，否则完全运气

00:01:42.300 --> 00:01:49.110
调试模式，仅更改一个

00:01:43.800 --> 00:01:50.310
方法，所以我们是Spring Boot 1.3， 

00:01:49.110 --> 00:01:58.770
您可以添加到您的新模块

00:01:50.310 --> 00:02:02.700
池塘文件，所以如果您添加弹簧靴

00:01:58.770 --> 00:02:07.890
开发工具模块，然后重新启动

00:02:02.700 --> 00:02:13.260
应用程序，您应该会发现它

00:02:07.890 --> 00:02:15.560
表现略有不同，所以一旦

00:02:13.260 --> 00:02:18.480
我再次结束并刷新页面

00:02:15.560 --> 00:02:22.860
这次如果我改变字体大小

00:02:18.480 --> 00:02:24.060
在CSS中继续工作

00:02:22.860 --> 00:02:28.439
之前

00:02:24.060 --> 00:02:28.439
但我现在也可以更改模板

00:02:34.740 --> 00:02:42.750
做到这一点我也可以改变

00:02:40.920 --> 00:02:45.210
代码，例如，让我们添加

00:02:42.750 --> 00:02:47.450
上升量有所不同

00:02:45.210 --> 00:02:47.450
时间

00:02:56.470 --> 00:03:00.350
您会在这里注意到的是

00:02:58.520 --> 00:03:01.610
实际检测到春季申请

00:03:00.350 --> 00:03:04.130
分类器已更改

00:03:01.610 --> 00:03:07.130
在它下面并重新启动本身，因此

00:03:04.130 --> 00:03:09.440
如果现在刷新浏览器，我会得到

00:03:07.130 --> 00:03:11.600
以及不同的消息通知

00:03:09.440 --> 00:03:14.480
重新启动时间比

00:03:11.600 --> 00:03:16.460
初始启动时间是因为

00:03:14.480 --> 00:03:18.050
一切都已加载到JVM中

00:03:16.460 --> 00:03:19.880
所以我们可以扔掉那些

00:03:18.050 --> 00:03:23.240
已经改变但保留了大多数

00:03:19.880 --> 00:03:28.310
该应用程序已经很热，所以很多

00:03:23.240 --> 00:03:29.990
更快启动，这是相当不错的，但是

00:03:28.310 --> 00:03:32.750
点击此刷新按钮可以获取

00:03:29.990 --> 00:03:35.180
一个春天之后有点乏味

00:03:32.750 --> 00:03:37.940
开机1.3，我们还提供了实时重载

00:03:35.180 --> 00:03:40.550
服务器，这意味着您可以获取插件

00:03:37.940 --> 00:03:42.920
为您的浏览器，我有一个

00:03:40.550 --> 00:03:44.780
如果我单击此处在Firefox上安装

00:03:42.920 --> 00:03:48.470
这个插件实际上会附上

00:03:44.780 --> 00:03:54.130
到下次我的本地机器

00:03:48.470 --> 00:03:56.630
我进行更改并保存文件

00:03:54.130 --> 00:03:59.090
不再需要刷新浏览器了

00:03:56.630 --> 00:04:01.040
自动为我做这个

00:03:59.090 --> 00:04:02.720
与CSS文件以及Java一起使用

00:04:01.040 --> 00:04:07.190
文件，所以如果我缩小字体

00:04:02.720 --> 00:04:10.430
如果我撤消它，它将再次刷新，并且

00:04:07.190 --> 00:04:12.850
再次保存文件，事情回到

00:04:10.430 --> 00:04:12.850
通常

00:04:16.940 --> 00:04:21.450
所以这使得当地发展

00:04:19.230 --> 00:04:23.040
体验更好一点，但我们也

00:04:21.450 --> 00:04:26.310
做一些额外的东西，使遥控器

00:04:23.040 --> 00:04:27.900
开发经验也更好

00:04:26.310 --> 00:04:29.660
我已经拿了这个申请，我已经

00:04:27.900 --> 00:04:32.250
实际上将其打包为docker 

00:04:29.660 --> 00:04:34.230
图片，然后将其发布到晶格

00:04:32.250 --> 00:04:41.910
作为在我的计算机上运行的推送应用程序

00:04:34.230 --> 00:04:44.180
本地计算机，所以这是运行的应用程序

00:04:41.910 --> 00:04:49.650
在我的泊坞窗内

00:04:44.180 --> 00:04:51.150
本地VM中的环境，因此

00:04:49.650 --> 00:04:53.280
在其中运行应用程序的问题

00:04:51.150 --> 00:04:55.440
码头工人容器或推动他们

00:04:53.280 --> 00:04:56.850
到云是有时

00:04:55.440 --> 00:05:00.030
很难实际连接遥控器

00:04:56.850 --> 00:05:02.130
为他们调试器，因此使用1.3 

00:05:00.030 --> 00:05:03.900
决定添加其他功能

00:05:02.130 --> 00:05:07.020
我们可以在其中隧道调试流量

00:05:03.900 --> 00:05:08.400
通过HTTP，因此要启用此功能

00:05:07.020 --> 00:05:11.490
必须做几件事

00:05:08.400 --> 00:05:14.520
默认情况下，你有一个属性

00:05:11.490 --> 00:05:17.490
您的应用程序属性弹簧

00:05:14.520 --> 00:05:19.080
开发工具远程机密这只是一个

00:05:17.490 --> 00:05:22.350
用于验证密码的密码

00:05:19.080 --> 00:05:23.760
连接，然后

00:05:22.350 --> 00:05:26.850
码头工人，你有额外的

00:05:23.760 --> 00:05:29.100
实际使用启动JVM的参数

00:05:26.850 --> 00:05:32.310
调试模式，所以如果你看我的码头工人

00:05:29.100 --> 00:05:33.479
文件，如果你去弹簧指南

00:05:32.310 --> 00:05:36.530
这你会看到我的有一些

00:05:33.479 --> 00:05:39.150
我已经调试过的其他东西

00:05:36.530 --> 00:05:42.479
我有一些配置设置

00:05:39.150 --> 00:05:44.729
说作为服务器启动，不要挂起

00:05:42.479 --> 00:05:46.229
我实际上不需要的应用程序

00:05:44.729 --> 00:05:48.210
指定要启动的端口之一

00:05:46.229 --> 00:05:53.520
因为Java将选一个

00:05:48.210 --> 00:05:55.550
靴子实际上可以推断出

00:05:53.520 --> 00:05:58.560
有了这个应用程式，我现在可以

00:05:55.550 --> 00:06:00.570
真正联系我的本地发展

00:05:58.560 --> 00:06:03.900
该远程应用程序的环境

00:06:00.570 --> 00:06:06.660
并做一些远程调试

00:06:03.900 --> 00:06:09.630
你要做的就是

00:06:06.660 --> 00:06:11.280
其他运行配置，因此您

00:06:09.630 --> 00:06:13.320
创建一个指向的运行配置

00:06:11.280 --> 00:06:15.240
像往常一样进入您的项目，但是

00:06:13.320 --> 00:06:16.770
而不是运行您的主要方法

00:06:15.240 --> 00:06:19.140
运行一个新的main方法，该方法是

00:06:16.770 --> 00:06:22.290
弹簧靴，所以在这种情况下，我正在跑步

00:06:19.140 --> 00:06:24.750
远程弹簧应用我也

00:06:22.290 --> 00:06:26.700
需要提供一个参数

00:06:24.750 --> 00:06:29.010
是它的终点网址

00:06:26.700 --> 00:06:30.169
实际上要命中，所以在这种情况下

00:06:29.010 --> 00:06:34.969
你可以看到你是一样的

00:06:30.169 --> 00:06:39.770
我已经在浏览器中启动，所以如果我运行

00:06:34.969 --> 00:06:41.990
该应用程序现在您可以看到它

00:06:39.770 --> 00:06:42.979
启动相当快，它是

00:06:41.990 --> 00:06:46.699
实际建立了联系

00:06:42.979 --> 00:06:51.349
进入我的docker映像

00:06:46.699 --> 00:06:53.150
如果我现在想实际附加

00:06:51.349 --> 00:06:55.819
我可以连接到我的远程调试器

00:06:53.150 --> 00:06:58.159
本地机器我的本地应用程序在这里

00:06:55.819 --> 00:07:00.770
这个正在运行，这将

00:06:58.159 --> 00:07:04.460
通过HTTP隧道调试流量

00:07:00.770 --> 00:07:11.990
和格子说话，所以我在这里

00:07:04.460 --> 00:07:14.499
如果我连接，可以进行远程调试设置

00:07:11.990 --> 00:07:17.659
看到我在和一个开放的JDK聊天

00:07:14.499 --> 00:07:22.339
机器，如果我刷新此浏览器

00:07:17.659 --> 00:07:24.409
在这里我要碰到一个断点

00:07:22.339 --> 00:07:26.749
我已经在本地设置，您可以看到所有

00:07:24.409 --> 00:07:30.430
您可以进行的常规调试工作

00:07:26.749 --> 00:07:32.479
做到你通常会得到的

00:07:30.430 --> 00:07:32.990
要注意的一件事是

00:07:32.479 --> 00:07:35.899
相当慢

00:07:32.990 --> 00:07:37.580
隧道远程Deebo交通是

00:07:35.899 --> 00:07:39.560
通过HTTP相当健谈不是

00:07:37.580 --> 00:07:41.479
特别快，因此虽然有效

00:07:39.560 --> 00:07:43.310
如果我在格子机上表现很好

00:07:41.479 --> 00:07:45.469
实际上是在现实中

00:07:43.310 --> 00:07:47.060
互联网会多一点

00:07:45.469 --> 00:07:49.719
使用起来很痛苦，但仍然

00:07:47.060 --> 00:07:58.909
一种潜在的有用技术

00:07:49.719 --> 00:08:00.349
我只是让它贯穿最后

00:07:58.909 --> 00:08:02.839
我想告诉你的是我们如何

00:08:00.349 --> 00:08:05.389
使用相同的重启技术

00:08:02.839 --> 00:08:07.339
远程应用程序，所以我要

00:08:05.389 --> 00:08:10.149
我在这里得到的这个应用程序

00:08:07.339 --> 00:08:10.149
我要重建它

00:08:17.569 --> 00:08:26.719
然后我将其推升至

00:08:19.729 --> 00:08:28.909
 Cloud Foundry，因此推送过程需要

00:08:26.719 --> 00:08:32.839
一会儿，因为它会抓住一个

00:08:28.909 --> 00:08:35.779
 JVM建立一个映像文件并将其发布

00:08:32.839 --> 00:08:37.550
启动应用程序运行，这样

00:08:35.779 --> 00:08:38.899
这种循环可能会有点

00:08:37.550 --> 00:08:40.069
烦人的如果你正在工作

00:08:38.899 --> 00:08:43.880
有些东西，你只想做

00:08:40.069 --> 00:08:46.959
小小的变化，所以我们给一个

00:08:43.880 --> 00:08:46.959
一两分钟上传

00:09:22.040 --> 00:09:32.480
如果我前往

00:09:25.490 --> 00:09:35.570
浏览器中，您看到我的应用程序正在运行

00:09:32.480 --> 00:09:37.220
已经持续了26秒，所以现在

00:09:35.570 --> 00:09:39.560
如果我想真正地附于那一个

00:09:37.220 --> 00:09:42.050
我可以做和我一样的技术

00:09:39.560 --> 00:09:46.610
在我得到另一个之前做了

00:09:42.050 --> 00:09:49.520
这里的配置，这次是

00:09:46.610 --> 00:09:53.600
完全一样，但我指的是

00:09:49.520 --> 00:09:56.660
 Cloud Foundry端点，所以如果我运行

00:09:53.600 --> 00:09:58.070
现在正在发生的事情是

00:09:56.660 --> 00:09:59.540
应用程序已连接到Clara 

00:09:58.070 --> 00:10:01.970
铸造厂，但仍在监视我

00:09:59.540 --> 00:10:05.810
本地课程路径，所以如果我想

00:10:01.970 --> 00:10:12.080
现在在这里更改，例如，如果我

00:10:05.810 --> 00:10:13.730
再次更改字体大小

00:10:12.080 --> 00:10:14.960
能够检测到这种变化，但这一次

00:10:13.730 --> 00:10:17.540
而不是更新本地

00:10:14.960 --> 00:10:20.090
应用程序将其推送到

00:10:17.540 --> 00:10:21.650
远程端点，然后更新

00:10:20.090 --> 00:10:25.370
自己在那里动态地然后

00:10:21.650 --> 00:10:27.770
如果我刷新浏览器，请立即刷新

00:10:25.370 --> 00:10:29.300
可以看到它实际上已经更新了

00:10:27.770 --> 00:10:32.920
实时重新加载服务器仍在运行

00:10:29.300 --> 00:10:40.040
在本地也是如此，如果我打开它

00:10:32.920 --> 00:10:41.900
并改回它，你可以看到它的推动

00:10:40.040 --> 00:10:43.790
发生变化，然后触发

00:10:41.900 --> 00:10:45.740
实时重新加载，因此实际上正在更新

00:10:43.790 --> 00:10:48.110
互联网上的远程服务，但是

00:10:45.740 --> 00:10:51.620
为我刷新浏览器，这

00:10:48.110 --> 00:10:54.260
与重启一起工作，所以我

00:10:51.620 --> 00:11:03.680
可以更改设计以更改正常运行时间

00:10:54.260 --> 00:11:05.960
再次，如果我保存该应用程序， 

00:11:03.680 --> 00:11:07.850
要重新编译，请注意更改

00:11:05.960 --> 00:11:10.130
上推一个类文件

00:11:07.850 --> 00:11:16.600
更改然后触发重新启动

00:11:10.130 --> 00:11:16.600
克拉拉铸造厂感谢您的观看

