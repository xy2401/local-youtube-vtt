WEBVTT
Kind: captions
Language: zh-Hans

00:00:10.820 --> 00:00:16.580
在这里做容易消费

00:00:13.010 --> 00:00:18.019
微服务演示和

00:00:16.580 --> 00:00:20.570
泰德·托尔森（Ted Tolson）我一直在做软件

00:00:18.019 --> 00:00:22.820
我工作了20多年

00:00:20.570 --> 00:00:28.669
克罗格（Kroger），我曾经是软件架构师

00:00:22.820 --> 00:00:30.619
在零售化学和音乐行业中喜

00:00:28.669 --> 00:00:32.239
我是Sean Sherwood，就像Ted一样

00:00:30.619 --> 00:00:34.269
这个行业一段时间

00:00:32.239 --> 00:00:37.390
在克罗格之前，我曾在

00:00:34.269 --> 00:00:44.120
电信金融和

00:00:37.390 --> 00:00:46.879
生物信息学，那么谁是克罗格呢？ 

00:00:44.120 --> 00:00:49.280
财富500强中的第17位，因此

00:00:46.879 --> 00:00:50.870
相当大的公司

00:00:49.280 --> 00:00:52.550
名称，您会在其中看到一些

00:00:50.870 --> 00:00:54.850
如果您在西海岸，您可能会

00:00:52.550 --> 00:00:57.350
知道拉尔夫是有效的克罗格

00:00:54.850 --> 00:01:00.260
那里还有很多其他统计数据

00:00:57.350 --> 00:01:02.019
幻灯片将正确发布

00:01:00.260 --> 00:01:05.210
那么这个演讲的重点是什么

00:01:02.019 --> 00:01:08.030
我们想使其易于生产和

00:01:05.210 --> 00:01:10.399
一致地消费微服务

00:01:08.030 --> 00:01:11.600
这样很好

00:01:10.399 --> 00:01:13.759
听起来不错，但实际上我们如何

00:01:11.600 --> 00:01:15.530
去做好我们所要做的

00:01:13.759 --> 00:01:18.080
要去做，我们要去 Spring 

00:01:15.530 --> 00:01:21.459
初始化我们的分叉人数

00:01:18.080 --> 00:01:25.580
这里使用了启动Spring 点IO 

00:01:21.459 --> 00:01:27.050
好吧，我的举手真不错

00:01:25.580 --> 00:01:29.750
只是听起来有些新鲜统计

00:01:27.050 --> 00:01:31.670
像这样目前正在创造一个

00:01:29.750 --> 00:01:35.179
每个项目十五万个项目

00:01:31.670 --> 00:01:37.130
一个月，所以我认为它的用法很多

00:01:35.179 --> 00:01:39.229
它证实这是一个非常坚实的

00:01:37.130 --> 00:01:41.929
概念作为获取项目的一种方式

00:01:39.229 --> 00:01:43.759
开始，所以议程将是如何

00:01:41.929 --> 00:01:45.709
我们可以叉起来然后进行设置吗

00:01:43.759 --> 00:01:48.770
我们将展示如何设置

00:01:45.709 --> 00:01:52.310
第三方依赖性，以便您可以

00:01:48.770 --> 00:01:55.459
使用它如何设置VCS忽略

00:01:52.310 --> 00:01:57.530
文件和您生成的内容，那么我们

00:01:55.459 --> 00:02:00.259
要去学习如何编写测试

00:01:57.530 --> 00:02:03.520
然后如何创建微服务

00:02:00.259 --> 00:02:05.950
带有一些定制的原型和

00:02:03.520 --> 00:02:09.110
时间允许，我们将进入

00:02:05.950 --> 00:02:12.050
超级秘密红利回合，让我们拭目以待

00:02:09.110 --> 00:02:16.489
一切如何顺利进行

00:02:12.050 --> 00:02:18.290
用幻灯片编码得足够多，是的，真的

00:02:16.489 --> 00:02:20.959
快速，我想给你一点

00:02:18.290 --> 00:02:23.870
介绍只是为了确保

00:02:20.959 --> 00:02:25.550
您还没有使用初始化程序

00:02:23.870 --> 00:02:27.650
您去产生Spring 的地方

00:02:25.550 --> 00:02:29.570
启动应用程序，它有很多选择

00:02:27.650 --> 00:02:30.380
依赖关系，然后选择

00:02:29.570 --> 00:02:32.420
生成

00:02:30.380 --> 00:02:34.430
并会为您下载一个zip文件

00:02:32.420 --> 00:02:38.450
然后可以将其导入到IDE中

00:02:34.430 --> 00:02:42.890
并继续您的发展，所以我们

00:02:38.450 --> 00:02:44.300
确保我有我的

00:02:42.890 --> 00:02:46.190
建立了开发环境，因此我可以

00:02:44.300 --> 00:02:49.610
实际上开始修改它，所以我已经

00:02:46.190 --> 00:02:52.460
我自己有一个初始化程序的分支

00:02:49.610 --> 00:02:54.440
我已经成为现实的个人github 

00:02:52.460 --> 00:02:57.050
签入的不同步骤

00:02:54.440 --> 00:02:59.090
演讲结束后我会照做

00:02:57.050 --> 00:03:01.160
将是您可以使用的链接

00:02:59.090 --> 00:03:04.820
可以去看看，我也有一个

00:03:01.160 --> 00:03:08.390
只是在回购中的文档

00:03:04.820 --> 00:03:10.430
旁边真的很详细

00:03:08.390 --> 00:03:12.200
有关如何继续的说明

00:03:10.430 --> 00:03:14.680
如果您想回家尝试

00:03:12.200 --> 00:03:14.680
自己做

00:03:15.910 --> 00:03:22.250
为了证明我确实有这个

00:03:19.040 --> 00:03:24.830
工作很快，我会做一个非常

00:03:22.250 --> 00:03:36.020
对HTML模板的小改动

00:03:24.830 --> 00:03:38.030
在初始化程序的后面，我有开发人员

00:03:36.020 --> 00:03:39.710
工具和实时重载运行，所以我

00:03:38.030 --> 00:03:43.570
不必重新加载

00:03:39.710 --> 00:03:43.570
我实际上已经准备好发展

00:03:43.600 --> 00:03:48.380
好吧，所以有详细

00:03:47.240 --> 00:03:50.150
有关如何设置您的说明

00:03:48.380 --> 00:03:52.070
开发环境，所以我们有点

00:03:50.150 --> 00:03:54.110
跳过那部分，但链接

00:03:52.070 --> 00:03:58.180
拥有所有有关的信息，所以

00:03:54.110 --> 00:04:00.860
我们的第一个场景我们有项目团队

00:03:58.180 --> 00:04:03.500
像大多数一样，他们有一个属性文件

00:04:00.860 --> 00:04:05.270
但他们没有加密自己的价值

00:04:03.500 --> 00:04:06.620
在属性文件中，我们真的

00:04:05.270 --> 00:04:08.870
希望他们做任何事情

00:04:06.620 --> 00:04:10.760
那很敏感，所以我们要做到

00:04:08.870 --> 00:04:13.040
他们容易做正确的事， 

00:04:10.760 --> 00:04:16.340
那么我们的解决方案就是

00:04:13.040 --> 00:04:19.790
被添加在八卦 spring boot 

00:04:16.340 --> 00:04:22.160
初始化程序的启动程序选项

00:04:19.790 --> 00:04:25.130
初始化程序实际上是运行的

00:04:22.160 --> 00:04:29.780
启动spring dot IO，所以我们要

00:04:25.130 --> 00:04:31.130
告诉你怎么做，好吧

00:04:29.780 --> 00:04:32.630
如果要去，将是一个常见的用例

00:04:31.130 --> 00:04:33.740
在哪里自定义初始化程序

00:04:32.630 --> 00:04:36.170
您将要添加

00:04:33.740 --> 00:04:37.580
我选择的其他图书馆

00:04:36.170 --> 00:04:39.380
第三方库，因为它是

00:04:37.580 --> 00:04:44.080
可供所有人实际使用

00:04:39.380 --> 00:04:47.150
在使用，还因为它是一个

00:04:44.080 --> 00:04:49.120
 Spring Boot知道的项目不是

00:04:47.150 --> 00:04:52.190
实际上在 spring boot 的下面

00:04:49.120 --> 00:04:54.979
雨伞，让您获得

00:04:52.190 --> 00:04:56.660
使用第三方库以及

00:04:54.979 --> 00:05:00.890
使用Spring Boot和Auto的优势

00:04:56.660 --> 00:05:04.520
配置，以便添加第三方

00:05:00.890 --> 00:05:09.710
依赖有少量

00:05:04.520 --> 00:05:11.450
你必须包括在内

00:05:09.710 --> 00:05:14.570
他在那里做的事

00:05:11.450 --> 00:05:16.940
只是一吨Yambol描述

00:05:14.570 --> 00:05:18.950
 Jessup库之类的组ID 

00:05:16.940 --> 00:05:21.979
那种典型的工件ID 

00:05:18.950 --> 00:05:25.160
依赖的东西，我要添加

00:05:21.979 --> 00:05:27.919
就在OP部分的下方

00:05:25.160 --> 00:05:32.419
这是其中的应用程序备忘文件

00:05:27.919 --> 00:05:34.130
初始化代码库，因此

00:05:32.419 --> 00:05:35.870
设置初始化器的方式是

00:05:34.130 --> 00:05:39.770
超级容易添加您自己的自定义

00:05:35.870 --> 00:05:42.140
依赖关系，所以我创建了一个主题

00:05:39.770 --> 00:05:43.910
组件，然后与其他调用

00:05:42.140 --> 00:05:46.160
自定义，所以我可以放任何我的自定义

00:05:43.910 --> 00:05:48.310
在这种情况下，我下面的东西

00:05:46.160 --> 00:05:51.880
仅添加Jessup库

00:05:48.310 --> 00:05:53.920
我在其中输入了说明和组ID 

00:05:51.880 --> 00:05:56.950
以及链接到该工件的工件ID 

00:05:53.920 --> 00:05:58.600
依赖关系，我还将添加一个版本

00:05:56.950 --> 00:06:01.270
数字，这不是

00:05:58.600 --> 00:06:04.810
当你看着你通常不见

00:06:01.270 --> 00:06:08.350
引导中的其他描述

00:06:04.810 --> 00:06:11.470
是的，这是因为它不在

00:06:08.350 --> 00:06:12.880
 spring boot 管理，以便可能

00:06:11.470 --> 00:06:15.250
必须是你必须要做的事情

00:06:12.880 --> 00:06:17.650
帐户也可以实际上

00:06:15.250 --> 00:06:19.990
在可能的地方开发自己的炸弹

00:06:17.650 --> 00:06:21.910
管理这些版本，如果您已经

00:06:19.990 --> 00:06:23.890
曾经在女性中占第三

00:06:21.910 --> 00:06:27.120
派对或自定义依赖项

00:06:23.890 --> 00:06:27.120
可能想看看这样做

00:06:29.070 --> 00:06:36.880
所以我会开始，看看我的

00:06:33.790 --> 00:06:38.680
初始化程序的副本，当我只是

00:06:36.880 --> 00:06:40.720
开始输入jessup即可

00:06:38.680 --> 00:06:43.510
现在看到图书馆对我可用

00:06:40.720 --> 00:06:45.430
并且因为我添加了描述

00:06:43.510 --> 00:06:47.320
我什至可以输入像

00:06:45.430 --> 00:06:49.890
加密，它将显示出来

00:06:47.320 --> 00:06:52.570
实际上符合您的描述

00:06:49.890 --> 00:06:55.170
所以当我们谈论简单

00:06:52.570 --> 00:06:59.350
可以说微服务的消费

00:06:55.170 --> 00:07:01.030
回到你的办公室，你有一些网络

00:06:59.350 --> 00:07:03.430
那里的服务很亲切

00:07:01.030 --> 00:07:06.190
您可能会创建的复杂呼叫

00:07:03.430 --> 00:07:07.990
一个客户端库，然后如果

00:07:06.190 --> 00:07:10.210
你只需要这个小一点

00:07:07.990 --> 00:07:13.300
然后您可以运行自己的自定义

00:07:10.210 --> 00:07:14.740
版本的启动春生物和

00:07:13.300 --> 00:07:16.210
将是您团队的一个选择，所以

00:07:14.740 --> 00:07:18.790
每当他们想致电该服务时

00:07:16.210 --> 00:07:20.320
他们只是点击按钮

00:07:18.790 --> 00:07:22.420
在他们的依赖自动

00:07:20.320 --> 00:07:26.380
 Maven或Gradle文件，他们已经准备好

00:07:22.420 --> 00:07:29.440
去吧，它产生了它，而且很快

00:07:26.380 --> 00:07:31.420
我将打开pom文件，您可以

00:07:29.440 --> 00:07:34.200
看到依赖现在

00:07:31.420 --> 00:07:38.140
包括在内，所以我们有Jessup库

00:07:34.200 --> 00:07:40.390
包含在我们的项目中，而我实际上

00:07:38.140 --> 00:07:42.580
在我那里运行这个版本

00:07:40.390 --> 00:07:45.430
对

00:07:42.580 --> 00:07:47.460
我讨论过的应用程序属性

00:07:45.430 --> 00:07:51.280
演示文稿本身

00:07:47.460 --> 00:07:54.250
我在使用Jessup加密的地方

00:07:51.280 --> 00:07:57.880
存储这些属性，当您查看时

00:07:54.250 --> 00:08:00.229
现在，它令人羡慕执行器

00:07:57.880 --> 00:08:03.560
你实际上可以看到

00:08:00.229 --> 00:08:05.060
密码未加密

00:08:03.560 --> 00:08:07.280
第二个密码

00:08:05.060 --> 00:08:09.349
特别是因为您可以看到它

00:08:07.280 --> 00:08:10.999
实际开始 spring boot 会

00:08:09.349 --> 00:08:13.699
如果你给它命名的话

00:08:10.999 --> 00:08:16.789
带有单词secret或key或

00:08:13.699 --> 00:08:18.860
密码或不是秘密而是密码

00:08:16.789 --> 00:08:22.340
有多少人正在使用执行器

00:08:18.860 --> 00:08:25.279
在这里，哇，那绝对是

00:08:22.340 --> 00:08:27.620
那是一个很棒的图书馆

00:08:25.279 --> 00:08:29.419
 Spring ，就好像你有负载

00:08:27.620 --> 00:08:30.979
免费功能，您只需要

00:08:29.419 --> 00:08:32.300
把它放在你的项目中，它给你

00:08:30.979 --> 00:08:34.339
像他那样的大量终点

00:08:32.300 --> 00:08:36.500
显示那里是环境的终点

00:08:34.339 --> 00:08:38.870
但是好像有20个

00:08:36.500 --> 00:08:41.360
他们不断添加更好的东西

00:08:38.870 --> 00:08:43.240
所以绝对值得一看

00:08:41.360 --> 00:08:45.350
可能在您的组织中

00:08:43.240 --> 00:08:47.300
您建立的图书馆

00:08:45.350 --> 00:08:48.709
不能与外界分享

00:08:47.300 --> 00:08:51.709
世界，这将是你怎么做

00:08:48.709 --> 00:08:53.300
您的团队可以选择的那些

00:08:51.709 --> 00:08:55.790
从初始化程序开始，您的自定义

00:08:53.300 --> 00:08:57.920
初始化程序的版本以及什么

00:08:55.790 --> 00:09:01.820
你知道，但是我展示的这个例子

00:08:57.920 --> 00:09:04.459
具有入门概念，所以如果您

00:09:01.820 --> 00:09:06.529
可以将这些库包装起来

00:09:04.459 --> 00:09:08.209
与启动器和自动配置，它使

00:09:06.529 --> 00:09:12.850
人们变得更好

00:09:08.209 --> 00:09:12.850
能够使用和使用该库

00:09:13.390 --> 00:09:19.790
很酷，所以接下来我们要进行的场景

00:09:17.510 --> 00:09:21.649
谈论的是我们有开发人员

00:09:19.790 --> 00:09:23.870
像二进制一样不断检查的团队

00:09:21.649 --> 00:09:26.570
文件进入源代码控制，我们

00:09:23.870 --> 00:09:28.820
真的不想那么简单

00:09:26.570 --> 00:09:30.500
解决方案是给他们一个忽略文件

00:09:28.820 --> 00:09:32.360
但是我们要确保他们不会

00:09:30.500 --> 00:09:34.100
必须手动完成，我们想要

00:09:32.360 --> 00:09:35.570
只是自动将其弹出

00:09:34.100 --> 00:09:38.570
每当他们开始新项目时

00:09:35.570 --> 00:09:40.790
项目，所以我们要去修改

00:09:38.570 --> 00:09:44.420
这次是初始化器，而不是

00:09:40.790 --> 00:09:45.769
像maven一样加入

00:09:44.420 --> 00:09:47.630
依赖我们实际上只是

00:09:45.769 --> 00:09:52.610
将文件添加到

00:09:47.630 --> 00:09:54.860
为了公平起见实际上是存在的

00:09:52.610 --> 00:09:58.399
 Spring 开张票

00:09:54.860 --> 00:10:02.260
初始化程序本身就是这样做的

00:09:58.399 --> 00:10:02.260
只是这样做的一种方式

00:10:02.350 --> 00:10:08.690
所以我利用了一个叫做

00:10:06.709 --> 00:10:10.730
被忽略IO我不知道是否有人

00:10:08.690 --> 00:10:13.220
曾经使用过，但是为我节省了

00:10:10.730 --> 00:10:14.839
很多时间，您只需要输入

00:10:13.220 --> 00:10:19.430
事物类型是您项目的一部分

00:10:14.839 --> 00:10:25.629
它会生成一个相当完整的获取

00:10:19.430 --> 00:10:25.629
忽略文件，所以我会采取这个

00:10:28.569 --> 00:10:34.490
作为模板介绍它，怎么办

00:10:32.029 --> 00:10:37.129
我的意思是通过模板生成器

00:10:34.490 --> 00:10:39.379
那是 Spring 的底下

00:10:37.129 --> 00:10:41.689
初始化程序大量使用了Groovy 

00:10:39.379 --> 00:10:43.100
模板等等

00:10:41.689 --> 00:10:46.370
实际产生的东西

00:10:43.100 --> 00:10:48.189
在最终的zip文件中

00:10:46.370 --> 00:10:53.420
放在此模板目录中

00:10:48.189 --> 00:10:58.910
这么快，我将添加一个新的门

00:10:53.420 --> 00:11:02.329
忽略文件，所以是的，我不得不

00:10:58.910 --> 00:11:03.889
 git的一个更改忽略了

00:11:02.329 --> 00:11:05.899
实际上不是来自被忽略

00:11:03.889 --> 00:11:08.120
它实际上与行家有关

00:11:05.899 --> 00:11:09.920
包装罐无论出于何种原因

00:11:08.120 --> 00:11:13.129
不包括在内，所以我有一些

00:11:09.920 --> 00:11:14.930
在下游发布，因为

00:11:13.129 --> 00:11:18.350
没有签入，它需要

00:11:14.930 --> 00:11:19.879
是这样，除了发生

00:11:18.350 --> 00:11:21.889
模板，我还有另一件事

00:11:19.879 --> 00:11:24.730
需要修改，这实际上是

00:11:21.889 --> 00:11:24.730
发电机本身

00:11:30.070 --> 00:11:39.610
在项目生成器内部有

00:11:36.700 --> 00:11:40.990
这确实产生了项目结构， 

00:11:39.610 --> 00:11:43.810
这是大部分主要工作所在

00:11:40.990 --> 00:11:46.750
实际上完成了两个模板

00:11:43.810 --> 00:11:48.460
并将它们放在目录中

00:11:46.750 --> 00:11:50.980
在压缩之前，我只是

00:11:48.460 --> 00:11:52.330
要介绍这个，这是什么

00:11:50.980 --> 00:11:53.890
要做的就是拿那个文件

00:11:52.330 --> 00:11:56.380
我创建的模板文件

00:11:53.890 --> 00:11:58.300
忽略通过常规运行它

00:11:56.380 --> 00:12:01.390
传递模型的模板引擎

00:11:58.300 --> 00:12:04.000
这就是事物的全部属性

00:12:01.390 --> 00:12:06.880
您在表单上选择的

00:12:04.000 --> 00:12:10.630
本身，然后产生一个点git 

00:12:06.880 --> 00:12:12.220
忽略文件，通常这是

00:12:10.630 --> 00:12:15.150
您需要做的所有事情

00:12:12.220 --> 00:12:18.190
模板工作并将其引入

00:12:15.150 --> 00:12:19.900
初始化器，但是我发现一个真正的

00:12:18.190 --> 00:12:23.920
有趣的边缘情况

00:12:19.900 --> 00:12:26.080
忽略自己的压缩过程

00:12:23.920 --> 00:12:34.690
被正确使用而被使用

00:12:26.080 --> 00:12:38.770
现在主控制器正在使用 ant 

00:12:34.690 --> 00:12:40.840
生成zip文件集和zip文件的生成器

00:12:38.770 --> 00:12:42.850
文件集只是方便地决定

00:12:40.840 --> 00:12:44.700
忽略一堆它认为是的文件

00:12:42.850 --> 00:12:47.350
您永远不想包括

00:12:44.700 --> 00:12:50.080
显然，在这种情况下，我们真的想要它

00:12:47.350 --> 00:12:53.800
这么快被包括在内，我将添加

00:12:50.080 --> 00:12:58.350
这很有趣

00:12:53.800 --> 00:12:58.350
但实际上是一个非常简单的解决方案，因此

00:12:58.770 --> 00:13:04.090
而所做的只是放另一个

00:13:01.960 --> 00:13:07.980
这个选项可以说不排除

00:13:04.090 --> 00:13:07.980
这些默认值

00:13:09.670 --> 00:13:14.230
真正的灵魂对话是

00:13:12.130 --> 00:13:16.510
关于在正确的道路上建立团队

00:13:14.230 --> 00:13:18.970
从一开始，所以我们会继续

00:13:16.510 --> 00:13:20.620
建立我们在这里所做的

00:13:18.970 --> 00:13:23.590
依赖是最容易添加的东西

00:13:20.620 --> 00:13:25.120
现在我们正在做一些文件， 

00:13:23.590 --> 00:13:29.220
原型即将出现

00:13:25.120 --> 00:13:29.220
然后我们将从那里进一步建立

00:13:29.940 --> 00:13:36.880
我有一个错误，所以其中之一

00:13:33.760 --> 00:13:38.590
我们已经看到的是，你知道我们已经

00:13:36.880 --> 00:13:40.960
这个问题问我们，你知道吗

00:13:38.590 --> 00:13:42.580
我们真正开始新项目的频率

00:13:40.960 --> 00:13:44.590
我们经常这样做吗

00:13:42.580 --> 00:13:47.920
值得进入这里并这样做

00:13:44.590 --> 00:13:53.080
我会说 Spring 开始的事实

00:13:47.920 --> 00:13:55.810
确实每月使用15万次

00:13:53.080 --> 00:13:58.540
是的，快速入门

00:13:55.810 --> 00:14:00.910
项目是值得的，但我们已经看到了

00:13:58.540 --> 00:14:03.250
当您获得

00:14:00.910 --> 00:14:05.620
团队以一致的方式开始新项目

00:14:03.250 --> 00:14:11.170
方式，我认为这是一个很好的例子

00:14:05.620 --> 00:14:12.780
是我们有一致的Maven设置吗

00:14:11.170 --> 00:14:15.160
我们使用了很长时间

00:14:12.780 --> 00:14:17.950
肖恩（Sean）加入了团队，他看着

00:14:15.160 --> 00:14:20.740
那他说，哦，嘿，你为什么不

00:14:17.950 --> 00:14:22.480
家伙现在使用声纳，因为

00:14:20.740 --> 00:14:24.520
我们正在做的所有项目团队

00:14:22.480 --> 00:14:27.880
事情以非常一致的方式

00:14:24.520 --> 00:14:29.110
能够非常迅速地建立声纳

00:14:27.880 --> 00:14:31.030
建立在我们不断整合的基础上

00:14:29.110 --> 00:14:33.940
服务器将其发布并开始

00:14:31.030 --> 00:14:35.980
掌握趋势和我们的代码覆盖范围，并

00:14:33.940 --> 00:14:38.050
这样的事情，所以我认为

00:14:35.980 --> 00:14:42.460
强调将团队投入的力量

00:14:38.050 --> 00:14:46.140
一致的模式我怎么不

00:14:42.460 --> 00:14:46.140
知道没事吧，也许我拼错了

00:14:48.020 --> 00:14:55.910
如果不是，我能做的就是

00:14:51.440 --> 00:15:00.830
我已经可以完成大部分工作了

00:14:55.910 --> 00:15:03.680
前进并向前跳，是的，所以在这里

00:15:00.830 --> 00:15:05.750
他将展示每个

00:15:03.680 --> 00:15:07.910
这些步骤，他指的是

00:15:05.750 --> 00:15:10.339
全部放在github上，所以他的一切

00:15:07.910 --> 00:15:11.959
复制以执行以下步骤是

00:15:10.339 --> 00:15:13.850
已经在那里供您看看

00:15:11.959 --> 00:15:16.040
在演示的结尾，我们

00:15:13.850 --> 00:15:19.820
有链接，然后另外

00:15:16.040 --> 00:15:22.430
那个代码的分叉代码是

00:15:19.820 --> 00:15:24.890
全部以及github以及

00:15:22.430 --> 00:15:26.180
每个步骤都会分支，所以如果

00:15:24.890 --> 00:15:27.560
你挂在任何可能的事上

00:15:26.180 --> 00:15:29.420
只需检查那些分支之一， 

00:15:27.560 --> 00:15:34.070
为了那个特定而干净

00:15:29.420 --> 00:15:35.660
实施，所以让我们重启

00:15:34.070 --> 00:15:40.100
基本上，这是完全相同的

00:15:35.660 --> 00:15:42.440
有一个很好的忽略权

00:15:40.100 --> 00:15:47.020
在项目生成器和主

00:15:42.440 --> 00:15:49.700
控制器具有排除和我

00:15:47.020 --> 00:15:51.440
猜每个人都注意到

00:15:49.700 --> 00:15:56.000
实际上是一个 Spring 小组项目

00:15:51.440 --> 00:16:02.170
你完全希望它会这样

00:15:56.000 --> 00:16:05.529
前面并添加为生成

00:16:02.170 --> 00:16:05.529
我们也是

00:16:11.340 --> 00:16:17.640
你现在可以看到我有一个很好的

00:16:13.650 --> 00:16:20.270
忽略文件，所以非常直接漂亮

00:16:17.640 --> 00:16:23.730
直接做到这一点

00:16:20.270 --> 00:16:26.220
当然是现场编码，但我有我的

00:16:23.730 --> 00:16:28.500
备份，以便git忽略文件在那里

00:16:26.220 --> 00:16:31.230
当您的开发人员提交时

00:16:28.500 --> 00:16:36.720
他们的代码，他们将没有文件

00:16:31.230 --> 00:16:38.910
你不想现身所以

00:16:36.720 --> 00:16:40.500
演出git的忽略文件很漂亮

00:16:38.910 --> 00:16:42.870
直截了当是静态的

00:16:40.500 --> 00:16:46.440
正确的文件，它有相同的规则

00:16:42.870 --> 00:16:48.390
每当我们下一个场景是

00:16:46.440 --> 00:16:51.330
想要生成一个自述文件

00:16:48.390 --> 00:16:52.920
项目，我们想放入各种

00:16:51.330 --> 00:16:55.529
那里的信息，你

00:16:52.920 --> 00:16:57.990
知道团队有如何

00:16:55.529 --> 00:16:59.339
项目开始了，有些甚至有些

00:16:57.990 --> 00:17:01.290
有关如何使用物品的说明

00:16:59.339 --> 00:17:03.330
在项目中，我们将

00:17:01.290 --> 00:17:07.560
利用模板功能

00:17:03.330 --> 00:17:15.390
像我以前那样做

00:17:07.560 --> 00:17:17.160
在创建新文件之前，我将使用

00:17:15.390 --> 00:17:19.400
 S键点格式，而不是

00:17:17.160 --> 00:17:19.400
降价

00:17:28.530 --> 00:17:35.159
我会在这里通过

00:17:31.820 --> 00:17:37.230
因为它是一个时髦的模板，您可以看到

00:17:35.159 --> 00:17:39.840
基本上我所做的就是

00:17:37.230 --> 00:17:41.730
在其中执行常规操作

00:17:39.840 --> 00:17:44.580
模板，因此当此模板获取时

00:17:41.730 --> 00:17:46.950
处理并放入目录

00:17:44.580 --> 00:17:49.740
就在压缩过程之前

00:17:46.950 --> 00:17:52.820
这种替代，实际上我只是

00:17:49.740 --> 00:17:57.450
继续进行下一步

00:17:52.820 --> 00:18:06.840
并告诉你还有什么可以

00:17:57.450 --> 00:18:09.450
是的，因为这个模型

00:18:06.840 --> 00:18:10.980
你有选择

00:18:09.450 --> 00:18:16.470
您已经选择了引入

00:18:10.980 --> 00:18:18.870
通过模板哦，像

00:18:16.470 --> 00:18:21.210
项目名称可用

00:18:18.870 --> 00:18:23.309
说明，甚至可以当护士

00:18:21.210 --> 00:18:25.409
内省然后依赖

00:18:23.309 --> 00:18:26.669
可用的，所以我有一个

00:18:25.409 --> 00:18:29.039
输出的依赖项是

00:18:26.669 --> 00:18:32.340
用户当时选择的

00:18:29.039 --> 00:18:33.840
他们做了生成，而我实际上

00:18:32.340 --> 00:18:36.480
想增加一点

00:18:33.840 --> 00:18:38.610
如果他们已经

00:18:36.480 --> 00:18:41.010
选择了它赋予的特定依赖

00:18:38.610 --> 00:18:43.409
我可以选择增加一些选择

00:18:41.010 --> 00:18:45.510
在这种情况下，如果他们选择了信息

00:18:43.409 --> 00:18:47.220
杰西普，我要输入文本

00:18:45.510 --> 00:18:50.809
这将给他们一个链接到

00:18:47.220 --> 00:18:56.429
库，以便他们可以获得更多信息

00:18:50.809 --> 00:19:00.539
既然我错过了，回去

00:18:56.429 --> 00:19:02.190
把它放在是的，显然这

00:19:00.539 --> 00:19:04.549
只是如何使用的一个例子

00:19:02.190 --> 00:19:06.720
生成东西的模板

00:19:04.549 --> 00:19:07.830
在项目时动态地

00:19:06.720 --> 00:19:09.870
我们已经踢了一些

00:19:07.830 --> 00:19:12.059
关于我们可能会做什么的不同想法

00:19:09.870 --> 00:19:15.330
它有一个捷克风格的项目

00:19:12.059 --> 00:19:17.340
每个人都真正喜欢的东西很好

00:19:15.330 --> 00:19:18.929
保持一致的格式

00:19:17.340 --> 00:19:21.150
代码，所以可能是另一个文件

00:19:18.929 --> 00:19:22.770
你想产生是的，你可以想到

00:19:21.150 --> 00:19:25.950
有各种各样的潜力

00:19:22.770 --> 00:19:29.780
您可能想要做的文件

00:19:25.950 --> 00:19:29.780
码头工人文件甚至是的

00:19:33.500 --> 00:19:44.070
所以现在当我选择项目并执行

00:19:39.810 --> 00:19:45.480
产生，所以他正在经历

00:19:44.070 --> 00:19:49.110
很快，但是当我们谈论

00:19:45.480 --> 00:19:50.490
给团队一个专为

00:19:49.110 --> 00:19:52.200
那些没用过的 Spring 开始哦

00:19:50.490 --> 00:19:55.200
那就是它正在做的是

00:19:52.200 --> 00:19:56.970
它会占用您所需的所有基本文件

00:19:55.200 --> 00:19:59.040
开始一个项目，这是一个

00:19:56.970 --> 00:20:00.330
只是将它们拉上拉链而已

00:19:59.040 --> 00:20:02.010
他每次下载什么

00:20:00.330 --> 00:20:04.020
单击该按钮，所以现在我已经捕获了

00:20:02.010 --> 00:20:05.460
一些关键信息，你

00:20:04.020 --> 00:20:07.230
可能希望其他部分

00:20:05.460 --> 00:20:13.440
根据您的需要进行模板化

00:20:07.230 --> 00:20:19.140
自述文件，所以我们谈到了

00:20:13.440 --> 00:20:20.310
是的，它奏效了，是的，它奏效了

00:20:19.140 --> 00:20:21.870
可以看到我的依赖

00:20:20.310 --> 00:20:24.930
选择您现在可以看到， 

00:20:21.870 --> 00:20:27.180
由于选择了Jessup依赖项

00:20:24.930 --> 00:20:29.460
那小段信息是

00:20:27.180 --> 00:20:34.370
包括在内，您可以看到时间

00:20:29.460 --> 00:20:34.370
日期包括在底部I 

00:20:36.830 --> 00:20:40.710
告诉他他看起来有点阴暗，所以我们

00:20:39.150 --> 00:20:46.830
应该加上时间戳，以便人们可以

00:20:40.710 --> 00:20:50.010
看到实际上没事

00:20:46.830 --> 00:20:52.650
好吧，那么很好，那是

00:20:50.010 --> 00:20:56.900
自述文件，您可以看到该怎么办

00:20:52.650 --> 00:20:59.430
相对简单，但是

00:20:56.900 --> 00:21:02.070
嘿，即使你一直在做这一切

00:20:59.430 --> 00:21:03.840
工作你写了一个测试我会

00:21:02.070 --> 00:21:04.440
马上打电话给我你的DVD 

00:21:03.840 --> 00:21:07.410
好吧

00:21:04.440 --> 00:21:10.110
嗯，实际上我认为我有一些东西

00:21:07.410 --> 00:21:12.720
好吧，让我们做这些

00:21:10.110 --> 00:21:15.060
修改显然我们想要

00:21:12.720 --> 00:21:17.430
发电机为我们持续工作

00:21:15.060 --> 00:21:21.120
团队，所以进行测试是一个好主意

00:21:17.430 --> 00:21:26.160
您的自定义内容，是的，我什至拥有

00:21:21.120 --> 00:21:30.030
就像您将在此上迈出的整个步骤

00:21:26.160 --> 00:21:34.470
期望项目生成器进行测试

00:21:30.030 --> 00:21:35.990
案例或测试套件，我想

00:21:34.470 --> 00:21:38.300
介绍

00:21:35.990 --> 00:21:40.250
证明自己去测试一些东西

00:21:38.300 --> 00:21:42.350
我实际上已经修改过

00:21:40.250 --> 00:21:44.060
这是我要去的非常简单的地方

00:21:42.350 --> 00:21:47.090
只是生成一个秋季网络项目

00:21:44.060 --> 00:21:48.200
在生成该项目之后

00:21:47.090 --> 00:21:51.050
我要验证的测试的一部分

00:21:48.200 --> 00:21:58.510
这些文件实际上作为

00:21:51.050 --> 00:22:00.950
那我希望有一个绿色的酒吧

00:21:58.510 --> 00:22:02.960
一个小注意事项，我们只是

00:22:00.950 --> 00:22:06.400
将此直接扔到文件中

00:22:02.960 --> 00:22:09.440
那是Arne那里或测试班

00:22:06.400 --> 00:22:11.030
这可能不是最佳实践

00:22:09.440 --> 00:22:12.740
的变化频繁

00:22:11.030 --> 00:22:14.780
初始化器，它是不断的

00:22:12.740 --> 00:22:16.610
获得新的强大功能

00:22:14.780 --> 00:22:18.770
真的，你应该尝试把你所有的

00:22:16.610 --> 00:22:20.750
增强成单独的文件

00:22:18.770 --> 00:22:22.160
尽可能使它更容易

00:22:20.750 --> 00:22:24.800
采取较新的版本

00:22:22.160 --> 00:22:25.940
初始化程序，随便吧

00:22:24.800 --> 00:22:27.950
我们从困难中学到了一些东西

00:22:25.940 --> 00:22:30.620
这样，我将要做某事

00:22:27.950 --> 00:22:33.140
你会注意到一点高级

00:22:30.620 --> 00:22:35.180
当我选择Jessup库时

00:22:33.140 --> 00:22:36.890
自述文件实际上会有点

00:22:35.180 --> 00:22:42.970
与未选择的情况不同

00:22:36.890 --> 00:22:42.970
我想使用自定义断言进行验证

00:22:43.900 --> 00:22:48.110
实际上有一堆习惯

00:22:46.610 --> 00:22:50.210
已经内置的断言

00:22:48.110 --> 00:22:52.160
这个要认证的项目，所以我要粘贴

00:22:50.210 --> 00:22:53.840
我写的这段代码及其含义

00:22:52.160 --> 00:22:56.660
将要做的是说

00:22:53.840 --> 00:23:00.260
文件是否存在，如果存在， 

00:22:56.660 --> 00:23:03.500
您表达的内容，所以现在我

00:23:00.260 --> 00:23:05.960
可以写一个测试用例

00:23:03.500 --> 00:23:10.280
有点复杂，但是

00:23:05.960 --> 00:23:13.510
将验证然后产生了

00:23:10.280 --> 00:23:13.510
预期的输出

00:23:17.200 --> 00:23:22.940
所以这是用

00:23:20.240 --> 00:23:25.039
具体的依赖关系，并添加一对

00:23:22.940 --> 00:23:27.710
对它的依赖组，然后

00:23:25.039 --> 00:23:30.049
然后执行此创建项目请求

00:23:27.710 --> 00:23:32.090
的输出将与

00:23:30.049 --> 00:23:34.309
这些断言，所以这是我的新

00:23:32.090 --> 00:23:37.720
我刚刚创建的断言

00:23:34.309 --> 00:23:40.340
说我希望他是特别的

00:23:37.720 --> 00:23:44.679
单词Jessup中的asciidoc格式

00:23:40.340 --> 00:23:47.090
现在，当我运行该测试用例时

00:23:44.679 --> 00:23:52.669
假设一切顺利，我应该看到

00:23:47.090 --> 00:23:58.940
绿条，是的，甜美的

00:23:52.669 --> 00:24:01.340
卡好吧，这就是你的方式

00:23:58.940 --> 00:24:04.669
你知道现在测试标题吗

00:24:01.340 --> 00:24:06.620
谈论我们的微服务原型

00:24:04.669 --> 00:24:08.809
我们有很多不同的团队

00:24:06.620 --> 00:24:11.120
正在创建我们想要的微服务

00:24:08.809 --> 00:24:12.440
确保他们在一个

00:24:11.120 --> 00:24:14.539
一致的方式有一定的最佳

00:24:12.440 --> 00:24:17.200
我们真的要烤的做法

00:24:14.539 --> 00:24:19.909
进入生成的项目

00:24:17.200 --> 00:24:22.429
执行器将是最好的一个例子

00:24:19.909 --> 00:24:23.870
练习这是一个非常好的功能

00:24:22.429 --> 00:24:26.419
在您的项目中，所以我们想要所有

00:24:23.870 --> 00:24:27.559
项目这样做是为了

00:24:26.419 --> 00:24:30.440
我们将要修改

00:24:27.559 --> 00:24:33.259
初始化器具有原型概念

00:24:30.440 --> 00:24:35.750
或基本上一堆图书馆

00:24:33.259 --> 00:24:37.250
会自动包含在内，好吗

00:24:35.750 --> 00:24:41.029
可能会注意到我必须输入

00:24:37.250 --> 00:24:43.940
像将执行器连网几次

00:24:41.029 --> 00:24:47.600
我很懒，所以我想解决这个问题，所以我

00:24:43.940 --> 00:24:49.730
不必这样做，所以我要去

00:24:47.600 --> 00:24:51.740
我要做的就是修改HTML 

00:24:49.730 --> 00:24:55.360
家用HTML，我将添加一个

00:24:51.740 --> 00:25:04.029
下拉菜单，这将使我能够

00:24:55.360 --> 00:25:04.029
选择我得到行号

00:25:06.800 --> 00:25:14.190
从候选人名单中

00:25:09.960 --> 00:25:16.050
的候选人可以包括

00:25:14.190 --> 00:25:18.230
不同类型的参考

00:25:16.050 --> 00:25:25.200
您想要生产的建筑

00:25:18.230 --> 00:25:27.150
来自初始化程序本身，所以

00:25:25.200 --> 00:25:29.850
这个演讲我们专注于微

00:25:27.150 --> 00:25:32.220
服务，但您可能需要一部手机

00:25:29.850 --> 00:25:34.830
参考架构，然后漂亮

00:25:32.220 --> 00:25:36.690
关于那件事是 spring boot 

00:25:34.830 --> 00:25:39.630
固执的堆栈，但他们只能去

00:25:36.690 --> 00:25:41.780
到目前为止，您拥有自己的移动参考

00:25:39.630 --> 00:25:44.520
建筑，你可以把你的

00:25:41.780 --> 00:25:46.410
公司的外观和烘烤

00:25:44.520 --> 00:25:48.930
以这种方式进入参考架构

00:25:46.410 --> 00:25:50.100
当团队开始项目时，他们可以

00:25:48.930 --> 00:25:52.170
真正专注于业务

00:25:50.100 --> 00:25:53.850
功能和外观

00:25:52.170 --> 00:25:55.170
他们需要坚持的已经在

00:25:53.850 --> 00:25:56.670
从一开始就在那里，因为我是

00:25:55.170 --> 00:25:58.350
我放在foo中的好计算机程序员

00:25:56.670 --> 00:26:00.510
和酒吧只是为了有一点点

00:25:58.350 --> 00:26:01.860
那里有多余的东西，但是现在当我

00:26:00.510 --> 00:26:02.970
选择它实际上没有发生任何事情

00:26:01.860 --> 00:26:05.490
好吧，显然我必须放一些

00:26:02.970 --> 00:26:13.710
背后的行为，所以实际上

00:26:05.490 --> 00:26:17.130
我需要添加的JavaScript文件

00:26:13.710 --> 00:26:24.410
如果我跟随一些行为

00:26:17.130 --> 00:26:24.410
与我的演讲，并包括这个

00:26:24.650 --> 00:26:29.700
我将开始看到行为，那么

00:26:28.410 --> 00:26:31.500
如果这真的要做的只是

00:26:29.700 --> 00:26:33.390
检查变更事件，并

00:26:31.500 --> 00:26:36.690
取决于您选择的是

00:26:33.390 --> 00:26:39.630
要检查单个启动器

00:26:36.690 --> 00:26:41.580
我想成为那个人的一部分， 

00:26:39.630 --> 00:26:45.090
在这种情况下，当我休息时

00:26:41.580 --> 00:26:46.740
选择执行器和历史'kz安全性

00:26:45.090 --> 00:26:49.470
因为我要确保我的东西是

00:26:46.740 --> 00:26:50.940
保护Jessop，然后保护侦探库

00:26:49.470 --> 00:26:52.710
如果您还没有看到侦探

00:26:50.940 --> 00:26:56.010
方式，请检查出来，这是非常非常

00:26:52.710 --> 00:26:58.880
很酷的项目，我也有开发工具

00:26:56.010 --> 00:26:58.880
那是另一个很棒的人

00:27:02.650 --> 00:27:08.270
所以现在从行为角度来说，我应该开始

00:27:06.110 --> 00:27:10.460
看到这个我也临时离开了

00:27:08.270 --> 00:27:12.679
保留现有的

00:27:10.460 --> 00:27:14.390
的行为，所以现在当我选择所有

00:27:12.679 --> 00:27:16.130
突然之间所有这些事情已经

00:27:14.390 --> 00:27:17.540
为我选择了，所以我不必担心

00:27:16.130 --> 00:27:18.920
关于它，我什至不需要

00:27:17.540 --> 00:27:20.059
想一想，我只想要一个微

00:27:18.920 --> 00:27:22.600
服务，我想确保

00:27:20.059 --> 00:27:28.940
它拥有所有可用的东西

00:27:22.600 --> 00:27:29.990
我认为应该是您想要的

00:27:28.940 --> 00:27:34.750
与共享完整版本

00:27:29.990 --> 00:27:36.470
本章现在有什么问题

00:27:34.750 --> 00:27:39.620
显然切换完整版本

00:27:36.470 --> 00:27:42.350
那些是的，如果你打开完整的

00:27:39.620 --> 00:27:49.390
版本，您将看到行为

00:27:42.350 --> 00:27:49.390
所有的一切都回到

00:27:51.640 --> 00:28:03.010
我喜欢简单的版本，所以我生成了

00:27:55.360 --> 00:28:04.300
只是为了证明他们没有

00:28:03.010 --> 00:28:11.650
只是出现在屏幕上，但他们

00:28:04.300 --> 00:28:13.750
哦，好吧，好吧，那又怎样

00:28:11.650 --> 00:28:15.220
我们现在要做的是表明我们可以

00:28:13.750 --> 00:28:16.720
实际上拿走了我们只是

00:28:15.220 --> 00:28:19.000
产生的，实际上是

00:28:16.720 --> 00:28:20.530
 Micra服务和Micra服务

00:28:19.000 --> 00:28:21.880
它有一个休息端点，我们只是

00:28:20.530 --> 00:28:25.840
会碰到其余端点并看到一些

00:28:21.880 --> 00:28:30.340
 JSON回来了，所以我们Barney下载了

00:28:25.840 --> 00:28:32.710
 s4是的，我们已经下载了该项目， 

00:28:30.340 --> 00:28:40.360
我们将继续进行构建

00:28:32.710 --> 00:28:42.670
并运行它是另一件事

00:28:40.360 --> 00:28:44.410
关于执行器，您可能已经注意到

00:28:42.670 --> 00:28:46.060
我们实际上并没有为

00:28:44.410 --> 00:28:48.340
微型服务，所以真的

00:28:46.060 --> 00:28:49.990
空的微服务，但执行器

00:28:48.340 --> 00:28:53.350
端点会自动存在

00:28:49.990 --> 00:28:55.570
我们会自动休息一下

00:28:53.350 --> 00:28:57.010
我们可以点击的端点，如果您

00:28:55.570 --> 00:28:58.510
过去看过 spring boot 日志

00:28:57.010 --> 00:28:59.920
您已经看到有几件事

00:28:58.510 --> 00:29:04.770
有点不同

00:28:59.920 --> 00:29:04.770
侦听库已处于活动状态

00:29:11.450 --> 00:29:20.720
现在，如果我去提起并击中E 

00:29:17.750 --> 00:29:23.900
和V，但是等等，我被阻止了哦

00:29:20.720 --> 00:29:25.820
我们没想到不会，因为我

00:29:23.900 --> 00:29:27.410
现在启用了安全性

00:29:25.820 --> 00:29:30.020
端点，因为它现在被认为是

00:29:27.410 --> 00:29:32.240
安全性不重要，但我确实知道

00:29:30.020 --> 00:29:34.000
 Spring Boot的默认行为是

00:29:32.240 --> 00:29:36.980
实际回显该密码

00:29:34.000 --> 00:29:39.140
在这里的某处好执行器

00:29:36.980 --> 00:29:46.190
哦，不，你是对的， Spring 花花公子

00:29:39.140 --> 00:29:49.030
我没看到它，我想我

00:29:46.190 --> 00:29:49.030
字体可能太大

00:29:52.590 --> 00:29:57.870
你总是可以健康

00:29:54.390 --> 00:30:00.179
终结点是的，就是这样

00:29:57.870 --> 00:30:02.900
信息和健康端点

00:30:00.179 --> 00:30:05.850
执行器不受安全保护，因此

00:30:02.900 --> 00:30:07.320
我们可以直接进入

00:30:05.850 --> 00:30:08.490
我只是看到一个

00:30:07.320 --> 00:30:11.130
有趣的行为，因为我不是

00:30:08.490 --> 00:30:13.110
登录我只会看到

00:30:11.130 --> 00:30:16.169
登录后，您会看到

00:30:13.110 --> 00:30:21.299
就像历史一样，这个空间

00:30:16.169 --> 00:30:25.409
它不会变得太低所以最好

00:30:21.299 --> 00:30:26.669
微服务一直很好

00:30:25.409 --> 00:30:31.520
运行那就是重点

00:30:26.669 --> 00:30:33.330
哎呀，把它送走好吧，所以

00:30:31.520 --> 00:30:34.620
让我们好好看，我认为我们正在做所有

00:30:33.330 --> 00:30:36.539
准时，所以我们可以进入

00:30:34.620 --> 00:30:38.700
奖金回合实际上我们所做的一切

00:30:36.539 --> 00:30:41.580
到目前为止，重点是代码

00:30:38.700 --> 00:30:44.039
一代人，但我们想做到

00:30:41.580 --> 00:30:46.770
团队容易上手，为什么呢？ 

00:30:44.039 --> 00:30:49.679
不继续初始化他们的

00:30:46.770 --> 00:30:51.570
版本控制正确，所以我们知道我们

00:30:49.679 --> 00:30:54.059
希望他们使用版本控制

00:30:51.570 --> 00:30:56.850
每个人都同意这一点，所以我们

00:30:54.059 --> 00:30:59.580
可以只更改初始值设定项以继续

00:30:56.850 --> 00:31:01.860
并初始化10-太疯狂了

00:30:59.580 --> 00:31:05.880
哇，我不担心你是

00:31:01.860 --> 00:31:07.529
的有演示，是的，我想我

00:31:05.880 --> 00:31:09.679
我觉得我能做到这一点

00:31:07.529 --> 00:31:09.679
这个

00:31:09.799 --> 00:31:17.880
所以我实际上要继续前进

00:31:13.770 --> 00:31:21.409
步骤已包括在内

00:31:17.880 --> 00:31:21.409
我会讲一些我正在做的事情

00:31:25.789 --> 00:31:33.769
重置它，这只是一个例子

00:31:31.369 --> 00:31:36.249
您可能想要做的是

00:31:33.769 --> 00:31:38.749
不仅仅是代码生成

00:31:36.249 --> 00:31:41.479
显然，无论您在做什么

00:31:38.749 --> 00:31:46.070
您可能想自动化的商店

00:31:41.479 --> 00:31:48.320
这个过程我正在做，因为我

00:31:46.070 --> 00:31:51.320
引入一个新的图书馆

00:31:48.320 --> 00:31:54.440
允许我们做一些手术

00:31:51.320 --> 00:31:56.899
我包括杰科特，这将允许

00:31:54.440 --> 00:32:01.099
我从Java到现在做类似

00:31:56.899 --> 00:32:03.669
得到它得到广告得到提交的东西

00:32:01.099 --> 00:32:06.979
你每次都在做

00:32:03.669 --> 00:32:08.929
一个人一个项目

00:32:06.979 --> 00:32:11.989
我要加入的东西，如果你是

00:32:08.929 --> 00:32:13.460
用户界面设计师，请您睁开眼睛

00:32:11.989 --> 00:32:16.879
只是要添加一个小复选框

00:32:13.460 --> 00:32:18.979
顶部将使我们能够改变

00:32:16.879 --> 00:32:22.039
是否要进行的行为

00:32:18.979 --> 00:32:25.450
这样做得到它甚至被忽略

00:32:22.039 --> 00:32:25.450
根据您是否检查

00:32:31.090 --> 00:32:35.630
是的，当我们把它们放在一起时，我们没有

00:32:33.470 --> 00:32:37.160
知道主要的提交者之一

00:32:35.630 --> 00:32:39.440
初始化项目将是

00:32:37.160 --> 00:32:42.710
现在在房间里，感觉就像我们

00:32:39.440 --> 00:32:46.100
弄乱了他的身后，对不起我们

00:32:42.710 --> 00:32:47.690
道歉，我认为基于您

00:32:46.100 --> 00:32:50.240
之前在谈论这个

00:32:47.690 --> 00:32:53.750
可能会破坏某些ID集成

00:32:50.240 --> 00:32:55.310
功能哦，是的，这就是我

00:32:53.750 --> 00:32:58.220
不知道你们是否见过

00:32:55.310 --> 00:33:00.200
初始化程序是您可以实际使用的

00:32:58.220 --> 00:33:01.940
像IntelliJ指出的那样

00:33:00.200 --> 00:33:03.680
漂亮的项目生成

00:33:01.940 --> 00:33:06.380
很酷，所以我们一直在展示一切

00:33:03.680 --> 00:33:09.950
通过网络界面，但您也有

00:33:06.380 --> 00:33:14.000
通过IDE的选项，好吧，你怎么了

00:33:09.950 --> 00:33:18.560
知道，是的，所以我们

00:33:14.000 --> 00:33:21.070
将再次经历，现在生成

00:33:18.560 --> 00:33:21.070
我的演示

00:33:30.450 --> 00:33:35.040
当你进入那个目录时

00:33:32.610 --> 00:33:36.890
使用我的Z壳，您可以看到

00:33:35.040 --> 00:33:39.240
项目已经初始化

00:33:36.890 --> 00:33:40.800
是的，因为它表明了

00:33:39.240 --> 00:33:43.170
分支就可以看到主人

00:33:40.800 --> 00:33:45.120
那里有一些小地方

00:33:43.170 --> 00:33:50.100
我记录的那些

00:33:45.120 --> 00:33:51.390
围绕执行，我认为

00:33:50.100 --> 00:33:54.540
包装脚本需要设置

00:33:51.390 --> 00:33:56.460
可执行文件，并且由

00:33:54.540 --> 00:34:00.570
 zip流程，发生在您之后

00:33:56.460 --> 00:34:01.530
做获取设置，我有点

00:34:00.570 --> 00:34:03.390
必须做一点修改

00:34:01.530 --> 00:34:07.080
确保那是一部分

00:34:03.390 --> 00:34:09.000
的提交，否则它将

00:34:07.080 --> 00:34:10.470
说那是不同的， 

00:34:09.000 --> 00:34:17.070
他们会像一个三角洲

00:34:10.470 --> 00:34:18.570
如果很好的话生成文件哦

00:34:17.070 --> 00:34:20.580
你处理了，让我们让我们

00:34:18.570 --> 00:34:24.030
更进一步

00:34:20.580 --> 00:34:25.919
全部初始化到本地，但是为什么

00:34:24.030 --> 00:34:28.080
不要继续打电话给github 

00:34:25.919 --> 00:34:30.240
在github上创建一个全新的仓库

00:34:28.080 --> 00:34:32.580
然后将代码发送到那里，这样

00:34:30.240 --> 00:34:34.399
团队真的可以克隆它并开始

00:34:32.580 --> 00:34:36.659
在他们的东西上工作可以做到吗

00:34:34.399 --> 00:34:43.530
是的，我真的很容易

00:34:36.659 --> 00:34:46.409
只是做一个git push不，哦，等一下

00:34:43.530 --> 00:34:49.020
不，那没用，那没用

00:34:46.409 --> 00:34:50.580
特别是因为github没有

00:34:49.020 --> 00:34:52.399
其实知道我在创造这个

00:34:50.580 --> 00:34:55.890
回购，它不会让你

00:34:52.399 --> 00:34:57.620
任意推动一个项目，所以我

00:34:55.890 --> 00:35:04.020
必须要做的就是

00:34:57.620 --> 00:35:06.890
介绍另一个我要做的图书馆

00:35:04.020 --> 00:35:12.360
签出到第八步以执行此操作

00:35:06.890 --> 00:35:16.620
这是一个特定于github的库

00:35:12.360 --> 00:35:22.380
允许创建项目的能力

00:35:16.620 --> 00:35:23.940
我隐藏在github本身内的回购

00:35:22.380 --> 00:35:26.280
我在属性中的一些凭据

00:35:23.940 --> 00:35:28.530
文件，所以如果您想自己做

00:35:26.280 --> 00:35:30.510
您需要创建我刚才所说的文件

00:35:28.530 --> 00:35:32.610
在本指南中对此进行了说明，但是

00:35:30.510 --> 00:35:35.340
基本上，您可以看到所有内容

00:35:32.610 --> 00:35:37.500
其实很简单

00:35:35.340 --> 00:35:40.140
它出去到github创建一个

00:35:37.500 --> 00:35:42.880
基于请求名称和

00:35:40.140 --> 00:35:45.130
添加描述

00:35:42.880 --> 00:35:48.460
然后一旦该存储库评估

00:35:45.130 --> 00:35:50.500
该项目应该能够提供

00:35:48.460 --> 00:35:51.670
做一个推，但不必去

00:35:50.500 --> 00:35:56.700
到命令行，我将要做

00:35:51.670 --> 00:35:56.700
作为项目本身的一部分

00:35:58.770 --> 00:36:03.610
显示初始化程序将为

00:36:01.600 --> 00:36:04.840
对我们来说，这意味着团队不会

00:36:03.610 --> 00:36:06.490
真的需要了解这些

00:36:04.840 --> 00:36:09.160
他们可以进去说这是

00:36:06.490 --> 00:36:12.400
我的项目需要的依赖关系

00:36:09.160 --> 00:36:15.370
是的，我想要版本控制，这一切

00:36:12.400 --> 00:36:17.470
为他们自动设置

00:36:15.370 --> 00:36:20.440
与github合作的想法应该

00:36:17.470 --> 00:36:22.500
真正扩展到您所拥有的任何存储库

00:36:20.440 --> 00:36:26.260
在内部使用，如果您有

00:36:22.500 --> 00:36:29.350
只要不是github的东西

00:36:26.260 --> 00:36:30.940
它具有某种类型的REST API或

00:36:29.350 --> 00:36:33.820
至少可以使用某种工具

00:36:30.940 --> 00:36:36.690
从Java内部与您进行交互

00:36:33.820 --> 00:36:36.690
应该能够做到这一点

00:36:44.130 --> 00:36:50.820
我喜欢能够选择它，因为

00:36:46.260 --> 00:36:53.490
那真是节省了我很多时间

00:36:50.820 --> 00:36:55.530
它只占用了一点时间

00:36:53.490 --> 00:36:59.210
这次在该下载发生之前

00:36:55.530 --> 00:37:03.090
如果我们转到我的git存储库

00:36:59.210 --> 00:37:04.410
刷新这是的，你让我紧张

00:37:03.090 --> 00:37:05.790
他说要花一点时间

00:37:04.410 --> 00:37:08.820
花一点时间，你现在可以看到

00:37:05.790 --> 00:37:12.480
我刚刚通过创建

00:37:08.820 --> 00:37:15.420
初始化程序，因为我有自述文件

00:37:12.480 --> 00:37:16.890
它现在显示在那里github与

00:37:15.420 --> 00:37:20.070
我所有的所有选择

00:37:16.890 --> 00:37:24.480
依赖链接到Jessup Day和

00:37:20.070 --> 00:37:26.030
时间和日期是的，您会注意到

00:37:24.480 --> 00:37:28.350
就像真实的真实github 

00:37:26.030 --> 00:37:30.960
现场演示有点吓人

00:37:28.350 --> 00:37:33.960
因为网络问题很经典

00:37:30.960 --> 00:37:37.890
是的，所以只是一种有趣的轶事

00:37:33.960 --> 00:37:40.440
在我的一位同事中

00:37:37.890 --> 00:37:42.420
 github狂热的他就像什么鬼东西

00:37:40.440 --> 00:37:45.630
你在做我的经历吗

00:37:42.420 --> 00:37:47.160
我的一些试运行是因为他

00:37:45.630 --> 00:37:48.690
他能一直看到我创造这些吗

00:37:47.160 --> 00:37:52.250
小演示项目，然后我

00:37:48.690 --> 00:37:54.480
进入并删除它们，所以这是一个

00:37:52.250 --> 00:37:57.020
它会出现在你的脚上

00:37:54.480 --> 00:37:57.020
你做这个

00:37:57.470 --> 00:38:01.290
希望您能真正创建这些

00:37:59.640 --> 00:38:05.850
不只是像我一样丢掉它们

00:38:01.290 --> 00:38:08.280
很好，所以我们证明了我们

00:38:05.850 --> 00:38:10.830
可以与github集成，但是如果我们

00:38:08.280 --> 00:38:12.450
谈论我们的整个管道

00:38:10.830 --> 00:38:14.640
从CD的角度来看，我们该怎么办

00:38:12.450 --> 00:38:17.580
进一步在这个井上，为什么我们不去

00:38:14.640 --> 00:38:19.710
领先并使用持续集成

00:38:17.580 --> 00:38:22.110
对，我们希望我们所有的团队都成为

00:38:19.710 --> 00:38:24.330
设置好了，为什么我们不设置

00:38:22.110 --> 00:38:25.890
从标准开始就可以使用它们

00:38:24.330 --> 00:38:27.510
开始，这样他们就不必走了

00:38:25.890 --> 00:38:29.700
配置他们的持续集成

00:38:27.510 --> 00:38:32.340
这样对他们来说真的很容易

00:38:29.700 --> 00:38:34.890
做正确的事

00:38:32.340 --> 00:38:37.920
我们将使用Travis CI 

00:38:34.890 --> 00:38:38.970
去修改初始化器做一个非常

00:38:37.920 --> 00:38:40.350
类似的东西将在哪里打电话

00:38:38.970 --> 00:38:42.630
很好，它将创建

00:38:40.350 --> 00:38:44.610
 Travis文件，然后调出并创建

00:38:42.630 --> 00:38:47.570
该项目并将其启动，其中之一

00:38:44.610 --> 00:38:50.690
选择特拉维斯的原因是

00:38:47.570 --> 00:38:53.700
与github和

00:38:50.690 --> 00:38:56.640
我所要做的就是介绍Travis 

00:38:53.700 --> 00:38:57.530
 llamo文件到我的项目交互

00:38:56.640 --> 00:39:00.680
脚步

00:38:57.530 --> 00:39:01.580
我真的不需要做任何额外的工作

00:39:00.680 --> 00:39:05.570
做到这一点

00:39:01.580 --> 00:39:09.440
为了向您展示看起来像什么

00:39:05.570 --> 00:39:10.580
回到我的演讲中

00:39:09.440 --> 00:39:11.870
工作时在那里的信息

00:39:10.580 --> 00:39:14.510
与特拉维斯，你将不得不

00:39:11.870 --> 00:39:17.930
生成类似您的身份验证令牌

00:39:14.510 --> 00:39:20.150
 github auth令牌，因为我的已经

00:39:17.930 --> 00:39:22.630
我将要介绍的可用

00:39:20.150 --> 00:39:22.630
这个

00:39:35.840 --> 00:39:41.870
基本上是因为Travis在使用

00:39:40.070 --> 00:39:43.910
许多默认值我只需要告诉它

00:39:41.870 --> 00:39:46.070
这是一个Java项目，我想要

00:39:43.910 --> 00:39:48.590
它与Oracle JDK 8一起构建

00:39:46.070 --> 00:39:50.480
会推断出很多其他细节

00:39:48.590 --> 00:39:52.220
根据我拥有的项目

00:39:50.480 --> 00:39:54.080
进入并添加所有这些详细信息，如果您

00:39:52.220 --> 00:40:04.820
需要，但我想与

00:39:54.080 --> 00:40:06.440
简单的就可以吧

00:40:04.820 --> 00:40:07.820
每次开始时都要考虑一下

00:40:06.440 --> 00:40:09.290
一个新的项目有很多

00:40:07.820 --> 00:40:11.420
繁忙的工作通常必须在

00:40:09.290 --> 00:40:14.570
哦，让我走了

00:40:11.420 --> 00:40:16.640
请求版本控制存储库并让

00:40:14.570 --> 00:40:18.800
我去请求空间来连续运行

00:40:16.640 --> 00:40:20.660
整合，让我去建立我所有的

00:40:18.800 --> 00:40:22.970
持续集成，持续不断

00:40:20.660 --> 00:40:24.770
建立任何类似的功能测试

00:40:22.970 --> 00:40:26.330
您已经自动化了所有这些东西

00:40:24.770 --> 00:40:27.680
真的必须做所有的事

00:40:26.330 --> 00:40:29.780
您可以开始专注于任何

00:40:27.680 --> 00:40:31.670
业务功能，所以这里的想法

00:40:29.780 --> 00:40:34.250
是我们只是使整个过程自动化

00:40:31.670 --> 00:40:35.930
过程和一个团队，您知道他们是否

00:40:34.250 --> 00:40:38.360
做scrum之类的事情基本上可以

00:40:35.930 --> 00:40:39.890
在获得所需的一切之前

00:40:38.360 --> 00:40:41.360
项目的开始做得非常非常

00:40:39.890 --> 00:40:43.600
快速与此，然后他们可以

00:40:41.360 --> 00:40:46.340
立即关注业务逻辑

00:40:43.600 --> 00:40:49.250
其实我要在这方面作弊

00:40:46.340 --> 00:40:56.140
时间表透视图并签出

00:40:49.250 --> 00:40:56.140
该代码，我将遍历它

00:40:56.970 --> 00:41:01.109
因为我不得不介绍另一个

00:40:58.829 --> 00:41:06.900
依赖，我必须刷新

00:41:01.109 --> 00:41:08.670
在项目上重建是的，开发工具是

00:41:06.900 --> 00:41:11.430
很好，但是做不到

00:41:08.670 --> 00:41:13.849
一切用于自动检测

00:41:11.430 --> 00:41:13.849
重装

00:41:18.050 --> 00:41:21.190
跳得太远

00:41:29.260 --> 00:41:35.530
我添加了该选项，基本上可以

00:41:33.850 --> 00:41:39.550
如果您关闭Travis集成

00:41:35.530 --> 00:41:43.980
不想，然后我正在检查

00:41:39.550 --> 00:41:48.580
作为生成过程的一部分

00:41:43.980 --> 00:41:51.610
 Travis没有好的Java库

00:41:48.580 --> 00:41:53.020
就像github一样，我所拥有的

00:41:51.610 --> 00:41:55.060
要做的实际上只是使用Spring 

00:41:53.020 --> 00:41:57.700
休息模板并进行其余调用

00:41:55.060 --> 00:42:07.750
特拉维斯（如果您以前没有看过特拉维斯） 

00:41:57.700 --> 00:42:11.020
顺便说一句到仓库以

00:42:07.750 --> 00:42:15.400
打开特拉维斯的行为，你必须

00:42:11.020 --> 00:42:17.560
与您的帐户同步，然后翻转

00:42:15.400 --> 00:42:19.840
在Travis开始做之前切换

00:42:17.560 --> 00:42:21.040
持续集成是手动的，因此

00:42:19.840 --> 00:42:26.670
我将尝试解决该问题

00:42:21.040 --> 00:42:30.010
通过REST API，所以我在这里

00:42:26.670 --> 00:42:32.770
我正在一起验证

00:42:30.010 --> 00:42:35.050
我自己是用户，我正在同步

00:42:32.770 --> 00:42:37.570
通过其余接口，同步是

00:42:35.050 --> 00:42:39.340
同步是异步的，所以您有点

00:42:37.570 --> 00:42:42.400
必须等待它完成，所以

00:42:39.340 --> 00:42:44.530
将会发生的是请求的去向

00:42:42.400 --> 00:42:46.120
通过确保它不是

00:42:44.530 --> 00:42:47.380
下沉实际上是一个属性

00:42:46.120 --> 00:42:48.850
特拉维斯给你的回馈告诉

00:42:47.380 --> 00:42:54.400
您是否正在同步

00:42:48.850 --> 00:42:57.570
让它煮好吧，因为有点

00:42:54.400 --> 00:42:57.570
烹饪节目是的

00:43:08.190 --> 00:43:11.849
所以这一个这个开始采取一个

00:43:10.109 --> 00:43:13.859
因为代码多了一点时间

00:43:11.849 --> 00:43:16.470
需要起床然后特拉维斯

00:43:13.859 --> 00:43:18.990
器官EADS同步查看

00:43:16.470 --> 00:43:22.530
就像他说的那样，当他

00:43:18.990 --> 00:43:24.630
说烘焙Travis org是免费的，所以他们

00:43:22.530 --> 00:43:27.210
服务器数量有限

00:43:24.630 --> 00:43:28.589
他们可以不总是依靠你

00:43:27.210 --> 00:43:31.140
保证立即得到构建

00:43:28.589 --> 00:43:34.829
这样，它可能不会自动

00:43:31.140 --> 00:43:37.589
揭开序幕，让我可以讲一点

00:43:34.829 --> 00:43:39.960
再多一点，基本上是

00:43:37.589 --> 00:43:42.960
剩下的就是休息的步骤

00:43:39.960 --> 00:43:47.069
激活我必须拥有的存储库

00:43:42.960 --> 00:43:48.900
我的项目中的Travis llamo文件何时

00:43:47.069 --> 00:43:51.569
我现在为Travis进行推送以查看它

00:43:48.900 --> 00:43:53.670
所以特拉维斯会努力推动

00:43:51.569 --> 00:43:55.079
是的，然后开始

00:43:53.670 --> 00:44:04.309
开始持续整合

00:43:55.079 --> 00:44:04.309
建立和

00:44:10.000 --> 00:44:14.130
让我们看看我刚刚创建的那个

00:44:11.260 --> 00:44:14.130
是的

00:44:16.770 --> 00:44:20.480
我可能不应该选我们

00:44:29.150 --> 00:44:31.690
是的

00:44:31.880 --> 00:44:38.930
所以你现在可以看到Travis是

00:44:37.490 --> 00:44:43.430
真正开始构建

00:44:38.930 --> 00:44:46.280
我会跟着它做

00:44:43.430 --> 00:44:48.110
正常的Maven下载

00:44:46.280 --> 00:44:53.540
依赖关系，它将开始

00:44:48.110 --> 00:44:54.950
专家测试是的，所以只是回顾一下

00:44:53.540 --> 00:44:56.930
发生在那里，他有点拉链

00:44:54.950 --> 00:44:59.270
很快，但他选择了

00:44:56.930 --> 00:45:01.510
微服务原型，并说嘿

00:44:59.270 --> 00:45:03.560
给我一个藏匿处或给我一个git repo 

00:45:01.510 --> 00:45:05.780
当他单击生成按钮时

00:45:03.560 --> 00:45:06.200
这次不只是提供拉链

00:45:05.780 --> 00:45:09.080
文件

00:45:06.200 --> 00:45:11.690
它也初始化得到它叫出来

00:45:09.080 --> 00:45:14.000
 github创建了一个新的仓库检查

00:45:11.690 --> 00:45:17.840
全新代码进入创建的仓库

00:45:14.000 --> 00:45:20.450
一个Travis CI文件，然后因为他

00:45:17.840 --> 00:45:22.280
 Travis org和他的组织之间的同步

00:45:20.450 --> 00:45:25.670
获取回购

00:45:22.280 --> 00:45:27.470
 Travis org看到了这个新仓库

00:45:25.670 --> 00:45:28.730
向前说哦，我知道你想

00:45:27.470 --> 00:45:29.720
建立我要去开始

00:45:28.730 --> 00:45:31.430
您的构建虽然很好

00:45:29.720 --> 00:45:33.350
从技术上来讲，你实际上

00:45:31.430 --> 00:45:36.890
告诉它运行构建权或否

00:45:33.350 --> 00:45:38.810
因此Travis GML的存在

00:45:36.890 --> 00:45:40.700
 git push触发了实际

00:45:38.810 --> 00:45:41.870
构建，因此必须在步骤中完成

00:45:40.700 --> 00:45:43.070
正确的方式我不得不

00:45:41.870 --> 00:45:46.280
确保我创建了

00:45:43.070 --> 00:45:47.870
在Travis上同步了

00:45:46.280 --> 00:45:51.680
仓库，即使没有代码

00:45:47.870 --> 00:45:54.890
在那里触发它说可以，如果在

00:45:51.680 --> 00:46:00.400
签入Travis Hamel文件，然后

00:45:54.890 --> 00:46:04.790
做我有这个的步骤

00:46:00.400 --> 00:46:08.000
在这方面可能非常容易

00:46:04.790 --> 00:46:13.700
因为它正在使用配置文件

00:46:08.000 --> 00:46:15.050
定义构建步骤其他工具

00:46:13.700 --> 00:46:16.910
可能会持续集成

00:46:15.050 --> 00:46:19.610
可能会使您工作更难

00:46:16.910 --> 00:46:21.530
在这方面，所以如果你必须

00:46:19.610 --> 00:46:24.560
使用REST API能够

00:46:21.530 --> 00:46:26.240
创建一个模板并设置您的构建

00:46:24.560 --> 00:46:28.010
步骤将要多一点

00:46:26.240 --> 00:46:31.910
这就是为什么我喜欢这样的工作

00:46:28.010 --> 00:46:34.550
具有构建管道文件的方法

00:46:31.910 --> 00:46:36.140
在项目本身中定义的

00:46:34.550 --> 00:46:39.170
项目的一部分

00:46:36.140 --> 00:46:41.900
你知道发生了什么变化，好像有人

00:46:39.170 --> 00:46:43.670
改变了这个的构建行为

00:46:41.900 --> 00:46:44.830
这种方法会切实有效吗

00:46:43.670 --> 00:46:49.490
像这样

00:46:44.830 --> 00:46:51.500
重击CI或很容易得到实验室

00:46:49.490 --> 00:46:57.770
只会转移给那些人

00:46:51.500 --> 00:46:58.790
 CI CDD工具，正如我所说的那样

00:46:57.770 --> 00:47:02.660
实际上要花一点时间，因为

00:46:58.790 --> 00:47:05.480
是免费的，是免费的服务，但是在

00:47:02.660 --> 00:47:08.030
这种情况下我们确实得到了构建

00:47:05.480 --> 00:47:12.500
是成功的，所以一切

00:47:08.030 --> 00:47:14.740
工作顺利，然后回到

00:47:12.500 --> 00:47:14.740
滑梯

00:47:23.840 --> 00:47:28.610
好吧，我们已经展示了一堆

00:47:26.720 --> 00:47:30.830
的集成这里有

00:47:28.610 --> 00:47:33.350
您可以做的更多事情

00:47:30.830 --> 00:47:35.150
关于添加Docker支持的功能

00:47:33.350 --> 00:47:37.070
如果您愿意的话，如果您的团队是

00:47:35.150 --> 00:47:38.480
对构建Docker映像感兴趣

00:47:37.070 --> 00:47:40.850
您可以将其正确构建

00:47:38.480 --> 00:47:43.220
通过此过程，您可以添加

00:47:40.850 --> 00:47:45.350
另一个应用程序生命周期管理

00:47:43.220 --> 00:47:48.500
维基或

00:47:45.350 --> 00:47:50.600
问题跟踪或类似的事情，以及

00:47:48.500 --> 00:47:54.280
那你也可以做些什么

00:47:50.600 --> 00:47:56.750
完成整个周期是问团队

00:47:54.280 --> 00:47:58.940
他们不仅想要什么依赖关系，而且

00:47:56.750 --> 00:48:00.350
做他们想从环境中做什么

00:47:58.940 --> 00:48:02.600
角度，你知道他们想要一个

00:48:00.350 --> 00:48:04.250
他们想要像消息一样的数据库吗

00:48:02.600 --> 00:48:06.080
像兔子这样的服务

00:48:04.250 --> 00:48:08.960
然后你可以打电话给

00:48:06.080 --> 00:48:10.730
 Cloud Foundry并说旋转

00:48:08.960 --> 00:48:13.100
应用程序服务器数据库和所有

00:48:10.730 --> 00:48:15.680
这些东西，你也可以旋转起来

00:48:13.100 --> 00:48:17.300
他们的开发阶段环境

00:48:15.680 --> 00:48:18.950
然后在那个时候真的让

00:48:17.300 --> 00:48:21.110
团队开始业务

00:48:18.950 --> 00:48:22.820
功能马上就可以了

00:48:21.110 --> 00:48:25.820
生产和演示业务

00:48:22.820 --> 00:48:28.370
如果您还记得第一次冲刺

00:48:25.820 --> 00:48:30.380
围绕的演示

00:48:28.370 --> 00:48:32.600
我认为这种代码圈

00:48:30.380 --> 00:48:34.460
就像那个圆圈的起源

00:48:32.600 --> 00:48:37.100
代码是，这就是您得到您的方式

00:48:34.460 --> 00:48:39.410
编码到能够

00:48:37.100 --> 00:48:41.990
经过那些周期，这是

00:48:39.410 --> 00:48:44.600
您的代码的起源故事可以这么说

00:48:41.990 --> 00:48:46.220
对对对，供参考

00:48:44.600 --> 00:48:47.420
我们提到的移动架构

00:48:46.220 --> 00:48:50.660
将是另一个可能的参考

00:48:47.420 --> 00:48:53.000
就像富网站一样的架构

00:48:50.660 --> 00:48:56.900
应用程序可以有一个角度

00:48:53.000 --> 00:48:58.310
基于应用程序或做出反应，您喜欢

00:48:56.900 --> 00:48:59.840
我说你可以烤你的

00:48:58.310 --> 00:49:01.670
您可以烘烤的标准外观

00:48:59.840 --> 00:49:03.350
和您的标准监控

00:49:01.670 --> 00:49:06.280
您希望您的团队提供的解决方案

00:49:03.350 --> 00:49:06.280
用所有这些东西

00:49:08.690 --> 00:49:13.309
所以这里是链接

00:49:11.510 --> 00:49:15.079
演讲时长

00:49:13.309 --> 00:49:17.599
你在看所有的指示

00:49:15.079 --> 00:49:19.369
因为那就是他

00:49:17.599 --> 00:49:21.410
看那里，然后代码

00:49:19.369 --> 00:49:22.910
基本上是分叉的链接

00:49:21.410 --> 00:49:25.010
具有所有分支的初始值设定项

00:49:22.910 --> 00:49:27.079
展示我们在这里演示的所有内容

00:49:25.010 --> 00:49:29.119
今天，您可以看一下

00:49:27.079 --> 00:49:31.520
那么最后一个链接就是一般

00:49:29.119 --> 00:49:35.000
所有这些仓库都是的github项目

00:49:31.520 --> 00:49:36.650
在我知道我

00:49:35.000 --> 00:49:38.720
很明显，这是缺少的一步

00:49:36.650 --> 00:49:40.220
从我开始的项目

00:49:38.720 --> 00:49:42.410
我只是没时间去做的文件

00:49:40.220 --> 00:49:44.930
完成它，但目标是去

00:49:42.410 --> 00:49:47.059
从Travis推向关键网络

00:49:44.930 --> 00:49:49.880
服务，实际上在Travis内部

00:49:47.059 --> 00:49:52.339
大约是五六行

00:49:49.880 --> 00:49:54.140
特拉维斯·坎贝尔（Travis Campbell）就是这样做的

00:49:52.339 --> 00:49:56.720
拿什么不会太难

00:49:54.140 --> 00:49:58.700
已经在那里，继续前进，看看一部分

00:49:56.720 --> 00:50:02.420
我认为如果你那么

00:49:58.700 --> 00:50:04.130
连同清单一起包括

00:50:02.420 --> 00:50:06.770
您是生成过程的一部分

00:50:04.130 --> 00:50:09.440
真的很接近看到结束

00:50:06.770 --> 00:50:11.240
从初始化器到生产结束

00:50:09.440 --> 00:50:12.680
生产和可用，您必须

00:50:11.240 --> 00:50:14.900
证明您的用户是

00:50:12.680 --> 00:50:16.460
我们对此感到非常兴奋

00:50:14.900 --> 00:50:18.140
概念，因为它不仅获得了

00:50:16.460 --> 00:50:19.700
团队起步很快，但是因为他们

00:50:18.140 --> 00:50:20.990
以非常标准的方式提供

00:50:19.700 --> 00:50:23.000
已经看到那里有很多

00:50:20.990 --> 00:50:24.740
您可以开始添加的其他内容

00:50:23.000 --> 00:50:26.240
因此，这只是一种

00:50:24.740 --> 00:50:30.500
抓东西的表面

00:50:26.240 --> 00:50:35.119
可能打开它来提问

00:50:30.500 --> 00:50:37.460
有什么问题，所以我做到了

00:50:35.119 --> 00:50:39.230
感觉还好

00:50:37.460 --> 00:50:43.480
好吧，有点多

00:50:39.230 --> 00:50:47.170
在50分钟到60分钟内赶上

00:50:43.480 --> 00:50:47.170
好的，谢谢你的光临

00:50:54.099 --> 00:50:56.160
您

