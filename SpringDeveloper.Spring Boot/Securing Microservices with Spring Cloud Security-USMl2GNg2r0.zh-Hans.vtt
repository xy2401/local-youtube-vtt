WEBVTT
Kind: captions
Language: zh-Hans

00:00:08.840 --> 00:00:14.010
谢谢你来我的演讲

00:00:11.580 --> 00:00:15.880
我的Spring Cloud Security服务

00:00:14.010 --> 00:00:18.190
会陈

00:00:15.880 --> 00:00:25.300
请在Twitter上关注我，我不

00:00:18.190 --> 00:00:29.230
有很多追随者510会一点

00:00:25.300 --> 00:00:32.230
关于我的一点我是春季用户，我有

00:00:29.230 --> 00:00:35.230
从 Spring 开始

00:00:32.230 --> 00:00:37.090
我大学毕业后的第一份工作是

00:00:35.230 --> 00:00:39.640
在PHP应用程序中进行架构设计

00:00:37.090 --> 00:00:42.399
 Spring ，我一直在用 Spring 

00:00:39.640 --> 00:00:45.399
尝试并经过许多

00:00:42.399 --> 00:00:47.559
运气我现在为枢纽工作

00:00:45.399 --> 00:00:49.660
因为我一直在与很多

00:00:47.559 --> 00:00:52.210
我整个职业生涯中的杰出人物

00:00:49.660 --> 00:00:54.790
现在为我目前所在的人工作

00:00:52.210 --> 00:00:56.710
与Spring Cloud Services团队合作

00:00:54.790 --> 00:00:58.680
您遵循云原生轨道

00:00:56.710 --> 00:01:02.260
看到那里发生了很多事

00:00:58.680 --> 00:01:06.070
以前我去过顶峰

00:01:02.260 --> 00:01:08.439
基于产品的单点登录

00:01:06.070 --> 00:01:11.979
 Cloud Foundry的顶部，您可怜

00:01:08.439 --> 00:01:14.470
 Cloud Foundry我也做了很多

00:01:11.979 --> 00:01:17.259
承诺向Cloud Foundry提供AAA认证

00:01:14.470 --> 00:01:19.000
多租户，在那之前我是

00:01:17.259 --> 00:01:21.729
为关键的Cloud Foundry移动工作

00:01:19.000 --> 00:01:24.880
服务这是我第二次说话

00:01:21.729 --> 00:01:26.799
在GX春季1/2，您可能已经见过我

00:01:24.880 --> 00:01:29.289
去年谈论作为号角

00:01:26.799 --> 00:01:35.399
 spring boot ，我在多伦多工作

00:01:29.289 --> 00:01:38.649
加拿大，所以我想我必须回顾一下

00:01:35.399 --> 00:01:41.469
微服务是，但我相信你已经

00:01:38.649 --> 00:01:44.619
听到这个重复了很多遍

00:01:41.469 --> 00:01:46.929
以前来自Adrian Cockroft的报价

00:01:44.619 --> 00:01:48.280
 Netflix，他形容他们是

00:01:46.929 --> 00:01:51.850
松散耦合的面向服务

00:01:48.280 --> 00:01:53.799
具有有限上下文的架构

00:01:51.850 --> 00:01:55.030
他的意思是说，松散耦合是

00:01:53.799 --> 00:01:57.490
服务可以独立更新

00:01:55.030 --> 00:02:00.279
以及他所说的边界接触

00:01:57.490 --> 00:02:02.439
是服务负责

00:02:00.279 --> 00:02:04.119
定义明确的业务职能，以及

00:02:02.439 --> 00:02:07.270
不在乎服务

00:02:04.119 --> 00:02:11.170
包围它，所以我读到就像一个

00:02:07.270 --> 00:02:13.860
事情，现在在实践中做好

00:02:11.170 --> 00:02:16.900
微服务架构通常是

00:02:13.860 --> 00:02:20.140
品尝或通过其他方式交流

00:02:16.900 --> 00:02:21.670
开放标准在那里集装箱化

00:02:20.140 --> 00:02:24.220
可独立部署

00:02:21.670 --> 00:02:26.620
可扩展且自给自足

00:02:24.220 --> 00:02:28.990
这意味着它几乎没有

00:02:26.620 --> 00:02:33.850
外部假设

00:02:28.990 --> 00:02:35.530
阿明就是这样，当您搬到

00:02:33.850 --> 00:02:42.180
微服务如何影响

00:02:35.530 --> 00:02:46.380
安全第一，我们将介绍典型的

00:02:42.180 --> 00:02:49.930
用于保护整体的安全设置

00:02:46.380 --> 00:02:52.120
您有一个HTTP请求或HTTP 

00:02:49.930 --> 00:02:55.330
请求进来，我希望一切都顺利

00:02:52.120 --> 00:02:57.820
通过HTTP会影响您的负载均衡器

00:02:55.330 --> 00:03:00.220
现在您的负载均衡器可能会也可能不会

00:02:57.820 --> 00:03:01.930
终止SSL连接，也许是

00:03:00.220 --> 00:03:04.150
使用以下命令启动新的SSL连接

00:03:01.930 --> 00:03:05.560
应用服务器之间的连接

00:03:04.150 --> 00:03:08.470
应用服务器中的负载均衡器

00:03:05.560 --> 00:03:09.640
只是HTTP，但您在自己的内部

00:03:08.470 --> 00:03:13.120
网络，这样很好

00:03:09.640 --> 00:03:14.670
很酷，因此请求会命中您的应用服务器

00:03:13.120 --> 00:03:18.670
可能有一个认证层

00:03:14.670 --> 00:03:20.290
内置到应用程序中的请求

00:03:18.670 --> 00:03:23.590
经过身份验证和授权，然后

00:03:20.290 --> 00:03:25.660
该请求被传递给各种

00:03:23.590 --> 00:03:27.820
您的应用程序中的模块

00:03:25.660 --> 00:03:30.040
可能共享一个数据库

00:03:27.820 --> 00:03:31.930
一组连接池

00:03:30.040 --> 00:03:35.320
访问数据库的凭据

00:03:31.930 --> 00:03:40.660
托管的所有数据功能

00:03:35.320 --> 00:03:43.510
您的组件，所以这是这个

00:03:40.660 --> 00:03:45.820
比保护微服务更容易

00:03:43.510 --> 00:03:49.510
因为您只需要验证

00:03:45.820 --> 00:03:51.820
每个请求一次，因此，如果您

00:03:49.510 --> 00:03:53.530
没有会话，您必须登录

00:03:51.820 --> 00:03:55.540
验证用户凭据获取用户

00:03:53.530 --> 00:03:57.370
角色并启动用户会话（如果您

00:03:55.540 --> 00:03:59.140
做一个会议，那么你只需要

00:03:57.370 --> 00:04:01.720
验证该会话未过期

00:03:59.140 --> 00:04:05.350
但是该身份验证层需要注意

00:04:01.720 --> 00:04:07.330
所有这些对你来说，然后通过

00:04:05.350 --> 00:04:09.880
身份验证层您的请求

00:04:07.330 --> 00:04:13.090
在响应中，整个用户请求

00:04:09.880 --> 00:04:15.280
并在处理过程中响应

00:04:13.090 --> 00:04:17.320
您可以信任Vacations中的方法

00:04:15.280 --> 00:04:19.239
您的代码正在相互影响

00:04:17.320 --> 00:04:24.340
我希望你可以相信它，否则你会

00:04:19.239 --> 00:04:25.570
真的很偏执，所以这个的优点是

00:04:24.340 --> 00:04:27.100
您的攻击服务有限

00:04:25.570 --> 00:04:29.830
实际上只有一种进出方式

00:04:27.100 --> 00:04:33.550
您的应用程序，这很容易

00:04:29.830 --> 00:04:35.170
控制和管理，但这里的缺点是

00:04:33.550 --> 00:04:36.790
该应用程序具有所有

00:04:35.170 --> 00:04:39.040
需要做任何事情的凭证

00:04:36.790 --> 00:04:43.380
想进入数据库，如果可以中断

00:04:39.040 --> 00:04:47.740
进入那个过程，那么你就全部掌握了

00:04:43.380 --> 00:04:50.280
让我们来看一下微服务

00:04:47.740 --> 00:04:53.259
这样的建筑有点

00:04:50.280 --> 00:04:56.530
您已经分解了功能

00:04:53.259 --> 00:04:59.169
进入每个自己的应用程序

00:04:56.530 --> 00:05:00.849
应用程序正在访问数据库

00:04:59.169 --> 00:05:04.800
使用专用于

00:05:00.849 --> 00:05:07.810
那种功能很好

00:05:04.800 --> 00:05:10.569
因为你可以感叹

00:05:07.810 --> 00:05:12.849
最小特权与此很好

00:05:10.569 --> 00:05:15.759
每个组件只能访问

00:05:12.849 --> 00:05:17.889
它需要执行其功能，但

00:05:15.759 --> 00:05:20.530
这很难，因为你有很多

00:05:17.889 --> 00:05:22.360
更大的攻击服务，尤其是针对

00:05:20.530 --> 00:05:24.039
内部威胁，所以有很多

00:05:22.360 --> 00:05:26.319
您能否进入该网络的方法

00:05:24.039 --> 00:05:31.630
有很多方法可以弄乱

00:05:26.319 --> 00:05:33.550
周围，​​你又怎么知道

00:05:31.630 --> 00:05:35.740
其他服务知道谁正在访问

00:05:33.550 --> 00:05:42.280
他们以及其他服务如何信任

00:05:35.740 --> 00:05:45.520
彼此，所以我们将谈论这个

00:05:42.280 --> 00:05:46.659
在这里设置水平

00:05:45.520 --> 00:05:48.580
请求进来打你的负担

00:05:46.659 --> 00:05:50.560
平衡器命中认证

00:05:48.580 --> 00:05:54.219
授权网关，这样您就可以

00:05:50.560 --> 00:05:55.479
唯一目的是

00:05:54.219 --> 00:05:57.039
认证和授权请求

00:05:55.479 --> 00:06:00.940
也许它与用户有联系

00:05:57.039 --> 00:06:04.289
一旦请求被存储，然后存储

00:06:00.940 --> 00:06:07.930
它将向任何服务发送请求

00:06:04.289 --> 00:06:10.719
它需要去，你可以在这里看到

00:06:07.930 --> 00:06:17.680
这些服务中的每一个都没有

00:06:10.719 --> 00:06:19.090
身份验证层完全可以

00:06:17.680 --> 00:06:21.130
通过这种设置

00:06:19.090 --> 00:06:25.000
它称为API网关或主要

00:06:21.130 --> 00:06:27.669
参数安全与公共负载

00:06:25.000 --> 00:06:31.210
平衡器无法将请求发送到应用

00:06:27.669 --> 00:06:33.940
直接让我们回到网络

00:06:31.210 --> 00:06:37.659
安装程序仅允许此负载均衡器执行以下操作： 

00:06:33.940 --> 00:06:40.090
站请求网关，然后与

00:06:37.659 --> 00:06:42.159
每个应用程序都可以进行这样的设置

00:06:40.090 --> 00:06:43.990
相信请求已经确定

00:06:42.159 --> 00:06:48.909
经认证和授权

00:06:43.990 --> 00:06:50.680
网关，因此他们信任所有流量

00:06:48.909 --> 00:06:52.240
他们被假设专业人士接受

00:06:50.680 --> 00:06:54.940
这是网络设置实际上可以

00:06:52.240 --> 00:06:55.800
保证这些假设和应用

00:06:54.940 --> 00:06:57.539
留下来

00:06:55.800 --> 00:06:58.650
较少的安全其无状态，因为

00:06:57.539 --> 00:07:01.740
他们只是假设一切都在

00:06:58.650 --> 00:07:03.979
安全，因此没有其他状态

00:07:01.740 --> 00:07:07.080
只有一种只有一种状态

00:07:03.979 --> 00:07:10.349
不好的是，这没什么

00:07:07.080 --> 00:07:12.270
如果您可以进入内部威胁

00:07:10.349 --> 00:07:18.960
您可以访问的网络

00:07:12.270 --> 00:07:23.009
您想要的应用程序，如果您

00:07:18.960 --> 00:07:28.530
在每个人中建立一个安全层

00:07:23.009 --> 00:07:31.560
应用程序，因此一种方法是

00:07:28.530 --> 00:07:33.349
您只使用HTTP基本所有应用程序

00:07:31.560 --> 00:07:35.789
做认证授权

00:07:33.349 --> 00:07:38.270
自己和基本凭证得到

00:07:35.789 --> 00:07:40.740
与每个请求一起传递

00:07:38.270 --> 00:07:42.690
这里的优点是它是无状态的

00:07:40.740 --> 00:07:44.699
因为您正在验证

00:07:42.690 --> 00:07:46.860
每次都没有时要求

00:07:44.699 --> 00:07:49.169
保持会议，这很容易

00:07:46.860 --> 00:07:52.860
因为它应该是基本的支持

00:07:49.169 --> 00:07:55.860
像免费的开箱即用，但缺点

00:07:52.860 --> 00:07:59.039
这就是您如何存储和

00:07:55.860 --> 00:08:03.090
查找用户凭据以及如何

00:07:59.039 --> 00:08:04.500
也有用户管理授权

00:08:03.090 --> 00:08:08.009
凭证到处传递

00:08:04.500 --> 00:08:10.020
网络和友谊得到处理

00:08:08.009 --> 00:08:11.610
这些用户财务状况，您可以解锁所有

00:08:10.020 --> 00:08:14.310
该用户可以使用的功能

00:08:11.610 --> 00:08:22.800
永远执行直到用户更新

00:08:14.310 --> 00:08:27.599
到目前为止，他们的密码有任何问题都可以

00:08:22.800 --> 00:08:29.759
看起来一切顺利，如果我们

00:08:27.599 --> 00:08:32.760
保留所有相同的东西，但使用了

00:08:29.759 --> 00:08:34.560
集中认证存储或

00:08:32.760 --> 00:08:40.529
也许只是续集数据库，或者

00:08:34.560 --> 00:08:42.240
这样的事情，所以我们仍然有

00:08:40.529 --> 00:08:44.329
所有应用程序要做的基本身份验证

00:08:42.240 --> 00:08:46.170
认证授权本身

00:08:44.329 --> 00:08:48.180
凭证根据

00:08:46.170 --> 00:08:51.870
中央数据库，这很好，因为您

00:08:48.180 --> 00:08:54.690
有一个中央用户存储一个来源

00:08:51.870 --> 00:08:57.570
事实，它仍然是无状态的，但是

00:08:54.690 --> 00:08:59.339
一年的DB遭受打击

00:08:57.570 --> 00:09:00.839
问题可能是瓶颈， 

00:08:59.339 --> 00:09:03.570
现在您的查找逻辑必须是

00:09:00.839 --> 00:09:04.860
在所有地方都实施相同的处理

00:09:03.570 --> 00:09:06.149
被传递的用户凭证

00:09:04.860 --> 00:09:06.670
到处都是，它可以

00:09:06.149 --> 00:09:11.890
保持锁定

00:09:06.670 --> 00:09:14.050
所有功能都很好，如果我们使用

00:09:11.890 --> 00:09:16.090
会议保持所有相同的东西，但

00:09:14.050 --> 00:09:19.450
每个应用都可以与之保持会话

00:09:16.090 --> 00:09:21.400
缓解关闭的客户端设备

00:09:19.450 --> 00:09:24.760
数据库成为瓶颈，因为该数据库

00:09:21.400 --> 00:09:26.680
每个会话仅被击中一次，但是

00:09:24.760 --> 00:09:28.510
很难管理所有的会议

00:09:26.680 --> 00:09:31.410
每个人都有一个单独的会话

00:09:28.510 --> 00:09:34.000
您没有单点登录的应用程序

00:09:31.410 --> 00:09:36.130
您仍然有dbl查找逻辑， 

00:09:34.000 --> 00:09:37.480
必须在任何地方实施，您

00:09:36.130 --> 00:09:41.890
仍然有用户凭证通过

00:09:37.480 --> 00:09:45.760
到处都可以，API怎么样

00:09:41.890 --> 00:09:48.310
令牌，所以忘记所有HTTP 

00:09:45.760 --> 00:09:49.540
基本的东西，相反，你有一个

00:09:48.310 --> 00:09:51.720
用户名和密码

00:09:49.540 --> 00:09:56.260
在中央交换令牌

00:09:51.720 --> 00:09:59.440
授权服务器操作可以获取此信息

00:09:56.260 --> 00:10:01.600
标记请求，然后验证

00:09:59.440 --> 00:10:04.810
通过回拨令牌来

00:10:01.600 --> 00:10:06.670
授权服务器和专业人士在这里

00:10:04.810 --> 00:10:08.440
是应用程序永远不会看到用户

00:10:06.670 --> 00:10:09.880
财务唯一看到用户的东西

00:10:08.440 --> 00:10:13.060
凭据是授权服务器

00:10:09.880 --> 00:10:16.150
获得用户凭证和交换

00:10:13.060 --> 00:10:18.550
他们为令牌，但这里的缺点是

00:10:16.150 --> 00:10:20.710
授权服务器成为

00:10:18.550 --> 00:10:22.990
瓶颈，因为每个请求

00:10:20.710 --> 00:10:25.240
结果每一个微请求

00:10:22.990 --> 00:10:27.820
服务在另一个接收结果

00:10:25.240 --> 00:10:32.530
请求验证服务器进行验证

00:10:27.820 --> 00:10:35.590
令牌，如果您只是滚动

00:10:32.530 --> 00:10:39.070
您自己的API令牌层，您可能不会

00:10:35.590 --> 00:10:41.050
建立授权

00:10:39.070 --> 00:10:42.910
组件，因此令牌不提供任何内容

00:10:41.050 --> 00:10:45.300
与用户访问类似的东西

00:10:42.910 --> 00:10:45.300
证书

00:10:45.870 --> 00:10:52.630
好的，萨姆尔萨姆尔很好

00:10:48.940 --> 00:10:55.000
身份提供商中的标准

00:10:52.630 --> 00:10:58.030
为应用提供签名决定

00:10:55.000 --> 00:11:01.750
所以签名的断言是

00:10:58.030 --> 00:11:04.330
它基本上是键和值的集合

00:11:01.750 --> 00:11:06.970
但您可以但已签名，因此您可以

00:11:04.330 --> 00:11:10.450
验证此信息来自

00:11:06.970 --> 00:11:13.030
受信任的来源和应用程序可以信任这些

00:11:10.450 --> 00:11:15.250
断言并自己验证

00:11:13.030 --> 00:11:17.830
这里的优点是你有一个

00:11:15.250 --> 00:11:19.899
标准信任模型，但缺点是

00:11:17.830 --> 00:11:24.380
 samwell基于xml的

00:11:19.899 --> 00:11:27.620
 xml很大，而且让很多人感到恐惧

00:11:24.380 --> 00:11:30.680
开发人员，这也很困难

00:11:27.620 --> 00:11:33.470
非浏览器客户参与

00:11:30.680 --> 00:11:37.430
在sam'l中有一个sam'l 

00:11:33.470 --> 00:11:43.759
叫做ECP，但我认为这不是非常

00:11:37.430 --> 00:11:46.579
很好的支持，所以我提出了很多

00:11:43.759 --> 00:11:48.370
共同关心的是

00:11:46.579 --> 00:11:51.290
中央用户商店的瓶颈

00:11:48.370 --> 00:11:53.870
您需要单次登录

00:11:51.290 --> 00:11:56.180
当然你想保留东西

00:11:53.870 --> 00:11:59.810
尽可能无国籍，尤其是你

00:11:56.180 --> 00:12:04.220
获得用户后您的后端服务

00:11:59.810 --> 00:12:07.430
您的凭证游戏可能会

00:12:04.220 --> 00:12:09.350
需要细粒度的授权，您

00:12:07.430 --> 00:12:15.639
希望与非浏览器互操作

00:12:09.350 --> 00:12:15.639
客户，因此输入一个开放的ID连接

00:12:16.899 --> 00:12:22.100
什么是oauth2，这是委派的

00:12:19.790 --> 00:12:24.529
授权协议这是一个协议

00:12:22.100 --> 00:12:27.860
用于传达授权决定

00:12:24.529 --> 00:12:30.170
通过令牌，这是

00:12:27.860 --> 00:12:32.630
通过for来获取令牌

00:12:30.170 --> 00:12:34.970
授予类型或授予类型

00:12:32.630 --> 00:12:37.790
授权码，您将使用它

00:12:34.970 --> 00:12:39.829
如果您有一个Web应用程序， 

00:12:37.790 --> 00:12:43.579
也是最安全的授权类型

00:12:39.829 --> 00:12:45.050
然后您会明白为什么

00:12:43.579 --> 00:12:46.850
也有资源所有者密码

00:12:45.050 --> 00:12:48.769
授予，以便您可以在有

00:12:46.850 --> 00:12:50.569
 Web应用程序，但假设您要

00:12:48.769 --> 00:12:51.709
托管自己的登录页面，而不是

00:12:50.569 --> 00:12:54.290
使用登录页面上的

00:12:51.709 --> 00:12:57.529
授权服务器，或者说您

00:12:54.290 --> 00:13:02.269
是一些非浏览器客户端，您

00:12:57.529 --> 00:13:04.130
不想参加-这是

00:13:02.269 --> 00:13:05.930
隐式授予隐式授予是

00:13:04.130 --> 00:13:08.630
如果您只有一页，则使用

00:13:05.930 --> 00:13:12.560
 JavaScript应用程序，因此它是特定于浏览器的

00:13:08.630 --> 00:13:16.029
但是如果你只有一页

00:13:12.560 --> 00:13:18.790
 JavaScript应用程序，实际上没有后端

00:13:16.029 --> 00:13:22.699
和客户端凭据授予被使用

00:13:18.790 --> 00:13:24.740
当客户端或机器正在运行时

00:13:22.699 --> 00:13:25.759
本身，所以它不会在

00:13:24.740 --> 00:13:28.010
代表用户

00:13:25.759 --> 00:13:31.560
因此对于可能

00:13:28.010 --> 00:13:34.510
异步发生就是这样

00:13:31.560 --> 00:13:36.250
所以你有这四种补助类型

00:13:34.510 --> 00:13:39.640
涵盖了几乎所有情况

00:13:36.250 --> 00:13:42.600
您可以想到并使用oauth2 

00:13:39.640 --> 00:13:45.310
用户和客户端是独立的实体

00:13:42.600 --> 00:13:47.440
这样你就可以说像我

00:13:45.310 --> 00:13:54.430
正在授权此应用来形成这些

00:13:47.440 --> 00:13:57.760
代表我采取行动，但o2不是

00:13:54.430 --> 00:14:00.760
身份验证它没有说明如何

00:13:57.760 --> 00:14:02.649
用户通过身份验证时会说

00:14:00.760 --> 00:14:05.560
为了获得令牌的用户

00:14:02.649 --> 00:14:08.320
必须经过认证，但同时

00:14:05.560 --> 00:14:10.600
没有说令牌是如何验证的

00:14:08.320 --> 00:14:11.890
它说令牌应该做什么

00:14:10.600 --> 00:14:15.010
看起来还是应该包含

00:14:11.890 --> 00:14:22.630
您可以阅读更多有关的任何信息

00:14:15.010 --> 00:14:25.630
这个和奥拉夫网，所以在什么

00:14:22.630 --> 00:14:27.910
打开ID Connect好打开ID Connect是

00:14:25.630 --> 00:14:31.570
委托认证协议

00:14:27.910 --> 00:14:34.570
建立在OAuth 2之上

00:14:31.570 --> 00:14:37.269
协议用户身份通过

00:14:34.570 --> 00:14:40.779
签署代表JSON Web的JWT 

00:14:37.269 --> 00:14:45.220
令牌，总之您可以调用它

00:14:40.779 --> 00:14:47.949
记下它为

00:14:45.220 --> 00:14:50.019
获取ID令牌，您可以

00:14:47.949 --> 00:14:53.140
对于oauth2授予​​相同

00:14:50.019 --> 00:14:55.240
类型，还有一种标准的方法

00:14:53.140 --> 00:14:56.709
验证ID令牌的过程

00:14:55.240 --> 00:14:58.959
你有点多余的东西

00:14:56.709 --> 00:15:03.370
进入开放ID连接

00:14:58.959 --> 00:15:05.560
规范，它允许您说

00:15:03.370 --> 00:15:07.630
诸如will之类的事情正在授权该应用

00:15:05.560 --> 00:15:10.449
代表他执行动作

00:15:07.630 --> 00:15:14.190
这些令牌传达了两种授权

00:15:10.449 --> 00:15:17.110
我做到了，身份也可以

00:15:14.190 --> 00:15:18.820
如果应用程序需要查看此内容

00:15:17.110 --> 00:15:21.880
人的电子邮件地址中有一个

00:15:18.820 --> 00:15:23.649
传达有关以下内容的标准方式

00:15:21.880 --> 00:15:26.260
一个人的身份电子邮件地址电话

00:15:23.649 --> 00:15:28.620
各种邮寄地址

00:15:26.260 --> 00:15:28.620
像那样的东西

00:15:30.110 --> 00:15:35.209
开放ID连接不是骨化

00:15:32.750 --> 00:15:36.740
虽然它仍然没有说用户如何

00:15:35.209 --> 00:15:38.510
要进行身份验证，但这是一个

00:15:36.740 --> 00:15:40.670
好东西，因为有很多方法

00:15:38.510 --> 00:15:43.220
要验证用户身份，您可以滚动

00:15:40.670 --> 00:15:46.430
自己的内部数据库，您可以将其连接

00:15:43.220 --> 00:15:48.500
通过sam'转到另一个身份提供者

00:15:46.430 --> 00:15:50.810
或LDAP，您可以执行以下操作

00:15:48.500 --> 00:15:53.990
多因素身份验证

00:15:50.810 --> 00:15:56.870
可以并打开ID Connect，但不能

00:15:53.990 --> 00:16:05.390
规格确实指定了吗

00:15:56.870 --> 00:16:08.269
到目前为止有任何问题，不好，我要去

00:16:05.390 --> 00:16:10.700
浏览授权码

00:16:08.269 --> 00:16:13.000
流程我知道有四个不同的流程

00:16:10.700 --> 00:16:16.940
但这是你可能会遇到的那个

00:16:13.000 --> 00:16:20.980
看到最多，也是最多

00:16:16.940 --> 00:16:24.800
复杂，但这是最安全的

00:16:20.980 --> 00:16:30.050
在这个小例子中，我们有这些

00:16:24.800 --> 00:16:33.410
四个演员用户，两者都说

00:16:30.050 --> 00:16:36.350
资源所有者此处的Web应用程序，以及

00:16:33.410 --> 00:16:39.470
很多话是客户端REST 

00:16:36.350 --> 00:16:41.420
这里的API也称为

00:16:39.470 --> 00:16:44.089
资源服务器和授权

00:16:41.420 --> 00:16:46.040
服务器和Oban ID Connect说话是

00:16:44.089 --> 00:16:48.770
称为开放ID连接提供者，因此

00:16:46.040 --> 00:16:53.690
您会看到这些阶梯术语

00:16:48.770 --> 00:16:57.260
在文档中使用了很多

00:16:53.690 --> 00:17:00.020
这里的设置就是这种情况

00:16:57.260 --> 00:17:02.029
在我开始之前，没有用户

00:17:00.020 --> 00:17:05.089
没有与授权服务器的会话

00:17:02.029 --> 00:17:07.189
或我所使用的网络应用和用例

00:17:05.089 --> 00:17:10.069
要演示是用户想要的

00:17:07.189 --> 00:17:16.400
使用以下命令在REST API上下订单

00:17:10.069 --> 00:17:17.870
网络应用程序，因此第一步用户可以访问

00:17:16.400 --> 00:17:22.939
网络应用程序，并且没有

00:17:17.870 --> 00:17:24.949
会话，因此网络应用会显示“注意” 

00:17:22.939 --> 00:17:26.630
您未通过身份验证，并且要进行

00:17:24.949 --> 00:17:28.850
将用户重定向到授权

00:17:26.630 --> 00:17:31.160
身份验证服务器上的端点重定向

00:17:28.850 --> 00:17:33.620
 URL包含范围的开放ID和

00:17:31.160 --> 00:17:37.460
命令点我的范围就像权限

00:17:33.620 --> 00:17:39.740
或角色以及这些范围何时结束

00:17:37.460 --> 00:17:42.760
令牌表明该用户可以执行的令牌

00:17:39.740 --> 00:17:42.760
这些特别的事情

00:17:45.429 --> 00:17:51.350
好的，因此身份验证服务器会收到请求

00:17:49.970 --> 00:17:52.909
授权终点，但随后

00:17:51.350 --> 00:17:56.320
将用户重定向回其登录名

00:17:52.909 --> 00:17:56.320
页面，因为用户未登录

00:17:56.799 --> 00:18:02.600
因此用户登录并开始会话

00:18:00.260 --> 00:18:04.039
与授权服务器，现在是

00:18:02.600 --> 00:18:05.299
重定向回授权

00:18:04.039 --> 00:18:07.010
终结点授权服务器

00:18:05.299 --> 00:18:08.539
记住用户正在尝试做什么

00:18:07.010 --> 00:18:12.049
首先，他们不得不

00:18:08.539 --> 00:18:13.700
登录，所以现在您看到一个页面，您

00:18:12.049 --> 00:18:18.049
可能在此页面上看到很多地方

00:18:13.700 --> 00:18:20.960
您必须授权网络应用才能执行

00:18:18.049 --> 00:18:25.720
事物代表他们，所以用户

00:18:20.960 --> 00:18:27.950
看到一个页面，页面问起来更容易

00:18:25.720 --> 00:18:29.929
允许网络应用访问其

00:18:27.950 --> 00:18:35.480
识别并管理他们的订单

00:18:29.929 --> 00:18:39.559
他们代表，所以用户说是

00:18:35.480 --> 00:18:41.480
好，点击提交和用户

00:18:39.559 --> 00:18:43.100
授权访问，因此授权

00:18:41.480 --> 00:18:45.049
服务器将用户重定向回

00:18:43.100 --> 00:18:50.809
具有一次性代码和

00:18:45.049 --> 00:18:52.429
网页重定向查询参数

00:18:50.809 --> 00:18:54.350
应用收到此一次性代码，因此

00:18:52.429 --> 00:18:56.240
我在这里显示这条虚线

00:18:54.350 --> 00:18:57.919
用户有点等待响应

00:18:56.240 --> 00:19:00.980
但网络应用程序正在做一些事情

00:18:57.919 --> 00:19:03.080
网络应用收到的背景

00:19:00.980 --> 00:19:06.770
一次教练和查询参数

00:19:03.080 --> 00:19:08.720
然后去打授权

00:19:06.770 --> 00:19:12.200
与此时间代码中的服务器

00:19:08.720 --> 00:19:16.549
返回，然后警官v验证

00:19:12.200 --> 00:19:19.039
代码，因为它现在才生成它

00:19:16.549 --> 00:19:20.990
离机服务器返回响应

00:19:19.039 --> 00:19:22.159
响应的Web服务器

00:19:20.990 --> 00:19:24.289
访问令牌

00:19:22.159 --> 00:19:28.190
看起来像是随机字符串

00:19:24.289 --> 00:19:31.730
和分配给JWT的ID令牌

00:19:28.190 --> 00:19:35.570
因此，我将介绍一下JWT的外观

00:19:31.730 --> 00:19:40.010
看起来像在演示中，所以现在网络

00:19:35.570 --> 00:19:42.440
应用可以验证ID令牌是否消耗了其

00:19:40.010 --> 00:19:44.779
内容并开始验证

00:19:42.440 --> 00:19:47.059
会话，并将访问令牌保存在

00:19:44.779 --> 00:19:49.490
会话，因此现在用户已通过身份验证

00:19:47.059 --> 00:19:52.000
与认证服务器用户进行身份验证

00:19:49.490 --> 00:19:52.000
使用网络应用

00:19:52.520 --> 00:19:57.260
 webapp现在将控制权交还给

00:19:54.809 --> 00:20:00.240
用户并以订单形式答复

00:19:57.260 --> 00:20:03.240
现在我要过去了

00:20:00.240 --> 00:20:04.760
所有用户都登录了，这如何影响

00:20:03.240 --> 00:20:07.830
资源服务器机房回到这里

00:20:04.760 --> 00:20:09.960
授权码流程已完成，但

00:20:07.830 --> 00:20:11.850
用户仍然需要实际执行

00:20:09.960 --> 00:20:13.799
在这个应用程序上的东西，所以

00:20:11.850 --> 00:20:19.470
用户填写并提交订单

00:20:13.799 --> 00:20:21.780
然后网络应用将订单提交给

00:20:19.470 --> 00:20:24.780
使用访问令牌的REST API 

00:20:21.780 --> 00:20:26.820
存储在会话中时记得

00:20:24.780 --> 00:20:29.039
授权服务器响应了网络

00:20:26.820 --> 00:20:32.480
应用程序启动经过身份验证的会话， 

00:20:29.039 --> 00:20:32.480
在该会话中保存访问令牌

00:20:33.500 --> 00:20:39.450
并且添加该访问令牌是

00:20:36.690 --> 00:20:43.140
存在于对REST API的请求中

00:20:39.450 --> 00:20:46.020
在授权标头中，因此REST 

00:20:43.140 --> 00:20:47.070
 API需要验证此令牌

00:20:46.020 --> 00:20:48.900
将令牌发送回

00:20:47.070 --> 00:20:53.220
授权服务令牌验证

00:20:48.900 --> 00:20:55.679
终结点所有服务都可以令牌

00:20:53.220 --> 00:20:57.960
这些是令牌的权限

00:20:55.679 --> 00:21:02.669
授予，以便REST API可以看到

00:20:57.960 --> 00:21:08.130
该请求被授权管理

00:21:02.669 --> 00:21:11.220
订购，但现在使用REST API 

00:21:08.130 --> 00:21:14.640
保存订单要获得更多

00:21:11.220 --> 00:21:16.500
说说有关用户的信息

00:21:14.640 --> 00:21:19.620
需要获取用户的地址或电话

00:21:16.500 --> 00:21:23.309
号，此信息不在

00:21:19.620 --> 00:21:24.659
来自网络应用的请求，因此它可以

00:21:23.309 --> 00:21:26.190
再次向

00:21:24.659 --> 00:21:28.350
授权服务器使用相同的

00:21:26.190 --> 00:21:30.090
令牌向用户发出请求

00:21:28.350 --> 00:21:31.830
信息端点用户信息端点是

00:21:30.090 --> 00:21:35.580
开放ID Connect中的标准端点

00:21:31.830 --> 00:21:39.059
响应是用户信息

00:21:35.580 --> 00:21:40.830
基本上突然关闭服务器

00:21:39.059 --> 00:21:43.080
响应该信息，现在

00:21:40.830 --> 00:21:44.789
 REST API可以保存订单

00:21:43.080 --> 00:21:48.990
填满所有领域

00:21:44.789 --> 00:21:52.770
最后，控制权现在交还给

00:21:48.990 --> 00:21:54.539
用户，这就是资源服务器的方式

00:21:52.770 --> 00:21:57.720
现在消耗令牌

00:21:54.539 --> 00:22:00.480
假设有另一个网站

00:21:57.720 --> 00:22:01.970
应用，并且用户希望使用Web应用来

00:22:00.480 --> 00:22:06.440
跟踪他们的订单

00:22:01.970 --> 00:22:08.900
用户未通过身份验证

00:22:06.440 --> 00:22:10.850
这在网络上是一样的

00:22:08.900 --> 00:22:14.210
应用将用户重定向回

00:22:10.850 --> 00:22:15.890
办公服务器授权端点，但

00:22:14.210 --> 00:22:18.560
用户已经通过身份验证

00:22:15.890 --> 00:22:20.780
这个家伙会议仍然活着，所以

00:22:18.560 --> 00:22:23.030
用户，因此授权服务器

00:22:20.780 --> 00:22:24.230
响应授权请求

00:22:23.030 --> 00:22:25.760
另一个页面询问用户

00:22:24.230 --> 00:22:26.990
允许网络应用访问其

00:22:25.760 --> 00:22:31.040
识别并管理他们的订单

00:22:26.990 --> 00:22:36.560
代表，流程继续，所以

00:22:31.040 --> 00:22:39.020
很多跳房子，这就是为什么我们

00:22:36.560 --> 00:22:42.140
具有spring-cloud-security性，因此

00:22:39.020 --> 00:22:44.930
spring-cloud-security单身

00:22:42.140 --> 00:22:47.300
使用OAuth 2和Open ID Connect登录

00:22:44.930 --> 00:22:50.000
服务器，您可以使用

00:22:47.300 --> 00:22:52.760
单个注释和一些配置

00:22:50.000 --> 00:22:55.160
您还可以保护资源服务器

00:22:52.760 --> 00:22:58.460
与令牌也与单个

00:22:55.160 --> 00:22:59.810
注释和一些配置，它也

00:22:58.460 --> 00:23:02.030
使您能够中继您的

00:22:59.810 --> 00:23:04.610
启用单点登录之间的令牌

00:23:02.030 --> 00:23:06.140
 Web应用程序和资源服务器及其

00:23:04.610 --> 00:23:09.200
通过自动配置为您提供

00:23:06.140 --> 00:23:12.170
休息模板，这样整个

00:23:09.200 --> 00:23:19.550
这种情况可以让您完成所有操作

00:23:12.170 --> 00:23:21.770
很容易有一个警告

00:23:19.550 --> 00:23:26.360
我的意思是打开ID连接它

00:23:21.770 --> 00:23:28.580
最近成为标准，因为

00:23:26.360 --> 00:23:31.070
 Spring 的安全性或 Spring 

00:23:28.580 --> 00:23:34.160
安全性OAuth 2实际上没有

00:23:31.070 --> 00:23:37.850
消耗Open ID Connect令牌

00:23:34.160 --> 00:23:39.530
它直接支持那些

00:23:37.850 --> 00:23:44.440
它确实支持用户信息端点

00:23:39.530 --> 00:23:46.760
因此，如果您的应用程序需要获取

00:23:44.440 --> 00:23:48.470
身份信息获得更多身份

00:23:46.760 --> 00:23:50.360
信息可以通过

00:23:48.470 --> 00:23:55.580
用户信息端点，但不会

00:23:50.360 --> 00:23:58.220
使用ID令牌，但是如果

00:23:55.580 --> 00:24:00.560
访问令牌是包含身份的JWT 

00:23:58.220 --> 00:24:03.310
声称它可以消耗所有

00:24:00.560 --> 00:24:03.310
一枪

00:24:05.080 --> 00:24:10.780
但是我不是说在哪里买票

00:24:07.630 --> 00:24:13.660
我们会选择好的，这就是

00:24:10.780 --> 00:24:15.940
规范说访问令牌是凭证

00:24:13.660 --> 00:24:18.610
用于访问受保护的资源，以及

00:24:15.940 --> 00:24:20.470
访问令牌是代表

00:24:18.610 --> 00:24:22.540
授权给客户

00:24:20.470 --> 00:24:24.490
字符串通常对客户端不透明

00:24:22.540 --> 00:24:27.160
所以他们建议字符串

00:24:24.490 --> 00:24:29.350
现在可能只是一些乱码

00:24:27.160 --> 00:24:31.510
客户不明白，但是

00:24:29.350 --> 00:24:34.240
并不是说字符串必须很大

00:24:31.510 --> 00:24:36.400
所有大写字母对客户都是不透明的

00:24:34.240 --> 00:24:42.340
所以实际上我们可以自由地制作那根弦

00:24:36.400 --> 00:24:46.630
无论我们想要什么，如果访问令牌

00:24:42.340 --> 00:24:48.760
然后携带范围内的信息

00:24:46.630 --> 00:24:52.060
您可以授权请求的令牌

00:24:48.760 --> 00:24:54.100
自我和身份

00:24:52.060 --> 00:24:56.320
在令牌中声明您可以知道谁

00:24:54.100 --> 00:24:57.820
该请求的发起者是，如果

00:24:56.320 --> 00:25:00.100
该令牌是标志，那么你可以

00:24:57.820 --> 00:25:02.560
验证令牌的真实同意

00:25:00.100 --> 00:25:04.990
让自己烦恼，您不必通过

00:25:02.560 --> 00:25:07.650
将关闭令牌返回到关闭服务器

00:25:04.990 --> 00:25:10.390
验证并获得您可以的回应

00:25:07.650 --> 00:25:18.060
自己完成所有操作，以便您的身份验证服务器

00:25:10.390 --> 00:25:18.060
不会成为瓶颈问题

00:25:18.960 --> 00:25:26.250
那么我们如何获得所有这些进入AAA 

00:25:22.970 --> 00:25:28.260
您是什么AAA您是用户

00:25:26.250 --> 00:25:30.380
帐户和授权服务器以及

00:25:28.260 --> 00:25:34.110
它是Cloud Foundry的核心组件

00:25:30.380 --> 00:25:36.720
它的Babel在生产中经过测试

00:25:34.110 --> 00:25:39.870
如果您使用运行点关键的是同一台服务器

00:25:36.720 --> 00:25:42.330
 IO或人员Web服务

00:25:39.870 --> 00:25:44.790
在那里也可以运行

00:25:42.330 --> 00:25:47.790
云工厂部署实际上是

00:25:44.790 --> 00:25:50.370
 Apache 2许可证，因此您可以下载

00:25:47.790 --> 00:25:52.620
战争并免费运行它，您可以看到所有

00:25:50.370 --> 00:25:55.100
 github.com上的源代码斜杠

00:25:52.620 --> 00:25:58.200
 Cloud Foundry大幅降低您AAA 

00:25:55.100 --> 00:26:00.090
它也非常活跃

00:25:58.200 --> 00:26:03.150
这太合规了，几乎

00:26:00.090 --> 00:26:04.950
完全符合ID Connect要求

00:26:03.150 --> 00:26:06.900
我敢肯定会遵守

00:26:04.950 --> 00:26:10.560
很快我知道他们正在努力

00:26:06.900 --> 00:26:12.690
现在有几个问题，但确实

00:26:10.560 --> 00:26:16.380
支持用户信息端点

00:26:12.690 --> 00:26:19.080
多租户和Spring Security 保障

00:26:16.380 --> 00:26:21.180
实际上是基于UA UA排在第一位

00:26:19.080 --> 00:26:23.640
然后允许该代码被拔出

00:26:21.180 --> 00:26:26.340
然后Spring Security OAuth 2是

00:26:23.640 --> 00:26:28.860
从那和 Spring 的云创建

00:26:26.340 --> 00:26:32.130
安全基本上是 spring boot 

00:26:28.860 --> 00:26:34.860
加上Spring Security OAuth 2很棒

00:26:32.130 --> 00:26:36.900
适合UI a，因为您会产生一个

00:26:34.860 --> 00:26:43.920
记下两个作用域的身份

00:26:36.900 --> 00:26:46.620
在访问令牌中，所以所有这些讨论

00:26:43.920 --> 00:26:49.740
关于下巴约翰代表什么

00:26:46.620 --> 00:26:53.820
 JSON Web令牌，它标准化良好

00:26:49.740 --> 00:26:56.910
它成为2015年5月提议的标准

00:26:53.820 --> 00:26:58.950
 jot由标头，有效负载和

00:26:56.910 --> 00:27:03.330
签名标题描述了如何

00:26:58.950 --> 00:27:04.890
签名你好好头说明

00:27:03.330 --> 00:27:08.100
该签名是如何产生的

00:27:04.890 --> 00:27:10.850
使用了算法，并提供了

00:27:08.100 --> 00:27:14.820
验证签名的标准方法

00:27:10.850 --> 00:27:18.900
进行base64编码时非常容易

00:27:14.820 --> 00:27:21.570
传输标题，他们可以

00:27:18.900 --> 00:27:23.940
封装任何声明，以便您可以拥有

00:27:21.570 --> 00:27:26.670
范围标识的东西，但各种

00:27:23.940 --> 00:27:30.060
其他信息，任何你

00:27:26.670 --> 00:27:32.130
真的，您可以将其放入JSON中

00:27:30.060 --> 00:27:36.380
封装在翡翠中

00:27:32.130 --> 00:27:38.880
在Jot有效载荷中，它们已经到期并且

00:27:36.380 --> 00:27:40.169
有了这些，您就可以扩展

00:27:38.880 --> 00:27:42.480
无状态验证和

00:27:40.169 --> 00:27:45.020
授权客户端可以验证令牌

00:27:42.480 --> 00:27:47.880
本身，但需要权衡

00:27:45.020 --> 00:27:50.070
因为你输了令牌

00:27:47.880 --> 00:27:51.750
复制，因此，如果您不进行

00:27:50.070 --> 00:27:54.299
回调到授权服务器

00:27:51.750 --> 00:27:58.530
那么实际上您只需要依靠

00:27:54.299 --> 00:28:00.210
令牌到期以了解该用户是否仍然

00:27:58.530 --> 00:28:07.200
还是那个客户还有很多事要做

00:28:00.210 --> 00:28:10.440
他们在做什么，这应该

00:28:07.200 --> 00:28:13.049
解决我的共同担忧

00:28:10.440 --> 00:28:14.640
前面提到的那里有一个

00:28:13.049 --> 00:28:16.250
中央用户存储中的瓶颈

00:28:14.640 --> 00:28:19.440
不需要它了

00:28:16.250 --> 00:28:21.900
您可以实现单点登录资源

00:28:19.440 --> 00:28:23.520
服务器可以是无状态的，而您不是

00:28:21.900 --> 00:28:25.970
各地传递用户凭证

00:28:23.520 --> 00:28:29.730
您的令牌可以包含的位置

00:28:25.970 --> 00:28:31.980
细粒度的授权，它是

00:28:29.730 --> 00:28:38.490
非浏览器客户端真的很容易

00:28:31.980 --> 00:28:42.539
进入这个好吧，让我们

00:28:38.490 --> 00:28:46.679
如果您愿意，可以看到全部工作

00:28:42.539 --> 00:28:49.380
在github上按照这些步骤进行操作

00:28:46.679 --> 00:28:51.270
我将尝试显示一些

00:28:49.380 --> 00:28:54.150
屏幕上的代码，但如果很难

00:28:51.270 --> 00:28:56.880
阅读然后您可能想要继续

00:28:54.150 --> 00:29:04.049
 github，然后在这里查看仓库

00:28:56.880 --> 00:29:06.299
一切都很好，所以

00:29:04.049 --> 00:29:08.760
我将向您展示的第一个演示是

00:29:06.299 --> 00:29:12.480
单一登录，所以我已经设置了一个应用

00:29:08.760 --> 00:29:16.049
可以看到可以消耗红色打开的ID 

00:29:12.480 --> 00:29:18.570
连接端点，它也可以

00:29:16.049 --> 00:29:21.500
消耗UA a的唯一区别

00:29:18.570 --> 00:29:21.500
正在配置

00:29:42.390 --> 00:29:48.900
所以我已经将应用程序部署到PWS 

00:30:00.570 --> 00:30:03.570
和

00:30:06.500 --> 00:30:25.220
当然，你好吗，这个链接

00:30:20.659 --> 00:30:29.539
这很漂亮会将我转发给

00:30:25.220 --> 00:30:34.690
登录页面，所以现在让我们打开

00:30:29.539 --> 00:30:34.690
我要登录的ID Connect供应商

00:30:44.640 --> 00:30:51.000
现在很酷，我已经授权了

00:30:46.740 --> 00:30:54.740
申请访问凭证或

00:30:51.000 --> 00:30:54.740
访问我的基因

00:30:57.759 --> 00:31:07.480
你在这里看到的是他们的

00:31:02.350 --> 00:31:10.950
 Google使用此令牌的访问令牌

00:31:07.480 --> 00:31:10.950
这很漂亮

00:31:27.490 --> 00:31:30.750
 ID连接提供者

00:31:36.929 --> 00:31:44.029
而且我猜没有追踪到

00:31:46.219 --> 00:31:49.909
但是你能

00:31:52.610 --> 00:32:00.880
我的音频切入切出不是吗

00:31:54.650 --> 00:32:00.880
啊，后面的人你能听见我吗

00:32:03.580 --> 00:32:17.620
好吧，我会大声说

00:32:12.280 --> 00:32:19.720
好的，很酷，是的，让我们回到这里

00:32:17.620 --> 00:32:25.670
做这个

00:32:19.720 --> 00:32:28.040
谢谢马特酷好，所以是的访问

00:32:25.670 --> 00:32:37.310
令牌base64，这很小

00:32:28.040 --> 00:32:42.290
一些信息，现在要关闭

00:32:37.310 --> 00:32:51.110
 Google支持和的单点登录

00:32:42.290 --> 00:33:04.400
你恩，所以我知道我在说

00:32:51.110 --> 00:33:06.560
开源，无论是关键还是关键

00:33:04.400 --> 00:33:07.970
 Cloud Foundry这是关键

00:33:06.560 --> 00:33:18.290
登录，以便将其绑定到

00:33:07.970 --> 00:33:25.370
枢轴单点登录服务启动

00:33:18.290 --> 00:33:28.720
应用程序哦，酷，声音很好，这是这个

00:33:25.370 --> 00:33:38.390
麦克风问题会解决

00:33:28.720 --> 00:33:42.980
很好，谢谢，看起来不错

00:33:38.390 --> 00:33:48.530
我们还活着，所以我要回去

00:33:42.980 --> 00:33:51.520
现在我再次看到这个应用程序

00:33:48.530 --> 00:33:57.770
登录页面托管在此登录页面上

00:33:51.520 --> 00:34:00.830
 PWS，但这是我的登录页面

00:33:57.770 --> 00:34:06.580
关键单身的特定租户

00:34:00.830 --> 00:34:06.580
登录，它将在这里登录

00:34:10.120 --> 00:34:25.010
也许是哦，我忘了做一个

00:34:18.500 --> 00:34:27.260
是的，我实际上没有设置

00:34:25.010 --> 00:34:30.920
内部身份提供者

00:34:27.260 --> 00:34:38.830
只是数据库，所以我要钩上这个

00:34:30.920 --> 00:34:38.830
由同一个人身份提供者负责

00:34:50.380 --> 00:34:57.610
并且您想预览哪个是

00:34:52.820 --> 00:34:57.610
我们提供测试的saml环境

00:35:17.410 --> 00:35:21.030
我的密码是多少

00:35:23.400 --> 00:35:32.160
太好了，我的手机在哪里，所以现在

00:35:30.630 --> 00:35:35.700
我在这里向你展示的很酷的东西是

00:35:32.160 --> 00:35:38.999
如果您连接了开放的ID Connect 

00:35:35.700 --> 00:35:40.920
提供商喜欢萨姆IDP然后

00:35:38.999 --> 00:35:44.450
相同的IDP可以强制执行多因素

00:35:40.920 --> 00:35:44.450
身份验证就是这样

00:35:53.090 --> 00:36:00.170
好的，现在我们看到授权页面

00:35:56.380 --> 00:36:10.880
我是否允许该应用程序访问

00:36:00.170 --> 00:36:12.650
数据，这是我从中获得的用户信息

00:36:10.880 --> 00:36:23.620
使用此令牌的用户信息端点

00:36:12.650 --> 00:36:23.620
但这是乔金，我不会叫它

00:36:46.150 --> 00:36:55.010
好的，所以您可以在此处看到突出显示的内容或

00:36:50.180 --> 00:36:57.079
记记令牌以及标头的外观

00:36:55.010 --> 00:37:06.170
身体和签名看起来像

00:36:57.079 --> 00:37:10.210
由其节奏界定的

00:37:06.170 --> 00:37:17.380
用于生成签名r56和

00:37:10.210 --> 00:37:21.789
这是您拥有令牌ID的有效负载

00:37:17.380 --> 00:37:25.970
主题ID，所以这是唯一的标识符

00:37:21.789 --> 00:37:32.299
我用来获取

00:37:25.970 --> 00:37:35.329
令牌，我的用户名电子邮件，所以

00:37:32.299 --> 00:37:37.220
那里的身份信息

00:37:35.329 --> 00:37:42.200
是令牌发行的时间

00:37:37.220 --> 00:37:43.849
孩子们会过期，她

00:37:42.200 --> 00:37:46.670
也有观众要求

00:37:43.849 --> 00:37:49.309
这个奇数场在这里说这个令牌

00:37:46.670 --> 00:37:53.529
旨在用于开放ID 

00:37:49.309 --> 00:37:57.170
连接端点并打算使用

00:37:53.529 --> 00:38:02.180
此应用程序是客户端

00:37:57.170 --> 00:38:07.369
这里是这个应用程序的ID 

00:38:02.180 --> 00:38:10.490
这是一个记号，你可能是

00:38:07.369 --> 00:38:13.490
想知道这很酷我该如何设置

00:38:10.490 --> 00:38:19.609
它设置了我如何使用Spring 

00:38:13.490 --> 00:38:22.089
云安全性也可以做到这一点

00:38:19.609 --> 00:38:22.089
下一个演示

00:38:29.080 --> 00:38:34.090
好吧，所以我的下一个话题是

00:38:32.290 --> 00:38:36.340
弗雷迪的烧烤店

00:38:34.090 --> 00:38:38.530
演员是弗雷迪（Freddy），他是

00:38:36.340 --> 00:38:41.770
弗雷迪的烧烤接头使

00:38:38.530 --> 00:38:43.570
 DC最好的肋骨，我们有Frank是谁

00:38:41.770 --> 00:38:44.950
弗雷迪最重要的客户，因为

00:38:43.570 --> 00:38:48.760
他是世界上最有权势的人

00:38:44.950 --> 00:38:50.800
我们有为之工作的开发人员

00:38:48.760 --> 00:38:55.840
弗兰克，想以此来压迫他

00:38:50.800 --> 00:38:58.000
副项目，这里的用例是

00:38:55.840 --> 00:39:00.700
使弗兰克能够查看菜单

00:38:58.000 --> 00:39:02.680
在线下订单并发出

00:39:00.700 --> 00:39:06.790
弗雷迪管理菜单的能力

00:39:02.680 --> 00:39:12.250
并关闭订单，所以我们要

00:39:06.790 --> 00:39:16.230
建立这个我们已经工作很晚了

00:39:12.250 --> 00:39:21.580
将要构建两个UI应用程序， 

00:39:16.230 --> 00:39:23.320
两个REST API资源服务器， 

00:39:21.580 --> 00:39:29.350
是所有的途径

00:39:23.320 --> 00:39:33.130
跟着好吧，所以首先开始

00:39:29.350 --> 00:39:36.750
如果需要，可以设置UA 

00:39:33.130 --> 00:39:38.350
在github和

00:39:36.750 --> 00:39:42.940
一起阅读

00:39:38.350 --> 00:39:46.390
我将向您展示代码让我

00:39:42.940 --> 00:39:51.600
知道看起来更好的东西

00:39:46.390 --> 00:39:51.600
在屏幕上可读

00:40:05.910 --> 00:40:14.210
所以你们用的是

00:40:09.920 --> 00:40:18.150
看着这是的

00:40:14.210 --> 00:40:27.090
这些会起床的

00:40:18.150 --> 00:40:30.630
忘记为我们提供帮助是的，我要说的是

00:40:27.090 --> 00:40:32.910
哦，我会坚持使用STS，因为它

00:40:30.630 --> 00:40:34.500
其实有点像我开始的时候

00:40:32.910 --> 00:40:35.700
像我要走路一样更改代码

00:40:34.500 --> 00:40:40.290
通过每一个关于

00:40:35.700 --> 00:40:43.440
 30分钟我觉得新郎很

00:40:40.290 --> 00:40:46.410
好向您展示如何创建

00:40:43.440 --> 00:40:50.750
我喜欢的非常时髦的关节系统

00:40:46.410 --> 00:40:50.750
并排比较让我们开始吧

00:40:55.390 --> 00:40:58.290
好的

00:41:01.500 --> 00:41:09.270
所以首先我们有一个你

00:41:06.030 --> 00:41:10.910
我们将成为的配置文件

00:41:09.270 --> 00:41:14.460
在本地运行所有这些，以便

00:41:10.910 --> 00:41:16.680
配置您自己的本地设备

00:41:14.460 --> 00:41:19.680
在这里的评论中得到它

00:41:16.680 --> 00:41:23.160
提交您可以从下载

00:41:19.680 --> 00:41:25.740
甚至设置只是搜索它还是云

00:41:23.160 --> 00:41:29.640
铸造厂身份Cloud Foundry ID任何

00:41:25.740 --> 00:41:31.500
你一次，一旦设置

00:41:29.640 --> 00:41:33.720
环境变量您的配置路径

00:41:31.500 --> 00:41:37.920
到包含此文件夹的文件夹中

00:41:33.720 --> 00:41:41.820
 amo，所以它在您的项目文件夹中

00:41:37.920 --> 00:41:45.930
然后你可以在你的战争中

00:41:41.820 --> 00:41:54.420
最喜欢的容器，但在此演示运行中

00:41:45.930 --> 00:41:58.349
它作为localhost 8080一次砍你

00:41:54.420 --> 00:42:03.540
你有我的设置提交

00:41:58.349 --> 00:42:09.480
真正超过它包含SSO 

00:42:03.540 --> 00:42:14.700
我刚要谅解的应用程序

00:42:09.480 --> 00:42:21.530
第一次提交执行此提交

00:42:14.700 --> 00:42:21.530
现在建立客户界面

00:42:26.460 --> 00:42:29.460
只是

00:42:41.790 --> 00:42:50.850
好的，我们要创建

00:42:45.580 --> 00:42:50.850
没有安全性的客户界面

00:43:02.210 --> 00:43:06.340
让我们看一下应用程序

00:43:12.450 --> 00:43:17.440
是的，我们很小

00:43:15.370 --> 00:43:19.390
春季美容应用这也是

00:43:17.440 --> 00:43:21.690
控制器，所以我都上这堂课

00:43:19.390 --> 00:43:23.860
控制器和应用程序中

00:43:21.690 --> 00:43:30.150
因为我很懒，我一直想

00:43:23.860 --> 00:43:33.700
显示一切，然后去文件我

00:43:30.150 --> 00:43:36.420
你怎么不起诉我

00:43:33.700 --> 00:43:36.420
认为我可以做到

00:43:37.710 --> 00:43:42.960
好吧，看看是否行得通

00:43:44.520 --> 00:43:57.390
抱歉，哦，是的，我们走了

00:44:08.480 --> 00:44:20.150
不错，所以我们必须要求

00:44:17.600 --> 00:44:23.090
我们有一个正在使用的主页映射

00:44:20.150 --> 00:44:25.130
 Spring 的MVC与时间的叶子，这只是

00:44:23.090 --> 00:44:28.609
将只返回索引模板

00:44:25.130 --> 00:44:31.040
这里的山谷扔的东西

00:44:28.609 --> 00:44:34.910
在字符串中将或单击

00:44:31.040 --> 00:44:37.490
稍后进行实际身份验证，我也

00:44:34.910 --> 00:44:41.600
从菜单中找出响应

00:44:37.490 --> 00:44:44.380
资源服务器就在这里

00:44:41.600 --> 00:44:44.380
有钱人

00:44:50.950 --> 00:45:04.390
我不会真正浏览HTML，让我们

00:44:59.270 --> 00:45:12.580
看看这里的领域对象

00:45:04.390 --> 00:45:12.580
出来，这里有什么依赖性

00:45:15.779 --> 00:45:21.309
只是 spring boot 起步时间叶和

00:45:19.150 --> 00:45:26.410
包含在

00:45:21.309 --> 00:45:33.750
通用域模型好吧，让我们运行

00:45:26.410 --> 00:45:33.750
这是一个很好的运行

00:45:45.770 --> 00:45:51.260
好吧，我可以说你好，但是

00:45:48.830 --> 00:45:53.090
这是一个硬编码的值，请参阅菜单

00:45:51.260 --> 00:45:56.240
这只是一些存根债务值

00:45:53.090 --> 00:46:00.530
这样就建立了基本功能

00:45:56.240 --> 00:46:08.200
现在，我们可以

00:46:00.530 --> 00:46:08.200
继续下一个提交是的

00:46:10.240 --> 00:46:17.050
我基本上有一个四演出的JVM 

00:46:14.150 --> 00:46:17.050
听说可见

00:46:43.890 --> 00:46:52.390
好的，没问题，谢谢大家

00:46:47.170 --> 00:46:57.300
一切都很好，所以现在我们要

00:46:52.390 --> 00:46:57.300
将单点登录添加到应用程序

00:47:02.010 --> 00:47:11.160
我的主要应用程序类别

00:47:07.950 --> 00:47:15.040
此注释无法发送到SSO 

00:47:11.160 --> 00:47:16.600
我还添加了此转储令牌端点

00:47:15.040 --> 00:47:17.950
配置这是我的另一类

00:47:16.600 --> 00:47:20.350
写在通用包中，所以

00:47:17.950 --> 00:47:21.730
仅用于调试令牌，但我们

00:47:20.350 --> 00:47:25.300
真的不需要专注于这个

00:47:21.730 --> 00:47:32.310
是当你所有魔法发生的地方

00:47:25.300 --> 00:47:32.310
添加它，然后引入请求映射

00:47:32.820 --> 00:47:41.980
问题好吧，让我们继续前进

00:47:37.180 --> 00:47:44.770
你可以弹出一个标准的对象

00:47:41.980 --> 00:47:47.650
只是Java标准的一部分

00:47:44.770 --> 00:47:49.060
身份验证，而不是

00:47:47.650 --> 00:47:53.530
硬编码我将要使用

00:47:49.060 --> 00:48:02.110
主猫的名字告诉你

00:47:53.530 --> 00:48:06.090
真的得到了码头D标志

00:48:02.110 --> 00:48:09.660
我们更改配置属性

00:48:06.090 --> 00:48:09.660
 Spring 到渥太华

00:48:15.619 --> 00:48:22.309
我们需要告诉应用程序

00:48:18.519 --> 00:48:23.779
在哪里获得代币在哪里

00:48:22.309 --> 00:48:37.539
将用户重定向到所有人

00:48:23.779 --> 00:48:41.319
 John you a s20令牌这点

00:48:37.539 --> 00:48:45.799
肖特基URI，所以您可以通过两种方式

00:48:41.319 --> 00:48:50.930
消耗Jah代币之一是提供

00:48:45.799 --> 00:48:53.359
关键URI，这里只是我的URI 

00:48:50.930 --> 00:49:00.680
打算把它放在浏览器中

00:48:53.359 --> 00:49:03.229
向您展示这会吐出RSA公开

00:49:00.680 --> 00:49:07.969
密钥，此公钥用于

00:49:03.229 --> 00:49:11.119
令牌验证等应用

00:49:07.969 --> 00:49:13.099
启动它将达到发送点获取

00:49:11.119 --> 00:49:22.249
该公钥，然后使用该公钥

00:49:13.099 --> 00:49:33.199
对于非常关键的，所以我们设置了

00:49:22.249 --> 00:49:36.410
还要在UA中进行一些设置，所以在这里我

00:49:33.199 --> 00:49:39.400
认为我已经过了这个最初的

00:49:36.410 --> 00:49:43.249
的东西，但与您的初始设置

00:49:39.400 --> 00:49:46.189
我们必须指定公钥

00:49:43.249 --> 00:49:49.039
是一样的节目，你在那变态

00:49:46.189 --> 00:49:51.079
终点，但签名保持与我们的匹配

00:49:49.039 --> 00:50:03.619
珍娜曾经用过的厚私钥

00:49:51.079 --> 00:50:16.749
这是幼崽不是一个秘密

00:50:03.619 --> 00:50:16.749
管道强度我参与令牌

00:50:16.959 --> 00:50:20.259
编码授权

00:50:21.200 --> 00:50:27.140
锁定它，它实际上是

00:50:24.090 --> 00:50:30.000
规范是不同的赠款类型

00:50:27.140 --> 00:50:33.710
具有不同的安全级别

00:50:30.000 --> 00:50:33.710
比其他人更安全的孩子

00:50:34.099 --> 00:50:44.070
在这里我是说

00:50:38.099 --> 00:50:45.810
客户只能授权此范围，因此

00:50:44.070 --> 00:50:53.250
客户端只能授权访问

00:50:45.810 --> 00:50:57.380
用户身份和权限字段

00:50:53.250 --> 00:51:01.260
这里说客户拥有什么

00:50:57.380 --> 00:51:07.050
在UA中，此范围UA是点资源

00:51:01.260 --> 00:51:09.510
表示它可以访问公钥

00:51:07.050 --> 00:51:11.220
对不起，它可以访问该令牌

00:51:09.510 --> 00:51:14.010
关键端点（如果该令牌关键端点） 

00:51:11.220 --> 00:51:16.470
已被保护，它也可以访问

00:51:14.010 --> 00:51:20.210
检查令牌端点并执行以下操作

00:51:16.470 --> 00:51:23.880
您允许资源服务执行和

00:51:20.210 --> 00:51:27.930
最后一个重定向URI，这很重要

00:51:23.880 --> 00:51:31.170
因为此重定向URI锁定了如何

00:51:27.930 --> 00:51:35.369
该客户端可以将用户重定向回

00:51:31.170 --> 00:51:38.520
到应用程序，因为记住

00:51:35.369 --> 00:51:43.740
授权代码握手

00:51:38.520 --> 00:51:47.130
一个使用代码被重定向得到

00:51:43.740 --> 00:51:50.580
发送回浏览器，那就是

00:51:47.130 --> 00:51:52.560
包含在重定向中，因此如果

00:51:50.580 --> 00:51:54.750
浏览器，如果您打开了

00:51:52.560 --> 00:51:57.570
重定向您没有指定您的

00:51:54.750 --> 00:51:59.310
重定向URI和授权

00:51:57.570 --> 00:52:02.609
要求您可以说哦，将我重定向到

00:51:59.310 --> 00:52:05.460
如果您未指定

00:52:02.609 --> 00:52:08.040
重定向可以正常运行的URI的站点

00:52:05.460 --> 00:52:09.930
最终将获得该授权

00:52:08.040 --> 00:52:13.400
代码，然后获取令牌

00:52:09.930 --> 00:52:15.900
该令牌所针对的网站的

00:52:13.400 --> 00:52:18.710
因此，指定一个

00:52:15.900 --> 00:52:18.710
重定向URI 

00:52:21.030 --> 00:52:27.569
以及我们添加了哪些依赖项

00:52:25.180 --> 00:52:27.569
发生这种情况

00:52:28.710 --> 00:52:39.130
 Spring Cloud Starter Oauth2是

00:52:31.270 --> 00:52:42.640
只是一件事还可以， 

00:52:39.130 --> 00:52:44.680
所以我们运行它以重新启动AAA 

00:52:42.640 --> 00:52:48.839
因为我想我改变了一些配置

00:52:44.680 --> 00:52:52.420
现在我正在对您进行AAA更改

00:52:48.839 --> 00:52:58.089
使用此配置文件，但您也可以

00:52:52.420 --> 00:53:03.670
使用UA的CLI称其为AAC 

00:52:58.089 --> 00:53:09.520
是一个ruby CLI，所以如果您喜欢ruby 

00:53:03.670 --> 00:53:13.319
您可以只用gem安装cfd即可使用AC或

00:53:09.520 --> 00:53:13.319
还有其他安装方法

00:53:13.740 --> 00:53:20.670
好吧，让我们重新运行客户门户

00:53:29.310 --> 00:53:35.420
很酷，所以我尝试访问我的主页

00:53:32.070 --> 00:53:35.420
重定向到登录屏幕

00:53:40.190 --> 00:53:56.910
好吧，现在我可以看到菜单了

00:53:46.860 --> 00:54:12.900
我的访问令牌很好，请继续

00:53:56.910 --> 00:54:15.350
接下来，我将失去所有的承诺

00:54:12.900 --> 00:54:15.350
讯息

00:54:19.540 --> 00:54:23.440
好吧，我要过去了

00:54:21.880 --> 00:54:25.780
测试，因为测试是超级

00:54:23.440 --> 00:54:28.150
当您尝试

00:54:25.780 --> 00:54:30.070
在您的应用程序上配置安全性

00:54:28.150 --> 00:54:32.800
你可能以为你在做事

00:54:30.070 --> 00:54:34.060
是的，您可能会认为

00:54:32.800 --> 00:54:36.100
您正在遵循文档

00:54:34.060 --> 00:54:38.200
确切地说，但您可能会错过

00:54:36.100 --> 00:54:40.840
你可能会打开一个很大的东西

00:54:38.200 --> 00:54:43.300
安全漏洞

00:54:40.840 --> 00:54:45.640
真的必须测试您的应用程序

00:54:43.300 --> 00:54:48.550
彻底确保您已经

00:54:45.640 --> 00:54:51.360
你做得很好，所以我要去

00:54:48.550 --> 00:54:51.360
告诉你怎么做

00:54:58.470 --> 00:55:03.390
现在，如果您使用直Spring 

00:55:00.450 --> 00:55:06.210
安全性有一些很棒的测试

00:55:03.390 --> 00:55:08.849
已经发布的工具

00:55:06.210 --> 00:55:12.210
最近，让您喜欢模拟

00:55:08.849 --> 00:55:14.730
和身份验证，仍然喜欢

00:55:12.210 --> 00:55:18.450
完全集成测试但已锁定

00:55:14.730 --> 00:55:27.829
Spring 安全性可以解决某些问题

00:55:18.450 --> 00:55:27.829
 oauth2这是我找不到相同的

00:55:45.020 --> 00:55:53.160
所以我在这里添加了基础测试类

00:55:49.260 --> 00:55:54.480
安全集成测试，如果您

00:55:53.160 --> 00:55:56.460
熟悉测试 spring boot 

00:55:54.480 --> 00:55:58.440
在网络上使用的应用程序

00:55:56.460 --> 00:56:01.290
集成测试意味着

00:55:58.440 --> 00:56:02.790
整个应用程序正在启动

00:56:01.290 --> 00:56:08.610
在一个容器中启动

00:56:02.790 --> 00:56:14.190
可访问性，我告诉它启动

00:56:08.610 --> 00:56:16.800
使用一些随机端口，我添加了一个

00:56:14.190 --> 00:56:20.430
一堆方法，我猜我会

00:56:16.800 --> 00:56:23.310
简要回顾一下，让您

00:56:20.430 --> 00:56:29.250
看起来像HTTP和HTTPS的东西

00:56:23.310 --> 00:56:32.700
请求并检查对此的响应

00:56:29.250 --> 00:56:35.310
我本来可以用休息

00:56:32.700 --> 00:56:38.220
在服务器上发出请求的模板

00:56:35.310 --> 00:56:41.130
但是用剩下的模板我找到了

00:56:38.220 --> 00:56:43.460
很难说不遵循

00:56:41.130 --> 00:56:47.790
重定向，以便我在这里使用

00:56:43.460 --> 00:56:51.330
做这些集成测试是apache 

00:56:47.790 --> 00:56:54.810
 httpclient，我只是禁用cookie 

00:56:51.330 --> 00:56:56.340
管理重定向处理，以便我可以

00:56:54.810 --> 00:57:00.980
现在使用它来测试资源

00:56:56.340 --> 00:57:00.980
服务器和我的客户应用程序

00:57:12.680 --> 00:57:20.480
好的，所以在这里我是说

00:57:17.930 --> 00:57:21.799
此测试安全点需要SSL 

00:57:20.480 --> 00:57:23.660
当我跑步时等于true 

00:57:21.799 --> 00:57:26.900
生产我一直想运行

00:57:23.660 --> 00:57:30.319
在SSL下运行，但是如果我在SSL下运行

00:57:26.900 --> 00:57:32.000
想要确保

00:57:30.319 --> 00:57:35.359
重定向正确遵循

00:57:32.000 --> 00:57:37.099
是否正在检查该请求

00:57:35.359 --> 00:57:39.470
是通过安全通道而不是通过

00:57:37.099 --> 00:57:44.020
安全通道，我应该期望看到

00:57:39.470 --> 00:57:44.020
重定向回HTTPS URL 

00:57:52.920 --> 00:57:59.280
这些测试失败了，让我们深入探讨

00:57:56.610 --> 00:58:01.590
这个基本方法多一点

00:57:59.280 --> 00:58:07.820
检查要求GPS没有作者通过

00:58:01.590 --> 00:58:07.820
调用检查HTTP重定向的URI 

00:58:08.120 --> 00:58:15.540
所以我要发出一个HTTP请求， 

00:58:12.080 --> 00:58:17.790
在这个URI上，然后查看

00:58:15.540 --> 00:58:21.690
回应，我期望得到一个

00:58:17.790 --> 00:58:28.260
 302回到HTTPS，但这不是

00:58:21.690 --> 00:58:30.540
发生的很好，所以我希望是

00:58:28.260 --> 00:58:33.000
重定向到HBS当地人菜单，但我

00:58:30.540 --> 00:58:41.250
重定向到他们应该登录

00:58:33.000 --> 00:58:43.460
这是不对的，让我们走吧

00:58:41.250 --> 00:58:43.460
下一个

00:58:52.620 --> 00:59:02.760
好的，所以在此提交中，我将修复

00:58:54.540 --> 00:59:05.390
 SSL重定向问题，这是什么

00:59:02.760 --> 00:59:05.390
失踪

00:59:11.100 --> 00:59:21.420
因此，当您对SSO使用启用关闭功能时

00:59:15.790 --> 00:59:26.890
而您想强制使用SSL 

00:59:21.420 --> 00:59:28.840
总是一个好主意，您确实需要一个oauth2 

00:59:26.890 --> 00:59:34.110
 SSO配置适配器位于

00:59:28.840 --> 00:59:37.720
 Spring Cloud Security Docs作为一种方式

00:59:34.110 --> 00:59:42.760
指定应该确保哪些请求

00:59:37.720 --> 00:59:45.130
与启用oauth2 SSO，如果需要

00:59:42.760 --> 00:59:46.780
如果用户授权该请求

00:59:45.130 --> 00:59:48.370
应该包含任何排序的角色

00:59:46.780 --> 00:59:52.510
你要做的一切

00:59:48.370 --> 00:59:54.090
开箱即用配置适配器

00:59:52.510 --> 00:59:57.100
就像我上次运行该应用程序一样

00:59:54.090 --> 01:00:00.850
确保它正在要求认证

00:59:57.100 --> 01:00:05.550
但我确实需要修改该行为

01:00:00.850 --> 01:00:10.360
在这里稍微说一下

01:00:05.550 --> 01:00:14.440
如果需要SSL在我的安全中为真

01:00:10.360 --> 01:00:18.820
属性，然后在HP上进行设置

01:00:14.440 --> 01:00:21.850
安全配置，每个人都可以

01:00:18.820 --> 01:00:24.190
熟悉Spring Security 提高

01:00:21.850 --> 01:00:27.520
真棒

01:00:24.190 --> 01:00:32.310
这也是一个很漂亮的模式

01:00:27.520 --> 01:00:32.310
在Spring Security 设置中很常见

01:00:33.900 --> 01:00:39.420
好吧，现在我将重新运行测试

01:00:43.900 --> 01:00:50.440
绿色好吧，继续前进

01:00:57.700 --> 01:01:02.829
现在我们可以创建一个资源服务器

01:01:00.420 --> 01:01:08.280
使用Springs数据休息和 Spring 

01:01:02.829 --> 01:01:10.990
数据JPA，这要回到我们的图表中

01:01:08.280 --> 01:01:15.880
但是我们现在进行了单点登录

01:01:10.990 --> 01:01:24.040
添加REST API，所以很简单

01:01:15.880 --> 01:01:28.890
香草，没有安全感，我有一个

01:01:24.040 --> 01:01:32.170
我要显示IDS的手动存储库

01:01:28.890 --> 01:01:35.109
在这个其余的存储库上，我是

01:01:32.170 --> 01:01:44.799
使用以下命令引导应用程序

01:01:35.109 --> 01:01:49.750
只是一个对象，还有我添加到的对象

01:01:44.799 --> 01:01:52.170
菜单项类别只是一些GPA 

01:01:49.750 --> 01:02:02.170
注释，因为我坚持这一点

01:01:52.170 --> 01:02:09.880
然后再简要介绍一下

01:02:02.170 --> 01:02:14.049
 Spring 的数据善良得到这一切

01:02:09.880 --> 01:02:16.420
工作需要 spring boot 开始

01:02:14.049 --> 01:02:24.250
逮捕 spring boot 启动了两个JPA 

01:02:16.420 --> 01:02:31.210
还有一个内存数据库和图哦

01:02:24.250 --> 01:02:33.369
就是在80 83上运行，我会

01:02:31.210 --> 01:02:36.030
运行测试，让我们运行正确

01:02:33.369 --> 01:02:36.030
这里的东西

01:02:44.800 --> 01:02:48.750
好的菜单应用程序

01:02:57.270 --> 01:02:59.330
您

01:02:59.650 --> 01:03:08.430
哦，现在要求基本休假

01:03:06.250 --> 01:03:11.350
开箱即用即可获取基本身份验证

01:03:08.430 --> 01:03:16.780
您的Spring 安全性正在运行中

01:03:11.350 --> 01:03:19.980
应用程序并关闭它我想

01:03:16.780 --> 01:03:19.980
我正在另一次提交中

01:03:28.850 --> 01:03:34.880
哦，是的，我们在这里介绍基本信息

01:03:31.940 --> 01:03:37.690
海军D等于假，我们想

01:03:34.880 --> 01:03:42.280
关闭基本安全功能，然后关闭

01:03:37.690 --> 01:03:42.280
使用OAuth 2资源服务器安全性

01:03:50.750 --> 01:03:54.310
好吧，什么改变了

01:03:58.630 --> 01:04:03.559
以便配置资源服务

01:04:01.069 --> 01:04:04.880
保护资源服务器

01:04:03.559 --> 01:04:08.390
特别是一个不需要

01:04:04.880 --> 01:04:09.710
由UAA中的客户代表

01:04:08.390 --> 01:04:12.079
如果你不这样做，门也是一样

01:04:09.710 --> 01:04:14.770
使用阿联酋的资源服务器

01:04:12.079 --> 01:04:18.799
资源服务器需要做的就是检查

01:04:14.770 --> 01:04:20.780
令牌并验证签名，以便您

01:04:18.799 --> 01:04:29.690
通过指定

01:04:20.780 --> 01:04:34.160
赛马URI并更改为

01:04:29.690 --> 01:04:36.380
应用程序，我们已经添加了这个

01:04:34.160 --> 01:04:40.220
此处的注释启用oauth2资源

01:04:36.380 --> 01:04:46.789
我们需要添加资源服务器

01:04:40.220 --> 01:04:49.789
再次配置适配器

01:04:46.789 --> 01:04:52.010
在这里交易，我们想说，如果需要

01:04:49.789 --> 01:04:53.270
 SSL为真，那么我们要配置

01:04:52.010 --> 01:04:55.869
保证每个人的安全

01:04:53.270 --> 01:04:55.869
组态

01:05:00.690 --> 01:05:06.299
现在我将在以后的每一个

01:05:03.089 --> 01:05:13.049
提交针对每个更改的写测试

01:05:06.299 --> 01:05:15.960
行为，所以我将扩展安全性

01:05:13.049 --> 01:05:19.170
集成测试在这里做同样的事情

01:05:15.960 --> 01:05:21.599
需要我们一个细胞来模仿我想要的

01:05:19.170 --> 01:05:24.630
在生产中我们要检查

01:05:21.599 --> 01:05:30.900
当您点击时，该HTTP GET HTTP重定向

01:05:24.630 --> 01:05:33.299
菜单项，然后单击菜单时

01:05:30.900 --> 01:05:36.599
 HTTP上的项目，假设没有令牌

01:05:33.299 --> 01:05:40.260
你得到一个401，当你有一个

01:05:36.599 --> 01:05:42.599
令牌你得到200，这是什么你

01:05:40.260 --> 01:05:45.750
记记令牌生成器，这是另一类

01:05:42.599 --> 01:05:49.829
我写来支持所有这些

01:05:45.750 --> 01:05:52.890
测试也许很快我们就会成功

01:05:49.829 --> 01:05:54.539
进入您可以轻松获得的图书馆

01:05:52.890 --> 01:06:01.349
保留，但是如果您有的话，全部在github中

01:05:54.539 --> 01:06:03.740
想今天使用它，好的，让我们运行

01:06:01.349 --> 01:06:03.740
测试

01:06:16.829 --> 01:06:19.829
它

01:06:28.680 --> 01:06:35.490
现在您可能已经看到测试

01:06:30.869 --> 01:06:38.790
并不是真的没有添加任何东西

01:06:35.490 --> 01:06:40.530
我正在创建令牌的令牌，它是

01:06:38.790 --> 01:06:42.510
本质上为空的令牌什么也没说

01:06:40.530 --> 01:06:44.849
不说用户是谁不说

01:06:42.510 --> 01:06:47.550
令牌的受众是什么

01:06:44.849 --> 01:06:48.990
什么都不知道，所以这是

01:06:47.550 --> 01:06:53.599
显然我们应该检查的东西

01:06:48.990 --> 01:06:53.599
为此

01:07:07.750 --> 01:07:13.720
我已将此添加到资源服务器

01:07:09.930 --> 01:07:17.859
配置适配器资源资源标识

01:07:13.720 --> 01:07:20.050
菜单，这是你得到的东西

01:07:17.859 --> 01:07:22.690
开箱即用，如果您要设置

01:07:20.050 --> 01:07:28.540
与启用法律一起申请

01:07:22.690 --> 01:07:32.430
资源，然后您说并添加到

01:07:28.540 --> 01:07:32.430
您的配置在哪里

01:07:42.320 --> 01:07:50.100
是的，您可以将dotto变成资源

01:07:45.060 --> 01:07:55.770
 ID，此处没有其他配置

01:07:50.100 --> 01:07:56.700
你知道我们说你没有我们

01:07:55.770 --> 01:07:58.110
说你没有资源服务器

01:07:56.700 --> 01:08:00.600
配置刚添加的适配器

01:07:58.110 --> 01:08:02.970
属性，然后是您的资源，然后

01:08:00.600 --> 01:08:06.110
听众的主张将被检查，但我

01:08:02.970 --> 01:08:09.000
必须在这里手动执行此操作

01:08:06.110 --> 01:08:11.370
通过可能是一个错误或也许我是

01:08:09.000 --> 01:08:16.470
如果您想要的话，不正确的设置

01:08:11.370 --> 01:08:19.730
指定资源服务器配置

01:08:16.470 --> 01:08:23.250
适配器，您必须在一个

01:08:19.730 --> 01:08:27.270
有此签名公共资源

01:08:23.250 --> 01:08:31.410
服务器没有配置资源服务器

01:08:27.270 --> 01:08:32.730
太确定为什么会这样，但是

01:08:31.410 --> 01:08:34.200
那是我通过测试发现的

01:08:32.730 --> 01:08:36.200
这就是为什么测试如此重要的原因

01:08:34.200 --> 01:08:38.700
以为我做对了， 

01:08:36.200 --> 01:08:45.800
我的测试失败了，我不得不弄清楚

01:08:38.700 --> 01:08:45.800
如何使他们通过考试

01:08:48.830 --> 01:09:00.920
在这里，如果我只是建立一个403 

01:08:57.980 --> 01:09:03.320
令牌为空，但是如果我设置了

01:09:00.920 --> 01:09:13.700
观众将令牌声明为菜单，然后

01:09:03.320 --> 01:09:17.859
这将使200随意

01:09:13.700 --> 01:09:17.859
也会打扰我

01:09:29.809 --> 01:09:40.789
哦失败哦，好吧，为什么表达式URL 

01:09:38.750 --> 01:09:43.940
授权图已建立

01:09:40.789 --> 01:09:45.799
这张桌子哦，我想也许我正在修理

01:09:43.940 --> 01:09:48.170
这另一个承诺这不是

01:09:45.799 --> 01:09:49.670
我期望的东西，也许我

01:09:48.170 --> 01:09:52.690
必须多做一些切槽

01:09:49.670 --> 01:09:52.690
对，让我们继续

01:10:06.030 --> 01:10:11.409
好的，确定菜单点的读取范围是

01:10:09.400 --> 01:10:13.360
需要访问端点，因此添加

01:10:11.409 --> 01:10:16.079
这里还有更多测试

01:10:13.360 --> 01:10:16.079
授权书

01:10:25.510 --> 01:10:29.470
所以现在我们在这里检查范围和

01:10:27.940 --> 01:10:32.650
这就是我遇到的地方

01:10:29.470 --> 01:10:35.410
这个方法签名的问题

01:10:32.650 --> 01:10:38.220
这里是如此重要，我无法

01:10:35.410 --> 01:10:40.900
使此授权请求起作用

01:10:38.220 --> 01:10:44.380
当您启用资源时

01:10:40.900 --> 01:10:48.550
服务器，或者我可以向您提供资源

01:10:44.380 --> 01:10:50.290
得到一个安全表达式

01:10:48.550 --> 01:10:53.560
允许的安全性表达方法

01:10:50.290 --> 01:10:56.860
您检查令牌以了解范围和

01:10:53.560 --> 01:11:00.810
所以这里的表达有很多

01:10:56.860 --> 01:11:04.480
范围菜单已读，也就是说

01:11:00.810 --> 01:11:12.180
任何请求必须具有范围

01:11:04.480 --> 01:11:12.180
进行测试

01:11:16.579 --> 01:11:21.020
因此仅设置

01:11:18.500 --> 01:11:23.510
观众声称我必须设置菜单点

01:11:21.020 --> 01:11:27.889
读取或菜单点读取必须存在

01:11:23.510 --> 01:11:31.059
在令牌范围内，我想知道我的

01:11:27.889 --> 01:11:31.059
测试将通过

01:11:41.979 --> 01:11:44.639
是

01:11:56.110 --> 01:12:02.560
好吧，现在我正在使用春季逮捕

01:12:00.429 --> 01:12:05.380
在 spring data JPA中， 

01:12:02.560 --> 01:12:08.199
公开JPA信息库

01:12:05.380 --> 01:12:10.540
轻松地让您从中获取东西

01:12:08.199 --> 01:12:13.300
它，它还允许您放置和

01:12:10.540 --> 01:12:16.060
发布并删除相关内容，我想要

01:12:13.300 --> 01:12:18.909
确保这些方法是

01:12:16.060 --> 01:12:21.960
确保具有不同的范围，因此

01:12:18.909 --> 01:12:21.960
这就是我在这里做的

01:12:43.550 --> 01:12:50.300
所以在这里看到区别而不是

01:12:46.250 --> 01:12:52.670
使用我使用蚂蚁的任何要求

01:12:50.300 --> 01:12:56.150
它可以让您指定什么请求

01:12:52.670 --> 01:13:00.020
您要应用访问权限的方法

01:12:56.150 --> 01:13:03.200
决定，所以忘了我们有菜单

01:13:00.020 --> 01:13:06.040
点读，但张贴和删除我们

01:13:03.200 --> 01:13:06.040
想要菜单点右

01:13:11.670 --> 01:13:18.570
在这里您可以看到我们的测试获得了

01:13:14.520 --> 01:13:22.110
整个更长的时间，我们将遍历所有

01:13:18.570 --> 01:13:23.880
那基本上是你添加的

01:13:22.110 --> 01:13:26.160
继续添加安全配置

01:13:23.880 --> 01:13:27.630
需要彻底测试以确保

01:13:26.160 --> 01:13:30.440
该配置正在做什么

01:13:27.630 --> 01:13:30.440
你期望它能做到

01:13:36.380 --> 01:13:42.260
好吧，让我们实际看看我的工作

01:13:40.520 --> 01:13:45.170
设置弗兰克有菜单点

01:13:42.260 --> 01:13:46.640
读取访问权限，该范围将是

01:13:45.170 --> 01:13:49.180
在授权的OAuth中请求

01:13:46.640 --> 01:13:49.180
请求UA 

01:13:59.110 --> 01:14:06.460
好的，所以要在您身上设置几件事

01:14:01.750 --> 01:14:10.120
现在我不希望你们会

01:14:06.460 --> 01:14:11.980
您可以使用自己的Olaf来

01:14:10.120 --> 01:14:15.220
或开放ID连接授权服务器

01:14:11.980 --> 01:14:18.220
我的旅游项目也有一个

01:14:15.220 --> 01:14:19.930
打开ID连接服务器，但我只是

01:14:18.220 --> 01:14:24.790
在这里使用ua a是因为我非常

01:14:19.930 --> 01:14:40.600
熟悉它，所以我们添加了

01:14:24.790 --> 01:14:43.900
嗯是的当然

01:14:40.600 --> 01:14:47.440
所以您的AAA在我的支持Postgres 

01:14:43.900 --> 01:14:49.450
续集哦，哦，可以肯定的是，这个问题是

01:14:47.440 --> 01:14:53.320
我如何在

01:14:49.450 --> 01:14:55.090
 UAA以及如何配置身份

01:14:53.320 --> 01:14:57.910
 UA中的提供者，如果我想

01:14:55.090 --> 01:14:59.440
将其连接到LDAP或sam'l，所以全部

01:14:57.910 --> 01:15:01.420
这是可能的，你可以把它挂起来

01:14:59.440 --> 01:15:05.290
到外部身份提供商

01:15:01.420 --> 01:15:08.200
 sam'l多租户支持中的LDAP是

01:15:05.290 --> 01:15:12.060
目前仅允许萨姆

01:15:08.200 --> 01:15:14.410
但是我们很快就会有多租户LDAP 

01:15:12.060 --> 01:15:17.320
用于数据源

01:15:14.410 --> 01:15:20.260
它在我的续集中都支持Postgres 

01:15:17.320 --> 01:15:22.450
这是您可以配置的

01:15:20.260 --> 01:15:24.400
你是的Mahalo可以变得很大

01:15:22.450 --> 01:15:27.280
在Cloud Foundry中相当大

01:15:24.400 --> 01:15:28.840
安装，但这一切都在

01:15:27.280 --> 01:15:31.420
文档，如果你去

01:15:28.840 --> 01:15:33.190
 github斜线Cloud Foundry Sashi UAA 

01:15:31.420 --> 01:15:36.450
所有文档都在那里

01:15:33.190 --> 01:15:40.830
您也可以点击邮件列表

01:15:36.450 --> 01:15:40.830
在被俘虏

01:15:46.630 --> 01:15:52.700
是的，所以注册实用程序

01:15:49.490 --> 01:15:56.270
应用程序，我的意思是有一个非常

01:15:52.700 --> 01:15:57.980
广泛使用的REST API 

01:15:56.270 --> 01:16:00.410
创造客户并创造

01:15:57.980 --> 01:16:03.950
修改创建用户创建用户

01:16:00.410 --> 01:16:07.790
像我本来可以扮演的角色的小组

01:16:03.950 --> 01:16:09.980
还有一个CLI，所以您会看到

01:16:07.790 --> 01:16:13.310
我之前提到的CLI可以使用

01:16:09.980 --> 01:16:15.410
 CLI做所有这些事情-我不是

01:16:13.310 --> 01:16:16.610
在此演示中使用CLI，因为它

01:16:15.410 --> 01:16:18.590
只会花我太多时间，我会

01:16:16.610 --> 01:16:21.920
写出来可能会犯错误

01:16:18.590 --> 01:16:24.950
我只是在改变引导程序

01:16:21.920 --> 01:16:27.650
配置重新启动服务器，以便

01:16:24.950 --> 01:16:30.890
一切都在开源中，如果

01:16:27.650 --> 01:16:35.240
您正在使用关键的Cloud Foundry 

01:16:30.890 --> 01:16:40.430
如果您使用的是一个很好的用户界面

01:16:35.240 --> 01:16:44.330
多租户至少向您展示

01:16:40.430 --> 01:16:46.570
很快，是的，您在这里有了这个用户界面

01:16:44.330 --> 01:16:46.570
那

01:16:52.270 --> 01:16:58.060
就像我可以将用户存储设置为

01:16:54.910 --> 01:16:59.680
该客户端配置为

01:16:58.060 --> 01:17:05.680
使用并重定向您的眼睛和范围

01:16:59.680 --> 01:17:08.620
一切都好

01:17:05.680 --> 01:17:09.250
那能回答您的问题吗？ 

01:17:08.620 --> 01:17:11.489
其他问题

01:17:09.250 --> 01:17:11.489
是的

01:17:25.450 --> 01:17:30.890
是的，所以问题是

01:17:28.760 --> 01:17:33.920
动态更改范围的方法

01:17:30.890 --> 01:17:36.440
在运行时令牌中允许的

01:17:33.920 --> 01:17:39.230
当然有，你会做

01:17:36.440 --> 01:17:41.930
可以这样说

01:17:39.230 --> 01:17:45.560
您想要删除的客户门户

01:17:41.930 --> 01:17:49.460
登录用户的能力

01:17:45.560 --> 01:17:52.370
客户门户网站来读取菜单

01:17:49.460 --> 01:17:56.120
可以在您自己的时候在运行时执行此操作

01:17:52.370 --> 01:17:58.940
只需通过调用oauth客户端即可

01:17:56.120 --> 01:18:02.900
用客户门户的ID指向您

01:17:58.940 --> 01:18:05.780
做一个看跌期权，你改变范围

01:18:02.900 --> 01:18:07.640
客户注册后给出

01:18:05.780 --> 01:18:11.350
您在服务器运行时执行此操作

01:18:07.640 --> 01:18:13.970
假设有一些令牌是

01:18:11.350 --> 01:18:15.590
这些令牌将被使用

01:18:13.970 --> 01:18:17.960
仍然包含那个范围，但是当那个

01:18:15.590 --> 01:18:19.400
令牌过期，那么您必须获得一个新

01:18:17.960 --> 01:18:28.730
令牌，该令牌将不再

01:18:19.400 --> 01:18:32.450
包含该范围，谢谢

01:18:28.730 --> 01:18:35.570
问题让我休息一下

01:18:32.450 --> 01:18:37.070
向您展示所有这些代码，但我

01:18:35.570 --> 01:18:38.360
无法通过我不认为我会

01:18:37.070 --> 01:18:41.540
有足够的时间来度过

01:18:38.360 --> 01:18:44.510
整个演示，但如果您想

01:18:41.540 --> 01:18:46.460
在本地尝试一下，只需查看

01:18:44.510 --> 01:18:48.350
回购并逐步执行每个提交， 

01:18:46.460 --> 01:18:53.270
并在您自己的机器上运行它

01:18:48.350 --> 01:18:59.000
一切正常，所以我们在哪里

01:18:53.270 --> 01:19:01.990
我们是的，所以我们需要进入

01:18:59.000 --> 01:19:05.030
启用菜单点读取范围

01:19:01.990 --> 01:19:09.380
客户应用程序，我们必须要

01:19:05.030 --> 01:19:10.910
授权请求中的范围等

01:19:09.380 --> 01:19:13.040
这是在应用程序中完成的

01:19:10.910 --> 01:19:15.260
是的Mille我已经添加了范围菜单点

01:19:13.040 --> 01:19:19.190
阅读客户端配置并

01:19:15.260 --> 01:19:22.490
我已经在该范围内注册了该范围

01:19:19.190 --> 01:19:27.200
 UA a客户门户网站，我已添加

01:19:22.490 --> 01:19:29.960
一个名为Frank的新用户，他将加入

01:19:27.200 --> 01:19:36.080
菜单点读取组的一部分，所以我认为

01:19:29.960 --> 01:19:37.980
关于UA a和客户端中的用户组是

01:19:36.080 --> 01:19:40.830
那

01:19:37.980 --> 01:19:43.440
你必须通过一个客户来获得

01:19:40.830 --> 01:19:47.000
令牌以及令牌可以使用的范围

01:19:43.440 --> 01:19:50.520
包含是这个的交集

01:19:47.000 --> 01:19:52.200
在这里重视这些范围和范围

01:19:50.520 --> 01:19:55.950
是和用户是一个组

01:19:52.200 --> 01:19:58.680
的一部分，所以弗兰克可以有菜单点

01:19:55.950 --> 01:20:00.420
也是正确的，但是当弗兰克去时

01:19:58.680 --> 01:20:02.040
通过客户门户，他的令牌是

01:20:00.420 --> 01:20:04.370
只会有开放的ID和磁铁

01:20:02.040 --> 01:20:04.370
芦苇

01:20:11.849 --> 01:20:17.780
好的，现在通过此设置运行

01:20:15.420 --> 01:20:17.780
通过它

01:20:18.889 --> 01:20:23.300
哎呀撕毁了错误的服务器

01:20:26.400 --> 01:20:34.730
然后我要重新启动客户

01:20:29.520 --> 01:20:34.730
门户网站和菜单服务

01:20:49.329 --> 01:20:54.840
好吧，我会去健力士弗兰克的哦

01:20:59.820 --> 01:21:06.820
酷哦，不，不，不，这就是全部

01:21:04.540 --> 01:21:10.739
在PWS中运行这不是我的那个

01:21:06.820 --> 01:21:16.329
想在这里使用本地的

01:21:10.739 --> 01:21:18.250
那是成品，好吧，我

01:21:16.329 --> 01:21:21.460
必须在以下情况下授权此新范围

01:21:18.250 --> 01:21:24.460
你不读书所以现在我可以给你

01:21:21.460 --> 01:21:26.889
菜单，此菜单仍然是硬编码的

01:21:24.460 --> 01:21:29.280
的东西，所以我会很快通过

01:21:26.889 --> 01:21:32.280
从SSO访问资源服务器

01:21:29.280 --> 01:21:32.280
应用

01:21:39.550 --> 01:21:44.890
好的，所以在这次提交中，我将设置

01:21:42.010 --> 01:21:47.980
增加英勇的消费和消费

01:21:44.890 --> 01:21:49.300
它使用oauth2 rest模板全部

01:21:47.980 --> 01:21:50.200
其余模板将发出请求

01:21:49.300 --> 01:21:52.240
到资源服务器

01:21:50.200 --> 01:21:56.500
它会自动添加

01:21:52.240 --> 01:21:59.470
用户对该请求的令牌，以及

01:21:56.500 --> 01:22:02.080
令牌存储在会话中，因此请记住

01:21:59.470 --> 01:22:04.870
整个授权码跳舞

01:22:02.080 --> 01:22:08.320
我在幻灯片中展示的所有

01:22:04.870 --> 01:22:12.150
已经为您完成了， 

01:22:08.320 --> 01:22:12.150
设置起来超级容易

01:22:21.789 --> 01:22:30.389
所以我只需要增加 spring boot 

01:22:25.210 --> 01:22:38.820
开始对客户应用程序有害

01:22:30.389 --> 01:22:40.989
这是我需要做一些改变的地方

01:22:38.820 --> 01:22:45.789
配置，使所有休息

01:22:40.989 --> 01:22:47.769
模板可以消耗可怕的东西

01:22:45.789 --> 01:22:52.570
在这里不确定我是否仍然必须这样做

01:22:47.769 --> 01:22:55.030
可以使用最新版本，所以现在

01:22:52.570 --> 01:22:58.300
实际提出菜单要求

01:22:55.030 --> 01:23:01.510
项目，并在此之前进行比较

01:22:58.300 --> 01:23:03.550
硬编码的我现在都在休息

01:23:01.510 --> 01:23:05.019
模板和所有休息模板

01:23:03.550 --> 01:23:06.760
只是一个休息模板，但在

01:23:05.019 --> 01:23:12.389
背景将扼流圈添加到

01:23:06.760 --> 01:23:12.389
请求并运行它

01:23:23.170 --> 01:23:27.870
哎呀一轮

01:23:41.500 --> 01:23:52.010
好吧，不，不对，我们走了

01:23:47.560 --> 01:23:55.670
菜单很棒，现在我们可以看到

01:23:52.010 --> 01:23:57.800
该菜单资源中的真实内容

01:23:55.670 --> 01:24:01.100
仅使用该引导程序的服务器

01:23:57.800 --> 01:24:05.360
信息，所以我们终于能够

01:24:01.100 --> 01:24:10.730
是的，是的，因此建立了联系

01:24:05.360 --> 01:24:12.770
现在它正在访问REST API 

01:24:10.730 --> 01:24:13.910
我们没时间了

01:24:12.770 --> 01:24:16.040
真正期望通过

01:24:13.910 --> 01:24:19.610
一切，但如果我要真实

01:24:16.040 --> 01:24:22.760
快速，这是每一步的全部内容

01:24:19.610 --> 01:24:24.920
为了发生的方式

01:24:22.760 --> 01:24:27.500
创造价值弗雷迪的烧烤店

01:24:24.920 --> 01:24:32.150
再次，你可以按照一个github 

01:24:27.500 --> 01:24:34.160
请给我评论，问我所有问题

01:24:32.150 --> 01:24:37.520
我所做的承诺以及为什么要做

01:24:34.160 --> 01:24:38.600
他们，我们可以继续这种联系

01:24:37.520 --> 01:24:43.940
这里

01:24:38.600 --> 01:24:45.140
我看到了问题，但是我们已经完成了

01:24:43.940 --> 01:24:46.880
向云铸造厂大声疾呼

01:24:45.140 --> 01:24:48.350
身份团队，这些家伙很棒

01:24:46.880 --> 01:24:52.580
与Majora chrisphillip合作

01:24:48.350 --> 01:24:58.060
罗宾·史瑞（Robin Shree），谢谢大家的光临

01:24:52.580 --> 01:24:58.060
我的讲话是的，谢谢

01:25:00.800 --> 01:25:20.460
好吧，提问时间，我们有几个

01:25:02.850 --> 01:25:24.470
分钟，对不起，哪一边哦

01:25:20.460 --> 01:25:24.470
是的，肯定的，是的，写下来很酷

01:25:28.520 --> 01:25:32.720
也可以随意哦，是的，肯定的

01:25:36.010 --> 01:25:45.580
是的，是的，所以当你经历

01:25:43.960 --> 01:25:47.230
这些提交，您将获得一个

01:25:45.580 --> 01:25:49.780
指向我们提供所有这些服务的地方

01:25:47.230 --> 01:25:51.640
而我只是使用所有这些本地主机

01:25:49.780 --> 01:25:54.850
网址经过硬编码，这是

01:25:51.640 --> 01:25:56.920
如果您再添加尤里卡，那么您就是

01:25:54.850 --> 01:25:59.410
休息模板，我们会知道

01:25:56.920 --> 01:26:02.880
使用功能区客户端并执行所有操作

01:25:59.410 --> 01:26:02.880
东西-是的，很好

01:26:12.530 --> 01:26:24.210
是的，请确保资源范围

01:26:21.750 --> 01:26:26.510
服务器让我们进入成品

01:26:24.210 --> 01:26:26.510
这里

01:26:45.150 --> 01:26:49.250
好的，这是菜单资源服务器

01:26:56.060 --> 01:27:06.690
我们可以看看订单申请

01:26:58.110 --> 01:27:08.730
我们无法解决这个问题，但是这个

01:27:06.690 --> 01:27:11.280
简单一点，你只说什么

01:27:08.730 --> 01:27:16.130
一个你必须有订单点

01:27:11.280 --> 01:27:23.360
管理员访问此订单的端点

01:27:16.130 --> 01:27:26.250
但您也可以使用方法安全性

01:27:23.360 --> 01:27:27.660
我添加了预先授权的注释

01:27:26.250 --> 01:27:30.060
这样就可以使用方法安全性

01:27:27.660 --> 01:27:33.980
注释和表达

01:27:30.060 --> 01:27:33.980
这样呀

01:27:42.670 --> 01:27:48.590
是的，问题是有人是否

01:27:46.550 --> 01:27:50.750
我漂亮的JWT令牌的持有

01:27:48.590 --> 01:27:52.460
暴露很多是的，这是真的，因为它

01:27:50.750 --> 01:27:55.940
是不记名令牌，表示如果您

01:27:52.460 --> 01:27:59.990
有那个令牌，你就是那个令牌

01:27:55.940 --> 01:28:03.140
是的

01:27:59.990 --> 01:28:06.530
所以在这个特定的例子中，你如何

01:28:03.140 --> 01:28:10.400
在此示例中保护您的令牌

01:28:06.530 --> 01:28:12.230
代币实际上从未离开过

01:28:10.400 --> 01:28:15.380
客户您我将令牌存储在

01:28:12.230 --> 01:28:17.330
会话，然后只有一个会话是

01:28:15.380 --> 01:28:20.240
在用户界面和

01:28:17.330 --> 01:28:23.570
弗兰克的浏览器，所以您只有一个

01:28:20.240 --> 01:28:25.760
通过HTTP和

01:28:23.570 --> 01:28:27.680
如果您必须发送，那很好

01:28:25.760 --> 01:28:29.810
该令牌发出，您仍然可以将其发送出去

01:28:27.680 --> 01:28:33.350
浏览器，但您确实需要

01:28:29.810 --> 01:28:36.020
确保通过HTTPS进行验证

01:28:33.350 --> 01:28:37.130
可以做的还可以加密令牌

01:28:36.020 --> 01:28:39.350
所以这就是它可以包含的方式

01:28:37.130 --> 01:28:41.510
敏感信息，也许

01:28:39.350 --> 01:28:44.750
你甚至都不希望弗兰克能够

01:28:41.510 --> 01:28:47.660
使用那个Jaat解码器，看看他的

01:28:44.750 --> 01:28:51.640
令牌包含您可以使用的

01:28:47.660 --> 01:28:54.050
加密它有一个叫做gwe的标准

01:28:51.640 --> 01:28:56.660
刚刚完成，没有

01:28:54.050 --> 01:28:58.370
在 Spring 还支持

01:28:56.660 --> 01:29:01.700
实际上，如果您完成我的承诺，我

01:28:58.370 --> 01:29:03.470
向您展示如何使用Zul进行加密

01:29:01.700 --> 01:29:08.870
令牌，所以你有这个好

01:29:03.470 --> 01:29:10.640
做这个很酷的小门户嗯是的

01:29:08.870 --> 01:29:16.100
多谢您的光临

01:29:10.640 --> 01:29:18.460
问题就问我，先生

01:29:16.100 --> 01:29:18.460
是的

01:29:21.719 --> 01:29:27.639
是的

01:29:22.929 --> 01:29:29.980
所以祖尔可以自动做的是

01:29:27.639 --> 01:29:31.239
令牌中继的东西

01:29:29.980 --> 01:29:33.040
文档和Spring Cloud安全性

01:29:31.239 --> 01:29:37.420
为此，但我不是很喜欢

01:29:33.040 --> 01:29:39.940
在我的示例中，我的Howell示例是

01:29:37.420 --> 01:29:42.659
真的只是用于该令牌

01:29:39.940 --> 01:29:42.659
加密解密

01:29:49.440 --> 01:29:51.500
您

