WEBVTT
Kind: captions
Language: zh-Hans

00:00:08.860 --> 00:00:16.449
大家好，欢迎来到

00:00:11.650 --> 00:00:17.860
 Spring Boot和IntelliJ ID，然后我们

00:00:16.449 --> 00:00:21.369
开始我想问几个

00:00:17.860 --> 00:00:24.849
问题，所以第一个问题是使用

00:00:21.369 --> 00:00:29.500
春天的靴子已经可以了五十

00:00:24.849 --> 00:00:33.280
使用IntelliJ ID的百分比

00:00:29.500 --> 00:00:35.290
百分之五十，所以那些不是

00:00:33.280 --> 00:00:40.629
使用IntelliJ您正在使用什么

00:00:35.290 --> 00:00:44.440
您使用eclipse osts是的，对不起

00:00:40.629 --> 00:00:48.130
 netbeans我有一个使用战争的家伙

00:00:44.440 --> 00:00:52.900
军事哦，所以你是那个家伙

00:00:48.130 --> 00:00:54.550
 NetBeans好的，不好意思，我叫

00:00:52.900 --> 00:00:56.110
蒂芙尼·科尔（Tiffany Cole），我正在为枢纽明矾工作

00:00:54.550 --> 00:00:59.680
我正在从事Spring Boot项目

00:00:56.110 --> 00:01:01.780
这是我的朋友，年轻人，是我的名字

00:00:59.680 --> 00:01:03.430
是约翰·西姆（John Simm）的阿拉伯语，代表喷气机

00:01:01.780 --> 00:01:05.470
我负责春天

00:01:03.430 --> 00:01:09.189
 Spring Boot中的框架支持

00:01:05.470 --> 00:01:16.810
正确的IntelliJ IDEA，让我们开始吧

00:01:09.189 --> 00:01:18.700
带有很多幻灯片，仅此而已

00:01:16.810 --> 00:01:21.720
对，所以您已经知道状态

00:01:18.700 --> 00:01:24.190
我欠你一个广泛的演示

00:01:21.720 --> 00:01:26.380
昨天其他主题演讲，或者如果您是

00:01:24.190 --> 00:01:28.840
到这个春季云会议这

00:01:26.380 --> 00:01:32.290
上午在广泛的展示，所以

00:01:28.840 --> 00:01:34.150
我不会再告诉你，但是

00:01:32.290 --> 00:01:37.470
真正有趣的是，如果您

00:01:34.150 --> 00:01:39.720
使用IntelliJ ID，您基本上可以

00:01:37.470 --> 00:01:43.090
立即与该服务互动

00:01:39.720 --> 00:01:44.740
直接从ID，所以我要创建

00:01:43.090 --> 00:01:48.400
我们将要使用的一个新项目

00:01:44.740 --> 00:01:51.850
今天，所以我要选择创建新的

00:01:48.400 --> 00:01:54.250
从初始化的项目，然后我可以

00:01:51.850 --> 00:01:57.280
选择我想要的服务

00:01:54.250 --> 00:01:59.439
如果有机会，请连接两个

00:01:57.280 --> 00:02:00.549
您自己定制的开始

00:01:59.439 --> 00:02:02.530
春天延迟或实际上你可以做

00:02:00.549 --> 00:02:05.920
那，但我只是要使用

00:02:02.530 --> 00:02:08.560
定期的服务，我要去

00:02:05.920 --> 00:02:11.170
保持默认状态不起作用

00:02:08.560 --> 00:02:13.840
这个墙开玩笑，我想你已经听到了

00:02:11.170 --> 00:02:15.819
在我保留所有这些之前

00:02:13.840 --> 00:02:20.050
默认是好的，我将使用

00:02:15.819 --> 00:02:21.819
最新的，我们没有，我不想

00:02:20.050 --> 00:02:22.660
将太多时间集中在 spring boot 上

00:02:21.819 --> 00:02:24.310
本身，所以我

00:02:22.660 --> 00:02:26.430
快速创建一个简单的

00:02:24.310 --> 00:02:33.040
应用程序，所以我要使用安全性

00:02:26.430 --> 00:02:38.190
 Web GPA出于某种原因，我们认为

00:02:33.040 --> 00:02:40.990
再次开玩笑，我知道执行器的H 

00:02:38.190 --> 00:02:45.910
因为很酷，我想念什么哦

00:02:40.990 --> 00:02:53.740
让我们提出测试正确的notta，我是

00:02:45.910 --> 00:02:57.960
打算打电话给那个春天一个演示，如果

00:02:53.740 --> 00:03:00.100
你基本上做到了

00:02:57.960 --> 00:03:02.290
你有一个项目，所以它实际上是

00:03:00.100 --> 00:03:03.400
接触接触开始弹簧否

00:03:02.290 --> 00:03:06.550
处理你所拥有的东西

00:03:03.400 --> 00:03:08.020
配置下载项目

00:03:06.550 --> 00:03:12.010
将项目提取到您所在的位置

00:03:08.020 --> 00:03:13.990
决定并设置所有内容

00:03:12.010 --> 00:03:15.310
我们今天要去做，因为你可能

00:03:13.990 --> 00:03:18.490
听说过弹簧靴

00:03:15.310 --> 00:03:21.520
支持j-14，这是IntelliJ 15 

00:03:18.490 --> 00:03:23.560
 EAP，我收到了一些补丁

00:03:21.520 --> 00:03:26.500
除非我们处于最前沿

00:03:23.560 --> 00:03:29.500
形状，所以请考虑IntelliJ 15 

00:03:26.500 --> 00:03:33.580
快照，如果一切都中断了

00:03:29.500 --> 00:03:35.440
无论如何我都想知道

00:03:33.580 --> 00:03:37.660
向您展示IntelliJ中的最新消息

00:03:35.440 --> 00:03:39.640
 IDEA 15，因此，如果您使用的是IntelliJ 

00:03:37.660 --> 00:03:42.700
 14你可以看到差异，所以

00:03:39.640 --> 00:03:44.830
这是新的第一件事是

00:03:42.700 --> 00:03:47.640
项目是自动创建的，因此您

00:03:44.830 --> 00:03:50.709
不必刷新或询问

00:03:47.640 --> 00:03:52.209
导入Maven泵，基本上

00:03:50.709 --> 00:03:55.030
自动完成的新事物也是

00:03:52.209 --> 00:03:56.920
您将创建一个运行配置

00:03:55.030 --> 00:03:59.830
开箱即用，可以阻止您

00:03:56.920 --> 00:04:02.590
立即，最后一件事是

00:03:59.830 --> 00:04:04.480
新的情报，如果青少年是

00:04:02.590 --> 00:04:06.820
春天打架，春天的脸对不起

00:04:04.480 --> 00:04:09.420
自动检测到，因此您不必

00:04:06.820 --> 00:04:15.630
创建它，我们稍后会谈到

00:04:09.420 --> 00:04:15.630
所以我很快就会创建一个

00:04:15.810 --> 00:04:22.510
领域模型

00:04:18.120 --> 00:04:27.550
演讲者，所以我有准备

00:04:22.510 --> 00:04:32.670
你的内容不是很有趣

00:04:27.550 --> 00:04:41.530
对，这只是一个简单的GP实体

00:04:32.670 --> 00:04:43.300
也在这里使用的存储库

00:04:41.530 --> 00:04:46.810
春季数据，您可能已经在

00:04:43.300 --> 00:04:50.470
过去，我想确保我

00:04:46.810 --> 00:04:53.890
每个实例都在我的数据存储区中

00:04:50.470 --> 00:04:56.710
我开始的时间，所以我要用一些

00:04:53.890 --> 00:04:58.570
讲者在这里很重要的续集，如果你

00:04:56.710 --> 00:05:01.630
不知道这是一个

00:04:58.570 --> 00:05:05.080
从基本上具有的功能

00:05:01.630 --> 00:05:08.580
允许您运行任何续集语句

00:05:05.080 --> 00:05:16.090
创建架构时所需的

00:05:08.580 --> 00:05:19.900
所以如果我停止了，那我会睡个午觉

00:05:16.090 --> 00:05:25.420
一堆功能，让我们

00:05:19.900 --> 00:05:28.720
看看我们这里有什么，哦，所以我需要

00:05:25.420 --> 00:05:30.850
要登录，我添加了安全启动器，因此

00:05:28.720 --> 00:05:33.520
我需要能够登录以及什么

00:05:30.850 --> 00:05:36.580
 springwood会创建默认值吗

00:05:33.520 --> 00:05:41.830
用户称为用户，任何人都知道

00:05:36.580 --> 00:05:43.510
密码可能没错，所以

00:05:41.830 --> 00:05:46.800
每次生成密码

00:05:43.510 --> 00:05:51.880
应用程序启动真的是真的

00:05:46.800 --> 00:05:54.240
重要的是，哦，这是真正的笑声

00:05:51.880 --> 00:05:58.360
那东西，然后我有我的扬声器

00:05:54.240 --> 00:06:03.460
在这里创建的，所以很容易

00:05:58.360 --> 00:06:05.440
快速，因此该密码实际上正在使用

00:06:03.460 --> 00:06:07.150
每次运行都会生成，因此

00:06:05.440 --> 00:06:09.070
每次我停止时都会改变

00:06:07.150 --> 00:06:11.860
应用程序，其制作方式

00:06:09.070 --> 00:06:14.590
您无法记住它，所以我们

00:06:11.860 --> 00:06:16.900
必须我们还要修正它

00:06:14.590 --> 00:06:19.060
让您快速了解流入点

00:06:16.900 --> 00:06:23.710
现在是空的，但我们要去

00:06:19.060 --> 00:06:26.580
解决这个问题，让我们看看如何

00:06:23.710 --> 00:06:30.720
 IntelliJ IDEA可以帮助我们

00:06:26.580 --> 00:06:33.430
自定义该应用程序，因此第一件事

00:06:30.720 --> 00:06:35.380
对于那些根本不知道的人

00:06:33.430 --> 00:06:39.669
反正观众人数可能不多

00:06:35.380 --> 00:06:42.850
 spring boot 非常丰富

00:06:39.669 --> 00:06:45.460
配置模型，所以当您使用自动

00:06:42.850 --> 00:06:47.020
配置，你想春季启动

00:06:45.460 --> 00:06:48.910
改变汽车的方式

00:06:47.020 --> 00:06:51.930
您可以提供配置

00:06:48.910 --> 00:06:53.710
使用配置密钥对其进行自定义，然后

00:06:51.930 --> 00:06:55.630
这些问题之一

00:06:53.710 --> 00:06:57.550
配置关键是您必须

00:06:55.630 --> 00:06:59.919
记住他们，找到他们所需要的一切

00:06:57.550 --> 00:07:03.280
通过谷歌的文档或堆栈

00:06:59.919 --> 00:07:05.620
什么都没溢出，那些家伙有什么

00:07:03.280 --> 00:07:08.710
内置IntelliJ IDEA的内容

00:07:05.620 --> 00:07:10.780
 IE中基于

00:07:08.710 --> 00:07:13.180
新的可用配置

00:07:10.780 --> 00:07:16.810
项目，所以我想更改密码

00:07:13.180 --> 00:07:19.720
所以让我输入pass然后我得到

00:07:16.810 --> 00:07:22.600
有关选项的内容帮助

00:07:19.720 --> 00:07:25.450
可供我使用，您可以看到

00:07:22.600 --> 00:07:27.910
我可以看到钥匙的名称

00:07:25.450 --> 00:07:31.210
显然一些文档和

00:07:27.910 --> 00:07:34.660
输入，所以说我要说

00:07:31.210 --> 00:07:36.550
改变我，那会改变我

00:07:34.660 --> 00:07:39.610
 default的默认密码

00:07:36.550 --> 00:07:41.560
默认用户我想做的下一件事

00:07:39.610 --> 00:07:43.630
说是我去点击那个

00:07:41.560 --> 00:07:45.880
当我有的方式

00:07:43.630 --> 00:07:48.039
认证爸爸告诉我， 

00:07:45.880 --> 00:07:49.979
真正在喷涂，因为那是

00:07:48.039 --> 00:07:54.130
默认值，我想更改它

00:07:49.979 --> 00:07:56.830
所以我输入真实我可以看到默认

00:07:54.130 --> 00:07:58.539
值没有默认值

00:07:56.830 --> 00:08:02.620
密码，但是有一个

00:07:58.539 --> 00:08:05.680
所以我可以看到直接写什么

00:08:02.620 --> 00:08:07.990
该键的默认值为

00:08:05.680 --> 00:08:10.830
我要说类似ello和

00:08:07.990 --> 00:08:13.620
我要从女巫那里走

00:08:10.830 --> 00:08:18.669
我会说随机属性的灵魂

00:08:13.620 --> 00:08:20.169
给我一个0到5之间的数字并使用

00:08:18.669 --> 00:08:22.180
作为一条鲸显然是

00:08:20.169 --> 00:08:24.700
完全愚蠢，但这只是为了展示

00:08:22.180 --> 00:08:27.660
你与财产的融合

00:08:24.700 --> 00:08:30.340
安提瓜的想法酱很深

00:08:27.660 --> 00:08:34.270
然后我想改变我的角色

00:08:30.340 --> 00:08:36.580
用户，所以我点击了角色，我可以看到

00:08:34.270 --> 00:08:38.349
我有这个安全用户巨魔

00:08:36.580 --> 00:08:39.760
图标，我们看不到，因为

00:08:38.349 --> 00:08:42.840
手机更大，但实际上

00:08:39.760 --> 00:08:50.460
这是一个列表，所以如果我这样做我会得到

00:08:42.840 --> 00:08:50.460
基本上支持基于此的访问

00:08:50.940 --> 00:08:58.570
我要说这也是管理员

00:08:54.610 --> 00:09:03.040
我仍然可以使用dl执行器

00:08:58.570 --> 00:09:05.140
端点，但我也可以创建任何种类的端点

00:09:03.040 --> 00:09:08.830
我想要正确的，所以可以说我是

00:09:05.140 --> 00:09:11.410
将要创建食品柜台

00:09:08.830 --> 00:09:13.210
不存在，我告诉的细节

00:09:11.410 --> 00:09:16.780
你，所以我不知道

00:09:13.210 --> 00:09:18.580
该密钥，我将在其中使用

00:09:16.780 --> 00:09:21.940
点的信息，所以我要说的是

00:09:18.580 --> 00:09:24.640
对于那些不知道信息是

00:09:21.940 --> 00:09:26.440
地图，我们将获取该地图的每个键

00:09:24.640 --> 00:09:29.050
我们揭露了印度的外来点

00:09:26.440 --> 00:09:32.050
所以基本上如果你有信息foo 

00:09:29.050 --> 00:09:33.910
等于某物，那么你会有一个

00:09:32.050 --> 00:09:36.010
条目foo等于d中的某项

00:09:33.910 --> 00:09:37.780
终结点您通常会使用的是

00:09:36.010 --> 00:09:39.610
您将要公开的名称

00:09:37.780 --> 00:09:43.360
提供服务的版本或

00:09:39.610 --> 00:09:45.240
您想要公开的任何元数据

00:09:43.360 --> 00:09:48.340
如果您想要一个简单的例子

00:09:45.240 --> 00:09:51.130
因为spring dot io是spring的展位

00:09:48.340 --> 00:09:55.780
应用程序，所以如果我继续流入

00:09:51.130 --> 00:09:57.310
点，那么我明白了，那就是

00:09:55.780 --> 00:10:01.410
您将要提供的典型信息

00:09:57.310 --> 00:10:01.410
暴露是的

00:10:03.230 --> 00:10:10.830
再次来，是的，不是因为

00:10:07.470 --> 00:10:13.890
夹克区是的，所以我们要去

00:10:10.830 --> 00:10:15.990
要做的是我们要说反

00:10:13.890 --> 00:10:18.600
我们将重用我们的密钥，我们可以

00:10:15.990 --> 00:10:23.520
看到我们在键之间也有链接

00:10:18.600 --> 00:10:26.130
我可以看到该值为42， 

00:10:23.520 --> 00:10:29.550
我可以说哦，是的，我忘了提

00:10:26.130 --> 00:10:31.680
你会看到钥匙在

00:10:29.550 --> 00:10:34.380
一个特别的亮点只是为了向您展示

00:10:31.680 --> 00:10:42.300
它实际上是地图的关键， 

00:10:34.380 --> 00:10:43.980
关键条目微妙，最后像我们

00:10:42.300 --> 00:10:46.590
稍后会看到大喊大叫

00:10:43.980 --> 00:10:48.810
我们也有额外的支持

00:10:46.590 --> 00:10:50.790
特殊键，例如，我们有一个

00:10:48.810 --> 00:10:52.430
在春季嘘记录水平

00:10:50.790 --> 00:10:55.080
您可以看到它是一张地图， 

00:10:52.430 --> 00:10:57.090
基本上你可以用它来调整

00:10:55.080 --> 00:10:59.850
日志配置，无论

00:10:57.090 --> 00:11:01.920
您正在使用的日志系统

00:10:59.850 --> 00:11:04.440
那里基本上有两个智能自动

00:11:01.920 --> 00:11:10.920
完成，因为你变得渺小

00:11:04.440 --> 00:11:13.170
完成关键权利，您

00:11:10.920 --> 00:11:15.480
也为

00:11:13.170 --> 00:11:21.060
值，我们稍后再讲

00:11:15.480 --> 00:11:27.480
在此演示文稿中，有一个

00:11:21.060 --> 00:11:30.150
错字没事，谢谢，然后如果

00:11:27.480 --> 00:11:32.520
我重新启动，我必须先登录

00:11:30.150 --> 00:11:35.460
显然再次，我只想告诉你

00:11:32.520 --> 00:11:37.740
一切都按预期工作

00:11:35.460 --> 00:11:40.290
首先，我得到这个自动

00:11:37.740 --> 00:11:42.420
配置报告，因为我将

00:11:40.290 --> 00:11:46.080
自动配置软件包以进行调试

00:11:42.420 --> 00:11:49.100
那是第一个效果，如果我走

00:11:46.080 --> 00:11:53.610
回到我的服务说你好

00:11:49.100 --> 00:11:57.210
那是随机值，改变我

00:11:53.610 --> 00:12:01.830
然后基本上我有这个酒吧

00:11:57.210 --> 00:12:04.320
不管什么权利，但我要尝试的要点

00:12:01.830 --> 00:12:05.670
在这里可以确定这些可能不是

00:12:04.320 --> 00:12:07.830
您正在寻找的定制

00:12:05.670 --> 00:12:09.240
但是，如果您正在使用弹簧

00:12:07.830 --> 00:12:12.150
良好的应用程序，你想图

00:12:09.240 --> 00:12:15.150
你有什么样的选择

00:12:12.150 --> 00:12:16.410
您可以在其中输入几个字符吗

00:12:15.150 --> 00:12:18.750
文件和

00:12:16.410 --> 00:12:21.660
弄清楚基本上住什么样的

00:12:18.750 --> 00:12:25.160
您拥有的功能也会得到

00:12:21.660 --> 00:12:29.699
只要您开箱即用进行验证

00:12:25.160 --> 00:12:34.350
激活内置的验证

00:12:29.699 --> 00:12:39.060
在本节中，因此进行编译器验证

00:12:34.350 --> 00:12:41.370
在构建中进行验证，因此15中的新功能是

00:12:39.060 --> 00:12:42.810
春季五件套创建

00:12:41.370 --> 00:12:46.139
自动为您或检测它

00:12:42.810 --> 00:12:49.139
为了你，所以你知道这个食物柜台是

00:12:46.139 --> 00:12:51.209
未知，所以它基本上告诉我

00:12:49.139 --> 00:12:55.649
在这下面我不知道

00:12:51.209 --> 00:12:57.810
关键，如果我放些废话，这是

00:12:55.649 --> 00:13:01.949
显然不是索引，我尝试

00:12:57.810 --> 00:13:03.689
重新启动我的应用程序，然后如果我们启动它

00:13:01.949 --> 00:13:06.089
告诉我基本上可以

00:13:03.689 --> 00:13:09.149
在您的配置文件中有问题，所以

00:13:06.089 --> 00:13:11.550
请修复您可以的问题

00:13:09.149 --> 00:13:13.829
显然决定你是否想要

00:13:11.550 --> 00:13:17.459
运行那些验证，但是如果您

00:13:13.829 --> 00:13:22.920
激活它的漂亮结局

00:13:17.459 --> 00:13:25.439
好吧，我想展示

00:13:22.920 --> 00:13:29.579
您一些即将到来的东西

00:13:25.439 --> 00:13:33.329
和弹簧靴103还有很多

00:13:29.579 --> 00:13:35.579
春天引入的新元数据集

00:13:33.329 --> 00:13:38.759
一三个很好，IDE可以

00:13:35.579 --> 00:13:42.089
实际利用该元数据来

00:13:38.759 --> 00:13:44.730
增强完成导航功能

00:13:42.089 --> 00:13:48.060
刚刚看到了其中的一些钥匙

00:13:44.730 --> 00:13:51.240
 IntelliJ 14我们有一些手动映射

00:13:48.060 --> 00:13:53.790
某些已知类型的某些已知密钥或

00:13:51.240 --> 00:13:57.300
该键的一些已知行为

00:13:53.790 --> 00:13:59.370
可以概括为

00:13:57.300 --> 00:14:02.009
从构建的元数据中使用或

00:13:59.370 --> 00:14:04.529
包装到弹簧靴中

00:14:02.009 --> 00:14:08.970
发行版，因此任何IDE都可以利用

00:14:04.529 --> 00:14:11.660
为用户提供的信息，因此

00:14:08.970 --> 00:14:15.809
我要告诉你的第一件事是

00:14:11.660 --> 00:14:22.520
增强了对弃用密钥的支持，因此

00:14:15.809 --> 00:14:25.850
当我开始输入一些

00:14:22.520 --> 00:14:28.100
关键部分名称，其中包含一些

00:14:25.850 --> 00:14:30.410
您将在

00:14:28.100 --> 00:14:32.420
此完成列表的底部

00:14:30.410 --> 00:14:34.790
不推荐使用的键会自动排序

00:14:32.420 --> 00:14:39.170
到最后一个位置，因为它是最

00:14:34.790 --> 00:14:40.850
不太可能用尽，如果我

00:14:39.170 --> 00:14:42.800
选择这样的钥匙，你会看到

00:14:40.850 --> 00:14:44.720
在编辑器中突出显示它是罢工

00:14:42.800 --> 00:14:46.730
是的，所以您立即看到您的

00:14:44.720 --> 00:14:49.100
升级后的应用程序

00:14:46.730 --> 00:14:51.680
到较新版本的spring boot是

00:14:49.100 --> 00:14:57.050
使用不推荐使用或不推荐使用的密钥

00:14:51.680 --> 00:15:00.800
它也告诉您这里的充值

00:14:57.050 --> 00:15:03.860
以及春季靴103的新功能

00:15:00.800 --> 00:15:08.200
元数据不仅可以

00:15:03.860 --> 00:15:16.450
复制密钥，但您也可以定义

00:15:08.200 --> 00:15:19.850
只是这里的字号

00:15:16.450 --> 00:15:22.280
更换钥匙，所以我们看到这个钥匙

00:15:19.850 --> 00:15:25.730
已弃用，我们有一个参考

00:15:22.280 --> 00:15:30.680
当前键为空或更新后的键

00:15:25.730 --> 00:15:32.450
您应该使用哪个，以便您可以去

00:15:30.680 --> 00:15:34.520
并手动更改，但这就是

00:15:32.450 --> 00:15:38.000
愚蠢的，因为我们已经知道了

00:15:34.520 --> 00:15:40.490
我们都知道我们最喜欢的快捷方式

00:15:38.000 --> 00:15:43.390
这都是引发危险的危险

00:15:40.490 --> 00:15:46.490
意图或快速修复IntelliJ和

00:15:43.390 --> 00:15:49.880
我们将使用新意图替换

00:15:46.490 --> 00:15:56.270
他做了新的替换密钥， 

00:15:49.880 --> 00:15:58.340
我们完成了有关

00:15:56.270 --> 00:16:00.830
应用程序我们还可以添加元数据

00:15:58.340 --> 00:16:03.980
关于这种弃用的原因，所以

00:16:00.830 --> 00:16:06.850
您可以告诉用户为什么

00:16:03.980 --> 00:16:10.430
应用程序被引入

00:16:06.850 --> 00:16:12.230
警察在那里是众所周知的，因为我们

00:16:10.430 --> 00:16:17.090
搞砸了这个名字，所以我们不知道

00:16:12.230 --> 00:16:20.450
你知道吗，另一个区域是

00:16:17.090 --> 00:16:22.190
不支持给定的值列表

00:16:20.450 --> 00:16:26.020
所以如果你有一些财产是

00:16:22.190 --> 00:16:28.310
字符串类型值，不是它的类型

00:16:26.020 --> 00:16:31.160
通常您想提供一个清单

00:16:28.310 --> 00:16:32.290
该键的已知值，即

00:16:31.160 --> 00:16:35.160
在不可能

00:16:32.290 --> 00:16:42.130
 Springwood 123发布元数据和

00:16:35.160 --> 00:16:46.149
此密钥的一个示例是

00:16:42.130 --> 00:16:52.269
有一个已知值列表

00:16:46.149 --> 00:16:54.790
对于此配置密钥有效，我们

00:16:52.269 --> 00:16:57.970
还增强了文档视图

00:16:54.790 --> 00:17:00.490
您可以看到带有非值列表的键

00:16:57.970 --> 00:17:02.110
这张桌子在左边

00:17:00.490 --> 00:17:05.140
有效值在右边

00:17:02.110 --> 00:17:08.290
旁边有一个描述

00:17:05.140 --> 00:17:10.569
存储在spring boot的元数据中

00:17:08.290 --> 00:17:13.799
给你一些提示

00:17:10.569 --> 00:17:17.559
值将在运行时触发，并且

00:17:13.799 --> 00:17:19.360
您也可以在此处查看文档

00:17:17.559 --> 00:17:22.000
完成谚语，所以这很容易

00:17:19.360 --> 00:17:27.880
弄清楚该价值将如何发展

00:17:22.000 --> 00:17:35.190
在运行时要做的另一项重大改进

00:17:27.880 --> 00:17:37.690
对不起，我是一个建筑支持

00:17:35.190 --> 00:17:39.700
现在应该提到ian是

00:17:37.690 --> 00:17:42.909
实际上今天在法国人身上打字

00:17:39.700 --> 00:17:44.980
是的，这很奇怪，但我

00:17:42.909 --> 00:17:48.970
试图让我在我身边忍受

00:17:44.980 --> 00:17:51.190
尝试找到枚举的键，所以在

00:17:48.970 --> 00:17:53.740
当然有固定的一组

00:17:51.190 --> 00:17:58.960
你知道的值城堡领域是

00:17:53.740 --> 00:18:01.770
有效，此键引用一个枚举

00:17:58.960 --> 00:18:04.179
在这种情况下的确认模式

00:18:01.770 --> 00:18:06.070
自动的值

00:18:04.179 --> 00:18:09.669
现在建议在完成弹出

00:18:06.070 --> 00:18:12.130
再次在这里您可以看到文档

00:18:09.669 --> 00:18:14.890
实际上是从

00:18:12.130 --> 00:18:16.630
 CM的Javadoc，即使您

00:18:14.890 --> 00:18:20.340
有自己的配置键

00:18:16.630 --> 00:18:22.480
并且您引用了一些枚举属性和

00:18:20.340 --> 00:18:24.370
既然您是一名优秀的开发人员，您将

00:18:22.480 --> 00:18:26.650
已经写了一些Java文档

00:18:24.370 --> 00:18:31.600
任何人都可以弄清楚这个枚举是什么

00:18:26.650 --> 00:18:34.030
价值将要做，并且再次相同

00:18:31.600 --> 00:18:35.679
可用的值列表和概述

00:18:34.030 --> 00:18:37.210
这里的文档视图

00:18:35.679 --> 00:18:40.980
表示与

00:18:37.210 --> 00:18:43.450
固定的一组手动定义的值

00:18:40.980 --> 00:18:44.510
再次取值和描述取自

00:18:43.450 --> 00:18:47.300
 Java文档

00:18:44.510 --> 00:18:50.690
非常容易理解和提供

00:18:47.300 --> 00:18:56.000
为您的用户提供内容帮助

00:18:50.690 --> 00:18:59.420
你的启动和扩展好了，那就是

00:18:56.000 --> 00:19:02.180
不是现在接受治疗的孩子

00:18:59.420 --> 00:19:10.120
特别是我们的配置属性

00:19:02.180 --> 00:19:13.600
指着玻璃杯，让我找到一个

00:19:10.120 --> 00:19:18.920
 spring数据源类型，例如和

00:19:13.600 --> 00:19:21.050
该文档告诉我们，这是

00:19:18.920 --> 00:19:23.660
连接的完全限定名称

00:19:21.050 --> 00:19:26.030
池实施应是

00:19:23.660 --> 00:19:28.940
使用它通常是自动检测到的，但是

00:19:26.030 --> 00:19:32.950
仅用于演示目的

00:19:28.940 --> 00:19:36.200
是一个非常好的演示控制空间， 

00:19:32.950 --> 00:19:38.350
您会自动过滤出以下列表

00:19:36.200 --> 00:19:41.390
任何课程的完成建议

00:19:38.350 --> 00:19:43.670
匹配所需的基类数据

00:19:41.390 --> 00:19:47.240
在这种情况下，您可以点击

00:19:43.670 --> 00:19:51.110
返回并做一件事要提

00:19:47.240 --> 00:19:54.590
无论您拥有什么价值， 

00:19:51.110 --> 00:19:56.810
指包装或类或

00:19:54.590 --> 00:19:58.640
完全支持的东西

00:19:56.810 --> 00:20:01.790
重构，因此无论何时您更改自己的

00:19:58.640 --> 00:20:03.230
类或用于

00:20:01.790 --> 00:20:05.210
您配置中的值

00:20:03.230 --> 00:20:06.920
文件将自动反映

00:20:05.210 --> 00:20:10.700
为你，所以它真的了解

00:20:06.920 --> 00:20:15.340
类包之间的连接

00:20:10.700 --> 00:20:18.340
随便说什么

00:20:15.340 --> 00:20:18.340
对

00:20:22.660 --> 00:20:34.160
对不起，好吧，是的，这个问题

00:20:31.330 --> 00:20:35.750
是的，问题是我们如何找到

00:20:34.160 --> 00:20:38.299
关于这些价值观，我们怎么知道

00:20:35.750 --> 00:20:40.460
我们将要提出什么建议

00:20:38.299 --> 00:20:42.049
几分钟后看一下

00:20:40.460 --> 00:20:44.539
看一下实际的元数据

00:20:42.049 --> 00:20:52.000
所有这些魔术背后，我们要去

00:20:44.539 --> 00:20:54.500
添加一些关于这个好的演示

00:20:52.000 --> 00:21:00.919
另一件事是很常见的

00:20:54.500 --> 00:21:03.409
例如内容类型，在这里您

00:21:00.919 --> 00:21:05.690
获取已知的完整列表

00:21:03.409 --> 00:21:09.049
内容类型，因此很容易

00:21:05.690 --> 00:21:11.419
选择一个您想要的数据屏幕

00:21:09.049 --> 00:21:14.390
媒体紧Bai的贝利，如果您想知道正确的话

00:21:11.419 --> 00:21:18.020
这样就会自动存在

00:21:14.390 --> 00:21:20.440
该类型的任何财产，以及

00:21:18.020 --> 00:21:24.200
类似的东西可用于

00:21:20.440 --> 00:21:25.760
编码，所以您可能需要或想要

00:21:24.200 --> 00:21:28.789
设置一些编码，例如

00:21:25.760 --> 00:21:30.679
发送邮件等等

00:21:28.789 --> 00:21:34.340
您将获得已知编码的完整列表

00:21:30.679 --> 00:21:37.250
因此提供完成非常容易

00:21:34.340 --> 00:21:41.390
为此，如果我们改变

00:21:37.250 --> 00:21:42.860
正确的旗帜，所以每个人都最后

00:21:41.390 --> 00:21:46.630
前面的春季引导横幅

00:21:42.860 --> 00:21:50.600
特别是在前期或朋友乔什和

00:21:46.630 --> 00:21:52.100
实际上可以更改扳手，因此

00:21:50.600 --> 00:21:54.890
也许你想拥有你的公司

00:21:52.100 --> 00:21:57.320
标语或您项目的标语

00:21:54.890 --> 00:22:00.530
你正在努力，这很容易

00:21:57.320 --> 00:22:03.740
这样做的属性是横幅

00:22:00.530 --> 00:22:06.260
点位置，它具有默认值

00:22:03.740 --> 00:22:09.650
类通过资源，所以这是

00:22:06.260 --> 00:22:13.690
实际上是Spring io资源参考

00:22:09.650 --> 00:22:17.330
或您可以修改的属性

00:22:13.690 --> 00:22:23.809
所以让我们添加自己的横幅

00:22:17.330 --> 00:22:25.250
我就叫它春天一

00:22:23.809 --> 00:22:31.350
例如

00:22:25.250 --> 00:22:35.840
所以160年春天我将创建

00:22:31.350 --> 00:22:35.840
火和上课合格

00:22:38.820 --> 00:22:44.700
而斯特凡足够好准备

00:22:42.040 --> 00:22:48.520
美观的生活模板

00:22:44.700 --> 00:22:52.180
弹出一个徽标，正如您所期望的

00:22:48.520 --> 00:22:54.100
到目前为止，intellij知道这是一个

00:22:52.180 --> 00:22:59.170
参考我们的班级密码来源

00:22:54.100 --> 00:23:02.680
导航完成并再次

00:22:59.170 --> 00:23:04.690
课程重构，因此任何春季IO点

00:23:02.680 --> 00:23:07.270
资源类型将在

00:23:04.690 --> 00:23:09.090
如果你有这样的方式自动

00:23:07.270 --> 00:23:16.810
自己的配置属性

00:23:09.090 --> 00:23:20.140
元数据正确，没错，没关系

00:23:16.810 --> 00:23:22.890
能够展示黄色格式是

00:23:20.140 --> 00:23:26.980
年轻的线人是新事物， 

00:23:22.890 --> 00:23:30.070
 IntelliJ 15请注意，这仍然是一项工作

00:23:26.980 --> 00:23:33.940
在进行中，我有一些已知的怪癖

00:23:30.070 --> 00:23:38.470
很快就要为他们工作

00:23:33.940 --> 00:23:43.030
人们问这个，所以我们不得不做

00:23:38.470 --> 00:23:49.660
因为未知原因

00:23:43.030 --> 00:23:53.470
我有些人喜欢Yama，所以让我们

00:23:49.660 --> 00:23:55.840
增加字体大小是的，所以基本上

00:23:53.470 --> 00:23:57.760
你得到严格的完成

00:23:55.840 --> 00:24:02.170
您会期望我们再次使用

00:23:57.760 --> 00:24:06.490
相同的元数据，只是一个永

00:24:02.170 --> 00:24:08.910
它又说你可以控制点击这里

00:24:06.490 --> 00:24:11.650
转到此键的定义

00:24:08.910 --> 00:24:13.710
滑雪的肩膀记录

00:24:11.650 --> 00:24:16.750
大致相同的水平

00:24:13.710 --> 00:24:20.350
应用程序属性，但仍然具有

00:24:16.750 --> 00:24:21.880
有些东西还不见了，但我们

00:24:20.350 --> 00:24:23.920
真的想有同年级

00:24:21.880 --> 00:24:26.650
所以你必须自由选择

00:24:23.920 --> 00:24:31.930
您喜欢的任何配置格式

00:24:26.650 --> 00:24:34.570
在您的项目中，所以我们仍然

00:24:31.930 --> 00:24:38.800
这个黄色的虫子你是食物吗

00:24:34.570 --> 00:24:41.470
反对那是的，它有一个不错的

00:24:38.800 --> 00:24:43.180
值，但仍然是 spring boot 

00:24:41.470 --> 00:24:45.750
 IntelliJ告诉我不知道

00:24:43.180 --> 00:24:49.000
关于它的任何事情都是显而易见的，因为

00:24:45.750 --> 00:24:50.650
我们现在使用的所有其他键

00:24:49.000 --> 00:24:53.740
在配置文件中

00:24:50.650 --> 00:24:56.320
背后有某种元数据，所以

00:24:53.740 --> 00:25:00.610
现在我们来看看

00:24:56.320 --> 00:25:02.680
魔术即将发生，所以那里

00:25:00.610 --> 00:25:06.210
已经是IntelliJ中的快速修复

00:25:02.680 --> 00:25:09.220
 14定义这样的附加元数据

00:25:06.210 --> 00:25:11.950
基本上是一些男人

00:25:09.220 --> 00:25:16.480
定义配置键并给他们

00:25:11.950 --> 00:25:19.420
一些魔术，所以再次进入都是你的

00:25:16.480 --> 00:25:21.580
最好的朋友，我们可以快速解决

00:25:19.420 --> 00:25:23.380
定义这个配置键是

00:25:21.580 --> 00:25:27.880
在现有方法中找不到

00:25:23.380 --> 00:25:33.190
元数据，所以有一些规则

00:25:27.880 --> 00:25:36.070
在我们后面，这些额外的元数据必须

00:25:33.190 --> 00:25:38.040
在称为“附加”的文件中定义

00:25:36.070 --> 00:25:41.110
 JM和

00:25:38.040 --> 00:25:43.690
它应存储在资源路由中

00:25:41.110 --> 00:25:45.580
在您的项目中，我们没有这样的文件

00:25:43.690 --> 00:25:48.670
所以IntelliJ问我想做什么

00:25:45.580 --> 00:25:52.540
创建此文件并向我提供以下列表

00:25:48.670 --> 00:25:54.520
已知的资源路线，所以我们只有

00:25:52.540 --> 00:25:58.420
一年，所以我要在这里创建

00:25:54.520 --> 00:26:01.630
这基本上是后面的比赛

00:25:58.420 --> 00:26:03.700
所有这些配置密钥完成

00:26:01.630 --> 00:26:07.330
导航之类的东西

00:26:03.700 --> 00:26:10.150
基本上存储了元数据，杰森和

00:26:07.330 --> 00:26:12.910
我们将看看到底能做什么

00:26:10.150 --> 00:26:15.820
在这里或必须定义，因此第一个

00:26:12.910 --> 00:26:19.750
事情当然是name属性，所以

00:26:15.820 --> 00:26:21.460
它必须具有唯一的名称类型

00:26:19.750 --> 00:26:23.740
定义此配置的类型

00:26:21.460 --> 00:26:26.770
关键，我们要在这里更改它

00:26:23.740 --> 00:26:29.350
因为42显然是

00:26:26.770 --> 00:26:31.420
数字比字符串也许再次自动

00:26:29.350 --> 00:26:38.680
完成重构为端口

00:26:31.420 --> 00:26:41.230
这里也有这把钥匙

00:26:38.680 --> 00:26:44.190
描述和IntelliJ已经

00:26:41.230 --> 00:26:47.290
为我们提供了一些虚拟文字， 

00:26:44.190 --> 00:26:50.560
这是一件有趣的事情

00:26:47.290 --> 00:26:52.630
文字后面有一些规则，就像

00:26:50.560 --> 00:26:55.030
 Java doc将使用第一句话

00:26:52.630 --> 00:26:57.040
简短说明，这是

00:26:55.030 --> 00:26:58.840
我们之前看到的简短描述

00:26:57.040 --> 00:27:01.030
自动补全列表

00:26:58.840 --> 00:27:03.220
完成了的负值

00:27:01.030 --> 00:27:05.679
例子花了

00:27:03.220 --> 00:27:07.960
 javadoc的第一句

00:27:05.679 --> 00:27:10.120
只需将其显示为快速文档即可

00:27:07.960 --> 00:27:11.980
完整的文档将显示在

00:27:10.120 --> 00:27:14.470
完整的Java然后完整的

00:27:11.980 --> 00:27:18.340
我们所拥有的文档视图

00:27:14.470 --> 00:27:21.070
值和说明表，因此

00:27:18.340 --> 00:27:23.880
有一些规则，我们可以

00:27:21.070 --> 00:27:26.919
触发它可能很难看

00:27:23.880 --> 00:27:30.610
在Beamer上，但是有错误

00:27:26.919 --> 00:27:33.190
现在我们在第一个之后没有点

00:27:30.610 --> 00:27:34.900
句子，IntelliJ提醒我们

00:27:33.190 --> 00:27:39.400
第一句话后有这扇门

00:27:34.900 --> 00:27:45.700
这样IDE可以提取有用的使用

00:27:39.400 --> 00:27:49.780
第一份Creek文档，还有什么

00:27:45.700 --> 00:27:52.419
我们可以在这里定义一些事情吗

00:27:49.780 --> 00:27:54.220
实际上有点值默认值

00:27:52.419 --> 00:27:56.289
会是下一件事，或者我们看到了一些

00:27:54.220 --> 00:27:58.600
具有默认值的属性

00:27:56.289 --> 00:28:02.260
例如横幅位置

00:27:58.600 --> 00:28:06.730
做了一样持久，这是自动的

00:28:02.260 --> 00:28:08.650
在这里完成IntelliJ知道可以

00:28:06.730 --> 00:28:14.039
在此元数据中，什么不在

00:28:08.650 --> 00:28:16.500
工作位置，所以我们要设定42 

00:28:14.039 --> 00:28:28.350
对不起

00:28:16.500 --> 00:28:30.270
我向是的，对此有一些规定

00:28:28.350 --> 00:28:32.270
元数据，它们在

00:28:30.270 --> 00:28:34.680
 Spring root参考文档

00:28:32.270 --> 00:28:36.300
如果你去最高的地方

00:28:34.680 --> 00:28:38.730
文档参考，您将拥有

00:28:36.300 --> 00:28:40.230
基本上是一个出现部分

00:28:38.730 --> 00:28:42.480
告诉你如何处理

00:28:40.230 --> 00:28:45.240
是的，如果你是

00:28:42.480 --> 00:28:46.800
想知道在这一点上你们是否

00:28:45.240 --> 00:28:48.840
为每个人手写

00:28:46.800 --> 00:28:51.030
你拥有的财产可能是

00:28:48.840 --> 00:28:52.290
噩梦吧，没人这样做

00:28:51.030 --> 00:28:54.030
我们将向您展示如何

00:28:52.290 --> 00:28:56.160
自动生成，但仅用于

00:28:54.030 --> 00:28:58.920
完整性，因为有时

00:28:56.160 --> 00:29:01.710
特别是在每种情况下

00:28:58.920 --> 00:29:04.010
无法使用自动方式的地方

00:29:01.710 --> 00:29:07.680
由于某种原因，所以我们需要一种方法

00:29:04.010 --> 00:29:10.320
也可以手动指定

00:29:07.680 --> 00:29:11.880
实际上在春季广泛使用

00:29:10.320 --> 00:29:13.620
自行启动，我们将向您展示

00:29:11.880 --> 00:29:15.120
现在和之后，我们将展示

00:29:13.620 --> 00:29:18.090
你真正应该使用的东西

00:29:15.120 --> 00:29:21.270
没错，但这澄清了它的工作原理

00:29:18.090 --> 00:29:24.570
在幕后好吧希望如此

00:29:21.270 --> 00:29:28.530
还有一些属性

00:29:24.570 --> 00:29:32.880
快速参考，我们已弃用，因此

00:29:28.530 --> 00:29:38.280
在我付出之前，我们已经看到了行动

00:29:32.880 --> 00:29:40.590
这是申请的原因，所以你

00:29:38.280 --> 00:29:44.340
想复制我的内容，不好

00:29:40.590 --> 00:29:46.710
只是展示谢谢，正如我们所见

00:29:44.340 --> 00:29:49.290
有可能用指定

00:29:46.710 --> 00:29:51.420
再次更换钥匙，我们有自动

00:29:49.290 --> 00:29:53.460
完成一次又一次，我们有自动

00:29:51.420 --> 00:29:56.280
完成这里参考其他

00:29:53.460 --> 00:30:00.390
我们希望用户在

00:29:56.280 --> 00:30:02.340
未来当然这是不必要的

00:30:00.390 --> 00:30:06.210
为了我们的示范，所以我要

00:30:02.340 --> 00:30:09.800
删除它，也许您会注意到这一点

00:30:06.210 --> 00:30:12.420
在编辑器顶部给红色横幅打分

00:30:09.800 --> 00:30:14.570
它太小了，无法阅读

00:30:12.420 --> 00:30:16.860
屏幕上显示Spring Boot配置

00:30:14.570 --> 00:30:19.710
注解过程不皱眉

00:30:16.860 --> 00:30:23.220
班级通行证

00:30:19.710 --> 00:30:25.770
问题是这个杰森如何得到

00:30:23.220 --> 00:30:29.250
处理成我们可以使用的东西

00:30:25.770 --> 00:30:31.980
在IDE或运行时使用此功能

00:30:29.250 --> 00:30:33.870
元数据，而且您会猜到

00:30:31.980 --> 00:30:36.899
与此相关的注释处理器

00:30:33.870 --> 00:30:39.809
魔法将带走我们的额外

00:30:36.899 --> 00:30:42.330
 spring config元数据处理它

00:30:39.809 --> 00:30:43.950
以某种方式将其与其他方式混合，如果

00:30:42.330 --> 00:30:47.850
电话将在之后演示

00:30:43.950 --> 00:30:49.860
我并生成我们实际上的元数据

00:30:47.850 --> 00:30:52.590
将要在IDE中使用，所以这是

00:30:49.860 --> 00:30:55.080
元数据的源文件格式

00:30:52.590 --> 00:30:57.149
手动元数据将被转换

00:30:55.080 --> 00:31:00.950
变成稍微不同的东西

00:30:57.149 --> 00:31:04.890
没什么不同，所以我们必须解决这个问题

00:31:00.950 --> 00:31:06.990
让我们去我们的行家吧

00:31:04.890 --> 00:31:08.909
如果我能做的话，我很高兴牙科坝横幅

00:31:06.990 --> 00:31:11.659
肯定会适合我，是的

00:31:08.909 --> 00:31:14.669
看到我会很好，这会完成的

00:31:11.659 --> 00:31:17.720
好吧，他说会做到的，所以我们

00:31:14.669 --> 00:31:17.720
以为你不知道

00:31:24.940 --> 00:31:30.010
所以我们必须找到这个 spring boot 

00:31:27.760 --> 00:31:32.860
配置处理器将其添加为

00:31:30.010 --> 00:31:36.310
依赖关系，因为它是一个注释

00:31:32.860 --> 00:31:39.670
处理器，它是一个可选的依赖项

00:31:36.310 --> 00:31:42.940
所以不要忘记添加可选的true 

00:31:39.670 --> 00:31:45.010
在这里，这基本上是

00:31:42.940 --> 00:31:47.650
作为编译器的一部分运行

00:31:45.010 --> 00:31:49.600
所以只有编译需要

00:31:47.650 --> 00:31:50.950
阶段，所以基本上要看一下

00:31:49.600 --> 00:31:52.690
项目的来源并执行

00:31:50.950 --> 00:31:55.000
一会儿我们会看到的

00:31:52.690 --> 00:31:56.980
它在它上面做什么，但现在

00:31:55.000 --> 00:31:59.740
这就是我们要做的

00:31:56.980 --> 00:32:02.590
展示是否通过了这个额外的

00:31:59.740 --> 00:32:04.660
元数据文件对其进行验证，然后

00:32:02.590 --> 00:32:06.580
在石头的位置生成文件

00:32:04.660 --> 00:32:09.160
在您的Java的jar文件中

00:32:06.580 --> 00:32:12.730
实际上是项目，然后ID可以

00:32:09.160 --> 00:32:15.570
为您选择合适的，所以我首先

00:32:12.730 --> 00:32:20.950
告诉IntelliJ导入我的

00:32:15.570 --> 00:32:22.390
掌心和这丹尼尔的变化

00:32:20.950 --> 00:32:26.050
不应该在10个燃烧器中准备好

00:32:22.390 --> 00:32:27.820
不应该读太多，那又怎样

00:32:26.050 --> 00:32:29.620
它现在显示的是我们运行弹簧靴

00:32:27.820 --> 00:32:32.890
配置注释处理器

00:32:29.620 --> 00:32:36.610
更新生成的元数据，以便我们

00:32:32.890 --> 00:32:40.570
要做这个重建项目

00:32:36.610 --> 00:32:42.730
注释处理器将立即启动

00:32:40.570 --> 00:32:48.610
我们还有警告吗？ 

00:32:42.730 --> 00:32:50.860
需要再次运行它，您可以

00:32:48.610 --> 00:32:53.790
现在看一下注解

00:32:50.860 --> 00:32:53.790
详细过程

00:32:55.450 --> 00:32:59.750
这是产生的元数据

00:32:57.919 --> 00:33:01.760
现在生成注释过程

00:32:59.750 --> 00:33:04.159
从我们的其他元数据中

00:33:01.760 --> 00:33:06.590
指定了一些手动键和手册

00:33:04.159 --> 00:33:08.779
这些键没有的属性

00:33:06.590 --> 00:33:12.740
看起来和我们刚才的太不同了

00:33:08.779 --> 00:33:15.110
手动编辑，但也许您会注意到

00:33:12.740 --> 00:33:16.640
已经有其他财产了

00:33:15.110 --> 00:33:18.890
提示这里是空的，因为我们

00:33:16.640 --> 00:33:24.140
没有指定任何内容，因此发生了一些事情

00:33:18.890 --> 00:33:27.169
现在关闭圆圈或食物

00:33:24.140 --> 00:33:30.649
柜台财产不是未知财产

00:33:27.169 --> 00:33:35.899
在IDE中并在春季运行时

00:33:30.649 --> 00:33:39.049
我们会得到同等水平的支持吗

00:33:35.899 --> 00:33:41.179
我们看到了春天有罪的春天

00:33:39.049 --> 00:33:43.279
随附的启动配置键

00:33:41.179 --> 00:33:46.460
春天很好，所以我们有一个描述我们

00:33:43.279 --> 00:33:48.080
可以指定各种其他

00:33:46.460 --> 00:33:52.130
我们要存储在此密钥中的元数据

00:33:48.080 --> 00:33:53.779
我可以控制点击它

00:33:52.130 --> 00:33:56.149
实际上将带我进入元数据

00:33:53.779 --> 00:33:58.610
在我的项目中声明，因为它

00:33:56.149 --> 00:34:01.159
知道这是我的附加钥匙

00:33:58.610 --> 00:34:04.010
在此配置中指定

00:34:01.159 --> 00:34:05.240
文件，所以每当我需要更改时

00:34:04.010 --> 00:34:07.820
你可以控制的东西

00:34:05.240 --> 00:34:13.730
单击此处并继续编辑

00:34:07.820 --> 00:34:16.429
到目前为止关于手册的元数据

00:34:13.730 --> 00:34:19.280
元数据听起来很复杂，但

00:34:16.429 --> 00:34:20.899
它实际上不是很复杂，但是

00:34:19.280 --> 00:34:23.629
现在斯特凡会告诉你你真正的

00:34:20.899 --> 00:34:27.290
想在自己的项目中做正确的事

00:34:23.629 --> 00:34:30.080
是的，这里要记住的是

00:34:27.290 --> 00:34:34.580
刚才显示的是这是一个关键

00:34:30.080 --> 00:34:35.810
蒸汽键正确，所以我看到好像

00:34:34.580 --> 00:34:37.520
有一个应用程序，你想

00:34:35.810 --> 00:34:39.320
公开配置密钥，或者如果您有

00:34:37.520 --> 00:34:41.899
如果您有共享的图书馆

00:34:39.320 --> 00:34:43.669
在几个团队之间，你想让

00:34:41.899 --> 00:34:45.950
他们知道如何使用您的应用或

00:34:43.669 --> 00:34:48.919
你的图书馆，那么你可以揭露那些

00:34:45.950 --> 00:34:51.080
元数据，只要他们使用ID 

00:34:48.919 --> 00:34:53.330
支持他们所使用的元数据

00:34:51.080 --> 00:34:55.940
现在都做，所以显然有支持

00:34:53.330 --> 00:34:59.060
在IntelliJ IDEA中嵌套yes，然后在

00:34:55.940 --> 00:35:02.240
垃圾箱，他们实际上可以活下来

00:34:59.060 --> 00:35:04.820
从你的东西的文档，所以我想要

00:35:02.240 --> 00:35:07.010
扩展一点并显示

00:35:04.820 --> 00:35:08.599
您向我们提供了一些新的元数据

00:35:07.010 --> 00:35:13.460
介绍了

00:35:08.599 --> 00:35:18.869
弹簧靴103第一个是int 

00:35:13.460 --> 00:35:22.799
好吧，我不在正确的地方是

00:35:18.869 --> 00:35:25.500
基本上是提供额外的方式

00:35:22.799 --> 00:35:27.869
有关密钥的信息，还有

00:35:25.500 --> 00:35:30.000
您可以用它做两件事

00:35:27.869 --> 00:35:35.280
提供值，因此您已经看到了

00:35:30.000 --> 00:35:39.450
与演示与

00:35:35.280 --> 00:35:42.270
使DD休眠很多滞后，我可以

00:35:39.450 --> 00:35:47.369
提供描述和一些东西

00:35:42.270 --> 00:35:49.890
这样的权利，为了

00:35:47.369 --> 00:35:59.670
演示我要添加一个新的额外

00:35:49.890 --> 00:36:06.150
重视这样的权利，所以如果我

00:35:59.670 --> 00:36:09.140
添加该元数据，然后我得到然后我得到

00:36:06.150 --> 00:36:13.230
 ID中的其他帮助

00:36:09.140 --> 00:36:16.619
希望以后我需要做

00:36:13.230 --> 00:36:18.900
那可能就是我想念的，所以你得到了

00:36:16.619 --> 00:36:20.400
与第一个相同的自动完成

00:36:18.900 --> 00:36:23.760
您已经播种了，但是请记住

00:36:20.400 --> 00:36:26.460
那是你自己的钥匙好吧，不是一个

00:36:23.760 --> 00:36:29.520
春天蓝色所以我的另一件事

00:36:26.460 --> 00:36:32.849
当然，如果我正在这样做，那是对的

00:36:29.520 --> 00:36:35.430
现在，因为我提供了两个值，而我

00:36:32.849 --> 00:36:37.589
没告诉我我什么都没提供

00:36:35.430 --> 00:36:40.170
额外的信息，那么什么春天会

00:36:37.589 --> 00:36:42.540
考虑和IntelliJ IDEA认为是

00:36:40.170 --> 00:36:44.700
那就是这的价值清单

00:36:42.540 --> 00:36:46.890
键可以按住，如果您提供值

00:36:44.700 --> 00:36:50.430
那不在那个列表中那不是

00:36:46.890 --> 00:36:54.059
我想确保一个有效值

00:36:50.430 --> 00:36:55.589
可以提供任何额外的价值，以便

00:36:54.059 --> 00:36:57.990
基本上，值列表应该是

00:36:55.589 --> 00:37:00.960
被视为任何

00:36:57.990 --> 00:37:03.380
额外的价值可能也会这样做

00:37:00.960 --> 00:37:08.670
为此，我将向您展示一个额外的内容

00:37:03.380 --> 00:37:12.260
称为提供者的功能

00:37:08.670 --> 00:37:14.700
创建那个提供者实际上是

00:37:12.260 --> 00:37:17.190
我会看到的特殊名称是

00:37:14.700 --> 00:37:20.010
在春季引导元数据123中提供

00:37:17.190 --> 00:37:20.740
我们提供官方供应商清单

00:37:20.010 --> 00:37:22.990
然后

00:37:20.740 --> 00:37:25.980
我应该拿起，然后

00:37:22.990 --> 00:37:28.690
支持自动补全功能

00:37:25.980 --> 00:37:31.540
这些是我们支持的

00:37:28.690 --> 00:37:34.960
那一刻，所以我要告诉你的是

00:37:31.540 --> 00:37:37.000
现在是任何意味着值就是

00:37:34.960 --> 00:37:39.160
提示和任何额外的价值都可以

00:37:37.000 --> 00:37:40.660
显然，它必须是一个整数，但

00:37:39.160 --> 00:37:46.660
如果我选择任何额外的价值都可以

00:37:40.660 --> 00:37:49.420
那，我们处理，然后我的事会去

00:37:46.660 --> 00:37:56.800
马上我可以提供额外的价值

00:37:49.420 --> 00:37:58.960
现在您有时间提取我们

00:37:56.800 --> 00:38:01.930
就在那儿好吧，所以我想展示

00:37:58.960 --> 00:38:03.880
关于额外的一件事

00:38:01.930 --> 00:38:10.410
元数据，因此让我创建

00:38:03.880 --> 00:38:14.140
一个额外的属性，假设它是

00:38:10.410 --> 00:38:17.050
 java.lang.string，我认为就是这样

00:38:14.140 --> 00:38:19.090
对，这已经足够了，但让我们看看

00:38:17.050 --> 00:38:21.580
由于某些原因，你们中的许多人可能

00:38:19.090 --> 00:38:24.750
拥有这实际上不是简单的

00:38:21.580 --> 00:38:27.280
字符串，这是春豆的名称

00:38:24.750 --> 00:38:29.140
由于某些原因，您需要外部化

00:38:27.280 --> 00:38:30.640
我们实际上在

00:38:29.140 --> 00:38:32.350
您需要的配置项

00:38:30.640 --> 00:38:36.190
外部化梁的名称

00:38:32.350 --> 00:38:38.500
将用于任何服务，所以

00:38:36.190 --> 00:38:41.260
代替这种烧烤会很好

00:38:38.500 --> 00:38:44.230
如果可以得到帮助，请响

00:38:41.260 --> 00:38:46.500
从ID列出您所有的豆子

00:38:44.230 --> 00:38:48.640
定义为与某种类型匹配的

00:38:46.500 --> 00:38:52.020
所以这就是我要做的

00:38:48.640 --> 00:38:56.500
将在此处创建一个额外的int条目

00:38:52.020 --> 00:39:01.080
我要说足球我要去

00:38:56.500 --> 00:39:05.710
说我在提供者上，让我们看看

00:39:01.080 --> 00:39:08.170
春天豆参考，这需要

00:39:05.710 --> 00:39:10.869
一些参数说明了一切

00:39:08.170 --> 00:39:14.650
在描述的

00:39:10.869 --> 00:39:17.619
文档，以便您获取完整内容

00:39:14.650 --> 00:39:21.820
再次协助，所以我要说不

00:39:17.619 --> 00:39:24.850
让你困惑，我说我有两个

00:39:21.820 --> 00:39:29.490
我没有在应用中输入整数类型的垃圾箱

00:39:24.850 --> 00:39:29.490
目前，让我们这样做

00:39:30.640 --> 00:39:35.569
因此，您永远都不应这样做

00:39:33.500 --> 00:39:38.859
正确的整数类型的方式是

00:39:35.569 --> 00:39:38.859
真的不好做

00:39:44.369 --> 00:39:54.170
所以我只是把那些豆加到我的

00:39:46.079 --> 00:39:57.059
项目好吧，如果我去我的

00:39:54.170 --> 00:40:01.259
现在配置或任何配置

00:39:57.059 --> 00:40:03.869
作为该模块的依赖项

00:40:01.259 --> 00:40:07.079
我又有自动完成功能， 

00:40:03.869 --> 00:40:10.740
选项的完美完成

00:40:07.079 --> 00:40:12.839
对我可用，我也吃饱了

00:40:10.740 --> 00:40:15.420
链接，所以我基本上可以去

00:40:12.839 --> 00:40:17.099
我需要反复声明

00:40:15.420 --> 00:40:18.720
这里也支持重构

00:40:17.099 --> 00:40:20.670
如果你要重命名你的存在

00:40:18.720 --> 00:40:27.569
将会拿起新的名字

00:40:20.670 --> 00:40:29.960
您的配置文件是的

00:40:27.569 --> 00:40:33.259
永远不要尝试那是第一次

00:40:29.960 --> 00:40:35.579
好吧，单独使用手动元数据

00:40:33.259 --> 00:40:38.549
那都是很有趣的东西，但是

00:40:35.579 --> 00:40:40.140
它看起来有点高级所以我想要

00:40:38.549 --> 00:40:42.809
现在退后一步，您已经看到了什么

00:40:40.140 --> 00:40:47.460
发生在幕后，向你展示

00:40:42.809 --> 00:40:50.670
常规使用案例，所以常规使用

00:40:47.460 --> 00:40:53.279
假设您有一个爱洛

00:40:50.670 --> 00:40:58.440
服务正确，所以让我们写下来

00:40:53.279 --> 00:41:00.119
现在，您要配置

00:40:58.440 --> 00:41:03.599
 ello服务让我们将其标记为

00:41:00.119 --> 00:41:06.809
您想要配置的服务

00:41:03.599 --> 00:41:11.249
一些属性，让我们收集这些

00:41:06.809 --> 00:41:16.589
进入文件，然后创建该文件

00:41:11.249 --> 00:41:19.970
所以我想做两件事

00:41:16.589 --> 00:41:27.829
我有ello消息的前缀

00:41:19.970 --> 00:41:31.430
你好，一些Java文档，我不会

00:41:27.829 --> 00:41:35.599
吃目标所以要说好

00:41:31.430 --> 00:41:39.720
我没有为此提供任何价值

00:41:35.599 --> 00:41:41.249
我会收到欢迎消息，然后我

00:41:39.720 --> 00:41:44.839
要确保其指定，所以我

00:41:41.249 --> 00:41:44.839
只是要添加一些约束

00:41:46.100 --> 00:41:50.820
好的，那只是一个普通的pojo 

00:41:48.810 --> 00:41:52.200
没什么好看的，但是

00:41:50.820 --> 00:41:53.910
我要添加我要添加一个

00:41:52.200 --> 00:41:57.660
我会说这是一个额外的财产

00:41:53.910 --> 00:42:04.020
具有一定的配置属性

00:41:57.660 --> 00:42:05.820
给您添加前缀

00:42:04.020 --> 00:42:09.540
在Spring Boot中启用该支持，并

00:42:05.820 --> 00:42:11.580
它将能够映射任何键

00:42:09.540 --> 00:42:14.700
井键以

00:42:11.580 --> 00:42:16.860
黄色大奖赛固定到这束，所以

00:42:14.700 --> 00:42:19.830
通常，如果在您的配置中

00:42:16.860 --> 00:42:22.260
你说你好点前缀

00:42:19.830 --> 00:42:25.530
如果键入，则调用set前缀方法

00:42:22.260 --> 00:42:27.450
 ello目标它将调用设置的目标

00:42:25.530 --> 00:42:29.490
基本上没有那么有趣

00:42:27.450 --> 00:42:32.940
这部分基本上是给

00:42:29.490 --> 00:42:35.360
键的名称空间，之后

00:42:32.940 --> 00:42:39.800
属性基本上是

00:42:35.360 --> 00:42:39.800
该名称空间的配置密钥

00:42:41.210 --> 00:42:46.620
好吧，如果我回到我的服务

00:42:43.710 --> 00:42:49.680
现在解决了，所以我要去做

00:42:46.620 --> 00:42:51.600
现场注入我看到所有东西都在

00:42:49.680 --> 00:42:53.790
回来所以大概会像那样

00:42:51.600 --> 00:42:57.060
所以不要不觉得注射和

00:42:53.790 --> 00:43:00.840
它不是在听我，你会看到

00:42:57.060 --> 00:43:02.810
我猜的录音，然后说

00:43:00.840 --> 00:43:09.210
你好，当应用程序启动正确

00:43:02.810 --> 00:43:11.790
所以说这不在那里编码

00:43:09.210 --> 00:43:20.040
那是行不通的是财产

00:43:11.790 --> 00:43:23.610
是前缀和属性stop 

00:43:20.040 --> 00:43:25.260
目标，所以如果我这样做，那么我有一个

00:43:23.610 --> 00:43:28.910
服务在初始化时

00:43:25.260 --> 00:43:31.680
注入属性处理它们， 

00:43:28.910 --> 00:43:34.020
基本上打个招呼不是很好

00:43:31.680 --> 00:43:36.960
有趣，我们有我们的旗帜

00:43:34.020 --> 00:43:39.030
如您所见，在这里工作

00:43:36.960 --> 00:43:42.390
那些跟随它的人显然

00:43:39.030 --> 00:43:44.520
应该失败，因为我们从未说过

00:43:42.390 --> 00:43:47.310
我们要处理得很好

00:43:44.520 --> 00:43:49.100
从来没有说对它做点什么，所以

00:43:47.310 --> 00:43:51.450
为此，我要添加一个额外的

00:43:49.100 --> 00:43:54.840
我在配置类上的注释

00:43:51.450 --> 00:43:58.080
会说无法配置

00:43:54.840 --> 00:43:59.040
属性，我要指定

00:43:58.080 --> 00:44:02.340
道具名称

00:43:59.040 --> 00:44:03.990
 geez对象还有其他选择或

00:44:02.340 --> 00:44:05.670
例如，您可以指定启用

00:44:03.990 --> 00:44:09.390
不带配置属性

00:44:05.670 --> 00:44:11.250
任何参数并定义您的属性

00:44:09.390 --> 00:44:12.600
对象作为组件，将有

00:44:11.250 --> 00:44:16.940
通过组件扫描拾取

00:44:12.600 --> 00:44:19.230
自动，所以如果我再做一次

00:44:16.940 --> 00:44:22.080
如果您看不懂例外，请相信我

00:44:19.230 --> 00:44:23.580
消息将再次失败，因为

00:44:22.080 --> 00:44:29.610
该值未设置，因此

00:44:23.580 --> 00:44:31.920
验证问题，是的，所以让我说一下

00:44:29.610 --> 00:44:36.140
稍大一点就被你拒绝了

00:44:31.920 --> 00:44:39.150
值，所以目标不行，所以让我们

00:44:36.140 --> 00:44:43.560
让我们为那个东西给一个价值

00:44:39.150 --> 00:44:47.250
我们必须写哦，我有自动

00:44:43.560 --> 00:44:49.980
完成已经可以了，那就是

00:44:47.250 --> 00:44:53.160
这个注释处理器主要是

00:44:49.980 --> 00:44:55.020
扫描源代码中的pojo 

00:44:53.160 --> 00:44:57.630
带有配置属性的注释

00:44:55.020 --> 00:45:00.180
并弄清楚那种钥匙

00:44:57.630 --> 00:45:01.440
将要暴露在外面，看着

00:45:00.180 --> 00:45:03.390
源代码，您可以看到

00:45:01.440 --> 00:45:05.640
使用默认值，您可以看到

00:45:03.390 --> 00:45:09.300
 Javadoc被从

00:45:05.640 --> 00:45:11.370
字段，所以这实际上是标准用法

00:45:09.300 --> 00:45:13.560
创建配置的情况

00:45:11.370 --> 00:45:16.620
属性注入你注入

00:45:13.560 --> 00:45:18.270
无论您拥有什么服务，您都可以添加

00:45:16.620 --> 00:45:20.190
项目的注释处理器

00:45:18.270 --> 00:45:24.090
基本上你会得到完全自动

00:45:20.190 --> 00:45:26.640
开箱即用，所以说

00:45:24.090 --> 00:45:33.480
像这样的东西只是证明它

00:45:26.640 --> 00:45:41.190
可以，所以你应该打个招呼

00:45:33.480 --> 00:45:43.650
好地方的世界很多

00:45:41.190 --> 00:45:48.840
那可能是那里最脏的

00:45:43.650 --> 00:45:49.950
是的，好吧，好吧，那是

00:45:48.840 --> 00:45:54.750
你可以做的那种事情

00:45:49.950 --> 00:45:56.970
快速配置方舟

00:45:54.750 --> 00:45:59.100
您可以使用的非常完整，因此您可以

00:45:56.970 --> 00:46:01.110
做很多事情，显然我是一个

00:45:59.100 --> 00:46:03.150
为了演示我有点懒

00:46:01.110 --> 00:46:05.670
所以我要暴露的优点是

00:46:03.150 --> 00:46:08.220
打字不是很强，但是还很年轻

00:46:05.670 --> 00:46:10.170
给你看什么班级什么类型

00:46:08.220 --> 00:46:12.540
你暴露它会暴露在

00:46:10.170 --> 00:46:12.950
元元数据也是如此，如果您公开

00:46:12.540 --> 00:46:15.650
一类

00:46:12.950 --> 00:46:17.540
 foo类型的，它将寻找所有

00:46:15.650 --> 00:46:19.280
 foo和autocomplete的实现

00:46:17.540 --> 00:46:21.500
价值直接没有你

00:46:19.280 --> 00:46:25.010
必须知道你对吧

00:46:21.500 --> 00:46:26.510
如您所愿，编写您的代码

00:46:25.010 --> 00:46:29.750
为它生成元数据

00:46:26.510 --> 00:46:32.150
 idee fixe设置好，所以有一个问题

00:46:29.750 --> 00:46:34.760
我的配置是

00:46:32.150 --> 00:46:38.800
目标真的是一个奇怪的名字，所以我想要

00:46:34.760 --> 00:46:42.200
改用名字而不是正确的目标

00:46:38.800 --> 00:46:45.829
所以我要创建吸气剂和

00:46:42.200 --> 00:46:49.130
这些的二传手，我要说的是

00:46:45.829 --> 00:46:50.660
这些已被弃用，因为

00:46:49.130 --> 00:46:54.170
这是我们应该做的错误决定

00:46:50.660 --> 00:47:00.859
并委托给新的API 

00:46:54.170 --> 00:47:03.050
到目前为止基本上还可以，但是

00:47:00.859 --> 00:47:05.869
问题是我想我想要我

00:47:03.050 --> 00:47:07.880
基本上是这样管理的，如果有人

00:47:05.869 --> 00:47:09.589
仍在使用ello target它将仍然

00:47:07.880 --> 00:47:13.310
工作，因为二传手仍然存在

00:47:09.589 --> 00:47:15.800
是的，但我想让用户知道

00:47:13.310 --> 00:47:17.569
你好，目标不再是一个非常

00:47:15.800 --> 00:47:19.310
财产和我希望他们使用的世界

00:47:17.569 --> 00:47:23.720
负载名称是我的新属性

00:47:19.310 --> 00:47:27.730
希望他们使用，所以我要

00:47:23.720 --> 00:47:33.079
我要做的是添加一个额外的

00:47:27.730 --> 00:47:43.880
从春季启动注释这里

00:47:33.079 --> 00:47:47.960
原因和更换权，如果我

00:47:43.880 --> 00:47:50.599
内置我做了吗不，如果我不这样做

00:47:47.960 --> 00:47:53.119
建立，然后回到我的配置

00:47:50.599 --> 00:47:57.010
 ello目标已弃用，我可以看到

00:47:53.119 --> 00:47:59.450
立即为什么不赞成使用

00:47:57.010 --> 00:48:03.609
如您所愿，那么您拥有

00:47:59.450 --> 00:48:07.520
魔术替换，所以也可以

00:48:03.609 --> 00:48:08.900
从您的代码中声明地

00:48:07.520 --> 00:48:10.760
那才是真正的用例

00:48:08.900 --> 00:48:12.829
应该使用它开头的东西，所以

00:48:10.760 --> 00:48:15.530
设计您的API设计新

00:48:12.829 --> 00:48:17.540
配置属性，然后

00:48:15.530 --> 00:48:19.609
弹簧启动配置处理器

00:48:17.540 --> 00:48:25.410
自动为生成元数据

00:48:19.609 --> 00:48:28.980
你说的对，所以我们切换到

00:48:25.410 --> 00:48:31.470
自从我们有了一些完全不同的话题

00:48:28.980 --> 00:48:32.850
花了很多时间，但我认为是

00:48:31.470 --> 00:48:34.800
重要的是要了解这些

00:48:32.850 --> 00:48:37.310
配置键可以工作，以及您如何工作

00:48:34.800 --> 00:48:39.720
可以创建自己的配置

00:48:37.310 --> 00:48:43.410
您的应用程序的Universe或

00:48:39.720 --> 00:48:47.520
服务让我们实际讨论一下

00:48:43.410 --> 00:48:52.200
运行和/或调试Spring Boot 

00:48:47.520 --> 00:48:53.970
应用程序有一个特殊的运行

00:48:52.200 --> 00:48:56.250
春季心情的配置类型

00:48:53.970 --> 00:48:59.130
应用程序，我们看到创建后

00:48:56.250 --> 00:49:01.200
这个模板项目与春天

00:48:59.130 --> 00:49:05.460
自动创建的初始化程序

00:49:01.200 --> 00:49:07.770
运行配置及其方式

00:49:05.460 --> 00:49:09.660
起作用的是，任何包含

00:49:07.770 --> 00:49:12.180
恰好是一个春季的好应用

00:49:09.660 --> 00:49:13.740
该课程将被视为

00:49:12.180 --> 00:49:15.920
独立的弹性木应用

00:49:13.740 --> 00:49:18.600
无论您叫什么微服务， 

00:49:15.920 --> 00:49:20.610
相应的运行配置将是

00:49:18.600 --> 00:49:24.180
为您自动创建，因此您可以

00:49:20.610 --> 00:49:27.470
只是继续运行就可以了

00:49:24.180 --> 00:49:31.290
指定主类的vm选项

00:49:27.470 --> 00:49:33.270
程序参数什么然后

00:49:31.290 --> 00:49:36.210
有趣的部分

00:49:33.270 --> 00:49:39.660
春运专攻

00:49:36.210 --> 00:49:42.450
应用程序，所以这是我们的一部分

00:49:39.660 --> 00:49:44.880
只需启用一个复选框即可

00:49:42.450 --> 00:49:46.890
默认情况下调试输出

00:49:44.880 --> 00:49:49.710
你可以传递评论的论点

00:49:46.890 --> 00:49:54.180
行到春天花花公子，但你可以用这个

00:49:49.710 --> 00:49:56.820
勾选此处不喜欢的人

00:49:54.180 --> 00:49:59.130
春季启动横幅或您自己的横幅

00:49:56.820 --> 00:50:01.020
也可以用复选框将其隐藏

00:49:59.130 --> 00:50:02.430
不会点击，因为我认为你是

00:50:01.020 --> 00:50:06.360
真的恨我建立你的

00:50:02.430 --> 00:50:09.360
功能和真正有趣的事情

00:50:06.360 --> 00:50:12.630
现在是这张小桌子了吗

00:50:09.360 --> 00:50:15.810
参数，所以我们有什么用

00:50:12.630 --> 00:50:19.200
我们的配置文件，包含密钥和

00:50:15.810 --> 00:50:21.540
值，所以如果您遇到问题

00:50:19.200 --> 00:50:23.580
或者您想测试一个您想运行一个

00:50:21.540 --> 00:50:25.860
 a / b测试或某种形式的变化

00:50:23.580 --> 00:50:28.560
您的配置，您将需要

00:50:25.860 --> 00:50:30.630
修改您的配置文件

00:50:28.560 --> 00:50:32.340
将不得不为此创建一个配置文件

00:50:30.630 --> 00:50:35.340
配置文件并运行

00:50:32.340 --> 00:50:38.040
个人资料，但只需

00:50:35.340 --> 00:50:38.830
用其他覆盖所选键

00:50:38.040 --> 00:50:41.170
值

00:50:38.830 --> 00:50:43.150
只是在运行时，所以我们不

00:50:41.170 --> 00:50:45.160
必须修改源代码，这是

00:50:43.150 --> 00:50:48.760
 ide它不会得到的特定元数据

00:50:45.160 --> 00:50:50.830
存储在您的源存储库中，除非

00:50:48.760 --> 00:50:55.660
你告诉它这样做，所以我可以添加

00:50:50.830 --> 00:50:57.460
我拥有的其他配置密钥

00:50:55.660 --> 00:51:01.030
全自动完成以及

00:50:57.460 --> 00:51:05.770
就像在配置文件中一样，也许我想要

00:51:01.030 --> 00:51:07.360
更改横幅多个端口

00:51:05.770 --> 00:51:12.280
是的，让我们将端口更改为服务器

00:51:07.360 --> 00:51:14.380
端口，让我们将其更改为

00:51:12.280 --> 00:51:17.020
你改变你想改变我的丹尼尔

00:51:14.380 --> 00:51:19.840
再次是，不，我不想更改它

00:51:17.020 --> 00:51:23.500
再次给您排名，让我们更改

00:51:19.840 --> 00:51:27.010
要运行到8000年的服务器端口

00:51:23.500 --> 00:51:28.390
一个也许，就像你在

00:51:27.010 --> 00:51:31.840
第一列列出了此复选框

00:51:28.390 --> 00:51:33.790
启用，为什么在这里我们可以

00:51:31.840 --> 00:51:36.220
快速启用和禁用覆盖

00:51:33.790 --> 00:51:38.530
仅在两个参数之间切换的参数

00:51:36.220 --> 00:51:40.630
不同的配置或多或少

00:51:38.530 --> 00:51:42.790
不用做其他事情的苍蝇

00:51:40.630 --> 00:51:46.150
只是取消选中并选中另一个

00:51:42.790 --> 00:51:47.680
您可以轻松地做的是创建一个

00:51:46.150 --> 00:51:50.170
现有一个配置的副本

00:51:47.680 --> 00:51:52.930
并使用一些参数对其进行修改， 

00:51:50.170 --> 00:51:55.510
那么您可以运行任何版本的

00:51:52.930 --> 00:51:58.330
您想要与其他应用一起运行的应用

00:51:55.510 --> 00:52:05.140
覆盖参数，所以当我们运行

00:51:58.330 --> 00:52:06.760
现在和IntelliJ知道的方式

00:52:05.140 --> 00:52:09.220
该应用程序已经在运行

00:52:06.760 --> 00:52:12.420
我们会请您停止并重新运行

00:52:09.220 --> 00:52:14.740
所以你不会有两个实例

00:52:12.420 --> 00:52:16.180
显然这是行不通的

00:52:14.740 --> 00:52:20.530
之前更改过，因为我们更改了

00:52:16.180 --> 00:52:28.980
是的，那是我的AE，所以当我们走时

00:52:20.530 --> 00:52:28.980
到8001正常

00:52:29.450 --> 00:52:33.750
好的，我认为这是关于

00:52:31.830 --> 00:52:36.930
运行配置，我们还有更多

00:52:33.750 --> 00:52:39.630
植物中的东西，但我认为这是

00:52:36.930 --> 00:52:42.119
快速方便地调优您的好方法

00:52:39.630 --> 00:52:46.349
应用程序，然后用一些调试

00:52:42.119 --> 00:52:47.580
不同的属性好，所以你知道

00:52:46.349 --> 00:52:52.200
您可以做的另一件事是缝制

00:52:47.580 --> 00:52:54.810
 Spring Boot是一个配置文件管理，因此

00:52:52.200 --> 00:52:57.960
默认情况下，Spring Boot实际上正在运行

00:52:54.810 --> 00:53:00.599
读取任何应用程序的破折号

00:52:57.960 --> 00:53:04.440
个人资料启用后，让我们

00:53:00.599 --> 00:53:05.940
在此处并为

00:53:04.440 --> 00:53:10.710
死亡概况的深度

00:53:05.940 --> 00:53:15.240
我要说的是安全性

00:53:10.710 --> 00:53:18.180
一起禁用安全功能

00:53:15.240 --> 00:53:23.250
我还要在演示应用程序中做

00:53:18.180 --> 00:53:27.109
我要创建一个光束，让我们快速

00:53:23.250 --> 00:53:33.180
创建一个仅

00:53:27.109 --> 00:53:35.190
使用配置文件def启用它曾经是

00:53:33.180 --> 00:53:37.380
实际上是h2的自动配置

00:53:35.190 --> 00:53:39.599
控制台，如果你知道，但由于密集

00:53:37.380 --> 00:53:42.380
我们有自动配置支持

00:53:39.599 --> 00:53:44.790
它，所以我不能再显示了， 

00:53:42.380 --> 00:53:48.150
相反，我可以向您展示最有用的

00:53:44.790 --> 00:53:51.470
控制器永远正确，我认为那是

00:53:48.150 --> 00:53:57.810
真的很不错的链接到那里的字符串

00:53:51.470 --> 00:54:01.770
好吧，如果我去的话我可能会年轻

00:53:57.810 --> 00:54:03.450
已经显示我可以说哦，不，我想要

00:54:01.770 --> 00:54:05.790
我想做的是

00:54:03.450 --> 00:54:07.410
必须运行配置，所以我想

00:54:05.790 --> 00:54:10.290
有一个发展，一个为

00:54:07.410 --> 00:54:12.690
我想使用的其他任何个人资料

00:54:10.290 --> 00:54:17.010
我将使用复制运行配置

00:54:12.690 --> 00:54:22.740
在这里，只是说我想要

00:54:17.010 --> 00:54:25.589
正确的死亡档案让我说

00:54:22.740 --> 00:54:30.660
不想那样，所以如果我跑步

00:54:25.589 --> 00:54:32.160
再说一遍我应该得到什么

00:54:30.660 --> 00:54:36.960
演示的最春天

00:54:32.160 --> 00:54:37.830
功能，但哦，是的，我不应该

00:54:36.960 --> 00:54:43.359
有什么

00:54:37.830 --> 00:54:46.930
安全到位，我的调试工作是

00:54:43.359 --> 00:54:49.690
可用的权利不是超级有趣

00:54:46.930 --> 00:54:52.720
除非出于某种原因你想要你

00:54:49.690 --> 00:54:59.200
要重命名该个人资料，如果您

00:54:52.720 --> 00:55:01.090
使用通常的快捷方式，然后IntelliJ 

00:54:59.200 --> 00:55:03.190
 IDEA实际上会检测到您有

00:55:01.090 --> 00:55:05.940
一个弹簧靴配置

00:55:03.190 --> 00:55:16.390
个人资料，它将基本上为您提供

00:55:05.940 --> 00:55:18.430
重命名文件，好吧，我们

00:55:16.390 --> 00:55:21.040
看了 spring boot 的具体内容

00:55:18.430 --> 00:55:24.400
现在要进行短暂的游览

00:55:21.040 --> 00:55:31.530
变成更一般的弹簧特征

00:55:24.400 --> 00:55:31.530
在IntelliJ中，对不起

00:55:39.990 --> 00:55:46.960
不，这不是一个好问题，但是

00:55:44.890 --> 00:55:49.510
是可能的，通常你不会

00:55:46.960 --> 00:55:51.550
每天重命名您的个人资料

00:55:49.510 --> 00:55:56.260
希望应该很安全但是很好

00:55:51.550 --> 00:55:58.420
赶上去一些更一般

00:55:56.260 --> 00:56:02.020
东西，你该如何度过春天

00:55:58.420 --> 00:56:04.000
 IntelliJ IDEA中的应用程序，所以我们有

00:56:02.020 --> 00:56:06.280
春天不错的应用注释

00:56:04.000 --> 00:56:08.140
是事项注释，它包括一个

00:56:06.280 --> 00:56:11.020
组件扫描当前程序包

00:56:08.140 --> 00:56:13.830
它包含一个配置注释

00:56:11.020 --> 00:56:17.350
所以我们在这里有这个小图标

00:56:13.830 --> 00:56:21.850
允许我们导航到实际

00:56:17.350 --> 00:56:24.160
手段或控制者已经

00:56:21.850 --> 00:56:26.980
由于此配置而创建，因此

00:56:24.160 --> 00:56:29.470
这很容易从中导航

00:56:26.980 --> 00:56:31.810
这个应用程序例如

00:56:29.470 --> 00:56:33.640
下雪的调试控制器

00:56:31.810 --> 00:56:37.180
相同的文件，否则它将打开

00:56:33.640 --> 00:56:39.190
我们和我们对应的班级

00:56:37.180 --> 00:56:41.710
也可以回去，所以我可以

00:56:39.190 --> 00:56:43.810
导航到声明配置

00:56:41.710 --> 00:56:45.640
现在使用相同的机制

00:56:43.810 --> 00:56:48.150
声明跳转到演示应用程序

00:56:45.640 --> 00:56:50.230
这实际上是配置

00:56:48.150 --> 00:56:56.620
负责创建此休息

00:56:50.230 --> 00:57:00.280
链接在下面的控制器

00:56:56.620 --> 00:57:04.350
是有点相关的功能

00:57:00.280 --> 00:57:07.090
功能非常强大，称为导航

00:57:04.350 --> 00:57:10.120
相关符号，它的作用是

00:57:07.090 --> 00:57:11.560
确实取决于上下文

00:57:10.120 --> 00:57:14.380
在其他框架或其他框架中工作

00:57:11.560 --> 00:57:16.990
技术，它提供

00:57:14.380 --> 00:57:19.330
某种nip语义导航

00:57:16.990 --> 00:57:21.930
例如在春季MVC中，您拥有

00:57:19.330 --> 00:57:24.160
控制器，您有自己的看法和

00:57:21.930 --> 00:57:26.230
 IntelliJ了解关系

00:57:24.160 --> 00:57:29.050
在这两个之间，并为您提供

00:57:26.230 --> 00:57:34.630
使用此在这两个之间导航

00:57:29.050 --> 00:57:36.850
功能相关的符号和相同

00:57:34.630 --> 00:57:38.970
事情可以从中导航

00:57:36.850 --> 00:57:41.470
配置文件到bean和

00:57:38.970 --> 00:57:45.110
另一个用例又是

00:57:41.470 --> 00:57:47.480
当您在自己的状态时，使用Springwood专用

00:57:45.110 --> 00:57:49.550
场合属性文件，你想

00:57:47.480 --> 00:57:52.280
转到元数据文件

00:57:49.550 --> 00:57:54.050
您编写的元数据文件可以使用

00:57:52.280 --> 00:57:56.560
与您浏览相关的相同快捷方式

00:57:54.050 --> 00:57:59.480
符号，它将打开其他

00:57:56.560 --> 00:58:02.690
 JSON文件或一种破坏和删除文件的快捷方式

00:57:59.480 --> 00:58:05.570
中的许多导航可能性

00:58:02.690 --> 00:58:10.880
春季和春季MVC并获得成功

00:58:05.570 --> 00:58:13.370
实际上可以在许多框架中工作，所以我们

00:58:10.880 --> 00:58:16.420
使用已经存在的导航

00:58:13.370 --> 00:58:19.400
打开一些相关内容的编辑器

00:58:16.420 --> 00:58:21.500
还有另一个捷径

00:58:19.400 --> 00:58:24.650
强大的导航能力，从

00:58:21.500 --> 00:58:27.950
任何地方，所以如果我想找豆子

00:58:24.650 --> 00:58:31.370
我可以使用快捷方式命名为

00:58:27.950 --> 00:58:35.690
转到符号，其中包括弹簧

00:58:31.370 --> 00:58:38.960
豆，所以我应该能够找到

00:58:35.690 --> 00:58:42.380
在这里调试控制器，我可以跳

00:58:38.960 --> 00:58:44.090
在那里，如果你甚至只能猜测

00:58:42.380 --> 00:58:46.400
名称的一部分也将匹配

00:58:44.090 --> 00:58:48.830
搭配更好的相机套

00:58:46.400 --> 00:58:51.140
匹配名称并在其中提出建议

00:58:48.830 --> 00:58:52.820
此完成弹出，您可以

00:58:51.140 --> 00:58:57.110
快速从以下位置转到任何bean定义

00:58:52.820 --> 00:58:59.720
无论您在哪里都可以

00:58:57.110 --> 00:59:03.350
还有另一种探索的可能性

00:58:59.720 --> 00:59:06.140
在你的春天明智的是什么

00:59:03.350 --> 00:59:12.670
应用程序，这就是弹簧工具

00:59:06.140 --> 00:59:15.380
这下面的窗口是做什么的

00:59:12.670 --> 00:59:17.330
显示所有更多的文件集

00:59:15.380 --> 00:59:20.810
或更少代表你的春天

00:59:17.330 --> 00:59:23.720
应用程序上下文纯模块，我们可以

00:59:20.810 --> 00:59:26.470
如果不想的话，也可以加入所有模块

00:59:23.720 --> 00:59:29.870
按模块分组，我们也可以

00:59:26.470 --> 00:59:31.700
禁用不同的方面，以便您可以放

00:59:29.870 --> 00:59:34.460
如果愿意，所有豆都列在一个大列表中

00:59:31.700 --> 00:59:37.280
喜欢那个，你在这里看到的是

00:59:34.460 --> 00:59:40.610
自动配置的清单很长

00:59:37.280 --> 00:59:42.140
由于以下原因触发的课程

00:59:40.610 --> 00:59:44.840
跳板的应用

00:59:42.140 --> 00:59:48.230
启用自动配置，因此这些

00:59:44.840 --> 00:59:50.570
所有的自动配置类

00:59:48.230 --> 00:59:52.720
春天会自动添加到

00:59:50.570 --> 00:59:55.790
在这种情况下带来良好的应用

00:59:52.720 --> 00:59:57.700
我们还应该找到我们的调试控制器

00:59:55.790 --> 01:00:02.960
在这里

00:59:57.700 --> 01:00:07.970
 emo应用程序，这些都是

01:00:02.960 --> 01:00:10.999
由我们的演示配置的bean 

01:00:07.970 --> 01:00:13.789
我可以使用的应用程序单击此处搜索

01:00:10.999 --> 01:00:15.410
并快速导航到调试

01:00:13.789 --> 01:00:18.619
控制器再次，这是另一种方式

01:00:15.410 --> 01:00:21.410
访问bean并了解

01:00:18.619 --> 01:00:23.990
您的配置结构并执行

01:00:21.410 --> 01:00:26.630
您可以在右边看到生成的豆

01:00:23.990 --> 01:00:29.930
一些元信息，我们可以看到

01:00:26.630 --> 01:00:33.319
这是一个控制器光束，我们看到了光源

01:00:29.930 --> 01:00:35.390
我们甚至看到这仅限于

01:00:33.319 --> 01:00:39.369
配置文件的发展，所以它只是

01:00:35.390 --> 01:00:39.369
仅在该个人资料中可用

01:00:40.150 --> 01:00:47.390
对，所以还有另一件事

01:00:45.380 --> 01:00:52.269
导航实际上是我要去的

01:00:47.390 --> 01:00:55.009
重置为选择，以便它实际起作用

01:00:52.269 --> 01:00:57.650
有一个非常强大的快捷方式

01:00:55.009 --> 01:01:00.859
称为“选择进入”，它的作用是

01:00:57.650 --> 01:01:02.690
是采用光标所在的元素

01:01:00.859 --> 01:01:05.390
并提供您的导航目标

01:01:02.690 --> 01:01:07.670
大多到您实际所在的窗户

01:01:05.390 --> 01:01:09.859
想选择您就是那个元素

01:01:07.670 --> 01:01:15.499
为null，适用于春豆

01:01:09.859 --> 01:01:17.210
以及alt f1和我得到的列表

01:01:15.499 --> 01:01:19.339
工具窗口可作为

01:01:17.210 --> 01:01:21.380
导航目标，其中之一是

01:01:19.339 --> 01:01:23.839
春豆工具窗口，所以如果我选择

01:01:21.380 --> 01:01:26.299
它将选择相应的

01:01:23.839 --> 01:01:29.420
文件设置相应的配置

01:01:26.299 --> 01:01:32.180
并为我选择调试控制器

01:01:29.420 --> 01:01:34.069
我可以去那里看看是什么

01:01:32.180 --> 01:01:36.230
与那个豆有关我们的豆是什么

01:01:34.069 --> 01:01:37.880
在这种情况下，在这种配置下

01:01:36.230 --> 01:01:40.549
这是一种非常好的快捷方法

01:01:37.880 --> 01:01:41.839
春豆从

01:01:40.549 --> 01:01:46.970
从当前电流

01:01:41.839 --> 01:01:51.920
配置还可以，但是很好

01:01:46.970 --> 01:01:55.069
老了，我要给你看一些东西

01:01:51.920 --> 01:01:57.920
在您获得每一个时，这都是很新的

01:01:55.069 --> 01:01:59.839
像昨晚一样，像过去一样

01:01:57.920 --> 01:02:01.970
这里不，它已经去过那里了

01:01:59.839 --> 01:02:05.869
几周，但它几乎没有被注意

01:02:01.970 --> 01:02:08.589
到目前为止，在社区和我看来

01:02:05.869 --> 01:02:10.609
认为这是最

01:02:08.589 --> 01:02:13.249
有趣的新功能

01:02:10.609 --> 01:02:18.410
一般用于春季开发

01:02:13.249 --> 01:02:20.359
即将发布的15版本，因此我们解决了

01:02:18.410 --> 01:02:22.039
导航豆吧，我给你看了一个

01:02:20.359 --> 01:02:26.720
几种方法来做到这一点

01:02:22.039 --> 01:02:29.210
不错，易于使用，但是有些春天

01:02:26.720 --> 01:02:32.170
应用程序非常复杂

01:02:29.210 --> 01:02:35.119
或复杂，有时会有点

01:02:32.170 --> 01:02:37.999
其配置的非托管设置

01:02:35.119 --> 01:02:39.890
所以当您加入一个新项目或

01:02:37.999 --> 01:02:42.619
有新员工，他们确实有

01:02:39.890 --> 01:02:44.720
麻烦弄清楚是什么

01:02:42.619 --> 01:02:46.819
弹簧配置的结构

01:02:44.720 --> 01:02:49.039
这是从哪里来的

01:02:46.819 --> 01:02:51.440
为什么会有这些

01:02:49.039 --> 01:02:55.609
配置文件，例如相关

01:02:51.440 --> 01:02:57.980
彼此，我们考虑了一下

01:02:55.609 --> 01:03:00.430
我们想到了一个展示

01:02:57.980 --> 01:03:04.249
实际配置图

01:03:00.430 --> 01:03:06.739
发生在您的应用程序中，所以这是

01:03:04.249 --> 01:03:08.239
一个真正的综合项目，它没有

01:03:06.739 --> 01:03:13.460
有什么意思

01:03:08.239 --> 01:03:17.599
演示目的，所以您调用

01:03:13.460 --> 01:03:20.259
图显示图，是新的

01:03:17.599 --> 01:03:25.420
图类型弹簧模型依赖性

01:03:20.259 --> 01:03:25.420
所以让我们最大化它

01:03:28.480 --> 01:03:37.720
所以这显示在左边

01:03:33.400 --> 01:03:42.490
模块节点，那么我们必须在这里设置5套

01:03:37.720 --> 01:03:44.590
或创建上下文，然后显示

01:03:42.490 --> 01:03:51.220
主要配置文件例如

01:03:44.590 --> 01:03:53.440
 B点XML是的，仅出于完整性考虑

01:03:51.220 --> 01:03:56.290
当然没有人要使用Excel 

01:03:53.440 --> 01:03:59.859
不再，但正如您所看到的

01:03:56.290 --> 01:04:03.520
不同形状和不同误差

01:03:59.859 --> 01:04:05.200
和颜色在这里可视化

01:04:03.520 --> 01:04:07.090
所有这些之间的关系

01:04:05.200 --> 01:04:09.100
配置文件，例如

01:04:07.090 --> 01:04:13.330
你有进口如果你有组件

01:04:09.100 --> 01:04:16.119
增益又触发另一组

01:04:13.330 --> 01:04:17.770
您将真正配置的bean 

01:04:16.119 --> 01:04:20.230
很难理解那些

01:04:17.770 --> 01:04:22.780
通过查看代码或

01:04:20.230 --> 01:04:24.730
通过猜测这个组成部分

01:04:22.780 --> 01:04:27.190
增益可能触发可能不会触发

01:04:24.730 --> 01:04:29.890
一次，所以我认为这是一个非常

01:04:27.190 --> 01:04:33.670
实际看到什么的可能性很大

01:04:29.890 --> 01:04:36.040
你的弹簧配置可以吗

01:04:33.670 --> 01:04:38.970
也看到很多问题，我们有一个

01:04:36.040 --> 01:04:41.490
几个红色的边缘在这里显示

01:04:38.970 --> 01:04:44.290
周期或配置属性

01:04:41.490 --> 01:04:47.950
配置问题，我们有几个

01:04:44.290 --> 01:04:50.560
这里的工具提示显示了

01:04:47.950 --> 01:04:54.400
关系实际上是可以定义的

01:04:50.560 --> 01:04:56.980
选择此节点，按f4并转到

01:04:54.400 --> 01:05:00.070
您配置中的确切位置

01:04:56.980 --> 01:05:03.010
通过XML文件观看我们的配置，您

01:05:00.070 --> 01:05:06.940
将到达确切的点触发

01:05:03.010 --> 01:05:08.230
我们在图表上看到的这种关系

01:05:06.940 --> 01:05:10.030
我认为这是一个非常强大的功能

01:05:08.230 --> 01:05:12.910
了解背后发生了什么

01:05:10.030 --> 01:05:15.609
场景实际上是如何设置的

01:05:12.910 --> 01:05:17.170
结构化或非结构化，您可以

01:05:15.609 --> 01:05:19.240
使用此图来验证您的

01:05:17.170 --> 01:05:23.820
配置实际上是您的实际配置

01:05:19.240 --> 01:05:27.010
期望它是网络应用程序运行时

01:05:23.820 --> 01:05:29.700
这都是新的好东西，我们是

01:05:27.010 --> 01:05:33.760
考虑一些补充

01:05:29.700 --> 01:05:35.650
所以请继续关注我们在考虑

01:05:33.760 --> 01:05:37.990
诸如重构配置之类的东西

01:05:35.650 --> 01:05:39.610
诸如在之间移动导入的设置

01:05:37.990 --> 01:05:41.740
自动为您提供不同的文件

01:05:39.610 --> 01:05:44.200
使用这个图我们可以使用

01:05:41.740 --> 01:05:46.390
拖放并改变弹簧

01:05:44.200 --> 01:05:49.840
为您配置并生成

01:05:46.390 --> 01:05:51.820
更改G所需的相应代码

01:05:49.840 --> 01:05:56.430
设置，所以我认为这真的有帮助

01:05:51.820 --> 01:05:59.710
构造应用程序并了解

01:05:56.430 --> 01:06:01.890
曾经或曾经配置过的

01:05:59.710 --> 01:06:07.450
在过去的几年中

01:06:01.890 --> 01:06:12.790
应用程序很好，我想我们已经完成了

01:06:07.450 --> 01:06:21.190
通过我们的演示，我们很乐意

01:06:12.790 --> 01:06:24.810
是的，是的，没有问题

01:06:21.190 --> 01:06:24.810
请害羞

01:06:28.670 --> 01:06:35.349
毫无疑问，我很抱歉

01:06:42.790 --> 01:06:51.410
实际上，该图不是基于

01:06:48.020 --> 01:06:56.990
您的春季构面配置

01:06:51.410 --> 01:06:59.390
应用程序，所以我们没有表明我们

01:06:56.990 --> 01:07:02.120
这边有几个面

01:06:59.390 --> 01:07:04.550
集，他们有一些主要

01:07:02.120 --> 01:07:06.710
配置文件以及所有其他

01:07:04.550 --> 01:07:09.170
该图也很好地展示了

01:07:06.710 --> 01:07:11.990
力量实际上是由那些

01:07:09.170 --> 01:07:15.470
主入口点配置正确，所以

01:07:11.990 --> 01:07:17.750
只要你有春天

01:07:15.470 --> 01:07:23.690
巨星建立就可以使用

01:07:17.750 --> 01:07:27.890
我实际上错过了一件事的数据

01:07:23.690 --> 01:07:31.940
实际上是一样的东西

01:07:27.890 --> 01:07:33.800
对于 spring boot ，所以有一个

01:07:31.940 --> 01:07:35.930
弹簧启动和自动魔术

01:07:33.800 --> 01:07:38.270
配置正确，我是说我们看到了

01:07:35.930 --> 01:07:39.920
其他配置的长列表

01:07:38.270 --> 01:07:43.820
已经显示在春豆中

01:07:39.920 --> 01:07:48.430
资源管理器，我将要触发

01:07:43.820 --> 01:07:53.800
此图在春季心情应用中

01:07:48.430 --> 01:07:53.800
所以这是

01:07:55.490 --> 01:08:00.320
我们的应用程序权限的基本设置

01:07:57.800 --> 01:08:02.480
很容易理解，不用担心

01:08:00.320 --> 01:08:05.540
关于，这就是春天的根源之美

01:08:02.480 --> 01:08:08.390
我认为没有

01:08:05.540 --> 01:08:10.130
通常要担心的很多

01:08:08.390 --> 01:08:12.800
带来好的应用程序，您将不会

01:08:10.130 --> 01:08:15.590
比我们看到的要复杂得多的图

01:08:12.800 --> 01:08:19.339
在这里至少不是每个模块或

01:08:15.590 --> 01:08:22.190
每个微服务的权利，所以事情变得

01:08:19.339 --> 01:08:23.990
开启配置时有所不同

01:08:22.190 --> 01:08:27.319
不位于

01:08:23.990 --> 01:08:32.359
项目，但在图书馆，所以来自

01:08:27.319 --> 01:08:38.450
春天会自动，这是

01:08:32.359 --> 01:08:41.470
实际上是完整图或有限集合

01:08:38.450 --> 01:08:44.420
自动配置图的集合

01:08:41.470 --> 01:08:47.900
哪个弹簧靴可以一次交易

01:08:44.420 --> 01:08:50.900
对我来说这非常令人印象深刻

01:08:47.900 --> 01:08:52.930
这基本上就是背后的魔力

01:08:50.900 --> 01:08:54.950
春天的心情和自动配置

01:08:52.930 --> 01:08:57.230
如您所见，斯普林伍德

01:08:54.950 --> 01:08:59.900
应用笔记触发了

01:08:57.230 --> 01:09:02.330
其他配置令人印象深刻的清单

01:08:59.900 --> 01:09:06.220
依次导入另一组的类

01:09:02.330 --> 01:09:08.839
配置类，什么都不是

01:09:06.220 --> 01:09:10.670
这是一个很好的可视化内容

01:09:08.839 --> 01:09:13.880
弹簧自动配置实际上确实

01:09:10.670 --> 01:09:16.160
在运行时，您的可能性很大

01:09:13.880 --> 01:09:19.009
了解为什么所有这些

01:09:16.160 --> 01:09:21.560
配置实际上甚至都不敢

01:09:19.009 --> 01:09:23.870
如果您期望的话，可以选择

01:09:21.560 --> 01:09:26.450
错误的jar或长期依赖关系，或者您

01:09:23.870 --> 01:09:29.120
忘了设置一些标志，我们是

01:09:26.450 --> 01:09:30.980
努力工作才能真正展现出

01:09:29.120 --> 01:09:33.740
实际使用的图形

01:09:30.980 --> 01:09:36.859
时间，您可以打开调试，因为我们

01:09:33.740 --> 01:09:39.819
看到Stefan何时切换调试

01:09:36.859 --> 01:09:42.049
水平显示弹簧木实际上是什么

01:09:39.819 --> 01:09:43.880
使用自动配置，因为

01:09:42.049 --> 01:09:47.480
有很多条件

01:09:43.880 --> 01:09:50.210
申请启用或禁用特定的自动

01:09:47.480 --> 01:09:53.390
配置，但我们确实努力做到

01:09:50.210 --> 01:09:56.030
在此图上的视图相同

01:09:53.390 --> 01:09:57.470
你可以看到你的应用程序

01:09:56.030 --> 01:09:59.900
将在运行时实际执行

01:09:57.470 --> 01:10:02.590
在运行中启动和调试

01:09:59.900 --> 01:10:02.590
组态

01:10:02.900 --> 01:10:15.150
是的，不，不，这是春天

01:10:13.260 --> 01:10:21.840
支持者仅在付费版本中

01:10:15.150 --> 01:10:28.800
 IntelliJ是的，它在纸上或

01:10:21.840 --> 01:10:35.360
氨水是的，它确实支持网络叙利亚

01:10:28.800 --> 01:10:35.360
是后面的一个问题，是的，谢谢

01:10:35.780 --> 01:10:42.630
我们正在考虑基本的

01:10:40.190 --> 01:10:47.520
问题是是否存在某种

01:10:42.630 --> 01:10:50.910
此图的图例右边有一个

01:10:47.520 --> 01:10:54.150
 twit出现，向您显示这是什么

01:10:50.910 --> 01:10:55.739
以及触发的原因是什么

01:10:54.150 --> 01:10:57.630
具体说明显示数量

01:10:55.739 --> 01:10:59.670
配置重要资源

01:10:57.630 --> 01:11:03.450
类，我们将显示

01:10:59.670 --> 01:11:06.150
实际上链接了豆子，所以我们都有

01:11:03.450 --> 01:11:08.280
这些信息我们还在思考

01:11:06.150 --> 01:11:12.080
到底是什么样的信息

01:11:08.280 --> 01:11:14.640
此图上必要或有用的，以及

01:11:12.080 --> 01:11:17.180
也许某种属性表可能

01:11:14.640 --> 01:11:20.130
是一个很好的解决方案，这样您就可以

01:11:17.180 --> 01:11:23.700
遍历这些节点并检查

01:11:20.130 --> 01:11:29.330
他更多的是这样的

01:11:23.700 --> 01:11:29.330
可能会来欢迎

01:11:36.309 --> 01:11:39.119
毫米-毫米

01:11:39.570 --> 01:11:45.070
是的，所以问题是申请

01:11:42.460 --> 01:11:47.800
 Yama配置文件支持与

01:11:45.070 --> 01:11:50.500
申请财产支持是的，我们

01:11:47.800 --> 01:11:53.170
将要尝试它的更多

01:11:50.500 --> 01:11:55.180
比得到相同的支持困难

01:11:53.170 --> 01:11:58.510
在应用程序上的特性，因为yamel 

01:11:55.180 --> 01:12:01.240
本身就比较复杂，但是我们

01:11:58.510 --> 01:12:07.960
真的很想在

01:12:01.240 --> 01:12:10.750
即将发布的版本15是的，当我

01:12:07.960 --> 01:12:13.510
尝试到什么您可以实际打印它

01:12:10.750 --> 01:12:16.990
在这里，您实际上也可以将其导出为

01:12:13.510 --> 01:12:18.880
一个PNG或SVG文件，所以非常好

01:12:16.990 --> 01:12:22.300
方便，如果您想

01:12:18.880 --> 01:12:25.630
您的项目中的疯狂之墙

01:12:22.300 --> 01:12:28.990
是的，这实际上是完整的

01:12:25.630 --> 01:12:30.970
配置图是的，我只是

01:12:28.990 --> 01:12:33.100
在屏幕启动演示中向您展示了

01:12:30.970 --> 01:12:36.360
应用程序是一个有限的设置，我们已经

01:12:33.100 --> 01:12:39.700
过滤其他一些配置

01:12:36.360 --> 01:12:42.040
根据适用于订单的条件

01:12:39.700 --> 01:12:44.380
这些自动配置是

01:12:42.040 --> 01:12:46.000
实际上是自动的最大值

01:12:44.380 --> 01:12:47.410
您可以在Springwood中获得的配置

01:12:46.000 --> 01:12:50.440
它具有以下所有依赖性

01:12:47.410 --> 01:12:51.880
斯普林伍德三和一切之一

01:12:50.440 --> 01:12:57.490
你清除所有的一切

01:12:51.880 --> 01:13:00.400
可以免费获得，是的

01:12:57.490 --> 01:13:05.920
另一个功能可以过滤出分组

01:13:00.400 --> 01:13:10.180
通过一组标志限制图形

01:13:05.920 --> 01:13:11.650
好的，如果你想

01:13:10.180 --> 01:13:14.680
尽管他们与我们讨论了更多

01:13:11.650 --> 01:13:17.340
需要不要犹豫，谢谢

01:13:14.680 --> 01:13:17.340
非常感谢你

01:13:24.370 --> 01:13:26.430
您

