WEBVTT
Kind: captions
Language: zh-Hans

00:00:08.860 --> 00:00:14.410
这是你希望的话题

00:00:11.469 --> 00:00:16.240
你你是你期望成为我的地方

00:00:14.410 --> 00:00:17.890
我叫约翰·施耐德（John Schneider） 

00:00:16.240 --> 00:00:20.980
工程工具团队和内部

00:00:17.890 --> 00:00:22.270
 Netflix的工具团队我是Taylor Witt 

00:00:20.980 --> 00:00:24.759
自我以及帐单和付款团队

00:00:22.270 --> 00:00:27.579
在今天的声音中，我们将要

00:00:24.759 --> 00:00:31.149
向您展示如何简单

00:00:27.579 --> 00:00:34.420
规范的Spring Boot Web服务和

00:00:31.149 --> 00:00:35.469
将其转变为云就绪服务

00:00:34.420 --> 00:00:37.000
我们将要做的是

00:00:35.469 --> 00:00:38.559
简单的spring boot服务以及

00:00:37.000 --> 00:00:40.239
我们将逐步添加

00:00:38.559 --> 00:00:40.960
具备云端功能的功能

00:00:40.239 --> 00:00:42.880
可能以前看过

00:00:40.960 --> 00:00:45.490
还有一些我保证你没有看过

00:00:42.880 --> 00:00:48.070
在我们开始添加一个

00:00:45.490 --> 00:00:51.940
服务发现并解释您的原因

00:00:48.070 --> 00:00:54.970
您想要这样做，我们将添加客户端

00:00:51.940 --> 00:00:57.010
侧负载平衡和功能区移动

00:00:54.970 --> 00:00:59.500
只是关于名声的一点点

00:00:57.010 --> 00:01:02.530
然后是断路器模式

00:00:59.500 --> 00:01:06.070
历史，我们将跟进

00:01:02.530 --> 00:01:08.829
我们如何基于标签的指标

00:01:06.070 --> 00:01:10.540
收集和报告并向您展示

00:01:08.829 --> 00:01:13.690
如何从中产生一些漂亮的视觉效果

00:01:10.540 --> 00:01:16.659
地图集指标又回到了

00:01:13.690 --> 00:01:19.360
结束，所以我们要编写的每一段代码

00:01:16.659 --> 00:01:21.400
显示您已经在github上了

00:01:19.360 --> 00:01:23.890
我们为此建立的组织

00:01:21.400 --> 00:01:26.290
如果你不叫netflix的春天一

00:01:23.890 --> 00:01:28.600
喜欢跟着开始

00:01:26.290 --> 00:01:30.909
这三个样本项目样本

00:01:28.600 --> 00:01:34.780
尤里卡（Eureka）样品成员资格和样品

00:01:30.909 --> 00:01:38.140
建议和自负责人以来

00:01:34.780 --> 00:01:39.880
所有这些存储库都是最终的

00:01:38.140 --> 00:01:41.530
回答，可以这么说， 

00:01:39.880 --> 00:01:42.880
如果您想集成件

00:01:41.530 --> 00:01:45.280
跟随样本

00:01:42.880 --> 00:01:48.070
推荐项目签出

00:01:45.280 --> 00:01:49.180
开始标记，因为我们将成为

00:01:48.070 --> 00:01:51.119
专为

00:01:49.180 --> 00:01:53.650
推荐项目并添加

00:01:51.119 --> 00:01:57.189
今天的功能，随着我们的前进

00:01:53.650 --> 00:01:58.840
沿着管理员笔记的最后一点

00:01:57.189 --> 00:02:00.549
如果您愿意，这是如果您再次

00:01:58.840 --> 00:02:02.380
一旦你打电话给这些

00:02:00.549 --> 00:02:04.659
回购继续并启动尤里卡和

00:02:02.380 --> 00:02:06.280
开始成为会员，您既可以这样做

00:02:04.659 --> 00:02:08.349
从命令行通过Gradle W 

00:02:06.280 --> 00:02:12.479
开机运行，或者如果您将它们卡在

00:02:08.349 --> 00:02:12.479
 IDE只是在两者中都运行main方法

00:02:15.000 --> 00:02:20.080
因此，为了描述我们要使用的API 

00:02:17.980 --> 00:02:22.030
今天要建设，我们要采取

00:02:20.080 --> 00:02:24.460
建议小组的职责

00:02:22.030 --> 00:02:26.980
 Netflix，它将变得非常苗条

00:02:24.460 --> 00:02:28.480
倒的例子，但建议

00:02:26.980 --> 00:02:30.160
服务将致电给

00:02:28.480 --> 00:02:32.050
会员服务取一些

00:02:30.160 --> 00:02:34.060
有关我们客户的信息

00:02:32.050 --> 00:02:36.580
例如，我们要确定年龄并

00:02:34.060 --> 00:02:38.700
我们将使用这些数据输入

00:02:36.580 --> 00:02:41.040
我们返回什么样的建议

00:02:38.700 --> 00:02:44.560
因此，如果我们只是转到代码

00:02:41.040 --> 00:02:46.840
该演示的一个方面，您可以看到它是一个

00:02:44.560 --> 00:02:49.470
常规的旧 spring boot 应用程序

00:02:46.840 --> 00:02:51.970
我们使用的是一类风格

00:02:49.470 --> 00:02:55.050
我们正在定义其余的模板模板

00:02:51.970 --> 00:02:58.870
我们正在定义一个休息端点API 

00:02:55.050 --> 00:03:01.630
建议将用户削减到

00:02:58.870 --> 00:03:03.040
我们将通过拨打

00:03:01.630 --> 00:03:06.190
正在运行的会员服务

00:03:03.040 --> 00:03:08.020
我们的本地主机端口8000 

00:03:06.190 --> 00:03:10.330
检查任何给定客户的年龄

00:03:08.020 --> 00:03:12.250
进来，我们要回来

00:03:10.330 --> 00:03:14.620
基于此的建议，因此任何人

00:03:12.250 --> 00:03:17.830
 17岁以下儿童推荐

00:03:14.620 --> 00:03:21.000
以上任何人都会有成人

00:03:17.830 --> 00:03:24.060
目录，当然我们有一些

00:03:21.000 --> 00:03:26.680
 Lombok在这里充实数据模型

00:03:24.060 --> 00:03:29.130
所以我们要开始

00:03:26.680 --> 00:03:29.130
家伙起来

00:03:41.620 --> 00:03:45.650
常见的春季食品应用

00:03:43.910 --> 00:03:51.530
我们要去看一些

00:03:45.650 --> 00:03:53.960
基础设施确保是这样

00:03:51.530 --> 00:03:56.540
我们确实有尤里卡运行，我们确实有

00:03:53.960 --> 00:04:00.380
会员服务开通，但没有

00:03:56.540 --> 00:04:02.060
建议，我们将只

00:04:00.380 --> 00:04:03.590
继续弄清楚我们要怎么做

00:04:02.060 --> 00:04:05.540
把它变成

00:04:03.590 --> 00:04:07.700
我们将在Netflix中构建的应用程序

00:04:05.540 --> 00:04:11.080
现在我们有了业务逻辑

00:04:07.700 --> 00:04:11.080
需要一些基础设施魔术

00:04:30.030 --> 00:04:32.780
怎么样

00:04:35.259 --> 00:04:40.549
所以在我们走得更远之前，我们是

00:04:38.179 --> 00:04:43.039
只是要休息一下

00:04:40.549 --> 00:04:44.299
对我们的服务提出的要求是

00:04:43.039 --> 00:04:49.249
运行我们将要运行的

00:04:44.299 --> 00:04:57.589
只是为了证明它是

00:04:49.249 --> 00:05:04.309
它已经启动并运行了，我想我必须

00:04:57.589 --> 00:05:06.229
击中正确的端口，好开始吧， 

00:05:04.309 --> 00:05:07.369
足够肯定，所以我们的建议

00:05:06.229 --> 00:05:11.149
服务真的很简单

00:05:07.369 --> 00:05:12.709
因为我的服务相信我

00:05:11.149 --> 00:05:14.089
 10岁那会说我

00:05:12.709 --> 00:05:17.509
应该看狮子王还是冰封的

00:05:14.089 --> 00:05:19.729
泰勒应该很熟悉

00:05:17.509 --> 00:05:23.749
说他要30岁

00:05:19.729 --> 00:05:25.009
他拍了几部不同的电影

00:05:23.749 --> 00:05:27.649
建议，他会说他应该

00:05:25.009 --> 00:05:28.849
看肖申克的救赎或这个

00:05:27.649 --> 00:05:33.379
我们听说过的大片

00:05:28.849 --> 00:05:35.539
叫做春天，就是这样

00:05:33.379 --> 00:05:38.959
简单的服务，这是一个好点

00:05:35.539 --> 00:05:40.759
说，这我基本上可以

00:05:38.959 --> 00:05:43.369
被打包成战争并部署到

00:05:40.759 --> 00:05:45.379
在您了解的数据中心中的tomcat 

00:05:43.369 --> 00:05:48.169
 websphere WebLogic或类似的东西

00:05:45.379 --> 00:05:49.579
所以对于任何刚开始的组织

00:05:48.169 --> 00:05:53.059
他们开始在一个数据中心

00:05:49.579 --> 00:05:54.829
开始你知道你知道某种

00:05:53.059 --> 00:05:58.039
像这样的旧平台

00:05:54.829 --> 00:05:59.959
起点，而不是Netflix 

00:05:58.039 --> 00:06:03.529
不一样，我们还不算老

00:05:59.959 --> 00:06:06.679
公司，我们才刚刚开始流式传输

00:06:03.529 --> 00:06:08.389
在2000年代中期，我们没有开始

00:06:06.679 --> 00:06:10.849
进行云迁移，直到之后

00:06:08.389 --> 00:06:13.009
 2010年您将看到的很多方式

00:06:10.849 --> 00:06:16.099
今天真的只是拥有的东西

00:06:13.009 --> 00:06:18.169
真的出现在最后五个左右

00:06:16.099 --> 00:06:22.939
年，以及我们如何从中学到

00:06:18.169 --> 00:06:25.119
这样，事不宜迟，我们会做

00:06:22.939 --> 00:06:27.339
首先是添加尤里卡

00:06:25.119 --> 00:06:31.939
如果您关注我们，我们将

00:06:27.339 --> 00:06:34.089
首先转到我们已经拥有的Gradle脚本

00:06:31.939 --> 00:06:36.679
获得推荐项目， 

00:06:34.089 --> 00:06:39.499
您会一遍又一遍地看到这种模式

00:06:36.679 --> 00:06:41.299
再次与春天的云，我们要

00:06:39.499 --> 00:06:46.430
添加对org uh Spring的依赖

00:06:41.299 --> 00:06:50.069
框架点云

00:06:46.430 --> 00:06:55.620
春天的云启动器尤里卡真的

00:06:50.069 --> 00:06:57.659
容易记住的名字，会刷新

00:06:55.620 --> 00:07:01.289
我们的gradle依赖项可以确保

00:06:57.659 --> 00:07:06.840
我们得到了新的依赖

00:07:01.289 --> 00:07:08.699
我们在等那唯一的财产

00:07:06.840 --> 00:07:13.289
我们需要获得这项服务

00:07:08.699 --> 00:07:14.909
与尤里卡沟通，这是

00:07:13.289 --> 00:07:19.530
只是尤里卡服务的位置

00:07:14.909 --> 00:07:22.490
本身，所以我们要说

00:07:19.530 --> 00:07:22.490
客户服务网址

00:07:29.170 --> 00:07:32.560
在这儿

00:07:33.180 --> 00:07:36.540
注意，我已经自己运行了尤里卡

00:07:35.190 --> 00:07:38.070
机器，所以再次知道你是否

00:07:36.540 --> 00:07:39.270
开始你要去的事情之一

00:07:38.070 --> 00:07:40.740
通知您一天是否开始

00:07:39.270 --> 00:07:42.810
你开始的中心，你不知道

00:07:40.740 --> 00:07:44.910
在云平台上敲你知道的权利

00:07:42.810 --> 00:07:45.780
现在是我们拥有的所有碎片

00:07:44.910 --> 00:07:47.790
我们将向您展示的碎片

00:07:45.780 --> 00:07:49.470
可以在这台笔记本电脑上运行

00:07:47.790 --> 00:07:51.210
在此笔记本电脑上运行，因此可以运行

00:07:49.470 --> 00:07:54.840
他们可以在中心跑的任何地方

00:07:51.210 --> 00:07:57.290
它们可以在任何地方的AWS或GCE中运行

00:07:54.840 --> 00:07:59.280
完全是为了

00:07:57.290 --> 00:08:02.010
稍后再示范

00:07:59.280 --> 00:08:05.160
我们将添加一个实例主机名

00:08:02.010 --> 00:08:06.540
为此，我们将其称为“一对一”， 

00:08:05.160 --> 00:08:08.970
我们唯一的推荐服务

00:08:06.540 --> 00:08:11.070
默认情况下今天将运行

00:08:08.970 --> 00:08:12.990
 Spring Cloud将选择主机名

00:08:11.070 --> 00:08:14.280
作为您的计算机的主机名，因为

00:08:12.990 --> 00:08:16.200
我们要去休息一下

00:08:14.280 --> 00:08:17.760
针对Eureka服务器本身的请求

00:08:16.200 --> 00:08:20.610
想要给它起一个名字

00:08:17.760 --> 00:08:22.140
在内部是可预测的，那就是

00:08:20.610 --> 00:08:25.890
我们通常设置什么，因为

00:08:22.140 --> 00:08:27.780
在Amazon中仅将Amazon实例ID 

00:08:25.890 --> 00:08:31.730
全球独一无二的任何事物

00:08:27.780 --> 00:08:31.730
一个代表您的一个服务器实例

00:08:32.690 --> 00:08:39.210
最后，我们只添加一个有能力的尤里卡客户

00:08:36.210 --> 00:08:43.470
在春季酿造的应用程序上，所以这

00:08:39.210 --> 00:08:45.990
是使它成云的第一步

00:08:43.470 --> 00:08:49.770
准备好了，因为我们还没有准备好

00:08:45.990 --> 00:08:51.870
显示功能区客户端

00:08:49.770 --> 00:08:54.390
负载平衡，但我们要添加一个

00:08:51.870 --> 00:08:57.510
其余模板的主要注释

00:08:54.390 --> 00:08:59.850
这样现有功能仍然

00:08:57.510 --> 00:09:01.530
使用其余模板时有效

00:08:59.850 --> 00:09:04.830
对我们的假货执行请求

00:09:01.530 --> 00:09:06.450
会员服务，然后它仍在继续

00:09:04.830 --> 00:09:09.470
使用常规DNS名称执行

00:09:06.450 --> 00:09:11.040
而不是尝试使用您会使用的

00:09:09.470 --> 00:09:13.880
所以我们要开始

00:09:11.040 --> 00:09:13.880
再次推荐

00:09:24.270 --> 00:09:31.050
现在当我们进入斯普林斯

00:09:26.399 --> 00:09:32.480
可爱的尤里卡服务器仪表板在这里我们

00:09:31.050 --> 00:09:35.459
看到我们有两个服务正在运行

00:09:32.480 --> 00:09:37.740
成员资格和推荐，还有您

00:09:35.459 --> 00:09:39.240
看到一个的实例名称

00:09:37.740 --> 00:09:43.050
并且只有推荐实例是

00:09:39.240 --> 00:09:48.180
确实是一个，所以这就是

00:09:43.050 --> 00:09:49.560
起点就在这里一件事

00:09:48.180 --> 00:09:51.990
注意，所以我们从这里开始

00:09:49.560 --> 00:09:55.529
一开始只有两项服务

00:09:51.990 --> 00:09:58.110
通过一些固定的对另一个执行

00:09:55.529 --> 00:10:00.720
我们确实要指出的DNS名称

00:09:58.110 --> 00:10:03.180
这与

00:10:00.720 --> 00:10:04.800
这样的环境，也许你在

00:10:03.180 --> 00:10:06.360
运行多个实例

00:10:04.800 --> 00:10:07.980
会员服务，你把他们

00:10:06.360 --> 00:10:10.140
在某种负载均衡器后面

00:10:07.980 --> 00:10:12.420
你是一个有弹性的AWS 

00:10:10.140 --> 00:10:16.110
负载均衡器，然后您将

00:10:12.420 --> 00:10:18.180
在该ELB上路由53 DNS名称，因此

00:10:16.110 --> 00:10:21.899
它有一个你知道一个固定的名字

00:10:18.180 --> 00:10:24.149
然后您执行那条路线53 

00:10:21.899 --> 00:10:25.980
提供的DNS名称，这是一个漂亮的

00:10:24.149 --> 00:10:26.970
常见范式我认为这是一个

00:10:25.980 --> 00:10:28.829
你会在野外找到的东西

00:10:26.970 --> 00:10:30.690
我们刚刚做的很好

00:10:28.829 --> 00:10:34.440
我们已经接受了，我们已经淘汰了

00:10:30.690 --> 00:10:36.959
中间的两块，所以我们

00:10:34.440 --> 00:10:39.120
现在准备添加客户端负载

00:10:36.959 --> 00:10:41.310
平衡器，可以推荐

00:10:39.120 --> 00:10:44.550
直接执行请求的服务

00:10:41.310 --> 00:10:46.649
直接反对

00:10:44.550 --> 00:10:47.910
会员服务，而不必

00:10:46.649 --> 00:10:50.130
定义其他部分

00:10:47.910 --> 00:10:52.529
负载平衡器和

00:10:50.130 --> 00:10:55.320
路线53地址，依此类推

00:10:52.529 --> 00:10:57.770
您提供的每一项服务

00:10:55.320 --> 00:11:00.540
您在您的微服务架构中

00:10:57.770 --> 00:11:03.810
这也给我们带来的是能力

00:11:00.540 --> 00:11:06.839
插入其他操作

00:11:03.810 --> 00:11:09.240
洞察力就在我们前面

00:11:06.839 --> 00:11:11.550
去添加断路器仪表板

00:11:09.240 --> 00:11:13.170
该断路器可以引用所有

00:11:11.550 --> 00:11:16.230
在您的服务器上运行的服务实例

00:11:13.170 --> 00:11:18.060
微服务架构

00:11:16.230 --> 00:11:20.880
查询您的生态服务器并获得全部

00:11:18.060 --> 00:11:23.100
您想运行的实例

00:11:20.880 --> 00:11:25.350
您知道的交付自动化

00:11:23.100 --> 00:11:26.180
例如Asgard或大三角帆

00:11:25.350 --> 00:11:28.529
你那以后

00:11:26.180 --> 00:11:31.140
再次可以执行针对

00:11:28.529 --> 00:11:33.570
尤里卡当你想开发一个

00:11:31.140 --> 00:11:35.250
指标后端，向您显示出一定的

00:11:33.570 --> 00:11:37.830
有关每个服务的统计信息

00:11:35.250 --> 00:11:40.440
在您的组织中运行

00:11:37.830 --> 00:11:42.540
如果可以的话，可以与尤里卡再次进行

00:11:40.440 --> 00:11:44.520
你回到了这个领域

00:11:42.540 --> 00:11:46.440
你有负载均衡器之类的东西

00:11:44.520 --> 00:11:49.080
您每个配置一次

00:11:46.440 --> 00:11:51.780
服务，您还必须能够

00:11:49.080 --> 00:11:54.000
逐项列出所有这些服务

00:11:51.780 --> 00:11:56.220
这些运营洞察力

00:11:54.000 --> 00:12:01.680
你试图获得的，所以这是关键

00:11:56.220 --> 00:12:04.140
服务发现的好处，所以其中之一

00:12:01.680 --> 00:12:05.310
其他不说话的项目

00:12:04.140 --> 00:12:09.030
大约在我们谈论的时候

00:12:05.310 --> 00:12:11.520
尤里卡很好，我们有服务发现

00:12:09.030 --> 00:12:12.840
我们有负载平衡，但我们如何

00:12:11.520 --> 00:12:15.960
启用测试以及我们如何启用

00:12:12.840 --> 00:12:18.530
推出，因此Netflix通常使用

00:12:15.960 --> 00:12:20.730
红黑策略对，我们有代码

00:12:18.530 --> 00:12:22.560
在生产中运行，我们不需要

00:12:20.730 --> 00:12:24.780
停机时间，我们想拉起一些新的

00:12:22.560 --> 00:12:27.180
代码，我们要确保它是

00:12:24.780 --> 00:12:30.060
合理的功能，然后我们想要

00:12:27.180 --> 00:12:33.300
禁用旧代码路径，但不禁用

00:12:30.060 --> 00:12:35.490
实际上在AWS中销毁了服务器

00:12:33.300 --> 00:12:38.160
可能需要五分钟到

00:12:35.490 --> 00:12:40.680
 15分钟启动一个新实例

00:12:38.160 --> 00:12:42.780
如果我们发现代码有问题，我们

00:12:40.680 --> 00:12:45.870
需要快速恢复发展新的

00:12:42.780 --> 00:12:50.730
实例将不会发生，那又怎样

00:12:45.870 --> 00:12:54.360
我们通常要做的是使用发现来

00:12:50.730 --> 00:12:57.360
影响某人的可见度状态

00:12:54.360 --> 00:12:59.550
给定实例，以便您可以看到我的

00:12:57.360 --> 00:13:01.470
推荐服务注册为

00:12:59.550 --> 00:13:05.270
发现中，我要去

00:13:01.470 --> 00:13:05.270
向前并稍微影响一下

00:13:09.730 --> 00:13:14.709
所以我只是要卷曲

00:13:12.489 --> 00:13:17.709
尤里卡服务，我要去

00:13:14.709 --> 00:13:19.629
这个实例的instanceid是

00:13:17.709 --> 00:13:20.919
独一无二的

00:13:19.629 --> 00:13:25.749
我要放的推荐群组

00:13:20.919 --> 00:13:27.850
他们失去服务了，我们去了

00:13:25.749 --> 00:13:30.009
任何人使用色带或任何种类的

00:13:27.850 --> 00:13:33.639
基于Eureka的负载平衡不会

00:13:30.009 --> 00:13:36.629
能够找到这个人，他现在很棒

00:13:33.639 --> 00:13:39.519
残疾人，没有交通会去他

00:13:36.629 --> 00:13:42.069
任务实现了，我们的红黑很好

00:13:39.519 --> 00:13:44.230
不完全是我的意思，我们的一些服务

00:13:42.069 --> 00:13:46.389
基于逮捕，但根据其他团队

00:13:44.230 --> 00:13:48.939
不仅仅是休息服务

00:13:46.389 --> 00:13:52.359
结算和付款，我们要做的就是

00:13:48.939 --> 00:13:55.480
匹配或基于队列，那么您如何

00:13:52.359 --> 00:13:58.929
根据某些情况启用红黑色

00:13:55.480 --> 00:14:00.699
那不是以休息为中心的，所以一块

00:13:58.929 --> 00:14:02.769
我们发现春天云中缺少

00:14:00.699 --> 00:14:04.689
我们添加的正是这种能力

00:14:02.769 --> 00:14:07.389
对发现做出反应的能力

00:14:04.689 --> 00:14:09.369
状态，所以我要继续添加

00:14:07.389 --> 00:14:11.999
这种依赖关系，我们将看到

00:14:09.369 --> 00:14:11.999
为我们工作

00:14:21.939 --> 00:14:27.470
所以它会在春天的云下

00:14:24.439 --> 00:14:30.970
 netflix贡献这是一个图书馆

00:14:27.470 --> 00:14:33.410
我们仅出于以下目的创建

00:14:30.970 --> 00:14:34.819
采取一些内部代码，我们已经

00:14:33.410 --> 00:14:36.110
在Spring已经使用了一段时间

00:14:34.819 --> 00:14:38.240
启动，然后将其放入

00:14:36.110 --> 00:14:40.279
与社区分享日光

00:14:38.240 --> 00:14:42.740
我完全希望这将是

00:14:40.279 --> 00:14:44.540
每个代码的临时位置

00:14:42.740 --> 00:14:47.120
这一点我们真的很想投入

00:14:44.540 --> 00:14:49.579
拉取对Spring cloud的请求是

00:14:47.120 --> 00:14:51.220
是的，不再有内部包装器在

00:14:49.579 --> 00:14:56.589
只有我们知道的Netflix 

00:14:51.220 --> 00:14:56.589
致力于分享我们所学到的东西

00:15:00.819 --> 00:15:09.889
只需刷新那些依赖项， 

00:15:04.579 --> 00:15:12.230
回来，那边我会去

00:15:09.889 --> 00:15:13.939
回到我们的推荐服务

00:15:12.230 --> 00:15:18.050
我们要做的是实际上开始

00:15:13.939 --> 00:15:24.319
对该事件进行编码非常容易

00:15:18.050 --> 00:15:26.779
春天有事件监听器，这是一个

00:15:24.319 --> 00:15:29.149
春天的大进步

00:15:26.779 --> 00:15:31.249
应用程序事件模式喜欢这个

00:15:29.149 --> 00:15:34.089
批注大家和为

00:15:31.249 --> 00:15:34.089
为此发布

00:15:41.530 --> 00:15:52.460
所以我们只是将自己编码为

00:15:44.240 --> 00:15:54.560
尤里卡状态改变事件

00:15:52.460 --> 00:15:57.350
简单起见，我只是打印出来

00:15:54.560 --> 00:15:59.690
结果，所以这个事件将

00:15:57.350 --> 00:16:04.070
解雇并返回我的当前状态

00:15:59.690 --> 00:16:07.070
在我看来，不是我的感谢，而是

00:16:04.070 --> 00:16:09.500
世界其他地方都可以看到，如果

00:16:07.070 --> 00:16:11.510
发现服务器认为该实例是

00:16:09.500 --> 00:16:15.260
停机或服务中断是什么

00:16:11.510 --> 00:16:18.250
将在这里被触发，所以如果我们只是

00:16:15.260 --> 00:16:18.250
弹跳该应用程序

00:16:33.050 --> 00:16:39.210
希望我们应该看到Discovery的想法

00:16:36.870 --> 00:16:42.030
我们退役了，因为我弹跳了

00:16:39.210 --> 00:16:43.320
它足够快以至于我认为

00:16:42.030 --> 00:16:45.030
并没有真正死掉，然后回来

00:16:43.320 --> 00:16:47.760
新实例，我是谁

00:16:45.030 --> 00:16:52.530
暂时失去连接，让我们看看

00:16:47.760 --> 00:16:58.170
如果我可以稍微改变一下，那么让我们

00:16:52.530 --> 00:17:01.230
把他放回去，如果我去这里，我明白了

00:16:58.170 --> 00:17:05.460
状态在“发现”中处于现在状态

00:17:01.230 --> 00:17:07.800
我们只是在等待

00:17:05.460 --> 00:17:13.020
在这种情况下认识到事实

00:17:07.800 --> 00:17:15.150
现在是这样，我们在这里有了

00:17:13.020 --> 00:17:17.070
这是我们要放入的地方

00:17:15.150 --> 00:17:19.410
实际的CoreLogic 

00:17:17.070 --> 00:17:22.770
如果你在一个监听容器上

00:17:19.410 --> 00:17:25.610
 JMS容器右侧容器点停止

00:17:22.770 --> 00:17:28.950
如果您是Spring 集成爱好者

00:17:25.610 --> 00:17:31.220
控制总线点发送

00:17:28.950 --> 00:17:35.490
停止播放您感兴趣的频道

00:17:31.220 --> 00:17:37.620
对，如果您是预定的工作，您知道

00:17:35.490 --> 00:17:40.050
找到工作禁用他们Spring Batch

00:17:37.620 --> 00:17:42.600
杀死那里的任何重复出现的实例

00:17:40.050 --> 00:17:44.250
现在任何正在运行的实例，即使

00:17:42.600 --> 00:17:46.740
你不只是休息的中心

00:17:44.250 --> 00:17:49.620
可以参加红色的申请

00:17:46.740 --> 00:17:51.390
使用发现黑色，那就是

00:17:49.620 --> 00:17:54.660
正是我们在Netflix上的做法

00:17:51.390 --> 00:17:56.880
内部工具，当我们说我们想要一个

00:17:54.660 --> 00:17:58.680
红黑部署会做到这一点

00:17:56.880 --> 00:18:00.660
在旧的代码库中找到实例

00:17:58.680 --> 00:18:03.270
并禁用它们使它们停止服务

00:18:00.660 --> 00:18:04.980
提出新的，让那些

00:18:03.270 --> 00:18:05.970
交通，如果有任何批处理的东西

00:18:04.980 --> 00:18:09.290
在后台运行

00:18:05.970 --> 00:18:09.290
那些会被这个阻止

00:18:12.900 --> 00:18:21.190
我们喜欢的方式之一

00:18:16.110 --> 00:18:23.470
春天的云实现了尤里卡

00:18:21.190 --> 00:18:25.750
服务器集成本身就是

00:18:23.470 --> 00:18:29.200
放在Spring 上的注释

00:18:25.750 --> 00:18:30.940
引导一下，乍一看你脸红

00:18:29.200 --> 00:18:32.380
好吧，这不是超级有用，为什么我不

00:18:30.940 --> 00:18:35.440
只需下载二进制文件并启动

00:18:32.380 --> 00:18:37.600
事情，但是有趣的是

00:18:35.440 --> 00:18:40.420
因为自从你在装饰

00:18:37.600 --> 00:18:43.210
我们可以使用现有的Spring Boot应用程序

00:18:40.420 --> 00:18:45.760
开始为您的生态系统添加功能

00:18:43.210 --> 00:18:48.130
服务器尚不存在，所以我们

00:18:45.760 --> 00:18:52.120
已经谈论过尤里卡服务器的使用

00:18:48.130 --> 00:18:55.930
在我们的自动部署或自动

00:18:52.120 --> 00:18:58.600
现在就可以交付管道了

00:18:55.930 --> 00:19:00.490
带一个你知道海军尤里卡服务器

00:18:58.600 --> 00:19:03.430
装饰的 spring boot 应用程序和

00:19:00.490 --> 00:19:06.610
开始向其添加量身定制的端点

00:19:03.430 --> 00:19:07.990
您的部署自动化类型，因此

00:19:06.610 --> 00:19:09.640
你知道你可以加一个红黑的

00:19:07.990 --> 00:19:11.680
知道如何服用的终点

00:19:09.640 --> 00:19:14.290
现有的一组实例

00:19:11.680 --> 00:19:16.360
发现，你知道把另一个

00:19:14.290 --> 00:19:17.470
如果知道，则将其反转

00:19:16.360 --> 00:19:20.800
不喜欢您可以添加的结果

00:19:17.470 --> 00:19:22.780
一种基本的非常贫穷的人的形式

00:19:20.800 --> 00:19:24.930
金丝雀和自动金丝雀分析

00:19:22.780 --> 00:19:28.030
为此，这真的很有趣

00:19:24.930 --> 00:19:32.280
选择，我认为一个明智的选择是

00:19:28.030 --> 00:19:32.280
关于如何实现这一点

00:19:35.340 --> 00:19:44.410
好吧，我们不要这样做，所以我们确实想要它

00:19:43.090 --> 00:19:46.150
因为我们要跳，所以我们

00:19:44.410 --> 00:19:47.770
要从尤里卡跳下来，现在

00:19:46.150 --> 00:19:49.660
客户端负载均衡之前

00:19:47.770 --> 00:19:51.010
进入下一个主题

00:19:49.660 --> 00:19:53.890
观众中的任何问题

00:19:51.010 --> 00:19:59.070
到目前为止，关于服务发现的原因

00:19:53.890 --> 00:19:59.070
会用它等等

00:20:07.300 --> 00:20:12.920
所以对于动物园管理员来说

00:20:10.420 --> 00:20:15.620
最初被视为对

00:20:12.920 --> 00:20:18.620
管理发现，我们刚刚发现它

00:20:15.620 --> 00:20:20.360
没有很好地扩展， 

00:20:18.620 --> 00:20:23.120
当时的稳定性有点差

00:20:20.360 --> 00:20:24.980
有点可疑，所以你知道一个

00:20:23.120 --> 00:20:26.300
一百个实例或一千个实例

00:20:24.980 --> 00:20:28.280
实例可能没什么大不了的

00:20:26.300 --> 00:20:30.680
当数以万计的时候

00:20:28.280 --> 00:20:32.660
成为维护的实例

00:20:30.680 --> 00:20:35.240
比什么都重要

00:20:32.660 --> 00:20:38.960
那是发现的起源

00:20:35.240 --> 00:20:41.240
尤里卡（Eureka）抱歉，我们也要提一下

00:20:38.960 --> 00:20:44.179
按照这些思路，我不认为我

00:20:41.240 --> 00:20:45.590
前面提到过这应该是

00:20:44.179 --> 00:20:49.790
从这张图可以明显看出

00:20:45.590 --> 00:20:51.500
尤里卡是

00:20:49.790 --> 00:20:52.910
整个失败

00:20:51.500 --> 00:20:55.490
显微镜和建筑，所以

00:20:52.910 --> 00:20:58.880
至关重要的是，您不仅要拥有

00:20:55.490 --> 00:21:01.730
这样的例子为我们运行

00:20:58.880 --> 00:21:04.280
我们在多个亚马逊运营吗

00:21:01.730 --> 00:21:06.080
地区和每个可用区域

00:21:04.280 --> 00:21:08.679
在这些区域内，我们在

00:21:06.080 --> 00:21:11.030
每个服务器至少运行一台Eureka服务器

00:21:08.679 --> 00:21:13.580
每个亚马逊地区的可用区

00:21:11.030 --> 00:21:15.380
我们因为尤里卡（Eureka） 

00:21:13.580 --> 00:21:18.860
设计为容错的

00:21:15.380 --> 00:21:20.390
分发，基本上你知道什么

00:21:18.860 --> 00:21:24.790
我们将永远有一个Eureka服务器

00:21:20.390 --> 00:21:35.470
您的服务可以与您交谈

00:21:24.790 --> 00:21:37.600
我希望这只是升级

00:21:35.470 --> 00:21:39.460
 Spring Boot和Spring Cloud版本

00:21:37.600 --> 00:21:41.230
一切都取决于我们的工作水平

00:21:39.460 --> 00:21:43.600
在春天的云上，得到那些

00:21:41.230 --> 00:21:45.190
定义的接口，看看我们

00:21:43.600 --> 00:21:47.440
应该是的常见模式

00:21:45.190 --> 00:21:49.720
跨领域交叉

00:21:47.440 --> 00:21:52.770
发现机制，所以我们展示

00:21:49.720 --> 00:21:54.880
响应状态更改事件

00:21:52.770 --> 00:21:56.890
希望这成为核心的一部分

00:21:54.880 --> 00:21:59.620
控制台还将支持的界面

00:21:56.890 --> 00:22:00.790
我们将在整个

00:21:59.620 --> 00:22:01.750
登上你知道你会工作，所以你

00:22:00.790 --> 00:22:03.070
不用担心

00:22:01.750 --> 00:22:05.620
但这就是目标，那就是

00:22:03.070 --> 00:22:07.510
这就是为什么我们喜欢Spring Boot Netflix 

00:22:05.620 --> 00:22:09.460
不太可能从尤里卡迁移到

00:22:07.510 --> 00:22:11.470
控制台很可能从

00:22:09.460 --> 00:22:13.210
我们去这里一年，所以即使

00:22:11.470 --> 00:22:15.880
我们内部想要的痛苦

00:22:13.210 --> 00:22:17.080
使我尽可能地少

00:22:15.880 --> 00:22:19.510
对我们内部的了解

00:22:17.080 --> 00:22:23.530
从Auriga的v1迁移到v2是

00:22:19.510 --> 00:22:25.450
您知道v2，v2服务器将

00:22:23.530 --> 00:22:27.520
报告已注册的实例

00:22:25.450 --> 00:22:30.430
与b1服务器，所以你有点

00:22:27.520 --> 00:22:32.140
有时间在那里

00:22:30.430 --> 00:22:33.730
您正在运行的服务版本

00:22:32.140 --> 00:22:35.800
知道潜在的你有混合

00:22:33.730 --> 00:22:40.710
客户和您，随心所欲

00:22:35.800 --> 00:22:40.710
对我-是的

00:22:45.090 --> 00:22:50.860
不是真的，因为我们仍在做uzo 

00:22:47.980 --> 00:22:52.509
蜜蜂偶尔哦，对不起

00:22:50.860 --> 00:22:53.919
他问我们是否认为那里

00:22:52.509 --> 00:22:56.499
我们失去的一切，当我们采取

00:22:53.919 --> 00:22:57.970
奥比不在画面中，事实是

00:22:56.499 --> 00:23:00.129
告诉有很多事例

00:22:57.970 --> 00:23:03.009
 Netflix中仅使用的应用程序

00:23:00.129 --> 00:23:05.470
 OB，因为它更简单，他们不

00:23:03.009 --> 00:23:08.110
需要很多循环路由

00:23:05.470 --> 00:23:10.029
有时我们只是使用发现的东西

00:23:08.110 --> 00:23:11.470
 53号公路，因为我们知道只有

00:23:10.029 --> 00:23:13.809
一两个实例往往是

00:23:11.470 --> 00:23:15.580
比生产应用程序更多的工具

00:23:13.809 --> 00:23:17.259
因为一旦你到达了

00:23:15.580 --> 00:23:20.830
我要站起来一千个实例

00:23:17.259 --> 00:23:23.499
一件事情，做红黑，我们要

00:23:20.830 --> 00:23:26.369
改走尤里卡路线，然后

00:23:23.499 --> 00:23:29.080
另外，我的意思是说实话

00:23:26.369 --> 00:23:30.850
历史上有反对

00:23:29.080 --> 00:23:34.119
 Elby的今天还不如现在

00:23:30.850 --> 00:23:36.809
曾经是当我们在ec2中运行时

00:23:34.119 --> 00:23:39.369
经典，几乎是不可能的

00:23:36.809 --> 00:23:40.799
将新个体私有化，以便您知道

00:23:39.369 --> 00:23:44.769
没有接触到世界其他地方

00:23:40.799 --> 00:23:46.499
 VPC不再如此，但是我们有了

00:23:44.769 --> 00:23:49.029
已经走了

00:23:46.499 --> 00:23:50.710
客户端负载平衡，我们已经

00:23:49.029 --> 00:23:52.389
发现了客户端的其他好处

00:23:50.710 --> 00:23:55.210
负载均衡，我们将向您展示

00:23:52.389 --> 00:23:57.850
即使今天， 

00:23:55.210 --> 00:23:59.619
 OBS和V PC却没有，所以我

00:23:57.850 --> 00:24:03.179
认为我们有点像意外跌倒

00:23:59.619 --> 00:24:03.179
进入它，现在我们很高兴我们做了

00:24:16.730 --> 00:24:23.550
不，不，我们仍在使用，我们仍在使用路线53 

00:24:20.420 --> 00:24:27.480
并且在内部，我们有配置

00:24:23.550 --> 00:24:29.370
穿过每个尤里卡

00:24:27.480 --> 00:24:31.650
 Eureka实例服务器

00:24:29.370 --> 00:24:34.530
实例，所以它只是到53的路线

00:24:31.650 --> 00:24:35.850
众所周知的DNS名称，确实很少

00:24:34.530 --> 00:24:38.280
其中的一个，因为我们每个都有一个

00:24:35.850 --> 00:24:40.410
可用区和每个区域

00:24:38.280 --> 00:24:42.450
但是这些东西都烤成了

00:24:40.410 --> 00:24:44.970
当我们推动我们的核心部署时

00:24:42.450 --> 00:24:46.620
在基础ami上将一些东西放到ASG中

00:24:44.970 --> 00:24:48.600
只有环境变量

00:24:46.620 --> 00:24:50.160
将为您设置这些属性

00:24:48.600 --> 00:24:52.170
因为我们知道最重要的是

00:24:50.160 --> 00:24:54.690
适合您的Eureka端点

00:24:52.170 --> 00:25:02.120
使用它是您所在区域中的那个

00:24:54.690 --> 00:25:02.120
可用区好

00:25:11.299 --> 00:25:14.840
他们至少按照我们的方式

00:25:13.429 --> 00:25:16.970
在内部运行，这将是一个

00:25:14.840 --> 00:25:23.659
可配置的东西，但我们目前正在做

00:25:16.970 --> 00:25:26.419
是的，是的，数据是共享的

00:25:23.659 --> 00:25:27.950
这不是完整的复制，而是

00:25:26.419 --> 00:25:30.110
会变得不完整所以会被分裂

00:25:27.950 --> 00:25:31.610
跨节点数量，但是很多

00:25:30.110 --> 00:25:34.639
你想要那个复制因子

00:25:31.610 --> 00:25:36.230
但是，是的，我们确实做到了

00:25:34.639 --> 00:25:38.029
可能值得注意这些数据

00:25:36.230 --> 00:25:40.399
今天就站了

00:25:38.029 --> 00:25:44.269
运到尤里卡的客户之一

00:25:40.399 --> 00:25:45.799
我本地计算机上的Eureka知道

00:25:44.269 --> 00:25:48.200
其他所有实例的状态

00:25:45.799 --> 00:25:49.940
那是尤里卡二号的最大改进

00:25:48.200 --> 00:25:52.249
正在减少足迹， 

00:25:49.940 --> 00:25:54.820
能够订阅感兴趣的服务器

00:25:52.249 --> 00:25:57.289
而不是整个服务器场

00:25:54.820 --> 00:25:59.059
所以绝对也期待尤里卡

00:25:57.289 --> 00:26:01.429
一旦准备好，我们将滚动

00:25:59.059 --> 00:26:05.690
用春天的云就可以了

00:26:01.429 --> 00:26:06.859
单单受益

00:26:05.690 --> 00:26:08.600
而且我们已经击中了几个

00:26:06.859 --> 00:26:10.549
我在尤里卡（Eureka）上的要点是

00:26:08.600 --> 00:26:14.149
最终一致的分布式系统

00:26:10.549 --> 00:26:16.639
所以当你

00:26:14.149 --> 00:26:18.169
去做一个传递管道，你

00:26:16.639 --> 00:26:22.539
想要使用类似红黑色的东西

00:26:18.169 --> 00:26:27.109
推杆，或者你知道某种金丝雀

00:26:22.539 --> 00:26:28.940
分析过程，您几乎必须

00:26:27.109 --> 00:26:30.440
接受您的旧版本

00:26:28.940 --> 00:26:32.059
服务和新版本的服务

00:26:30.440 --> 00:26:34.129
有一段时间要开始运作

00:26:32.059 --> 00:26:35.690
同时有一些

00:26:34.129 --> 00:26:37.100
对您如何发展自己的意义

00:26:35.690 --> 00:26:39.950
这些服务需要

00:26:37.100 --> 00:26:42.739
这些服务必须是无状态的

00:26:39.950 --> 00:26:44.149
接受这些变化

00:26:42.739 --> 00:26:46.999
意味着您的服务可能也需要

00:26:44.149 --> 00:26:48.859
让您更快地了解增量

00:26:46.999 --> 00:26:50.799
变化，而不是大规模的变化

00:26:48.859 --> 00:26:52.669
当您从一个版本转到另一个版本

00:26:50.799 --> 00:26:54.559
从帐单和付款中讲

00:26:52.669 --> 00:26:56.359
团队不容易采用

00:26:54.559 --> 00:26:59.119
每个人都做出或包裹你的头

00:26:56.359 --> 00:27:02.509
围绕使用事务性

00:26:59.119 --> 00:27:04.639
非关系的系统

00:27:02.509 --> 00:27:07.090
非交易最终一致

00:27:04.639 --> 00:27:08.659
处理金钱时的榜样

00:27:07.090 --> 00:27:10.429
这并不容易

00:27:08.659 --> 00:27:12.799
不要以为那不会是一个

00:27:10.429 --> 00:27:14.539
简单的转换，但值得

00:27:12.799 --> 00:27:17.649
之后绝对是正确的事情

00:27:14.539 --> 00:27:19.039
我们做到了，这就是意见

00:27:17.649 --> 00:27:21.740
好吧

00:27:19.039 --> 00:27:22.879
好，我们要继续加载客户端

00:27:21.740 --> 00:27:24.400
我们将展示侧面负载平衡

00:27:22.879 --> 00:27:25.840
你如何整合功能区

00:27:24.400 --> 00:27:31.120
还有一些关于

00:27:25.840 --> 00:27:33.730
那但首先我需要

00:27:31.120 --> 00:27:35.470
在这里打赌，你知道泰勒和我

00:27:33.730 --> 00:27:37.870
一直在来回

00:27:35.470 --> 00:27:41.020
大括号的著名问题

00:27:37.870 --> 00:27:45.340
是应该在下一行还是

00:27:41.020 --> 00:27:47.230
在上一行，所以我希望

00:27:45.340 --> 00:27:48.820
贿赂你的东西

00:27:47.230 --> 00:27:50.290
对会议组织者的反馈

00:27:48.820 --> 00:27:52.060
下次你喝票的时候我

00:27:50.290 --> 00:27:56.620
可以贿赂人们，但谁愿意

00:27:52.060 --> 00:27:59.220
支撑在同一行上

00:27:56.620 --> 00:28:03.610
泰勒那压倒性的

00:27:59.220 --> 00:28:14.080
谢谢，我同意这是客观的

00:28:03.610 --> 00:28:16.690
更好，所以这两个的第一位

00:28:14.080 --> 00:28:18.970
两个罗纹的融合是我们只是

00:28:16.690 --> 00:28:20.590
将要删除此覆盖该

00:28:18.970 --> 00:28:22.360
我们有休息模板，我们要

00:28:20.590 --> 00:28:24.490
Spring Cloud最擅长的是什么

00:28:22.360 --> 00:28:28.480
和自动为我们配置东西

00:28:24.490 --> 00:28:29.830
我们不知道的场景，所以我们

00:28:28.480 --> 00:28:30.970
要删除其余模板以及什么

00:28:29.830 --> 00:28:33.340
我们要得到的是我们要

00:28:30.970 --> 00:28:36.250
得到一个自动电线修饰的模板

00:28:33.340 --> 00:28:38.980
已经配置为与

00:28:36.250 --> 00:28:42.910
尤里卡，所以我们现在可以

00:28:38.980 --> 00:28:46.540
将此硬编码的DNS名称替换为

00:28:42.910 --> 00:28:50.110
我们这样设置的虚拟主机名

00:28:46.540 --> 00:28:52.870
默认情况下，虚拟主机名是

00:28:50.110 --> 00:28:58.690
这个应用程序的名称，我们可以参考

00:28:52.870 --> 00:29:00.100
这样我就永远不知道

00:28:58.690 --> 00:29:01.300
知道PowerPoint很烦人，但我

00:29:00.100 --> 00:29:02.620
不知道会继续出现

00:29:01.300 --> 00:29:04.270
正如我试图在之间

00:29:02.620 --> 00:29:06.040
它真正想要插入的东西

00:29:04.270 --> 00:29:09.430
自己回到本演示文稿中， 

00:29:06.040 --> 00:29:11.020
我们只是不会接受所以

00:29:09.430 --> 00:29:13.260
是的，现在该服务正在运行

00:29:11.020 --> 00:29:13.260
再次

00:29:17.880 --> 00:29:22.210
你会看到结果是一样的

00:29:20.500 --> 00:29:26.170
所以现在我们不再使用

00:29:22.210 --> 00:29:28.410
我们使用虚拟地址的硬编码地址

00:29:26.170 --> 00:29:32.020
主机名，我们能够做到这一点

00:29:28.410 --> 00:29:33.940
关于，所以我们谈了一点

00:29:32.020 --> 00:29:36.100
客户端负载的好处

00:29:33.940 --> 00:29:37.240
平衡，而不是B和我

00:29:36.100 --> 00:29:38.980
给你几个具体的

00:29:37.240 --> 00:29:42.040
已经烤成的例子

00:29:38.980 --> 00:29:44.200
功能区开放源码，所以您就是每个人的

00:29:42.040 --> 00:29:46.450
熟悉如循环式

00:29:44.200 --> 00:29:49.350
策略或地理位置定位

00:29:46.450 --> 00:29:51.790
类型策略，其他一些

00:29:49.350 --> 00:29:54.070
功能区默认为您提供

00:29:51.790 --> 00:29:56.860
一个称为防区规则的区域

00:29:54.070 --> 00:29:59.710
因此，假设您有一个

00:29:56.860 --> 00:30:01.990
在美国AWS区域中运行的应用程序

00:29:59.710 --> 00:30:03.880
东其中三分之二

00:30:01.990 --> 00:30:05.860
可用区中的三个

00:30:03.880 --> 00:30:07.890
运行以下三个可用区B 

00:30:05.860 --> 00:30:12.760
他们运行一个可用区，看看是否

00:30:07.890 --> 00:30:14.680
该服务的客户端不断执行

00:30:12.760 --> 00:30:16.510
针对这三个实例的请求

00:30:14.680 --> 00:30:18.670
在可用区a中运行的

00:30:16.510 --> 00:30:21.850
他们不断回头，你知道不好

00:30:18.670 --> 00:30:23.260
结果地球平衡器可以推断

00:30:21.850 --> 00:30:25.720
可能有问题

00:30:23.260 --> 00:30:28.060
与该可用区等

00:30:25.720 --> 00:30:30.730
而不是整个循环

00:30:28.060 --> 00:30:32.920
可以说我是九个可用实例

00:30:30.730 --> 00:30:34.540
要开始偏爱这另外两个

00:30:32.920 --> 00:30:37.060
此处的可用区有一段时间

00:30:34.540 --> 00:30:40.930
直到我们看到可用区开始

00:30:37.060 --> 00:30:43.990
治愈第二个可能是一个

00:30:40.930 --> 00:30:47.020
电路上的可用性过滤器规则

00:30:43.990 --> 00:30:49.900
如果您有断路器，断路器会再次跳闸

00:30:47.020 --> 00:30:51.280
五项服务中的两项，其中两项已开放

00:30:49.900 --> 00:30:53.410
断路器，现在

00:30:51.280 --> 00:30:56.140
跌倒在他们的背上三

00:30:53.410 --> 00:30:57.940
其中正常返回我

00:30:56.140 --> 00:30:59.890
将给予优惠待遇

00:30:57.940 --> 00:31:01.630
这三个运行正常

00:30:59.890 --> 00:31:04.060
而不是那些给我的

00:31:01.630 --> 00:31:06.130
后退，第三个

00:31:04.060 --> 00:31:08.740
只是负载均衡器可以保持

00:31:06.130 --> 00:31:10.180
跟踪响应时间并给出

00:31:08.740 --> 00:31:12.280
对那些人的优惠

00:31:10.180 --> 00:31:15.310
响应最快的实例

00:31:12.280 --> 00:31:19.750
似乎是很常识的事情

00:31:15.310 --> 00:31:21.940
去做，你知道重要的是

00:31:19.750 --> 00:31:24.100
请注意，使用色带可以

00:31:21.940 --> 00:31:25.720
将这些各种规则组合在一起

00:31:24.100 --> 00:31:28.210
我可以给个优惠

00:31:25.720 --> 00:31:30.190
以最快的速度处理实例

00:31:28.210 --> 00:31:32.590
响应时间

00:31:30.190 --> 00:31:36.610
同时添加区域回避规则，并

00:31:32.590 --> 00:31:38.230
您可以自己插入负载

00:31:36.610 --> 00:31:39.940
公正地平衡策略

00:31:38.230 --> 00:31:43.120
实施I农村接口并

00:31:39.940 --> 00:31:45.460
进行了大量适当的配置

00:31:43.120 --> 00:31:46.720
更大的灵活性以及您可以做什么

00:31:45.460 --> 00:31:51.450
您可以进行的负载平衡条款

00:31:46.720 --> 00:31:51.450
曾经只用e lb或路线53 

00:31:51.750 --> 00:31:56.529
好吧

00:31:54.059 --> 00:31:59.350
我们要注意的最后一件事

00:31:56.529 --> 00:32:02.200
丝带，我认为这有点像

00:31:59.350 --> 00:32:03.309
不是父项的隐藏功能

00:32:02.200 --> 00:32:05.049
从一开始不是父母

00:32:03.309 --> 00:32:06.610
无论何时使用色带或何时

00:32:05.049 --> 00:32:09.340
您已经启用了功能区

00:32:06.610 --> 00:32:12.730
模板已经重试

00:32:09.340 --> 00:32:14.289
内置的机制，如果您有两个

00:32:12.730 --> 00:32:16.000
服务正在运行的实例和一个

00:32:14.289 --> 00:32:18.429
跌了，一个就涨了，你的

00:32:16.000 --> 00:32:20.500
特定的客户要求违背

00:32:18.429 --> 00:32:22.929
下来的那个有一个

00:32:20.500 --> 00:32:25.659
可配置属性，表示重试和

00:32:22.929 --> 00:32:28.330
次数，甚至更多

00:32:25.659 --> 00:32:29.529
取决于您的规则是第一个

00:32:28.330 --> 00:32:32.919
一个人会失败，它将尝试

00:32:29.529 --> 00:32:35.500
第二实例RT为您服务

00:32:32.919 --> 00:32:36.730
烤成丝带不要在那些

00:32:35.500 --> 00:32:39.610
仅当我们进入历史时的术语

00:32:36.730 --> 00:32:41.710
忘记了你我们不这样做

00:32:39.610 --> 00:32:42.460
发布或放置或删除将是

00:32:41.710 --> 00:32:44.350
有点危险

00:32:42.460 --> 00:32:47.019
这是您可以配置的选项

00:32:44.350 --> 00:32:52.110
您选择走那条路线，但这是

00:32:47.019 --> 00:32:52.110
可能不是一个好主意

00:32:54.510 --> 00:32:58.840
看看我们如何准时，以及是否

00:32:57.520 --> 00:33:05.049
我们是否要谈论支付或

00:32:58.840 --> 00:33:09.429
不是我说虽然我们应该跳过它

00:33:05.049 --> 00:33:13.390
问这里有人有成名吗

00:33:09.429 --> 00:33:17.770
谢谢斯宾塞，所以在内部是假装

00:33:13.390 --> 00:33:19.390
没有使用很多Netflix，它没有

00:33:17.770 --> 00:33:21.040
内部有很多支持

00:33:19.390 --> 00:33:23.500
我们正在尝试看看是否

00:33:21.040 --> 00:33:24.549
适当还是不尝试获得

00:33:23.500 --> 00:33:27.429
衡量社区利益的标准

00:33:24.549 --> 00:33:28.900
这就是为什么你喜欢名望，为什么你认为我们

00:33:27.429 --> 00:33:31.000
你应该知道继续使用吗

00:33:28.900 --> 00:33:32.860
任何举手并有

00:33:31.000 --> 00:33:34.360
对此的意见请稍后

00:33:32.860 --> 00:33:36.520
告诉我们我们绝对想知道

00:33:34.360 --> 00:33:38.799
您喜欢它的什么功能

00:33:36.520 --> 00:33:41.820
缺少什么样的支持

00:33:38.799 --> 00:33:41.820
将来会继续发展

00:33:42.150 --> 00:33:49.929
因为演示如此之快，我们不会

00:33:46.030 --> 00:33:52.540
不会为您剪裁我们

00:33:49.929 --> 00:33:54.070
现在熟悉这种形式的

00:33:52.540 --> 00:33:56.650
锈模板调用现在休息模板

00:33:54.070 --> 00:33:58.030
作为礼物的礼物，现在我们

00:33:56.650 --> 00:34:01.230
使用虚拟主机名或VIP 

00:33:58.030 --> 00:34:03.580
在此处寻址以调用其他服务

00:34:01.230 --> 00:34:07.290
假装的样子是

00:34:03.580 --> 00:34:09.460
你会启用成名的客户

00:34:07.290 --> 00:34:11.290
所以再次添加相同的模式

00:34:09.460 --> 00:34:13.119
依赖项添加注释以启用

00:34:11.290 --> 00:34:18.570
功能，然后您就可以

00:34:13.119 --> 00:34:18.570
比赛，我们可以定义成名的客户

00:34:19.350 --> 00:34:28.030
我们称这个会员

00:34:21.250 --> 00:34:30.550
现在我们会说

00:34:28.030 --> 00:34:32.760
这违反了会员资格

00:34:30.550 --> 00:34:32.760
主办

00:34:49.390 --> 00:34:57.540
以及我认为没有的原因

00:34:53.320 --> 00:35:00.190
找到更多的采用

00:34:57.540 --> 00:35:03.580
 Netflix是因为您看到我们在做什么

00:35:00.190 --> 00:35:05.140
这里配置或多或少

00:35:03.580 --> 00:35:08.440
我们必须做的同样的事情

00:35:05.140 --> 00:35:10.420
配置我们何时使用休息或

00:35:08.440 --> 00:35:14.410
其余模板直接

00:35:10.420 --> 00:35:16.210
所以我们很乐意为您提供

00:35:14.410 --> 00:35:20.800
自动执行会员资格

00:35:16.210 --> 00:35:23.740
为您准备的存储库，您可以替换

00:35:20.800 --> 00:35:26.560
这个休息模板调用，如果我注入

00:35:23.740 --> 00:35:28.980
你知道一个客户的实例

00:35:26.560 --> 00:35:28.980
在这里

00:35:45.400 --> 00:35:50.440
所以对你来说基本上就是成名

00:35:49.119 --> 00:35:52.900
有点增加另一层

00:35:50.440 --> 00:35:57.849
所谓的东西之间的抽象

00:35:52.900 --> 00:36:00.940
服务和实际呼叫视线

00:35:57.849 --> 00:36:03.759
就像TR所说的，这不是图书馆

00:36:00.940 --> 00:36:09.670
真正由Netflix的任何人维护

00:36:03.759 --> 00:36:14.920
不再，但它在那里稳定使用

00:36:09.670 --> 00:36:17.680
您现在可以自行决定将其删除

00:36:14.920 --> 00:36:24.700
这块，把事情放回去

00:36:17.680 --> 00:36:26.920
他们都很好而且很整洁

00:36:24.700 --> 00:36:28.150
有关负载均衡的问题

00:36:26.920 --> 00:36:32.440
我们正在研究负载平衡

00:36:28.150 --> 00:36:33.609
客户端负载均衡我想我们

00:36:32.440 --> 00:36:39.720
与尤里卡（Eureka）一起解决了所有问题

00:36:33.609 --> 00:36:49.230
所以我们现在要回到历史

00:36:39.720 --> 00:36:49.230
是的，是的

00:36:51.900 --> 00:36:58.140
没错，问题是要得到

00:36:54.990 --> 00:37:02.059
丝带在这里你什么也没做

00:36:58.140 --> 00:37:04.289
那几乎是真的，有一个

00:37:02.059 --> 00:37:05.819
有很多更复杂的用途

00:37:04.289 --> 00:37:08.400
你可以想象我的意思是

00:37:05.819 --> 00:37:12.059
重试策略设置您知道什么

00:37:08.400 --> 00:37:13.829
您所知道的所有方法

00:37:12.059 --> 00:37:15.180
配置可以通过

00:37:13.829 --> 00:37:17.519
属性文件或一些外部

00:37:15.180 --> 00:37:19.740
配置管理系统

00:37:17.519 --> 00:37:20.730
代码与我们的示例相同

00:37:19.740 --> 00:37:22.920
从头开始

00:37:20.730 --> 00:37:24.359
基于业务逻辑，仅此而已

00:37:22.920 --> 00:37:26.490
 spring boot 一切你应该

00:37:24.359 --> 00:37:28.259
已经知道我们会变得非常非常

00:37:26.490 --> 00:37:30.299
几乎没有任何变化将其转变为

00:37:28.259 --> 00:37:33.869
内部的样子

00:37:30.299 --> 00:37:36.660
摇粒绒，所以我们继续下一个

00:37:33.869 --> 00:37:39.359
这里的那是历史

00:37:36.660 --> 00:37:40.710
现在hystrix我要开始解决

00:37:39.359 --> 00:37:44.309
附录在这里，然后我们

00:37:40.710 --> 00:37:48.140
会快速展示一下

00:37:44.309 --> 00:37:50.910
历史用法的典型例子

00:37:48.140 --> 00:37:54.930
他们喜欢告诉新来的人

00:37:50.910 --> 00:37:56.670
 Netflix生态系统，所以当您看到

00:37:54.930 --> 00:38:00.299
当您登录Netflix时，此按钮为

00:37:56.670 --> 00:38:03.210
屏幕上您会看到电影列表的列表

00:38:00.299 --> 00:38:06.019
你叫它，所以它是一个低Bobo，如果你

00:38:03.210 --> 00:38:09.450
可以说和低LUMO是

00:38:06.019 --> 00:38:11.220
只要为您量身定制，我们

00:38:09.450 --> 00:38:12.720
观看您的观看记录，您就会知道

00:38:11.220 --> 00:38:16.499
您的受众特征之类的东西

00:38:12.720 --> 00:38:19.650
我们尝试提供标题列表

00:38:16.499 --> 00:38:22.829
我们相信您想看看

00:38:19.650 --> 00:38:25.910
由于某种原因，有一个历史

00:38:22.829 --> 00:38:28.890
回收您的断路器

00:38:25.910 --> 00:38:31.559
个性化推荐

00:38:28.890 --> 00:38:33.119
特定的行，如果该电路

00:38:31.559 --> 00:38:34.589
断路器因任何原因跳闸

00:38:33.119 --> 00:38:36.839
无法获取您的个人结果

00:38:34.589 --> 00:38:40.349
我们将跟随您返回一组

00:38:36.839 --> 00:38:42.239
你们当中的人通常都知道受欢迎

00:38:40.349 --> 00:38:43.680
我们认为是的电影

00:38:42.239 --> 00:38:46.140
有一个镜头，他们会看

00:38:43.680 --> 00:38:48.630
这些，所以我认为那是

00:38:46.140 --> 00:38:50.549
您可以记住的示例

00:38:48.630 --> 00:38:52.499
当你想到历史以及是否

00:38:50.549 --> 00:38:54.779
是否适合在您的手机中使用

00:38:52.499 --> 00:38:55.910
当您想到类似

00:38:54.779 --> 00:38:58.349
支付系统

00:38:55.910 --> 00:39:02.279
真的不是真的很棒

00:38:58.349 --> 00:39:04.440
退还给您的工资，所以您知道

00:39:02.279 --> 00:39:05.640
历史并不适合任何地方，但

00:39:04.440 --> 00:39:10.109
肯定有用途

00:39:05.640 --> 00:39:15.500
有很多很好的用途，所以回顾一下

00:39:10.109 --> 00:39:18.269
在这里的依赖，我们将

00:39:15.500 --> 00:39:20.789
你大概猜对了

00:39:18.269 --> 00:39:22.440
我们将启用hystrix并成为

00:39:20.789 --> 00:39:26.160
公平的你可以说一个海军巡回赛

00:39:22.440 --> 00:39:29.970
断路器谢谢你谢谢你斯宾塞或

00:39:26.160 --> 00:39:31.079
戴夫这么抽象，你

00:39:29.970 --> 00:39:32.760
在这个治疗

00:39:31.079 --> 00:39:38.569
嘿，我们首先是Netflix，我们要说

00:39:32.760 --> 00:39:40.559
启用历史记录为何不这样，此时

00:39:38.569 --> 00:39:44.549
我们将要开始

00:39:40.559 --> 00:39:48.119
添加一个体面的后备，所以一个后备

00:39:44.549 --> 00:39:57.359
为您推荐一套电影

00:39:48.119 --> 00:39:59.549
按年龄可能有相同的

00:39:57.359 --> 00:40:04.170
原始签名

00:39:59.549 --> 00:40:06.690
方法可能只是一组电影

00:40:04.170 --> 00:40:12.240
他们就像家人的推荐一样好

00:40:06.690 --> 00:40:15.599
对于所有年龄段的人，我们都会说

00:40:12.240 --> 00:40:17.940
每个人都喜欢的电影如Sandlot 

00:40:15.599 --> 00:40:20.089
那一个右钩子

00:40:17.940 --> 00:40:23.880
你知道这对所有年龄段的人都是安全的

00:40:20.089 --> 00:40:27.630
我们将把那部电影作为

00:40:23.880 --> 00:40:29.880
我们的后备以及我们的要求

00:40:27.630 --> 00:40:37.670
映射我们要添加历史记录

00:40:29.880 --> 00:40:37.670
命令自己，我们要说

00:40:42.300 --> 00:40:47.980
所以这就是这将是

00:40:44.349 --> 00:40:50.260
您知道的最简单的基础

00:40:47.980 --> 00:40:53.950
可以获取历史命令配置

00:40:50.260 --> 00:40:57.130
就在这里，您只是在指定

00:40:53.950 --> 00:41:00.160
后备，只要有异常

00:40:57.130 --> 00:41:02.560
从此实现抛出

00:41:00.160 --> 00:41:05.140
就在这里，它会回到

00:41:02.560 --> 00:41:06.580
回退，所以在我们的情况下，如果我们不

00:41:05.140 --> 00:41:09.160
能够找到我们要去的用户

00:41:06.580 --> 00:41:10.599
如果我们知道您的后备

00:41:09.160 --> 00:41:13.570
会员服务下降，我们要

00:41:10.599 --> 00:41:18.339
进行后备，我们将拥有一个

00:41:13.570 --> 00:41:21.040
我想这是更多的事情

00:41:18.339 --> 00:41:26.490
我们在使用历史记录时通常会发现

00:41:21.040 --> 00:41:26.490
在Netflix内部，那就是

00:41:26.580 --> 00:41:33.690
我们把它放在这里，因为我作弊

00:41:29.290 --> 00:41:37.089
你知道那是无耻的，但是我作弊

00:41:33.690 --> 00:41:39.520
那只是一个超时，所以我们要

00:41:37.089 --> 00:41:41.260
说，每当执行

00:41:39.520 --> 00:41:44.320
这种方法不仅需要

00:41:41.260 --> 00:41:49.330
我们要去的时间

00:41:44.320 --> 00:41:51.250
回退，所以我们要说

00:41:49.330 --> 00:41:53.349
需要五秒钟以上的时间

00:41:51.250 --> 00:41:54.369
找一个成员算了

00:41:53.349 --> 00:41:57.250
我要给你一家人

00:41:54.369 --> 00:41:58.720
建议并继续前进

00:41:57.250 --> 00:42:02.020
是一件重要的事情，因为当你

00:41:58.720 --> 00:42:04.900
有一串Micra服务电话

00:42:02.020 --> 00:42:07.060
到另一个，有一些服务

00:42:04.900 --> 00:42:08.830
这就是开始的路线

00:42:07.060 --> 00:42:11.170
表现不佳

00:42:08.830 --> 00:42:12.880
快速加起来，我的意思是

00:42:11.170 --> 00:42:14.980
一直传播到最前面

00:42:12.880 --> 00:42:16.780
结束，所以在每个级别上您都知道

00:42:14.980 --> 00:42:18.730
应该是对你的期望

00:42:16.780 --> 00:42:21.220
下一个响应时间是多少

00:42:18.730 --> 00:42:22.900
服务水平应该在

00:42:21.220 --> 00:42:24.910
你不知道的方式

00:42:22.900 --> 00:42:26.770
排队一堆的请求

00:42:24.910 --> 00:42:32.109
可能永远不会完成， 

00:42:26.770 --> 00:42:34.890
公正地将整个系统抛诸脑后

00:42:32.109 --> 00:42:34.890
对吧

00:42:35.750 --> 00:42:39.080
在内部不需要很长时间

00:42:37.490 --> 00:42:40.610
完成此操作后找人

00:42:39.080 --> 00:42:42.860
当您创建对

00:42:40.610 --> 00:42:45.320
外部服务不需加注音

00:42:42.860 --> 00:42:46.670
它会冒泡给某人

00:42:45.320 --> 00:42:49.430
很快，他们就会来找你， 

00:42:46.670 --> 00:42:58.700
让您知道抱歉，您可能应该

00:42:49.430 --> 00:43:03.890
包裹这么非常常用的我猜

00:42:58.700 --> 00:43:05.210
我需要再次同意

00:43:03.890 --> 00:43:08.150
我以为是电脑

00:43:05.210 --> 00:43:09.560
比我的错还好耶

00:43:08.150 --> 00:43:19.820
那个时候我不得不去狂欢

00:43:09.560 --> 00:43:20.870
再次，我们要经营雷克斯，这值得

00:43:19.820 --> 00:43:22.400
如果您还没有看到

00:43:20.870 --> 00:43:24.320
正在运行的会员服务

00:43:22.400 --> 00:43:26.420
现在我们刚刚注入背景

00:43:24.320 --> 00:43:28.850
一些任意的延迟

00:43:26.420 --> 00:43:30.950
标准偏差，因此有些要求会

00:43:28.850 --> 00:43:32.930
比其他人花费更长的时间

00:43:30.950 --> 00:43:35.330
会任意失败约百分之二

00:43:32.930 --> 00:43:38.020
只会返回500，所以我们可以

00:43:35.330 --> 00:43:38.020
演示一些

00:43:40.970 --> 00:43:44.150
我也在开始另一个样本

00:43:43.099 --> 00:43:46.369
他们可以使用的应用程序

00:43:44.150 --> 00:43:51.109
仓库，它只是愚蠢的

00:43:46.369 --> 00:43:52.760
简单的历史记录仪表板是什么

00:43:51.109 --> 00:43:55.660
我们用history命令完成的是

00:43:52.760 --> 00:43:58.010
该应用程序现在正在收集

00:43:55.660 --> 00:43:59.990
有关每个历史记录命令的信息

00:43:58.010 --> 00:44:02.420
被调用并且正在实现

00:43:59.990 --> 00:44:05.480
作为流历史可用

00:44:02.420 --> 00:44:14.510
我们将用于连接的仪表板

00:44:05.480 --> 00:44:19.190
到那流stream，所以我们在这里

00:44:14.510 --> 00:44:22.130
历史记录仪表板页面，我们将

00:44:19.190 --> 00:44:23.300
转到localhost a do 1，这是哪里

00:44:22.130 --> 00:44:26.530
我们的推荐服务正在运行

00:44:23.300 --> 00:44:33.260
我们只说历史开始

00:44:26.530 --> 00:44:35.740
然后我们将开始滥用它

00:44:33.260 --> 00:44:35.740
与jmeter 

00:44:38.980 --> 00:44:45.089
你在这里看到的是虐待

00:44:42.640 --> 00:44:47.740
开始，这没有必要好

00:44:45.089 --> 00:44:49.150
历史示例，但您看到

00:44:47.740 --> 00:44:50.680
延迟过大， 

00:44:49.150 --> 00:44:54.640
请求失败，电路将

00:44:50.680 --> 00:44:56.260
暂时开放，但您知道

00:44:54.640 --> 00:44:57.490
大多数零件都与它以及您所关

00:44:56.260 --> 00:45:01.359
真正想做的就是找到一个门槛

00:44:57.490 --> 00:45:02.920
通常您的电路在哪里

00:45:01.359 --> 00:45:04.990
除非有例外，否则关闭

00:45:02.920 --> 00:45:06.849
在这种情况下发生的条件句柄

00:45:04.990 --> 00:45:08.440
电路因此断开

00:45:06.849 --> 00:45:11.530
超时间隔我们

00:45:08.440 --> 00:45:14.560
指定只是为了向您表明

00:45:11.530 --> 00:45:17.680
打开和关闭，然后响应是

00:45:14.560 --> 00:45:20.109
仍在通过建议和

00:45:17.680 --> 00:45:21.430
每当你看到它打开时，你都会

00:45:20.109 --> 00:45:24.400
看钩子，看到很多

00:45:21.430 --> 00:45:25.450
周末剩下的时间，所以如果我们看到这个

00:45:24.400 --> 00:45:27.460
生产中的行为

00:45:25.450 --> 00:45:29.680
指示一些历史不佳的历史

00:45:27.460 --> 00:45:32.710
设置，以免延迟

00:45:29.680 --> 00:45:35.920
与您的预期超时设置一样

00:45:32.710 --> 00:45:38.190
我们实际上跟踪了这种情况并找到了

00:45:35.920 --> 00:45:42.430
他们帮助人们重新调整那些

00:45:38.190 --> 00:45:43.869
配置还有另一件事

00:45:42.430 --> 00:45:47.290
我们认为了解这一点很重要

00:45:43.869 --> 00:45:51.550
历史，这就是根本

00:45:47.290 --> 00:45:53.380
它是默认情况下执行的

00:45:51.550 --> 00:45:56.640
它正在执行任何内容

00:45:53.380 --> 00:46:00.490
线程池内的history命令

00:45:56.640 --> 00:46:02.380
这意味着如果您有任何代码

00:46:00.490 --> 00:46:04.089
那里取决于线程本地或

00:46:02.380 --> 00:46:07.030
你就像一个事务性的应用程序

00:46:04.089 --> 00:46:10.270
属性事情开始横盘整理

00:46:07.030 --> 00:46:12.339
很快，我们要去

00:46:10.270 --> 00:46:16.650
告诉你那会怎样

00:46:12.339 --> 00:46:16.650
看起来我们将使用现有的

00:46:17.369 --> 00:46:25.180
跨上下文持有者点当前请求

00:46:22.000 --> 00:46:27.940
属性谢谢泰勒为您

00:46:25.180 --> 00:46:30.849
春天琐事，他碰巧知道

00:46:27.940 --> 00:46:32.170
如果您正在使用本地线程

00:46:30.849 --> 00:46:33.550
不熟悉，只会拉任何东西

00:46:32.170 --> 00:46:35.920
当前请求中的信息

00:46:33.550 --> 00:46:38.140
威胁的范围，所以我们喜欢使用

00:46:35.920 --> 00:46:40.810
这个在数据层抢东西

00:46:38.140 --> 00:46:42.579
像要求参数说页面大小我

00:46:40.810 --> 00:46:43.780
不想一直传递页面大小

00:46:42.579 --> 00:46:45.910
通过我的应用程序，所以这是一个

00:46:43.780 --> 00:46:48.700
正确访问它的便捷方法

00:46:45.910 --> 00:46:50.319
直到您将其包装在历史中，是的， 

00:46:48.700 --> 00:46:51.819
这通常应该很好

00:46:50.319 --> 00:46:52.030
当前请求属性自然

00:46:51.819 --> 00:46:54.450
事情

00:46:52.030 --> 00:46:54.450
想做

00:46:59.400 --> 00:47:06.240
但实际上应该有一项权利

00:47:03.359 --> 00:47:08.940
在那里，您会看到此异常

00:47:06.240 --> 00:47:13.650
引发异常没有线程绑定

00:47:08.940 --> 00:47:15.630
你知道等等等等，你可以看到

00:47:13.650 --> 00:47:18.900
就在这里，在堆栈中跟踪

00:47:15.630 --> 00:47:20.849
迟滞涉及预防

00:47:18.900 --> 00:47:24.000
这是整个地方的运作

00:47:20.849 --> 00:47:28.920
正确，所以有一个

00:47:24.000 --> 00:47:32.099
各种解决方法，但是它有一个

00:47:28.920 --> 00:47:39.950
在这种情况下，我们可以

00:47:32.099 --> 00:47:42.420
说执行点隔离点策略

00:47:39.950 --> 00:47:45.089
我们希望它的价值是信号量

00:47:42.420 --> 00:47:47.520
基本上，这意味着削减

00:47:45.089 --> 00:47:50.069
只是要锁定在这里

00:47:47.520 --> 00:47:51.450
身体而不是耕种这项工作

00:47:50.069 --> 00:47:54.839
到在外部运行的线程池

00:47:51.450 --> 00:47:58.230
这意味着该请求将

00:47:54.839 --> 00:48:02.190
现在交易将起作用

00:47:58.230 --> 00:48:04.380
正确，但是如果例如

00:48:02.190 --> 00:48:07.049
会员服务正在

00:48:04.380 --> 00:48:08.400
运行线程的时间非常长

00:48:07.049 --> 00:48:12.329
现在正在运行该请求

00:48:08.400 --> 00:48:14.130
在该请求返回之前被阻止，因此

00:48:12.329 --> 00:48:17.309
如果您想在这里进行权衡

00:48:14.130 --> 00:48:19.400
使用历史和交易或历史

00:48:17.309 --> 00:48:22.650
并将本地类型的东西放在一起

00:48:19.400 --> 00:48:26.520
你必须接受你可能知道的东西

00:48:22.650 --> 00:48:28.950
挂线，这是我们的事

00:48:26.520 --> 00:48:31.230
真的没有解决方法

00:48:28.950 --> 00:48:32.700
至此，但我们肯定是一次

00:48:31.230 --> 00:48:34.260
一旦我们发现它，发现它是

00:48:32.700 --> 00:48:36.150
一个问题，这是我们要去的事情

00:48:34.260 --> 00:48:37.920
看只是为

00:48:36.150 --> 00:48:40.740
从春季开始本地可遗传的威胁

00:48:37.920 --> 00:48:42.329
大多数东西都用它，所以

00:48:40.740 --> 00:48:44.640
尚未解决的实现

00:48:42.329 --> 00:48:48.660
但是，要注意的是

00:48:44.640 --> 00:48:51.890
您当前正在使用此功能，因此

00:48:48.660 --> 00:48:51.890
我们把这个拿出来

00:48:56.240 --> 00:49:01.210
关于历史有任何疑问吗

00:49:23.859 --> 00:49:29.819
我听不到，对不起，对不起

00:49:26.799 --> 00:49:29.819
你只是试着说一点

00:49:38.080 --> 00:49:41.080
是

00:49:47.020 --> 00:49:51.130
我是说那个罪过塔利亚，取决于你

00:49:49.210 --> 00:49:53.110
应用逻辑，所以他要

00:49:51.130 --> 00:49:55.120
链式依赖服务我们如何

00:49:53.110 --> 00:49:56.770
前端的服务如何

00:49:55.120 --> 00:50:00.010
决定后备的用途

00:49:56.770 --> 00:50:02.890
东西压得更重了

00:50:00.010 --> 00:50:05.260
简单容易的答案就是尝试

00:50:02.890 --> 00:50:06.820
最好，这取决于您的

00:50:05.260 --> 00:50:08.920
服务是您的推荐

00:50:06.820 --> 00:50:10.960
服务回退很容易，没有

00:50:08.920 --> 00:50:12.910
如果您要付款，那会很痛苦

00:50:10.960 --> 00:50:15.370
您知道并提供服务的空间

00:50:12.910 --> 00:50:17.290
这对退货价格有反应

00:50:15.370 --> 00:50:18.970
没有后备，只有你

00:50:17.290 --> 00:50:21.220
仍然抛出异常历史记录

00:50:18.970 --> 00:50:22.600
具有阻止长时间运行的价值

00:50:21.220 --> 00:50:25.600
卡住线程，以免浪费

00:50:22.600 --> 00:50:27.430
时间打电话给我坏了的服务，但在那里

00:50:25.600 --> 00:50:30.300
当然不是合理的后备

00:50:27.430 --> 00:50:32.410
还有一个更复杂的答案

00:50:30.300 --> 00:50:33.910
我们不会完全谈及

00:50:32.410 --> 00:50:37.510
今天，但我可以告诉你， 

00:50:33.910 --> 00:50:39.160
这是对请求的深度标记

00:50:37.510 --> 00:50:41.890
您可以知道某物从何而来

00:50:39.160 --> 00:50:43.840
当它以这种方式失败的地方

00:50:41.890 --> 00:50:45.520
回退到最高层

00:50:43.840 --> 00:50:47.890
服务你可以知道区别

00:50:45.520 --> 00:50:49.540
在某件事情的失败之间

00:50:47.890 --> 00:50:51.700
中间层与

00:50:49.540 --> 00:50:54.580
更深层次或更深层次

00:50:51.700 --> 00:50:56.500
你可以选择建筑物

00:50:54.580 --> 00:50:57.850
下来的服务没有意义

00:50:56.500 --> 00:51:01.390
你这个页面让我渲染一些东西

00:50:57.850 --> 00:51:05.080
不同的是那个项目叫做

00:51:01.390 --> 00:51:06.400
出售和装配，有两个或

00:51:05.080 --> 00:51:09.040
三个不同的内部项目

00:51:06.400 --> 00:51:11.200
与我们确切的事情有关

00:51:09.040 --> 00:51:12.970
期望在下一个时间开放采购

00:51:11.200 --> 00:51:14.710
一年，我会提到另一种模式

00:51:12.970 --> 00:51:17.980
我不会，我会和一些人这样说

00:51:14.710 --> 00:51:20.710
保留但在Netflix内部

00:51:17.980 --> 00:51:22.030
我们的客户并不总是我们的服务

00:51:20.710 --> 00:51:23.740
客户并不总是像你一样瘦

00:51:22.030 --> 00:51:26.410
可能会这样想，而不是执行

00:51:23.740 --> 00:51:28.780
休息请求直接向服务

00:51:26.410 --> 00:51:30.610
就像您经常在这里看到的

00:51:28.780 --> 00:51:33.190
客户库附带的服务

00:51:30.610 --> 00:51:35.140
该客户端库有时

00:51:33.190 --> 00:51:36.790
提供历史命令并倒下

00:51:35.140 --> 00:51:39.400
背等基本相同

00:51:36.790 --> 00:51:41.170
您知道的团队提供

00:51:39.400 --> 00:51:46.500
服务还可以提供一些

00:51:41.170 --> 00:51:46.500
后备策略是的

00:51:57.230 --> 00:52:02.420
因此，我将向您展示其中一种工具

00:51:59.780 --> 00:52:04.550
在本演讲的最后，Atlas是

00:52:02.420 --> 00:52:07.369
我们的操作工具和历史

00:52:04.550 --> 00:52:08.690
肯定去那里我们仍然有这个

00:52:07.369 --> 00:52:12.140
仪表板多消耗一点

00:52:08.690 --> 00:52:13.990
视觉上，但真正的操作的东西和

00:52:12.140 --> 00:52:16.369
监控我们从地图集中消耗掉它

00:52:13.990 --> 00:52:18.109
今天我们要跳过涡轮

00:52:16.369 --> 00:52:20.420
我们本来要演示的，但是涡轮

00:52:18.109 --> 00:52:23.990
允许您汇总几个服务

00:52:20.420 --> 00:52:25.220
历史极端融为一体，然后

00:52:23.990 --> 00:52:26.960
你基本上可以显示一个组合

00:52:25.220 --> 00:52:36.079
仪表板也是如此

00:52:26.960 --> 00:52:38.780
选项在那里，它仍然存在

00:52:36.079 --> 00:52:41.089
它仍然运行我可以说我可能已经走了

00:52:38.780 --> 00:52:43.460
一次或两次，三年

00:52:41.089 --> 00:52:46.099
成为Netflix更有用

00:52:43.460 --> 00:52:48.140
可能对这里的每个人来说

00:52:46.099 --> 00:52:50.630
入门没有复杂

00:52:48.140 --> 00:52:52.339
像Atlas这样的后端，只想

00:52:50.630 --> 00:52:54.440
跟踪，您知道也许您只有

00:52:52.339 --> 00:52:56.540
几百种服务，但您可以看到

00:52:54.440 --> 00:52:58.010
从用户界面无法很好地扩展到

00:52:56.540 --> 00:52:59.540
成千上万的你需要一些东西

00:52:58.010 --> 00:53:01.819
多一点细一点多一点

00:52:59.540 --> 00:53:06.849
可调，所以我们应该把它长大

00:53:01.819 --> 00:53:06.849
本质上是

00:53:31.580 --> 00:53:38.130
那么历史如何在

00:53:34.800 --> 00:53:40.560
故障和其余负载的平衡

00:53:38.130 --> 00:53:43.380
电话，所以我们提到功能区有

00:53:40.560 --> 00:53:45.840
不同的负载均衡策略之一

00:53:43.380 --> 00:53:47.940
他们当中有历史知道

00:53:45.840 --> 00:53:49.980
知道我在打电话给我

00:53:47.940 --> 00:53:51.720
具有以下功能的下游服务

00:53:49.980 --> 00:53:54.120
问题，它有一个历史断路器

00:53:51.720 --> 00:53:55.680
那是开放的，它将要做的是

00:53:54.120 --> 00:53:57.780
只是不向该节点发送流量

00:53:55.680 --> 00:54:00.180
希望不是所有的节点，所以

00:53:57.780 --> 00:54:01.800
如果这是一个孤立的问题，您的电路

00:54:00.180 --> 00:54:03.750
断路器在一个可用区中打开

00:54:01.800 --> 00:54:05.670
然后色带将转移所有这些

00:54:03.750 --> 00:54:09.420
流量到其他区域之一

00:54:05.670 --> 00:54:11.970
更健康，那里有一个

00:54:09.420 --> 00:54:13.290
像我这样伟大的人不认为这是

00:54:11.970 --> 00:54:17.940
我认为这是一个真实的故事

00:54:13.290 --> 00:54:20.670
关于超级碗，你知道的

00:54:17.940 --> 00:54:22.260
我们在AWS领域中运营

00:54:20.670 --> 00:54:23.940
我们有自动缩放组

00:54:22.260 --> 00:54:24.900
放大以自动缩小您

00:54:23.940 --> 00:54:27.930
知道要提高效率

00:54:24.900 --> 00:54:31.220
资源等等，然后

00:54:27.930 --> 00:54:33.480
超级碗开始，每个人都将使用

00:54:31.220 --> 00:54:34.740
像所有人一样的Netflix停止观看

00:54:33.480 --> 00:54:35.370
 Netflix，因为他们正在观看

00:54:34.740 --> 00:54:37.500
超级碗

00:54:35.370 --> 00:54:38.970
因此我们的aSG正在四处寻找

00:54:37.500 --> 00:54:40.410
嘿，你知道我猜我们没有

00:54:38.970 --> 00:54:43.500
我们要开始的更多流量

00:54:40.410 --> 00:54:46.560
缩小自己，然后半场休息

00:54:43.500 --> 00:54:48.960
点击，你知道我最喜欢

00:54:46.560 --> 00:54:50.970
半场时间表明这太可怕了，并且

00:54:48.960 --> 00:54:52.080
每个人都回到Netflix 

00:54:50.970 --> 00:54:54.360
开始在再次观看Netflix 

00:54:52.080 --> 00:54:55.710
半场，所以他们称之为

00:54:54.360 --> 00:54:57.720
雷群，你知道我们刚得到

00:54:55.710 --> 00:55:00.240
突然涌入

00:54:57.720 --> 00:55:02.250
交通这是你知道的地方

00:55:00.240 --> 00:55:05.040
断路器可能开始断开，因为

00:55:02.250 --> 00:55:06.930
超时不再是男人了，但这

00:55:05.040 --> 00:55:08.280
说明了很多次的电路

00:55:06.930 --> 00:55:10.500
断路器正在向一些人开放

00:55:08.280 --> 00:55:12.750
像这种情况下的暂时状况

00:55:10.500 --> 00:55:15.060
我们的ASG正在迅速尝试

00:55:12.750 --> 00:55:16.410
扩大规模，这又是什么

00:55:15.060 --> 00:55:18.270
回到我们知道的时候

00:55:16.410 --> 00:55:19.350
再次放大那些电路

00:55:18.270 --> 00:55:20.880
断路器，您将要开始合闸

00:55:19.350 --> 00:55:23.550
再次，一切都会好起来的

00:55:20.880 --> 00:55:26.220
自己，如果我们没有历史

00:55:23.550 --> 00:55:29.340
巡回赛，你知道这个先生，我们永远不会

00:55:26.220 --> 00:55:31.950
之所以能够恢复，是因为所有这些请求都会

00:55:29.340 --> 00:55:33.360
已经备份，我们将有

00:55:31.950 --> 00:55:35.070
一无所获，特别是当你得到

00:55:33.360 --> 00:55:36.570
像重试政策这样的东西

00:55:35.070 --> 00:55:38.450
功能区的默认配置

00:55:36.570 --> 00:55:40.190
知道我称服务失败

00:55:38.450 --> 00:55:43.339
我再打五遍看看

00:55:40.190 --> 00:55:44.900
我们遇到问题时可能会很幸运

00:55:43.339 --> 00:55:46.940
服务时的雷电群

00:55:44.900 --> 00:55:48.890
合理地下降只会使

00:55:46.940 --> 00:55:50.420
情况更糟，我们已经无法扩展

00:55:48.890 --> 00:55:52.309
满足需求和需求

00:55:50.420 --> 00:55:54.950
由于我们的重试而增加了五倍

00:55:52.309 --> 00:55:56.269
策略，所以这真的是最佳选择

00:55:54.950 --> 00:55:58.460
对于历史，这只是削减

00:55:56.269 --> 00:56:00.109
让服务类解决

00:55:58.460 --> 00:56:01.970
下来只是阻止来自

00:56:00.109 --> 00:56:03.519
源，然后您可以按比例放大

00:56:01.970 --> 00:56:05.990
事情又开始恢复健康

00:56:03.519 --> 00:56:08.299
 hystrix将让一个请求通过

00:56:05.990 --> 00:56:10.099
它仍然很糟糕

00:56:08.299 --> 00:56:13.609
开始看起来不错，开始打开

00:56:10.099 --> 00:56:15.950
大门让更多人通过

00:56:13.609 --> 00:56:18.529
我听说过，在您了解历史之前

00:56:15.950 --> 00:56:21.410
真的很满，我们有很多

00:56:18.529 --> 00:56:26.029
例如超级碗类型检查和

00:56:21.410 --> 00:56:28.299
代码做X因为它已经够坏了，所以

00:56:26.029 --> 00:56:31.220
是的，这很有趣

00:56:28.299 --> 00:56:32.930
电气指标，所以我的意思是

00:56:31.220 --> 00:56:35.510
谈到一些我指出的事情

00:56:32.930 --> 00:56:38.930
一些可能的历史时机

00:56:35.510 --> 00:56:40.369
去的时候调不好

00:56:38.930 --> 00:56:43.039
这种微服务架构，我们

00:56:40.369 --> 00:56:45.109
开始谈论数十或数百

00:56:43.039 --> 00:56:46.579
一种应用程序类型的服务对话

00:56:45.109 --> 00:56:47.960
一样多

00:56:46.579 --> 00:56:49.609
应用程序类型，因此我可以像

00:56:47.960 --> 00:56:51.890
很多，你开始达到目的

00:56:49.609 --> 00:56:53.779
 API上的每个公共方法

00:56:51.890 --> 00:56:56.509
可能是它自己的新微型

00:56:53.779 --> 00:56:57.650
您真的开始迷路了

00:56:56.509 --> 00:57:00.230
发生了什么

00:56:57.650 --> 00:57:02.390
因此指标对于此类至关重要

00:57:00.230 --> 00:57:03.829
事情是一个好的架构

00:57:02.390 --> 00:57:05.750
有很多好处

00:57:03.829 --> 00:57:09.470
它，但你必须为此做好准备

00:57:05.750 --> 00:57:11.869
所以我们今天要展示的是

00:57:09.470 --> 00:57:15.710
我们主要使用的指标库

00:57:11.869 --> 00:57:16.880
在内部它称为旁观者

00:57:15.710 --> 00:57:18.710
这令人困惑，因为您知道

00:57:16.880 --> 00:57:22.880
称为伺服的库，也是

00:57:18.710 --> 00:57:25.930
 Netflix指标库是观众

00:57:22.880 --> 00:57:28.190
包裹伺服器，更清洁

00:57:25.930 --> 00:57:31.099
依赖注入友好测试

00:57:28.190 --> 00:57:32.750
友好的API，因此Spring Cloud目前

00:57:31.099 --> 00:57:35.509
使用伺服器作为传入拉力

00:57:32.750 --> 00:57:38.329
要求将其翻转到

00:57:35.509 --> 00:57:40.549
观众并清理一些令人讨厌的地方

00:57:38.329 --> 00:57:43.779
一路走，所以我们要走了

00:57:40.549 --> 00:57:43.779
并添加该依赖项

00:57:54.369 --> 00:57:58.209
所以观众的支持总是

00:57:56.680 --> 00:58:00.130
依赖观众支持

00:57:58.209 --> 00:58:02.349
由contrib库提供

00:58:00.130 --> 00:58:04.660
现在只是要清楚，所以有一个

00:58:02.349 --> 00:58:06.489
存在时自动配置

00:58:04.660 --> 00:58:10.449
观众的某些班级等等

00:58:06.489 --> 00:58:11.859
就像我说的那样，我们希望这会

00:58:10.449 --> 00:58:16.239
充满你可以将其整合到春天

00:58:11.859 --> 00:58:17.739
不久之后， 

00:58:16.239 --> 00:58:19.539
一些依赖的家庭，因为

00:58:17.739 --> 00:58:22.529
我们没有去做一个初学者

00:58:19.539 --> 00:58:25.809
但是，自然地，你会有一个

00:58:22.529 --> 00:58:32.920
春天，但是-观众的发车人或春天

00:58:25.809 --> 00:58:35.680
云观众首发，所以我们要

00:58:32.920 --> 00:58:36.999
拉那些依赖，我们

00:58:35.680 --> 00:58:41.160
会聊一点

00:58:36.999 --> 00:58:45.239
关于观众的结构

00:58:41.160 --> 00:58:47.890
与现有的 spring boot 如何

00:58:45.239 --> 00:58:51.670
指标库是您还是其他人

00:58:47.890 --> 00:58:56.019
可能正在使用，所以这主要是

00:58:51.670 --> 00:58:57.160
标记驱动的维度指标api，如果

00:58:56.019 --> 00:59:00.069
您熟悉石墨或

00:58:57.160 --> 00:59:03.549
类似指标的名称

00:59:00.069 --> 00:59:05.529
这是一个字符串，如果你想拉

00:59:03.549 --> 00:59:07.809
它通常涉及的尺寸

00:59:05.529 --> 00:59:13.209
解析该字符串像休息

00:59:07.809 --> 00:59:15.579
点服务或URL点200就是这个

00:59:13.209 --> 00:59:17.229
对该服务的其余电话成功

00:59:15.579 --> 00:59:19.179
还有一个因为失败而另一个

00:59:17.229 --> 00:59:21.729
 404个

00:59:19.179 --> 00:59:23.380
所以那些解析规则会有点

00:59:21.729 --> 00:59:24.969
每个人都必须面对的复杂权利

00:59:23.380 --> 00:59:27.939
每个人都必须遵循的同一页面

00:59:24.969 --> 00:59:30.910
它的工作原理相同，只是没有

00:59:27.939 --> 00:59:35.579
可发现的，而不是我们

00:59:30.910 --> 00:59:35.579
选择更多的标签驱动架构

00:59:37.619 --> 00:59:44.519
因此，为了说明一个例子，我将要

00:59:45.660 --> 00:59:49.290
其实我需要点水

00:59:58.140 --> 01:00:05.470
 Netflix再次向观众注册

01:00:03.520 --> 01:00:07.180
 contribs库，这只是要

01:00:05.470 --> 01:00:08.559
当观众自动创建

01:00:07.180 --> 01:00:13.089
在你上课的路上，你什么都没有

01:00:08.559 --> 01:00:16.799
需要这样做，我们可以像

01:00:13.089 --> 01:00:21.250
简单的指标说让我们做一个

01:00:16.799 --> 01:00:30.190
 mmm建议，让我们开始吧

01:00:21.250 --> 01:00:32.280
标记成功为假，就是你

01:00:30.190 --> 01:00:36.520
可以在上面放置任意数量的标签

01:00:32.280 --> 01:00:38.290
尽你所能

01:00:36.520 --> 01:00:39.579
很好，有一些警告

01:00:38.290 --> 01:00:43.059
你不想放他标签的东西

01:00:39.579 --> 01:00:44.980
说出客户ID或用户名，或者

01:00:43.059 --> 01:00:46.720
那些会很快爆炸

01:00:44.980 --> 01:00:49.359
而且我们会提到为什么

01:00:46.720 --> 01:00:51.630
重要的是要很快知道，但要保持

01:00:49.359 --> 01:00:58.349
请记住，您应该注意

01:00:51.630 --> 01:00:58.349
您标记了什么，所以我们会说是对的

01:00:58.619 --> 01:01:02.280
没什么

01:01:06.830 --> 01:01:11.260
是的，停在那里

01:01:25.030 --> 01:01:30.620
好吧，有一件

01:01:28.580 --> 01:01:34.790
我当然忘了家务

01:01:30.620 --> 01:01:37.760
这就是为什么我们要把这个放出来

01:01:34.790 --> 01:01:40.550
在我们进行实际拉取请求之前

01:01:37.760 --> 01:01:43.730
有些事情只是冲突

01:01:40.550 --> 01:01:46.070
所以目前播放效果不好

01:01:43.730 --> 01:01:48.530
与现有的Spring 云伺服器

01:01:46.070 --> 01:01:52.240
我们知道的整合

01:01:48.530 --> 01:01:52.240
并进行调整

01:02:02.080 --> 01:02:10.520
所以我要开始我的jmeter，让我们

01:02:06.140 --> 01:02:17.150
吸引一些流量，让我们过去

01:02:10.520 --> 01:02:21.020
到Spring 启动指标执行器

01:02:17.150 --> 01:02:22.370
我们可以看到大量的默认统计信息

01:02:21.020 --> 01:02:25.580
我们被添加了

01:02:22.370 --> 01:02:30.830
由我们的contribs库添加，但是

01:02:25.580 --> 01:02:34.850
让我们找到我想念的道歉

01:02:30.830 --> 01:02:36.620
一件事我已经注册了柜台

01:02:34.850 --> 01:02:44.840
实际上并没有增加

01:02:36.620 --> 01:02:46.700
我觉得那没用

01:02:44.840 --> 01:02:51.140
你今晚早些时候做了

01:02:46.700 --> 01:02:54.310
常见的是它是一个不错的API，但是

01:02:51.140 --> 01:02:54.310
确实留有一些错误的余地

01:03:01.260 --> 01:03:06.010
 smally寻找我们制造的那个

01:03:04.090 --> 01:03:10.390
在映射上尽了最大的努力

01:03:06.010 --> 01:03:13.330
基于标签的度量标准，以取消引用

01:03:10.390 --> 01:03:15.460
层次名称基本上就是

01:03:13.330 --> 01:03:17.140
其余指标名称，后跟

01:03:15.460 --> 01:03:18.850
套括号，就像我说的

01:03:17.140 --> 01:03:21.100
带有所有标签的参数

01:03:18.850 --> 01:03:22.600
我们已经为您整理了标签，因此

01:03:21.100 --> 01:03:26.220
如此看来他们是一个合理的工人

01:03:22.600 --> 01:03:29.470
但一般来说， 

01:03:26.220 --> 01:03:32.190
分层度量标准名称并将其映射

01:03:29.470 --> 01:03:34.210
标签名称意味着您需要了解

01:03:32.190 --> 01:03:37.810
有关该域的详细信息

01:03:34.210 --> 01:03:41.800
你知道这是如何碎片

01:03:37.810 --> 01:03:44.560
该层次结构的结构如此

01:03:41.800 --> 01:03:47.670
没有通用的层次结构可以标记

01:03:44.560 --> 01:03:53.260
您可以想象的基于映射

01:03:47.670 --> 01:03:55.630
不幸的是可能正在床上

01:03:53.260 --> 01:04:00.340
演示出于某种原因很奇怪

01:03:55.630 --> 01:04:04.630
该指标会触发而不会

01:04:00.340 --> 01:04:07.560
剩下的哦，因为我愚蠢地去了

01:04:04.630 --> 01:04:07.560
错误的服务

01:04:15.700 --> 01:04:23.150
推荐地区，我觉得是成功

01:04:19.850 --> 01:04:28.960
真正的成功是错误的，我们有吗

01:04:23.150 --> 01:04:28.960
交通我们没有交通

01:04:52.190 --> 01:05:00.349
我们去了所以我们正在解决这个问题

01:04:58.220 --> 01:05:03.680
是此的归一化速率秒

01:05:00.349 --> 01:05:05.390
度量标准，因此成功不正确

01:05:03.680 --> 01:05:07.300
条件回退，我们得到

01:05:05.390 --> 01:05:09.650
每秒约八十四次失败

01:05:07.300 --> 01:05:12.890
为了获得良好的状态

01:05:09.650 --> 01:05:15.319
大约每秒三秒钟，所以我们出发了

01:05:12.890 --> 01:05:17.000
运行我们正在收集指标

01:05:15.319 --> 01:05:18.950
如果您已经不应该看起来太陌生

01:05:17.000 --> 01:05:20.540
使用了其他任何指标库

01:05:18.950 --> 01:05:24.619
我们选择一种，因为它表现出色

01:05:20.540 --> 01:05:26.810
与我们的后端，所以只是看看

01:05:24.619 --> 01:05:30.020
我们从中捕获的其他指标

01:05:26.810 --> 01:05:33.920
首先是盒子

01:05:30.020 --> 01:05:37.390
请求映射，所以我们刚刚创建了一个

01:05:33.920 --> 01:05:37.390
观众自动配置

01:05:51.390 --> 01:05:56.310
如果您在类路径上有注册表

01:05:54.190 --> 01:06:00.130
如您所见，我们将为您打造

01:05:56.310 --> 01:06:03.370
如果您是网络应用程序，我们将构建

01:06:00.130 --> 01:06:06.190
一个拦截器给你，那会

01:06:03.370 --> 01:06:07.690
只是捕获每个请求并标记一些

01:06:06.190 --> 01:06:09.820
常见的事情是什么方法

01:06:07.690 --> 01:06:12.040
请求什么是URI模板

01:06:09.820 --> 01:06:14.110
变量是以前的URI模板

01:06:12.040 --> 01:06:15.610
用过的，所以我们取这个名字

01:06:14.110 --> 01:06:17.470
变量并替换它们，您不会

01:06:15.610 --> 01:06:20.740
获取客户ID，因此没有指标

01:06:17.470 --> 01:06:24.640
您将获得的爆炸-客户ID 

01:06:20.740 --> 01:06:27.610
 -可以获取处理程序名称，因此

01:06:24.640 --> 01:06:29.980
在MVC中调用您的方法名称

01:06:27.610 --> 01:06:32.530
您有一个概念或自定义标题

01:06:29.980 --> 01:06:33.670
确定谁叫你这个

01:06:32.530 --> 01:06:36.880
只是财产驱动，你可以继续

01:06:33.670 --> 01:06:38.320
并设置是否抛出异常

01:06:36.880 --> 01:06:40.300
什么是例外类型？ 

01:06:38.320 --> 01:06:41.710
响应代码的状态如何？ 

01:06:40.300 --> 01:06:43.540
这些是我们需要的东西

01:06:41.710 --> 01:06:44.680
在内部，我们终于发货了

01:06:43.540 --> 01:06:47.260
销往世界其他地方，因为

01:06:44.680 --> 01:06:50.470
这些是我们每天常有的日子

01:06:47.260 --> 01:06:52.210
想知道，你会看到我注册了

01:06:50.470 --> 01:06:55.300
这与我以前使用的有点不同

01:06:52.210 --> 01:06:58.090
所谓的桶式计时器

01:06:55.300 --> 01:07:00.280
除了只记录

01:06:58.090 --> 01:07:02.410
执行此操作将记录

01:07:00.280 --> 01:07:04.510
执行时间，然后添加一些

01:07:02.410 --> 01:07:08.740
特殊标签，这些标签是

01:07:04.510 --> 01:07:11.740
桶，所以它会打破打破

01:07:08.740 --> 01:07:15.160
默认将标签分为五个组， 

01:07:11.740 --> 01:07:18.370
这是由这个最大年龄触发的，所以如果

01:07:15.160 --> 01:07:22.510
我们回头看看我们的指标

01:07:18.370 --> 01:07:25.110
可以看到我的状态为200客户中止

01:07:22.510 --> 01:07:25.110
例外

01:07:28.030 --> 01:07:37.270
怎么样，是的，我们有数

01:07:34.690 --> 01:07:39.580
一秒钟一桶

01:07:37.270 --> 01:07:41.980
以五秒为单位的秒数

01:07:39.580 --> 01:07:43.510
每秒，所以您可以看到我们很快

01:07:41.980 --> 01:07:45.220
只是增加了数据量

01:07:43.510 --> 01:07:47.590
我们得到的收藏-我们有

01:07:45.220 --> 01:07:50.050
很多好的细节，但我们仍然没有

01:07:47.590 --> 01:07:52.110
准备好将其放在一起

01:07:50.050 --> 01:07:54.640
展示我们拥有的其他一些东西

01:07:52.110 --> 01:07:57.120
休息时完全一样

01:07:54.640 --> 01:07:57.120
模板

01:08:12.520 --> 01:08:17.170
我们必须做一点魔术才能得到

01:08:14.830 --> 01:08:19.150
实际输入网址模板，以便

01:08:17.170 --> 01:08:20.859
你打个电话的时候我们可以算

01:08:19.150 --> 01:08:23.500
你知道这是客户ID 

01:08:20.859 --> 01:08:27.130
这是用户名，所以我们有一个

01:08:23.500 --> 01:08:31.080
包装的小方面，我们

01:08:27.130 --> 01:08:31.080
将捕获您几乎相同的数据

01:08:35.060 --> 01:08:42.140
方法URL模板状态客户端名称

01:08:38.930 --> 01:08:44.330
在这种情况下，成员资格然后

01:08:42.140 --> 01:08:45.650
它的实际时间，我们已经采取了

01:08:44.330 --> 01:08:47.720
我们在春季也做了

01:08:45.650 --> 01:08:50.589
我将展示的整合

01:08:47.720 --> 01:08:50.589
正在运行

01:08:59.020 --> 01:09:04.190
所以在 Spring Integration 了两个

01:09:01.970 --> 01:09:06.080
有一个很棒的新指标

01:09:04.190 --> 01:09:07.610
我们不能让那张幻灯片如此

01:09:06.080 --> 01:09:09.800
我们立即将其拉入

01:09:07.610 --> 01:09:12.470
配置了相同的东西，因此您将拥有

01:09:09.800 --> 01:09:17.300
名称是spring integration和

01:09:12.470 --> 01:09:20.330
我们将得到事物的类型

01:09:17.300 --> 01:09:22.310
曾经是Polo频道的变压器

01:09:20.330 --> 01:09:23.690
引导提示频道，然后从每个

01:09:22.310 --> 01:09:27.590
这些经历的指标中

01:09:23.690 --> 01:09:29.270
以便Netflix可以绊倒我们

01:09:27.590 --> 01:09:30.920
将为您发布所有这些数据

01:09:29.270 --> 01:09:32.390
您不必弄清楚指标

01:09:30.920 --> 01:09:35.000
免费可能是最常见的

01:09:32.390 --> 01:09:38.720
您要处理的事情

01:09:35.000 --> 01:09:40.280
我们的提示处理程序消息映射

01:09:38.720 --> 01:09:42.050
端点都将成为

01:09:40.280 --> 01:09:45.890
将来添加，因为我们需要它们

01:09:42.050 --> 01:09:53.590
在内部，所以任何观众

01:09:45.890 --> 01:09:53.590
观众本身的问题肯定

01:10:01.679 --> 01:10:04.280
是

01:10:15.230 --> 01:10:20.010
足够公平了

01:10:17.780 --> 01:10:23.219
所以他只是正确地纠正

01:10:20.010 --> 01:10:26.610
指出标签的概念

01:10:23.219 --> 01:10:28.350
这与什么不完全一样

01:10:26.610 --> 01:10:30.000
可能是在开放式TS电视中

01:10:28.350 --> 01:10:32.040
另一种适合的框架

01:10:30.000 --> 01:10:34.170
同样的角色，所以这些都是真正的

01:10:32.040 --> 01:10:35.670
他们完全充实的尺寸

01:10:34.170 --> 01:10:37.620
每一个我们都将接受所有这些

01:10:35.670 --> 01:10:39.230
数据并将其运送到我们的后端

01:10:37.620 --> 01:10:42.330
在其他框架中，这样的东西是

01:10:39.230 --> 01:10:43.920
倒塌了，所以像

01:10:42.330 --> 01:10:46.290
客户ID很危险，因为

01:10:43.920 --> 01:10:49.580
基数高，因为它也是

01:10:46.290 --> 01:10:49.580
大量数据要发送到后端

01:10:58.550 --> 01:11:01.540
如果你想使用

01:11:03.020 --> 01:11:07.620
因此我们采用了达科他州黑尔州的指标

01:11:05.940 --> 01:11:10.470
塞进观众

01:11:07.620 --> 01:11:12.810
他们正在发货，但是就像我说的

01:11:10.470 --> 01:11:14.550
我的意思是一般来说

01:11:12.810 --> 01:11:17.250
名称并将其转换为标签

01:11:14.550 --> 01:11:20.040
基于名称的限制，所以我们正在做

01:11:17.250 --> 01:11:21.540
在一定程度上还有待观察

01:11:20.040 --> 01:11:23.250
这实际上有多有用，但是如果您

01:11:21.540 --> 01:11:25.320
在 spring boot 下发布一些东西

01:11:23.250 --> 01:11:27.060
指标框架可以是Coda Hale或

01:11:25.320 --> 01:11:28.740
您想出的其他东西，我们会

01:11:27.060 --> 01:11:30.120
进去就知道有一个聚合器

01:11:28.740 --> 01:11:33.720
界面，我们将采用这些并发布

01:11:30.120 --> 01:11:36.300
他们给观众什么用

01:11:33.720 --> 01:11:38.070
也许我们会尝试看到人们采取一个

01:11:36.300 --> 01:11:41.450
更多的问题，我们得到了一个展示图集

01:11:38.070 --> 01:11:41.450
剩下的时间很少

01:11:49.800 --> 01:11:54.930
是不是来自观众本身，因为

01:11:52.710 --> 01:11:57.510
观众只是一个收集数据的API 

01:11:54.930 --> 01:11:59.880
将其保存在内存中，然后执行

01:11:57.510 --> 01:12:01.980
与某事做某事是

01:11:59.880 --> 01:12:03.900
我们还没有达到的目标

01:12:01.980 --> 01:12:06.450
这只会存储在清除的内存中

01:12:03.900 --> 01:12:08.970
随着时间的流逝，如果没有人使用它， 

01:12:06.450 --> 01:12:11.250
消失了，但这是完整的数据

01:12:08.970 --> 01:12:13.230
所以如果你做一些非常疯狂的事情

01:12:11.250 --> 01:12:14.790
尺寸或疯狂的指标

01:12:13.230 --> 01:12:15.900
可能是一个问题，这不是问题

01:12:14.790 --> 01:12:21.510
我们已经看到了，但这肯定是

01:12:15.900 --> 01:12:25.430
您现在可以为自己设置

01:12:21.510 --> 01:12:25.430
需要谈论后端，所以

01:12:32.010 --> 01:12:39.180
只要确保它正在运行，那么我们

01:12:34.290 --> 01:12:41.550
请提供一项名为Atlas的服务

01:12:39.180 --> 01:12:43.620
在github文档中查看

01:12:41.550 --> 01:12:45.630
我要留在这里，因为

01:12:43.620 --> 01:12:46.710
有助于显示其中一些内容，但

01:12:45.630 --> 01:12:49.080
我们在本地运行

01:12:46.710 --> 01:12:50.790
内存中的配置有个开始

01:12:49.080 --> 01:12:52.650
项目根源中的Atlas脚本

01:12:50.790 --> 01:12:58.220
随便跑吧

01:12:52.650 --> 01:13:02.840
看着它适合你，我们需要的是

01:12:58.220 --> 01:13:02.840
一个最终的插件

01:13:11.400 --> 01:13:15.170
会员的原因

01:13:22.329 --> 01:13:30.460
所以这个依赖就是插件

01:13:25.780 --> 01:13:33.130
接收我观众收集的数据

01:13:30.460 --> 01:13:34.480
并将其运送到后端，因此

01:13:33.130 --> 01:13:36.219
您正在谈论的汇总是

01:13:34.480 --> 01:13:38.380
之后后端会发生什么

01:13:36.219 --> 01:13:40.329
每个单独的实例都会全部运送

01:13:38.380 --> 01:13:41.739
他们的数据到后端，我得到

01:13:40.329 --> 01:13:43.630
 Netflix Contrave将进行配置

01:13:41.739 --> 01:13:45.699
它为您设置

01:13:43.630 --> 01:13:49.679
仍然需要一些属性

01:13:45.699 --> 01:13:49.679
和尤里卡一样

01:13:54.590 --> 01:13:58.850
该属性是

01:13:57.170 --> 01:14:01.340
将您的眼睛发布到哪​​里

01:13:58.850 --> 01:14:03.860
和Yuriko的规则相同

01:14:01.340 --> 01:14:05.510
我们倾向于从53号路线开始，也许

01:14:03.860 --> 01:14:07.880
再做一些负载均衡

01:14:05.510 --> 01:14:10.730
那条路线53非常适合

01:14:07.880 --> 01:14:14.020
像Atlas这样的工具

01:14:10.730 --> 01:14:14.020
当它对我们不那么重要时

01:14:32.939 --> 01:14:38.150
现在重新运行建议

01:14:35.429 --> 01:14:38.150
依赖

01:14:48.709 --> 01:14:51.789
这不好

01:15:19.490 --> 01:15:25.430
所以如果我看我的地图集

01:15:22.860 --> 01:15:27.990
来自几个应用程序的一些数据

01:15:25.430 --> 01:15:30.450
成员资格，现在的建议是

01:15:27.990 --> 01:15:32.370
同时显示，所以这是标签API 

01:15:30.450 --> 01:15:34.200
我们可以开始发现有关

01:15:32.370 --> 01:15:38.100
我们在Atlas中更好的尺寸

01:15:34.200 --> 01:15:41.510
从这里开始，所以我已经显示了应用名称

01:15:38.100 --> 01:15:47.510
想看一下桶里有什么桶

01:15:41.510 --> 01:15:47.510
也许我想看URI 

01:15:55.540 --> 01:15:59.200
这是你的眼睛

01:15:57.040 --> 01:16:02.530
由观众收集并发布

01:15:59.200 --> 01:16:05.740
到Atlas，因此我们可以轻松访问

01:16:02.530 --> 01:16:07.780
这些数据在这里，所以现在我们有了

01:16:05.740 --> 01:16:10.930
信息，但目的是什么

01:16:07.780 --> 01:16:13.540
所有这一切，实际上就是说

01:16:10.930 --> 01:16:17.110
可见的地方，让我们开始吧

01:16:13.540 --> 01:16:23.980
并运行一个不同的URL，所以这是

01:16:17.110 --> 01:16:35.290
 v1图形查询参数是名称逗号

01:16:23.980 --> 01:16:37.180
休息等于逗号平均，所以我们去

01:16:35.290 --> 01:16:39.100
我们有一些来自阿特拉斯的数据

01:16:37.180 --> 01:16:41.770
已经在画我们所拥有的

01:16:39.100 --> 01:16:44.920
后端，所以这是反向

01:16:41.770 --> 01:16:46.720
波兰符号是这样

01:16:44.920 --> 01:16:49.780
他们决定实施所有

01:16:46.720 --> 01:16:51.640
 Atlas质疑这有点令人生畏

01:16:49.780 --> 01:16:53.530
乍一看，但实际上非常好

01:16:51.640 --> 01:16:55.720
将所有内容包装在URL中

01:16:53.530 --> 01:16:57.460
模式，以便您可以转发这些

01:16:55.720 --> 01:16:59.350
链接作为图像链接，它们就走了

01:16:57.460 --> 01:17:00.630
它们适合您可以前进的任何地方

01:16:59.350 --> 01:17:05.110
向后一切都很好， 

01:17:00.630 --> 01:17:08.290
可行，好吧，我们在线上

01:17:05.110 --> 01:17:10.540
图表让我们继续吧

01:17:08.290 --> 01:17:13.690
更深，所以我在看剩下的

01:17:10.540 --> 01:17:16.600
我们看到春天的统计数据

01:17:13.690 --> 01:17:19.260
 Netflix的贡献我要去

01:17:16.600 --> 01:17:19.260
计数

01:17:25.400 --> 01:17:29.090
希望我输入正确

01:17:36.830 --> 01:17:41.620
我想爱丽丝只是有点

01:17:39.170 --> 01:17:41.620
对我们慢

01:17:44.150 --> 01:17:50.770
我的机器很糟糕，这个实例有

01:17:47.960 --> 01:17:52.850
大约有足够的请求超时

01:17:50.770 --> 01:17:54.050
不好，我只是继续前进， 

01:17:52.850 --> 01:17:58.150
给阿特拉斯一点反弹

01:17:54.050 --> 01:17:58.150
因为我觉得已经受够了

01:18:06.320 --> 01:18:09.540
不幸的是我们要输

01:18:08.160 --> 01:18:13.100
我们一直以来的历史指标

01:18:09.540 --> 01:18:13.100
到目前为止到目前为止，但是还可以

01:18:23.110 --> 01:18:28.090
演示诅咒的确

01:18:30.900 --> 01:18:37.120
您必须重新启动服务

01:18:34.280 --> 01:18:37.120
然后看看

01:18:42.030 --> 01:18:48.690
这行得通，所以我们做的一件事

01:18:45.630 --> 01:18:50.580
只是建立在该API库上

01:18:48.690 --> 01:18:52.950
只是把几个例子弄成这样

01:18:50.580 --> 01:18:55.310
有关HTML的信息中心，以便您

01:18:52.950 --> 01:18:55.310
可以看到

01:19:05.730 --> 01:19:12.040
随着这些指标的建立，我们去了

01:19:09.520 --> 01:19:13.960
随着时间的流逝，我们会看到这是

01:19:12.040 --> 01:19:17.980
只是按时段查看汇率

01:19:13.960 --> 01:19:20.350
所以我们每秒运行约100次

01:19:17.980 --> 01:19:21.810
路上一米绝大多数

01:19:20.350 --> 01:19:25.120
他们在一秒钟内

01:19:21.810 --> 01:19:27.460
很小的一部分在两秒钟内

01:19:25.120 --> 01:19:28.570
在五秒钟内就更少了

01:19:27.460 --> 01:19:30.010
桶，那是正常的

01:19:28.570 --> 01:19:31.900
我们为我们讨论的发行

01:19:30.010 --> 01:19:34.930
随机延迟，但您可以进行某种排序

01:19:31.900 --> 01:19:36.670
了解我们如何才能拉

01:19:34.930 --> 01:19:37.480
一起把它变成

01:19:36.670 --> 01:19:39.550
还有一点

01:19:37.480 --> 01:19:40.900
易消耗品

01:19:39.550 --> 01:19:42.310
可以很快上手

01:19:40.900 --> 01:19:45.330
仪表板花了我很少的时间

01:19:42.310 --> 01:19:48.730
通过，所以这是同一件事

01:19:45.330 --> 01:19:50.020
通过存储桶和处理程序名称进行评分，让我们

01:19:48.730 --> 01:19:51.970
只是把这两个维度放在一起

01:19:50.020 --> 01:19:53.230
让我们看看是否有一种方法是

01:19:51.970 --> 01:19:55.480
表现好一点

01:19:53.230 --> 01:19:57.820
比其他人更糟糕，我们实际上有一个

01:19:55.480 --> 01:20:00.430
团队在那里可靠性工程团队

01:19:57.820 --> 01:20:03.100
他们主要集中在玩

01:20:00.430 --> 01:20:04.390
这种发现指标对其进行了调整

01:20:03.100 --> 01:20:07.660
通过不同的尺寸并尝试

01:20:04.390 --> 01:20:10.000
查找试图找到哪个节点的异常值

01:20:07.660 --> 01:20:12.520
一个农场上的API表现不佳

01:20:10.000 --> 01:20:16.020
表现不佳，甚至在什么时候

01:20:12.520 --> 01:20:18.820
那些日子开始消失了

01:20:16.020 --> 01:20:20.950
所以另一个是回应百分比

01:20:18.820 --> 01:20:22.660
正如您所看到的，我们大约有两个

01:20:20.950 --> 01:20:24.880
失败百分比，或者您可能能够

01:20:22.660 --> 01:20:26.800
在顶部看到红色的细条

01:20:24.880 --> 01:20:30.160
所以只是一种不同的可视化方式

01:20:26.800 --> 01:20:32.290
这东西堆积了198 

01:20:30.160 --> 01:20:33.520
百分之百，我们一直很好，直到

01:20:32.290 --> 01:20:38.440
当我们做了一个小服务器时非常结束

01:20:33.520 --> 01:20:40.990
通过我的处理者姓名弹跳最大时间，因此

01:20:38.440 --> 01:20:43.810
您知道这是我们可以做的

01:20:40.990 --> 01:20:47.710
一些警报的东西，所以如果你

01:20:43.810 --> 01:20:50.800
请参考Atlas示例

01:20:47.710 --> 01:20:52.930
这些例子很多

01:20:50.800 --> 01:20:56.830
将多条线放在一个坑上

01:20:52.930 --> 01:20:58.150
将预测线放在

01:20:56.830 --> 01:21:00.850
拍摄看起来像的东西

01:20:58.150 --> 01:21:02.290
这非常尖锐和断断续续，并使用

01:21:00.850 --> 01:21:05.200
算法双指数平滑

01:21:02.290 --> 01:21:07.450
那样做一条最合适的曲线

01:21:05.200 --> 01:21:10.690
可以大致看到你在哪里

01:21:07.450 --> 01:21:12.310
内置的时移功能使您

01:21:10.690 --> 01:21:14.890
可以向后退并向我显示一条线

01:21:12.310 --> 01:21:17.230
是上周的确切指标还是

01:21:14.890 --> 01:21:18.460
上个月，我可以比较

01:21:17.230 --> 01:21:19.960
二

01:21:18.460 --> 01:21:21.550
真的非常强大

01:21:19.960 --> 01:21:24.730
后端，这实际上是

01:21:21.550 --> 01:21:27.610
推动我们发挥红色的能力

01:21:24.730 --> 01:21:30.880
黑推很快就失败了

01:21:27.610 --> 01:21:32.320
公司要推出帐单哦

01:21:30.880 --> 01:21:35.530
坏了，我们需要我们需要

01:21:32.320 --> 01:21:37.260
赶快反应吧所以这个

01:21:35.530 --> 01:21:40.030
确实是我们的核心部分之一

01:21:37.260 --> 01:21:41.530
我们很遗憾的基础设施

01:21:40.030 --> 01:21:43.360
还没有看到更多的开源和

01:21:41.530 --> 01:21:45.460
我们想真正开始推动它，所以

01:21:43.360 --> 01:21:46.719
这是一个消耗品

01:21:45.460 --> 01:21:48.460
你可以用一点设置的东西

01:21:46.719 --> 01:21:51.790
关心，这是我们认为的

01:21:48.460 --> 01:21:53.980
春天的云可以使用更多

01:21:51.790 --> 01:21:55.150
我们绝对想弄清楚我们如何

01:21:53.980 --> 01:22:00.250
可以推动并实现这一目标

01:21:55.150 --> 01:22:02.950
对于每个伟大的人我都会承担

01:22:00.250 --> 01:22:10.440
问题很好地连接到VPN，所以任何

01:22:02.950 --> 01:22:10.440
关于地图集的问题

01:22:12.370 --> 01:22:18.160
他在问Atlas项目是什么时候

01:22:14.080 --> 01:22:20.410
开始，所以大概是三个

01:22:18.160 --> 01:22:22.270
或四年前它是

01:22:20.410 --> 01:22:23.950
在孵化我一段时间

01:22:22.270 --> 01:22:27.010
认为它已经开源了

01:22:23.950 --> 01:22:29.260
今年不是开源的

01:22:27.010 --> 01:22:31.300
用户界面，我们将在内部进行

01:22:29.260 --> 01:22:33.580
展示约翰的一点点可以连接到

01:22:31.300 --> 01:22:36.010
 VPN就是这样，您才能真正感受到

01:22:33.580 --> 01:22:38.770
里面的样子

01:22:36.010 --> 01:22:41.770
 Netflix，但是已经很久了

01:22:38.770 --> 01:22:44.410
来了，我们谈论了尤里卡，但是

01:22:41.770 --> 01:22:45.489
这真的是分开的东西

01:22:44.410 --> 01:22:46.900
来自尤里卡的人可能是最大的

01:22:45.489 --> 01:22:48.850
我们基础设施的一部分

01:22:46.900 --> 01:22:51.690
对我们来说每天都很重要

01:22:48.850 --> 01:22:51.690
启用DevOps 

01:22:55.100 --> 01:23:01.679
我们做了一次，仍然没有打开

01:22:58.440 --> 01:23:04.590
不幸的是来源

01:23:01.679 --> 01:23:07.020
在那些图表API中只是JSON Blob 

01:23:04.590 --> 01:23:09.780
如果您要的不是PNG 

01:23:07.020 --> 01:23:12.510
但是作为JSON，您将获得数据点

01:23:09.780 --> 01:23:14.610
所以我们只有一个非常简单的服务

01:23:12.510 --> 01:23:16.620
巨魔你告知表面的那些

01:23:14.610 --> 01:23:18.960
注意什么给它一个门槛

01:23:16.620 --> 01:23:21.870
如果此JSON值超过

01:23:18.960 --> 01:23:24.120
发送电子邮件发送传呼机职责

01:23:21.870 --> 01:23:25.949
都很好地集成了，所以

01:23:24.120 --> 01:23:27.570
它已经在甲板上了

01:23:25.949 --> 01:23:28.739
有一阵子，我们需要进入

01:23:27.570 --> 01:23:31.380
虽然进入了世界其他地区

01:23:28.739 --> 01:23:33.239
因为它是如此的好，而且确实使

01:23:31.380 --> 01:23:35.639
泰勒带给我们的生活更轻松

01:23:33.239 --> 01:23:37.679
他的-我的意思是关于警报的事情

01:23:35.639 --> 01:23:39.960
你知道爱丽丝有一个功能

01:23:37.679 --> 01:23:42.960
特定项的指数平滑

01:23:39.960 --> 01:23:44.460
弯曲，所以你可以

01:23:42.960 --> 01:23:47.400
可以消除那些虚假的尖峰

01:23:44.460 --> 01:23:50.219
然后一旦我们经常发出警报

01:23:47.400 --> 01:23:52.380
触发指数a 

01:23:50.219 --> 01:23:57.270
平滑的曲线，因此您可以设定

01:23:52.380 --> 01:23:58.440
门槛，有人分页，以便

01:23:57.270 --> 01:23:59.969
我说我们一直在努力

01:23:58.440 --> 01:24:01.770
内部的Spring 整合

01:23:59.969 --> 01:24:03.480
这是我们构建的仪表板， 

01:24:01.770 --> 01:24:05.969
它使用所有相同的指标

01:24:03.480 --> 01:24:08.010
今天显示，所以你知道找到我

01:24:05.969 --> 01:24:09.929
所有MVC请求及其数量的计数

01:24:08.010 --> 01:24:12.030
雷顿（Layton）看到他们用铲斗堆放

01:24:09.929 --> 01:24:13.260
只需在Dada仪表板上显示它们

01:24:12.030 --> 01:24:15.330
这很容易做到

01:24:13.260 --> 01:24:17.010
易耗品，您可以看到我们的要求

01:24:15.330 --> 01:24:19.980
是八岁，这是为之一

01:24:17.010 --> 01:24:22.170
核心计费系统每秒600个

01:24:19.980 --> 01:24:24.570
您可以看到的平均汇率是多少

01:24:22.170 --> 01:24:26.610
黑线是上周的汇率

01:24:24.570 --> 01:24:28.290
那是我们可以看到的时移

01:24:26.610 --> 01:24:31.380
最后这些有趣的骤降

01:24:28.290 --> 01:24:34.170
在这一天的一周中，产品中存在一个错误

01:24:31.380 --> 01:24:36.960
我们之上的某个地方，历史开始了

01:24:34.170 --> 01:24:39.659
我们的流量下降了，我们收到了警报

01:24:36.960 --> 01:24:41.370
不是我们的错，但我们知道现在

01:24:39.659 --> 01:24:43.110
马上就找出谁是

01:24:41.370 --> 01:24:44.760
让他们帮助时遇到麻烦

01:24:43.110 --> 01:24:46.260
他们修复它

01:24:44.760 --> 01:24:49.310
哦，它们是有趣的图案

01:24:46.260 --> 01:24:52.500
可能会注意到这是一个小尖峰

01:24:49.310 --> 01:24:55.050
它与黑色尖峰相吻合

01:24:52.500 --> 01:24:57.150
历史线以及那告诉我的

01:24:55.050 --> 01:24:59.159
实际上有人在某处工作

01:24:57.150 --> 01:25:01.800
在Netflix并正在努力改善我们的服务

01:24:59.159 --> 01:25:04.139
每天同一天的给定时间

01:25:01.800 --> 01:25:06.820
还是每个星期我们都不知道为什么

01:25:04.139 --> 01:25:09.890
这是很平常的事情

01:25:06.820 --> 01:25:11.720
我会说我很多时候都在回应

01:25:09.890 --> 01:25:13.670
这些警报和图表并找出

01:25:11.720 --> 01:25:16.070
谁负责，所以你看到了

01:25:13.670 --> 01:25:17.620
来电者指标在此处至关重要

01:25:16.070 --> 01:25:20.120
我由来电者分解，我知道

01:25:17.620 --> 01:25:22.310
这就是我需要的服务

01:25:20.120 --> 01:25:24.620
去追踪并与之交谈

01:25:22.310 --> 01:25:26.810
很有帮助，然后拥有这些

01:25:24.620 --> 01:25:29.510
所有与雷顿一起看到

01:25:26.810 --> 01:25:33.800
一路记录所有异常

01:25:29.510 --> 01:25:35.570
一直到TCP网络的CPU堆

01:25:33.800 --> 01:25:37.670
将它们全部放在一个仪表板上

01:25:35.570 --> 01:25:39.350
真的开车回家，你知道什么时候

01:25:37.670 --> 01:25:41.750
你有什么问题，什么时候

01:25:39.350 --> 01:25:44.120
我发现连接数下降，并且看到

01:25:41.750 --> 01:25:45.380
 TCP故障激增，我知道不是

01:25:44.120 --> 01:25:47.810
可能不是我的代码，可能是

01:25:45.380 --> 01:25:50.060
如果我看到雷顿看到的东西在亚马逊上

01:25:47.810 --> 01:25:52.880
上升而异常下降

01:25:50.060 --> 01:25:55.970
对我们很清楚什么是什么

01:25:52.880 --> 01:25:57.380
实际上，这是如此有用，我们已经

01:25:55.970 --> 01:25:59.150
实际上是在内部建立一种语言

01:25:57.380 --> 01:26:02.060
围绕它是基于闭包的

01:25:59.150 --> 01:26:04.010
 DSL建立其中的一些URL，因为

01:26:02.060 --> 01:26:05.600
我说这有点令人生畏，但

01:26:04.010 --> 01:26:06.920
同样，这是我们想要的

01:26:05.600 --> 01:26:08.360
想要投入社区

01:26:06.920 --> 01:26:11.300
我们可以得到一些牵引力

01:26:08.360 --> 01:26:13.730
这个框架也很棒

01:26:11.300 --> 01:26:15.500
行为修改工具，让您知道

01:26:13.730 --> 01:26:19.160
就像你之前提到的，如果你

01:26:15.500 --> 01:26:20.450
对您认识的人发出警报

01:26:19.160 --> 01:26:23.920
服务，只要它不返回

01:26:20.450 --> 01:26:26.810
 HTTP 200超过某个较小的阈值

01:26:23.920 --> 01:26:28.220
有人可以寻呼你漂亮

01:26:26.810 --> 01:26:32.239
迅速发现服务开始

01:26:28.220 --> 01:26:33.290
回到更频繁的数百，所以他们

01:26:32.239 --> 01:26:36.260
对于诸如

01:26:33.290 --> 01:26:38.390
创建警报是很常见的

01:26:36.260 --> 01:26:41.000
对于其他引起问题的团队

01:26:38.390 --> 01:26:45.890
您有任何最后的问题，我知道我们

01:26:41.000 --> 01:26:49.270
一切都按时结束

01:26:45.890 --> 01:26:49.270
很好，非常感谢您的光临

01:26:57.000 --> 01:26:59.060
您

