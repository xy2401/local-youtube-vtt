WEBVTT
Kind: captions
Language: zh-Hans

00:00:13.660 --> 00:00:17.860
嗨，今天的系列中的 Spring 粉丝

00:00:16.299 --> 00:00:19.480
 Spring 的提示，我们要继续前进， 

00:00:17.860 --> 00:00:21.759
看一下观察的不同方式

00:00:19.480 --> 00:00:23.259
系统中的状态

00:00:21.759 --> 00:00:25.330
我们看过的前几期

00:00:23.259 --> 00:00:27.970
例如Cloud Foundry，我们看了看

00:00:25.330 --> 00:00:29.769
一目了然

00:00:27.970 --> 00:00:31.539
系统状态的观点

00:00:29.769 --> 00:00:33.550
根据平台的观察方式

00:00:31.539 --> 00:00:35.320
事情，我们看着 Spring 的云

00:00:33.550 --> 00:00:36.550
数据流也给您非常

00:00:35.320 --> 00:00:39.250
方便的向上中心

00:00:36.550 --> 00:00:41.530
基于消息传递的观点

00:00:39.250 --> 00:00:45.540
微服务，但也有一些

00:00:41.530 --> 00:00:48.399
一些不错的替代方法

00:00:45.540 --> 00:00:50.350
可视化或理解某种

00:00:48.399 --> 00:00:53.020
系统布局的结构

00:00:50.350 --> 00:00:54.280
您的系统以及这两件事

00:00:53.020 --> 00:00:55.210
我们今天要看的是

00:00:54.280 --> 00:00:58.000
黛娜的J作品

00:00:55.210 --> 00:01:03.370
微服务仪表板和 Spring 

00:00:58.000 --> 00:01:05.080
引导管理员都可以很好地工作

00:01:03.370 --> 00:01:07.450
与Spring Cloud Discovery结合

00:01:05.080 --> 00:01:09.850
客户抽象，因此任何服务

00:01:07.450 --> 00:01:11.890
您通过

00:01:09.850 --> 00:01:13.810
通过发现读取服务

00:01:11.890 --> 00:01:15.729
客户端抽象将很好地工作

00:01:13.810 --> 00:01:17.170
它可以用来发现

00:01:15.729 --> 00:01:19.959
系统中的相关节点，因此

00:01:17.170 --> 00:01:22.840
令您有点不知所措

00:01:19.959 --> 00:01:23.830
正确，您只需添加一个仪表板

00:01:22.840 --> 00:01:28.899
我要看的这两个仪表板

00:01:23.830 --> 00:01:30.310
在今天得到某种地图或某种

00:01:28.899 --> 00:01:32.080
整个系统的鸟瞰图

00:01:30.310 --> 00:01:35.560
令人羡慕的一瞥

00:01:32.080 --> 00:01:36.849
您正在尝试建立一个具有

00:01:35.560 --> 00:01:39.069
很多音符很多活动部件

00:01:36.849 --> 00:01:40.390
好吧，我们要设置一个

00:01:39.069 --> 00:01:42.459
首先要满足一些先决条件

00:01:40.390 --> 00:01:45.399
设置一个尤里卡服务注册表，这样

00:01:42.459 --> 00:01:47.500
我们将在这里建立它，我们将

00:01:45.399 --> 00:01:48.970
配置这个，因为我们需要排序

00:01:47.500 --> 00:01:50.470
我们需要准备好服务，我提到或

00:01:48.970 --> 00:01:52.200
您可以使用任何服务注册表

00:01:50.470 --> 00:01:54.520
你想要的，那当然是对的，但是

00:01:52.200 --> 00:01:55.840
我们知道尤里卡很简单

00:01:54.520 --> 00:01:59.200
设置您也可以使用

00:01:55.840 --> 00:02:01.479
您可以使用Apache的哈希生态控制台

00:01:59.200 --> 00:02:04.090
 zookeeper，您可以在下面使用conf 

00:02:01.479 --> 00:02:05.470
本身，我的意思是说任何具有

00:02:04.090 --> 00:02:07.360
有一个发现客户端

00:02:05.470 --> 00:02:10.660
抽象将正常工作，所以让我们

00:02:07.360 --> 00:02:13.959
旋转它，我们将去我们的Java课

00:02:10.660 --> 00:02:17.440
在这里，我们会告诉您启用周

00:02:13.959 --> 00:02:20.340
 Gus服务器正常，我们将转到

00:02:17.440 --> 00:02:26.170
应用性能Spring Cloud

00:02:20.340 --> 00:02:27.130
所以 Spring 那个应用程序点名称

00:02:26.170 --> 00:02:32.350
等于

00:02:27.130 --> 00:02:34.660
周-服务，我们将逐步解决

00:02:32.350 --> 00:02:37.900
进口87-61 

00:02:34.660 --> 00:02:40.240
那会做到的就是

00:02:37.900 --> 00:02:41.560
注册现在我们需要一些客户

00:02:40.240 --> 00:02:43.300
需要一些东西来可视化

00:02:41.560 --> 00:02:45.280
如果这不是仪表板的话

00:02:43.300 --> 00:02:47.170
我们还有另一件事要发现

00:02:45.280 --> 00:02:49.750
并与之合作，让我们开始建立我们的

00:02:47.170 --> 00:02:50.950
第一位客户将这个客户称为

00:02:49.750 --> 00:02:52.870
而我们要做的是

00:02:50.950 --> 00:02:55.660
添加网络支持和执行器

00:02:52.870 --> 00:02:57.610
重要的是我们需要一些执行器

00:02:55.660 --> 00:02:59.710
这项权利给了我们一些

00:02:57.610 --> 00:03:01.660
有用的信息，所以我们现在有了

00:02:59.710 --> 00:03:03.580
发现客户，您认识您Iike 

00:03:01.660 --> 00:03:07.390
服务注册表只是发现

00:03:03.580 --> 00:03:08.740
客户实施为什么要添加到

00:03:07.390 --> 00:03:10.180
我们称该客户为

00:03:08.740 --> 00:03:12.490
我们将生成另一个名为

00:03:10.180 --> 00:03:13.960
客户很有想象力，这些是

00:03:12.490 --> 00:03:16.530
休息api是我的意思是你知道这些

00:03:13.960 --> 00:03:19.360
只是您的平均假设

00:03:16.530 --> 00:03:33.340
微服务api是正确的，所以我们开始

00:03:19.360 --> 00:03:37.380
客户客户B，我们在这里

00:03:33.340 --> 00:03:40.860
可以在控制台中看到Eureka是

00:03:37.380 --> 00:03:47.580
试图向自己注册

00:03:40.860 --> 00:03:47.580
本地87-61哦

00:03:52.120 --> 00:04:00.130
为港口服务，这就是为什么要尝试

00:03:57.910 --> 00:04:01.510
向自己和自己注册

00:04:00.130 --> 00:04:02.680
找不到自己，因为它不是

00:04:01.510 --> 00:04:04.660
在它的标准端口上运行

00:04:02.680 --> 00:04:06.970
通常，现在当然是

00:04:04.660 --> 00:04:08.590
您可以指定指向的属性

00:04:06.970 --> 00:04:09.610
它到另一个实例甚至

00:04:08.590 --> 00:04:11.320
最好有一个你可以的财产

00:04:09.610 --> 00:04:13.410
可以指定它说不

00:04:11.320 --> 00:04:16.390
注册自己，但出于我们的目的

00:04:13.410 --> 00:04:17.680
只是纠正一下就可以了

00:04:16.390 --> 00:04:20.650
因为我们不，我也不想得到

00:04:17.680 --> 00:04:23.190
建立您的杂草

00:04:20.650 --> 00:04:23.190
工业周

00:04:24.820 --> 00:04:32.490
现在工作顺利，我们正在做饭， 

00:04:30.910 --> 00:04:35.230
 [音乐] 

00:04:32.490 --> 00:04:37.560
那会做那将是我们的

00:04:35.230 --> 00:04:41.200
现在让我们回到客户端

00:04:37.560 --> 00:04:47.230
在这里，我们需要说的是

00:04:41.200 --> 00:04:50.260
称为客户a，在我们的代码中

00:04:47.230 --> 00:04:53.410
只是在这里建立一个非常简单的端点

00:04:50.260 --> 00:04:55.420
我有两次输入吗，你知道那是

00:04:53.410 --> 00:04:56.890
很好的应用程序，我们要

00:04:55.420 --> 00:04:58.510
激活服务注册

00:04:56.890 --> 00:05:00.160
发现支持，因此我能够发现

00:04:58.510 --> 00:05:02.350
冥想相同的客户

00:05:00.160 --> 00:05:04.210
不管实施和

00:05:02.350 --> 00:05:06.580
我们要让这个 rest controller 

00:05:04.210 --> 00:05:13.600
只是一个简单的 rest controller ，我们

00:05:06.580 --> 00:05:16.630
会叫这个名字或变成a和

00:05:13.600 --> 00:05:17.980
可以绘制地图了，所以直到他走了

00:05:16.630 --> 00:05:20.380
到四个斜杠，他们将得到

00:05:17.980 --> 00:05:23.050
我们也可以去的服务

00:05:20.380 --> 00:05:25.810
信息端点并配置spring 

00:05:23.050 --> 00:05:27.550
如果需要，请使用该ID 

00:05:25.810 --> 00:05:29.650
出现在这里，但这很好，所以

00:05:27.550 --> 00:05:31.660
这是非常简单的服务，我们只是

00:05:29.650 --> 00:05:33.790
要把它旋转起来，我们不是，我不是

00:05:31.660 --> 00:05:35.590
在这里谈论配置我们的

00:05:33.790 --> 00:05:38.080
编写我们要谈论的微服务

00:05:35.590 --> 00:05:39.910
观察他们的游行

00:05:38.080 --> 00:05:41.320
这是我们在这里的第一项服务

00:05:39.910 --> 00:05:43.090
要复制那个

00:05:41.320 --> 00:05:45.100
为自己保存一份宝贵的知识

00:05:43.090 --> 00:05:58.350
击键，然后重复冲洗

00:05:45.100 --> 00:06:01.230
在这里与客户成为客户

00:05:58.350 --> 00:06:08.800
好的

00:06:01.230 --> 00:06:12.940
客户申请，我们就完成了

00:06:08.800 --> 00:06:18.220
好的，有这个，所以现在我们有了

00:06:12.940 --> 00:06:21.760
客户端运行良好，我们命名

00:06:18.220 --> 00:06:24.430
这是B，我们将其更改为

00:06:21.760 --> 00:06:27.930
当然是在另一个港口

00:06:24.430 --> 00:06:31.620
名称等于客户端B的应用程序

00:06:27.930 --> 00:06:33.970
服务器点端口等于88 

00:06:31.620 --> 00:06:36.610
因为另一个会旋转

00:06:33.970 --> 00:06:38.650
默认情况下，在端口8080上，我们需要

00:06:36.610 --> 00:06:42.820
避免在那里发生碰撞

00:06:38.650 --> 00:06:45.100
现在我们有几件事可以做

00:06:42.820 --> 00:06:46.630
这里我们有几种类型的仪表板

00:06:45.100 --> 00:06:50.949
我们可以看正确的，所以我们有

00:06:46.630 --> 00:06:53.139
客户A，客户B应该

00:06:50.949 --> 00:07:01.270
现在随时加入我们

00:06:53.139 --> 00:07:03.160
我希望那里是客户B 

00:07:01.270 --> 00:07:04.780
你们两个都知道这在一个

00:07:03.160 --> 00:07:07.150
标准端口8080，所以很好

00:07:04.780 --> 00:07:08.680
这是在8081端口上

00:07:07.150 --> 00:07:11.020
可用，它们都有执行器，所以如果

00:07:08.680 --> 00:07:14.740
我们转到信息端点，然后转到

00:07:11.020 --> 00:07:17.910
指标端点，例如

00:07:14.740 --> 00:07:24.520
在这里安装我的浏览器插件

00:07:17.910 --> 00:07:29.260
扩展和JSON视图似乎是

00:07:24.520 --> 00:07:30.729
不断禁用自身扩展

00:07:29.260 --> 00:07:32.440
包含严重的安全性

00:07:30.729 --> 00:07:34.449
我将不得不研究的漏洞

00:07:32.440 --> 00:07:35.110
那以后但是现在我们需要这个

00:07:34.449 --> 00:07:37.960
我们来了

00:07:35.110 --> 00:07:39.699
这是我们的终点

00:07:37.960 --> 00:07:41.169
具有信息权的端点

00:07:39.699 --> 00:07:43.360
是实际的，实际的只是

00:07:41.169 --> 00:07:45.039
表面有关每个的信息

00:07:43.360 --> 00:07:46.780
您可以使用的单个节点的东西

00:07:45.039 --> 00:07:49.060
观察正在发生的事情

00:07:46.780 --> 00:07:50.560
受到很多启发

00:07:49.060 --> 00:07:53.099
 Google有什么Google 

00:07:50.560 --> 00:07:55.240
博格·阿姆农（Borg Amnon）接近博格曼

00:07:53.099 --> 00:07:57.220
博格监测方法和博格

00:07:55.240 --> 00:08:00.520
监测方法陡然说

00:07:57.220 --> 00:08:02.470
您知道的每项服务都应明确表述

00:08:00.520 --> 00:08:03.700
它自己的状态应该是可观察的

00:08:02.470 --> 00:08:06.910
应提供以下信息

00:08:03.700 --> 00:08:07.810
操作员和其他人可以用来

00:08:06.910 --> 00:08:09.490
了解应用程序的状态

00:08:07.810 --> 00:08:11.740
谁能更好地表达那种状态

00:08:09.490 --> 00:08:13.270
比服务本身，所以这些是

00:08:11.740 --> 00:08:15.370
终结点

00:08:13.270 --> 00:08:17.560
提供众所周知的有效载荷

00:08:15.370 --> 00:08:19.810
与该特定状态有关

00:08:17.560 --> 00:08:21.099
服务，这对您很有用

00:08:19.810 --> 00:08:22.750
知道在哪里可以找到这个

00:08:21.099 --> 00:08:26.050
有关每个服务的信息

00:08:22.750 --> 00:08:28.419
它不是由相邻的生成的

00:08:26.050 --> 00:08:29.620
处理它不是Java监视代理

00:08:28.419 --> 00:08:31.720
位于流程的下方

00:08:29.620 --> 00:08:33.760
没有声音，这不是另一个过程

00:08:31.720 --> 00:08:37.000
在同一容器和同一节点中

00:08:33.760 --> 00:08:38.229
相反，它在Java代码本身中

00:08:37.000 --> 00:08:40.209
对的，所以您可以自定义此

00:08:38.229 --> 00:08:42.339
使用正确的代码，您可以更改和

00:08:40.209 --> 00:08:43.719
阐明特定信息，如果您

00:08:42.339 --> 00:08:46.209
想要和默认值也非常

00:08:43.719 --> 00:08:48.880
有用，因此指标是一个端点健康

00:08:46.209 --> 00:08:52.270
当然是另一种权利，所以

00:08:48.880 --> 00:08:56.950
这里的健康那里的健康和

00:08:52.270 --> 00:08:58.180
我想哦-881我也一样

00:08:56.950 --> 00:09:01.000
信息权我得到的是同一种

00:08:58.180 --> 00:09:12.339
观点，我认为有一个终点

00:09:01.000 --> 00:09:14.140
端点执行器我们有映射

00:09:12.339 --> 00:09:16.029
始终可以使用映射映射告诉

00:09:14.140 --> 00:09:19.870
我们哪些端点可用，我

00:09:16.029 --> 00:09:21.779
猜猜这是在寻找端点

00:09:19.870 --> 00:09:26.649
告诉我什么是端点

00:09:21.779 --> 00:09:33.720
自动配置运行状况堆转储配置

00:09:26.649 --> 00:09:37.860
 V恢复方法中道具混乱

00:09:33.720 --> 00:09:37.860
也许我只是在想这个

00:09:40.080 --> 00:09:45.790
没有写这是在这里，所以你可以得到

00:09:43.660 --> 00:09:48.730
各种各样的酷信息

00:09:45.790 --> 00:09:49.990
端点，如果您希望此信息是

00:09:48.730 --> 00:09:50.920
 JSON中的所有内容都是REST服务

00:09:49.990 --> 00:09:54.040
有办法可以得到这个

00:09:50.920 --> 00:09:54.940
也可以通过JMX获得信息

00:09:54.040 --> 00:09:56.529
问题是你必须知道在哪里

00:09:54.940 --> 00:09:57.910
找到您必须知道的服务

00:09:56.529 --> 00:09:58.899
该信息是，然后您必须

00:09:57.910 --> 00:10:00.190
能够阅读并解析它，并且

00:09:58.899 --> 00:10:03.160
可视化它等等

00:10:00.190 --> 00:10:04.750
乏味，所以一种理解的方式

00:10:03.160 --> 00:10:06.670
这些信息和种类

00:10:04.750 --> 00:10:10.450
它并使其更易于食用

00:10:06.670 --> 00:10:12.610
从使用spring boot admin 

00:10:10.450 --> 00:10:17.110
以代码为中心，让我们看一下

00:10:12.610 --> 00:10:18.010
首先，所以我们

00:10:17.110 --> 00:10:19.630
我们要做的是开始

00:10:18.010 --> 00:10:23.350
创建一个IO，我们将建立一个

00:10:19.630 --> 00:10:24.970
 spring boot 从管理实例

00:10:23.350 --> 00:10:26.440
香草Spring 良好的应用程序，所以我们会

00:10:24.970 --> 00:10:27.850
引入网络支持或引入

00:10:26.440 --> 00:10:30.220
尤里卡服务注册发现

00:10:27.850 --> 00:10:32.940
支持执行器支持

00:10:30.220 --> 00:10:37.540
点击生成现在这将是我们的

00:10:32.940 --> 00:10:43.209
实例还可以，我们要做的是

00:10:37.540 --> 00:10:45.760
我们要打开它并告诉

00:10:43.209 --> 00:10:47.610
成为管理服务器，但我们需要

00:10:45.760 --> 00:10:50.440
添加以代码为中心的Springwood管理员

00:10:47.610 --> 00:10:52.180
使其成为管理员的依赖项

00:10:50.440 --> 00:10:54.640
服务器现在是当前

00:10:52.180 --> 00:10:56.709
化身是版本1.4点4 

00:10:54.640 --> 00:10:58.329
我们将使用两个位

00:10:56.709 --> 00:11:00.310
用户界面本身，然后

00:10:58.329 --> 00:11:01.990
后端API，之后可能是

00:11:00.310 --> 00:11:04.240
与我们位于同一音符中

00:11:01.990 --> 00:11:06.130
在这里做，否则您可以将它们分开

00:11:04.240 --> 00:11:07.420
我们必须同时引入

00:11:06.130 --> 00:11:09.790
说这是很自然的事情

00:11:07.420 --> 00:11:11.830
提取到一个属性，所以考虑

00:11:09.790 --> 00:11:15.340
这样做好了，我们将其全部放入

00:11:11.830 --> 00:11:17.050
文件谢谢你现在有几种方法

00:11:15.340 --> 00:11:19.390
让Springwood管理员发现

00:11:17.050 --> 00:11:21.610
正如我提到的，其他人知道

00:11:19.390 --> 00:11:23.170
对我们来说最简单的方法就是使用

00:11:21.610 --> 00:11:26.170
 Spring Cloud 发现松树抽象

00:11:23.170 --> 00:11:27.460
所以我们说在启用管理服务器

00:11:26.170 --> 00:11:29.650
 Springwood管理员，然后我们在

00:11:27.460 --> 00:11:32.230
使发现自豪

00:11:29.650 --> 00:11:33.970
您可以选择第二种选择

00:11:32.230 --> 00:11:37.690
第二个想法是使用

00:11:33.970 --> 00:11:40.960
 Springwood管理员客户端，我不知道

00:11:37.690 --> 00:11:43.150
我想我会远离额外的

00:11:40.960 --> 00:11:45.100
对客户端的依赖

00:11:43.150 --> 00:11:48.160
我希望我能做到所有这些

00:11:45.100 --> 00:11:49.450
工作，你知道汤到坚果没有

00:11:48.160 --> 00:11:50.590
必须添加任何额外的依赖项

00:11:49.450 --> 00:11:52.990
除了服务注册和

00:11:50.590 --> 00:11:56.140
现在发现我的服务说

00:11:52.990 --> 00:11:59.410
 Spring ，应用程序点名称等于

00:11:56.140 --> 00:12:06.040
 Spring ，但是-管理员，我们要运行

00:11:59.410 --> 00:12:07.390
在端口8080上也应该这样做

00:12:06.040 --> 00:12:08.920
那应该是我们需要的一切

00:12:07.390 --> 00:12:15.730
运行该应用程序，让我们继续

00:12:08.920 --> 00:12:16.840
并旋转它，这将旋转

00:12:15.730 --> 00:12:18.730
和对方聊一聊

00:12:16.840 --> 00:12:21.070
已注册的服务

00:12:18.730 --> 00:12:22.540
注册表，它会告诉我们

00:12:21.070 --> 00:12:25.990
将会持续的信息

00:12:22.540 --> 00:12:29.140
从实际中挖掘信息

00:12:25.990 --> 00:12:31.060
终点正确，所以这是我

00:12:29.140 --> 00:12:32.650
想要那里的允许通知

00:12:31.060 --> 00:12:34.390
我们去很酷吧

00:12:32.650 --> 00:12:35.710
这就是它向我们展示了

00:12:34.390 --> 00:12:37.870
服务注册表本身正在向我们展示

00:12:35.710 --> 00:12:40.240
客户a和B，我们可以点击这些

00:12:37.870 --> 00:12:41.290
首先详细说明下拉列表，然后

00:12:40.240 --> 00:12:44.770
我们可以看到这些

00:12:41.290 --> 00:12:47.080
对应于中的端点

00:12:44.770 --> 00:12:49.630
这些执行器就非常

00:12:47.080 --> 00:12:51.190
信息非常的菜单

00:12:49.630 --> 00:12:54.210
我尝试寻找的选项

00:12:51.190 --> 00:12:57.250
在寻找执行器的JSON输出

00:12:54.210 --> 00:12:59.290
现在是干净的李，并明确地向

00:12:57.250 --> 00:13:01.440
我在这里你也可以看到

00:12:59.290 --> 00:13:03.790
应用程序具有这些非常方便的浏览器

00:13:01.440 --> 00:13:05.770
正确的通知，这非常好

00:13:03.790 --> 00:13:07.630
功能，以便事情发生时

00:13:05.770 --> 00:13:09.310
这些发出心跳事件

00:13:07.630 --> 00:13:11.560
不同的节点，它们进入它们

00:13:09.310 --> 00:13:13.240
大他们被注册到EM 

00:13:11.560 --> 00:13:15.400
注册表我们可以看到

00:13:13.240 --> 00:13:17.140
在利亚和这里自动在线

00:13:15.400 --> 00:13:18.370
显示器和仪表板，所以现在我们

00:13:17.140 --> 00:13:19.280
可以看到Springwood管理员拥有

00:13:18.370 --> 00:13:22.280
被阅读

00:13:19.280 --> 00:13:23.660
如果我单击任何它，现在可以使用

00:13:22.280 --> 00:13:28.250
其中之一，假设我们点击

00:13:23.660 --> 00:13:29.720
客户B正确选择我们可以看到的指标

00:13:28.250 --> 00:13:32.090
有一个非常方便的小

00:13:29.720 --> 00:13:34.880
各种仪表板

00:13:32.090 --> 00:13:36.290
我们看到的指标反映在

00:13:34.880 --> 00:13:37.700
中的正斜杠指标端点

00:13:36.290 --> 00:13:39.170
应用程序本身，但它们都是

00:13:37.700 --> 00:13:41.240
可视化的权利，所以这是非常非常

00:13:39.170 --> 00:13:42.530
有用，因为您知道我们可以添加一个

00:13:41.240 --> 00:13:44.120
一眼就知道这些是什么

00:13:42.530 --> 00:13:49.880
数字意味着他们应该说的对

00:13:44.120 --> 00:13:52.610
如果我们看到数字是为

00:13:49.880 --> 00:13:55.040
我们知道，为我们想象这是

00:13:52.610 --> 00:13:56.360
不只是指标正确

00:13:55.040 --> 00:13:59.500
环境本身环境

00:13:56.360 --> 00:14:01.460
端点端点向我们显示了一个

00:13:59.500 --> 00:14:03.290
系统属性的枚举和

00:14:01.460 --> 00:14:06.490
该局部环境变量

00:14:03.290 --> 00:14:09.110
节点，我们可以看到所有反映出来的

00:14:06.490 --> 00:14:10.210
特别是在环境中

00:14:09.110 --> 00:14:12.980
实际上被不同

00:14:10.210 --> 00:14:16.220
属性来源看起来像这样

00:14:12.980 --> 00:14:21.320
环境系统环境

00:14:16.220 --> 00:14:23.150
与您知道的Java属性JVM 

00:14:21.320 --> 00:14:24.620
属性等，所有这些东西就全部

00:14:23.150 --> 00:14:26.210
分开在这里，很容易阅读

00:14:24.620 --> 00:14:28.220
并易于可视化，当然您

00:14:26.210 --> 00:14:29.360
可以看到哪些配置文件处于活动状态

00:14:28.220 --> 00:14:30.890
非常方便，所以也许你有

00:14:29.360 --> 00:14:33.170
某些属性仅可用

00:14:30.890 --> 00:14:34.730
对于某个特定的配置文件

00:14:33.170 --> 00:14:41.810
您可以明确获得的信息

00:14:34.730 --> 00:14:43.720
看端点本身，但是

00:14:41.810 --> 00:14:45.410
为什么还对，所以一切都很容易

00:14:43.720 --> 00:14:46.880
被审问并在这里工作

00:14:45.410 --> 00:14:48.890
还有另一件事真的很好

00:14:46.880 --> 00:14:51.110
你可以改变它的属性吗

00:14:48.890 --> 00:14:52.610
您知道这里有一个特定的节点

00:14:51.110 --> 00:14:55.550
那就是你可以做的

00:14:52.610 --> 00:14:59.540
在应用程序本身中

00:14:55.550 --> 00:15:01.610
当然使用端点

00:14:59.540 --> 00:15:03.170
使用杆等执行器点，但

00:15:01.610 --> 00:15:04.460
但是能够做到这一切真是太好了

00:15:03.170 --> 00:15:07.430
从视觉上和交互上

00:15:04.460 --> 00:15:08.510
操作员友好型控制台和

00:15:07.430 --> 00:15:11.270
当然可以过滤

00:15:08.510 --> 00:15:13.160
就像我刚刚在这里所做的那样

00:15:11.270 --> 00:15:14.690
可能或适用的数量

00:15:13.160 --> 00:15:16.220
属性，所以我认为这非常

00:15:14.690 --> 00:15:17.810
方便自然我们可以查看

00:15:16.220 --> 00:15:18.950
就像我们之前所做的那样，JSON 

00:15:17.810 --> 00:15:20.990
这是环境端点

00:15:18.950 --> 00:15:23.750
这就是我们得到的

00:15:20.990 --> 00:15:25.070
我们自己去了终点哦，不

00:15:23.750 --> 00:15:30.260
这不是，实际上是JSON 

00:15:25.070 --> 00:15:31.980
管理员从中获取的

00:15:30.260 --> 00:15:34.500
节点正确，所以

00:15:31.980 --> 00:15:34.980
方便记录

00:15:34.500 --> 00:15:36.360
信息

00:15:34.980 --> 00:15:38.220
这个没有配置，我没有这个

00:15:36.360 --> 00:15:40.280
配置，但它告诉您如何做

00:15:38.220 --> 00:15:42.810
它显示您配置Jolokia和

00:15:40.280 --> 00:15:44.280
那么如何配置回日志，如果您

00:15:42.810 --> 00:15:45.900
想要，然后您可以实际设置

00:15:44.280 --> 00:15:49.020
并指定，您知道覆盖

00:15:45.900 --> 00:15:53.250
从这个角度开始记录级别

00:15:49.020 --> 00:15:55.830
方便的仪表板

00:15:53.250 --> 00:16:00.090
有Jolokia，您也可以访问此

00:15:55.830 --> 00:16:03.030
来自JMX的信息，这样

00:16:00.090 --> 00:16:04.320
非常方便和线程化，因此，如果您

00:16:03.030 --> 00:16:07.140
想看看正在运行什么风

00:16:04.320 --> 00:16:08.760
是被阻止还是闲置，仅此而已

00:16:07.140 --> 00:16:10.410
一眼就可以理解， 

00:16:08.760 --> 00:16:15.660
可视化，您可以单击以下任意一项

00:16:10.410 --> 00:16:18.870
他们你可以看到那种深层次的线索

00:16:15.660 --> 00:16:24.000
转储等等等等，我们有

00:16:18.870 --> 00:16:25.920
跟踪现在跟踪是一个跟踪实际上

00:16:24.000 --> 00:16:27.630
只是请求日志写跟踪不是

00:16:25.920 --> 00:16:29.160
分发跟踪它是一个请求日志

00:16:27.630 --> 00:16:31.710
它告诉你哪些请求有

00:16:29.160 --> 00:16:33.180
取得了哪些端点

00:16:31.710 --> 00:16:35.790
响应，标题和所有其他内容

00:16:33.180 --> 00:16:38.100
东西，所以这实际上是一个非常非常

00:16:35.790 --> 00:16:39.480
方便的可视化显示

00:16:38.100 --> 00:16:41.520
按时间顺序向您显示

00:16:39.480 --> 00:16:42.900
非常方便的可视化时间

00:16:41.520 --> 00:16:45.300
请求发生在这个法院

00:16:42.900 --> 00:16:49.350
当然对应于轨迹

00:16:45.300 --> 00:16:51.540
端点本身和跟踪端点

00:16:49.350 --> 00:16:55.170
本身默认保持最后100 

00:16:51.540 --> 00:16:57.600
内存中的请求，因此您可以自定义

00:16:55.170 --> 00:16:59.280
当然，如果您愿意的话

00:16:57.600 --> 00:17:00.570
有堆转储将下载

00:16:59.280 --> 00:17:02.160
我们下载的相同的东西

00:17:00.570 --> 00:17:03.720
较早，所以我们非常非常

00:17:02.160 --> 00:17:05.130
一目了然的酷信息

00:17:03.720 --> 00:17:08.070
我们也有这样的一般

00:17:05.130 --> 00:17:09.240
视图显示您的健康状况

00:17:08.070 --> 00:17:11.460
会在意这些

00:17:09.240 --> 00:17:13.080
读到你有问题吧

00:17:11.460 --> 00:17:14.190
现在一切似乎都很幸福， 

00:17:13.080 --> 00:17:15.960
我会告诉你的记忆会告诉你

00:17:14.190 --> 00:17:17.280
 JVM，它将向您显示仲裁者

00:17:15.960 --> 00:17:18.690
收集我的意思是只是做一个

00:17:17.280 --> 00:17:21.270
看一眼真正重要的东西

00:17:18.690 --> 00:17:23.880
你会关心正确的，所以我喜欢

00:17:21.270 --> 00:17:25.500
我喜欢我认为的Spring Boot管理员

00:17:23.880 --> 00:17:28.080
这非常方便

00:17:25.500 --> 00:17:28.860
轻松使用和导航

00:17:28.080 --> 00:17:31.560
通过您所有不同的应用程序

00:17:28.860 --> 00:17:33.770
但这并没有真正给我们一张地图

00:17:31.560 --> 00:17:35.460
一目了然

00:17:33.770 --> 00:17:37.050
询问或了解

00:17:35.460 --> 00:17:38.790
表面在做，但没有显示

00:17:37.050 --> 00:17:40.530
您如何彼此联系，以便

00:17:38.790 --> 00:17:42.810
我们要看的是Dena Jay或

00:17:40.530 --> 00:17:43.620
现在可以使用微服务仪表板

00:17:42.810 --> 00:17:45.450
我们要做的是

00:17:43.620 --> 00:17:47.220
建个

00:17:45.450 --> 00:17:49.380
微服务仪表板在

00:17:47.220 --> 00:17:50.779
就像我们把 Spring 做好一样

00:17:49.380 --> 00:17:53.730
管理员，我们将继续前进， 

00:17:50.779 --> 00:17:55.110
从香草的 Spring 建造一个

00:17:53.730 --> 00:17:57.240
我会打电话给 Spring 的好应用程序

00:17:55.110 --> 00:17:59.970
这是微服务仪表板

00:17:57.240 --> 00:18:02.309
我们将使用网络支持Eureka发现

00:17:59.970 --> 00:18:10.649
支持执行器支持，我们将

00:18:02.309 --> 00:18:11.730
产生开放，并允许

00:18:10.649 --> 00:18:13.200
和以前一样

00:18:11.730 --> 00:18:16.500
对，所以我们说应用

00:18:13.200 --> 00:18:22.580
属性推动了那个应用程序

00:18:16.500 --> 00:18:22.580
名称等于微服务仪表板

00:18:23.840 --> 00:18:33.630
服务器点端口等于80 

00:18:27.120 --> 00:18:40.200
三，我们将向您注册iike 

00:18:33.630 --> 00:18:43.139
因为我们拥有其他一切

00:18:40.200 --> 00:18:45.659
需要激活Dena Jay的Mike 

00:18:43.139 --> 00:18:47.039
该仪表板依赖项的服务

00:18:45.659 --> 00:18:53.399
所以我们继续将其添加到我们的

00:18:47.039 --> 00:18:55.019
构建，我们将转到Palm的XML并添加

00:18:53.399 --> 00:19:03.000
这在这里，我认为是最新版本

00:18:55.019 --> 00:19:05.630
是1.01，所以101等待

00:19:03.000 --> 00:19:09.809
在启用微服务仪表板

00:19:05.630 --> 00:19:18.659
服务器，我认为应该这样做

00:19:09.809 --> 00:19:22.380
让我们把它旋转起来好吗

00:19:18.659 --> 00:19:24.419
本地主机8080三是我们的

00:19:22.380 --> 00:19:27.240
仪表板，现在我们可以看到

00:19:24.419 --> 00:19:29.190
它已经通过

00:19:27.240 --> 00:19:30.720
注册表，并列您知道

00:19:29.190 --> 00:19:32.639
对它们进行排序并放入

00:19:30.720 --> 00:19:33.720
桶后端组件是

00:19:32.639 --> 00:19:35.730
我们的Millah如果您在哪里

00:19:33.720 --> 00:19:36.960
当他们与其他服务交谈时，如果

00:19:35.730 --> 00:19:39.330
例如，如果您有一个Redis， 

00:19:36.960 --> 00:19:40.889
续集驱动程序中的消息或其他内容

00:19:39.330 --> 00:19:42.600
这样的beans会

00:19:40.889 --> 00:19:44.370
自动反映在这里

00:19:42.600 --> 00:19:45.570
后端，我们将看到微服务

00:19:44.370 --> 00:19:47.519
自己就是Springwood 

00:19:45.570 --> 00:19:53.039
他们已经注册的应用程序

00:19:47.519 --> 00:19:55.350
注册表，我们有UI 

00:19:53.039 --> 00:19:58.919
 api的组件和资源

00:19:55.350 --> 00:19:59.309
全部都反映在这里，我们也可以看到

00:19:58.919 --> 00:20:00.960
他们怎么

00:19:59.309 --> 00:20:02.549
彼此，所以如果我点击

00:20:00.960 --> 00:20:04.710
我可以看到的尤里卡注册表示例

00:20:02.549 --> 00:20:09.899
它使用了这两个不同的位

00:20:04.710 --> 00:20:12.779
中间件正斜杠API 

00:20:09.899 --> 00:20:17.789
暴露在我们的客户B中

00:20:12.779 --> 00:20:19.320
同样在我们的客户中

00:20:17.789 --> 00:20:21.840
在这里与后端交谈

00:20:19.320 --> 00:20:22.950
对，我的意思是理论上，所以我们可以看到

00:20:21.840 --> 00:20:24.600
关系非常非常

00:20:22.950 --> 00:20:26.940
它显示的便利性只是向我们展示了

00:20:24.600 --> 00:20:28.289
服务的独特终点

00:20:26.940 --> 00:20:30.149
有他们，如果他们分享你

00:20:28.289 --> 00:20:32.100
一眼就能看出来

00:20:30.149 --> 00:20:33.690
指出他们是向上还是向下

00:20:32.100 --> 00:20:35.940
随便吧，这些是

00:20:33.690 --> 00:20:37.259
执行器和要点也来自

00:20:35.940 --> 00:20:38.909
健康终点，当然你

00:20:37.259 --> 00:20:41.789
可以手动添加这些东西

00:20:38.909 --> 00:20:43.769
但就我们的目的而言，这是一个非常

00:20:41.789 --> 00:20:46.249
很高兴让他们各种各样

00:20:43.769 --> 00:20:50.190
自动反映正确，所以我们有

00:20:46.249 --> 00:20:52.559
研究了两种不同的方法

00:20:50.190 --> 00:20:54.809
可视化您的系统，而这些不是

00:20:52.559 --> 00:20:57.720
当然，唯一的方法

00:20:54.809 --> 00:20:59.369
但实际上有很多

00:20:57.720 --> 00:21:02.509
我会在这里真的很好的机会

00:20:59.369 --> 00:21:05.580
喜欢看Micra服务仪表板

00:21:02.509 --> 00:21:06.509
工作种类与spring blab合并

00:21:05.580 --> 00:21:09.169
我很想拥有这种可视化

00:21:06.509 --> 00:21:11.129
但一目了然

00:21:09.169 --> 00:21:12.899
致动器端点的可视化

00:21:11.129 --> 00:21:15.059
像 Spring 一样，但我现在承认

00:21:12.899 --> 00:21:16.950
泰德，你确实在这里得到了一些

00:21:15.059 --> 00:21:21.210
如果我点击这个，我可以看到例如

00:21:16.950 --> 00:21:22.919
状态，我可以看到基本的

00:21:21.210 --> 00:21:25.200
我认为这里的信息是正确的

00:21:22.919 --> 00:21:27.029
那很方便，但是我会用

00:21:25.200 --> 00:21:29.009
多一点吧

00:21:27.029 --> 00:21:32.159
对，所以快速浏览一下

00:21:29.009 --> 00:21:34.490
可以帮助我们获得

00:21:32.159 --> 00:21:38.220
更好地了解我们的系统

00:21:34.490 --> 00:21:40.110
通过 Spring Cloud 发现

00:21:38.220 --> 00:21:42.269
客户抽象和健康生活

00:21:40.110 --> 00:21:44.869
非常感谢您的宝贵时间， 

00:21:42.269 --> 00:21:44.869
我们会在附近见你

