WEBVTT
Kind: captions
Language: zh-Hans

00:00:11.080 --> 00:00:15.610
早上好，我叫马特·斯坦， 

00:00:13.240 --> 00:00:19.200
我是平台工程的一部分

00:00:15.610 --> 00:00:21.820
与Cloud Foundry团队合作

00:00:19.200 --> 00:00:25.090
我们做了很多非常有趣的事情

00:00:21.820 --> 00:00:28.000
其中之一是帮助我们的客户

00:00:25.090 --> 00:00:30.610
了解开始需要什么

00:00:28.000 --> 00:00:34.060
在这个新的云世界中运营， 

00:00:30.610 --> 00:00:35.770
持续交付DevOps等等

00:00:34.060 --> 00:00:38.320
其他一些想法

00:00:35.770 --> 00:00:39.760
现在在这个空间中漂浮

00:00:38.320 --> 00:00:42.670
还有你可能听说过的其中之一

00:00:39.760 --> 00:00:45.309
这种建筑风格被称为

00:00:42.670 --> 00:00:47.739
微服务等都是连续的

00:00:45.309 --> 00:00:51.219
在微电路中的交付将

00:00:47.739 --> 00:00:54.039
成为谈话的焦点，并在

00:00:51.219 --> 00:00:56.309
首先是两件事的背景

00:00:54.039 --> 00:00:59.320
所有关键的CF都是一点

00:00:56.309 --> 00:01:02.949
云铸造的商业分销

00:00:59.320 --> 00:01:06.520
还有春天的云

00:01:02.949 --> 00:01:09.370
我们首先宣布了一系列项目

00:01:06.520 --> 00:01:10.750
于今年春季一期揭幕

00:01:09.370 --> 00:01:14.500
我会跟你说一点

00:01:10.750 --> 00:01:17.409
关于这两种产品如何与

00:01:14.500 --> 00:01:20.920
使整个建筑风格

00:01:17.409 --> 00:01:23.470
更容易开发，而且

00:01:20.920 --> 00:01:27.509
在生产中运行时进行管理

00:01:23.470 --> 00:01:31.649
设置，但首先我只想

00:01:27.509 --> 00:01:34.899
有点水平设置的东西

00:01:31.649 --> 00:01:39.789
不管出于什么原因

00:01:34.899 --> 00:01:42.880
麻烦推进我的幻灯片，我们将

00:01:39.789 --> 00:01:44.799
走那条路，让我们来谈谈

00:01:42.880 --> 00:01:48.909
持续交付，基本上我

00:01:44.799 --> 00:01:51.789
想要做的是将其煮沸

00:01:48.909 --> 00:01:54.460
基本概念我们要做什么

00:01:51.789 --> 00:01:57.310
我们正在尝试缩短

00:01:54.460 --> 00:01:59.320
与我们业务中某人的时间

00:01:57.310 --> 00:02:02.859
我们认为实际上正在发展的想法

00:01:59.320 --> 00:02:04.990
使我们对这个想法有利可图

00:02:02.859 --> 00:02:07.420
实际兑现我们的利润

00:02:04.990 --> 00:02:09.630
都知道有很多不同

00:02:07.420 --> 00:02:13.060
我们必须完成的活动

00:02:09.630 --> 00:02:14.980
在这两个时间点之间等等

00:02:13.060 --> 00:02:17.140
想法只是为了匹配那些东西

00:02:14.980 --> 00:02:19.530
尽可能在一起

00:02:17.140 --> 00:02:22.000
我们这样做的许多不同方式

00:02:19.530 --> 00:02:23.830
我们这样做的第一种方法是

00:02:22.000 --> 00:02:24.910
我们看所有的东西

00:02:23.830 --> 00:02:26.650
现在正在做的是

00:02:24.910 --> 00:02:28.600
真正实现价值

00:02:26.650 --> 00:02:31.270
线，我们开始尝试消除

00:02:28.600 --> 00:02:33.520
那些来自我们的过程，但下一个

00:02:31.270 --> 00:02:35.530
我们要做的是看看

00:02:33.520 --> 00:02:38.470
我们必须从事的那些活动

00:02:35.530 --> 00:02:40.300
在，但可以自动化，我们

00:02:38.470 --> 00:02:43.510
可以让计算机代表我们做

00:02:40.300 --> 00:02:45.490
让人类可以专注于排序

00:02:43.510 --> 00:02:50.110
创造性的创新任务

00:02:45.490 --> 00:02:52.120
只有我们有能力和真正的

00:02:50.110 --> 00:02:54.100
问题很好，听起来不错， 

00:02:52.120 --> 00:02:57.190
我实际上该如何做

00:02:54.100 --> 00:02:59.110
而且有很多不同

00:02:57.190 --> 00:03:01.420
方法，你知道其中之一

00:02:59.110 --> 00:03:03.940
我们很多人开始的地方

00:03:01.420 --> 00:03:08.200
去，我们读了很多书，我们试图

00:03:03.940 --> 00:03:09.880
弄清楚我们如何到达那里，但我

00:03:08.200 --> 00:03:11.440
不想你不得不拒绝

00:03:09.880 --> 00:03:15.400
我只想让你煮沸

00:03:11.440 --> 00:03:18.550
这归结为一个基本的想法

00:03:15.400 --> 00:03:20.740
我们已经习惯了

00:03:18.550 --> 00:03:23.650
建立东西然后部署

00:03:20.740 --> 00:03:26.380
我要做的就是

00:03:23.650 --> 00:03:27.820
翻转这些任务而不是

00:03:26.380 --> 00:03:29.440
建立一些东西然后部署

00:03:27.820 --> 00:03:32.440
我想避免的事情

00:03:29.440 --> 00:03:34.450
然后建立听起来的东西

00:03:32.440 --> 00:03:36.880
面值有点奇怪，但

00:03:34.450 --> 00:03:39.459
基本上，这就是所有工作

00:03:36.880 --> 00:03:42.280
我通常必须要做的是

00:03:39.459 --> 00:03:44.680
我从我降级到客户和

00:03:42.280 --> 00:03:46.959
他们喜欢我们制造的产品

00:03:44.680 --> 00:03:49.360
也实际上是在

00:03:46.959 --> 00:03:51.520
生产环境和真实用户

00:03:49.360 --> 00:03:53.830
正在使用我想要的所有工作

00:03:51.520 --> 00:03:57.340
在我的开发工作中担当重任

00:03:53.830 --> 00:03:59.320
过程和要做的，我将需要

00:03:57.340 --> 00:04:01.690
建立一些非常基本的

00:03:59.320 --> 00:04:03.910
我可以部署的东西的骨架

00:04:01.690 --> 00:04:07.630
我们会看看 spring boot 是否成功

00:04:03.910 --> 00:04:10.239
非常简单，拥有非常基本的

00:04:07.630 --> 00:04:13.330
实际执行

00:04:10.239 --> 00:04:15.580
没有我，很少有有趣的事情

00:04:13.330 --> 00:04:20.290
实际写任何生产线

00:04:15.580 --> 00:04:23.200
代码，因此我们已经在春季启用

00:04:20.290 --> 00:04:25.270
很快达到这一点

00:04:23.200 --> 00:04:27.400
我们接受这一点，然后我们建立我们的

00:04:25.270 --> 00:04:30.220
部署管道，我们建立测试

00:04:27.400 --> 00:04:33.070
管道，然后我们开始挂起

00:04:30.220 --> 00:04:35.740
规模如此之大，而我们

00:04:33.070 --> 00:04:37.419
在我们说的骨架上挂一个功能

00:04:35.740 --> 00:04:38.319
我们可以很好地进行生产吗

00:04:37.419 --> 00:04:40.569
答案是肯定的

00:04:38.319 --> 00:04:42.369
因为我们已经完成了所有工作

00:04:40.569 --> 00:04:44.129
它只是成为您的业务选择

00:04:42.369 --> 00:04:46.419
知道企业实际上想要

00:04:44.129 --> 00:04:49.659
部署我们已经建立的东西

00:04:46.419 --> 00:04:51.789
生产，当我们这样做时，我们可以

00:04:49.659 --> 00:04:54.789
实际上移动得更快

00:04:51.789 --> 00:04:56.499
最终我们的目标是

00:04:54.789 --> 00:04:59.199
企业这样做，所以我

00:04:56.499 --> 00:05:04.539
经常要强调的是华纳

00:04:59.199 --> 00:05:06.960
音乐华纳音乐已有45年历史了

00:05:04.539 --> 00:05:10.229
他们的业务中的IT遗产

00:05:06.960 --> 00:05:12.909
遗产使他们受苦

00:05:10.229 --> 00:05:15.699
最基本的六个月交货时间

00:05:12.909 --> 00:05:18.399
他们想要提供的服务以及

00:05:15.699 --> 00:05:20.409
所以他们决定要做的是

00:05:18.399 --> 00:05:23.139
 Condry下的开源云

00:05:20.409 --> 00:05:25.180
他们拿了春天他们拿了一些数据

00:05:23.139 --> 00:05:27.580
像卡桑德拉（Cassandra）这样的商店，他们建立了一个

00:05:25.180 --> 00:05:30.839
他们称之为软件工厂的新工厂

00:05:27.580 --> 00:05:33.699
经过的平台

00:05:30.839 --> 00:05:35.830
完成了我已经完成的所有任务

00:05:33.699 --> 00:05:37.809
已经谈论过，什么时候做的

00:05:35.830 --> 00:05:40.449
他们实际上能够缩短

00:05:37.809 --> 00:05:43.719
他们的交货时间从6个月开始， 

00:05:40.449 --> 00:05:46.839
 10至6周的团队，每组10个人

00:05:43.719 --> 00:05:49.059
大致相等的服务

00:05:46.839 --> 00:05:51.129
基本上归结为

00:05:49.059 --> 00:05:55.149
他们能够保持这种迭代

00:05:51.129 --> 00:05:58.059
滚转这个想法，我们从来没有

00:05:55.149 --> 00:06:00.729
知道我们什么时候实际完成

00:05:58.059 --> 00:06:02.649
事实上，如果我们要制造出真正的产品，我们

00:06:00.729 --> 00:06:04.629
直到我们不做，才真正完成

00:06:02.649 --> 00:06:08.979
需要那个提供的能力

00:06:04.629 --> 00:06:10.689
产品了，所以我们要做的是

00:06:08.979 --> 00:06:12.939
使我们不断获得

00:06:10.689 --> 00:06:15.339
反馈不断回应

00:06:12.939 --> 00:06:18.069
反馈并不断提供更好的

00:06:15.339 --> 00:06:20.439
车轮旋转的产品

00:06:18.069 --> 00:06:23.019
是直接客户的结果

00:06:20.439 --> 00:06:26.919
对话或您在外部看到的

00:06:23.019 --> 00:06:30.789
箭头在这里越来越多的这个想法

00:06:26.919 --> 00:06:33.430
我们正在捕获的事件是

00:06:30.789 --> 00:06:36.580
发生在代码和流中

00:06:33.430 --> 00:06:38.259
我们可以学习的分析

00:06:36.580 --> 00:06:40.599
做出决定并最终倾泻

00:06:38.259 --> 00:06:43.629
回到应用程序并拥有

00:06:40.599 --> 00:06:47.079
实时行为变化基于

00:06:43.629 --> 00:06:49.120
我们的用户正在做什么，所以有一个

00:06:47.079 --> 00:06:50.499
其他一些方面

00:06:49.120 --> 00:06:51.760
迫使我们朝着不同的方向前进

00:06:50.499 --> 00:06:53.650
超越

00:06:51.760 --> 00:06:56.020
只是这种持续交付的想法

00:06:53.650 --> 00:06:59.380
迭代也有这个想法

00:06:56.020 --> 00:07:03.700
想要以越来越高的速度运转

00:06:59.380 --> 00:07:06.550
更高的规模，我们找出了几个

00:07:03.700 --> 00:07:09.820
年前实际上是垂直扩展

00:07:06.550 --> 00:07:12.370
太慢了，太贵了

00:07:09.820 --> 00:07:14.590
如果我们能够实现目标

00:07:12.370 --> 00:07:17.050
必须去购买新硬件

00:07:14.590 --> 00:07:19.360
为了获得更多的处理能力，所以

00:07:17.050 --> 00:07:20.980
我们可以为用户提供负载

00:07:19.360 --> 00:07:23.380
我们拥有我们只是无法后退

00:07:20.980 --> 00:07:26.290
足够，然后根据需求

00:07:23.380 --> 00:07:29.020
波动不像我们可以扔

00:07:26.290 --> 00:07:30.580
我们很容易购买的硬件

00:07:29.020 --> 00:07:33.970
这不是一个很有效的东西

00:07:30.580 --> 00:07:38.620
好，所以我们朝着虚拟化迈进

00:07:33.970 --> 00:07:40.690
我们走向获得基础设施

00:07:38.620 --> 00:07:43.810
通过api与基础架构

00:07:40.690 --> 00:07:46.840
服务，例如使用AWS和

00:07:43.810 --> 00:07:51.970
 Google Cloud等，然后我们

00:07:46.840 --> 00:07:53.950
进行部署的下一步发展

00:07:51.970 --> 00:07:56.020
容器的东西，所以我敢肯定

00:07:53.950 --> 00:07:58.500
你们当中有人听说过类似的项目

00:07:56.020 --> 00:08:01.950
试图允许我们

00:07:58.500 --> 00:08:04.570
获取多个实例

00:08:01.950 --> 00:08:06.520
应用程序更快，因为

00:08:04.570 --> 00:08:08.320
而不是把机器拉起来

00:08:06.520 --> 00:08:10.840
我们实际上只是在旋转

00:08:08.320 --> 00:08:12.940
大型机器内部的容器和

00:08:10.840 --> 00:08:16.990
所以我们经历了它的范围

00:08:12.940 --> 00:08:20.440
需时2周2天2小时2分钟

00:08:16.990 --> 00:08:23.530
现在是2秒，甚至不到几秒

00:08:20.440 --> 00:08:25.600
能够部署新的应用程序实例，因此

00:08:23.530 --> 00:08:28.210
那是促使我们走向的另一件事

00:08:25.600 --> 00:08:30.730
新的建筑方向，最后

00:08:28.210 --> 00:08:34.540
我们再也负担不起的想法

00:08:30.730 --> 00:08:38.320
假装用户坐在

00:08:34.540 --> 00:08:40.890
工作站使用的计算机

00:08:38.320 --> 00:08:46.180
拴在桌子上是我们的首要任务

00:08:40.890 --> 00:08:47.590
美国的客户，我们对

00:08:46.180 --> 00:08:49.810
互联网流量

00:08:47.590 --> 00:08:52.480
今年和一月是第一个

00:08:49.810 --> 00:08:55.270
我们发现大多数人的时间

00:08:52.480 --> 00:08:59.230
美国的互联网流量

00:08:55.270 --> 00:09:01.230
来自移动设备，所以不是

00:08:59.230 --> 00:09:03.880
有人坐在电脑前

00:09:01.230 --> 00:09:05.200
路上有人是手机

00:09:03.880 --> 00:09:08.560
或平板电脑

00:09:05.200 --> 00:09:11.170
还是其他移动设备

00:09:08.560 --> 00:09:14.500
这是Apple Android Windows Phone 

00:09:11.170 --> 00:09:17.050
不管是绝大多数

00:09:14.500 --> 00:09:20.200
我们的用户正在与此互动

00:09:17.050 --> 00:09:22.480
在更多的时间更多

00:09:20.200 --> 00:09:24.970
位置，实际上只是更多

00:09:22.480 --> 00:09:27.579
人或与我们的服务互动

00:09:24.970 --> 00:09:31.029
比以往任何时候，所以我们开始

00:09:27.579 --> 00:09:34.000
以不同的规模运作

00:09:31.029 --> 00:09:36.370
以及不同程度的可接受

00:09:34.000 --> 00:09:39.820
响应时间比过去

00:09:36.370 --> 00:09:43.149
和我们的传统建筑

00:09:39.820 --> 00:09:48.040
只是不会完成目标，所以你

00:09:43.149 --> 00:09:50.470
吸收所有这些因素并倒入

00:09:48.040 --> 00:09:53.829
他们进入一个漏斗，你有几个

00:09:50.470 --> 00:09:56.980
事情出现在我们拥有的顶部

00:09:53.829 --> 00:10:01.230
基础设施的变化，所以我认为

00:09:56.980 --> 00:10:03.220
我们大多数人都知道我们还没有

00:10:01.230 --> 00:10:05.949
通常部署物理

00:10:03.220 --> 00:10:07.930
一段时间以来我们的建筑

00:10:05.949 --> 00:10:10.029
虚拟化的旅程以及

00:10:07.930 --> 00:10:14.140
我们走了移动的旅程

00:10:10.029 --> 00:10:15.970
我认为这是一个公共云

00:10:14.140 --> 00:10:18.670
旅程一直带我们过去

00:10:15.970 --> 00:10:21.130
以利用某种形式的平台

00:10:18.670 --> 00:10:23.079
作为服务，这就是为什么我有

00:10:21.130 --> 00:10:26.970
典型的在这里看到和好东西

00:10:23.079 --> 00:10:30.220
关于关键CF的是，我实际上可以

00:10:26.970 --> 00:10:33.010
在我的数据中心部署我的工作负载

00:10:30.220 --> 00:10:35.980
并在一个公共云提供商中

00:10:33.010 --> 00:10:39.579
通过利用完全相同的方式

00:10:35.980 --> 00:10:42.399
基础设施，但我们也有一个非常

00:10:39.579 --> 00:10:44.890
发生了巨大的变化

00:10:42.399 --> 00:10:46.690
现在应用端我们已经很多年了

00:10:44.890 --> 00:10:50.140
有这种部署方法

00:10:46.690 --> 00:10:52.720
我们创建的整体应用程序

00:10:50.140 --> 00:10:54.819
看起来像模块，但最终我们

00:10:52.720 --> 00:10:58.089
将这些模块捆绑为一个

00:10:54.819 --> 00:11:01.600
可部署单位，并成为

00:10:58.089 --> 00:11:04.149
我们实际推动的货币单位

00:11:01.600 --> 00:11:07.720
东西进入生产环境

00:11:04.149 --> 00:11:10.449
事实证明，巨石不收费

00:11:07.720 --> 00:11:14.319
在基础架构中都很好

00:11:10.449 --> 00:11:16.120
就像云层或我们所处的领域

00:11:14.319 --> 00:11:18.760
试图实现持续交付

00:11:16.120 --> 00:11:20.170
我会说为什么

00:11:18.760 --> 00:11:22.600
但最终这就是我们要去的地方

00:11:20.170 --> 00:11:27.150
开始进入这个建筑

00:11:22.600 --> 00:11:31.450
微服务的风格，以便

00:11:27.150 --> 00:11:34.510
从我们那里获得收益

00:11:31.450 --> 00:11:36.160
像Cloud Foundry这样的平台，我们实际上

00:11:34.510 --> 00:11:38.860
必须支付一些费用，而我不是

00:11:36.160 --> 00:11:40.990
谈论软件许可成本为

00:11:38.860 --> 00:11:43.630
正如我在谈论改变

00:11:40.990 --> 00:11:47.470
我做事的方式就像

00:11:43.630 --> 00:11:49.960
示例云铸造厂针对

00:11:47.470 --> 00:11:52.450
这些东西我们称为12因素Linux 

00:11:49.960 --> 00:11:54.850
应用程序，我不会去

00:11:52.450 --> 00:11:57.700
通过所有十二个因素

00:11:54.850 --> 00:12:00.280
早上，但是如果您参观十二点

00:11:57.700 --> 00:12:02.080
 dotnet，您可以快速阅读

00:12:00.280 --> 00:12:03.730
仔细阅读所有这些内容

00:12:02.080 --> 00:12:06.330
比二十分钟多三十分钟

00:12:03.730 --> 00:12:09.820
可能但只是为了总结

00:12:06.330 --> 00:12:12.700
我们大部分时间都在谈论

00:12:09.820 --> 00:12:15.880
非常小的非常集中的应用程序

00:12:12.700 --> 00:12:19.630
那是无状态的意思，我可以

00:12:15.880 --> 00:12:21.820
非常容易地处理它们，他们

00:12:19.630 --> 00:12:27.220
他们很快就关闭了

00:12:21.820 --> 00:12:29.200
非常干净，他们后来绑定到

00:12:27.220 --> 00:12:31.330
在配置信息中，他们

00:12:29.200 --> 00:12:34.240
可以从他们的环境中发现

00:12:31.330 --> 00:12:36.820
没有配置烘焙到

00:12:34.240 --> 00:12:40.120
可部署的东西没有什么概念

00:12:36.820 --> 00:12:41.970
我需要联系培根的服务

00:12:40.120 --> 00:12:44.170
实际上所有这些都是可部署的

00:12:41.970 --> 00:12:46.570
由

00:12:44.170 --> 00:12:48.460
它部署在什么平台上

00:12:46.570 --> 00:12:51.580
与我们有很大不同的东西

00:12:48.460 --> 00:12:54.700
传统上建造，然后微型

00:12:51.580 --> 00:12:57.190
服务本身是十二个因素

00:12:54.700 --> 00:12:59.320
 Linux应用程序，但他们也说

00:12:57.190 --> 00:13:01.540
有关团队的更多信息

00:12:59.320 --> 00:13:03.130
我们将要使用的结构

00:13:01.540 --> 00:13:09.910
这些应用程序的目的

00:13:03.130 --> 00:13:11.860
服务需要以及我们如何

00:13:09.910 --> 00:13:14.380
实际上不仅要隔离

00:13:11.860 --> 00:13:17.290
运行代码，但在许多情况下，我们

00:13:14.380 --> 00:13:20.920
要将我们中的数据隔离

00:13:17.290 --> 00:13:23.260
环境和以及所有这三个

00:13:20.920 --> 00:13:27.100
那些领域包括第十二个因素

00:13:23.260 --> 00:13:29.620
典型的企业发展

00:13:27.100 --> 00:13:32.070
团队真的被迫考虑

00:13:29.620 --> 00:13:38.070
世界有点不同

00:13:32.070 --> 00:13:39.810
我喜欢将此与我们

00:13:38.070 --> 00:13:42.420
尝试采用敏捷开发

00:13:39.810 --> 00:13:48.810
世纪之交的实践

00:13:42.420 --> 00:13:51.870
所以当时极限编程是

00:13:48.810 --> 00:13:55.290
主要的开发过程之一

00:13:51.870 --> 00:13:57.390
团队正在考虑的问题，以及当您

00:13:55.290 --> 00:14:01.290
看看你有极限编程

00:13:57.390 --> 00:14:04.920
这个家庭的13种习俗，而这13种

00:14:01.290 --> 00:14:07.950
预期将采用

00:14:04.920 --> 00:14:10.380
整个我们当中很多人

00:14:07.950 --> 00:14:13.020
来看看这些做法，我们

00:14:10.380 --> 00:14:15.300
会选择性地采用那些

00:14:13.020 --> 00:14:18.090
我们了解或认为

00:14:15.300 --> 00:14:20.400
适用于我们，我们会设定

00:14:18.090 --> 00:14:23.310
除了其他做法外

00:14:20.400 --> 00:14:26.400
在我们会这样做的情况下，我们不会

00:14:23.310 --> 00:14:29.270
得到我们期望的结果

00:14:26.400 --> 00:14:32.130
会有我们失败

00:14:29.270 --> 00:14:35.300
当你问XP从业者

00:14:32.130 --> 00:14:37.770
为什么我在这种环境下失败

00:14:35.300 --> 00:14:40.860
最终答案会很好

00:14:37.770 --> 00:14:43.140
没有采取所有做法， 

00:14:40.860 --> 00:14:45.120
原因是如果你看

00:14:43.140 --> 00:14:47.070
像被吸引一样练习

00:14:45.120 --> 00:14:49.020
您在这里看到的插槽

00:14:47.070 --> 00:14:53.250
他们之间的关系网络

00:14:49.020 --> 00:14:55.950
这个想法是，每种做法

00:14:53.250 --> 00:14:57.870
有优点和缺点，这是

00:14:55.950 --> 00:15:01.200
做法与

00:14:57.870 --> 00:15:04.020
他们在这方面互相支持的方式

00:15:01.200 --> 00:15:08.130
导致他们拥有

00:15:04.020 --> 00:15:10.830
协同关系在哪里

00:15:08.130 --> 00:15:12.570
实际上比总和大得多

00:15:10.830 --> 00:15:14.400
的一部分，当你开始拉

00:15:12.570 --> 00:15:17.730
在这个网络之外练习

00:15:14.400 --> 00:15:20.100
实际上削弱了网格并使其

00:15:17.730 --> 00:15:23.220
它几乎没有像

00:15:20.100 --> 00:15:26.120
好吧，我想我们发现这很相似

00:15:23.220 --> 00:15:28.860
当我们开始谈论关系时

00:15:26.120 --> 00:15:32.130
物理CF Cloud Foundry等平台

00:15:28.860 --> 00:15:34.470
和微服务两者都不是

00:15:32.130 --> 00:15:38.130
这些环境实际上意味着

00:15:34.470 --> 00:15:40.560
其他你可以部署不同类型的

00:15:38.130 --> 00:15:43.740
到Cloud Foundry的架构

00:15:40.560 --> 00:15:45.270
事实证明，Micra服务是一个非常

00:15:43.740 --> 00:15:47.910
自然适合

00:15:45.270 --> 00:15:51.420
到该部署环境

00:15:47.910 --> 00:15:53.880
同时您不必进行部署

00:15:51.420 --> 00:15:56.340
到像Cloud Foundry这样的环境

00:15:53.880 --> 00:15:59.100
做微服务，但正如我们所言

00:15:56.340 --> 00:16:01.140
关于何时采用这种架构

00:15:59.100 --> 00:16:03.600
连同你所有的美好事物

00:16:01.140 --> 00:16:05.400
到达那里有几个主要问题

00:16:03.600 --> 00:16:06.510
你将要面对

00:16:05.400 --> 00:16:10.260
您将不得不找到解决方案

00:16:06.510 --> 00:16:12.870
反复地发现一个平台

00:16:10.260 --> 00:16:15.270
就像云铸造一样，它非常适合

00:16:12.870 --> 00:16:17.580
完全解决那套

00:16:15.270 --> 00:16:19.230
问题，所以您最终发现了什么

00:16:17.580 --> 00:16:22.340
是某种共生的东西

00:16:19.230 --> 00:16:25.680
云代工厂与

00:16:22.340 --> 00:16:28.170
这样的微服务架构

00:16:25.680 --> 00:16:31.410
两者实际上都受益于

00:16:28.170 --> 00:16:36.050
一起使用，所以我现在想做什么

00:16:31.410 --> 00:16:38.330
是对

00:16:36.050 --> 00:16:40.680
微电路，我想开始

00:16:38.330 --> 00:16:42.660
定义我使用的几个术语

00:16:40.680 --> 00:16:44.760
非常频繁，这些术语是

00:16:42.660 --> 00:16:48.360
简单和容易，现在这些似乎

00:16:44.760 --> 00:16:49.980
我们经常使用的单词

00:16:48.360 --> 00:16:52.470
我们实际使用它们的情况

00:16:49.980 --> 00:16:55.370
可以互换，所以我可以称呼相同

00:16:52.470 --> 00:16:58.470
我真正的意思是简单易行

00:16:55.370 --> 00:17:00.600
本质上是一样的东西，丰富

00:16:58.470 --> 00:17:03.480
封闭的创造者Hickey 

00:17:00.600 --> 00:17:06.750
他在

00:17:03.480 --> 00:17:09.360
在2011年召开的怪圈会议

00:17:06.750 --> 00:17:12.390
简单变得容易，在那个谈话中他

00:17:09.360 --> 00:17:14.459
想把这个想法拆散

00:17:12.390 --> 00:17:17.580
这些是可互换的单词， 

00:17:14.459 --> 00:17:21.330
他是通过追踪

00:17:17.580 --> 00:17:24.030
这些话，他表明简单

00:17:21.330 --> 00:17:27.150
实际上意味着一个文件夹编织，而

00:17:24.030 --> 00:17:29.070
复杂意味着很多褶皱或辫子

00:17:27.150 --> 00:17:32.040
这个想法是，我们应该能够

00:17:29.070 --> 00:17:34.740
看架构中的组件

00:17:32.040 --> 00:17:36.750
并告诉他们是否真的解耦了

00:17:34.740 --> 00:17:40.200
或如果他们耦合或用他的话

00:17:36.750 --> 00:17:42.900
一起拼搏，我们应该

00:17:40.200 --> 00:17:45.450
能够查看架构并获得

00:17:42.900 --> 00:17:47.340
客观上与

00:17:45.450 --> 00:17:50.730
无论是简单的架构还是

00:17:47.340 --> 00:17:53.790
复杂的架构，而Easy的架构非常

00:17:50.730 --> 00:17:56.310
事物的这种概念与众不同

00:17:53.790 --> 00:17:58.890
那条线对我来说很明显

00:17:56.310 --> 00:18:01.799
靠近我的谎言不会是

00:17:58.890 --> 00:18:04.110
就像你附近的东西

00:18:01.799 --> 00:18:05.850
当我们思考时考虑架构

00:18:04.110 --> 00:18:10.679
关于我们的软件开发

00:18:05.850 --> 00:18:12.090
其实在想我们在想

00:18:10.679 --> 00:18:14.190
关于我们熟悉的事情

00:18:12.090 --> 00:18:15.720
我们在您知道之前所做的事情

00:18:14.190 --> 00:18:18.870
我们使用的语言

00:18:15.720 --> 00:18:20.730
如果我很长一段时间，我们使用的框架

00:18:18.870 --> 00:18:23.640
春季学期开发者，您很长

00:18:20.730 --> 00:18:26.900
术语Ruby开发人员，我们可能会有一个非常

00:18:23.640 --> 00:18:30.840
不同的定义，例如简单

00:18:26.900 --> 00:18:33.510
所以我会用这两个词

00:18:30.840 --> 00:18:35.490
整个整体架构

00:18:33.510 --> 00:18:37.919
我们不必花费很多时间

00:18:35.490 --> 00:18:39.570
描述，因为我们已经习惯了

00:18:37.919 --> 00:18:42.030
基本上我们在说的是

00:18:39.570 --> 00:18:43.950
通常是一些相当大的整体

00:18:42.030 --> 00:18:46.380
关系数据库并不是真的

00:18:43.950 --> 00:18:48.720
不管是什么退货产品

00:18:46.380 --> 00:18:52.020
通常在另一边谈论

00:18:48.720 --> 00:18:54.179
一些基于浏览器的客户端，通常

00:18:52.020 --> 00:18:57.480
我们建立的是

00:18:54.179 --> 00:19:00.480
数据访问对象和某种形式的

00:18:57.480 --> 00:19:03.240
服务bean，无论是否

00:19:00.480 --> 00:19:05.790
您正在使用spring或EJB之类的东西

00:19:03.240 --> 00:19:09.210
其他，我们在谈论服务器端

00:19:05.790 --> 00:19:12.150
 NBC具有服务器端模板

00:19:09.210 --> 00:19:14.580
内容大概HTML大概

00:19:12.150 --> 00:19:17.580
如果我们真的有一点JavaScript 

00:19:14.580 --> 00:19:20.370
推信封，也许我们有一些

00:19:17.580 --> 00:19:22.350
 Web服务API，我们可以将其用作

00:19:20.370 --> 00:19:24.510
替代入口点，但在许多

00:19:22.350 --> 00:19:26.669
案例就是我们实际提供的

00:19:24.510 --> 00:19:28.530
所以当我们考虑一个整体

00:19:26.669 --> 00:19:30.929
像这样的架构

00:19:28.530 --> 00:19:33.179
我想把它形容为复杂

00:19:30.929 --> 00:19:35.669
建筑，我想从

00:19:33.179 --> 00:19:37.650
几个复杂的架构

00:19:35.669 --> 00:19:39.630
原因之一，我们采取所有这些

00:19:37.650 --> 00:19:40.980
不同的模块层，我们

00:19:39.630 --> 00:19:43.440
将它们绑定在一起

00:19:40.980 --> 00:19:46.950
可部署您，但不仅仅是我们

00:19:43.440 --> 00:19:49.530
从事一整套不同的业务

00:19:46.950 --> 00:19:51.510
来自我们领域的概念，我们也

00:19:49.530 --> 00:19:53.130
将它们结合在一起

00:19:51.510 --> 00:19:56.250
可部署的单位，所以非常困难

00:19:53.130 --> 00:19:58.230
让我们看看这个巨石然后说

00:19:56.250 --> 00:20:00.360
它已经看到了您的关注，因为

00:19:58.230 --> 00:20:04.320
不，但是对我们来说这很容易

00:20:00.360 --> 00:20:07.410
我们已经习惯了开始

00:20:04.320 --> 00:20:10.169
单个代码库添加了一些框架

00:20:07.410 --> 00:20:10.890
添加开始编写的构建过程

00:20:10.169 --> 00:20:15.090
码

00:20:10.890 --> 00:20:16.950
该代码加班，直到我们再次

00:20:15.090 --> 00:20:21.840
关于此的所有知识

00:20:16.950 --> 00:20:23.730
一站式应用系统

00:20:21.840 --> 00:20:25.740
知道随着时间的流逝，他们变得越来越多

00:20:23.730 --> 00:20:29.640
很难合作，但是他们非常

00:20:25.740 --> 00:20:31.650
容易上手之一

00:20:29.640 --> 00:20:34.050
这些复杂的原因是

00:20:31.650 --> 00:20:36.420
我们拥有的模块化工具

00:20:34.050 --> 00:20:39.030
很难很好地使用它们

00:20:36.420 --> 00:20:41.520
要求极高的

00:20:39.030 --> 00:20:44.430
纪律，所以当您想到Java时

00:20:41.520 --> 00:20:48.150
我们基本上有类和包

00:20:44.430 --> 00:20:50.730
当我们使用IDE时，ID非常

00:20:48.150 --> 00:20:53.820
对我们有帮助，您会知道吗

00:20:50.730 --> 00:20:55.830
自动导入可能

00:20:53.820 --> 00:20:59.280
我们不应该使用它，否则它将

00:20:55.830 --> 00:21:01.950
自动允许我们访问课程

00:20:59.280 --> 00:21:04.920
或调用我们可能不应该使用的方法

00:21:01.950 --> 00:21:06.480
正在使用，所以如果我们没有高

00:21:04.920 --> 00:21:09.690
纪律程度，或者我们没有

00:21:06.480 --> 00:21:12.990
工具到位以检测这些

00:21:09.690 --> 00:21:14.790
那么我们就可以违反架构

00:21:12.990 --> 00:21:17.370
很快创造出这些东西，我们

00:21:14.790 --> 00:21:20.130
喜欢打电话给你知道意大利面

00:21:17.370 --> 00:21:23.460
建筑或泥泞的大球你

00:21:20.130 --> 00:21:28.350
知道您选择的任何术语，但

00:21:23.460 --> 00:21:31.880
即使你在这里，真正的困难是

00:21:28.350 --> 00:21:35.370
能够使您的模块有所保留

00:21:31.880 --> 00:21:37.500
我们仍然在纠结

00:21:35.370 --> 00:21:39.780
部署一个整体单元是

00:21:37.500 --> 00:21:41.940
有问题的主要原因之一

00:21:39.780 --> 00:21:44.250
有问题的是，这是一对夫妇的

00:21:41.940 --> 00:21:47.430
不只是一起部署

00:21:44.250 --> 00:21:50.010
还有变化的周期，所以如果我们有

00:21:47.430 --> 00:21:51.930
多个业务部门

00:21:50.010 --> 00:21:54.810
功能，它们都进入

00:21:51.930 --> 00:21:57.030
他们都必须部署在这个整体

00:21:54.810 --> 00:21:59.190
同时，如果一个业务部门

00:21:57.030 --> 00:22:01.650
今天有需要的东西

00:21:59.190 --> 00:22:04.350
为了保持竞争力

00:22:01.650 --> 00:22:06.000
优势，但航班上有其他编码员，或者

00:22:04.350 --> 00:22:08.460
其他尚未准备好的业务部门

00:22:06.000 --> 00:22:11.490
因为你知道一个星期或两个星期

00:22:08.460 --> 00:22:13.560
我们实际上必须等待更长的时间，否则我们

00:22:11.490 --> 00:22:16.080
必须承担很大的风险

00:22:13.560 --> 00:22:18.990
为了部署它，这又是什么

00:22:16.080 --> 00:22:20.730
最终变成一个障碍

00:22:18.990 --> 00:22:22.890
更加频繁地部署

00:22:20.730 --> 00:22:23.760
我们迫切希望能够做到的事情

00:22:22.890 --> 00:22:25.350
去做

00:22:23.760 --> 00:22:27.690
为了保持迭代

00:22:25.350 --> 00:22:31.380
创新反馈周期实际上

00:22:27.690 --> 00:22:33.690
移动，但我们也有这样的想法

00:22:31.380 --> 00:22:35.700
缩放是无礼的，所以我们说我们

00:22:33.690 --> 00:22:38.640
有更多的用户，我们需要能够

00:22:35.700 --> 00:22:40.530
规模，但显然我们的某些领域

00:22:38.640 --> 00:22:42.990
应用将受到更大的打击

00:22:40.530 --> 00:22:45.810
比我们应用程序的其他领域

00:22:42.990 --> 00:22:48.870
如果我们要部署整体，我们就不会

00:22:45.810 --> 00:22:51.300
在大多数情况下可以选择扩展

00:22:48.870 --> 00:22:53.400
只有该应用程序的一部分

00:22:51.300 --> 00:22:56.400
实际上必须全部缩放或不缩放

00:22:53.400 --> 00:22:59.700
我们开始这样做的时候，我们开始

00:22:56.400 --> 00:23:01.500
浪费资源是我们另一个问题

00:22:59.700 --> 00:23:04.260
碰到这里就是这些单片

00:23:01.500 --> 00:23:05.970
建筑在内部成长

00:23:04.260 --> 00:23:09.060
对新手可能会非常吓人

00:23:05.970 --> 00:23:10.800
开发人员加入团队，所以如果你走

00:23:09.060 --> 00:23:13.260
作为新开发者进入

00:23:10.800 --> 00:23:15.690
您面对的是带有

00:23:13.260 --> 00:23:18.480
几千根电缆和几根

00:23:15.690 --> 00:23:21.860
一千个休眠类，然后一个

00:23:18.480 --> 00:23:24.480
整个服务 bean 层和

00:23:21.860 --> 00:23:26.310
控制器和屏幕之上

00:23:24.480 --> 00:23:27.780
很难成为

00:23:26.310 --> 00:23:29.580
富有成效，因为不仅您

00:23:27.780 --> 00:23:31.200
学习这种架构

00:23:29.580 --> 00:23:33.570
学习您正在使用的新业务领域

00:23:31.200 --> 00:23:35.190
也许学习一套新的框架

00:23:33.570 --> 00:23:38.070
你正在学习你所要的人

00:23:35.190 --> 00:23:40.290
与几乎所有这些一起工作

00:23:38.070 --> 00:23:42.120
面积很大

00:23:40.290 --> 00:23:44.250
您必须熟悉的复杂性

00:23:42.120 --> 00:23:47.520
因此很难

00:23:44.250 --> 00:23:49.230
开始完成工作，所以这

00:23:47.520 --> 00:23:51.810
成为扩展的障碍

00:23:49.230 --> 00:23:54.780
如此发展的一种方式

00:23:51.810 --> 00:23:57.420
我们希望能够走得更快

00:23:54.780 --> 00:23:59.370
同时进行更多工作，我们可以

00:23:57.420 --> 00:24:01.770
如果我们有更多的工作并行

00:23:59.370 --> 00:24:04.620
人，但我认为我们大多数人

00:24:01.770 --> 00:24:07.080
熟悉

00:24:04.620 --> 00:24:09.750
把越来越多的人投入

00:24:07.080 --> 00:24:11.790
相同的开发沙箱并找出

00:24:09.750 --> 00:24:14.790
我们增加的人越少

00:24:11.790 --> 00:24:16.320
实际上已经完成，很多可以

00:24:14.790 --> 00:24:18.900
实际上可以追溯到整体

00:24:16.320 --> 00:24:21.600
我们稍后会看到的架构

00:24:18.900 --> 00:24:23.580
最后有这个想法

00:24:21.600 --> 00:24:26.040
采用非常新的技术

00:24:23.580 --> 00:24:28.380
对于我们来说非常困难

00:24:26.040 --> 00:24:30.540
世界，其原因是因为我们

00:24:28.380 --> 00:24:31.980
采用我们真正的新技术

00:24:30.540 --> 00:24:35.400
将它们附加到这些整体式

00:24:31.980 --> 00:24:37.500
架构意味着更多

00:24:35.400 --> 00:24:39.810
业务功能是

00:24:37.500 --> 00:24:41.490
实际接受带来的风险

00:24:39.810 --> 00:24:43.590
在门上的技术，这是

00:24:41.490 --> 00:24:45.870
我们努力奋斗的原因之一

00:24:43.590 --> 00:24:47.640
时间和很多反对

00:24:45.870 --> 00:24:50.070
采用可能是

00:24:47.640 --> 00:24:54.720
解决问题的适当工具

00:24:50.070 --> 00:24:55.980
在我们面前，所以当我们

00:24:54.720 --> 00:24:58.890
看一下微服务架构

00:24:55.980 --> 00:25:02.640
看起来很不一样，只是走路

00:24:58.890 --> 00:25:06.240
在中间的这张幻灯片上，我们看到

00:25:02.640 --> 00:25:09.720
我们已经将整体分解成

00:25:06.240 --> 00:25:12.300
一套不同的服务，所以我们有

00:25:09.720 --> 00:25:14.940
三种不同类型的服务

00:25:12.300 --> 00:25:18.150
部署了一些实例

00:25:14.940 --> 00:25:20.610
每个和顶部的两个都有HTTP 

00:25:18.150 --> 00:25:22.920
接口，这可能是休息

00:25:20.610 --> 00:25:25.680
在底部连接服务

00:25:22.920 --> 00:25:28.770
绿色是异步驱动的

00:25:25.680 --> 00:25:31.320
服务，因此我们收到AMQP消息

00:25:28.770 --> 00:25:33.360
像兔子和Q这样的经纪人坐在

00:25:31.320 --> 00:25:36.750
建筑的中间和令人陶醉

00:25:33.360 --> 00:25:38.580
如果您去的话，在这些服务中加紧工作

00:25:36.750 --> 00:25:40.200
在您看到的图表的最左侧

00:25:38.580 --> 00:25:43.050
我们承认这个现实

00:25:40.200 --> 00:25:45.180
如果我们有多种气候

00:25:43.050 --> 00:25:47.430
你去的最右边

00:25:45.180 --> 00:25:49.320
图表中，您不仅看到我们

00:25:47.430 --> 00:25:51.720
与服务分手，但我们也

00:25:49.320 --> 00:25:54.900
分解数据，以便每个

00:25:51.720 --> 00:25:58.170
服务正在管理自己的一部分

00:25:54.900 --> 00:26:00.900
业务领域数据以及许多

00:25:58.170 --> 00:26:03.360
情况实际上是使用

00:26:00.900 --> 00:26:06.680
特选的数据库技术

00:26:03.360 --> 00:26:11.940
适合其查询和重写模式

00:26:06.680 --> 00:26:13.950
以一种非常合适的方式

00:26:11.940 --> 00:26:18.090
客户和Micra服务

00:26:13.950 --> 00:26:20.910
自己，我们看到了这条长长的竖线

00:26:18.090 --> 00:26:24.060
这代表了我所说的API 

00:26:20.910 --> 00:26:26.700
网关和API网关的工作是

00:26:24.060 --> 00:26:29.010
执行诸如服务聚合之类的任务

00:26:26.700 --> 00:26:31.530
减少之间的聊天

00:26:29.010 --> 00:26:34.320
客户与微服务并做

00:26:31.530 --> 00:26:38.280
协议翻译和

00:26:34.320 --> 00:26:40.590
主要原因是当我们休息时

00:26:38.280 --> 00:26:42.900
把我们的环境融入所有这些微观

00:26:40.590 --> 00:26:44.760
如果不是我们所有的客户都可以提供服务

00:26:42.900 --> 00:26:50.010
例如说我们的电话需要知道

00:26:44.760 --> 00:26:51.220
约40 50 100 150的服务获得

00:26:50.010 --> 00:26:52.450
他们的工作完成了

00:26:51.220 --> 00:26:54.940
我们将高度重视

00:26:52.450 --> 00:26:57.130
显示屏幕的延迟

00:26:54.940 --> 00:26:58.510
大量的网络流量，最终

00:26:57.130 --> 00:27:00.730
这将导致不良的用户

00:26:58.510 --> 00:27:04.090
经验，很多情况是

00:27:00.730 --> 00:27:06.130
会杀死很多电池

00:27:04.090 --> 00:27:09.690
这些设备至关重要

00:27:06.130 --> 00:27:12.100
重要，所以我们考虑

00:27:09.690 --> 00:27:14.350
微服务，然后就可以了

00:27:12.100 --> 00:27:16.780
门，我要按型号对比它们

00:27:14.350 --> 00:27:18.670
通过将其称为简单来实现

00:27:16.780 --> 00:27:20.590
它们很简单，因为如您所见

00:27:18.670 --> 00:27:22.090
我们正在采取所有不同的方法

00:27:20.590 --> 00:27:24.400
我们所关注的

00:27:22.090 --> 00:27:27.070
建筑，我们正在努力

00:27:24.400 --> 00:27:29.980
它们之间的分离边界，但是

00:27:27.070 --> 00:27:31.180
我打电话给他们，因为这非常

00:27:29.980 --> 00:27:33.520
与我们传统上的方式不同

00:27:31.180 --> 00:27:35.530
工作，有很多挑战

00:27:33.520 --> 00:27:37.450
我们要面对的也许是我们

00:27:35.530 --> 00:27:40.300
没遇到过，我们再谈

00:27:37.450 --> 00:27:42.130
关于那些事，但是我们做

00:27:40.300 --> 00:27:44.950
有一个更好的新工具

00:27:42.130 --> 00:27:48.010
模块化，那就是我们强迫

00:27:44.950 --> 00:27:50.800
我们所有服务之间的API边界

00:27:48.010 --> 00:27:53.290
这样它不再只是一种方法

00:27:50.800 --> 00:27:56.200
调用一些业务逻辑的方法

00:27:53.290 --> 00:27:58.150
实际上是通过网络致电的方式

00:27:56.200 --> 00:27:59.800
该业务逻辑，它使

00:27:58.150 --> 00:28:02.650
保持那些建筑

00:27:59.800 --> 00:28:05.170
边界容易得多，因为它是

00:28:02.650 --> 00:28:07.930
很难使那些

00:28:05.170 --> 00:28:11.320
错误和即时通话的类型

00:28:07.930 --> 00:28:14.440
通过注入一点点痛苦

00:28:11.320 --> 00:28:16.510
我们实际上使它更容易的过程

00:28:14.440 --> 00:28:19.090
让我们保持整洁的架构

00:28:16.510 --> 00:28:21.100
的地方，因为我们这样做，所以我们保持我们的

00:28:19.090 --> 00:28:22.510
变更周期要结合在一起

00:28:21.100 --> 00:28:24.820
我们讨论的业务部门

00:28:22.510 --> 00:28:28.150
在那些业务部门能够

00:28:24.820 --> 00:28:30.880
在需要时部署他们的服务

00:28:28.150 --> 00:28:32.860
他们，这意味着他们可以走得更快

00:28:30.880 --> 00:28:35.830
他们可以保持反馈轮

00:28:32.860 --> 00:28:37.300
实际旋转，我可以扩大规模

00:28:35.830 --> 00:28:40.150
高效，所以如果一个业务部门

00:28:37.300 --> 00:28:42.880
服务受到了很大的打击

00:28:40.150 --> 00:28:44.860
需求和其他服务不是我

00:28:42.880 --> 00:28:47.950
只需扩大一个业务部门

00:28:44.860 --> 00:28:51.190
服务来满足这种需求，我用

00:28:47.950 --> 00:28:54.550
我的资源更有效地

00:28:51.190 --> 00:28:57.430
然后当我加入像这样的团队

00:28:54.550 --> 00:29:00.430
新开发人员我正在加入一个较小的团队

00:28:57.430 --> 00:29:03.460
代码基数越小，代码越小

00:29:00.430 --> 00:29:04.400
我需要学习的数据模型，所以我

00:29:03.460 --> 00:29:06.770
有很多

00:29:04.400 --> 00:29:08.300
更多的机会更有生产力

00:29:06.770 --> 00:29:10.760
很快，因为整个架构

00:29:08.300 --> 00:29:14.150
我走进门时面对的是

00:29:10.760 --> 00:29:16.150
少了很多吓人，这也

00:29:14.150 --> 00:29:18.170
使我们能够通过

00:29:16.150 --> 00:29:20.240
通过增加人员来并行化

00:29:18.170 --> 00:29:23.510
因为而不是扔给大家

00:29:20.240 --> 00:29:26.570
可以放进一个沙盒中

00:29:23.510 --> 00:29:31.300
只需创建更多的沙箱，然后

00:29:26.570 --> 00:29:33.920
分成较小的团队，最后

00:29:31.300 --> 00:29:37.400
为开发人员采用新技术

00:29:33.920 --> 00:29:39.650
建筑师的风险大大降低

00:29:37.400 --> 00:29:42.620
因为我可以采用这项新技术

00:29:39.650 --> 00:29:44.810
在一个微服务中，我将

00:29:42.620 --> 00:29:46.730
通常选择一个微服务

00:29:44.810 --> 00:29:49.550
风险少一点，关键一点

00:29:46.730 --> 00:29:51.950
尝试并试用

00:29:49.550 --> 00:29:53.990
技术在那里，如果一切顺利

00:29:51.950 --> 00:29:56.270
太好了，我可以开始

00:29:53.990 --> 00:29:58.400
其余的微服务，但如果

00:29:56.270 --> 00:29:59.990
事情没有解决，我失败了

00:29:58.400 --> 00:30:02.300
失败相当便宜，我可以

00:29:59.990 --> 00:30:10.760
实际上将其退出而不影响

00:30:02.300 --> 00:30:13.340
大量的业务，所以

00:30:10.760 --> 00:30:17.300
那么出现的问题是我们如何

00:30:13.340 --> 00:30:18.770
其实把它分成一个非常

00:30:17.300 --> 00:30:21.290
这里重要的指导原则是

00:30:18.770 --> 00:30:23.350
所谓的康威定律

00:30:21.290 --> 00:30:26.360
 connolly在下面写下了这个声明

00:30:23.350 --> 00:30:28.370
 1957年，他说一个组织

00:30:26.360 --> 00:30:30.500
该系统将产生一个设计

00:30:28.370 --> 00:30:32.600
其结构是

00:30:30.500 --> 00:30:35.660
组织的沟通结构

00:30:32.600 --> 00:30:37.430
所以我挑战你来看看

00:30:35.660 --> 00:30:39.830
您的架构并进行实际比较

00:30:37.430 --> 00:30:42.560
它以您实际组织的方式

00:30:39.830 --> 00:30:46.130
在工作，看看你是否真的知道

00:30:42.560 --> 00:30:48.680
这非常惊人的相似

00:30:46.130 --> 00:30:51.350
在人们的组织方式与

00:30:48.680 --> 00:30:52.520
如果我们认为，代码的组织方式

00:30:51.350 --> 00:30:57.380
关于我们传统上的方式

00:30:52.520 --> 00:30:59.900
组织我们通常做的技术人员

00:30:57.380 --> 00:31:01.790
通过专业化，所以我们把所有

00:30:59.900 --> 00:31:03.950
 DBA，我们将它们放在一个团队中

00:31:01.790 --> 00:31:05.600
带走我们所有的中间件专家

00:31:03.950 --> 00:31:08.030
将他们放在团队中，我们采用所有UI 

00:31:05.600 --> 00:31:11.560
专家，我们将他们放在团队中

00:31:08.030 --> 00:31:14.000
并且当我们将这些分组时并不奇怪

00:31:11.560 --> 00:31:16.730
个人一起组成项目团队

00:31:14.000 --> 00:31:18.020
那些人重新创造那些孤岛

00:31:16.730 --> 00:31:20.270
建筑

00:31:18.020 --> 00:31:22.940
在那法力之内，我们最终

00:31:20.270 --> 00:31:24.650
平面，因此创建微服务类型

00:31:22.940 --> 00:31:26.390
使用这种架构

00:31:24.650 --> 00:31:29.270
组织将会非常

00:31:26.390 --> 00:31:32.570
困难甚至不可能，所以这个主意

00:31:29.270 --> 00:31:35.480
是实际上开始组织您的

00:31:32.570 --> 00:31:38.210
基于您的架构的团队

00:31:35.480 --> 00:31:40.490
想生产和我的一些朋友

00:31:38.210 --> 00:31:44.630
实际上称其为逆

00:31:40.490 --> 00:31:47.450
康威（Conway）操纵创建一个

00:31:44.630 --> 00:31:49.340
我们想要的理想架构

00:31:47.450 --> 00:31:51.890
实现并组建我们的团队

00:31:49.340 --> 00:31:54.320
围绕业务能力

00:31:51.890 --> 00:31:56.480
这些带我们到那个架构

00:31:54.320 --> 00:31:59.900
业务能力团队拥有所有

00:31:56.480 --> 00:32:02.330
交付的必要角色

00:31:59.900 --> 00:32:05.000
提供这种能力的项目

00:32:02.330 --> 00:32:07.970
但是可以提供

00:32:05.000 --> 00:32:10.310
能力C项目团队是临时的

00:32:07.970 --> 00:32:13.820
当项目完成时，他们通常是

00:32:10.310 --> 00:32:16.700
解散，而产品团队生存

00:32:13.820 --> 00:32:19.160
在产品的整个生命周期中

00:32:16.700 --> 00:32:21.470
他们负责理解

00:32:19.160 --> 00:32:25.220
建立需求

00:32:21.470 --> 00:32:27.380
能力发展部署网络能力

00:32:25.220 --> 00:32:31.070
并运行该功能， 

00:32:27.380 --> 00:32:33.290
基本上保持生产

00:32:31.070 --> 00:32:36.500
直到那种能力不再

00:32:33.290 --> 00:32:38.810
需要，这些团队不确定

00:32:36.500 --> 00:32:41.390
您熟悉两个这样的想法

00:32:38.810 --> 00:32:44.270
比萨队被亚马逊推广

00:32:41.390 --> 00:32:47.570
或者说如果一个团队无法满足

00:32:44.270 --> 00:32:50.000
比团队只有两个披萨

00:32:47.570 --> 00:32:55.160
太大了，差不多

00:32:50.000 --> 00:32:56.930
我们在谈论什么，你怎么样

00:32:55.160 --> 00:32:59.480
实际决定什么是分区

00:32:56.930 --> 00:33:02.030
所以在很多情况下

00:32:59.480 --> 00:33:04.640
您可以使用简单工具的工具

00:33:02.030 --> 00:33:07.130
人们会使用的是这个想法

00:33:04.640 --> 00:33:08.960
名词和动词，所以寻找名词

00:33:07.130 --> 00:33:11.420
这些成为我的服务因素

00:33:08.960 --> 00:33:12.950
寻找那些成为我的动词

00:33:11.420 --> 00:33:14.590
服务创始人，但最终这是

00:33:12.950 --> 00:33:16.910
一个相当简单的工具，并具有

00:33:14.590 --> 00:33:18.170
实用性有限

00:33:16.910 --> 00:33:20.690
你可以看到的是单

00:33:18.170 --> 00:33:25.310
责任原则或这个想法

00:33:20.690 --> 00:33:27.230
任何架构的组件都应该

00:33:25.310 --> 00:33:29.900
它只会做一件事，而不只是一件事

00:33:27.230 --> 00:33:31.250
责任，在许多情况下，这是

00:33:29.900 --> 00:33:33.380
定义的

00:33:31.250 --> 00:33:37.040
它只有一个改变的理由

00:33:33.380 --> 00:33:40.610
如果我们不这样做，这可以为我们工作

00:33:37.040 --> 00:33:43.610
陷入困境，就什么达成共识

00:33:40.610 --> 00:33:47.780
正是改变的原因，所以

00:33:43.610 --> 00:33:50.750
我所看到的一切都非常成功地用于

00:33:47.780 --> 00:33:53.060
做这些分区是这个想法

00:33:50.750 --> 00:33:57.110
域驱动的有限上下文

00:33:53.060 --> 00:34:00.890
设计或这种想法

00:33:57.110 --> 00:34:04.370
没有一个领域模型可以

00:34:00.890 --> 00:34:07.070
实际描述所有数据

00:34:04.370 --> 00:34:09.379
您的企业想考虑

00:34:07.070 --> 00:34:12.260
因为最终您将拥有

00:34:09.379 --> 00:34:14.870
该领域中的跨领域概念

00:34:12.260 --> 00:34:17.360
语义略有不同

00:34:14.870 --> 00:34:22.070
在不同的情况下，所以我们正在寻找

00:34:17.360 --> 00:34:24.980
这是电影的领域模型

00:34:22.070 --> 00:34:27.560
分销业务等

00:34:24.980 --> 00:34:29.510
手侧，我们有此产品目录

00:34:27.560 --> 00:34:31.520
服务产品目录服务

00:34:29.510 --> 00:34:33.620
考虑电影，但当他们想到

00:34:31.520 --> 00:34:36.050
关于电影的思考

00:34:33.620 --> 00:34:38.810
您知道的实际电影本身

00:34:36.050 --> 00:34:42.590
标题中包含演员和

00:34:38.810 --> 00:34:45.800
女演员导演类型相关

00:34:42.590 --> 00:34:47.750
有了它，右边的系统是

00:34:45.800 --> 00:34:49.790
库存系统和库存

00:34:47.750 --> 00:34:52.550
系统也会想到电影，但是

00:34:49.790 --> 00:34:57.730
在某种情况下想到他们

00:34:52.550 --> 00:35:01.760
将名称粘贴到一张媒体DVD 

00:34:57.730 --> 00:35:03.140
我们有一定数量的

00:35:01.760 --> 00:35:06.050
这些数字不同

00:35:03.140 --> 00:35:08.450
位置，所以我知道这些电影在哪里

00:35:06.050 --> 00:35:11.690
是，我有多少，以及

00:35:08.450 --> 00:35:13.460
有多少在流通中，依此类推

00:35:11.690 --> 00:35:16.730
我可以尝试为这两个模型

00:35:13.460 --> 00:35:18.400
在一个系统中并将其全部合并

00:35:16.730 --> 00:35:21.200
还有很多其他的概念

00:35:18.400 --> 00:35:22.940
在这样的系统中

00:35:21.200 --> 00:35:26.000
代表电影，我可以将它们全部融合

00:35:22.940 --> 00:35:28.750
一起成为一个单一域模型

00:35:26.000 --> 00:35:32.060
电影将变得非常大

00:35:28.750 --> 00:35:34.250
有时我们会称之为的概念

00:35:32.060 --> 00:35:36.380
像神的物体，例如

00:35:34.250 --> 00:35:38.630
任何时候我们需要改变的东西

00:35:36.380 --> 00:35:40.880
我们可能需要的系统

00:35:38.630 --> 00:35:42.170
看电影，所以我们是

00:35:40.880 --> 00:35:44.320
在这里做的是我们正在画这些

00:35:42.170 --> 00:35:47.320
周围的有限上下文

00:35:44.320 --> 00:35:50.740
产品目录和库存，我们

00:35:47.320 --> 00:35:53.530
基本上说让电影意味着什么

00:35:50.740 --> 00:35:55.990
电影是指产品目录和

00:35:53.530 --> 00:35:58.150
让电影意味着电影对

00:35:55.990 --> 00:36:00.460
库存系统，然后创建

00:35:58.150 --> 00:36:03.250
之间的轻量级集成点

00:36:00.460 --> 00:36:06.370
他们，以便我可以将一部电影映射

00:36:03.250 --> 00:36:09.460
在另一上下文中将电影上下文

00:36:06.370 --> 00:36:11.880
但不要强迫这些

00:36:09.460 --> 00:36:15.040
考虑其他上下文的上下文

00:36:11.880 --> 00:36:18.940
该术语的定义，所以当我们这样做时

00:36:15.040 --> 00:36:21.670
我们可以开始思考我们的

00:36:18.940 --> 00:36:25.390
服务和这些数据

00:36:21.670 --> 00:36:27.850
服务控制着我们的有限环境

00:36:25.390 --> 00:36:30.100
当我们这样做时，我们将创建此API 

00:36:27.850 --> 00:36:32.170
边界，但它不仅保护

00:36:30.100 --> 00:36:34.720
代码，但它也可以保护数据和

00:36:32.170 --> 00:36:37.390
不只是数据，还有表示

00:36:34.720 --> 00:36:39.010
和相关的存储技术

00:36:37.390 --> 00:36:41.650
有了这些数据，我们就可以开始采用

00:36:39.010 --> 00:36:43.690
多语言持久性的想法或

00:36:41.650 --> 00:36:45.880
使用最多的数据存储

00:36:43.690 --> 00:36:48.280
适合我们正在尝试的工作

00:36:45.880 --> 00:36:54.580
得到我们想要的工作

00:36:48.280 --> 00:36:57.430
这样做我们如何真正整合这些

00:36:54.580 --> 00:37:00.010
现在服务，这就是

00:36:57.430 --> 00:37:03.730
我想解释的不是那么多

00:37:00.010 --> 00:37:07.690
新架构，这只是一种重新设计

00:37:03.730 --> 00:37:10.330
非常古老的建筑，我们发现

00:37:07.690 --> 00:37:14.410
从某种意义上说，它的起源

00:37:10.330 --> 00:37:17.590
 UNIX和管道以及过滤器，因此

00:37:14.410 --> 00:37:19.120
我们来看Unix UNIX主要是

00:37:17.590 --> 00:37:22.330
结构化的环境是

00:37:19.120 --> 00:37:25.630
构造为一组非常专注的

00:37:22.330 --> 00:37:29.340
做一件事情并做的小程序

00:37:25.630 --> 00:37:32.620
一件事以及我们创造的方式

00:37:29.340 --> 00:37:34.840
使用多个程序的集成

00:37:32.620 --> 00:37:37.750
是通过将它们链接在一起

00:37:34.840 --> 00:37:40.330
这些管道和重定向以及

00:37:37.750 --> 00:37:43.540
整合机制其实相当

00:37:40.330 --> 00:37:45.910
愚蠢的是，他们不知道这些管道

00:37:43.540 --> 00:37:47.800
关于数据的任何事情

00:37:45.910 --> 00:37:49.990
遍历他们所做的一切

00:37:47.800 --> 00:37:52.900
正在链接一个的输出流

00:37:49.990 --> 00:37:55.900
处理到另一个的输入流

00:37:52.900 --> 00:37:57.760
过程和所有允许我的智慧

00:37:55.900 --> 00:37:59.890
实际处理

00:37:57.760 --> 00:38:03.190
通过该机制的数据流

00:37:59.890 --> 00:38:07.390
实际行为最终会终结

00:38:03.190 --> 00:38:10.450
这与如何

00:38:07.390 --> 00:38:12.820
我们传统上实施了服务

00:38:10.450 --> 00:38:17.500
基于架构的东西

00:38:12.820 --> 00:38:19.240
 ESB，因此在ESB中，我们倾向于将所有

00:38:17.500 --> 00:38:22.660
沟通中的聪明人

00:38:19.240 --> 00:38:24.700
机制和服务往往不

00:38:22.660 --> 00:38:27.280
对世界有很多了解

00:38:24.700 --> 00:38:28.720
在他们周围，而在这种风格

00:38:27.280 --> 00:38:31.000
架构实际上是相反的

00:38:28.720 --> 00:38:33.700
其中，我们把聪明人和

00:38:31.000 --> 00:38:36.640
端点和整合机制

00:38:33.700 --> 00:38:39.010
没有太多的知识

00:38:36.640 --> 00:38:42.010
它实际上正在加入的服务

00:38:39.010 --> 00:38:45.090
和我的同事尼尔在一起

00:38:42.010 --> 00:38:47.950
福特将其描述为

00:38:45.090 --> 00:38:51.400
编排是这样的

00:38:47.950 --> 00:38:53.890
集中控制的想法

00:38:51.400 --> 00:38:55.660
大型的重量级巴士

00:38:53.890 --> 00:38:59.770
代表所有政策

00:38:55.660 --> 00:39:02.410
集成和唤醒逻辑及其

00:38:59.770 --> 00:39:04.420
实际上是在控制架构

00:39:02.410 --> 00:39:06.760
在任何时候我们需要改变

00:39:04.420 --> 00:39:09.460
整个系统，我们经常被淘汰

00:39:06.760 --> 00:39:12.130
触摸此企业服务总线

00:39:09.460 --> 00:39:15.580
如果您打开它，看起来又像

00:39:12.130 --> 00:39:17.380
沸腾的意大利面锅，它隐藏了

00:39:15.580 --> 00:39:19.420
许多复杂的

00:39:17.380 --> 00:39:21.850
体系结构而使用微服务

00:39:19.420 --> 00:39:24.400
我们实际上是在揭示复杂性

00:39:21.850 --> 00:39:26.619
在架构中并放置

00:39:24.400 --> 00:39:28.480
智能和端点，使他们能够

00:39:26.619 --> 00:39:31.240
编排他们的互动，所以

00:39:28.480 --> 00:39:33.850
非常像

00:39:31.240 --> 00:39:36.010
芭蕾舞团的乐团，所以当你去

00:39:33.850 --> 00:39:37.480
到乐团你有导演

00:39:36.010 --> 00:39:40.869
站在音乐家面前

00:39:37.480 --> 00:39:44.500
告诉他们该怎么办，他

00:39:40.869 --> 00:39:46.900
取代ESB，并在

00:39:44.500 --> 00:39:49.150
基于服务的架构，而何时

00:39:46.900 --> 00:39:51.340
我们看芭蕾舞，没有

00:39:49.150 --> 00:39:55.359
表演期间的中央控制

00:39:51.340 --> 00:39:57.880
实际的舞者必须适应和

00:39:55.359 --> 00:39:59.619
在某些情况下会改变他们的行为

00:39:57.880 --> 00:40:02.440
为了成功

00:39:59.619 --> 00:40:04.869
性能，这就是我们发现的

00:40:02.440 --> 00:40:07.330
这些基于微服务的架构

00:40:04.869 --> 00:40:09.700
服务本身在哪里

00:40:07.330 --> 00:40:11.230
实际上对他们负责

00:40:09.700 --> 00:40:14.650
整合我们

00:40:11.230 --> 00:40:18.580
是周围的生态系统

00:40:14.650 --> 00:40:21.359
很好地了解了这个想法， 

00:40:18.580 --> 00:40:23.770
这是免费的午餐，所以Ben Wooten 

00:40:21.359 --> 00:40:26.470
几个月前发表了一个

00:40:23.770 --> 00:40:28.930
高伸缩性的好文章

00:40:26.470 --> 00:40:32.650
微型电路不是免费的午餐

00:40:28.930 --> 00:40:35.800
那篇文章他列举了很多

00:40:32.650 --> 00:40:39.130
我们遇到的困难

00:40:35.800 --> 00:40:41.800
我们部署这样的架构

00:40:39.130 --> 00:40:45.430
显然，我们正在部署更多

00:40:41.800 --> 00:40:47.950
像这样的架构中的事物

00:40:45.430 --> 00:40:50.609
很多情况下，如果我们完全采用它， 

00:40:47.950 --> 00:40:53.560
提供更多技术

00:40:50.609 --> 00:40:55.900
同时，我们还创建了一个

00:40:53.560 --> 00:40:57.880
分布式系统和分布式

00:40:55.900 --> 00:41:03.700
系统携带自己的套

00:40:57.880 --> 00:41:06.910
复杂性，这不是免费的，我们有

00:41:03.700 --> 00:41:09.580
在许多情况下增加我们的纪律

00:41:06.910 --> 00:41:12.310
我们必须付出更多

00:41:09.580 --> 00:41:13.750
大量的运营开销

00:41:12.310 --> 00:41:16.600
我们还有很多东西

00:41:13.750 --> 00:41:18.580
保持基础架构的生命力

00:41:16.600 --> 00:41:21.760
最重要的是这个想法

00:41:18.580 --> 00:41:24.630
监视其中之一非常困难

00:41:21.760 --> 00:41:27.250
这些架构，而监控

00:41:24.630 --> 00:41:30.160
整体而言实际上是相对的

00:41:27.250 --> 00:41:32.680
直接，我们必须有一个

00:41:30.160 --> 00:41:35.650
牢固的文化关系

00:41:32.680 --> 00:41:38.470
在开发操作之间，如果这些

00:41:35.650 --> 00:41:40.330
还没有到位，我们有

00:41:38.470 --> 00:41:42.609
测试的其他挑战

00:41:40.330 --> 00:41:45.400
适用于整体的策略不会

00:41:42.609 --> 00:41:47.920
一定工作得很好，马丁

00:41:45.400 --> 00:41:51.160
福勒将这一点更进一步

00:41:47.920 --> 00:41:52.900
如果您考虑

00:41:51.160 --> 00:41:55.180
嘉年华骑着标语

00:41:52.900 --> 00:41:57.310
你必须高个子才能骑

00:41:55.180 --> 00:42:00.400
他说你必须

00:41:57.310 --> 00:42:02.470
这么高的微电路

00:42:00.400 --> 00:42:04.630
只有一些基本学科

00:42:02.470 --> 00:42:09.550
你将不得不拥有

00:42:04.630 --> 00:42:12.820
能够构建和部署的地方

00:42:09.550 --> 00:42:16.480
保持这样的架构，这样

00:42:12.820 --> 00:42:21.670
能够提供新的环境

00:42:16.480 --> 00:42:24.460
运行时堆栈很快

00:42:21.670 --> 00:42:27.099
中间件堆叠数据服务

00:42:24.460 --> 00:42:29.770
您需要成为的方法经纪人

00:42:27.099 --> 00:42:32.020
能够开发和测试舞台，并且

00:42:29.770 --> 00:42:35.380
最终将这些产品投入生产

00:42:32.020 --> 00:42:38.080
系统，您必须非常擅长

00:42:35.380 --> 00:42:40.810
不仅监控应用本身

00:42:38.080 --> 00:42:43.450
而且在

00:42:40.810 --> 00:42:46.240
这个分布式系统，您必须

00:42:43.450 --> 00:42:49.119
能够进行应用程序部署

00:42:46.240 --> 00:42:53.310
非常非常快，因为

00:42:49.119 --> 00:42:55.780
如果您愿意，可以在较小的部分部署更多

00:42:53.310 --> 00:42:57.849
如果您的部署过程是

00:42:55.780 --> 00:43:00.400
瓶颈，你不会

00:42:57.849 --> 00:43:03.280
得到想要的好处，然后

00:43:00.400 --> 00:43:05.700
只是这种协作式DevOps的想法

00:43:03.280 --> 00:43:09.849
我们一起工作的文化

00:43:05.700 --> 00:43:14.349
与您达成共同的目标

00:43:09.849 --> 00:43:17.349
共享激励策略

00:43:14.349 --> 00:43:20.230
让我们专注于目标

00:43:17.349 --> 00:43:26.130
我们各自的孤岛，但目标

00:43:20.230 --> 00:43:29.440
实际上将这个概念转变为现金

00:43:26.130 --> 00:43:31.690
关系向前发展，所以有很多

00:43:29.440 --> 00:43:34.500
组织问题，以及

00:43:31.690 --> 00:43:37.330
和技术，我无法修复

00:43:34.500 --> 00:43:39.790
组织问题，但是有很多

00:43:37.330 --> 00:43:43.270
我们还必须解决的技术问题

00:43:39.790 --> 00:43:45.910
解决，所以主要的事情之一

00:43:43.270 --> 00:43:49.030
我们正在与Cloud Foundry合作

00:43:45.910 --> 00:43:52.480
而与Spring合作，我们正在建立一个

00:43:49.030 --> 00:43:55.089
解决问题的平台

00:43:52.480 --> 00:43:59.730
这些存在的许多技术问题

00:43:55.089 --> 00:44:01.690
能够提供能够维持

00:43:59.730 --> 00:44:04.810
应用程序并监视那些

00:44:01.690 --> 00:44:06.700
应用程序，所以如果你看很多

00:44:04.810 --> 00:44:09.640
在云中找到的功能

00:44:06.700 --> 00:44:12.160
铸造厂喜欢能够迅速

00:44:09.640 --> 00:44:15.040
持续提供环境

00:44:12.160 --> 00:44:17.920
能够按需扩大规模

00:44:15.040 --> 00:44:20.560
并自动应用程序实例

00:44:17.920 --> 00:44:23.470
并能够保持健康

00:44:20.560 --> 00:44:26.020
这些应用程序，如果它们失败，请重新启动它们

00:44:23.470 --> 00:44:29.170
并能够处理复杂的路由

00:44:26.020 --> 00:44:32.260
并在非常出色的负载平衡

00:44:29.170 --> 00:44:37.150
能够运行您的Mongo和

00:44:32.260 --> 00:44:38.400
卡桑德拉（Cassandra）和阿迪耶（adieu）并将其包装成一个

00:44:37.150 --> 00:44:40.349
弹性先生

00:44:38.400 --> 00:44:41.640
以及您提供的所有其他服务

00:44:40.349 --> 00:44:44.099
想带到这些桌子上

00:44:41.640 --> 00:44:47.760
架构，然后能够获得

00:44:44.099 --> 00:44:50.309
实时监控信息

00:44:47.760 --> 00:44:51.329
的延迟特性是什么

00:44:50.309 --> 00:44:57.029
我的服务

00:44:51.329 --> 00:45:00.089
我的错误率是多少我的错误率是多少

00:44:57.029 --> 00:45:02.579
请求量看起来像，但是有

00:45:00.089 --> 00:45:05.339
还有一组鼓风模式

00:45:02.579 --> 00:45:08.579
我们需要能够处理它

00:45:05.339 --> 00:45:10.559
从这些散布出来的

00:45:08.579 --> 00:45:13.170
系统现在能够拥有

00:45:10.559 --> 00:45:15.029
分布式版本配置和

00:45:13.170 --> 00:45:17.069
能够做诸如服务之类的事情

00:45:15.029 --> 00:45:20.730
注册和发现，以便我们

00:45:17.069 --> 00:45:22.740
可以将这些东西粘合在一起并被

00:45:20.730 --> 00:45:24.960
能够集成这些服务，以及

00:45:22.740 --> 00:45:27.119
然后随着我们部署更多的东西

00:45:24.960 --> 00:45:29.490
更多失败的机会，因此能够

00:45:27.119 --> 00:45:32.640
建立容错架构

00:45:29.490 --> 00:45:35.190
并能够配置这些东西

00:45:32.640 --> 00:45:37.980
通过异步消息传递并拥有

00:45:35.190 --> 00:45:39.960
配置更改通过

00:45:37.980 --> 00:45:42.440
以非常标准的整体架构

00:45:39.960 --> 00:45:44.700
这样，这就是春天的云

00:45:42.440 --> 00:45:47.099
实际上带到桌子上

00:45:44.700 --> 00:45:49.619
一揽子项目，以帮助我们

00:45:47.099 --> 00:45:51.150
实现那些样板模式并

00:45:49.619 --> 00:45:54.240
它这样做的方法之一是

00:45:51.150 --> 00:45:56.339
通过开始包装很多

00:45:54.240 --> 00:45:58.859
这些问题的样板解决方案

00:45:56.339 --> 00:46:02.160
 Netflix开源的

00:45:58.859 --> 00:46:04.650
所以Netflix就是其中一种

00:46:02.160 --> 00:46:07.859
此微服务的海报儿童

00:46:04.650 --> 00:46:11.329
建筑，这样做

00:46:07.859 --> 00:46:13.770
解决了很多这些问题

00:46:11.329 --> 00:46:17.670
自己并且以非常引人注目的方式

00:46:13.770 --> 00:46:20.880
以及我们正在处理的 Spring Cloud 

00:46:17.670 --> 00:46:23.460
使这些解决方案非常非常

00:46:20.880 --> 00:46:26.039
美味可口

00:46:23.460 --> 00:46:29.279
开发人员是如此之快

00:46:26.039 --> 00:46:32.880
关闭，我只想展示一个非常

00:46:29.279 --> 00:46:35.039
三种微服务的简短演示

00:46:32.880 --> 00:46:38.390
运作中的架构

00:46:35.039 --> 00:46:42.029
在Cloud Foundry上运行并且正在使用

00:46:38.390 --> 00:46:44.190
服务发现与故障

00:46:42.029 --> 00:46:50.309
公差和走线能力

00:46:44.190 --> 00:46:51.820
这是sprint云中固有的

00:46:50.309 --> 00:46:53.500
我如果我去棕色

00:46:51.820 --> 00:46:58.270
在这里，您会看到数字网络

00:46:53.500 --> 00:47:00.880
服务是我们的公共服务

00:46:58.270 --> 00:47:06.550
我们经营的Condry您可以签署

00:47:00.880 --> 00:47:09.660
争取免费试用

00:47:06.550 --> 00:47:15.280
出来，我有所有的应用程序， 

00:47:09.660 --> 00:47:17.770
以及我的尤里卡和我的历史

00:47:15.280 --> 00:47:20.560
仪表板服务和我的配置

00:47:17.770 --> 00:47:25.380
服务部署为云上的应用程序

00:47:20.560 --> 00:47:28.630
铸造厂我也有RabbitMQ和MongoDB 

00:47:25.380 --> 00:47:32.830
提供作为我可以在其中使用的服务

00:47:28.630 --> 00:47:35.320
在这个基础架构中，如果我们

00:47:32.830 --> 00:47:37.870
再看一下架构

00:47:35.320 --> 00:47:41.350
实际上嵌入到应用程序中，我们看到

00:47:37.870 --> 00:47:43.630
我们有一个客户服务，我们有一个

00:47:41.350 --> 00:47:46.960
商店服务，然后我们有一个用户

00:47:43.630 --> 00:47:49.120
界面服务实际上在

00:47:46.960 --> 00:47:51.310
感觉将这些东西联系在一起

00:47:49.120 --> 00:47:53.800
问题是这些服务如何

00:47:51.310 --> 00:47:57.400
实际上知道彼此存在，所以

00:47:53.800 --> 00:48:00.400
通过尤里卡盐，这是一个

00:47:57.400 --> 00:48:01.780
服务注册表和发现引擎

00:48:00.400 --> 00:48:04.240
基本上，您在这里看到的是

00:48:01.780 --> 00:48:07.120
随着所有这些应用程序的到来

00:48:04.240 --> 00:48:09.490
他们正在为此进行注册

00:48:07.120 --> 00:48:11.890
尤里卡服务器，所以我可以看到这是

00:48:09.490 --> 00:48:14.590
我的配置服务器我的客户服务我的

00:48:11.890 --> 00:48:17.320
 UI我的存储服务现在如何

00:48:14.590 --> 00:48:20.230
到那里好吧，如果你去看看我的

00:48:17.320 --> 00:48:23.800
屏幕Spring 应用程序我的配置

00:48:20.230 --> 00:48:25.570
服务器实际上部署了我的配置

00:48:23.800 --> 00:48:27.820
服务器具有Spring Boot应用程序

00:48:25.570 --> 00:48:29.590
只需用海军注释

00:48:27.820 --> 00:48:31.030
配置服务器，但然后使其

00:48:29.590 --> 00:48:33.670
向尤里卡注册

00:48:31.030 --> 00:48:38.020
我只是简单地再注释一次

00:48:33.670 --> 00:48:41.890
为我的Eureka服务器启用Eureka客户端

00:48:38.020 --> 00:48:43.510
通过创建Spring 来部署自身

00:48:41.890 --> 00:48:46.560
再次启动应用程序，这些是

00:48:43.510 --> 00:48:49.450
基本上是一类非常小的应用程序， 

00:48:46.560 --> 00:48:52.540
我正在启用Eureka服务器来实现这一点

00:48:49.450 --> 00:48:56.500
当我的客户再次部署

00:48:52.540 --> 00:48:58.690
服务启动，我再次说启用

00:48:56.500 --> 00:49:00.970
尤里卡客户，所以在所有这些情况下

00:48:58.690 --> 00:49:04.930
这些服务最终被注册

00:49:00.970 --> 00:49:05.170
在这里，现在让我们谈谈什么

00:49:04.930 --> 00:49:08.290
的

00:49:05.170 --> 00:49:11.410
如果我去的话，服务实际上是这样做的

00:49:08.290 --> 00:49:14.020
看看我的顾客，你会注意到我

00:49:11.410 --> 00:49:16.089
在San有一位客户

00:49:14.020 --> 00:49:20.349
如果我钻探，弗朗西斯科名字叫詹姆斯·沃特斯

00:49:16.089 --> 00:49:21.309
深入他的记录，我可以看到他的

00:49:20.349 --> 00:49:24.490
位置

00:49:21.309 --> 00:49:28.780
但我也看到了所有的星巴克

00:49:24.490 --> 00:49:32.530
附近的商店

00:49:28.780 --> 00:49:35.579
詹姆斯，这些信息实际上是

00:49:32.530 --> 00:49:39.190
通过超媒体进入用户界面

00:49:35.579 --> 00:49:43.450
由spring数据创建的接口

00:49:39.190 --> 00:49:47.230
休息，对不起，我是春天，嘿，亚斯

00:49:43.450 --> 00:49:49.960
这种情况，所以这是这里

00:49:47.230 --> 00:49:52.510
维护的数据

00:49:49.960 --> 00:49:55.150
客户服务，但所有商店

00:49:52.510 --> 00:49:58.270
数据由商店服务维护

00:49:55.150 --> 00:50:01.000
并代表客户

00:49:58.270 --> 00:50:05.200
通过超链接服务，所以如果我带这个

00:50:01.000 --> 00:50:07.480
超链接，然后将其放入另一个

00:50:05.200 --> 00:50:10.839
浏览器窗口中您会看到所有商店

00:50:07.480 --> 00:50:14.049
来了，所以问题是

00:50:10.839 --> 00:50:17.230
如果商店服务是

00:50:14.049 --> 00:50:22.420
如果你回到

00:50:17.230 --> 00:50:26.020
架构图，您看到我们

00:50:22.420 --> 00:50:28.059
真正来到客户服务

00:50:26.020 --> 00:50:30.849
票据负载均衡器称为功能区

00:50:28.059 --> 00:50:35.230
其实也跟你绑在一起

00:50:30.849 --> 00:50:37.329
在此架构上看到它的电路

00:50:35.230 --> 00:50:40.030
断路器称为磁滞，基本上

00:50:37.329 --> 00:50:44.170
这是在保护我

00:50:40.030 --> 00:50:47.319
从级联失败的依赖，所以我

00:50:44.170 --> 00:50:49.930
有一台显示器实际上告诉我

00:50:47.319 --> 00:50:51.670
你知道链接的健康状况吗

00:50:49.930 --> 00:50:54.609
在客户服务和

00:50:51.670 --> 00:50:57.670
商店服务，我可以在

00:50:54.609 --> 00:50:59.170
我有这个商店整合课程

00:50:57.670 --> 00:51:01.869
这里创建的方法

00:50:59.170 --> 00:51:04.059
名为按位置获取商店的超链接

00:51:01.869 --> 00:51:06.760
以及我打开那个断路器的方式

00:51:04.059 --> 00:51:10.150
只需简单地用

00:51:06.760 --> 00:51:13.119
历史命令并提供

00:51:10.150 --> 00:51:16.089
后备方法，因此当此电路为

00:51:13.119 --> 00:51:19.010
被绊倒了意味着我已经

00:51:16.089 --> 00:51:20.780
发现我的依赖不健康

00:51:19.010 --> 00:51:22.820
说我会得到这种后备行为

00:51:20.780 --> 00:51:24.950
这将返回null，这将

00:51:22.820 --> 00:51:27.730
可以去那家商店

00:51:24.950 --> 00:51:31.130
列出来，让我们来测试一下

00:51:27.730 --> 00:51:32.840
我将转到命令行，然后

00:51:31.130 --> 00:51:36.280
启动将要运行的shell脚本

00:51:32.840 --> 00:51:39.170
真正打动我的客户服务

00:51:36.280 --> 00:51:41.720
重要的是，如果我回到这里，你

00:51:39.170 --> 00:51:44.810
看到请求数是

00:51:41.720 --> 00:51:47.270
实际上增长很快

00:51:44.810 --> 00:51:49.730
电路关闭，所有这些请求

00:51:47.270 --> 00:51:52.400
是健康的，所以我现在要诱导

00:51:49.730 --> 00:51:57.250
通过告诉架构失败

00:51:52.400 --> 00:52:00.740
 Cloud Foundry停止商店服务

00:51:57.250 --> 00:52:03.200
因此Cloud Foundry现在已停止

00:52:00.740 --> 00:52:05.810
如果您注意到顶部的商店服务

00:52:03.200 --> 00:52:07.820
窗格代表商店的超链接

00:52:05.810 --> 00:52:10.670
走了，因为我们返回null 

00:52:07.820 --> 00:52:14.630
从这种方法，也有

00:52:10.670 --> 00:52:17.540
如果我在用户界面中的效果

00:52:14.630 --> 00:52:21.680
再次回到客户，我们看到

00:52:17.540 --> 00:52:24.230
如果没有詹姆斯的商店了，如果

00:52:21.680 --> 00:52:26.420
我看着历史记录监视器

00:52:24.230 --> 00:52:29.300
我的电路已跳开， 

00:52:26.420 --> 00:52:32.350
我现在正在拦截所有这些请求

00:52:29.300 --> 00:52:36.850
用默认行为回应

00:52:32.350 --> 00:52:38.960
偶尔我会实际持有

00:52:36.850 --> 00:52:41.060
依赖服务以查看其是否健康

00:52:38.960 --> 00:52:43.640
再次，因此您将看到错误数量

00:52:41.060 --> 00:52:45.860
上升到一二或三，但是我们会

00:52:43.640 --> 00:52:49.250
回到我们所处的状态

00:52:45.860 --> 00:52:55.220
用null响应，所以如果我想

00:52:49.250 --> 00:52:57.490
现在恢复商店服务并执行

00:52:55.220 --> 00:52:57.490
那

00:53:00.290 --> 00:53:08.990
随着商店服务的开始

00:53:04.880 --> 00:53:11.900
备份，我们可以回到

00:53:08.990 --> 00:53:14.440
历史信息中心，我们可以继续

00:53:11.900 --> 00:53:14.440
看那个

00:53:15.240 --> 00:53:17.300
您

00:53:17.400 --> 00:53:25.140
片刻之后，我们将看到

00:53:20.710 --> 00:53:25.140
它跳回关闭

00:53:33.510 --> 00:53:38.220
因此，电路现在再次关闭， 

00:53:36.210 --> 00:53:40.080
我们收到了对

00:53:38.220 --> 00:53:42.540
存储服务，如果您查看

00:53:40.080 --> 00:53:45.990
终端，您会看到商店的

00:53:42.540 --> 00:53:50.130
超链接回到原位，然后如果

00:53:45.990 --> 00:53:54.270
我们回到用户界面，我们看到

00:53:50.130 --> 00:53:58.859
也恢复了我们的功能

00:53:54.270 --> 00:54:00.840
不再关闭了，这样

00:53:58.859 --> 00:54:02.730
是 Spring Cloud 的快速演示

00:54:00.840 --> 00:54:05.820
我想要完成的东西

00:54:02.730 --> 00:54:12.810
我们去之前大约还有三张幻灯片

00:54:05.820 --> 00:54:15.000
问题，只是这个想法

00:54:12.810 --> 00:54:17.910
体系结构微服务很好

00:54:15.000 --> 00:54:20.190
不完全是这种风格

00:54:17.910 --> 00:54:23.010
提供服务是相对的

00:54:20.190 --> 00:54:25.890
与我们在

00:54:23.010 --> 00:54:29.270
过去的几年，这实际上是第一个

00:54:25.890 --> 00:54:32.240
展现出来的建筑风格

00:54:29.270 --> 00:54:34.650
过帐连续交付

00:54:32.240 --> 00:54:37.350
对话发布DevOps 

00:54:34.650 --> 00:54:40.290
谈话，所以你花了一堆

00:54:37.350 --> 00:54:42.510
考虑理想的团队

00:54:40.290 --> 00:54:44.609
我们如何进行持续交付

00:54:42.510 --> 00:54:46.140
我们如何做DevOps，您会看到

00:54:44.609 --> 00:54:49.050
他们的建筑风格

00:54:46.140 --> 00:54:51.540
发展中，在许多情况下

00:54:49.050 --> 00:54:54.690
突然出现的就是我们现在的样子

00:54:51.540 --> 00:54:57.900
调用微服务和

00:54:54.690 --> 00:55:02.310
原因是我们有一个非常

00:54:57.900 --> 00:55:05.280
我们提供服务的运营重点

00:55:02.310 --> 00:55:07.140
长时间的讨论，但是

00:55:05.280 --> 00:55:10.770
很多情况下，他们不仅

00:55:07.140 --> 00:55:12.750
在白板上有效，再次在我的

00:55:10.770 --> 00:55:15.960
他发表声明的同事

00:55:12.750 --> 00:55:18.720
该架构是抽象的，直到

00:55:15.960 --> 00:55:21.450
投入运营非常容易

00:55:18.720 --> 00:55:23.730
给我们画ESD 

00:55:21.450 --> 00:55:25.619
在白板上，看起来非常好

00:55:23.730 --> 00:55:28.080
但是当我们实际上出去尝试

00:55:25.619 --> 00:55:30.030
进行部署和操作，然后执行

00:55:28.080 --> 00:55:32.220
像这样连续交付

00:55:30.030 --> 00:55:35.580
最终因为不是那样

00:55:32.220 --> 00:55:39.000
将这些架构投入运营

00:55:35.580 --> 00:55:41.060
因此，我对该陈述的推论

00:55:39.000 --> 00:55:43.530
是那些不是

00:55:41.060 --> 00:55:45.869
他们真正有效地运作了

00:55:43.530 --> 00:55:46.580
仅存在于白板上

00:55:45.869 --> 00:55:48.650
在

00:55:46.580 --> 00:55:52.700
实践实际上是

00:55:48.650 --> 00:55:55.690
效果不佳，因此最终

00:55:52.700 --> 00:55:58.520
我们正在尝试通过编译来做什么

00:55:55.690 --> 00:56:00.890
具有关键Cloud Foundry的微服务

00:55:58.520 --> 00:56:05.200
随着春天的云，我们试图

00:56:00.890 --> 00:56:08.210
为自己创造是这个想法

00:56:05.200 --> 00:56:11.180
可操作的架构，以便我们

00:56:08.210 --> 00:56:13.310
可以有效地进行DevOps，以便我们可以

00:56:11.180 --> 00:56:16.730
有效地进行持续交付并

00:56:13.310 --> 00:56:19.040
最终使我们可以再次加速

00:56:16.730 --> 00:56:21.140
创新周期并能够

00:56:19.040 --> 00:56:24.260
缩短要缓存和交付的概念

00:56:21.140 --> 00:56:27.850
为我们的客户带来更多价值

00:56:24.260 --> 00:56:31.990
很快，这就是结束

00:56:27.850 --> 00:56:34.250
准备演讲，我想我们可以

00:56:31.990 --> 00:56:37.970
花一点时间我们

00:56:34.250 --> 00:56:40.460
已经离开并加入了质量检查

00:56:37.970 --> 00:56:44.510
谢谢，马特，你能听到我吗？ 

00:56:40.460 --> 00:56:45.650
彼得，你好极了，嗯，所以我们

00:56:44.510 --> 00:56:47.660
目前没有任何问题

00:56:45.650 --> 00:56:49.550
但我听到的其中一个

00:56:47.660 --> 00:56:52.160
是春天的第一场

00:56:49.550 --> 00:56:54.320
那些我听说你知道你和

00:56:52.160 --> 00:56:58.280
和其他人谈论

00:56:54.320 --> 00:57:00.760
这个东西实际上是你的露水

00:56:58.280 --> 00:57:04.610
确实有一个问题来了

00:57:00.760 --> 00:57:07.010
让我把它停一秒钟

00:57:04.610 --> 00:57:08.420
知道是什么，也许

00:57:07.010 --> 00:57:11.180
你不花太多时间

00:57:08.420 --> 00:57:12.500
的意思，但你知道分配的微系统

00:57:11.180 --> 00:57:14.090
微服务有点像宠儿

00:57:12.500 --> 00:57:16.100
现在的建筑很多人

00:57:14.090 --> 00:57:18.050
谈论它并不总是很多

00:57:16.100 --> 00:57:20.630
人们谈论陷阱

00:57:18.050 --> 00:57:21.500
他们谈论善良，但是你

00:57:20.630 --> 00:57:23.600
知道有哪些挑战

00:57:21.500 --> 00:57:26.420
你会遇到尝试

00:57:23.600 --> 00:57:28.130
采用这种架构

00:57:26.420 --> 00:57:32.570
您的组织结构

00:57:28.130 --> 00:57:35.150
前面的观点以及它对你的影响

00:57:32.570 --> 00:57:36.980
知道它需要解决这些问题

00:57:35.150 --> 00:57:39.920
或喜欢你所知道的

00:57:36.980 --> 00:57:44.450
那里的关系是的，所以我

00:57:39.920 --> 00:57:47.590
最终归结为

00:57:44.450 --> 00:57:52.990
如果您不擅长主要挑战

00:57:47.590 --> 00:57:56.030
已经淘汰了环境，并且

00:57:52.990 --> 00:57:57.270
因为真正的事情是我们

00:57:56.030 --> 00:57:59.310
想要快点

00:57:57.270 --> 00:58:01.440
跟一个人走下去很难走

00:57:59.310 --> 00:58:03.240
事情要走快要困难得多

00:58:01.440 --> 00:58:06.230
 10件事，甚至更困难

00:58:03.240 --> 00:58:09.810
快速处理一百件事

00:58:06.230 --> 00:58:12.300
最终为了能够做

00:58:09.810 --> 00:58:13.920
好，然后能够处理你

00:58:12.300 --> 00:58:16.440
了解所有这些分布式系统

00:58:13.920 --> 00:58:18.300
担忧正在显现，诸如此类的事情

00:58:16.440 --> 00:58:22.190
最终的一致性和类似的东西

00:58:18.300 --> 00:58:24.630
容错能力，您只需要

00:58:22.190 --> 00:58:28.800
处理您的许多担忧

00:58:24.630 --> 00:58:33.480
以前没有，你是否采用

00:58:28.800 --> 00:58:35.970
现成的有平台或没有平台

00:58:33.480 --> 00:58:38.940
帮助您解决自己的问题

00:58:35.970 --> 00:58:41.400
必须要有一个平台等等

00:58:38.940 --> 00:58:44.010
如果你看一下Netflix你知道什么

00:58:41.400 --> 00:58:48.570
他们决定你知道我们要去你身边

00:58:44.010 --> 00:58:51.090
知道使支持Amazon Web 

00:58:48.570 --> 00:58:53.970
以服务为中心的架构是核心

00:58:51.090 --> 00:58:57.119
我们的能力，我们要去找你

00:58:53.970 --> 00:59:00.840
知道真的，你知道寻找建立一个

00:58:57.119 --> 00:59:02.550
数十家公司内部的评论库

00:59:00.840 --> 00:59:05.070
或数百人专注

00:59:02.550 --> 00:59:06.950
使该工作顺利进行以及做什么

00:59:05.070 --> 00:59:11.970
他们去了他们建立了一个平台

00:59:06.950 --> 00:59:15.240
所以如果你能做到的话

00:59:11.970 --> 00:59:17.609
大多数公司的目标是

00:59:15.240 --> 00:59:20.250
从来没有真正去做那件事

00:59:17.609 --> 00:59:22.290
公司会说好，我不能

00:59:20.250 --> 00:59:24.359
采用这种架构太难了

00:59:22.290 --> 00:59:26.609
他们会说我必须去得到

00:59:24.359 --> 00:59:28.320
像Netflix建立的东西

00:59:26.609 --> 00:59:30.869
但有人要建造它

00:59:28.320 --> 00:59:32.640
对我来说，所以无论如何

00:59:30.869 --> 00:59:34.800
像云铸造这样的平台

00:59:32.640 --> 00:59:37.619
玩，因为我可以接受，我可以

00:59:34.800 --> 00:59:40.260
运行它，我可以拥有像你这样的公司

00:59:37.619 --> 00:59:42.000
知道，因为它将帮助我运行该程序， 

00:59:40.260 --> 00:59:43.950
了解如何起床并

00:59:42.000 --> 00:59:47.369
运行，以便我可以专注于

00:59:43.950 --> 00:59:49.350
构建应用程序，让Cloud Foundry帮助您

00:59:47.369 --> 00:59:51.480
知道专注于你知道得到那些

00:59:49.350 --> 00:59:53.100
建立和出租的环境

00:59:51.480 --> 00:59:56.550
春天的云帮助我处理所有这些

00:59:53.100 --> 00:59:59.850
分布式系统问题，那就是

00:59:56.550 --> 01:00:01.470
不是亚马逊真正处理的事情

00:59:59.850 --> 01:00:04.140
那是Netflix建立的

01:00:01.470 --> 01:00:07.260
你的观点是正确的正确的

01:00:04.140 --> 01:00:09.590
谢谢，是的，绝对很好

01:00:07.260 --> 01:00:11.840
酷Praveen Kumar问

01:00:09.590 --> 01:00:13.630
如何在此进行过滤

01:00:11.840 --> 01:00:16.040
你通常知道的建筑

01:00:13.630 --> 01:00:18.500
有所有筛选器和

01:00:16.040 --> 01:00:20.360
 where子句，但由于您无法加入

01:00:18.500 --> 01:00:22.940
微服务之间的数据位于

01:00:20.360 --> 01:00:25.070
您知道的数据库层

01:00:22.940 --> 01:00:28.730
必须在应用程序中执行此操作

01:00:25.070 --> 01:00:30.230
认为你知道那是真的吗

01:00:28.730 --> 01:00:32.150
您知道对性能有影响吗

01:00:30.230 --> 01:00:34.010
我认为这是一个很好的问题

01:00:32.150 --> 01:00:35.780
我想我听到过很多

01:00:34.010 --> 01:00:37.130
我要去的另一种

01:00:35.780 --> 01:00:39.170
提及，所以等待一种方法来提供

01:00:37.130 --> 01:00:41.030
问，但你知道你所看到的

01:00:39.170 --> 01:00:43.100
较早的不同的微服务

01:00:41.030 --> 01:00:45.560
拥有自己的数据对吧

01:00:43.100 --> 01:00:47.780
知道你如何你知道

01:00:45.560 --> 01:00:49.460
最终的一致性，如您所知

01:00:47.780 --> 01:00:51.140
处理了什么，这是什么

01:00:49.460 --> 01:00:54.800
对性能的影响是普遍的

01:00:51.140 --> 01:00:57.440
问题是的，这是一个巨大的问题

01:00:54.800 --> 01:00:59.030
您必须处理的问题

01:00:57.440 --> 01:01:01.250
最终又归结为

01:00:59.030 --> 01:01:02.660
你每次都知道的概念

01:01:01.250 --> 01:01:05.900
你得到一些你必须付钱的东西

01:01:02.660 --> 01:01:08.030
某物，所以你是你的什么

01:01:05.900 --> 01:01:10.400
你在做的是你在做很多事情

01:01:08.030 --> 01:01:13.010
我们融合在一起的能力

01:01:10.400 --> 01:01:14.900
让数据库播放器为

01:01:13.010 --> 01:01:15.950
我们，我们说的很好，你知道

01:01:14.900 --> 01:01:17.300
我们将在其他地方进行管理

01:01:15.950 --> 01:01:20.090
因为现在我们有所有这些不同

01:01:17.300 --> 01:01:21.710
有东西的数据服务

01:01:20.090 --> 01:01:24.050
在他们面前，就像我想要的一样

01:01:21.710 --> 01:01:25.940
我想问一个问题还是我想

01:01:24.050 --> 01:01:27.500
提供要转到的屏幕

01:01:25.940 --> 01:01:29.930
碰一堆这些不同的东西

01:01:27.500 --> 01:01:32.120
所以如果你这么天真地做

01:01:29.930 --> 01:01:33.740
说好吧，我有我的小东西

01:01:32.120 --> 01:01:35.810
移动应用，我将调用

01:01:33.740 --> 01:01:37.400
第一次服务并获取一些数据，我

01:01:35.810 --> 01:01:39.530
要打电话给第二个服务并获得

01:01:37.400 --> 01:01:41.120
一些数据，然后以某种方式刺入所有

01:01:39.530 --> 01:01:43.550
我想展示给我的东西

01:01:41.120 --> 01:01:46.030
用户，您要去，您要去

01:01:43.550 --> 01:01:50.540
你会死得很痛苦

01:01:46.030 --> 01:01:54.230
试图使之沮丧

01:01:50.540 --> 01:01:57.650
这样工作，以便API网关模式

01:01:54.230 --> 01:02:00.350
我在较早的幻灯片上谈到了

01:01:57.650 --> 01:02:04.790
我实际上可以把它放回去

01:02:00.350 --> 01:02:09.080
现在屏幕很快

01:02:04.790 --> 01:02:12.980
扮演很多角色，那又如何

01:02:09.080 --> 01:02:16.820
 API网关的工作是为了

01:02:12.980 --> 01:02:19.010
这些应用之一，所以你不知道这个

01:02:16.820 --> 01:02:22.040
不是这不是ESP这不是

01:02:19.010 --> 01:02:23.030
单片的东西，如果你平时

01:02:22.040 --> 01:02:25.430
看到并拥有

01:02:23.030 --> 01:02:27.590
特别是在Netflix上，这是

01:02:25.430 --> 01:02:32.000
每个不同设备的得分

01:02:27.590 --> 01:02:35.920
无论是iPhone还是您知道的

01:02:32.000 --> 01:02:39.050
 Xbox或机顶盒，无论是

01:02:35.920 --> 01:02:41.240
它需要设想消耗掉这些

01:02:39.050 --> 01:02:43.970
在服务中，所以他们会建立一个

01:02:41.240 --> 01:02:46.520
这些网关的工作是进行排序

01:02:43.970 --> 01:02:49.910
就像你知道我的小我自己

01:02:46.520 --> 01:02:52.460
该设备的小API及其功能

01:02:49.910 --> 01:02:54.950
该API的外观是类型

01:02:52.460 --> 01:02:57.680
我本应进行的查询

01:02:54.950 --> 01:03:01.010
很多情况下，整体系统等等

01:02:57.680 --> 01:03:04.640
关键在于该API的精髓

01:03:01.010 --> 01:03:07.490
网关等等，就像您知道的一样

01:03:04.640 --> 01:03:10.130
您将拥有一个数据库来决定如何

01:03:07.490 --> 01:03:12.710
最有效地加入所有这些

01:03:10.130 --> 01:03:14.540
将这个API网关

01:03:12.710 --> 01:03:17.120
您正在写的内容正在决定如何

01:03:14.540 --> 01:03:19.310
有效地加入所有结果

01:03:17.120 --> 01:03:21.950
这些微服务调用，所以

01:03:19.310 --> 01:03:24.680
能够做到这一点非常重要

01:03:21.950 --> 01:03:26.870
并行并行并行

01:03:24.680 --> 01:03:29.300
好，这就是您开始的地方

01:03:26.870 --> 01:03:32.630
看到这些的很多采用

01:03:29.300 --> 01:03:35.330
我们的反应模式

01:03:32.630 --> 01:03:37.850
开始越来越多地与

01:03:35.330 --> 01:03:39.800
像电抗器之类的东西，你知道新的

01:03:37.850 --> 01:03:42.440
Spring 集成的补充和

01:03:39.800 --> 01:03:46.400
您可以建立的其他东西

01:03:42.440 --> 01:03:48.830
您将看到其他工具套件

01:03:46.400 --> 01:03:51.200
这你知道从

01:03:48.830 --> 01:03:52.670
 Cloud Foundry空间可帮助构建

01:03:51.200 --> 01:03:55.340
这些网关，所以它的工作是

01:03:52.670 --> 01:03:57.980
本质上是做连接和

01:03:55.340 --> 01:04:01.370
的转化聚集

01:03:57.980 --> 01:04:05.180
内容并使其看起来像这些

01:04:01.370 --> 01:04:07.370
这些客户我们仍然很友善

01:04:05.180 --> 01:04:09.800
做事的老方法

01:04:07.370 --> 01:04:13.060
将所有事物解耦的好处

01:04:09.800 --> 01:04:16.730
背面让有意义是的是的

01:04:13.060 --> 01:04:18.110
很好，我喜欢，谢谢，只是

01:04:16.730 --> 01:04:20.510
快速旁注，我以为是

01:04:18.110 --> 01:04:22.220
演示非常有趣

01:04:20.510 --> 01:04:24.350
当您知道时，优雅地失败

01:04:22.220 --> 01:04:26.120
当您杀死商店服务时

01:04:24.350 --> 01:04:28.850
但是你知道你没有得到像

01:04:26.120 --> 01:04:31.250
讨厌，你知道500错误，你知道男孩

01:04:28.850 --> 01:04:33.080
是啊绿色你知道这只是

01:04:31.250 --> 01:04:34.670
那部分没有用，我只是

01:04:33.080 --> 01:04:38.600
以为真的很酷

01:04:34.670 --> 01:04:41.210
是的，Jeff James的下一个问题是

01:04:38.600 --> 01:04:43.430
问您如何预先验证

01:04:41.210 --> 01:04:45.710
整个微服务架构

01:04:43.430 --> 01:04:47.300
特别是服务的粒度

01:04:45.710 --> 01:04:48.500
现在，马特，我知道你谈到了这个

01:04:47.300 --> 01:04:51.260
较早时负有单一责任

01:04:48.500 --> 01:04:53.180
原理，你知道名词和

01:04:51.260 --> 01:04:55.430
动词，你知道其他一些

01:04:53.180 --> 01:04:56.450
的东西，但也许只是一点点

01:04:55.430 --> 01:04:57.710
之所以这样，是因为我们实际上得到了

01:04:56.450 --> 01:04:59.180
还有几个问题，所以我不想

01:04:57.710 --> 01:05:02.960
我们已经花了太多时间

01:04:59.180 --> 01:05:04.820
掩盖一点，那你如何

01:05:02.960 --> 01:05:08.600
验证您基本上是在做

01:05:04.820 --> 01:05:10.280
 TKE分解正确，是的，他

01:05:08.600 --> 01:05:12.260
说他说这是粒度

01:05:10.280 --> 01:05:16.370
我带给我的服务你知道

01:05:12.260 --> 01:05:19.430
 decomp是非常有挑战性的

01:05:16.370 --> 01:05:21.830
而且很难快速给出

01:05:19.430 --> 01:05:25.400
回答，但我可以告诉你的一件事是

01:05:21.830 --> 01:05:28.250
做什么不开始

01:05:25.400 --> 01:05:31.730
寻找你知道的行数

01:05:28.250 --> 01:05:35.210
您知道动词或

01:05:31.730 --> 01:05:37.340
服务电话或

01:05:35.210 --> 01:05:38.560
服务，因为最终您是什么

01:05:37.340 --> 01:05:42.140
最终要做的就是创造

01:05:38.560 --> 01:05:43.760
人工分解，你

01:05:42.140 --> 01:05:47.480
将要创建服务粒度

01:05:43.760 --> 01:05:48.470
那可能比什么更广泛

01:05:47.480 --> 01:05:50.030
你想要，但你会看到

01:05:48.470 --> 01:05:52.370
那里的文章说哦是的

01:05:50.030 --> 01:05:55.100
微服务只能是150行

01:05:52.370 --> 01:05:57.770
或更少的代码，就像

01:05:55.100 --> 01:06:00.230
谬论，就像我们会说你

01:05:57.770 --> 01:06:02.450
知道一个Java方法应该只有你一个

01:06:00.230 --> 01:06:05.510
知道30行，如果是31行

01:06:02.450 --> 01:06:09.400
太久了，你知道这么法理

01:06:05.510 --> 01:06:13.040
实际上是无效的

01:06:09.400 --> 01:06:20.720
归根结底是你知道

01:06:13.040 --> 01:06:24.020
考虑最小尺寸是多少

01:06:20.720 --> 01:06:26.960
实际上要去的能力

01:06:24.020 --> 01:06:30.260
为企业带来真正的商业价值

01:06:26.960 --> 01:06:33.470
架构和

01:06:30.260 --> 01:06:35.990
能力将达到150 

01:06:33.470 --> 01:06:37.790
一些功能的代码行

01:06:35.990 --> 01:06:42.020
可能是几千行

01:06:37.790 --> 01:06:44.690
编码它，您知道是的，您必须真正

01:06:42.020 --> 01:06:47.770
专注于你知道职责是什么

01:06:44.690 --> 01:06:51.070
以及它在架构中的工作是什么

01:06:47.770 --> 01:06:52.770
最终你知道我是否需要

01:06:51.070 --> 01:06:56.320
明天做点很不一样的事情

01:06:52.770 --> 01:06:58.869
你知道这是继续

01:06:56.320 --> 01:07:01.410
不断受到打击，如果是的话，我可能

01:06:58.869 --> 01:07:04.240
需要分解，所以它真的

01:07:01.410 --> 01:07:05.320
专注于变化，而你又是什么

01:07:04.240 --> 01:07:07.480
试图完成

01:07:05.320 --> 01:07:09.880
是的，这很喜， 

01:07:07.480 --> 01:07:11.470
回答我同意，我已经读完了

01:07:09.880 --> 01:07:13.210
喜欢以错误的方式看待

01:07:11.470 --> 01:07:14.290
因为就像你知道那样

01:07:13.210 --> 01:07:16.390
意思是你知道你投入了一个好

01:07:14.290 --> 01:07:18.340
像 spring boot 之类的框架

01:07:16.390 --> 01:07:20.380
这真的意味着是的，你知道吗

01:07:18.340 --> 01:07:22.330
他们很好，让我知道

01:07:20.380 --> 01:07:23.800
那么你知道那是非常重要的

01:07:22.330 --> 01:07:25.360
像学校一样依赖框架

01:07:23.800 --> 01:07:28.060
依赖，然后你知道你在看

01:07:25.360 --> 01:07:31.330
 Adrian Cockcroft对信息的采访

01:07:28.060 --> 01:07:33.130
提示你知道我想那是

01:07:31.330 --> 01:07:35.320
 30分钟，查尔斯·朗斯（Charles Long）谦虚

01:07:33.130 --> 01:07:37.030
和他一起颤抖，你知道

01:07:35.320 --> 01:07:39.280
当他谈论这个时，你知道

01:07:37.030 --> 01:07:41.950
这意味着他让社区变得非常清晰

01:07:39.280 --> 01:07:45.250
你科学中的那种艺术

01:07:41.950 --> 01:07:46.900
知道，这就是这里，这是

01:07:45.250 --> 01:07:48.700
不，你知道那里不像

01:07:46.900 --> 01:07:50.680
规范性的方式来解决这个问题，所以我

01:07:48.700 --> 01:07:53.680
难道这是一个很难回答的问题

01:07:50.680 --> 01:07:56.410
是的，谢谢你为此付出一点代价

01:07:53.680 --> 01:07:59.350
我感谢下一个问题

01:07:56.410 --> 01:08:00.580
出现，我将再次跳过山沟

01:07:59.350 --> 01:08:01.840
只是因为他已经有一个问题

01:08:00.580 --> 01:08:06.070
他问，只是确保我抓住了

01:08:01.840 --> 01:08:07.300
丹尼尔鼓掌的其他人问

01:08:06.070 --> 01:08:11.109
做一个微服务架构

01:08:07.300 --> 01:08:12.160
在近实时应用中执行

01:08:11.109 --> 01:08:16.960
因为你很有趣

01:08:12.160 --> 01:08:19.200
刚才提到反应堆是的，我们该怎么办

01:08:16.960 --> 01:08:26.529
近乎实时地做饭

01:08:19.200 --> 01:08:28.990
应用程序，你知道我不是

01:08:26.529 --> 01:08:34.450
真的有百分之一百确定我们是什么

01:08:28.990 --> 01:08:38.980
在这里谈论，因为当我

01:08:34.450 --> 01:08:40.509
想起我的主要目标

01:08:38.980 --> 01:08:44.410
像这样的东西是我

01:08:40.509 --> 01:08:46.930
想着你认识的人

01:08:44.410 --> 01:08:50.230
拿着电话，试图得到一个

01:08:46.930 --> 01:08:53.440
回答一些问题，你知道

01:08:50.230 --> 01:08:55.480
你知道当我们忍受什么

01:08:53.440 --> 01:08:58.299
当我们处理手机时

01:08:55.480 --> 01:09:00.520
你知道响应时间是否在任何地方

01:08:58.299 --> 01:09:01.670
你知道不止一二

01:09:00.520 --> 01:09:05.480
时代我们开始得到

01:09:01.670 --> 01:09:09.770
伸直，所以我想你

01:09:05.480 --> 01:09:12.049
再次知道它真的归结为

01:09:09.770 --> 01:09:15.980
您正在建立边缘服务是

01:09:12.049 --> 01:09:19.040
决定你的表现，所以他们

01:09:15.980 --> 01:09:21.410
不要结束，是的，为什么是为什么我

01:09:19.040 --> 01:09:24.319
怀疑我在他的问题后面闻到了什么

01:09:21.410 --> 01:09:27.049
这不一定是什么

01:09:24.319 --> 01:09:28.730
就像您知道Google的250毫秒

01:09:27.049 --> 01:09:31.670
或任何您知道的350毫秒或

01:09:28.730 --> 01:09:34.100
玻璃的低阻隔

01:09:31.670 --> 01:09:34.580
最终用户设备，但您知道更多

01:09:34.100 --> 01:09:36.290
要么

01:09:34.580 --> 01:09:38.210
机器机器通讯或更多

01:09:36.290 --> 01:09:38.839
就像物联网，你知道哦

01:09:38.210 --> 01:09:40.489
是的

01:09:38.839 --> 01:09:42.830
那就是我的那种

01:09:40.489 --> 01:09:44.120
闻到他不是很具体，但是

01:09:42.830 --> 01:09:46.759
 chanyeol（如果您仍在排队） 

01:09:44.120 --> 01:09:48.679
您想澄清一下，请随意

01:09:46.759 --> 01:09:51.890
那就是我闻到的

01:09:48.679 --> 01:09:54.469
一点我可能是错的，但是很好

01:09:51.890 --> 01:09:57.380
是的，那就是我的意思

01:09:54.469 --> 01:09:59.570
这也是一个很大的问题，因为您

01:09:57.380 --> 01:10:02.150
知道你是否考虑服务

01:09:59.570 --> 01:10:03.920
您必须开始的服务沟通

01:10:02.150 --> 01:10:08.510
考虑网络和网络

01:10:03.920 --> 01:10:10.790
距离和一些持久性有机污染物，你

01:10:08.510 --> 01:10:14.030
知道这只是另一个证明

01:10:10.790 --> 01:10:16.940
你知道一个非常强大的

01:10:14.030 --> 01:10:19.640
运作中的运作纪律

01:10:16.940 --> 01:10:21.500
与您的团队相吻合

01:10:19.640 --> 01:10:23.960
这实际上是在开发应用程序， 

01:10:21.500 --> 01:10:26.150
您知道的服务，以便我们了解

01:10:23.960 --> 01:10:28.219
你知道我们没有变坏

01:10:26.150 --> 01:10:30.830
关于我们如何安排的错误决定

01:10:28.219 --> 01:10:33.500
事情出来，然后最终你知道

01:10:30.830 --> 01:10:35.270
有一个像云一样的平台

01:10:33.500 --> 01:10:38.030
铸造将使很多

01:10:35.270 --> 01:10:40.400
这些决定对我和

01:10:38.030 --> 01:10:43.370
控制很多流量

01:10:40.400 --> 01:10:45.949
为我路由，以便我有

01:10:43.370 --> 01:10:48.860
对我做出的好决定

01:10:45.949 --> 01:10:51.949
代表，但是还有另一种

01:10:48.860 --> 01:10:54.440
你知道的更微妙的一点

01:10:51.949 --> 01:10:56.810
与我们实际决定

01:10:54.440 --> 01:10:59.929
拨打服务电话，以便您清楚地知道

01:10:56.810 --> 01:11:04.130
网络通话比

01:10:59.929 --> 01:11:06.170
方法调用，所以如果我所做的就是

01:11:04.130 --> 01:11:08.390
我对服务进行的方法调用

01:11:06.170 --> 01:11:10.429
那就是你知道正在运行

01:11:08.390 --> 01:11:12.020
我我将它们分开，然后全部

01:11:10.429 --> 01:11:14.810
网络调用中的那些方法调用

01:11:12.020 --> 01:11:15.560
它会很快掉下来

01:11:14.810 --> 01:11:17.630
所以有

01:11:15.560 --> 01:11:19.790
粗糙和精细之间的光谱

01:11:17.630 --> 01:11:21.770
细粒度的沟通，我们有点

01:11:19.790 --> 01:11:26.600
当我们做EJ B的时候走了那条路

01:11:21.770 --> 01:11:28.700
你知道像你15到20年前

01:11:26.600 --> 01:11:31.730
知道我们要开始变得非常

01:11:28.700 --> 01:11:33.020
粗屏电话，因为我们

01:11:31.730 --> 01:11:34.640
做所有这些遥远的事情，我们以为我们

01:11:33.020 --> 01:11:36.200
将拥有所有这些远程 bean 

01:11:34.640 --> 01:11:39.170
飘来飞去，我们将成为

01:11:36.200 --> 01:11:41.120
他们之间的沟通，我们

01:11:39.170 --> 01:11:42.620
你知道这有点很高吗

01:11:41.120 --> 01:11:46.310
我们正在做的抽象级别

01:11:42.620 --> 01:11:47.810
一样的东西，所以你知道这个主意

01:11:46.310 --> 01:11:50.030
我们将采取一系列方法

01:11:47.810 --> 01:11:51.550
休息一下，如果我逮捕

01:11:50.030 --> 01:11:53.660
界面，但生成一些网页

01:11:51.550 --> 01:11:55.220
它之间的服务间接口

01:11:53.660 --> 01:11:56.330
只是去上班实际上

01:11:55.220 --> 01:11:58.250
会变成高度

01:11:56.330 --> 01:12:00.440
沮丧，所以你真的需要思考

01:11:58.250 --> 01:12:02.720
关于你，我能得到多少工作

01:12:00.440 --> 01:12:04.760
在通话中完成，这将推动

01:12:02.720 --> 01:12:07.370
许多性能特征

01:12:04.760 --> 01:12:10.430
而且我认为我认为同步可以有所帮助

01:12:07.370 --> 01:12:12.290
现在有点容易

01:12:10.430 --> 01:12:13.280
像反应堆这样的东西，你知道我认为

01:12:12.290 --> 01:12:15.290
你知道还有其他第三方

01:12:13.280 --> 01:12:16.870
那里的东西，例如Rx Java和您

01:12:15.290 --> 01:12:19.850
知道在Scala之类的东西，但是

01:12:16.870 --> 01:12:22.420
但是，是的，你知道我认为有

01:12:19.850 --> 01:12:26.300
异步之间的良好自然契合

01:12:22.420 --> 01:12:28.790
处理，你知道和微

01:12:26.300 --> 01:12:31.730
我认为这些服务非常好

01:12:28.790 --> 01:12:35.900
实际上适合um的原因有很多

01:12:31.730 --> 01:12:37.070
但是好吧，嗯，对不起，我不是对你

01:12:35.900 --> 01:12:38.090
知道它的光泽只是

01:12:37.070 --> 01:12:40.130
我们得到了一大堆

01:12:38.090 --> 01:12:42.670
现在突然问先生

01:12:40.130 --> 01:12:45.680
我们已经下班了15分钟

01:12:42.670 --> 01:12:49.130
马特（Matt）一个想法只是为了处理一些

01:12:45.680 --> 01:12:51.860
这里的流可能是你知道我们采取

01:12:49.130 --> 01:12:53.960
问题，也许你知道

01:12:51.860 --> 01:12:55.430
我们和您一起工作之后

01:12:53.960 --> 01:12:57.500
网络研讨会并将一些答案发布到

01:12:55.430 --> 01:12:58.880
您的博客或类似的东西

01:12:57.500 --> 01:13:01.450
给了一堆他们进来，但

01:12:58.880 --> 01:13:04.940
无论如何，让我继续下一个

01:13:01.450 --> 01:13:06.560
让我们看看我们在附近谈论

01:13:04.940 --> 01:13:10.040
实时哦，是的

01:13:06.560 --> 01:13:12.140
亨利·王有任何指导方针或

01:13:10.040 --> 01:13:14.630
改造整体的建议

01:13:12.140 --> 01:13:17.540
微服务一半投入百万

01:13:14.630 --> 01:13:19.190
美元问题的解决方法哈里

01:13:17.540 --> 01:13:21.710
是的，那不是我所说的

01:13:19.190 --> 01:13:24.590
几乎每次我进入

01:13:21.710 --> 01:13:25.970
与您讨论白板讨论

01:13:24.590 --> 01:13:28.850
与我们合作的客户中

01:13:25.970 --> 01:13:33.560
是的，所以我会做的

01:13:28.850 --> 01:13:35.600
我可以做的第一件事

01:13:33.560 --> 01:13:38.930
介意你是在沙子上划一条线

01:13:35.600 --> 01:13:41.930
说好吧，我们做这个网的一切

01:13:38.930 --> 01:13:44.150
知道我们通常会进去

01:13:41.930 --> 01:13:45.920
并为此附加了新功能

01:13:44.150 --> 01:13:50.600
整体，我们将创建一个

01:13:45.920 --> 01:13:53.090
的微服务表示和

01:13:50.600 --> 01:13:55.160
为了做到这一点，我们将不得不

01:13:53.090 --> 01:13:57.980
整合两者，所以其中之一

01:13:55.160 --> 01:14:00.710
我看到的是你建立了这个想法

01:13:57.980 --> 01:14:03.800
的反腐败层

01:14:00.710 --> 01:14:05.660
保护该微服务

01:14:03.800 --> 01:14:08.720
太紧密地绑定到整体

01:14:05.660 --> 01:14:10.250
经纪人之间的沟通

01:14:08.720 --> 01:14:13.100
在两者之间，那可能仅仅是

01:14:10.250 --> 01:14:15.230
另一个服务API以及很多

01:14:13.100 --> 01:14:17.360
您可以使用各种网关的情况

01:14:15.230 --> 01:14:19.040
以及与之融为一体的事物

01:14:17.360 --> 01:14:21.740
效果很好，可以提供

01:14:19.040 --> 01:14:24.370
绝缘，所以你会擅长

01:14:21.740 --> 01:14:27.740
提供新功能

01:14:24.370 --> 01:14:29.450
微服务，一旦您

01:14:27.740 --> 01:14:31.430
然后把那种纪律放下

01:14:29.450 --> 01:14:33.500
在旅途中说可以，我该怎么办

01:14:31.430 --> 01:14:37.310
开始分解这件事，所以你

01:14:33.500 --> 01:14:38.870
需要另一个决策指南

01:14:37.310 --> 01:14:41.630
那就是你知道那是什么东西

01:14:38.870 --> 01:14:43.430
变化最大的原因是

01:14:41.630 --> 01:14:45.530
最终改变的事物

01:14:43.430 --> 01:14:48.230
最重要的是你想要的东西

01:14:45.530 --> 01:14:49.370
能够持续交付，因此

01:14:48.230 --> 01:14:52.130
这些就是正在发生的事情

01:14:49.370 --> 01:14:54.230
被依恋最大

01:14:52.130 --> 01:14:56.860
那块巨石，所以你开始说

01:14:54.230 --> 01:15:00.230
好吧，让我们找到有意义的模块

01:14:56.860 --> 01:15:02.660
真的需要改变一次

01:15:00.230 --> 01:15:04.460
把那些变成新钱

01:15:02.660 --> 01:15:07.100
服务并进一步发展

01:15:04.460 --> 01:15:09.590
反腐败层

01:15:07.100 --> 01:15:11.990
将这两件事整合在一起

01:15:09.590 --> 01:15:14.860
然后当你消费那些普通的

01:15:11.990 --> 01:15:17.210
您分拆的服务

01:15:14.860 --> 01:15:20.450
将它们重定向到微服务

01:15:17.210 --> 01:15:22.640
代表而不是你知道

01:15:20.450 --> 01:15:26.570
这样的整体表示

01:15:22.640 --> 01:15:28.580
你会做一段时间

01:15:26.570 --> 01:15:31.880
你要去你要达到

01:15:28.580 --> 01:15:35.120
两个可能的端点，一个端点是

01:15:31.880 --> 01:15:38.810
您分解了整个事物，并且

01:15:35.120 --> 01:15:42.239
您完成了，您实际上可以开始了

01:15:38.810 --> 01:15:44.749
去除那些反腐败层

01:15:42.239 --> 01:15:48.059
因为你不再需要它们了

01:15:44.749 --> 01:15:50.340
另一个可能的终点是

01:15:48.059 --> 01:15:52.320
实际上达到了你的目的

01:15:50.340 --> 01:15:56.159
不再会得到大量的

01:15:52.320 --> 01:15:58.170
进一步分解的价值

01:15:56.159 --> 01:16:01.530
因为您留下的服务

01:15:58.170 --> 01:16:05.880
后面实际上是他们没有改变

01:16:01.530 --> 01:16:08.429
他们已经完成了，而你

01:16:05.880 --> 01:16:11.999
只是真的没有感觉到需要所以你

01:16:08.429 --> 01:16:14.639
可能会留下一定的骨骼部分

01:16:11.999 --> 01:16:17.010
你知道的那块巨石的

01:16:14.639 --> 01:16:18.719
有一个API层，然后

01:16:17.010 --> 01:16:20.639
其他一切都在前进，或者

01:16:18.719 --> 01:16:22.110
也许您会找到一些服务

01:16:20.639 --> 01:16:24.989
只是不需要了，你可以

01:16:22.110 --> 01:16:26.730
只需删除即可，但这有点

01:16:24.989 --> 01:16:29.369
我经历的过程

01:16:26.730 --> 01:16:31.199
人，而且似乎运作良好

01:16:29.369 --> 01:16:33.420
实际上，如果您在Google周围搜索

01:16:31.199 --> 01:16:37.050
一点，也许我们甚至可以放

01:16:33.420 --> 01:16:39.809
在一些注释中列出一些链接

01:16:37.050 --> 01:16:41.820
在一些不同的案例研究中

01:16:39.809 --> 01:16:45.980
发布了通过

01:16:41.820 --> 01:16:45.980
他们的架构的确切过程

01:16:46.150 --> 01:16:51.760
马特，谢谢，我觉得我很冷

01:16:49.300 --> 01:16:53.920
如果我们能再做一两个，我们仍然

01:16:51.760 --> 01:16:56.890
仍然有将近50个人

01:16:53.920 --> 01:16:58.480
从一百开始

01:16:56.890 --> 01:17:02.020
这些是很好的问题，也许我们会

01:16:58.480 --> 01:17:04.060
再做一两个，然后

01:17:02.020 --> 01:17:05.560
我们称其为“会话”， 

01:17:04.060 --> 01:17:08.590
那么您知道我们会在

01:17:05.560 --> 01:17:10.210
上午10:00还可以，如果

01:17:08.590 --> 01:17:11.500
有些人你真的知道

01:17:10.210 --> 01:17:12.640
急于回答一些问题，并且

01:17:11.500 --> 01:17:14.050
您想再次加入我们，请感到

01:17:12.640 --> 01:17:17.140
快到集结了

01:17:14.050 --> 01:17:19.060
第二届会议的时间，所以让我们来看看

01:17:17.140 --> 01:17:22.870
希望这是更多的

01:17:19.060 --> 01:17:24.580
是/否问题Praveen Kumar再次询问

01:17:22.870 --> 01:17:26.440
他说是服务注册中心

01:17:24.580 --> 01:17:28.180
你在春天提到的发现

01:17:26.440 --> 01:17:34.960
云是

01:17:28.180 --> 01:17:36.670
网关模式有很多东西

01:17:34.960 --> 01:17:39.220
称为网关模式，所以我不是

01:17:36.670 --> 01:17:42.880
一定要确定你是哪一个

01:17:39.220 --> 01:17:46.420
指，但我不会描述

01:17:42.880 --> 01:17:50.380
作为一个我自己，你知道服务

01:17:46.420 --> 01:17:53.370
那个春天的云是尤里卡那种

01:17:50.380 --> 01:17:57.400
为我们包装实际上不是

01:17:53.370 --> 01:18:00.490
闸门之间的所有流量

01:17:57.400 --> 01:18:03.820
实例或服务就是全部

01:18:00.490 --> 01:18:08.050
您是否知道允许服务

01:18:03.820 --> 01:18:10.840
宣布自己，然后允许

01:18:08.050 --> 01:18:13.360
其他服务查询，看看有什么

01:18:10.840 --> 01:18:15.700
服务是可用的，但一旦我亲切

01:18:13.360 --> 01:18:17.970
获得这些信息，然后我

01:18:15.700 --> 01:18:23.590
实际上直接进行点对点

01:18:17.970 --> 01:18:26.050
与那些东西是的，然后

01:18:23.590 --> 01:18:29.350
当我们在这里总结

01:18:26.050 --> 01:18:31.240
您打开了路演页面

01:18:29.350 --> 01:18:34.750
您的桌面浏览器，所以有你们

01:18:31.240 --> 01:18:37.270
可以看一下，没问题， 

01:18:34.750 --> 01:18:38.470
我待会儿再说

01:18:37.270 --> 01:18:39.580
你这样做是让我下一个下午

01:18:38.470 --> 01:18:43.900
向您提问，因为我知道那是

01:18:39.580 --> 01:18:48.010
可能是相当无脑的嗯，让我们来看看

01:18:43.900 --> 01:18:51.990
要做很多很多好的问题

01:18:48.010 --> 01:18:54.760
在这里，谢谢大家，这很棒

01:18:51.990 --> 01:18:57.160
数据有什么后果

01:18:54.760 --> 01:18:58.400
有界之间的模型翻译

01:18:57.160 --> 01:19:04.130
比赛

01:18:58.400 --> 01:19:06.410
一个文本问GC好我想我

01:19:04.130 --> 01:19:09.280
认为那里有两个巨大的地方

01:19:06.410 --> 01:19:12.170
后果出局第一

01:19:09.280 --> 01:19:16.250
因此，这可能是一个整体

01:19:12.170 --> 01:19:17.380
演示本身就是您知道如何

01:19:16.250 --> 01:19:21.590
你开始思考吗

01:19:17.380 --> 01:19:24.730
所有这些的交易行为

01:19:21.590 --> 01:19:26.750
数据服务，因为在某些情况下

01:19:24.730 --> 01:19:28.190
你将不得不开始

01:19:26.750 --> 01:19:29.570
知道你是否真的想那样走

01:19:28.190 --> 01:19:31.520
你会在想

01:19:29.570 --> 01:19:36.230
分布式事务Vanessa整个

01:19:31.520 --> 01:19:37.580
满是咒语的大兔子

01:19:36.230 --> 01:19:39.350
甚至不会的情况

01:19:37.580 --> 01:19:41.510
可能，你真的将拥有

01:19:39.350 --> 01:19:43.790
开始适应你

01:19:41.510 --> 01:19:46.490
了解最终的架构

01:19:43.790 --> 01:19:48.710
一致性，你知道什么是

01:19:46.490 --> 01:19:50.720
暗示那里，然后他们

01:19:48.710 --> 01:19:53.510
他们的模式和诸如此类的东西

01:19:50.720 --> 01:19:55.880
事件源和命令查询

01:19:53.510 --> 01:19:57.560
职责隔离

01:19:55.880 --> 01:20:00.080
如果您需要的模式

01:19:57.560 --> 01:20:01.580
您可以开始降低复杂性

01:20:00.080 --> 01:20:03.440
帮助您应对其中一些问题的途径

01:20:01.580 --> 01:20:05.600
事情，但你最终会去

01:20:03.440 --> 01:20:07.250
面对某种程度的然后

01:20:05.600 --> 01:20:08.660
另一个后果是

01:20:07.250 --> 01:20:09.950
你会马上遇到

01:20:08.660 --> 01:20:12.980
大门还可以

01:20:09.950 --> 01:20:16.670
我想问一个类似的问题

01:20:12.980 --> 01:20:18.890
报告我想要的心态

01:20:16.670 --> 01:20:21.050
发现那是什么

01:20:18.890 --> 01:20:22.610
他们去过我的整体行为

01:20:21.050 --> 01:20:24.470
通常我会问你知道我

01:20:22.610 --> 01:20:26.780
会写一些任意的续集

01:20:24.470 --> 01:20:27.740
查询我的数据库和所有数据

01:20:26.780 --> 01:20:29.180
本来在那里

01:20:27.740 --> 01:20:31.220
加盟，并不同回到每个

01:20:29.180 --> 01:20:34.150
这个问题现在我不能那样做

01:20:31.220 --> 01:20:38.330
我对所有这些服务进行API调用

01:20:34.150 --> 01:20:41.770
希望不是这样，这是那里

01:20:38.330 --> 01:20:46.490
一些菜单模式，用于创建

01:20:41.770 --> 01:20:48.620
你知道Sidecar报告数据库

01:20:46.490 --> 01:20:50.570
结构，我说过做到这一点

01:20:48.620 --> 01:20:53.450
关于春天的一点点之一

01:20:50.570 --> 01:20:55.730
你的想法就是事物

01:20:53.450 --> 01:21:00.320
您的放空服务中发生的事情

01:20:55.730 --> 01:21:02.810
把那些东西放到消息总线上

01:21:00.320 --> 01:21:05.120
你可以把它们喂进东西

01:21:02.810 --> 01:21:07.130
例如，我将使用lamda建筑

01:21:05.120 --> 01:21:11.660
再次，我没有时间去

01:21:07.130 --> 01:21:12.219
但您可以查询lamda 

01:21:11.660 --> 01:21:15.370
兰花

01:21:12.219 --> 01:21:17.430
然后您会看到各种资源

01:21:15.370 --> 01:21:20.350
这个基本的想法

01:21:17.430 --> 01:21:23.530
曾经发生的一切

01:21:20.350 --> 01:21:26.320
一些长期档案或喜欢

01:21:23.530 --> 01:21:28.719
 HDFS示例，然后能够

01:21:26.320 --> 01:21:31.840
写你知道像MapReduce这样的东西

01:21:28.719 --> 01:21:34.660
工作来回答这些问题

01:21:31.840 --> 01:21:36.910
批处理形式，但也有

01:21:34.660 --> 01:21:39.670
流媒体层和我

01:21:36.910 --> 01:21:43.000
可能会使用spring XD做一些

01:21:39.670 --> 01:21:45.330
对数据进行实时分析

01:21:43.000 --> 01:21:49.030
变化，所以你知道他们是他们

01:21:45.330 --> 01:21:51.370
基本上你仍然需要付出高昂的代价

01:21:49.030 --> 01:21:52.900
平整您一直想要的所有东西

01:21:51.370 --> 01:21:55.000
去做，但是因为你改变了你的

01:21:52.900 --> 01:21:58.930
为那些架构解决方案

01:21:55.000 --> 01:22:00.550
问题看起来有些不同

01:21:58.930 --> 01:22:04.030
有些情况大不相同

01:22:00.550 --> 01:22:05.949
但是因为我们知道我们仍然要做

01:22:04.030 --> 01:22:08.110
他们我们正在解决问题，以便您

01:22:05.949 --> 01:22:09.510
分解那些数据是

01:22:08.110 --> 01:22:12.340
您将要遇到的主要事情

01:22:09.510 --> 01:22:16.270
不只是我们能做的

01:22:12.340 --> 01:22:19.420
去进行一个整体，你知道讨论

01:22:16.270 --> 01:22:22.210
再大概一两个小时

01:22:19.420 --> 01:22:24.310
绝对有，而且很有趣

01:22:22.210 --> 01:22:27.190
其他与会者之一Jeff James 

01:22:24.310 --> 01:22:30.310
曾特别询问过您是否认为您

01:22:27.190 --> 01:22:32.050
知道命令查询CQRS事件

01:22:30.310 --> 01:22:33.969
采购是有效的选择，因此

01:22:32.050 --> 01:22:36.310
那你我真的很高兴

01:22:33.969 --> 01:22:38.040
感动了，谢谢哦，是的， 

01:22:36.310 --> 01:22:40.060
如果需要，则需要这种复杂性

01:22:38.040 --> 01:22:42.070
绝对你知道听起来不错

01:22:40.060 --> 01:22:46.090
适用于微服务架构

01:22:42.070 --> 01:22:47.830
但还是没有，所以我认为我们

01:22:46.090 --> 01:22:49.600
几乎必须包装

01:22:47.830 --> 01:22:51.370
网络研讨会结束后将近30分钟

01:22:49.600 --> 01:22:53.230
应该在那很棒

01:22:51.370 --> 01:22:55.030
非常感谢您的问题，这是

01:22:53.230 --> 01:22:56.739
很棒，这些不像这些

01:22:55.030 --> 01:22:58.719
这些真的是很好的问题，所以

01:22:56.739 --> 01:23:00.820
谢谢，很明显，你们真的

01:22:58.719 --> 01:23:02.140
从事这个，他们真的

01:23:00.820 --> 01:23:04.210
积极思考我认为那是

01:23:02.140 --> 01:23:07.360
太棒了，我们很乐意为您提供更多帮助

01:23:04.210 --> 01:23:09.340
你知道如果你去几个

01:23:07.360 --> 01:23:12.010
马特在上面的网页

01:23:09.340 --> 01:23:15.010
在浏览器或Google上

01:23:12.010 --> 01:23:16.870
关键的云平台路演我们

01:23:15.010 --> 01:23:18.820
进行美国巡回演出

01:23:16.870 --> 01:23:21.460
不好意思我不只是曼联

01:23:18.820 --> 01:23:23.080
国家，是的，我是国际的

01:23:21.460 --> 01:23:24.820
以为是慕尼黑，有几个

01:23:23.080 --> 01:23:25.949
其他人，但是有一个哦，谢谢

01:23:24.820 --> 01:23:28.769
太好了

01:23:25.949 --> 01:23:31.739
是的，所以您可以看到一些

01:23:28.769 --> 01:23:33.749
即将到来的城市，你知道这个事件

01:23:31.739 --> 01:23:35.340
真的很专注和说话

01:23:33.749 --> 01:23:37.800
关于微服务架构

01:23:35.340 --> 01:23:40.139
与服务平台的关系如何

01:23:37.800 --> 01:23:42.840
与您的关系如何

01:23:40.139 --> 01:23:44.699
 Spring Cloud技术和DevOps以及

01:23:42.840 --> 01:23:47.010
你知道等等我们有很多事情

01:23:44.699 --> 01:23:48.239
马特今天感动了我

01:23:47.010 --> 01:23:49.739
鼓励您告诉朋友

01:23:48.239 --> 01:23:51.840
这些事件告诉您的同事

01:23:49.739 --> 01:23:53.550
这些事件，并为他们注册

01:23:51.840 --> 01:23:56.699
他们在一个方便的城市

01:23:53.550 --> 01:23:59.190
您免费，我们将继续

01:23:56.699 --> 01:24:01.889
运行这些，我想我这个词

01:23:59.190 --> 01:24:03.090
从我想到这个词

01:24:01.889 --> 01:24:04.320
来自管理层的是

01:24:03.090 --> 01:24:07.229
将继续运行这些

01:24:04.320 --> 01:24:08.610
所以即使你错过了这次

01:24:07.229 --> 01:24:11.519
周围，​​我认为我们将要做

01:24:08.610 --> 01:24:13.820
这次路演又阴云密布，继续

01:24:11.519 --> 01:24:17.309
留心你知道的

01:24:13.820 --> 01:24:18.959
在此页面上，您知道保持

01:24:17.309 --> 01:24:20.760
寻找更多的活动，显然

01:24:18.959 --> 01:24:23.400
您知道是否要订阅

01:24:20.760 --> 01:24:26.550
春季在Twitter上的Cloud Foundry 

01:24:23.400 --> 01:24:28.409
中央在推特上的春天你知道

01:24:26.550 --> 01:24:31.139
您将从我们这里听到有关这些信息的信息

01:24:28.409 --> 01:24:32.760
很好，但是很好，所以我就去

01:24:31.139 --> 01:24:34.860
总结一下，只提一下

01:24:32.760 --> 01:24:38.719
给认识的每个人

01:24:34.860 --> 01:24:42.719
这个演讲，它将被发布在

01:24:38.719 --> 01:24:45.059
春天大王/视频在未来的某个时候

01:24:42.719 --> 01:24:47.729
如果你想得到一个两周

01:24:45.059 --> 01:24:49.079
网络研讨会重播的通知

01:24:47.729 --> 01:24:52.260
可用，因此您可以与自己分享

01:24:49.079 --> 01:24:54.059
同事，这样的你知道

01:24:52.260 --> 01:24:55.530
订阅原子饲料，它带来了

01:24:54.059 --> 01:24:57.800
博客，您还将获得所有的好处

01:24:55.530 --> 01:25:00.209
工程团队的博客内容

01:24:57.800 --> 01:25:01.920
或者您可以知道是否只想要

01:25:00.209 --> 01:25:03.630
您出于某种原因知道的视频或您

01:25:01.920 --> 01:25:04.349
知道您可以订阅YouTube 

01:25:03.630 --> 01:25:06.510
渠道

01:25:04.349 --> 01:25:10.889
您在Spring il的视频重定向功能是什么

01:25:06.510 --> 01:25:15.179
您也将于11月4日去UM，对不起

01:25:10.889 --> 01:25:18.030
对不起，10月23日晚些时候道歉

01:25:15.179 --> 01:25:20.039
这个星期正好是这个星期四

01:25:18.030 --> 01:25:23.369
与Vaadin团队一起回来

01:25:20.039 --> 01:25:24.059
这是一个基于GWT的UI框架， 

01:25:23.369 --> 01:25:27.119
他们将要谈论

01:25:24.059 --> 01:25:29.610
建立你眼中的战利品哈哈

01:25:27.119 --> 01:25:32.039
 spring boot 和Vaadin再次这是一个

01:25:29.610 --> 01:25:33.630
免费活动可以注册，如果

01:25:32.039 --> 01:25:35.189
您可以访问我们的博客或访问任何

01:25:33.630 --> 01:25:36.809
春季最新消息，来自

01:25:35.189 --> 01:25:39.740
乔希，你会发现链接到

01:25:36.809 --> 01:25:43.280
注册页面并继续我们的我的

01:25:39.740 --> 01:25:45.110
她在星期二的服务网络研讨会系列

01:25:43.280 --> 01:25:47.390
好医生戴夫11月4日

01:25:45.110 --> 01:25:50.420
父亲会来和我们谈谈

01:25:47.390 --> 01:25:53.030
 Spring微服务的安全性

01:25:50.420 --> 01:25:55.220
哦-没有看到任何安全提示

01:25:53.030 --> 01:25:57.110
今天你们的问题，但是你呢

01:25:55.220 --> 01:25:58.070
当然知道某些东西

01:25:57.110 --> 01:25:59.600
你知道我们要去做的事

01:25:58.070 --> 01:26:02.720
想要看它，您会不满意

01:25:59.600 --> 01:26:06.440
探索阶段，进入您所知道的

01:26:02.720 --> 01:26:10.000
测试并最终生产um so 

01:26:06.440 --> 01:26:12.770
那是11月4日星期二， 

01:26:10.000 --> 01:26:14.900
是的，我想如果你有兴趣的话

01:26:12.770 --> 01:26:17.180
在春天的云中，才意识到我们

01:26:14.900 --> 01:26:18.710
尚未在上启用直接HTTP下载

01:26:17.180 --> 01:26:20.480
我们的春季二进制网站

01:26:18.710 --> 01:26:21.650
通常我们希望人们得到他们

01:26:20.480 --> 01:26:23.120
来自Maven和Gradle，因为它只是

01:26:21.650 --> 01:26:24.620
如果您是一个更好的体验

01:26:23.120 --> 01:26:26.150
真的很绝望，你需要高清电视

01:26:24.620 --> 01:26:29.120
下载您可以从我们的网站上获取它们

01:26:26.150 --> 01:26:31.910
回购spring dot IO上的工件服务器

01:26:29.120 --> 01:26:33.440
再次，这个回购点反弹了IO和

01:26:31.910 --> 01:26:35.360
如果您用谷歌搜索春季

01:26:33.440 --> 01:26:38.200
它会告诉你如何

01:26:35.360 --> 01:26:41.060
你知道如何处理那个嗯

01:26:38.200 --> 01:26:42.800
太好了，最重要的是请你

01:26:41.060 --> 01:26:44.420
知道我们春天会满口

01:26:42.800 --> 01:26:46.970
云和微服务，显然

01:26:44.420 --> 01:26:48.470
 Cloud Foundry是您知道的Cloud 

01:26:46.970 --> 01:26:50.660
铸造团队肯定着火了

01:26:48.470 --> 01:26:53.240
在以下位置给我们您对Twitter的反馈

01:26:50.660 --> 01:26:54.740
 Cloud Foundry和Spring Central和

01:26:53.240 --> 01:26:57.560
真的非常感谢你

01:26:54.740 --> 01:27:00.110
问题和今天加入我们

01:26:57.560 --> 01:27:01.670
认为我们几乎得到了所有人的认可

01:27:00.110 --> 01:27:03.680
每个人都有每个人的问题，所以我

01:27:01.670 --> 01:27:05.000
期待在网络研讨会上看到

01:27:03.680 --> 01:27:06.590
再次真实，我们将这样做

01:27:05.000 --> 01:27:08.120
如果您想尝试上午10:00 

01:27:06.590 --> 01:27:10.600
我们没有回答您的问题， 

01:27:08.120 --> 01:27:13.460
你想偷偷溜回来，我会

01:27:10.600 --> 01:27:16.520
记住你的名字

01:27:13.460 --> 01:27:18.860
想说总结我想你

01:27:16.520 --> 01:27:21.140
覆盖得很好我很兴奋

01:27:18.860 --> 01:27:24.200
为此有尽可能多的人

01:27:21.140 --> 01:27:27.470
长两人谈建筑问题

01:27:24.200 --> 01:27:30.590
所以谢谢大家一起出去玩

01:27:27.470 --> 01:27:34.010
和你在一起，我真的很希望

01:27:30.590 --> 01:27:35.600
对你来说很有价值

01:27:34.010 --> 01:27:38.360
太好了，我肯定学到了一些东西

01:27:35.600 --> 01:27:39.740
什么也听这个，你知道你

01:27:38.360 --> 01:27:42.320
知道我在这个东西上花了很多时间

01:27:39.740 --> 01:27:43.870
好，谢谢大家再见

01:27:42.320 --> 01:27:46.870
快点照顾

01:27:43.870 --> 01:27:46.870
谢谢

01:27:49.290 --> 01:27:51.350
您

