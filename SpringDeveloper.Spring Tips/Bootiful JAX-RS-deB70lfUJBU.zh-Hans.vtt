WEBVTT
Kind: captions
Language: zh-Hans

00:00:25.680 --> 00:00:30.370
嗨， Spring 粉丝们欢迎来到另一个

00:00:28.330 --> 00:00:32.740
 Spring 技巧的分期付款和这个外观

00:00:30.370 --> 00:00:36.910
我们来看看泽西岛

00:00:32.740 --> 00:00:38.280
某种jsr 311和jsr 339参考

00:00:36.910 --> 00:00:40.900
 jax-rs的实现

00:00:38.280 --> 00:00:42.370
规范，特别是它

00:00:40.900 --> 00:00:44.230
与 spring boot 集成到哦

00:00:42.370 --> 00:00:45.880
对的，当然还有 spring boot 

00:00:44.230 --> 00:00:48.750
哦，还很早，所以我们

00:00:45.880 --> 00:00:51.040
要获取快照，这实际上是

00:00:48.750 --> 00:00:53.559
这将让你知道所有这些

00:00:51.040 --> 00:00:55.840
功能将进入 spring boot - 

00:00:53.559 --> 00:00:58.870
我知道尚未发布的M4 

00:00:55.840 --> 00:01:00.130
而且我们只是要看看它如何

00:00:58.870 --> 00:01:02.350
具有以下功能

00:01:00.130 --> 00:01:03.040
它是如何发展的，所以

00:01:02.350 --> 00:01:04.449
这样我们就可以建立一个新的

00:01:03.040 --> 00:01:07.380
应用程序，我们将其称为

00:01:04.449 --> 00:01:09.310
好的客户服务就是我们的

00:01:07.380 --> 00:01:10.450
我们将使用Spring 的应用程序

00:01:09.310 --> 00:01:13.360
支持建筑，我们将使用

00:01:10.450 --> 00:01:15.670
而不是使用Lombok编译

00:01:13.360 --> 00:01:17.410
编译时注释处理器将

00:01:15.670 --> 00:01:19.420
现在使用球衣本身值得

00:01:17.410 --> 00:01:20.950
提到我们还有其他

00:01:19.420 --> 00:01:24.479
 jax-rs的另一种实现是

00:01:20.950 --> 00:01:29.049
在这里支持，所以cxf让我们看看

00:01:24.479 --> 00:01:32.530
 spring boot 适当的Spring 1.47或1.57 

00:01:29.049 --> 00:01:36.490
您会看到cxf不错，但这值得

00:01:32.530 --> 00:01:39.370
指出我们知道您会继续提供支持

00:01:36.490 --> 00:01:40.690
我们整合一切，杰克开始

00:01:39.370 --> 00:01:41.860
实现等等

00:01:40.690 --> 00:01:43.450
版本有两个两个

00:01:41.860 --> 00:01:46.060
现在至少有两个版本， 

00:01:43.450 --> 00:01:47.740
 Spring 初期会做2.0 

00:01:46.060 --> 00:01:51.130
有一个泽西岛，所以当您使用

00:01:47.740 --> 00:01:54.070
泽西岛，我们将在以下情况下使用JPA 

00:01:51.130 --> 00:01:55.780
使用h2，我将使用执行器

00:01:54.070 --> 00:01:57.100
正确执行器我们的一组端点

00:01:55.780 --> 00:01:58.840
有关的服务信息

00:01:57.100 --> 00:02:00.400
服务于目标的应用

00:01:58.840 --> 00:02:03.310
可观察性，以便您可以理解

00:02:00.400 --> 00:02:04.689
您的系统在做什么，我

00:02:03.310 --> 00:02:05.710
认为我们就足够了，所以让我们

00:02:04.689 --> 00:02:09.519
继续前进并生成我会的

00:02:05.710 --> 00:02:11.140
给我们一个新项目，我们将打开

00:02:09.519 --> 00:02:12.670
在我们的IDE中，我再次有一个

00:02:11.140 --> 00:02:15.630
这些现在方便的小脚本

00:02:12.670 --> 00:02:19.420
几天我给你写了个小剧本

00:02:15.630 --> 00:02:22.590
客户服务，这将打开

00:02:19.420 --> 00:02:22.590
对我们的申请

00:02:24.140 --> 00:02:27.140
好的

00:02:32.250 --> 00:02:36.720
好的，所以我们现在有了我们的客户

00:02:34.440 --> 00:02:38.910
服务应用程序，我们将构建一个

00:02:36.720 --> 00:02:42.270
资源，所以我要去这里

00:02:38.910 --> 00:02:45.800
将创建一个jax-rs rest端点，因此

00:02:42.270 --> 00:02:48.930
我们会说插入一个新客户

00:02:45.800 --> 00:02:51.590
资源，这是公平的假设

00:02:48.930 --> 00:02:54.000
该客户资源将用于

00:02:51.590 --> 00:02:56.220
管理类型客户的实体，因此

00:02:54.000 --> 00:03:00.060
我们还将创建一个新客户

00:02:56.220 --> 00:03:02.760
我们的客户将成为JPA实体

00:03:00.060 --> 00:03:05.430
我们会给它一个私人的长ID， 

00:03:02.760 --> 00:03:10.380
私有字符串名称和ID 

00:03:05.430 --> 00:03:11.820
说添加Jimmy值的ID，我们需要

00:03:10.380 --> 00:03:14.550
一些吸气剂和二传手等等

00:03:11.820 --> 00:03:16.410
画架和降压生成所有

00:03:14.550 --> 00:03:18.840
确保好好看一下这项工作，现在

00:03:16.410 --> 00:03:20.970
我们拥有我们需要的实体

00:03:18.840 --> 00:03:24.990
正确的存储库，以便创建一个

00:03:20.970 --> 00:03:26.340
客户资料库，因此我们没有

00:03:24.990 --> 00:03:28.140
需要摆弄低水平的数据

00:03:26.340 --> 00:03:29.820
只是功能的管理权

00:03:28.140 --> 00:03:32.190
 Spring数据和存储库，但是

00:03:29.820 --> 00:03:34.560
我们现在有了这个，我们有一个界面

00:03:32.190 --> 00:03:36.390
让我们看看现在有一个界面

00:03:34.560 --> 00:03:38.910
可以回到我们的资源，我们

00:03:36.390 --> 00:03:41.310
会构建一个什么是

00:03:38.910 --> 00:03:43.410
它会产生你知道的

00:03:41.310 --> 00:03:44.780
应用程序JSON是一个剩余端点

00:03:43.410 --> 00:03:47.640
使用jax-rs，所以我要使用

00:03:44.780 --> 00:03:49.410
应用程序JSON，我们将映射

00:03:47.640 --> 00:03:52.050
整个事情，整个班级

00:03:49.410 --> 00:03:54.330
面向斜线客户，因此所有人

00:03:52.050 --> 00:03:57.120
请求将相对于那个

00:03:54.330 --> 00:03:59.250
 URI就是我们要走的那条路

00:03:57.120 --> 00:04:01.470
在这里有一个端点将返回一个

00:03:59.250 --> 00:04:04.620
单一客户，让我们尝试

00:04:01.470 --> 00:04:07.680
单一客户购买ID对，所以在这里我们

00:04:04.620 --> 00:04:09.450
身份证很长，我要给它一个

00:04:07.680 --> 00:04:14.510
映射，因此它将映射到HTTP GET 

00:04:09.450 --> 00:04:18.000
请求，我们将给它一条路径

00:04:14.510 --> 00:04:21.470
参数ID好的，现在需要

00:04:18.000 --> 00:04:23.550
网址中的每个路径都可以，并且

00:04:21.470 --> 00:04:25.470
当然要做到这一点，我们将需要

00:04:23.550 --> 00:04:28.979
我们的资料库我们的客户资料库

00:04:25.470 --> 00:04:32.100
所以我们将其注入

00:04:28.979 --> 00:04:35.610
构造函数，我们将回馈客户

00:04:32.100 --> 00:04:37.020
当然现在可以通过ID查找存储库

00:04:35.610 --> 00:04:39.000
这将引发异常

00:04:37.020 --> 00:04:41.550
一个可选的，我们回来，所以它可以

00:04:39.000 --> 00:04:43.500
抛出一个异常，所以我们要说

00:04:41.550 --> 00:04:44.759
除非我们需要

00:04:43.500 --> 00:04:46.500
为此做些事情，所以我们需要

00:04:44.759 --> 00:04:51.120
抛出一个我们可以说不能的异常

00:04:46.500 --> 00:04:52.319
找到ID好吧，这很简单

00:04:51.120 --> 00:04:54.090
例子很简单

00:04:52.319 --> 00:04:55.530
所以现在这是一个端点，我也可以

00:04:54.090 --> 00:04:58.130
想像一下要有另一个端点

00:04:55.530 --> 00:05:02.610
这里所有公开的记录

00:04:58.130 --> 00:05:05.520
客户和客户的集合

00:05:02.610 --> 00:05:09.720
我们将退回此客户帖子

00:05:05.520 --> 00:05:11.069
正确找到所有好了，现在我们有了

00:05:09.720 --> 00:05:13.050
简单的jax-rs 

00:05:11.069 --> 00:05:14.190
终结点，但这不是你自己

00:05:13.050 --> 00:05:16.289
我们需要足够的权利

00:05:14.190 --> 00:05:17.849
配置一点点只是为了

00:05:16.289 --> 00:05:18.960
使这个作品在 Spring 的世界中变得如此

00:05:17.849 --> 00:05:20.789
我要回到我们的配置

00:05:18.960 --> 00:05:22.949
在这里我们的应用程序，我们将只是

00:05:20.789 --> 00:05:25.830
创建一个名为的新配置类

00:05:22.949 --> 00:05:27.030
球衣配置以及我们

00:05:25.830 --> 00:05:30.120
会放任何我们需要的东西

00:05:27.030 --> 00:05:32.280
与让Jersey正确运作有关

00:05:30.120 --> 00:05:33.659
在 spring boot 的背景下，所以第一个

00:05:32.280 --> 00:05:35.580
你之前绝对需要的东西

00:05:33.659 --> 00:05:37.650
你可以做的其他事情就是配置

00:05:35.580 --> 00:05:41.009
对象资源配置和

00:05:37.650 --> 00:05:42.930
资源配置是一种您知道的

00:05:41.009 --> 00:05:45.539
 API的核心部分

00:05:42.930 --> 00:05:47.550
实际上，所以您返回其中之一， 

00:05:45.539 --> 00:05:49.199
这实际上激活了斯普林伍德

00:05:47.550 --> 00:05:50.729
自动配置，但这也是

00:05:49.199 --> 00:05:53.159
我们需要注册组件，所以我们

00:05:50.729 --> 00:05:55.110
需要教泽西关于光束

00:05:53.159 --> 00:05:56.190
将得到管理，我们可以做

00:05:55.110 --> 00:06:02.400
我们可以通过几种方式告诉它

00:05:56.190 --> 00:06:05.310
只是扫描-扫描某个

00:06:02.400 --> 00:06:06.810
包尝试设置一组我们的包

00:06:05.310 --> 00:06:08.370
可以寻找我们投入的某些课程

00:06:06.810 --> 00:06:09.719
一个包装等，我们可以做很多

00:06:08.370 --> 00:06:11.400
这里有不同的事情，但我们只是

00:06:09.719 --> 00:06:13.169
要动态注册 bean 我们

00:06:11.400 --> 00:06:14.520
要用 Spring 退出 Bean type ，然后

00:06:13.169 --> 00:06:17.190
将他们的参考传递给他们

00:06:14.520 --> 00:06:18.240
 bean ，所以我们第一件事

00:06:17.190 --> 00:06:21.030
我们需要做的就是告诉它在哪里

00:06:18.240 --> 00:06:24.419
寻找我们的客户资源，因此成为

00:06:21.030 --> 00:06:26.300
客户资源，这将

00:06:24.419 --> 00:06:29.330
当然取决于客户资料库

00:06:26.300 --> 00:06:33.419
我们会说一个新的客户资源

00:06:29.330 --> 00:06:37.460
现在通过存储库

00:06:33.419 --> 00:06:41.729
将其注入此处的端点

00:06:37.460 --> 00:06:43.800
你会说注册CR非常好

00:06:41.729 --> 00:06:45.240
我们的第一个简单终点是

00:06:43.800 --> 00:06:48.630
只是启动应用程序并查看

00:06:45.240 --> 00:06:51.689
我们现在得到的是我将使用外壳

00:06:48.630 --> 00:06:58.099
这里卷曲

00:06:51.689 --> 00:06:58.099
对不起，让我们做一个HTTP 

00:06:59.749 --> 00:07:05.189
 localhost ：8080正斜杠客户

00:07:02.819 --> 00:07:07.889
好了，这是我们的第一个终点

00:07:05.189 --> 00:07:09.089
自然地我没有数据

00:07:07.889 --> 00:07:10.469
插入一些数据，让我们创建一个

00:07:09.089 --> 00:07:12.179
你现在知道所以他们有东西

00:07:10.469 --> 00:07:15.379
玩的东西我们会

00:07:12.179 --> 00:07:17.429
创建一些样本数据，这样数据和

00:07:15.379 --> 00:07:19.019
我们将有一个应用程序运行程序

00:07:17.429 --> 00:07:21.269
这是一个回调接口和 Spring 

00:07:19.019 --> 00:07:24.300
自然启动，这是一个理想的地方

00:07:21.269 --> 00:07:26.519
放置任何类型的样本数据或任何

00:07:24.300 --> 00:07:27.689
后台初始化的一种

00:07:26.519 --> 00:07:29.909
它发生在外部的任何事情

00:07:27.689 --> 00:07:31.529
传统的请求响应生命周期

00:07:29.909 --> 00:07:39.089
一个应用程序，所以我们要说

00:07:31.529 --> 00:07:42.839
每个xcr的abc点的流点

00:07:39.089 --> 00:07:45.059
点保存新客户通过ol 

00:07:42.839 --> 00:07:48.360
传递x的ID作为名称， 

00:07:45.059 --> 00:07:49.649
这当然很适合lambda 

00:07:48.360 --> 00:07:52.229
所以我们只用一点点

00:07:49.649 --> 00:07:53.729
更好，我们可以清理一点

00:07:52.229 --> 00:07:55.979
有点好，我们在那里，所以我们有

00:07:53.729 --> 00:07:57.239
样本数据，如果我们要运行

00:07:55.979 --> 00:08:00.050
再次申请，这就是我们

00:07:57.239 --> 00:08:06.239
我们现在可以击中终点

00:08:00.050 --> 00:08:07.860
表演，然后再试一次

00:08:06.239 --> 00:08:08.969
我们的记录很少，所以所有的

00:08:07.860 --> 00:08:10.289
开箱即用，我们已经

00:08:08.969 --> 00:08:12.329
已经有工作的千斤顶源

00:08:10.289 --> 00:08:14.699
应用程序，我们可以在这里看到结果

00:08:12.329 --> 00:08:16.409
正如预期的那样，现在一切正常

00:08:14.699 --> 00:08:17.939
谈论如果我们去那会发生什么

00:08:16.409 --> 00:08:20.759
第二个端点

00:08:17.939 --> 00:08:23.039
通过ID终结点，所以终结点一可以

00:08:20.759 --> 00:08:25.499
好吧，我们通过ID获得了单条记录

00:08:23.039 --> 00:08:26.579
现在如果我去端点6会发生什么

00:08:25.499 --> 00:08:28.829
当然，我只有三个

00:08:26.579 --> 00:08:31.069
记录，只有它会失败

00:08:28.829 --> 00:08:33.479
正确，它将抛出大量的Java 

00:08:31.069 --> 00:08:35.189
有例外，所以我们需要回应

00:08:33.479 --> 00:08:36.629
我们需要关心的事实是

00:08:35.189 --> 00:08:38.219
刚刚发生的事，然后发回

00:08:36.629 --> 00:08:41.759
大量胖Java堆栈跟踪到客户端

00:08:38.219 --> 00:08:44.279
虽然方便并不完全是一件好事

00:08:41.759 --> 00:08:46.350
形式，所以我们应该利用一些

00:08:44.279 --> 00:08:47.970
一种通用机制，以便我们可以

00:08:46.350 --> 00:08:50.009
返回响应弹出或返回响应

00:08:47.970 --> 00:08:51.269
给客户，并记住我们大多数

00:08:50.009 --> 00:08:53.309
客户不会像我们一样成为人类

00:08:51.269 --> 00:08:55.259
现在您知道点击了API 

00:08:53.309 --> 00:08:56.370
通过外壳但通过其他API 

00:08:55.259 --> 00:08:58.170
客户，所以我们不想

00:08:56.370 --> 00:09:00.679
可预测的东西，这是一个很好的

00:08:58.170 --> 00:09:03.029
该机制对于

00:09:00.679 --> 00:09:04.559
检查中的异常映射器机制

00:09:03.029 --> 00:09:08.189
好吧，我要说通用的

00:09:04.559 --> 00:09:10.380
异常映射器实现异常

00:09:08.189 --> 00:09:12.300
映射器，我们将映射一个合法的

00:09:10.380 --> 00:09:14.220
论据例外权，所以当我们

00:09:12.300 --> 00:09:17.480
当我们抛出异常时

00:09:14.220 --> 00:09:20.279
我们资源中的任何地方

00:09:17.480 --> 00:09:23.399
通过返回一个响应来倾向于它

00:09:20.279 --> 00:09:25.589
特定类型的响应响应

00:09:23.399 --> 00:09:26.939
服务器错误，我要拥有实体

00:09:25.589 --> 00:09:28.920
在这种情况下是身体

00:09:26.939 --> 00:09:30.720
异常字符串，然后我们将

00:09:28.920 --> 00:09:32.730
建立并回应

00:09:30.720 --> 00:09:35.899
那我们就可以告诉你

00:09:32.730 --> 00:09:37.850
关于这一点，注入

00:09:35.899 --> 00:09:40.529
通用异常映射器

00:09:37.850 --> 00:09:43.220
进入我们的光束配置

00:09:40.529 --> 00:09:43.220
让我们再做一次

00:09:44.029 --> 00:09:52.529
 eeehm资源配置注册异常

00:09:49.589 --> 00:10:00.439
映射器在这里我们还好，所以现在让我们尝试

00:09:52.529 --> 00:10:00.439
再一次去表演

00:10:03.630 --> 00:10:08.980
好吧，让我们尝试看看

00:10:06.940 --> 00:10:10.839
找不到第六，所以我们做了一个

00:10:08.980 --> 00:10:13.000
请求，但没有得到

00:10:10.839 --> 00:10:14.320
大脂肪异常，我们得到了控制

00:10:13.000 --> 00:10:16.300
超过产量，我们当然是

00:10:14.320 --> 00:10:18.009
能够返回hd500 

00:10:16.300 --> 00:10:19.630
我们可以做一些更有趣的事情

00:10:18.009 --> 00:10:21.130
你知道我们可以说我们是

00:10:19.630 --> 00:10:22.630
将返回V和D错误，这是一个

00:10:21.130 --> 00:10:26.050
很受欢迎

00:10:22.630 --> 00:10:26.949
我将担任非标准代表

00:10:26.050 --> 00:10:28.149
错误很多

00:10:26.949 --> 00:10:30.130
你可以选择任何东西

00:10:28.149 --> 00:10:33.040
您编码的格式适合您

00:10:30.130 --> 00:10:34.660
但出于我们的目的，我们有一些东西

00:10:33.040 --> 00:10:35.980
所以我们知道我们将如何做对

00:10:34.660 --> 00:10:37.870
将创建一个异常映射器

00:10:35.980 --> 00:10:39.779
好了，那是非常有用的事情

00:10:37.870 --> 00:10:42.190
做其他的事情来缠绕它，我们有一个

00:10:39.779 --> 00:10:43.540
 Web应用程序，我们为您构建了REST API 

00:10:42.190 --> 00:10:45.639
可以看到REST API还不是全部

00:10:43.540 --> 00:10:47.350
确实，这些都不是全部

00:10:45.639 --> 00:10:49.690
当您搬到

00:10:47.350 --> 00:10:51.730
您可能知道的微服务

00:10:49.690 --> 00:10:54.490
看到j​​ax-rs或垃圾邮件或其他任何内容

00:10:51.730 --> 00:10:56.769
否则可观察性我在乎

00:10:54.490 --> 00:10:57.370
该应用程序的行为，你

00:10:56.769 --> 00:10:58.660
知道哪一个都没关系

00:10:57.370 --> 00:11:02.139
你谈论一件事的组织是

00:10:58.660 --> 00:11:03.610
出奇的一致是

00:11:02.139 --> 00:11:05.800
他们尽快采取的方法

00:11:03.610 --> 00:11:07.180
传呼机或更确切地说是传呼机

00:11:05.800 --> 00:11:09.010
正确的事情一定要发生

00:11:07.180 --> 00:11:10.899
被唤醒并唤醒计算机

00:11:09.010 --> 00:11:12.370
并必须做出回应， 

00:11:10.899 --> 00:11:14.860
我们可以做的所有信息

00:11:12.370 --> 00:11:16.540
我们可以提供服务的信息

00:11:14.860 --> 00:11:18.490
支持那种努力

00:11:16.540 --> 00:11:21.220
修复过程很有价值，因此

00:11:18.490 --> 00:11:23.529
 spring boot 你知道多久了

00:11:21.220 --> 00:11:25.029
执行器执行器是非常非常

00:11:23.529 --> 00:11:27.010
方便的一组端点

00:11:25.029 --> 00:11:29.079
首先他们在那里暴露得很好

00:11:27.010 --> 00:11:30.699
不可知论者，所以他们被暴露了

00:11:29.079 --> 00:11:32.920
休息，他们可以通过JMX公开

00:11:30.699 --> 00:11:34.240
依此类推，但它们不受任何约束

00:11:32.920 --> 00:11:36.279
您可以使用一种特定的表示形式

00:11:34.240 --> 00:11:37.060
获得与过去相同的信息

00:11:36.279 --> 00:11:39.250
建立以获取相同的信息

00:11:37.060 --> 00:11:40.209
例如通过防撞毂壳

00:11:39.250 --> 00:11:43.529
而且只有一些一般

00:11:40.209 --> 00:11:45.310
如何获得这些信息的方法之一

00:11:43.529 --> 00:11:48.040
人们常有的一件事

00:11:45.310 --> 00:11:49.389
他们大声疾呼，因为他们能够

00:11:48.040 --> 00:11:51.370
以点为单位使用执行器的能力

00:11:49.389 --> 00:11:53.260
用千斤顶或更简单的应用程序

00:11:51.370 --> 00:11:55.120
正确的执行器端点

00:11:53.260 --> 00:11:58.000
至少在一定程度上被捆绑

00:11:55.120 --> 00:12:00.610
绑定到HTTP接口以生成MVC 

00:11:58.000 --> 00:12:01.240
好吧， Spring 不再如此

00:12:00.610 --> 00:12:03.699
启动做

00:12:01.240 --> 00:12:07.329
我们正在重新构想执行器

00:12:03.699 --> 00:12:10.060
 Web运行时的基础架构

00:12:07.329 --> 00:12:11.949
不可知的，因为我们必须这样做

00:12:10.060 --> 00:12:14.079
支持之间的二分法

00:12:11.949 --> 00:12:16.120
 Spring Web Flux是反应性Web运行时

00:12:14.079 --> 00:12:18.370
和 Spring MVC适当

00:12:16.120 --> 00:12:21.160
这是一个servlet或至少是servlet 

00:12:18.370 --> 00:12:23.620
锚定Web运行时，因为我们必须

00:12:21.160 --> 00:12:26.500
无论如何，我们已经做到了

00:12:23.620 --> 00:12:28.300
自由支持jax-rs这样的东西

00:12:26.500 --> 00:12:32.140
我们在类路径中有执行器

00:12:28.300 --> 00:12:36.070
我们需要做的就是激活它们

00:12:32.140 --> 00:12:47.340
激活剂终点而不是点

00:12:36.070 --> 00:12:47.340
 Web端点默认Web 

00:13:00.380 --> 00:13:03.760
和点

00:13:17.310 --> 00:13:32.069
哦，我做错了吗？ 

00:13:24.569 --> 00:13:34.499
 -快照好吧，永远不要吧，让我们看看

00:13:32.069 --> 00:13:37.920
我们在这里得到的是端点点默认

00:13:34.499 --> 00:13:42.860
启用网络等于true，我们将

00:13:37.920 --> 00:13:42.860
再次运行应用程序

00:13:44.809 --> 00:13:52.860
然后我们去看这个节目

00:13:49.410 --> 00:13:59.759
要求所有的第一号

00:13:52.860 --> 00:14:01.740
好了，现在我们去应用程序健康否

00:13:59.759 --> 00:14:02.910
应用程序只是默认上下文

00:14:01.740 --> 00:14:05.490
路径，但你当然可以

00:14:02.910 --> 00:14:08.189
按照您认为合适的方式进行配置，让我们

00:14:05.490 --> 00:14:09.480
看看我们到这里来的来吧来吧

00:14:08.189 --> 00:14:12.870
她会在那里我们很好所以那里是我的

00:14:09.480 --> 00:14:14.220
这是我的健康终点

00:14:12.870 --> 00:14:15.329
该特定配置

00:14:14.220 --> 00:14:18.839
应用

00:14:15.329 --> 00:14:20.999
有env端点向我显示

00:14:18.839 --> 00:14:22.309
系统属性和环境

00:14:20.999 --> 00:14:26.339
变种我所有的东西

00:14:22.309 --> 00:14:27.959
可能想从一个调试配置

00:14:26.339 --> 00:14:29.129
节点到另一个就是你知道的

00:14:27.959 --> 00:14:31.740
 Delta特别重要的是

00:14:29.129 --> 00:14:32.639
非常有用，我们还有什么

00:14:31.740 --> 00:14:35.069
不同端点的总数

00:14:32.639 --> 00:14:38.040
我们可以通过点击来枚举

00:14:35.069 --> 00:14:39.269
根应用程序路径，所有这些

00:14:38.040 --> 00:14:40.980
现在可以服务于的不同端点

00:14:39.269 --> 00:14:43.649
帮助我们调试应用程序是什么

00:14:40.980 --> 00:14:45.930
我们有通常的嫌疑犯

00:14:43.649 --> 00:14:48.059
查看您可能会从HP那里了解的事情

00:14:45.930 --> 00:14:49.500
很好的应用在这里等等

00:14:48.059 --> 00:14:51.059
 JSON的语法有点

00:14:49.500 --> 00:14:54.120
不同，但这是

00:14:51.059 --> 00:14:56.639
为 spring boot 2.0重新加工

00:14:54.120 --> 00:14:58.199
反对只是jax-rs，所以现在我们有了

00:14:56.639 --> 00:15:00.420
我们有一个REST API 

00:14:58.199 --> 00:15:02.279
我们完成了吗，我们可以顺利地进行生产吗

00:15:00.420 --> 00:15:03.269
再次知道，我想关心我们

00:15:02.279 --> 00:15:05.399
大约在 spring boot 生产

00:15:03.269 --> 00:15:07.050
值得，所以这不是很多

00:15:05.399 --> 00:15:08.610
除非我们有一些服务

00:15:07.050 --> 00:15:09.779
某种安全性，显然是

00:15:08.610 --> 00:15:11.309
您可以在附近进行Spring Security 防护

00:15:09.779 --> 00:15:12.000
任何东西，让我们带入 Spring 

00:15:11.309 --> 00:15:13.740
安全我

00:15:12.000 --> 00:15:15.480
我没有选择Spring Security 

00:15:13.740 --> 00:15:17.069
 Spring 和中和剂，因为我

00:15:15.480 --> 00:15:18.269
忘记了，但不难引入

00:15:17.069 --> 00:15:20.069
因此请带上 spring boot 靴

00:15:18.269 --> 00:15:22.559
安全，我们不会花钱

00:15:20.069 --> 00:15:25.319
我们在这里成立太久了

00:15:22.559 --> 00:15:25.879
那里有一些安全配置

00:15:25.319 --> 00:15:29.720
我们是

00:15:25.879 --> 00:15:30.860
是的，我们有我们的配置

00:15:29.720 --> 00:15:33.470
这是我们要做的第一件事

00:15:30.860 --> 00:15:34.759
是为了激活网络安全

00:15:33.470 --> 00:15:36.620
需要激活Spring 安全性

00:15:34.759 --> 00:15:38.449
记住泽西岛只是一个servlet 

00:15:36.620 --> 00:15:40.730
和一天结束时的过滤器

00:15:38.449 --> 00:15:42.920
Spring Security 性不可知

00:15:40.730 --> 00:15:44.660
某种程度上的特定框架

00:15:42.920 --> 00:15:46.670
有一点可以采取

00:15:44.660 --> 00:15:48.680
Spring 安全性和优势

00:15:46.670 --> 00:15:51.800
例如，如果使用MVC很重要

00:15:48.680 --> 00:15:54.139
 Spring MVC ism但Spring Security 

00:15:51.800 --> 00:15:56.750
与spring web flex一起使用

00:15:54.139 --> 00:15:58.459
与之兼容的Spring Framework 5 

00:15:56.750 --> 00:16:00.430
 jax-rs它可与任何Web应用程序一起使用

00:15:58.459 --> 00:16:03.350
这就是为什么最长的时间

00:16:00.430 --> 00:16:04.879
Spring Security 防护是第二大安全防护

00:16:03.350 --> 00:16:06.560
紧随其后的流行Spring 技术

00:16:04.879 --> 00:16:08.779
Spring Framework本身，因为甚至

00:16:06.560 --> 00:16:10.639
虽然你需要 Spring 来工作

00:16:08.779 --> 00:16:12.800
 Spring Security即库

00:16:10.639 --> 00:16:14.420
自己或有时是龙

00:16:12.800 --> 00:16:15.980
您不必使用的Spring Security 防护

00:16:14.420 --> 00:16:17.930
基于Spring的Web的Spring Security 

00:16:15.980 --> 00:16:20.779
申请，所以最后一次您知道

00:16:17.930 --> 00:16:22.069
十年中A +的大部分时间

00:16:20.779 --> 00:16:23.899
拥有Web应用程序，然后何时

00:16:22.069 --> 00:16:25.519
确保你刚刚假装的 Spring 

00:16:23.899 --> 00:16:27.319
安全性非常好

00:16:25.519 --> 00:16:30.139
很好，所以我们要

00:16:27.319 --> 00:16:31.939
整合Spring Security和First 

00:16:30.139 --> 00:16:35.480
我们要做的事情就是设置

00:16:31.939 --> 00:16:37.480
某种身份验证，所以让我们

00:16:35.480 --> 00:16:42.459
创建一个用户详细信息服务bean 

00:16:37.480 --> 00:16:44.839
自定义用户详细信息服务还可以， 

00:16:42.459 --> 00:16:45.949
用户详细信息服务bean只是一个

00:16:44.839 --> 00:16:47.779
Spring Security 将反对的对象

00:16:45.949 --> 00:16:50.300
委托给它何时想要回答

00:16:47.779 --> 00:16:51.649
有关谁在发出请求的问题

00:16:50.300 --> 00:16:53.689
现在我想验证一下

00:16:51.649 --> 00:16:56.199
请求来自Josh或Rob或

00:16:53.689 --> 00:16:59.149
无论谁正确，我们都将使用

00:16:56.199 --> 00:17:01.040
新的内存中用户详细信息管理器

00:16:59.149 --> 00:17:03.589
反过来将接受一个集合

00:17:01.040 --> 00:17:05.750
用户详细信息，所以说数组点

00:17:03.589 --> 00:17:08.030
作为列表，我们将创建一个

00:17:05.750 --> 00:17:13.130
这里私人的小方便方法

00:17:08.030 --> 00:17:14.329
静态用户详细信息用户字符串user和

00:17:13.130 --> 00:17:18.679
我们会说会有

00:17:14.329 --> 00:17:21.230
一些角色，我们将说用户点

00:17:18.679 --> 00:17:22.909
使用用户名用户，我们将使用

00:17:21.230 --> 00:17:24.829
相同的默认密码只是一个演示之后

00:17:22.909 --> 00:17:26.990
所有人，但显然是一件真实的事情， 

00:17:24.829 --> 00:17:28.610
与数据库对话，或者甚至都不会

00:17:26.990 --> 00:17:30.470
使用你，你甚至不会使用用户

00:17:28.610 --> 00:17:31.610
您将使用某种细节服务

00:17:30.470 --> 00:17:33.380
与之对话的身份验证管理器

00:17:31.610 --> 00:17:34.580
身份提供商提供的任何支持

00:17:33.380 --> 00:17:36.559
你有，但就我们而言，我只是

00:17:34.580 --> 00:17:38.590
想确定您可以使用jax-rs 

00:17:36.559 --> 00:17:41.840
Spring Security 性相当容易

00:17:38.590 --> 00:17:43.130
我们将创建一个简单的用法

00:17:41.840 --> 00:17:43.840
的详细服务

00:17:43.130 --> 00:17:47.409
采用

00:17:43.840 --> 00:17:50.019
用户一将是先生。绞车先生抢

00:17:47.409 --> 00:17:52.539
绞车牵动Spring 安全

00:17:50.019 --> 00:17:56.049
自然地，所以他也将成为管理员

00:17:52.539 --> 00:17:59.049
作为用户，我将在那里

00:17:56.049 --> 00:18:02.500
那只是用户权限，所以只有一个用户

00:17:59.049 --> 00:18:06.909
一个规则对我来说两个对他好

00:18:02.500 --> 00:18:09.880
并将其传递到那里

00:18:06.909 --> 00:18:12.159
有我们的用户群和我们的

00:18:09.880 --> 00:18:14.320
自定义用户详细信息服务，现在是

00:18:12.159 --> 00:18:17.769
本身很有趣，但我想

00:18:14.320 --> 00:18:19.899
还可以保护涂抹器哦，我想

00:18:17.769 --> 00:18:21.759
我的班级地图上有安全性，但我

00:18:19.899 --> 00:18:23.649
需要锁定对

00:18:21.759 --> 00:18:25.000
不同的端点，我想

00:18:23.649 --> 00:18:26.440
确保您至少要

00:18:25.000 --> 00:18:29.230
经过身份验证可以与其中任何一个进行交谈

00:18:26.440 --> 00:18:32.039
不同的端点，所以让我们在这里扩展

00:18:29.230 --> 00:18:35.769
网络安全配置一名医生， 

00:18:32.039 --> 00:18:40.179
覆盖HTTP安全性，因此

00:18:35.769 --> 00:18:42.929
我要说的是HTTP dot H TV basic 

00:18:40.179 --> 00:18:48.100
将支持HT基本安全性并

00:18:42.929 --> 00:18:49.090
授权请求任何请求点您

00:18:48.100 --> 00:18:50.889
知道，然后就是这样

00:18:49.090 --> 00:18:53.440
那就足够了

00:18:50.889 --> 00:18:58.690
一些有用的东西，让我们现在尝试一下

00:18:53.440 --> 00:19:02.429
再次好吧，我们将回到

00:18:58.690 --> 00:19:02.429
壳我们在这里

00:19:02.879 --> 00:19:17.639
好吧，让我们看一下HTTP-详细

00:19:14.639 --> 00:19:17.639
好的

00:19:19.149 --> 00:19:26.479
哎呀

00:19:20.509 --> 00:19:29.329
有一些配置问题

00:19:26.479 --> 00:19:35.119
请求未通过身份验证可以，因此我们将

00:19:29.329 --> 00:19:41.299
重新开始，转到转到

00:19:35.119 --> 00:19:43.459
炫耀应用还可以

00:19:41.299 --> 00:19:46.069
它说需要完全认证

00:19:43.459 --> 00:19:56.979
足够公平地访问此资源

00:19:46.069 --> 00:19:56.979
让我们现在尝试关闭J long哇

00:19:58.719 --> 00:20:09.709
好一天的密码，所以有

00:20:03.469 --> 00:20:12.559
数据，现在让我们与Rob一起尝试

00:20:09.709 --> 00:20:15.259
数据再次是好东西

00:20:12.559 --> 00:20:18.859
似乎正在工作，但可以说

00:20:15.259 --> 00:20:20.569
相反，我想要我想要

00:20:18.859 --> 00:20:22.549
每个端点都经过身份验证

00:20:20.569 --> 00:20:25.849
但我想特别要求

00:20:22.549 --> 00:20:27.799
客户终结管理员

00:20:25.849 --> 00:20:32.299
只对，所以我要用一只 ant 

00:20:27.799 --> 00:20:38.599
匹配器，我会说客户客户

00:20:32.299 --> 00:20:40.219
正斜杠具有管理员角色，并且

00:20:38.599 --> 00:20:41.719
我们会像那样离开，否则

00:20:40.219 --> 00:20:43.269
我们只是在创建一个非常具体的

00:20:41.719 --> 00:20:45.319
永远匹配那个端点

00:20:43.269 --> 00:20:46.699
一组端点，然后否则

00:20:45.319 --> 00:20:48.589
其他一切，包括实际

00:20:46.699 --> 00:20:52.399
端点必须经过身份验证

00:20:48.589 --> 00:20:56.659
让我们重新启动应用程序，然后

00:20:52.399 --> 00:21:01.659
回到这里，现在他有

00:20:56.659 --> 00:21:03.679
进入那没问题再回到我身边

00:21:01.659 --> 00:21:06.739
普通用户没问题

00:21:03.679 --> 00:21:08.749
客户，所以我不应该访问

00:21:06.739 --> 00:21:14.839
此端点权限访问被拒绝

00:21:08.749 --> 00:21:16.129
严格来说，我可以回到罗布这里

00:21:14.839 --> 00:21:19.219
罗宾，我要回去

00:21:16.129 --> 00:21:20.929
客户为他服务，您将

00:21:19.219 --> 00:21:23.929
看到他实际上有权访问

00:21:20.929 --> 00:21:26.779
数据，所以在此示例中，我们有了 Spring 

00:21:23.929 --> 00:21:28.309
安全性将请求锁定

00:21:26.779 --> 00:21:29.989
未经认证的也许我们有

00:21:28.309 --> 00:21:30.950
授权已配置到位

00:21:29.989 --> 00:21:32.960
授权书

00:21:30.950 --> 00:21:35.030
最后一座桥是我想要我的

00:21:32.960 --> 00:21:37.970
我想要我的方式我想要我的

00:21:35.030 --> 00:21:39.800
资源我的jax-rs应用程序意识到

00:21:37.970 --> 00:21:41.690
我想成为的验证权

00:21:39.800 --> 00:21:43.880
能够取消引用或审讯

00:21:41.690 --> 00:21:45.260
认证原则和本

00:21:43.880 --> 00:21:46.280
需要一点桥梁工作，所以

00:21:45.260 --> 00:21:48.320
我们要写一点代码

00:21:46.280 --> 00:21:50.660
在这里桥接安全上下文

00:21:48.320 --> 00:21:52.970
Spring 安全的机制

00:21:50.660 --> 00:21:55.160
的jax-rs证明不是全部

00:21:52.970 --> 00:21:58.010
很难做到，所以我们需要

00:21:55.160 --> 00:22:03.940
创建一个看起来像这样的过滤器

00:21:58.010 --> 00:22:08.450
这是一个过滤器c类桥接

00:22:03.940 --> 00:22:11.090
安全过滤器，它将

00:22:08.450 --> 00:22:13.400
实现一个容器请求过滤器并

00:22:11.090 --> 00:22:18.680
这是一个工作，你知道这是一个

00:22:13.400 --> 00:22:21.860
 jax-rs机制，我们的工作是插入

00:22:18.680 --> 00:22:23.750
在安全上下文对象中正确

00:22:21.860 --> 00:22:26.420
该安全上下文对象是什么

00:22:23.750 --> 00:22:29.150
将在请求时

00:22:26.420 --> 00:22:31.490
 jax-rs可以资源处理

00:22:29.150 --> 00:22:33.230
传入请求，因此我们需要输入

00:22:31.490 --> 00:22:34.550
它在那里，这没什么大不了的

00:22:33.230 --> 00:22:38.450
对，我们实际上可以创建一个非常

00:22:34.550 --> 00:22:39.710
简单的桥梁，通往我们的 Spring 

00:22:38.450 --> 00:22:42.770
安全性安全上下文

00:22:39.710 --> 00:22:45.110
实际上是一个摇摆的安全上下文

00:22:42.770 --> 00:22:46.940
保留一个我们可以访问的指针

00:22:45.110 --> 00:22:48.200
从本地线程那里为他们

00:22:46.940 --> 00:22:50.360
我们可以使用的静态低杯法

00:22:48.200 --> 00:22:52.670
如果您使用的是Spring MVC，则可以

00:22:50.360 --> 00:22:55.040
注入认证原则

00:22:52.670 --> 00:22:57.140
进入Spring MVC控制器处理程序并

00:22:55.040 --> 00:22:59.060
 jax-rs有类似的机制，所以

00:22:57.140 --> 00:23:00.350
一旦我们完成这项工作，我们就可以帮助您

00:22:59.060 --> 00:23:02.420
知道我们应该能够重写这个

00:23:00.350 --> 00:23:04.400
代码并利用它

00:23:02.420 --> 00:23:08.000
通过在

00:23:04.400 --> 00:23:09.710
上下文安全上下文上下文权限

00:23:08.000 --> 00:23:12.080
所以我现在要做的就是

00:23:09.710 --> 00:23:15.440
注销有关

00:23:12.080 --> 00:23:18.730
请求用户私人最终日志日志

00:23:15.440 --> 00:23:22.160
等于日志工厂获取日志获取类

00:23:18.730 --> 00:23:25.450
那里我们还好，所以现在我们把

00:23:22.160 --> 00:23:28.670
在那里，我们将说这个点日志信息

00:23:25.450 --> 00:23:31.670
我们要说上下文点吸引用户

00:23:28.670 --> 00:23:34.520
校长得到名字就可以了

00:23:31.670 --> 00:23:35.660
有我们经过身份验证的上下文

00:23:34.520 --> 00:23:37.010
应该能够将其打印出来

00:23:35.660 --> 00:23:38.210
该请求进入，因为它将

00:23:37.010 --> 00:23:39.590
担保权，您将无法获得

00:23:38.210 --> 00:23:41.080
到这个终点而无需经历

00:23:39.590 --> 00:23:43.670
Spring Security ，这将反过来

00:23:41.080 --> 00:23:44.780
填充此安全上下文，所以现在

00:23:43.670 --> 00:23:46.850
让我们回到这里的过滤器

00:23:44.780 --> 00:23:50.299
我们需要编写自定义安全性

00:23:46.850 --> 00:23:56.320
上下文实现，所以私有静态

00:23:50.299 --> 00:24:00.260
类桥接安全上下文

00:23:56.320 --> 00:24:01.669
可以实现安全上下文

00:24:00.260 --> 00:24:03.049
有我们的安全上下文合同

00:24:01.669 --> 00:24:04.309
然后合同是公平的

00:24:03.049 --> 00:24:07.610
简单明了，所以我们要注入

00:24:04.309 --> 00:24:08.990
我在这里的Spring Security 上下文

00:24:07.610 --> 00:24:11.240
要叫它 Spring ，以便我有一个

00:24:08.990 --> 00:24:12.770
甚至很容易找出哪一个

00:24:11.240 --> 00:24:15.020
是哪个，我们需要有关的信息

00:24:12.770 --> 00:24:17.950
用于制作

00:24:15.020 --> 00:24:23.510
请求，所以我要注入URI信息

00:24:17.950 --> 00:24:26.890
根据我在过滤器中的要求

00:24:23.510 --> 00:24:29.539
所以我们可以实际使用

00:24:26.890 --> 00:24:31.700
杰克的跑步球衣在这种情况下

00:24:29.539 --> 00:24:34.400
注入那里，让我们看看我们的

00:24:31.700 --> 00:24:39.890
过滤器将需要我们在

00:24:34.400 --> 00:24:48.260
上下文您我的信息还可以

00:24:39.890 --> 00:24:52.280
现在我们要说新的桥接安全性

00:24:48.260 --> 00:24:55.130
过滤器和安全过滤器，或更确切地说

00:24:52.280 --> 00:24:56.840
没有桥接安全上下文，并且

00:24:55.130 --> 00:24:58.940
情境将需要 Spring 

00:24:56.840 --> 00:25:02.240
安全上下文，所以我们说安全

00:24:58.940 --> 00:25:02.840
上下文持有者点获取上下文否

00:25:02.240 --> 00:25:05.030
问题

00:25:02.840 --> 00:25:07.130
这个URI信息没问题，所以

00:25:05.030 --> 00:25:10.299
我们的桥接安全上下文现在让我们

00:25:07.130 --> 00:25:15.470
本身实现此安全上下文

00:25:10.299 --> 00:25:17.870
所以 Spring 点认证完成 Spring 

00:25:15.470 --> 00:25:18.980
点获取身份验证，我们可以

00:25:17.870 --> 00:25:21.049
实施一些不同的方法

00:25:18.980 --> 00:25:22.820
以不同的方式发出光线，但我认为

00:25:21.049 --> 00:25:24.650
最简单的可能只是看一下

00:25:22.820 --> 00:25:26.900
当局，看看是否有任何

00:25:24.650 --> 00:25:29.299
匹配，让我们尝试确定

00:25:26.900 --> 00:25:31.820
点任何映射或蒸出任何

00:25:29.299 --> 00:25:33.260
映射任何匹配而不是GA，这是一个

00:25:31.820 --> 00:25:35.900
授予的授权对象，具有

00:25:33.260 --> 00:25:37.970
指向权威的指针，我们将

00:25:35.900 --> 00:25:40.850
看看是否包含它们直

00:25:37.970 --> 00:25:43.580
角色还可以，所以有，最后

00:25:40.850 --> 00:25:48.110
我们会说URI信息点获得绝对路径

00:25:43.580 --> 00:25:49.309
从它的GPS开始，我必须

00:25:48.110 --> 00:25:52.210
顽强vs请求，我们要说

00:25:49.309 --> 00:25:55.520
这很安全，所以 Spring 似乎很好

00:25:52.210 --> 00:25:58.370
安全身份验证没关系

00:25:55.520 --> 00:25:59.090
我们那里的自定义方案，否则

00:25:58.370 --> 00:26:01.700
那缝

00:25:59.090 --> 00:26:04.510
没关系，所以我们重写了其余部分

00:26:01.700 --> 00:26:07.100
终结我们的客户服务资源

00:26:04.510 --> 00:26:11.480
相应地注入上下文

00:26:07.100 --> 00:26:13.910
现在让我们回到外壳上，看看

00:26:11.480 --> 00:26:17.090
发生了什么，所以客户大胆砍

00:26:13.910 --> 00:26:17.990
好的，我们取回了数据，如果我

00:26:17.090 --> 00:26:20.000
去跑步

00:26:17.990 --> 00:26:22.310
我会放在那里，罗布说

00:26:20.000 --> 00:26:24.260
林奇在这里，我们只是

00:26:22.310 --> 00:26:25.940
看了如何创建一个jak源

00:26:24.260 --> 00:26:27.610
球衣和 spring boot 的应用程序

00:26:25.940 --> 00:26:30.980
为此，我们利用了新的

00:26:27.610 --> 00:26:34.160
Spring 执行器机械集成

00:26:30.980 --> 00:26:36.230
开机至零，我们研究了如何服用

00:26:34.160 --> 00:26:37.580
Spring 安全性的优势和

00:26:36.230 --> 00:26:38.870
应用程序以及其他所有内容

00:26:37.580 --> 00:26:40.940
很简单，这只是一个

00:26:38.870 --> 00:26:43.100
 Spring 很好的应用程序，它使用JP 

00:26:40.940 --> 00:26:44.210
冬眠，你知道的一切

00:26:43.100 --> 00:26:46.430
我们正在获取 spring data 的其他内容

00:26:44.210 --> 00:26:49.550
混合起来就是所谓的胖子

00:26:46.430 --> 00:26:51.020
你可以做-jar-运行

00:26:49.550 --> 00:26:52.160
应用程序来部署它

00:26:51.020 --> 00:26:54.560
换句话说，这正是您的期望，但是

00:26:52.160 --> 00:26:55.010
它与他们一起很好地工作

00:26:54.560 --> 00:26:57.200
杰克斯

00:26:55.010 --> 00:26:58.640
所以我的朋友们非常感谢你

00:26:57.200 --> 00:27:00.850
收看很多，我们下次见

00:26:58.640 --> 00:27:00.850
时间

00:27:08.110 --> 00:27:10.170
您

