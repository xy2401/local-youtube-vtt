WEBVTT
Kind: captions
Language: zh-Hans

00:00:25.160 --> 00:00:29.730
在本期中较高的Spring 风扇

00:00:27.869 --> 00:00:31.589
 Spring 的技巧，我们将要看

00:00:29.730 --> 00:00:33.870
Spring Security 防护的新功能5 

00:00:31.589 --> 00:00:35.969
旨在支持安全性

00:00:33.870 --> 00:00:38.460
在响应式Spring Web Flex中

00:00:35.969 --> 00:00:40.320
应用程序，所以让我们创建一个新的演示

00:00:38.460 --> 00:00:43.079
在这里开始 Spring 广播，我们

00:00:40.320 --> 00:00:44.579
将使用 spring boot -达多M2 

00:00:43.079 --> 00:00:46.890
您是否知道的最终版本

00:00:44.579 --> 00:00:48.239
 spring boot 定于今年十二月

00:00:46.890 --> 00:00:51.870
将利用一些

00:00:48.239 --> 00:00:53.850
这里的里程碑安全演示，我们

00:00:51.870 --> 00:00:56.129
现在要使用反应式网络支持

00:00:53.850 --> 00:00:58.830
目前没有自动

00:00:56.129 --> 00:01:00.960
Spring 的配置或启动器

00:00:58.830 --> 00:01:02.939
安全，所以我们只需要

00:01:00.960 --> 00:01:05.400
我自己手动配置它

00:01:02.939 --> 00:01:06.630
你知道我在用巨大的讽刺气

00:01:05.400 --> 00:01:09.000
在这里引用是因为您会看到

00:01:06.630 --> 00:01:10.619
几乎没有多少配置

00:01:09.000 --> 00:01:14.880
和配置是必需的

00:01:10.619 --> 00:01:16.950
工作，然后我们将使用

00:01:14.880 --> 00:01:20.909
确保反应性终点

00:01:16.950 --> 00:01:22.500
这里有我们的安全演示，我们将

00:01:20.909 --> 00:01:24.479
将自己指向该项目

00:01:22.500 --> 00:01:27.960
描述符Maven项目描述符

00:01:24.479 --> 00:01:30.270
并在我们的思想中打开它，什么

00:01:27.960 --> 00:01:31.470
我们会首先做的，你知道

00:01:30.270 --> 00:01:33.450
我们要做的第一件事是建立一个

00:01:31.470 --> 00:01:35.340
简单琐碎的休息终点

00:01:33.450 --> 00:01:35.880
返回你好世界消息还有什么

00:01:35.340 --> 00:01:40.020
对

00:01:35.880 --> 00:01:42.860
所以安全演示应用程序，我们将

00:01:40.020 --> 00:01:45.090
在此处创建一个Web配置

00:01:42.860 --> 00:01:48.110
这将是一个配置类

00:01:45.090 --> 00:01:51.900
在其中我们要定义一个路由器

00:01:48.110 --> 00:01:55.530
功能正常，所以rad功能路由

00:01:51.900 --> 00:02:02.130
我们会说返回路由器功能

00:01:55.530 --> 00:02:07.110
点路线要求漂亮的套件点

00:02:02.130 --> 00:02:08.700
斜线消息的礼物，我们要去

00:02:07.110 --> 00:02:11.159
返回一个新的处理函数，这是

00:02:08.700 --> 00:02:13.319
 spring web flex是的回调

00:02:11.159 --> 00:02:15.510
希望我们满意才能

00:02:13.319 --> 00:02:19.680
响应传入的请求，所以说reso 

00:02:15.510 --> 00:02:22.590
响应，好吧，点单声道

00:02:19.680 --> 00:02:24.299
你好，世界，我们要告诉

00:02:22.590 --> 00:02:27.450
我们发回的框架

00:02:24.299 --> 00:02:29.730
字符串好吧，让我们继续并开始

00:02:27.450 --> 00:02:30.599
现在，这是一个功能

00:02:29.730 --> 00:02:31.980
界面，您会注意到

00:02:30.599 --> 00:02:35.400
情报告诉我们这是一个功能

00:02:31.980 --> 00:02:37.200
界面，所以我们可以减少到

00:02:35.400 --> 00:02:38.260
 lambda，但出于我们的目的，我认为

00:02:37.200 --> 00:02:39.879
才有意义

00:02:38.260 --> 00:02:42.220
使用方法引用是因为功能

00:02:39.879 --> 00:02:43.450
接口适用于方法

00:02:42.220 --> 00:02:48.280
引用就像他们一样容易

00:02:43.450 --> 00:02:50.620
 lambda，所以在这里我可以说这个句柄和

00:02:48.280 --> 00:02:52.900
我们可以将其重构为

00:02:50.620 --> 00:02:55.480
消息在那里，我们做到了

00:02:52.900 --> 00:02:58.299
清洁剂，我们也可以去除这些

00:02:55.480 --> 00:02:59.950
静态导入前缀在这里

00:02:58.299 --> 00:03:03.010
使它更加干净

00:02:59.950 --> 00:03:04.420
平易近人，我们走了，所以我们有

00:03:03.010 --> 00:03:05.910
现在我们清理代码

00:03:04.420 --> 00:03:11.680
来看看它是否正在卷曲

00:03:05.910 --> 00:03:14.379
 HTTP localhost 8080正斜杠

00:03:11.680 --> 00:03:16.000
消息，现在有我们的简单消息

00:03:14.379 --> 00:03:17.829
该消息很有趣，但让我们

00:03:16.000 --> 00:03:19.540
情境化这就是你知道的

00:03:17.829 --> 00:03:22.870
个性化一点我们知道

00:03:19.540 --> 00:03:24.609
一旦我们添加了您知道的安全性

00:03:22.870 --> 00:03:29.549
我们会知道谁会使用它，所以让我们

00:03:24.609 --> 00:03:31.599
增加安全性，然后我们会好的

00:03:29.549 --> 00:03:33.250
个性化消息以反映

00:03:31.599 --> 00:03:35.440
当前经过身份验证的用户，因此要添加

00:03:33.250 --> 00:03:37.540
我们需要引入三个安全性

00:03:35.440 --> 00:03:40.239
构成核心的依赖项

00:03:37.540 --> 00:03:43.780
 Spring Security Web Flex支持如此

00:03:40.239 --> 00:03:44.739
我们说Spring Security 配置，我们

00:03:43.780 --> 00:03:45.910
不必管理版本

00:03:44.739 --> 00:03:48.760
幸运的是，这已经为我们完成了

00:03:45.910 --> 00:03:51.160
 spring boot 五春蓝色二颇

00:03:48.760 --> 00:03:52.569
从安全上有五个你知道

00:03:51.160 --> 00:03:55.900
在中为我们配置和管理

00:03:52.569 --> 00:03:57.880
版本范围，所以只是一个

00:03:55.900 --> 00:03:59.230
简单的琐事带来核心支持

00:03:57.880 --> 00:04:03.069
 Web Flex支持和配置

00:03:59.230 --> 00:04:06.700
支持，我们需要教

00:04:03.069 --> 00:04:08.709
Spring Security 如何回答

00:04:06.700 --> 00:04:10.450
认证要求

00:04:08.709 --> 00:04:13.260
授权，所以我们首先要做

00:04:10.450 --> 00:04:17.289
身份验证，我们称之为安全性

00:04:13.260 --> 00:04:18.760
安全配置，我们要

00:04:17.289 --> 00:04:20.489
使它成为配置类

00:04:18.760 --> 00:04:23.490
要激活Web Flex安全性

00:04:20.489 --> 00:04:26.710
支持在那里，然后你知道

00:04:23.490 --> 00:04:28.360
Spring 弹力通量就像Spring 搜索

00:04:26.710 --> 00:04:30.010
 Spring Mukluks的Spring Security 

00:04:28.360 --> 00:04:32.380
就像传统的Spring Security 

00:04:30.010 --> 00:04:35.110
其核心是

00:04:32.380 --> 00:04:38.770
身份验证管理器，它可以在

00:04:35.110 --> 00:04:40.870
将代表转到反应堆，直到用户

00:04:38.770 --> 00:04:42.430
详细信息存储库，或多或少

00:04:40.870 --> 00:04:44.199
对应于疑问认证

00:04:42.430 --> 00:04:46.300
传统 Spring 的提供者

00:04:44.199 --> 00:04:48.610
安全世界，反过来又是

00:04:46.300 --> 00:04:51.190
负责回答要求

00:04:48.610 --> 00:04:51.670
你知道认证请求吗

00:04:51.190 --> 00:04:54.040
完成了

00:04:51.670 --> 00:04:57.640
使用条款名称和密码，因此我们

00:04:54.040 --> 00:05:00.540
可以提供非常简单的反应

00:04:57.640 --> 00:05:03.820
友好的用户详细信息存储库

00:05:00.540 --> 00:05:05.830
只有几个内置用户， 

00:05:03.820 --> 00:05:07.120
密码正确，我们可以配置

00:05:05.830 --> 00:05:09.190
使用地图用户详细信息

00:05:07.120 --> 00:05:11.170
我们没有与适当的存储库交谈

00:05:09.190 --> 00:05:12.700
身份提供者这里没有LDAP 

00:05:11.170 --> 00:05:15.070
或Active Directory或类似的东西

00:05:12.700 --> 00:05:16.750
现在，因为我们只想

00:05:15.070 --> 00:05:18.400
展示它看起来像什么

00:05:16.750 --> 00:05:19.420
使这项工作在后面的套件后面

00:05:18.400 --> 00:05:21.310
 Springs Security的现场

00:05:19.420 --> 00:05:23.650
为您创建一个身份验证管理器

00:05:21.310 --> 00:05:24.550
使用此用户详细信息存储库

00:05:23.650 --> 00:05:27.100
所以我们不需要做任何事情

00:05:24.550 --> 00:05:28.570
如果我们现在不想接线，我们需要一个

00:05:27.100 --> 00:05:30.880
几年的用户，当然，让我们

00:05:28.570 --> 00:05:33.280
创建用户名伪造一个用户

00:05:30.880 --> 00:05:35.290
锻造一个很长的角色当然只是

00:05:33.280 --> 00:05:37.510
用户，密码当然是

00:05:35.290 --> 00:05:40.090
密码，因为它当然是正确的

00:05:37.510 --> 00:05:42.160
这样就可以了，我们将创建

00:05:40.090 --> 00:05:44.770
对用户入狱，我将重复

00:05:42.160 --> 00:05:47.020
这将创建我们的绞车用户和我们的

00:05:44.770 --> 00:05:50.440
绞盘当然是Rob绞盘的领先者

00:05:47.020 --> 00:05:52.360
Spring Security 项目，我确定

00:05:50.440 --> 00:05:53.920
如果你抓住一点他会喜欢的

00:05:52.360 --> 00:05:56.140
并尝试一些我们

00:05:53.920 --> 00:05:58.720
在这里谈论并反馈

00:05:56.140 --> 00:06:00.580
请在我们的绞车上这样做， 

00:05:58.720 --> 00:06:01.780
两个用户，这将要做什么

00:06:00.580 --> 00:06:03.760
默认配置与此

00:06:01.780 --> 00:06:06.100
注释，这是这个

00:06:03.760 --> 00:06:08.080
要锁定一切， 

00:06:06.100 --> 00:06:09.990
限制对任何资源的访问

00:06:08.080 --> 00:06:12.700
不管资源的名称是什么

00:06:09.990 --> 00:06:14.610
假设该请求已通过身份验证

00:06:12.700 --> 00:06:17.890
我们可以看到这里

00:06:14.610 --> 00:06:19.360
重新启动应用程序，我们将转向

00:06:17.890 --> 00:06:21.130
在这里详细记录卷曲

00:06:19.360 --> 00:06:23.770
打电话，您会看到它说401 

00:06:21.130 --> 00:06:25.390
未经授权，我现在可以授权

00:06:23.770 --> 00:06:26.800
通过在通话中说入狱和

00:06:25.390 --> 00:06:29.260
密码就是我的用户名和密码

00:06:26.800 --> 00:06:31.240
有消息，但是不个人

00:06:29.260 --> 00:06:32.910
现在让我们个性化消息

00:06:31.240 --> 00:06:40.050
我们将进一步说明

00:06:32.910 --> 00:06:41.350
服务器请求点主体P你好

00:06:40.050 --> 00:06:48.900
皮特

00:06:41.350 --> 00:06:54.090
名称正确，因此P点或主体

00:06:48.900 --> 00:06:56.030
该地图p点获得额外的名称

00:06:54.090 --> 00:07:03.060
感叹号正确，所以有这个

00:06:56.030 --> 00:07:04.650
这样我们就可以保存主要发布者了

00:07:03.060 --> 00:07:06.060
所以我要用那个校长

00:07:04.650 --> 00:07:07.889
发布者，而不是默认发布者

00:07:06.060 --> 00:07:09.720
我们刚刚提供的，但是

00:07:07.889 --> 00:07:12.180
结果基本上应该是我们期望的

00:07:09.720 --> 00:07:14.550
所以让我们继续并重新开始看看

00:07:12.180 --> 00:07:15.180
结果，所以如果我让他们做

00:07:14.550 --> 00:07:16.710
现在打电话

00:07:15.180 --> 00:07:19.050
它说你好监狱好吧

00:07:16.710 --> 00:07:20.699
重生斯坦在那里，这是工作

00:07:19.050 --> 00:07:26.360
如果我期望的话，那是我们期望的

00:07:20.699 --> 00:07:28.770
将我们的绞盘鉴定为我们的Lynch 

00:07:26.360 --> 00:07:33.060
打个招呼吧，很明显

00:07:28.770 --> 00:07:34.710
意识到另一件事

00:07:33.060 --> 00:07:35.729
现在获得校长，我们可以做点什么

00:07:34.710 --> 00:07:38.220
有趣一点，现在我们可以看看

00:07:35.729 --> 00:07:42.090
在授权的情况下，这样做

00:07:38.220 --> 00:07:44.490
我们必须规定默认

00:07:42.090 --> 00:07:46.889
另一端的授权

00:07:44.490 --> 00:07:49.169
指出现在的Spring Security 是

00:07:46.889 --> 00:07:50.490
对我们来说是正确的，所以默认

00:07:49.169 --> 00:07:51.990
这里的行为是，如果我们只是这样做

00:07:50.490 --> 00:07:53.910
身份验证，我们不提供任何身份验证

00:07:51.990 --> 00:07:55.860
关于应该怎么做的任何想法

00:07:53.910 --> 00:07:57.300
授权它只会锁定

00:07:55.860 --> 00:07:59.639
我们可以多做一点

00:07:57.300 --> 00:08:01.530
具体的，但我们现在必须确保

00:07:59.639 --> 00:08:03.930
掩盖我们获得的基础

00:08:01.530 --> 00:08:07.169
我们通过不指定这个来获得

00:08:03.930 --> 00:08:09.180
手动，我们必须阅读我们的声明

00:08:07.169 --> 00:08:12.720
那个地面，因为呃，一旦我们

00:08:09.180 --> 00:08:14.760
对一条路线施加控制

00:08:12.720 --> 00:08:18.000
Spring Security 性的一个终点

00:08:14.760 --> 00:08:19.349
希望我们为以下事项提供授权

00:08:18.000 --> 00:08:20.820
所有这些都适合所有终点

00:08:19.349 --> 00:08:24.900
否则，将其保留为默认值

00:08:20.820 --> 00:08:26.159
所以让我们在这里创建一个光束

00:08:24.900 --> 00:08:27.840
网络过滤器链，我们只是要打电话

00:08:26.159 --> 00:08:30.389
这是我要使用的安全性端点

00:08:27.840 --> 00:08:33.719
注入spring安全HTTP安全

00:08:30.389 --> 00:08:35.729
 DSL在那里，我们会说在那里建造

00:08:33.719 --> 00:08:38.640
我们的DSL，我们要说的是

00:08:35.729 --> 00:08:44.150
要说授权交流想什么

00:08:38.640 --> 00:08:44.150
交换是经过验证的权利， 

00:08:44.390 --> 00:08:49.290
我们在那里，这是我们的第一点

00:08:47.580 --> 00:08:50.520
配置应该是我们在哪里

00:08:49.290 --> 00:08:52.290
基本上之前是需要

00:08:50.520 --> 00:08:53.160
一切都经过验证，让我们

00:08:52.290 --> 00:08:56.610
看看是否可行

00:08:53.160 --> 00:08:57.900
好吧，罗伯·林奇问好

00:08:56.610 --> 00:08:59.339
我们篡改密码

00:08:57.900 --> 00:09:01.580
它不让我们经历它的

00:08:59.339 --> 00:09:02.810
未经授权，似乎

00:09:01.580 --> 00:09:06.770
告诉我们一切都在

00:09:02.810 --> 00:09:11.740
在你好世界之前，我们去了

00:09:06.770 --> 00:09:14.090
现在让我们创建一个新的端点

00:09:11.740 --> 00:09:16.760
将提供信息并服务

00:09:14.090 --> 00:09:19.640
验证有关的信息

00:09:16.760 --> 00:09:22.880
当前经过身份验证的用户为JSON 

00:09:19.640 --> 00:09:24.800
回到客户，但我们不希望您

00:09:22.880 --> 00:09:28.790
知道客户能够交谈或与

00:09:24.800 --> 00:09:30.080
正确查看他人的信息

00:09:28.790 --> 00:09:32.950
我们将限制对其他人的访问

00:09:30.080 --> 00:09:35.720
主要信息

00:09:32.950 --> 00:09:41.080
身份验证隐含的用户名

00:09:35.720 --> 00:09:41.080
所以我们在这里创建一个端点

00:09:41.440 --> 00:09:49.430
说前进大幅削减用户前进

00:09:45.890 --> 00:09:52.760
右击斜杠用户名，然后再次在此处

00:09:49.430 --> 00:09:54.770
我们只是得到一个像这样的新处理程序

00:09:52.760 --> 00:09:58.160
我会说这个处理程序叫做

00:09:54.770 --> 00:10:05.180
用户名以及我们要做的一切

00:09:58.160 --> 00:10:06.910
处理程序名称，这个处理程序是我们

00:10:05.180 --> 00:10:09.470
将JSON信息向右转

00:10:06.910 --> 00:10:14.840
对于当前的本金，所以

00:10:09.470 --> 00:10:16.190
主体是Java安全原则

00:10:14.840 --> 00:10:17.480
但这不是我们想要的，我们知道

00:10:16.190 --> 00:10:20.330
幕后那个校长是

00:10:17.480 --> 00:10:22.280
实际上是一个认证对象

00:10:20.330 --> 00:10:24.530
让我们摆脱这个，因为我们知道

00:10:22.280 --> 00:10:25.840
不会是同一类型

00:10:24.530 --> 00:10:28.370
不再，所以我们要说

00:10:25.840 --> 00:10:30.920
认证类点播

00:10:28.370 --> 00:10:32.570
 P，然后我们知道

00:10:30.920 --> 00:10:35.030
对象将成为用户详细信息

00:10:32.570 --> 00:10:37.610
这是与用户详细信息相同的

00:10:35.030 --> 00:10:39.800
我们只是坚持在我们的存储库

00:10:37.610 --> 00:10:42.950
几分钟前，我们将其变成

00:10:39.800 --> 00:10:44.590
用户详细信息，我们在那里

00:10:42.950 --> 00:10:48.280
我们的用户-详细信息，我们可以

00:10:44.590 --> 00:10:50.270
取消引用细节手册

00:10:48.280 --> 00:10:54.320
也许清理一点，我们去

00:10:50.270 --> 00:10:56.690
所以现在把它们的细节放进去

00:10:54.320 --> 00:10:57.920
我们将告诉运行时

00:10:56.690 --> 00:10:59.200
这是一个用户详细信息对象， 

00:10:57.920 --> 00:11:02.540
应该这样对待

00:10:59.200 --> 00:11:05.420
让我们确认一下是否可行

00:11:02.540 --> 00:11:07.310
在我们深入研究授权之前，让我们

00:11:05.420 --> 00:11:11.350
深入研究，只需确保

00:11:07.310 --> 00:11:13.120
正在按照我们的预期工作，因此用户

00:11:11.350 --> 00:11:14.589
绞车

00:11:13.120 --> 00:11:18.190
那里我们有我们的信息

00:11:14.589 --> 00:11:19.839
 J long有相同的信息

00:11:18.190 --> 00:11:22.060
我们想要做的是

00:11:19.839 --> 00:11:23.860
您知道来自的经过身份验证的用户

00:11:22.060 --> 00:11:25.330
访问不存在的信息

00:11:23.860 --> 00:11:27.550
属于该经过身份验证的用户，因此

00:11:25.330 --> 00:11:29.529
我们将进行有效的授权

00:11:27.550 --> 00:11:32.430
在那个URL的那个端点上，所以我们

00:11:29.529 --> 00:11:35.140
在我们的安全配置中

00:11:32.430 --> 00:11:41.740
我们回到安全配置

00:11:35.140 --> 00:11:48.100
在这里，我们说对于要求去

00:11:41.740 --> 00:11:52.660
到某个路径用户进行斜杠

00:11:48.100 --> 00:11:55.630
用户名，我们需要以下访问权限

00:11:52.660 --> 00:11:57.250
决定申请权利，我们拥有

00:11:55.630 --> 00:11:58.510
可以顺便说一句

00:11:57.250 --> 00:11:59.710
传入的请求必须是

00:11:58.510 --> 00:12:01.600
经过验证的基本上就是我们

00:11:59.710 --> 00:12:03.430
在我们可以说它必须有一个之前

00:12:01.600 --> 00:12:06.220
某个权威或某个角色，但

00:12:03.430 --> 00:12:09.760
 Spring 的新功能之一

00:12:06.220 --> 00:12:12.460
安全5是因为它基于Java 

00:12:09.760 --> 00:12:14.200
 Java 8和Spring 5本身也是

00:12:12.460 --> 00:12:16.170
基于Java 8，我们可以利用

00:12:14.200 --> 00:12:18.610
 lambdas，所以现在非常方便

00:12:16.170 --> 00:12:20.230
在此处访问我们的电话

00:12:18.610 --> 00:12:22.209
曾经有两次使用Spring 

00:12:20.230 --> 00:12:25.810
表达语言表达

00:12:22.209 --> 00:12:27.910
我们现在可以进行相同的动态控制

00:12:25.810 --> 00:12:30.610
在这里这样做是通过提供一个新的

00:12:27.910 --> 00:12:36.100
被动授权经理

00:12:30.610 --> 00:12:37.270
反应授权管理器和这个

00:12:36.100 --> 00:12:40.000
我们应该全心全意

00:12:37.270 --> 00:12:42.029
要说我们会知道

00:12:40.000 --> 00:12:44.230
我们将检查传入的请求

00:12:42.029 --> 00:12:45.880
里面有一个认证

00:12:44.230 --> 00:12:48.130
用户访问过之后

00:12:45.880 --> 00:12:49.600
已通过身份验证，我们会知道

00:12:48.130 --> 00:12:52.330
找出已验证的名称

00:12:49.600 --> 00:12:53.560
用户，然后查看它是否与URL相匹配

00:12:52.330 --> 00:12:56.800
我们针对之提出要求

00:12:53.560 --> 00:12:58.240
对，这就是这里的背景

00:12:56.800 --> 00:13:06.130
当前的用户名，所以我们要说

00:12:58.240 --> 00:13:10.660
 mano点图和off-off点点get 

00:13:06.130 --> 00:13:14.350
名称等于上下文认为得到

00:13:10.660 --> 00:13:16.570
变量dot获取用户名正确，因此

00:13:14.350 --> 00:13:18.060
这是一个布尔值，我们需要将其映射

00:13:16.570 --> 00:13:20.529
布尔值称为

00:13:18.060 --> 00:13:22.240
授权决定，所以有一个

00:13:20.529 --> 00:13:23.500
只需一个布尔值的构造函数

00:13:22.240 --> 00:13:24.850
我们可以像这样使用方法引用

00:13:23.500 --> 00:13:27.579
好吧

00:13:24.850 --> 00:13:28.929
好的，有我们的授权检查和

00:13:27.579 --> 00:13:30.629
当然这是一个函数式接口

00:13:28.929 --> 00:13:35.139
也可以替换掉

00:13:30.629 --> 00:13:36.220
因此，代码变得非常漂亮

00:13:35.139 --> 00:13:37.660
读写写很干净

00:13:36.220 --> 00:13:39.549
写得很容易遵循

00:13:37.660 --> 00:13:41.259
发生，我们在这里获得类型安全

00:13:39.549 --> 00:13:43.299
这是一种 Spring Expression Language ，所以

00:13:41.259 --> 00:13:44.949
如果您是

00:13:43.299 --> 00:13:46.720
试图找出链

00:13:44.949 --> 00:13:47.919
调用好吧，让我们看看

00:13:46.720 --> 00:13:50.829
现在可以正常工作，请注意我们正在做

00:13:47.919 --> 00:13:53.319
在执行此特定操作之前， 

00:13:50.829 --> 00:13:55.569
这里更广泛适用的东西

00:13:53.319 --> 00:13:57.549
对，我们是说第一张支票

00:13:55.569 --> 00:13:59.859
这个非常具体的模式，然后如果

00:13:57.549 --> 00:14:02.229
这些都不符合

00:13:59.859 --> 00:14:04.479
我们指定任意数量的路径

00:14:02.229 --> 00:14:06.549
我们指定的路径或predicate

00:14:04.479 --> 00:14:08.979
在这里使用这个说任何

00:14:06.549 --> 00:14:10.720
请求进入服务

00:14:08.979 --> 00:14:12.910
他们应该在那里

00:14:10.720 --> 00:14:18.789
正确的身份验证，让我们现在看看

00:14:12.910 --> 00:14:19.839
可以，所以我很满意

00:14:18.789 --> 00:14:21.009
现在我要进行身份验证

00:14:19.839 --> 00:14:24.369
如果我要和我们聊天的话

00:14:21.009 --> 00:14:29.079
没事的监狱，它说禁止403 

00:14:24.369 --> 00:14:31.929
现在我们的绞盘怎么样

00:14:29.079 --> 00:14:34.299
我现在已经访问了信息

00:14:31.929 --> 00:14:38.319
特定于我们的绞车，当然我已经

00:14:34.299 --> 00:14:40.149
也得到了我的消息端点

00:14:38.319 --> 00:14:41.859
你好，我们的绞盘，所以

00:14:40.149 --> 00:14:43.809
我们看过Spring Security 五

00:14:41.859 --> 00:14:46.569
这里有很多很棒的东西

00:14:43.809 --> 00:14:48.669
我刚刚谈到了

00:14:46.569 --> 00:14:49.989
使用H保护基本的Web应用程序

00:14:48.669 --> 00:14:52.659
是基本的，但当然您会看到

00:14:49.989 --> 00:14:54.189
不同协议的数量和

00:14:52.659 --> 00:14:55.989
技术支持和Spring 安全

00:14:54.189 --> 00:14:58.629
与往常一样，其中之一当然是

00:14:55.989 --> 00:15:01.479
 oo-oo-oo官员以前是

00:14:58.629 --> 00:15:03.309
在以前由

00:15:01.479 --> 00:15:05.019
spring-cloud-security和 Spring 

00:15:03.309 --> 00:15:06.429
安全oauth会自行计划

00:15:05.019 --> 00:15:08.529
Spring Security 奥拉夫项目现在

00:15:06.429 --> 00:15:10.919
被折叠成Spring Security 五

00:15:08.529 --> 00:15:13.409
这样您就可以立即看到

00:15:10.919 --> 00:15:16.720
支持和交互方式

00:15:13.409 --> 00:15:17.979
Spring Security 5本身可以

00:15:16.720 --> 00:15:20.729
非常感谢您的观看和

00:15:17.979 --> 00:15:20.729
下次见

00:15:28.529 --> 00:15:30.589
您

