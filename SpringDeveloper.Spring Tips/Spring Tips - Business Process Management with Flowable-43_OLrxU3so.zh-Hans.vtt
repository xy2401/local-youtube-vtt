WEBVTT
Kind: captions
Language: zh-Hans

00:00:25.410 --> 00:00:30.480
嗨，春季球迷们欢迎来到北风暴

00:00:28.200 --> 00:00:33.170
在这一期的春季技巧中，我们是

00:00:30.480 --> 00:00:36.330
要看可流动的BPMN 

00:00:33.170 --> 00:00:39.510
兼容的工作流引擎

00:00:36.330 --> 00:00:40.410
不只是bpmn，现在我不

00:00:39.510 --> 00:00:41.640
甚至不知道从哪里开始

00:00:40.410 --> 00:00:44.129
实际上是我其中的一件事

00:00:41.640 --> 00:00:46.440
认为这部分特别

00:00:44.129 --> 00:00:47.760
视频只是其中的一个

00:00:46.440 --> 00:00:49.470
因为我真的可以说话

00:00:47.760 --> 00:00:51.150
关于你永远知道的东西

00:00:49.470 --> 00:00:54.360
有太多不同的事情要

00:00:51.150 --> 00:00:55.500
首先在这里谈谈

00:00:54.360 --> 00:00:59.399
谈论我们在这里想要做什么

00:00:55.500 --> 00:01:00.660
用例现在在这里

00:00:59.399 --> 00:01:02.579
我们看过的前几期

00:01:00.660 --> 00:01:05.820
诸如Spring Integration和

00:01:02.579 --> 00:01:09.270
春季批处理中的春季批处理

00:01:05.820 --> 00:01:12.240
正在将系统彼此连接

00:01:09.270 --> 00:01:14.160
这些事件的事件术语是

00:01:12.240 --> 00:01:16.649
真实生活中的现实事件

00:01:14.160 --> 00:01:20.039
世界，从这些事件

00:01:16.649 --> 00:01:22.979
事件从一个系统流向

00:01:20.039 --> 00:01:25.200
另一个你暗示状态使用你可以

00:01:22.979 --> 00:01:27.390
可以画一张图来显示数据

00:01:25.200 --> 00:01:29.250
从一点移动通过系统

00:01:27.390 --> 00:01:31.560
到另一个，最终到达

00:01:29.250 --> 00:01:34.819
在目的地是一种看待方式

00:01:31.560 --> 00:01:38.009
在这个世界上，你暗示着

00:01:34.819 --> 00:01:40.289
没有世界的世界

00:01:38.009 --> 00:01:43.259
该状态的视图，您正在绘制

00:01:40.289 --> 00:01:46.280
否则已断开连接的图片

00:01:43.259 --> 00:01:49.890
系统，这就是

00:01:46.280 --> 00:01:52.789
在其他方面构建系统

00:01:49.890 --> 00:01:55.289
处理一些用例，一些工作量

00:01:52.789 --> 00:01:58.860
方案要求您具有

00:01:55.289 --> 00:02:00.899
实际举起双手的能力

00:01:58.860 --> 00:02:03.119
在该州能够对其进行审核

00:02:00.899 --> 00:02:06.149
能够看看它的历史

00:02:03.119 --> 00:02:09.149
能够正确查询

00:02:06.149 --> 00:02:10.830
这种情况不仅仅看起来

00:02:09.149 --> 00:02:12.660
在运动的结果

00:02:10.830 --> 00:02:14.580
运动结果的信息

00:02:12.660 --> 00:02:16.620
数据通过系统，然后这样说

00:02:14.580 --> 00:02:19.530
发生了，相反，我们需要能够

00:02:16.620 --> 00:02:22.410
说我们走了多远

00:02:19.530 --> 00:02:23.550
有待完成，然后更多

00:02:22.410 --> 00:02:27.500
点，当你开始进入这些

00:02:23.550 --> 00:02:29.190
那种状态紧张和

00:02:27.500 --> 00:02:31.830
有时长时间运行

00:02:29.190 --> 00:02:35.430
用例通常不是

00:02:31.830 --> 00:02:38.180
只是自动排序的自治代理

00:02:35.430 --> 00:02:39.420
该过程中涉及的

00:02:38.180 --> 00:02:42.209
您

00:02:39.420 --> 00:02:44.130
因此获得的可能性不及人类演员

00:02:42.209 --> 00:02:46.080
参与

00:02:44.130 --> 00:02:48.630
系统或涉及移动

00:02:46.080 --> 00:02:51.690
前进的工作，所以我们需要的是

00:02:48.630 --> 00:02:53.790
在某种程度上更多

00:02:51.690 --> 00:02:55.500
有复杂的场景

00:02:53.790 --> 00:02:57.630
你可能有无数的

00:02:55.500 --> 00:02:59.760
常见的一种是保险理赔

00:02:57.630 --> 00:03:01.739
一个是注册表格，请仔细考虑

00:02:59.760 --> 00:03:03.180
保险要求您有某人

00:03:01.739 --> 00:03:05.190
想买保险，但是当然

00:03:03.180 --> 00:03:09.750
有一个业务流程

00:03:05.190 --> 00:03:12.959
帮助捕获它的过程

00:03:09.750 --> 00:03:14.819
帮助验证正在申请的人

00:03:12.959 --> 00:03:16.560
为了保险，他们经历了

00:03:14.819 --> 00:03:18.569
然后他们的背景是

00:03:16.560 --> 00:03:21.989
检查他们的健康检查他们

00:03:18.569 --> 00:03:24.540
他们的财务状况得到检查，他们

00:03:21.989 --> 00:03:27.769
组织进行风险评估， 

00:03:24.540 --> 00:03:30.540
基于此，他们能够

00:03:27.769 --> 00:03:34.470
以他们可以买到的主要价​​格

00:03:30.540 --> 00:03:35.940
然后买得起保险或在

00:03:34.470 --> 00:03:39.390
在某些情况下买不起保险

00:03:35.940 --> 00:03:40.950
对，这个过程是多步骤的， 

00:03:39.390 --> 00:03:42.330
很多时候可能只是

00:03:40.950 --> 00:03:45.930
很简单，就像这个人哦

00:03:42.330 --> 00:03:49.709
你知道年轻健康吗？ 

00:03:45.930 --> 00:03:51.780
根本没有问题，而且你知道钱不错

00:03:49.709 --> 00:03:53.459
好的信用卡支票等等

00:03:51.780 --> 00:03:56.640
东西，所以我们可以继续

00:03:53.459 --> 00:03:58.620
立即批准该人

00:03:56.640 --> 00:04:01.370
另一方面可能会有一些

00:03:58.620 --> 00:04:04.410
需要更广泛的情况

00:04:01.370 --> 00:04:08.400
修订范围更广泛的研究

00:04:04.410 --> 00:04:09.870
案件或索赔中

00:04:08.400 --> 00:04:11.790
无论如何，在这种情况下，您可能会有

00:04:09.870 --> 00:04:13.500
一个需要实际去做的人

00:04:11.790 --> 00:04:14.519
与某人交谈，可能需要

00:04:13.500 --> 00:04:17.039
打个电话，他们可能需要

00:04:14.519 --> 00:04:18.780
与申请人讨论此过程

00:04:17.039 --> 00:04:21.660
参与更多但涉及人类

00:04:18.780 --> 00:04:23.940
演员，这可能甚至需要

00:04:21.660 --> 00:04:26.820
进一步做正确的工作

00:04:23.940 --> 00:04:28.860
实际上可能会创建新流程

00:04:26.820 --> 00:04:30.450
为了能够

00:04:28.860 --> 00:04:33.169
进行某种风险评估

00:04:30.450 --> 00:04:37.380
结果如此漫长的书面过程

00:04:33.169 --> 00:04:40.050
希望到达或不去

00:04:37.380 --> 00:04:41.340
决定，那时候你有

00:04:40.050 --> 00:04:42.810
大量其他需要的东西

00:04:41.340 --> 00:04:45.960
碰巧，您发送电子邮件至

00:04:42.810 --> 00:04:48.720
申请人在通知他或她之前

00:04:45.960 --> 00:04:51.479
你知道的决定结果

00:04:48.720 --> 00:04:53.249
为您确认该人的保险

00:04:51.479 --> 00:04:55.499
发送您等待的电子邮件

00:04:53.249 --> 00:04:57.269
签约的人继续他们的

00:04:55.499 --> 00:04:58.499
注册过程中，您发送另一封电子邮件

00:04:57.269 --> 00:05:00.449
您等待那个人点击

00:04:58.499 --> 00:05:02.219
文档或单击链接以验证其

00:05:00.449 --> 00:05:04.799
给您发电子邮件给他们一个帐户

00:05:02.219 --> 00:05:06.209
网站您必须打印出卡片

00:05:04.799 --> 00:05:10.169
这么久都知道

00:05:06.209 --> 00:05:12.169
运行步骤，你不，你不

00:05:10.169 --> 00:05:15.749
只看个人资料就知道

00:05:12.169 --> 00:05:17.609
表该过程是否正确完成

00:05:15.749 --> 00:05:18.899
你真的需要知道你

00:05:17.609 --> 00:05:20.789
确实需要知道有人做了一个

00:05:18.899 --> 00:05:23.909
您确实需要进行的背景调查

00:05:20.789 --> 00:05:25.949
知道这个人已经被给予

00:05:23.909 --> 00:05:27.829
他们的保险单文件和

00:05:25.949 --> 00:05:30.269
一切都已经签名，有人

00:05:27.829 --> 00:05:32.789
越过所有T并点缀所有

00:05:30.269 --> 00:05:34.559
我是并且用户已经创建了一个

00:05:32.789 --> 00:05:35.849
个人资料在网站上，您知道所有

00:05:34.559 --> 00:05:37.679
这些东西所有这些东西必须

00:05:35.849 --> 00:05:39.059
发生在交换之前

00:05:37.679 --> 00:05:40.289
互动当然，您需要

00:05:39.059 --> 00:05:42.599
所有这些东西都收钱

00:05:40.289 --> 00:05:45.979
必须先发生，然后才能说出您的

00:05:42.599 --> 00:05:50.249
枪的结果

00:05:45.979 --> 00:05:53.249
已经达成协议

00:05:50.249 --> 00:05:55.139
双方都期望的一种方式

00:05:53.249 --> 00:05:57.389
那个过程是长期的

00:05:55.139 --> 00:05:59.669
可能涉及多个步骤

00:05:57.389 --> 00:06:01.709
数天或数周或数月，如果

00:05:59.669 --> 00:06:04.019
他们也许是这些过程

00:06:01.709 --> 00:06:06.569
他们实际上是有时间限制的

00:06:04.019 --> 00:06:10.499
需要一个多小时，但他们可以

00:06:06.569 --> 00:06:12.209
并且不应少于或少于

00:06:10.499 --> 00:06:13.799
他们不应该多说

00:06:12.209 --> 00:06:15.689
几天，那是另一回事

00:06:13.799 --> 00:06:18.299
您可能对此有时间限制

00:06:15.689 --> 00:06:19.949
对事实进行异步建模

00:06:18.299 --> 00:06:22.079
有人类参与其中

00:06:19.949 --> 00:06:24.179
正在等待建模

00:06:22.079 --> 00:06:25.949
工作从一个节点移动到

00:06:24.179 --> 00:06:27.449
系统中的另一个

00:06:25.949 --> 00:06:30.360
一个人给系统中的另一个人

00:06:27.449 --> 00:06:32.639
这些长期运行的过程

00:06:30.360 --> 00:06:34.349
是他们非常映射的业务流程

00:06:32.639 --> 00:06:36.059
很自然地成为业务方式

00:06:34.349 --> 00:06:39.839
您组织中的分析师认为

00:06:36.059 --> 00:06:41.759
关于你在做什么，那是通过

00:06:39.839 --> 00:06:43.799
通过设计好吗

00:06:41.759 --> 00:06:47.479
工作流程就是关于描述

00:06:43.799 --> 00:06:50.579
在组织和工作流程中工作

00:06:47.479 --> 00:06:52.919
像全球目标这样的解决方案

00:06:50.579 --> 00:06:54.599
可能描述这些工作流程

00:06:52.919 --> 00:06:57.419
处理这些过程

00:06:54.599 --> 00:06:59.939
对业务至关重要的方式

00:06:57.419 --> 00:07:02.399
分析师可以欣赏，因此经常

00:06:59.939 --> 00:07:04.769
没有建模组件

00:07:02.399 --> 00:07:07.070
这，它旨在使

00:07:04.769 --> 00:07:09.860
那型号

00:07:07.070 --> 00:07:12.210
至少在其中可执行文件

00:07:09.860 --> 00:07:14.090
可能有一点点的东西

00:07:12.210 --> 00:07:16.200
一点技巧变成了可执行文件

00:07:14.090 --> 00:07:18.000
规范，这就是我们的意思

00:07:16.200 --> 00:07:19.350
当我们谈论工作流系统时

00:07:18.000 --> 00:07:20.790
对，另一个常见的例子就是

00:07:19.350 --> 00:07:22.980
很简单，你知道一些你可能会

00:07:20.790 --> 00:07:25.140
你知道我做了一百万次吗

00:07:22.980 --> 00:07:27.780
想注册一个网站，我去

00:07:25.140 --> 00:07:30.000
网站，我填写表格，我输入电子邮件

00:07:27.780 --> 00:07:31.770
他们想验证我发送的电子邮件

00:07:30.000 --> 00:07:34.440
给我发送电子邮件，以单击

00:07:31.770 --> 00:07:35.970
链接我点击链接，然后重置

00:07:34.440 --> 00:07:37.320
你知道当我点击链接

00:07:35.970 --> 00:07:39.630
触发网站中的端点

00:07:37.320 --> 00:07:41.190
然后说好吧，你的好吗

00:07:39.630 --> 00:07:42.570
电子邮件已确认您已奉献

00:07:41.190 --> 00:07:44.700
然后你就完成了

00:07:42.570 --> 00:07:46.920
简单的事情涉及几个步骤

00:07:44.700 --> 00:07:51.330
自动发送电子邮件的系统

00:07:46.920 --> 00:07:52.920
和一个人在某些地方互动

00:07:51.330 --> 00:07:54.450
异步指出时间

00:07:52.920 --> 00:07:57.420
可能在一秒一纳秒内

00:07:54.450 --> 00:07:59.250
或一年的权利，在这种情况下

00:07:57.420 --> 00:08:01.710
那个人可能并不重要

00:07:59.250 --> 00:08:03.630
点击链接，现在他们可能会点击

00:08:01.710 --> 00:08:05.520
一年后，然后你知道什么

00:08:03.630 --> 00:08:08.580
该帐户应该有效，然后您

00:08:05.520 --> 00:08:09.780
知道亚马逊随时都希望有客户

00:08:08.580 --> 00:08:10.800
可以得到它，不管他是否签字

00:08:09.780 --> 00:08:12.300
现在起来，忘了点击

00:08:10.800 --> 00:08:13.770
确认链接，直到明年

00:08:12.300 --> 00:08:16.140
他们也很高兴明年也有你

00:08:13.770 --> 00:08:18.300
只要各种

00:08:16.140 --> 00:08:20.070
杀手是一样的，无效的权利

00:08:18.300 --> 00:08:21.780
您的信用卡和帐单地址，但是

00:08:20.070 --> 00:08:23.550
我相信他们会在以后找到答案的

00:08:21.780 --> 00:08:25.650
您已经单击了正确的链接，因此

00:08:23.550 --> 00:08:28.140
这些东西这类的

00:08:25.650 --> 00:08:29.670
这个尺寸的这些尺寸

00:08:28.140 --> 00:08:33.560
过程就是您要建模的东西

00:08:29.670 --> 00:08:35.310
在流程引擎中，工作流程引擎

00:08:33.560 --> 00:08:37.410
而且有很多不同

00:08:35.310 --> 00:08:39.080
试图解决这个问题

00:08:37.410 --> 00:08:42.300
很多不同的尝试

00:08:39.080 --> 00:08:44.600
支持这些用例有一个

00:08:42.300 --> 00:08:49.470
特别是被误导的人

00:08:44.600 --> 00:08:52.590
 BPEL几年前，人们是

00:08:49.470 --> 00:08:55.500
描述编排确实为

00:08:52.590 --> 00:08:57.990
编排，笨拙地忽略了

00:08:55.500 --> 00:09:00.060
完全将人类演员的角色

00:08:57.990 --> 00:09:02.760
系统中没有任务列表

00:09:00.060 --> 00:09:05.190
没有建立联系的机制

00:09:02.760 --> 00:09:07.350
工作，然后将工作分配给人们

00:09:05.190 --> 00:09:09.420
在内部系统中

00:09:07.350 --> 00:09:11.400
这有点不幸，因为真的

00:09:09.420 --> 00:09:13.680
你知道我们不需要帮助

00:09:11.400 --> 00:09:15.540
自动连接，我的意思是除了

00:09:13.680 --> 00:09:17.550
可听性的审核很好，但是

00:09:15.540 --> 00:09:21.030
我们真的不需要帮助

00:09:17.550 --> 00:09:22.500
我认为连接服务

00:09:21.030 --> 00:09:24.840
我们已经知道如何做到的服务

00:09:22.500 --> 00:09:29.970
好吧，真正需要去做的是

00:09:24.840 --> 00:09:31.620
做的是建模或设计

00:09:29.970 --> 00:09:33.750
工作中的某种运动

00:09:31.620 --> 00:09:35.580
组织人员参与等等

00:09:33.750 --> 00:09:39.240
这一定是一个大问题

00:09:35.580 --> 00:09:40.740
最终他们创造了，我笑了

00:09:39.240 --> 00:09:44.070
甚至只是在想它，因为它是如此

00:09:40.740 --> 00:09:47.280
他们可以为人而荒谬的BPL 

00:09:44.070 --> 00:09:50.790
对于人们来说，这是一种尝试

00:09:47.280 --> 00:09:53.430
那种明显限制的地址

00:09:50.790 --> 00:09:55.920
对，有点像想象中的建筑

00:09:53.430 --> 00:09:58.110
一个你知道想象的尝试建立

00:09:55.920 --> 00:09:59.940
休眠但没有数据库访问权限

00:09:58.110 --> 00:10:02.190
对，没有能力

00:09:59.940 --> 00:10:04.050
向数据库中写入对象

00:10:02.190 --> 00:10:05.460
真的说这是一个没有，没有那个

00:10:04.050 --> 00:10:09.110
对，这就是重点

00:10:05.460 --> 00:10:12.090
就像我感觉像人一样

00:10:09.110 --> 00:10:15.240
错过了这是一件事，你知道我

00:10:12.090 --> 00:10:17.580
你知道你经常听到

00:10:15.240 --> 00:10:20.180
戏you你有一份工作是

00:10:17.580 --> 00:10:22.470
这是确切的情况，所以输入

00:10:20.180 --> 00:10:23.820
人对于人来说肯定是一个

00:10:22.470 --> 00:10:25.830
选择还有其他一些

00:10:23.820 --> 00:10:27.690
某种专有解决方案或

00:10:25.830 --> 00:10:30.150
当我说专有时，你知道

00:10:27.690 --> 00:10:31.730
 Aqua Aqua BPM，您知道很多

00:10:30.150 --> 00:10:34.350
其他所有这些不同的基础架构

00:10:31.730 --> 00:10:37.290
供应商中间件供应商

00:10:34.350 --> 00:10:41.280
自己的工作流程解决方案，我的旅程开始了

00:10:37.290 --> 00:10:42.840
与十五年前的工作流程

00:10:41.280 --> 00:10:44.550
 11年前发现自己

00:10:42.840 --> 00:10:46.940
在自己的公司里工作

00:10:44.550 --> 00:10:48.900
正确建立自己的高技能

00:10:46.940 --> 00:10:50.580
努力工作，因为我想建立

00:10:48.900 --> 00:10:52.830
支持跨组织的编排工作

00:10:50.580 --> 00:10:54.900
节点数和整合人员

00:10:52.830 --> 00:10:58.460
进入一个长期运行的过程

00:10:54.900 --> 00:11:02.610
管理生产和种类

00:10:58.460 --> 00:11:04.200
视频资产在系统中的移动

00:11:02.610 --> 00:11:06.480
我们想要建立我们想要的能力

00:11:04.200 --> 00:11:08.280
谈论跨多个节点的工作

00:11:06.480 --> 00:11:10.140
这实际上是其中之一

00:11:08.280 --> 00:11:13.230
这比我想像的要重要得多

00:11:10.140 --> 00:11:14.550
微服务世界和

00:11:13.230 --> 00:11:17.670
所以就对了，否则

00:11:14.550 --> 00:11:20.730
单焦点自主微

00:11:17.670 --> 00:11:24.480
可能在某项服务中征募的服务

00:11:20.730 --> 00:11:27.240
较大的封闭过程或过程

00:11:24.480 --> 00:11:28.380
对，所以这个用例感觉非常

00:11:27.240 --> 00:11:31.440
我熟悉

00:11:28.380 --> 00:11:32.730
有专有的解决方案，我

00:11:31.440 --> 00:11:34.980
在这种情况下，请使用专有一词

00:11:32.730 --> 00:11:37.560
现在只是

00:11:34.980 --> 00:11:39.690
不基于标准之一

00:11:37.560 --> 00:11:41.519
那些是开源的jbpm 

00:11:39.690 --> 00:11:43.070
我认为不是Apache 2的应用程序

00:11:41.519 --> 00:11:46.800
许可证，但它是一个开放源代码

00:11:43.070 --> 00:11:48.360
从最初的暴跌

00:11:46.800 --> 00:11:50.250
一个人开始的一个单独的项目

00:11:48.360 --> 00:11:52.889
名为汤姆·贝恩斯的买进

00:11:50.250 --> 00:11:56.490
各方最终降落在

00:11:52.889 --> 00:11:58.980
 Red Hat JBoss小组的Red Hat JB 

00:11:56.490 --> 00:12:04.199
我想现在是JBoss合作社

00:11:58.980 --> 00:12:08.100
在IBM和gbpm上我很漂亮

00:12:04.199 --> 00:12:12.600
喜欢它，最终那得你

00:12:08.100 --> 00:12:17.070
因为某种原因知道就把它留在那里

00:12:12.600 --> 00:12:20.190
巴士jbpm终于发芽了一些确定

00:12:17.070 --> 00:12:25.019
春天的支持，但这就是结束

00:12:20.190 --> 00:12:27.949
 JPM的那棵特定树的生命

00:12:25.019 --> 00:12:30.930
最终团队致力于

00:12:27.949 --> 00:12:32.519
最终去露天

00:12:30.930 --> 00:12:34.680
他们创建了一个新的工作流引擎

00:12:32.519 --> 00:12:36.930
那是汤姆姨妈和你的尴尬

00:12:34.680 --> 00:12:39.269
我的朋友，你嗯，他们去了

00:12:36.930 --> 00:12:40.290
露天，他们创造了一口井

00:12:39.269 --> 00:12:42.329
其实他们都是我的朋友，但是

00:12:40.290 --> 00:12:45.480
乌里姆（Urim）是我与之共处的那个人

00:12:42.329 --> 00:12:48.269
更多的特权

00:12:45.480 --> 00:12:49.709
这些天，他们不是互动

00:12:48.269 --> 00:12:54.390
通常创造一种叫做活动的东西

00:12:49.709 --> 00:12:57.600
 CT IV iti和露天San Apache 2 

00:12:54.390 --> 00:13:01.290
许可开源工作流引擎和

00:12:57.600 --> 00:13:02.390
在2010年父亲戴夫（Dave）父亲在春天

00:13:01.290 --> 00:13:04.079
他向他们伸出援手的团队

00:13:02.390 --> 00:13:05.970
同时不知道

00:13:04.079 --> 00:13:08.490
 Dave的互动吸引了他们

00:13:05.970 --> 00:13:10.560
最终你认识了父亲

00:13:08.490 --> 00:13:13.110
最终贡献了骨骼

00:13:10.560 --> 00:13:16.579
裸露的骨肉

00:13:13.110 --> 00:13:18.540
春天我结束了春天的贡献

00:13:16.579 --> 00:13:22.350
整合框架

00:13:18.540 --> 00:13:25.620
对活动和活动的创新支持

00:13:22.350 --> 00:13:29.519
和博士。父亲裸露的骨头排序

00:13:25.620 --> 00:13:33.660
弹簧插管，然后几次

00:13:29.519 --> 00:13:36.720
几年后回到2014年或15年之一

00:13:33.660 --> 00:13:41.220
我回去的那些，我加了春天

00:13:36.720 --> 00:13:43.019
启动活动支持，您知道

00:13:41.220 --> 00:13:44.399
在那个时候它到达了

00:13:43.019 --> 00:13:46.649
这个东西很难

00:13:44.399 --> 00:13:48.440
以Java代码启动并运行

00:13:46.649 --> 00:13:52.270
顺便说一句，我认为

00:13:48.440 --> 00:13:54.680
与jbpm一样的关键活动

00:13:52.270 --> 00:13:56.540
设计供开发人员使用

00:13:54.680 --> 00:13:59.450
这些是api，您可以将其用作

00:13:56.540 --> 00:14:01.220
库中有一些服务器可以

00:13:59.450 --> 00:14:04.040
购买实际上有基础设施

00:14:01.220 --> 00:14:06.080
您可以购买和部署，但实际上

00:14:04.040 --> 00:14:07.970
对我来说，最棒的地方是我可以接受

00:14:06.080 --> 00:14:08.690
这个图书馆把罐子加进去

00:14:07.970 --> 00:14:10.310
到我的课包里

00:14:08.690 --> 00:14:13.280
让我们春季引导自动配置一个

00:14:10.310 --> 00:14:14.750
流程引擎部署一些流程

00:14:13.280 --> 00:14:16.280
定义，然后我开始

00:14:14.750 --> 00:14:19.400
比赛，我可以将其整合到其中

00:14:16.280 --> 00:14:22.130
可以取消此工作流程解决方案

00:14:19.400 --> 00:14:24.920
我本人的一面

00:14:22.130 --> 00:14:26.060
申请权没问题，我可以

00:14:24.920 --> 00:14:27.740
与所有事物融合

00:14:26.060 --> 00:14:29.540
春天知道包括春天

00:14:27.740 --> 00:14:30.860
我可以进行包括弹簧数据在内的创新

00:14:29.540 --> 00:14:32.990
利用交易管理

00:14:30.860 --> 00:14:34.730
我可以做消息我可以做所有

00:14:32.990 --> 00:14:36.470
这些事情本来会

00:14:34.730 --> 00:14:39.080
在这里很难做

00:14:36.470 --> 00:14:40.760
 10 15年前的解决方案，其中

00:14:39.080 --> 00:14:43.250
您几乎无法控制

00:14:40.760 --> 00:14:48.470
结束时的运行时行为

00:14:43.250 --> 00:14:50.420
规格，所以活动是

00:14:48.470 --> 00:14:52.040
非常有趣的图书馆，我当时

00:14:50.420 --> 00:14:53.330
特别迷恋一件事

00:14:52.040 --> 00:14:56.300
那是新奇的

00:14:53.330 --> 00:15:00.110
支持bpmn好的，所以jbpm 

00:14:56.300 --> 00:15:02.630
支持自己的JP DL工作流程

00:15:00.110 --> 00:15:05.900
只给我Gais BBM的格式

00:15:02.630 --> 00:15:09.170
受支持的BPMN是新规范

00:15:05.900 --> 00:15:12.710
在那个时候，男人也很新

00:15:09.170 --> 00:15:14.210
交货时的规格

00:15:12.710 --> 00:15:18.500
在某种神圣的东西上

00:15:14.210 --> 00:15:22.880
真正的无耻人的圣杯

00:15:18.500 --> 00:15:25.520
我刚刚描述的是

00:15:22.880 --> 00:15:28.460
一种描述执行的方式

00:15:25.520 --> 00:15:30.140
工作流程，但是它的厚度有限

00:15:28.460 --> 00:15:32.320
极限集

00:15:30.140 --> 00:15:35.420
你实际上可以做到这一点

00:15:32.320 --> 00:15:36.950
与之同时存在的是bpmn 

00:15:35.420 --> 00:15:38.839
是业务流程模型， 

00:15:36.950 --> 00:15:42.830
顾名思义的符号

00:15:38.839 --> 00:15:45.980
更着重于

00:15:42.830 --> 00:15:48.020
过程建模，也就是说

00:15:45.980 --> 00:15:50.660
画出你想要的图表

00:15:48.020 --> 00:15:52.640
绘制业务流程模型

00:15:50.660 --> 00:15:55.250
并没有真正形容高管

00:15:52.640 --> 00:15:57.410
组件，但未完全指定

00:15:55.250 --> 00:15:59.570
这些图之一如何

00:15:57.410 --> 00:16:02.810
这些工作流程的视觉图片

00:15:59.570 --> 00:16:04.519
图将映射到运行时语义

00:16:02.810 --> 00:16:05.930
那真是太可惜了

00:16:04.519 --> 00:16:08.360
所以很多不同的基础设施

00:16:05.930 --> 00:16:11.000
中间件厂商提供的产品

00:16:08.360 --> 00:16:14.029
桥接了他们提供的这些世界

00:16:11.000 --> 00:16:16.550
可以让您描述

00:16:14.029 --> 00:16:19.790
使用可视工具的工作流程

00:16:16.550 --> 00:16:22.010
可以拖动并绘制，然后

00:16:19.790 --> 00:16:23.810
将被映射到人或

00:16:22.010 --> 00:16:24.620
它是它的一个子集

00:16:23.810 --> 00:16:25.940
映射到人，那是

00:16:24.620 --> 00:16:27.800
有问题的，因为很难

00:16:25.940 --> 00:16:29.810
往返，因为你可以表达

00:16:27.800 --> 00:16:32.500
 BPMN中无法运行的东西

00:16:29.810 --> 00:16:35.149
人们，因为它是如此有限，所以

00:16:32.500 --> 00:16:37.130
 BPA旨在修正它实际上

00:16:35.149 --> 00:16:41.209
提供它实际指定的

00:16:37.130 --> 00:16:43.610
 B PMON进程的运行时语义和

00:16:41.209 --> 00:16:46.339
我认为这才是真正的去处

00:16:43.610 --> 00:16:48.019
有趣，所以活动支持它

00:16:46.339 --> 00:16:49.760
有弹簧靴支持它支持

00:16:48.019 --> 00:16:50.930
与各种常见的集成

00:16:49.760 --> 00:16:53.810
您可能所处的基础设施

00:16:50.930 --> 00:16:57.230
熟悉，我会说这是非常

00:16:53.810 --> 00:16:58.880
好的开始，一切都会让你知道

00:16:57.230 --> 00:17:03.889
这个行业发展很快，所以

00:16:58.880 --> 00:17:07.490
两年前2016年的中风

00:17:03.889 --> 00:17:10.459
在活动团队中，他们确实想要

00:17:07.490 --> 00:17:12.439
大大扩展

00:17:10.459 --> 00:17:14.209
他们想要超越的工作流程

00:17:12.439 --> 00:17:16.610
基本上是流动的，所以他们创造了一个新的

00:17:14.209 --> 00:17:18.860
公司和一个新项目，名为

00:17:16.610 --> 00:17:21.110
流动性，如果您使用过活动

00:17:18.860 --> 00:17:24.770
然后流动，这也是

00:17:21.110 --> 00:17:26.179
也是基于Apache 2的Spring许可

00:17:24.770 --> 00:17:28.580
现在实际上是端到端

00:17:26.179 --> 00:17:32.090
与Spring集成，这是一个Apache 

00:17:28.580 --> 00:17:33.620
像以前一样许可工作流引擎

00:17:32.090 --> 00:17:35.120
它以相同的方式起作用

00:17:33.620 --> 00:17:36.980
并具有良好的弹簧靴启动器和

00:17:35.120 --> 00:17:40.450
与所有常见的钩子集成

00:17:36.980 --> 00:17:44.690
与您可能是自定义的

00:17:40.450 --> 00:17:47.809
 flowable是一家新公司，这是一家新公司

00:17:44.690 --> 00:17:50.330
产品和项目，进展顺利

00:17:47.809 --> 00:17:53.120
除此之外，它实际上支持案例

00:17:50.330 --> 00:17:55.250
支持决策树的管理

00:17:53.120 --> 00:17:58.010
并支持您知道的建筑形式

00:17:55.250 --> 00:18:01.570
基于流程的动态表单

00:17:58.010 --> 00:18:05.090
有一整套的东西，你

00:18:01.570 --> 00:18:06.799
会发现企业想要正确的

00:18:05.090 --> 00:18:09.410
非常适合不想移动的人

00:18:06.799 --> 00:18:10.640
周围的文件是全球的

00:18:09.410 --> 00:18:12.290
这些东西中，如果你在

00:18:10.640 --> 00:18:14.870
银行，如果您是保险公司，如果

00:18:12.290 --> 00:18:16.110
你在政府，那么全球

00:18:14.870 --> 00:18:18.900
您的一站式服务

00:18:16.110 --> 00:18:21.090
符合建筑审核审核

00:18:18.900 --> 00:18:23.610
处理过程绝对是惊人的

00:18:21.090 --> 00:18:26.420
 BPMN也太正确了，所以进展顺利

00:18:23.610 --> 00:18:29.100
不仅限于今天的流程管理

00:18:26.420 --> 00:18:31.320
我们将专注于流程管理

00:18:29.100 --> 00:18:33.990
描述过程的能力

00:18:31.320 --> 00:18:34.830
有一些步骤，然后才能

00:18:33.990 --> 00:18:36.150
看看看起来像什么

00:18:34.830 --> 00:18:39.330
这就是我们所要做的

00:18:36.150 --> 00:18:42.630
用...构建一个简单的过程

00:18:39.330 --> 00:18:44.250
春季靴mmm，我们将忽略

00:18:42.630 --> 00:18:47.270
现在，这些其他功能

00:18:44.250 --> 00:18:50.250
就像我说的，我认为我们可能最终会做

00:18:47.270 --> 00:18:52.440
其他视频，如果不是现在，也许明天

00:18:50.250 --> 00:18:54.540
合适的孩子，也许明年下周谁

00:18:52.440 --> 00:18:57.780
知道，但这是从简单开始

00:18:54.540 --> 00:19:00.360
好的，我要构建一个简单的演示

00:18:57.780 --> 00:19:01.890
在Spring初始值设定项上，我是

00:19:00.360 --> 00:19:04.860
要使用网络支持，我将使用

00:19:01.890 --> 00:19:07.679
龙目岛我将使用h2我将使用JDBC 

00:19:04.860 --> 00:19:11.429
在这里也支持，我将使用

00:19:07.679 --> 00:19:12.809
执行器，也许我会用JPA，我不是

00:19:11.429 --> 00:19:14.490
确定如果我用过潘恩，我们可能没有

00:19:12.809 --> 00:19:15.960
时间，但是你知道拥有它会很好

00:19:14.490 --> 00:19:19.590
我可能会使用安全性，让我们继续

00:19:15.960 --> 00:19:21.270
并补充说，没有流动

00:19:19.590 --> 00:19:23.100
复选框，但这没关系，因为他们

00:19:21.270 --> 00:19:26.100
已经有一个非常简单的依赖

00:19:23.100 --> 00:19:28.049
您可以添加和那些依赖

00:19:26.100 --> 00:19:30.540
开始依赖的人对

00:19:28.049 --> 00:19:32.429
这些其他类型的存在，所以它会

00:19:30.540 --> 00:19:34.230
自动配置正确的事物是基于

00:19:32.429 --> 00:19:36.950
关于我们在这里试图做的事情，所以让我们

00:19:34.230 --> 00:19:36.950
继续并开始

00:19:59.380 --> 00:20:10.400
已经在路上了，我们去

00:20:08.300 --> 00:20:12.230
我要做的就是添加

00:20:10.400 --> 00:20:13.700
我们需要的依赖

00:20:12.230 --> 00:20:15.200
应用程序让我将此字体

00:20:13.700 --> 00:20:23.270
我之间的距离稍大

00:20:15.200 --> 00:20:26.150
好的朋友，我有

00:20:23.270 --> 00:20:35.360
我将在这里使用的依赖

00:20:26.150 --> 00:20:38.360
一边回到现在的构建

00:20:35.360 --> 00:20:39.770
一句话，所以我可以添加全局弹簧靴

00:20:38.360 --> 00:20:41.540
从基本开始，那会带来

00:20:39.770 --> 00:20:43.640
它会带来的一切

00:20:41.540 --> 00:20:45.170
管理支持我做到了

00:20:43.640 --> 00:20:47.750
将工作流程引擎引入流程

00:20:45.170 --> 00:20:52.160
它将带来的引擎

00:20:47.750 --> 00:20:53.660
在你知道它将带来的一切

00:20:52.160 --> 00:20:54.830
带来决策树的文档

00:20:53.660 --> 00:20:56.930
并带来论坛和带来

00:20:54.830 --> 00:20:58.400
一切，但我不想我所有

00:20:56.930 --> 00:21:00.530
现在只想要流程引擎

00:20:58.400 --> 00:21:02.440
因为正如我所说，存在无限

00:21:00.530 --> 00:21:05.030
我们可以做到的事情数量

00:21:02.440 --> 00:21:09.910
让我们来看看流程将结束引擎

00:21:05.030 --> 00:21:09.910
让我们使用，我猜六步4.0 

00:21:16.530 --> 00:21:21.000
属性6.4零

00:21:24.320 --> 00:21:31.350
好吧，我们在那里

00:21:28.710 --> 00:21:36.660
那就是那个小偷

00:21:31.350 --> 00:21:37.980
引擎呃，你知道那就是

00:21:36.660 --> 00:21:40.440
大部分我们已经中途了

00:21:37.980 --> 00:21:42.120
我们已经可以添加更多我

00:21:40.440 --> 00:21:43.950
可以添加REST API，因此您实际上可以

00:21:42.120 --> 00:21:47.220
如果你只是想建立一个流动的

00:21:43.950 --> 00:21:49.920
服务器基本上正式服务器是

00:21:47.220 --> 00:21:52.650
可以用来启动的REST API 

00:21:49.920 --> 00:21:55.350
查询询问更新状态

00:21:52.650 --> 00:21:57.720
工作流程很好，所以您可以

00:21:55.350 --> 00:21:59.970
有趣的事情在那里我想要

00:21:57.720 --> 00:22:02.490
我要做的是实际建立流程

00:21:59.970 --> 00:22:04.830
因此，按照惯例，如果您按日期

00:22:02.490 --> 00:22:06.840
建立一个流程，然后将其放入

00:22:04.830 --> 00:22:10.380
源主要资源过程

00:22:06.840 --> 00:22:13.410
像这样的目录，它将自动

00:22:10.380 --> 00:22:15.420
在过程中安装该过程

00:22:13.410 --> 00:22:17.010
你说什么流程引擎好

00:22:15.420 --> 00:22:18.570
将被自动配置的

00:22:17.010 --> 00:22:20.520
因为我们已经

00:22:18.570 --> 00:22:21.720
春季启动启动器过程在哪里

00:22:20.520 --> 00:22:24.630
它会自动配置它

00:22:21.720 --> 00:22:27.270
与续集数据库交谈

00:22:24.630 --> 00:22:30.270
存储描述这些的表

00:22:27.270 --> 00:22:31.140
过程及其历史

00:22:30.270 --> 00:22:33.240
数据库，如果我们有

00:22:31.140 --> 00:22:34.800
使用以下内容配置为续集数据库

00:22:33.240 --> 00:22:36.390
常规的弹簧靴就像

00:22:34.800 --> 00:22:38.370
涌现该URL的数据源

00:22:36.390 --> 00:22:40.370
而是会顺从那个权利，所以我们

00:22:38.370 --> 00:22:43.350
可以实际看到全局点

00:22:40.370 --> 00:22:47.790
续集点嘿，你可以看到

00:22:43.350 --> 00:22:49.860
全局配置文件在这里供

00:22:47.790 --> 00:22:52.980
您可能要使用的架构

00:22:49.860 --> 00:22:54.900
对这么近的短语对吧

00:22:52.980 --> 00:22:57.000
在这里，这样就可以安装了

00:22:54.900 --> 00:22:58.230
自动知道你是真的

00:22:57.000 --> 00:23:00.270
已经做完了

00:22:58.230 --> 00:23:02.309
做到这一点过去要多得多

00:23:00.270 --> 00:23:04.140
与David VM一起做困难的事

00:23:02.309 --> 00:23:07.770
以前在早期比较困难

00:23:04.140 --> 00:23:09.240
活动的天，我们已经

00:23:07.770 --> 00:23:11.070
已经有了工作流程的工作流程

00:23:09.240 --> 00:23:12.540
此时的引擎真的很棒，我们

00:23:11.070 --> 00:23:13.740
实际上没有像我这样的REST API 

00:23:12.540 --> 00:23:15.809
说我只选择拥有

00:23:13.740 --> 00:23:17.460
流程引擎不是REST API，不是

00:23:15.809 --> 00:23:19.200
休眠和JPA配置

00:23:17.460 --> 00:23:20.250
没有别的，所以我要继续

00:23:19.200 --> 00:23:26.910
并注释掉一些

00:23:20.250 --> 00:23:28.410
我们不需要还好，就是我们

00:23:26.910 --> 00:23:30.950
让我们看看这是什么

00:23:28.410 --> 00:23:30.950
带进

00:23:31.889 --> 00:23:43.289
所以点击这个，我们有JBC 

00:23:41.820 --> 00:23:55.740
支持测试支持自动

00:23:43.289 --> 00:23:56.100
在此处配置引擎测试

00:23:55.740 --> 00:23:59.100
你走

00:23:56.100 --> 00:24:00.090
带来了很多模块，所以你

00:23:59.100 --> 00:24:01.289
可以看到这些其他模块

00:24:00.090 --> 00:24:02.610
整合有一个驱动力

00:24:01.289 --> 00:24:05.340
支持其中的过程

00:24:02.610 --> 00:24:07.259
处理REST API的应用程序REST API 

00:24:05.340 --> 00:24:08.970
你知道利率定期论文是的

00:24:07.259 --> 00:24:10.230
我的意思是所有这些很酷的东西

00:24:08.970 --> 00:24:12.899
我们现在关心的只是一个

00:24:10.230 --> 00:24:20.879
可流动的流程引擎，所以我会

00:24:12.899 --> 00:24:22.799
而是恢复到我们的更改好吗

00:24:20.879 --> 00:24:29.730
我们是全球性的春季启动者

00:24:22.799 --> 00:24:31.830
过程非常好，现在让我们创建一个

00:24:29.730 --> 00:24:41.039
我有一个非常

00:24:31.830 --> 00:24:46.049
简单的过程BPMN是您知道的吗

00:24:41.039 --> 00:24:50.100
最简单的手写方法

00:24:46.049 --> 00:24:51.389
可以做到，但很容易流动

00:24:50.100 --> 00:24:56.249
方便地带有一个漂亮的小东西

00:24:51.389 --> 00:24:57.269
在这里建模，所以您不需要

00:24:56.249 --> 00:24:59.309
用手写，我当然

00:24:57.269 --> 00:25:01.169
不需要更复杂的东西

00:24:59.309 --> 00:25:02.929
比较复杂，您可以看到它非常

00:25:01.169 --> 00:25:06.269
容易上手这里

00:25:02.929 --> 00:25:08.519
下载flobbles可执行文件spring 

00:25:06.269 --> 00:25:11.070
您可以部署的点点穿的闺房

00:25:08.519 --> 00:25:13.710
他们到经典的servlet环境

00:25:11.070 --> 00:25:17.009
容器还是只做Java-Jar就知道了

00:25:13.710 --> 00:25:19.950
全局-IDM var，然后可流动

00:25:17.009 --> 00:25:21.779
建模者var，您将拥有我拥有的

00:25:19.950 --> 00:25:23.490
 -我的那两条电线都在运转

00:25:21.779 --> 00:25:25.710
在后台，我有

00:25:23.490 --> 00:25:28.080
 API，我有这个视觉建模者

00:25:25.710 --> 00:25:31.799
我实际上可以为决策表建模

00:25:28.080 --> 00:25:36.299
我可以为表格案例建模

00:25:31.799 --> 00:25:43.560
案例使用C mmm，对，您

00:25:36.299 --> 00:25:45.170
知道这一点，这是你的一种方式

00:25:43.560 --> 00:25:47.400
这不只是一个过程，您实际上可以

00:25:45.170 --> 00:25:50.160
如果您实际上是在告诉您

00:25:47.400 --> 00:25:52.470
引擎我有这些需要的东西

00:25:50.160 --> 00:25:54.060
在现实世界中被追踪，他们

00:25:52.470 --> 00:25:57.120
是事件，我希望这些事件能够

00:25:54.060 --> 00:25:58.560
导致以下情况之一

00:25:57.120 --> 00:26:00.270
行动可能是发起新的

00:25:58.560 --> 00:26:01.890
过程，但不仅仅是

00:26:00.270 --> 00:26:03.480
处理本身实际上更多的是

00:26:01.890 --> 00:26:06.000
这更多的是有状态的事情， 

00:26:03.480 --> 00:26:08.400
保持侦听事情的Kalu 

00:26:06.000 --> 00:26:10.230
在外面，这实际上是

00:26:08.400 --> 00:26:12.000
这还有很多，这就是为什么

00:26:10.230 --> 00:26:14.400
我们要煮这也许在

00:26:12.000 --> 00:26:15.930
另一个视频，但现在让我们关注

00:26:14.400 --> 00:26:17.460
流程，我要做的就是

00:26:15.930 --> 00:26:22.070
将要导入的现有流程

00:26:17.460 --> 00:26:25.650
我已经在桌面上了

00:26:22.070 --> 00:26:29.520
这是著名的单任务流程

00:26:25.650 --> 00:26:32.760
对，所以我们到这里来了

00:26:29.520 --> 00:26:34.830
任务用户用户任务实际上是用户

00:26:32.760 --> 00:26:36.930
任务，您可以看到我们有一个

00:26:34.830 --> 00:26:39.560
全功能的视觉视觉建模

00:26:36.930 --> 00:26:43.430
工具，让我们知道您的结构

00:26:39.560 --> 00:26:46.520
我们拥有的组件我们拥有的网关

00:26:43.430 --> 00:26:48.360
我们有活动的泳道

00:26:46.520 --> 00:26:50.550
我现在不谈论的文物

00:26:48.360 --> 00:26:53.430
让我们从这里开始思考

00:26:50.550 --> 00:26:56.550
事件所有进程都从某个地方开始

00:26:53.430 --> 00:26:58.530
你必须要有开始事件

00:26:56.550 --> 00:27:00.420
不同类型的启动基于

00:26:58.530 --> 00:27:01.470
在某个外部事件的基础上

00:27:00.420 --> 00:27:03.750
计时器

00:27:01.470 --> 00:27:05.430
你知道我想做的事

00:27:03.750 --> 00:27:07.320
我将要开始新的过程

00:27:05.430 --> 00:27:12.210
每5秒，无论您拥有什么

00:27:07.320 --> 00:27:14.340
活动，然后让我们看看

00:27:12.210 --> 00:27:18.300
你有活动，这些是指

00:27:14.340 --> 00:27:20.040
主要是任务，所以很常见

00:27:18.300 --> 00:27:23.370
我们今天要使用的是用户

00:27:20.040 --> 00:27:24.780
任务和服务任务用户任务是

00:27:23.370 --> 00:27:26.550
分配给某人的任务，所以您

00:27:24.780 --> 00:27:27.900
可以看到有他们的人

00:27:26.550 --> 00:27:30.060
他们进入脑袋的正确剪影

00:27:27.900 --> 00:27:32.700
剪影在那里，服务任务是

00:27:30.060 --> 00:27:33.930
它是一种自动的东西

00:27:32.700 --> 00:27:35.670
图的一部分，这实际上是

00:27:33.930 --> 00:27:38.220
这是一个流程图

00:27:35.670 --> 00:27:41.100
对，所以您会看到

00:27:38.220 --> 00:27:45.270
工作流程将从左侧开始

00:27:41.100 --> 00:27:47.640
在这一点上完成人工任务

00:27:45.270 --> 00:27:50.010
会有一个我可以查询的清单

00:27:47.640 --> 00:27:52.679
对，我实际上可以以编程方式

00:27:50.010 --> 00:27:56.970
问引擎我可以说嘿

00:27:52.679 --> 00:27:59.549
你知道这些过程的任务

00:27:56.970 --> 00:28:03.330
非常出色，我可以说很好

00:27:59.549 --> 00:28:05.370
那这个过程的任务呢

00:28:03.330 --> 00:28:07.679
这个特定的用户权利，所以当我

00:28:05.370 --> 00:28:09.090
启动这个过程我可以给它

00:28:07.679 --> 00:28:11.789
我可以说参数是

00:28:09.090 --> 00:28:15.120
您知道的客户ID的流程1 2 3 

00:28:11.789 --> 00:28:19.020
然后我可以说好的流程引擎

00:28:15.120 --> 00:28:23.400
告诉我有多少过程卡住了

00:28:19.020 --> 00:28:25.860
在此等待我的任务

00:28:23.400 --> 00:28:28.409
用户，您知道我是以以下身份登录

00:28:25.860 --> 00:28:31.650
例如对，这样我就可以

00:28:28.409 --> 00:28:34.260
我能说给我所有的工作吗

00:28:31.650 --> 00:28:37.409
在此特定过程中为此用户

00:28:34.260 --> 00:28:37.830
然后我可以完成它或者我可以

00:28:37.409 --> 00:28:40.110
忽略它

00:28:37.830 --> 00:28:42.840
但是当工作流引擎暂停时

00:28:40.110 --> 00:28:45.900
这里将状态保存到系统中

00:28:42.840 --> 00:28:47.880
它走了，不，它不会前进

00:28:45.900 --> 00:28:49.830
直到有人过来说嘿

00:28:47.880 --> 00:28:51.809
我要清理这个任务，我要

00:28:49.830 --> 00:28:54.480
正确完成我要说的是

00:28:51.809 --> 00:28:55.650
你知道是谁做的吗

00:28:54.480 --> 00:28:57.450
不必是我不必

00:28:55.650 --> 00:28:59.309
指定用户，但您可以指出的是

00:28:57.450 --> 00:29:00.960
这是一项艰巨的任务

00:28:59.309 --> 00:29:03.299
可以分配给可以的人

00:29:00.960 --> 00:29:05.190
实际出现在某人的

00:29:03.299 --> 00:29:07.049
你可以把工作清单弄干

00:29:05.190 --> 00:29:09.150
可以绘制一个屏幕，显示所有

00:29:07.049 --> 00:29:11.159
必须完成的工作，然后他们

00:29:09.150 --> 00:29:13.650
可以做他们必须要做的一切

00:29:11.159 --> 00:29:15.360
他们可以审查表格吗？ 

00:29:13.650 --> 00:29:16.799
知道可以上传一些信息

00:29:15.360 --> 00:29:18.809
打电话给他们想做什么

00:29:16.799 --> 00:29:22.380
他们可以说确定，我已经完成或系统

00:29:18.809 --> 00:29:24.630
可以根据他们的输入说好

00:29:22.380 --> 00:29:26.760
任务完成，然后可以正式

00:29:24.630 --> 00:29:30.480
然后以编程方式在

00:29:26.760 --> 00:29:32.460
流程前进到哪一点

00:29:30.480 --> 00:29:34.710
图中的下一个节点，这仅仅是

00:29:32.460 --> 00:29:37.440
服务任务，这仅仅是一个基本的

00:29:34.710 --> 00:29:39.990
逃脱孵化只是我们的能力

00:29:37.440 --> 00:29:44.210
我们用来称呼这个东西的东西

00:29:39.990 --> 00:29:46.950
调用其他代码的另一件事

00:29:44.210 --> 00:29:49.200
你知道那是什么

00:29:46.950 --> 00:29:50.850
你可以是一个班级也可以是一个

00:29:49.200 --> 00:29:53.789
春季表达语言表达

00:29:50.850 --> 00:29:56.159
当然可以因为紧缩

00:29:53.789 --> 00:29:58.230
与spring解除引用集成

00:29:56.159 --> 00:29:59.400
您的应用程序上下文中的spring bean 

00:29:58.230 --> 00:30:01.919
因此您实际上可以在

00:29:59.400 --> 00:30:04.740
其他豆子等等，然后一次

00:30:01.919 --> 00:30:06.750
完成后，它将进入最终状态， 

00:30:04.740 --> 00:30:09.179
所以我实际上可以

00:30:06.750 --> 00:30:09.910
拿谁知道是对的，我的意思是想象这个

00:30:09.179 --> 00:30:14.830
报名参加

00:30:09.910 --> 00:30:18.670
想象有人进入一个你知道的

00:30:14.830 --> 00:30:20.860
电子邮件，并且您知道您有一个

00:30:18.670 --> 00:30:22.480
电子邮件和您在其中创建的用户ID 

00:30:20.860 --> 00:30:25.090
数据库，然后您开始

00:30:22.480 --> 00:30:28.000
过程，过程就是过程

00:30:25.090 --> 00:30:29.920
填充或丰富其余部分

00:30:28.000 --> 00:30:32.110
数据，您知道您可能会

00:30:29.920 --> 00:30:34.390
启动该过程，它可能永远不会

00:30:32.110 --> 00:30:36.130
完成它可能永远不会完成，但嗯

00:30:34.390 --> 00:30:38.380
您启动该过程，您可以说

00:30:36.130 --> 00:30:40.060
我们正在等待用户填写

00:30:38.380 --> 00:30:41.800
他们这样做时的其余形式

00:30:40.060 --> 00:30:43.450
他们填满后我们会完成

00:30:41.800 --> 00:30:44.710
拿出这份表格的其余部分，然后发送

00:30:43.450 --> 00:30:46.810
向他们发送服务中的电子邮件

00:30:44.710 --> 00:30:48.700
任务一旦完成，我们就完成了

00:30:46.810 --> 00:30:50.680
用户已被注册，这是一个

00:30:48.700 --> 00:30:51.670
非常简单的示例，现在您可以做一些

00:30:50.680 --> 00:30:54.880
这里真的很有趣

00:30:51.670 --> 00:30:55.840
说哦，好吧，这张表格的结果是

00:30:54.880 --> 00:30:57.640
我们有一个新的记录

00:30:55.840 --> 00:31:00.700
创建新ID的数据库，以及

00:30:57.640 --> 00:31:03.880
我们现在已经将该ID附加到此

00:31:00.700 --> 00:31:05.650
作为过程变量的过程，所以

00:31:03.880 --> 00:31:08.020
现在下游的东西就像服务

00:31:05.650 --> 00:31:09.880
任务可以说哦，我可以看到流程

00:31:08.020 --> 00:31:11.560
变量，它只是一个字符串，它只是一个

00:31:09.880 --> 00:31:14.260
用布尔值ID标识这些数字

00:31:11.560 --> 00:31:17.020
图元可以在图中移动

00:31:14.260 --> 00:31:18.670
在流程图中，您可以执行

00:31:17.020 --> 00:31:21.100
你可以说的话哦，也许那个

00:31:18.670 --> 00:31:23.080
你知道我可以使用过程变量

00:31:21.100 --> 00:31:25.450
设置过程的开始

00:31:23.080 --> 00:31:26.860
或它开始后的某个部分

00:31:25.450 --> 00:31:29.530
可以使用那些过程变量

00:31:26.860 --> 00:31:32.470
下游我可以说很好

00:31:29.530 --> 00:31:34.900
我正在评估的这种情况

00:31:32.470 --> 00:31:37.450
看变量或通过

00:31:34.900 --> 00:31:39.100
方法条件的变量

00:31:37.450 --> 00:31:41.680
基于某种评估

00:31:39.100 --> 00:31:43.270
基于这个结果，我要么去这里

00:31:41.680 --> 00:31:45.400
否则我要去那里，所以我可能会说哦

00:31:43.270 --> 00:31:50.020
这个输入是无效的，我可能

00:31:45.400 --> 00:31:51.970
具有某种递归效果

00:31:50.020 --> 00:31:54.010
我回到第一步来收集

00:31:51.970 --> 00:31:55.720
您知道更多的输入，我可以继续做

00:31:54.010 --> 00:31:57.430
无限的广告无限

00:31:55.720 --> 00:31:59.680
需要几年的时间

00:31:57.430 --> 00:32:01.450
分钟，你什么都知道，然后

00:31:59.680 --> 00:32:03.040
终于一次数据一次这个东西

00:32:01.450 --> 00:32:05.170
说所有数据都是有效的

00:32:03.040 --> 00:32:09.250
返回到此它发送电子邮件，所以你

00:32:05.170 --> 00:32:11.830
可以做到，您可以在哪里做网关

00:32:09.250 --> 00:32:14.080
你可能有这个，你知道这个

00:32:11.830 --> 00:32:16.090
您收集一些的任务收集一些

00:32:14.080 --> 00:32:17.830
完成信息后，您

00:32:16.090 --> 00:32:21.400
知道你可能会说哦，我要设置一些

00:32:17.830 --> 00:32:23.770
在这里发送电子邮件，我将开始

00:32:21.400 --> 00:32:25.600
另一个流另一个

00:32:23.770 --> 00:32:27.250
他从处理另一部分

00:32:25.600 --> 00:32:30.190
图的另一个分支

00:32:27.250 --> 00:32:33.130
在这里，我们将要发送

00:32:30.190 --> 00:32:34.210
他们无论你实现什么

00:32:33.130 --> 00:32:35.920
知道我们要开始实现

00:32:34.210 --> 00:32:38.200
流程，否则我们将向他们发送卡片

00:32:35.920 --> 00:32:39.670
你知道会员卡什么权利

00:32:38.200 --> 00:32:42.010
你可能会做两个不同的事情

00:32:39.670 --> 00:32:44.080
事情在同一时间，所以在这个

00:32:42.010 --> 00:32:45.460
如果您有一个并行网关， 

00:32:44.080 --> 00:32:47.710
你实际上是在发送你的开始

00:32:45.460 --> 00:32:50.980
两种不同的执行流程

00:32:47.710 --> 00:32:52.180
碰巧同时发生，你可以去

00:32:50.980 --> 00:32:54.910
甚至走得更远，您都可以说还可以

00:32:52.180 --> 00:32:57.220
好吧，这个分支的这一步

00:32:54.910 --> 00:32:59.770
这不仅仅是一项服务任务

00:32:57.220 --> 00:33:01.570
这是整个其他过程

00:32:59.770 --> 00:33:03.790
现在开始，我们已经过去了

00:33:01.570 --> 00:33:05.620
这个我想我想开始

00:33:03.790 --> 00:33:06.670
整个新过程，所以在这种情况下，您

00:33:05.620 --> 00:33:08.890
有你可以在它启动时

00:33:06.670 --> 00:33:10.120
您可以将其称为子流程

00:33:08.890 --> 00:33:12.220
实际上而不是只有一点点

00:33:10.120 --> 00:33:14.320
您可以在另一个过程中启动的任务

00:33:12.220 --> 00:33:17.230
反过来又有自己的步骤， 

00:33:14.320 --> 00:33:18.910
状态和过程变量和白色

00:33:17.230 --> 00:33:20.440
步骤和所有正确的事情，这样

00:33:18.910 --> 00:33:23.410
可能是其他一些过程

00:33:20.440 --> 00:33:25.090
旨在让您知道

00:33:23.410 --> 00:33:27.040
可以冒险冒险或您

00:33:25.090 --> 00:33:29.230
可以完成履行过程

00:33:27.040 --> 00:33:30.340
你也许这个过程是为了什么时候

00:33:29.230 --> 00:33:32.110
有人在你的东西上点菜

00:33:30.340 --> 00:33:34.090
现在您需要做的电子商务引擎

00:33:32.110 --> 00:33:36.340
您需要知道的成就

00:33:34.090 --> 00:33:38.950
运输和跟踪以及信用卡

00:33:36.340 --> 00:33:41.890
验证所有正确的内容，以便您

00:33:38.950 --> 00:33:45.730
可以在这里建模非常复杂的东西

00:33:41.890 --> 00:33:48.070
这些原语，结果就是VPN 

00:33:45.730 --> 00:33:49.990
 XML文档，这样您就可以

00:33:48.070 --> 00:33:52.450
看到这看起来像你可以

00:33:49.990 --> 00:33:58.090
实际上选择保存这只命中

00:33:52.450 --> 00:34:05.770
保存权利，我要点击取消，你

00:33:58.090 --> 00:34:09.240
可以那样或那样使用它

00:34:05.770 --> 00:34:15.399
您可以复制并粘贴文件吗

00:34:09.240 --> 00:34:19.360
进入您的进程目录好吧

00:34:15.399 --> 00:34:22.300
这就是这里，这是我的任务

00:34:19.360 --> 00:34:24.550
我的单一任务流程，这是你知道的

00:34:22.300 --> 00:34:26.080
简单的例子，这很简单

00:34:24.550 --> 00:34:28.480
文档中的

00:34:26.080 --> 00:34:32.470
基本上，让我们看看这是什么

00:34:28.480 --> 00:34:35.230
这是否表示您知道我要去哪里

00:34:32.470 --> 00:34:36.710
做到这一点将很简单

00:34:35.230 --> 00:34:41.059
这个过程很糟糕

00:34:36.710 --> 00:34:42.980
好吧，我不知道有什么更好的

00:34:41.059 --> 00:34:50.780
我们可以说注册更好的流程

00:34:42.980 --> 00:34:57.490
过程还可以，非常简单，注册一个新的

00:34:50.780 --> 00:35:01.430
用户进程进程是好的，并且

00:34:57.490 --> 00:35:02.809
开始，您可以看到当我有一个

00:35:01.430 --> 00:35:04.550
开始事件就是这样

00:35:02.809 --> 00:35:07.069
启动进程，它是第一个节点

00:35:04.550 --> 00:35:10.309
在图中，然后我需要连接

00:35:07.069 --> 00:35:12.440
这个节点到这个节点，我做到了

00:35:10.309 --> 00:35:14.780
通过序列流元素，所以这里

00:35:12.440 --> 00:35:18.559
我要说我要把工作

00:35:14.780 --> 00:35:30.790
从头开始确认

00:35:18.559 --> 00:35:36.770
电子邮件任务正确，这将是

00:35:30.790 --> 00:35:38.960
确认电子邮件，最后确认该任务

00:35:36.770 --> 00:35:41.630
当那个任务被取消时

00:35:38.960 --> 00:35:44.390
然后手动或显式标记

00:35:41.630 --> 00:35:45.829
完成后，工作将继续进行

00:35:44.390 --> 00:35:53.150
电子邮件任务

00:35:45.829 --> 00:35:55.700
好的，发送欢迎电子邮件任务，好的， 

00:35:53.150 --> 00:35:59.450
在这里，我们将只发送欢迎

00:35:55.700 --> 00:36:02.299
电子邮件，然后我们将发送给

00:35:59.450 --> 00:36:04.099
通过呼叫存在服务来发送电子邮件

00:36:02.299 --> 00:36:06.440
在我们称为电子邮件的应用程序上下文中

00:36:04.099 --> 00:36:09.440
服务我要打电话给圣欢迎

00:36:06.440 --> 00:36:11.750
我们将发送欢迎电子邮件的电子邮件

00:36:09.440 --> 00:36:13.490
该客户ID和网站

00:36:11.750 --> 00:36:17.420
这封电子邮件以及这些变量

00:36:13.490 --> 00:36:26.980
变量将传递给您

00:36:17.420 --> 00:36:31.670
知道我们需要客户ID和电子邮件

00:36:26.980 --> 00:36:33.049
过程变量好，所以那些过程

00:36:31.670 --> 00:36:35.030
变量就像参数

00:36:33.049 --> 00:36:36.230
方法调用，因此我们可以期待

00:36:35.030 --> 00:36:38.480
它们对于整个人都是可见的

00:36:36.230 --> 00:36:42.260
这个过程的生命最后就是

00:36:38.480 --> 00:36:44.660
当该电子邮件是

00:36:42.260 --> 00:36:46.940
发送，那么这将自动

00:36:44.660 --> 00:36:49.660
完成，它将根据

00:36:46.940 --> 00:36:52.150
为此结束

00:36:49.660 --> 00:36:54.579
这是如此非常非常简单

00:36:52.150 --> 00:36:57.430
工作流程过程没什么特别的

00:36:54.579 --> 00:36:59.349
看中了，这就是我们设计的原因

00:36:57.430 --> 00:37:02.799
理论上可以用手直接键入

00:36:59.349 --> 00:37:05.230
您看到我们还不错

00:37:02.799 --> 00:37:06.910
正确的全局命名空间

00:37:05.230 --> 00:37:08.619
这是您能够使用的标准的一部分

00:37:06.910 --> 00:37:11.259
扩展工作流程的定义

00:37:08.619 --> 00:37:15.490
 BPMN工作流通过添加以下内容

00:37:11.259 --> 00:37:17.079
正确的名称空间，所以在这里

00:37:15.490 --> 00:37:19.930
我们是说我想使用一个表达式

00:37:17.079 --> 00:37:25.210
在这里，我们说的是

00:37:19.930 --> 00:37:26.500
启动过程的人是

00:37:25.210 --> 00:37:28.779
叫做发起者，我们将

00:37:26.500 --> 00:37:32.380
将其存储在某个地方，然后引用

00:37:28.779 --> 00:37:34.329
好的，这就是说图

00:37:32.380 --> 00:37:35.589
找出谁在启动流程存储

00:37:34.329 --> 00:37:37.960
它在某处作为变量

00:37:35.589 --> 00:37:40.390
流程定义，然后当我们

00:37:37.960 --> 00:37:42.819
说我要的流水单受让人

00:37:40.390 --> 00:37:44.680
要不要引用

00:37:42.819 --> 00:37:46.119
在这种情况下，我们没有发起者

00:37:44.680 --> 00:37:47.589
真的我们还没有建立身份

00:37:46.119 --> 00:37:48.789
管理虽然你可以和你

00:37:47.589 --> 00:37:49.990
可能会给过程带来麻烦

00:37:48.789 --> 00:37:51.759
你自己，在这种情况下你不需要

00:37:49.990 --> 00:37:54.039
你可以做各种各样的事情

00:37:51.759 --> 00:37:56.109
但是对于我们正在做的事情

00:37:54.039 --> 00:38:00.700
真的很重要，所以让我们现在整合

00:37:56.109 --> 00:38:02.470
这会流到我们的代码中，所以我

00:38:00.700 --> 00:38:04.029
猜猜我不确定我是否知道那是什么

00:38:02.470 --> 00:38:08.140
我想我们最简单的演示方法

00:38:04.029 --> 00:38:10.230
可以只制作一个演示预告片

00:38:08.140 --> 00:38:15.630
春豆一个你知道的常规过程

00:38:10.230 --> 00:38:18.069
演示好吧，我们只是手动

00:38:15.630 --> 00:38:22.509
操作这个过程的API 

00:38:18.069 --> 00:38:27.579
引擎API驱动运动

00:38:22.509 --> 00:38:35.559
这个过程显示进度

00:38:27.579 --> 00:38:40.119
好的，所以要注册新用户，但不是

00:38:35.559 --> 00:38:41.980
很难看到或理解你

00:38:40.119 --> 00:38:43.809
知道你会拥有这些

00:38:41.980 --> 00:38:46.089
不同的事情发生在背后

00:38:43.809 --> 00:38:47.589
例如REST API或按钮点击

00:38:46.089 --> 00:38:49.599
 Spring MVC应用程序或反应式

00:38:47.589 --> 00:38:54.779
应用程序或其他

00:38:49.599 --> 00:38:57.910
我要解决这个问题

00:38:54.779 --> 00:38:59.859
现在注入流程引擎

00:38:57.910 --> 00:39:01.420
通常如果你有点笨拙

00:38:59.859 --> 00:39:02.690
不知道要去哪里注射

00:39:01.420 --> 00:39:04.370
流程引擎

00:39:02.690 --> 00:39:06.770
好的，流程引擎就是心脏

00:39:04.370 --> 00:39:09.860
 API的过程引擎是一个非常

00:39:06.770 --> 00:39:11.000
简单的结构在这里依次

00:39:09.860 --> 00:39:12.950
给你指向另一个

00:39:11.000 --> 00:39:15.170
工作流程中有趣的对象

00:39:12.950 --> 00:39:17.680
引擎，因此您可以访问

00:39:15.170 --> 00:39:20.900
 pritchett的存储库服务

00:39:17.680 --> 00:39:22.370
插入不同的表

00:39:20.900 --> 00:39:26.770
你有运行时服务

00:39:22.370 --> 00:39:29.120
使您可以访问该过程

00:39:26.770 --> 00:39:31.600
实例，所以您拥有流程和

00:39:29.120 --> 00:39:34.340
那就是流程的定义

00:39:31.600 --> 00:39:35.870
该过程何时启动

00:39:34.340 --> 00:39:37.850
该过程的实例称为

00:39:35.870 --> 00:39:39.440
您想要获得的流程实例

00:39:37.850 --> 00:39:41.480
特定过程的变量

00:39:39.440 --> 00:39:44.270
实例，你也可以做到

00:39:41.480 --> 00:39:45.800
来自运行时服务的所有内容

00:39:44.270 --> 00:39:49.250
任务服务就是关于交互

00:39:45.800 --> 00:39:51.170
已经完成的任务

00:39:49.250 --> 00:39:53.660
知道在这里，例如我要

00:39:51.170 --> 00:39:56.480
能够找到所有优秀的

00:39:53.660 --> 00:39:58.730
未完成的已确认电子邮件任务对吧

00:39:56.480 --> 00:40:02.990
可以使用任务服务标识来做到这一点

00:39:58.730 --> 00:40:05.510
服务关系到您如何教手机

00:40:02.990 --> 00:40:07.340
关于您了解用户是否

00:40:05.510 --> 00:40:09.710
通过LDAP或Active Directory或

00:40:07.340 --> 00:40:11.480
春季安全保障或其他

00:40:09.710 --> 00:40:12.620
有一个你知道数量不同

00:40:11.480 --> 00:40:14.330
在这里，你甚至有这个东西

00:40:12.620 --> 00:40:15.530
我是新手，我不是

00:40:14.330 --> 00:40:18.320
其实对这件事了解太多

00:40:15.530 --> 00:40:19.970
但是因为直到那时才真正出现

00:40:18.320 --> 00:40:21.260
稍后进行活动，但这实际上是

00:40:19.970 --> 00:40:24.790
非常有趣，如果您想

00:40:21.260 --> 00:40:27.100
创建新的执行动态分支

00:40:24.790 --> 00:40:29.930
当引擎运转时

00:40:27.100 --> 00:40:31.880
好吧，你有一个正在运行的过程，所以

00:40:29.930 --> 00:40:34.070
请记住此流程定义

00:40:31.880 --> 00:40:36.350
我刚刚告诉你这是固定的

00:40:34.070 --> 00:40:38.210
图是一个模板

00:40:36.350 --> 00:40:42.380
代表

00:40:38.210 --> 00:40:45.470
一旦确定了它的刚性

00:40:42.380 --> 00:40:48.440
僵硬的，这就是你

00:40:45.470 --> 00:40:50.300
不能真正改变这种动态

00:40:48.440 --> 00:40:51.920
一旦您有两个启动实例

00:40:50.300 --> 00:40:54.620
您可以部署一个新的执行

00:40:51.920 --> 00:40:56.000
流程定义权限的实例

00:40:54.620 --> 00:40:58.040
您可以部署新版本

00:40:56.000 --> 00:41:00.140
流动但实际上在幕后

00:40:58.040 --> 00:41:02.360
版本化流程定义，以便您

00:41:00.140 --> 00:41:05.270
你能知道三个或四个吗

00:41:02.360 --> 00:41:08.780
飞行中版本窗口的处理

00:41:05.270 --> 00:41:13.490
无论什么定义

00:41:08.780 --> 00:41:14.900
可以在飞行中做到这一点，但可以

00:41:13.490 --> 00:41:15.890
启动一个新的或部署新的

00:41:14.900 --> 00:41:18.589
那将是

00:41:15.890 --> 00:41:21.230
在新的执行中使用，因此

00:41:18.589 --> 00:41:23.720
支持这种排序的流程引擎

00:41:21.230 --> 00:41:24.799
实际上是那个版本

00:41:23.720 --> 00:41:26.900
运行时服务的一部分，那就是

00:41:24.799 --> 00:41:28.849
历史服务的一部分，因此您已经

00:41:26.900 --> 00:41:30.650
还有其他事情可以做到这一点，但这

00:41:28.849 --> 00:41:32.960
特别是如果我想

00:41:30.650 --> 00:41:35.029
动态地在

00:41:32.960 --> 00:41:37.880
正在运行的现有流程实例

00:41:35.029 --> 00:41:40.430
现在，我可以这样做，我可以使用

00:41:37.880 --> 00:41:42.890
流程引擎，但实际上对我们而言

00:41:40.430 --> 00:41:45.319
目的，我们会没事的

00:41:42.890 --> 00:41:50.269
只是运行时服务和任务

00:41:45.319 --> 00:41:51.650
服务，因此运行时服务和所有

00:41:50.269 --> 00:41:54.980
这是可能的，因为他们已经

00:41:51.650 --> 00:41:56.480
得到了对写bean的引用

00:41:54.980 --> 00:41:58.010
由于Springwood Auto配置

00:41:56.480 --> 00:42:02.420
为我们做到了

00:41:58.010 --> 00:42:07.839
正确的运行时服务测试服务和

00:42:02.420 --> 00:42:10.940
将其检查到构造函数中

00:42:07.839 --> 00:42:14.150
所以我们有一个过程，我们有一个演示

00:42:10.940 --> 00:42:15.260
我们将推出一个

00:42:14.150 --> 00:42:17.410
我们要做什么

00:42:15.260 --> 00:42:19.579
在这里创建几种启动方法

00:42:17.410 --> 00:42:23.000
流程，再一次您可以想象

00:42:19.579 --> 00:42:26.089
挂在REST API旁边

00:42:23.000 --> 00:42:27.619
响应用户，您知道是否

00:42:26.089 --> 00:42:31.599
有人点击了登录表单，或者

00:42:27.619 --> 00:42:38.299
所以说我们已经虚无

00:42:31.599 --> 00:42:40.130
可以开始这里的客户注册

00:42:38.299 --> 00:42:42.049
我们已经创建了用户，但是

00:42:40.130 --> 00:42:43.549
一个空用户，它在数据库中，但是

00:42:42.049 --> 00:42:44.569
有一大堆没有领域， 

00:42:43.549 --> 00:42:46.849
顺便说一句是

00:42:44.569 --> 00:42:48.740
在这些长期运行的过程中

00:42:46.849 --> 00:42:52.369
这些长时间运行的任务

00:42:48.740 --> 00:42:54.319
业务流程是我们拥有的一种方式

00:42:52.369 --> 00:42:55.549
我敢肯定，您已经看过一种方法了

00:42:54.319 --> 00:43:00.410
人们尝试解决这些问题

00:42:55.549 --> 00:43:03.799
问题是他们使客户困惑

00:43:00.410 --> 00:43:05.960
布尔型的实体，你不知道

00:43:03.799 --> 00:43:07.759
不知道实现了吗，你知道吗

00:43:05.960 --> 00:43:08.869
它是否已注册用户？ 

00:43:07.759 --> 00:43:12.200
知道等等所有这些

00:43:08.869 --> 00:43:14.059
旨在为您提供帮助的东西

00:43:12.200 --> 00:43:16.160
用户在过程中的位置的想法

00:43:14.059 --> 00:43:17.930
而你最终不得不做这些

00:43:16.160 --> 00:43:20.119
如果这个和那个以及那个复杂

00:43:17.930 --> 00:43:23.660
那么那我们就在这里，如果这

00:43:20.119 --> 00:43:25.130
完成，然后很棒，那就是

00:43:23.660 --> 00:43:26.869
效率低下，因为您必须检查

00:43:25.130 --> 00:43:28.819
那个状态，动不动就知道

00:43:26.869 --> 00:43:29.720
您在图表上的位置，以便

00:43:28.819 --> 00:43:31.220
流程停留

00:43:29.720 --> 00:43:32.780
最终居住在企业实体中

00:43:31.220 --> 00:43:34.310
但它真的不应该在那里

00:43:32.780 --> 00:43:36.050
我们有一个应有的客户

00:43:34.310 --> 00:43:39.080
是，它要么有效，要么无效

00:43:36.050 --> 00:43:41.420
是的，但是应该是过程状态

00:43:39.080 --> 00:43:44.390
存在于流程定义中，所以这里

00:43:41.420 --> 00:43:46.609
我们可以使用工作流来存储

00:43:44.390 --> 00:43:47.960
在图中我们在哪里，所以我要

00:43:46.609 --> 00:43:50.480
创建一个我要开始一个客户

00:43:47.960 --> 00:43:50.810
报名过程

00:43:50.480 --> 00:43:53.900
来电

00:43:50.810 --> 00:43:56.300
每当有人填写您的表格时

00:43:53.900 --> 00:43:58.220
知道输入电子邮件，等等

00:43:56.300 --> 00:44:00.440
然后我们进入数据库，将其保存在

00:43:58.220 --> 00:44:02.900
名字基础，我们说这是一个品牌

00:44:00.440 --> 00:44:04.340
新实体，但这是无效的权利，我们可以

00:44:02.900 --> 00:44:07.460
有一个布尔标记，称为无效I 

00:44:04.340 --> 00:44:11.119
猜测之类的，我们想要一封电子邮件

00:44:07.460 --> 00:44:13.780
对，所以有些电子邮件没问题，所以

00:44:11.119 --> 00:44:16.070
那就是我们想说的一件事

00:44:13.780 --> 00:44:17.630
你知道，我想说让我们

00:44:16.070 --> 00:44:19.490
只是说我们有一些弦乐

00:44:17.630 --> 00:44:22.220
返回到能够

00:44:19.490 --> 00:44:23.540
进一步关联好吧，所以我们想

00:44:22.220 --> 00:44:29.680
很好，我们希望能够做到这一点

00:44:23.540 --> 00:44:36.280
实际创建记录器的日志

00:44:29.680 --> 00:44:40.520
日志信息我们想返回什么

00:44:36.280 --> 00:44:44.950
我想我们真的不需要做任何事情

00:44:40.520 --> 00:44:44.950
我们对，我们可以返回一个布尔值

00:44:47.260 --> 00:44:51.410
我们要做的是当我们打开

00:44:49.520 --> 00:44:53.589
流程instanceid我们不需要这个

00:44:51.410 --> 00:44:59.410
很高兴能够观察到它

00:44:53.589 --> 00:45:03.380
所以这是当我说这个时

00:44:59.410 --> 00:45:05.390
那和我们想要的客户ID 

00:45:03.380 --> 00:45:07.940
让我们只说我们有一个

00:45:05.390 --> 00:45:10.190
客户ID为1，电子邮件为

00:45:07.940 --> 00:45:13.160
在电子邮件通讯中发送电子邮件，这不是真实的

00:45:10.190 --> 00:45:14.920
电子邮件肯定可以，所以现在在这里

00:45:13.160 --> 00:45:17.630
指出有人提交了表格， 

00:45:14.920 --> 00:45:19.760
他们知道你可能是

00:45:17.630 --> 00:45:22.940
包含一些JSON数据的REST API 

00:45:19.760 --> 00:45:25.580
这是一种形式，无论我们有客户如何

00:45:22.940 --> 00:45:28.550
 ID和电子邮件，我们有一个对象

00:45:25.580 --> 00:45:29.839
大概是数据库，所以我们要

00:45:28.550 --> 00:45:32.060
弄清楚开始

00:45:29.839 --> 00:45:36.880
用这些过程变量处理

00:45:32.060 --> 00:45:41.450
用这种方法，最后

00:45:36.880 --> 00:45:43.490
最后我们要去抬头

00:45:41.450 --> 00:45:46.040
现有任务是因为

00:45:43.490 --> 00:45:48.290
那一点它会自动

00:45:46.040 --> 00:45:51.410
它会自动从

00:45:48.290 --> 00:45:54.350
这是用户测试图

00:45:51.410 --> 00:45:57.110
它不是一个任务列表

00:45:54.350 --> 00:45:59.990
确认的未完成电子邮件任务

00:45:57.110 --> 00:46:01.490
这是这个过程的一部分吗

00:45:59.990 --> 00:46:03.680
在这种情况下，发现者只会

00:46:01.490 --> 00:46:06.890
成为一个人，所以你可以说很好

00:46:03.680 --> 00:46:08.330
找到我的所有确认电子邮件任务

00:46:06.890 --> 00:46:14.090
我们拥有其客户ID的客户

00:46:08.330 --> 00:46:22.000
提供，那么它将如何运作良好，我们

00:46:14.090 --> 00:46:30.340
会说完成，你知道完成

00:46:22.000 --> 00:46:30.340
确认电子邮件好字符串客户ID 

00:46:30.970 --> 00:46:35.330
好的，就是这样，我想

00:46:33.230 --> 00:46:36.530
为了工作的轻松，我们可以

00:46:35.330 --> 00:46:42.220
参考让我们将其提取到

00:46:36.530 --> 00:46:44.710
客户ID变量创建该方法

00:46:42.220 --> 00:46:50.150
好，所以我们去那里是我的

00:46:44.710 --> 00:46:57.040
确认好，你要确认

00:46:50.150 --> 00:46:57.040
给我发电子邮件

00:46:57.950 --> 00:47:03.079
好吧，所以我知道你的自信

00:47:00.599 --> 00:47:05.609
这大概是异步发生的

00:47:03.079 --> 00:47:08.250
对，这可能发生，没有

00:47:05.609 --> 00:47:09.569
原因这必须在同一时间发生

00:47:08.250 --> 00:47:11.670
线程甚至同一应用程序

00:47:09.569 --> 00:47:13.140
因为在幕后

00:47:11.670 --> 00:47:14.819
到数据库中的状态

00:47:13.140 --> 00:47:16.380
到州说好吧我

00:47:14.819 --> 00:47:18.780
等待某人明确

00:47:16.380 --> 00:47:20.130
完成我，所以我要释放所有

00:47:18.780 --> 00:47:21.599
我将要写入状态的线程

00:47:20.130 --> 00:47:23.039
数据库，如果

00:47:21.599 --> 00:47:25.380
有人想叫我起床

00:47:23.039 --> 00:47:26.460
它是在一年内完成的

00:47:25.380 --> 00:47:28.470
很好，但我不会坐在这里

00:47:26.460 --> 00:47:29.520
垄断服务器上的资源

00:47:28.470 --> 00:47:33.660
等待即将发生的事件

00:47:29.520 --> 00:47:36.890
后来，所以我们你知道他们认为

00:47:33.660 --> 00:47:41.329
这是稍后的异步事情

00:47:36.890 --> 00:47:41.329
终于，一旦我们完成了

00:47:42.440 --> 00:47:47.430
好吧，哦，我猜我猜到了

00:47:45.569 --> 00:47:51.599
我们知道我们想做的是

00:47:47.430 --> 00:47:54.480
想要完成所有任务

00:47:51.599 --> 00:47:56.250
为此客户，然后确认正确

00:47:54.480 --> 00:47:57.480
所以实际上我们应该如何

00:47:56.250 --> 00:47:58.799
我想我们可以做到的模型

00:47:57.480 --> 00:48:00.390
这个确定的东西真的是

00:47:58.799 --> 00:48:03.359
仅此而已，然后我们想

00:48:00.390 --> 00:48:05.099
确认一旦完成， 

00:48:03.359 --> 00:48:09.900
我们要充电的组件

00:48:05.099 --> 00:48:11.010
发送电子邮件有一些记录

00:48:09.900 --> 00:48:13.859
我们希望看到它通过

00:48:11.010 --> 00:48:15.299
这么说，我们要有一个

00:48:13.859 --> 00:48:20.010
豆称为电子邮件服务，这将

00:48:15.299 --> 00:48:33.779
支持看起来像这样的方法

00:48:20.010 --> 00:48:46.049
在这里服务和公共场合

00:48:33.779 --> 00:48:49.950
发送字符串您的字符串电子邮件好吧

00:48:46.049 --> 00:48:51.270
那就是我们想要做什么

00:48:49.950 --> 00:48:53.039
好吧，我只是想要我想要的

00:48:51.270 --> 00:48:55.079
在这里测试我想做的小例子

00:48:53.039 --> 00:49:00.299
有办法记录事实

00:48:55.079 --> 00:49:05.880
有人发送了要我们

00:49:00.299 --> 00:49:07.630
给那个人发送电子邮件，所以我猜

00:49:05.880 --> 00:49:09.489
最简单的方法是什么

00:49:07.630 --> 00:49:11.469
我本来要存储列表，但是那不

00:49:09.489 --> 00:49:26.640
说得通

00:49:11.469 --> 00:49:33.719
哦，你可以映射字符串Tomic整数

00:49:26.640 --> 00:49:39.849
发送哈希图和当前的灰图

00:49:33.719 --> 00:50:00.039
已经，我们要做的就是

00:49:39.849 --> 00:50:02.549
它会说首先登录好，所以

00:50:00.039 --> 00:50:11.079
那然后我们要说这个点

00:50:02.549 --> 00:50:23.199
不做完整的API发送点放置

00:50:11.079 --> 00:50:29.819
缺少密钥和电子邮件以及一个新的原子

00:50:23.199 --> 00:50:34.420
整数好吧，然后说发送开始

00:50:29.819 --> 00:50:37.390
电子邮件文档增量，可以，所以我

00:50:34.420 --> 00:50:41.920
只是你会知道增加一个数字

00:50:37.390 --> 00:50:43.900
在那里然后与它一起工作

00:50:41.920 --> 00:50:45.940
其实我可以就在那里

00:50:43.900 --> 00:50:48.279
那就是那里，那将行不通

00:50:45.940 --> 00:50:50.829
不管现在我可以戳一下

00:50:48.279 --> 00:50:52.930
我的代码中的状态只是

00:50:50.829 --> 00:50:53.949
确认，所以我想我可能

00:50:52.930 --> 00:50:57.219
本可以在单元测试中写的

00:50:53.949 --> 00:50:59.049
但现在让我们只是... 

00:50:57.219 --> 00:51:00.190
实际上我们可以做一些单元测试

00:50:59.049 --> 00:51:04.140
让我们在可能会进行的单元测试中做到这一点

00:51:00.190 --> 00:51:04.140
甚至更容易，所以在这里

00:51:06.620 --> 00:51:16.020
去测试好吧，我们要

00:51:14.610 --> 00:51:34.580
使用这些，我们只是要注入它们

00:51:16.020 --> 00:51:34.580
在这里的单元测试中已经可以了

00:51:36.200 --> 00:51:40.050
我们要从我们那里进行测试

00:51:38.520 --> 00:51:42.030
会推动这一过程的流程

00:51:40.050 --> 00:51:43.650
就像我们之前所做的一样

00:51:42.030 --> 00:51:47.070
就像我们以前要做的，但现在我

00:51:43.650 --> 00:51:48.600
不必知道

00:51:47.070 --> 00:51:51.210
我借口写某种方法

00:51:48.600 --> 00:51:52.910
已经有一个，你知道一个不错的

00:51:51.210 --> 00:51:55.110
框架叫Gina，所以我将使用它

00:51:52.910 --> 00:51:57.150
顺便说一句

00:51:55.110 --> 00:51:58.620
支持花卉单元测试

00:51:57.150 --> 00:52:00.420
好吧，但我只是用剃刀弹簧

00:51:58.620 --> 00:52:02.520
很好，这里有点冗长，但是

00:52:00.420 --> 00:52:05.400
嘿，没把工作做好，所以我们

00:52:02.520 --> 00:52:09.230
不需要这个，只是想有一个

00:52:05.400 --> 00:52:17.600
小小的你好

00:52:09.230 --> 00:52:17.600
好吧，还好

00:52:17.610 --> 00:52:23.510
好，所以我们开始尝试

00:52:19.830 --> 00:52:23.510
我要说这会给我们一个ID 

00:52:24.890 --> 00:52:44.000
流程实例ID大证书不是

00:52:37.340 --> 00:52:50.780
流程实例ID流程实例

00:52:44.000 --> 00:52:50.780
不应该为null很好

00:52:51.380 --> 00:53:04.740
所有消息最后都可以

00:52:59.400 --> 00:53:05.970
最后我想我们必须

00:53:04.740 --> 00:53:07.500
实施，让我们做到这一点

00:53:05.970 --> 00:53:09.420
得到了任务服务，那是什么

00:53:07.500 --> 00:53:11.550
看起来很好，我们要使用跑步

00:53:09.420 --> 00:53:15.210
时间服务，我们要说这个

00:53:11.550 --> 00:53:17.820
时间服务启动流程实例

00:53:15.210 --> 00:53:21.320
我要从关键开始

00:53:17.820 --> 00:53:27.330
关键是在XML中，所以它说

00:53:21.320 --> 00:53:30.480
好的注册过程，我要这样做

00:53:27.330 --> 00:53:33.690
有一些过程变量

00:53:30.480 --> 00:53:44.460
所以我要说给我一张地图

00:53:33.690 --> 00:53:50.900
数据还可以，那么这次要获得什么

00:53:44.460 --> 00:53:50.900
我很好

00:53:57.070 --> 00:54:02.119
好吧，那将是处理他的想法

00:53:59.960 --> 00:54:03.859
因为基本上现在我们要

00:54:02.119 --> 00:54:05.630
给它一些上下文一些变量

00:54:03.859 --> 00:54:07.010
将传播那些是过程

00:54:05.630 --> 00:54:09.670
唯一的变量

00:54:07.010 --> 00:54:16.160
流程实例，所以我要说一张地图

00:54:09.670 --> 00:54:17.119
点哦，我应该指定好它们

00:54:16.160 --> 00:54:20.089
没关系，让我们这样做

00:54:17.119 --> 00:54:21.320
使用Java我可以，如果我必须指定Java 

00:54:20.089 --> 00:54:24.710
黎巴嫩我要的中和剂

00:54:21.320 --> 00:54:27.830
能够救自己一点点

00:54:24.710 --> 00:54:36.050
乏味，但只要你

00:54:27.830 --> 00:54:45.440
知道哈希图的长点在于客户

00:54:36.050 --> 00:55:06.520
 ID客户ID电子邮件，您知道我

00:54:45.440 --> 00:55:06.520
甚至可以从ID正常中受益，并且

00:55:15.750 --> 00:55:21.910
好，那没关系

00:55:19.090 --> 00:55:23.800
在这个实例中，我

00:55:21.910 --> 00:55:25.150
在那里提供那些变量， 

00:55:23.800 --> 00:55:27.820
这些将与

00:55:25.150 --> 00:55:30.130
图本身为流程实例

00:55:27.820 --> 00:55:32.590
好吧，现在我使用Java 11 

00:55:30.130 --> 00:55:34.420
无法保存我们的VAR等于新

00:55:32.590 --> 00:55:37.780
哈希图，我什至可以使用

00:55:34.420 --> 00:55:39.700
新的地图，但在我的地图生成器

00:55:37.780 --> 00:55:42.120
我不是希望为此付出代价

00:55:39.700 --> 00:55:44.910
那应该给你升级的理由

00:55:42.120 --> 00:55:52.270
好，所以我们现在有了这些易于使用的

00:55:44.910 --> 00:55:55.690
常量私有静态最终不是

00:55:52.270 --> 00:55:57.700
同样，有我的常量变量

00:55:55.690 --> 00:55:58.810
所以我要开始这个过程，让我们

00:55:57.700 --> 00:56:00.490
在我们得到之前先看一下是什么样

00:55:58.810 --> 00:56:05.850
再往下走，让我们看看

00:56:00.490 --> 00:56:05.850
看起来怎么样，所以运行

00:56:31.160 --> 00:56:39.290
已经签出流程实例

00:56:36.610 --> 00:56:42.050
在突出显示的行上方，它说

00:56:39.290 --> 00:56:43.610
流程实例ID，因此效果很好

00:56:42.050 --> 00:56:45.470
所以现在有一个正在运行的过程

00:56:43.610 --> 00:56:47.510
当然是h2，所以只要

00:56:45.470 --> 00:56:48.620
应用程序关闭所有过程

00:56:47.510 --> 00:56:50.660
状态和所有丢失的数据

00:56:48.620 --> 00:56:52.850
可以坐在内存嵌入式数据库中

00:56:50.660 --> 00:56:54.340
但您可以使用明信片或其他任何东西

00:56:52.850 --> 00:56:58.550
你知道持久数据库

00:56:54.340 --> 00:57:00.680
好吧，现在我们知道了

00:56:58.550 --> 00:57:03.050
我们在那个州的定义

00:57:00.680 --> 00:57:08.770
这些任务，所以在这里我们可以使用

00:57:03.050 --> 00:57:14.420
处理任务服务以执行任务查询

00:57:08.770 --> 00:57:17.210
查找我们在哪里有活跃任务

00:57:14.420 --> 00:57:23.600
一个称为客户ID PV的过程变量

00:57:17.210 --> 00:57:31.070
等于客户ID，包括和

00:57:23.600 --> 00:57:32.570
然后得到正确的列表，我们可以

00:57:31.070 --> 00:57:37.040
我们可以走得更远，可以说

00:57:32.570 --> 00:57:42.250
任务名称和此处的任务名称

00:57:37.040 --> 00:57:42.250
当然是确认电子邮件任务

00:57:43.080 --> 00:57:46.139
 [音乐] 

00:57:48.040 --> 00:57:54.880
那给我们带来的好处是什么

00:57:49.810 --> 00:57:57.040
我们的任务这些是任务列表

00:57:54.880 --> 00:58:11.130
我们可以戳的物体可以说

00:57:57.040 --> 00:58:14.680
好吧等于等于断言搜索错误

00:58:11.130 --> 00:58:18.120
没有开玩笑吧，所以我们在哪里放

00:58:14.680 --> 00:58:18.120
在这里搜索

00:58:34.780 --> 00:58:45.370
让我们搜索是啊，我是关于这个

00:58:43.750 --> 00:58:46.930
困惑，消息只剩下我

00:58:45.370 --> 00:58:50.400
知道我不在，我知道那有点

00:58:46.930 --> 00:58:50.400
我在这里总是很奇怪

00:58:50.580 --> 00:59:00.670
好吧，现在过去声称现在完成了

00:58:58.350 --> 00:59:03.880
您可以想象在这里，我们有一个

00:59:00.670 --> 00:59:05.650
种族条件II可能声称

00:59:03.880 --> 00:59:09.360
这个，但我不会说好

00:59:05.650 --> 00:59:12.880
首先让我们确认一下

00:59:09.360 --> 00:59:20.740
任务点大小等于一右

00:59:12.880 --> 00:59:24.100
因为我们不想拥有超过

00:59:20.740 --> 00:59:26.470
一项权利，所以应该有一项

00:59:24.100 --> 00:59:28.720
杰出的，实际上你可以改变你

00:59:26.470 --> 00:59:30.220
知道，让我们考虑一下，让我们

00:59:28.720 --> 00:59:32.620
说有人偶然开始

00:59:30.220 --> 00:59:33.700
注册过程两次，所以现在

00:59:32.620 --> 00:59:35.710
有两个不同的优秀

00:59:33.700 --> 00:59:39.430
达到这个目的的过程

00:59:35.710 --> 00:59:44.080
说好，你知道你应该得到他们

00:59:39.430 --> 00:59:45.700
全部并完全完成它们，所以您

00:59:44.080 --> 00:59:47.710
最终可以说我的测试名称是

00:59:45.700 --> 00:59:49.720
该客户的标志，然后

00:59:47.710 --> 00:59:52.600
完全我知道只有一种权利

00:59:49.720 --> 00:59:54.760
现在，这就是我要证明的

00:59:52.600 --> 00:59:59.430
我试图证明我们可以

00:59:54.760 --> 01:00:01.780
让我们做得更好断言是真的

00:59:59.430 --> 01:00:04.120
我们要断言这是

01:00:01.780 --> 01:00:07.620
大于1大于等于1 

01:00:04.120 --> 01:00:07.620
好的，让我们尝试一下

01:00:23.840 --> 01:00:38.530
好吧，我有东西，所以任务名称

01:00:34.750 --> 01:00:38.530
任务ID 

01:00:46.840 --> 01:00:51.030
哦，那是好的，哇！ 

01:00:58.760 --> 01:01:08.930
我认为这是一个明确的任务

01:01:01.220 --> 01:01:10.820
那就是我想要的ID 

01:01:08.930 --> 01:01:15.859
失败，否则我认为这是我认为

01:01:10.820 --> 01:01:23.510
任务名称是另一个字符串，是的

01:01:15.859 --> 01:01:34.970
试试吧，否则我就回去做

01:01:23.510 --> 01:01:40.790
这里正确的事情可以

01:01:34.970 --> 01:01:43.210
一个失败了，让我们再尝试一次， 

01:01:40.790 --> 01:01:43.210
这去这里

01:01:55.660 --> 01:02:06.279
无论如何，当我使它更加一致时

01:01:57.880 --> 01:02:10.349
这样做哦应该有一个

01:02:06.279 --> 01:02:10.349
杰出的，如果没有我该怎么办

01:02:11.549 --> 01:02:14.849
让我们来看看

01:02:26.930 --> 01:02:30.470
如果那有所作为怎么办

01:02:41.700 --> 01:02:44.480
没有

01:02:47.740 --> 01:02:50.760
调试时间

01:03:04.560 --> 01:03:11.599
任务为空

01:03:07.700 --> 01:03:13.900
哦，哦，我不确定是否需要

01:03:11.599 --> 01:03:13.900
其实

01:04:00.220 --> 01:04:05.440
我有看到任务名称吗

01:04:03.369 --> 01:04:08.160
这样，应该是相当

01:04:05.440 --> 01:04:08.160
直截了当

01:04:24.250 --> 01:04:29.590
好吧，我们去修复它了，所以现在我们

01:04:27.250 --> 01:04:31.780
我们有一个我们已经到了

01:04:29.590 --> 01:04:33.849
我们有任务列表的地方

01:04:31.780 --> 01:04:36.340
当我们有了任务清单时

01:04:33.849 --> 01:04:39.250
我们要做的就是完成它们， 

01:04:36.340 --> 01:04:46.530
所以在这里我们可以使用任务服务

01:04:39.250 --> 01:04:53.770
正确完成任务

01:04:46.530 --> 01:04:55.090
现在完成未完成的任务，您

01:04:53.770 --> 01:05:03.010
知道最简单的方法是说

01:04:55.090 --> 01:05:07.109
每个任务，我们现在可以保存一些数据

01:05:03.010 --> 01:05:11.470
所以我们说这个任务服务已经完成了

01:05:07.109 --> 01:05:14.920
任务ID，所以ID正确

01:05:11.470 --> 01:05:18.420
您可能还会执行此点任务服务

01:05:14.920 --> 01:05:22.890
博士声称在这里你会说我会

01:05:18.420 --> 01:05:25.060
我要索取这个ID的任务

01:05:22.890 --> 01:05:27.280
 Jayla或您可以使用弹簧

01:05:25.060 --> 01:05:30.790
安全Java安全原则目标

01:05:27.280 --> 01:05:35.740
名称或其他权利，然后您

01:05:30.790 --> 01:05:36.760
会正确完成它，所以

01:05:35.740 --> 01:05:38.080
你会声称这是因为你

01:05:36.760 --> 01:05:39.670
不想别人

01:05:38.080 --> 01:05:43.060
您知道自己可能有一个种族状况

01:05:39.670 --> 01:05:44.830
就像一群人，像亚马逊

01:05:43.060 --> 01:05:48.040
机械特克，您可能会

01:05:44.830 --> 01:05:51.339
人们看着屏幕上

01:05:48.040 --> 01:05:52.660
有要做的杰出工作，他们

01:05:51.339 --> 01:05:55.030
可能会开始水龙头，他们可能会开始

01:05:52.660 --> 01:05:56.710
试图让你知道完成任务

01:05:55.030 --> 01:05:58.390
当你试图去那里

01:05:56.710 --> 01:05:59.950
完成到这里，你可以要求它

01:05:58.390 --> 01:06:01.990
不再访问

01:05:59.950 --> 01:06:04.810
让任何人都可以拿它为例

01:06:01.990 --> 01:06:07.390
好吧，然后一旦完成

01:06:04.810 --> 01:06:09.270
我们现在想做好一次吗

01:06:07.390 --> 01:06:13.420
完成后我们就来了

01:06:09.270 --> 01:06:16.089
确认电子邮件已发送

01:06:13.420 --> 01:06:18.820
因为它会自动产生

01:06:16.089 --> 01:06:20.740
从等待的任务到

01:06:18.820 --> 01:06:22.990
电子邮件任务，然后将结束

01:06:20.740 --> 01:06:26.380
在结束事件，所以我们应该看到它

01:06:22.990 --> 01:06:27.490
从完成自动开始

01:06:26.380 --> 01:06:28.839
一直到最后

01:06:27.490 --> 01:06:31.839
立即就在同一位置

01:06:28.839 --> 01:06:33.490
交易事实上，所以我们现在去我们的

01:06:31.839 --> 01:06:35.530
再测试一次

01:06:33.490 --> 01:06:37.510
我要注入我们的电子邮件服务

01:06:35.530 --> 01:06:37.930
这不是电子邮件服务的主要来源

01:06:37.510 --> 01:06:43.780
所有

01:06:37.930 --> 01:06:47.650
在有线私人电子邮件中，他是如此

01:06:43.780 --> 01:06:51.309
服务以及何时使用电子邮件服务

01:06:47.650 --> 01:06:53.410
只是为了确认搜索而已

01:06:51.309 --> 01:06:56.589
这是那些可以

01:06:53.410 --> 01:07:05.010
可能已经用模拟光束完成了

01:06:56.589 --> 01:07:07.480
点电子邮件服务点发送点获取和

01:07:05.010 --> 01:07:14.619
我们说数据是什么

01:07:07.480 --> 01:07:17.829
现在存储了电子邮件服务的客户ID 

01:07:14.619 --> 01:07:21.970
这是电子邮件，可以，因此我们

01:07:17.829 --> 01:07:24.240
确认这封电子邮件是

01:07:21.970 --> 01:07:24.240
键

01:07:28.360 --> 01:07:41.960
证书等于电子邮件点得到一个好的

01:07:39.140 --> 01:07:43.130
应该是一样的，就是这样

01:07:41.960 --> 01:07:46.570
那就是全部

01:07:43.130 --> 01:07:46.570
过程让我们尝试并立即运行

01:08:02.670 --> 01:08:08.550
在那里我们去看看，所以我们现在

01:08:06.030 --> 01:08:09.870
启动了流程实例，我们发送了

01:08:08.550 --> 01:08:11.010
欢迎电子邮件，您可以看到它已打印

01:08:09.870 --> 01:08:12.600
出来，现在它正在关闭

01:08:11.010 --> 01:08:14.940
对，这就是全部

01:08:12.600 --> 01:08:17.490
事情已经完成，在这一点上，如果我

01:08:14.940 --> 01:08:18.840
即使我运行它来找到该数据我

01:08:17.490 --> 01:08:22.800
我不能那样做吗

01:08:18.840 --> 01:08:24.450
这个过程已经被你知道执行了

01:08:22.800 --> 01:08:26.700
如果您有我们的话，它不会被删除

01:08:24.450 --> 01:08:28.260
续集或明信片或其他耐用物品

01:08:26.700 --> 01:08:29.370
我们可以登录表格，然后

01:08:28.260 --> 01:08:32.540
可以看到数据仍然存在

01:08:29.370 --> 01:08:36.560
实际上我们甚至可以注入

01:08:32.540 --> 01:08:41.910
处理引擎，例如私有的

01:08:36.560 --> 01:08:46.920
正确的流程引擎，或者我们可以

01:08:41.910 --> 01:08:51.210
获得我们可以使用的历史服务

01:08:46.920 --> 01:08:52.530
历史服务说你还好

01:08:51.210 --> 01:08:54.620
知道让我们创造一个历史性的过程

01:08:52.530 --> 01:09:00.710
我可以在其中查询的实例查询

01:08:54.620 --> 01:09:06.450
您知道变量值包括的过程

01:09:00.710 --> 01:09:08.940
您知道客户ID等于一项权利

01:09:06.450 --> 01:09:11.010
我可以做到，我可以看看旧的

01:09:08.940 --> 01:09:13.680
流程，但不再是最新的

01:09:11.010 --> 01:09:15.300
在你知道活跃的过程，所以它得到

01:09:13.680 --> 01:09:17.400
您必须通过历史找到它

01:09:15.300 --> 01:09:19.590
服务，所以这是我想你知道的

01:09:17.400 --> 01:09:23.010
一开始我们只看了

01:09:19.590 --> 01:09:25.650
这个API可以做的一小部分

01:09:23.010 --> 01:09:27.660
工作流程解决方案长期适用

01:09:25.650 --> 01:09:32.400
运行您必须参与的任务

01:09:27.660 --> 01:09:35.160
无论是人类还是自治代理

01:09:32.400 --> 01:09:37.530
可以看到它很好地嵌入了Springwood中

01:09:35.160 --> 01:09:39.660
应用程序，但还有更多

01:09:37.530 --> 01:09:41.130
比我在这里给你看的

01:09:39.660 --> 01:09:43.170
所以正因为如此大

01:09:41.130 --> 01:09:46.440
客户蜂拥而至

01:09:43.170 --> 01:09:48.330
购买流动产品，因为它

01:09:46.440 --> 01:09:49.770
给你身份管理给你

01:09:48.330 --> 01:09:52.190
与企业集成，可为您提供

01:09:49.770 --> 01:09:54.180
一大堆不只是这个

01:09:52.190 --> 01:09:55.710
这些零件在这里，你会得到一个

01:09:54.180 --> 01:09:57.990
您可以使用的完全成熟的服务器

01:09:55.710 --> 01:09:59.130
用解决这个问题解决你

01:09:57.990 --> 01:10:01.800
知道各种文件管理

01:09:59.130 --> 01:10:04.590
解决这类问题的问题

01:10:01.800 --> 01:10:06.320
希望我在这里没有向您展示过

01:10:04.590 --> 01:10:11.370
你从中得到了一些东西

01:10:06.320 --> 01:10:12.510
显然，我真的是我真的希望

01:10:11.370 --> 01:10:13.950
我可以在其中制作另一个视频或

01:10:12.510 --> 01:10:15.630
我的意思是我只是觉得

01:10:13.950 --> 01:10:18.000
箱子的东西太酷了，我知道

01:10:15.630 --> 01:10:19.710
一个相当新的功能哦

01:10:18.000 --> 01:10:22.110
在过去的两件事中发生了很多事情

01:10:19.710 --> 01:10:25.469
几年来现在是300 

01:10:22.110 --> 01:10:28.110
人加强大的公司

01:10:25.469 --> 01:10:30.030
这推动了工程工作

01:10:28.110 --> 01:10:33.840
因此它的移动速度非常快

01:10:30.030 --> 01:10:36.420
我非常渴望一个很棒的团队

01:10:33.840 --> 01:10:38.580
看看事情要去哪里，我认为这已经

01:10:36.420 --> 01:10:40.830
在微型世界中更具相关性

01:10:38.580 --> 01:10:42.630
服务，比以往任何时候都更

01:10:40.830 --> 01:10:47.690
在这个世界中无疑具有相关性

01:10:42.630 --> 01:10:49.620
事情比以往更复杂

01:10:47.690 --> 01:10:51.120
所以我希望你从中得到一些东西

01:10:49.620 --> 01:10:54.800
我总是要感谢你的收看

01:10:51.120 --> 01:10:54.800
我们会看到

01:11:00.060 --> 01:11:02.120
您

