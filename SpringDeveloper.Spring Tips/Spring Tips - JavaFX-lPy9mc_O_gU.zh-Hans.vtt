WEBVTT
Kind: captions
Language: zh-Hans

00:00:25.460 --> 00:00:29.849
 iSpring粉丝欢迎来到另一个

00:00:27.779 --> 00:00:31.740
在此安装Spring 提示

00:00:29.849 --> 00:00:34.530
分期付款，我们将采取一种

00:00:31.740 --> 00:00:35.550
不同的外观不同的方法

00:00:34.530 --> 00:00:38.629
我们要谈论的是

00:00:35.550 --> 00:00:40.470
你知道我们可能不会

00:00:38.629 --> 00:00:41.879
通常说到你不会

00:00:40.470 --> 00:00:45.150
通常考虑用呃做

00:00:41.879 --> 00:00:46.980
 Spring ，但这是一个选择， 

00:00:45.150 --> 00:00:48.660
工作，我认为这是一个相当

00:00:46.980 --> 00:00:51.800
有趣的混合，所以我们要去做

00:00:48.660 --> 00:00:55.339
我们将要讨论如何整合

00:00:51.800 --> 00:00:59.930
 Spring 最好说 Spring 引导与

00:00:55.339 --> 00:01:03.570
 JavaFX现在您问为什么JavaFX很好

00:00:59.930 --> 00:01:05.759
首先有几个原因

00:01:03.570 --> 00:01:07.800
 JavaFX当然首先出现了Java修复

00:01:05.759 --> 00:01:10.020
因为你们中的那些不是

00:01:07.800 --> 00:01:12.119
是一个组件库，它是一个UI 

00:01:10.020 --> 00:01:14.670
框架，它是一个基于

00:01:12.119 --> 00:01:17.610
这个阶段的想法，或者我很抱歉

00:01:14.670 --> 00:01:19.560
场景和场景具有组成部分

00:01:17.610 --> 00:01:21.600
在里面，但它也有这个

00:01:19.560 --> 00:01:23.220
时间轴的意义，因此您可以使用它来

00:01:21.600 --> 00:01:26.880
做一些有趣的事情

00:01:23.220 --> 00:01:29.640
像动画一样，从技术上讲

00:01:26.880 --> 00:01:33.090
这是一个更多

00:01:29.640 --> 00:01:36.180
高级更有趣的应用程序

00:01:33.090 --> 00:01:40.680
开发技术比什么

00:01:36.180 --> 00:01:43.409
例如最近在

00:01:40.680 --> 00:01:47.549
 Java 11已脱离

00:01:43.409 --> 00:01:48.750
 Java核心运行时，所以不是

00:01:47.549 --> 00:01:50.369
捆绑在一起实际上是现在

00:01:48.750 --> 00:01:53.220
单独可用作为maven依赖项

00:01:50.369 --> 00:01:55.200
结果，它有了一个全新的

00:01:53.220 --> 00:01:57.630
生活或它可以独立于

00:01:55.200 --> 00:02:00.329
 JDK的发布节奏

00:01:57.630 --> 00:02:02.850
他自己，这就是你，我知道我

00:02:00.329 --> 00:02:05.220
多年来看到的很多

00:02:02.850 --> 00:02:07.350
人们用它来有趣的用例

00:02:05.220 --> 00:02:08.970
对所有内容进行可视化处理

00:02:07.350 --> 00:02:11.880
这些真的很棒的演示

00:02:08.970 --> 00:02:14.670
医学影像或天文学

00:02:11.880 --> 00:02:16.100
和一般物理模拟

00:02:14.670 --> 00:02:20.160
这些非常有趣的事情

00:02:16.100 --> 00:02:21.510
我认为我真的在说为什么

00:02:20.160 --> 00:02:22.739
您将要使用此权限，这是一个

00:02:21.510 --> 00:02:26.730
你可以产生一些非常非常美丽的

00:02:22.739 --> 00:02:29.010
您知道的多媒体富用户

00:02:26.730 --> 00:02:31.200
接口并为了使其正常工作

00:02:29.010 --> 00:02:33.180
这些事情需要和两个人谈谈

00:02:31.200 --> 00:02:35.400
他们需要与后端对话的服务

00:02:33.180 --> 00:02:37.169
而这里特别是鉴于

00:02:35.400 --> 00:02:38.280
反应式编程范式

00:02:37.169 --> 00:02:40.500
Spring 

00:02:38.280 --> 00:02:42.959
框架五和所有技术

00:02:40.500 --> 00:02:44.700
依靠它的支持，我们有一个

00:02:42.959 --> 00:02:48.569
现在真正有趣的选择是

00:02:44.700 --> 00:02:51.540
 Spring 是自然的联系

00:02:48.569 --> 00:02:53.730
例如，一个用于

00:02:51.540 --> 00:02:56.540
基于HTTP的服务和WebSocket 

00:02:53.730 --> 00:02:59.580
客户，我是说这些东西是自然的

00:02:56.540 --> 00:03:02.580
匹配您的客户端应用程序

00:02:59.580 --> 00:03:04.680
可以使用Spring Framework 的web支持

00:03:02.580 --> 00:03:06.330
客户端中的反应式Web支持

00:03:04.680 --> 00:03:07.739
应用程序，只是告诉它不要运行

00:03:06.330 --> 00:03:09.600
一个Web服务器，然后您就可以拥有

00:03:07.739 --> 00:03:11.370
获得所有这些非常方便

00:03:09.600 --> 00:03:14.190
像网络客户端这样的事情

00:03:11.370 --> 00:03:15.540
例如，所以当我们不谈论

00:03:14.190 --> 00:03:17.100
关于今天的响应式Web客户端

00:03:15.540 --> 00:03:20.670
特别是我们要谈论的是

00:03:17.100 --> 00:03:23.010
如何建立一个完全无聊的

00:03:20.670 --> 00:03:25.950
标准标准的JavaFX 

00:03:23.010 --> 00:03:29.760
应用程序以及如何举起

00:03:25.950 --> 00:03:33.810
 Spring 的应用程序上下文

00:03:29.760 --> 00:03:36.800
 Java FX应用程序的生命周期

00:03:33.810 --> 00:03:39.870
让我们做到这一点，让我们回到正常状态

00:03:36.800 --> 00:03:42.180
去那个地方，我们将在那个 Spring 开始

00:03:39.870 --> 00:03:44.010
 IO在这里，我们将建立

00:03:42.180 --> 00:03:47.310
一如既往的新应用- 

00:03:44.010 --> 00:03:50.220
我们将构建一个简单的Java FX 

00:03:47.310 --> 00:03:51.840
好吧，Java FX和您就可以知道

00:03:50.220 --> 00:03:54.209
想像一下您何时使用龙目岛

00:03:51.840 --> 00:03:56.160
带来我的反应式网络支持

00:03:54.209 --> 00:03:58.320
要用2.1哦

00:03:56.160 --> 00:04:02.370
 RFC 1我要切换整个版本

00:03:58.320 --> 00:04:04.470
给自己Java 11我正在运行Java 

00:04:02.370 --> 00:04:07.500
 11.可以使用Java，可以更早使用

00:04:04.470 --> 00:04:10.440
 Java版本，但这些版本将

00:04:07.500 --> 00:04:11.670
包括Java效果，所以理论上讲

00:04:10.440 --> 00:04:13.799
可能有可能有一些

00:04:11.670 --> 00:04:17.250
在可能与开放之间漂移

00:04:13.799 --> 00:04:20.250
 Java FX open jfx这就是我要去的

00:04:17.250 --> 00:04:23.970
在这里使用与核心和捆绑在一起

00:04:20.250 --> 00:04:26.430
进入JVM进入Java Runtime并

00:04:23.970 --> 00:04:27.860
顺便说一下Java效果不是

00:04:26.430 --> 00:04:30.120
不是规范的一部分，从来没有

00:04:27.860 --> 00:04:33.510
您知道始终跨

00:04:30.120 --> 00:04:35.220
反正所有Java运行时都是I 

00:04:33.510 --> 00:04:37.800
知道我知道例如Oracle JDK 

00:04:35.220 --> 00:04:40.140
产生了最佳效果，但事实并非如此

00:04:37.800 --> 00:04:42.240
例如，对于开放式JDK必然如此

00:04:40.140 --> 00:04:44.220
所以这些东西很好

00:04:42.240 --> 00:04:45.539
现在分开，您可以选择

00:04:44.220 --> 00:04:48.900
如果需要，请安装它们，没有

00:04:45.539 --> 00:04:50.849
担心，但它如何工作，还会弹跳

00:04:48.900 --> 00:04:51.529
有这种非常好用的便利

00:04:50.849 --> 00:04:53.719
所以打电话

00:04:51.529 --> 00:04:55.579
胖子罐子的分配机制

00:04:53.719 --> 00:05:00.649
我想很适合

00:04:55.579 --> 00:05:02.449
构建简单但有用的客户端

00:05:00.649 --> 00:05:04.879
上一期中的应用程序

00:05:02.449 --> 00:05:07.639
 Spring 的技巧，我们看了如何建立

00:05:04.879 --> 00:05:12.009
基于Spring Shell的CLI应用程序

00:05:07.639 --> 00:05:14.989
考虑一下，他们有点你知道

00:05:12.009 --> 00:05:16.909
 Windows的工作组版本

00:05:14.989 --> 00:05:19.819
现在的讨论中，你如何

00:05:16.909 --> 00:05:20.989
用spring建立用户界面

00:05:19.819 --> 00:05:23.689
而且我们已经做到了

00:05:20.989 --> 00:05:25.729
实际上看了其他UI工具包

00:05:23.689 --> 00:05:27.379
对，我们实际上已经看过网络了

00:05:25.729 --> 00:05:28.599
框架，例如

00:05:27.379 --> 00:05:33.529
以前的分期付款，所以这不是

00:05:28.599 --> 00:05:34.699
完全出乎意料好吧，让我们看看

00:05:33.529 --> 00:05:39.139
我们将要启动我们的应用程序

00:05:34.699 --> 00:05:40.759
 UA JavaFX zip照常执行，何时执行

00:05:39.139 --> 00:05:43.579
旋转起来，我们要打开它会打开

00:05:40.759 --> 00:05:45.499
在我们的IDE或可信赖的IDE中， 

00:05:43.579 --> 00:05:47.509
我正在使用IntelliJ，然后再次使用

00:05:45.499 --> 00:05:48.739
这里特别是NetBeans的不错选择

00:05:47.509 --> 00:05:51.859
是一个不错的选择，因为它具有

00:05:48.739 --> 00:05:55.339
真的非常好，你知道坚如磐石

00:05:51.859 --> 00:05:58.129
对Java FX IntelliJ的集成支持

00:05:55.339 --> 00:06:00.589
至少据我所知

00:05:58.129 --> 00:06:02.449
终极版效果很好

00:06:00.589 --> 00:06:03.769
支持以及我不确定

00:06:02.449 --> 00:06:06.469
社区版，但不会

00:06:03.769 --> 00:06:09.679
让我感到惊讶，所以你可能会很好

00:06:06.469 --> 00:06:10.999
检查一下，所以首先

00:06:09.679 --> 00:06:13.939
为了让我们与

00:06:10.999 --> 00:06:16.749
我们需要它，我们需要它

00:06:13.939 --> 00:06:19.999
 JavaFX对，这很公平，所以让我们

00:06:16.749 --> 00:06:24.229
导入或使用一些

00:06:19.999 --> 00:06:30.879
库在这里，所以我们要使用Java 

00:06:24.229 --> 00:06:30.879
 FX控件，这将需要组织

00:06:31.179 --> 00:06:41.169
点打开jfx好的，我们需要引入

00:06:39.049 --> 00:06:44.689
对应的正确版本

00:06:41.169 --> 00:06:46.309
 11这就是我们正在使用的JDK，而我

00:06:44.689 --> 00:06:47.719
我要带一些

00:06:46.309 --> 00:06:50.119
这里的事情我们不需要全部

00:06:47.719 --> 00:06:51.649
当然可以，所以很高兴

00:06:50.119 --> 00:06:53.089
我们想要的控件是

00:06:51.649 --> 00:06:54.559
小部件或至少某些小部件

00:06:53.089 --> 00:06:56.929
而且有一个巨大的生态系统

00:06:54.559 --> 00:06:58.849
第三方小部件控制UI元素

00:06:56.929 --> 00:07:00.889
不管你想给他们打电话

00:06:58.849 --> 00:07:02.509
唾手可得，我

00:07:00.889 --> 00:07:03.649
鼓励你仔细阅读

00:07:02.509 --> 00:07:04.920
社区，因为确实有一些

00:07:03.649 --> 00:07:06.780
有趣的事情

00:07:04.920 --> 00:07:08.190
在这一点上，我们将带来

00:07:06.780 --> 00:07:12.800
我们将带来图形支持

00:07:08.190 --> 00:07:16.590
在基本支持中，F XML是

00:07:12.800 --> 00:07:19.860
双向用户界面标记语言

00:07:16.590 --> 00:07:22.860
支持绑定到用户界面

00:07:19.860 --> 00:07:24.840
元素，以便您可以描述您的

00:07:22.860 --> 00:07:27.720
您的布局是静态的

00:07:24.840 --> 00:07:32.640
然后有层次结构

00:07:27.720 --> 00:07:34.670
这些元素映射到Java对象

00:07:32.640 --> 00:07:37.110
然后这些对象可以是

00:07:34.670 --> 00:07:40.050
用Java代码进行操作，因此您可以

00:07:37.110 --> 00:07:43.700
可以用XML进行布局和设计

00:07:40.050 --> 00:07:46.650
这是XML的自然用法，然后

00:07:43.700 --> 00:07:47.910
阐明Java代码中的行为，因此

00:07:46.650 --> 00:07:50.400
当有人点击

00:07:47.910 --> 00:07:53.390
按钮，或者您知道窗口何时加载

00:07:50.400 --> 00:07:57.450
或其他任何可以的东西

00:07:53.390 --> 00:07:59.960
简单的Maven构建，就是这样

00:07:57.450 --> 00:08:04.050
确实我们需要的所有东西都拥有网络

00:07:59.960 --> 00:08:07.530
在课堂上提供支持，但我们不支持

00:08:04.050 --> 00:08:10.590
需要它，所以我不会说什么就对了

00:08:07.530 --> 00:08:11.910
禁用网络服务器，现在我们

00:08:10.590 --> 00:08:15.950
现在要去一个简单的应用程序

00:08:11.910 --> 00:08:17.820
有一点点

00:08:15.950 --> 00:08:18.900
这里有点问题

00:08:17.820 --> 00:08:22.860
右边有一点

00:08:18.900 --> 00:08:25.680
 Java FX想要达到的阻抗

00:08:22.860 --> 00:08:29.880
工作以及 Spring 如何工作

00:08:25.680 --> 00:08:31.020
就像你在这里看到的那样

00:08:29.880 --> 00:08:33.270
前面和中间的东西

00:08:31.020 --> 00:08:37.190
将其余的应用程序提升到

00:08:33.270 --> 00:08:41.490
 Java FX的存在并不容易

00:08:37.190 --> 00:08:44.490
做到这一点，或者这就是路径

00:08:41.490 --> 00:08:50.520
阻力最小的路径是首先

00:08:44.490 --> 00:08:51.810
所有引导Java效果，然后让

00:08:50.520 --> 00:08:53.670
 Java修复引导您的 Spring 

00:08:51.810 --> 00:08:54.930
好的应用程序，所以我们要写成

00:08:53.670 --> 00:08:57.120
尽我们所能

00:08:54.930 --> 00:08:59.880
 Spring 以外，但我们要写

00:08:57.120 --> 00:09:01.380
仅足以实例化安装

00:08:59.880 --> 00:09:03.780
 Spring ，然后我们要编写代码

00:09:01.380 --> 00:09:05.550
将两者融合在一起

00:09:03.780 --> 00:09:07.800
对方，所以当

00:09:05.550 --> 00:09:10.140
 Java FX示例需要引用一个

00:09:07.800 --> 00:09:11.520
控制器或它要寻找的组件

00:09:10.140 --> 00:09:14.280
 Spring 管理的 Bean type 

00:09:11.520 --> 00:09:15.740
好的，首先是我们的 Spring 

00:09:14.280 --> 00:09:19.790
应用我们的公共static void main 

00:09:15.740 --> 00:09:25.890
实际上将使用

00:09:19.790 --> 00:09:28.710
 Java修复应用程序类可以

00:09:25.890 --> 00:09:30.480
在那里，您进行点发射，并为了

00:09:28.710 --> 00:09:34.020
它启动它需要一个指向

00:09:30.480 --> 00:09:38.270
类扩展了应用程序，所以我

00:09:34.020 --> 00:09:41.270
将其称为我们的Java FX应用程序

00:09:38.270 --> 00:09:41.270
哎呀

00:09:42.500 --> 00:09:50.700
是的，好，让我们来看一下

00:09:44.970 --> 00:09:52.800
将此新类称为美丽的FX 

00:09:50.700 --> 00:09:58.500
应用程序，这将是我们的 Spring 引导

00:09:52.800 --> 00:10:05.750
入口点，它将具有以下代码

00:09:58.500 --> 00:10:09.120
好吧，这将是我们的

00:10:05.750 --> 00:10:12.930
实际的Java修复应用程序可以，所以我

00:10:09.120 --> 00:10:14.400
要说扩展应用程序，我们

00:10:12.930 --> 00:10:16.620
必须执行最低要求

00:10:14.400 --> 00:10:19.470
合同的接口在这里得到一些

00:10:16.620 --> 00:10:21.110
抽象类型，所以我们开始植入

00:10:19.470 --> 00:10:24.510
一会儿再回到

00:10:21.110 --> 00:10:28.500
在这里，我们会说我们想要

00:10:24.510 --> 00:10:31.650
将启动JavaFX应用程序类

00:10:28.500 --> 00:10:33.990
这些论点，仅此而已

00:10:31.650 --> 00:10:35.720
这是现在的基本安排

00:10:33.990 --> 00:10:38.430
你会从我们内部看到

00:10:35.720 --> 00:10:39.930
 Java修复应用程序类

00:10:38.430 --> 00:10:41.670
参考美丽效果应用

00:10:39.930 --> 00:10:42.960
所以这些都需要公开

00:10:41.670 --> 00:10:45.540
两者都必须彼此可见

00:10:42.960 --> 00:10:48.180
我觉得有点令人失望

00:10:45.540 --> 00:10:50.460
在一些您会在线看到的示例中

00:10:48.180 --> 00:10:53.190
你会看到他们有斯普林伍德

00:10:50.460 --> 00:10:59.940
应用程序错误静态void main 

00:10:53.190 --> 00:11:01.440
 JavaFX启动和您所知道的

00:10:59.940 --> 00:11:04.260
 spring boot 的东西都是相同的代码库

00:11:01.440 --> 00:11:08.570
但由于某些原因，我不太了解

00:11:04.260 --> 00:11:12.150
但是我收集到这以某种方式检查

00:11:08.570 --> 00:11:13.830
正在运行的类也是

00:11:12.150 --> 00:11:15.720
相同的是应用程序和

00:11:13.830 --> 00:11:18.870
它在寻找的地方做了一些事情

00:11:15.720 --> 00:11:22.610
拼图和某些Java模块

00:11:18.870 --> 00:11:26.280
 JPM JPM正在尝试鼓吹Java 

00:11:22.610 --> 00:11:29.830
模块系统的权利，一旦

00:11:26.280 --> 00:11:31.540
如果检测到那里，那么它

00:11:29.830 --> 00:11:34.090
它需要确定的东西

00:11:31.540 --> 00:11:35.710
明确提供好我

00:11:34.090 --> 00:11:40.540
在课堂路径模式下学习

00:11:35.710 --> 00:11:41.950
没有模块路径，以便检查

00:11:40.540 --> 00:11:43.600
如果我说实话，我对我很武断

00:11:41.950 --> 00:11:45.460
知道为什么它在那里，但它不

00:11:43.600 --> 00:11:46.780
真的对我们有很大帮助，但作为一个

00:11:45.460 --> 00:11:48.340
结果我发现，如果我只是取笑

00:11:46.780 --> 00:11:50.280
这两个部分分成两个部分

00:11:48.340 --> 00:11:52.330
上课一切正常，所以

00:11:50.280 --> 00:11:56.650
我们就这样保留它，因为

00:11:52.330 --> 00:11:57.910
你们都知道这肯定很多

00:11:56.650 --> 00:12:01.410
比不能做我们要容易

00:11:57.910 --> 00:12:04.030
想做正确的事，好吧，我们有

00:12:01.410 --> 00:12:06.250
印章效果应用我们的工作是什么

00:12:04.030 --> 00:12:08.890
在FX应用程序上，我们会做得很好

00:12:06.250 --> 00:12:12.340
必须启动启动不是吗

00:12:08.890 --> 00:12:14.380
是葫芦涌入的东西

00:12:12.340 --> 00:12:17.620
存在，我们将用术语

00:12:14.380 --> 00:12:20.400
应用程序生命周期的过程，所以让我们

00:12:17.620 --> 00:12:26.080
说我们有一个类指向

00:12:20.400 --> 00:12:29.350
可配置的应用程序上下文权限

00:12:26.080 --> 00:12:31.900
这是我们的背景，那个背景

00:12:29.350 --> 00:12:34.200
是Spring应用程序上下文

00:12:31.900 --> 00:12:37.710
我们将在

00:12:34.200 --> 00:12:40.420
应用JavaFX应用

00:12:37.710 --> 00:12:43.450
泉水生机勃勃，所以让我们超越

00:12:40.420 --> 00:12:46.020
此方法及其init方法

00:12:43.450 --> 00:12:53.130
我们要说这个点上下文等于

00:12:46.020 --> 00:12:58.210
新的Spring应用程序构建器点

00:12:53.130 --> 00:13:02.850
谁做外汇的消息来源

00:12:58.210 --> 00:13:06.910
初始化程序的应用程序类

00:13:02.850 --> 00:13:08.950
初始值设定项，我们需要一个

00:13:06.910 --> 00:13:10.570
初始化程序，原因是因为我想要

00:13:08.950 --> 00:13:13.150
以编程方式，但仅对某些

00:13:10.570 --> 00:13:14.080
 bean 好了，所以我们可以做一些

00:13:13.150 --> 00:13:17.320
不同的方式

00:13:14.080 --> 00:13:20.500
但正如您所看到的，因为我正在尝试

00:13:17.320 --> 00:13:22.060
涉及已经创建的对象

00:13:20.500 --> 00:13:24.730
而且存在于 Spring 之外

00:13:22.060 --> 00:13:27.910
应用程序上下文，我们将使用

00:13:24.730 --> 00:13:30.580
程序化bean定义语法

00:13:27.910 --> 00:13:31.630
在5m5 Spring 可用，我们可以

00:13:30.580 --> 00:13:33.760
得到我们的参数，但我们会得到

00:13:31.630 --> 00:13:35.290
我们的Java参数正确修复了

00:13:33.760 --> 00:13:37.330
 Java修复程序已经具有这些参数， 

00:13:35.290 --> 00:13:38.860
已经给它了，所以这里按顺序

00:13:37.330 --> 00:13:40.720
以确保整个 Spring 都有

00:13:38.860 --> 00:13:40.970
访问这些命令行参数

00:13:40.720 --> 00:13:45.290
什么时候

00:13:40.970 --> 00:13:47.509
现在，我们需要创建Passman 

00:13:45.290 --> 00:13:50.899
应用程序上下文初始化程序

00:13:47.509 --> 00:13:55.759
我们已经看过了

00:13:50.899 --> 00:13:57.139
先前的Spring Tips 

00:13:55.759 --> 00:13:59.389
会有两个功能光束

00:13:57.139 --> 00:14:01.759
定义，因此您可能需要查看

00:13:59.389 --> 00:14:06.279
那个，但这仍然很简单

00:14:01.759 --> 00:14:10.639
无论哪种方式，所以初始化器等于new 

00:14:06.279 --> 00:14:11.779
应用程序上下文初始化器和此处

00:14:10.639 --> 00:14:14.959
我们将以编程方式注册一个

00:14:11.779 --> 00:14:21.019
几束光束，所以AC，我们要说

00:14:14.959 --> 00:14:23.029
 AC现在注册一束光

00:14:21.019 --> 00:14:25.639
想要很好，我想申请

00:14:23.029 --> 00:14:27.829
本身可用于注射和

00:14:25.639 --> 00:14:33.370
其他地方的参考都说我要

00:14:27.829 --> 00:14:35.420
引用这个基本上可以了

00:14:33.370 --> 00:14:38.870
假设我们可以做Java效果

00:14:35.420 --> 00:14:41.750
应用程序回来这有点

00:14:38.870 --> 00:14:43.910
更容易我们想要什么我们想要的

00:14:41.750 --> 00:14:45.139
参数本身，我们可以再次

00:14:43.910 --> 00:14:47.120
从应用程序中引用它们

00:14:45.139 --> 00:14:50.899
我想我自己，但让我们

00:14:47.120 --> 00:14:52.660
他们明确可用，最后

00:14:50.899 --> 00:14:57.290
想要主机服务现在是主机

00:14:52.660 --> 00:15:00.470
服务提供像您一样的东西

00:14:57.290 --> 00:15:02.660
知道解决引用的能力

00:15:00.470 --> 00:15:05.120
相对于代码库和启动

00:15:02.660 --> 00:15:08.180
特定于操作系统的浏览器

00:15:05.120 --> 00:15:09.500
 URL和浏览器非常非常

00:15:08.180 --> 00:15:11.240
方便参考的东西

00:15:09.500 --> 00:15:12.649
有我们的初始化程序，我们只是

00:15:11.240 --> 00:15:14.569
要在这里传递，那是什么

00:15:12.649 --> 00:15:16.670
要说的是- Spring 来了

00:15:14.569 --> 00:15:19.279
是三种类型的应用程序

00:15:16.670 --> 00:15:22.730
参数和服务的主机顺序

00:15:19.279 --> 00:15:24.259
你知道为了-每当

00:15:22.730 --> 00:15:26.059
有人想注射他们给他们

00:15:24.259 --> 00:15:28.459
我们从中得到的参考

00:15:26.059 --> 00:15:32.089
我们用术语描述的供应商

00:15:28.459 --> 00:15:35.629
一个lambda开始就好了

00:15:32.089 --> 00:15:37.040
它将运行init方法

00:15:35.629 --> 00:15:39.259
是做任何工作的好地方

00:15:37.040 --> 00:15:41.240
无法在用户界面上运行

00:15:39.259 --> 00:15:43.189
线程，这样的东西，你

00:15:41.240 --> 00:15:45.439
想对你做知道的准备

00:15:43.189 --> 00:15:46.670
应用程序开始加载你会

00:15:45.439 --> 00:15:49.309
在这种情况下，我们在这里使用它作为

00:15:46.670 --> 00:15:50.240
一个令人羡慕的实例化 Spring 的地方

00:15:49.309 --> 00:15:52.819
和应用

00:15:50.240 --> 00:15:55.459
德克萨斯州地区与之相反

00:15:52.819 --> 00:15:57.490
另一端是停止

00:15:55.459 --> 00:16:01.490
承认还好，所以我要说停下来

00:15:57.490 --> 00:16:06.829
在这里，我们将近一点说点环境

00:16:01.490 --> 00:16:09.259
和平台唐娜退出是的，非常好

00:16:06.829 --> 00:16:11.059
现在我们看到这个启动方法

00:16:09.259 --> 00:16:13.850
方法非常有用，这是

00:16:11.059 --> 00:16:15.709
当

00:16:13.850 --> 00:16:16.999
应用程序准备就绪

00:16:15.709 --> 00:16:20.449
准备开始建造时

00:16:16.999 --> 00:16:22.069
设置您的用户界面，您可以

00:16:20.449 --> 00:16:24.199
所有在这里工作，但那将在

00:16:22.069 --> 00:16:25.519
这个不是您的应用程序类

00:16:24.199 --> 00:16:27.439
知道你不能从中受益

00:16:25.519 --> 00:16:29.300
注射等等

00:16:27.439 --> 00:16:33.019
 Spring 提供的服务，所以我

00:16:29.300 --> 00:16:35.360
我喜欢在这里做的是发布

00:16:33.019 --> 00:16:37.279
一个事件发布事件和事件

00:16:35.360 --> 00:16:40.639
我想我们只是来看看

00:16:37.279 --> 00:16:43.779
舞台准备事件是一个应用程序

00:16:40.639 --> 00:16:47.839
事件应用程序上下文事件权限

00:16:43.779 --> 00:16:50.899
首先是你知道的

00:16:47.839 --> 00:16:53.720
描述工作很直

00:16:50.899 --> 00:16:56.029
为了通过舞台，我们

00:16:53.720 --> 00:16:59.350
甚至可以更明确地

00:16:56.029 --> 00:17:06.189
我们可以说好吧，你知道公众场合

00:16:59.350 --> 00:17:06.189
做好舞台

00:17:07.309 --> 00:17:13.699
并返回这个点疮好吧

00:17:13.789 --> 00:17:22.679
更好地假设他们可以进行排序

00:17:21.120 --> 00:17:26.069
指向它，但为什么对，我们更好

00:17:22.679 --> 00:17:29.640
在他们还好之前就出去，所以我

00:17:26.069 --> 00:17:32.309
要把那个事件扔到新的舞台上

00:17:29.640 --> 00:17:34.529
活动主要阶段现在整个 Spring 

00:17:32.309 --> 00:17:36.630
表达兴趣的组件

00:17:34.529 --> 00:17:39.809
收听此事件将能够

00:17:36.630 --> 00:17:41.070
听它并初始化

00:17:39.809 --> 00:17:42.809
舞台或为舞台做贡献

00:17:41.070 --> 00:17:45.149
只要他们愿意，他们就可以这样做

00:17:42.809 --> 00:17:50.580
就由...管理的bean而言

00:17:45.149 --> 00:17:53.039
 Spring 很好，所以我想

00:17:50.580 --> 00:17:55.880
就这样，我认为就足够了

00:17:53.039 --> 00:17:58.559
这是非常非常简单的一种

00:17:55.880 --> 00:18:05.669
在那里集成了Java效果和

00:17:58.559 --> 00:18:07.289
对于现在的 Spring ，我们必须

00:18:05.669 --> 00:18:08.429
建立真正听的东西

00:18:07.289 --> 00:18:14.130
我想是那个事件，让我们回去

00:18:08.429 --> 00:18:15.659
在这里，您知道配置

00:18:14.130 --> 00:18:16.679
应用程序一点，让我们建立

00:18:15.659 --> 00:18:22.760
与之实际起作用的东西

00:18:16.679 --> 00:18:22.760
那个阶段好吧，所以去这里阶段

00:18:22.880 --> 00:18:26.120
初始化器或

00:18:33.390 --> 00:18:41.850
让我们看看我没有的应用程序运行器

00:18:38.580 --> 00:18:43.730
知道舞台聆听者好吧，我们去了

00:18:41.850 --> 00:18:45.750
哦，只是叫那种

00:18:43.730 --> 00:18:51.120
简单，这将

00:18:45.750 --> 00:18:58.799
实现应用程序监听器

00:18:51.120 --> 00:19:02.540
舞台准备事件的影响

00:18:58.799 --> 00:19:07.080
这种方法，我们在那里

00:19:02.540 --> 00:19:08.669
现在有我们的回调，我们现在可以

00:19:07.080 --> 00:19:10.410
可以做每个人的事，这是一个摇摆

00:19:08.669 --> 00:19:15.630
毕竟光束，所以说添加

00:19:10.410 --> 00:19:17.130
组件，我们要做的是

00:19:15.630 --> 00:19:20.100
我们将构建用户界面

00:19:17.130 --> 00:19:24.929
我们将通过给它一个

00:19:20.100 --> 00:19:28.350
标题，所以说标题或应用程序

00:19:24.929 --> 00:19:29.790
标题，这就是我要的东西

00:19:28.350 --> 00:19:32.220
外部化，以便我可以利用

00:19:29.790 --> 00:19:35.610
Spring 外在化能力

00:19:32.220 --> 00:19:37.860
Spring 和属性或消息

00:19:35.610 --> 00:19:46.700
你知道资源包，所以我要

00:19:37.860 --> 00:19:46.700
说 Spring 那个应用程序UI标题和

00:19:49.220 --> 00:19:52.580
让我们来看看

00:20:02.150 --> 00:20:05.800
你还好吧

00:20:08.400 --> 00:20:13.910
好了，现在有复制和

00:20:11.730 --> 00:20:13.910
糊

00:20:51.210 --> 00:21:02.300
好吧，那很奇怪，希望这是

00:20:54.120 --> 00:21:06.600
我刚刚更新到最新的固定

00:21:02.300 --> 00:21:09.930
和最伟大的Mac OS Mojave，所以我想知道

00:21:06.600 --> 00:21:13.530
如果那引起这些奇怪的奇怪

00:21:09.930 --> 00:21:18.830
记录好吧回到这好吧

00:21:13.530 --> 00:21:23.390
我们现在有了我们的Java FX应用程序

00:21:18.830 --> 00:21:23.390
而且我们有可启动的应用程序

00:21:24.230 --> 00:21:36.330
好了，就是这样，现在我们

00:21:29.160 --> 00:21:37.740
将要处理数据和

00:21:36.330 --> 00:21:42.500
我要给它的应用程序属性

00:21:37.740 --> 00:21:42.500
将从这里清除的标题

00:21:44.480 --> 00:21:51.270
跟随这个美丽的Java谢谢

00:21:48.390 --> 00:21:53.610
好了，这是我们的基本

00:21:51.270 --> 00:21:55.710
应用程序，现在我要做的是

00:21:53.610 --> 00:21:57.620
我真的想知道

00:21:55.710 --> 00:22:02.130
我们从这次活动中获得的舞台

00:21:57.620 --> 00:22:08.720
当我说舞台准备活动点

00:22:02.130 --> 00:22:11.730
我想做的就是我想要我

00:22:08.720 --> 00:22:13.500
想加载我的用户界面，所以我

00:22:11.730 --> 00:22:15.840
我不能以编程方式手动

00:22:13.500 --> 00:22:17.190
用Java对象建立用户

00:22:15.840 --> 00:22:18.870
接口层次结构并建立

00:22:17.190 --> 00:22:21.600
小部件，然后您知道所有这些东西

00:22:18.870 --> 00:22:22.470
用Java代码编写，但它要有用得多

00:22:21.600 --> 00:22:25.440
而且生产力更高

00:22:22.470 --> 00:22:27.150
特别是对于某种形式和

00:22:25.440 --> 00:22:30.120
像这样的分析型应用

00:22:27.150 --> 00:22:33.210
只是用FX来做

00:22:30.120 --> 00:22:36.540
 ml好的，这是JavaFX XML 

00:22:33.210 --> 00:22:43.140
标记语言，所以我们要说文件

00:22:36.540 --> 00:22:44.490
 XML的UI点将重新加载该点，我们将

00:22:43.140 --> 00:22:46.260
再过一秒钟再说

00:22:44.490 --> 00:22:48.720
现在，因为我们希望能够

00:22:46.260 --> 00:22:52.310
我们需要有一个指针的参考

00:22:48.720 --> 00:22:56.490
对资源如此私密的最后大门

00:22:52.310 --> 00:22:58.320
 XML资源当然是

00:22:56.490 --> 00:23:04.060
抽象核心Spring 使我们

00:22:58.320 --> 00:23:06.580
代表我们所要做的事情

00:23:04.060 --> 00:23:12.160
我们可以正确地进行输入输出

00:23:06.580 --> 00:23:14.010
 classpath / ui f也可以，所以您可以

00:23:12.160 --> 00:23:16.180
告诉 Spring 找到那个资源， 

00:23:14.010 --> 00:23:22.980
将其作为构造函数参数注入

00:23:16.180 --> 00:23:24.780
我们，然后我们说这个点XML资源

00:23:22.980 --> 00:23:26.890
好的

00:23:24.780 --> 00:23:32.010
现在我们要做的是

00:23:26.890 --> 00:23:32.010
要说我们想获取URL，所以URL 

00:23:32.640 --> 00:23:47.550
这个东西是F XML，我可以找到URL，所以

00:23:51.090 --> 00:24:03.720
好的，现在我们的网址已加载

00:23:56.850 --> 00:24:07.350
定义，所以我像这样的XML加载器

00:24:03.720 --> 00:24:09.809
要说URL点

00:24:07.350 --> 00:24:12.509
哦，就是这样，实际上已经过去了

00:24:09.809 --> 00:24:14.039
 URL，然后我们将努力

00:24:12.509 --> 00:24:16.559
恶臭的是控制器

00:24:14.039 --> 00:24:19.019
工厂，所以现在的问题是

00:24:16.559 --> 00:24:21.990
 F XML会在需要

00:24:19.019 --> 00:24:23.369
 F中已引用的对象

00:24:21.990 --> 00:24:24.960
 XML声明，那么我们将看到

00:24:23.369 --> 00:24:26.610
例如，以秒为单位

00:24:24.960 --> 00:24:28.259
我们有一个我使用界面

00:24:26.610 --> 00:24:32.039
控制器输入要获取的类

00:24:28.259 --> 00:24:33.809
参与那种

00:24:32.039 --> 00:24:36.119
功能支持功能

00:24:33.809 --> 00:24:37.740
对于用户界面，它必须找到

00:24:36.119 --> 00:24:39.509
符合特定类别的对象

00:24:37.740 --> 00:24:42.720
合同是这里的合同

00:24:39.509 --> 00:24:43.769
这里给了一个很好的类返回对象

00:24:42.720 --> 00:24:45.419
当然，那听起来像什么

00:24:43.769 --> 00:24:47.100
听起来像是那些东西之一

00:24:45.419 --> 00:24:51.090
 Spring 对我们来说真的很好

00:24:47.100 --> 00:24:54.090
我们要说我们需要指出

00:24:51.090 --> 00:24:56.879
对应用程序上下文的权利，所以我们

00:24:54.090 --> 00:25:00.269
可以获取该应用程序的参考

00:24:56.879 --> 00:25:01.590
上下文，我们可以做到这一点

00:25:00.269 --> 00:25:02.730
实际上注入它只是一个

00:25:01.590 --> 00:25:05.749
定期的 Spring 伴侣，所以我会说

00:25:02.730 --> 00:25:05.749
应用环境

00:25:08.430 --> 00:25:22.100
好了，现在我要说了

00:25:15.080 --> 00:25:33.210
上课的转身电脑

00:25:22.100 --> 00:25:37.920
好了，现在有我们的lambda和

00:25:33.210 --> 00:25:39.360
我们应该能够加载

00:25:37.920 --> 00:25:42.240
应用程序，所以我要说负载和

00:25:39.360 --> 00:25:45.330
我要问父母的小部件

00:25:42.240 --> 00:25:47.610
当他们返回路线小部件时

00:25:45.330 --> 00:25:49.260
由您返回，我们可以将其藏起来或

00:25:47.610 --> 00:25:50.880
我们可以使用它，而我要做什么

00:25:49.260 --> 00:25:53.390
这是我要用它来

00:25:50.880 --> 00:26:03.150
创建一个场景

00:25:53.390 --> 00:26:05.160
所以你看到路过

00:26:03.150 --> 00:26:08.540
宽度和高度可以说600 

00:26:05.160 --> 00:26:14.100
 600像素，然后我要说

00:26:08.540 --> 00:26:16.740
舞台设置场景舞台

00:26:14.100 --> 00:26:19.080
那就是标题，我们已经有了标题

00:26:16.740 --> 00:26:23.100
我们已经被注射，以便我们使用它

00:26:19.080 --> 00:26:25.770
舞台点集只是显示我想要的

00:26:23.100 --> 00:26:27.780
现在显示这个阶段，所以我们

00:26:25.770 --> 00:26:29.670
这就是我们的应用程序

00:26:27.780 --> 00:26:31.410
我们将建立用户界面

00:26:29.670 --> 00:26:32.550
实际还没有建立用户

00:26:31.410 --> 00:26:34.530
以这种方式进行交互，让我们做到这一点

00:26:32.550 --> 00:26:36.870
就在这里，所以我们要做的是

00:26:34.530 --> 00:26:39.020
要建立两个用户界面之一

00:26:36.870 --> 00:26:42.060
我们可以做到的方式，我们可以使用

00:26:39.020 --> 00:26:45.240
我认为很好的场景构建器

00:26:42.060 --> 00:26:46.500
正确的方法，所以我们是我们的

00:26:45.240 --> 00:26:48.930
再简单不过了

00:26:46.500 --> 00:26:51.140
实际上，您知道我们可以拖动并

00:26:48.930 --> 00:26:51.140
规则

00:26:56.380 --> 00:27:06.080
还是我们在这里，所以你可以看到

00:27:01.600 --> 00:27:11.540
可以说只是为了做而更有效率

00:27:06.080 --> 00:27:18.160
好的，所以我们要建立一个V形盒

00:27:11.540 --> 00:27:18.160
在框中，我们将有一个按钮

00:27:25.890 --> 00:27:28.700
控制项

00:27:30.640 --> 00:27:33.420
好吧

00:27:35.890 --> 00:27:38.790
和非法的

00:27:42.470 --> 00:27:51.390
好吧，现在回到这一点，我们应该

00:27:46.230 --> 00:27:53.340
有一个V形盒子，虽然你知道我没有

00:27:51.390 --> 00:27:57.750
真的知道我们需要这个孩子

00:27:53.340 --> 00:28:04.590
元素还可以

00:27:57.750 --> 00:28:07.620
我们需要给小部件一些ID 

00:28:04.590 --> 00:28:09.810
这样我们就可以让您知道连接

00:28:07.620 --> 00:28:11.190
它们给用户到Java对象中

00:28:09.810 --> 00:28:13.140
支持控制器，我们也

00:28:11.190 --> 00:28:14.310
需要指定，所以我们需要指定一个

00:28:13.140 --> 00:28:24.930
这里的事情数量如此之多

00:28:14.310 --> 00:28:27.870
 ID FX ID按钮FX ID标签正确和

00:28:24.930 --> 00:28:31.170
然后，我们需要指定一个

00:28:27.870 --> 00:28:33.500
控制器，所以我们去控制器

00:28:31.170 --> 00:28:33.500
这里

00:28:36.390 --> 00:28:41.250
好吧，控制器只是一束光

00:28:39.010 --> 00:28:44.170
那个 Spring 将涉及或

00:28:41.250 --> 00:28:48.580
正如我所说的，JavaFX将涉及到

00:28:44.170 --> 00:28:50.670
梁会是你知道简单的是什么

00:28:48.580 --> 00:28:57.490
这个

00:28:50.670 --> 00:28:59.500
你知道UI简单的UI控制器好吗

00:28:57.490 --> 00:29:02.230
这只是一个普通的Spring 物体

00:28:59.500 --> 00:29:07.900
一切都没有幻想

00:29:02.230 --> 00:29:13.120
 Spring ，我们要告诉这个委托

00:29:07.900 --> 00:29:16.510
到那个班的结果

00:29:13.120 --> 00:29:22.300
到连接工厂的电话

00:29:16.510 --> 00:29:24.400
我们在这里的某个地方

00:29:22.300 --> 00:29:26.530
连接他们连接控制器

00:29:24.400 --> 00:29:29.620
工厂将解决 bean 

00:29:26.530 --> 00:29:32.170
我们，所以你知道我们可以做

00:29:29.620 --> 00:29:33.940
这一点我们可以命名

00:29:32.170 --> 00:29:37.090
更好的应用程序上下文

00:29:33.940 --> 00:29:44.110
很好，所以我们有

00:29:37.090 --> 00:29:45.970
应用程序，还有我们的小部件

00:29:44.110 --> 00:29:47.440
简单的控制器，将会发生什么

00:29:45.970 --> 00:29:49.030
控制器启动时发生

00:29:47.440 --> 00:29:51.340
好，我们必须有一个藏身之处

00:29:49.030 --> 00:29:54.250
这些参考资料，让我们继续

00:29:51.340 --> 00:29:56.800
使用F建立一个简单的控制器

00:29:54.250 --> 00:30:00.370
 XML注释，请转到我们的简单UI 

00:29:56.800 --> 00:30:02.860
控制器，我们的应用程序将

00:30:00.370 --> 00:30:03.820
成为微不足道的权利的触发清单

00:30:02.860 --> 00:30:05.710
我们将保存公众和

00:30:03.820 --> 00:30:07.150
不幸的是，没有构造函数

00:30:05.710 --> 00:30:08.980
注射

00:30:07.150 --> 00:30:11.170
你不需要严格地说这个

00:30:08.980 --> 00:30:13.059
注释（如果您使用的是公共字段） 

00:30:11.170 --> 00:30:16.230
就像我现在一样，但是如果你决定

00:30:13.059 --> 00:30:18.880
做一个出于某种原因的私人领域

00:30:16.230 --> 00:30:20.440
你现在不知道我已经花了

00:30:18.880 --> 00:30:23.320
很多年没有在春夜里这样做

00:30:20.440 --> 00:30:25.720
我非常想避免私下

00:30:23.320 --> 00:30:28.000
我无法获得的领域-我

00:30:25.720 --> 00:30:29.679
不能通过测试和

00:30:28.000 --> 00:30:30.700
通过合作的对象是

00:30:29.679 --> 00:30:32.650
通过构造函数我会非常

00:30:30.700 --> 00:30:38.040
很想避免这种情况，所以我只用

00:30:32.650 --> 00:30:40.549
而是公开类型，所以我是公开的

00:30:38.040 --> 00:30:48.600
纽扣

00:30:40.549 --> 00:30:51.260
但是好吧，最后我想结霜

00:30:48.600 --> 00:30:53.700
你知道我们有初始化bean 

00:30:51.260 --> 00:30:55.080
 Spring 的回调接口

00:30:53.700 --> 00:30:57.809
同样的原则适用于

00:30:55.080 --> 00:31:00.960
这些都受到Java效果的约束

00:30:57.809 --> 00:31:03.240
即使在 Spring 之前

00:31:00.960 --> 00:31:04.200
 Spring 之后

00:31:03.240 --> 00:31:06.299
他们一定要建立一个

00:31:04.200 --> 00:31:09.299
和他一起工作，所以我要去

00:31:06.299 --> 00:31:12.960
在这里说这个东西按钮点集

00:31:09.299 --> 00:31:14.460
和动作监听器，我得到了一个

00:31:12.960 --> 00:31:18.179
活动以及我在活动中要做的事情

00:31:14.460 --> 00:31:18.720
是我会很好，让我们写

00:31:18.179 --> 00:31:20.490
一些文字

00:31:18.720 --> 00:31:26.730
好吧，让我们也许小睡一下吧

00:31:20.490 --> 00:31:28.169
在标签中宣布外观

00:31:26.730 --> 00:31:34.200
该代码的文档库以

00:31:28.169 --> 00:31:37.440
获取我需要的文档库

00:31:34.200 --> 00:31:40.159
服务，我们已经创建了这些

00:31:37.440 --> 00:31:49.470
那个指针和早饭的人，所以

00:31:40.159 --> 00:31:54.299
关闭服务很好并获取文档

00:31:49.470 --> 00:31:56.070
基本好吧好，所以有

00:31:54.299 --> 00:31:58.890
好的，这就是我们的简单

00:31:56.070 --> 00:32:00.510
演示，您可以看到 Spring 

00:31:58.890 --> 00:32:01.799
对，这就是您喜欢的所有东西

00:32:00.510 --> 00:32:03.960
这将是工作，这将是

00:32:01.799 --> 00:32:05.429
注入Spring 生命周期方法

00:32:03.960 --> 00:32:07.320
这种东西将被注入

00:32:05.429 --> 00:32:08.940
唯一的课堂是你不应该去的地方

00:32:07.320 --> 00:32:10.649
你能知道你不应该在哪里

00:32:08.940 --> 00:32:13.740
理所当然地认为

00:32:10.649 --> 00:32:15.330
 Spring 就是这样吗

00:32:13.740 --> 00:32:17.059
此应用程序中的其他所有内容都是

00:32:15.330 --> 00:32:20.580
让我开心，直到这就是为什么我会

00:32:17.059 --> 00:32:21.899
一次正确地做到这一点，但不是没有

00:32:20.580 --> 00:32:24.539
触摸它，你知道就把它藏在某个地方

00:32:21.899 --> 00:32:29.000
我们用它放在罐子里就可以了

00:32:24.539 --> 00:32:31.559
嗯，我们还想要什么呢？ 

00:32:29.000 --> 00:32:33.779
新的运行时异常，因为我们确实有

00:32:31.559 --> 00:32:37.640
一个可以帮助我们捕捉到这些的框架

00:32:33.779 --> 00:32:37.640
如果有的话就报错

00:32:38.850 --> 00:32:43.330
好吧，我认为我们在一个好的地方

00:32:41.320 --> 00:32:46.289
让我们尝试一下吧让我们尝试一下吧

00:32:43.330 --> 00:32:46.289
所以我们继续运行它

00:33:02.000 --> 00:33:07.280
好的

00:33:04.400 --> 00:33:10.520
所以有一个按钮，如果您单击它

00:33:07.280 --> 00:33:12.590
它向我们展示了您所知道的代码库

00:33:10.520 --> 00:33:14.930
定位实际文档库I 

00:33:12.590 --> 00:33:17.210
真的不知道我们还没有

00:33:14.930 --> 00:33:19.280
真的开始在这里刮擦服务

00:33:17.210 --> 00:33:23.180
我们有无数的东西

00:33:19.280 --> 00:33:24.980
我们可以做，但我希望

00:33:23.180 --> 00:33:26.990
你已经知道了对

00:33:24.980 --> 00:33:28.610
在这一点上有什么可能

00:33:26.990 --> 00:33:30.559
通过一起使用这些东西，我们可以

00:33:28.610 --> 00:33:33.380
建立动态的用户界面

00:33:30.559 --> 00:33:35.600
有表格，图表和网格

00:33:33.380 --> 00:33:37.640
等等，他们可以快速移动， 

00:33:35.600 --> 00:33:39.170
他们可以支持您了解实时排序

00:33:37.640 --> 00:33:40.150
 3d图形和渲染等等

00:33:39.170 --> 00:33:42.830
可以做各种非常有趣的事情

00:33:40.150 --> 00:33:45.320
没有其他考虑的可视化

00:33:42.830 --> 00:33:47.600
这是为您提供动力的一种方式

00:33:45.320 --> 00:33:50.000
您的观察者能力用例

00:33:47.600 --> 00:33:54.020
您的目标那种可视化

00:33:50.000 --> 00:33:55.580
事情很多，我们还没有谈过

00:33:54.020 --> 00:33:56.900
大概在这里，我希望我可以

00:33:55.580 --> 00:34:00.130
花了更多时间看

00:33:56.900 --> 00:34:02.120
那里的Web客户

00:34:00.130 --> 00:34:04.190
技术就像我们的插座

00:34:02.120 --> 00:34:06.710
对，我的意思是你可以用我们的插座

00:34:04.190 --> 00:34:07.880
将此连接到后端， 

00:34:06.710 --> 00:34:10.370
后端当然会由

00:34:07.880 --> 00:34:12.800
 Spring ，你知道反应网

00:34:10.370 --> 00:34:15.110
框架或交互式Spring 

00:34:12.800 --> 00:34:17.690
Spring 网页插件，因此您可以使用我们的

00:34:15.110 --> 00:34:19.730
套接字或您可以使用Web Web服务

00:34:17.690 --> 00:34:23.179
 HTTP REST API，您可以做任何事情

00:34:19.730 --> 00:34:24.500
想要在后端，但

00:34:23.179 --> 00:34:26.540
好处是我们现在有一种

00:34:24.500 --> 00:34:29.899
在两个客户端上都有相同的经验

00:34:26.540 --> 00:34:32.600
和服务哦，当然这是

00:34:29.899 --> 00:34:40.690
 Spring ，所以如果你去这个 spring boot 

00:34:32.600 --> 00:34:46.870
在这里建立配置执行程序

00:34:40.690 --> 00:34:46.870
 true，然后转到命令行

00:34:49.780 --> 00:34:59.830
命令行将转到项目

00:34:54.250 --> 00:35:02.790
本身的CD即使在

00:34:59.830 --> 00:35:02.790
包

00:35:12.000 --> 00:35:15.830
好，我们到那里去了

00:35:21.600 --> 00:35:27.690
哦，是的，我的测试没有看到该帖子

00:35:24.360 --> 00:35:32.990
服务，所以现在我们就跳过

00:35:27.690 --> 00:35:35.640
测试是一个简单的解决方法，但这是测试

00:35:32.990 --> 00:35:37.410
我们要做的就是告诉我们的测试

00:35:35.640 --> 00:35:38.910
自由市场，我们拥有那些

00:35:37.410 --> 00:35:41.160
功能均值定义

00:35:38.910 --> 00:35:44.790
否则看不到好

00:35:41.160 --> 00:35:47.490
我们去瞄准并记住我们有

00:35:44.790 --> 00:35:49.170
一个不只是高管哦胖子

00:35:47.490 --> 00:35:51.600
正确的看，我们有那个，但是你

00:35:49.170 --> 00:35:54.000
知道我们有什么我们可以精确地

00:35:51.600 --> 00:35:58.650
像右点一样执行它

00:35:54.000 --> 00:36:00.840
斜线好吗

00:35:58.650 --> 00:36:04.400
在那里，我们一切顺利，我的朋友们，谢谢

00:36:00.840 --> 00:36:04.400
这么多的观看，我们会看到

00:36:09.260 --> 00:36:11.320
您

