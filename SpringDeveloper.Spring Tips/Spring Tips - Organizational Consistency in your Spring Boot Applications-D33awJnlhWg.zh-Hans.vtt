WEBVTT
Kind: captions
Language: zh-Hans

00:00:24.779 --> 00:00:29.279
春天的粉丝们，欢迎来到另一个

00:00:27.509 --> 00:00:31.079
在此安装弹簧提示

00:00:29.279 --> 00:00:32.730
希望我们很快安装

00:00:31.079 --> 00:00:34.290
来看看一些方法

00:00:32.730 --> 00:00:36.360
使您的组织和代码

00:00:34.290 --> 00:00:38.190
更一致，我知道这是一个

00:00:36.360 --> 00:00:40.980
特别奇怪的角度购买，但

00:00:38.190 --> 00:00:42.329
我找到的是什么，什么是我们

00:00:40.980 --> 00:00:46.350
大多数艺术家发现的是

00:00:42.329 --> 00:00:48.269
约束赋予您自由权利

00:00:46.350 --> 00:00:51.329
被迫在以下限制内工作

00:00:48.269 --> 00:00:52.980
特定系统的一部分可以让您

00:00:51.329 --> 00:00:55.050
其他部分的灵活性更高

00:00:52.980 --> 00:00:56.790
系统，它使您无需考虑

00:00:55.050 --> 00:00:58.860
真正重要的事情等等

00:00:56.790 --> 00:01:01.799
 spring boot 真的很棒，因为它

00:00:58.860 --> 00:01:03.330
给你这个印象

00:01:01.799 --> 00:01:05.450
完全自由地做任何事情

00:01:03.330 --> 00:01:07.920
想要的同时还提供充足的

00:01:05.450 --> 00:01:10.740
这些护轮对护栏有帮助

00:01:07.920 --> 00:01:12.600
您将保持正确的道路

00:01:10.740 --> 00:01:13.950
您正在编写代码，并且

00:01:12.600 --> 00:01:15.780
您正在构建系统，这是

00:01:13.950 --> 00:01:17.280
对于大型特别重要

00:01:15.780 --> 00:01:18.840
组织，所以我们要说的是

00:01:17.280 --> 00:01:20.280
今天只是我的一些事情

00:01:18.840 --> 00:01:22.170
发现有助于简化操作

00:01:20.280 --> 00:01:26.490
为人们提供服务和

00:01:22.170 --> 00:01:28.350
规模合适的应用程序

00:01:26.490 --> 00:01:30.540
在不对人大的方面

00:01:28.350 --> 00:01:31.800
就像我的意思是他们确实会扩大

00:01:30.540 --> 00:01:32.670
 API请求的条款，但这不是

00:01:31.800 --> 00:01:34.680
我在说什么我在说什么

00:01:32.670 --> 00:01:37.110
作为一个组织，您的软件可以

00:01:34.680 --> 00:01:38.580
规模，所以我们只谈论一些

00:01:37.110 --> 00:01:40.020
可以帮助您的事情，而我

00:01:38.580 --> 00:01:41.220
从一些显而易见的事情开始， 

00:01:40.020 --> 00:01:41.820
也许你没有的一些小东西

00:01:41.220 --> 00:01:44.310
见过

00:01:41.820 --> 00:01:46.729
好吧，今天我只是我们要

00:01:44.310 --> 00:01:49.350
从构建一个简单的应用程序开始

00:01:46.729 --> 00:01:52.380
演示好吧，我们将使用

00:01:49.350 --> 00:01:53.729
 Spring Boot 2.2 om3我要带一个

00:01:52.380 --> 00:01:56.159
几个不同的依赖项，所以我带

00:01:53.729 --> 00:01:58.979
在配置处理器中

00:01:56.159 --> 00:02:03.900
那是我要带龙目岛

00:01:58.979 --> 00:02:05.909
好的，还有什么我们想要的

00:02:03.900 --> 00:02:13.230
我想可能就是这样

00:02:05.909 --> 00:02:17.280
对，所以我们将点击generate似乎正确

00:02:13.230 --> 00:02:18.900
对我来说，好吧，我会做一个非常

00:02:17.280 --> 00:02:22.230
简单的应用程序没事没事

00:02:18.900 --> 00:02:24.709
特别有趣的是，我们将在这里打开

00:02:22.230 --> 00:02:24.709
这个

00:02:27.150 --> 00:02:33.610
桌面是硬下载演示的想法

00:02:31.540 --> 00:02:35.500
在下一个毫米，所以我们正在建立一个

00:02:33.610 --> 00:02:36.910
全新的应用程序，我们要做

00:02:35.500 --> 00:02:39.220
尽可能琐碎的东西

00:02:36.910 --> 00:02:41.379
会看到那个我实际上不是

00:02:39.220 --> 00:02:42.910
演示我正在做的特定事情

00:02:41.379 --> 00:02:43.750
春天可以做的事情

00:02:42.910 --> 00:02:45.730
我们要做的第一件事就是

00:02:43.750 --> 00:02:47.470
构建一个打印出

00:02:45.730 --> 00:02:55.120
随机数没什么大不了，但是我们可以

00:02:47.470 --> 00:02:57.330
正确地做，所以我们在那里做就可以了

00:02:55.120 --> 00:02:57.330
它是

00:02:59.040 --> 00:03:13.150
好的，请确保我们拥有最新的

00:03:08.319 --> 00:03:15.129
最好，在这里，所以我们现在有一个

00:03:13.150 --> 00:03:16.780
我们说一个非常简单的应用

00:03:15.129 --> 00:03:21.670
我们想要构建一个应用程序

00:03:16.780 --> 00:03:25.510
当它启动时，注入a 

00:03:21.670 --> 00:03:27.970
然后知道号码的服务

00:03:25.510 --> 00:03:30.970
服务很简单很简单

00:03:27.970 --> 00:03:33.069
小事显然毫无意义

00:03:30.970 --> 00:03:39.930
好吧，那我们什么时候来

00:03:33.069 --> 00:03:42.250
让我们看看void生成并可以

00:03:39.930 --> 00:03:44.010
我不认为有一个我

00:03:42.250 --> 00:03:47.019
不假装这是

00:03:44.010 --> 00:03:48.630
你需要写的东西，但它会

00:03:47.019 --> 00:04:01.000
为我们展示一些东西

00:03:48.630 --> 00:04:03.450
私有最终线程本地随机新或

00:04:01.000 --> 00:04:08.109
它只是线程局部随机点得到

00:04:03.450 --> 00:04:10.660
当前日期还可以，实际上您会

00:04:08.109 --> 00:04:18.789
可能想每次都打电话给

00:04:10.660 --> 00:04:21.690
你会说好，你去

00:04:18.789 --> 00:04:27.849
我们要说线程局部随机

00:04:21.690 --> 00:04:30.010
点整数或下一个整数好

00:04:27.849 --> 00:04:31.900
怎么做一定会好，所以我要

00:04:30.010 --> 00:04:33.700
在这里创建一个界限，让我们

00:04:31.900 --> 00:04:38.530
说那是参数化Abul，是

00:04:33.700 --> 00:04:40.870
我们想要指定的东西

00:04:38.530 --> 00:04:44.169
当应用程序启动时

00:04:40.870 --> 00:04:47.190
在这里指定，它将成为

00:04:44.169 --> 00:04:49.300
我们在构造函数中创建的

00:04:47.190 --> 00:04:57.000
所以这是我们可以注入的东西

00:04:49.300 --> 00:05:02.950
您的财产，然后我们去

00:04:57.000 --> 00:05:08.400
好了，现在我们将其退回，我们将

00:05:02.950 --> 00:05:08.400
说下一个好东西

00:05:08.610 --> 00:05:13.120
好吧

00:05:11.199 --> 00:05:15.300
所以我们现在有了一个非常简单的

00:05:13.120 --> 00:05:18.129
我们要做的就是

00:05:15.300 --> 00:05:19.810
指定此界限为什么不这样

00:05:18.129 --> 00:05:21.520
似乎很高兴哦，没有豆类上涨，是的

00:05:19.810 --> 00:05:23.159
它不是豆子，所以我们不得不

00:05:21.520 --> 00:05:24.400
指定这个，我们将提供一个值

00:05:23.159 --> 00:05:26.139
好的

00:05:24.400 --> 00:05:27.460
所以它会来自一个财产

00:05:26.139 --> 00:05:30.189
某个地方会配置

00:05:27.460 --> 00:05:33.249
这个豆的价值还可以，所以我要

00:05:30.189 --> 00:05:35.620
我想我可以把它放在一个属性中

00:05:33.249 --> 00:05:37.240
一串，但我想要的一件事是我

00:05:35.620 --> 00:05:40.419
想要产生价值的东西

00:05:37.240 --> 00:05:43.029
二用一个属性来查找

00:05:40.419 --> 00:05:46.779
对象，所以这里一个非常普遍的方法是

00:05:43.029 --> 00:05:50.409
提取出来，假设我想要

00:05:46.779 --> 00:05:54.639
我想成为数字的速度点缀你

00:05:50.409 --> 00:05:57.039
知道随机点绑定好吗我还好

00:05:54.639 --> 00:05:58.629
保持简单的数字点绑定，这样

00:05:57.039 --> 00:06:00.009
那是我所期望的

00:05:58.629 --> 00:06:01.270
从这个春季框架环境

00:06:00.009 --> 00:06:02.169
这意味着我可以将其放入

00:06:01.270 --> 00:06:03.400
从字面上看，环境

00:06:02.169 --> 00:06:05.439
我要去的环境变量

00:06:03.400 --> 00:06:08.740
数字下划线一定会限制它

00:06:05.439 --> 00:06:10.479
可能等于我可以做的十

00:06:08.740 --> 00:06:11.919
任何一个，但是这是一个字符串对

00:06:10.479 --> 00:06:14.889
你知道你的希望，你希望

00:06:11.919 --> 00:06:15.969
当您从

00:06:14.889 --> 00:06:17.710
实际上是int的环境

00:06:15.969 --> 00:06:19.089
春天将不会有任何问题

00:06:17.710 --> 00:06:21.729
它，但是你不知道那里有没有

00:06:19.089 --> 00:06:23.589
没有保证在那里，当你

00:06:21.729 --> 00:06:24.879
当您键入此内容时，您不知道

00:06:23.589 --> 00:06:26.469
没有感觉到这个属性

00:06:24.879 --> 00:06:28.180
存在，你不知道它在那里还是

00:06:26.469 --> 00:06:30.909
不，所以非常普遍的事情是

00:06:28.180 --> 00:06:32.770
创建一个配置处理器不好意思

00:06:30.909 --> 00:06:35.199
是使用配置处理器来

00:06:32.770 --> 00:06:44.000
定义配置属性，让我们

00:06:35.199 --> 00:06:48.340
说课号属性

00:06:44.000 --> 00:06:54.260
好的，我要说是私有整数绑定

00:06:48.340 --> 00:06:56.960
所以我们只在这里很好地使用龙目岛

00:06:54.260 --> 00:07:03.680
我们要说的是启用配置

00:06:56.960 --> 00:07:07.580
属性编号属性doc类

00:07:03.680 --> 00:07:09.470
好吧，所以我们走了，我们在做什么

00:07:07.580 --> 00:07:10.580
是我们告诉春天嘿我想

00:07:09.470 --> 00:07:14.270
创建一个具有这些的对象

00:07:10.580 --> 00:07:15.710
属性绑定到

00:07:14.270 --> 00:07:19.640
环境，所以我要说

00:07:15.710 --> 00:07:23.419
这将使用称为

00:07:19.640 --> 00:07:27.020
数字，所以它会说数字点绑定

00:07:23.419 --> 00:07:28.910
所以现在春天开始的时候

00:07:27.020 --> 00:07:32.870
我编译代码，让我们都在这里做

00:07:28.910 --> 00:07:42.040
调用终端并进行Maven清理

00:07:32.870 --> 00:07:42.040
安装或清洁包装好吗

00:07:45.270 --> 00:07:51.479
好东西，所以现在要注意

00:07:49.289 --> 00:07:55.259
灰色背后的亮点

00:07:51.479 --> 00:07:56.580
这已经消失了，嗯，请确保

00:07:55.259 --> 00:08:03.690
我们都在同一页面上

00:07:56.580 --> 00:08:10.979
这个字体有点大，我们

00:08:03.690 --> 00:08:15.389
去6，所以你可以看到南数

00:08:10.979 --> 00:08:19.919
不要弹跳等于10，你可以看到

00:08:15.389 --> 00:08:21.840
该属性现在在此定义

00:08:19.919 --> 00:08:22.979
对象这个对象正在使用龙目岛所以

00:08:21.840 --> 00:08:24.509
它有吸气剂和二传手等等

00:08:22.979 --> 00:08:25.919
正确的东西我可以注入

00:08:24.509 --> 00:08:28.500
属性，我得到了吸气剂

00:08:25.919 --> 00:08:31.320
和二传手，所以这一切就在那里

00:08:28.500 --> 00:08:34.649
基于此属性，我现在可以

00:08:31.320 --> 00:08:35.880
在这里将其作为对象注入

00:08:34.649 --> 00:08:37.649
豆右春天实际上会

00:08:35.880 --> 00:08:38.729
创建该对象的光束

00:08:37.649 --> 00:08:43.760
而不是拥有这个字符串

00:08:38.729 --> 00:08:48.029
参考的东西在这里我可以说NP和

00:08:43.760 --> 00:08:49.260
那么我会说NP点正确绑定

00:08:48.029 --> 00:08:51.570
到这里，我们已经做了几件事

00:08:49.260 --> 00:08:54.420
完全创建了号码服务

00:08:51.570 --> 00:08:55.980
没有意义，我创建了一些

00:08:54.420 --> 00:08:57.720
用于定义该号码服务的属性

00:08:55.980 --> 00:09:00.740
好吧，现在我可以注入

00:08:57.720 --> 00:09:07.880
在某处编号服务并可以使用

00:09:00.740 --> 00:09:07.880
所以数字演示

00:09:07.960 --> 00:09:16.029
我要注入数字

00:09:11.470 --> 00:09:19.990
这里的服务创建一个构造函数事件

00:09:16.029 --> 00:09:25.300
侦听器应用程序就绪事件公共

00:09:19.990 --> 00:09:28.480
无效运行，然后此点号

00:09:25.300 --> 00:09:29.980
服务点生成随机数，而我

00:09:28.480 --> 00:09:39.540
只想注销数据，所以我将

00:09:29.980 --> 00:09:39.540
在妈妈处添加组件，以便J可以，并且

00:09:40.110 --> 00:09:46.170
货号好，我要说很久了

00:09:46.560 --> 00:09:55.990
随机数等于记住那是一个

00:09:54.040 --> 00:09:57.399
完全没有意义的演示，我认为我们可以

00:09:55.990 --> 00:09:58.870
同意，绝对公平地说

00:09:57.399 --> 00:10:00.459
但是我们做了什么，我们创建了两个

00:09:58.870 --> 00:10:02.709
对象何时是配置

00:10:00.459 --> 00:10:04.600
包含以下属性的属性

00:10:02.709 --> 00:10:06.190
这个属性文件，所以现在让我说

00:10:04.600 --> 00:10:07.870
我想现在再打一次

00:10:06.190 --> 00:10:09.700
到属性文件应用程序

00:10:07.870 --> 00:10:11.649
属性，然后点击控制空间

00:10:09.700 --> 00:10:15.610
我们添加到的配置处理器

00:10:11.649 --> 00:10:17.200
这边的帐单这东西在春天

00:10:15.610 --> 00:10:21.430
引导配置处理器

00:10:17.200 --> 00:10:26.230
实际上是德国的索引文件

00:10:21.430 --> 00:10:28.600
索引文件，正在由运行时使用

00:10:26.230 --> 00:10:30.130
在IDE中，它是具有JSON的索引文件

00:10:28.600 --> 00:10:32.290
四个基本上是JSON结构

00:10:30.130 --> 00:10:35.890
存储在构建中的那个

00:10:32.290 --> 00:10:37.750
 IDE正在使用它来协助它

00:10:35.890 --> 00:10:39.520
例如在自动完成中

00:10:37.750 --> 00:10:41.620
我可以说数字等于十英镑

00:10:39.520 --> 00:10:43.510
当我命令单击时，您可以看到

00:10:41.620 --> 00:10:45.220
当我突出显示并悬停在

00:10:43.510 --> 00:10:47.470
这并命令单击它需要我

00:10:45.220 --> 00:10:49.839
到这个对象好导航到这个

00:10:47.470 --> 00:10:53.470
配置属性对象

00:10:49.839 --> 00:10:55.480
知道这个物体和

00:10:53.470 --> 00:10:56.920
我们正在建立的机制

00:10:55.480 --> 00:10:59.200
这通常是在 spring boot 

00:10:56.920 --> 00:11:00.910
这不是智能的特征

00:10:59.200 --> 00:11:02.709
只有这样，您才可以使用NetBeans 

00:11:00.910 --> 00:11:04.630
在spring工具套件中使用它，因此

00:11:02.709 --> 00:11:07.930
对于开发人员来说是一个非常好的方法

00:11:04.630 --> 00:11:09.850
非常容易使用您的应用程序

00:11:07.930 --> 00:11:12.220
您现在可以使用配置

00:11:09.850 --> 00:11:13.690
这种情况下，如果您是我，这就是我的情况

00:11:12.220 --> 00:11:14.640
会和我的客户一起做那件事

00:11:13.690 --> 00:11:16.290
使用

00:11:14.640 --> 00:11:18.089
服务的基础架构和

00:11:16.290 --> 00:11:20.010
我配置的属性和

00:11:18.089 --> 00:11:21.630
这是实际的配置本身

00:11:20.010 --> 00:11:23.160
我想要的东西我已经

00:11:21.630 --> 00:11:26.519
消费者中的生产者相同

00:11:23.160 --> 00:11:28.350
代码页名义上这些东西是你

00:11:26.519 --> 00:11:31.920
知道他们可能生活在同一个地方

00:11:28.350 --> 00:11:34.110
代码页，但它们甚至可以实时运行

00:11:31.920 --> 00:11:36.839
在单独的包中，但让我们假设

00:11:34.110 --> 00:11:38.630
我实际上想重用这个

00:11:36.839 --> 00:11:41.730
号码服务和此配置

00:11:38.630 --> 00:11:44.760
无论出于何种原因跨多个罐子

00:11:41.730 --> 00:11:48.120
显然，这是一个演示，只是让我沉迷

00:11:44.760 --> 00:11:50.370
好吧，如果我想重用这个，我想

00:11:48.120 --> 00:11:53.220
提取到图书馆好吧

00:11:50.370 --> 00:11:57.140
让我们回到初始化程序

00:11:53.220 --> 00:12:00.560
我们将要创建一个数字， 

00:11:57.140 --> 00:12:05.250
我们要创建一个数字

00:12:00.560 --> 00:12:07.260
自动配置好了，所以我们在这里

00:12:05.250 --> 00:12:09.750
要加上我们要有龙目岛和

00:12:07.260 --> 00:12:13.160
弹簧配置处理器和

00:12:09.750 --> 00:12:15.450
就是这样，我们要点击生成和

00:12:13.160 --> 00:12:21.240
我们要做的就是创建一个新的

00:12:15.450 --> 00:12:23.839
罐子，我们回到这里ues number自动

00:12:21.240 --> 00:12:23.839
组态

00:12:28.380 --> 00:12:32.790
好吧，所以我在做的是

00:12:30.630 --> 00:12:34.620
我要这是Springwood应用程式，但我

00:12:32.790 --> 00:12:37.500
想要这个作为图书馆，所以我要

00:12:34.620 --> 00:12:40.250
我要做的就是删除所有

00:12:37.500 --> 00:12:40.250
你的包裹

00:12:41.090 --> 00:12:56.450
抱歉，我要创建的包裹编号

00:12:48.120 --> 00:12:56.450
八位数字自动配置

00:13:01.759 --> 00:13:10.290
好的数字超出了配置

00:13:07.009 --> 00:13:13.139
那年春天将是一堂课

00:13:10.290 --> 00:13:17.269
启动将读取将启动并在

00:13:13.139 --> 00:13:20.699
我们将要进行的配置

00:13:17.269 --> 00:13:29.060
注册类型号码服务束

00:13:20.699 --> 00:13:29.060
好，所以我们需要在这里

00:13:32.850 --> 00:13:38.050
好吧，我们不想依靠

00:13:36.550 --> 00:13:39.910
 classpath扫描，所以我要起飞

00:13:38.050 --> 00:13:45.540
该服务注释在那里，我将

00:13:39.910 --> 00:13:45.540
刚做就行了

00:13:45.899 --> 00:13:50.220
现在同样的问题，我需要指针

00:13:48.399 --> 00:13:54.069
属性本身的数量

00:13:50.220 --> 00:13:55.899
好吧，我会通过的，所以

00:13:54.069 --> 00:13:57.670
现在我已经将此光束注册到

00:13:55.899 --> 00:13:59.199
配置，现在我想要的是

00:13:57.670 --> 00:14:00.999
此配置要注册

00:13:59.199 --> 00:14:02.949
每当有人在这个图书馆

00:14:00.999 --> 00:14:04.660
类路径，这很容易，这是

00:14:02.949 --> 00:14:05.829
我去找资源总监

00:14:04.660 --> 00:14:09.579
我要在这里创建一个新目录

00:14:05.829 --> 00:14:10.839
称为meta in，我将创建一个新的

00:14:09.579 --> 00:14:20.019
那里的文件称为弹簧网

00:14:10.839 --> 00:14:21.339
工厂，在这里我将使用

00:14:20.019 --> 00:14:23.949
属性，这是一个服务加载器

00:14:21.339 --> 00:14:25.930
春天的机制还可以

00:14:23.949 --> 00:14:28.329
资源meta F spring那工厂

00:14:25.930 --> 00:14:30.189
将导致这个，你知道这是

00:14:28.329 --> 00:14:31.360
将在所有

00:14:30.189 --> 00:14:33.220
不同的罐子会找到这个

00:14:31.360 --> 00:14:35.470
属性，在这里我可以列出任何

00:14:33.220 --> 00:14:37.589
我想要的自动配置

00:14:35.470 --> 00:14:42.100
在乎，所以我要创建这个

00:14:37.589 --> 00:14:44.439
我要复制此go的引用

00:14:42.100 --> 00:14:47.110
到我的春天两个工厂，在那里

00:14:44.439 --> 00:14:49.089
没关系，所以现在我告诉了我

00:14:47.110 --> 00:14:54.370
数字自动配置，现在我

00:14:49.089 --> 00:14:56.050
想消耗我的这种依赖

00:14:54.370 --> 00:14:56.860
代码正确，所以我实际上是什么

00:14:56.050 --> 00:14:59.230
我要做我要摆脱的

00:14:56.860 --> 00:15:01.120
使它成为所谓的脂肪的东西

00:14:59.230 --> 00:15:03.670
 jar和应用程序，我将摆脱所有

00:15:01.120 --> 00:15:05.199
我不想我要离开

00:15:03.670 --> 00:15:08.019
在这东西里，我要留在

00:15:05.199 --> 00:15:11.170
 Spring Boot Starter现在通常在此

00:15:08.019 --> 00:15:13.360
如果你不想你的初学者

00:15:11.170 --> 00:15:15.730
取决于您的自动配置

00:15:13.360 --> 00:15:17.050
依次指定spring的版本

00:15:15.730 --> 00:15:20.649
启动它不应该管理它吗

00:15:17.050 --> 00:15:23.199
不应该坚持这样，所以你可能

00:15:20.649 --> 00:15:27.279
实际上，这种情况想引入

00:15:23.199 --> 00:15:28.749
弹簧靴炸弹的物料清单

00:15:27.279 --> 00:15:30.759
这样，您实际上就可以将其引入

00:15:28.749 --> 00:15:32.199
作为另一个依赖，它具有效果

00:15:30.759 --> 00:15:34.389
级别设置您的依赖

00:15:32.199 --> 00:15:36.490
版本不影响

00:15:34.389 --> 00:15:38.170
人们所使用的树

00:15:36.490 --> 00:15:39.819
正在消耗您的图书馆，但我要

00:15:38.170 --> 00:15:42.699
保持简单，因为我没有

00:15:39.819 --> 00:15:44.290
指定诸如编译器之类的东西

00:15:42.699 --> 00:15:45.440
插件和所有其他东西，所以我会离开

00:15:44.290 --> 00:15:47.449
这一切都在这里

00:15:45.440 --> 00:15:49.430
但是有很好的文档

00:15:47.449 --> 00:15:57.500
关于您将要做什么的细节

00:15:49.430 --> 00:16:06.310
在这里，所以春季食品入门维基如何

00:15:57.500 --> 00:16:06.310
你知道那里有你去

00:16:09.730 --> 00:16:16.879
弹簧靴启动器，所以你知道这些

00:16:15.019 --> 00:16:19.129
首先让我们看看创造出来的

00:16:16.879 --> 00:16:21.860
你去那里你去

00:16:19.129 --> 00:16:22.939
因此，当您创建启动器时， 

00:16:21.860 --> 00:16:24.170
正确的两个位

00:16:22.939 --> 00:16:26.420
自动配置就是我们要做的

00:16:24.170 --> 00:16:29.660
现在就做，并且有入门

00:16:26.420 --> 00:16:32.870
依赖性，但是当您使用时

00:16:29.660 --> 00:16:36.579
创建自己的启动器不启动

00:16:32.870 --> 00:16:38.810
您的模块名称与Spring Boot这样

00:16:36.579 --> 00:16:40.790
你知道，因为那样

00:16:38.810 --> 00:16:42.920
对于使用maven的人来说更容易

00:16:40.790 --> 00:16:44.620
这样他们就不会发现你的东西

00:16:42.920 --> 00:16:49.339
蜡，他们实际上并不会自动完成

00:16:44.620 --> 00:16:50.660
 spring boot -我们可能会做的您的API 

00:16:49.339 --> 00:16:54.740
将来也一样

00:16:50.660 --> 00:16:58.250
那是很方便的事情

00:16:54.740 --> 00:16:59.360
好的，所以我们要

00:16:58.250 --> 00:17:01.779
现在就避免这样做

00:16:59.360 --> 00:17:03.800
创建一个自动配置模块的权利

00:17:01.779 --> 00:17:05.990
嗯，实际上我将其命名为“自动” 

00:17:03.800 --> 00:17:11.959
配置，我们将其命名为“自动” 

00:17:05.990 --> 00:17:17.059
配置好吧，所以自动配置，我

00:17:11.959 --> 00:17:19.339
会叫这个数字好还是春天

00:17:17.059 --> 00:17:21.610
提示，您可以去通话号码自动

00:17:19.339 --> 00:17:24.169
配置，所以这有

00:17:21.610 --> 00:17:28.659
我们想要的依赖关系

00:17:24.169 --> 00:17:28.659
配置处理器还可以

00:17:29.500 --> 00:17:34.059
我们需要弹簧启动器

00:17:31.929 --> 00:17:39.309
依赖，就是这样， 

00:17:34.059 --> 00:17:44.110
那是我认为基本设置之一

00:17:39.309 --> 00:17:45.639
配置元数据好，所以我们

00:17:44.110 --> 00:17:48.639
要称呼这是自动

00:17:45.639 --> 00:17:49.950
配置依赖权，这是

00:17:48.639 --> 00:17:52.000
取决于它具有自动配置

00:17:49.950 --> 00:17:56.879
有区别的原因

00:17:52.000 --> 00:17:59.169
在自动配置jar和

00:17:56.879 --> 00:18:00.129
入门者是入门者带来的

00:17:59.169 --> 00:18:02.110
所需的依赖项

00:18:00.129 --> 00:18:03.909
使这项工作而汽车

00:18:02.110 --> 00:18:07.210
配置中有这样的代码

00:18:03.909 --> 00:18:09.250
理论上我可以创造更多

00:18:07.210 --> 00:18:12.129
动态自动配置，比方说

00:18:09.250 --> 00:18:14.159
我已经说了一些

00:18:12.129 --> 00:18:16.750
我们在没有JVM的原因

00:18:14.159 --> 00:18:22.450
线程本地随机好吧，所以我可以说

00:18:16.750 --> 00:18:26.409
可以，条件是在类线程本地

00:18:22.450 --> 00:18:28.360
随机点类，这意味着

00:18:26.409 --> 00:18:30.279
该配置只会

00:18:28.360 --> 00:18:32.440
如果该类型在COS上则激活

00:18:30.279 --> 00:18:33.909
实际会阻止它的路径

00:18:32.440 --> 00:18:36.759
被正确注册将停止

00:18:33.909 --> 00:18:38.830
配置类等

00:18:36.759 --> 00:18:40.269
注册，这对您很有用

00:18:38.830 --> 00:18:42.610
可以创建非常动态的应用程序

00:18:40.269 --> 00:18:44.620
你可以说这个图书馆你

00:18:42.610 --> 00:18:46.570
正在测试，您知道谁的礼物是

00:18:44.620 --> 00:18:50.429
通过事实检验

00:18:46.570 --> 00:18:52.750
此类由依赖项隐含

00:18:50.429 --> 00:18:55.480
如果该类在图书馆，那么

00:18:52.750 --> 00:18:57.519
可以注册这些bean，所以在我们的代码中

00:18:55.480 --> 00:19:00.669
我们当然在图书馆上课

00:18:57.519 --> 00:19:02.559
上课的路径，但不必

00:19:00.669 --> 00:19:06.429
对吧，这是什么，这是什么傻

00:19:02.559 --> 00:19:11.440
我可以带来的例子

00:19:06.429 --> 00:19:14.019
我在这里注册依赖项

00:19:11.440 --> 00:19:20.149
 spring web flex好，所以我要用

00:19:14.019 --> 00:19:26.179
反应式弹簧靴启动器网

00:19:20.149 --> 00:19:26.179
助焊剂好吧，我要把这个范围

00:19:28.159 --> 00:19:34.230
可选，这是真的，所以我带了

00:19:32.010 --> 00:19:36.659
这种依赖关系是针对我的

00:19:34.230 --> 00:19:40.470
代码，现在我要注册另一个

00:19:36.659 --> 00:19:44.809
我要在光束路由器上说

00:19:40.470 --> 00:19:44.809
功能还可以

00:19:45.950 --> 00:19:52.340
还是它的范围提供给您

00:19:51.539 --> 00:20:06.559
走

00:19:52.340 --> 00:20:06.559
好吧，让那个构建Maven好吧，我们开始

00:20:07.340 --> 00:20:16.909
来吧作家功能，我们去

00:20:13.500 --> 00:20:16.909
服务器响应哦

00:20:22.920 --> 00:20:30.990
好吧，所以我正在做的是创建一个

00:20:24.510 --> 00:20:37.970
功能性反应终点，它将

00:20:30.990 --> 00:20:43.470
只需提供数字点即可获取数字

00:20:37.970 --> 00:20:48.200
新的处理程序功能，我要使用

00:20:43.470 --> 00:20:48.200
这个号码服务在这里好

00:20:48.590 --> 00:20:55.460
所以我正在使用对该si的引用

00:20:51.240 --> 00:20:59.780
服务器响应点正常点同步主体

00:20:55.460 --> 00:21:06.380
和s点生成随机成员可以

00:20:59.780 --> 00:21:09.380
我们实际上可以做一个针图

00:21:06.380 --> 00:21:09.380
数

00:21:10.780 --> 00:21:17.140
好吧，现在我们去了

00:21:14.030 --> 00:21:21.740
单例地图，我们有一个随机数

00:21:17.140 --> 00:21:23.360
在那里添加这个好吧，现在我有一个

00:21:21.740 --> 00:21:25.220
我现在要这个随机数吗

00:21:23.360 --> 00:21:27.410
一直保持功能

00:21:25.220 --> 00:21:28.940
我图书馆的用户没有Spring 

00:21:27.410 --> 00:21:33.410
回到课堂上的网络弯曲，所以我可以

00:21:28.940 --> 00:21:34.940
说有条件的，你知道这是什么

00:21:33.410 --> 00:21:36.770
我猜路由器功能我的东西

00:21:34.940 --> 00:21:39.500
内部函数的类型可能不是

00:21:36.770 --> 00:21:41.000
在那里，这束光只会

00:21:39.500 --> 00:21:43.130
如果此类型为true并且已注册

00:21:41.000 --> 00:21:45.890
我们不假设这是真的，所以如果你

00:21:43.130 --> 00:21:48.500
如果您使用我们的依赖项，请安装

00:21:45.890 --> 00:21:51.740
然后在代码中自动配置数字

00:21:48.500 --> 00:21:54.020
这不会，这不会被激活

00:21:51.740 --> 00:21:55.250
除非你也带春天

00:21:54.020 --> 00:22:03.220
靴启动webhook，让我们尝试一下

00:21:55.250 --> 00:22:07.120
出去让我们在这里进入控制台吧

00:22:03.220 --> 00:22:07.120
甚至可以安装

00:22:17.519 --> 00:22:26.679
让我们看看我所有的测试是哪个文件

00:22:23.919 --> 00:22:28.950
应该可以测试，但是我不

00:22:26.679 --> 00:22:28.950
有时间

00:22:35.310 --> 00:22:42.930
即使他们甚至干净安装

00:22:46.500 --> 00:22:51.340
好的，所以现在就安装了

00:22:49.840 --> 00:22:52.540
想要重用此功能，以便

00:22:51.340 --> 00:22:55.450
让我们去看看如果我带来

00:22:52.540 --> 00:22:59.200
他们进入我的其他应用程序

00:22:55.450 --> 00:23:04.620
在这里，我要去我的建筑并带来

00:22:59.200 --> 00:23:04.620
在那种自动配置中

00:23:08.860 --> 00:23:15.760
很好所以有这个版本是

00:23:12.890 --> 00:23:19.570
可能是同一个人

00:23:15.760 --> 00:23:19.570
因为我不认为我已经改变了

00:23:20.020 --> 00:23:28.549
对，所以我们可以，所以有

00:23:26.870 --> 00:23:29.360
所以现在我要带上汽车

00:23:28.549 --> 00:23:31.460
组态

00:23:29.360 --> 00:23:33.650
我写这个的时候改变了包装

00:23:31.460 --> 00:23:41.740
代码，因此请确保我们将其注释掉

00:23:33.650 --> 00:23:41.740
那个好东西

00:23:46.550 --> 00:23:50.290
甚至可以重新导入

00:23:53.830 --> 00:24:01.390
那里的号码服务，所以复制一个

00:23:58.520 --> 00:24:01.390
对此参考

00:24:07.129 --> 00:24:12.710
包裹号进口

00:24:13.650 --> 00:24:18.230
对

00:24:15.890 --> 00:24:20.049
我认为该类型不是公开的吗

00:24:18.230 --> 00:24:27.400
哦不

00:24:20.049 --> 00:24:27.400
所以号码自动配置

00:24:35.090 --> 00:24:38.780
好吧

00:24:39.760 --> 00:24:46.000
好吧，现在好了，我们安装了所有

00:24:43.760 --> 00:24:46.000
那

00:24:49.670 --> 00:24:54.140
回到这里，你输入

00:24:52.050 --> 00:24:56.670
我们的公众，所以现在我可以注入豆

00:24:54.140 --> 00:24:57.870
对，我不是，我不配置

00:24:56.670 --> 00:24:59.790
这段代码中我没有地方

00:24:57.870 --> 00:25:03.870
实际配置该依赖关系的原因

00:24:59.790 --> 00:25:09.560
它仍然不快乐吗？ 

00:25:03.870 --> 00:25:09.560
公众哦乔希不要偷懒

00:25:12.980 --> 00:25:20.150
好了，我们走了，所以现在我们回到这里

00:25:22.390 --> 00:25:29.260
我们去那里，所以现在也是公开的

00:25:24.159 --> 00:25:30.700
所以现在我可以运行相同的代码而无需

00:25:29.260 --> 00:25:32.200
无需进行自动配置

00:25:30.700 --> 00:25:35.140
现在配置这些依赖项，如果

00:25:32.200 --> 00:25:40.140
艾米丽（Emily）想重用这种基本行为

00:25:35.140 --> 00:25:40.140
好的，没有发现

00:25:40.320 --> 00:25:44.230
路由器功能哦

00:25:42.190 --> 00:25:46.299
所以它正在尝试加载它，因为

00:25:44.230 --> 00:25:47.769
在方法中有我

00:25:46.299 --> 00:25:50.320
应该做的是我需要警戒线

00:25:47.769 --> 00:25:57.360
这变成了嵌套配置

00:25:50.320 --> 00:25:59.529
我可以说静态类Web配置和我

00:25:57.360 --> 00:26:04.139
这样就不会加载

00:25:59.529 --> 00:26:07.419
外层阶级而不是内层阶级的权利

00:26:04.139 --> 00:26:10.389
所以我们去了公共静态，我想要

00:26:07.419 --> 00:26:12.519
这只被加载他们想要新的

00:26:10.389 --> 00:26:16.500
嵌套类仅在此情况下加载

00:26:12.519 --> 00:26:16.500
打字机功能在类路径上

00:26:20.559 --> 00:26:26.430
好的

00:26:23.410 --> 00:26:26.430
我们应该开始吗

00:26:29.550 --> 00:26:32.970
好吧，那么你就开始了

00:26:31.650 --> 00:26:35.220
没有错误，因为它没有尝试

00:26:32.970 --> 00:26:36.690
加载Web终结点，但我想要

00:26:35.220 --> 00:26:38.430
 Web端点，这就是我们得到的地方

00:26:36.690 --> 00:26:40.230
进入启动器的概念，所以

00:26:38.430 --> 00:26:42.420
你可以看到我有两种方式

00:26:40.230 --> 00:26:44.070
在我的自动配置中，我已经

00:26:42.420 --> 00:26:45.720
默认模态，类似于集合

00:26:44.070 --> 00:26:46.800
运行中的咖啡豆数量，并通过

00:26:45.720 --> 00:26:49.260
启动应用程序时的默认设置

00:26:46.800 --> 00:26:52.560
而且我也有这个网站，但模态

00:26:49.260 --> 00:26:54.030
这种仅运行的网络行为

00:26:52.560 --> 00:26:55.890
如果有一个包装上

00:26:54.030 --> 00:26:57.840
类路径或

00:26:55.890 --> 00:27:00.120
课堂路径，所以我希望能够

00:26:57.840 --> 00:27:01.590
支持或导出该功能到

00:27:00.120 --> 00:27:03.420
世界和你做事的方式就是你

00:27:01.590 --> 00:27:04.440
创建您自己的入门依赖项，以便

00:27:03.420 --> 00:27:07.110
我有一个自动配置

00:27:04.440 --> 00:27:08.430
依赖关系，您可以创建一个入门

00:27:07.110 --> 00:27:10.320
依赖以及入门

00:27:08.430 --> 00:27:12.210
依赖只是带来了东西

00:27:10.320 --> 00:27:13.890
您希望能够激活

00:27:12.210 --> 00:27:15.420
您可以使用某些功能

00:27:13.890 --> 00:27:18.510
看到我们在 spring boot 全部

00:27:15.420 --> 00:27:22.530
时间，所以我们说春季食物你知道

00:27:18.510 --> 00:27:27.330
 spring boot 有什么好处

00:27:22.530 --> 00:27:28.770
入门网站权利，否则罐子

00:27:27.330 --> 00:27:32.130
基本上是空的，里面什么也没有

00:27:28.770 --> 00:27:33.600
对，罐子本身没有

00:27:32.130 --> 00:27:39.840
除Maven以外的任何功能

00:27:33.600 --> 00:27:41.490
这位掌上实习生指定您知道的

00:27:39.840 --> 00:27:43.470
我们需要这些库来组成

00:27:41.490 --> 00:27:45.120
对Web Flex的支持，因此它带来了

00:27:43.470 --> 00:27:48.840
 spring boot 启动程序进入网络

00:27:45.120 --> 00:27:51.030
弹性支持等等等，所以你可以

00:27:48.840 --> 00:27:52.230
创建您自己的Maven启动器，您

00:27:51.030 --> 00:27:53.760
知道请确保不要用

00:27:52.230 --> 00:27:56.250
 spring boot 一定要像你知道的

00:27:53.760 --> 00:27:59.880
您是一个合作社ID，然后

00:27:56.250 --> 00:28:01.410
数字人工神器

00:27:59.880 --> 00:28:06.620
起动器弹簧不佳起动器编号

00:28:01.410 --> 00:28:08.940
对，那只会带来

00:28:06.620 --> 00:28:10.740
依赖项的正确版本

00:28:08.940 --> 00:28:12.270
再次想要的话，您可以使用

00:28:10.740 --> 00:28:14.970
 Maven炸弹那里的Maven比尔

00:28:12.270 --> 00:28:17.010
材料依赖，你可能会说我

00:28:14.970 --> 00:28:20.400
想要有数字Springwood入门

00:28:17.010 --> 00:28:21.690
网络权利，所以那将是

00:28:20.400 --> 00:28:23.400
如果有人带进去

00:28:21.690 --> 00:28:25.200
那里没有Java代码

00:28:23.400 --> 00:28:27.150
只具有传递的效果

00:28:25.200 --> 00:28:29.490
甚至逼我加弹簧靴

00:28:27.150 --> 00:28:31.740
对您的应用程序启动了Web flex 

00:28:29.490 --> 00:28:32.940
你知道，它也会带来

00:28:31.740 --> 00:28:34.680
自动配置但带来的数字

00:28:32.940 --> 00:28:36.360
此自动配置，它将

00:28:34.680 --> 00:28:37.500
带上 spring boot 或网状软垫

00:28:36.360 --> 00:28:40.530
你将拥有一切

00:28:37.500 --> 00:28:42.570
需要运行这个

00:28:40.530 --> 00:28:44.820
在配置类中，所以让我们

00:28:42.570 --> 00:28:46.650
可以通过某种捷径来处理

00:28:44.820 --> 00:28:49.289
实际去看我们的演示

00:28:46.650 --> 00:28:51.990
在web flex中添加以激活该功能

00:28:49.289 --> 00:28:52.710
功能，所以我们现在有了

00:28:51.990 --> 00:28:55.460
做同样的事情

00:28:52.710 --> 00:28:59.150
现在条件将评估为真

00:28:55.460 --> 00:28:59.150
我们可以重新启动

00:29:05.350 --> 00:29:09.519
好吧，所以你可以看到

00:29:07.750 --> 00:29:11.380
应用程序启动，但尚未关闭

00:29:09.519 --> 00:29:14.500
它没有停止，因为它仍然

00:29:11.380 --> 00:29:18.970
运行，因为我们创建了一个切入点

00:29:14.500 --> 00:29:20.370
所以我认为这叫号码

00:29:18.970 --> 00:29:22.210
你去

00:29:20.370 --> 00:29:24.130
好的，所以我们创建了一个休息端点

00:29:22.210 --> 00:29:25.450
基于自动配置动态

00:29:24.130 --> 00:29:27.250
而且我们不必写任何

00:29:25.450 --> 00:29:29.740
我们在客户端上使用的代码

00:29:27.250 --> 00:29:31.179
为此，这是一座

00:29:29.740 --> 00:29:33.880
自动配置的入门构建

00:29:31.179 --> 00:29:35.710
自动配置模块的构建

00:29:33.880 --> 00:29:38.110
促进整个企业的可重用性

00:29:35.710 --> 00:29:39.549
组织这是一种非常有用的方法

00:29:38.110 --> 00:29:41.470
确保您在

00:29:39.549 --> 00:29:43.059
您不同的团队和

00:29:41.470 --> 00:29:44.649
您可能会提取的组织

00:29:43.059 --> 00:29:46.299
诸如您的安全配置之类的东西

00:29:44.649 --> 00:29:49.000
放入一个单独的罐子里，您可能会提取

00:29:46.299 --> 00:29:50.470
排除日志和审核之类的内容， 

00:29:49.000 --> 00:29:51.940
你想要做的事情

00:29:50.470 --> 00:29:53.350
整个组织的一致方式

00:29:51.940 --> 00:29:55.139
正确的也许是您配置的方式

00:29:53.350 --> 00:29:57.669
您特定的连接池

00:29:55.139 --> 00:29:59.200
旧版db2实例或类似的东西

00:29:57.669 --> 00:30:03.399
这些东西无论如何

00:29:59.200 --> 00:30:06.730
完全取决于您

00:30:03.399 --> 00:30:08.190
现在决定通过工作离开

00:30:06.730 --> 00:30:11.259
到目前为止我已经完成了

00:30:08.190 --> 00:30:14.289
封面，我想我们已经看了很多

00:30:11.259 --> 00:30:17.409
这里有不同的事情，我们已经看过

00:30:14.289 --> 00:30:19.600
在一些事情上，我们已经看过

00:30:17.409 --> 00:30:23.080
我们看过的自动配置

00:30:19.600 --> 00:30:24.399
您自己的自动配置jar和

00:30:23.080 --> 00:30:26.710
入门者，我们研究了所有这些

00:30:24.399 --> 00:30:28.269
你可以做一会儿的事情

00:30:26.710 --> 00:30:29.440
接下来，我认为下一步很合逻辑

00:30:28.269 --> 00:30:30.340
人不接受的是，你可以

00:30:29.440 --> 00:30:34.330
真正建造自己的春天

00:30:30.340 --> 00:30:35.500
初始值设定项正确，所以我们说

00:30:34.330 --> 00:30:37.210
我经历了

00:30:35.500 --> 00:30:39.490
建立一个像我一样的启动器

00:30:37.210 --> 00:30:41.559
说只是带给您的Maven Pom 

00:30:39.490 --> 00:30:45.850
自动配置，它带来了您的

00:30:41.559 --> 00:30:48.220
您的必备条件

00:30:45.850 --> 00:30:49.600
从环境中您知道依赖

00:30:48.220 --> 00:30:51.879
那里弹簧助推器网插头和

00:30:49.600 --> 00:30:53.590
所以说我现在已经完成了

00:30:51.879 --> 00:30:54.879
我自己对

00:30:53.590 --> 00:30:55.690
初始化器右启动弹簧

00:30:54.879 --> 00:30:57.220
我喔

00:30:55.690 --> 00:30:59.919
您可以与我们合作- 

00:30:57.220 --> 00:31:01.179
我们可以添加非常非常漫长的过程

00:30:59.919 --> 00:31:02.590
如果您有依赖，请在这里

00:31:01.179 --> 00:31:04.210
建立了一个大社区

00:31:02.590 --> 00:31:06.490
我所了解的是开源的

00:31:04.210 --> 00:31:07.990
始终保持不变，但如果您只是

00:31:06.490 --> 00:31:10.059
想要拥有自己的初始化程序

00:31:07.990 --> 00:31:12.780
您的组织，所以开始

00:31:10.059 --> 00:31:15.060
组织IO 

00:31:12.780 --> 00:31:16.740
但是我们可以做到这一点，而你可以做到

00:31:15.060 --> 00:31:18.420
你自己什么都不需要

00:31:16.740 --> 00:31:24.900
特别的，所以你可以去

00:31:18.420 --> 00:31:26.670
 github.com spring io，您会看到

00:31:24.900 --> 00:31:28.740
春天的门牙实际上是

00:31:26.670 --> 00:31:30.960
生成器首先是一个API 

00:31:28.740 --> 00:31:33.480
这个项目在这里代表

00:31:30.960 --> 00:31:35.400
 Spring IO初始值设定项，然后是

00:31:33.480 --> 00:31:37.410
然后有一个特别的定制

00:31:35.400 --> 00:31:40.980
它的实现称为启动

00:31:37.410 --> 00:31:42.360
春天的IO，这就是这里

00:31:40.980 --> 00:31:44.090
那是开始的开始客户端

00:31:42.360 --> 00:31:46.080
网站，这实际上是

00:31:44.090 --> 00:31:47.820
与那个发电机的整合

00:31:46.080 --> 00:31:49.440
生成是通用的，不必

00:31:47.820 --> 00:31:50.640
用于弹簧和用户

00:31:49.440 --> 00:31:52.380
界面不必看起来像我们的

00:31:50.640 --> 00:31:53.730
对可以，如果你想说话

00:31:52.380 --> 00:31:55.830
像我们一样，您可以克隆这个

00:31:53.730 --> 00:31:59.310
请使用Apache 2开源许可

00:31:55.830 --> 00:32:05.190
使用它，所以我得到了这个克隆

00:31:59.310 --> 00:32:08.760
我的本地机器在这里SSDI开始

00:32:05.190 --> 00:32:11.570
点，我不应该知道

00:32:08.760 --> 00:32:14.490
你这个不

00:32:11.570 --> 00:32:20.630
在那里，您可以启动客户端并开始

00:32:14.490 --> 00:32:24.930
网站，我什至在这里打开它

00:32:20.630 --> 00:32:27.360
 IDE很好，所以您需要知道的是

00:32:24.930 --> 00:32:29.520
这是这有两个

00:32:27.360 --> 00:32:32.460
项目启动客户端启动站点和

00:32:29.520 --> 00:32:34.140
我唯一要做的就是走了

00:32:32.460 --> 00:32:35.460
我已经创建了一个

00:32:34.140 --> 00:32:40.680
属性文件称为应用程序

00:32:35.460 --> 00:32:43.620
 yamo llamo是哪里的应用程序

00:32:40.680 --> 00:32:45.570
我们自定义外观

00:32:43.620 --> 00:32:48.030
发电机实际上是我们提供的地方

00:32:45.570 --> 00:32:49.890
属于的不同依赖项

00:32:48.030 --> 00:32:51.960
在这里，所以您可以看到这是

00:32:49.890 --> 00:32:52.980
实际上，我的意思是很深

00:32:51.960 --> 00:32:54.750
数百行驼羊

00:32:52.980 --> 00:32:56.760
配置所有不同的罐子

00:32:54.750 --> 00:32:58.140
复选框，然后是

00:32:56.760 --> 00:33:01.680
假设的材料依赖

00:32:58.140 --> 00:33:03.510
有所有这些东西对，所以Java 

00:33:01.680 --> 00:33:06.450
对Maven进行Gradle版本

00:33:03.510 --> 00:33:08.130
可以指定的东西我们

00:33:06.450 --> 00:33:11.280
在这里指定

00:33:08.130 --> 00:33:13.230
还有自定义项

00:33:11.280 --> 00:33:14.910
知道Java代码

00:33:13.230 --> 00:33:16.560
也许你不在乎

00:33:14.910 --> 00:33:17.700
你不想要你可以摆脱

00:33:16.560 --> 00:33:20.790
其中你可以添加他们可以删除

00:33:17.700 --> 00:33:22.560
他们，所以例如我们有自定义您

00:33:20.790 --> 00:33:24.150
知道有些事情需要

00:33:22.560 --> 00:33:29.850
其他工作不仅简单

00:33:24.150 --> 00:33:31.470
选择一个复选框，例如

00:33:29.850 --> 00:33:33.840
自定义Gradle构建（如果添加） 

00:33:31.470 --> 00:33:35.340
例如开发工具，或者如果您

00:33:33.840 --> 00:33:37.530
如果您有，请自定义Maven构建

00:33:35.340 --> 00:33:39.660
开发工具，所以有些东西不存在

00:33:37.530 --> 00:33:41.760
没有一对一的关联

00:33:39.660 --> 00:33:45.090
例子，这些就是这些

00:33:41.760 --> 00:33:47.130
被添加到您的构建中，但没有

00:33:45.090 --> 00:33:48.390
就像拿走一样简单

00:33:47.130 --> 00:33:51.360
配置该属性文件并

00:33:48.390 --> 00:33:52.590
然后发出依赖权

00:33:51.360 --> 00:33:54.210
实际上需要建筑材料

00:33:52.590 --> 00:33:56.370
它要求其他图书馆

00:33:54.210 --> 00:33:57.840
在那里或任何你可以表达

00:33:56.370 --> 00:34:00.960
所有这些事情通过这些不同

00:33:57.840 --> 00:34:02.220
定制器好吧，所以II不想我们

00:34:00.960 --> 00:34:03.960
我们可以并且应该做一个整体

00:34:02.220 --> 00:34:07.320
关于如何自定义此集

00:34:03.960 --> 00:34:09.210
但足以说明您的大部分工作

00:34:07.320 --> 00:34:11.550
会在这里，所以我要做的就是

00:34:09.210 --> 00:34:16.140
走了，我随意创建了

00:34:11.550 --> 00:34:18.030
命名为bootiful section可以

00:34:16.140 --> 00:34:20.580
虚拟图书馆称为go long and 

00:34:18.030 --> 00:34:21.900
这个想法叫做“走吧，现在我

00:34:20.580 --> 00:34:23.669
会改变这个，所以我们有

00:34:21.900 --> 00:34:25.770
长嘴唇，我们有汽车

00:34:23.669 --> 00:34:27.300
配置，你不应该把你的

00:34:25.770 --> 00:34:30.870
自动配置在这里应该是

00:34:27.300 --> 00:34:32.340
入门者依赖关系还可以，但是我们

00:34:30.870 --> 00:34:40.710
有一些我们可以看的东西让我们尝试

00:34:32.340 --> 00:34:43.740
它出来，所以数字自动配置st 

00:34:40.710 --> 00:34:56.910
数字自动配置可以

00:34:43.740 --> 00:35:06.240
把它带到这里好吧

00:34:56.910 --> 00:35:13.850
它的ID GUP ID是st，这是

00:35:06.240 --> 00:35:23.070
会在这里被调用，快照还可以

00:35:13.850 --> 00:35:26.490
随机好吧，所以我们去了

00:35:23.070 --> 00:35:29.460
我的随机数依赖性添加了这个

00:35:26.490 --> 00:35:31.170
在您的上浆机中，我要

00:35:29.460 --> 00:35:32.400
自定义我要通过运行

00:35:31.170 --> 00:35:42.480
命令行上的起始站点

00:35:32.400 --> 00:35:46.700
所以我会说终端CD的起始站点

00:35:42.480 --> 00:35:46.700
 Maven Spring Boot运行

00:35:50.329 --> 00:35:53.049
好的

00:35:53.400 --> 00:36:02.519
现在如果我去本地主机8080 

00:36:00.220 --> 00:36:02.519
我有一个

00:36:06.500 --> 00:36:12.910
不，我只是假设我有一个版本

00:36:08.599 --> 00:36:15.910
我将在此处发布的1.2版本

00:36:12.910 --> 00:36:15.910
好的

00:36:39.330 --> 00:36:44.910
哦8080端口还有其他功能

00:36:41.400 --> 00:36:47.150
我当然会把那个关掉

00:36:44.910 --> 00:36:47.150
再次

00:36:51.940 --> 00:36:55.120
我们去

00:36:55.210 --> 00:36:58.020
所以

00:37:03.880 --> 00:37:08.440
第一次在元数据上

00:37:06.000 --> 00:37:10.630
我们去那里，现在有我们的

00:37:08.440 --> 00:37:12.610
哦，我们可以说我想看所有

00:37:10.630 --> 00:37:15.070
依赖关系，这是我们的新部分

00:37:12.610 --> 00:37:16.360
如果我命中生成命中，就可以进行

00:37:15.070 --> 00:37:16.720
更新添加到的依赖项

00:37:16.360 --> 00:37:19.420
这个

00:37:16.720 --> 00:37:25.630
然后点击生成，您可以看到

00:37:19.420 --> 00:37:28.030
那正在下载一个新的zip文件

00:37:25.630 --> 00:37:36.610
我们称之为这个吗？ 

00:37:28.030 --> 00:37:39.270
演示，所以打开这个，这是什么

00:37:36.610 --> 00:37:39.270
文件看起来像

00:37:46.420 --> 00:37:50.589
好的，这样您就可以看到它

00:37:48.460 --> 00:37:52.299
说STI号码会自动配置

00:37:50.589 --> 00:37:53.380
问题当然是我还没有

00:37:52.299 --> 00:37:56.279
指定版本

00:37:53.380 --> 00:37:59.230
是不是假设你有

00:37:56.279 --> 00:38:00.970
在这里附上您的依赖账单

00:37:59.230 --> 00:38:02.710
物质依赖，然后

00:38:00.970 --> 00:38:04.599
在您的帐户中自动注册

00:38:02.710 --> 00:38:06.010
依赖管理部分

00:38:04.599 --> 00:38:08.260
版本将在其中指定

00:38:06.010 --> 00:38:09.819
 Dannette物料清单等

00:38:08.260 --> 00:38:11.859
还应创建其中一项法案

00:38:09.819 --> 00:38:14.099
材料的依赖仅仅是

00:38:11.859 --> 00:38:17.079
有一个依赖项管理部分

00:38:14.099 --> 00:38:18.250
看起来像我们的作品

00:38:17.079 --> 00:38:20.619
弹簧靴的材料，我们拥有

00:38:18.250 --> 00:38:23.559
也有一个，所以有文档

00:38:20.619 --> 00:38:24.970
关于如何做到这一点，但你可以

00:38:23.559 --> 00:38:27.099
看看这如何工作对你

00:38:24.970 --> 00:38:32.440
依赖，您添加此，然后领带

00:38:27.099 --> 00:38:35.470
这种依赖关系让我们来看看

00:38:32.440 --> 00:38:36.700
炸弹没事，所以你可以看到这些

00:38:35.470 --> 00:38:40.750
有时需要这些依赖

00:38:36.700 --> 00:38:45.309
引用炸弹名称和炸弹

00:38:40.750 --> 00:38:53.190
是事还是炸弹相关

00:38:45.309 --> 00:38:53.190
依赖关系不同的定义还可以

00:38:54.220 --> 00:38:59.510
黑格尔和眼睛只是炸弹，所以

00:38:57.170 --> 00:39:01.609
如果您想要任何天蓝色

00:38:59.510 --> 00:39:03.740
依赖关系，他们将指定我的

00:39:01.609 --> 00:39:06.349
炸弹等于Azur，然后当

00:39:03.740 --> 00:39:08.180
被指定然后被添加到

00:39:06.349 --> 00:39:09.859
你的行家建立它会说我要

00:39:08.180 --> 00:39:11.210
自动添加依赖项

00:39:09.859 --> 00:39:13.910
管理部分调用Microsoft Azure 

00:39:11.210 --> 00:39:15.380
作为零屏幕蓝色炸弹Azur 

00:39:13.910 --> 00:39:18.560
版本，如果您使用的是Spring Boot 

00:39:15.380 --> 00:39:20.660
 1.5 for 22.0那么你会得到天蓝色

00:39:18.560 --> 00:39:23.869
炸到四口哦，如果您正在使用

00:39:20.660 --> 00:39:26.930
弹簧靴到那一个哦释放

00:39:23.869 --> 00:39:28.760
你会得到那个2等

00:39:26.930 --> 00:39:30.560
逻辑告诉你没有春天的佛陀

00:39:28.760 --> 00:39:31.910
自动足够聪明知道

00:39:30.560 --> 00:39:33.349
你想要这个炸弹的版本

00:39:31.910 --> 00:39:35.240
匹配spring boot的版本，并且

00:39:33.349 --> 00:39:36.589
我们希望这意味着保持

00:39:35.240 --> 00:39:41.680
你应该为你做同样的事情

00:39:36.589 --> 00:39:44.000
组织好，所以有了

00:39:41.680 --> 00:39:45.500
我们自己的定制版上浆机，我们可以

00:39:44.000 --> 00:39:47.180
根据我们的心意定制此内容

00:39:45.500 --> 00:39:48.680
当然，您可以重新设置外观并进行更改

00:39:47.180 --> 00:39:50.089
依此类推，顺便说一句

00:39:48.680 --> 00:39:51.349
全职工作的人

00:39:50.089 --> 00:39:52.970
有一群人

00:39:51.349 --> 00:39:54.560
初始化程序，所以我们总是很热衷

00:39:52.970 --> 00:39:55.760
得到反馈，如果你想

00:39:54.560 --> 00:39:57.650
如果有个好主意就回馈

00:39:55.760 --> 00:39:59.780
这是一个我们很高兴的开源项目

00:39:57.650 --> 00:40:02.420
听到你的一件事，你知道这一点

00:39:59.780 --> 00:40:03.920
我想这是一个非常琐碎的演示

00:40:02.420 --> 00:40:07.119
我们都可以在同一件事上达成共识

00:40:03.920 --> 00:40:08.329
我对我来说同样的事情

00:40:07.119 --> 00:40:12.020
自动配置

00:40:08.329 --> 00:40:13.790
是的，但是我的自动配置

00:40:12.020 --> 00:40:16.849
自定义它，我正在格式化它

00:40:13.790 --> 00:40:18.290
 IntelliJ对，如果我这样做，让我们

00:40:16.849 --> 00:40:23.630
摆脱所有你知道的鼓掌

00:40:18.290 --> 00:40:26.810
就像那样，所有在一起

00:40:23.630 --> 00:40:28.579
我有我的格式吗

00:40:26.810 --> 00:40:30.650
好的格式，我们感谢我

00:40:28.579 --> 00:40:33.290
像这样检查代码

00:40:30.650 --> 00:40:35.390
可以像我以前那样使用空格

00:40:33.290 --> 00:40:37.250
 VI或类似的东西，但我不是

00:40:35.390 --> 00:40:38.060
不在乎间距，我不认为

00:40:37.250 --> 00:40:39.170
那很好，我不认为那是

00:40:38.060 --> 00:40:41.329
很好，我不认为喜欢

00:40:39.170 --> 00:40:43.790
这样我就可以在

00:40:41.329 --> 00:40:45.890
 Mac for IntelliJ和Command Hotel将

00:40:43.790 --> 00:40:47.000
自动格式化代码，但是

00:40:45.890 --> 00:40:48.349
关于使用月食的人或

00:40:47.000 --> 00:40:49.970
 NetBeans的代码如何处理

00:40:48.349 --> 00:40:52.310
重要的是，如果他们然后我们格式化

00:40:49.970 --> 00:40:53.780
代码是他们喜欢的

00:40:52.310 --> 00:40:55.700
环境会很好吗

00:40:53.780 --> 00:40:57.319
想要那个结果，他们想检查

00:40:55.700 --> 00:40:59.000
那意味着当有人

00:40:57.319 --> 00:40:59.960
看着代码是唯一的

00:40:59.000 --> 00:41:01.940
会与一个环境不同

00:40:59.960 --> 00:41:02.120
另一个是格式是

00:41:01.940 --> 00:41:04.520
一种

00:41:02.120 --> 00:41:05.540
不好的事情会给

00:41:04.520 --> 00:41:07.190
您对某物具有的感知

00:41:05.540 --> 00:41:10.700
实际上发生了变化

00:41:07.190 --> 00:41:13.970
它没有嗯，那我的呢

00:41:10.700 --> 00:41:17.740
我在这里像说唱一样选择线

00:41:13.970 --> 00:41:19.910
这种权利，我想要这样的事情

00:41:17.740 --> 00:41:21.590
你知道我想要更多类型的

00:41:19.910 --> 00:41:23.660
您喜欢同一行上的注释吗

00:41:21.590 --> 00:41:26.060
那就是你知道那会让你

00:41:23.660 --> 00:41:27.260
您对我的信任会更好

00:41:26.060 --> 00:41:29.630
对我充满信心，我已经做到了

00:41:27.260 --> 00:41:31.520
您的代码，所以再次您不知道

00:41:29.630 --> 00:41:33.350
关于春天心情的好处是

00:41:31.520 --> 00:41:34.820
没有特定的IDE要求

00:41:33.350 --> 00:41:37.670
任何支持辩论的东西

00:41:34.820 --> 00:41:40.490
甚至可能甚至摇动，结果

00:41:37.670 --> 00:41:42.650
你有充分的自由去做你知道的

00:41:40.490 --> 00:41:44.390
你知道使用完全纬度吗

00:41:42.650 --> 00:41:46.370
无论你想要什么收费，你

00:41:44.390 --> 00:41:49.280
随心所欲的ID 

00:41:46.370 --> 00:41:50.780
编辑代码的人正在使用

00:41:49.280 --> 00:41:52.640
指出正确的一件事，我们

00:41:50.780 --> 00:41:54.500
想要的是人们不要专注于此

00:41:52.640 --> 00:41:56.300
那种东西只是不用担心

00:41:54.500 --> 00:41:58.820
所以我们开发了一个很好的工具

00:41:56.300 --> 00:42:00.890
供我们自己使用，我是乔希

00:41:58.820 --> 00:42:02.570
也用在我的书上

00:42:00.890 --> 00:42:05.060
反应性弹簧书

00:42:02.570 --> 00:42:09.580
因此，我所有的代码都使用了这个

00:42:05.060 --> 00:42:15.160
工具，称为Spring Java格式，因此

00:42:09.580 --> 00:42:15.160
好的spring Java格式

00:42:16.450 --> 00:42:22.690
它位于Spring或Spring下- 

00:42:20.050 --> 00:42:27.870
 Java格式，为了使用它

00:42:22.690 --> 00:42:34.030
只需将此插件添加到您的构建中就可以了

00:42:27.870 --> 00:42:35.560
其实更好，但是让我们这样做吧

00:42:34.030 --> 00:42:39.430
所以我要去我的汽车里

00:42:35.560 --> 00:42:42.220
配置在这里，我去

00:42:39.430 --> 00:42:45.490
构建部分，然后您可能会有

00:42:42.220 --> 00:42:47.620
对组织的依赖

00:42:45.490 --> 00:42:51.790
要求将此自动添加到

00:42:47.620 --> 00:42:58.750
所有版本都可以，所以我们将其添加

00:42:51.790 --> 00:43:00.580
这里很酷，所以现在我们有了春天

00:42:58.750 --> 00:43:05.440
 Java，我们有一个哦，春季Java领班

00:43:00.580 --> 00:43:07.690
为我弹跳甚至插件，我们去

00:43:05.440 --> 00:43:10.150
在这里，现在让我们尝试一下

00:43:07.690 --> 00:43:11.730
也许在我的代码的干净包装中，让我们

00:43:10.150 --> 00:43:14.470
走着瞧吧

00:43:11.730 --> 00:43:16.960
看它甚至不会编译

00:43:14.470 --> 00:43:19.870
对，这让我沮丧，说春天

00:43:16.960 --> 00:43:21.670
运行spring Java格式的原因是

00:43:19.870 --> 00:43:23.860
这些东西与格式不符

00:43:21.670 --> 00:43:26.380
对我组织的期望

00:43:23.860 --> 00:43:30.330
项目，所以我说Maven Spring Java 

00:43:26.380 --> 00:43:30.330
格式再见

00:43:30.900 --> 00:43:36.820
好吧，现在让我们来看一下所有代码

00:43:34.450 --> 00:43:39.790
就在那里那你可以看到

00:43:36.820 --> 00:43:42.580
重新格式化了春天的样子

00:43:39.790 --> 00:43:43.960
引导团队现在使用其代码

00:43:42.580 --> 00:43:45.490
当然我不喜欢我仍然不喜欢

00:43:43.960 --> 00:43:52.750
就像那条路线在同一条线上-得到

00:43:45.490 --> 00:43:54.640
对的，所以你可以做到这一点，这

00:43:52.750 --> 00:43:57.010
你被另一行包裹了吗

00:43:54.640 --> 00:44:00.690
那可能是你我的线索，但是

00:43:57.010 --> 00:44:03.340
这应该提取到AA中

00:44:00.690 --> 00:44:04.870
 lambda可能是方法参考，也可能是

00:44:03.340 --> 00:44:06.790
是的，是的，你可以做的是

00:44:04.870 --> 00:44:09.400
使代码更容易，因为您在

00:44:06.790 --> 00:44:14.880
重新格式化的异想天开，让我们

00:44:09.400 --> 00:44:18.720
现在可以了

00:44:14.880 --> 00:44:23.310
身体，我喜欢那样，我也可以

00:44:18.720 --> 00:44:26.240
让我们看看发生了什么事

00:44:23.310 --> 00:44:26.240
其实不是吗

00:44:30.540 --> 00:44:34.380
好，所以你可以看到它被包裹到

00:44:32.730 --> 00:44:36.360
新线，但最好没事

00:44:34.380 --> 00:44:38.040
所以你可以看到，因为我做了

00:44:36.360 --> 00:44:40.380
这是被迫将其保存在

00:44:38.040 --> 00:44:45.930
下一行这回被包裹了，所以现在我

00:44:40.380 --> 00:44:47.400
可以再有一个时间好吗

00:44:45.930 --> 00:44:50.040
所以你可以看到它做得很好

00:44:47.400 --> 00:44:51.120
该引擎正在使用的幕后

00:44:50.040 --> 00:44:53.880
 Eclipse格式，或者至少我认为

00:44:51.120 --> 00:44:54.810
它曾经在某一时刻被使用过，所以

00:44:53.880 --> 00:44:57.630
我们实际上正在使用Eclipse 

00:44:54.810 --> 00:44:59.430
格式化程序，我们正在格式化代码

00:44:57.630 --> 00:45:00.810
以一致的方式，所以现在没有

00:44:59.430 --> 00:45:02.610
有关什么格式正确的问题

00:45:00.810 --> 00:45:04.470
只有一种格式

00:45:02.610 --> 00:45:05.940
让我们只同意制表符空格

00:45:04.470 --> 00:45:07.710
已经为我们照顾好了

00:45:05.940 --> 00:45:09.450
担心它只是在代码上工作

00:45:07.710 --> 00:45:11.070
对您来说很重要，它将

00:45:09.450 --> 00:45:12.990
实际上破坏了构建，所以您知道它

00:45:11.070 --> 00:45:17.250
强迫人们养成

00:45:12.990 --> 00:45:20.370
应用Maven Spring Java格式克隆

00:45:17.250 --> 00:45:21.930
并立即适用

00:45:20.370 --> 00:45:29.070
等于假设其他一切均有效

00:45:21.930 --> 00:45:31.410
我可以做maven clean package和我的我的

00:45:29.070 --> 00:45:39.380
我的构建是正确的，假设我去了这里

00:45:31.410 --> 00:45:39.380
并做到这一点，现在发生了什么

00:45:40.530 --> 00:45:46.260
对，这告诉我这个文件

00:45:43.410 --> 00:45:47.690
符合格式预期

00:45:46.260 --> 00:45:50.220
所以我们可能会采用弹簧圆顶形式

00:45:47.690 --> 00:45:52.500
我喜欢这样做的清洁包装

00:45:50.220 --> 00:45:54.690
因为那使得当我

00:45:52.500 --> 00:45:57.690
首先测试我格式化的本地代码

00:45:54.690 --> 00:45:59.580
然后我运行测试，如果可以的话

00:45:57.690 --> 00:46:01.050
通过它通过的一切，我可以

00:45:59.580 --> 00:46:03.660
只需提交它，然后转到CI 

00:46:01.050 --> 00:46:04.800
环境还可以，所以我们去了

00:46:03.660 --> 00:46:06.330
看了很多不同的东西

00:46:04.800 --> 00:46:08.160
你可以用来确保你有

00:46:06.330 --> 00:46:09.510
一致性，我们没有机会

00:46:08.160 --> 00:46:13.650
看一下创建一个

00:46:09.510 --> 00:46:15.900
初学者创建物料清单

00:46:13.650 --> 00:46:17.580
依赖关系在

00:46:15.900 --> 00:46:19.170
文档有Wiki和

00:46:17.580 --> 00:46:20.280
这样的事情，但你应该知道

00:46:19.170 --> 00:46:21.870
那就是你应该做的

00:46:20.280 --> 00:46:24.210
这就是我想知道的，因为

00:46:21.870 --> 00:46:26.220
让您传播您的

00:46:24.210 --> 00:46:27.900
整个组织的依赖

00:46:26.220 --> 00:46:30.030
做到这一点的一种好方法是

00:46:27.900 --> 00:46:32.030
春天和初始化和这个

00:46:30.030 --> 00:46:33.990
完成大小允许人们访问

00:46:32.030 --> 00:46:35.970
一致地进行自动配置

00:46:33.990 --> 00:46:37.650
记住，您可以指定

00:46:35.970 --> 00:46:40.470
依赖项将添加到所有项目

00:46:37.650 --> 00:46:42.840
由组织产生，所以也许

00:46:40.470 --> 00:46:44.700
安全自动配置

00:46:42.840 --> 00:46:46.680
我们曾暗示过也许你有

00:46:44.700 --> 00:46:48.390
作为每个项目的必需依赖项

00:46:46.680 --> 00:46:49.920
在您的自定义弹簧上生成

00:46:48.390 --> 00:46:52.650
初始化程序必须具有此依赖项

00:46:49.920 --> 00:46:54.030
就像春天的测试库一样

00:46:52.650 --> 00:46:55.860
开机自动添加

00:46:54.030 --> 00:46:58.620
没有办法选择退出

00:46:55.860 --> 00:47:00.180
对，这可以帮助确保

00:46:58.620 --> 00:47:01.680
它有助于获得的组织标准

00:47:00.180 --> 00:47:03.500
确保一致性，您也可以

00:47:01.680 --> 00:47:07.050
自定义您可以添加的Maven构建

00:47:03.500 --> 00:47:08.430
这个Maven Spring Java格式插件

00:47:07.050 --> 00:47:10.290
示例，或者您可以确保

00:47:08.430 --> 00:47:12.750
所有项目的种子都放在

00:47:10.290 --> 00:47:14.790
特定的父母依赖性而不是

00:47:12.750 --> 00:47:15.810
伸直手臂，这样你就可以做一些真正的事情

00:47:14.790 --> 00:47:18.150
有趣的事情，现在你有一个

00:47:15.810 --> 00:47:20.430
中心位置，您也可以

00:47:18.150 --> 00:47:23.280
添加对创建您知道的Cloud的支持

00:47:20.430 --> 00:47:25.500
铸造文件或Docker容器或

00:47:23.280 --> 00:47:26.460
可以添加Aven Jib插件的任何内容

00:47:25.500 --> 00:47:29.040
对

00:47:26.460 --> 00:47:31.890
很多好的选择，我希望你会

00:47:29.040 --> 00:47:33.600
希望你早点给我所有这些东西

00:47:31.890 --> 00:47:34.620
我觉得所有的东西都很棒

00:47:33.600 --> 00:47:36.600
不知道有多少人知道

00:47:34.620 --> 00:47:38.940
我真的是春季Java格式插件

00:47:36.600 --> 00:47:40.620
喜欢它，只是它的其中之一

00:47:38.940 --> 00:47:41.880
关于黄金语言的事情是

00:47:40.620 --> 00:47:44.430
有一种叫做去的东西

00:47:41.880 --> 00:47:47.010
格式化geo fmt并带走

00:47:44.430 --> 00:47:49.620
这样的痛苦是正确的方法

00:47:47.010 --> 00:47:52.710
正确的Python对空间非常敏感

00:47:49.620 --> 00:47:53.520
同样，它也减轻了痛苦

00:47:52.710 --> 00:47:55.620
像是

00:47:53.520 --> 00:47:57.570
在标签或空格中，谁在乎只是写

00:47:55.620 --> 00:47:59.010
更柔软，让我们投入生产不要

00:47:57.570 --> 00:48:00.990
担心它看起来一样

00:47:59.010 --> 00:48:03.390
它的工作原理与Maven Spring相同

00:48:00.990 --> 00:48:04.740
 java格式插件的功能很少

00:48:03.390 --> 00:48:06.990
机会的方式

00:48:04.740 --> 00:48:09.360
重新格式化或对其进行自定义

00:48:06.990 --> 00:48:11.580
这就是要点

00:48:09.360 --> 00:48:14.400
说这是正确的房子风格

00:48:11.580 --> 00:48:16.050
它只是消除了对的任何讨论

00:48:14.400 --> 00:48:18.180
这是正确的方法，让我们专注于

00:48:16.050 --> 00:48:20.010
只是写软件对吧

00:48:18.180 --> 00:48:23.220
为这些数据或其余数据而战

00:48:20.010 --> 00:48:24.390
随便吧，谢谢

00:48:23.220 --> 00:48:25.620
大家都非常感谢我的收看

00:48:24.390 --> 00:48:28.880
希望你从中得到一些东西

00:48:25.620 --> 00:48:28.880
平时我们下次见

00:48:35.960 --> 00:48:38.020
您

