WEBVTT
Kind: captions
Language: zh-Hans

00:00:26.029 --> 00:00:30.619
欢迎来到另一批

00:00:28.400 --> 00:00:32.989
在这一期的春季技巧中，我们是

00:00:30.619 --> 00:00:35.540
来看看新的Olaf客户

00:00:32.989 --> 00:00:37.190
在春季安全5中提供支持

00:00:35.540 --> 00:00:38.720
上一期文章我们看了春季

00:00:37.190 --> 00:00:40.699
安全性Olaf，我们研究了OAuth 

00:00:38.720 --> 00:00:43.040
您可以的授权服务器

00:00:40.699 --> 00:00:45.710
使用spring轻松创建

00:00:43.040 --> 00:00:47.120
现在的安全性

00:00:45.710 --> 00:00:48.769
弹簧内部的基本支撑

00:00:47.120 --> 00:00:51.290
安全性OAuth已经存在

00:00:48.769 --> 00:00:52.760
而对于那些正在玩

00:00:51.290 --> 00:00:55.129
家用游戏可能会使您感到困惑

00:00:52.760 --> 00:00:57.409
弄清楚我们在哪里

00:00:55.129 --> 00:00:59.570
 OAuth图片的条款，因此

00:00:57.409 --> 00:01:00.890
让我们快速浏览一下吧

00:00:59.570 --> 00:01:02.900
一切始于春季安全

00:01:00.890 --> 00:01:04.580
这是一个第三方项目

00:01:02.900 --> 00:01:05.830
然后我们带来的社区项目

00:01:04.580 --> 00:01:09.740
进入春季投资组合，我们已经

00:01:05.830 --> 00:01:13.759
自2011年以来发展稳定

00:01:09.740 --> 00:01:16.700
该项目将继续进行

00:01:13.759 --> 00:01:17.869
支持UAA授权

00:01:16.700 --> 00:01:20.150
服务器我们的身份提供者

00:01:17.869 --> 00:01:22.729
为木工提供我们的开源

00:01:20.150 --> 00:01:24.439
平台，以便该组件已经

00:01:22.729 --> 00:01:26.840
企业进行了大规模测试

00:01:24.439 --> 00:01:30.680
客户为您所知五年

00:01:26.840 --> 00:01:34.010
 UAA已投入生产六年

00:01:30.680 --> 00:01:36.230
是集线器，如果您愿意，可以使用它来

00:01:34.010 --> 00:01:39.260
与其他活动交谈

00:01:36.230 --> 00:01:41.120
目录等，现在是

00:01:39.260 --> 00:01:43.610
开放项目，百分之九十

00:01:41.120 --> 00:01:46.580
在UA中的工作又回来了

00:01:43.610 --> 00:01:49.280
在春季的安全保障中

00:01:46.580 --> 00:01:50.840
该项目始终具有的项目权利

00:01:49.280 --> 00:01:52.310
有几个不同的地方

00:01:50.840 --> 00:01:54.290
能够站起来的OAuth服务器和

00:01:52.310 --> 00:01:57.860
充当客户的能力

00:01:54.290 --> 00:02:00.670
 OAuth服务，这在以下情况下很重要

00:01:57.860 --> 00:02:04.100
我们谈论的OAuth客户端是

00:02:00.670 --> 00:02:06.860
可以说是最重要的部分

00:02:04.100 --> 00:02:09.860
协议o auth当然是协议

00:02:06.860 --> 00:02:11.690
对于身份验证委派有

00:02:09.860 --> 00:02:12.890
我们关心的三个不同部分

00:02:11.690 --> 00:02:14.930
大概或实际我想有四个

00:02:12.890 --> 00:02:18.170
有授权服务器

00:02:14.930 --> 00:02:20.090
提供代币的东西，然后我们就可以

00:02:18.170 --> 00:02:23.299
用于随后提出其他要求

00:02:20.090 --> 00:02:26.689
受保护且需要的资源

00:02:23.299 --> 00:02:28.400
这些令牌，这就是REST API 

00:02:26.689 --> 00:02:32.209
也许是Facebook好友图

00:02:28.400 --> 00:02:34.099
 Twitter时间轴API和

00:02:32.209 --> 00:02:36.890
这些不同的API需要令牌，因此

00:02:34.099 --> 00:02:39.360
我们称它们为资源服务器，所以

00:02:36.890 --> 00:02:41.860
授权服务器的资源

00:02:39.360 --> 00:02:43.450
授权和访问令牌

00:02:41.860 --> 00:02:46.360
然后可以用来与资源交谈

00:02:43.450 --> 00:02:49.000
为客户服务是一个承担的人

00:02:46.360 --> 00:02:51.160
该令牌代表用户，因此您

00:02:49.000 --> 00:02:54.340
有一个用户在驱动客户

00:02:51.160 --> 00:02:56.140
可以是一个用户，也可以是多个客户端

00:02:54.340 --> 00:02:58.510
例如在

00:02:56.140 --> 00:03:00.610
在iPhone和Facebook中

00:02:58.510 --> 00:03:02.410
 html5浏览器与Facebook 

00:03:00.610 --> 00:03:03.790
所有这三个Android设备

00:03:02.410 --> 00:03:06.489
三分全都三个

00:03:03.790 --> 00:03:08.709
不同的客户体验，但这是

00:03:06.489 --> 00:03:10.930
最终我很有趣

00:03:08.709 --> 00:03:13.390
当我以

00:03:10.930 --> 00:03:15.940
我的Facebook个人资料或Twitter个人资料

00:03:13.390 --> 00:03:18.400
或者这四个是正确的

00:03:15.940 --> 00:03:21.190
件组成一个拓扑

00:03:18.400 --> 00:03:24.220
现在的建筑平均水平是

00:03:21.190 --> 00:03:25.090
不是我们习惯于思考

00:03:24.220 --> 00:03:26.500
资源服务器和授权

00:03:25.090 --> 00:03:29.049
当您将服务器视为同一件事

00:03:26.500 --> 00:03:30.760
想想Facebook是同一个场景

00:03:29.049 --> 00:03:32.260
 API，因此您可以从那里获得令牌

00:03:30.760 --> 00:03:34.180
 OAuth API是，然后您使用该令牌

00:03:32.260 --> 00:03:35.620
然后调用Facebook好友图

00:03:34.180 --> 00:03:41.489
但这没有理由

00:03:35.620 --> 00:03:45.280
例如，您可以使用aa ooofff 

00:03:41.489 --> 00:03:48.670
令牌来自

00:03:45.280 --> 00:03:50.440
授权服务器然后调用

00:03:48.670 --> 00:03:52.239
其他一些第三方服务，或者是

00:03:50.440 --> 00:03:54.480
调用另一个资源服务权限

00:03:52.239 --> 00:03:56.170
所以你知道你可以委托

00:03:54.480 --> 00:03:57.130
在这种情况下，身份验证为

00:03:56.170 --> 00:04:00.609
您可以委派的资源服务器

00:03:57.130 --> 00:04:02.859
对其他事物进行身份验证

00:04:00.609 --> 00:04:06.340
你现在就做那春天的安全吧

00:04:02.859 --> 00:04:08.410
实习生，我们看到自动配置了

00:04:06.340 --> 00:04:10.329
在春季靴子中支持它，所以你

00:04:08.410 --> 00:04:14.709
可以使用Spring Boot自动配置

00:04:10.329 --> 00:04:15.910
 ooofff客户，然后再走一步

00:04:14.709 --> 00:04:18.459
此外还有其他一些用例

00:04:15.910 --> 00:04:21.250
与保护资源和

00:04:18.459 --> 00:04:22.750
我们看到的永久性访问令牌

00:04:21.250 --> 00:04:24.610
自动配置和弹簧包覆

00:04:22.750 --> 00:04:26.800
建立在弹簧靴的支撑上

00:04:24.610 --> 00:04:30.010
这就是基本上的故事

00:04:26.800 --> 00:04:32.440
那就是我们直到春天为止

00:04:30.010 --> 00:04:34.300
安全5因此，春季安全5是

00:04:32.440 --> 00:04:36.870
即将发布的春季安全防护

00:04:34.300 --> 00:04:40.330
在Spring Framework 5之后

00:04:36.870 --> 00:04:42.130
介绍一个主要主题是

00:04:40.330 --> 00:04:45.220
新的反应式编程支持和

00:04:42.130 --> 00:04:48.909
其他一些较小的东西

00:04:45.220 --> 00:04:50.740
反应式编程本身

00:04:48.909 --> 00:04:52.300
我想足以证明一个理由

00:04:50.740 --> 00:04:52.960
全新的春季安全发布，但

00:04:52.300 --> 00:04:54.550
决不

00:04:52.960 --> 00:04:57.160
他们的月桂树含量下降

00:04:54.550 --> 00:04:58.479
春季安全团队有两个主要

00:04:57.160 --> 00:05:01.300
此新版本中的功能

00:04:58.479 --> 00:05:03.340
还有更多的5.1 

00:05:01.300 --> 00:05:04.750
第一个主要功能是集成和

00:05:03.340 --> 00:05:06.669
支持反应式编程和

00:05:04.750 --> 00:05:08.830
春季安全五，仅此而已

00:05:06.669 --> 00:05:12.039
这是一个整体，你知道其他的春天技巧

00:05:08.830 --> 00:05:13.330
然后还支持OAuth 

00:05:12.039 --> 00:05:14.979
还有其他一些非常好的功能

00:05:13.330 --> 00:05:18.009
还有例如支持

00:05:14.979 --> 00:05:21.370
有一个新的密码加密排序

00:05:18.009 --> 00:05:22.870
真的很友善

00:05:21.370 --> 00:05:24.310
方便的地方很多

00:05:22.870 --> 00:05:27.100
在那里只是为了改善测试

00:05:24.310 --> 00:05:28.449
支持这么多方便的功能

00:05:27.100 --> 00:05:30.639
在春季安全五为两大

00:05:28.449 --> 00:05:32.830
这些是作为

00:05:30.639 --> 00:05:34.210
 OAuth客户端和反应式

00:05:32.830 --> 00:05:35.590
编程支持，在此

00:05:34.210 --> 00:05:37.960
我们将要介绍的春季技巧

00:05:35.590 --> 00:05:39.669
现在看看OAuth客户端支持

00:05:37.960 --> 00:05:41.380
当我再次说客户时，我们已经

00:05:39.669 --> 00:05:44.080
在上一期中谈到

00:05:41.380 --> 00:05:45.729
如何站起Spring Security OAuth 

00:05:44.080 --> 00:05:47.050
授权服务器，我有

00:05:45.729 --> 00:05:49.389
基本上类似于

00:05:47.050 --> 00:05:51.880
在这里在后台运行

00:05:49.389 --> 00:05:53.979
留给您查阅代码

00:05:51.880 --> 00:05:55.900
春天的提示获取资源库

00:05:53.979 --> 00:05:57.580
春季安全性OAuth春季安全性

00:05:55.900 --> 00:06:00.280
 500位有价值的客户那里有一个回购协议

00:05:57.580 --> 00:06:03.910
在github comm下-春季- 

00:06:00.280 --> 00:06:05.110
提示org，您会发现

00:06:03.910 --> 00:06:07.870
我正在使用的授权服务器

00:06:05.110 --> 00:06:10.260
对于这个例子，我们主要

00:06:07.870 --> 00:06:12.010
无论如何都覆盖在先前的内容中

00:06:10.260 --> 00:06:13.360
但是重要的是

00:06:12.010 --> 00:06:14.740
明白的是，您不必使用

00:06:13.360 --> 00:06:17.220
春季安全OAuth授权

00:06:14.740 --> 00:06:20.169
春季安全服务器五

00:06:17.220 --> 00:06:22.210
授权客户，所以我们有

00:06:20.169 --> 00:06:24.250
这一切都在春季终止了客户支持

00:06:22.210 --> 00:06:27.430
安全五，我们现在，我们

00:06:24.250 --> 00:06:29.470
以这种方式取代了大多数

00:06:27.430 --> 00:06:31.599
 Spring Security ooofff是独立的

00:06:29.470 --> 00:06:34.240
该项目现已展开至春季

00:06:31.599 --> 00:06:36.669
安全，因为我们有这个客户

00:06:34.240 --> 00:06:38.349
支持我们，您知道我们可以使用它吗

00:06:36.669 --> 00:06:39.400
与春季安全本身一样

00:06:38.349 --> 00:06:42.280
春天里面的正规图书馆

00:06:39.400 --> 00:06:43.930
安全以及一切

00:06:42.280 --> 00:06:45.639
支持不需要与

00:06:43.930 --> 00:06:46.419
我们提供的OAuth服务器

00:06:45.639 --> 00:06:49.479
可以与任何

00:06:46.419 --> 00:06:50.590
 ooofff服务器权限以及与您交谈时

00:06:49.479 --> 00:06:52.030
这些天的所有服务器都会

00:06:50.590 --> 00:06:54.250
至少会有

00:06:52.030 --> 00:06:56.199
 ooofff通常不存在

00:06:54.250 --> 00:06:58.599
 OAuth 2.0，但从历史上看

00:06:56.199 --> 00:07:01.510
被或授权一个点o和一个点oa 

00:06:58.599 --> 00:07:03.190
现在有两个点o然后

00:07:01.510 --> 00:07:05.529
进一步扩展您拥有其他

00:07:03.190 --> 00:07:06.880
某种分层协议，如果您愿意或

00:07:05.529 --> 00:07:09.620
分层的

00:07:06.880 --> 00:07:11.810
像IDC或

00:07:09.620 --> 00:07:13.760
打开ID连接，对吧，这是一个

00:07:11.810 --> 00:07:15.710
诸如此类的东西的标准化

00:07:13.760 --> 00:07:17.750
端点提供配置文件，他们

00:07:15.710 --> 00:07:20.360
是用来识别

00:07:17.750 --> 00:07:22.820
主体和的结构

00:07:20.360 --> 00:07:25.400
返回用户信息端点uh 

00:07:22.820 --> 00:07:28.280
你知道像这样的微妙的事情

00:07:25.400 --> 00:07:30.830
 JWT JSON Web令牌，这是

00:07:28.280 --> 00:07:33.320
这样就标准化了

00:07:30.830 --> 00:07:35.510
访问令牌本身非常正确

00:07:33.320 --> 00:07:37.370
的东西在这里欣赏，你会

00:07:35.510 --> 00:07:38.720
必须应对这些细微差别

00:07:37.370 --> 00:07:41.750
这些不同的客户，但春天

00:07:38.720 --> 00:07:45.140
证券交易支持客户

00:07:41.750 --> 00:07:46.580
您是否知道支持和工作的支持

00:07:45.140 --> 00:07:48.890
所有这些不同类型的

00:07:46.580 --> 00:07:50.210
技术，因此您可以正确使用任何东西

00:07:48.890 --> 00:07:51.590
这是你可以使用Facebook，你可以

00:07:50.210 --> 00:07:55.420
只要获得枢纽，便可以使用Google，而您

00:07:51.590 --> 00:07:57.830
可以使用第三方授权

00:07:55.420 --> 00:08:00.470
服务器像octa acht这样的服务器

00:07:57.830 --> 00:08:03.260
好吧，他们是一家

00:08:00.470 --> 00:08:06.730
提供授权服务器

00:08:03.260 --> 00:08:09.350
作为一种枢纽，这个枢纽是一个

00:08:06.730 --> 00:08:11.270
这是一个前端，然后委托给

00:08:09.350 --> 00:08:13.850
其他身份提供者，因此您可以

00:08:11.270 --> 00:08:15.320
配置集线器以与活动对话

00:08:13.850 --> 00:08:17.350
目录或LDAP或其他任何方式

00:08:15.320 --> 00:08:20.510
只需管理您的个人资料

00:08:17.350 --> 00:08:24.380
该系统本身的用户以八进制为单位

00:08:20.510 --> 00:08:25.520
本身可以出售的方式

00:08:24.380 --> 00:08:27.290
您想要的任何协议

00:08:25.520 --> 00:08:29.840
所以会说sam'l它会说o auth 

00:08:27.290 --> 00:08:31.010
为客户等等，这是一个

00:08:29.840 --> 00:08:32.270
选项，您当然可以使用它，并且

00:08:31.010 --> 00:08:33.890
这是一个很常见的选择

00:08:32.270 --> 00:08:36.500
也使用第三方授权

00:08:33.890 --> 00:08:39.320
服务器，所以从

00:08:36.500 --> 00:08:42.310
在Red Hat的人们

00:08:39.320 --> 00:08:45.440
很好用的工具，并且有很好的支持

00:08:42.310 --> 00:08:48.110
用于春季启动应用程序等

00:08:45.440 --> 00:08:49.490
也许值得在未来分期付款

00:08:48.110 --> 00:08:51.680
我认为有一点

00:08:49.490 --> 00:08:53.930
但无论哪种方式，关键披风和八角和

00:08:51.680 --> 00:08:56.300
春季安全授权服务器

00:08:53.930 --> 00:08:58.010
以及Google，Facebook和Twitter，以及

00:08:56.300 --> 00:08:59.900
 LinkedIn和数以千计的

00:08:58.010 --> 00:09:01.520
其他所有作者和服务器

00:08:59.900 --> 00:09:03.530
工作方式基本上和你一样

00:09:01.520 --> 00:09:04.970
可以从这个新客户端使用所有这些

00:09:03.530 --> 00:09:07.670
支持，让我们这样做，让我们建立一个

00:09:04.970 --> 00:09:10.460
罗斯给客户，我要用胳膊

00:09:07.670 --> 00:09:11.990
 Lombok编译时注释

00:09:10.460 --> 00:09:15.680
处理器将用来带来安全性

00:09:11.990 --> 00:09:17.060
网络支持，我想你知道

00:09:15.680 --> 00:09:19.130
就是这样，我们已经有一个

00:09:17.060 --> 00:09:20.000
我认为授权服务器正在运行

00:09:19.130 --> 00:09:21.350
我们让我检查一下

00:09:20.000 --> 00:09:22.580
是的，我们已经在这里运行了

00:09:21.350 --> 00:09:25.280
要了解的重要一点是，我已经

00:09:22.580 --> 00:09:27.470
在此硬编码三个用户

00:09:25.280 --> 00:09:29.660
授权服务器Josh Robb和Joe 

00:09:27.470 --> 00:09:31.430
显然，这是罗伯·温奇和乔

00:09:29.660 --> 00:09:33.430
罗伯·罗伯·绞盘是领导权

00:09:31.430 --> 00:09:35.510
春季安全和乔格兰达是

00:09:33.430 --> 00:09:37.640
这种努力的带头人

00:09:35.510 --> 00:09:39.800
为春季带来了OAuth支持

00:09:37.640 --> 00:09:41.800
安全五，所以他们两个都做

00:09:39.800 --> 00:09:43.820
在这个新版本中，我的工作很棒

00:09:41.800 --> 00:09:46.190
非常感谢他们的帮助

00:09:43.820 --> 00:09:48.620
他们给了我一些帮助

00:09:46.190 --> 00:09:51.650
东西工作，以我为例

00:09:48.620 --> 00:09:53.650
今天，感谢他们俩

00:09:51.650 --> 00:09:56.960
当然我应该绝对

00:09:53.650 --> 00:10:00.620
强调他们不会批准

00:09:56.960 --> 00:10:02.180
 PW的默认密码，但我想要

00:10:00.620 --> 00:10:03.860
使我的演示变得简单

00:10:02.180 --> 00:10:06.800
这里的朋友，所以我要使用用户名

00:10:03.860 --> 00:10:10.250
是Rob和Joe和Josh，密码是

00:10:06.800 --> 00:10:12.590
 PW不错，不要在家中那样做，但要混在一起

00:10:10.250 --> 00:10:14.090
演示更简单好了，我们要

00:10:12.590 --> 00:10:16.310
构建我们生成的oauth2客户端

00:10:14.090 --> 00:10:18.410
那里的zip文件，我现在去

00:10:16.310 --> 00:10:20.180
到这里的下载目录

00:10:18.410 --> 00:10:24.260
会在UA oo上开放给

00:10:20.180 --> 00:10:26.450
客户，这个客户是你知道的

00:10:24.260 --> 00:10:30.140
这是一个常规的Web应用程序

00:10:26.450 --> 00:10:32.690
我们想作为我们的客户

00:10:30.140 --> 00:10:36.650
授权服务器以访问

00:10:32.690 --> 00:10:38.780
通过访问令牌的资源服务器

00:10:36.650 --> 00:10:40.190
从OAuth客户端获得的

00:10:38.780 --> 00:10:42.290
好吧，我们这台资源服务器

00:10:40.190 --> 00:10:44.270
要站起来还是我们谈话

00:10:42.290 --> 00:10:45.950
实际上是授权

00:10:44.270 --> 00:10:49.370
服务器以及资源服务器

00:10:45.950 --> 00:10:51.920
这就是这个端点

00:10:49.370 --> 00:10:53.930
资源用户信息，因此，如果您正在使用

00:10:51.920 --> 00:10:56.660
哦，我直流连接有一个标准化的

00:10:53.930 --> 00:10:58.610
授权服务器的端点

00:10:56.660 --> 00:11:03.440
应该公开提供

00:10:58.610 --> 00:11:05.000
我们将在这里提供良好的配置文件

00:11:03.440 --> 00:11:06.980
没有我们我们就不会使用我的DC 

00:11:05.000 --> 00:11:07.940
连接器在这里使用OAuth 

00:11:06.980 --> 00:11:10.730
我们将在此处提供端点

00:11:07.940 --> 00:11:11.990
基本上提供了JSON结构

00:11:10.730 --> 00:11:13.550
我想拍一张地图并序列化

00:11:11.990 --> 00:11:15.560
它会提供一个具有

00:11:13.550 --> 00:11:17.750
主体名称的名称属性

00:11:15.560 --> 00:11:20.420
现在这特别有趣

00:11:17.750 --> 00:11:22.850
什么都没有，但是你知道我们需要

00:11:20.420 --> 00:11:24.440
配置我们需要配置

00:11:22.850 --> 00:11:26.330
这是安全的，这就是

00:11:24.440 --> 00:11:29.780
有点在这里，我们是说如果

00:11:26.330 --> 00:11:30.800
这个端点被访问，有人

00:11:29.780 --> 00:11:33.290
尝试访问它，但没有

00:11:30.800 --> 00:11:33.920
范围配置文件，然后拒绝请求，如果

00:11:33.290 --> 00:11:35.329
它确实有它

00:11:33.920 --> 00:11:37.190
作为回报杰森结构，所以我

00:11:35.329 --> 00:11:41.540
向我们显示名称，以便您创建

00:11:37.190 --> 00:11:43.910
 REST API作为春季安全性的春天

00:11:41.540 --> 00:11:46.100
 REST API，然后使用

00:11:43.910 --> 00:11:48.529
 Spring Club安全资源服务器

00:11:46.100 --> 00:11:50.690
配置，然后

00:11:48.529 --> 00:11:53.779
委托或拒绝任何要求

00:11:50.690 --> 00:11:55.100
没有正确的访问令牌，所以我们

00:11:53.779 --> 00:11:56.690
想将此端点称为

00:11:55.100 --> 00:11:59.269
服务器端，如果您一切顺利，我们将采取行动

00:11:56.690 --> 00:12:00.649
作为该端点的客户端，这样

00:11:59.269 --> 00:12:02.630
我要收费以获取代币的客户

00:12:00.649 --> 00:12:05.300
这样我就可以打电话给

00:12:02.630 --> 00:12:07.010
现在此资源用户信息端点

00:12:05.300 --> 00:12:08.720
即使他们都生活在同一个地方

00:12:07.010 --> 00:12:11.209
代码库，然后在同一过程中

00:12:08.720 --> 00:12:12.140
他们可能是两件分开的事

00:12:11.209 --> 00:12:14.000
对，我只想强调一点

00:12:12.140 --> 00:12:16.100
这是两个逻辑上分开的东西

00:12:14.000 --> 00:12:18.820
刚好在

00:12:16.100 --> 00:12:21.410
这个和本地机器现在还可以

00:12:18.820 --> 00:12:23.720
为了我配置客户端我

00:12:21.410 --> 00:12:25.790
需要做一些你知道的yamo foo 

00:12:23.720 --> 00:12:27.620
在这里，所以我需要继续

00:12:25.790 --> 00:12:29.360
使用yamo，因为它是分层的

00:12:27.620 --> 00:12:32.329
使只是一种配置

00:12:29.360 --> 00:12:35.149
容易一点，所以我要说申请

00:12:32.329 --> 00:12:37.850
点llamo，我们将不得不

00:12:35.149 --> 00:12:40.399
配置spring安全ooofff 

00:12:37.850 --> 00:12:42.589
现在我们谈到了客户注册

00:12:40.399 --> 00:12:45.380
注册我们必须告诉我们的春天

00:12:42.589 --> 00:12:47.420
安全客户端支持有关

00:12:45.380 --> 00:12:48.620
我们要与之交谈的客户

00:12:47.420 --> 00:12:50.449
我们将要期待的

00:12:48.620 --> 00:12:52.130
能够使用，所以我们给它一个逻辑

00:12:50.449 --> 00:12:53.899
我们关心的本地登录名

00:12:52.130 --> 00:12:56.420
客户，然后我们必须指定

00:12:53.899 --> 00:12:57.829
像提供者这样的东西是你

00:12:56.420 --> 00:12:59.690
知道我们是哪个授权服务器

00:12:57.829 --> 00:13:01.880
使用我们应该在哪些端点

00:12:59.690 --> 00:13:04.310
要求令牌之类的东西

00:13:01.880 --> 00:13:05.149
用户信息授权附上全部

00:13:04.310 --> 00:13:07.940
这些不同的端点

00:13:05.149 --> 00:13:09.470
可以改变他们都应该产生你

00:13:07.940 --> 00:13:10.910
始终了解基于智能的响应

00:13:09.470 --> 00:13:12.649
当然是在协议上

00:13:10.910 --> 00:13:15.290
端点本身可能会根据

00:13:12.649 --> 00:13:17.480
上下文路径以及我们必须要做的一切

00:13:15.290 --> 00:13:19.579
现在说出我想要的状态

00:13:17.480 --> 00:13:21.699
想强调我们将要

00:13:19.579 --> 00:13:24.829
使用自定义授权服务器

00:13:21.699 --> 00:13:30.079
所以我要在这里指定一些东西

00:13:24.829 --> 00:13:35.180
在通常情况下，例如与他们在一起

00:13:30.079 --> 00:13:37.339
 Google和github，Facebook和octa 

00:13:35.180 --> 00:13:40.760
等等，已经有

00:13:37.339 --> 00:13:42.050
为您预配置的客户端

00:13:40.760 --> 00:13:43.310
授权URI之类的东西

00:13:42.050 --> 00:13:45.170
标记你所有的东西

00:13:43.310 --> 00:13:46.819
已经针对这些功能进行了预配置

00:13:45.170 --> 00:13:47.209
普通情况下，您不会

00:13:46.819 --> 00:13:48.350
需要

00:13:47.209 --> 00:13:49.910
关于这些提供者只是

00:13:48.350 --> 00:13:52.730
现在可供您使用，您可以在这里看到

00:13:49.910 --> 00:13:57.040
当然，我有这个新的

00:13:52.730 --> 00:13:58.850
应用程序，这是一个你知道这是一个

00:13:57.040 --> 00:14:00.920
注册这些类型不在

00:13:58.850 --> 00:14:02.869
他们是班级路径

00:14:00.920 --> 00:14:06.889
连裤袜是红色的，我的身份证号码告诉我

00:14:02.869 --> 00:14:08.149
我们需要添加一些依赖项

00:14:06.889 --> 00:14:10.610
在这里，所以我们要做的是

00:14:08.149 --> 00:14:15.290
我们要去Maven手掌

00:14:10.610 --> 00:14:18.920
 XML并添加我们关心的两位

00:14:15.290 --> 00:14:23.899
在这里，我们关心弹簧的安全性

00:14:18.920 --> 00:14:26.089
哦，支持我们再见，我们

00:14:23.899 --> 00:14:36.319
还想春天安全哦

00:14:26.089 --> 00:14:41.600
好吧，你的好吧好吧，所以

00:14:36.319 --> 00:14:43.459
让我们看看好吧好吧，所以我们有那些

00:14:41.600 --> 00:14:46.189
类路径上的位，就是这样

00:14:43.459 --> 00:14:47.360
应该是哦，不，哦，授权-不，我是

00:14:46.189 --> 00:14:49.339
对不起，我总是到那里错了哦

00:14:47.360 --> 00:14:50.660
什么-客户就是我们所需要的

00:14:49.339 --> 00:14:53.509
我们将添加一点

00:14:50.660 --> 00:14:57.949
我不太确定该如何发音

00:14:53.509 --> 00:15:06.610
何塞的支持将其添加到

00:14:57.949 --> 00:15:11.230
 classpath和common Oh off-提供程序

00:15:06.610 --> 00:15:13.999
好吧，我还有什么想念的呢？ 

00:15:11.230 --> 00:15:21.189
 Spring Boot Starter安全性

00:15:13.999 --> 00:15:25.519
 oauth2客户端，我们很高兴Jose这样

00:15:21.189 --> 00:15:28.929
我们是网络支持，也许我们只需要

00:15:25.519 --> 00:15:31.929
说出这个想法甚至

00:15:28.929 --> 00:15:31.929
进口

00:15:34.059 --> 00:15:42.639
嗯，这真是个无赖

00:15:45.940 --> 00:15:53.890
哦，我们走了，它已经被缓存了，所以现在

00:15:51.390 --> 00:15:56.710
这是我所期望的所有类型

00:15:53.890 --> 00:15:58.690
这很奇怪，所以通常ID有点

00:15:56.710 --> 00:16:00.610
更新自己的速度更快，但似乎

00:15:58.690 --> 00:16:02.650
现在还好，所以现在我们回去

00:16:00.610 --> 00:16:05.170
到我们的客户端配置， 

00:16:02.650 --> 00:16:07.480
需要告诉弹簧安全客户端

00:16:05.170 --> 00:16:12.850
支持客户权利，所以我

00:16:07.480 --> 00:16:15.010
要在这里使用一些

00:16:12.850 --> 00:16:16.960
配置，因此需要配置

00:16:15.010 --> 00:16:18.100
指向某种提供者

00:16:16.960 --> 00:16:20.080
我们将配置该提供程序

00:16:18.100 --> 00:16:23.080
在第二个权利中， 

00:16:20.080 --> 00:16:24.220
支持我们实际上可以做到这一点

00:16:23.080 --> 00:16:26.890
例如，在这里知道我可以创建一个

00:16:24.220 --> 00:16:28.540
提供者部分，我们可以回到

00:16:26.890 --> 00:16:29.920
一秒钟，但现在或提供

00:16:28.540 --> 00:16:34.230
我们要给它起个名字

00:16:29.920 --> 00:16:36.790
提供者将被称为本地关闭Z和

00:16:34.230 --> 00:16:40.120
你知道参考，我们在这里说

00:16:36.790 --> 00:16:42.160
 Z以外的地方，所以将成为我们的地方

00:16:40.120 --> 00:16:43.060
提供者，然后是客户本身

00:16:42.160 --> 00:16:47.590
我们需要做几件事

00:16:43.060 --> 00:16:50.110
指定ID客户端ID是

00:16:47.590 --> 00:16:52.870
我们已经在中注册了客户

00:16:50.110 --> 00:16:54.580
授权服务器很多

00:16:52.870 --> 00:16:55.720
我喜欢Facebook的网站

00:16:54.580 --> 00:16:58.300
例子或Twitter，他们会有一个

00:16:55.720 --> 00:16:59.530
您知道页面或门户的开发人员点

00:16:58.300 --> 00:17:01.240
开发人员可以在那里

00:16:59.530 --> 00:17:02.410
为注册客户提供自助服务，以及

00:17:01.240 --> 00:17:04.800
当他们这样做时，他们必须给它一个

00:17:02.410 --> 00:17:08.170
客户ID他们必须给它一个客户

00:17:04.800 --> 00:17:09.880
这样的秘密，所以客户寻求将

00:17:08.170 --> 00:17:15.820
在这种情况下我只是秘密

00:17:09.880 --> 00:17:18.010
基本的客户端身份验证方法

00:17:15.820 --> 00:17:21.070
恩，这是我，所以我结束了

00:17:18.010 --> 00:17:22.540
在这里指定很多东西

00:17:21.070 --> 00:17:26.050
大多数您不会使用的客户示例

00:17:22.540 --> 00:17:28.540
必须指定身份验证

00:17:26.050 --> 00:17:31.450
例如，您知道这种方法

00:17:28.540 --> 00:17:32.650
东西授权码很多

00:17:31.450 --> 00:17:34.750
这些只是假设， 

00:17:32.650 --> 00:17:36.640
默认情况下为您理解范围

00:17:34.750 --> 00:17:38.380
我们想要的再次是个人资料

00:17:36.640 --> 00:17:42.520
使用开放ID，您不必知道

00:17:38.380 --> 00:17:44.470
正确的开放ID，因此客户名称是我们的

00:17:42.520 --> 00:17:46.980
您认识的客户的逻辑名称

00:17:44.470 --> 00:17:49.390
我们想要它出现的方式

00:17:46.980 --> 00:17:51.910
您知道其他任何白色级别的页面， 

00:17:49.390 --> 00:17:55.440
所以在重定向模板上，我们有

00:17:51.910 --> 00:17:57.270
将此请求发送到端点

00:17:55.440 --> 00:18:04.940
重新导向

00:17:57.270 --> 00:18:09.590
 URI模板：基本URL登录

00:18:04.940 --> 00:18:13.130
 / o对斜杠的测试代码进行身份验证

00:18:09.590 --> 00:18:16.559
注册ID好吧，这是我们的

00:18:13.130 --> 00:18:19.200
重定向URI模板和此端点

00:18:16.559 --> 00:18:21.840
这是我们所期望的

00:18:19.200 --> 00:18:23.549
客户期望我们的服务

00:18:21.840 --> 00:18:25.679
使用OAuth完成后重定向

00:18:23.549 --> 00:18:28.289
授权流程，我们期待

00:18:25.679 --> 00:18:29.610
重定向到我们的应用程序和

00:18:28.289 --> 00:18:30.809
您知道我们要填写的应用程序

00:18:29.610 --> 00:18:31.909
可以从主机进口很多

00:18:30.809 --> 00:18:33.990
自动为我们填写

00:18:31.909 --> 00:18:36.210
我们将有一个可以监听的过滤器

00:18:33.990 --> 00:18:37.970
登录OAuth 2代码，然后看起来

00:18:36.210 --> 00:18:39.899
最后一点是路径变量

00:18:37.970 --> 00:18:42.990
注册ID，并且期望

00:18:39.899 --> 00:18:45.659
匹配这个登录客户端好吧，所以你

00:18:42.990 --> 00:18:47.340
现在有那些位了，我们需要去

00:18:45.659 --> 00:18:51.890
返回并配置该提供程序，以便

00:18:47.340 --> 00:18:57.149
 uri等于http 

00:18:51.890 --> 00:18:58.620
服务器外：8090现在我已经知道了

00:18:57.149 --> 00:19:00.929
我告诉你我正在运行的应用程序

00:18:58.620 --> 00:19:03.059
该应用程序在同一台上运行

00:19:00.929 --> 00:19:06.390
主机和端口正确，所以如果您看到

00:19:03.059 --> 00:19:08.159
在这里ping服务器我已经知道了

00:19:06.390 --> 00:19:11.549
在我拥有的Etsy主机上运行

00:19:08.159 --> 00:19:14.820
在我的Ipsy主持人中有一线

00:19:11.549 --> 00:19:17.159
指向所有服务器，所以在这里说

00:19:14.820 --> 00:19:18.990
一二七零零一本地主机

00:19:17.159 --> 00:19:20.730
服务器，然后我有另一个

00:19:18.990 --> 00:19:23.100
域也是如此，但我的原因

00:19:20.730 --> 00:19:26.549
有一个单独的域一个单独的

00:19:23.100 --> 00:19:28.110
主机名是因为spring安全

00:19:26.549 --> 00:19:30.779
授权服务器将提供

00:19:28.110 --> 00:19:34.470
饼干，春天也是如此

00:19:30.779 --> 00:19:35.429
安全客户端权限，以便客户端

00:19:34.470 --> 00:19:36.960
要有一个饼干，所以

00:19:35.429 --> 00:19:39.419
授权服务器并记住

00:19:36.960 --> 00:19:41.370
 Cookies不是由主机名键入的

00:19:39.419 --> 00:19:42.600
端口，但主机名，如果您

00:19:41.370 --> 00:19:44.580
有两个不同的Cookie来自

00:19:42.600 --> 00:19:46.350
他们可能认识的同一个主机

00:19:44.580 --> 00:19:49.620
彼此践踏，所以我们想

00:19:46.350 --> 00:19:52.200
确保他们现在是单独的主机

00:19:49.620 --> 00:19:54.299
避免那个问题吧，所以不会

00:19:52.200 --> 00:19:56.279
必须实际上是一个您知道的DNS主机

00:19:54.299 --> 00:19:58.679
例如，它可以只是Etsy主机

00:19:56.279 --> 00:20:00.059
这是DNS，但我的意思是它没有

00:19:58.679 --> 00:20:01.470
非常复杂，非常非常简单

00:20:00.059 --> 00:20:02.760
使这个工作正常

00:20:01.470 --> 00:20:05.309
我们现在必须提供

00:20:02.760 --> 00:20:07.340
授权URI，因此在本例中

00:20:05.309 --> 00:20:10.290
授权服务器具有OAuth 

00:20:07.340 --> 00:20:15.600
授权端点

00:20:10.290 --> 00:20:19.170
令牌URI就是复制并

00:20:15.600 --> 00:20:23.510
在这里粘贴一些

00:20:19.170 --> 00:20:31.800
和关闭服务器令牌，您的视线就关闭了

00:20:23.510 --> 00:20:35.160
令牌，并且用户信息URI关闭对不起

00:20:31.800 --> 00:20:36.450
它的资源用户信息，所以这是

00:20:35.160 --> 00:20:39.720
终点，我们要去

00:20:36.450 --> 00:20:40.800
稍后再打电话给他们这个

00:20:39.720 --> 00:20:42.090
是资源服务器

00:20:40.800 --> 00:20:44.160
我们在乎那是非标准的

00:20:42.090 --> 00:20:48.020
在我们的情况下，但例如

00:20:44.160 --> 00:20:51.120
我使用DC，所以用户名属性和

00:20:48.020 --> 00:20:53.070
那是我们从中得到的名字

00:20:51.120 --> 00:20:55.470
我们期望成为的JSON节

00:20:53.070 --> 00:20:56.010
能够识别主体，所以Rob或

00:20:55.470 --> 00:20:58.410
乔或

00:20:56.010 --> 00:20:59.520
还是天哪，所以现在让我们运行

00:20:58.410 --> 00:21:00.960
应用程序这是我们一无所有

00:20:59.520 --> 00:21:03.600
用代码写的我们绝对做到了

00:21:00.960 --> 00:21:04.800
就代码而言什么也没有，但是我们已经

00:21:03.600 --> 00:21:06.810
应该有一个有效的客户，所以让我们

00:21:04.800 --> 00:21:08.850
看看是否启动没有问题，并且

00:21:06.810 --> 00:21:15.860
然后我们将使用该配置

00:21:08.850 --> 00:21:18.210
做或工作哦，好的，看起来不错，所以

00:21:15.860 --> 00:21:19.440
看起来我们有一个过滤链

00:21:18.210 --> 00:21:25.080
我们有一个默认的用户名， 

00:21:19.440 --> 00:21:29.070
密码还不错，就是这样

00:21:25.080 --> 00:21:30.600
似乎就是我们需要的一切

00:21:29.070 --> 00:21:31.950
现在又有客户

00:21:30.600 --> 00:21:35.700
您想要的注册

00:21:31.950 --> 00:21:36.870
一个完整的客户，你也知道

00:21:35.700 --> 00:21:38.990
本来可以注册的

00:21:36.870 --> 00:21:41.340
客户和您想要的提供者

00:21:38.990 --> 00:21:42.720
在CMO文件中，当然还有

00:21:41.340 --> 00:21:44.370
可以从数据库中加载

00:21:42.720 --> 00:21:45.960
当然有一个界面，所以这是

00:21:44.370 --> 00:21:47.400
最终这些注册这些

00:21:45.960 --> 00:21:49.110
客户注册变成

00:21:47.400 --> 00:21:52.020
该类型注册的对象

00:21:49.110 --> 00:21:53.280
对，这是一个，这是财产

00:21:52.020 --> 00:21:54.930
抱歉，这是一个所谓的客户

00:21:53.280 --> 00:21:58.820
在这里注册

00:21:54.930 --> 00:21:58.820
客户注册等等等等

00:21:59.420 --> 00:22:05.280
客户端配置条件在哪里

00:22:03.030 --> 00:22:09.210
它的光束，所以它映射到一个

00:22:05.280 --> 00:22:11.190
内存中的客户端存储库，我们有

00:22:09.210 --> 00:22:15.290
客户注册类型的对象

00:22:11.190 --> 00:22:18.800
对，那么这些位在哪里

00:22:15.290 --> 00:22:22.550
我没有受到启发

00:22:18.800 --> 00:22:23.660
 IntelliJ没有看到这些类型，所以

00:22:22.550 --> 00:22:25.640
确保我有正确的类型

00:22:23.660 --> 00:22:35.330
在上课的路上，这又春暖花开

00:22:25.640 --> 00:22:45.070
哦，我知道我做了Centron安全

00:22:35.330 --> 00:22:47.270
明显有问题，好吧好吧

00:22:45.070 --> 00:22:49.190
在那里，所以实际上是春天

00:22:47.270 --> 00:22:51.650
安全在这里，我都为之兴奋

00:22:49.190 --> 00:22:54.260
对Spring Security OAuth的合并支持

00:22:51.650 --> 00:22:56.390
在春季安全中，我和我去了

00:22:54.260 --> 00:22:59.150
给它指定错误的组ID 

00:22:56.390 --> 00:23:00.440
旧的Spring安全身份验证组ID 

00:22:59.150 --> 00:23:03.560
不要这样做，实际上是春天

00:23:00.440 --> 00:23:06.680
安全哦，好吧，现在客户端

00:23:03.560 --> 00:23:08.090
注册实际上

00:23:06.680 --> 00:23:09.950
使我之前的跑步无效，让我们开始吧

00:23:08.090 --> 00:23:12.740
继续并再次运行该应用程序

00:23:09.950 --> 00:23:14.270
这次，而这正在发生

00:23:12.740 --> 00:23:17.330
让我们看看是否客户注册在

00:23:14.270 --> 00:23:19.250
路径，但是我们还可以，所以我们

00:23:17.330 --> 00:23:21.650
以前的运行效果不好

00:23:19.250 --> 00:23:23.630
表示有一束光束

00:23:21.650 --> 00:23:26.150
我们尚未配置授权URI 

00:23:23.630 --> 00:23:30.460
不能为空好吧，这就是错误

00:23:26.150 --> 00:23:30.460
我们在那里需要配置

00:23:30.550 --> 00:23:38.780
授权您我全部打错

00:23:37.190 --> 00:23:39.920
对，看起来好像很幸福

00:23:38.780 --> 00:23:41.900
我们在课堂上得到了正确的类型

00:23:39.920 --> 00:23:43.130
路径，它还没有打印出

00:23:41.900 --> 00:23:44.840
默认的用户名密码

00:23:43.130 --> 00:23:46.730
 Spring Security已检测到

00:23:44.840 --> 00:23:48.170
 OAuth的东西，所以一切都很好， 

00:23:46.730 --> 00:23:49.760
我们现在实际上可以回到该类型

00:23:48.170 --> 00:23:53.420
我要第二次告诉你

00:23:49.760 --> 00:23:56.630
客户注册，我们在这里

00:23:53.420 --> 00:23:57.530
具有产生你的类型

00:23:56.630 --> 00:23:58.640
知道拥有像

00:23:57.530 --> 00:24:01.520
注册我需要一个客户ID 

00:23:58.640 --> 00:24:03.410
客户秘密等所有这些都是你

00:24:01.520 --> 00:24:05.480
知道这也是你可以看到的

00:24:03.410 --> 00:24:07.090
默认是一个基本的ID，例如

00:24:05.480 --> 00:24:09.380
很多这样的东西是显而易见的

00:24:07.090 --> 00:24:11.540
您可以注册自定义客户端

00:24:09.380 --> 00:24:14.980
注册，如果你想对的话

00:24:11.540 --> 00:24:19.250
实际上是客户注册

00:24:14.980 --> 00:24:20.570
仓库，那个仓库就是

00:24:19.250 --> 00:24:22.280
必须了解您的客户的事情

00:24:20.570 --> 00:24:24.020
注册，但没有理由

00:24:22.280 --> 00:24:26.090
此客户客户注册

00:24:24.020 --> 00:24:27.260
存储库必须是您的默认存储库

00:24:26.090 --> 00:24:29.810
可能有一个基于

00:24:27.260 --> 00:24:31.140
例如数据库好很多

00:24:29.810 --> 00:24:33.480
这里有不同的选择

00:24:31.140 --> 00:24:38.040
您可以使用的不同接口

00:24:33.480 --> 00:24:40.080
为了使这项工作更容易

00:24:38.040 --> 00:24:42.270
自动配置和弹簧启动

00:24:40.080 --> 00:24:43.290
我们用来带你

00:24:42.270 --> 00:24:44.760
属性并将其变成

00:24:43.290 --> 00:24:47.640
配置，但绝对没有

00:24:44.760 --> 00:24:48.810
你嗯，你知道你的原因

00:24:47.640 --> 00:24:49.980
现在必须那样做

00:24:48.810 --> 00:24:53.310
继续前进，我们将建立一个

00:24:49.980 --> 00:24:54.180
应用程序，我们将与之交谈

00:24:53.310 --> 00:24:56.310
 REST API，我们要谈谈

00:24:54.180 --> 00:24:59.870
资源服务器配置文件端点

00:24:56.310 --> 00:25:02.760
使用我们新创建的访问令牌

00:24:59.870 --> 00:25:03.750
我们必须获得的，所以让我们开始吧

00:25:02.760 --> 00:25:07.850
继续尝试并做到这一点，让我们创建一个

00:25:03.750 --> 00:25:14.040
客户在这里的休息点叫

00:25:07.850 --> 00:25:15.750
类配置文件其余控制器好，并且

00:25:14.040 --> 00:25:19.350
我们将在此处创建一个端点

00:25:15.750 --> 00:25:21.060
仅返回返回的详细信息

00:25:19.350 --> 00:25:23.640
从分析的角度来看，现在的细节

00:25:21.060 --> 00:25:26.010
只是成为班主任

00:25:23.640 --> 00:25:28.650
详细信息，我将在此处创建一个字段

00:25:26.010 --> 00:25:29.910
字符串名称，您知道我可以使用

00:25:28.650 --> 00:25:33.180
龙目岛在这里做这个简短的工作

00:25:29.910 --> 00:25:34.800
所以没有构造函数不是吗

00:25:33.180 --> 00:25:37.350
我的类型非常简单

00:25:34.800 --> 00:25:40.140
何时返回主要详细信息

00:25:37.350 --> 00:25:43.380
有人登录，因此详细信息或个人资料

00:25:40.140 --> 00:25:45.560
好的，为了完成这项工作，我们

00:25:43.380 --> 00:25:48.060
会利用oauth2的优势

00:25:45.560 --> 00:25:50.070
身份验证令牌，这是我的令牌

00:25:48.060 --> 00:25:51.600
被注射是主要的

00:25:50.070 --> 00:25:53.250
到时候水化

00:25:51.600 --> 00:25:54.840
同一点被叫，所以第一次

00:25:53.250 --> 00:25:57.510
该应用程序启动时

00:25:54.840 --> 00:25:59.790
我们要达到这个终点， 

00:25:57.510 --> 00:26:01.020
将重定向到您的登录过滤器

00:25:59.790 --> 00:26:02.550
知道我们直接到离线服务器，所以

00:26:01.020 --> 00:26:05.130
如果没有我们，我们将永远无法达到目标

00:26:02.550 --> 00:26:06.540
这个令牌，它将迫使我们

00:26:05.130 --> 00:26:09.780
重定向和验证还可以

00:26:06.540 --> 00:26:15.380
所以我们要做的是

00:26:09.780 --> 00:26:17.550
利用令牌获得

00:26:15.380 --> 00:26:19.200
获取访问令牌，所以我们有一个

00:26:17.550 --> 00:26:20.880
身份验证令牌，我们将使用它来

00:26:19.200 --> 00:26:23.100
获取访问令牌以便我们进行

00:26:20.880 --> 00:26:25.110
做这项工作，我们需要使用auth来

00:26:23.100 --> 00:26:27.210
授权客户服务如此私密

00:26:25.110 --> 00:26:29.250
最终或授权授权客户端

00:26:27.210 --> 00:26:32.850
服务注入到

00:26:29.250 --> 00:26:36.720
应用程序，我们会说返回这个

00:26:32.850 --> 00:26:38.580
点客户端服务点负载授权

00:26:36.720 --> 00:26:41.430
客户，我们使用令牌获取

00:26:38.580 --> 00:26:42.610
授权客户注册ID令牌

00:26:41.430 --> 00:26:49.330
点获取名称

00:26:42.610 --> 00:26:52.600
这为我们提供了客户服务或

00:26:49.330 --> 00:26:56.440
我宁愿丢给它的客户， 

00:26:52.600 --> 00:26:59.820
我们可以在这里使用的客户端让我们清理一下

00:26:56.440 --> 00:27:04.929
一点点，我们可以使用客户端来

00:26:59.820 --> 00:27:08.919
然后确定有关

00:27:04.929 --> 00:27:12.240
应用程序，以便我们可以提供用户信息URI 

00:27:08.919 --> 00:27:18.340
从客户端ID获取，以便客户端

00:27:12.240 --> 00:27:21.460
客户获取客户注册点获取

00:27:18.340 --> 00:27:22.659
提供我们的详细信息点获取用户信息

00:27:21.460 --> 00:27:24.490
您的端点就是

00:27:22.659 --> 00:27:26.710
我们想打电话给我们

00:27:24.490 --> 00:27:29.350
在此处获取用户信息的URI 

00:27:26.710 --> 00:27:33.880
端点好，所以这是URI，现在

00:27:29.350 --> 00:27:35.260
我们需要对此提出要求

00:27:33.880 --> 00:27:36.460
客户从

00:27:35.260 --> 00:27:37.960
用户，为了您的眼睛，我们将

00:27:36.460 --> 00:27:40.299
要求，但我们需要

00:27:37.960 --> 00:27:41.620
为了做到这一点，我们可以

00:27:40.299 --> 00:27:44.409
需要具有访问令牌才能执行此操作

00:27:41.620 --> 00:27:48.330
所以我们可以在这段代码中

00:27:44.409 --> 00:27:53.320
您知道的行获取访问令牌并

00:27:48.330 --> 00:27:55.210
然后配置风险模板调用并

00:27:53.320 --> 00:27:57.639
它应该是一个您知道的请求实体

00:27:55.210 --> 00:27:59.649
我们可以在这里手动配置

00:27:57.639 --> 00:28:02.080
我们想要，但我宁愿

00:27:59.649 --> 00:28:03.940
更改我们使用的其余模板

00:28:02.080 --> 00:28:05.289
我们要休息一下打个电话

00:28:03.940 --> 00:28:10.659
模板，让我们配置其余的

00:28:05.289 --> 00:28:12.070
模板，然后将其注入

00:28:10.659 --> 00:28:14.289
构造函数，让我们配置一个休息

00:28:12.070 --> 00:28:17.649
我放在这里休息

00:28:14.289 --> 00:28:19.299
进行呼叫的模板，它是安全的

00:28:17.649 --> 00:28:22.299
这样我要说新的休息模板

00:28:19.299 --> 00:28:24.669
我们将提供的建筑拦截器

00:28:22.299 --> 00:28:26.289
拦截器和拦截器

00:28:24.669 --> 00:28:29.350
我们要提供的是客户端HTTP 

00:28:26.289 --> 00:28:31.120
请求拦截器和代码

00:28:29.350 --> 00:28:32.289
我们将使用它相当

00:28:31.120 --> 00:28:34.960
再简单一点，我们也会

00:28:32.289 --> 00:28:38.200
注入以授权客户

00:28:34.960 --> 00:28:41.889
服务或授权以授权客户端

00:28:38.200 --> 00:28:43.080
服务和过滤器是相当

00:28:41.889 --> 00:28:47.470
直截了当的权利，所以我们会说

00:28:43.080 --> 00:28:50.889
带客户请求执行说

00:28:47.470 --> 00:28:55.059
执行点通过执行HTTP请求

00:28:50.889 --> 00:28:57.010
它的等等，我们要回应我们

00:28:55.059 --> 00:28:59.679
现在要继续

00:28:57.010 --> 00:29:01.809
将令牌和访问令牌添加到

00:28:59.679 --> 00:29:04.030
正在发送的请求的标头

00:29:01.809 --> 00:29:06.100
通过这个其余的模板好吧，我们会

00:29:04.030 --> 00:29:08.770
首先使用好获得访问

00:29:06.100 --> 00:29:13.150
当前授权的认证令牌

00:29:08.770 --> 00:29:15.580
令牌直接用于点类转换

00:29:13.150 --> 00:29:19.540
我们将看看这些最新的

00:29:15.580 --> 00:29:21.490
你知道静态你知道引用

00:29:19.540 --> 00:29:24.910
当前令牌正确的上下文

00:29:21.490 --> 00:29:26.620
当地令牌，我们将其投放到

00:29:24.910 --> 00:29:27.490
编写一个oauth2认证令牌

00:29:26.620 --> 00:29:29.710
现在这可能不是最聪明的

00:29:27.490 --> 00:29:31.570
要做的事情可能是

00:29:29.710 --> 00:29:32.440
使用其他令牌时，如果

00:29:31.570 --> 00:29:33.640
你有不同类型的

00:29:32.440 --> 00:29:35.140
可以在

00:29:33.640 --> 00:29:37.600
您绝对应该做的应用程序

00:29:35.140 --> 00:29:39.309
在执行此操作之前的一个实例，但是在

00:29:37.600 --> 00:29:41.500
我的情况我清楚地知道

00:29:39.309 --> 00:29:44.380
将成为身份验证令牌的身份验证

00:29:41.500 --> 00:29:45.820
现在我有了这个令牌，从那里我

00:29:44.380 --> 00:29:47.460
想得到客户，所以我可以做

00:29:45.820 --> 00:29:53.919
和以前一样，我将对auth说

00:29:47.460 --> 00:29:55.450
授权客户将CS降低至

00:29:53.919 --> 00:29:59.470
授权客户，我将使用

00:29:55.450 --> 00:30:01.120
令牌获取获得授权

00:29:59.470 --> 00:30:06.070
注册ID令牌没有名称

00:30:01.120 --> 00:30:07.510
然后我们使用标题

00:30:06.070 --> 00:30:13.299
更改标题会说HTTP 

00:30:07.510 --> 00:30:16.090
标头点添加或设置授权I 

00:30:13.299 --> 00:30:21.419
猜想我们可以自己添加它，添加HTTP 

00:30:16.090 --> 00:30:25.210
标头点到授权载体加上

00:30:21.419 --> 00:30:28.150
客户端访问令牌，因此客户端点

00:30:25.210 --> 00:30:30.309
获取访问令牌点获取值令牌

00:30:28.150 --> 00:30:33.610
珍惜一切，所以有我们的习惯

00:30:30.309 --> 00:30:35.020
标头，您知道自定义裸标头和

00:30:33.610 --> 00:30:36.520
我们将继续

00:30:35.020 --> 00:30:39.309
当然要磁盘

00:30:36.520 --> 00:30:41.350
可以用lambda代替，所以在那里

00:30:39.309 --> 00:30:43.419
我们去那里是我们的休息模板， 

00:30:41.350 --> 00:30:45.190
会知道您要查找当前

00:30:43.419 --> 00:30:46.540
身份验证令牌，我们必须是这个

00:30:45.190 --> 00:30:48.190
手动对，我正在使用

00:30:46.540 --> 00:30:50.020
安全上下文持有者在这里，因为我们

00:30:48.190 --> 00:30:51.880
有光束在

00:30:50.020 --> 00:30:54.700
要求您注意我可以访问

00:30:51.880 --> 00:30:56.950
与相同的标记作为参数结果

00:30:54.700 --> 00:30:59.020
作为我春季MVC中的解决论点

00:30:56.950 --> 00:31:01.090
处理程序方法，所以工作正常

00:30:59.020 --> 00:31:01.950
如果我想在这里写那个代码，但是

00:31:01.090 --> 00:31:03.700
如果我想访问它

00:31:01.950 --> 00:31:04.900
独立地，我可以做与

00:31:03.700 --> 00:31:06.970
好吧，因为它最终只是

00:31:04.900 --> 00:31:08.790
来自此安全上下文较旧

00:31:06.970 --> 00:31:11.550
点获取上下文

00:31:08.790 --> 00:31:14.550
有时候好吧，现在让我们看看

00:31:11.550 --> 00:31:16.860
有这个配置我有

00:31:14.550 --> 00:31:18.270
客户在这里，我现在有了URL，我将

00:31:16.860 --> 00:31:20.310
写我要写那个请求

00:31:18.270 --> 00:31:21.990
下游服务使

00:31:20.310 --> 00:31:23.030
向下游服务要求

00:31:21.990 --> 00:31:25.530
我会说这个医生做template.dot 

00:31:23.030 --> 00:31:27.060
我们将使用交易所和

00:31:25.530 --> 00:31:28.740
我们会说我们想做一个

00:31:27.060 --> 00:31:31.410
打电话给用户

00:31:28.740 --> 00:31:33.300
 URI这些是您所要注意的信息

00:31:31.410 --> 00:31:34.980
是HTTP GET调用，没有任何内容，因此

00:31:33.300 --> 00:31:36.630
我们先说不，然后再说数据类型

00:31:34.980 --> 00:31:39.360
我们想要回来的是一种

00:31:36.630 --> 00:31:42.540
主要细节，让我们看看我们

00:31:39.360 --> 00:31:44.100
得到，当我们保存所有这些响应好吗

00:31:42.540 --> 00:31:47.510
所以我要说我只是转弯

00:31:44.100 --> 00:31:54.150
实体让身体好起来，这是我们的电话

00:31:47.510 --> 00:31:55.170
不错，你知道这基本上是

00:31:54.150 --> 00:31:57.660
我接受，让我们继续前进，看看有什么

00:31:55.170 --> 00:31:59.400
它看起来像当我们在10中运行它时

00:31:57.660 --> 00:32:01.230
所以我们在其余模板上有一个过滤器

00:31:59.400 --> 00:32:03.390
这是自定义的，我们有一个

00:32:01.230 --> 00:32:06.210
过滤它是可怕的R所以它会

00:32:03.390 --> 00:32:07.650
关闭attenti门控电话，我们可能会

00:32:06.210 --> 00:32:09.660
可能会改写这段代码说好

00:32:07.650 --> 00:32:11.730
如果你没有这个，那就只有你

00:32:09.660 --> 00:32:13.170
知道返回一个常规只是执行，所以我们

00:32:11.730 --> 00:32:14.400
实际上可以说这是否没有诱惑力，或者

00:32:13.170 --> 00:32:17.820
如果没有的话

00:32:14.400 --> 00:32:19.410
身份验证，然后您知道

00:32:17.820 --> 00:32:23.910
没有正确的继续前进，所以可能

00:32:19.410 --> 00:32:26.340
一个常规的休息模板，我们将

00:32:23.910 --> 00:32:28.200
跳过所有获取标题并添加

00:32:26.340 --> 00:32:30.110
他们等等，好吧，所以

00:32:28.200 --> 00:32:33.180
应用程序在端口8080上启动并运行

00:32:30.110 --> 00:32:35.610
斜线正斜杠的localhost 8080 

00:32:33.180 --> 00:32:38.640
现在我们点击登录客户端，注意

00:32:35.610 --> 00:32:40.590
我现在在去的时候

00:32:38.640 --> 00:32:42.780
返回此页localhost 8080 

00:32:40.590 --> 00:32:45.570
即使我按Enter也可以触摸登录

00:32:42.780 --> 00:32:47.670
 -对于-如果我重定向到现在登录

00:32:45.570 --> 00:32:48.900
点击它说登录客户端正确

00:32:47.670 --> 00:32:51.030
这是我们给的逻辑名称

00:32:48.900 --> 00:32:53.310
你知道在配置中

00:32:51.030 --> 00:32:56.310
客户名称而不是客户ID客户

00:32:53.310 --> 00:32:58.080
会话关闭的ID为localhost 8080- 

00:32:56.310 --> 00:33:00.210
用于会话授权

00:32:58.080 --> 00:33:03.060
当我点击它时登录客户端

00:33:00.210 --> 00:33:05.220
将重定向到授权

00:33:03.060 --> 00:33:06.450
过滤器正在查看的服务器权

00:33:05.220 --> 00:33:08.100
请求，说哦，你要我

00:33:06.450 --> 00:33:10.740
将您重定向到授权服务器

00:33:08.100 --> 00:33:14.400
住在主机和港口附近- 

00:33:10.740 --> 00:33:15.810
服务器冒号80 90如此不同的主机

00:33:14.400 --> 00:33:18.060
可以看到我是另一台服务器

00:33:15.810 --> 00:33:20.370
将白色标签页用于

00:33:18.060 --> 00:33:22.290
授权服务器和客户端

00:33:20.370 --> 00:33:22.830
对，所以两者都非常好

00:33:22.290 --> 00:33:25.310
的

00:33:22.830 --> 00:33:28.200
您可以并且应该无趣的页面

00:33:25.310 --> 00:33:30.450
自定义这些以匹配皮肤

00:33:28.200 --> 00:33:34.440
您的应用程序期望可以，所以

00:33:30.450 --> 00:33:37.140
这里记得我们有乔和密码

00:33:34.440 --> 00:33:41.850
是PW没事吧，就是登录了

00:33:37.140 --> 00:33:43.830
问我我要允许还是要

00:33:41.850 --> 00:33:45.780
授权客户一二三四

00:33:43.830 --> 00:33:47.460
访问我的受保护资源，这可能

00:33:45.780 --> 00:33:49.530
是你知道的相当于

00:33:47.460 --> 00:33:51.180
 Facebook好友页面或Facebook 

00:33:49.530 --> 00:33:52.890
页面上说你想允许这个

00:33:51.180 --> 00:33:54.510
第三方网站拥有您的个人资料

00:33:52.890 --> 00:33:56.610
你的朋友图你知道

00:33:54.510 --> 00:33:58.640
你可以看到这是你知道有效的流量

00:33:56.610 --> 00:34:00.510
有效油流量在这里，但

00:33:58.640 --> 00:34:03.570
授权，这是一个月的一部分

00:34:00.510 --> 00:34:04.890
认证是非标准的权利

00:34:03.570 --> 00:34:07.399
我刚遇到的身份验证

00:34:04.890 --> 00:34:10.890
登录使用，它应该形成

00:34:07.399 --> 00:34:12.690
我的授权服务器，但这不是

00:34:10.890 --> 00:34:16.380
你知道不一定是一样的

00:34:12.690 --> 00:34:17.700
嗯，哇，那不是很多

00:34:16.380 --> 00:34:19.710
这可以帮助我登录任何

00:34:17.700 --> 00:34:21.690
一些不同的方式，然后

00:34:19.710 --> 00:34:24.480
重定向回此OAuth流程，可以

00:34:21.690 --> 00:34:28.440
所以说授权然后我们走了

00:34:24.480 --> 00:34:32.610
将我重定向回客户端

00:34:28.440 --> 00:34:34.590
我击中了四个斜线端点，我们得到了

00:34:32.610 --> 00:34:36.600
个人资料信息正确，所以我

00:34:34.590 --> 00:34:39.690
登录，现在每当我创建一个

00:34:36.600 --> 00:34:42.630
要求您知道我是否提出任何要求

00:34:39.690 --> 00:34:44.370
在这个端点，我用剩下的

00:34:42.630 --> 00:34:46.980
模板，它将添加此标头

00:34:44.370 --> 00:34:49.409
这个标题会验证我的身份

00:34:46.980 --> 00:34:51.390
现在我可以调用任何其他API 

00:34:49.409 --> 00:34:53.429
需要任何其他资源服务器

00:34:51.390 --> 00:34:57.660
期望该令牌，它将起作用

00:34:53.429 --> 00:35:00.180
好了，现在我们看了一些

00:34:57.660 --> 00:35:02.250
春季安全五中的客户支持

00:35:00.180 --> 00:35:03.480
我们研究了如何配置一个

00:35:02.250 --> 00:35:04.890
知道填写一切如何

00:35:03.480 --> 00:35:06.030
配置您了解的所有内容

00:35:04.890 --> 00:35:08.210
没有它，我们什么也拿不了

00:35:06.030 --> 00:35:10.950
理所当然，因此我们单击配置

00:35:08.210 --> 00:35:13.110
提供者和客户本身以及

00:35:10.950 --> 00:35:14.520
可以配置所有详细信息， 

00:35:13.110 --> 00:35:16.470
希望你不必这样做

00:35:14.520 --> 00:35:18.600
不止一次或两次以上

00:35:16.470 --> 00:35:23.850
你可以做到正确，也可以

00:35:18.600 --> 00:35:25.620
方便-您知道配置

00:35:23.850 --> 00:35:28.680
过滤和配置其余模板，以及

00:35:25.620 --> 00:35:31.020
将其置于自动配置中，您

00:35:28.680 --> 00:35:32.610
甚至可能有关于哪个的信息

00:35:31.020 --> 00:35:34.350
验证客户端以从中加载呼叫

00:35:32.610 --> 00:35:35.280
例如数据库，所以没有

00:35:34.350 --> 00:35:36.870
原因可能不只是

00:35:35.280 --> 00:35:41.970
自动你出去了

00:35:36.870 --> 00:35:44.970
与知名数据库对话

00:35:41.970 --> 00:35:46.410
也许在您的组织中

00:35:44.970 --> 00:35:49.230
正确的自动配置

00:35:46.410 --> 00:35:51.060
 classpath然后再当它的时候

00:35:49.230 --> 00:35:52.980
启动它将连接，您知道

00:35:51.060 --> 00:35:55.710
您将自动进行身份验证

00:35:52.980 --> 00:35:57.720
能够与这些对话的风险模板

00:35:55.710 --> 00:35:58.890
您使用的资源

00:35:57.720 --> 00:36:00.870
授权服务器，以便所有

00:35:58.890 --> 00:36:02.640
非常非常容易，我在这里做了艰苦的努力

00:36:00.870 --> 00:36:04.290
我希望我们最终会

00:36:02.640 --> 00:36:07.380
做到这一点的能力将是

00:36:04.290 --> 00:36:09.360
自动为您贡献

00:36:07.380 --> 00:36:11.190
向前，我希望这是其中之一

00:36:09.360 --> 00:36:14.460
事情会很高兴

00:36:11.190 --> 00:36:15.690
向前实际上有一个OAuth休息

00:36:14.460 --> 00:36:18.090
例如春天的模板

00:36:15.690 --> 00:36:20.220
安全关闭，但越来越多的是

00:36:18.090 --> 00:36:21.600
越来越少用了吧，这会很好

00:36:20.220 --> 00:36:23.550
只是可以有一个过滤器

00:36:21.600 --> 00:36:25.800
自动为我的定期捐款

00:36:23.550 --> 00:36:27.000
像这样逮捕模板，所以我们看了看

00:36:25.800 --> 00:36:29.300
我看了春季安全5 

00:36:27.000 --> 00:36:31.640
配置我们研究过的自定义客户端

00:36:29.300 --> 00:36:34.170
配置所需的一切

00:36:31.640 --> 00:36:36.330
与授权服务器交谈自定义

00:36:34.170 --> 00:36:36.900
春季授权服务器

00:36:36.330 --> 00:36:38.880
安全

00:36:36.900 --> 00:36:41.670
基于ooofff的授权服务器

00:36:38.880 --> 00:36:43.410
支持UA和Cloud Foundry，我们已经

00:36:41.670 --> 00:36:44.730
还看着这只是其中之一

00:36:43.410 --> 00:36:48.420
很多选择，你可以看看

00:36:44.730 --> 00:36:49.680
常见的哦F-这里的提供者定义

00:36:48.420 --> 00:36:51.300
你会看到他们是你知道的

00:36:49.680 --> 00:36:52.950
常见的已经提供给您

00:36:51.300 --> 00:36:54.030
您不必担心，如果

00:36:52.950 --> 00:36:56.120
您只是连接到其中之一

00:36:54.030 --> 00:37:00.270
我相信还有更多的大四巨头

00:36:56.120 --> 00:37:02.520
我们也看着你知道如何使用

00:37:00.270 --> 00:37:04.920
 API如何使用API​​本身

00:37:02.520 --> 00:37:06.990
简化OAuth以在那里授权客户端

00:37:04.920 --> 00:37:08.340
授权客户服务

00:37:06.990 --> 00:37:10.140
这些是春季的API 

00:37:08.340 --> 00:37:13.260
安全本身，他们给你一种

00:37:10.140 --> 00:37:14.790
存储库的运行时api api 

00:37:13.260 --> 00:37:18.240
您可以进行互动以了解

00:37:14.790 --> 00:37:19.320
您拥有哪些客户-您知道

00:37:18.240 --> 00:37:21.390
询问他们并获取信息

00:37:19.320 --> 00:37:22.770
关于他们，所以这一切都为

00:37:21.390 --> 00:37:25.050
你的框架，有一个

00:37:22.770 --> 00:37:27.120
默认的内存版本，但是可以

00:37:25.050 --> 00:37:29.700
当然要基于我们的数据库

00:37:27.120 --> 00:37:31.410
并没有真正考虑测试

00:37:29.700 --> 00:37:34.110
例如，测试就是你要做的事情

00:37:31.410 --> 00:37:36.770
最终可以并且应该在您

00:37:34.110 --> 00:37:39.510
写这个测试，这个测试将是

00:37:36.770 --> 00:37:42.150
你知道使用标准的spring MVC 

00:37:39.510 --> 00:37:44.220
嘲笑C测试客户端，在那里

00:37:42.150 --> 00:37:47.100
有一个建造者，有一些测试

00:37:44.220 --> 00:37:48.690
过滤有一些测试一些静态

00:37:47.100 --> 00:37:50.430
可用的方法

00:37:48.690 --> 00:37:52.740
我输入春季安全性给您

00:37:50.430 --> 00:37:54.720
可以说的能力运行此模拟

00:37:52.740 --> 00:37:56.490
客户要求与此当前

00:37:54.720 --> 00:37:58.980
身份验证，您可以轻松模拟

00:37:56.490 --> 00:38:00.510
出这个认证令牌，然后

00:37:58.980 --> 00:38:02.310
你知道你什么时候测试

00:38:00.510 --> 00:38:04.349
测试端点时的代码

00:38:02.310 --> 00:38:06.359
可以访问令牌

00:38:04.349 --> 00:38:10.380
代码仍然有效，只是您一个

00:38:06.359 --> 00:38:12.089
我的朋友知道一个模拟令牌

00:38:10.380 --> 00:38:13.020
希望你能有所收获

00:38:12.089 --> 00:38:15.530
感谢您的收看，我们将

00:38:13.020 --> 00:38:15.530
下次见

00:38:21.839 --> 00:38:23.900
您

